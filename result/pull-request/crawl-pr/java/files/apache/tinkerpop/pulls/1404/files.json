[
  {
    "sha": "261504abdc0721387f6ddd794f1946ae1ca0f13b",
    "filename": "gremlin-dotnet/src/Gremlin.Net/Driver/ConnectionPool.cs",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/apache/tinkerpop/blob/9f73bd3fa3ac68dc75a8306e8375e41a0335109c/gremlin-dotnet/src/Gremlin.Net/Driver/ConnectionPool.cs",
    "raw_url": "https://github.com/apache/tinkerpop/raw/9f73bd3fa3ac68dc75a8306e8375e41a0335109c/gremlin-dotnet/src/Gremlin.Net/Driver/ConnectionPool.cs",
    "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-dotnet/src/Gremlin.Net/Driver/ConnectionPool.cs?ref=9f73bd3fa3ac68dc75a8306e8375e41a0335109c",
    "patch": "@@ -64,19 +64,21 @@ public IConnection GetAvailableConnection()\n \n             return ProxiedConnection(connection);\n         }\n+        \n+        private bool IsHealthy => _deadConnections.IsEmpty && _connections.Count == _settings.PoolSize;\n \n         private TimeSpan ComputeRetrySleepDuration(int retryAttemptNr)\n         {\n             return TimeSpan.FromTicks(_settings.ReconnectionBaseDelay.Ticks * (long) Math.Pow(2, retryAttemptNr));\n         }\n-\n+        \n         /// <summary>\n         ///     Replaces dead connections.\n         /// </summary>\n         /// <returns>True if the pool was repaired, false if repairing was not necessary.</returns>\n         private async Task<bool> EnsurePoolIsHealthyAsync()\n         {\n-            if (_deadConnections.IsEmpty) return false;\n+            if (IsHealthy) return false;\n             var poolState = Interlocked.CompareExchange(ref _poolState, PoolPopulationInProgress, PoolIdle);\n             if (poolState == PoolPopulationInProgress) return false;\n             try\n@@ -91,7 +93,7 @@ private async Task<bool> EnsurePoolIsHealthyAsync()\n \n             return true;\n         }\n-        \n+\n         private async Task ReplaceDeadConnectionsAsync()\n         {\n             RemoveDeadConnections();\n@@ -151,6 +153,10 @@ private async Task<IConnection> CreateNewConnectionAsync()\n         private IConnection GetConnectionFromPool()\n         {\n             var connections = _connections.Snapshot;\n+            if (connections.Length < _settings.PoolSize)\n+            {\n+                TriggerReplacementOfDeadConnections();\n+            }\n             if (connections.Length == 0) throw new ServerUnavailableException();\n             return TryGetAvailableConnection(connections);\n         }"
  },
  {
    "sha": "fcc8eb5b7225ee0404d012ee336da0eb5cb83e3e",
    "filename": "gremlin-dotnet/test/Gremlin.Net.UnitTest/Driver/ConnectionPoolTests.cs",
    "status": "modified",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/apache/tinkerpop/blob/9f73bd3fa3ac68dc75a8306e8375e41a0335109c/gremlin-dotnet/test/Gremlin.Net.UnitTest/Driver/ConnectionPoolTests.cs",
    "raw_url": "https://github.com/apache/tinkerpop/raw/9f73bd3fa3ac68dc75a8306e8375e41a0335109c/gremlin-dotnet/test/Gremlin.Net.UnitTest/Driver/ConnectionPoolTests.cs",
    "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-dotnet/test/Gremlin.Net.UnitTest/Driver/ConnectionPoolTests.cs?ref=9f73bd3fa3ac68dc75a8306e8375e41a0335109c",
    "patch": "@@ -72,6 +72,59 @@ public void GetAvailableConnectionShouldThrowIfAllConnectionsAreClosed()\n \n             Assert.Throws<ServerUnavailableException>(() => pool.GetAvailableConnection());\n         }\n+\n+        [Fact]\n+        public void GetAvailableConnectionShouldEmptyPoolIfServerUnavailable()\n+        {\n+            var fakeConnectionFactory = new Mock<IConnectionFactory>();\n+            fakeConnectionFactory.SetupSequence(m => m.CreateConnection()).Returns(ClosedConnection)\n+                .Returns(ClosedConnection).Returns(ClosedConnection);\n+            var pool = CreateConnectionPool(fakeConnectionFactory.Object, 3);\n+            fakeConnectionFactory.Setup(m => m.CreateConnection()).Returns(CannotConnectConnection);\n+\n+            Assert.Throws<ServerUnavailableException>(() => pool.GetAvailableConnection());\n+                \n+            Assert.Equal(0, pool.NrConnections);\n+        }\n+        \n+        [Fact]\n+        public void GetAvailableConnectionShouldEventuallyRefillPoolIfEmpty()\n+        {\n+            var fakeConnectionFactory = new Mock<IConnectionFactory>();\n+            fakeConnectionFactory.SetupSequence(m => m.CreateConnection()).Returns(ClosedConnection)\n+                .Returns(ClosedConnection).Returns(ClosedConnection);\n+            var pool = CreateConnectionPool(fakeConnectionFactory.Object, 3);\n+            fakeConnectionFactory.Setup(m => m.CreateConnection()).Returns(CannotConnectConnection);\n+            Assert.Throws<ServerUnavailableException>(() => pool.GetAvailableConnection());\n+            // Pool is now empty\n+            Assert.Equal(0, pool.NrConnections); \n+            fakeConnectionFactory.Setup(m => m.CreateConnection()).Returns(OpenConnection);\n+            \n+            pool.GetAvailableConnection();\n+            \n+            AssertNrOpenConnections(pool, 3);\n+        }\n+\n+        [Fact]\n+        public void GetAvailableConnectionsShouldEventuallyFillUpPoolIfNotFull()\n+        {\n+            var fakeConnectionFactory = new Mock<IConnectionFactory>();\n+            fakeConnectionFactory.SetupSequence(m => m.CreateConnection())\n+                .Returns(ClosedConnection)\n+                .Returns(ClosedConnection)\n+                .Returns(OpenConnection);\n+            var pool = CreateConnectionPool(fakeConnectionFactory.Object, 3);\n+            fakeConnectionFactory.Setup(m => m.CreateConnection()).Returns(CannotConnectConnection);\n+            pool.GetAvailableConnection();\n+            pool.GetAvailableConnection();\n+            // Pool is now just partially filled\n+            Assert.Equal(1, pool.NrConnections); \n+            \n+            fakeConnectionFactory.Setup(m => m.CreateConnection()).Returns(OpenConnection);\n+            pool.GetAvailableConnection();\n+            \n+            AssertNrOpenConnections(pool, 3);\n+        }\n         \n         [Fact]\n         public void GetAvailableConnectionShouldReplaceClosedConnections()\n@@ -201,6 +254,17 @@ private static IConnection ClosedConnection\n                 return fakedConnection.Object;\n             }\n         }\n+        \n+        private static IConnection CannotConnectConnection\n+        {\n+            get\n+            {\n+                var fakedConnection = new Mock<IConnection>();\n+                fakedConnection.Setup(f => f.IsOpen).Returns(false);\n+                fakedConnection.Setup(f => f.ConnectAsync()).Throws(new Exception(\"Cannot connect to server.\"));\n+                return fakedConnection.Object;\n+            }\n+        }\n \n         private static ConnectionPool CreateConnectionPool(IConnectionFactory connectionFactory, int poolSize = 2,\n             int reconnectionAttempts = 1)"
  }
]
