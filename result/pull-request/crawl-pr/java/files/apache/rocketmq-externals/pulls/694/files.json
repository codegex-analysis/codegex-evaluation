[
  {
    "sha": "501909bb367935098b55856c4296e16d8ef8c1c5",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java",
    "status": "modified",
    "additions": 2,
    "deletions": 6,
    "changes": 8,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -49,7 +49,6 @@\n import org.apache.rocketmq.connect.runtime.service.DefaultConnectorContext;\n import org.apache.rocketmq.connect.runtime.service.PositionManagementService;\n import org.apache.rocketmq.connect.runtime.service.TaskPositionCommitService;\n-import org.apache.rocketmq.connect.runtime.store.PositionStorageReaderImpl;\n import org.apache.rocketmq.connect.runtime.utils.ConnectUtil;\n import org.apache.rocketmq.connect.runtime.utils.Plugin;\n import org.apache.rocketmq.connect.runtime.utils.PluginClassLoader;\n@@ -394,8 +393,7 @@ public void maintainTaskState() throws Exception {\n                 if (task instanceof SourceTask) {\n                     checkRmqProducerState();\n                     WorkerSourceTask workerSourceTask = new WorkerSourceTask(connectorName,\n-                        (SourceTask) task, keyValue,\n-                        new PositionStorageReaderImpl(positionManagementService), recordConverter, producer);\n+                        (SourceTask) task, keyValue, positionManagementService, recordConverter, producer);\n                     Plugin.compareAndSwapLoaders(currentThreadLoader);\n \n                     Future future = taskExecutor.submit(workerSourceTask);\n@@ -412,9 +410,7 @@ public void maintainTaskState() throws Exception {\n                     consumer.start();\n \n                     WorkerSinkTask workerSinkTask = new WorkerSinkTask(connectorName,\n-                        (SinkTask) task, keyValue,\n-                        new PositionStorageReaderImpl(offsetManagementService),\n-                        recordConverter, consumer);\n+                        (SinkTask) task, keyValue, offsetManagementService, recordConverter, consumer);\n                     Plugin.compareAndSwapLoaders(currentThreadLoader);\n                     Future future = taskExecutor.submit(workerSinkTask);\n                     taskToFutureMap.put(workerSinkTask, future);"
  },
  {
    "sha": "18987986240cd913765d0ed4263df7dc973781e1",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java",
    "status": "modified",
    "additions": 10,
    "deletions": 15,
    "changes": 25,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -53,6 +53,8 @@\n import org.apache.rocketmq.connect.runtime.config.RuntimeConfigDefine;\n import org.apache.rocketmq.connect.runtime.converter.JsonConverter;\n import org.apache.rocketmq.connect.runtime.converter.RocketMQConverter;\n+import org.apache.rocketmq.connect.runtime.service.PositionManagementService;\n+import org.apache.rocketmq.connect.runtime.store.PositionStorageReaderImpl;\n import org.apache.rocketmq.remoting.exception.RemotingException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -101,6 +103,8 @@\n      */\n     private final DefaultMQPullConsumer consumer;\n \n+    private final PositionManagementService offsetManagementService;\n+\n     /**\n      *\n      */\n@@ -111,11 +115,6 @@\n      */\n     private Converter recordConverter;\n \n-    /**\n-     * Current position info of the source task.\n-     */\n-    private Map<ByteBuffer, ByteBuffer> offsetData = new HashMap<>();\n-\n     private final ConcurrentHashMap<MessageQueue, Long> messageQueuesOffsetMap;\n \n     private final ConcurrentHashMap<MessageQueue, QueueState> messageQueuesStateMap;\n@@ -133,14 +132,15 @@\n     public WorkerSinkTask(String connectorName,\n         SinkTask sinkTask,\n         ConnectKeyValue taskConfig,\n-        PositionStorageReader offsetStorageReader,\n+        PositionManagementService offsetManagementService,\n         Converter recordConverter,\n         DefaultMQPullConsumer consumer) {\n         this.connectorName = connectorName;\n         this.sinkTask = sinkTask;\n         this.taskConfig = taskConfig;\n         this.consumer = consumer;\n-        this.offsetStorageReader = offsetStorageReader;\n+        this.offsetManagementService = offsetManagementService;\n+        this.offsetStorageReader = new PositionStorageReaderImpl(offsetManagementService);\n         this.recordConverter = recordConverter;\n         this.messageQueuesOffsetMap = new ConcurrentHashMap<>(256);\n         this.messageQueuesStateMap = new ConcurrentHashMap<>(256);\n@@ -166,7 +166,7 @@ public void resetOffset(QueueMetaData queueMetaData, Long offset) {\n                             Integer queueId = Integer.valueOf(s[1]);\n                             MessageQueue messageQueue = new MessageQueue(queueName, brokerName, queueId);\n                             messageQueuesOffsetMap.put(messageQueue, offset);\n-                            offsetData.put(convertToByteBufferKey(messageQueue), convertToByteBufferValue(offset));\n+                            offsetManagementService.putPosition(convertToByteBufferKey(messageQueue), convertToByteBufferValue(offset));\n                             return;\n                         }\n                     }\n@@ -185,7 +185,7 @@ public void resetOffset(Map<QueueMetaData, Long> offsets) {\n                                 Integer queueId = Integer.valueOf(s[1]);\n                                 MessageQueue messageQueue = new MessageQueue(queueName, brokerName, queueId);\n                                 messageQueuesOffsetMap.put(messageQueue, entry.getValue());\n-                                offsetData.put(convertToByteBufferKey(messageQueue), convertToByteBufferValue(entry.getValue()));\n+                                offsetManagementService.putPosition(convertToByteBufferKey(messageQueue), convertToByteBufferValue(entry.getValue()));\n                                 continue;\n                             }\n                         }\n@@ -310,7 +310,7 @@ private void pullMessageFromQueues() throws MQClientException, RemotingException\n                 final List<MessageExt> messages = pullResult.getMsgFoundList();\n                 receiveMessages(messages);\n                 messageQueuesOffsetMap.put(entry.getKey(), pullResult.getNextBeginOffset());\n-                offsetData.put(convertToByteBufferKey(entry.getKey()), convertToByteBufferValue(pullResult.getNextBeginOffset()));\n+                offsetManagementService.putPosition(convertToByteBufferKey(entry.getKey()), convertToByteBufferValue(pullResult.getNextBeginOffset()));\n                 preCommit();\n             }\n         }\n@@ -494,9 +494,4 @@ private ByteBuffer convertToByteBufferValue(Long offset) {\n     private Long convertToOffset(ByteBuffer byteBuffer) {\n         return Long.valueOf(new String(byteBuffer.array()));\n     }\n-\n-    public Map<ByteBuffer, ByteBuffer> getOffsetData() {\n-        return offsetData;\n-    }\n-\n }"
  },
  {
    "sha": "44e827877d9a83d6df714fcd5ee28abe82280189",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java",
    "status": "modified",
    "additions": 8,
    "deletions": 15,
    "changes": 23,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -31,7 +31,6 @@\n import java.util.Base64;\n import java.util.Collection;\n import java.util.HashMap;\n-import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n@@ -45,6 +44,8 @@\n import org.apache.rocketmq.connect.runtime.common.LoggerName;\n import org.apache.rocketmq.connect.runtime.config.RuntimeConfigDefine;\n import org.apache.rocketmq.connect.runtime.converter.RocketMQConverter;\n+import org.apache.rocketmq.connect.runtime.service.PositionManagementService;\n+import org.apache.rocketmq.connect.runtime.store.PositionStorageReaderImpl;\n import org.apache.rocketmq.remoting.exception.RemotingException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -76,6 +77,8 @@\n      */\n     private AtomicReference<WorkerTaskState> state;\n \n+    private final PositionManagementService positionManagementService;\n+\n     /**\n      * Used to read the position of source data source.\n      */\n@@ -91,21 +94,17 @@\n      */\n     private Converter recordConverter;\n \n-    /**\n-     * Current position info of the source task.\n-     */\n-    private Map<ByteBuffer, ByteBuffer> positionData = new HashMap<>();\n-\n     public WorkerSourceTask(String connectorName,\n         SourceTask sourceTask,\n         ConnectKeyValue taskConfig,\n-        PositionStorageReader positionStorageReader,\n+        PositionManagementService positionManagementService,\n         Converter recordConverter,\n         DefaultMQProducer producer) {\n         this.connectorName = connectorName;\n         this.sourceTask = sourceTask;\n         this.taskConfig = taskConfig;\n-        this.positionStorageReader = positionStorageReader;\n+        this.positionManagementService = positionManagementService;\n+        this.positionStorageReader = new PositionStorageReaderImpl(positionManagementService);\n         this.producer = producer;\n         this.recordConverter = recordConverter;\n         this.state = new AtomicReference<>(WorkerTaskState.NEW);\n@@ -152,12 +151,6 @@ public KeyValue configs() {\n         }\n     }\n \n-    public Map<ByteBuffer, ByteBuffer> getPositionData() {\n-        return positionData;\n-    }\n-\n-\n-\n     @Override\n     public void stop() {\n         state.compareAndSet(WorkerTaskState.RUNNING, WorkerTaskState.STOPPING);\n@@ -243,7 +236,7 @@ private void sendRecord(Collection<SourceDataEntry> sourceDataEntries) {\n                         log.info(\"Successful send message to RocketMQ:{}\", result.getMsgId());\n                         try {\n                             if (null != partition && null != position) {\n-                                positionData.put(partition, position);\n+                                positionManagementService.putPosition(partition, position);\n                             }\n                         } catch (Exception e) {\n                             log.error(\"Source task save position info failed.\", e);"
  },
  {
    "sha": "87e818c6da53959ac4502102a8ca3e78f200c4f4",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -78,6 +78,7 @@ public void start() {\n     @Override\n     public void stop() {\n \n+        sendSynchronizeOffset();\n         offsetStore.persist();\n         dataSynchronizer.stop();\n     }\n@@ -88,17 +89,34 @@ public void persist() {\n         offsetStore.persist();\n     }\n \n+    @Override\n+    public void synchronize() {\n+\n+        sendSynchronizeOffset();\n+    }\n+\n     @Override\n     public Map<ByteBuffer, ByteBuffer> getPositionTable() {\n \n         return offsetStore.getKVMap();\n     }\n \n+    @Override\n+    public ByteBuffer getPosition(ByteBuffer partition) {\n+\n+        return offsetStore.get(partition);\n+    }\n+\n     @Override\n     public void putPosition(Map<ByteBuffer, ByteBuffer> offsets) {\n \n         offsetStore.putAll(offsets);\n-        sendSynchronizeOffset();\n+    }\n+\n+    @Override\n+    public void putPosition(ByteBuffer partition, ByteBuffer position) {\n+\n+        offsetStore.put(partition, position);\n     }\n \n     @Override\n@@ -133,9 +151,6 @@ private void sendSynchronizeOffset() {\n         @Override\n         public void onCompletion(Throwable error, String key, Map<ByteBuffer, ByteBuffer> result) {\n \n-            // update offsetStore\n-            OffsetManagementServiceImpl.this.persist();\n-\n             boolean changed = false;\n             switch (OffsetChangeEnum.valueOf(key)) {\n                 case ONLINE_KEY:"
  },
  {
    "sha": "914b53e5a09a307269cc23e2f3e8b63cefba33e7",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementService.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementService.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementService.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementService.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -41,18 +41,27 @@\n      */\n     void persist();\n \n+    /**\n+     * Synchronize to other nodes.\n+     * */\n+    void synchronize();\n+\n     /**\n      * Get the current position table.\n      *\n      * @return\n      */\n     Map<ByteBuffer, ByteBuffer> getPositionTable();\n \n+    ByteBuffer getPosition(ByteBuffer partition);\n+\n     /**\n      * Put a position info.\n      */\n     void putPosition(Map<ByteBuffer, ByteBuffer> positions);\n \n+    void putPosition(ByteBuffer partition, ByteBuffer position);\n+\n     /**\n      * Remove a position info.\n      *"
  },
  {
    "sha": "986c98b8a6cb649148dc1c3ee5040a747abd9d2e",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -78,6 +78,7 @@ public void start() {\n     @Override\n     public void stop() {\n \n+        sendSynchronizePosition();\n         positionStore.persist();\n         dataSynchronizer.stop();\n     }\n@@ -88,17 +89,34 @@ public void persist() {\n         positionStore.persist();\n     }\n \n+    @Override\n+    public void synchronize() {\n+\n+        sendSynchronizePosition();\n+    }\n+\n     @Override\n     public Map<ByteBuffer, ByteBuffer> getPositionTable() {\n \n         return positionStore.getKVMap();\n     }\n \n+    @Override\n+    public ByteBuffer getPosition(ByteBuffer partition) {\n+\n+        return positionStore.get(partition);\n+    }\n+\n     @Override\n     public void putPosition(Map<ByteBuffer, ByteBuffer> positions) {\n \n         positionStore.putAll(positions);\n-        sendSynchronizePosition();\n+    }\n+\n+    @Override\n+    public void putPosition(ByteBuffer partition, ByteBuffer position) {\n+\n+        positionStore.put(partition, position);\n     }\n \n     @Override\n@@ -133,9 +151,6 @@ private void sendSynchronizePosition() {\n         @Override\n         public void onCompletion(Throwable error, String key, Map<ByteBuffer, ByteBuffer> result) {\n \n-            // update positionStore\n-            PositionManagementServiceImpl.this.persist();\n-\n             boolean changed = false;\n             switch (PositionChangeEnum.valueOf(key)) {\n                 case ONLINE_KEY:"
  },
  {
    "sha": "8d081d6011d41f5198b57cc7e09a080b736a25b2",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/TaskPositionCommitService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 16,
    "changes": 20,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/TaskPositionCommitService.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/TaskPositionCommitService.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/TaskPositionCommitService.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -17,13 +17,8 @@\n \n package org.apache.rocketmq.connect.runtime.service;\n \n-import java.nio.ByteBuffer;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.rocketmq.connect.runtime.common.LoggerName;\n import org.apache.rocketmq.connect.runtime.connectorwrapper.Worker;\n-import org.apache.rocketmq.connect.runtime.connectorwrapper.WorkerSinkTask;\n-import org.apache.rocketmq.connect.runtime.connectorwrapper.WorkerSourceTask;\n import org.apache.rocketmq.connect.runtime.utils.ServiceThread;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -71,16 +66,9 @@ public String getServiceName() {\n \n \n     public void commitTaskPosition() {\n-        Map<ByteBuffer, ByteBuffer> positionData = new HashMap<>();\n-        Map<ByteBuffer, ByteBuffer> offsetData = new HashMap<>();\n-        for (Runnable task : worker.getWorkingTasks()) {\n-            if (task instanceof WorkerSourceTask) {\n-                positionData.putAll(((WorkerSourceTask) task).getPositionData());\n-                positionManagementService.putPosition(positionData);\n-            } else if (task instanceof WorkerSinkTask) {\n-                offsetData.putAll(((WorkerSinkTask) task).getOffsetData());\n-                offsetManagementService.putPosition(offsetData);\n-            }\n-        }\n+        positionManagementService.persist();\n+        offsetManagementService.persist();\n+        positionManagementService.synchronize();\n+        positionManagementService.synchronize();\n     }\n }"
  },
  {
    "sha": "e05f7ed8193cb0ab9fd0efb3e8675718ced4b406",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerTest.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerTest.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerTest.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -31,10 +31,7 @@\n import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;\n import org.apache.rocketmq.connect.runtime.config.ConnectConfig;\n import org.apache.rocketmq.connect.runtime.config.RuntimeConfigDefine;\n-import org.apache.rocketmq.connect.runtime.connectorwrapper.testimpl.TestConnector;\n-import org.apache.rocketmq.connect.runtime.connectorwrapper.testimpl.TestConverter;\n-import org.apache.rocketmq.connect.runtime.connectorwrapper.testimpl.TestPositionStorageReader;\n-import org.apache.rocketmq.connect.runtime.connectorwrapper.testimpl.TestSourceTask;\n+import org.apache.rocketmq.connect.runtime.connectorwrapper.testimpl.*;\n import org.apache.rocketmq.connect.runtime.service.PositionManagementService;\n import org.apache.rocketmq.connect.runtime.utils.Plugin;\n import org.apache.rocketmq.connect.runtime.utils.TestUtils;\n@@ -98,7 +95,7 @@ public void init() {\n             runnables.add(new WorkerSourceTask(\"TEST-CONN-\" + i,\n                 new TestSourceTask(),\n                 connectKeyValue,\n-                new TestPositionStorageReader(),\n+                new TestPositionManageServiceImpl(),\n                 new TestConverter(),\n                 producer\n             ));\n@@ -164,7 +161,7 @@ public void testStartTasks() throws Exception {\n                 workerSinkTask = (WorkerSinkTask) runnable;\n             }\n             String connectorName = null != workerSourceTask ? workerSourceTask.getConnectorName() : workerSinkTask.getConnectorName();\n-            assertThat(connectorName).isIn(\"TEST-CONN-1\", \"TEST-CONN-2\", \"TEST-CONN-3\");\n+            assertThat(connectorName).isIn(\"TEST-CONN-0\", \"TEST-CONN-1\", \"TEST-CONN-2\", \"TEST-CONN-3\");\n         }\n     }\n }"
  },
  {
    "sha": "6cf349268d3bae48f14f37cff7c51303bb41f46a",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/testimpl/TestPositionManageServiceImpl.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/testimpl/TestPositionManageServiceImpl.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/testimpl/TestPositionManageServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/testimpl/TestPositionManageServiceImpl.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -0,0 +1,60 @@\n+package org.apache.rocketmq.connect.runtime.connectorwrapper.testimpl;\n+\n+import org.apache.rocketmq.connect.runtime.service.PositionManagementService;\n+\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TestPositionManageServiceImpl implements PositionManagementService {\n+\n+    @Override\n+    public void start() {\n+\n+    }\n+\n+    @Override\n+    public void stop() {\n+\n+    }\n+\n+    @Override\n+    public void persist() {\n+\n+    }\n+\n+    @Override\n+    public void synchronize() {\n+\n+    }\n+\n+    @Override\n+    public Map<ByteBuffer, ByteBuffer> getPositionTable() {\n+        return null;\n+    }\n+\n+    @Override\n+    public ByteBuffer getPosition(ByteBuffer partition) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void putPosition(Map<ByteBuffer, ByteBuffer> positions) {\n+\n+    }\n+\n+    @Override\n+    public void putPosition(ByteBuffer partition, ByteBuffer position) {\n+\n+    }\n+\n+    @Override\n+    public void removePosition(List<ByteBuffer> partitions) {\n+\n+    }\n+\n+    @Override\n+    public void registerListener(PositionUpdateListener listener) {\n+\n+    }\n+}"
  },
  {
    "sha": "133abf3878af3e712ac1f4f77b7f5ad0663cddbb",
    "filename": "rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/rest/RestHandlerTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 16,
    "changes": 29,
    "blob_url": "https://github.com/apache/rocketmq-externals/blob/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/rest/RestHandlerTest.java",
    "raw_url": "https://github.com/apache/rocketmq-externals/raw/4f08f518e4be4f4e40d281458de62a42e08f2c34/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/rest/RestHandlerTest.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq-externals/contents/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/rest/RestHandlerTest.java?ref=4f08f518e4be4f4e40d281458de62a42e08f2c34",
    "patch": "@@ -20,7 +20,6 @@\n import com.alibaba.fastjson.JSON;\n import com.alibaba.fastjson.JSONObject;\n import io.openmessaging.connector.api.Connector;\n-import io.openmessaging.connector.api.PositionStorageReader;\n import io.openmessaging.connector.api.data.Converter;\n import io.openmessaging.connector.api.source.SourceTask;\n import java.net.URI;\n@@ -48,6 +47,7 @@\n import org.apache.rocketmq.connect.runtime.service.ClusterManagementService;\n import org.apache.rocketmq.connect.runtime.service.ConfigManagementService;\n import org.apache.rocketmq.connect.runtime.service.DefaultConnectorContext;\n+import org.apache.rocketmq.connect.runtime.service.PositionManagementServiceImpl;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -89,7 +89,7 @@\n     private Converter converter;\n \n     @Mock\n-    private PositionStorageReader positionStorageReader;\n+    private PositionManagementServiceImpl positionManagementServiceImpl;\n \n     @Mock\n     private Connector connector;\n@@ -110,7 +110,7 @@\n \n     private static final String GET_POSITION_INFO_URL = \"http://localhost:8081/getPositionInfo\";\n \n-    private static final String GET_ALLOCATED_INFO_URL = \"http://localhost:8081/getAllocatedInfo\";\n+    private static final String GET_ALLOCATED_CONNECTORS_URL = \"http://localhost:8081/getAllocatedConnectors\";\n \n     private HttpClient httpClient;\n \n@@ -187,8 +187,8 @@ public void init() throws Exception {\n                 add(workerConnector2);\n             }\n         };\n-        WorkerSourceTask workerSourceTask1 = new WorkerSourceTask(\"testConnectorName1\", sourceTask, connectKeyValue, positionStorageReader, converter, producer);\n-        WorkerSourceTask workerSourceTask2 = new WorkerSourceTask(\"testConnectorName2\", sourceTask, connectKeyValue1, positionStorageReader, converter, producer);\n+        WorkerSourceTask workerSourceTask1 = new WorkerSourceTask(\"testConnectorName1\", sourceTask, connectKeyValue, positionManagementServiceImpl, converter, producer);\n+        WorkerSourceTask workerSourceTask2 = new WorkerSourceTask(\"testConnectorName2\", sourceTask, connectKeyValue1, positionManagementServiceImpl, converter, producer);\n         workerTasks = new HashSet<Runnable>() {\n             {\n                 add(workerSourceTask1);\n@@ -233,24 +233,21 @@ public void testRESTful() throws Exception {\n         HttpGet httpGet3 = new HttpGet(uri3);\n         HttpResponse httpResponse3 = httpClient.execute(httpGet3);\n         assertEquals(200, httpResponse3.getStatusLine().getStatusCode());\n-        String expectedResultConfig = \"ConnectorConfigs:\" + JSON.toJSONString(connectorConfigs) + \"\\nTaskConfigs:\" + JSON.toJSONString(taskConfigs);\n-        assertEquals(expectedResultConfig, EntityUtils.toString(httpResponse3.getEntity(), \"UTF-8\"));\n+        Map<String, Map> formatter = new HashMap<>();\n+        formatter.put(\"connectorConfigs\", connectorConfigs);\n+        formatter.put(\"taskConfigs\", taskConfigs);\n+        assertEquals(JSON.toJSONString(formatter), EntityUtils.toString(httpResponse3.getEntity(), \"UTF-8\"));\n \n-        URIBuilder uriBuilder4 = new URIBuilder(GET_ALLOCATED_INFO_URL);\n+        URIBuilder uriBuilder4 = new URIBuilder(GET_ALLOCATED_CONNECTORS_URL);\n         URI uri4 = uriBuilder4.build();\n         HttpGet httpGet4 = new HttpGet(uri4);\n         HttpResponse httpResponse4 = httpClient.execute(httpGet4);\n         assertEquals(200, httpResponse4.getStatusLine().getStatusCode());\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"working connectors:\\n\");\n+        Map<String, ConnectKeyValue> connectors = new HashMap<>();\n         for (WorkerConnector workerConnector : workerConnectors) {\n-            sb.append(workerConnector.toString() + \"\\n\");\n+            connectors.put(workerConnector.getConnectorName(), workerConnector.getKeyValue());\n         }\n-        sb.append(\"working tasks:\\n\");\n-        for (Runnable runnable : workerTasks) {\n-            sb.append(runnable.toString() + \"\\n\");\n-        }\n-        assertEquals(sb.toString(), EntityUtils.toString(httpResponse4.getEntity(), \"UTF-8\"));\n+        assertEquals(JSON.toJSONString(connectors), EntityUtils.toString(httpResponse4.getEntity(), \"UTF-8\"));\n     }\n \n }\n\\ No newline at end of file"
  }
]
