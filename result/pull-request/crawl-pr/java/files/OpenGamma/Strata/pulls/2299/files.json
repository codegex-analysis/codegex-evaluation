[
  {
    "sha": "b3ce70b43cc39c0b39bea77df47ff3491e3fab79",
    "filename": "modules/collect/src/main/java/com/opengamma/strata/collect/MapStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/OpenGamma/Strata/blob/be768abf6ceb1aa605909a163bf89727f526a0c5/modules/collect/src/main/java/com/opengamma/strata/collect/MapStream.java",
    "raw_url": "https://github.com/OpenGamma/Strata/raw/be768abf6ceb1aa605909a163bf89727f526a0c5/modules/collect/src/main/java/com/opengamma/strata/collect/MapStream.java",
    "contents_url": "https://api.github.com/repos/OpenGamma/Strata/contents/modules/collect/src/main/java/com/opengamma/strata/collect/MapStream.java?ref=be768abf6ceb1aa605909a163bf89727f526a0c5",
    "patch": "@@ -277,8 +277,8 @@ private MapStream(Stream<Map.Entry<K, V>> underlying) {\n    * @param predicate  a predicate function applied to each key and value in the stream\n    * @return a stream including the entries for which the predicate function returned true\n    */\n-  public MapStream<K, V> filter(BiFunction<? super K, ? super V, Boolean> predicate) {\n-    return wrap(underlying.filter(e -> predicate.apply(e.getKey(), e.getValue())));\n+  public MapStream<K, V> filter(BiPredicate<? super K, ? super V> predicate) {\n+    return wrap(underlying.filter(e -> predicate.test(e.getKey(), e.getValue())));\n   }\n \n   /**"
  }
]
