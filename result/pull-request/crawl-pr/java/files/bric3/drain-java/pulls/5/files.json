[
  {
    "sha": "cce0176c7f81ce43b8ded53661487728c7d255ff",
    "filename": "DrainModels/SSH_Drain.json",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/DrainModels/SSH_Drain.json",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/DrainModels/SSH_Drain.json",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/DrainModels/SSH_Drain.json?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -0,0 +1 @@\n+{\"depth\":2,\"similarityThreshold\":0.4,\"maxChildPerNode\":100,\"delimiters\":\" _\",\"clusters\":[{\"clusterId\":1,\"sightings\":18909,\"logTemplateTokens\":[\"reverse\",\"mapping\",\"checking\",\"getaddrinfo\",\"for\",\"<*>\",\"<*>\",\"failed\",\"-\",\"POSSIBLE\",\"BREAK-IN\",\"ATTEMPT!\"]},{\"clusterId\":2,\"sightings\":14551,\"logTemplateTokens\":[\"Invalid\",\"user\",\"<*>\",\"from\",\"<*>\"]},{\"clusterId\":3,\"sightings\":14551,\"logTemplateTokens\":[\"input\",\"userauth\",\"request:\",\"invalid\",\"user\",\"<*>\",\"[preauth]\"]},{\"clusterId\":4,\"sightings\":19852,\"logTemplateTokens\":[\"pam\",\"unix(sshd:auth):\",\"check\",\"pass;\",\"user\",\"unknown\"]},{\"clusterId\":5,\"sightings\":14356,\"logTemplateTokens\":[\"pam\",\"unix(sshd:auth):\",\"authentication\",\"failure;\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\"]},{\"clusterId\":6,\"sightings\":20241,\"logTemplateTokens\":[\"Failed\",\"<*>\",\"for\",\"invalid\",\"user\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]},{\"clusterId\":7,\"sightings\":68958,\"logTemplateTokens\":[\"Connection\",\"closed\",\"by\",\"<*>\",\"[preauth]\"]},{\"clusterId\":8,\"sightings\":46642,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"<*>\",\"<*>\",\"<*>\"]},{\"clusterId\":9,\"sightings\":140701,\"logTemplateTokens\":[\"pam\",\"unix(sshd:auth):\",\"authentication\",\"failure;\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\",\"<*>\"]},{\"clusterId\":10,\"sightings\":140768,\"logTemplateTokens\":[\"Failed\",\"password\",\"for\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]},{\"clusterId\":11,\"sightings\":36967,\"logTemplateTokens\":[\"message\",\"repeated\",\"<*>\",\"times:\",\"[\",\"Failed\",\"password\",\"for\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2]\"]},{\"clusterId\":12,\"sightings\":37298,\"logTemplateTokens\":[\"Disconnecting:\",\"Too\",\"many\",\"authentication\",\"failures\",\"for\",\"<*>\",\"[preauth]\"]},{\"clusterId\":13,\"sightings\":37029,\"logTemplateTokens\":[\"PAM\",\"<*>\",\"more\",\"authentication\",\"<*>\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\",\"<*>\"]},{\"clusterId\":14,\"sightings\":37963,\"logTemplateTokens\":[\"PAM\",\"service(sshd)\",\"ignoring\",\"max\",\"retries;\",\"<*>\",\">\",\"3\"]},{\"clusterId\":15,\"sightings\":838,\"logTemplateTokens\":[\"Did\",\"not\",\"receive\",\"identification\",\"string\",\"from\",\"<*>\"]},{\"clusterId\":16,\"sightings\":177,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"<*>\",\"3:\",\"com.jcraft.jsch.JSchException:\",\"Auth\",\"<*>\",\"[preauth]\"]},{\"clusterId\":17,\"sightings\":592,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"Closed\",\"due\",\"to\",\"user\",\"request.\",\"[preauth]\"]},{\"clusterId\":18,\"sightings\":1289,\"logTemplateTokens\":[\"PAM\",\"<*>\",\"more\",\"authentication\",\"<*>\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\"]},{\"clusterId\":19,\"sightings\":930,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"103.99.0.122:\",\"14:\",\"No\",\"more\",\"user\",\"authentication\",\"methods\",\"available.\",\"[preauth]\"]},{\"clusterId\":20,\"sightings\":182,\"logTemplateTokens\":[\"Accepted\",\"password\",\"for\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]},{\"clusterId\":21,\"sightings\":182,\"logTemplateTokens\":[\"pam\",\"unix(sshd:session):\",\"session\",\"opened\",\"for\",\"user\",\"<*>\",\"by\",\"(uid=0)\"]},{\"clusterId\":22,\"sightings\":182,\"logTemplateTokens\":[\"pam\",\"unix(sshd:session):\",\"session\",\"closed\",\"for\",\"user\",\"<*>\"]},{\"clusterId\":23,\"sightings\":3,\"logTemplateTokens\":[\"fatal:\",\"Write\",\"failed:\",\"Connection\",\"reset\",\"by\",\"peer\",\"[preauth]\"]},{\"clusterId\":24,\"sightings\":952,\"logTemplateTokens\":[\"fatal:\",\"Read\",\"from\",\"socket\",\"failed:\",\"Connection\",\"reset\",\"by\",\"peer\",\"[preauth]\"]},{\"clusterId\":25,\"sightings\":2,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"191.96.249.68:\",\"13:\",\"User\",\"request\",\"[preauth]\"]},{\"clusterId\":26,\"sightings\":1,\"logTemplateTokens\":[\"Bad\",\"packet\",\"length\",\"1819045217.\",\"[preauth]\"]},{\"clusterId\":27,\"sightings\":1,\"logTemplateTokens\":[\"Disconnecting:\",\"Packet\",\"corrupt\",\"[preauth]\"]},{\"clusterId\":28,\"sightings\":30,\"logTemplateTokens\":[\"Invalid\",\"user\",\"<*>\",\"<*>\",\"from\",\"<*>\"]},{\"clusterId\":29,\"sightings\":30,\"logTemplateTokens\":[\"input\",\"userauth\",\"request:\",\"invalid\",\"user\",\"<*>\",\"<*>\",\"[preauth]\"]},{\"clusterId\":30,\"sightings\":30,\"logTemplateTokens\":[\"Failed\",\"password\",\"for\",\"invalid\",\"user\",\"<*>\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]},{\"clusterId\":31,\"sightings\":497,\"logTemplateTokens\":[\"Address\",\"<*>\",\"maps\",\"to\",\"<*>\",\"but\",\"this\",\"does\",\"not\",\"map\",\"back\",\"to\",\"the\",\"address\",\"-\",\"POSSIBLE\",\"BREAK-IN\",\"ATTEMPT!\"]},{\"clusterId\":32,\"sightings\":108,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"[preauth]\"]},{\"clusterId\":33,\"sightings\":6,\"logTemplateTokens\":[\"fatal:\",\"no\",\"hostkey\",\"alg\",\"[preauth]\"]},{\"clusterId\":34,\"sightings\":7,\"logTemplateTokens\":[\"Bad\",\"protocol\",\"version\",\"identification\",\"<*>\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\"]},{\"clusterId\":35,\"sightings\":8,\"logTemplateTokens\":[\"Bad\",\"protocol\",\"version\",\"identification\",\"<*>\",\"<*>\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\"]},{\"clusterId\":36,\"sightings\":13,\"logTemplateTokens\":[\"Invalid\",\"user\",\"from\",\"<*>\"]},{\"clusterId\":37,\"sightings\":13,\"logTemplateTokens\":[\"input\",\"userauth\",\"request:\",\"invalid\",\"user\",\"[preauth]\"]},{\"clusterId\":38,\"sightings\":13,\"logTemplateTokens\":[\"Failed\",\"<*>\",\"for\",\"invalid\",\"user\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]},{\"clusterId\":39,\"sightings\":7,\"logTemplateTokens\":[\"Bad\",\"protocol\",\"version\",\"identification\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\"]},{\"clusterId\":40,\"sightings\":6,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"<*>\",\"<*>\",\"<*>\",\"<*>\",\"<*>\",\"<*>\",\"[preauth]\"]},{\"clusterId\":41,\"sightings\":1,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"67.160.100.130:\",\"11:\"]},{\"clusterId\":42,\"sightings\":87,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"<*>\",\"<*>\",\"<*>\",\"[preauth]\"]},{\"clusterId\":43,\"sightings\":3,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"195.154.45.62:\",\"3:\",\"com.jcraft.jsch.JSchException:\",\"timeout\",\"in\",\"waiting\",\"for\",\"rekeying\",\"process.\",\"[preauth]\"]},{\"clusterId\":44,\"sightings\":6,\"logTemplateTokens\":[\"error:\",\"connect\",\"to\",\"<*>\",\"port\",\"22:\",\"failed.\"]},{\"clusterId\":45,\"sightings\":1,\"logTemplateTokens\":[\"Corrupted\",\"MAC\",\"on\",\"input.\",\"[preauth]\"]},{\"clusterId\":46,\"sightings\":2,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"212.83.176.1:\",\"3:\",\"org.vngx.jsch.userauth.AuthCancelException:\",\"User\",\"authentication\",\"canceled\",\"by\",\"user\",\"[preauth]\"]},{\"clusterId\":47,\"sightings\":60,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"disconnect\",\"[preauth]\"]},{\"clusterId\":48,\"sightings\":6,\"logTemplateTokens\":[\"Server\",\"listening\",\"on\",\"<*>\",\"port\",\"<*>\"]},{\"clusterId\":49,\"sightings\":3,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"Disconnect\",\"requested\",\"by\",\"Windows\",\"SSH\",\"Client.\"]},{\"clusterId\":50,\"sightings\":92,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"139.59.209.18:\",\"11:\",\"Normal\",\"Shutdown,\",\"Thank\",\"you\",\"for\",\"playing\",\"[preauth]\"]},{\"clusterId\":51,\"sightings\":1,\"logTemplateTokens\":[\"syslogin\",\"perform\",\"logout:\",\"logout()\",\"returned\",\"an\",\"error\"]}],\"root\":{\"depth\":0,\"key\":\"(ROOT)\",\"keyToChildNode\":{\"18\":{\"depth\":1,\"key\":18,\"keyToChildNode\":{\"Address\":{\"depth\":2,\"key\":\"Address\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":31,\"sightings\":497,\"logTemplateTokens\":[\"Address\",\"<*>\",\"maps\",\"to\",\"<*>\",\"but\",\"this\",\"does\",\"not\",\"map\",\"back\",\"to\",\"the\",\"address\",\"-\",\"POSSIBLE\",\"BREAK-IN\",\"ATTEMPT!\"]}]}},\"clusters\":[]},\"4\":{\"depth\":1,\"key\":4,\"keyToChildNode\":{\"Disconnecting:\":{\"depth\":2,\"key\":\"Disconnecting:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":27,\"sightings\":1,\"logTemplateTokens\":[\"Disconnecting:\",\"Packet\",\"corrupt\",\"[preauth]\"]}]},\"Invalid\":{\"depth\":2,\"key\":\"Invalid\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":36,\"sightings\":13,\"logTemplateTokens\":[\"Invalid\",\"user\",\"from\",\"<*>\"]}]}},\"clusters\":[]},\"5\":{\"depth\":1,\"key\":5,\"keyToChildNode\":{\"Corrupted\":{\"depth\":2,\"key\":\"Corrupted\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":45,\"sightings\":1,\"logTemplateTokens\":[\"Corrupted\",\"MAC\",\"on\",\"input.\",\"[preauth]\"]}]},\"Bad\":{\"depth\":2,\"key\":\"Bad\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":26,\"sightings\":1,\"logTemplateTokens\":[\"Bad\",\"packet\",\"length\",\"1819045217.\",\"[preauth]\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":41,\"sightings\":1,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"67.160.100.130:\",\"11:\"]}]},\"Connection\":{\"depth\":2,\"key\":\"Connection\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":7,\"sightings\":68958,\"logTemplateTokens\":[\"Connection\",\"closed\",\"by\",\"<*>\",\"[preauth]\"]}]},\"fatal:\":{\"depth\":2,\"key\":\"fatal:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":33,\"sightings\":6,\"logTemplateTokens\":[\"fatal:\",\"no\",\"hostkey\",\"alg\",\"[preauth]\"]}]},\"Invalid\":{\"depth\":2,\"key\":\"Invalid\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":2,\"sightings\":14551,\"logTemplateTokens\":[\"Invalid\",\"user\",\"<*>\",\"from\",\"<*>\"]}]}},\"clusters\":[]},\"6\":{\"depth\":1,\"key\":6,\"keyToChildNode\":{\"input\":{\"depth\":2,\"key\":\"input\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":37,\"sightings\":13,\"logTemplateTokens\":[\"input\",\"userauth\",\"request:\",\"invalid\",\"user\",\"[preauth]\"]}]},\"Server\":{\"depth\":2,\"key\":\"Server\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":48,\"sightings\":6,\"logTemplateTokens\":[\"Server\",\"listening\",\"on\",\"<*>\",\"port\",\"<*>\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":32,\"sightings\":108,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"[preauth]\"]}]},\"pam\":{\"depth\":2,\"key\":\"pam\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":4,\"sightings\":19852,\"logTemplateTokens\":[\"pam\",\"unix(sshd:auth):\",\"check\",\"pass;\",\"user\",\"unknown\"]}]},\"Invalid\":{\"depth\":2,\"key\":\"Invalid\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":28,\"sightings\":30,\"logTemplateTokens\":[\"Invalid\",\"user\",\"<*>\",\"<*>\",\"from\",\"<*>\"]}]}},\"clusters\":[]},\"7\":{\"depth\":1,\"key\":7,\"keyToChildNode\":{\"syslogin\":{\"depth\":2,\"key\":\"syslogin\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":51,\"sightings\":1,\"logTemplateTokens\":[\"syslogin\",\"perform\",\"logout:\",\"logout()\",\"returned\",\"an\",\"error\"]}]},\"input\":{\"depth\":2,\"key\":\"input\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":3,\"sightings\":14551,\"logTemplateTokens\":[\"input\",\"userauth\",\"request:\",\"invalid\",\"user\",\"<*>\",\"[preauth]\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":47,\"sightings\":60,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"disconnect\",\"[preauth]\"]}]},\"error:\":{\"depth\":2,\"key\":\"error:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":44,\"sightings\":6,\"logTemplateTokens\":[\"error:\",\"connect\",\"to\",\"<*>\",\"port\",\"22:\",\"failed.\"]}]},\"pam\":{\"depth\":2,\"key\":\"pam\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":22,\"sightings\":182,\"logTemplateTokens\":[\"pam\",\"unix(sshd:session):\",\"session\",\"closed\",\"for\",\"user\",\"<*>\"]}]},\"Did\":{\"depth\":2,\"key\":\"Did\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":15,\"sightings\":838,\"logTemplateTokens\":[\"Did\",\"not\",\"receive\",\"identification\",\"string\",\"from\",\"<*>\"]}]}},\"clusters\":[]},\"8\":{\"depth\":1,\"key\":8,\"keyToChildNode\":{\"input\":{\"depth\":2,\"key\":\"input\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":29,\"sightings\":30,\"logTemplateTokens\":[\"input\",\"userauth\",\"request:\",\"invalid\",\"user\",\"<*>\",\"<*>\",\"[preauth]\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":8,\"sightings\":46642,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"<*>\",\"<*>\",\"<*>\"]}]},\"Disconnecting:\":{\"depth\":2,\"key\":\"Disconnecting:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":12,\"sightings\":37298,\"logTemplateTokens\":[\"Disconnecting:\",\"Too\",\"many\",\"authentication\",\"failures\",\"for\",\"<*>\",\"[preauth]\"]}]},\"fatal:\":{\"depth\":2,\"key\":\"fatal:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":23,\"sightings\":3,\"logTemplateTokens\":[\"fatal:\",\"Write\",\"failed:\",\"Connection\",\"reset\",\"by\",\"peer\",\"[preauth]\"]}]},\"PAM\":{\"depth\":2,\"key\":\"PAM\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":14,\"sightings\":37963,\"logTemplateTokens\":[\"PAM\",\"service(sshd)\",\"ignoring\",\"max\",\"retries;\",\"<*>\",\">\",\"3\"]}]}},\"clusters\":[]},\"9\":{\"depth\":1,\"key\":9,\"keyToChildNode\":{\"Bad\":{\"depth\":2,\"key\":\"Bad\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":39,\"sightings\":7,\"logTemplateTokens\":[\"Bad\",\"protocol\",\"version\",\"identification\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\"]}]},\"Failed\":{\"depth\":2,\"key\":\"Failed\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":10,\"sightings\":140768,\"logTemplateTokens\":[\"Failed\",\"password\",\"for\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":42,\"sightings\":87,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"<*>\",\"<*>\",\"<*>\",\"[preauth]\"]}]},\"error:\":{\"depth\":2,\"key\":\"error:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":25,\"sightings\":2,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"191.96.249.68:\",\"13:\",\"User\",\"request\",\"[preauth]\"]}]},\"pam\":{\"depth\":2,\"key\":\"pam\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":21,\"sightings\":182,\"logTemplateTokens\":[\"pam\",\"unix(sshd:session):\",\"session\",\"opened\",\"for\",\"user\",\"<*>\",\"by\",\"(uid=0)\"]}]},\"Accepted\":{\"depth\":2,\"key\":\"Accepted\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":20,\"sightings\":182,\"logTemplateTokens\":[\"Accepted\",\"password\",\"for\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]}]}},\"clusters\":[]},\"10\":{\"depth\":1,\"key\":10,\"keyToChildNode\":{\"Bad\":{\"depth\":2,\"key\":\"Bad\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":34,\"sightings\":7,\"logTemplateTokens\":[\"Bad\",\"protocol\",\"version\",\"identification\",\"<*>\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\"]}]},\"Failed\":{\"depth\":2,\"key\":\"Failed\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":38,\"sightings\":13,\"logTemplateTokens\":[\"Failed\",\"<*>\",\"for\",\"invalid\",\"user\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]}]},\"error:\":{\"depth\":2,\"key\":\"error:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":16,\"sightings\":177,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"<*>\",\"3:\",\"com.jcraft.jsch.JSchException:\",\"Auth\",\"<*>\",\"[preauth]\"]}]},\"fatal:\":{\"depth\":2,\"key\":\"fatal:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":24,\"sightings\":952,\"logTemplateTokens\":[\"fatal:\",\"Read\",\"from\",\"socket\",\"failed:\",\"Connection\",\"reset\",\"by\",\"peer\",\"[preauth]\"]}]},\"pam\":{\"depth\":2,\"key\":\"pam\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":5,\"sightings\":14356,\"logTemplateTokens\":[\"pam\",\"unix(sshd:auth):\",\"authentication\",\"failure;\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\"]}]}},\"clusters\":[]},\"11\":{\"depth\":1,\"key\":11,\"keyToChildNode\":{\"Bad\":{\"depth\":2,\"key\":\"Bad\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":35,\"sightings\":8,\"logTemplateTokens\":[\"Bad\",\"protocol\",\"version\",\"identification\",\"<*>\",\"<*>\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\"]}]},\"Failed\":{\"depth\":2,\"key\":\"Failed\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":6,\"sightings\":20241,\"logTemplateTokens\":[\"Failed\",\"<*>\",\"for\",\"invalid\",\"user\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]}]},\"error:\":{\"depth\":2,\"key\":\"error:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":40,\"sightings\":6,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"<*>\",\"<*>\",\"<*>\",\"<*>\",\"<*>\",\"<*>\",\"[preauth]\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":17,\"sightings\":592,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"Closed\",\"due\",\"to\",\"user\",\"request.\",\"[preauth]\"]},{\"clusterId\":49,\"sightings\":3,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"<*>\",\"11:\",\"Disconnect\",\"requested\",\"by\",\"Windows\",\"SSH\",\"Client.\"]}]},\"PAM\":{\"depth\":2,\"key\":\"PAM\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":18,\"sightings\":1289,\"logTemplateTokens\":[\"PAM\",\"<*>\",\"more\",\"authentication\",\"<*>\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\"]}]},\"pam\":{\"depth\":2,\"key\":\"pam\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":9,\"sightings\":140701,\"logTemplateTokens\":[\"pam\",\"unix(sshd:auth):\",\"authentication\",\"failure;\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\",\"<*>\"]}]}},\"clusters\":[]},\"12\":{\"depth\":1,\"key\":12,\"keyToChildNode\":{\"Failed\":{\"depth\":2,\"key\":\"Failed\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":30,\"sightings\":30,\"logTemplateTokens\":[\"Failed\",\"password\",\"for\",\"invalid\",\"user\",\"<*>\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2\"]}]},\"Received\":{\"depth\":2,\"key\":\"Received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":50,\"sightings\":92,\"logTemplateTokens\":[\"Received\",\"disconnect\",\"from\",\"139.59.209.18:\",\"11:\",\"Normal\",\"Shutdown,\",\"Thank\",\"you\",\"for\",\"playing\",\"[preauth]\"]}]},\"reverse\":{\"depth\":2,\"key\":\"reverse\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":1,\"sightings\":18909,\"logTemplateTokens\":[\"reverse\",\"mapping\",\"checking\",\"getaddrinfo\",\"for\",\"<*>\",\"<*>\",\"failed\",\"-\",\"POSSIBLE\",\"BREAK-IN\",\"ATTEMPT!\"]}]},\"PAM\":{\"depth\":2,\"key\":\"PAM\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":13,\"sightings\":37029,\"logTemplateTokens\":[\"PAM\",\"<*>\",\"more\",\"authentication\",\"<*>\",\"logname=\",\"uid=0\",\"euid=0\",\"tty=ssh\",\"ruser=\",\"<*>\",\"<*>\"]}]}},\"clusters\":[]},\"13\":{\"depth\":1,\"key\":13,\"keyToChildNode\":{\"error:\":{\"depth\":2,\"key\":\"error:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":19,\"sightings\":930,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"103.99.0.122:\",\"14:\",\"No\",\"more\",\"user\",\"authentication\",\"methods\",\"available.\",\"[preauth]\"]},{\"clusterId\":46,\"sightings\":2,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"212.83.176.1:\",\"3:\",\"org.vngx.jsch.userauth.AuthCancelException:\",\"User\",\"authentication\",\"canceled\",\"by\",\"user\",\"[preauth]\"]}]}},\"clusters\":[]},\"14\":{\"depth\":1,\"key\":14,\"keyToChildNode\":{\"error:\":{\"depth\":2,\"key\":\"error:\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":43,\"sightings\":3,\"logTemplateTokens\":[\"error:\",\"Received\",\"disconnect\",\"from\",\"195.154.45.62:\",\"3:\",\"com.jcraft.jsch.JSchException:\",\"timeout\",\"in\",\"waiting\",\"for\",\"rekeying\",\"process.\",\"[preauth]\"]}]},\"message\":{\"depth\":2,\"key\":\"message\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":11,\"sightings\":36967,\"logTemplateTokens\":[\"message\",\"repeated\",\"<*>\",\"times:\",\"[\",\"Failed\",\"password\",\"for\",\"<*>\",\"from\",\"<*>\",\"port\",\"<*>\",\"ssh2]\"]}]}},\"clusters\":[]}},\"clusters\":[]}}\n\\ No newline at end of file"
  },
  {
    "sha": "18fce3fed602bc0d21668d5e1ce99f7cdf2516f1",
    "filename": "DrainModels/SendRec_Drain.json",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/DrainModels/SendRec_Drain.json",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/DrainModels/SendRec_Drain.json",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/DrainModels/SendRec_Drain.json?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -0,0 +1 @@\n+{\"depth\":2,\"similarityThreshold\":0.4,\"maxChildPerNode\":100,\"delimiters\":\" _\",\"clusters\":[{\"clusterId\":1,\"sightings\":4,\"logTemplateTokens\":[\"sent\",\"<*>\",\"bytes\"]},{\"clusterId\":2,\"sightings\":2,\"logTemplateTokens\":[\"received\",\"<*>\",\"bytes\"]}],\"root\":{\"depth\":0,\"key\":\"(ROOT)\",\"keyToChildNode\":{\"3\":{\"depth\":1,\"key\":3,\"keyToChildNode\":{\"received\":{\"depth\":2,\"key\":\"received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":2,\"sightings\":2,\"logTemplateTokens\":[\"received\",\"<*>\",\"bytes\"]}]},\"sent\":{\"depth\":2,\"key\":\"sent\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":1,\"sightings\":4,\"logTemplateTokens\":[\"sent\",\"<*>\",\"bytes\"]}]}},\"clusters\":[]}},\"clusters\":[]}}\n\\ No newline at end of file"
  },
  {
    "sha": "258c790a063000702dec96d48348afaedef9b397",
    "filename": "DrainModels/SendRec_Updated_Drain.json",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/DrainModels/SendRec_Updated_Drain.json",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/DrainModels/SendRec_Updated_Drain.json",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/DrainModels/SendRec_Updated_Drain.json?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -0,0 +1 @@\n+{\"depth\":2,\"similarityThreshold\":0.4,\"maxChildPerNode\":100,\"delimiters\":\"  _\",\"clusters\":[{\"clusterId\":2,\"sightings\":2,\"logTemplateTokens\":[\"received\",\"<*>\",\"bytes\"]},{\"clusterId\":1,\"sightings\":5,\"logTemplateTokens\":[\"sent\",\"<*>\",\"bytes\"]},{\"clusterId\":5,\"sightings\":2,\"logTemplateTokens\":[\"couldn't\",\"send\",\"the\",\"package\",\"<*>\"]}],\"root\":{\"depth\":0,\"key\":\"(ROOT)\",\"keyToChildNode\":{\"3\":{\"depth\":1,\"key\":3,\"keyToChildNode\":{\"received\":{\"depth\":2,\"key\":\"received\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":2,\"sightings\":2,\"logTemplateTokens\":[\"received\",\"<*>\",\"bytes\"]}]},\"sent\":{\"depth\":2,\"key\":\"sent\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":1,\"sightings\":5,\"logTemplateTokens\":[\"sent\",\"<*>\",\"bytes\"]}]}},\"clusters\":[]},\"5\":{\"depth\":1,\"key\":5,\"keyToChildNode\":{\"couldn't\":{\"depth\":2,\"key\":\"couldn't\",\"keyToChildNode\":{},\"clusters\":[{\"clusterId\":5,\"sightings\":2,\"logTemplateTokens\":[\"couldn't\",\"send\",\"the\",\"package\",\"<*>\"]}]}},\"clusters\":[]}},\"clusters\":[]}}\n\\ No newline at end of file"
  },
  {
    "sha": "d8bde04acdb84db268ee38f0164dadba8e2f3d0a",
    "filename": "build.gradle.kts",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/build.gradle.kts",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/build.gradle.kts?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -13,8 +13,12 @@ repositories {\n dependencies {\n     implementation(\"com.google.guava:guava:30.1-jre\")\n     implementation(\"info.picocli:picocli:4.6.1\")\n+    implementation(\"com.fasterxml.jackson.core:jackson-core:2.4.1\")\n+    implementation(\"com.fasterxml.jackson.core:jackson-annotations:2.4.1\")\n+    implementation(\"com.fasterxml.jackson.core:jackson-databind:2.4.1\")\n     annotationProcessor(\"info.picocli:picocli-codegen:4.6.1\")\n \n+    \n     testImplementation(\"org.assertj:assertj-core:3.18.1\")\n     testImplementation(\"org.junit.jupiter:junit-jupiter-api:5.7.0\")\n     testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine\")\n@@ -73,6 +77,3 @@ tasks {\n         }\n     }\n }\n-\n-\n-"
  },
  {
    "sha": "bdf83c8114ccb771ffc67fdf9f28786b6754c38b",
    "filename": "gradle/wrapper/gradle-wrapper.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/gradle/wrapper/gradle-wrapper.properties",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/gradle/wrapper/gradle-wrapper.properties",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/gradle/wrapper/gradle-wrapper.properties?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n distributionUrl=https\\://services.gradle.org/distributions/gradle-6.8-rc-5-bin.zip\n zipStoreBase=GRADLE_USER_HOME\n-zipStorePath=wrapper/dists\n+zipStorePath=wrapper/dists\n\\ No newline at end of file"
  },
  {
    "sha": "bba9c5c514365d4e781899894de9ab87f62b4438",
    "filename": "src/main/java/com/github/bric3/drain/Drain.java",
    "status": "modified",
    "additions": 109,
    "deletions": 4,
    "changes": 113,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/main/java/com/github/bric3/drain/Drain.java",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/main/java/com/github/bric3/drain/Drain.java",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/main/java/com/github/bric3/drain/Drain.java?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -3,11 +3,25 @@\n import com.google.common.base.CharMatcher;\n import com.google.common.base.Splitter;\n \n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.List;\n \n+\n+\n /**\n  * Port of the Drain algorithm for log parsing\n  *\n@@ -67,9 +81,9 @@\n     /**\n      * All log clusters.\n      */\n-    private final List<LogCluster> clusters = new ArrayList<>();\n+    private final List<LogCluster> clusters;\n \n-    private final Node root = new Node(\"(ROOT)\", 0);\n+    private final Node root;\n \n     private Drain(int depth,\n                   double similarityThreshold,\n@@ -79,6 +93,94 @@ private Drain(int depth,\n         this.similarityThreshold = similarityThreshold;\n         this.maxChildPerNode = maxChildPerNode;\n         this.delimiters = \" \" + additionalDelimiters;\n+        this.clusters = new ArrayList<>();\n+        this.root = new Node(\"(ROOT)\", 0);\n+    }\n+\n+    /**\n+     * Json creator and Json properties allowing Drain-object import.\n+     */\n+    @JsonCreator\n+    private Drain(@JsonProperty(\"depth\") int depth,\n+                  @JsonProperty(\"similarityThreshold\") double similarityThreshold,\n+                  @JsonProperty(\"maxChildPerNode\") int maxChildPerNode,\n+                  @JsonProperty(\"delimiters\") String additionalDelimiters,\n+                  @JsonProperty(\"clusters\") List<LogCluster> clusters,\n+                  @JsonProperty(\"root\") Node root) {\n+        this.depth = depth;\n+        this.similarityThreshold = similarityThreshold;\n+        this.maxChildPerNode = maxChildPerNode;\n+        this.delimiters = \" \" + additionalDelimiters;\n+        this.clusters = new ArrayList<LogCluster>();\n+        this.root = root;\n+        logClustersLinker(this.root, this.clusters);\n+    }\n+\n+    /**\n+     * Links the list of clusters from tree nodes to Drain.clusters\n+     * (needed when importing a model)\n+     */\n+    private void logClustersLinker(Node aux, List<LogCluster> clusters) {\n+        if (aux != null) {\n+            for (Node n: aux.allChildren().values()) {\n+                if (!n.clusters().isEmpty()) {\n+                    clusters.addAll(n.clusters());\n+                }\n+                logClustersLinker(n, clusters);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Drain-object exporting functionality which saves a drain model\n+     * in a json file at given path.\n+     */\n+    public void drainExport(String filePath) {\n+        // Instance an Object Mapper and allow the access to the Drain object attributes\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\n+        \n+        // Write the Drain object attributes into path file\n+        try {\n+            System.out.printf(\"---- Saving drain model in file %s %n\",\n+                              filePath);\n+            objectMapper.writeValue(new FileOutputStream(filePath), this);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Drain-object importing functionality which creates a Drain instance from the input\n+     * json filepath containing Drain object attributes.\n+     */\n+    public static Drain drainImport(String filePath) throws IOException {\n+        // Create an Object mapper\n+        ObjectMapper objectMapper = new ObjectMapper();\n+\n+        // Setup the input .json file\n+        File inputDrain = new File(filePath);\n+\n+        System.out.printf(\"---- Recovering drain model from file %s %n\",\n+                          filePath);\n+        // Map the attributes from the file and return the Drain instance\n+        return objectMapper.readValue(inputDrain, Drain.class);\n+    }\n+\n+    /**\n+     * Returns the matching log cluster given a log message (null if no matchings)\n+     *\n+     */\n+    public LogCluster findLogMessage(@Nonnull String message) {\n+        // sprint message by delimiter / whitespaces\n+        var contentTokens = tokenize(message);\n+\n+        // Search the prefix tree\n+        var matchCluster = treeSearch(contentTokens);\n+\n+        //System.out.println(\"Found node: \"+matchCluster);\n+\n+        return matchCluster;\n     }\n \n     /**\n@@ -88,7 +190,7 @@ private Drain(int depth,\n      *\n      * @param message The log message content\n      */\n-    public void parseLogMessage(@Nonnull String message) {\n+    public LogCluster parseLogMessage(@Nonnull String message) {\n         // sprint message by delimiter / whitespaces\n         var contentTokens = tokenize(message);\n \n@@ -104,6 +206,9 @@ public void parseLogMessage(@Nonnull String message) {\n             // add the log to an existing cluster\n             matchCluster.newSighting(contentTokens);\n         }\n+        //System.out.println(\"Found node: \"+matchCluster);\n+\n+        return matchCluster;\n     }\n \n     private List<String> tokenize(String content) {\n@@ -181,7 +286,6 @@ LogCluster fastMatch(@Nonnull List<LogCluster> clusters,\n         if (maxSimilarity >= this.similarityThreshold) {\n             matchedCluster = maxCluster;\n         }\n-\n         return matchedCluster;\n     }\n \n@@ -383,6 +487,7 @@ public DrainBuilder maxChildPerNode(int maxChildPerNode) {\n             return this;\n         }\n \n+\n         /**\n          * Build a non thread safe instance of Drain.\n          *"
  },
  {
    "sha": "660fe74d217edaf954985cc9be1cb8908c715d21",
    "filename": "src/main/java/com/github/bric3/drain/LogCluster.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/main/java/com/github/bric3/drain/LogCluster.java",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/main/java/com/github/bric3/drain/LogCluster.java",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/main/java/com/github/bric3/drain/LogCluster.java?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -1,5 +1,8 @@\n package com.github.bric3.drain;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n import javax.annotation.Nonnull;\n import java.util.ArrayList;\n import java.util.List;\n@@ -27,6 +30,19 @@\n         this.logTemplateTokens = logTemplateTokens;\n     }\n \n+    /**\n+     * Json creator and Json properties added to allow Drain-object import.\n+     */\n+    @JsonCreator\n+    public LogCluster( @JsonProperty(\"clusterId\") int clusterId,\n+                       @JsonProperty(\"sightings\") int sightings,\n+                       @JsonProperty(\"logTemplateTokens\") List<String> logTemplateTokens) {\n+        this.instanceCounter++;\n+        this.clusterId = clusterId;\n+        this.sightings = sightings;\n+        this.logTemplateTokens = logTemplateTokens;\n+    }\n+\n     /**\n      * The cluster identifier\n      * @return cluster identifier."
  },
  {
    "sha": "46d0d3ced8d9e231e228bf4f4b443fe0fcad32fa",
    "filename": "src/main/java/com/github/bric3/drain/Node.java",
    "status": "modified",
    "additions": 34,
    "deletions": 2,
    "changes": 36,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/main/java/com/github/bric3/drain/Node.java",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/main/java/com/github/bric3/drain/Node.java",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/main/java/com/github/bric3/drain/Node.java?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -1,18 +1,48 @@\n package com.github.bric3.drain;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n \n class Node {\n     private final int depth;\n     private final Object key;\n-    private final HashMap<Object, Node> keyToChildNode = new HashMap<>();\n-    private final List<LogCluster> clusters = new ArrayList<>();\n+    private final HashMap<Object, Node> keyToChildNode;\n+    private final List<LogCluster> clusters;\n \n     public Node(Object key, int depth) {\n         this.key = key;\n         this.depth = depth;\n+        this.keyToChildNode = new HashMap<>();\n+        this.clusters= new ArrayList<>();\n+    }\n+\n+    /**\n+     * Json creator and Json properties added allowing Drain-object import.\n+     */\n+\n+    @JsonCreator\n+    public Node(@JsonProperty(\"depth\") int depth,\n+                @JsonProperty(\"key\") Object key,\n+                @JsonProperty(\"keyToChildNode\") HashMap<Object, Node> keyToChildNode,\n+                @JsonProperty(\"clusters\") List<LogCluster> clusters) {\n+        this.depth = depth;\n+        this.key = key;\n+        // create integer key when parsing root child node (log length)\n+        if(depth == 0) {\n+            this.keyToChildNode = new HashMap<>();\n+            for (Object k: keyToChildNode.keySet()) {\n+                this.keyToChildNode.put(Integer.parseInt(k.toString()), keyToChildNode.get(k));\n+            }\n+        }\n+        // otherwise, key is a string and does not need conversion\n+        else {\n+            this.keyToChildNode = keyToChildNode;\n+        }\n+        this.clusters = clusters;\n     }\n \n     public Node get(Object key) {\n@@ -45,4 +75,6 @@ public boolean contains(String key) {\n     public int childrenCount() {\n         return keyToChildNode.size();\n     }\n+\n+    public HashMap<Object, Node> allChildren() { return keyToChildNode; }\n }"
  },
  {
    "sha": "068502d2d5a1c9b75b841c542fb6678816048436",
    "filename": "src/test/java/com/github/bric3/drain/DrainBulkTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/java/com/github/bric3/drain/DrainBulkTest.java",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/java/com/github/bric3/drain/DrainBulkTest.java",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/test/java/com/github/bric3/drain/DrainBulkTest.java?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -45,7 +45,7 @@ void smokeTest() throws IOException {\n              .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n              .forEach(System.out::println);\n \n-//        assertThat(drain.clusters()).hasSize(51);\n+        assertThat(drain.clusters()).hasSize(51);\n     }\n \n /*"
  },
  {
    "sha": "53252b00c3bd4d849aeb09f035357c4123a709b4",
    "filename": "src/test/java/com/github/bric3/drain/ImportExportDrainTest.java",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/java/com/github/bric3/drain/ImportExportDrainTest.java",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/java/com/github/bric3/drain/ImportExportDrainTest.java",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/test/java/com/github/bric3/drain/ImportExportDrainTest.java?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -0,0 +1,214 @@\n+package com.github.bric3.drain;\n+\n+import com.google.common.base.Stopwatch;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class ImportExportDrainTest {\n+\n+    @Test\n+    void drainExportSSHTest() throws IOException {\n+        var drain = Drain.drainBuilder()\n+                         .additionalDelimiters(\"_\")\n+                         .depth(4)\n+                         .build();\n+\n+        var lineCounter = new AtomicInteger();\n+\n+        var stopwatch = Stopwatch.createStarted();\n+        Files.lines(Paths.get(\"build/resources/test/SSH.log\"),\n+                    StandardCharsets.UTF_8)\n+             .peek(__ -> lineCounter.incrementAndGet())\n+             .map(l -> l.substring(l.indexOf(\"]: \") + 3)) // removes this part: \"Dec 10 06:55:46 LabSZ sshd[24200]: \"\n+             .forEach(content -> {\n+                 drain.parseLogMessage(content);\n+                 if (lineCounter.get() % 10000 == 0) {\n+                     System.out.printf(\"%4d clusters so far%n\", drain.clusters().size());\n+                 }\n+             });\n+\n+\n+        System.out.printf(\"---- Done processing file. Total of %d lines, done in %s, %d clusters%n\",\n+                          lineCounter.get(),\n+                          stopwatch,\n+                          drain.clusters().size());\n+        drain.clusters()\n+             .stream()\n+             .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+             .forEach(System.out::println);\n+\n+        assertThat(drain.clusters()).hasSize(51);\n+        drain.drainExport(\"DrainModels/SSH_Drain.json\");\n+    }\n+\n+    @Test\n+    void drainImportSSHTest() throws IOException {\n+        var drainPath = \"DrainModels/SSH_Drain.json\";\n+        var importedDrain = Drain.drainImport(drainPath);\n+\n+        importedDrain.clusters()\n+             .stream()\n+             .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+             .forEach(System.out::println);\n+\n+        assertThat(importedDrain.clusters()).hasSize(51);\n+\n+    }\n+\n+    @Test\n+    void drainExportSendRecTest() throws IOException {\n+        var drain = Drain.drainBuilder()\n+                         .additionalDelimiters(\"_\")\n+                         .depth(4)\n+                         .build();\n+\n+        var lineCounter = new AtomicInteger();\n+\n+        var stopwatch = Stopwatch.createStarted();\n+        Files.lines(Paths.get(\"src/test/resources/SendRec.txt\"),\n+                    StandardCharsets.UTF_8)\n+             .peek(__ -> lineCounter.incrementAndGet())\n+             .forEach(content -> {\n+                 drain.parseLogMessage(content);\n+                 System.out.printf(\"%4d clusters so far%n\", drain.clusters().size());\n+             });\n+\n+\n+        System.out.printf(\"---- Done processing file. Total of %d lines, done in %s, %d clusters%n\",\n+                          lineCounter.get(),\n+                          stopwatch,\n+                          drain.clusters().size());\n+        drain.clusters()\n+             .stream()\n+             .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+             .forEach(System.out::println);\n+\n+        assertThat(drain.clusters()).hasSize(2);\n+        drain.drainExport(\"DrainModels/SendRec_Drain.json\");\n+    }\n+\n+    @Test\n+    void drainImportSendRecTest() throws IOException {\n+        var drainPath = \"DrainModels/SendRec_Drain.json\";\n+        var importedDrain = Drain.drainImport(drainPath);\n+\n+        importedDrain.clusters()\n+                     .stream()\n+                     .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+                     .forEach(System.out::println);\n+\n+        assertThat(importedDrain.clusters()).hasSize(2);\n+\n+    }\n+\n+    @Test\n+    void findPatternFromImportedSendRecDrainTest() throws IOException {\n+        var drainPath = \"DrainModels/SendRec_Drain.json\";\n+        var importedDrain = Drain.drainImport(drainPath);\n+\n+        importedDrain.clusters()\n+                     .stream()\n+                     .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+                     .forEach(System.out::println);\n+\n+        var logMessage = \"sent 277 bytes\";\n+        // use findLogMessage function to search the cluster belonging of a given log\n+        var matchCluster = importedDrain.findLogMessage(logMessage);\n+\n+        System.out.println(\"\\nMatching log cluster for \\\"\"+logMessage+\"\\\": \"+\n+                           matchCluster);\n+\n+        assertThat(matchCluster.clusterId()).isEqualTo(1);\n+\n+        logMessage = \"no log pattern\";\n+        matchCluster = importedDrain.findLogMessage(logMessage);\n+\n+        System.out.println(\"Matching log cluster for \\\"\"+logMessage+\"\\\": \"+\n+                           matchCluster);\n+\n+        assertThat(matchCluster).isEqualTo(null);\n+    }\n+\n+    @Test\n+    void findPatternFromImportedSSHDrainTest() throws IOException {\n+        var drainPath = \"DrainModels/SSH_Drain.json\";\n+        var importedDrain = Drain.drainImport(drainPath);\n+\n+        importedDrain.clusters()\n+                     .stream()\n+                     .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+                     .forEach(System.out::println);\n+\n+        var logMessage = \"Connection closed by 168.124.112.4 [preauth]\";\n+        // use findLogMessage function to search the cluster belonging of a given log\n+        var matchCluster = importedDrain.findLogMessage(logMessage);\n+\n+        System.out.println(\"\\nMatching log cluster for \\\"\"+logMessage+\"\\\": \"+\n+                           matchCluster);\n+\n+        assertThat(matchCluster.clusterId()).isEqualTo(7);\n+    }\n+\n+    @Test\n+    void updateImportedSendRecDrainTest() throws IOException {\n+        // Use parseLogMessage function for drain model updating with a new log message\n+        var drainPath = \"DrainModels/SendRec_Drain.json\";\n+        var importedDrain = Drain.drainImport(drainPath);\n+\n+        System.out.println(\"Log clusters: \");\n+        importedDrain.clusters()\n+                     .stream()\n+                     .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+                     .forEach(System.out::println);\n+\n+\n+        // 1. New log message with an existing log cluster\n+        var logMessage = \"sent 777 bytes\";\n+        // Classify the new log\n+        var matchCluster = importedDrain.parseLogMessage(logMessage);\n+        System.out.println(\"\\nLog cluster for \\\"\"+logMessage+\"\\\": \"+\n+                           matchCluster);\n+\n+        // After classifying there are 5 pattern sightings\n+        assertThat(matchCluster.sightings()).isEqualTo(5);\n+\n+\n+        // 2. New log message without a related log cluster\n+        logMessage = \"couldn't send the package 23\";\n+        matchCluster = importedDrain.parseLogMessage(logMessage);\n+        System.out.println(\"Log cluster for \\\"\"+logMessage+\"\\\": \"+\n+                           matchCluster);\n+\n+        // Only 1 sighting of the new log cluster\n+        assertThat(matchCluster.sightings()).isEqualTo(1);\n+\n+\n+        // 3. New log message related to the new log cluster\n+        logMessage = \"couldn't send the package 26\";\n+        matchCluster = importedDrain.parseLogMessage(logMessage);\n+        System.out.println(\"Log cluster for \\\"\"+logMessage+\"\\\": \"+\n+                           matchCluster);\n+\n+        // The sightings turns to 2\n+        assertThat(matchCluster.sightings()).isEqualTo(2);\n+\n+\n+        System.out.println(\"\\nUpdated log clusters:\");\n+        importedDrain.clusters()\n+                     .stream()\n+                     .sorted(Comparator.comparing(LogCluster::sightings).reversed())\n+                     .forEach(System.out::println);\n+\n+        // Save the updated drain model\n+        importedDrain.drainExport(\"DrainModels/SendRec_Updated_Drain.json\");\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3120133ce78f94a6c221af7e3d713da10e837ce2",
    "filename": "src/test/java/com/github/bric3/drain/MappedFileLineReaderTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/java/com/github/bric3/drain/MappedFileLineReaderTest.java",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/java/com/github/bric3/drain/MappedFileLineReaderTest.java",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/test/java/com/github/bric3/drain/MappedFileLineReaderTest.java?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -31,6 +31,8 @@\n class MappedFileLineReaderTest {\n     private final Path resourceDirectory = Paths.get(\"src\", \"test\", \"resources\");\n \n+    private final String testFile = \"3-lines.txt\";\n+\n     private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n \n     @Test\n@@ -78,7 +80,7 @@ void tearDown() {\n \n     @Test\n     void find_start_position_given_last_lines() throws IOException {\n-        try (var channel = FileChannel.open(resourceDirectory.resolve(\"3-lines.txt\"),\n+        try (var channel = FileChannel.open(resourceDirectory.resolve(testFile),\n                                             StandardOpenOption.READ)) {\n             var r = new MappedFileLineReader(new Config(true), IOReadAction.NO_OP);\n \n@@ -93,7 +95,7 @@ void find_start_position_given_last_lines() throws IOException {\n \n     @Test\n     void can_read_from_position() throws IOException {\n-        try (var channel = FileChannel.open(resourceDirectory.resolve(\"3-lines.txt\"),\n+        try (var channel = FileChannel.open(resourceDirectory.resolve(testFile),\n                                             StandardOpenOption.READ)) {\n             var sink = new ChannelSink(TestSink.nullSink());\n             assertThat(sink.apply(channel, 0)).isEqualTo(183);\n@@ -103,7 +105,7 @@ void can_read_from_position() throws IOException {\n \n     @Test\n     void cannot_read_from_negative_position() throws IOException {\n-        try (var channel = FileChannel.open(resourceDirectory.resolve(\"3-lines.txt\"),\n+        try (var channel = FileChannel.open(resourceDirectory.resolve(testFile),\n                                             StandardOpenOption.READ)) {\n             var sink = new ChannelSink(TestSink.nullSink());\n             assertThatExceptionOfType(AssertionError.class).isThrownBy("
  },
  {
    "sha": "02681b3650ffdf1f86595e124417df271b90e31f",
    "filename": "src/test/resources/SendRec.txt",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/bric3/drain-java/blob/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/resources/SendRec.txt",
    "raw_url": "https://github.com/bric3/drain-java/raw/db043b0ef7dade1f48236f9e973c9803c2644350/src/test/resources/SendRec.txt",
    "contents_url": "https://api.github.com/repos/bric3/drain-java/contents/src/test/resources/SendRec.txt?ref=db043b0ef7dade1f48236f9e973c9803c2644350",
    "patch": "@@ -0,0 +1,6 @@\n+sent 550 bytes\n+sent 110 bytes\n+sent 800 bytes\n+received 1000 bytes\n+received 250 bytes\n+sent 200 bytes"
  }
]
