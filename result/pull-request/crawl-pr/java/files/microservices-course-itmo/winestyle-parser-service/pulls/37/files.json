[
  {
    "sha": "5abd25eae3dc3f508cf1cc1f2ea6e98ef83f6b1d",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/pom.xml",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/pom.xml",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/pom.xml?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -107,6 +107,12 @@\n             <version>${parser.common.api.version}</version>\n         </dependency>\n \n+        <!-- Eureka -->\n+        <dependency>\n+            <groupId>org.springframework.cloud</groupId>\n+            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n+        </dependency>\n+\n         <!-- testing dependency -->\n         <dependency>\n             <groupId>com.google.code.gson</groupId>"
  },
  {
    "sha": "70030449d4511c2b766387459a9756845277308e",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/ServiceApplication.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/ServiceApplication.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/ServiceApplication.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/ServiceApplication.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -2,6 +2,7 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import springfox.documentation.swagger2.annotations.EnableSwagger2;\n@@ -10,6 +11,7 @@\n @ComponentScan(\"com.wine.to.up\")\n @EnableSwagger2\n @EnableScheduling\n+@EnableDiscoveryClient\n public class ServiceApplication {\n     public static void main(String[] args) {\n         SpringApplication.run(ServiceApplication.class, args);"
  },
  {
    "sha": "3eaecdf3a2f3543c10f23d848b6d4bcfe0e8f6cb",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/controller/KafkaController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/controller/KafkaController.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/controller/KafkaController.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/controller/KafkaController.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -16,7 +16,7 @@\n \n     @PostMapping(\"/alcohol\")\n     public void sendAllalcoholToKafka() {\n-        kafkaSenderService.sendAllalcohol();\n+        kafkaSenderService.sendAllAlcohol();\n     }\n \n     @PostMapping(\"/alcohol/wines\")"
  },
  {
    "sha": "8f79bc2781ef89e3e158e67695196fcf3e609961",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/KafkaService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/KafkaService.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/KafkaService.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/KafkaService.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -1,7 +1,7 @@\n package com.wine.to.up.winestyle.parser.service.service;\n \n public interface KafkaService {\n-    void sendAllalcohol();\n+    void sendAllAlcohol();\n     void sendAllWines();\n     void sendAllSparkling();\n }"
  },
  {
    "sha": "4b60dd77246086b59eede71d8617389f95ed342a",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSender.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSender.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSender.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSender.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -0,0 +1,36 @@\n+package com.wine.to.up.winestyle.parser.service.service.implementation.kafka;\n+\n+import com.wine.to.up.commonlib.messaging.KafkaMessageSender;\n+import com.wine.to.up.parser.common.api.schema.ParserApi;\n+import com.wine.to.up.winestyle.parser.service.components.WinestyleParserServiceMetricsCollector;\n+import com.wine.to.up.winestyle.parser.service.domain.entity.Alcohol;\n+import com.wine.to.up.winestyle.parser.service.service.Director;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.enums.AlcoholType;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n+\n+@Slf4j\n+@RequiredArgsConstructor\n+@Component\n+public class KafkaSender {\n+    private final KafkaMessageSender<ParserApi.WineParsedEvent> kafkaMessageSender;\n+    private final Director parserDirector;\n+\n+    private ParserApi.WineParsedEvent.Builder kafkaMessageBuilder = ParserApi.WineParsedEvent.newBuilder();\n+    private Integer sended = 0;\n+\n+    public Integer sendAlcoholToKafka(Alcohol alcohol) {\n+        try {\n+            kafkaMessageSender.sendMessage(kafkaMessageBuilder\n+                    .addWines(parserDirector\n+                            .fillKafkaMessageBuilder(alcohol, AlcoholType.valueOf(alcohol.getType())))\n+                    .build());\n+            WinestyleParserServiceMetricsCollector.incPublished();\n+            sended++;\n+        } catch (Exception ex) {\n+            log.error(\"Cannot send dataset to Kafka: id:{} {}\", alcohol.getId(), alcohol.getType());\n+        }\n+        return sended;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "db16de94289238ab2ebac2830775493a590494a3",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderService.java",
    "status": "modified",
    "additions": 11,
    "deletions": 108,
    "changes": 119,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderService.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderService.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderService.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -1,130 +1,61 @@\n package com.wine.to.up.winestyle.parser.service.service.implementation.kafka;\n \n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n-import com.wine.to.up.commonlib.messaging.KafkaMessageSender;\n-import com.wine.to.up.parser.common.api.schema.ParserApi;\n-import com.wine.to.up.winestyle.parser.service.components.WinestyleParserServiceMetricsCollector;\n import com.wine.to.up.winestyle.parser.service.domain.entity.Alcohol;\n import com.wine.to.up.winestyle.parser.service.service.Director;\n import com.wine.to.up.winestyle.parser.service.service.KafkaService;\n import com.wine.to.up.winestyle.parser.service.service.RepositoryService;\n import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.enums.AlcoholType;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n \n-import javax.annotation.PostConstruct;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.*;\n \n @Service\n @RequiredArgsConstructor\n @Slf4j\n public class KafkaSenderService implements KafkaService {\n-    private final Director parserDirector;\n     private final RepositoryService repositoryService;\n-    private final KafkaMessageSender<ParserApi.WineParsedEvent> kafkaMessageSender;\n+    private final KafkaSender kafkaSender;\n \n-    @Value(\"${spring.task.execution.pool.size}\")\n-    private int maxThreadCount;\n-    @Value(\"${spring.jsoup.scraping.proxy-timeout.millis}\")\n-    private int timeout;\n+    private Integer totalSended = 0;\n \n-    private ExecutorService kafkaSendAllThreadPool;\n-    private final ThreadFactory kafkaSendAllThreadFactory = new ThreadFactoryBuilder()\n-            .setNameFormat(\"Kafka-Sender-%d\")\n-            .build();\n-\n-    private ExecutorService initPool(int maxThreadCount, ThreadFactory threadFactory) {\n-        return Executors.newFixedThreadPool(maxThreadCount, threadFactory);\n-    }\n-\n-    private void renewPools() {\n-        if (kafkaSendAllThreadPool.isShutdown()) {\n-            kafkaSendAllThreadPool = initPool(maxThreadCount, kafkaSendAllThreadFactory);\n-        }\n-    }\n-\n-    @PostConstruct\n-    private void initPools() {\n-        kafkaSendAllThreadPool = initPool(maxThreadCount, kafkaSendAllThreadFactory);\n-    }\n-\n-    public void sendAllalcohol() {\n-        renewPools();\n+    public void sendAllAlcohol() {\n         List<Alcohol> alcohol = repositoryService.getAll();\n \n         LocalDateTime startSendingProcess = LocalDateTime.now();\n         log.info(\"Start sending data of all alcohol to Kafka at {};\", startSendingProcess);\n \n-        int totalSended = 0;\n-        try {\n-            totalSended = sendalcohol(alcohol);\n-        } catch (InterruptedException e) {\n-            log.warn(\"The process of sending alcohol to kafka was interrupted!\");\n-        }\n+        sendAlcohol(alcohol);\n         logKafkaSended(\"alcohol\", totalSended, startSendingProcess);\n+        totalSended = 0;\n     }\n \n     public void sendAllWines() {\n-        renewPools();\n         List<Alcohol> wines = repositoryService.getAllWines();\n \n         LocalDateTime startSendingProcess = LocalDateTime.now();\n         log.info(\"Start sending data of all wines to Kafka at {};\", startSendingProcess);\n-\n-        int totalSended = 0;\n-        try {\n-            totalSended = sendalcohol(wines);\n-        } catch (InterruptedException e) {\n-            log.warn(\"The process of sending wines to kafka was interrupted!\");\n-        }\n+        sendAlcohol(wines);\n         logKafkaSended(AlcoholType.WINE.toString(), totalSended, startSendingProcess);\n+        totalSended = 0;\n     }\n \n     public void sendAllSparkling() {\n-        renewPools();\n         List<Alcohol> sparkling = repositoryService.getAllSparkling();\n \n         LocalDateTime startSendingProcess = LocalDateTime.now();\n         log.info(\"Start sending data of all sparkling to Kafka at {};\", startSendingProcess);\n \n-        int totalSended = 0;\n-        try {\n-            totalSended = sendalcohol(sparkling);\n-        } catch (InterruptedException e) {\n-            log.warn(\"The process of sending sparkling to kafka was interrupted!\");\n-        }\n+        sendAlcohol(sparkling);\n         logKafkaSended(AlcoholType.SPARKLING.toString(), totalSended, startSendingProcess);\n+        totalSended = 0;\n     }\n \n-    private Integer sendalcohol(List<Alcohol> alcoholList) throws InterruptedException {\n-        List<Future<Integer>> sendingFutures = new ArrayList<>();\n-        Integer totalSended = 0;\n-\n-        try {\n-            alcoholList.parallelStream().forEach(alcohol -> {\n-                sendingFutures.add(kafkaSendAllThreadPool.submit(new KafkaSender(parserDirector, alcohol)));\n-            });\n-        } finally {\n-            kafkaSendAllThreadPool.shutdown();\n-            kafkaSendAllThreadPool.awaitTermination(timeout, TimeUnit.MILLISECONDS);\n-\n-            for (Future<Integer> future : sendingFutures) {\n-                try {\n-                    totalSended += future.get();\n-                } catch (InterruptedException e) {\n-                    Thread.currentThread().interrupt();\n-                } catch (ExecutionException e) {\n-                    log.error(\"Cannot execute sending alcohol to kafka\");\n-                }\n-            }\n-        }\n-        return totalSended;\n+    private void sendAlcohol(List<Alcohol> alcoholList) {\n+        alcoholList.forEach(alcohol -> totalSended += kafkaSender.sendAlcoholToKafka(alcohol));\n     }\n \n     private void logKafkaSended(String alcoholType, Integer total, LocalDateTime startTime) {\n@@ -140,32 +71,4 @@ private void logKafkaSended(String alcoholType, Integer total, LocalDateTime sta\n         log.info(\"Sending {} to kafka: in {} hours {} minutes {} seconds. Total sended {} alcohol\",\n                 alcoholType, hoursPassed, minutesPart, secondsPart, total);\n     }\n-\n-    @RequiredArgsConstructor\n-    private class KafkaSender implements Callable<Integer> {\n-        private final Director parserDirector;\n-        private final Alcohol alcohol;\n-\n-        private ParserApi.WineParsedEvent.Builder kafkaMessageBuilder = ParserApi.WineParsedEvent.newBuilder();\n-        private Integer sended = 0;\n-\n-        private Integer sendAlcoholToKafka() {\n-            try {\n-                kafkaMessageSender.sendMessage(kafkaMessageBuilder\n-                        .addWines(parserDirector\n-                                .fillKafkaMessageBuilder(alcohol, AlcoholType.valueOf(alcohol.getType())))\n-                        .build());\n-                WinestyleParserServiceMetricsCollector.incPublished();\n-                sended++;\n-            } catch (Exception ex) {\n-                log.error(\"Cannot send dataset to Kafka: id:{} {}\", alcohol.getId(), alcohol.getType());\n-            }\n-            return sended;\n-        }\n-\n-        @Override\n-        public Integer call() throws Exception {\n-            return sendAlcoholToKafka();\n-        }\n-    }\n }"
  },
  {
    "sha": "4c783416cd0bb7b668d38d36483ee388c900e3fb",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserDirector.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserDirector.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserDirector.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserDirector.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -12,7 +12,7 @@\n import java.util.Arrays;\n import java.util.Optional;\n \n-@Service\n+@Service(\"ParserDirector\")\n public class ParserDirector implements Director {\n     @Getter\n     private final ParserApi.Wine.Builder kafkaMessageBuilder = ParserApi.Wine.newBuilder();"
  },
  {
    "sha": "12d69fb7fa7911fd403c62d832f7a001366ae2a0",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 205,
    "changes": 209,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserService.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserService.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserService.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -2,47 +2,26 @@\n \n import com.wine.to.up.commonlib.annotations.InjectEventLogger;\n import com.wine.to.up.commonlib.logging.EventLogger;\n-import com.wine.to.up.commonlib.messaging.KafkaMessageSender;\n-import com.wine.to.up.parser.common.api.schema.ParserApi;\n import com.wine.to.up.winestyle.parser.service.components.WinestyleParserServiceMetricsCollector;\n-import com.wine.to.up.winestyle.parser.service.controller.exception.NoEntityException;\n-import com.wine.to.up.winestyle.parser.service.domain.entity.Alcohol;\n import com.wine.to.up.winestyle.parser.service.logging.NotableEvents;\n-import com.wine.to.up.winestyle.parser.service.service.Director;\n-import com.wine.to.up.winestyle.parser.service.service.Parser;\n-import com.wine.to.up.winestyle.parser.service.service.RepositoryService;\n import com.wine.to.up.winestyle.parser.service.service.WinestyleParserService;\n import com.wine.to.up.winestyle.parser.service.service.implementation.document.Scraper;\n-import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ApplicationContextLocator;\n-import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.MainPageSegmentor;\n-import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ProductBlockSegmentor;\n-import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ProductPageSegmentor;\n import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.enums.AlcoholType;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.parser.job.MainJob;\n import io.micrometer.core.annotation.Timed;\n-import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.Setter;\n-import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n-import org.jsoup.select.Elements;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n-\n-import java.time.DayOfWeek;\n-import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Supplier;\n \n @Slf4j\n @Component\n @RequiredArgsConstructor\n public class ParserService implements WinestyleParserService {\n-    private final KafkaMessageSender<ParserApi.WineParsedEvent> kafkaMessageSender;\n-    private final RepositoryService repositoryService;\n+    private final MainJob mainJob;\n     private final Scraper scraper;\n \n     @Setter\n@@ -52,19 +31,13 @@\n \n     private static final String PARSING_PROCESS_DURATION_SUMMARY = \"parsing_process_duration\";\n \n-    @Value(\"${spring.jsoup.scraping.interval.millis}\")\n-    private int timeout;\n     @Value(\"${spring.jsoup.pagination.css.query.main-bottom}\")\n     private String paginationElementCssQuery;\n \n     @SuppressWarnings(\"unused\")\n     @InjectEventLogger\n     private EventLogger eventLogger;\n \n-    private final Scraper scraper;\n-\n-    private int parsed = 0;\n-\n     @Timed(PARSING_PROCESS_DURATION_SUMMARY)\n     @Override\n     public void parseBuildSave(String alcoholUrlPart) throws InterruptedException {\n@@ -87,7 +60,7 @@ public void parseBuildSave(String alcoholUrlPart) throws InterruptedException {\n                 log.info(\"Parsing: {}\", currentDoc.location());\n \n                 try {\n-                    Integer currentUnparsed = new MainJob(currentDoc, start, scraper).get();\n+                    Integer currentUnparsed = mainJob.get(currentDoc, alcoholType, mainPageUrl, start);\n                     unparsed += currentUnparsed;\n                 }\n                 catch (Exception e) {\n@@ -110,7 +83,7 @@ public void parseBuildSave(String alcoholUrlPart) throws InterruptedException {\n \n             log.debug(\"Unparsed {}: {}\", alcoholType, unparsed);\n \n-            parsed = 0;\n+            mainJob.setParsed(0);\n         }\n     }\n \n@@ -122,178 +95,4 @@ private int getPagesNumber(Document doc) {\n             return 1;\n         }\n     }\n-\n-    @RequiredArgsConstructor\n-    private class MainJob implements Supplier<Integer> {\n-        private final Document currentDoc;\n-        private final LocalDateTime start;\n-        private final Scraper scraper;\n-        private final MainPageSegmentor mainPageSegmentor = ApplicationContextLocator.getApplicationContext().getBean(MainPageSegmentor.class);\n-\n-        /**\n-         * Парсер страницы с позициями\n-         */\n-        @SneakyThrows\n-        @Override\n-        public Integer get() {\n-            LocalDateTime mainParsingStart = LocalDateTime.now();\n-            Elements productElements = mainPageSegmentor.extractProductElements(currentDoc);\n-\n-            int parsedNow = 0;\n-            int unparsed = 0;\n-\n-            List<Pair<ProductJob, String>> parsingJobs = new ArrayList<>();\n-            ProductJob productJob;\n-            String productUrl;\n-\n-            for (Element productElement : productElements) {\n-                productJob = new ProductJob(productElement, scraper);\n-                try {\n-                    productUrl = productJob.new ProductUrlJob().get();\n-                } catch (Exception e) {\n-                    log.error(\"Critical error during execution of url from product block {}\", productElement.html());\n-                    continue;\n-                }\n-                parsingJobs.add(new Pair<>(productJob, productUrl));\n-            }\n-\n-            Pair<ProductJob, String> currentPair;\n-            Alcohol result;\n-\n-            for (int i = 0; i < productElements.size(); i++) {\n-                currentPair = parsingJobs.get(i);\n-                productUrl = currentPair.getUrl();\n-                try {\n-                    result = currentPair.getParsingJob().get();\n-                    eventLogger.info(NotableEvents.I_WINE_DETAILS_PARSED, productUrl, result);\n-                    parsedNow += 1;\n-                } catch (Exception e) {\n-                    eventLogger.warn(NotableEvents.W_WINE_DETAILS_PARSING_FAILED, productUrl);\n-                    unparsed += 1;\n-                }\n-                Thread.sleep(timeout);\n-            }\n-\n-            WinestyleParserServiceMetricsCollector.sumPageParsingDuration(mainParsingStart, LocalDateTime.now());\n-\n-            eventLogger.info(NotableEvents.I_WINE_PAGE_PARSED, currentDoc.location());\n-\n-            countParsed(parsedNow);\n-\n-            logParsed(alcoholType, start);\n-\n-            return unparsed;\n-        }\n-\n-        private synchronized void countParsed(int parsedNow) {\n-            parsed += parsedNow;\n-        }\n-\n-        private void logParsed(AlcoholType alcoholType, LocalDateTime start) {\n-            long hoursPassed;\n-            long minutesPart;\n-            long secondsPart;\n-            Duration timePassed = java.time.Duration.between((start), LocalDateTime.now());\n-\n-            hoursPassed = timePassed.toHours();\n-            minutesPart = (timePassed.toMinutes() - hoursPassed * 60);\n-            secondsPart = (timePassed.toSeconds() - hoursPassed * 3600 - minutesPart * 60);\n-\n-            log.info(\"Parsing of {}: {} in {} hours {} minutes {} seconds ({} entities per second)\",\n-                    alcoholType, parsed, hoursPassed, minutesPart, secondsPart, parsed / (double) timePassed.toSeconds());\n-        }\n-\n-        @RequiredArgsConstructor\n-        private class Pair<L, R> {\n-            @Getter\n-            private final L parsingJob;\n-            @Getter\n-            private final R url;\n-        }\n-    }\n-\n-    @RequiredArgsConstructor\n-    private class ProductJob implements Supplier<Alcohol> {\n-        private final Element productElement;\n-        private final Scraper scraper;\n-        private final Director director = new ParserDirector();\n-        private final ProductBlockSegmentor productBlockSegmentor = ApplicationContextLocator.getApplicationContext().getBean(ProductBlockSegmentor.class);\n-        private final Parser parser = ApplicationContextLocator.getApplicationContext().getBean(Parser.class);\n-        private String productUrl;\n-\n-        @Override\n-        public Alcohol get() {\n-            log.info(\"Now parsing url: {}\", productUrl);\n-\n-            LocalDateTime productParsingStart = LocalDateTime.now();\n-\n-            Alcohol alcohol;\n-            ParserApi.WineParsedEvent.Builder kafkaMessageBuilder = ParserApi.WineParsedEvent.newBuilder().setShopLink(mainPageUrl);\n-\n-            try {\n-                alcohol = repositoryService.getByUrl(productUrl);\n-\n-                if (LocalDateTime.now().getDayOfWeek() == DayOfWeek.MONDAY) {\n-                    alcohol = parseProduct(kafkaMessageBuilder);\n-                } else {\n-                    alcohol.setPrice(parser.parsePrice().orElse(null));\n-                    alcohol.setRating(parser.parseWinestyleRating().orElse(null));\n-                    repositoryService.add(alcohol);\n-                    kafkaMessageSender.sendMessage(kafkaMessageBuilder.addWines(director.fillKafkaMessageBuilder(alcohol, alcoholType)).build());\n-                }\n-            } catch (NoEntityException ex) {\n-                alcohol = parseProduct(kafkaMessageBuilder);\n-            }\n-\n-            WinestyleParserServiceMetricsCollector.sumDetailsParsingDuration(productParsingStart, LocalDateTime.now());\n-            WinestyleParserServiceMetricsCollector.incPublished();\n-\n-            return alcohol;\n-        }\n-\n-        private Alcohol parseProduct(ParserApi.WineParsedEvent.Builder kafkaMessageBuilder) {\n-            Document product = null;\n-\n-            LocalDateTime detailsFetchingStart = LocalDateTime.now();\n-            try {\n-                product = scraper.getJsoupDocument(mainPageUrl + productUrl);\n-            } catch (InterruptedException e) {\n-                Thread.currentThread().interrupt();\n-            }\n-            WinestyleParserServiceMetricsCollector.sumDetailsFetchingDuration(detailsFetchingStart, LocalDateTime.now());\n-\n-            prepareParsingService(product);\n-\n-            Alcohol alcohol = director.makeAlcohol(parser, mainPageUrl, productUrl, alcoholType);\n-\n-            repositoryService.add(alcohol);\n-\n-            kafkaMessageSender.sendMessage(kafkaMessageBuilder.addWines(director.getKafkaMessageBuilder()).build());\n-\n-            return alcohol;\n-        }\n-\n-        private void prepareParsingService(Document doc) {\n-            ProductPageSegmentor productPageSegmentor = ApplicationContextLocator.getApplicationContext().getBean(ProductPageSegmentor.class);\n-\n-            Element productPageMainContent = productPageSegmentor.extractProductPageMainContent(doc);\n-\n-            parser.setListDescription(productBlockSegmentor.extractListDescription(productElement));\n-            parser.setLeftBlock(productPageSegmentor.extractLeftBlock(productPageMainContent));\n-            parser.setArticlesBlock(productPageSegmentor.extractArticlesBlock(productPageMainContent));\n-            parser.setDescriptionBlock(productPageSegmentor.extractDescriptionBlock(productPageMainContent));\n-        }\n-\n-        @RequiredArgsConstructor\n-        private class ProductUrlJob implements Supplier<String> {\n-            @Override\n-            public String get() {\n-                parser.setProductBlock(productElement);\n-                parser.setInfoContainer(productBlockSegmentor.extractInfoContainer(productElement));\n-\n-                productUrl = parser.parseUrl();\n-                return productUrl;\n-            }\n-        }\n-    }\n }"
  },
  {
    "sha": "a6ff41699eaa156c8c8941f0fd5118d8d9e8b4b8",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/MainJob.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/MainJob.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/MainJob.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/MainJob.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -0,0 +1,101 @@\n+package com.wine.to.up.winestyle.parser.service.service.implementation.parser.job;\n+\n+import com.wine.to.up.commonlib.annotations.InjectEventLogger;\n+import com.wine.to.up.commonlib.logging.EventLogger;\n+import com.wine.to.up.winestyle.parser.service.components.WinestyleParserServiceMetricsCollector;\n+import com.wine.to.up.winestyle.parser.service.domain.entity.Alcohol;\n+import com.wine.to.up.winestyle.parser.service.logging.NotableEvents;\n+import com.wine.to.up.winestyle.parser.service.service.Parser;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.MainPageSegmentor;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.enums.AlcoholType;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+\n+@RequiredArgsConstructor\n+@Slf4j\n+@Component\n+public class MainJob {\n+    private final Parser parser;\n+    private final ProductJob productJob;\n+    private final ProductUrlJob productUrlJob;\n+    private final MainPageSegmentor mainPageSegmentor;\n+\n+    @Value(\"${spring.jsoup.scraping.interval.millis}\")\n+    private int timeout;\n+    @Setter\n+    private int parsed = 0;\n+\n+    @SuppressWarnings(\"unused\")\n+    @InjectEventLogger\n+    private EventLogger eventLogger;\n+\n+    /**\n+     * Парсер страницы с позициями\n+     */\n+    @SneakyThrows\n+    public Integer get(Document currentDoc, AlcoholType alcoholType, String mainPageUrl, LocalDateTime start) {\n+        LocalDateTime mainParsingStart = LocalDateTime.now();\n+        Elements productElements = mainPageSegmentor.extractProductElements(currentDoc);\n+\n+        int parsedNow = 0;\n+        int unparsed = 0;\n+\n+        String productUrl;\n+        Alcohol result;\n+\n+        for (Element productElement : productElements) {\n+            try {\n+                productUrl = productUrlJob.get(parser, productElement);\n+                try {\n+                    result = productJob.getParsedAlcohol(parser, mainPageUrl, productUrl, productElement, alcoholType);\n+                    eventLogger.info(NotableEvents.I_WINE_DETAILS_PARSED, productUrl, result);\n+                    parsedNow += 1;\n+                } catch (Exception e) {\n+                    eventLogger.warn(NotableEvents.W_WINE_DETAILS_PARSING_FAILED, productUrl);\n+                    unparsed += 1;\n+                }\n+                Thread.sleep(timeout);\n+            } catch (Exception e) {\n+                log.error(\"Critical error during execution of url from product block {}\", productElement.html());\n+            }\n+        }\n+\n+        WinestyleParserServiceMetricsCollector.sumPageParsingDuration(mainParsingStart, LocalDateTime.now());\n+\n+        eventLogger.info(NotableEvents.I_WINE_PAGE_PARSED, currentDoc.location());\n+\n+        countParsed(parsedNow);\n+\n+        logParsed(alcoholType, start);\n+\n+        return unparsed;\n+    }\n+\n+    private synchronized void countParsed(int parsedNow) {\n+        parsed += parsedNow;\n+    }\n+\n+    private void logParsed(AlcoholType alcoholType, LocalDateTime start) {\n+        long hoursPassed;\n+        long minutesPart;\n+        long secondsPart;\n+        Duration timePassed = java.time.Duration.between((start), LocalDateTime.now());\n+\n+        hoursPassed = timePassed.toHours();\n+        minutesPart = (timePassed.toMinutes() - hoursPassed * 60);\n+        secondsPart = (timePassed.toSeconds() - hoursPassed * 3600 - minutesPart * 60);\n+\n+        log.info(\"Parsing of {}: {} in {} hours {} minutes {} seconds ({} entities per second)\",\n+                alcoholType, parsed, hoursPassed, minutesPart, secondsPart, parsed / (double) timePassed.toSeconds());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e1499350aaea3696ec703d28ebb6d4f75818ed8a",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductJob.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductJob.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductJob.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductJob.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -0,0 +1,109 @@\n+package com.wine.to.up.winestyle.parser.service.service.implementation.parser.job;\n+\n+import com.wine.to.up.commonlib.messaging.KafkaMessageSender;\n+import com.wine.to.up.parser.common.api.schema.ParserApi;\n+import com.wine.to.up.winestyle.parser.service.components.WinestyleParserServiceMetricsCollector;\n+import com.wine.to.up.winestyle.parser.service.controller.exception.NoEntityException;\n+import com.wine.to.up.winestyle.parser.service.domain.entity.Alcohol;\n+import com.wine.to.up.winestyle.parser.service.service.Director;\n+import com.wine.to.up.winestyle.parser.service.service.Parser;\n+import com.wine.to.up.winestyle.parser.service.service.RepositoryService;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.document.Scraper;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ApplicationContextLocator;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ProductBlockSegmentor;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ProductPageSegmentor;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.enums.AlcoholType;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.parser.ParserDirector;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.DayOfWeek;\n+import java.time.LocalDateTime;\n+\n+@Slf4j\n+@RequiredArgsConstructor\n+@Component\n+public class ProductJob {\n+    @Qualifier(\"ParserDirector\") private final Director director;\n+    private final KafkaMessageSender<ParserApi.WineParsedEvent> kafkaMessageSender;\n+    private final RepositoryService repositoryService;\n+    private final Scraper scraper;\n+    private final ProductBlockSegmentor productBlockSegmentor;\n+    private final ProductPageSegmentor productPageSegmentor;\n+\n+    private String mainPageUrl;\n+    private String productUrl;\n+    private AlcoholType alcoholType;\n+    private Parser parser;\n+\n+    public Alcohol getParsedAlcohol(Parser parser, String mainPageUrl, String productUrl, Element productElement, AlcoholType alcoholType) {\n+        this.mainPageUrl = mainPageUrl;\n+        this.productUrl = productUrl;\n+        this.alcoholType = alcoholType;\n+        this.parser = parser;\n+\n+        log.info(\"Now parsing url: {}\", productUrl);\n+\n+        LocalDateTime productParsingStart = LocalDateTime.now();\n+\n+        Alcohol alcohol;\n+        ParserApi.WineParsedEvent.Builder kafkaMessageBuilder = ParserApi.WineParsedEvent.newBuilder().setShopLink(mainPageUrl);\n+\n+        try {\n+            alcohol = repositoryService.getByUrl(productUrl);\n+\n+            if (LocalDateTime.now().getDayOfWeek() == DayOfWeek.MONDAY) {\n+                alcohol = parseProduct(productElement, kafkaMessageBuilder);\n+            } else {\n+                alcohol.setPrice(parser.parsePrice().orElse(null));\n+                alcohol.setRating(parser.parseWinestyleRating().orElse(null));\n+                repositoryService.add(alcohol);\n+                kafkaMessageSender.sendMessage(kafkaMessageBuilder.addWines(director.fillKafkaMessageBuilder(alcohol, alcoholType)).build());\n+            }\n+        } catch (NoEntityException ex) {\n+            alcohol = parseProduct(productElement, kafkaMessageBuilder);\n+        }\n+\n+        WinestyleParserServiceMetricsCollector.sumDetailsParsingDuration(productParsingStart, LocalDateTime.now());\n+        WinestyleParserServiceMetricsCollector.incPublished();\n+\n+        return alcohol;\n+    }\n+\n+    private Alcohol parseProduct(Element productElement, ParserApi.WineParsedEvent.Builder kafkaMessageBuilder) {\n+        Document product = null;\n+\n+        LocalDateTime detailsFetchingStart = LocalDateTime.now();\n+        try {\n+            product = scraper.getJsoupDocument(mainPageUrl + productUrl);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+        }\n+        WinestyleParserServiceMetricsCollector.sumDetailsFetchingDuration(detailsFetchingStart, LocalDateTime.now());\n+\n+        prepareParsingService(product, productElement);\n+\n+        Alcohol alcohol = director.makeAlcohol(parser, mainPageUrl, productUrl, alcoholType);\n+\n+        repositoryService.add(alcohol);\n+\n+        kafkaMessageSender.sendMessage(kafkaMessageBuilder.addWines(director.getKafkaMessageBuilder()).build());\n+\n+        return alcohol;\n+    }\n+\n+    private void prepareParsingService(Document doc, Element productElement) {\n+\n+        Element productPageMainContent = productPageSegmentor.extractProductPageMainContent(doc);\n+\n+        parser.setListDescription(productBlockSegmentor.extractListDescription(productElement));\n+        parser.setLeftBlock(productPageSegmentor.extractLeftBlock(productPageMainContent));\n+        parser.setArticlesBlock(productPageSegmentor.extractArticlesBlock(productPageMainContent));\n+        parser.setDescriptionBlock(productPageSegmentor.extractDescriptionBlock(productPageMainContent));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6ecc24d4dfae5a127119e92a157fa2defd0215a3",
    "filename": "src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductUrlJob.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductUrlJob.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductUrlJob.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/job/ProductUrlJob.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -0,0 +1,19 @@\n+package com.wine.to.up.winestyle.parser.service.service.implementation.parser.job;\n+\n+import com.wine.to.up.winestyle.parser.service.service.Parser;\n+import com.wine.to.up.winestyle.parser.service.service.implementation.helpers.ProductBlockSegmentor;\n+import lombok.RequiredArgsConstructor;\n+import org.jsoup.nodes.Element;\n+import org.springframework.stereotype.Component;\n+\n+@RequiredArgsConstructor\n+@Component\n+public class ProductUrlJob {\n+    private final ProductBlockSegmentor productBlockSegmentor;\n+\n+    public String get(Parser parser, Element productElement) {\n+        parser.setProductBlock(productElement);\n+        parser.setInfoContainer(productBlockSegmentor.extractInfoContainer(productElement));\n+        return parser.parseUrl();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6f01c843b00e35ce06cb33e8dee76a69b0acfd9a",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/resources/application.properties",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/main/resources/application.properties?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -1,4 +1,5 @@\n spring.application.name=winestyle-parser-service\n+server.port=8765\n \n management.endpoints.web.exposure.include=prometheus\n management.endpoint.prometheus.enabled=true\n@@ -16,6 +17,9 @@ spring.kafka.consumer.group-id=wine.winestyle-parser-service\n # flyway properties - https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#data-migration-properties\n spring.flyway.baseline-on-migrate=true\n \n+# eureka properties\n+eureka.client.service-url.defaultZone=http://eureka-service:8080/eureka\n+\n # scheduler properties\n spring.task.scheduling.pool.size=3\n spring.task.scheduling.rate.parser.cron=0 0 0 * * *"
  },
  {
    "sha": "307bbbc320310069b7c5a4f6b6d4eb96b2791cb1",
    "filename": "src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderServiceTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 35,
    "changes": 46,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderServiceTest.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderServiceTest.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/kafka/KafkaSenderServiceTest.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -1,10 +1,6 @@\n package com.wine.to.up.winestyle.parser.service.service.implementation.kafka;\n \n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n-import com.wine.to.up.commonlib.messaging.KafkaMessageSender;\n-import com.wine.to.up.parser.common.api.schema.ParserApi;\n import com.wine.to.up.winestyle.parser.service.domain.entity.Alcohol;\n-import com.wine.to.up.winestyle.parser.service.service.Director;\n import com.wine.to.up.winestyle.parser.service.service.RepositoryService;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -15,19 +11,12 @@\n import java.util.concurrent.*;\n \n import static org.mockito.Mockito.*;\n-import static org.junit.jupiter.api.Assertions.*;\n \n class KafkaSenderServiceTest {\n-    @Mock\n-    Director parserDirector;\n     @Mock\n     RepositoryService repositoryService;\n     @Mock\n-    KafkaMessageSender<ParserApi.WineParsedEvent> kafkaMessageSender;\n-    ThreadFactory kafkaSendAllThreadFactory = new ThreadFactoryBuilder()\n-            .setNameFormat(\"Kafka-Sender-%d\")\n-            .build();\n-    ExecutorService kafkaSendAllThreadPool;\n+    KafkaSender kafkaSender;\n     @InjectMocks\n     KafkaSenderService kafkaSenderService;\n \n@@ -44,47 +33,34 @@\n     void setUp() throws ExecutionException, InterruptedException {\n         MockitoAnnotations.initMocks(this);\n \n-        ReflectionTestUtils.setField(kafkaSenderService, \"parserDirector\", parserDirector);\n         ReflectionTestUtils.setField(kafkaSenderService, \"repositoryService\", repositoryService);\n-        ReflectionTestUtils.setField(kafkaSenderService, \"kafkaMessageSender\", kafkaMessageSender);\n-        ReflectionTestUtils.setField(kafkaSenderService, \"maxThreadCount\", 1);\n-        ReflectionTestUtils.setField(kafkaSenderService, \"timeout\", 100);\n+        ReflectionTestUtils.setField(kafkaSenderService, \"kafkaSender\", kafkaSender);\n \n         Mockito.when(repositoryService.getAll()).thenReturn(testAlcoholList);\n         Mockito.when(repositoryService.getAllWines()).thenReturn(testAlcoholList);\n         Mockito.when(repositoryService.getAllSparkling()).thenReturn(testAlcoholList);\n+        Mockito.when(kafkaSender.sendAlcoholToKafka(testAlcohol)).thenReturn(1);\n \n         Future<Integer> future = mock(Future.class);\n         Mockito.when(future.get()).thenReturn(1);\n \n-        kafkaSendAllThreadPool = spy(Executors.newFixedThreadPool(2, kafkaSendAllThreadFactory));\n-        ReflectionTestUtils.setField(kafkaSenderService, \"kafkaSendAllThreadPool\", kafkaSendAllThreadPool);\n     }\n \n     @Test\n-    void sendAllalcohol() throws InterruptedException {\n-        kafkaSenderService.sendAllalcohol();\n-        Mockito.verify(kafkaSendAllThreadPool, times(1)).awaitTermination(100, TimeUnit.MILLISECONDS);\n-    }\n+    void sendAllAlcohol() {\n+        kafkaSenderService.sendAllAlcohol();\n+        Mockito.verify(repositoryService, times(1)).getAll();\n+        }\n \n     @Test\n-    void sendAllWines() throws InterruptedException {\n+    void sendAllWines() {\n         kafkaSenderService.sendAllWines();\n-        Mockito.verify(kafkaSendAllThreadPool, times(1)).awaitTermination(100, TimeUnit.MILLISECONDS);\n+        Mockito.verify(repositoryService, times(1)).getAllWines();\n     }\n \n     @Test\n-    void sendAllSparkling() throws InterruptedException {\n+    void sendAllSparkling() {\n         kafkaSenderService.sendAllSparkling();\n-        Mockito.verify(kafkaSendAllThreadPool, times(1)).awaitTermination(100, TimeUnit.MILLISECONDS);\n-    }\n-\n-    @Test\n-    void initPool() {\n-        kafkaSendAllThreadPool.shutdownNow();\n-        assertTrue(kafkaSendAllThreadPool.isShutdown());\n-        ReflectionTestUtils.invokeMethod(kafkaSenderService, \"renewPools\");\n-        ExecutorService kafkaSendAllThreadPool = (ExecutorService) ReflectionTestUtils.getField(kafkaSenderService, \"kafkaSendAllThreadPool\");\n-        assertFalse(kafkaSendAllThreadPool.isShutdown());\n+        Mockito.verify(repositoryService, times(1)).getAllSparkling();\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "8fc2f0af2df83c9f0d967bc6a5691a9d33cce410",
    "filename": "src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserServiceTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 35,
    "changes": 39,
    "blob_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/blob/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserServiceTest.java",
    "raw_url": "https://github.com/microservices-course-itmo/winestyle-parser-service/raw/6838cfe999aa9850bcd93a160baf1f9bcce58660/src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserServiceTest.java",
    "contents_url": "https://api.github.com/repos/microservices-course-itmo/winestyle-parser-service/contents/src/test/java/com/wine/to/up/winestyle/parser/service/service/implementation/parser/ParserServiceTest.java?ref=6838cfe999aa9850bcd93a160baf1f9bcce58660",
    "patch": "@@ -30,51 +30,20 @@\n     @InjectMocks\n     private ParserService parserService;\n     @Mock\n-    private KafkaMessageSender<ParserApi.WineParsedEvent> kafkaMessageSender;\n-    @Mock\n-    private RepositoryService repositoryService;\n-    @Mock\n     private Scraper scraper;\n-    @MockBean\n-    private ApplicationContextLocator applicationContextLocator = mock(ApplicationContextLocator.class);\n-\n-    @Mock\n-    ExecutorService mainPageParsingThreadPool;\n-    @Spy\n-    ExecutorService productPageParsingThreadPool;\n-    @Spy\n-    ExecutorService urlFetchingThreadPool;\n-\n-    ThreadFactory mainPageParsingThreadFactory = new ThreadFactoryBuilder()\n-            .setNameFormat(\"Main_parser-%d\")\n-            .build();\n-    ThreadFactory productPageParsingThreadFactory = new ThreadFactoryBuilder()\n-            .setNameFormat(\"Prod_parser-%d\")\n-            .build();\n-    ThreadFactory urlFetchingThreadFactory = new ThreadFactoryBuilder()\n-            .setNameFormat(\"Url_fetching-%d\")\n-            .build();\n \n     String htmlPage = \"div id=\\\"CatalogPagingBottom\\\"\" +\n-            \"<li>1</li>\" +\n+            \"<li>2</li>\" +\n             \"</div>\";\n \n     @BeforeEach\n-    void setUp() throws InterruptedException, ExecutionException {\n+    void setUp() throws InterruptedException {\n         MockitoAnnotations.initMocks(this);\n-        ReflectionTestUtils.setField(parserService, \"maxThreadCount\", 2);\n-        ReflectionTestUtils.setField(parserService, \"timeout\", 10);\n         ReflectionTestUtils.setField(parserService, \"paginationElementCssQuery\", \"#CatalogPagingBottom li:last-of-type\");\n \n-        mainPageParsingThreadPool = spy(ExecutorService.class);\n-        productPageParsingThreadPool = spy(Executors.newFixedThreadPool(2, productPageParsingThreadFactory));\n-        urlFetchingThreadPool = spy(Executors.newFixedThreadPool(2, urlFetchingThreadFactory));\n-        ReflectionTestUtils.setField(parserService, \"mainPageParsingThreadPool\", mainPageParsingThreadPool);\n-        ReflectionTestUtils.setField(parserService, \"productPageParsingThreadPool\", productPageParsingThreadPool);\n-        ReflectionTestUtils.setField(parserService, \"urlFetchingThreadPool\", urlFetchingThreadPool);\n-\n         Document document = Jsoup.parse(htmlPage);\n         Mockito.when(scraper.getJsoupDocument(\"test/test\")).thenReturn(document);\n+        Mockito.when(scraper.getJsoupDocument(\"test/test?page=2\")).thenReturn(document);\n     }\n \n     @Test\n@@ -86,7 +55,7 @@ void parseBuildSave() throws InterruptedException {\n         } catch (NullPointerException ex) {\n             log.warn(\"Cannot execute MainJob inner class. Ok.\");\n         }\n-        Mockito.verify(mainPageParsingThreadPool, times(1)).shutdownNow();\n+        Mockito.verify(scraper, times(1)).getJsoupDocument(\"test/test\");\n     }\n \n     @Test"
  }
]
