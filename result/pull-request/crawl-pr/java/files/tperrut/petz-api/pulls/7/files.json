[
  {
    "sha": "5df340be42a96f99dd2944df32a6845d1024cfbf",
    "filename": "README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/README.md",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/README.md",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/README.md?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -85,11 +85,11 @@ mvn test\n Url to access API on Heroku  https://desafio-petz-api.herokuapp.com/swagger-ui.htm\n  \n ## Config Security\n-The Basic authentication was implemented with Spring Security.\n+The authentication was implemented with Spring Security using JWT Token format .\n \n     Two users have been created with their permissions.\n \n-> The following Http Verbs (PUT, DELETE) are protected with permission only for the Administrator Profile. Just like the End Point: \"rest/clientes\" e \"rest/pets\"\n+> ***The following Http Verbs (PUT, DELETE) are protected with permission only for the Administrator Profile. Just like the End Point: \"rest/clientes\" e \"rest/pets\"\n \n > The End Point \"/\" must be authenticated with the default user profile\n "
  },
  {
    "sha": "582698ff3956749c0589642719261128dd9e33c4",
    "filename": "docker-compose.yml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/docker-compose.yml",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/docker-compose.yml?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -23,7 +23,7 @@ services:\n       - petz-db\n     ports:\n       - \"8080:8080\"\n-    command: mvn clean package -P prod -DskipTests=true spring-boot:run\n+    command: mvn clean package -P docker -DskipTests=true spring-boot:run\n     mem_limit: 128m  \n     \n   petz-db:\n@@ -37,4 +37,7 @@ services:\n     volumes:\n       - petz_data:/var/lib/mysql\n     mem_limit: 256m  \n+\n+ \n+\n     \n\\ No newline at end of file"
  },
  {
    "sha": "18ba99603c454240f7ac22113734447b31a59a3d",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 68,
    "deletions": 13,
    "changes": 81,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/pom.xml",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/pom.xml",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/pom.xml?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -39,15 +39,8 @@\n     </scm>\n     \n \t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n-\t\t</dependency>\n-\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n-\t\t</dependency>\n+\t\n+\t\t\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-web</artifactId>\n@@ -58,6 +51,13 @@\n \t\t\t<artifactId>spring-boot-devtools</artifactId>\n \t\t\t<scope>runtime</scope>\n \t\t</dependency>\n+\t\t\n+\t\t<!--Database  -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\t\t\n \t\t<dependency>\n \t\t\t<groupId>com.h2database</groupId>\n \t\t\t<artifactId>h2</artifactId>\n@@ -76,7 +76,8 @@\n \t\t\t<artifactId>lombok</artifactId>\n \t\t\t<scope>provided</scope>\n \t\t</dependency>\n-\n+\t\t\n+\t\t<!-- Swagger e Swagger UI -->\n \t\t<dependency>\n \t\t\t<groupId>io.springfox </groupId>\n \t\t\t<artifactId>springfox-swagger2 </artifactId>\n@@ -88,7 +89,8 @@\n \t\t\t<artifactId>springfox-swagger-ui </artifactId>\n \t\t\t<version>2.6.1 </version>\n \t\t</dependency>\n-\n+\t\t\n+\t\t<!-- Ehcache  -->\n \t\t<dependency>\n \t\t\t<groupId>net.sf.ehcache </groupId>\n \t\t\t<artifactId>ehcache</artifactId>\n@@ -99,13 +101,34 @@\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\n+\t\t\n+\t\t<!-- Token Jwt -->\n+\t\t<dependency>\n+\t\t\t<groupId>io.jsonwebtoken</groupId>\n+\t\t\t<artifactId>jjwt</artifactId>\n+\t\t\t<version>0.7.0</version>\n+\t\t</dependency>\n+\t\t\n+\t\t<!-- Security  -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n+\t\t</dependency>\n+\t\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.security</groupId>\n \t\t\t<artifactId>spring-security-test</artifactId>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t\n+\t\t<!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-core -->\n+\t\t<dependency>\n+\t\t    <groupId>org.flywaydb</groupId>\n+\t\t    <artifactId>flyway-core</artifactId>\n+\t\t</dependency>\n+\t\t\n \t</dependencies>\n+\t\n \n \t<build>\n \t\t<resources>\n@@ -166,6 +189,7 @@\n \t\t\t\t\t\t<goals>\n \t\t\t\t\t\t\t<goal>check</goal>\n \t\t\t\t\t\t</goals>\n+\t\t\t\t\t\t<phase>test</phase>\n \t\t\t\t\t\t\n \t\t\t\t\t\t<configuration>\n \t\t                    <rules>\n@@ -215,7 +239,38 @@\n                     </container>\n                 </configuration>\n             </plugin>\n-\t\t    </plugins>\n+\t\t       <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->\n+\t\t       <plugin>\n+\t\t       \t<groupId>org.eclipse.m2e</groupId>\n+\t\t       \t<artifactId>lifecycle-mapping</artifactId>\n+\t\t       \t<version>1.0.0</version>\n+\t\t       \t<configuration>\n+\t\t       \t\t<lifecycleMappingMetadata>\n+\t\t       \t\t\t<pluginExecutions>\n+\t\t       \t\t\t\t<pluginExecution>\n+\t\t       \t\t\t\t\t<pluginExecutionFilter>\n+\t\t       \t\t\t\t\t\t<groupId>\n+\t\t       \t\t\t\t\t\t\torg.apache.maven.plugins\n+\t\t       \t\t\t\t\t\t</groupId>\n+\t\t       \t\t\t\t\t\t<artifactId>\n+\t\t       \t\t\t\t\t\t\tmaven-help-plugin\n+\t\t       \t\t\t\t\t\t</artifactId>\n+\t\t       \t\t\t\t\t\t<versionRange>\n+\t\t       \t\t\t\t\t\t\t[3.1.1,)\n+\t\t       \t\t\t\t\t\t</versionRange>\n+\t\t       \t\t\t\t\t\t<goals>\n+\t\t       \t\t\t\t\t\t\t<goal>active-profiles</goal>\n+\t\t       \t\t\t\t\t\t</goals>\n+\t\t       \t\t\t\t\t</pluginExecutionFilter>\n+\t\t       \t\t\t\t\t<action>\n+\t\t       \t\t\t\t\t\t<ignore></ignore>\n+\t\t       \t\t\t\t\t</action>\n+\t\t       \t\t\t\t</pluginExecution>\n+\t\t       \t\t\t</pluginExecutions>\n+\t\t       \t\t</lifecycleMappingMetadata>\n+\t\t       \t</configuration>\n+\t\t       </plugin>\n+\t\t\t</plugins>\n \t\t</pluginManagement>\n \t</build>\n "
  },
  {
    "sha": "6753d5714bfb661bd2872e74384dbcdd3475dbba",
    "filename": "src/main/java/br/com/desafio/petz/api/PetzApplication.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/PetzApplication.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/PetzApplication.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/PetzApplication.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -1,17 +1,15 @@\n package br.com.desafio.petz.api;\n \n-import org.springframework.boot.Banner;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cache.annotation.EnableCaching;\n \n @EnableCaching\n @SpringBootApplication\n public class PetzApplication {\n-\n+\t\n \tpublic static void main(String[] args) {\n \t\tSpringApplication application = new SpringApplication(PetzApplication.class);\n-\t\tapplication.setBannerMode(Banner.Mode.CONSOLE);\n \t\tapplication.run(args);\n \t}\n "
  },
  {
    "sha": "5f61264111a94124e01d90e9fc99a0bbc47b84d7",
    "filename": "src/main/java/br/com/desafio/petz/api/config/SwaggerConfig.java",
    "status": "modified",
    "additions": 30,
    "deletions": 1,
    "changes": 31,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/config/SwaggerConfig.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/config/SwaggerConfig.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/config/SwaggerConfig.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -1,28 +1,57 @@\n package br.com.desafio.petz.api.config;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n \n+import br.com.desafio.petz.api.security.util.JwtTokenUtil;\n import springfox.documentation.builders.ApiInfoBuilder;\n import springfox.documentation.builders.PathSelectors;\n import springfox.documentation.builders.RequestHandlerSelectors;\n import springfox.documentation.service.ApiInfo;\n import springfox.documentation.spi.DocumentationType;\n import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.swagger.web.ApiKeyVehicle;\n+import springfox.documentation.swagger.web.SecurityConfiguration;\n import springfox.documentation.swagger2.annotations.EnableSwagger2;\n \n @Configuration\n @EnableSwagger2\n public class SwaggerConfig {\n+\t\n+\t@Autowired\n+\tprivate JwtTokenUtil jwtTokenUtil;\n+\n+\t@Autowired\n+\tprivate UserDetailsService userDetailsService;\n+\t\n \t@Bean\n \tpublic Docket api() {\n \t\treturn new Docket(DocumentationType.SWAGGER_2).select()\n-\t\t\t\t.apis(RequestHandlerSelectors.basePackage(\"br.com.desafio.petz.api.web.controller\")).paths(PathSelectors.any()).build()\n+\t\t\t\t.apis(RequestHandlerSelectors.basePackage(\"br.com.desafio.petz.api\")).paths(PathSelectors.any()).build()\n \t\t\t\t.apiInfo(apiInfo());\n \t}\n+\t\n+\t\n \n \tprivate ApiInfo apiInfo() {\n \t\treturn new ApiInfoBuilder().title(\"Swagger API\")\n \t\t\t\t.description(\"Documentação da API PETZ com Swagger\").version(\"1.0\").build();\n \t}\n+\t\n+\t@Bean\n+\tpublic SecurityConfiguration security() {\n+\t\tString token;\n+\t\ttry {\n+\t\t\tUserDetails userDetails = this.userDetailsService.loadUserByUsername(\"admin@petzapi.com\");\n+\t\t\ttoken = this.jwtTokenUtil.obterToken(userDetails);\n+\t\t} catch (Exception e) {\n+\t\t\ttoken = \"\";\n+\t\t}\n+\n+\t\treturn new SecurityConfiguration(null, null, null, null, \"Bearer \" + token, ApiKeyVehicle.HEADER,\n+\t\t\t\t\"Authorization\", \",\");\n+\t}\n }\n\\ No newline at end of file"
  },
  {
    "sha": "9ea13438d36d3560796e633bd18b25bef20174cd",
    "filename": "src/main/java/br/com/desafio/petz/api/config/WebSecurityConfig.java",
    "status": "removed",
    "additions": 0,
    "deletions": 44,
    "changes": 44,
    "blob_url": "https://github.com/tperrut/petz-api/blob/d1e7ec2e8fe743208941e99bebb98dfa9988e0b9/src/main/java/br/com/desafio/petz/api/config/WebSecurityConfig.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/d1e7ec2e8fe743208941e99bebb98dfa9988e0b9/src/main/java/br/com/desafio/petz/api/config/WebSecurityConfig.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/config/WebSecurityConfig.java?ref=d1e7ec2e8fe743208941e99bebb98dfa9988e0b9",
    "patch": "@@ -1,44 +0,0 @@\n-package br.com.desafio.petz.api.config;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n-import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n-import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n-import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n-\n-@EnableGlobalMethodSecurity(prePostEnabled = true)\n-@EnableWebSecurity\n-\n-@Configuration\n-public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n-\t\n-\tprivate static final String USER = \"USER\";\n-\tprivate static final String ADMIN = \"ADMIN\";\n-\n-\t@Override\n-\tprotected void configure(HttpSecurity http) throws Exception {\n-\t\thttp\n-\t\t.authorizeRequests()\n-\t\t\t.antMatchers(HttpMethod.PUT).hasAnyRole(ADMIN)\n-\t\t\t.antMatchers(HttpMethod.DELETE).hasAnyRole(ADMIN)\n-\t\t.and()\n-\t\t\t.httpBasic()\n-\t\t.and()\n-\t\t\t.csrf().disable();\n-\t}\n-\t\n-\t@Autowired\n-\tprotected void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n-\t\tauth.inMemoryAuthentication()\n-\t\t\t.withUser(\"user\")\n-\t\t\t.password(\"{noop}123\")\n-\t\t\t.roles(USER)\n-\t\t.and()\n-\t\t\t.withUser(\"admin\")\n-\t\t\t.password(\"{noop}123\")\n-\t\t\t.roles(ADMIN,USER);\n-\t}\n-}"
  },
  {
    "sha": "74b6dcf3663a1e13ad8cc0b4faaf307a29f09705",
    "filename": "src/main/java/br/com/desafio/petz/api/converter/ClienteConveterImpl.java",
    "status": "renamed",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/converter/ClienteConveterImpl.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/converter/ClienteConveterImpl.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/converter/ClienteConveterImpl.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -1,4 +1,4 @@\n-package br.com.desafio.petz.api.service.conveter;\n+package br.com.desafio.petz.api.converter;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -8,6 +8,7 @@\n \n import br.com.desafio.petz.api.dto.ClienteDto;\n import br.com.desafio.petz.api.model.Cliente;\n+import br.com.desafio.petz.api.util.PasswordUtils;\n import br.com.desafio.petz.api.web.exception.BusinessException;\n \n @Service \n@@ -36,7 +37,8 @@\n \tprivate ClienteDto createNewDto(Cliente cliente) {\n \t\treturn new ClienteDto(cliente.getNome(),\n \t\t\t\tcliente.getEmail(),\n-\t\t\t\tcliente.getDataNascimento());\n+\t\t\t\tcliente.getDataNascimento(),\n+\t\t\t\tcliente.getPerfil());\n \t}\n \n \t@Override\n@@ -82,7 +84,8 @@ private void setValidFields(ClienteDto dto, Cliente cliente) {\n \t\tif(dto.getNome() != null) cliente.setNome(dto.getNome());\n \t\tif(dto.getEmail()!= null) cliente.setEmail(dto.getEmail());\n \t\tif(dto.getDataNascimento() != null) cliente.setDataNascimento(dto.getDataNascimento());\n-\t\t\t\t\n+\t\tif(dto.getSenha() != null) cliente.setSenha(PasswordUtils.gerarBCrypt(dto.getSenha()));\t\t\n+\t\tif(dto.getPerfil() != null) cliente.setPerfil(dto.getPerfil());\t\t\n \t}\n \n }",
    "previous_filename": "src/main/java/br/com/desafio/petz/api/service/conveter/ClienteConveterImpl.java"
  },
  {
    "sha": "e788537b1f4151d2e40e1b0dc31b1e14addf552f",
    "filename": "src/main/java/br/com/desafio/petz/api/converter/Converter.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/converter/Converter.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/converter/Converter.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/converter/Converter.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -1,4 +1,4 @@\n-package br.com.desafio.petz.api.service.conveter;\n+package br.com.desafio.petz.api.converter;\n \n import java.util.List;\n ",
    "previous_filename": "src/main/java/br/com/desafio/petz/api/service/conveter/Converter.java"
  },
  {
    "sha": "a57e1217f236d9c5a685614ff81e5efa6c2d76be",
    "filename": "src/main/java/br/com/desafio/petz/api/converter/PetConveterImpl.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/converter/PetConveterImpl.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/converter/PetConveterImpl.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/converter/PetConveterImpl.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -1,4 +1,4 @@\n-package br.com.desafio.petz.api.service.conveter;\n+package br.com.desafio.petz.api.converter;\n \n import java.util.ArrayList;\n import java.util.List;",
    "previous_filename": "src/main/java/br/com/desafio/petz/api/service/conveter/PetConveterImpl.java"
  },
  {
    "sha": "9ae1abc2cb5c2eefb69a8b099b1bd039b9457de3",
    "filename": "src/main/java/br/com/desafio/petz/api/dao/ClienteRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/dao/ClienteRepository.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/dao/ClienteRepository.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/dao/ClienteRepository.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -14,4 +14,6 @@\n \tOptional<Cliente> findById(Long id);\n \n \tOptional<List<Cliente>> findByNome(String nome);\n+\n+\tOptional<Cliente> findByEmail(String email);\n }"
  },
  {
    "sha": "1ec463f147187c98278d0283a42d6f97c9fd5f1d",
    "filename": "src/main/java/br/com/desafio/petz/api/dto/ClienteDto.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/dto/ClienteDto.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/dto/ClienteDto.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/dto/ClienteDto.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -8,6 +8,9 @@\n import org.springframework.format.annotation.DateTimeFormat;\n import org.springframework.format.annotation.DateTimeFormat.ISO;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import br.com.desafio.petz.api.enuns.PerfilEnum;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n@@ -17,6 +20,7 @@\n @Setter\n @NoArgsConstructor\n @AllArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n public class ClienteDto {\n \n \t@NotEmpty(message = \"Nome não pode ser vazio\")\n@@ -27,5 +31,19 @@\n \n \t@DateTimeFormat(iso = ISO.TIME, pattern = \"yyyy-MM-dd\")\n \tprivate LocalDate dataNascimento;\n+\t\n+\tprivate PerfilEnum perfil;\n+\t\n+\t@NotEmpty(message = \"Senha é obrigatória!\")\n+\tprivate String senha;\n+\t\n+\tpublic ClienteDto(String nome, String email, LocalDate date, PerfilEnum perfil) {\n+\t\tthis.nome = nome;\n+\t\tthis.dataNascimento = date;\n+\t\tthis.email = email;\n+\t\tthis.perfil = perfil;\n+\t}\n+\t\n+\n \n }"
  },
  {
    "sha": "9cd44dce3be8627e23aa70e95ff3f430d855664e",
    "filename": "src/main/java/br/com/desafio/petz/api/dto/PetDto.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/dto/PetDto.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/dto/PetDto.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/dto/PetDto.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -11,8 +11,8 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonInclude;\n \n+import br.com.desafio.petz.api.enuns.EnumTipo;\n import br.com.desafio.petz.api.model.Cliente;\n-import br.com.desafio.petz.api.model.enuns.EnumTipo;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;"
  },
  {
    "sha": "c4befcdfb52c2fbdfdaf46b2371c002979e76acc",
    "filename": "src/main/java/br/com/desafio/petz/api/enuns/EnumTipo.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/enuns/EnumTipo.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/enuns/EnumTipo.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/enuns/EnumTipo.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -1,4 +1,4 @@\n-package br.com.desafio.petz.api.model.enuns;\n+package br.com.desafio.petz.api.enuns;\n \n public enum EnumTipo {\n \tAVE(1), CACHORRO(2), GATO(3), PEIXE(4), OUTROS(5);",
    "previous_filename": "src/main/java/br/com/desafio/petz/api/model/enuns/EnumTipo.java"
  },
  {
    "sha": "04f5bb7e82aada7c385084ad7aadda17a1f844cc",
    "filename": "src/main/java/br/com/desafio/petz/api/enuns/PerfilEnum.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/enuns/PerfilEnum.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/enuns/PerfilEnum.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/enuns/PerfilEnum.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,7 @@\n+package br.com.desafio.petz.api.enuns;\n+\n+public enum PerfilEnum {\n+\t\n+\tROLE_ADMIN,\n+\tROLE_USUARIO;\n+}"
  },
  {
    "sha": "85efe254bf4f71cfe815c0d3263c2993cff4af21",
    "filename": "src/main/java/br/com/desafio/petz/api/model/Cliente.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/model/Cliente.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/model/Cliente.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/model/Cliente.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -7,6 +7,8 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n@@ -20,16 +22,19 @@\n import org.springframework.format.annotation.DateTimeFormat;\n import org.springframework.format.annotation.DateTimeFormat.ISO;\n \n+import br.com.desafio.petz.api.enuns.PerfilEnum;\n+import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n-@SuppressWarnings(\"serial\")\n @Entity\n @Table(name = \"Cliente\")\n-@Getter @Setter @NoArgsConstructor\n+@Getter @Setter @NoArgsConstructor @AllArgsConstructor\n public class Cliente implements Serializable {\n \t\n+\tprivate static final long serialVersionUID = 4257771624784337787L;\n+\n \t@Id\n \t@GeneratedValue(strategy = GenerationType.AUTO, generator = \"native\")\n \t@GenericGenerator(name = \"native\", strategy = \"native\")\n@@ -50,6 +55,12 @@\n \t@Column(nullable = false)\n \tprivate String nome;\n \t\n+\t@Column(nullable = false)\n+\t@Enumerated(EnumType.STRING)\n+\tprivate PerfilEnum perfil;\n+\t\n+\t@Column(nullable = false)\n+\tprivate String senha;\n \t\n \tpublic Cliente(Long id) {\n \t\tthis.id = id;"
  },
  {
    "sha": "b918047ecb0c78a174108aaefb2c6d41f45c9474",
    "filename": "src/main/java/br/com/desafio/petz/api/model/Pet.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/model/Pet.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/model/Pet.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/model/Pet.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -19,7 +19,7 @@\n import org.springframework.format.annotation.DateTimeFormat;\n import org.springframework.format.annotation.DateTimeFormat.ISO;\n \n-import br.com.desafio.petz.api.model.enuns.EnumTipo;\n+import br.com.desafio.petz.api.enuns.EnumTipo;\n import io.swagger.annotations.ApiModelProperty;\n import lombok.AllArgsConstructor;\n import lombok.Getter;"
  },
  {
    "sha": "40e71def7962746e63beb89da1192824f040796b",
    "filename": "src/main/java/br/com/desafio/petz/api/security/JwtAuthenticationEntryPoint.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/JwtAuthenticationEntryPoint.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/JwtAuthenticationEntryPoint.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/JwtAuthenticationEntryPoint.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,21 @@\n+package br.com.desafio.petz.api.security;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {\n+\n+\t@Override\n+\tpublic void commence(HttpServletRequest request, HttpServletResponse response,\n+\t\t\tAuthenticationException authException) throws IOException {\n+\t\tresponse.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n+\t\t\t\t\"Acesso negado. Você deve estar autenticado no sistema para acessar a URL solicitada.\");\n+\t}\n+}"
  },
  {
    "sha": "3cfb175e63599169d6a1e221bd9fc945a1f583d1",
    "filename": "src/main/java/br/com/desafio/petz/api/security/JwtUser.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/JwtUser.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/JwtUser.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/JwtUser.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,62 @@\n+package br.com.desafio.petz.api.security;\n+\n+import java.util.Collection;\n+\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+public class JwtUser implements UserDetails {\n+\t\n+\tprivate static final long serialVersionUID = -268046329021485932L;\n+\n+\tprivate Long id;\n+\tprivate String username;\n+\tprivate String password;\n+\tprivate Collection<? extends GrantedAuthority> authorities;\n+\n+\tpublic JwtUser(Long id, String username, String password, Collection<? extends GrantedAuthority> authorities) {\n+\t\tthis.id = id;\n+\t\tthis.username = username;\n+\t\tthis.password = password;\n+\t\tthis.authorities = authorities;\n+\t}\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\t@Override\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAccountNonExpired() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAccountNonLocked() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isCredentialsNonExpired() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\t@Override\n+\tpublic Collection<? extends GrantedAuthority> getAuthorities() {\n+\t\treturn authorities;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEnabled() {\n+\t\treturn true;\n+\t}\n+}"
  },
  {
    "sha": "781aa8790fabf5f17b4b69e763ce48a9d67d8025",
    "filename": "src/main/java/br/com/desafio/petz/api/security/JwtUserFactory.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/JwtUserFactory.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/JwtUserFactory.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/JwtUserFactory.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,39 @@\n+package br.com.desafio.petz.api.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+\n+import br.com.desafio.petz.api.enuns.PerfilEnum;\n+import br.com.desafio.petz.api.model.Cliente;\n+\n+public class JwtUserFactory {\n+\t\n+\tprivate JwtUserFactory() {\n+\t}\n+\n+\t/**\n+\t * Faz a conversão e cria um JwtUser baseado nas infos do Cliente.\n+\t * \n+\t * @param cliente\n+\t * @return JwtUser\n+\t */\n+\tpublic static JwtUser create(Cliente cliente) {\n+\t\treturn new JwtUser(cliente.getId(), cliente.getEmail(), cliente.getSenha(),\n+\t\t\t\tmapToGrantedAuthorities(cliente.getPerfil()));\n+\t}\n+\n+\t/**\n+\t *  Faz a conversão do perfil do user para o fmt do Spring Security.\n+\t * \n+\t * @param perfilEnum\n+\t * @return List<GrantedAuthority>\n+\t */\n+\tprivate static List<GrantedAuthority> mapToGrantedAuthorities(PerfilEnum perfilEnum) {\n+\t\tList<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n+\t\tauthorities.add(new SimpleGrantedAuthority(perfilEnum.toString()));\n+\t\treturn authorities;\n+\t}\n+}"
  },
  {
    "sha": "be97ccb47a4d2acc16f6fa3a26967a478bea89a7",
    "filename": "src/main/java/br/com/desafio/petz/api/security/config/WebSecurityConfig.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/config/WebSecurityConfig.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/config/WebSecurityConfig.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/config/WebSecurityConfig.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,68 @@\n+package br.com.desafio.petz.api.security.config;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.BeanIds;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+\n+import br.com.desafio.petz.api.security.JwtAuthenticationEntryPoint;\n+import br.com.desafio.petz.api.security.filters.JwtAuthenticationTokenFilter;\n+\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@EnableWebSecurity\n+@Configuration\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\t\n+\t@Autowired\n+\tprivate JwtAuthenticationEntryPoint unauthorizedHandler;\n+\n+\t@Autowired\n+\tprivate UserDetailsService userDetailsService;\n+\n+\t@Autowired \n+\tpublic void configureAuthentication(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {\n+\t\tauthenticationManagerBuilder.userDetailsService(this.userDetailsService).passwordEncoder(passwordEncoder());\n+\t}\n+\t\n+\t@Bean(name = BeanIds.AUTHENTICATION_MANAGER)\n+    @Override\n+    public AuthenticationManager authenticationManagerBean() throws Exception {\n+       return super.authenticationManagerBean();\n+\t}\n+\t\n+\t@Bean\n+\tpublic PasswordEncoder passwordEncoder() {\n+\t\treturn new BCryptPasswordEncoder();\n+\t}\n+\n+\t@Bean\n+\tpublic JwtAuthenticationTokenFilter authenticationTokenFilterBean() throws Exception {\n+\t\treturn new JwtAuthenticationTokenFilter();\n+\t}\n+\n+\t@Override\n+\tprotected void configure(HttpSecurity httpSecurity) throws Exception {\n+\t\thttpSecurity.csrf().disable()\n+\t\t\t\t.exceptionHandling().authenticationEntryPoint(unauthorizedHandler)\n+\t\t\t\t.and()\n+\t\t\t\t.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()\n+\t\t\t\t.antMatchers(\"/auth**\",\"/rest/clientes\", \"/**\",  \"db/**\", \"/v2/api-docs\", \"/swagger-ui.html\",\n+\t\t\t\t\t\t\"/swagger-resources/**\", \"/configuration/security\")\n+\t\t\t\t.permitAll()\n+\t\t\t\t.anyRequest().authenticated();\n+\n+\t\thttpSecurity.addFilterBefore(authenticationTokenFilterBean(), UsernamePasswordAuthenticationFilter.class);\n+\t\thttpSecurity.headers().cacheControl();\n+\t}\n+}"
  },
  {
    "sha": "26501b47c037e8a1fd9c89cbf7027c00e85289b6",
    "filename": "src/main/java/br/com/desafio/petz/api/security/controller/AuthenticationController.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/controller/AuthenticationController.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/controller/AuthenticationController.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/controller/AuthenticationController.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,113 @@\n+package br.com.desafio.petz.api.security.controller;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.validation.Valid;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.validation.BindingResult;\n+import org.springframework.web.bind.annotation.CrossOrigin;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import br.com.desafio.petz.api.security.dto.JwtAuthenticationDto;\n+import br.com.desafio.petz.api.security.dto.TokenDto;\n+import br.com.desafio.petz.api.security.util.JwtTokenUtil;\n+import br.com.desafio.petz.api.web.response.Response;\n+import br.com.desafio.petz.api.web.response.ResponseApi;\n+\n+@RestController\n+@RequestMapping(\"/auth\")\n+@CrossOrigin(origins = \"*\")\n+public class AuthenticationController {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(AuthenticationController.class);\n+\tprivate static final String TOKEN_HEADER = \"Authorization\";\n+\tprivate static final String BEARER_PREFIX = \"Bearer \";\n+\n+\t@Autowired\n+\tprivate AuthenticationManager authenticationManager;\n+\n+\t@Autowired\n+\tprivate JwtTokenUtil jwtTokenUtil;\n+\n+\t@Autowired\n+\tprivate UserDetailsService userDetailsService;\n+\n+\t/**\n+\t * Gera e retorna um novo token JWT.\n+\t * \n+\t * @param authenticationDto\n+\t * @param result\n+\t * @return ResponseEntity<Response<TokenDto>>\n+\t * @throws AuthenticationException\n+\t */\n+\t@PostMapping\n+\tpublic ResponseEntity<Response<TokenDto>> gerarTokenJwt(\n+\t\t\t@Valid @RequestBody JwtAuthenticationDto authenticationDto, BindingResult result)\n+\t\t\tthrows AuthenticationException {\n+\t\tResponse<TokenDto> response = new ResponseApi<>();\n+\n+\t\tif (result.hasErrors()) {\n+\t\t\tlog.error(\"Erro validando lançamento: {}\", result.getAllErrors());\n+\t\t\tresult.getAllErrors().forEach(error -> response.getErros().add(error.getDefaultMessage()));\n+\t\t\treturn ResponseEntity.badRequest().body(response);\n+\t\t}\n+\n+\t\tlog.info(\"Gerando token para o email {}.\", authenticationDto.getEmail());\n+\t\tAuthentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(\n+\t\t\t\tauthenticationDto.getEmail(), authenticationDto.getSenha()));\n+\t\tSecurityContextHolder.getContext().setAuthentication(authentication);\n+\n+\t\tUserDetails userDetails = userDetailsService.loadUserByUsername(authenticationDto.getEmail());\n+\t\tString token = jwtTokenUtil.obterToken(userDetails);\n+\t\tresponse.setData(Arrays.asList(new TokenDto(token)));\n+\n+\t\treturn ResponseEntity.ok(response);\n+\t}\n+\n+\t/**\n+\t * Gera um novo token com uma nova data de expiração.\n+\t * \n+\t * @param request\n+\t * @return ResponseEntity<Response<TokenDto>>\n+\t */\n+\t@PostMapping(value = \"/refresh\")\n+\tpublic ResponseEntity<Response<TokenDto>> gerarRefreshTokenJwt(HttpServletRequest request) {\n+\t\tlog.info(\"Gerando refresh token JWT.\");\n+\t\tResponse<TokenDto> response = new ResponseApi<>();\n+\t\tOptional<String> token = Optional.ofNullable(request.getHeader(TOKEN_HEADER));\n+\t\t\n+\t\tif (token.isPresent() && token.get().startsWith(BEARER_PREFIX)) {\n+\t\t\ttoken = Optional.of(token.get().substring(7));\n+        }\n+\t\t\n+\t\tif (!token.isPresent()) {\n+\t\t\tresponse.getErros().add(\"Token não informado.\");\n+\t\t} else if (!jwtTokenUtil.tokenValido(token.get())) {\n+\t\t\tresponse.getErros().add(\"Token inválido ou expirado.\");\n+\t\t}\n+\t\t\n+\t\tif (!response.getErros().isEmpty()) { \n+\t\t\treturn ResponseEntity.badRequest().body(response);\n+\t\t}\n+\t\t\n+\t\tString refreshedToken = jwtTokenUtil.refreshToken(token.get());\n+\t\tresponse.setData(Arrays.asList(new TokenDto(refreshedToken)));\n+\t\treturn ResponseEntity.ok(response);\n+\t}\n+}"
  },
  {
    "sha": "f83bd8aded5937cbafc3e81612e8318415670547",
    "filename": "src/main/java/br/com/desafio/petz/api/security/dto/JwtAuthenticationDto.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/dto/JwtAuthenticationDto.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/dto/JwtAuthenticationDto.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/dto/JwtAuthenticationDto.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,37 @@\n+package br.com.desafio.petz.api.security.dto;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.NotEmpty;\n+\n+public class JwtAuthenticationDto {\n+\t\n+\tprivate String email;\n+\tprivate String senha;\n+\n+\tpublic JwtAuthenticationDto() {\n+\t}\n+\n+\t@NotEmpty(message = \"Email não pode ser vazio.\")\n+\t@Email(message = \"Email inválido.\")\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\n+\t@NotEmpty(message = \"Senha não pode ser vazia.\")\n+\tpublic String getSenha() {\n+\t\treturn senha;\n+\t}\n+\n+\tpublic void setSenha(String senha) {\n+\t\tthis.senha = senha;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"JwtAuthenticationRequestDto [email=\" + email + \", senha=\" + senha + \"]\";\n+\t}\n+}"
  },
  {
    "sha": "57759a26f4ea70e8fdc090e25bc74c1b41f7a5f3",
    "filename": "src/main/java/br/com/desafio/petz/api/security/dto/TokenDto.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/dto/TokenDto.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/dto/TokenDto.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/dto/TokenDto.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,21 @@\n+package br.com.desafio.petz.api.security.dto;\n+\n+public class TokenDto {\n+\n+\tprivate String token; \n+\t\n+\tpublic TokenDto() {\n+\t}\n+\t\n+\tpublic TokenDto(String token) {\n+\t\tthis.token = token;\n+\t}\n+\n+\tpublic String getToken() {\n+\t\treturn token;\n+\t}\n+\n+\tpublic void setToken(String token) {\n+\t\tthis.token = token;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d7ea5eba6ea8f6759563204ef0689ceedf0f3510",
    "filename": "src/main/java/br/com/desafio/petz/api/security/filters/JwtAuthenticationTokenFilter.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/filters/JwtAuthenticationTokenFilter.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/filters/JwtAuthenticationTokenFilter.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/filters/JwtAuthenticationTokenFilter.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,52 @@\n+package br.com.desafio.petz.api.security.filters;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import br.com.desafio.petz.api.security.util.JwtTokenUtil;\n+\n+public class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n+\n+\tprivate static final String AUTH_HEADER = \"Authorization\";\n+\tprivate static final String BEARER_PREFIX = \"Bearer \";\n+\n+\t@Autowired\n+    private UserDetailsService userDetailsService;\n+\t\n+\t@Autowired\n+    private JwtTokenUtil jwtTokenUtil;\n+\n+\t@Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException {\n+        String token = request.getHeader(AUTH_HEADER);\n+        if (token != null && token.startsWith(BEARER_PREFIX)) {\n+        \ttoken = token.substring(7);\n+        }\n+        String username = jwtTokenUtil.getUsernameFromToken(token);\n+\n+        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n+\n+            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);\n+            \n+            if (jwtTokenUtil.tokenValido(token)) {\n+                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n+                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n+                SecurityContextHolder.getContext().setAuthentication(authentication);\n+            }\n+        }\n+\n+        chain.doFilter(request, response);\n+    }\n+}"
  },
  {
    "sha": "e6747de71b8e8f001aef507edd6becaf744146ad",
    "filename": "src/main/java/br/com/desafio/petz/api/security/service/JwtUserDetailsServiceImpl.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/service/JwtUserDetailsServiceImpl.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/service/JwtUserDetailsServiceImpl.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/service/JwtUserDetailsServiceImpl.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,34 @@\n+package br.com.desafio.petz.api.security.service;\n+\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.stereotype.Service;\n+\n+import br.com.desafio.petz.api.model.Cliente;\n+import br.com.desafio.petz.api.security.JwtUserFactory;\n+import br.com.desafio.petz.api.service.ClienteService;\n+\n+@Service\n+public class JwtUserDetailsServiceImpl implements UserDetailsService {\n+\t\n+\t@Autowired\n+\tprivate ClienteService clienteService;\n+\n+\t@Override\n+\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n+\t\tOptional<Cliente> cliente = clienteService.buscarPorEmail(username);\n+\n+\t\tif (cliente.isPresent()) {\n+\t\t\treturn JwtUserFactory.create(cliente.get());\n+\t\t}\n+\n+\t\tthrow new UsernameNotFoundException(\"Email não encontrado.\");\n+\t}\n+\n+\t\n+\n+}"
  },
  {
    "sha": "c359ef49eb7efc02756bdbf5919c39c14b2e80fc",
    "filename": "src/main/java/br/com/desafio/petz/api/security/util/JwtTokenUtil.java",
    "status": "added",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/util/JwtTokenUtil.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/security/util/JwtTokenUtil.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/security/util/JwtTokenUtil.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,156 @@\n+package br.com.desafio.petz.api.security.util;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.stereotype.Component;\n+\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+\n+@Component\n+public class JwtTokenUtil {\n+\t\n+\tstatic final String CLAIM_KEY_USERNAME = \"sub\";\n+\tstatic final String CLAIM_KEY_ROLE = \"role\";\n+\tstatic final String CLAIM_KEY_AUDIENCE = \"audience\";\n+\tstatic final String CLAIM_KEY_CREATED = \"created\";\n+\n+\t@Value(\"${jwt.secret}\")\n+\tprivate String secret;\n+\n+\t@Value(\"${jwt.expiration}\")\n+\tprivate Long expiration;\n+\n+\t/**\n+\t * Obtém o username (email) contido no token JWT.\n+\t * \n+\t * @param token\n+\t * @return String\n+\t */\n+\tpublic String getUsernameFromToken(String token) {\n+\t\tString username;\n+\t\ttry {\n+\t\t\tClaims claims = getClaimsFromToken(token);\n+\t\t\tusername = claims.getSubject();\n+\t\t} catch (Exception e) {\n+\t\t\tusername = null;\n+\t\t}\n+\t\treturn username;\n+\t}\n+\n+\t/**\n+\t * Retorna a data de expiração de um token JWT.\n+\t * \n+\t * @param token\n+\t * @return Date\n+\t */\n+\tpublic Date getExpirationDateFromToken(String token) {\n+\t\tDate expiration;\n+\t\ttry {\n+\t\t\tClaims claims = getClaimsFromToken(token);\n+\t\t\texpiration = claims.getExpiration();\n+\t\t} catch (Exception e) {\n+\t\t\texpiration = null;\n+\t\t}\n+\t\treturn expiration;\n+\t}\n+\n+\t/**\n+\t * Cria um novo token (refresh).\n+\t * \n+\t * @param token\n+\t * @return String\n+\t */\n+\tpublic String refreshToken(String token) {\n+\t\tString refreshedToken;\n+\t\ttry {\n+\t\t\tClaims claims = getClaimsFromToken(token);\n+\t\t\tclaims.put(CLAIM_KEY_CREATED, new Date());\n+\t\t\trefreshedToken = gerarToken(claims);\n+\t\t} catch (Exception e) {\n+\t\t\trefreshedToken = null;\n+\t\t}\n+\t\treturn refreshedToken;\n+\t}\n+\n+\t/**\n+\t * Verifica e retorna se um token JWT é válido.\n+\t * \n+\t * @param token\n+\t * @return boolean\n+\t */\n+\tpublic boolean tokenValido(String token) {\n+\t\treturn !tokenExpirado(token);\n+\t}\n+\n+\t/**\n+\t * Retorna um novo token JWT com base nos dados do usuários.\n+\t * \n+\t * @param userDetails\n+\t * @return String\n+\t */\n+\tpublic String obterToken(UserDetails userDetails) {\n+\t\tMap<String, Object> claims = new HashMap<>();\n+\t\tclaims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());\n+\t\tuserDetails.getAuthorities().forEach(authority -> claims.put(CLAIM_KEY_ROLE, authority.getAuthority()));\n+\t\tclaims.put(CLAIM_KEY_CREATED, new Date());\n+\n+\t\treturn gerarToken(claims);\n+\t}\n+\n+\t/**\n+\t * Realiza o parse do token JWT para extrair as informações contidas no\n+\t * corpo dele.\n+\t * \n+\t * @param token\n+\t * @return Claims\n+\t */\n+\tprivate Claims getClaimsFromToken(String token) {\n+\t\tClaims claims;\n+\t\ttry {\n+\t\t\tclaims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();\n+\t\t} catch (Exception e) {\n+\t\t\tclaims = null;\n+\t\t}\n+\t\treturn claims;\n+\t}\n+\n+\t/**\n+\t * Retorna a data de expiração com base na data atual.\n+\t * \n+\t * @return Date\n+\t */\n+\tprivate Date gerarDataExpiracao() {\n+\t\treturn new Date(System.currentTimeMillis() + expiration * 1000);\n+\t}\n+\n+\t/**\n+\t * Verifica se um token JTW está expirado.\n+\t * \n+\t * @param token\n+\t * @return boolean\n+\t */\n+\tprivate boolean tokenExpirado(String token) {\n+\t\tDate dataExpiracao = this.getExpirationDateFromToken(token);\n+\t\tif (dataExpiracao == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn dataExpiracao.before(new Date());\n+\t}\n+\n+\t/**\n+\t * Gera um novo token JWT contendo os dados (claims) fornecidos.\n+\t * \n+\t * @param claims\n+\t * @return String\n+\t */\n+\tprivate String gerarToken(Map<String, Object> claims) {\n+\t\treturn Jwts.builder().setClaims(claims).setExpiration(gerarDataExpiracao())\n+\t\t\t\t.signWith(SignatureAlgorithm.HS512, secret).compact();\n+\t}\n+}"
  },
  {
    "sha": "0773ef084f6a81290497aeb805735eda8bff35d3",
    "filename": "src/main/java/br/com/desafio/petz/api/service/ClienteService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/service/ClienteService.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/service/ClienteService.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/service/ClienteService.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -26,4 +26,6 @@\n \n \tList<Cliente> findAll() throws BusinessException ;\n \n+\tOptional<Cliente> buscarPorEmail(String username);\n+\n }"
  },
  {
    "sha": "c88158538703bd2f5ca2e36109de5ca52e9ded40",
    "filename": "src/main/java/br/com/desafio/petz/api/service/ClienteServiceImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 10,
    "changes": 17,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/service/ClienteServiceImpl.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/service/ClienteServiceImpl.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/service/ClienteServiceImpl.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -3,8 +3,6 @@\n import java.util.List;\n import java.util.Optional;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.cache.annotation.CachePut;\n import org.springframework.cache.annotation.Cacheable;\n@@ -52,15 +50,9 @@ public void excluir(Long id) throws ResourceNotFoundException, BusinessException\n \t\t}\n \t\t\n \t}\n-\t\n-\t\n-\tpublic Optional<Cliente> getClienteById(Long id) {\n-\t\t return dao.findById(id);\n-\t}\n \n \tprivate void verificarSeClienteExiste(Long id) {\n-\t\tCliente cliente = dao.findById(id)\n-\t\t\t\t.orElseThrow(() -> new ResourceNotFoundException(\"CLIENTE ID \" + id.toString()));\n+\t\tdao.findById(id).orElseThrow(() -> new ResourceNotFoundException(\"CLIENTE ID \" + id.toString()));\n \t}\n \n \t@Override\n@@ -97,7 +89,7 @@ private void verificarSeClienteExiste(Long id) {\n \t\ttry {\n \t\t\treturn dao.findAll(pageable);\n \t\t} catch (Exception e) {\n-\t\t\tthrow new BusinessException(\"ERRO INTERNO -> findAll ( pageable ) \");\n+\t\t\tthrow new BusinessException(\"ERRO INTERNO -> findAll ( pageable ) \", e);\n \t\t}\n \t}\n \n@@ -112,5 +104,10 @@ private void verificarSeClienteExiste(Long id) {\n \t\t}\n \t}\n \n+\t@Override \t@Transactional(readOnly = true)\n+\tpublic Optional<Cliente> buscarPorEmail(String email) {\n+\t\treturn dao.findByEmail(email);\n+\t}\n+\n \n }"
  },
  {
    "sha": "aa1a146cf497b76b93d736cbe8d0dd572909d96d",
    "filename": "src/main/java/br/com/desafio/petz/api/util/EncriptySenhaUtil.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/util/EncriptySenhaUtil.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/util/EncriptySenhaUtil.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/util/EncriptySenhaUtil.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,20 @@\n+package br.com.desafio.petz.api.util;\n+\n+public class EncriptySenhaUtil {\n+\t\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\t\n+\t\tString senhaEncoded = PasswordUtils.gerarBCrypt(\"12345\");\n+\t\tSystem.out.println(\"Senha encoded: \" + senhaEncoded);\t\n+\n+\t\tsenhaEncoded = \"$2a$10$ZA4vDzmPu5IRP5iAgrZypO4pHzZvN/VkyRuvQSCkzqXIz3gS4Cti6\";\n+//\t\tSystem.out.println(\"Senha encoded novamente: \" + senhaEncoded);\t\n+\t\t\n+\t\tSystem.out.println(\"Senha válida: \" + PasswordUtils.senhaValida(\"Fulano de Tal\", senhaEncoded));\t\n+\t\t\n+\t\t\n+\t}\n+\t\n+}\n+\t"
  },
  {
    "sha": "cdd9e95d3b5034a5f62926bdf5db1086fbfb0fdd",
    "filename": "src/main/java/br/com/desafio/petz/api/util/PasswordUtils.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/tperrut/petz-api/blob/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/util/PasswordUtils.java",
    "raw_url": "https://github.com/tperrut/petz-api/raw/13f151e1298899c8e9671265f0c95a935638a642/src/main/java/br/com/desafio/petz/api/util/PasswordUtils.java",
    "contents_url": "https://api.github.com/repos/tperrut/petz-api/contents/src/main/java/br/com/desafio/petz/api/util/PasswordUtils.java?ref=13f151e1298899c8e9671265f0c95a935638a642",
    "patch": "@@ -0,0 +1,42 @@\n+package br.com.desafio.petz.api.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+\n+public class PasswordUtils {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PasswordUtils.class);\n+\n+\tpublic PasswordUtils() {\n+\t}\n+\n+\t/**\n+\t * Gera um hash utilizando o BCrypt.\n+\t * \n+\t * @param senha\n+\t * @return String\n+\t */\n+\tpublic static String gerarBCrypt(String senha) {\n+\t\tif (senha == null) {\n+\t\t\treturn senha;\n+\t\t}\n+\n+\t\tlog.info(\"Gerando hash com o BCrypt.\");\n+\t\tBCryptPasswordEncoder bCryptEncoder = new BCryptPasswordEncoder();\n+\t\treturn bCryptEncoder.encode(senha);\n+\t}\n+\t\n+\t/**\n+\t * Verifica se a senha é válida. \n+\t * \n+\t * @param senha\n+\t * @param senhaEncoded\n+\t * @return boolean\n+\t */\n+\tpublic static boolean senhaValida(String senha, String senhaEncoded) {\n+\t\tBCryptPasswordEncoder bCryptEncoder = new BCryptPasswordEncoder();\n+\t\treturn bCryptEncoder.matches(senha, senhaEncoded);\n+\t}\n+\n+}"
  }
]
