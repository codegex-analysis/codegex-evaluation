[
  {
    "sha": "8bb52b4d449e86a7156d95f497eab1be1787c8df",
    "filename": ".all-contributorsrc",
    "status": "added",
    "additions": 593,
    "deletions": 0,
    "changes": 593,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/.all-contributorsrc",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/.all-contributorsrc",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/.all-contributorsrc?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,593 @@\n+{\n+  \"files\": [\n+    \"README.md\"\n+  ],\n+  \"imageSize\": 100,\n+  \"commit\": false,\n+  \"contributors\": [\n+    {\n+      \"login\": \"adityabisoi\",\n+      \"name\": \"Aditya Bisoi\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/42573842?v=4\",\n+      \"profile\": \"http://adityabisoi.github.io\",\n+      \"contributions\": [\n+        \"ideas\",\n+        \"code\",\n+        \"maintenance\"\n+      ]\n+    },\n+    {\n+      \"login\": \"anushkasinghal11\",\n+      \"name\": \"anushkasinghal11\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/71463658?v=4\",\n+      \"profile\": \"https://github.com/anushkasinghal11\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Nivedita967\",\n+      \"name\": \"Nivedita Singh\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/66518355?v=4\",\n+      \"profile\": \"https://www.linkedin.com/in/nivedita-singh-195b6818a/\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Aarushi11H\",\n+      \"name\": \"Aarushi Hans\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/67260600?v=4\",\n+      \"profile\": \"https://github.com/Aarushi11H\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"stormfireuttam\",\n+      \"name\": \"Uttam Mittal\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/40880896?v=4\",\n+      \"profile\": \"https://github.com/stormfireuttam\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"yashasvimisra2798\",\n+      \"name\": \"Yashasvi Misra\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/54177363?v=4\",\n+      \"profile\": \"https://github.com/yashasvimisra2798\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"abhay313\",\n+      \"name\": \"Abhay Singh Yadav\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43968252?v=4\",\n+      \"profile\": \"https://github.com/abhay313\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"codewithvk\",\n+      \"name\": \"Vivekkumar Javiya\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/61119120?v=4\",\n+      \"profile\": \"https://github.com/codewithvk\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"satyampandeygit\",\n+      \"name\": \"Satyam Pandey\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/69512057?v=4\",\n+      \"profile\": \"https://github.com/satyampandeygit\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"vikhyatsingh123\",\n+      \"name\": \"vikhyat singh\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/57625505?v=4\",\n+      \"profile\": \"https://github.com/vikhyatsingh123\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"manishaag7\",\n+      \"name\": \"Manisha Agarwal\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/55875847?v=4\",\n+      \"profile\": \"https://github.com/manishaag7\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"prashant-3108\",\n+      \"name\": \"Prashant Jangid\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/71134279?v=4\",\n+      \"profile\": \"https://github.com/prashant-3108\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"mustang519\",\n+      \"name\": \"mustang519\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/75406889?v=4\",\n+      \"profile\": \"https://github.com/mustang519\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"vikasahlawat228\",\n+      \"name\": \"vikasahlawat228\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/60697488?v=4\",\n+      \"profile\": \"https://github.com/vikasahlawat228\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"sourav-suku\",\n+      \"name\": \"Sourav Sukumaran\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/65731208?v=4\",\n+      \"profile\": \"https://github.com/sourav-suku\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Subhankar4901\",\n+      \"name\": \"RonyFromIITKGP\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/70016856?v=4\",\n+      \"profile\": \"https://github.com/Subhankar4901\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"itish-agarwal\",\n+      \"name\": \"Itish Agarwal\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/56088263?v=4\",\n+      \"profile\": \"https://github.com/itish-agarwal\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Sakshay-gupta\",\n+      \"name\": \"Sakshay-gupta\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/75110589?v=4\",\n+      \"profile\": \"https://github.com/Sakshay-gupta\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Dhruv-Rathi\",\n+      \"name\": \"DHRUV RATHI\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/73396815?v=4\",\n+      \"profile\": \"https://github.com/Dhruv-Rathi\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Tanvie\",\n+      \"name\": \"Tanvi Wakade\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/64800176?v=4\",\n+      \"profile\": \"https://github.com/Tanvie\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"suhas142\",\n+      \"name\": \"suhas142\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/57312479?v=4\",\n+      \"profile\": \"https://github.com/suhas142\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"satyam20-sys\",\n+      \"name\": \"satyam20-sys\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/72157667?v=4\",\n+      \"profile\": \"https://github.com/satyam20-sys\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"pratyush25\",\n+      \"name\": \"Pratyush Kumar Swain\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/63120678?v=4\",\n+      \"profile\": \"https://github.com/pratyush25\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"hr1shu\",\n+      \"name\": \"RISHAV KUMAR\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/57145318?v=4\",\n+      \"profile\": \"http://hr1shu.pythonanywhere.com\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"chirag828049\",\n+      \"name\": \"Chirag Ghosh\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/75582834?v=4\",\n+      \"profile\": \"https://github.com/chirag828049\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"aditkumar72\",\n+      \"name\": \"Aditya Tewary\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/40900556?v=4\",\n+      \"profile\": \"https://github.com/aditkumar72\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Mintuagarwal\",\n+      \"name\": \"Mintu Agarwal\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/45268957?v=4\",\n+      \"profile\": \"https://github.com/Mintuagarwal\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"prakhar1144\",\n+      \"name\": \"Prakhar Pratyush\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/56781761?v=4\",\n+      \"profile\": \"https://github.com/prakhar1144\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"jaisai6\",\n+      \"name\": \"JAISAIKRISHNAN\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/60820625?v=4\",\n+      \"profile\": \"https://github.com/jaisai6\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"aastha1999\",\n+      \"name\": \"Aastha Asthana\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/52820645?v=4\",\n+      \"profile\": \"https://github.com/aastha1999\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"uddeshyatyagi\",\n+      \"name\": \"Uddeshya Tyagi\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/54842397?v=4\",\n+      \"profile\": \"https://www.linkedin.com/in/uddeshya-tyagi-04a786195/\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"shash-2468\",\n+      \"name\": \"shash-2468\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/74864626?v=4\",\n+      \"profile\": \"https://github.com/shash-2468\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"saloniankita\",\n+      \"name\": \"Ankita Saloni\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/56873389?v=4\",\n+      \"profile\": \"https://www.linkedin.com/in/saloniankita\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"arihantbansal\",\n+      \"name\": \"Arihant Bansal\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/17180950?v=4\",\n+      \"profile\": \"https://arihantbansal.github.io/\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"RazaKhanGit\",\n+      \"name\": \"Md Raza Khan\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/63139117?v=4\",\n+      \"profile\": \"https://github.com/RazaKhanGit\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"LazyCoder-1506\",\n+      \"name\": \"Pranayan Metiya\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/58332911?v=4\",\n+      \"profile\": \"https://github.com/LazyCoder-1506\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Devansh252\",\n+      \"name\": \"Devansh Shukla\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/46221293?v=4\",\n+      \"profile\": \"https://devansh252.github.io/devanshportfoliowebpage/\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"lopeselio\",\n+      \"name\": \"devELIOper\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/43913734?v=4\",\n+      \"profile\": \"https://develioper.vercel.app\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"avinash14022002\",\n+      \"name\": \"Avinash Vijayvargiya\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/66490629?v=4\",\n+      \"profile\": \"https://github.com/avinash14022002\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Rishika6\",\n+      \"name\": \"Rishika Wadhera\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/53297570?v=4\",\n+      \"profile\": \"https://github.com/Rishika6\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"RisHaV-IITKGP\",\n+      \"name\": \"RisHaV-IITKGP\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/57884818?v=4\",\n+      \"profile\": \"https://github.com/RisHaV-IITKGP\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Dineshhardasani\",\n+      \"name\": \"Dinesh Hardasani\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/45535600?v=4\",\n+      \"profile\": \"https://github.com/Dineshhardasani\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Ansh-Sarkar\",\n+      \"name\": \"Ansh Sarkar\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/75054354?v=4\",\n+      \"profile\": \"https://github.com/Ansh-Sarkar\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"srinath1412001\",\n+      \"name\": \"R Srinath\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/47494475?v=4\",\n+      \"profile\": \"https://github.com/srinath1412001\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"im-krishna\",\n+      \"name\": \"im-krishna\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/68428319?v=4\",\n+      \"profile\": \"https://github.com/im-krishna\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"areeb77\",\n+      \"name\": \"Md Areeb Hussain\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/57293312?v=4\",\n+      \"profile\": \"https://github.com/areeb77\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"yashshah14093\",\n+      \"name\": \"yashshah14093\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/46053225?v=4\",\n+      \"profile\": \"https://github.com/yashshah14093\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"SomyaGandhi\",\n+      \"name\": \"SomyaGandhi\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/53896115?v=4\",\n+      \"profile\": \"https://github.com/SomyaGandhi\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"ShreyaDhir\",\n+      \"name\": \"Shreya\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/59762762?v=4\",\n+      \"profile\": \"https://github.com/ShreyaDhir\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"D3xter1922\",\n+      \"name\": \"D3xter1922\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/59790120?v=4\",\n+      \"profile\": \"https://github.com/D3xter1922\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"sanyajain26\",\n+      \"name\": \"sanyajain26\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/61155626?v=4\",\n+      \"profile\": \"https://github.com/sanyajain26\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"preyam2002\",\n+      \"name\": \"preyam2002\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/54669775?v=4\",\n+      \"profile\": \"https://github.com/preyam2002\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"j-tesla\",\n+      \"name\": \"Jayanth PSY\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/58279279?v=4\",\n+      \"profile\": \"https://jayanth-psy.netlify.app/\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"dollyjain51099\",\n+      \"name\": \"Dolly Jain\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/54888610?v=4\",\n+      \"profile\": \"https://github.com/dollyjain51099\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Vrindagupta6828\",\n+      \"name\": \"Vrinda Gupta\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/50476758?v=4\",\n+      \"profile\": \"https://github.com/Vrindagupta6828\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"Harikrishnan6336\",\n+      \"name\": \"Hari Krishnan U\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/53964426?v=4\",\n+      \"profile\": \"https://github.com/Harikrishnan6336\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"subhangi2731\",\n+      \"name\": \"Subhangi Choudhary\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/53938490?v=4\",\n+      \"profile\": \"https://github.com/subhangi2731\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"sai-vamshi-18\",\n+      \"name\": \"sai-vamshi-18\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/59999113?v=4\",\n+      \"profile\": \"https://github.com/sai-vamshi-18\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"gitter-badger\",\n+      \"name\": \"The Gitter Badger\",\n+      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/8518239?v=4\",\n+      \"profile\": \"https://gitter.im\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"driti924\",\n+      \"name\": \"driti924\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/55576453?v=4\",\n+      \"profile\": \"https://github.com/driti924\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"dolamanee6122\",\n+      \"name\": \"dolamanee6122\",\n+      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/50874003?v=4\",\n+      \"profile\": \"https://github.com/dolamanee6122\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"baidi-mannan\",\n+      \"name\": \"Mannan Baidi\",\n+      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/68608356?v=4\",\n+      \"profile\": \"https://github.com/baidi-mannan\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"aaditya-ag\",\n+      \"name\": \"aaditya-ag\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/69107814?v=4\",\n+      \"profile\": \"https://github.com/aaditya-ag\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    },\n+    {\n+      \"login\": \"ShreyasMore\",\n+      \"name\": \"Shreyas More\",\n+      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/25687870?v=4\",\n+      \"profile\": \"https://github.com/ShreyasMore\",\n+      \"contributions\": [\n+        \"code\"\n+      ]\n+    }\n+  ],\n+  \"contributorsPerLine\": 7,\n+  \"projectName\": \"ds-algo-solutions\",\n+  \"projectOwner\": \"codewithvk\",\n+  \"repoType\": \"github\",\n+  \"repoHost\": \"https://github.com\",\n+  \"skipCi\": true\n+}"
  },
  {
    "sha": "e81ae533a44321b63ed5f9d508091b68aabdce80",
    "filename": ".github/issue_template.md",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/.github/issue_template.md",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/.github/issue_template.md",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/.github/issue_template.md?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,9 @@\n+Problem Link- (your problem link of Hackerrank)  \n+Category- (category ex: Algorithms/Implementation)\n+\n+Difficulty Level- (Easy/ Medium/ Hard)\n+\n+In Language:\n+- [ ] C++\n+- [ ] JAVA\n+- [ ] Python"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "Algorithms/.keep",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/a32b013cfa0011faeca5c30c5eb14ac02c4146a9/Algorithms/.keep",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/a32b013cfa0011faeca5c30c5eb14ac02c4146a9/Algorithms/.keep",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/.keep?ref=a32b013cfa0011faeca5c30c5eb14ac02c4146a9"
  },
  {
    "sha": "fcfa92772ac05e02c56b9e531ec0c95337603e4c",
    "filename": "Algorithms/Bit Manipulation/AND Product/solution.cpp",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/AND%20Product/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/AND%20Product/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/AND%20Product/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,76 @@\n+#include <bits/stdc++.h>\n+\n+using namespace std;\n+\n+vector<string> split_string(string);\n+\n+// Implementation Part\n+long andProduct(long a, long b) {\n+\n+    // initial value of result = a    \n+    long result = a;\n+    // now doing AND operation repeatedly in between,\n+    // result and i, where i  = (a+1), (a+2).....b\n+    for(long i = a + 1; i <= b; i++){\n+        result = result & i;\n+    }\n+    return result;\n+}\n+\n+int main()\n+{\n+    ofstream fout(getenv(\"OUTPUT_PATH\"));\n+\n+    int n;\n+    cin >> n;\n+    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\n+\n+    for (int n_itr = 0; n_itr < n; n_itr++) {\n+        string ab_temp;\n+        getline(cin, ab_temp);\n+\n+        vector<string> ab = split_string(ab_temp);\n+\n+        long a = stol(ab[0]);\n+\n+        long b = stol(ab[1]);\n+\n+        long result = andProduct(a, b);\n+\n+        fout << result << \"\\n\";\n+    }\n+\n+    fout.close();\n+\n+    return 0;\n+}\n+\n+vector<string> split_string(string input_string) {\n+    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {\n+        return x == y and x == ' ';\n+    });\n+\n+    input_string.erase(new_end, input_string.end());\n+\n+    while (input_string[input_string.length() - 1] == ' ') {\n+        input_string.pop_back();\n+    }\n+\n+    vector<string> splits;\n+    char delimiter = ' ';\n+\n+    size_t i = 0;\n+    size_t pos = input_string.find(delimiter);\n+\n+    while (pos != string::npos) {\n+        splits.push_back(input_string.substr(i, pos - i));\n+\n+        i = pos + 1;\n+        pos = input_string.find(delimiter, i);\n+    }\n+\n+    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));\n+\n+    return splits;\n+}\n+"
  },
  {
    "sha": "a1eef35f86fc5c2305394933469078157d9f5ff0",
    "filename": "Algorithms/Bit Manipulation/AND Product/solution.py",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/AND%20Product/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/AND%20Product/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/AND%20Product/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,20 @@\n+#!/bin/python3\n+\n+import math\n+import os\n+import random\n+import re\n+import sys\n+\n+T = int(input())\n+\n+for _ in range(T) :\n+    A,B = (int(_) for _ in input().split())\n+    i,C = -1,A^B #C is the bits where A and B differ\n+    while C > 0 :\n+        C >>= 1     # mask out all lower bits than the max bit of C\n+                    \n+        i += 1 #increase the value of i (2's power)\n+     # remove those bits\n+    print(A & (2**32-2**i))\n+    \n\\ No newline at end of file"
  },
  {
    "sha": "8d810cfdc190a79061d00cf664e1842b1e39db90",
    "filename": "Algorithms/Bit Manipulation/And Product/solution.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/And%20Product/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/And%20Product/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/And%20Product/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,47 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class solution {\n+\n+    // Complete the andProduct function below.\n+    static long andProduct(long a, long b) {\n+        // initialise result with a\n+        long res = a;\n+        for (long i = a + 1; i < b; i++)\n+            // use bitwise & operator for values ranging from a to b\n+            res = res & i;\n+\n+        return res;\n+    }\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+\n+        int n = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+        for (int nItr = 0; nItr < n; nItr++) {\n+            String[] ab = scanner.nextLine().split(\" \");\n+\n+            long a = Long.parseLong(ab[0]);\n+\n+            long b = Long.parseLong(ab[1]);\n+\n+            long result = andProduct(a, b);\n+\n+            bufferedWriter.write(String.valueOf(result));\n+            bufferedWriter.newLine();\n+        }\n+\n+        bufferedWriter.close();\n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "766d3a14e49a037399e9676a62881c7edff2b4f0",
    "filename": "Algorithms/Bit Manipulation/Flipping Bits/solution.cpp",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Flipping Bits/solution.cpp"
  },
  {
    "sha": "ecf7111cdbd5d7f24f68ab4fc19d29efcaefdf54",
    "filename": "Algorithms/Bit Manipulation/Flipping Bits/solution.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Flipping Bits/solution.java"
  },
  {
    "sha": "f46cb5f4e609cbf3c2d70a65df01105d89a50296",
    "filename": "Algorithms/Bit Manipulation/Flipping Bits/solution.py",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Flipping%20Bits/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Flipping Bits/solution.py"
  },
  {
    "sha": "43441f4fb0ae10c69ab74fe20dbc2ec57387864e",
    "filename": "Algorithms/Bit Manipulation/Lonely Integer/solution.cpp",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Lonely Integer/solution.cpp"
  },
  {
    "sha": "484285b362125535847ffb084610f506d5c43d56",
    "filename": "Algorithms/Bit Manipulation/Lonely Integer/solution.java",
    "status": "renamed",
    "additions": 45,
    "deletions": 45,
    "changes": 90,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -1,45 +1,45 @@\n-import java.io.*;\r\n-import java.math.*;\r\n-import java.security.*;\r\n-import java.text.*;\r\n-import java.util.*;\r\n-import java.util.concurrent.*;\r\n-import java.util.regex.*;\r\n-\r\n-public class Solution {\r\n-\r\n-    // The method would return the unique value in the array\r\n-    // O(n) runtime. O(1) space. Uses XOR. Keep in mind:\r\n-    //   1) x ^ x = 0\r\n-    //   2) x ^ 0 = x\r\n-    //   3) XOR is commutative and associative\r\n-    static int lonelyinteger(int[] a) {\r\n-        // We would XOR all the numbers in the array\r\n-        // Only the unique number would be left\r\n-        int val = 0;\r\n-        for (int num : a) {\r\n-            val = val ^ num; // ^ is XOR operator\r\n-        }\r\n-        return val;\r\n-    }\r\n-    \r\n-    /* Driver Code */\r\n-    private static final Scanner scanner = new Scanner(System.in);\r\n-    public static void main(String[] args) throws IOException {\r\n-        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\r\n-        int n = scanner.nextInt();\r\n-        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\r\n-        int[] a = new int[n];\r\n-        String[] aItems = scanner.nextLine().split(\" \");\r\n-        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\r\n-        for (int i = 0; i < n; i++) {\r\n-            int aItem = Integer.parseInt(aItems[i]);\r\n-            a[i] = aItem;\r\n-        }\r\n-        int result = lonelyinteger(a);\r\n-        bufferedWriter.write(String.valueOf(result));\r\n-        bufferedWriter.newLine();\r\n-        bufferedWriter.close();\r\n-        scanner.close();\r\n-    }\r\n-}\r\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+    // The method would return the unique value in the array\n+    // O(n) runtime. O(1) space. Uses XOR. Keep in mind:\n+    //   1) x ^ x = 0\n+    //   2) x ^ 0 = x\n+    //   3) XOR is commutative and associative\n+    static int lonelyinteger(int[] a) {\n+        // We would XOR all the numbers in the array\n+        // Only the unique number would be left\n+        int val = 0;\n+        for (int num : a) {\n+            val = val ^ num; // ^ is XOR operator\n+        }\n+        return val;\n+    }\n+    \n+    /* Driver Code */\n+    private static final Scanner scanner = new Scanner(System.in);\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+        int n = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+        int[] a = new int[n];\n+        String[] aItems = scanner.nextLine().split(\" \");\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+        for (int i = 0; i < n; i++) {\n+            int aItem = Integer.parseInt(aItems[i]);\n+            a[i] = aItem;\n+        }\n+        int result = lonelyinteger(a);\n+        bufferedWriter.write(String.valueOf(result));\n+        bufferedWriter.newLine();\n+        bufferedWriter.close();\n+        scanner.close();\n+    }\n+}",
    "previous_filename": "Algorithms/Lonely Integer/solution.java"
  },
  {
    "sha": "a1f281d4e5c8a78c180a0b8bf407e70701ab5382",
    "filename": "Algorithms/Bit Manipulation/Lonely Integer/solution.py",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Lonely%20Integer/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Lonely Integer/solution.py"
  },
  {
    "sha": "974c0c84280711ff1cd37398a650ae82a68df85a",
    "filename": "Algorithms/Bit Manipulation/Maximizing XOR/solution.cpp",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Maximizing XOR/solution.cpp"
  },
  {
    "sha": "158fa7495da463ecc8ce75535142010e3552a9f6",
    "filename": "Algorithms/Bit Manipulation/Maximizing XOR/solution.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Maximizing XOR/solution.java"
  },
  {
    "sha": "f45c929f4ef16ba2859d569d9f5fbd1c90f65410",
    "filename": "Algorithms/Bit Manipulation/Maximizing XOR/solution.py",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Maximizing%20XOR/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Maximizing XOR/solution.py"
  },
  {
    "sha": "be7ea312b9dcc7f1b971c2d7b60fe07061347587",
    "filename": "Algorithms/Bit Manipulation/Sansa and XOR/solution.py",
    "status": "modified",
    "additions": 21,
    "deletions": 12,
    "changes": 33,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sansa%20and%20XOR/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sansa%20and%20XOR/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Sansa%20and%20XOR/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -1,12 +1,21 @@\n-#return an integer that represents the results of the calculations\n-# take the input of number of test case and run a for loop with the input as an argument\n-for _ in range(int(input())):\n-    # no. of elements in the array\n-    N = int(input()) \n-    # the elements of the array seperated by 'N' space\n-    A = tuple(map(int,input().split()))\n-    X = 0\n-    for i, x in enumerate(A):\n-        if ((i+1) * (N-i)) % 2 == 1:\n-            X ^= x\n-    print(X)\n+# Logic :\n+# if number of elements in the array is even, then the result will be zero\n+# if number of elements is odd, then simply XOR-ing the elements at odd places\n+# will give the desired result\n+\n+def sansaXor(arr):\n+  if len(arr) % 2 == 0:     # even number of elements\n+    return 0\n+  else:\n+    ans = 0\n+    for i in range(0, len(arr), 2):     # odd places only\n+      ans = ans ^ arr[i]\n+    return ans\n+\n+if __name__ == '__main__':\n+  t = int(input())      # test cases\n+  for tt in range(t):\n+    n = int(input())        # number of elements\n+    arr = list(map(int, input().rstrip().split()))      # elements list\n+    res = sansaXor(arr)\n+    print(res)\n\\ No newline at end of file"
  },
  {
    "sha": "f3c1b56512d10929f24368202007d390d273c0ee",
    "filename": "Algorithms/Bit Manipulation/Sum vs XOR/solution.cpp",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Sum vs XOR/solution.cpp"
  },
  {
    "sha": "ca8f7803ba36f67173d54aa8576131da30bd9055",
    "filename": "Algorithms/Bit Manipulation/Sum vs XOR/solution.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Sum vs XOR/solution.java"
  },
  {
    "sha": "aa2a8896f91eb74672f8fe7199005130e3405386",
    "filename": "Algorithms/Bit Manipulation/Sum vs XOR/solution.py",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Sum%20vs%20XOR/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Sum vs XOR/solution.py"
  },
  {
    "sha": "bbb9d9016032f258bc48989888fa60a45bc0261f",
    "filename": "Algorithms/Bit Manipulation/Xor-sequence/solution.cpp",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Xor-sequence/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Xor-sequence/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Xor-sequence/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Bit Manipulation/Xor sequence/solution.cpp"
  },
  {
    "sha": "3508a2a684f3368c86fd4db408f71d49ee61cf11",
    "filename": "Algorithms/Bit Manipulation/Xor-sequence/solution.java",
    "status": "renamed",
    "additions": 57,
    "deletions": 57,
    "changes": 114,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Xor-sequence/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Xor-sequence/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Xor-sequence/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -1,57 +1,57 @@\n-import java.io.*;\r\n-import java.math.*;\r\n-import java.security.*;\r\n-import java.text.*;\r\n-import java.util.*;\r\n-import java.util.concurrent.*;\r\n-import java.util.regex.*;\r\n-\r\n-public class Solution {\r\n-\r\n-    // Method to compute the value of XOR sequence\r\n-    static long xorSequence(long l, long r) {\r\n-        //The answer is the xor of value obtained by calc function of left and right range\r\n-        long answer = calc(r) ^ calc(l - 1);\r\n-        return answer;\r\n-    }\r\n-    //Perform xor of 7 with the limit passed and return on the basis of the conditions\r\n-    private static long calc(long limit) {\r\n-        switch ((int) (limit & 7)) {\r\n-            case 0:\r\n-                return limit;\r\n-            case 1:\r\n-                return limit;\r\n-            case 2:\r\n-                return 2;\r\n-            case 3:\r\n-                return 2;\r\n-            case 4:\r\n-                return limit + 2;\r\n-            case 5:\r\n-                return limit + 2;\r\n-            case 6:\r\n-                return 0;\r\n-            case 7:\r\n-                return 0;\r\n-            default:\r\n-                throw new RuntimeException();\r\n-        }\r\n-    }\r\n-    /* Driver Code */\r\n-    private static final Scanner scanner = new Scanner(System.in);\r\n-    public static void main(String[] args) throws IOException {\r\n-        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\r\n-        int q = scanner.nextInt();\r\n-        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\r\n-        for (int qItr = 0; qItr < q; qItr++) {\r\n-            String[] lr = scanner.nextLine().split(\" \");\r\n-            long l = Long.parseLong(lr[0]);\r\n-            long r = Long.parseLong(lr[1]);\r\n-            long result = xorSequence(l, r);\r\n-            bufferedWriter.write(String.valueOf(result));\r\n-            bufferedWriter.newLine();\r\n-        }\r\n-        bufferedWriter.close();\r\n-        scanner.close();\r\n-    }\r\n-}\r\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class Solution {\n+\n+    // Method to compute the value of XOR sequence\n+    static long xorSequence(long l, long r) {\n+        //The answer is the xor of value obtained by calc function of left and right range\n+        long answer = calc(r) ^ calc(l - 1);\n+        return answer;\n+    }\n+    //Perform xor of 7 with the limit passed and return on the basis of the conditions\n+    private static long calc(long limit) {\n+        switch ((int) (limit & 7)) {\n+            case 0:\n+                return limit;\n+            case 1:\n+                return limit;\n+            case 2:\n+                return 2;\n+            case 3:\n+                return 2;\n+            case 4:\n+                return limit + 2;\n+            case 5:\n+                return limit + 2;\n+            case 6:\n+                return 0;\n+            case 7:\n+                return 0;\n+            default:\n+                throw new RuntimeException();\n+        }\n+    }\n+    /* Driver Code */\n+    private static final Scanner scanner = new Scanner(System.in);\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+        int q = scanner.nextInt();\n+        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+        for (int qItr = 0; qItr < q; qItr++) {\n+            String[] lr = scanner.nextLine().split(\" \");\n+            long l = Long.parseLong(lr[0]);\n+            long r = Long.parseLong(lr[1]);\n+            long result = xorSequence(l, r);\n+            bufferedWriter.write(String.valueOf(result));\n+            bufferedWriter.newLine();\n+        }\n+        bufferedWriter.close();\n+        scanner.close();\n+    }\n+}",
    "previous_filename": "Algorithms/Bit Manipulation/Xor sequence/solution.java"
  },
  {
    "sha": "5d58121e1129705db394abac2ccea1f6bb993e4e",
    "filename": "Algorithms/Bit Manipulation/Xor-sequence/solution.py",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Xor-sequence/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Bit%20Manipulation/Xor-sequence/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Bit%20Manipulation/Xor-sequence/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "previous_filename": "Algorithms/Bit Manipulation/Xor sequence/solution.py"
  },
  {
    "sha": "7fc311d5ccc5637d80ec3f23ed7012def439d6fd",
    "filename": "Algorithms/Dynamic Programming/Dorsey Thief/solution.py",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Dorsey%20Thief/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Dorsey%20Thief/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Dorsey%20Thief/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,17 @@\n+# input number of passengers and the stolen amount of gold\n+n,x = [int(x) for x in input().split()]\n+l=[]\n+for _ in range(n):\n+    v,a=[int(x) for x in input().split()]\n+    l.append([v/a,v,a])\n+l.sort(reverse=True)\n+p=0\n+for i in l:\n+    if(i[2]<=x):\n+        p+=i[1]\n+        x-=i[2]\n+# print the maximum profit, otherwise print Got caught!\n+if(x==0):\n+    print(p)\n+else:\n+    print(\"Got caught!\")\n\\ No newline at end of file"
  },
  {
    "sha": "26ac9cba91de814b432dbb7c7322605308f21d09",
    "filename": "Algorithms/Dynamic Programming/Fibonacci Modified/solution.cpp",
    "status": "added",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,156 @@\n+/*\n+Disclaimer: This problem cannot be solved within the time limit provided in hackerrank. But, this\n+is a greate exercise to improve various topics.\n+\n+Solution: In this problem, we first create two functions :\n+(We use arrays to deal with the large numbers (limit greater than long long))\n+1. add\t\n+2. multiply \n+\n+As there is no option to use bigInt in cpp, we have to use the arrays and solve the question, due to\n+the constraints given in hackerrank.(long long will also not work in this problem.)\n+\n+Now, as far as the main question is concerned we use dynamic programming to solve this.\n+We maintain an array (dp array) to store the values of the elements of the modified fibonacci series,\n+from 1 to n.\n+\n+\n+*/\n+\n+\n+#include <bits/stdc++.h>\n+\n+using namespace std;\n+\n+string add(string num1, string num2){\n+    string ans = \"\";\n+    \n+    int len1 = num1.length();\n+    int len2 = num2.length();\n+\n+    if(len1>len2){\n+        for(int i=0;i<len1-len2;i++){\n+            num2.insert(0,\"0\");\n+        }\n+    }\n+\n+    else if(len2>len1){\n+        for(int i=0;i<len2-len1;i++){\n+            num1.insert(0,\"0\");\n+        }\n+    }\n+\n+    int cl = num1.length();\n+\n+    vector<int> result(cl+1,0);\n+\n+    int i_n1=0;\n+    int carry = 0;\n+\n+    for(int i=cl-1;i>=0;i--){\n+\n+        int sum = num1[i]-'0' + num2[i]-'0' + carry;\n+\n+        carry = sum/10;\n+        result[i_n1] = sum%10;\n+        i_n1++;\n+    }\n+\n+    if(carry){\n+        result[i_n1] = carry;\n+    }\n+\n+\n+    int i = result.size() - 1;\n+\n+    while(i>=0 && result[i] == 0)\n+        i--;\n+\n+    if(i==-1)\n+        return \"0\";\n+\n+    while(i>=0){\n+        ans += to_string(result[i]);\n+        i--;\n+    }\n+\n+    return ans;\n+\n+}\n+\n+\n+string multiply(string num1, string num2){\n+    string ans = \"\";\n+\n+    int len1 = num1.length();\n+    int len2 = num2.length();\n+    vector<int> result(len1+len2,0);\n+\n+    int i_n1 = 0;\n+    int i_n2 = 0;\n+    int carry;\n+\n+    for(int i=len1-1;i>=0;i--){\n+\n+        int n1 = num1[i]-'0';        // assigning the value of n1.\n+\n+        i_n2 = 0;        // reinitializing the pointer for n2.\n+\n+        carry = 0;         // reinitializing the carry to 0 as we are moving to the next digit of num1.\n+\n+        for(int j=len2-1;j>=0;j--){\n+\n+            int n2 = num2[j] - '0';\n+\n+            int sum = n1*n2 + result[i_n1+i_n2] + carry;\n+\n+            carry = sum/10;\n+            result[i_n1+i_n2] = sum%10;\n+\n+            i_n2++;\n+        }\n+\n+        if(carry)\n+            result[i_n1+i_n2] = carry;\n+\n+        i_n1++;\n+    }\n+\n+    int i = result.size() - 1;\n+    while(i>=0 && result[i] == 0)\n+        i--;\n+\n+    if(i==-1)\n+        return \"0\";\n+\n+    while(i>=0){\n+        ans += to_string(result[i]);\n+        i--;\n+    }\n+\n+    return ans;\n+}\n+\n+// ********************************************************************************************************************************\n+// Complete the fibonacciModified function below.\n+void fibonacciModified(int t1, int t2, int n) {\n+    \n+    vector<string> dp(n+1,\"0\");\n+    dp[1] = to_string(t1);\n+    dp[2] = to_string(t2);\n+    \n+    for(int i=3;i<dp.size();i++){\n+        string mul = multiply(dp[i-1],dp[i-1]);\n+        dp[i] = add(mul,dp[i-2]);\n+    }\n+    \n+    cout<<dp[n]<<\"\\n\";\n+}\n+\n+int main()\n+{\n+    int t1,t2,n;\n+    cin>>t1>>t2>>n;\n+    \n+    fibonacciModified(t1,t2,n);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "445ee5271a1904b9922c16551eaf75ae95aa8b89",
    "filename": "Algorithms/Dynamic Programming/Fibonacci Modified/solution.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,54 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class solution {\n+\n+    // Complete the fibonacciModified function below.\n+    static BigInteger fibonacciModified(int t1, int t2, int n) {\n+\n+        // since we are dealing with squares integer overflow may occur\n+\n+        // that is why we use BigInteger here\n+        BigInteger a = new BigInteger(Integer.toString(t1));\n+        BigInteger b = new BigInteger(Integer.toString(t2));\n+\n+        // if n==1 or n==0 the answer will be zero\n+        BigInteger c = new BigInteger(\"0\");\n+        for (int i = 2; i < n; i++) {\n+            c = a.add(b.multiply(b));\n+            a = b;\n+            b = c;\n+\n+        }\n+        return c;\n+\n+    }\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+\n+        String[] t1T2n = scanner.nextLine().split(\" \");\n+\n+        int t1 = Integer.parseInt(t1T2n[0]);\n+\n+        int t2 = Integer.parseInt(t1T2n[1]);\n+\n+        int n = Integer.parseInt(t1T2n[2]);\n+\n+        BigInteger result = fibonacciModified(t1, t2, n);\n+\n+        bufferedWriter.write(String.valueOf(result));\n+        bufferedWriter.newLine();\n+\n+        bufferedWriter.close();\n+\n+        scanner.close();\n+    }\n+}"
  },
  {
    "sha": "06cce59dde35d5db1fe36b75cd7f7fbf0206ca28",
    "filename": "Algorithms/Dynamic Programming/Fibonacci Modified/solution.py",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Fibonacci%20Modified/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,36 @@\n+#!/bin/python\n+\n+import math\n+import os\n+import random\n+import re\n+import sys\n+\n+# Complete the fibonacciModified function below.\n+\n+ # function taking arguments for series and returning value of nth element in the series\n+    \n+def fibonacciModified(t1, t2, n): \n+    i = 2\n+    while i < n:\n+        t1, t2= t2 , t1 + t2*t2 # modifying values simyltaneously t1=t2 and t2 = t1+t2^2 \n+        i += 1\n+    return t2    # returning n th element\n+if __name__ == '__main__':\n+    fptr = open(os.environ['OUTPUT_PATH'], 'w')  \n+\n+    # Taking inputs\n+    \n+    t1T2n = raw_input().split()   \n+\n+    t1 = int(t1T2n[0])\n+\n+    t2 = int(t1T2n[1])\n+\n+    n = int(t1T2n[2])\n+\n+    result = fibonacciModified(t1, t2, n) # calling function\n+\n+    fptr.write(str(result) + '\\n')\n+\n+    fptr.close()"
  },
  {
    "sha": "ade0c7ebfab8f595f5d663732a6797780fb5a0dd",
    "filename": "Algorithms/Dynamic Programming/Knapsack/solution.cpp",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Knapsack/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Knapsack/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Knapsack/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+Solution: In this problem, we create a 2D array (dp array) which stores the maximum possible value \n+corrosponding to different values of k(ranging from 0 to k).\n+\n+Now, we simulate through the 2D array and for any index i,j:\n+    We check if we can include the arr[i-1] or not.\n+    We check this by the following condition,\n+\n+        dp[i][j] = max( dp[i-1][j], arr[i-1] + dp[i][j-arr[i-1]] );\n+\n+To understand the above condition in depth, refer to :\n+https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/\n+\n+*/\n+\n+\n+#include <bits/stdc++.h>\n+\n+using namespace std;\n+\n+vector<string> split_string(string);\n+\n+// Complete the unboundedKnapsack function below.\n+int unboundedKnapsack(int k, vector<int> arr) {\n+    int n = arr.size();\n+    vector< vector<int> > dp(n+1,vector<int>(k+1,0));\n+    \n+    for(int i=1;i<n+1;i++){\n+        for(int j=1;j<k+1;j++){\n+            if(arr[i-1]<=j){\n+                dp[i][j] = max( dp[i-1][j], arr[i-1] + dp[i][j-arr[i-1]] );\n+            }\n+            \n+            else{\n+                dp[i][j] = dp[i-1][j];\n+            }\n+        }    \n+    }\n+    \n+    return dp[n][k];\n+}\n+\n+int main()\n+{\n+    int t;\n+    cin>>t;\n+    \n+    while(t--){\n+        int n,k;cin>>n>>k;\n+        vector<int> v(n);\n+        for(int i=0;i<n;i++){\n+            cin>>v[i];\n+        }\n+        \n+        cout<<unboundedKnapsack(k,v)<<\"\\n\";\n+    }\n+}"
  },
  {
    "sha": "2f765a30977970d227b4f0f15fcff1ad779883c5",
    "filename": "Algorithms/Dynamic Programming/Knapsack/solution.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Knapsack/solution.java",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Knapsack/solution.java",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Knapsack/solution.java?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,83 @@\n+import java.io.*;\n+import java.math.*;\n+import java.security.*;\n+import java.text.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.regex.*;\n+\n+public class solution {\n+\n+    // Complete the unboundedKnapsack function below.\n+    private static int[][] ans;\n+\n+    public static int solve(int k, int[] arr, int n) {\n+\n+        if (k == 0 || n == 0)\n+            return 0;\n+\n+        // if we have previously stored answer for the problem, return that\n+        if (ans[n][k] != -1)\n+            return ans[n][k];\n+\n+        // if greater than the target sum reduce the problem size\n+        if (arr[n - 1] > k)\n+            return solve(k, arr, n - 1);\n+\n+        // store the maximum out of the current and previous\n+        return ans[n][k] = Math.max(arr[n - 1] + solve(k - arr[n - 1], arr, n), solve(k, arr, n - 1));\n+    }\n+\n+    static int unboundedKnapsack(int k, int[] arr) {\n+        int n = arr.length;\n+        ans = new int[n + 1][k + 1];\n+\n+        for (int i = 0; i <= n; i++) {\n+            for (int j = 0; j <= k; j++) {\n+\n+                // initialise matrix with -1\n+                ans[i][j] = -1;\n+            }\n+        }\n+\n+        return solve(k, arr, n);\n+    }\n+\n+    private static final Scanner scanner = new Scanner(System.in);\n+\n+    public static void main(String[] args) throws IOException {\n+        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n+\n+        int t = scanner.nextInt();\n+\n+        for (int y = 0; y < t; y++) {\n+\n+            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+            String[] nk = scanner.nextLine().split(\" \");\n+\n+            int n = Integer.parseInt(nk[0]);\n+\n+            int k = Integer.parseInt(nk[1]);\n+\n+            int[] arr = new int[n];\n+\n+            String[] arrItems = scanner.nextLine().split(\" \");\n+            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n+\n+            for (int i = 0; i < n; i++) {\n+                int arrItem = Integer.parseInt(arrItems[i]);\n+                arr[i] = arrItem;\n+            }\n+\n+            int result = unboundedKnapsack(k, arr);\n+\n+            bufferedWriter.write(String.valueOf(result));\n+            bufferedWriter.newLine();\n+        }\n+\n+        bufferedWriter.close();\n+\n+        scanner.close();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ca5e87d11bfea67cdefdd11fb745ed14b366fc50",
    "filename": "Algorithms/Dynamic Programming/Knapsack/solution.py",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Knapsack/solution.py",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Knapsack/solution.py",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Knapsack/solution.py?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,27 @@\n+#!/bin/python\n+\n+import math\n+import os\n+import random\n+import re\n+import sys\n+\n+# Complete the unboundedKnapsack function below.\n+\n+T = int(raw_input())   # Input Variable for number of entries\n+\n+def multisum(k, C):   \n+    D = [False for _ in range(k+1)]   # Create a list of length k+1 which contain False\n+    D[0] = True                       \n+    for i in range(1,k+1):\n+        D[i] = any([D[i-c] for c in C if i - c >= 0]) \n+    for i in reversed(range(k+1)):\n+        if D[i]:                   # if content is true then return i\n+            return i\n+    return None\n+\n+# Loop for taking all the inputs\n+for i in range(T):  \n+    n, k = map(int, raw_input().strip().split(' '))\n+    C = map(int, raw_input().strip().split(' '))\n+    print multisum(k,C)"
  },
  {
    "sha": "ee38c697f4bb83138250489cd1b242c340c70811",
    "filename": "Algorithms/Dynamic Programming/Red John is Back/solution.cpp",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/blob/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Red%20John%20is%20Back/solution.cpp",
    "raw_url": "https://github.com/Siddhant-K-code/ds-algo-solutions/raw/9209412314e9807202afda8a74e34c0f2ef75396/Algorithms/Dynamic%20Programming/Red%20John%20is%20Back/solution.cpp",
    "contents_url": "https://api.github.com/repos/Siddhant-K-code/ds-algo-solutions/contents/Algorithms/Dynamic%20Programming/Red%20John%20is%20Back/solution.cpp?ref=9209412314e9807202afda8a74e34c0f2ef75396",
    "patch": "@@ -0,0 +1,70 @@\n+#include <bits/stdc++.h>\n+\n+using namespace std;\n+\n+// Recuresive call for counting number of arrangements\n+int numberOfWays(int n){\n+    \n+    // as there is only 1 possiblity of arrangements of bricks\n+    if(n == 1 || n == 2 || n == 3)\n+    return 1;\n+    // two possiblities row wise and column wise \n+    else if(n == 4)\n+    return 2;\n+    // for other cases\n+    else\n+    return numberOfWays(n - 1) + numberOfWays(n - 4);\n+}\n+\n+// check number is prime or not\n+bool checkPrime(int n){\n+    \n+    for(int i = 2; i * i <= n; i++){\n+        if(n % i == 0)\n+        return false;\n+    }\n+    return true;\n+}\n+\n+// counting number of prime numbers upto number of possible arrangements \n+int countPrime(int n){\n+\n+    int count = 0;\n+    for(int i = 2; i <= n; i++){\n+       if(checkPrime(i)){\n+           count++;\n+       }\n+    }    \n+    return count;\n+}\n+\n+// Implementation Part\n+int redJohn(int n) {\n+\n+    int count = numberOfWays(n);\n+    return countPrime(count);\n+}\n+\n+int main()\n+{\n+    ofstream fout(getenv(\"OUTPUT_PATH\"));\n+\n+    int t;\n+    cin >> t;\n+    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\n+\n+    for (int t_itr = 0; t_itr < t; t_itr++) {\n+        int n;\n+        cin >> n;\n+        cin.ignore(numeric_limits<streamsize>::max(), '\\n');\n+\n+        int result = redJohn(n);\n+\n+        fout << result << \"\\n\";\n+    }\n+\n+    fout.close();\n+\n+    return 0;\n+}\n+"
  }
]
