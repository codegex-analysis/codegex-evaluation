[
  {
    "sha": "87b8fdebad702b3e045c8e2fb95476c487c54543",
    "filename": "core/src/test/java/io/undertow/server/ReadTimeoutTestCase.java",
    "status": "modified",
    "additions": 21,
    "deletions": 28,
    "changes": 49,
    "blob_url": "https://github.com/undertow-io/undertow/blob/5d0543c1e1e90aae730888eeda8d0ef0a9815a9a/core/src/test/java/io/undertow/server/ReadTimeoutTestCase.java",
    "raw_url": "https://github.com/undertow-io/undertow/raw/5d0543c1e1e90aae730888eeda8d0ef0a9815a9a/core/src/test/java/io/undertow/server/ReadTimeoutTestCase.java",
    "contents_url": "https://api.github.com/repos/undertow-io/undertow/contents/core/src/test/java/io/undertow/server/ReadTimeoutTestCase.java?ref=5d0543c1e1e90aae730888eeda8d0ef0a9815a9a",
    "patch": "@@ -27,18 +27,16 @@\n \n import io.undertow.testutils.DefaultServer;\n import io.undertow.testutils.HttpOneOnly;\n+import io.undertow.testutils.TestHttpClient;\n import io.undertow.util.Headers;\n import io.undertow.util.StringWriteChannelListener;\n-import io.undertow.testutils.TestHttpClient;\n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.entity.AbstractHttpEntity;\n import org.junit.Assert;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.xnio.ChannelExceptionHandler;\n-import org.xnio.ChannelListener;\n import org.xnio.ChannelListeners;\n+import org.xnio.OptionMap;\n import org.xnio.Options;\n import org.xnio.channels.ReadTimeoutException;\n import org.xnio.channels.StreamSinkChannel;\n@@ -49,59 +47,54 @@\n  * Tests read timeout with a slow request\n  *\n  * @author Stuart Douglas\n+ * @author Flavia Rainone\n  */\n @RunWith(DefaultServer.class)\n @HttpOneOnly\n-@Ignore\n public class ReadTimeoutTestCase {\n \n     private volatile Exception exception;\n-    private static final CountDownLatch errorLatch = new CountDownLatch(1);\n+\n+    @DefaultServer.BeforeServerStarts\n+    public static void beforeClass() {\n+        DefaultServer.setServerOptions(OptionMap.create(Options.READ_TIMEOUT, 10));\n+    }\n+\n+    @DefaultServer.AfterServerStops\n+    public static void afterClass() {\n+        DefaultServer.setServerOptions(OptionMap.EMPTY);\n+    }\n \n     @Test\n-    public void testReadTimeout() throws IOException, InterruptedException {\n-        DefaultServer.setRootHandler(new HttpHandler() {\n-            @Override\n-            public void handleRequest(final HttpServerExchange exchange) throws Exception {\n+    public void testReadTimeout() throws InterruptedException {\n+        final CountDownLatch errorLatch = new CountDownLatch(1);\n+        DefaultServer.setRootHandler((final HttpServerExchange exchange) -> {\n                 final StreamSinkChannel response = exchange.getResponseChannel();\n                 final StreamSourceChannel request = exchange.getRequestChannel();\n-                try {\n-                    request.setOption(Options.READ_TIMEOUT, 100);\n-                } catch (IOException e) {\n-                    throw new RuntimeException(e);\n-                }\n \n-                request.getReadSetter().set(ChannelListeners.drainListener(Long.MAX_VALUE, new ChannelListener<Channel>() {\n-                            @Override\n-                            public void handleEvent(final Channel channel) {\n+                request.getReadSetter().set(ChannelListeners.drainListener(Long.MAX_VALUE, (final Channel channel) -> {\n                                 new StringWriteChannelListener(\"COMPLETED\") {\n                                     @Override\n                                     protected void writeDone(final StreamSinkChannel channel) {\n                                         exchange.endExchange();\n                                     }\n                                 }.setup(response);\n-                            }\n-                        }, new ChannelExceptionHandler<StreamSourceChannel>() {\n-                            @Override\n-                            public void handleException(final StreamSourceChannel channel, final IOException e) {\n+                        }, (final StreamSourceChannel channel, final IOException e) -> {\n                                 exchange.endExchange();\n                                 exception = e;\n                                 errorLatch.countDown();\n-                            }\n                         }\n                 ));\n                 request.wakeupReads();\n-\n-            }\n-        });\n+            });\n \n         final TestHttpClient client = new TestHttpClient();\n         try {\n             HttpPost post = new HttpPost(DefaultServer.getDefaultServerURL());\n             post.setEntity(new AbstractHttpEntity() {\n \n                 @Override\n-                public InputStream getContent() throws IOException, IllegalStateException {\n+                public InputStream getContent() throws IllegalStateException {\n                     return null;\n                 }\n \n@@ -137,7 +130,7 @@ public long getContentLength() {\n             try {\n                 client.execute(post);\n             } catch (IOException e) {\n-\n+                //ignore\n             }\n             if (errorLatch.await(5, TimeUnit.SECONDS)) {\n                 Assert.assertEquals(ReadTimeoutException.class, exception.getClass());"
  },
  {
    "sha": "ae3da2558161004576da565764fec49632113699",
    "filename": "core/src/test/java/io/undertow/server/WriteTimeoutTestCase.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/undertow-io/undertow/blob/5d0543c1e1e90aae730888eeda8d0ef0a9815a9a/core/src/test/java/io/undertow/server/WriteTimeoutTestCase.java",
    "raw_url": "https://github.com/undertow-io/undertow/raw/5d0543c1e1e90aae730888eeda8d0ef0a9815a9a/core/src/test/java/io/undertow/server/WriteTimeoutTestCase.java",
    "contents_url": "https://api.github.com/repos/undertow-io/undertow/contents/core/src/test/java/io/undertow/server/WriteTimeoutTestCase.java?ref=5d0543c1e1e90aae730888eeda8d0ef0a9815a9a",
    "patch": "@@ -35,23 +35,34 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.xnio.ChannelListener;\n+import org.xnio.OptionMap;\n import org.xnio.Options;\n import org.xnio.channels.StreamSinkChannel;\n import org.xnio.channels.WriteTimeoutException;\n \n /**\n- * Tests read timeout with a client that is slow to read the response\n+ * Tests write timeout with a client that is slow to read the response\n  *\n  * @author Stuart Douglas\n  */\n @RunWith(DefaultServer.class)\n @HttpOneOnly\n-@Ignore(\"This test fails intermittently\")\n+@Ignore // FIXME UNDERTOW-1859 this test freezes\n public class WriteTimeoutTestCase {\n \n     private volatile Exception exception;\n     private static final CountDownLatch errorLatch = new CountDownLatch(1);\n \n+    @DefaultServer.BeforeServerStarts\n+    public static void setup() {\n+        DefaultServer.setServerOptions(OptionMap.builder().set(Options.WRITE_TIMEOUT, 10).getMap());\n+    }\n+\n+    @DefaultServer.AfterServerStops\n+    public static void cleanup() {\n+        DefaultServer.setServerOptions(OptionMap.EMPTY);\n+    }\n+\n     @Test\n     public void testWriteTimeout() throws IOException, InterruptedException {\n         DefaultServer.setRootHandler(new HttpHandler() {"
  }
]
