[
  {
    "sha": "936c30e05a28b5cb7e9b339a80edc9888f7d78fb",
    "filename": "changelog.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/63da6f49d54144970296583a59ab3f38f7e242ae/changelog.txt",
    "raw_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/raw/63da6f49d54144970296583a59ab3f38f7e242ae/changelog.txt",
    "contents_url": "https://api.github.com/repos/AzureAD/microsoft-authentication-library-common-for-android/contents/changelog.txt?ref=63da6f49d54144970296583a59ab3f38f7e242ae",
    "patch": "@@ -9,6 +9,7 @@ V.Next\n - [MINOR] Device PoP keys are now generated with attestation flags and expose a certificate chain getter (#1247)\n - [PATCH] Fix MSAL-CPP injecting javascript loop (#1238)\n - [MINOR] Adds new API to support ADAL/MSAL migration off of AuthenticationSettings#setSecretKey to a 'managed key' generated by Common (#1244)\n+- [PATCH] Track running interactive tasks in the broker and attempt to terminate them if they do not (#1268)\n \n Version 3.1.2\n ----------"
  },
  {
    "sha": "d475463e9138e650f8b91c59f011601e950e1e30",
    "filename": "common/src/androidTest/java/com/microsoft/identity/common/CommandDispatcherTest.java",
    "status": "modified",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/63da6f49d54144970296583a59ab3f38f7e242ae/common/src/androidTest/java/com/microsoft/identity/common/CommandDispatcherTest.java",
    "raw_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/raw/63da6f49d54144970296583a59ab3f38f7e242ae/common/src/androidTest/java/com/microsoft/identity/common/CommandDispatcherTest.java",
    "contents_url": "https://api.github.com/repos/AzureAD/microsoft-authentication-library-common-for-android/contents/common/src/androidTest/java/com/microsoft/identity/common/CommandDispatcherTest.java?ref=63da6f49d54144970296583a59ab3f38f7e242ae",
    "patch": "@@ -22,14 +22,18 @@\n // THE SOFTWARE.\n package com.microsoft.identity.common;\n \n+import android.content.Context;\n import android.content.Intent;\n \n import androidx.annotation.NonNull;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n \n import com.microsoft.identity.common.internal.cache.ICacheRecord;\n import com.microsoft.identity.common.internal.commands.BaseCommand;\n import com.microsoft.identity.common.internal.commands.CommandCallback;\n+import com.microsoft.identity.common.internal.commands.InteractiveTokenCommand;\n+import com.microsoft.identity.common.internal.commands.parameters.BrokerInteractiveTokenCommandParameters;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n import com.microsoft.identity.common.internal.commands.parameters.DeviceCodeFlowCommandParameters;\n import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n@@ -365,6 +369,48 @@ public void run() {\n         }\n     }\n \n+    @Test\n+    public void testCanRecoverFromHangingTask() throws Exception {\n+        final AtomicInteger integer = new AtomicInteger(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        Context context = InstrumentationRegistry.getInstrumentation().getContext();\n+        CommandCallback callback = new CommandCallback() {\n+\n+            @Override\n+            public void onTaskCompleted(Object o) {\n+\n+            }\n+\n+            @Override\n+            public void onError(Object error) {\n+\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+\n+            }\n+        };\n+\n+        CommandDispatcher.beginInteractive(new InteractiveTokenCommand(BrokerInteractiveTokenCommandParameters.builder().androidApplicationContext(context).build(), (BaseController) null, callback, null) {\n+            @Override\n+            public AcquireTokenResult execute() throws Exception {\n+                Thread.sleep(1000000);\n+                return null;\n+            }\n+        });\n+        CommandDispatcher.beginInteractive(new InteractiveTokenCommand(BrokerInteractiveTokenCommandParameters.builder().androidApplicationContext(context).build(), (BaseController) null, callback, null) {\n+            @Override\n+            public AcquireTokenResult execute() throws Exception {\n+                integer.set(1);\n+                latch.countDown();\n+                return null;\n+            }\n+        });\n+        Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n+        Assert.assertEquals(1, integer.get());\n+    }\n+\n     public void testSubmitSilentWithParamMutationSameCommand(final Consumer<String> c) throws Exception {\n         final CountDownLatch testLatch = new CountDownLatch(1);\n         CountDownLatch submitLatch = new CountDownLatch(1);"
  },
  {
    "sha": "1cefd4447fea130ef5b013c0c3fe96dd6b48a817",
    "filename": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java",
    "status": "modified",
    "additions": 43,
    "deletions": 6,
    "changes": 49,
    "blob_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/63da6f49d54144970296583a59ab3f38f7e242ae/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java",
    "raw_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/raw/63da6f49d54144970296583a59ab3f38f7e242ae/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java",
    "contents_url": "https://api.github.com/repos/AzureAD/microsoft-authentication-library-common-for-android/contents/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java?ref=63da6f49d54144970296583a59ab3f38f7e242ae",
    "patch": "@@ -62,15 +62,19 @@\n import com.microsoft.identity.common.internal.util.StringUtil;\n import com.microsoft.identity.common.internal.util.ThreadUtils;\n \n+import java.lang.ref.WeakReference;\n import java.lang.reflect.Field;\n+import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.AuthorizationIntentAction.CANCEL_INTERACTIVE_REQUEST;\n import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.AuthorizationIntentAction.RETURN_INTERACTIVE_REQUEST_RESULT;\n@@ -84,9 +88,19 @@\n     private static final int SILENT_REQUEST_THREAD_POOL_SIZE = 5;\n     private static final int INTERACTIVE_REQUEST_THREAD_POOL_SIZE = 1;\n     //TODO:1315931 - Refactor the threadpools to not be unbounded for both silent and interactive requests.\n-    private static final ExecutorService sInteractiveExecutor = ThreadUtils.getNamedThreadPoolExecutor(\n-            1, INTERACTIVE_REQUEST_THREAD_POOL_SIZE, -1, 0, TimeUnit.MINUTES, \"interactive\"\n-    );\n+    @GuardedBy(\"sLock\")\n+    private static final ExecutorService sInteractiveExecutor = getInteractiveExecutor();\n+\n+    @GuardedBy(\"sLock\")\n+    private static ExecutorService getInteractiveExecutor() {\n+        return ThreadUtils.getNamedThreadPoolExecutor(\n+                1, INTERACTIVE_REQUEST_THREAD_POOL_SIZE, -1, 0, TimeUnit.MINUTES, \"interactive\"\n+        );\n+    }\n+\n+    @GuardedBy(\"sLock\")\n+    private static WeakReference<Future<?>> sCurrentInteractiveTask = new WeakReference<Future<?>>(null);\n+\n     private static final ExecutorService sSilentExecutor = ThreadUtils.getNamedThreadPoolExecutor(\n             1, SILENT_REQUEST_THREAD_POOL_SIZE, -1, 1, TimeUnit.MINUTES, \"silent\"\n     );\n@@ -175,7 +189,6 @@ public static void submitSilent(@SuppressWarnings(WarningType.rawtype_warning) @\n     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)\n     public static FinalizableResultFuture<CommandResult> submitSilentReturningFuture(@SuppressWarnings(WarningType.rawtype_warning)\n                                                                                          @NonNull final BaseCommand command) {\n-\n         final String methodName = \":submitSilent\";\n \n         final CommandParameters commandParameters = command.getParameters();\n@@ -521,9 +534,32 @@ public static void beginInteractive(final InteractiveTokenCommand command) {\n                 localBroadcastManager.sendBroadcast(\n                         new Intent(CANCEL_INTERACTIVE_REQUEST)\n                 );\n-            }\n \n-            sInteractiveExecutor.execute(new Runnable() {\n+                // It is possible that the current task could be stuck irretrievably.  If that's\n+                // what's happened, do everything in our power to make certain that it is dead.\n+                final Future<?> currentInteractiveTask = sCurrentInteractiveTask.get();\n+                if (currentInteractiveTask != null && !(currentInteractiveTask.isDone() || currentInteractiveTask.isCancelled())) {\n+                    try {\n+                        // We'll give it 1/2 second to respond to the kill message we broadcast.\n+                        currentInteractiveTask.get(500, TimeUnit.MILLISECONDS);\n+                    } catch (final ExecutionException e) {\n+                        // OK, it finished with an exception during that time.  Probably OK.\n+                        Logger.info(TAG + methodName, null, \"Previous task terminated with exception \" + e.getMessage());\n+                    } catch (final TimeoutException e) {\n+                        // Nope, it's still going.  Send it a thread cancellation.\n+                        Logger.warn(TAG + methodName, \"Execution still running, attempting to cancel.\");\n+                        // This does return a value, but it doesn't tell us much that's actionable.\n+                        // It's true if the task was cancelled, but false could mean that it hadn't\n+                        // started yet.\n+                        currentInteractiveTask.cancel(true);\n+                    } catch (final InterruptedException e) {\n+                        // Something interrupted us.  Log and die.\n+                        Logger.error(TAG + methodName, \"Interrupted while running, bailing out\", e);\n+                        Thread.currentThread().interrupt();\n+                    }\n+                }\n+            }\n+            final Future<?> task = sInteractiveExecutor.submit(new Runnable() {\n                 @Override\n                 public void run() {\n                     final CommandParameters commandParameters = command.getParameters();\n@@ -579,6 +615,7 @@ public void onReceive(Context context, Intent intent) {\n                     }\n                 }\n             });\n+            CommandDispatcher.sCurrentInteractiveTask = new WeakReference<Future<?>>(task);\n         }\n     }\n "
  },
  {
    "sha": "b2018f2fc46e62c7b9faf6f0ab467d1b800efcff",
    "filename": "common/src/main/java/com/microsoft/identity/common/internal/logging/Logger.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/63da6f49d54144970296583a59ab3f38f7e242ae/common/src/main/java/com/microsoft/identity/common/internal/logging/Logger.java",
    "raw_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/raw/63da6f49d54144970296583a59ab3f38f7e242ae/common/src/main/java/com/microsoft/identity/common/internal/logging/Logger.java",
    "contents_url": "https://api.github.com/repos/AzureAD/microsoft-authentication-library-common-for-android/contents/common/src/main/java/com/microsoft/identity/common/internal/logging/Logger.java?ref=63da6f49d54144970296583a59ab3f38f7e242ae",
    "patch": "@@ -572,4 +572,4 @@ private void sendLogcatLogs(final String tag, final LogLevel logLevel, final Str\n                 throw new IllegalArgumentException(\"Unknown log level\");\n         }\n     }\n-}\n\\ No newline at end of file\n+}"
  }
]
