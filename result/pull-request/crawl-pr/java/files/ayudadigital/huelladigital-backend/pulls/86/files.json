[
  {
    "sha": "6e92b289dbe482cc5fc2d234a56742227cbd56f3",
    "filename": "backend/src/main/java/com/huellapositiva/application/controller/ProposalApiController.java",
    "status": "modified",
    "additions": 58,
    "deletions": 1,
    "changes": 59,
    "blob_url": "https://github.com/ayudadigital/huelladigital-backend/blob/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/main/java/com/huellapositiva/application/controller/ProposalApiController.java",
    "raw_url": "https://github.com/ayudadigital/huelladigital-backend/raw/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/main/java/com/huellapositiva/application/controller/ProposalApiController.java",
    "contents_url": "https://api.github.com/repos/ayudadigital/huelladigital-backend/contents/backend/src/main/java/com/huellapositiva/application/controller/ProposalApiController.java?ref=efce69cc1f7af50cca44373d3bec756b3ba92489",
    "patch": "@@ -3,9 +3,11 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.huellapositiva.application.dto.*;\n import com.huellapositiva.application.exception.FailedToPersistProposalException;\n+import com.huellapositiva.application.exception.InvalidFieldException;\n import com.huellapositiva.application.exception.ProposalNotPublicException;\n import com.huellapositiva.application.exception.ProposalNotPublishedException;\n import com.huellapositiva.domain.actions.*;\n+import com.huellapositiva.domain.exception.EmptyFileException;\n import com.huellapositiva.domain.exception.InvalidProposalRequestException;\n import com.huellapositiva.domain.exception.InvalidProposalStatusException;\n import com.huellapositiva.domain.model.valueobjects.Roles;\n@@ -35,6 +37,7 @@\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.net.URI;\n+import java.nio.file.AccessDeniedException;\n import java.text.ParseException;\n import java.util.List;\n import java.util.stream.Collectors;\n@@ -73,6 +76,8 @@\n \n     private final PublishProposalAction publishProposalAction;\n \n+    private final UpdateProposalImageAction updateProposalImageAction;\n+\n     private final ObjectMapper objectMapper = new ObjectMapper();\n \n     @Operation(\n@@ -570,7 +575,11 @@ public void closeEnrollment(@PathVariable(\"id\") String proposalId) {\n                     ),\n                     @ApiResponse(\n                             responseCode = \"409\",\n-                            description = \"The proposal status in database is not REVIEW_PENDING or ENROLLMENT_CLOSE.\"\n+                            description = \"Conflict, The proposal status in database is not REVIEW_PENDING or ENROLLMENT_CLOSE.\"\n+                    ),\n+                    @ApiResponse(\n+                            responseCode = \"500\",\n+                            description = \"Internal server error, could not fetch the user data due to a connectivity issue.\"\n                     )\n             }\n     )\n@@ -590,4 +599,52 @@ public void publishProposal(@PathVariable(\"id\") String proposalId,\n \n         publishProposalAction.executeAsContactPerson(proposalId);\n     }\n+\n+    @Operation(\n+            summary = \"Updates the proposal image\",\n+            description = \"The contact person can update the image of the proposal.\",\n+            tags = {\"proposals, contact person\"},\n+            parameters = {\n+                    @Parameter(name = \"X-XSRF-TOKEN\", in = ParameterIn.QUERY, required = true, example = \"ff79038b-3fec-41f0-bab8-6e0d11db986e\", description = \"For taking this value, open your inspector code on your browser, and take the value of the cookie with the name 'XSRF-TOKEN'. Example: a6f5086d-af6b-464f-988b-7a604e46062b\"),\n+                    @Parameter(name = \"XSRF-TOKEN\", in = ParameterIn.COOKIE, required = true, example = \"ff79038b-3fec-41f0-bab8-6e0d11db986e\", description = \"Same value of X-XSRF-TOKEN\")\n+            },\n+            security = {\n+                    @SecurityRequirement(name = \"accessToken\")\n+            }\n+    )\n+    @ApiResponses(\n+            value = {\n+                    @ApiResponse(\n+                            responseCode = \"204\",\n+                            description = \"No Content, proposal status changed to PUBLISHED successfully.\"\n+                    ),\n+                    @ApiResponse(\n+                            responseCode = \"400\",\n+                            description = \"Bad Request, The proposal status or image not valid\"\n+                    ),\n+                    @ApiResponse(\n+                            responseCode = \"403\",\n+                            description = \"Forbidden, The contact person related to this proposal does not match the logged contact person..\"\n+                    ),\n+                    @ApiResponse(\n+                            responseCode = \"500\",\n+                            description = \"Internal server error, could not fetch the user data due to a connectivity issue.\"\n+                    )\n+            }\n+    )\n+    @PutMapping(\"/{proposalId}/image\")\n+    @RolesAllowed(\"CONTACT_PERSON\")\n+    @ResponseStatus(HttpStatus.NO_CONTENT)\n+    public void updateProposalImage(@RequestPart(\"photo\") MultipartFile photo, @PathVariable String proposalId,\n+                                  @Parameter(hidden = true) @AuthenticationPrincipal String accountId) throws IOException {\n+        try {\n+            updateProposalImageAction.execute(photo, accountId, proposalId);\n+        } catch(AccessDeniedException ex){\n+            throw new ResponseStatusException(HttpStatus.FORBIDDEN, ex.getMessage());\n+        } catch(IllegalStateException ex){\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Status of proposal is not suitable for changing image\");\n+        } catch (InvalidFieldException | EmptyFileException ex) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, ex.getMessage());\n+        }\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2f7c37d4a8beaf069f48303a0468433f449fc604",
    "filename": "backend/src/main/java/com/huellapositiva/domain/actions/UpdateProposalImageAction.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/ayudadigital/huelladigital-backend/blob/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/main/java/com/huellapositiva/domain/actions/UpdateProposalImageAction.java",
    "raw_url": "https://github.com/ayudadigital/huelladigital-backend/raw/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/main/java/com/huellapositiva/domain/actions/UpdateProposalImageAction.java",
    "contents_url": "https://api.github.com/repos/ayudadigital/huelladigital-backend/contents/backend/src/main/java/com/huellapositiva/domain/actions/UpdateProposalImageAction.java?ref=efce69cc1f7af50cca44373d3bec756b3ba92489",
    "patch": "@@ -0,0 +1,65 @@\n+package com.huellapositiva.domain.actions;\n+\n+import com.huellapositiva.domain.model.entities.Proposal;\n+import com.huellapositiva.domain.model.valueobjects.ProposalStatus;\n+import com.huellapositiva.domain.repository.ProposalRepository;\n+import com.huellapositiva.domain.service.ImageService;\n+import com.huellapositiva.domain.service.RemoteStorageService;\n+import com.huellapositiva.infrastructure.orm.entities.JpaContactPerson;\n+import com.huellapositiva.infrastructure.orm.entities.JpaProposal;\n+import com.huellapositiva.infrastructure.orm.repository.JpaContactPersonRepository;\n+import com.huellapositiva.infrastructure.orm.repository.JpaProposalRepository;\n+import lombok.AllArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import javax.persistence.EntityNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.AccessDeniedException;\n+\n+@Service\n+@AllArgsConstructor\n+public class UpdateProposalImageAction {\n+\n+    @Autowired\n+    private final JpaContactPersonRepository jpaContactPersonRepository;\n+\n+    @Autowired\n+    private final JpaProposalRepository jpaProposalRepository;\n+\n+    @Autowired\n+    private final ProposalRepository proposalRepository;\n+\n+    @Autowired\n+    private final JpaContactPersonRepository contactPersonRepository;\n+\n+    @Autowired\n+    private final ImageService imageService;\n+\n+    private final RemoteStorageService remoteStorageService;\n+\n+    public void execute(MultipartFile photo, String accountId, String proposalId) throws IOException {\n+        imageService.validateProposalImage(photo);\n+        JpaContactPerson accountContactPerson = jpaContactPersonRepository.findByAccountId(accountId).orElseThrow(EntityNotFoundException::new);\n+        JpaProposal jpaProposal = jpaProposalRepository.findByNaturalId(proposalId).orElseThrow(EntityNotFoundException::new);\n+        validateProposalUpdate(accountContactPerson,jpaProposal);\n+\n+        URL url = remoteStorageService.uploadProposalImage(photo, proposalId);\n+        Proposal proposal = Proposal.parseJpa(jpaProposal);\n+        proposal.setImage(url);\n+        proposalRepository.save(proposal);\n+    }\n+\n+    private void validateProposalUpdate(JpaContactPerson accountContactPerson, JpaProposal jpaProposal) throws AccessDeniedException {\n+        JpaContactPerson proposalContactPerson = contactPersonRepository.findByEsalId(jpaProposal.getEsal().getId()).orElseThrow(EntityNotFoundException::new);\n+        if(!accountContactPerson.getCredential().getId().equals(proposalContactPerson.getCredential().getId())){\n+            throw new AccessDeniedException(\"The contact person related to this proposal does not match the logged contact person.\");\n+        }\n+        if(!jpaProposal.getStatus().getId().equals(ProposalStatus.PUBLISHED.getId()) &&\n+                !jpaProposal.getStatus().getId().equals(ProposalStatus.REVIEW_PENDING.getId())){\n+            throw new IllegalStateException(\"The Proposal must be PUBLISHED or REVIEW_PENDING to update the image.\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "6e51f564ca8b6bfea00bb913b87ba275d571213a",
    "filename": "backend/src/main/java/com/huellapositiva/domain/service/ImageService.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/ayudadigital/huelladigital-backend/blob/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/main/java/com/huellapositiva/domain/service/ImageService.java",
    "raw_url": "https://github.com/ayudadigital/huelladigital-backend/raw/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/main/java/com/huellapositiva/domain/service/ImageService.java",
    "contents_url": "https://api.github.com/repos/ayudadigital/huelladigital-backend/contents/backend/src/main/java/com/huellapositiva/domain/service/ImageService.java?ref=efce69cc1f7af50cca44373d3bec756b3ba92489",
    "patch": "@@ -35,6 +35,14 @@\n \n     private static final int ESAL_LOGO_MAX_HEIGHT = 400;\n \n+    private static final int PROPOSAL_IMAGE_MAX_BYTES = 1100000;\n+\n+    private static final int PROPOSAL_IMAGE_MAX_WIDTH = 400;\n+\n+    private static final int PROPOSAL_IMAGE_MAX_HEIGHT = 600;\n+\n+\n+\n     private void validateImage(MultipartFile photo,\n                                int imageMaxBytes,\n                                int imageMaxWidth,\n@@ -81,4 +89,8 @@ public void validateProfileImage(MultipartFile photo) throws IOException {\n     public void validateEsalLogo(MultipartFile logo) throws IOException {\n         validateImage(logo, ESAL_LOGO_MAX_BYTES, ESAL_LOGO_MAX_WIDTH, ESAL_LOGO_MAX_HEIGHT);\n     }\n+\n+    public void validateProposalImage(MultipartFile logo) throws IOException {\n+        validateImage(logo, PROPOSAL_IMAGE_MAX_BYTES, PROPOSAL_IMAGE_MAX_WIDTH, PROPOSAL_IMAGE_MAX_HEIGHT);\n+    }\n }"
  },
  {
    "sha": "52111fcd90d6286c4ff40f83dcad254c00f46eda",
    "filename": "backend/src/test/java/com/huellapositiva/api/ProposalControllerShould.java",
    "status": "modified",
    "additions": 120,
    "deletions": 1,
    "changes": 121,
    "blob_url": "https://github.com/ayudadigital/huelladigital-backend/blob/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/test/java/com/huellapositiva/api/ProposalControllerShould.java",
    "raw_url": "https://github.com/ayudadigital/huelladigital-backend/raw/efce69cc1f7af50cca44373d3bec756b3ba92489/backend/src/test/java/com/huellapositiva/api/ProposalControllerShould.java",
    "contents_url": "https://api.github.com/repos/ayudadigital/huelladigital-backend/contents/backend/src/test/java/com/huellapositiva/api/ProposalControllerShould.java?ref=efce69cc1f7af50cca44373d3bec756b3ba92489",
    "patch": "@@ -25,8 +25,10 @@\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.springframework.mock.web.MockMultipartFile;\n import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n \n import javax.persistence.EntityNotFoundException;\n+import java.io.InputStream;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.List;\n@@ -42,6 +44,8 @@\n import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.hamcrest.text.MatchesPattern.matchesPattern;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+import static org.springframework.http.MediaType.MULTIPART_FORM_DATA;\n import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n@@ -374,7 +378,7 @@ void return_410_when_joining_a_non_existent_proposal() throws Exception {\n     void create_proposal_as_reviser() throws Exception {\n         testData.createCredential(DEFAULT_EMAIL, UUID.randomUUID(), DEFAULT_PASSWORD, Roles.REVISER);\n         JwtResponseDto jwtResponseDto = loginAndGetJwtTokens(mvc, DEFAULT_EMAIL, DEFAULT_PASSWORD);\n-      \n+\n         JpaContactPerson contactPerson = testData.createESALJpaContactPerson(VALID_NAME, VALID_SURNAME, VALID_PHONE, DEFAULT_ESAL_CONTACT_PERSON_EMAIL, DEFAULT_PASSWORD);\n         testData.createAndLinkESAL(contactPerson, testData.buildJpaESAL(\"Huella Positiva\"));\n         ProposalRequestDto proposalDto = testData.buildProposalDto();\n@@ -989,4 +993,119 @@ void return_409_when_proposal_status_is_not_enrollment_closed(ProposalStatus pro\n                 REVIEW_PENDING\n         );\n     }\n+\n+    @Test\n+    void return_204_when_proposal_image_changed_successfully() throws Exception {\n+        JpaProposal jpaProposal = testData.registerESALAndProposal(PUBLISHED);\n+        JwtResponseDto jwtResponseDto = loginAndGetJwtTokens(mvc, DEFAULT_ESAL_CONTACT_PERSON_EMAIL, DEFAULT_PASSWORD);\n+\n+        InputStream is = getClass().getClassLoader().getResourceAsStream(\"images/huellapositiva-logo.png\");\n+        MockMultipartHttpServletRequestBuilder multipart = multipart(FETCH_PROPOSAL_URI + jpaProposal.getId() + \"/image\");\n+        multipart.with(request -> {\n+            request.setMethod(\"PUT\");\n+            return request;\n+        });\n+        mvc.perform(multipart\n+                .file(new MockMultipartFile(\"photo\", \"photo-test.PNG\", \"image/png\", is))\n+                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwtResponseDto.getAccessToken())\n+                .contentType(MULTIPART_FORM_DATA)\n+                .with(csrf())\n+                .accept(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isNoContent());\n+\n+        JpaProposal jpaProposal1 = jpaProposalRepository.findByNaturalId(jpaProposal.getId()).orElseThrow(EntityNotFoundException::new);\n+        assertThat(jpaProposal1.getImageUrl()).isNotNull();\n+    }\n+\n+    @Test\n+    void return_400_when_proposal_status_is_different_from_published_or_review_pending() throws Exception {\n+        JpaProposal jpaProposal = testData.registerESALAndProposal(INADEQUATE);\n+        JwtResponseDto jwtResponseDto = loginAndGetJwtTokens(mvc, DEFAULT_ESAL_CONTACT_PERSON_EMAIL, DEFAULT_PASSWORD);\n+\n+        InputStream is = getClass().getClassLoader().getResourceAsStream(\"images/huellapositiva-logo.png\");\n+        MockMultipartHttpServletRequestBuilder multipart = multipart(FETCH_PROPOSAL_URI + jpaProposal.getId() + \"/image\");\n+        multipart.with(request -> {\n+            request.setMethod(\"PUT\");\n+            return request;\n+        });\n+\n+        mvc.perform(multipart\n+                .file(new MockMultipartFile(\"photo\", \"photo-test.PNG\", \"image/png\", is))\n+                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwtResponseDto.getAccessToken())\n+                .contentType(MULTIPART_FORM_DATA)\n+                .with(csrf())\n+                .accept(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isBadRequest());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideInvalidImages\")\n+    void return_400_when_the_proposal_image_uploaded_is_too_big(List<String> proposalImageURI) throws Exception {\n+        JpaProposal jpaProposal = testData.registerESALAndProposal(PUBLISHED);\n+        JwtResponseDto jwtResponseDto = loginAndGetJwtTokens(mvc, DEFAULT_ESAL_CONTACT_PERSON_EMAIL, DEFAULT_PASSWORD);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"proposalImage\", proposalImageURI.get(0),\n+                proposalImageURI.get(1), getClass().getClassLoader().getResourceAsStream(proposalImageURI.get(0)));\n+\n+        MockMultipartHttpServletRequestBuilder multipart = multipart(FETCH_PROPOSAL_URI + jpaProposal.getId() + \"/image\");\n+        multipart.with(request -> {\n+            request.setMethod(\"PUT\");\n+            return request;\n+        });\n+        mvc.perform(multipart\n+                .file(file)\n+                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwtResponseDto.getAccessToken())\n+                .contentType(MULTIPART_FORM_DATA)\n+                .with(csrf())\n+                .accept(APPLICATION_JSON))\n+                .andExpect(status().isBadRequest());\n+    }\n+\n+    private static Stream<List<String>> provideInvalidImages(){\n+        return Stream.of(\n+                List.of(\"images/Sample-png-image-3mb.png\",\"image/png\"),\n+                List.of(\"images/oversized.png\",\"image/png\"),\n+                List.of(\"documents/pdf-test.pdf\",\"application/pdf\")\n+        );\n+    }\n+\n+    @Test\n+    void return_400_when_there_is_not_photo_uploaded() throws Exception {\n+        JpaProposal jpaProposal = testData.registerESALAndProposal(PUBLISHED);\n+        JwtResponseDto jwtResponseDto = loginAndGetJwtTokens(mvc, DEFAULT_ESAL_CONTACT_PERSON_EMAIL, DEFAULT_PASSWORD);\n+\n+        MockMultipartHttpServletRequestBuilder multipart = multipart(FETCH_PROPOSAL_URI + jpaProposal.getId() + \"/image\");\n+        multipart.with(request -> {\n+            request.setMethod(\"PUT\");\n+            return request;\n+        });\n+        mvc.perform(multipart\n+                .file(new MockMultipartFile(\"proposalImage\", \"photo-test.PNG\", \"image/png\", InputStream.nullInputStream()))\n+                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwtResponseDto.getAccessToken())\n+                .contentType(MULTIPART_FORM_DATA)\n+                .with(csrf())\n+                .accept(APPLICATION_JSON))\n+                .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    void return_403_when_contact_person_email_is_not_equal_to_proposal_contact_person_email() throws Exception {\n+        JpaProposal jpaProposal = testData.registerESALAndProposal(PUBLISHED);\n+        testData.createESALJpaContactPerson(VALID_NAME, VALID_SURNAME, VALID_PHONE, DEFAULT_EMAIL, DEFAULT_PASSWORD);\n+        JwtResponseDto jwtResponseDto = loginAndGetJwtTokens(mvc, DEFAULT_EMAIL, DEFAULT_PASSWORD);\n+\n+        InputStream is = getClass().getClassLoader().getResourceAsStream(\"images/huellapositiva-logo.png\");\n+        MockMultipartHttpServletRequestBuilder multipart = multipart(FETCH_PROPOSAL_URI + jpaProposal.getId() + \"/image\");\n+        multipart.with(request -> {\n+            request.setMethod(\"PUT\");\n+            return request;\n+        });\n+        mvc.perform(multipart\n+                .file(new MockMultipartFile(\"photo\", \"photo-test.PNG\", \"image/png\", is))\n+                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwtResponseDto.getAccessToken())\n+                .contentType(MULTIPART_FORM_DATA)\n+                .with(csrf())\n+                .accept(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isForbidden());\n+    }\n }\n\\ No newline at end of file"
  }
]
