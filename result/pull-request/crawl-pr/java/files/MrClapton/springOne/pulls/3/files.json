[
  {
    "sha": "c90566dbd13076ba25fd071603c0037a797a034c",
    "filename": "lesson-4(SpringBoot)/pom.xml",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/pom.xml",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/pom.xml",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/pom.xml?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>ru.geekbrains</groupId>\n+    <artifactId>spring-boot</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>geekbrains-spring-boot</name>\n+    <description>Demo project for Spring Boot</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>"
  },
  {
    "sha": "35074222e26656b1cfe0129631619b7b5873cc26",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/GeekbrainsSpringBootApplication.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/GeekbrainsSpringBootApplication.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/GeekbrainsSpringBootApplication.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/GeekbrainsSpringBootApplication.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.geekbrains;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class GeekbrainsSpringBootApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(GeekbrainsSpringBootApplication.class, args);\n+    }\n+\n+}"
  },
  {
    "sha": "b6c8947b31feabbdfb7bcdb614b8d96fa63fe19f",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/PersonController.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/PersonController.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/PersonController.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/PersonController.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,40 @@\n+package ru.geekbrains;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import ru.geekbrains.persistence.Person;\n+import ru.geekbrains.service.PersonService;\n+\n+@Controller\n+@RequestMapping(\"/persons\")\n+public class PersonController {\n+\n+    private PersonService personService;\n+\n+    @Autowired\n+    public PersonController(PersonService personService) {\n+        this.personService = personService;\n+    }\n+\n+    @GetMapping\n+    public String allPersons(Model model) {\n+        model.addAttribute(\"persons\", personService.getAllPersons());\n+        return \"persons\";\n+    }\n+\n+    @GetMapping(\"/form\")\n+    public String formPerson(Model model) {\n+        model.addAttribute(\"person\", new Person());\n+        return \"person_form\";\n+    }\n+\n+    @PostMapping(\"/form\")\n+    public String newPerson(Person person) {\n+        personService.insert(person);\n+        return \"redirect:/persons\";\n+    }\n+}"
  },
  {
    "sha": "9c8cfcb795996a5eaa4d9c4bd3988101b4366d85",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/ProductController.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/ProductController.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/ProductController.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/ProductController.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,91 @@\n+package ru.geekbrains;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.persistence.Product;\n+import ru.geekbrains.service.ProductService;\n+\n+import java.util.Optional;\n+\n+@Controller\n+@RequestMapping(\"/products\")\n+public class ProductController {\n+\n+    private ProductService productService;\n+\n+    @Autowired\n+    public ProductController(ProductService productService) {\n+        this.productService = productService;\n+    }\n+\n+    @GetMapping(\"/filter\")\n+    public String allProducts(@RequestParam(\"minPrice\") Integer minPrice,\n+                              @RequestParam(\"maxPrice\") Integer maxPrice,\n+                              @RequestParam(\"page\") Integer page,\n+                              @RequestParam(\"size\") Integer size,\n+                              Model model) {\n+\n+        if (minPrice == null) {\n+            minPrice = 0;\n+        }\n+        if (page == null) {\n+            page = 1;\n+        }\n+        if (size == null) {\n+            size = 5;\n+        }\n+        if (maxPrice == null) {\n+            model.addAttribute(\"products\", productService.getAllProducts(minPrice, PageRequest.of(page - 1, size)));\n+        } else {\n+            model.addAttribute(\"products\", productService.getAllProducts(minPrice, maxPrice, PageRequest.of(page - 1, size)));\n+        }\n+        model.addAttribute(\"minPrice\", minPrice);\n+        model.addAttribute(\"maxPrice\", maxPrice);\n+        model.addAttribute(\"page\", page);\n+        model.addAttribute(\"size\", size);\n+        model.addAttribute(\"activePage\", \"Список товаров\");\n+        return \"products\";\n+    }\n+\n+    @GetMapping()\n+    public String allProducts(Model model) {\n+        model.addAttribute(\"products\", productService.getAllProducts(0, PageRequest.of(0, 5)));\n+        model.addAttribute(\"minPrice\", 0);\n+        model.addAttribute(\"maxPrice\", null);\n+        model.addAttribute(\"page\", 1);\n+        model.addAttribute(\"size\", 5);\n+        return \"products\";\n+    }\n+\n+    @GetMapping(\"/form\")\n+    public String formProduct(Model model) {\n+        model.addAttribute(\"product\", new Product());\n+        return \"product_form\";\n+    }\n+\n+    @RequestMapping(\"/id\")\n+    public String productById(@RequestParam(\"id\") Long id, Model model) {\n+        Optional<Product> product = productService.getById(id);\n+        if (product.isPresent()) {\n+            model.addAttribute(\"product\", product.get());\n+            return \"product\";\n+        }\n+        return \"products\";\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public String editProduct(@PathVariable(value = \"id\") Long id, Model model) {\n+        model.addAttribute(\"product\", productService.getById(id));\n+        return \"product_form\";\n+    }\n+\n+    @PostMapping(\"/form\")\n+    public String newProduct(Product product) {\n+        productService.insert(product);\n+        return \"redirect:/products\";\n+    }\n+\n+}"
  },
  {
    "sha": "5d37532b5399cd38f278d211917427c9ddfb216d",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/exceptions/NotFoundException.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/exceptions/NotFoundException.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/exceptions/NotFoundException.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/exceptions/NotFoundException.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.geekbrains.exceptions;\n+\n+public class NotFoundException extends RuntimeException {\n+\n+    public NotFoundException(String s) {\n+        super(s);\n+    }\n+\n+}"
  },
  {
    "sha": "8d615b6367023619b0278a8e50ac473d924ff882",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/CustomerOrder.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/CustomerOrder.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/CustomerOrder.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/CustomerOrder.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,89 @@\n+package ru.geekbrains.persistence;\n+\n+import javax.persistence.*;\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+@Entity\n+public class CustomerOrder {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column\n+    private LocalDate date;\n+\n+    @Column\n+    private Integer status;\n+\n+    @OneToMany(\n+            mappedBy = \"customerOrder\",\n+            cascade = CascadeType.ALL\n+    )\n+    private List<Position> positionList;\n+\n+    @ManyToOne\n+    private Person person;\n+\n+    public CustomerOrder() {\n+    }\n+\n+    public CustomerOrder(LocalDate date, Integer status, List<Position> positionList, Person person) {\n+        this.date = date;\n+        this.status = status;\n+        this.positionList = positionList;\n+        this.person = person;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public LocalDate getDate() {\n+        return date;\n+    }\n+\n+    public void setDate(LocalDate date) {\n+        this.date = date;\n+    }\n+\n+    public Integer getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(Integer status) {\n+        this.status = status;\n+    }\n+\n+    public List<Position> getPositionList() {\n+        return positionList;\n+    }\n+\n+    public void setPositionList(List<Position> positionList) {\n+        this.positionList = positionList;\n+    }\n+\n+    public Person getPerson() {\n+        return person;\n+    }\n+\n+    public void setPerson(Person person) {\n+        this.person = person;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CustomerOrder{\" +\n+                \"id=\" + id +\n+                \", date=\" + date +\n+                \", status=\" + status +\n+                \", positionList=\" + positionList.size() +\n+                \", person=\" + person +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "a2806546efd27315d72d6dea18d241cc98673bcf",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Person.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Person.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Person.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Person.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,88 @@\n+package ru.geekbrains.persistence;\n+\n+import javax.persistence.*;\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+@Entity\n+public class Person {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(length = 255)\n+    private String lastName;\n+\n+    @Column(length = 255)\n+    private String firstName;\n+\n+    @Column\n+    private LocalDate birthDate;\n+\n+    @Transient\n+    private String notForSave;\n+\n+    @OneToMany(\n+            mappedBy = \"person\",\n+            cascade = CascadeType.ALL\n+    )\n+    private List<CustomerOrder> customerOrderList;\n+\n+    public Person() {\n+    }\n+\n+    public Person(String firstName, String lastName) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    public Person(String firstName, String lastName, LocalDate birthDate, List<CustomerOrder> customerOrderList) {\n+        this.lastName = lastName;\n+        this.firstName = firstName;\n+        this.birthDate = birthDate;\n+        this.customerOrderList = customerOrderList;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public LocalDate getBirthDate() {\n+        return birthDate;\n+    }\n+\n+    public void setBirthDate(LocalDate birthDate) {\n+        this.birthDate = birthDate;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Person{\" +\n+                \"id=\" + id +\n+                \", lastName='\" + lastName + '\\'' +\n+                \", firstName='\" + firstName + '\\'' +\n+                \", birthDate=\" + birthDate +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "9b1879a8a199cbd3d6f305315ceb970c0ac4a22f",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/PersonRepository.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/PersonRepository.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/PersonRepository.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/PersonRepository.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,8 @@\n+package ru.geekbrains.persistence;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface PersonRepository extends JpaRepository<Person, Long> {\n+}"
  },
  {
    "sha": "3016a628f08517d91f9d80dc2bfe363457b41afa",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Position.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Position.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Position.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Position.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,84 @@\n+package ru.geekbrains.persistence;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Position {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column\n+    private Integer amount;\n+\n+    @Column\n+    private Integer price;\n+\n+    @ManyToOne\n+    private Product product;\n+\n+    @ManyToOne\n+    private CustomerOrder customerOrder;\n+\n+    public Position() {\n+    }\n+\n+    public Position(CustomerOrder customerOrder, Product product, Integer amount, Integer price) {\n+        this.customerOrder = customerOrder;\n+        this.product = product;\n+        this.amount = amount;\n+        this.price = price;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Product getProduct() {\n+        return product;\n+    }\n+\n+    public void setProduct(Product product) {\n+        this.product = product;\n+    }\n+\n+    public Integer getAmount() {\n+        return amount;\n+    }\n+\n+    public void setAmount(Integer amount) {\n+        this.amount = amount;\n+    }\n+\n+    public Integer getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(Integer price) {\n+        this.price = price;\n+    }\n+\n+    public CustomerOrder getCustomerOrder() {\n+        return customerOrder;\n+    }\n+\n+    public void setCustomerOrder(CustomerOrder customerOrder) {\n+        this.customerOrder = customerOrder;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Position{\" +\n+                \"id=\" + id +\n+                \", amount=\" + amount +\n+                \", price=\" + price +\n+                \", product=\" + product +\n+                \", customerOrder=\" + customerOrder +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "5afc5c21b045cbb983cbdc42aef0c6855a75029d",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Product.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Product.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Product.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/Product.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,80 @@\n+package ru.geekbrains.persistence;\n+\n+import javax.persistence.*;\n+import java.util.List;\n+\n+@Entity\n+public class Product {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column\n+    private String title;\n+\n+    @Column\n+    private Integer cost;\n+\n+    @OneToMany(\n+            mappedBy = \"product\",\n+            cascade = CascadeType.ALL\n+    )\n+    private List<Position> positionList;\n+\n+    public Product() {\n+    }\n+\n+    public Product(String title, Integer cost, List<Position> positionList) {\n+        this.title = title;\n+        this.cost = cost;\n+        this.positionList = positionList;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public Integer getCost() {\n+        return cost;\n+    }\n+\n+    public void setCost(Integer cost) {\n+        this.cost = cost;\n+    }\n+\n+    public List<Position> getPositionList() {\n+        return positionList;\n+    }\n+\n+    public void setPositionList(List<Position> positionList) {\n+        this.positionList = positionList;\n+    }\n+\n+    public void checkValidBusinessData() {\n+        if (getCost() <= 0) {\n+            throw new IllegalArgumentException(\"The cost should be above zero: \" + getCost());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Product{\" +\n+                \"id=\" + id +\n+                \", title='\" + title + '\\'' +\n+                \", cost=\" + cost +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "49616f41925196a7a4af540706dc4b462eb7dfb6",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/ProductRepository.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/ProductRepository.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/persistence/ProductRepository.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,16 @@\n+package ru.geekbrains.persistence;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface ProductRepository extends JpaRepository<Product, Long> {\n+\n+    Page<Product> findAllByCostGreaterThanEqual(@Param(\"minPrice\") Integer minPrice, Pageable pageable);\n+\n+    Page<Product> findAllByCostBetween(@Param(\"minPrice\") Integer minPrice, @Param(\"maxPrice\") Integer maxPrice, Pageable pageable);\n+\n+}"
  },
  {
    "sha": "09d02584d716ba75650a117c6e657691f151281c",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ErrorMessage.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ErrorMessage.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ErrorMessage.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ErrorMessage.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,76 @@\n+package ru.geekbrains.rest;\n+\n+public class ErrorMessage {\n+\n+    private String errorCode;\n+    private String message;\n+    private String localizedMessage;\n+    private StackTraceElement[] stackTrace;\n+\n+    public ErrorMessage() {\n+    }\n+\n+    public String getErrorCode() {\n+        return errorCode;\n+    }\n+\n+    public void setErrorCode(String errorCode) {\n+        this.errorCode = errorCode;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public String getLocalizedMessage() {\n+        return localizedMessage;\n+    }\n+\n+    public void setLocalizedMessage(String localizedMessage) {\n+        this.localizedMessage = localizedMessage;\n+    }\n+\n+    public StackTraceElement[] getStackTrace() {\n+        return stackTrace;\n+    }\n+\n+    public void setStackTrace(StackTraceElement[] stackTrace) {\n+        this.stackTrace = stackTrace;\n+    }\n+\n+    public static Builder builder() {\n+        return new ErrorMessage().new Builder();\n+    }\n+\n+    public class Builder {\n+\n+        public Builder setErrorCode(String errorCode) {\n+            ErrorMessage.this.errorCode = errorCode;\n+            return this;\n+        }\n+\n+        public Builder setMessage(String message) {\n+            ErrorMessage.this.message = message;\n+            return this;\n+        }\n+\n+        public Builder setLocalizedMessage(String localizedMessage) {\n+            ErrorMessage.this.localizedMessage = localizedMessage;\n+            return this;\n+        }\n+\n+        public Builder setStackTrace(StackTraceElement[] stackTrace) {\n+            ErrorMessage.this.stackTrace = stackTrace;\n+            return this;\n+        }\n+\n+        public ErrorMessage build() {\n+            return ErrorMessage.this;\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "6dbe267831af02b581f855f4e52e7c1186028b5b",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ProductResource.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ProductResource.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ProductResource.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/rest/ProductResource.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,73 @@\n+package ru.geekbrains.rest;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.exceptions.NotFoundException;\n+import ru.geekbrains.persistence.Product;\n+import ru.geekbrains.service.ProductService;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RequestMapping(\"api/v1/product\")\n+@RestController\n+public class ProductResource {\n+\n+    private final ProductService productService;\n+\n+    @Autowired\n+    public ProductResource(ProductService productService) {\n+        this.productService = productService;\n+    }\n+\n+    @GetMapping(path = \"/all\", produces = \"application/json\")\n+    public List<Product> getAll() {\n+        return productService.getAllProducts();\n+    }\n+\n+    @GetMapping(path = \"/{id}\", produces = \"application/json\")\n+    public Product getById(@PathVariable(\"id\") long id) {\n+        Optional<Product> optionalProduct = productService.getById(id);\n+        return optionalProduct.orElseThrow(() -> new NotFoundException(\"No product with id: \" + id));\n+    }\n+\n+    @PostMapping()\n+    public void postProduct(@RequestBody Product product) {\n+        product.checkValidBusinessData();\n+        productService.insert(product);\n+    }\n+\n+    @PutMapping()\n+    public void putProduct(@RequestBody Product product) {\n+        product.checkValidBusinessData();\n+        productService.update(product);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<ErrorMessage> handleException(NotFoundException exception) {\n+        return new ResponseEntity<>(\n+                ErrorMessage.builder()\n+                            .setErrorCode(\"rest-001\")\n+                            .setLocalizedMessage(exception.getLocalizedMessage())\n+                            .setMessage(exception.getMessage())\n+                            .setStackTrace(exception.getStackTrace())\n+                            .build()\n+                , HttpStatus.NOT_FOUND);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<ErrorMessage> handleException(IllegalArgumentException exception) {\n+        return new ResponseEntity<>(\n+                ErrorMessage.builder()\n+                            .setErrorCode(\"rest-002\")\n+                            .setLocalizedMessage(exception.getLocalizedMessage())\n+                            .setMessage(exception.getMessage())\n+                            .setStackTrace(exception.getStackTrace())\n+                            .build()\n+                , HttpStatus.BAD_REQUEST);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "7f9b8551ed8cd3b2ece8240c8aa4701b0149328c",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/PersonService.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/PersonService.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/PersonService.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/PersonService.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,37 @@\n+package ru.geekbrains.service;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.geekbrains.persistence.Person;\n+import ru.geekbrains.persistence.PersonRepository;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class PersonService {\n+\n+    private final PersonRepository personRepository;\n+\n+    @Autowired\n+    PersonService(PersonRepository personRepository) {\n+        this.personRepository = personRepository;\n+    }\n+\n+    @Transactional\n+    public void insert(Person person) {\n+        personRepository.save(person);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public Optional<Person> getById(Long id) {\n+        return personRepository.findById(id);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public List<Person> getAllPersons() {\n+        return personRepository.findAll();\n+    }\n+\n+}"
  },
  {
    "sha": "553ba852eb543ad6b340c2326286f2aa80b46748",
    "filename": "lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/ProductService.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/ProductService.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/ProductService.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/java/ru/geekbrains/service/ProductService.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.geekbrains.service;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.geekbrains.persistence.Product;\n+import ru.geekbrains.persistence.ProductRepository;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class ProductService {\n+\n+    private ProductRepository productRepository;\n+\n+    public ProductService(ProductRepository productRepository) {\n+        this.productRepository = productRepository;\n+    }\n+\n+    @Transactional\n+    public void insert(Product product) {\n+        productRepository.save(product);\n+    }\n+\n+    @Transactional\n+    public void update(Product product) {\n+        if (getById(product.getId()).isPresent()) {\n+            productRepository.save(product);\n+        } else {\n+            throw new IllegalArgumentException(\"No product with such ID: \" + product.getId());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public Optional<Product> getById(Long id) {\n+        return productRepository.findById(id);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public List<Product> getAllProducts() {\n+        return productRepository.findAll();\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public Page<Product> getAllProducts(Integer minPrice, Integer maxPrice, Pageable pageable) {\n+        return productRepository.findAllByCostBetween(minPrice, maxPrice, pageable);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public Page<Product> getAllProducts(Integer minPrice, Pageable pageable) {\n+        return productRepository.findAllByCostGreaterThanEqual(minPrice, pageable);\n+    }\n+}"
  },
  {
    "sha": "7eaaf0122192888f46f745baf37d687868f1f14e",
    "filename": "lesson-4(SpringBoot)/src/main/resources/application.yaml",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/application.yaml",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/application.yaml?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,39 @@\n+spring:\n+\n+  application:\n+    name: app\n+\n+  server:\n+    servlet:\n+      context-path: /app\n+    port: 8080\n+\n+#  datasource:\n+#    driverClassName: com.mysql.cj.jdbc.Driver\n+#    url: jdbc:mysql://192.168.1.74:3306/mvc_boot?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC\n+#    username: root\n+#    password: root\n+#    continueOnError: true\n+#    initialize: true\n+#    initialSize: 0\n+#    timeBetweenEvictionRunsMillis: 5000\n+#    minEvictableIdleTimeMillis: 5000\n+#    minIdle: 0\n+\n+  jpa:\n+    show-sql: true\n+    hibernate:\n+      ddl-auto: update\n+#      naming_strategy: org.hibernate.cfg.DefaultNamingStrategy\n+#    properties:\n+#      hibernate:\n+#        format_sql : true\n+#        dialect: org.hibernate.dialect.MySQL8Dialect\n+#        hbm2ddl:\n+#          auto: none\n+#        temp:\n+#          use_jdbc_metadata_defaults: false\n+\n+  logging:\n+    level:\n+      root: INFO"
  },
  {
    "sha": "43258359683b8bd326cb055912f30029793431c2",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/fragments/footer.html",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/fragments/footer.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/fragments/footer.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/fragments/footer.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,8 @@\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+\n+<p th:fragment=\"footer\" class=\"footer\">\n+    <hr>\n+    &copy; Все права защищены.\n+</p>\n+\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "47a85a822fbe25c0b96cfcfdcbd3c865671e5ebe",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/fragments/navbar.html",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/fragments/navbar.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/fragments/navbar.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/fragments/navbar.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,10 @@\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+\n+<nav th:fragment=\"navbar\" class=\"navbar\">\n+        <a th:href=\"@{/persons}\">Список персон</a>\n+        <a th:href=\"@{/persons/form}\">Добавить персону</a>\n+        <a th:href=\"@{/products}\">Список товаров</a>\n+        <a th:href=\"@{/products/form}\">Добавить товар</a>\n+</nav>\n+\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "6b60140b8b36c18b0c17868405683fab7a8c6b57",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/index.html",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/index.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/index.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/index.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,23 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Document</title>\n+    <link rel=\"stylesheet\" href=\"style.css\">\n+</head>\n+<body>\n+    <nav th:replace=\"fragments/navbar.html\"/>\n+    <form action=\"\">\n+        <!--/*@thymesVar id=\"helloText\" type=\"ru.geekbrains.WelcomeController\"*/-->\n+        <h1 th:text=\"${helloText}\"></h1>\n+        <ul>\n+            <li><a th:href=\"@{/persons}\">Список персон</a></li>\n+            <li><a th:href=\"@{/persons/form}\">Добавить персону</a></li>\n+            <li><a th:href=\"@{/products}\">Список товаров</a></li>\n+            <li><a th:href=\"@{/products/form}\">Добавить товар</a></li>\n+        </ul>\n+        <nav th:replace=\"fragments/footer.html\"/>\n+    </form>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "729575ba0d3cffd3337df6ae9c9d71bb2f24139d",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/person_form.html",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/person_form.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/person_form.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/person_form.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,20 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Document</title>\n+    <link rel=\"stylesheet\" href=\"style.css\">\n+</head>\n+<body>\n+<nav th:replace=\"fragments/navbar.html\"/>\n+<h1>Форма ввода данных</h1>\n+<form th:action=\"@{/persons/form}\" th:object=\"${person}\" method=\"post\">\n+    Имя <input type=\"text\" placeholder=\"Иван\" th:field=\"*{firstName}\"><br>\n+    Фамилия <input type=\"text\" placeholder=\"Иванов\" th:field=\"*{lastName}\"><br>\n+    <button type=\"submit\">Отправить</button>\n+    <button type=\"reset\">Очистить</button>\n+    <nav th:replace=\"fragments/footer.html\"/>\n+</form>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "67947449adf6335095dbd0aa93d718dc9b2244a9",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/persons.html",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/persons.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/persons.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/persons.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,20 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Document</title>\n+    <link rel=\"stylesheet\" href=\"style.css\">\n+</head>\n+<body>\n+    <nav th:replace=\"fragments/navbar.html\"/>\n+    <h1>Persons list</h1>\n+    <table>\n+        <tr th:each=\"person : ${persons}\">\n+            <th th:text=\"*{person.firstName}\"></th>\n+            <th th:text=\"*{person.lastName}\"></th>\n+        </tr>\n+    </table>\n+    <nav th:replace=\"fragments/footer.html\"/>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "211494eae8169d84ccfee89bdd92bd645d712715",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/product.html",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/product.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/product.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/product.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,22 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Product</title>\n+    <link rel=\"stylesheet\" href=\"style.css\">\n+</head>\n+<body>\n+    <nav th:replace=\"fragments/navbar.html\"/>\n+    <h1>Страница продукта</h1>\n+    <table>\n+        <tr>\n+            <th th:text=\"*{product.id}\"></th>\n+            <th th:text=\"*{product.title}\"></th>\n+            <th th:text=\"*{product.cost}\"></th>\n+        </tr>\n+    </table>\n+    <a th:href=\"@{/products/{id}(id = ${product.id})}\">Редактировать</a>\n+    <nav th:replace=\"fragments/footer.html\"/>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "61ae60d93d38e9285a10d9c57fb1dcd3fb171399",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/product_form.html",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/product_form.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/product_form.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/product_form.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,22 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Product form</title>\n+    <link rel=\"stylesheet\" href=\"style.css\">\n+</head>\n+<body>\n+<nav th:replace=\"fragments/navbar.html\"/>\n+<h1>Форма ввода данных</h1>\n+<form th:action=\"@{/products/form}\" th:object=\"${product}\" method=\"post\">\n+    <input th:type=\"hidden\" th:field=\"*{id}\">\n+    Название <input type=\"text\" placeholder=\"Большой красный халат\" th:field=\"*{title}\"><br>\n+    Цена  <input type=\"number\" placeholder=\"345\" th:field=\"*{cost}\"><br>\n+    <button type=\"submit\">Отправить</button>\n+    <button type=\"reset\">Очистить</button>\n+\n+</form>\n+<nav th:replace=\"fragments/footer.html\"/>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "def769b1be95f307645ec294b25abe21097316bd",
    "filename": "lesson-4(SpringBoot)/src/main/resources/templates/products.html",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/products.html",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/main/resources/templates/products.html",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/main/resources/templates/products.html?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,43 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>Products</title>\n+</head>\n+<body>\n+    <nav th:replace=\"fragments/navbar.html\"/>\n+    <h1>Products list</h1>\n+    <form method=\"get\" th:action=\"@{/products/filter}\">\n+        <input type=\"hidden\" id=\"page\" name=\"page\" value=\"1\">\n+        <input type=\"hidden\" id=\"size\" name=\"size\" value=\"5\">\n+        <label for=\"minPrice\">Min price</label><input type=\"number\" id=\"minPrice\" name=\"minPrice\"><br>\n+        <label for=\"maxPrice\">Max price</label><input type=\"number\" id=\"maxPrice\" name=\"maxPrice\"><br>\n+        <button type=\"submit\">Apply</button>\n+    </form>\n+    <b th:unless=\"${products.hasContent()}\">Не найдено ни одной записи</b>\n+    <table th:if=\"${products.hasContent()}\">\n+        <tr>\n+            <th>Ссылки на страницы товара</th>\n+            <th>Идентификатор</th>\n+            <th>Название</th>\n+            <th>Цена</th>\n+        </tr>\n+        <tr th:each=\"product : ${products.content}\">\n+            <th><a th:href=\"@{/products/id(id=${product.id})}\">Страница продукта</a></th>\n+            <th th:text=\"*{product.id}\"></th>\n+            <th th:text=\"*{product.title}\"></th>\n+            <th th:text=\"*{product.cost}\"></th>\n+        </tr>\n+    </table>\n+    <div th:if=\"${products.hasContent()}\" class=\"pagination\">\n+        <a th:href=\"@{/products/filter(page=${1}, size=${products.size}, minPrice=${minPrice}, maxPrice=${maxPrice})}\">&laquo;</a>\n+\n+        <a th:each=\"num: ${#numbers.sequence(1, products.totalPages)}\"\n+           th:classappend=\"${num == products.number + 1} ? 'active'\"\n+           th:href=\"@{/products/filter(page=${num}, size=${products.size}, minPrice=${minPrice}, maxPrice=${maxPrice})}\">[[${num}]]</a>\n+        <a th:href=\"@{/products/filter(page=${products.totalPages}, size=${products.size}, minPrice=${minPrice}, maxPrice=${maxPrice})}\">&raquo;</a>\n+    </div>\n+    <nav th:replace=\"fragments/footer.html\"/>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "9ea22f0b7c7e1bb53c6f5ce697d09ef66da8a9c9",
    "filename": "lesson-4(SpringBoot)/src/test/java/ru/geekbrains/GeekbrainsSpringBootApplicationTests.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/test/java/ru/geekbrains/GeekbrainsSpringBootApplicationTests.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson-4(SpringBoot)/src/test/java/ru/geekbrains/GeekbrainsSpringBootApplicationTests.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson-4(SpringBoot)/src/test/java/ru/geekbrains/GeekbrainsSpringBootApplicationTests.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.geekbrains;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class GeekbrainsSpringBootApplicationTests {\n+\n+    @Test\n+    void contextLoads() {\n+    }\n+\n+}"
  },
  {
    "sha": "9ef9b172f18ca057050abfa40fb8d2a08d5e6630",
    "filename": "lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/TestServlet.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/TestServlet.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/TestServlet.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/TestServlet.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -25,10 +25,10 @@ public ServletConfig getServletConfig() {\n     }\n \n     @Override\n-    protected void service(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n-        logger.info(\"send txt to client\");\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        logger.info(\"send Product list to client\");\n         String response = ProductService.getProducts(10).toString();\n-        resp.setContentType(\"text/html\");\n+        //resp.setContentType(\"text/html\");\n         resp.getWriter().printf(\"<h1>Hello, buddy! List of products that you requested: %s </h1>\", response);\n         resp.getWriter().close();\n         //resp.getWriter().println(ProductService.getProducts(5));"
  },
  {
    "sha": "b9d99f549a5b0728b0ad8ccc1946ea182fe9ec89",
    "filename": "lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/Product.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/Product.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/Product.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/Product.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -29,7 +29,7 @@ public float getCost() {\n     public String toString() {\n         return \"Product[\" +\n                 \"id=\" + id +\n-                \", title='\" + title + '\\'' +\n+                \", title='\" + String.format(\"%c\", title) + \"'\" +\n                 \", cost=\" + String.format(\"%.2f\", price) +\n                 ']';\n     }"
  },
  {
    "sha": "784ede567491d9a28a7a3e14919d4527f92c69a5",
    "filename": "lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/ProductService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/ProductService.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/ProductService.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson1/src/main/java/ru/geekbrains/mrclapton/servlet/products/ProductService.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -4,6 +4,7 @@\n import java.util.Collections;\n import java.util.List;\n \n+\n public class ProductService {\n \n     public static List<Product> getProducts(int count) {"
  },
  {
    "sha": "5761e35f3cf7b1865dcb6bb3e5e2727b7b9c10ea",
    "filename": "lesson3(MVC)/pom.xml",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson3(MVC)/pom.xml",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson3(MVC)/pom.xml",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson3(MVC)/pom.xml?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>ru.started.spring.mvc</groupId>\n+    <artifactId>spring-mvc</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <packaging>war</packaging>\n+\n+    <name>spring-mvc Maven Webapp</name>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <maven.compiler.source>11</maven.compiler.source>\n+        <maven.compiler.target>11</maven.compiler.target>\n+        <spring.version>5.2.0.RELEASE</spring.version>\n+        <jetty.version>9.2.26.v20180806</jetty.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-jdk14</artifactId>\n+            <version>1.7.25</version>\n+        </dependency>\n+\n+        <!--Spring-->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-webmvc</artifactId>\n+            <version>${spring.version}</version>\n+        </dependency>\n+\n+        <!--Jetty-->\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-webapp</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.thymeleaf</groupId>\n+            <artifactId>thymeleaf-spring5</artifactId>\n+            <version>3.0.10.RELEASE</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>2.9.6</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.annotation</groupId>\n+            <artifactId>javax.annotation-api</artifactId>\n+            <version>1.3.2</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.11</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <finalName>spring-mvc</finalName>\n+        <pluginManagement>\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-clean-plugin</artifactId>\n+                    <version>3.1.0</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-resources-plugin</artifactId>\n+                    <version>3.0.2</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <version>3.8.1</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <version>2.22.1</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-war-plugin</artifactId>\n+                    <version>3.2.2</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-install-plugin</artifactId>\n+                    <version>2.5.2</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-deploy-plugin</artifactId>\n+                    <version>2.8.2</version>\n+                </plugin>\n+            </plugins>\n+        </pluginManagement>\n+    </build>\n+</project>"
  },
  {
    "sha": "9e2a3ad912657375e375bcbb8a3c3bb3aef19d7b",
    "filename": "lesson3(MVC)/src/main/java/ru/started/spring/mvc/Launcher.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/MrClapton/springOne/blob/c66a66c33f6f7cb293922220795813f9951d5c66/lesson3(MVC)/src/main/java/ru/started/spring/mvc/Launcher.java",
    "raw_url": "https://github.com/MrClapton/springOne/raw/c66a66c33f6f7cb293922220795813f9951d5c66/lesson3(MVC)/src/main/java/ru/started/spring/mvc/Launcher.java",
    "contents_url": "https://api.github.com/repos/MrClapton/springOne/contents/lesson3(MVC)/src/main/java/ru/started/spring/mvc/Launcher.java?ref=c66a66c33f6f7cb293922220795813f9951d5c66",
    "patch": "@@ -0,0 +1,25 @@\n+package ru.started.spring.mvc;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+\n+import java.net.URL;\n+import java.security.ProtectionDomain;\n+\n+public class Launcher {\n+    public static void main(String[] args) throws Exception {\n+        Server server = new Server(8189);\n+\n+        ProtectionDomain domain = Launcher.class.getProtectionDomain();\n+        URL location = domain.getCodeSource().getLocation();\n+\n+        WebAppContext webAppContext = new WebAppContext();\n+        webAppContext.setContextPath(\"/app\");\n+        // http://localhost:8189/app/hello\n+        webAppContext.setWar(location.toExternalForm());\n+\n+        server.setHandler(webAppContext);\n+        server.start();\n+        server.join();\n+    }\n+}\n\\ No newline at end of file"
  }
]
