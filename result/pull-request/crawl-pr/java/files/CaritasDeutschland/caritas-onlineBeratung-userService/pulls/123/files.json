[
  {
    "sha": "95bcf56534f4e55977a672b798f2e99db3e5d4da",
    "filename": "api/userservice.yaml",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/api/userservice.yaml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/api/userservice.yaml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/api/userservice.yaml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -267,6 +267,33 @@ paths:\n           description: INTERNAL SERVER ERROR - server encountered unexpected condition\n       security:\n         - Bearer: [ ]\n+  /users/mobiletoken:\n+    put:\n+      tags:\n+        - user-controller\n+      summary: 'Sets or updates the mobile registration token of the authorized asker account.\n+      This token is used to send push notifications to native mobile applications on android and\n+      ios. [Authorization: Role: asker]'\n+      operationId: updateMobileToken\n+      requestBody:\n+        content:\n+          'application/json':\n+            schema:\n+              type: string\n+        required: true\n+      responses:\n+        200:\n+          description: OK - successfull operation\n+        400:\n+          description: BAD REQUEST - invalid/incomplete request or body object\n+        401:\n+          description: UNAUTHORIZED - no/invalid Keycloak token\n+        403:\n+          description: FORBIDDEN - no/invalid role/authorization\n+        500:\n+          description: INTERNAL SERVER ERROR - server encountered unexpected condition\n+      security:\n+        - Bearer: [ ]\n   /users/sessions/consultants:\n     get:\n       tags:"
  },
  {
    "sha": "1566403a0e78a4b87161edbaca4fe3c658e398a8",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/pom.xml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/pom.xml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/pom.xml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -194,6 +194,13 @@\n \t\t\t<version>5.2.10.RELEASE</version>\n \t\t</dependency>\n \n+\t\t<!-- Push notification firebase dependency -->\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.firebase</groupId>\n+\t\t\t<artifactId>firebase-admin</artifactId>\n+\t\t\t<version>7.1.0</version>\n+\t\t</dependency>\n+\n \t\t<!-- Test scope dependencies -->\n \t\t<dependency>\n \t\t\t<groupId>com.h2database</groupId>"
  },
  {
    "sha": "f52af4d7ee843371abecd824e8945d4cf653ce09",
    "filename": "src/main/java/de/caritas/cob/userservice/api/controller/UserController.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/controller/UserController.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/api/controller/UserController.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -766,4 +766,16 @@ private CreateUserResponseDTO buildCreateUserResponseDTO(HttpHeaders header) {\n     this.userAccountProvider.deactivateAndFlagUserAccountForDeletion(deleteUserAccountDTO);\n     return new ResponseEntity<>(HttpStatus.OK);\n   }\n+\n+  /**\n+   * Updates or sets the mobile client token for the current authenticated user.\n+   *\n+   * @param mobileToken the mobile devide identifier\n+   * @return {@link ResponseEntity}\n+   */\n+  @Override\n+  public ResponseEntity<Void> updateMobileToken(@Valid String mobileToken) {\n+    this.userAccountProvider.updateUserMobileToken(mobileToken);\n+    return new ResponseEntity<>(HttpStatus.OK);\n+  }\n }"
  },
  {
    "sha": "08943ade7db419e5738fb1e8a2d6aac9c65ee4b5",
    "filename": "src/main/java/de/caritas/cob/userservice/api/repository/user/User.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/repository/user/User.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/repository/user/User.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/api/repository/user/User.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -64,6 +64,9 @@\n   @OneToMany(mappedBy = \"user\")\n   private Set<UserAgency> userAgencies;\n \n+  @Column(name = \"mobile_token\")\n+  private String mobileToken;\n+\n   @Column(name = \"delete_date\")\n   private LocalDateTime deleteDate;\n "
  },
  {
    "sha": "bc1bc00c60462b6efac23ca741f3c732bbc2e578",
    "filename": "src/main/java/de/caritas/cob/userservice/api/service/PushMessageService.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/service/PushMessageService.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/service/PushMessageService.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/api/service/PushMessageService.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -0,0 +1,81 @@\n+package de.caritas.cob.userservice.api.service;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.messaging.FirebaseMessaging;\n+import com.google.firebase.messaging.FirebaseMessagingException;\n+import com.google.firebase.messaging.Message;\n+import com.google.firebase.messaging.Notification;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import lombok.SneakyThrows;\n+import org.apache.commons.io.FileUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+/**\n+ * Push service to send new message notifications via firebase to mobile devices.\n+ */\n+@Service\n+public class PushMessageService {\n+\n+  @Value(\"${firebase.configuration.push-notifications.enabled}\")\n+  private boolean isEnabled;\n+\n+  @Value(\"${firebase.configuration.credentials.file.path}\")\n+  private String firebaseConfiguration;\n+\n+  @Value(\"${firebase.configuration.notification.message}\")\n+  private String pushNotificationMessage;\n+\n+  private FirebaseMessaging firebaseMessaging;\n+\n+  /**\n+   * Initializes the basic firebase configuration.\n+   */\n+  @SneakyThrows\n+  @EventListener(ApplicationReadyEvent.class)\n+  public void initializeFirebase() {\n+    if (this.isEnabled) {\n+      Path path = FileUtils.getFile(firebaseConfiguration).toPath();\n+      InputStream inputStream = Files.newInputStream(path);\n+\n+      FirebaseOptions options = FirebaseOptions.builder()\n+          .setCredentials(GoogleCredentials.fromStream(inputStream))\n+          .build();\n+\n+      FirebaseApp.initializeApp(options);\n+      this.firebaseMessaging = FirebaseMessaging.getInstance();\n+    } else {\n+      LogService.logInfo(\"Firebase push notifications are disabled\");\n+    }\n+  }\n+\n+  /**\n+   * Sends a push notification message to mobile device with given registration token.\n+   *\n+   * @param registrationToken the mobile device identifier\n+   */\n+  public void pushNewMessageEvent(String registrationToken) {\n+    if (!this.isEnabled) {\n+      return;\n+    }\n+    Message message = Message.builder()\n+        .setNotification(Notification.builder()\n+            .setBody(pushNotificationMessage)\n+            .build())\n+        .setToken(registrationToken)\n+        .build();\n+\n+    try {\n+      this.firebaseMessaging.send(message);\n+    } catch (FirebaseMessagingException e) {\n+      LogService.logWarn(e);\n+    }\n+  }\n+\n+}"
  },
  {
    "sha": "006cbc7def26a56277ab3ba046b96b250e85e47c",
    "filename": "src/main/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationService.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationService.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationService.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationService.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -5,7 +5,10 @@\n import static org.apache.commons.lang3.StringUtils.isNotBlank;\n \n import de.caritas.cob.userservice.api.helper.AuthenticatedUser;\n+import de.caritas.cob.userservice.api.repository.user.User;\n import de.caritas.cob.userservice.api.service.LogService;\n+import de.caritas.cob.userservice.api.service.PushMessageService;\n+import de.caritas.cob.userservice.api.service.user.UserService;\n import de.caritas.cob.userservice.liveservice.generated.web.LiveControllerApi;\n import de.caritas.cob.userservice.liveservice.generated.web.model.LiveEventMessage;\n import java.util.List;\n@@ -25,6 +28,8 @@\n   private final @NonNull LiveControllerApi liveControllerApi;\n   private final @NonNull UserIdsProviderFactory userIdsProviderFactory;\n   private final @NonNull AuthenticatedUser authenticatedUser;\n+  private final @NonNull PushMessageService pushMessageService;\n+  private final @NonNull UserService userService;\n \n   /**\n    * Collects all relevant user or consultant ids of chats and sessions and sends a new\n@@ -39,6 +44,7 @@ public void sendLiveDirectMessageEventToUsers(String rcGroupId) {\n           .filter(this::notInitiatingUser)\n           .collect(Collectors.toList());\n       triggerLiveEvent(rcGroupId, userIds);\n+      triggerMobilePushNotification(userIds);\n     }\n   }\n \n@@ -60,4 +66,19 @@ private boolean notInitiatingUser(String userId) {\n     return !userId.equals(this.authenticatedUser.getUserId());\n   }\n \n+  private void triggerMobilePushNotification(List<String> userIds) {\n+    userIds.forEach(this::sendPushNotificationForUser);\n+  }\n+\n+  private void sendPushNotificationForUser(String userId) {\n+    this.userService.getUser(userId)\n+        .ifPresent(this::sendPushNotificationIfUserHasMobileToken);\n+  }\n+\n+  private void sendPushNotificationIfUserHasMobileToken(User user) {\n+    if (isNotBlank(user.getMobileToken())) {\n+      this.pushMessageService.pushNewMessageEvent(user.getMobileToken());\n+    }\n+  }\n+\n }"
  },
  {
    "sha": "54a09886c8564d9fac1504345c6d78b7318b6545",
    "filename": "src/main/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProvider.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProvider.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProvider.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProvider.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -1,7 +1,9 @@\n package de.caritas.cob.userservice.api.service.user;\n \n import static de.caritas.cob.userservice.localdatetime.CustomLocalDateTime.nowInUtc;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n \n+import de.caritas.cob.userservice.api.exception.httpresponses.BadRequestException;\n import de.caritas.cob.userservice.api.exception.httpresponses.ForbiddenException;\n import de.caritas.cob.userservice.api.exception.httpresponses.InternalServerErrorException;\n import de.caritas.cob.userservice.api.helper.AuthenticatedUser;\n@@ -153,4 +155,23 @@ public void deactivateAndFlagUserAccountForDeletion(DeleteUserAccountDTO deleteU\n     user.setDeleteDate(nowInUtc());\n     userService.saveUser(user);\n   }\n+\n+  /**\n+   * Updates or sets the mobile client token of the current authenticated user in database.\n+   *\n+   * @param mobileToken the new mobile device identifier token\n+   */\n+  public void updateUserMobileToken(String mobileToken) {\n+    if (isBlank(mobileToken)) {\n+      throw new BadRequestException(\"Mobile token must not be empty\");\n+    }\n+    this.userService.getUser(this.authenticatedUser.getUserId())\n+        .ifPresent(user -> updateMobileToken(user, mobileToken));\n+  }\n+\n+  private void updateMobileToken(User user, String mobileToken) {\n+    user.setMobileToken(mobileToken);\n+    this.userService.saveUser(user);\n+  }\n+\n }"
  },
  {
    "sha": "c84f2f90c7ccc51d7b10f753dd17c46ddf11ac96",
    "filename": "src/main/java/de/caritas/cob/userservice/config/SecurityConfig.java",
    "status": "modified",
    "additions": 14,
    "deletions": 34,
    "changes": 48,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/config/SecurityConfig.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/config/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/config/SecurityConfig.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -26,13 +26,12 @@\n \n /**\n  * Provides the Keycloak/Spring Security configuration.\n- *\n  */\n @KeycloakConfiguration\n public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {\n \n   public static final String[] WHITE_LIST =\n-      new String[] {\"/users/docs\", \"/users/docs/**\", \"/v2/api-docs\", \"/configuration/ui\",\n+      new String[]{\"/users/docs\", \"/users/docs/**\", \"/v2/api-docs\", \"/configuration/ui\",\n           \"/swagger-resources/**\", \"/configuration/security\", \"/swagger-ui.html\", \"/webjars/**\"};\n \n   @SuppressWarnings(\"unused\")\n@@ -44,11 +43,12 @@\n   @Value(\"${csrf.header.property}\")\n   private String csrfHeaderProperty;\n \n+  @Value(\"${csrf.whitelist.header.property}\")\n+  private String csrfWhitelistHeaderProperty;\n+\n   /**\n    * Processes HTTP requests and checks for a valid spring security authentication for the\n    * (Keycloak) principal (authorization header).\n-   *\n-   * @param keycloakClientRequestFactory\n    */\n   public SecurityConfig(KeycloakClientRequestFactory keycloakClientRequestFactory) {\n     this.keycloakClientRequestFactory = keycloakClientRequestFactory;\n@@ -58,14 +58,13 @@ public SecurityConfig(KeycloakClientRequestFactory keycloakClientRequestFactory)\n    * Configure spring security filter chain: disable default Spring Boot CSRF token behavior and add\n    * custom {@link StatelessCsrfFilter}, set all sessions to be fully stateless, define necessary\n    * Keycloak roles for specific REST API paths\n-   *\n    */\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n     super.configure(http);\n     http.csrf().disable()\n-        .addFilterBefore(new StatelessCsrfFilter(csrfCookieProperty, csrfHeaderProperty),\n-            CsrfFilter.class)\n+        .addFilterBefore(new StatelessCsrfFilter(csrfCookieProperty, csrfHeaderProperty,\n+                csrfWhitelistHeaderProperty), CsrfFilter.class)\n         .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n         .sessionAuthenticationStrategy(sessionAuthenticationStrategy()).and().authorizeRequests()\n         .antMatchers(WHITE_LIST).permitAll().antMatchers(\"/users/askers/new\")\n@@ -76,7 +75,7 @@ protected void configure(HttpSecurity http) throws Exception {\n             \"/users/chat/{chatId:[0-9]+}/leave\")\n         .hasAnyAuthority(Authority.USER_DEFAULT, Authority.CONSULTANT_DEFAULT)\n         .antMatchers(\"/users/sessions/{sessionId:[0-9]+}/enquiry/new\", \"/users/sessions/askers\",\n-            \"/users/askers/consultingType/new\", \"/users/account\")\n+            \"/users/askers/consultingType/new\", \"/users/account\", \"/users/mobiletoken\")\n         .hasAuthority(Authority.USER_DEFAULT)\n         .antMatchers(\"/users/sessions/open\", \"/users/sessions/consultants/new\",\n             \"/users/sessions/new/{sessionId:[0-9]+}\", \"/users/consultants/absences\",\n@@ -91,23 +90,23 @@ protected void configure(HttpSecurity http) throws Exception {\n         .antMatchers(\"/users/consultants/import\", \"/users/askers/import\",\n             \"/users/askersWithoutSession/import\")\n         .hasAuthority(Authority.TECHNICAL_DEFAULT)\n-        .antMatchers(\"/liveproxy/send\").hasAnyAuthority(Authority.USER_DEFAULT, Authority.CONSULTANT_DEFAULT)\n+        .antMatchers(\"/liveproxy/send\")\n+        .hasAnyAuthority(Authority.USER_DEFAULT, Authority.CONSULTANT_DEFAULT)\n         .antMatchers(\"/users/mails/messages/feedback/new\")\n         .hasAuthority(Authority.USE_FEEDBACK).antMatchers(\"/users/messages/key\")\n         .hasAuthority(Authority.TECHNICAL_DEFAULT).antMatchers(\"/users/chat/new\")\n         .hasAuthority(Authority.CREATE_NEW_CHAT).antMatchers(\"/users/chat/{chatId:[0-9]+}/start\")\n         .hasAuthority(Authority.START_CHAT).antMatchers(\"/users/chat/{chatId:[0-9]+}/stop\")\n         .hasAuthority(Authority.STOP_CHAT).antMatchers(\"/users/chat/{chatId:[0-9]+}/update\")\n         .hasAuthority(Authority.UPDATE_CHAT).antMatchers(\"/useradmin\", \"/useradmin/**\")\n-        .hasAuthority(Authority.USER_ADMIN).antMatchers(\"/users/consultants/sessions/{sessionId:[0-9]+}\")\n+        .hasAuthority(Authority.USER_ADMIN)\n+        .antMatchers(\"/users/consultants/sessions/{sessionId:[0-9]+}\")\n         .hasAuthority(Authority.CONSULTANT_DEFAULT).anyRequest().denyAll();\n   }\n \n   /**\n    * Use the KeycloakSpringBootConfigResolver to be able to save the Keycloak settings in the spring\n    * application properties.\n-   *\n-   * @return\n    */\n   @Bean\n   public KeycloakConfigResolver keyCloakConfigResolver() {\n@@ -127,10 +126,6 @@ protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {\n    * Change the default AuthenticationProvider to KeycloakAuthenticationProvider and register it in\n    * the spring security context. Set the GrantedAuthoritiesMapper to map the Keycloak roles to the\n    * granted authorities.\n-   *\n-   * @param auth\n-   * @param authorityMapper\n-   * @throws Exception\n    */\n   @Autowired\n   public void configureGlobal(final AuthenticationManagerBuilder auth,\n@@ -149,9 +144,6 @@ public void configureGlobal(final AuthenticationManagerBuilder auth,\n    * https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/oidc/java/spring-security-adapter.adoc\n    *\n    * {@link package.class#member label}\n-   *\n-   * @param filter\n-   * @return\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean\n@@ -163,11 +155,7 @@ public FilterRegistrationBean keycloakAuthenticationProcessingFilterRegistration\n   }\n \n   /**\n-   * see above:\n-   * {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter)\n-   *\n-   * @param filter\n-   * @return\n+   * see above: {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter)\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean\n@@ -179,11 +167,7 @@ public FilterRegistrationBean keycloakPreAuthActionsFilterRegistrationBean(\n   }\n \n   /**\n-   * see above:\n-   * {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter)\n-   *\n-   * @param filter\n-   * @return\n+   * see above: {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter)\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean\n@@ -195,11 +179,7 @@ public FilterRegistrationBean keycloakAuthenticatedActionsFilterBean(\n   }\n \n   /**\n-   * see above:\n-   * {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter)\n-   *\n-   * @param filter\n-   * @return\n+   * see above: {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter)\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean"
  },
  {
    "sha": "494d40982e0df4a7ad9736276a273c773a87f340",
    "filename": "src/main/java/de/caritas/cob/userservice/filter/StatelessCsrfFilter.java",
    "status": "modified",
    "additions": 38,
    "deletions": 24,
    "changes": 62,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/filter/StatelessCsrfFilter.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/java/de/caritas/cob/userservice/filter/StatelessCsrfFilter.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/java/de/caritas/cob/userservice/filter/StatelessCsrfFilter.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -1,58 +1,54 @@\n package de.caritas.cob.userservice.filter;\n \n import static de.caritas.cob.userservice.config.SecurityConfig.WHITE_LIST;\n+import static java.util.Objects.isNull;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n \n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.web.access.AccessDeniedHandler;\n import org.springframework.security.web.access.AccessDeniedHandlerImpl;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.web.filter.OncePerRequestFilter;\n-import de.caritas.cob.userservice.config.SpringFoxConfig;\n \n /**\n- * This custom filter checks CSRF cookie and header token for equality\n- *\n+ * This custom filter checks CSRF cookie and header token for equality.\n  */\n public class StatelessCsrfFilter extends OncePerRequestFilter {\n \n-  private final RequestMatcher requireCsrfProtectionMatcher = new DefaultRequiresCsrfMatcher();\n+  private final RequestMatcher requireCsrfProtectionMatcher;\n   private final AccessDeniedHandler accessDeniedHandler = new AccessDeniedHandlerImpl();\n   private final String csrfCookieProperty;\n   private final String csrfHeaderProperty;\n \n-  public StatelessCsrfFilter(String cookieProperty, String headerProperty) {\n+  public StatelessCsrfFilter(String cookieProperty, String headerProperty,\n+      String csrfWhitelistHeaderProperty) {\n     this.csrfCookieProperty = cookieProperty;\n     this.csrfHeaderProperty = headerProperty;\n+    this.requireCsrfProtectionMatcher = new DefaultRequiresCsrfMatcher(csrfWhitelistHeaderProperty);\n   }\n \n   @Override\n   protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n       FilterChain filterChain) throws ServletException, IOException {\n \n     if (requireCsrfProtectionMatcher.matches(request)) {\n-      final String csrfTokenValue = request.getHeader(csrfHeaderProperty);\n-      final Cookie[] cookies = request.getCookies();\n+      final String csrfTokenValue = request.getHeader(this.csrfHeaderProperty);\n+      String csrfCookieValue = retrieveCsrfCookieValue(request);\n \n-      String csrfCookieValue = null;\n-      if (cookies != null) {\n-        for (Cookie cookie : cookies) {\n-          if (cookie.getName().equals(csrfCookieProperty)) {\n-            csrfCookieValue = cookie.getValue();\n-          }\n-        }\n-      }\n-\n-      if (csrfTokenValue == null || !csrfTokenValue.equals(csrfCookieValue)) {\n+      if (isNull(csrfTokenValue) || !csrfTokenValue.equals(csrfCookieValue)) {\n         accessDeniedHandler.handle(request, response,\n             new AccessDeniedException(\"Missing or non-matching CSRF-token\"));\n         return;\n@@ -61,21 +57,39 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n     filterChain.doFilter(request, response);\n   }\n \n-  public static final class DefaultRequiresCsrfMatcher implements RequestMatcher {\n+  private String retrieveCsrfCookieValue(HttpServletRequest request) {\n+    final Cookie[] cookies = request.getCookies();\n+    return isNull(cookies) ? null : Stream.of(cookies)\n+        .filter(cookie -> cookie.getName().equals(this.csrfCookieProperty))\n+        .map(Cookie::getValue)\n+        .findFirst()\n+        .orElse(null);\n+  }\n+\n+  @RequiredArgsConstructor\n+  private static final class DefaultRequiresCsrfMatcher implements RequestMatcher {\n     private final Pattern allowedMethods = Pattern.compile(\"^(HEAD|TRACE|OPTIONS)$\");\n+    private final @NonNull String csrfWhitelistHeaderProperty;\n \n     @Override\n     public boolean matches(HttpServletRequest request) {\n+      return !(isWhiteListUrl(request) || isWhiteListHeader(request) || isAllowedMehod(request));\n+    }\n \n-      // Allow specific whitelist items to disable CSRF protection for Swagger UI documentation\n+    private boolean isWhiteListUrl(HttpServletRequest request) {\n       List<String> csrfWhitelist = new ArrayList<>(Arrays.asList(WHITE_LIST));\n       csrfWhitelist.add(\"/useradmin\");\n-      if (csrfWhitelist.parallelStream()\n-          .anyMatch(request.getRequestURI().toLowerCase()::contains)) {\n-        return false;\n-      }\n+      return csrfWhitelist.parallelStream()\n+          .anyMatch(request.getRequestURI().toLowerCase()::contains);\n+    }\n \n-      return !allowedMethods.matcher(request.getMethod()).matches();\n+    private boolean isWhiteListHeader(HttpServletRequest request) {\n+      return isNotBlank(request.getHeader(this.csrfWhitelistHeaderProperty));\n     }\n+\n+    private boolean isAllowedMehod(HttpServletRequest request) {\n+      return allowedMethods.matcher(request.getMethod()).matches();\n+    }\n+\n   }\n }"
  },
  {
    "sha": "efd11f2cb36e24386322fa5e44a5fe518437f8e2",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/application.properties",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/application.properties?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -87,6 +87,11 @@ asker.import.welcome.message.filename.replace.value=[ConsultingType]\n # Consulting type JSON path\n consulting.types.settings.json.path=/consulting-type-settings\n \n+# Firebase credential configuration file path\n+firebase.configuration.push-notifications.enabled=false\n+firebase.configuration.credentials.file.path=/firebase/firebase-credentials.json\n+firebase.configuration.notification.message=Du hast eine neue Nachricht erhalten\n+\n # Cache Configuration\n cache.agencies.configuration.maxEntriesLocalHeap=100\n cache.agencies.configuration.eternal=false\n@@ -107,4 +112,5 @@ thread.executor.threadNamePrefix=UserService-\n \n # CSRF token\n csrf.header.property=\n+csrf.whitelist.header.property=\n csrf.cookie.property="
  },
  {
    "sha": "19bc71a6e34a1101428b23481bd16e0f7c90574a",
    "filename": "src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd\">\n+  <changeSet author=\"COBH-3498\" id=\"COBH-3498_user_mobile_token\">\n+    <sqlFile\n+      path=\"db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user.sql\"\n+      stripComments=\"true\"/>\n+    <rollback>\n+      <sqlFile\n+        path=\"db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user-rollback.sql\"\n+        stripComments=\"true\"/>\n+    </rollback>\n+  </changeSet>\n+</databaseChangeLog>"
  },
  {
    "sha": "b927a79debb8ddf76af595c169e3928f73134fce",
    "filename": "src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user-rollback.sql",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user-rollback.sql",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user-rollback.sql",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user-rollback.sql?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -0,0 +1,2 @@\n+ALTER TABLE `userservice`.`user`\n+DROP `mobile_token`;"
  },
  {
    "sha": "3a70c4a026e25844f61e4f00dc3a2eccf5f7688a",
    "filename": "src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user.sql",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user.sql",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user.sql",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/changeset/0011_add_mobile_token_for_user/add-mobile-token-for-user.sql?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -0,0 +1,2 @@\n+ALTER TABLE `userservice`.`user`\n+ADD `mobile_token` longtext NULL DEFAULT NULL AFTER `update_date`;"
  },
  {
    "sha": "09c00023863d30d7312798d80ae7a3524b613f5e",
    "filename": "src/main/resources/db/changelog/userservice-dev-master.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-dev-master.xml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-dev-master.xml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/userservice-dev-master.xml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -16,4 +16,5 @@\n \t<include file=\"db/changelog/changeset/0008_chat_extension/0008_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0009_delete_timestamp_for_user_consultant/0009_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0010_delete_timestamp_for_consultant_agency/0010_changeSet.xml\"/>\n+\t<include file=\"db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml\"/>\n </databaseChangeLog>"
  },
  {
    "sha": "bb0bf312c959a55994e369ba6d81add0165db27f",
    "filename": "src/main/resources/db/changelog/userservice-local-master.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-local-master.xml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-local-master.xml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/userservice-local-master.xml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -16,4 +16,5 @@\n \t<include file=\"db/changelog/changeset/0008_chat_extension/0008_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0009_delete_timestamp_for_user_consultant/0009_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0010_delete_timestamp_for_consultant_agency/0010_changeSet.xml\"/>\n+\t<include file=\"db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml\"/>\n </databaseChangeLog>"
  },
  {
    "sha": "ebac3b0f7a34e46b7c71812d9c528ede3df4240a",
    "filename": "src/main/resources/db/changelog/userservice-prod-master.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-prod-master.xml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-prod-master.xml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/userservice-prod-master.xml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -14,4 +14,5 @@\n \t<include file=\"db/changelog/changeset/0008_chat_extension/0008_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0009_delete_timestamp_for_user_consultant/0009_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0010_delete_timestamp_for_consultant_agency/0010_changeSet.xml\"/>\n+\t<include file=\"db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml\"/>\n </databaseChangeLog>"
  },
  {
    "sha": "de29e523078412e89146890cfc865b7557fcd53e",
    "filename": "src/main/resources/db/changelog/userservice-staging-master.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-staging-master.xml",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/main/resources/db/changelog/userservice-staging-master.xml",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/main/resources/db/changelog/userservice-staging-master.xml?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -14,4 +14,5 @@\n \t<include file=\"db/changelog/changeset/0008_chat_extension/0008_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0009_delete_timestamp_for_user_consultant/0009_changeSet.xml\"/>\n \t<include file=\"db/changelog/changeset/0010_delete_timestamp_for_consultant_agency/0010_changeSet.xml\"/>\n+\t<include file=\"db/changelog/changeset/0011_add_mobile_token_for_user/0011_changeSet.xml\"/>\n </databaseChangeLog>"
  },
  {
    "sha": "e79e8af6bfe83d4a3750ae09ea70b394af6ba240",
    "filename": "src/test/java/de/caritas/cob/userservice/api/controller/UserControllerAuthorizationIT.java",
    "status": "modified",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/controller/UserControllerAuthorizationIT.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/controller/UserControllerAuthorizationIT.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/api/controller/UserControllerAuthorizationIT.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -29,6 +29,7 @@\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_LEAVE_CHAT;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_CHAT;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_EMAIL;\n+import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_MOBILE_TOKEN;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_MONITORING;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_PASSWORD;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_UPDATE_KEY;\n@@ -1748,4 +1749,65 @@ public void deactivateAndFlagUserAccountForDeletion_Should_ReturnOK_WhenProperly\n         .accept(MediaType.APPLICATION_JSON))\n         .andExpect(status().isOk());\n   }\n+\n+  @Test\n+  public void updateMobileToken_Should_ReturnUnauthorizedAndCallNoMethods_WhenNoKeycloakAuthorization()\n+      throws Exception {\n+\n+    mvc.perform(put(PATH_PUT_UPDATE_MOBILE_TOKEN)\n+        .cookie(csrfCookie)\n+        .header(CSRF_HEADER, CSRF_VALUE)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isUnauthorized());\n+\n+    verifyNoMoreInteractions(validatedUserAccountProvider);\n+  }\n+\n+  @Test\n+  @WithMockUser(authorities = {Authority.ASSIGN_CONSULTANT_TO_SESSION,\n+      Authority.ASSIGN_CONSULTANT_TO_ENQUIRY, Authority.USE_FEEDBACK, Authority.TECHNICAL_DEFAULT,\n+      Authority.VIEW_AGENCY_CONSULTANTS, Authority.VIEW_ALL_PEER_SESSIONS,\n+      Authority.CREATE_NEW_CHAT, Authority.START_CHAT, Authority.STOP_CHAT,\n+      Authority.VIEW_ALL_FEEDBACK_SESSIONS, Authority.ASSIGN_CONSULTANT_TO_SESSION,\n+      Authority.ASSIGN_CONSULTANT_TO_ENQUIRY, Authority.USER_ADMIN})\n+  public void updateMobileToken_Should_ReturnForbiddenAndCallNoMethods_WhenNoUserOrConsultantAuthority()\n+      throws Exception {\n+\n+    mvc.perform(put(PATH_PUT_UPDATE_MOBILE_TOKEN)\n+        .cookie(csrfCookie)\n+        .header(CSRF_HEADER, CSRF_VALUE)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isForbidden());\n+\n+    verifyNoMoreInteractions(validatedUserAccountProvider);\n+  }\n+\n+  @Test\n+  @WithMockUser(authorities = {Authority.USER_DEFAULT})\n+  public void updateMobileToken_Should_ReturnForbiddenAndCallNoMethods_WhenNoCsrfToken() throws Exception {\n+\n+    mvc.perform(put(PATH_PUT_UPDATE_MOBILE_TOKEN)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isForbidden());\n+\n+    verifyNoMoreInteractions(validatedUserAccountProvider);\n+  }\n+\n+  @Test\n+  @WithMockUser(authorities = {Authority.USER_DEFAULT})\n+  public void updateMobileToken_Should_ReturnOK_WhenProperlyAuthorizedWithUpdateChatAuthority()\n+      throws Exception {\n+\n+    mvc.perform(put(PATH_PUT_UPDATE_MOBILE_TOKEN)\n+        .cookie(csrfCookie)\n+        .header(CSRF_HEADER, CSRF_VALUE)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .content(\"token\")\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isOk());\n+  }\n+\n }"
  },
  {
    "sha": "0eb20d26ffb0d6749763638a41153d77aacbbf01",
    "filename": "src/test/java/de/caritas/cob/userservice/api/controller/UserControllerIT.java",
    "status": "modified",
    "additions": 55,
    "deletions": 18,
    "changes": 73,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/controller/UserControllerIT.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/controller/UserControllerIT.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/api/controller/UserControllerIT.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -41,6 +41,7 @@\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_CHAT;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_CHAT_INVALID_PATH_PARAMS;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_EMAIL;\n+import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_MOBILE_TOKEN;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_PUT_UPDATE_PASSWORD;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_REGISTER_USER;\n import static de.caritas.cob.userservice.testHelper.PathConstants.PATH_SEND_NEW_MESSAGE_NOTIFICATION;\n@@ -406,11 +407,14 @@\n   @MockBean\n   private UserService userService;\n \n-  @Mock private Logger logger;\n+  @Mock\n+  private Logger logger;\n \n-  @Mock private Chat chat;\n+  @Mock\n+  private Chat chat;\n \n-  @Before public void setUp() {\n+  @Before\n+  public void setUp() {\n     HashMap<String, Object> drugsMap = new HashMap<>();\n     drugsMap.put(\"others\", false);\n     HashMap<String, Object> addictiveDrugsMap = new HashMap<>();\n@@ -962,7 +966,8 @@ public void getSessionsForAuthenticatedUser_Should_ReturnBadRequest_WhenHeaderPa\n         .andExpect(status().isBadRequest());\n   }\n \n-  @Test public void updateAbsence_Should_ReturnOk_When_Saved() throws Exception {\n+  @Test\n+  public void updateAbsence_Should_ReturnOk_When_Saved() throws Exception {\n \n     when(authenticatedUser.getUserId()).thenReturn(CONSULTANT_ID);\n     when(accountProvider.retrieveValidatedTeamConsultant()).thenReturn(TEAM_CONSULTANT);\n@@ -972,7 +977,8 @@ public void getSessionsForAuthenticatedUser_Should_ReturnBadRequest_WhenHeaderPa\n         .andExpect(status().isOk());\n   }\n \n-  @Test public void updateAbsence_Should_ReturnBadRequest_When_RequestBodyIsMissing()\n+  @Test\n+  public void updateAbsence_Should_ReturnBadRequest_When_RequestBodyIsMissing()\n       throws Exception {\n     mvc.perform(put(PATH_PUT_CONSULTANT_ABSENT).contentType(MediaType.APPLICATION_JSON)\n         .accept(MediaType.APPLICATION_JSON))\n@@ -1780,7 +1786,8 @@ public void registerUser_Should_DecodePassword() throws Exception {\n    * updatePassword()\n    */\n \n-  @Test public void updatePassword_Should_ReturnBadRequest_When_PasswordsAreMissing()\n+  @Test\n+  public void updatePassword_Should_ReturnBadRequest_When_PasswordsAreMissing()\n       throws Exception {\n \n     mvc.perform(put(PATH_PUT_UPDATE_PASSWORD).contentType(MediaType.APPLICATION_JSON)\n@@ -1789,7 +1796,8 @@ public void registerUser_Should_DecodePassword() throws Exception {\n     verify(keycloakService, times(0)).changePassword(anyString(), anyString());\n   }\n \n-  @Test public void updatePassword_Should_ReturnOK_When_UpdatingThePasswordWasSuccessful()\n+  @Test\n+  public void updatePassword_Should_ReturnOK_When_UpdatingThePasswordWasSuccessful()\n       throws Exception {\n     mvc.perform(put(PATH_PUT_UPDATE_PASSWORD).content(VALID_PASSWORT_REQUEST_BODY)\n         .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))\n@@ -2136,7 +2144,6 @@ private String convertObjectToJson(Object object) throws JsonProcessingException\n \n   @Test\n   public void updateEmailAddress_Should_ReturnOk_When_RequestOk() throws Exception {\n-\n     mvc.perform(put(PATH_PUT_UPDATE_EMAIL)\n         .contentType(MediaType.APPLICATION_JSON)\n         .content(\"email\")\n@@ -2146,33 +2153,63 @@ public void updateEmailAddress_Should_ReturnOk_When_RequestOk() throws Exception\n     verify(accountProvider, times(1)).changeUserAccountEmailAddress(\"email\");\n   }\n \n-  @Test public void updateEmailAddress_Should_ReturnBadRequest_When_bodyIsEmpty() throws Exception {\n-\n-    mvc.perform(put(PATH_PUT_UPDATE_EMAIL).contentType(MediaType.APPLICATION_JSON)\n-        .accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest());\n+  @Test\n+  public void updateEmailAddress_Should_ReturnBadRequest_When_bodyIsEmpty() throws Exception {\n+    mvc.perform(put(PATH_PUT_UPDATE_EMAIL)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isBadRequest());\n \n     verifyNoMoreInteractions(accountProvider);\n   }\n \n-  @Test public void deactivateAndFlagUserAccountForDeletion_Should_ReturnOk_When_RequestOk()\n+  @Test\n+  public void deactivateAndFlagUserAccountForDeletion_Should_ReturnOk_When_RequestOk()\n       throws Exception {\n \n     DeleteUserAccountDTO deleteUserAccountDTO = new DeleteUserAccountDTO().password(\"p@ssword\");\n     String bodyPayload = new ObjectMapper().writeValueAsString(deleteUserAccountDTO);\n \n-    mvc.perform(delete(PATH_DELETE_FLAG_USER_DELETED).contentType(MediaType.APPLICATION_JSON)\n-        .content(bodyPayload).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk());\n+    mvc.perform(delete(PATH_DELETE_FLAG_USER_DELETED)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .content(bodyPayload)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isOk());\n \n     verify(accountProvider, times(1)).deactivateAndFlagUserAccountForDeletion(deleteUserAccountDTO);\n   }\n \n-  @Test public void deactivateAndFlagUserAccountForDeletion_Should_ReturnBadRequest_When_BodyValuesAreMissing()\n+  @Test\n+  public void deactivateAndFlagUserAccountForDeletion_Should_ReturnBadRequest_When_BodyValuesAreMissing()\n       throws Exception {\n \n-    mvc.perform(delete(PATH_DELETE_FLAG_USER_DELETED).contentType(MediaType.APPLICATION_JSON)\n-        .accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest());\n+    mvc.perform(delete(PATH_DELETE_FLAG_USER_DELETED)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isBadRequest());\n \n     verifyNoMoreInteractions(keycloakService);\n   }\n \n+  @Test\n+  public void updateMobileToken_Should_ReturnOk_When_RequestOk() throws Exception {\n+    mvc.perform(put(PATH_PUT_UPDATE_MOBILE_TOKEN)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .content(\"AksagAosagZZZ\")\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isOk());\n+\n+    verify(accountProvider, times(1)).updateUserMobileToken(\"AksagAosagZZZ\");\n+  }\n+\n+  @Test\n+  public void updateMobileToken_Should_ReturnBadRequest_When_bodyIsEmpty() throws Exception {\n+    mvc.perform(put(PATH_PUT_UPDATE_MOBILE_TOKEN)\n+        .contentType(MediaType.APPLICATION_JSON)\n+        .accept(MediaType.APPLICATION_JSON))\n+        .andExpect(status().isBadRequest());\n+\n+    verifyNoMoreInteractions(accountProvider);\n+  }\n+\n }"
  },
  {
    "sha": "9c0e365329cf6e85a4675bfef129d00c7ea6f865",
    "filename": "src/test/java/de/caritas/cob/userservice/api/facade/CreateEnquiryMessageFacadeTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/facade/CreateEnquiryMessageFacadeTest.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/facade/CreateEnquiryMessageFacadeTest.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/api/facade/CreateEnquiryMessageFacadeTest.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -180,7 +180,7 @@ public void setUp() throws NoSuchFieldException, SecurityException {\n     consultant.setId(USER_ID);\n     consultant.setRocketChatId(RC_USER_ID);\n     this.user = new User(USER_ID, null, USERNAME, EMAIL, RC_USER_ID, IS_LANGUAGE_FORMAL, null,\n-        null, null);\n+        null, null, null);\n     this.consultingTypeSettings = new ConsultingTypeSettings();\n     this.userInfoResponseDTO = new UserInfoResponseDTO();\n     this.rocketChatUserDTO = new RocketChatUserDTO();"
  },
  {
    "sha": "b25e24b61d93b6804ab864346fdd424a2d87ed38",
    "filename": "src/test/java/de/caritas/cob/userservice/api/service/PushMessageServiceTest.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/service/PushMessageServiceTest.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/service/PushMessageServiceTest.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/api/service/PushMessageServiceTest.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -0,0 +1,89 @@\n+package de.caritas.cob.userservice.api.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.reflect.Whitebox.setInternalState;\n+import static org.springframework.test.util.ReflectionTestUtils.getField;\n+import static org.springframework.test.util.ReflectionTestUtils.setField;\n+\n+import com.google.firebase.messaging.FirebaseMessaging;\n+import com.google.firebase.messaging.FirebaseMessagingException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PushMessageServiceTest {\n+\n+  @InjectMocks\n+  private PushMessageService pushMessageService;\n+\n+  @Mock\n+  private FirebaseMessaging firebaseMessaging;\n+\n+  @Mock\n+  private Logger logger;\n+\n+  @Before\n+  public void setup() {\n+    setField(pushMessageService, \"firebaseMessaging\", firebaseMessaging);\n+    setInternalState(LogService.class, \"LOGGER\", logger);\n+  }\n+\n+  @Test\n+  public void initializeFirebase_Should_notInitialiteFirebaseMessaging_When_firebaseIsDisabled() {\n+    setField(this.pushMessageService, \"isEnabled\", false);\n+\n+    assertDoesNotThrow(() -> this.pushMessageService.initializeFirebase());\n+\n+    Object firebaseMessaging = getField(pushMessageService, \"firebaseMessaging\");\n+    verify(this.logger, times(1)).info(\"Firebase push notifications are disabled\");\n+  }\n+\n+  @Test(expected = Exception.class)\n+  public void initializeFirebase_Should_throwException_When_configurationCanNotBeLoaded() {\n+    setField(this.pushMessageService, \"isEnabled\", true);\n+    this.pushMessageService.initializeFirebase();\n+  }\n+\n+  @Test\n+  public void pushMessage_Should_pushFirebaseMessage() throws FirebaseMessagingException {\n+    setField(this.pushMessageService, \"isEnabled\", true);\n+\n+    this.pushMessageService.pushNewMessageEvent(\"registrationToken\");\n+\n+    verify(this.firebaseMessaging, times(1)).send(any());\n+    verifyNoMoreInteractions(logger);\n+  }\n+\n+  @Test\n+  public void pushMessage_Should_logWarning_When_sendFails() throws FirebaseMessagingException {\n+    setField(this.pushMessageService, \"isEnabled\", true);\n+    FirebaseMessagingException exception = mock(FirebaseMessagingException.class);\n+    when(this.firebaseMessaging.send(any())).thenThrow(exception);\n+\n+    this.pushMessageService.pushNewMessageEvent(\"registrationToken\");\n+\n+    verify(logger, times(1)).warn(anyString());\n+  }\n+\n+  @Test\n+  public void pushMessage_Should_notSendNotification_When_firebaseIsDisabled() throws FirebaseMessagingException {\n+    setField(this.pushMessageService, \"isEnabled\", false);\n+\n+    this.pushMessageService.pushNewMessageEvent(\"registrationToken\");\n+\n+    verifyNoMoreInteractions(this.firebaseMessaging);\n+  }\n+\n+}"
  },
  {
    "sha": "f253f05b3dcab1c7c8b587fa606dc70b3e70d2a8",
    "filename": "src/test/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationServiceTest.java",
    "status": "modified",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationServiceTest.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationServiceTest.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/api/service/liveevents/LiveEventNotificationServiceTest.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -3,6 +3,7 @@\n \n import static de.caritas.cob.userservice.liveservice.generated.web.model.EventType.DIRECTMESSAGE;\n import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n import static java.util.Collections.singletonList;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n@@ -15,10 +16,14 @@\n import static org.powermock.reflect.Whitebox.setInternalState;\n \n import de.caritas.cob.userservice.api.helper.AuthenticatedUser;\n+import de.caritas.cob.userservice.api.repository.user.User;\n import de.caritas.cob.userservice.api.service.LogService;\n+import de.caritas.cob.userservice.api.service.PushMessageService;\n+import de.caritas.cob.userservice.api.service.user.UserService;\n import de.caritas.cob.userservice.liveservice.generated.web.LiveControllerApi;\n import de.caritas.cob.userservice.liveservice.generated.web.model.LiveEventMessage;\n import java.util.List;\n+import java.util.Optional;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -51,6 +56,12 @@\n   @Mock\n   private AuthenticatedUser authenticatedUser;\n \n+  @Mock\n+  private UserService userService;\n+\n+  @Mock\n+  private PushMessageService pushMessageService;\n+\n   @Mock\n   private Logger logger;\n \n@@ -77,6 +88,7 @@ public void sendLiveDirectMessageEventToUsers_Should_doNothing_When_rcGroupIdIsE\n \n     verifyNoInteractions(userIdsProviderFactory);\n     verifyNoInteractions(liveControllerApi);\n+    verifyNoInteractions(pushMessageService);\n   }\n \n   @Test\n@@ -135,4 +147,52 @@ public void sendLiveDirectMessageEventToUsers_Should_sendEventToAllUsers_When_in\n         eq(MESSAGE));\n   }\n \n+  @Test\n+  public void sendLiveDirectMessageEventToUsers_Should_sendPushMessage_When_usersHaveMobileToken() {\n+    User user = new User();\n+    user.setMobileToken(\"mobileToken\");\n+    when(this.bySessionProvider.collectUserIds(any())).thenReturn(asList(\"1\", \"2\"));\n+    when(this.userIdsProviderFactory.byRocketChatGroup(any())).thenReturn(bySessionProvider);\n+    when(this.userService.getUser(anyString())).thenReturn(Optional.of(user));\n+\n+    this.liveEventNotificationService.sendLiveDirectMessageEventToUsers(\"valid\");\n+\n+    verify(this.pushMessageService, times(2)).pushNewMessageEvent(\"mobileToken\");\n+  }\n+\n+  @Test\n+  public void sendLiveDirectMessageEventToUsers_Should_sendPushMessageOnlyToUsersWithMobileToken() {\n+    User user = new User();\n+    user.setMobileToken(\"mobileToken\");\n+    when(this.bySessionProvider.collectUserIds(any())).thenReturn(asList(\"1\", \"2\"));\n+    when(this.userIdsProviderFactory.byRocketChatGroup(any())).thenReturn(bySessionProvider);\n+    when(this.userService.getUser(eq(\"1\"))).thenReturn(Optional.of(user));\n+    when(this.userService.getUser(eq(\"2\"))).thenReturn(Optional.of(new User()));\n+\n+    this.liveEventNotificationService.sendLiveDirectMessageEventToUsers(\"valid\");\n+\n+    verify(this.pushMessageService, times(1)).pushNewMessageEvent(\"mobileToken\");\n+  }\n+\n+  @Test\n+  public void sendLiveDirectMessageEventToUsers_Should_notSendPushMessage_When_noUserHasMobileToken() {\n+    when(this.bySessionProvider.collectUserIds(any())).thenReturn(asList(\"1\", \"2\"));\n+    when(this.userIdsProviderFactory.byRocketChatGroup(any())).thenReturn(bySessionProvider);\n+    when(this.userService.getUser(any())).thenReturn(Optional.of(new User()));\n+\n+    this.liveEventNotificationService.sendLiveDirectMessageEventToUsers(\"valid\");\n+\n+    verifyNoInteractions(this.pushMessageService);\n+  }\n+\n+  @Test\n+  public void sendLiveDirectMessageEventToUsers_Should_notSendPushMessage_When_userIdsAreEmpty() {\n+    when(this.bySessionProvider.collectUserIds(any())).thenReturn(emptyList());\n+    when(this.userIdsProviderFactory.byRocketChatGroup(any())).thenReturn(bySessionProvider);\n+\n+    this.liveEventNotificationService.sendLiveDirectMessageEventToUsers(\"valid\");\n+\n+    verifyNoInteractions(this.pushMessageService);\n+  }\n+\n }"
  },
  {
    "sha": "ba36da7dd8af0d1174080b2f2237d2a945d97cd0",
    "filename": "src/test/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProviderTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 14,
    "changes": 43,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProviderTest.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProviderTest.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/api/service/user/ValidatedUserAccountProviderTest.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -74,8 +74,7 @@ public void retrieveValidatedUser_Should_ReturnUser_When_UserIsPresent() {\n   }\n \n   @Test(expected = InternalServerErrorException.class)\n-  public void\n-      retrieveValidatedUser_Should_Throw_InternalServerErrorException_When_UserIsNotPresent() {\n+  public void retrieveValidatedUser_Should_Throw_InternalServerErrorException_When_UserIsNotPresent() {\n     when(userService.getUser(any())).thenReturn(Optional.empty());\n \n     this.accountProvider.retrieveValidatedUser();\n@@ -92,16 +91,14 @@ public void retrieveValidatedConsultant_Should_ReturnConsultant_When_ConsultantI\n   }\n \n   @Test(expected = InternalServerErrorException.class)\n-  public void\n-      retrieveValidatedConsultant_Should_Throw_InternalServerErrorException_When_ConsultantIsNotPresent() {\n+  public void retrieveValidatedConsultant_Should_Throw_InternalServerErrorException_When_ConsultantIsNotPresent() {\n     when(consultantService.getConsultant(any())).thenReturn(Optional.empty());\n \n     this.accountProvider.retrieveValidatedConsultant();\n   }\n \n   @Test\n-  public void\n-      retrieveValidatedTeamConsultant_Should_ReturnTeamConsultant_When_TeamConsultantIsPresent() {\n+  public void retrieveValidatedTeamConsultant_Should_ReturnTeamConsultant_When_TeamConsultantIsPresent() {\n     Consultant teamConsultantMock = mock(Consultant.class);\n     when(teamConsultantMock.isTeamConsultant()).thenReturn(true);\n     when(consultantService.getConsultant(any())).thenReturn(Optional.of(teamConsultantMock));\n@@ -112,17 +109,15 @@ public void retrieveValidatedConsultant_Should_ReturnConsultant_When_ConsultantI\n   }\n \n   @Test(expected = ForbiddenException.class)\n-  public void\n-      retrieveValidatedTeamConsultant_Should_Throw_ForbiddenException_When_ConsultantIsNotATeamConsultant() {\n+  public void retrieveValidatedTeamConsultant_Should_Throw_ForbiddenException_When_ConsultantIsNotATeamConsultant() {\n     Consultant consultantMock = mock(Consultant.class);\n     when(consultantService.getConsultant(any())).thenReturn(Optional.of(consultantMock));\n \n     this.accountProvider.retrieveValidatedTeamConsultant();\n   }\n \n   @Test\n-  public void\n-      changeUserAccountEmailAddress_Should_changeAddressInKeycloakRocketChatAndConsultantRepository_When_authenticatedUserIsConsultant() {\n+  public void changeUserAccountEmailAddress_Should_changeAddressInKeycloakRocketChatAndConsultantRepository_When_authenticatedUserIsConsultant() {\n     Consultant consultant = new EasyRandom().nextObject(Consultant.class);\n     when(this.authenticatedUser.getUserId()).thenReturn(\"consultant\");\n     when(this.consultantService.getConsultant(\"consultant\")).thenReturn(Optional.of(consultant));\n@@ -143,8 +138,7 @@ public void retrieveValidatedConsultant_Should_ReturnConsultant_When_ConsultantI\n   }\n \n   @Test\n-  public void\n-      changeUserAccountEmailAddress_Should_changeAddressInKeycloakRocketChatAndUserRepository_When_authenticatedUserIsUser() {\n+  public void changeUserAccountEmailAddress_Should_changeAddressInKeycloakRocketChatAndUserRepository_When_authenticatedUserIsUser() {\n     User user = new EasyRandom().nextObject(User.class);\n     when(this.authenticatedUser.getUserId()).thenReturn(\"user\");\n     when(this.userService.getUser(\"user\")).thenReturn(Optional.of(user));\n@@ -164,8 +158,7 @@ public void retrieveValidatedConsultant_Should_ReturnConsultant_When_ConsultantI\n   }\n \n   @Test(expected = InternalServerErrorException.class)\n-  public void\n-      changePassword_Should_ThrowInternalServerErrorException_When_KeycloakPwChangeCallFails() {\n+  public void changePassword_Should_ThrowInternalServerErrorException_When_KeycloakPwChangeCallFails() {\n     PasswordDTO passwordDTO = new EasyRandom().nextObject(PasswordDTO.class);\n \n     this.accountProvider.changePassword(passwordDTO);\n@@ -212,4 +205,26 @@ public void deactivateAndFlagUserAccountForDeletion_Should_DeactivateKeycloakAcc\n     verify(userService, times(1)).saveUser(captor.capture());\n     assertNotNull(captor.getValue().getDeleteDate());\n   }\n+\n+  @Test\n+  public void updateUserMobileToken_Should_updateUsersMobileToken_When_mobileTokenIsValidString() {\n+    when(authenticatedUser.getUserId()).thenReturn(USER_ID);\n+    when(userService.getUser(USER_ID)).thenReturn(Optional.of(USER));\n+\n+    this.accountProvider.updateUserMobileToken(\"mobileToken\");\n+\n+    ArgumentCaptor<User> captor = ArgumentCaptor.forClass(User.class);\n+    verify(this.userService, times(1)).saveUser(captor.capture());\n+    assertThat(captor.getValue().getMobileToken(), is(\"mobileToken\"));\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void updateUserMobileToken_Should_throwBadRequestException_When_mobileTokenIsNull() {\n+    this.accountProvider.updateUserMobileToken(null);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void updateUserMobileToken_Should_throwBadRequestException_When_mobileTokenIsEmptyString() {\n+    this.accountProvider.updateUserMobileToken(\"\");\n+  }\n }"
  },
  {
    "sha": "0fcf328cce4a6c836226bc3b7a44f57cdca18206",
    "filename": "src/test/java/de/caritas/cob/userservice/filter/StatelessCsrfFilterTest.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/filter/StatelessCsrfFilterTest.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/filter/StatelessCsrfFilterTest.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/filter/StatelessCsrfFilterTest.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -0,0 +1,138 @@\n+package de.caritas.cob.userservice.filter;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.util.ReflectionTestUtils.setField;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.security.web.access.AccessDeniedHandler;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class StatelessCsrfFilterTest {\n+\n+  private static final String CSRF_HEADER = \"csrfHeader\";\n+  private static final String CSRF_COOKIE = \"csrfCookie\";\n+  private static final String CSRF_WHITELIST_COOKIE = \"csrfWhitelistHeader\";\n+\n+  private final StatelessCsrfFilter csrfFilter = new StatelessCsrfFilter(CSRF_COOKIE, CSRF_HEADER,\n+      CSRF_WHITELIST_COOKIE);\n+\n+  @Mock\n+  private HttpServletRequest request;\n+\n+  @Mock\n+  private HttpServletResponse response;\n+\n+  @Mock\n+  private FilterChain filterChain;\n+\n+  @Mock\n+  private AccessDeniedHandler accessDeniedHandler;\n+\n+  @Before\n+  public void setup() {\n+    setField(csrfFilter, \"accessDeniedHandler\", accessDeniedHandler);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestMethodIsAllowed()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"OPTIONS\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestUriIsWhitlisted()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"/useradmin\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestHasCsrfWhitelistHeader()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getHeader(CSRF_WHITELIST_COOKIE)).thenReturn(\"whitelisted\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestCsrfHeaderAndCookieAreEqual()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    when(request.getHeader(CSRF_HEADER)).thenReturn(\"csrfTokenValue\");\n+    Cookie[] cookies = {new Cookie(CSRF_COOKIE, \"csrfTokenValue\")};\n+    when(request.getCookies()).thenReturn(cookies);\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_callAccessDeniedHandler_When_csrfHeaderIsNull()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    Cookie[] cookies = {new Cookie(CSRF_COOKIE, \"csrfTokenValue\")};\n+    when(request.getCookies()).thenReturn(cookies);\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.accessDeniedHandler, times(1)).handle(any(), any(), any());\n+    verifyNoMoreInteractions(this.filterChain);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_callAccessDeniedHandler_When_cookiesAreNull()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    when(request.getHeader(CSRF_HEADER)).thenReturn(\"csrfHeaderTokenValue\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.accessDeniedHandler, times(1)).handle(any(), any(), any());\n+    verifyNoMoreInteractions(this.filterChain);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_callAccessDeniedHandler_When_csrfHeaderIsNotEqualToCookieToken()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    when(request.getHeader(CSRF_HEADER)).thenReturn(\"csrfHeaderTokenValue\");\n+    Cookie[] cookies = {new Cookie(CSRF_COOKIE, \"csrfCookieTokenValue\")};\n+    when(request.getCookies()).thenReturn(cookies);\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.accessDeniedHandler, times(1)).handle(any(), any(), any());\n+    verifyNoMoreInteractions(this.filterChain);\n+  }\n+\n+}"
  },
  {
    "sha": "4ad1667ecef8105336b2c9467c8ce65448a2b196",
    "filename": "src/test/java/de/caritas/cob/userservice/testHelper/PathConstants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/testHelper/PathConstants.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/testHelper/PathConstants.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/testHelper/PathConstants.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -86,4 +86,5 @@\n       \"/users/consultants/sessions/1\";\n   public static final String PATH_PUT_UPDATE_EMAIL = \"/users/email\";\n   public static final String PATH_DELETE_FLAG_USER_DELETED = \"/users/account\";\n+  public static final String PATH_PUT_UPDATE_MOBILE_TOKEN = \"/users/mobiletoken\";\n }"
  },
  {
    "sha": "4fc0dcc4eb8af23bdc6953699cff159e5120acc8",
    "filename": "src/test/java/de/caritas/cob/userservice/testHelper/TestConstants.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/testHelper/TestConstants.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/java/de/caritas/cob/userservice/testHelper/TestConstants.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/java/de/caritas/cob/userservice/testHelper/TestConstants.java?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -346,11 +346,12 @@\n       GROUP_MEMBER_SYS_USER, GROUP_MEMBER_TECH_USER, GROUP_MEMBER_USER_1, GROUP_MEMBER_USER_2);\n   public static final User USER = new User(USER_ID, null, USERNAME, EMAIL, IS_LANGUAGE_FORMAL);\n   public static final User USER_WITH_RC_ID =\n-      new User(USER_ID, null, USERNAME, EMAIL, RC_USER_ID, IS_LANGUAGE_FORMAL, null, null, null);\n+      new User(USER_ID, null, USERNAME, EMAIL, RC_USER_ID, IS_LANGUAGE_FORMAL, null, null, null,\n+          null);\n   public static final User USER_NO_RC_USER_ID =\n-      new User(USER_ID, null, USERNAME, EMAIL, null, false, null, null, null);\n+      new User(USER_ID, null, USERNAME, EMAIL, null, false, null, null, null, null);\n   public static final User USER_NO_RC_USER_ID_2 =\n-      new User(USER_ID_2, null, USERNAME, EMAIL, null, false, null, null, null);\n+      new User(USER_ID_2, null, USERNAME, EMAIL, null, false, null, null, null, null);\n   public static final String ACCESS_TOKEN = \"DASDLAJS835u83hKSAJDF\";\n   public static final AuthenticatedUser AUTHENTICATED_USER =\n       new AuthenticatedUser(USER_ID, USERNAME, null, ACCESS_TOKEN, null);\n@@ -492,7 +493,7 @@\n       Arrays.asList(U25_SESSION_WITHOUT_CONSULTANT, SESSION_WITHOUT_CONSULTANT_NO_RC_USER_ID));\n   public static final User USER_WITH_SESSIONS =\n       new User(USER_ID, null, USERNAME, EMAIL, RC_USER_ID, IS_LANGUAGE_FORMAL, SESSION_SET, null,\n-          null);\n+          null, null);\n   public static final SessionDTO SESSION_DTO_SUCHT = new SessionDTO()\n       .id(SESSION_ID)\n       .agencyId(AGENCY_ID)"
  },
  {
    "sha": "28d8cb14df5d316d192c09996b685bb5c2b86189",
    "filename": "src/test/resources/database/UserServiceDatabase.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/blob/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/resources/database/UserServiceDatabase.sql",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-userService/raw/c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a/src/test/resources/database/UserServiceDatabase.sql",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-userService/contents/src/test/resources/database/UserServiceDatabase.sql?ref=c6d4cb90d22cccbbe8faaa9b97a1d9618e92042a",
    "patch": "@@ -9,6 +9,7 @@ CREATE TABLE USER\n     CREATE_DATE     datetime,\n     UPDATE_DATE     datetime,\n     DELETE_DATE     datetime,\n+    MOBILE_TOKEN    longtext DEFAULT NULL,\n     PRIMARY KEY (USER_ID)\n );\n CREATE SEQUENCE SEQUENCE_USER"
  }
]
