[
  {
    "sha": "6a2d0b58b151cb8916a12f389271e71fc59abab3",
    "filename": "src/main/java/de/caritas/cob/messageservice/config/SecurityConfig.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/blob/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/main/java/de/caritas/cob/messageservice/config/SecurityConfig.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/raw/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/main/java/de/caritas/cob/messageservice/config/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-messageService/contents/src/main/java/de/caritas/cob/messageservice/config/SecurityConfig.java?ref=0034f53c27dc70d85f8112a797781c2b6b0341a9",
    "patch": "@@ -39,6 +39,9 @@\n   @Value(\"${csrf.header.property}\")\n   private String csrfHeaderProperty;\n \n+  @Value(\"${csrf.whitelist.header.property}\")\n+  private String csrfWhitelistHeaderProperty;\n+\n   /**\n    * Processes HTTP requests and checks for a valid spring security authentication for the\n    * (Keycloak) principal (authorization header).\n@@ -56,8 +59,8 @@ public SecurityConfig(KeycloakClientRequestFactory keycloakClientRequestFactory)\n   protected void configure(HttpSecurity http) throws Exception {\n     super.configure(http);\n     http.csrf().disable()\n-        .addFilterBefore(new StatelessCsrfFilter(csrfCookieProperty, csrfHeaderProperty),\n-            CsrfFilter.class)\n+        .addFilterBefore(new StatelessCsrfFilter(csrfCookieProperty, csrfHeaderProperty,\n+                csrfWhitelistHeaderProperty), CsrfFilter.class)\n         .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n         .sessionAuthenticationStrategy(sessionAuthenticationStrategy()).and().authorizeRequests()\n         .antMatchers(SpringFoxConfig.WHITE_LIST).permitAll()\n@@ -127,8 +130,7 @@ public FilterRegistrationBean keycloakAuthenticationProcessingFilterRegistration\n   }\n \n   /**\n-   * see above:\n-   * {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter).\n+   * see above: {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter).\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean\n@@ -140,8 +142,7 @@ public FilterRegistrationBean keycloakPreAuthActionsFilterRegistrationBean(\n   }\n \n   /**\n-   * see above:\n-   * {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter).\n+   * see above: {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter).\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean\n@@ -153,8 +154,7 @@ public FilterRegistrationBean keycloakAuthenticatedActionsFilterBean(\n   }\n \n   /**\n-   * see above:\n-   * {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter).\n+   * see above: {@link SecurityConfig#keycloakAuthenticationProcessingFilterRegistrationBean(KeycloakAuthenticationProcessingFilter).\n    */\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Bean"
  },
  {
    "sha": "37658fb4cd5547bb36b18b8e26d40e992d10ec25",
    "filename": "src/main/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilter.java",
    "status": "modified",
    "additions": 40,
    "deletions": 23,
    "changes": 63,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/blob/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/main/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilter.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/raw/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/main/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilter.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-messageService/contents/src/main/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilter.java?ref=0034f53c27dc70d85f8112a797781c2b6b0341a9",
    "patch": "@@ -1,54 +1,52 @@\n package de.caritas.cob.messageservice.filter;\n \n+import static de.caritas.cob.messageservice.config.SpringFoxConfig.WHITE_LIST;\n+import static java.util.Objects.isNull;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.web.access.AccessDeniedHandler;\n import org.springframework.security.web.access.AccessDeniedHandlerImpl;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.web.filter.OncePerRequestFilter;\n-import de.caritas.cob.messageservice.config.SpringFoxConfig;\n \n /**\n  * This custom filter checks CSRF cookie and header token for equality\n- *\n  */\n public class StatelessCsrfFilter extends OncePerRequestFilter {\n \n-  private final RequestMatcher requireCsrfProtectionMatcher = new DefaultRequiresCsrfMatcher();\n+  private final RequestMatcher requireCsrfProtectionMatcher;\n   private final AccessDeniedHandler accessDeniedHandler = new AccessDeniedHandlerImpl();\n   private final String csrfCookieProperty;\n   private final String csrfHeaderProperty;\n \n-  public StatelessCsrfFilter(String cookieProperty, String headerProperty) {\n+  public StatelessCsrfFilter(String cookieProperty, String headerProperty,\n+      String csrfWhitelistHeaderProperty) {\n     this.csrfCookieProperty = cookieProperty;\n     this.csrfHeaderProperty = headerProperty;\n+    this.requireCsrfProtectionMatcher = new DefaultRequiresCsrfMatcher(csrfWhitelistHeaderProperty);\n   }\n \n   @Override\n   protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n       FilterChain filterChain) throws ServletException, IOException {\n \n     if (requireCsrfProtectionMatcher.matches(request)) {\n-      final String csrfTokenValue = request.getHeader(csrfHeaderProperty);\n-      final Cookie[] cookies = request.getCookies();\n-\n-      String csrfCookieValue = null;\n-      if (cookies != null) {\n-        for (Cookie cookie : cookies) {\n-          if (cookie.getName().equals(csrfCookieProperty)) {\n-            csrfCookieValue = cookie.getValue();\n-          }\n-        }\n-      }\n+      final String csrfTokenValue = request.getHeader(this.csrfHeaderProperty);\n+      String csrfCookieValue = retrieveCsrfCookieValue(request);\n \n-      if (csrfTokenValue == null || !csrfTokenValue.equals(csrfCookieValue)) {\n+      if (isNull(csrfTokenValue) || !csrfTokenValue.equals(csrfCookieValue)) {\n         accessDeniedHandler.handle(request, response,\n             new AccessDeniedException(\"Missing or non-matching CSRF-token\"));\n         return;\n@@ -57,19 +55,38 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n     filterChain.doFilter(request, response);\n   }\n \n-  public static final class DefaultRequiresCsrfMatcher implements RequestMatcher {\n+  private String retrieveCsrfCookieValue(HttpServletRequest request) {\n+    final Cookie[] cookies = request.getCookies();\n+    return isNull(cookies) ? null : Stream.of(cookies)\n+        .filter(cookie -> cookie.getName().equals(this.csrfCookieProperty))\n+        .map(Cookie::getValue)\n+        .findFirst()\n+        .orElse(null);\n+  }\n+\n+  @RequiredArgsConstructor\n+  private static final class DefaultRequiresCsrfMatcher implements RequestMatcher {\n+\n     private final Pattern allowedMethods = Pattern.compile(\"^(HEAD|TRACE|OPTIONS)$\");\n+    private final @NonNull String csrfWhitelistHeaderProperty;\n \n     @Override\n     public boolean matches(HttpServletRequest request) {\n+      return !(isWhiteListUrl(request) || isWhiteListHeader(request) || isAllowedMehod(request));\n+    }\n \n-      // Allow specific whitelist items to disable CSRF protection for Swagger UI documentation\n-      if (Arrays.stream(SpringFoxConfig.WHITE_LIST).parallel()\n-          .anyMatch(request.getRequestURI().toLowerCase()::contains)) {\n-        return false;\n-      }\n+    private boolean isWhiteListUrl(HttpServletRequest request) {\n+      return Arrays.asList(WHITE_LIST).parallelStream()\n+          .anyMatch(request.getRequestURI().toLowerCase()::contains);\n+    }\n \n-      return !allowedMethods.matcher(request.getMethod()).matches();\n+    private boolean isWhiteListHeader(HttpServletRequest request) {\n+      return isNotBlank(request.getHeader(this.csrfWhitelistHeaderProperty));\n     }\n+\n+    private boolean isAllowedMehod(HttpServletRequest request) {\n+      return allowedMethods.matcher(request.getMethod()).matches();\n+    }\n+\n   }\n }"
  },
  {
    "sha": "fffe31a690bc048e379513374ce13cbbeb4ad2c3",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/blob/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/main/resources/application.properties",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/raw/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-messageService/contents/src/main/resources/application.properties?ref=0034f53c27dc70d85f8112a797781c2b6b0341a9",
    "patch": "@@ -62,6 +62,7 @@ user.service.api.liveproxy.url=<containername>:<port>\n \n # CSRF token\n csrf.header.property=\n+csrf.whitelist.header.property=\n csrf.cookie.property=\n \n # LIQUIBASE (LiquibaseProperties)"
  },
  {
    "sha": "f4f6ab59d378abf2099beee49abbb62b00b0d8db",
    "filename": "src/test/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilterTest.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/blob/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/test/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilterTest.java",
    "raw_url": "https://github.com/CaritasDeutschland/caritas-onlineBeratung-messageService/raw/0034f53c27dc70d85f8112a797781c2b6b0341a9/src/test/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilterTest.java",
    "contents_url": "https://api.github.com/repos/CaritasDeutschland/caritas-onlineBeratung-messageService/contents/src/test/java/de/caritas/cob/messageservice/filter/StatelessCsrfFilterTest.java?ref=0034f53c27dc70d85f8112a797781c2b6b0341a9",
    "patch": "@@ -0,0 +1,128 @@\n+package de.caritas.cob.messageservice.filter;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.util.ReflectionTestUtils.setField;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.security.web.access.AccessDeniedHandler;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class StatelessCsrfFilterTest {\n+\n+  private static final String CSRF_HEADER = \"csrfHeader\";\n+  private static final String CSRF_COOKIE = \"csrfCookie\";\n+  private static final String CSRF_WHITELIST_COOKIE = \"csrfWhitelistHeader\";\n+\n+  private final StatelessCsrfFilter csrfFilter = new StatelessCsrfFilter(CSRF_COOKIE, CSRF_HEADER,\n+      CSRF_WHITELIST_COOKIE);\n+\n+  @Mock\n+  private HttpServletRequest request;\n+\n+  @Mock\n+  private HttpServletResponse response;\n+\n+  @Mock\n+  private FilterChain filterChain;\n+\n+  @Mock\n+  private AccessDeniedHandler accessDeniedHandler;\n+\n+  @Before\n+  public void setup() {\n+    setField(csrfFilter, \"accessDeniedHandler\", accessDeniedHandler);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestMethodIsAllowed()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"OPTIONS\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestHasCsrfWhitelistHeader()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getHeader(CSRF_WHITELIST_COOKIE)).thenReturn(\"whitelisted\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_executeFilterChain_When_requestCsrfHeaderAndCookieAreEqual()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    when(request.getHeader(CSRF_HEADER)).thenReturn(\"csrfTokenValue\");\n+    Cookie[] cookies = {new Cookie(CSRF_COOKIE, \"csrfTokenValue\")};\n+    when(request.getCookies()).thenReturn(cookies);\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.filterChain, times(1)).doFilter(request, response);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_callAccessDeniedHandler_When_csrfHeaderIsNull()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    Cookie[] cookies = {new Cookie(CSRF_COOKIE, \"csrfTokenValue\")};\n+    when(request.getCookies()).thenReturn(cookies);\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.accessDeniedHandler, times(1)).handle(any(), any(), any());\n+    verifyNoMoreInteractions(this.filterChain);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_callAccessDeniedHandler_When_cookiesAreNull()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    when(request.getHeader(CSRF_HEADER)).thenReturn(\"csrfHeaderTokenValue\");\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.accessDeniedHandler, times(1)).handle(any(), any(), any());\n+    verifyNoMoreInteractions(this.filterChain);\n+  }\n+\n+  @Test\n+  public void doFilterInternal_Should_callAccessDeniedHandler_When_csrfHeaderIsNotEqualToCookieToken()\n+      throws IOException, ServletException {\n+    when(request.getRequestURI()).thenReturn(\"uri\");\n+    when(request.getMethod()).thenReturn(\"POST\");\n+    when(request.getHeader(CSRF_HEADER)).thenReturn(\"csrfHeaderTokenValue\");\n+    Cookie[] cookies = {new Cookie(CSRF_COOKIE, \"csrfCookieTokenValue\")};\n+    when(request.getCookies()).thenReturn(cookies);\n+\n+    this.csrfFilter.doFilterInternal(request, response, filterChain);\n+\n+    verify(this.accessDeniedHandler, times(1)).handle(any(), any(), any());\n+    verifyNoMoreInteractions(this.filterChain);\n+  }\n+\n+}"
  }
]
