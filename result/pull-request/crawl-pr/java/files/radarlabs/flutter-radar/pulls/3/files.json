[
  {
    "sha": "371b3d7f3aee8a85c6736e55a036bb03f7c7b0c7",
    "filename": "android/src/main/java/io/radar/flutter/RadarFlutterPlugin.java",
    "status": "modified",
    "additions": 198,
    "deletions": 129,
    "changes": 327,
    "blob_url": "https://github.com/radarlabs/flutter-radar/blob/88203554356f1d2b391bf8304873ca1377da8545/android/src/main/java/io/radar/flutter/RadarFlutterPlugin.java",
    "raw_url": "https://github.com/radarlabs/flutter-radar/raw/88203554356f1d2b391bf8304873ca1377da8545/android/src/main/java/io/radar/flutter/RadarFlutterPlugin.java",
    "contents_url": "https://api.github.com/repos/radarlabs/flutter-radar/contents/android/src/main/java/io/radar/flutter/RadarFlutterPlugin.java?ref=88203554356f1d2b391bf8304873ca1377da8545",
    "patch": "@@ -9,6 +9,7 @@\n import android.content.Context;\n import android.content.Intent;\n import android.content.IntentFilter;\n+import android.content.SharedPreferences;\n import android.content.pm.PackageManager;\n import android.location.Location;\n import android.os.Build;\n@@ -28,17 +29,21 @@\n import java.util.Map;\n \n import io.flutter.embedding.engine.FlutterEngine;\n+import io.flutter.embedding.engine.dart.DartExecutor;\n+import io.flutter.embedding.engine.dart.DartExecutor.DartCallback;\n import io.flutter.embedding.engine.plugins.FlutterPlugin;\n import io.flutter.embedding.engine.plugins.activity.ActivityAware;\n import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;\n import io.flutter.plugin.common.BinaryMessenger;\n-import io.flutter.plugin.common.EventChannel;\n import io.flutter.plugin.common.MethodCall;\n import io.flutter.plugin.common.MethodChannel;\n import io.flutter.plugin.common.MethodChannel.MethodCallHandler;\n import io.flutter.plugin.common.MethodChannel.Result;\n import io.flutter.plugin.common.PluginRegistry.Registrar;\n+import io.flutter.view.FlutterCallbackInformation;\n import io.flutter.view.FlutterMain;\n+import io.flutter.view.FlutterNativeView;\n+import io.flutter.view.FlutterRunArguments;\n \n import io.radar.sdk.Radar;\n import io.radar.sdk.RadarReceiver;\n@@ -55,104 +60,45 @@\n \n public class RadarFlutterPlugin implements FlutterPlugin, MethodCallHandler, ActivityAware {\n \n+    private static final String TAG = \"RadarFlutterPlugin\";\n+    private static final String CALLBACK_DISPATCHER_HANDLE_KEY = \"callbackDispatcherHandle\";\n+\n+    private static final Object lock = new Object();\n     private static FlutterEngine sBackgroundFlutterEngine;\n-    private static EventChannel sEventsChannel;\n-    private static EventChannel.EventSink sEventsSink;\n-    private static EventChannel sLocationChannel;\n-    private static EventChannel.EventSink sLocationSink;\n-    private static EventChannel sClientLocationChannel;\n-    private static EventChannel.EventSink sClientLocationSink;\n-    private static EventChannel sErrorChannel;\n-    private static EventChannel.EventSink sErrorSink;\n-    private static EventChannel sLogChannel;\n-    private static EventChannel.EventSink sLogSink;\n+    private static MethodChannel sBackgroundChannel;\n \n     private Activity mActivity;\n     private Context mContext;\n     \n     private static void initializeBackgroundEngine(Context context) {\n-        FlutterMain.startInitialization(context.getApplicationContext());\n-        FlutterMain.ensureInitializationComplete(context.getApplicationContext(), null);\n-\n-        if (sBackgroundFlutterEngine == null) {\n-            sBackgroundFlutterEngine = new FlutterEngine(context);\n-            initializeEventChannels(sBackgroundFlutterEngine.getDartExecutor());\n-        }\n-    }\n-\n-    private static void initializeEventChannels(BinaryMessenger messenger) {\n-        sEventsChannel = new EventChannel(messenger, \"flutter_radar/events\");\n-        sEventsChannel.setStreamHandler(new EventChannel.StreamHandler() {\n-            @Override\n-            public void onListen(Object listener, EventChannel.EventSink eventSink) {\n-                sEventsSink = eventSink;\n-            }\n-\n-            @Override\n-            public void onCancel(Object listener) {\n-                sEventsSink = null;\n-            }\n-        });\n-\n-        sLocationChannel = new EventChannel(messenger, \"flutter_radar/location\");\n-        sLocationChannel.setStreamHandler(new EventChannel.StreamHandler() {\n-            @Override\n-            public void onListen(Object listener, EventChannel.EventSink eventSink) {\n-                sLocationSink = eventSink;\n-            }\n-\n-            @Override\n-            public void onCancel(Object listener) {\n-                sLocationSink = null;\n-            }\n-        });\n-\n-        sClientLocationChannel = new EventChannel(messenger, \"flutter_radar/clientLocation\");\n-        sClientLocationChannel.setStreamHandler(new EventChannel.StreamHandler() {\n-            @Override\n-            public void onListen(Object listener, EventChannel.EventSink eventSink) {\n-                sClientLocationSink = eventSink;\n-            }\n-\n-            @Override\n-            public void onCancel(Object listener) {\n-                sClientLocationSink = null;\n-            }\n-        });\n-\n-        sErrorChannel = new EventChannel(messenger, \"flutter_radar/error\");\n-        sErrorChannel.setStreamHandler(new EventChannel.StreamHandler() {\n-            @Override\n-            public void onListen(Object listener, EventChannel.EventSink eventSink) {\n-                sErrorSink = eventSink;\n-            }\n+        synchronized(lock) {\n+            if (sBackgroundFlutterEngine == null) {\n+                FlutterMain.startInitialization(context.getApplicationContext());\n+                FlutterMain.ensureInitializationComplete(context.getApplicationContext(), null);\n+\n+                SharedPreferences sharedPrefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+                long callbackDispatcherHandle = sharedPrefs.getLong(CALLBACK_DISPATCHER_HANDLE_KEY, 0);\n+                if (callbackDispatcherHandle == 0) {\n+                    Log.e(TAG, \"Error looking up callback dispatcher handle\");\n+                    return;\n+                }\n \n-            @Override\n-            public void onCancel(Object listener) {\n-                sErrorSink = null;\n-            }\n-        });\n+                FlutterCallbackInformation callbackInfo = FlutterCallbackInformation.lookupCallbackInformation(callbackDispatcherHandle);\n+                sBackgroundFlutterEngine = new FlutterEngine(context.getApplicationContext());\n \n-        sLogChannel = new EventChannel(messenger, \"flutter_radar/log\");\n-        sLogChannel.setStreamHandler(new EventChannel.StreamHandler() {\n-            @Override\n-            public void onListen(Object listener, EventChannel.EventSink eventSink) {\n-                sLogSink = eventSink;\n-            }\n+                DartCallback callback = new DartCallback(context.getAssets(), FlutterMain.findAppBundlePath(context), callbackInfo);\n+                sBackgroundFlutterEngine.getDartExecutor().executeDartCallback(callback);\n \n-            @Override\n-            public void onCancel(Object listener) {\n-                sLogSink = null;\n+                sBackgroundChannel = new MethodChannel(sBackgroundFlutterEngine.getDartExecutor().getBinaryMessenger(), \"flutter_radar_background\");\n             }\n-        });\n+        }\n     }\n     \n     @Override\n     public void onAttachedToEngine(@NonNull FlutterPluginBinding binding) {\n         mContext = binding.getApplicationContext();\n         MethodChannel channel = new MethodChannel(binding.getFlutterEngine().getDartExecutor(), \"flutter_radar\");\n         channel.setMethodCallHandler(this);\n-        initializeEventChannels(binding.getFlutterEngine().getDartExecutor());\n     }\n \n     @Override\n@@ -187,11 +133,9 @@ public static void registerWith(Registrar registrar) {\n         channel.setMethodCallHandler(plugin);\n         plugin.mContext = registrar.context();\n         plugin.mActivity = registrar.activity();\n-        \n-        initializeEventChannels(registrar.messenger());\n     }\n \n-    private void runOnMainThread(final Runnable runnable) {\n+    private static void runOnMainThread(final Runnable runnable) {\n         Handler handler = new Handler(Looper.getMainLooper());\n         handler.post(runnable);\n     }\n@@ -296,6 +240,18 @@ public void onMethodCall(@NonNull MethodCall call, @NonNull final Result result)\n                 case \"stopForegroundService\":\n                     stopForegroundService(call, result);\n                     break;\n+                case \"attachListeners\":\n+                    attachListeners(call, result);\n+                    break;\n+                case \"detachListeners\":\n+                    detachListeners(call, result);\n+                    break;\n+                case \"on\":\n+                    on(call, result);\n+                    break;\n+                case \"off\":\n+                    off(call, result);\n+                    break;\n                 default:\n                     result.notImplemented();\n                     break;\n@@ -331,6 +287,11 @@ private void setLogLevel(MethodCall call, Result result) {\n \n \n     private void getPermissionStatus(Result result) {\n+        if (mActivity == null) {\n+            result.success(\"UNKNOWN\");\n+            return;\n+        }\n+\n         boolean foreground = ActivityCompat.checkSelfPermission(mActivity, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED;\n         if (Build.VERSION.SDK_INT >= 29) {\n             if (foreground) {\n@@ -345,6 +306,10 @@ private void getPermissionStatus(Result result) {\n     }\n \n     private void requestPermissions(MethodCall call, Result result) {\n+        if (mActivity == null) {\n+            return;\n+        }\n+\n         boolean background = call.argument(\"background\");\n         if (mActivity != null) {\n             if (Build.VERSION.SDK_INT >= 23) {\n@@ -414,7 +379,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -458,7 +423,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -577,7 +542,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -613,7 +578,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -659,7 +624,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -709,7 +674,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -736,7 +701,7 @@ public void run() {\n                             \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -761,8 +726,8 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n-                            result.error(\"geocode\", \"An unexpected error happened during the reverse geocode callback logic: \" + e.getMessage(), null);\n+                        } catch (Exception e) {\n+                            result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n                 });\n@@ -795,7 +760,7 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n+                        } catch (Exception e) {\n                             result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n@@ -820,8 +785,8 @@ public void run() {\n \n                             HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n                             result.success(map);\n-                        } catch (JSONException e) {\n-                            result.error(\"geocode\", \"An unexpected error happened during the ip geocode callback logic: \" + e.getMessage(), null);\n+                        } catch (Exception e) {\n+                            result.error(e.toString(), e.getMessage(), e.getStackTrace());\n                         }\n                     }\n                 });\n@@ -883,7 +848,7 @@ public void startForegroundService(MethodCall call, Result result) {\n         }\n     }\n \n-    public void stopForegroundService(MethodCall call, Result result) throws JSONException {\n+    public void stopForegroundService(MethodCall call, Result result) {\n         if (mActivity == null) {\n             return;\n         }\n@@ -896,6 +861,35 @@ public void stopForegroundService(MethodCall call, Result result) throws JSONExc\n         }\n     }\n \n+    public void attachListeners(MethodCall call, Result result) {\n+        SharedPreferences sharedPrefs = mContext.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+        long callbackDispatcherHandle = ((Number)call.argument(\"callbackDispatcherHandle\")).longValue();\n+        sharedPrefs.edit().putLong(CALLBACK_DISPATCHER_HANDLE_KEY, callbackDispatcherHandle).commit();\n+        result.success(true);\n+    }\n+\n+    public void detachListeners(MethodCall call, Result result) {\n+        SharedPreferences sharedPrefs = mContext.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+        long callbackDispatcherHandle = call.argument(\"callbackDispatcherHandle\");\n+        sharedPrefs.edit().putLong(CALLBACK_DISPATCHER_HANDLE_KEY, 0L).commit();\n+        result.success(true);\n+    }\n+\n+    public void on(MethodCall call, Result result) {\n+        SharedPreferences sharedPrefs = mContext.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+        String listener = call.argument(\"listener\");\n+        long callbackHandle = ((Number)call.argument(\"callbackHandle\")).longValue();\n+        sharedPrefs.edit().putLong(listener, callbackHandle).commit();\n+        result.success(true);\n+    }\n+\n+    public void off(MethodCall call, Result result) {\n+        SharedPreferences sharedPrefs = mContext.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+        String listener = call.argument(\"listener\");\n+        sharedPrefs.edit().putLong(listener, 0L).commit();\n+        result.success(true);\n+    }\n+\n     private Location locationForMap(HashMap locationMap) {\n         double latitude = (Double)locationMap.get(\"latitude\");\n         double longitude = (Double)locationMap.get(\"longitude\");\n@@ -918,7 +912,7 @@ private JSONObject jsonForMap(HashMap map) throws JSONException {\n                 Object value = map.get(keyStr);\n                 obj.put(keyStr, value);\n             }\n-        } catch (JSONException e) {\n+        } catch (Exception e) {\n             Log.e(\"RadarFlutterPlugin\", e.toString());\n         }\n         return obj;\n@@ -928,88 +922,163 @@ private JSONObject jsonForMap(HashMap map) throws JSONException {\n \n         @Override\n         public void onEventsReceived(Context context, RadarEvent[] events, RadarUser user) {\n-            RadarFlutterPlugin.initializeBackgroundEngine(context);\n-\n             try {\n+                SharedPreferences sharedPrefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+                long callbackHandle = sharedPrefs.getLong(\"events\", 0L);\n+\n+                if (callbackHandle == 0L) {\n+                    return;\n+                }\n+\n+                RadarFlutterPlugin.initializeBackgroundEngine(context);\n+                \n                 JSONObject obj = new JSONObject();\n                 obj.put(\"events\", RadarEvent.toJson(events));\n                 obj.put(\"user\", user.toJson());\n \n-                HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n-                if (sEventsSink != null) {\n-                    sEventsSink.success(map);\n+                HashMap<String, Object> res = new Gson().fromJson(obj.toString(), HashMap.class);\n+                synchronized(lock) {\n+                    final ArrayList args = new ArrayList();\n+                    args.add(callbackHandle);\n+                    args.add(res);\n+                    runOnMainThread(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            sBackgroundChannel.invokeMethod(\"\", args);\n+                        }\n+                    });\n                 }\n-            } catch (JSONException e) {\n+            } catch (Exception e) {\n                 Log.e(\"RadarFlutterPlugin\", e.toString());\n             }\n         }\n     \n         @Override\n         public void onLocationUpdated(Context context, Location location, RadarUser user) {\n-            RadarFlutterPlugin.initializeBackgroundEngine(context);\n-\n             try {\n+                SharedPreferences sharedPrefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+                long callbackHandle = sharedPrefs.getLong(\"location\", 0L);\n+\n+                if (callbackHandle == 0L) {\n+                    return;\n+                }\n+\n+                RadarFlutterPlugin.initializeBackgroundEngine(context);\n+                \n                 JSONObject obj = new JSONObject();\n                 obj.put(\"location\", Radar.jsonForLocation(location));\n                 obj.put(\"user\", user.toJson());\n \n-                HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n-                if (sLocationSink != null) {\n-                    sLocationSink.success(map);\n+                HashMap<String, Object> res = new Gson().fromJson(obj.toString(), HashMap.class);\n+                synchronized(lock) {\n+                    final ArrayList args = new ArrayList();\n+                    args.add(callbackHandle);\n+                    args.add(res);\n+                    runOnMainThread(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            sBackgroundChannel.invokeMethod(\"\", args);\n+                        }\n+                    });\n                 }\n-            } catch (JSONException e) {\n+            } catch (Exception e) {\n                 Log.e(\"RadarFlutterPlugin\", e.toString());\n             }\n         }\n \n         public void onClientLocationUpdated(Context context, Location location, boolean stopped, Radar.RadarLocationSource source) {\n-            RadarFlutterPlugin.initializeBackgroundEngine(context);\n-\n             try {\n+                SharedPreferences sharedPrefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+                long callbackHandle = sharedPrefs.getLong(\"clientLocation\", 0L);\n+\n+                if (callbackHandle == 0L) {\n+                    return;\n+                }\n+\n+                RadarFlutterPlugin.initializeBackgroundEngine(context);\n+                \n                 JSONObject obj = new JSONObject();\n                 obj.put(\"location\", Radar.jsonForLocation(location));\n                 obj.put(\"stopped\", stopped);\n                 obj.put(\"source\", source.toString());\n \n-                HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n-                if (sClientLocationSink != null) {\n-                    sClientLocationSink.success(map);\n+                HashMap<String, Object> res = new Gson().fromJson(obj.toString(), HashMap.class);\n+                synchronized(lock) {\n+                    final ArrayList args = new ArrayList();\n+                    args.add(callbackHandle);\n+                    args.add(res);\n+                    runOnMainThread(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            sBackgroundChannel.invokeMethod(\"\", args);\n+                        }\n+                    });\n                 }\n-            } catch (JSONException e) {\n+            } catch (Exception e) {\n                 Log.e(\"RadarFlutterPlugin\", e.toString());\n             }\n         }\n     \n         @Override\n         public void onError(Context context, Radar.RadarStatus status) {\n-            RadarFlutterPlugin.initializeBackgroundEngine(context);\n-\n             try {\n+                SharedPreferences sharedPrefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+                long callbackHandle = sharedPrefs.getLong(\"error\", 0L);\n+\n+                if (callbackHandle == 0L) {\n+                    return;\n+                }\n+\n+                RadarFlutterPlugin.initializeBackgroundEngine(context);\n+                \n                 JSONObject obj = new JSONObject();\n                 obj.put(\"status\", status.toString());\n \n-                HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n-                if (sErrorSink != null) {\n-                    sErrorSink.success(map);\n+                HashMap<String, Object> res = new Gson().fromJson(obj.toString(), HashMap.class);\n+                synchronized(lock) {\n+                    final ArrayList args = new ArrayList();\n+                    args.add(callbackHandle);\n+                    args.add(res);\n+                    runOnMainThread(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            sBackgroundChannel.invokeMethod(\"\", args);\n+                        }\n+                    });\n                 }\n-            } catch (JSONException e) {\n+            } catch (Exception e) {\n                 Log.e(\"RadarFlutterPlugin\", e.toString());\n             }\n         }\n     \n         @Override\n         public void onLog(Context context, String message) {\n-            RadarFlutterPlugin.initializeBackgroundEngine(context);\n-            \n             try {\n+                SharedPreferences sharedPrefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);\n+                long callbackHandle = sharedPrefs.getLong(\"log\", 0L);\n+\n+                if (callbackHandle == 0L) {\n+                    return;\n+                }\n+\n+                RadarFlutterPlugin.initializeBackgroundEngine(context);\n+                \n                 JSONObject obj = new JSONObject();\n                 obj.put(\"message\", message);\n \n-                HashMap<String, Object> map = new Gson().fromJson(obj.toString(), HashMap.class);\n-                if (sLogSink != null) {\n-                    sLogSink.success(map);\n+                HashMap<String, Object> res = new Gson().fromJson(obj.toString(), HashMap.class);\n+                synchronized(lock) {\n+                    final ArrayList args = new ArrayList();\n+                    args.add(callbackHandle);\n+                    args.add(res);\n+                    runOnMainThread(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            sBackgroundChannel.invokeMethod(\"\", args);\n+                        }\n+                    });\n                 }\n-            } catch (JSONException e) {\n+            } catch (Exception e) {\n                 Log.e(\"RadarFlutterPlugin\", e.toString());\n             }\n         }"
  },
  {
    "sha": "7ca9591165f3c7545bd17f1f4f235aa25b41ddb6",
    "filename": "example/android/app/src/main/java/io/radar/example/MainApplication.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/radarlabs/flutter-radar/blob/88203554356f1d2b391bf8304873ca1377da8545/example/android/app/src/main/java/io/radar/example/MainApplication.java",
    "raw_url": "https://github.com/radarlabs/flutter-radar/raw/88203554356f1d2b391bf8304873ca1377da8545/example/android/app/src/main/java/io/radar/example/MainApplication.java",
    "contents_url": "https://api.github.com/repos/radarlabs/flutter-radar/contents/example/android/app/src/main/java/io/radar/example/MainApplication.java?ref=88203554356f1d2b391bf8304873ca1377da8545",
    "patch": "@@ -9,7 +9,7 @@\n     @Override\n     public void onCreate() {\n         super.onCreate();\n-        Radar.initialize(this, \"prj_test_pk_0000000000000000000000000000000000000000\");\n+        Radar.initialize(this, \"org_test_pk_5857c63d9c1565175db8b00750808a66a002acb8\");\n         FlutterMain.startInitialization(this);\n     }\n "
  },
  {
    "sha": "220d34f41b1606c8eb8d76a1d3757a3064a6dfe7",
    "filename": "example/ios/Runner/AppDelegate.m",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/radarlabs/flutter-radar/blob/88203554356f1d2b391bf8304873ca1377da8545/example/ios/Runner/AppDelegate.m",
    "raw_url": "https://github.com/radarlabs/flutter-radar/raw/88203554356f1d2b391bf8304873ca1377da8545/example/ios/Runner/AppDelegate.m",
    "contents_url": "https://api.github.com/repos/radarlabs/flutter-radar/contents/example/ios/Runner/AppDelegate.m?ref=88203554356f1d2b391bf8304873ca1377da8545",
    "patch": "@@ -1,6 +1,7 @@\n+#import <RadarSDK/RadarSDK.h>\n+\n #import \"AppDelegate.h\"\n #import \"GeneratedPluginRegistrant.h\"\n-#import <RadarSDK/RadarSDK.h>\n \n @implementation AppDelegate\n "
  },
  {
    "sha": "8fc7fea3627395bca27d3deb7c52cff8d9ac5a63",
    "filename": "example/lib/main.dart",
    "status": "modified",
    "additions": 30,
    "deletions": 16,
    "changes": 46,
    "blob_url": "https://github.com/radarlabs/flutter-radar/blob/88203554356f1d2b391bf8304873ca1377da8545/example/lib/main.dart",
    "raw_url": "https://github.com/radarlabs/flutter-radar/raw/88203554356f1d2b391bf8304873ca1377da8545/example/lib/main.dart",
    "contents_url": "https://api.github.com/repos/radarlabs/flutter-radar/contents/example/lib/main.dart?ref=88203554356f1d2b391bf8304873ca1377da8545",
    "patch": "@@ -2,7 +2,10 @@ import 'package:flutter/material.dart';\n import 'dart:async';\n import 'package:flutter_radar/flutter_radar.dart';\n \n-void main() => runApp(MyApp());\n+void main() {\n+  WidgetsFlutterBinding.ensureInitialized();\n+  runApp(MyApp());\n+}\n \n class MyApp extends StatefulWidget {\n   @override\n@@ -16,27 +19,38 @@ class _MyAppState extends State<MyApp> {\n     initRadar();\n   }\n \n+  static void onEvents(Map res) {\n+    print('📍 onEvents: $res');\n+  }\n+\n+  static void onLocation(Map res) {\n+    print('📍 onLocation: $res');\n+  }\n+\n+  static void onClientLocation(Map res) {\n+    print('📍 onClientLocation: $res');\n+  }\n+\n+  static void onError(Map res) {\n+    print('📍 onError: $res');\n+  }\n+\n+  static void onLog(Map res) {\n+    print('📍 onLog: $res');\n+  }\n+\n   Future<void> initRadar() async {\n     Radar.setLogLevel('info');\n     Radar.setUserId('flutter');\n     Radar.setDescription('Flutter');\n     Radar.setMetadata({'foo': 'bar', 'bax': true, 'qux': 1});\n \n-    Radar.onEvents((result) {\n-      print('onEvents: $result');\n-    });\n-    Radar.onLocation((result) {\n-      print('onLocation: $result');\n-    });\n-    Radar.onClientLocation((result) {\n-      print('onClientLocation: $result');\n-    });\n-    Radar.onError((result) {\n-      print('onError: $result');\n-    });\n-    Radar.onLog((result) {\n-      print('onLog: $result');\n-    });\n+    Radar.attachListeners();\n+    Radar.onEvents(onEvents);\n+    Radar.onLocation(onLocation);\n+    Radar.onClientLocation(onClientLocation);\n+    Radar.onError(onError);\n+    Radar.onLog(onLog);\n   }\n \n   @override"
  },
  {
    "sha": "51ed9a72492055d1821131c93368953361f6f120",
    "filename": "lib/flutter_radar.dart",
    "status": "modified",
    "additions": 120,
    "deletions": 62,
    "changes": 182,
    "blob_url": "https://github.com/radarlabs/flutter-radar/blob/88203554356f1d2b391bf8304873ca1377da8545/lib/flutter_radar.dart",
    "raw_url": "https://github.com/radarlabs/flutter-radar/raw/88203554356f1d2b391bf8304873ca1377da8545/lib/flutter_radar.dart",
    "contents_url": "https://api.github.com/repos/radarlabs/flutter-radar/contents/lib/flutter_radar.dart?ref=88203554356f1d2b391bf8304873ca1377da8545",
    "patch": "@@ -1,26 +1,30 @@\n import 'dart:async';\n+import 'dart:ui';\n+import 'package:flutter/material.dart';\n import 'package:flutter/services.dart';\n \n+void callbackDispatcher() {\n+  const MethodChannel _backgroundChannel =\n+      MethodChannel('flutter_radar_background');\n+\n+  WidgetsFlutterBinding.ensureInitialized();\n+\n+  _backgroundChannel.setMethodCallHandler((MethodCall call) async {\n+    final args = call.arguments;\n+\n+    final Function callback = PluginUtilities.getCallbackFromHandle(\n+        CallbackHandle.fromRawHandle(args[0]));\n+    assert(callback != null);\n+\n+    final Map res = args[1].cast<Map>();\n+\n+    callback(res);\n+  });\n+}\n+\n class Radar {\n   static const MethodChannel _channel = const MethodChannel('flutter_radar');\n \n-  static const EventChannel _eventsChannel =\n-      const EventChannel('flutter_radar/events');\n-  static const EventChannel _locationChannel =\n-      const EventChannel('flutter_radar/location');\n-  static const EventChannel _clientLocationChannel =\n-      const EventChannel('flutter_radar/clientLocation');\n-  static const EventChannel _errorChannel =\n-      const EventChannel('flutter_radar/error');\n-  static const EventChannel _logChannel =\n-      const EventChannel('flutter_radar/log');\n-\n-  static Function(Map res) _eventsCallback;\n-  static Function(Map res) _locationCallback;\n-  static Function(Map res) _clientLocationCallback;\n-  static Function(Map res) _errorCallback;\n-  static Function(Map res) _logCallback;\n-\n   static Future initialize(String publishableKey) async {\n     try {\n       await _channel.invokeMethod('initialize', {\n@@ -358,68 +362,122 @@ class Radar {\n     }\n   }\n \n-  static onEvents(Function(Map<dynamic, dynamic> result) callback) {\n-    _eventsCallback = callback;\n-    _eventsChannel.receiveBroadcastStream().listen((data) {\n-      if (_eventsCallback != null) {\n-        _eventsCallback(data);\n-      }\n-    });\n+  static attachListeners() async {\n+    try {\n+      await _channel.invokeMethod('attachListeners', {\n+        'callbackDispatcherHandle':\n+            PluginUtilities.getCallbackHandle(callbackDispatcher).toRawHandle()\n+      });\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static offEvents() {\n-    _eventsCallback = null;\n+  static Future detachListeners() async {\n+    try {\n+      await _channel.invokeMethod('detachListeners');\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static onLocation(Function(Map<dynamic, dynamic> result) callback) {\n-    _locationCallback = callback;\n-    _locationChannel.receiveBroadcastStream().listen((data) {\n-      if (_locationCallback != null) {\n-        _locationCallback(data);\n-      }\n-    });\n+  static onEvents(Function(Map res) callback) async {\n+    try {\n+      await _channel.invokeMethod('on', {\n+        'listener': 'events',\n+        'callbackHandle':\n+            PluginUtilities.getCallbackHandle(callback).toRawHandle()\n+      });\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static offLocation() {\n-    _locationCallback = null;\n+  static offEvents() async {\n+    try {\n+      await _channel.invokeMethod('off', {'listener': 'events'});\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static onClientLocation(Function(Map<dynamic, dynamic> result) callback) {\n-    _clientLocationCallback = callback;\n-    _clientLocationChannel.receiveBroadcastStream().listen((data) {\n-      if (_clientLocationCallback != null) {\n-        _clientLocationCallback(data);\n-      }\n-    });\n+  static onLocation(Function(Map res) callback) async {\n+    try {\n+      await _channel.invokeMethod('on', {\n+        'listener': 'location',\n+        'callbackHandle':\n+            PluginUtilities.getCallbackHandle(callback).toRawHandle()\n+      });\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static offClientLocation() {\n-    _clientLocationCallback = null;\n+  static offLocation() async {\n+    try {\n+      await _channel.invokeMethod('off', {'listener': 'location'});\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static onError(Function(Map<dynamic, dynamic> result) callback) {\n-    _errorCallback = callback;\n-    _errorChannel.receiveBroadcastStream().listen((data) {\n-      if (_errorCallback != null) {\n-        _errorCallback(data);\n-      }\n-    });\n+  static onClientLocation(Function(Map res) callback) async {\n+    try {\n+      await _channel.invokeMethod('on', {\n+        'listener': 'clientLocation',\n+        'callbackHandle':\n+            PluginUtilities.getCallbackHandle(callback).toRawHandle()\n+      });\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static offError() {\n-    _errorCallback = null;\n+  static offClientLocation() async {\n+    try {\n+      await _channel.invokeMethod('off', {'listener': 'clientLocation'});\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static onLog(Function(Map<dynamic, dynamic> result) callback) {\n-    _logCallback = callback;\n-    _logChannel.receiveBroadcastStream().listen((data) {\n-      if (_logCallback != null) {\n-        _logCallback(data);\n-      }\n-    });\n+  static onError(Function(Map res) callback) async {\n+    try {\n+      await _channel.invokeMethod('on', {\n+        'listener': 'error',\n+        'callbackHandle':\n+            PluginUtilities.getCallbackHandle(callback).toRawHandle()\n+      });\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n \n-  static offLog() {\n-    _logCallback = null;\n+  static offError() async {\n+    try {\n+      await _channel.invokeMethod('off', {'listener': 'error'});\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n+  }\n+\n+  static onLog(Function(Map res) callback) async {\n+    try {\n+      await _channel.invokeMethod('on', {\n+        'listener': 'log',\n+        'callbackHandle':\n+            PluginUtilities.getCallbackHandle(callback).toRawHandle()\n+      });\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n+  }\n+\n+  static offLog() async {\n+    try {\n+      await _channel.invokeMethod('off', {'listener': 'log'});\n+    } on PlatformException catch (e) {\n+      print(e);\n+    }\n   }\n }"
  }
]
