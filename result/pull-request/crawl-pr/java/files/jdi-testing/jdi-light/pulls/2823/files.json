[
  {
    "sha": "c42a0aa13c58488b5c96e8768fa13139ffef0351",
    "filename": "jdi-light-bootstrap-tests/src/test/java/io/github/epam/bootstrap/tests/complex/CarouselTests.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/jdi-testing/jdi-light/blob/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light-bootstrap-tests/src/test/java/io/github/epam/bootstrap/tests/complex/CarouselTests.java",
    "raw_url": "https://github.com/jdi-testing/jdi-light/raw/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light-bootstrap-tests/src/test/java/io/github/epam/bootstrap/tests/complex/CarouselTests.java",
    "contents_url": "https://api.github.com/repos/jdi-testing/jdi-light/contents/jdi-light-bootstrap-tests/src/test/java/io/github/epam/bootstrap/tests/complex/CarouselTests.java?ref=40d60576578c6f134b4eef83c6b51c26c76d37da",
    "patch": "@@ -97,12 +97,12 @@ public void getSlideDataByTextTest() {\n \t@Test\n \tpublic void getSlideByIndexTest() {\n \t\tSlide info = carousel.slides.get(2);\n-\t\tinfo.image.find(\"img\").has().attr(\"src\", containsString(secondSlide.src));\n+\t\tinfo.is().hidden();\n \t}\n \t@Test\n \tpublic void getSlideByTextTest() {\n \t\tSlide info = carousel.slides.get(thirdSlide.title);\n-\t\tinfo.image.find(\"img\").has().attr(\"src\", containsString(thirdSlide.src));\n+\t\tinfo.is().hidden();\n \t}\n \n \t@Test"
  },
  {
    "sha": "7a453f2caf6196a9c9a819566f4b433bed639016",
    "filename": "jdi-light-html-tests/src/test/java/io/github/epam/html/tests/elements/complex/list/ElementsGoogleTests.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/jdi-testing/jdi-light/blob/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light-html-tests/src/test/java/io/github/epam/html/tests/elements/complex/list/ElementsGoogleTests.java",
    "raw_url": "https://github.com/jdi-testing/jdi-light/raw/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light-html-tests/src/test/java/io/github/epam/html/tests/elements/complex/list/ElementsGoogleTests.java",
    "contents_url": "https://api.github.com/repos/jdi-testing/jdi-light/contents/jdi-light-html-tests/src/test/java/io/github/epam/html/tests/elements/complex/list/ElementsGoogleTests.java?ref=40d60576578c6f134b4eef83c6b51c26c76d37da",
    "patch": "@@ -1,5 +1,6 @@\n package io.github.epam.html.tests.elements.complex.list;\n \n+import com.epam.jdi.light.elements.common.UIElement;\n import com.epam.jdi.light.elements.complex.DataList;\n import io.github.com.custom.Result;\n import io.github.com.custom.SearchResult;\n@@ -129,6 +130,10 @@ public void validateEntities2Tests() {\n \n     @Test\n     public void validateFilterTests() {\n+        searchPage.search.assertThat().displayed();\n+        searchPage.search.assertThat().size(equalTo(8));\n+        searchPage.search.waitFor().all().elements(UIElement::isDisplayed);\n+\n         DataList<SearchResult, Result> jobs = searchPage.search;\n \n         jobs.assertThat().value(containsString("
  },
  {
    "sha": "1ddd20530a9a0e9b3dfb9d38aee35abc0fbc8643",
    "filename": "jdi-light-html/src/main/java/com/epam/jdi/light/ui/html/elements/common/Checkbox.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/jdi-testing/jdi-light/blob/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light-html/src/main/java/com/epam/jdi/light/ui/html/elements/common/Checkbox.java",
    "raw_url": "https://github.com/jdi-testing/jdi-light/raw/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light-html/src/main/java/com/epam/jdi/light/ui/html/elements/common/Checkbox.java",
    "contents_url": "https://api.github.com/repos/jdi-testing/jdi-light/contents/jdi-light-html/src/main/java/com/epam/jdi/light/ui/html/elements/common/Checkbox.java?ref=40d60576578c6f134b4eef83c6b51c26c76d37da",
    "patch": "@@ -20,6 +20,12 @@\n public class Checkbox extends UIBaseElement<CheckboxAssert>\n     implements HasLabel, SetValue, HasClick, HasCheck, CanBeSelected {\n \n+    @Override\n+    public void init() {\n+        super.init();\n+        base().noValidation();\n+    }\n+\n     @Override\n     public Label label() {\n         Label label = safeGetLabel();"
  },
  {
    "sha": "2bcf82f452fac5725c966d8bb9595bccee902ea7",
    "filename": "jdi-light/src/main/java/com/epam/jdi/light/elements/base/JdiSettings.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/jdi-testing/jdi-light/blob/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light/src/main/java/com/epam/jdi/light/elements/base/JdiSettings.java",
    "raw_url": "https://github.com/jdi-testing/jdi-light/raw/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light/src/main/java/com/epam/jdi/light/elements/base/JdiSettings.java",
    "contents_url": "https://api.github.com/repos/jdi-testing/jdi-light/contents/jdi-light/src/main/java/com/epam/jdi/light/elements/base/JdiSettings.java?ref=40d60576578c6f134b4eef83c6b51c26c76d37da",
    "patch": "@@ -68,10 +68,10 @@ private static WebElement getWithArgs(JDIBase b, Object[] args) {\n \n     // region Utilities\n     public static WebElement filterWebListToWebElement(JDIBase base, List<WebElement> els) {\n-        if (els.size() == 1)\n-            return els.get(0);\n         if (els.isEmpty())\n             throw exception(FAILED_TO_FIND_ELEMENT_MESSAGE, base.toString(), base.getTimeout());\n+        if (FAST_SEARCH && els.size() == 1)\n+            return els.get(0);\n         List<WebElement> filtered = filterElements(base, els);\n         if (filtered.size() == 1)\n             return filtered.get(0);"
  },
  {
    "sha": "347b0fedfd3831476bc318ac3b48571debb0ad7e",
    "filename": "jdi-light/src/main/java/com/epam/jdi/light/settings/WebSettings.java",
    "status": "modified",
    "additions": 18,
    "deletions": 6,
    "changes": 24,
    "blob_url": "https://github.com/jdi-testing/jdi-light/blob/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light/src/main/java/com/epam/jdi/light/settings/WebSettings.java",
    "raw_url": "https://github.com/jdi-testing/jdi-light/raw/40d60576578c6f134b4eef83c6b51c26c76d37da/jdi-light/src/main/java/com/epam/jdi/light/settings/WebSettings.java",
    "contents_url": "https://api.github.com/repos/jdi-testing/jdi-light/contents/jdi-light/src/main/java/com/epam/jdi/light/settings/WebSettings.java?ref=40d60576578c6f134b4eef83c6b51c26c76d37da",
    "patch": "@@ -71,6 +71,12 @@\n  */\n public class WebSettings {\n     public static ILogger logger = instance(\"JDI\");\n+\n+    public static VisualCheckAction VISUAL_ACTION_STRATEGY = VisualCheckAction.NONE;\n+    public static VisualCheckPage VISUAL_PAGE_STRATEGY = VisualCheckPage.NONE;\n+    public static boolean STRICT_SEARCH = true;\n+    public static boolean FAST_SEARCH = true;\n+\n     public static String getDomain() {\n         if (isBlank(DRIVER.domain)) {\n             init();\n@@ -80,13 +86,11 @@ public static String getDomain() {\n     public static void setDomain(String domain) {\n         DRIVER.domain = domain;\n     }\n-    public static VisualCheckAction VISUAL_ACTION_STRATEGY = VisualCheckAction.NONE;\n-    public static VisualCheckPage VISUAL_PAGE_STRATEGY = VisualCheckPage.NONE;\n-    public static boolean STRICT_SEARCH = true;\n     public static boolean hasDomain() {\n         init();\n         return DRIVER.domain != null && DRIVER.domain.contains(\"://\");\n     }\n+\n     public static String TEST_GROUP = \"\";\n     // TODO multi properties example\n     public static Safe<String> TEST_NAME = new Safe<>((String) null);\n@@ -318,18 +322,26 @@ private static void setSearchStrategy(String p) {\n             p = \"visible, single\";\n         if (p.split(\",\").length == 2) {\n             List<String> params = map(asList(p.split(\",\")), a -> ELEMENT.simplifyString.execute(a));\n-            if (params.contains(\"visible\") || params.contains(\"displayed\"))\n+            if (params.contains(\"visible\") || params.contains(\"displayed\")) {\n                 onlyVisible();\n+                FAST_SEARCH = false;\n+            }\n             if (params.contains(\"any\") || params.contains(\"all\"))\n                 noValidation();\n-            if (params.contains(\"enabled\"))\n+            if (params.contains(\"enabled\")) {\n                 visibleEnabled();\n-            if (params.contains(\"inview\"))\n+                FAST_SEARCH = false;\n+            }\n+            if (params.contains(\"inview\")) {\n                 inView();\n+                FAST_SEARCH = false;\n+            }\n             if (params.contains(\"single\"))\n                 STRICT_SEARCH = true;\n             if (params.contains(\"multiple\"))\n                 STRICT_SEARCH = false;\n+            if (params.contains(\"fast\"))\n+                FAST_SEARCH = true;\n         }\n     }\n "
  }
]
