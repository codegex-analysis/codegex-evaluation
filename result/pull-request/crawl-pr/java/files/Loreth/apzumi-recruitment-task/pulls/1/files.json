[
  {
    "sha": "c702970bae57adeb4ba297531cdd197be5d2586c",
    "filename": "README.md",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/README.md",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/README.md",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/README.md?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,43 @@\n+### Uwagi\n+\n+Kod sformatowano z użyciem google-java-format.\n+\n+Ze względu na nieścisłości/wątpliwości przyjęto następujące założenia:\n+\n+* pobieranie danych **na żądanie** powoduje nadpisanie wszystkich postów\n+* pobieranie danych **cykliczne** aktualizuje wpisy, ale nigdy nie tworzy nowych\n+* cykliczne pobieranie następuje raz dziennie o godzinie 14:00\n+\n+Godzinę cyklicznego pobierania można zmienić, modyfikując wyrażenie CRON w application.properties (zmieniając wartości 0 0 14 na pożądaną sekundę/minutę/godzinę):  \n+`scheduling.post-update.cron=0 0 14 * * *`\n+\n+### Instrukcja uruchomienia\n+\n+Dla uproszczenia wykorzystano bazę danych H2.  \n+Można wykorzystać bazę bez instalacji, za pośrednictwem Spring Boot:\n+* in-memory (nietrwała), definiując URL wg wzoru: `jdbc:h2:mem:nazwa-bazy`\n+* file-based, definiując URL wg wzoru: `jdbc:h2:file:~/nazwa-bazy`  \n+**Alternatywnie**  \n+H2 należy zainstalować (http://www.h2database.com/html/main.html)\n+i za pośrednictwem H2 Database Engine utworzyć nową bazę i uruchomić ją,\n+logując się w H2 console.\n+\n+#### Należy zdefiniować dane do połączenia z bazą, tworząc zmienne środowiskowe:\n+\n+* APZUMI_DATASOURCE_URL\n+* APZUMI_DATASOURCE_USERNAME\n+* APZUMI_DATASOURCE_PASSWORD\n+\n+lub dla uproszczenia ręcznie modyfikując odpowiednie właściwości w pliku application.properties:\n+\n+* spring.datasource.url\n+* spring.datasource.username\n+* spring.datasource.password\n+\n+###### Przykładowe wartości dla zmiennych środowiskowych/właściwości:\n+\n+`spring.datasource.url=jdbc:h2:tcp://localhost/~/apzumi-db`  \n+`spring.datasource.username=sa`  \n+`spring.datasource.password=sa`\n+\n+#### Aplikację można uruchomić z poziomu katalogu projektu poleceniem: `mvnw spring-boot:run`"
  },
  {
    "sha": "8d5b7be52d40028cfc3753dd8250d36764e04b1a",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 69,
    "deletions": 2,
    "changes": 71,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/pom.xml",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/pom.xml",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/pom.xml?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -16,6 +16,10 @@\n   <description>Recruitment task for Apzumi</description>\n   <properties>\n     <java.version>15</java.version>\n+    <org.mapstruct.version>1.4.2.Final</org.mapstruct.version>\n+    <flyway-core.version>7.5.4</flyway-core.version>\n+    <flyway-spring-test.version>7.0.0</flyway-spring-test.version>\n+    <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>\n   </properties>\n   <dependencies>\n     <dependency>\n@@ -26,6 +30,19 @@\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-web</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-webflux</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-validation</artifactId>\n+    </dependency>\n \n     <dependency>\n       <groupId>com.h2database</groupId>\n@@ -38,8 +55,33 @@\n       <optional>true</optional>\n     </dependency>\n     <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-test</artifactId>\n+      <groupId>org.mapstruct</groupId>\n+      <artifactId>mapstruct</artifactId>\n+      <version>${org.mapstruct.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.validation</groupId>\n+      <artifactId>validation-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.flywaydb</groupId>\n+      <artifactId>flyway-core</artifactId>\n+      <version>${flyway-core.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.flywaydb.flyway-test-extensions</groupId>\n+      <artifactId>flyway-spring-test</artifactId>\n+      <version>${flyway-spring-test.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.awaitility</groupId>\n+      <artifactId>awaitility</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.squareup.okhttp3</groupId>\n+      <artifactId>mockwebserver</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n@@ -58,6 +100,31 @@\n           </excludes>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>${maven-compiler-plugin.version}</version>\n+        <configuration>\n+          <release>${java.version}</release>\n+          <annotationProcessorPaths>\n+            <path>\n+              <groupId>org.projectlombok</groupId>\n+              <artifactId>lombok</artifactId>\n+              <version>${lombok.version}</version>\n+            </path>\n+            <path>\n+              <groupId>org.mapstruct</groupId>\n+              <artifactId>mapstruct-processor</artifactId>\n+              <version>${org.mapstruct.version}</version>\n+            </path>\n+          </annotationProcessorPaths>\n+          <compilerArgs>\n+            <arg>\n+              -Amapstruct.defaultComponentModel=spring\n+            </arg>\n+          </compilerArgs>\n+        </configuration>\n+      </plugin>\n     </plugins>\n   </build>\n "
  },
  {
    "sha": "6324e4b2678d005c23ee075523d1109aa3cd50c9",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/ApzumiApplication.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/ApzumiApplication.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/ApzumiApplication.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/ApzumiApplication.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -9,5 +9,4 @@\n   public static void main(String[] args) {\n     SpringApplication.run(ApzumiApplication.class, args);\n   }\n-\n }"
  },
  {
    "sha": "074e3bb8e741d6d3a5400f56bf152ed375e33e61",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/config/ResourceIdentifiers.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/config/ResourceIdentifiers.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/config/ResourceIdentifiers.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/config/ResourceIdentifiers.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,11 @@\n+package pl.kamilprzenioslo.apzumi.config;\n+\n+/** Rest API resource identifiers */\n+public final class ResourceIdentifiers {\n+\n+  public static final String ID = \"/{id}\";\n+  public static final String POST = \"/posts\";\n+  public static final String POST_FETCH_REQUEST = \"/fetch-requests\";\n+\n+  private ResourceIdentifiers() {}\n+}"
  },
  {
    "sha": "26f006a5c7504e8f76021a6b992c9fd98e65b4e9",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/config/SchedulingConfig.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/config/SchedulingConfig.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/config/SchedulingConfig.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/config/SchedulingConfig.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,10 @@\n+package pl.kamilprzenioslo.apzumi.config;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+\n+@Configuration\n+@EnableScheduling\n+@ConditionalOnProperty(value = \"scheduling.enabled\", havingValue = \"true\", matchIfMissing = true)\n+public class SchedulingConfig {}"
  },
  {
    "sha": "49374def6538bcce1de80c017426473d451ffed6",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/controllers/PostController.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/controllers/PostController.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/controllers/PostController.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/controllers/PostController.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,60 @@\n+package pl.kamilprzenioslo.apzumi.controllers;\n+\n+import static pl.kamilprzenioslo.apzumi.config.ResourceIdentifiers.ID;\n+import static pl.kamilprzenioslo.apzumi.config.ResourceIdentifiers.POST;\n+import static pl.kamilprzenioslo.apzumi.config.ResourceIdentifiers.POST_FETCH_REQUEST;\n+\n+import java.util.List;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+import pl.kamilprzenioslo.apzumi.services.PostService;\n+import pl.kamilprzenioslo.apzumi.validation.PatchRequest;\n+\n+@RequiredArgsConstructor\n+@RequestMapping(POST)\n+@RestController\n+public class PostController {\n+\n+  private final PostService service;\n+\n+  @GetMapping(ID)\n+  public Post getById(@PathVariable int id) {\n+    return service\n+        .findById(id)\n+        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n+  }\n+\n+  @GetMapping\n+  public List<Post> getAll(@RequestParam(required = false, defaultValue = \"\") String title) {\n+    return service.findAll(title);\n+  }\n+\n+  @PatchMapping(ID)\n+  public Post patch(@PathVariable int id, @Validated(PatchRequest.class) @RequestBody Post post) {\n+      return service.patch(id, post);\n+  }\n+\n+  @DeleteMapping(ID)\n+  public void delete(@PathVariable int id) {\n+      service.deleteById(id);\n+  }\n+\n+  @ResponseStatus(HttpStatus.ACCEPTED)\n+  @PostMapping(POST_FETCH_REQUEST)\n+  public void fetchPostsRequest() {\n+    service.fetchAndReplaceAllPosts();\n+  }\n+}"
  },
  {
    "sha": "23c98a5930957686564a9c03f6198a79cd34d4e1",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/dtos/Post.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/dtos/Post.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/dtos/Post.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/dtos/Post.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,24 @@\n+package pl.kamilprzenioslo.apzumi.dtos;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonProperty.Access;\n+import javax.validation.constraints.Null;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import pl.kamilprzenioslo.apzumi.validation.PatchRequest;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class Post {\n+\n+  @JsonProperty(access = Access.WRITE_ONLY)\n+  private Integer userId;\n+\n+  @Null(groups = PatchRequest.class)\n+  private Integer id;\n+\n+  private String title;\n+  private String body;\n+}"
  },
  {
    "sha": "a55dd09319bbfa8687b5f1dad9011c590fdc9817",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/exceptions/EntityNotFoundException.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/exceptions/EntityNotFoundException.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/exceptions/EntityNotFoundException.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/exceptions/EntityNotFoundException.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,12 @@\n+package pl.kamilprzenioslo.apzumi.exceptions;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(HttpStatus.NOT_FOUND)\n+public class EntityNotFoundException extends RuntimeException {\n+\n+  public EntityNotFoundException(String message) {\n+    super(message);\n+  }\n+}"
  },
  {
    "sha": "b1184b7adbbaf05d0d7480e68f2f57ff676a5519",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/mappers/BaseMapper.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/mappers/BaseMapper.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/mappers/BaseMapper.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/mappers/BaseMapper.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,24 @@\n+package pl.kamilprzenioslo.apzumi.mappers;\n+\n+import static org.mapstruct.NullValuePropertyMappingStrategy.IGNORE;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import org.mapstruct.BeanMapping;\n+import org.mapstruct.MappingTarget;\n+\n+/**\n+ * Basic mapper for conversion between a DTO and an Entity.\n+ *\n+ * @param <D> type of DTO\n+ * @param <E> type of Entity\n+ */\n+public interface BaseMapper<D, E> {\n+\n+  D mapToDto(E entity);\n+\n+  List<D> mapToDtos(Collection<E> entities);\n+\n+  @BeanMapping(nullValuePropertyMappingStrategy = IGNORE)\n+  void patchEntity(D dto, @MappingTarget E entity);\n+}"
  },
  {
    "sha": "3c0220d6aa903d1f004038890d97295a89eef286",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/mappers/PostMapper.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/mappers/PostMapper.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/mappers/PostMapper.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/mappers/PostMapper.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,8 @@\n+package pl.kamilprzenioslo.apzumi.mappers;\n+\n+import org.mapstruct.Mapper;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+import pl.kamilprzenioslo.apzumi.persistence.entities.PostEntity;\n+\n+@Mapper\n+public interface PostMapper extends BaseMapper<Post, PostEntity> {}"
  },
  {
    "sha": "e5f06aa7f7ed5d948bb7883eb957eaa6d30ebe7e",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/persistence/entities/PostEntity.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/persistence/entities/PostEntity.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/persistence/entities/PostEntity.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/persistence/entities/PostEntity.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,57 @@\n+package pl.kamilprzenioslo.apzumi.persistence.entities;\n+\n+import java.util.Objects;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+import org.springframework.data.domain.Persistable;\n+\n+@Getter\n+@Setter\n+@ToString\n+@NoArgsConstructor\n+@Entity\n+@Table(name = \"post\")\n+public class PostEntity implements Persistable<Integer> {\n+\n+  private int userId;\n+  @Id private Integer id;\n+  private String title;\n+  private String body;\n+  @Version private Integer version;\n+  private boolean modifiedByUser;\n+\n+  public PostEntity(int userId, Integer id, String title, String body) {\n+    this.userId = userId;\n+    this.id = id;\n+    this.title = title;\n+    this.body = body;\n+  }\n+\n+  @Override\n+  public boolean isNew() {\n+    return version == null;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    PostEntity that = (PostEntity) o;\n+    return id.equals(that.id);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(userId, id);\n+  }\n+}"
  },
  {
    "sha": "cff467c9811bbd1c1d9d29c021972d2f74247e72",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepository.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepository.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepository.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepository.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,22 @@\n+package pl.kamilprzenioslo.apzumi.persistence.repositories;\n+\n+import java.util.List;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+import pl.kamilprzenioslo.apzumi.persistence.entities.PostEntity;\n+\n+public interface PostRepository extends JpaRepository<PostEntity, Integer> {\n+\n+  List<PostEntity> findByTitleContaining(String title);\n+\n+  @Transactional\n+  @Modifying\n+  @Query(\"\"\"\n+  UPDATE PostEntity p\n+  SET p.userId = :#{#post.userId}, p.title = :#{#post.title}, p.body = :#{#post.body}, p.version = p.version+1\n+  WHERE p.id = :#{#post.id} AND p.modifiedByUser = false\n+  \"\"\")\n+  void updatePostIfUnmodified(PostEntity post);\n+}"
  },
  {
    "sha": "9ffdb3b64fbeccfe4f880e2f2fff464fde51f1b2",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/services/PostService.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/services/PostService.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/services/PostService.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/services/PostService.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,32 @@\n+package pl.kamilprzenioslo.apzumi.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+\n+public interface PostService {\n+\n+  Optional<Post> findById(int id);\n+\n+  /**\n+   * Returns posts, whose title contains provided value\n+   *\n+   * @param title may be null\n+   * @return posts, whose title contains provided value\n+   */\n+  List<Post> findAll(String title);\n+\n+  /**\n+   * Partially updates a Post, using non-null fields provided in a Post DTO\n+   *\n+   * @param id id of a Post to be patched\n+   * @param post DTO containing modified fields\n+   * @return patched Post\n+   */\n+  Post patch(int id, Post post);\n+\n+  void deleteById(int id);\n+\n+  /** Fetches posts from public API and saves them to the database, replacing all existing posts */\n+  void fetchAndReplaceAllPosts();\n+}"
  },
  {
    "sha": "c61ce4051f6e77b9b1be1bcc8a6732ae6af6101d",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImpl.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImpl.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImpl.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,104 @@\n+package pl.kamilprzenioslo.apzumi.services.impl;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.MediaType;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import org.springframework.web.reactive.function.client.WebClient.Builder;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+import pl.kamilprzenioslo.apzumi.exceptions.EntityNotFoundException;\n+import pl.kamilprzenioslo.apzumi.mappers.PostMapper;\n+import pl.kamilprzenioslo.apzumi.persistence.entities.PostEntity;\n+import pl.kamilprzenioslo.apzumi.persistence.repositories.PostRepository;\n+import pl.kamilprzenioslo.apzumi.services.PostService;\n+import reactor.core.publisher.Flux;\n+\n+@Service\n+@Slf4j\n+public class PostServiceImpl implements PostService {\n+\n+  private static final String ENTITY_NOT_FOUND_MESSAGE = \"Entity does not exist with id=\";\n+  private final PostRepository repository;\n+  private final PostMapper mapper;\n+  private final WebClient webClient;\n+\n+  public PostServiceImpl(\n+      PostRepository repository,\n+      PostMapper mapper,\n+      Builder webClientBuilder,\n+      @Value(\"${post-api-url}\") String postApiUrl) {\n+    this.repository = repository;\n+    this.mapper = mapper;\n+    this.webClient = webClientBuilder.baseUrl(postApiUrl).build();\n+  }\n+\n+  public Optional<Post> findById(int id) {\n+    return repository.findById(id).map(mapper::mapToDto);\n+  }\n+\n+  @Override\n+  public List<Post> findAll(String title) {\n+    return mapper.mapToDtos(repository.findByTitleContaining(title));\n+  }\n+\n+  @Override\n+  public Post patch(int id, Post post) {\n+    PostEntity postEntity =\n+        repository\n+            .findById(id)\n+            .orElseThrow(() -> new EntityNotFoundException(ENTITY_NOT_FOUND_MESSAGE + id));\n+\n+    postEntity.setModifiedByUser(true);\n+    mapper.patchEntity(post, postEntity);\n+    repository.save(postEntity);\n+\n+    return mapper.mapToDto(postEntity);\n+  }\n+\n+  @Override\n+  public void deleteById(int id) {\n+    if (repository.existsById(id)) {\n+      repository.deleteById(id);\n+    } else {\n+      throw new EntityNotFoundException(ENTITY_NOT_FOUND_MESSAGE + id);\n+    }\n+  }\n+\n+  @Async\n+  @Scheduled(cron = \"${scheduling.post-update.cron}\")\n+  public void fetchAndUpdateUnmodifiedPosts() {\n+    Flux<PostEntity> postFlux =\n+        webClient.get().accept(MediaType.APPLICATION_JSON).retrieve().bodyToFlux(PostEntity.class);\n+\n+    log.debug(\"Updating unmodified posts\");\n+    postFlux.subscribe(repository::updatePostIfUnmodified);\n+  }\n+\n+  @Async\n+  @Transactional\n+  public void fetchAndReplaceAllPosts() {\n+    fetchPostsFromPublicApi().doFirst(repository::deleteAllInBatch).subscribe(repository::save);\n+  }\n+\n+  private Flux<PostEntity> fetchPostsFromPublicApi() {\n+    log.debug(\"Fetching posts from public API\");\n+    Flux<PostEntity> postFlux =\n+        webClient\n+            .get()\n+            .accept(MediaType.APPLICATION_JSON)\n+            .retrieve()\n+            .bodyToFlux(PostEntity.class)\n+            .publish()\n+            .autoConnect(2);\n+\n+    postFlux.count().subscribe(count -> log.debug(\"Fetched {} posts\", count));\n+\n+    return postFlux;\n+  }\n+}"
  },
  {
    "sha": "4224a27428051ebca192a79a4e9641927bc96efe",
    "filename": "src/main/java/pl/kamilprzenioslo/apzumi/validation/PatchRequest.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/validation/PatchRequest.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/java/pl/kamilprzenioslo/apzumi/validation/PatchRequest.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/java/pl/kamilprzenioslo/apzumi/validation/PatchRequest.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,4 @@\n+package pl.kamilprzenioslo.apzumi.validation;\n+\n+/** Validation Group (Bean Validation API) for PATCH requests */\n+public interface PatchRequest {}"
  },
  {
    "sha": "f0f4da902d5467d4d9dd9aed2cf37251bada0cc9",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/resources/application.properties",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/resources/application.properties?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,10 @@\n+spring.jpa.hibernate.ddl-auto=validate\n+spring.datasource.url=${APZUMI_DATASOURCE_URL}\n+spring.datasource.username=${APZUMI_DATASOURCE_USERNAME}\n+spring.datasource.password=${APZUMI_DATASOURCE_PASSWORD}\n+post-api-url=https://jsonplaceholder.typicode.com/posts\n+#CRON expression controlling how often posts get updated from public API\n+scheduling.post-update.cron=0 0 14 * * *\n+logging.level.pl.kamilprzenioslo.apzumi=DEBUG\n+server.error.include-message=always\n+server.error.include-binding-errors=always"
  },
  {
    "sha": "b435f9b9ee8fe858e655f9ba69abca1e19f9167c",
    "filename": "src/main/resources/db/migration/V1__init.sql",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/resources/db/migration/V1__init.sql",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/main/resources/db/migration/V1__init.sql",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/main/resources/db/migration/V1__init.sql?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,9 @@\n+CREATE TABLE post\n+(\n+    user_id          int NOT NULL,\n+    id               int PRIMARY KEY,\n+    title            varchar(255),\n+    body             varchar(1000),\n+    version          int NOT NULL,\n+    modified_by_user boolean DEFAULT (FALSE)\n+);"
  },
  {
    "sha": "3410cf1731cebb36884724f6d8478bb587f3159a",
    "filename": "src/test/java/pl/kamilprzenioslo/apzumi/ApzumiApplicationTests.java",
    "status": "removed",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/87977113e07597f15f0c37b7103cf0816088d35a/src/test/java/pl/kamilprzenioslo/apzumi/ApzumiApplicationTests.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/87977113e07597f15f0c37b7103cf0816088d35a/src/test/java/pl/kamilprzenioslo/apzumi/ApzumiApplicationTests.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/java/pl/kamilprzenioslo/apzumi/ApzumiApplicationTests.java?ref=87977113e07597f15f0c37b7103cf0816088d35a",
    "patch": "@@ -1,13 +0,0 @@\n-package pl.kamilprzenioslo.apzumi;\n-\n-import org.junit.jupiter.api.Test;\n-import org.springframework.boot.test.context.SpringBootTest;\n-\n-@SpringBootTest\n-class ApzumiApplicationTests {\n-\n-  @Test\n-  void contextLoads() {\n-  }\n-\n-}"
  },
  {
    "sha": "431f447f8011eb04afbd88f8ba4c951d49dd97a9",
    "filename": "src/test/java/pl/kamilprzenioslo/apzumi/controllers/PostControllerIntegrationTest.java",
    "status": "added",
    "additions": 209,
    "deletions": 0,
    "changes": 209,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/controllers/PostControllerIntegrationTest.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/controllers/PostControllerIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/java/pl/kamilprzenioslo/apzumi/controllers/PostControllerIntegrationTest.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,209 @@\n+package pl.kamilprzenioslo.apzumi.controllers;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.flywaydb.test.FlywayTestExecutionListener;\n+import org.flywaydb.test.annotation.FlywayTest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.TestExecutionListeners;\n+import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+import pl.kamilprzenioslo.apzumi.persistence.repositories.PostRepository;\n+\n+@ActiveProfiles(\"test\")\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = \"scheduling.enabled=true\")\n+@TestExecutionListeners({\n+  DependencyInjectionTestExecutionListener.class,\n+  FlywayTestExecutionListener.class\n+})\n+class PostControllerIntegrationTest {\n+\n+  @Autowired private WebTestClient webTestClient;\n+  @Autowired private PostRepository postRepository;\n+\n+  @FlywayTest\n+  @BeforeEach\n+  void setUp() {}\n+\n+  @Test\n+  void whenGetAll_thenReturnAllNonDeletedPostsWithoutUserId() {\n+    webTestClient\n+        .get()\n+        .uri(\"/posts\")\n+        .accept(MediaType.APPLICATION_JSON)\n+        .exchange()\n+        .expectStatus()\n+        .isOk()\n+        .expectBodyList(Post.class)\n+        .consumeWith(\n+            result -> {\n+              List<Post> posts = result.getResponseBody();\n+              assertThat(posts, hasSize(3));\n+              assertThat(\n+                  posts.stream().map(Post::getUserId).collect(Collectors.toList()),\n+                  everyItem(nullValue()));\n+            });\n+  }\n+\n+  @Test\n+  void givenExistentPostId_WhenGet_ThenReturnCorrectPostWithoutUserId() {\n+    webTestClient\n+        .get()\n+        .uri(\"/posts/{id}\", 1)\n+        .accept(MediaType.APPLICATION_JSON)\n+        .exchange()\n+        .expectStatus()\n+        .isOk()\n+        .expectBody(Post.class)\n+        .consumeWith(\n+            result -> {\n+              Post post = result.getResponseBody();\n+              assertNotNull(post);\n+              assertNull(post.getUserId());\n+              assertEquals(1, post.getId());\n+              assertEquals(\"great\", post.getTitle());\n+              assertEquals(\"indeed great\", post.getBody());\n+            });\n+  }\n+\n+  @Test\n+  void givenDeletedPostId_WhenGet_ThenReturn404Status() {\n+    webTestClient.get().uri(\"/posts/{id}\", 3).exchange().expectStatus().isNotFound();\n+  }\n+\n+  @Test\n+  void givenNonExistentPostId_WhenGet_ThenReturn404Status() {\n+    webTestClient.get().uri(\"/posts/{id}\", 222).exchange().expectStatus().isNotFound();\n+  }\n+\n+  @Test\n+  void givenExistentPostId_WhenDelete_ThenIsDeletedAndReturns200Status() {\n+    webTestClient.delete().uri(\"/posts/{id}\", 1).exchange().expectStatus().isOk();\n+    boolean deleted = !postRepository.existsById(1);\n+\n+    assertTrue(deleted);\n+  }\n+\n+  @Test\n+  void givenNonExistentPostId_WhenDelete_ThenReturn404Status() {\n+    webTestClient.delete().uri(\"/posts/{id}\", 222).exchange().expectStatus().isNotFound();\n+  }\n+\n+  @Test\n+  void givenNonExistentPostId_WhenPatch_ThenReturn404Status() {\n+    Post patchPost = new Post();\n+    patchPost.setTitle(\"new title\");\n+    webTestClient\n+        .patch()\n+        .uri(\"/posts/{id}\", 222)\n+        .bodyValue(patchPost)\n+        .exchange()\n+        .expectStatus()\n+        .isNotFound();\n+  }\n+\n+  @Test\n+  void givenCorrectDtoWithChanges_WhenPatch_ThenPatchAndReturnPost() {\n+    Post patchPost = new Post();\n+    patchPost.setBody(\"fancy new body\");\n+    patchPost.setTitle(\"upgraded title\");\n+\n+    webTestClient\n+        .patch()\n+        .uri(\"/posts/{id}\", 5)\n+        .accept(MediaType.APPLICATION_JSON)\n+        .bodyValue(patchPost)\n+        .exchange()\n+        .expectStatus()\n+        .isOk()\n+        .expectBody(Post.class)\n+        .consumeWith(\n+            result -> {\n+              Post post = result.getResponseBody();\n+              assertNotNull(post);\n+              assertEquals(5, post.getId());\n+              assertEquals(\"fancy new body\", post.getBody());\n+              assertEquals(\"upgraded title\", post.getTitle());\n+            });\n+  }\n+\n+  @Test\n+  void givenDtoWithIdChange_WhenPatch_ThenReturn400Status() {\n+    Post patchPost = new Post();\n+    patchPost.setId(3);\n+\n+    webTestClient\n+        .patch()\n+        .uri(\"/posts/{id}\", 1)\n+        .bodyValue(patchPost)\n+        .exchange()\n+        .expectStatus()\n+        .isBadRequest();\n+  }\n+\n+  @Test\n+  void givenTitleFragment_WhenGet_ThenReturnPostsContainingTitle() {\n+    webTestClient\n+        .get()\n+        .uri(uriBuilder -> uriBuilder.path(\"/posts\").queryParam(\"title\", \"re\").build())\n+        .accept(MediaType.APPLICATION_JSON)\n+        .exchange()\n+        .expectStatus()\n+        .isOk()\n+        .expectBodyList(Post.class)\n+        .consumeWith(\n+            result -> {\n+              List<Post> foundPosts = result.getResponseBody();\n+              assertNotNull(foundPosts);\n+              assertThat(foundPosts, hasSize(2));\n+\n+              List<String> postTitles =\n+                  foundPosts.stream().map(Post::getTitle).collect(Collectors.toList());\n+\n+              assertThat(postTitles, everyItem(containsString(\"re\")));\n+            });\n+  }\n+\n+  @Test\n+  void whenFetchPosts_ThenReturn202StatusAndFetchAndReplaceAllPosts() {\n+    webTestClient\n+        .post()\n+        .uri(uriBuilder -> uriBuilder.path(\"/posts/fetch-requests\").build())\n+        .accept(MediaType.APPLICATION_JSON)\n+        .exchange()\n+        .expectStatus()\n+        .isAccepted();\n+\n+    await().atMost(Duration.ofSeconds(3)).until(() -> postRepository.count(), equalTo(100L));\n+    await()\n+        .atMost(Duration.ofSeconds(3))\n+        .until(() -> postRepository.findById(1).orElseThrow().getTitle(), not(\"great\"));\n+    await()\n+        .atMost(Duration.ofSeconds(3))\n+        .until(() -> postRepository.findById(2).orElseThrow().getTitle(), not(\"even better\"));\n+    await()\n+        .atMost(Duration.ofSeconds(3))\n+        .until(() -> postRepository.findById(5).orElseThrow().getTitle(), not(\"Hello there!\"));\n+  }\n+}"
  },
  {
    "sha": "4ee5ebf79fd4a38a1365a79779c1fea852918e89",
    "filename": "src/test/java/pl/kamilprzenioslo/apzumi/mappers/PostMapperTest.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/mappers/PostMapperTest.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/mappers/PostMapperTest.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/java/pl/kamilprzenioslo/apzumi/mappers/PostMapperTest.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,57 @@\n+package pl.kamilprzenioslo.apzumi.mappers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mapstruct.factory.Mappers;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+import pl.kamilprzenioslo.apzumi.persistence.entities.PostEntity;\n+\n+class PostMapperTest {\n+\n+  private final PostMapper postMapper = Mappers.getMapper(PostMapper.class);\n+  private PostEntity postEntity;\n+\n+  @BeforeEach\n+  void setUp() {\n+    postEntity = new PostEntity(1, 2, \"a title\", \"some text\");\n+  }\n+\n+  @Test\n+  void givenSingleChange_WhenPatch_ThenPatchCorrectly() {\n+    Post patchPost = new Post();\n+    patchPost.setTitle(\"new title\");\n+\n+    postMapper.patchEntity(patchPost, postEntity);\n+\n+    assertEquals(1, postEntity.getUserId());\n+    assertEquals(2, postEntity.getId());\n+    assertEquals(\"new title\", postEntity.getTitle());\n+    assertEquals(\"some text\", postEntity.getBody());\n+  }\n+\n+  @Test\n+  void givenNoChanges_WhenPatch_ThenNothingIsChanged() {\n+    Post patchPost = new Post();\n+\n+    postMapper.patchEntity(patchPost, postEntity);\n+\n+    assertEquals(1, postEntity.getUserId());\n+    assertEquals(2, postEntity.getId());\n+    assertEquals(\"a title\", postEntity.getTitle());\n+    assertEquals(\"some text\", postEntity.getBody());\n+  }\n+\n+  @Test\n+  void givenAllValuesChanged_whenPatch_ThenPatchCorrectly() {\n+    Post patchPost = new Post(10, 20, \"new title\", \"NEW body!\");\n+\n+    postMapper.patchEntity(patchPost, postEntity);\n+\n+    assertEquals(10, postEntity.getUserId());\n+    assertEquals(20, postEntity.getId());\n+    assertEquals(\"new title\", postEntity.getTitle());\n+    assertEquals(\"NEW body!\", postEntity.getBody());\n+  }\n+}"
  },
  {
    "sha": "15cfb5428cb7c7db924ba0922825d476b4258658",
    "filename": "src/test/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepositoryTest.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepositoryTest.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/java/pl/kamilprzenioslo/apzumi/persistence/repositories/PostRepositoryTest.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,41 @@\n+package pl.kamilprzenioslo.apzumi.persistence.repositories;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.data.domain.Sort;\n+import pl.kamilprzenioslo.apzumi.persistence.entities.PostEntity;\n+\n+@DataJpaTest\n+class PostRepositoryTest {\n+\n+  @Autowired PostRepository postRepository;\n+\n+  @Test\n+  void givenPosts_WhenUpdateUnmodifiedPosts_ThenUpdateCorrectly() {\n+    List<PostEntity> posts =\n+        List.of(\n+            new PostEntity(1, 1, \"aaa\", \"AAA\"),\n+            new PostEntity(1, 2, \"bbb\", \"BBB\"),\n+            new PostEntity(555, 3, \"ccc\", \"CCC\"),\n+            new PostEntity(2, 4, \"ddd\", \"DDD\"),\n+            new PostEntity(3, 5, \"eee\", \"EEE\"));\n+\n+    posts.forEach(postRepository::updatePostIfUnmodified);\n+    List<PostEntity> postEntities = postRepository.findAll(Sort.by(\"id\"));\n+\n+    assertThat(postEntities, hasSize(3));\n+    assertEquals(\"aaa\", postEntities.get(0).getTitle());\n+    assertEquals(\"AAA\", postEntities.get(0).getBody());\n+    assertEquals(\"even better\", postEntities.get(1).getTitle());\n+    assertEquals(\"or not\", postEntities.get(1).getBody());\n+    assertEquals(\"eee\", postEntities.get(2).getTitle());\n+    assertEquals(\"EEE\", postEntities.get(2).getBody());\n+    assertEquals(5, postEntities.get(2).getId());\n+  }\n+}"
  },
  {
    "sha": "7787df2908818b71b09be115de522f0daa4d9f00",
    "filename": "src/test/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImplTest.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImplTest.java",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/java/pl/kamilprzenioslo/apzumi/services/impl/PostServiceImplTest.java?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,106 @@\n+package pl.kamilprzenioslo.apzumi.services.impl;\n+\n+import static io.netty.handler.codec.http.HttpHeaderValues.APPLICATION_JSON;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import pl.kamilprzenioslo.apzumi.dtos.Post;\n+import pl.kamilprzenioslo.apzumi.mappers.PostMapper;\n+import pl.kamilprzenioslo.apzumi.persistence.entities.PostEntity;\n+import pl.kamilprzenioslo.apzumi.persistence.repositories.PostRepository;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostServiceImplTest {\n+\n+  private static final MockWebServer mockWebServer = new MockWebServer();\n+  private final ObjectMapper objectMapper = new ObjectMapper();\n+  @Mock private PostRepository postRepository;\n+  @Mock private PostMapper postMapper;\n+  private PostServiceImpl postService;\n+  private final List<PostEntity> publicApiPosts =\n+      List.of(\n+          new PostEntity(1, 1, \"aaa\", \"AAA\"),\n+          new PostEntity(1, 2, \"bbb\", \"BBB\"),\n+          new PostEntity(4, 3, \"ccc\", \"CCC\"),\n+          new PostEntity(2, 4, \"ddd\", \"DDD\"),\n+          new PostEntity(3, 5, \"eee\", \"EEE\"));\n+\n+  @BeforeEach\n+  void setUp() {\n+    postService =\n+        new PostServiceImpl(\n+            postRepository, postMapper, WebClient.builder(), mockWebServer.url(\"/\").toString());\n+  }\n+\n+  @BeforeAll\n+  static void setup() throws IOException {\n+    mockWebServer.start();\n+  }\n+\n+  @AfterAll\n+  static void tearDown() throws IOException {\n+    mockWebServer.shutdown();\n+  }\n+\n+  @Test\n+  void givenExistentPost_WhenPatch_ThenEntityIsMarkedAsModifiedByUser() {\n+    Post postWithChanges = new Post(null, null, \"c\", \"d\");\n+    PostEntity postEntity = new PostEntity(1, 1, \"a\", \"b\");\n+\n+    when(postRepository.findById(1)).thenReturn(Optional.of(postEntity));\n+    postService.patch(1, postWithChanges);\n+\n+    verify(postRepository).save(argThat(PostEntity::isModifiedByUser));\n+  }\n+\n+  @Test\n+  void givenPosts_WhenFetchAndUpdateUnmodifiedPosts_ThenAllPostsGetPassedToRepository()\n+      throws JsonProcessingException {\n+    MockResponse mockResponse =\n+        new MockResponse()\n+            .setResponseCode(HttpStatus.OK.value())\n+            .setHeader(HttpHeaders.CONTENT_TYPE, APPLICATION_JSON)\n+            .setBody(objectMapper.writeValueAsString(publicApiPosts));\n+    mockWebServer.enqueue(mockResponse);\n+\n+    postService.fetchAndUpdateUnmodifiedPosts();\n+\n+    verify(postRepository, timeout(2000).times(5))\n+        .updatePostIfUnmodified(argThat(publicApiPosts::contains));\n+  }\n+\n+  @Test\n+  void givenPosts_WhenFetchAndReplaceAllPosts_ThenAllPostsGetReplaced()\n+      throws JsonProcessingException {\n+    MockResponse mockResponse =\n+        new MockResponse()\n+            .setResponseCode(HttpStatus.OK.value())\n+            .setHeader(HttpHeaders.CONTENT_TYPE, APPLICATION_JSON)\n+            .setBody(objectMapper.writeValueAsString(publicApiPosts));\n+    mockWebServer.enqueue(mockResponse);\n+\n+    postService.fetchAndReplaceAllPosts();\n+\n+    verify(postRepository, timeout(2000)).deleteAllInBatch();\n+    verify(postRepository, timeout(2000).times(5)).save(argThat(publicApiPosts::contains));\n+  }\n+}"
  },
  {
    "sha": "0025c5e65f3602af537588b8e25b5c9fa0cc722b",
    "filename": "src/test/resources/application-test.properties",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/resources/application-test.properties",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/resources/application-test.properties",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/resources/application-test.properties?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,5 @@\n+spring.datasource.url=jdbc:h2:mem:test-db;\n+spring.datasource.username=sa\n+spring.datasource.password=sa\n+logging.level.web=TRACE\n+scheduling.enabled=false"
  },
  {
    "sha": "9b04a771ff54760022bb404b8a663b112ec99643",
    "filename": "src/test/resources/db/migration/V2__insert_test_data.sql",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Loreth/apzumi-recruitment-task/blob/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/resources/db/migration/V2__insert_test_data.sql",
    "raw_url": "https://github.com/Loreth/apzumi-recruitment-task/raw/20b9bc80e3c10036efa36fc524f3b49ab934492f/src/test/resources/db/migration/V2__insert_test_data.sql",
    "contents_url": "https://api.github.com/repos/Loreth/apzumi-recruitment-task/contents/src/test/resources/db/migration/V2__insert_test_data.sql?ref=20b9bc80e3c10036efa36fc524f3b49ab934492f",
    "patch": "@@ -0,0 +1,4 @@\n+INSERT INTO POST(USER_ID, ID, TITLE, BODY, VERSION, MODIFIED_BY_USER)\n+VALUES (1, 1, 'great', 'indeed great', 0, FALSE),\n+       (1, 2, 'even better', 'or not', 1, TRUE),\n+       (3, 5, 'Hello there!', 'General Kenobi...', 0, FALSE);"
  }
]
