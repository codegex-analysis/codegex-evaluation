[
  {
    "sha": "e5077212eaa3e24f041034f3cbb825b8f99d184f",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/build.gradle",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/build.gradle",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/build.gradle?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -61,6 +61,7 @@ dependencies {\n \n     testImplementation \"com.facebook.presto:presto-tests:${prestoVersion}\"\n     testImplementation \"com.facebook.airlift:testing:${airliftTestingVersion}\"\n+    testImplementation \"com.starburstdata:starburst-spotify-docker-client:${spotifyDockerClientVersion}\"\n \n     compileOnly \"io.airlift:slice:${airliftSliceVersion}\"\n     compileOnly \"io.airlift:units:${airliftUnitsVersion}\"\n@@ -96,6 +97,14 @@ distributions {\n     }\n }\n \n+def integration = project.hasProperty(\"integration\")\n+\n test {\n-    useTestNG()\n-}\n+    dependsOn 'cleanTest'\n+    useTestNG() {\n+        suites \"src/test/unit-test.xml\"\n+        if (integration) {\n+            suites \"src/test/integration-test.xml\"\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0b5d4568f68d87b5b477f897564517000954bc94",
    "filename": "gradle.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/gradle.properties",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/gradle.properties",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/gradle.properties?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -28,5 +28,6 @@ pravegaVersion=0.9.0\n pravegaSchemaRegistryVersion=0.2.0\n prestoVersion=0.247\n protobufVersion=3.11.4\n+spotifyDockerClientVersion=8.11.7-0.6\n zookeeperVersion=3.5.7\n zookeeperClientVersion=0.10"
  },
  {
    "sha": "0b5a94c8675dcc04a8faa200dbc7c4938620aff1",
    "filename": "src/main/java/io/pravega/connectors/presto/PravegaPlugin.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaPlugin.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaPlugin.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/PravegaPlugin.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -26,7 +26,7 @@\n import static java.util.Objects.requireNonNull;\n \n /**\n- * Presto plugin to use Apache Pravega as a data source.\n+ * Presto plugin to use Pravega as a data source.\n  */\n public class PravegaPlugin\n         implements Plugin"
  },
  {
    "sha": "77454d31f6c4e435a964064d7a435812210de908",
    "filename": "src/main/java/io/pravega/connectors/presto/PravegaStreamDescription.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaStreamDescription.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaStreamDescription.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/PravegaStreamDescription.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -57,6 +57,16 @@ public PravegaStreamDescription(\n         this.event = requireNonNull(event, \"message is null\");\n     }\n \n+    public PravegaStreamDescription(PravegaStreamDescription streamDescription, List<PravegaStreamFieldGroup> event)\n+    {\n+        this.tableName = streamDescription.tableName;\n+        this.schemaName = streamDescription.schemaName;\n+        this.objectName = streamDescription.objectName;\n+        this.objectType = streamDescription.objectType;\n+        this.objectArgs = streamDescription.objectArgs;\n+        this.event = Optional.of(event);\n+    }\n+\n     @JsonProperty\n     public Optional<String> getSchemaName()\n     {"
  },
  {
    "sha": "1164df46ff479ba44ed2eaf432c0d9f3d2dcbee0",
    "filename": "src/main/java/io/pravega/connectors/presto/PravegaStreamFieldGroup.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaStreamFieldGroup.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaStreamFieldGroup.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/PravegaStreamFieldGroup.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -48,6 +48,14 @@ public PravegaStreamFieldGroup(\n         this.fields = fields;\n     }\n \n+    public PravegaStreamFieldGroup(PravegaStreamFieldGroup fieldGroup, String dataSchema, List<PravegaStreamFieldDescription> fields)\n+    {\n+        this.dataFormat = fieldGroup.dataFormat;\n+        this.mapping = fieldGroup.mapping;\n+        this.dataSchema = Optional.of(dataSchema);\n+        this.fields = Optional.of(fields);\n+    }\n+\n     @JsonProperty\n     public String getDataFormat()\n     {"
  },
  {
    "sha": "b638f331ca769cccb2637b6cf2a3793da8ee2b89",
    "filename": "src/main/java/io/pravega/connectors/presto/PravegaTableDescriptionSupplier.java",
    "status": "modified",
    "additions": 24,
    "deletions": 309,
    "changes": 333,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaTableDescriptionSupplier.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/PravegaTableDescriptionSupplier.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/PravegaTableDescriptionSupplier.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -13,19 +13,17 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package io.pravega.connectors.presto;\n \n import com.facebook.airlift.json.JsonCodec;\n import com.facebook.airlift.log.Logger;\n-import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.cache.Cache;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Streams;\n-import com.google.protobuf.Descriptors;\n import io.pravega.client.ClientConfig;\n import io.pravega.client.admin.StreamManager;\n import io.pravega.client.stream.Stream;\n@@ -35,12 +33,6 @@\n import io.pravega.schemaregistry.contract.data.GroupProperties;\n import io.pravega.schemaregistry.contract.data.SchemaWithVersion;\n import io.pravega.schemaregistry.contract.data.SerializationFormat;\n-import io.pravega.schemaregistry.serializer.json.schemas.JSONSchema;\n-import org.everit.json.schema.BooleanSchema;\n-import org.everit.json.schema.NumberSchema;\n-import org.everit.json.schema.ObjectSchema;\n-import org.everit.json.schema.Schema;\n-import org.everit.json.schema.StringSchema;\n \n import javax.inject.Inject;\n \n@@ -55,33 +47,25 @@\n import java.util.Locale;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n-import static com.facebook.presto.common.type.BigintType.BIGINT;\n-import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n-import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n-import static com.facebook.presto.common.type.VarbinaryType.VARBINARY;\n-import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n import static io.pravega.connectors.presto.ProtobufCommon.encodeSchema;\n import static io.pravega.connectors.presto.util.PravegaNameUtils.groupId;\n import static io.pravega.connectors.presto.util.PravegaNameUtils.kvFieldMapping;\n import static io.pravega.connectors.presto.util.PravegaNameUtils.kvTable;\n import static io.pravega.connectors.presto.util.PravegaNameUtils.multiSourceStream;\n import static io.pravega.connectors.presto.util.PravegaNameUtils.temp_streamNameToTableName;\n import static io.pravega.connectors.presto.util.PravegaNameUtils.temp_tableNameToStreamName;\n-import static io.pravega.connectors.presto.util.PravegaSchemaUtils.AVRO;\n import static io.pravega.connectors.presto.util.PravegaSchemaUtils.GROUP_PROPERTIES_INLINE_KEY;\n import static io.pravega.connectors.presto.util.PravegaSchemaUtils.GROUP_PROPERTIES_INLINE_KV_KEY;\n import static io.pravega.connectors.presto.util.PravegaSchemaUtils.GROUP_PROPERTIES_INLINE_KV_VALUE;\n import static io.pravega.connectors.presto.util.PravegaSchemaUtils.INLINE_SUFFIX;\n-import static io.pravega.connectors.presto.util.PravegaSchemaUtils.NESTED_RECORD_SEPARATOR;\n import static io.pravega.connectors.presto.util.PravegaSchemaUtils.readSchema;\n+import static io.pravega.connectors.presto.util.PravegaStreamDescUtils.mapFieldsFromSchema;\n import static java.nio.file.Files.readAllBytes;\n import static java.util.Arrays.asList;\n import static java.util.Objects.requireNonNull;\n-import static org.apache.avro.Schema.Type.RECORD;\n \n // pravega scope is a namespace for streams.  stream is unique within scope.\n // presto schema is like a database, with collection of tables.\n@@ -130,6 +114,16 @@\n                 .build();\n     }\n \n+    @VisibleForTesting\n+    public PravegaTableDescriptionSupplier(PravegaConnectorConfig pravegaConnectorConfig,\n+                                           Cache<String, Object> schemaCache,\n+                                           Cache<PravegaTableName, Optional<PravegaStreamDescription>> tableCache)\n+    {\n+        this.pravegaConnectorConfig = pravegaConnectorConfig;\n+        this.schemaCache = schemaCache;\n+        this.tableCache = tableCache;\n+    }\n+\n     public List<String> listSchemas()\n     {\n         // if any expired, retrieve list again from pravega\n@@ -341,6 +335,12 @@ else if (kvTable(table)) {\n         return table;\n     }\n \n+    /**\n+     * construct PravegaStreamFieldGroup by looking up schema in schema registry\n+     *\n+     * @param schemaTableName\n+     * @return\n+     */\n     private Optional<List<PravegaStreamFieldGroup>> fieldGroupsFromSchemaRegistry(final SchemaTableName schemaTableName)\n     {\n         log.info(\"look up description of '%s' from pravega\", schemaTableName);\n@@ -356,19 +356,19 @@ else if (kvTable(table)) {\n         GroupProperties properties =\n                 registryClient.getGroupProperties(groupName);\n \n-        List<SchemaWithVersion> schemas =\n-                registryClient.getSchemas(groupName);\n+        List<SchemaWithVersion> schemas = registryClient.getSchemas(groupName);\n         if (schemas.size() == 0 || schemas.size() > 2) {\n             throw new IllegalStateException(schemaTableName + \" has \" + schemas.size() + \" registered schemas.  expecting either 1 or 2\");\n         }\n \n-        for (int i = 0; i < schemas.size(); i++) {\n-            SerializationFormat format = schemas.get(i).getSchemaInfo().getSerializationFormat();\n+        // kv table will have > 1 schema.  key+value likely different types\n+        boolean kv = schemas.size() > 1;\n \n-            // kv table will have > 1 schema.  key+value likely different types\n+        for (int i = 0; i < schemas.size(); i++) {\n             // colPrefix used for display so can differentiate between fields from key or value\n-            boolean kv = schemas.size() > 1;\n             String colPrefix = kv ? kvFieldMapping(i) : \"\";\n+\n+            SerializationFormat format = schemas.get(i).getSchemaInfo().getSerializationFormat();\n             fieldGroups.add(new PravegaStreamFieldGroup(\n                     dataFormat(properties.getProperties(), format, kv, i),\n                     Optional.of(colPrefix),\n@@ -475,291 +475,6 @@ hopefully this can all go away (see linked issue 58 above)\n         return finalFormat + (groupProperties.containsKey(key) ? INLINE_SUFFIX : \"\");\n     }\n \n-    /**\n-     * map protobuf java type -> presto sql type\n-     *\n-     * @param fieldDescriptor\n-     * @return\n-     */\n-    private static Type typeFromSchema(Descriptors.FieldDescriptor fieldDescriptor)\n-    {\n-        switch (fieldDescriptor.getJavaType()) {\n-            case STRING:\n-                return createUnboundedVarcharType();\n-\n-            case INT:\n-            case LONG:\n-                return BIGINT;\n-\n-            case FLOAT:\n-            case DOUBLE:\n-                return DOUBLE;\n-\n-            case BOOLEAN:\n-                return BOOLEAN;\n-\n-            case BYTE_STRING:\n-                return VARBINARY;\n-\n-            default:\n-                throw new RuntimeException(\"unsupported type \" + fieldDescriptor);\n-        }\n-    }\n-\n-    /**\n-     * map json schema type -> presto sql type\n-     *\n-     * @param schema\n-     * @return\n-     */\n-    private static Type typeFromSchema(Schema schema)\n-    {\n-        if (schema instanceof NumberSchema) {\n-            return ((NumberSchema) schema).requiresInteger()\n-                    ? BIGINT\n-                    : DOUBLE;\n-        }\n-        else if (schema instanceof BooleanSchema) {\n-            return BOOLEAN;\n-        }\n-        else if (schema instanceof StringSchema) {\n-            return createUnboundedVarcharType();\n-        }\n-        else {\n-            throw new RuntimeException(\"unsupported schema \" + schema);\n-        }\n-    }\n-\n-    /**\n-     * map avro schema type to presto sql type\n-     *\n-     * @param schema\n-     * @return\n-     */\n-    private static Type typeFromSchema(org.apache.avro.Schema schema)\n-    {\n-        // refer to AvroColumnDecoder#isSupportedType\n-\n-        switch (schema.getType()) {\n-            case FIXED:\n-            case STRING:\n-                return createUnboundedVarcharType();\n-\n-            case INT:\n-            case LONG:\n-                return BIGINT;\n-\n-            case FLOAT:\n-            case DOUBLE:\n-                return DOUBLE;\n-\n-            case BOOLEAN:\n-                return BOOLEAN;\n-\n-            case BYTES:\n-                return VARBINARY;\n-\n-            case MAP:\n-            case ARRAY:\n-                // TODO: ^^ handle these https://github.com/pravega/pravega-sql/issues/65\n-\n-            case RECORD:\n-            case ENUM:\n-            case UNION:\n-            default:\n-                throw new RuntimeException(\"unexpected type \" + schema);\n-        }\n-    }\n-\n-    /**\n-     * return lists of common field definitions\n-     * uses list of fields from provided schema; schema is different depending on serialization format\n-     *\n-     * @param format\n-     * @param schemaWithVersion\n-     * @return\n-     */\n-    private static List<PravegaStreamFieldDescription> mapFieldsFromSchema(\n-            String namePrefix,\n-            SerializationFormat format,\n-            SchemaWithVersion schemaWithVersion)\n-    {\n-        switch (format) {\n-            case Json:\n-                ObjectSchema objectSchema =\n-                        (ObjectSchema) JSONSchema.from(schemaWithVersion.getSchemaInfo()).getSchema();\n-                return mapTable(namePrefix, new JsonSchema(objectSchema));\n-\n-            case Avro:\n-            case Custom: // re: Custom - definition for schema itself Custom is always Avro (only custom impl. is csv)\n-                org.apache.avro.Schema schema =\n-                        new org.apache.avro.Schema.Parser().parse(\n-                                new String(schemaWithVersion.getSchemaInfo().getSchemaData().array(), StandardCharsets.UTF_8));\n-                return mapTable(namePrefix, new AvroSchema(schema, format == SerializationFormat.Custom));\n-\n-            case Protobuf:\n-                return mapTable(namePrefix, new ProtobufSchema(ProtobufCommon.descriptorFor(schemaWithVersion)));\n-\n-            default:\n-                throw new IllegalArgumentException(\"unexpected format \" + format);\n-        }\n-    }\n-\n-    private static List<PravegaStreamFieldDescription> mapFieldsFromSchema(String namePrefix, String format, String schemaString)\n-    {\n-        // schemaString defined as human-readable string in local file.  only avro supported now.\n-        switch (format) {\n-            case AVRO:\n-                org.apache.avro.Schema schema =\n-                        new org.apache.avro.Schema.Parser().parse(schemaString);\n-                return mapTable(namePrefix, new AvroSchema(schema, false));\n-\n-            default:\n-                throw new UnsupportedOperationException(\"unexpected format \" + format);\n-        }\n-    }\n-\n-    private static class SchemaColumn\n-    {\n-        String name;\n-        String mapping;\n-        Type type;\n-\n-        SchemaColumn(String name, String mapping, Type type)\n-        {\n-            this.name = name;\n-            this.mapping = mapping;\n-            this.type = type;\n-        }\n-    }\n-\n-    static class SchemaWrapper\n-    {\n-        List<SchemaField> fields = new ArrayList<>();\n-    }\n-\n-    static class SchemaField\n-    {\n-        String name;\n-        Type type;\n-        boolean record;\n-        SchemaWrapper schema;\n-        int ordinalPosition;\n-\n-        SchemaField(String name, Type type, boolean record, SchemaWrapper schema)\n-        {\n-            this(name, type, record, schema, -1);\n-        }\n-\n-        SchemaField(String name, Type type, boolean record, SchemaWrapper schema, int ordinalPosition)\n-        {\n-            this.name = name;\n-            this.type = type;\n-            this.record = record;\n-            this.schema = schema;\n-            this.ordinalPosition = ordinalPosition;\n-        }\n-    }\n-\n-    static class JsonSchema\n-            extends SchemaWrapper\n-    {\n-        JsonSchema(ObjectSchema schema)\n-        {\n-            schema.getPropertySchemas().forEach((key, value) -> {\n-                boolean record = value instanceof ObjectSchema;\n-                fields.add(new SchemaField(key,\n-                        record ? null : typeFromSchema(value),\n-                        record,\n-                        record ? new JsonSchema((ObjectSchema) value) : null));\n-            });\n-        }\n-    }\n-\n-    static class ProtobufSchema\n-            extends SchemaWrapper\n-    {\n-        ProtobufSchema(Descriptors.Descriptor schema)\n-        {\n-            schema.getFields().forEach(f -> {\n-                boolean record = f.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE;\n-                fields.add(new SchemaField(f.getJsonName(),\n-                        record ? null : typeFromSchema(f),\n-                        record,\n-                        record ? new ProtobufSchema(f.getMessageType()) : null));\n-            });\n-        }\n-    }\n-\n-    static class AvroSchema\n-            extends SchemaWrapper\n-    {\n-        AvroSchema(org.apache.avro.Schema schema, boolean customCsv)\n-        {\n-            final AtomicInteger position = new AtomicInteger();\n-            schema.getFields().forEach(f -> {\n-                boolean record = f.schema().getType() == RECORD;\n-                fields.add(new SchemaField(f.name(),\n-                        record ? null : typeFromSchema(f.schema()),\n-                        record,\n-                        record ? new AvroSchema(f.schema(), customCsv) : null,\n-                        customCsv ? position.getAndIncrement() : -1));\n-            });\n-        }\n-    }\n-\n-    private static List<PravegaStreamFieldDescription> mapTable(String namePrefix, SchemaWrapper schema)\n-    {\n-        return mapFieldsFromSchema(mapColumns(namePrefix, null /* mappingPrefix */, schema));\n-    }\n-\n-    private static List<SchemaColumn> mapColumns(String namePrefix, String mappingPrefix, SchemaWrapper schema)\n-    {\n-        List<SchemaColumn> columnList = new ArrayList<>();\n-        schema.fields.forEach(field -> {\n-            String name = nestedPrefixFor(namePrefix, field.name);\n-            // for csv we use only position.  for avro, json, etc, can be path into nested object\n-            String mapping = field.ordinalPosition >= 0\n-                    ? String.valueOf(field.ordinalPosition)\n-                    : nestedPrefixFor(mappingPrefix, field.name);\n-            if (field.record) {\n-                columnList.addAll(mapColumns(name, mapping, field.schema));\n-            }\n-            else {\n-                columnList.add(new SchemaColumn(name, mapping, field.type));\n-            }\n-        });\n-        return columnList;\n-    }\n-\n-    private static String nestedPrefixFor(String prefix, String name)\n-    {\n-        // (record1, field1) -> record1/field1\n-        return prefix == null || prefix.isEmpty()\n-                ? name\n-                : prefix + NESTED_RECORD_SEPARATOR + name;\n-    }\n-\n-    /**\n-     * create field description from list of name,mapping,type tuples.  each pair is a field in the schema.\n-     * @param schemaColumns\n-     * @return\n-     */\n-    static List<PravegaStreamFieldDescription> mapFieldsFromSchema(List<SchemaColumn> schemaColumns)\n-    {\n-        List<PravegaStreamFieldDescription> fields = new ArrayList<>();\n-        schemaColumns.forEach(sc -> {\n-            fields.add(new PravegaStreamFieldDescription(sc.name,\n-                    sc.type,\n-                    sc.mapping,\n-                    \"\",\n-                    null,\n-                    null,\n-                    false));\n-        });\n-        return fields;\n-    }\n-\n     private static Optional<String> dataSchema(SerializationFormat format, SchemaWithVersion schemaWithVersion)\n     {\n         // it is intentional that nothing is returned for Custom"
  },
  {
    "sha": "adfed8cae7e96bf2f9c5c334137267a9b1d8531d",
    "filename": "src/main/java/io/pravega/connectors/presto/util/PravegaStreamDescUtils.java",
    "status": "added",
    "additions": 346,
    "deletions": 0,
    "changes": 346,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/util/PravegaStreamDescUtils.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/main/java/io/pravega/connectors/presto/util/PravegaStreamDescUtils.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/util/PravegaStreamDescUtils.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,346 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.util;\n+\n+import com.facebook.presto.common.type.Type;\n+import com.google.protobuf.Descriptors;\n+import io.pravega.connectors.presto.PravegaStreamFieldDescription;\n+import io.pravega.connectors.presto.ProtobufCommon;\n+import io.pravega.schemaregistry.contract.data.SchemaWithVersion;\n+import io.pravega.schemaregistry.contract.data.SerializationFormat;\n+import io.pravega.schemaregistry.serializer.json.schemas.JSONSchema;\n+import org.everit.json.schema.BooleanSchema;\n+import org.everit.json.schema.NumberSchema;\n+import org.everit.json.schema.ObjectSchema;\n+import org.everit.json.schema.Schema;\n+import org.everit.json.schema.StringSchema;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.VarbinaryType.VARBINARY;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static io.pravega.connectors.presto.util.PravegaSchemaUtils.AVRO;\n+import static io.pravega.connectors.presto.util.PravegaSchemaUtils.NESTED_RECORD_SEPARATOR;\n+import static org.apache.avro.Schema.Type.RECORD;\n+\n+/**\n+ * a collection of methods to help create PravegaStreamDescription's\n+ * including mapping\n+ */\n+public class PravegaStreamDescUtils\n+{\n+    private PravegaStreamDescUtils() {}\n+\n+    // SchemaColumn, SchemaField, SchemaWrapper,\n+    private static class SchemaColumn\n+    {\n+        String name;\n+        String mapping;\n+        Type type;\n+\n+        SchemaColumn(String name, String mapping, Type type)\n+        {\n+            this.name = name;\n+            this.mapping = mapping;\n+            this.type = type;\n+        }\n+    }\n+\n+    static class SchemaWrapper\n+    {\n+        List<SchemaField> fields = new ArrayList<>();\n+    }\n+\n+    static class SchemaField\n+    {\n+        String name;\n+        Type type;\n+        boolean record;\n+        SchemaWrapper schema;\n+        int ordinalPosition;\n+\n+        SchemaField(String name, Type type, boolean record, SchemaWrapper schema)\n+        {\n+            this(name, type, record, schema, -1);\n+        }\n+\n+        SchemaField(String name, Type type, boolean record, SchemaWrapper schema, int ordinalPosition)\n+        {\n+            this.name = name;\n+            this.type = type;\n+            this.record = record;\n+            this.schema = schema;\n+            this.ordinalPosition = ordinalPosition;\n+        }\n+    }\n+\n+    static class JsonSchema\n+            extends SchemaWrapper\n+    {\n+        JsonSchema(ObjectSchema schema)\n+        {\n+            schema.getPropertySchemas().forEach((key, value) -> {\n+                boolean record = value instanceof ObjectSchema;\n+                fields.add(new SchemaField(key,\n+                        record ? null : typeFromSchema(value),\n+                        record,\n+                        record ? new JsonSchema((ObjectSchema) value) : null));\n+            });\n+        }\n+    }\n+\n+    static class ProtobufSchema\n+            extends SchemaWrapper\n+    {\n+        ProtobufSchema(Descriptors.Descriptor schema)\n+        {\n+            schema.getFields().forEach(f -> {\n+                boolean record = f.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE;\n+                fields.add(new SchemaField(f.getJsonName(),\n+                        record ? null : typeFromSchema(f),\n+                        record,\n+                        record ? new ProtobufSchema(f.getMessageType()) : null));\n+            });\n+        }\n+    }\n+\n+    static class AvroSchema\n+            extends SchemaWrapper\n+    {\n+        AvroSchema(org.apache.avro.Schema schema, boolean customCsv)\n+        {\n+            final AtomicInteger position = new AtomicInteger();\n+            schema.getFields().forEach(f -> {\n+                boolean record = f.schema().getType() == RECORD;\n+                fields.add(new SchemaField(f.name(),\n+                        record ? null : typeFromSchema(f.schema()),\n+                        record,\n+                        record ? new AvroSchema(f.schema(), customCsv) : null,\n+                        customCsv ? position.getAndIncrement() : -1));\n+            });\n+        }\n+    }\n+\n+    /**\n+     * map protobuf java type -> presto sql type\n+     *\n+     * @param fieldDescriptor\n+     * @return\n+     */\n+    private static Type typeFromSchema(Descriptors.FieldDescriptor fieldDescriptor)\n+    {\n+        switch (fieldDescriptor.getJavaType()) {\n+            case STRING:\n+                return createUnboundedVarcharType();\n+\n+            case INT:\n+            case LONG:\n+                return BIGINT;\n+\n+            case FLOAT:\n+            case DOUBLE:\n+                return DOUBLE;\n+\n+            case BOOLEAN:\n+                return BOOLEAN;\n+\n+            case BYTE_STRING:\n+                return VARBINARY;\n+\n+            default:\n+                throw new RuntimeException(\"unsupported type \" + fieldDescriptor);\n+        }\n+    }\n+\n+    /**\n+     * map json schema type -> presto sql type\n+     *\n+     * @param schema\n+     * @return\n+     */\n+    private static Type typeFromSchema(Schema schema)\n+    {\n+        if (schema instanceof NumberSchema) {\n+            return ((NumberSchema) schema).requiresInteger()\n+                    ? BIGINT\n+                    : DOUBLE;\n+        }\n+        else if (schema instanceof BooleanSchema) {\n+            return BOOLEAN;\n+        }\n+        else if (schema instanceof StringSchema) {\n+            return createUnboundedVarcharType();\n+        }\n+        else {\n+            throw new RuntimeException(\"unsupported schema \" + schema);\n+        }\n+    }\n+\n+    /**\n+     * map avro schema type to presto sql type\n+     *\n+     * @param schema\n+     * @return\n+     */\n+    private static Type typeFromSchema(org.apache.avro.Schema schema)\n+    {\n+        // refer to AvroColumnDecoder#isSupportedType\n+\n+        switch (schema.getType()) {\n+            case FIXED:\n+            case STRING:\n+                return createUnboundedVarcharType();\n+\n+            case INT:\n+            case LONG:\n+                return BIGINT;\n+\n+            case FLOAT:\n+            case DOUBLE:\n+                return DOUBLE;\n+\n+            case BOOLEAN:\n+                return BOOLEAN;\n+\n+            case BYTES:\n+                return VARBINARY;\n+\n+            case MAP:\n+            case ARRAY:\n+                // TODO: ^^ handle these https://github.com/pravega/pravega-sql/issues/65\n+\n+            case RECORD:\n+            case ENUM:\n+            case UNION:\n+            default:\n+                throw new RuntimeException(\"unexpected type \" + schema);\n+        }\n+    }\n+\n+    /**\n+     * return lists of common field definitions\n+     * uses list of fields from provided schema; schema is different depending on serialization format\n+     *\n+     * @param format\n+     * @param schemaWithVersion\n+     * @return\n+     */\n+    public static List<PravegaStreamFieldDescription> mapFieldsFromSchema(\n+            String namePrefix,\n+            SerializationFormat format,\n+            SchemaWithVersion schemaWithVersion)\n+    {\n+        switch (format) {\n+            case Json:\n+                ObjectSchema objectSchema =\n+                        (ObjectSchema) JSONSchema.from(schemaWithVersion.getSchemaInfo()).getSchema();\n+                return mapTable(namePrefix, new JsonSchema(objectSchema));\n+\n+            case Avro:\n+            case Custom: // re: Custom - definition for schema itself Custom is always Avro (only custom impl. is csv)\n+                org.apache.avro.Schema schema =\n+                        new org.apache.avro.Schema.Parser().parse(\n+                                new String(schemaWithVersion.getSchemaInfo().getSchemaData().array(), StandardCharsets.UTF_8));\n+                return mapTable(namePrefix, new AvroSchema(schema, format == SerializationFormat.Custom));\n+\n+            case Protobuf:\n+                return mapTable(namePrefix, new ProtobufSchema(ProtobufCommon.descriptorFor(schemaWithVersion)));\n+\n+            default:\n+                throw new IllegalArgumentException(\"unexpected format \" + format);\n+        }\n+    }\n+\n+    public static List<PravegaStreamFieldDescription> mapFieldsFromSchema(String namePrefix, String format, String schemaString)\n+    {\n+        // schemaString defined as human-readable string in local file.  only avro supported now.\n+        switch (format) {\n+            case AVRO:\n+                org.apache.avro.Schema schema =\n+                        new org.apache.avro.Schema.Parser().parse(schemaString);\n+                return mapTable(namePrefix, new AvroSchema(schema, false));\n+\n+            default:\n+                throw new UnsupportedOperationException(\"unexpected format \" + format);\n+        }\n+    }\n+\n+    private static List<PravegaStreamFieldDescription> mapTable(String namePrefix, SchemaWrapper schema)\n+    {\n+        return mapFieldsFromSchema(mapColumns(namePrefix, null /* mappingPrefix */, schema));\n+    }\n+\n+    private static List<SchemaColumn> mapColumns(String namePrefix, String mappingPrefix, SchemaWrapper schema)\n+    {\n+        List<SchemaColumn> columnList = new ArrayList<>();\n+        schema.fields.forEach(field -> {\n+            String name = nestedPrefixFor(namePrefix, field.name);\n+            // for csv we use only position.  for avro, json, etc, can be path into nested object\n+            String mapping = field.ordinalPosition >= 0\n+                    ? String.valueOf(field.ordinalPosition)\n+                    : nestedPrefixFor(mappingPrefix, field.name);\n+            if (field.record) {\n+                columnList.addAll(mapColumns(name, mapping, field.schema));\n+            }\n+            else {\n+                columnList.add(new SchemaColumn(name, mapping, field.type));\n+            }\n+        });\n+        return columnList;\n+    }\n+\n+    /**\n+     * create field description from list of name,mapping,type tuples.  each pair is a field in the schema.\n+     *\n+     * @param schemaColumns\n+     * @return\n+     */\n+    static List<PravegaStreamFieldDescription> mapFieldsFromSchema(List<SchemaColumn> schemaColumns)\n+    {\n+        List<PravegaStreamFieldDescription> fields = new ArrayList<>();\n+        schemaColumns.forEach(sc -> {\n+            fields.add(new PravegaStreamFieldDescription(sc.name,\n+                    sc.type,\n+                    sc.mapping,\n+                    \"\",\n+                    null,\n+                    null,\n+                    false));\n+        });\n+        return fields;\n+    }\n+\n+    /**\n+     * simply appends 'name' to an existing prefix (if any) using separator\n+     *\n+     * @param prefix starting prefix\n+     * @param name name of the column to prefix\n+     * @return prefix\n+     */\n+    private static String nestedPrefixFor(String prefix, String name)\n+    {\n+        // (record1, field1) -> record1/field1\n+        return prefix == null || prefix.isEmpty()\n+                ? name\n+                : prefix + NESTED_RECORD_SEPARATOR + name;\n+    }\n+}"
  },
  {
    "sha": "647e33dc40d757db8f57932dcf4a1380640ea949",
    "filename": "src/test/integration-test.xml",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/integration-test.xml",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/integration-test.xml",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/integration-test.xml?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,8 @@\n+<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\">\n+<suite name=\"integration\">\n+    <test name=\"integration-test\">\n+        <packages>\n+            <package name=\"io.pravega.connectors.presto.integration\"/>\n+        </packages>\n+    </test>\n+</suite>"
  },
  {
    "sha": "a9943e192d68969d83044fa0151cec07c8c8c45b",
    "filename": "src/test/java/io/pravega/connectors/presto/TestPravegaPlugin.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/TestPravegaPlugin.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/TestPravegaPlugin.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/TestPravegaPlugin.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -13,20 +13,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package io.pravega.connectors.presto;\n \n import com.facebook.presto.spi.connector.Connector;\n import com.facebook.presto.spi.connector.ConnectorFactory;\n import com.facebook.presto.testing.TestingConnectorContext;\n import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n \n import static com.facebook.airlift.testing.Assertions.assertInstanceOf;\n import static com.google.common.collect.Iterables.getOnlyElement;\n import static org.testng.Assert.assertNotNull;\n \n public class TestPravegaPlugin\n {\n+    @Test\n     public void testSpinup()\n     {\n         PravegaPlugin plugin = new PravegaPlugin();\n@@ -35,10 +36,10 @@ public void testSpinup()\n         assertInstanceOf(factory, PravegaConnectorFactory.class);\n \n         Connector c = factory.create(\n-                \"test-connector\",\n+                \"pravega\",\n                 ImmutableMap.<String, String>builder()\n-                        .put(\"pravega.table-names\", \"test\")\n-                        .put(\"pravega.nodes\", \"localhost:9092\")\n+                        .put(\"pravega.controller\", \"tcp://localhost:9090\")\n+                        .put(\"pravega.schema-registry\", \"http://localhost:9092\")\n                         .build(),\n                 new TestingConnectorContext());\n         assertNotNull(c);"
  },
  {
    "sha": "9d65e58e5586da3458a41045272e0dbdeb0c6b14",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/CodecSupplier.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/CodecSupplier.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/CodecSupplier.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/CodecSupplier.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Note: This class file is from PrestoDb\n+ * https://github.com/prestodb/presto/blob/0.247/presto-kafka/src/test/java/com/facebook/presto/kafka/util/CodecSupplier.java\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.airlift.json.JsonCodecFactory;\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.function.Supplier;\n+\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+\n+public final class CodecSupplier<T>\n+        implements Supplier<JsonCodec<T>>\n+{\n+    private final Metadata metadata;\n+    private final JsonCodecFactory codecFactory;\n+    private final Class<T> clazz;\n+\n+    public CodecSupplier(Class<T> clazz, Metadata metadata)\n+    {\n+        this.clazz = clazz;\n+        this.metadata = metadata;\n+        ObjectMapperProvider objectMapperProvider = new ObjectMapperProvider();\n+        objectMapperProvider.setJsonDeserializers(ImmutableMap.of(Type.class, new TypeDeserializer()));\n+        this.codecFactory = new JsonCodecFactory(objectMapperProvider);\n+    }\n+\n+    @Override\n+    public JsonCodec<T> get()\n+    {\n+        return codecFactory.jsonCodec(clazz);\n+    }\n+\n+    private class TypeDeserializer\n+            extends FromStringDeserializer<Type>\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        public TypeDeserializer()\n+        {\n+            super(Type.class);\n+        }\n+\n+        @Override\n+        protected Type _deserialize(String value, DeserializationContext context)\n+        {\n+            Type type = metadata.getType(parseTypeSignature(value));\n+            if (type == null) {\n+                throw new IllegalArgumentException(String.valueOf(\"Unknown type \" + value));\n+            }\n+            return type;\n+        }\n+    }\n+}"
  },
  {
    "sha": "41ef287a805097edac1dc03336e0f89381fa41b8",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/DockerContainer.java",
    "status": "added",
    "additions": 257,
    "deletions": 0,
    "changes": 257,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/DockerContainer.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/DockerContainer.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/DockerContainer.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,257 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Note: This class file is from PrestoDb (with minor change to set \"cmd\" in ContainerConfig.Builder)\n+ * https://github.com/prestodb/presto/blob/0.247/presto-testing-docker/src/main/java/com/facebook/presto/testing/docker/DockerContainer.java\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.spotify.docker.client.DefaultDockerClient;\n+import com.spotify.docker.client.DockerClient;\n+import com.spotify.docker.client.exceptions.ContainerNotFoundException;\n+import com.spotify.docker.client.messages.Container;\n+import com.spotify.docker.client.messages.ContainerConfig;\n+import com.spotify.docker.client.messages.HostConfig;\n+import com.spotify.docker.client.messages.PortBinding;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import net.jodah.failsafe.function.CheckedConsumer;\n+\n+import java.io.Closeable;\n+import java.net.Socket;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.airlift.testing.Closeables.closeAllSuppress;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static com.google.common.collect.MoreCollectors.toOptional;\n+import static java.lang.String.format;\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class DockerContainer\n+        implements Closeable\n+{\n+    private static final Logger LOG = Logger.get(DockerContainer.class);\n+\n+    private static final boolean DEBUG = false;\n+\n+    private static final String HOST_IP = \"127.0.0.1\";\n+    private final String image;\n+    private final Map<String, String> environment;\n+    private DockerClient dockerClient;\n+    private String containerId;\n+\n+    private Map<Integer, Integer> hostPorts;\n+\n+    public DockerContainer(String image, String command, List<Integer> ports, Map<String, String> environment, CheckedConsumer<HostPortProvider> healthCheck)\n+    {\n+        this.image = requireNonNull(image, \"image is null\");\n+        this.environment = ImmutableMap.copyOf(requireNonNull(environment, \"environment is null\"));\n+        try {\n+            startContainer(ports, command, healthCheck);\n+        }\n+        catch (Exception e) {\n+            closeAllSuppress(e, this);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void startContainer(List<Integer> ports, String command, CheckedConsumer<HostPortProvider> healthCheck)\n+            throws Exception\n+    {\n+        dockerClient = DefaultDockerClient.fromEnv().build();\n+        if (dockerClient.listImages(DockerClient.ListImagesParam.byName(image)).isEmpty()) {\n+            checkState(!image.endsWith(\"-SNAPSHOT\"), \"Unavailable snapshot image %s, please build before running tests\", image);\n+            LOG.info(\"Pulling image %s...\", image);\n+            dockerClient.pull(image);\n+        }\n+        if (DEBUG) {\n+            Optional<Container> testingContainer = dockerClient.listContainers().stream()\n+                    .filter(container -> container.image().equals(image))\n+                    .collect(toOptional());\n+            if (testingContainer.isPresent()) {\n+                containerId = testingContainer.get().id();\n+                LOG.info(\"Container for %s already exists with id: %s\", image, containerId);\n+                calculateHostPorts(ports);\n+            }\n+            else {\n+                createContainer(ports, command);\n+            }\n+        }\n+        else {\n+            createContainer(ports, command);\n+        }\n+\n+        checkState(isContainerUp(), \"Container was not started properly\");\n+\n+        LOG.info(\"Auto-assigned host ports are %s\", hostPorts);\n+\n+        waitForContainer(healthCheck);\n+    }\n+\n+    private boolean isContainerUp()\n+    {\n+        try {\n+            return dockerClient.inspectContainer(containerId).state().running();\n+        }\n+        catch (ContainerNotFoundException e) {\n+            return false;\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void createContainer(List<Integer> ports, String cmd)\n+            throws Exception\n+    {\n+        LOG.info(\"Starting docker container from image %s\", image);\n+\n+        Map<String, List<PortBinding>> portBindings = ports.stream()\n+                .collect(toImmutableMap(Object::toString, port -> ImmutableList.of(PortBinding.create(HOST_IP, \"0\"))));\n+        Set<String> exposedPorts = ports.stream()\n+                .map(Object::toString)\n+                .collect(toImmutableSet());\n+\n+        ContainerConfig.Builder builder = ContainerConfig.builder()\n+                .hostConfig(HostConfig.builder()\n+                        .portBindings(portBindings)\n+                        .build())\n+                .exposedPorts(exposedPorts)\n+                .env(environment.entrySet().stream()\n+                        .map(entry -> format(\"%s=%s\", entry.getKey(), entry.getValue()))\n+                        .collect(toImmutableList()))\n+                .image(image);\n+        if (cmd != null) {\n+            builder.cmd(cmd);\n+        }\n+\n+        containerId = dockerClient.createContainer(builder.build()).id();\n+\n+        LOG.info(\"Started docker container with id: %s\", containerId);\n+\n+        dockerClient.startContainer(containerId);\n+\n+        calculateHostPorts(ports);\n+\n+        waitForContainerPorts(ports);\n+    }\n+\n+    private void waitForContainer(CheckedConsumer<HostPortProvider> healthCheck)\n+    {\n+        RetryPolicy<Object> retryPolicy = new RetryPolicy<>()\n+                .withMaxDuration(Duration.of(10, MINUTES))\n+                .withMaxAttempts(Integer.MAX_VALUE) // limited by MaxDuration\n+                .abortOn(error -> !isContainerUp())\n+                .onRetry(event -> LOG.info(format(\"Waiting for container for %s [%s]...\", image, event.getLastFailure())))\n+                .withDelay(Duration.of(10, SECONDS));\n+        Failsafe.with(retryPolicy).run(() -> healthCheck.accept(this::getHostPort));\n+    }\n+\n+    private void waitForContainerPorts(List<Integer> ports)\n+    {\n+        List<Integer> hostPorts = ports.stream()\n+                .map(this::getHostPort)\n+                .collect(toImmutableList());\n+\n+        RetryPolicy<Object> retryPolicy = new RetryPolicy<>()\n+                .withMaxDuration(Duration.of(10, MINUTES))\n+                .withMaxAttempts(Integer.MAX_VALUE) // limited by MaxDuration\n+                .abortOn(error -> !isContainerUp())\n+                .withDelay(Duration.of(5, SECONDS))\n+                .onRetry(event -> LOG.info(\"Waiting for ports %s that are exposed on %s on %s ...\", ports, HOST_IP, hostPorts));\n+\n+        Failsafe.with(retryPolicy).run(() -> {\n+            for (int port : ports) {\n+                try (Socket socket = new Socket(HOST_IP, getHostPort(port))) {\n+                    checkState(socket.isConnected());\n+                }\n+            }\n+        });\n+    }\n+\n+    private void calculateHostPorts(List<Integer> ports)\n+            throws Exception\n+    {\n+        hostPorts = dockerClient.inspectContainer(containerId).networkSettings()\n+                .ports()\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> ports.contains(extractPort(entry)))\n+                .collect(toImmutableMap(\n+                        entry -> extractPort(entry),\n+                        entry -> entry.getValue().stream()\n+                                .peek(portBinding -> {\n+                                    checkState(portBinding.hostIp().equals(HOST_IP), \"Unexpected port binding found: %s\", portBinding);\n+                                })\n+                                .map(PortBinding::hostPort)\n+                                .collect(toOptional())\n+                                .map(Integer::parseInt)\n+                                .orElseThrow(() -> new IllegalStateException(\"Could not extract port mapping from: \" + entry))));\n+    }\n+\n+    public int getHostPort(int port)\n+    {\n+        checkArgument(hostPorts.keySet().contains(port), \"Port %s is not bound\", port);\n+        return hostPorts.get(port);\n+    }\n+\n+    private static int extractPort(Entry<String, List<PortBinding>> entry)\n+    {\n+        checkArgument(!entry.getKey().contains(\"/udp\"), \"UDP port binding is not supported\");\n+        return Integer.parseInt(entry.getKey().replace(\"/tcp\", \"\"));\n+    }\n+\n+    private void removeContainer(String containerId)\n+    {\n+        try {\n+            LOG.info(\"Killing container %s\", containerId);\n+            dockerClient.killContainer(containerId);\n+            dockerClient.removeContainer(containerId);\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        if (dockerClient == null) {\n+            return;\n+        }\n+        if (!DEBUG && containerId != null) {\n+            removeContainer(containerId);\n+        }\n+        dockerClient.close();\n+        dockerClient = null;\n+    }\n+\n+    public interface HostPortProvider\n+    {\n+        int getHostPort(int containerPort);\n+    }\n+}"
  },
  {
    "sha": "4094d20c05c2b4c4b1a59779f8d7d6036cb4ed4d",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/EmbeddedPravega.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/EmbeddedPravega.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/EmbeddedPravega.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/EmbeddedPravega.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.io.Closeable;\n+import java.net.URI;\n+\n+public class EmbeddedPravega\n+        implements Closeable\n+{\n+    private final DockerContainer dockerContainer;\n+\n+    public EmbeddedPravega()\n+    {\n+        this.dockerContainer = new DockerContainer(\n+                \"pravega/pravega:latest\",\n+                \"standalone\",\n+                ImmutableList.of(9090, 12345),\n+                ImmutableMap.of(\n+                        \"HOST_IP\", \"127.0.0.1\"),\n+                EmbeddedPravega::healthCheck);\n+    }\n+\n+    public URI getController()\n+    {\n+        return URI.create(\"tcp://localhost:\" + dockerContainer.getHostPort(9090));\n+    }\n+\n+    private static void healthCheck(DockerContainer.HostPortProvider hostPortProvider)\n+    {\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        dockerContainer.close();\n+    }\n+}"
  },
  {
    "sha": "3259b56ed6589da9fe53a30bc4a006200b322638",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/KeyValueTable.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/KeyValueTable.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/KeyValueTable.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/KeyValueTable.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class KeyValueTable\n+{\n+    private static final List<String> keyValueTables;\n+    static {\n+        keyValueTables = new ArrayList<>();\n+        keyValueTables.add(\"employee\");\n+    }\n+\n+    private KeyValueTable() {}\n+\n+    public static List<String> getTables()\n+    {\n+        return keyValueTables;\n+    }\n+}"
  },
  {
    "sha": "53b2f7552a3d49030ecd575f17ed0d8ad8c615d1",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/PravegaKeyValueLoader.java",
    "status": "added",
    "additions": 137,
    "deletions": 0,
    "changes": 137,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaKeyValueLoader.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaKeyValueLoader.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/PravegaKeyValueLoader.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.KeyValueTableFactory;\n+import io.pravega.client.admin.KeyValueTableManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.Serializer;\n+import io.pravega.client.tables.KeyValueTable;\n+import io.pravega.client.tables.KeyValueTableClientConfiguration;\n+import io.pravega.client.tables.KeyValueTableConfiguration;\n+import io.pravega.connectors.presto.util.ByteBufferInputStream;\n+import org.apache.avro.Schema;\n+import org.apache.avro.file.DataFileStream;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.DatumReader;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+\n+public class PravegaKeyValueLoader\n+        implements AutoCloseable\n+{\n+    static class AvroSerializer\n+            implements Serializer<GenericRecord>\n+    {\n+        private final DatumReader<GenericRecord> datumReader;\n+\n+        public AvroSerializer(Schema schema)\n+        {\n+            this.datumReader = new GenericDatumReader(schema);\n+        }\n+\n+        @Override\n+        public ByteBuffer serialize(GenericRecord record)\n+        {\n+            try {\n+                GenericDatumWriter<GenericRecord> writer = new GenericDatumWriter<>(record.getSchema());\n+                DataFileWriter<GenericRecord> dataFileWriter = new DataFileWriter<>(writer);\n+\n+                ByteArrayOutputStream os = new ByteArrayOutputStream();\n+                dataFileWriter.create(record.getSchema(), os);\n+                dataFileWriter.append(record);\n+                dataFileWriter.close();\n+                return ByteBuffer.wrap(os.toByteArray());\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        @Override\n+        public GenericRecord deserialize(ByteBuffer serializedValue)\n+        {\n+            try (DataFileStream<GenericRecord> dataFileReader =\n+                         new DataFileStream<>(new ByteBufferInputStream(serializedValue), datumReader)) {\n+                return dataFileReader.next();\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+    }\n+\n+    private final KeyValueTableManager tableManager;\n+\n+    private final KeyValueTableFactory tableFactory;\n+\n+    private final KeyValueTable<GenericRecord, GenericRecord> table;\n+\n+    public PravegaKeyValueLoader(URI controller,\n+                                 StreamManager streamManager,\n+                                 String schema,\n+                                 String table,\n+                                 Schema keySchema,\n+                                 Schema valueSchema)\n+    {\n+        if (!streamManager.checkScopeExists(schema)) {\n+            streamManager.createScope(schema);\n+        }\n+\n+        ClientConfig clientConfig = ClientConfig.builder().controllerURI(controller).build();\n+\n+        this.tableManager = KeyValueTableManager.create(clientConfig);\n+        this.tableManager.createKeyValueTable(schema, table,\n+                KeyValueTableConfiguration.builder().partitionCount(1).build());\n+\n+        this.tableFactory = KeyValueTableFactory.withScope(schema, clientConfig);\n+\n+        this.table = tableFactory.forKeyValueTable(table,\n+                new AvroSerializer(keySchema),\n+                new AvroSerializer(valueSchema),\n+                KeyValueTableClientConfiguration.builder().build());\n+    }\n+\n+    public void put(String keyFamily, GenericRecord key, GenericRecord value)\n+    {\n+        table.put(keyFamily, key, value).join();\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        closeQuietly(table);\n+        closeQuietly(tableFactory);\n+        closeQuietly(tableManager);\n+    }\n+\n+    private void closeQuietly(AutoCloseable closeable)\n+    {\n+        try {\n+            closeable.close();\n+        }\n+        catch (Exception quiet) {\n+        }\n+    }\n+}"
  },
  {
    "sha": "36b5c17b32fc590d59be7bff452b97e1b9249673",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/PravegaLoader.java",
    "status": "added",
    "additions": 231,
    "deletions": 0,
    "changes": 231,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaLoader.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaLoader.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/PravegaLoader.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Note: This file contains some code from PrestoDb (majority of the \"ResultsSession\" implementation)\n+ * https://github.com/prestodb/presto/blob/0.247/presto-kafka/src/test/java/com/facebook/presto/kafka/util/KafkaLoader.java\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.client.Column;\n+import com.facebook.presto.client.QueryData;\n+import com.facebook.presto.client.QueryStatusInfo;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.Varchars;\n+import com.facebook.presto.server.testing.TestingPrestoServer;\n+import com.facebook.presto.spi.PrestoWarning;\n+import com.facebook.presto.tests.AbstractTestingPrestoClient;\n+import com.facebook.presto.tests.ResultsSession;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Serializer;\n+import io.pravega.client.stream.StreamConfiguration;\n+\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.common.type.DateTimeEncoding.unpackMillisUtc;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeType.TIME;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.util.DateTimeUtils.parseTimeLiteral;\n+import static com.facebook.presto.util.DateTimeUtils.parseTimestampWithTimeZone;\n+import static com.facebook.presto.util.DateTimeUtils.parseTimestampWithoutTimeZone;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PravegaLoader\n+        extends AbstractTestingPrestoClient<Void>\n+{\n+    private static final DateTimeFormatter ISO8601_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+    static class MapSerializer\n+            implements Serializer<ImmutableMap<String, Object>>\n+    {\n+        private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+        @Override\n+        public ByteBuffer serialize(ImmutableMap<String, Object> map)\n+        {\n+            try {\n+                String s = objectMapper.writeValueAsString(map);\n+                return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));\n+            }\n+            catch (JsonProcessingException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        @Override\n+        public ImmutableMap<String, Object> deserialize(ByteBuffer byteBuffer)\n+        {\n+            return null; // not needed during ingestion\n+        }\n+    }\n+\n+    private final EventStreamClientFactory factory;\n+\n+    private final EventStreamWriter<ImmutableMap<String, Object>> writer;\n+\n+    private final Random random = new Random();\n+\n+    public PravegaLoader(URI controller,\n+                         StreamManager streamManager,\n+                         String schema,\n+                         String stream,\n+                         TestingPrestoServer prestoServer,\n+                         Session defaultSession)\n+    {\n+        super(prestoServer, defaultSession);\n+\n+        if (!streamManager.checkScopeExists(schema)) {\n+            streamManager.createScope(schema);\n+        }\n+\n+        StreamConfiguration dataStreamConfig = StreamConfiguration.builder()\n+                .scalingPolicy(ScalingPolicy.fixed(10))\n+                .build();\n+        streamManager.createStream(schema, stream, dataStreamConfig);\n+\n+        this.factory = EventStreamClientFactory.withScope(\n+                schema, ClientConfig.builder().controllerURI(controller).build());\n+\n+        this.writer = factory.createEventWriter(stream,\n+                new MapSerializer(),\n+                EventWriterConfig.builder().automaticallyNoteTime(true).build());\n+    }\n+\n+    @Override\n+    public ResultsSession<Void> getResultSession(Session session)\n+    {\n+        requireNonNull(session, \"session is null\");\n+        return new PravegaLoadingSession(session);\n+    }\n+\n+    private class PravegaLoadingSession\n+            implements ResultsSession<Void>\n+    {\n+        private final AtomicReference<List<Type>> types = new AtomicReference<>();\n+\n+        private final TimeZoneKey timeZoneKey;\n+\n+        private PravegaLoadingSession(Session session)\n+        {\n+            this.timeZoneKey = session.getTimeZoneKey();\n+        }\n+\n+        @Override\n+        public void setWarnings(List<PrestoWarning> warnings) {}\n+\n+        @Override\n+        public void addResults(QueryStatusInfo statusInfo, QueryData data)\n+        {\n+            if (types.get() == null && statusInfo.getColumns() != null) {\n+                types.set(getTypes(statusInfo.getColumns()));\n+            }\n+\n+            if (data.getData() != null) {\n+                checkState(types.get() != null, \"Data without types received!\");\n+                List<Column> columns = statusInfo.getColumns();\n+                for (List<Object> fields : data.getData()) {\n+                    ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        Type type = types.get().get(i);\n+                        Object value = convertValue(fields.get(i), type);\n+                        if (value != null) {\n+                            builder.put(columns.get(i).getName(), value);\n+                        }\n+                    }\n+\n+                    writer.writeEvent(String.valueOf(random.nextInt(999)), builder.build());\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public Void build(Map<String, String> setSessionProperties, Set<String> resetSessionProperties)\n+        {\n+            return null;\n+        }\n+\n+        private Object convertValue(Object value, Type type)\n+        {\n+            if (value == null) {\n+                return null;\n+            }\n+\n+            if (BOOLEAN.equals(type) || Varchars.isVarcharType(type)) {\n+                return value;\n+            }\n+            if (BIGINT.equals(type)) {\n+                return ((Number) value).longValue();\n+            }\n+            if (INTEGER.equals(type)) {\n+                return ((Number) value).intValue();\n+            }\n+            if (DOUBLE.equals(type)) {\n+                return ((Number) value).doubleValue();\n+            }\n+            if (DATE.equals(type)) {\n+                return value;\n+            }\n+            if (TIME.equals(type)) {\n+                return ISO8601_FORMATTER.format(Instant.ofEpochMilli(parseTimeLiteral(timeZoneKey, (String) value)));\n+            }\n+            if (TIMESTAMP.equals(type)) {\n+                return ISO8601_FORMATTER.format(Instant.ofEpochMilli(parseTimestampWithoutTimeZone(timeZoneKey, (String) value)));\n+            }\n+            if (TIME_WITH_TIME_ZONE.equals(type) || TIMESTAMP_WITH_TIME_ZONE.equals(type)) {\n+                return ISO8601_FORMATTER.format(Instant.ofEpochMilli(unpackMillisUtc(parseTimestampWithTimeZone(timeZoneKey, (String) value))));\n+            }\n+            throw new AssertionError(\"unhandled type: \" + type);\n+        }\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        try {\n+            writer.close();\n+            factory.close();\n+        }\n+        finally {\n+            super.close();\n+        }\n+    }\n+}"
  },
  {
    "sha": "51ce81877f47dfd034175b4b4a1fd0c0c5447ff2",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/PravegaQueryRunner.java",
    "status": "added",
    "additions": 179,
    "deletions": 0,
    "changes": 179,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaQueryRunner.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaQueryRunner.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/PravegaQueryRunner.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.airlift.log.Logging;\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.QualifiedObjectName;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.facebook.presto.tests.TestingPrestoClient;\n+import com.facebook.presto.tpch.TpchPlugin;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.tpch.TpchTable;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.connectors.presto.PravegaPlugin;\n+import io.pravega.connectors.presto.PravegaStreamDescription;\n+import io.pravega.connectors.presto.PravegaTableDescriptionSupplier;\n+import io.pravega.connectors.presto.PravegaTableName;\n+\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.testing.Closeables.closeAllSuppress;\n+import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n+import static com.facebook.presto.tpch.TpchMetadata.TINY_SCHEMA_NAME;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.pravega.connectors.presto.integration.PravegaTestUtils.getKvStreamDesc;\n+import static io.pravega.connectors.presto.integration.PravegaTestUtils.getStreamDesc;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public final class PravegaQueryRunner\n+{\n+    private PravegaQueryRunner()\n+    {\n+    }\n+\n+    private static final Logger log = Logger.get(\"PravegaQueryRunner\");\n+    private static final String PRAVEGA_CATALOG = \"pravega\";\n+    private static final String KV_SCHEMA = \"kv\";\n+    private static final String KV_KEY_FAMILY = \"kf1\"; // TODO: could randomly pick 1 from objectArgs in table desc\n+    private static final String TPCH_SCHEMA = \"tpch\";\n+\n+    public static DistributedQueryRunner createQueryRunner(URI controller, Iterable<TpchTable<?>> tpchTables, Iterable<String> keyValueTables)\n+            throws Exception\n+    {\n+        DistributedQueryRunner queryRunner = null;\n+        try {\n+            queryRunner = new DistributedQueryRunner(createSession(), 2);\n+\n+            queryRunner.installPlugin(new TpchPlugin());\n+            queryRunner.createCatalog(\"tpch\", \"tpch\");\n+\n+            PravegaTableDescriptionSupplier tableDescriptionSupplier =\n+                    createSchemas(queryRunner.getCoordinator().getMetadata(), tpchTables, keyValueTables);\n+\n+            installPlugin(controller, queryRunner, tableDescriptionSupplier);\n+\n+            TestingPrestoClient prestoClient = queryRunner.getClient();\n+\n+            log.info(\"Loading data...\");\n+            long startTime = System.nanoTime();\n+            try (StreamManager streamManager = StreamManager.create(controller)) {\n+                log.info(\"Loading tpch data...\");\n+                for (TpchTable<?> table : tpchTables) {\n+                    loadTpchStream(controller, streamManager, prestoClient, table);\n+                }\n+                log.info(\"Loading tpch complete\");\n+\n+                log.info(\"Loading pravega data...\");\n+                for (String table : keyValueTables) {\n+                    loadPravegaKVTable(controller, streamManager, table);\n+                }\n+                log.info(\"Loading pravega complete\");\n+            }\n+\n+            log.info(\"Loading complete in %s\", nanosSince(startTime).toString(SECONDS));\n+\n+            return queryRunner;\n+        }\n+        catch (Throwable e) {\n+            closeAllSuppress(e, queryRunner);\n+            throw e;\n+        }\n+    }\n+\n+    private static void loadTpchStream(URI controller, StreamManager streamManager, TestingPrestoClient prestoClient, TpchTable<?> table)\n+    {\n+        long start = System.nanoTime();\n+        log.info(\"Running import for %s\", table.getTableName());\n+        PravegaTestUtils.loadTpchStream(controller, streamManager, prestoClient, TPCH_SCHEMA, table.getTableName(), new QualifiedObjectName(\"tpch\", TINY_SCHEMA_NAME, table.getTableName().toLowerCase(ENGLISH)));\n+        log.info(\"Imported %s in %s\", 0, table.getTableName(), nanosSince(start).convertToMostSuccinctTimeUnit());\n+    }\n+\n+    private static void loadPravegaKVTable(URI controller, StreamManager streamManager, String table)\n+    {\n+        long start = System.nanoTime();\n+        log.info(\"Running import for %s\", table);\n+        PravegaTestUtils.loadKeyValueTable(controller, streamManager, KV_SCHEMA, table, KV_KEY_FAMILY);\n+        log.info(\"Imported %s in %s\", 0, table, nanosSince(start).convertToMostSuccinctTimeUnit());\n+    }\n+\n+    private static PravegaTableDescriptionSupplier createSchemas(Metadata metadata, Iterable<TpchTable<?>> tables, Iterable<String> keyValueTables)\n+    {\n+        JsonCodec<PravegaStreamDescription> streamDescCodec = new CodecSupplier<>(PravegaStreamDescription.class, metadata).get();\n+\n+        Cache<String, Object> schemaCache = CacheBuilder.newBuilder().build();\n+        Cache<PravegaTableName, Optional<PravegaStreamDescription>> tableCache = CacheBuilder.newBuilder().build();\n+\n+        for (TpchTable<?> table : tables) {\n+            SchemaTableName schemaTableName = new SchemaTableName(TPCH_SCHEMA, table.getTableName());\n+            PravegaTableName pravegaTableName = new PravegaTableName(schemaTableName);\n+\n+            schemaCache.put(schemaTableName.getSchemaName(), new Object());\n+            tableCache.put(pravegaTableName, Optional.of(getStreamDesc(streamDescCodec, \"tpch\", table.getTableName())));\n+        }\n+\n+        for (String table : keyValueTables) {\n+            SchemaTableName schemaTableName = new SchemaTableName(KV_SCHEMA, table);\n+            PravegaTableName pravegaTableName = new PravegaTableName(schemaTableName);\n+\n+            schemaCache.put(schemaTableName.getSchemaName(), new Object());\n+            tableCache.put(pravegaTableName, Optional.of(getKvStreamDesc(table)));\n+        }\n+\n+        // all schemas + tables will be served from these provided caches\n+        return new PravegaTableDescriptionSupplier(null, schemaCache, tableCache);\n+    }\n+\n+    public static Session createSession()\n+    {\n+        return testSessionBuilder().setCatalog(PRAVEGA_CATALOG).setSchema(TPCH_SCHEMA).build();\n+    }\n+\n+    public static void installPlugin(URI controller, QueryRunner queryRunner, PravegaTableDescriptionSupplier tableDescriptionSupplier)\n+    {\n+        PravegaPlugin pravegaPlugin = new PravegaPlugin();\n+        pravegaPlugin.setTableDescriptionSupplier(tableDescriptionSupplier);\n+        queryRunner.installPlugin(pravegaPlugin);\n+\n+        Map<String, String> config = ImmutableMap.of(\n+                \"pravega.controller\", controller.toASCIIString(),\n+                \"pravega.schema-registry\", \"http://localhost:9092\");\n+\n+        queryRunner.createCatalog(\"pravega\", \"pravega\", config);\n+    }\n+\n+    public static void main(String[] args)\n+            throws Exception\n+    {\n+        // you need an already running pravega - this code won't start one\n+        Logging.initialize();\n+        DistributedQueryRunner queryRunner = createQueryRunner(URI.create(\"tcp://127.0.0.1:9090\"), TpchTable.getTables(), KeyValueTable.getTables());\n+        Thread.sleep(10);\n+        Logger log = Logger.get(PravegaQueryRunner.class);\n+        log.info(\"======== SERVER STARTED ========\");\n+        log.info(\"\\n====\\n%s\\n====\", queryRunner.getCoordinator().getBaseUrl());\n+    }\n+}"
  },
  {
    "sha": "2452608171f4e0dcb6544c6fb465a19c5eea1eb1",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/PravegaTestUtils.java",
    "status": "added",
    "additions": 172,
    "deletions": 0,
    "changes": 172,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaTestUtils.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/PravegaTestUtils.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/PravegaTestUtils.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.QualifiedObjectName;\n+import com.facebook.presto.tests.TestingPrestoClient;\n+import com.google.common.io.ByteStreams;\n+import com.google.common.io.CharStreams;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.connectors.presto.PravegaStreamDescription;\n+import io.pravega.connectors.presto.PravegaStreamFieldDescription;\n+import io.pravega.connectors.presto.PravegaStreamFieldGroup;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecordBuilder;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.pravega.connectors.presto.util.PravegaStreamDescUtils.mapFieldsFromSchema;\n+import static java.lang.String.format;\n+\n+public final class PravegaTestUtils\n+{\n+    private PravegaTestUtils() {}\n+\n+    public static PravegaStreamDescription getStreamDesc(JsonCodec<PravegaStreamDescription> streamDescriptionCodec, String directory, String table)\n+    {\n+        try (InputStream inputStream = PravegaTestUtils.class.getResourceAsStream(String.format(\"/%s/%s.json\", directory, table))) {\n+            return streamDescriptionCodec.fromJson(ByteStreams.toByteArray(inputStream));\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static String readSchema(String directory, String schema)\n+    {\n+        try (InputStreamReader reader = new InputStreamReader(PravegaTestUtils.class.getResourceAsStream(String.format(\"/%s/%s\", directory, schema)))) {\n+            return CharStreams.toString(reader);\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static void loadTpchStream(URI controller, StreamManager streamManager, TestingPrestoClient prestoClient, String schema, String stream, QualifiedObjectName tpchTableName)\n+    {\n+        try (PravegaLoader tpchLoader = new PravegaLoader(controller, streamManager, schema, stream, prestoClient.getServer(), prestoClient.getDefaultSession())) {\n+            tpchLoader.execute(format(\"SELECT * from %s\", tpchTableName));\n+        }\n+    }\n+\n+    public static void loadKeyValueTable(URI controller, StreamManager streamManager, String schema, String table, String keyFamily)\n+    {\n+        PravegaStreamDescription tableDesc = getKvStreamDesc(table);\n+\n+        Schema keySchema = avroSchema(tableDesc, 0);\n+        GenericRecordBuilder keyBuilder = new GenericRecordBuilder(keySchema);\n+\n+        Schema valueSchema = avroSchema(tableDesc, 1);\n+        GenericRecordBuilder valueBuilder = new GenericRecordBuilder(valueSchema);\n+\n+        try (PravegaKeyValueLoader keyValueLoader =\n+                     new PravegaKeyValueLoader(controller,\n+                             streamManager, schema, table,\n+                             avroSchema(tableDesc, 0),\n+                             avroSchema(tableDesc, 1))) {\n+            try (InputStream inputStream = PravegaTestUtils.class.getResourceAsStream(String.format(\"/kv/%s.records\", table));\n+                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n+                // each line in file is a record, key + value\n+                // '|' character separates key fields from values fields\n+                // fields separated by ','\n+                String datum = reader.readLine();\n+                while (datum != null && !datum.isEmpty()) {\n+                    String keyString = datum.split(\"\\\\|\")[0];\n+                    String valueString = datum.split(\"\\\\|\")[1];\n+\n+                    String[] keyFieldValues = keyString.split(\",\");\n+                    String[] valueFieldValues = valueString.split(\",\");\n+\n+                    for (int i = 0; i < keyFieldValues.length; i++) {\n+                        setAvroValue(keyBuilder, keySchema.getFields().get(i), keyFieldValues[i]);\n+                    }\n+\n+                    for (int i = 0; i < valueFieldValues.length; i++) {\n+                        setAvroValue(valueBuilder, valueSchema.getFields().get(i), valueFieldValues[i]);\n+                    }\n+\n+                    keyValueLoader.put(keyFamily, keyBuilder.build(), valueBuilder.build());\n+\n+                    keySchema.getFields().forEach(keyBuilder::clear);\n+                    valueSchema.getFields().forEach(valueBuilder::clear);\n+\n+                    datum = reader.readLine();\n+                }\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+    }\n+\n+    static void setAvroValue(GenericRecordBuilder builder, Schema.Field field, String value)\n+    {\n+        Object object;\n+        switch (field.schema().getType()) {\n+            case INT:\n+                object = Integer.parseInt(value);\n+                break;\n+            case LONG:\n+                object = Long.parseLong(value);\n+                break;\n+            default:\n+                object = value;\n+                break;\n+        }\n+        builder.set(field, object);\n+    }\n+\n+    public static PravegaStreamDescription getKvStreamDesc(String table)\n+    {\n+        JsonCodec<PravegaStreamDescription> jsonCodec = JsonCodec.jsonCodec(PravegaStreamDescription.class);\n+\n+        PravegaStreamDescription streamDescription = getStreamDesc(jsonCodec, \"kv\", table);\n+        streamDescription.getEvent().orElseThrow(IllegalArgumentException::new);\n+\n+        PravegaStreamFieldGroup keyEvent = streamDescription.getEvent().get().get(0);\n+        keyEvent.getDataSchema().orElseThrow(IllegalArgumentException::new);\n+        String keySchema = PravegaTestUtils.readSchema(\"kv\", keyEvent.getDataSchema().get());\n+\n+        PravegaStreamFieldGroup valueEvent = streamDescription.getEvent().get().get(1);\n+        valueEvent.getDataSchema().orElseThrow(IllegalArgumentException::new);\n+        String valueSchema = PravegaTestUtils.readSchema(\"kv\", valueEvent.getDataSchema().get());\n+\n+        List<PravegaStreamFieldDescription> keyFields =\n+                mapFieldsFromSchema(\"key\", keyEvent.getDataFormat(), keySchema);\n+\n+        List<PravegaStreamFieldDescription> valueFields =\n+                mapFieldsFromSchema(\"value\", valueEvent.getDataFormat(), valueSchema);\n+\n+        List<PravegaStreamFieldGroup> newFieldGroups = new ArrayList<>(2);\n+        newFieldGroups.add(new PravegaStreamFieldGroup(keyEvent, keySchema, keyFields));\n+        newFieldGroups.add(new PravegaStreamFieldGroup(valueEvent, valueSchema, valueFields));\n+\n+        return new PravegaStreamDescription(streamDescription, newFieldGroups);\n+    }\n+\n+    public static Schema avroSchema(PravegaStreamDescription streamDescription, int event)\n+    {\n+        return new Schema.Parser().parse(streamDescription.getEvent().get().get(event).getDataSchema().get());\n+    }\n+}"
  },
  {
    "sha": "a6b5f96e822a065384c5db6476b14216b30fc635",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/TestPravegaDistributed.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/TestPravegaDistributed.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/TestPravegaDistributed.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/TestPravegaDistributed.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.presto.tests.AbstractTestQueries;\n+import io.airlift.tpch.TpchTable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class TestPravegaDistributed\n+        extends AbstractTestQueries\n+{\n+    private final EmbeddedPravega pravega;\n+\n+    public TestPravegaDistributed()\n+    {\n+        this(new EmbeddedPravega());\n+    }\n+\n+    public TestPravegaDistributed(EmbeddedPravega pravega)\n+    {\n+        super(() -> PravegaQueryRunner.createQueryRunner(pravega.getController(), TpchTable.getTables(), java.util.Collections.emptyList()));\n+        this.pravega = pravega;\n+    }\n+\n+    // non-passing tests\n+    @Override\n+    public void testAccessControl(){}\n+\n+    @Override\n+    public void testDescribeOutputNonSelect(){}\n+\n+    @Override\n+    public void testInformationSchemaUppercaseName() {}\n+\n+    @Override\n+    public void testShowTablesLikeWithEscape() {}\n+\n+    @AfterClass(alwaysRun = true)\n+    public void destroy()\n+    {\n+        pravega.close();\n+    }\n+}"
  },
  {
    "sha": "4c91f83e07cc2c9e137feb5549c4ee312b3f5f5e",
    "filename": "src/test/java/io/pravega/connectors/presto/integration/TestPravegaKeyValue.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/TestPravegaKeyValue.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/java/io/pravega/connectors/presto/integration/TestPravegaKeyValue.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/integration/TestPravegaKeyValue.java?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.pravega.connectors.presto.integration;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import io.pravega.connectors.presto.PravegaStreamDescription;\n+import io.pravega.connectors.presto.PravegaStreamFieldDescription;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n+import static io.pravega.connectors.presto.integration.PravegaTestUtils.getKvStreamDesc;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test\n+public class TestPravegaKeyValue\n+{\n+    private final EmbeddedPravega pravega;\n+\n+    private final DistributedQueryRunner queryRunner;\n+\n+    public TestPravegaKeyValue()\n+            throws Exception\n+    {\n+        this.pravega = new EmbeddedPravega();\n+        this.queryRunner = PravegaQueryRunner.createQueryRunner(pravega.getController(), java.util.Collections.emptyList(), KeyValueTable.getTables());\n+    }\n+\n+    @Test\n+    public void testLoadSimpleSchema()\n+    {\n+        PravegaStreamDescription streamDescription = getKvStreamDesc(\"employee\");\n+        streamDescription.getEvent().orElseThrow(IllegalStateException::new);\n+\n+        List<PravegaStreamFieldDescription> keyFields = streamDescription.getEvent().get().get(0).getFields();\n+        assertEquals(1, keyFields.size());\n+        assertEquals(\"key/id\", keyFields.get(0).getName());\n+\n+        List<PravegaStreamFieldDescription> valueFields = streamDescription.getEvent().get().get(1).getFields();\n+        assertEquals(2, valueFields.size());\n+        assertEquals(\"value/first\", valueFields.get(0).getName());\n+        assertEquals(\"value/last\", valueFields.get(1).getName());\n+    }\n+\n+    @Test\n+    public void testSelectCount()\n+    {\n+        MaterializedResult result = queryRunner.execute(kvSession(), \"select count(*) from employee\");\n+        assertEquals(result.getRowCount(), 1);\n+        assertEquals(result.getMaterializedRows().get(0).getField(0), 3L);\n+    }\n+\n+    @Test\n+    public void testSelectConstraint()\n+    {\n+        MaterializedResult result = queryRunner.execute(kvSession(), \"select \\\"value/last\\\" from employee where \\\"key/id\\\" = 2\");\n+        assertEquals(result.getRowCount(), 1);\n+        assertEquals(result.getMaterializedRows().get(0).getField(0), \"doe\");\n+    }\n+\n+    public static Session kvSession()\n+    {\n+        return testSessionBuilder().setCatalog(\"pravega\").setSchema(\"kv\").build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void destroy()\n+    {\n+        pravega.close();\n+    }\n+}"
  },
  {
    "sha": "9fab0c045c5963cc8b6b428c3084095ca7917f2b",
    "filename": "src/test/resources/kv/employee-id.avsc",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee-id.avsc",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee-id.avsc",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/kv/employee-id.avsc?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,8 @@\n+{\n+    \"namespace\": \"io.pravega.avro\",\n+    \"type\": \"record\",\n+    \"name\": \"Id\",\n+    \"fields\": [\n+        {\"name\": \"id\", \"type\": \"int\"}\n+    ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "78abbe1d3fe10e67c709f2b363fdd447c2bd2e61",
    "filename": "src/test/resources/kv/employee-value.avsc",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee-value.avsc",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee-value.avsc",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/kv/employee-value.avsc?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,9 @@\n+{\n+    \"namespace\": \"io.pravega.avro\",\n+    \"type\": \"record\",\n+    \"name\": \"Value\",\n+    \"fields\": [\n+        {\"name\": \"first\", \"type\": \"string\"},\n+        {\"name\": \"last\", \"type\": \"string\"}\n+    ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "82272d8e3a00dee557b09ddfcc4cd94776f51444",
    "filename": "src/test/resources/kv/employee.json",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/kv/employee.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,17 @@\n+{\n+  \"schemaName\": \"kv\",\n+  \"tableName\": \"employee\",\n+  \"objectName\": \"employee\",\n+  \"objectType\": \"KV_TABLE\",\n+  \"objectArgs\": [\"kf1\"],\n+  \"event\": [\n+    {\n+      \"dataFormat\": \"avro\",\n+      \"dataSchema\": \"employee-id.avsc\"\n+    },\n+    {\n+      \"dataFormat\": \"avro\",\n+      \"dataSchema\": \"employee-value.avsc\"\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "98e60137eb706b47f9d871f71635356e507008d0",
    "filename": "src/test/resources/kv/employee.records",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee.records",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/kv/employee.records",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/kv/employee.records?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,3 @@\n+1|jonh,smith\n+2|janet,doe\n+3|susan,dewar\n\\ No newline at end of file"
  },
  {
    "sha": "d59682da59ec885ed7bd9660f32be79cdc5ec3d5",
    "filename": "src/test/resources/tpch/customer.json",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/customer.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/customer.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/customer.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,50 @@\n+{\n+    \"tableName\": \"customer\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"customer\",\n+    \"event\": [{\n+        \"dataFormat\": \"json\",\n+        \"fields\": [\n+            {\n+                \"name\": \"custkey\",\n+                \"mapping\": \"custkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"name\",\n+                \"mapping\": \"name\",\n+                \"type\": \"VARCHAR(25)\"\n+            },\n+            {\n+                \"name\": \"address\",\n+                \"mapping\": \"address\",\n+                \"type\": \"VARCHAR(40)\"\n+            },\n+            {\n+                \"name\": \"nationkey\",\n+                \"mapping\": \"nationkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"phone\",\n+                \"mapping\": \"phone\",\n+                \"type\": \"VARCHAR(15)\"\n+            },\n+            {\n+                \"name\": \"acctbal\",\n+                \"mapping\": \"acctbal\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"mktsegment\",\n+                \"mapping\": \"mktsegment\",\n+                \"type\": \"VARCHAR(10)\"\n+            },\n+            {\n+                \"name\": \"comment\",\n+                \"mapping\": \"comment\",\n+                \"type\": \"VARCHAR(117)\"\n+            }\n+        ]\n+        }]\n+}"
  },
  {
    "sha": "ed70b06c28a07d7aef8c024c513429825fd7e9c7",
    "filename": "src/test/resources/tpch/lineitem.json",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/lineitem.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/lineitem.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/lineitem.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,93 @@\n+{\n+    \"tableName\": \"lineitem\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"lineitem\",\n+    \"event\": [{\n+        \"dataFormat\": \"json\",\n+        \"fields\": [\n+            {\n+                \"name\": \"orderkey\",\n+                \"mapping\": \"orderkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"partkey\",\n+                \"mapping\": \"partkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"suppkey\",\n+                \"mapping\": \"suppkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"linenumber\",\n+                \"mapping\": \"linenumber\",\n+                \"type\": \"INTEGER\"\n+            },\n+            {\n+                \"name\": \"quantity\",\n+                \"mapping\": \"quantity\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"extendedprice\",\n+                \"mapping\": \"extendedprice\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"discount\",\n+                \"mapping\": \"discount\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"tax\",\n+                \"mapping\": \"tax\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"returnflag\",\n+                \"mapping\": \"returnflag\",\n+                \"type\": \"VARCHAR(1)\"\n+            },\n+            {\n+                \"name\": \"linestatus\",\n+                \"mapping\": \"linestatus\",\n+                \"type\": \"VARCHAR(1)\"\n+            },\n+            {\n+                \"name\": \"shipdate\",\n+                \"mapping\": \"shipdate\",\n+                \"type\": \"DATE\",\n+                \"dataFormat\": \"iso8601\"\n+            },\n+            {\n+                \"name\": \"commitdate\",\n+                \"mapping\": \"commitdate\",\n+                \"type\": \"DATE\",\n+                \"dataFormat\": \"iso8601\"\n+            },\n+            {\n+                \"name\": \"receiptdate\",\n+                \"mapping\": \"receiptdate\",\n+                \"type\": \"DATE\",\n+                \"dataFormat\": \"iso8601\"\n+            },\n+            {\n+                \"name\": \"shipinstruct\",\n+                \"mapping\": \"shipinstruct\",\n+                \"type\": \"VARCHAR(25)\"\n+            },\n+            {\n+                \"name\": \"shipmode\",\n+                \"mapping\": \"shipmode\",\n+                \"type\": \"VARCHAR(7)\"\n+            },\n+            {\n+                \"name\": \"comment\",\n+                \"mapping\": \"comment\",\n+                \"type\": \"VARCHAR(44)\"\n+            }\n+        ]\n+    }]\n+}"
  },
  {
    "sha": "81117c8c933f1529ec1cf8670d077d5ae50f1f02",
    "filename": "src/test/resources/tpch/nation.json",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/nation.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/nation.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/nation.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,30 @@\n+{\n+    \"tableName\": \"nation\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"nation\",\n+    \"event\": [{\n+        \"dataFormat\": \"json\",\n+        \"fields\": [\n+            {\n+                \"name\": \"nationkey\",\n+                \"mapping\": \"nationkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"name\",\n+                \"mapping\": \"name\",\n+                \"type\": \"VARCHAR(25)\"\n+            },\n+            {\n+                \"name\": \"regionkey\",\n+                \"mapping\": \"regionkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"comment\",\n+                \"mapping\": \"comment\",\n+                \"type\": \"VARCHAR(152)\"\n+            }\n+        ]\n+    }]\n+}"
  },
  {
    "sha": "145e22672b38d4b7cc7386511dc3a071f7e5c917",
    "filename": "src/test/resources/tpch/orders.json",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/orders.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/orders.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/orders.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,58 @@\n+{\n+    \"tableName\": \"orders\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"orders\",\n+    \"event\": [\n+        {\n+            \"dataFormat\": \"json\",\n+            \"fields\": [\n+                {\n+                    \"name\": \"orderkey\",\n+                    \"mapping\": \"orderkey\",\n+                    \"type\": \"BIGINT\"\n+                },\n+                {\n+                    \"name\": \"custkey\",\n+                    \"mapping\": \"custkey\",\n+                    \"type\": \"BIGINT\"\n+                },\n+                {\n+                    \"name\": \"orderstatus\",\n+                    \"mapping\": \"orderstatus\",\n+                    \"type\": \"VARCHAR(1)\"\n+                },\n+                {\n+                    \"name\": \"totalprice\",\n+                    \"mapping\": \"totalprice\",\n+                    \"type\": \"DOUBLE\"\n+                },\n+                {\n+                    \"name\": \"orderdate\",\n+                    \"mapping\": \"orderdate\",\n+                    \"type\": \"DATE\",\n+                    \"dataFormat\": \"iso8601\"\n+                },\n+                {\n+                    \"name\": \"orderpriority\",\n+                    \"mapping\": \"orderpriority\",\n+                    \"type\": \"VARCHAR(15)\"\n+                },\n+                {\n+                    \"name\": \"clerk\",\n+                    \"mapping\": \"clerk\",\n+                    \"type\": \"VARCHAR(15)\"\n+                },\n+                {\n+                    \"name\": \"shippriority\",\n+                    \"mapping\": \"shippriority\",\n+                    \"type\": \"INTEGER\"\n+                },\n+                {\n+                    \"name\": \"comment\",\n+                    \"mapping\": \"comment\",\n+                    \"type\": \"VARCHAR(79)\"\n+                }\n+            ]\n+        }\n+    ]\n+}"
  },
  {
    "sha": "87cfad3a98a75e743d0f8351bc92e49690b395ae",
    "filename": "src/test/resources/tpch/part.json",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/part.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/part.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/part.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,55 @@\n+{\n+    \"tableName\": \"part\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"part\",\n+    \"event\": [{\n+        \"dataFormat\": \"json\",\n+        \"fields\": [\n+            {\n+                \"name\": \"partkey\",\n+                \"mapping\": \"partkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"name\",\n+                \"mapping\": \"name\",\n+                \"type\": \"VARCHAR(55)\"\n+            },\n+            {\n+                \"name\": \"mfgr\",\n+                \"mapping\": \"mfgr\",\n+                \"type\": \"VARCHAR(25)\"\n+            },\n+            {\n+                \"name\": \"brand\",\n+                \"mapping\": \"brand\",\n+                \"type\": \"VARCHAR(10)\"\n+            },\n+            {\n+                \"name\": \"type\",\n+                \"mapping\": \"type\",\n+                \"type\": \"VARCHAR(25)\"\n+            },\n+            {\n+                \"name\": \"size\",\n+                \"mapping\": \"size\",\n+                \"type\": \"INTEGER\"\n+            },\n+            {\n+                \"name\": \"container\",\n+                \"mapping\": \"container\",\n+                \"type\": \"VARCHAR(10)\"\n+            },\n+            {\n+                \"name\": \"retailprice\",\n+                \"mapping\": \"retailprice\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"comment\",\n+                \"mapping\": \"comment\",\n+                \"type\": \"VARCHAR(23)\"\n+            }\n+        ]\n+    }]\n+}"
  },
  {
    "sha": "7df0e379f5e75dfaeb17f5fb82916fe1c3496159",
    "filename": "src/test/resources/tpch/partsupp.json",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/partsupp.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/partsupp.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/partsupp.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,35 @@\n+{\n+    \"tableName\": \"partsupp\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"partsupp\",\n+    \"event\": [{\n+        \"dataFormat\": \"json\",\n+        \"fields\": [\n+            {\n+                \"name\": \"partkey\",\n+                \"mapping\": \"partkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"suppkey\",\n+                \"mapping\": \"suppkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"availqty\",\n+                \"mapping\": \"availqty\",\n+                \"type\": \"INTEGER\"\n+            },\n+            {\n+                \"name\": \"supplycost\",\n+                \"mapping\": \"supplycost\",\n+                \"type\": \"DOUBLE\"\n+            },\n+            {\n+                \"name\": \"comment\",\n+                \"mapping\": \"comment\",\n+                \"type\": \"VARCHAR(199)\"\n+            }\n+        ]\n+    }]\n+}"
  },
  {
    "sha": "2abc65f7b5908bf88250a25db2e477c31c605644",
    "filename": "src/test/resources/tpch/region.json",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/pravega/presto-connector/blob/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/region.json",
    "raw_url": "https://github.com/pravega/presto-connector/raw/dbe84ca385cd22655f3343b7822987380981f69f/src/test/resources/tpch/region.json",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/resources/tpch/region.json?ref=dbe84ca385cd22655f3343b7822987380981f69f",
    "patch": "@@ -0,0 +1,25 @@\n+{\n+    \"tableName\": \"region\",\n+    \"schemaName\": \"tpch\",\n+    \"objectName\": \"region\",\n+    \"event\": [{\n+        \"dataFormat\": \"json\",\n+        \"fields\": [\n+            {\n+                \"name\": \"regionkey\",\n+                \"mapping\": \"regionkey\",\n+                \"type\": \"BIGINT\"\n+            },\n+            {\n+                \"name\": \"name\",\n+                \"mapping\": \"name\",\n+                \"type\": \"VARCHAR(25)\"\n+            },\n+            {\n+                \"name\": \"comment\",\n+                \"mapping\": \"comment\",\n+                \"type\": \"VARCHAR(152)\"\n+            }\n+        ]\n+    }]\n+}"
  }
]
