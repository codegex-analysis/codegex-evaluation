[
  {
    "sha": "b532d7a44daaecbbedfd8a766e1b3893adac62fb",
    "filename": "NOTICE",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/pravega/presto-connector/blob/1e4e5ba535dc37cf1121315b93140d10558b9c0d/NOTICE",
    "raw_url": "https://github.com/pravega/presto-connector/raw/1e4e5ba535dc37cf1121315b93140d10558b9c0d/NOTICE",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/NOTICE?ref=1e4e5ba535dc37cf1121315b93140d10558b9c0d",
    "patch": "@@ -1 +1,5 @@\n Copyright (c) 2021 Pravega Authors.\n+\n+This software contains source code from Presto, distributed under\n+the Apache License Version 2.0, and copyrighted to the Apache Software Foundation.\n+https://prestodb.io"
  },
  {
    "sha": "0358f57f3eee1e38a150e6e27bcdfe941c7d2511",
    "filename": "src/main/java/io/pravega/connectors/presto/PravegaConnectorModule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/pravega/presto-connector/blob/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/PravegaConnectorModule.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/PravegaConnectorModule.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/PravegaConnectorModule.java?ref=1e4e5ba535dc37cf1121315b93140d10558b9c0d",
    "patch": "@@ -24,6 +24,7 @@\n import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n import com.google.inject.Binder;\n import com.google.inject.Scopes;\n+import io.pravega.connectors.presto.decoder.JsonRowDecoderFactory;\n \n import javax.inject.Inject;\n \n@@ -47,6 +48,7 @@ public void setup(Binder binder)\n         binder.bind(PravegaRecordSetProvider.class).in(Scopes.SINGLETON);\n \n         binder.bind(PravegaSegmentManager.class).in(Scopes.SINGLETON);\n+        binder.bind(JsonRowDecoderFactory.class).in(Scopes.SINGLETON);\n         configBinder(binder).bindConfig(PravegaConnectorConfig.class);\n \n         jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);"
  },
  {
    "sha": "8714ccafd8914ef6f6180864c3acfdc89c211991",
    "filename": "src/main/java/io/pravega/connectors/presto/PravegaRecordSetProvider.java",
    "status": "modified",
    "additions": 7,
    "deletions": 30,
    "changes": 37,
    "blob_url": "https://github.com/pravega/presto-connector/blob/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/PravegaRecordSetProvider.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/PravegaRecordSetProvider.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/PravegaRecordSetProvider.java?ref=1e4e5ba535dc37cf1121315b93140d10558b9c0d",
    "patch": "@@ -18,15 +18,13 @@\n \n import com.facebook.airlift.log.Logger;\n import com.facebook.presto.decoder.DecoderColumnHandle;\n-import com.facebook.presto.decoder.DispatchingRowDecoderFactory;\n-import com.facebook.presto.decoder.RowDecoder;\n import io.pravega.connectors.presto.decoder.AvroRowDecoder;\n import io.pravega.connectors.presto.decoder.AvroSerializer;\n import io.pravega.connectors.presto.decoder.BytesEventDecoder;\n import io.pravega.connectors.presto.decoder.CsvRowDecoder;\n import io.pravega.connectors.presto.decoder.CsvSerializer;\n import io.pravega.connectors.presto.decoder.EventDecoder;\n-import io.pravega.connectors.presto.decoder.JsonRowDecoder;\n+import io.pravega.connectors.presto.decoder.JsonRowDecoderFactory;\n import io.pravega.connectors.presto.decoder.JsonSerializer;\n import io.pravega.connectors.presto.decoder.KVSerializer;\n import io.pravega.connectors.presto.decoder.MultiSourceRowDecoder;\n@@ -39,15 +37,12 @@\n import com.facebook.presto.spi.connector.ConnectorRecordSetProvider;\n import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n import io.pravega.schemaregistry.serializer.shared.impl.SerializerConfig;\n \n import javax.inject.Inject;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n \n import static io.pravega.connectors.presto.PravegaHandleResolver.convertSplit;\n@@ -68,18 +63,15 @@\n         implements ConnectorRecordSetProvider\n {\n     private static final Logger log = Logger.get(PravegaRecordSetProvider.class);\n-    private DispatchingRowDecoderFactory decoderFactory;\n+    private JsonRowDecoderFactory jsonRowDecoderFactory;\n     private final PravegaSegmentManager streamReaderManager;\n-    private final PravegaConnectorConfig config;\n \n     @Inject\n-    public PravegaRecordSetProvider(DispatchingRowDecoderFactory decoderFactory,\n-                                    PravegaSegmentManager streamReaderManager,\n-                                    PravegaConnectorConfig config)\n+    public PravegaRecordSetProvider(JsonRowDecoderFactory jsonRowDecoderFactory,\n+                                    PravegaSegmentManager streamReaderManager)\n     {\n-        this.decoderFactory = requireNonNull(decoderFactory, \"decoderFactory is null\");\n+        this.jsonRowDecoderFactory = requireNonNull(jsonRowDecoderFactory, \"jsonRowDecoderFactory is null\");\n         this.streamReaderManager = requireNonNull(streamReaderManager, \"streamReaderManager is null\");\n-        this.config = requireNonNull(config, \"config is null\");\n     }\n \n     @Override\n@@ -208,16 +200,8 @@ private EventDecoder eventDecoder(PravegaObjectSchema schema, Set<DecoderColumnH\n                 return new ProtobufRowDecoder(decoderColumnHandles);\n \n             case JSON:\n-            case JSON_INLINE: {\n-                RowDecoder rowDecoder = decoderFactory.create(\n-                        JSON,\n-                        getDecoderParameters(schema.getSchemaLocation()),\n-                        decoderColumnHandles);\n-                if (!(rowDecoder instanceof com.facebook.presto.decoder.json.JsonRowDecoder)) {\n-                    throw new IllegalStateException();\n-                }\n-                return new JsonRowDecoder((com.facebook.presto.decoder.json.JsonRowDecoder) rowDecoder);\n-            }\n+            case JSON_INLINE:\n+                return jsonRowDecoderFactory.create(decoderColumnHandles);\n \n             case CSV: {\n                 return new CsvRowDecoder();\n@@ -226,11 +210,4 @@ private EventDecoder eventDecoder(PravegaObjectSchema schema, Set<DecoderColumnH\n                 throw new IllegalArgumentException(schema.toString());\n         }\n     }\n-\n-    private static Map<String, String> getDecoderParameters(Optional<String> dataSchema)\n-    {\n-        ImmutableMap.Builder<String, String> parameters = ImmutableMap.builder();\n-        dataSchema.ifPresent(schema -> parameters.put(\"dataSchema\", schema));\n-        return parameters.build();\n-    }\n }"
  },
  {
    "sha": "d480697cfa289b801dcf68460f863662c6fa9e87",
    "filename": "src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoder.java",
    "status": "modified",
    "additions": 53,
    "deletions": 5,
    "changes": 58,
    "blob_url": "https://github.com/pravega/presto-connector/blob/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoder.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoder.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoder.java?ref=1e4e5ba535dc37cf1121315b93140d10558b9c0d",
    "patch": "@@ -12,27 +12,75 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n+ *\n+ * Note: This file contains changes from PrestoDb.  Specifically the decodeTree and locateNode methods.\n+ * https://github.com/prestodb/presto/blob/0.235/presto-record-decoder/src/main/java/com/facebook/presto/decoder/json/JsonRowDecoder.java\n  */\n \n package io.pravega.connectors.presto.decoder;\n \n+import com.facebook.presto.decoder.DecoderColumnHandle;\n+import com.facebook.presto.decoder.FieldValueProvider;\n+import com.facebook.presto.decoder.json.JsonFieldDecoder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.MissingNode;\n+import com.google.common.base.Splitter;\n import io.pravega.connectors.presto.PravegaRecordValue;\n-// import io.pravega.connectors.presto.TypedRecordValue;\n+import io.pravega.connectors.presto.TypedRecordValue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n \n public class JsonRowDecoder\n         implements EventDecoder\n {\n-    private final com.facebook.presto.decoder.json.JsonRowDecoder jsonRowDecoder;\n+    private final ObjectMapper objectMapper;\n+\n+    private final Map<DecoderColumnHandle, JsonFieldDecoder> fieldDecoders;\n \n-    public JsonRowDecoder(com.facebook.presto.decoder.json.JsonRowDecoder jsonRowDecoder)\n+    public JsonRowDecoder(ObjectMapper objectMapper, Map<DecoderColumnHandle, JsonFieldDecoder> fieldDecoders)\n     {\n-        this.jsonRowDecoder = jsonRowDecoder;\n+        this.objectMapper = objectMapper;\n+        this.fieldDecoders = fieldDecoders;\n     }\n \n     @Override\n     public boolean decodeEvent(DecodableEvent event, PravegaRecordValue record)\n     {\n-        // ((TypedRecordValue) record).setDecodedValue(jsonRowDecoder.decodeTree(event.asJson()));\n+        ((TypedRecordValue) record).setDecodedValue(decodeTree(event.asJson()));\n         return true;\n     }\n+\n+    public Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodeTree(JsonNode tree)\n+    {\n+        Map<DecoderColumnHandle, FieldValueProvider> decodedRow = new HashMap<>();\n+\n+        for (Map.Entry<DecoderColumnHandle, JsonFieldDecoder> entry : fieldDecoders.entrySet()) {\n+            DecoderColumnHandle columnHandle = entry.getKey();\n+            JsonFieldDecoder decoder = entry.getValue();\n+            JsonNode node = locateNode(tree, columnHandle);\n+            decodedRow.put(columnHandle, decoder.decode(node));\n+        }\n+\n+        return Optional.of(decodedRow);\n+    }\n+\n+    private static JsonNode locateNode(JsonNode tree, DecoderColumnHandle columnHandle)\n+    {\n+        String mapping = columnHandle.getMapping();\n+        checkState(mapping != null, \"No mapping for %s\", columnHandle.getName());\n+\n+        JsonNode currentNode = tree;\n+        for (String pathElement : Splitter.on('/').omitEmptyStrings().split(mapping)) {\n+            if (!currentNode.has(pathElement)) {\n+                return MissingNode.getInstance();\n+            }\n+            currentNode = currentNode.path(pathElement);\n+        }\n+        return currentNode;\n+    }\n }"
  },
  {
    "sha": "1fb5e11b82862861e152d9df886029a1114877b2",
    "filename": "src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoderFactory.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/pravega/presto-connector/blob/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoderFactory.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoderFactory.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/main/java/io/pravega/connectors/presto/decoder/JsonRowDecoderFactory.java?ref=1e4e5ba535dc37cf1121315b93140d10558b9c0d",
    "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Note: This class file is from PrestoDb\n+ * https://github.com/prestodb/presto/blob/0.235/presto-record-decoder/src/main/java/com/facebook/presto/decoder/json/JsonRowDecoderFactory.java\n+ */\n+package io.pravega.connectors.presto.decoder;\n+\n+import com.facebook.presto.decoder.DecoderColumnHandle;\n+import com.facebook.presto.decoder.json.CustomDateTimeJsonFieldDecoder;\n+import com.facebook.presto.decoder.json.DefaultJsonFieldDecoder;\n+import com.facebook.presto.decoder.json.ISO8601JsonFieldDecoder;\n+import com.facebook.presto.decoder.json.JsonFieldDecoder;\n+import com.facebook.presto.decoder.json.MillisecondsSinceEpochJsonFieldDecoder;\n+import com.facebook.presto.decoder.json.RFC2822JsonFieldDecoder;\n+import com.facebook.presto.decoder.json.SecondsSinceEpochJsonFieldDecoder;\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_USER_ERROR;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Function.identity;\n+\n+public class JsonRowDecoderFactory\n+{\n+    private final ObjectMapper objectMapper;\n+\n+    @Inject\n+    public JsonRowDecoderFactory(ObjectMapper objectMapper)\n+    {\n+        this.objectMapper = requireNonNull(objectMapper, \"objectMapper is null\");\n+    }\n+\n+    public JsonRowDecoder create(Set<DecoderColumnHandle> columns)\n+    {\n+        requireNonNull(columns, \"columnHandles is null\");\n+        return new JsonRowDecoder(objectMapper, chooseFieldDecoders(columns));\n+    }\n+\n+    private Map<DecoderColumnHandle, JsonFieldDecoder> chooseFieldDecoders(Set<DecoderColumnHandle> columns)\n+    {\n+        return columns.stream()\n+                .collect(toImmutableMap(identity(), this::chooseFieldDecoder));\n+    }\n+\n+    private JsonFieldDecoder chooseFieldDecoder(DecoderColumnHandle column)\n+    {\n+        try {\n+            requireNonNull(column);\n+            checkArgument(!column.isInternal(), \"unexpected internal column '%s'\", column.getName());\n+\n+            String dataFormat = Optional.ofNullable(column.getDataFormat()).orElse(\"\");\n+            switch (dataFormat) {\n+                case \"custom-date-time\":\n+                    return new CustomDateTimeJsonFieldDecoder(column);\n+                case \"iso8601\":\n+                    return new ISO8601JsonFieldDecoder(column);\n+                case \"seconds-since-epoch\":\n+                    return new SecondsSinceEpochJsonFieldDecoder(column);\n+                case \"milliseconds-since-epoch\":\n+                    return new MillisecondsSinceEpochJsonFieldDecoder(column);\n+                case \"rfc2822\":\n+                    return new RFC2822JsonFieldDecoder(column);\n+                case \"\":\n+                    return new DefaultJsonFieldDecoder(column);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unknown data format '%s' used for column '%s'\", column.getDataFormat(), column.getName()));\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            throw new PrestoException(GENERIC_USER_ERROR, e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "13b43d03a6820ba435606e5bbbe4cd2b935a0057",
    "filename": "src/test/java/io/pravega/connectors/presto/decoder/TestJsonRowDecoder.java",
    "status": "added",
    "additions": 147,
    "deletions": 0,
    "changes": 147,
    "blob_url": "https://github.com/pravega/presto-connector/blob/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/test/java/io/pravega/connectors/presto/decoder/TestJsonRowDecoder.java",
    "raw_url": "https://github.com/pravega/presto-connector/raw/1e4e5ba535dc37cf1121315b93140d10558b9c0d/src/test/java/io/pravega/connectors/presto/decoder/TestJsonRowDecoder.java",
    "contents_url": "https://api.github.com/repos/pravega/presto-connector/contents/src/test/java/io/pravega/connectors/presto/decoder/TestJsonRowDecoder.java?ref=1e4e5ba535dc37cf1121315b93140d10558b9c0d",
    "patch": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) Pravega Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.pravega.connectors.presto.decoder;\n+\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.decoder.DecoderColumnHandle;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.pravega.connectors.presto.PravegaColumnHandle;\n+import io.pravega.connectors.presto.PravegaRecordValue;\n+import io.pravega.connectors.presto.TypedRecordValue;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test\n+public class TestJsonRowDecoder\n+{\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private final JsonRowDecoderFactory decoderFactory = new JsonRowDecoderFactory(objectMapper);\n+\n+    private static final String FIELD1 = \"field1\";\n+    private static final String NESTED_FIELD1_MAPPING = \"nested/field1\";\n+\n+    @Test\n+    public void testSimpleField()\n+    {\n+        /*\n+         *  column display name: \"field1\" mapping: \"field1\"\"\n+         *\n+         *  {\n+         *    \"field1\" : 10\n+         *  }\n+         */\n+\n+        PravegaRecordValue recordValue = recordValue(FIELD1, FIELD1, BIGINT, 10);\n+        assertEquals(recordValue.getLong(0, 0), 10);\n+    }\n+\n+    @Test\n+    public void testNestedField()\n+    {\n+        /*\n+         *  column display name: \"field1\" mapping: \"nested/field1\"\n+         *\n+         *  {\n+         *    \"nested\" : {\n+         *      \"field1\" : \"john\"\n+         *    }\n+         *  }\n+         */\n+\n+        PravegaRecordValue recordValue = recordValue(FIELD1, NESTED_FIELD1_MAPPING, VARCHAR, \"john\");\n+        assertEquals(recordValue.getSlice(0, 0).toStringUtf8(), \"john\");\n+    }\n+\n+    private PravegaRecordValue recordValue(String name, String mapping, Type type, Object value)\n+    {\n+        List<DecoderColumnHandle> columns = new ArrayList<>();\n+        columns.add(columnHandle(name, mapping, type));\n+\n+        JsonRowDecoder decoder = decoderFactory.create(columns.stream().collect(toImmutableSet()));\n+\n+        TypedRecordValue recordValue = new TypedRecordValue(columns.stream()\n+                .map(TestJsonRowDecoder::columnHandle)\n+                .collect(Collectors.toList()));\n+\n+        assertTrue(decoder.decodeEvent(new JsonEvent(toJson(mapping, type, value)), recordValue));\n+        recordValue.decode();\n+\n+        return recordValue;\n+    }\n+\n+    private JsonNode toJson(String mapping, Type type, Object value)\n+    {\n+        ObjectNode objectNode = new ObjectNode(objectMapper.getNodeFactory());\n+        ObjectNode root = objectNode;\n+\n+        Iterator<String> path = Arrays.stream(mapping.split(\"/\")).iterator();\n+\n+        String name = path.next();\n+        while (path.hasNext()) {\n+            ObjectNode tmp = new ObjectNode(objectMapper.getNodeFactory());\n+            objectNode.set(name, tmp);\n+            objectNode = tmp;\n+            name = path.next();\n+        }\n+\n+        if (BIGINT.equals(type)) {\n+            objectNode.put(name, (int) value);\n+        }\n+        else if (VARCHAR.equals(type)) {\n+            objectNode.put(name, (String) value);\n+        }\n+        else {\n+            throw new IllegalArgumentException();\n+        }\n+        return root;\n+    }\n+\n+    private static ColumnHandle columnHandle(DecoderColumnHandle handle)\n+    {\n+        return handle;\n+    }\n+\n+    private static DecoderColumnHandle columnHandle(String name, String mapping, Type type)\n+    {\n+        return new PravegaColumnHandle(\"pravega\",\n+                0 /* not used in json */,\n+                name,\n+                type,\n+                mapping,\n+                \"\",\n+                null,\n+                false /* keyDecoder */,\n+                false /* hidden  */,\n+                false /* internal */,\n+                0 /* schemaNum */);\n+    }\n+}"
  }
]
