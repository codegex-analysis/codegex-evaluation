[
  {
    "sha": "31b74c4cca71f3202f02dc09d7aae47bd487babd",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/pom.xml",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/pom.xml",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/pom.xml?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -94,6 +94,26 @@\n \t\t\t\t</exclusion>\n \t\t\t</exclusions>\n \t\t</dependency>\n+\t\t<dependency>\n+    \t\t<groupId>org.junit.platform</groupId>\n+    \t\t<artifactId>junit-platform-launcher</artifactId>\n+    \t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+    \t\t<groupId>org.junit.jupiter</groupId>\n+    \t\t<artifactId>junit-jupiter-api</artifactId>\n+    \t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+    \t\t<groupId>org.junit.jupiter</groupId>\n+    \t\t<artifactId>junit-jupiter-engine</artifactId>\n+    \t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+    \t\t<groupId>org.junit.vintage</groupId>\n+    \t\t<artifactId>junit-vintage-engine</artifactId>\n+    \t\t<scope>test</scope>\n+\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.webjars</groupId>\n \t\t\t<artifactId>jquery</artifactId>"
  },
  {
    "sha": "780e099b0e0f9ded3dfcea91a82db09aae139cf5",
    "filename": "src/main/java/com/example/demo/login/controller/MyPageController.java",
    "status": "modified",
    "additions": 14,
    "deletions": 24,
    "changes": 38,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/controller/MyPageController.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/controller/MyPageController.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/controller/MyPageController.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -18,8 +18,8 @@\n import com.example.demo.SecurityConfig;\n import com.example.demo.login.domain.model.FavGift;\n import com.example.demo.login.domain.model.GroupOrder;\n-import com.example.demo.login.domain.model.SignupForm;\n import com.example.demo.login.domain.model.User;\n+import com.example.demo.login.domain.model.UserForm;\n import com.example.demo.login.domain.service.FavGiftService;\n import com.example.demo.login.domain.service.UserService;\n \n@@ -50,8 +50,6 @@ public void postDeleteUser( HttpServletRequest request, HttpServletResponse resp\n \n \t\tString userName = request.getRemoteUser();\n \n-\t\tSystem.out.println(userName +\"の登録情報を削除します\");\n-\n \t    boolean result = userService.deleteOne(userName);\n \n \t    if(result == true) {\n@@ -68,44 +66,37 @@ public void postDeleteUser( HttpServletRequest request, HttpServletResponse resp\n \t}\n \n \t@PostMapping(\"/mypage/updateUser\")\n-\tpublic String postUserUpdatePage(@ModelAttribute SignupForm form, Model model, HttpServletRequest request) {\n+\tpublic String postUserUpdatePage(@ModelAttribute UserForm form, Model model, HttpServletRequest request) {\n \n \t\tString userName = request.getRemoteUser();\n \n-\t\tSystem.out.println(userName+\"の登録情報を更新します\");\n-\n-\t\tif(userName != null && userName.length() > 0) {\n-\t\t\tUser user = userService.selectOne(userName);\n-\t\t\tform.setUserName(user.getUserName());\n-\t\t\tform.setMailAddress(user.getMailAddress());\n+\t\tUser user = userService.selectOne(userName);\n \n-\t\t\tmodel.addAttribute(\"signupForm\", form);\n-\t\t}\n+\t\tform.setUserName(user.getUserName());\n+\t\tform.setMailAddress(user.getMailAddress());\n \n+\t\tmodel.addAttribute(\"userForm\", form);\n \n \t\treturn \"mypage/updateUser/updateUser\";\n     }\n \n \t@PostMapping(\"/updateUserInfo\")\n-\tpublic String postUserUpdate(@ModelAttribute @Validated(GroupOrder.class)SignupForm form, BindingResult bindingResult, Model model, HttpServletRequest request,\n+\tpublic String postUserUpdate(@ModelAttribute @Validated(GroupOrder.class)UserForm form, BindingResult bindingResult, Model model, HttpServletRequest request,\n \t\t\tHttpServletResponse response) {\n \n \t\tif (bindingResult.hasErrors()) {\n \t\t\treturn postUserUpdatePage(form, model, request);\n-\n \t\t}\n \n-\t\tString userName_LoggedIn = request.getRemoteUser();\n-\n-\t\tSystem.out.println(\"ログインしているのは\"+ userName_LoggedIn);\n+\t\tString userName = request.getRemoteUser();\n \n \t\tUser user = new User();\n \n \t\tuser.setUserName(form.getUserName());\n \t\tuser.setMailAddress(form.getMailAddress());\n \t\tuser.setPassword(form.getPassword());\n \n-\t\tboolean result = userService.updateOne(user, userName_LoggedIn);\n+\t\tboolean result = userService.updateOne(user, userName);\n \n \t\tif(result == true) {\n \t\t   System.out.println(\"更新成功\");\n@@ -114,15 +105,14 @@ public String postUserUpdate(@ModelAttribute @Validated(GroupOrder.class)SignupF\n \t\t}\n \n \t\ttry {\n-\t\t\tString username = String.valueOf(form.getUserName());\n-\t\t\tString password = String.valueOf(form.getPassword());\n-\t\t\t//SecurityContextHolder.clearContext();\n-\t\t\tSecurityConfig.autoLogin(request, username, password, response);\n+\t\t\tString newUsername = String.valueOf(form.getUserName());\n+\t\t\tString newPassword = String.valueOf(form.getPassword());\n+\n+\t\t\tSecurityConfig.autoLogin(request, newUsername, newPassword, response);\n \t\t} catch (IOException e) {\n-\t\t\t// TODO 自動生成された catch ブロック\n \t\t\te.printStackTrace();\n \t\t}\n-\t\treturn \"mypage/mypage\";\n+\t\treturn null;\n \t}\n \n \t@PostMapping(\"/mypage/favorite\")"
  },
  {
    "sha": "98e2fd7d390db84f95663af2babbf0af278e0f71",
    "filename": "src/main/java/com/example/demo/login/controller/SignupController.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/controller/SignupController.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/controller/SignupController.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/controller/SignupController.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -15,7 +15,7 @@\n \n import com.example.demo.SecurityConfig;\n import com.example.demo.login.domain.model.GroupOrder;\n-import com.example.demo.login.domain.model.SignupForm;\n+import com.example.demo.login.domain.model.UserForm;\n import com.example.demo.login.domain.model.User;\n import com.example.demo.login.domain.service.UserService;\n \n@@ -26,13 +26,13 @@\n \tprivate UserService userService;\n \n \t@PostMapping(\"/signup\")\n-\tpublic String postSignUp(@ModelAttribute SignupForm form, Model model) {\n+\tpublic String postSignUp(@ModelAttribute UserForm form, Model model) {\n \n \t\treturn \"signup/signup\";\n \t}\n \n \t@PostMapping(\"/signupUser\")\n-\tpublic String postSignUp(@ModelAttribute @Validated(GroupOrder.class) SignupForm form, BindingResult bindingResult, Model model, HttpServletRequest request,\n+\tpublic String postSignUp(@ModelAttribute @Validated(GroupOrder.class) UserForm form, BindingResult bindingResult, Model model, HttpServletRequest request,\n \t\t\tHttpServletResponse response) {\n \n \t\tif (bindingResult.hasErrors()) {\n@@ -58,6 +58,7 @@ public String postSignUp(@ModelAttribute @Validated(GroupOrder.class) SignupForm\n \t\ttry {\n \t\t\tString username = String.valueOf(form.getUserName());\n \t\t\tString password = String.valueOf(form.getPassword());\n+\n \t\t\tSecurityConfig.autoLogin(request, username, password, response);\n \t\t} catch (IOException e) {\n \t\t\te.printStackTrace();"
  },
  {
    "sha": "0a08b22c25f836f33b7730f6a1512842e2165086",
    "filename": "src/main/java/com/example/demo/login/domain/model/UniqueUserNameValid.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/model/UniqueUserNameValid.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/model/UniqueUserNameValid.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/domain/model/UniqueUserNameValid.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -19,8 +19,9 @@ public void initialize(UniqueUserName constraintAnnotation) {\n \n \tpublic boolean isValid(String userName, ConstraintValidatorContext context) {\n \n-\t\tUser user = userService.findByUserName(userName);\n-\t\tif(user == null) {\n+\t\tint userNameExist = userService.exist(userName);\n+\n+\t\tif(userNameExist == 0) {\n \t\t\treturn true;\n \t\t}\n \t\treturn false;"
  },
  {
    "sha": "ce86d4942b12dba48459d65b1dde5c836c783dfe",
    "filename": "src/main/java/com/example/demo/login/domain/model/UserForm.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/model/UserForm.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/model/UserForm.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/domain/model/UserForm.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -10,7 +10,7 @@\n import lombok.Data;\n \n @Data\n-public class SignupForm {\n+public class UserForm {\n \n \t@NotBlank(groups = ValidGroup1.class)\n \t@UniqueUserName(groups = ValidGroup1.class)",
    "previous_filename": "src/main/java/com/example/demo/login/domain/model/SignupForm.java"
  },
  {
    "sha": "b77329f29be331af3864d2be0552e34877e0ccab",
    "filename": "src/main/java/com/example/demo/login/domain/repository/UserDao.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/repository/UserDao.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/repository/UserDao.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/domain/repository/UserDao.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -14,5 +14,5 @@\n \n \tpublic int deleteOne(String userName) throws DataAccessException;\n \n-\tpublic User findByUserName(String userName) throws DataAccessException;\n+\tpublic int exist(String userName) throws DataAccessException;\n }"
  },
  {
    "sha": "f5f7b145d5d0c7f03dcfa7a8540db45303226183",
    "filename": "src/main/java/com/example/demo/login/domain/repository/jdbc/UserDaoJdbcImpl.java",
    "status": "modified",
    "additions": 16,
    "deletions": 18,
    "changes": 34,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/repository/jdbc/UserDaoJdbcImpl.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/repository/jdbc/UserDaoJdbcImpl.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/domain/repository/jdbc/UserDaoJdbcImpl.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -59,35 +59,32 @@ public int updateOne(User user, String userName_LoggedIn) throws DataAccessExcep\n \t\t\t\tpassword,\n \t\t\t\tuserName_LoggedIn);\n \n-\t\tSystem.out.println(user.getUserName()+\"へ変更\");\n-\n \t\treturn rowNumber;\n \t}\n \n \t@Override\n \tpublic User selectOne(String userName) throws DataAccessException {\n \n-\t\tMap<String, Object> map = jdbc.queryForMap(\"SELECT * FROM userData WHERE userName = ?\", userName);\n+\t\tMap<String, Object> singleUser = jdbc.queryForMap(\"SELECT * FROM userData WHERE userName = ?\", userName);\n \n \t\tUser user = new User();\n \n-\t\tSystem.out.println(map.get(\"userId\"));\n-\n-\t\tuser.setUserName((String)map.get(\"userName\"));\n-\t\tuser.setMailAddress((String)map.get(\"mailAddress\"));\n-\t\tuser.setPassword((String)map.get(\"password\"));\n+\t\tuser.setUserName((String)singleUser.get(\"userName\"));\n+\t\tuser.setMailAddress((String)singleUser.get(\"mailAddress\"));\n+\t\tuser.setPassword((String)singleUser.get(\"password\"));\n \n \t\treturn user;\n \t}\n \n \t@Override\n \tpublic int deleteOne(String userName) throws DataAccessException {\n \n-\t\tMap<String, Object> map = jdbc.queryForMap(\"SELECT userId FROM userData WHERE userName = ?\", userName);\n+\t\tint userId = jdbc.queryForObject(\"SELECT userId FROM userData WHERE userName = ?\", Integer.class, userName);\n \n-\t\tint rowNumber = jdbc.update(\"UPDATE userData SET unavailableFlag = '1' WHERE userId = ? AND unavailableFlag IS NULL\", map.get(\"userId\"));\n+\t\tint rowNumber = jdbc.update(\"UPDATE userData SET unavailableFlag = '1' WHERE userId = ? AND unavailableFlag IS NULL\", userId);\n \n-\t\tint rowNumber2 = jdbc.update(\"UPDATE favGift SET unavailableFlag = '1' WHERE userId = ? AND unavailableFlag IS NULL\", map.get(\"userId\"));\n+\t\t//このメソッドはfavGiftDaoに移行させます。　今だとコンフリクトが起きるのでfavGiftのブランチがマージされた後に対応します。\n+\t\tint rowNumber2 = jdbc.update(\"UPDATE favGift SET unavailableFlag = '1' WHERE userId = ? AND unavailableFlag IS NULL\", userId);\n \n         if(rowNumber2 > 0) {\n         \tSystem.out.println(\"お気に入り削除完了\");\n@@ -99,22 +96,23 @@ public int deleteOne(String userName) throws DataAccessException {\n \t}\n \n \t@Override\n-\tpublic User findByUserName(String userName) throws DataAccessException{\n+\tpublic int exist(String userName) throws DataAccessException{\n+\n+\t\t\tint userNameExist = jdbc.queryForObject(\"SELECT COUNT(userName) FROM userData WHERE userName = ?\", Integer.class, userName);\n+\n+\t\t\treturn userNameExist;\n+\t}\n+\n+\tpublic User findUser(String userName) throws DataAccessException{\n \n-\t\ttry {\n \t\t\tMap<String, Object> map = jdbc.queryForMap(\"SELECT * FROM userData WHERE userName = ?\", userName);\n \n \t\t\tUser user = new User();\n \n \t\t\tuser.setUserName((String)map.get(\"userName\"));\n \t\t\tuser.setMailAddress((String)map.get(\"mailAddress\"));\n \t\t\tuser.setPassword((String)map.get(\"password\"));\n-\n \t\t\treturn user;\n-\n-\t\t} catch(DataAccessException e) {\n-\t\t\treturn null;\n-\t\t}\n \t}\n \n "
  },
  {
    "sha": "777e174fdcc415e51e3a3136b61fcdba8e9e821b",
    "filename": "src/main/java/com/example/demo/login/domain/service/UserService.java",
    "status": "modified",
    "additions": 21,
    "deletions": 23,
    "changes": 44,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/service/UserService.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/java/com/example/demo/login/domain/service/UserService.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/java/com/example/demo/login/domain/service/UserService.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -1,6 +1,7 @@\n package com.example.demo.login.domain.service;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -17,14 +18,14 @@\n \n \tpublic boolean insertOne(User user) {\n \n-\t\tint rowNumber = dao.insertOne(user);\n+\t\ttry {\n+\t\t\tdao.insertOne(user);\n \n-\t\tboolean result = false;\n+\t\t\treturn true;\n+\t\t} catch(DataAccessException e) {\n \n-\t\tif (rowNumber > 0) {\n-\t\t\tresult = true;\n+\t\t\treturn false;\n \t\t}\n-\t\treturn result;\n \t}\n \n \tpublic User selectOne(String userName) {\n@@ -35,37 +36,34 @@ public User selectOne(String userName) {\n \n \tpublic boolean updateOne(User user, String userName_LoggedIn) {\n \n+\t\ttry {\n+\t\t\tdao.updateOne(user, userName_LoggedIn);\n \n-\t\tint rowNumber = dao.updateOne(user, userName_LoggedIn);\n+\t\t\treturn true;\n+\t\t} catch(DataAccessException e) {\n \n-\t\tboolean result = false;\n-\n-\t\tif (rowNumber > 0) {\n-\n-\t\t\tresult = true;\n+\t\t\treturn false;\n \t\t}\n-\n-\t\treturn result;\n \t}\n \n \tpublic boolean deleteOne(String userName) {\n \n-\t\tint rowNumber = dao.deleteOne(userName);\n-\n-\t\tboolean result = false;\n+\t\ttry {\n+\t\t\tdao.deleteOne(userName);\n \n-\t\tif (rowNumber > 0) {\n+\t\t\treturn true;\n+\t\t}  catch(DataAccessException e) {\n \n-\t\t\tresult = true;\n+\t\t\treturn false;\n \t\t}\n-\n-\t\treturn result;\n \t}\n \n-\tpublic User findByUserName(String userName) {\n \n-\t\tUser user = dao.findByUserName(userName);\n \n-\t\treturn user;\n+\tpublic int exist(String userName) {\n+\n+\t\tint userNameExist = dao.exist(userName);\n+\n+\t\treturn userNameExist;\n \t}\n }"
  },
  {
    "sha": "21376b38749b29c84b3052cd671d25a129c27a06",
    "filename": "src/main/resources/messages.properties",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/resources/messages.properties",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/resources/messages.properties",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/resources/messages.properties?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -1,17 +1,17 @@\n-signupForm.userName=ユーザーネーム\n-NotBlank.signupForm.userName={0}を入力してください\n-Length.signupForm.userName={0}は、{2}字以上{１}字以下で入力してください\n-Pattern.signupForm.userName={0}は半角英数字で入力してください\n-UniqueUserName.signupForm.userName=入力された{0}は既に使用されています\n+userForm.userName=ユーザーネーム\n+NotBlank.userForm.userName={0}を入力してください\n+Length.userForm.userName={0}は{2}字以上{１}字以下で入力してください\n+Pattern.userForm.userName={0}は半角英数字で入力してください\n+UniqueUserName.userForm.userName=入力された{0}は既に使用されています\n \n-signupForm.mailAddress=メールアドレス\n-NotBlank.signupForm.mailAddress={0}を入力してください\n-Email.signupForm.mailAddress=メールアドレス形式で入力してください\n+userForm.mailAddress=メールアドレス\n+NotBlank.userForm.mailAddress={0}を入力してください\n+Email.userForm.mailAddress=メールアドレス形式で入力してください\n \n-signupForm.password=パスワード\n-NotBlank.signupForm.password={0}を入力してください\n-Length.signupForm.password={0}は、{2}字以上{１}字以下で入力してください\n-Pattern.signupForm.password={0}は半角英数字で入力してください\n+userForm.password=パスワード\n+NotBlank.userForm.password={0}を入力してください\n+Length.userForm.password={0}は{2}字以上{１}字以下で入力してください\n+Pattern.userForm.password={0}は半角英数字で入力してください\n \n searchForm.keyword=キーワード\n NotBlank.searchForm.keyword={0}を入力してください"
  },
  {
    "sha": "3770a8287d61442792fdc03dcae5aa2269493640",
    "filename": "src/main/resources/templates/mypage/updateUser/updateUser.html",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/resources/templates/mypage/updateUser/updateUser.html",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/resources/templates/mypage/updateUser/updateUser.html",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/resources/templates/mypage/updateUser/updateUser.html?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -16,7 +16,7 @@\n \t\t\t\t<h1>登録情報更新</h1>\n \t\t\t\t<h6><b>更新後はログアウトが実行されます。</b></h6>\n \t        </div>\n-\t        <form method=\"post\" th:action=\"@{/updateUserInfo}\" th:object=\"${signupForm}\">\n+\t        <form method=\"post\" th:action=\"@{/updateUserInfo}\" th:object=\"${userForm}\">\n \t\t\t\t<table class=\"table table-bordered table-hover\">\n \t\t\t\t<tr>\n \t\t\t\t\t<td>"
  },
  {
    "sha": "8c9d86c9b25b836cc1bb28da67bee6d03346e9c8",
    "filename": "src/main/resources/templates/signup/signup.html",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/main/resources/templates/signup/signup.html",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/main/resources/templates/signup/signup.html",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/main/resources/templates/signup/signup.html?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -13,7 +13,7 @@\n \t\t\t<div class=\"page-header\">\n \t\t\t\t<h1>ユーザー登録画面</h1>\n \t\t\t</div>\n-\t\t\t<form method=\"post\" th:action=\"@{/signupUser}\" th:object=\"${signupForm}\">\n+\t\t\t<form method=\"post\" th:action=\"@{/signupUser}\" th:object=\"${userForm}\">\n \n \t\t\t\t<table class=\"table table-bordered table-hover\">\n \t\t\t\t<tr>"
  },
  {
    "sha": "764e6672b2b32b9490dbb6b21c74f1a0acba715a",
    "filename": "src/test/java/com/example/demo/MyPageControllerTest.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/MyPageControllerTest.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/MyPageControllerTest.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/java/com/example/demo/MyPageControllerTest.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,151 @@\n+package com.example.demo;\n+\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.example.demo.login.controller.SignupController;\n+import com.example.demo.login.domain.model.User;\n+import com.example.demo.login.domain.model.UserForm;\n+import com.example.demo.login.domain.service.UserService;\n+\n+\n+\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+@Transactional\n+@Sql({\"/Delete.sql\", \"/Schema.sql\", \"/Insert.sql\"})\n+public class MyPageControllerTest {\n+\n+\t@Autowired\n+\tprivate MockMvc mockMvc;\n+\n+\t@Mock\n+\tUserService userService;\n+\n+\t@InjectMocks\n+\tSignupController signupController;\n+\n+\t@BeforeEach\n+\tpublic void initMocks() {\n+\t\tMockitoAnnotations.initMocks(this);\n+\t}\n+\n+\t@Test\n+\t@WithMockUser(username=\"userName3\")\n+\tpublic void ユーザー登録情報削除() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\twhen(userService.deleteOne(userName)).thenReturn(true);\n+\n+\t\tmockMvc.perform(post(\"/deleteUser\").with(csrf()))\n+\t\t\t   .andExpect(status().isFound())\n+\t\t\t   .andExpect(redirectedUrl(\"/login\"));\n+\t}\n+\n+\t@Test\n+\t@WithMockUser(username=\"userName3\")\n+\tpublic void 登録情報取得() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tuser.setUserName(userName);\n+\t\tuser.setMailAddress(\"mailaddress3@gmail.co.jp\");\n+\n+\t\twhen(userService.selectOne(userName)).thenReturn(user);\n+\n+\t\tmockMvc.perform(post(\"/mypage/updateUser\").with(csrf()))\n+\t\t\t   .andExpect(status().isOk())\n+\t\t\t   .andExpect(content().string(containsString(\"userName3\")))\n+\t\t\t   .andExpect(content().string(containsString(\"mailaddress3@gmail.co.jp\")));\n+\t}\n+\n+\t@Test\n+\t@WithMockUser(username=\"userName3\")\n+\tpublic void 登録情報更新成功() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\twhen(userService.updateOne(user, userName)).thenReturn(true);\n+\n+\t\tUserForm form = new UserForm();\n+\n+\t\tform.setUserName(\"uniqueUserName\");\n+\t\tform.setMailAddress(\"mail@gmail.com\");\n+\t\tform.setPassword(\"7777\");\n+\n+\t\tmockMvc.perform(post(\"/updateUserInfo\").flashAttr(\"userForm\", form).with(csrf()))\n+\t\t   \t   .andExpect(status().isFound())\n+\t\t       .andExpect(redirectedUrl(\"/mypage\"));\n+\t}\n+\n+\t@Test\n+\t@WithMockUser(username=\"userName3\")\n+\tpublic void 登録情報更新失敗_ユーザーネームユニークエラー() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\twhen(userService.updateOne(user, userName)).thenReturn(false);\n+\n+\t\tUserForm form = new UserForm();\n+\n+\t\tform.setUserName(\"userName3\");\n+\t\tform.setMailAddress(\"mail@gmail.com\");\n+\t\tform.setPassword(\"7777\");\n+\n+\t\tmockMvc.perform(post(\"/updateUserInfo\").flashAttr(\"userForm\", form).with(csrf()))\n+\t\t\t   .andExpect(status().isOk())\n+\t\t\t   .andExpect(content().string(containsString(\"入力されたユーザーネームは既に使用されています\")));\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報更新失敗_バリデーションエラー() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\twhen(userService.updateOne(user, userName)).thenReturn(false);\n+\n+\t\tUserForm form = new UserForm();\n+\n+\t\tform.setUserName(\"くに\");\n+\t\tform.setMailAddress(\"mail\");\n+\t\tform.setPassword(\"くに\");\n+\n+\n+\t\tmockMvc.perform(post(\"/signupUser\").flashAttr(\"userForm\", form).with(csrf()))\n+\t\t\t   .andExpect(status().isOk())\n+\t\t\t   .andExpect(view().name(\"signup/signup\"))\n+\t\t\t   .andExpect(content().string(containsString(\"ユーザーネームは3字以上20字以下で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"ユーザーネームは半角英数字で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"ユーザーネームは3字以上20字以下で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"メールアドレス形式で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"パスワードは3字以上20字以下で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"パスワードは半角英数字で入力してください\")));\n+\t}\n+}"
  },
  {
    "sha": "a8a0ccd1766226b51d7d98d5b136a9f84bd66306",
    "filename": "src/test/java/com/example/demo/SignupControllerTest.java",
    "status": "added",
    "additions": 112,
    "deletions": 0,
    "changes": 112,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/SignupControllerTest.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/SignupControllerTest.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/java/com/example/demo/SignupControllerTest.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,112 @@\n+package com.example.demo;\n+\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.example.demo.login.controller.SignupController;\n+import com.example.demo.login.domain.model.User;\n+import com.example.demo.login.domain.model.UserForm;\n+import com.example.demo.login.domain.service.UserService;\n+\n+\n+\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+@Transactional\n+@Sql({\"/Delete.sql\", \"/Schema.sql\", \"/Insert.sql\"})\n+public class SignupControllerTest {\n+\n+\t@Autowired\n+\tprivate MockMvc mockMvc;\n+\n+\t@Mock\n+\tUserService userService;\n+\n+\t@InjectMocks\n+\tSignupController signupController;\n+\n+\t@BeforeEach\n+\tpublic void initMocks() {\n+\t\tMockitoAnnotations.initMocks(this);\n+\t}\n+\n+\t@Test\n+\tpublic void 新規登録成功() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\twhen(userService.insertOne(user)).thenReturn(true);\n+\n+\t\tUserForm form = new UserForm();\n+\n+\t\tform.setUserName(\"uniqueUserName\");\n+\t\tform.setMailAddress(\"mail@gmail.com\");\n+\t\tform.setPassword(\"7777\");\n+\n+\n+\t\tmockMvc.perform(post(\"/signupUser\").flashAttr(\"userForm\", form).with(csrf()))\n+\t\t\t   .andExpect(status().isFound())\n+\t\t\t   .andExpect(redirectedUrl(\"/mypage\"));\n+\t}\n+\n+\t@Test\n+\tpublic void 新規登録失敗_ユーザーネームユニークエラー() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\twhen(userService.insertOne(user)).thenReturn(false);\n+\n+\t\tUserForm form = new UserForm();\n+\n+\t\tform.setUserName(\"userName3\");\n+\t\tform.setMailAddress(\"mail@gmail.com\");\n+\t\tform.setPassword(\"7777\");\n+\n+\t\tmockMvc.perform(post(\"/signupUser\").flashAttr(\"userForm\", form).with(csrf()))\n+\t\t\t   .andExpect(status().isOk())\n+\t\t\t   .andExpect(view().name(\"signup/signup\"))\n+\t\t\t   .andExpect(content().string(containsString(\"入力されたユーザーネームは既に使用されています\")));\n+\t}\n+\n+\t@Test\n+\tpublic void 新規登録失敗_バリデーションエラー() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\twhen(userService.insertOne(user)).thenReturn(false);\n+\n+\t\tUserForm form = new UserForm();\n+\n+\t\tform.setUserName(\"くに\");\n+\t\tform.setMailAddress(\"mail\");\n+\t\tform.setPassword(\"くに\");\n+\n+\n+\t\tmockMvc.perform(post(\"/signupUser\").flashAttr(\"userForm\", form).with(csrf()))\n+\t\t\t   .andExpect(status().isOk())\n+\t\t\t   .andExpect(view().name(\"signup/signup\"))\n+\t\t\t   .andExpect(content().string(containsString(\"ユーザーネームは3字以上20字以下で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"ユーザーネームは半角英数字で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"ユーザーネームは3字以上20字以下で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"メールアドレス形式で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"パスワードは3字以上20字以下で入力してください\")))\n+\t\t\t   .andExpect(content().string(containsString(\"パスワードは半角英数字で入力してください\")));\n+\t}\n+}"
  },
  {
    "sha": "c565284cd5c3f253c872d51eb256d57e38e8e81c",
    "filename": "src/test/java/com/example/demo/UserDaoJdbcImpleTest.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/UserDaoJdbcImpleTest.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/UserDaoJdbcImpleTest.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/java/com/example/demo/UserDaoJdbcImpleTest.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,124 @@\n+package com.example.demo;\n+\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.example.demo.login.domain.model.User;\n+import com.example.demo.login.domain.repository.jdbc.UserDaoJdbcImpl;\n+\n+\n+\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+@Transactional\n+@Sql({\"/Delete.sql\", \"/Schema.sql\", \"/Insert.sql\"})\n+public class UserDaoJdbcImpleTest {\n+\n+\t@Autowired\n+\tUserDaoJdbcImpl userDaoJdbcImpl;\n+\n+\t@Test\n+\tpublic void 新規登録() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"uniqueUserName\");\n+\t\tuser.setMailAddress(\"mail@gmail.com\");\n+\t\tuser.setPassword(\"7777\");\n+\n+\t\tint expected = 1;\n+\n+\t\tint actual = userDaoJdbcImpl.insertOne(user);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報更新() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"userName4\");\n+\t\tuser.setMailAddress(\"mailaddress3@gmail.co.jp\");\n+\t\tuser.setPassword(\"password2\");\n+\n+\t\tint expected = 1;\n+\n+\t\tint actual = userDaoJdbcImpl.updateOne(user, userName);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\n+\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報取得() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tUser user = userDaoJdbcImpl.selectOne(userName);\n+\n+\t\tassertThat(user, hasProperty(\"userName\", equalTo(\"userName3\")));\n+\t\tassertThat(user, hasProperty(\"mailAddress\", equalTo(\"mailaddress3@gmail.co.jp\")));\n+\t\tassertThat(user, hasProperty(\"password\", equalTo(\"$2a$10$xRTXvpMWly0oGiu65WZlm.3YL95LGVV2ASFjDhe6WF4.Qji1huIPa\")));\n+\t}\n+\n+\t@Test\n+\tpublic void ユーザー登録情報削除成功() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tint expected = 1;\n+\t\tint actual = userDaoJdbcImpl.deleteOne(userName);\n+\n+\t\t assertThat(expected, is(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void ユーザー登録情報削除失敗() throws Exception {\n+\n+\t\tString userName = \"userName4\";\n+\n+\t\tint expected = 0;\n+\t\tint actual = userDaoJdbcImpl.deleteOne(userName);\n+\n+\t\t assertThat(expected, is(actual));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void userNameユニークチェック_重複あり() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tint expected = 1;\n+\t    int actual = userDaoJdbcImpl.exist(userName);\n+\n+\t    assertThat(expected, is(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void userNameユニークチェック_重複なし() throws Exception {\n+\n+\t\tString userName = \"uniqueUserName\";\n+\n+\t\tint expected = 0;\n+\t    int actual = userDaoJdbcImpl.exist(userName);\n+\n+\t    assertThat(expected, is(actual));\n+\t}\n+\n+}"
  },
  {
    "sha": "cc67391a40d128b3c4ebf857d8d9b627a31e4c67",
    "filename": "src/test/java/com/example/demo/UserDaoTest.java",
    "status": "modified",
    "additions": 84,
    "deletions": 5,
    "changes": 89,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/UserDaoTest.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/UserDaoTest.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/java/com/example/demo/UserDaoTest.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -1,26 +1,105 @@\n package com.example.demo;\n \n \n-import org.junit.runner.RunWith;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.jdbc.Sql;\n import org.springframework.transaction.annotation.Transactional;\n \n+import com.example.demo.login.domain.model.User;\n import com.example.demo.login.domain.repository.UserDao;\n \n \n \n-@RunWith(SpringRunner.class)\n+\n @SpringBootTest\n+@AutoConfigureMockMvc\n @Transactional\n+@Sql({\"/Delete.sql\", \"/Schema.sql\", \"/Insert.sql\"})\n public class UserDaoTest {\n \n \t@Autowired\n-\t@Qualifier(\"UserDaoJdbcImpl\")\n-\tUserDao dao;\n+\t@Qualifier(\"userDaoJdbcImpl\")\n+\tUserDao userDao;\n+\n+\t@Test\n+\tpublic void 新規登録() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"uniqueUserName\");\n+\t\tuser.setMailAddress(\"mail@gmail.com\");\n+\t\tuser.setPassword(\"7777\");\n+\n+\t\tint expected = 1;\n+\n+\t\tint actual = userDao.insertOne(user);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報更新() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"userName4\");\n+\t\tuser.setMailAddress(\"mailaddress3@gmail.co.jp\");\n+\t\tuser.setPassword(\"password2\");\n+\n+\t\tint expected = 1;\n+\n+\t\tint actual = userDao.updateOne(user, userName);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\n+\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報取得() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\t\tUser user = userDao.selectOne(userName);\n+\n+\t\tassertThat(user, hasProperty(\"userName\", equalTo(\"userName3\")));\n+\t\tassertThat(user, hasProperty(\"mailAddress\", equalTo(\"mailaddress3@gmail.co.jp\")));\n+\t\tassertThat(user, hasProperty(\"password\", equalTo(\"$2a$10$xRTXvpMWly0oGiu65WZlm.3YL95LGVV2ASFjDhe6WF4.Qji1huIPa\")));\n+\t}\n+\n+\t@Test\n+\tpublic void ユーザー登録情報削除() throws Exception {\n+\t\tString userName = \"userName3\";\n+\t}\n+\n+\n+\t@Test\n+\tpublic void userNameユニークチェック_重複あり() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\t\tint expected = 1;\n+\t    int actual = userDao.exist(userName);\n+\n+\t    assertThat(expected, is(actual));\n+\t}\n \n+\t@Test\n+\tpublic void userNameユニークチェック_重複なし() throws Exception {\n \n+\t\tString userName = \"uniqueUserName\";\n+\t\tint expected = 0;\n+\t    int actual = userDao.exist(userName);\n \n+\t    assertThat(expected, is(actual));\n+\t}\n }"
  },
  {
    "sha": "1a360bf073e8bc3a18ca29b167b90995f1fe9172",
    "filename": "src/test/java/com/example/demo/UserServiceTest.java",
    "status": "added",
    "additions": 152,
    "deletions": 0,
    "changes": 152,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/UserServiceTest.java",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/java/com/example/demo/UserServiceTest.java",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/java/com/example/demo/UserServiceTest.java?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,152 @@\n+package com.example.demo;\n+\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.example.demo.login.domain.model.User;\n+import com.example.demo.login.domain.service.UserService;\n+\n+\n+\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+@Transactional\n+@Sql({\"/Delete.sql\", \"/Schema.sql\", \"/Insert.sql\"})\n+public class UserServiceTest {\n+\n+\t@Autowired\n+\tUserService userService;\n+\n+\t@Test\n+\tpublic void 新規登録成功() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"uniqueUserName\");\n+\t\tuser.setMailAddress(\"mail@gmail.com\");\n+\t\tuser.setPassword(\"7777\");\n+\n+\t\tboolean expected = true;\n+\t\tboolean actual = userService.insertOne(user);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void 新規登録失敗() throws Exception {\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"userName3\");\n+\t\tuser.setMailAddress(\"mail@gmail.com\");\n+\t\tuser.setPassword(\"7777\");\n+\n+\t\tboolean expected = false;\n+\t\tboolean actual = userService.insertOne(user);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報取得() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\t\tUser user = userService.selectOne(userName);\n+\n+\t\tassertThat(user, hasProperty(\"userName\", equalTo(\"userName3\")));\n+\t\tassertThat(user, hasProperty(\"mailAddress\", equalTo(\"mailaddress3@gmail.co.jp\")));\n+\t\tassertThat(user, hasProperty(\"password\", equalTo(\"$2a$10$xRTXvpMWly0oGiu65WZlm.3YL95LGVV2ASFjDhe6WF4.Qji1huIPa\")));\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報更新成功() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"userName4\");\n+\t\tuser.setMailAddress(\"mailaddress3@gmail.co.jp\");\n+\t\tuser.setPassword(\"password2\");\n+\n+\t\tboolean expected = true;\n+\n+\t\tboolean actual = userService.updateOne(user, userName);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void 登録情報更新失敗() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tUser user = new User();\n+\n+\t\tuser.setUserName(\"userName5\");\n+\t\tuser.setMailAddress(\"mailaddress3@gmail.co.jp\");\n+\t\tuser.setPassword(\"password2\");\n+\n+\t\tboolean expected = false;\n+\n+\t\tboolean actual = userService.updateOne(user, userName);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void ユーザー登録情報削除成功() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\n+\t\tboolean expected = true;\n+\t\tboolean actual = userService.deleteOne(userName);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\n+\t}\n+\n+\t@Test\n+\tpublic void ユーザー登録情報削除失敗() throws Exception {\n+\n+\t\tString userName = \"userName4\";\n+\n+\t\tboolean expected = false;\n+\t\tboolean actual = userService.deleteOne(userName);\n+\n+\t\tassertThat(expected, equalTo(actual));\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void userNameユニークチェック_重複あり() throws Exception {\n+\n+\t\tString userName = \"userName3\";\n+\t\tint expected = 1;\n+\t    int actual = userService.exist(userName);\n+\n+\t    assertThat(expected, is(actual));\n+\t}\n+\n+\t@Test\n+\tpublic void userNameユニークチェック_重複なし() throws Exception {\n+\n+\t\tString userName = \"uniqueUserName\";\n+\t\tint expected = 0;\n+\t    int actual = userService.exist(userName);\n+\n+\t    assertThat(expected, is(actual));\n+\t}\n+}"
  },
  {
    "sha": "40a22642615feebec68f897896d2e8a9bb0d64e5",
    "filename": "src/test/resources/Delete.sql",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/resources/Delete.sql",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/resources/Delete.sql",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/resources/Delete.sql?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,4 @@\n+DROP TABLE IF EXISTS favGift;\n+DROP TABLE IF EXISTS gift;\n+DROP TABLE IF EXISTS guest;\n+DROP TABLE IF EXISTS userData;\n\\ No newline at end of file"
  },
  {
    "sha": "bcc9d5959fbbce00926f3b4a3fc84a5f78d8ba0e",
    "filename": "src/test/resources/Insert.sql",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/resources/Insert.sql",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/resources/Insert.sql",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/resources/Insert.sql?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,13 @@\n+INSERT INTO userData(userName, mailAddress, password, role) VALUES('userName3', 'mailaddress3@gmail.co.jp', '$2a$10$xRTXvpMWly0oGiu65WZlm.3YL95LGVV2ASFjDhe6WF4.Qji1huIPa', 'ROLE_GENERAL');\n+INSERT INTO userData(userName, mailAddress, password, role) VALUES('userName5', 'mailaddress3@gmail.co.jp', '$2a$10$xRTXvpMWly0oGiu65WZlm.3YL95LGVV2ASFjDhe6WF4.Qji1huIPa', 'ROLE_GENERAL');\n+\n+INSERT INTO guest(guestId, guestName) VALUES('1000', '中越典子');\n+INSERT INTO guest(guestId, guestName) VALUES('1001', 'ミムラ');\n+INSERT INTO guest(guestId, guestName) VALUES('1002', '掛布雅之');\n+\n+INSERT INTO gift(giftId, guestId, giftName, price, image, description, shop, address, phone) VALUES('1000', '1000', 'マカロン', '120個入　3938円', '1000.jpg', 'ショコラアメール/ショコラヴァニーユ/ショコラフランボワーズショコラキャラメル/ショコラカフェ/ショコラミエルショコラピスターシュ/ショコラベルガモット/ショコラパッションポムアニス/マングコリアンドル/パンオレザン上記、12種類', 'ジャン＝ポール･エヴァン伊勢丹新宿店', '東京都新宿区新宿3-14-1伊勢丹新宿店本館B1階', '03-3352-1111');\n+INSERT INTO gift(giftId, guestId, giftName, price, image, description, shop, address, phone) VALUES('1001', '1001', '五家寶', '細巻6本入り 170円', '1001.jpg', '各種詰め合わせあります。ぷうん、と香るきな粉の香ばしさ、サクッとした歯応え、そしてすうっと溶け入る舌触り・・・・・・。主原料である大豆、糯米、砂糖、水飴等が織りなすこの豊かな風味は、総て独自のものを用い、心のこもった手造りによる『花堤五家寳』ならではのものです。', '花堤', '玉県熊谷市榎町3', '048-521-0471');\n+INSERT INTO gift(giftId, guestId, giftName, price, image, description, shop, address, phone) VALUES('1002', '1002', 'ロールケーキ', '1000円 ', '1.jpg', 'ロールケーキ専門店で、手作りしている為、1日80本限定販売です。平飼地鶏の有精自然卵、国内産の小麦粉、砂糖、低脂肪の純生クリームと厳選された素材を使用しています。もちろん、添加物、保存料は一切使用していません。このロールケーキはプレーンとチョコの２種類で、カフェでは、ロールケーキと飲み物のセットがあります。', 'Flat', '豊中市上野東3-18-8', '06-6848-7505');\n+\n+INSERT INTO favGift(userId, giftId) VALUES('1', '1000');\n+INSERT INTO favGift(userId, giftId) VALUES('1', '1001');"
  },
  {
    "sha": "81abbec76a0b88cfaded9f1fbf65e67242db3834",
    "filename": "src/test/resources/Schema.sql",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/hiroki1994/snitch/blob/682f79e02e968c3804c2d4b45826e186800944a8/src/test/resources/Schema.sql",
    "raw_url": "https://github.com/hiroki1994/snitch/raw/682f79e02e968c3804c2d4b45826e186800944a8/src/test/resources/Schema.sql",
    "contents_url": "https://api.github.com/repos/hiroki1994/snitch/contents/src/test/resources/Schema.sql?ref=682f79e02e968c3804c2d4b45826e186800944a8",
    "patch": "@@ -0,0 +1,36 @@\n+CREATE TABLE IF NOT EXISTS userData (\n+\tuserId INT PRIMARY KEY AUTO_INCREMENT,\n+\tuserName VARCHAR(20) UNIQUE,\n+\tmailAddress VARCHAR(100),\n+\tpassword VARCHAR(100),\n+\trole VARCHAR(20),\n+\tunavailableFlag INT\n+);\n+\n+CREATE TABLE IF NOT EXISTS guest (\n+\tguestId INT PRIMARY KEY AUTO_INCREMENT,\n+\tguestName VARCHAR(30),\n+\tunavailableFlag INT default 0\n+);\n+\n+CREATE TABLE IF NOT EXISTS gift (\n+  \tgiftId INT PRIMARY KEY AUTO_INCREMENT,\n+  \tguestId INT,\n+  \tgiftName VARCHAR(50),\n+  \tprice VARCHAR(100),\n+  \timage VARCHAR(20),\n+  \tdescription VARCHAR(3000),\n+  \tshop VARCHAR(100),\n+  \taddress VARCHAR(500),\n+  \tphone VARCHAR(50),\n+  \tunavailableFlag INT,\n+  \tFOREIGN KEY (guestId) REFERENCES guest(guestId)\n+);\n+\n+\n+CREATE TABLE IF NOT EXISTS favGift (\n+  \tfavId INT PRIMARY KEY AUTO_INCREMENT,\n+  \tuserId INT,\n+  \tgiftId INT,\n+  \tunavailableFlag INT\n+);\n\\ No newline at end of file"
  }
]
