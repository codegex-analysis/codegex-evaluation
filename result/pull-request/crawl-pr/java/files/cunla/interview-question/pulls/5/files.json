[
  {
    "sha": "6d43b6dbcdc3d7744f91f4629760f1abeb734447",
    "filename": "README.md",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/README.md",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/README.md",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/README.md?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,28 @@\n+# Demo for Course Registration System\n+\n+#### Prerequisite:\n+````\n+Java 8\n+IntelliJ IDEA\n+Maven\n+````\n+\n+#### Database:\n+````\n+H2\n+````\n+\n+#### Build:\n+````\n+mvn clean install\n+````\n+\n+#### Run Application:\n+````\n+mvn spring-boot:run\n+````\n+\n+#### Swagger:\n+````\n+http://localhost:5000/swagger-ui/index.html#\n+````\n\\ No newline at end of file"
  },
  {
    "sha": "5fb22e6d7da3b15a88b016ed9e1a8b4b716ff2fd",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/pom.xml",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/pom.xml",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/pom.xml?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -50,6 +50,11 @@\n             <artifactId>lombok</artifactId>\n             <version>1.18.10</version>\n         </dependency>\n+        <dependency>\n+            <groupId>io.springfox</groupId>\n+            <artifactId>springfox-boot-starter</artifactId>\n+            <version>3.0.0</version>\n+        </dependency>\n     </dependencies>\n \n     <build>\n@@ -61,5 +66,4 @@\n         </plugins>\n     </build>\n \n-</project>\n-\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "71be39e0ccf56792962f703168790105c60b74ef",
    "filename": "src/main/java/com/example/demo/config/SwaggerConfig.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/config/SwaggerConfig.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/config/SwaggerConfig.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/config/SwaggerConfig.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,37 @@\n+package com.example.demo.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import springfox.documentation.builders.PathSelectors;\n+import springfox.documentation.builders.RequestHandlerSelectors;\n+import springfox.documentation.service.ApiInfo;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2;\n+\n+import java.util.Collections;\n+\n+@Configuration\n+@EnableSwagger2\n+public class SwaggerConfig {\n+    @Bean\n+    public Docket api() {\n+        return new Docket(DocumentationType.SWAGGER_2)\n+                .select()\n+                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo\"))\n+                .paths(PathSelectors.any())\n+                .build()\n+                .apiInfo(metaData());\n+    }\n+\n+    private ApiInfo metaData() {\n+        ApiInfo apiInfo = new ApiInfo(\n+                \"Course Registration REST API\",\n+                \"Spring Boot REST API for Course Registration System\",\n+                \"1.0\",\n+                \"\",\n+                null,\n+                \"\", \"\", Collections.emptyList());\n+        return apiInfo;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "699367b8b62387cb542e8584736744e441c4e184",
    "filename": "src/main/java/com/example/demo/controller/CourseController.java",
    "status": "added",
    "additions": 120,
    "deletions": 0,
    "changes": 120,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/CourseController.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/CourseController.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/CourseController.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,120 @@\n+package com.example.demo.controller;\n+\n+import com.example.demo.controller.data.*;\n+import com.example.demo.exception.InvalidRequestException;\n+import com.example.demo.service.CourseService;\n+import io.swagger.annotations.*;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.text.ParseException;\n+import java.util.List;\n+\n+/**\n+ * Controller class\n+ */\n+@Api(value = \"/courses\", tags = \"Course Details\")\n+@RestController\n+@RequestMapping(produces = \"application/json\")\n+public class CourseController {\n+    private final CourseService courseService;\n+\n+    public CourseController(final CourseService courseService) {\n+        this.courseService = courseService;\n+    }\n+\n+    @ApiOperation(value = \"Create Course\",\n+            response = CourseDetails.class)\n+    @ApiResponses(value = {\n+            @ApiResponse(code = 200, message = \"Successful\"),\n+            @ApiResponse(code = 201, message = \"Created\"),\n+            @ApiResponse(code = 400, message = \"Bad Request\"),\n+            @ApiResponse(code = 500, message = \"Internal Server Error\")\n+    })\n+    @PostMapping(value = \"/courses\")\n+    @ResponseStatus(value = HttpStatus.CREATED)\n+    public ResponseEntity<CourseDetails> createCourse(\n+            @RequestBody @Validated CourseRequest courseRequest) {\n+\n+        CourseDetails courseDetails = courseService.createCourse(courseRequest);\n+\n+        return new ResponseEntity(courseDetails, HttpStatus.CREATED);\n+    }\n+\n+    @ApiOperation(value = \"Search by course title\",\n+            response = CourseDetails.class, responseContainer = \"List\")\n+    @ApiResponses(value = {\n+            @ApiResponse(code = 200, message = \"Successful\"),\n+            @ApiResponse(code = 400, message = \"Bad Request\"),\n+            @ApiResponse(code = 500, message = \"Internal Server Error\")\n+    })\n+    @GetMapping(value = \"/courses\")\n+    public ResponseEntity<List<CourseParticipantDetails>> searchCourseByTitle(\n+            @ApiParam(value = \"Course title\", required = true)\n+            @RequestParam(value = \"q\") String q) {\n+\n+        List<CourseParticipantDetails> courseDetails = courseService.searchCourseByTitle(q);\n+\n+        return new ResponseEntity<>(courseDetails, HttpStatus.OK);\n+    }\n+\n+    @ApiOperation(value = \"Search by course id\",\n+            response = CourseParticipantDetails.class, responseContainer = \"List\")\n+    @ApiResponses(value = {\n+            @ApiResponse(code = 200, message = \"Successful\"),\n+            @ApiResponse(code = 400, message = \"Bad Request\"),\n+            @ApiResponse(code = 500, message = \"Internal Server Error\")\n+    })\n+    @GetMapping(value = \"/courses/{id}\")\n+    public ResponseEntity<List<CourseParticipantDetails>> searchCourseById(\n+            @PathVariable long id) {\n+\n+        List<CourseParticipantDetails> courseDetails = courseService.searchCourseById(id);\n+\n+        return new ResponseEntity<>(courseDetails, HttpStatus.OK);\n+    }\n+\n+    @ApiOperation(value = \"Register for course\",\n+            response = CourseParticipantDetails.class)\n+    @ApiResponses(value = {\n+            @ApiResponse(code = 200, message = \"Successful\"),\n+            @ApiResponse(code = 201, message = \"Created\"),\n+            @ApiResponse(code = 400, message = \"Bad Request\"),\n+            @ApiResponse(code = 500, message = \"Internal Server Error\")\n+    })\n+    @PostMapping(value = \"/courses/{id}/add\")\n+    public ResponseEntity<List<CourseParticipantDetails>> registerParticipant(\n+            @PathVariable long id,\n+            @RequestBody @Validated RegisterRequest registerRequest) throws ParseException {\n+\n+        if (!String.valueOf(id).equals(registerRequest.getCourseId()))\n+            throw new InvalidRequestException(\"Path variable and request body does not match\");\n+\n+        List<CourseParticipantDetails> register = courseService.register(id, registerRequest);\n+\n+        return new ResponseEntity<>(register, HttpStatus.OK);\n+    }\n+\n+    @ApiOperation(value = \"Register for course\",\n+            response = CourseParticipantDetails.class)\n+    @ApiResponses(value = {\n+            @ApiResponse(code = 200, message = \"Successful\"),\n+            @ApiResponse(code = 201, message = \"Created\"),\n+            @ApiResponse(code = 400, message = \"Bad Request\"),\n+            @ApiResponse(code = 500, message = \"Internal Server Error\")\n+    })\n+    @PostMapping(value = \"/courses/{id}/remove\")\n+    public ResponseEntity<List<CourseParticipantDetails>> unregisterParticipant(\n+            @PathVariable long id,\n+            @RequestBody @Validated UnRegisterRequest unRegisterRequest) throws ParseException {\n+\n+        if (!String.valueOf(id).equals(unRegisterRequest.getCourseId()))\n+            throw new InvalidRequestException(\"Path variable and request body does not match\");\n+\n+        List<CourseParticipantDetails> unregister = courseService.unregister(id, unRegisterRequest);\n+\n+        return new ResponseEntity<>(unregister, HttpStatus.OK);\n+    }\n+}"
  },
  {
    "sha": "3e24445b5d44a27d151a6134ed59b75bb7ec14e2",
    "filename": "src/main/java/com/example/demo/controller/GreetingController.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/GreetingController.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/GreetingController.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/GreetingController.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -1,4 +1,4 @@\n-package com.example.demo;\n+package com.example.demo.controller;\n \n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n@@ -8,8 +8,8 @@\n public class GreetingController {\n \n     @GetMapping(\"/greeting\")\n-    public String greeting(@RequestParam(name = \"name\", required = false, defaultValue = \"World\") String name) {\n-        return \"greeting \" + name;\n+    public String greeting(@RequestParam(name = \"name\", required = false, defaultValue = \"David\") String name) {\n+        return \"Hello \" + name;\n     }\n \n ",
    "previous_filename": "src/main/java/com/example/demo/GreetingController.java"
  },
  {
    "sha": "2f33f64001505bf580d68e016c6f02f584271a3b",
    "filename": "src/main/java/com/example/demo/controller/data/CourseDetails.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/CourseDetails.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/CourseDetails.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/data/CourseDetails.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,29 @@\n+package com.example.demo.controller.data;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+\n+/**\n+ * CourseDetails\n+ */\n+@Data\n+public class CourseDetails {\n+\n+    @ApiModelProperty(notes = \"Course Id\", example = \"1\")\n+    private String id;\n+\n+    @ApiModelProperty(notes = \"Course title\", example = \"Course Title\")\n+    private String title;\n+\n+    @ApiModelProperty(notes = \"End date of course\", example = \"2021-05-01\")\n+    private String startDate;\n+\n+    @ApiModelProperty(notes = \"End date of course\", example = \"2021-05-05\")\n+    private String endDate;\n+\n+    @ApiModelProperty(notes = \"Total capacity\", example = \"10\")\n+    private Integer capacity;\n+\n+    @ApiModelProperty(notes = \"Remaining Capacity\", example = \"10\")\n+    private Integer remaining;\n+}"
  },
  {
    "sha": "0682067b15860cf1f299bd4a0e78fa7a6f01e973",
    "filename": "src/main/java/com/example/demo/controller/data/CourseParticipantDetails.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/CourseParticipantDetails.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/CourseParticipantDetails.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/data/CourseParticipantDetails.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,34 @@\n+package com.example.demo.controller.data;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+/**\n+ * CourseParticipantDetails\n+ */\n+@Data\n+public class CourseParticipantDetails {\n+\n+    @ApiModelProperty(notes = \"Course Id\", example = \"1\")\n+    private String id;\n+\n+    @ApiModelProperty(notes = \"Course title\", example = \"Course Title\")\n+    private String title;\n+\n+    @ApiModelProperty(notes = \"End date of course\", example = \"2021-05-01\")\n+    private String startDate;\n+\n+    @ApiModelProperty(notes = \"End date of course\", example = \"2021-05-05\")\n+    private String endDate;\n+\n+    @ApiModelProperty(notes = \"Total capacity\", example = \"10\")\n+    private Integer capacity;\n+\n+    @ApiModelProperty(notes = \"Remaining Capacity\", example = \"10\")\n+    private Integer remaining;\n+\n+    @ApiModelProperty(notes = \"List of participants registered for course\")\n+    private List<RegisterDetails> participants;\n+}"
  },
  {
    "sha": "d8bb0fbb6c72dbf7fc82fde6471d01061792f06b",
    "filename": "src/main/java/com/example/demo/controller/data/CourseRequest.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/CourseRequest.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/CourseRequest.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/data/CourseRequest.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,30 @@\n+package com.example.demo.controller.data;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+\n+import java.time.LocalDate;\n+\n+\n+/**\n+ * CourseRequest\n+ */\n+@Data\n+public class CourseRequest {\n+\n+    @ApiModelProperty(notes = \"Course title\", example = \"Course Title\")\n+    private String title;\n+\n+    @ApiModelProperty(notes = \"End date of course\", example = \"2021-05-01\")\n+    private LocalDate startDate;\n+\n+    @ApiModelProperty(notes = \"End date of course\", example = \"2021-05-05\")\n+    private LocalDate endDate;\n+\n+    @ApiModelProperty(notes = \"Total capacity\", example = \"10\")\n+    private Integer capacity;\n+\n+    @ApiModelProperty(notes = \"Remaining Capacity\", example = \"10\")\n+    private Integer remaining;\n+\n+}"
  },
  {
    "sha": "afcee4b18ad503ae8659d03bb6beaeaef98efe5d",
    "filename": "src/main/java/com/example/demo/controller/data/RegisterDetails.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/RegisterDetails.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/RegisterDetails.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/data/RegisterDetails.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,18 @@\n+package com.example.demo.controller.data;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+\n+/**\n+ * RegisterDetails\n+ */\n+@Data\n+public class RegisterDetails {\n+\n+    @ApiModelProperty(notes = \"Participant Name\", example = \"David\")\n+    private String name;\n+\n+    @ApiModelProperty(notes = \"Registration Date\", example = \"2021-05-01\")\n+    private String registrationDate;\n+\n+}"
  },
  {
    "sha": "508babc07d314be9085c08278ceceb3f77c66ac2",
    "filename": "src/main/java/com/example/demo/controller/data/RegisterRequest.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/RegisterRequest.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/RegisterRequest.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/data/RegisterRequest.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,25 @@\n+package com.example.demo.controller.data;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+\n+import java.time.LocalDate;\n+\n+/**\n+ * RegisterRequest\n+ */\n+@Data\n+public class RegisterRequest {\n+\n+    @ApiModelProperty(notes = \"Course Id\", example = \"1\")\n+    private String courseId;\n+\n+    @ApiModelProperty(notes = \"Course registration date\", example = \"2021-05-01\")\n+    @JsonFormat(pattern = \"yyyy-MM-dd\")\n+    private LocalDate registrationDate;\n+\n+    @ApiModelProperty(notes = \"Person name registering for course\", example = \"10\")\n+    private String name;\n+\n+}"
  },
  {
    "sha": "fd0bea9d3230b1a675125fb39e65b44016e1833d",
    "filename": "src/main/java/com/example/demo/controller/data/UnRegisterRequest.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/UnRegisterRequest.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/controller/data/UnRegisterRequest.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/controller/data/UnRegisterRequest.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,25 @@\n+package com.example.demo.controller.data;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+\n+import java.time.LocalDate;\n+\n+/**\n+ * UnRegisterRequest\n+ */\n+@Data\n+public class UnRegisterRequest {\n+\n+    @ApiModelProperty(notes = \"Course Id\", example = \"1\")\n+    private String courseId;\n+\n+    @ApiModelProperty(notes = \"Course registration date\", example = \"2021-05-01\")\n+    @JsonFormat(pattern = \"yyyy-MM-dd\")\n+    private LocalDate cancelDate;\n+\n+    @ApiModelProperty(notes = \"Person name registering for course\", example = \"10\")\n+    private String name;\n+\n+}"
  },
  {
    "sha": "63a2f7e1bb0c8fa9f20ff378e011cec664b78756",
    "filename": "src/main/java/com/example/demo/exception/ControllerExceptionAdvice.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/ControllerExceptionAdvice.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/ControllerExceptionAdvice.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/exception/ControllerExceptionAdvice.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,26 @@\n+package com.example.demo.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+\n+@ControllerAdvice\n+public class ControllerExceptionAdvice {\n+\n+    @ExceptionHandler(value = {InvalidRequestException.class})\n+    public ResponseEntity<Object> handleException(InvalidRequestException ex) {\n+        return new ResponseEntity<Object>(ex.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @ExceptionHandler(value = {CourseDoesNotExistException.class})\n+    public ResponseEntity<Object> handleException(CourseDoesNotExistException ex) {\n+        return new ResponseEntity<Object>(ex.getMessage(), HttpStatus.NOT_FOUND);\n+    }\n+\n+    @ExceptionHandler(value = {InvalidRegistrationException.class})\n+    public ResponseEntity<Object> handleException(InvalidRegistrationException ex) {\n+        return new ResponseEntity<Object>(ex.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+}"
  },
  {
    "sha": "ca97619152074ebf30bc6d7bb66e309e1b02f830",
    "filename": "src/main/java/com/example/demo/exception/CourseDoesNotExistException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/CourseDoesNotExistException.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/CourseDoesNotExistException.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/exception/CourseDoesNotExistException.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,8 @@\n+package com.example.demo.exception;\n+\n+public class CourseDoesNotExistException extends RuntimeException {\n+\n+    public CourseDoesNotExistException(String message) {\n+        super(message);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2cf27dec7a9b4c359cc304bc329faf6c6bdbbb21",
    "filename": "src/main/java/com/example/demo/exception/InvalidRegistrationException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/InvalidRegistrationException.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/InvalidRegistrationException.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/exception/InvalidRegistrationException.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,8 @@\n+package com.example.demo.exception;\n+\n+public class InvalidRegistrationException extends RuntimeException {\n+\n+    public InvalidRegistrationException(String message) {\n+        super(message);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3b34d3a54e984b97fb6e2d7c0b4faba3e058590a",
    "filename": "src/main/java/com/example/demo/exception/InvalidRequestException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/InvalidRequestException.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/exception/InvalidRequestException.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/exception/InvalidRequestException.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,8 @@\n+package com.example.demo.exception;\n+\n+public class InvalidRequestException extends RuntimeException {\n+\n+    public InvalidRequestException(String message) {\n+        super(message);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "512640d7070be07de0986bca6393227f42278bb1",
    "filename": "src/main/java/com/example/demo/persistence/CourseEntity.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/CourseEntity.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/CourseEntity.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/CourseEntity.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,38 @@\n+package com.example.demo.persistence;\n+\n+import lombok.*;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Entity class for Course\n+ */\n+@Entity\n+@Table(name = \"TBL_COURSE\")\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@ToString\n+public class CourseEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")\n+    private String title;\n+\n+    @Column(name = \"START_DATE\")\n+    private String startDate;\n+\n+    @Column(name = \"END_DATE\")\n+    private String endDate;\n+\n+    @Column(name = \"CAPACITY\")\n+    private Integer capacity;\n+\n+    @Column(name = \"REMAINING_CAPACITY\")\n+    private Integer remainingCapacity;\n+\n+}"
  },
  {
    "sha": "ac731c1a33685bbadbdd384cadabac7c2579847a",
    "filename": "src/main/java/com/example/demo/persistence/CourseRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/CourseRepository.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/CourseRepository.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/CourseRepository.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,14 @@\n+package com.example.demo.persistence;\n+\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+\n+@Repository\n+public interface CourseRepository extends CrudRepository<CourseEntity, Long> {\n+\n+    @Query(value = \"select * from TBL_COURSE where title= ?1\", nativeQuery = true)\n+    List<CourseEntity> findByTitle(String title);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "09e2317cb519113490b960c28363d83a34886fad",
    "filename": "src/main/java/com/example/demo/persistence/EmployeeController.java",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/cunla/interview-question/blob/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeController.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeController.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/EmployeeController.java?ref=5fbb5d77c7df38a3b9908a360f52b6a18297db1d",
    "patch": "@@ -1,52 +0,0 @@\n-package com.example.demo.persistence;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.bind.annotation.DeleteMapping;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-import java.util.List;\n-\n-\n-@RestController\n-@RequestMapping(\"/employees\")\n-public class EmployeeController {\n-    @Autowired\n-    EmployeeService service;\n-\n-    @GetMapping\n-    public ResponseEntity<List<EmployeeEntity>> getAllEmployees() {\n-        List<EmployeeEntity> list = service.getAllEmployees();\n-\n-        return new ResponseEntity<List<EmployeeEntity>>(list, new HttpHeaders(), HttpStatus.OK);\n-    }\n-\n-    @GetMapping(\"/{id}\")\n-    public ResponseEntity<EmployeeEntity> getEmployeeById(@PathVariable(\"id\") Long id)\n-            throws RecordNotFoundException {\n-        EmployeeEntity entity = service.getEmployeeById(id);\n-\n-        return new ResponseEntity<EmployeeEntity>(entity, new HttpHeaders(), HttpStatus.OK);\n-    }\n-\n-    @PostMapping\n-    public ResponseEntity<EmployeeEntity> createOrUpdateEmployee(EmployeeEntity employee)\n-            throws RecordNotFoundException {\n-        EmployeeEntity updated = service.createOrUpdateEmployee(employee);\n-        return new ResponseEntity<EmployeeEntity>(updated, new HttpHeaders(), HttpStatus.OK);\n-    }\n-\n-    @DeleteMapping(\"/{id}\")\n-    public HttpStatus deleteEmployeeById(@PathVariable(\"id\") Long id)\n-            throws RecordNotFoundException {\n-        service.deleteEmployeeById(id);\n-        return HttpStatus.FORBIDDEN;\n-    }\n-\n-}"
  },
  {
    "sha": "1e51917b36c80d4b8b42e8062ef27869c0db6ae3",
    "filename": "src/main/java/com/example/demo/persistence/EmployeeEntity.java",
    "status": "removed",
    "additions": 0,
    "deletions": 36,
    "changes": 36,
    "blob_url": "https://github.com/cunla/interview-question/blob/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeEntity.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeEntity.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/EmployeeEntity.java?ref=5fbb5d77c7df38a3b9908a360f52b6a18297db1d",
    "patch": "@@ -1,36 +0,0 @@\n-package com.example.demo.persistence;\n-\n-import lombok.Data;\n-\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-\n-@Data\n-@Entity\n-@Table(name=\"TBL_EMPLOYEES\")\n-public class EmployeeEntity {\n- \n-    @Id\n-    @GeneratedValue\n-    private Long id;\n-     \n-    @Column(name=\"first_name\")\n-    private String firstName;\n-     \n-    @Column(name=\"last_name\")\n-    private String lastName;\n-     \n-    @Column(name=\"email\", nullable=false, length=200)\n-    private String email;\n-     \n-    //Setters and getters\n- \n-    @Override\n-    public String toString() {\n-        return \"EmployeeEntity [id=\" + id + \", firstName=\" + firstName + \n-                \", lastName=\" + lastName + \", email=\" + email   + \"]\";\n-    }\n-}"
  },
  {
    "sha": "f958aa34c3d45db9274de72ad0e4662c1c99f529",
    "filename": "src/main/java/com/example/demo/persistence/EmployeeRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 11,
    "changes": 11,
    "blob_url": "https://github.com/cunla/interview-question/blob/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeRepository.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeRepository.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/EmployeeRepository.java?ref=5fbb5d77c7df38a3b9908a360f52b6a18297db1d",
    "patch": "@@ -1,11 +0,0 @@\n-package com.example.demo.persistence;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n-import org.springframework.stereotype.Repository;\n-\n- \n-@Repository\n-public interface EmployeeRepository \n-        extends JpaRepository<EmployeeEntity, Long> {\n- \n-}"
  },
  {
    "sha": "28ca811dbf2fa50e10efb1d2a6b137de32c20fb2",
    "filename": "src/main/java/com/example/demo/persistence/EmployeeService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 70,
    "changes": 70,
    "blob_url": "https://github.com/cunla/interview-question/blob/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeService.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/EmployeeService.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/EmployeeService.java?ref=5fbb5d77c7df38a3b9908a360f52b6a18297db1d",
    "patch": "@@ -1,70 +0,0 @@\n-package com.example.demo.persistence;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n- \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class EmployeeService {\n-     \n-    @Autowired\n-    EmployeeRepository repository;\n-     \n-    public List<EmployeeEntity> getAllEmployees()\n-    {\n-        List<EmployeeEntity> employeeList = repository.findAll();\n-         \n-        if(employeeList.size() > 0) {\n-            return employeeList;\n-        } else {\n-            return new ArrayList<EmployeeEntity>();\n-        }\n-    }\n-     \n-    public EmployeeEntity getEmployeeById(Long id) throws RecordNotFoundException \n-    {\n-        Optional<EmployeeEntity> employee = repository.findById(id);\n-         \n-        if(employee.isPresent()) {\n-            return employee.get();\n-        } else {\n-            throw new RecordNotFoundException(\"No employee record exist for given id\");\n-        }\n-    }\n-     \n-    public EmployeeEntity createOrUpdateEmployee(EmployeeEntity entity) throws RecordNotFoundException \n-    {\n-        Optional<EmployeeEntity> employee = repository.findById(entity.getId());\n-         \n-        if(employee.isPresent()) \n-        {\n-            EmployeeEntity newEntity = employee.get();\n-            newEntity.setEmail(entity.getEmail());\n-            newEntity.setFirstName(entity.getFirstName());\n-            newEntity.setLastName(entity.getLastName());\n- \n-            newEntity = repository.save(newEntity);\n-             \n-            return newEntity;\n-        } else {\n-            entity = repository.save(entity);\n-             \n-            return entity;\n-        }\n-    } \n-     \n-    public void deleteEmployeeById(Long id) throws RecordNotFoundException \n-    {\n-        Optional<EmployeeEntity> employee = repository.findById(id);\n-         \n-        if(employee.isPresent()) \n-        {\n-            repository.deleteById(id);\n-        } else {\n-            throw new RecordNotFoundException(\"No employee record exist for given id\");\n-        }\n-    } \n-}"
  },
  {
    "sha": "27c7de9eb0fdd92e2c39f2f4fc33ca87352b50dc",
    "filename": "src/main/java/com/example/demo/persistence/RecordNotFoundException.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/cunla/interview-question/blob/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/RecordNotFoundException.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/5fbb5d77c7df38a3b9908a360f52b6a18297db1d/src/main/java/com/example/demo/persistence/RecordNotFoundException.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/RecordNotFoundException.java?ref=5fbb5d77c7df38a3b9908a360f52b6a18297db1d",
    "patch": "@@ -1,7 +0,0 @@\n-package com.example.demo.persistence;\n-\n-public class RecordNotFoundException extends Exception {\n-    public RecordNotFoundException(String msg) {\n-        super(msg);\n-    }\n-}"
  },
  {
    "sha": "bd4665c604b2fadb6462126b5c7a20de8b98e68c",
    "filename": "src/main/java/com/example/demo/persistence/RegisterEntity.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/RegisterEntity.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/RegisterEntity.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/RegisterEntity.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,32 @@\n+package com.example.demo.persistence;\n+\n+import lombok.*;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Entity class for Course\n+ */\n+@Entity\n+@Table(name = \"TBL_REGISTRATION\")\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@ToString\n+public class RegisterEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    @Column(name = \"COURSE_ID\")\n+    private Long courseId;\n+\n+    @Column(name = \"REGISTRATION_DATE\")\n+    private String registrationDate;\n+\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+}"
  },
  {
    "sha": "01339a88aaa9548f85a24d2db070c9fd065e5a8c",
    "filename": "src/main/java/com/example/demo/persistence/RegisterRepository.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/RegisterRepository.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/persistence/RegisterRepository.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/persistence/RegisterRepository.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,17 @@\n+package com.example.demo.persistence;\n+\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+\n+@Repository\n+public interface RegisterRepository extends CrudRepository<RegisterEntity, Long> {\n+\n+    @Query(value = \"select * from TBL_REGISTRATION where COURSE_ID= ?1\", nativeQuery = true)\n+    List<RegisterEntity> findByCourseId(long id);\n+\n+    @Query(value = \"select * from TBL_REGISTRATION where COURSE_ID= ?1 AND NAME= ?2\", nativeQuery = true)\n+    RegisterEntity findByName(String courseId, String name);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3716b1b349b71cf0492206e24e15145be651494f",
    "filename": "src/main/java/com/example/demo/service/CourseService.java",
    "status": "added",
    "additions": 184,
    "deletions": 0,
    "changes": 184,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/service/CourseService.java",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/java/com/example/demo/service/CourseService.java",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/java/com/example/demo/service/CourseService.java?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -0,0 +1,184 @@\n+package com.example.demo.service;\n+\n+import com.example.demo.controller.data.*;\n+import com.example.demo.exception.CourseDoesNotExistException;\n+import com.example.demo.exception.InvalidRegistrationException;\n+import com.example.demo.exception.InvalidRequestException;\n+import com.example.demo.persistence.CourseEntity;\n+import com.example.demo.persistence.CourseRepository;\n+import com.example.demo.persistence.RegisterEntity;\n+import com.example.demo.persistence.RegisterRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class CourseService {\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private RegisterRepository registerRepository;\n+\n+    public CourseDetails createCourse(CourseRequest courseRequest) {\n+        CourseEntity courseEntity = populateCourse(courseRequest);\n+\n+        CourseDetails courseDetails = new CourseDetails();\n+        courseDetails.setId(String.valueOf(courseEntity.getId()));\n+        courseDetails.setTitle(courseEntity.getTitle());\n+        courseDetails.setStartDate(courseEntity.getStartDate());\n+        courseDetails.setEndDate(String.valueOf(courseEntity.getEndDate()));\n+        courseDetails.setCapacity(courseEntity.getCapacity());\n+        courseDetails.setRemaining(courseEntity.getRemainingCapacity());\n+\n+        return courseDetails;\n+    }\n+\n+    private CourseEntity populateCourse(CourseRequest courseRequest) {\n+        CourseEntity entity = new CourseEntity();\n+        try {\n+\n+            entity.setTitle(courseRequest.getTitle());\n+            entity.setStartDate(String.valueOf(courseRequest.getStartDate()));\n+            entity.setEndDate(String.valueOf(courseRequest.getEndDate()));\n+            entity.setCapacity(courseRequest.getCapacity());\n+            entity.setRemainingCapacity(courseRequest.getRemaining());\n+            courseRepository.save(entity);\n+        } catch (Exception e) {\n+            throw new InvalidRequestException(\"Course cannot be created\");\n+        }\n+        return entity;\n+    }\n+\n+    public List<CourseParticipantDetails> searchCourseByTitle(String title) {\n+\n+        List<CourseEntity> coursesById = courseRepository.findByTitle(title);\n+        List<CourseParticipantDetails> courseParticipantList = new ArrayList<>();\n+\n+        coursesById.forEach(course -> populateCourseRegistrationDetails(courseParticipantList, course, null));\n+        return courseParticipantList;\n+    }\n+\n+\n+    public List<CourseParticipantDetails> searchCourseById(long id) {\n+        Optional<CourseEntity> coursesById = courseRepository.findById(id);\n+        List<CourseParticipantDetails> courseParticipantList = new ArrayList<>();\n+\n+        if (coursesById.isPresent()) {\n+            populateCourseRegistrationDetails(courseParticipantList, coursesById.get(), null);\n+        }\n+        return courseParticipantList;\n+    }\n+\n+\n+    public List<CourseParticipantDetails> register(long id, RegisterRequest registerRequest) throws ParseException {\n+\n+        RegisterEntity registerByIdName = registerRepository.findByName(registerRequest.getCourseId(), registerRequest.getName());\n+        Optional<CourseEntity> coursesById = courseRepository.findById(Long.valueOf(registerRequest.getCourseId()));\n+\n+        if (!coursesById.isPresent()) {\n+            throw new CourseDoesNotExistException(\"Course does not exist\");\n+        } else if (registerByIdName != null && registerByIdName.getName().equals(registerRequest.getName())) {\n+            throw new InvalidRegistrationException(\"Participant Already registered to Course\");\n+        } else if (!(coursesById.get().getRemainingCapacity() > 0)) {\n+            throw new InvalidRegistrationException(\"Course is full\");\n+        } else {\n+            dateValidation(coursesById, registerRequest.getRegistrationDate(), \"Registration date  is 3 or more days before or after course start date\");\n+            RegisterEntity registerEntity = new RegisterEntity();\n+            registerEntity.setCourseId(Long.valueOf(registerRequest.getCourseId()));\n+            registerEntity.setRegistrationDate(String.valueOf(registerRequest.getRegistrationDate()));\n+            registerEntity.setName(registerRequest.getName());\n+            registerRepository.save(registerEntity);\n+            coursesById.get().setRemainingCapacity(coursesById.get().getRemainingCapacity() - 1);\n+            courseRepository.save(coursesById.get());\n+        }\n+\n+        List<CourseParticipantDetails> courseParticipantList = new ArrayList<>();\n+        coursesById.ifPresent(courseEntity -> populateCourseRegistrationDetails(courseParticipantList, courseEntity, null));\n+        return courseParticipantList;\n+\n+    }\n+\n+\n+    public List<CourseParticipantDetails> unregister(long id, UnRegisterRequest unRegisterRequest) throws ParseException {\n+\n+        RegisterEntity unRegisterByIdName = registerRepository.findByName(unRegisterRequest.getCourseId(), unRegisterRequest.getName());\n+        Optional<CourseEntity> coursesById = courseRepository.findById(Long.valueOf(unRegisterRequest.getCourseId()));\n+\n+        if (!coursesById.isPresent()) {\n+            throw new CourseDoesNotExistException(\"Course does not exist\");\n+        } else if (unRegisterByIdName == null) {\n+            throw new CourseDoesNotExistException(\"User not registered for this course\");\n+        } else {\n+            dateValidation(coursesById, unRegisterRequest.getCancelDate(), \"Cancellation date is 3 or more days before or after course start date\");\n+            RegisterEntity registerEntity = new RegisterEntity();\n+            registerEntity.setCourseId(Long.valueOf(unRegisterRequest.getCourseId()));\n+            registerEntity.setRegistrationDate(String.valueOf(unRegisterRequest.getCancelDate()));\n+            registerEntity.setName(unRegisterByIdName.getName());\n+            registerRepository.delete(unRegisterByIdName);\n+            coursesById.get().setRemainingCapacity(coursesById.get().getRemainingCapacity() + 1);\n+            courseRepository.save(coursesById.get());\n+        }\n+\n+        List<CourseParticipantDetails> courseParticipantList = new ArrayList<>();\n+        coursesById.ifPresent(courseEntity -> populateCourseRegistrationDetails(courseParticipantList, courseEntity, unRegisterRequest.getName()));\n+        return courseParticipantList;\n+    }\n+\n+    private void dateValidation(Optional<CourseEntity> coursesById, LocalDate date, String s) throws ParseException {\n+        SimpleDateFormat myFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        Date dateBefore = myFormat.parse(coursesById.get().getStartDate());\n+        Date dateAfter = myFormat.parse(String.valueOf(date));\n+\n+        long difference = dateAfter.getTime() - dateBefore.getTime();\n+        float daysBetween = (difference / (1000 * 60 * 60 * 24));\n+        int round = Math.round(daysBetween);\n+        if (round == 3 || round == -3) {\n+            throw new InvalidRegistrationException(s);\n+        }\n+    }\n+\n+    private void populateCourseRegistrationDetails(List<CourseParticipantDetails> courseParticipantList, CourseEntity course, String name) {\n+        CourseParticipantDetails courseParticipantDetails = new CourseParticipantDetails();\n+        courseParticipantDetails.setId(String.valueOf(course.getId()));\n+        courseParticipantDetails.setTitle(course.getTitle());\n+        courseParticipantDetails.setStartDate(course.getStartDate());\n+        courseParticipantDetails.setEndDate(course.getEndDate());\n+        courseParticipantDetails.setCapacity(course.getCapacity());\n+        courseParticipantDetails.setRemaining(course.getRemainingCapacity());\n+\n+        List<RegisterDetails> registerDetailList = new ArrayList<>();\n+        List<RegisterEntity> registerEntityList = registerRepository.findByCourseId(course.getId());\n+        if (name != null) {\n+\n+            boolean noneMatch = registerEntityList.stream().noneMatch(p1 -> name.equals(p1.getName()));\n+            if (noneMatch) {\n+                registerEntityList.forEach(registerEntity -> {\n+                    populateParticipants(registerDetailList, registerEntity);\n+                    courseParticipantDetails.setParticipants(registerDetailList);\n+                });\n+            }\n+        } else {\n+            registerEntityList.forEach(registerEntity -> {\n+                populateParticipants(registerDetailList, registerEntity);\n+                courseParticipantDetails.setParticipants(registerDetailList);\n+            });\n+        }\n+        courseParticipantList.add(courseParticipantDetails);\n+    }\n+\n+    private void populateParticipants(List<RegisterDetails> registerDetailList, RegisterEntity registerEntity) {\n+        RegisterDetails registerDetails = new RegisterDetails();\n+        registerDetails.setName(registerEntity.getName());\n+        registerDetails.setRegistrationDate(registerEntity.getRegistrationDate());\n+        registerDetailList.add(registerDetails);\n+    }\n+}"
  },
  {
    "sha": "c19d6775b3e17319c51b291aa667b5f523be9316",
    "filename": "src/main/resources/application.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/cunla/interview-question/blob/396f0b2709c359571243adcab47a731a0e49314e/src/main/resources/application.yml",
    "raw_url": "https://github.com/cunla/interview-question/raw/396f0b2709c359571243adcab47a731a0e49314e/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/cunla/interview-question/contents/src/main/resources/application.yml?ref=396f0b2709c359571243adcab47a731a0e49314e",
    "patch": "@@ -4,10 +4,9 @@ server:\n spring:\n   datasource:\n     url: jdbc:h2:mem:testdb\n-#    url: jdbc:h2:file:./demo\n     driverClassName: org.h2.Driver\n     username: sa\n-    password: password\n+    password:\n   jpa:\n     database-platform: org.hibernate.dialect.H2Dialect\n     show-sql: true\n@@ -16,5 +15,4 @@ spring:\n       ddl-auto: update\n   h2:\n     console:\n-      enabled: false\n-\n+      enabled: true\n\\ No newline at end of file"
  }
]
