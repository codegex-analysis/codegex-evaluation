[
  {
    "sha": "48cc29dc883262f8627095fffbbefe369f9f57ba",
    "filename": "app/src/main/java/net/zetetic/tests/TestSuiteRunner.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/sqlcipher/sqlcipher-android-tests/blob/8917eb80a4e8f15a85859259074fa9788572944a/app/src/main/java/net/zetetic/tests/TestSuiteRunner.java",
    "raw_url": "https://github.com/sqlcipher/sqlcipher-android-tests/raw/8917eb80a4e8f15a85859259074fa9788572944a/app/src/main/java/net/zetetic/tests/TestSuiteRunner.java",
    "contents_url": "https://api.github.com/repos/sqlcipher/sqlcipher-android-tests/contents/app/src/main/java/net/zetetic/tests/TestSuiteRunner.java?ref=8917eb80a4e8f15a85859259074fa9788572944a",
    "patch": "@@ -10,6 +10,8 @@\n import net.sqlcipher.CursorWindowAllocation;\n import net.sqlcipher.database.SQLiteDatabase;\n import net.zetetic.ZeteticApplication;\n+import net.zetetic.tests.support.TransactionNestedWithListenerTest;\n+import net.zetetic.tests.support.TransactionNestedWithListenerTest2;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -72,6 +74,11 @@ private void runSuite() {\n \n     tests.add(new SummingStepTest());\n \n+    tests.add(new TransactionNonExclusiveTest());\n+    tests.add(new TransactionWithListenerTest());\n+    tests.add(new TransactionNestedWithListenerTest());\n+    tests.add(new TransactionNestedWithListenerTest2());\n+\n     tests.add(new JsonCastTest());\n     tests.add(new SimpleQueryTest());\n     tests.add(new DefaultCursorWindowAllocationTest());\n@@ -105,8 +112,6 @@ private void runSuite() {\n     tests.add(new WriteAheadLoggingWithTransactionTest());\n     tests.add(new WriteAheadLoggingWithInMemoryDatabaseTest());\n     tests.add(new WriteAheadLoggingWithAttachedDatabaseTest());\n-    tests.add(new TransactionNonExclusiveTest());\n-    tests.add(new TransactionWithListenerTest());\n     tests.add(new LargeDatabaseCursorAccessTest());\n \n ////    tests.add(new TimeLargeByteArrayQueryTest());"
  },
  {
    "sha": "47fdabebf88e216dc61fa78d62b03954da846fc0",
    "filename": "app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/sqlcipher/sqlcipher-android-tests/blob/8917eb80a4e8f15a85859259074fa9788572944a/app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest.java",
    "raw_url": "https://github.com/sqlcipher/sqlcipher-android-tests/raw/8917eb80a4e8f15a85859259074fa9788572944a/app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest.java",
    "contents_url": "https://api.github.com/repos/sqlcipher/sqlcipher-android-tests/contents/app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest.java?ref=8917eb80a4e8f15a85859259074fa9788572944a",
    "patch": "@@ -0,0 +1,77 @@\n+package net.zetetic.tests.support;\n+\n+import android.util.Log;\n+\n+import net.sqlcipher.database.SQLiteDatabase;\n+import net.sqlcipher.database.SQLiteTransactionListener;\n+import net.zetetic.tests.SQLCipherTest;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class TransactionNestedWithListenerTest extends SQLCipherTest {\n+\n+    private static final String TAG = TransactionNestedWithListenerTest.class.getSimpleName();\n+\n+    @Override\n+    public boolean execute(SQLiteDatabase database) {\n+        CustomTransactionListener outer = new CustomTransactionListener();\n+        CustomTransactionListener inner = new CustomTransactionListener();\n+\n+        database.beginTransactionWithListener(outer);\n+        database.execSQL(\"create table t1(a,b);\");\n+\n+        //Nested start\n+        database.beginTransactionWithListener(inner);\n+        database.execSQL(\"create table t2(a,b);\");\n+        database.setTransactionSuccessful();\n+        database.endTransaction();\n+        //Nested end\n+\n+        database.setTransactionSuccessful();\n+        database.endTransaction();\n+\n+        if (!outer.isComplete() || !inner.isComplete()) {\n+            Log.e(TAG, \"Outer listener started times - \" + outer.startCalled.get()\n+                    + \", ended times - \" + outer.endCalled.get()\n+            );\n+            Log.e(TAG, \"Inner listener  started times - \" + inner.startCalled.get()\n+                    + \", ended times - \" + inner.endCalled.get()\n+            );\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Nested transactions with listener\";\n+    }\n+\n+    private static class CustomTransactionListener implements SQLiteTransactionListener {\n+\n+        private final AtomicInteger startCalled = new AtomicInteger();\n+        private final AtomicInteger endCalled = new AtomicInteger();\n+\n+        @Override\n+        public void onBegin() {\n+            startCalled.incrementAndGet();\n+        }\n+\n+        @Override\n+        public void onCommit() {\n+            endCalled.incrementAndGet();\n+        }\n+\n+        @Override\n+        public void onRollback() {\n+            endCalled.incrementAndGet();\n+        }\n+\n+        boolean isComplete() {\n+            return (startCalled.get() == endCalled.get()) && startCalled.get() == 1;\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "7dd5998a53a378a1e6aa96e60607c0fe7261c58d",
    "filename": "app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest2.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/sqlcipher/sqlcipher-android-tests/blob/8917eb80a4e8f15a85859259074fa9788572944a/app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest2.java",
    "raw_url": "https://github.com/sqlcipher/sqlcipher-android-tests/raw/8917eb80a4e8f15a85859259074fa9788572944a/app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest2.java",
    "contents_url": "https://api.github.com/repos/sqlcipher/sqlcipher-android-tests/contents/app/src/main/java/net/zetetic/tests/support/TransactionNestedWithListenerTest2.java?ref=8917eb80a4e8f15a85859259074fa9788572944a",
    "patch": "@@ -0,0 +1,73 @@\n+package net.zetetic.tests.support;\n+\n+import android.util.Log;\n+\n+import net.sqlcipher.database.SQLiteDatabase;\n+import net.sqlcipher.database.SQLiteTransactionListener;\n+import net.zetetic.tests.SQLCipherTest;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class TransactionNestedWithListenerTest2 extends SQLCipherTest {\n+\n+    private static final String TAG = TransactionNestedWithListenerTest2.class.getSimpleName();\n+\n+    @Override\n+    public boolean execute(SQLiteDatabase database) {\n+        CustomTransactionListener listener = new CustomTransactionListener();\n+\n+        database.beginTransactionWithListener(listener);\n+        database.execSQL(\"create table t11(a,b);\");\n+\n+        //Nested start\n+        database.beginTransactionWithListener(listener);\n+        database.execSQL(\"create table t22(a,b);\");\n+        database.setTransactionSuccessful();\n+        database.endTransaction();\n+        //Nested end\n+\n+        database.setTransactionSuccessful();\n+        database.endTransaction();\n+\n+        if (!listener.isComplete()) {\n+            Log.e(TAG, \"Listener didn't receive end, started times - \"\n+                    + listener.startCalled.get() + \", ended times - \" + listener.endCalled.get()\n+            );\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Nested transactions with listener 2\";\n+    }\n+\n+    private static class CustomTransactionListener implements SQLiteTransactionListener {\n+\n+        private final AtomicInteger startCalled = new AtomicInteger();\n+        private final AtomicInteger endCalled = new AtomicInteger();\n+\n+        @Override\n+        public void onBegin() {\n+            startCalled.incrementAndGet();\n+        }\n+\n+        @Override\n+        public void onCommit() {\n+            endCalled.incrementAndGet();\n+        }\n+\n+        @Override\n+        public void onRollback() {\n+            endCalled.incrementAndGet();\n+        }\n+\n+        boolean isComplete() {\n+            return (startCalled.get() == endCalled.get());\n+        }\n+\n+    }\n+\n+}"
  }
]
