[
  {
    "sha": "0b2b0971deec32df131f673caadfcc9d1020b89f",
    "filename": "bin/IntSet.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/IntSet.class",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/IntSet.class",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/bin/IntSet.class?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d"
  },
  {
    "sha": "f509a8f46d3b0e730f104fdefc8d4500c84c937a",
    "filename": "bin/IntSetDriver.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/IntSetDriver.class",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/IntSetDriver.class",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/bin/IntSetDriver.class?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d"
  },
  {
    "sha": "11c802d667f06ee38e931c87aa8980b753a27ccc",
    "filename": "bin/Poly.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/Poly.class",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/Poly.class",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/bin/Poly.class?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d"
  },
  {
    "sha": "636b60da49e9db58680af15485457210e938a811",
    "filename": "bin/PolyDriver.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/PolyDriver.class",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/bin/PolyDriver.class",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/bin/PolyDriver.class?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d"
  },
  {
    "sha": "3c7d704a66b7ce895ea5b94d364360946d48a898",
    "filename": "src/IntSet.java",
    "status": "added",
    "additions": 201,
    "deletions": 0,
    "changes": 201,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/IntSet.java",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/IntSet.java",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/src/IntSet.java?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d",
    "patch": "@@ -0,0 +1,201 @@\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+/*\n+\tImplement the immutable class intSet using an array to represent a set of integers in the range 1-1000.\n+\tIt should support public methods like - \n+\t\n+\tisMember(int x) - check whether x is a member of the set and return a boolean value\n+\t\n+\tsize() - return the size of the set\n+\t\n+\tisSubSet(intSet s) - check whether s is a subset of the set\n+\t\n+\tgetComplement()  - return the complement set, you can assume that 1..1000 is the universal set\n+\t\n+\tunion(intSet s1, intSet s2) - return the union of s1 and s2\n+\t\n+\tYou may use private helper methods. \n+*/\n+\n+public final class IntSet \n+{\n+\tprivate final int set[];\n+\tint  range=1000; //setting range for universal set;\n+\tprivate ArrayList <Integer> universal_set=new ArrayList<Integer>();\n+\tpublic static void main(String[] args)\n+\t{\n+\t\tgetHelp();\n+\t}\n+\t\n+\t\n+\tpublic static void getHelp()\n+\t{\n+\t\tSystem.out.println(\"IntSet Operation Avaliable\");\n+\t\tSystem.out.println(\"1. IntSet s = s.isMember(int x) - check whether x is a member of the set and return a boolean value\");\n+\t\tSystem.out.println(\"2. IntSet s = s.size() - return the size of the set\");\n+\t\tSystem.out.println(\"3. IntSet s = s.isSubSet(intSet s2) - check whether s is a subset of the set\");\n+\t\tSystem.out.println(\"4. IntSet s = s.getComplement()  - return the complement set, 1..1000 is the universal set\");\n+\t\tSystem.out.println(\"5. IntSet.union(intSet s1, intSet s2) - (Static method), return the union of s1 and s2\");\n+\t\tSystem.out.println(\"6. IntSet.printSet(IntSet s) - print the set\");\n+\t\tSystem.out.println(\"7. IntSet.setUniversalSet(int range) - set the range for universal set 1-range\");\n+\t}\n+\t\n+\t\n+\tIntSet(int[] arr)\n+\t{\n+\t\tif(validateInput(arr)==true)\n+\t\t{\n+\t\t\tthis.set=arr;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tSystem.out.println(\"Invalid value for a set\\n-> Duplicate item maybe present\\n\\tor\\n-> Element out of Universal set are present\\n   Universal set(1-1000)\");\n+\t\t\tthis.set=null;\n+\t\t\tSystem.exit(-1);\n+\t\t}\n+\t}\n+\t\n+\tprivate boolean validateInput(int[] arr)\n+\t{\n+\t\tif(arr.length>range)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor(int value:arr)\n+\t\t{\n+\t\t\tif(value>range||value<1)\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tfor(int loop_var=0;loop_var<arr.length;loop_var++)\n+\t\t{\n+\t\t\tfor(int inner_loop_var=loop_var+1;inner_loop_var<arr.length;inner_loop_var++)\n+\t\t\t{\n+\t\t\t\tif(arr[inner_loop_var]==arr[loop_var])\n+\t\t\t\t{\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\tpublic boolean isMember(int x)\n+\t{\n+\t\tfor(int value:set)\n+\t\t{\n+\t\t\tif(value==x)\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\tpublic static void printSet(IntSet s)\n+\t{\n+\t\tfor(int value:s.set)\n+\t\t{\n+\t\t\tSystem.out.print(value+\", \");\n+\t\t}\n+\t}\n+\n+\tpublic int size()\n+\t{\n+\t\treturn set.length;\n+\t}\n+\t\n+\tpublic boolean isSubSet(IntSet s)\n+\t{\n+\t\tint set_length=this.set.length;\n+\t\tint subset_length=s.set.length;\n+\t\tif(subset_length>set_length)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tfor(int loop_var=0;loop_var<subset_length;loop_var++)\n+\t\t\t{\n+\t\t\t\tboolean flag=false;\n+\t\t\t\tint to_search=s.set[loop_var];\n+\t\t\t\tfor(int inner_loop_var=0;inner_loop_var<set_length;inner_loop_var++)\n+\t\t\t\t{\n+\t\t\t\t\tif(to_search==this.set[inner_loop_var]) //Invert this\n+\t\t\t\t\t{\n+\t\t\t\t\t\tflag=true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif(flag==false)\n+\t\t\t\t{\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\t\t\t\t\t\t\t// Till here\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\tpublic void setUniversalSet(int range)\n+\t{\n+\t\tthis.range=range;\n+\t\tfor(int loop_var=1;loop_var<=range;loop_var++)\n+\t\t{\n+\t\t\tuniversal_set.add(loop_var);\n+\t\t}\n+\t}\n+\tpublic IntSet getComplement()\n+\t{\n+\t\tsetUniversalSet(range);\n+\t\tfor(int loop_var=0;loop_var<set.length;loop_var++)\n+\t\t{\n+\t\t\tif(universal_set.contains(set[loop_var]))\n+\t\t\t{\n+\t\t\t\tuniversal_set.remove(universal_set.indexOf(set[loop_var]));\n+\t\t\t}\n+\t\t}\n+\t\treturn new IntSet(toArray(universal_set));\n+\t}\n+\n+\tpublic static IntSet union(IntSet s1, IntSet s2)\n+\t{\n+\t\tArrayList <Integer> result=new ArrayList<Integer>();\n+\t\tresult=merge(s1.set,result);\n+\t\tresult=merge(s2.set,result);\n+\t\treturn new IntSet(toArray(result));\n+\t}\n+\tprivate static ArrayList<Integer> merge(int to_merge[],ArrayList<Integer> merge_into)\n+\t{\n+\t\tint set_length=to_merge.length;\n+\t\tfor(int loop_var=0;loop_var<set_length;loop_var++)\n+\t\t{\n+\t\t\tboolean flag=false;\n+\t\t\tint to_search=to_merge[loop_var];\n+\t\t\tfor(int value:merge_into)\n+\t\t\t{\n+\t\t\t\tif(value==to_search)\n+\t\t\t\t{\n+\t\t\t\t\tflag=true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(flag==false)\n+\t\t\t{\n+\t\t\t\tmerge_into.add(to_search);\n+\t\t\t}\n+\t\t}\n+\t\treturn merge_into;\n+\t}\n+\tprivate static int[] toArray(ArrayList<Integer> input)\n+\t{\n+\t\tCollections.sort(input);\n+\t\tint temp=0;\n+\t\tint arr[]=new int[input.size()];\n+\t\tfor(int value:input)\n+\t\t{\n+\t\t\tarr[temp++]=value;\n+\t\t}\n+\t\treturn arr;\n+\t}\n+\n+}"
  },
  {
    "sha": "ace2c9fc0657a000ad9b711ddaef5a0448d6d8a4",
    "filename": "src/IntSetDriver.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/IntSetDriver.java",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/IntSetDriver.java",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/src/IntSetDriver.java?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d",
    "patch": "@@ -0,0 +1,17 @@\n+\n+public class IntSetDriver {\n+\n+\tpublic static void main(String[] args)\n+\t{\n+\t\tint arr1[]=new int[]{1,2,5,6,7,8,9,4};\n+\t\tint arr2[]=new int[]{5,6,7,8,9,15};\n+\t\tIntSet s1=new IntSet(arr1);\n+\t\tIntSet s2=new IntSet(arr2);\n+\t\tint value=6;\n+\t\tSystem.out.println(value+\" is member of A =\"+s1.isMember(value));//Working\n+\t\tSystem.out.println(\"A is subset of B =\"+s1.isSubSet(s2));//Working\n+\t\tSystem.out.println(\"Size of A = \"+s1.size());// Working\n+\t\tSystem.out.println(\"Compliment of A = \");IntSet.printSet(s1.getComplement()); //Working\n+\t\tSystem.out.print(\"\\nUnion of A and B = \");IntSet.printSet(IntSet.union(s1,s2)); //Working\n+\t}\n+}"
  },
  {
    "sha": "d598226e69939857298ca13fcd7a5a1a35afeb99",
    "filename": "src/Poly.java",
    "status": "added",
    "additions": 254,
    "deletions": 0,
    "changes": 254,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/Poly.java",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/Poly.java",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/src/Poly.java?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d",
    "patch": "@@ -0,0 +1,254 @@\n+/*\n+\tImplement the immutable class Poly using an array to represent single variable polynomial.\n+\tNote that you should be storing only those terms of polynomial that have non zero coefficient.\n+\tYou can assume that the coefficients are integers\n+\tIt should support methods like - \n+\t1- evaluate(float) - return the value of the polynomial for the given value of the variable\n+\t2- degree() - return the degree of the polynomial\n+\t3- addPoly(Poly p1, Poly p2) - return the sum of the polynomials p1 and p2\n+\t4- multiplyPoly(Poly p1, Poly p2) - return the product of polynomials p1 and p2\n+\t\n+\tYou may use private helper methods. addPoly() and multiplyPoly()\n+\tcan make assumptions about size of the resulting polynomial to decide about the size of the array to be created.\n+ */\n+\n+/**\n+ * @author sandeep.sisodia_meta\n+ * // Commenting in draft\n+ */\n+public class Poly\n+{\n+\tfinal int equation[][];\n+\t\n+\tpublic static void main(String[] args)\n+\t{\n+\t\tgetHelp();\n+\t}\n+\t\n+\t/**\n+\t * @param equation\n+\t */\n+\tpublic Poly(int[][] equation)\n+\t{\n+\t\tif(!validateInput(equation))\n+\t\t{\n+\t\t\tSystem.out.println(\"Invalid Input : Should not contain 0\");\n+\t\t\tthis.equation=null;\n+\t\t\tSystem.exit(-1);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tthis.equation=equation;\n+\t\t}\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param equation\n+\t */\n+\tpublic void printPoly(int[][] equation)\n+\t{\n+\t\tfor(int loop_var=0;loop_var<equation.length;loop_var++)\n+\t\t{\n+\t\t\tSystem.out.print((loop_var==0?\"\":getSymbol(equation[loop_var][0]))+Math.abs(equation[loop_var][0])+\"x\"+getSuperEquivalent(equation[loop_var][1]));\n+\t\t}\n+\t}\n+\t\n+\t\n+\t/**\n+\t * \n+\t */\n+\tpublic static void getHelp()\n+\t{\n+\t\tSystem.out.println(\"Polynomial Operation Avaliable\");\n+\t\tSystem.out.println(\"Poly obj.evaluate(float)\");\n+\t\tSystem.out.println(\"Poly obj.degree()\");\n+\t\tSystem.out.println(\"Poly.addPoly(Poly p1, Poly p2)  --static method\");\n+\t\tSystem.out.println(\"Poly.multiplyPoly(Poly p1, Poly p2) --static method\");\n+\t\tSystem.out.println(\"Poly obj.printPoly(int[][] equation)\\n\\n\\n\");\n+\t}\n+\t\n+\t\n+\t\n+\t/**\n+\t * @param i\n+\t * @return\n+\t */\n+\tprivate String getSymbol(int i)\n+\t{\n+\t\treturn i>0?\" + \":\" - \";\n+\t}\n+\t\n+\n+\t/**\n+\t * @param value\n+\t * @return\n+\t */\n+\tprivate String getSuperEquivalent(int value)\n+\t{\n+\t\tswitch(value)\n+\t\t{\n+\t\tcase 2:return \"\\u00b2\";\n+\t\tcase 3:return \"\\u00b3\";\n+\t\tdefault:return \"^\"+String.valueOf(value);\n+\t\t}\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param equation\n+\t * @return\n+\t */\n+\tprivate boolean validateInput(int[][] equation)\n+\t{\n+\t\tfor(int loop_var=0;loop_var<equation.length;loop_var++)\n+\t\t{\t\n+\t\t\t//System.out.println(equation[loop_var][0]+\", \"+equation[loop_var][1]);\n+\t\t\tif(equation[loop_var][0]==0)\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param variable\n+\t * @return\n+\t */\n+\tpublic float evaluate(float variable)\n+\t{\n+\t\tfloat value=0;\n+\t\tfor(int loop_var=0;loop_var<equation.length;loop_var++)\n+\t\t{\n+\t\t\tvalue+=equation[loop_var][0]*(Math.pow(variable, equation[loop_var][1]));\n+\t\t}\n+\t\treturn value;\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @return\n+\t */\n+\tpublic int degree()\n+\t{\n+\t\tint max=0;\n+\t\tfor(int loop_var=0;loop_var<equation.length;loop_var++)\n+\t\t{\n+\t\t\tmax=equation[loop_var][1]>max?equation[loop_var][1]:max;\n+\t\t}\n+\t\treturn max;\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param p1 object reference polynomial 1\n+\t * @param p2 object reference polynomial 2\n+\t * @param variable variable in polynomial\n+\t * @return addition of polynomial 1 and polynomial 2\n+\t */\n+\tpublic static float addPoly(Poly p1, Poly p2, float variable)\n+\t{\n+\t\treturn p1.evaluate(variable)+p2.evaluate(variable);\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param p1\n+\t * @param p2\n+\t * @return \n+\t */\n+\tpublic static Poly addPoly(Poly p1, Poly p2)\n+\t{\n+\t\tint result[][]=new int[p1.equation.length+p2.equation.length][2];\n+\t\tresult=condensePoly(result,p1);\n+\t\tresult=condensePoly(result,p2);\n+\t\treturn new Poly(trimArray(result));\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param p1 object reference polynomial 1\n+\t * @param p2 object reference polynomial 2\n+\t * @param variable value of polynomial for which it need to be evaluated and multiplied\n+\t * @return multiplication of polynomial 1 and polynomial 2\n+\t */\n+\tpublic static float multiplyPoly(Poly p1, Poly p2, float variable)\n+\t{\n+\t\treturn p1.evaluate(variable)+p2.evaluate(variable);\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param p1 object reference polynomial 1\n+\t * @param p2 object reference polynomial 2\n+\t * @return object reference to result\n+\t */\n+\tpublic static Poly multiplyPoly(Poly p1, Poly p2)\n+\t{\n+\t\tint index=0;\n+\t\tint result[][]=new int[p1.equation.length*p2.equation.length][2];\n+\t\tfor(int loop_var=0;loop_var<p1.equation.length;loop_var++)\n+\t\t{\n+\t\t\tfor(int inner_loop_var=0;inner_loop_var<p2.equation.length;inner_loop_var++)\n+\t\t\t{\n+\t\t\t\tresult[index][0]=p1.equation[loop_var][0]*p2.equation[inner_loop_var][0];\n+\t\t\t\tresult[index][1]=p1.equation[loop_var][1]+p2.equation[inner_loop_var][1];\n+\t\t\t\tindex++;\n+\t\t\t}\n+\t\t\t\n+\t\t}\n+\t\tresult=condensePoly(new int[result.length][2],new Poly(result));\n+\t\treturn new Poly(trimArray(result));\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param result array in which condensing is done\n+\t * @param poly object reference of array which need to be condensed\n+\t * @return result after condensing/merging poly equation to it\n+\t */\n+\tprivate static int[][] condensePoly(int result[][],Poly poly)\n+\t{\n+\t\tfor(int loop_var=0;loop_var<poly.equation.length;loop_var++)\n+\t\t{\n+\t\t\tint index=0;\n+\t\t\tfor(int temp=0;temp<result.length;temp++)\n+\t\t\t{\n+\t\t\t\tif(poly.equation[loop_var][1]==result[temp][1]||result[temp][0]==0)\n+\t\t\t\t{\n+\t\t\t\t\tindex=temp;\n+\t\t\t\t\ttemp=result.length+1;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tresult[index][0]=result[index][0]+poly.equation[loop_var][0];\n+\t\t\tresult[index][1]=poly.equation[loop_var][1];\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\t\n+\t/**\n+\t * @param array which needs to be trimmed\n+\t * @return trimmed array\n+\t */\n+\tprivate static int[][] trimArray(int array[][])\n+\t{\n+\t\tint index;\n+\t\tfor(index=0;index<array.length;index++)\n+\t\t{\n+\t\t\tif(array[index][0]==0)\n+\t\t\t{\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\tint result[][]=new int[index][2];\n+\t\tfor(int loop_var=0;loop_var<index;loop_var++)\n+\t\t{\n+\t\t\tresult[loop_var][0]=array[loop_var][0];\n+\t\t\tresult[loop_var][1]=array[loop_var][1];\n+\t\t}\n+\t\treturn result;\n+\t}\n+}"
  },
  {
    "sha": "c269d8531bf401a12bd5efba8cbea13130d7cc75",
    "filename": "src/PolyDriver.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/meta-sandeep-sisodia/GET2021/blob/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/PolyDriver.java",
    "raw_url": "https://github.com/meta-sandeep-sisodia/GET2021/raw/1210b1598dbad88bddc249d8a0f3d18fce46e73d/src/PolyDriver.java",
    "contents_url": "https://api.github.com/repos/meta-sandeep-sisodia/GET2021/contents/src/PolyDriver.java?ref=1210b1598dbad88bddc249d8a0f3d18fce46e73d",
    "patch": "@@ -0,0 +1,22 @@\n+\n+public class PolyDriver\n+{\n+\tpublic static void main(String[] args)\n+\t{\n+\t\tPoly.getHelp();\n+\t\tint poly_one[][]=new int[][]{{3,2},{2,2},{1,1}};\n+\t\tint poly_two[][]=new int[][]{{-3,2},{2,3}};\n+\t\tPoly polynomial_one=new Poly(poly_one);\n+\t\tPoly polynomial_two=new Poly(poly_two);\n+\t\t//System.out.println(polynomial_one.evaluate(2));\n+\t\t//System.out.println(polynomial_two.evaluate(2));\n+\t\t//System.out.println(polynomial_two.degree());\n+\t\t//Addition of two polynomial\n+\t\tPoly result=Poly.multiplyPoly(polynomial_one, polynomial_two);\n+\t\tresult.printPoly(result.equation);\n+\t\t\n+\t\tresult=Poly.addPoly(polynomial_one, polynomial_two);\n+\t\tSystem.out.println(\"\\n\"+Poly.addPoly(polynomial_one, polynomial_two,2));\n+\t\tresult.printPoly(result.equation);\n+\t}\n+}"
  }
]
