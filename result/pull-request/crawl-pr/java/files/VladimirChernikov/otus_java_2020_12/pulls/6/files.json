[
  {
    "sha": "7116a86246bf671412af9d5bab1dbbc89e232f39",
    "filename": "hw06-solid/build.gradle",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/build.gradle",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/build.gradle",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/build.gradle?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,33 @@\n+plugins {\n+    id 'java'\n+    id 'application'\n+}\n+\n+sourceCompatibility = JavaVersion.VERSION_11\n+targetCompatibility = JavaVersion.VERSION_11\n+\n+dependencies {\n+    testImplementation ('org.junit.jupiter:junit-jupiter-api')\n+    testImplementation ('org.junit.jupiter:junit-jupiter-engine')\n+    testImplementation ('org.assertj:assertj-core')\n+    testImplementation ('org.mockito:mockito-core')\n+    testImplementation ('org.mockito:mockito-junit-jupiter')\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+tasks.withType(JavaCompile) {\n+    options.with {\n+        encoding = 'UTF-8'\n+        warnings = false\n+    }\n+}\n+\n+application {\n+    mainClass = 'ru.otus.hw06.main'\n+}"
  },
  {
    "sha": "404f5a5affcb951d46ea98c03c71873c4b169e64",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/Atm.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Atm.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Atm.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/Atm.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.otus.hw06.api;\n+\n+import java.util.Collection;\n+\n+public interface Atm extends Money\n+{\n+    public void putAmount( final double amount ) throws RuntimeException;\n+    public double takeAmount( final double amount ) throws RuntimeException;\n+    public Collection<Cell> getCells();\n+    public long getTotalMoneyCount();\n+}\n+\n+"
  },
  {
    "sha": "a1eae3c26f9ccb5aba7f6d0dd51ecb1cf228b906",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/Cell.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Cell.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Cell.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/Cell.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.otus.hw06.api;\n+\n+public interface Cell extends Money\n+{\n+    public Money copyMoney( final long quantity );\n+    public Money getMoney();\n+}\n+\n+"
  },
  {
    "sha": "a1c66d7c9394d435a75c09c49e3239f20199a54a",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/Copyable.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Copyable.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Copyable.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/Copyable.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,8 @@\n+package ru.otus.hw06.api;\n+\n+public interface Copyable\n+{\n+    public Object copy();\n+}\n+\n+"
  },
  {
    "sha": "4df3d2a592106a7999a24b0248beb6cd6a2a34c0",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/Money.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Money.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Money.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/Money.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,10 @@\n+package ru.otus.hw06.api;\n+\n+public interface Money extends Quantable, Copyable\n+{\n+    public double getAmount();\n+    public void addMoney( final Money money ) throws RuntimeException;\n+    public Money subtractMoney( final Money money ) throws RuntimeException;\n+}\n+\n+"
  },
  {
    "sha": "4db3232df8d0f8b985152fb85b3a20e5f0ffc507",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/Quantable.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Quantable.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/Quantable.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/Quantable.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,15 @@\n+package ru.otus.hw06.api;\n+\n+public interface Quantable\n+{\n+    public double getQuant();\n+    public long getQuantity();\n+    public void setQuantity( final long newQuantity ) throws RuntimeException;\n+\n+    public long getMaxQuantity();\n+    public long getMinQuantity();\n+    public void setMaxQuantity( final long newMaxQuantity ) throws RuntimeException;\n+    public void setMinQuantity( final long newMinQuantity ) throws RuntimeException;\n+}\n+\n+"
  },
  {
    "sha": "21976731f068082a5fdde4fd7dfae9b8a6f56541",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractAtm.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractAtm.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractAtm.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractAtm.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,125 @@\n+package ru.otus.hw06.api.core;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import ru.otus.hw06.api.Atm;\n+import ru.otus.hw06.api.Cell;\n+import ru.otus.hw06.api.Money;\n+\n+public abstract class AbstractAtm extends AbstractMoney implements Atm\n+{\n+\n+    private final Map< Double,  Cell > cells;\n+\n+    public AbstractAtm( final Map< Double, Cell > cells )\n+    {\n+        super(0, 0);\n+        this.cells = cells;\n+    }\n+\n+    @Override\n+    public double getAmount() {\n+        double result = 0;\n+        for ( final Money cell : this.cells.values() ) {\n+            result += cell.getAmount();\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public void addMoney(final Money money) throws RuntimeException {\n+        this.cells.get( money.getQuant() ).addMoney( money );\n+    }\n+\n+    @Override\n+    public Money subtractMoney(final Money money) throws RuntimeException {\n+        return this.cells.get( money.getQuant() ).subtractMoney( money );\n+    }\n+\n+    @Override\n+    public Collection<Cell> getCells() {\n+        return this.cells.values();\n+    }\n+\n+    @Override\n+    public long getTotalMoneyCount() {\n+        long result = 0;\n+        for ( var cell : this.getCells() ) {\n+            result += cell.getQuantity();\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder info = new StringBuilder();\n+        info.append( \"Atm info: amount \" + this.getAmount() );\n+        info.append( \" and cells:\" );\n+        for ( var cell : this.getCells() ) {\n+            info.append( \" \"+ cell );\n+        }\n+        return info.toString();\n+    }\n+\n+    @Override\n+    public void putAmount( final double amount ) throws RuntimeException {\n+        if ( putAmountSequential( amount, true ) == 0 ) {\n+            putAmountSequential( amount, false );\n+        }\n+        else {\n+            throw new RuntimeException( \"Required exact amount \" + amount + \" could not be fitted into cells. \" + this.toString() );\n+        }\n+    }\n+\n+    @Override\n+    public double takeAmount( final double amount ) throws RuntimeException {\n+        double odd = amount;\n+        if ( amount < this.getAmount() )  {\n+            if ( takeAmountSequential( amount, true ) == 0 ) {\n+                takeAmountSequential( amount, false );\n+            }\n+            else {\n+                throw new RuntimeException( \"Required exact amount \" + amount + \" could not be given from cells. \" + this.toString() );\n+            }\n+        }\n+        else {\n+            throw new RuntimeException( \"Required amount is greater than existing: \" + amount + \" vs \" + this.getAmount() );\n+        }\n+        return amount - odd;\n+    }\n+\n+    private double putAmountSequential( final double amount, boolean testRun ) throws RuntimeException {\n+        double odd = amount;\n+        for ( Cell cell : this.getCells() ) {\n+            final long quantity = (long)( odd / cell.getQuant() );\n+            final long remainingCapacity = Math.min( quantity, cell.getMaxQuantity() - cell.getQuantity() );\n+            if ( remainingCapacity > 0 ) {\n+                if ( !testRun ) {\n+                    cell.addMoney( cell.copyMoney( remainingCapacity ) );\n+                }\n+                odd -= cell.getQuant() * remainingCapacity;\n+            }\n+        }\n+        return odd;\n+    }\n+\n+\n+    private double takeAmountSequential( final double amount, boolean testRun ) throws RuntimeException {\n+        double odd = amount;\n+        for ( Cell cell : this.getCells() ) {\n+            final long quantity = (long)( odd / cell.getQuant() );\n+            final long takenCapacity = Math.min( quantity, cell.getQuantity() );\n+            if ( takenCapacity > 0 ) {\n+                if ( !testRun ) {\n+                    cell.subtractMoney( cell.copyMoney( takenCapacity ) );\n+                }\n+                odd -= cell.getQuant() * takenCapacity;\n+            }\n+        }\n+        return odd;\n+    }\n+\n+}\n+\n+"
  },
  {
    "sha": "46b58a91ece37ba3003480c241d21261d9075e3e",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractCell.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractCell.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractCell.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractCell.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,61 @@\n+package ru.otus.hw06.api.core;\n+\n+import ru.otus.hw06.api.Cell;\n+import ru.otus.hw06.api.Money;\n+\n+public abstract class AbstractCell extends AbstractMoney implements Cell\n+{\n+    private final Money money;\n+\n+    public AbstractCell( final Money initialMoney, final long capacity )\n+    {\n+        super( initialMoney.getQuant(), 0, 0, capacity );\n+        this.money = initialMoney;\n+    }\n+\n+    @Override\n+    public void addMoney(final Money money) throws RuntimeException {\n+        final var requiredQuantity = money.getQuantity() + this.money.getQuantity();\n+        if ( requiredQuantity <= this.getMaxQuantity() ) {\n+            this.money.addMoney(money);\n+        }\n+        else {\n+            throw new RuntimeException( \"Required requiredQuantity = \" + requiredQuantity + \" is greater than cell maxQuantity = \" + this.getMaxQuantity() );\n+        }\n+    }\n+\n+    @Override\n+    public double getAmount() {\n+        return this.money.getAmount();\n+    }\n+\n+    @Override\n+    public long getQuantity() {\n+        return this.money.getQuantity();\n+    }\n+\n+    @Override\n+    public Money subtractMoney(final Money money) throws RuntimeException {\n+        return this.money.subtractMoney(money);\n+    }\n+\n+    @Override\n+    public Money copyMoney(final long quantity) {\n+        Money result = (Money)this.money.copy();\n+        result.setQuantity( quantity );\n+        return result;\n+    }\n+\n+    @Override\n+    public Money getMoney() {\n+        return this.money;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Cell info: amount = \" + this.getAmount() + \" and quant = \" + this.getQuant();\n+    }\n+\n+}\n+\n+"
  },
  {
    "sha": "4ec4295db3c1558103e38b1b801a09230f5a6da1",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractMoney.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractMoney.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractMoney.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractMoney.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,57 @@\n+package ru.otus.hw06.api.core;\n+\n+import ru.otus.hw06.api.Money;\n+\n+public abstract class AbstractMoney extends AbstractQuantable implements Money\n+{\n+    public AbstractMoney( final double quant, final long quantity ) {\n+        super( quant, quantity, 0L, Long.MAX_VALUE );\n+    }\n+\n+    public AbstractMoney( final double quant, final long quantity, final long minQuantity, final long maxQuantity ) {\n+        super( quant, quantity, minQuantity, maxQuantity );\n+    }\n+\n+    @Override\n+    public double getAmount() {\n+        return this.getQuant() * this.getQuantity();\n+    }\n+\n+    @Override\n+    public void addMoney(final Money money) throws RuntimeException {\n+        if ( this.isQuantEquals( money ) ) {\n+            this.setQuantity( this.getQuantity() + money.getQuantity() );\n+        }\n+        else {\n+            throw new RuntimeException( \"Cannot accept money \" + money + \". Please, supply money with quant = \" + this.getQuant() );\n+        }\n+    }\n+\n+    @Override\n+    public Money subtractMoney(final Money money) throws RuntimeException {\n+        if ( this.isQuantEquals( money ) ) {\n+            if ( money.getQuantity() <= this.getQuantity() ) {\n+                this.setQuantity( this.getQuantity() - money.getQuantity() );\n+            }\n+            else {\n+                throw new RuntimeException( \"Required amount = \" + money.getAmount() + \" is too much. Existing amount = \" + this.getAmount() );\n+            }\n+        }\n+        else {\n+            throw new RuntimeException( \"Cannot accept money \" + money + \". Please, supply money with quant = \" + this.getQuant() );\n+        }\n+        return (Money)money.copy();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return super.toString() + \": amount = \" + this.getAmount() + \" with quant = \" + this.getQuant();\n+    }\n+\n+    private boolean isQuantEquals( final Money money ) {\n+        return money.getQuant() == this.getQuant();\n+    }\n+\n+}\n+\n+"
  },
  {
    "sha": "d72cf12fb9466a67a26a68752407378987c62924",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractQuantable.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractQuantable.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractQuantable.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/AbstractQuantable.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,79 @@\n+package ru.otus.hw06.api.core;\n+\n+import ru.otus.hw06.api.Quantable;\n+\n+public abstract class AbstractQuantable implements Quantable\n+{\n+    private final double quant;\n+    private long quantity;\n+    private long maxQuantity;\n+    private long minQuantity;\n+\n+    public AbstractQuantable( final double quant, final long quantity, final long minQuantity, final long maxQuantity ) {\n+        this.quant = quant;\n+        this.quantity = quantity;\n+        this.minQuantity = minQuantity;\n+        this.maxQuantity = maxQuantity;\n+    }\n+\n+    public AbstractQuantable( final double quant, final long quantity ) {\n+        this( quant, quantity, Long.MIN_VALUE, Long.MAX_VALUE );\n+    }\n+\n+    @Override\n+    public double getQuant() {\n+        return this.quant;\n+    }\n+\n+    @Override\n+    public long getQuantity() {\n+        return this.quantity;\n+    }\n+\n+    @Override\n+    public void setQuantity(final long newQuantity) throws RuntimeException {\n+        if ( newQuantity >= this.getMinQuantity() && newQuantity <= this.getMaxQuantity() ) {\n+            this.quantity = newQuantity;\n+        }\n+        else {\n+            throw new RuntimeException(\"New quantity = \" + newQuantity + \" is out of bounds [\" + this.getMinQuantity() + \"; \" + this.getMaxQuantity() + \"]\");\n+        }\n+    }\n+\n+    @Override\n+    public long getMaxQuantity() {\n+        return this.maxQuantity;\n+    }\n+\n+    @Override\n+    public long getMinQuantity() {\n+        return this.minQuantity;\n+    }\n+\n+    @Override\n+    public void setMaxQuantity(final long newMaxQuantity) throws RuntimeException {\n+        if ( this.getMaxQuantity() != Long.MAX_VALUE ) {\n+            if ( newMaxQuantity >= this.getMaxQuantity() ) {\n+                this.maxQuantity = newMaxQuantity;\n+            }\n+            else {\n+                throw new RuntimeException(\"New max quantity \" + newMaxQuantity + \" must not be less than existing \" + this.getMaxQuantity() );\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setMinQuantity(final long newMinQuantity) throws RuntimeException {\n+        if ( this.getMinQuantity() != Long.MIN_VALUE ) {\n+            if ( newMinQuantity <= this.getMinQuantity() ) {\n+                this.minQuantity = newMinQuantity;\n+            }\n+            else {\n+                throw new RuntimeException(\"New min quantity \" + newMinQuantity + \" must not be greater than existing \" + this.getMinQuantity() );\n+            }\n+        }\n+    }\n+\n+}\n+\n+"
  },
  {
    "sha": "c321fbdd9cc3509dec562a2b56fc2388ef470ed2",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtm.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtm.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtm.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtm.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,30 @@\n+package ru.otus.hw06.api.core.atm;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import ru.otus.hw06.api.Cell;\n+import ru.otus.hw06.api.core.AbstractAtm;\n+\n+public class CashCellAtm extends AbstractAtm\n+{\n+\n+    public CashCellAtm( final Map< Double, Cell > cells )\n+    {\n+        super(cells);\n+    }\n+\n+\t@Override\n+\tpublic Object copy() {\n+        List< Cell > newCells = new ArrayList<>();\n+        for ( Cell cell : this.getCells() )  {\n+            newCells.add( (Cell)cell.copy() );\n+        }\n+\t\treturn CashCellAtmFactory.createWithCells( newCells );\n+\t}\n+\n+\n+}\n+\n+"
  },
  {
    "sha": "f4763955f77b4de4e48536e1574fe6664d10ee79",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtmFactory.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtmFactory.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtmFactory.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/atm/CashCellAtmFactory.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,30 @@\n+package ru.otus.hw06.api.core.atm;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import ru.otus.hw06.api.Cell;\n+\n+public class CashCellAtmFactory\n+{\n+    public static CashCellAtm createWithCells( List< Cell > cells ) {\n+        Map< Double, Cell > cellMap = new TreeMap<>( Collections.reverseOrder() );\n+        for ( Cell cell : cells )  {\n+            if ( !cellMap.containsKey( cell.getQuant() ) ) {\n+                cellMap.put( cell.getQuant(), (Cell)cell.copy() );\n+            }\n+            else {\n+                // merge cells\n+                Cell existingCell = cellMap.get( cell.getQuant() );\n+                existingCell.setMaxQuantity( existingCell.getMaxQuantity() + cell.getMaxQuantity() );\n+                existingCell.setQuantity( existingCell.getQuantity() + cell.getQuantity() );\n+                cellMap.put( cell.getQuant(), existingCell );\n+            }\n+        }\n+        return new CashCellAtm( cellMap );\n+    }\n+}\n+\n+"
  },
  {
    "sha": "7098a872a12f493355a1ff694e6934854c22d951",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCell.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCell.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCell.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCell.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.otus.hw06.api.core.cell;\n+\n+import ru.otus.hw06.api.Money;\n+import ru.otus.hw06.api.core.AbstractCell;\n+\n+public class CashCell extends AbstractCell\n+{\n+    public CashCell( final Money initialMoney, final long capacity )\n+    {\n+        super( initialMoney, capacity );\n+    }\n+\n+\t@Override\n+\tpublic Object copy() {\n+\t\treturn new CashCell( (Money)this.getMoney().copy(), this.getMaxQuantity() );\n+\t}\n+\n+}\n+\n+"
  },
  {
    "sha": "18585d12a62e12c9c00bdd34889b3d37274a27b5",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCellFactory.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCellFactory.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCellFactory.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/cell/CashCellFactory.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.otus.hw06.api.core.cell;\n+\n+import ru.otus.hw06.api.Money;\n+\n+public class CashCellFactory\n+{\n+    public static CashCell createInfiniteWithMoney( Money money )\n+    {\n+        return new CashCell( (Money)money.copy(), Long.MAX_VALUE );\n+    }\n+}\n+\n+"
  },
  {
    "sha": "7e46aebf444c3ece3c12244c1364fa5ec1a04588",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/money/Cash.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/money/Cash.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/money/Cash.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/money/Cash.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.otus.hw06.api.core.money;\n+\n+import ru.otus.hw06.api.core.AbstractMoney;\n+\n+public class Cash extends AbstractMoney\n+{\n+    public Cash( final double quant, final long quantity )\n+    {\n+        super( quant, quantity );\n+    }\n+\n+\t@Override\n+\tpublic Object copy() {\n+\t\treturn new Cash( this.getQuant(), this.getQuantity() );\n+\t}\n+}\n+\n+"
  },
  {
    "sha": "a642290b3a7a49006cb6a1378f74cafc8a73ad30",
    "filename": "hw06-solid/src/main/java/ru/otus/hw06/api/core/money/CashFactory.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/money/CashFactory.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/main/java/ru/otus/hw06/api/core/money/CashFactory.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/main/java/ru/otus/hw06/api/core/money/CashFactory.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.otus.hw06.api.core.money;\n+\n+public class CashFactory\n+{\n+    public static Cash createNoneWithNominal( double quant )\n+    {\n+        return new Cash( quant, 0 );\n+    }\n+\n+    public static Cash createSingleWithNominal( double quant )\n+    {\n+        return new Cash( quant, 1 );\n+    }\n+\n+    public static Cash createWithNominal( double quant, long quantity )\n+    {\n+        return new Cash( quant, quantity );\n+    }\n+}\n+\n+"
  },
  {
    "sha": "0b30786045302ec7649b457379fd3c942db261c1",
    "filename": "hw06-solid/src/test/java/ru/otus/hw06/api/AtmTest.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/test/java/ru/otus/hw06/api/AtmTest.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/test/java/ru/otus/hw06/api/AtmTest.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/test/java/ru/otus/hw06/api/AtmTest.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,96 @@\n+package ru.otus.hw06.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import ru.otus.hw06.api.core.atm.CashCellAtmFactory;\n+import ru.otus.hw06.api.core.cell.CashCellFactory;\n+import ru.otus.hw06.api.core.money.CashFactory;\n+\n+class AtmTest {\n+\n+    // Объект класса АТМ \n+    private Atm atm;\n+    @BeforeEach\n+    void setupAnEmptyAtm(){\n+        List<Cell> cells = new ArrayList<>();\n+        cells.add( CashCellFactory.createInfiniteWithMoney( CashFactory.createNoneWithNominal(  50 ) ) );\n+        cells.add( CashCellFactory.createInfiniteWithMoney( CashFactory.createNoneWithNominal( 100 ) ) );\n+        cells.add( CashCellFactory.createInfiniteWithMoney( CashFactory.createNoneWithNominal( 200 ) ) );\n+        cells.add( CashCellFactory.createInfiniteWithMoney( CashFactory.createNoneWithNominal( 500 ) ) );\n+        cells.add( CashCellFactory.createInfiniteWithMoney( CashFactory.createNoneWithNominal( 1000 ) ) );\n+        cells.add( CashCellFactory.createInfiniteWithMoney( CashFactory.createNoneWithNominal( 2000 ) ) );\n+        atm = CashCellAtmFactory.createWithCells( cells );\n+    }\n+\n+    @DisplayName(\"Принять банкноты разных номиналов\")\n+    @Test\n+    void takeDifferentNominals() {\n+        double expectedValue = 50 + 100 + 200 + 500 + 1000 + 2000;\n+        \n+        Money cash = CashFactory.createSingleWithNominal(  50 );\n+        atm.addMoney( cash );\n+        cash.setQuantity(100);\n+\n+        atm.addMoney( CashFactory.createSingleWithNominal( 100 ) );\n+        atm.addMoney( CashFactory.createSingleWithNominal( 200 ) );\n+        atm.addMoney( CashFactory.createSingleWithNominal( 500 ) );\n+        atm.addMoney( CashFactory.createSingleWithNominal( 1000 ) );\n+        atm.addMoney( CashFactory.createSingleWithNominal( 2000 ) );\n+\n+        assertThat( expectedValue ).isEqualTo( atm.getAmount() );\n+    }\n+\n+    @DisplayName(\"Выдать запрошенную сумму минимальным количеством банкнот\")\n+    @Test\n+    void giveRequestedAmount() {\n+        double initialCount = 300 + 60 + 12 + 3 + 2;\n+        double expectedValue = initialCount - 2 - 3 - 3 - 1;\n+\n+        atm.addMoney( CashFactory.createWithNominal( 50, 300 ) ) ;\n+        atm.addMoney( CashFactory.createWithNominal( 100, 60 ) ) ;\n+        atm.addMoney( CashFactory.createWithNominal( 500, 12 ) ) ;\n+        atm.addMoney( CashFactory.createWithNominal( 1000, 3 ) ) ;\n+        atm.addMoney( CashFactory.createWithNominal( 2000, 2 ) ) ;\n+\n+        assertThat( initialCount ).isEqualTo( atm.getTotalMoneyCount() );\n+\n+        atm.takeAmount( 8550 );\n+        assertThat( expectedValue ).isEqualTo( atm.getTotalMoneyCount() );\n+    }\n+\n+    @DisplayName(\"Выдать ошибку если сумму нельзя выдать\")\n+    @Test\n+    void giveRequestedAmountError() {\n+        atm.putAmount( 1200 );\n+\n+        Exception exceptionGreater = assertThrows(RuntimeException.class, () -> {\n+            atm.takeAmount( 1300 );\n+        });\n+        assertTrue( exceptionGreater.getMessage().contains( \"amount is greater than existing\" ) );\n+\n+        Exception exceptionUnfitted = assertThrows(RuntimeException.class, () -> {\n+            atm.takeAmount( 1120 );\n+        });\n+        assertTrue( exceptionUnfitted.getMessage().contains( \"could not be given from cells\" ) );\n+\n+    }\n+\n+    @DisplayName(\"Выдать сумму остатка денежных средств\")\n+    @Test\n+    void getBalance() {\n+        Double expectedValue = 12300.00;\n+        atm.putAmount( expectedValue );\n+        Double balance = atm.getAmount();\n+        assertThat( expectedValue ).isEqualTo( balance );\n+    }\n+\n+}"
  },
  {
    "sha": "75a4b4bdfb40981cc757d1b4fa70659c3c69fee1",
    "filename": "hw06-solid/src/test/java/ru/otus/hw06/api/CellTest.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/test/java/ru/otus/hw06/api/CellTest.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/test/java/ru/otus/hw06/api/CellTest.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/test/java/ru/otus/hw06/api/CellTest.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,37 @@\n+package ru.otus.hw06.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import ru.otus.hw06.api.core.cell.CashCellFactory;\n+import ru.otus.hw06.api.core.money.Cash;\n+\n+class CellTest {\n+\n+    private Cell cell;\n+\n+    @BeforeEach\n+    public void setUp(){\n+        cell = CashCellFactory.createInfiniteWithMoney( new Cash( 100, 5 ) );\n+    }\n+\n+    @Test\n+    public void addMoney() {\n+        double balance = cell.getAmount();\n+        double expected = balance + 300;\n+        cell.addMoney( new Cash( 100, 3 ) );\n+        balance = cell.getAmount();\n+        assertThat( balance ).isEqualTo( expected );\n+    }\n+\n+    @Test\n+    public void subtractMoney() {\n+        double balance = cell.getAmount();\n+        double expected = balance - 300;\n+        cell.subtractMoney( new Cash( 100, 3 ) );\n+        balance = cell.getAmount();\n+        assertThat( balance ).isEqualTo( expected );\n+    }\n+}"
  },
  {
    "sha": "b6f2f5722552fa24b74ee81b39417594157272d8",
    "filename": "hw06-solid/src/test/java/ru/otus/hw06/api/MoneyTest.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/test/java/ru/otus/hw06/api/MoneyTest.java",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/hw06-solid/src/test/java/ru/otus/hw06/api/MoneyTest.java",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/hw06-solid/src/test/java/ru/otus/hw06/api/MoneyTest.java?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.otus.hw06.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import ru.otus.hw06.api.core.money.Cash;\n+\n+class MoneyTest {\n+\n+    private Money cash;\n+\n+    @BeforeEach\n+    public void setUp(){\n+        cash = new Cash( 100, 5 );\n+    }\n+\n+    @Test\n+    public void addMoney() {\n+        double balance = cash.getAmount();\n+        double expected = balance + 300;\n+        cash.addMoney( new Cash( 100, 3 ) );\n+        balance = cash.getAmount();\n+        assertThat( balance ).isEqualTo( expected );\n+    }\n+\n+    @Test\n+    public void subtractMoney() {\n+        double balance = cash.getAmount();\n+        double expected = balance - 300;\n+        cash.subtractMoney( new Cash( 100, 3 ) );\n+        balance = cash.getAmount();\n+        assertThat( balance ).isEqualTo( expected );\n+    }\n+}"
  },
  {
    "sha": "671f2ae6e08990192dd1ac1ac52a6a6e92723dc9",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/VladimirChernikov/otus_java_2020_12/blob/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/settings.gradle",
    "raw_url": "https://github.com/VladimirChernikov/otus_java_2020_12/raw/c09f23ab83af54c8ca8fb81345d92e38157ebfbc/settings.gradle",
    "contents_url": "https://api.github.com/repos/VladimirChernikov/otus_java_2020_12/contents/settings.gradle?ref=c09f23ab83af54c8ca8fb81345d92e38157ebfbc",
    "patch": "@@ -13,3 +13,4 @@ include 'hw02-generics'\n include 'hw03-annotations'\n include 'hw04-gc'\n include 'hw05-bytecode'\n+include 'hw06-solid'"
  }
]
