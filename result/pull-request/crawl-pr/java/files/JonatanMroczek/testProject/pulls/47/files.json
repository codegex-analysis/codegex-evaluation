[
  {
    "sha": "f417107b7b7736cdcc57238239d3e36ea59fba01",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/JonatanMroczek/testProject/blob/173406b76b70b5d46fa3260478b99dc9e55c135a/pom.xml",
    "raw_url": "https://github.com/JonatanMroczek/testProject/raw/173406b76b70b5d46fa3260478b99dc9e55c135a/pom.xml",
    "contents_url": "https://api.github.com/repos/JonatanMroczek/testProject/contents/pom.xml?ref=173406b76b70b5d46fa3260478b99dc9e55c135a",
    "patch": "@@ -14,6 +14,12 @@\n             <version>5.7.0</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <version>3.7.7</version>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.junit.jupiter</groupId>\n             <artifactId>junit-jupiter</artifactId>"
  },
  {
    "sha": "b170ba7a8a4e353c1156d617877736520e158a90",
    "filename": "src/main/java/Lesson7/ExternalService/BaseSalaryService.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/JonatanMroczek/testProject/blob/173406b76b70b5d46fa3260478b99dc9e55c135a/src/main/java/Lesson7/ExternalService/BaseSalaryService.java",
    "raw_url": "https://github.com/JonatanMroczek/testProject/raw/173406b76b70b5d46fa3260478b99dc9e55c135a/src/main/java/Lesson7/ExternalService/BaseSalaryService.java",
    "contents_url": "https://api.github.com/repos/JonatanMroczek/testProject/contents/src/main/java/Lesson7/ExternalService/BaseSalaryService.java?ref=173406b76b70b5d46fa3260478b99dc9e55c135a",
    "patch": "@@ -0,0 +1,5 @@\n+package Lesson7.ExternalService;\n+\n+public interface BaseSalaryService {\n+    double getBaseSalary();\n+}"
  },
  {
    "sha": "fb7f36668a48c8992e83247416552eda6c0668ec",
    "filename": "src/main/java/Lesson7/ExternalService/SaturdayBonusService.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/JonatanMroczek/testProject/blob/173406b76b70b5d46fa3260478b99dc9e55c135a/src/main/java/Lesson7/ExternalService/SaturdayBonusService.java",
    "raw_url": "https://github.com/JonatanMroczek/testProject/raw/173406b76b70b5d46fa3260478b99dc9e55c135a/src/main/java/Lesson7/ExternalService/SaturdayBonusService.java",
    "contents_url": "https://api.github.com/repos/JonatanMroczek/testProject/contents/src/main/java/Lesson7/ExternalService/SaturdayBonusService.java?ref=173406b76b70b5d46fa3260478b99dc9e55c135a",
    "patch": "@@ -0,0 +1,5 @@\n+package Lesson7.ExternalService;\n+\n+public interface SaturdayBonusService {\n+    double getSaturdayBonus();\n+}"
  },
  {
    "sha": "ac227020b47d70d9ca0a5a2b2a2615a40afed10a",
    "filename": "src/main/java/Lesson7/SalaryCalculator.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/JonatanMroczek/testProject/blob/173406b76b70b5d46fa3260478b99dc9e55c135a/src/main/java/Lesson7/SalaryCalculator.java",
    "raw_url": "https://github.com/JonatanMroczek/testProject/raw/173406b76b70b5d46fa3260478b99dc9e55c135a/src/main/java/Lesson7/SalaryCalculator.java",
    "contents_url": "https://api.github.com/repos/JonatanMroczek/testProject/contents/src/main/java/Lesson7/SalaryCalculator.java?ref=173406b76b70b5d46fa3260478b99dc9e55c135a",
    "patch": "@@ -0,0 +1,25 @@\n+package Lesson7;\n+\n+import Lesson7.ExternalService.BaseSalaryService;\n+import Lesson7.ExternalService.SaturdayBonusService;\n+\n+public class SalaryCalculator {\n+    private final SaturdayBonusService saturdayBonusService;\n+    private final BaseSalaryService baseSalaryService;\n+\n+    public SalaryCalculator(SaturdayBonusService saturdayBonusService, BaseSalaryService baseSalaryService) {\n+        this.saturdayBonusService = saturdayBonusService;\n+        this.baseSalaryService = baseSalaryService;\n+    }\n+\n+    public double calculateSalary(double bonus, int saturdays) {\n+        if (bonus < 0 || saturdays < 0 || saturdays > 5)\n+            throw new IllegalArgumentException(\"Bonus and saturdays can not be negative numbers\");\n+        double saturdayBonus = saturdayBonusService.getSaturdayBonus();\n+        double baseSalary = baseSalaryService.getBaseSalary();\n+        double salary = baseSalary + bonus + saturdayBonus * saturdays;\n+        return salary;\n+\n+    }\n+}\n+"
  },
  {
    "sha": "89314d940db42a78d311555567bf3acfe3806d79",
    "filename": "src/test/java/Lesson7/SalaryCalculatorTest.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/JonatanMroczek/testProject/blob/173406b76b70b5d46fa3260478b99dc9e55c135a/src/test/java/Lesson7/SalaryCalculatorTest.java",
    "raw_url": "https://github.com/JonatanMroczek/testProject/raw/173406b76b70b5d46fa3260478b99dc9e55c135a/src/test/java/Lesson7/SalaryCalculatorTest.java",
    "contents_url": "https://api.github.com/repos/JonatanMroczek/testProject/contents/src/test/java/Lesson7/SalaryCalculatorTest.java?ref=173406b76b70b5d46fa3260478b99dc9e55c135a",
    "patch": "@@ -0,0 +1,98 @@\n+package Lesson7;\n+\n+import Lesson7.ExternalService.BaseSalaryService;\n+import Lesson7.ExternalService.SaturdayBonusService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class SalaryCalculatorTest {\n+\n+\n+    @Test\n+    void shouldVerifyCalculateSalaryInteractionWithExternalService() {\n+        //given\n+        double saturdayBonus = 50;\n+        double baseSalary = 6000;\n+        SaturdayBonusService mockedSaturdayBonusService = Mockito.mock(SaturdayBonusService.class);\n+        BaseSalaryService mockedBaseSalaryService = Mockito.mock(BaseSalaryService.class);\n+        when(mockedSaturdayBonusService.getSaturdayBonus()).thenReturn(saturdayBonus);\n+        when(mockedBaseSalaryService.getBaseSalary()).thenReturn(baseSalary);\n+        SalaryCalculator salaryCalculator = new SalaryCalculator(mockedSaturdayBonusService, mockedBaseSalaryService);\n+\n+        //when\n+        double calculatedSalary = salaryCalculator.calculateSalary(200, 3);\n+\n+        //then\n+        Assertions.assertEquals(6350, calculatedSalary);\n+\n+    }\n+\n+    @Test\n+    void shouldVerifyCalculateSalaryInteractionWithExternalService2() {\n+        //given\n+        double saturdayBonus = 0;\n+        double baseSalary = 6000;\n+        SaturdayBonusService mockedSaturdayBonusService = Mockito.mock(SaturdayBonusService.class);\n+        BaseSalaryService mockedBaseSalaryService = Mockito.mock(BaseSalaryService.class);\n+        when(mockedSaturdayBonusService.getSaturdayBonus()).thenReturn(saturdayBonus);\n+        when(mockedBaseSalaryService.getBaseSalary()).thenReturn(baseSalary);\n+        SalaryCalculator salaryCalculator = new SalaryCalculator(mockedSaturdayBonusService, mockedBaseSalaryService);\n+\n+        //when\n+        double calculatedSalary = salaryCalculator.calculateSalary(200, 3);\n+\n+        //then\n+        Assertions.assertEquals(6200, calculatedSalary);\n+\n+    }\n+\n+    @Test\n+    void shouldThrowIllegalArgumentException() {\n+        //given\n+        double bonus = 10;\n+        int saturdays = -20;\n+        double saturdayBonus = 0;\n+        double baseSalary = 6000;\n+        SaturdayBonusService mockedSaturdayBonusService = Mockito.mock(SaturdayBonusService.class);\n+        BaseSalaryService mockedBaseSalaryService = Mockito.mock(BaseSalaryService.class);\n+        when(mockedSaturdayBonusService.getSaturdayBonus()).thenReturn(saturdayBonus);\n+        when(mockedBaseSalaryService.getBaseSalary()).thenReturn(baseSalary);\n+        SalaryCalculator salaryCalculator = new SalaryCalculator(mockedSaturdayBonusService, mockedBaseSalaryService);\n+        //when\n+        Throwable exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            salaryCalculator.calculateSalary(bonus, saturdays);\n+        });\n+\n+        //then\n+        String expectedMessage = \"Bonus and saturdays can not be negative numbers\";\n+        String actualMessage = exception.getMessage();\n+        assertTrue(actualMessage.contains(expectedMessage));\n+    }\n+\n+    @Test\n+    void shouldThrowIllegalArgumentException1() {\n+        //given\n+        double bonus = 10;\n+        int saturdays = 6;\n+        double saturdayBonus = 0;\n+        double baseSalary = 6000;\n+        SaturdayBonusService mockedSaturdayBonusService = Mockito.mock(SaturdayBonusService.class);\n+        BaseSalaryService mockedBaseSalaryService = Mockito.mock(BaseSalaryService.class);\n+        when(mockedSaturdayBonusService.getSaturdayBonus()).thenReturn(saturdayBonus);\n+        when(mockedBaseSalaryService.getBaseSalary()).thenReturn(baseSalary);\n+        SalaryCalculator salaryCalculator = new SalaryCalculator(mockedSaturdayBonusService, mockedBaseSalaryService);\n+        //when\n+        Throwable exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            salaryCalculator.calculateSalary(bonus, saturdays);\n+        });\n+\n+        //then\n+        String expectedMessage = \"Bonus and saturdays can not be negative numbers\";\n+        String actualMessage = exception.getMessage();\n+        assertTrue(actualMessage.contains(expectedMessage));\n+    }\n+}\n\\ No newline at end of file"
  }
]
