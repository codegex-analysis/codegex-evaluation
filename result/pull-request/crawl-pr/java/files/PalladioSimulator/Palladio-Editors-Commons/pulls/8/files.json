[
  {
    "sha": "fe069ed68c7bb641c832b92086513072dd013cf5",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExContextProvidingAdapter.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExContextProvidingAdapter.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExContextProvidingAdapter.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExContextProvidingAdapter.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -0,0 +1,12 @@\n+package org.palladiosimulator.editors.commons.dialogs.stoex;\n+\n+import org.eclipse.emf.common.notify.Adapter;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+public interface StoExContextProvidingAdapter extends Adapter, StoexContextProvider {\n+    void setStoexContainer(RandomVariable stoexContainer);\n+    void setExpectedType(TypeEnum expectedType);\n+}"
  },
  {
    "sha": "36b449d05ee7ff137dedfb69b45d1e61f870331f",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExEditDialog.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExEditDialog.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExEditDialog.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoExEditDialog.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -1,6 +1,7 @@\n package org.palladiosimulator.editors.commons.dialogs.stoex;\n \n import de.uka.ipd.sdq.stoex.Expression;\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n \n public interface StoExEditDialog {\n \n@@ -15,5 +16,7 @@\n     void setInitialExpression(Expression expression);\n \n     void setDisplayTitle(String dialogMessage);\n+    \n+    void setContext(RandomVariable container);\n \n }"
  },
  {
    "sha": "ade1c5a7010eb95cf633e0f566a9d25db88f89bb",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StochasticExpressionEditDialog.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StochasticExpressionEditDialog.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StochasticExpressionEditDialog.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StochasticExpressionEditDialog.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -15,10 +15,10 @@ public StochasticExpressionEditDialog(Shell shell, TypeEnum expectedType) {\n         this(shell, expectedType, null);\n     }\n \n-    public StochasticExpressionEditDialog(Shell shell, TypeEnum expectedType, EObject elementToConfigure) {\n+    public StochasticExpressionEditDialog(Shell shell, TypeEnum expectedType, RandomVariable container) {\n         this.dialog = StoExEditDialogFactoryProvider.getInstance()\n             .create(shell, expectedType);\n-        // TODO use passed element to improve completion proposals\n+        dialog.setContext(container);\n     }\n \n     public int open() {"
  },
  {
    "sha": "159a2c5693ef6e3ae5a786550cd1af81b774eccf",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoxContextProvidingAdapterFactory.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoxContextProvidingAdapterFactory.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoxContextProvidingAdapterFactory.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoxContextProvidingAdapterFactory.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -0,0 +1,11 @@\n+package org.palladiosimulator.editors.commons.dialogs.stoex;\n+\n+import org.palladiosimulator.editors.commons.dialogs.stoex.impl.StoexContextProvidingAdapterImpl;\n+\n+public interface StoxContextProvidingAdapterFactory {\n+\n+    public static StoExContextProvidingAdapter create() {\n+        return new StoexContextProvidingAdapterImpl();\n+    }\n+    \n+}"
  },
  {
    "sha": "bf868ae13af71b319f4a29821254c8bdecba4bc6",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/ObservableResourceValidator.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/ObservableResourceValidator.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/ObservableResourceValidator.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/ObservableResourceValidator.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -0,0 +1,40 @@\n+package org.palladiosimulator.editors.commons.dialogs.stoex.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.service.OperationCanceledError;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.validation.CheckMode;\n+import org.eclipse.xtext.validation.IResourceValidator;\n+import org.eclipse.xtext.validation.Issue;\n+\n+public class ObservableResourceValidator implements IResourceValidator {\n+\n+    private IResourceValidator originalValidator;\n+    private final Collection<Consumer<Collection<Issue>>> validationListeners = new ArrayList<>();\n+\n+    public ObservableResourceValidator(IResourceValidator originalValidator) {\n+        this.originalValidator = originalValidator;\n+    }\n+\n+    @Override\n+    public List<Issue> validate(Resource resource, CheckMode mode, CancelIndicator indicator)\n+            throws OperationCanceledError {\n+        var issues = originalValidator.validate(resource, mode, indicator);\n+        notifyListeners(issues);\n+        return issues;\n+    }\n+\n+    public void addValidationListener(Consumer<Collection<Issue>> listener) {\n+        validationListeners.add(listener);\n+    }\n+\n+    protected void notifyListeners(Collection<Issue> issues) {\n+        validationListeners.forEach(listener -> listener.accept(issues));\n+    }\n+\n+}"
  },
  {
    "sha": "82cf85d283b8429b2622e755ff41ebddbc0305aa",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoExEditDialogImpl.java",
    "status": "modified",
    "additions": 22,
    "deletions": 10,
    "changes": 32,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoExEditDialogImpl.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoExEditDialogImpl.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoExEditDialogImpl.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -23,7 +23,7 @@\n import com.google.inject.Inject;\n \n import de.uka.ipd.sdq.stoex.Expression;\n-import de.uka.ipd.sdq.stoex.analyser.visitors.NonProbabilisticExpressionInferTypeVisitor;\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n \n @SuppressWarnings(\"restriction\")\n@@ -47,7 +47,7 @@\n     @Inject\n     private PCMStoexParser parser;\n \n-    private final TypeEnum expectedType;\n+    private final StoexContextProvidingAdapterImpl contextProvider = new StoexContextProvidingAdapterImpl();\n \n     private EmbeddedEditorModelAccess modelAccess;\n \n@@ -56,12 +56,12 @@\n     private Expression result = null;\n \n     private String resultString = null;\n-    \n+\n     private String title = \"Edit a stochastic expression\";\n \n     public StoExEditDialogImpl(Shell parentShell, TypeEnum expectedType) {\n         super(parentShell);\n-        this.expectedType = expectedType;\n+        contextProvider.setExpectedType(expectedType);\n         setHelpAvailable(true);\n     }\n \n@@ -87,13 +87,14 @@ public String getResultString() {\n \n     @Override\n     protected Control createDialogArea(Composite parent) {\n-        PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, \"org.palladiosimulator.pcm.help.stoexdialog\");\n+        PlatformUI.getWorkbench()\n+            .getHelpSystem()\n+            .setHelp(parent, \"org.palladiosimulator.pcm.help.stoexdialog\");\n         final var composite = (Composite) super.createDialogArea(parent);\n-        final var extendedValidator = new TypeExtendedResourceValidator(originalValidator,\n-                new NonProbabilisticExpressionInferTypeVisitor(), expectedType);\n+        final var observableValidator = new ObservableResourceValidator(originalValidator);\n         final var embeddedEditor = embeddedEditorFactory.newEditor(editedResourceProvider)\n             .showErrorAndWarningAnnotations()\n-            .withResourceValidator(extendedValidator)\n+            .withResourceValidator(observableValidator)\n             .withParent(composite);\n         modelAccess = embeddedEditor.createPartialEditor();\n         configuration.getHighlightingHelper()\n@@ -103,7 +104,13 @@ protected Control createDialogArea(Composite parent) {\n             .setFont(JFaceResources.getFont(JFaceResources.TEXT_FONT));\n         embeddedEditor.getDocument()\n             .set(serialize(initialExpression));\n-        extendedValidator.addValidationListener(this::processValidationResult);\n+        observableValidator.addValidationListener(this::processValidationResult);\n+        embeddedEditor.getDocument()\n+            .readOnly(resource -> {\n+                resource.eAdapters()\n+                    .add(contextProvider);\n+                return contextProvider;\n+            });\n         composite.pack();\n         return composite;\n     }\n@@ -148,9 +155,9 @@ protected void setResultVariables() {\n     }\n \n     protected void processValidationResult(final Collection<Issue> issues) {\n-        final var okButton = getButton(IDialogConstants.OK_ID);\n         Display.getDefault()\n             .asyncExec(() -> {\n+                final var okButton = getButton(IDialogConstants.OK_ID);\n                 if (issues.isEmpty()) {\n                     okButton.setEnabled(true);\n                 } else {\n@@ -159,4 +166,9 @@ protected void processValidationResult(final Collection<Issue> issues) {\n             });\n     }\n \n+    @Override\n+    public void setContext(RandomVariable context) {\n+        contextProvider.setStoexContainer(context);\n+    }\n+\n }"
  },
  {
    "sha": "2ea8a440078d5f4e6dbe408f46ed66aed8a3afaa",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoexContextProvidingAdapterImpl.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoexContextProvidingAdapterImpl.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoexContextProvidingAdapterImpl.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/StoexContextProvidingAdapterImpl.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -0,0 +1,67 @@\n+package org.palladiosimulator.editors.commons.dialogs.stoex.impl;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.emf.common.notify.Notification;\n+import org.eclipse.emf.common.notify.Notifier;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.editors.commons.dialogs.stoex.StoExContextProvidingAdapter;\n+\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+public class StoexContextProvidingAdapterImpl implements StoExContextProvidingAdapter {\n+\n+    private RandomVariable stoexContainer;\n+    private TypeEnum expectedType;\n+    private Notifier target;\n+\n+    public Notifier getTarget() {\n+        return target;\n+    }\n+\n+    public void notifyChanged(Notification notification) {\n+    }\n+\n+    public void setTarget(Notifier newTarget) {\n+        target = newTarget;\n+    }\n+\n+    @Override\n+    public boolean isAdapterForType(Object type) {\n+        return type == StoexContextProvider.class;\n+    }\n+\n+    @Override\n+    public void setStoexContainer(RandomVariable stoexContainer) {\n+        this.stoexContainer = stoexContainer;\n+    }\n+\n+    @Override\n+    public StoexContext getContext(Resource resource) {\n+        return createStoexContext(stoexContainer, expectedType);\n+    }\n+\n+    protected static StoexContext createStoexContext(RandomVariable stoexContainer, TypeEnum expectedType) {\n+        return new StoexContext() {\n+\n+            @Override\n+            public Optional<RandomVariable> getContainer() {\n+                return Optional.ofNullable(stoexContainer);\n+            }\n+\n+            @Override\n+            public Optional<TypeEnum> getExpectedType() {\n+                return Optional.ofNullable(expectedType);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void setExpectedType(TypeEnum expectedType) {\n+        this.expectedType = expectedType;\n+    }\n+\n+}"
  },
  {
    "sha": "ac0e9d8552af9e159e2f1ff6da7a25794e2e27a4",
    "filename": "bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/TypeExtendedResourceValidator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 143,
    "changes": 143,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/aeed78bb91822998bacfba3979ca480f37899772/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/TypeExtendedResourceValidator.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/aeed78bb91822998bacfba3979ca480f37899772/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/TypeExtendedResourceValidator.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/bundles/org.palladiosimulator.editors.commons.dialogs/src/org/palladiosimulator/editors/commons/dialogs/stoex/impl/TypeExtendedResourceValidator.java?ref=aeed78bb91822998bacfba3979ca480f37899772",
    "patch": "@@ -1,143 +0,0 @@\n-package org.palladiosimulator.editors.commons.dialogs.stoex.impl;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import org.eclipse.emf.common.util.URI;\n-import org.eclipse.emf.ecore.resource.Resource;\n-import org.eclipse.xtext.diagnostics.Severity;\n-import org.eclipse.xtext.service.OperationCanceledError;\n-import org.eclipse.xtext.util.CancelIndicator;\n-import org.eclipse.xtext.validation.CheckMode;\n-import org.eclipse.xtext.validation.CheckType;\n-import org.eclipse.xtext.validation.IResourceValidator;\n-import org.eclipse.xtext.validation.Issue;\n-\n-import de.uka.ipd.sdq.stoex.Expression;\n-import de.uka.ipd.sdq.stoex.analyser.exceptions.ExpectedTypeMismatchIssue;\n-import de.uka.ipd.sdq.stoex.analyser.visitors.ExpressionInferTypeVisitor;\n-import de.uka.ipd.sdq.stoex.analyser.visitors.TypeCheckVisitor;\n-import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n-\n-public class TypeExtendedResourceValidator implements IResourceValidator {\n-\n-    private IResourceValidator originalValidator;\n-    private final Collection<Consumer<Collection<Issue>>> validationListeners = new ArrayList<>();\n-    private final ExpressionInferTypeVisitor typeVisitor;\n-    private final TypeEnum expectedType;\n-\n-    public TypeExtendedResourceValidator(IResourceValidator originalValidator, ExpressionInferTypeVisitor typeVisitor, TypeEnum expectedType) {\n-        this.originalValidator = originalValidator;\n-        this.typeVisitor = typeVisitor;\n-        this.expectedType = expectedType;\n-    }\n-\n-    @Override\n-    public List<Issue> validate(Resource resource, CheckMode mode, CancelIndicator indicator)\n-            throws OperationCanceledError {\n-        var issues = new ArrayList<>(originalValidator.validate(resource, mode, indicator));\n-        var additionalIssues = Optional.ofNullable(resource)\n-            .map(Resource::getContents)\n-            .filter(c -> !c.isEmpty())\n-            .map(c -> c.get(0))\n-            .filter(Expression.class::isInstance)\n-            .map(Expression.class::cast)\n-            .map(expr -> assertType(expr, typeVisitor, expectedType))\n-            .orElse(Collections.emptyList());\n-        issues.addAll(additionalIssues);\n-        notifyListeners(issues);\n-        return issues;\n-    }\n-    \n-    public void addValidationListener(Consumer<Collection<Issue>> listener) {\n-        validationListeners.add(listener);\n-    }\n-    \n-    protected void notifyListeners(Collection<Issue> issues) {\n-        validationListeners.forEach(listener -> listener.accept(issues));\n-    }\n-\n-    protected Collection<Issue> assertType(final Expression result, final ExpressionInferTypeVisitor typeVisitor,\n-            final TypeEnum expectedType) {\n-        if (!TypeCheckVisitor.typesCompatible(expectedType, typeVisitor.getType(result))) {\n-            var issue = new ExpectedTypeMismatchIssue(expectedType, typeVisitor.getType(result));\n-            return Collections.singletonList(convert(issue));\n-        }\n-        return Collections.emptyList();\n-    }\n-    \n-    protected Issue convert(ExpectedTypeMismatchIssue issue) {\n-        return new Issue() {\n-            \n-            @Override\n-            public boolean isSyntaxError() {\n-                return false;\n-            }\n-            \n-            @Override\n-            public URI getUriToProblem() {\n-                return null;\n-            }\n-            \n-            @Override\n-            public CheckType getType() {\n-                return CheckType.FAST;\n-            }\n-            \n-            @Override\n-            public Severity getSeverity() {\n-                return Severity.ERROR;\n-            }\n-            \n-            @Override\n-            public Integer getOffset() {\n-                return 0;\n-            }\n-            \n-            @Override\n-            public String getMessage() {\n-                return issue.getMessage();\n-            }\n-            \n-            @Override\n-            public Integer getLineNumberEnd() {\n-                return 0;\n-            }\n-            \n-            @Override\n-            public Integer getLineNumber() {\n-                return 0;\n-            }\n-            \n-            @Override\n-            public Integer getLength() {\n-                return 0;\n-            }\n-            \n-            @Override\n-            public String[] getData() {\n-                return new String[0];\n-            }\n-            \n-            @Override\n-            public Integer getColumnEnd() {\n-                return 0;\n-            }\n-            \n-            @Override\n-            public Integer getColumn() {\n-                return 0;\n-            }\n-            \n-            @Override\n-            public String getCode() {\n-                return \"TypeIncompatible\";\n-            }\n-        };\n-    }\n-\n-}"
  },
  {
    "sha": "735b066ebe08fcf410ff0f420eddd10691bb62c1",
    "filename": "tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/ObservableResourceValidatorTest.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/ObservableResourceValidatorTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/ObservableResourceValidatorTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/ObservableResourceValidatorTest.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -0,0 +1,81 @@\n+package org.palladiosimulator.editors.commons.dialogs.stoex;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.validation.CheckMode;\n+import org.eclipse.xtext.validation.IResourceValidator;\n+import org.eclipse.xtext.validation.Issue;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.palladiosimulator.editors.commons.dialogs.stoex.impl.ObservableResourceValidator;\n+\n+import tools.mdsd.library.standalone.initialization.StandaloneInitializationException;\n+import tools.mdsd.library.standalone.initialization.StandaloneInitializerBuilder;\n+\n+public class ObservableResourceValidatorTest {\n+\n+    private ObservableResourceValidator subject;\n+    private IResourceValidator validatorMock;\n+    private Resource resource;\n+\n+    @BeforeAll\n+    public static void init() throws StandaloneInitializationException {\n+        StandaloneInitializerBuilder.builder()\n+            .build()\n+            .init();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        validatorMock = mock(IResourceValidator.class);\n+        subject = new ObservableResourceValidator(validatorMock);\n+        resource = mock(Resource.class);\n+    }\n+\n+    @Test\n+    public void testReturnViolations() {\n+        List<Issue> expectedIssues = new ArrayList<>();\n+        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)).thenReturn(expectedIssues);\n+        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n+        assertThat(issues, is(equalTo(expectedIssues)));\n+    }\n+\n+    @Test\n+    public void testValidationListenerWithoutIssues() {\n+        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n+            .thenReturn(Collections.emptyList());\n+        @SuppressWarnings(\"unchecked\")\n+        var listener = mock(((Class<Consumer<Collection<Issue>>>) ((Class<?>) Consumer.class)));\n+        subject.addValidationListener(listener);\n+        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n+        verify(listener).accept(issues);\n+    }\n+\n+    @Test\n+    public void testValidationListenerWithIssues() {\n+        final var originalIssue = mock(Issue.class);\n+        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n+            .thenReturn(Arrays.asList(originalIssue));\n+        @SuppressWarnings(\"unchecked\")\n+        var listener = mock(((Class<Consumer<Collection<Issue>>>) ((Class<?>) Consumer.class)));\n+        subject.addValidationListener(listener);\n+        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n+        verify(listener).accept(issues);\n+    }\n+\n+}"
  },
  {
    "sha": "91b44be614265b431ec15d0f15d9fb8ffb13a873",
    "filename": "tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoexContextProvidingAdapterImplTest.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/c54355e422d5bcfd50464e8b53329eaad6600de2/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoexContextProvidingAdapterImplTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/c54355e422d5bcfd50464e8b53329eaad6600de2/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoexContextProvidingAdapterImplTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/StoexContextProvidingAdapterImplTest.java?ref=c54355e422d5bcfd50464e8b53329eaad6600de2",
    "patch": "@@ -0,0 +1,70 @@\n+package org.palladiosimulator.editors.commons.dialogs.stoex;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.emf.common.notify.Notifier;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProviderImpl;\n+import org.palladiosimulator.editors.commons.dialogs.stoex.impl.StoexContextProvidingAdapterImpl;\n+\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+public class StoexContextProvidingAdapterImplTest {\n+\n+    private StoexContextProvidingAdapterImpl subject;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.subject = new StoexContextProvidingAdapterImpl();\n+    }\n+\n+    @Test\n+    public void testSetTarget() {\n+        Notifier expectedTarget = mock(Notifier.class);\n+        subject.setTarget(expectedTarget);\n+        Notifier actualTarget = subject.getTarget();\n+        assertEquals(expectedTarget, actualTarget);\n+    }\n+\n+    @Test\n+    public void testIsAdapterFor() {\n+        assertTrue(subject.isAdapterForType(StoexContextProvider.class));\n+        assertFalse(subject.isAdapterForType(StoexContextProviderImpl.class));\n+    }\n+\n+    @Test\n+    public void testGetEmptyContext() {\n+        StoexContext context = subject.getContext(null);\n+        assertEquals(Optional.empty(), context.getContainer());\n+        assertEquals(Optional.empty(), context.getExpectedType());\n+    }\n+\n+    @Test\n+    public void testSetContainer() {\n+        RandomVariable expectedContainer = mock(RandomVariable.class);\n+        subject.setStoexContainer(expectedContainer);\n+\n+        StoexContext context = subject.getContext(null);\n+        assertEquals(Optional.of(expectedContainer), context.getContainer());\n+        assertEquals(Optional.empty(), context.getExpectedType());\n+    }\n+\n+    @Test\n+    public void testSetExpectedType() {\n+        TypeEnum expectedType = TypeEnum.AUX_FUNCTION;\n+        subject.setExpectedType(expectedType);\n+\n+        StoexContext context = subject.getContext(null);\n+        assertEquals(Optional.empty(), context.getContainer());\n+        assertEquals(Optional.of(expectedType), context.getExpectedType());\n+    }\n+}"
  },
  {
    "sha": "17c68f8eae80b226515523c69d20152ae6708394",
    "filename": "tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/TypeExtendedResourceValidatorTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 201,
    "changes": 201,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/blob/aeed78bb91822998bacfba3979ca480f37899772/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/TypeExtendedResourceValidatorTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Editors-Commons/raw/aeed78bb91822998bacfba3979ca480f37899772/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/TypeExtendedResourceValidatorTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Editors-Commons/contents/tests/org.palladiosimulator.editors.commons.dialogs.tests/src/org/palladiosimulator/editors/commons/dialogs/stoex/TypeExtendedResourceValidatorTest.java?ref=aeed78bb91822998bacfba3979ca480f37899772",
    "patch": "@@ -1,201 +0,0 @@\n-package org.palladiosimulator.editors.commons.dialogs.stoex;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.hasItem;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.UUID;\n-import java.util.function.Consumer;\n-\n-import org.eclipse.emf.common.util.URI;\n-import org.eclipse.emf.ecore.resource.Resource;\n-import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n-import org.eclipse.xtext.diagnostics.Severity;\n-import org.eclipse.xtext.util.CancelIndicator;\n-import org.eclipse.xtext.validation.CheckMode;\n-import org.eclipse.xtext.validation.CheckType;\n-import org.eclipse.xtext.validation.IResourceValidator;\n-import org.eclipse.xtext.validation.Issue;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.palladiosimulator.editors.commons.dialogs.stoex.impl.TypeExtendedResourceValidator;\n-\n-import de.uka.ipd.sdq.stoex.Expression;\n-import de.uka.ipd.sdq.stoex.StoexFactory;\n-import de.uka.ipd.sdq.stoex.analyser.visitors.ExpressionInferTypeVisitor;\n-import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n-import tools.mdsd.library.standalone.initialization.StandaloneInitializationException;\n-import tools.mdsd.library.standalone.initialization.StandaloneInitializerBuilder;\n-\n-public class TypeExtendedResourceValidatorTest {\n-\n-    private TypeExtendedResourceValidator subject;\n-    private IResourceValidator validatorMock;\n-    private ExpressionInferTypeVisitor inferTypeVisitor;\n-    private Resource resource;\n-\n-    private static class SimpleIssue implements Issue {\n-\n-        private final String message;\n-        private final boolean isSyntaxError;\n-\n-        public SimpleIssue(String message, boolean isSyntaxError) {\n-            this.message = message;\n-            this.isSyntaxError = isSyntaxError;\n-        }\n-\n-        @Override\n-        public Severity getSeverity() {\n-            return Severity.WARNING;\n-        }\n-\n-        @Override\n-        public String getMessage() {\n-            return message;\n-        }\n-\n-        @Override\n-        public String getCode() {\n-            return \"TEST\";\n-        }\n-\n-        @Override\n-        public CheckType getType() {\n-            return CheckType.NORMAL;\n-        }\n-\n-        @Override\n-        public URI getUriToProblem() {\n-            return null;\n-        }\n-\n-        @Override\n-        public Integer getLineNumber() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public Integer getLineNumberEnd() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public Integer getColumn() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public Integer getColumnEnd() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public Integer getOffset() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public Integer getLength() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean isSyntaxError() {\n-            return isSyntaxError;\n-        }\n-\n-        @Override\n-        public String[] getData() {\n-            return new String[0];\n-        }\n-\n-    }\n-\n-    @BeforeAll\n-    public static void init() throws StandaloneInitializationException {\n-        StandaloneInitializerBuilder.builder()\n-            .build()\n-            .init();\n-    }\n-\n-    @BeforeEach\n-    public void setup() {\n-        validatorMock = mock(IResourceValidator.class);\n-        inferTypeVisitor = mock(ExpressionInferTypeVisitor.class);\n-        subject = new TypeExtendedResourceValidator(validatorMock, inferTypeVisitor, TypeEnum.INT);\n-        resource = new ResourceSetImpl().createResource(URI.createURI(\"virtual:/\" + UUID.randomUUID()\n-            .toString() + \".xmi\"));\n-        var expression = StoexFactory.eINSTANCE.createIntLiteral();\n-        expression.setValue(2);\n-        resource.getContents()\n-            .add(expression);\n-    }\n-\n-    @Test\n-    public void testNoViolations() {\n-        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n-            .thenReturn(Collections.emptyList());\n-        when(inferTypeVisitor.getType((Expression) resource.getContents()\n-            .get(0))).thenReturn(TypeEnum.ANY);\n-        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n-        assertThat(issues, is(empty()));\n-    }\n-\n-    @Test\n-    public void testOriginalViolations() {\n-        final var originalIssue = new SimpleIssue(\"TEST\", true);\n-        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n-            .thenReturn(Arrays.asList(originalIssue));\n-        when(inferTypeVisitor.getType((Expression) resource.getContents()\n-            .get(0))).thenReturn(TypeEnum.ANY);\n-        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n-        assertThat(issues.size(), is(1));\n-        assertThat(issues, hasItem(originalIssue));\n-    }\n-\n-    @Test\n-    public void testTypeMismatch() {\n-        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n-            .thenReturn(Collections.emptyList());\n-        when(inferTypeVisitor.getType((Expression) resource.getContents()\n-            .get(0))).thenReturn(TypeEnum.BOOL);\n-        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n-        assertThat(issues.size(), is(1));\n-    }\n-\n-    @Test\n-    public void testValidationListenerWithoutIssues() {\n-        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n-            .thenReturn(Collections.emptyList());\n-        when(inferTypeVisitor.getType((Expression) resource.getContents()\n-            .get(0))).thenReturn(TypeEnum.ANY);\n-        @SuppressWarnings(\"unchecked\")\n-        var listener = mock(((Class<Consumer<Collection<Issue>>>) ((Class<?>) Consumer.class)));\n-        subject.addValidationListener(listener);\n-        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n-        verify(listener).accept(issues);\n-    }\n-\n-    @Test\n-    public void testValidationListenerWithIssues() {\n-        final var originalIssue = new SimpleIssue(\"TEST\", true);\n-        when(validatorMock.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl))\n-            .thenReturn(Arrays.asList(originalIssue));\n-        when(inferTypeVisitor.getType((Expression) resource.getContents()\n-            .get(0))).thenReturn(TypeEnum.ANY);\n-        @SuppressWarnings(\"unchecked\")\n-        var listener = mock(((Class<Consumer<Collection<Issue>>>) ((Class<?>) Consumer.class)));\n-        subject.addValidationListener(listener);\n-        var issues = subject.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);\n-        verify(listener).accept(issues);\n-    }\n-\n-}"
  }
]
