[
  {
    "sha": "b5f44867182c1b1f9faaa2e6951ddbdd9247766b",
    "filename": "bundles/org.palladiosimulator.pcm.stoex.ui/build.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/build.properties",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/build.properties",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/bundles/org.palladiosimulator.pcm.stoex.ui/build.properties?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -2,5 +2,6 @@ source.. = src/,\\\n            src-gen/\n bin.includes = .,\\\n                META-INF/,\\\n+               templates/,\\\n                plugin.xml\n bin.excludes = **/*.xtend"
  },
  {
    "sha": "7bc1e11febfae40e9bf9e20fcde4dfe86a7d5283",
    "filename": "bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProvider.java",
    "status": "modified",
    "additions": 240,
    "deletions": 2,
    "changes": 242,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProvider.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProvider.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProvider.java?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -3,10 +3,248 @@\n  */\n package org.palladiosimulator.pcm.stoex.ui.contentassist;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.jface.text.contentassist.ICompletionProposal;\n+import org.eclipse.xtext.Assignment;\n+import org.eclipse.xtext.Keyword;\n+import org.eclipse.xtext.RuleCall;\n+import org.eclipse.xtext.nodemodel.INode;\n+import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.pcm.parameter.CharacterisedVariable;\n+import org.palladiosimulator.pcm.repository.CollectionDataType;\n+import org.palladiosimulator.pcm.repository.CompositeDataType;\n+import org.palladiosimulator.pcm.repository.DataType;\n+import org.palladiosimulator.pcm.repository.EventType;\n+import org.palladiosimulator.pcm.repository.InnerDeclaration;\n+import org.palladiosimulator.pcm.repository.OperationSignature;\n+import org.palladiosimulator.pcm.repository.Parameter;\n+import org.palladiosimulator.pcm.repository.Signature;\n+import org.palladiosimulator.pcm.seff.AbstractAction;\n+import org.palladiosimulator.pcm.seff.ExternalCallAction;\n+import org.palladiosimulator.pcm.seff.ServiceEffectSpecification;\n+import org.palladiosimulator.pcm.usagemodel.AbstractUserAction;\n+import org.palladiosimulator.pcm.usagemodel.EntryLevelSystemCall;\n+\n+import com.google.inject.Inject;\n+\n+import de.uka.ipd.sdq.stoex.NamespaceReference;\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.VariableReference;\n \n /**\n- * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist\n- * on how to customize the content assistant.\n+ * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist on how to\n+ * customize the content assistant.\n  */\n public class PCMStoexProposalProvider extends AbstractPCMStoexProposalProvider {\n+\n+    @Inject\n+    private StoexContextProvider contextProvider;\n+\n+    @Override\n+    public void completeCharacterisedVariable_Id_Variable(EObject model, Assignment assignment,\n+            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {\n+        super.completeCharacterisedVariable_Id_Variable(model, assignment, context, acceptor);\n+        getReferenceableVariableCompletions(context.getResource(), context).forEach(acceptor::accept);\n+    }\n+\n+    @Override\n+    public void complete_VariableReference(EObject model, RuleCall ruleCall, ContentAssistContext context,\n+            ICompletionProposalAcceptor acceptor) {\n+        super.complete_VariableReference(model, ruleCall, context, acceptor);\n+        if (lastKeywordWasStop(context)) {\n+            acceptor.accept(createCompletionProposal(\"BYTESIZE\",\n+                    \"BYTESIZE - Characterise the memory footprint in bytes\", null, context));\n+            acceptor.accept(createCompletionProposal(\"NUMBER_OF_ELEMENTS\",\n+                    \"NUMBER_OF_ELEMENTS - Characterise the number of elements of a collection datatype\", null,\n+                    context));\n+            acceptor.accept(createCompletionProposal(\"STRUCTURE\",\n+                    \"STRUCTURE - Characterise the structure of a datastructure\", null, context));\n+            acceptor.accept(createCompletionProposal(\"VALUE\", \"VALUE - Characterise the actual value of a variable\",\n+                    null, context));\n+            acceptor\n+                .accept(createCompletionProposal(\"TYPE\", \"TYPE - Characterise the type of a variable\", null, context));\n+        }\n+    }\n+\n+    @Override\n+    public void complete_NamespaceReference(EObject model, RuleCall ruleCall, ContentAssistContext context,\n+            ICompletionProposalAcceptor acceptor) {\n+        super.complete_NamespaceReference(model, ruleCall, context, acceptor);\n+\n+        var currentNode = Optional.ofNullable(context.getCurrentNode());\n+        var currentSemantic = Optional.ofNullable(context.getCurrentNode())\n+            .map(INode::getSemanticElement);\n+        var currentCharacterisedVariable = cast(currentSemantic, CharacterisedVariable.class);\n+        var currentVariableReference = cast(currentSemantic, VariableReference.class);\n+        var previousText = currentNode.map(INode::getPreviousSibling)\n+            .map(INode::getText);\n+        var stoexContext = contextProvider.getContext(context.getResource());\n+\n+        // get full qualified name of current reference\n+        List<String> referenceParts = new ArrayList<>();\n+        if (currentCharacterisedVariable.isPresent() && previousText.isPresent()) {\n+            // current text ends with dot -> use previousText\n+            referenceParts = Arrays.asList(previousText.get()\n+                .split(\"\\\\.\"));\n+        } else if (currentVariableReference.isPresent()) {\n+            // we are in the middle of building a namespace reference -> use semantic element\n+            EObject current = currentVariableReference.get();\n+            while (current.eContainer() instanceof NamespaceReference) {\n+                current = current.eContainer();\n+                referenceParts.add(((NamespaceReference) current).getReferenceName());\n+            }\n+            Collections.reverse(referenceParts);\n+        }\n+\n+        // construct completions based on data type of reference\n+        if (!referenceParts.isEmpty()) {\n+            String parameterName = referenceParts.get(0);\n+            Collection<Parameter> parameters = findServiceParameters(stoexContext);\n+            Optional<Parameter> parameter = parameters.stream()\n+                .filter(p -> p.getParameterName()\n+                    .equals(parameterName))\n+                .findFirst();\n+            if (parameter.isEmpty()) {\n+                return;\n+            }\n+\n+            DataType currentDataType = parameter.get()\n+                .getDataType__Parameter();\n+            for (int i = 1; i < referenceParts.size(); ++i) {\n+                String part = referenceParts.get(i);\n+                if (currentDataType instanceof CollectionDataType && \"INNER\".equals(part)) {\n+                    currentDataType = ((CollectionDataType) currentDataType).getInnerType_CollectionDataType();\n+                } else if (currentDataType instanceof CompositeDataType) {\n+                    currentDataType = ((CompositeDataType) currentDataType).getInnerDeclaration_CompositeDataType()\n+                        .stream()\n+                        .filter(d -> part.equals(d.getEntityName()))\n+                        .map(InnerDeclaration::getDatatype_InnerDeclaration)\n+                        .findFirst()\n+                        .orElse(null);\n+                } else {\n+                    currentDataType = null;\n+                }\n+            }\n+\n+            if (currentDataType instanceof CollectionDataType) {\n+                acceptor.accept(createCompletionProposal(\"INNER\", \"INNER - inner data type\", null, context));\n+            } else if (currentDataType instanceof CompositeDataType) {\n+                ((CompositeDataType) currentDataType).getInnerDeclaration_CompositeDataType()\n+                    .stream()\n+                    .map(InnerDeclaration::getEntityName)\n+                    .forEach(name -> acceptor\n+                        .accept(createCompletionProposal(name, name + \" - inner declaration\", null, context)));\n+            }\n+        }\n+\n+    }\n+\n+    protected <T> Optional<T> cast(Optional<?> optional, Class<T> clazz) {\n+        return optional.filter(clazz::isInstance)\n+            .map(clazz::cast);\n+    }\n+\n+    protected boolean lastKeywordWasStop(ContentAssistContext context) {\n+        return Optional.ofNullable(context.getLastCompleteNode())\n+            .map(INode::getGrammarElement)\n+            .filter(Keyword.class::isInstance)\n+            .map(Keyword.class::cast)\n+            .map(Keyword::getValue)\n+            .map(\".\"::equals)\n+            .orElse(false);\n+    }\n+\n+    protected Collection<ICompletionProposal> getReferenceableVariableCompletions(Resource resource,\n+            ContentAssistContext cac) {\n+        Collection<ICompletionProposal> proposals = new ArrayList<>();\n+        StoexContext context = contextProvider.getContext(resource);\n+        Optional<RandomVariable> container = context.getContainer();\n+\n+        findServiceParameters(context).stream()\n+            .map(Parameter::getParameterName)\n+            .map(name -> createCompletionProposal(name, name + \" - Signature Parameter\", null, cac))\n+            .forEach(proposals::add);\n+\n+        // test if we can add the RETURN variable\n+        Optional<EntryLevelSystemCall> elscAction = container\n+            .flatMap(c -> findSelfOrParentOfType(c, AbstractUserAction.class))\n+            .filter(EntryLevelSystemCall.class::isInstance)\n+            .map(EntryLevelSystemCall.class::cast);\n+        if (elscAction.isPresent() && container.isPresent()) {\n+            EntryLevelSystemCall elsc = elscAction.get();\n+            RandomVariable rv = container.get();\n+            boolean isOutputCharacterisation = elsc.getOutputParameterUsages_EntryLevelSystemCall()\n+                .stream()\n+                .anyMatch(vu -> EcoreUtil.isAncestor(vu, rv));\n+            if (isOutputCharacterisation) {\n+                proposals.add(createCompletionProposal(\"RETURN\", \"RETURN - Call Result\", null, cac));\n+            }\n+        }\n+        Optional<ExternalCallAction> ecaAction = container\n+                .flatMap(c -> findSelfOrParentOfType(c, AbstractAction.class))\n+                .filter(ExternalCallAction.class::isInstance)\n+                .map(ExternalCallAction.class::cast);\n+            if (ecaAction.isPresent() && container.isPresent()) {\n+                ExternalCallAction eca = ecaAction.get();\n+                RandomVariable rv = container.get();\n+                boolean isOutputCharacterisation = eca.getReturnVariableUsage__CallReturnAction()\n+                    .stream()\n+                    .anyMatch(vu -> EcoreUtil.isAncestor(vu, rv));\n+                if (isOutputCharacterisation) {\n+                    proposals.add(createCompletionProposal(\"RETURN\", \"RETURN - Call Result\", null, cac));\n+                }\n+            }\n+\n+        // we could also list all available variables (SetVariableAction, outputs of\n+        // EntryLevelSystemCall)\n+\n+        return proposals;\n+    }\n+\n+    protected Collection<Parameter> findServiceParameters(StoexContext context) {\n+        Collection<Parameter> parameters = new ArrayList<>();\n+\n+        Optional<Signature> signature = context.getContainer()\n+            .flatMap(c -> findSelfOrParentOfType(c, ServiceEffectSpecification.class))\n+            .map(ServiceEffectSpecification::getDescribedService__SEFF);\n+\n+        // parameters of OperationSignature can always be referenced\n+        Optional<OperationSignature> operationalSignature = signature.filter(OperationSignature.class::isInstance)\n+            .map(OperationSignature.class::cast);\n+        operationalSignature.map(OperationSignature::getParameters__OperationSignature)\n+            .ifPresent(parameters::addAll);\n+\n+        // parameter of EventType can always be referenced\n+        Optional<EventType> eventType = signature.filter(EventType.class::isInstance)\n+            .map(EventType.class::cast);\n+        eventType.map(EventType::getParameter__EventType)\n+            .ifPresent(parameters::add);\n+\n+        return parameters;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected static <T> Optional<T> findSelfOrParentOfType(EObject self, Class<T> wantedType) {\n+        EObject current = self;\n+        while (current != null) {\n+            if (wantedType.isInstance(current)) {\n+                return Optional.of((T) current);\n+            }\n+            current = current.eContainer();\n+        }\n+        return Optional.empty();\n+    }\n+\n }"
  },
  {
    "sha": "a35f3af21ed1699516181acf2b5fdf462c5404b1",
    "filename": "bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/services/StoexEditedResourceProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/services/StoexEditedResourceProvider.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/services/StoexEditedResourceProvider.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/bundles/org.palladiosimulator.pcm.stoex.ui/src/org/palladiosimulator/pcm/stoex/ui/services/StoexEditedResourceProvider.java?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -13,7 +13,7 @@\n     @Override\n     public XtextResource createResource() {\n         final var rs = new XtextResourceSet();\n-        final var tmpURI = URI.createURI(\"virtual:/\" + UUID.randomUUID().toString() + \".stoex\");\n+        final var tmpURI = URI.createURI(\"virtual:/\" + UUID.randomUUID().toString() + \".pcmstoex\");\n         return (XtextResource) rs.createResource(tmpURI);\n     }\n "
  },
  {
    "sha": "11db286e3a190bc1d7ae106603472b85112461d3",
    "filename": "bundles/org.palladiosimulator.pcm.stoex.ui/templates/templates.xml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/templates/templates.xml",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm.stoex.ui/templates/templates.xml",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/bundles/org.palladiosimulator.pcm.stoex.ui/templates/templates.xml?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<templates>\n+\t<template autoinsert=\"true\"\n+\t\tcontext=\"org.palladiosimulator.commons.stoex.Stoex.ProbabilityMassFunction\"\n+\t\tdeleted=\"false\" description=\"Creates a boolean random variable\"\n+\t\tenabled=\"true\" id=\"boolPMF\" name=\"BoolPMF\">BoolPMF[(true;${p})(false;${q})]</template>\n+\t<template autoinsert=\"true\"\n+\t\tcontext=\"org.palladiosimulator.commons.stoex.Stoex.BoxedPDF\"\n+\t\tdeleted=\"false\"\n+\t\tdescription=\"Creates a double random variable (BoxedPDF)\"\n+\t\tenabled=\"true\" id=\"doublePDF\" name=\"DoublePDF\">DoublePDF[(${x};${p})(${y};${q})(${z};${r})]</template>\n+\t<template autoinsert=\"true\"\n+\t\tcontext=\"org.palladiosimulator.commons.stoex.Stoex.ProbabilityMassFunction\"\n+\t\tdeleted=\"false\" description=\"Creates a double random variable\"\n+\t\tenabled=\"true\" id=\"doublePMF\" name=\"DoublePMF\">DoublePMF[(${x};${p})(${y};${q})(${z};${r})]</template>\n+\t<template autoinsert=\"true\"\n+\t\tcontext=\"org.palladiosimulator.commons.stoex.Stoex.ProbabilityMassFunction\"\n+\t\tdeleted=\"false\" description=\"Creates an enum random variable\"\n+\t\tenabled=\"true\" id=\"enumPMF\" name=\"EnumPMF\">EnumPMF[(${x};${p})]</template>\n+\t<template autoinsert=\"true\"\n+\t\tcontext=\"org.palladiosimulator.commons.stoex.Stoex.ProbabilityMassFunction\"\n+\t\tdeleted=\"false\" description=\"Creates an integer random variable\"\n+\t\tenabled=\"true\" id=\"intPMF\" name=\"Insert IntPMF\">IntPMF[(${x};${p})(${y};${q})(${z};${r})]</template>\n+</templates>\n\\ No newline at end of file"
  },
  {
    "sha": "39b86ec2558a3dafff09c75e152edda828cb7b2c",
    "filename": "bundles/org.palladiosimulator.pcm/src/org/palladiosimulator/pcm/stoex/PCMStoexRuntimeModule.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm/src/org/palladiosimulator/pcm/stoex/PCMStoexRuntimeModule.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/bundles/org.palladiosimulator.pcm/src/org/palladiosimulator/pcm/stoex/PCMStoexRuntimeModule.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/bundles/org.palladiosimulator.pcm/src/org/palladiosimulator/pcm/stoex/PCMStoexRuntimeModule.java?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -3,9 +3,17 @@\n  */\n package org.palladiosimulator.pcm.stoex;\n \n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProviderImpl;\n+\n /**\n- * Use this class to register components to be used at runtime / without the Equinox extension registry.\n+ * Use this class to register components to be used at runtime / without the Equinox extension\n+ * registry.\n  */\n public class PCMStoexRuntimeModule extends AbstractPCMStoexRuntimeModule {\n-    \n+\n+    public Class<? extends StoexContextProvider> bindStoexContextProvider() {\n+        return StoexContextProviderImpl.class;\n+    }\n+\n }"
  },
  {
    "sha": "8e3375ea9082a8631f003ee1876cefc8de97771f",
    "filename": "tests/org.palladiosimulator.pcm.stoex.tests/src/org/palladiosimulator/pcm/stoex/tests/PCMStoexParsingTest.xtend",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.tests/src/org/palladiosimulator/pcm/stoex/tests/PCMStoexParsingTest.xtend",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.tests/src/org/palladiosimulator/pcm/stoex/tests/PCMStoexParsingTest.xtend",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.tests/src/org/palladiosimulator/pcm/stoex/tests/PCMStoexParsingTest.xtend?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -26,6 +26,14 @@ class PCMStoexParsingTest {\n \t@Inject\n \tParseHelper<Expression> parseHelper\n \t\n+    @Test\n+    def void parseMax() {\n+        val result = parseHelper.parse('''Max ( 35374 * 10 , 60 * 196 * 2375646 + 60 * 196 * 13697006 ) / loopSize.VALUE''')\n+        Assertions.assertNotNull(result)\n+        val errors = result.eResource.errors\n+        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(\", \")»''')\n+    }\n+\t\n     @Test\n     def void testCharacterisedVariable() {\n         val result = parseHelper.parse('''"
  },
  {
    "sha": "8ba849f2da6d76dfa17f1b369db0e6bb9e55ca87",
    "filename": "tests/org.palladiosimulator.pcm.stoex.ui.tests/.classpath",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/.classpath",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/.classpath",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.ui.tests/.classpath?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -5,6 +5,11 @@\n \t\t\t<attribute name=\"test\" value=\"true\"/>\n \t\t</attributes>\n \t</classpathentry>\n+\t<classpathentry kind=\"src\" output=\"test-bin\" path=\"xtend-gen\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"/>\n+\t\t</attributes>\n+\t</classpathentry>\n \t<classpathentry kind=\"src\" output=\"test-bin\" path=\"src-gen\">\n \t\t<attributes>\n \t\t\t<attribute name=\"test\" value=\"true\"/>"
  },
  {
    "sha": "af282469ece2a56ddbf2f6f3d91a5cb201da6fa2",
    "filename": "tests/org.palladiosimulator.pcm.stoex.ui.tests/META-INF/MANIFEST.MF",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/META-INF/MANIFEST.MF",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/META-INF/MANIFEST.MF",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.ui.tests/META-INF/MANIFEST.MF?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -20,6 +20,7 @@ Require-Bundle: org.palladiosimulator.pcm.stoex.ui,\n  org.hamcrest.library;bundle-version=\"1.3.0\",\n  org.mockito;bundle-version=\"2.23.0\",\n  net.bytebuddy.byte-buddy;bundle-version=\"1.9.0\",\n- org.objenesis;bundle-version=\"2.6.0\"\n+ org.objenesis;bundle-version=\"2.6.0\",\n+ org.eclipse.xtext\n Bundle-RequiredExecutionEnvironment: JavaSE-11\n Export-Package: org.palladiosimulator.pcm.stoex.ui.tests;x-internal=true"
  },
  {
    "sha": "822076dfbe0178f1c0cc6ac564d6a925da26a923",
    "filename": "tests/org.palladiosimulator.pcm.stoex.ui.tests/build.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/build.properties",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/build.properties",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.ui.tests/build.properties?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -1,5 +1,6 @@\n source.. = src/,\\\n-           src-gen/\n+           src-gen/,\\\n+           xtend-gen\n bin.includes = .,\\\n                META-INF/\n bin.excludes = **/*.xtend"
  },
  {
    "sha": "ffeaf78c04689d05f98546d7f3529099bbed9675",
    "filename": "tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/ModelCreator.xtend",
    "status": "added",
    "additions": 171,
    "deletions": 0,
    "changes": 171,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/ModelCreator.xtend",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/ModelCreator.xtend",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/ModelCreator.xtend?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -0,0 +1,171 @@\n+package org.palladiosimulator.pcm.stoex.ui.contentassist\n+\n+import org.palladiosimulator.pcm.core.CoreFactory\n+import org.palladiosimulator.pcm.parameter.ParameterFactory\n+import org.palladiosimulator.pcm.repository.RepositoryFactory\n+import org.palladiosimulator.pcm.seff.ResourceDemandingSEFF\n+import org.palladiosimulator.pcm.seff.SeffFactory\n+import org.palladiosimulator.pcm.seff.seff_performance.SeffPerformanceFactory\n+import org.palladiosimulator.pcm.usagemodel.ScenarioBehaviour\n+import org.palladiosimulator.pcm.usagemodel.UsagemodelFactory\n+\n+class ModelCreator {\n+    \n+    static extension SeffFactory seffFactory = SeffFactory.eINSTANCE\n+    static extension RepositoryFactory repositoryFactory = RepositoryFactory.eINSTANCE\n+    static extension SeffPerformanceFactory seffPerformanceFactory = SeffPerformanceFactory.eINSTANCE\n+    static extension CoreFactory coreFactory = CoreFactory.eINSTANCE\n+    static extension ParameterFactory parameterFactory = ParameterFactory.eINSTANCE\n+    static extension UsagemodelFactory usageModelFactory = UsagemodelFactory.eINSTANCE\n+    \n+    static def createSeffWithOneInternalAction() {\n+        val dummyDataType = createCompositeDataType => [\n+            entityName = \"dummyType\"\n+        ]\n+        val collectionDataType = createCollectionDataType => [\n+             entityName = \"collectionDataType\"\n+             innerType_CollectionDataType = dummyDataType\n+        ]\n+        val deepNestedDataType = createCompositeDataType => [\n+            entityName = \"nestedDataType\"\n+            innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                entityName = \"foo1\"\n+                datatype_InnerDeclaration = createCompositeDataType => [\n+                    entityName = \"foo1_1\"\n+                    innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                        entityName = \"foo1_1_1\"\n+                        datatype_InnerDeclaration = dummyDataType\n+                    ]\n+                ]\n+            ]\n+            innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                entityName = \"foo2\"\n+                datatype_InnerDeclaration = createCompositeDataType => [\n+                    entityName = \"foo2_1\"\n+                    innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                        entityName = \"foo2_1_1\"\n+                        datatype_InnerDeclaration = dummyDataType\n+                    ]\n+                ]\n+            ]\n+            innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                entityName = \"foo3\"\n+                datatype_InnerDeclaration = collectionDataType\n+            ]\n+        ]\n+        val collectionForCompositeDataType = createCollectionDataType => [\n+            entityName = \"CollectionOfComposite\"\n+            innerType_CollectionDataType = createCompositeDataType => [\n+                entityName = \"CollectedComposition\"\n+                    innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                        entityName = \"foo1\"\n+                        datatype_InnerDeclaration = dummyDataType\n+                    ]\n+                    innerDeclaration_CompositeDataType += createInnerDeclaration => [\n+                        entityName = \"foo2\"\n+                        datatype_InnerDeclaration = dummyDataType\n+                    ]\n+            ]\n+        ]\n+\n+        createResourceDemandingSEFF => [\n+            describedService__SEFF = createOperationSignature => [\n+                entityName = \"service1\"\n+                parameters__OperationSignature += createParameter => [\n+                    parameterName = \"paramSimple\"\n+                    dataType__Parameter = dummyDataType\n+                ]\n+                parameters__OperationSignature += createParameter => [\n+                    parameterName = \"paramNested\"\n+                    dataType__Parameter = deepNestedDataType\n+                ]\n+                parameters__OperationSignature += createParameter => [\n+                    parameterName = \"paramCollection\"\n+                    dataType__Parameter = collectionDataType\n+                ]\n+                parameters__OperationSignature += createParameter => [\n+                    parameterName = \"paramCollectionOfComposite\"\n+                    dataType__Parameter = collectionForCompositeDataType\n+                ]\n+                returnType__OperationSignature = dummyDataType\n+            ]\n+            steps_Behaviour += createStartAction\n+            steps_Behaviour += createInternalAction => [\n+                resourceDemand_Action += createParametricResourceDemand => [\n+                    specification_ParametericResourceDemand = createPCMRandomVariable\n+                ]\n+            ]\n+            steps_Behaviour += createStopAction\n+            linkSteps\n+        ]\n+        \n+    } \n+    \n+    static def createSeffWithOneExternalCallAction() {\n+        val dummyDataType = createCompositeDataType => [\n+            entityName = \"dummyType\"\n+        ]\n+        \n+        createResourceDemandingSEFF => [\n+            describedService__SEFF = createOperationSignature => [\n+                entityName = \"service1\"\n+                parameters__OperationSignature += createParameter => [\n+                    parameterName = \"paramFoo\"\n+                    dataType__Parameter = dummyDataType\n+                ]\n+                parameters__OperationSignature += createParameter => [\n+                    parameterName = \"paramBar\"\n+                    dataType__Parameter = dummyDataType\n+                ]\n+            ]\n+            steps_Behaviour += createStartAction\n+            steps_Behaviour += createExternalCallAction => [\n+                calledService_ExternalService = createOperationSignature => [\n+                    entityName = \"foo\"\n+                    returnType__OperationSignature = dummyDataType\n+                ]\n+                returnVariableUsage__CallReturnAction += createVariableUsage => [\n+                    variableCharacterisation_VariableUsage += createVariableCharacterisation => [\n+                        specification_VariableCharacterisation = createPCMRandomVariable\n+                    ]\n+                ]\n+            ]\n+            steps_Behaviour += createStopAction\n+            linkSteps\n+        ]\n+    }\n+    \n+    static def createScenarioBehaviorWithOneEntryLevelSystemCall() {\n+        val dummyDataType = createCompositeDataType => [\n+            entityName = \"dummyType\"\n+        ]\n+        createScenarioBehaviour => [\n+            actions_ScenarioBehaviour += createStart\n+            actions_ScenarioBehaviour += createEntryLevelSystemCall => [\n+                operationSignature__EntryLevelSystemCall = createOperationSignature => [\n+                    returnType__OperationSignature = dummyDataType\n+                ]\n+                outputParameterUsages_EntryLevelSystemCall += createVariableUsage => [\n+                    variableCharacterisation_VariableUsage += createVariableCharacterisation => [\n+                        specification_VariableCharacterisation = createPCMRandomVariable\n+                    ]\n+                ]\n+            ]\n+            actions_ScenarioBehaviour += createStop\n+            linkSteps\n+        ]\n+    }\n+    \n+    protected static def linkSteps(ResourceDemandingSEFF seff) {\n+        for (var i = 1; i < seff.steps_Behaviour.size; i++) {\n+            seff.steps_Behaviour.get(i).predecessor_AbstractAction = seff.steps_Behaviour.get(i-1)\n+        }\n+    }\n+    \n+    protected static def linkSteps(ScenarioBehaviour behavior) {\n+        for (var i = 1; i < behavior.actions_ScenarioBehaviour.size; i++) {\n+            behavior.actions_ScenarioBehaviour.get(i).predecessor = behavior.actions_ScenarioBehaviour.get(i-1)\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "51e2d32ec01766ac0d99f160220036e951c5db23",
    "filename": "tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProviderTest.java",
    "status": "added",
    "additions": 238,
    "deletions": 0,
    "changes": 238,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProviderTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProviderTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/contentassist/PCMStoexProposalProviderTest.java?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -0,0 +1,238 @@\n+package org.palladiosimulator.pcm.stoex.ui.contentassist;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Optional;\n+\n+import org.eclipse.emf.common.notify.Adapter;\n+import org.eclipse.emf.common.notify.Notification;\n+import org.eclipse.emf.common.notify.Notifier;\n+import org.eclipse.emf.common.util.TreeIterator;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.eclipse.xtext.ui.testing.ContentAssistProcessorTestBuilder;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.pcm.seff.ResourceDemandingSEFF;\n+import org.palladiosimulator.pcm.stoex.ui.tests.PCMStoexUiInjectorProvider;\n+import org.palladiosimulator.pcm.usagemodel.ScenarioBehaviour;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provider;\n+\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+@ExtendWith(InjectionExtension.class)\n+@InjectWith(PCMStoexUiInjectorProvider.class)\n+public class PCMStoexProposalProviderTest {\n+\n+    @Inject\n+    private Injector injector;\n+\n+    @Inject\n+    private Provider<XtextResourceSet> resourceSetProvider;\n+\n+    @Inject\n+    private FileExtensionProvider fileExtensionProvider;\n+\n+    private ContentAssistProcessorTestBuilder builder;\n+    private RandomVariable randomVariable;\n+    private TypeEnum expectedType;\n+\n+    public PCMStoexProposalProviderTest() {\n+        super();\n+    }\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        builder = new ContentAssistProcessorTestBuilder(injector, this::getAdaptedResourceFor);\n+        randomVariable = null;\n+        expectedType = null;\n+    }\n+\n+    @Test\n+    public void testSuggestSignatureParameters() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"param\");\n+        builder.assertProposal(\"paramSimple\");\n+        builder.assertProposal(\"paramNested\");\n+        builder.assertProposal(\"paramCollection\");\n+        builder.assertProposal(\"paramCollectionOfComposite\");\n+    }\n+    \n+    @Test\n+    public void testCompositeDataType() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"paramNested.\");\n+        builder.assertProposal(\"foo1\");\n+        builder.assertProposal(\"foo2\");\n+        builder.assertProposal(\"foo3\");\n+    }\n+    \n+    @Test\n+    public void testCompositeDataTypeTypedIncomplete() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"paramNested.fo\");\n+        builder.assertProposal(\"foo1\");\n+        builder.assertProposal(\"foo2\");\n+        builder.assertProposal(\"foo3\");\n+    }\n+    \n+    @Test\n+    public void testNestedDataTypes() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        var foo1 = builder.insert(\"paramNested.foo1.\");\n+        foo1.assertProposal(\"foo1_1_1\");\n+        var foo2 = builder.insert(\"paramNested.foo2.\");\n+        foo2.assertProposal(\"foo2_1_1\");\n+        var foo3 = builder.insert(\"paramNested.foo3.\");\n+        foo3.assertProposal(\"INNER\");\n+    }\n+    \n+    @Test\n+    public void testNestedDataTypesTypedIncomplete() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        var foo1 = builder.insert(\"paramNested.foo1.f\");\n+        foo1.assertProposal(\"foo1_1_1\");\n+        var foo2 = builder.insert(\"paramNested.foo2.f\");\n+        foo2.assertProposal(\"foo2_1_1\");\n+        var foo3 = builder.insert(\"paramNested.foo3.I\");\n+        foo3.assertProposal(\"INNER\");\n+    }\n+    \n+    @Test\n+    public void testCollectionDataType() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"paramCollection.\");\n+        builder.assertProposal(\"INNER\");\n+    }\n+    \n+    @Test\n+    public void testCollectionDataTypeOfComposite() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"paramCollectionOfComposite.INNER.\");\n+        builder.assertProposal(\"foo1\");\n+        builder.assertProposal(\"foo2\");\n+    }\n+\n+    @Test\n+    public void testSuggestVariableCharacterisations() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneInternalAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"paramSimple.\");\n+        builder.assertProposal(\"BYTESIZE\");\n+        builder.assertProposal(\"NUMBER_OF_ELEMENTS\");\n+        builder.assertProposal(\"STRUCTURE\");\n+        builder.assertProposal(\"TYPE\");\n+        builder.assertProposal(\"VALUE\");\n+    }\n+\n+    @Test\n+    public void testSuggestForReturnVariableCharacterisation() throws Exception {\n+        ResourceDemandingSEFF seff = ModelCreator.createSeffWithOneExternalCallAction();\n+        this.randomVariable = findSelfOrChild(seff, RandomVariable.class);\n+        builder = builder.insert(\"\");\n+        builder.assertProposal(\"paramFoo\");\n+        builder.assertProposal(\"paramBar\");\n+        builder.assertProposal(\"RETURN\");\n+    }\n+    \n+    @Test\n+    public void testSuggestForOutputVariableCharacterisationOfELSC() throws Exception {\n+        ScenarioBehaviour sb = ModelCreator.createScenarioBehaviorWithOneEntryLevelSystemCall();\n+        this.randomVariable = findSelfOrChild(sb, RandomVariable.class);\n+        builder = builder.insert(\"\");\n+        builder.assertProposal(\"RETURN\");\n+    }\n+    \n+    protected interface StoexContextProviderAdapterMock extends Adapter, StoexContextProvider {\n+\n+    }\n+\n+    protected XtextResource getAdaptedResourceFor(InputStream stream) {\n+        XtextResource r = getResourceFor(stream);\n+        StoexContextProviderAdapterMock adapter = new StoexContextProviderAdapterMock() {\n+\n+            @Override\n+            public void notifyChanged(Notification notification) {\n+            }\n+\n+            @Override\n+            public Notifier getTarget() {\n+                return null;\n+            }\n+\n+            @Override\n+            public void setTarget(Notifier newTarget) {\n+            }\n+\n+            @Override\n+            public boolean isAdapterForType(Object type) {\n+                return StoexContextProvider.class == type;\n+            }\n+\n+            @Override\n+            public StoexContext getContext(Resource resource) {\n+                return new StoexContext() {\n+\n+                    @Override\n+                    public Optional<TypeEnum> getExpectedType() {\n+                        return Optional.ofNullable(expectedType);\n+                    }\n+\n+                    @Override\n+                    public Optional<RandomVariable> getContainer() {\n+                        return Optional.ofNullable(randomVariable);\n+                    }\n+                };\n+            }\n+\n+        };\n+        r.eAdapters()\n+            .add(adapter);\n+        return r;\n+    }\n+\n+    protected XtextResource getResourceFor(InputStream stream) {\n+        XtextResourceSet resourceSet = resourceSetProvider.get();\n+        try {\n+            URI resourceUri = URI.createURI(\"Test.\" + fileExtensionProvider.getPrimaryFileExtension());\n+            Resource resource = resourceSet.createResource(resourceUri);\n+            resource.load(stream, null);\n+            return (XtextResource) resource;\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected static <T extends EObject> T findSelfOrChild(EObject element, Class<T> clz) {\n+        if (clz.isInstance(element)) {\n+            return clz.cast(element);\n+        }\n+        for (TreeIterator<EObject> iter = element.eAllContents(); iter.hasNext();) {\n+            var current = iter.next();\n+            if (clz.isInstance(current)) {\n+                return clz.cast(current);\n+            }\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "c9ae76e3b55d6aa716e234f1991dfc33ee499383",
    "filename": "tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/dialog/impl/StoexEditedResourceProviderTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/blob/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/dialog/impl/StoexEditedResourceProviderTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-PCM/raw/8612aa884291ca588d6c59cefb96537462b95529/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/dialog/impl/StoexEditedResourceProviderTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-PCM/contents/tests/org.palladiosimulator.pcm.stoex.ui.tests/src/org/palladiosimulator/pcm/stoex/ui/dialog/impl/StoexEditedResourceProviderTest.java?ref=8612aa884291ca588d6c59cefb96537462b95529",
    "patch": "@@ -8,7 +8,7 @@\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.palladiosimulator.commons.stoex.StoexStandaloneSetup;\n+import org.palladiosimulator.pcm.stoex.PCMStoexStandaloneSetup;\n import org.palladiosimulator.pcm.stoex.ui.services.StoexEditedResourceProvider;\n \n import tools.mdsd.library.standalone.initialization.StandaloneInitializationException;\n@@ -21,7 +21,7 @@\n     @BeforeAll\n     public static void init() throws StandaloneInitializationException {\n         StandaloneInitializerBuilder.builder()\n-            .addCustomTask(StoexStandaloneSetup::doSetup)\n+            .addCustomTask(PCMStoexStandaloneSetup::doSetup)\n             .build()\n             .init();\n     }"
  }
]
