[
  {
    "sha": "359ecb143f41bba3247132d1ac3d9da79c1a96ad",
    "filename": "bundles/de.uka.ipd.sdq.stoex.analyser/src/de/uka/ipd/sdq/stoex/analyser/exceptions/ExpectedTypeMismatchIssue.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/de.uka.ipd.sdq.stoex.analyser/src/de/uka/ipd/sdq/stoex/analyser/exceptions/ExpectedTypeMismatchIssue.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/de.uka.ipd.sdq.stoex.analyser/src/de/uka/ipd/sdq/stoex/analyser/exceptions/ExpectedTypeMismatchIssue.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/de.uka.ipd.sdq.stoex.analyser/src/de/uka/ipd/sdq/stoex/analyser/exceptions/ExpectedTypeMismatchIssue.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -37,7 +37,7 @@ public ExpectedTypeMismatchIssue(TypeEnum expectedType, TypeEnum type, EObject o\n \n \tpublic String getMessage() {\n \t\treturn \n-\t\t\t\"Expected Type and Actual Type mismatch.\\nInfered Type: \" +\n+\t\t\t\"Expected Type and Actual Type mismatch.\\nInferred Type: \" +\n \t\t\t( foundType == null ? \"unknown\" : foundType.name() ) +\n \t\t\t\", Expected Type: \"+expectedType;\n \t}"
  },
  {
    "sha": "65ce6ab2e1c30c3ecd025ee13c7ba3796456643e",
    "filename": "bundles/org.palladiosimulator.commons.stoex/META-INF/MANIFEST.MF",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/META-INF/MANIFEST.MF",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/META-INF/MANIFEST.MF",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/org.palladiosimulator.commons.stoex/META-INF/MANIFEST.MF?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -19,7 +19,7 @@ Require-Bundle: org.eclipse.xtext;visibility:=reexport,\n  org.eclipse.emf.common,\n  org.eclipse.xtend.lib;bundle-version=\"2.14.0\",\n  org.eclipse.xtext.ecore,\n- de.uka.ipd.sdq.stoex.analyser,\n+ de.uka.ipd.sdq.stoex.analyser;visibility:=reexport,\n  de.uka.ipd.sdq.errorhandling,\n  org.palladiosimulator.commons;bundle-version=\"5.0.0\",\n  org.palladiosimulator.core-commons.mwe2;bundle-version=\"5.0.0\";resolution:=optional"
  },
  {
    "sha": "48dc9dcf515beb7a7a1c56af4b57db76f828d068",
    "filename": "bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/StoexRuntimeModule.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/StoexRuntimeModule.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/StoexRuntimeModule.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/StoexRuntimeModule.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -5,15 +5,21 @@\n \n import org.eclipse.xtext.formatting2.IFormatter2;\n import org.palladiosimulator.commons.stoex.formatting2.StoexFormatter;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProviderImpl;\n \n /**\n  * Use this class to register components to be used at runtime / without the Equinox extension\n  * registry.\n  */\n public class StoexRuntimeModule extends AbstractStoexRuntimeModule {\n-    \n+\n     public Class<? extends IFormatter2> bindIFormatter2() {\n         return StoexFormatter.class;\n     }\n-    \n+\n+    public Class<? extends StoexContextProvider> bindStoexContextProvider() {\n+        return StoexContextProviderImpl.class;\n+    }\n+\n }"
  },
  {
    "sha": "ea81cc9b1bdafe48f7660aad8e356044c93ebaea",
    "filename": "bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContext.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContext.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContext.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContext.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -0,0 +1,14 @@\n+package org.palladiosimulator.commons.stoex.services;\n+\n+import java.util.Optional;\n+\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+public interface StoexContext {\n+\n+    Optional<RandomVariable> getContainer();\n+    \n+    Optional<TypeEnum> getExpectedType();\n+\n+}"
  },
  {
    "sha": "5f7a990797eee033842a834cb627e48823492a89",
    "filename": "bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProvider.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProvider.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProvider.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProvider.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -0,0 +1,9 @@\n+package org.palladiosimulator.commons.stoex.services;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+\n+public interface StoexContextProvider {\n+    \n+    StoexContext getContext(Resource resource);\n+    \n+}"
  },
  {
    "sha": "2fe1c014e219e8f117f5cbd73b16ca92e5be6fda",
    "filename": "bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProviderImpl.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProviderImpl.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProviderImpl.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/services/StoexContextProviderImpl.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -0,0 +1,42 @@\n+package org.palladiosimulator.commons.stoex.services;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+\n+import de.uka.ipd.sdq.stoex.RandomVariable;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+public class StoexContextProviderImpl implements StoexContextProvider {\n+\n+    protected static final StoexContext DUMMY_CONTEXT = createDummyContext();\n+\n+    @Override\n+    public StoexContext getContext(Resource resource) {\n+        if (resource == null) {\n+            throw new IllegalArgumentException(\"The given resource must not be null.\");\n+        }\n+        return resource.eAdapters()\n+            .stream()\n+            .filter(a -> a.isAdapterForType(StoexContextProvider.class))\n+            .findFirst()\n+            .map(StoexContextProvider.class::cast)\n+            .map(provider -> provider.getContext(resource))\n+            .orElse(DUMMY_CONTEXT);\n+    }\n+\n+    protected static StoexContext createDummyContext() {\n+        return new StoexContext() {\n+            @Override\n+            public Optional<RandomVariable> getContainer() {\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Optional<TypeEnum> getExpectedType() {\n+                return Optional.empty();\n+            }\n+        };\n+    }\n+\n+}"
  },
  {
    "sha": "a3af96c255f1c62df74fea764f5d8dee08e2b0fb",
    "filename": "bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/validation/StoexValidator.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/validation/StoexValidator.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/validation/StoexValidator.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/bundles/org.palladiosimulator.commons.stoex/src/org/palladiosimulator/commons/stoex/validation/StoexValidator.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -4,16 +4,24 @@\n package org.palladiosimulator.commons.stoex.validation;\n \n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n \n import org.eclipse.emf.common.util.TreeIterator;\n import org.eclipse.emf.ecore.EObject;\n import org.eclipse.xtext.validation.Check;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+\n+import com.google.inject.Inject;\n \n import de.uka.ipd.sdq.errorhandling.IIssue;\n import de.uka.ipd.sdq.stoex.Expression;\n import de.uka.ipd.sdq.stoex.analyser.exceptions.ExpectedTypeMismatchIssue;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.ExpressionInferTypeVisitor;\n import de.uka.ipd.sdq.stoex.analyser.visitors.NonProbabilisticExpressionInferTypeVisitor;\n import de.uka.ipd.sdq.stoex.analyser.visitors.TypeCheckVisitor;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n \n /**\n  * This class contains custom validation rules. \n@@ -22,6 +30,9 @@\n  */\n public class StoexValidator extends AbstractStoexValidator {\n \t\n+    @Inject\n+    private StoexContextProvider contextProvider;\n+    \n     @Check\n     public void checkTypes(Expression exp) {\n         var typeVisitor = new NonProbabilisticExpressionInferTypeVisitor();\n@@ -45,10 +56,29 @@ public void checkTypes(Expression exp) {\n             }\n         }\n \n+        Optional.ofNullable(exp)\n+            .map(EObject::eResource)\n+            .map(contextProvider::getContext)\n+            .flatMap(StoexContext::getExpectedType)\n+            .ifPresent(expectedType -> {\n+                Collection<? extends IIssue> typeIssues = assertType(exp, typeVisitor, expectedType);\n+                for (IIssue typeIssue : typeIssues) {\n+                    warning(typeIssue.getMessage(), exp, null);\n+                }\n+            });\n     }\n \n-    public Collection<IIssue> getIssues(TypeCheckVisitor visitor) {\n+    protected Collection<IIssue> getIssues(TypeCheckVisitor visitor) {\n         return visitor.getIssues();\n     }\n+    \n+    protected Collection<? extends IIssue> assertType(final EObject result, final ExpressionInferTypeVisitor typeVisitor,\n+            final TypeEnum expectedType) {\n+        if (!TypeCheckVisitor.typesCompatible(expectedType, typeVisitor.getType((Expression) result))) {\n+            return Collections.singletonList(\n+                    new ExpectedTypeMismatchIssue(expectedType, typeVisitor.getType((Expression) result)));\n+        }\n+        return Collections.emptyList();\n+    }\n \t\n }"
  },
  {
    "sha": "d23f51b3ae092151e8bcebab92e0474ed9557a1b",
    "filename": "releng/org.palladiosimulator.core-commons.targetplatform/tp.target",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/releng/org.palladiosimulator.core-commons.targetplatform/tp.target",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/releng/org.palladiosimulator.core-commons.targetplatform/tp.target",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/releng/org.palladiosimulator.core-commons.targetplatform/tp.target?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -19,13 +19,17 @@\n </location>\n <location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n <unit id=\"tools.mdsd.library.standalone.initialization.core.feature.feature.group\" version=\"0.0.0\"/>\n-<repository location=\"https://updatesite.mdsd.tools/library-standaloneinitialization/releases/0.1.0/\"/>\n+<repository location=\"https://updatesite.mdsd.tools/library-standaloneinitialization/releases/0.2.0/\"/>\n </location>\n <location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n <unit id=\"tools.mdsd.ecoreworkflow.mwe2lib.xtext.feature.feature.group\" version=\"0.0.0\"/>\n <repository location=\"https://updatesite.mdsd.tools/ecore-workflow/releases/0.2.0\"/>\n </location>\n <location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n+<unit id=\"tools.mdsd.license.epl2.feature.group\" version=\"0.0.0\"/>\n+<repository location=\"https://updatesite.mdsd.tools/build-licensefeature/releases/latest/\"/>\n+</location>\n+<location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n <unit id=\"de.itemis.xtext.antlr.feature.feature.group\" version=\"0.0.0\"/>\n <repository location=\"http://download.itemis.com/updates/releases/2.1.1\"/>\n </location>"
  },
  {
    "sha": "ce236058b2c8f35e0238c8adeb06251313fa9be7",
    "filename": "tests/org.palladiosimulator.commons.stoex.tests/META-INF/MANIFEST.MF",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/META-INF/MANIFEST.MF",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/META-INF/MANIFEST.MF",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/tests/org.palladiosimulator.commons.stoex.tests/META-INF/MANIFEST.MF?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -8,15 +8,20 @@ Require-Bundle: org.palladiosimulator.commons.stoex,\n  org.junit;bundle-version=\"4.12.0\",\n  org.eclipse.xtext.testing,\n  org.eclipse.xtext.xbase.testing,\n- org.eclipse.xtext.xbase.lib;bundle-version=\"2.14.0\"\n+ org.eclipse.xtext.xbase.lib;bundle-version=\"2.14.0\",\n+ tools.mdsd.library.standalone.initialization;bundle-version=\"0.2.0\"\n Bundle-RequiredExecutionEnvironment: JavaSE-11\n Export-Package: org.palladiosimulator.commons.stoex.tests;x-internal=true\n-Import-Package: org.hamcrest.core,\n+Import-Package: net.bytebuddy;version=\"1.9.0\",\n+ org.hamcrest.core,\n  org.junit;version=\"4.5.0\",\n- org.junit.runners.model;version=\"4.5.0\",\n  org.junit.runner;version=\"4.5.0\",\n- org.junit.runners;version=\"4.5.0\",\n  org.junit.runner.manipulation;version=\"4.5.0\",\n- org.junit.runner.notification;version=\"4.5.0\"\n+ org.junit.runner.notification;version=\"4.5.0\",\n+ org.junit.runners;version=\"4.5.0\",\n+ org.junit.runners.model;version=\"4.5.0\",\n+ org.mockito;version=\"2.23.0\",\n+ org.mockito.stubbing;version=\"2.23.0\",\n+ org.objenesis;version=\"2.6.0\"\n Bundle-Vendor: palladiosimulator.org\n Automatic-Module-Name: org.palladiosimulator.commons.stoex.tests"
  },
  {
    "sha": "718231ffcc96121da1f3a5878e0eb5c9172d0b9b",
    "filename": "tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/StoexParsingTest.xtend",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/StoexParsingTest.xtend",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/StoexParsingTest.xtend",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/StoexParsingTest.xtend?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -85,12 +85,6 @@ class StoexParsingTest {\n \n     @Test\n     def void parseMax() {\n-        val result = parseHelper.parse('''Max ( 35374 * 10 , 60 * 196 * 2375646 + 60 * 196 * 13697006 ) / loopSize.VALUE''')\n-        assertNoIssues(result)\n-    }\n-\n-    @Test\n-    def void parseMax2() {\n         val result = parseHelper.parse('''Max ( 35374 * 10 , 60 * 196 * 2375646 + 60 * 196 * 13697006 )/ 100''')\n         assertNoIssues(result)\n     }"
  },
  {
    "sha": "6bbf9100b28d8ab7df4b84de35f4c94385f42910",
    "filename": "tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderAdapterMock.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderAdapterMock.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderAdapterMock.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderAdapterMock.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -0,0 +1,8 @@\n+package org.palladiosimulator.commons.stoex.tests.services;\n+\n+import org.eclipse.emf.common.notify.Adapter;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+\n+public interface StoexContextProviderAdapterMock extends Adapter, StoexContextProvider {\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3dfd66887adaafd51ea55210c74484ad645c45a2",
    "filename": "tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderImplTest.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderImplTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderImplTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/services/StoexContextProviderImplTest.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -0,0 +1,80 @@\n+package org.palladiosimulator.commons.stoex.tests.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.palladiosimulator.commons.stoex.StoexStandaloneSetup;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProviderImpl;\n+\n+import tools.mdsd.library.standalone.initialization.StandaloneInitializationException;\n+import tools.mdsd.library.standalone.initialization.StandaloneInitializerBuilder;\n+\n+public class StoexContextProviderImplTest {\n+\n+    protected StoexContextProviderImpl subject;\n+    protected ResourceSetImpl rs;\n+    protected Resource r;\n+    protected StoexContextProviderAdapterMock adapter;\n+    protected StoexContext context;\n+\n+    @BeforeClass\n+    public static void init() throws StandaloneInitializationException {\n+        StandaloneInitializerBuilder.builder()\n+            .addCustomTask(StoexStandaloneSetup::doSetup)\n+            .build()\n+            .init();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        rs = new ResourceSetImpl();\n+        r = rs.createResource(URI.createURI(\"virtual:/test/model.stoex\"));\n+        subject = new StoexContextProviderImpl();\n+        adapter = mock(StoexContextProviderAdapterMock.class);\n+        context = mock(StoexContext.class);\n+        when(adapter.isAdapterForType(StoexContextProvider.class)).thenReturn(true);\n+        when(adapter.getContext(r)).thenReturn(context);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNullResource() {\n+        subject.getContext(null);\n+    }\n+\n+    @Test\n+    public void testNoAdapter() {\n+        StoexContext context = subject.getContext(r);\n+        assertTrue(context.getContainer()\n+            .isEmpty());\n+        assertTrue(context.getExpectedType()\n+            .isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidAdapter() {\n+        r.eAdapters()\n+            .add(adapter);\n+        StoexContext actualContext = subject.getContext(r);\n+        assertEquals(context, actualContext);\n+    }\n+\n+    @Test\n+    public void testValidAdapterWithDifferentResource() {\n+        r.eAdapters()\n+            .add(adapter);\n+        Resource r2 = rs.createResource(URI.createURI(\"dummy.stoex\"));\n+        StoexContext actualContext = subject.getContext(r2);\n+        assertNotEquals(context, actualContext);\n+    }\n+}"
  },
  {
    "sha": "ae8d7ad44cc86ea56aefe62c9be968c506edb555",
    "filename": "tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/validation/StoexValidationTest.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/blob/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/validation/StoexValidationTest.java",
    "raw_url": "https://github.com/PalladioSimulator/Palladio-Core-Commons/raw/779b3584c89b5c0cb5f7d81a01cba1396116aa04/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/validation/StoexValidationTest.java",
    "contents_url": "https://api.github.com/repos/PalladioSimulator/Palladio-Core-Commons/contents/tests/org.palladiosimulator.commons.stoex.tests/src/org/palladiosimulator/commons/stoex/tests/validation/StoexValidationTest.java?ref=779b3584c89b5c0cb5f7d81a01cba1396116aa04",
    "patch": "@@ -0,0 +1,76 @@\n+package org.palladiosimulator.commons.stoex.tests.validation;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.palladiosimulator.commons.stoex.services.StoexContext;\n+import org.palladiosimulator.commons.stoex.services.StoexContextProvider;\n+import org.palladiosimulator.commons.stoex.tests.StoexInjectorProvider;\n+import org.palladiosimulator.commons.stoex.tests.services.StoexContextProviderAdapterMock;\n+\n+import com.google.inject.Inject;\n+\n+import de.uka.ipd.sdq.stoex.Expression;\n+import de.uka.ipd.sdq.stoex.StoexPackage;\n+import de.uka.ipd.sdq.stoex.analyser.visitors.TypeEnum;\n+\n+@RunWith(XtextRunner.class)\n+@InjectWith(StoexInjectorProvider.class)\n+public class StoexValidationTest {\n+\n+    @Inject\n+    private ParseHelper<Expression> parseHelper;\n+\n+    @Inject\n+    private ValidationTestHelper validationTestHelper;\n+\n+    @Test\n+    public void testMatchingTypes() throws Exception {\n+        Expression expr = parseHelper.parse(\"true\");\n+        setExpectedType(expr, TypeEnum.BOOL);\n+        validationTestHelper.assertNoIssues(expr);\n+    }\n+\n+    @Test\n+    public void testNotMatchingTypes() throws Exception {\n+        Expression expr = parseHelper.parse(\"true\");\n+        setExpectedType(expr, TypeEnum.INT);\n+        validationTestHelper.assertWarning(expr, StoexPackage.Literals.BOOL_LITERAL, null,\n+                \"Expected Type and Actual Type mismatch.\", \"Inferred Type: BOOL, Expected Type: INT\");\n+    }\n+\n+    @Test\n+    public void testValidNestedType() throws Exception {\n+        Expression expr = parseHelper.parse(\"NOT(true)\");\n+        validationTestHelper.assertNoIssues(expr);\n+    }\n+\n+    @Test\n+    public void testInvalidNestedType() throws Exception {\n+        Expression expr = parseHelper.parse(\"NOT(1)\");\n+        validationTestHelper.assertWarning(expr, StoexPackage.Literals.NOT_EXPRESSION, null,\n+                \"Expected Type and Actual Type mismatch.\", \"Inferred Type: INT, Expected Type: BOOL\");\n+    }\n+\n+    protected void setExpectedType(Expression expr, TypeEnum expectedType) {\n+        StoexContextProviderAdapterMock adapter = mock(StoexContextProviderAdapterMock.class);\n+        when(adapter.isAdapterForType(StoexContextProvider.class)).thenReturn(true);\n+        StoexContext context = mock(StoexContext.class);\n+        when(adapter.getContext(any(Resource.class))).thenReturn(context);\n+        when(context.getExpectedType()).thenReturn(Optional.ofNullable(expectedType));\n+        expr.eResource()\n+            .eAdapters()\n+            .add(adapter);\n+    }\n+\n+}"
  }
]
