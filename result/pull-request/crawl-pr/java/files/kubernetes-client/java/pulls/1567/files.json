[
  {
    "sha": "1a6b1bf222fe0559c418ca020ebddbc6d0979e5d",
    "filename": "extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElectionConfig.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/kubernetes-client/java/blob/5c718d5d982db448462cf711efe4dd35597394c4/extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElectionConfig.java",
    "raw_url": "https://github.com/kubernetes-client/java/raw/5c718d5d982db448462cf711efe4dd35597394c4/extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElectionConfig.java",
    "contents_url": "https://api.github.com/repos/kubernetes-client/java/contents/extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElectionConfig.java?ref=5c718d5d982db448462cf711efe4dd35597394c4",
    "patch": "@@ -27,6 +27,8 @@\n \n   private V1OwnerReference ownerReference;\n \n+  private boolean eligibleForLeaderElection = true;\n+\n   public LeaderElectionConfig() {}\n \n   public LeaderElectionConfig(\n@@ -40,11 +42,22 @@ public LeaderElectionConfig(\n       Duration renewDeadline,\n       Duration retryPeriod,\n       V1OwnerReference ownerReference) {\n+    this(lock, leaseDuration, renewDeadline, retryPeriod, ownerReference, true);\n+  }\n+\n+  public LeaderElectionConfig(\n+      Lock lock,\n+      Duration leaseDuration,\n+      Duration renewDeadline,\n+      Duration retryPeriod,\n+      V1OwnerReference ownerReference,\n+      boolean eligibleForLeaderElection) {\n     this.lock = lock;\n     this.leaseDuration = leaseDuration;\n     this.renewDeadline = renewDeadline;\n     this.retryPeriod = retryPeriod;\n     this.ownerReference = ownerReference;\n+    this.eligibleForLeaderElection = eligibleForLeaderElection;\n   }\n \n   public Lock getLock() {\n@@ -86,4 +99,12 @@ public V1OwnerReference getOwnerReference() {\n   public void setOwnerReference(V1OwnerReference ownerReference) {\n     this.ownerReference = ownerReference;\n   }\n+\n+  public boolean isEligibleForLeaderElection() {\n+    return eligibleForLeaderElection;\n+  }\n+\n+  public void setEligibleForLeaderElection(boolean eligibleForLeaderElection) {\n+    this.eligibleForLeaderElection = eligibleForLeaderElection;\n+  }\n }"
  },
  {
    "sha": "198930f9f70e914ecce40ace02a2805ee1e0ff9e",
    "filename": "extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElector.java",
    "status": "modified",
    "additions": 26,
    "deletions": 11,
    "changes": 37,
    "blob_url": "https://github.com/kubernetes-client/java/blob/5c718d5d982db448462cf711efe4dd35597394c4/extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElector.java",
    "raw_url": "https://github.com/kubernetes-client/java/raw/5c718d5d982db448462cf711efe4dd35597394c4/extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElector.java",
    "contents_url": "https://api.github.com/repos/kubernetes-client/java/contents/extended/src/main/java/io/kubernetes/client/extended/leaderelection/LeaderElector.java?ref=5c718d5d982db448462cf711efe4dd35597394c4",
    "patch": "@@ -116,6 +116,16 @@ public void run(Runnable startLeadingHook, Runnable stopLeadingHook) {\n     run(startLeadingHook, stopLeadingHook, null);\n   }\n \n+  /**\n+   * Runs the leader election in foreground.\n+   *\n+   * @param onNewLeaderHook called when the client observes a leader that is not the previously\n+   *     observed leader. This includes the first observed leader when the client starts.\n+   */\n+  public void run(Consumer<String> onNewLeaderHook) {\n+    run(() -> {}, () -> {}, onNewLeaderHook);\n+  }\n+\n   /**\n    * Runs the leader election in foreground.\n    *\n@@ -262,10 +272,6 @@ private boolean tryAcquireOrRenew() {\n         return false;\n       }\n \n-      if (log.isDebugEnabled()) {\n-        log.debug(\"Lock not found, try to create it\");\n-      }\n-\n       // No Lock resource exists, try to get leadership by creating it\n       return createLock(lock, leaderElectionRecord);\n     }\n@@ -283,9 +289,6 @@ private boolean tryAcquireOrRenew() {\n         || oldLeaderElectionRecord.getHolderIdentity() == null) {\n       // We found the lock resource with an empty LeaderElectionRecord, try to get leadership by\n       // updating it\n-      if (log.isDebugEnabled()) {\n-        log.debug(\"Update lock to get lease\");\n-      }\n \n       if (oldLeaderElectionRecord != null) {\n         // maintain the leaderTransitions\n@@ -321,10 +324,6 @@ private boolean tryAcquireOrRenew() {\n       leaderElectionRecord.setLeaderTransitions(oldLeaderElectionRecord.getLeaderTransitions() + 1);\n     }\n \n-    if (log.isDebugEnabled()) {\n-      log.debug(\"Update lock to renew lease\");\n-    }\n-\n     boolean renewalStatus = updateLock(lock, leaderElectionRecord);\n \n     if (renewalStatus && log.isDebugEnabled()) {\n@@ -335,6 +334,14 @@ private boolean tryAcquireOrRenew() {\n   }\n \n   private boolean createLock(Lock lock, LeaderElectionRecord leaderElectionRecord) {\n+    if (!config.isEligibleForLeaderElection()) {\n+      return false;\n+    }\n+\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Lock not found, try to create it\");\n+    }\n+\n     boolean createSuccess = lock.create(leaderElectionRecord);\n     if (!createSuccess) {\n       return false;\n@@ -345,6 +352,14 @@ private boolean createLock(Lock lock, LeaderElectionRecord leaderElectionRecord)\n   }\n \n   private boolean updateLock(Lock lock, LeaderElectionRecord leaderElectionRecord) {\n+    if (!config.isEligibleForLeaderElection()) {\n+      return false;\n+    }\n+\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Update lock to get or renew lease\");\n+    }\n+\n     boolean updateSuccess = lock.update(leaderElectionRecord);\n     if (!updateSuccess) {\n       return false;"
  },
  {
    "sha": "5ee207d19805c16a40708b2e9849dd39a9d9aa2f",
    "filename": "extended/src/test/java/io/kubernetes/client/extended/leaderelection/LeaderElectionTest.java",
    "status": "modified",
    "additions": 98,
    "deletions": 23,
    "changes": 121,
    "blob_url": "https://github.com/kubernetes-client/java/blob/5c718d5d982db448462cf711efe4dd35597394c4/extended/src/test/java/io/kubernetes/client/extended/leaderelection/LeaderElectionTest.java",
    "raw_url": "https://github.com/kubernetes-client/java/raw/5c718d5d982db448462cf711efe4dd35597394c4/extended/src/test/java/io/kubernetes/client/extended/leaderelection/LeaderElectionTest.java",
    "contents_url": "https://api.github.com/repos/kubernetes-client/java/contents/extended/src/test/java/io/kubernetes/client/extended/leaderelection/LeaderElectionTest.java?ref=5c718d5d982db448462cf711efe4dd35597394c4",
    "patch": "@@ -102,43 +102,39 @@ public void testLeaderElection() throws InterruptedException {\n     List<String> leadershipHistory = new ArrayList<>();\n     CountDownLatch lockAStopLeading = new CountDownLatch(1);\n \n-    MockResourceLock mockLockA = new MockResourceLock(\"mockA\");\n-    mockLockA.renewCountMax = 3;\n-    mockLockA.onCreate =\n+    Consumer<LeaderElectionRecord> onCreate =\n         record -> {\n-          electionHistory.add(\"A creates record\");\n-          leadershipHistory.add(\"A gets leadership\");\n+          electionHistory.add(record.getHolderIdentity() + \" creates record\");\n+          leadershipHistory.add(record.getHolderIdentity() + \" gets leadership\");\n         };\n-    mockLockA.onUpdate =\n+\n+    Consumer<LeaderElectionRecord> onUpdate =\n         record -> {\n-          electionHistory.add(\"A updates record\");\n+          electionHistory.add(record.getHolderIdentity() + \" updates record\");\n         };\n-    mockLockA.onChange =\n+\n+    Consumer<LeaderElectionRecord> onChange =\n         record -> {\n-          leadershipHistory.add(\"A gets leadership\");\n+          leadershipHistory.add(record.getHolderIdentity() + \" gets leadership\");\n         };\n+\n+    MockResourceLock mockLockA = new MockResourceLock(\"A\");\n+    mockLockA.renewCountMax = 3;\n+    mockLockA.onCreate = onCreate;\n+    mockLockA.onUpdate = onUpdate;\n+    mockLockA.onChange = onChange;\n     LeaderElectionConfig leaderElectionConfigA = new LeaderElectionConfig();\n     leaderElectionConfigA.setLock(mockLockA);\n     leaderElectionConfigA.setLeaseDuration(Duration.ofMillis(500));\n     leaderElectionConfigA.setRetryPeriod(Duration.ofMillis(300));\n     leaderElectionConfigA.setRenewDeadline(Duration.ofMillis(400));\n     LeaderElector leaderElectorA = new LeaderElector(leaderElectionConfigA);\n \n-    MockResourceLock mockLockB = new MockResourceLock(\"mockB\");\n+    MockResourceLock mockLockB = new MockResourceLock(\"B\");\n     mockLockB.renewCountMax = 4;\n-    mockLockB.onCreate =\n-        record -> {\n-          electionHistory.add(\"B creates record\");\n-          leadershipHistory.add(\"B gets leadership\");\n-        };\n-    mockLockB.onUpdate =\n-        record -> {\n-          electionHistory.add(\"B updates record\");\n-        };\n-    mockLockB.onChange =\n-        record -> {\n-          leadershipHistory.add(\"B gets leadership\");\n-        };\n+    mockLockB.onCreate = onCreate;\n+    mockLockB.onUpdate = onUpdate;\n+    mockLockB.onChange = onChange;\n     LeaderElectionConfig leaderElectionConfigB = new LeaderElectionConfig();\n     leaderElectionConfigB.setLock(mockLockB);\n     leaderElectionConfigB.setLeaseDuration(Duration.ofMillis(500));\n@@ -197,6 +193,85 @@ public void testLeaderElection() throws InterruptedException {\n         \"B stops leading\");\n   }\n \n+  @Test\n+  public void testLeaderElectionWithPureFollower() throws InterruptedException {\n+    List<String> electionHistory = new ArrayList<>();\n+    List<String> leadershipHistory = new ArrayList<>();\n+\n+    Consumer<LeaderElectionRecord> onCreate =\n+        record -> {\n+          electionHistory.add(record.getHolderIdentity() + \" creates record\");\n+          leadershipHistory.add(record.getHolderIdentity() + \" gets leadership\");\n+        };\n+\n+    Consumer<LeaderElectionRecord> onUpdate =\n+        record -> {\n+          electionHistory.add(record.getHolderIdentity() + \" updates record\");\n+        };\n+\n+    Consumer<LeaderElectionRecord> onChange =\n+        record -> {\n+          leadershipHistory.add(record.getHolderIdentity() + \" gets leadership\");\n+        };\n+\n+    MockResourceLock mockLockLeader = new MockResourceLock(\"Leader\");\n+    mockLockLeader.renewCountMax = 3;\n+    mockLockLeader.onCreate = onCreate;\n+    mockLockLeader.onUpdate = onUpdate;\n+    mockLockLeader.onChange = onChange;\n+    LeaderElectionConfig leaderElectionConfigLeader = new LeaderElectionConfig();\n+    leaderElectionConfigLeader.setLock(mockLockLeader);\n+    leaderElectionConfigLeader.setLeaseDuration(Duration.ofMillis(500));\n+    leaderElectionConfigLeader.setRetryPeriod(Duration.ofMillis(300));\n+    leaderElectionConfigLeader.setRenewDeadline(Duration.ofMillis(400));\n+    LeaderElector leaderElectorLeader = new LeaderElector(leaderElectionConfigLeader);\n+\n+    MockResourceLock mockLockFollower = new MockResourceLock(\"Follower\");\n+    mockLockFollower.renewCountMax = 4;\n+    mockLockFollower.onCreate = onCreate;\n+    mockLockFollower.onUpdate = onUpdate;\n+    mockLockFollower.onChange = onChange;\n+    LeaderElectionConfig leaderElectionConfigFollower = new LeaderElectionConfig();\n+    leaderElectionConfigFollower.setEligibleForLeaderElection(false);\n+    leaderElectionConfigFollower.setLock(mockLockFollower);\n+    leaderElectionConfigFollower.setLeaseDuration(Duration.ofMillis(500));\n+    leaderElectionConfigFollower.setRetryPeriod(Duration.ofMillis(300));\n+    leaderElectionConfigFollower.setRenewDeadline(Duration.ofMillis(400));\n+    LeaderElector leaderElectorFollower = new LeaderElector(leaderElectionConfigFollower);\n+\n+    CountDownLatch testLeaderElectionLatch = new CountDownLatch(2);\n+    ExecutorService leaderElectionWorker = Executors.newFixedThreadPool(2);\n+\n+    leaderElectionWorker.submit(\n+        () -> {\n+          leaderElectorFollower.run(\n+              s -> {\n+                leadershipHistory.add(s + \" starts leading\");\n+                testLeaderElectionLatch.countDown();\n+              });\n+        });\n+\n+    leaderElectionWorker.submit(\n+        () -> {\n+          leaderElectorLeader.run(\n+              () -> {},\n+              () -> {\n+                leadershipHistory.add(\"Leader stops leading\");\n+                testLeaderElectionLatch.countDown();\n+              });\n+        });\n+\n+    testLeaderElectionLatch.await(10, SECONDS);\n+\n+    assertHistory(\n+        electionHistory, \"Leader creates record\", \"Leader updates record\", \"Leader updates record\");\n+    assertHistory(\n+        leadershipHistory,\n+        \"Leader gets leadership\",\n+        \"Leader starts leading\",\n+        \"Leader stops leading\");\n+  }\n+\n   @Test\n   public void testLeaderElectionWithRenewDeadline() throws InterruptedException {\n     List<String> electionHistory = new ArrayList<>();"
  }
]
