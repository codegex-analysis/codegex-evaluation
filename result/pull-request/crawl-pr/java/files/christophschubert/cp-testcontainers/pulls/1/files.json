[
  {
    "sha": "5fcd980afb0c7133225b88f95d0bf39c6e6a90c9",
    "filename": "src/main/java/net/christophschubert/cp/testcontainers/LdapContainer.java",
    "status": "modified",
    "additions": 86,
    "deletions": 52,
    "changes": 138,
    "blob_url": "https://github.com/christophschubert/cp-testcontainers/blob/4fcebcb06d54d0054a79109536e40482302b6605/src/main/java/net/christophschubert/cp/testcontainers/LdapContainer.java",
    "raw_url": "https://github.com/christophschubert/cp-testcontainers/raw/4fcebcb06d54d0054a79109536e40482302b6605/src/main/java/net/christophschubert/cp/testcontainers/LdapContainer.java",
    "contents_url": "https://api.github.com/repos/christophschubert/cp-testcontainers/contents/src/main/java/net/christophschubert/cp/testcontainers/LdapContainer.java?ref=4fcebcb06d54d0054a79109536e40482302b6605",
    "patch": "@@ -3,92 +3,126 @@\n import org.testcontainers.containers.GenericContainer;\n import org.testcontainers.containers.wait.strategy.Wait;\n import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n import org.testcontainers.utility.DockerImageName;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n public class LdapContainer extends GenericContainer<LdapContainer> {\n+\n     static final DockerImageName baseImageName = DockerImageName.parse(\"osixia/openldap\");\n     static final String defaultTag = \"1.3.0\";\n \n     static final String ldifBootstrapPath = \"/container/service/slapd/assets/config/bootstrap/ldif/custom/custom.ldif\";\n \n+    private static final Set<String> DEFAULT_USERS = Set.of(\"alice\", \"barney\");\n+    private static final Set<String> DEFAULT_GROUPS = Set.of(\"administrators\", \"developers\");\n+    private static final Map<String, Set<String>> DEFAULT_MEMBERS =\n+            Map.of(\"alice\", Set.of(\"administrators\"), \"barney\", Set.of(\"developers\"));\n+\n     public LdapContainer() {\n-        this(Set.of(\"alice\",  \"barney\", \"sr-user\" ));\n+        this(DEFAULT_USERS, DEFAULT_GROUPS, DEFAULT_MEMBERS);\n     }\n \n-    public LdapContainer(Set<String> usernames) {\n-        this(usernames.stream().collect(Collectors.toMap(s -> s, s -> s + \"-secret\")));\n+    public LdapContainer(Set<String> users) {\n+        this(users.stream().collect(Collectors.toMap(s -> s, s -> s + \"-secret\")), DEFAULT_GROUPS, DEFAULT_MEMBERS);\n     }\n \n-    public LdapContainer(Map<String, String> ldapUsers) {\n-        super(new ImageFromDockerfile().withFileFromString(\"custom.ldif\", formatLdif(ldapUsers)).withDockerfileFromBuilder(\n-                db -> db.from(baseImageName.getUnversionedPart() + \":\" + defaultTag).copy(\"custom.ldif\", ldifBootstrapPath).build()));\n-        _configure();\n+    /**\n+     * @param users   - Collection of user names\n+     * @param groups  - Collection of group names\n+     * @param members - Maps user to multiple groups\n+     */\n+    public LdapContainer(Set<String> users, Set<String> groups, Map<String, Set<String>> members) {\n+        this(users.stream().collect(Collectors.toMap(s -> s, s -> s + \"-secret\")), groups, members);\n     }\n \n-    public LdapContainer(String pathToLdif) {\n-        super(baseImageName.withTag(defaultTag));\n-        withFileSystemBind(pathToLdif, ldifBootstrapPath);\n+    public LdapContainer(Map<String, String> ldapUsers, Set<String> groups, Map<String, Set<String>> members) {\n+        super(buildImage(formatLdif(ldapUsers, groups, members)));\n         _configure();\n     }\n \n+    private static ImageFromDockerfile buildImage(String ldif) {\n+        return new ImageFromDockerfile().withFileFromString(\"custom.ldif\", ldif)\n+                .withDockerfileFromBuilder(LdapContainer::dockerfileBuild);\n+    }\n+\n+    private static String dockerfileBuild(DockerfileBuilder db) {\n+        return db.from(baseImageName.getUnversionedPart() + \":\" + defaultTag)\n+                .copy(\"custom.ldif\", ldifBootstrapPath).build();\n+    }\n+\n     private void _configure() {\n-          withNetworkAliases(\"ldap\");\n-          withEnv(\"LDAP_ORGANISATION\", \"Confluent\");\n-          withEnv(\"LDAP_DOMAIN\", \"confluent.io\");\n-          withCommand(\"--copy-service --loglevel debug\");\n-          waitingFor(Wait.forLogMessage(\".*slapd starting.*\", 2));\n+        withNetworkAliases(\"ldap\");\n+        withEnv(\"LDAP_ORGANISATION\", \"Confluent\");\n+        withEnv(\"LDAP_DOMAIN\", \"confluent.io\");\n+        withCommand(\"--copy-service --loglevel debug\");\n+        waitingFor(Wait.forLogMessage(\".*slapd starting.*\", 2));\n     }\n \n-    static String formatLdif(Map<String, String> ldapUsers) {\n-        final String header = \"dn: ou=users,dc=confluent,dc=io\\n\" +\n-                \"objectClass: organizationalUnit\\n\" +\n-                \"ou: Users\\n\" +\n-                \"\\n\" +\n-                \"dn: ou=groups,dc=confluent,dc=io\\n\" +\n-                \"objectClass: organizationalUnit\\n\" +\n-                \"ou: Groups\\n\\n\";\n-        StringBuilder builder = new StringBuilder(header);\n-\n-        var groups = List.of(\"Kafka Developers\", \"ProjectA\", \"ProjectB\");\n-        final var startGidNumber = 5000;\n-        for (int i = 0; i < groups.size(); ++i) {\n-            builder.append(formatGroupEntry(groups.get(i), startGidNumber + i));\n+    private static final String HEADER =\n+            \"dn: ou=users,dc=confluent,dc=io\\n\" +\n+                    \"objectClass: organizationalUnit\\n\" +\n+                    \"ou: Users\\n\" +\n+                    \"\\n\" +\n+                    \"dn: ou=groups,dc=confluent,dc=io\\n\" +\n+                    \"objectClass: organizationalUnit\\n\" +\n+                    \"ou: Groups\\n\\n\";\n+\n+    static String formatLdif(Map<String, String> ldapUsers, Set<String> ldapGroups, Map<String, Set<String>> members) {\n+\n+        final StringBuilder builder = new StringBuilder(HEADER);\n+\n+        var groupIdNumber = 5000;\n+\n+        for (String entry : ldapGroups) {\n+            builder.append(formatGroupEntry(entry, groupIdNumber++));\n         }\n \n-        var uidNumber = 10000;\n+        var userIdNumber = 10000;\n+\n         for (Map.Entry<String, String> entry : ldapUsers.entrySet()) {\n-            builder.append(formatUserEntry(entry.getKey(), entry.getValue(), uidNumber++));\n+            builder.append(formatUserEntry(entry.getKey(), entry.getValue(),\n+                    userIdNumber++, members.getOrDefault(entry.getKey(), Set.of())));\n         }\n \n         return builder.toString();\n     }\n \n-    static String formatGroupEntry(String groupName, int gidNumber) {\n-        final var template = \"dn: cn=%s,ou=groups,{{ LDAP_BASE_DN }}\\n\" +\n-                \"objectClass: top\\n\" +\n-                \"objectClass: posixGroup\\n\" +\n-                \"cn: %s\\n\" +\n-                \"gidNumber: %d\\n\\n\";\n-        return String.format(template, groupName, groupName, gidNumber);\n+    private static final String GROUP_TEMPLATE =\n+            \"dn: cn=%s,ou=groups,{{ LDAP_BASE_DN }}\\n\" +\n+                    \"objectClass: top\\n\" +\n+                    \"objectClass: posixGroup\\n\" +\n+                    \"cn: %s\\n\" +\n+                    \"gidNumber: %d\\n\\n\";\n+\n+    private static String formatGroupEntry(String groupName, int gidNumber) {\n+        return String.format(GROUP_TEMPLATE, groupName, groupName, gidNumber);\n     }\n \n-    static String formatUserEntry(String username, String password, int uidNumber) {\n-        final var template = \"dn: cn=%s,ou=users,{{ LDAP_BASE_DN }}\\n\" +\n-                \"objectClass: inetOrgPerson\\n\" +\n-                \"objectClass: posixAccount\\n\" +\n-                \"uid: %s\\n\" +\n-                \"cn: %s\\n\" +\n-                \"sn: Snow\\n\" +\n-                \"uidNumber: %d\\n\" +\n-                \"gidNumber: 5000\\n\" +\n-                \"userPassword: %s\\n\" +\n-                \"homeDirectory: /home/%s\\n\\n\";\n-        return String.format(template, username, username, username, uidNumber, password, username);\n+    private static final String USER_TEMPLATE =\n+            \"dn: cn=%s,ou=users,{{ LDAP_BASE_DN }}\\n\" +\n+                    \"objectClass: inetOrgPerson\\n\" +\n+                    \"objectClass: posixAccount\\n\" +\n+                    \"%s\" +\n+                    \"uid: %s\\n\" +\n+                    \"cn: %s\\n\" +\n+                    \"sn: Snow\\n\" +\n+                    \"uidNumber: %d\\n\" +\n+                    \"gidNumber: 5000\\n\" +\n+                    \"userPassword: %s\\n\" +\n+                    \"homeDirectory: /home/%s\\n\\n\";\n+\n+    private static String formatUserEntry(String username, String password, int uidNumber, Set<String> members) {\n+        return String.format(USER_TEMPLATE, username, assembleMembers(members),\n+                username, username, uidNumber, password, username);\n     }\n \n-}\n+    private static String assembleMembers(Set<String> members) {\n+        return members.stream()\n+                .map(s -> String.format(\"memberOf: cn=%s,ou=groups,{{ LDAP_BASE_DN }}\\n\", s))\n+                .collect(Collectors.joining(\"\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2952df11f22492ab96f3ad486dee421fc6512aec",
    "filename": "src/test/java/net/christophschubert/cp/testcontainers/LdapContainerTest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/christophschubert/cp-testcontainers/blob/4fcebcb06d54d0054a79109536e40482302b6605/src/test/java/net/christophschubert/cp/testcontainers/LdapContainerTest.java",
    "raw_url": "https://github.com/christophschubert/cp-testcontainers/raw/4fcebcb06d54d0054a79109536e40482302b6605/src/test/java/net/christophschubert/cp/testcontainers/LdapContainerTest.java",
    "contents_url": "https://api.github.com/repos/christophschubert/cp-testcontainers/contents/src/test/java/net/christophschubert/cp/testcontainers/LdapContainerTest.java?ref=4fcebcb06d54d0054a79109536e40482302b6605",
    "patch": "@@ -0,0 +1,42 @@\n+package net.christophschubert.cp.testcontainers;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class LdapContainerTest {\n+\n+    @Test\n+    public void testLdapConfig() {\n+        final var config = LdapContainer.formatLdif(Map.of(\"greta\", \"secret\"),\n+                Set.of(\"admins\"), Map.of(\"greta\", Set.of(\"admins\", \"undefined\")));\n+\n+        final var lines = List.of(config.split(\"\\n\"));\n+\n+        assertTrue(lines.contains(\"dn: cn=greta,ou=users,{{ LDAP_BASE_DN }}\"), \"user is not defined\");\n+\n+        assertTrue(lines.contains(\"memberOf: cn=admins,ou=groups,{{ LDAP_BASE_DN }}\"), \"memberOf missing\");\n+        assertTrue(lines.contains(\"dn: cn=admins,ou=groups,{{ LDAP_BASE_DN }}\"), \"group is not defined\");\n+\n+        assertTrue(lines.contains(\"memberOf: cn=undefined,ou=groups,{{ LDAP_BASE_DN }}\"), \"memberOf missing\");\n+        assertFalse(lines.contains(\"dn: cn=undefined,ou=groups,{{ LDAP_BASE_DN }}\"), \"user is defined\");\n+    }\n+\n+    @Test\n+    public void testLdapConfigWhenNoMembers() {\n+        final var config = LdapContainer.formatLdif(Map.of(\"greta\", \"secret\"),\n+                Set.of(\"admins\"), Map.of());\n+\n+        final var lines = List.of(config.split(\"\\n\"));\n+\n+        assertTrue(lines.contains(\"dn: cn=greta,ou=users,{{ LDAP_BASE_DN }}\"), \"user is not defined\");\n+        assertTrue(lines.contains(\"dn: cn=admins,ou=groups,{{ LDAP_BASE_DN }}\"), \"group is not defined\");\n+\n+        assertFalse(config.contains(\"memberOf\"), \"memberOf defined\");\n+    }\n+}"
  }
]
