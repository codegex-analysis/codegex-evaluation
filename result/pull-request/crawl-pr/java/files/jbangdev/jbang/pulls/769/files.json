[
  {
    "sha": "49f9fa762d282888337a0f458ec118faffb8d357",
    "filename": "readme.adoc",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/jbangdev/jbang/blob/dc45929149ed6196f47d5b2e41be84d4bfdeff27/readme.adoc",
    "raw_url": "https://github.com/jbangdev/jbang/raw/dc45929149ed6196f47d5b2e41be84d4bfdeff27/readme.adoc",
    "contents_url": "https://api.github.com/repos/jbangdev/jbang/contents/readme.adoc?ref=dc45929149ed6196f47d5b2e41be84d4bfdeff27",
    "patch": "@@ -1228,6 +1228,32 @@ Note, the default generated jar will have classpath references that are machine\n jar use `jbang export --portable <script>` and the dependent jars will be put in `libs` directory and\n generated jar will have relative references to the jars in the `libs` folder.\n \n+=== Exporting to Maven Repository\n+\n+If your application or script need to be used from another java project it can be beneficial to publish your jar into a maven repository.\n+You can use `jbang export --mavenrepos -Dgroup=dk.xam yourapp.java` to have it installed in your default maven repository, or use `-O target`\n+to get it exported to a directory named `target`.\n+\n+You can control what maven coordinate will be used via properties named `group`, `artifact` and `version`.\n+\n+==== Publish via jitpack\n+\n+You can use `--mavenrepo` to publish any github hosted jbang app into a maven project by using a `jitpack.yml` as follows:\n+\n+[source, yaml]\n+----\n+before_install:\n+  -  curl -Ls https://sh.jbang.dev | bash -s - app setup\n+install:\n+  - jbang export --force --mavenpublish -O target -Dgroup=$GROUP -Dartifact=$ARTIFACT -Dversion=$VERSION hello.java\n+  - mkdir -p ~/.m2/repository\n+  - cp -rv target/* ~/.m2/repository/\n+----\n+\n+You should only need to change `hello.java` to match your application/script.\n+\n+You can read more about how jitpack handle builds at https://jitpack.io/docs/BUILDING/.\n+\n == Install apps\n \n Since version 0.56 jbang comes with ability to setup jbang to put scripts/apps into your `PATH`"
  },
  {
    "sha": "a3a604c9e1311b3f90b984749b14f84f03f6a697",
    "filename": "src/main/java/dev/jbang/cli/BaseBuildCommand.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/jbangdev/jbang/blob/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/main/java/dev/jbang/cli/BaseBuildCommand.java",
    "raw_url": "https://github.com/jbangdev/jbang/raw/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/main/java/dev/jbang/cli/BaseBuildCommand.java",
    "contents_url": "https://api.github.com/repos/jbangdev/jbang/contents/src/main/java/dev/jbang/cli/BaseBuildCommand.java?ref=dc45929149ed6196f47d5b2e41be84d4bfdeff27",
    "patch": "@@ -174,11 +174,18 @@ private IntegrationResult buildJar(ScriptSource src, RunContext ctx, File tmpJar\n \t\t\t// ignore\n \t\t\tUtil.warnMsg(\"Could not locate pom.xml template\");\n \t\t} else {\n+\t\t\tString group = ctx.getProperties().getOrDefault(\"group\", \"g.a.v\");\n \t\t\tString pomfile = pomTemplate\n \t\t\t\t\t\t\t\t\t\t.data(\"baseName\", Util.getBaseName(src.getResourceRef().getFile().getName()))\n+\t\t\t\t\t\t\t\t\t\t.data(\"group\", group)\n+\t\t\t\t\t\t\t\t\t\t.data(\"artifact\", ctx\t.getProperties()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getOrDefault(\"artifact\", Util.getBaseName(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc.getResourceRef().getFile().getName())))\n+\t\t\t\t\t\t\t\t\t\t.data(\"version\", ctx.getProperties().getOrDefault(\"version\", \"999-SNAPSHOT\"))\n \t\t\t\t\t\t\t\t\t\t.data(\"dependencies\", ctx.getClassPath().getArtifacts())\n \t\t\t\t\t\t\t\t\t\t.render();\n-\t\t\tpomPath = new File(tmpJarDir, \"META-INF/maven/g/a/v/pom.xml\").toPath();\n+\n+\t\t\tpomPath = new File(tmpJarDir, \"META-INF/maven/\" + group.replace(\".\", \"/\") + \"/pom.xml\").toPath();\n \t\t\tFiles.createDirectories(pomPath.getParent());\n \t\t\tUtil.writeString(pomPath, pomfile);\n \t\t}"
  },
  {
    "sha": "b8eaec97d47062d226d39318eafcef4818c692fe",
    "filename": "src/main/java/dev/jbang/cli/Export.java",
    "status": "modified",
    "additions": 133,
    "deletions": 9,
    "changes": 142,
    "blob_url": "https://github.com/jbangdev/jbang/blob/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/main/java/dev/jbang/cli/Export.java",
    "raw_url": "https://github.com/jbangdev/jbang/raw/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/main/java/dev/jbang/cli/Export.java",
    "contents_url": "https://api.github.com/repos/jbangdev/jbang/contents/src/main/java/dev/jbang/cli/Export.java?ref=dc45929149ed6196f47d5b2e41be84d4bfdeff27",
    "patch": "@@ -14,32 +14,45 @@\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n \n+import dev.jbang.Settings;\n import dev.jbang.source.RunContext;\n import dev.jbang.source.Source;\n+import dev.jbang.util.TemplateEngine;\n import dev.jbang.util.Util;\n \n+import io.quarkus.qute.Template;\n import picocli.CommandLine;\n import picocli.CommandLine.Command;\n \n @Command(name = \"export\", description = \"Export the result of a build.\")\n public class Export extends BaseBuildCommand {\n \n \t@CommandLine.Option(names = { \"-O\",\n-\t\t\t\"--output\" }, description = \"The name or path to use for the exported file. If not specified a name will be determined from the original source ref\")\n+\t\t\t\"--output\" }, description = \"The name or path to use for the exported file. If not specified a name will be determined from the original source reference and export flags.\")\n \tPath outputFile;\n \n \t@CommandLine.Option(names = { \"--force\",\n \t}, description = \"Force export, i.e. overwrite exported file if already exists\", defaultValue = \"false\")\n \tboolean force;\n \n-\t@CommandLine.Option(names = {\n-\t\t\t\"--portable\" }, description = \"Make portable and standalone jar\")\n-\tboolean portable;\n+\t@CommandLine.ArgGroup(exclusive = true, multiplicity = \"0..1\")\n+\tExportStyle exportStyle = new ExportStyle();\n+\n+\tstatic class ExportStyle {\n+\t\t@CommandLine.Option(names = \"--local\", description = \"Export built jar as is\")\n+\t\tboolean local = true;\n+\t\t@CommandLine.Option(names = \"--portable\", description = \"Make portable and standalone jar\")\n+\t\tboolean portable;\n+\t\t@CommandLine.Option(names = \"--mavenrepo\", description = \"Export artifacts to be used in a maven repository\")\n+\t\tboolean mavenpublish;\n+\t}\n \n \tenum Style {\n \t\tlocal {\n \n-\t\t\tpublic int apply(Export export, Source src, Path outputPath) throws IOException {\n+\t\t\tpublic int apply(Export export, Source src, RunContext ctx) throws IOException {\n+\n+\t\t\t\tPath outputPath = export.getFileOutputPath(ctx);\n \t\t\t\t// Copy the JAR or native binary\n \t\t\t\tPath source = src.getJarFile().toPath();\n \t\t\t\tif (export.nativeImage) {\n@@ -62,7 +75,10 @@ public int apply(Export export, Source src, Path outputPath) throws IOException\n \t\t},\n \t\tportable {\n \t\t\t@Override\n-\t\t\tpublic int apply(Export export, Source src, Path outputPath) throws IOException {\n+\t\t\tpublic int apply(Export export, Source src, RunContext ctx) throws IOException {\n+\n+\t\t\t\tPath outputPath = export.getFileOutputPath(ctx);\n+\n \t\t\t\t// Copy the JAR or native binary\n \t\t\t\tPath source = src.getJarFile().toPath();\n \t\t\t\tif (export.nativeImage) {\n@@ -128,12 +144,103 @@ public int apply(Export export, Source src, Path outputPath) throws IOException\n \t\t\t\t\t\tthrow new ExitException(1, \"Error during updating jar\");\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\texport.info(\"Exported to \" + outputPath);\n+\t\t\t\treturn EXIT_OK;\n+\t\t\t}\n+\t\t},\n+\t\tmavenPublish {\n+\t\t\t@Override\n+\t\t\tpublic int apply(Export export, Source src, RunContext ctx) throws IOException {\n+\n+\t\t\t\tPath outputPath = export.outputFile;\n+\n+\t\t\t\tif (outputPath == null) {\n+\t\t\t\t\toutputPath = Settings.getLocalMavenRepo().toPath();\n+\t\t\t\t}\n+\t\t\t\t// Copy the JAR or native binary\n+\t\t\t\tPath source = src.getJarFile().toPath();\n+\t\t\t\tif (export.nativeImage) {\n+\t\t\t\t\tsource = getImageName(source.toFile()).toPath();\n+\t\t\t\t}\n+\n+\t\t\t\tif (!outputPath.toFile().isDirectory()) {\n+\t\t\t\t\tif (outputPath.toFile().exists()) {\n+\t\t\t\t\t\texport.warn(\"Cannot export to maven publish as \" + outputPath + \" is not a directory.\");\n+\t\t\t\t\t\treturn EXIT_INVALID_INPUT;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (export.force) {\n+\t\t\t\t\t\toutputPath.toFile().mkdirs();\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texport.warn(\"Cannot export as \" + outputPath + \" does not exist. Use --force to create.\");\n+\t\t\t\t\t\treturn EXIT_INVALID_INPUT;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tString group = ctx.getProperties().getOrDefault(\"group\", \"g.a.v\");\n+\n+\t\t\t\tif (group == null) {\n+\t\t\t\t\texport.warn(\n+\t\t\t\t\t\t\t\"Cannot export to maven publish as no group specified. Add -Dgroup=<group id> and run again.\");\n+\t\t\t\t\treturn EXIT_INVALID_INPUT;\n+\n+\t\t\t\t}\n+\t\t\t\tPath groupdir = outputPath.resolve(Paths.get(group.replace(\".\", \"/\")));\n+\n+\t\t\t\tString artifact = ctx\t.getProperties()\n+\t\t\t\t\t\t\t\t\t\t.getOrDefault(\"artifact\",\n+\t\t\t\t\t\t\t\t\t\t\t\tUtil.getBaseName(src.getResourceRef().getFile().getName()));\n+\t\t\t\tPath artifactDir = groupdir.resolve(artifact);\n+\n+\t\t\t\tString version = ctx.getProperties().getOrDefault(\"version\", \"999-SNAPSHOT\");\n+\t\t\t\tPath versionDir = artifactDir.resolve(version);\n+\n+\t\t\t\tString suffix = source\t.getFileName()\n+\t\t\t\t\t\t\t\t\t\t.toString()\n+\t\t\t\t\t\t\t\t\t\t.substring(source.getFileName().toString().lastIndexOf(\".\"));\n+\t\t\t\tPath artifactFile = versionDir.resolve(artifact + \"-\" + version + suffix);\n+\n+\t\t\t\tartifactFile.getParent().toFile().mkdirs();\n+\n+\t\t\t\tif (artifactFile.toFile().exists()) {\n+\t\t\t\t\tif (export.force) {\n+\t\t\t\t\t\tartifactFile.toFile().delete();\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texport.warn(\"Cannot export as \" + artifactFile + \" already exists. Use --force to overwrite.\");\n+\t\t\t\t\t\treturn EXIT_INVALID_INPUT;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\texport.info(\"Writing \" + artifactFile);\n+\t\t\t\tFiles.copy(source, artifactFile);\n+\n+\t\t\t\t// generate pom.xml ... if jar could technically just copy from the jar ...but\n+\t\t\t\t// not possible when native thus for now just regenerate it\n+\t\t\t\tTemplate pomTemplate = TemplateEngine.instance().getTemplate(\"pom.qute.xml\");\n+\n+\t\t\t\tPath pomPath = versionDir.resolve(artifact + \"-\" + version + \".pom\");\n+\t\t\t\tif (pomTemplate == null) {\n+\t\t\t\t\t// ignore\n+\t\t\t\t\tUtil.warnMsg(\"Could not locate pom.xml template\");\n+\t\t\t\t} else {\n+\n+\t\t\t\t\tString pomfile = pomTemplate\n+\t\t\t\t\t\t\t\t\t\t\t\t.data(\"baseName\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tUtil.getBaseName(src.getResourceRef().getFile().getName()))\n+\t\t\t\t\t\t\t\t\t\t\t\t.data(\"group\", group)\n+\t\t\t\t\t\t\t\t\t\t\t\t.data(\"artifact\", artifact)\n+\t\t\t\t\t\t\t\t\t\t\t\t.data(\"version\", version)\n+\t\t\t\t\t\t\t\t\t\t\t\t.data(\"dependencies\", ctx.getClassPath().getArtifacts())\n+\t\t\t\t\t\t\t\t\t\t\t\t.render();\n+\t\t\t\t\texport.info(\"Writing \" + pomPath);\n+\t\t\t\t\tUtil.writeString(pomPath, pomfile);\n+\n+\t\t\t\t}\n+\n \t\t\t\texport.info(\"Exported to \" + outputPath);\n \t\t\t\treturn EXIT_OK;\n \t\t\t}\n \t\t};\n \n-\t\tpublic abstract int apply(Export export, Source src, Path outputPath) throws IOException;\n+\t\tpublic abstract int apply(Export export, Source src, RunContext ctx) throws IOException;\n \t}\n \n \t@Override\n@@ -147,6 +254,17 @@ public Integer doCall() throws IOException {\n \n \t\tsrc = buildIfNeeded(src, ctx);\n \n+\t\tStyle style = Style.local;\n+\n+\t\tif (exportStyle.portable) {\n+\t\t\tstyle = Style.portable;\n+\t\t} else if (exportStyle.mavenpublish) {\n+\t\t\tstyle = Style.mavenPublish;\n+\t\t}\n+\t\treturn style.apply(this, src, ctx);\n+\t}\n+\n+\tPath getFileOutputPath(RunContext ctx) {\n \t\t// Determine the output file location and name\n \t\tPath cwd = Util.getCwd();\n \t\tPath outputPath;\n@@ -162,9 +280,15 @@ public Integer doCall() throws IOException {\n \t\t\toutputPath = Paths.get(outName);\n \t\t}\n \t\toutputPath = cwd.resolve(outputPath);\n+\t\treturn outputPath;\n+\t}\n \n-\t\tStyle style = portable ? Style.portable : Style.local;\n+\tpublic static String removeFileExtension(String filename, boolean removeAllExtensions) {\n+\t\tif (filename == null || filename.isEmpty()) {\n+\t\t\treturn filename;\n+\t\t}\n \n-\t\treturn style.apply(this, src, outputPath);\n+\t\tString extPattern = \"(?<!^)[.]\" + (removeAllExtensions ? \".*\" : \"[^.]*$\");\n+\t\treturn filename.replaceAll(extPattern, \"\");\n \t}\n }"
  },
  {
    "sha": "8a3c0423f1f0466aa407d5ead003cb38a3a96c9d",
    "filename": "src/main/resources/pom.qute.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/jbangdev/jbang/blob/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/main/resources/pom.qute.xml",
    "raw_url": "https://github.com/jbangdev/jbang/raw/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/main/resources/pom.qute.xml",
    "contents_url": "https://api.github.com/repos/jbangdev/jbang/contents/src/main/resources/pom.qute.xml?ref=dc45929149ed6196f47d5b2e41be84d4bfdeff27",
    "patch": "@@ -3,9 +3,9 @@\n \t\t xmlns=\"http://maven.apache.org/POM/4.0.0\"\n \t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n \t<modelVersion>4.0.0</modelVersion>\n-\t<groupId>dev.jbang.user</groupId>\n-\t<artifactId>{baseName}</artifactId>\n-\t<version>999-SNAPSHOT</version>\n+\t<groupId>{group}</groupId>\n+\t<artifactId>{artifact}</artifactId>\n+\t<version>{version}</version>\n \t<dependencies>\n \t\t{#for item in dependencies}\n \t\t<dependency>"
  },
  {
    "sha": "2e02b7a4dd4425debed56187738a4a1fa548ef52",
    "filename": "src/test/java/dev/jbang/cli/TestExport.java",
    "status": "modified",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/jbangdev/jbang/blob/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/test/java/dev/jbang/cli/TestExport.java",
    "raw_url": "https://github.com/jbangdev/jbang/raw/dc45929149ed6196f47d5b2e41be84d4bfdeff27/src/test/java/dev/jbang/cli/TestExport.java",
    "contents_url": "https://api.github.com/repos/jbangdev/jbang/contents/src/test/java/dev/jbang/cli/TestExport.java?ref=dc45929149ed6196f47d5b2e41be84d4bfdeff27",
    "patch": "@@ -2,16 +2,19 @@\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.matchesPattern;\n import static org.hamcrest.Matchers.not;\n import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n import static org.hamcrest.io.FileMatchers.anExistingFileOrDirectory;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.Comparator;\n import java.util.jar.Attributes;\n import java.util.jar.JarInputStream;\n import java.util.jar.Manifest;\n@@ -24,6 +27,9 @@\n import org.junit.rules.TemporaryFolder;\n \n import dev.jbang.BaseTest;\n+import dev.jbang.Settings;\n+\n+import sun.tools.jar.resources.jar;\n \n public class TestExport extends BaseTest {\n \n@@ -98,4 +104,57 @@ void testExportWithClasspath() throws IOException {\n \n \t}\n \n+\t@Test\n+\tvoid testExportMavenPublishNoclasspath() throws IOException {\n+\t\tFile outFile = out.resolve(\"target\").toFile();\n+\t\toutFile.mkdirs();\n+\t\tExecutionResult result = checkedRun(null, \"export\", \"--mavenrepo\", \"-O\", outFile.toString(),\n+\t\t\t\t\"-Dgroup=my.thing.right\", \"itests/helloworld.java\");\n+\t\tassertThat(result.err, matchesPattern(\"(?s).*Exported to.*target\\n\"));\n+\t\tassertThat(\n+\t\t\t\toutFile.toPath().resolve(\"my/thing/right/helloworld/999-SNAPSHOT/helloworld-999-SNAPSHOT.jar\").toFile(),\n+\t\t\t\tanExistingFile());\n+\t\tassertThat(\n+\t\t\t\toutFile.toPath().resolve(\"my/thing/right/helloworld/999-SNAPSHOT/helloworld-999-SNAPSHOT.pom\").toFile(),\n+\t\t\t\tanExistingFile());\n+\n+\t}\n+\n+\t@Test\n+\tvoid testExportMavenPublishNoOutputdir() throws IOException {\n+\t\tFile outFile = out.resolve(\"target\").toFile();\n+\t\t// outFile.mkdirs();\n+\t\tExecutionResult result = checkedRun(null, \"export\", \"--mavenrepo\", \"-O\", outFile.toString(),\n+\t\t\t\t\"-Dgroup=my.thing.right\", \"itests/helloworld.java\");\n+\t\tassertThat(result.exitCode, equalTo(BaseCommand.EXIT_INVALID_INPUT));\n+\n+\t}\n+\n+\t// @Test\n+\tvoid testExportMavenPublishNoGroup() throws IOException {\n+\t\tFile outFile = out.resolve(\"target\").toFile();\n+\t\toutFile.mkdirs();\n+\t\tExecutionResult result = checkedRun(null, \"export\", \"--force\", \"--mavenrepo\", \"-O\", outFile.toString(),\n+\t\t\t\t\"itests/helloworld.java\");\n+\t\tassertThat(result.exitCode, equalTo(BaseCommand.EXIT_INVALID_INPUT));\n+\t\tassertThat(result.err, matchesPattern(\"(?s).*-Dgroup=.*\"));\n+\n+\t}\n+\n+\t@Test\n+\tvoid testExportMavenPublishWithClasspath() throws IOException {\n+\t\tFile outFile = Settings.getLocalMavenRepo();\n+\t\tExecutionResult result = checkedRun(null, \"export\", \"--mavenrepo\", \"--force\",\n+\t\t\t\t\"itests/classpath_log.java\");\n+\t\tassertThat(outFile.toPath().resolve(\"g/a/v/classpath_log/999-SNAPSHOT/classpath_log-999-SNAPSHOT.jar\").toFile(),\n+\t\t\t\tanExistingFile());\n+\t\tassertThat(outFile.toPath().resolve(\"g/a/v/classpath_log/999-SNAPSHOT/classpath_log-999-SNAPSHOT.pom\").toFile(),\n+\t\t\t\tanExistingFile());\n+\n+\t\tFiles\t.walk(outFile.toPath().resolve(\"g\"))\n+\t\t\t\t.sorted(Comparator.reverseOrder())\n+\t\t\t\t.map(Path::toFile)\n+\t\t\t\t.forEach(File::delete);\n+\n+\t}\n }"
  }
]
