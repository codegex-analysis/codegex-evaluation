[
  {
    "sha": "2cdc94180a41290ebadc51ad0466f9998ca5b00b",
    "filename": "Application.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/Application.java",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/Application.java",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/Application.java?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -0,0 +1,14 @@\n+package ru.geekbrains.springboot;\r\n+\r\n+import org.springframework.boot.SpringApplication;\r\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\r\n+\r\n+@SpringBootApplication\r\n+public class Application {\r\n+\r\n+    public static void main(String[] args) {\r\n+        SpringApplication.run(Application.class, args);\r\n+    }\r\n+\r\n+}\r\n+\r"
  },
  {
    "sha": "f3ab32f131f1546ae5c6903b43fccefb506030df",
    "filename": "InvalidProductNameException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/InvalidProductNameException.java",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/InvalidProductNameException.java",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/InvalidProductNameException.java?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.geekbrains.springboot.exception;\r\n+\r\n+public class InvalidProductNameException extends Throwable {\r\n+    public InvalidProductNameException(){\r\n+        System.out.println(\"Пустое имя продукта\");\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f1491c82ecf8757f9e55f7893f2a9d986bce5028",
    "filename": "Product.java",
    "status": "modified",
    "additions": 70,
    "deletions": 45,
    "changes": 115,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/Product.java",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/Product.java",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/Product.java?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -1,45 +1,70 @@\n-\n-\n-public class Product {\n-    private int id;\n-    private String title;\n-    private double coast;\n-\n-    public Product(int id, String title, double coast) {\n-        this.id = id;\n-        this.title = title;\n-        this.coast = coast;\n-    }\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public String getTitle() {\n-        return title;\n-    }\n-\n-    public double getCoast() {\n-        return coast;\n-    }\n-\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-\n-    public void setTitle(String title) {\n-        this.title = title;\n-    }\n-\n-    public void setCoast(double coast) {\n-        this.coast = coast;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"id = \" + id +\n-               \", title = '\" + title +\n-                \", coast = \" + coast  +\n-                 '\\n';\n-    }\n-}\n+package ru.geekbrains.springboot.model;\r\n+\r\n+import lombok.AllArgsConstructor;\r\n+import lombok.Data;\r\n+import lombok.Getter;\r\n+import lombok.Setter;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+@Entity\r\n+@Table(name = \"product_table\")\r\n+public class Product {\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    @Column(name = \"id\")\r\n+    private int id;\r\n+\r\n+    @Column(name = \"title\")\r\n+    private String title;\r\n+\r\n+    @Column(name = \"price\")\r\n+    private int coast;\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"id = \" + id +\r\n+                \", title = '\" + title +\r\n+                \", coast = \" + coast  +\r\n+                '\\n';\r\n+    }\r\n+\r\n+    public Product() {\r\n+    }\r\n+\r\n+    public Product(int id, String title, int coast) {\r\n+        this.id = id;\r\n+        this.title = title;\r\n+        this.coast = coast;\r\n+    }\r\n+\r\n+    public Product(String title, int coast) {\r\n+        this.title = title;\r\n+        this.coast = coast;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getTitle() {\r\n+        return title;\r\n+    }\r\n+\r\n+    public void setTitle(String title) {\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    public double getCoast() {\r\n+        return coast;\r\n+    }\r\n+\r\n+    public void setCoast(int coast) {\r\n+        this.coast = coast;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "04dd05b1a81359861988f011d30d171b51d583aa",
    "filename": "ProductController.java",
    "status": "modified",
    "additions": 25,
    "deletions": 9,
    "changes": 34,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/ProductController.java",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/ProductController.java",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/ProductController.java?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -1,13 +1,19 @@\n-package ru.geekbrains.spring.controllers;\r\n+package ru.geekbrains.springboot.controllers;\r\n \r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n-import org.springframework.http.HttpStatus;\r\n import org.springframework.stereotype.Controller;\r\n import org.springframework.ui.Model;\r\n import org.springframework.web.bind.annotation.*;\r\n-import ru.geekbrains.spring.model.Product;\r\n-import ru.geekbrains.spring.sevices.ProductService;\r\n+import ru.geekbrains.springboot.sevices.ProductService;\r\n+\r\n+import java.io.IOException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Collectors;\r\n \r\n @Controller\r\n @RequestMapping(\"/product\")\r\n@@ -19,7 +25,7 @@\n     public ProductController(ProductService productService){\r\n         this.productService = productService;\r\n     }\r\n-//  http://localhost:8189/app/product\r\n+\r\n     @GetMapping(\"/productAll\")\r\n     public String getAllProduct(Model model){\r\n         model.addAttribute(\"frontProduct\", productService.getProductList());\r\n@@ -32,7 +38,7 @@ public String deleteBoxById(@PathVariable int id) {\n     }\r\n \r\n     @PostMapping(\"/add\")\r\n-    public String addNewProduct(@RequestParam String title, @RequestParam double coast) {\r\n+    public String addNewProduct(@RequestParam String title, @RequestParam int coast) {\r\n         productService.addProduct(title,coast);\r\n         return \"redirect:/product/productAll\";\r\n     }\r\n@@ -43,9 +49,19 @@ public String updateProduct(@PathVariable Integer id, Model model) {\n         model.addAttribute(\"updateProduct\", productService.getProductById(id));\r\n         return \"productUpdate\";\r\n     }\r\n-    @GetMapping(\"/update/{id}{title}\")\r\n-    public String updateProduct(@PathVariable Integer id,@PathVariable String title) {\r\n-        productService.updateName(id,title);\r\n+    @PostMapping(\"/updateTitle/{id}\")\r\n+    public String updateProductTitle(@PathVariable Integer id,@RequestParam String newTitle) {\r\n+        productService.updateName(id,newTitle);\r\n+        System.out.println(\"Title = \" + newTitle);\r\n+        LOG.debug(\"Id = \" + id);\r\n+        System.out.println(\"Id = \" + id);\r\n+        return \"redirect:/product/productAll\";\r\n+    }\r\n+\r\n+    @PostMapping(\"/updateCoast/{id}\")\r\n+    public String updateProductCoast(@PathVariable Integer id,@RequestParam int newCoast) {\r\n+        productService.updateCoast(id,newCoast);\r\n+        System.out.println(\"Title = \" + newCoast);\r\n         LOG.debug(\"Id = \" + id);\r\n         System.out.println(\"Id = \" + id);\r\n         return \"redirect:/product/productAll\";\r"
  },
  {
    "sha": "adf2392111a2cbc7d92718142db8cefca3af92d2",
    "filename": "ProductRepository.java",
    "status": "modified",
    "additions": 116,
    "deletions": 49,
    "changes": 165,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/ProductRepository.java",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/ProductRepository.java?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -1,49 +1,116 @@\n-\n-import java.util.Collections;\n-import java.util.List;\n-\n-@Component\n-public class ProductRepository {\n-    private List<Product> listProduct;\n-\n-    public List<Product> getProduct(){\n-        return Collections.unmodifiableList(listProduct);\n-    }\n-\n-    @PostConstruct\n-    public void init(){\n-        listProduct = new ArrayList<>();\n-        listProduct.add(new Product(1,\"Potato\", 25.35D));\n-        listProduct.add(new Product(2,\"Cucumber\", 35.5D));\n-        listProduct.add(new Product(3,\"Tomato\", 125.75D));\n-        listProduct.add(new Product(4,\"Shampoo\", 367.89D));\n-        listProduct.add(new Product(5,\"Chicken\", 78.22D));\n-        listProduct.add(new Product(6,\"Soap\", 23.74D));\n-        listProduct.add(new Product(7,\"Jemeson\", 2000.55D));\n-        listProduct.add(new Product(8,\"Pork\", 65.3D));\n-        listProduct.add(new Product(9,\"Sausages\", 71.5D));\n-        listProduct.add(new Product(10,\"Beef\", 800D));\n-    }\n-\n-    public void add(Product product){\n-        listProduct.add(product);\n-    }\n-\n-    public void updateProductName(int id, String newName){\n-        for (Product product : listProduct){\n-            if(product.getId() == id){\n-                product.setTitle(newName);\n-            }\n-        }\n-    }\n-    public void updateProductCoast(int id, double newCoast){\n-        for (Product product : listProduct){\n-            if(product.getId() == id){\n-                product.setCoast(newCoast);\n-            }\n-        }\n-    }\n-    public void removeProduct(int id) {\n-        listProduct.removeIf(product -> product.getId() == id);\n-    }\n-}\n+package ru.geekbrains.springboot.repositories;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.springframework.stereotype.Component;\r\n+import org.springframework.stereotype.Repository;\r\n+import ru.geekbrains.springboot.model.Product;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import java.io.IOException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Paths;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+\r\n+@Repository\r\n+public class ProductRepository {\r\n+    private List<Product> listProduct;\r\n+    private static SessionFactory factory;\r\n+\r\n+    public List<Product> getProduct(){\r\n+        try(Session session = factory.getCurrentSession()){\r\n+            session.beginTransaction();\r\n+\r\n+            listProduct = session.createQuery(\"from Product\").getResultList();\r\n+\r\n+            session.getTransaction().commit();\r\n+        }\r\n+        return Collections.unmodifiableList(listProduct);\r\n+    }\r\n+\r\n+    @PostConstruct\r\n+    public void init(){\r\n+        forcePrepareData();\r\n+        factory = new Configuration()\r\n+                .configure(\"config/productController/hibernate.cfg.xml\")\r\n+                .buildSessionFactory();\r\n+\r\n+\r\n+//        listProduct = new ArrayList<>();\r\n+//        listProduct.add(new Product(1,\"Potato\", 25));\r\n+//        listProduct.add(new Product(2,\"Cucumber\", 35));\r\n+//        listProduct.add(new Product(3,\"Tomato\", 125));\r\n+//        listProduct.add(new Product(4,\"Shampoo\", 367));\r\n+//        listProduct.add(new Product(5,\"Chicken\", 78));\r\n+//        listProduct.add(new Product(6,\"Soap\", 23));\r\n+//        listProduct.add(new Product(7,\"Jemeson\", 2000));\r\n+//        listProduct.add(new Product(8,\"Pork\", 65));\r\n+//        listProduct.add(new Product(9,\"Sausages\", 71));\r\n+//        listProduct.add(new Product(10,\"Beef\", 800));\r\n+    }\r\n+\r\n+    public void add(Product product){\r\n+        try(Session session = factory.getCurrentSession()){\r\n+            session.beginTransaction();\r\n+            session.save(new Product(product.getTitle(), (int) product.getCoast()));\r\n+            session.getTransaction().commit();\r\n+            listProduct.add(product);\r\n+        }\r\n+//        listProduct.add(product);\r\n+    }\r\n+\r\n+    public void updateProductName(int id, String newName){\r\n+        try (Session session = factory.getCurrentSession()) {\r\n+            session.beginTransaction();\r\n+            Product product = session.get(Product.class, id);\r\n+            product.setTitle(newName);\r\n+            session.getTransaction().commit();\r\n+        }\r\n+    }\r\n+    public void updateProductCoast(int id, int newCoast){\r\n+        try (Session session = factory.getCurrentSession()) {\r\n+            session.beginTransaction();\r\n+            Product product = session.get(Product.class, id);\r\n+            product.setCoast(newCoast);\r\n+            session.getTransaction().commit();\r\n+        }\r\n+\r\n+    }\r\n+    public void removeProduct(int id) {\r\n+        try (Session session = factory.getCurrentSession()) {\r\n+            session.beginTransaction();\r\n+            Product product = session.get(Product.class, id);\r\n+            session.delete(product);\r\n+            session.getTransaction().commit();\r\n+        }\r\n+//        listProduct.removeIf(product -> product.getId() == id);\r\n+    }\r\n+\r\n+    public static void forcePrepareData() {\r\n+        SessionFactory factory = new Configuration()\r\n+                .configure(\"config/hibernate.cfg.xml\")\r\n+                .buildSessionFactory();\r\n+        Session session = null;\r\n+        try {\r\n+            String sql = Files.lines(Paths.get(\"full.sql\")).collect(Collectors.joining(\" \"));\r\n+            session = factory.getCurrentSession();\r\n+            session.beginTransaction();\r\n+            session.createNativeQuery(sql).executeUpdate();\r\n+            session.getTransaction().commit();\r\n+        } catch (IOException e) {\r\n+            e.printStackTrace();\r\n+        } finally {\r\n+            factory.close();\r\n+            if (session != null) {\r\n+                session.close();\r\n+            }\r\n+        }\r\n+    }\r\n+    public static void shutdown(){\r\n+        factory.close();\r\n+    }\r\n+}\r"
  },
  {
    "sha": "f3a060487480a60c796a01c537f97556ab1e32ea",
    "filename": "ProductService.java",
    "status": "modified",
    "additions": 106,
    "deletions": 65,
    "changes": 171,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/ProductService.java",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/ProductService.java",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/ProductService.java?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -1,65 +1,106 @@\n-\n-import java.util.List;\n-\n-@Component\n-public class ProductService {\n-\n-    @Autowired\n-    private ProductRepository productRepository;\n-\n-    List<Product> product;\n-\n-    public List<Product> getProductList(){\n-\n-    }\n-\n-\n-    public int productCount(){\n-        product = getProductList();\n-        return product.size();\n-\n-    }\n-    public int calculateAverageProductCoast(){\n-        product = getProductList();\n-        if(product.size() == 0){\n-            return 0;\n-        }\n-        int avg = 0;\n-        for (Product p : product){\n-            avg += p.getCoast();\n-        }\n-        avg /= product.size();\n-        return avg;\n-    }\n-\n-    public void addProduct(String name, double coast){\n-        int id = productCount() + 1;\n-        productRepository.add(new Product(id, name, coast));\n-        System.out.println(\"Продукт добавлен\");\n-    }\n-\n-    public Product getProductByName(String name){\n-        product = getProductList();\n-        Product productFromId = null;\n-        for (Product p : product){\n-            if(p.getTitle().equals(name)){\n-                productFromId = p;\n-            }\n-        }\n-        return productFromId;\n-    }\n-\n-        System.out.println(\"Название продукта обновлено\");\n-    }\n-\n-    public void updateCoast(String name, double newCoast){\n-        Product updateProduct = getProductByName(name);\n-        productRepository.updateProductCoast(updateProduct.getId(), newCoast);\n-        System.out.println(\"Цена продукта обновлена\");\n-    }\n-\n-\n-        System.out.println(\"Продукт удален.\");\n-    }\n-\n-}\n+package ru.geekbrains.springboot.sevices;\r\n+\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Component;\r\n+import org.springframework.stereotype.Service;\r\n+import ru.geekbrains.springboot.exception.InvalidProductNameException;\r\n+import ru.geekbrains.springboot.model.Product;\r\n+import ru.geekbrains.springboot.repositories.ProductRepository;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Optional;\r\n+\r\n+@Service\r\n+public class ProductService {\r\n+\r\n+    @Autowired\r\n+    private ProductRepository productRepository;\r\n+\r\n+\r\n+    public List<Product> getProductList(){\r\n+        return productRepository.getProduct();\r\n+    }\r\n+\r\n+\r\n+    public int productCount(){\r\n+        List<Product> product = getProductList();\r\n+        return product.size();\r\n+\r\n+    }\r\n+    public int calculateAverageProductCoast(){\r\n+        List<Product> product = getProductList();\r\n+        if(product.size() == 0){\r\n+            return 0;\r\n+        }\r\n+        int avg = 0;\r\n+        for (Product p : product){\r\n+            avg += p.getCoast();\r\n+        }\r\n+        avg /= product.size();\r\n+        return avg;\r\n+    }\r\n+\r\n+    public void addProduct(String name, int coast){\r\n+        int id = productCount() + 1;\r\n+        if(name.isEmpty()){\r\n+            try {\r\n+                throw new InvalidProductNameException();\r\n+            } catch (InvalidProductNameException e) {\r\n+//                e.printStackTrace();\r\n+            }\r\n+        }else{\r\n+            System.out.println(\"Name : \" + name);\r\n+            productRepository.add(new Product(id, name, coast));\r\n+            System.out.println(\"Продукт добавлен\");\r\n+        }\r\n+    }\r\n+\r\n+    public Product getProductByName(String name){\r\n+        List<Product> product = getProductList();\r\n+        Product productFromId = null;\r\n+        for (Product p : product){\r\n+            if(p.getTitle().equals(name)){\r\n+                productFromId = p;\r\n+            }\r\n+        }\r\n+        return productFromId;\r\n+    }\r\n+    public List<Product> getProductById(int id){\r\n+        List<Product> oneProduct = new ArrayList<>();\r\n+        id--;\r\n+        List<Product> product = getProductList();\r\n+        oneProduct.add(product.get(id));\r\n+        return oneProduct;\r\n+\r\n+//        id--;\r\n+//        product = getProductList();\r\n+//        int finalId = id;\r\n+//        return product.stream().filter(s -> s.getId() == finalId).findFirst();\r\n+    }\r\n+\r\n+\r\n+    public void updateName(int id, String newName) {\r\n+        if(newName.isEmpty()){\r\n+            try {\r\n+                throw new InvalidProductNameException();\r\n+            } catch (InvalidProductNameException e) {\r\n+//                e.printStackTrace();\r\n+            }\r\n+        }else{\r\n+            productRepository.updateProductName(id, newName);\r\n+            System.out.println(\"Название продукта обновлено\");\r\n+        }\r\n+    }\r\n+\r\n+    public void updateCoast(int id, int newCoast){\r\n+        productRepository.updateProductCoast(id, newCoast);\r\n+        System.out.println(\"Цена продукта обновлена\");\r\n+    }\r\n+\r\n+    public void removeProductById(int id){\r\n+        productRepository.removeProduct(id);\r\n+        System.out.println(\"Продукт удален.\");\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "c2422949964975ba5cedac23af85d1bfebe856d7",
    "filename": "application.yaml",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/application.yaml",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/application.yaml",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/application.yaml?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -0,0 +1,23 @@\n+server:\r\n+  port: 8189\r\n+  servlet:\r\n+    context-path: /app\r\n+\r\n+spring:\r\n+  thymeleaf:\r\n+    encoding: UTF-8\r\n+    mode: HTML\r\n+    #    prefix: /templates\r\n+    suffix: .html\r\n+\r\n+hybernate:\r\n+  connection:\r\n+    driver_class: org.postgresql.Driver\r\n+    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=product\r\n+    username: postgres\r\n+    password: 1qaz@WSX\r\n+  show_sql: true\r\n+  dialect: org.hibernate.dialect.PostgreSQL95Dialect\r\n+  current_session_context_class: thread\r\n+#  mapping:\r\n+#    class: ru.geekbrains.springboot.model.Product\n\\ No newline at end of file"
  },
  {
    "sha": "7e6e308bc21629a42b6ff063ccc007c675f382ff",
    "filename": "full.sql",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/full.sql",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/full.sql",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/full.sql?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS product_table CASCADE;\r\n+CREATE TABLE product_table (id bigserial PRIMARY KEY, title VARCHAR(255), price int);\r\n+INSERT INTO product_table (title, price) VALUES\r\n+('Potato', 25),\r\n+('Cucumber', 35),\r\n+('Tomato', 125),\r\n+('Shampoo', 367),\r\n+('Chicken', 78),\r\n+('Soap', 23),\r\n+('Jemeson', 2000),\r\n+('Pork', 65),\r\n+('Sausages', 71),\r\n+('Beef', 800);\n\\ No newline at end of file"
  },
  {
    "sha": "57815c28bf2381dde3cfd6f0d9d462b9cfa6061e",
    "filename": "hibernate.cfg.xml",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/hibernate.cfg.xml",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/hibernate.cfg.xml?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -0,0 +1,16 @@\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+        <property name=\"connection.driver_class\">org.postgresql.Driver</property>\r\n+        <property name=\"connection.url\">jdbc:postgresql://localhost:5432/postgres?currentSchema=product</property>\r\n+        <property name=\"connection.username\">postgres</property>\r\n+        <property name=\"connection.password\">1qaz@WSX</property>\r\n+        <property name=\"connection.pool_size\">8</property>\r\n+        <property name=\"dialect\">org.hibernate.dialect.PostgreSQL94Dialect</property>\r\n+        <property name=\"show_sql\">true</property>\r\n+        <property name=\"current_session_context_class\">thread</property>\r\n+    </session-factory>\r\n+</hibernate-configuration>\n\\ No newline at end of file"
  },
  {
    "sha": "11f96d831240f7c9d7be07f400a343df7c079972",
    "filename": "log4j.properties",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/log4j.properties",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/log4j.properties",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/log4j.properties?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -0,0 +1,8 @@\n+# Root logger option\r\n+log4j.rootLogger=DEBUG, stdout\r\n+\r\n+# Direct log messages to stdout\r\n+log4j.appender.stdout=org.apache.log4j.ConsoleAppender\r\n+log4j.appender.stdout.Target=System.out\r\n+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\n+log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p] %c{1}:%M:%L %m%n\r"
  },
  {
    "sha": "9817151de3f403f089b50b8191621453cd6b3a57",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 73,
    "deletions": 17,
    "changes": 90,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/pom.xml",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/pom.xml",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/pom.xml?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -1,28 +1,84 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n-\n-    <groupId>ru.geekbrains.spring.context</groupId>\n-    <artifactId>spring-context</artifactId>\n-    <version>1.0-SNAPSHOT</version>\n-\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.4.3</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>ru.geekbrains</groupId>\n+    <artifactId>spring-boot</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>spring-boot</name>\n+    <description>Demo project for Spring Boot</description>\n     <properties>\n-        <maven.compiler.source>11</maven.compiler.source>\n-        <maven.compiler.target>11</maven.compiler.target>\n+        <java.version>11</java.version>\n     </properties>\n-\n     <dependencies>\n         <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-context</artifactId>\n-            <version>5.3.1</version>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n         </dependency>\n         <dependency>\n-            <groupId>javax.annotation</groupId>\n-            <artifactId>javax.annotation-api</artifactId>\n-            <version>1.3.2</version>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-core</artifactId>\n+            <version>5.4.4.Final</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>42.2.5</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+            <version>5.4.3.Final</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.el</groupId>\n+            <artifactId>javax.el-api</artifactId>\n+            <version>2.2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.glassfish.web</groupId>\n+            <artifactId>javax.el</artifactId>\n+            <version>2.2.4</version>\n+        </dependency>\n+\n+\n     </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+                <configuration>\n+                    <excludes>\n+                        <exclude>\n+                            <groupId>org.projectlombok</groupId>\n+                            <artifactId>lombok</artifactId>\n+                        </exclude>\n+                    </excludes>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "1f54ba5d319e997b17ba91a9a1e07c9f9764b901",
    "filename": "productUpdate.html",
    "status": "modified",
    "additions": 12,
    "deletions": 17,
    "changes": 29,
    "blob_url": "https://github.com/Sorrentovbg/BasicSpringFramework/blob/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/productUpdate.html",
    "raw_url": "https://github.com/Sorrentovbg/BasicSpringFramework/raw/8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791/productUpdate.html",
    "contents_url": "https://api.github.com/repos/Sorrentovbg/BasicSpringFramework/contents/productUpdate.html?ref=8161d5d292e1f1bee1cfb75c2e3ba3e14fc84791",
    "patch": "@@ -3,7 +3,6 @@\n <head>\r\n     <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\r\n     <title>Product update</title>\r\n-\r\n     <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\r\n     <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\r\n     <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\r\n@@ -14,10 +13,9 @@ <h1>Product update:</h1>\n     <table th:if=\"${updateProduct.size() > 0}\" class=\"table\">\r\n         <thead>\r\n         <tr>\r\n-            <td>Data Type</td>`\r\n-            <td>Old parameter</td>\r\n-            <td>New parameter</td>\r\n-            <td>Action</td>\r\n+            <td>ID</td>\r\n+            <td>Title</td>\r\n+            <td>Coast</td>\r\n         </tr>\r\n         </thead>\r\n         <tbody th:each=\"b : ${updateProduct}\">\r\n@@ -29,21 +27,18 @@ <h1>Product update:</h1>\n         <tr>\r\n             <td>Title</td>\r\n             <td th:text=\"${b.title}\"></td>\r\n-            <td><input type=\"text\" name=\"title\"> </td>\r\n-            <td><a class=\"btn btn-danger\" th:href=\"@{'/product/updateTitle/'+ ${b.id} + ${title}}\">Save Title</a></td>\r\n+            <td><form th:action=\"@{'/product/updateTitle/' + ${b.id}}\" method=\"post\">\r\n+                <input type=\"text\" name=\"newTitle\">\r\n+                <button class=\"btn btn-danger\" type=\"submit\">Save new Title</button>\r\n+            </form></td>\r\n         </tr>\r\n         <tr>\r\n             <td>Coast</td>\r\n             <td th:text=\"${b.coast}\"></td>\r\n-            <td><input type=\"number\" step=\"0.01\" name=\"coast\"></td>\r\n-            <td><a class=\"btn btn-danger\" th:href=\"@{'/product/update/'+ ${b.id}}\">Save Coast</a></td>\r\n+            <td><form th:action=\"@{'/product/updateCoast/' + ${b.id}}\" method=\"post\">\r\n+                <input type=\"number\" step=\"0.01\" name=\"newCoast\">\r\n+                <button class=\"btn btn-danger\" type=\"submit\">Save new Coast</button>\r\n+            </form></td>\r\n         </tr>\r\n         </tbody>\r\n-    </table>\r\n-    <span th:unless=\"${updateProduct.size() > 0}\">List product is empty</span>\r\n-    <form th:action=\"@{'/product/productAll'}\">\r\n-        <button class=\"btn btn-primary\" type=\"submit\">Back</button>\r\n-    </form>\r\n-</div>\r\n-</body>\r\n-</html>\n\\ No newline at end of file\n+    </table>\n\\ No newline at end of file"
  }
]
