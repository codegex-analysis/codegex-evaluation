[
  {
    "sha": "d42dfa4b33691cfb858aeaa886e7cc5a8755a71d",
    "filename": "megamek/src/megamek/common/Entity.java",
    "status": "modified",
    "additions": 127,
    "deletions": 179,
    "changes": 306,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/Entity.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/Entity.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/Entity.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -50,6 +50,8 @@\n import megamek.common.actions.TeleMissileAttackAction;\n import megamek.common.actions.WeaponAttackAction;\n import megamek.common.annotations.Nullable;\n+import megamek.common.crew.enums.EdgeStyle;\n+import megamek.common.enums.ReportType;\n import megamek.common.event.GameEntityChangeEvent;\n import megamek.common.icons.Camouflage;\n import megamek.common.options.GameOptions;\n@@ -14061,208 +14063,154 @@ public int getMASCTarget() {\n     }\n \n     /**\n-     * This function cheks for masc failure.\n+     * This function checks for masc failure.\n      *\n-     * @param md         the movement path.\n-     * @param vDesc      the description off the masc failure. used as output.\n-     * @param vCriticals contains tuple of intiger and critical slot. used as output.\n-     * @return true if there was a masc failure.\n+     * @param movePath  the movement path\n+     * @param reports   an Output vector containing the the description off the MASC check.\n+     * @param criticals an Output map between the integer location and a list of critical slots.\n+     * @return true if there was a masc failure\n      */\n-    public boolean checkForMASCFailure(MovePath md, Vector<Report> vDesc,\n-                                       HashMap<Integer, List<CriticalSlot>> vCriticals) {\n-        if (md.hasActiveMASC()) {\n-            boolean bFailure = false;\n-\n-            // If usedMASC is already set, then we've already checked MASC\n-            // this turn. If we succeded before, return false.\n-            // If we failed before, the MASC was destroyed, and we wouldn't\n-            // have gotten here (hasActiveMASC would return false)\n-            if (!usedMASC) {\n-                Mounted masc = getMASC();\n-                Mounted superCharger = getSuperCharger();\n-                bFailure = doMASCCheckFor(masc, vDesc, vCriticals);\n-                boolean bSuperChargeFailure = doMASCCheckFor(superCharger,\n-                                                             vDesc, vCriticals);\n-                usedMASC = true;\n+    public boolean checkForMASCFailure(final MovePath movePath, final Vector<Report> reports,\n+                                       final Map<Integer, List<CriticalSlot>> criticals) {\n+        if (movePath.hasActiveMASC()) {\n+            // If usedMASC is already set, then we've already checked MASC this turn. If we\n+            // succeeded before, return false. If we failed before, the MASC was destroyed, and we\n+            // wouldn't have gotten here (hasActiveMASC would return false)\n+            if (!isMASCUsed()) {\n+                setMASCUsed(true);\n+                boolean bFailure = doMASCCheckFor(getMASC(), reports, criticals);\n+                boolean bSuperChargeFailure = doMASCCheckFor(getSuperCharger(), reports, criticals);\n                 return bFailure || bSuperChargeFailure;\n             }\n         }\n+\n         return false;\n     }\n \n     /**\n      * check one masc system for failure\n      *\n-     * @param masc\n-     * @param vDesc\n-     * @param vCriticals\n-     * @return\n+     * @param masc      the MASC part, or null if there isn't one\n+     * @param reports   an Output vector containing the the description off the MASC check.\n+     * @param criticals an Output map between the integer location and a list of critical slots.\n+     * @return true if there was a masc failure\n      */\n-    private boolean doMASCCheckFor(Mounted masc, Vector<Report> vDesc,\n-                                   HashMap<Integer, List<CriticalSlot>> vCriticals) {\n-        if ((masc != null) && masc.curMode().equals(\"Armed\")) {\n-            boolean bFailure = false;\n-            int nRoll = Compute.d6(2);\n-            if (masc.getType().hasSubType(MiscType.S_SUPERCHARGER)\n+    private boolean doMASCCheckFor(final @Nullable Mounted masc, final Vector<Report> reports,\n+                                   final Map<Integer, List<CriticalSlot>> criticals) {\n+        if ((masc == null) || !masc.curMode().equals(\"Armed\")) {\n+            return false;\n+        }\n+\n+        setMASCUsed(true);\n+\n+        Report report = new Report(2365, getId(), ReportType.HIDDEN, masc.getName());\n+        report.addDesc(this);\n+        reports.addElement(report);\n+\n+        final int mascTarget = getMASCTarget();\n+        final int rollModifier = (masc.getType().hasSubType(MiscType.S_SUPERCHARGER)\n                 && (((this instanceof Mech) && ((Mech) this).isIndustrial())\n-                    || (this instanceof SupportTank) || (this instanceof SupportVTOL))) {\n-                nRoll -= 1;\n-            }\n-            usedMASC = true;\n-            Report r = new Report(2365);\n-            r.subject = getId();\n-            r.addDesc(this);\n-            r.add(masc.getName());\n-            vDesc.addElement(r);\n-            r = new Report(2370);\n-            r.subject = getId();\n-            r.indent();\n-            r.add(getMASCTarget());\n-            r.add(nRoll);\n-\n-            if (nRoll < getMASCTarget()) {\n-                // uh oh\n-                bFailure = true;\n-                r.choose(false);\n-                vDesc.addElement(r);\n-\n-                if (((MiscType) (masc.getType()))\n-                        .hasSubType(MiscType.S_SUPERCHARGER)) {\n-                    // do the damage - engine crits\n-                    int hits = 0;\n-                    int roll = Compute.d6(2);\n-                    r = new Report(6310);\n-                    r.subject = getId();\n-                    r.add(roll);\n-                    r.newlines = 0;\n-                    vDesc.addElement(r);\n-                    if (roll <= 7) {\n-                        // no effect\n-                        r = new Report(6005);\n-                        r.subject = getId();\n-                        r.newlines = 0;\n-                        vDesc.addElement(r);\n-                    } else if ((roll >= 8) && (roll <= 9)) {\n-                        hits = 1;\n-                        r = new Report(6315);\n-                        r.subject = getId();\n-                        r.newlines = 0;\n-                        vDesc.addElement(r);\n-                    } else if ((roll >= 10) && (roll <= 11)) {\n-                        hits = 2;\n-                        r = new Report(6320);\n-                        r.subject = getId();\n-                        r.newlines = 0;\n-                        vDesc.addElement(r);\n-                    } else if (roll == 12) {\n-                        hits = 3;\n-                        r = new Report(6325);\n-                        r.subject = getId();\n-                        r.newlines = 0;\n-                        vDesc.addElement(r);\n-                    }\n-                    if (this instanceof Mech) {\n-                        vCriticals.put(Mech.LOC_CT,\n-                                       new LinkedList<CriticalSlot>());\n-                        for (int i = 0; (i < 12) && (hits > 0); i++) {\n-                            CriticalSlot cs = getCritical(Mech.LOC_CT, i);\n-                            if ((cs.getType() == CriticalSlot.TYPE_SYSTEM)\n-                                && (cs.getIndex() == Mech.SYSTEM_ENGINE)\n-                                && cs.isHittable()) {\n-                                vCriticals.get(Mech.LOC_CT)\n-                                          .add(cs);\n-                                hits--;\n-                            }\n+                || (this instanceof SupportTank) || (this instanceof SupportVTOL))) ? -1 : 0;\n+        final boolean success = getCrew().getEdge().doMASCRoll(EdgeStyle.A_TIME_OF_WAR, reports,\n+                this, mascTarget, rollModifier);\n+        if (!success) {\n+            if (masc.getType().hasSubType(MiscType.S_SUPERCHARGER)) {\n+                // Do the damage - engine criticals\n+                int hits;\n+                int roll = Compute.d6(2);\n+                reports.addElement(new Report(6310, getId(), 0, ReportType.HIDDEN, roll));\n+                if (roll <= 7) {\n+                    hits = 0;\n+                    report = new Report(6005, getId(), 0);\n+                } else if (roll <= 9) {\n+                    hits = 1;\n+                    report = new Report(6315, getId(), 0);\n+                } else if (roll <= 11) {\n+                    hits = 2;\n+                    report = new Report(6320, getId(), 0);\n+                } else { // roll == 12\n+                    hits = 3;\n+                    report = new Report(6325, getId(), 0);\n+                }\n+                reports.addElement(report);\n+\n+                if (this instanceof Mech) {\n+                    criticals.put(Mech.LOC_CT, new LinkedList<>());\n+                    for (int i = 0; (i < 12) && (hits > 0); i++) {\n+                        CriticalSlot cs = getCritical(Mech.LOC_CT, i);\n+                        if ((cs.getType() == CriticalSlot.TYPE_SYSTEM)\n+                                && (cs.getIndex() == Mech.SYSTEM_ENGINE) && cs.isHittable()) {\n+                            criticals.get(Mech.LOC_CT).add(cs);\n+                            hits--;\n                         }\n-                    } else {\n-                        // this must be a Tank\n-                        Tank tank = (Tank) this;\n-                        boolean vtolStabilizerHit = (this instanceof VTOL)\n-                                                    && tank.isStabiliserHit(VTOL.LOC_ROTOR);\n-                        boolean minorMovementDamage = tank\n-                                .hasMinorMovementDamage();\n-                        boolean moderateMovementDamage = tank\n-                                .hasModerateMovementDamage();\n-                        boolean heavyMovementDamage = tank\n-                                .hasHeavyMovementDamage();\n-                        vCriticals.put(Tank.LOC_BODY, new LinkedList<>());\n-                        vCriticals.put(-1, new LinkedList<>());\n+                    }\n+                } else {\n+                    // this must be a Tank\n+                    final Tank tank = (Tank) this;\n+                    boolean vtolStabilizerHit = (this instanceof VTOL) && tank.isStabiliserHit(VTOL.LOC_ROTOR);\n+                    boolean minorMovementDamage = tank.hasMinorMovementDamage();\n+                    boolean moderateMovementDamage = tank.hasModerateMovementDamage();\n+                    boolean heavyMovementDamage = tank.hasHeavyMovementDamage();\n+                    criticals.put(Tank.LOC_BODY, new LinkedList<>());\n+                    criticals.put(-1, new LinkedList<>());\n+                    if (tank instanceof VTOL) {\n+                        criticals.put(VTOL.LOC_ROTOR, new LinkedList<>());\n+                    }\n+                    for (int i = 0; i < hits; i++) {\n                         if (tank instanceof VTOL) {\n-                            vCriticals.put(VTOL.LOC_ROTOR, new LinkedList<>());\n-                        }\n-                        for (int i = 0; i < hits; i++) {\n-                            if (tank instanceof VTOL) {\n-                                if (vtolStabilizerHit) {\n-                                    vCriticals.get(Tank.LOC_BODY).add(new CriticalSlot(\n-                                                      CriticalSlot.TYPE_SYSTEM,\n-                                                      Tank.CRIT_ENGINE));\n-                                } else {\n-                                    vCriticals\n-                                            .get(VTOL.LOC_ROTOR).add(new CriticalSlot(\n-                                                    CriticalSlot.TYPE_SYSTEM,\n-                                                    VTOL.CRIT_FLIGHT_STABILIZER));\n-                                    vtolStabilizerHit = true;\n-                                }\n+                            if (vtolStabilizerHit) {\n+                                criticals.get(Tank.LOC_BODY).add(new CriticalSlot(\n+                                        CriticalSlot.TYPE_SYSTEM, Tank.CRIT_ENGINE));\n                             } else {\n-                                if (heavyMovementDamage) {\n-                                    vCriticals.get(Tank.LOC_BODY).add(new CriticalSlot(\n-                                                      CriticalSlot.TYPE_SYSTEM,\n-                                                      Tank.CRIT_ENGINE));\n-                                } else if (moderateMovementDamage) {\n-                                    // HACK: we abuse the criticalslot item to\n-                                    // signify the calling function to deal\n-                                    // movement damage\n-                                    vCriticals\n-                                            .get(-1).add(new CriticalSlot(\n-                                                    CriticalSlot.TYPE_SYSTEM, 3));\n-                                    heavyMovementDamage = true;\n-                                } else if (minorMovementDamage) {\n-                                    // HACK: we abuse the criticalslot item to\n-                                    // signify the calling function to deal\n-                                    // movement damage\n-                                    vCriticals\n-                                            .get(-1).add(new CriticalSlot(\n-                                                    CriticalSlot.TYPE_SYSTEM, 2));\n-                                    moderateMovementDamage = true;\n-                                } else {\n-                                    // HACK: we abuse the criticalslot item to\n-                                    // signify the calling function to deal\n-                                    // movement damage\n-                                    vCriticals\n-                                            .get(-1).add(new CriticalSlot(\n-                                                    CriticalSlot.TYPE_SYSTEM, 1));\n-                                    minorMovementDamage = true;\n-                                }\n+                                criticals.get(VTOL.LOC_ROTOR).add(new CriticalSlot(\n+                                        CriticalSlot.TYPE_SYSTEM, VTOL.CRIT_FLIGHT_STABILIZER));\n+                                vtolStabilizerHit = true;\n+                            }\n+                        } else {\n+                            if (heavyMovementDamage) {\n+                                criticals.get(Tank.LOC_BODY).add(new CriticalSlot(\n+                                        CriticalSlot.TYPE_SYSTEM, Tank.CRIT_ENGINE));\n+                            } else if (moderateMovementDamage) {\n+                                // HACK: we abuse the criticalslot item to\n+                                // signify the calling function to deal\n+                                // movement damage\n+                                criticals.get(-1).add(new CriticalSlot(CriticalSlot.TYPE_SYSTEM, 3));\n+                                heavyMovementDamage = true;\n+                            } else if (minorMovementDamage) {\n+                                // HACK: we abuse the criticalslot item to\n+                                // signify the calling function to deal\n+                                // movement damage\n+                                criticals.get(-1).add(new CriticalSlot(CriticalSlot.TYPE_SYSTEM, 2));\n+                                moderateMovementDamage = true;\n+                            } else {\n+                                // HACK: we abuse the criticalslot item to\n+                                // signify the calling function to deal\n+                                // movement damage\n+                                criticals.get(-1).add(new CriticalSlot(CriticalSlot.TYPE_SYSTEM, 1));\n+                                minorMovementDamage = true;\n                             }\n-                        }\n-                    }\n-\n-                } else {\n-                    // do the damage.\n-                    // random crit on each leg, but MASC is not destroyed\n-                    for (int loc = 0; loc < locations(); loc++) {\n-                        if (locationIsLeg(loc)\n-                            && (getHittableCriticals(loc) > 0)) {\n-                            CriticalSlot slot = null;\n-                            do {\n-                                int slotIndex = Compute\n-                                        .randomInt(getNumberOfCriticals(loc));\n-                                slot = getCritical(loc, slotIndex);\n-                            } while ((slot == null) || !slot.isHittable());\n-                            vCriticals.put(loc, new LinkedList<>());\n-                            vCriticals.get(loc).add(slot);\n                         }\n                     }\n                 }\n-                // failed a PSR, check for stalling\n-                doCheckEngineStallRoll(vDesc);\n             } else {\n-                r.choose(true);\n-                vDesc.addElement(r);\n+                // Do the damage. Random critical on each leg, but MASC is not destroyed\n+                for (int location = 0; location < locations(); location++) {\n+                    if (locationIsLeg(location) && (getHittableCriticals(location) > 0)) {\n+                        CriticalSlot slot;\n+                        do {\n+                            int slotIndex = Compute.randomInt(getNumberOfCriticals(location));\n+                            slot = getCritical(location, slotIndex);\n+                        } while ((slot == null) || !slot.isHittable());\n+                        criticals.put(location, new LinkedList<>());\n+                        criticals.get(location).add(slot);\n+                    }\n+                }\n             }\n-            return bFailure;\n+            // failed a PSR, check for stalling\n+            doCheckEngineStallRoll(reports);\n         }\n-        return false;\n+\n+        return success;\n     }\n \n     /**"
  },
  {
    "sha": "a78199a93aa911b83b3336bcc737a85a0d01c962",
    "filename": "megamek/src/megamek/common/Report.java",
    "status": "modified",
    "additions": 324,
    "deletions": 209,
    "changes": 533,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/Report.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/Report.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/Report.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -14,9 +14,14 @@\n  */\n package megamek.common;\n \n+import megamek.MegaMek;\n+import megamek.common.annotations.Nullable;\n+import megamek.common.constants.MMConstants;\n+import megamek.common.enums.ReportType;\n+\n import java.io.Serializable;\n-import java.util.Enumeration;\n import java.util.Hashtable;\n+import java.util.Map;\n import java.util.Vector;\n \n /**\n@@ -54,19 +59,17 @@\n  * <code>getText</code> method was called:\n  * <p> \" Crusader (Bob) does 6 damage to the tank.\"\n  *\n+ * Note: some fields are marked transient because they are only used by the\n+ * server (or only the client). This shaves a few bytes off the packet size,\n+ * helping the dial-up people :)\n+ *\n  * @author Ryan McConnell (oscarmm)\n- * @version $Revision$\n- * @since 0.30\n  */\n public class Report implements Serializable {\n-    /*\n-     * Note: some fields are marked transient because they are only used by the\n-     * server (or only the client). This shaves a few bytes off the packet size,\n-     * helping the dial-up people :)\n-     */\n-\n+    //region Variable Declarations\n     private static final long serialVersionUID = -5586008091586682078L;\n-        \n+\n+    //region Constants\n     private static final int MESSAGE_NONE = -1;\n     \n     /** Report Type: visible to all players. */\n@@ -102,189 +105,363 @@\n \n     /** Number of spaces to use per indentation level. */\n     private static final int DEFAULT_INDENTATION = 4;\n-    \n+    //endregion Constants\n+\n     /** Required - associates this object with its text. */\n-    public int messageId = Report.MESSAGE_NONE;\n+    public int messageId;\n     \n     /** The number of spaces this report should be indented. */\n-    private int indentation = 0;\n+    private int indentation;\n \n     /**\n      * The number of newlines to add at the end of this report. Defaults to one.\n      */\n-    public int newlines = 1;\n+    public int newlines;\n \n     /** The data values to fill in the report with. */\n-    private Vector<String> tagData = new Vector<String>();\n+    private Vector<String> tagData;\n \n     /** How to translate the tagData or not at all. */\n-    private String tagTranslate = null;\n+    private String tagTranslate;\n \n     /**\n      * How this report is handled when double-blind play is in effect. See\n-     * constants below for more details.\n+     * constants above for more details.\n      */\n-    public transient int type = Report.HIDDEN;\n+    public transient int type;\n \n     /**\n      * The entity this report concerns, if applicable. If this is left blank,\n      * then the report will be considered <code>public</code>.\n      */\n-    public transient int subject = Entity.NONE;\n+    public transient int subject;\n     \n     /**\n      * The player this report concerns, if applicable. This should be filled in\n      * if this report is not public and still does not belong to a specific\n      * visible entity\n      */\n-    public transient int player = IPlayer.PLAYER_NONE;\n+    public transient int player;\n \n     /**\n      * This hash table will store the tagData Vector indexes that are supposed\n      * to be obscured before sending to clients. This only applies when the\n      * report type is \"obscured\".\n      */\n-    private Hashtable<Integer, Boolean> obscuredIndexes = \n-            new Hashtable<Integer, Boolean>();\n+    private Map<Integer, Boolean> obscuredIndexes;\n \n     /**\n      * Vector to store the player names of those who received an obscured\n      * version of this report. Used to reconstruct individual client's reports\n      * from the master copy stored by the server.\n      */\n-    private Vector<String> obscuredRecipients = new Vector<String>();\n+    private Vector<String> obscuredRecipients;\n \n     /** Keep track of what data we have already substituted for tags. */\n-    private transient int tagCounter = 0;\n+    private transient int tagCounter;\n \n     /** bool for determining when code should be used to show image. */\n-    private transient boolean showImage = false;\n+    private transient boolean showImage;\n \n     /** string to add to reports to show sprites **/\n-    private String imageCode = \"\";\n+    private String imageCode;\n+    //endregion Variable Declarations\n \n+    //region Constructors\n     /**\n-     * Default constructor, note that using this means the\n-     * <code>messageId</code> field must be explicitly set.\n+     * Default constructor, note that using this means the <code>messageId</code> field must be\n+     * explicitly set.\n      */\n     public Report() {\n+        this(MESSAGE_NONE);\n     }\n \n-    /**\n-     * Create a new report associated with the given report text.\n-     *\n-     * @param id the int value of the report from <i>report-messages.properties\n-     * </i>\n-     */\n-    public Report(int id) {\n-        messageId = id;\n+    public Report(final int id) {\n+        this(id, ReportType.HIDDEN);\n     }\n \n-    /**\n-     * Create a new report associated with the given report text and having the\n-     * given type.\n-     *\n-     * @param id the int value of the report from <i>report-messages.properties\n-     *  </i>\n-     * @param type the constant specifying the visibility of the report (PUBLIC,\n-     *            OBSCURED, or HIDDEN)\n-     */\n-    public Report(int id, int type) {\n-        messageId = id;\n-        this.type = type;\n+    public Report(final int id, final ReportType type) {\n+        this(id, Entity.NONE, type);\n+    }\n+\n+    public Report(final int id, final int subject, final ReportType type) {\n+        this(id, subject, 1, type);\n+    }\n+\n+    public Report(final int id, final int subject, final int newlines) {\n+        this(id, subject, newlines, ReportType.HIDDEN);\n+    }\n+\n+    //region int... data\n+    public Report(final int id, final ReportType type, final int... data) {\n+        this(id, type, true, data);\n+    }\n+\n+    public Report(final int id, final ReportType type, final boolean obscure, final int... data) {\n+        this(id, Entity.NONE, type, obscure, data);\n+    }\n+\n+    public Report(final int id, final int subject, final ReportType type, final int... data) {\n+        this(id, subject, type, true, data);\n+    }\n+\n+    public Report(final int id, final int subject, final ReportType type, final boolean obscure,\n+                  final int... data) {\n+        this(id, subject, 1, type, obscure, data);\n+    }\n+\n+    public Report(final int id, final int subject, final int newlines, final ReportType type,\n+                  final int... data) {\n+        this(id, subject, newlines, type, true, data);\n+    }\n+\n+    public Report(final int id, final int subject, final int newlines, final ReportType type,\n+                  final boolean obscure, final int... data) {\n+        this(id, subject, newlines, type);\n+        add(obscure, data);\n+    }\n+    //endregion int... data\n+\n+    //region String... data\n+    public Report(final int id, final ReportType type, final String... data) {\n+        this(id, type, true, data);\n+    }\n+\n+    public Report(final int id, final ReportType type, final boolean obscure, final String... data) {\n+        this(id, Entity.NONE, type, obscure, data);\n+    }\n+\n+    public Report(final int id, final int subject, final ReportType type, final String... data) {\n+        this(id, subject, type, true, data);\n+    }\n+\n+    public Report(final int id, final int subject, final ReportType type, final boolean obscure,\n+                  final String... data) {\n+        this(id, subject, 1, type, obscure, data);\n+    }\n+\n+    public Report(final int id, final int subject, final int newlines, final ReportType type,\n+                  final String... data) {\n+        this(id, subject, newlines, type, true, data);\n+    }\n+\n+    public Report(final int id, final int subject, final int newlines, final ReportType type,\n+                  final boolean obscure, final String... data) {\n+        this(id, subject, newlines, type);\n+        add(obscure, data);\n+    }\n+    //endregion String... data\n+\n+    public Report(final int id, final int subject, final int newlines, final ReportType type) {\n+        this(id, subject, newlines, type.ordinal());\n+    }\n+\n+    public Report(final int id, final int subject, final int newlines, final int type) {\n+        setMessageId(id);\n+        setIndentation(0);\n+        setNewlines(newlines);\n+        setTagData(new Vector<>());\n+        setTagTranslate(null);\n+        setType(type);\n+        setSubject(subject);\n+        setPlayer(IPlayer.PLAYER_NONE);\n+        setObscuredIndexes(new Hashtable<>());\n+        setObscuredRecipients(new Vector<>());\n+        setTagCounter(0);\n+        setShowImage(false);\n+        setImageCode(\"\");\n     }\n \n     /**\n      * Create a new report which is an exact copy of the given report.\n      *\n-     * @param r the report to be copied\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public Report(Report r) {\n-        messageId = r.messageId;\n-        indentation = r.indentation;\n-        newlines = r.newlines;\n-        tagData = (Vector<String>) r.tagData.clone();\n-        tagTranslate = r.tagTranslate;\n-        type = r.type;\n-        subject = r.subject;\n-        obscuredIndexes = (Hashtable<Integer, Boolean>) r.obscuredIndexes\n-                .clone();\n-        obscuredRecipients = (Vector<String>) r.obscuredRecipients.clone();\n-        tagCounter = r.tagCounter;\n+     * @param report the report to be copied\n+     */\n+    @SuppressWarnings(value = \"unchecked\")\n+    public Report(final Report report) {\n+        setMessageId(report.getMessageId());\n+        setIndentation(report.getIndentation());\n+        setNewlines(report.getNewlines());\n+        setTagData((Vector<String>) report.getTagData().clone());\n+        setTagTranslate(report.getTagTranslate());\n+        setType(report.getType());\n+        setSubject(report.getSubject());\n+        setObscuredIndexes((Map<Integer, Boolean>) ((Hashtable<Integer, Boolean>) report.getObscuredIndexes()).clone());\n+        setObscuredRecipients((Vector<String>) report.getObscuredRecipients().clone());\n+        setTagCounter(report.getTagCounter());\n+        setShowImage(report.isShowImage());\n+        setImageCode(report.getImageCode());\n     }\n \n-    /**\n-     * Add the given int to the list of data that will be substituted for the\n-     * &lt;data&gt; tags in the report. The order in which items are added must\n-     * match the order of the tags in the report text.\n-     *\n-     * @param data the int to be substituted\n-     */\n-    public void add(int data) {\n-        add(data, true);\n+    @Deprecated\n+    public Report(final int id, final int type) {\n+        this(id, Entity.NONE, 1, type);\n+    }\n+    //endregion Constructors\n+\n+    //region Getters/Setters\n+    public int getMessageId() {\n+        return messageId;\n+    }\n+\n+    public void setMessageId(final int messageId) {\n+        this.messageId = messageId;\n+    }\n+\n+    public int getIndentation() {\n+        return indentation;\n+    }\n+\n+    public void setIndentation(final int indentation) {\n+        this.indentation = indentation;\n+    }\n+\n+    public int getNewlines() {\n+        return newlines;\n+    }\n+\n+    public void setNewlines(final int newlines) {\n+        this.newlines = newlines;\n+    }\n+\n+    public Vector<String> getTagData() {\n+        return tagData;\n+    }\n+\n+    public void setTagData(final Vector<String> tagData) {\n+        this.tagData = tagData;\n+    }\n+\n+    public String getTagTranslate() {\n+        return tagTranslate;\n+    }\n+\n+    public void setTagTranslate(final String tagTranslate) {\n+        this.tagTranslate = tagTranslate;\n+    }\n+\n+    public int getType() {\n+        return type;\n+    }\n+\n+    public ReportType getTypeEnum() {\n+        return ReportType.values()[getType()];\n+    }\n+\n+    public void setType(final ReportType type) {\n+        setType(type.ordinal());\n+    }\n+\n+    public void setType(final int type) {\n+        this.type = type;\n+    }\n+\n+\n+    public int getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(final int subject) {\n+        this.subject = subject;\n+    }\n+\n+    public int getPlayer() {\n+        return player;\n+    }\n+\n+    public void setPlayer(final int player) {\n+        this.player = player;\n+    }\n+\n+    public Map<Integer, Boolean> getObscuredIndexes() {\n+        return obscuredIndexes;\n+    }\n+\n+    public void setObscuredIndexes(final Map<Integer, Boolean> obscuredIndexes) {\n+        this.obscuredIndexes = obscuredIndexes;\n+    }\n+\n+    public Vector<String> getObscuredRecipients() {\n+        return obscuredRecipients;\n     }\n \n+    public void setObscuredRecipients(final Vector<String> obscuredRecipients) {\n+        this.obscuredRecipients = obscuredRecipients;\n+    }\n+\n+    public int getTagCounter() {\n+        return tagCounter;\n+    }\n+\n+    public void setTagCounter(int tagCounter) {\n+        this.tagCounter = tagCounter;\n+    }\n+\n+    public boolean isShowImage() {\n+        return showImage;\n+    }\n+\n+    public void setShowImage(final boolean showImage){\n+        this.showImage = showImage;\n+    }\n+\n+    public String getImageCode() {\n+        return imageCode;\n+    }\n+\n+    public void setImageCode(String imageCode) {\n+        this.imageCode = imageCode;\n+    }\n+    //endregion Getters/Setters\n+\n     /**\n-     * Add the given int to the list of data that will be substituted for the\n-     * &lt;data&gt; tags in the report, and mark it as double-blind sensitive\n-     * information if <code>obscure</code> is true. The order in which items\n-     * are added must match the order of the tags in the report text.\n-     *\n-     * @param data the int to be substituted\n-     * @param obscure boolean indicating whether the data is double-blind\n-     *            sensitive\n+     * Adds the given int(s) to the list of data as obscured\n+     * @param data the int(s) to be substituted\n      */\n-    public void add(int data, boolean obscure) {\n-        if (obscure) {\n-            obscuredIndexes.put(Integer.valueOf(tagData.size()),\n-                    Boolean.valueOf(true));\n-        }\n-        tagData.addElement(String.valueOf(data));\n+    public void add(final int... data) {\n+        add(true, data);\n     }\n \n     /**\n-     * Add the given String to the list of data that will be substituted for the\n-     * &lt;data&gt; tags in the report. The order in which items are added must\n-     * match the order of the tags in the report text.\n+     * Add the given int(s) to the list of data that will be substituted for the <data> tags in the\n+     * report, and market it as double-blind sensitive if <tag>obscure</tag> is true.\n+     * The order in which items are added must match the order of the tags in the report text.\n      *\n-     * @param data the String to be substituted\n+     * @param obscure boolean indicating whether the data is double-blind sensitive\n+     * @param data the int to be substituted\n      */\n-    public void add(String data) {\n-        add(data, true);\n-        tagTranslate = null;\n+    public void add(final boolean obscure, final int... data) {\n+        for (final int dataPoint : data) {\n+            if (obscure) {\n+                obscuredIndexes.put(tagData.size(), true);\n+            }\n+            tagData.addElement(String.valueOf(dataPoint));\n+        }\n     }\n \n     /**\n-     * Add the given string to the list of data that will be substituted for the\n-     * &lt;data&gt; tags in the report. The order in which items are added must\n-     * match the order of the tags in the report text. The second string\n-     * argument sets the translation flag to the string value.\n-     *\n-     * @param data the String to be substituted\n-     * @param translate the common Resource Bundle to be used for translation\n+     * Adds the given String(s) to the list of data as obscured\n+     * @param data the String(s) to be substituted\n      */\n-    public void add(String data, String translate) {\n-        add(data, true);\n-        tagTranslate = translate;\n+    public void add(final String... data) {\n+        add(true, data);\n     }\n \n     /**\n-     * Add the given String to the list of data that will be substituted for the\n-     * &lt;data&gt; tags in the report, and mark it as double-blind sensitive\n-     * information if <code>obscure</code> is true. The order in which items\n-     * are added must match the order of the tags in the report text.\n+     * Add the given String(s) to the list of data that will be substituted for the <data> tags in\n+     * the report, and market it as double-blind sensitive if <tag>obscure</tag> is true.\n+     * The order in which items are added must match the order of the tags in the report text.\n      *\n-     * @param data the String to be substituted\n-     * @param obscure boolean indicating whether the data is double-blind\n-     *            sensitive\n+     * @param obscure boolean indicating whether the data is double-blind sensitive\n+     * @param data the String(s) to be substituted\n      */\n-    public void add(String data, boolean obscure) {\n-        if (obscure) {\n-            obscuredIndexes.put(Integer.valueOf(tagData.size()),\n-                    Boolean.valueOf(true));\n+    public void add(final boolean obscure, final String... data) {\n+        for (final String dataPoint : data) {\n+            if (obscure) {\n+                obscuredIndexes.put(tagData.size(), true);\n+            }\n+            tagData.addElement(dataPoint);\n         }\n-        tagData.addElement(data);\n     }\n \n     /**\n@@ -310,23 +487,16 @@ public void choose(boolean choice) {\n      */\n     public void addDesc(Entity entity) {\n         if (entity != null) {\n-            if ((indentation <= Report.DEFAULT_INDENTATION) || showImage) {\n+            if (showImage || (indentation <= MMConstants.DEFAULT_SPACE_INDENTATION)) {\n                 imageCode = \"<span id='\" + entity.getId() + \"'></span>\";\n             }\n             add(\"<font color='0xffffff'><a href=\\\"#entity:\" + entity.getId()\n-                    + \"\\\">\" + entity.getShortName() + \"</a></font>\", true);\n+                    + \"\\\">\" + entity.getShortName() + \"</a></font>\");\n             add(\"<B><font color='\" + entity.getOwner().getColour().getHexString(0x00F0F0F0) + \"'>\"\n                     + entity.getOwner().getName() + \"</font></B>\");\n         }\n     }\n \n-    /**\n-     * Manually Toggle if the report should show an image of the entity\n-    */\n-    public void setShowImage(boolean showImage){\n-        this.showImage = showImage;\n-    }\n-\n     /**\n      * Internal method. Not for typical use.\n      * <p>\n@@ -338,10 +508,7 @@ public void setShowImage(boolean showImage){\n      * @return true if the data value was marked obscured\n      */\n     public boolean isValueObscured(int index) {\n-        if (obscuredIndexes.get(Integer.valueOf(index)) == null) {\n-            return false;\n-        }\n-        return true;\n+        return obscuredIndexes.get(index) != null;\n     }\n \n     /**\n@@ -398,23 +565,19 @@ private String getTag(int index) {\n                 // Each common Resource Bundle is found below\n                 if (tagTranslate.equals(\"Messages\")) {\n                     return Messages.getString(value);\n-                // Others ifs will be here.\n                 }\n             }\n             return value;\n         } catch (ArrayIndexOutOfBoundsException e) {\n-            System.out.println(\"Error: Report#getText --> Array Index out of \"\n-                    + \"Bounds Exception (index: \" + index\n-                    + \") for a report with ID \" + messageId\n-                    + \".  Maybe Report#add wasn't called enough \"\n-                    + \"times for the amount of tags in the message?\");\n+            MegaMek.getLogger().error(\"Array Index out of Bounds Exception (index: \"\n+                    + index + \") for a report with ID \" + messageId\n+                    + \".  Maybe Report::add wasn't called enough times for the amount of tags in the message?\", e);\n             return \"[Reporting Error: see megameklog.txt for details]\";\n         }\n     }\n \n     /**\n-     * Get the report in its final form, with all the necessary substitutions\n-     * made.\n+     * Get the report in its final form, with all the necessary substitutions made.\n      *\n      * @return a String with the final report\n      */\n@@ -427,10 +590,8 @@ public String getText() {\n \n         if (raw == null) {\n             // Should we handle this better? Check alternate language files?\n-            System.out.println(\"Error: No message found for ID \"\n-                    + messageId);\n-            text.append(\"[Reporting Error for message ID \").append(\n-                    messageId).append(\"]\");\n+            MegaMek.getLogger().error(\"No message found for ID \" + messageId);\n+            text.append(\"[Reporting Error for message ID \").append(messageId).append(\"]\");\n         } else {\n             int i = 0;\n             int mark = 0;\n@@ -444,12 +605,10 @@ public String getText() {\n                         i++;\n                         continue;\n                     }\n-                    // copy the preceeding characters into the buffer\n-                    text.append(raw.substring(mark, i));\n+                    // copy the preceding characters into the buffer\n+                    text.append(raw, mark, i);\n                     if (raw.substring(i + 1, endTagIdx).equals(\"data\")) {\n                         text.append(getTag());\n-                        // System.out.println(\"Report-->getText(): \" +\n-                        // this.tagData.elementAt(this.tagCounter));\n                         tagCounter++;\n                     } else if (raw.substring(i + 1, endTagIdx).equals(\"list\")) {\n                         for (int j = tagCounter; j < tagData.size(); j++) {\n@@ -458,8 +617,7 @@ public String getText() {\n                         text.setLength(text.length() - 2); // trim last comma\n                     } else if (raw.substring(i + 1, endTagIdx).startsWith(\n                             \"msg:\")) {\n-                        boolean selector = Boolean.valueOf(getTag())\n-                                .booleanValue();\n+                        boolean selector = Boolean.parseBoolean(getTag());\n                         if (selector) {\n                             text.append(ReportMessages.getString(raw.substring(\n                                     i + 5, raw.indexOf(',', i))));\n@@ -491,11 +649,11 @@ public String getText() {\n             }\n             text.append(raw.substring(mark));\n             handleIndentation(text);\n-            text.append(getNewlines());\n+            text.append(MMConstants.DEFAULT_NEWLINE.repeat(getNewlines()));\n         }\n         tagCounter = 0;\n         // debugReport\n-        if (type == Report.TESTING) {\n+        if (getTypeEnum().isTesting()) {\n             Report.mark(text);\n         }\n         return text.toString();\n@@ -506,29 +664,10 @@ private void handleIndentation(StringBuffer sb) {\n             return;\n         }\n         int i = 0;\n-        while (sb.substring(i, i+4).equals(\"\\n\")) {\n-            i+=4;\n-            if (i == sb.length()) {\n-                continue;\n-            }\n+        while (sb.substring(i, i + 4).equals(\"\\n\")) {\n+            i += 4;\n         }\n-        sb.insert(i, getSpaces());\n-    }\n-\n-    private String getSpaces() {\n-        StringBuffer spaces = new StringBuffer();\n-        for (int i = 0; i < indentation; i++) {\n-            spaces.append(\"&nbsp;\");\n-        }\n-        return spaces.toString();\n-    }\n-\n-    private String getNewlines() {\n-        StringBuffer sbNewlines = new StringBuffer();\n-        for (int i = 0; i < newlines; i++) {\n-            sbNewlines.append(\"\\n\");\n-        }\n-        return sbNewlines.toString();\n+        sb.insert(i, \"&nbsp\".repeat(getIndentation()));\n     }\n \n     /**\n@@ -539,10 +678,8 @@ private String getNewlines() {\n     public static void addNewline(Vector<Report> v) {\n         try {\n             v.elementAt(v.size() - 1).newlines++;\n-        }\n-        catch (ArrayIndexOutOfBoundsException ex) {\n-            System.err.println(\"Report.addNewline failed, array index out \" +\n-                    \"of bounds\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            MegaMek.getLogger().error(\"Report.addNewline failed, array index out of bounds\", e);\n         }\n     }\n \n@@ -579,52 +716,30 @@ public boolean isObscuredRecipient(String playerName) {\n         return false;\n     }\n \n-    /**\n-     * Useful for debugging purposes.\n-     *\n-     * @return a String of the form \"Report(messageId=n)\"\n-     */\n-    @Override\n-    public String toString() {\n-        String val = new String();\n-        val = \"Report(messageId=\";\n-        val += messageId;\n-        val += \")\";\n-        return val;\n-    }\n-\n-    /**\n-     * DEBUG method - do not use\n-     */\n-    // debugReport method\n-    public void markForTesting() {\n-        type = Report.TESTING;\n-    }\n-\n-    // debugReport method\n-    private static StringBuffer mark(StringBuffer sb) {\n+    private static void mark(final StringBuffer sb) {\n         sb.insert(0, \"<hidden>\");\n         int i = sb.length() - 1;\n         while (sb.charAt(i) == '\\n') {\n             i--;\n-            if (i == 0) {\n-                continue;\n-            }\n         }\n         sb.insert(i + 1, \"</hidden>\");\n-        return sb;\n     }\n \n-    public static void indentAll(Vector<Report> vDesc, int amount) {\n-        // Just avoid an error condition.\n-        if (vDesc == null) {\n+    public static void indentAll(final @Nullable Vector<Report> reports, final int indent) {\n+        if (reports == null) {\n             return;\n         }\n \n-        Enumeration<Report> x = vDesc.elements();\n-        while (x.hasMoreElements()) {\n-            Report r = x.nextElement();\n-            r.indent(amount);\n+        for (Report report : reports) {\n+            report.indent(indent);\n         }\n     }\n+\n+    /**\n+     * @return a String of the form \"Report(messageId=n)\"\n+     */\n+    @Override\n+    public String toString() {\n+        return \"Report(messageId=\" + messageId + \")\";\n+    }\n }"
  },
  {
    "sha": "83ee8c0bab1779341ec6df8a46b5b8e56872ad5d",
    "filename": "megamek/src/megamek/common/constants/BaseConstants.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/constants/BaseConstants.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/constants/BaseConstants.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/constants/BaseConstants.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -0,0 +1,25 @@\n+/*\r\n+ * Copyright (C) 2021 - The MegaMek Team. All Rights Reserved\r\n+ *\r\n+ * MegaMek is free software: you can redistribute it and/or modify\r\n+ * it under the terms of the GNU General Public License as published by\r\n+ * the Free Software Foundation, either version 3 of the License, or\r\n+ * (at your option) any later version.\r\n+ *\r\n+ * MegaMek is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n+ * GNU General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License\r\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\r\n+ */\r\n+package megamek.common.constants;\r\n+\r\n+/**\r\n+ * These are constants that are shared between MM, MML, and MHQ\r\n+ */\r\n+public abstract class BaseConstants {\r\n+    public static final int DEFAULT_SPACE_INDENTATION = 4;\r\n+    public static final String DEFAULT_NEWLINE = \"\\n\";\r\n+}\r"
  },
  {
    "sha": "c07cb220fdc40750bd03258c7d24ce626208c449",
    "filename": "megamek/src/megamek/common/constants/MMConstants.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/constants/MMConstants.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/constants/MMConstants.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/constants/MMConstants.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -0,0 +1,24 @@\n+/*\r\n+ * Copyright (C) 2021 - The MegaMek Team. All Rights Reserved\r\n+ *\r\n+ * MegaMek is free software: you can redistribute it and/or modify\r\n+ * it under the terms of the GNU General Public License as published by\r\n+ * the Free Software Foundation, either version 3 of the License, or\r\n+ * (at your option) any later version.\r\n+ *\r\n+ * MegaMek is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n+ * GNU General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License\r\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\r\n+ */\r\n+package megamek.common.constants;\r\n+\r\n+/**\r\n+ * These are MM-specific Constants\r\n+ */\r\n+public class MMConstants extends BaseConstants {\r\n+\r\n+}\r"
  },
  {
    "sha": "233f110db3b562989a81a55fc21fee616db7f2a2",
    "filename": "megamek/src/megamek/common/enums/ReportType.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/enums/ReportType.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/enums/ReportType.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/enums/ReportType.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -0,0 +1,64 @@\n+/*\r\n+ * Copyright (C) 2021 - The MegaMek Team. All Rights Reserved\r\n+ *\r\n+ * MegaMek is free software: you can redistribute it and/or modify\r\n+ * it under the terms of the GNU General Public License as published by\r\n+ * the Free Software Foundation, either version 3 of the License, or\r\n+ * (at your option) any later version.\r\n+ *\r\n+ * MegaMek is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n+ * GNU General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License\r\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\r\n+ */\r\n+package megamek.common.enums;\r\n+\r\n+public enum ReportType {\r\n+    //region Enum Declarations\r\n+    /**\r\n+     * Report Type: visible to all players.\r\n+     */\r\n+    PUBLIC,\r\n+    /**\r\n+     * Visible to all players, but all data marked for obscuration remains hidden.\r\n+     */\r\n+    OBSCURED,\r\n+    /**\r\n+     * Report is only visible to those players who can see the subject\r\n+     */\r\n+    HIDDEN,\r\n+    /**\r\n+     * Reports for testing only\r\n+     */\r\n+    TESTING,\r\n+    /**\r\n+     * Messages which should be sent only to the player indicated by \"player\"\r\n+     */\r\n+    PLAYER;\r\n+    //endregion Enum Declarations\r\n+\r\n+    //region Boolean Comparison Methods\r\n+    public boolean isPublic() {\r\n+        return this == PUBLIC;\r\n+    }\r\n+\r\n+    public boolean isObscured() {\r\n+        return this == OBSCURED;\r\n+    }\r\n+\r\n+    public boolean isHidden() {\r\n+        return this == HIDDEN;\r\n+    }\r\n+\r\n+    public boolean isTesting() {\r\n+        return this == TESTING;\r\n+    }\r\n+\r\n+    public boolean isPlayer() {\r\n+        return this == PLAYER;\r\n+    }\r\n+    //endregion Boolean Comparison Methods\r\n+}\r"
  },
  {
    "sha": "8f4928b755f478043c7b07386c3c5f7cc034c501",
    "filename": "megamek/src/megamek/common/options/OptionsConstants.java",
    "status": "modified",
    "additions": 51,
    "deletions": 51,
    "changes": 102,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/options/OptionsConstants.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/options/OptionsConstants.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/options/OptionsConstants.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -1,15 +1,15 @@\n /*\n  * MegaMek - Copyright (C) 2000,2001,2002,2003,2004 Ben Mazur (bmazur@sev.org)\n  *\n- *  This program is free software; you can redistribute it and/or modify it\n- *  under the terms of the GNU General Public License as published by the Free\n- *  Software Foundation; either version 2 of the License, or (at your option)\n- *  any later version.\n+ * This program is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the Free\n+ * Software Foundation; either version 2 of the License, or (at your option)\n+ * any later version.\n  *\n- *  This program is distributed in the hope that it will be useful, but\n- *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n- *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n- *  for more details.\n+ * This program is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ * for more details.\n  */\n package megamek.common.options;\n \n@@ -225,53 +225,53 @@\n     public static final String UNOFF_SENSOR_GEEK = \"sensor_geek\"; // $NON-NLS$\n     public static final String UNOFF_SMALL_PILOT = \"small_pilot\"; // $NON-NLS$\n \n-    \n-      //EDGE \n-    public static final String EDGE = \"edge\"; //$NON-NLS$ \n+    //region Edge\n+    public static final String EDGE = \"edge\";\n     //different edge triggers\n     //Mech Triggers\n-    public static final String EDGE_WHEN_HEADHIT= \"edge_when_headhit\"; //$NON-NLS$ \n-    public static final String EDGE_WHEN_TAC= \"edge_when_tac\"; //$NON-NLS$ \n-    public static final String EDGE_WHEN_KO= \"edge_when_ko\"; //$NON-NLS$ \n-    public static final String EDGE_WHEN_EXPLOSION= \"edge_when_explosion\"; //$NON-NLS$ \n-    public static final String EDGE_WHEN_MASC_FAILS= \"edge_when_masc_fails\"; //$NON-NLS$\n+    public static final String EDGE_WHEN_HEADHIT = \"edge_when_headhit\";\n+    public static final String EDGE_WHEN_TAC = \"edge_when_tac\";\n+    public static final String EDGE_WHEN_KO = \"edge_when_ko\";\n+    public static final String EDGE_WHEN_EXPLOSION = \"edge_when_explosion\";\n+    public static final String EDGE_WHEN_MASC_FAILS = \"edge_when_masc_fails\";\n     //Aero Triggers\n-    public static final String EDGE_WHEN_AERO_ALT_LOSS= \"edge_when_aero_alt_loss\"; //$NON-NLS$\n-    public static final String EDGE_WHEN_AERO_EXPLOSION= \"edge_when_aero_explosion\"; //$NON-NLS$\n-    public static final String EDGE_WHEN_AERO_KO= \"edge_when_aero_ko\"; //$NON-NLS$\n-    public static final String EDGE_WHEN_AERO_LUCKY_CRIT= \"edge_when_aero_lucky_crit\"; //$NON-NLS$\n-    public static final String EDGE_WHEN_AERO_NUKE_CRIT= \"edge_when_aero_nuke_crit\"; //$NON-NLS$\n-    public static final String EDGE_WHEN_AERO_UNIT_CARGO_LOST= \"edge_when_aero_unit_cargo_lost\"; //$NON-NLS$\n+    public static final String EDGE_WHEN_AERO_ALT_LOSS = \"edge_when_aero_alt_loss\";\n+    public static final String EDGE_WHEN_AERO_EXPLOSION = \"edge_when_aero_explosion\";\n+    public static final String EDGE_WHEN_AERO_KO = \"edge_when_aero_ko\";\n+    public static final String EDGE_WHEN_AERO_LUCKY_CRIT = \"edge_when_aero_lucky_crit\";\n+    public static final String EDGE_WHEN_AERO_NUKE_CRIT = \"edge_when_aero_nuke_crit\";\n+    public static final String EDGE_WHEN_AERO_UNIT_CARGO_LOST = \"edge_when_aero_unit_cargo_lost\";\n+    //endregion Edge\n+\n+    //region Manei Domini\n+    public static final String MD_PAIN_SHUNT = \"artificial_pain_shunt\";\n+    public static final String MD_VDNI = \"vdni\";\n+    public static final String MD_BVDNI = \"bvdni\";\n+    public static final String MD_PL_ENHANCED = \"pl_enhanced\";\n+    public static final String MD_PL_IENHANCED = \"pl_ienhanced\";\n+    public static final String MD_PL_MASC = \"pl_masc\";\n+    public static final String MD_PL_EXTRA_LIMBS = \"pl_extra_limbs\";\n+    public static final String MD_PL_TAIL = \"pl_tail\";\n+    public static final String MD_PL_GLIDER = \"pl_glider\";\n+    public static final String MD_PL_FLIGHT = \"pl_flight\";\n+    public static final String MD_CYBER_IMP_AUDIO = \"cyber_imp_audio\";\n+    public static final String MD_CYBER_IMP_VISUAL = \"cyber_imp_visual\";\n+    public static final String MD_CYBER_IMP_LASER = \"cyber_imp_laser\";\n+    public static final String MD_MM_IMPLANTS = \"mm_implants\";\n+    public static final String MD_ENH_MM_IMPLANTS = \"enh_mm_implants\";\n+    public static final String MD_COMM_IMPLANT = \"comm_implant\";\n+    public static final String MD_BOOST_COMM_IMPLANT = \"boost_comm_implant\";\n+    public static final String MD_DERMAL_ARMOR = \"dermal_armor\";\n+    public static final String MD_TSM_IMPLANT = \"tsm_implant\";\n+    public static final String MD_FILTRATION = \"filtration_implants\";\n+    public static final String MD_GAS_EFFUSER_PHERO = \"gas_effuser_pheromone\";\n+    public static final String MD_GAS_EFFUSER_TOXIN = \"gas_effuser_toxin\";\n+    public static final String MD_DERMAL_CAMO_ARMOR = \"dermal_camo_armor\";\n+    public static final String MD_TRIPLE_CORE_PROCESSOR = \"triple_core_processor\";\n+    public static final String MD_SUICIDE_IMPLANTS = \"suicide_implants\";\n+    public static final String MD_PROTO_DNI = \"proto_dni\";\n+    //endregion Manei Domini\n \n-    // Manei Domini\n-    public static final String MD_PAIN_SHUNT = \"artificial_pain_shunt\"; // $NON-NLS$\n-    public static final String MD_VDNI = \"vdni\"; // $NON-NLS$\n-    public static final String MD_BVDNI = \"bvdni\"; // $NON-NLS$\n-    public static final String MD_PL_ENHANCED = \"pl_enhanced\"; // $NON-NLS$\n-    public static final String MD_PL_IENHANCED = \"pl_ienhanced\"; // $NON-NLS$\n-    public static final String MD_PL_MASC = \"pl_masc\"; // $NON-NLS$\n-    public static final String MD_PL_EXTRA_LIMBS = \"pl_extra_limbs\"; // $NON-NLS$\n-    public static final String MD_PL_TAIL = \"pl_tail\"; // $NON-NLS$\n-    public static final String MD_PL_GLIDER = \"pl_glider\"; // $NON-NLS$\n-    public static final String MD_PL_FLIGHT = \"pl_flight\"; // $NON-NLS$\n-    public static final String MD_CYBER_IMP_AUDIO = \"cyber_imp_audio\"; // $NON-NLS$\n-    public static final String MD_CYBER_IMP_VISUAL = \"cyber_imp_visual\"; // $NON-NLS$\n-    public static final String MD_CYBER_IMP_LASER = \"cyber_imp_laser\"; // $NON-NLS$\n-    public static final String MD_MM_IMPLANTS = \"mm_implants\"; // $NON-NLS$\n-    public static final String MD_ENH_MM_IMPLANTS = \"enh_mm_implants\"; // $NON-NLS$    \n-    public static final String MD_COMM_IMPLANT = \"comm_implant\"; // $NON-NLS$\n-    public static final String MD_BOOST_COMM_IMPLANT = \"boost_comm_implant\"; // $NON-NLS$\n-    public static final String MD_DERMAL_ARMOR = \"dermal_armor\"; // $NON-NLS$\n-    public static final String MD_TSM_IMPLANT = \"tsm_implant\"; // $NON-NLS$\n-    public static final String MD_FILTRATION = \"filtration_implants\"; // $NON-NLS$\n-    public static final String MD_GAS_EFFUSER_PHERO = \"gas_effuser_pheromone\"; // $NON-NLS$\n-    public static final String MD_GAS_EFFUSER_TOXIN = \"gas_effuser_toxin\"; // $NON-NLS$\n-    public static final String MD_DERMAL_CAMO_ARMOR = \"dermal_camo_armor\"; // $NON-NLS$   \n-    public static final String MD_TRIPLE_CORE_PROCESSOR = \"triple_core_processor\"; // $NON-NLS$    \n-    public static final String MD_SUICIDE_IMPLANTS = \"suicide_implants\"; // $NON-NLS$  \n-    public static final String MD_PROTO_DNI = \"proto_dni\"; // $NON-NLS$ \n-    \n-    \n     //GAME OPTIONS TO BE MOVED.\n     public static final String BASE_FRIENDLY_FIRE= \"friendly_fire\";  //$NON-NLS$\n     public static final String BASE_TURN_TIMER = \"turn_timer\"; //$NON-NLS$"
  },
  {
    "sha": "ab5648621bc29eb26fe2d33fceeee4cfea547ff1",
    "filename": "megamek/src/megamek/common/options/PilotOptions.java",
    "status": "modified",
    "additions": 70,
    "deletions": 85,
    "changes": 155,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/options/PilotOptions.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/common/options/PilotOptions.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/options/PilotOptions.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -1,17 +1,16 @@\n /*\n  * MegaMek - Copyright (C) 2000-2003 Ben Mazur (bmazur@sev.org)\n  *\n- *  This program is free software; you can redistribute it and/or modify it\n- *  under the terms of the GNU General Public License as published by the Free\n- *  Software Foundation; either version 2 of the License, or (at your option)\n- *  any later version.\n+ * This program is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the Free\n+ * Software Foundation; either version 2 of the License, or (at your option)\n+ * any later version.\n  *\n- *  This program is distributed in the hope that it will be useful, but\n- *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n- *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n- *  for more details.\n+ * This program is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ * for more details.\n  */\n-\n package megamek.common.options;\n \n import java.util.Vector;\n@@ -23,9 +22,9 @@\n  */\n public class PilotOptions extends AbstractOptions {\n     private static final long serialVersionUID = 6628080570425023949L;\n-    public static final String LVL3_ADVANTAGES = \"lvl3Advantages\"; //$NON-NLS-1$\n-    public static final String EDGE_ADVANTAGES = \"edgeAdvantages\"; //$NON-NLS-1$\n-    public static final String MD_ADVANTAGES = \"MDAdvantages\"; //$NON-NLS-1$\n+    public static final String LVL3_ADVANTAGES = \"lvl3Advantages\";\n+    public static final String EDGE_ADVANTAGES = \"edgeAdvantages\";\n+    public static final String MD_ADVANTAGES = \"MDAdvantages\";\n \n     public PilotOptions() {\n         super();\n@@ -99,82 +98,68 @@ public void initialize() {\n         addOption(adv, OptionsConstants.INFANTRY_URBAN_GUERRILLA, false); //$NON-NLS-1$\n \n         // Unofficial      \n-        addOption(adv, OptionsConstants.UNOFF_EI_IMPLANT, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_GUNNERY_LASER, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_GUNNERY_MISSILE, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_GUNNERY_BALLISTIC, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_CLAN_PILOT_TRAINING, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_SOME_LIKE_IT_HOT, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_WEATHERED, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_ALLWEATHER, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_BLIND_FIGHTER, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_SENSOR_GEEK, false); //$NON-NLS-1$\n-        addOption(adv, OptionsConstants.UNOFF_SMALL_PILOT, false); //$NON-NLS-1$\n-\n-        IBasicOptionGroup edge = addGroup(\"edge\", EDGE_ADVANTAGES); //$NON-NLS-1$\n-        addOption(edge, \"edge\", 0); //$NON-NLS-1$\n-        /* different edge triggers */\n-        // Mech Triggers\n-        addOption(edge, \"edge_when_headhit\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_tac\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_ko\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_explosion\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_masc_fails\", false); //$NON-NLS-1$\n-        //Aero Triggers\n-        addOption(edge, \"edge_when_aero_alt_loss\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_aero_explosion\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_aero_ko\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_aero_lucky_crit\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_aero_nuke_crit\", false); //$NON-NLS-1$\n-        addOption(edge, \"edge_when_aero_unit_cargo_lost\", false); //$NON-NLS-1$\n-        \n-        addOption(edge, OptionsConstants.EDGE, 0); //$NON-NLS-1$\n-        //different edge triggers \n+        addOption(adv, OptionsConstants.UNOFF_EI_IMPLANT, false);\n+        addOption(adv, OptionsConstants.UNOFF_GUNNERY_LASER, false);\n+        addOption(adv, OptionsConstants.UNOFF_GUNNERY_MISSILE, false);\n+        addOption(adv, OptionsConstants.UNOFF_GUNNERY_BALLISTIC, false);\n+        addOption(adv, OptionsConstants.UNOFF_CLAN_PILOT_TRAINING, false);\n+        addOption(adv, OptionsConstants.UNOFF_SOME_LIKE_IT_HOT, false);\n+        addOption(adv, OptionsConstants.UNOFF_WEATHERED, false);\n+        addOption(adv, OptionsConstants.UNOFF_ALLWEATHER, false);\n+        addOption(adv, OptionsConstants.UNOFF_BLIND_FIGHTER, false);\n+        addOption(adv, OptionsConstants.UNOFF_SENSOR_GEEK, false);\n+        addOption(adv, OptionsConstants.UNOFF_SMALL_PILOT, false);\n+\n+        //region Edge\n+        IBasicOptionGroup edge = addGroup(OptionsConstants.EDGE, EDGE_ADVANTAGES);\n+        addOption(edge, OptionsConstants.EDGE, 0);\n+        //different edge triggers\n         //Mech Triggers\n-        addOption(edge, OptionsConstants.EDGE_WHEN_HEADHIT, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_TAC, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_KO, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_EXPLOSION, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_MASC_FAILS, false); //$NON-NLS-1$\n+        addOption(edge, OptionsConstants.EDGE_WHEN_HEADHIT, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_TAC, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_KO, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_EXPLOSION, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_MASC_FAILS, false);\n         //Aero Triggers\n-        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_ALT_LOSS, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_EXPLOSION, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_KO, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_LUCKY_CRIT, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_NUKE_CRIT, false); //$NON-NLS-1$\n-        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_UNIT_CARGO_LOST, false); //$NON-NLS-1$\n+        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_ALT_LOSS, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_EXPLOSION, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_KO, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_LUCKY_CRIT, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_NUKE_CRIT, false);\n+        addOption(edge, OptionsConstants.EDGE_WHEN_AERO_UNIT_CARGO_LOST, false);\n+        //endregion Edge\n \n         // manei domini\n-        IBasicOptionGroup md = addGroup(\"md\", MD_ADVANTAGES); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PAIN_SHUNT, false); // $NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_COMM_IMPLANT, false); // $NON-NLS-1$\n+        IBasicOptionGroup md = addGroup(\"md\", MD_ADVANTAGES);\n+        addOption(md, OptionsConstants.MD_PAIN_SHUNT, false);\n+        addOption(md, OptionsConstants.MD_COMM_IMPLANT, false);\n         //TODO - -1 bonus when spotting for LRMs and moving through mines.\n-        addOption(md, OptionsConstants.MD_BOOST_COMM_IMPLANT, false); // $NON-NLS-1$\n+        addOption(md, OptionsConstants.MD_BOOST_COMM_IMPLANT, false);\n         //TODO - -1 bonus when spotting for LRMs and moving through mines. \n-        addOption(md, OptionsConstants.MD_CYBER_IMP_AUDIO, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_CYBER_IMP_VISUAL, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_CYBER_IMP_LASER, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_MM_IMPLANTS, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_ENH_MM_IMPLANTS, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_FILTRATION, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_GAS_EFFUSER_PHERO, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_GAS_EFFUSER_TOXIN, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_DERMAL_ARMOR, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_DERMAL_CAMO_ARMOR, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_TSM_IMPLANT, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_TRIPLE_CORE_PROCESSOR, false); //$NON-NLS-1$  \n-        addOption(md, OptionsConstants.MD_VDNI, false); // $NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_BVDNI, false); // $NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PROTO_DNI, false); // $NON-NLS-1$\n+        addOption(md, OptionsConstants.MD_CYBER_IMP_AUDIO, false);\n+        addOption(md, OptionsConstants.MD_CYBER_IMP_VISUAL, false);\n+        addOption(md, OptionsConstants.MD_CYBER_IMP_LASER, false);\n+        addOption(md, OptionsConstants.MD_MM_IMPLANTS, false);\n+        addOption(md, OptionsConstants.MD_ENH_MM_IMPLANTS, false);\n+        addOption(md, OptionsConstants.MD_FILTRATION, false);\n+        addOption(md, OptionsConstants.MD_GAS_EFFUSER_PHERO, false);\n+        addOption(md, OptionsConstants.MD_GAS_EFFUSER_TOXIN, false);\n+        addOption(md, OptionsConstants.MD_DERMAL_ARMOR, false);\n+        addOption(md, OptionsConstants.MD_DERMAL_CAMO_ARMOR, false);\n+        addOption(md, OptionsConstants.MD_TSM_IMPLANT, false);\n+        addOption(md, OptionsConstants.MD_TRIPLE_CORE_PROCESSOR, false);\n+        addOption(md, OptionsConstants.MD_VDNI, false);\n+        addOption(md, OptionsConstants.MD_BVDNI, false);\n+        addOption(md, OptionsConstants.MD_PROTO_DNI, false);\n         //Prosthetic Limbs (not MD Exclusive)\n-        addOption(md, OptionsConstants.MD_PL_ENHANCED, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PL_IENHANCED, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PL_EXTRA_LIMBS, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PL_TAIL, false); //$NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PL_MASC, false); // NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PL_GLIDER, false); // NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_PL_FLIGHT, false); // NON-NLS-1$\n-        addOption(md, OptionsConstants.MD_SUICIDE_IMPLANTS, false);// NON-NLS-1$ \n+        addOption(md, OptionsConstants.MD_PL_ENHANCED, false);\n+        addOption(md, OptionsConstants.MD_PL_IENHANCED, false);\n+        addOption(md, OptionsConstants.MD_PL_EXTRA_LIMBS, false);\n+        addOption(md, OptionsConstants.MD_PL_TAIL, false);\n+        addOption(md, OptionsConstants.MD_PL_MASC, false);\n+        addOption(md, OptionsConstants.MD_PL_GLIDER, false);\n+        addOption(md, OptionsConstants.MD_PL_FLIGHT, false);\n+        addOption(md, OptionsConstants.MD_SUICIDE_IMPLANTS, false);\n         \n         //TODO - Prototype DNI IO pg 83\n     }\n@@ -190,12 +175,12 @@ protected AbstractOptionsInfo getOptionsInfoImp() {\n     }\n \n     private static class PilotOptionsInfo extends AbstractOptionsInfo {\n-        private static boolean initliazed = false;\n+        private static boolean initialized = false;\n         private static AbstractOptionsInfo instance = new PilotOptionsInfo();\n \n         public static AbstractOptionsInfo getInstance() {\n-            if (!initliazed) {\n-                initliazed = true;\n+            if (!initialized) {\n+                initialized = true;\n                 // Create a new dummy PilotOptions; ensures values initialized\n                 // Otherwise, could have issues when loading saved games\n                 new PilotOptions();\n@@ -204,7 +189,7 @@ public static AbstractOptionsInfo getInstance() {\n         }\n \n         protected PilotOptionsInfo() {\n-            super(\"PilotOptionsInfo\"); //$NON-NLS-1$\n+            super(\"PilotOptionsInfo\");\n         }\n     }\n }"
  },
  {
    "sha": "dafdce2840204352ccac4c0e5ce875ff77d5ee7d",
    "filename": "megamek/src/megamek/server/Server.java",
    "status": "modified",
    "additions": 251,
    "deletions": 356,
    "changes": 607,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/server/Server.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c/megamek/src/megamek/server/Server.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/server/Server.java?ref=4c6ce9eab61f1c3acf072b9baa8f721073c9cc5c",
    "patch": "@@ -99,6 +99,7 @@\n import megamek.common.actions.UnloadStrandedAction;\n import megamek.common.actions.WeaponAttackAction;\n import megamek.common.containers.PlayerIDandList;\n+import megamek.common.enums.ReportType;\n import megamek.common.event.GameListener;\n import megamek.common.event.GameVictoryEvent;\n import megamek.common.icons.Camouflage;\n@@ -1753,11 +1754,10 @@ private void prepareVictoryReport() {\n             e.setDestroyed(true);\n         }\n \n-        addReport(new Report(7000, Report.PUBLIC));\n+        addReport(new Report(7000, ReportType.PUBLIC));\n \n         // Declare the victor\n-        r = new Report(1210);\n-        r.type = Report.PUBLIC;\n+        r = new Report(1210, ReportType.PUBLIC);\n         if (game.getVictoryTeam() == IPlayer.TEAM_NONE) {\n             IPlayer player = getPlayer(game.getVictoryPlayerId());\n             if (null == player) {\n@@ -1781,21 +1781,17 @@ private void prepareVictoryReport() {\n             if (player.getInitialBV() == 0) {\n                 continue;\n             }\n-            r = new Report();\n-            r.type = Report.PUBLIC;\n-            r.messageId = 7016;\n-            r.add(Server.getColorForPlayer(player));\n-            r.add(player.getBV());\n-            r.add(Double.toString(Math.round((double) player.getBV() / player.getInitialBV() * 10000.0) / 100.0));\n-            r.add(player.getInitialBV());\n-            r.add(player.getFledBV());\n+            r = new Report(7016, ReportType.PUBLIC, Server.getColorForPlayer(player),\n+                    Integer.toString(player.getBV()),\n+                    Double.toString(Math.round((double) player.getBV() / player.getInitialBV() * 10000.0) / 100.0),\n+                    Integer.toString(player.getInitialBV()), Integer.toString(player.getFledBV()));\n             addReport(r);\n         }\n \n         // List the survivors\n         Iterator<Entity> survivors = game.getEntities();\n         if (survivors.hasNext()) {\n-            addReport(new Report(7020, Report.PUBLIC));\n+            addReport(new Report(7020, ReportType.PUBLIC));\n             while (survivors.hasNext()) {\n                 Entity entity = survivors.next();\n \n@@ -1819,7 +1815,7 @@ private void prepareVictoryReport() {\n                 }\n \n                 if (!wroteHeader) {\n-                    addReport(new Report(7075, Report.PUBLIC));\n+                    addReport(new Report(7075, ReportType.PUBLIC));\n                     wroteHeader = true;\n                 }\n \n@@ -1829,7 +1825,7 @@ private void prepareVictoryReport() {\n         // List units that retreated\n         Enumeration<Entity> retreat = game.getRetreatedEntities();\n         if (retreat.hasMoreElements()) {\n-            addReport(new Report(7080, Report.PUBLIC));\n+            addReport(new Report(7080, ReportType.PUBLIC));\n             while (retreat.hasMoreElements()) {\n                 Entity entity = retreat.nextElement();\n                 addReport(entity.victoryReport());\n@@ -1838,7 +1834,7 @@ private void prepareVictoryReport() {\n         // List destroyed units\n         Enumeration<Entity> graveyard = game.getGraveyardEntities();\n         if (graveyard.hasMoreElements()) {\n-            addReport(new Report(7085, Report.PUBLIC));\n+            addReport(new Report(7085, ReportType.PUBLIC));\n             while (graveyard.hasMoreElements()) {\n                 Entity entity = graveyard.nextElement();\n                 addReport(entity.victoryReport());\n@@ -1847,15 +1843,15 @@ private void prepareVictoryReport() {\n         // List devastated units (not salvageable)\n         Enumeration<Entity> devastated = game.getDevastatedEntities();\n         if (devastated.hasMoreElements()) {\n-            addReport(new Report(7090, Report.PUBLIC));\n+            addReport(new Report(7090, ReportType.PUBLIC));\n \n             while (devastated.hasMoreElements()) {\n                 Entity entity = devastated.nextElement();\n                 addReport(entity.victoryReport());\n             }\n         }\n         // Let player know about entitystatus.txt file\n-        addReport(new Report(7095, Report.PUBLIC));\n+        addReport(new Report(7095, ReportType.PUBLIC));\n     }\n \n     /**\n@@ -2396,7 +2392,7 @@ public boolean accept(Entity entity) {\n                 addReport(resolveControlRolls());\n                 addReport(checkForTraitors());\n                 // write End Phase header\n-                addReport(new Report(5005, Report.PUBLIC));\n+                addReport(new Report(5005, ReportType.PUBLIC));\n                 checkLayExplosives();\n                 resolveHarJelRepairs();\n                 resolveEmergencyCoolantSystem();\n@@ -2441,13 +2437,11 @@ public boolean accept(Entity entity) {\n                     if (player.getInitialBV() == 0) {\n                         continue;\n                     }\n-                    Report r = new Report();\n-                    r.type = Report.PUBLIC;\n+                    Report r = new Report(7016, ReportType.PUBLIC);\n                     if (doBlind() && suppressBlindBV()) {\n-                        r.type = Report.PLAYER;\n+                        r.setType(ReportType.PLAYER);\n                         r.player = player.getId();\n                     }\n-                    r.messageId = 7016;\n                     r.add(Server.getColorForPlayer(player));\n                     r.add(player.getBV());\n                     r.add(Double.toString(Math.round((double) player.getBV() / player.getInitialBV() * 10000.0) / 100.0));\n@@ -2631,7 +2625,7 @@ private void executePhase(IGame.Phase phase) {\n                 break;\n             case PHASE_MOVEMENT:\n                 // write Movement Phase header to report\n-                addReport(new Report(2000, Report.PUBLIC));\n+                addReport(new Report(2000, ReportType.PUBLIC));\n             case PHASE_SET_ARTYAUTOHITHEXES:\n             case PHASE_DEPLOY_MINEFIELDS:\n             case PHASE_DEPLOYMENT:\n@@ -2847,7 +2841,7 @@ private void endCurrentPhase() {\n                     changePhase(IGame.Phase.PHASE_MOVEMENT_REPORT);\n                 } else {\n                     // just the header, so we'll add the <nothing> label\n-                    addReport(new Report(1205, Report.PUBLIC));\n+                    addReport(new Report(1205, ReportType.PUBLIC));\n                     game.addReports(vPhaseReport);\n                     sendReport();\n                     changePhase(IGame.Phase.PHASE_OFFBOARD);\n@@ -2858,7 +2852,7 @@ private void endCurrentPhase() {\n                 break;\n             case PHASE_FIRING:\n                 // write Weapon Attack Phase header\n-                addReport(new Report(3000, Report.PUBLIC));\n+                addReport(new Report(3000, ReportType.PUBLIC));\n                 resolveWhatPlayersCanSeeWhatUnits();\n                 resolveAllButWeaponAttacks();\n                 resolveSelfDestructions();\n@@ -2879,7 +2873,7 @@ private void endCurrentPhase() {\n                     changePhase(IGame.Phase.PHASE_FIRING_REPORT);\n                 } else {\n                     // just the header, so we'll add the <nothing> label\n-                    addReport(new Report(1205, Report.PUBLIC));\n+                    addReport(new Report(1205, ReportType.PUBLIC));\n                     sendReport();\n                     game.addReports(vPhaseReport);\n                     changePhase(IGame.Phase.PHASE_PHYSICAL);\n@@ -2904,7 +2898,7 @@ private void endCurrentPhase() {\n                     changePhase(IGame.Phase.PHASE_PHYSICAL_REPORT);\n                 } else {\n                     // just the header, so we'll add the <nothing> label\n-                    addReport(new Report(1205, Report.PUBLIC));\n+                    addReport(new Report(1205, ReportType.PUBLIC));\n                     game.addReports(vPhaseReport);\n                     sendReport();\n                     changePhase(IGame.Phase.PHASE_END);\n@@ -2914,7 +2908,7 @@ private void endCurrentPhase() {\n                 changePhase(IGame.Phase.PHASE_END);\n                 break;\n             case PHASE_TARGETING:\n-                vPhaseReport.addElement(new Report(1035, Report.PUBLIC));\n+                vPhaseReport.addElement(new Report(1035, ReportType.PUBLIC));\n                 resolveAllButWeaponAttacks();\n                 resolveOnlyWeaponAttacks();\n                 handleAttacks();\n@@ -2924,7 +2918,7 @@ private void endCurrentPhase() {\n                     changePhase(IGame.Phase.PHASE_TARGETING_REPORT);\n                 } else {\n                     // just the header, so we'll add the <nothing> label\n-                    vPhaseReport.addElement(new Report(1205, Report.PUBLIC));\n+                    vPhaseReport.addElement(new Report(1205, ReportType.PUBLIC));\n                     game.addReports(vPhaseReport);\n                     sendReport();\n                     changePhase(IGame.Phase.PHASE_MOVEMENT);\n@@ -2940,7 +2934,7 @@ private void endCurrentPhase() {\n                 break;\n             case PHASE_OFFBOARD:\n                 // write Offboard Attack Phase header\n-                addReport(new Report(1100, Report.PUBLIC));\n+                addReport(new Report(1100, ReportType.PUBLIC));\n                 resolveAllButWeaponAttacks(); // torso twist or flip arms\n                 // possible\n                 resolveOnlyWeaponAttacks(); // should only be TAG at this point\n@@ -2966,7 +2960,7 @@ private void endCurrentPhase() {\n                     changePhase(IGame.Phase.PHASE_OFFBOARD_REPORT);\n                 } else {\n                     // just the header, so we'll add the <nothing> label\n-                    addReport(new Report(1205, Report.PUBLIC));\n+                    addReport(new Report(1205, ReportType.PUBLIC));\n                     game.addReports(vPhaseReport);\n                     sendReport();\n                     changePhase(IGame.Phase.PHASE_FIRING);\n@@ -2993,7 +2987,7 @@ private void endCurrentPhase() {\n                 } else {\n                     // just the heat and end headers, so we'll add\n                     // the <nothing> label\n-                    addReport(new Report(1205, Report.PUBLIC));\n+                    addReport(new Report(1205, ReportType.PUBLIC));\n                     game.addReports(vPhaseReport);\n                     sendReport();\n                     if (victory) {\n@@ -3313,12 +3307,12 @@ public boolean victory() {\n             int wonTeam = vr.getWinningTeam();\n \n             if (wonPlayer != IPlayer.PLAYER_NONE) {\n-                Report r = new Report(7200, Report.PUBLIC);\n+                Report r = new Report(7200, ReportType.PUBLIC);\n                 r.add(Server.getColorForPlayer(game.getPlayer(wonPlayer)));\n                 addReport(r);\n             }\n             if (wonTeam != IPlayer.TEAM_NONE) {\n-                Report r = new Report(7200, Report.PUBLIC);\n+                Report r = new Report(7200, ReportType.PUBLIC);\n                 r.add(\"Team \" + wonTeam);\n                 addReport(r);\n             }\n@@ -3847,8 +3841,7 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n         Report r;\n         boolean deployment = false;\n         if (!abbreviatedReport) {\n-            r = new Report(1210);\n-            r.type = Report.PUBLIC;\n+            r = new Report(1210, ReportType.PUBLIC);\n             if ((game.getLastPhase() == IGame.Phase.PHASE_DEPLOYMENT) || game.isDeploymentComplete()\n                     || !game.shouldDeployThisRound()) {\n                 r.messageId = 1000;\n@@ -3864,13 +3857,13 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n             }\n             addReport(r);\n             // write separator\n-            addReport(new Report(1200, Report.PUBLIC));\n+            addReport(new Report(1200, ReportType.PUBLIC));\n         } else {\n-            addReport(new Report(1210, Report.PUBLIC));\n+            addReport(new Report(1210, ReportType.PUBLIC));\n         }\n \n         if (game.getOptions().booleanOption(OptionsConstants.RPG_INDIVIDUAL_INITIATIVE)) {\n-            r = new Report(1040, Report.PUBLIC);\n+            r = new Report(1040, ReportType.PUBLIC);\n             addReport(r);\n             for (Enumeration<GameTurn> e = game.getTurns(); e.hasMoreElements(); ) {\n                 GameTurn t = e.nextElement();\n@@ -3884,7 +3877,7 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n                 } else {\n                     IPlayer player = getPlayer(t.getPlayerNum());\n                     if (null != player) {\n-                        r = new Report(1050, Report.PUBLIC);\n+                        r = new Report(1050, ReportType.PUBLIC);\n                         r.add(Server.getColorForPlayer(player));\n                         addReport(r);\n                     }\n@@ -3903,19 +3896,19 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n                 // them as the 'team', and use the team initiative\n                 if (team.getNonObserverSize() == 1) {\n                     final IPlayer player = team.getNonObserverPlayers().nextElement();\n-                    r = new Report(1015, Report.PUBLIC);\n+                    r = new Report(1015, ReportType.PUBLIC);\n                     r.add(Server.getColorForPlayer(player));\n                     r.add(team.getInitiative().toString());\n                     addReport(r);\n                 } else {\n                     // Multiple players. List the team, then break it down.\n-                    r = new Report(1015, Report.PUBLIC);\n+                    r = new Report(1015, ReportType.PUBLIC);\n                     r.add(IPlayer.teamNames[team.getId()]);\n                     r.add(team.getInitiative().toString());\n                     addReport(r);\n                     for (Enumeration<IPlayer> j = team.getNonObserverPlayers(); j.hasMoreElements(); ) {\n                         final IPlayer player = j.nextElement();\n-                        r = new Report(1015, Report.PUBLIC);\n+                        r = new Report(1015, ReportType.PUBLIC);\n                         r.indent();\n                         r.add(player.getName());\n                         r.add(player.getInitiative().toString());\n@@ -3928,7 +3921,7 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n \n                 // The turn order is different in movement phase\n                 // if a player has any \"even\" moving units.\n-                r = new Report(1020, Report.PUBLIC);\n+                r = new Report(1020, ReportType.PUBLIC);\n \n                 boolean hasEven = false;\n                 for (Enumeration<GameTurn> i = game.getTurns(); i.hasMoreElements(); ) {\n@@ -3944,7 +3937,7 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n                 r.newlines = 2;\n                 addReport(r);\n                 if (hasEven) {\n-                    r = new Report(1021, Report.PUBLIC);\n+                    r = new Report(1021, ReportType.PUBLIC);\n                     if ((game.getOptions().booleanOption(OptionsConstants.INIT_INF_DEPLOY_EVEN)\n                             || game.getOptions().booleanOption(OptionsConstants.INIT_PROTOS_MOVE_EVEN))\n                             && !(game.getLastPhase() == IGame.Phase.PHASE_END_REPORT)) {\n@@ -3963,18 +3956,18 @@ private void writeInitiativeReport(boolean abbreviatedReport) {\n             // we don't much care about wind direction and such in a hard vacuum\n             if(!game.getBoard().inSpace()) {\n                 // Wind direction and strength\n-                Report rWindDir = new Report(1025, Report.PUBLIC);\n+                Report rWindDir = new Report(1025, ReportType.PUBLIC);\n                 rWindDir.add(game.getPlanetaryConditions().getWindDirDisplayableName());\n                 rWindDir.newlines = 0;\n-                Report rWindStr = new Report(1030, Report.PUBLIC);\n+                Report rWindStr = new Report(1030, ReportType.PUBLIC);\n                 rWindStr.add(game.getPlanetaryConditions().getWindDisplayableName());\n                 rWindStr.newlines = 0;\n-                Report rWeather = new Report(1031, Report.PUBLIC);\n+                Report rWeather = new Report(1031, ReportType.PUBLIC);\n                 rWeather.add(game.getPlanetaryConditions().getWeatherDisplayableName());\n                 rWeather.newlines = 0;\n-                Report rLight = new Report(1032, Report.PUBLIC);\n+                Report rLight = new Report(1032, ReportType.PUBLIC);\n                 rLight.add(game.getPlanetaryConditions().getLightDisplayableName());\n-                Report rVis = new Report(1033, Report.PUBLIC);\n+                Report rVis = new Report(1033, ReportType.PUBLIC);\n                 rVis.add(game.getPlanetaryConditions().getFogDisplayableName());\n                 addReport(rWindDir);\n                 addReport(rWindStr);\n@@ -4481,7 +4474,7 @@ private void attemptLanding(Entity entity, PilotingRollData roll) {\n         Report r = new Report(9605);\n         r.subject = entity.getId();\n         r.addDesc(entity);\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -5005,7 +4998,7 @@ private boolean processSkid(Entity entity, Coords start, int elevation,\n                     // Yup. One dead entity.\n                     game.removeEntity(entity.getId(), IEntityRemovalConditions.REMOVE_PUSHED);\n                     send(createRemoveEntityPacket(entity.getId(), IEntityRemovalConditions.REMOVE_PUSHED));\n-                    r = new Report(2030, Report.PUBLIC);\n+                    r = new Report(2030, ReportType.PUBLIC);\n                     r.addDesc(entity);\n                     addReport(r);\n \n@@ -5170,7 +5163,7 @@ private boolean processSkid(Entity entity, Coords start, int elevation,\n \n                 r.subject = entity.getId();\n                 r.indent();\n-                r.add(nextPos.getBoardNum(), true);\n+                r.add(nextPos.getBoardNum());\n                 addReport(r);\n \n                 if ((entity.getMovementMode() == EntityMovementMode.WIGE)\n@@ -5257,8 +5250,8 @@ else if (null != crashDropShip) {\n                 r = new Report(2050);\n                 r.subject = entity.getId();\n                 r.indent();\n-                r.add(crashDropShip.getShortName(), true);\n-                r.add(nextPos.getBoardNum(), true);\n+                r.add(crashDropShip.getShortName());\n+                r.add(nextPos.getBoardNum());\n                 addReport(r);\n                 ChargeAttackAction caa = new ChargeAttackAction(entity.getId(),\n                         crashDropShip.getTargetType(),\n@@ -5394,8 +5387,7 @@ else if ( (curAltitude > (nextAltitude + entity.getMaxElevationChange())\n                         r = new Report(2050);\n                         r.subject = entity.getId();\n                         r.indent();\n-                        r.add(target.getShortName(), true);\n-                        r.add(nextPos.getBoardNum(), true);\n+                        r.add(target.getShortName(), nextPos.getBoardNum());\n                         r.newlines = 0;\n                         addReport(r);\n                         if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {\n@@ -5469,8 +5461,8 @@ else if ((target instanceof Infantry) && (bldg != null)) {\n                         r = new Report(2075);\n                         r.subject = entity.getId();\n                         r.indent();\n-                        r.add(target.getShortName(), true);\n-                        r.add(nextPos.getBoardNum(), true);\n+                        r.add(target.getShortName());\n+                        r.add(nextPos.getBoardNum());\n                         r.newlines = 0;\n                         addReport(r);\n \n@@ -5527,8 +5519,7 @@ else if ((target instanceof Infantry) && (bldg != null)) {\n                 r = new Report(2080);\n                 r.subject = entity.getId();\n                 r.indent();\n-                r.add(bldg.getName());\n-                r.add(nextPos.getBoardNum(), true);\n+                r.add(bldg.getName(), nextPos.getBoardNum());\n                 addReport(r);\n \n                 // If the building hasn't already suffered\n@@ -5610,7 +5601,7 @@ else if ((target instanceof Infantry) && (bldg != null)) {\n                 r = new Report(2040);\n                 r.subject = entity.getId();\n                 r.indent();\n-                r.add(nextPos.getBoardNum(), true);\n+                r.add(nextPos.getBoardNum());\n                 addReport(r);\n \n                 // If the prohibited terrain is water, entity is destroyed\n@@ -5663,7 +5654,7 @@ else if ((target instanceof Infantry) && (bldg != null)) {\n                 entity.setStuck(true);\n                 r = new Report(2081);\n                 r.subject = entity.getId();\n-                r.add(entity.getDisplayName(), true);\n+                r.add(entity.getDisplayName());\n                 addReport(r);\n                 // check for quicksand\n                 addReport(checkQuickSand(nextPos));\n@@ -5689,7 +5680,7 @@ else if ((target instanceof Infantry) && (bldg != null)) {\n             r = new Report(2085);\n             r.subject = entity.getId();\n             r.indent();\n-            r.add(curPos.getBoardNum(), true);\n+            r.add(curPos.getBoardNum());\n             addReport(r);\n \n             if (flip && entity instanceof Tank) {\n@@ -5718,7 +5709,7 @@ else if ((target instanceof Infantry) && (bldg != null)) {\n                 break;\n             }\n             // indent displacement\n-            r = new Report(1210, Report.PUBLIC);\n+            r = new Report(1210, ReportType.PUBLIC);\n             r.indent();\n             r.newlines = 0;\n             addReport(r);\n@@ -6114,7 +6105,7 @@ else if (game.getBoard().onGround()) {\n         }\n \n         if (game.getBoard().inAtmosphere()) {\n-            r = new Report(9393, Report.PUBLIC);\n+            r = new Report(9393, ReportType.PUBLIC);\n             r.indent();\n             r.addDesc(entity);\n             vReport.add(r);\n@@ -6179,7 +6170,7 @@ else if (game.getBoard().onGround()) {\n                 collapseBuilding(bldg, game.getPositionMap(), hitCoords, true, vReport);\n             }\n             if (!damageDealt) {\n-                r = new Report(9700, Report.PUBLIC);\n+                r = new Report(9700, ReportType.PUBLIC);\n                 r.indent();\n                 r.addDesc(entity);\n                 r.add(crash_damage);\n@@ -6225,7 +6216,7 @@ else if (game.getBoard().onGround()) {\n                         target = 3;\n                     }\n                     int roll = Compute.d6();\n-                    r = new Report(9705, Report.PUBLIC);\n+                    r = new Report(9705, ReportType.PUBLIC);\n                     r.indent();\n                     r.addDesc(victim);\n                     r.add(target);\n@@ -6397,10 +6388,7 @@ else if (game.getBoard().onGround()) {\n         Vector<Report> vReport = new Vector<>();\n         Report r;\n         // Unit has fled the battlefield.\n-        r = new Report(2005, Report.PUBLIC);\n-        if (flewOff) {\n-            r = new Report(9370, Report.PUBLIC);\n-        }\n+        r = new Report(flewOff ? 9370 : 2005, ReportType.PUBLIC);\n         r.addDesc(entity);\n         addReport(r);\n         OffBoardDirection fleeDirection;\n@@ -6459,7 +6447,7 @@ else if (game.getBoard().onGround()) {\n         if (!passengers.isEmpty()) {\n             for (Entity passenger : passengers) {\n                 // Unit has fled the battlefield.\n-                r = new Report(2010, Report.PUBLIC);\n+                r = new Report(2010, ReportType.PUBLIC);\n                 r.indent();\n                 r.addDesc(passenger);\n                 addReport(r);\n@@ -6510,7 +6498,7 @@ else if (game.getBoard().onGround()) {\n             // Unit has fled the battlefield.\n             swarmer.setSwarmTargetId(Entity.NONE);\n             entity.setSwarmAttackerId(Entity.NONE);\n-            r = new Report(2015, Report.PUBLIC);\n+            r = new Report(2015, ReportType.PUBLIC);\n             r.indent();\n             r.addDesc(swarmer);\n             addReport(r);\n@@ -8178,7 +8166,7 @@ private void processMovement(Entity entity, MovePath md, Map<EntityTargetPair,\n                         if (!owner.containsMinefield(mf)) {\n                             r = new Report(2120);\n                             r.subject = entity.getId();\n-                            r.add(entity.getShortName(), true);\n+                            r.add(entity.getShortName());\n                             addReport(r);\n                             revealMinefield(game.getTeamForPlayer(owner), mf);\n                         }\n@@ -9095,7 +9083,7 @@ else if (bldgExited.equals(bldgEntered)\n                     // check for breaking ice\n                     int roll = Compute.d6(1);\n                     r = new Report(2122);\n-                    r.add(entity.getDisplayName(), true);\n+                    r.add(entity.getDisplayName());\n                     r.add(roll);\n                     r.subject = entity.getId();\n                     addReport(r);\n@@ -9161,7 +9149,7 @@ else if (bldgExited.equals(bldgEntered)\n                     if (entity instanceof Mech) {\n                         entity.setStuck(true);\n                         r = new Report(2121);\n-                        r.add(entity.getDisplayName(), true);\n+                        r.add(entity.getDisplayName());\n                         r.subject = entity.getId();\n                         addReport(r);\n                         // check for quicksand\n@@ -9255,9 +9243,8 @@ else if (bldgExited.equals(bldgEntered)\n                         swarmer.setPosition(curPos);\n                     }\n                     entityUpdate(swarmerId);\n-                } // End successful-PSR\n-\n-            } // End try-to-dislodge-swarmers\n+                }\n+            }\n \n             // one more check for inferno wash-off\n             checkForWashedInfernos(entity, curPos);\n@@ -9279,9 +9266,9 @@ else if (bldgExited.equals(bldgEntered)\n                 Report.addNewline(vPhaseReport);\n             }\n \n-        } // End entity-is-jumping\n+        }\n \n-        //If converting to another mode, set the final movement mode and report it\n+        // If converting to another mode, set the final movement mode and report it\n         if (entity.isConvertingNow()) {\n             r = new Report(1210);\n             r.subject = entity.getId();\n@@ -9327,9 +9314,9 @@ else if (bldgExited.equals(bldgEntered)\n                         altitude = 1;\n                     }\n                     if (altitude == 0) {\n-                        ((IAero)entity).land();\n+                        ((IAero) entity).land();\n                     } else {\n-                        ((IAero)entity).liftOff(altitude);\n+                        ((IAero) entity).liftOff(altitude);\n                     }\n                 }\n             }\n@@ -9483,7 +9470,7 @@ else if (bldgExited.equals(bldgEntered)\n                 r = new Report(2145);\n                 r.subject = entity.getId();\n                 r.indent();\n-                r.add(swarmer.getShortName(), true);\n+                r.add(swarmer.getShortName());\n                 addReport(r);\n             }\n             entityUpdate(swarmerId);\n@@ -9687,88 +9674,51 @@ private void processTrailerMovement(Entity tractor, List<Coords> trainPath) {\n      * @param md      The current <code>MovePath</code>\n      * @return        Whether the unit failed the check\n      */\n-    private boolean checkMASCFailure(Entity entity, MovePath md) {\n-        HashMap<Integer, List<CriticalSlot>> crits = new HashMap<>();\n-        Vector<Report> vReport = new Vector<>();\n-        if (entity.checkForMASCFailure(md, vReport, crits)) {\n-            boolean mascFailure = true;\n-            // Check to see if the pilot can reroll due to Edge\n-            if (entity.getCrew().hasEdgeRemaining()\n-                    && entity.getCrew().getOptions()\n-                            .booleanOption(OptionsConstants.EDGE_WHEN_MASC_FAILS)) {\n-                entity.getCrew().decreaseEdge();\n-                // Need to reset the MASCUsed flag\n-                entity.setMASCUsed(false);\n-                // Report to notify user that masc check was rerolled\n-                Report masc_report = new Report(6501);\n-                masc_report.subject = entity.getId();\n-                masc_report.indent(2);\n-                masc_report.addDesc(entity);\n-                vReport.add(masc_report);\n-                // Report to notify user how much edge pilot has left\n-                masc_report = new Report(6510);\n-                masc_report.subject = entity.getId();\n-                masc_report.indent(2);\n-                masc_report.addDesc(entity);\n-                masc_report.add(entity.getCrew().getOptions()\n-                        .intOption(OptionsConstants.EDGE));\n-                vReport.addElement(masc_report);\n-                // Recheck MASC failure\n-                if (!entity.checkForMASCFailure(md, vReport, crits)) {\n-                    // The reroll passed, don't process the failure\n-                    mascFailure = false;\n-                    addReport(vReport);\n-                }\n-            }\n-            // Check for failure and process it\n-            if (mascFailure) {\n-                addReport(vReport);\n-                // If this is supercharger failure we need to damage the supercharger as well as\n-                // the additional criticals. For mechs this requires the additional step of finding\n-                // the slot and marking it as hit so it can't absorb future damage.\n-                Mounted supercharger = entity.getSuperCharger();\n-                if ((null != supercharger) && supercharger.curMode().equals(\"Armed\")) {\n-                    if (entity.hasETypeFlag(Entity.ETYPE_MECH)) {\n-                        final int loc = supercharger.getLocation();\n-                        for (int slot = 0; slot < entity.getNumberOfCriticals(loc); slot++) {\n-                            final CriticalSlot crit = entity.getCritical(loc, slot);\n-                            if ((null != crit) && (crit.getType() == CriticalSlot.TYPE_EQUIPMENT)\n-                                    && (crit.getMount().getType().equals(supercharger.getType()))) {\n-                                addReport(applyCriticalHit(entity, loc, crit,\n-                                        true, 0, false));\n-                                break;\n-                            }\n+    private boolean checkMASCFailure(final Entity entity, final MovePath movePath) {\n+        Objects.requireNonNull(entity);\n+        Map<Integer, List<CriticalSlot>> criticals = new HashMap<>();\n+        Vector<Report> reports = new Vector<>();\n+        if (entity.checkForMASCFailure(movePath, reports, criticals)) {\n+            addReport(reports);\n+            // If this is supercharger failure we need to damage the supercharger as well as\n+            // the additional criticals. For 'Mechs this requires the additional step of finding\n+            // the slot and marking it as hit so it can't absorb future damage.\n+            final Mounted supercharger = entity.getSuperCharger();\n+            if ((supercharger != null) && supercharger.curMode().equals(\"Armed\")) {\n+                if (entity.hasETypeFlag(Entity.ETYPE_MECH)) {\n+                    final int location = supercharger.getLocation();\n+                    for (int slot = 0; slot < entity.getNumberOfCriticals(location); slot++) {\n+                        final CriticalSlot critical = entity.getCritical(location, slot);\n+                        if ((critical != null) && (critical.getType() == CriticalSlot.TYPE_EQUIPMENT)\n+                                && critical.getMount().getType().equals(supercharger.getType())) {\n+                            addReport(applyCriticalHit(entity, location, critical, true, 0, false));\n+                            break;\n                         }\n-                    } else {\n-                        supercharger.setHit(true);\n                     }\n-                    supercharger.setMode(\"Off\");\n+                } else {\n+                    supercharger.setHit(true);\n                 }\n-                for (Integer loc : crits.keySet()) {\n-                    List<CriticalSlot> lcs = crits.get(loc);\n-                    for (CriticalSlot cs : lcs) {\n-                        // HACK: if loc is -1, we need to deal motive damage to\n-                        // the tank, the severity of which is stored in the critslot index\n-                        if (loc == -1) {\n-                            addReport(vehicleMotiveDamage((Tank) entity,\n-                                    0, true, cs.getIndex()));\n-                        } else {\n-                            addReport(applyCriticalHit(entity, loc, cs,\n-                                    true, 0, false));\n-                        }\n-                    }\n+                supercharger.setMode(\"Off\");\n+            }\n+            for (final Integer location : criticals.keySet()) {\n+                for (final CriticalSlot criticalSlot : criticals.get(location)) {\n+                    // HACK: if location is -1, we need to deal motive damage to the tank, the\n+                    // severity of which is stored in the Critical Slot index\n+                    addReport((location == -1)\n+                            ? vehicleMotiveDamage((Tank) entity, 0, true, criticalSlot.getIndex())\n+                            : applyCriticalHit(entity, location, criticalSlot, true, 0, false));\n                 }\n-                // do any PSR immediately\n-                addReport(resolvePilotingRolls(entity));\n-                game.resetPSRs(entity);\n-                // let the player replot their move as MP might be changed\n-                md.clear();\n-                return true;\n             }\n+            // do any PSR immediately\n+            addReport(resolvePilotingRolls(entity));\n+            getGame().resetPSRs(entity);\n+            // let the player replot their move as MP might be changed\n+            movePath.clear();\n+            return true;\n         } else {\n-            addReport(vReport);\n+            addReport(reports);\n+            return false;\n         }\n-        return false;\n     }\n \n     /**\n@@ -10329,7 +10279,7 @@ public void deliverMortarFlare(Coords coords, int duration) {\n      */\n \n     public void deliverMissileSmoke(Coords coords, int smokeType, Vector<Report> vPhaseReport) {\n-        Report r = new Report(5183, Report.PUBLIC);\n+        Report r = new Report(5183, ReportType.PUBLIC);\n         r.indent(2);\n         //Report either light or heavy smoke, as appropriate\n         r.choose(smokeType == SmokeCloud.SMOKE_LIGHT);\n@@ -10342,7 +10292,7 @@ public void deliverMissileSmoke(Coords coords, int smokeType, Vector<Report> vPh\n     }\n \n     public void deliverSmokeGrenade(Coords coords, Vector<Report> vPhaseReport) {\n-        Report r = new Report(5200, Report.PUBLIC);\n+        Report r = new Report(5200, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(coords.getBoardNum());\n         vPhaseReport.add(r);\n@@ -10354,7 +10304,7 @@ public void deliverSmokeGrenade(Coords coords, Vector<Report> vPhaseReport) {\n     }\n \n     public void deliverSmokeMortar(Coords coords, Vector<Report> vPhaseReport, int duration) {\n-        Report r = new Report(5185, Report.PUBLIC);\n+        Report r = new Report(5185, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(coords.getBoardNum());\n         vPhaseReport.add(r);\n@@ -10366,7 +10316,7 @@ public void deliverSmokeMortar(Coords coords, Vector<Report> vPhaseReport, int d\n     }\n \n     public void deliverChaffGrenade(Coords coords, Vector<Report> vPhaseReport) {\n-        Report r = new Report(5187, Report.PUBLIC);\n+        Report r = new Report(5187, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(coords.getBoardNum());\n         vPhaseReport.add(r);\n@@ -10383,7 +10333,7 @@ public void deliverChaffGrenade(Coords coords, Vector<Report> vPhaseReport) {\n      * @param coords the <code>Coords</code> where to deliver\n      */\n     public void deliverArtillerySmoke(Coords coords, Vector<Report> vPhaseReport) {\n-        Report r = new Report(5185, Report.PUBLIC);\n+        Report r = new Report(5185, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(coords.getBoardNum());\n         vPhaseReport.add(r);\n@@ -10400,7 +10350,7 @@ public void deliverArtillerySmoke(Coords coords, Vector<Report> vPhaseReport) {\n             if (coords.equals(tempcoords)) {\n                 continue;\n             }\n-            r = new Report(5185, Report.PUBLIC);\n+            r = new Report(5185, ReportType.PUBLIC);\n             r.indent(2);\n             r.add(tempcoords.getBoardNum());\n             vPhaseReport.add(r);\n@@ -10418,7 +10368,7 @@ public void deliverArtillerySmoke(Coords coords, Vector<Report> vPhaseReport) {\n      * @param coords the <code>Coords</code> where to deliver\n      */\n     public void deliverLIsmoke(Coords coords, Vector<Report> vPhaseReport) {\n-        Report r = new Report(5186, Report.PUBLIC);\n+        Report r = new Report(5186, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(coords.getBoardNum());\n         vPhaseReport.add(r);\n@@ -10435,7 +10385,7 @@ public void deliverLIsmoke(Coords coords, Vector<Report> vPhaseReport) {\n             if (coords.equals(tempcoords)) {\n                 continue;\n             }\n-            r = new Report(5186, Report.PUBLIC);\n+            r = new Report(5186, ReportType.PUBLIC);\n             r.indent(2);\n             r.add(tempcoords.getBoardNum());\n             vPhaseReport.add(r);\n@@ -10520,7 +10470,7 @@ public void deliverScreen(Coords coords, Vector<Report> vPhaseReport) {\n         IHex h = game.getBoard().getHex(coords);\n         Report r;\n         Report.addNewline(vPhaseReport);\n-        r = new Report(9070, Report.PUBLIC);\n+        r = new Report(9070, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(coords.getBoardNum());\n         vPhaseReport.add(r);\n@@ -11109,9 +11059,8 @@ private boolean enterMinefield(Entity entity, Coords c, int curElev, boolean isO\n                     // Clear the minefield\n                     r = new Report(2158);\n                     r.subject = entity.getId();\n-                    r.add(entity.getShortName(), true);\n-                    r.add(Minefield.getDisplayableName(mf.getType()), true);\n-                    r.add(mf.getCoords().getBoardNum(), true);\n+                    r.add(entity.getShortName(), Minefield.getDisplayableName(mf.getType()),\n+                            mf.getCoords().getBoardNum());\n                     r.indent();\n                     vMineReport.add(r);\n                     fieldsToRemove.add(mf);\n@@ -11123,7 +11072,7 @@ private boolean enterMinefield(Entity entity, Coords c, int curElev, boolean isO\n                     r = new Report(2161);\n                     r.indent(2);\n                     r.subject = entity.getId();\n-                    r.add(entity.getShortName(), true);\n+                    r.add(entity.getShortName());\n                     r.add(6);\n                     r.add(Math.max(remainingAV, 0));\n                     vMineReport.add(r);\n@@ -11137,7 +11086,7 @@ private boolean enterMinefield(Entity entity, Coords c, int curElev, boolean isO\n                         r = new Report(2162);\n                         r.indent(2);\n                         r.subject = entity.getId();\n-                        r.add(damage, true);\n+                        r.add(damage);\n                         vMineReport.add(r);\n \n                         // Damage is dealt to the location of minesweeper\n@@ -11226,16 +11175,16 @@ private boolean enterMinefield(Entity entity, Coords c, int curElev, boolean isO\n                 // report hitting an inferno mine\n                 r = new Report(2155);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n-                r.add(mf.getCoords().getBoardNum(), true);\n+                r.add(entity.getShortName());\n+                r.add(mf.getCoords().getBoardNum());\n                 r.indent();\n                 vMineReport.add(r);\n                 vMineReport.addAll(deliverInfernoMissiles(entity, entity, mf.getDensity() / 2));\n             } else {\n                 r = new Report(2150);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n-                r.add(mf.getCoords().getBoardNum(), true);\n+                r.add(entity.getShortName());\n+                r.add(mf.getCoords().getBoardNum());\n                 r.indent();\n                 vMineReport.add(r);\n                 int damage = mf.getDensity();\n@@ -11388,7 +11337,7 @@ public boolean clearMinefield(Minefield mf, Entity en, int target,\n                 if (victim.isClearingMinefield()) {\n                     rVictim = new Report(2265);\n                     rVictim.subject = victim.getId();\n-                    rVictim.add(victim.getShortName(), true);\n+                    rVictim.add(victim.getShortName());\n                     rVictim.indent(indent + 1);\n                     vClearReport.add(rVictim);\n                     int damage = mf.getDensity();\n@@ -11479,9 +11428,9 @@ private boolean checkVibrabombs(Entity entity, Coords coords, boolean displaced,\n                     Report r;\n                     r = new Report(2158);\n                     r.subject = entity.getId();\n-                    r.add(entity.getShortName(), true);\n-                    r.add(Minefield.getDisplayableName(mf.getType()), true);\n-                    r.add(mf.getCoords().getBoardNum(), true);\n+                    r.add(entity.getShortName());\n+                    r.add(Minefield.getDisplayableName(mf.getType()));\n+                    r.add(mf.getCoords().getBoardNum());\n                     r.indent();\n                     vMineReport.add(r);\n                     fieldsToRemove.add(mf);\n@@ -11493,7 +11442,7 @@ private boolean checkVibrabombs(Entity entity, Coords coords, boolean displaced,\n                     r = new Report(2161);\n                     r.indent(2);\n                     r.subject = entity.getId();\n-                    r.add(entity.getShortName(), true);\n+                    r.add(entity.getShortName());\n                     r.add(10);\n                     r.add(Math.max(remainingAV, 0));\n                     vMineReport.add(r);\n@@ -11507,7 +11456,7 @@ private boolean checkVibrabombs(Entity entity, Coords coords, boolean displaced,\n                         r = new Report(2162);\n                         r.indent(2);\n                         r.subject = entity.getId();\n-                        r.add(damage, true);\n+                        r.add(damage);\n                         vMineReport.add(r);\n \n                         // Damage is dealt to the location of minesweeper\n@@ -11562,8 +11511,7 @@ private boolean checkVibrabombs(Entity entity, Coords coords, boolean displaced,\n             if (actualDistance <= effectiveDistance) {\n                 Report r = new Report(2156);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n-                r.add(mf.getCoords().getBoardNum(), true);\n+                r.add(entity.getShortName(), mf.getCoords().getBoardNum());\n                 vMineReport.add(r);\n                 \n                 // if the moving entity is not actually moving into the vibrabomb\n@@ -11582,7 +11530,7 @@ private boolean checkVibrabombs(Entity entity, Coords coords, boolean displaced,\n                 // report getting hit by vibrabomb\n                 Report r = new Report(2160);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n+                r.add(entity.getShortName());\n                 vMineReport.add(r);\n                 int damage = mf.getDensity();\n                 while (damage > 0) {\n@@ -11752,7 +11700,7 @@ private void explodeVibrabomb(Minefield mf, Vector<Report> vBoomReport, boolean\n                 && game.getOptions().booleanOption(OptionsConstants.ADVGRNDMOV_NO_PREMOVE_VIBRA)) {\n                 r = new Report(2157);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n+                r.add(entity.getShortName());\n                 vBoomReport.add(r);\n                 continue;\n             }\n@@ -11762,14 +11710,14 @@ private void explodeVibrabomb(Minefield mf, Vector<Report> vBoomReport, boolean\n                 // report not hitting vibrabomb\n                 r = new Report(2157);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n+                r.add(entity.getShortName());\n                 vBoomReport.add(r);\n                 continue;\n             } else {\n                 // report hitting vibrabomb\n                 r = new Report(2160);\n                 r.subject = entity.getId();\n-                r.add(entity.getShortName(), true);\n+                r.add(entity.getShortName());\n                 vBoomReport.add(r);\n             }\n             \n@@ -11823,7 +11771,7 @@ private void drownSwarmer(Entity entity, Coords pos) {\n                 Report r = new Report(2165);\n                 r.subject = entity.getId();\n                 r.indent();\n-                r.add(entity.getShortName(), true);\n+                r.add(entity.getShortName());\n                 addReport(r);\n                 addReport(destroyEntity(swarmer, \"a watery grave\", false));\n                 entityUpdate(swarmerId);\n@@ -12025,7 +11973,7 @@ private boolean doSkillCheckInSpace(Entity entity, PilotingRollData roll) {\n         Report r = new Report(9320);\n         r.subject = entity.getId();\n         r.addDesc(entity);\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -12072,7 +12020,7 @@ private boolean doVerticalTakeOffCheck(Entity entity, PilotingRollData roll) {\n         Report r = new Report(9320);\n         r.subject = entity.getId();\n         r.addDesc(entity);\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -12162,7 +12110,7 @@ private boolean doSkillCheckManeuver(Entity entity, PilotingRollData roll) {\n         Report r = new Report(9600);\n         r.subject = entity.getId();\n         r.addDesc(entity);\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -12207,7 +12155,7 @@ private boolean doSkillCheckInPlace(Entity entity, PilotingRollData roll) {\n         Report r = new Report(2180);\n         r.subject = entity.getId();\n         r.addDesc(entity);\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -12270,7 +12218,7 @@ private boolean doDislodgeSwarmerSkillCheck(Entity entity, PilotingRollData roll\n         Report r = new Report(2180);\n         r.subject = entity.getId();\n         r.addDesc(entity);\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -12335,16 +12283,15 @@ private int doSkillCheckWhileMoving(Entity entity, int entityElevation,\n         if (src.equals(dest)) {\n             fallsInPlace = true;\n             r.messageId = 2195;\n-            r.add(src.getBoardNum(), true);\n+            r.add(src.getBoardNum());\n         } else {\n             fallsInPlace = false;\n             r.messageId = 2200;\n-            r.add(src.getBoardNum(), true);\n-            r.add(dest.getBoardNum(), true);\n+            r.add(src.getBoardNum(), dest.getBoardNum());\n         }\n \n         // Finish the info.\n-        r.add(roll.getLastPlainDesc(), true);\n+        r.add(roll.getLastPlainDesc());\n         addReport(r);\n \n         // roll\n@@ -12490,7 +12437,7 @@ private int doSkillCheckWhileMoving(Entity entity, int entityElevation,\n         r.subject = entity.getId();\n         r.addDesc(entity);\n         r.add(fallElevation);\n-        r.add(dest.getBoardNum(), true);\n+        r.add(dest.getBoardNum());\n         r.newlines = 0;\n \n         // if hex was empty, deal damage and we're done\n@@ -12500,7 +12447,7 @@ private int doSkillCheckWhileMoving(Entity entity, int entityElevation,\n             // If we rolled for the direction, we want to use that for the fall\n             if (src.equals(dest)) {\n                 vPhaseReport.addAll(doEntityFall(entity, dest, fallElevation,\n-                                                 direction, roll, false, srcHex.hasCliffTopTowards(destHex)));\n+                        direction, roll, false, srcHex.hasCliffTopTowards(destHex)));\n             } else {\n                 // Otherwise, we'll roll for the direction after the fall\n                 vPhaseReport.addAll(doEntityFall(entity, dest, fallElevation, roll));\n@@ -12730,14 +12677,14 @@ private int doSkillCheckWhileMoving(Entity entity, int entityElevation,\n             r.indent();\n             r.subject = entity.getId();\n             r.addDesc(entity);\n-            r.add(dest.getBoardNum(), true);\n+            r.add(dest.getBoardNum());\n         } else {\n             // domino effect: move & displace target\n             r = new Report(2240);\n             r.indent();\n             r.subject = entity.getId();\n             r.addDesc(entity);\n-            r.add(dest.getBoardNum(), true);\n+            r.add(dest.getBoardNum());\n             r.addDesc(violation);\n         }\n         vPhaseReport.add(r);\n@@ -12991,7 +12938,7 @@ private void sendTAGTargetCFR(int playerId, List<Integer> targetIds, List<Intege\n                 entity.setStuck(true);\n                 r = new Report(2081);\n                 r.subject = entity.getId();\n-                r.add(entity.getDisplayName(), true);\n+                r.add(entity.getDisplayName());\n                 vReport.add(r);\n                 // check for quicksand\n                 vReport.addAll(checkQuickSand(c));\n@@ -14351,25 +14298,21 @@ private void resolveSelfDestructions() {\n         Report r;\n         for (Entity e : game.getEntitiesVector()) {\n             if (e.getSelfDestructInitiated() && e.hasEngine()) {\n-                r = new Report(6166, Report.PUBLIC);\n+                r = new Report(6166, ReportType.PUBLIC);\n                 int target = e.getCrew().getPiloting();\n                 int roll = e.getCrew().rollPilotingSkill();\n                 r.subject = e.getId();\n                 r.addDesc(e);\n                 r.indent();\n                 r.add(target);\n                 r.add(roll);\n-                if (roll >= target) {\n-                    r.choose(true);\n-                } else {\n-                    r.choose(false);\n-                }\n+                r.choose(roll >= target);\n                 vDesc.add(r);\n \n                 // Blow it up...\n                 if (roll >= target) {\n                     int engineRating = e.getEngine().getRating();\n-                    r = new Report(5400, Report.PUBLIC);\n+                    r = new Report(5400, ReportType.PUBLIC);\n                     r.subject = e.getId();\n                     r.indent(2);\n                     vDesc.add(r);\n@@ -14389,7 +14332,7 @@ private void resolveSelfDestructions() {\n                     doFusionEngineExplosion(engineRating, e.getPosition(),\n                             vDesc, null);\n                     Report.addNewline(vDesc);\n-                    r = new Report(5410, Report.PUBLIC);\n+                    r = new Report(5410, ReportType.PUBLIC);\n                     r.subject = e.getId();\n                     r.indent(2);\n                     Report.addNewline(vDesc);\n@@ -14489,9 +14432,9 @@ private void resolveClearMinefield(Entity ent, Minefield mf) {\n         }\n         // mine clearing roll\n         r.subject = ent.getId();\n-        r.add(ent.getShortName(), true);\n+        r.add(ent.getShortName());\n         r.add(Minefield.getDisplayableName(mf.getType()));\n-        r.add(pos.getBoardNum(), true);\n+        r.add(pos.getBoardNum());\n         addReport(r);\n \n         if (clearMinefield(mf, ent, clear, boom, vPhaseReport)) {\n@@ -15035,10 +14978,7 @@ public boolean tryIgniteHex(Coords c, int entityId, boolean bHotGun, boolean bIn\n         ITerrain ice = h.getTerrain(Terrains.ICE);\n         ITerrain magma = h.getTerrain(Terrains.MAGMA);\n         Report r;\n-        int reportType = Report.HIDDEN;\n-        if (entityId == Entity.NONE) {\n-            reportType = Report.PUBLIC;\n-        }\n+        ReportType reportType = (entityId == Entity.NONE) ? ReportType.PUBLIC : ReportType.HIDDEN;\n         if (woods != null) {\n             int tf = woods.getTerrainFactor() - nDamage;\n             int level = woods.getLevel();\n@@ -15165,7 +15105,7 @@ public boolean tryIgniteHex(Coords c, int entityId, boolean bHotGun, boolean bIn\n      */\n     private void resolvePhysicalAttacks() {\n         // Physical phase header\n-        addReport(new Report(4000, Report.PUBLIC));\n+        addReport(new Report(4000, ReportType.PUBLIC));\n \n         // add any pending charges\n         for (Enumeration<AttackAction> i = game.getCharges(); i\n@@ -17300,7 +17240,7 @@ private void resolvePushAttack(PhysicalResult pr, int lastEntityId) {\n             if (game.getBoard().contains(dest)) {\n                 r = new Report(4175);\n                 r.subject = ae.getId();\n-                r.add(dest.getBoardNum(), true);\n+                r.add(dest.getBoardNum());\n             } else {\n                 // uh-oh, pushed off board\n                 r = new Report(4180);\n@@ -18715,7 +18655,7 @@ private void checkLayExplosives() {\n             }\n             bldg.removeDemolitionCharge(charge);\n             updatedBuildings.add(bldg);\n-            Report r = new Report(4272, Report.PUBLIC);\n+            Report r = new Report(4272, ReportType.PUBLIC);\n             r.add(bldg.getName());\n             addReport(r);\n             Vector<Report> dmgReports = damageBuilding(bldg, charge.damage,\n@@ -18921,7 +18861,7 @@ private void resolveDfaAttack(PhysicalResult pr, int lastEntityId) {\n                 r = new Report(4265);\n                 r.subject = ae.getId();\n                 r.addDesc(ae);\n-                r.add(dest.getBoardNum(), true);\n+                r.add(dest.getBoardNum());\n                 r.indent();\n                 addReport(r);\n                 // entity isn't DFAing any more\n@@ -19140,7 +19080,7 @@ private PilotingRollData getKickPushPSR(Entity psrEntity, Entity attacker,\n     private void resolveHeat() {\n         Report r;\n         // Heat phase header\n-        addReport(new Report(5000, Report.PUBLIC));\n+        addReport(new Report(5000, ReportType.PUBLIC));\n         for (Iterator<Entity> i = game.getEntities(); i.hasNext(); ) {\n             Entity entity = i.next();\n             if ((null == entity.getPosition()) && !entity.isAero()) {\n@@ -19889,7 +19829,7 @@ else if ((entity.heat >= 14) && !entity.isShutDown()) {\n                         addReport(r);\n                         addReport(oneCriticalEntity(entity, Compute.randomInt(8), false, 0));\n                         // add an empty report, for line breaking\n-                        r = new Report(1210, Report.PUBLIC);\n+                        r = new Report(1210, ReportType.PUBLIC);\n                     }\n                     addReport(r);\n                 }\n@@ -19929,7 +19869,7 @@ else if ((entity.heat >= 14) && !entity.isShutDown()) {\n \n         if (vPhaseReport.size() == 1) {\n             // I guess nothing happened...\n-            addReport(new Report(1205, Report.PUBLIC));\n+            addReport(new Report(1205, ReportType.PUBLIC));\n         }\n     }\n \n@@ -21122,7 +21062,7 @@ else if (game.getPlanetaryConditions().getGravity() > 1) {\n      */\n     private Vector<Report> resolveControlRolls() {\n         Vector<Report> vFullReport = new Vector<>();\n-        vFullReport.add(new Report(5001, Report.PUBLIC));\n+        vFullReport.add(new Report(5001, ReportType.PUBLIC));\n         for (Iterator<Entity> i = game.getEntities(); i.hasNext(); ) {\n             vFullReport.addAll(resolveControl(i.next()));\n         }\n@@ -21659,7 +21599,7 @@ private void resolveSelfDestruct() {\n             if (e.getSelfDestructing()) {\n                 e.setSelfDestructing(false);\n                 e.setSelfDestructInitiated(true);\n-                Report r = new Report(5535, Report.PUBLIC);\n+                Report r = new Report(5535, ReportType.PUBLIC);\n                 r.subject = e.getId();\n                 r.addDesc(e);\n                 addReport(r);\n@@ -23636,13 +23576,13 @@ private void resolveShutdownCrashes() {\n                 .hasCase()) && (te.isDestroyed() || te.isDoomed())\n             && (damage_orig > 0) && ((damage_orig / 10) > 0)) {\n             Report.addNewline(vDesc);\n-            r = new Report(5068, Report.PUBLIC);\n+            r = new Report(5068, ReportType.PUBLIC);\n             r.subject = te.getId();\n             r.addDesc(te);\n             r.indent(2);\n             vDesc.add(r);\n             Report.addNewline(vDesc);\n-            r = new Report(5400, Report.PUBLIC);\n+            r = new Report(5400, ReportType.PUBLIC);\n             r.subject = te.getId();\n             r.indent(2);\n             vDesc.add(r);\n@@ -23651,7 +23591,7 @@ private void resolveShutdownCrashes() {\n             doExplosion(damages, false, te.getPosition(), true, vDesc, null, 5,\n                         te.getId(), false);\n             Report.addNewline(vDesc);\n-            r = new Report(5410, Report.PUBLIC);\n+            r = new Report(5410, ReportType.PUBLIC);\n             r.subject = te.getId();\n             r.indent(2);\n             vDesc.add(r);\n@@ -23882,7 +23822,7 @@ private boolean checkEngineExplosion(Entity en, Vector<Report> vDesc, int hits)\n             vDesc.addElement(r);\n         } else {\n             en.rolledForEngineExplosion = true;\n-            r = new Report(6165, Report.PUBLIC);\n+            r = new Report(6165, ReportType.PUBLIC);\n             r.subject = en.getId();\n             r.indent(2);\n             vDesc.addElement(r);\n@@ -23897,7 +23837,7 @@ private boolean checkEngineExplosion(Entity en, Vector<Report> vDesc, int hits)\n             if (engine.isFusion()) {\n                 int engineRating = en.getEngine().getRating();\n                 Report.addNewline(vDesc);\n-                r = new Report(5400, Report.PUBLIC);\n+                r = new Report(5400, ReportType.PUBLIC);\n                 r.subject = en.getId();\n                 r.indent(2);\n                 vDesc.add(r);\n@@ -23913,7 +23853,7 @@ private boolean checkEngineExplosion(Entity en, Vector<Report> vDesc, int hits)\n \n                 doFusionEngineExplosion(engineRating, en.getPosition(), vDesc, null);\n                 Report.addNewline(vDesc);\n-                r = new Report(5410, Report.PUBLIC);\n+                r = new Report(5410, ReportType.PUBLIC);\n                 r.subject = en.getId();\n                 r.indent(2);\n                 vDesc.add(r);\n@@ -23989,7 +23929,7 @@ public void doExplosion(int[] damages, boolean autoDestroyInSameHex, Coords posi\n                 if (dist < damages.length) {\n                     Vector<Report> buildingReport = damageBuilding(bldg, damages[dist], coords);\n                     for (Report report : buildingReport) {\n-                        report.type = Report.PUBLIC;\n+                        report.setType(ReportType.PUBLIC);\n                     }\n                     vDesc.addAll(buildingReport);\n                 }\n@@ -24001,9 +23941,8 @@ public void doExplosion(int[] damages, boolean autoDestroyInSameHex, Coords posi\n         IHex hex = game.getBoard().getHex(position);\n         // Center hex starts on fire for engine explosions\n         if (engineExplosion && (hex != null) && !hex.containsTerrain(Terrains.FIRE)) {\n-            r = new Report(5136);\n+            r = new Report(5136, ReportType.PUBLIC);\n             r.indent(2);\n-            r.type = Report.PUBLIC;\n             r.add(position.getBoardNum());\n             vDesc.add(r);\n             Vector<Report> reports = new Vector<>();\n@@ -24014,9 +23953,8 @@ public void doExplosion(int[] damages, boolean autoDestroyInSameHex, Coords posi\n             vDesc.addAll(reports);\n         }\n         if ((hex != null) && hex.hasTerrainfactor()) {\n-            r = new Report(3384);\n+            r = new Report(3384, ReportType.PUBLIC);\n             r.indent(2);\n-            r.type = Report.PUBLIC;\n             r.add(position.getBoardNum());\n             r.add(damages[0]);\n             vDesc.add(r);\n@@ -24033,9 +23971,8 @@ public void doExplosion(int[] damages, boolean autoDestroyInSameHex, Coords posi\n             for (Coords c : coords) {\n                 hex = game.getBoard().getHex(c);\n                 if ((hex != null) && hex.hasTerrainfactor()) {\n-                    r = new Report(3384);\n+                    r = new Report(3384, ReportType.PUBLIC);\n                     r.indent(2);\n-                    r.type = Report.PUBLIC;\n                     r.add(c.getBoardNum());\n                     r.add(damages[dist]);\n                     vDesc.add(r);\n@@ -24307,10 +24244,9 @@ public void doNuclearExplosion(Coords position, int baseDamage, int degradation,\n         // First, crater the terrain.\n         // All terrain, units, buildings... EVERYTHING in here is just gone.\n         // Gotta love nukes.\n-        Report r = new Report(1215, Report.PUBLIC);\n-\n+        Report r = new Report(1215, ReportType.PUBLIC);\n         r.indent();\n-        r.add(position.getBoardNum(), true);\n+        r.add(position.getBoardNum());\n         vDesc.add(r);\n \n         int curDepth = craterDepth;\n@@ -24525,7 +24461,7 @@ public void doNuclearExplosion(Coords position, int baseDamage, int degradation,\n         }\n \n         // All right. We're done.\n-        r = new Report(1216, Report.PUBLIC);\n+        r = new Report(1216, ReportType.PUBLIC);\n         r.indent();\n         r.newlines = 2;\n         vDesc.add(r);\n@@ -26541,7 +26477,7 @@ private boolean crashAirMech(Entity en, Coords pos, int elevation, int distance,\n                 Report r = new Report(2180);\n                 r.subject = en.getId();\n                 r.addDesc(en);\n-                r.add(psr.getLastPlainDesc(), true);\n+                r.add(psr.getLastPlainDesc());\n                 vDesc.add(r);\n \n                 // roll\n@@ -28577,7 +28513,7 @@ else if (waterDepth > 0) {\n                 entity.setStuck(true);\n                 r = new Report(2081);\n                 r.subject = entity.getId();\n-                r.add(entity.getDisplayName(), true);\n+                r.add(entity.getDisplayName());\n                 vPhaseReport.add(r);\n                 // check for quicksand\n                 vPhaseReport.addAll(checkQuickSand(fallPos));\n@@ -28975,20 +28911,18 @@ public void ignite(Coords c, int fireLevel, Vector<Report> vReport) {\n         // you can't start fires in some planetary conditions!\n         if (null != game.getPlanetaryConditions().cannotStartFire()) {\n             if (null != vReport) {\n-                Report r = new Report(3007);\n+                Report r = new Report(3007, ReportType.PUBLIC);\n                 r.indent(2);\n                 r.add(game.getPlanetaryConditions().cannotStartFire());\n-                r.type = Report.PUBLIC;\n                 vReport.add(r);\n             }\n             return;\n         }\n \n         if (!game.getOptions().booleanOption(OptionsConstants.ADVCOMBAT_TACOPS_START_FIRE)) {\n             if (null != vReport) {\n-                Report r = new Report(3008);\n+                Report r = new Report(3008, ReportType.PUBLIC);\n                 r.indent(2);\n-                r.type = Report.PUBLIC;\n                 vReport.add(r);\n             }\n             return;\n@@ -28999,10 +28933,9 @@ public void ignite(Coords c, int fireLevel, Vector<Report> vReport) {\n             return;\n         }\n \n-        Report r = new Report(3005);\n+        Report r = new Report(3005, ReportType.PUBLIC);\n         r.indent(2);\n         r.add(c.getBoardNum());\n-        r.type = Report.PUBLIC;\n \n         // Adjust report message for inferno types\n         switch (fireLevel) {\n@@ -29040,10 +28973,7 @@ public void removeFire(Coords fireCoords, String reason) {\n         hex.resetFireTurn();\n         sendChangedHex(fireCoords);\n         // fire goes out\n-        Report r = new Report(5170, Report.PUBLIC);\n-        r.add(fireCoords.getBoardNum());\n-        r.add(reason);\n-        addReport(r);\n+        addReport(new Report(5170, ReportType.PUBLIC, fireCoords.getBoardNum(), reason));\n     }\n \n     /**\n@@ -29071,30 +29001,30 @@ public void addSmoke(ArrayList<Coords> coords, int windDir, boolean bInferno) {\n                     || (Building.MEDIUM < smokeHex.terrainLevel(Terrains.BUILDING))) {\n                 if (smokeHex.terrainLevel(Terrains.SMOKE) == SmokeCloud.SMOKE_HEAVY) {\n                     // heavy smoke fills hex\n-                    r = new Report(5180, Report.PUBLIC);\n+                    r = new Report(5180, ReportType.PUBLIC);\n                 } else {\n-                    r = new Report(5185, Report.PUBLIC);\n+                    r = new Report(5185, ReportType.PUBLIC);\n                 }\n                 smokeLevel = SmokeCloud.SMOKE_HEAVY;\n                 r.add(smokeCoords.getBoardNum());\n                 addReport(r);\n             } else {\n                 if (smokeHex.terrainLevel(Terrains.SMOKE) == SmokeCloud.SMOKE_HEAVY) {\n                     // heavy smoke overpowers light\n-                    r = new Report(5190, Report.PUBLIC);\n+                    r = new Report(5190, ReportType.PUBLIC);\n                     r.add(smokeCoords.getBoardNum());\n                     smokeLevel = Math.max(smokeLevel, SmokeCloud.SMOKE_LIGHT);\n                     addReport(r);\n                 } else if (smokeHex.terrainLevel(Terrains.SMOKE) == SmokeCloud.SMOKE_LIGHT) {\n                     // light smoke continue to fill hex\n-                    r = new Report(5195, Report.PUBLIC);\n+                    r = new Report(5195, ReportType.PUBLIC);\n                     r.add(smokeCoords.getBoardNum());\n                     addReport(r);\n                     smokeLevel = Math.max(smokeLevel, SmokeCloud.SMOKE_LIGHT);\n                 } else {\n                     smokeLevel = Math.max(smokeLevel, SmokeCloud.SMOKE_LIGHT);\n                     // light smoke fills hex\n-                    r = new Report(5200, Report.PUBLIC);\n+                    r = new Report(5200, ReportType.PUBLIC);\n                     r.add(smokeCoords.getBoardNum());\n                     addReport(r);\n                 }\n@@ -29696,8 +29626,8 @@ private void addVisibleEntity(Vector<Entity> vCanSee, Entity e) {\n      * place. To mark a message as \"this should be visible to anyone seeing this\n      * entity\" set r.subject to the entity id to mark a message as \"only visible\n      * to the player\" set r.player to that player's id and set r.type to\n-     * Report.PLAYER to mark a message as visible to all, set r.type to\n-     * Report.PUBLIC\n+     * ReportType.PLAYER to mark a message as visible to all, set r.type to\n+     * ReportType.PUBLIC\n      *\n      * @param r         the Report to filter\n      * @param p         the Player that we are going to send the filtered report to\n@@ -29706,13 +29636,13 @@ private void addVisibleEntity(Vector<Entity> vCanSee, Entity e) {\n      * @return a new Report, which has possibly been obscured\n      */\n     private Report filterReport(Report r, IPlayer p, boolean omitCheck) {\n-        if ((r.subject == Entity.NONE) && (r.type != Report.PLAYER) && (r.type != Report.PUBLIC)) {\n+        if ((r.subject == Entity.NONE) && !r.getTypeEnum().isPlayer() && !r.getTypeEnum().isPublic()) {\n             // Reports that don't have a subject should be public.\n             MegaMek.getLogger().error(\"Attempting to filter a Report object that is not public yet \"\n                             + \"but has no subject.\\n\\t\\tmessageId: \" + r.messageId);\n             return r;\n         }\n-        if ((r.type == Report.PUBLIC) || ((p == null) && !omitCheck)) {\n+        if (r.getTypeEnum().isPublic() || ((p == null) && !omitCheck)) {\n             return r;\n         }\n         Entity entity = game.getEntity(r.subject);\n@@ -29728,16 +29658,15 @@ private Report filterReport(Report r, IPlayer p, boolean omitCheck) {\n             }\n         }\n \n-        if ((r.type != Report.PLAYER) && !omitCheck\n-            && ((entity == null) || (owner == null))) {\n+        if (!r.getTypeEnum().isPlayer() && !omitCheck && ((entity == null) || (owner == null))) {\n             MegaMek.getLogger().error(\"Attempting to filter a report object that is not public but has a subject (\"\n                             + entity + \") with owner (\" + owner + \").\\n\\tmessageId: \" + r.messageId);\n             return r;\n         }\n \n         boolean shouldObscure = omitCheck\n                                 || ((entity != null) && !entity.hasSeenEntity(p))\n-                                || ((r.type == Report.PLAYER) && (p.getId() != r.player));\n+                                || (r.getTypeEnum().isPlayer() && (p.getId() != r.player));\n         // If suppressing double blind messages, don't send this report at all.\n         if (game.getOptions()\n                 .booleanOption(OptionsConstants.ADVANCED_SUPRESS_ALL_DB_MESSAGES)\n@@ -31703,7 +31632,7 @@ public void checkExplodeIndustrialZone(Coords c, Vector<Report> vDesc) {\n             return;\n         }\n \n-        r = new Report(3590, Report.PUBLIC);\n+        r = new Report(3590, ReportType.PUBLIC);\n         r.add(c.getBoardNum());\n         r.indent(2);\n         int effect = Compute.d6(2);\n@@ -31720,29 +31649,29 @@ public void checkExplodeIndustrialZone(Coords c, Vector<Report> vDesc) {\n             boolean majorExp = false;\n             if (effect == 8) {\n                 onFire = true;\n-                r = new Report(3600, Report.PUBLIC);\n+                r = new Report(3600, ReportType.PUBLIC);\n                 r.newlines = 0;\n                 vDesc.add(r);\n             } else if (effect == 9) {\n                 powerLine = true;\n-                r = new Report(3605, Report.PUBLIC);\n+                r = new Report(3605, ReportType.PUBLIC);\n                 r.newlines = 0;\n                 vDesc.add(r);\n             } else if (effect == 10) {\n                 minorExp = true;\n                 onFire = true;\n-                r = new Report(3610, Report.PUBLIC);\n+                r = new Report(3610, ReportType.PUBLIC);\n                 r.newlines = 0;\n                 vDesc.add(r);\n             } else if (effect == 11) {\n                 elecExp = true;\n-                r = new Report(3615, Report.PUBLIC);\n+                r = new Report(3615, ReportType.PUBLIC);\n                 r.newlines = 0;\n                 vDesc.add(r);\n             } else {\n                 onFire = true;\n                 majorExp = true;\n-                r = new Report(3620, Report.PUBLIC);\n+                r = new Report(3620, ReportType.PUBLIC);\n                 r.newlines = 0;\n                 vDesc.add(r);\n             }\n@@ -32177,13 +32106,13 @@ public boolean checkForCollapse(Building bldg, Hashtable<Coords, Vector<Entity>>\n \n         // Collapse the building if the flag is set.\n         if (collapse) {\n-            Report r = new Report(2375, Report.PUBLIC);\n+            Report r = new Report(2375, ReportType.PUBLIC);\n             r.add(bldg.getName());\n             vPhaseReport.add(r);\n \n             collapseBuilding(bldg, positionMap, coords, false, vPhaseReport);\n         } else if (topFloorCollapse) {\n-                Report r = new Report(2376, Report.PUBLIC);\n+                Report r = new Report(2376, ReportType.PUBLIC);\n                 r.add(bldg.getName());\n                 vPhaseReport.add(r);\n \n@@ -32448,7 +32377,7 @@ public void collapseBuilding(Building bldg,\n                     vPhaseReport.addAll(damageEntity(entity, hit, next));\n                     remaining -= next;\n                 }\n-                vPhaseReport.add(new Report(1210, Report.PUBLIC));\n+                vPhaseReport.add(new Report(1210, ReportType.PUBLIC));\n \n                 // all entities should fall\n                 floor = entity.getElevation();\n@@ -32570,7 +32499,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n             for (Building bldg : collapse.keySet()) {\n                 Vector<Coords> coordsVector = collapse.get(bldg);\n                 for (Coords coords : coordsVector) {\n-                    Report r = new Report(6460, Report.PUBLIC);\n+                    Report r = new Report(6460, ReportType.PUBLIC);\n                     r.add(bldg.getName());\n                     addReport(r);\n                     collapseBuilding(bldg, positionMap, coords, vPhaseReport);\n@@ -32637,7 +32566,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n      */\n     public Vector<Report> damageBuilding(Building bldg, int damage, String why, Coords coords) {\n         Vector<Report> vPhaseReport = new Vector<>();\n-        Report r = new Report(1210, Report.PUBLIC);\n+        Report r = new Report(1210, ReportType.PUBLIC);\n \n         // Do nothing if no building or no damage was passed.\n         if ((bldg != null) && (damage > 0)) {\n@@ -32650,7 +32579,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n             if (curArmor >= damage) {\n                 curArmor -= Math.min(curArmor, damage);\n                 bldg.setArmor(curArmor, coords);\n-                r = new Report(3436, Report.PUBLIC);\n+                r = new Report(3436, ReportType.PUBLIC);\n                 r.indent(0);\n                 r.add(damage);\n                 r.add(curArmor);\n@@ -32660,21 +32589,21 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                 if (curArmor > 0) {\n                     bldg.setArmor(0, coords);\n                     damage = damage - curArmor;\n-                    r = new Report(3436, Report.PUBLIC);\n+                    r = new Report(3436, ReportType.PUBLIC);\n                     r.indent(0);\n                     r.add(curArmor);\n                     r.add(0);\n                     vPhaseReport.add(r);\n                 }\n                 damage = (int) Math.floor(bldg.getDamageToScale() * damage);\n                 if (bldg.getDamageToScale() < 1.0) {\n-                    r = new Report(3437, Report.PUBLIC);\n+                    r = new Report(3437, ReportType.PUBLIC);\n                     r.indent(0);\n                     r.add(damage);\n                     vPhaseReport.add(r);\n                 }\n                 if (bldg.getDamageToScale() > 1.0) {\n-                    r = new Report(3438, Report.PUBLIC);\n+                    r = new Report(3438, ReportType.PUBLIC);\n                     r.indent(0);\n                     r.add(damage);\n                     vPhaseReport.add(r);\n@@ -32684,7 +32613,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                 curCF -= Math.min(curCF, damage);\n                 bldg.setCurrentCF(curCF, coords);\n \n-                r = new Report(6436, Report.PUBLIC);\n+                r = new Report(6436, ReportType.PUBLIC);\n                 r.indent(1);\n                 String fontColorOpen = curCF <= 0 ? \"<font color='C00000'>\" : \"\";\n                 String fontColorClose = curCF <= 0 ? \"</font>\" : \"\";\n@@ -32696,16 +32625,13 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                 // If the CF is zero, the building should fall.\n                 if ((curCF == 0) && (startingCF != 0)) {\n                     if (bldg instanceof FuelTank) {\n-                        // If this is a fuel tank, we'll give it its own\n-                        // message.\n-                        r = new Report(3441);\n-                        r.type = Report.PUBLIC;\n+                        // If this is a fuel tank, we'll give it its own message.\n+                        r = new Report(3441, ReportType.PUBLIC);\n                         r.indent(0);\n                         vPhaseReport.add(r);\n                         // ...But we ALSO need to blow up everything nearby.\n                         // Bwahahahahaha...\n-                        r = new Report(3560);\n-                        r.type = Report.PUBLIC;\n+                        r = new Report(3560, ReportType.PUBLIC);\n                         r.newlines = 1;\n                         vPhaseReport.add(r);\n                         Vector<Report> vRep = new Vector<>();\n@@ -32716,25 +32642,15 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                         vPhaseReport.addAll(vRep);\n                         return vPhaseReport;\n                     }\n-                    if (bldg.getType() == Building.WALL) {\n-                        r = new Report(3442);\n-                        r.type = Report.PUBLIC;\n-                        r.indent(0);\n-                        vPhaseReport.add(r);\n-                    } else {\n-                        r = new Report(3440);\n-                        r.type = Report.PUBLIC;\n-                        r.indent(0);\n-                        vPhaseReport.add(r);\n-                    }\n+                    r = new Report((bldg.getType() == Building.WALL) ? 3442 : 3440, ReportType.PUBLIC);\n+                    r.indent(0);\n+                    vPhaseReport.add(r);\n                 } else if ((curCF < startingCF) && (damage > damageThresh)) {\n                     // need to check for crits\n                     // don't bother unless we have some gun emplacements\n-                    Vector<GunEmplacement> guns = game\n-                            .getGunEmplacements(coords);\n+                    Vector<GunEmplacement> guns = game.getGunEmplacements(coords);\n                     if (guns.size() > 0) {\n-                        vPhaseReport.addAll(criticalGunEmplacement(guns, bldg,\n-                                coords));\n+                        vPhaseReport.addAll(criticalGunEmplacement(guns, bldg, coords));\n                     }\n                 }\n             }\n@@ -32747,15 +32663,13 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                                                   Coords coords) {\n         Vector<Report> vDesc = new Vector<>();\n         Report r;\n-        r = new Report(3800);\n-        r.type = Report.PUBLIC;\n+        r = new Report(3800, ReportType.PUBLIC);\n         r.indent(0);\n         vDesc.add(r);\n \n         int critRoll = Compute.d6(2);\n         if (critRoll < 6) {\n-            r = new Report(3805);\n-            r.type = Report.PUBLIC;\n+            r = new Report(3805, ReportType.PUBLIC);\n             r.indent(1);\n             vDesc.add(r);\n         } else if (critRoll == 6) {\n@@ -32774,22 +32688,19 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                 Mounted weapon = wpns.elementAt(Compute.randomInt(wpns.size()));\n                 weapon.setJammed(true);\n                 ((GunEmplacement) weapon.getEntity()).addJammedWeapon(weapon);\n-                r = new Report(3845);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3845, ReportType.PUBLIC);\n                 r.indent(1);\n                 r.add(weapon.getDesc());\n             } else {\n-                r = new Report(3846);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3846, ReportType.PUBLIC);\n                 r.indent(1);\n             }\n             vDesc.add(r);\n         } else if (critRoll == 7) {\n             // gunners stunned\n             for (GunEmplacement gun : guns) {\n                 gun.stunCrew();\n-                r = new Report(3810);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3810, ReportType.PUBLIC);\n                 r.indent(1);\n                 vDesc.add(r);\n             }\n@@ -32807,20 +32718,17 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n             if (wpns.size() > 0) {\n                 Mounted weapon = wpns.elementAt(Compute.randomInt(wpns.size()));\n                 weapon.setHit(true);\n-                r = new Report(3840);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3840, ReportType.PUBLIC);\n                 r.indent(1);\n                 r.add(weapon.getDesc());\n             } else {\n-                r = new Report(3841);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3841, ReportType.PUBLIC);\n                 r.indent(1);\n             }\n             vDesc.add(r);\n         } else if (critRoll == 9) {\n             // gunners killed\n-            r = new Report(3815);\n-            r.type = Report.PUBLIC;\n+            r = new Report(3815, ReportType.PUBLIC);\n             r.indent(1);\n             vDesc.add(r);\n             for (GunEmplacement gun : guns) {\n@@ -32829,17 +32737,15 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n         } else if (critRoll == 10) {\n             if (Compute.d6() > 3) {\n                 // turret lock\n-                r = new Report(3820);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3820, ReportType.PUBLIC);\n                 r.indent(1);\n                 vDesc.add(r);\n                 for (GunEmplacement gun : guns) {\n                     gun.lockTurret(gun.getLocTurret());\n                 }\n             } else {\n                 // turret jam\n-                r = new Report(3825);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3825, ReportType.PUBLIC);\n                 r.indent(1);\n                 vDesc.add(r);\n                 for (GunEmplacement gun : guns) {\n@@ -32851,8 +32757,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                 }\n             }\n         } else if (critRoll == 11) {\n-            r = new Report(3830);\n-            r.type = Report.PUBLIC;\n+            r = new Report(3830, ReportType.PUBLIC);\n             r.indent(1);\n             r.add(bldg.getName());\n             int boom = 0;\n@@ -32870,8 +32775,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n             boom = (int) Math.floor(bldg.getDamageToScale() * boom);\n             \n             if (boom == 0) {\n-                Report rNoAmmo = new Report(3831);\n-                rNoAmmo.type = Report.PUBLIC;\n+                Report rNoAmmo = new Report(3831, ReportType.PUBLIC);\n                 rNoAmmo.indent(1);\n                 vDesc.add(rNoAmmo);\n                 return vDesc;\n@@ -32895,14 +32799,12 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                 if (bldg instanceof FuelTank) {\n                     // If this is a fuel tank, we'll give it its own\n                     // message.\n-                    r = new Report(3441);\n-                    r.type = Report.PUBLIC;\n+                    r = new Report(3441, ReportType.PUBLIC);\n                     r.indent(0);\n                     vDesc.add(r);\n                     // ...But we ALSO need to blow up everything nearby.\n                     // Bwahahahahaha...\n-                    r = new Report(3560);\n-                    r.type = Report.PUBLIC;\n+                    r = new Report(3560, ReportType.PUBLIC);\n                     r.newlines = 1;\n                     vDesc.add(r);\n                     Vector<Report> vRep = new Vector<>();\n@@ -32913,12 +32815,7 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n                     vDesc.addAll(vRep);\n                     return vPhaseReport;\n                 }\n-                if (bldg.getType() == Building.WALL) {\n-                    r = new Report(3442);\n-                } else {\n-                    r = new Report(3440);\n-                }\n-                r.type = Report.PUBLIC;\n+                r = new Report((bldg.getType() == Building.WALL) ? 3442 : 3440, ReportType.PUBLIC);\n                 r.indent(0);\n                 vDesc.add(r);\n             }\n@@ -32936,13 +32833,11 @@ else if (bldg.getPhaseCF(coords) != bldg.getCurrentCF(coords)) {\n             if (equipmentList.size() > 0) {\n                 Mounted equipment = equipmentList.elementAt(Compute.randomInt(equipmentList.size()));\n                 equipment.setHit(true);\n-                r = new Report(3840);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3840, ReportType.PUBLIC);\n                 r.indent(1);\n                 r.add(equipment.getDesc());\n             } else {\n-                r = new Report(3835);\n-                r.type = Report.PUBLIC;\n+                r = new Report(3835, ReportType.PUBLIC);\n                 r.indent(1);\n             }\n             vDesc.add(r);\n@@ -33559,7 +33454,7 @@ private void checkExtremeGravityMovement(Entity entity, MoveStep step,\n             r = new Report(2180);\n             r.subject = entity.getId();\n             r.addDesc(entity);\n-            r.add(rollTarget.getLastPlainDesc(), true);\n+            r.add(rollTarget.getLastPlainDesc());\n             r.indent();\n             vDesc.addElement(r);\n             for (int crewPos = 0; crewPos < entity.getCrew().getSlotCount(); crewPos++) {\n@@ -33799,7 +33694,7 @@ else if (game.getBoard().contains(entity.getPosition())\n             r = new Report(2180);\n             r.subject = entity.getId();\n             r.addDesc(entity);\n-            r.add(rollTarget.getLastPlainDesc(), true);\n+            r.add(rollTarget.getLastPlainDesc());\n             r.indent();\n             vDesc.addElement(r);\n             int roll = Compute.d6(2);\n@@ -34174,7 +34069,7 @@ public void resolveCallSupport() {\n                 /*\n                 // Update the entity\n                 entityUpdate(guerrilla.getId());\n-                Report r = new Report(5535, Report.PUBLIC);\n+                Report r = new Report(5535, ReportType.PUBLIC);\n                 r.subject = e.getId();\n                 r.addDesc(e);\n                 addReport(r);*/\n@@ -34318,7 +34213,7 @@ private void resolveMechWarriorPickUp() {\n                 }\n                 if (pe instanceof MechWarrior) {\n                     // MWs have a beer together\n-                    r = new Report(6415, Report.PUBLIC);\n+                    r = new Report(6415, ReportType.PUBLIC);\n                     r.add(pe.getDisplayName());\n                     addReport(r);\n                     continue;\n@@ -34329,7 +34224,7 @@ private void resolveMechWarriorPickUp() {\n                 e.setPickedUpById(pe.getId());\n                 e.setPickedUpByExternalId(pe.getExternalIdAsString());\n                 pickedUp = true;\n-                r = new Report(6420, Report.PUBLIC);\n+                r = new Report(6420, ReportType.PUBLIC);\n                 r.add(e.getDisplayName());\n                 r.addDesc(pe);\n                 addReport(r);\n@@ -34348,7 +34243,7 @@ private void resolveMechWarriorPickUp() {\n                     }\n                     if (pe instanceof MechWarrior) {\n                         // MWs have a beer together\n-                        r = new Report(6415, Report.PUBLIC);\n+                        r = new Report(6415, ReportType.PUBLIC);\n                         r.add(pe.getDisplayName());\n                         addReport(r);\n                         continue;\n@@ -34359,7 +34254,7 @@ private void resolveMechWarriorPickUp() {\n                     e.setPickedUpById(pe.getId());\n                     e.setPickedUpByExternalId(pe.getExternalIdAsString());\n                     pickedUp = true;\n-                    r = new Report(6420, Report.PUBLIC);\n+                    r = new Report(6420, ReportType.PUBLIC);\n                     r.add(e.getDisplayName());\n                     r.addDesc(pe);\n                     addReport(r);\n@@ -34377,7 +34272,7 @@ private void resolveMechWarriorPickUp() {\n                     }\n                     if (pe instanceof MechWarrior) {\n                         // MWs have a beer together\n-                        r = new Report(6415, Report.PUBLIC);\n+                        r = new Report(6415, ReportType.PUBLIC);\n                         r.add(pe.getDisplayName());\n                         addReport(r);\n                         continue;\n@@ -34389,7 +34284,7 @@ private void resolveMechWarriorPickUp() {\n                     e.setPickedUpById(pe.getId());\n                     e.setPickedUpByExternalId(pe.getExternalIdAsString());\n                     pickedUp = true;\n-                    r = new Report(6420, Report.PUBLIC);\n+                    r = new Report(6420, ReportType.PUBLIC);\n                     r.add(e.getDisplayName());\n                     r.addDesc(pe);\n                     addReport(r);\n@@ -34926,7 +34821,7 @@ public void doAssaultDrop(Entity entity) {\n         // check for a safe landing\n         addNewLines();\n         r.subject = entity.getId();\n-        r.add(entity.getDisplayName(), true);\n+        r.add(entity.getDisplayName());\n         r.add(psr.getValueAsString());\n         r.add(roll);\n         r.newlines = 1;\n@@ -34943,7 +34838,7 @@ public void doAssaultDrop(Entity entity) {\n             r = new Report(2388);\n             addReport(r);\n             r.subject = entity.getId();\n-            r.add(entity.getDisplayName(), true);\n+            r.add(entity.getDisplayName());\n             game.removeEntity(entity.getId(), IEntityRemovalConditions.REMOVE_IN_RETREAT);\n             return;\n         }\n@@ -35613,7 +35508,7 @@ public void removeSmokeTerrain(SmokeCloud cloud) {\n      */\n     private Vector<Report> resolveBlowingSandDamage() {\n         Vector<Report> vFullReport = new Vector<>();\n-        vFullReport.add(new Report(5002, Report.PUBLIC));\n+        vFullReport.add(new Report(5002, ReportType.PUBLIC));\n         int damage_bonus = Math.max(0, game.getPlanetaryConditions().getWindStrength()\n                 - PlanetaryConditions.WI_MOD_GALE);\n         // cycle through each team and damage 1d6 airborne VTOL/WiGE"
  }
]
