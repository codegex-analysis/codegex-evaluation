[
  {
    "sha": "3f9abbcc2d994190f18fa5925f6751909f5f327c",
    "filename": "megamek/src/megamek/client/Client.java",
    "status": "modified",
    "additions": 19,
    "deletions": 52,
    "changes": 71,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/client/Client.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/client/Client.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/client/Client.java?ref=4ee2b139139af18aa9aa95ef45714ab9a5724ad4",
    "patch": "@@ -123,7 +123,7 @@\n \n     private boolean disconnectFlag = false;\n \n-    private Hashtable<String, Integer> duplicateNameHash = new Hashtable<String, Integer>();\n+    private final UnitNameTracker unitNameTracker = new UnitNameTracker();\n \n     public Map<String, Client> bots = new TreeMap<String, Client>(StringUtil.stringComparator());\n \n@@ -481,7 +481,9 @@ public void changePhase(IGame.Phase phase) {\n             if (MechSummaryCache.getInstance().isInitialized()) {\n                 RandomUnitGenerator.getInstance();\n             }\n-            duplicateNameHash.clear(); // reset this\n+            synchronized (unitNameTracker) {\n+                unitNameTracker.clear(); // reset this\n+            }\n             break;\n         default:\n         }\n@@ -1646,17 +1648,9 @@ public void setName(String newN) {\n      * client (player) already has a unit in the game with the same name. If so,\n      * add an identifier to the units name.\n      */\n-    private void checkDuplicateNamesDuringAdd(Entity entity) {\n-        if (duplicateNameHash.get(entity.getShortName()) == null) {\n-            duplicateNameHash.put(entity.getShortName(), Integer.valueOf(1));\n-        } else {\n-            int count = duplicateNameHash.get(entity.getShortName()).intValue();\n-            count++;\n-            duplicateNameHash.put(entity.getShortName(), Integer.valueOf(count));\n-            entity.duplicateMarker = count;\n-            entity.generateShortName();\n-            entity.generateDisplayName();\n-\n+    private synchronized void checkDuplicateNamesDuringAdd(Entity entity) {\n+        if (entity != null) {\n+            unitNameTracker.add(entity);\n         }\n     }\n \n@@ -1666,49 +1660,22 @@ private void checkDuplicateNamesDuringAdd(Entity entity) {\n      * @param ids\n      */\n     private void checkDuplicateNamesDuringDelete(List<Integer> ids) {\n-        ArrayList<Entity> myEntities = game.getPlayerEntities(game.getPlayer(localPlayerNumber), false);\n-        Hashtable<String, ArrayList<Integer>> rawNameToId = new Hashtable<String, ArrayList<Integer>>(\n-                (int) (myEntities.size() * 1.26));\n-\n-        for (Entity e : myEntities) {\n-            String rawName = e.getShortNameRaw();\n-            ArrayList<Integer> namedIds = rawNameToId.get(rawName);\n-            if (namedIds == null) {\n-                namedIds = new ArrayList<Integer>();\n-            }\n-            namedIds.add(e.getId());\n-            rawNameToId.put(rawName, namedIds);\n-        }\n-\n-        for (int id : ids) {\n-            Entity removedEntity = game.getEntity(id);\n-            if (removedEntity == null) {\n-                continue;\n-            }\n-\n-            String removedRawName = removedEntity.getShortNameRaw();\n-            Integer count = duplicateNameHash.get(removedEntity.getShortNameRaw());\n-            if ((count != null) && (count > 1)) {\n-                ArrayList<Integer> namedIds = rawNameToId.get(removedRawName);\n-                for (Integer i : namedIds) {\n-                    Entity e = game.getEntity(i);\n-                    String eRawName = e.getShortNameRaw();\n-                    if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {\n-                        e.duplicateMarker--;\n-                        e.generateShortName();\n-                        e.generateDisplayName();\n-                        // Update the Entity, unless it's going to be deleted\n-                        if (!ids.contains(e.getId())) {\n-                            sendUpdateEntity(e);\n-                        }\n-                    }\n+        final List<Entity> updatedEntities = new ArrayList<>();\n+        synchronized (unitNameTracker) {\n+            for (int id : ids) {\n+                Entity removedEntity = game.getEntity(id);\n+                if (removedEntity == null) {\n+                    continue;\n                 }\n-                duplicateNameHash.put(removedEntity.getShortNameRaw(), Integer.valueOf(count - 1));\n \n-            } else if (count != null) {\n-                duplicateNameHash.remove(removedEntity.getShortNameRaw());\n+                unitNameTracker.remove(removedEntity, updatedEntities::add);\n             }\n         }\n+\n+        // Send updates for any entity which had its name updated\n+        for (Entity e : updatedEntities) {\n+            sendUpdateEntity(e);\n+        }\n     }\n \n     /**"
  },
  {
    "sha": "09afa1cc483ba1e3c83708788d68823301d74734",
    "filename": "megamek/src/megamek/common/EjectedCrew.java",
    "status": "modified",
    "additions": 2,
    "deletions": 9,
    "changes": 11,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/EjectedCrew.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/EjectedCrew.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/EjectedCrew.java?ref=4ee2b139139af18aa9aa95ef45714ab9a5724ad4",
    "patch": "@@ -45,9 +45,7 @@ public EjectedCrew(Entity originalRide) {\n         //setWeight(1); // Copied from original MechWarrior code, but does this really do anything?\n \n         // Generate the display name, then add the original ride's name.\n-        StringBuffer newName = new StringBuffer(getDisplayName());\n-        newName.append(\" of \").append(originalRide.getDisplayName());\n-        displayName = newName.toString();\n+        setDisplayName(getDisplayName() + \" of \" + originalRide.getDisplayName());\n \n         // Finish initializing this unit.\n         setOwner(originalRide.getOwner());\n@@ -90,8 +88,7 @@ public EjectedCrew(Aero originalRide, int escapedThisRound) {\n         setModel(originalRide.getDisplayName());\n \n         // Generate the display name, then add the original ride's name.\n-        String newName = new String(getDisplayName() + \" of \" + originalRide.getDisplayName());\n-        displayName = newName;\n+        setDisplayName(getDisplayName() + \" of \" + originalRide.getDisplayName());\n         \n         initializeInternal(escapedThisRound, Infantry.LOC_INFANTRY);\n         \n@@ -119,10 +116,6 @@ public EjectedCrew(Crew crew, IPlayer owner, IGame game) {\n         setModel(crew.getName());\n         //setWeight(1);\n \n-        // Generate the display name, then add the original ride's name.\n-        StringBuffer newName = new StringBuffer(getDisplayName());\n-        displayName = newName.toString();\n-\n         // Finish initializing this unit.\n         setOwner(owner);\n         initializeInternal(crew.getSize(), Infantry.LOC_INFANTRY);"
  },
  {
    "sha": "b7adab7d9abbd73024b2ef02778661d2b26f97e6",
    "filename": "megamek/src/megamek/common/Entity.java",
    "status": "modified",
    "additions": 92,
    "deletions": 36,
    "changes": 128,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/Entity.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/Entity.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/Entity.java?ref=4ee2b139139af18aa9aa95ef45714ab9a5724ad4",
    "patch": "@@ -239,9 +239,12 @@\n \n     protected int initialBV = -1;\n \n-    protected String displayName = null;\n-    protected String shortName = null;\n-    public int duplicateMarker = 1;\n+    /**\n+     * Protects: displayName, shortName, duplicateMarker.\n+     */\n+    private String displayName = null;\n+    private String shortName = null;\n+    private int duplicateMarker = 1;\n \n     protected transient IPlayer owner;\n     protected int ownerId;\n@@ -2448,6 +2451,49 @@ public boolean isAirborneAeroOnGroundMap() {\n         return isAero() && isAirborne() && getGame().getBoard().onGround();\n     }\n \n+    /**\n+     * Gets the marker used to disambiguate this entity\n+     * from others with the same name. These are monotonically\n+     * increasing values, starting from one.\n+     */\n+    public synchronized int getDuplicateMarker() {\n+        return duplicateMarker;\n+    }\n+\n+    /**\n+     * Sets the marker used to disambiguate this entity\n+     * from others with the same name. These are monotonically\n+     * increasing values, starting from one.\n+     * @param duplicateMarker A marker to disambiguate this entity\n+     *                        from others with the same name.\n+     */\n+    public synchronized void setDuplicateMarker(int duplicateMarker) {\n+        this.duplicateMarker = duplicateMarker;\n+        if (duplicateMarker > 1) {\n+            shortName = createShortName(duplicateMarker);\n+            displayName = createDisplayName(duplicateMarker);\n+        }\n+    }\n+\n+    /**\n+     * Updates the marker used to disambiguate this entity\n+     * from others with the same name after one of them has\n+     * been removed from the game.\n+     * @param removedMarker The marker of the removed entity.\n+     * @return A value indicating whether or not this entity\n+     *         updated its duplicate marker.\n+     */\n+    public synchronized boolean updateDuplicateMarkerAfterDelete(int removedMarker) {\n+        if (duplicateMarker > removedMarker) {\n+            duplicateMarker--;\n+            shortName = createShortName(duplicateMarker);\n+            displayName = createDisplayName(duplicateMarker);\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     /**\n      * Returns the display name for this entity.\n      */\n@@ -2459,34 +2505,39 @@ public String getDisplayName() {\n         return displayName;\n     }\n \n+    /**\n+     * Sets the display name for this entity.\n+     * @param displayName The new display name.\n+     */\n+    protected void setDisplayName(String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n     /**\n      * Generates the display name for this entity.\n      * <p/>\n      * Sub-classes are allowed to override this method. The display name is in\n      * the format [Chassis] [Model] ([Player Name]).\n      */\n-    public void generateDisplayName() {\n-        StringBuffer nbuf = new StringBuffer();\n-        nbuf.append(chassis);\n-        if ((model != null) && (model.length() > 0)) {\n-            nbuf.append(\" \").append(model);\n-        }\n-        // if show unit id is on, append the id\n-        if (PreferenceManager.getClientPreferences().getShowUnitId()) {\n-            nbuf.append(\" ID:\").append(getId());\n-        } else if (duplicateMarker > 1) {\n-            // if not, and a player has more than one unit with the same name,\n-            // append \"#N\" after the model to differentiate.\n-            nbuf.append(\" #\" + duplicateMarker);\n-        }\n+    public synchronized void generateDisplayName() {\n+        displayName = createDisplayName(duplicateMarker);\n+     }\n+\n+    /**\n+     * Creates a display name for the entity.\n+     * @param duplicateMarker A number used to disambiguate two entities with\n+     *                        the same name.\n+     * @return A display name for the entity.\n+     */\n+    private String createDisplayName(int duplicateMarker) {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(createShortName(duplicateMarker));\n+\n         if (getOwner() != null) {\n-            nbuf.append(\" (\").append(getOwner().getName()).append(\")\");\n-        }\n-        if (PreferenceManager.getClientPreferences().getShowUnitId()) {\n-            nbuf.append(\" ID:\").append(getId());\n+            builder.append(\" (\").append(getOwner().getName()).append(\")\");\n         }\n \n-        displayName = nbuf.toString();\n+        return builder.toString();\n     }\n \n     /**\n@@ -2506,31 +2557,36 @@ public String getShortName() {\n      * Sub-classes are allowed to override this method. The display name is in\n      * the format [Chassis] [Model].\n      */\n-    public void generateShortName() {\n-        StringBuffer nbuf = new StringBuffer();\n-        nbuf.append(chassis);\n-        if ((model != null) && (model.length() > 0)) {\n-            nbuf.append(\" \").append(model);\n-        }\n+    public synchronized void generateShortName() {\n+        shortName = createShortName(duplicateMarker);\n+    }\n+\n+    /**\n+     * Creates a short name for the entity.\n+     * @param duplicateMarker A number used to disambiguate two entities with\n+     *                        the same name.\n+     * @return A short name for the entity.\n+     */\n+    private String createShortName(int duplicateMarker) {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(getShortNameRaw());\n         // if show unit id is on, append the id\n         if (PreferenceManager.getClientPreferences().getShowUnitId()) {\n-            nbuf.append(\" ID:\").append(getId());\n+            builder.append(\" ID:\").append(getId());\n         } else if (duplicateMarker > 1) {\n             // if not, and a player has more than one unit with the same name,\n             // append \"#N\" after the model to differentiate.\n-            nbuf.append(\" #\" + duplicateMarker);\n+            builder.append(\" #\" + duplicateMarker);\n         }\n \n-        shortName = nbuf.toString();\n+        return builder.toString();\n     }\n \n     public String getShortNameRaw() {\n-        StringBuffer nbuf = new StringBuffer();\n-        nbuf.append(chassis);\n-        if ((model != null) && (model.length() > 0)) {\n-            nbuf.append(\" \").append(model);\n+        if ((model == null) || (model.length() == 0)) {\n+            return chassis;\n         }\n-        return nbuf.toString();\n+        return chassis + \" \" + model;\n     }\n \n     /**"
  },
  {
    "sha": "0dd89b4637473825ae4a566406f5ee3b98a03d75",
    "filename": "megamek/src/megamek/common/EscapePods.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/EscapePods.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/EscapePods.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/EscapePods.java?ref=4ee2b139139af18aa9aa95ef45714ab9a5724ad4",
    "patch": "@@ -45,8 +45,7 @@ public EscapePods(Aero originalRide, int nPods, boolean isEscapePod) {\n         setModel(originalRide.getDisplayName());\n \n         // Generate the display name, then add the original ride's name.\n-        String newName = new String(POD_EJECT_NAME + originalRide.getDisplayName());\n-        displayName = newName;\n+        setDisplayName(POD_EJECT_NAME + originalRide.getDisplayName());\n         \n         //Pods and boats have an SI of 1 each\n         initializeSI(nPods);"
  },
  {
    "sha": "b421583fcd8a1e00d5cc8f8d9698aae38ac317e1",
    "filename": "megamek/src/megamek/common/UnitNameTracker.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/UnitNameTracker.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/src/megamek/common/UnitNameTracker.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/src/megamek/common/UnitNameTracker.java?ref=4ee2b139139af18aa9aa95ef45714ab9a5724ad4",
    "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (C) 2021 - The MegaMek Team\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it\n+ *  under the terms of the GNU General Public License as published by the Free\n+ *  Software Foundation; either version 2 of the License, or (at your option)\n+ *  any later version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but\n+ *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ *  for more details.\n+ */\n+\n+package megamek.common;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import megamek.common.annotations.Nullable;\n+\n+/**\n+ * Provides a means to track unit names for collisions.\n+ * \n+ * @implNote This API is not thread safe.\n+ */\n+public class UnitNameTracker {\n+    private final Map<String, List<Entity>> entityMap = new HashMap<>();\n+\n+    /**\n+     * Adds an entity to the name tracker.\n+     * @param entity The entity to track for name collisions.\n+     */\n+    public void add(Entity entity) {\n+        List<Entity> entities = entityMap.computeIfAbsent(entity.getShortNameRaw(), k -> new ArrayList<>());\n+        entities.add(entity);\n+        entity.setDuplicateMarker(entities.size());\n+    }\n+\n+    /**\n+     * Removes an entity from the name tracker.\n+     * @param entity The entity to remove from the name tracker.\n+     * @return A value indicating whether or not the entity was removed.\n+     */\n+    public boolean remove(Entity entity) {\n+        return remove(entity, null);\n+    }\n+\n+    /**\n+     * Removes an entity from the name tracker.\n+     * @param entity The entity to remove from the name tracker.\n+     * @param onEntityUpdated An optional function to execute when an entity is updated\n+     *                        due to a duplicate name change.\n+     * @return A value indicating whether or not the entity was removed.\n+     */\n+    public boolean remove(Entity entity, @Nullable Consumer<Entity> onEntityUpdated) {\n+        String rawName = entity.getShortNameRaw();\n+        int removedDuplicateMarker = entity.getDuplicateMarker();\n+\n+        // Decrease the number of duplicate names, removing it if there was only one left\n+        List<Entity> entities = entityMap.get(rawName);\n+        if ((entities == null) || !entities.remove(entity)) {\n+            return false;\n+        }\n+\n+        // If there are more than one entities with this raw name,\n+        // go through the list of matching entities and update their\n+        // duplicate number\n+        for (Entity e : entities) {\n+            boolean updated = e.updateDuplicateMarkerAfterDelete(removedDuplicateMarker);\n+            if (updated && (onEntityUpdated != null)) {\n+                onEntityUpdated.accept(e);\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Clears the unit name tracker of all tracked entities.\n+     */\n+    public void clear() {\n+        entityMap.clear();\n+    }\n+}"
  },
  {
    "sha": "e3eb51e72acd0e4562f5de11f06cdf35fdf1ef57",
    "filename": "megamek/unittests/megamek/common/UnitNameTrackerTest.java",
    "status": "added",
    "additions": 203,
    "deletions": 0,
    "changes": 203,
    "blob_url": "https://github.com/Windchild292/megamek/blob/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/unittests/megamek/common/UnitNameTrackerTest.java",
    "raw_url": "https://github.com/Windchild292/megamek/raw/4ee2b139139af18aa9aa95ef45714ab9a5724ad4/megamek/unittests/megamek/common/UnitNameTrackerTest.java",
    "contents_url": "https://api.github.com/repos/Windchild292/megamek/contents/megamek/unittests/megamek/common/UnitNameTrackerTest.java?ref=4ee2b139139af18aa9aa95ef45714ab9a5724ad4",
    "patch": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright (C) 2021 - The MegaMek Team\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it\n+ *  under the terms of the GNU General Public License as published by the Free\n+ *  Software Foundation; either version 2 of the License, or (at your option)\n+ *  any later version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but\n+ *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ *  for more details.\n+ */\n+\n+package megamek.common;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+\n+public class UnitNameTrackerTest {\n+    @Test\n+    public void addEntitySetsDuplicateMarkerCorrectly() {\n+        String shortNameRaw = \"Mech MEK-01X\";\n+\n+        Entity mockEntity = createEntity(shortNameRaw);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity);\n+\n+        verify(mockEntity, times(1)).setDuplicateMarker(eq(1));\n+    }\n+\n+    @Test\n+    public void addMultipleUnrelatedEntitiesSetsDuplicateMarkerCorrectly() {\n+        String shortNameRaw0 = \"Mech MEK-01X\";\n+        String shortNameRaw1 = \"Mech MEK-02X\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw0);\n+        Entity mockEntity1 = createEntity(shortNameRaw1);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(1));\n+    }\n+\n+    @Test\n+    public void addMultipleRelatedEntitiesSetsDuplicateMarkerCorrectly() {\n+        String shortNameRaw = \"Mech MEK-01X\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw);\n+        Entity mockEntity1 = createEntity(shortNameRaw);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(2));\n+    }\n+\n+    @Test\n+    public void removeEntityUpdatesDuplicateMarker() {\n+        String shortNameRaw = \"Mech MEK-01X\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw);\n+        Entity mockEntity1 = createEntity(shortNameRaw);\n+        Entity mockEntity2 = createEntity(shortNameRaw);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+        tracker.add(mockEntity2);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(2));\n+        verify(mockEntity2, times(1)).setDuplicateMarker(eq(3));\n+\n+        tracker.remove(mockEntity0);\n+\n+        verify(mockEntity1, times(1)).updateDuplicateMarkerAfterDelete(eq(1));\n+        verify(mockEntity2, times(1)).updateDuplicateMarkerAfterDelete(eq(1));\n+    }\n+    \n+    @Test\n+    public void removeEntityUpdatesDuplicateMarker2() {\n+        String shortNameRaw = \"Mech MEK-01X\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw);\n+        Entity mockEntity1 = createEntity(shortNameRaw);\n+        Entity mockEntity2 = createEntity(shortNameRaw);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+        tracker.add(mockEntity2);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(2));\n+        verify(mockEntity2, times(1)).setDuplicateMarker(eq(3));\n+\n+        tracker.remove(mockEntity1);\n+\n+        verify(mockEntity0, times(1)).updateDuplicateMarkerAfterDelete(eq(2));\n+        verify(mockEntity2, times(1)).updateDuplicateMarkerAfterDelete(eq(2));\n+    }\n+\n+    @Test\n+    public void removeEntityUpdatesDuplicateMarker3() {\n+        String shortNameRaw = \"Mech MEK-01X\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw);\n+        Entity mockEntity1 = createEntity(shortNameRaw);\n+        Entity mockEntity2 = createEntity(shortNameRaw);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(2));\n+\n+        tracker.remove(mockEntity0);\n+\n+        verify(mockEntity1, times(1)).updateDuplicateMarkerAfterDelete(eq(1));\n+\n+        tracker.add(mockEntity2);\n+\n+        // This entity is now #2 as the original number 2 became number 1\n+        verify(mockEntity2, times(1)).setDuplicateMarker(eq(2));\n+    }\n+\n+    @Test\n+    public void removeEntityOnlyAffectsRelatedEntities() {\n+        String shortNameRaw0 = \"Mech MEK-01X\";\n+        String shortNameRaw1 = \"Mech MEK-01Y\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw0);\n+        Entity mockEntity1 = createEntity(shortNameRaw0);\n+        Entity mockEntityUnrelated = createEntity(shortNameRaw1);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+        tracker.add(mockEntityUnrelated);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(2));\n+        verify(mockEntityUnrelated, times(1)).setDuplicateMarker(eq(1));\n+\n+        tracker.remove(mockEntity0);\n+\n+        verify(mockEntity1, times(1)).updateDuplicateMarkerAfterDelete(eq(1));\n+\n+        // Should not update unrelated entity\n+        verify(mockEntityUnrelated, times(0)).updateDuplicateMarkerAfterDelete(anyInt());\n+    }\n+\n+    @Test\n+    public void clearEntities() {\n+        String shortNameRaw = \"Mech MEK-01X\";\n+\n+        Entity mockEntity0 = createEntity(shortNameRaw);\n+        Entity mockEntity1 = createEntity(shortNameRaw);\n+        Entity mockEntity2 = createEntity(shortNameRaw);\n+\n+        UnitNameTracker tracker = new UnitNameTracker();\n+\n+        tracker.add(mockEntity0);\n+        tracker.add(mockEntity1);\n+\n+        verify(mockEntity0, times(1)).setDuplicateMarker(eq(1));\n+        verify(mockEntity1, times(1)).setDuplicateMarker(eq(2));\n+\n+        tracker.clear();\n+\n+        tracker.add(mockEntity2);\n+\n+        // There are no entities being tracked, so this should be #1\n+        verify(mockEntity2, times(1)).setDuplicateMarker(eq(1));\n+    }\n+\n+    private Entity createEntity(String shortNameRaw) {\n+        Entity mockEntity = mock(Entity.class);\n+        when(mockEntity.getShortNameRaw()).thenReturn(shortNameRaw);\n+        doAnswer(inv -> {\n+            int marker = (int) inv.getArgument(0);\n+            when(mockEntity.getDuplicateMarker()).thenReturn(marker);\n+            return null;\n+        }).when(mockEntity).setDuplicateMarker(anyInt());\n+        return mockEntity;\n+    }\n+}"
  }
]
