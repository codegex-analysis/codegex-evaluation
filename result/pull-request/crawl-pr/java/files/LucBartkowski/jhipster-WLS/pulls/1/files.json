[
  {
    "sha": "889769e2e90b8c8909fda658402b663eac13dad6",
    "filename": ".jhipster/Classificatie.json",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Classificatie.json",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Classificatie.json",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/.jhipster/Classificatie.json?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,42 @@\n+{\n+  \"name\": \"Classificatie\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"classificatie\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"kleur\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"omschrijving\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"geregistreerde\",\n+      \"otherEntityRelationshipName\": \"classificatie\",\n+      \"relationshipName\": \"geregistreerde\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210315162646\",\n+  \"entityTableName\": \"classificatie\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "83cdf2ee1d03da28f7ae0f405ae245369b644734",
    "filename": ".jhipster/Crest.json",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Crest.json",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Crest.json",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/.jhipster/Crest.json?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,38 @@\n+{\n+  \"name\": \"Crest\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"verantwoordelijkeCrest\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"naamEntiteit\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"geregistreerde\",\n+      \"otherEntityRelationshipName\": \"verantwoordelijkeCrest\",\n+      \"relationshipName\": \"geregistreerde\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210315162746\",\n+  \"entityTableName\": \"crest\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "bbb8db7535e82375c03b950fe2e3251f18851db9",
    "filename": ".jhipster/Geregistreerde.json",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Geregistreerde.json",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Geregistreerde.json",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/.jhipster/Geregistreerde.json?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,111 @@\n+{\n+  \"name\": \"Geregistreerde\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"voornamen\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"achternaam\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"geboortedatum\",\n+      \"fieldType\": \"Instant\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"geboorteplaats\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"registerNummer\",\n+      \"fieldType\": \"Long\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"classificatie\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"personeelnummer\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"mailadres\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"telefoonNummer\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"mobieleNummer\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"verantwoordelijkeCrest\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"naam\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"crest\",\n+      \"otherEntityRelationshipName\": \"geregistreerde\",\n+      \"relationshipName\": \"verantwoordelijkeCrest\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"medewerker\",\n+      \"otherEntityRelationshipName\": \"geregistreerde\",\n+      \"relationshipName\": \"naam\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"classificatie\",\n+      \"otherEntityRelationshipName\": \"geregistreerde\",\n+      \"relationshipName\": \"classificatie\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210315162546\",\n+  \"entityTableName\": \"geregistreerde\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"pagination\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "7d76efbd206fe8e7266c6fb4f5c30a967bd4b20e",
    "filename": ".jhipster/Medewerker.json",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Medewerker.json",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/.jhipster/Medewerker.json",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/.jhipster/Medewerker.json?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,39 @@\n+{\n+  \"name\": \"Medewerker\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"naam\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"functie\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"geregistreerde\",\n+      \"otherEntityRelationshipName\": \"naam\",\n+      \"javadoc\": \"A relationship\",\n+      \"relationshipName\": \"geregistreerde\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210315162846\",\n+  \"entityTableName\": \"medewerker\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "1285392c3983c716d832357d509e276922f2089b",
    "filename": "src/main/java/com/mycompany/myapp/domain/Classificatie.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Classificatie.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Classificatie.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/domain/Classificatie.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,140 @@\n+package com.mycompany.myapp.domain;\n+\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import org.springframework.data.elasticsearch.annotations.FieldType;\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Classificatie.\n+ */\n+@Entity\n+@Table(name = \"classificatie\")\n+@org.springframework.data.elasticsearch.annotations.Document(indexName = \"classificatie\")\n+public class Classificatie implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Column(name = \"classificatie\", nullable = false)\n+    private String classificatie;\n+\n+    @Column(name = \"kleur\")\n+    private String kleur;\n+\n+    @NotNull\n+    @Column(name = \"omschrijving\", nullable = false)\n+    private String omschrijving;\n+\n+    @OneToMany(mappedBy = \"classificatie\")\n+    private Set<Geregistreerde> geregistreerdes = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getClassificatie() {\n+        return classificatie;\n+    }\n+\n+    public Classificatie classificatie(String classificatie) {\n+        this.classificatie = classificatie;\n+        return this;\n+    }\n+\n+    public void setClassificatie(String classificatie) {\n+        this.classificatie = classificatie;\n+    }\n+\n+    public String getKleur() {\n+        return kleur;\n+    }\n+\n+    public Classificatie kleur(String kleur) {\n+        this.kleur = kleur;\n+        return this;\n+    }\n+\n+    public void setKleur(String kleur) {\n+        this.kleur = kleur;\n+    }\n+\n+    public String getOmschrijving() {\n+        return omschrijving;\n+    }\n+\n+    public Classificatie omschrijving(String omschrijving) {\n+        this.omschrijving = omschrijving;\n+        return this;\n+    }\n+\n+    public void setOmschrijving(String omschrijving) {\n+        this.omschrijving = omschrijving;\n+    }\n+\n+    public Set<Geregistreerde> getGeregistreerdes() {\n+        return geregistreerdes;\n+    }\n+\n+    public Classificatie geregistreerdes(Set<Geregistreerde> geregistreerdes) {\n+        this.geregistreerdes = geregistreerdes;\n+        return this;\n+    }\n+\n+    public Classificatie addGeregistreerde(Geregistreerde geregistreerde) {\n+        this.geregistreerdes.add(geregistreerde);\n+        geregistreerde.setClassificatie(this);\n+        return this;\n+    }\n+\n+    public Classificatie removeGeregistreerde(Geregistreerde geregistreerde) {\n+        this.geregistreerdes.remove(geregistreerde);\n+        geregistreerde.setClassificatie(null);\n+        return this;\n+    }\n+\n+    public void setGeregistreerdes(Set<Geregistreerde> geregistreerdes) {\n+        this.geregistreerdes = geregistreerdes;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Classificatie)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Classificatie) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Classificatie{\" +\n+            \"id=\" + getId() +\n+            \", classificatie='\" + getClassificatie() + \"'\" +\n+            \", kleur='\" + getKleur() + \"'\" +\n+            \", omschrijving='\" + getOmschrijving() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "ef1a8625193575e797ee44c086420f046348c646",
    "filename": "src/main/java/com/mycompany/myapp/domain/Crest.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Crest.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Crest.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/domain/Crest.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,123 @@\n+package com.mycompany.myapp.domain;\n+\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import org.springframework.data.elasticsearch.annotations.FieldType;\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Crest.\n+ */\n+@Entity\n+@Table(name = \"crest\")\n+@org.springframework.data.elasticsearch.annotations.Document(indexName = \"crest\")\n+public class Crest implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Column(name = \"verantwoordelijke_crest\", nullable = false)\n+    private String verantwoordelijkeCrest;\n+\n+    @NotNull\n+    @Column(name = \"naam_entiteit\", nullable = false)\n+    private String naamEntiteit;\n+\n+    @OneToMany(mappedBy = \"verantwoordelijkeCrest\")\n+    private Set<Geregistreerde> geregistreerdes = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getVerantwoordelijkeCrest() {\n+        return verantwoordelijkeCrest;\n+    }\n+\n+    public Crest verantwoordelijkeCrest(String verantwoordelijkeCrest) {\n+        this.verantwoordelijkeCrest = verantwoordelijkeCrest;\n+        return this;\n+    }\n+\n+    public void setVerantwoordelijkeCrest(String verantwoordelijkeCrest) {\n+        this.verantwoordelijkeCrest = verantwoordelijkeCrest;\n+    }\n+\n+    public String getNaamEntiteit() {\n+        return naamEntiteit;\n+    }\n+\n+    public Crest naamEntiteit(String naamEntiteit) {\n+        this.naamEntiteit = naamEntiteit;\n+        return this;\n+    }\n+\n+    public void setNaamEntiteit(String naamEntiteit) {\n+        this.naamEntiteit = naamEntiteit;\n+    }\n+\n+    public Set<Geregistreerde> getGeregistreerdes() {\n+        return geregistreerdes;\n+    }\n+\n+    public Crest geregistreerdes(Set<Geregistreerde> geregistreerdes) {\n+        this.geregistreerdes = geregistreerdes;\n+        return this;\n+    }\n+\n+    public Crest addGeregistreerde(Geregistreerde geregistreerde) {\n+        this.geregistreerdes.add(geregistreerde);\n+        geregistreerde.setVerantwoordelijkeCrest(this);\n+        return this;\n+    }\n+\n+    public Crest removeGeregistreerde(Geregistreerde geregistreerde) {\n+        this.geregistreerdes.remove(geregistreerde);\n+        geregistreerde.setVerantwoordelijkeCrest(null);\n+        return this;\n+    }\n+\n+    public void setGeregistreerdes(Set<Geregistreerde> geregistreerdes) {\n+        this.geregistreerdes = geregistreerdes;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Crest)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Crest) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Crest{\" +\n+            \"id=\" + getId() +\n+            \", verantwoordelijkeCrest='\" + getVerantwoordelijkeCrest() + \"'\" +\n+            \", naamEntiteit='\" + getNaamEntiteit() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "010b642c1fbb6ae310a941a76c1592ec2b1150e4",
    "filename": "src/main/java/com/mycompany/myapp/domain/Geregistreerde.java",
    "status": "added",
    "additions": 322,
    "deletions": 0,
    "changes": 322,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Geregistreerde.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Geregistreerde.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/domain/Geregistreerde.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,322 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import org.springframework.data.elasticsearch.annotations.FieldType;\n+import java.io.Serializable;\n+import java.time.Instant;\n+\n+/**\n+ * A Geregistreerde.\n+ */\n+@Entity\n+@Table(name = \"geregistreerde\")\n+@org.springframework.data.elasticsearch.annotations.Document(indexName = \"geregistreerde\")\n+public class Geregistreerde implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Column(name = \"voornamen\", nullable = false)\n+    private String voornamen;\n+\n+    @NotNull\n+    @Column(name = \"achternaam\", nullable = false)\n+    private String achternaam;\n+\n+    @NotNull\n+    @Column(name = \"geboortedatum\", nullable = false)\n+    private Instant geboortedatum;\n+\n+    @NotNull\n+    @Column(name = \"geboorteplaats\", nullable = false)\n+    private String geboorteplaats;\n+\n+    @NotNull\n+    @Column(name = \"register_nummer\", nullable = false)\n+    private Long registerNummer;\n+\n+    @NotNull\n+    @Column(name = \"classificatie\", nullable = false)\n+    private String classificatie;\n+\n+    @Column(name = \"personeelnummer\")\n+    private String personeelnummer;\n+\n+    @Column(name = \"mailadres\")\n+    private String mailadres;\n+\n+    @Column(name = \"telefoon_nummer\")\n+    private String telefoonNummer;\n+\n+    @Column(name = \"mobiele_nummer\")\n+    private String mobieleNummer;\n+\n+    @NotNull\n+    @Column(name = \"verantwoordelijke_crest\", nullable = false)\n+    private String verantwoordelijkeCrest;\n+\n+    @NotNull\n+    @Column(name = \"naam\", nullable = false)\n+    private String naam;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"geregistreerdes\", allowSetters = true)\n+    private Crest verantwoordelijkeCrest;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"geregistreerdes\", allowSetters = true)\n+    private Medewerker naam;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"geregistreerdes\", allowSetters = true)\n+    private Classificatie classificatie;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getVoornamen() {\n+        return voornamen;\n+    }\n+\n+    public Geregistreerde voornamen(String voornamen) {\n+        this.voornamen = voornamen;\n+        return this;\n+    }\n+\n+    public void setVoornamen(String voornamen) {\n+        this.voornamen = voornamen;\n+    }\n+\n+    public String getAchternaam() {\n+        return achternaam;\n+    }\n+\n+    public Geregistreerde achternaam(String achternaam) {\n+        this.achternaam = achternaam;\n+        return this;\n+    }\n+\n+    public void setAchternaam(String achternaam) {\n+        this.achternaam = achternaam;\n+    }\n+\n+    public Instant getGeboortedatum() {\n+        return geboortedatum;\n+    }\n+\n+    public Geregistreerde geboortedatum(Instant geboortedatum) {\n+        this.geboortedatum = geboortedatum;\n+        return this;\n+    }\n+\n+    public void setGeboortedatum(Instant geboortedatum) {\n+        this.geboortedatum = geboortedatum;\n+    }\n+\n+    public String getGeboorteplaats() {\n+        return geboorteplaats;\n+    }\n+\n+    public Geregistreerde geboorteplaats(String geboorteplaats) {\n+        this.geboorteplaats = geboorteplaats;\n+        return this;\n+    }\n+\n+    public void setGeboorteplaats(String geboorteplaats) {\n+        this.geboorteplaats = geboorteplaats;\n+    }\n+\n+    public Long getRegisterNummer() {\n+        return registerNummer;\n+    }\n+\n+    public Geregistreerde registerNummer(Long registerNummer) {\n+        this.registerNummer = registerNummer;\n+        return this;\n+    }\n+\n+    public void setRegisterNummer(Long registerNummer) {\n+        this.registerNummer = registerNummer;\n+    }\n+\n+    public String getClassificatie() {\n+        return classificatie;\n+    }\n+\n+    public Geregistreerde classificatie(String classificatie) {\n+        this.classificatie = classificatie;\n+        return this;\n+    }\n+\n+    public void setClassificatie(String classificatie) {\n+        this.classificatie = classificatie;\n+    }\n+\n+    public String getPersoneelnummer() {\n+        return personeelnummer;\n+    }\n+\n+    public Geregistreerde personeelnummer(String personeelnummer) {\n+        this.personeelnummer = personeelnummer;\n+        return this;\n+    }\n+\n+    public void setPersoneelnummer(String personeelnummer) {\n+        this.personeelnummer = personeelnummer;\n+    }\n+\n+    public String getMailadres() {\n+        return mailadres;\n+    }\n+\n+    public Geregistreerde mailadres(String mailadres) {\n+        this.mailadres = mailadres;\n+        return this;\n+    }\n+\n+    public void setMailadres(String mailadres) {\n+        this.mailadres = mailadres;\n+    }\n+\n+    public String getTelefoonNummer() {\n+        return telefoonNummer;\n+    }\n+\n+    public Geregistreerde telefoonNummer(String telefoonNummer) {\n+        this.telefoonNummer = telefoonNummer;\n+        return this;\n+    }\n+\n+    public void setTelefoonNummer(String telefoonNummer) {\n+        this.telefoonNummer = telefoonNummer;\n+    }\n+\n+    public String getMobieleNummer() {\n+        return mobieleNummer;\n+    }\n+\n+    public Geregistreerde mobieleNummer(String mobieleNummer) {\n+        this.mobieleNummer = mobieleNummer;\n+        return this;\n+    }\n+\n+    public void setMobieleNummer(String mobieleNummer) {\n+        this.mobieleNummer = mobieleNummer;\n+    }\n+\n+    public String getVerantwoordelijkeCrest() {\n+        return verantwoordelijkeCrest;\n+    }\n+\n+    public Geregistreerde verantwoordelijkeCrest(String verantwoordelijkeCrest) {\n+        this.verantwoordelijkeCrest = verantwoordelijkeCrest;\n+        return this;\n+    }\n+\n+    public void setVerantwoordelijkeCrest(String verantwoordelijkeCrest) {\n+        this.verantwoordelijkeCrest = verantwoordelijkeCrest;\n+    }\n+\n+    public String getNaam() {\n+        return naam;\n+    }\n+\n+    public Geregistreerde naam(String naam) {\n+        this.naam = naam;\n+        return this;\n+    }\n+\n+    public void setNaam(String naam) {\n+        this.naam = naam;\n+    }\n+\n+    public Crest getVerantwoordelijkeCrest() {\n+        return verantwoordelijkeCrest;\n+    }\n+\n+    public Geregistreerde verantwoordelijkeCrest(Crest crest) {\n+        this.verantwoordelijkeCrest = crest;\n+        return this;\n+    }\n+\n+    public void setVerantwoordelijkeCrest(Crest crest) {\n+        this.verantwoordelijkeCrest = crest;\n+    }\n+\n+    public Medewerker getNaam() {\n+        return naam;\n+    }\n+\n+    public Geregistreerde naam(Medewerker medewerker) {\n+        this.naam = medewerker;\n+        return this;\n+    }\n+\n+    public void setNaam(Medewerker medewerker) {\n+        this.naam = medewerker;\n+    }\n+\n+    public Classificatie getClassificatie() {\n+        return classificatie;\n+    }\n+\n+    public Geregistreerde classificatie(Classificatie classificatie) {\n+        this.classificatie = classificatie;\n+        return this;\n+    }\n+\n+    public void setClassificatie(Classificatie classificatie) {\n+        this.classificatie = classificatie;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Geregistreerde)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Geregistreerde) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Geregistreerde{\" +\n+            \"id=\" + getId() +\n+            \", voornamen='\" + getVoornamen() + \"'\" +\n+            \", achternaam='\" + getAchternaam() + \"'\" +\n+            \", geboortedatum='\" + getGeboortedatum() + \"'\" +\n+            \", geboorteplaats='\" + getGeboorteplaats() + \"'\" +\n+            \", registerNummer=\" + getRegisterNummer() +\n+            \", classificatie='\" + getClassificatie() + \"'\" +\n+            \", personeelnummer='\" + getPersoneelnummer() + \"'\" +\n+            \", mailadres='\" + getMailadres() + \"'\" +\n+            \", telefoonNummer='\" + getTelefoonNummer() + \"'\" +\n+            \", mobieleNummer='\" + getMobieleNummer() + \"'\" +\n+            \", verantwoordelijkeCrest='\" + getVerantwoordelijkeCrest() + \"'\" +\n+            \", naam='\" + getNaam() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "c5a67289aa6272c0e14d183640b5d5bd2e19ad33",
    "filename": "src/main/java/com/mycompany/myapp/domain/Medewerker.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Medewerker.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/domain/Medewerker.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/domain/Medewerker.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,128 @@\n+package com.mycompany.myapp.domain;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import org.springframework.data.elasticsearch.annotations.FieldType;\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Medewerker.\n+ */\n+@Entity\n+@Table(name = \"medewerker\")\n+@org.springframework.data.elasticsearch.annotations.Document(indexName = \"medewerker\")\n+public class Medewerker implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Column(name = \"naam\", nullable = false)\n+    private String naam;\n+\n+    @NotNull\n+    @Column(name = \"functie\", nullable = false)\n+    private String functie;\n+\n+    /**\n+     * A relationship\n+     */\n+    @ApiModelProperty(value = \"A relationship\")\n+    @OneToMany(mappedBy = \"naam\")\n+    private Set<Geregistreerde> geregistreerdes = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getNaam() {\n+        return naam;\n+    }\n+\n+    public Medewerker naam(String naam) {\n+        this.naam = naam;\n+        return this;\n+    }\n+\n+    public void setNaam(String naam) {\n+        this.naam = naam;\n+    }\n+\n+    public String getFunctie() {\n+        return functie;\n+    }\n+\n+    public Medewerker functie(String functie) {\n+        this.functie = functie;\n+        return this;\n+    }\n+\n+    public void setFunctie(String functie) {\n+        this.functie = functie;\n+    }\n+\n+    public Set<Geregistreerde> getGeregistreerdes() {\n+        return geregistreerdes;\n+    }\n+\n+    public Medewerker geregistreerdes(Set<Geregistreerde> geregistreerdes) {\n+        this.geregistreerdes = geregistreerdes;\n+        return this;\n+    }\n+\n+    public Medewerker addGeregistreerde(Geregistreerde geregistreerde) {\n+        this.geregistreerdes.add(geregistreerde);\n+        geregistreerde.setNaam(this);\n+        return this;\n+    }\n+\n+    public Medewerker removeGeregistreerde(Geregistreerde geregistreerde) {\n+        this.geregistreerdes.remove(geregistreerde);\n+        geregistreerde.setNaam(null);\n+        return this;\n+    }\n+\n+    public void setGeregistreerdes(Set<Geregistreerde> geregistreerdes) {\n+        this.geregistreerdes = geregistreerdes;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Medewerker)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Medewerker) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Medewerker{\" +\n+            \"id=\" + getId() +\n+            \", naam='\" + getNaam() + \"'\" +\n+            \", functie='\" + getFunctie() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "2cdf74fbdad42fa583da42d2a85fdbef3b013bf4",
    "filename": "src/main/java/com/mycompany/myapp/repository/ClassificatieRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/ClassificatieRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/ClassificatieRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/ClassificatieRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Classificatie;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Classificatie entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface ClassificatieRepository extends JpaRepository<Classificatie, Long> {\n+}"
  },
  {
    "sha": "cd529fb9ec17c9e7a6a2a57e3001cc82382daaa4",
    "filename": "src/main/java/com/mycompany/myapp/repository/CrestRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/CrestRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/CrestRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/CrestRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Crest;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Crest entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface CrestRepository extends JpaRepository<Crest, Long> {\n+}"
  },
  {
    "sha": "692e5c5b84a6d93c176693ee90c149ee882f6d14",
    "filename": "src/main/java/com/mycompany/myapp/repository/GeregistreerdeRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/GeregistreerdeRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/GeregistreerdeRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/GeregistreerdeRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Geregistreerde;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Geregistreerde entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface GeregistreerdeRepository extends JpaRepository<Geregistreerde, Long> {\n+}"
  },
  {
    "sha": "eaf8915d87ffb09b3bceafd5d938d30e4e6875f5",
    "filename": "src/main/java/com/mycompany/myapp/repository/MedewerkerRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/MedewerkerRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/MedewerkerRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/MedewerkerRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Medewerker;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Medewerker entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface MedewerkerRepository extends JpaRepository<Medewerker, Long> {\n+}"
  },
  {
    "sha": "e2cc23137b2de84324a64625b8bbea6063ecd5ff",
    "filename": "src/main/java/com/mycompany/myapp/repository/search/ClassificatieSearchRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/ClassificatieSearchRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/ClassificatieSearchRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/search/ClassificatieSearchRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+package com.mycompany.myapp.repository.search;\n+\n+import com.mycompany.myapp.domain.Classificatie;\n+import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\n+\n+\n+/**\n+ * Spring Data Elasticsearch repository for the {@link Classificatie} entity.\n+ */\n+public interface ClassificatieSearchRepository extends ElasticsearchRepository<Classificatie, Long> {\n+}"
  },
  {
    "sha": "c707f2e617bf673140d4268d8c5805b5a8efc3f7",
    "filename": "src/main/java/com/mycompany/myapp/repository/search/CrestSearchRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/CrestSearchRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/CrestSearchRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/search/CrestSearchRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+package com.mycompany.myapp.repository.search;\n+\n+import com.mycompany.myapp.domain.Crest;\n+import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\n+\n+\n+/**\n+ * Spring Data Elasticsearch repository for the {@link Crest} entity.\n+ */\n+public interface CrestSearchRepository extends ElasticsearchRepository<Crest, Long> {\n+}"
  },
  {
    "sha": "f6cfe9f290554db9f6b040f8bc95b6e28515a819",
    "filename": "src/main/java/com/mycompany/myapp/repository/search/GeregistreerdeSearchRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/GeregistreerdeSearchRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/GeregistreerdeSearchRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/search/GeregistreerdeSearchRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+package com.mycompany.myapp.repository.search;\n+\n+import com.mycompany.myapp.domain.Geregistreerde;\n+import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\n+\n+\n+/**\n+ * Spring Data Elasticsearch repository for the {@link Geregistreerde} entity.\n+ */\n+public interface GeregistreerdeSearchRepository extends ElasticsearchRepository<Geregistreerde, Long> {\n+}"
  },
  {
    "sha": "40724fbdac1267f609e65ace4b0504f56a299d0d",
    "filename": "src/main/java/com/mycompany/myapp/repository/search/MedewerkerSearchRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/MedewerkerSearchRepository.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/repository/search/MedewerkerSearchRepository.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/repository/search/MedewerkerSearchRepository.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+package com.mycompany.myapp.repository.search;\n+\n+import com.mycompany.myapp.domain.Medewerker;\n+import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\n+\n+\n+/**\n+ * Spring Data Elasticsearch repository for the {@link Medewerker} entity.\n+ */\n+public interface MedewerkerSearchRepository extends ElasticsearchRepository<Medewerker, Long> {\n+}"
  },
  {
    "sha": "42d31c806373c420bcab932eccd33c25e1925d5d",
    "filename": "src/main/java/com/mycompany/myapp/service/GeregistreerdeService.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/service/GeregistreerdeService.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/service/GeregistreerdeService.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/service/GeregistreerdeService.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,56 @@\n+package com.mycompany.myapp.service;\n+\n+import com.mycompany.myapp.domain.Geregistreerde;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link Geregistreerde}.\n+ */\n+public interface GeregistreerdeService {\n+\n+    /**\n+     * Save a geregistreerde.\n+     *\n+     * @param geregistreerde the entity to save.\n+     * @return the persisted entity.\n+     */\n+    Geregistreerde save(Geregistreerde geregistreerde);\n+\n+    /**\n+     * Get all the geregistreerdes.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the list of entities.\n+     */\n+    Page<Geregistreerde> findAll(Pageable pageable);\n+\n+\n+    /**\n+     * Get the \"id\" geregistreerde.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<Geregistreerde> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" geregistreerde.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+\n+    /**\n+     * Search for the geregistreerde corresponding to the query.\n+     *\n+     * @param query the query of the search.\n+     * \n+     * @param pageable the pagination information.\n+     * @return the list of entities.\n+     */\n+    Page<Geregistreerde> search(String query, Pageable pageable);\n+}"
  },
  {
    "sha": "b63245f90dbca42483f4640c1c489a51f1d7fb6d",
    "filename": "src/main/java/com/mycompany/myapp/service/impl/GeregistreerdeServiceImpl.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/service/impl/GeregistreerdeServiceImpl.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/service/impl/GeregistreerdeServiceImpl.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/service/impl/GeregistreerdeServiceImpl.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,72 @@\n+package com.mycompany.myapp.service.impl;\n+\n+import com.mycompany.myapp.service.GeregistreerdeService;\n+import com.mycompany.myapp.domain.Geregistreerde;\n+import com.mycompany.myapp.repository.GeregistreerdeRepository;\n+import com.mycompany.myapp.repository.search.GeregistreerdeSearchRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Optional;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+\n+/**\n+ * Service Implementation for managing {@link Geregistreerde}.\n+ */\n+@Service\n+@Transactional\n+public class GeregistreerdeServiceImpl implements GeregistreerdeService {\n+\n+    private final Logger log = LoggerFactory.getLogger(GeregistreerdeServiceImpl.class);\n+\n+    private final GeregistreerdeRepository geregistreerdeRepository;\n+\n+    private final GeregistreerdeSearchRepository geregistreerdeSearchRepository;\n+\n+    public GeregistreerdeServiceImpl(GeregistreerdeRepository geregistreerdeRepository, GeregistreerdeSearchRepository geregistreerdeSearchRepository) {\n+        this.geregistreerdeRepository = geregistreerdeRepository;\n+        this.geregistreerdeSearchRepository = geregistreerdeSearchRepository;\n+    }\n+\n+    @Override\n+    public Geregistreerde save(Geregistreerde geregistreerde) {\n+        log.debug(\"Request to save Geregistreerde : {}\", geregistreerde);\n+        Geregistreerde result = geregistreerdeRepository.save(geregistreerde);\n+        geregistreerdeSearchRepository.save(result);\n+        return result;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Page<Geregistreerde> findAll(Pageable pageable) {\n+        log.debug(\"Request to get all Geregistreerdes\");\n+        return geregistreerdeRepository.findAll(pageable);\n+    }\n+\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<Geregistreerde> findOne(Long id) {\n+        log.debug(\"Request to get Geregistreerde : {}\", id);\n+        return geregistreerdeRepository.findById(id);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        log.debug(\"Request to delete Geregistreerde : {}\", id);\n+        geregistreerdeRepository.deleteById(id);\n+        geregistreerdeSearchRepository.deleteById(id);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Page<Geregistreerde> search(String query, Pageable pageable) {\n+        log.debug(\"Request to search for a page of Geregistreerdes for query {}\", query);\n+        return geregistreerdeSearchRepository.search(queryStringQuery(query), pageable);    }\n+}"
  },
  {
    "sha": "79329df9dc9c7255608974d6646a5afe2096a4e0",
    "filename": "src/main/java/com/mycompany/myapp/web/rest/ClassificatieResource.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/ClassificatieResource.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/ClassificatieResource.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/web/rest/ClassificatieResource.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,145 @@\n+package com.mycompany.myapp.web.rest;\n+\n+import com.mycompany.myapp.domain.Classificatie;\n+import com.mycompany.myapp.repository.ClassificatieRepository;\n+import com.mycompany.myapp.repository.search.ClassificatieSearchRepository;\n+import com.mycompany.myapp.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+\n+/**\n+ * REST controller for managing {@link com.mycompany.myapp.domain.Classificatie}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ClassificatieResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ClassificatieResource.class);\n+\n+    private static final String ENTITY_NAME = \"classificatie\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final ClassificatieRepository classificatieRepository;\n+\n+    private final ClassificatieSearchRepository classificatieSearchRepository;\n+\n+    public ClassificatieResource(ClassificatieRepository classificatieRepository, ClassificatieSearchRepository classificatieSearchRepository) {\n+        this.classificatieRepository = classificatieRepository;\n+        this.classificatieSearchRepository = classificatieSearchRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /classificaties} : Create a new classificatie.\n+     *\n+     * @param classificatie the classificatie to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new classificatie, or with status {@code 400 (Bad Request)} if the classificatie has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/classificaties\")\n+    public ResponseEntity<Classificatie> createClassificatie(@Valid @RequestBody Classificatie classificatie) throws URISyntaxException {\n+        log.debug(\"REST request to save Classificatie : {}\", classificatie);\n+        if (classificatie.getId() != null) {\n+            throw new BadRequestAlertException(\"A new classificatie cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Classificatie result = classificatieRepository.save(classificatie);\n+        classificatieSearchRepository.save(result);\n+        return ResponseEntity.created(new URI(\"/api/classificaties/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /classificaties} : Updates an existing classificatie.\n+     *\n+     * @param classificatie the classificatie to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated classificatie,\n+     * or with status {@code 400 (Bad Request)} if the classificatie is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the classificatie couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/classificaties\")\n+    public ResponseEntity<Classificatie> updateClassificatie(@Valid @RequestBody Classificatie classificatie) throws URISyntaxException {\n+        log.debug(\"REST request to update Classificatie : {}\", classificatie);\n+        if (classificatie.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Classificatie result = classificatieRepository.save(classificatie);\n+        classificatieSearchRepository.save(result);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, classificatie.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /classificaties} : get all the classificaties.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of classificaties in body.\n+     */\n+    @GetMapping(\"/classificaties\")\n+    public List<Classificatie> getAllClassificaties() {\n+        log.debug(\"REST request to get all Classificaties\");\n+        return classificatieRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /classificaties/:id} : get the \"id\" classificatie.\n+     *\n+     * @param id the id of the classificatie to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the classificatie, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/classificaties/{id}\")\n+    public ResponseEntity<Classificatie> getClassificatie(@PathVariable Long id) {\n+        log.debug(\"REST request to get Classificatie : {}\", id);\n+        Optional<Classificatie> classificatie = classificatieRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(classificatie);\n+    }\n+\n+    /**\n+     * {@code DELETE  /classificaties/:id} : delete the \"id\" classificatie.\n+     *\n+     * @param id the id of the classificatie to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/classificaties/{id}\")\n+    public ResponseEntity<Void> deleteClassificatie(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Classificatie : {}\", id);\n+        classificatieRepository.deleteById(id);\n+        classificatieSearchRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+\n+    /**\n+     * {@code SEARCH  /_search/classificaties?query=:query} : search for the classificatie corresponding\n+     * to the query.\n+     *\n+     * @param query the query of the classificatie search.\n+     * @return the result of the search.\n+     */\n+    @GetMapping(\"/_search/classificaties\")\n+    public List<Classificatie> searchClassificaties(@RequestParam String query) {\n+        log.debug(\"REST request to search Classificaties for query {}\", query);\n+        return StreamSupport\n+            .stream(classificatieSearchRepository.search(queryStringQuery(query)).spliterator(), false)\n+        .collect(Collectors.toList());\n+    }\n+}"
  },
  {
    "sha": "a653907cd2d576a50a171c75aa8462a3bf684d8c",
    "filename": "src/main/java/com/mycompany/myapp/web/rest/CrestResource.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/CrestResource.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/CrestResource.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/web/rest/CrestResource.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,145 @@\n+package com.mycompany.myapp.web.rest;\n+\n+import com.mycompany.myapp.domain.Crest;\n+import com.mycompany.myapp.repository.CrestRepository;\n+import com.mycompany.myapp.repository.search.CrestSearchRepository;\n+import com.mycompany.myapp.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+\n+/**\n+ * REST controller for managing {@link com.mycompany.myapp.domain.Crest}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class CrestResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(CrestResource.class);\n+\n+    private static final String ENTITY_NAME = \"crest\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final CrestRepository crestRepository;\n+\n+    private final CrestSearchRepository crestSearchRepository;\n+\n+    public CrestResource(CrestRepository crestRepository, CrestSearchRepository crestSearchRepository) {\n+        this.crestRepository = crestRepository;\n+        this.crestSearchRepository = crestSearchRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /crests} : Create a new crest.\n+     *\n+     * @param crest the crest to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new crest, or with status {@code 400 (Bad Request)} if the crest has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/crests\")\n+    public ResponseEntity<Crest> createCrest(@Valid @RequestBody Crest crest) throws URISyntaxException {\n+        log.debug(\"REST request to save Crest : {}\", crest);\n+        if (crest.getId() != null) {\n+            throw new BadRequestAlertException(\"A new crest cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Crest result = crestRepository.save(crest);\n+        crestSearchRepository.save(result);\n+        return ResponseEntity.created(new URI(\"/api/crests/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /crests} : Updates an existing crest.\n+     *\n+     * @param crest the crest to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated crest,\n+     * or with status {@code 400 (Bad Request)} if the crest is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the crest couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/crests\")\n+    public ResponseEntity<Crest> updateCrest(@Valid @RequestBody Crest crest) throws URISyntaxException {\n+        log.debug(\"REST request to update Crest : {}\", crest);\n+        if (crest.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Crest result = crestRepository.save(crest);\n+        crestSearchRepository.save(result);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, crest.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /crests} : get all the crests.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of crests in body.\n+     */\n+    @GetMapping(\"/crests\")\n+    public List<Crest> getAllCrests() {\n+        log.debug(\"REST request to get all Crests\");\n+        return crestRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /crests/:id} : get the \"id\" crest.\n+     *\n+     * @param id the id of the crest to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the crest, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/crests/{id}\")\n+    public ResponseEntity<Crest> getCrest(@PathVariable Long id) {\n+        log.debug(\"REST request to get Crest : {}\", id);\n+        Optional<Crest> crest = crestRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(crest);\n+    }\n+\n+    /**\n+     * {@code DELETE  /crests/:id} : delete the \"id\" crest.\n+     *\n+     * @param id the id of the crest to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/crests/{id}\")\n+    public ResponseEntity<Void> deleteCrest(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Crest : {}\", id);\n+        crestRepository.deleteById(id);\n+        crestSearchRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+\n+    /**\n+     * {@code SEARCH  /_search/crests?query=:query} : search for the crest corresponding\n+     * to the query.\n+     *\n+     * @param query the query of the crest search.\n+     * @return the result of the search.\n+     */\n+    @GetMapping(\"/_search/crests\")\n+    public List<Crest> searchCrests(@RequestParam String query) {\n+        log.debug(\"REST request to search Crests for query {}\", query);\n+        return StreamSupport\n+            .stream(crestSearchRepository.search(queryStringQuery(query)).spliterator(), false)\n+        .collect(Collectors.toList());\n+    }\n+}"
  },
  {
    "sha": "c6714dd288ebf6b3b1adb6db17c56e557db5dff8",
    "filename": "src/main/java/com/mycompany/myapp/web/rest/GeregistreerdeResource.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/GeregistreerdeResource.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/GeregistreerdeResource.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/web/rest/GeregistreerdeResource.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,145 @@\n+package com.mycompany.myapp.web.rest;\n+\n+import com.mycompany.myapp.domain.Geregistreerde;\n+import com.mycompany.myapp.service.GeregistreerdeService;\n+import com.mycompany.myapp.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.PaginationUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+\n+/**\n+ * REST controller for managing {@link com.mycompany.myapp.domain.Geregistreerde}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class GeregistreerdeResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(GeregistreerdeResource.class);\n+\n+    private static final String ENTITY_NAME = \"geregistreerde\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final GeregistreerdeService geregistreerdeService;\n+\n+    public GeregistreerdeResource(GeregistreerdeService geregistreerdeService) {\n+        this.geregistreerdeService = geregistreerdeService;\n+    }\n+\n+    /**\n+     * {@code POST  /geregistreerdes} : Create a new geregistreerde.\n+     *\n+     * @param geregistreerde the geregistreerde to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new geregistreerde, or with status {@code 400 (Bad Request)} if the geregistreerde has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/geregistreerdes\")\n+    public ResponseEntity<Geregistreerde> createGeregistreerde(@Valid @RequestBody Geregistreerde geregistreerde) throws URISyntaxException {\n+        log.debug(\"REST request to save Geregistreerde : {}\", geregistreerde);\n+        if (geregistreerde.getId() != null) {\n+            throw new BadRequestAlertException(\"A new geregistreerde cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Geregistreerde result = geregistreerdeService.save(geregistreerde);\n+        return ResponseEntity.created(new URI(\"/api/geregistreerdes/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /geregistreerdes} : Updates an existing geregistreerde.\n+     *\n+     * @param geregistreerde the geregistreerde to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated geregistreerde,\n+     * or with status {@code 400 (Bad Request)} if the geregistreerde is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the geregistreerde couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/geregistreerdes\")\n+    public ResponseEntity<Geregistreerde> updateGeregistreerde(@Valid @RequestBody Geregistreerde geregistreerde) throws URISyntaxException {\n+        log.debug(\"REST request to update Geregistreerde : {}\", geregistreerde);\n+        if (geregistreerde.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Geregistreerde result = geregistreerdeService.save(geregistreerde);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, geregistreerde.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /geregistreerdes} : get all the geregistreerdes.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of geregistreerdes in body.\n+     */\n+    @GetMapping(\"/geregistreerdes\")\n+    public ResponseEntity<List<Geregistreerde>> getAllGeregistreerdes(Pageable pageable) {\n+        log.debug(\"REST request to get a page of Geregistreerdes\");\n+        Page<Geregistreerde> page = geregistreerdeService.findAll(pageable);\n+        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);\n+        return ResponseEntity.ok().headers(headers).body(page.getContent());\n+    }\n+\n+    /**\n+     * {@code GET  /geregistreerdes/:id} : get the \"id\" geregistreerde.\n+     *\n+     * @param id the id of the geregistreerde to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the geregistreerde, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/geregistreerdes/{id}\")\n+    public ResponseEntity<Geregistreerde> getGeregistreerde(@PathVariable Long id) {\n+        log.debug(\"REST request to get Geregistreerde : {}\", id);\n+        Optional<Geregistreerde> geregistreerde = geregistreerdeService.findOne(id);\n+        return ResponseUtil.wrapOrNotFound(geregistreerde);\n+    }\n+\n+    /**\n+     * {@code DELETE  /geregistreerdes/:id} : delete the \"id\" geregistreerde.\n+     *\n+     * @param id the id of the geregistreerde to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/geregistreerdes/{id}\")\n+    public ResponseEntity<Void> deleteGeregistreerde(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Geregistreerde : {}\", id);\n+        geregistreerdeService.delete(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+\n+    /**\n+     * {@code SEARCH  /_search/geregistreerdes?query=:query} : search for the geregistreerde corresponding\n+     * to the query.\n+     *\n+     * @param query the query of the geregistreerde search.\n+     * @param pageable the pagination information.\n+     * @return the result of the search.\n+     */\n+    @GetMapping(\"/_search/geregistreerdes\")\n+    public ResponseEntity<List<Geregistreerde>> searchGeregistreerdes(@RequestParam String query, Pageable pageable) {\n+        log.debug(\"REST request to search for a page of Geregistreerdes for query {}\", query);\n+        Page<Geregistreerde> page = geregistreerdeService.search(query, pageable);\n+        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);\n+        return ResponseEntity.ok().headers(headers).body(page.getContent());\n+        }\n+}"
  },
  {
    "sha": "2b9016ac8f17f8e56889268471214e4a81e97f4c",
    "filename": "src/main/java/com/mycompany/myapp/web/rest/MedewerkerResource.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/MedewerkerResource.java",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/java/com/mycompany/myapp/web/rest/MedewerkerResource.java",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/java/com/mycompany/myapp/web/rest/MedewerkerResource.java?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,145 @@\n+package com.mycompany.myapp.web.rest;\n+\n+import com.mycompany.myapp.domain.Medewerker;\n+import com.mycompany.myapp.repository.MedewerkerRepository;\n+import com.mycompany.myapp.repository.search.MedewerkerSearchRepository;\n+import com.mycompany.myapp.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+\n+/**\n+ * REST controller for managing {@link com.mycompany.myapp.domain.Medewerker}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class MedewerkerResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(MedewerkerResource.class);\n+\n+    private static final String ENTITY_NAME = \"medewerker\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final MedewerkerRepository medewerkerRepository;\n+\n+    private final MedewerkerSearchRepository medewerkerSearchRepository;\n+\n+    public MedewerkerResource(MedewerkerRepository medewerkerRepository, MedewerkerSearchRepository medewerkerSearchRepository) {\n+        this.medewerkerRepository = medewerkerRepository;\n+        this.medewerkerSearchRepository = medewerkerSearchRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /medewerkers} : Create a new medewerker.\n+     *\n+     * @param medewerker the medewerker to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new medewerker, or with status {@code 400 (Bad Request)} if the medewerker has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/medewerkers\")\n+    public ResponseEntity<Medewerker> createMedewerker(@Valid @RequestBody Medewerker medewerker) throws URISyntaxException {\n+        log.debug(\"REST request to save Medewerker : {}\", medewerker);\n+        if (medewerker.getId() != null) {\n+            throw new BadRequestAlertException(\"A new medewerker cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Medewerker result = medewerkerRepository.save(medewerker);\n+        medewerkerSearchRepository.save(result);\n+        return ResponseEntity.created(new URI(\"/api/medewerkers/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /medewerkers} : Updates an existing medewerker.\n+     *\n+     * @param medewerker the medewerker to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated medewerker,\n+     * or with status {@code 400 (Bad Request)} if the medewerker is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the medewerker couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/medewerkers\")\n+    public ResponseEntity<Medewerker> updateMedewerker(@Valid @RequestBody Medewerker medewerker) throws URISyntaxException {\n+        log.debug(\"REST request to update Medewerker : {}\", medewerker);\n+        if (medewerker.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Medewerker result = medewerkerRepository.save(medewerker);\n+        medewerkerSearchRepository.save(result);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, medewerker.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /medewerkers} : get all the medewerkers.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of medewerkers in body.\n+     */\n+    @GetMapping(\"/medewerkers\")\n+    public List<Medewerker> getAllMedewerkers() {\n+        log.debug(\"REST request to get all Medewerkers\");\n+        return medewerkerRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /medewerkers/:id} : get the \"id\" medewerker.\n+     *\n+     * @param id the id of the medewerker to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the medewerker, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/medewerkers/{id}\")\n+    public ResponseEntity<Medewerker> getMedewerker(@PathVariable Long id) {\n+        log.debug(\"REST request to get Medewerker : {}\", id);\n+        Optional<Medewerker> medewerker = medewerkerRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(medewerker);\n+    }\n+\n+    /**\n+     * {@code DELETE  /medewerkers/:id} : delete the \"id\" medewerker.\n+     *\n+     * @param id the id of the medewerker to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/medewerkers/{id}\")\n+    public ResponseEntity<Void> deleteMedewerker(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Medewerker : {}\", id);\n+        medewerkerRepository.deleteById(id);\n+        medewerkerSearchRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+\n+    /**\n+     * {@code SEARCH  /_search/medewerkers?query=:query} : search for the medewerker corresponding\n+     * to the query.\n+     *\n+     * @param query the query of the medewerker search.\n+     * @return the result of the search.\n+     */\n+    @GetMapping(\"/_search/medewerkers\")\n+    public List<Medewerker> searchMedewerkers(@RequestParam String query) {\n+        log.debug(\"REST request to search Medewerkers for query {}\", query);\n+        return StreamSupport\n+            .stream(medewerkerSearchRepository.search(queryStringQuery(query)).spliterator(), false)\n+        .collect(Collectors.toList());\n+    }\n+}"
  },
  {
    "sha": "b606c081d2d220545c80a267420640124345467f",
    "filename": "src/main/resources/config/liquibase/changelog/20210315162546_added_entity_Geregistreerde.xml",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162546_added_entity_Geregistreerde.xml",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162546_added_entity_Geregistreerde.xml",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/changelog/20210315162546_added_entity_Geregistreerde.xml?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,104 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Geregistreerde.\n+    -->\n+    <changeSet id=\"20210315162546-1\" author=\"jhipster\">\n+        <createTable tableName=\"geregistreerde\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"voornamen\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"achternaam\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"geboortedatum\" type=\"datetime\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"geboorteplaats\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"register_nummer\" type=\"bigint\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"classificatie\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"personeelnummer\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"mailadres\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"telefoon_nummer\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"mobiele_nummer\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"verantwoordelijke_crest\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"naam\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"verantwoordelijke_crest_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"naam_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"classificatie_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+        <dropDefaultValue tableName=\"geregistreerde\" columnName=\"geboortedatum\" columnDataType=\"datetime\"/>\n+    </changeSet>\n+\n+    <changeSet id=\"20210315162546-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210315162546-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/geregistreerde.csv\"\n+                  separator=\";\"\n+                  tableName=\"geregistreerde\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"voornamen\" type=\"string\"/>\n+            <column name=\"achternaam\" type=\"string\"/>\n+            <column name=\"geboortedatum\" type=\"datetime\"/>\n+            <column name=\"geboorteplaats\" type=\"string\"/>\n+            <column name=\"register_nummer\" type=\"numeric\"/>\n+            <column name=\"classificatie\" type=\"string\"/>\n+            <column name=\"personeelnummer\" type=\"string\"/>\n+            <column name=\"mailadres\" type=\"string\"/>\n+            <column name=\"telefoon_nummer\" type=\"string\"/>\n+            <column name=\"mobiele_nummer\" type=\"string\"/>\n+            <column name=\"verantwoordelijke_crest\" type=\"string\"/>\n+            <column name=\"naam\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "e7a5b540a577d6430ba448423210f9d006090025",
    "filename": "src/main/resources/config/liquibase/changelog/20210315162546_added_entity_constraints_Geregistreerde.xml",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162546_added_entity_constraints_Geregistreerde.xml",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162546_added_entity_constraints_Geregistreerde.xml",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/changelog/20210315162546_added_entity_constraints_Geregistreerde.xml?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <!--\n+        Added the constraints for entity Geregistreerde.\n+    -->\n+    <changeSet id=\"20210315162546-2\" author=\"jhipster\">\n+        \n+        <addForeignKeyConstraint baseColumnNames=\"verantwoordelijke_crest_id\"\n+                                 baseTableName=\"geregistreerde\"\n+                                 constraintName=\"fk_geregistreerde_verantwoordelijke_crest_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"crest\"/>\n+\n+        <addForeignKeyConstraint baseColumnNames=\"naam_id\"\n+                                 baseTableName=\"geregistreerde\"\n+                                 constraintName=\"fk_geregistreerde_naam_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"medewerker\"/>\n+\n+        <addForeignKeyConstraint baseColumnNames=\"classificatie_id\"\n+                                 baseTableName=\"geregistreerde\"\n+                                 constraintName=\"fk_geregistreerde_classificatie_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"classificatie\"/>\n+\n+    </changeSet>\n+</databaseChangeLog>"
  },
  {
    "sha": "1e71d374d1568edc88014b9bd13f2ce552689d08",
    "filename": "src/main/resources/config/liquibase/changelog/20210315162646_added_entity_Classificatie.xml",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162646_added_entity_Classificatie.xml",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162646_added_entity_Classificatie.xml",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/changelog/20210315162646_added_entity_Classificatie.xml?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Classificatie.\n+    -->\n+    <changeSet id=\"20210315162646-1\" author=\"jhipster\">\n+        <createTable tableName=\"classificatie\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"classificatie\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"kleur\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"omschrijving\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210315162646-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210315162646-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/classificatie.csv\"\n+                  separator=\";\"\n+                  tableName=\"classificatie\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"classificatie\" type=\"string\"/>\n+            <column name=\"kleur\" type=\"string\"/>\n+            <column name=\"omschrijving\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "a79d71b0352e2c553db881279134939499cdc720",
    "filename": "src/main/resources/config/liquibase/changelog/20210315162746_added_entity_Crest.xml",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162746_added_entity_Crest.xml",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162746_added_entity_Crest.xml",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/changelog/20210315162746_added_entity_Crest.xml?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Crest.\n+    -->\n+    <changeSet id=\"20210315162746-1\" author=\"jhipster\">\n+        <createTable tableName=\"crest\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"verantwoordelijke_crest\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"naam_entiteit\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210315162746-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210315162746-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/crest.csv\"\n+                  separator=\";\"\n+                  tableName=\"crest\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"verantwoordelijke_crest\" type=\"string\"/>\n+            <column name=\"naam_entiteit\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "333056aedf7083bd45f38c12b6a7aac07db5b44d",
    "filename": "src/main/resources/config/liquibase/changelog/20210315162846_added_entity_Medewerker.xml",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162846_added_entity_Medewerker.xml",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/changelog/20210315162846_added_entity_Medewerker.xml",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/changelog/20210315162846_added_entity_Medewerker.xml?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Medewerker.\n+    -->\n+    <changeSet id=\"20210315162846-1\" author=\"jhipster\">\n+        <createTable tableName=\"medewerker\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"naam\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"functie\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210315162846-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210315162846-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/medewerker.csv\"\n+                  separator=\";\"\n+                  tableName=\"medewerker\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"naam\" type=\"string\"/>\n+            <column name=\"functie\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "08a68ca035acd9d4cee35dc6c32bdba17ab29782",
    "filename": "src/main/resources/config/liquibase/fake-data/classificatie.csv",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/fake-data/classificatie.csv",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/fake-data/classificatie.csv",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/fake-data/classificatie.csv?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+id;classificatie;kleur;omschrijving\n+1;Hat morph recontextualize;generating;transmit SMS\n+2;maroon;bypassing Cambridgeshire;Program\n+3;SDD;Cove Malagasy Ariary;web-readiness\n+4;Avon;Accountability indexing Music;protocol mobile expedite\n+5;forecast;Health synthesizing;connecting process improvement dynamic\n+6;Berkshire;IB bus Practical;mobile reboot\n+7;RAM needs-based;Health system Technician;Tenge\n+8;Human;Movies;Computer\n+9;Soap Analyst zero administration;Arizona Dynamic;enable\n+10;black Keyboard;Organized International;zero administration Intelligent Cotton Towels Metal"
  },
  {
    "sha": "25c57aee120a6c83b6e7656177015e12ace3559f",
    "filename": "src/main/resources/config/liquibase/fake-data/crest.csv",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/fake-data/crest.csv",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/fake-data/crest.csv",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/fake-data/crest.csv?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+id;verantwoordelijke_crest;naam_entiteit\n+1;AGP Mouse Customer;reboot functionalities\n+2;wireless Metal Handcrafted;Pennsylvania Small\n+3;Central repurpose Vista;Auto Loan Account extend\n+4;Convertible Marks open-source;Lead withdrawal copying\n+5;customized;Senior Money Market Account Marketing\n+6;invoice;auxiliary Lead\n+7;Guyana Dollar Planner;exuding\n+8;Cotton applications;architectures Movies\n+9;synthesize Licensed Metal Chicken;Avon zero administration support\n+10;Michigan;generating maximize"
  },
  {
    "sha": "572cf56fdb7f4c1f906dc986c9f01fd455543faf",
    "filename": "src/main/resources/config/liquibase/fake-data/geregistreerde.csv",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LucBartkowski/jhipster-WLS/blob/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/fake-data/geregistreerde.csv",
    "raw_url": "https://github.com/LucBartkowski/jhipster-WLS/raw/3b81de0ba839ec3305d5493f32d5a4a15574fb3a/src/main/resources/config/liquibase/fake-data/geregistreerde.csv",
    "contents_url": "https://api.github.com/repos/LucBartkowski/jhipster-WLS/contents/src/main/resources/config/liquibase/fake-data/geregistreerde.csv?ref=3b81de0ba839ec3305d5493f32d5a4a15574fb3a",
    "patch": "@@ -0,0 +1,11 @@\n+id;voornamen;achternaam;geboortedatum;geboorteplaats;register_nummer;classificatie;personeelnummer;mailadres;telefoon_nummer;mobiele_nummer;verantwoordelijke_crest;naam\n+1;engage copying Soft;utilize;2021-03-15T02:17:57;scale Shore;37145;24/7 efficient;hack;matrix;input Executive;Ball Groves Designer;hack multimedia;back-end deposit\n+2;Assistant Arizona mobile;Principal;2021-03-15T01:29:19;Legacy;20488;Credit Card Account programming Stand-alone;salmon;North Carolina;Intelligent;Mozambique mission-critical Passage;withdrawal Coordinator Washington;North Carolina Auto Loan Account\n+3;bandwidth;Kyat sexy asynchronous;2021-03-15T15:47:32;users Up-sized primary;98036;Florida Horizontal optical;THX Security groupware;Ohio Poland deposit;Berkshire models Data;Center Orchestrator;bluetooth Designer Kuwaiti Dinar;Clothing Wooden Inlet\n+4;silver Turkish Lira;Palestinian Territory Gibraltar;2021-03-15T04:34:59;neural Saint Pierre and Miquelon;34631;Ball El Salvador web-readiness;Balboa US Dollar;CFA Franc BCEAO;matrices Botswana instruction set;overriding Cotton invoice;navigating Savings Account compressing;deposit\n+5;distributed AI Metrics;Frozen;2021-03-15T03:48:08;users Internal Lithuanian Litas;48168;Plastic;PNG;logistical;Assimilated;Rustic;parsing auxiliary synthesize;Refined Rubber Shoes purple\n+6;Rubber;sky blue;2021-03-15T04:05:09;back up;22452;Berkshire frame;niches;Savings Account Kids;bricks-and-clicks;Realigned;Cape;quantifying Algerian Dinar New York\n+7;redundant;Car architectures;2021-03-15T10:10:15;Kazakhstan withdrawal;54170;gold auxiliary;Home Loan Account Puerto Rico Rustic;dynamic Borders Functionality;Avon;installation Intelligent Plastic Soap;Personal Loan Account Checking Account;copying\n+8;Future-proofed;Rubber grid-enabled;2021-03-15T11:05:31;District JBOD;38395;Senior monitor;middleware;COM;Savings Account reciprocal;rich Mouse;Planner human-resource Principal;Hat National emulation\n+9;Innovative action-items;deposit grey;2021-03-14T16:48:51;Tokelau;53634;Director teal Checking Account;Metal Director;Frozen Lead Administrator;Rubber;Cambridgeshire Checking Account Cayman Islands;back up Sports wireless;maximize FTP withdrawal\n+10;payment Baby Credit Card Account;Fantastic Metal Towels;2021-03-15T04:56:55;Regional Web Wooden;25946;Ergonomic Wooden Towels THX;Representative;Shoes bottom-line scalable;Trail;Montana Tasty Kids;program sexy;bi-directional impactful Tools"
  }
]
