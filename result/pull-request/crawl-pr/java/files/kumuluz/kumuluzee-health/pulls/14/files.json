[
  {
    "sha": "2637674f642b29f880b8abf2d25f673573b0a000",
    "filename": "src/main/java/com/kumuluz/ee/health/checks/DataSourceHealthCheck.java",
    "status": "modified",
    "additions": 134,
    "deletions": 43,
    "changes": 177,
    "blob_url": "https://github.com/kumuluz/kumuluzee-health/blob/e45d7dcffccacee225d236017b44929a748475b5/src/main/java/com/kumuluz/ee/health/checks/DataSourceHealthCheck.java",
    "raw_url": "https://github.com/kumuluz/kumuluzee-health/raw/e45d7dcffccacee225d236017b44929a748475b5/src/main/java/com/kumuluz/ee/health/checks/DataSourceHealthCheck.java",
    "contents_url": "https://api.github.com/repos/kumuluz/kumuluzee-health/contents/src/main/java/com/kumuluz/ee/health/checks/DataSourceHealthCheck.java?ref=e45d7dcffccacee225d236017b44929a748475b5",
    "patch": "@@ -24,11 +24,14 @@\n import com.kumuluz.ee.health.annotations.BuiltInHealthCheck;\n import org.eclipse.microprofile.health.HealthCheck;\n import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n \n import javax.enterprise.context.ApplicationScoped;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -47,25 +50,17 @@\n \n     @Override\n     public HealthCheckResponse call() {\n-        Connection connection = null;\n+        HealthCheckResponseBuilder healthCheckResponseBuilder = HealthCheckResponse\n+                .named(DataSourceHealthCheck.class.getSimpleName())\n+                .up();\n \n-        try {\n-            connection = getConnection();\n-            return HealthCheckResponse.up(DataSourceHealthCheck.class.getSimpleName());\n-        } catch (Exception exception) {\n-            LOG.log(Level.SEVERE, \"An exception occurred when trying to establish connection to data source.\",\n-                    exception);\n-            return HealthCheckResponse.down(DataSourceHealthCheck.class.getSimpleName());\n-        } finally {\n-            if (connection != null) {\n-                try {\n-                    connection.close();\n-                } catch (SQLException exception) {\n-                    LOG.log(Level.SEVERE, \"An exception occurred when trying to close connection to data source.\",\n-                            exception);\n-                }\n-            }\n+        List<DataSourceHealthCheckConfiguration> configurationList = getConfigurationList();\n+\n+        for (DataSourceHealthCheckConfiguration configuration : configurationList) {\n+            checkConnection(configuration, healthCheckResponseBuilder);\n         }\n+\n+        return healthCheckResponseBuilder.build();\n     }\n \n     @Override\n@@ -83,41 +78,137 @@ public boolean initSuccess() {\n         return true;\n     }\n \n-    /**\n-     * Helper method for retrieving connection.\n-     *\n-     * @return connection\n-     * @throws SQLException\n-     */\n-    private Connection getConnection() throws SQLException {\n+    private List<DataSourceHealthCheckConfiguration> getConfigurationList() {\n         ConfigurationUtil configurationUtil = ConfigurationUtil.getInstance();\n \n-        Optional<String> jndiName = configurationUtil.get(name() + \".jndi-name\");\n-        Optional<Integer> dsSizeOpt = configurationUtil.getListSize(\"kumuluzee.datasources\");\n+        List<DataSourceHealthCheckConfiguration> configurationList = new ArrayList<>();\n \n-        String connectionUrl = null;\n-        String username = null;\n-        String password = null;\n+        Optional<Integer> datasourcesListSizeOptional = ConfigurationUtil.getInstance().getListSize(name());\n \n-        if (jndiName.isPresent() && dsSizeOpt.isPresent()) {\n-            for (int i = 0; i < dsSizeOpt.get(); i++) {\n-                String prefix = \"kumuluzee.datasources[\" + i + \"]\";\n-                Optional<String> dsJndiName = configurationUtil.get(prefix + \".jndi-name\");\n+        boolean hasJndiNameReference = false;\n+        if (datasourcesListSizeOptional.isPresent()) {\n+            for (int i = 0; i < datasourcesListSizeOptional.get(); i++) {\n+                DataSourceHealthCheckConfiguration configuration = new DataSourceHealthCheckConfiguration();\n \n-                if (dsJndiName.isPresent() && dsJndiName.get().equals(jndiName.get())) {\n-                    connectionUrl = configurationUtil.get(prefix + \".connection-url\").orElse(null);\n-                    username = configurationUtil.get(prefix + \".username\").orElse(null);\n-                    password = configurationUtil.get(prefix + \".password\").orElse(null);\n-                    break;\n+                Optional<String> jndiNameOptional = configurationUtil.get(name() + \"[\" + i + \"].jndi-name\");\n+                if (jndiNameOptional.isPresent()) {\n+                    configuration.setJndiName(jndiNameOptional.get());\n+\n+                    hasJndiNameReference = true;\n+                } else {\n+                    configurationUtil.get(name() + \"[\" + i + \"].connection-url\").ifPresent(configuration::setConnectionUrl);\n+                    configurationUtil.get(name() + \"[\" + i + \"].username\").ifPresent(configuration::setUsername);\n+                    configurationUtil.get(name() + \"[\" + i + \"].password\").ifPresent(configuration::setPassword);\n                 }\n+\n+                configurationList.add(configuration);\n             }\n         } else {\n-            connectionUrl = configurationUtil.get(name() + \".connection-url\").orElse(null);\n-            username = configurationUtil.get(name() + \".username\").orElse(null);\n-            password = configurationUtil.get(name() + \".password\").orElse(null);\n+            DataSourceHealthCheckConfiguration configuration = new DataSourceHealthCheckConfiguration();\n+\n+            Optional<String> jndiNameOptional = configurationUtil.get(name() + \".jndi-name\");\n+            if (jndiNameOptional.isPresent()) {\n+                configuration.setJndiName(jndiNameOptional.get());\n+\n+                hasJndiNameReference = true;\n+            } else {\n+                configurationUtil.get(name() + \".connection-url\").ifPresent(configuration::setConnectionUrl);\n+                configurationUtil.get(name() + \".username\").ifPresent(configuration::setUsername);\n+                configurationUtil.get(name() + \".password\").ifPresent(configuration::setPassword);\n+            }\n+\n+            configurationList.add(configuration);\n+        }\n+\n+        Optional<Integer> dsSizeOpt = configurationUtil.getListSize(\"kumuluzee.datasources\");\n+        if (hasJndiNameReference && dsSizeOpt.isPresent()) {\n+            for (DataSourceHealthCheckConfiguration configuration : configurationList) {\n+                if (configuration.getJndiName() == null) {\n+                    continue;\n+                }\n+\n+                for (int i = 0; i < dsSizeOpt.get(); i++) {\n+                    String prefix = \"kumuluzee.datasources[\" + i + \"]\";\n+                    Optional<String> dsJndiName = configurationUtil.get(prefix + \".jndi-name\");\n+\n+                    if (dsJndiName.isPresent() && dsJndiName.get().equals(configuration.getJndiName())) {\n+                        configurationUtil.get(prefix + \".connection-url\").ifPresent(configuration::setConnectionUrl);\n+                        configurationUtil.get(prefix + \".username\").ifPresent(configuration::setUsername);\n+                        configurationUtil.get(prefix + \".password\").ifPresent(configuration::setPassword);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return configurationList;\n+    }\n+\n+    /**\n+     * Helper method for checking connection.\n+     */\n+    private void checkConnection(DataSourceHealthCheckConfiguration configuration, HealthCheckResponseBuilder healthCheckResponseBuilder) {\n+        Connection connection = null;\n+\n+        try {\n+            if (configuration.getUsername() == null && configuration.getPassword() == null) {\n+                connection = DriverManager.getConnection(configuration.getConnectionUrl());\n+            } else {\n+                connection = DriverManager.getConnection(configuration.getConnectionUrl(), configuration.getUsername(), configuration.getPassword());\n+            }\n+\n+            healthCheckResponseBuilder.withData(configuration.getConnectionUrl(), HealthCheckResponse.State.UP.toString());\n+        } catch (Exception exception) {\n+            LOG.log(Level.SEVERE, String.format(\"An exception occurred when trying to establish connection to data source (%s).\", configuration.getConnectionUrl()), exception);\n+            healthCheckResponseBuilder.withData(configuration.getConnectionUrl(), HealthCheckResponse.State.DOWN.toString());\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    connection.close();\n+                } catch (SQLException exception) {\n+                    LOG.log(Level.SEVERE, String.format(\"An exception occurred when trying to close connection to data source (%s).\", configuration.getConnectionUrl()), exception);\n+                }\n+            }\n         }\n+    }\n+}\n+\n+class DataSourceHealthCheckConfiguration {\n+\n+    private String jndiName;\n+    private String connectionUrl;\n+    private String username;\n+    private String password;\n+\n+    public String getJndiName() {\n+        return jndiName;\n+    }\n+\n+    public void setJndiName(String jndiName) {\n+        this.jndiName = jndiName;\n+    }\n+\n+    public String getConnectionUrl() {\n+        return connectionUrl;\n+    }\n+\n+    public void setConnectionUrl(String connectionUrl) {\n+        this.connectionUrl = connectionUrl;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n \n-        return username != null && password != null ? DriverManager.getConnection(connectionUrl, username, password) :\n-                DriverManager.getConnection(connectionUrl);\n+    public void setPassword(String password) {\n+        this.password = password;\n     }\n }"
  },
  {
    "sha": "23cffa0fd5a14a8f864be504911880aefe381115",
    "filename": "src/test/java/com/kumuluz/ee/health/tests/DatasourceMultipleHealthCheckTest.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/kumuluz/kumuluzee-health/blob/e45d7dcffccacee225d236017b44929a748475b5/src/test/java/com/kumuluz/ee/health/tests/DatasourceMultipleHealthCheckTest.java",
    "raw_url": "https://github.com/kumuluz/kumuluzee-health/raw/e45d7dcffccacee225d236017b44929a748475b5/src/test/java/com/kumuluz/ee/health/tests/DatasourceMultipleHealthCheckTest.java",
    "contents_url": "https://api.github.com/repos/kumuluz/kumuluzee-health/contents/src/test/java/com/kumuluz/ee/health/tests/DatasourceMultipleHealthCheckTest.java?ref=e45d7dcffccacee225d236017b44929a748475b5",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2014-2020 Kumuluz and/or its affiliates\n+ *  and other contributors as indicated by the @author tags and\n+ *  the contributor list.\n+ *\n+ *  Licensed under the MIT License (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  https://opensource.org/licenses/MIT\n+ *\n+ *  The software is provided \"AS IS\", WITHOUT WARRANTY OF ANY KIND, express or\n+ *  implied, including but not limited to the warranties of merchantability,\n+ *  fitness for a particular purpose and noninfringement. in no event shall the\n+ *  authors or copyright holders be liable for any claim, damages or other\n+ *  liability, whether in an action of contract, tort or otherwise, arising from,\n+ *  out of or in connection with the software or the use or other dealings in the\n+ *  software. See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.kumuluz.ee.health.tests;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.arquillian.testng.Arquillian;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.resolver.api.maven.Maven;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import javax.json.Json;\n+import javax.json.JsonArray;\n+import javax.json.JsonObject;\n+import javax.json.JsonReader;\n+import java.io.IOException;\n+import java.net.URI;\n+\n+/**\n+ * Test Datasource readiness liveness both\n+ *\n+ * @author Gregor Porocnik\n+ * @since 2.2.0\n+ */\n+public class DatasourceMultipleHealthCheckTest extends Arquillian {\n+\n+    @ArquillianResource\n+    private URI uri;\n+\n+    @Deployment\n+    public static JavaArchive createDeployment() {\n+        JavaArchive javaArchive = ShrinkWrap.create(JavaArchive.class)\n+                .addAsResource(\"multiple-datasource-hc.yml\", \"config.yml\");\n+\n+        javaArchive.merge(Maven.resolver().resolve(\"com.h2database:h2:1.4.200\").withoutTransitivity().asSingle(JavaArchive.class));\n+\n+        return javaArchive;\n+    }\n+\n+    @Test\n+    @RunAsClient\n+    public void healthApiShouldReturnUp() throws IOException {\n+        JsonObject healthApiResponse = getHealthApiResponse(\"/health\");\n+        Assert.assertNotNull(healthApiResponse);\n+        JsonArray checks = healthApiResponse.getJsonArray(\"checks\");\n+        Assert.assertEquals(checks.size(), 1);\n+        Assert.assertEquals(\"DataSourceHealthCheck\", checks.get(0).asJsonObject().getString(\"name\"));\n+        Assert.assertEquals(\"UP\", checks.get(0).asJsonObject().getString(\"status\"));\n+        Assert.assertEquals(\"UP\", checks.get(0).asJsonObject().getJsonObject(\"data\").getString(\"jdbc:h2:~/test1\"));\n+        Assert.assertEquals(\"UP\", checks.get(0).asJsonObject().getJsonObject(\"data\").getString(\"jdbc:h2:~/test2\"));\n+    }\n+\n+    private JsonObject getHealthApiResponse(String healthPath) throws IOException {\n+        HttpClient client = HttpClientBuilder.create().build();\n+        HttpResponse response = client.execute(new HttpGet(uri + healthPath));\n+        Assert.assertEquals(response.getStatusLine().getStatusCode(), 200);\n+\n+        JsonReader jsonReader = Json.createReader(response.getEntity().getContent());\n+        return jsonReader.readObject();\n+    }\n+}"
  },
  {
    "sha": "df7ca9167f76fb7cff35dd4b1e1e31793f2f2325",
    "filename": "src/test/resources/arquillian.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/kumuluz/kumuluzee-health/blob/e45d7dcffccacee225d236017b44929a748475b5/src/test/resources/arquillian.xml",
    "raw_url": "https://github.com/kumuluz/kumuluzee-health/raw/e45d7dcffccacee225d236017b44929a748475b5/src/test/resources/arquillian.xml",
    "contents_url": "https://api.github.com/repos/kumuluz/kumuluzee-health/contents/src/test/resources/arquillian.xml?ref=e45d7dcffccacee225d236017b44929a748475b5",
    "patch": "@@ -5,7 +5,8 @@\n \n     <container qualifier=\"KumuluzEE\" default=\"true\">\n         <configuration>\n-            <!--<property name=\"kumuluzVersion\">3.0.0-SNAPSHOT</property>-->\n+<!--            <property name=\"kumuluzVersion\">3.0.0-SNAPSHOT</property>-->\n+<!--            <property name=\"javaArguments\">-Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</property>-->\n         </configuration>\n     </container>\n "
  },
  {
    "sha": "be9bd01d83c158018c0681e7c8f4b9312e950399",
    "filename": "src/test/resources/multiple-datasource-hc.yml",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/kumuluz/kumuluzee-health/blob/e45d7dcffccacee225d236017b44929a748475b5/src/test/resources/multiple-datasource-hc.yml",
    "raw_url": "https://github.com/kumuluz/kumuluzee-health/raw/e45d7dcffccacee225d236017b44929a748475b5/src/test/resources/multiple-datasource-hc.yml",
    "contents_url": "https://api.github.com/repos/kumuluz/kumuluzee-health/contents/src/test/resources/multiple-datasource-hc.yml?ref=e45d7dcffccacee225d236017b44929a748475b5",
    "patch": "@@ -0,0 +1,12 @@\n+kumuluzee:\n+  datasources:\n+    - jndi-name: jdbc/ds1\n+      connection-url: jdbc:h2:~/test1\n+    - jndi-name: jdbc/ds2\n+      connection-url: jdbc:h2:~/test2\n+\n+  health:\n+    checks:\n+      data-source-health-check:\n+        - jndi-name: jdbc/ds1\n+        - jndi-name: jdbc/ds2"
  }
]
