[
  {
    "sha": "7766dc2e0ac58fe77d177b8cb0fc731142b0a537",
    "filename": ".bazelrc",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JetBrains/bazel-bsp/blob/a0f6bb6f2651318b021e5cee4105fbdcdaa103ce/.bazelrc",
    "raw_url": "https://github.com/JetBrains/bazel-bsp/raw/a0f6bb6f2651318b021e5cee4105fbdcdaa103ce/.bazelrc",
    "contents_url": "https://api.github.com/repos/JetBrains/bazel-bsp/contents/.bazelrc?ref=a0f6bb6f2651318b021e5cee4105fbdcdaa103ce",
    "patch": "@@ -1,2 +1,2 @@\n build --java_toolchain=@bazel_tools//tools/jdk:toolchain_java8\n-build --host_java_toolchain=@bazel_tools//tools/jdk:toolchain_java8\n\\ No newline at end of file\n+build --host_java_toolchain=@bazel_tools//tools/jdk:toolchain_java8"
  },
  {
    "sha": "e11d202bf34065d1aa68611f04453c9caa680a94",
    "filename": "aspects.bzl",
    "status": "removed",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/JetBrains/bazel-bsp/blob/99aa0fb8826707abe6137fc8da83c475feca629c/aspects.bzl",
    "raw_url": "https://github.com/JetBrains/bazel-bsp/raw/99aa0fb8826707abe6137fc8da83c475feca629c/aspects.bzl",
    "contents_url": "https://api.github.com/repos/JetBrains/bazel-bsp/contents/aspects.bzl?ref=99aa0fb8826707abe6137fc8da83c475feca629c",
    "patch": "@@ -1,30 +0,0 @@\n-def _print_aspect_impl(target, ctx):\n-    if hasattr(ctx.rule.attr, \"srcjar\"):\n-        srcjar = ctx.rule.attr.srcjar\n-        if srcjar != None:\n-            for f in srcjar.files.to_list():\n-                if f != None:\n-                    print(f.path)\n-    return []\n-\n-print_aspect = aspect(\n-    implementation = _print_aspect_impl,\n-    attr_aspects = [\"deps\"],\n-)\n-\n-def _scala_compiler_classpath_impl(target, ctx):\n-    files = depset()\n-    if hasattr(ctx.rule.attr, \"jars\"):\n-        for target in ctx.rule.attr.jars:\n-            files = depset(transitive = [files, target.files])\n-\n-    compiler_classpath_file = ctx.actions.declare_file(\"%s.textproto\" % target.label.name)\n-    ctx.actions.write(compiler_classpath_file, struct(files = [file.path for file in files.to_list()]).to_proto())\n-\n-    return [\n-        OutputGroupInfo(scala_compiler_classpath_files = [compiler_classpath_file]),\n-    ]\n-\n-scala_compiler_classpath_aspect = aspect(\n-    implementation = _scala_compiler_classpath_impl,\n-)"
  },
  {
    "sha": "b97a047fdaf900ca83c89f98d076a08b71b4db53",
    "filename": "src/main/java/org/jetbrains/bsp/bazel/install/aspects.bzl",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/JetBrains/bazel-bsp/blob/a0f6bb6f2651318b021e5cee4105fbdcdaa103ce/src/main/java/org/jetbrains/bsp/bazel/install/aspects.bzl",
    "raw_url": "https://github.com/JetBrains/bazel-bsp/raw/a0f6bb6f2651318b021e5cee4105fbdcdaa103ce/src/main/java/org/jetbrains/bsp/bazel/install/aspects.bzl",
    "contents_url": "https://api.github.com/repos/JetBrains/bazel-bsp/contents/src/main/java/org/jetbrains/bsp/bazel/install/aspects.bzl?ref=a0f6bb6f2651318b021e5cee4105fbdcdaa103ce",
    "patch": "@@ -28,3 +28,13 @@ def _scala_compiler_classpath_impl(target, ctx):\n scala_compiler_classpath_aspect = aspect(\n     implementation = _scala_compiler_classpath_impl,\n )\n+\n+def _fetch_java_target_version(target, ctx):\n+    if hasattr(ctx.rule.attr, \"target_version\"):\n+        print(ctx.rule.attr.target_version)\n+    return []\n+\n+fetch_java_target_version = aspect(\n+    implementation = _fetch_java_target_version,\n+    attr_aspects = [\"_java_toolchain\"],\n+)"
  },
  {
    "sha": "65087148285f4ace6fb91ddf09a1f6634ac9d91b",
    "filename": "src/main/java/org/jetbrains/bsp/bazel/server/bsp/BazelBspServerBuildManager.java",
    "status": "modified",
    "additions": 92,
    "deletions": 18,
    "changes": 110,
    "blob_url": "https://github.com/JetBrains/bazel-bsp/blob/a0f6bb6f2651318b021e5cee4105fbdcdaa103ce/src/main/java/org/jetbrains/bsp/bazel/server/bsp/BazelBspServerBuildManager.java",
    "raw_url": "https://github.com/JetBrains/bazel-bsp/raw/a0f6bb6f2651318b021e5cee4105fbdcdaa103ce/src/main/java/org/jetbrains/bsp/bazel/server/bsp/BazelBspServerBuildManager.java",
    "contents_url": "https://api.github.com/repos/JetBrains/bazel-bsp/contents/src/main/java/org/jetbrains/bsp/bazel/server/bsp/BazelBspServerBuildManager.java?ref=a0f6bb6f2651318b021e5cee4105fbdcdaa103ce",
    "patch": "@@ -42,13 +42,20 @@\n \n public class BazelBspServerBuildManager {\n \n+  public static final String DEBUG_MESSAGE = \"DEBUG:\";\n+  public static final String ASPECT_LOCATION = \".bazelbsp/aspects.bzl\";\n+  public static final String FETCH_JAVA_VERSION_ASPECT =\n+      \"@//.bazelbsp:aspects.bzl%fetch_java_target_version\";\n+  public static final String BAZEL_JDK_CURRENT_JAVA_TOOLCHAIN =\n+      \"@bazel_tools//tools/jdk:current_java_toolchain\";\n   private final BazelBspServerConfig serverConfig;\n   private final BazelBspServerRequestHelpers serverRequestHelpers;\n   private final BazelData bazelData;\n   private final BazelRunner bazelRunner;\n \n   private BepServer bepServer;\n   private ScalaBuildTarget scalacClasspath;\n+  private String javaVersion;\n \n   public BazelBspServerBuildManager(\n       BazelBspServerConfig serverConfig,\n@@ -102,7 +109,7 @@ public BuildTarget getBuildTargetForRule(Build.Rule rule) {\n         Uri.packageDirFromLabel(label.getUri(), bazelData.getWorkspaceRoot()).toString());\n     target.setDisplayName(label.getUri());\n     if (extensions.contains(Constants.SCALA)) {\n-      getScalaBuildTarget()\n+      getScalaBuildTarget(rule)\n           .ifPresent(\n               (buildTarget) -> {\n                 target.setDataKind(BuildTargetDataKind.SCALA);\n@@ -113,7 +120,7 @@ public BuildTarget getBuildTargetForRule(Build.Rule rule) {\n     } else if (extensions.contains(Constants.JAVA) || extensions.contains(Constants.KOTLIN)) {\n       target.setDataKind(BuildTargetDataKind.JVM);\n       target.setTags(Lists.newArrayList(BuildManagerParsingUtils.getRuleType(rule.getRuleClass())));\n-      target.setData(getJVMBuildTarget());\n+      target.setData(getJVMBuildTarget(rule));\n     }\n     return target;\n   }\n@@ -144,7 +151,7 @@ public BuildTarget getBuildTargetForRule(Build.Rule rule) {\n         .collect(Collectors.toList());\n   }\n \n-  private Optional<ScalaBuildTarget> getScalaBuildTarget() {\n+  private Optional<ScalaBuildTarget> getScalaBuildTarget(Build.Rule rule) {\n     if (scalacClasspath == null) {\n       buildTargetsWithBep(\n           Lists.newArrayList(\n@@ -179,28 +186,95 @@ public BuildTarget getBuildTargetForRule(Build.Rule rule) {\n               scalaVersion.substring(0, scalaVersion.lastIndexOf(\".\")),\n               ScalaPlatform.JVM,\n               classpath);\n-      scalacClasspath.setJvmBuildTarget(getJVMBuildTarget());\n+      scalacClasspath.setJvmBuildTarget(getJVMBuildTarget(rule));\n     }\n \n     return Optional.of(scalacClasspath);\n   }\n \n-  private JvmBuildTarget getJVMBuildTarget() {\n-    // TODO(andrefmrocha): Properly determine jdk path\n-    return new JvmBuildTarget(null, getJavaVersion());\n+  private JvmBuildTarget getJVMBuildTarget(Build.Rule rule) {\n+    Optional<String> javaHomePath = getJavaPath(rule);\n+    return new JvmBuildTarget(javaHomePath.orElse(null), getJavaVersion().orElse(null));\n   }\n \n-  private String getJavaVersion() {\n-    String version = System.getProperty(\"java.version\");\n-    if (version.startsWith(\"1.\")) {\n-      version = version.substring(0, 3);\n-    } else {\n-      int dot = version.indexOf(\".\");\n-      if (dot != -1) {\n-        version = version.substring(0, dot);\n+  private Optional<String> getJavaPath(Build.Rule rule) {\n+    List<String> traversingPath = Lists.newArrayList(\"$jvm\", \"$java_runtime\", \":alias\", \"actual\");\n+    Optional<Build.Rule> jdkRule = traverseDependency(rule, traversingPath);\n+\n+    if (!jdkRule.isPresent()) {\n+      return Optional.empty();\n+    }\n+\n+    String jdkLocation = jdkRule.get().getLocation();\n+    String localJdkPath = jdkLocation.substring(0, jdkLocation.indexOf(\"/BUILD\"));\n+    return Optional.of(localJdkPath);\n+  }\n+\n+  private Optional<Build.Rule> traverseDependency(\n+      Build.Rule startingRule, List<String> attributesToTraverse) {\n+    Build.Rule currentRule = startingRule;\n+\n+    for (String attributeToTraverse : attributesToTraverse) {\n+      Optional<Build.Rule> rule =\n+          currentRule.getAttributeList().stream()\n+              .filter(\n+                  attribute ->\n+                      attribute.getName().equals(attributeToTraverse) && attribute.hasStringValue())\n+              .findFirst()\n+              .flatMap(\n+                  attribute -> {\n+                    BazelProcessResult processResult =\n+                        bazelRunner\n+                            .commandBuilder()\n+                            .query()\n+                            .withFlag(BazelRunnerFlag.OUTPUT_PROTO)\n+                            .withArgument(attribute.getStringValue())\n+                            .executeBazelCommand();\n+\n+                    return QueryResolver.getQueryResultForProcess(processResult)\n+                        .getTargetList()\n+                        .stream()\n+                        .findFirst();\n+                  })\n+              .map(Build.Target::getRule);\n+\n+      if (!rule.isPresent()) {\n+        return Optional.empty();\n       }\n+\n+      currentRule = rule.get();\n     }\n-    return version;\n+\n+    return Optional.of(currentRule);\n+  }\n+\n+  private Optional<String> getJavaVersion() {\n+    if (javaVersion == null) {\n+      List<String> lines =\n+          bazelRunner\n+              .commandBuilder()\n+              .build()\n+              .withFlag(BazelRunnerFlag.ASPECTS, FETCH_JAVA_VERSION_ASPECT)\n+              .withArgument(BAZEL_JDK_CURRENT_JAVA_TOOLCHAIN)\n+              .executeBazelCommand()\n+              .getStderr();\n+\n+      Optional<String> javaVersion =\n+          lines.stream()\n+              .map(line -> Splitter.on(\" \").splitToList(line))\n+              .filter(\n+                  parts ->\n+                      parts.size() == 3\n+                          && parts.get(0).equals(DEBUG_MESSAGE)\n+                          && parts.get(1).contains(ASPECT_LOCATION)\n+                          && parts.get(2).chars().allMatch(Character::isDigit))\n+              .map(parts -> parts.get(2))\n+              .findFirst();\n+\n+      javaVersion.ifPresent(version -> this.javaVersion = version);\n+    }\n+\n+    return Optional.ofNullable(javaVersion);\n   }\n \n   public Either<ResponseError, CompileResult> buildTargetsWithBep(\n@@ -348,8 +422,8 @@ public String getSourcesRoot(String uri) {\n         .filter(\n             parts ->\n                 parts.size() == 3\n-                    && parts.get(0).equals(\"DEBUG:\")\n-                    && parts.get(1).contains(\".bazelbsp/aspects.bzl\")\n+                    && parts.get(0).equals(DEBUG_MESSAGE)\n+                    && parts.get(1).contains(ASPECT_LOCATION)\n                     && parts.get(2).endsWith(\".jar\"))\n         .map(parts -> Constants.EXEC_ROOT_PREFIX + parts.get(2))\n         .collect(Collectors.toList());"
  }
]
