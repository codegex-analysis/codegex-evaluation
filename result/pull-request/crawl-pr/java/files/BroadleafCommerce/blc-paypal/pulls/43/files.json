[
  {
    "sha": "2101b5f3c521cfd3fcac57393d7fe9ca89fa2897",
    "filename": "docs/PayPal-Environment-Setup.md",
    "status": "modified",
    "additions": 7,
    "deletions": 11,
    "changes": 18,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/docs/PayPal-Environment-Setup.md",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/docs/PayPal-Environment-Setup.md",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/docs/PayPal-Environment-Setup.md?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -7,18 +7,14 @@ To use the BroadleafCommerce PayPal payment functionality in a test environment,\n You will need to provide the following system properties to configure your PayPal API account details:\n \n ```\n-#PayPal Client Side REST Checkout\n-gateway.paypal.checkout.rest.clientId=?\n-gateway.paypal.checkout.rest.secret=?\n-# Options are \"sandbox\" or \"live\"\n-gateway.paypal.checkout.rest.mode=?\n-gateway.paypal.checkout.rest.returnUrl=? (e.g. https://test.blc.localhost:8443/paypal-checkout/return)\n-gateway.paypal.checkout.rest.cancelUrl=? (e.g. https://test.blc.localhost:8443/paypal-checkout/cancel)\n-gateway.paypal.checkout.rest.description=? (e.g. My Test Store)\n+#PayPal properties\n+gateway.paypal.checkout.api.clientId=?\n+gateway.paypal.checkout.api.secret=?\n+gateway.paypal.checkout.api.description=? (e.g. My Test Store)\n # Options are \"sandbox\" or \"production\"\n-gateway.paypal.smart.button.env=?\n-gateway.paypal.smart.button.payment.url=? (e.g. /paypal-checkout/create-payment or /paypal-checkout/create-billing-agreement-token)\n-gateway.paypal.smart.button.authorize.url=? (e.g. /paypal-checkout/return)\n+gateway.paypal.checkout.api.environment=?\n+gateway.paypal.checkout.api.payment.url=? (e.g. /paypal-checkout/create-order)\n+gateway.paypal.checkout.api.authorize.url=? (e.g. /paypal-checkout/return)\n ```\n \n > Note: Broadleaf allows you to create unique property files per environment (e.g. common.properties, local.properties, development.properties, integrationdev.properties, integrationqa.properties, staging.properties, and production.properties). Alternatively, you can gather these properties from the `BLC_SYSTEM_PROPERTY` table in your database using the `blSystemPropertiesService`. See the java docs for more details."
  },
  {
    "sha": "e5b146ca2c65442e79225147ce0783306f72e879",
    "filename": "docs/PayPal-Quick-Start.md",
    "status": "modified",
    "additions": 34,
    "deletions": 88,
    "changes": 122,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/docs/PayPal-Quick-Start.md",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/docs/PayPal-Quick-Start.md",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/docs/PayPal-Quick-Start.md?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -29,22 +29,17 @@ Make sure to include the dependency in your `site` AND `admin` pom.xml as well (\n ```\n \n ## Flows\n-This PayPal Module supports creating transactions via a typical Payments Flow as well as creating Billing Agreements and future payments\n- via Reference Transactions. You can learn more about Reference Transactions and Billing Agreements via the REST API here: https://developer.paypal.com/docs/limited-release/reference-transactions/\n+This PayPal Module supports creating transactions via a typical Payments Flow.\n   \n-> Note: The Reference Transaction Flow is a limited availability API and you will need to contact your PayPal representative to make sure\n-  it is enabled for your accounts before you can use it\n-  \n-In order to switch between a normal payment flow vs creating a billing agreement at checkout, you will just need to change a few configuration\n-parameters which will be outlined in the steps below.\n+> Note: The Billing Agreements and future payments via Reference Transactions have not yet been implemented.\n   \n ## Template Updates\n \n 1. On your templates that render cart actions like a \"Proceed to Checkout\" button, you will need to place an empty `div` to render\n PayPal's `Smart Checkout` button:\n \n ```html\n-    <div id=\"paypal-button\">\n+    <div id=\"paypal-button-container\">\n     </div>\n ```\n \n@@ -53,93 +48,44 @@ PayPal's `Smart Checkout` button:\n 2. Include the following JS to invoke\n \n ```html\n-<script src=\"https://www.paypalobjects.com/api/checkout.js\"></script>\n-<script type=\"text/javascript\" th:inline=\"javascript\">\n-    paypal.Button.render({\n-        env : [[${@environment.getProperty('gateway.paypal.smart.button.env')}]],\n-\n-        // Specify the style of the button\n-        style: {\n-            layout: 'vertical',  // horizontal | vertical\n-            size:   'medium',    // medium | large | responsive\n-            shape:  'rect',      // pill | rect\n-            color:  'gold'       // gold | blue | silver | white | black\n-        },\n-\n-        // Specify allowed and disallowed funding sources\n-        //\n-        // Options:\n-        // - paypal.FUNDING.CARD\n-        // - paypal.FUNDING.CREDIT\n-        // - paypal.FUNDING.ELV\n-        funding: {\n-            allowed: [\n-                paypal.FUNDING.CARD,\n-                paypal.FUNDING.CREDIT\n-            ],\n-            disallowed: []\n-        },\n-\n-        payment : function(data, actions) {\n-            return BLC.post({\n-                url : [[${@environment.getProperty('gateway.paypal.smart.button.payment.url')}]],\n-                data : {\n-                    performCheckout : false\n-                }\n-            }).then(function(res) {\n-                return res.id;\n-            });\n-        },\n-        onAuthorize : function(data, actions) {\n-            BLC.get({\n-                url : [[${@environment.getProperty('gateway.paypal.smart.button.authorize.url')}]],\n-                data : {\n-                    paymentId : data.paymentID,\n-                    payerId : data.payerID\n-                }\n-            });\n-        }\n-    }, '#paypal-button');\n+<script\n+        src=\"https://www.paypal.com/sdk/js?client-id=<YOUR CLIENT ID\">\n+</script>\n+<script>\n+    $(document).ready(function() {\n+        paypal.Buttons({\n+            createOrder : function(data, actions) {\n+                return BLC.post({\n+                    url : '<YOUR CREATE ORDER URL (e.g. /paypal-checkout/create-order)>',\n+                    data : {\n+                        performCheckout : false\n+                    }\n+                }).then(function(res) {\n+                    return res.id;\n+                });\n+            },\n+            onApprove : function(data, actions) {\n+                console.log('onApprove');\n+                BLC.get({\n+                    url : '<YOUR RETURN URL> (e.g. /paypal-checkout/return)',\n+                    data : {\n+                        orderId : data.orderID,\n+                        payerId : data.payerID\n+                    }\n+                });\n+            }\n+        }).render('#paypal-button-container');\n+    });\n </script>\n-```\n-\n-> Note: If you are wishing to switch to the Billing Agreements Flow, you will want to change the `onAuthorize` callback method\n-  and define the following instead of `paymentId` and `payerId`\n-  \n-```\n-        onAuthorize : function(data, actions) {\n-            BLC.get({\n-                url : [[${@environment.getProperty('gateway.paypal.smart.button.authorize.url')}]],\n-                data : {\n-                    billingToken: data.billingToken,\n-                    paymentToken: data.paymentToken\n-                }\n-            });\n-        }\n-```\n-\n-\n-If you are using Broadleaf's Heat Clinic demo store, you may also wish to change the following templates to conform to this flow:\n-\n-in `reviewStage.html` - change to:\n-\n-```\n-    <blc:form id=\"PayPalCheckoutSubmissionForm\" class=\"is-hidden\" th:action=\"@{/paypal-checkout/checkout/complete(guest-checkout=${#request.getParameter('guest-checkout')})}\" method=\"POST\" novalidate=\"novalidate\">\n-```\n-\n-if you are switching to a billing agreements flow - change to:\n-\n-```\n-<blc:form id=\"PayPalCheckoutSubmissionForm\" class=\"is-hidden\" th:action=\"@{/paypal-checkout/billing-agreement-token/complete(guest-checkout=${#request.getParameter('guest-checkout')})}\" method=\"POST\" novalidate=\"novalidate\">\n ```\n \n ### Customizations\n \n One of the more typical customizations you may wish to do revolves around passing the appropriate data to PayPal.\n-The service that handles translating a Broadleaf cart into the appropriate PayPal request is encapsulated in the following spring components `blPayPalPaymentService` and `blPayPalAgreementTokenService`.\n-These components handles things like `Payer`, `Transaction`, `Payment`, and `ShippingAddress` construction. You may wish\n+The service that handles translating a Broadleaf cart into the appropriate PayPal request is encapsulated in the `blPayPalPaymentService` spring component.\n+These components handles things like `Payer`, `Payee`, `Order`, and `ShippingDetail` construction. You may wish\n to extend these services to send the appropriate values based on your business requirements.\n \n ## Done!\n-At this point, all the configuration should be complete and you are now ready to test your integration with PayPal Checkout + Smart Payments.\n+At this point, all the configuration should be complete and you are now ready to test your integration with PayPal Checkout.\n Add something to your cart and proceed with checkout!"
  },
  {
    "sha": "7bfa7ffbcb84e28e18512bfaa6b9a488d1a66a24",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 24,
    "deletions": 14,
    "changes": 38,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/pom.xml",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/pom.xml",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/pom.xml?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -10,16 +10,17 @@\n     <artifactId>broadleaf-paypal</artifactId>\n     <name>BroadleafCommerce PayPal</name>\n     <description>BroadleafCommerce PayPal</description>\n-    <version>3.0.3-SNAPSHOT</version>\n+    <version>3.1.0-SNAPSHOT</version>\n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n         <blc.version>6.0.0-GA</blc.version>\n         <project.uri>${user.dir}</project.uri>\n+        <paypal.sdk.version>1.0.2</paypal.sdk.version>\n     </properties>\n     <scm>\n         <connection>scm:git:git@github.com:BroadleafCommerce/blc-paypal.git</connection>\n         <developerConnection>scm:git:git@github.com:BroadleafCommerce/blc-paypal.git</developerConnection>\n-        <url>https://github.com/BroadleafCommerce/BroadleafCommerce</url>\n+        <url>https://github.com/BroadleafCommerce/blc-paypal</url>\n         <tag>HEAD</tag>\n     </scm>\n \n@@ -100,15 +101,15 @@\n         </repository>\n     </distributionManagement>\n \n-    <dependencyManagement>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.apache.httpcomponents</groupId>\n-                <artifactId>httpclient</artifactId>\n-                <version>4.5.6</version>\n-            </dependency>\n-        </dependencies>\n-    </dependencyManagement>\n+<!--    <dependencyManagement>-->\n+<!--        <dependencies>-->\n+<!--            <dependency>-->\n+<!--                <groupId>org.apache.httpcomponents</groupId>-->\n+<!--                <artifactId>httpclient</artifactId>-->\n+<!--                <version>4.5.6</version>-->\n+<!--            </dependency>-->\n+<!--        </dependencies>-->\n+<!--    </dependencyManagement>-->\n     <dependencies>\n         <dependency>\n             <groupId>org.broadleafcommerce</groupId>\n@@ -124,8 +125,18 @@\n         </dependency>\n         <dependency>\n             <groupId>com.paypal.sdk</groupId>\n-            <artifactId>rest-api-sdk</artifactId>\n-            <version>1.14.0</version>\n+            <artifactId>checkout-sdk</artifactId>\n+            <version>${paypal.sdk.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.6</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>\n+            <artifactId>json</artifactId>\n+            <version>20180813</version>\n         </dependency>\n         <dependency>\n             <groupId>javax.servlet</groupId>\n@@ -134,6 +145,5 @@\n             <type>jar</type>\n             <scope>provided</scope>\n         </dependency>\n-\n     </dependencies>\n </project>"
  },
  {
    "sha": "beaa8ad33387cf6eff74df75defc3c06b51b21bc",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutService.java",
    "status": "modified",
    "additions": 12,
    "deletions": 34,
    "changes": 46,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutService.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutService.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutService.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,52 +17,30 @@\n  */\n package org.broadleafcommerce.payment.service.gateway;\n \n-import org.broadleafcommerce.common.money.Money;\n-import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n-import org.broadleafcommerce.common.payment.dto.PaymentResponseDTO;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import org.broadleafcommerce.vendor.paypal.api.AgreementToken;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalRequest;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalResponse;\n \n-import com.paypal.api.payments.Amount;\n-import com.paypal.api.payments.ItemList;\n-import com.paypal.api.payments.Payment;\n-import com.paypal.api.payments.ShippingAddress;\n-import com.paypal.base.rest.APIContext;\n-\n /**\n  * @author Elbert Bautista (elbertbautista)\n  */\n public interface ExternalCallPayPalCheckoutService {\n \n     PayPalCheckoutConfiguration getConfiguration();\n \n-    void setCommonDetailsResponse(AgreementToken response, PaymentResponseDTO responseDTO, Money amount,\n-                                  String orderId, boolean checkoutComplete);\n-\n-    /**\n-     * Converts a PayPal payment into a PaymentResponseDTO\n-     * \n-     * @param response A PayPal payment that should be used to be converted into a PaymentResponseDTO\n-     * @param responseDTO The response dto that should be used to copy information from the PayPal payment\n-     */\n-    void setCommonDetailsResponse(Payment response, PaymentResponseDTO responseDTO);\n-\n-    ShippingAddress getPayPalShippingAddress(PaymentRequestDTO paymentRequestDTO);\n-\n-    ItemList getPayPalItemListFromOrder(PaymentRequestDTO paymentRequestDTO, boolean shouldPopulateShipping);\n-\n-    Amount getPayPalAmountFromOrder(PaymentRequestDTO paymentRequestDTO);\n-\n     /**\n      * Makes a request to PayPal\n-     * \n-     * @param paymentRequest The payment request that should be executed. The operation that is executed is depedent on which implementation of {@link PayPalRequest} is sent\n-     * @return the respective PayPalResponse that corresponds to the given PayPalRequest\n-     * @throws PaymentException\n+     *\n+     * @param paymentRequest The payment request that should be executed. The operation that is\n+     *        executed is dependent on which implementation of {@link PayPalRequest} is sent\n+     * @param responseType The type of the response expected\n+     *\n+     * @return the respective {@link PayPalResponse} that corresponds to the given\n+     *         {@code responseType}\n+     *\n+     * @throws PaymentException if the {@link PayPalRequest} returns an exception once executed.\n+     *         This could be because the initial request is configured invalidly or because the\n+     *         PayPal APIs responded with an error.\n      */\n-    PayPalResponse call(PayPalRequest paymentRequest) throws PaymentException;\n-\n-    APIContext constructAPIContext(PaymentRequestDTO paymentRequestDTO);\n+    <T extends PayPalResponse> T call(PayPalRequest paymentRequest, Class<T> responseType) throws PaymentException;\n }"
  },
  {
    "sha": "d65fe0637570dc804880224365ba538d7daa5124",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutServiceImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 231,
    "changes": 234,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/ExternalCallPayPalCheckoutServiceImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,31 +17,12 @@\n  */\n package org.broadleafcommerce.payment.service.gateway;\n \n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.broadleafcommerce.common.money.Money;\n-import org.broadleafcommerce.common.payment.dto.AddressDTO;\n-import org.broadleafcommerce.common.payment.dto.LineItemDTO;\n-import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n-import org.broadleafcommerce.common.payment.dto.PaymentResponseDTO;\n import org.broadleafcommerce.common.payment.service.AbstractExternalPaymentGatewayCall;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import org.broadleafcommerce.vendor.paypal.api.AgreementToken;\n-import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalRequest;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalResponse;\n import org.springframework.stereotype.Service;\n-import com.paypal.api.payments.Address;\n-import com.paypal.api.payments.Amount;\n-import com.paypal.api.payments.Details;\n-import com.paypal.api.payments.Item;\n-import com.paypal.api.payments.ItemList;\n-import com.paypal.api.payments.Payment;\n-import com.paypal.api.payments.ShippingAddress;\n-import com.paypal.api.payments.Transaction;\n-import com.paypal.base.rest.APIContext;\n-import java.util.ArrayList;\n-import java.util.List;\n+\n import javax.annotation.Resource;\n \n /**\n@@ -58,198 +39,16 @@ public PayPalCheckoutConfiguration getConfiguration() {\n         return configuration;\n     }\n \n-    @Override\n-    public void setCommonDetailsResponse(AgreementToken response, PaymentResponseDTO responseDTO, Money amount,\n-                                         String orderId, boolean checkoutComplete) {\n-\n-        if (response != null) {\n-            responseDTO.rawResponse(response.toJSON());\n-\n-            Address shippingAddress = response.getShippingAddress();\n-\n-            if (shippingAddress != null) {\n-                responseDTO.shipTo()\n-                        .addressLine1(shippingAddress.getLine1())\n-                        .addressLine2(shippingAddress.getLine2())\n-                        .addressCityLocality(shippingAddress.getCity())\n-                        .addressStateRegion(shippingAddress.getState())\n-                        .addressPostalCode(shippingAddress.getPostalCode())\n-                        .addressCountryCode(shippingAddress.getCountryCode())\n-                        .addressPhone(shippingAddress.getPhone())\n-                        .done();\n-            }\n-        }\n-\n-        responseDTO.amount(amount)\n-                .orderId(orderId)\n-                .successful(true)\n-                .valid(true)\n-                .completeCheckoutOnCallback(checkoutComplete);\n-    }\n-\n-    @Override\n-    public void setCommonDetailsResponse(Payment response, PaymentResponseDTO responseDTO) {\n-        responseDTO.rawResponse(response.toJSON());\n-        \n-        if (CollectionUtils.isNotEmpty(response.getTransactions()) && \n-            response.getTransactions().get(0) != null &&\n-            response.getTransactions().get(0).getItemList() != null) {\n-            ShippingAddress shippingAddress = response.getTransactions().get(0).getItemList().getShippingAddress();\n-            \n-            String shipPhone = shippingAddress.getPhone();\n-            String itemListPhone = response.getTransactions().get(0).getItemList().getShippingPhoneNumber();\n-            String payerPhone = response.getPayer().getPayerInfo().getPhone();\n-            String phone = \"\";\n-            if (shipPhone != null) {\n-                phone = shipPhone;\n-            } else if (itemListPhone != null) {\n-                phone = itemListPhone;\n-            } else if (payerPhone != null) {\n-                phone = payerPhone;\n-            }\n-            responseDTO.shipTo()\n-                .addressFullName(shippingAddress.getRecipientName())\n-                .addressLine1(shippingAddress.getLine1())\n-                .addressLine2(shippingAddress.getLine2())\n-                .addressCityLocality(shippingAddress.getCity())\n-                .addressStateRegion(shippingAddress.getState())\n-                .addressPostalCode(shippingAddress.getPostalCode())\n-                .addressCountryCode(shippingAddress.getCountryCode())\n-                .addressPhone(phone)\n-                .done();\n-            \n-            if (shippingAddress.getStatus() != null) {\n-                responseDTO.getShipTo().additionalFields(MessageConstants.ADDRESSSTATUS, shippingAddress.getStatus());\n-            }\n-\n-            Transaction transaction = response.getTransactions().get(0);\n-            \n-            String itemTotal = \"\";\n-            String shippingDiscount = \"\";\n-            String shippingTotal = \"\";\n-            String totalTax = \"\";\n-            String total = \"0.00\";\n-            String currency = \"USD\";\n-            if (transaction.getAmount() != null && transaction.getAmount().getDetails() != null) {\n-                Details details = transaction.getAmount().getDetails();\n-                if (details.getSubtotal() != null) {\n-                    itemTotal = details.getSubtotal();\n-                }\n-                if (details.getShippingDiscount() != null) {\n-                    shippingDiscount = details.getShippingDiscount();\n-                }\n-                if (details.getShipping() != null) {\n-                    shippingTotal = details.getShipping();\n-                }\n-                if (details.getTax() != null) {\n-                    totalTax = details.getTax();\n-                }\n-            }\n-            if (transaction.getAmount() != null) {\n-                total = transaction.getAmount().getTotal();\n-                if (transaction.getAmount().getCurrency() != null) {\n-                    currency = transaction.getAmount().getCurrency();\n-                }\n-            }\n-            String[] customFields = transaction.getCustom().split(\"\\\\|\");\n-            responseDTO.amount(new Money(total, currency))\n-                    .orderId(customFields[0])\n-                    .successful(true)\n-                    .valid(true)\n-                    .completeCheckoutOnCallback(Boolean.parseBoolean(customFields[1]))\n-                    .responseMap(MessageConstants.DETAILSPAYMENTALLOWEDMETHOD, response.getPayer().getPaymentMethod())\n-                    .responseMap(MessageConstants.DETAILSPAYMENTTRANSACTIONID, response.getId())\n-                    .responseMap(MessageConstants.DETAILSPAYMENTITEMTOTAL, itemTotal)\n-                    .responseMap(MessageConstants.DETAILSPAYMENTSHIPPINGDISCOUNT, shippingDiscount)\n-                    .responseMap(MessageConstants.DETAILSPAYMENTSHIPPINGTOTAL,shippingTotal)\n-                    .responseMap(MessageConstants.DETAILSPAYMENTTOTALTAX, totalTax);\n-            \n-            String payerStatus = response.getPayer().getStatus();\n-    \n-            responseDTO.customer()\n-                .firstName(response.getPayer().getPayerInfo().getFirstName())\n-                .lastName(response.getPayer().getPayerInfo().getLastName())\n-                .phone(response.getPayer().getPayerInfo().getPhone())\n-                .email(response.getPayer().getPayerInfo().getEmail())\n-                .done()\n-            .responseMap(MessageConstants.NOTE, response.getNoteToPayer())\n-            .responseMap(MessageConstants.PAYERSTATUS, payerStatus);\n-        }\n-\n-    }\n-\n-    @Override\n-    public ShippingAddress getPayPalShippingAddress(PaymentRequestDTO paymentRequestDTO) {\n-        ShippingAddress shipAddress = new ShippingAddress();\n-        AddressDTO<PaymentRequestDTO> addressDTO = paymentRequestDTO.getShipTo();\n-        shipAddress.setRecipientName(addressDTO.getAddressFullName());\n-        shipAddress.setLine1(addressDTO.getAddressLine1());\n-        shipAddress.setLine2(addressDTO.getAddressLine2());\n-        shipAddress.setCity(addressDTO.getAddressCityLocality());\n-        shipAddress.setState(addressDTO.getAddressStateRegion());\n-        shipAddress.setPostalCode(addressDTO.getAddressPostalCode());\n-        shipAddress.setCountryCode(addressDTO.getAddressCountryCode());\n-        if (StringUtils.isNotBlank(addressDTO.getAddressPhone())) {\n-            shipAddress.setPhone(addressDTO.getAddressPhone());\n-        }\n-        return shipAddress;\n-    }\n-\n-    @Override\n-    public ItemList getPayPalItemListFromOrder(PaymentRequestDTO paymentRequestDTO, boolean shouldPopulateShipping) {\n-        ItemList itemList = new ItemList();\n-        boolean returnItemList = false;\n-        if (paymentRequestDTO.shipToPopulated() && shouldPopulateShipping) {\n-            ShippingAddress address = getPayPalShippingAddress(paymentRequestDTO);\n-            itemList.setShippingAddress(address);\n-            returnItemList = true;\n-        }\n-\n-        if (CollectionUtils.isNotEmpty(paymentRequestDTO.getLineItems())) {\n-            List<Item> items = new ArrayList<>();\n-            for (LineItemDTO lineItem : paymentRequestDTO.getLineItems()) {\n-                Item item = new Item();\n-                item.setCategory(lineItem.getCategory());\n-                item.setDescription(lineItem.getDescription());\n-                item.setQuantity(lineItem.getQuantity());\n-                item.setPrice(lineItem.getTotal());\n-                item.setTax(lineItem.getTax());\n-                item.setCurrency(paymentRequestDTO.getOrderCurrencyCode());\n-                item.setName(lineItem.getName());\n-                items.add(item);\n-            }\n-            itemList.setItems(items);\n-            returnItemList = true;\n-        }\n-        return returnItemList ? itemList : null;\n-    }\n-\n-    @Override\n-    public Amount getPayPalAmountFromOrder(PaymentRequestDTO paymentRequestDTO) {\n-        Details details = new Details();\n-\n-        details.setShipping(paymentRequestDTO.getShippingTotal());\n-        details.setSubtotal(paymentRequestDTO.getOrderSubtotal());\n-        details.setTax(paymentRequestDTO.getTaxTotal());\n-\n-        Amount amount = new Amount();\n-        amount.setCurrency(paymentRequestDTO.getOrderCurrencyCode());\n-        amount.setTotal(paymentRequestDTO.getTransactionTotal());\n-        amount.setDetails(details);\n-        return amount;\n-    }\n-\n     @Override\n     public String getServiceName() {\n         return getClass().getName();\n     }\n \n     @Override\n-    public PayPalResponse call(PayPalRequest paymentRequest) throws PaymentException {\n-        return super.process(paymentRequest);\n+    public <T extends PayPalResponse> T call(PayPalRequest paymentRequest, Class<T> responseType) throws PaymentException {\n+        return responseType.cast(super.process(paymentRequest));\n     }\n \n-\n     @Override\n     public PayPalResponse communicateWithVendor(PayPalRequest paymentRequest) throws Exception {\n         return paymentRequest.execute();\n@@ -259,31 +58,4 @@ public PayPalResponse communicateWithVendor(PayPalRequest paymentRequest) throws\n     public Integer getFailureReportingThreshold() {\n         return configuration.getFailureReportingThreshold();\n     }\n-\n-    @Override\n-    public APIContext constructAPIContext(PaymentRequestDTO paymentRequestDTO) {\n-        APIContext context = initializeAPIContext();\n-        if (paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.HTTP_HEADER_REQUEST_ID)) {\n-            context.setRequestId((String)paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_HEADER_REQUEST_ID));\n-        }\n-        if (paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.HTTP_HEADER_AUTH_ASSERTION)) {\n-            context.addHTTPHeader(MessageConstants.HTTP_HEADER_AUTH_ASSERTION, (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_HEADER_AUTH_ASSERTION));\n-        }\n-        if (paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.HTTP_HEADER_CLIENT_METADATA_ID)) {\n-            context.addHTTPHeader(MessageConstants.HTTP_HEADER_CLIENT_METADATA_ID, (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_HEADER_CLIENT_METADATA_ID));\n-        }\n-        if (paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.HTTP_HEADER_MOCK_RESPONSE)) {\n-            context.addHTTPHeader(MessageConstants.HTTP_HEADER_MOCK_RESPONSE, (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_HEADER_MOCK_RESPONSE));\n-        }\n-        return context;\n-    }\n-\n-    private APIContext initializeAPIContext() {\n-        APIContext context = new APIContext(configuration.getCheckoutRestClientId(),\n-                configuration.getCheckoutRestSecret(),\n-                configuration.getCheckoutRestMode());\n-        context.addHTTPHeader(MessageConstants.BN, MessageConstants.BNCODE);\n-        return context;\n-    }\n-\n }"
  },
  {
    "sha": "c6c2c5410c6b8c9afa7609497da171b72e2c56fc",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfiguration.java",
    "status": "modified",
    "additions": 3,
    "deletions": 47,
    "changes": 50,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfiguration.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfiguration.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfiguration.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -19,8 +19,6 @@\n \n import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n import org.broadleafcommerce.common.payment.service.PaymentGatewayConfiguration;\n-import org.broadleafcommerce.vendor.paypal.service.PayPalWebProfileService;\n-import org.broadleafcommerce.vendor.paypal.service.payment.type.PayPalShippingDisplayType;\n \n import java.util.Map;\n \n@@ -29,47 +27,7 @@\n  */\n public interface PayPalCheckoutConfiguration extends PaymentGatewayConfiguration {\n \n-    /**\n-     * URL to which the buyer's browser is returned after choosing to pay with PayPal.\n-     * For digital goods, you must add JavaScript to this page to close the in-context experience.\n-     * Note: PayPal recommends that the value be the final review page on which the buyer confirms the order and\n-     * payment or billing agreement.\n-     *\n-     * Character length and limitations: 2048 single-byte characters\n-     * @return String\n-     */\n-    public String getReturnUrl();\n-\n-    /**\n-     * URL to which the buyer is returned if the buyer does not approve the use of PayPal to pay you.\n-     * For digital goods, you must add JavaScript to this page to close the in-context experience.\n-     * Note: PayPal recommends that the value be the original page on which the buyer chose to pay\n-     * with PayPal or establish a billing agreement.\n-     *\n-     * Character length and limitations: 2048 single-byte characters\n-     * @return\n-     */\n-    public String getCancelUrl();\n-\n-    /**\n-     * Gets the the property driven id of the WebProfile to be used when creating payments. For more information on WebProfiles go to {@link https://developer.paypal.com/docs/integration/direct/payment-experience/}\n-     * {@link PayPalWebProfileService#getWebProfileId()} should be used instead if you want to find the web profile id to create a payment since it has the ability to create new WebProfiles based on injected beans along with using this method\n-     * \n-     * @return\n-     */\n-    public String getWebProfileId();\n-\n-    String getSmartPaymentEnvironment();\n-\n-    /**\n-     * For digital goods, this field is required and must be set to 1.\n-     * 0 - PayPal displays the shipping address passed in.\n-     * 1 - PayPal does not display the shipping fields at all. (Default)\n-     * 2 - PayPal will obtain the shipping address from the buyer's profile.\n-     *\n-     * @return PayPalShippingDisplayType\n-     */\n-    public PayPalShippingDisplayType getShippingDisplayType();\n+    String getEnvironment();\n \n     /**\n      * Type declaration for the label to be displayed in MiniCart for UX. It is one of the following values:\n@@ -121,9 +79,7 @@\n \n     String getPaymentDescription();\n \n-    String getCheckoutRestClientId();\n-\n-    String getCheckoutRestSecret();\n+    String getClientId();\n \n-    String getCheckoutRestMode();\n+    String getClientSecret();\n }"
  },
  {
    "sha": "2323712eceb9bb260109864b5317e76ce0c7bad2",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfigurationImpl.java",
    "status": "modified",
    "additions": 10,
    "deletions": 73,
    "changes": 83,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfigurationImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfigurationImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutConfigurationImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,96 +17,38 @@\n  */\n package org.broadleafcommerce.payment.service.gateway;\n \n-import org.broadleafcommerce.common.config.service.SystemPropertiesService;\n import org.broadleafcommerce.common.payment.PaymentGatewayType;\n import org.broadleafcommerce.common.payment.service.AbstractPaymentGatewayConfiguration;\n-import org.broadleafcommerce.common.web.BaseUrlResolver;\n import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCheckoutPaymentGatewayType;\n-import org.broadleafcommerce.vendor.paypal.service.payment.type.PayPalShippingDisplayType;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.Environment;\n import org.springframework.stereotype.Service;\n \n-import java.net.URI;\n-import java.net.URISyntaxException;\n import java.util.HashMap;\n import java.util.Map;\n \n-import javax.annotation.Resource;\n-\n /**\n  * @author Elbert Bautista (elbertbautista)\n  */\n @Service(\"blPayPalCheckoutConfiguration\")\n public class PayPalCheckoutConfigurationImpl extends AbstractPaymentGatewayConfiguration implements PayPalCheckoutConfiguration {\n \n-    @Resource(name = \"blBaseUrlResolver\")\n-    protected BaseUrlResolver urlResolver;\n-\n     @Autowired\n-    protected SystemPropertiesService propertiesService;\n+    protected Environment env;\n \n     protected int failureReportingThreshold = 1;\n \n     protected boolean performAuthorizeAndCapture = true;\n \n-    @Override\n-    public String getReturnUrl() {\n-        String url = propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.returnUrl\");\n-        try {\n-            URI u = new URI(url);\n-            if (u.isAbsolute()) {\n-                return url;\n-            } else {\n-                String baseUrl = urlResolver.getSiteBaseUrl();\n-                return baseUrl + url;\n-            }\n-        } catch (URISyntaxException e) {\n-            throw new IllegalArgumentException(\"The value for 'gateway.paypal.checkout.rest.returnUrl' is not valid.\", e);\n-        }\n-    }\n-\n-    @Override\n-    public String getCancelUrl() {\n-        String url = propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.cancelUrl\");\n-        try {\n-            URI u = new URI(url);\n-            if (u.isAbsolute()) {\n-                return url;\n-            } else {\n-                String baseUrl = urlResolver.getSiteBaseUrl();\n-                return baseUrl + url;\n-            }\n-        } catch (URISyntaxException e) {\n-            throw new IllegalArgumentException(\"The value for 'gateway.paypal.checkout.rest.cancelUrl' is not valid.\", e);\n-        }\n-    }\n-\n-    @Override\n-    public String getWebProfileId() {\n-        return propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.webProfileId\");\n-    }\n-\n     @Override\n     public String getPaymentDescription() {\n-        return propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.description\");\n+        return env.getProperty(\"gateway.paypal.checkout.api.description\");\n     }\n \n     @Override\n-    public String getSmartPaymentEnvironment() {\n-        return propertiesService.resolveSystemProperty(\"gateway.paypal.smart.button.env\");\n-    }\n-\n-    @Override\n-    public PayPalShippingDisplayType getShippingDisplayType() {\n-        String shippingType = propertiesService.resolveSystemProperty(\"gateway.paypal.expressCheckout.shippingDisplayType\");\n-\n-        PayPalShippingDisplayType displayType = PayPalShippingDisplayType.getInstance(shippingType);\n-        if (displayType != null) {\n-            return displayType;\n-        }\n-\n-        return PayPalShippingDisplayType.NO_DISPLAY;\n+    public String getEnvironment() {\n+        return env.getProperty(\"gateway.paypal.checkout.api.environment\");\n     }\n \n     @Override\n@@ -130,18 +72,13 @@ public String getTotalType() {\n     }\n \n     @Override\n-    public String getCheckoutRestClientId() {\n-        return propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.clientId\");\n-    }\n-\n-    @Override\n-    public String getCheckoutRestSecret() {\n-        return propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.secret\");\n+    public String getClientId() {\n+        return env.getProperty(\"gateway.paypal.checkout.api.clientId\");\n     }\n \n     @Override\n-    public String getCheckoutRestMode() {\n-        return propertiesService.resolveSystemProperty(\"gateway.paypal.checkout.rest.mode\");\n+    public String getClientSecret() {\n+        return env.getProperty(\"gateway.paypal.checkout.api.secret\");\n     }\n \n     @Override\n@@ -221,7 +158,7 @@ public boolean handlesMultiplePayments() {\n \n     @Override\n     public PaymentGatewayType getGatewayType() {\n-        return PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT;\n+        return PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2;\n     }\n \n }"
  },
  {
    "sha": "59b533b2fa7e174838880a07e2102c4d10fd5438",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutReportingServiceImpl.java",
    "status": "modified",
    "additions": 145,
    "deletions": 13,
    "changes": 158,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutReportingServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutReportingServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutReportingServiceImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,6 +17,18 @@\n  */\n package org.broadleafcommerce.payment.service.gateway;\n \n+import com.paypal.orders.AddressPortable;\n+import com.paypal.orders.AmountBreakdown;\n+import com.paypal.orders.AmountWithBreakdown;\n+import com.paypal.orders.Money;\n+import com.paypal.orders.Name;\n+import com.paypal.orders.Order;\n+import com.paypal.orders.Payer;\n+import com.paypal.orders.Phone;\n+import com.paypal.orders.PhoneWithType;\n+import com.paypal.orders.PurchaseUnit;\n+import com.paypal.orders.ShippingDetail;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.commons.logging.Log;\n@@ -27,14 +39,20 @@\n import org.broadleafcommerce.common.payment.service.AbstractPaymentGatewayReportingService;\n import org.broadleafcommerce.common.payment.service.PaymentGatewayReportingService;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n+import org.broadleafcommerce.vendor.paypal.service.PayPalClientProvider;\n import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCheckoutPaymentGatewayType;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalPaymentRetrievalRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalPaymentRetrievalResponse;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalOrderRetrievalRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalOrderRetrievalResponse;\n+import org.broadleafcommerce.vendor.paypal.service.util.PayPalUtils;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n-import com.paypal.api.payments.Payment;\n+\n import javax.annotation.Resource;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n \n /**\n  * @author Elbert Bautista (elbertbautista)\n@@ -47,22 +65,136 @@\n     @Resource(name = \"blExternalCallPayPalCheckoutService\")\n     protected ExternalCallPayPalCheckoutService payPalCheckoutService;\n \n+    @Resource(name = \"blPayPalClientProvider\")\n+    protected PayPalClientProvider clientProvider;\n+\n+    @Resource(name = \"blPayPalUtils\")\n+    protected PayPalUtils utils;\n+\n     @Override\n     public PaymentResponseDTO findDetailsByTransaction(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        Assert.isTrue(paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.HTTP_PAYERID), \"The RequestDTO must contain a payerID\");\n-        Assert.isTrue(paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.HTTP_PAYMENTID), \"The RequestDTO must contain a paymentID\");\n+        Map<String, Object> additionalFields = paymentRequestDTO.getAdditionalFields();\n+        Assert.isTrue(additionalFields.containsKey(MessageConstants.HTTP_PAYERID), \"The RequestDTO must contain a payerID\");\n+        Assert.isTrue(additionalFields.containsKey(MessageConstants.HTTP_ORDER_ID), \"The RequestDTO must contain a orderId\");\n \n-        PayPalPaymentRetrievalResponse response = (PayPalPaymentRetrievalResponse) payPalCheckoutService.call(\n-                new PayPalPaymentRetrievalRequest((String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_PAYMENTID),\n-                        payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        Payment payment = response.getPayment();\n+        String orderId = (String) additionalFields.get(MessageConstants.HTTP_ORDER_ID);\n+        PayPalOrderRetrievalRequest orderRetrievalRequest = new PayPalOrderRetrievalRequest(clientProvider, paymentRequestDTO, orderId);\n+        PayPalOrderRetrievalResponse response = payPalCheckoutService.call(orderRetrievalRequest, PayPalOrderRetrievalResponse.class);\n         PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n-                PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n-        payPalCheckoutService.setCommonDetailsResponse(payment, responseDTO);\n-        responseDTO.responseMap(MessageConstants.PAYERID, (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_PAYERID))\n-                    .responseMap(MessageConstants.PAYMENTID, (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.HTTP_PAYMENTID));\n+                PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2);\n+        setCommonDetailsResponse(response, responseDTO);\n+        String payerId = (String) additionalFields.get(MessageConstants.HTTP_PAYERID);\n+        responseDTO.orderId(paymentRequestDTO.getOrderId());\n+        responseDTO.responseMap(MessageConstants.PAYERID, payerId)\n+                .responseMap(MessageConstants.ORDER_ID, orderId);\n         LOG.info(\"ResponseDTO created: \" + ToStringBuilder.reflectionToString(responseDTO, ToStringStyle.MULTI_LINE_STYLE));\n         return responseDTO;\n     }\n \n+    protected void setCommonDetailsResponse(PayPalOrderRetrievalResponse response,\n+                                            PaymentResponseDTO responseDTO) {\n+        Order order = response.getContent();\n+        responseDTO.rawResponse(utils.convertResponseToJson(response.getResponse()));\n+        responseDTO.responseMap(MessageConstants.ORDER_STATUS, order.status());\n+\n+        List<PurchaseUnit> purchaseUnits = order.purchaseUnits();\n+\n+        if (CollectionUtils.isEmpty(purchaseUnits)\n+                || purchaseUnits.get(0) == null) {\n+            return;\n+        }\n+\n+        PurchaseUnit purchaseUnit = purchaseUnits.get(0);\n+        ShippingDetail shippingDetail = purchaseUnit.shippingDetail();\n+        String phone = Optional.ofNullable(order.payer())\n+                .map(Payer::phoneWithType)\n+                .map(PhoneWithType::phoneNumber)\n+                .map(Phone::nationalNumber)\n+                .orElse(\"\");\n+\n+        if (shippingDetail != null) {\n+            AddressPortable shipAddress = shippingDetail.addressPortable();\n+            responseDTO.shipTo()\n+                    .addressFullName(shippingDetail.name().fullName())\n+                    .addressLine1(shipAddress.addressLine1())\n+                    .addressLine2(shipAddress.addressLine2())\n+                    .addressCityLocality(shipAddress.adminArea2())\n+                    .addressStateRegion(shipAddress.adminArea1())\n+                    .addressPostalCode(shipAddress.postalCode())\n+                    .addressCountryCode(shipAddress.countryCode())\n+                    .addressPhone(phone)\n+                    .done();\n+        }\n+\n+        String itemTotal = getItemTotal(purchaseUnit);\n+        String shippingDiscount = getShippingDiscount(purchaseUnit);\n+        String shippingTotal = getShippingTotal(purchaseUnit);\n+        String totalTax = getTotalTax(purchaseUnit);\n+        AmountWithBreakdown amountWithBreakdown = purchaseUnit.amountWithBreakdown();\n+        org.broadleafcommerce.common.money.Money amount =\n+                new org.broadleafcommerce.common.money.Money(amountWithBreakdown.value(), amountWithBreakdown.currencyCode());\n+\n+        String[] customFields = purchaseUnit.customId().split(\"\\\\|\");\n+        responseDTO.amount(amount)\n+                .successful(true)\n+                .valid(true)\n+                .completeCheckoutOnCallback(Boolean.parseBoolean(customFields[1]))\n+                .responseMap(MessageConstants.DETAILSPAYMENTTRANSACTIONID, purchaseUnit.id())\n+                .responseMap(MessageConstants.DETAILSPAYMENTITEMTOTAL, itemTotal)\n+                .responseMap(MessageConstants.DETAILSPAYMENTSHIPPINGDISCOUNT,\n+                        shippingDiscount)\n+                .responseMap(MessageConstants.DETAILSPAYMENTSHIPPINGTOTAL, shippingTotal)\n+                .responseMap(MessageConstants.DETAILSPAYMENTTOTALTAX, totalTax);\n+\n+        Payer payer = order.payer();\n+\n+        if (payer != null) {\n+            responseDTO.customer()\n+                    .firstName(Optional.ofNullable(payer.name()).map(Name::givenName).orElse(\"\"))\n+                    .lastName(Optional.ofNullable(payer.name()).map(Name::surname).orElse(\"\"))\n+                    .phone(phone)\n+                    .email(payer.email())\n+                    .done();\n+        }\n+    }\n+\n+    @Nullable\n+    private String getItemTotal(PurchaseUnit purchaseUnit) {\n+        return Optional.of(purchaseUnit)\n+                .map(PurchaseUnit::amountWithBreakdown)\n+                .map(AmountWithBreakdown::amountBreakdown)\n+                .map(AmountBreakdown::itemTotal)\n+                .map(Money::value)\n+                .orElse(null);\n+    }\n+\n+    @Nullable\n+    private String getShippingDiscount(PurchaseUnit purchaseUnit) {\n+        return Optional.of(purchaseUnit)\n+                .map(PurchaseUnit::amountWithBreakdown)\n+                .map(AmountWithBreakdown::amountBreakdown)\n+                .map(AmountBreakdown::shippingDiscount)\n+                .map(Money::value)\n+                .orElse(null);\n+    }\n+\n+    @Nullable\n+    private String getShippingTotal(PurchaseUnit purchaseUnit) {\n+        return Optional.of(purchaseUnit)\n+                .map(PurchaseUnit::amountWithBreakdown)\n+                .map(AmountWithBreakdown::amountBreakdown)\n+                .map(AmountBreakdown::shipping)\n+                .map(Money::value)\n+                .orElse(null);\n+    }\n+\n+    @Nullable\n+    private String getTotalTax(PurchaseUnit purchaseUnit) {\n+        return Optional.of(purchaseUnit)\n+                .map(PurchaseUnit::amountWithBreakdown)\n+                .map(AmountWithBreakdown::amountBreakdown)\n+                .map(AmountBreakdown::taxTotal)\n+                .map(Money::value)\n+                .orElse(null);\n+    }\n }"
  },
  {
    "sha": "13af0580285fd5013cd4f10b990be20116f706d8",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutTransactionServiceImpl.java",
    "status": "modified",
    "additions": 312,
    "deletions": 406,
    "changes": 718,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutTransactionServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutTransactionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutTransactionServiceImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,57 +17,51 @@\n  */\n package org.broadleafcommerce.payment.service.gateway;\n \n+import com.paypal.http.HttpResponse;\n+import com.paypal.http.exceptions.HttpException;\n+import com.paypal.orders.AmountWithBreakdown;\n+import com.paypal.orders.Authorization;\n+import com.paypal.orders.Order;\n+import com.paypal.orders.PaymentCollection;\n+import com.paypal.orders.PurchaseUnit;\n+import com.paypal.payments.Capture;\n+import com.paypal.payments.CaptureRequest;\n+import com.paypal.payments.Money;\n+import com.paypal.payments.Refund;\n+import com.paypal.payments.RefundRequest;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.broadleafcommerce.common.money.Money;\n import org.broadleafcommerce.common.payment.PaymentTransactionType;\n import org.broadleafcommerce.common.payment.PaymentType;\n import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n import org.broadleafcommerce.common.payment.dto.PaymentResponseDTO;\n import org.broadleafcommerce.common.payment.service.AbstractPaymentGatewayTransactionService;\n import org.broadleafcommerce.common.payment.service.PaymentGatewayTransactionService;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n+import org.broadleafcommerce.vendor.paypal.service.PayPalClientProvider;\n+import org.broadleafcommerce.vendor.paypal.service.exception.PayPalRESTException;\n import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalAuthorizationRetrievalRequest;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalAuthorizationRetrievalResponse;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalAuthorizeRequest;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalAuthorizeResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureRetrievalRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureRetrievalResponse;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureAuthRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureAuthResponse;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureOrderRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCaptureOrderResponse;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCheckoutPaymentGatewayType;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreatePaymentRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreatePaymentResponse;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalErrorResponse;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalRefundRequest;\n import org.broadleafcommerce.vendor.paypal.service.payment.PayPalRefundResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalSaleRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalSaleResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalSaleRetrievalRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalSaleRetrievalResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalVoidRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalVoidResponse;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalVoidAuthRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalVoidAuthResponse;\n+import org.broadleafcommerce.vendor.paypal.service.util.PayPalUtils;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n-import com.paypal.api.payments.Amount;\n-import com.paypal.api.payments.Authorization;\n-import com.paypal.api.payments.Billing;\n-import com.paypal.api.payments.Capture;\n-import com.paypal.api.payments.DetailedRefund;\n-import com.paypal.api.payments.Error;\n-import com.paypal.api.payments.FundingInstrument;\n-import com.paypal.api.payments.ItemList;\n-import com.paypal.api.payments.Payer;\n-import com.paypal.api.payments.Payment;\n-import com.paypal.api.payments.PaymentExecution;\n-import com.paypal.api.payments.RefundRequest;\n-import com.paypal.api.payments.RelatedResources;\n-import com.paypal.api.payments.Sale;\n-import com.paypal.api.payments.Transaction;\n-import com.paypal.base.rest.PayPalRESTException;\n-import com.paypal.base.rest.PayPalResource;\n-import java.util.ArrayList;\n-import java.util.List;\n+\n import javax.annotation.Resource;\n+import java.util.Optional;\n \n /**\n  * @author Elbert Bautista (elbertbautista)\n@@ -80,450 +74,362 @@\n     @Resource(name = \"blExternalCallPayPalCheckoutService\")\n     protected ExternalCallPayPalCheckoutService payPalCheckoutService;\n \n-    @Override\n-    public PaymentResponseDTO authorize(PaymentRequestDTO paymentRequestDTO) throws PaymentException  {\n-        PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT, PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n+    @Resource(name = \"blPayPalClientProvider\")\n+    protected PayPalClientProvider clientProvider;\n \n-        try {\n-            PayPalResource auth = authorizePayment(paymentRequestDTO);\n-            if (auth instanceof Payment) {\n-                Payment payment = (Payment) auth;\n-                Transaction transaction = payment.getTransactions().get(0);\n-                if (transaction != null) {\n-                    Amount amount = transaction.getAmount();\n-                    responseDTO\n-                            .successful(true)\n-                            .rawResponse(payment.toJSON())\n-                            .paymentTransactionType(PaymentTransactionType.AUTHORIZE)\n-                            .responseMap(MessageConstants.AUTHORIZATONID, payment.getId())\n-                            .amount(new Money(amount.getTotal(), amount.getCurrency()));\n-                }\n-            } else {\n-                Authorization authorization = (Authorization) auth;\n-                responseDTO\n-                        .successful(true)\n-                        .rawResponse(authorization.toJSON())\n-                        .paymentTransactionType(PaymentTransactionType.AUTHORIZE)\n-                        .responseMap(MessageConstants.AUTHORIZATONID, authorization.getId())\n-                        .amount(new Money(authorization.getAmount().getTotal(), authorization.getAmount().getCurrency()));\n-            }\n-        } catch (PaymentException ex) {\n-            if (ex.getCause() instanceof PayPalRESTException) {\n-                PayPalRESTException restException = (PayPalRESTException) ex.getCause();\n-                responseDTO\n-                        .successful(false)\n-                        .rawResponse(restException.toString())\n-                        .paymentTransactionType(PaymentTransactionType.AUTHORIZE);\n-                populateErrorResponseMap(responseDTO, restException);\n-                return responseDTO;\n-            }\n-            throw ex;\n-        }\n-        return responseDTO;\n-    }\n+    @Resource(name = \"blPayPalUtils\")\n+    protected PayPalUtils utils;\n \n     @Override\n-    public PaymentResponseDTO capture(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT, PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n+    public PaymentResponseDTO authorize(PaymentRequestDTO paymentRequest) {\n+        PaymentResponseDTO paymentResponse = new PaymentResponseDTO(\n+                PaymentType.THIRD_PARTY_ACCOUNT,\n+                PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2)\n+                .paymentTransactionType(PaymentTransactionType.AUTHORIZE);\n \n         try {\n-            Authorization auth = getAuthorization(paymentRequestDTO);\n-            Capture capture = capturePayment(paymentRequestDTO, auth);\n-            responseDTO\n+            PayPalAuthorizeResponse response = authorizeOrder(paymentRequest);\n+            Authorization authorization = response.getAuthorization();\n+            org.broadleafcommerce.common.money.Money amount =\n+                    utils.convertOrdersMoneyToMoney(authorization.amount());\n+\n+            HttpResponse<Order> result = response.getResponse();\n+            paymentResponse\n                     .successful(true)\n-                    .rawResponse(capture.toJSON())\n-                    .paymentTransactionType(PaymentTransactionType.CAPTURE)\n-                    .responseMap(MessageConstants.CAPTUREID, capture.getId())\n-                    .amount(new Money(capture.getAmount().getTotal(), capture.getAmount().getCurrency()));\n-        } catch (PaymentException ex) {\n-            if (ex.getCause() instanceof PayPalRESTException) {\n-                PayPalRESTException restException = (PayPalRESTException) ex.getCause();\n-                responseDTO\n-                        .successful(false)\n-                        .rawResponse(restException.toString())\n-                        .paymentTransactionType(PaymentTransactionType.CAPTURE);\n-                populateErrorResponseMap(responseDTO, restException);\n-                return responseDTO;\n-            }\n-            throw ex;\n+                    .amount(amount)\n+                    .responseMap(MessageConstants.AUTHORIZATONID, authorization.id())\n+                    .rawResponse(utils.convertResponseToJson(result));\n+        } catch (Exception e) {\n+            processException(e, paymentResponse, paymentRequest);\n         }\n-        return responseDTO;\n+\n+        return paymentResponse;\n     }\n \n     @Override\n-    public PaymentResponseDTO authorizeAndCapture(PaymentRequestDTO paymentRequestDTO) throws PaymentException  {\n-        PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT, PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n+    public PaymentResponseDTO capture(PaymentRequestDTO paymentRequest) {\n+        PaymentResponseDTO paymentResponse =\n+                new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n+                        PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2)\n+                        .paymentTransactionType(PaymentTransactionType.CAPTURE);\n \n         try {\n-            PayPalResource sale = salePayment(paymentRequestDTO);\n-            if (sale instanceof Payment) {\n-                Payment payment = (Payment) sale;\n-                Transaction transaction = payment.getTransactions().get(0);\n-                Payer payer = payment.getPayer();\n-                if (transaction != null && payer != null) {\n-                    Amount amount = transaction.getAmount();\n-                    List<Transaction> transactions = payment.getTransactions();\n-                    String saleId = null;\n-                    if (transactions != null) {\n-                        for (Transaction tx : transactions) {\n-                            List<RelatedResources> relatedResources = tx.getRelatedResources();\n-                            if (relatedResources != null) {\n-                                for (RelatedResources rr : relatedResources) {\n-                                    if (rr.getSale() != null) {\n-                                        saleId = rr.getSale().getId();\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    String billingAgreementId = null;\n-                    if (payer.getFundingInstruments() != null) {\n-                        for (FundingInstrument fi : payer.getFundingInstruments()) {\n-                            if (fi.getBilling() != null) {\n-                                billingAgreementId = fi.getBilling().getBillingAgreementId();\n-                            }\n-                        }\n-                    }\n-\n-                    String payerEmail = null;\n-                    String payerFirstName = null;\n-                    String payerLastName = null;\n-                    if (payer.getPayerInfo() != null) {\n-                        payerEmail = payer.getPayerInfo().getEmail();\n-                        payerFirstName = payer.getPayerInfo().getFirstName();\n-                        payerLastName = payer.getPayerInfo().getLastName();\n-                    }\n-\n-                    responseDTO\n-                            .successful(true)\n-                            .rawResponse(payment.toJSON())\n-                            .paymentTransactionType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE)\n-                            .responseMap(MessageConstants.PAYMENTID, payment.getId())\n-                            .responseMap(MessageConstants.SALEID, saleId)\n-                            .responseMap(MessageConstants.BILLINGAGREEMENTID, billingAgreementId)\n-                            .responseMap(MessageConstants.PAYER_INFO_EMAIL, payerEmail)\n-                            .responseMap(MessageConstants.PAYER_INFO_FIRST_NAME, payerFirstName)\n-                            .responseMap(MessageConstants.PAYER_INFO_LAST_NAME, payerLastName)\n-                            .amount(new Money(amount.getTotal(), amount.getCurrency()));\n-                }\n-            } else {\n-                Sale s = (Sale) sale;\n-                responseDTO\n-                        .successful(true)\n-                        .rawResponse(sale.toJSON())\n-                        .paymentTransactionType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE)\n-                        .responseMap(MessageConstants.SALEID, s.getId())\n-                        .responseMap(MessageConstants.BILLINGAGREEMENTID, s.getBillingAgreementId())\n-                        .amount(new Money(s.getAmount().getTotal(), s.getAmount().getCurrency()));\n-            }\n-        } catch (PaymentException ex) {\n-            if (ex.getCause() instanceof PayPalRESTException) {\n-                PayPalRESTException restException = (PayPalRESTException) ex.getCause();\n-                responseDTO\n-                        .successful(false)\n-                        .rawResponse(restException.toString())\n-                        .paymentTransactionType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE);\n-                populateErrorResponseMap(responseDTO, restException);\n-                return responseDTO;\n-            }\n-            throw ex;\n+            PayPalCaptureAuthResponse response = captureAuthorization(paymentRequest);\n+            Capture capture = response.getContent();\n+            Money amount = capture.amount();\n+            org.broadleafcommerce.common.money.Money finalAmount = amount == null ?\n+                    new org.broadleafcommerce.common.money.Money(paymentRequest.getTransactionTotal(), paymentRequest.getOrderCurrencyCode()) :\n+                    utils.convertPaymentsMoneyToMoney(amount);\n+\n+            paymentResponse\n+                    .successful(true)\n+                    .rawResponse(utils.convertResponseToJson(response.getResponse()))\n+                    .responseMap(MessageConstants.CAPTUREID, capture.id())\n+                    .amount(finalAmount);\n+        } catch (PaymentException e) {\n+            processException(e, paymentResponse, paymentRequest);\n         }\n \n-        return responseDTO;\n+        return paymentResponse;\n     }\n \n     @Override\n-    public PaymentResponseDTO reverseAuthorize(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT, PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n+    public PaymentResponseDTO authorizeAndCapture(PaymentRequestDTO paymentRequest) {\n+        PaymentResponseDTO paymentResponse =\n+                new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n+                        PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2)\n+                        .paymentTransactionType(PaymentTransactionType.AUTHORIZE_AND_CAPTURE);\n \n         try {\n-            Authorization auth = getAuthorization(paymentRequestDTO);\n-            auth = voidAuthorization(auth, paymentRequestDTO);\n-            responseDTO\n+            PayPalCaptureOrderResponse response = captureOrder(paymentRequest);\n+            Order order = response.getContent();\n+            PurchaseUnit purchaseUnit = order.purchaseUnits().get(0);\n+            AmountWithBreakdown amountWithBreakdown = purchaseUnit.amountWithBreakdown();\n+            org.broadleafcommerce.common.money.Money finalAmount = amountWithBreakdown == null ?\n+                    new org.broadleafcommerce.common.money.Money(paymentRequest.getTransactionTotal(), paymentRequest.getOrderCurrencyCode()) :\n+                    utils.getMoneyForAmountWithBreakdown(amountWithBreakdown);\n+\n+            String captureId = Optional.ofNullable(purchaseUnit.payments())\n+                                .map(PaymentCollection::captures)\n+                                .map(captures -> captures.get(0))\n+                                .map(com.paypal.orders.Capture::id)\n+                                .orElse(\"\");\n+\n+            paymentResponse\n                     .successful(true)\n-                    .rawResponse(auth.toJSON())\n-                    .paymentTransactionType(PaymentTransactionType.REVERSE_AUTH)\n-                    .amount(new Money(auth.getAmount().getTotal(), auth.getAmount().getCurrency()));\n-        } catch (PaymentException ex) {\n-            if (ex.getCause() instanceof PayPalRESTException) {\n-                PayPalRESTException restException = (PayPalRESTException) ex.getCause();\n-                responseDTO\n-                        .successful(false)\n-                        .rawResponse(restException.toString())\n-                        .paymentTransactionType(PaymentTransactionType.REVERSE_AUTH);\n-                populateErrorResponseMap(responseDTO, restException);\n-                return responseDTO;\n-            }\n-            throw ex;\n+                    .rawResponse(utils.convertResponseToJson(response.getResponse()))\n+                    .responseMap(MessageConstants.CAPTUREID, captureId)\n+                    .amount(finalAmount);\n+        } catch (PaymentException e) {\n+            processException(e, paymentResponse, paymentRequest);\n         }\n \n-        return responseDTO;\n+        return paymentResponse;\n     }\n \n     @Override\n-    public PaymentResponseDTO refund(PaymentRequestDTO paymentRequestDTO) throws PaymentException  {\n-        PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT, PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n-\n-        try {\n-            Capture capture = null;\n-            Sale sale = null;\n-            if (getCaptureId(paymentRequestDTO) != null) {\n-                capture = getCapture(paymentRequestDTO);\n-            } else if (getSaleId(paymentRequestDTO) != null) {\n-                sale = getSale(paymentRequestDTO);\n-            }\n-\n-            if (capture != null) {\n-                DetailedRefund detailRefund = refundPayment(paymentRequestDTO, capture);\n-                responseDTO\n-                        .successful(true)\n-                        .rawResponse(detailRefund.toJSON())\n-                        .paymentTransactionType(PaymentTransactionType.REFUND)\n-                        .responseMap(MessageConstants.REFUNDID, detailRefund.getId())\n-                        .responseMap(MessageConstants.CAPTUREID, detailRefund.getCaptureId())\n-                        .amount(new Money(detailRefund.getAmount().getTotal(), detailRefund.getAmount().getCurrency()));\n-                return responseDTO;\n-            } else if (sale != null) {\n-                DetailedRefund detailRefund = refundPayment(paymentRequestDTO, sale);\n-                responseDTO\n-                        .successful(true)\n-                        .rawResponse(detailRefund.toJSON())\n-                        .paymentTransactionType(PaymentTransactionType.REFUND)\n-                        .responseMap(MessageConstants.REFUNDID, detailRefund.getId())\n-                        .responseMap(MessageConstants.SALEID, detailRefund.getSaleId())\n-                        .amount(new Money(detailRefund.getAmount().getTotal(), detailRefund.getAmount().getCurrency()));\n-                return responseDTO;\n-            }\n-        } catch (PaymentException ex) {\n-            if (ex.getCause() instanceof PayPalRESTException) {\n-                PayPalRESTException restException = (PayPalRESTException) ex.getCause();\n-                responseDTO\n-                        .successful(false)\n-                        .rawResponse(restException.toString())\n-                        .paymentTransactionType(PaymentTransactionType.REFUND);\n-                populateErrorResponseMap(responseDTO, restException);\n-                return responseDTO;\n-            }\n-            throw ex;\n-        }\n+    public PaymentResponseDTO reverseAuthorize(PaymentRequestDTO paymentRequest) {\n+        return voidAuthorization(paymentRequest, PaymentTransactionType.REVERSE_AUTH);\n+    }\n \n-        throw new PaymentException(\"Unable to perform refund. Unable to find corresponding capture or sale transaction.\");\n+    @Override\n+    public PaymentResponseDTO voidPayment(PaymentRequestDTO paymentRequest) {\n+        return voidAuthorization(paymentRequest, PaymentTransactionType.VOID);\n     }\n \n     @Override\n-    public PaymentResponseDTO voidPayment(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT, PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT);\n+    public PaymentResponseDTO refund(PaymentRequestDTO paymentRequest) {\n+        PaymentResponseDTO paymentResponse =\n+                new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n+                        PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2)\n+                        .paymentTransactionType(PaymentTransactionType.REFUND);\n+        String captureId = getCaptureId(paymentRequest);\n \n         try {\n-            Authorization auth = getAuthorization(paymentRequestDTO);\n-            auth = voidAuthorization(auth, paymentRequestDTO);\n-            responseDTO\n-                    .successful(true)\n-                    .rawResponse(auth.toJSON())\n-                    .paymentTransactionType(PaymentTransactionType.VOID)\n-                    .amount(new Money(auth.getAmount().getTotal(), auth.getAmount().getCurrency()));\n-        } catch (PaymentException ex) {\n-            if (ex.getCause() instanceof PayPalRESTException) {\n-                PayPalRESTException restException = (PayPalRESTException) ex.getCause();\n-                responseDTO\n-                        .successful(false)\n-                        .rawResponse(restException.toString())\n-                        .paymentTransactionType(PaymentTransactionType.VOID);\n-                populateErrorResponseMap(responseDTO, restException);\n-                return responseDTO;\n+            if (StringUtils.isBlank(captureId)) {\n+                throw new PaymentException(\n+                        \"Unable to perform refund. Unable to find corresponding capture transaction.\");\n             }\n-            throw ex;\n+            PayPalRefundResponse response = refundPayment(paymentRequest);\n+            Refund refund = response.getContent();\n+            Money amount = refund.amount();\n+            org.broadleafcommerce.common.money.Money finalAmount = amount == null ?\n+                    new org.broadleafcommerce.common.money.Money(paymentRequest.getTransactionTotal(), paymentRequest.getOrderCurrencyCode()) :\n+                    utils.convertPaymentsMoneyToMoney(amount);\n+\n+            paymentResponse\n+                    .successful(true)\n+                    .rawResponse(utils.convertResponseToJson(response.getResponse()))\n+                    .responseMap(MessageConstants.REFUNDID, refund.id())\n+                    .responseMap(MessageConstants.CAPTUREID, captureId)\n+                    .amount(finalAmount);\n+        } catch (PaymentException e) {\n+            processException(e, paymentResponse, paymentRequest);\n         }\n-        return responseDTO;\n-    }\n \n-    protected Capture capturePayment(PaymentRequestDTO paymentRequestDTO, Authorization auth) throws PaymentException {\n-        Capture capture = new Capture();\n-        capture.setIsFinalCapture(true);\n-        Amount amount = new Amount();\n-        amount.setCurrency(paymentRequestDTO.getOrderCurrencyCode());\n-        amount.setTotal(paymentRequestDTO.getTransactionTotal());\n-        capture.setAmount(amount);\n-        PayPalCaptureResponse captureResponse = (PayPalCaptureResponse) payPalCheckoutService.call(\n-                new PayPalCaptureRequest(auth, capture, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return captureResponse.getCapture();\n+        return paymentResponse;\n     }\n \n-    protected PayPalResource authorizePayment(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        Payment payment = new Payment();\n-        payment.setId(getPaymentId(paymentRequestDTO));\n-        payment.setTransactions(generateAuthorizeTransactions(paymentRequestDTO));\n-        PaymentExecution paymentExecution = new PaymentExecution();\n-        paymentExecution.setPayerId(getPayerId(paymentRequestDTO));\n-\n-        if (isBillingAgreementRequest(paymentRequestDTO)) {\n-            payment.setIntent(\"authorize\");\n-            payment.setPayer(generateAuthorizePayer(paymentRequestDTO));\n-            PayPalCreatePaymentResponse response = (PayPalCreatePaymentResponse) payPalCheckoutService.call(\n-                    new PayPalCreatePaymentRequest(payment, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-            return response.getPayment();\n+    protected PaymentResponseDTO voidAuthorization(PaymentRequestDTO paymentRequest,\n+                                                   PaymentTransactionType transactionType) {\n+        PaymentResponseDTO paymentResponse =\n+                new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n+                        PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT_V2)\n+                        .paymentTransactionType(transactionType);\n+        try {\n+            voidAuthorization(paymentRequest);\n+            PayPalAuthorizationRetrievalResponse response = retrieveAuthorization(paymentRequest);\n+            com.paypal.payments.Authorization auth = response.getContent();\n+            Money amount = auth.amount();\n+            org.broadleafcommerce.common.money.Money finalAmount = amount == null ?\n+                    new org.broadleafcommerce.common.money.Money(paymentRequest.getTransactionTotal(), paymentRequest.getOrderCurrencyCode()) :\n+                    utils.convertPaymentsMoneyToMoney(amount);\n+\n+            paymentResponse\n+                    .successful(true)\n+                    .amount(finalAmount)\n+                    .rawResponse(utils.convertResponseToJson(response.getResponse()));\n+        } catch (PaymentException e) {\n+            processException(e, paymentResponse, paymentRequest);\n         }\n \n-        PayPalAuthorizeResponse response = (PayPalAuthorizeResponse) payPalCheckoutService.call(\n-                new PayPalAuthorizeRequest(payment, paymentExecution, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return response.getAuthorization();\n+        return paymentResponse;\n     }\n \n-    protected Payer generateAuthorizePayer(PaymentRequestDTO paymentRequestDTO) {\n-        if (isBillingAgreementRequest(paymentRequestDTO)) {\n-            return generateBillingAgreementPayer(paymentRequestDTO);\n-        }\n+    /**\n+     * Executes a {@link PaymentTransactionType#CAPTURE} for the provided {@link Authorization}\n+     *\n+     * @param paymentRequest The request payload that should be used to form the transaction\n+     * @return a {@link PayPalCaptureAuthResponse}\n+     */\n+    protected PayPalCaptureAuthResponse captureAuthorization(\n+            PaymentRequestDTO paymentRequest) throws PaymentException {\n+        String authId = getAuthorizationId(paymentRequest);\n+        CaptureRequest capture = new CaptureRequest();\n+        // if null, then will capture the full amount\n+        Money amount = utils.convertToPaymentsMoney(paymentRequest.getTransactionTotal(), paymentRequest.getOrderCurrencyCode());\n+        capture.amount(amount);\n+\n+        PayPalCaptureAuthRequest captureRequest =\n+                new PayPalCaptureAuthRequest(clientProvider,\n+                        paymentRequest,\n+                        capture,\n+                        authId);\n+        return payPalCheckoutService.call(captureRequest, PayPalCaptureAuthResponse.class);\n+    }\n \n-        return null;\n+    /**\n+     * Executes an {@link PaymentTransactionType#AUTHORIZE} transaction based on the provided\n+     * {@link PaymentRequestDTO}\n+     *\n+     * @param paymentRequest The request payload that should be used to form the transaction\n+     * @return an {@link PayPalAuthorizeResponse} representing the final state of the transaction\n+     */\n+    protected PayPalAuthorizeResponse authorizeOrder(PaymentRequestDTO paymentRequest) throws PaymentException {\n+        String orderId = getOrderId(paymentRequest);\n+        PayPalAuthorizeRequest authorizeRequest =\n+                new PayPalAuthorizeRequest(clientProvider, paymentRequest, orderId);\n+        return payPalCheckoutService.call(authorizeRequest, PayPalAuthorizeResponse.class);\n     }\n \n-    protected boolean isBillingAgreementRequest(PaymentRequestDTO paymentRequestDTO) {\n-        return paymentRequestDTO.getAdditionalFields().containsKey(MessageConstants.BILLINGAGREEMENTID);\n+    protected PayPalAuthorizationRetrievalResponse retrieveAuthorization(PaymentRequestDTO paymentRequest) throws PaymentException {\n+        String authId = getAuthorizationId(paymentRequest);\n+        PayPalAuthorizationRetrievalRequest request =\n+                new PayPalAuthorizationRetrievalRequest(clientProvider, paymentRequest, authId);\n+        return payPalCheckoutService.call(request, PayPalAuthorizationRetrievalResponse.class);\n     }\n \n-    protected List<Transaction> generateAuthorizeTransactions(PaymentRequestDTO paymentRequestDTO) {\n-        return generateTransactions(paymentRequestDTO);\n+    /**\n+     * Executes an {@link PaymentTransactionType#AUTHORIZE_AND_CAPTURE} transaction based on the\n+     * provided {@link PaymentRequestDTO}. For PayPal, this captures the {@link Order} immediately with\n+     * no authorization.\n+     *\n+     * @param paymentRequest The request payload that should be used to form the transaction\n+     * @return a {@link PayPalCaptureOrderResponse}\n+     */\n+    protected PayPalCaptureOrderResponse captureOrder(PaymentRequestDTO paymentRequest) throws PaymentException {\n+        String orderId = getOrderId(paymentRequest);\n+        PayPalCaptureOrderRequest authorizeRequest =\n+                new PayPalCaptureOrderRequest(clientProvider,\n+                        paymentRequest,\n+                        orderId);\n+        return payPalCheckoutService.call(authorizeRequest, PayPalCaptureOrderResponse.class);\n     }\n \n-    protected List<Transaction> generateTransactions(PaymentRequestDTO paymentRequestDTO) {\n-        Amount amount = payPalCheckoutService.getPayPalAmountFromOrder(paymentRequestDTO);\n+    /**\n+     * Executes a {@link PaymentTransactionType#REVERSE_AUTH} for the provided\n+     * {@link Authorization} object. For PayPal, this means voiding the original authorization.\n+     *\n+     * @param paymentRequest The request payload that should be used to form the transaction\n+     * @return the {@link PayPalVoidAuthResponse}\n+     */\n+    protected PayPalVoidAuthResponse voidAuthorization(PaymentRequestDTO paymentRequest) throws PaymentException {\n+        String authId = getAuthorizationId(paymentRequest);\n+\n+        PayPalVoidAuthRequest voidRequest =\n+                new PayPalVoidAuthRequest(clientProvider, paymentRequest, authId);\n+        return payPalCheckoutService.call(voidRequest, PayPalVoidAuthResponse.class);\n+    }\n \n-        // Transaction information\n-        Transaction transaction = new Transaction();\n-        transaction.setAmount(amount);\n-        transaction.setDescription(payPalCheckoutService.getConfiguration().getPaymentDescription());\n-        transaction.setCustom(paymentRequestDTO.getOrderId());\n+    /**\n+     * Executes a {@link PaymentTransactionType#REFUND} for the captured payment.\n+     *\n+     * @param paymentRequest The request payload that should be used to form the transaction\n+     * @return a {@link PayPalRefundResponse}\n+     */\n+    protected PayPalRefundResponse refundPayment(PaymentRequestDTO paymentRequest) throws PaymentException {\n+        String captureId = getCaptureId(paymentRequest);\n+        RefundRequest refund = new RefundRequest();\n+        refund.amount(utils.convertToPaymentsMoney(paymentRequest.getTransactionTotal(), paymentRequest.getOrderCurrencyCode()));\n \n-        ItemList itemList = payPalCheckoutService.getPayPalItemListFromOrder(paymentRequestDTO, true);\n-        if (itemList != null) {\n-            transaction.setItemList(itemList);\n-        }\n+        PayPalRefundRequest refundRequest =\n+                new PayPalRefundRequest(clientProvider, paymentRequest, refund, captureId);\n+        return payPalCheckoutService.call(refundRequest, PayPalRefundResponse.class);\n+    }\n \n-        // Add transaction to a list\n-        List<Transaction> transactions = new ArrayList<>();\n-        transactions.add(transaction);\n-        return transactions;\n+    private String getOrderId(PaymentRequestDTO paymentRequest) {\n+        return (String) paymentRequest.getAdditionalFields().get(MessageConstants.ORDER_ID);\n     }\n \n-    protected PayPalResource salePayment(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        Payment payment = new Payment();\n-        payment.setId(getPaymentId(paymentRequestDTO));\n-        payment.setTransactions(generateSaleTransactions(paymentRequestDTO));\n-        PaymentExecution paymentExecution = new PaymentExecution();\n-        paymentExecution.setPayerId(getPayerId(paymentRequestDTO));\n-\n-        if (isBillingAgreementRequest(paymentRequestDTO)) {\n-            payment.setIntent(\"sale\");\n-            payment.setPayer(generateSalePayer(paymentRequestDTO));\n-            PayPalCreatePaymentResponse response = (PayPalCreatePaymentResponse) payPalCheckoutService.call(\n-                    new PayPalCreatePaymentRequest(payment, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-            return response.getPayment();\n-        }\n+    private String getAuthorizationId(PaymentRequestDTO paymentRequest) {\n+        return (String) paymentRequest.getAdditionalFields().get(MessageConstants.AUTHORIZATONID);\n+    }\n \n-        PayPalSaleResponse response = (PayPalSaleResponse) payPalCheckoutService.call(\n-                new PayPalSaleRequest(payment, paymentExecution, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return response.getSale();\n+    @Nullable\n+    private String getCaptureId(PaymentRequestDTO paymentRequest) {\n+        return (String) paymentRequest.getAdditionalFields().get(MessageConstants.CAPTUREID);\n     }\n \n-    protected Payer generateSalePayer(PaymentRequestDTO paymentRequestDTO) {\n-        if (isBillingAgreementRequest(paymentRequestDTO)) {\n-            return generateBillingAgreementPayer(paymentRequestDTO);\n+    /**\n+     * This method is responsible for levering the exception, paymentRequest, & transactionType to\n+     * populate the paymentResponse instead of allowing the exception to be thrown.\n+     *\n+     * @param e               the exception indicating a failed payment gateway transaction\n+     * @param paymentResponse the object that will hold the transaction results\n+     * @param paymentRequest  the request that was used to execute the transaction\n+     */\n+    protected void processException(Exception e,\n+                                    PaymentResponseDTO paymentResponse,\n+                                    PaymentRequestDTO paymentRequest) {\n+        paymentResponse.successful(false);\n+\n+        Throwable cause = e.getCause();\n+\n+        if (!(cause instanceof PayPalRESTException)) {\n+            LOG.error(e.getMessage(), e);\n+            return;\n         }\n \n-        return null;\n-    }\n+        PayPalRESTException restException = (PayPalRESTException) cause;\n+        HttpException httpException = (HttpException) restException.getCause();\n+        PayPalErrorResponse error = utils.convertFromErrorJson(httpException);\n+        String message = error.getMessage();\n+        String errorName = error.getName();\n+        int httpCode = httpException.statusCode();\n \n-    protected List<Transaction> generateSaleTransactions(PaymentRequestDTO paymentRequestDTO) {\n-        return generateTransactions(paymentRequestDTO);\n-    }\n+        paymentResponse.rawResponse(httpException.getMessage());\n+        paymentResponse.responseMap(MessageConstants.EXCEPTION_NAME, errorName);\n+        paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, error.getMessage());\n+        paymentResponse.responseMap(MessageConstants.EXCEPTION_DEBUG_ID, error.getDebugId());\n \n-    protected Payer generateBillingAgreementPayer(PaymentRequestDTO paymentRequestDTO) {\n-        Payer payer = new Payer();\n-        payer.setPaymentMethod(MessageConstants.PAYER_PAYMENTMETHOD_PAYPAL);\n-        List<FundingInstrument> fundingInstruments = new ArrayList<>();\n-        FundingInstrument billingAgreement = new FundingInstrument();\n-        Billing billing = new Billing();\n-        billing.setBillingAgreementId((String)paymentRequestDTO.getAdditionalFields().get(MessageConstants.BILLINGAGREEMENTID));\n-        billingAgreement.setBilling(billing);\n-        fundingInstruments.add(billingAgreement);\n-        payer.setFundingInstruments(fundingInstruments);\n-        return payer;\n-    }\n+        if (400 == httpCode) {\n+            String errorMessage = String.format(\n+                    \"An invalid request was supplied to PayPal's API. Exception message: %s\",\n+                    message);\n \n-    protected Authorization voidAuthorization(Authorization auth, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalVoidResponse response = (PayPalVoidResponse) payPalCheckoutService.call(\n-                new PayPalVoidRequest(auth, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return response.getVoidedAuthorization();\n-    }\n+            paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, errorMessage);\n \n-    protected DetailedRefund refundPayment(PaymentRequestDTO paymentRequestDTO, Capture capture) throws PaymentException {\n-        RefundRequest refund = new RefundRequest();\n-        Amount amount = new Amount();\n-        amount.setCurrency(paymentRequestDTO.getOrderCurrencyCode());\n-        amount.setTotal(paymentRequestDTO.getTransactionTotal());\n-        refund.setAmount(amount);\n-        PayPalRefundResponse response = (PayPalRefundResponse) payPalCheckoutService.call(\n-                new PayPalRefundRequest(refund, capture, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return response.getDetailedRefund();\n-    }\n+            LOG.error(\"An invalid request was supplied to PayPal's API\", e);\n+            return;\n+        }\n \n-    protected DetailedRefund refundPayment(PaymentRequestDTO paymentRequestDTO, Sale sale) throws PaymentException {\n-        RefundRequest refund = new RefundRequest();\n-        Amount amount = new Amount();\n-        amount.setCurrency(paymentRequestDTO.getOrderCurrencyCode());\n-        amount.setTotal(paymentRequestDTO.getTransactionTotal());\n-        refund.setAmount(amount);\n-        PayPalRefundResponse response = (PayPalRefundResponse) payPalCheckoutService.call(\n-                new PayPalRefundRequest(refund, sale, payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return response.getDetailedRefund();\n-    }\n+        if (401 == httpCode) {\n+            String errorMessage = String.format(\n+                    \"Authentication with PayPal's API failed. Maybe you changed client id or client secret recently. Exception message: %s\",\n+                    message);\n \n-    protected Authorization getAuthorization(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalAuthorizationRetrievalResponse authResponse = (PayPalAuthorizationRetrievalResponse) payPalCheckoutService.call(\n-                new PayPalAuthorizationRetrievalRequest(getAuthorizationId(paymentRequestDTO), payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return authResponse.getAuthorization();\n-    }\n+            paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, errorMessage);\n+            LOG.error(\n+                    \"Authentication with PayPal's API failed. Maybe you changed client id or client secret recently\",\n+                    e);\n \n-    protected Sale getSale(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalSaleRetrievalResponse saleResponse = (PayPalSaleRetrievalResponse) payPalCheckoutService.call(\n-                new PayPalSaleRetrievalRequest(getSaleId(paymentRequestDTO), payPalCheckoutService.constructAPIContext(paymentRequestDTO)));\n-        return saleResponse.getSale();\n-    }\n+            return;\n+        }\n \n-    protected Capture getCapture(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalCaptureRetrievalResponse response = (PayPalCaptureRetrievalResponse) payPalCheckoutService.call((\n-                new PayPalCaptureRetrievalRequest(getCaptureId(paymentRequestDTO), payPalCheckoutService.constructAPIContext(paymentRequestDTO))));\n-        return response.getCapture();\n-    }\n+        if (403 == httpCode) {\n+            String errorMessage = String.format(\n+                    \"PayPal authorization failed due to insufficient permissions.. Exception message: %s\",\n+                    message);\n \n-    protected String getPaymentId(PaymentRequestDTO paymentRequestDTO) {\n-        return (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.PAYMENTID);\n-    }\n+            paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, errorMessage);\n+            LOG.error(\"PayPal authorization failed due to insufficient permissions\", e);\n \n-    protected String getPayerId(PaymentRequestDTO paymentRequestDTO) {\n-        return (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.PAYERID);\n-    }\n+            return;\n+        }\n \n-    protected String getAuthorizationId(PaymentRequestDTO paymentRequestDTO) {\n-        return (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.AUTHORIZATONID);\n-    }\n+        if (408 == httpCode) {\n+            String errorMessage = String.format(\n+                    \"Network communication with Stripe failed. Exception message: %s\", message);\n \n-    protected String getSaleId(PaymentRequestDTO paymentRequestDTO) {\n-        return (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.SALEID);\n-    }\n-    \n-    protected String getCaptureId(PaymentRequestDTO paymentRequestDTO) {\n-        return (String) paymentRequestDTO.getAdditionalFields().get(MessageConstants.CAPTUREID);\n-    }\n+            paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, errorMessage);\n+            LOG.error(\"Network communication with Stripe failed\", e);\n+            return;\n+        }\n \n-    protected void populateErrorResponseMap(PaymentResponseDTO responseDTO, PayPalRESTException restException) {\n-        Error error = restException.getDetails();\n-        if (error != null) {\n-            responseDTO.responseMap(MessageConstants.EXCEPTION_NAME, error.getName())\n-                    .responseMap(MessageConstants.EXCEPTION_MESSAGE, error.getMessage())\n-                    .responseMap(MessageConstants.EXCEPTION_DEBUG_ID, error.getDebugId());\n+        if (429 == httpCode && \"RATE_LIMIT_REACHED\".equals(errorName)) {\n+            String errorMessage = String.format(\n+                    \"Too many requests made to the PayPal API too quickly. Exception message: %s\",\n+                    message);\n+\n+            paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, errorMessage);\n+            LOG.warn(\"Too many requests made to the PayPal API too quickly\", e);\n+            return;\n         }\n-    }\n \n+        String errorMessage = String.format(\n+                \"An invalid request was supplied to PayPal's API. Exception message: %s\", message);\n+\n+        paymentResponse.responseMap(MessageConstants.EXCEPTION_MESSAGE, errorMessage);\n+        LOG.error(\"An invalid request was supplied to PayPal's API\", e);\n+    }\n }"
  },
  {
    "sha": "058efef58e982a0c1c7e0e51af405a9ab1514ae9",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutWebResponseServiceImpl.java",
    "status": "modified",
    "additions": 5,
    "deletions": 75,
    "changes": 80,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutWebResponseServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutWebResponseServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalCheckoutWebResponseServiceImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,29 +17,20 @@\n  */\n package org.broadleafcommerce.payment.service.gateway;\n \n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.broadleafcommerce.common.money.Money;\n import org.broadleafcommerce.common.payment.PaymentTransactionType;\n-import org.broadleafcommerce.common.payment.PaymentType;\n import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n import org.broadleafcommerce.common.payment.dto.PaymentResponseDTO;\n import org.broadleafcommerce.common.payment.service.AbstractPaymentGatewayWebResponseService;\n import org.broadleafcommerce.common.payment.service.PaymentGatewayReportingService;\n import org.broadleafcommerce.common.payment.service.PaymentGatewayWebResponsePrintService;\n import org.broadleafcommerce.common.payment.service.PaymentGatewayWebResponseService;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import org.broadleafcommerce.vendor.paypal.api.AgreementToken;\n-import org.broadleafcommerce.vendor.paypal.service.PayPalAgreementTokenService;\n import org.broadleafcommerce.vendor.paypal.service.PayPalPaymentService;\n import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCheckoutPaymentGatewayType;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalExecuteAgreementTokenRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalExecuteAgreementTokenResponse;\n import org.springframework.stereotype.Service;\n+\n import javax.annotation.Resource;\n import javax.servlet.http.HttpServletRequest;\n \n@@ -63,82 +54,21 @@\n     @Resource(name = \"blPayPalPaymentService\")\n     protected PayPalPaymentService paymentService;\n \n-    @Resource(name = \"blPayPalAgreementTokenService\")\n-    protected PayPalAgreementTokenService agreementTokenService;\n-\n     @Override\n     public PaymentResponseDTO translateWebResponse(HttpServletRequest request) throws PaymentException {\n-        boolean completeCheckout = false;\n-        if (request.getParameter(MessageConstants.CHECKOUT_COMPLETE) != null) {\n-            completeCheckout = Boolean.valueOf(request.getParameter(MessageConstants.CHECKOUT_COMPLETE));\n-        }\n-\n-        String paymentId = request.getParameter(MessageConstants.HTTP_PAYMENTID);\n+        String orderId = request.getParameter(MessageConstants.HTTP_ORDER_ID);\n         String payerId = request.getParameter(MessageConstants.HTTP_PAYERID);\n-        String token = request.getParameter(MessageConstants.HTTP_TOKEN);\n-        String billingToken = request.getParameter(MessageConstants.HTTP_BILLINGTOKEN);\n-\n-        // 1. Handle Reference Transactions - Request that contain a \"Billing Agreement Token\" in the callback\n-        if (StringUtils.isNotBlank(billingToken)) {\n-            String billingAgreementId = agreementTokenService.getPayPalBillingAgreementIdFromCurrentOrder();\n-            PaymentRequestDTO requestDTO = agreementTokenService.getPaymentRequestForCurrentOrder();\n-\n-            if (StringUtils.isBlank(billingAgreementId)) {\n-                AgreementToken agreementToken = new AgreementToken(billingToken);\n-                agreementToken = executeAgreementToken(agreementToken, requestDTO);\n-\n-                PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n-                        PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT)\n-                        .paymentTransactionType(PaymentTransactionType.UNCONFIRMED);\n-                externalCallService.setCommonDetailsResponse(agreementToken, responseDTO, new Money(requestDTO.getTransactionTotal()),\n-                        requestDTO.getOrderId(), completeCheckout);\n-                responseDTO.responseMap(MessageConstants.BILLINGAGREEMENTID, agreementToken.getId());\n-\n-                LOG.info(\"ResponseDTO created: \" + ToStringBuilder.reflectionToString(responseDTO, ToStringStyle.MULTI_LINE_STYLE));\n-\n-                agreementTokenService.setPayPalAgreementTokenOnCurrentOrder(billingToken);\n-                agreementTokenService.setPayPalBillingAgreementIdOnCurrentOrder(agreementToken.getId());\n \n-                return responseDTO;\n-            } else {\n-                PaymentResponseDTO responseDTO = new PaymentResponseDTO(PaymentType.THIRD_PARTY_ACCOUNT,\n-                        PayPalCheckoutPaymentGatewayType.PAYPAL_CHECKOUT)\n-                        .paymentTransactionType(PaymentTransactionType.UNCONFIRMED);\n-                externalCallService.setCommonDetailsResponse(null, responseDTO, new Money(requestDTO.getTransactionTotal()),\n-                        requestDTO.getOrderId(), completeCheckout);\n-                responseDTO.responseMap(MessageConstants.BILLINGAGREEMENTID, billingAgreementId);\n-\n-                LOG.info(\"ResponseDTO created: \" + ToStringBuilder.reflectionToString(responseDTO, ToStringStyle.MULTI_LINE_STYLE));\n-\n-                return responseDTO;\n-            }\n-\n-        }\n-\n-        // 2. Handle Billing Agreement Approvals - Request that contain an EC \"token\" in the callback\n-        if (StringUtils.isNotBlank(token)) {\n-            throw new UnsupportedOperationException(\"Billing Agreements and Recurring Subscriptions \" +\n-                    \"created via the Payments API is not yet supported.\");\n-        }\n-\n-        // 3. Finally (if not a billing agreement flow), handle payments\n-        PaymentRequestDTO requestDTO = new PaymentRequestDTO()\n-                .additionalField(MessageConstants.HTTP_PAYMENTID, paymentId)\n+        PaymentRequestDTO requestDTO = paymentService.getPaymentRequestForCurrentOrder();\n+        requestDTO.additionalField(MessageConstants.HTTP_ORDER_ID, orderId)\n                 .additionalField(MessageConstants.HTTP_PAYERID, payerId);\n         PaymentResponseDTO responseDTO = reportingService.findDetailsByTransaction(requestDTO);\n \n         responseDTO.responseMap(MessageConstants.HTTP_REQUEST, webResponsePrintService.printRequest(request))\n                 .paymentTransactionType(PaymentTransactionType.UNCONFIRMED);\n \n-        paymentService.setPayPalPaymentIdOnCurrentOrder(paymentId);\n+        paymentService.setPayPalOrderIdOnCurrentOrder(orderId);\n         paymentService.setPayPalPayerIdOnCurrentOrder(payerId);\n         return responseDTO;\n     }\n-\n-    protected AgreementToken executeAgreementToken(AgreementToken agreementToken, PaymentRequestDTO requestDTO) throws PaymentException {\n-        PayPalExecuteAgreementTokenResponse response = (PayPalExecuteAgreementTokenResponse) externalCallService.call(\n-                new PayPalExecuteAgreementTokenRequest(agreementToken, externalCallService.constructAPIContext(requestDTO)));\n-        return response.getAgreementToken();\n-    }\n-\n }"
  },
  {
    "sha": "c71c6735a697c4bd4de0881332b67cd6306deb13",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionService.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionService.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionService.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,45 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- *\n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.payment.service.gateway;\n-\n-import org.broadleafcommerce.vendor.paypal.domain.ReportingTransactionResponse;\n-\n-import com.paypal.base.rest.PayPalRESTException;\n-\n-import java.util.Map;\n-\n-public interface PayPalSyncTransactionService {\n-\n-\n-    /**\n-     * <p>This returns all the matching transactions wrapped in the {@link ReportingTransactionResponse} based on the @param queryFilter</p>\n-     * <p>\n-     * The queryFilter mapping keys required are : </br></br>\n-     * &nbsp;<b>start_date</b> : Filters the transactions in the response by a start date and time. The date format required is, <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\">Internet date and time format</a>. Seconds are required. Fractional seconds are optional.</br>\n-     * &nbsp;<b>end_date</b> : Filters the transactions in the response by a start date and time. The date format required is, <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\">Internet date and time format</a>. Seconds are required. Fractional seconds are optional.</br>\n-     * &nbsp;<b>transaction_amount</b> : Filters the transactions in the response by a gross transaction amount range. Specify the range as <start-range> TO <end-range>.For example, to search for transactions from $5.00 to $10.05, specify [500 TO 1005].</br>\n-     * &nbsp;<b>page</b> : Page number derives the page to be retrieved from the returned result set.\n-     * </p>\n-     * @param queryFilter\n-     * @return\n-     * @throws PayPalRESTException\n-     */\n-    ReportingTransactionResponse lookupTransactionsByQueryParams(Map<String,String> queryFilter) throws PayPalRESTException;\n-\n-\n-}"
  },
  {
    "sha": "dc72660ab9e8d184b6cdbc3c3b6598b428508aeb",
    "filename": "src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 71,
    "changes": 71,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/payment/service/gateway/PayPalSyncTransactionServiceImpl.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,71 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- *\n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.payment.service.gateway;\n-\n-import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n-import org.broadleafcommerce.vendor.paypal.api.ReportingTransactions;\n-import org.broadleafcommerce.vendor.paypal.domain.ReportingTransactionResponse;\n-import org.broadleafcommerce.vendor.paypal.domain.TransactionInfo;\n-\n-import com.paypal.base.rest.APIContext;\n-import com.paypal.base.rest.PayPalRESTException;\n-\n-import java.util.Map;\n-\n-import javax.annotation.Resource;\n-\n-/**\n- * This takes the {@link PaymentRequestDTO} and calls the {@link ReportingTransactions#get(Map, APIContext)} to read all the\n- * {@link ReportingTransactionResponse} and then filters the results by matching the {@link TransactionInfo#getPaypal_reference_id()}\n- * and {@link TransactionInfo#getCustom_field()}\n- *\n- * Note: in the PayPal payload, the {@link TransactionInfo#getCustom_field()} is used to capture and custom info that we want.\n- * This class assumes that a BLC-produced transaction id is being sent to PayPal.\n- *\n- * @author venkat\n- *\n- */\n-public class PayPalSyncTransactionServiceImpl implements PayPalSyncTransactionService {\n-\n-    @Resource(name = \"blExternalCallPayPalCheckoutService\")\n-    protected ExternalCallPayPalCheckoutService payPalCheckoutService;\n-\n-    @Override\n-    public ReportingTransactionResponse lookupTransactionsByQueryParams(\n-            Map<String, String> queryFilter) throws PayPalRESTException {\n-        PaymentRequestDTO paymentRequestDTO = new PaymentRequestDTO();\n-        APIContext apiContext = payPalCheckoutService.constructAPIContext(paymentRequestDTO);\n-        return executeTransactionSearch(apiContext, queryFilter);\n-    }\n-\n-    /**\n-     * This calls the {@link ReportingTransactions#get(Map, APIContext)} to fetch the reporting transactions of type\n-     * {@link ReportingTransactions}\n-     * @param apiContext\n-     * @param queryParamsMap\n-     * @return\n-     * @throws PayPalRESTException\n-     */\n-    protected ReportingTransactionResponse executeTransactionSearch(APIContext apiContext,\n-                                                                    Map<String,String> queryParamsMap) throws PayPalRESTException {\n-        ReportingTransactions reportingTransactions = new ReportingTransactions();\n-\n-        return reportingTransactions.get(queryParamsMap, apiContext);\n-    }\n-\n-}"
  },
  {
    "sha": "d478986446a91d456faf2fd0273064a493c9419c",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/api/AgreementToken.java",
    "status": "removed",
    "additions": 0,
    "deletions": 229,
    "changes": 229,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/api/AgreementToken.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/api/AgreementToken.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/api/AgreementToken.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,229 +0,0 @@\n-/*\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2018 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.api;\n-\n-import com.paypal.api.payments.Address;\n-import com.paypal.api.payments.Links;\n-import com.paypal.api.payments.Payer;\n-import com.paypal.api.payments.Plan;\n-import com.paypal.base.rest.APIContext;\n-import com.paypal.base.rest.HttpMethod;\n-import com.paypal.base.rest.PayPalRESTException;\n-import com.paypal.base.rest.PayPalResource;\n-import java.util.List;\n-\n-/**\n- * The PayPal REST SDK does not currently contain support for\n- * Reference Transactions and Merchant Initiated Billing Agreements\n- *\n- * This was created to support the need to call the Billing Agreement Token endpoints\n- * See: https://developer.paypal.com/docs/limited-release/reference-transactions/#overview\n- */\n-public class AgreementToken extends PayPalResource {\n-\n-    /**\n-     * Identifier of the agreement.\n-     */\n-    private String id;\n-    /**\n-     * Description of the agreement.\n-     */\n-    private String description;\n-    /**\n-     * Details of the buyer who is enrolling in this agreement. This information is gathered from execution of the approval URL.\n-     */\n-    private Payer payer;\n-    /**\n-     * Plan details for this agreement.\n-     */\n-    private Plan plan;\n-    /**\n-     * Shipping address object of the agreement, which should be provided if it is different from the default address.\n-     */\n-    private Address shippingAddress;\n-    /**\n-     * Payment token\n-     */\n-    private String tokenId;\n-    private List<Links> links;\n-\n-    public AgreementToken() {\n-    }\n-\n-    public AgreementToken(String tokenId) {\n-        this.tokenId = tokenId;\n-    }\n-\n-    public AgreementToken(String description, Payer payer, Plan plan) {\n-        this.description = description;\n-        this.payer = payer;\n-        this.plan = plan;\n-    }\n-\n-    /**\n-     * Create a new billing agreement token by passing the details for the agreement, including the description, payer, and billing plan in the request JSON.\n-     * @param apiContext\n-     * {@link APIContext} used for the API call.\n-     * @return AgreementToken\n-     * @throws PayPalRESTException\n-     */\n-    public AgreementToken create(APIContext apiContext) throws PayPalRESTException {\n-        String resourcePath = \"v1/billing-agreements/agreement-tokens\";\n-        String payLoad = this.toJSON();\n-        AgreementToken agreementToken = (AgreementToken)configureAndExecute(apiContext, HttpMethod.POST, resourcePath, payLoad, AgreementToken.class);\n-        return agreementToken;\n-    }\n-\n-    /**\n-     * Execute a billing agreement after buyer approval by passing the payment token to the request URI.\n-     * @param apiContext\n-     * {@link APIContext} used for the API call.\n-     * @param tokenId\n-     * payment tokenId (e.g., BA-8A802366G0648845Y)\n-     * @return AgreementToken\n-     * @throws PayPalRESTException\n-     */\n-    public static AgreementToken execute(AgreementToken agreementToken, APIContext apiContext) throws PayPalRESTException {\n-        String resourcePath = \"v1/billing-agreements/agreements\";\n-        String payLoad = agreementToken.toJSON();\n-        return (AgreementToken)configureAndExecute(apiContext, HttpMethod.POST, resourcePath, payLoad, AgreementToken.class);\n-    }\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public AgreementToken setId(String id) {\n-        this.id = id;\n-        return this;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public AgreementToken setDescription(String description) {\n-        this.description = description;\n-        return this;\n-    }\n-\n-    public Payer getPayer() {\n-        return payer;\n-    }\n-\n-    public AgreementToken setPayer(Payer payer) {\n-        this.payer = payer;\n-        return this;\n-    }\n-\n-    public Plan getPlan() {\n-        return plan;\n-    }\n-\n-    public AgreementToken setPlan(Plan plan) {\n-        this.plan = plan;\n-        return this;\n-    }\n-\n-    public Address getShippingAddress() {\n-        return shippingAddress;\n-    }\n-\n-    public AgreementToken setShippingAddress(Address shippingAddress) {\n-        this.shippingAddress = shippingAddress;\n-        return this;\n-    }\n-\n-    public String getTokenId() {\n-        return tokenId;\n-    }\n-\n-    public AgreementToken setTokenId(String tokenId) {\n-        this.tokenId = tokenId;\n-        return this;\n-    }\n-\n-    public List<Links> getLinks() {\n-        return links;\n-    }\n-\n-    public AgreementToken setLinks(List<Links> links) {\n-        this.links = links;\n-        return this;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public boolean equals(final java.lang.Object o) {\n-        if (o == this) return true;\n-        if (!(o instanceof AgreementToken)) return false;\n-        final AgreementToken other = (AgreementToken) o;\n-        if (!other.canEqual((java.lang.Object) this)) return false;\n-        if (!super.equals(o)) return false;\n-        final java.lang.Object this$id = this.getId();\n-        final java.lang.Object other$id = other.getId();\n-        if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;\n-        final java.lang.Object this$description = this.getDescription();\n-        final java.lang.Object other$description = other.getDescription();\n-        if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;\n-        final java.lang.Object this$payer = this.getPayer();\n-        final java.lang.Object other$payer = other.getPayer();\n-        if (this$payer == null ? other$payer != null : !this$payer.equals(other$payer)) return false;\n-        final java.lang.Object this$shippingAddress = this.getShippingAddress();\n-        final java.lang.Object other$shippingAddress = other.getShippingAddress();\n-        if (this$shippingAddress == null ? other$shippingAddress != null : !this$shippingAddress.equals(other$shippingAddress)) return false;\n-        final java.lang.Object this$plan = this.getPlan();\n-        final java.lang.Object other$plan = other.getPlan();\n-        if (this$plan == null ? other$plan != null : !this$plan.equals(other$plan)) return false;\n-        final java.lang.Object this$tokenId = this.getTokenId();\n-        final java.lang.Object other$tokenId = other.getTokenId();\n-        if (this$tokenId == null ? other$tokenId != null : !this$tokenId.equals(other$tokenId)) return false;\n-        final java.lang.Object this$links = this.getLinks();\n-        final java.lang.Object other$links = other.getLinks();\n-        if (this$links == null ? other$links != null : !this$links.equals(other$links)) return false;\n-        return true;\n-    }\n-\n-    @java.lang.SuppressWarnings(\"all\")\n-    protected boolean canEqual(final java.lang.Object other) {\n-        return other instanceof AgreementToken;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public int hashCode() {\n-        final int PRIME = 59;\n-        int result = 1;\n-        result = result * PRIME + super.hashCode();\n-        final java.lang.Object $id = this.getId();\n-        result = result * PRIME + ($id == null ? 43 : $id.hashCode());\n-        final java.lang.Object $description = this.getDescription();\n-        result = result * PRIME + ($description == null ? 43 : $description.hashCode());\n-        final java.lang.Object $payer = this.getPayer();\n-        result = result * PRIME + ($payer == null ? 43 : $payer.hashCode());\n-        final java.lang.Object $shippingAddress = this.getShippingAddress();\n-        result = result * PRIME + ($shippingAddress == null ? 43 : $shippingAddress.hashCode());\n-        final java.lang.Object $plan = this.getPlan();\n-        result = result * PRIME + ($plan == null ? 43 : $plan.hashCode());\n-        final java.lang.Object $tokenId = this.getTokenId();\n-        result = result * PRIME + ($tokenId == null ? 43 : $tokenId.hashCode());\n-        final java.lang.Object $links = this.getLinks();\n-        result = result * PRIME + ($links == null ? 43 : $links.hashCode());\n-        return result;\n-    }\n-}"
  },
  {
    "sha": "e1ccd6ed9c200cc4e43eaceabbca80a9ede15855",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/api/ReportingTransactions.java",
    "status": "removed",
    "additions": 0,
    "deletions": 66,
    "changes": 66,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/api/ReportingTransactions.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/api/ReportingTransactions.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/api/ReportingTransactions.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,66 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.api;\n-\n-import org.broadleafcommerce.vendor.paypal.domain.ReportingTransactionResponse;\n-\n-import com.paypal.base.rest.APIContext;\n-import com.paypal.base.rest.HttpMethod;\n-import com.paypal.base.rest.PayPalRESTException;\n-import com.paypal.base.rest.PayPalResource;\n-import com.paypal.base.rest.RESTUtil;\n-\n-import java.util.Map;\n-\n-/**\n- * The PayPal REST SDK does not currently contain support for\n- * Reporting Transactions using the query parameters.\n- *\n- * This supports executing the PayPal Sync API Reporting Transactions\n- * Please refer to this https://developer.paypal.com/docs/api/sync/v1/\n- * @author venkat\n- *\n- */\n-public class ReportingTransactions extends PayPalResource{\n-\n-    public ReportingTransactions() {\n-\n-    }\n-\n-    /**\n-     * Execute a Reporting Transactions API by passing the required query parameters to the request URI.\n-     * @param queryParams\n-     * <p>\n-     * Following query parameters are used:\n-     * start_date, end_date and transaction_amount\n-     * </p>\n-     * @param apiContext\n-     * {@link APIContext} used for the API call.\n-     * @return\n-     * @throws PayPalRESTException\n-     */\n-    public  ReportingTransactionResponse get(Map<String,String> queryParams, APIContext apiContext) throws PayPalRESTException {\n-        String pattern = \"/v1/reporting/transactions\";\n-        String resourcePath = RESTUtil.formatURIPath(pattern, null, queryParams);\n-        String payLoad = \"\";\n-        return (ReportingTransactionResponse)configureAndExecute(apiContext, HttpMethod.GET, resourcePath, payLoad, ReportingTransactionResponse.class);\n-    }\n-\n-\n-\n-}"
  },
  {
    "sha": "46c207c0de0c4fff889d27a5dc7cb183dfb657a6",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/CartInfo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 24,
    "changes": 24,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/CartInfo.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/CartInfo.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/CartInfo.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,24 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-import com.paypal.base.rest.PayPalModel;\n-\n-public class CartInfo extends PayPalModel{\n-\n-}"
  },
  {
    "sha": "39f5468c4f2077017e31ed60a481f3c120f7f7fa",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/Money.java",
    "status": "removed",
    "additions": 0,
    "deletions": 79,
    "changes": 79,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/Money.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/Money.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/Money.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,79 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-public class Money {\n-\n-    private String currency_code;\n-\n-    private String value;\n-\n-    public String getCurrency_code() {\n-        return this.currency_code;\n-    }\n-\n-    public Money setCurrency_code(String currency_code) {\n-        this.currency_code = currency_code;\n-        return this;\n-    }\n-\n-    public String getValue() {\n-        return this.value;\n-    }\n-\n-    public Money setValue(String value) {\n-        this.value = value;\n-        return this;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public boolean equals(final java.lang.Object o) {\n-        if (o == this) return true;\n-        if (!(o instanceof Money)) return false;\n-        final Money other = (Money) o;\n-        if (!other.canEqual((java.lang.Object) this)) return false;\n-        if (!super.equals(o)) return false;\n-        final java.lang.Object this$currency_code = this.getCurrency_code();\n-        final java.lang.Object other$currency_code = other.getCurrency_code();\n-        if (this$currency_code == null ? other$currency_code != null : !this$currency_code.equals(other$currency_code)) return false;\n-        final java.lang.Object this$value = this.getValue();\n-        final java.lang.Object other$value = other.getValue();\n-        if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;\n-        return true;\n-    }\n-\n-    @java.lang.SuppressWarnings(\"all\")\n-    protected boolean canEqual(final java.lang.Object other) {\n-        return other instanceof Money;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public int hashCode() {\n-        final int PRIME = 59;\n-        int result = 1;\n-        result = result * PRIME + super.hashCode();\n-        final java.lang.Object $currency_code = this.getCurrency_code();\n-        result = result * PRIME + ($currency_code == null ? 43 : $currency_code.hashCode());\n-        final java.lang.Object $value = this.getValue();\n-        result = result * PRIME + ($value == null ? 43 : $value.hashCode());\n-        return result;\n-    }\n-\n-}"
  },
  {
    "sha": "dafd9104b226c4993f0908e5b2eb4f1a1745bdb0",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/Name.java",
    "status": "removed",
    "additions": 0,
    "deletions": 159,
    "changes": 159,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/Name.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/Name.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/Name.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,159 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-public class Name {\n-\n-    private String prefix;\n-\n-    private String given_name;\n-\n-    private String surname;\n-\n-    private String middle_name;\n-\n-    private String suffix;\n-\n-    private String alternate_full_name;\n-\n-    private String full_name;\n-\n-    public String getPrefix() {\n-        return this.prefix;\n-    }\n-\n-    public Name setPrefix(String prefix) {\n-        this.prefix = prefix;\n-        return this;\n-    }\n-\n-    public String getGiven_name() {\n-        return this.given_name;\n-    }\n-\n-    public Name setGiven_name(String given_name) {\n-        this.given_name = given_name;\n-        return this;\n-    }\n-\n-    public String getSurname() {\n-        return this.surname;\n-    }\n-\n-    public Name setSurname(String surname) {\n-        this.surname = surname;\n-        return this;\n-    }\n-\n-    public String getMiddle_name() {\n-        return this.middle_name;\n-    }\n-\n-    public Name setMiddle_name(String middle_name) {\n-        this.middle_name = middle_name;\n-        return this;\n-    }\n-\n-    public String getSuffix() {\n-        return this.suffix;\n-    }\n-\n-    public Name setSuffix(String suffix) {\n-        this.suffix = suffix;\n-        return this;\n-    }\n-\n-    public String getAlternate_full_name() {\n-        return this.alternate_full_name;\n-    }\n-\n-    public Name setAlternate_full_name(String alternate_full_name) {\n-        this.alternate_full_name = alternate_full_name;\n-        return this;\n-    }\n-\n-    public String getFull_name() {\n-        return this.full_name;\n-    }\n-\n-    public Name setFull_name(String full_name) {\n-        this.full_name = full_name;\n-        return this;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public boolean equals(final java.lang.Object o) {\n-        if (o == this) return true;\n-        if (!(o instanceof Name)) return false;\n-        final Name other = (Name) o;\n-        if (!other.canEqual((java.lang.Object) this)) return false;\n-        if (!super.equals(o)) return false;\n-        final java.lang.Object this$prefix = this.getPrefix();\n-        final java.lang.Object other$prefix = other.getPrefix();\n-        if (this$prefix == null ? other$prefix != null : !this$prefix.equals(other$prefix)) return false;\n-        final java.lang.Object this$given_name = this.getGiven_name();\n-        final java.lang.Object other$given_name = other.getGiven_name();\n-        if (this$given_name == null ? other$given_name != null : !this$given_name.equals(other$given_name)) return false;\n-        final java.lang.Object this$surname = this.getSurname();\n-        final java.lang.Object other$surname = other.getSurname();\n-        if (this$surname == null ? other$surname != null : !this$surname.equals(other$surname)) return false;\n-        final java.lang.Object this$middle_name = this.getMiddle_name();\n-        final java.lang.Object other$middle_name = other.getMiddle_name();\n-        if (this$middle_name == null ? other$middle_name != null : !this$middle_name.equals(other$middle_name)) return false;\n-        final java.lang.Object this$suffix = this.getSuffix();\n-        final java.lang.Object other$suffix = other.getSuffix();\n-        if (this$suffix == null ? other$suffix != null : !this$suffix.equals(other$suffix)) return false;\n-        final java.lang.Object this$alternate_full_name = this.getAlternate_full_name();\n-        final java.lang.Object other$alternate_full_name = other.getAlternate_full_name();\n-        if (this$alternate_full_name == null ? other$alternate_full_name != null : !this$alternate_full_name.equals(other$alternate_full_name)) return false;\n-        final java.lang.Object this$full_name = this.getFull_name();\n-        final java.lang.Object other$full_name = other.getFull_name();\n-        if (this$full_name == null ? other$full_name != null : !this$full_name.equals(other$full_name)) return false;\n-        return true;\n-    }\n-\n-    @java.lang.SuppressWarnings(\"all\")\n-    protected boolean canEqual(final java.lang.Object other) {\n-        return other instanceof Name;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public int hashCode() {\n-        final int PRIME = 59;\n-        int result = 1;\n-        result = result * PRIME + super.hashCode();\n-        final java.lang.Object $prefix = this.getPrefix();\n-        result = result * PRIME + ($prefix == null ? 43 : $prefix.hashCode());\n-        final java.lang.Object $given_name = this.getGiven_name();\n-        result = result * PRIME + ($given_name == null ? 43 : $given_name.hashCode());\n-        final java.lang.Object $surname = this.getSurname();\n-        result = result * PRIME + ($surname == null ? 43 : $surname.hashCode());\n-        final java.lang.Object $middle_name = this.getMiddle_name();\n-        result = result * PRIME + ($middle_name == null ? 43 : $middle_name.hashCode());\n-        final java.lang.Object $suffix = this.getSuffix();\n-        result = result * PRIME + ($suffix == null ? 43 : $suffix.hashCode());\n-        final java.lang.Object $alternate_full_name = this.getAlternate_full_name();\n-        result = result * PRIME + ($alternate_full_name == null ? 43 : $alternate_full_name.hashCode());\n-        final java.lang.Object $full_name = this.getFull_name();\n-        result = result * PRIME + ($full_name == null ? 43 : $full_name.hashCode());\n-        return result;\n-    }\n-\n-}"
  },
  {
    "sha": "c33e772e96d185f477e18ead363fcc270c5774f7",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/PayerInfo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 97,
    "changes": 97,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/PayerInfo.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/PayerInfo.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/PayerInfo.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,97 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- *\n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-import com.paypal.base.rest.PayPalModel;\n-\n-public class PayerInfo extends PayPalModel{\n-\n-    private String account_id;\n-\n-    private String email_address;\n-\n-    private Name payer_name;\n-\n-    public String getAccount_id() {\n-        return this.account_id;\n-    }\n-\n-    public PayerInfo setAccount_id(String account_id) {\n-        this.account_id = account_id;\n-        return this;\n-    }\n-\n-    public String getEmail_address() {\n-        return this.email_address;\n-    }\n-\n-    public PayerInfo setEmail_address(String email_address) {\n-        this.email_address = email_address;\n-        return this;\n-    }\n-\n-    public Name getPayer_name() {\n-        return this.payer_name;\n-    }\n-\n-    public PayerInfo setPayer_name(Name payer_name) {\n-        this.payer_name = payer_name;\n-        return this;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public boolean equals(final java.lang.Object o) {\n-        if (o == this) return true;\n-        if (!(o instanceof PayerInfo)) return false;\n-        final PayerInfo other = (PayerInfo) o;\n-        if (!other.canEqual((java.lang.Object) this)) return false;\n-        if (!super.equals(o)) return false;\n-        final java.lang.Object this$account_id = this.getAccount_id();\n-        final java.lang.Object other$account_id = other.getAccount_id();\n-        if (this$account_id == null ? other$account_id != null : !this$account_id.equals(other$account_id)) return false;\n-        final java.lang.Object this$email_address = this.getEmail_address();\n-        final java.lang.Object other$email_address = other.getEmail_address();\n-        if (this$email_address == null ? other$email_address != null : !this$email_address.equals(other$email_address)) return false;\n-        final java.lang.Object this$payer_name = this.getPayer_name();\n-        final java.lang.Object other$payer_name = other.getPayer_name();\n-        if (this$payer_name == null ? other$payer_name != null : !this$payer_name.equals(other$payer_name)) return false;\n-        return true;\n-    }\n-\n-    @java.lang.SuppressWarnings(\"all\")\n-    protected boolean canEqual(final java.lang.Object other) {\n-        return other instanceof PayerInfo;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public int hashCode() {\n-        final int PRIME = 59;\n-        int result = 1;\n-        result = result * PRIME + super.hashCode();\n-        final java.lang.Object $account_id = this.getAccount_id();\n-        result = result * PRIME + ($account_id == null ? 43 : $account_id.hashCode());\n-        final java.lang.Object $email_address = this.getEmail_address();\n-        result = result * PRIME + ($email_address == null ? 43 : $email_address.hashCode());\n-        final java.lang.Object $payer_name = this.getPayer_name();\n-        result = result * PRIME + ($payer_name == null ? 43 : $payer_name.hashCode());\n-        return result;\n-    }\n-\n-}"
  },
  {
    "sha": "9a29fec64c925043294994734b7339bb46b3a626",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/ReportingTransactionResponse.java",
    "status": "removed",
    "additions": 0,
    "deletions": 119,
    "changes": 119,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/ReportingTransactionResponse.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/ReportingTransactionResponse.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/ReportingTransactionResponse.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,119 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-import com.paypal.base.rest.PayPalModel;\n-\n-import java.util.List;\n-\n-public class ReportingTransactionResponse extends PayPalModel{\n-\n-    public ReportingTransactionResponse(){\n-\n-    }\n-\n-    private List<TransactionDetail> transaction_details;\n-\n-    private String account_number;\n-\n-    private String start_date;\n-\n-    private String end_date;\n-\n-    private String last_refreshed_datetime;\n-\n-    private Integer page;\n-\n-    private Integer total_items;\n-\n-    private Integer total_pages;\n-\n-    public List<TransactionDetail> getTransaction_details() {\n-        return this.transaction_details;\n-    }\n-\n-    public ReportingTransactionResponse setTransaction_details(List<TransactionDetail> transaction_details) {\n-        this.transaction_details = transaction_details;\n-        return this;\n-    }\n-\n-    public String getAccount_number() {\n-        return this.account_number;\n-    }\n-\n-    public ReportingTransactionResponse setAccount_number(String account_number) {\n-        this.account_number = account_number;\n-        return this;\n-    }\n-\n-    public String getStart_date() {\n-        return this.start_date;\n-    }\n-\n-    public ReportingTransactionResponse setStart_date(String start_date) {\n-        this.start_date = start_date;\n-        return this;\n-    }\n-\n-    public String getEnd_date() {\n-        return this.end_date;\n-    }\n-\n-    public ReportingTransactionResponse setEnd_date(String end_date) {\n-        this.end_date = end_date;\n-        return this;\n-    }\n-\n-    public String getLast_refreshed_datetime() {\n-        return this.last_refreshed_datetime;\n-    }\n-\n-    public ReportingTransactionResponse setLast_refreshed_datetime(String last_refreshed_datetime) {\n-        this.last_refreshed_datetime = last_refreshed_datetime;\n-        return this;\n-    }\n-\n-    public Integer getPage() {\n-        return this.page;\n-    }\n-\n-    public ReportingTransactionResponse setPage(Integer page) {\n-        this.page = page;\n-        return this;\n-    }\n-\n-    public Integer getTotal_items() {\n-        return this.total_items;\n-    }\n-\n-    public ReportingTransactionResponse setTotal_items(Integer total_items) {\n-        this.total_items = total_items;\n-        return this;\n-    }\n-\n-    public Integer getTotal_pages() {\n-        return this.total_pages;\n-    }\n-\n-    public ReportingTransactionResponse setTotal_pages(Integer total_pages) {\n-        this.total_pages = total_pages;\n-        return this;\n-    }\n-\n-\n-}"
  },
  {
    "sha": "b8faf4bf391ccf67861e7181b03a0dee7a57affb",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/ShippingInfo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 24,
    "changes": 24,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/ShippingInfo.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/ShippingInfo.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/ShippingInfo.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,24 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-import com.paypal.base.rest.PayPalModel;\n-\n-public class ShippingInfo extends PayPalModel {\n-\n-}"
  },
  {
    "sha": "e198ea4f1c6503cd8d1a95f847072593fde366cc",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionDetail.java",
    "status": "removed",
    "additions": 0,
    "deletions": 83,
    "changes": 83,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionDetail.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionDetail.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionDetail.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,83 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- *\n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-import com.paypal.base.rest.PayPalModel;\n-\n-public class TransactionDetail extends PayPalModel{\n-\n-    private TransactionInfo transaction_info;\n-\n-    private PayerInfo payer_info;\n-\n-    public PayerInfo getPayer_info() {\n-        return this.payer_info;\n-    }\n-\n-    public TransactionDetail setPayer_info(PayerInfo payer_info) {\n-        this.payer_info = payer_info;\n-        return this;\n-    }\n-\n-    public TransactionInfo getTransaction_info() {\n-        return this.transaction_info;\n-    }\n-\n-    public TransactionDetail setTransaction_info(TransactionInfo transaction_info) {\n-        this.transaction_info = transaction_info;\n-        return this;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public boolean equals(final java.lang.Object o) {\n-        if (o == this) return true;\n-        if (!(o instanceof TransactionDetail)) return false;\n-        final TransactionDetail other = (TransactionDetail) o;\n-        if (!other.canEqual((java.lang.Object) this)) return false;\n-        if (!super.equals(o)) return false;\n-        final java.lang.Object this$transaction_info = this.getTransaction_info();\n-        final java.lang.Object other$transaction_info = other.getTransaction_info();\n-        if (this$transaction_info == null ? other$transaction_info != null : !this$transaction_info.equals(other$transaction_info)) return false;\n-        final java.lang.Object this$payer_info = this.getPayer_info();\n-        final java.lang.Object other$payer_info = other.getPayer_info();\n-        if (this$payer_info == null ? other$payer_info != null : !this$payer_info.equals(other$payer_info)) return false;\n-        return true;\n-    }\n-\n-    @java.lang.SuppressWarnings(\"all\")\n-    protected boolean canEqual(final java.lang.Object other) {\n-        return other instanceof TransactionDetail;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public int hashCode() {\n-        final int PRIME = 59;\n-        int result = 1;\n-        result = result * PRIME + super.hashCode();\n-        final java.lang.Object $transaction_info = this.getTransaction_info();\n-        result = result * PRIME + ($transaction_info == null ? 43 : $transaction_info.hashCode());\n-        final java.lang.Object $payer_info = this.getPayer_info();\n-        result = result * PRIME + ($payer_info == null ? 43 : $payer_info.hashCode());\n-        return result;\n-    }\n-\n-\n-\n-}"
  },
  {
    "sha": "b95c726ac944cdb40838679e208f86c802367d5c",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionInfo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 258,
    "changes": 258,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionInfo.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionInfo.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/domain/TransactionInfo.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,258 +0,0 @@\n-/*-\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2019 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.domain;\n-\n-\n-import com.paypal.base.rest.PayPalModel;\n-\n-public class TransactionInfo extends PayPalModel{\n-\n-    private String paypal_account_id;\n-\n-    private String transaction_id;\n-\n-    private String paypal_reference_id;\n-\n-    private String paypal_reference_id_type;\n-\n-    private String transaction_event_code;\n-\n-    private String transaction_initiation_date;\n-\n-    private String transaction_updated_date;\n-\n-    private Money transaction_amount;\n-\n-    private String transaction_status;\n-\n-    private String transaction_subject;\n-\n-    private String transaction_note;\n-\n-    private String payment_tracking_id;\n-\n-    private String custom_field;\n-\n-    public String getPaypal_account_id() {\n-        return this.paypal_account_id;\n-    }\n-\n-    public TransactionInfo setPaypal_account_id(String paypal_account_id) {\n-        this.paypal_account_id = paypal_account_id;\n-        return this;\n-    }\n-\n-    public String getTransaction_id() {\n-        return this.transaction_id;\n-    }\n-\n-    public TransactionInfo setTransaction_id(String transaction_id) {\n-        this.transaction_id = transaction_id;\n-        return this;\n-    }\n-\n-    public String getPaypal_reference_id() {\n-        return this.paypal_reference_id;\n-    }\n-\n-    public TransactionInfo setPaypal_reference_id(String paypal_reference_id) {\n-        this.paypal_reference_id = paypal_reference_id;\n-        return this;\n-    }\n-\n-    public String getPaypal_reference_id_type() {\n-        return this.paypal_reference_id_type;\n-    }\n-\n-    public TransactionInfo setPaypal_reference_id_type(String paypal_reference_id_type) {\n-        this.paypal_reference_id_type = paypal_reference_id_type;\n-        return this;\n-    }\n-\n-    public String getTransaction_event_code() {\n-        return this.transaction_event_code;\n-    }\n-\n-    public TransactionInfo setTransaction_event_code(String transaction_event_code) {\n-        this.transaction_event_code = transaction_event_code;\n-        return this;\n-    }\n-\n-    public String getTransaction_initiation_date() {\n-        return this.transaction_initiation_date;\n-    }\n-\n-    public TransactionInfo setTransaction_initiation_date(String transaction_initiation_date) {\n-        this.transaction_initiation_date = transaction_initiation_date;\n-        return this;\n-    }\n-\n-    public String getTransaction_updated_date() {\n-        return this.transaction_updated_date;\n-    }\n-\n-    public TransactionInfo setTransaction_updated_date(String transaction_updated_date) {\n-        this.transaction_updated_date = transaction_updated_date;\n-        return this;\n-    }\n-\n-    public Money getTransaction_amount() {\n-        return this.transaction_amount;\n-    }\n-\n-    public TransactionInfo setTransaction_amount(Money transaction_amount) {\n-        this.transaction_amount = transaction_amount;\n-        return this;\n-    }\n-\n-    public String getTransaction_status() {\n-        return this.transaction_status;\n-    }\n-\n-    public TransactionInfo setTransaction_status(String transaction_status) {\n-        this.transaction_status = transaction_status;\n-        return this;\n-    }\n-\n-    public String getTransaction_subject() {\n-        return this.transaction_subject;\n-    }\n-\n-    public TransactionInfo setTransaction_subject(String transaction_subject) {\n-        this.transaction_subject = transaction_subject;\n-        return this;\n-    }\n-\n-    public String getTransaction_note() {\n-        return this.transaction_note;\n-    }\n-\n-    public TransactionInfo setTransaction_note(String transaction_note) {\n-        this.transaction_note = transaction_note;\n-        return this;\n-    }\n-\n-    public String getPayment_tracking_id() {\n-        return this.payment_tracking_id;\n-    }\n-\n-    public TransactionInfo setPayment_tracking_id(String payment_tracking_id) {\n-        this.payment_tracking_id = payment_tracking_id;\n-        return this;\n-    }\n-\n-    public String getCustom_field() {\n-        return this.custom_field;\n-    }\n-\n-    public TransactionInfo setCustom_field(String custom_field) {\n-        this.custom_field = custom_field;\n-        return this;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public boolean equals(final java.lang.Object o) {\n-        if (o == this) return true;\n-        if (!(o instanceof TransactionInfo)) return false;\n-        final TransactionInfo other = (TransactionInfo) o;\n-        if (!other.canEqual((java.lang.Object) this)) return false;\n-        if (!super.equals(o)) return false;\n-        final java.lang.Object this$paypal_account_id = this.getPaypal_account_id();\n-        final java.lang.Object other$paypal_account_id = other.getPaypal_account_id();\n-        if (this$paypal_account_id == null ? other$paypal_account_id != null : !this$paypal_account_id.equals(other$paypal_account_id)) return false;\n-        final java.lang.Object this$transaction_id = this.getTransaction_id();\n-        final java.lang.Object other$transaction_id = other.getTransaction_id();\n-        if (this$transaction_id == null ? other$transaction_id != null : !this$transaction_id.equals(other$transaction_id)) return false;\n-        final java.lang.Object this$paypal_reference_id = this.getPaypal_reference_id();\n-        final java.lang.Object other$paypal_reference_id = other.getPaypal_reference_id();\n-        if (this$paypal_reference_id == null ? other$paypal_reference_id != null : !this$paypal_reference_id.equals(other$paypal_reference_id)) return false;\n-        final java.lang.Object this$paypal_reference_id_type = this.getPaypal_reference_id_type();\n-        final java.lang.Object other$paypal_reference_id_type = other.getPaypal_reference_id_type();\n-        if (this$paypal_reference_id_type == null ? other$paypal_reference_id_type != null : !this$paypal_reference_id_type.equals(other$paypal_reference_id_type)) return false;\n-        final java.lang.Object this$transaction_event_code = this.getTransaction_event_code();\n-        final java.lang.Object other$transaction_event_code = other.getTransaction_event_code();\n-        if (this$transaction_event_code == null ? other$transaction_event_code != null : !this$transaction_event_code.equals(other$transaction_event_code)) return false;\n-        final java.lang.Object this$transaction_initiation_date = this.getTransaction_initiation_date();\n-        final java.lang.Object other$transaction_initiation_date = other.getTransaction_initiation_date();\n-        if (this$transaction_initiation_date == null ? other$transaction_initiation_date != null : !this$transaction_initiation_date.equals(other$transaction_initiation_date)) return false;\n-        final java.lang.Object this$transaction_updated_date = this.getTransaction_updated_date();\n-        final java.lang.Object other$transaction_updated_date = other.getTransaction_updated_date();\n-        if (this$transaction_updated_date == null ? other$transaction_updated_date != null : !this$transaction_updated_date.equals(other$transaction_updated_date)) return false;\n-        final java.lang.Object this$transaction_amount = this.getTransaction_amount();\n-        final java.lang.Object other$transaction_amount = other.getTransaction_amount();\n-        if (this$transaction_amount == null ? other$transaction_amount != null : !this$transaction_amount.equals(other$transaction_amount)) return false;\n-        final java.lang.Object this$transaction_status = this.getTransaction_status();\n-        final java.lang.Object other$transaction_status = other.getTransaction_status();\n-        if (this$transaction_status == null ? other$transaction_status != null : !this$transaction_status.equals(other$transaction_status)) return false;\n-        final java.lang.Object this$transaction_subject = this.getTransaction_subject();\n-        final java.lang.Object other$transaction_subject = other.getTransaction_subject();\n-        if (this$transaction_subject == null ? other$transaction_subject != null : !this$transaction_subject.equals(other$transaction_subject)) return false;\n-        final java.lang.Object this$transaction_note = this.getTransaction_note();\n-        final java.lang.Object other$transaction_note = other.getTransaction_note();\n-        if (this$transaction_note == null ? other$transaction_note != null : !this$transaction_note.equals(other$transaction_note)) return false;\n-        final java.lang.Object this$payment_tracking_id = this.getPayment_tracking_id();\n-        final java.lang.Object other$payment_tracking_id = other.getPayment_tracking_id();\n-        if (this$payment_tracking_id == null ? other$payment_tracking_id != null : !this$payment_tracking_id.equals(other$payment_tracking_id)) return false;\n-        final java.lang.Object this$custom_field = this.getCustom_field();\n-        final java.lang.Object other$custom_field = other.getCustom_field();\n-        if (this$custom_field == null ? other$custom_field != null : !this$custom_field.equals(other$custom_field)) return false;\n-        return true;\n-    }\n-\n-    @java.lang.SuppressWarnings(\"all\")\n-    protected boolean canEqual(final java.lang.Object other) {\n-        return other instanceof TransactionInfo;\n-    }\n-\n-    @java.lang.Override\n-    @java.lang.SuppressWarnings(\"all\")\n-    public int hashCode() {\n-        final int PRIME = 59;\n-        int result = 1;\n-        result = result * PRIME + super.hashCode();\n-        final java.lang.Object $paypal_account_id = this.getPaypal_account_id();\n-        result = result * PRIME + ($paypal_account_id == null ? 43 : $paypal_account_id.hashCode());\n-        final java.lang.Object $transaction_id = this.getTransaction_id();\n-        result = result * PRIME + ($transaction_id == null ? 43 : $transaction_id.hashCode());\n-        final java.lang.Object $paypal_reference_id = this.getPaypal_reference_id();\n-        result = result * PRIME + ($paypal_reference_id == null ? 43 : $paypal_reference_id.hashCode());\n-        final java.lang.Object $paypal_reference_id_type = this.getPaypal_reference_id_type();\n-        result = result * PRIME + ($paypal_reference_id_type == null ? 43 : $paypal_reference_id_type.hashCode());\n-        final java.lang.Object $transaction_event_code = this.getTransaction_event_code();\n-        result = result * PRIME + ($transaction_event_code == null ? 43 : $transaction_event_code.hashCode());\n-        final java.lang.Object $transaction_initiation_date = this.getTransaction_initiation_date();\n-        result = result * PRIME + ($transaction_initiation_date == null ? 43 : $transaction_initiation_date.hashCode());\n-        final java.lang.Object $transaction_updated_date = this.getTransaction_updated_date();\n-        result = result * PRIME + ($transaction_updated_date == null ? 43 : $transaction_updated_date.hashCode());\n-        final java.lang.Object $transaction_amount = this.getTransaction_amount();\n-        result = result * PRIME + ($transaction_amount == null ? 43 : $transaction_amount.hashCode());\n-        final java.lang.Object $transaction_status = this.getTransaction_status();\n-        result = result * PRIME + ($transaction_status == null ? 43 : $transaction_status.hashCode());\n-        final java.lang.Object $transaction_subject = this.getTransaction_subject();\n-        result = result * PRIME + ($transaction_subject == null ? 43 : $transaction_subject.hashCode());\n-        final java.lang.Object $transaction_note = this.getTransaction_note();\n-        result = result * PRIME + ($transaction_note == null ? 43 : $transaction_note.hashCode());\n-        final java.lang.Object $payment_tracking_id = this.getPayment_tracking_id();\n-        result = result * PRIME + ($payment_tracking_id == null ? 43 : $payment_tracking_id.hashCode());\n-        final java.lang.Object $custom_field = this.getCustom_field();\n-        result = result * PRIME + ($custom_field == null ? 43 : $custom_field.hashCode());\n-        return result;\n-    }\n-\n-}"
  },
  {
    "sha": "86f856f30f6d206997570754fc01f06ecc74c731",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 36,
    "changes": 36,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenService.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenService.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenService.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,36 +0,0 @@\n-/*\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2018 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.service;\n-\n-import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n-import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import org.broadleafcommerce.vendor.paypal.api.AgreementToken;\n-\n-public interface PayPalAgreementTokenService {\n-    AgreementToken createPayPalAgreementTokenForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException;\n-\n-    PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentException;\n-\n-    String getPayPalBillingAgreementIdFromCurrentOrder() throws PaymentException;\n-\n-    void setPayPalBillingAgreementIdOnCurrentOrder(String billingAgreementId) throws PaymentException;\n-\n-    String getPayPalAgreementTokenFromCurrentOrder() throws PaymentException;\n-\n-    void setPayPalAgreementTokenOnCurrentOrder(String agreementToken) throws PaymentException;\n-}"
  },
  {
    "sha": "de31977a36c3363d7d6cc86b661d89feae9ac463",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 146,
    "changes": 146,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalAgreementTokenServiceImpl.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,146 +0,0 @@\n-/*\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2018 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.service;\n-\n-import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n-import org.broadleafcommerce.common.payment.service.CurrentOrderPaymentRequestService;\n-import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import org.broadleafcommerce.payment.service.gateway.ExternalCallPayPalCheckoutService;\n-import org.broadleafcommerce.vendor.paypal.api.AgreementToken;\n-import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreateAgreementTokenRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreateAgreementTokenResponse;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import com.paypal.api.payments.MerchantPreferences;\n-import com.paypal.api.payments.Payer;\n-import com.paypal.api.payments.Plan;\n-import javax.annotation.Resource;\n-\n-@Service(\"blPayPalAgreementTokenService\")\n-public class PayPalAgreementTokenServiceImpl implements PayPalAgreementTokenService {\n-\n-    @Resource(name = \"blExternalCallPayPalCheckoutService\")\n-    protected ExternalCallPayPalCheckoutService externalCallService;\n-\n-    @Resource(name = \"blPayPalWebProfileService\")\n-    protected PayPalWebProfileService webProfileService;\n-\n-    @Autowired(required = false)\n-    protected CurrentOrderPaymentRequestService currentOrderPaymentRequestService;\n-\n-    /**\n-     * To support PayPal Reference Transactions and Billing Agreement Tokens\n-     * {@see https://developer.paypal.com/docs/limited-release/reference-transactions}\n-     *\n-     * @param performCheckoutOnReturn\n-     * @return\n-     * @throws PaymentException\n-     */\n-    @Override\n-    public AgreementToken createPayPalAgreementTokenForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException {\n-        PaymentRequestDTO paymentRequestDTO = getPaymentRequestForCurrentOrder();\n-\n-        // Create Agreement Token\n-        String agreementDescription = constructAgreementDescription(paymentRequestDTO);\n-        Payer payer = constructPayer(paymentRequestDTO);\n-        Plan plan = constructPlan(paymentRequestDTO, performCheckoutOnReturn);\n-        AgreementToken agreementToken = new AgreementToken(agreementDescription, payer, plan);\n-        return createAgreementToken(agreementToken, paymentRequestDTO);\n-    }\n-\n-    protected Plan constructPlan(PaymentRequestDTO paymentRequestDTO, boolean performCheckoutOnReturn) {\n-        Plan plan = new Plan();\n-        plan.setType(MessageConstants.PLAN_TYPE_MERCHANTINITIATEDBILLING);\n-\n-        // Set up merchant preferences\n-        MerchantPreferences merchantPreferences = new MerchantPreferences();\n-        merchantPreferences.setCancelUrl(externalCallService.getConfiguration().getCancelUrl());\n-        String returnUrl = externalCallService.getConfiguration().getReturnUrl();\n-        if (performCheckoutOnReturn) {\n-            returnUrl += \"?\" + MessageConstants.CHECKOUT_COMPLETE + \"=true\";\n-        }\n-        merchantPreferences.setReturnUrl(returnUrl);\n-        merchantPreferences.setAcceptedPaymentType(MessageConstants.MERCHANTPREF_ACCEPTEDPAYMENTTYPE_INSTANT);\n-        plan.setMerchantPreferences(merchantPreferences);\n-        return plan;\n-    }\n-\n-    protected Payer constructPayer(PaymentRequestDTO paymentRequestDTO) {\n-        Payer payer = new Payer();\n-        payer.setPaymentMethod(MessageConstants.PAYER_PAYMENTMETHOD_PAYPAL);\n-        return payer;\n-    }\n-\n-    protected AgreementToken createAgreementToken(AgreementToken agreementToken, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalCreateAgreementTokenResponse response = (PayPalCreateAgreementTokenResponse) externalCallService.call(\n-                new PayPalCreateAgreementTokenRequest(agreementToken,\n-                        externalCallService.constructAPIContext(paymentRequestDTO)));\n-        return response.getAgreementToken();\n-    }\n-\n-    protected String constructAgreementDescription(PaymentRequestDTO paymentRequestDTO) {\n-        return externalCallService.getConfiguration().getPaymentDescription();\n-    }\n-\n-    @Override\n-    public PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            return currentOrderPaymentRequestService.getPaymentRequestFromCurrentOrder();\n-        } else {\n-            throw new PaymentException(\"Unable to get PaymentRequestDTO for current order\");\n-        }\n-    }\n-\n-    @Override\n-    public String getPayPalBillingAgreementIdFromCurrentOrder() throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            return currentOrderPaymentRequestService.retrieveOrderAttributeFromCurrentOrder(MessageConstants.BILLINGAGREEMENTID);\n-        } else {\n-            throw new PaymentException(\"Unable to retrieve PayPal Billing Agreement ID for current order\");\n-        }\n-    }\n-\n-    @Override\n-    public void setPayPalBillingAgreementIdOnCurrentOrder(String billingAgreementId) throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            currentOrderPaymentRequestService.addOrderAttributeToCurrentOrder(MessageConstants.BILLINGAGREEMENTID, billingAgreementId);\n-        } else {\n-            throw new PaymentException(\"Unable to set PayPal Billing Agreement ID on current order\");\n-        }\n-    }\n-\n-    @Override\n-    public String getPayPalAgreementTokenFromCurrentOrder() throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            return currentOrderPaymentRequestService.retrieveOrderAttributeFromCurrentOrder(MessageConstants.AGREEMENTTOKENID);\n-        } else {\n-            throw new PaymentException(\"Unable to retrieve PayPal Agreement Token for current order\");\n-        }\n-    }\n-\n-    @Override\n-    public void setPayPalAgreementTokenOnCurrentOrder(String agreementToken) throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            currentOrderPaymentRequestService.addOrderAttributeToCurrentOrder(MessageConstants.AGREEMENTTOKENID, agreementToken);\n-        } else {\n-            throw new PaymentException(\"Unable to set PayPal Agreement token on current order\");\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "aac7142837962160ef7f552bbb72fe442bdbe997",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementService.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementService.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementService.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,30 +0,0 @@\n-/*\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2018 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.service;\n-\n-import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import com.paypal.api.payments.Agreement;\n-\n-public interface PayPalBillingAgreementService {\n-\n-    Agreement createPayPalBillingAgreementForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException;\n-\n-    String getPayPalBillingTokenFromCurrentOrder() throws PaymentException;\n-\n-    void setPayPalBillingTokenOnCurrentOrder(String billingToken) throws PaymentException;\n-}"
  },
  {
    "sha": "c4a0847f18c84bf816c893e6eebc2717ab9aed64",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementServiceImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 190,
    "changes": 190,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/90ae222ea02322890d1c6dd11de1034e06ffb209/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalBillingAgreementServiceImpl.java?ref=90ae222ea02322890d1c6dd11de1034e06ffb209",
    "patch": "@@ -1,190 +0,0 @@\n-/*\n- * #%L\n- * BroadleafCommerce PayPal\n- * %%\n- * Copyright (C) 2009 - 2018 Broadleaf Commerce\n- * %%\n- * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n- * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n- * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n- * the Broadleaf End User License Agreement (EULA), Version 1.1\n- * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n- * shall apply.\n- * \n- * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n- * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n- * #L%\n- */\n-package org.broadleafcommerce.vendor.paypal.service;\n-\n-import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n-import org.broadleafcommerce.common.payment.service.CurrentOrderPaymentRequestService;\n-import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n-import org.broadleafcommerce.payment.service.gateway.ExternalCallPayPalCheckoutService;\n-import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreateBillingAgreementRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreateBillingAgreementResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreatePlanRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreatePlanResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalUpdatePlanRequest;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import com.paypal.api.payments.Agreement;\n-import com.paypal.api.payments.Amount;\n-import com.paypal.api.payments.Currency;\n-import com.paypal.api.payments.MerchantPreferences;\n-import com.paypal.api.payments.Patch;\n-import com.paypal.api.payments.Payer;\n-import com.paypal.api.payments.PaymentDefinition;\n-import com.paypal.api.payments.Plan;\n-import com.paypal.api.payments.ShippingAddress;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import javax.annotation.Resource;\n-\n-/**\n- * BETA: Placeholder service to facilitate creating billing agreements and recurring subscriptions via the Payments API.\n- *\n- * Billing Agreement Tokens and Merchant Initiated Billing Agreements are supported via the\n- * {@link PayPalAgreementTokenService}\n- */\n-@Service(\"blPayPalBillingAgreementService\")\n-public class PayPalBillingAgreementServiceImpl implements PayPalBillingAgreementService {\n-\n-    @Resource(name = \"blExternalCallPayPalCheckoutService\")\n-    protected ExternalCallPayPalCheckoutService externalCallService;\n-\n-    @Resource(name = \"blPayPalWebProfileService\")\n-    protected PayPalWebProfileService webProfileService;\n-\n-    @Autowired(required = false)\n-    protected CurrentOrderPaymentRequestService currentOrderPaymentRequestService;\n-\n-    @Override\n-    public Agreement createPayPalBillingAgreementForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException {\n-        PaymentRequestDTO paymentRequestDTO = getPaymentRequestForCurrentOrder();\n-\n-        // 1. Create Plan\n-        Plan plan = constructPlan(paymentRequestDTO);\n-\n-        // 2. Activate Plan\n-        List<Patch> patchRequestList = new ArrayList<>();\n-        Map<String, String> value = new HashMap<>();\n-        value.put(\"state\", \"ACTIVE\");\n-\n-        // Create update object to activate plan\n-        Patch patch = new Patch();\n-        patch.setPath(\"/\");\n-        patch.setValue(value);\n-        patch.setOp(\"replace\");\n-        patchRequestList.add(patch);\n-\n-        updatePlan(plan, patchRequestList, paymentRequestDTO);\n-\n-        // 3. Create Agreement Details\n-        Agreement agreement = constructAgreement(paymentRequestDTO, plan);\n-\n-        return createAgreement(agreement, paymentRequestDTO);\n-    }\n-\n-    protected Agreement constructAgreement(PaymentRequestDTO paymentRequestDTO, Plan plan) {\n-        Payer payer = constructPayer(paymentRequestDTO);\n-\n-        // Add agreement details\n-        Agreement agreement = new Agreement();\n-        agreement.setName(\"Billing Agreement\");\n-        agreement.setDescription(\"Billing Agreement\");\n-        agreement.setPayer(payer);\n-        Plan agreementPlan = new Plan();\n-        agreementPlan.setId(plan.getId());\n-        agreement.setPlan(agreementPlan);\n-        agreement.setStartDate(\"2018-12-22T09:13:49Z\");\n-\n-        if (paymentRequestDTO.shipToPopulated()) {\n-            ShippingAddress address = externalCallService.getPayPalShippingAddress(paymentRequestDTO);\n-            agreement.setShippingAddress(address);\n-        }\n-        return agreement;\n-    }\n-\n-\n-    protected Payer constructPayer(PaymentRequestDTO paymentRequestDTO) {\n-        Payer payer = new Payer();\n-        payer.setPaymentMethod(MessageConstants.PAYER_PAYMENTMETHOD_PAYPAL);\n-        return payer;\n-    }\n-\n-    protected Plan constructPlan(PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        // Set up merchant preferences\n-        MerchantPreferences merchantPreferences = new MerchantPreferences();\n-        merchantPreferences.setCancelUrl(externalCallService.getConfiguration().getCancelUrl());\n-        merchantPreferences.setReturnUrl(externalCallService.getConfiguration().getReturnUrl());\n-\n-        // 1. Set up a plan\n-        Plan plan = new Plan();\n-        plan.setName(\"Test Plan\");\n-        plan.setDescription(\"Test Plan Description\");\n-        plan.setType(\"INFINITE\");\n-        plan.setMerchantPreferences(merchantPreferences);\n-        List<PaymentDefinition> paymentDefinitions = new ArrayList<>();\n-        PaymentDefinition paymentDefinition = new PaymentDefinition();\n-        paymentDefinition.setName(\"Test Regular Payment Definition\");\n-        paymentDefinition.setType(\"REGULAR\");\n-        paymentDefinition.setFrequencyInterval(\"1\");\n-        paymentDefinition.setFrequency(\"YEAR\");\n-        paymentDefinition.setCycles(\"0\");\n-        Amount amt = externalCallService.getPayPalAmountFromOrder(paymentRequestDTO);\n-        paymentDefinition.setAmount(new Currency(amt.getCurrency(), amt.getTotal()));\n-        paymentDefinitions.add(paymentDefinition);\n-        plan.setPaymentDefinitions(paymentDefinitions);\n-\n-        return createPlan(plan, paymentRequestDTO);\n-    }\n-\n-    protected Plan createPlan(Plan plan, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalCreatePlanResponse response = (PayPalCreatePlanResponse) externalCallService.call(\n-                new PayPalCreatePlanRequest(plan, externalCallService.constructAPIContext(paymentRequestDTO)));\n-        return response.getPlan();\n-    }\n-\n-    protected void updatePlan(Plan plan, List<Patch> patches, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        externalCallService.call(new PayPalUpdatePlanRequest(plan, patches, externalCallService.constructAPIContext(paymentRequestDTO)));\n-    }\n-\n-    protected Agreement createAgreement(Agreement agreement, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalCreateBillingAgreementResponse response = (PayPalCreateBillingAgreementResponse) externalCallService.call(\n-                new PayPalCreateBillingAgreementRequest(agreement, externalCallService.constructAPIContext(paymentRequestDTO)));\n-        return response.getAgreement();\n-    }\n-\n-    protected PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            return currentOrderPaymentRequestService.getPaymentRequestFromCurrentOrder();\n-        } else {\n-            throw new PaymentException(\"Unable to get PaymentRequestDTO for current order\");\n-        }\n-    }\n-\n-    @Override\n-    public String getPayPalBillingTokenFromCurrentOrder() throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            return currentOrderPaymentRequestService.retrieveOrderAttributeFromCurrentOrder(MessageConstants.BILLINGECTOKEN);\n-        } else {\n-            throw new PaymentException(\"Unable to retrieve PayPal Billing EC token for current order\");\n-        }\n-    }\n-\n-    @Override\n-    public void setPayPalBillingTokenOnCurrentOrder(String billingToken) throws PaymentException {\n-        if (currentOrderPaymentRequestService != null) {\n-            currentOrderPaymentRequestService.addOrderAttributeToCurrentOrder(MessageConstants.BILLINGECTOKEN, billingToken);\n-        } else {\n-            throw new PaymentException(\"Unable to set PayPal Billing EC token on current order\");\n-        }\n-    }\n-\n-\n-\n-}"
  },
  {
    "sha": "979bf8f0b800bfebe720b588a008b00b62b5ce41",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProvider.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProvider.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProvider.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProvider.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -0,0 +1,49 @@\n+/*-\n+ * #%L\n+ * BroadleafCommerce PayPal\n+ * %%\n+ * Copyright (C) 2009 - 2021 Broadleaf Commerce\n+ * %%\n+ * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n+ * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n+ * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n+ * the Broadleaf End User License Agreement (EULA), Version 1.1\n+ * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n+ * shall apply.\n+ * \n+ * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n+ * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n+ * #L%\n+ */\n+package org.broadleafcommerce.vendor.paypal.service;\n+\n+import com.paypal.core.PayPalHttpClient;\n+import com.paypal.http.HttpRequest;\n+import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n+import org.broadleafcommerce.payment.service.gateway.PayPalCheckoutConfiguration;\n+\n+/**\n+ * Identifies a service that configures and provides access to a {@link PayPalHttpClient} with which\n+ * to execute requests based on {@link PayPalCheckoutConfiguration}. It also provides common\n+ * configuration for outgoing {@link HttpRequest PayPal HttpRequests}.\n+ *\n+ * @author Nathan Moore (nathandmoore)\n+ */\n+public interface PayPalClientProvider {\n+\n+    /**\n+     * Returns the configured {@link PayPalHttpClient}.\n+     *\n+     * @return the configured {@link PayPalHttpClient}.\n+     */\n+    PayPalHttpClient getClient();\n+\n+    /**\n+     * Configures the {@link HttpRequest PayPal request} based on the {@link PaymentRequestDTO}. This\n+     * will add the request ID and various headers common to all requests.\n+     *\n+     * @param request The {@link HttpRequest} to configure\n+     * @param paymentRequest The {@link PaymentRequestDTO} sent to the gateway\n+     */\n+    void configureRequest(HttpRequest<?> request, PaymentRequestDTO paymentRequest);\n+}"
  },
  {
    "sha": "c0d858c2d9736198f9ca14853a3597cb98b2f370",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProviderImpl.java",
    "status": "added",
    "additions": 116,
    "deletions": 0,
    "changes": 116,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProviderImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProviderImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalClientProviderImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -0,0 +1,116 @@\n+/*-\n+ * #%L\n+ * BroadleafCommerce PayPal\n+ * %%\n+ * Copyright (C) 2009 - 2021 Broadleaf Commerce\n+ * %%\n+ * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0\n+ * (the \"Fair Use License\" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)\n+ * unless the restrictions on use therein are violated and require payment to Broadleaf in which case\n+ * the Broadleaf End User License Agreement (EULA), Version 1.1\n+ * (the \"Commercial License\" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)\n+ * shall apply.\n+ * \n+ * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the \"Custom License\")\n+ * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.\n+ * #L%\n+ */\n+package org.broadleafcommerce.vendor.paypal.service;\n+\n+import com.paypal.core.PayPalEnvironment;\n+import com.paypal.core.PayPalHttpClient;\n+import com.paypal.http.HttpRequest;\n+import com.paypal.orders.Order;\n+import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n+import org.broadleafcommerce.payment.service.gateway.PayPalCheckoutConfiguration;\n+import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n+import org.broadleafcommerce.vendor.paypal.service.payment.type.PayPalCheckoutEnvironmentType;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.Resource;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * @author Nathan Moore (nathandmoore)\n+ */\n+@Service(\"blPayPalClientProvider\")\n+public class PayPalClientProviderImpl implements PayPalClientProvider {\n+\n+    private PayPalHttpClient client;\n+\n+    @Resource(name = \"blPayPalCheckoutConfiguration\")\n+    protected PayPalCheckoutConfiguration configuration;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.client = configureClient(configuration);\n+    }\n+\n+    private PayPalHttpClient configureClient(PayPalCheckoutConfiguration configuration) {\n+        PayPalEnvironment environment;\n+\n+        if (PayPalCheckoutEnvironmentType.SANDBOX.type().equals(configuration.getEnvironment())) {\n+            environment = new PayPalEnvironment.Sandbox(configuration.getClientId(),\n+                    configuration.getClientSecret());\n+        } else {\n+            environment = new PayPalEnvironment.Live(configuration.getClientId(),\n+                    configuration.getClientSecret());\n+        }\n+\n+        return new PayPalHttpClient(environment);\n+    }\n+\n+    @Override\n+    public void configureRequest(HttpRequest<?> request,\n+            PaymentRequestDTO paymentRequest) {\n+        request.header(MessageConstants.BN, (MessageConstants.BNCODE));\n+        request.header(MessageConstants.HTTP_HEADER_REQUEST_ID,\n+                buildIdempotencyKey(paymentRequest));\n+\n+        Map<String, Object> additionalFields = paymentRequest.getAdditionalFields();\n+\n+        if (additionalFields.containsKey(MessageConstants.HTTP_HEADER_AUTH_ASSERTION)) {\n+            request.header(MessageConstants.HTTP_HEADER_AUTH_ASSERTION,\n+                    (String) additionalFields.get(MessageConstants.HTTP_HEADER_AUTH_ASSERTION));\n+        }\n+\n+        if (additionalFields.containsKey(MessageConstants.HTTP_HEADER_CLIENT_METADATA_ID)) {\n+            request.header(MessageConstants.HTTP_HEADER_CLIENT_METADATA_ID,\n+                    (String) additionalFields.get(MessageConstants.HTTP_HEADER_CLIENT_METADATA_ID));\n+        }\n+\n+        if (additionalFields.containsKey(MessageConstants.HTTP_HEADER_MOCK_RESPONSE)) {\n+            request.header(MessageConstants.HTTP_HEADER_MOCK_RESPONSE,\n+                    (String) additionalFields.get(MessageConstants.HTTP_HEADER_MOCK_RESPONSE));\n+        }\n+    }\n+\n+    /**\n+     * Builds or gathers the idempotencyKey for the request. This value will guarantee that the\n+     * request cannot be processed twice & that if the request is made twice, that the second\n+     * response will be the same as the first response.\n+     * <p>\n+     * <blockquote> Note: this value must be unique for each transaction type. For example, if we\n+     * want to authorize & later capture a PayPal {@link Order}, the capture request's idempotency\n+     * key must be different than the authorization request's idempotency key.</blockquote>\n+     *\n+     * @param paymentRequest the request that will be sent to PayPal\n+     * @return the idempotency key\n+     */\n+    protected String buildIdempotencyKey(PaymentRequestDTO paymentRequest) {\n+        Map<String, Object> additionalFields = paymentRequest.getAdditionalFields();\n+\n+        if (additionalFields.containsKey(MessageConstants.IDEMPOTENCY_KEY)) {\n+            return (String) additionalFields.get(MessageConstants.IDEMPOTENCY_KEY);\n+        } else {\n+            return UUID.randomUUID().toString();\n+        }\n+    }\n+\n+    @Override\n+    public PayPalHttpClient getClient() {\n+        return client;\n+    }\n+}"
  },
  {
    "sha": "1d5fa4a160a4a93e88d64b50298c39cacc882959",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentService.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentService.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentService.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentService.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,34 +17,36 @@\n  */\n package org.broadleafcommerce.vendor.paypal.service;\n \n+import com.paypal.orders.Order;\n+import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n \n-import com.paypal.api.payments.Payment;\n-\n public interface PayPalPaymentService {\n \n     /**\n-     * Creates a PayPal payment\n+     * Creates a PayPal {@link Order}\n      * @param performCheckoutOnReturn Indicates if we should start checkout after the user has authorized the payment\n      * \n-     * @return The new payment\n+     * @return The new {@link Order}\n      * @throws PaymentException\n      */\n-    Payment createPayPalPaymentForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException;\n+    Order createPayPalOrderForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException;\n \n     /**\n-     * Updates the PayPal payment to be in sync with the order. This method should be used when fulfillment or pricing information changes\n-     * after Payment creation. For creating payment use {@link #createPayPalPaymentForCurrentOrder(boolean)}\n+     * Updates the PayPal {@link Order} to be in sync with the Broadleaf order. This method should be used when fulfillment or pricing information changes\n+     * after {@link Order} creation. For creating payment use {@link #createPayPalOrderForCurrentOrder(boolean)}\n      * \n      * @throws PaymentException\n      */\n-    void updatePayPalPaymentForFulfillment() throws PaymentException;\n+    void updatePayPalOrderForFulfillment() throws PaymentException;\n+\n+    PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentException;\n \n-    String getPayPalPaymentIdFromCurrentOrder() throws PaymentException;\n+    String getPayPalOrderIdFromCurrentOrder() throws PaymentException;\n \n     String getPayPalPayerIdFromCurrentOrder() throws PaymentException;\n \n-    void setPayPalPaymentIdOnCurrentOrder(String paymentId) throws PaymentException;\n+    void setPayPalOrderIdOnCurrentOrder(String orderId) throws PaymentException;\n \n     void setPayPalPayerIdOnCurrentOrder(String payerId) throws PaymentException;\n "
  },
  {
    "sha": "e649a16dbc1aa5949be67a6f4578e8ad8915ff06",
    "filename": "src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentServiceImpl.java",
    "status": "modified",
    "additions": 185,
    "deletions": 99,
    "changes": 284,
    "blob_url": "https://github.com/BroadleafCommerce/blc-paypal/blob/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentServiceImpl.java",
    "raw_url": "https://github.com/BroadleafCommerce/blc-paypal/raw/8b21d7358af725c6289cb698d626d5affd2ae548/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentServiceImpl.java",
    "contents_url": "https://api.github.com/repos/BroadleafCommerce/blc-paypal/contents/src/main/java/org/broadleafcommerce/vendor/paypal/service/PayPalPaymentServiceImpl.java?ref=8b21d7358af725c6289cb698d626d5affd2ae548",
    "patch": "@@ -17,145 +17,233 @@\n  */\n package org.broadleafcommerce.vendor.paypal.service;\n \n+import com.paypal.orders.AddressPortable;\n+import com.paypal.orders.AmountBreakdown;\n+import com.paypal.orders.AmountWithBreakdown;\n+import com.paypal.orders.ApplicationContext;\n+import com.paypal.orders.Item;\n+import com.paypal.orders.Money;\n+import com.paypal.orders.Name;\n+import com.paypal.orders.Order;\n+import com.paypal.orders.OrderRequest;\n+import com.paypal.orders.Patch;\n+import com.paypal.orders.Payee;\n+import com.paypal.orders.Payer;\n+import com.paypal.orders.PurchaseUnitRequest;\n+import com.paypal.orders.ShippingDetail;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.broadleafcommerce.common.payment.dto.AddressDTO;\n+import org.broadleafcommerce.common.payment.dto.GatewayCustomerDTO;\n import org.broadleafcommerce.common.payment.dto.PaymentRequestDTO;\n import org.broadleafcommerce.common.payment.service.CurrentOrderPaymentRequestService;\n import org.broadleafcommerce.common.vendor.service.exception.PaymentException;\n import org.broadleafcommerce.payment.service.gateway.ExternalCallPayPalCheckoutService;\n import org.broadleafcommerce.vendor.paypal.service.payment.MessageConstants;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreatePaymentRequest;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreatePaymentResponse;\n-import org.broadleafcommerce.vendor.paypal.service.payment.PayPalUpdatePaymentRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreateOrderRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalCreateOrderResponse;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalUpdateOrderRequest;\n+import org.broadleafcommerce.vendor.paypal.service.payment.PayPalUpdateOrderResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n-import com.paypal.api.payments.Amount;\n-import com.paypal.api.payments.ItemList;\n-import com.paypal.api.payments.Patch;\n-import com.paypal.api.payments.Payer;\n-import com.paypal.api.payments.Payment;\n-import com.paypal.api.payments.RedirectUrls;\n-import com.paypal.api.payments.Transaction;\n-import java.util.ArrayList;\n+import org.springframework.util.Assert;\n+\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import javax.annotation.Resource;\n \n @Service(\"blPayPalPaymentService\")\n public class PayPalPaymentServiceImpl implements PayPalPaymentService {\n \n+    protected static final String REPLACE_OP_TYPE = \"replace\";\n+\n     @Resource(name = \"blExternalCallPayPalCheckoutService\")\n     protected ExternalCallPayPalCheckoutService externalCallService;\n \n-    @Resource(name = \"blPayPalWebProfileService\")\n-    protected PayPalWebProfileService webProfileService;\n-\n     @Autowired(required = false)\n     protected CurrentOrderPaymentRequestService currentOrderPaymentRequestService;\n \n-    @Value(\"${gateway.paypal.checkout.rest.populate.shipping.create.payment:true}\")\n-    protected boolean shouldPopulateShippingOnPaymentCreation;\n+    @Resource(name = \"blPayPalClientProvider\")\n+    protected PayPalClientProvider clientProvider;\n+\n+    @Value(\"${gateway.paypal.checkout.rest.populate.shipping.create.order:true}\")\n+    protected boolean shouldPopulateShippingOnOrderCreation;\n \n     @Override\n-    public Payment createPayPalPaymentForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException {\n-        PaymentRequestDTO paymentRequestDTO = getPaymentRequestForCurrentOrder();\n+    public Order createPayPalOrderForCurrentOrder(boolean performCheckoutOnReturn) throws PaymentException {\n+        PaymentRequestDTO paymentRequest = getPaymentRequestForCurrentOrder();\n \n-        // Set payer details\n-        Payer payer = constructPayer(paymentRequestDTO);\n+        PurchaseUnitRequest purchaseUnitRequest = new PurchaseUnitRequest()\n+                .amountWithBreakdown(constructAmountWithBreakdown(paymentRequest))\n+                .payee(constructPayee(paymentRequest))\n+                .description(externalCallService.getConfiguration().getPaymentDescription())\n+                .customId(String.format(\"%s|%s\", paymentRequest.getOrderId(),\n+                        performCheckoutOnReturn));\n \n-        // Set redirect URLs\n-        RedirectUrls redirectUrls = new RedirectUrls();\n-        redirectUrls.setCancelUrl(externalCallService.getConfiguration().getCancelUrl());\n-        redirectUrls.setReturnUrl(externalCallService.getConfiguration().getReturnUrl());\n+        purchaseUnitRequest.items(constructItems(paymentRequest));\n+\n+        if (shouldPopulateShippingOnOrderCreation) {\n+            purchaseUnitRequest.shippingDetail(constructShippingDetail(paymentRequest));\n+        }\n+\n+        String shippingPreference = (String) paymentRequest\n+                .getAdditionalFields().get(MessageConstants.SHIPPING_PREFERENCE);\n+        String locale = Optional\n+                .ofNullable((Locale) paymentRequest.getAdditionalFields().get(MessageConstants.LOCALE))\n+                .map(Locale::toLanguageTag)\n+                .map(loc -> loc.replace(\"_\", \"-\"))\n+                .orElse(null);\n+        OrderRequest order = new OrderRequest()\n+                .checkoutPaymentIntent(getIntent(performCheckoutOnReturn))\n+                .payer(constructPayer(paymentRequest))\n+                .purchaseUnits(Collections.singletonList(purchaseUnitRequest))\n+                .applicationContext(new ApplicationContext()\n+                        .shippingPreference(shippingPreference)\n+                        .locale(locale));\n+\n+        return createOrder(order, paymentRequest);\n+    }\n \n-        Amount amount = externalCallService.getPayPalAmountFromOrder(paymentRequestDTO);\n+    @Override\n+    public void updatePayPalOrderForFulfillment() throws PaymentException {\n+        PaymentRequestDTO paymentRequest = getPaymentRequestForCurrentOrder();\n \n-        // Transaction information\n-        Transaction transaction = new Transaction();\n-        transaction.setAmount(amount);\n-        transaction.setDescription(externalCallService.getConfiguration().getPaymentDescription());\n-        transaction.setCustom(paymentRequestDTO.getOrderId() + \"|\" + performCheckoutOnReturn);\n+        String orderId = getPayPalOrderIdFromCurrentOrder();\n \n-        ItemList itemList = externalCallService.getPayPalItemListFromOrder(paymentRequestDTO, shouldPopulateShippingOnPaymentCreation);\n-        if (itemList != null) {\n-            transaction.setItemList(itemList);\n+        if (StringUtils.isBlank(orderId)) {\n+            throw new PaymentException(\n+                    \"Unable to update the current PayPal payment because no PayPal payment id was found on the order\");\n         }\n \n-        // Add transaction to a list\n-        List<Transaction> transactions = new ArrayList<>();\n-        transactions.add(transaction);\n+        PurchaseUnitRequest purchaseUnitRequest = new PurchaseUnitRequest()\n+                .amountWithBreakdown(constructAmountWithBreakdown(paymentRequest))\n+                .payee(constructPayee(paymentRequest))\n+                .description(externalCallService.getConfiguration().getPaymentDescription())\n+                .customId(paymentRequest.getOrderId() + \"|\" + true);\n \n-        // Add payment details\n-        Payment payment = new Payment();\n-        payment.setIntent(getIntent(performCheckoutOnReturn));\n-        payment.setPayer(payer);\n-        payment.setRedirectUrls(redirectUrls);\n-        payment.setTransactions(transactions);\n+        purchaseUnitRequest.items(constructItems(paymentRequest));\n \n-        String profileId = webProfileService.getWebProfileId(paymentRequestDTO);\n-        if (StringUtils.isNotBlank(profileId)) {\n-            payment.setExperienceProfileId(profileId);\n+        if (shouldPopulateShippingOnOrderCreation) {\n+            purchaseUnitRequest.shippingDetail(constructShippingDetail(paymentRequest));\n         }\n-        return createPayment(payment, paymentRequestDTO);\n+\n+        Patch amountPatch = new Patch()\n+                .op(REPLACE_OP_TYPE)\n+                .path(\"/purchase_units/@reference_id=='default'\")\n+                .value(purchaseUnitRequest);\n+\n+        updateOrder(orderId, Collections.singletonList(amountPatch), paymentRequest);\n     }\n \n-    protected Payer constructPayer(PaymentRequestDTO paymentRequestDTO) {\n-        Payer payer = new Payer();\n-        payer.setPaymentMethod(MessageConstants.PAYER_PAYMENTMETHOD_PAYPAL);\n-        return payer;\n+    protected Order createOrder(OrderRequest orderRequest,\n+                                PaymentRequestDTO paymentRequest) throws PaymentException {\n+        PayPalCreateOrderRequest request = new PayPalCreateOrderRequest(\n+                clientProvider,\n+                paymentRequest,\n+                orderRequest);\n+        PayPalCreateOrderResponse response =\n+                externalCallService.call(request, PayPalCreateOrderResponse.class);\n+        return response.getContent();\n     }\n \n-    @Override\n-    public void updatePayPalPaymentForFulfillment() throws PaymentException {\n-        PaymentRequestDTO paymentRequestDTO = getPaymentRequestForCurrentOrder();\n-        String paymentId = getPayPalPaymentIdFromCurrentOrder();\n-        if (paymentRequestDTO == null) {\n-            throw new PaymentException(\"Unable to update the current PayPal payment because the PaymentRequestDTO was null\");\n-        }\n-        if (StringUtils.isBlank(paymentId)) {\n-            throw new PaymentException(\"Unable to update the current PayPal payment because no PayPal payment id was found on the order\");\n+    protected void updateOrder(String orderId,\n+                               List<Patch> patches,\n+                               PaymentRequestDTO paymentRequest) throws PaymentException {\n+        Assert.hasText(orderId, \"OrderId cannot be blank\");\n+        Assert.notEmpty(patches, \"Patches cannot be empty\");\n+        PayPalUpdateOrderRequest request = new PayPalUpdateOrderRequest(\n+                clientProvider,\n+                paymentRequest,\n+                orderId,\n+                patches);\n+        externalCallService.call(request, PayPalUpdateOrderResponse.class);\n+    }\n+\n+    protected Payee constructPayee(PaymentRequestDTO paymentRequest) {\n+        String merchantId =\n+                (String) paymentRequest.getAdditionalFields().get(MessageConstants.PAYEE_MERCHANT_ID);\n+\n+        if (StringUtils.isBlank(merchantId)) {\n+            return null;\n         }\n-        List<Patch> patches = new ArrayList<>();\n-\n-        Patch amountPatch = new Patch();\n-        amountPatch.setOp(\"replace\");\n-        amountPatch.setPath(\"/transactions/0/amount\");\n-        Amount amount = externalCallService.getPayPalAmountFromOrder(paymentRequestDTO);\n-        amountPatch.setValue(amount);\n-        patches.add(amountPatch);\n-\n-        ItemList itemList = externalCallService.getPayPalItemListFromOrder(paymentRequestDTO, true);\n-        if (itemList != null) {\n-            Patch shipToPatch = new Patch();\n-            shipToPatch.setOp(\"replace\");\n-            shipToPatch.setPath(\"/transactions/0/item_list\");\n-            shipToPatch.setValue(itemList);\n-            patches.add(shipToPatch);\n+\n+        String merchantEmail =\n+                (String) paymentRequest.getAdditionalFields().get(MessageConstants.PAYEE_MERCHANT_EMAIL);\n+\n+        return new Payee().merchantId(merchantId).email(merchantEmail);\n+    }\n+\n+    protected Payer constructPayer(PaymentRequestDTO paymentRequestDTO) {\n+        return new Payer().email(getPayerEmail(paymentRequestDTO));\n+    }\n+\n+    protected String getPayerEmail(PaymentRequestDTO paymentRequestDTO) {\n+        return Optional.ofNullable(paymentRequestDTO.getCustomer())\n+                .map(GatewayCustomerDTO::getEmail)\n+                .orElse(null);\n+    }\n+\n+    protected List<Item> constructItems(PaymentRequestDTO paymentRequest) {\n+        if (!CollectionUtils.isNotEmpty(paymentRequest.getLineItems())) {\n+            return Collections.emptyList();\n         }\n \n-        Patch customPatch = new Patch();\n-        customPatch.setPath(\"/transactions/0/custom\");\n-        customPatch.setOp(\"replace\");\n-        customPatch.setValue(paymentRequestDTO.getOrderId() + \"|\" + true);\n-        patches.add(customPatch);\n+        return paymentRequest.getLineItems()\n+                .stream()\n+                .map(lineItem -> new Item()\n+                        .category(lineItem.getCategory())\n+                        .description(lineItem.getDescription())\n+                        .name(lineItem.getName())\n+                        .quantity(Objects.toString(lineItem.getQuantity(), null))\n+                        .sku(lineItem.getSystemId())\n+                        .tax(convertToMoney(lineItem.getTax(), paymentRequest.getOrderCurrencyCode()))\n+                        .unitAmount(convertToMoney(lineItem.getAmount(), paymentRequest.getOrderCurrencyCode())))\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected ShippingDetail constructShippingDetail(\n+            PaymentRequestDTO paymentRequest) {\n+        AddressDTO<PaymentRequestDTO> address = paymentRequest.getShipTo();\n \n-        Payment paypalPayment = new Payment();\n-        paypalPayment.setId(paymentId);\n-        updatePayment(paypalPayment, patches, paymentRequestDTO);\n+        if (address == null) {\n+            return null;\n+        }\n \n+        return new ShippingDetail()\n+                .name(new Name().fullName(address.getAddressFullName()))\n+                .addressPortable(new AddressPortable()\n+                        .addressLine1(address.getAddressLine1())\n+                        .addressLine2(address.getAddressLine2())\n+                        .adminArea2(address.getAddressCityLocality())\n+                        .adminArea1(address.getAddressStateRegion())\n+                        .postalCode(address.getAddressPostalCode())\n+                        .countryCode(address.getAddressCountryCode()));\n     }\n \n-    protected Payment createPayment(Payment payment, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        PayPalCreatePaymentResponse response = (PayPalCreatePaymentResponse) externalCallService.call(\n-                new PayPalCreatePaymentRequest(payment, externalCallService.constructAPIContext(paymentRequestDTO)));\n-        return response.getPayment();\n+    protected AmountWithBreakdown constructAmountWithBreakdown(\n+            PaymentRequestDTO paymentRequest) {\n+        AmountBreakdown details = new AmountBreakdown()\n+                .itemTotal(convertToMoney(paymentRequest.getOrderSubtotal(), paymentRequest.getOrderCurrencyCode()))\n+                .shipping(convertToMoney(paymentRequest.getShippingTotal(), paymentRequest.getOrderCurrencyCode()))\n+                .taxTotal(convertToMoney(paymentRequest.getTaxTotal(), paymentRequest.getOrderCurrencyCode()));\n+\n+        return new AmountWithBreakdown()\n+                .currencyCode(paymentRequest.getOrderCurrencyCode())\n+                .value(paymentRequest.getTransactionTotal())\n+                .amountBreakdown(details);\n     }\n \n-    protected void updatePayment(Payment payment, List<Patch> patches, PaymentRequestDTO paymentRequestDTO) throws PaymentException {\n-        externalCallService.call(\n-                new PayPalUpdatePaymentRequest(payment, patches, externalCallService.constructAPIContext(paymentRequestDTO)));\n+    protected Money convertToMoney(String value, String currencyCode) {\n+        return new Money().value(value).currencyCode(currencyCode);\n     }\n \n-    protected PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentException {\n+    @Override\n+    public PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentException {\n         if (currentOrderPaymentRequestService != null) {\n             return currentOrderPaymentRequestService.getPaymentRequestFromCurrentOrder();\n         } else {\n@@ -164,9 +252,9 @@ protected PaymentRequestDTO getPaymentRequestForCurrentOrder() throws PaymentExc\n     }\n \n     @Override\n-    public String getPayPalPaymentIdFromCurrentOrder() throws PaymentException {\n+    public String getPayPalOrderIdFromCurrentOrder() throws PaymentException {\n         if (currentOrderPaymentRequestService != null) {\n-            return currentOrderPaymentRequestService.retrieveOrderAttributeFromCurrentOrder(MessageConstants.PAYMENTID);\n+            return currentOrderPaymentRequestService.retrieveOrderAttributeFromCurrentOrder(MessageConstants.ORDER_ID);\n         } else {\n             throw new PaymentException(\"Unable to retrieve PayPal payment id for current order\");\n         }\n@@ -182,9 +270,9 @@ public String getPayPalPayerIdFromCurrentOrder() throws PaymentException {\n     }\n \n     @Override\n-    public void setPayPalPaymentIdOnCurrentOrder(String paymentId) throws PaymentException {\n+    public void setPayPalOrderIdOnCurrentOrder(String orderId) throws PaymentException {\n         if (currentOrderPaymentRequestService != null) {\n-            currentOrderPaymentRequestService.addOrderAttributeToCurrentOrder(MessageConstants.PAYMENTID, paymentId);\n+            currentOrderPaymentRequestService.addOrderAttributeToCurrentOrder(MessageConstants.ORDER_ID, orderId);\n         } else {\n             throw new PaymentException(\"Unable to set PayPal payment id on current order\");\n         }\n@@ -201,10 +289,8 @@ public void setPayPalPayerIdOnCurrentOrder(String payerId) throws PaymentExcepti\n \n     public String getIntent(boolean performCheckoutOnReturn) {\n         if (externalCallService.getConfiguration().isPerformAuthorizeAndCapture()) {\n-            return \"sale\";\n+            return \"CAPTURE\";\n         }\n-\n-        return \"authorize\";\n+        return \"AUTHORIZE\";\n     }\n-\n }"
  }
]
