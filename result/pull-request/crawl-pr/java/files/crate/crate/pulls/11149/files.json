[
  {
    "sha": "fc011dd5037e865808a3e57ebaf8ea50ecaec767",
    "filename": "docs/admin/snapshots.rst",
    "status": "modified",
    "additions": 29,
    "deletions": 3,
    "changes": 32,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/docs/admin/snapshots.rst",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/docs/admin/snapshots.rst",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/docs/admin/snapshots.rst?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -112,6 +112,12 @@ Restore\n    If you are restoring a snapshot into a newer version of CrateDB, be sure to\n    check the :ref:`release_notes` for upgrade instructions.\n \n+.. CAUTION::\n+\n+   If you try to restore a table that already exists, CrateDB will return an\n+   error. However, if you try to restore metadata or cluster settings that\n+   already exist, they will be overwritten.\n+\n Once a snapshot is created, it can be used to restore its tables to the state\n when the snapshot was created.\n \n@@ -143,8 +149,7 @@ Restoring a snapshot using the :ref:`sql-restore-snapshot` statement.::\n     RESTORE OK, 1 row affected (... sec)\n \n In this case only the ``quotes`` table from snapshot\n-``where_my_snapshots_go.snapshot2`` is restored. Using ``ALL`` instead of\n-listing all tables restores the whole snapshot.\n+``where_my_snapshots_go.snapshot2`` is restored.\n \n It's not possible to restore tables that exist in the current cluster::\n \n@@ -182,16 +187,37 @@ restore.\n     When using CrateDB prior to 0.55.5 you will have to create the table schema\n     first before restoring.\n \n-::\n+.. Hidden: drop partition::\n \n     cr> DROP TABLE parted_table;\n     DROP OK, 1 row affected (... sec)\n \n+::\n+\n     cr> RESTORE SNAPSHOT where_my_snapshots_go.snapshot3 TABLE\n     ...    parted_table PARTITION (date=0)\n     ... WITH (wait_for_completion=true);\n     RESTORE OK, 1 row affected (... sec)\n \n+Restore data granularity\n+........................\n+\n+You are not limited to only being able to restore individual tables (or table\n+partitions). For example:\n+\n+- You can use ``ALL`` instead of listing all tables to restore the whole\n+  snapshot, including all metadata and settings.\n+\n+- You can use ``TABLES`` to restore all tables but no metadata or settings.\n+  On the other hand, you can use ``METADATA`` to restore *everything but*\n+  tables.\n+\n+- You can use ``USERS`` to restore database users only.  Or, you can\n+  use ``USERS, PRIVILIGES`` to restore both database users and privileges.\n+\n+See the :ref:`sql-restore-snapshot` documentation for all possible options.\n+\n+\n Cleanup\n -------\n "
  },
  {
    "sha": "4a34a9879077309f7e14d9a7efe039ca10d1bc90",
    "filename": "docs/appendices/release-notes/unreleased.rst",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/docs/appendices/release-notes/unreleased.rst",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/docs/appendices/release-notes/unreleased.rst",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/docs/appendices/release-notes/unreleased.rst?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -53,6 +53,11 @@ None\n Changes\n =======\n \n+- Added support for restoring metadata and settings from snapshots.  If ``ALL``\n+  is used, everything (tables, settings, views, etc.) will be restored. On the\n+  other hand, using ``TABLES`` will only restore tables.  In previous releases,\n+  only tables could be restored, even if ``ALL`` was used.\n+\n - Updated the bundled JDK to 16+36\n \n - Optimized how ``NULL`` values are stored, reducing the amount of disk space"
  },
  {
    "sha": "2fce6ee03aceb6980e14b39868d90c88fb13cb25",
    "filename": "docs/sql/statements/restore-snapshot.rst",
    "status": "modified",
    "additions": 39,
    "deletions": 7,
    "changes": 46,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/docs/sql/statements/restore-snapshot.rst",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/docs/sql/statements/restore-snapshot.rst",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/docs/sql/statements/restore-snapshot.rst?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -22,28 +22,56 @@ Synopsis\n ::\n \n     RESTORE SNAPSHOT repository_name.snapshot_name\n-    { TABLE ( table_ident [ PARTITION (partition_column = value [ , ... ])] [, ...] ) | ALL }\n+    { ALL |\n+      METADATA |\n+      TABLE ( table_ident [ PARTITION (partition_column = value [ , ... ])] [, ...] ) |\n+      data_section [, ...] }\n     [ WITH (restore_parameter [= value], [, ...]) ]\n \n+where ``data_section``::\n+\n+   {  TABLES |\n+      VIEWS |\n+      USERS |\n+      PRIVILEGES |\n+      ANALYZERS |\n+      UDFS }\n \n .. _sql-restore-snapshot-description:\n \n Description\n ===========\n \n-Restore one or more tables or partitions from an existing snapshot into the\n-cluster. The snapshot must be given as fully qualified reference with\n+Restore one or more tables, partitions, or metadata from an existing snapshot\n+into the cluster. The snapshot must be given as fully qualified reference with\n ``repository_name`` and ``snapshot_name``.\n \n-It is possible to restore all tables contained in the snapshot using the\n-``ALL`` keyword. Single tables and/or partitions can be selected for restoring\n-by giving them as ``table_ident`` or partition reference given the\n+To restore everything, use the ``ALL`` keyword.\n+\n+Single tables (or table partitions) can be restored by using ``TABLE`` together\n+with a ``table_ident`` and a optional partition reference given the\n ``partition_column`` values.\n \n-Tables that are to be restored must not exist yet.\n+It is possible to restore all tables using the ``TABLES`` keyword. This will\n+restore all tables but will not restore metadata.\n+\n+To restore only the metadata (including views, users, privileges, analyzers,\n+user-defined-functions, and all cluster settings), instead use the ``METADATA``\n+keyword.\n+\n+A single metadata group can be restored by using the related ``data_section``\n+keyword.\n+\n+Additionally, multiple ``data_section`` keywords can be used to restore\n+multiple concrete sections at once.\n \n To cancel a restore operation simply drop the tables that are being restored.\n \n+.. CAUTION::\n+\n+   If you try to restore a table that already exists, CrateDB will return an\n+   error. However, if you try to restore metadata or cluster settings that\n+   already exist, they will be overwritten.\n \n .. _sql-restore-snapshot-parameters:\n \n@@ -60,6 +88,10 @@ Parameters\n   The name (optionally schema-qualified) of an existing table that is to be\n   restored from the snapshot.\n \n+:data_section:\n+  The section name of the data to be restored. Multiple sections can be\n+  selected.  A section cannot be combined with the ``ALL``, ``METADATA``, or\n+  ``TABLE`` keywords.\n \n .. _sql-restore-snapshot-clauses:\n "
  },
  {
    "sha": "c62535ff0a7bbbdd4bd912a98cde763152ed76bc",
    "filename": "libs/sql-parser/src/main/antlr/SqlBase.g4",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/main/antlr/SqlBase.g4",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/main/antlr/SqlBase.g4",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/libs/sql-parser/src/main/antlr/SqlBase.g4?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -78,7 +78,9 @@ statement\n     | INSERT INTO table ('(' ident (',' ident)* ')')? insertSource\n         onConflict?\n         returning?                                                                   #insert\n-    | RESTORE SNAPSHOT qname (ALL | TABLE tableWithPartitions) withProperties?       #restore\n+    | RESTORE SNAPSHOT qname\n+        (ALL | METADATA | TABLE tableWithPartitions | metatypes=idents)\n+        withProperties?                                                              #restore\n     | COPY tableWithPartition FROM path=expr withProperties? (RETURN SUMMARY)?       #copyFrom\n     | COPY tableWithPartition columns? where?\n         TO DIRECTORY? path=expr withProperties?                                      #copyTo\n@@ -682,7 +684,7 @@ nonReserved\n     | STRING_TYPE | IP | DOUBLE | FLOAT | TIMESTAMP | LONG | INT | INTEGER | SHORT | BYTE | BOOLEAN | PRECISION\n     | REPLACE | RETURNING | SWAP | GC | DANGLING | ARTIFACTS | DECOMMISSION | LEADING | TRAILING | BOTH | TRIM\n     | CURRENT_SCHEMA | PROMOTE | CHARACTER | VARYING\n-    | DISCARD | PLANS | SEQUENCES | TEMPORARY | TEMP\n+    | DISCARD | PLANS | SEQUENCES | TEMPORARY | TEMP | METADATA\n     ;\n \n AUTHORIZATION: 'AUTHORIZATION';\n@@ -948,6 +950,8 @@ SCHEMA: 'SCHEMA';\n RETURN: 'RETURN';\n SUMMARY: 'SUMMARY';\n \n+METADATA: 'METADATA';\n+\n EQ  : '=';\n NEQ : '<>' | '!=';\n LT  : '<';"
  },
  {
    "sha": "eb38e439b048fc0dc93dde0be22e96a6f22a702b",
    "filename": "libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java",
    "status": "modified",
    "additions": 43,
    "deletions": 26,
    "changes": 69,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -22,27 +22,6 @@\n \n package io.crate.sql.parser;\n \n-import static java.util.Collections.emptyList;\n-import static java.util.stream.Collectors.toList;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import javax.annotation.Nullable;\n-\n-import io.crate.sql.tree.CreateTableAs;\n-import io.crate.sql.tree.SetSessionAuthorizationStatement;\n-import org.antlr.v4.runtime.ParserRuleContext;\n-import org.antlr.v4.runtime.Token;\n-import org.antlr.v4.runtime.tree.TerminalNode;\n-\n import io.crate.common.collections.Lists2;\n import io.crate.sql.ExpressionFormatter;\n import io.crate.sql.parser.antlr.v4.SqlBaseBaseVisitor;\n@@ -95,6 +74,7 @@\n import io.crate.sql.tree.CreateRepository;\n import io.crate.sql.tree.CreateSnapshot;\n import io.crate.sql.tree.CreateTable;\n+import io.crate.sql.tree.CreateTableAs;\n import io.crate.sql.tree.CreateUser;\n import io.crate.sql.tree.CreateView;\n import io.crate.sql.tree.CurrentTime;\n@@ -180,8 +160,10 @@\n import io.crate.sql.tree.SearchedCaseExpression;\n import io.crate.sql.tree.Select;\n import io.crate.sql.tree.SelectItem;\n+import io.crate.sql.tree.SetSessionAuthorizationStatement;\n import io.crate.sql.tree.SetStatement;\n import io.crate.sql.tree.SetTransactionStatement;\n+import io.crate.sql.tree.SetTransactionStatement.TransactionMode;\n import io.crate.sql.tree.ShowColumns;\n import io.crate.sql.tree.ShowCreateTable;\n import io.crate.sql.tree.ShowSchemas;\n@@ -211,7 +193,23 @@\n import io.crate.sql.tree.WhenClause;\n import io.crate.sql.tree.Window;\n import io.crate.sql.tree.WindowFrame;\n-import io.crate.sql.tree.SetTransactionStatement.TransactionMode;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.Token;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n \n class AstBuilder extends SqlBaseBaseVisitor<Node> {\n \n@@ -515,13 +513,32 @@ public Node visitNamedProperties(SqlBaseParser.NamedPropertiesContext context) {\n     @Override\n     public Node visitRestore(SqlBaseParser.RestoreContext context) {\n         if (context.ALL() != null) {\n-            return new RestoreSnapshot(\n+            return new RestoreSnapshot<>(\n                 getQualifiedName(context.qname()),\n+                RestoreSnapshot.Mode.ALL,\n                 extractGenericProperties(context.withProperties()));\n         }\n-        return new RestoreSnapshot(getQualifiedName(context.qname()),\n-            visitCollection(context.tableWithPartitions().tableWithPartition(), Table.class),\n-            extractGenericProperties(context.withProperties()));\n+        if (context.METADATA() != null) {\n+            return new RestoreSnapshot<>(\n+                getQualifiedName(context.qname()),\n+                RestoreSnapshot.Mode.METADATA,\n+                extractGenericProperties(context.withProperties()));\n+        }\n+        if (context.TABLE() != null) {\n+            return new RestoreSnapshot(\n+                getQualifiedName(context.qname()),\n+                RestoreSnapshot.Mode.TABLE,\n+                extractGenericProperties(context.withProperties()),\n+                List.of(),\n+                visitCollection(context.tableWithPartitions().tableWithPartition(), Table.class)\n+            );\n+        }\n+        return new RestoreSnapshot<>(\n+            getQualifiedName(context.qname()),\n+            RestoreSnapshot.Mode.CUSTOM,\n+            extractGenericProperties(context.withProperties()),\n+            identsToStrings(context.metatypes.ident())\n+        );\n     }\n \n     @Override"
  },
  {
    "sha": "adeac4ade1bc791ece5dd218369bc6382ac55984",
    "filename": "libs/sql-parser/src/main/java/io/crate/sql/tree/RestoreSnapshot.java",
    "status": "modified",
    "additions": 34,
    "deletions": 7,
    "changes": 41,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/main/java/io/crate/sql/tree/RestoreSnapshot.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/main/java/io/crate/sql/tree/RestoreSnapshot.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/libs/sql-parser/src/main/java/io/crate/sql/tree/RestoreSnapshot.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -21,26 +21,45 @@\n \n package io.crate.sql.tree;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n \n public class RestoreSnapshot<T> extends Statement {\n \n+    public enum Mode {\n+        ALL,\n+        TABLE,\n+        METADATA,\n+        CUSTOM\n+    }\n+\n     private final QualifiedName name;\n     private final GenericProperties<T> properties;\n+    private final Mode mode;\n+    private final List<String> types;\n     private final List<Table<T>> tables;\n \n-    public RestoreSnapshot(QualifiedName name, GenericProperties<T> properties) {\n-        this.name = name;\n-        this.properties = properties;\n-        this.tables = Collections.emptyList();\n+    public RestoreSnapshot(QualifiedName name,\n+                           Mode mode,\n+                           GenericProperties<T> properties) {\n+        this(name, mode, properties, List.of(), List.of());\n     }\n \n     public RestoreSnapshot(QualifiedName name,\n-                           List<Table<T>> tables,\n-                           GenericProperties<T> properties) {\n+                           Mode mode,\n+                           GenericProperties<T> properties,\n+                           List<String> types) {\n+        this(name, mode, properties, types, List.of());\n+    }\n+\n+    public RestoreSnapshot(QualifiedName name,\n+                           Mode mode,\n+                           GenericProperties<T> properties,\n+                           List<String> types,\n+                           List<Table<T>> tables) {\n         this.name = name;\n+        this.mode = mode;\n+        this.types = types;\n         this.tables = tables;\n         this.properties = properties;\n     }\n@@ -53,6 +72,14 @@ public QualifiedName name() {\n         return properties;\n     }\n \n+    public Mode mode() {\n+        return mode;\n+    }\n+\n+    public List<String> types() {\n+        return types;\n+    }\n+\n     public List<Table<T>> tables() {\n         return tables;\n     }"
  },
  {
    "sha": "5891fcd21dc71827e887f07b960e4a8fde56f066",
    "filename": "libs/sql-parser/src/test/java/io/crate/sql/parser/TestStatementBuilder.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/test/java/io/crate/sql/parser/TestStatementBuilder.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/libs/sql-parser/src/test/java/io/crate/sql/parser/TestStatementBuilder.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/libs/sql-parser/src/test/java/io/crate/sql/parser/TestStatementBuilder.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -1689,6 +1689,17 @@ public void test_create_table_with_parametrized_varchar_data_type   () {\n         printStatement(\"create table test(col character varying(2))\");\n     }\n \n+    @Test\n+    public void test_restore_snapshot() {\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 ALL\");\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 ALL WITH (wait_for_completion = true)\");\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 TABLE t PARTITION (parted_col = ?)\");\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 METADATA\");\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 USERS WITH (some_option = true)\");\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 USERS, PRIVILEGES\");\n+        printStatement(\"RESTORE SNAPSHOT repo1.snap1 TABLES, PRIVILEGES\");\n+    }\n+\n     private static void printStatement(String sql) {\n         println(sql.trim());\n         println(\"\");"
  },
  {
    "sha": "0ca4d90c1f9feb29074adfeedad707c5a7829348",
    "filename": "server/src/main/java/io/crate/analyze/AnalyzedRestoreSnapshot.java",
    "status": "modified",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/analyze/AnalyzedRestoreSnapshot.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/analyze/AnalyzedRestoreSnapshot.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/io/crate/analyze/AnalyzedRestoreSnapshot.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -35,15 +35,30 @@\n     private final String repository;\n     private final String snapshot;\n     private final List<Table<Symbol>> tables;\n+    private final boolean includeTables;\n+    private final boolean includeCustomMetadata;\n+    private final List<String> customMetadataTypes;\n+    private final boolean includeGlobalSettings;\n+    private final List<String> globalSettings;\n     private final GenericProperties<Symbol> properties;\n \n     AnalyzedRestoreSnapshot(String repository,\n                             String snapshot,\n                             List<Table<Symbol>> tables,\n+                            boolean includeTables,\n+                            boolean includeCustomMetadata,\n+                            List<String> customMetadataTypes,\n+                            boolean includeGlobalSettings,\n+                            List<String> globalSettings,\n                             GenericProperties<Symbol> properties) {\n         this.repository = repository;\n         this.snapshot = snapshot;\n         this.tables = tables;\n+        this.includeTables = includeTables;\n+        this.includeCustomMetadata = includeCustomMetadata;\n+        this.customMetadataTypes = customMetadataTypes;\n+        this.includeGlobalSettings = includeGlobalSettings;\n+        this.globalSettings = globalSettings;\n         this.properties = properties;\n     }\n \n@@ -59,6 +74,26 @@ public String snapshot() {\n         return tables;\n     }\n \n+    public boolean includeTables() {\n+        return includeTables;\n+    }\n+\n+    public boolean includeCustomMetadata() {\n+        return includeCustomMetadata;\n+    }\n+\n+    public List<String> customMetadataTypes() {\n+        return customMetadataTypes;\n+    }\n+\n+    public boolean includeGlobalSettings() {\n+        return includeGlobalSettings;\n+    }\n+\n+    public List<String> globalSettings() {\n+        return globalSettings;\n+    }\n+\n     public GenericProperties<Symbol> properties() {\n         return properties;\n     }"
  },
  {
    "sha": "230c2596036500cd4dd9d96a4bc5f744d2e80576",
    "filename": "server/src/main/java/io/crate/analyze/BoundRestoreSnapshot.java",
    "status": "modified",
    "additions": 37,
    "deletions": 1,
    "changes": 38,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/analyze/BoundRestoreSnapshot.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/analyze/BoundRestoreSnapshot.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/io/crate/analyze/BoundRestoreSnapshot.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -24,26 +24,42 @@\n \n import io.crate.metadata.PartitionName;\n import io.crate.metadata.RelationName;\n-import javax.annotation.Nullable;\n import org.elasticsearch.common.settings.Settings;\n \n+import javax.annotation.Nullable;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n \n public class BoundRestoreSnapshot {\n \n     private final String repository;\n     private final String snapshot;\n     private final HashSet<RestoreTableInfo> restoreTables;\n+    private final boolean includeTables;\n+    private final boolean includeCustomMetadata;\n+    private final List<String> customMetadataTypes;\n+    private final boolean includeGlobalSettings;\n+    private final List<String> globalSettings;\n     private final Settings settings;\n \n     public BoundRestoreSnapshot(String repository,\n                                 String snapshot,\n                                 HashSet<RestoreTableInfo> restoreTables,\n+                                boolean includeTables,\n+                                boolean includeCustomMetadata,\n+                                List<String> customMetadataTypes,\n+                                boolean includeGlobalSettings,\n+                                List<String> globalSettings,\n                                 Settings settings) {\n         this.repository = repository;\n         this.snapshot = snapshot;\n         this.restoreTables = restoreTables;\n+        this.includeTables = includeTables;\n+        this.includeCustomMetadata = includeCustomMetadata;\n+        this.customMetadataTypes = customMetadataTypes;\n+        this.includeGlobalSettings = includeGlobalSettings;\n+        this.globalSettings = globalSettings;\n         this.settings = settings;\n     }\n \n@@ -63,6 +79,26 @@ public Settings settings() {\n         return restoreTables;\n     }\n \n+    public boolean includeTables() {\n+        return includeTables;\n+    }\n+\n+    public boolean includeCustomMetadata() {\n+        return includeCustomMetadata;\n+    }\n+\n+    public List<String> customMetadataTypes() {\n+        return customMetadataTypes;\n+    }\n+\n+    public boolean includeGlobalSettings() {\n+        return includeGlobalSettings;\n+    }\n+\n+    public List<String> globalSettings() {\n+        return globalSettings;\n+    }\n+\n     public static class RestoreTableInfo {\n \n         private final RelationName relationName;"
  },
  {
    "sha": "969cbff750f5bc2288de12c80ed5252934ec955a",
    "filename": "server/src/main/java/io/crate/analyze/RestoreSnapshotAnalyzer.java",
    "status": "modified",
    "additions": 86,
    "deletions": 8,
    "changes": 94,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/analyze/RestoreSnapshotAnalyzer.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/analyze/RestoreSnapshotAnalyzer.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/io/crate/analyze/RestoreSnapshotAnalyzer.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -28,17 +28,32 @@\n import io.crate.common.collections.Lists2;\n import io.crate.execution.ddl.RepositoryService;\n import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.udf.UserDefinedFunctionsMetadata;\n import io.crate.metadata.CoordinatorTxnCtx;\n import io.crate.metadata.NodeContext;\n+import io.crate.metadata.settings.AnalyzerSettings;\n+import io.crate.metadata.view.ViewsMetadata;\n import io.crate.sql.tree.Expression;\n import io.crate.sql.tree.GenericProperties;\n import io.crate.sql.tree.RestoreSnapshot;\n import io.crate.sql.tree.Table;\n+import io.crate.user.metadata.UsersMetadata;\n+import io.crate.user.metadata.UsersPrivilegesMetadata;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n \n class RestoreSnapshotAnalyzer {\n \n+    public static final Map<String, String> METADATA_CUSTOM_TYPE_MAP = Map.of(\n+        \"VIEWS\", ViewsMetadata.TYPE,\n+        \"USERS\", UsersMetadata.TYPE,\n+        \"PRIVILEGES\", UsersPrivilegesMetadata.TYPE,\n+        \"UDFS\", UserDefinedFunctionsMetadata.TYPE\n+    );\n+\n     private final RepositoryService repositoryService;\n     private final NodeContext nodeCtx;\n \n@@ -61,16 +76,79 @@ public AnalyzedRestoreSnapshot analyze(RestoreSnapshot<Expression> restoreSnapsh\n \n         var exprCtx = new ExpressionAnalysisContext();\n         var exprAnalyzerWithoutFields = new ExpressionAnalyzer(\n-            txnCtx, nodeCtx, paramTypeHints, FieldProvider.UNSUPPORTED, null);\n-        var exprAnalyzerWithFieldsAsString = new ExpressionAnalyzer(\n-            txnCtx, nodeCtx, paramTypeHints, FieldProvider.FIELDS_AS_LITERAL, null);\n-\n-        List<Table<Symbol>> tables = Lists2.map(\n-            restoreSnapshot.tables(),\n-            (table) -> table.map(x -> exprAnalyzerWithFieldsAsString.convert(x, exprCtx)));\n+            txnCtx,\n+            nodeCtx,\n+            paramTypeHints,\n+            FieldProvider.UNSUPPORTED,\n+            null\n+        );\n         GenericProperties<Symbol> properties = restoreSnapshot.properties()\n             .map(x -> exprAnalyzerWithoutFields.convert(x, exprCtx));\n \n-        return new AnalyzedRestoreSnapshot(repositoryName, snapshotName, tables, properties);\n+        List<Table<Symbol>> tables = List.of();\n+        ArrayList<String> customMetadataTypes = new ArrayList<>();\n+        ArrayList<String> globalSettings = new ArrayList<>();\n+        boolean includeTables = false;\n+        boolean includeCustomMetadata = false;\n+        boolean includeGlobalSettings = false;\n+\n+        switch (restoreSnapshot.mode()) {\n+            case ALL -> {\n+                includeTables = true;\n+                includeCustomMetadata = true;\n+                includeGlobalSettings = true;\n+            }\n+            case METADATA -> {\n+                includeCustomMetadata = true;\n+                includeGlobalSettings = true;\n+                globalSettings.add(AnalyzerSettings.CUSTOM_ANALYSIS_SETTINGS_PREFIX);\n+            }\n+            case TABLE -> {\n+                includeTables = true;\n+                var exprAnalyzerWithFieldsAsString = new ExpressionAnalyzer(\n+                    txnCtx,\n+                    nodeCtx,\n+                    paramTypeHints,\n+                    FieldProvider.FIELDS_AS_LITERAL,\n+                    null\n+                );\n+                tables = Lists2.map(\n+                    restoreSnapshot.tables(),\n+                    (table) -> table.map(x -> exprAnalyzerWithFieldsAsString.convert(x, exprCtx))\n+                );\n+            }\n+            case CUSTOM -> {\n+                for (String type_name : restoreSnapshot.types()) {\n+                    type_name = type_name.toUpperCase(Locale.ENGLISH);\n+                    if (type_name.equals(\"TABLES\")) {\n+                        includeTables = true;\n+                    } else if (type_name.equals(\"ANALYZERS\")) {\n+                        // custom analyzers are stored inside persistent cluster settings\n+                        globalSettings.add(AnalyzerSettings.CUSTOM_ANALYSIS_SETTINGS_PREFIX);\n+                        includeGlobalSettings = true;\n+                    } else {\n+                        var custom_type = METADATA_CUSTOM_TYPE_MAP.get(type_name);\n+                        if (custom_type == null) {\n+                            throw new IllegalArgumentException(\"Unknown metadata type '\" + type_name + \"'\");\n+                        }\n+                        includeCustomMetadata = true;\n+                        customMetadataTypes.add(custom_type);\n+                    }\n+                }\n+            }\n+            default -> { }       // make checkstyle happy\n+        }\n+\n+        return new AnalyzedRestoreSnapshot(\n+            repositoryName,\n+            snapshotName,\n+            tables,\n+            includeTables,\n+            includeCustomMetadata,\n+            customMetadataTypes,\n+            includeGlobalSettings,\n+            globalSettings,\n+            properties\n+        );\n     }\n }"
  },
  {
    "sha": "8ba374b3c78d26cd2a68a76951a571f977607765",
    "filename": "server/src/main/java/io/crate/planner/node/ddl/RestoreSnapshotPlan.java",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/planner/node/ddl/RestoreSnapshotPlan.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/planner/node/ddl/RestoreSnapshotPlan.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/io/crate/planner/node/ddl/RestoreSnapshotPlan.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -111,7 +111,7 @@ public void executeOrFail(DependencyCarrier dependencies,\n             .whenComplete((ResolveIndicesAndTemplatesContext ctx, Throwable t) -> {\n                 if (t == null) {\n                     String[] indexNames = ctx.resolvedIndices().toArray(new String[0]);\n-                    String[] templateNames = stmt.restoreTables().isEmpty()\n+                    String[] templateNames = stmt.includeTables() && stmt.restoreTables().isEmpty()\n                         ? new String[]{ALL_TEMPLATES}\n                         : ctx.resolvedTemplates().toArray(new String[0]);\n \n@@ -131,8 +131,12 @@ public void executeOrFail(DependencyCarrier dependencies,\n                         .indicesOptions(indicesOptions)\n                         .settings(settings)\n                         .waitForCompletion(WAIT_FOR_COMPLETION.get(settings))\n-                        .includeGlobalState(false)\n-                        .includeAliases(true);\n+                        .includeIndices(stmt.includeTables())\n+                        .includeAliases(stmt.includeTables())\n+                        .includeCustomMetadata(stmt.includeCustomMetadata())\n+                        .customMetadataTypes(stmt.customMetadataTypes())\n+                        .includeGlobalSettings(stmt.includeGlobalSettings())\n+                        .globalSettings(stmt.globalSettings());\n                     transportActionProvider.transportRestoreSnapshotAction().execute(\n                         request,\n                         new OneRowActionListener<>(consumer, r -> new Row1(r == null ? -1L : 1L)));\n@@ -195,7 +199,13 @@ public static BoundRestoreSnapshot bind(AnalyzedRestoreSnapshot restoreSnapshot,\n             restoreSnapshot.repository(),\n             restoreSnapshot.snapshot(),\n             restoreTables,\n-            settings);\n+            restoreSnapshot.includeTables(),\n+            restoreSnapshot.includeCustomMetadata(),\n+            restoreSnapshot.customMetadataTypes(),\n+            restoreSnapshot.includeGlobalSettings(),\n+            restoreSnapshot.globalSettings(),\n+            settings\n+        );\n     }\n \n     @VisibleForTesting"
  },
  {
    "sha": "49737c82d8c17ad6a4fe8ee763d8c9550388686e",
    "filename": "server/src/main/java/io/crate/user/UserManagerService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/user/UserManagerService.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/io/crate/user/UserManagerService.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/io/crate/user/UserManagerService.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -119,6 +119,10 @@ public UserManagerService(TransportCreateUserAction transportCreateUserAction,\n                 Set<Privilege> privileges = null;\n                 if (privilegesMetadata != null) {\n                     privileges = privilegesMetadata.getUserPrivileges(userName);\n+                    if (privileges == null) {\n+                        // create empty set\n+                        privilegesMetadata.createPrivileges(userName, Set.of());\n+                    }\n                 }\n                 usersBuilder.add(User.of(userName, privileges, password));\n             }"
  },
  {
    "sha": "e47845bae88eb828196fe28b6c864b14464ddcf7",
    "filename": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java",
    "status": "modified",
    "additions": 76,
    "deletions": 113,
    "changes": 189,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/RestoreSnapshotRequest.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -20,19 +20,18 @@\n package org.elasticsearch.action.admin.cluster.snapshots.restore;\n \n import org.elasticsearch.ElasticsearchGenerationException;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.support.IndicesOptions;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.xcontent.ToXContentObject;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentType;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n@@ -41,12 +40,11 @@\n import static org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;\n import static org.elasticsearch.common.settings.Settings.readSettingsFromStream;\n import static org.elasticsearch.common.settings.Settings.writeSettingsToStream;\n-import static org.elasticsearch.common.xcontent.support.XContentMapValues.nodeBooleanValue;\n \n /**\n  * Restore snapshot request\n  */\n-public class RestoreSnapshotRequest extends MasterNodeRequest<RestoreSnapshotRequest> implements ToXContentObject {\n+public class RestoreSnapshotRequest extends MasterNodeRequest<RestoreSnapshotRequest> {\n \n     private String snapshot;\n     private String repository;\n@@ -63,6 +61,12 @@\n     private Settings indexSettings = EMPTY_SETTINGS;\n     private String[] ignoreIndexSettings = Strings.EMPTY_ARRAY;\n \n+    private boolean includeIndices = true;\n+    private boolean includeCustomMetadata = false;\n+    private String[] customMetadataTypes = Strings.EMPTY_ARRAY;\n+    private boolean includeGlobalSettings = false;\n+    private String[] globalSettings = Strings.EMPTY_ARRAY;\n+\n     public RestoreSnapshotRequest() {\n     }\n \n@@ -365,6 +369,8 @@ public RestoreSnapshotRequest ignoreIndexSettings(List<String> ignoreIndexSettin\n     }\n \n     /**\n+     * @deprecated  Use {@link #includeGlobalSettings(boolean)} or {@link #includeCustomMetadata(boolean)} instead.\n+     *\n      * If set to true the restore procedure will restore global cluster state.\n      * <p>\n      * The global cluster state includes persistent settings and index template definitions.\n@@ -378,6 +384,8 @@ public RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState) {\n     }\n \n     /**\n+     * @deprecated  Use {@link #includeGlobalSettings()} or {@link #includeCustomMetadata()} instead.\n+     *\n      * Returns true if global state should be restored from this snapshot\n      *\n      * @return true if global state should be restored\n@@ -451,111 +459,49 @@ public Settings indexSettings() {\n         return this.indexSettings;\n     }\n \n-    /**\n-     * Parses restore definition\n-     *\n-     * @param source restore definition\n-     * @return this request\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public RestoreSnapshotRequest source(Map<String, Object> source) {\n-        for (Map.Entry<String, Object> entry : source.entrySet()) {\n-            String name = entry.getKey();\n-            if (name.equals(\"indices\")) {\n-                if (entry.getValue() instanceof String) {\n-                    indices(Strings.splitStringByCommaToArray((String) entry.getValue()));\n-                } else if (entry.getValue() instanceof ArrayList) {\n-                    indices((ArrayList<String>) entry.getValue());\n-                } else {\n-                    throw new IllegalArgumentException(\"malformed indices section, should be an array of strings\");\n-                }\n-            } else if (name.equals(\"partial\")) {\n-                partial(nodeBooleanValue(entry.getValue(), \"partial\"));\n-            } else if (name.equals(\"settings\")) {\n-                if (!(entry.getValue() instanceof Map)) {\n-                    throw new IllegalArgumentException(\"malformed settings section\");\n-                }\n-                settings((Map<String, Object>) entry.getValue());\n-            } else if (name.equals(\"include_global_state\")) {\n-                includeGlobalState = nodeBooleanValue(entry.getValue(), \"include_global_state\");\n-            } else if (name.equals(\"include_aliases\")) {\n-                includeAliases = nodeBooleanValue(entry.getValue(), \"include_aliases\");\n-            } else if (name.equals(\"rename_pattern\")) {\n-                if (entry.getValue() instanceof String) {\n-                    renamePattern((String) entry.getValue());\n-                } else {\n-                    throw new IllegalArgumentException(\"malformed rename_pattern\");\n-                }\n-            } else if (name.equals(\"rename_replacement\")) {\n-                if (entry.getValue() instanceof String) {\n-                    renameReplacement((String) entry.getValue());\n-                } else {\n-                    throw new IllegalArgumentException(\"malformed rename_replacement\");\n-                }\n-            } else if (name.equals(\"index_settings\")) {\n-                if (!(entry.getValue() instanceof Map)) {\n-                    throw new IllegalArgumentException(\"malformed index_settings section\");\n-                }\n-                indexSettings((Map<String, Object>) entry.getValue());\n-            } else if (name.equals(\"ignore_index_settings\")) {\n-                if (entry.getValue() instanceof String) {\n-                    ignoreIndexSettings(Strings.splitStringByCommaToArray((String) entry.getValue()));\n-                } else if (entry.getValue() instanceof List) {\n-                    ignoreIndexSettings((List<String>) entry.getValue());\n-                } else {\n-                    throw new IllegalArgumentException(\"malformed ignore_index_settings section, should be an array of strings\");\n-                }\n-            } else {\n-                if (IndicesOptions.isIndicesOptions(name) == false) {\n-                    throw new IllegalArgumentException(\"Unknown parameter \" + name);\n-                }\n-            }\n-        }\n-        indicesOptions(IndicesOptions.fromMap(source, indicesOptions));\n+    public RestoreSnapshotRequest includeIndices(boolean includeIndices) {\n+        this.includeIndices = includeIndices;\n         return this;\n     }\n \n-    @Override\n-    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-        builder.startObject();\n-        builder.startArray(\"indices\");\n-        for (String index : indices) {\n-            builder.value(index);\n-        }\n-        builder.endArray();\n-        if (indicesOptions != null) {\n-            indicesOptions.toXContent(builder, params);\n-        }\n-        if (renamePattern != null) {\n-            builder.field(\"rename_pattern\", renamePattern);\n-        }\n-        if (renameReplacement != null) {\n-            builder.field(\"rename_replacement\", renameReplacement);\n-        }\n-        builder.field(\"include_global_state\", includeGlobalState);\n-        builder.field(\"partial\", partial);\n-        builder.field(\"include_aliases\", includeAliases);\n-        if (settings != null) {\n-            builder.startObject(\"settings\");\n-            if (settings.isEmpty() == false) {\n-                settings.toXContent(builder, params);\n-            }\n-            builder.endObject();\n-        }\n-        if (indexSettings != null) {\n-            builder.startObject(\"index_settings\");\n-            if (indexSettings.isEmpty() == false) {\n-                indexSettings.toXContent(builder, params);\n-            }\n-            builder.endObject();\n-        }\n-        builder.startArray(\"ignore_index_settings\");\n-        for (String ignoreIndexSetting : ignoreIndexSettings) {\n-            builder.value(ignoreIndexSetting);\n-        }\n-        builder.endArray();\n-        builder.endObject();\n-        return builder;\n+    public boolean includeIndices() {\n+        return includeIndices;\n+    }\n+\n+    public RestoreSnapshotRequest includeCustomMetadata(boolean includeCustomMetadata) {\n+        this.includeCustomMetadata = includeCustomMetadata;\n+        return this;\n+    }\n+\n+    public boolean includeCustomMetadata() {\n+        return includeCustomMetadata;\n+    }\n+\n+    public RestoreSnapshotRequest customMetadataTypes(List<String> types) {\n+        this.customMetadataTypes = types.toArray(new String[0]);\n+        return this;\n+    }\n+\n+    public String[] customMetadataTypes() {\n+        return customMetadataTypes;\n+    }\n+\n+    public RestoreSnapshotRequest includeGlobalSettings(boolean includeGlobalSettings) {\n+        this.includeGlobalSettings = includeGlobalSettings;\n+        return this;\n+    }\n+\n+    public boolean includeGlobalSettings() {\n+        return includeGlobalSettings;\n+    }\n+\n+    public RestoreSnapshotRequest globalSettings(List<String> globalSettings) {\n+        this.globalSettings = globalSettings.toArray(new String[0]);\n+        return this;\n+    }\n+\n+    public String[] globalSettings() {\n+        return globalSettings;\n     }\n \n     public RestoreSnapshotRequest(StreamInput in) throws IOException {\n@@ -574,6 +520,13 @@ public RestoreSnapshotRequest(StreamInput in) throws IOException {\n         indexSettings = readSettingsFromStream(in);\n         ignoreIndexSettings = in.readStringArray();\n         templates = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_4_5_0)) {\n+            includeIndices = in.readBoolean();\n+            includeCustomMetadata = in.readBoolean();\n+            customMetadataTypes = in.readStringArray();\n+            includeGlobalSettings = in.readBoolean();\n+            globalSettings = in.readStringArray();\n+        }\n     }\n \n     @Override\n@@ -593,6 +546,13 @@ public void writeTo(StreamOutput out) throws IOException {\n         writeSettingsToStream(indexSettings, out);\n         out.writeStringArray(ignoreIndexSettings);\n         out.writeStringArray(templates);\n+        if (out.getVersion().onOrAfter(Version.V_4_5_0)) {\n+            out.writeBoolean(includeIndices);\n+            out.writeBoolean(includeCustomMetadata);\n+            out.writeStringArray(customMetadataTypes);\n+            out.writeBoolean(includeGlobalSettings);\n+            out.writeStringArray(globalSettings);\n+        }\n     }\n \n     @Override\n@@ -617,20 +577,23 @@ public boolean equals(Object o) {\n             Objects.equals(renameReplacement, that.renameReplacement) &&\n             Objects.equals(settings, that.settings) &&\n             Objects.equals(indexSettings, that.indexSettings) &&\n-            Arrays.equals(ignoreIndexSettings, that.ignoreIndexSettings);\n+            Arrays.equals(ignoreIndexSettings, that.ignoreIndexSettings) &&\n+            includeIndices == that.includeIndices &&\n+            includeCustomMetadata == that.includeCustomMetadata &&\n+            Arrays.equals(customMetadataTypes, that.customMetadataTypes) &&\n+            includeGlobalSettings == that.includeGlobalSettings &&\n+            Arrays.equals(globalSettings, that.globalSettings);\n     }\n \n     @Override\n     public int hashCode() {\n         int result = Objects.hash(snapshot, repository, indicesOptions, renamePattern, renameReplacement, waitForCompletion,\n-            includeGlobalState, partial, includeAliases, settings, indexSettings);\n+            includeGlobalState, partial, includeAliases, settings, indexSettings,\n+            includeIndices, includeCustomMetadata, includeGlobalSettings);\n         result = 31 * result + Arrays.hashCode(indices);\n         result = 31 * result + Arrays.hashCode(ignoreIndexSettings);\n+        result = 31 * result + Arrays.hashCode(customMetadataTypes);\n+        result = 31 * result + Arrays.hashCode(globalSettings);\n         return result;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return Strings.toString(this);\n-    }\n }"
  },
  {
    "sha": "ea095ad22789ab4d6752b90f5b885a0f0d1aa3de",
    "filename": "server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -93,7 +93,12 @@ protected void masterOperation(Task task,\n         RestoreService.RestoreRequest restoreRequest = new RestoreService.RestoreRequest(request.repository(), request.snapshot(),\n                 request.indices(), request.templates(), request.indicesOptions(), request.renamePattern(), request.renameReplacement(),\n                 request.settings(), request.masterNodeTimeout(), request.includeGlobalState(), request.partial(), request.includeAliases(),\n-                request.indexSettings(), request.ignoreIndexSettings(), \"restore_snapshot[\" + request.snapshot() + \"]\");\n+                request.indexSettings(), request.ignoreIndexSettings(), \"restore_snapshot[\" + request.snapshot() + \"]\",\n+                request.includeIndices(),\n+                request.includeCustomMetadata(),\n+                request.customMetadataTypes(),\n+                request.includeGlobalSettings(),\n+                request.globalSettings());\n \n         restoreService.restoreSnapshot(restoreRequest, new ActionListener<RestoreCompletionResponse>() {\n             @Override"
  },
  {
    "sha": "d34642b09dc46ae91b4c824bcc2afc753d68ef0f",
    "filename": "server/src/main/java/org/elasticsearch/snapshots/RestoreService.java",
    "status": "modified",
    "additions": 94,
    "deletions": 19,
    "changes": 113,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -203,10 +203,15 @@ public void restoreSnapshot(final RestoreRequest request, final ActionListener<R\n             validateSnapshotRestorable(request.repositoryName, snapshotInfo);\n \n             // Resolve the indices from the snapshot that need to be restored\n-            final List<String> indicesInSnapshot = filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions());\n+            final List<String> indicesInSnapshot = request.includeIndices()\n+                ? filterIndices(snapshotInfo.indices(), request.indices(), request.indicesOptions())\n+                : List.of();\n \n             final Metadata.Builder metadataBuilder;\n-            if (request.includeGlobalState() || request.allTemplates() || (request.templates() != null && request.templates().length > 0)) {\n+            if (request.includeCustomMetadata()\n+                || request.includeGlobalSettings()\n+                || request.allTemplates()\n+                || (request.templates() != null && request.templates().length > 0)) {\n                 metadataBuilder = Metadata.builder(repository.getSnapshotGlobalMetadata(snapshotId));\n             } else {\n                 metadataBuilder = Metadata.builder();\n@@ -362,24 +367,32 @@ public ClusterState execute(ClusterState currentState) {\n                     // Restore templates (but do NOT overwrite existing templates)\n                     restoreTemplates(mdBuilder, currentState);\n \n-                    // Restore global state if needed\n-                    if (request.includeGlobalState()) {\n-                        if (metadata.persistentSettings() != null) {\n-                            Settings settings = metadata.persistentSettings();\n-                            clusterSettings.validateUpdate(settings);\n-                            mdBuilder.persistentSettings(settings);\n-                        }\n-                        if (metadata.templates() != null) {\n-                            // TODO: Should all existing templates be deleted first?\n-                            for (ObjectCursor<IndexTemplateMetadata> cursor : metadata.templates().values()) {\n-                                mdBuilder.put(cursor.value);\n+                    if (request.includeGlobalSettings() && metadata.persistentSettings() != null) {\n+                        Settings settings = metadata.persistentSettings();\n+\n+                        // CrateDB patch to only restore defined settings\n+                        if (request.globalSettings().length > 0) {\n+                            var filteredSettingBuilder = Settings.builder();\n+                            for (String prefix : request.globalSettings()) {\n+                                filteredSettingBuilder.put(settings.filter(s -> s.startsWith(prefix)));\n                             }\n+                            settings = filteredSettingBuilder.build();\n                         }\n-                        if (metadata.customs() != null) {\n-                            for (ObjectObjectCursor<String, Metadata.Custom> cursor : metadata.customs()) {\n-                                if (!RepositoriesMetadata.TYPE.equals(cursor.key)) {\n-                                    // Don't restore repositories while we are working with them\n-                                    // TODO: Should we restore them at the end?\n+\n+                        clusterSettings.validateUpdate(settings);\n+                        mdBuilder.persistentSettings(settings);\n+                    }\n+                    if (request.includeCustomMetadata() && metadata.customs() != null) {\n+                        // CrateDB patch to only restore defined custom metadata types\n+                        List<String> customMetadataTypes = Arrays.asList(request.customMetadataTypes());\n+                        boolean includeAll = customMetadataTypes.size() == 0;\n+\n+                        for (ObjectObjectCursor<String, Metadata.Custom> cursor : metadata.customs()) {\n+                            if (!RepositoriesMetadata.TYPE.equals(cursor.key)) {\n+                                // Don't restore repositories while we are working with them\n+                                // TODO: Should we restore them at the end?\n+\n+                                if (includeAll || customMetadataTypes.contains(cursor.key)) {\n                                     mdBuilder.putCustom(cursor.key, cursor.value);\n                                 }\n                             }\n@@ -952,6 +965,16 @@ public static boolean isRepositoryInUse(ClusterState clusterState, String reposi\n \n         private final String[] ignoreIndexSettings;\n \n+        private final boolean includeIndices;\n+\n+        private final boolean includeCustomMetadata;\n+\n+        private final String[] customMetadataTypes;\n+\n+        private final boolean includeGlobalSettings;\n+\n+        private final String[] globalSettings;\n+\n         /**\n          * Constructs new restore request\n          *\n@@ -969,11 +992,19 @@ public static boolean isRepositoryInUse(ClusterState clusterState, String reposi\n          * @param indexSettings      index settings that should be changed on restore\n          * @param ignoreIndexSettings index settings that shouldn't be restored\n          * @param cause              cause for restoring the snapshot\n+         * @param includeIndices     include any index on restore\n+         * @param customMetadataTypes custom metadata types to restore\n+         * @param globalSettings     global settings to restore\n          */\n         public RestoreRequest(String repositoryName, String snapshotName, String[] indices, String[] templates, IndicesOptions indicesOptions,\n                               String renamePattern, String renameReplacement, Settings settings,\n                               TimeValue masterNodeTimeout, boolean includeGlobalState, boolean partial, boolean includeAliases,\n-                              Settings indexSettings, String[] ignoreIndexSettings, String cause) {\n+                              Settings indexSettings, String[] ignoreIndexSettings, String cause,\n+                              boolean includeIndices,\n+                              boolean includeCustomMetadata,\n+                              String[] customMetadataTypes,\n+                              boolean includeGlobalSettings,\n+                              String[] globalSettings) {\n             this.repositoryName = Objects.requireNonNull(repositoryName);\n             this.snapshotName = Objects.requireNonNull(snapshotName);\n             this.indices = indices;\n@@ -989,6 +1020,11 @@ public RestoreRequest(String repositoryName, String snapshotName, String[] indic\n             this.indexSettings = indexSettings;\n             this.ignoreIndexSettings = ignoreIndexSettings;\n             this.cause = cause;\n+            this.includeIndices = includeIndices;\n+            this.includeCustomMetadata = includeCustomMetadata;\n+            this.customMetadataTypes = customMetadataTypes;\n+            this.includeGlobalSettings = includeGlobalSettings;\n+            this.globalSettings = globalSettings;\n         }\n \n         /**\n@@ -1074,6 +1110,7 @@ public Settings settings() {\n         /**\n          * Returns true if global state should be restore during this restore operation\n          *\n+         * @deprecated  Use {@link #includeGlobalSettings()} or {@link #includeCustomMetadata()} instead.\n          * @return restore global state flag\n          */\n         public boolean includeGlobalState() {\n@@ -1116,6 +1153,44 @@ public Settings indexSettings() {\n             return ignoreIndexSettings;\n         }\n \n+        /**\n+         * Returns true if any index should be restored\n+         */\n+        public boolean includeIndices() {\n+            return includeIndices;\n+        }\n+\n+        /**\n+         * Returns true if custom metadata should be restored\n+         */\n+        public boolean includeCustomMetadata() {\n+            return includeCustomMetadata;\n+        }\n+\n+        /**\n+         * Returns custom metadata types that should be restored\n+         *\n+         * @return  List of custom metadata types\n+         */\n+        public String[] customMetadataTypes() {\n+            return customMetadataTypes;\n+        }\n+\n+        /**\n+         * Returns true if global cluster settings should be restored\n+         */\n+        public boolean includeGlobalSettings() {\n+            return includeGlobalSettings;\n+        }\n+\n+        /**\n+         * Returns global state setting prefixes to include during the restore operation\n+\n+         * @return  List of setting prefix to include\n+         */\n+        public String[] globalSettings() {\n+            return globalSettings;\n+        }\n \n         /**\n          * Return master node timeout"
  },
  {
    "sha": "ff899048b6116655c9511b6028937fef038e937d",
    "filename": "server/src/test/java/io/crate/analyze/SnapshotRestoreAnalyzerTest.java",
    "status": "modified",
    "additions": 112,
    "deletions": 0,
    "changes": 112,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/test/java/io/crate/analyze/SnapshotRestoreAnalyzerTest.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/test/java/io/crate/analyze/SnapshotRestoreAnalyzerTest.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/test/java/io/crate/analyze/SnapshotRestoreAnalyzerTest.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -32,6 +32,7 @@\n import io.crate.metadata.PartitionName;\n import io.crate.metadata.RelationName;\n import io.crate.metadata.Schemas;\n+import io.crate.metadata.settings.AnalyzerSettings;\n import io.crate.planner.PlannerContext;\n import io.crate.planner.node.ddl.CreateSnapshotPlan;\n import io.crate.planner.node.ddl.RestoreSnapshotPlan;\n@@ -53,11 +54,15 @@\n import java.util.Collections;\n import java.util.List;\n \n+import static io.crate.analyze.RestoreSnapshotAnalyzer.METADATA_CUSTOM_TYPE_MAP;\n import static io.crate.analyze.TableDefinitions.TEST_DOC_LOCATIONS_TABLE_DEFINITION;\n import static io.crate.analyze.TableDefinitions.TEST_PARTITIONED_TABLE_DEFINITION;\n import static io.crate.analyze.TableDefinitions.TEST_PARTITIONED_TABLE_PARTITIONS;\n import static io.crate.analyze.TableDefinitions.USER_TABLE_DEFINITION;\n+import static io.crate.testing.Asserts.assertThrows;\n import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.hasEntry;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.nullValue;\n@@ -276,6 +281,9 @@ public void testRestoreSnapshotAll() throws Exception {\n         assertThat(statement.repository(), is(\"my_repo\"));\n         assertThat(statement.snapshot(), is(\"my_snapshot\"));\n         assertThat(statement.restoreTables().isEmpty(), is(true));\n+        assertThat(statement.includeTables(), is(true));\n+        assertThat(statement.includeCustomMetadata(), is(true));\n+        assertThat(statement.includeGlobalSettings(), is(true));\n     }\n \n     @Test\n@@ -286,6 +294,9 @@ public void testRestoreSnapshotSingleTable() throws Exception {\n         var table = statement.restoreTables().iterator().next();\n         assertThat(table.tableIdent(), is(new RelationName(\"custom\", \"restoreme\")));\n         assertThat(table.partitionName(), is(nullValue()));\n+        assertThat(statement.includeTables(), is(true));\n+        assertThat(statement.includeCustomMetadata(), is(false));\n+        assertThat(statement.includeGlobalSettings(), is(false));\n     }\n \n     @Test\n@@ -313,6 +324,9 @@ public void testRestoreSinglePartition() throws Exception {\n         var table = statement.restoreTables().iterator().next();\n         assertThat(table.partitionName(), is(partition));\n         assertThat(table.tableIdent(), is(new RelationName(Schemas.DOC_SCHEMA_NAME, \"parted\")));\n+        assertThat(statement.includeTables(), is(true));\n+        assertThat(statement.includeCustomMetadata(), is(false));\n+        assertThat(statement.includeGlobalSettings(), is(false));\n     }\n \n     @Test\n@@ -341,4 +355,102 @@ public void testRestoreUnknownRepo() throws Exception {\n         expectedException.expectMessage(\"Repository 'unknown_repo' unknown\");\n         analyze(e, \"RESTORE SNAPSHOT unknown_repo.my_snapshot ALL\");\n     }\n+\n+    @Test\n+    public void test_restore_all_tables() {\n+        BoundRestoreSnapshot statement =\n+            analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot TABLES\");\n+        assertThat(statement.repository(), is(\"my_repo\"));\n+        assertThat(statement.snapshot(), is(\"my_snapshot\"));\n+        assertThat(statement.restoreTables().isEmpty(), is(true));\n+        assertThat(statement.includeTables(), is(true));\n+        assertThat(statement.includeCustomMetadata(), is(false));\n+        assertThat(statement.customMetadataTypes().isEmpty(), is(true));\n+        assertThat(statement.includeGlobalSettings(), is(false));\n+        assertThat(statement.globalSettings().isEmpty(), is(true));\n+    }\n+\n+    @Test\n+    public void test_restore_all_metadata() {\n+        BoundRestoreSnapshot statement =\n+            analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot METADATA\");\n+        assertThat(statement.repository(), is(\"my_repo\"));\n+        assertThat(statement.snapshot(), is(\"my_snapshot\"));\n+        assertThat(statement.restoreTables().isEmpty(), is(true));\n+        assertThat(statement.includeTables(), is(false));\n+        assertThat(statement.includeCustomMetadata(), is(true));\n+        assertThat(statement.customMetadataTypes().isEmpty(), is(true));\n+        assertThat(statement.includeGlobalSettings(), is(true));\n+        assertThat(statement.globalSettings(), contains(AnalyzerSettings.CUSTOM_ANALYSIS_SETTINGS_PREFIX));\n+    }\n+\n+    @Test\n+    public void test_restore_analyzers() {\n+        BoundRestoreSnapshot statement =\n+            analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot ANALYZERS\");\n+        assertThat(statement.repository(), is(\"my_repo\"));\n+        assertThat(statement.snapshot(), is(\"my_snapshot\"));\n+        assertThat(statement.restoreTables().isEmpty(), is(true));\n+        assertThat(statement.includeTables(), is(false));\n+        assertThat(statement.includeCustomMetadata(), is(false));\n+        assertThat(statement.customMetadataTypes().isEmpty(), is(true));\n+        assertThat(statement.includeGlobalSettings(), is(true));\n+        assertThat(statement.globalSettings(), contains(AnalyzerSettings.CUSTOM_ANALYSIS_SETTINGS_PREFIX));\n+    }\n+\n+    @Test\n+    public void test_restore_custom_metadata() {\n+        for (var entry : METADATA_CUSTOM_TYPE_MAP.entrySet()) {\n+            BoundRestoreSnapshot statement =\n+                analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot \" + entry.getKey());\n+            assertThat(statement.repository(), is(\"my_repo\"));\n+            assertThat(statement.snapshot(), is(\"my_snapshot\"));\n+            assertThat(statement.restoreTables().isEmpty(), is(true));\n+            assertThat(statement.includeTables(), is(false));\n+            assertThat(statement.includeCustomMetadata(), is(true));\n+            assertThat(statement.customMetadataTypes(), contains(entry.getValue()));\n+            assertThat(statement.includeGlobalSettings(), is(false));\n+            assertThat(statement.globalSettings().isEmpty(), is(true));\n+        }\n+    }\n+\n+    @Test\n+    public void test_restore_multiple_metadata() {\n+        BoundRestoreSnapshot statement =\n+            analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot USERS, PRIVILEGES\");\n+        assertThat(statement.repository(), is(\"my_repo\"));\n+        assertThat(statement.snapshot(), is(\"my_snapshot\"));\n+        assertThat(statement.includeTables(), is(false));\n+        assertThat(statement.includeCustomMetadata(), is(true));\n+        assertThat(statement.customMetadataTypes(),\n+                   containsInAnyOrder(\n+                       METADATA_CUSTOM_TYPE_MAP.get(\"USERS\"),\n+                       METADATA_CUSTOM_TYPE_MAP.get(\"PRIVILEGES\")\n+                   )\n+        );\n+        assertThat(statement.includeGlobalSettings(), is(false));\n+        assertThat(statement.globalSettings().isEmpty(), is(true));\n+    }\n+\n+    @Test\n+    public void test_restore_tables_and_custom_metadata() {\n+        BoundRestoreSnapshot statement =\n+            analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot TABLES, VIEWS\");\n+        assertThat(statement.repository(), is(\"my_repo\"));\n+        assertThat(statement.snapshot(), is(\"my_snapshot\"));\n+        assertThat(statement.includeTables(), is(true));\n+        assertThat(statement.includeCustomMetadata(), is(true));\n+        assertThat(statement.customMetadataTypes(), contains(METADATA_CUSTOM_TYPE_MAP.get(\"VIEWS\")));\n+        assertThat(statement.includeGlobalSettings(), is(false));\n+        assertThat(statement.globalSettings().isEmpty(), is(true));\n+    }\n+\n+    @Test\n+    public void test_restore_unknown_metadata() {\n+        assertThrows(\n+            () -> analyze(e, \"RESTORE SNAPSHOT my_repo.my_snapshot UNKNOWN_META\"),\n+            IllegalArgumentException.class,\n+            \"Unknown metadata type 'UNKNOWN_META'\"\n+        );\n+    }\n }"
  },
  {
    "sha": "a2fcd462e8b2bb569da4e0976e5382ac1e219639",
    "filename": "server/src/test/java/io/crate/expression/tablefunctions/PgGetKeywordsFunctionTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/test/java/io/crate/expression/tablefunctions/PgGetKeywordsFunctionTest.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/test/java/io/crate/expression/tablefunctions/PgGetKeywordsFunctionTest.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/test/java/io/crate/expression/tablefunctions/PgGetKeywordsFunctionTest.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -42,7 +42,7 @@ public void test_pg_get_keywords() {\n             rows.add(new RowN(it.next().materialize()));\n         }\n         rows.sort(Comparator.comparing(x -> ((String) x.get(0))));\n-        assertThat(rows.size(), is(244));\n+        assertThat(rows.size(), is(245));\n         Row row = rows.get(0);\n \n         assertThat(row.get(0), is(\"add\"));"
  },
  {
    "sha": "ffeccc1d011ec79d8ec928e0583d4b8b7c1e698d",
    "filename": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java",
    "status": "modified",
    "additions": 198,
    "deletions": 39,
    "changes": 237,
    "blob_url": "https://github.com/crate/crate/blob/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java",
    "raw_url": "https://github.com/crate/crate/raw/bba5bcac0c054607b94c411d5980d50bda31c7c1/server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/crate/crate/contents/server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java?ref=bba5bcac0c054607b94c411d5980d50bda31c7c1",
    "patch": "@@ -22,49 +22,55 @@\n \n package io.crate.integrationtests;\n \n-import static io.crate.protocols.postgres.PGErrorStatus.INTERNAL_ERROR;\n-import static io.crate.testing.Asserts.assertThrows;\n-import static io.crate.testing.SQLErrorMatcher.isSQLError;\n-import static io.netty.handler.codec.http.HttpResponseStatus.CONFLICT;\n-import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;\n-import static io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.lessThanOrEqualTo;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.StandardOpenOption;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.concurrent.CountDownLatch;\n-\n+import io.crate.common.unit.TimeValue;\n+import io.crate.expression.udf.UserDefinedFunctionService;\n+import io.crate.testing.SQLResponse;\n import org.apache.lucene.util.SetOnce;\n import org.elasticsearch.action.ActionFuture;\n import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n import org.elasticsearch.cluster.SnapshotsInProgress;\n import org.elasticsearch.cluster.metadata.IndexMetadata;\n import org.elasticsearch.common.collect.ImmutableOpenMap;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n import org.elasticsearch.repositories.RepositoriesService;\n import org.elasticsearch.repositories.Repository;\n import org.elasticsearch.repositories.RepositoryData;\n import org.elasticsearch.snapshots.Snapshot;\n import org.elasticsearch.snapshots.SnapshotId;\n import org.elasticsearch.snapshots.SnapshotInfo;\n import org.elasticsearch.snapshots.SnapshotState;\n+import org.elasticsearch.test.MockKeywordPlugin;\n import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n \n-import io.crate.common.unit.TimeValue;\n-import io.crate.testing.SQLResponse;\n-import io.crate.testing.TestingHelpers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static com.carrotsearch.randomizedtesting.RandomizedTest.$;\n+import static io.crate.protocols.postgres.PGErrorStatus.INTERNAL_ERROR;\n+import static io.crate.testing.Asserts.assertThrows;\n+import static io.crate.testing.SQLErrorMatcher.isSQLError;\n+import static io.crate.testing.TestingHelpers.printedTable;\n+import static io.netty.handler.codec.http.HttpResponseStatus.CONFLICT;\n+import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+import static io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n \n public class SnapshotRestoreIntegrationTest extends SQLTransportIntegrationTest {\n \n@@ -83,8 +89,17 @@ protected Settings nodeSettings(int nodeOrdinal) {\n             .build();\n     }\n \n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        var plugins = new ArrayList<>(super.nodePlugins());\n+        plugins.add(MockKeywordPlugin.class);\n+        return plugins;\n+    }\n+\n+    @Override\n     @Before\n-    public void createRepository() throws Exception {\n+    public void setUp() throws Exception {\n+        super.setUp();\n         defaultRepositoryLocation = TEMPORARY_FOLDER.newFolder();\n         execute(\"CREATE REPOSITORY \" + REPOSITORY_NAME + \" TYPE \\\"fs\\\" with (location=?, compress=True)\",\n             new Object[]{defaultRepositoryLocation.getAbsolutePath()});\n@@ -93,6 +108,32 @@ public void createRepository() throws Exception {\n             \"CREATE REPOSITORY my_repo_ro TYPE \\\"fs\\\" with (location=?, compress=true, readonly=true)\",\n             new Object[]{defaultRepositoryLocation.getAbsolutePath()}\n         );\n+\n+        var dummyLang = new UserDefinedFunctionsIntegrationTest.DummyLang();\n+        Iterable<UserDefinedFunctionService> udfServices = internalCluster().getInstances(UserDefinedFunctionService.class);\n+        for (UserDefinedFunctionService udfService : udfServices) {\n+            udfService.registerLanguage(dummyLang);\n+        }\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        var stmts = List.of(\n+            \"REVOKE ALL FROM my_user\",\n+            \"DROP ANALYZER a1\",\n+            \"DROP FUNCTION custom(string)\"\n+        );\n+        for (var stmt : stmts) {\n+            try {\n+                execute(stmt);\n+            } catch (Exception e) {\n+                // pass, exception may raise cause entity does not exist\n+            }\n+        }\n+\n+        execute(\"DROP USER IF EXISTS my_user\");\n+        execute(\"DROP VIEW IF EXISTS my_view\");\n+        execute(\"DROP TABLE IF EXISTS my_table\");\n     }\n \n     private void createTableAndSnapshot(String tableName, String snapshotName) {\n@@ -171,8 +212,8 @@ public void testCreateSnapshot() throws Exception {\n         assertThat(response.rowCount(), is(1L));\n \n         execute(\"select name, \\\"repository\\\", concrete_indices, state from sys.snapshots order by 2\");\n-        assertThat(TestingHelpers.printedTable(response.rows()),\n-            is(String.format(\n+        assertThat(printedTable(response.rows()),\n+                   is(String.format(\n                 \"my_snapshot| my_repo| [%s.backmeup]| SUCCESS\\n\" +\n                 // shows up twice because both repos have the same data path\n                 \"my_snapshot| my_repo_ro| [%s.backmeup]| SUCCESS\\n\",\n@@ -217,8 +258,8 @@ public void testCreateSnapshotFromPartition() throws Exception {\n         assertThat(response.rowCount(), is(1L));\n \n         execute(\"select name, \\\"repository\\\", concrete_indices, state from sys.snapshots order by 2\");\n-        assertThat(TestingHelpers.printedTable(response.rows()),\n-            is(\"my_snapshot| my_repo| [custom..partitioned.backmeup.04130]| SUCCESS\\n\" +\n+        assertThat(printedTable(response.rows()),\n+                   is(\"my_snapshot| my_repo| [custom..partitioned.backmeup.04130]| SUCCESS\\n\" +\n                // shows up twice because the repos have the same fs path.\n                \"my_snapshot| my_repo_ro| [custom..partitioned.backmeup.04130]| SUCCESS\\n\"));\n     }\n@@ -287,7 +328,7 @@ public void testSnapshotWithMetadataDoesNotDeleteExistingStuff() throws Exceptio\n         execute(\"restore snapshot \" + snapshotName() + \" ALL with (wait_for_completion=true)\");\n \n         execute(\"select * from survivor order by bla\");\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(\n+        assertThat(printedTable(response.rows()), is(\n             \"bar| 1.4\\n\" +\n             \"baz| 1.2\\n\" +\n             \"foo| 1.2\\n\"));\n@@ -370,7 +411,7 @@ public void testRestoreSnapshotSinglePartition() throws Exception {\n                 \"wait_for_completion=true)\");\n \n         execute(\"select date from my_parted_table\");\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(\"0\\n\"));\n+        assertThat(printedTable(response.rows()), is(\"0\\n\"));\n     }\n \n     @Test\n@@ -384,7 +425,7 @@ public void testRestoreSinglePartitionSnapshotIntoDroppedPartition() throws Exce\n                 \"ignore_unavailable=false, \" +\n                 \"wait_for_completion=true)\");\n         execute(\"select date from parted_table order by id\");\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(\"0\\n1445941740000\\n626572800000\\n\"));\n+        assertThat(printedTable(response.rows()), is(\"0\\n1445941740000\\n626572800000\\n\"));\n     }\n \n     @Test\n@@ -398,7 +439,7 @@ public void testRestoreSinglePartitionSnapshotIntoDroppedTable() throws Exceptio\n                 \"ignore_unavailable=false, \" +\n                 \"wait_for_completion=true)\");\n         execute(\"select date from parted_table order by id\");\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(\"0\\n\"));\n+        assertThat(printedTable(response.rows()), is(\"0\\n\"));\n     }\n \n     @Test\n@@ -412,7 +453,7 @@ public void testRestoreFullPartedTableSnapshotSinglePartitionIntoDroppedTable()\n                 \"wait_for_completion=true)\");\n \n         execute(\"select date from my_parted_table\");\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(\"0\\n\"));\n+        assertThat(printedTable(response.rows()), is(\"0\\n\"));\n     }\n \n     @Test\n@@ -426,7 +467,7 @@ public void testRestoreSnapshotIgnoreUnavailable() throws Exception {\n                 \"wait_for_completion=true)\");\n         execute(\"select table_schema || '.' || table_name from information_schema.tables where table_schema = ?\",\n             new Object[]{sqlExecutor.getCurrentSchema()});\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(getFqn(\"my_table\") + \"\\n\"));\n+        assertThat(printedTable(response.rows()), is(getFqn(\"my_table\") + \"\\n\"));\n     }\n \n     @Test\n@@ -443,7 +484,7 @@ public void testRestoreOnlyOneTable() throws Exception {\n \n         execute(\"select table_schema || '.' || table_name from information_schema.tables where table_schema = ? order by 1\",\n             new Object[]{sqlExecutor.getCurrentSchema()});\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(getFqn(\"my_table_1\") + \"\\n\" + getFqn(\"my_table_2\") + \"\\n\"));\n+        assertThat(printedTable(response.rows()), is(getFqn(\"my_table_1\") + \"\\n\" + getFqn(\"my_table_2\") + \"\\n\"));\n     }\n \n     @Test\n@@ -465,7 +506,7 @@ public void test_parallel_restore_operations() throws Exception {\n                 \"select table_name from information_schema.tables where table_schema = ? order by 1\",\n                 new Object[] { sqlExecutor.getCurrentSchema() }\n             );\n-            assertThat(TestingHelpers.printedTable(response.rows()), is(\n+            assertThat(printedTable(response.rows()), is(\n                 \"my_table_1\\n\" +\n                 \"my_table_2\\n\"\n             ));\n@@ -491,7 +532,7 @@ public void testRestoreOnlyOnePartitionedTable() throws Exception {\n                 \"wait_for_completion=true)\");\n \n         execute(\"select table_schema || '.' || table_name from information_schema.tables where table_schema = ?\", new Object[]{sqlExecutor.getCurrentSchema()});\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(getFqn(\"my_parted_1\") + \"\\n\"));\n+        assertThat(printedTable(response.rows()), is(getFqn(\"my_parted_1\") + \"\\n\"));\n     }\n \n     @Test\n@@ -506,7 +547,7 @@ public void testRestoreEmptyPartitionedTableUsingALL() throws Exception {\n         ensureYellow();\n \n         execute(\"select table_schema || '.' || table_name from information_schema.tables where table_schema = ?\", new Object[]{sqlExecutor.getCurrentSchema()});\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(getFqn(\"employees\") + \"\\n\"));\n+        assertThat(printedTable(response.rows()), is(getFqn(\"employees\") + \"\\n\"));\n     }\n \n     @Test\n@@ -521,7 +562,7 @@ public void testRestoreEmptyPartitionedTable() throws Exception {\n         ensureYellow();\n \n         execute(\"select table_schema || '.' || table_name from information_schema.tables where table_schema = ?\", new Object[]{sqlExecutor.getCurrentSchema()});\n-        assertThat(TestingHelpers.printedTable(response.rows()), is(getFqn(\"employees\") + \"\\n\"));\n+        assertThat(printedTable(response.rows()), is(getFqn(\"employees\") + \"\\n\"));\n     }\n \n     @Test\n@@ -595,6 +636,124 @@ public void test_snapshot_with_corrupted_shard_index_file() throws Exception {\n         assertSnapShotState(snapShotName2, SnapshotState.PARTIAL);\n     }\n \n+    @Test\n+    public void test_restore_all_restores_complete_state() throws Exception {\n+        createSnapshotWithTablesAndMetadata();\n+\n+        // restore ALL\n+        execute(\"RESTORE SNAPSHOT \" + snapshotName() + \" ALL WITH (wait_for_completion=true)\");\n+        waitNoPendingTasksOnAll();\n+\n+        execute(\"select table_name from information_schema.tables where table_name = 'my_table'\");\n+        assertThat(printedTable(response.rows()), is(\"my_table\\n\"));\n+\n+        execute(\"SELECT table_name FROM information_schema.views WHERE table_name = 'my_view'\");\n+        assertThat(printedTable(response.rows()), is(\"my_view\\n\"));\n+\n+        execute(\"select name from sys.users where name = 'my_user'\");\n+        assertThat(printedTable(response.rows()), is(\"my_user\\n\"));\n+\n+        execute(\"SELECT type FROM sys.privileges WHERE grantee = 'my_user'\");\n+        assertThat(printedTable(response.rows()), is(\"DQL\\n\"));\n+\n+        execute(\"SELECT routine_name, routine_type FROM information_schema.routines WHERE\" +\n+                \" routine_name IN ('a1', 'custom') ORDER BY 1\");\n+        assertThat(printedTable(response.rows()), is(\"a1| ANALYZER\\n\" +\n+                                                     \"custom| FUNCTION\\n\"));\n+    }\n+\n+    @Test\n+    public void test_restore_all_tables_only() throws Exception {\n+        createTable(\"t2\", true);\n+        createSnapshotWithTablesAndMetadata();\n+        execute(\"drop table t2\");\n+\n+        // restore all tables\n+        execute(\"RESTORE SNAPSHOT \" + snapshotName() + \" TABLES WITH (wait_for_completion=true)\");\n+        waitNoPendingTasksOnAll();\n+\n+        execute(\"select table_name from information_schema.tables where table_schema = ? order by 1\",\n+                $(sqlExecutor.getCurrentSchema()));\n+        assertThat(printedTable(response.rows()), is(\"my_table\\n\" +\n+                                                     \"t2\\n\"));\n+    }\n+\n+    @Test\n+    public void test_restore_metadata_only_does_not_restore_tables() throws Exception {\n+        createSnapshotWithTablesAndMetadata();\n+\n+        // restore METADATA only\n+        execute(\"RESTORE SNAPSHOT \" + snapshotName() + \" METADATA WITH (wait_for_completion=true)\");\n+        waitNoPendingTasksOnAll();\n+\n+        execute(\"SELECT table_name FROM information_schema.views WHERE table_name = 'my_view'\");\n+        assertThat(printedTable(response.rows()), is(\"my_view\\n\"));\n+\n+        execute(\"SELECT name FROM sys.users WHERE name = 'my_user'\");\n+        assertThat(printedTable(response.rows()), is(\"my_user\\n\"));\n+\n+        execute(\"SELECT type FROM sys.privileges WHERE grantee = 'my_user'\");\n+        assertThat(printedTable(response.rows()), is(\"DQL\\n\"));\n+\n+        execute(\"SELECT routine_name, routine_type FROM information_schema.routines WHERE\" +\n+                \" routine_name IN ('a1', 'custom') ORDER BY 1\");\n+        assertThat(printedTable(response.rows()), is(\"a1| ANALYZER\\n\" +\n+                                                     \"custom| FUNCTION\\n\"));\n+\n+        // NO tables must be restored\n+        execute(\"SELECT table_name FROM information_schema.tables WHERE table_name = 'my_table'\");\n+        assertThat(response.rowCount(), is(0L));\n+\n+    }\n+\n+    @Test\n+    public void test_restore_analyzers_only() throws Exception {\n+        createSnapshotWithTablesAndMetadata();\n+\n+        execute(\"RESTORE SNAPSHOT \" + snapshotName() + \" ANALYZERS WITH (wait_for_completion=true)\");\n+        waitNoPendingTasksOnAll();\n+\n+        execute(\"SELECT routine_name, routine_type FROM information_schema.routines WHERE\" +\n+                \" routine_name IN ('a1', 'custom') ORDER BY 1\");\n+        assertThat(printedTable(response.rows()), is(\"a1| ANALYZER\\n\"));\n+\n+        // All other MUST NOT be restored\n+        execute(\"SELECT table_name FROM information_schema.tables WHERE table_name = 'my_table'\");\n+        assertThat(response.rowCount(), is(0L));\n+\n+        execute(\"SELECT table_name FROM information_schema.views WHERE table_name = 'my_view'\");\n+        assertThat(response.rowCount(), is(0L));\n+\n+        execute(\"SELECT name FROM sys.users WHERE name = 'my_user'\");\n+        assertThat(response.rowCount(), is(0L));\n+\n+        execute(\"SELECT type FROM sys.privileges WHERE grantee = 'my_user'\");\n+        assertThat(response.rowCount(), is(0L));\n+    }\n+\n+    private void createSnapshotWithTablesAndMetadata() throws Exception {\n+        createTable(\"my_table\", false);\n+        // creates custom metadata\n+        execute(\"CREATE USER my_user\");\n+        execute(\"GRANT DQL TO my_user\");\n+        execute(\"CREATE VIEW my_view AS SELECT * FROM my_table LIMIT 1\");\n+        execute(\"CREATE FUNCTION custom(string) RETURNS STRING LANGUAGE dummy_lang AS '42'\");\n+        // creates persistent cluster settings\n+        execute(\"CREATE ANALYZER a1 (TOKENIZER keyword)\");\n+\n+        execute(\"CREATE SNAPSHOT \" + snapshotName() + \" ALL WITH (wait_for_completion=true)\");\n+        assertThat(response.rowCount(), is(1L));\n+        waitNoPendingTasksOnAll();\n+\n+        // drop all created\n+        execute(\"REVOKE ALL FROM my_user\");\n+        execute(\"DROP USER my_user\");\n+        execute(\"DROP VIEW my_view\");\n+        execute(\"DROP TABLE my_table\");\n+        execute(\"DROP ANALYZER a1\");\n+        execute(\"DROP FUNCTION custom(string)\");\n+    }\n+\n     private void assertSnapShotState(String snapShotName, SnapshotState state) {\n         execute(\n             \"SELECT state, array_length(concrete_indices, 1) FROM sys.snapshots where name = ? and repository = ?\","
  }
]
