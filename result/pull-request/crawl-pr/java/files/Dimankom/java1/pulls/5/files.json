[
  {
    "sha": "0c1c4a68f7beb4fb47e38667c0714767d93b1037",
    "filename": "src/main/java/Lesson4/homework4/GameXOTry3.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/Dimankom/java1/blob/96685532489aa7159e03ce7d246dc6b7da726e10/src/main/java/Lesson4/homework4/GameXOTry3.java",
    "raw_url": "https://github.com/Dimankom/java1/raw/96685532489aa7159e03ce7d246dc6b7da726e10/src/main/java/Lesson4/homework4/GameXOTry3.java",
    "contents_url": "https://api.github.com/repos/Dimankom/java1/contents/src/main/java/Lesson4/homework4/GameXOTry3.java?ref=96685532489aa7159e03ce7d246dc6b7da726e10",
    "patch": "@@ -0,0 +1,130 @@\n+package Lesson4.homework4;\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class GameXOTry3 {\n+    static final int SIZE = 3;\n+    //    static final int DOT_TO_WIN = 3;\n+    static final char DOT_X = 'X';\n+    static final char DOT_O = 'O';\n+    static final char DOT_EMPTY = '_';\n+\n+    static char[][] map;\n+\n+    static Random random = new Random();\n+    static Scanner sc = new Scanner(System.in);\n+\n+    /*____________________________________________________________________________*/\n+    public static void main(String[] args) {\n+        initMap();\n+        printMap();\n+        while (true) {\n+            humanTurn();\n+            printMap();\n+            if (checkWin(DOT_X)) {\n+                System.out.println(\"Человек Победил!!!\");\n+                break;\n+            }\n+            if (isFull()) {\n+                System.out.println(\"Ничья\");\n+                break;\n+            }\n+            aiTurn();\n+            printMap();\n+            if (checkWin(DOT_O)) {\n+                System.out.println(\"Компьютер Победил!!!\");\n+                break;\n+            }\n+            if (isFull()) {\n+                System.out.println(\"Ничья\");\n+                break;\n+            }\n+        }\n+\n+\n+    }\n+\n+    /*__________________________________________________________________________________*/\n+    public static void initMap() {\n+        map = new char[SIZE][SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            for (int j = 0; j < SIZE; j++) {\n+                map[i][j] = DOT_EMPTY;\n+            }\n+\n+        }\n+    }\n+\n+    public static void printMap() {\n+        System.out.print(\"  \");\n+        for (int i = 1; i <= SIZE; i++) {\n+            System.out.print(i + \" \");\n+        }\n+        System.out.println();\n+        for (int i = 0; i < SIZE; i++) {\n+            System.out.print(i + 1 + \" \");\n+            for (int j = 0; j < SIZE; j++) {\n+                System.out.print(map[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    // Ход человека.\n+    public static void humanTurn() {\n+        int x, y;\n+        do {\n+            System.out.println(\"Введите координаты в формате Y X\");\n+            y = sc.nextInt() - 1;\n+            x = sc.nextInt() - 1;\n+        }\n+        while (!isCellValid(y, x));\n+        map[y][x] = DOT_X;\n+    }\n+\n+    // Ход компьютера.\n+    public static void aiTurn() {\n+        int x, y;\n+        do {\n+            y = random.nextInt(SIZE);\n+            x = random.nextInt(SIZE);\n+        }\n+        while (!isCellValid(y, x));\n+        map[y][x] = DOT_O;\n+    }\n+\n+    public static boolean isFull() {\n+        for (int i = 0; i < SIZE; i++) {\n+            for (int j = 0; j < SIZE; j++) {\n+                if (map[i][j] == DOT_EMPTY) {\n+                    return false;\n+                }\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+\n+    public static boolean isCellValid(int y, int x) {\n+        if (x < 0 || y < 0 || x >= SIZE || y >= SIZE) {\n+            return false;\n+        }\n+        return map[y][x] == DOT_EMPTY;\n+    }\n+\n+    // Проверка , кто победил.\n+    public static boolean checkWin(char symbol) {\n+        if (map[0][0] == symbol && map[0][1] == symbol && map[0][2] == symbol) return true;\n+        if (map[1][0] == symbol && map[1][1] == symbol && map[1][2] == symbol) return true;\n+        if (map[2][0] == symbol && map[2][1] == symbol && map[2][2] == symbol) return true;\n+\n+        if (map[0][0] == symbol && map[1][0] == symbol && map[2][0] == symbol) return true;\n+        if (map[0][1] == symbol && map[1][1] == symbol && map[2][1] == symbol) return true;\n+        if (map[0][2] == symbol && map[1][2] == symbol && map[2][2] == symbol) return true;\n+\n+        if (map[0][0] == symbol && map[1][1] == symbol && map[2][2] == symbol) return true;\n+        return map[2][0] == symbol && map[1][1] == symbol && map[0][2] == symbol;\n+    }\n+}"
  }
]
