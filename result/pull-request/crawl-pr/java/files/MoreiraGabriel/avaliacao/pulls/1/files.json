[
  {
    "sha": "8b393b60fa6317085a045b61ca8012dc6028a513",
    "filename": "docker-compose.yml",
    "status": "modified",
    "additions": 14,
    "deletions": 1,
    "changes": 15,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/docker-compose.yml",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/docker-compose.yml?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -14,4 +14,17 @@ services:\n     ports:\n       - 5432:5432\n     volumes:\n-      - ./postgresql/data:/data\n\\ No newline at end of file\n+      - ./postgresql/data:/data\n+\n+##  MongoDB\n+    mongodb:\n+      image: mongo:4.4.4\n+      container_name: mongodb\n+      restart: always\n+      environment:\n+        MONGO_INITDB_ROOT_USERNAME: root\n+        MONGO_INITDB_ROOT_PASSWORD: root\n+      ports:\n+        - 27017:27017\n+      volumes:\n+        - ./mongodb:/data/db\n\\ No newline at end of file"
  },
  {
    "sha": "c8f2a96d4fd7cc38bd46a628ce12c105038c74ac",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 32,
    "deletions": 11,
    "changes": 43,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/pom.xml",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/pom.xml",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/pom.xml?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -17,14 +17,6 @@\n \t\t<java.version>1.8</java.version>\n \t</properties>\n \t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-data-jdbc</artifactId>\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n-\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-web</artifactId>\n@@ -36,11 +28,34 @@\n \t\t\t<scope>runtime</scope>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t\n \t\t<dependency>\n-\t\t\t<groupId>org.postgresql</groupId>\n-\t\t\t<artifactId>postgresql</artifactId>\n-\t\t\t<scope>runtime</scope>\n+\t\t    <groupId>org.springframework.boot</groupId>\n+\t\t    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n+\t\t</dependency>\n+\t\t\n+\t\t<dependency>\n+\t\t    <groupId>org.mongodb</groupId>\n+\t\t    <artifactId>mongodb-driver-core</artifactId>\t\t    \n \t\t</dependency>\n+\t\t\n+\t\t<dependency>\n+\t\t    <groupId>org.jongo</groupId>\n+\t\t    <artifactId>jongo</artifactId>\n+\t\t    <version>1.3.0</version>\n+\t\t</dependency>\n+\t\t\n+\t\t<dependency>\n+\t\t\t<groupId>org.modelmapper</groupId>\n+\t\t\t<artifactId>modelmapper</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t\n+\t\t<dependency>\n+\t\t    <groupId>org.springframework.data</groupId>\n+\t\t    <artifactId>spring-data-jpa</artifactId>\n+\t\t</dependency>\n+\n \t\t<dependency>\n \t\t\t<groupId>org.projectlombok</groupId>\n \t\t\t<artifactId>lombok</artifactId>\n@@ -61,6 +76,12 @@\n \t\t    <artifactId>springfox-swagger-ui</artifactId>\n \t\t    <version>2.9.2</version>\n \t\t</dependency>\t\n+\t\n+\t\t<dependency>\n+\t\t    <groupId>org.junit.vintage</groupId>\n+\t\t    <artifactId>junit-vintage-engine</artifactId>\n+\t\t    <scope>test</scope>\n+\t\t</dependency>\n \t</dependencies>\n \n \t<build>"
  },
  {
    "sha": "af2a7dadf2e0666ac5f381b9ec6eae65ba156e4c",
    "filename": "src/main/java/br/com/compasso/avaliacao/model/Cidade.java",
    "status": "modified",
    "additions": 9,
    "deletions": 17,
    "changes": 26,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/Cidade.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/Cidade.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/model/Cidade.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -1,35 +1,27 @@\n package br.com.compasso.avaliacao.model;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.OneToMany;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.Document;\n \n import br.com.compasso.avaliacao.model.dto.request.CidadeRequest;\n import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n-@Entity\n+@Document(\"cidades\")\n @Data\n @NoArgsConstructor\n @AllArgsConstructor\n public class Cidade {\n \n-\t@Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n-\tprivate Long id;\n+\t@Id\n+\tprivate String id;\n \tprivate String nome;\n \tprivate String estado;\n-\t@OneToMany(mappedBy = \"cidade\")\n-\tprivate List<Cliente> cliente = new ArrayList<>();\n-\t\n+\n \tpublic Cidade(CidadeRequest request) {\n-\t\tthis.id = request.getId();\n \t\tthis.nome = request.getNome();\n-\t\tthis.estado = request.getEstado();\n+\t\tthis.estado = request.getEstado().toUpperCase();\n \t}\n-}\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "cf9866116d6b6b0efaa4570909b68270611659c0",
    "filename": "src/main/java/br/com/compasso/avaliacao/model/Cliente.java",
    "status": "modified",
    "additions": 23,
    "deletions": 11,
    "changes": 34,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/Cliente.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/Cliente.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/model/Cliente.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -2,30 +2,42 @@\n \n import java.time.LocalDateTime;\n \n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.ManyToOne;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.Document;\n \n+import br.com.compasso.avaliacao.model.dto.request.ClienteRequest;\n import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n-@Entity\n+@Document(\"clientes\")\n @Data\n @NoArgsConstructor\n @AllArgsConstructor\n public class Cliente {\n \t\n-\t@Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n-\tprivate Long id;\n+\t@Id \n+\tprivate String id;\n \tprivate String nome;\n \tprivate String sexo;\n \tprivate LocalDateTime dataNascimento;\n \tprivate Long idade;\n-\t@ManyToOne\n-\t@JoinColumn(name = \"id_cidade\")\n \tprivate Cidade cidade;\n+\t\n+\tpublic Cliente(String nome, String sexo, LocalDateTime dataNascimento, Long idade, Cidade cidade) {\n+\t\tthis.nome = nome;\n+\t\tthis.sexo = sexo;\n+\t\tthis.dataNascimento = dataNascimento;\n+\t\tthis.idade = idade;\n+\t\tthis.cidade = cidade;\n+\t}\n+\t\n+\tpublic Cliente(ClienteRequest request) {\n+\t\tthis.nome = request.getNome();\n+\t\tthis.sexo = request.getSexo();\n+\t\tthis.dataNascimento = request.getDataNascimento();\n+\t\tthis.idade = request.getIdade();\n+\t\tthis.cidade = null;\n+\t}\t\n+\t\n }"
  },
  {
    "sha": "19c282938824bc24e9e85747e6e58e2d28f5ce9b",
    "filename": "src/main/java/br/com/compasso/avaliacao/model/dto/CidadeDto.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/CidadeDto.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/CidadeDto.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/model/dto/CidadeDto.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -11,7 +11,7 @@\n @NoArgsConstructor\n public class CidadeDto {\n \n-\tprivate Long id;\n+\tprivate String id;\n \tprivate String nome;\n \tprivate String estado;\n \t"
  },
  {
    "sha": "9b9672a485f5ef7700d4f1273bb3f1a12ada463e",
    "filename": "src/main/java/br/com/compasso/avaliacao/model/dto/ClienteDto.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/ClienteDto.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/ClienteDto.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/model/dto/ClienteDto.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -12,7 +12,7 @@\n @NoArgsConstructor\n public class ClienteDto {\n \t\n-\tprivate Long id;\n+\tprivate String id;\n \tprivate String nome;\n \tprivate String sexo;\n \tprivate LocalDateTime dataNascimento;"
  },
  {
    "sha": "281a042d017547ed423227b40dd4e7454f7efe26",
    "filename": "src/main/java/br/com/compasso/avaliacao/model/dto/request/CidadeRequest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/request/CidadeRequest.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/request/CidadeRequest.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/model/dto/request/CidadeRequest.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -11,12 +11,11 @@\n @NoArgsConstructor\n public class CidadeRequest {\n \n-\tprivate Long id;\n+\tprivate String id;\n \tprivate String nome;\n \tprivate String estado;\n \t\n \tpublic CidadeRequest(Cidade cidade){\n-\t\tthis.id = cidade.getId();\n \t\tthis.nome = cidade.getNome();\n \t\tthis.estado = cidade.getEstado();\t\t\n \t}"
  },
  {
    "sha": "b5a49bab7735d43d9e43d566cd87448d0384756e",
    "filename": "src/main/java/br/com/compasso/avaliacao/model/dto/request/NomeRequest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/request/NomeRequest.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/model/dto/request/NomeRequest.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/model/dto/request/NomeRequest.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -9,5 +9,5 @@\n @AllArgsConstructor\n public class NomeRequest {\n \n-\tString nome;\n+\tprivate String nome;\n }"
  },
  {
    "sha": "ac8207b3fe0fdad3154b079308e94951b164b2c9",
    "filename": "src/main/java/br/com/compasso/avaliacao/repository/CidadeRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 11,
    "changes": 15,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/repository/CidadeRepository.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/repository/CidadeRepository.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/repository/CidadeRepository.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -3,26 +3,19 @@\n import java.util.List;\n import java.util.Optional;\n \n-import javax.transaction.Transactional;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n-import org.springframework.data.jpa.repository.Query;\n-import org.springframework.data.repository.query.Param;\n+import org.springframework.data.mongodb.repository.MongoRepository;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n import br.com.compasso.avaliacao.model.Cidade;\n \n \n @Repository\n @Transactional\n-public interface CidadeRepository extends JpaRepository<Cidade, Long> {\n+public interface CidadeRepository extends MongoRepository<Cidade, String> {\n \n \tOptional<List<Cidade>> findByNome(String nome);\n \t\n-\t@Query(value = \"SELECT * FROM cidade c WHERE c.nome = :nome\", nativeQuery = true)\n-\tOptional<Cidade> findCidade(@Param(\"nome\") String nome);\n-\t\n \tList<Cidade> findByEstado(String estado);\n \t\n-\t\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "612ed4d3e2bc6f46d42232285c4760bb5ea75579",
    "filename": "src/main/java/br/com/compasso/avaliacao/repository/ClienteRepository.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/repository/ClienteRepository.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/repository/ClienteRepository.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/repository/ClienteRepository.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -2,16 +2,15 @@\n \n import java.util.List;\n \n-import javax.transaction.Transactional;\n-\n-import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.mongodb.repository.MongoRepository;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n import br.com.compasso.avaliacao.model.Cliente;\n \n @Repository\n @Transactional\n-public interface ClienteRepository extends JpaRepository<Cliente, Long>{\n+public interface ClienteRepository extends MongoRepository<Cliente, String>{\n \t\n \tList<Cliente> findByNome(String nome);\n }"
  },
  {
    "sha": "36f7b2abc1a278fbc3b24290dd967246c703ea29",
    "filename": "src/main/java/br/com/compasso/avaliacao/resource/CidadeResource.java",
    "status": "modified",
    "additions": 70,
    "deletions": 22,
    "changes": 92,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/resource/CidadeResource.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/resource/CidadeResource.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/resource/CidadeResource.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -4,6 +4,7 @@\n import java.util.Optional;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -16,58 +17,105 @@\n \n import br.com.compasso.avaliacao.model.dto.CidadeDto;\n import br.com.compasso.avaliacao.model.dto.request.CidadeRequest;\n-import br.com.compasso.avaliacao.model.dto.request.NomeRequest;\n-import br.com.compasso.avaliacao.service.CidadeService;\n+import br.com.compasso.avaliacao.service.impl.CidadeServiceImpl;\n import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n \n @RestController\n @RequestMapping(\"cidade\")\n @Api(value = \"Resource para cidade.\")\n public class CidadeResource {\n \t\n \t@Autowired\n-\tprivate CidadeService service;\n+\tprivate CidadeServiceImpl service;\n \t\n-\t@GetMapping(\"listar/{id}\")\n-\tpublic ResponseEntity<CidadeDto> obterPorId(@PathVariable Long id) {\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = CidadeDto.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Buscar cidade por id\")\n+\t@GetMapping(\"{id}\")\n+\tpublic ResponseEntity<CidadeDto> obterPorId(@PathVariable String id) {\n \t\tOptional<CidadeDto> dto = service.obterPorId(id);\n \t\t\n \t\treturn  ResponseEntity.of(dto);\n \t}\n \t\n-\t@GetMapping(\"listar\")\n-\tpublic ResponseEntity<List<CidadeDto>> obterPorId() {\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Listar todas as cidades\")\n+\t@GetMapping\n+\tpublic ResponseEntity<List<CidadeDto>> obterTodas() {\n \t\t\n \t\treturn  ResponseEntity.ok(service.obterTodas());\n \t}\n \t\n-\t@GetMapping(\"listar-por-nome\")\n-\tpublic ResponseEntity<List<CidadeDto>> listarPorNome(@RequestBody NomeRequest request) {\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Obter cidade por nome\")\n+\t@GetMapping(\"listar-por-nome/{cidade}\")\n+\tpublic ResponseEntity<List<CidadeDto>> listarPorNome(@PathVariable String cidade) {\n \t\t\n-\t\treturn  ResponseEntity.ok(service.listarPorNome(request));\n+\t\treturn  ResponseEntity.ok(service.listarPorNome(cidade));\n \t}\n-\t\n-\t@GetMapping(\"listar-por-estado\")\n-\tpublic ResponseEntity<List<CidadeDto>> listarPorEstado(@RequestBody NomeRequest request) {\n+\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Obter cidades por estado\")\n+\t@GetMapping(\"listar-por-estado/{estado}\")\n+\tpublic ResponseEntity<List<CidadeDto>> listarPorEstado(@PathVariable String estado) {\n \t\t\n-\t\treturn  ResponseEntity.ok(service.listarPorEstado(request));\n+\t\treturn  ResponseEntity.ok(service.listarPorEstado(estado.toUpperCase()));\n \t}\n-\t\n-\t@PostMapping(\"cadastrar\")\n+\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Criar nova cidade\")\n+\t@PostMapping\n \tpublic ResponseEntity<CidadeDto> cadastrar(@RequestBody CidadeRequest request){\n-\t\treturn ResponseEntity.ok(service.cadastrar(request));\n+\t\tCidadeDto dto = service.cadastrar(request);\n+\t\t\n+\t\treturn  dto != null ? ResponseEntity.status(201).body(dto)\n+\t\t\t\t: ResponseEntity.unprocessableEntity().build();\n \t}\n \t\n-\t@PutMapping(\"atualizar\")\n-\tpublic ResponseEntity<CidadeDto> atualizar(@RequestBody CidadeRequest request){\n-\t\tCidadeDto dto = service.atualizar(request);\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Atualizar Cidade\")\n+\t@PutMapping(\"{id}\")\n+\tpublic ResponseEntity<CidadeDto> atualizar(@PathVariable String id, @RequestBody CidadeRequest request){\n+\t\tCidadeDto dto = service.atualizar(id, request);\n \t\t\n \t\treturn dto != null ?  ResponseEntity.ok(dto) \n \t\t\t\t: ResponseEntity.noContent().build();\n \t}\n \t\n-\t@DeleteMapping(\"deletar/{id}\")\n-\tpublic ResponseEntity<Boolean> deletar(@PathVariable Long id){\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@ApiOperation(value = \"Deletar cidade por id\")\n+\t@DeleteMapping(\"{id}\")\n+\tpublic ResponseEntity<Boolean> deletar(@PathVariable String id){\n \t\tboolean res = service.deletar(id);\n \t\treturn res ? ResponseEntity.ok(res) : ResponseEntity.notFound().build();\n \t}"
  },
  {
    "sha": "b89d20ab82294dcc2495e166ed3e18408dfb0d1c",
    "filename": "src/main/java/br/com/compasso/avaliacao/resource/ClienteResource.java",
    "status": "modified",
    "additions": 53,
    "deletions": 13,
    "changes": 66,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/resource/ClienteResource.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/resource/ClienteResource.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/resource/ClienteResource.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -3,6 +3,7 @@\n import java.util.List;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -17,33 +18,60 @@\n import br.com.compasso.avaliacao.model.dto.ClienteDto;\n import br.com.compasso.avaliacao.model.dto.request.ClienteRequest;\n import br.com.compasso.avaliacao.model.dto.request.NomeRequest;\n-import br.com.compasso.avaliacao.service.ClienteService;\n+import br.com.compasso.avaliacao.service.impl.ClienteServiceImpl;\n import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n \n @RestController\n @RequestMapping(\"cliente\")\n @Api(value = \"Resource para cliente\")\n public class ClienteResource {\n \t\n \t@Autowired\n-\tprivate ClienteService service;\n+\tprivate ClienteServiceImpl service;\n \t\n-\t@GetMapping(\"listar\")\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@GetMapping\n+\t@ApiOperation(value = \"Listar todos os clientes.\")\n \tpublic ResponseEntity<List<ClienteDto>> listarTodos(){\n \t\treturn ResponseEntity.ok(service.listarTodos());\n \t}\n \t\n-\t@GetMapping(\"listar/{id}\")\n-\tpublic ResponseEntity<ClienteDto> obterPorId(@PathVariable Long id){\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@GetMapping(\"{id}\")\n+\t@ApiOperation(value = \"Buscar cliente por id\")\n+\tpublic ResponseEntity<ClienteDto> obterPorId(@PathVariable String id){\n \t\treturn ResponseEntity.of(service.obterPorId(id));\n \t}\n \t\n-\t@GetMapping(\"listar-por-nome\")\n-\tpublic ResponseEntity<List<ClienteDto>> obterPorNome(@RequestBody NomeRequest request){\n-\t\treturn ResponseEntity.ok(service.listarPorNome(request));\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@GetMapping(\"listar-por-nome/{nome}\")\n+\t@ApiOperation(value = \"Buscar cliente por nome\")\n+\tpublic ResponseEntity<List<ClienteDto>> obterPorNome(@PathVariable String nome){\n+\t\treturn ResponseEntity.ok(service.listarPorNome(nome));\n \t}\n \t\n-\t@PostMapping(\"cadastrar\")\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@PostMapping\n+\t@ApiOperation(value = \"Criar novo cliente\")\n \tpublic ResponseEntity<ClienteDto> cadastrar(@RequestBody ClienteRequest request, \n \t\t\tUriComponentsBuilder builder){\n \t\tClienteDto dto = service.cadastrar(request);\n@@ -52,16 +80,28 @@\n \t\t\t\t: ResponseEntity.unprocessableEntity().build();\n \t}\n \t\n-\t@PutMapping(\"atualizar-nome/{id}\")\n-\tpublic ResponseEntity<ClienteDto> atualizarNome(@PathVariable Long id, \n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@PutMapping(\"{id}\")\n+\t@ApiOperation(value = \"Atualizar nome do cliente\")\n+\tpublic ResponseEntity<ClienteDto> atualizarNome(@PathVariable String id, \n \t\t\t@RequestBody NomeRequest request){\n \t\tClienteDto dto = service.atualizaNome(id, request);\n \t\t\n \t\treturn dto != null ? ResponseEntity.ok(dto) : ResponseEntity.notFound().build();\n \t}\n \t\n-\t@DeleteMapping(\"deletar/{id}\")\n-\tpublic ResponseEntity<Boolean> deletar(@PathVariable Long id){\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Sucesso\",  response = List.class ),\n+\t\t\t@ApiResponse(code = 404, message = \"Não encontrado\", response = NotFoundException.class),\t\t\n+\t\t\t@ApiResponse(code = 500, message = \"Erro interno do servidor\", response = Exception.class),\n+\t})\n+\t@DeleteMapping(\"{id}\")\n+\t@ApiOperation(value = \"Deletar cliente\")\n+\tpublic ResponseEntity<Boolean> deletar(@PathVariable String id){\n \t\tboolean res = service.deletar(id);\n \t\t\n \t\treturn res ? ResponseEntity.ok(res) : ResponseEntity.notFound().build();"
  },
  {
    "sha": "bb404cbee82a59975d183f53174d4d47b4f479a7",
    "filename": "src/main/java/br/com/compasso/avaliacao/service/CidadeService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 56,
    "changes": 64,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/CidadeService.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/CidadeService.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/service/CidadeService.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -3,70 +3,22 @@\n import java.util.List;\n import java.util.Optional;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import br.com.compasso.avaliacao.model.Cidade;\n import br.com.compasso.avaliacao.model.dto.CidadeDto;\n import br.com.compasso.avaliacao.model.dto.request.CidadeRequest;\n-import br.com.compasso.avaliacao.model.dto.request.NomeRequest;\n-import br.com.compasso.avaliacao.repository.CidadeRepository;\n \n-@Service\n-public class CidadeService {\n+public interface CidadeService {\n \n-\t@Autowired\n-\tprivate CidadeRepository repository;\n+\tOptional<CidadeDto> obterPorId(String id);\n \t\n-\tpublic Optional<CidadeDto> obterPorId(Long id) {\n-\t\t\n-\t\tOptional<Cidade> cidade = repository.findById(id);\n-\t\t\n-\t\treturn cidade.isPresent() ? Optional.of(new CidadeDto(cidade.get())) : Optional.empty();\n-\t}\n+\tList<CidadeDto> obterTodas();\n \t\n-\tpublic List<CidadeDto> obterTodas(){\n-\t\treturn CidadeDto.converterDto(repository.findAll());\n-\t}\n+\tList<CidadeDto>listarPorNome(String request);\n \t\n-\tpublic List<CidadeDto>listarPorNome(NomeRequest request){\n-\t\tOptional<List<Cidade>> cidades = repository.findByNome(request.getNome());\n-\t\treturn cidades.isPresent() ? CidadeDto.converterDto((cidades.get())) : null;\n-\t}\n+\tCidadeDto cadastrar(CidadeRequest request);\n \t\n-\tpublic CidadeDto cadastrar(CidadeRequest request) {\n-\t\treturn new CidadeDto(repository.save(new Cidade(request)));\n-\t}\n+\tCidadeDto atualizar(String id, CidadeRequest request);\n \t\n-\tpublic CidadeDto atualizar(CidadeRequest request) {\n-\t\t\n-\t\tOptional<Cidade> optional = repository.findById(request.getId());\n-\t\tCidade cidade;\n-\t\t\n-\t\tif(optional.isPresent()) {\n-\t\t\tcidade = optional.get();\n-\t\t\tcidade.setNome(request.getNome());\n-\t\t\tcidade.setEstado(request.getEstado());\n-\t\t}else {\n-\t\t\treturn null;\n-\t\t}\n-\t\t\n-\t\treturn new CidadeDto(repository.save(cidade));\n-\t}\n-\n-\tpublic Boolean deletar(Long id) {\n-\t\t\n-\t\tboolean res = repository.existsById(id);\n-\t\t\n-\t\tif(res) {\n-\t\t\trepository.deleteById(id);\n-\t\t}\n-\n-\t\treturn res;\n-\t}\n-\n-\tpublic List<CidadeDto> listarPorEstado(NomeRequest request) {\n-\t\treturn CidadeDto.converterDto(repository.findByEstado(request.getNome()));\n-\t}\n+\tBoolean deletar(String id);\n \t\n+\tList<CidadeDto> listarPorEstado(String request);\n }"
  },
  {
    "sha": "957797dd4717002b19c71734c0e5db563668b06b",
    "filename": "src/main/java/br/com/compasso/avaliacao/service/ClienteService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 73,
    "changes": 80,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/ClienteService.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/ClienteService.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/service/ClienteService.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -3,87 +3,21 @@\n import java.util.List;\n import java.util.Optional;\n \n-import javax.transaction.Transactional;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import br.com.compasso.avaliacao.model.Cidade;\n-import br.com.compasso.avaliacao.model.Cliente;\n import br.com.compasso.avaliacao.model.dto.ClienteDto;\n import br.com.compasso.avaliacao.model.dto.request.ClienteRequest;\n import br.com.compasso.avaliacao.model.dto.request.NomeRequest;\n-import br.com.compasso.avaliacao.repository.CidadeRepository;\n-import br.com.compasso.avaliacao.repository.ClienteRepository;\n \n-@Service\n-public class ClienteService {\n-\n-\t@Autowired\n-\tprivate ClienteRepository repository;\n-\t\n-\t@Autowired\n-\tprivate CidadeRepository cidadeRepository;\n+public interface ClienteService {\n \t\n-\tpublic List<ClienteDto> listarTodos(){\n-\t\treturn ClienteDto.converter(repository.findAll());\n-\t}\n+\tList<ClienteDto> listarTodos();\n \t\n-\tpublic Optional<ClienteDto> obterPorId(Long id) {\n-\t\t\n-\t\tOptional<Cliente> cliente = repository.findById(id);\n-\t\t\n-\t\treturn cliente.isPresent() ? Optional.of(new ClienteDto(cliente.get())) : Optional.empty();\n-\t}\n+\tOptional<ClienteDto> obterPorId(String id);\n \t\n-\tpublic List<ClienteDto> listarPorNome(NomeRequest request) {\t\t\n-\t\treturn ClienteDto.converter(repository.findByNome(request.getNome()));\n-\t}\n+\tList<ClienteDto> listarPorNome(String nome);\n \t\n-\t@Transactional\n-\tpublic ClienteDto atualizaNome(Long idCliente, NomeRequest request) {\n-\t\t\n-\t\tOptional<Cliente> optional = repository.findById(idCliente);\n-\t\tCliente cliente;\n-\t\t\n-\t\tif(optional.isPresent()) {\n-\t\t\tcliente = optional.get();\n-\t\t\tcliente.setNome(request.getNome());\n-\t\t\treturn new ClienteDto(repository.save(cliente));\n-\t\t}\n-\t\t\n-\t\treturn null;\n-\t}\n+\tClienteDto atualizaNome(String id, NomeRequest request);\n \t\n-\t@Transactional\n-\tpublic ClienteDto cadastrar(ClienteRequest request) {\n-\t\t\n-\t\tOptional<Cidade> cidade = cidadeRepository.findCidade(request.getCidade());\n-\t\t\n-\t\tif(cidade.isPresent()) {\n-\t\t\tCliente cliente = new Cliente();\n-\t\t\tcliente.setNome(request.getNome());\n-\t\t\tcliente.setSexo(request.getSexo());\n-\t\t\tcliente.setDataNascimento(request.getDataNascimento());\n-\t\t\tcliente.setIdade(request.getIdade());\n-\t\t\tcliente.setCidade(cidade.get());\t\n-\t\t\t\n-\t\t\treturn new ClienteDto(repository.save(cliente));\n-\t\t}\t\t\n-\t\t\n-\t\treturn null;\n-\t\t\n-\t}\n+\tClienteDto cadastrar(ClienteRequest request);\n \t\n-\t@Transactional\n-\tpublic Boolean deletar(Long id) {\n-\t\t\n-\t\tboolean res = repository.existsById(id);\n-\t\t\n-\t\tif(res) {\n-\t\t\trepository.deleteById(id);\n-\t\t}\n-\t\t\n-\t\treturn res;\n-\t}\n+\tBoolean deletar(String id);\n }"
  },
  {
    "sha": "896f0c1364d052e55c18dd7086a2454f3ed3f42e",
    "filename": "src/main/java/br/com/compasso/avaliacao/service/impl/CidadeServiceImpl.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/impl/CidadeServiceImpl.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/impl/CidadeServiceImpl.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/service/impl/CidadeServiceImpl.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -0,0 +1,83 @@\n+package br.com.compasso.avaliacao.service.impl;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import br.com.compasso.avaliacao.model.Cidade;\n+import br.com.compasso.avaliacao.model.dto.CidadeDto;\n+import br.com.compasso.avaliacao.model.dto.request.CidadeRequest;\n+import br.com.compasso.avaliacao.repository.CidadeRepository;\n+import br.com.compasso.avaliacao.service.CidadeService;\n+\n+@Service\n+public class CidadeServiceImpl implements CidadeService{\n+\n+\t@Autowired\n+\tprivate CidadeRepository repository;\n+\t\n+\t@Override\n+\tpublic Optional<CidadeDto> obterPorId(String id) {\n+\t\t\n+\t\tOptional<Cidade> cidade = repository.findById(id);\n+\t\t\n+\t\treturn cidade.isPresent() ? Optional.of(new CidadeDto(cidade.get())) : Optional.empty();\n+\t}\n+\t\n+\t@Override\n+\tpublic List<CidadeDto> obterTodas(){\n+\t\tList<CidadeDto> lista = CidadeDto.converterDto(repository.findAll());\n+\t\treturn lista;\n+\t}\n+\t\n+\t@Override\n+\tpublic List<CidadeDto>listarPorNome(String request){\n+\t\tOptional<List<Cidade>> cidades = repository.findByNome(request);\n+\t\treturn cidades.isPresent() ? CidadeDto.converterDto((cidades.get())) : null;\n+\t}\n+\t\n+\t@Transactional\n+\t@Override\n+\tpublic CidadeDto cadastrar(CidadeRequest request) {\n+\t\tCidade cidade = repository.save(new Cidade(request));\n+\t\treturn new CidadeDto(cidade);\n+\t}\n+\t\n+\t@Transactional\n+\t@Override\n+\tpublic CidadeDto atualizar(String id, CidadeRequest request) {\n+\t\t\n+\t\tOptional<Cidade> optional = repository.findById(id);\n+\t\tCidade cidade = null;\n+\t\t\n+\t\tif(optional.isPresent()) {\n+\t\t\tcidade = optional.get();\n+\t\t\tcidade.setNome(request.getNome());\n+\t\t\tcidade.setEstado(request.getEstado().toUpperCase());\n+\t\t}\n+\t\t\n+\t\treturn new CidadeDto(repository.save(cidade));\n+\t}\n+\n+\t@Transactional\n+\t@Override\n+\tpublic Boolean deletar(String id) {\n+\t\t\n+\t\tboolean res = repository.existsById(id);\n+\t\t\n+\t\tif(res) {\n+\t\t\trepository.deleteById(id);\n+\t\t}\n+\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic List<CidadeDto> listarPorEstado(String request) {\n+\t\treturn CidadeDto.converterDto(repository.findByEstado(request));\n+\t}\n+\t\n+}"
  },
  {
    "sha": "ead60f58cc71e661920cabfcaa4d43ced47874a8",
    "filename": "src/main/java/br/com/compasso/avaliacao/service/impl/ClienteServiceImpl.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/impl/ClienteServiceImpl.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/java/br/com/compasso/avaliacao/service/impl/ClienteServiceImpl.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/java/br/com/compasso/avaliacao/service/impl/ClienteServiceImpl.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -0,0 +1,93 @@\n+package br.com.compasso.avaliacao.service.impl;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import br.com.compasso.avaliacao.model.Cidade;\n+import br.com.compasso.avaliacao.model.Cliente;\n+import br.com.compasso.avaliacao.model.dto.ClienteDto;\n+import br.com.compasso.avaliacao.model.dto.request.ClienteRequest;\n+import br.com.compasso.avaliacao.model.dto.request.NomeRequest;\n+import br.com.compasso.avaliacao.repository.CidadeRepository;\n+import br.com.compasso.avaliacao.repository.ClienteRepository;\n+import br.com.compasso.avaliacao.service.ClienteService;\n+\n+@Service\n+public class ClienteServiceImpl implements ClienteService{\n+\n+\t@Autowired\n+\tprivate ClienteRepository repository;\n+\t\n+\t@Autowired\n+\tprivate CidadeRepository cidadeRepository;\n+\t\n+\t@Override\n+\tpublic List<ClienteDto> listarTodos(){\n+\t\treturn ClienteDto.converter(repository.findAll());\n+\t}\n+\t\n+\t@Override\n+\tpublic Optional<ClienteDto> obterPorId(String id) {\n+\t\t\n+\t\tOptional<Cliente> cliente = repository.findById(id);\n+\t\t\n+\t\treturn cliente.isPresent() ? Optional.of(new ClienteDto(cliente.get())) : Optional.empty();\n+\t}\n+\t\n+\t@Override\n+\tpublic List<ClienteDto> listarPorNome(String nome) {\t\t\n+\t\treturn ClienteDto.converter(repository.findByNome(nome));\n+\t}\n+\t\n+\t@Transactional\n+\t@Override\n+\tpublic ClienteDto atualizaNome(String id, NomeRequest request) {\n+\t\t\n+\t\tOptional<Cliente> optional = repository.findById(id);\n+\t\tCliente cliente;\n+\t\t\n+\t\tif(optional.isPresent()) {\n+\t\t\tcliente = optional.get();\n+\t\t\tcliente.setNome(request.getNome());\n+\t\t\treturn new ClienteDto(repository.save(cliente));\n+\t\t}\n+\t\t\n+\t\treturn null;\n+\t}\n+\t\n+\t@Transactional\n+\t@Override\n+\tpublic ClienteDto cadastrar(ClienteRequest request) {\n+\t\t\n+\t\tOptional<List<Cidade>> cidade = cidadeRepository.findByNome(request.getCidade());\n+\t\tCliente cliente = null;\n+\t\t\n+\t\tif(cidade.isPresent()) {\n+\t\t\tcliente = new Cliente(request);\n+\t\t\t\n+\t\t\tcliente.setCidade(cidade.get().get(0));\t\n+\t\t\n+\t\t\tcliente = repository.insert(cliente);\n+\t\t}\t\t\n+\t\t\n+\t\treturn new ClienteDto(cliente);\n+\t\t\n+\t}\n+\t\n+\t@Transactional\n+\t@Override\n+\tpublic Boolean deletar(String id) {\n+\t\t\n+\t\tboolean res = repository.existsById(id);\n+\t\t\n+\t\tif(res) {\n+\t\t\trepository.deleteById(id);\n+\t\t}\n+\t\t\n+\t\treturn res;\n+\t}\n+}"
  },
  {
    "sha": "bc4d3e46c8f215de4271d6b19b5de59507d94097",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 16,
    "deletions": 6,
    "changes": 22,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/resources/application.properties",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/main/resources/application.properties?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -4,11 +4,21 @@\n #spring.datasource.password=root\n \n #Config Heroku\n-spring.datasource.url=jdbc:postgresql://ec2-54-164-241-193.compute-1.amazonaws.com/d3fsbdleldjtvo\n-spring.datasource.username=qvvhcjvuqnyjvg\n-spring.datasource.password=fb45945e0e176eb89bdec0f6ed65f9ead19fcfbd629d7e15cb2205d6840ebb19\n+#spring.datasource.url=jdbc:postgresql://ec2-54-164-241-193.compute-1.amazonaws.com/d3fsbdleldjtvo\n+#spring.datasource.username=qvvhcjvuqnyjvg\n+#spring.datasource.password=fb45945e0e176eb89bdec0f6ed65f9ead19fcfbd629d7e15cb2205d6840ebb19\n \n+#JPA\n+#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\n+#spring.jpa.show-sql=true\n+#spring.jpa.hibernate.ddl-auto=update\n \n-spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\n-spring.jpa.show-sql=true\n-spring.jpa.hibernate.ddl-auto=update\n+#Config Mongo\n+#spring.data.mongodb.port=27017\n+\n+\n+spring.data.mongodb.host=localhost:27017\n+spring.data.mongodb.database=avaliacao\n+spring.data.mongodb.username=root\n+spring.data.mongodb.password=root\n+spring.data.mongodb.authentication-database=admin\n\\ No newline at end of file"
  },
  {
    "sha": "6dcfa1e823bd0414ac370ff3cc49fbbbf103d3f2",
    "filename": "src/test/java/br/com/compasso/avaliacao/TestSuite.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 6,
    "changes": 7,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/test/java/br/com/compasso/avaliacao/TestSuite.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/test/java/br/com/compasso/avaliacao/TestSuite.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/test/java/br/com/compasso/avaliacao/TestSuite.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -1,13 +1,8 @@\n package br.com.compasso.avaliacao;\n \n-import org.junit.jupiter.api.Test;\n import org.springframework.boot.test.context.SpringBootTest;\n \n @SpringBootTest\n-class CrudApplicationTests {\n-\n-\t@Test\n-\tvoid contextLoads() {\n-\t}\n+public class TestSuite {\n \n }",
    "previous_filename": "src/test/java/br/com/compasso/avaliacao/CrudApplicationTests.java"
  },
  {
    "sha": "4a42e8595430cbef0a95afafc9e953906a0d50a5",
    "filename": "src/test/java/br/com/compasso/avaliacao/service/CidadeServiceTest.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/test/java/br/com/compasso/avaliacao/service/CidadeServiceTest.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/test/java/br/com/compasso/avaliacao/service/CidadeServiceTest.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/test/java/br/com/compasso/avaliacao/service/CidadeServiceTest.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -0,0 +1,105 @@\n+package br.com.compasso.avaliacao.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import br.com.compasso.avaliacao.model.Cidade;\n+import br.com.compasso.avaliacao.model.dto.CidadeDto;\n+import br.com.compasso.avaliacao.model.dto.request.CidadeRequest;\n+import br.com.compasso.avaliacao.repository.CidadeRepository;\n+import br.com.compasso.avaliacao.service.impl.CidadeServiceImpl;\n+\n+@SpringBootTest\n+public class CidadeServiceTest {\n+\t\n+\t@Mock\n+\tprivate CidadeRepository repository;\n+\t\n+\t@InjectMocks\n+\tprivate CidadeServiceImpl service;\n+\t\n+\tprivate Cidade cidade;\n+\tprivate List<Cidade> lista = new ArrayList<>();\n+\tprivate List<CidadeDto> dtos = new ArrayList<>();\n+\t\n+\t@BeforeEach\n+\tpublic void setup() {\t\t\n+\t\tcidade = new Cidade(\"1\", \"Leopoldina\", \"MG\");\n+\t\tlista.add(cidade);\n+\t\tdtos = CidadeDto.converterDto(lista);\n+\t}\n+\t\n+\t@Test\n+\tpublic void ObterPorIdTest() {\n+\t\twhen(repository.findById(Mockito.anyString())).thenReturn(Optional.of(cidade));\n+\t\t\n+\t\tOptional<CidadeDto> result = service.obterPorId(\"1\");\n+\t\t\n+\t\tCidadeDto dto = new CidadeDto(cidade);\n+\t\t\n+\t\tassertEquals(dto, result.get());\n+\t}\n+\t\n+\t@Test\n+\tpublic void ObterTodasTest() {\n+\t\t\n+\t\twhen(repository.findAll()).thenReturn(lista);\n+\t\t\n+\t\tList<CidadeDto> cidades = service.obterTodas();\n+\t\t\n+\t\tassertEquals(dtos, cidades);\n+\t}\n+\t\n+\t@Test\n+\tpublic void ObterNomeTest() {\n+\t\t\n+\t\twhen(repository.findByNome(Mockito.anyString())).thenReturn(Optional.of(lista));\n+\t\t\n+\t\tList<CidadeDto> result = service.listarPorNome(\"Leopoldina\");\n+\t\t\n+\t\tassertEquals(dtos, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void AtualizarTest() {\n+\t\t\n+\t\twhen(repository.findById(\"1\")).thenReturn(Optional.of(cidade));\n+\t\twhen(repository.save(cidade)).thenReturn(cidade);\n+\t\t\n+\t\tCidadeDto result = service.atualizar(\"1\", new CidadeRequest(cidade));\n+\t\t\n+\t\tassertEquals(dtos.get(0), result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void DeletarTest() {\n+\t\t\n+\t\twhen(repository.existsById(Mockito.anyString())).thenReturn(true);\t\t\n+\t\t\n+\t\tBoolean result = service.deletar(\"1\");\n+\t\t\n+\t\tassertEquals(true, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void ObterPorEstadoTest() {\n+\t\t\n+\t\twhen(repository.findByEstado(Mockito.anyString())).thenReturn(lista);\n+\t\t\n+\t\tList<CidadeDto> cidades = service.listarPorEstado(\"MG\");\n+\t\t\n+\t\tassertEquals(dtos, cidades);\n+\t}\n+\n+}"
  },
  {
    "sha": "3dacc07b94999fd2536e32023c8cd2a24393ca74",
    "filename": "src/test/java/br/com/compasso/avaliacao/service/ClienteSertviceTest.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/MoreiraGabriel/avaliacao/blob/c29a6bbd84f5c689085b20a97de5a68368de8984/src/test/java/br/com/compasso/avaliacao/service/ClienteSertviceTest.java",
    "raw_url": "https://github.com/MoreiraGabriel/avaliacao/raw/c29a6bbd84f5c689085b20a97de5a68368de8984/src/test/java/br/com/compasso/avaliacao/service/ClienteSertviceTest.java",
    "contents_url": "https://api.github.com/repos/MoreiraGabriel/avaliacao/contents/src/test/java/br/com/compasso/avaliacao/service/ClienteSertviceTest.java?ref=c29a6bbd84f5c689085b20a97de5a68368de8984",
    "patch": "@@ -0,0 +1,123 @@\n+package br.com.compasso.avaliacao.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import br.com.compasso.avaliacao.model.Cidade;\n+import br.com.compasso.avaliacao.model.Cliente;\n+import br.com.compasso.avaliacao.model.dto.ClienteDto;\n+import br.com.compasso.avaliacao.model.dto.request.ClienteRequest;\n+import br.com.compasso.avaliacao.model.dto.request.NomeRequest;\n+import br.com.compasso.avaliacao.repository.CidadeRepository;\n+import br.com.compasso.avaliacao.repository.ClienteRepository;\n+import br.com.compasso.avaliacao.service.impl.ClienteServiceImpl;\n+\n+@SpringBootTest\n+public class ClienteSertviceTest {\n+\t\n+\t@Mock\n+\tprivate CidadeRepository cidadeRepository;\n+\t\n+\t@Mock\n+\tprivate ClienteRepository repository;\n+\t\n+\t@InjectMocks\n+\tprivate ClienteServiceImpl service;\n+\t\n+\tprivate Cliente cliente;\n+\tprivate List<Cliente> listaClientes = new ArrayList<>();\n+\tprivate List<ClienteDto> listaDtos = new ArrayList<>();\n+\t\n+\tprivate ClienteDto dto;\n+\t\n+\tprivate Cidade cidade;\n+\tprivate List<Cidade> listaCidades = new ArrayList<>();\n+\t\n+\tprivate ClienteRequest request = new ClienteRequest();\n+\t\n+\t@BeforeEach\n+\tpublic void setup() {\n+\t\t\n+\t\tcidade = new Cidade(\"1\", \"Leopoldina\", \"MG\");\t\t\n+\t\tlistaCidades.add(cidade);\n+\t\t\n+\t\tcliente = new Cliente(\"1\", \"José\", \"M\", LocalDateTime.now(), 20L, cidade);\n+\t\tcliente.setCidade(cidade);\n+\t\tlistaClientes.add(cliente);\n+\t\t\n+\t\tdto = new ClienteDto(cliente);\n+\t\t\n+\t\tlistaDtos = ClienteDto.converter(listaClientes);\n+\t\t\n+\t\trequest.setNome(\"José\");\n+\t\trequest.setSexo(\"M\");\n+\t\trequest.setDataNascimento(LocalDateTime.now());\n+\t\trequest.setIdade(24L);\n+\t\trequest.setCidade(\"Leopoldina\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void listarTodosTest(){\n+\t\t\n+\t\twhen(repository.findAll()).thenReturn(listaClientes);\n+\t\t\n+\t\tList<ClienteDto> result = service.listarTodos();\n+\t\t\n+\t\tassertEquals(listaDtos, result);\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void ObterPorIdTest(){\n+\t\t\n+\t\twhen(repository.findById(Mockito.anyString())).thenReturn(Optional.of(cliente));\n+\t\t\n+\t\tOptional<ClienteDto> result = service.obterPorId(\"1\");\n+\t\t\n+\t\tassertEquals(dto, result.get());\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void listarPorNomeTest(){\n+\t\t\n+\t\twhen(repository.findByNome(Mockito.anyString())).thenReturn(listaClientes);\n+\t\t\n+\t\tList<ClienteDto> result = service.listarPorNome(\"José\");\n+\t\t\n+\t\tassertEquals(listaDtos, result);\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void atualizaNomeTest(){\n+\t\t\n+\t\tNomeRequest nome = new NomeRequest(\"José\");\n+\t\t\n+\t\twhen(repository.findById(Mockito.anyString())).thenReturn(Optional.of(cliente));\n+\t\twhen(repository.save(Mockito.any())).thenReturn(cliente);\n+\t\t\n+\t\tClienteDto result = service.atualizaNome(\"1\", nome);\n+\t\t\n+\t\tassertEquals(dto, result);\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void DeletarTest() {\n+\t\t\n+\t\twhen(repository.existsById(Mockito.anyString())).thenReturn(true);\t\t\n+\t\t\n+\t\tBoolean result = service.deletar(\"1\");\n+\t\t\n+\t\tassertEquals(true, result);\n+\t}\n+}"
  }
]
