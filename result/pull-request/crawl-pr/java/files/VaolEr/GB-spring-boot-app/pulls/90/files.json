[
  {
    "sha": "ebd57058b796f3baa55ce9bdedecffa97297c06a",
    "filename": "src/test/java/com/example/storehouse/StorehouseApplicationTests.java",
    "status": "modified",
    "additions": 9,
    "deletions": 11,
    "changes": 20,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/StorehouseApplicationTests.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/StorehouseApplicationTests.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/StorehouseApplicationTests.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,13 +1,5 @@\n package com.example.storehouse;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.notNullValue;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -18,6 +10,12 @@\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.web.servlet.MockMvc;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n @SpringBootTest(classes = StorehouseApplication.class)\n @ActiveProfiles(\"test\")\n @AutoConfigureMockMvc\n@@ -46,7 +44,7 @@ void shouldHaveHealthCheckHandlerAndCheckIsUP() {\n         mvc.perform(get(actuatorsPath + \"/health\"))\n             .andDo(print())\n             .andExpect(status().isOk())\n-            .andExpect(jsonPath(\"$.status\", is(\"UP\")))\n+            .andExpect(jsonPath(\"$.status\").value(\"UP\"))\n         ;\n     }\n \n@@ -56,8 +54,8 @@ void shouldHaveInfoHandlerWithAppVersionAndApiVersion() {\n         mvc.perform(get(actuatorsPath + \"/info\"))\n             .andDo(print())\n             .andExpect(status().isOk())\n-            .andExpect(jsonPath(\"$.app.version\", is(appVersion)))\n-            .andExpect(jsonPath(\"$.api.*.version\", notNullValue()))\n+            .andExpect(jsonPath(\"$.app.version\").value(appVersion))\n+            .andExpect(jsonPath(\"$.api.*.version\").isNotEmpty())\n         ;\n     }\n "
  },
  {
    "sha": "9b3a1c5f0d60829201dc130a62c6d9c5a509c2ad",
    "filename": "src/test/java/com/example/storehouse/web/AbstractControllerTest.java",
    "status": "modified",
    "additions": 41,
    "deletions": 22,
    "changes": 63,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/AbstractControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/AbstractControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/AbstractControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,38 +1,62 @@\n package com.example.storehouse.web;\n \n-import static com.example.storehouse.TestData.*;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.when;\n-import static org.springframework.http.MediaType.APPLICATION_JSON;\n-\n+import com.example.storehouse.config.JwtConfig;\n+import com.example.storehouse.config.SecurityConfig;\n import com.example.storehouse.model.User;\n+import com.example.storehouse.repository.UsersRepository;\n+import com.example.storehouse.security.JwtTokenFilter;\n import com.example.storehouse.security.JwtTokenProvider;\n+import com.example.storehouse.security.UserDetailsServiceImpl;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Collections;\n-import javax.annotation.PostConstruct;\n import javax.servlet.http.HttpServletRequest;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.http.HttpHeaders;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n import org.springframework.test.web.servlet.MockMvc;\n \n-//@WebMvcTest(ItemsControllerTest.class)\n-// Я тут с ходу не разобрался, как замокать всю кучу security-зависимостей\n-// для загрузки только требуемого контекста, поэтому поставил пока загрузку всего\n-@SpringBootTest\n-@ActiveProfiles(\"test\")\n-@AutoConfigureMockMvc\n+import static com.example.storehouse.TestData.TEST_ADMIN_EMAIL;\n+import static com.example.storehouse.TestData.TEST_ADMIN_FIRST_NAME;\n+import static com.example.storehouse.TestData.TEST_ADMIN_ID;\n+import static com.example.storehouse.TestData.TEST_ADMIN_LAST_NAME;\n+import static com.example.storehouse.TestData.TEST_ADMIN_PASSWORD;\n+import static com.example.storehouse.TestData.TEST_ADMIN_ROLE;\n+import static com.example.storehouse.TestData.TEST_ADMIN_STATUS;\n+import static com.example.storehouse.TestData.TEST_USER_EMAIL;\n+import static com.example.storehouse.TestData.TEST_USER_FIRST_NAME;\n+import static com.example.storehouse.TestData.TEST_USER_ID;\n+import static com.example.storehouse.TestData.TEST_USER_LAST_NAME;\n+import static com.example.storehouse.TestData.TEST_USER_PASSWORD;\n+import static com.example.storehouse.TestData.TEST_USER_ROLE;\n+import static com.example.storehouse.TestData.TEST_USER_STATUS;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.MediaType.APPLICATION_JSON;\n+\n+@WebMvcTest\n+@SpringJUnitConfig({\n+    SecurityConfig.class,\n+    UserDetailsServiceImpl.class,\n+    JwtConfig.class,\n+    JwtTokenFilter.class,\n+    ControllerExceptionHandler.class,\n+})\n+@MockBean({\n+    UsersRepository.class\n+})\n public abstract class AbstractControllerTest {\n \n+    protected static final String AUTH_TOKEN = \"jwt-auth-token\";\n+\n     @Value(\"${app.jwt.header}\")\n     String authHeader;\n \n@@ -42,18 +66,13 @@\n     @MockBean\n     protected JwtTokenProvider jwtTokenProvider;\n \n-    protected static final String AUTH_TOKEN = \"jwt-auth-token\";\n-\n     protected HttpHeaders headers;\n     protected ObjectMapper objectMapper;\n \n-    @PostConstruct\n-    void prepare() {\n-        objectMapper = new ObjectMapper();\n-    }\n-\n     @BeforeEach\n     protected void setUp() {\n+        objectMapper = new ObjectMapper();\n+\n         headers = new HttpHeaders();\n         headers.setAccept(Collections.singletonList(APPLICATION_JSON));\n         headers.setContentType(APPLICATION_JSON);"
  },
  {
    "sha": "5f9e1568881b81b066146e478492f8922aebb013",
    "filename": "src/test/java/com/example/storehouse/web/categories/AbstractCategoriesControllerTest.java",
    "status": "modified",
    "additions": 64,
    "deletions": 51,
    "changes": 115,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/categories/AbstractCategoriesControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/categories/AbstractCategoriesControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/categories/AbstractCategoriesControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,45 +1,60 @@\n package com.example.storehouse.web.categories;\n \n-import com.example.storehouse.model.*;\n+import com.example.storehouse.model.Category;\n+import com.example.storehouse.model.Item;\n import com.example.storehouse.service.CategoriesService;\n import com.example.storehouse.util.exception.NotFoundException;\n import com.example.storehouse.web.AbstractControllerTest;\n+import com.example.storehouse.web.CategoriesController;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static com.example.storehouse.TestData.*;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static com.example.storehouse.TestData.TEST_CATEGORIES_NAME;\n+import static com.example.storehouse.TestData.TEST_CATEGORY_1_ID;\n+import static com.example.storehouse.TestData.TEST_CATEGORY_2_ID;\n+import static com.example.storehouse.TestData.TEST_CATEGORY_3_ID;\n+import static com.example.storehouse.TestData.TEST_ITEMS_NAME;\n+import static com.example.storehouse.TestData.TEST_ITEMS_SKU;\n+import static com.example.storehouse.TestData.TEST_ITEM_1_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_2_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_3_ID;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.isNull;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+@SpringJUnitConfig(CategoriesController.class)\n public abstract class AbstractCategoriesControllerTest extends AbstractControllerTest {\n+\n     @Value(\"${app.endpoints.base_path}\" + \"${app.endpoints.categories.base_url}/\")\n     String categoriesPath;\n \n     @MockBean\n     CategoriesService categoriesService;\n \n     Category testCategoryOne,\n-            testCategoryTwo,\n-            testCategoryThree;\n+        testCategoryTwo,\n+        testCategoryThree;\n     List<Category> testCategories;\n \n     Item testItemOne,\n-         testItemTwo,\n-         testItemThree;\n+        testItemTwo,\n+        testItemThree;\n     List<Item> testItems;\n \n     @Override\n@@ -66,15 +81,15 @@ void getAll() {\n \n         // When\n         mvc\n-                .perform(get(categoriesPath)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n+            .perform(get(categoriesPath)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(categoriesService).get(isNull());\n@@ -89,17 +104,15 @@ void getById() {\n \n         // When\n         mvc\n-                .perform(get(categoriesPath + \"/{id}\", TEST_CATEGORY_1_ID)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n-        // TODO поправить проверку содержимого\n-        //.andExpect(jsonPath(\"$.data\").value(objectMapper.writeValueAsString(returnedItem)))\n+            .perform(get(categoriesPath + \"/{id}\", TEST_CATEGORY_1_ID)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(categoriesService).getById(TEST_CATEGORY_1_ID);\n@@ -115,15 +128,15 @@ void getByIdNotFound() {\n \n         // When\n         mvc\n-                .perform(get(categoriesPath + \"/{id}\", absentedCategoryId)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isNotFound())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isEmpty())\n+            .perform(get(categoriesPath + \"/{id}\", absentedCategoryId)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isNotFound())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(categoriesService).getById(absentedCategoryId);\n@@ -149,11 +162,11 @@ void createTestEntities() {\n         testCategoryThree.setId(TEST_CATEGORY_3_ID);\n \n         testCategories = List.of(testCategoryOne, testCategoryTwo, testCategoryThree).stream()\n-                .peek(category -> {\n-                    category.setName(TEST_CATEGORIES_NAME + category.getId());\n-                    category.setItems(testItems);\n-                })\n-                .collect(Collectors.toList());\n+            .peek(category -> {\n+                category.setName(TEST_CATEGORIES_NAME + category.getId());\n+                category.setItems(testItems);\n+            })\n+            .collect(Collectors.toList());\n \n     }\n \n@@ -168,11 +181,11 @@ void createItems() {\n         testItemThree.setId(TEST_ITEM_3_ID);\n \n         testItems = List.of(testItemOne, testItemTwo, testItemThree).stream()\n-                .peek(item -> {\n-                    item.setName(TEST_ITEMS_NAME + item.getId());\n-                    item.setSku(TEST_ITEMS_SKU);\n-                })\n-                .collect(Collectors.toList());\n+            .peek(item -> {\n+                item.setName(TEST_ITEMS_NAME + item.getId());\n+                item.setSku(TEST_ITEMS_SKU);\n+            })\n+            .collect(Collectors.toList());\n \n     }\n }"
  },
  {
    "sha": "bd4fb1b9619f8655e681fa10091c8b800f28e9ea",
    "filename": "src/test/java/com/example/storehouse/web/categories/AdminCategoriesControllerTests.java",
    "status": "modified",
    "additions": 22,
    "deletions": 18,
    "changes": 40,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/categories/AdminCategoriesControllerTests.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/categories/AdminCategoriesControllerTests.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/categories/AdminCategoriesControllerTests.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -6,23 +6,30 @@\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n-\n-import static com.example.storehouse.TestData.*;\n+import static com.example.storehouse.TestData.TEST_CATEGORY_1_ID;\n import static com.example.storehouse.util.CategoriesUtil.toCategoryTo;\n import static org.mockito.ArgumentMatchers.isA;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.LOCATION;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n class AdminCategoriesControllerTests extends AbstractCategoriesControllerTest {\n+\n     @BeforeEach\n     void setUpAdmin() {\n         when(jwtTokenProvider.getAuthentication(AUTH_TOKEN)).thenReturn(mockAuthorize(createTestUserAdmin()));\n@@ -38,19 +45,17 @@ void create() {\n \n         // When\n         mvc\n-                .perform(post(categoriesPath)\n-                        .headers(headers)\n-                        .content(objectMapper.writeValueAsString(createdCategory))\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isCreated())\n-                .andExpect(header().exists(HttpHeaders.LOCATION))\n-                // TODO как бы тут достать URL? Это будет работать в таком виде?\n-                .andExpect(header().string(HttpHeaders.LOCATION, \"http://localhost\" + categoriesPath + TEST_CATEGORY_1_ID))\n+            .perform(post(categoriesPath)\n+                .headers(headers)\n+                .content(objectMapper.writeValueAsString(createdCategory))\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isCreated())\n+            .andExpect(header().exists(LOCATION))\n+            .andExpect(header().string(LOCATION, \"http://localhost\" + categoriesPath + TEST_CATEGORY_1_ID))\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n@@ -99,7 +104,6 @@ void update() {\n                 // Then\n                 .andExpect(status().isOk())\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);"
  },
  {
    "sha": "4fc326ca424a55521588ff03e7da68181279022d",
    "filename": "src/test/java/com/example/storehouse/web/categories/UnauthorizedCategoriesControllerTests.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/categories/UnauthorizedCategoriesControllerTests.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/categories/UnauthorizedCategoriesControllerTests.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/categories/UnauthorizedCategoriesControllerTests.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -9,8 +9,13 @@\n \n import static com.example.storehouse.TestData.TEST_CATEGORY_1_ID;\n import static com.example.storehouse.util.CategoriesUtil.toCategoryTo;\n-import static org.mockito.Mockito.*;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -62,8 +67,6 @@ void getAll() {\n         verifyNoInteractions(categoriesService);\n     }\n \n-\n-\n     @Test\n     @Override\n     @SneakyThrows"
  },
  {
    "sha": "88b0ce1e90e7ba292b30a4ef02cc95162a99f60e",
    "filename": "src/test/java/com/example/storehouse/web/items/AbstractItemsControllerTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 25,
    "changes": 50,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/AbstractItemsControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/AbstractItemsControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/items/AbstractItemsControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,5 +1,29 @@\n package com.example.storehouse.web.items;\n \n+import com.example.storehouse.dto.ItemTo;\n+import com.example.storehouse.model.Category;\n+import com.example.storehouse.model.Item;\n+import com.example.storehouse.model.ItemStorehouse;\n+import com.example.storehouse.model.Storehouse;\n+import com.example.storehouse.model.Supplier;\n+import com.example.storehouse.model.Unit;\n+import com.example.storehouse.service.ItemsService;\n+import com.example.storehouse.util.exception.NotFoundException;\n+import com.example.storehouse.web.AbstractControllerTest;\n+import com.example.storehouse.web.ItemsController;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.SneakyThrows;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n import static com.example.storehouse.TestData.TEST_CATEGORY_ID;\n import static com.example.storehouse.TestData.TEST_CATEGORY_NAME;\n import static com.example.storehouse.TestData.TEST_ITEMS_NAME;\n@@ -30,28 +54,7 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import com.example.storehouse.dto.ItemTo;\n-import com.example.storehouse.model.Category;\n-import com.example.storehouse.model.Item;\n-import com.example.storehouse.model.ItemStorehouse;\n-import com.example.storehouse.model.Storehouse;\n-import com.example.storehouse.model.Supplier;\n-import com.example.storehouse.model.Unit;\n-import com.example.storehouse.service.ItemsService;\n-import com.example.storehouse.util.exception.NotFoundException;\n-import com.example.storehouse.web.AbstractControllerTest;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import lombok.SneakyThrows;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.PageImpl;\n-import org.springframework.data.domain.Pageable;\n-\n+@SpringJUnitConfig(ItemsController.class)\n public abstract class AbstractItemsControllerTest extends AbstractControllerTest {\n \n     @Value(\"${app.endpoints.base_path}\" + \"${app.endpoints.items.base_url}/\")\n@@ -122,7 +125,6 @@ void getAllPaged() {\n     void getById() {\n         // Given\n         testItemOne.setItemStorehouses(createItemStorehouses().toArray(new ItemStorehouse[2]));\n-        //ItemTo returnedItem = toItemToWithBalance(testItemOne);\n         when(itemsService.getById(TEST_ITEM_1_ID)).thenReturn(testItemOne);\n \n         // When\n@@ -136,8 +138,6 @@ void getById() {\n             .andExpect(status().isOk())\n             .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n             .andExpect(jsonPath(\"$.data\").isNotEmpty())\n-        // TODO поправить проверку содержимого\n-        //.andExpect(jsonPath(\"$.data\").value(objectMapper.writeValueAsString(returnedItem)))\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(itemsService).getById(TEST_ITEM_1_ID);"
  },
  {
    "sha": "6283ee6a7f2271aff1ef14c9a7f79fc37ab2eac7",
    "filename": "src/test/java/com/example/storehouse/web/items/AdminItemsControllerTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/AdminItemsControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/AdminItemsControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/items/AdminItemsControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -10,6 +10,7 @@\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.LOCATION;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n@@ -56,11 +57,10 @@ void create() {\n \n             // Then\n             .andExpect(status().isCreated())\n-            .andExpect(header().exists(HttpHeaders.LOCATION))\n+            .andExpect(header().exists(LOCATION))\n             // TODO как бы тут достать URL? Это будет работать в таком виде?\n-            .andExpect(header().string(HttpHeaders.LOCATION, \"http://localhost\" + itemsPath + TEST_ITEM_1_ID))\n+            .andExpect(header().string(LOCATION, \"http://localhost\" + itemsPath + TEST_ITEM_1_ID))\n             .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-            // TODO поправить проверку содержимого\n             .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n@@ -113,7 +113,6 @@ void update() {\n             // Then\n             .andExpect(status().isOk())\n             .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-            // TODO поправить проверку содержимого\n             .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);"
  },
  {
    "sha": "f8f25b0165da37ee73e9ca9079b92c4963cb6928",
    "filename": "src/test/java/com/example/storehouse/web/items/UnauthorizedItemsControllerTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 7,
    "changes": 16,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/UnauthorizedItemsControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/UnauthorizedItemsControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/items/UnauthorizedItemsControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,5 +1,13 @@\n package com.example.storehouse.web.items;\n \n+import com.example.storehouse.dto.ItemTo;\n+import com.example.storehouse.model.ItemStorehouse;\n+import lombok.SneakyThrows;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n import static com.example.storehouse.TestData.TEST_ITEM_1_ID;\n import static com.example.storehouse.util.ItemsUtil.toItemToWithBalance;\n import static org.mockito.Mockito.times;\n@@ -12,13 +20,6 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import com.example.storehouse.dto.ItemTo;\n-import com.example.storehouse.model.ItemStorehouse;\n-import lombok.SneakyThrows;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n-\n public class UnauthorizedItemsControllerTest extends AbstractItemsControllerTest {\n \n     @BeforeEach\n@@ -92,6 +93,7 @@ void getById() {\n         verifyNoInteractions(itemsService);\n     }\n \n+    @Disabled\n     @Override\n     void getByIdNotFound() {\n         // do nothing"
  },
  {
    "sha": "98f667bf662b0e93881dd34cb01b91c43b77a08c",
    "filename": "src/test/java/com/example/storehouse/web/items/UserItemsControllerTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 9,
    "changes": 17,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/UserItemsControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/items/UserItemsControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/items/UserItemsControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,5 +1,13 @@\n package com.example.storehouse.web.items;\n \n+import com.example.storehouse.dto.ItemTo;\n+import com.example.storehouse.model.ItemStorehouse;\n+import lombok.SneakyThrows;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n import static com.example.storehouse.TestData.TEST_ITEM_1_ID;\n import static com.example.storehouse.util.ItemsUtil.toItemToWithBalance;\n import static org.mockito.Mockito.times;\n@@ -11,15 +19,6 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import com.example.storehouse.dto.ItemTo;\n-import com.example.storehouse.model.ItemStorehouse;\n-import com.example.storehouse.model.User;\n-import lombok.SneakyThrows;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n-\n public class UserItemsControllerTest extends AbstractItemsControllerTest {\n \n     @BeforeEach"
  },
  {
    "sha": "322bf9b92fd17eb308fcc2b560e72f128bab8a42",
    "filename": "src/test/java/com/example/storehouse/web/storehouses/AbstractStorehousesControllerTest.java",
    "status": "modified",
    "additions": 63,
    "deletions": 51,
    "changes": 114,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/AbstractStorehousesControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/AbstractStorehousesControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/storehouses/AbstractStorehousesControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -6,43 +6,57 @@\n import com.example.storehouse.service.StorehousesService;\n import com.example.storehouse.util.exception.NotFoundException;\n import com.example.storehouse.web.AbstractControllerTest;\n+import com.example.storehouse.web.StorehousesController;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static com.example.storehouse.TestData.*;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static com.example.storehouse.TestData.TEST_CATEGORIES_NAME;\n+import static com.example.storehouse.TestData.TEST_ITEMS_NAME;\n+import static com.example.storehouse.TestData.TEST_ITEMS_SKU;\n+import static com.example.storehouse.TestData.TEST_ITEM_1_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_2_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_3_ID;\n+import static com.example.storehouse.TestData.TEST_STOREHOUSE_1_ID;\n+import static com.example.storehouse.TestData.TEST_STOREHOUSE_2_ID;\n+import static com.example.storehouse.TestData.TEST_STOREHOUSE_3_ID;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.isNull;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+@SpringJUnitConfig(StorehousesController.class)\n public abstract class AbstractStorehousesControllerTest extends AbstractControllerTest {\n+\n     @Value(\"${app.endpoints.base_path}\" + \"${app.endpoints.storehouses.base_url}/\")\n     String storehousesPath;\n \n     @MockBean\n     StorehousesService storehousesService;\n \n     Storehouse testStorehouseOne,\n-            testStorehouseTwo,\n-            testStorehouseThree;\n+        testStorehouseTwo,\n+        testStorehouseThree;\n     List<Storehouse> testStorehouses;\n \n     Item testItemOne,\n-            testItemTwo,\n-            testItemThree;\n+        testItemTwo,\n+        testItemThree;\n     List<Item> testItems;\n \n     @Override\n@@ -69,15 +83,15 @@ void getAll() {\n \n         // When\n         mvc\n-                .perform(get(storehousesPath)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n+            .perform(get(storehousesPath)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(storehousesService).get(isNull());\n@@ -92,17 +106,15 @@ void getById() {\n \n         // When\n         mvc\n-                .perform(get(storehousesPath + \"/{id}\", TEST_STOREHOUSE_1_ID)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n-        // TODO поправить проверку содержимого\n-        //.andExpect(jsonPath(\"$.data\").value(objectMapper.writeValueAsString(returnedItem)))\n+            .perform(get(storehousesPath + \"/{id}\", TEST_STOREHOUSE_1_ID)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(storehousesService).getById(TEST_STOREHOUSE_1_ID);\n@@ -118,15 +130,15 @@ void getByIdNotFound() {\n \n         // When\n         mvc\n-                .perform(get(storehousesPath + \"/{id}\", absentedCategoryId)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isNotFound())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isEmpty())\n+            .perform(get(storehousesPath + \"/{id}\", absentedCategoryId)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isNotFound())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(storehousesService).getById(absentedCategoryId);\n@@ -152,11 +164,11 @@ void createTestEntities() {\n         testStorehouseThree.setId(TEST_STOREHOUSE_3_ID);\n \n         testStorehouses = List.of(testStorehouseOne, testStorehouseTwo, testStorehouseThree).stream()\n-                .peek(storehouse -> {\n-                    storehouse.setName(TEST_CATEGORIES_NAME + storehouse.getId());\n-                    storehouse.setItemStorehouses(new HashSet<ItemStorehouse>(createItemStorehouses()));\n-                })\n-                .collect(Collectors.toList());\n+            .peek(storehouse -> {\n+                storehouse.setName(TEST_CATEGORIES_NAME + storehouse.getId());\n+                storehouse.setItemStorehouses(new HashSet<ItemStorehouse>(createItemStorehouses()));\n+            })\n+            .collect(Collectors.toList());\n \n     }\n \n@@ -171,11 +183,11 @@ void createItems() {\n         testItemThree.setId(TEST_ITEM_3_ID);\n \n         testItems = List.of(testItemOne, testItemTwo, testItemThree).stream()\n-                .peek(item -> {\n-                    item.setName(TEST_ITEMS_NAME + item.getId());\n-                    item.setSku(TEST_ITEMS_SKU);\n-                })\n-                .collect(Collectors.toList());\n+            .peek(item -> {\n+                item.setName(TEST_ITEMS_NAME + item.getId());\n+                item.setSku(TEST_ITEMS_SKU);\n+            })\n+            .collect(Collectors.toList());\n \n     }\n "
  },
  {
    "sha": "3ffb9381a71692f161049bee9726dd1a482c18bd",
    "filename": "src/test/java/com/example/storehouse/web/storehouses/AdminStorehousesControllerTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 16,
    "changes": 36,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/AdminStorehousesControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/AdminStorehousesControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/storehouses/AdminStorehousesControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -6,23 +6,30 @@\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n import static com.example.storehouse.TestData.TEST_STOREHOUSE_1_ID;\n import static com.example.storehouse.util.StorehousesUtil.toStorehouseTo;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.ArgumentMatchers.isA;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.LOCATION;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public class AdminStorehousesControllerTest extends AbstractStorehousesControllerTest {\n+\n     @BeforeEach\n     void setUpAdmin() {\n         when(jwtTokenProvider.getAuthentication(AUTH_TOKEN)).thenReturn(mockAuthorize(createTestUserAdmin()));\n@@ -38,19 +45,17 @@ void create() {\n \n         // When\n         mvc\n-                .perform(post(storehousesPath)\n-                        .headers(headers)\n-                        .content(objectMapper.writeValueAsString(createdStorehouse))\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isCreated())\n-                .andExpect(header().exists(HttpHeaders.LOCATION))\n-                // TODO как бы тут достать URL? Это будет работать в таком виде?\n-                .andExpect(header().string(HttpHeaders.LOCATION, \"http://localhost\" + storehousesPath + TEST_STOREHOUSE_1_ID))\n+            .perform(post(storehousesPath)\n+                .headers(headers)\n+                .content(objectMapper.writeValueAsString(createdStorehouse))\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isCreated())\n+            .andExpect(header().exists(LOCATION))\n+            .andExpect(header().string(LOCATION, \"http://localhost\" + storehousesPath + TEST_STOREHOUSE_1_ID))\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n@@ -99,7 +104,6 @@ void update() {\n                 // Then\n                 .andExpect(status().isOk())\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);"
  },
  {
    "sha": "adfb55893139ea0df1025f19dceb17c754c481b9",
    "filename": "src/test/java/com/example/storehouse/web/storehouses/UnauthorizedStorehousesControllerTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/UnauthorizedStorehousesControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/UnauthorizedStorehousesControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/storehouses/UnauthorizedStorehousesControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -9,8 +9,13 @@\n \n import static com.example.storehouse.TestData.TEST_STOREHOUSE_1_ID;\n import static com.example.storehouse.util.StorehousesUtil.toStorehouseTo;\n-import static org.mockito.Mockito.*;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n "
  },
  {
    "sha": "be5c150e70aed0a3bd414a9ba5ecf0bb3224b3a6",
    "filename": "src/test/java/com/example/storehouse/web/storehouses/UserStorehousesControllerTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/UserStorehousesControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/storehouses/UserStorehousesControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/storehouses/UserStorehousesControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -10,8 +10,10 @@\n \n import static com.example.storehouse.TestData.TEST_STOREHOUSE_1_ID;\n import static com.example.storehouse.util.StorehousesUtil.toStorehouseTo;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;"
  },
  {
    "sha": "f23b16214eea9a0771be1b57cfec905c4e093a8c",
    "filename": "src/test/java/com/example/storehouse/web/suppliers/AbstractSuppliersControllerTest.java",
    "status": "modified",
    "additions": 15,
    "deletions": 9,
    "changes": 24,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/AbstractSuppliersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/AbstractSuppliersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/suppliers/AbstractSuppliersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -5,13 +5,25 @@\n import com.example.storehouse.service.SuppliersService;\n import com.example.storehouse.util.exception.NotFoundException;\n import com.example.storehouse.web.AbstractControllerTest;\n+import com.example.storehouse.web.SuppliersController;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-\n-import static com.example.storehouse.TestData.*;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static com.example.storehouse.TestData.TEST_ITEMS_NAME;\n+import static com.example.storehouse.TestData.TEST_ITEMS_SKU;\n+import static com.example.storehouse.TestData.TEST_ITEM_1_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_2_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_3_ID;\n+import static com.example.storehouse.TestData.TEST_SUPPLIERS_NAME;\n+import static com.example.storehouse.TestData.TEST_SUPPLIER_1_ID;\n+import static com.example.storehouse.TestData.TEST_SUPPLIER_2_ID;\n+import static com.example.storehouse.TestData.TEST_SUPPLIER_3_ID;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.isNull;\n@@ -25,9 +37,7 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n+@SpringJUnitConfig(SuppliersController.class)\n abstract class AbstractSuppliersControllerTest extends AbstractControllerTest {\n \n     @Value(\"${app.endpoints.base_path}\" + \"${app.endpoints.suppliers.base_url}/\")\n@@ -100,8 +110,6 @@ void getById() {\n                 .andExpect(status().isOk())\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n-        // TODO поправить проверку содержимого\n-        //.andExpect(jsonPath(\"$.data\").value(objectMapper.writeValueAsString(returnedItem)))\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(suppliersService).getById(TEST_SUPPLIER_1_ID);\n@@ -155,7 +163,6 @@ void createTestEntities() {\n                     supplier.setItems(testItems);\n                 })\n                 .collect(Collectors.toList());\n-\n     }\n \n     void createItems() {\n@@ -174,7 +181,6 @@ void createItems() {\n                     item.setSku(TEST_ITEMS_SKU);\n                 })\n                 .collect(Collectors.toList());\n-\n     }\n \n }"
  },
  {
    "sha": "21d31c8fc24f2287acdc9a6841f20bd02c625ccb",
    "filename": "src/test/java/com/example/storehouse/web/suppliers/AdminSuppliersControllerTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 19,
    "changes": 41,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/AdminSuppliersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/AdminSuppliersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/suppliers/AdminSuppliersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,29 +1,35 @@\n package com.example.storehouse.web.suppliers;\n \n import com.example.storehouse.dto.SupplierTo;\n-import com.example.storehouse.model.User;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n-\n-import static com.example.storehouse.TestData.*;\n+import static com.example.storehouse.TestData.TEST_SUPPLIER_1_ID;\n import static com.example.storehouse.util.SuppliersUtil.toSupplierTo;\n import static org.mockito.ArgumentMatchers.isA;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.LOCATION;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n class AdminSuppliersControllerTest extends AbstractSuppliersControllerTest {\n+\n     @BeforeEach\n     void setUpAdmin() {\n         when(jwtTokenProvider.getAuthentication(AUTH_TOKEN)).thenReturn(mockAuthorize(createTestUserAdmin()));\n@@ -39,19 +45,17 @@ void create() {\n \n         // When\n         mvc\n-                .perform(post(suppliersPath)\n-                        .headers(headers)\n-                        .content(objectMapper.writeValueAsString(createdSupplier))\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isCreated())\n-                .andExpect(header().exists(HttpHeaders.LOCATION))\n-                // TODO как бы тут достать URL? Это будет работать в таком виде?\n-                .andExpect(header().string(HttpHeaders.LOCATION, \"http://localhost\" + suppliersPath + TEST_SUPPLIER_1_ID))\n+            .perform(post(suppliersPath)\n+                .headers(headers)\n+                .content(objectMapper.writeValueAsString(createdSupplier))\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isCreated())\n+            .andExpect(header().exists(LOCATION))\n+            .andExpect(header().string(LOCATION, \"http://localhost\" + suppliersPath + TEST_SUPPLIER_1_ID))\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n@@ -100,7 +104,6 @@ void update() {\n                 // Then\n                 .andExpect(status().isOk())\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);"
  },
  {
    "sha": "ac82659e77ea830fbe983b669bd25476f23e24e7",
    "filename": "src/test/java/com/example/storehouse/web/suppliers/UnauthorizedSuppliersControllerTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/UnauthorizedSuppliersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/UnauthorizedSuppliersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/suppliers/UnauthorizedSuppliersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -9,8 +9,13 @@\n \n import static com.example.storehouse.TestData.TEST_SUPPLIER_1_ID;\n import static com.example.storehouse.util.SuppliersUtil.toSupplierTo;\n-import static org.mockito.Mockito.*;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -22,7 +27,6 @@ void setUpUnauthorized() {\n     }\n \n     @Test\n-    //@Override\n     @SneakyThrows\n     void getByName() {\n         // Given"
  },
  {
    "sha": "f16aa33825ded7106dc3dbb25995a47f158040eb",
    "filename": "src/test/java/com/example/storehouse/web/suppliers/UserSuppliersControllerTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/UserSuppliersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/suppliers/UserSuppliersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/suppliers/UserSuppliersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -8,15 +8,16 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n-\n-import static com.example.storehouse.TestData.*;\n+import static com.example.storehouse.TestData.TEST_SUPPLIER_1_ID;\n import static com.example.storehouse.util.SuppliersUtil.toSupplierTo;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n class UserSuppliersControllerTest extends AbstractSuppliersControllerTest {\n \n@@ -94,4 +95,5 @@ void delete() {\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verifyNoInteractions(suppliersService);\n     }\n+\n }"
  },
  {
    "sha": "829e9f3cf7ee3621e2da6a9dd04ac7c7458d7fdd",
    "filename": "src/test/java/com/example/storehouse/web/units/AbstractUnitsControllerTest.java",
    "status": "modified",
    "additions": 63,
    "deletions": 57,
    "changes": 120,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/AbstractUnitsControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/AbstractUnitsControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/units/AbstractUnitsControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -1,53 +1,60 @@\n package com.example.storehouse.web.units;\n \n-import com.example.storehouse.model.Category;\n import com.example.storehouse.model.Item;\n import com.example.storehouse.model.Unit;\n-import com.example.storehouse.service.CategoriesService;\n import com.example.storehouse.service.UnitsService;\n import com.example.storehouse.util.exception.NotFoundException;\n import com.example.storehouse.web.AbstractControllerTest;\n+import com.example.storehouse.web.UnitsController;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static com.example.storehouse.TestData.*;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static com.example.storehouse.TestData.TEST_ITEMS_NAME;\n+import static com.example.storehouse.TestData.TEST_ITEMS_SKU;\n+import static com.example.storehouse.TestData.TEST_ITEM_1_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_2_ID;\n+import static com.example.storehouse.TestData.TEST_ITEM_3_ID;\n+import static com.example.storehouse.TestData.TEST_UNITS_NAME;\n+import static com.example.storehouse.TestData.TEST_UNIT_1_ID;\n+import static com.example.storehouse.TestData.TEST_UNIT_2_ID;\n+import static com.example.storehouse.TestData.TEST_UNIT_3_ID;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.isNull;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+@SpringJUnitConfig(UnitsController.class)\n public abstract class AbstractUnitsControllerTest extends AbstractControllerTest {\n+\n     @Value(\"${app.endpoints.base_path}\" + \"${app.endpoints.units.base_url}/\")\n     String unitsPath;\n \n     @MockBean\n     UnitsService unitsService;\n \n     Unit testUnitOne,\n-            testUnitTwo,\n-            testUnitThree;\n+        testUnitTwo,\n+        testUnitThree;\n     List<Unit> testUnits;\n \n-//    Category testCategoryOne,\n-//            testCategoryTwo,\n-//            testCategoryThree;\n-//    List<Category> testCategories;\n-\n     Item testItemOne,\n-            testItemTwo,\n-            testItemThree;\n+        testItemTwo,\n+        testItemThree;\n     List<Item> testItems;\n \n     @Override\n@@ -74,15 +81,15 @@ void getAll() {\n \n         // When\n         mvc\n-                .perform(get(unitsPath)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n+            .perform(get(unitsPath)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(unitsService).get(isNull());\n@@ -97,17 +104,15 @@ void getById() {\n \n         // When\n         mvc\n-                .perform(get(unitsPath + \"/{id}\", TEST_UNIT_1_ID)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n-        // TODO поправить проверку содержимого\n-        //.andExpect(jsonPath(\"$.data\").value(objectMapper.writeValueAsString(returnedItem)))\n+            .perform(get(unitsPath + \"/{id}\", TEST_UNIT_1_ID)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(unitsService).getById(TEST_UNIT_1_ID);\n@@ -123,15 +128,15 @@ void getByIdNotFound() {\n \n         // When\n         mvc\n-                .perform(get(unitsPath + \"/{id}\", absentedUnitId)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isNotFound())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isEmpty())\n+            .perform(get(unitsPath + \"/{id}\", absentedUnitId)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isNotFound())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(unitsService).getById(absentedUnitId);\n@@ -157,11 +162,11 @@ void createTestEntities() {\n         testUnitThree.setId(TEST_UNIT_3_ID);\n \n         testUnits = List.of(testUnitOne, testUnitTwo, testUnitThree).stream()\n-                .peek(unit -> {\n-                    unit.setName(TEST_UNITS_NAME + unit.getId());\n-                    unit.setItems(testItems);\n-                })\n-                .collect(Collectors.toList());\n+            .peek(unit -> {\n+                unit.setName(TEST_UNITS_NAME + unit.getId());\n+                unit.setItems(testItems);\n+            })\n+            .collect(Collectors.toList());\n \n     }\n \n@@ -176,11 +181,12 @@ void createItems() {\n         testItemThree.setId(TEST_ITEM_3_ID);\n \n         testItems = List.of(testItemOne, testItemTwo, testItemThree).stream()\n-                .peek(item -> {\n-                    item.setName(TEST_ITEMS_NAME + item.getId());\n-                    item.setSku(TEST_ITEMS_SKU);\n-                })\n-                .collect(Collectors.toList());\n+            .peek(item -> {\n+                item.setName(TEST_ITEMS_NAME + item.getId());\n+                item.setSku(TEST_ITEMS_SKU);\n+            })\n+            .collect(Collectors.toList());\n \n     }\n+\n }"
  },
  {
    "sha": "245aab45e29d68bbd5ac5752807043b6d3d3967c",
    "filename": "src/test/java/com/example/storehouse/web/units/AdminUnitsControllerTests.java",
    "status": "modified",
    "additions": 20,
    "deletions": 16,
    "changes": 36,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/AdminUnitsControllerTests.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/AdminUnitsControllerTests.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/units/AdminUnitsControllerTests.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -6,23 +6,30 @@\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n import static com.example.storehouse.TestData.TEST_UNIT_1_ID;\n import static com.example.storehouse.util.UnitsUtil.toUnitTo;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.ArgumentMatchers.isA;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.LOCATION;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public class AdminUnitsControllerTests extends AbstractUnitsControllerTest{\n+\n     @BeforeEach\n     void setUpAdmin() {\n         when(jwtTokenProvider.getAuthentication(AUTH_TOKEN)).thenReturn(mockAuthorize(createTestUserAdmin()));\n@@ -38,19 +45,17 @@ void create() {\n \n         // When\n         mvc\n-                .perform(post(unitsPath)\n-                        .headers(headers)\n-                        .content(objectMapper.writeValueAsString(createdUnit))\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isCreated())\n-                .andExpect(header().exists(HttpHeaders.LOCATION))\n-                // TODO как бы тут достать URL? Это будет работать в таком виде?\n-                .andExpect(header().string(HttpHeaders.LOCATION, \"http://localhost\" + unitsPath + TEST_UNIT_1_ID))\n+            .perform(post(unitsPath)\n+                .headers(headers)\n+                .content(objectMapper.writeValueAsString(createdUnit))\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isCreated())\n+            .andExpect(header().exists(LOCATION))\n+            .andExpect(header().string(LOCATION, \"http://localhost\" + unitsPath + TEST_UNIT_1_ID))\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n@@ -100,7 +105,6 @@ void update() {\n                 // Then\n                 .andExpect(status().isOk())\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);"
  },
  {
    "sha": "c93474b94597fa747a32207216002a361ba8a3d3",
    "filename": "src/test/java/com/example/storehouse/web/units/UnauthorizedUnitsControllerTests.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/UnauthorizedUnitsControllerTests.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/UnauthorizedUnitsControllerTests.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/units/UnauthorizedUnitsControllerTests.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -9,8 +9,13 @@\n \n import static com.example.storehouse.TestData.TEST_UNIT_1_ID;\n import static com.example.storehouse.util.UnitsUtil.toUnitTo;\n-import static org.mockito.Mockito.*;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -22,7 +27,6 @@ void setUpUnauthorized() {\n     }\n \n     @Test\n-    //@Override\n     @SneakyThrows\n     void getByName() {\n         // Given"
  },
  {
    "sha": "0114f3e54e36d2239e28c70c2b368b0fe2536e9d",
    "filename": "src/test/java/com/example/storehouse/web/units/UserUnitsControllerTests.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/UserUnitsControllerTests.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/units/UserUnitsControllerTests.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/units/UserUnitsControllerTests.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -10,8 +10,10 @@\n \n import static com.example.storehouse.TestData.TEST_UNIT_1_ID;\n import static com.example.storehouse.util.UnitsUtil.toUnitTo;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;"
  },
  {
    "sha": "d1beb40086be83bef224fc2e9f6da027564a150f",
    "filename": "src/test/java/com/example/storehouse/web/users/AbstractUsersControllerTest.java",
    "status": "modified",
    "additions": 46,
    "deletions": 36,
    "changes": 82,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/users/AbstractUsersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/users/AbstractUsersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/users/AbstractUsersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -4,35 +4,47 @@\n import com.example.storehouse.service.UsersService;\n import com.example.storehouse.util.exception.NotFoundException;\n import com.example.storehouse.web.AbstractControllerTest;\n+import com.example.storehouse.web.UsersController;\n+import java.util.List;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.mock.mockito.MockBean;\n-\n-import java.util.List;\n-\n-import static com.example.storehouse.TestData.*;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static com.example.storehouse.TestData.TEST_USER_EMAIL;\n+import static com.example.storehouse.TestData.TEST_USER_FIRST_NAME;\n+import static com.example.storehouse.TestData.TEST_USER_ID;\n+import static com.example.storehouse.TestData.TEST_USER_LAST_NAME;\n+import static com.example.storehouse.TestData.TEST_USER_PASSWORD;\n+import static com.example.storehouse.TestData.TEST_USER_ROLE;\n+import static com.example.storehouse.TestData.TEST_USER_STATUS;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.isNull;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n+@SpringJUnitConfig(UsersController.class)\n public abstract class AbstractUsersControllerTest extends AbstractControllerTest {\n+\n     @Value(\"${app.endpoints.base_path}\" + \"${app.endpoints.users.base_url}/\")\n     String usersPath;\n \n     @MockBean\n     UsersService usersService;\n \n     User testUserOne,\n-            testUserTwo;\n+        testUserTwo;\n     List<User> testUsers;\n \n     @Override\n@@ -59,15 +71,15 @@ void getAll() {\n \n         // When\n         mvc\n-                .perform(get(usersPath)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n+            .perform(get(usersPath)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(usersService).get(isNull());\n@@ -82,17 +94,15 @@ void getById() {\n \n         // When\n         mvc\n-                .perform(get(usersPath + \"/{id}\", TEST_USER_ID)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isNotEmpty())\n-        // TODO поправить проверку содержимого\n-        //.andExpect(jsonPath(\"$.data\").value(objectMapper.writeValueAsString(returnedItem)))\n+            .perform(get(usersPath + \"/{id}\", TEST_USER_ID)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isOk())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(usersService).getById(TEST_USER_ID);\n@@ -108,15 +118,15 @@ void getByIdNotFound() {\n \n         // When\n         mvc\n-                .perform(get(usersPath + \"/{id}\", absentedUserId)\n-                        .headers(headers)\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isNotFound())\n-                .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                .andExpect(jsonPath(\"$.data\").isEmpty())\n+            .perform(get(usersPath + \"/{id}\", absentedUserId)\n+                .headers(headers)\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isNotFound())\n+            .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n+            .andExpect(jsonPath(\"$.data\").isEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n         verify(usersService).getById(absentedUserId);"
  },
  {
    "sha": "c605db8ad9baea6768dca67d097aecf44df332a7",
    "filename": "src/test/java/com/example/storehouse/web/users/AdminUsersControllerTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 17,
    "changes": 37,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/users/AdminUsersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/users/AdminUsersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/users/AdminUsersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -6,23 +6,30 @@\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n import static com.example.storehouse.TestData.TEST_USER_ID;\n import static com.example.storehouse.util.UsersUtil.toUserTo;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.ArgumentMatchers.isA;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.LOCATION;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public class AdminUsersControllerTest extends AbstractUsersControllerTest {\n+\n     @BeforeEach\n     void setUpAdmin() {\n         when(jwtTokenProvider.getAuthentication(AUTH_TOKEN)).thenReturn(mockAuthorize(createTestUserAdmin()));\n@@ -38,19 +45,17 @@ void create() {\n \n         // When\n         mvc\n-                .perform(post(usersPath)\n-                        .headers(headers)\n-                        .content(objectMapper.writeValueAsString(createdUser))\n-                )\n-                .andDo(print())\n-\n-                // Then\n-                .andExpect(status().isCreated())\n-                .andExpect(header().exists(HttpHeaders.LOCATION))\n-                // TODO как бы тут достать URL? Это будет работать в таком виде?\n-                .andExpect(header().string(HttpHeaders.LOCATION, \"http://localhost\" + usersPath + TEST_USER_ID))\n+            .perform(post(usersPath)\n+                .headers(headers)\n+                .content(objectMapper.writeValueAsString(createdUser))\n+            )\n+            .andDo(print())\n+\n+            // Then\n+            .andExpect(status().isCreated())\n+            .andExpect(header().exists(LOCATION))\n+            .andExpect(header().string(LOCATION, \"http://localhost\" + usersPath + TEST_USER_ID))\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);\n@@ -83,7 +88,6 @@ void createInvalid() {\n     @SneakyThrows\n     void update() {\n         // Given\n-        //testUserOne.setId(999);\n         testUserOne.setFirstName(\"updated_FirstName\");\n         testUserOne.setLastName(\"updated_LastName\");\n         UserTo updatedUser = toUserTo(testUserOne);\n@@ -100,7 +104,6 @@ void update() {\n                 // Then\n                 .andExpect(status().isOk())\n                 .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON_VALUE))\n-                // TODO поправить проверку содержимого\n                 .andExpect(jsonPath(\"$.data\").isNotEmpty())\n         ;\n         verify(jwtTokenProvider, times(2)).validateToken(AUTH_TOKEN);"
  },
  {
    "sha": "78640ddedd1f8048ab13ad3fa8ab268e7a9e997d",
    "filename": "src/test/java/com/example/storehouse/web/users/UserUsersControllerTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/VaolEr/GB-spring-boot-app/blob/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/users/UserUsersControllerTest.java",
    "raw_url": "https://github.com/VaolEr/GB-spring-boot-app/raw/af6fe6d2f6932deb5aa2f3028ae14788bc70ad36/src/test/java/com/example/storehouse/web/users/UserUsersControllerTest.java",
    "contents_url": "https://api.github.com/repos/VaolEr/GB-spring-boot-app/contents/src/test/java/com/example/storehouse/web/users/UserUsersControllerTest.java?ref=af6fe6d2f6932deb5aa2f3028ae14788bc70ad36",
    "patch": "@@ -2,22 +2,26 @@\n \n import com.example.storehouse.dto.UserTo;\n import com.example.storehouse.model.User;\n+import java.util.List;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n \n-import java.util.List;\n-\n import static com.example.storehouse.TestData.TEST_USER_ID;\n import static com.example.storehouse.util.UsersUtil.toUserTo;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public class UserUsersControllerTest extends AbstractUsersControllerTest{\n \n@@ -71,6 +75,7 @@ void getById() {\n         verifyNoInteractions(usersService);\n     }\n \n+    @Disabled\n     @Override\n     @DisplayName(\"Get user by not existing id\")\n     void getByIdNotFound() {"
  }
]
