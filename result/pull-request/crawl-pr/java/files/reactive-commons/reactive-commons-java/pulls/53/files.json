[
  {
    "sha": "e4883f427c69dfa4f498fe630b0efa3d57b7eb80",
    "filename": "async/async-commons/src/main/java/org/reactivecommons/async/impl/Headers.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/reactive-commons/reactive-commons-java/blob/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/Headers.java",
    "raw_url": "https://github.com/reactive-commons/reactive-commons-java/raw/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/Headers.java",
    "contents_url": "https://api.github.com/repos/reactive-commons/reactive-commons-java/contents/async/async-commons/src/main/java/org/reactivecommons/async/impl/Headers.java?ref=be24f289f765a44cbeac757305baf57733548684",
    "patch": "@@ -7,6 +7,7 @@\n     public static final String COMPLETION_ONLY_SIGNAL = \"x-empty-completion\";\n     public static final String SERVED_QUERY_ID = \"x-serveQuery-id\";\n     public static final String SOURCE_APPLICATION = \"sourceApplication\";\n+    public static final String REPLY_TIMEOUT_MILLIS = \"x-reply-timeout-millis\";\n     public static final String SIGNAL_TYPE = \"x-signal-type\";\n \n "
  },
  {
    "sha": "63deb58a06b3eaaef24e5e68f3906e1dd5c41c85",
    "filename": "async/async-commons/src/main/java/org/reactivecommons/async/impl/RabbitDirectAsyncGateway.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/reactive-commons/reactive-commons-java/blob/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/RabbitDirectAsyncGateway.java",
    "raw_url": "https://github.com/reactive-commons/reactive-commons-java/raw/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/RabbitDirectAsyncGateway.java",
    "contents_url": "https://api.github.com/repos/reactive-commons/reactive-commons-java/contents/async/async-commons/src/main/java/org/reactivecommons/async/impl/RabbitDirectAsyncGateway.java?ref=be24f289f765a44cbeac757305baf57733548684",
    "patch": "@@ -70,8 +70,10 @@ public RabbitDirectAsyncGateway(BrokerConfig config, ReactiveReplyRouter router,\n         headers.put(REPLY_ID, config.getRoutingKey());\n         headers.put(SERVED_QUERY_ID, query.getResource());\n         headers.put(CORRELATION_ID, correlationID);\n+        headers.put(REPLY_TIMEOUT_MILLIS, replyTimeout.toMillis());\n \n-        return sender.sendNoConfirm(query, exchange, targetName + \".query\", headers, persistentQueries).then(replyHolder);\n+        return sender.sendNoConfirm(query, exchange, targetName + \".query\", headers, persistentQueries)\n+                .then(replyHolder);\n     }\n \n     @Override"
  },
  {
    "sha": "91c7bd80311ee3e4d8551b21a14829e2dd782fe0",
    "filename": "async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListener.java",
    "status": "modified",
    "additions": 45,
    "deletions": 5,
    "changes": 50,
    "blob_url": "https://github.com/reactive-commons/reactive-commons-java/blob/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListener.java",
    "raw_url": "https://github.com/reactive-commons/reactive-commons-java/raw/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListener.java",
    "contents_url": "https://api.github.com/repos/reactive-commons/reactive-commons-java/contents/async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListener.java?ref=be24f289f765a44cbeac757305baf57733548684",
    "patch": "@@ -5,7 +5,6 @@\n import org.reactivecommons.async.api.handlers.registered.RegisteredQueryHandler;\n import org.reactivecommons.async.impl.DiscardNotifier;\n import org.reactivecommons.async.impl.HandlerResolver;\n-import org.reactivecommons.async.impl.Headers;\n import org.reactivecommons.async.impl.QueryExecutor;\n import org.reactivecommons.async.impl.communications.Message;\n import org.reactivecommons.async.impl.communications.ReactiveMessageListener;\n@@ -18,11 +17,13 @@\n import reactor.rabbitmq.BindingSpecification;\n import reactor.rabbitmq.ExchangeSpecification;\n \n+import java.time.Duration;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.Optional;\n import java.util.function.Function;\n+import java.util.logging.Level;\n \n-import static java.lang.Boolean.TRUE;\n import static java.util.Optional.ofNullable;\n import static org.reactivecommons.async.impl.Headers.*;\n \n@@ -71,11 +72,11 @@ public ApplicationQueryListener(ReactiveMessageListener listener, String queueNa\n     protected Mono<Void> setUpBindings(TopologyCreator creator) {\n         if (withDLQRetry) {\n             final Mono<AMQP.Exchange.DeclareOk> declareExchange = creator.declare(ExchangeSpecification.exchange(directExchange).durable(true).type(\"direct\"));\n-            final Mono<AMQP.Exchange.DeclareOk> declareExchangeDLQ = creator.declare(ExchangeSpecification.exchange(directExchange+\".DLQ\").durable(true).type(\"direct\"));\n-            final Mono<AMQP.Queue.DeclareOk> declareQueue = creator.declareQueue(queueName, directExchange+\".DLQ\", maxLengthBytes);\n+            final Mono<AMQP.Exchange.DeclareOk> declareExchangeDLQ = creator.declare(ExchangeSpecification.exchange(directExchange + \".DLQ\").durable(true).type(\"direct\"));\n+            final Mono<AMQP.Queue.DeclareOk> declareQueue = creator.declareQueue(queueName, directExchange + \".DLQ\", maxLengthBytes);\n             final Mono<AMQP.Queue.DeclareOk> declareDLQ = creator.declareDLQ(queueName, directExchange, retryDelay, maxLengthBytes);\n             final Mono<AMQP.Queue.BindOk> binding = creator.bind(BindingSpecification.binding(directExchange, queueName, queueName));\n-            final Mono<AMQP.Queue.BindOk> bindingDLQ = creator.bind(BindingSpecification.binding(directExchange+\".DLQ\", queueName, queueName + \".DLQ\"));\n+            final Mono<AMQP.Queue.BindOk> bindingDLQ = creator.bind(BindingSpecification.binding(directExchange + \".DLQ\", queueName, queueName + \".DLQ\"));\n             return declareExchange.then(declareExchangeDLQ).then(declareQueue).then(declareDLQ).then(binding).then(bindingDLQ).then();\n         } else {\n             final Mono<AMQP.Exchange.DeclareOk> declareExchange = creator.declare(ExchangeSpecification.exchange(directExchange).durable(true).type(\"direct\"));\n@@ -90,12 +91,51 @@ protected String getExecutorPath(AcknowledgableDelivery msj) {\n         return msj.getProperties().getHeaders().get(SERVED_QUERY_ID).toString();\n     }\n \n+    @Override\n+    protected Mono<AcknowledgableDelivery> handle(AcknowledgableDelivery msj) {\n+        AMQP.BasicProperties messageProperties = msj.getProperties();\n+\n+        boolean messageDoesNotContainTimeoutMetadata = messageProperties.getTimestamp() == null ||\n+                !messageProperties.getHeaders().containsKey(REPLY_TIMEOUT_MILLIS);\n+\n+        if (messageDoesNotContainTimeoutMetadata) {\n+            return super.handle(msj);\n+        }\n+\n+        return handleWithTimeout(msj, messageProperties);\n+    }\n+\n+    private Mono<AcknowledgableDelivery> handleWithTimeout(AcknowledgableDelivery msj,\n+                                                           AMQP.BasicProperties messageProperties) {\n+        long messageTimestamp = msj.getProperties().getTimestamp().getTime();\n+        long replyTimeoutMillis = (int) messageProperties.getHeaders().get(REPLY_TIMEOUT_MILLIS);\n+        long millisUntilTimeout = (messageTimestamp + replyTimeoutMillis) - currentTimestamp();\n+        String executorPath = getExecutorPath(msj);\n+\n+        if (millisUntilTimeout > 0) {\n+            return super.handle(msj)\n+                    .timeout(Duration.ofMillis(millisUntilTimeout), buildTimeOutFallback(executorPath));\n+        }\n+\n+        return buildTimeOutFallback(executorPath);\n+    }\n+\n+    private long currentTimestamp() {\n+        return new Date().getTime();\n+    }\n+\n+    private Mono<AcknowledgableDelivery> buildTimeOutFallback(String executorPath) {\n+        return Mono.fromRunnable(() -> log.log(Level.WARNING, String.format(\"query with path %s discarded by timeout\",\n+                executorPath)));\n+    }\n+\n     @Override\n     protected Function<Mono<Object>, Mono<Object>> enrichPostProcess(Message msg) {\n         return m -> m.materialize().flatMap(signal -> {\n             if (signal.isOnError()) {\n                 return Mono.error(ofNullable(signal.getThrowable()).orElseGet(RuntimeException::new));\n             }\n+\n             if (signal.isOnComplete()) {\n                 return Mono.empty();\n             }"
  },
  {
    "sha": "dfb381fba524c5802263bda00d293d8a88898a27",
    "filename": "async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/GenericMessageListener.java",
    "status": "modified",
    "additions": 3,
    "deletions": 8,
    "changes": 11,
    "blob_url": "https://github.com/reactive-commons/reactive-commons-java/blob/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/GenericMessageListener.java",
    "raw_url": "https://github.com/reactive-commons/reactive-commons-java/raw/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/GenericMessageListener.java",
    "contents_url": "https://api.github.com/repos/reactive-commons/reactive-commons-java/contents/async/async-commons/src/main/java/org/reactivecommons/async/impl/listeners/GenericMessageListener.java?ref=be24f289f765a44cbeac757305baf57733548684",
    "patch": "@@ -81,7 +81,7 @@ public void startListener() {\n     }\n \n \n-    private Mono<AcknowledgableDelivery> handle(AcknowledgableDelivery msj) {\n+    protected Mono<AcknowledgableDelivery> handle(AcknowledgableDelivery msj) {\n         try {\n             String executorPath = getExecutorPath(msj);\n             final Function<Message, Mono<Object>> handler = getExecutor(executorPath);\n@@ -134,13 +134,8 @@ protected void logError(Throwable err, AcknowledgableDelivery msj, FallbackStrat\n     }\n \n     private Function<Message, Mono<Object>> getExecutor(String path) {\n-        final Function<Message, Mono<Object>> handler = handlers.get(path);\n-        return handler != null ? handler : computeRawMessageHandler(path);\n-    }\n-\n-    private Function<Message, Mono<Object>> computeRawMessageHandler(String commandId) {\n-        return handlers.computeIfAbsent(commandId, s ->\n-                rawMessageHandler(commandId)\n+        return handlers.computeIfAbsent(path, s ->\n+                rawMessageHandler(path)\n         );\n     }\n "
  },
  {
    "sha": "e8c3f3a1b9ae9d8e7905f5b9ce01137b1c1f5442",
    "filename": "async/async-commons/src/test/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListenerTest.java",
    "status": "modified",
    "additions": 125,
    "deletions": 13,
    "changes": 138,
    "blob_url": "https://github.com/reactive-commons/reactive-commons-java/blob/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/test/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListenerTest.java",
    "raw_url": "https://github.com/reactive-commons/reactive-commons-java/raw/be24f289f765a44cbeac757305baf57733548684/async/async-commons/src/test/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListenerTest.java",
    "contents_url": "https://api.github.com/repos/reactive-commons/reactive-commons-java/contents/async/async-commons/src/test/java/org/reactivecommons/async/impl/listeners/ApplicationQueryListenerTest.java?ref=be24f289f765a44cbeac757305baf57733548684",
    "patch": "@@ -1,11 +1,20 @@\n package org.reactivecommons.async.impl.listeners;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.rabbitmq.client.AMQP;\n+import com.rabbitmq.client.Delivery;\n+import com.rabbitmq.client.Envelope;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.reactivecommons.api.domain.Command;\n+import org.reactivecommons.async.api.AsyncQuery;\n+import org.reactivecommons.async.api.From;\n import org.reactivecommons.async.api.handlers.QueryHandler;\n+import org.reactivecommons.async.api.handlers.QueryHandlerDelegate;\n import org.reactivecommons.async.api.handlers.registered.RegisteredQueryHandler;\n import org.reactivecommons.async.helpers.SampleClass;\n import org.reactivecommons.async.helpers.TestStubs;\n@@ -20,37 +29,45 @@\n import org.reactivecommons.async.impl.converters.json.JacksonMessageConverter;\n import org.reactivecommons.async.impl.ext.CustomErrorReporter;\n import reactor.core.publisher.Mono;\n+import reactor.rabbitmq.AcknowledgableDelivery;\n import reactor.rabbitmq.Receiver;\n import reactor.test.StepVerifier;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.*;\n import java.util.function.Function;\n+import java.util.stream.IntStream;\n \n import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.*;\n+import static org.reactivecommons.async.impl.Headers.*;\n import static reactor.core.publisher.Mono.*;\n \n @ExtendWith(MockitoExtension.class)\n public class ApplicationQueryListenerTest {\n     private final MessageConverter messageConverter =\n             new JacksonMessageConverter(new DefaultObjectMapperSupplier().get());\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n     @Mock\n     private Receiver receiver;\n     @Mock\n     private ReactiveMessageSender sender;\n     @Mock\n     private DiscardNotifier discardNotifier;\n-    @Mock\n-    private TopologyCreator topologyCreator;\n \n     @Mock\n     private CustomErrorReporter errorReporter;\n \n     @Mock\n     private ReactiveMessageListener reactiveMessageListener;\n-    private GenericMessageListener genericMessageListener;\n+\n+    private GenericMessageListener applicationQueryListener;\n+\n \n     @SuppressWarnings(\"rawtypes\")\n     @BeforeEach\n@@ -65,13 +82,13 @@ public void setUp() {\n         handlers.put(\"queryDirect\", new RegisteredQueryHandler<>(\"queryDirect\",\n                 (from, message) -> handler.handle(message), SampleClass.class));\n         HandlerResolver resolver = new HandlerResolver(handlers, null, null, null, null);\n-        genericMessageListener = new ApplicationQueryListener(reactiveMessageListener, \"queue\", resolver, sender,\n+        applicationQueryListener = new ApplicationQueryListener(reactiveMessageListener, \"queue\", resolver, sender,\n                 \"directExchange\", messageConverter, \"replyExchange\", false, 1, 100, maxLengthBytes, discardNotifier, errorReporter);\n     }\n \n     @Test\n     public void shouldExecuteDelegateHandler() {\n-        Function<Message, Mono<Object>> handler = genericMessageListener.rawMessageHandler(\"queryDelegate\");\n+        Function<Message, Mono<Object>> handler = applicationQueryListener.rawMessageHandler(\"queryDelegate\");\n         Message message = TestStubs.mockMessage();\n         Mono<Object> result = handler.apply(message);\n \n@@ -81,7 +98,7 @@ public void shouldExecuteDelegateHandler() {\n \n     @Test\n     public void shouldExecuteDirectHandler() {\n-        Function<Message, Mono<Object>> handler = genericMessageListener.rawMessageHandler(\"queryDirect\");\n+        Function<Message, Mono<Object>> handler = applicationQueryListener.rawMessageHandler(\"queryDirect\");\n         Message message = TestStubs.mockMessage();\n         Mono<Object> result = handler.apply(message);\n \n@@ -92,7 +109,7 @@ public void shouldExecuteDirectHandler() {\n \n     @Test\n     public void shouldHandleErrorWhenNoQueryHandler() {\n-        Function<Message, Mono<Object>> handler = genericMessageListener.rawMessageHandler(\"nonExistent\");\n+        Function<Message, Mono<Object>> handler = applicationQueryListener.rawMessageHandler(\"nonExistent\");\n         Message message = TestStubs.mockMessage();\n         Mono<Object> result = handler.apply(message);\n \n@@ -103,7 +120,7 @@ public void shouldHandleErrorWhenNoQueryHandler() {\n     @Test\n     public void shouldNotRespondQueryEnrichPostProcess() {\n         Message message = spy(TestStubs.mockMessage());\n-        Function<Mono<Object>, Mono<Object>> handler = genericMessageListener.enrichPostProcess(message);\n+        Function<Mono<Object>, Mono<Object>> handler = applicationQueryListener.enrichPostProcess(message);\n         Mono<Object> result = handler.apply(empty());\n \n         StepVerifier.create(result)\n@@ -115,7 +132,7 @@ public void shouldNotRespondQueryEnrichPostProcess() {\n     @Test\n     public void shouldRespondQueryEnrichPostProcess() {\n         Message message = spy(TestStubs.mockMessage());\n-        Function<Mono<Object>, Mono<Object>> handler = genericMessageListener.enrichPostProcess(message);\n+        Function<Mono<Object>, Mono<Object>> handler = applicationQueryListener.enrichPostProcess(message);\n         Mono<Object> result = handler.apply(just(\"OK\"));\n         when(sender.sendNoConfirm(any(), anyString(), anyString(), anyMap(), anyBoolean())).thenReturn(empty());\n \n@@ -128,14 +145,109 @@ public void shouldRespondQueryEnrichPostProcess() {\n     @Test\n     public void shouldHandleErrorWhenEnrichPostProcessSignalError() {\n         Message message = TestStubs.mockMessage();\n-        Function<Mono<Object>, Mono<Object>> handler = genericMessageListener.enrichPostProcess(message);\n+        Function<Mono<Object>, Mono<Object>> handler = applicationQueryListener.enrichPostProcess(message);\n         String errorMessage = \"Error\";\n         Mono<Object> result = handler.apply(error(new RuntimeException(errorMessage)));\n \n         StepVerifier.create(result)\n                 .verifyErrorMessage(errorMessage);\n     }\n \n+    @Test\n+    void shouldUseBaseHandleIfNoTimeoutMetadataProvided() throws JsonProcessingException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        String queryName = \"queryDirect\";\n+\n+        AsyncQuery<DummyMessage> query = new AsyncQuery<>(queryName, new DummyMessage());\n+        String data = mapper.writeValueAsString(query);\n+\n+        AMQP.BasicProperties props = new AMQP.BasicProperties.Builder()\n+                .timestamp(new Date())\n+                .headers(buildHeaders(queryName, false))\n+                .build();\n+\n+        Envelope envelope = new Envelope(0L, true, \"directMessages\", \"app.query\");\n+        Delivery delivery = new Delivery(envelope, props, data.getBytes());\n+\n+        AcknowledgableDelivery acknowledgableDelivery = new AcknowledgableDelivery(delivery, null, null);\n+\n+        when(sender.sendNoConfirm(eq(\"OK\"), eq(\"replyExchange\"), eq(\"asdf1234\"), any(), eq(false)))\n+                .thenReturn(Mono.empty());\n+\n+        StepVerifier.create(applicationQueryListener.handle(acknowledgableDelivery))\n+                .expectNext(acknowledgableDelivery)\n+                .verifyComplete();\n+    }\n+\n+    @Test\n+    void shouldDiscardMessageIfItIsTimeout() throws JsonProcessingException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        String queryName = \"queryDirect\";\n+        int timeoutMillis = 15000;\n+\n+        AsyncQuery<DummyMessage> query = new AsyncQuery<>(queryName, new DummyMessage());\n+        String data = mapper.writeValueAsString(query);\n+\n+        Instant nowMinusMillis = Instant.now()\n+                .minusMillis(timeoutMillis);\n+\n+        AMQP.BasicProperties props = new AMQP.BasicProperties.Builder()\n+                .timestamp(Date.from(nowMinusMillis))\n+                .headers(buildHeaders(queryName, true))\n+                .build();\n+\n+        Envelope envelope = new Envelope(0L, true, \"directMessages\", \"app.query\");\n+        Delivery delivery = new Delivery(envelope, props, data.getBytes());\n+\n+        AcknowledgableDelivery acknowledgableDelivery = new AcknowledgableDelivery(delivery, null, null);\n+\n+        verifyNoInteractions(sender);\n+\n+        StepVerifier.create(applicationQueryListener.handle(acknowledgableDelivery))\n+                .verifyComplete();\n+    }\n+\n+    @Test\n+    void shouldHandleMessageIfHasTimeAvailable() throws JsonProcessingException {\n+        String queryName = \"queryDirect\";\n+\n+        AsyncQuery<DummyMessage> query = new AsyncQuery<>(queryName, new DummyMessage());\n+        String data = mapper.writeValueAsString(query);\n+\n+        AMQP.BasicProperties props = new AMQP.BasicProperties.Builder()\n+                .timestamp(new Date())\n+                .headers(buildHeaders(queryName, true))\n+                .build();\n+\n+        Envelope envelope = new Envelope(0L, true, \"directMessages\", \"app.query\");\n+        Delivery delivery = new Delivery(envelope, props, data.getBytes());\n+\n+        AcknowledgableDelivery acknowledgableDelivery = new AcknowledgableDelivery(delivery, null, null);\n+\n+        when(sender.sendNoConfirm(eq(\"OK\"), eq(\"replyExchange\"), eq(\"asdf1234\"), any(), eq(false)))\n+                .thenReturn(Mono.empty());\n+\n+        StepVerifier.create(applicationQueryListener.handle(acknowledgableDelivery))\n+                .expectNext(acknowledgableDelivery)\n+                .verifyComplete();\n+    }\n+\n+    private Map<String, Object> buildHeaders(String queryName, Boolean withTimeout) {\n+        int timeoutMillis = 15000;\n+\n+        Map<String, Object> headers = new HashMap<>();\n+        headers.put(SERVED_QUERY_ID, queryName);\n+        headers.put(REPLY_ID, \"asdf1234\");\n+        headers.put(CORRELATION_ID, \"lkj987\");\n+\n+        if (withTimeout) {\n+            headers.put(REPLY_TIMEOUT_MILLIS, timeoutMillis);\n+        }\n+\n+        return headers;\n+    }\n+\n+\n }\n \n "
  }
]
