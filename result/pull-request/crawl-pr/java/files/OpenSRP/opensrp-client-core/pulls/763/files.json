[
  {
    "sha": "1d19156f7f48a8ee6b76dbc749797dbadb1d3247",
    "filename": "opensrp-app/AndroidManifest.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 9,
    "changes": 15,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/AndroidManifest.xml",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/AndroidManifest.xml?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -32,19 +32,22 @@\n         android:clearTaskOnLaunch=\"true\"\n         android:label=\"@string/app_name\"\n         android:largeHeap=\"true\">\n+        <service\n+            android:name=\".sync.intent.PlanPeriodicPlanEvaluationService\"\n+            android:exported=\"false\"></service>\n         <service\n             android:name=\".service.ImageUploadSyncService\"\n             android:description=\"@string/component_desc_image_upload_service\"\n             android:enabled=\"true\"\n             android:exported=\"false\" />\n-\n         <service\n             android:name=\".account.AccountService\"\n             android:description=\"@string/component_desc_account_service\"\n             android:exported=\"false\">\n             <intent-filter>\n                 <action android:name=\"android.accounts.AccountAuthenticator\" />\n             </intent-filter>\n+\n             <meta-data\n                 android:name=\"android.accounts.AccountAuthenticator\"\n                 android:resource=\"@xml/authenticator\" />\n@@ -105,12 +108,10 @@\n             android:configChanges=\"keyboardHidden|orientation\"\n             android:exported=\"false\"\n             android:screenOrientation=\"portrait\" />\n-\n         <activity\n             android:name=\".view.activity.NativeHomeActivity\"\n             android:exported=\"false\"\n             android:screenOrientation=\"landscape\" />\n-\n         <activity\n             android:name=\".view.activity.SettingsActivity\"\n             android:exported=\"false\"\n@@ -120,15 +121,13 @@\n         <receiver\n             android:name=\".view.receiver.SyncBroadcastReceiver\"\n             android:exported=\"false\" />\n-\n         <receiver\n             android:name=\".view.receiver.ConnectivityChangeReceiver\"\n             android:exported=\"false\">\n             <intent-filter>\n                 <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\" />\n             </intent-filter>\n         </receiver>\n-\n         <receiver\n             android:name=\".view.receiver.TimeChangedBroadcastReceiver\"\n             android:exported=\"false\">\n@@ -141,7 +140,6 @@\n         <service\n             android:name=\".service.intentservices.ReplicationIntentService\"\n             android:exported=\"false\" />\n-\n         <service\n             android:name=\".sync.intent.P2pProcessRecordsService\"\n             android:description=\"@string/component_desc_p2p_process_records_service\"\n@@ -150,10 +148,9 @@\n         <meta-data\n             android:name=\"com.google.android.gms.vision.Dependencies\"\n             android:value=\"barcode\" />\n-\n         <meta-data\n             android:name=\"com.google.android.gms.version\"\n             android:value=\"@integer/google_play_services_version\" />\n-\n     </application>\n-</manifest>\n+\n+</manifest>\n\\ No newline at end of file"
  },
  {
    "sha": "3e2838a9d0f62fb9ee856aa3be266675b2e82d51",
    "filename": "opensrp-app/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/build.gradle",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/build.gradle",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/build.gradle?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -230,7 +230,7 @@ dependencies {\n \n     implementation 'org.smartregister:opensrp-client-utils:0.0.2-SNAPSHOT'\n \n-    implementation 'org.smartregister:opensrp-plan-evaluator:1.3.1-SNAPSHOT'\n+    implementation 'org.smartregister:opensrp-plan-evaluator:1.5.1-alpha.2-SNAPSHOT'\n \n     implementation 'xerces:xercesImpl:2.12.0'\n "
  },
  {
    "sha": "ad96c06e10da0f63d05b6333e8f126c0b8bfc3bf",
    "filename": "opensrp-app/src/main/java/org/smartregister/AllConstants.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/AllConstants.java",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/AllConstants.java",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/src/main/java/org/smartregister/AllConstants.java?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -434,6 +434,10 @@\n         public static final String TASK_GENERATED = \"task_generated\";\n         public static final String DIALOG_TITLE = \"dialog_title\";\n         public static final String DIALOG_MESSAGE = \"dialog_message\";\n+        public static final String PLAN_ID = \"plan-id\";\n+        public static final String ACTION_CODE = \"action-code\";\n+        public static final String ACTION_IDENTIFIER = \"action-identifier\";\n+        public static final String ACTION = \"action\";\n     }\n \n     public static final class REGISTER_FRAGMENT {"
  },
  {
    "sha": "fe34c3f9263a5600960003aef865dda9d50bf6c8",
    "filename": "opensrp-app/src/main/java/org/smartregister/job/PlanPeriodicEvaluationJob.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/job/PlanPeriodicEvaluationJob.java",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/job/PlanPeriodicEvaluationJob.java",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/src/main/java/org/smartregister/job/PlanPeriodicEvaluationJob.java?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -0,0 +1,87 @@\n+package org.smartregister.job;\n+\n+import android.content.Intent;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.evernote.android.job.DailyJob;\n+import com.evernote.android.job.JobRequest;\n+import com.evernote.android.job.util.support.PersistableBundleCompat;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.LocalDate;\n+import org.smartregister.AllConstants;\n+import org.smartregister.domain.Action;\n+import org.smartregister.sync.intent.PlanPeriodicPlanEvaluationService;\n+import org.smartregister.utils.DateTypeConverter;\n+import org.smartregister.utils.TaskDateTimeTypeConverter;\n+import org.smartregister.utils.TimingRepeatTimeTypeConverter;\n+\n+import java.sql.Time;\n+import java.util.concurrent.TimeUnit;\n+\n+import timber.log.Timber;\n+\n+public class PlanPeriodicEvaluationJob extends DailyJob {\n+\n+    public static final String TAG = \"PlanPeriodicEvaluationJob\";\n+    public static final String SCHEDULE_ADHOC_TAG = \"PlanPeriodicEvaluationAdhocJob\";\n+\n+    public static Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(DateTime.class, new TaskDateTimeTypeConverter())\n+            .registerTypeAdapter(LocalDate.class, new DateTypeConverter())\n+            .registerTypeAdapter(Time.class, new TimingRepeatTimeTypeConverter())\n+            .create();\n+\n+    public static void scheduleEverydayAt(@NonNull String jobTag, int hour, int minute, @NonNull Action action, String planId) {\n+        JobRequest.Builder jobRequest = new JobRequest.Builder(jobTag);\n+        PersistableBundleCompat persistableBundleCompat = new PersistableBundleCompat();\n+\n+        persistableBundleCompat.putString(AllConstants.INTENT_KEY.ACTION, getActionJson(action));\n+        persistableBundleCompat.putString(AllConstants.INTENT_KEY.ACTION_CODE, action.getCode());\n+        persistableBundleCompat.putString(AllConstants.INTENT_KEY.ACTION_IDENTIFIER, action.getIdentifier());\n+        persistableBundleCompat.putString(AllConstants.INTENT_KEY.PLAN_ID, planId);\n+        jobRequest.addExtras(persistableBundleCompat);\n+\n+        long startTime = TimeUnit.HOURS.toMillis(hour) + TimeUnit.MINUTES.toMillis(minute);\n+        schedule(jobRequest, startTime, startTime + TimeUnit.MINUTES.toMillis(45));\n+    }\n+\n+    /**\n+     * For jobs that need to be started immediately\n+     */\n+    public static void scheduleJobImmediately() {\n+        int jobId = startNowOnce(new JobRequest.Builder(SCHEDULE_ADHOC_TAG));\n+        Timber.d(\"Scheduling job with name \" + SCHEDULE_ADHOC_TAG + \" immediately with JOB ID \" + jobId);\n+    }\n+\n+    @NonNull\n+    @Override\n+    protected DailyJobResult onRunDailyJob(@NonNull Params params) {\n+        Intent intent = new Intent(getContext(), PlanPeriodicPlanEvaluationService.class);\n+        String actionString = params.getExtras().getString(AllConstants.INTENT_KEY.ACTION, null);\n+        String planId = params.getExtras().getString(AllConstants.INTENT_KEY.PLAN_ID, null);\n+        String actionIdentifier = params.getExtras().getString(AllConstants.INTENT_KEY.ACTION_IDENTIFIER, null);\n+        String actionCode = params.getExtras().getString(AllConstants.INTENT_KEY.ACTION_CODE, null);\n+\n+        if (TextUtils.isEmpty(actionString) || TextUtils.isEmpty(planId)) {\n+            return DailyJobResult.CANCEL;\n+        }\n+\n+        intent.putExtra(AllConstants.INTENT_KEY.ACTION, actionString);\n+        intent.putExtra(AllConstants.INTENT_KEY.ACTION_IDENTIFIER, actionIdentifier);\n+        intent.putExtra(AllConstants.INTENT_KEY.ACTION_CODE, actionCode);\n+        intent.putExtra(AllConstants.INTENT_KEY.PLAN_ID, planId);\n+        getContext().startService(intent);\n+\n+        return DailyJobResult.SUCCESS;\n+    }\n+\n+    public static String getActionJson(@NonNull Action action) {\n+        return gson.toJson(action);\n+    }\n+\n+}"
  },
  {
    "sha": "58e58228901d6e99a281ea48e5dd5a0b4b4674d2",
    "filename": "opensrp-app/src/main/java/org/smartregister/sync/helper/PeriodicTriggerEvaluationHelper.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/sync/helper/PeriodicTriggerEvaluationHelper.java",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/sync/helper/PeriodicTriggerEvaluationHelper.java",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/src/main/java/org/smartregister/sync/helper/PeriodicTriggerEvaluationHelper.java?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -0,0 +1,140 @@\n+package org.smartregister.sync.helper;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.evernote.android.job.JobManager;\n+import com.evernote.android.job.JobRequest;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.joda.time.DateTime;\n+import org.smartregister.AllConstants;\n+import org.smartregister.domain.Action;\n+import org.smartregister.domain.PlanDefinition;\n+import org.smartregister.domain.Timing;\n+import org.smartregister.domain.TimingRepeat;\n+import org.smartregister.domain.Trigger;\n+import org.smartregister.job.PlanPeriodicEvaluationJob;\n+import org.smartregister.pathevaluator.TriggerType;\n+import org.smartregister.view.activity.DrishtiApplication;\n+\n+import java.sql.Time;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.Set;\n+\n+import timber.log.Timber;\n+\n+/**\n+ * Created by Ephraim Kigamba - nek.eam@gmail.com on 11-03-2021.\n+ */\n+public class PeriodicTriggerEvaluationHelper {\n+\n+\n+    private DateTime timeNow;\n+\n+    public void reschedulePeriodicPlanEvaluations(List<PlanDefinition> plans) {\n+        for (PlanDefinition plan: plans) {\n+            List<Action> actions = plan.getActions();\n+            if (actions != null && actions.size() > 0) {\n+                for (Action action : actions) {\n+                    Set<Trigger> triggers = action.getTrigger();\n+                    if (triggers != null) {\n+                        for (Trigger trigger: triggers) {\n+                            // This assumes that the action has only one periodic trigger\n+                            if (triggers != null && trigger.getType() != null\n+                                    && TriggerType.PERIODIC.value().equals(trigger.getType())\n+                                    && isValidDailyTriggerSchedule(trigger)) {\n+                                // Check if the jobs for the action have been scheduled\n+                                // Delete & reschedule the job using the action.code as the job ID\n+                                int cancelledJobs = cancelJobsForAction(action.getIdentifier(), action.getCode());\n+                                Timber.i(\"Cancelled %d jobs for action-code [%s] and action-identifier [%s]\"\n+                                        , cancelledJobs, action.getCode(), action.getIdentifier());\n+\n+                                // Reschedule the job again using the timing\n+                                scheduleActionJob(action, trigger.getTimingTiming(), plan.getIdentifier());\n+\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+        }\n+    }\n+\n+    protected boolean scheduleActionJob(@NonNull Action action, @NonNull Timing timing, @NonNull String planId) {\n+        List<DateTime> eventLists = timing.getEvent();\n+        TimingRepeat timingRepeat = timing.getRepeat();\n+\n+        boolean scheduled = false;\n+\n+        for (DateTime dateTime: eventLists) {\n+            if (dateTime.isBefore(now())) {\n+                if (timingRepeat != null && timingRepeat.getFrequency() == 1 && timingRepeat.getPeriodUnit().equals(TimingRepeat.DurationCode.d)) {\n+                    List<Time> timesOfDay = timingRepeat.getTimeOfDay();\n+\n+                    // Schedule a job everyday for each time\n+                    for (Time timeOfDay: timesOfDay) {\n+                        Calendar calendar = Calendar.getInstance();\n+                        calendar.setTime(timeOfDay);\n+\n+                        PlanPeriodicEvaluationJob.scheduleEverydayAt(PlanPeriodicEvaluationJob.TAG, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), action, planId);\n+                        scheduled = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return scheduled;\n+    }\n+\n+    public boolean isValidDailyTriggerSchedule(Trigger trigger) {\n+        Timing timing = trigger.getTimingTiming();\n+        List<DateTime> eventLists = timing.getEvent();\n+\n+        for (DateTime dateTime: eventLists) {\n+            if (dateTime.isBefore(now())) {\n+                TimingRepeat repeat = timing.getRepeat();\n+                if (repeat != null && repeat.getFrequency() == 1 && repeat.getPeriodUnit().equals(TimingRepeat.DurationCode.d)) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public int cancelJobsForAction(String actionIdentifier, String actionCode) {\n+        int jobsCancelled = 0;\n+\n+        JobManager jobManager = JobManager.create(DrishtiApplication.getInstance());\n+        Set<JobRequest> jobRequests = jobManager\n+                .getAllJobRequestsForTag(PlanPeriodicEvaluationJob.TAG);\n+\n+        if (jobRequests != null && jobRequests.size() > 0) {\n+            for (JobRequest jobRequest: jobRequests) {\n+                if (jobRequest.getExtras() != null) {\n+                    String jobRqActionCode = jobRequest.getExtras().getString(AllConstants.INTENT_KEY.ACTION_CODE, null);\n+                    String jobRqActionIdentifier = jobRequest.getExtras().getString(AllConstants.INTENT_KEY.ACTION_CODE, null);\n+                    if (actionCode != null && actionCode.equals(jobRqActionCode)\n+                            && actionIdentifier != null\n+                            && actionIdentifier.equals(jobRqActionIdentifier)) {\n+                        jobManager.cancel(jobRequest.getJobId());\n+                        jobsCancelled++;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return jobsCancelled;\n+    }\n+\n+    protected DateTime now() {\n+        return timeNow != null ? timeNow : DateTime.now();\n+    }\n+\n+    protected void setNow(DateTime timeNow) {\n+        this.timeNow = timeNow;\n+    }\n+}"
  },
  {
    "sha": "e8975f6f1adfe5cb3b1b4049a1598b9cabe6ae5c",
    "filename": "opensrp-app/src/main/java/org/smartregister/sync/helper/PlanIntentServiceHelper.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/sync/helper/PlanIntentServiceHelper.java",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/sync/helper/PlanIntentServiceHelper.java",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/src/main/java/org/smartregister/sync/helper/PlanIntentServiceHelper.java?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -27,6 +27,7 @@\n import org.smartregister.util.Utils;\n \n import java.text.MessageFormat;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n@@ -63,6 +64,8 @@\n     private SyncProgress syncProgress;\n \n     private Trace planSyncTrace;\n+    private ArrayList<PlanDefinition> planIdsToEvaluate = new ArrayList<>();\n+    private PeriodicTriggerEvaluationHelper periodicTriggerEvaluationHelper;\n \n     public static PlanIntentServiceHelper getInstance() {\n         if (instance == null) {\n@@ -117,10 +120,12 @@ private int batchFetchPlansFromServer(boolean returnCount) {\n             for (PlanDefinition plan : plans) {\n                 try {\n                     planDefinitionRepository.addOrUpdate(plan);\n+                    planIdsToEvaluate.add(plan);\n                 } catch (Exception e) {\n                     Timber.e(e, \"EXCEPTION %s\", e.toString());\n                 }\n             }\n+\n             // update most recent server version\n             if (!Utils.isEmptyCollection(plans)) {\n                 batchFetchCount = plans.size();\n@@ -132,13 +137,18 @@ private int batchFetchPlansFromServer(boolean returnCount) {\n                 // retry fetch since there were items synced from the server\n                 batchFetchPlansFromServer(false);\n             }\n+\n+            if (!planIdsToEvaluate.isEmpty()) {\n+                periodicTriggerEvaluationHelper.reschedulePeriodicPlanEvaluations(plans, this);\n+            }\n         } catch (Exception e) {\n             Timber.e(e, \"EXCEPTION %s\", e.toString());\n         }\n \n         return batchFetchCount;\n     }\n \n+\n     private void startPlanTrace(String action) {\n         String providerId = allSharedPreferences.fetchRegisteredANM();\n         String team = allSharedPreferences.fetchDefaultTeam(providerId);"
  },
  {
    "sha": "d8137b181729ca6e6f3d3d1391dbce4e0bc04d7d",
    "filename": "opensrp-app/src/main/java/org/smartregister/sync/intent/PlanPeriodicPlanEvaluationService.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/OpenSRP/opensrp-client-core/blob/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/sync/intent/PlanPeriodicPlanEvaluationService.java",
    "raw_url": "https://github.com/OpenSRP/opensrp-client-core/raw/b355827d778cd08ced55629b209be5e84317dad9/opensrp-app/src/main/java/org/smartregister/sync/intent/PlanPeriodicPlanEvaluationService.java",
    "contents_url": "https://api.github.com/repos/OpenSRP/opensrp-client-core/contents/opensrp-app/src/main/java/org/smartregister/sync/intent/PlanPeriodicPlanEvaluationService.java?ref=b355827d778cd08ced55629b209be5e84317dad9",
    "patch": "@@ -0,0 +1,89 @@\n+package org.smartregister.sync.intent;\n+\n+import android.app.IntentService;\n+import android.content.Intent;\n+import android.text.TextUtils;\n+\n+import org.joda.time.DateTime;\n+import org.smartregister.AllConstants;\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.domain.Action;\n+import org.smartregister.domain.Jurisdiction;\n+import org.smartregister.domain.PlanDefinition;\n+import org.smartregister.job.PlanPeriodicEvaluationJob;\n+import org.smartregister.pathevaluator.TriggerType;\n+import org.smartregister.pathevaluator.plan.PlanEvaluator;\n+import org.smartregister.repository.AllSharedPreferences;\n+import org.smartregister.repository.PlanDefinitionRepository;\n+import org.smartregister.sync.helper.PeriodicTriggerEvaluationHelper;\n+\n+import timber.log.Timber;\n+\n+/**\n+ * An {@link IntentService} subclass for handling asynchronous task requests in\n+ * a service on a separate handler thread.\n+ * <p>\n+ * <p>\n+ * TODO: Customize class - update intent actions, extra parameters and static\n+ * helper methods.\n+ */\n+public class PlanPeriodicPlanEvaluationService extends IntentService {\n+\n+    private DateTime timeNow;\n+    private PeriodicTriggerEvaluationHelper periodicTriggerEvaluationHelper;\n+\n+    public PlanPeriodicPlanEvaluationService() {\n+        super(\"PlanPeriodicPlanEvaluationService\");\n+        periodicTriggerEvaluationHelper =  new PeriodicTriggerEvaluationHelper();\n+    }\n+\n+    @Override\n+    protected void onHandleIntent(Intent intent) {\n+        if (intent != null && intent.getExtras() != null) {\n+            String planId = intent.getStringExtra(AllConstants.INTENT_KEY.PLAN_ID);\n+            String actionIdentifier = intent.getStringExtra(AllConstants.INTENT_KEY.ACTION_IDENTIFIER);\n+            String actionCode = intent.getStringExtra(AllConstants.INTENT_KEY.ACTION_CODE);\n+            String actionJsonString = intent.getStringExtra(AllConstants.INTENT_KEY.ACTION);\n+\n+            if (TextUtils.isEmpty(planId) || TextUtils.isEmpty(actionJsonString)\n+                    || TextUtils.isEmpty(actionIdentifier) || TextUtils.isEmpty(actionCode)) {\n+                Timber.e(new Exception(), \"Periodic action was not evaluated since planId, action, action-identifier OR action-code was empty\");\n+                return;\n+            }\n+\n+            Action action = PlanPeriodicEvaluationJob.gson.fromJson(actionJsonString, Action.class);\n+            if (action != null) {\n+                PlanDefinitionRepository planDefinitionRepository = CoreLibrary.getInstance().context()\n+                        .getPlanDefinitionRepository();\n+                PlanDefinition planDefinition = planDefinitionRepository.findPlanDefinitionById(planId);\n+\n+\n+                if ((planDefinition.getEffectivePeriod() != null && planDefinition.getEffectivePeriod().getEnd().isBefore(now()))\n+                        || (action.getTimingPeriod() != null && action.getTimingPeriod().getEnd().isBefore(now()))) {\n+                    periodicTriggerEvaluationHelper.cancelJobsForAction(actionIdentifier, actionCode);\n+                } else {\n+                    AllSharedPreferences allSharedPreferences = CoreLibrary.getInstance().context().allSharedPreferences();\n+                    PlanEvaluator planEvaluator = new PlanEvaluator(allSharedPreferences.fetchRegisteredANM());\n+                    Jurisdiction jurisdiction = new Jurisdiction(allSharedPreferences.fetchDefaultLocalityId(allSharedPreferences.fetchRegisteredANM()));\n+\n+                    // TODO: Change this to evaluate a single action\n+                    planEvaluator.evaluatePlanAction(planDefinition, TriggerType.PERIODIC, jurisdiction, null, action);\n+                }\n+\n+                return;\n+            }\n+        }\n+\n+        Timber.e(new Exception(), \"An error occurred and the service did not evaluate the plan/action\");\n+\n+    }\n+\n+\n+    protected DateTime now() {\n+        return timeNow != null ? timeNow : DateTime.now();\n+    }\n+\n+    protected void setNow(DateTime timeNow) {\n+        this.timeNow = timeNow;\n+    }\n+}\n\\ No newline at end of file"
  }
]
