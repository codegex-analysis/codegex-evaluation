[
  {
    "sha": "bcf637730f9f442d547f35f082a9e634b3970011",
    "filename": "oag/.gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/.gitignore",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/.gitignore",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/.gitignore?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n *.key\n *.log\n+*.db\n \n HELP.md\n target/"
  },
  {
    "sha": "23b26c3f51478aa0d3f34b0ca101a80760bbb1c3",
    "filename": "oag/sample-config.yaml",
    "status": "modified",
    "additions": 18,
    "deletions": 2,
    "changes": 20,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/sample-config.yaml",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/sample-config.yaml",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/sample-config.yaml?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,7 +1,6 @@\n hostUri: http://localhost:8080\n \n routes:\n-\n   httpbin:\n     type: webapplication\n     path: /**\n@@ -14,6 +13,7 @@ routes:\n     url: https://nellydemoapp.azurewebsites.net\n     allowAnonymous: yes\n \n+\n loginProviders:\n   google:\n     type: oidc\n@@ -45,7 +45,23 @@ securityProfiles:\n       Content-Security-Policy: base-uri 'self';object-src 'self'\n       Permissions-Policy: geolocation=(),notifications=(),push=(),microphone=(),camera=(),speaker=(),vibrate=(),fullscreen=(),payment=(),usb=(),magnetometer=(),gyroscope=(),accelerometer=()\n       Strict-Transport-Security: max-age=31536000; includeSubDomains\n-\n+    userMapping:\n+      type: \"jwt-mapping\"\n+      settings:\n+        headerName: \"Authorization\"\n+        headerPrefix: \"Bearer \"\n+        audience: \"<<route-url>>\"\n+        issuer: \"<<hostUri>>\"\n+        tokenLifetimeSeconds: 30\n+        signatureImplementation: \"hmac\"\n+        signatureSettings:\n+          secretKey: deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\n+          keyId: Sample Key\n+        mappings:\n+          provider:       <<login-provider>>\n+          email_verified: userModel:email_verified\n+          email:          userModel:email\n+          proxy:          \"constant:OWASP Application Gateway\"\n \n traceProfile:\n   forwardIncomingTrace: false"
  },
  {
    "sha": "e9e8b600ae6fa54dd6d5a2082f800090fc618174",
    "filename": "oag/session-blacklist.db",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/9bf968e7c7eeee36e760d6d2b13b6e57b5708205/oag/session-blacklist.db",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/9bf968e7c7eeee36e760d6d2b13b6e57b5708205/oag/session-blacklist.db",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/session-blacklist.db?ref=9bf968e7c7eeee36e760d6d2b13b6e57b5708205"
  },
  {
    "sha": "9647d6cf2cd8a798239d522f81748175f4e3ea3f",
    "filename": "oag/src/main/java/org/owasp/oag/config/FileConfigLoader.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/FileConfigLoader.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/FileConfigLoader.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/config/FileConfigLoader.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -53,8 +53,7 @@ protected MainConfig load(InputStream defaultSettingsStream, InputStream userCon\n         om.registerModule(module);\n \n         // Load default configuration\n-        TypeReference<LinkedHashMap<String, Object>> mapType = new TypeReference<>() {\n-        };\n+        TypeReference<LinkedHashMap<String, Object>> mapType = new TypeReference<>() {};\n         Map<String, Object> defaultConfigMap = om.readValue(defaultSettingsStream, mapType);\n \n         // Load config"
  },
  {
    "sha": "43a0fcab348c4b160e73602ec51a25eb902f8742",
    "filename": "oag/src/main/java/org/owasp/oag/config/configuration/DefaultConfigValues.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/DefaultConfigValues.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/DefaultConfigValues.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/config/configuration/DefaultConfigValues.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,28 @@\n+package org.owasp.oag.config.configuration;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DefaultConfigValues {\n+\n+    public static UserMappingConfig userMapping(){\n+\n+        var userMapping = new UserMappingConfig();\n+        userMapping.setType(\"no-mapping\");\n+        userMapping.setSettings(new HashMap<>());\n+        return userMapping;\n+    }\n+\n+    public static List<String> csrfSafeMethods(){\n+\n+        return Lists.asList(\"GET\", new String[]{\"HEAD\", \"OPTIONS\"});\n+    }\n+\n+    public static Map<String, String> responseHeaders() {\n+\n+        return new HashMap<>();\n+    }\n+}"
  },
  {
    "sha": "d61977086a96ae56f69be2408b8d054e89e6c96f",
    "filename": "oag/src/main/java/org/owasp/oag/config/configuration/MainConfig.java",
    "status": "modified",
    "additions": 16,
    "deletions": 11,
    "changes": 27,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/MainConfig.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/MainConfig.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/config/configuration/MainConfig.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -6,27 +6,27 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class MainConfig implements ErrorValidation {\n \n     private Map<String, LoginProvider> loginProviders;\n     private Map<String, GatewayRoute> routes;\n     private Map<String, SecurityProfile> securityProfiles;\n     private String hostUri;\n-    private String downstreamApiKey;\n     private List<String> trustedRedirectHosts;\n     private SessionBehaviour sessionBehaviour;\n     private TraceProfile traceProfile;\n \n     public MainConfig() {\n     }\n \n-    public MainConfig(Map<String, LoginProvider> loginProviders, Map<String, GatewayRoute> routes, Map<String, SecurityProfile> securityProfiles, String hostUri, String downstreamApiKey, List<String> trustedRedirectHosts, SessionBehaviour sessionBehaviour, TraceProfile traceProfile) {\n+    public MainConfig(Map<String, LoginProvider> loginProviders, Map<String, GatewayRoute> routes, Map<String, SecurityProfile> securityProfiles, String hostUri, List<String> trustedRedirectHosts, SessionBehaviour sessionBehaviour, TraceProfile traceProfile) {\n         this.loginProviders = loginProviders;\n         this.routes = routes;\n         this.securityProfiles = securityProfiles;\n         this.hostUri = hostUri;\n-        this.downstreamApiKey = downstreamApiKey;\n         this.trustedRedirectHosts = trustedRedirectHosts;\n         this.sessionBehaviour = sessionBehaviour;\n         this.traceProfile = traceProfile;\n@@ -48,6 +48,19 @@ public boolean isHttpsHost() {\n         return getHostUri().startsWith(\"https://\");\n     }\n \n+    public Map<String, SecurityProfile> getUsedSecurityProfiles() {\n+\n+        var profiles = getSecurityProfiles();\n+        var routes = getRoutes();\n+\n+        Set<String> usedProfileNames = routes.values().stream().map(route -> route.getType()).collect(Collectors.toSet());\n+        var usedProfiles = profiles.entrySet()\n+                .stream().filter(entry -> usedProfileNames.contains(entry.getKey()))\n+                .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()));\n+\n+        return usedProfiles;\n+    }\n+\n     public String getHostUri() {\n         return hostUri;\n     }\n@@ -72,14 +85,6 @@ private void setSecurityProfiles(Map<String, SecurityProfile> securityProfiles)\n         this.securityProfiles = securityProfiles;\n     }\n \n-    public String getDownstreamApiKey() {\n-        return downstreamApiKey;\n-    }\n-\n-    private void setDownstreamApiKey(String downstreamApiKey) {\n-        this.downstreamApiKey = downstreamApiKey;\n-    }\n-\n     public List<String> getTrustedRedirectHosts() {\n         return trustedRedirectHosts;\n     }"
  },
  {
    "sha": "466b1172e9d48440d29d3387b6658d06c2666083",
    "filename": "oag/src/main/java/org/owasp/oag/config/configuration/SecurityProfile.java",
    "status": "modified",
    "additions": 26,
    "deletions": 7,
    "changes": 33,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/SecurityProfile.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/SecurityProfile.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/config/configuration/SecurityProfile.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,6 +1,5 @@\n package org.owasp.oag.config.configuration;\n \n-import com.google.common.collect.Lists;\n import org.owasp.oag.config.ErrorValidation;\n import org.owasp.oag.infrastructure.factories.CsrfValidationImplementationFactory;\n import org.owasp.oag.services.csrf.CsrfProtectionValidation;\n@@ -16,8 +15,9 @@\n \n     private List<String> allowedMethods;\n     private String csrfProtection;\n-    private List<String> csrfSafeMethods = Lists.asList(\"GET\", new String[]{\"HEAD\", \"OPTIONS\"});\n-    private Map<String, String> responseHeaders = new HashMap<>();\n+    private List<String> csrfSafeMethods = DefaultConfigValues.csrfSafeMethods();\n+    private Map<String, String> responseHeaders = DefaultConfigValues.responseHeaders();\n+    private UserMappingConfig userMapping = DefaultConfigValues.userMapping();\n \n     public List<String> getAllowedMethods() {\n         return allowedMethods;\n@@ -39,6 +39,14 @@ public void setCsrfProtection(String csrfProtection) {\n         return responseHeaders;\n     }\n \n+    public UserMappingConfig getUserMapping() {\n+        return userMapping;\n+    }\n+\n+    public void setUserMapping(UserMappingConfig userMapping) {\n+        this.userMapping = userMapping;\n+    }\n+\n     private void setResponseHeaders(Map<String, String> headers) {\n \n         if (headers == null)\n@@ -63,16 +71,27 @@ public void setCsrfSafeMethods(List<String> csrfSafeMethods) {\n         var errors = new ArrayList<String>();\n \n         if (allowedMethods == null)\n-            errors.add(\"'allowedMethods' not specified\");\n+            errors.add(\"Config Security Profile: 'allowedMethods' not specified\");\n \n         if (csrfProtection == null)\n-            errors.add(\"'csrfProtection' not specified\");\n+            errors.add(\"Config Security Profile: 'csrfProtection' not specified\");\n \n         if (csrfSafeMethods == null)\n-            errors.add(\"'csrfSafeMethods' not specified\");\n+            errors.add(\"Config Security Profile: 'csrfSafeMethods' not specified\");\n \n         if (responseHeaders == null)\n-            errors.add(\"'responseHeaders' not specified\");\n+            errors.add(\"Config Security Profile: 'responseHeaders' not specified\");\n+\n+        if (userMapping == null)\n+            errors.add(\"Config Security Profile: 'userMapping' not specified\");\n+\n+        if (errors.size() > 0)\n+            return errors;\n+\n+        errors.addAll(userMapping.getErrors(context));\n+\n+        if (errors.size() > 0)\n+            return errors;\n \n         var factory = CsrfValidationImplementationFactory.get(context);\n         try {"
  },
  {
    "sha": "0171099c4d4e44c860f7b2c9933415dd9eb70626",
    "filename": "oag/src/main/java/org/owasp/oag/config/configuration/UserMappingConfig.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/UserMappingConfig.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/config/configuration/UserMappingConfig.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/config/configuration/UserMappingConfig.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,57 @@\n+package org.owasp.oag.config.configuration;\n+\n+import org.owasp.oag.config.ErrorValidation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.owasp.oag.services.tokenMapping.UserMappingFactory.USER_MAPPER_TYPE_POSTFIX;\n+\n+public class UserMappingConfig implements ErrorValidation {\n+\n+    private static final Logger log = LoggerFactory.getLogger(UserMappingConfig.class);\n+\n+    private String type;\n+    private Map<String, Object> settings;\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public Map<String, Object> getSettings() {\n+        return settings;\n+    }\n+\n+    public void setSettings(Map<String, Object> settings) {\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public List<String> getErrors(ApplicationContext context) {\n+\n+        var errors = new ArrayList<String>();\n+\n+        if(context == null)\n+            return errors;\n+\n+        if(this.type == null)\n+            errors.add(\"Config: tokenMapping implementation is not defined\");\n+\n+        // Check if we can load the token mapping implementation\n+        if (!context.containsBean(this.type  + USER_MAPPER_TYPE_POSTFIX)) {\n+            errors.add(\"Specified type '\" + this.type + \"' does not match a user mapping implementation. Must be the bean name of a TokenMapper implementation such as jwt-mapping.\");\n+        } else {\n+            log.info(\"Using token mapping implementation of {}.\", this.type);\n+        }\n+\n+        return errors;\n+    }\n+}"
  },
  {
    "sha": "8aec47af38b2b66f4a8f984fcf86a9930701d0b7",
    "filename": "oag/src/main/java/org/owasp/oag/cookies/LoginCookie.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/cookies/LoginCookie.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/cookies/LoginCookie.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/cookies/LoginCookie.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,6 +1,6 @@\n package org.owasp.oag.cookies;\n \n-import org.owasp.oag.services.login.drivers.UserModel;\n+import org.owasp.oag.session.UserModel;\n \n public class LoginCookie {\n "
  },
  {
    "sha": "e4f0c9e58ed79cbc345fbb206b1439f15d53a011",
    "filename": "oag/src/main/java/org/owasp/oag/filters/GatewayRouteContext.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/GatewayRouteContext.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/GatewayRouteContext.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/GatewayRouteContext.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,50 @@\n+package org.owasp.oag.filters;\n+\n+import org.owasp.oag.config.configuration.GatewayRoute;\n+import org.owasp.oag.config.configuration.SecurityProfile;\n+import org.owasp.oag.session.Session;\n+\n+import java.util.Optional;\n+\n+public class GatewayRouteContext {\n+\n+    private final String routeName;\n+    private final GatewayRoute route;\n+    private final SecurityProfile securityProfile;\n+    private final String requestUri;\n+    private final String upstreamUri;\n+    private final Optional<Session> sessionOptional;\n+\n+    public GatewayRouteContext(String routeName, GatewayRoute route, SecurityProfile securityProfile, String requestUri, String upstreamUri, Optional<Session> sessionOptional) {\n+        this.routeName = routeName;\n+        this.route = route;\n+        this.securityProfile = securityProfile;\n+        this.requestUri = requestUri;\n+        this.upstreamUri = upstreamUri;\n+        this.sessionOptional = sessionOptional;\n+    }\n+\n+    public String getRouteName() {\n+        return routeName;\n+    }\n+\n+    public GatewayRoute getRoute() {\n+        return route;\n+    }\n+\n+    public SecurityProfile getSecurityProfile() {\n+        return securityProfile;\n+    }\n+\n+    public String getRequestUri() {\n+        return requestUri;\n+    }\n+\n+    public String getUpstreamUri() {\n+        return upstreamUri;\n+    }\n+\n+    public Optional<Session> getSessionOptional() {\n+        return sessionOptional;\n+    }\n+}"
  },
  {
    "sha": "49418d5a2441acc7283a455ee4a9466f2412e705",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/AccessControlFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/AccessControlFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/AccessControlFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/AccessControlFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n package org.owasp.oag.filters.proxy;\n \n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;"
  },
  {
    "sha": "7171eebc9516d054e605597364ed13c87299c12d",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,6 +1,7 @@\n package org.owasp.oag.filters.proxy;\n \n import org.owasp.oag.config.configuration.MainConfig;\n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.owasp.oag.infrastructure.factories.CsrfValidationImplementationFactory;\n import org.owasp.oag.services.csrf.CsrfProtectionValidation;\n import org.slf4j.Logger;"
  },
  {
    "sha": "1d7608c26b260c671ad4c4bca09471ba6e91a48f",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilterWithBody.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilterWithBody.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilterWithBody.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/CsrfValidationFilterWithBody.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n package org.owasp.oag.filters.proxy;\n \n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.owasp.oag.filters.spring.ExtractAuthenticationFilter;\n import org.owasp.oag.infrastructure.factories.CsrfValidationImplementationFactory;\n import org.owasp.oag.services.csrf.CsrfProtectionValidation;"
  },
  {
    "sha": "2e05d3b30b9f26fd32c442e61f4e9a0ff497eba1",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/DownstreamHeaderFilter.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 29,
    "changes": 36,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/DownstreamHeaderFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/DownstreamHeaderFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/DownstreamHeaderFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -2,66 +2,44 @@\n \n import org.owasp.oag.config.configuration.MainConfig;\n import org.owasp.oag.controllers.dto.SessionInformation;\n-import org.owasp.oag.filters.spring.ExtractAuthenticationFilter;\n-import org.owasp.oag.session.Session;\n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n-import org.springframework.cloud.gateway.filter.GlobalFilter;\n import org.springframework.core.annotation.Order;\n import org.springframework.stereotype.Component;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n \n-import java.util.HashMap;\n-import java.util.Optional;\n-\n import static org.owasp.oag.utils.LoggingUtils.logTrace;\n \n /**\n  * This gateway filter adds additional headers to the request\n  */\n @Order(41)\n @Component\n-public class UpstreamHeaderFilter implements GlobalFilter {\n-\n-    private static final Logger log = LoggerFactory.getLogger(UpstreamHeaderFilter.class);\n+public class DownstreamHeaderFilter extends RouteAwareFilter {\n \n     public static final String X_PROXY = \"X-PROXY\";\n-    public static final String X_OAG_API_KEY = \"X-OAG-ApiKey\";\n     public static final String X_OAG_STATUS = \"X-OAG-Status\";\n-    public static final String X_OAG_PROVIDER = \"X-OAG-Provider\";\n-    public static final String X_OAG_USER_PREFIX = \"X-OAG-USER-\";\n     public static final String X_PROXY_VALUE = \"OWASP Application Gateway\";\n+    private static final Logger log = LoggerFactory.getLogger(DownstreamHeaderFilter.class);\n     @Autowired\n     MainConfig config;\n \n     @Override\n-    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n+    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain, GatewayRouteContext routeContext) {\n \n         logTrace(log, exchange, \"Execute ResponseHeaderFilter\");\n \n         var request = exchange.getRequest().mutate();\n-\n         request = request.header(X_PROXY, X_PROXY_VALUE);\n-        request = request.header(X_OAG_API_KEY, config.getDownstreamApiKey());\n-\n-        var sessionOptional = (Optional<Session>) exchange.getAttribute(ExtractAuthenticationFilter.OAG_SESSION);\n-\n-        if (sessionOptional != null && sessionOptional.isPresent()) {\n-\n-            Session session = sessionOptional.get();\n-            HashMap<String, String> userMappings = session.getUserModel().getMappings();\n \n+        if (routeContext.getSessionOptional().isPresent()){\n             request = request.header(X_OAG_STATUS, SessionInformation.SESSION_STATE_AUTHENTICATED);\n-            request = request.header(X_OAG_PROVIDER, session.getProvider());\n-\n-            for (var mapping : userMappings.entrySet()) {\n-                request = request.header(X_OAG_USER_PREFIX + mapping.getKey(), mapping.getValue());\n-            }\n-\n-        } else {\n+        }\n+        else {\n             request = request.header(X_OAG_STATUS, SessionInformation.SESSION_STATE_ANONYMOUS);\n         }\n ",
    "previous_filename": "oag/src/main/java/org/owasp/oag/filters/proxy/UpstreamHeaderFilter.java"
  },
  {
    "sha": "c84dda06b6401b8efda611e776a2dbfa20ffa776",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/GatewayLoggingFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/GatewayLoggingFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/GatewayLoggingFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/GatewayLoggingFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n package org.owasp.oag.filters.proxy;\n \n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;"
  },
  {
    "sha": "3255c5e9f7e4c83b7328407238835ef6a811878c",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/MethodWhitelistFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/MethodWhitelistFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/MethodWhitelistFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/MethodWhitelistFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n package org.owasp.oag.filters.proxy;\n \n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;"
  },
  {
    "sha": "be86de6b304e1bcaa730804f5b451c13a3a28cc7",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/ReadRequestBodyFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/ReadRequestBodyFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/ReadRequestBodyFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/ReadRequestBodyFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n package org.owasp.oag.filters.proxy;\n \n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n import org.springframework.cloud.gateway.filter.factory.rewrite.ModifyRequestBodyGatewayFilterFactory;\n import org.springframework.http.HttpHeaders;"
  },
  {
    "sha": "96f1f7eabb693c43863f2883ede96e08edaeb49d",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/ResponseHeaderFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/ResponseHeaderFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/ResponseHeaderFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/ResponseHeaderFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,5 +1,6 @@\n package org.owasp.oag.filters.proxy;\n \n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;"
  },
  {
    "sha": "f134bd4aa3e21e3406b7f01bebec7e79c7cc3a80",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/RouteAwareFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 47,
    "changes": 48,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/RouteAwareFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/RouteAwareFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/RouteAwareFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,11 +1,9 @@\n package org.owasp.oag.filters.proxy;\n \n-import org.owasp.oag.config.configuration.GatewayRoute;\n import org.owasp.oag.config.configuration.MainConfig;\n-import org.owasp.oag.config.configuration.SecurityProfile;\n+import org.owasp.oag.filters.GatewayRouteContext;\n import org.owasp.oag.filters.spring.ExtractAuthenticationFilter;\n import org.owasp.oag.gateway.SpringCloudGatewayConfiguration;\n-import org.owasp.oag.session.Session;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n import org.springframework.cloud.gateway.filter.GlobalFilter;\n@@ -14,7 +12,6 @@\n \n import java.net.URI;\n import java.util.Collections;\n-import java.util.Optional;\n \n import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR;\n import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR;\n@@ -49,47 +46,4 @@\n     }\n \n     public abstract Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain, GatewayRouteContext routeContext);\n-\n-    public class GatewayRouteContext {\n-\n-        private final String routeName;\n-        private final GatewayRoute route;\n-        private final SecurityProfile securityProfile;\n-        private final String requestUri;\n-        private final String upstreamUri;\n-        private final Optional<Session> sessionOptional;\n-\n-        private GatewayRouteContext(String routeName, GatewayRoute route, SecurityProfile securityProfile, String requestUri, String upstreamUri, Optional<Session> sessionOptional) {\n-            this.routeName = routeName;\n-            this.route = route;\n-            this.securityProfile = securityProfile;\n-            this.requestUri = requestUri;\n-            this.upstreamUri = upstreamUri;\n-            this.sessionOptional = sessionOptional;\n-        }\n-\n-        public String getRouteName() {\n-            return routeName;\n-        }\n-\n-        public GatewayRoute getRoute() {\n-            return route;\n-        }\n-\n-        public SecurityProfile getSecurityProfile() {\n-            return securityProfile;\n-        }\n-\n-        public String getRequestUri() {\n-            return requestUri;\n-        }\n-\n-        public String getUpstreamUri() {\n-            return upstreamUri;\n-        }\n-\n-        public Optional<Session> getSessionOptional() {\n-            return sessionOptional;\n-        }\n-    }\n }"
  },
  {
    "sha": "33cfb4ad19417fecd2a42351790e0448da438482",
    "filename": "oag/src/main/java/org/owasp/oag/filters/proxy/UserMappingFilter.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/UserMappingFilter.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/filters/proxy/UserMappingFilter.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/filters/proxy/UserMappingFilter.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,37 @@\n+package org.owasp.oag.filters.proxy;\n+\n+import org.owasp.oag.filters.GatewayRouteContext;\n+import org.owasp.oag.infrastructure.factories.UserMappingFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+import static org.owasp.oag.utils.LoggingUtils.logTrace;\n+\n+@Component\n+@Order(42)\n+public class UserMappingFilter extends RouteAwareFilter{\n+\n+    private static final Logger log = LoggerFactory.getLogger(UserMappingFilter.class);\n+\n+    @Autowired\n+    private UserMappingFactory mappingFactory;\n+\n+    @Override\n+    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain, GatewayRouteContext routeContext) {\n+\n+        logTrace(log, exchange, \"Execute DownstreamAuthenticationFilter\");\n+\n+        var securityProfileName = routeContext.getRoute().getType();\n+        var userMapper = mappingFactory.getUserMapperForSecurityProfile(securityProfileName);\n+\n+        var potentiallyMutatedExchange = userMapper.mapUserToRequest(exchange, routeContext);\n+\n+        return potentiallyMutatedExchange.flatMap(exg -> chain.filter(exg));\n+    }\n+}"
  },
  {
    "sha": "5b430444cd70b4d55445b1063bc5a6d675291764",
    "filename": "oag/src/main/java/org/owasp/oag/hooks/session/SessionCookieCreationHook.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/hooks/session/SessionCookieCreationHook.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/hooks/session/SessionCookieCreationHook.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/hooks/session/SessionCookieCreationHook.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -4,8 +4,8 @@\n import org.owasp.oag.cookies.CookieConverter;\n import org.owasp.oag.cookies.LoginCookie;\n import org.owasp.oag.infrastructure.GlobalClockSource;\n-import org.owasp.oag.services.login.drivers.UserModel;\n import org.owasp.oag.session.Session;\n+import org.owasp.oag.session.UserModel;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.server.reactive.ServerHttpResponse;\n import org.springframework.stereotype.Component;"
  },
  {
    "sha": "07348627f3091e0af044b75042f60cdc3e2a034b",
    "filename": "oag/src/main/java/org/owasp/oag/hooks/session/SessionHookChain.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/hooks/session/SessionHookChain.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/hooks/session/SessionHookChain.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/hooks/session/SessionHookChain.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,7 +1,7 @@\n package org.owasp.oag.hooks.session;\n \n-import org.owasp.oag.services.login.drivers.UserModel;\n import org.owasp.oag.session.Session;\n+import org.owasp.oag.session.UserModel;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationContext;\n import org.springframework.http.server.reactive.ServerHttpResponse;"
  },
  {
    "sha": "f6f53f16752acf98f0b7115c4b30ca13baff8fca",
    "filename": "oag/src/main/java/org/owasp/oag/infrastructure/GlobalClockSource.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/GlobalClockSource.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/GlobalClockSource.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/infrastructure/GlobalClockSource.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,8 +1,11 @@\n package org.owasp.oag.infrastructure;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import java.time.Clock;\n+import java.time.Duration;\n \n /**\n  * This bean is a global source of a Clock object. It is for testing to change the system wide time.\n@@ -11,10 +14,13 @@\n @Component\n public class GlobalClockSource {\n \n+    private static final Logger log = LoggerFactory.getLogger(GlobalClockSource.class);\n     private Clock clock;\n \n     public GlobalClockSource() {\n+\n         this.clock = Clock.systemUTC();\n+        log.info(\"Initialized global clock, its now   {}\", clock.instant().toString());\n     }\n \n     public Clock getGlobalClock() {\n@@ -33,4 +39,14 @@ public int getEpochSeconds() {\n \n         return Math.toIntExact(clock.instant().getEpochSecond());\n     }\n+\n+    /**\n+     * This should be used for testing time dependent functionality only\n+     * @param seconds\n+     */\n+    public void putClockForwardSeconds(int seconds){\n+\n+        setGlobalClock(Clock.offset(clock, Duration.ofSeconds(seconds)));\n+        log.warn(\"Put clock {} ahead of time. Its now {}. This is something used for testing only\", seconds, clock.instant().toString());\n+    }\n }"
  },
  {
    "sha": "481d63e3d73a5387385d78d7c37df29459640cf1",
    "filename": "oag/src/main/java/org/owasp/oag/infrastructure/PostConfigBeanConfiguration.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/PostConfigBeanConfiguration.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/PostConfigBeanConfiguration.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/infrastructure/PostConfigBeanConfiguration.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -1,7 +1,6 @@\n package org.owasp.oag.infrastructure;\n \n import org.owasp.oag.config.configuration.MainConfig;\n-import org.owasp.oag.config.configuration.TraceProfile;\n import org.owasp.oag.logging.TraceContext;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationContext;\n@@ -22,9 +21,9 @@\n \n     @Bean\n     public TraceContext traceContext() {\n-        TraceProfile traceProfile = config.getTraceProfile();\n-        TraceContext implClass = context.getBean(traceProfile.getType(), TraceContext.class);\n \n+        var traceProfile = config.getTraceProfile();\n+        var implClass = context.getBean(traceProfile.getType(), TraceContext.class);\n \n         if (implClass == null) {\n             throw new RuntimeException(\"Trace implementation class not found: \" + traceProfile.getType());"
  },
  {
    "sha": "7cda8b6ed558378c2bea8af4d1d9c6c370f5214a",
    "filename": "oag/src/main/java/org/owasp/oag/infrastructure/factories/DefaultUserMappingFactory.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/factories/DefaultUserMappingFactory.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/factories/DefaultUserMappingFactory.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/infrastructure/factories/DefaultUserMappingFactory.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,54 @@\n+package org.owasp.oag.infrastructure.factories;\n+\n+import org.owasp.oag.config.configuration.MainConfig;\n+import org.owasp.oag.config.configuration.SecurityProfile;\n+import org.owasp.oag.services.tokenMapping.UserMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.owasp.oag.services.tokenMapping.UserMappingFactory.USER_MAPPER_TYPE_POSTFIX;\n+\n+@Component\n+public class DefaultUserMappingFactory implements UserMappingFactory{\n+\n+    private Map<String, UserMapper> mapperMap;\n+\n+    @Autowired\n+    public DefaultUserMappingFactory(MainConfig config, ApplicationContext context) {\n+\n+        // Get all security profiles that are actually used\n+        var usedProfiles = config.getUsedSecurityProfiles();\n+        this.mapperMap = new HashMap<>();\n+\n+        // Init the user mapper for each of it\n+        usedProfiles.forEach((profileName, profile) -> initUserMapper(profileName, profile, context));\n+    }\n+\n+    private void initUserMapper(String profileName, SecurityProfile profile, ApplicationContext context){\n+\n+        var userMappingSettings = profile.getUserMapping();\n+        var userMappingType = userMappingSettings.getType();\n+        var factoryName = userMappingType + USER_MAPPER_TYPE_POSTFIX;\n+        var factory = context.getBean(factoryName, org.owasp.oag.services.tokenMapping.UserMappingFactory.class);\n+\n+        if (factory == null) {\n+            throw new RuntimeException(\"Cannot find factory for UserMapper of type '\" + userMappingType +\"'\");\n+        }\n+\n+        var userMapper = factory.load(userMappingSettings.getSettings());\n+        mapperMap.put(profileName, userMapper);\n+    }\n+\n+    @Override\n+    public UserMapper getUserMapperForSecurityProfile(String securityProfileName) {\n+\n+        if(! mapperMap.containsKey(securityProfileName))\n+            throw new RuntimeException(\"UserMapper not found: Unexpected securityProfile name: \" + securityProfileName);\n+\n+        return mapperMap.get(securityProfileName);\n+    }\n+}"
  },
  {
    "sha": "3cd8248fda1fdcd4e1ffaa06ca460aa0f7b27bb7",
    "filename": "oag/src/main/java/org/owasp/oag/infrastructure/factories/UserMappingFactory.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/factories/UserMappingFactory.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/infrastructure/factories/UserMappingFactory.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/infrastructure/factories/UserMappingFactory.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,8 @@\n+package org.owasp.oag.infrastructure.factories;\n+\n+import org.owasp.oag.services.tokenMapping.UserMapper;\n+\n+public interface UserMappingFactory {\n+\n+    UserMapper getUserMapperForSecurityProfile(String securityProfileName);\n+}"
  },
  {
    "sha": "c7e43bd8cb0fec309167329ea51bdbc842e1e974",
    "filename": "oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSigner.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSigner.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSigner.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSigner.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,83 @@\n+package org.owasp.oag.services.crypto.jwt;\n+\n+import com.nimbusds.jose.*;\n+import com.nimbusds.jose.crypto.MACSigner;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n+\n+/**\n+ *  Implementation of a HMAC jwt singer. Supports HS256, HS384 and HS512.\n+ *  The sharedKey is passed via constructor parameter in hex format.\n+ */\n+public class HmacJwtSigner implements JwtSigner {\n+\n+    protected JWSSigner signer;\n+    protected JWSAlgorithm algorithm;\n+    protected String keyId;\n+\n+    /**\n+     * Creates a new instance of a hmac signer.\n+     * @param hexEncodedKey hex encoded string of 256, 384, 512 which is used as shared key\n+     * @param keyId Optional keyID String which is added to the jwt header as kid\n+     */\n+    public HmacJwtSigner(String hexEncodedKey, String keyId) {\n+\n+        try {\n+\n+            byte[] sharedSecret = Hex.decodeHex(hexEncodedKey);\n+\n+            switch (sharedSecret.length){\n+                case 256/8:\n+                    algorithm = JWSAlgorithm.HS256; break;\n+                case 385/8:\n+                    algorithm = JWSAlgorithm.HS384; break;\n+                case 512/8:\n+                    algorithm = JWSAlgorithm.HS512; break;\n+                default:\n+                    throw new RuntimeException(\"Invalid key length: \" + sharedSecret.length + \" , must be 256, 384 or 512 bits\");\n+            }\n+\n+            try {\n+                signer = new MACSigner(sharedSecret);\n+            } catch (KeyLengthException e) {\n+                throw new RuntimeException(\"Could not generate signing key\");\n+            }\n+\n+            this.keyId = keyId;\n+\n+        } catch (DecoderException e) {\n+\n+            throw new RuntimeException(\"Could not decode key. Must be a hex string of 256, 384 or 512 bits\");\n+        }\n+    }\n+\n+    @Override\n+    public String signJwt(JWTClaimsSet claimsSet) {\n+\n+        JWSHeader jwsHeader = createJwsHeader();\n+\n+        SignedJWT signedJWT = new SignedJWT(jwsHeader, claimsSet);\n+\n+        try {\n+            signedJWT.sign(signer);\n+        } catch (JOSEException e) {\n+            throw new RuntimeException(\"Could not sign jwt\");\n+        }\n+\n+        String jwt = signedJWT.serialize();\n+        return jwt;\n+    }\n+\n+    protected JWSHeader createJwsHeader() {\n+\n+        var builder = new JWSHeader.Builder(algorithm).type(JOSEObjectType.JWT);\n+\n+        if(keyId != null)\n+            builder = builder.keyID(keyId);\n+\n+\n+        return builder.build();\n+    }\n+}"
  },
  {
    "sha": "2c3ea05a63f3cfa55994bdccdf1320fc705ba98b",
    "filename": "oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSignerFactory.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSignerFactory.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSignerFactory.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/services/crypto/jwt/HmacJwtSignerFactory.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,28 @@\n+package org.owasp.oag.services.crypto.jwt;\n+\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+import static org.owasp.oag.services.crypto.jwt.JwtSignerFactory.JWT_SIGNER_FACTORY_BEAN_POSTFIX;\n+\n+@Component(\"hmac\" + JWT_SIGNER_FACTORY_BEAN_POSTFIX)\n+public class HmacJwtSignerFactory implements JwtSignerFactory {\n+\n+    public JwtSigner create(Map<String, Object> settings){\n+\n+        var sharedKey = settings.getOrDefault(\"secretKey\", null);\n+        var keyId = settings.getOrDefault(\"keyId\", null);\n+\n+        if(sharedKey == null)\n+            throw new RuntimeException(\"HmacJwtSignerFactory Invalid configuration: 'secretKey' not configured\");\n+\n+        if(! (sharedKey instanceof String))\n+            throw new RuntimeException(\"HmacJwtSignerFactory Invalid configuration: 'secretKey' must be a hex-string\");\n+\n+        if(! (keyId instanceof String))\n+            throw new RuntimeException(\"HmacJwtSignerFactory Invalid configuration: 'keyId' must be a string\");\n+\n+        return new HmacJwtSigner((String) sharedKey, (String) keyId);\n+    }\n+}"
  },
  {
    "sha": "7036a8f8abf75a3fcd6ff113c1b000ba194f00a9",
    "filename": "oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSigner.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSigner.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSigner.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSigner.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,8 @@\n+package org.owasp.oag.services.crypto.jwt;\n+\n+import com.nimbusds.jwt.JWTClaimsSet;\n+\n+public interface JwtSigner {\n+\n+    String signJwt(JWTClaimsSet claimsSet);\n+}"
  },
  {
    "sha": "6b5f908af3efcd13f35755ef6b3188879cb65839",
    "filename": "oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSignerFactory.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/gianlucafrei/Application-Gateway/blob/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSignerFactory.java",
    "raw_url": "https://github.com/gianlucafrei/Application-Gateway/raw/8a7d75d431225acb92ae621f6b895b97f44ba71c/oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSignerFactory.java",
    "contents_url": "https://api.github.com/repos/gianlucafrei/Application-Gateway/contents/oag/src/main/java/org/owasp/oag/services/crypto/jwt/JwtSignerFactory.java?ref=8a7d75d431225acb92ae621f6b895b97f44ba71c",
    "patch": "@@ -0,0 +1,9 @@\n+package org.owasp.oag.services.crypto.jwt;\n+\n+import java.util.Map;\n+\n+public interface JwtSignerFactory {\n+\n+    static final String JWT_SIGNER_FACTORY_BEAN_POSTFIX = \"-jwt-signer-factory\";\n+    JwtSigner create(Map<String, Object> settings);\n+}"
  }
]
