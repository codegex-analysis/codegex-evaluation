[
  {
    "sha": "a79a7f61f51941c1ed216ec654e642bd879485da",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/scribejava/scribejava/blob/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/README.md",
    "raw_url": "https://github.com/scribejava/scribejava/raw/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/README.md",
    "contents_url": "https://api.github.com/repos/scribejava/scribejava/contents/README.md?ref=3c82c51e500ef4122e4d7d904e64bec38e8ee1c4",
    "patch": "@@ -104,6 +104,7 @@ ScribeJava support out-of-box several HTTP clients:\n * Tumblr (https://www.tumblr.com/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TumblrExample.java)\n * TUT.BY (http://www.tut.by/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TutByExample.java)\n * Twitter (https://twitter.com/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TwitterExample.java)\n+* Twitter 2.0 (https://twitter.com/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Twitter20WithPKCEExample.java)\n * uCoz (https://www.ucoz.com/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/UcozExample.java)\n * Viadeo (http://viadeo.com/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/ViadeoExample.java)\n * VK ВКонтакте (http://vk.com/) [example](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExample.java), [example Client Credentials Grant](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteClientCredentialsGrantExample.java), [example with External HTTP Client](https://github.com/scribejava/scribejava/blob/master/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExternalHttpExample.java)"
  },
  {
    "sha": "49fe3f0294a64513b981aa032253346efad448e3",
    "filename": "scribejava-apis/src/main/java/com/github/scribejava/apis/TwitterApi20.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/scribejava/scribejava/blob/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-apis/src/main/java/com/github/scribejava/apis/TwitterApi20.java",
    "raw_url": "https://github.com/scribejava/scribejava/raw/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-apis/src/main/java/com/github/scribejava/apis/TwitterApi20.java",
    "contents_url": "https://api.github.com/repos/scribejava/scribejava/contents/scribejava-apis/src/main/java/com/github/scribejava/apis/TwitterApi20.java?ref=3c82c51e500ef4122e4d7d904e64bec38e8ee1c4",
    "patch": "@@ -0,0 +1,48 @@\n+package com.github.scribejava.apis;\n+\n+import com.github.scribejava.apis.openid.OpenIdJsonTokenExtractor;\n+import com.github.scribejava.core.builder.api.DefaultApi20;\n+import com.github.scribejava.core.extractors.TokenExtractor;\n+import com.github.scribejava.core.model.OAuth2AccessToken;\n+import com.github.scribejava.core.oauth2.clientauthentication.ClientAuthentication;\n+import com.github.scribejava.core.oauth2.clientauthentication.RequestBodyAuthenticationScheme;\n+\n+public class TwitterApi20 extends DefaultApi20 {\n+\n+  protected TwitterApi20() {\n+  }\n+\n+  private static class InstanceHolder {\n+\n+    private static final TwitterApi20 INSTANCE = new TwitterApi20();\n+  }\n+\n+  public static TwitterApi20 instance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  @Override\n+  public String getAccessTokenEndpoint() {\n+    return \"https://api.twitter.com/2/oauth2/token\";\n+  }\n+\n+  @Override\n+  protected String getAuthorizationBaseUrl() {\n+    return \"https://developer.twitter.com/2/oauth2/consent\";\n+  }\n+\n+  @Override\n+  public TokenExtractor<OAuth2AccessToken> getAccessTokenExtractor() {\n+    return OpenIdJsonTokenExtractor.instance();\n+  }\n+\n+  @Override\n+  public String getRevokeTokenEndpoint() {\n+    return \"https://api.twitter.com/2/oauth2/revoke\";\n+  }\n+\n+  @Override\n+  public ClientAuthentication getClientAuthentication() {\n+    return RequestBodyAuthenticationScheme.instance();\n+  }\n+}"
  },
  {
    "sha": "cfd3d2f0ae1525ccfc15cf5aa6aab2d8e3aed6fa",
    "filename": "scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Twitter20WithPKCEExample.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/scribejava/scribejava/blob/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Twitter20WithPKCEExample.java",
    "raw_url": "https://github.com/scribejava/scribejava/raw/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Twitter20WithPKCEExample.java",
    "contents_url": "https://api.github.com/repos/scribejava/scribejava/contents/scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Twitter20WithPKCEExample.java?ref=3c82c51e500ef4122e4d7d904e64bec38e8ee1c4",
    "patch": "@@ -0,0 +1,133 @@\n+package com.github.scribejava.apis.examples;\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+import com.github.scribejava.apis.TwitterApi20;\n+import com.github.scribejava.core.builder.ServiceBuilder;\n+import com.github.scribejava.core.oauth.AuthorizationUrlBuilder;\n+import com.github.scribejava.core.model.OAuth2AccessToken;\n+import com.github.scribejava.core.model.OAuthRequest;\n+import com.github.scribejava.core.model.Response;\n+import com.github.scribejava.core.model.Verb;\n+import com.github.scribejava.core.oauth.AccessTokenRequestParams;\n+import com.github.scribejava.core.oauth.OAuth20Service;\n+import com.github.scribejava.core.revoke.TokenTypeHint;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+\n+public class Twitter20WithPKCEExample {\n+\n+    private static final String NETWORK_NAME = \"Twitter\";\n+    private static final String PROTECTED_RESOURCE_URL = \"https://api.twitter.com/2/tweets?ids=1261326399320715264,1278347468690915330\";\n+\n+    private Twitter20WithPKCEExample() {\n+    }\n+\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+    public static void main(String... args) throws IOException, InterruptedException, ExecutionException {\n+        final String clientId = \"CLIENT_ID\"; // replace these with your client id\n+        final String state = \"secret\" + new Random().nextInt(999_999);\n+        final OAuth20Service service = new ServiceBuilder(clientId)\n+                .defaultScope(\"tweet.read users.read account.follows.read account.follows.write\") // replace with desired scope\n+                .callback(\"https://twitter.com/\")\n+                .build(TwitterApi20.instance());\n+\n+        final Scanner in = new Scanner(System.in, \"UTF-8\");\n+\n+        System.out.println(\"=== \" + NETWORK_NAME + \"'s OAuth Workflow ===\");\n+        System.out.println();\n+\n+        // Obtain the Authorization URL\n+        System.out.println(\"Fetching the Authorization URL...\");\n+        final Map<String, String> additionalParams = new HashMap<>();\n+\n+        final AuthorizationUrlBuilder authorizationUrlBuilder = service.createAuthorizationUrlBuilder()\n+                .state(state)\n+                .additionalParams(additionalParams)\n+                .initPKCE();\n+\n+        System.out.println(\"Got the Authorization URL!\");\n+        System.out.println(\"Now go and authorize ScribeJava here:\");\n+        System.out.println(authorizationUrlBuilder.build());\n+        System.out.println(\"And paste the authorization code here\");\n+        System.out.print(\">>\");\n+        final String code = in.nextLine();\n+        System.out.println();\n+\n+        System.out.println(\"And paste the state from server here. We have set 'state'='\" + state + \"'.\");\n+        System.out.print(\">>\");\n+        final String value = in.nextLine();\n+        if (state.equals(value)) {\n+            System.out.println(\"State value does match!\");\n+        } else {\n+            System.out.println(\"Ooops, state value does not match!\");\n+            System.out.println(\"Expected = \" + state);\n+            System.out.println(\"Got      = \" + value);\n+            System.out.println();\n+        }\n+\n+        System.out.println(\"Trading the Authorization Code for an Access Token...\");\n+        OAuth2AccessToken accessToken = service.getAccessToken(AccessTokenRequestParams.create(code).clientId(clientId)\n+                .pkceCodeVerifier(authorizationUrlBuilder.getPkce().getCodeVerifier()));\n+        System.out.println(\"Got the Access Token!\");\n+        System.out.println(\"(The raw response looks like this: \" + accessToken.getRawResponse() + \"')\");\n+\n+        fetchResource(service, accessToken, PROTECTED_RESOURCE_URL);\n+\n+        System.out.println(\"Refreshing the Access Token...\");\n+        accessToken = service.refreshAccessToken(accessToken.getRefreshToken(), null, clientId);\n+        System.out.println(\"Refreshed the Access Token!\");\n+        System.out.println(\"(The raw response looks like this: \" + accessToken.getRawResponse() + \"')\");\n+        System.out.println();\n+\n+        fetchResource(service, accessToken, PROTECTED_RESOURCE_URL);\n+\n+        System.out.println(\"Revoking the Refresh Token...\");\n+        service.revokeToken(accessToken.getRefreshToken(), TokenTypeHint.REFRESH_TOKEN);\n+        System.out.println(\"Revoked the Refresh Token!\");\n+        // Access Token is still valid\n+        fetchResource(service, accessToken, PROTECTED_RESOURCE_URL);\n+\n+        System.out.println(\"Revoking the Access Token...\");\n+        service.revokeToken(accessToken.getAccessToken(), TokenTypeHint.ACCESS_TOKEN);\n+        System.out.println(\"Revoked the Access Token!\");\n+        // Both Access Token and Refresh Token are revoked at this moment\n+        fetchResource(service, accessToken, PROTECTED_RESOURCE_URL);\n+\n+        // Now let's go and ask for a protected resource!\n+        while (true) {\n+            System.out.println(\"Paste fieldnames to fetch (leave empty to get profile, 'exit' to stop example)\");\n+            System.out.print(\">>\");\n+            final String query = in.nextLine();\n+            System.out.println();\n+\n+            final String requestUrl;\n+            if (\"exit\".equals(query)) {\n+                break;\n+            } else if (query == null || query.isEmpty()) {\n+                requestUrl = PROTECTED_RESOURCE_URL;\n+            } else {\n+                requestUrl = PROTECTED_RESOURCE_URL + \"?fields=\" + query;\n+            }\n+            fetchResource(service, accessToken, requestUrl);\n+        }\n+    }\n+\n+    private static void fetchResource(OAuth20Service service, OAuth2AccessToken accessToken, String requestUrl)\n+        throws IOException, InterruptedException, ExecutionException {\n+        // Now let's go and ask for a protected resource!\n+        System.out.println();\n+        System.out.println(\"Now we're going to access a protected resource...\");\n+        final OAuthRequest request = new OAuthRequest(Verb.GET, requestUrl);\n+        service.signRequest(accessToken, request);\n+        try (Response response = service.execute(request)) {\n+            System.out.println(response.getCode());\n+            System.out.println(response.getBody());\n+        }\n+        System.out.println();\n+    }\n+}"
  },
  {
    "sha": "ae46f2d8d44fdda00f76600f27986bf203ec6094",
    "filename": "scribejava-core/src/main/java/com/github/scribejava/core/oauth/AccessTokenRequestParams.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/scribejava/scribejava/blob/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-core/src/main/java/com/github/scribejava/core/oauth/AccessTokenRequestParams.java",
    "raw_url": "https://github.com/scribejava/scribejava/raw/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-core/src/main/java/com/github/scribejava/core/oauth/AccessTokenRequestParams.java",
    "contents_url": "https://api.github.com/repos/scribejava/scribejava/contents/scribejava-core/src/main/java/com/github/scribejava/core/oauth/AccessTokenRequestParams.java?ref=3c82c51e500ef4122e4d7d904e64bec38e8ee1c4",
    "patch": "@@ -7,6 +7,7 @@\n     private final String code;\n     private String pkceCodeVerifier;\n     private String scope;\n+    private String clientId;\n \n     public AccessTokenRequestParams(String code) {\n         this.code = code;\n@@ -21,13 +22,18 @@ public AccessTokenRequestParams pkceCodeVerifier(String pkceCodeVerifier) {\n         return this;\n     }\n \n+    public AccessTokenRequestParams scope(ScopeBuilder scope) {\n+        this.scope = scope.build();\n+        return this;\n+    }\n+\n     public AccessTokenRequestParams scope(String scope) {\n         this.scope = scope;\n         return this;\n     }\n \n-    public AccessTokenRequestParams scope(ScopeBuilder scope) {\n-        this.scope = scope.build();\n+    public AccessTokenRequestParams clientId(String clientId) {\n+        this.clientId = clientId;\n         return this;\n     }\n \n@@ -42,4 +48,8 @@ public String getPkceCodeVerifier() {\n     public String getScope() {\n         return scope;\n     }\n+\n+    public String getClientId() {\n+        return clientId;\n+    }\n }"
  },
  {
    "sha": "fd13bea552e48654eabe9722b5e00945bbd418f3",
    "filename": "scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java",
    "status": "modified",
    "additions": 26,
    "deletions": 5,
    "changes": 31,
    "blob_url": "https://github.com/scribejava/scribejava/blob/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java",
    "raw_url": "https://github.com/scribejava/scribejava/raw/3c82c51e500ef4122e4d7d904e64bec38e8ee1c4/scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java",
    "contents_url": "https://api.github.com/repos/scribejava/scribejava/contents/scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java?ref=3c82c51e500ef4122e4d7d904e64bec38e8ee1c4",
    "patch": "@@ -140,6 +140,14 @@ protected OAuthRequest createAccessTokenRequest(AccessTokenRequestParams params)\n         if (pkceCodeVerifier != null) {\n             request.addParameter(PKCE.PKCE_CODE_VERIFIER_PARAM, pkceCodeVerifier);\n         }\n+\n+        final String clientId = params.getClientId();\n+        if (clientId != null) {\n+            // OAuth2 token endpoint may require client id\n+            // https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/\n+            request.addParameter(OAuthConstants.CLIENT_ID, clientId);\n+        }\n+\n         logRequestWithParams(\"access token\", request);\n         return request;\n     }\n@@ -149,7 +157,7 @@ protected OAuthRequest createAccessTokenRequest(AccessTokenRequestParams params)\n     }\n \n     public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken, String scope) {\n-        return refreshAccessToken(refreshToken, scope, null);\n+        return refreshAccessToken(refreshToken, scope, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);\n     }\n \n     public OAuth2AccessToken refreshAccessToken(String refreshToken)\n@@ -159,26 +167,33 @@ public OAuth2AccessToken refreshAccessToken(String refreshToken)\n \n     public OAuth2AccessToken refreshAccessToken(String refreshToken, String scope)\n             throws IOException, InterruptedException, ExecutionException {\n-        final OAuthRequest request = createRefreshTokenRequest(refreshToken, scope);\n+        final OAuthRequest request = createRefreshTokenRequest(refreshToken, scope, null);\n+\n+        return sendAccessTokenRequestSync(request);\n+    }\n+\n+    public OAuth2AccessToken refreshAccessToken(String refreshToken, String scope, String clientId)\n+        throws IOException, InterruptedException, ExecutionException {\n+        final OAuthRequest request = createRefreshTokenRequest(refreshToken, scope, clientId);\n \n         return sendAccessTokenRequestSync(request);\n     }\n \n     public Future<OAuth2AccessToken> refreshAccessToken(String refreshToken,\n             OAuthAsyncRequestCallback<OAuth2AccessToken> callback) {\n-        final OAuthRequest request = createRefreshTokenRequest(refreshToken, null);\n+        final OAuthRequest request = createRefreshTokenRequest(refreshToken, null, null);\n \n         return sendAccessTokenRequestAsync(request, callback);\n     }\n \n     public Future<OAuth2AccessToken> refreshAccessToken(String refreshToken, String scope,\n             OAuthAsyncRequestCallback<OAuth2AccessToken> callback) {\n-        final OAuthRequest request = createRefreshTokenRequest(refreshToken, scope);\n+        final OAuthRequest request = createRefreshTokenRequest(refreshToken, scope, null);\n \n         return sendAccessTokenRequestAsync(request, callback);\n     }\n \n-    protected OAuthRequest createRefreshTokenRequest(String refreshToken, String scope) {\n+    protected OAuthRequest createRefreshTokenRequest(String refreshToken, String scope, String clientId) {\n         if (refreshToken == null || refreshToken.isEmpty()) {\n             throw new IllegalArgumentException(\"The refreshToken cannot be null or empty\");\n         }\n@@ -195,6 +210,12 @@ protected OAuthRequest createRefreshTokenRequest(String refreshToken, String sco\n         request.addParameter(OAuthConstants.REFRESH_TOKEN, refreshToken);\n         request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.REFRESH_TOKEN);\n \n+        if (clientId != null) {\n+            // OAuth2 token endpoint may require client id\n+            // https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/\n+            request.addParameter(OAuthConstants.CLIENT_ID, clientId);\n+        }\n+\n         logRequestWithParams(\"refresh token\", request);\n \n         return request;"
  }
]
