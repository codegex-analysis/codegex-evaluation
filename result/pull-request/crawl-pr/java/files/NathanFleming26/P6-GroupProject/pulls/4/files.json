[
  {
    "sha": "656a7d5ecd73526ee65edf25ed12141166185a4b",
    "filename": "Barrier.java",
    "status": "modified",
    "additions": 45,
    "deletions": 58,
    "changes": 103,
    "blob_url": "https://github.com/NathanFleming26/P6-GroupProject/blob/1164bb610d39ee89902b533485a7d1343ac920bc/Barrier.java",
    "raw_url": "https://github.com/NathanFleming26/P6-GroupProject/raw/1164bb610d39ee89902b533485a7d1343ac920bc/Barrier.java",
    "contents_url": "https://api.github.com/repos/NathanFleming26/P6-GroupProject/contents/Barrier.java?ref=1164bb610d39ee89902b533485a7d1343ac920bc",
    "patch": "@@ -1,66 +1,53 @@\n-import java.util.Observer;\r\n-\r\n-import javax.swing.JFrame;\r\n+/*\r\n+ * To change this license header, choose License Headers in Project Properties.\r\n+ * To change this template file, choose Tools | Templates\r\n+ * and open the template in the editor.\r\n+ */\r\n+package application;\r\n \r\n-/* Generated by Together */\r\n+import javafx.application.Application;\r\n+import javafx.fxml.FXMLLoader;\r\n+import javafx.scene.Parent;\r\n+import javafx.scene.Scene;\r\n+import javafx.scene.layout.AnchorPane;\r\n+import javafx.scene.layout.BorderPane;\r\n+import javafx.stage.Stage;\r\n \r\n /**\r\n- * This class represents the access control barriers.\r\n- * Information about the barrier functions is in the Barrier use case diagram (hyperlinked from this class).\r\n- * Although in reality this class will be realised by (programmable) hardware with a moveable\r\n- * barrier, and a camera with a registration number recognition system, here the interface comprises\r\n- * one screen with the various functions present on it, all on view at once since there aren't many.\r\n- *\r\n- * There will be a large word PASS or STOP on display at all times:\r\n- * PASS when the barrier is up because the system is inactive or temporarily when a permitted vehicle\r\n- * is being allowed through,\r\n- * and STOP when the barrier is down.\r\n  *\r\n- * There will be a text field to enter the registration number read by the camera, and a button to\r\n- * indicate that the number has been read and is ready for checking (and raising the barrier or not,\r\n- * as appropriate).\r\n- *\r\n- * To simulate the passage of a vehicle through the raised barrier, there is another button to be clicked\r\n- * to simulate when a buried electronic sensor indicates that the vehicle is now clear - the barrier can\r\n- * then be lowered (unless, of course, the system has been deactivated by security staff in the interim...).\r\n- *\r\n- * There could be many instances of this class: one at each entrance lane to the University.\r\n- * The class implements Observer, and observes the system status so that it can keep its activated/deactivated\r\n- * status up to date.\r\n- * @stereotype boundary\r\n+ * @author bruce\r\n  */\r\n-public class Barrier extends JFrame implements Observer {\r\n-    /**\r\n-     * Each instance of Barrier has a navigable association to the permit list so that when a vehicle's\r\n-     * registration number has been recognized by the camera, the barrier can check whether to raise itself\r\n-     * or not by checking the status of that vehicle's permit.\r\n-     * @clientCardinality 1..*\r\n-     * @supplierCardinality 1\r\n-     * @label Access permits\r\n-     * @directed*/\r\n-    private Vehicle_list lnkVehicle_list;\r\n-\r\n-    /**\r\n-     * Each instance of Barrier has a navigable association to the system status so that it can check\r\n-     * whether the barrier system as a whole is active or inactive, and so that it can send event messages\r\n-     * to be recorded in the log.\r\n-     * @clientCardinality 1..*\r\n-     * @supplierCardinality 1\r\n-     * @label Fetch system status info\r\n-     * @directed*/\r\n-    private System_status lnkSystem_status;\r\n+public class Barrier extends Application{ //implements java.util.Observer{\r\n+ \r\n+    private int barrierNo, date;\r\n+    private boolean active = false; \r\n+    //This attribute indicates the active/inactive state of the barrier system - as notified by the system status when it changes (Barrier Observes System status)\r\n+    \r\n+    //static BarrierFXMLController myController;\r\n+    \r\n+    //private System_status lnkSystem_status\r\n+    //Each instance of Barrier has a navigable association to the system status so that it can check whether the barrier system as a whole is active or inactive, and so that it can send event messages to be recorded in the log.\r\n+    \r\n+    //private Vehicle_list lnkVehicle_list\r\n+    //Each instance of Barrier has a navigable association to the permit list so that when a vehicle's registration number has been recognized by the camera, the barrier can check whether to raise itself or not by checking the status of that vehicle's permit.\r\n+    \r\n+    //private boolean raised = true\r\n+    //If the barrier system is active, this attribute indicates whether the barrier is currently it its raised or lowered position. The position is controlled by the result of checking a registration number with the permitted vehicles list, and the \"vehicle clear\" button.\r\n \r\n-    /**\r\n-     * This attribute indicates the active/inactive state of the barrier system - as notified by the\r\n-     * system status when it changes (Barrier Observes System status). If false then the barrier must be up.\r\n-     * If true then the barrier position is determined by attribute raised.\r\n-     */\r\n-    private boolean active = false;\r\n+        @Override\r\n+    public void start(Stage stage) throws Exception {\r\n \r\n-    /**\r\n-     * If the barrier system is active, this attribute indicates whether the barrier is currently in\r\n-     * its raised or lowered position. The position is controlled by the result of checking a registration number\r\n-     * with the permitted vehicles list, and the \"vehicle clear\" button.\r\n-     */\r\n-    private boolean raised = true;\r\n+        Parent root = FXMLLoader.load(getClass().getResource(\"BarrierFXML.fxml\"));\r\n+        Scene scene = new Scene(root);\r\n+        stage.setTitle(\"DATE No, Barrier No\");\r\n+        stage.setScene(scene);\r\n+        stage.show();\r\n+        \r\n+    \r\n+    }\r\n+    \r\n+    public static void main(String args[]){\r\n+        launch(args);\r\n+        \r\n+    }   \r\n }\r"
  },
  {
    "sha": "1052fea728e6ccdc4de4510ca83c33130effef76",
    "filename": "BarrierFXML.fxml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/NathanFleming26/P6-GroupProject/blob/1164bb610d39ee89902b533485a7d1343ac920bc/BarrierFXML.fxml",
    "raw_url": "https://github.com/NathanFleming26/P6-GroupProject/raw/1164bb610d39ee89902b533485a7d1343ac920bc/BarrierFXML.fxml",
    "contents_url": "https://api.github.com/repos/NathanFleming26/P6-GroupProject/contents/BarrierFXML.fxml?ref=1164bb610d39ee89902b533485a7d1343ac920bc",
    "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.control.Button?>\n+<?import javafx.scene.control.Label?>\n+<?import javafx.scene.control.TextField?>\n+<?import javafx.scene.layout.AnchorPane?>\n+<?import javafx.scene.shape.Circle?>\n+<?import javafx.scene.text.Font?>\n+\n+<AnchorPane id=\"AnchorPane\" prefHeight=\"336.0\" prefWidth=\"455.0\" xmlns=\"http://javafx.com/javafx/15.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"application.BarrierFXMLController\">\n+   <children>\n+      <Label fx:id=\"lblEnterReg\" layoutX=\"58.0\" layoutY=\"87.0\" text=\"Enter Registration Number:\" />\n+      <TextField fx:id=\"txtInputReg\" layoutX=\"248.0\" layoutY=\"83.0\" />\n+      <Button fx:id=\"btnSubmit\" layoutX=\"82.0\" layoutY=\"138.0\" mnemonicParsing=\"false\" onAction=\"#handleSubmit\" prefHeight=\"25.0\" prefWidth=\"120.0\" text=\"Submit\" />\n+      <Button fx:id=\"btnClear\" layoutX=\"248.0\" layoutY=\"138.0\" mnemonicParsing=\"false\" onAction=\"#handleClear\" prefHeight=\"25.0\" prefWidth=\"120.0\" text=\"Vehicle Clear\" />\n+      <Label fx:id=\"lblBarrier\" layoutX=\"123.0\" layoutY=\"218.0\" text=\"The barrier is lifted\" />\n+      <Circle fx:id=\"shpControl\" fill=\"RED\" layoutX=\"289.0\" layoutY=\"227.0\" radius=\"41.0\" stroke=\"BLACK\" strokeType=\"INSIDE\" />\n+      <Label fx:id=\"lblControl\" alignment=\"CENTER\" layoutX=\"255.0\" layoutY=\"209.0\" prefHeight=\"17.0\" prefWidth=\"69.0\" text=\"STOP\">\n+         <font>\n+            <Font name=\"System Bold\" size=\"25.0\" />\n+         </font>\n+      </Label>\n+   </children>\n+</AnchorPane>"
  },
  {
    "sha": "46ccf346ff753e12cb7b12a5a386f2831be87cea",
    "filename": "BarrierFXMLController.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/NathanFleming26/P6-GroupProject/blob/1164bb610d39ee89902b533485a7d1343ac920bc/BarrierFXMLController.java",
    "raw_url": "https://github.com/NathanFleming26/P6-GroupProject/raw/1164bb610d39ee89902b533485a7d1343ac920bc/BarrierFXMLController.java",
    "contents_url": "https://api.github.com/repos/NathanFleming26/P6-GroupProject/contents/BarrierFXMLController.java?ref=1164bb610d39ee89902b533485a7d1343ac920bc",
    "patch": "@@ -0,0 +1,76 @@\n+/*\r\n+ * To change this license header, choose License Headers in Project Properties.\r\n+ * To change this template file, choose Tools | Templates\r\n+ * and open the template in the editor.\r\n+ */\r\n+package application;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ResourceBundle;\r\n+import javafx.event.ActionEvent;\r\n+import javafx.fxml.FXML;\r\n+import javafx.fxml.Initializable;\r\n+import javafx.scene.control.Button;\r\n+import javafx.scene.control.Label;\r\n+import javafx.scene.control.TextField;\r\n+import javafx.scene.shape.Circle;\r\n+\r\n+/**\r\n+ * FXML Controller class\r\n+ *\r\n+ * @author bruce\r\n+ */\r\n+public class BarrierFXMLController implements Initializable {\r\n+\r\n+    @FXML\r\n+    private Label lblEnterReg;\r\n+    @FXML\r\n+    private TextField txtInputReg;\r\n+    @FXML\r\n+    private Button btnSubmit;\r\n+    @FXML\r\n+    private Button btnClear;\r\n+    @FXML\r\n+    private Label lblBarrier;\r\n+    @FXML\r\n+    private Circle shpControl;\r\n+    @FXML\r\n+    private Label lblControl;\r\n+    \r\n+    private Barrier barrier;\r\n+\r\n+    /**\r\n+     * Initializes the controller class.\r\n+     */\r\n+    @Override\r\n+    public void initialize(URL url, ResourceBundle rb) {\r\n+        // TODO\r\n+    }    \r\n+\r\n+    @FXML\r\n+    private void handleSubmit(ActionEvent event) {  //will only be successful if vehicle has permit, otherwise red and error message\r\n+        String reg = txtInputReg.getText();\r\n+        /*\r\n+        String reg2 = Vehicle_list.getReg();\r\n+        \r\n+        if(reg.equals(reg2)){\r\n+            lblControl.setText(\"GO\");\r\n+            shpControl.setFill(javafx.scene.paint.Color.GREEN);\r\n+        }else{\r\n+            lblControl.setText(\"STOP\");\r\n+            shpControl.setFill(javafx.scene.paint.Color.RED);\r\n+        }\r\n+        */\r\n+        \r\n+        lblControl.setText(\"GO\");\r\n+        shpControl.setFill(javafx.scene.paint.Color.GREEN);\r\n+    }\r\n+\r\n+    @FXML\r\n+    private void handleClear(ActionEvent event) {\r\n+        txtInputReg.setText(\"\");\r\n+        lblControl.setText(\"STOP\");\r\n+        shpControl.setFill(javafx.scene.paint.Color.RED);\r\n+    }\r\n+    \r\n+}\r"
  }
]
