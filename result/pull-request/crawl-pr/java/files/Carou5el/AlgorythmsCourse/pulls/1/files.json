[
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/.idea/uiDesigner.xml?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "4332d92869715b4e9f71c7305614301a9fadc6b3",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/Main.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/Main.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/Main.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "faba8fa3ce21554a6e8cc36faa9d80ee634c9d36",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/Main.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/Main.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/Main.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "7872027393b5d5d1a4f6bb69223dab5fff7460de",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/PrimitiveArrays.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/PrimitiveArrays.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/PrimitiveArrays.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson2/PrimitiveArrays.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "946983644194eb8e8af5a87430b910ed2bb514c0",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLink.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLink.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLink.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLink.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "dd83bf4c7714785e17e69660cadc5f691e062512",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLinkedList.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLinkedList.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLinkedList.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample$simpleLinkedList.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "53a10263797b28a8ac8a6b5167acc4242785d04e",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson3/CollectionsExample.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "112c5f30803c5a21bbd2af054160f33ca36a4fd6",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeImp.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeImp.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeImp.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeImp.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "f3a19ac0eb1363f65c693194510189d5f1d549e5",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeInterface.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeInterface.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeInterface.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyDequeInterface.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "81310e38ffef33e9bc3f7b2df1f5bcb4889a511e",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImp.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImp.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImp.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImp.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "c00f27a57620bc10f92c0f66d669d9674004574d",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImpLL.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImpLL.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImpLL.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueImpLL.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "c49e7b1039f5f4d6d6feb937dca8a6d104169498",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueInterface.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueInterface.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueInterface.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyQueueInterface.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "1fb8b7c66090d691cbf0d2139f4d24675029f60f",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImp.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImp.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImp.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImp.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "a712610a951227069bd61ff95031fb6c52b15e23",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImpLL.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImpLL.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImpLL.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackImpLL.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "8dc93fd27817bfeca62302f03ab5f7d2779e553b",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackInterface.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackInterface.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackInterface.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/MyStackInterface.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "b63c9a07a221504a5f682aab003023543e7bbdc4",
    "filename": "out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/StackQueue.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/StackQueue.class",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/StackQueue.class",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/out/production/Algorythms_DataStructures/example/algdatastruct/lesson4/StackQueue.class?ref=6272b219343f5dc8b160c1998f10217aa6c50a70"
  },
  {
    "sha": "2d6813d274ed2221a97b9b8990308de28448eab4",
    "filename": "src/example/algdatastruct/Main.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/Main.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/Main.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/Main.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -2,7 +2,4 @@\n \n public class Main {\n \n-    public static void main(String[] args) {\n-\t// write your code here\n-    }\n }"
  },
  {
    "sha": "b3fe91ea5be96ab14927a60f2ac9077086bf8b8e",
    "filename": "src/example/algdatastruct/lesson2/Main.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson2/Main.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson2/Main.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson2/Main.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,81 @@\n+package example.algdatastruct.lesson2;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+public class Main {\n+\tprivate static int SIZE_OF_ARRAY = 100;\n+\t\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\tSystem.out.println(SIZE_OF_ARRAY);\n+\t\t/*\n+\t\t\tЗадание 2.1\n+\t\tНа основе программного кода из домашнего задания №1 реализуйте\n+\t\tмассив на основе существующих примитивных или ссылочных типов\n+\t\tданных.\n+\t\tВыполните обращение к массиву и базовые операции класса Arrays.\n+\t\tОценить выполненные методы с помощью базового класса\n+\t\tSystem.nanoTime().\n+\t\t*/\n+\t\tTask2_1(fillArrayRandomly(new int[SIZE_OF_ARRAY]));\n+\t\t\n+\t\t/*\n+\t\t\tЗадание 2.2\n+\t\tНа основе программного кода из домашнего задания №1 реализуйте\n+\t\tмассив на основе существующих примитивных или ссылочных типов\n+\t\tданных.\n+\t\tВыполните обращение к массиву и базовые операции класса Arrays.\n+\t\tОценить выполненные методы с помощью базового класса\n+\t\tSystem.nanoTime().\n+\t\t*/\n+\t\t\n+\t}\n+\t\n+\t\n+\tprivate static void Task2_1(int[] testArray) {\n+\t\tlong time1;\n+\t\tlong time2;\n+\t\tint searchKey = 13;\n+\t\t\n+\t\t\n+\t\tSystem.out.printf(\"\\t\\tTask 2.1.\\t\");\n+\t\tSystem.out.printf(\"Basic operations with class 'Arrays'.\\n\");\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tint[] partedArray1 = Arrays.copyOf(testArray, 10);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for copying of int array: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tint[] partedArray2 = Arrays.copyOfRange(testArray, 2, 750);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for range copying of int array: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tint resultOfBinarySearch = Arrays.binarySearch(partedArray1, searchKey);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for range copying of int array: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\t\n+\t\tSystem.out.println();\n+\t}\n+\t\n+\t/**\n+\t Заполнение массива случайными числами.\n+\t @param arrayToFill - заполняемый массив.\n+\t */\n+\tpublic static int[] fillArrayRandomly(int[] arrayToFill)\t{\n+\t\tint RANDOM_RANGE = 1000;\n+\t\tRandom generator = new Random();\n+\t\t\n+\t\tint[] resultArray = Arrays.copyOf(arrayToFill, arrayToFill.length);\n+\t\t\n+\t\tfor(int i = 0; i < resultArray.length; i++)\t{\n+\t\t\tresultArray[i] = generator.nextInt(RANDOM_RANGE);\n+\t\t}\n+\t\t\n+\t\treturn resultArray;\n+\t}\n+\t\n+}"
  },
  {
    "sha": "6ebaa0d17ef3e90eced599e1cc24b2518e571de9",
    "filename": "src/example/algdatastruct/lesson2/PrimitiveArrays.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson2/PrimitiveArrays.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson2/PrimitiveArrays.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson2/PrimitiveArrays.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,94 @@\n+package example.algdatastruct.lesson2;\n+\n+public class PrimitiveArrays {\n+\tint[] arr;\n+\t\n+\t/**\n+\t * Insertion sort.\n+\t */\n+\tpublic void insertionSort(int[] array) {\n+\t\tint in;\n+\t\tfor(int i = 1; i < array.length; i++)   {\n+\t\t\tint buff = array[i];\n+\t\t\tin = i;\n+\t\t\twhile(in > 0 && array[in - 1] >= buff) {\n+\t\t\t\tarray[in] = array[in - 1];\n+\t\t\t\t--in;\n+\t\t\t}\n+\t\t\tarray[in] = buff;\n+\t\t}\n+\t}\n+\t\n+\t/*\n+\t\tСортировка методом выбора.\n+\t\t1. Начиная с 0-элемента ищем минимум.\n+\t\t2. Найденный минимум меняем местами с 0-элементом.\n+\t\t3. Повторяем 1, 2 для следующего элемента.\n+\t */\n+\t\n+\t/**\n+\t * Selected sort.\n+\t * @param array\n+\t */\n+\tpublic void selectedSort(int[] array)   {\n+\t\tfor(int i = 0; i < array.length; i++)   {\n+\t\t\tint min = i;\n+\t\t\tfor(int j = i + 1; j < array.length; j++)   {\n+\t\t\t\tif(array[j] < array[min])   {\n+\t\t\t\t\tmin = j;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tswapM(array, i, min);\n+\t\t}\n+\t}\n+\t\n+\tpublic void bubbleSort(int[] array)    {\n+\t\tfor(int i = array.length - 1; i >= 1; i--)  {\n+\t\t\tfor(int j = 0; j < i; j++)  {\n+\t\t\t\tif(array[j] > array[j + 1]) {\n+\t\t\t\t\tswapM(array, j, j + 1);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t// Linear search.\n+\tprivate int linearSearch(int[] arrayForSearch, int key)   {\n+\t\tfor (int i = 0; i < arrayForSearch.length; i++) {\n+\t\t\tif(arrayForSearch[i] == key)    {\n+\t\t\t\treturn i;\n+\t\t\t}\n+\t\t}\n+\t\t// In case that key isn't found.\n+\t\treturn -1;\n+\t}\n+\t\n+\t// Binary search.\n+\tprivate int binarySearch(int[] arr, int key)    {\n+\t\tint firstIndex = 0;\n+\t\tint lastIndex = arr.length - 1;\n+\t\t\n+\t\twhile(firstIndex <= lastIndex)  {\n+\t\t\tint middleIndex = (firstIndex + lastIndex) / 2;\n+\t\t\t\n+\t\t\tif(arr[middleIndex] == key) {\n+\t\t\t\treturn middleIndex;\n+\t\t\t}\n+\t\t\telse if(arr[middleIndex] < key)   {\n+\t\t\t\tfirstIndex = middleIndex + 1;\n+\t\t\t}\n+\t\t\telse if(arr[middleIndex] > key)   {\n+\t\t\t\tlastIndex = middleIndex - 1;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t// In case that key isn't found.\n+\t\treturn -1;\n+\t}\n+\t\n+\tpublic void swapM(int[] array, int first, int last)  {\n+\t\tint temp = array[first];\n+\t\tarray[first] = array[last];\n+\t\tarray[last] = temp;\n+\t}\n+}"
  },
  {
    "sha": "8d332d1295fd69b8e5d6a773d940ddf4934e3887",
    "filename": "src/example/algdatastruct/lesson3/CollectionsExample.java",
    "status": "added",
    "additions": 201,
    "deletions": 0,
    "changes": 201,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson3/CollectionsExample.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson3/CollectionsExample.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson3/CollectionsExample.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,201 @@\n+package example.algdatastruct.lesson3;\n+\n+/*\n+\t\t\n+\t\n+\t\t\n+\t\t\n+\t\t\n+\t\tЗадание 3.5\n+\tРеализуйте итератор на основе связанных списков из задания 3.4 и\n+\tвыполните базовые операции итератора.\n+\tОцените время выполнения операций с помощью базового метода System.nanoTime()\n+\n+ */\n+\n+import java.util.*;\n+\n+public class CollectionsExample {\n+\tstatic final int TEST_ARRAY_SIZE = 100;\n+\tstatic Random generator = new Random();\n+\t\n+\tstatic int[] testArray = new int[TEST_ARRAY_SIZE];\n+\t\n+\tpublic static void main(String[] args) {\n+\t\tfillArrayRandomly(testArray);\n+\t\t\n+\t\tArrayList<Integer> arrayList = new ArrayList<>();\n+\t\t\n+\t\t// Формирование ArrayList'а.\n+\t\tfor(int d : testArray)  {\n+\t\t\tarrayList.add(d);\n+\t\t}\n+\t\t\n+\t\tTask3_4(arrayList);\n+\t\t\n+\t}\n+\t\n+\t\n+\t/**\n+\t Заполнение массива случайными числами.\n+\t @param array - заполняемый массив.\n+\t */\n+\tpublic static void fillArrayRandomly(int[] array)\t{\n+\t\tint randomRange = 100;\n+\t\t\n+//\t\tint[] resultArray = Arrays.copyOf(array, array.length);\n+\t\t\n+\t\tfor(int i = 0; i < array.length; i++)\t{\n+\t\t\tarray[i] = generator.nextInt(randomRange);\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t/*\n+\t\tЗадание 3.1\n+\tНа основе массива из домашнего задания 2.1 реализуйте простой список и коллекцию.\n+\tОцените время выполнения преобразования.\n+\t */\n+\tpublic static void Task3_1(int[] array)   {\n+\t\t\n+\t\tArrayList<Integer> arrayList = new ArrayList<>();\n+\t\t\n+\t\tlong time1;\n+\t\tlong time2;\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t\n+\t\t// Формирование ArrayList'а.\n+\t\tfor(int d : array)  {\n+\t\t\tarrayList.add(d);\n+\t\t}\n+\t\t\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for ArrayList create: %d ns\\n\", (time2 - time1));\n+\t}\n+\t\n+\t/*\n+\t\tЗадание 3.2\n+\tНа основе списка из задания 3.1 реализуйте основные методы добавления,\n+\tудаления и получения объекта или элемента из списка.\n+\tОценить выполненные методы с помощью базового класса System.nanoTime().\n+\t */\n+\tpublic static void Task3_2(ArrayList arrayList)  {\n+\t\tlong time1;\n+\t\tlong time2;\n+\t\t\n+\t\tInteger numForAdding = generator.nextInt();\n+\t\tInteger numForTake;\n+\t\tInteger indexForTake = generator.nextInt(arrayList.size());\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tarrayList.add(numForAdding);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for add new element in ArrayList: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tnumForTake = (Integer) arrayList.get(indexForTake);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for take an element from ArrayList: %d ns\\n\", (time2 - time1));\n+\t\tSystem.out.printf(\"array[%d] = %d\\n\", indexForTake, numForTake);\n+\t\t\n+\t\tint sizeBefore = arrayList.size();\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tarrayList.remove(indexForTake);\n+\t\ttime2 = System.nanoTime();\n+\t\t\n+\t\tint sizeAfter = arrayList.size();\n+\t\tSystem.out.printf(\"Time for remove an element from ArrayList: %d ns\\n\", (time2 - time1));\n+\t\tSystem.out.printf(\"Size of ArrayList before removing: %d\\n\", sizeBefore);\n+\t\tSystem.out.printf(\"Size of ArrayList after removing: %d\\n\", sizeAfter);\n+\t}\n+\t\n+\t/*\n+\t\tЗадание 3.3\n+\tРеализуйте простой односвязный список и его базовые методы.\n+\t */\n+\tclass simpleLink<T>   {\n+\t\tprivate T link;\n+\t\tprivate simpleLink<T> next;\n+\t\t\n+\t\tpublic simpleLink(T link) {\n+\t\t\tthis.link = link;\n+\t\t}\n+\t\t\n+\t\tpublic simpleLink<T> getNext()    {\n+\t\t\treturn this.next;\n+\t\t}\n+\t\t\n+\t\tpublic void setNext(simpleLink<T> next)   {\n+\t\t\tthis.next = next;\n+\t\t}\n+\t\t\n+\t\tpublic T getValue() {\n+\t\t\treturn this.link;\n+\t\t}\n+\t}\n+\t\n+\tclass simpleLinkedList<T>   {\n+\t\tprivate simpleLink<T> first;\n+\t\t\n+\t\tpublic simpleLinkedList()   {\n+\t\t\tfirst = null;\n+\t\t}\n+\t\t\n+\t\tpublic boolean isEmpty()    {\n+\t\t\treturn (first == null);\n+\t\t}\n+\t\t\n+\t\tpublic void insert(T link)  {\n+\t\t\tsimpleLink<T> l = new simpleLink<>(link);\n+\t\t\tl.setNext(first);\n+\t\t\tthis.first = l;\n+\t\t}\n+\t\t\n+\t\tpublic simpleLink<T> delete()   {\n+\t\t\tsimpleLink<T> temp = first;\n+\t\t\tfirst = first.getNext();\n+\t\t\treturn temp;\n+\t\t}\n+\t\t\n+\t\tpublic void display()   {\n+\t\t\tsimpleLink<T> current = first;\n+\t\t\twhile(current != null)  {\n+\t\t\t\tSystem.out.println(current.getValue());\n+\t\t\t\tcurrent = current.getNext();\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tpublic T find(T searchNode) {\n+\t\t\tsimpleLink<T> findNode = new simpleLink<>(searchNode);\n+\t\t\tsimpleLink<T> current = first;\n+\t\t\twhile(current != null) {\n+\t\t\t\tif(current.getValue().equals(findNode.getValue()))  {\n+\t\t\t\t\treturn findNode.getValue();\n+\t\t\t\t}\n+\t\t\t\tcurrent = current.getNext();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\t\n+\t/*\n+\t\tЗадание 3.4\n+\tНа основе списка из задания 3.1 реализуйте простой двусторонний список и его базовые методы.\n+\tРеализуйте список заполненный объектами из вашего класса из задания 1.3\n+\t */\n+\tpublic static void Task3_4(List list)    {\n+\t\tLinkedList<Integer> ll = new LinkedList<>(list);\n+\t\t\n+\t\t// Базовые методы.\n+\t\tint sizeOfLinkedList = ll.size();\n+\t\tll.add(generator.nextInt());\n+\t\tfor(Integer d : ll) {\n+\t\t\tSystem.out.println(\"d = \" + d);\n+\t\t}\n+\t}\n+\t\n+\t\n+\t\n+}"
  },
  {
    "sha": "52c66e08be0bba239982fd1d122ba50268ba0229",
    "filename": "src/example/algdatastruct/lesson4/MyDequeImp.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyDequeImp.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyDequeImp.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyDequeImp.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,44 @@\n+package example.algdatastruct.lesson4;\n+\n+import java.util.ArrayList;\n+\n+public class MyDequeImp<T> implements MyDequeInterface<T> {\n+\tprivate ArrayList<T> al = new ArrayList<>();\n+\t\n+\tpublic MyDequeImp(ArrayList inputList) {\n+\t\tal = inputList;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\treturn al.isEmpty();\n+\t}\n+\t\n+\t@Override\n+\tpublic T peekFirst() {\n+\t\treturn al.get(0);\n+\t}\n+\t\n+\t@Override\n+\tpublic T peekLast() {\n+\t\treturn al.get(al.size() - 1);\n+\t}\n+\t\n+\t@Override\n+\tpublic T popFirst() {\n+\t\treturn al.remove(0);\n+\t}\n+\t\n+\t@Override\n+\tpublic T popLast() {\n+\t\treturn al.remove(al.size() - 1);\n+\t}\n+\t\n+\tpublic void pushFirst(T t)    {\n+\t\tal.add(0, t);\n+\t}\n+\t\n+\tpublic void pushLast(T t)  {\n+\t\tal.add((al.size() - 1), t);\n+\t}\n+}"
  },
  {
    "sha": "cd7ea5f04ac25d8589cf4ab3f5fea5de5d20d4e9",
    "filename": "src/example/algdatastruct/lesson4/MyDequeInterface.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyDequeInterface.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyDequeInterface.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyDequeInterface.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,10 @@\n+package example.algdatastruct.lesson4;\n+\n+public interface MyDequeInterface<T> {\n+\tboolean isEmpty();\n+\tT peekFirst();\n+\tT peekLast();\n+\tT popFirst();\n+\tT popLast();\n+\t\n+}"
  },
  {
    "sha": "ad0b65b6497c39ea20a5c74d43a705bcc48907c0",
    "filename": "src/example/algdatastruct/lesson4/MyQueueImp.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyQueueImp.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyQueueImp.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyQueueImp.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,34 @@\n+package example.algdatastruct.lesson4;\n+\n+import java.util.ArrayList;\n+\n+public class MyQueueImp<T> implements MyQueueInterface<T> {\n+\tprivate ArrayList<T> al = new ArrayList<>();\n+\t\n+\tpublic MyQueueImp(ArrayList inputList) {\n+\t\tal = inputList;\n+\t}\n+\t\n+\t@Override\n+\tpublic void add(T item) {\n+\t\tal.add(item);\n+\t}\n+\t\n+\t@Override\n+\tpublic T remove() {\n+\t\treturn al.remove(0);\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\treturn al.isEmpty();\n+\t}\n+\t\n+\t// Дополнительные методы.\n+\tpublic void show()  {\n+\t\tfor(T t : al)   {\n+\t\t\tSystem.out.print(\"item = \");\n+\t\t\tSystem.out.println(t.toString());\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "ba54dfa513b9ff48dd929af0eea80c7d3577d2dd",
    "filename": "src/example/algdatastruct/lesson4/MyQueueImpLL.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyQueueImpLL.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyQueueImpLL.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyQueueImpLL.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,26 @@\n+package example.algdatastruct.lesson4;\n+\n+import java.util.LinkedList;\n+\n+public class MyQueueImpLL<T> implements MyQueueInterface<T> {\n+\tLinkedList<T> linkedList = new LinkedList<>();\n+\t\n+\tpublic MyQueueImpLL() {\n+\t\n+\t}\n+\t\n+\t@Override\n+\tpublic void add(T item) {\n+\t\tlinkedList.add(item);\n+\t}\n+\t\n+\t@Override\n+\tpublic T remove() {\n+\t\treturn linkedList.remove();\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\treturn linkedList.isEmpty();\n+\t}\n+}"
  },
  {
    "sha": "86c31ca2c561e5a3cac1b735481c88236e0d4e29",
    "filename": "src/example/algdatastruct/lesson4/MyQueueInterface.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyQueueInterface.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyQueueInterface.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyQueueInterface.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,7 @@\n+package example.algdatastruct.lesson4;\n+\n+public interface MyQueueInterface<T> {\n+\tvoid add(T item);\n+\tT remove();\n+\tboolean isEmpty();\n+}"
  },
  {
    "sha": "c7585eeef6cf8278000385d6e41fe1195b9c8f9a",
    "filename": "src/example/algdatastruct/lesson4/MyStackImp.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyStackImp.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyStackImp.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyStackImp.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,34 @@\n+package example.algdatastruct.lesson4;\n+\n+import java.util.ArrayList;\n+\n+public class MyStackImp<T> implements MyStackInterface<T> {\n+\t\n+\tprivate ArrayList<T> al = new ArrayList<>();\n+\t\n+\t// Constructor.\n+\t// Заполнение стэка элементами входящего массива.\n+\tpublic MyStackImp(ArrayList<T> inputList) {\n+\t\tal = inputList;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean empty() {\n+\t\treturn this.al.isEmpty();\n+\t}\n+\t\n+\tpublic T peek() {\n+\t\treturn al.get(al.size() - 1);\n+\t}\n+\t\n+\tpublic T pop() {\n+\t\tT result = al.get(al.size() - 1);\n+\t\tal.remove(al.size() - 1);\n+\t\treturn result;\n+\t}\n+\t\n+\t@Override\n+\tpublic void push(T var) {\n+\t\tal.add(var);\n+\t}\n+}"
  },
  {
    "sha": "6974977c3349e26511e1298e2bece29999c509b1",
    "filename": "src/example/algdatastruct/lesson4/MyStackImpLL.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyStackImpLL.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyStackImpLL.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyStackImpLL.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,31 @@\n+package example.algdatastruct.lesson4;\n+\n+import java.util.LinkedList;\n+\n+public class MyStackImpLL<T> implements MyStackInterface<T> {\n+\tprivate LinkedList<T> linkedList = new LinkedList<>();\n+\t\n+\tpublic MyStackImpLL() {\n+\t\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean empty() {\n+\t\treturn linkedList.isEmpty();\n+\t}\n+\t\n+\t@Override\n+\tpublic T peek() {\n+\t\treturn linkedList.peek();\n+\t}\n+\t\n+\t@Override\n+\tpublic T pop() {\n+\t\treturn linkedList.pop();\n+\t}\n+\t\n+\t@Override\n+\tpublic void push(T t) {\n+\t\tlinkedList.add(t);\n+\t}\n+}"
  },
  {
    "sha": "9d9ef7b9de14a328db1ce2f5513d98e2234d7a5f",
    "filename": "src/example/algdatastruct/lesson4/MyStackInterface.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyStackInterface.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/MyStackInterface.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/MyStackInterface.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,8 @@\n+package example.algdatastruct.lesson4;\n+\n+public interface MyStackInterface<T> {\n+\tboolean empty();\n+\tT peek();\n+\tT pop();\n+\tvoid push(T t);\n+}"
  },
  {
    "sha": "fc6214d6483097ed95e67d60f2155a7058198880",
    "filename": "src/example/algdatastruct/lesson4/StackQueue.java",
    "status": "added",
    "additions": 259,
    "deletions": 0,
    "changes": 259,
    "blob_url": "https://github.com/Carou5el/AlgorythmsCourse/blob/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/StackQueue.java",
    "raw_url": "https://github.com/Carou5el/AlgorythmsCourse/raw/6272b219343f5dc8b160c1998f10217aa6c50a70/src/example/algdatastruct/lesson4/StackQueue.java",
    "contents_url": "https://api.github.com/repos/Carou5el/AlgorythmsCourse/contents/src/example/algdatastruct/lesson4/StackQueue.java?ref=6272b219343f5dc8b160c1998f10217aa6c50a70",
    "patch": "@@ -0,0 +1,259 @@\n+package example.algdatastruct.lesson4;\n+\n+import java.util.*;\n+\n+public class StackQueue {\n+\t\n+\tstatic Random generator = new Random();\n+\t\n+\tpublic static void main(String[] args) {\n+\t\tint testListSize = 10;\n+\t\tint randomRange = 100;\n+\t\t\n+\t\tArrayList<Integer> testList = new ArrayList<>();\n+\t\tfor (int i = 0; i < testListSize; i++) {\n+\t\t\ttestList.add(generator.nextInt(randomRange));\n+\t\t}\n+\t\t\n+\t\tTask4_1(testList);\n+\t\tTask4_2(testList);\n+\t\tTask4_3(testList);\n+\t\tTask4_4();\n+\t\tTask4_5();\n+\t\t\n+\t}\n+\t\n+\t/*\n+\t\t\tЗадание 4.1\n+\t\tНа основе данных объектного списка из задания 3.4 реализуйте простой стек\n+\t\tи его базовые методы.\n+\t\tОцените время выполнения операций с помощью базового метода System.nanoTime().\n+\t */\n+\tprivate static void Task4_1(ArrayList inputList)  {\n+\t\tlong time1 = 0;\n+\t\tlong time2 = 0;\n+\t\tMyStackImp myStack;\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Инициализация стека.\n+\t\tmyStack = new MyStackImp(inputList);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for stack init: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\tSystem.out.println(\"Is empty = \" + myStack.empty());\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени операции peek().\n+\t\tmyStack.peek();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for peek(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени операции pop().\n+\t\tmyStack.pop();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for pop(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\twhile(!myStack.empty()) {\n+\t\t\tSystem.out.println(myStack.pop());\n+\t\t}\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени операции push().\n+\t\tmyStack.push(18);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for push(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\t// Просмотр вершины стека.\n+\t\t// Удостоверяемся, что добавление элемента сработало.\n+\t\tSystem.out.printf(\"Look at the top stack.\\t\");\n+\t\tSystem.out.println(myStack.peek());\n+\t}\n+\t\n+\t/*\n+\t\t\tЗадание 4.2\n+\t\tНа основе данных объектного списка из задания 3.4 реализуйте простую очередь\n+\t\tи его базовые методы.\n+\t\tРеализуйте вспомогательные методы.\n+\t\tОцените время выполнения операций с помощью базового метода System.nanoTime().\n+\t */\n+\tprivate static void Task4_2(ArrayList inputList)   {\n+\t\tlong time1 = 0;\n+\t\tlong time2 = 0;\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени инициализации очереди.\n+\t\tMyQueueImp myQueue = new MyQueueImp(inputList);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for init of queue: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени выполнения show().\n+\t\tmyQueue.show();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for show(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\tSystem.out.println(\"Call to remove()\");\n+\t\twhile(!myQueue.isEmpty())   {\n+\t\t\tSystem.out.print(\"item = \");\n+\t\t\tSystem.out.println(myQueue.remove());\n+\t\t}\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени операции add().\n+\t\tmyQueue.add(13);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for add(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\t\n+\t\tmyQueue.add(2);\n+\t\tmyQueue.add(43);\n+\t\tmyQueue.add(8);\n+\t\t\n+\t\tSystem.out.println(\"Call to show().\");\n+\t\tmyQueue.show();\n+\t\t\n+\t}\n+\t\n+\t/*\n+\t\t\tЗадание 4.3\n+\t\tНа основе данных объектного списка из задания 3.4 реализуйте простой дек\n+\t\tи его базовые методы.\n+\t\tОцените время выполнения операций с помощью базового метода System.nanoTime().\n+\t */\n+\tprivate static void Task4_3(ArrayList arrayList)   {\n+\t\tlong time1 = 0;\n+\t\tlong time2 = 0;\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t\n+\t\t// Замер времени инициализации.\n+\t\tMyDequeImp myDeque = new MyDequeImp(arrayList);\n+\t\t\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for init: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyDeque.peekFirst();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for peekFirst(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyDeque.peekLast();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for peekLast(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyDeque.popFirst();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for popFirst(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyDeque.popLast();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for popLast(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyDeque.pushFirst(23);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for pushFirst(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyDeque.pushLast(103);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for pushLast(): %d ns\\n\", (time2 - time1));\n+\t}\n+\t\n+\t/*\n+\t\t\tЗадание 4.4\n+\t\tРеализуйте приоритетную очередь на основе ссылочных типов данных,\n+\t\tнапример, integer.\n+\t\tОцените время выполнения операций с помощью базового метода System.nanoTime().\n+\t */\n+\tprivate static void Task4_4()   {\n+\t\tlong time1 = 0;\n+\t\tlong time2 = 0;\n+\t\tint queueSize = 10;\n+\t\tint randomRange = 100;\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t\n+\t\t// Замер времени инициализации.\n+\t\tQueue priorMyQueueInterface = new PriorityQueue();\n+\t\t\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for init: %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\tfor (int i = 0; i < queueSize; i++) {\n+\t\t\tpriorMyQueueInterface.add(generator.nextInt(randomRange));\n+\t\t}\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\t// Замер времени инициализации.\n+\t\tpriorMyQueueInterface.isEmpty();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for isEmpty(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\t// Вывод на консоль содержимого очереди.\n+\t\twhile(!priorMyQueueInterface.isEmpty()) {\n+\t\t\tSystem.out.printf(\"prior queue = %d\\n\", priorMyQueueInterface.poll());\n+\t\t}\n+\t\t\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tpriorMyQueueInterface.poll();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for poll(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tpriorMyQueueInterface.add(2342);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for add(): %d ns\\n\", (time2 - time1));\n+\t}\n+\t\n+\t/*\n+\t\t\tЗадание 4.5\n+\t\tНа основе данных из задания 4.1 и 4.2, реализуйте стек и\n+\t\tочередь на базе связанного списка.\n+\t\tОцените время выполнения операций с помощью базового метода System.nanoTime().\n+\t */\n+\tprivate static void Task4_5()   {\n+\t\tlong time1 = 0;\n+\t\tlong time2 = 0;\n+\t\t\n+\t\tint sizeLinkedList = 10;\n+\t\tMyStackImpLL myStackImpLL = new MyStackImpLL();\n+\t\tMyQueueImpLL myQueueImpLL = new MyQueueImpLL();\n+\t\t\n+\t\t// Заполнение очереди и стека (не знаю, какие данные можно взять для этого из 4.1, 4.2)))).\n+\t\tfor (int i = 0; i < sizeLinkedList; i++) {\n+\t\t\tmyStackImpLL.push(generator.nextInt(100));\n+\t\t\tmyQueueImpLL.add(generator.nextInt(100));\n+\t\t}\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyStackImpLL.push(17);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for push(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyQueueImpLL.add(18);\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for add(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyStackImpLL.pop();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for pop(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\ttime1 = System.nanoTime();\n+\t\tmyQueueImpLL.remove();\n+\t\ttime2 = System.nanoTime();\n+\t\tSystem.out.printf(\"Time for remove(): %d ns\\n\", (time2 - time1));\n+\t\t\n+\t\t\n+\t\t\n+\t}\n+\t\n+}"
  }
]
