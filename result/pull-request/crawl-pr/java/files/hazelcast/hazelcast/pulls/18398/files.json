[
  {
    "sha": "ae18353b0c3122287612c67854a80c8cdf7f9c7b",
    "filename": "hazelcast/src/main/java/com/hazelcast/aggregation/impl/AbstractAggregator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/hazelcast/hazelcast/blob/802eec629bb89c9ac45510c6b122d1f37b143940/hazelcast/src/main/java/com/hazelcast/aggregation/impl/AbstractAggregator.java",
    "raw_url": "https://github.com/hazelcast/hazelcast/raw/802eec629bb89c9ac45510c6b122d1f37b143940/hazelcast/src/main/java/com/hazelcast/aggregation/impl/AbstractAggregator.java",
    "contents_url": "https://api.github.com/repos/hazelcast/hazelcast/contents/hazelcast/src/main/java/com/hazelcast/aggregation/impl/AbstractAggregator.java?ref=802eec629bb89c9ac45510c6b122d1f37b143940",
    "patch": "@@ -64,16 +64,15 @@ public final void accumulate(I entry) {\n             @SuppressWarnings(\"unchecked\")\n             MultiResult<E> multiResult = (MultiResult<E>) extractedValue;\n             List<E> results = multiResult.getResults();\n-            for (int i = 0; i < results.size(); i++) {\n-                E result = results.get(i);\n+            for (E result : results) {\n                 if (result == null && multiResult.isNullEmptyTarget() && !nullEmptyTargetSkipped) {\n                     // if a null or empty target is reached there will be a single null added to the multi-result.\n                     // in aggregators we do not care about this null so we have to skip it.\n                     // if there are more nulls in the multi-result, they have been added as values.\n                     nullEmptyTargetSkipped = true;\n                     continue;\n                 }\n-                accumulateExtracted(entry, results.get(i));\n+                accumulateExtracted(entry, result);\n             }\n         } else if (extractedValue != NonTerminalJsonValue.INSTANCE) {\n             accumulateExtracted(entry, extractedValue);"
  },
  {
    "sha": "198ef6e9bdc5865ae1f586aaf5bdccfb62551f4d",
    "filename": "hazelcast/src/main/java/com/hazelcast/internal/util/collection/WeightedEvictableList.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/hazelcast/hazelcast/blob/802eec629bb89c9ac45510c6b122d1f37b143940/hazelcast/src/main/java/com/hazelcast/internal/util/collection/WeightedEvictableList.java",
    "raw_url": "https://github.com/hazelcast/hazelcast/raw/802eec629bb89c9ac45510c6b122d1f37b143940/hazelcast/src/main/java/com/hazelcast/internal/util/collection/WeightedEvictableList.java",
    "contents_url": "https://api.github.com/repos/hazelcast/hazelcast/contents/hazelcast/src/main/java/com/hazelcast/internal/util/collection/WeightedEvictableList.java?ref=802eec629bb89c9ac45510c6b122d1f37b143940",
    "patch": "@@ -93,8 +93,7 @@ public void voteFor(WeightedItem<T> weightedItem) {\n      * @return The node that can be used to vote for\n      */\n     public WeightedItem<T> addOrVote(T item) {\n-        for (int i = 0; i < list.size(); i++) {\n-            WeightedItem<T> weightedItem = list.get(i);\n+        for (WeightedItem<T> weightedItem : list) {\n             if (weightedItem.item.equals(item)) {\n                 voteFor(weightedItem);\n                 return weightedItem;"
  }
]
