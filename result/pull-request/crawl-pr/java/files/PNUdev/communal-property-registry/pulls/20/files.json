[
  {
    "sha": "a4a2de1504d19a4cee4b09142d44472427070829",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/controller/api/PropertyController.java",
    "status": "modified",
    "additions": 24,
    "deletions": 3,
    "changes": 27,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/controller/api/PropertyController.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/controller/api/PropertyController.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/controller/api/PropertyController.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,10 +1,15 @@\n package com.pnudev.communalpropertyregistry.controller.api;\n \n import com.pnudev.communalpropertyregistry.dto.PropertiesLocationsResponseDto;\n+import com.pnudev.communalpropertyregistry.dto.response.PropertyResponseDto;\n import com.pnudev.communalpropertyregistry.service.PropertyService;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.lang.Nullable;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n@@ -13,19 +18,35 @@\n @RequestMapping(\"/api/properties\")\n public class PropertyController {\n \n-    private final PropertyService locationService;\n+    private final PropertyService propertyService;\n \n     @Autowired\n     public PropertyController(PropertyService locationService) {\n-        this.locationService = locationService;\n+        this.propertyService = locationService;\n+    }\n+\n+    @GetMapping\n+    public Page<PropertyResponseDto> getPropertiesBySearch(\n+            @PageableDefault Pageable pageable,\n+            @Nullable @RequestParam(name = \"q\") String searchQuery,\n+            @Nullable @RequestParam(name = \"status\") String propertyStatus,\n+            @Nullable @RequestParam(name = \"category\") Long categoryByPurposeId) {\n+\n+        return propertyService.findPropertiesBySearchQuery(\n+                searchQuery, propertyStatus, categoryByPurposeId, pageable);\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public PropertyResponseDto getPropertyById(@PathVariable Long id) {\n+        return propertyService.findById(id);\n     }\n \n     @GetMapping(\"/map-locations\")\n     public PropertiesLocationsResponseDto getMapLocations(@Nullable @RequestParam(name = \"q\") String searchQuery,\n                                                           @Nullable @RequestParam(name = \"status\") String propertyStatus,\n                                                           @Nullable @RequestParam(name = \"category\") Long categoryByPurposeId) {\n \n-        return locationService.getMapLocations(searchQuery, propertyStatus, categoryByPurposeId);\n+        return propertyService.getMapLocations(searchQuery, propertyStatus, categoryByPurposeId);\n     }\n \n }"
  },
  {
    "sha": "326c5e0dbb1e7131949ddd1f2c9240c22f7e264e",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/domain/Property.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/domain/Property.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/domain/Property.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/domain/Property.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,5 +1,6 @@\n package com.pnudev.communalpropertyregistry.domain;\n \n+import com.pnudev.communalpropertyregistry.exception.ServiceApiException;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -8,9 +9,12 @@\n import org.springframework.data.relational.core.mapping.Embedded;\n \n import java.time.LocalDate;\n+import java.util.Optional;\n+\n+import static com.pnudev.communalpropertyregistry.domain.QProperty.property;\n \n @Data\n-@Builder\n+@Builder(toBuilder = true)\n @NoArgsConstructor\n @AllArgsConstructor\n public class Property {\n@@ -67,8 +71,17 @@\n \n     public enum PropertyStatus {\n \n-        NON_RENT, RENT, FIRST_OR_SECOND_TYPE_LIST, PRIVATIZED, USED_BY_CITY_COUNCIL\n+        NON_RENT, RENT, FIRST_OR_SECOND_TYPE_LIST, PRIVATIZED, USED_BY_CITY_COUNCIL;\n \n-    }\n+        public static Optional<PropertyStatus> fromName(String name) {\n+            try {\n \n+                Property.PropertyStatus status = Property.PropertyStatus.valueOf(name.toUpperCase());\n+                return Optional.of(status);\n+\n+            } catch (IllegalArgumentException e) {\n+                return Optional.empty();\n+            }\n+        }\n+    }\n }"
  },
  {
    "sha": "37bb3b015f7f8f04b85257364141522a35ba6c5a",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/dto/CategoryByPurposeResponseDto.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/CategoryByPurposeResponseDto.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/CategoryByPurposeResponseDto.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/dto/CategoryByPurposeResponseDto.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -14,4 +14,4 @@\n \n     private List<CategoryByPurpose> categoriesByPurpose;\n \n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3e222d7dfadd8b3b9c33a149f284bdb812139caf",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/dto/PropertiesLocationsResponseDto.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/PropertiesLocationsResponseDto.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/PropertiesLocationsResponseDto.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/dto/PropertiesLocationsResponseDto.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,12 +1,14 @@\n package com.pnudev.communalpropertyregistry.dto;\n \n import lombok.AllArgsConstructor;\n+import lombok.Builder;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n import java.util.List;\n \n @Data\n+@Builder\n @NoArgsConstructor\n @AllArgsConstructor\n public class PropertiesLocationsResponseDto {"
  },
  {
    "sha": "041f869fc45a5a35f7cb6c007ecf6ec42f8d19c7",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/dto/response/AttachmentResponseDto.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/response/AttachmentResponseDto.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/response/AttachmentResponseDto.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/dto/response/AttachmentResponseDto.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,20 @@\n+package com.pnudev.communalpropertyregistry.dto.response;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class AttachmentResponseDto {\n+\n+    private String categoryName;\n+\n+    private String note;\n+\n+    private String link;\n+\n+}"
  },
  {
    "sha": "d6cc0ab96ecc3c22f3a1475455c168a2dcd40c6a",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/dto/response/PropertyResponseDto.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/response/PropertyResponseDto.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/dto/response/PropertyResponseDto.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/dto/response/PropertyResponseDto.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,48 @@\n+package com.pnudev.communalpropertyregistry.dto.response;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.pnudev.communalpropertyregistry.domain.Property;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+@Data\n+@Builder\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class PropertyResponseDto {\n+\n+    private Long id;\n+\n+    private String imageUrl;\n+\n+    private String address;\n+\n+    private Property.PropertyLocation propertyLocation;\n+\n+    private String name;\n+\n+    private String categoryByPurposeName;\n+\n+    private Property.PropertyStatus propertyStatus;\n+\n+    private Double area;\n+\n+    private Double areaTransferred;\n+\n+    private String balanceHolder;\n+\n+    private String owner;\n+\n+    private LocalDate leaseAgreementEndDate;\n+\n+    private Double amountOfRent;\n+\n+    private List<AttachmentResponseDto> attachments;\n+\n+}"
  },
  {
    "sha": "546a0ab2ed07a0638e4deb6ee4e00b8c6ac8d1c4",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/exception/ErrorResponse.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/exception/ErrorResponse.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/exception/ErrorResponse.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/exception/ErrorResponse.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,14 @@\n+package com.pnudev.communalpropertyregistry.exception;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+\n+@Data\n+@Builder\n+public class ErrorResponse {\n+\n+    private int status;\n+\n+    private String message;\n+\n+}"
  },
  {
    "sha": "d3e6515d8f5659138102b16080229b64767684bb",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/exception/RestExceptionInterceptor.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/exception/RestExceptionInterceptor.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/exception/RestExceptionInterceptor.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/exception/RestExceptionInterceptor.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,24 @@\n+package com.pnudev.communalpropertyregistry.exception;\n+\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.RestControllerAdvice;\n+\n+@RestControllerAdvice\n+public class RestExceptionInterceptor {\n+\n+    @ExceptionHandler(Exception.class)\n+    public ErrorResponse handleInternalServerError(Exception exception) {\n+        return ErrorResponse.builder()\n+                .message(exception.getMessage())\n+                .status(500)\n+                .build();\n+    }\n+\n+    @ExceptionHandler(ServiceApiException.class)\n+    public ErrorResponse handleServiceApiException(ServiceApiException serviceApiException) {\n+        return ErrorResponse.builder()\n+                .message(serviceApiException.getMessage())\n+                .status(404)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "bdffac95cb078d0d266e421f67e72684850a5f9e",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/exception/ServiceApiException.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/exception/ServiceApiException.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/exception/ServiceApiException.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/exception/ServiceApiException.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,9 @@\n+package com.pnudev.communalpropertyregistry.exception;\n+\n+public class ServiceApiException extends RuntimeException {\n+\n+    public ServiceApiException(String message) {\n+        super(message);\n+    }\n+\n+}"
  },
  {
    "sha": "03bc58d0cb1eba312f3a986aee3821e486ff79f9",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentCategoryRepository.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentCategoryRepository.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentCategoryRepository.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentCategoryRepository.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -3,5 +3,10 @@\n import com.pnudev.communalpropertyregistry.domain.AttachmentCategory;\n import org.springframework.data.repository.CrudRepository;\n \n+import java.util.List;\n+\n public interface AttachmentCategoryRepository extends CrudRepository<AttachmentCategory, Long> {\n+\n+    List<AttachmentCategory> findAll();\n+\n }"
  },
  {
    "sha": "c73a05ab82b579c492720c6c36ee10948b7a97df",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentRepository.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentRepository.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentRepository.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/repository/AttachmentRepository.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -3,5 +3,12 @@\n import com.pnudev.communalpropertyregistry.domain.Attachment;\n import org.springframework.data.repository.CrudRepository;\n \n+import java.util.Collection;\n+import java.util.List;\n+\n public interface AttachmentRepository extends CrudRepository<Attachment, Long> {\n+\n+    List<Attachment> findAttachmentsByPropertyId(Long propertyId);\n+\n+    List<Attachment> findAttachmentsByPropertyIdIn(Collection<Long> propertyId);\n }"
  },
  {
    "sha": "f3aeebedebf350b162c012cfeb50e57434cf9c09",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/repository/CategoryByPurposeRepository.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/CategoryByPurposeRepository.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/CategoryByPurposeRepository.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/repository/CategoryByPurposeRepository.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -9,4 +9,6 @@\n \n     List<CategoryByPurpose> findAll();\n \n-}\n+    CategoryByPurpose findByName(String name);\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9d7ae7e1dad73a40dd8462798ae2bb6406135f4e",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/repository/PropertyRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/PropertyRepository.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/PropertyRepository.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/repository/PropertyRepository.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -21,4 +21,5 @@\n             \"ON cbp.id = p.category_by_purpose_id \" +\n             \"GROUP BY cbp.name \")\n     List<PropertyStatisticsDto> getListOfStatistics();\n-}\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9d1c7ff94a3f457a7e630a994a5808c98dcd04b4",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepository.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepository.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepository.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepository.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,10 +1,15 @@\n package com.pnudev.communalpropertyregistry.repository.dsl;\n \n import com.pnudev.communalpropertyregistry.dto.PropertiesLocationsResponseDto;\n+import com.pnudev.communalpropertyregistry.dto.response.PropertyResponseDto;\n import com.querydsl.core.types.Predicate;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n \n public interface PropertyDslRepository {\n \n     PropertiesLocationsResponseDto findAllMapLocations(Predicate... where);\n \n+    Page<PropertyResponseDto> findAll(Pageable pageable, Predicate... where);\n+\n }"
  },
  {
    "sha": "c86f1b89db5d1e1f9360303fc886ee1817414133",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepositoryImpl.java",
    "status": "modified",
    "additions": 28,
    "deletions": 2,
    "changes": 30,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepositoryImpl.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepositoryImpl.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/repository/dsl/PropertyDslRepositoryImpl.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,12 +1,17 @@\n package com.pnudev.communalpropertyregistry.repository.dsl;\n \n import com.pnudev.communalpropertyregistry.dto.PropertiesLocationsResponseDto;\n+import com.pnudev.communalpropertyregistry.dto.response.PropertyResponseDto;\n import com.pnudev.communalpropertyregistry.util.mapper.PropertyMapper;\n import com.querydsl.core.Tuple;\n import com.querydsl.core.types.Predicate;\n import com.querydsl.sql.SQLQueryFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Repository;\n+\n import java.util.List;\n import java.util.stream.Collectors;\n \n@@ -27,7 +32,7 @@ public PropertyDslRepositoryImpl(SQLQueryFactory queryFactory, PropertyMapper pr\n     @Override\n     public PropertiesLocationsResponseDto findAllMapLocations(Predicate... where) {\n \n-         List<Tuple> properties = queryFactory\n+        List<Tuple> properties = queryFactory\n                 .select(property.id, property.propertyStatus, property.lon, property.lat)\n                 .from(property)\n                 .where(where)\n@@ -37,4 +42,25 @@ public PropertiesLocationsResponseDto findAllMapLocations(Predicate... where) {\n                 .map(propertyMapper::mapToPropertyLocationDto).collect(Collectors.toList()));\n     }\n \n-}\n+    @Override\n+    public Page<PropertyResponseDto> findAll(Pageable pageable, Predicate... where) {\n+\n+        List<Tuple> properties = queryFactory\n+                .select(property.all())\n+                .from(property)\n+                .where(where)\n+                .offset(pageable.getOffset())\n+                .limit(pageable.getPageSize())\n+                .fetch();\n+\n+        long total = queryFactory\n+                .from(property)\n+                .where(where)\n+                .fetchCount();\n+\n+        List<PropertyResponseDto> content = propertyMapper.mapToPropertyResponseDto(properties);\n+\n+        return new PageImpl<>(content, pageable, total);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5570f68015efe69cf1ec67db0c097dbdfd81a75b",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryService.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryService.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryService.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryService.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,11 @@\n+package com.pnudev.communalpropertyregistry.service;\n+\n+import com.pnudev.communalpropertyregistry.domain.AttachmentCategory;\n+\n+import java.util.List;\n+\n+public interface AttachmentCategoryService {\n+\n+    List<AttachmentCategory> findAll();\n+\n+}"
  },
  {
    "sha": "49c1a6f2bec9ec6f342c90cdfabff326b1ffc1e2",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryServiceImpl.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryServiceImpl.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryServiceImpl.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentCategoryServiceImpl.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,25 @@\n+package com.pnudev.communalpropertyregistry.service;\n+\n+import com.pnudev.communalpropertyregistry.domain.AttachmentCategory;\n+import com.pnudev.communalpropertyregistry.repository.AttachmentCategoryRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+\n+@Service\n+public class AttachmentCategoryServiceImpl implements AttachmentCategoryService {\n+\n+    private final AttachmentCategoryRepository attachmentCategoryRepository;\n+\n+    @Autowired\n+    public AttachmentCategoryServiceImpl(AttachmentCategoryRepository attachmentCategoryRepository) {\n+        this.attachmentCategoryRepository = attachmentCategoryRepository;\n+    }\n+\n+    @Override\n+    public List<AttachmentCategory> findAll() {\n+        return attachmentCategoryRepository.findAll();\n+    }\n+\n+}"
  },
  {
    "sha": "95ce2f8ef2256faff17935d981ad9a8ec8f174d9",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentService.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentService.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentService.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentService.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,14 @@\n+package com.pnudev.communalpropertyregistry.service;\n+\n+import com.pnudev.communalpropertyregistry.domain.Attachment;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+public interface AttachmentService {\n+\n+    List<Attachment> findByPropertyId(Long id);\n+\n+    List<Attachment> findByPropertyIdIn(List<Long> ids);\n+\n+}"
  },
  {
    "sha": "66c9cfdb9260521c32b91a78acaff0516d2f83f4",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentServiceImpl.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentServiceImpl.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentServiceImpl.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/AttachmentServiceImpl.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -0,0 +1,31 @@\n+package com.pnudev.communalpropertyregistry.service;\n+\n+import com.pnudev.communalpropertyregistry.domain.Attachment;\n+import com.pnudev.communalpropertyregistry.repository.AttachmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+@Service\n+public class AttachmentServiceImpl implements AttachmentService {\n+\n+    private final AttachmentRepository attachmentRepository;\n+\n+    @Autowired\n+    public AttachmentServiceImpl(AttachmentRepository attachmentRepository) {\n+        this.attachmentRepository = attachmentRepository;\n+    }\n+\n+    @Override\n+    public List<Attachment> findByPropertyId(Long id) {\n+        return attachmentRepository.findAttachmentsByPropertyId(id);\n+    }\n+\n+    @Override\n+    public List<Attachment> findByPropertyIdIn(List<Long> ids) {\n+        return attachmentRepository.findAttachmentsByPropertyIdIn(ids);\n+    }\n+\n+}"
  },
  {
    "sha": "d7176aa9df8c3d249e1902a4483ea783c81ef695",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeService.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeService.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeService.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,9 +1,16 @@\n package com.pnudev.communalpropertyregistry.service;\n \n+import com.pnudev.communalpropertyregistry.domain.CategoryByPurpose;\n import com.pnudev.communalpropertyregistry.dto.CategoryByPurposeResponseDto;\n \n+import java.util.List;\n+\n public interface CategoryByPurposeService {\n \n     CategoryByPurposeResponseDto findAll();\n \n-}\n+    List<CategoryByPurpose> finAllCategories();\n+\n+    CategoryByPurpose findById(Long id);\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d55a7ee7b064136103a049d5585ae7215a19ec9a",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeServiceImpl.java",
    "status": "modified",
    "additions": 14,
    "deletions": 1,
    "changes": 15,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeServiceImpl.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeServiceImpl.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/CategoryByPurposeServiceImpl.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,10 +1,13 @@\n package com.pnudev.communalpropertyregistry.service;\n \n import com.pnudev.communalpropertyregistry.dto.CategoryByPurposeResponseDto;\n+import com.pnudev.communalpropertyregistry.domain.CategoryByPurpose;\n import com.pnudev.communalpropertyregistry.repository.CategoryByPurposeRepository;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.List;\n+\n @Service\n public class CategoryByPurposeServiceImpl implements CategoryByPurposeService {\n \n@@ -20,4 +23,14 @@ public CategoryByPurposeResponseDto findAll() {\n         return new CategoryByPurposeResponseDto(categoryByPurposeRepository.findAll());\n     }\n \n-}\n+    @Override\n+    public List<CategoryByPurpose> finAllCategories() {\n+        return categoryByPurposeRepository.findAll();\n+    }\n+\n+    public CategoryByPurpose findById(Long id) {\n+        return categoryByPurposeRepository.findById(id)\n+                .orElseThrow(() -> new RuntimeException(\"Дана категорія не існує!\"));\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "869143e3a930ca31947438bab8ffbe82cd8f1ae3",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/PropertyService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/PropertyService.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/PropertyService.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/PropertyService.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,9 +1,17 @@\n package com.pnudev.communalpropertyregistry.service;\n \n import com.pnudev.communalpropertyregistry.dto.PropertiesLocationsResponseDto;\n+import com.pnudev.communalpropertyregistry.dto.response.PropertyResponseDto;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n \n public interface PropertyService {\n \n     PropertiesLocationsResponseDto getMapLocations(String searchQuery, String propertyStatus, Long categoryByPurposeId);\n \n+    Page<PropertyResponseDto> findPropertiesBySearchQuery(String searchQuery, String propertyStatus,\n+                                               Long categoryByPurposeId, Pageable pageable);\n+\n+    PropertyResponseDto findById(Long id);\n+\n }"
  },
  {
    "sha": "1f6ff764d12efd7212b2b8ca7d5952dfdc4bf218",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/service/PropertyServiceImpl.java",
    "status": "modified",
    "additions": 67,
    "deletions": 4,
    "changes": 71,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/PropertyServiceImpl.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/service/PropertyServiceImpl.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/service/PropertyServiceImpl.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,28 +1,50 @@\n package com.pnudev.communalpropertyregistry.service;\n \n+import com.pnudev.communalpropertyregistry.domain.CategoryByPurpose;\n import com.pnudev.communalpropertyregistry.domain.Property;\n import com.pnudev.communalpropertyregistry.dto.PropertiesLocationsResponseDto;\n+import com.pnudev.communalpropertyregistry.dto.response.PropertyResponseDto;\n+import com.pnudev.communalpropertyregistry.exception.ServiceApiException;\n+import com.pnudev.communalpropertyregistry.repository.PropertyRepository;\n import com.pnudev.communalpropertyregistry.repository.dsl.PropertyDslRepository;\n+import com.pnudev.communalpropertyregistry.util.mapper.PropertyMapper;\n import com.querydsl.core.types.Predicate;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import static com.pnudev.communalpropertyregistry.domain.QProperty.property;\n import static java.util.Objects.nonNull;\n \n+\n @Slf4j\n @Service\n public class PropertyServiceImpl implements PropertyService {\n \n-    private final PropertyDslRepository propertyLocationDslRepository;\n+    private final PropertyRepository propertyRepository;\n+\n+    private final CategoryByPurposeService categoryByPurposeService;\n+\n+    private final PropertyDslRepository propertyDslRepository;\n+\n+    private final PropertyMapper propertyMapper;\n \n     @Autowired\n-    public PropertyServiceImpl(PropertyDslRepository propertyLocationDslRepository) {\n-        this.propertyLocationDslRepository = propertyLocationDslRepository;\n+    public PropertyServiceImpl(CategoryByPurposeService categoryByPurposeService,\n+                               PropertyDslRepository propertyDslRepository,\n+                               PropertyRepository propertyRepository,\n+                               PropertyMapper propertyMapper) {\n+\n+        this.categoryByPurposeService = categoryByPurposeService;\n+        this.propertyDslRepository = propertyDslRepository;\n+        this.propertyRepository = propertyRepository;\n+        this.propertyMapper = propertyMapper;\n     }\n \n     @Override\n@@ -45,8 +67,49 @@ public PropertiesLocationsResponseDto getMapLocations(String searchQuery, String\n                     .eq(String.valueOf(Property.PropertyStatus.valueOf(propertyStatus.toUpperCase()))));\n         }\n \n-        return propertyLocationDslRepository.findAllMapLocations(predicates.toArray(Predicate[]::new));\n+        return propertyDslRepository\n+                .findAllMapLocations(predicates.toArray(Predicate[]::new));\n+    }\n+\n+    @Override\n+    public Page<PropertyResponseDto> findPropertiesBySearchQuery(String searchQuery, String propertyStatus,\n+                                                         Long categoryByPurposeId, Pageable pageable) {\n+\n+        List<Predicate> predicates = new ArrayList<>();\n+        predicates.add(property.id.isNotNull());\n+\n+        if (nonNull(searchQuery)) {\n+\n+            predicates.add(property.name.contains(searchQuery)\n+                    .or(property.address.contains(searchQuery)));\n+        }\n+\n+        if (nonNull(propertyStatus)) {\n+\n+            Property.PropertyStatus status = Property.PropertyStatus.fromName(propertyStatus)\n+                    .orElseThrow(() -> new ServiceApiException(\"Вказана категорія не існує!\"));\n+\n+            predicates.add(property.propertyStatus.eq(status.name()));\n+        }\n+\n+        if (nonNull(categoryByPurposeId)) {\n+\n+            CategoryByPurpose category = categoryByPurposeService\n+                    .findById(categoryByPurposeId);\n+\n+            predicates.add(property.categoryByPurposeId.eq(category.getId()));\n+        }\n+\n+        return propertyDslRepository\n+                .findAll(pageable, predicates.toArray(Predicate[]::new));\n+    }\n+\n+    @Override\n+    public PropertyResponseDto findById(Long id) {\n+        Property property = propertyRepository.findById(id)\n+                .orElseThrow(() -> new ServiceApiException(\"Приміщення не знайдено!\"));\n \n+        return propertyMapper.mapToPropertyResponseDto(property);\n     }\n \n }"
  },
  {
    "sha": "f622e93d3a0129507f45fa3789944894c55eec2b",
    "filename": "src/main/java/com/pnudev/communalpropertyregistry/util/mapper/PropertyMapper.java",
    "status": "modified",
    "additions": 197,
    "deletions": 0,
    "changes": 197,
    "blob_url": "https://github.com/PNUdev/communal-property-registry/blob/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/util/mapper/PropertyMapper.java",
    "raw_url": "https://github.com/PNUdev/communal-property-registry/raw/817ed38f50d403800e2efbff249ed88f5fcfcad5/src/main/java/com/pnudev/communalpropertyregistry/util/mapper/PropertyMapper.java",
    "contents_url": "https://api.github.com/repos/PNUdev/communal-property-registry/contents/src/main/java/com/pnudev/communalpropertyregistry/util/mapper/PropertyMapper.java?ref=817ed38f50d403800e2efbff249ed88f5fcfcad5",
    "patch": "@@ -1,15 +1,99 @@\n package com.pnudev.communalpropertyregistry.util.mapper;\n \n+import com.pnudev.communalpropertyregistry.domain.Attachment;\n+import com.pnudev.communalpropertyregistry.domain.AttachmentCategory;\n+import com.pnudev.communalpropertyregistry.domain.CategoryByPurpose;\n import com.pnudev.communalpropertyregistry.domain.Property;\n import com.pnudev.communalpropertyregistry.dto.PropertyLocationDto;\n+import com.pnudev.communalpropertyregistry.dto.response.AttachmentResponseDto;\n+import com.pnudev.communalpropertyregistry.dto.response.PropertyResponseDto;\n+import com.pnudev.communalpropertyregistry.service.AttachmentCategoryService;\n+import com.pnudev.communalpropertyregistry.service.AttachmentService;\n+import com.pnudev.communalpropertyregistry.service.CategoryByPurposeService;\n import com.querydsl.core.Tuple;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n import static com.pnudev.communalpropertyregistry.domain.QProperty.property;\n+import static java.util.Objects.nonNull;\n \n @Component\n public class PropertyMapper {\n \n+    private final AttachmentService attachmentService;\n+\n+    private final AttachmentCategoryService attachmentCategoryService;\n+\n+    private final CategoryByPurposeService categoryByPurposeService;\n+\n+    @Autowired\n+    public PropertyMapper(AttachmentService attachmentService,\n+                          AttachmentCategoryService attachmentCategoryService,\n+                          CategoryByPurposeService categoryByPurposeService) {\n+\n+        this.attachmentService = attachmentService;\n+        this.attachmentCategoryService = attachmentCategoryService;\n+        this.categoryByPurposeService = categoryByPurposeService;\n+    }\n+\n+    public PropertyResponseDto mapToPropertyResponseDto(Property property) {\n+\n+        List<Attachment> attachments = attachmentService.findByPropertyId(property.getId());\n+        List<AttachmentCategory> attachmentCategories = attachmentCategoryService.findAll();\n+        CategoryByPurpose categoryByPurpose = categoryByPurposeService\n+                .findById(property.getCategoryByPurposeId());\n+\n+        return PropertyResponseDto.builder()\n+                .id(property.getId())\n+                .area(property.getArea())\n+                .name(property.getName())\n+                .address(property.getAddress())\n+                .imageUrl(property.getImageUrl())\n+                .propertyStatus(property.getPropertyStatus())\n+                .propertyLocation(property.getPropertyLocation())\n+                .owner(validate(\n+                        property.isOwnerPubliclyViewable(),\n+                        property.getOwner()))\n+                .amountOfRent(validate(\n+                        property.isAmountOfRentPubliclyViewable(),\n+                        property.getAmountOfRent()))\n+                .balanceHolder(validate(\n+                        property.isBalanceHolderPubliclyViewable(),\n+                        property.getBalanceHolder()))\n+                .areaTransferred(validate(\n+                        property.isAreaTransferredPubliclyViewable(),\n+                        property.getAreaTransferred()))\n+                .leaseAgreementEndDate(validate(\n+                        property.isLeaseAgreementEndDatePubliclyViewable(),\n+                        property.getLeaseAgreementEndDate()))\n+                .categoryByPurposeName(categoryByPurpose.getName())\n+                .attachments(createAttachmentResponseDto(property.getId(), attachments, attachmentCategories))\n+                .build();\n+    }\n+\n+    public List<PropertyResponseDto> mapToPropertyResponseDto(List<Tuple> properties) {\n+\n+        List<Attachment> attachments = attachmentService\n+                .findByPropertyIdIn(properties.stream()\n+                        .map(prop -> prop.get(property.id))\n+                        .collect(Collectors.toList()));\n+\n+        List<AttachmentCategory> attachmentCategories = attachmentCategoryService.findAll();\n+        List<CategoryByPurpose> categoriesByPurpose = categoryByPurposeService.finAllCategories();\n+\n+        return properties.stream()\n+                .map((property) -> mapToPropertyResponseDto(\n+                        property,\n+                        attachments,\n+                        attachmentCategories,\n+                        categoriesByPurpose))\n+                .collect(Collectors.toList());\n+    }\n+\n     public PropertyLocationDto mapToPropertyLocationDto(Tuple tuple) {\n \n         return PropertyLocationDto.builder()\n@@ -20,4 +104,117 @@ public PropertyLocationDto mapToPropertyLocationDto(Tuple tuple) {\n                 .build();\n     }\n \n+    public Property mapToProperty(Tuple tuple) {\n+\n+        Property.PropertyLocation propertyLocation = Property.PropertyLocation.builder()\n+                .lat(tuple.get(property.lat))\n+                .lon(tuple.get(property.lon))\n+                .build();\n+\n+        return Property.builder()\n+                .id(tuple.get(property.id))\n+                .imageUrl(tuple.get(property.imageUrl))\n+                .address(tuple.get(property.address))\n+                .propertyLocation(propertyLocation)\n+                .name(tuple.get(property.name))\n+                .categoryByPurposeId(tuple.get(property.categoryByPurposeId))\n+                .propertyStatus(Property.PropertyStatus.valueOf(tuple.get(property.propertyStatus)))\n+                .area(tuple.get(property.area))\n+                .areaTransferred(tuple.get(property.areaTransferred))\n+                .balanceHolder(tuple.get(property.balanceHolder))\n+                .owner(tuple.get(property.owner))\n+                .leaseAgreementEndDate(tuple.get(property.leaseAgreementEndDate).toLocalDate())\n+                .amountOfRent(tuple.get(property.amountOfRent))\n+                .isAreaTransferredPubliclyViewable(tuple.get(property.isAreaTransferredPubliclyViewable))\n+                .isBalanceHolderPubliclyViewable(tuple.get(property.isBalanceHolderPubliclyViewable))\n+                .isOwnerPubliclyViewable(tuple.get(property.isOwnerPubliclyViewable))\n+                .isLeaseAgreementEndDatePubliclyViewable(tuple.get(property.isLeaseAgreementEndDatePubliclyViewable))\n+                .isAmountOfRentPubliclyViewable(tuple.get(property.isAmountOfRentPubliclyViewable))\n+                .build();\n+    }\n+\n+    private AttachmentResponseDto createAttachmentResponseDto(List<Attachment> attachments,\n+                                                              AttachmentCategory attachmentCategory) {\n+\n+        Attachment attachment = attachments.stream()\n+                .filter((a) -> a.getAttachmentCategoryId().equals(attachmentCategory.getId())\n+                        && a.isPubliclyViewable())\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (nonNull(attachment)) {\n+            return AttachmentResponseDto.builder()\n+                    .categoryName(attachmentCategory.getName())\n+                    .link(attachment.getLink())\n+                    .note(attachment.getNote())\n+                    .build();\n+        }\n+\n+        return null;\n+    }\n+\n+    private List<AttachmentResponseDto> createAttachmentResponseDto(Long propertyId,\n+                                                                    List<Attachment> attachments,\n+                                                                    List<AttachmentCategory> attachmentCategories) {\n+\n+        List<Attachment> filteredAttachments = attachments.stream()\n+                .filter(attachment -> attachment.getPropertyId().equals(propertyId))\n+                .collect(Collectors.toList());\n+\n+        return attachmentCategories.stream()\n+                .filter(AttachmentCategory::isPubliclyViewable)\n+                .map((category) -> createAttachmentResponseDto(filteredAttachments, category))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private PropertyResponseDto mapToPropertyResponseDto(Tuple propertyTuple,\n+                                                         List<Attachment> attachments,\n+                                                         List<AttachmentCategory> attachmentCategories,\n+                                                         List<CategoryByPurpose> categoriesByPurpose) {\n+\n+        CategoryByPurpose categoryByPurpose = categoriesByPurpose.stream()\n+                .filter(category -> category.getId()\n+                        .equals(propertyTuple.get(property.id)))\n+                .findFirst()\n+                .orElseThrow(() -> new RuntimeException(\"Категорія не знайдена!\"));\n+\n+        Property.PropertyStatus propertyStatus = Property.PropertyStatus\n+                .fromName(propertyTuple.get(property.propertyStatus))\n+                .orElseThrow(() -> new RuntimeException(\"Статус не існує!\"));\n+\n+        Property.PropertyLocation propertyLocation = Property.PropertyLocation.builder()\n+                .lat(propertyTuple.get(property.lat))\n+                .lon(propertyTuple.get(property.lon))\n+                .build();\n+\n+        return PropertyResponseDto.builder()\n+                .id(propertyTuple.get(property.id))\n+                .area(propertyTuple.get(property.area))\n+                .name(propertyTuple.get(property.name))\n+                .address(propertyTuple.get(property.address))\n+                .imageUrl(propertyTuple.get(property.imageUrl))\n+                .propertyStatus(propertyStatus)\n+                .propertyLocation(propertyLocation)\n+                .owner(propertyTuple.get(property.isOwnerPubliclyViewable) ?\n+                        propertyTuple.get(property.owner) : null)\n+                .amountOfRent(propertyTuple.get(property.isAmountOfRentPubliclyViewable) ?\n+                        propertyTuple.get(property.amountOfRent) : null)\n+                .balanceHolder(propertyTuple.get(property.isBalanceHolderPubliclyViewable) ?\n+                        propertyTuple.get(property.balanceHolder) : null)\n+                .areaTransferred(propertyTuple.get(property.isAreaTransferredPubliclyViewable) ?\n+                        propertyTuple.get(property.areaTransferred) : null)\n+                .leaseAgreementEndDate(propertyTuple.get(property.isLeaseAgreementEndDatePubliclyViewable)\n+                        ? propertyTuple.get(property.leaseAgreementEndDate).toLocalDate() : null)\n+                .categoryByPurposeName(categoryByPurpose.getName())\n+                .attachments(\n+                        createAttachmentResponseDto(\n+                                propertyTuple.get(property.id), attachments, attachmentCategories))\n+                .build();\n+    }\n+\n+    private <T> T validate(Boolean condition, T object) {\n+        return condition ? object : null;\n+    }\n+\n }"
  }
]
