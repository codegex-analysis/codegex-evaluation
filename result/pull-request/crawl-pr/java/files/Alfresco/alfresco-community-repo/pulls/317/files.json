[
  {
    "sha": "d37128327972f7cd6080584b0a19a6f31f32b68b",
    "filename": "repository/src/main/java/org/alfresco/repo/site/SiteServiceImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Alfresco/alfresco-community-repo/blob/a8604d031c2d758d6a06d4a72b810205a2092903/repository/src/main/java/org/alfresco/repo/site/SiteServiceImpl.java",
    "raw_url": "https://github.com/Alfresco/alfresco-community-repo/raw/a8604d031c2d758d6a06d4a72b810205a2092903/repository/src/main/java/org/alfresco/repo/site/SiteServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Alfresco/alfresco-community-repo/contents/repository/src/main/java/org/alfresco/repo/site/SiteServiceImpl.java?ref=a8604d031c2d758d6a06d4a72b810205a2092903",
    "patch": "@@ -1419,7 +1419,7 @@ private NodeRef getSiteNodeRef(NodeRef nodeRef)\n         }\r\n         else\r\n         {\r\n-            ChildAssociationRef primaryParent = nodeService.getPrimaryParent(nodeRef);\r\n+            ChildAssociationRef primaryParent = directNodeService.getPrimaryParent(nodeRef);\r\n             if (primaryParent != null && primaryParent.getParentRef() != null)\r\n             {\r\n                 siteNodeRef = getSiteNodeRef(primaryParent.getParentRef());\r"
  },
  {
    "sha": "d6cba8a963989a462b90162f5c57a3dd2f494b5d",
    "filename": "repository/src/main/resources/alfresco/opencmis-context.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Alfresco/alfresco-community-repo/blob/a8604d031c2d758d6a06d4a72b810205a2092903/repository/src/main/resources/alfresco/opencmis-context.xml",
    "raw_url": "https://github.com/Alfresco/alfresco-community-repo/raw/a8604d031c2d758d6a06d4a72b810205a2092903/repository/src/main/resources/alfresco/opencmis-context.xml",
    "contents_url": "https://api.github.com/repos/Alfresco/alfresco-community-repo/contents/repository/src/main/resources/alfresco/opencmis-context.xml?ref=a8604d031c2d758d6a06d4a72b810205a2092903",
    "patch": "@@ -120,7 +120,7 @@\n \n     <bean id=\"cmisActivityPoster\" class=\"org.alfresco.opencmis.ActivityPosterImpl\">\n         <property name=\"poster\"                 ref=\"activitiesPoster\" />\n-        <property name=\"siteService\"            ref=\"SiteService\" />\n+        <property name=\"siteService\"            ref=\"siteService\" />\n         <property name=\"tenantService\"          ref=\"tenantService\" />\n         <property name=\"nodeService\"            ref=\"NodeService\" />\n         <property name=\"fileFolderService\"      ref=\"FileFolderService\" />\n@@ -266,4 +266,4 @@\n         <property name=\"registry\"               ref=\"auditModel.extractorRegistry\" />        \n         <property name=\"cmisConnector\"          ref=\"CMISConnector\" />\n     </bean>\n-</beans>\n\\ No newline at end of file\n+</beans>"
  },
  {
    "sha": "6daff96aa4d4c1481c85333d634b1923c08a194d",
    "filename": "repository/src/test/java/org/alfresco/opencmis/CMISTest.java",
    "status": "modified",
    "additions": 121,
    "deletions": 2,
    "changes": 123,
    "blob_url": "https://github.com/Alfresco/alfresco-community-repo/blob/a8604d031c2d758d6a06d4a72b810205a2092903/repository/src/test/java/org/alfresco/opencmis/CMISTest.java",
    "raw_url": "https://github.com/Alfresco/alfresco-community-repo/raw/a8604d031c2d758d6a06d4a72b810205a2092903/repository/src/test/java/org/alfresco/opencmis/CMISTest.java",
    "contents_url": "https://api.github.com/repos/Alfresco/alfresco-community-repo/contents/repository/src/test/java/org/alfresco/opencmis/CMISTest.java?ref=a8604d031c2d758d6a06d4a72b810205a2092903",
    "patch": "@@ -78,6 +78,7 @@\n import org.alfresco.repo.security.authentication.AuthenticationContext;\r\n import org.alfresco.repo.security.authentication.AuthenticationUtil;\r\n import org.alfresco.repo.security.authentication.AuthenticationUtil.RunAsWork;\r\n+import org.alfresco.repo.site.SiteModel;\r\n import org.alfresco.repo.tenant.TenantAdminService;\r\n import org.alfresco.repo.tenant.TenantService;\r\n import org.alfresco.repo.tenant.TenantUtil;\r\n@@ -107,7 +108,13 @@\n import org.alfresco.service.cmr.security.AccessPermission;\r\n import org.alfresco.service.cmr.security.AuthorityService;\r\n import org.alfresco.service.cmr.security.AuthorityType;\r\n+import org.alfresco.service.cmr.security.MutableAuthenticationService;\r\n import org.alfresco.service.cmr.security.PermissionService;\r\n+import org.alfresco.service.cmr.security.PersonService;\r\n+import org.alfresco.service.cmr.security.PersonService.PersonInfo;\r\n+import org.alfresco.service.cmr.site.SiteInfo;\r\n+import org.alfresco.service.cmr.site.SiteService;\r\n+import org.alfresco.service.cmr.site.SiteVisibility;\r\n import org.alfresco.service.cmr.tagging.TaggingService;\r\n import org.alfresco.service.cmr.version.Version;\r\n import org.alfresco.service.cmr.version.VersionService;\r\n@@ -121,7 +128,6 @@\n import org.alfresco.util.Pair;\r\n import org.alfresco.util.testing.category.FrequentlyFailingTests;\r\n import org.alfresco.util.testing.category.LuceneTests;\r\n-import org.alfresco.util.testing.category.PerformanceTests;\r\n import org.alfresco.util.testing.category.RedundantTests;\r\n import org.apache.chemistry.opencmis.commons.PropertyIds;\r\n import org.apache.chemistry.opencmis.commons.data.Ace;\r\n@@ -213,6 +219,9 @@\n     private SearchService searchService;\r\n     private java.util.Properties globalProperties;\r\n     private AuditComponentImpl auditComponent;\r\n+    private PersonService personService;\r\n+    private SiteService siteService;\r\n+    private MutableAuthenticationService authenticationService;\r\n \r\n     private AlfrescoCmisServiceFactory factory;\r\n \t\r\n@@ -338,6 +347,9 @@ public void before()\n         this.tenantService = (TenantService) ctx.getBean(\"tenantService\");\r\n         this.searchService = (SearchService) ctx.getBean(\"SearchService\");\r\n         this.auditComponent = (AuditComponentImpl) ctx.getBean(\"auditComponent\");\r\n+        this.personService = (PersonService) ctx.getBean(\"personService\");\r\n+        this.siteService = (SiteService) ctx.getBean(\"siteService\");\r\n+        this.authenticationService = (MutableAuthenticationService) ctx.getBean(\"AuthenticationService\");\r\n \r\n         this.globalProperties = (java.util.Properties) ctx.getBean(\"global-properties\");\r\n         this.globalProperties.setProperty(VersionableAspectTest.AUTO_VERSION_PROPS_KEY, \"true\");\r\n@@ -719,12 +731,17 @@ private Rule addRule(boolean isAppliedToChildren, String title)\n     }\r\n \r\n     private <T extends Object> T withCmisService(CmisServiceCallback<T> callback, CmisVersion cmisVersion)\r\n+    {\r\n+        return withCmisService(\"admin\", \"admin\", callback, cmisVersion);\r\n+    }\r\n+\r\n+    private <T extends Object> T withCmisService(String username, String password, CmisServiceCallback<T> callback, CmisVersion cmisVersion)\r\n     {\r\n         CmisService cmisService = null;\r\n \r\n         try\r\n         {\r\n-            CallContext context = new SimpleCallContext(\"admin\", \"admin\", cmisVersion);\r\n+            CallContext context = new SimpleCallContext(username, password, cmisVersion);\r\n             cmisService = factory.getService(context);\r\n             T ret = callback.execute(cmisService);\r\n             return ret;\r\n@@ -4101,6 +4118,108 @@ public String execute(CmisService cmisService)\n         }\r\n     }\r\n \r\n+    /**\r\n+     * This test ensures that a non member user of a private site, can edit metadata on a document (where the non member user\r\n+     * has \"SiteCollaborator\" role) placed on the site.\r\n+     *\r\n+     * @throws Exception\r\n+     */\r\n+    @Test\r\n+    public void testMNT20006() throws Exception\r\n+    {\r\n+        AuthenticationUtil.pushAuthentication();\r\n+        AuthenticationUtil.setFullyAuthenticatedUser(AuthenticationUtil.getAdminUserName());\r\n+\r\n+        final String nonMemberUsername = \"user\" + System.currentTimeMillis();\r\n+        final String nonMemberPassword = \"pass\" + System.currentTimeMillis();\r\n+        final String siteId = \"site\" + System.currentTimeMillis();\r\n+        final String originalDescription = \"my description\";\r\n+\r\n+        NodeRef fileNode;\r\n+\r\n+        try\r\n+        {\r\n+            fileNode = transactionService.getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>()\r\n+            {\r\n+                public NodeRef execute() throws Throwable\r\n+                {\r\n+                    // Create user\r\n+                    authenticationService.createAuthentication(nonMemberUsername, nonMemberPassword.toCharArray());\r\n+                    Map<QName, Serializable> props = new HashMap<QName, Serializable>();\r\n+                    String email = nonMemberUsername + \"@testcmis.com\";\r\n+                    props.put(ContentModel.PROP_USERNAME, nonMemberUsername);\r\n+                    props.put(ContentModel.PROP_FIRSTNAME, nonMemberUsername);\r\n+                    props.put(ContentModel.PROP_LASTNAME, nonMemberUsername);\r\n+                    props.put(ContentModel.PROP_EMAIL, email);\r\n+                    PersonInfo personInfo = personService.getPerson(personService.createPerson(props));\r\n+                    assertNotNull(\"Null person info\", personInfo);\r\n+\r\n+                    // Create site\r\n+                    SiteInfo siteInfo = siteService.createSite(\"myPreset\", siteId, \"myTitle\", \"myDescription\", SiteVisibility.PRIVATE);\r\n+                    assertNotNull(\"Null site info\", siteInfo);\r\n+                    NodeRef siteDocLib = siteService.createContainer(siteId, SiteService.DOCUMENT_LIBRARY, ContentModel.TYPE_FOLDER, null);\r\n+                    assertNotNull(\"Null site doclib\", siteDocLib);\r\n+\r\n+                    // Create node in site\r\n+                    String nodeName = \"node\" + System.currentTimeMillis() + \".txt\";\r\n+                    NodeRef fileNode = nodeService.createNode(siteDocLib, ContentModel.ASSOC_CONTAINS, ContentModel.ASSOC_CONTAINS, ContentModel.TYPE_CONTENT).getChildRef();\r\n+                    ContentWriter writer = contentService.getWriter(fileNode, ContentModel.PROP_CONTENT, true);\r\n+                    writer.putContent(\"my node content\");\r\n+                    nodeService.setProperty(fileNode, ContentModel.PROP_TITLE, nodeName);\r\n+                    nodeService.setProperty(fileNode, ContentModel.PROP_DESCRIPTION, originalDescription);\r\n+                    assertNotNull(\"Null file node\", fileNode);\r\n+                    assertTrue(nodeService.exists(fileNode));\r\n+\r\n+                    // Sets node permissions to the user who is not member of the site and get site activities\r\n+                    permissionService.setPermission(fileNode, nonMemberUsername, SiteModel.SITE_COLLABORATOR, true);\r\n+\r\n+                    return fileNode;\r\n+                }\r\n+            });\r\n+        }\r\n+        finally\r\n+        {\r\n+            AuthenticationUtil.popAuthentication();\r\n+        }\r\n+\r\n+        // Edit metadata\r\n+        final String newDescription = \"new node description\";\r\n+\r\n+        Boolean updated = withCmisService(nonMemberUsername, nonMemberPassword, new CmisServiceCallback<Boolean>()\r\n+        {\r\n+            @Override\r\n+            public Boolean execute(CmisService cmisService)\r\n+            {\r\n+                Boolean updated = true;\r\n+\r\n+                try\r\n+                {\r\n+                    // Obtain repository id\r\n+                    List<RepositoryInfo> repositories = cmisService.getRepositoryInfos(null);\r\n+                    assertTrue(repositories.size() > 0);\r\n+                    RepositoryInfo repo = repositories.get(0);\r\n+                    String repositoryId = repo.getId();\r\n+\r\n+                    // Id holder\r\n+                    Holder<String> objectIdHolder = new Holder<String>(fileNode.toString());\r\n+\r\n+                    // New Properties\r\n+                    PropertiesImpl newProperties = new PropertiesImpl();\r\n+                    newProperties.addProperty(new PropertyStringImpl(PropertyIds.DESCRIPTION, newDescription));\r\n+                    cmisService.updateProperties(repositoryId, objectIdHolder, null, newProperties, null);\r\n+                }\r\n+                catch (Exception e)\r\n+                {\r\n+                    updated = false;\r\n+                }\r\n+\r\n+                return updated;\r\n+            };\r\n+        }, CmisVersion.CMIS_1_1);\r\n+\r\n+        assertTrue(\"Document metadata not updated\", updated);\r\n+    }\r\n+\r\n     private NodeRef createFolder(NodeRef parentNodeRef, String folderName, QName folderType) throws IOException\r\n     {\r\n         Map<QName, Serializable> properties = new HashMap<QName, Serializable>();\r"
  }
]
