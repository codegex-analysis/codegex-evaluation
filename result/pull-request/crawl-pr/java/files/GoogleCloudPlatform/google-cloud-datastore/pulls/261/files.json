[
  {
    "sha": "d1462bb46c5029eff22ff94acb79b090ef25bfad",
    "filename": "java/datastore/src/main/java/com/google/datastore/v1/client/ChecksumEnforcingInputStream.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/blob/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/main/java/com/google/datastore/v1/client/ChecksumEnforcingInputStream.java",
    "raw_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/raw/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/main/java/com/google/datastore/v1/client/ChecksumEnforcingInputStream.java",
    "contents_url": "https://api.github.com/repos/GoogleCloudPlatform/google-cloud-datastore/contents/java/datastore/src/main/java/com/google/datastore/v1/client/ChecksumEnforcingInputStream.java?ref=42d6effdc733d4b813aeae7c3ebdaff2ba889fb7",
    "patch": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2021 Google LLC. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.datastore.v1.client;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.api.client.http.HttpResponse;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.MessageDigest;\n+import org.apache.commons.codec.binary.Hex;\n+\n+/** This class provides End-to-End Checksum API for http protocol. */\n+class ChecksumEnforcingInputStream extends InputStream {\n+  private final InputStream delegate;\n+  private final MessageDigest messageDigest;\n+  private final String expectedChecksum;\n+\n+  ChecksumEnforcingInputStream(InputStream originalInputStream, HttpResponse response) {\n+    delegate = originalInputStream;\n+    expectedChecksum = EndToEndChecksumHandler.getChecksumHeader(response);\n+    messageDigest = EndToEndChecksumHandler.getMessageDigestInstance();\n+  }\n+\n+  @VisibleForTesting\n+  ChecksumEnforcingInputStream(InputStream originalInputStream, String checksum) {\n+    delegate = originalInputStream;\n+    expectedChecksum = checksum;\n+    messageDigest = EndToEndChecksumHandler.getMessageDigestInstance();\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    return delegate.available();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    delegate.close();\n+  }\n+\n+  @Override\n+  public void mark(int readlimit) {\n+    throw new RuntimeException(\"mark(int) Unimplemented\");\n+  }\n+\n+  @Override\n+  public boolean markSupported() {\n+    // This class doesn't support mark, reset methods!\n+    return false;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    throw new RuntimeException(\"read() Unimplemented\");\n+  }\n+\n+  @Override\n+  public int read(byte[] b) throws IOException {\n+    throw new RuntimeException(\"read(byte[]) Unimplemented\");\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    if (len <= 0) return 0;\n+    int i = delegate.read(b, off, len);\n+    if (i > 0) {\n+      messageDigest.update(b, off, i);\n+    } else {\n+      // no more payload to read. compute checksum and verify\n+      if (!expectedChecksum.equalsIgnoreCase(Hex.encodeHexString(messageDigest.digest()))) {\n+        throw new IOException(\"possible memory corruption on payload detected\");\n+      }\n+    }\n+    return i;\n+  }\n+\n+  @Override\n+  public void reset() throws IOException {\n+    throw new RuntimeException(\"reset() Unimplemented\");\n+  }\n+\n+  @Override\n+  public long skip(long n) throws IOException {\n+    if (n <= 0) return 0;\n+    // TODO: handle the case of n > Integer.MAX_VALUE ( that is, n > (2GB - 1). It is highly\n+    // unlikely that callers will want to skip that many bytes. That is the entire payload\n+    if (n > Integer.MAX_VALUE) {\n+      throw new IOException(\"can't skip more than Integer.MAX bytes\");\n+    }\n+    int intSkip = (int) n;\n+    byte[] b = new byte[intSkip];\n+    return read(b, 0, intSkip);\n+  }\n+}"
  },
  {
    "sha": "3817477efc2ed077f0cd5be66cccb3f25340d1e6",
    "filename": "java/datastore/src/main/java/com/google/datastore/v1/client/EndToEndChecksumHandler.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/blob/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/main/java/com/google/datastore/v1/client/EndToEndChecksumHandler.java",
    "raw_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/raw/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/main/java/com/google/datastore/v1/client/EndToEndChecksumHandler.java",
    "contents_url": "https://api.github.com/repos/GoogleCloudPlatform/google-cloud-datastore/contents/java/datastore/src/main/java/com/google/datastore/v1/client/EndToEndChecksumHandler.java?ref=42d6effdc733d4b813aeae7c3ebdaff2ba889fb7",
    "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2021 Google LLC. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.datastore.v1.client;\n+\n+import com.google.api.client.http.HttpResponse;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import org.apache.commons.codec.binary.Hex;\n+\n+/** This class provides End-to-End Checksum API for http protocol. */\n+class EndToEndChecksumHandler {\n+  /** The checksum http header on http requests */\n+  static final String HTTP_REQUEST_CHECKSUM_HEADER = \"x-request-checksum-348659783\";\n+  /** The checksum http header on http responses */\n+  static final String HTTP_RESPONSE_CHECKSUM_HEADER = \"x-response-checksum-348659783\";\n+  /** Algorithm used for checksum */\n+  private static final String MD5 = \"MD5\";\n+\n+  /**\n+   * Create and return checksum as a string value for the input 'bytes'.\n+   *\n+   * @param bytes raw message for which the checksum is being computed\n+   * @return computed checksum as a hex string\n+   * @throws RuntimeException if MD5 Algorithm is not found in the VM\n+   */\n+  static String computeChecksum(byte[] bytes) {\n+    if (bytes == null || (bytes.length == 0)) {\n+      return null;\n+    }\n+    return Hex.encodeHexString(getMessageDigestInstance().digest(bytes));\n+  }\n+\n+  /**\n+   * Validates the checksum for the given input 'bytes' and returns true if valid, false otherwise.\n+   *\n+   * @param checksum the checksum as a hex string\n+   * @param bytes the raw message for which the checksum was sent\n+   * @return {@code true} if input checksum is valid for the input bytes; {@code false} otherwise\n+   */\n+  static boolean validateChecksum(String checksum, byte[] bytes) {\n+    return checksum != null\n+        && !checksum.isEmpty()\n+        && bytes != null\n+        && bytes.length > 0\n+        && checksum.equalsIgnoreCase(computeChecksum(bytes));\n+  }\n+\n+  static MessageDigest getMessageDigestInstance() {\n+    try {\n+      return MessageDigest.getInstance(MD5);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new RuntimeException(\"MD5 algorithm is not found when computing checksum!\");\n+    }\n+  }\n+\n+  static boolean hasChecksumHeader(HttpResponse response) {\n+    String checksum = getChecksumHeader(response);\n+    return checksum != null && !checksum.isEmpty();\n+  }\n+\n+  static String getChecksumHeader(HttpResponse response) {\n+    return response.getHeaders().getFirstHeaderStringValue(HTTP_RESPONSE_CHECKSUM_HEADER);\n+  }\n+}"
  },
  {
    "sha": "da20495bc1fdbc350bea80a99ed8e4f033322d99",
    "filename": "java/datastore/src/main/java/com/google/datastore/v1/client/RemoteRpc.java",
    "status": "modified",
    "additions": 33,
    "deletions": 3,
    "changes": 36,
    "blob_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/blob/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/main/java/com/google/datastore/v1/client/RemoteRpc.java",
    "raw_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/raw/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/main/java/com/google/datastore/v1/client/RemoteRpc.java",
    "contents_url": "https://api.github.com/repos/GoogleCloudPlatform/google-cloud-datastore/contents/java/datastore/src/main/java/com/google/datastore/v1/client/RemoteRpc.java?ref=42d6effdc733d4b813aeae7c3ebdaff2ba889fb7",
    "patch": "@@ -23,6 +23,7 @@\n import com.google.api.client.http.HttpStatusCodes;\n import com.google.api.client.http.protobuf.ProtoHttpContent;\n import com.google.api.client.util.IOUtils;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.protobuf.MessageLite;\n import com.google.rpc.Code;\n import com.google.rpc.Status;\n@@ -42,13 +43,17 @@\n class RemoteRpc {\n   private static final Logger logger = Logger.getLogger(RemoteRpc.class.getName());\n \n-  private static final String API_FORMAT_VERSION_HEADER = \"X-Goog-Api-Format-Version\";\n+  @VisibleForTesting\n+  static final String API_FORMAT_VERSION_HEADER = \"X-Goog-Api-Format-Version\";\n   private static final String API_FORMAT_VERSION = \"2\";\n \n   private final HttpRequestFactory client;\n   private final HttpRequestInitializer initializer;\n   private final String url;\n   private final AtomicInteger rpcCount = new AtomicInteger(0);\n+  // Not final - so it can be set/reset in Unittests\n+  private static boolean enableE2EChecksum = Boolean.parseBoolean(\n+      System.getenv(\"GOOGLE_CLOUD_DATASTORE_HTTP_ENABLE_E2E_CHECKSUM\"));\n \n   RemoteRpc(HttpRequestFactory client, HttpRequestInitializer initializer, String url) {\n     this.client = client;\n@@ -80,7 +85,7 @@ public InputStream call(String methodName, MessageLite request) throws Datastore\n         rpcCount.incrementAndGet();\n         ProtoHttpContent payload = new ProtoHttpContent(request);\n         HttpRequest httpRequest = client.buildPostRequest(resolveURL(methodName), payload);\n-        httpRequest.getHeaders().put(API_FORMAT_VERSION_HEADER, API_FORMAT_VERSION);\n+        setHeaders(request, httpRequest);\n         // Don't throw an HTTPResponseException on error. It converts the response to a String and\n         // throws away the original, whereas we need the raw bytes to parse it as a proto.\n         httpRequest.setThrowExceptionOnExecuteError(false);\n@@ -98,7 +103,10 @@ public InputStream call(String methodName, MessageLite request) throws Datastore\n                 httpResponse.getStatusCode());\n           }\n         }\n-        return httpResponse.getContent();\n+        InputStream inp = httpResponse.getContent();\n+        return enableE2EChecksum && EndToEndChecksumHandler.hasChecksumHeader(httpResponse)\n+            ? new ChecksumEnforcingInputStream(inp, httpResponse)\n+            : inp;\n       } catch (SocketTimeoutException e) {\n         throw makeException(url, methodName, Code.DEADLINE_EXCEEDED, \"Deadline exceeded\", e);\n       } catch (IOException e) {\n@@ -110,6 +118,28 @@ public InputStream call(String methodName, MessageLite request) throws Datastore\n     }\n   }\n \n+  @VisibleForTesting\n+  void setHeaders(MessageLite request, HttpRequest httpRequest) {\n+    httpRequest.getHeaders().put(API_FORMAT_VERSION_HEADER, API_FORMAT_VERSION);\n+    if (enableE2EChecksum && request != null) {\n+      String checksum = EndToEndChecksumHandler.computeChecksum(request.toByteArray());\n+      if (checksum != null) {\n+        httpRequest.getHeaders().put(EndToEndChecksumHandler.HTTP_REQUEST_CHECKSUM_HEADER,\n+            checksum);\n+      }\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  HttpRequestFactory getClient() {\n+    return client;\n+  }\n+\n+  @VisibleForTesting\n+  static void setSystemEnvE2EChecksum(boolean enableE2EChecksum) {\n+    RemoteRpc.enableE2EChecksum = enableE2EChecksum;\n+  }\n+\n   void resetRpcCount() {\n     rpcCount.set(0);\n   }"
  },
  {
    "sha": "dda4a300aa019452a7f68b59b0560eca97514bb4",
    "filename": "java/datastore/src/test/java/com/google/datastore/v1/client/ChecksumEnforcingInputStreamTest.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/blob/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/test/java/com/google/datastore/v1/client/ChecksumEnforcingInputStreamTest.java",
    "raw_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/raw/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/test/java/com/google/datastore/v1/client/ChecksumEnforcingInputStreamTest.java",
    "contents_url": "https://api.github.com/repos/GoogleCloudPlatform/google-cloud-datastore/contents/java/datastore/src/test/java/com/google/datastore/v1/client/ChecksumEnforcingInputStreamTest.java?ref=42d6effdc733d4b813aeae7c3ebdaff2ba889fb7",
    "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2021 Google LLC. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.datastore.v1.client;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.fail;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Test for {@link ChecksumEnforcingInputStream}. */\n+@RunWith(JUnit4.class)\n+public class ChecksumEnforcingInputStreamTest {\n+  private String payload;\n+  private ChecksumEnforcingInputStream testInstance;\n+  private String expectedChecksum;\n+\n+  public void test(int payloadSize) throws Exception {\n+    // test with 10M payload\n+    setUpData(payloadSize);\n+    // read 1000 bytes at a time\n+    // Since checksun should be correct, do not expect IOException\n+    byte[] buf = new byte[1000];\n+    try {\n+      while (testInstance.read(buf, 0, 1000) != -1) {\n+         // do nothing with the bytes read\n+      }\n+    } catch (IOException e) {\n+      fail(\"checksum verification failed!\");\n+    }\n+  }\n+\n+  @Test\n+  public void read_withValidChecksum_differentPayloadSizes() throws Exception {\n+    // test with various payload sizes (1, 2, 2**2, 2**3 etc upto 2**30 = 1GB)\n+    for (int i = 0, payloadSize = 1; i < 31; i++) {\n+      long start = System.currentTimeMillis();\n+      test(payloadSize);\n+      payloadSize *= 2;\n+      long duration = System.currentTimeMillis() - start;\n+      // log test duration times for bigger payloads\n+      if (i > 20) {\n+        System.out.println(\"Test duration for payloadsize = 2** \" + i + \" is: \" + duration + \"ms\");\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void read_withInvalidChecksum() {\n+    // build a test instance with invalidchecksum\n+    ChecksumEnforcingInputStream instance = new ChecksumEnforcingInputStream(\n+        new ByteArrayInputStream(\"hello there\".getBytes(UTF_8)),\n+        \"this checksum is invalid\");\n+    // read 1000 bytes at a time\n+    // Since checksun should be correct, do not expect IOException\n+    byte[] buf = new byte[1000];\n+    try {\n+      while (instance.read(buf, 0, 1000) != -1) {\n+        // do nothing with the bytes read\n+      }\n+    } catch (IOException e) {\n+      // this is expected\n+      return;\n+    }\n+    fail(\"should have failed\");\n+  }\n+\n+  @Test\n+  public void markNotSupported() throws Exception {\n+    setUpData(1);\n+    assertFalse(testInstance.markSupported());\n+  }\n+\n+  private void setUpData(int payloadSize) throws Exception {\n+    // setup a String of size = input param: payloadSize\n+    String str = \"This is a repeating string.\";\n+    if (payloadSize > str.length()) {\n+      int num = payloadSize / str.length();\n+      StringBuffer buf = new StringBuffer();\n+      for (int i = 0; i < num; i++) {\n+        buf.append(str);\n+      }\n+      payload = buf.toString();\n+    } else {\n+      payload = str.substring(0, payloadSize);\n+    }\n+    byte[] bytes = payload.getBytes(UTF_8);\n+    expectedChecksum = EndToEndChecksumHandler.computeChecksum(bytes);\n+    testInstance = new ChecksumEnforcingInputStream(new ByteArrayInputStream(bytes),\n+        expectedChecksum);\n+  }\n+}"
  },
  {
    "sha": "593ccd23dc64671058f86106d3663ccb9a10bb34",
    "filename": "java/datastore/src/test/java/com/google/datastore/v1/client/EndToEndChecksumHandlerTest.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/blob/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/test/java/com/google/datastore/v1/client/EndToEndChecksumHandlerTest.java",
    "raw_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/raw/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/test/java/com/google/datastore/v1/client/EndToEndChecksumHandlerTest.java",
    "contents_url": "https://api.github.com/repos/GoogleCloudPlatform/google-cloud-datastore/contents/java/datastore/src/test/java/com/google/datastore/v1/client/EndToEndChecksumHandlerTest.java?ref=42d6effdc733d4b813aeae7c3ebdaff2ba889fb7",
    "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2021 Google LLC. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.datastore.v1.client;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Test for {@link EndToEndChecksumHandler}. */\n+@RunWith(JUnit4.class)\n+public class EndToEndChecksumHandlerTest {\n+  private byte[] payloadBytes = \"This is a long string with numbers 1234, 134.56 \".getBytes(UTF_8);\n+\n+  @Test\n+  public void validateChecksum_correctChecksum() {\n+    String computed = EndToEndChecksumHandler.computeChecksum(payloadBytes);\n+    assertTrue(EndToEndChecksumHandler.validateChecksum(computed, payloadBytes));\n+  }\n+\n+  @Test\n+  public void validateChecksum_incorrectChecksum() {\n+    String computed = EndToEndChecksumHandler.computeChecksum(\"random string\".getBytes(UTF_8));\n+    assertFalse(EndToEndChecksumHandler.validateChecksum(computed, payloadBytes));\n+  }\n+\n+  @Test\n+  public void validateChecksum_nullChecksum() {\n+    assertFalse(EndToEndChecksumHandler.validateChecksum(null, payloadBytes));\n+  }\n+\n+  @Test\n+  public void validateChecksum_emptyChecksum() {\n+    assertFalse(EndToEndChecksumHandler.validateChecksum(\"\", payloadBytes));\n+  }\n+\n+  @Test\n+  public void validateChecksum_nullPayload() {\n+    assertFalse(EndToEndChecksumHandler.validateChecksum(\"foo\", null));\n+  }\n+\n+  @Test\n+  public void validateChecksum_emptyPayload() {\n+    assertFalse(EndToEndChecksumHandler.validateChecksum(\"foo\", new byte[0]));\n+  }\n+\n+  @Test\n+  public void computeChecksum_nullInputBytes() {\n+    assertNull(EndToEndChecksumHandler.computeChecksum(null));\n+  }\n+\n+  @Test\n+  public void computeChecksum_emptyArrayForInputBytes() {\n+    assertNull(EndToEndChecksumHandler.computeChecksum(new byte[0]));\n+  }\n+}"
  },
  {
    "sha": "377f92d8cc5dd5c3015b704819109270692bb358",
    "filename": "java/datastore/src/test/java/com/google/datastore/v1/client/RemoteRpcTest.java",
    "status": "modified",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/blob/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/test/java/com/google/datastore/v1/client/RemoteRpcTest.java",
    "raw_url": "https://github.com/GoogleCloudPlatform/google-cloud-datastore/raw/42d6effdc733d4b813aeae7c3ebdaff2ba889fb7/java/datastore/src/test/java/com/google/datastore/v1/client/RemoteRpcTest.java",
    "contents_url": "https://api.github.com/repos/GoogleCloudPlatform/google-cloud-datastore/contents/java/datastore/src/test/java/com/google/datastore/v1/client/RemoteRpcTest.java?ref=42d6effdc733d4b813aeae7c3ebdaff2ba889fb7",
    "patch": "@@ -16,13 +16,19 @@\n package com.google.datastore.v1.client;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n+import com.google.api.client.http.HttpRequest;\n import com.google.api.client.http.HttpTransport;\n import com.google.api.client.http.LowLevelHttpRequest;\n import com.google.api.client.http.LowLevelHttpResponse;\n+import com.google.api.client.http.protobuf.ProtoHttpContent;\n import com.google.api.client.util.Charsets;\n import com.google.datastore.v1.BeginTransactionResponse;\n+import com.google.datastore.v1.RollbackRequest;\n import com.google.protobuf.ByteString;\n+import com.google.protobuf.MessageLite;\n import com.google.rpc.Code;\n import com.google.rpc.Status;\n import java.io.ByteArrayInputStream;\n@@ -132,6 +138,45 @@ public void testGzip() throws IOException, DatastoreException {\n     assertEquals(-1, injectedTestValues.inputStream.read());\n   }\n \n+  @Test\n+  public void testHttpHeaders_expectE2eChecksumHeader() throws IOException {\n+    // Enable E2E-Checksum system env variable\n+    RemoteRpc.setSystemEnvE2EChecksum(true);\n+    MessageLite request = RollbackRequest.newBuilder()\n+        .setTransaction(ByteString.copyFromUtf8(\"project-id\"))\n+        .build();\n+    RemoteRpc rpc = newRemoteRpc(new InjectedTestValues(gzip(newBeginTransactionResponse()),\n+        new byte[1], true));\n+    HttpRequest httpRequest = rpc.getClient().buildPostRequest(rpc.resolveURL(\"blah\"),\n+        new ProtoHttpContent(request));\n+    rpc.setHeaders(request, httpRequest);\n+    assertNotNull(httpRequest.getHeaders()\n+        .getFirstHeaderStringValue(RemoteRpc.API_FORMAT_VERSION_HEADER));\n+    // Expect to find e2e-checksum header\n+    String header = httpRequest.getHeaders().getFirstHeaderStringValue(\n+        EndToEndChecksumHandler.HTTP_REQUEST_CHECKSUM_HEADER);\n+    assertEquals(32, header.length());\n+  }\n+\n+  @Test\n+  public void testHttpHeaders_doNotExpectE2eChecksumHeader() throws IOException {\n+    // disable E2E-Checksum system env variable\n+    RemoteRpc.setSystemEnvE2EChecksum(false);\n+    MessageLite request = RollbackRequest.newBuilder()\n+        .setTransaction(ByteString.copyFromUtf8(\"project-id\"))\n+        .build();\n+    RemoteRpc rpc = newRemoteRpc(new InjectedTestValues(gzip(newBeginTransactionResponse()),\n+        new byte[1], true));\n+    HttpRequest httpRequest = rpc.getClient().buildPostRequest(rpc.resolveURL(\"blah\"),\n+        new ProtoHttpContent(request));\n+    rpc.setHeaders(request, httpRequest);\n+    assertNotNull(httpRequest.getHeaders()\n+        .getFirstHeaderStringValue(RemoteRpc.API_FORMAT_VERSION_HEADER));\n+    // Do not expect to find e2e-checksum header\n+    assertNull(httpRequest.getHeaders().getFirstHeaderStringValue(\n+        EndToEndChecksumHandler.HTTP_REQUEST_CHECKSUM_HEADER));\n+  }\n+\n   private static BeginTransactionResponse newBeginTransactionResponse() {\n     return BeginTransactionResponse.newBuilder()\n         .setTransaction(ByteString.copyFromUtf8(\"blah-blah-blah\"))"
  }
]
