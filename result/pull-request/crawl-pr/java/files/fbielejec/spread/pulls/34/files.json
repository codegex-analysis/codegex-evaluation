[
  {
    "sha": "2ad5fbf17bce38ec7dcd7187de46a839094512e9",
    "filename": "shadow-cljs.edn",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/shadow-cljs.edn",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/shadow-cljs.edn",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/shadow-cljs.edn?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -11,6 +11,7 @@\n   [day8.re-frame/async-flow-fx \"0.1.0\"]\n   [day8.re-frame/forward-events-fx \"0.0.6\"]\n   [district0x/bide \"1.6.1\"]\n+  [haslett \"0.1.6\"]\n   [lambdaisland/uri \"1.4.54\"]\n   [mount \"0.1.16\"]\n   [re-frame \"1.1.2\"]"
  },
  {
    "sha": "70ad8e9ee8c22bca07f34867503c02a19d1e0278",
    "filename": "src/clj/api/auth.clj",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/clj/api/auth.clj",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/clj/api/auth.clj",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/clj/api/auth.clj?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -65,7 +65,7 @@\n    that requires authorization\"\n   [user-id private-key]\n   (let [now     (int (/ (time/millis (time/now)) 1000)) ;; in seconds\n-        expires (+ now 60 #_2.628e6)                    ;; now + 1 month\n+        expires (+ now #_60 2.628e6)                    ;; now + 1 month\n         token   (token-encode {:private-key private-key\n                                :claims      {:iss \"spread\"\n                                              :iat now"
  },
  {
    "sha": "0c70ce2e2d9754d972c4d15868a43bc09d7bc2c1",
    "filename": "src/clj/api/server.clj",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/clj/api/server.clj",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/clj/api/server.clj",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/clj/api/server.clj?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -101,7 +101,7 @@\n            (assoc-in context [:request :lacinia-app-context :access-token] access-token))))}))\n \n (defn- ws-auth-interceptor\n-  \"Extracts acsess token from the connection parameters.\"\n+  \"Extracts access token from the connection parameters.\"\n   []\n   (interceptor\n     {:name ::ws-auth-interceptor"
  },
  {
    "sha": "c88805393bbddcbabc59ab4640d97466d8def8eb",
    "filename": "src/cljs/ui/config.cljs",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/config.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/config.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/config.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -21,7 +21,8 @@\n     :html5?        true}\n \n    :graphql\n-   {:url \"http://127.0.0.1:3001/api\"}\n+   {:ws-url \"ws://127.0.0.1:3001/ws\"\n+    :url \"http://127.0.0.1:3001/api\"}\n \n    :root-url \"http://localhost:8020\"\n "
  },
  {
    "sha": "63db018202eddfbb2bb277ed22f9af67044614d6",
    "filename": "src/cljs/ui/graphql.cljs",
    "status": "modified",
    "additions": 52,
    "deletions": 14,
    "changes": 66,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/graphql.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/graphql.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/graphql.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -1,13 +1,13 @@\n (ns ui.graphql\n-  (:require\n-   [\"axios\" :as axios]\n-   [camel-snake-kebab.core :as camel-snake]\n-   [camel-snake-kebab.extras :as camel-snake-extras]\n-   [clojure.string :as string]\n-   [re-frame.core :as re-frame]\n-   [shared.macros :refer [promise->]]\n-   [taoensso.timbre :as log]\n-   [ui.utils :refer [>evt]]))\n+  (:require [\"axios\" :as axios]\n+            [camel-snake-kebab.core :as camel-snake]\n+            [camel-snake-kebab.extras :as camel-snake-extras]\n+            [clojure.string :as string]\n+            [re-frame.core :as re-frame]\n+            [shared.macros :refer [promise->]]\n+            [taoensso.timbre :as log]\n+            [ui.utils :refer [>evt reg-empty-event-fx]]\n+            [ui.websocket-fx :as websocket]))\n \n (defn gql-name->kw [gql-name]\n   (when gql-name\n@@ -98,21 +98,59 @@\n                            (log/error \"Error during query\" {:error (js->clj (.-data response) :keywordize-keys true)})))]\n       {::query [params callback]})))\n \n+(reg-empty-event-fx ::ws-authorized)\n+\n+(re-frame/reg-event-fx\n+  ::ws-authorize\n+  [(re-frame/inject-cofx :localstorage)]\n+  (fn [{:keys [localstorage]} [_ {:keys [on-timeout]}]]\n+    (let [access-token (:access-token localstorage)]\n+      {:dispatch [::websocket/request :default\n+                  {:message\n+                   {:type    \"connection_init\"\n+                    :payload {\"Authorization\"\n+                              (str \"Bearer \" access-token)}}\n+                   :on-response [::ws-authorized]\n+                   :on-timeout  on-timeout\n+                   :timeout     3000}]})))\n+\n+(re-frame/reg-event-fx\n+  ::subscription-response\n+  (fn [cofx [_ response]]\n+    (reduce-handlers cofx (gql->clj (get-in response [:payload :data])))))\n+\n+(re-frame/reg-event-fx\n+  ::subscription\n+  (fn [_ [_ {:keys [id query variables]}]]\n+    {:dispatch [::websocket/subscribe :default\n+                (name id)\n+                {:message\n+                 {:type    \"start\"\n+                  :payload {:variables     variables\n+                            :extensions    {}\n+                            :operationName nil\n+                            :query         query}}\n+                 :on-message [::subscription-response]}]}))\n+\n (defmethod handler :default\n   [cofx k values]\n   ;; NOTE: this is the default handler that is intented for queries and mutations\n   ;; that have nothing to do besides reducing over their response values\n   (log/debug \"default handler\" {:k k})\n   (reduce-handlers cofx values))\n \n-(defmethod handler :user\n-  [{:keys [db]} _ {:user/keys [address] :as user}]\n-  (log/debug \"user handler\" user)\n-  {:db (assoc-in db [:users address] user)})\n+(defmethod handler :discrete-tree-parser-status\n+  [{:keys [db]} _ {:keys [id status]}]\n+  {:db (assoc-in db [:discrete-tree-parsers id :status] status)})\n+\n+(defmethod handler :get-authorized-user\n+  [{:keys [db]} _ {:keys [id] :as user}]\n+  {:db (-> db\n+           (assoc-in [:users :authorized-user] user)\n+           (assoc-in [:users id] user))})\n \n (defmethod handler :google-login\n   [_ _ {:keys [access-token]}]\n-  (log/debug \"google-login handler\" {:access-token access-token})\n   (re-frame/dispatch [:splash/login-success access-token]))\n \n (defmethod handler :api/error"
  },
  {
    "sha": "c860b75e2a28ae1518cb3a67398d0f66e3315913",
    "filename": "src/cljs/ui/home/events.cljs",
    "status": "modified",
    "additions": 48,
    "deletions": 4,
    "changes": 52,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/home/events.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/home/events.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/home/events.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -1,9 +1,53 @@\n (ns ui.home.events\n   (:require [re-frame.core :as re-frame]\n-            [taoensso.timbre :as log]))\n+            [taoensso.timbre :as log]\n+            [ui.graphql :as graphql]\n+            [ui.websocket-fx :as websocket]))\n \n-;; TODO : dispatch initial query (user analysis etc)\n (re-frame/reg-event-fx\n   ::initialize-page\n-  (fn [{:keys [db]}]\n-    (log/debug \"home/initialize-page\" db)))\n+  (fn [_]\n+    {:forward-events {:register    :websocket-athorized?\n+                      :events      #{::graphql/ws-authorized}\n+                      :dispatch-to [::initial-query]}}))\n+\n+(re-frame/reg-event-fx\n+  ::initial-query\n+  (fn [_]\n+    {:dispatch-n [[::graphql/query {:query\n+                                    \"query {\n+                                       getAuthorizedUser {\n+                                         id\n+                                         email\n+                                       }\n+                                     }\"}]\n+                  ;; TODO : this is for POC only, subscribe to status=QUEUED/RUNNING analysis only\n+                  [::graphql/subscription {:id        :home-page\n+                                           :query     \"subscription SubscriptionRoot($id: ID!) {\n+                                                         discreteTreeParserStatus(id: $id) {\n+                                                           id\n+                                                           status\n+                                                        }\n+                                                      }\"\n+                                           :variables {\"id\" \"60b08880-03e6-4a3f-a170-29f3c75cb43f\"}}]]}))\n+\n+(comment\n+  (re-frame/reg-event-fx\n+    ::on-message\n+    (fn [_ [_ message]]\n+      (log/debug \"home/on-message\" message)))\n+\n+  (re-frame/dispatch [::websocket/subscribe :default\n+                      \"home-page\"\n+                      {:message\n+                       {:id      \"home-page\"\n+                        :type    \"start\"\n+                        :payload {:variables     {\"Id\" \"60b08880-03e6-4a3f-a170-29f3c75cb43f\"}\n+                                  :extensions    {}\n+                                  :operationName nil\n+                                  :query         \"subscription SubscriptionRoot($Id: ID!) {\n+                                                                                   discreteTreeParserStatus(id: $Id) {\n+                                                                                     status\n+                                                                                   }\n+                                                                                 }\"}}\n+                       :on-message [:ui.home.events/on-message]}]))"
  },
  {
    "sha": "16b22ad9b277dbc18f84186f538075173463ca7a",
    "filename": "src/cljs/ui/home/page.cljs",
    "status": "modified",
    "additions": 16,
    "deletions": 4,
    "changes": 20,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/home/page.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/home/page.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/home/page.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -1,7 +1,19 @@\n (ns ui.home.page\n-  (:require [ui.router.component :refer [page]]))\n+  (:require [re-frame.core :as re-frame]\n+            [ui.router.component :refer [page]]\n+            [ui.subscriptions :as subs]))\n+\n+;; TODO : just for graphql subs POC\n+(def id \"60b08880-03e6-4a3f-a170-29f3c75cb43f\")\n \n (defmethod page :route/home []\n-  (fn []\n-    [:div\n-     [:p \"HOME\"]]))\n+  (let [authed-user (re-frame/subscribe [::subs/authorized-user])\n+        parser-status (re-frame/subscribe [::subs/discrete-tree-parser id])]\n+      (fn []\n+        (let [{:keys [email]} @authed-user\n+              {:keys [status]} @parser-status]\n+            [:div\n+             [:p \"HOME\"]\n+             [:pre (str \"current-user:\" email)]\n+             [:pre (str id \" status:\" status)]\n+             ]))))"
  },
  {
    "sha": "42429d321c7bd0cba454a39e836d992d013f086c",
    "filename": "src/cljs/ui/main.cljs",
    "status": "modified",
    "additions": 21,
    "deletions": 3,
    "changes": 24,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/main.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/main.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/main.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -1,11 +1,13 @@\n (ns ui.main\n   (:require\n+   [day8.re-frame.forward-events-fx]\n    [mount.core :as mount]\n    [re-frame.core :as re-frame]\n    [reagent.core :as r]\n    [reagent.dom :as rdom]\n    [taoensso.timbre :as log]\n    [ui.config :as config]\n+   [ui.graphql :as graphql]\n    [ui.home.events :as home-events]\n    [ui.home.page]\n    [ui.logging :as logging]\n@@ -16,9 +18,12 @@\n    [ui.splash.events :as splash-events]\n    [ui.splash.page]\n    [ui.storage]\n-   [ui.utils]))\n+   [ui.utils]\n+   [ui.websocket-fx :as websocket]\n+   ))\n \n (def functional-compiler (r/create-compiler {:function-components true}))\n+(def socket-id :default)\n \n (re-frame/reg-event-fx\n   :active-page-changed\n@@ -30,11 +35,21 @@\n         :route/home   {:dispatch [::home-events/initialize-page]}\n         nil))))\n \n+(re-frame/reg-event-fx\n+  ::ws-authorize-failed\n+  (fn [_ [_ why?]]\n+    (log/warn \"Failed to authorize websocket connection\" {:error why?})\n+    {:dispatch [::router-events/navigate :route/splash]}))\n+\n (re-frame/reg-event-fx\n   :ui/initialize\n   (fn [{:keys [db]} [_ config]]\n-    {:db             (-> db\n-                         (assoc :config config))\n+    {:db             (assoc db :config config)\n+     :dispatch       [::websocket/connect socket-id {:url        (-> config :graphql :ws-url)\n+                                                     :format     :json\n+                                                     :on-connect [::graphql/ws-authorize\n+                                                                  {:on-timeout [::ws-authorize-failed]}]\n+                                                     :protocols  [\"graphql-ws\"]}]\n      :forward-events {:register    :active-page-changed\n                       :events      #{::router-events/active-page-changed}\n                       :dispatch-to [:active-page-changed]}}))\n@@ -61,4 +76,7 @@\n   (start))\n \n (comment\n+  @(re-frame/subscribe [::websocket/status :default])\n+  (re-frame/dispatch [::graphql/ws-authorize])\n+  @(re-frame/subscribe [::websocket/open-subscriptions :default])\n   (re-frame/dispatch [::router-events/navigate :route/home]))"
  },
  {
    "sha": "dca663fe7e5a2c45e9b59164a0acac9e9c5e3cf5",
    "filename": "src/cljs/ui/router/effects.cljs",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/router/effects.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/router/effects.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/router/effects.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -18,6 +18,7 @@\n           watched-params                 (:params opts)\n           watched-query                  (:query opts)\n           [event-name name params query] event-v]\n+      ;; NOTE: not very idiomatic, can we refactor and use a referred namespace keyword?\n       (when (and (= :ui.router.events/active-page-changed event-name)\n                  (or (nil? watched-name)\n                      (and (or (keyword? watched-name)"
  },
  {
    "sha": "51eab526c15a758b02f17ad4ddc302aa9d66d09b",
    "filename": "src/cljs/ui/router/events.cljs",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/router/events.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/router/events.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/router/events.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -19,7 +19,7 @@\n   ::active-page-changed*\n   interceptors\n   (fn [{:keys [:db]} [name params query]]\n-    (if (queries/bide-router db)                            ;; Initial :on-navigate is fired before ::start\n+    (if (queries/bide-router db) ;; Initial :on-navigate is fired before ::start\n       {:dispatch [::active-page-changed name params query]}\n       {::async-flow-fx/async-flow {:first-dispatch [::do-nothing*]\n                                    :rules          [{:when     :seen?"
  },
  {
    "sha": "58bc6cea57661d6a33877be5e9f64a6257ea7092",
    "filename": "src/cljs/ui/splash/page.cljs",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/splash/page.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/splash/page.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/splash/page.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -4,7 +4,7 @@\n             [ui.router.component :refer [page]]\n             [ui.router.subs :as router.subs]\n             [ui.splash.events :as events]\n-            [ui.subs :as subs]\n+            [ui.subscriptions :as subs]\n             [ui.utils :as utils :refer [<sub >evt]]))\n \n (defmethod page :route/splash []"
  },
  {
    "sha": "8671e743ba9b945cb1d2a04dd5e1cffd4bb94b92",
    "filename": "src/cljs/ui/subs.cljs",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/fbielejec/spread/blob/52fbc375e7fbc597d1e00905728bec4e94e0d0bb/src/cljs/ui/subs.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/52fbc375e7fbc597d1e00905728bec4e94e0d0bb/src/cljs/ui/subs.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/subs.cljs?ref=52fbc375e7fbc597d1e00905728bec4e94e0d0bb",
    "patch": "@@ -1,8 +0,0 @@\n-(ns ui.subs\n-  (:require\n-   [re-frame.core :as re-frame]))\n-\n-(re-frame/reg-sub\n-  ::config\n-  (fn [db _]\n-    (get db :config)))"
  },
  {
    "sha": "553966d78ffc14863cc74b4d81713a15f10132a9",
    "filename": "src/cljs/ui/subscriptions.cljs",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/subscriptions.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/subscriptions.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/subscriptions.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -0,0 +1,34 @@\n+(ns ui.subscriptions\n+  (:require [re-frame.core :as re-frame]))\n+\n+(re-frame/reg-sub\n+  ::config\n+  (fn [db _]\n+    (get db :config)))\n+\n+(re-frame/reg-sub\n+  ::users\n+  (fn [db _]\n+    (-> db :users\n+        (dissoc :authorized-user))))\n+\n+(re-frame/reg-sub\n+  ::authorized-user\n+  (fn [db _]\n+    (-> db :users :authorized-user)))\n+\n+(re-frame/reg-sub\n+  ::discrete-tree-parsers\n+  (fn [db _]\n+    (get db :discrete-tree-parsers)))\n+\n+(re-frame/reg-sub\n+  ::discrete-tree-parser\n+  :<- [::discrete-tree-parsers]\n+  (fn [discrete-tree-parsers [_ id]]\n+    (get discrete-tree-parsers id)))\n+\n+(comment\n+  @(re-frame/subscribe [::authorized-user])\n+  @(re-frame/subscribe [::discrete-tree-parsers])\n+  @(re-frame/subscribe [::discrete-tree-parser \"60b08880-03e6-4a3f-a170-29f3c75cb43f\"]))"
  },
  {
    "sha": "3043cf5c945566322bfb9226c2db66374dc4eac3",
    "filename": "src/cljs/ui/utils.cljs",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/utils.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/utils.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/utils.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -14,6 +14,16 @@\n        (when-not (string/ends-with? s \"/\")\n          \"/\")))\n \n+(defn dissoc-in [m [k & ks]]\n+  (if ks\n+    (if (map? (get m k))\n+      (update m k #(dissoc-in % ks))\n+      m)\n+    (dissoc m k)))\n+\n+(defn concatv [& more]\n+  (vec (apply concat more)))\n+\n (defn reg-empty-event-fx [id]\n   (re-frame/reg-event-fx\n    id"
  },
  {
    "sha": "872a358abaec68cd9addd77b2b328a782128745e",
    "filename": "src/cljs/ui/websocket_fx.cljs",
    "status": "added",
    "additions": 220,
    "deletions": 0,
    "changes": 220,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/websocket_fx.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/websocket_fx.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/websocket_fx.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -0,0 +1,220 @@\n+(ns ui.websocket-fx\n+  (:require [cljs.core.async :as async]\n+            [clojure.string :as strings]\n+            [re-frame.core :as re-frame]\n+            [taoensso.timbre :as log]\n+            [ui.utils :refer [concatv dissoc-in]]\n+            [ui.ws-client :as ws-client]))\n+\n+;; NOTE: adapted from https://github.com/RutledgePaulV/websocket-fx/blob/develop/src/websocket_fx/core.cljs\n+\n+(defonce CONNECTIONS (atom {}))\n+\n+(defn get-websocket-port []\n+  (str (aget js/window \"location\" \"port\")))\n+\n+(defn get-websocket-host []\n+  (str (aget js/window \"location\" \"hostname\")))\n+\n+(defn get-websocket-proto []\n+  (let [proto (str (aget js/window \"location\" \"protocol\"))]\n+    (get {\"http:\" \"ws\" \"https:\" \"wss\"} proto)))\n+\n+(defn websocket-url []\n+  (let [proto (get-websocket-proto)\n+        host  (get-websocket-host)\n+        port  (get-websocket-port)\n+        path  \"/ws\"]\n+    (if (strings/blank? port)\n+      (str proto \"://\" host path)\n+      (str proto \"://\" host \":\" port path))))\n+\n+;; SOCKETS\n+\n+(re-frame/reg-event-fx ::connect\n+                       (fn [{:keys [db]} [_ socket-id command]]\n+                         (let [data {:status :pending :options command}]\n+                           {:db       (assoc-in db [::sockets socket-id] data)\n+                            ::connect {:socket-id socket-id :options command}})))\n+\n+(re-frame/reg-event-fx ::disconnect\n+                       (fn [{:keys [db]} [_ socket-id]]\n+                         {:db          (dissoc-in db [::sockets socket-id])\n+                          ::disconnect {:socket-id socket-id}}))\n+\n+(re-frame/reg-event-fx ::connected\n+                       (fn [{:keys [db]} [_ socket-id]]\n+                         {:db\n+                          (assoc-in db [::sockets socket-id :status] :connected)\n+                          :dispatch-n\n+                          (vec (for [sub (vals (get-in db [::sockets socket-id :subscriptions] {}))]\n+                                 [::subscribe socket-id (get sub :id) sub]))}))\n+\n+(re-frame/reg-event-fx ::disconnected\n+                       (fn [{:keys [db]} [_ socket-id cause]]\n+                         (let [options (get-in db [::sockets socket-id :options])]\n+                           {:db\n+                            (assoc-in db [::sockets socket-id :status] :reconnecting)\n+                            :dispatch-n\n+                            (vec (for [request-id (keys (get-in db [::sockets socket-id :requests] {}))]\n+                                   [::request-timeout socket-id request-id cause]))\n+                            :dispatch-later\n+                            [{:ms 2000 :dispatch [::connect socket-id options]}]})))\n+\n+;; REQUESTS\n+\n+(re-frame/reg-event-fx ::request\n+                       (fn [{:keys [db]} [_ socket-id {:keys [message timeout] :as command}]]\n+                         (let [payload (cond-> {:id (random-uuid) :proto :request :data message}\n+                                         (some? timeout) (assoc :timeout timeout))\n+                               path    [::sockets socket-id :requests (get payload :id)]]\n+                           {:db          (assoc-in db path command)\n+                            ::ws-message {:socket-id socket-id :message payload}})))\n+\n+(re-frame/reg-event-fx ::request-response\n+                       (fn [{:keys [db]} [_ socket-id request-id & more]]\n+                         (let [path    [::sockets socket-id :requests request-id]\n+                               request (get-in db path)]\n+                           (cond-> {:db (dissoc-in db path)}\n+                             (contains? request :on-response)\n+                             (assoc :dispatch (concatv (:on-response request) more))))))\n+\n+(re-frame/reg-event-fx ::request-timeout\n+                       (fn [{:keys [db]} [_ socket-id request-id & more]]\n+                         (let [path    [::sockets socket-id :requests request-id]\n+                               request (get-in db path)]\n+                           (cond-> {:db (dissoc-in db path)}\n+                             (contains? request :on-timeout)\n+                             (assoc :dispatch (concatv (:on-timeout request) more))))))\n+\n+;; SUBSCRIPTIONS\n+\n+(re-frame/reg-event-fx ::subscribe\n+                       (fn [{:keys [db]} [_ socket-id topic {:keys [message] :as command}]]\n+                         (let [path    [::sockets socket-id :subscriptions topic]\n+                               payload {:id topic :proto :subscription :data message}]\n+                           {:db          (assoc-in db path command)\n+                            ::ws-message {:socket-id socket-id :message payload}})))\n+\n+(re-frame/reg-event-fx ::subscription-message\n+                       (fn [{:keys [db]} [_ socket-id subscription-id & more]]\n+                         (let [path         [::sockets socket-id :subscriptions subscription-id]\n+                               subscription (get-in db path)]\n+                           (cond-> {}\n+                             (contains? subscription :on-message)\n+                             (assoc :dispatch (concatv (:on-message subscription) more))))))\n+\n+(re-frame/reg-event-fx ::unsubscribe\n+                       (fn [{:keys [db]} [_ socket-id subscription-id & more]]\n+                         (let [path         [::sockets socket-id :subscriptions subscription-id]\n+                               payload      {:id subscription-id :proto :subscription :close true}\n+                               subscription (get-in db path)]\n+                           (cond-> {:db (dissoc-in db path)}\n+                             (some? subscription)\n+                             (assoc ::ws-message {:socket-id socket-id :message payload})\n+                             (contains? subscription :on-close)\n+                             (assoc :dispatch (concatv (:on-close subscription) more))))))\n+\n+(re-frame/reg-event-fx ::subscription-closed\n+                       (fn [{:keys [db]} [_ socket-id subscription-id & more]]\n+                         (let [path [::sockets socket-id :subscriptions subscription-id]]\n+                           (if-some [subscription (get-in db path)]\n+                             (cond-> {:db (dissoc-in db path)}\n+                               (contains? subscription :on-close)\n+                               (assoc :dispatch (concatv (:on-close subscription) more)))))))\n+\n+;; PUSH\n+\n+(re-frame/reg-event-fx ::push\n+                       (fn [_ [_ socket-id command]]\n+                         (let [payload {:id (random-uuid) :proto :push :data command}]\n+                           {::ws-message {:socket-id socket-id :message payload}})))\n+\n+;; FX HANDLERS\n+\n+(re-frame/reg-fx\n+  ::connect\n+  (fn [{socket-id\n+        :socket-id\n+        {:keys [url protocols on-connect on-disconnect]\n+         :or   {url (websocket-url)}}\n+        :options}]\n+    (let [sink-proxy (async/chan 100)]\n+      (swap! CONNECTIONS assoc socket-id {:sink sink-proxy})\n+      (async/go\n+        (let [{:keys [socket source sink close-status]}\n+              (async/<! (ws-client/connect url {:protocols protocols}))\n+              mult (async/mult source)]\n+          (swap! CONNECTIONS assoc socket-id {:sink sink-proxy :source source :socket socket})\n+          (async/go\n+            (when-some [closed (async/<! close-status)]\n+              (re-frame/dispatch [::disconnected socket-id closed])\n+              (when (some? on-disconnect) (re-frame/dispatch on-disconnect))))\n+          (when-not (async/poll! close-status)\n+            (async/go-loop []\n+              (when-some [{:keys [id proto data close timeout]\n+                           :or   {timeout 10000}} (async/<! sink-proxy)]\n+                (cond\n+                  (#{:request} proto)\n+                  (let [xform         (filter (fn [msg]\n+                                                (or\n+                                                  ;; NOTE : lacinia does not return id with the connection_init so we must assume that this is the response to the last sent ws request\n+                                                  (= (:type msg) \"connection_ack\")\n+                                                  (= (:id msg) id))))\n+                        response-chan (async/tap mult (async/chan 1 xform))\n+                        timeout-chan  (async/timeout timeout)]\n+                    (async/go\n+                      (let [[value _] (async/alts! [timeout-chan response-chan])]\n+                        (if (some? value)\n+                          (re-frame/dispatch [::request-response socket-id id value])\n+                          (re-frame/dispatch [::request-timeout socket-id id :timeout])))))\n+\n+                  (#{:subscription} proto)\n+                  (let [xform         (filter (fn [msg]\n+                                                (or\n+                                                  (= (:id msg) id))))\n+                        response-chan (async/tap mult (async/chan 1 xform))]\n+                    (async/go-loop []\n+                      (when-some [{:keys [close] :as response} (async/<! response-chan)]\n+                        (if (true? close)\n+                          (do (async/close! response-chan)\n+                              (re-frame/dispatch [::subscription-closed socket-id id]))\n+                          (do (re-frame/dispatch [::subscription-message socket-id id response])\n+                              (recur)))))))\n+\n+                (when (if (some? close)\n+                        (async/>! sink {:id id :proto proto :close close})\n+                        (async/>! sink (merge data {:id id :proto proto})))\n+                  (recur))))\n+            (re-frame/dispatch [::connected socket-id])\n+            (when (some? on-connect) (re-frame/dispatch on-connect))))))))\n+\n+(re-frame/reg-fx\n+  ::disconnect\n+  (fn [{:keys [socket-id]}]\n+    (let [{:keys [socket]} (get (first (swap-vals! CONNECTIONS dissoc socket-id)) socket-id)]\n+      (when (some? socket) (.close socket)))))\n+\n+(re-frame/reg-fx\n+  ::ws-message\n+  (fn [{:keys [socket-id message]}]\n+    (if-some [{:keys [sink]} (get @CONNECTIONS socket-id)]\n+      (async/put! sink message)\n+      (log/error (str \"Socket with id \" socket-id \" does not exist.\")))))\n+\n+;; INTROSPECTION\n+\n+(re-frame/reg-sub\n+  ::pending-requests\n+  (fn [db [_ socket-id]]\n+    (vals (get-in db [::sockets socket-id :requests]))))\n+\n+(re-frame/reg-sub\n+  ::open-subscriptions\n+  (fn [db [_ socket-id]]\n+    (vals (get-in db [::sockets socket-id :subscriptions]))))\n+\n+(re-frame/reg-sub\n+  ::status\n+  (fn [db [_ socket-id]]\n+    (get-in db [::sockets socket-id :status])))"
  },
  {
    "sha": "9f7f59d938fcbbe72bceeb4a130eb8738e2a9863",
    "filename": "src/cljs/ui/ws_client.cljs",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/fbielejec/spread/blob/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/ws_client.cljs",
    "raw_url": "https://github.com/fbielejec/spread/raw/ed7abb7154c632bae299750561c09771266f070c/src/cljs/ui/ws_client.cljs",
    "contents_url": "https://api.github.com/repos/fbielejec/spread/contents/src/cljs/ui/ws_client.cljs?ref=ed7abb7154c632bae299750561c09771266f070c",
    "patch": "@@ -0,0 +1,66 @@\n+(ns ui.ws-client\n+  (:require [cljs.core.async :as a :refer [<!]])\n+  (:require-macros [cljs.core.async.macros :refer [go-loop]]))\n+\n+;; NOTE: adapted from https://github.com/weavejester/haslett\n+\n+(defn close\n+  \"Close a stream opened by connect.\"\n+  [stream]\n+  (.close (:socket stream) 1000 \"Closed by creator\")\n+  (:close-status stream))\n+\n+(defn connect\n+  \"Create a WebSocket to the specified URL, and returns a 'stream' map of four\n+  keys:\n+\n+    :socket       - contains the WebSocket object\n+    :close-status - a promise channel that contains the final close status\n+    :source       - a core.async channel to read from\n+    :sink         - a core.async channel to write to\n+\n+  Takes the following options:\n+\n+    :format      - a formatter from haslett.format\n+    :source      - a custom channel to use as the source\n+    :sink        - a custom channel to use as the sink\n+    :protocols   - passed to the WebSocket, a vector of protocol strings\n+    :binary-type - passed to the WebSocket, may be :blob or :arraybuffer\n+    :close-chan? - true if channels should be closed if WebSocket is closed\n+                   (defaults to true)\n+\n+  The WebSocket may either be closed directly, or by closing the\n+  stream's :sink channel.\"\n+  ([url]\n+   (connect url {}))\n+  ([url options]\n+   (let [protocols (into-array (:protocols options []))\n+         socket    (js/WebSocket. url protocols)\n+         source    (:source options (a/chan))\n+         sink      (:sink   options (a/chan))\n+         status    (a/promise-chan)\n+         return    (a/promise-chan)\n+         close?    (:close-chan? options true)\n+         stream    {:socket socket :source source :sink sink :close-status status}]\n+     (set! (.-binaryType socket) (name (:binary-type options :arraybuffer)))\n+     (set! (.-onopen socket)     (fn [_] (a/put! return stream)))\n+     (set! (.-onmessage socket)  (fn [e]\n+                                   (a/put! source (-> (.-data e)\n+                                                      js/JSON.parse\n+                                                      (js->clj :keywordize-keys true)))))\n+     (set! (.-onclose socket)    (fn [e]\n+                                   (a/put! status {:reason (.-reason e) :code (.-code e)})\n+                                   (when close? (a/close! source))\n+                                   (when close? (a/close! sink))\n+                                   (a/put! return stream)))\n+     (go-loop []\n+       (when-let [msg (<! sink)]\n+         (.send socket (js/JSON.stringify (clj->js msg)))\n+         (recur))\n+       (close stream))\n+     return)))\n+\n+(defn connected?\n+  \"Return true if the stream is currently connected.\"\n+  [{:keys [close-status]}]\n+  (nil? (a/poll! close-status)))"
  }
]
