[
  {
    "sha": "108efca475e3bfed50e02b7d6fd4db3b11f23989",
    "filename": "src/main/java/ecdar/abstractions/Query.java",
    "status": "modified",
    "additions": 25,
    "deletions": 3,
    "changes": 28,
    "blob_url": "https://github.com/Ecdar/Ecdar-GUI/blob/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/abstractions/Query.java",
    "raw_url": "https://github.com/Ecdar/Ecdar-GUI/raw/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/abstractions/Query.java",
    "contents_url": "https://api.github.com/repos/Ecdar/Ecdar-GUI/contents/src/main/java/ecdar/abstractions/Query.java?ref=e4c3371700506637bacd41ded3d8ae8c260b23fb",
    "patch": "@@ -29,6 +29,7 @@\n     private final StringProperty comment = new SimpleStringProperty(\"\");\n     private final SimpleBooleanProperty isPeriodic = new SimpleBooleanProperty(false);\n     private final StringProperty errors = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<QueryType> type = new SimpleObjectProperty<>();\n     private BackendHelper.BackendNames currentBackend;\n     private BackendThread backendThread;\n     private Consumer<Boolean> runQuery;\n@@ -106,6 +107,18 @@ public void setCurrentBackend(BackendHelper.BackendNames currentBackend) {\n         this.currentBackend = currentBackend;\n     }\n \n+    public void setType(QueryType type) {\n+        this.type.set(type);\n+    }\n+\n+    public QueryType getType() {\n+        return this.type.get();\n+    }\n+\n+    public ObjectProperty<QueryType> getTypeProperty() {\n+        return this.type;\n+    }\n+\n     private Engine engine = null;\n     private Boolean forcedCancel = false;\n \n@@ -125,7 +138,7 @@ private void initializeRunQuery() {\n \n             errors.set(\"\");\n \n-            backendThread = BackendDriverManager.getInstance(this.currentBackend).getBackendThreadForQuery(getQuery().replaceAll(\"\\\\s\", \"\") + \" \" + getIgnoredInputOutputsOnQuery(),\n+            backendThread = BackendDriverManager.getInstance(this.currentBackend).getBackendThreadForQuery(getType().getQueryName() + \": \" + getQuery().replaceAll(\"\\\\s\", \"\") + \" \" + getIgnoredInputOutputsOnQuery(),\n                     aBoolean -> {\n                         if (aBoolean) {\n                             setQueryState(QueryState.SUCCESSFUL);\n@@ -161,7 +174,7 @@ private void initializeRunQuery() {\n     public JsonObject serialize() {\n         final JsonObject result = new JsonObject();\n \n-        result.addProperty(QUERY, getQuery());\n+        result.addProperty(QUERY, getType().getQueryName() + \": \" + getQuery());\n         result.addProperty(COMMENT, getComment());\n         result.addProperty(IS_PERIODIC, isPeriodic());\n \n@@ -183,7 +196,16 @@ private JsonObject getHashMapAsJsonObject(HashMap<String, Boolean> ignoredOutput\n \n     @Override\n     public void deserialize(final JsonObject json) {\n-        setQuery(json.getAsJsonPrimitive(QUERY).getAsString());\n+        String query = json.getAsJsonPrimitive(QUERY).getAsString();\n+\n+        if(query.contains(\":\")) {\n+            String[] queryFieldFromJSON = json.getAsJsonPrimitive(QUERY).getAsString().split(\": \");\n+            setType(QueryType.fromString(queryFieldFromJSON[0]));\n+            setQuery(queryFieldFromJSON[1]);\n+        } else {\n+            setQuery(query);\n+        }\n+\n         setComment(json.getAsJsonPrimitive(COMMENT).getAsString());\n \n         if (json.has(IS_PERIODIC)) {"
  },
  {
    "sha": "2c02961d86b2a7a181a445087d965c7c2659bb77",
    "filename": "src/main/java/ecdar/abstractions/QueryType.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/Ecdar/Ecdar-GUI/blob/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/abstractions/QueryType.java",
    "raw_url": "https://github.com/Ecdar/Ecdar-GUI/raw/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/abstractions/QueryType.java",
    "contents_url": "https://api.github.com/repos/Ecdar/Ecdar-GUI/contents/src/main/java/ecdar/abstractions/QueryType.java?ref=e4c3371700506637bacd41ded3d8ae8c260b23fb",
    "patch": "@@ -0,0 +1,53 @@\n+package ecdar.abstractions;\n+\n+public enum QueryType {\n+    REFINEMENT(\"refinement\", \"<=\"),\n+    QUOTIENT(\"quotient\", \"\\\\\"),\n+    SPECIFICATION(\"specification\", \"Spec\"),\n+    IMPLEMENTATION(\"implementation\", \"Imp\"),\n+    LOCAL_CONSISTENCY(\"local-consistency\", \"lCon\"),\n+    GLOBAL_CONSISTENCY(\"global-consistency\", \"gCon\"),\n+    BISIM_MIN(\"bisim\", \"bsim\"),\n+    GET_NEW_COMPONENT(\"get-new-component\", \"get\");\n+\n+    private final String queryName;\n+    private final String symbol;\n+\n+    QueryType(String queryName, String symbol){\n+        this.queryName = queryName;\n+        this.symbol = symbol;\n+    }\n+\n+    public String getQueryName() {\n+        return queryName;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    public static QueryType fromString(String s) {\n+        switch (s.toLowerCase()) {\n+            case \"refinement\":\n+                return REFINEMENT;\n+            case \"quotient\":\n+                return QUOTIENT;\n+            case \"specification\":\n+                return SPECIFICATION;\n+            case \"implementation\":\n+                return IMPLEMENTATION;\n+            case \"consistency\":\n+            case \"local-consistency\":\n+                return LOCAL_CONSISTENCY;\n+            case \"global-consistency\":\n+                return GLOBAL_CONSISTENCY;\n+            case \"bisim\":\n+                return BISIM_MIN;\n+            case \"get\":\n+            case \"get-new-component\":\n+                return GET_NEW_COMPONENT;\n+            default:\n+                return null;\n+        }\n+    }\n+}"
  },
  {
    "sha": "99842c2d071e92b985a384518a3fb1599617b294",
    "filename": "src/main/java/ecdar/controllers/QueryController.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/Ecdar/Ecdar-GUI/blob/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/controllers/QueryController.java",
    "raw_url": "https://github.com/Ecdar/Ecdar-GUI/raw/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/controllers/QueryController.java",
    "contents_url": "https://api.github.com/repos/Ecdar/Ecdar-GUI/contents/src/main/java/ecdar/controllers/QueryController.java?ref=e4c3371700506637bacd41ded3d8ae8c260b23fb",
    "patch": "@@ -0,0 +1,70 @@\n+package ecdar.controllers;\n+\n+import com.jfoenix.controls.JFXPopup;\n+import com.jfoenix.controls.JFXRippler;\n+import com.jfoenix.controls.JFXTooltip;\n+import ecdar.abstractions.Query;\n+import ecdar.abstractions.QueryType;\n+import ecdar.presentations.DropDownMenu;\n+import ecdar.presentations.MenuElement;\n+import ecdar.utility.colors.Color;\n+import javafx.application.Platform;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.fxml.Initializable;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.text.Text;\n+import org.kordamp.ikonli.javafx.FontIcon;\n+\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.ResourceBundle;\n+\n+public class QueryController implements Initializable {\n+    public JFXRippler actionButton;\n+    public JFXRippler queryTypeExpand;\n+    public Text queryTypeSymbol;\n+    private Query query;\n+    private final Map<QueryType, SimpleBooleanProperty> queryTypeListElementsSelectedState = new HashMap<>();\n+    private final Tooltip noQueryTypeSatTooltip = new Tooltip(\"Please select a query type beneath the status icon\");\n+\n+    @Override\n+    public void initialize(URL location, ResourceBundle resources) {\n+        initializeActionButton();\n+\n+        Platform.runLater(() -> {\n+            Tooltip.install(actionButton.getParent(), noQueryTypeSatTooltip);\n+        });\n+    }\n+\n+    public void setQuery(Query query) {\n+        this.query = query;\n+        this.query.getTypeProperty().addListener(((observable, oldValue, newValue) -> {\n+            if(newValue != null) {\n+                actionButton.setDisable(false);\n+                ((FontIcon) actionButton.lookup(\"#actionButtonIcon\")).setIconColor(Color.GREY.getColor(Color.Intensity.I900));\n+                Platform.runLater(() -> {\n+                    Tooltip.uninstall(actionButton.getParent(), noQueryTypeSatTooltip);\n+                });\n+            } else {\n+                actionButton.setDisable(true);\n+                ((FontIcon) actionButton.lookup(\"#actionButtonIcon\")).setIconColor(Color.GREY.getColor(Color.Intensity.I500));\n+                Platform.runLater(() -> {\n+                    Tooltip.install(actionButton.getParent(), noQueryTypeSatTooltip);\n+                });\n+            }\n+        }));\n+    }\n+\n+    public Query getQuery() {\n+        return query;\n+    }\n+\n+    private void initializeActionButton() {\n+        actionButton.setDisable(true);\n+    }\n+\n+    public Map<QueryType, SimpleBooleanProperty> getQueryTypeListElementsSelectedState() {\n+        return queryTypeListElementsSelectedState;\n+    }\n+}"
  },
  {
    "sha": "6f845a9c1fa45636ebdf9647518189ffc9ca930d",
    "filename": "src/main/java/ecdar/presentations/QueryPresentation.java",
    "status": "modified",
    "additions": 113,
    "deletions": 53,
    "changes": 166,
    "blob_url": "https://github.com/Ecdar/Ecdar-GUI/blob/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/presentations/QueryPresentation.java",
    "raw_url": "https://github.com/Ecdar/Ecdar-GUI/raw/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/java/ecdar/presentations/QueryPresentation.java",
    "contents_url": "https://api.github.com/repos/Ecdar/Ecdar-GUI/contents/src/main/java/ecdar/presentations/QueryPresentation.java?ref=e4c3371700506637bacd41ded3d8ae8c260b23fb",
    "patch": "@@ -2,16 +2,17 @@\n \n import com.jfoenix.controls.*;\n import ecdar.Ecdar;\n-import ecdar.abstractions.Query;\n-import ecdar.abstractions.QueryState;\n+import ecdar.abstractions.*;\n import ecdar.backend.BackendDriverManager;\n import ecdar.backend.BackendHelper;\n import ecdar.backend.IBackendDriver;\n import ecdar.backend.ReveaalDriver;\n import ecdar.controllers.CanvasController;\n+import ecdar.controllers.QueryController;\n import ecdar.utility.colors.Color;\n import javafx.application.Platform;\n import javafx.beans.binding.When;\n+import javafx.beans.property.SimpleBooleanProperty;\n import javafx.geometry.Insets;\n import javafx.geometry.Pos;\n import javafx.scene.Cursor;\n@@ -27,22 +28,22 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Consumer;\n \n import static javafx.scene.paint.Color.*;\n \n public class QueryPresentation extends AnchorPane {\n \n-    private final Query query;\n     private final Tooltip tooltip = new Tooltip();\n-    private JFXRippler actionButton;\n     private Tooltip swapBackendButtonTooltip;\n     private Label currentBackendLabel;\n \n-    public QueryPresentation(final Query query) {\n-        new EcdarFXMLLoader().loadAndGetController(\"QueryPresentation.fxml\", this);\n+    private final QueryController controller;\n \n-        this.query = query;\n+    public QueryPresentation(final Query query) {\n+        controller = new EcdarFXMLLoader().loadAndGetController(\"QueryPresentation.fxml\", this);\n+        controller.setQuery(query);\n \n         initializeStateIndicator();\n         initializeProgressIndicator();\n@@ -51,18 +52,19 @@ public QueryPresentation(final Query query) {\n         initializeTextFields();\n         initializeInputOutputPaneAndAddIgnoredInputOutputs();\n         initializeSwapBackendButton();\n+        initializeMoreInformationButtonAndQueryTypeSymbol();\n     }\n \n     private void initializeTextFields() {\n         Platform.runLater(() -> {\n             final JFXTextField queryTextField = (JFXTextField) lookup(\"#query\");\n             final JFXTextField commentTextField = (JFXTextField) lookup(\"#comment\");\n \n-            queryTextField.setText(query.getQuery());\n-            commentTextField.setText(query.getComment());\n+            queryTextField.setText(controller.getQuery().getQuery());\n+            commentTextField.setText(controller.getQuery().getComment());\n \n-            query.queryProperty().bind(queryTextField.textProperty());\n-            query.commentProperty().bind(commentTextField.textProperty());\n+            controller.getQuery().queryProperty().bind(queryTextField.textProperty());\n+            controller.getQuery().commentProperty().bind(commentTextField.textProperty());\n \n \n             queryTextField.setOnKeyPressed(CanvasController.getLeaveTextAreaKeyHandler(keyEvent -> {\n@@ -88,21 +90,21 @@ private void initializeDetailsButton() {\n \n             final DropDownMenu dropDownMenu = new DropDownMenu(detailsButton);\n \n-            dropDownMenu.addToggleableListElement(\"Run Periodically\", query.isPeriodicProperty(), event -> {\n+            dropDownMenu.addToggleableListElement(\"Run Periodically\", controller.getQuery().isPeriodicProperty(), event -> {\n                 // Toggle the property\n-                query.setIsPeriodic(!query.isPeriodic());\n+                controller.getQuery().setIsPeriodic(!controller.getQuery().isPeriodic());\n                 dropDownMenu.hide();\n             });\n             dropDownMenu.addSpacerElement();\n             dropDownMenu.addClickableListElement(\"Clear Status\", event -> {\n                 // Clear the state\n-                query.setQueryState(QueryState.UNKNOWN);\n+                controller.getQuery().setQueryState(QueryState.UNKNOWN);\n                 dropDownMenu.hide();\n             });\n             dropDownMenu.addSpacerElement();\n             dropDownMenu.addClickableListElement(\"Delete\", event -> {\n                 // Remove the query\n-                Ecdar.getProject().getQueries().remove(query);\n+                Ecdar.getProject().getQueries().remove(controller.getQuery());\n                 dropDownMenu.hide();\n             });\n             detailsButton.getChildren().get(0).setOnMousePressed(event -> {\n@@ -115,13 +117,12 @@ private void initializeDetailsButton() {\n     private void initializeActionButton() {\n         Platform.runLater(() -> {\n             // Find the action icon\n-            actionButton = (JFXRippler) lookup(\"#actionButton\");\n             final FontIcon actionButtonIcon = (FontIcon) lookup(\"#actionButtonIcon\");\n \n-            actionButtonIcon.setIconColor(Color.GREY.getColor(Color.Intensity.I900));\n+            actionButtonIcon.setIconColor(Color.GREY.getColor(Color.Intensity.I500));\n \n-            actionButton.setCursor(Cursor.HAND);\n-            actionButton.setRipplerFill(Color.GREY.getColor(Color.Intensity.I500));\n+            controller.actionButton.setCursor(Cursor.HAND);\n+            controller.actionButton.setRipplerFill(Color.GREY.getColor(Color.Intensity.I500));\n \n             // Delegate that based on the query state updated the action icon\n             final Consumer<QueryState> updateIcon = (queryState) -> {\n@@ -134,16 +135,16 @@ private void initializeActionButton() {\n             };\n \n             // Update the icon initially\n-            updateIcon.accept(query.getQueryState());\n+            updateIcon.accept(controller.getQuery().getQueryState());\n \n             // Update the icon when ever the query state is updated\n-            query.queryStateProperty().addListener((observable, oldValue, newValue) -> updateIcon.accept(newValue));\n+            controller.getQuery().queryStateProperty().addListener((observable, oldValue, newValue) -> updateIcon.accept(newValue));\n \n-            actionButton.setMaskType(JFXRippler.RipplerMask.CIRCLE);\n+            controller.actionButton.setMaskType(JFXRippler.RipplerMask.CIRCLE);\n \n-            actionButton.getChildren().get(0).setOnMousePressed(event -> {\n-                if (query.getQueryState().equals(QueryState.RUNNING)) {\n-                    query.cancel();\n+            controller.actionButton.getChildren().get(0).setOnMousePressed(event -> {\n+                if (controller.getQuery().getQueryState().equals(QueryState.RUNNING)) {\n+                    controller.getQuery().cancel();\n                 } else {\n                     runQuery();\n                 }\n@@ -157,7 +158,7 @@ private void initializeProgressIndicator() {\n             final JFXSpinner progressIndicator = (JFXSpinner) lookup(\"#progressIndicator\");\n \n             // If the query is running show the indicator, otherwise hide it\n-            progressIndicator.visibleProperty().bind(new When(query.queryStateProperty().isEqualTo(QueryState.RUNNING)).then(true).otherwise(false));\n+            progressIndicator.visibleProperty().bind(new When(controller.getQuery().queryStateProperty().isEqualTo(QueryState.RUNNING)).then(true).otherwise(false));\n         });\n     }\n \n@@ -166,6 +167,7 @@ private void initializeStateIndicator() {\n             // Find the state indicator from the inflated xml\n             final StackPane stateIndicator = (StackPane) lookup(\"#stateIndicator\");\n             final FontIcon statusIcon = (FontIcon) stateIndicator.lookup(\"#statusIcon\");\n+            final FontIcon queryTypeExpandIcon = (FontIcon) stateIndicator.lookup(\"#queryTypeExpandIcon\");\n \n             // Delegate that based on a query state updates tooltip of the query\n             final Consumer<QueryState> updateToolTip = (queryState) -> {\n@@ -174,7 +176,7 @@ private void initializeStateIndicator() {\n                 } else if (queryState.getStatusCode() == 3) {\n                     this.tooltip.setText(\"The query has not been executed yet\");\n                 } else {\n-                    this.tooltip.setText(query.getCurrentErrors());\n+                    this.tooltip.setText(controller.getQuery().getCurrentErrors());\n                 }\n             };\n \n@@ -197,30 +199,42 @@ private void initializeStateIndicator() {\n                     ));\n                 }\n \n-                statusIcon.setIconColor(new javafx.scene.paint.Color(1, 1, 1, 1));\n-                statusIcon.setIconLiteral(\"gmi-\" + queryState.getIconCode().toString().toLowerCase().replace('_', '-'));\n+                setStatusIndicatorContentColor(new javafx.scene.paint.Color(1, 1, 1, 1), statusIcon, queryTypeExpandIcon, queryState);\n \n                 if (queryState.equals(QueryState.RUNNING) || queryState.equals(QueryState.UNKNOWN)) {\n-                    statusIcon.setIconColor(new javafx.scene.paint.Color(0.75, 0.75, 0.75, 1));\n+                    setStatusIndicatorContentColor(Color.GREY.getColor(Color.Intensity.I700), statusIcon, queryTypeExpandIcon, null);\n                 }\n \n                 // The tooltip is updated here to handle all cases that are not syntax error\n                 updateToolTip.accept(queryState);\n             };\n \n             // Update the initial color\n-            updateStateIndicator.accept(query.getQueryState());\n+            updateStateIndicator.accept(controller.getQuery().getQueryState());\n \n             // Ensure that the color is updated when ever the query state is updated\n-            query.queryStateProperty().addListener((observable, oldValue, newValue) -> updateStateIndicator.accept(newValue));\n+            controller.getQuery().queryStateProperty().addListener((observable, oldValue, newValue) -> updateStateIndicator.accept(newValue));\n \n             // Ensure that the tooltip is updated when new errors are added\n-            query.errors().addListener((observable, oldValue, newValue) -> updateToolTip.accept(query.getQueryState()));\n+            controller.getQuery().errors().addListener((observable, oldValue, newValue) -> updateToolTip.accept(controller.getQuery().getQueryState()));\n \n-            Tooltip.install(stateIndicator, this.tooltip);\n+            // Installing the tooltip on the statusIcon itself scales the tooltip unexpectedly, hence its parent StackPane is used\n+            Tooltip.install(statusIcon.getParent(), this.tooltip);\n+\n+            controller.queryTypeSymbol.setText(controller.getQuery() != null && controller.getQuery().getType() != null ? controller.getQuery().getType().getSymbol() : \"---\");\n         });\n     }\n \n+    private void setStatusIndicatorContentColor(javafx.scene.paint.Color color, FontIcon statusIcon, FontIcon queryTypeExpandIcon, QueryState queryState) {\n+        statusIcon.setIconColor(color);\n+        controller.queryTypeSymbol.setFill(color);\n+        queryTypeExpandIcon.setIconColor(color);\n+\n+        if(queryState != null) {\n+            statusIcon.setIconLiteral(\"gmi-\" + queryState.getIconCode().toString().toLowerCase().replace('_', '-'));\n+        }\n+    }\n+\n     private void initializeInputOutputPaneAndAddIgnoredInputOutputs() {\n         Platform.runLater(() -> {\n             final TitledPane inputOutputPane = (TitledPane) lookup(\"#inputOutputPane\");\n@@ -229,7 +243,7 @@ private void initializeInputOutputPaneAndAddIgnoredInputOutputs() {\n             final Consumer<String> changeTitledPaneVisibility = (queryString) -> updateTitlePaneVisibility(inputOutputPane, queryString);\n \n             // Run the consumer to ensure that the input/output pane is displayed for existing refinement queries\n-            changeTitledPaneVisibility.accept(query.getQuery());\n+            changeTitledPaneVisibility.accept(controller.getQuery().getQuery());\n \n             // Bind the expand icon to the expand property of the pane\n             inputOutputPane.expandedProperty().addListener((observable, oldValue, newValue) -> {\n@@ -245,12 +259,12 @@ private void initializeInputOutputPaneAndAddIgnoredInputOutputs() {\n             final JFXTextField queryTextField = (JFXTextField) lookup(\"#query\");\n             queryTextField.focusedProperty().addListener((observable, oldValue, newValue) -> {\n                 if (!newValue) {\n-                    changeTitledPaneVisibility.accept(query.getQuery());\n+                    changeTitledPaneVisibility.accept(controller.getQuery().getQuery());\n                 }\n             });\n \n             // Change visibility of input/output Pane when backend is changed for the query\n-            lookup(\"#swapBackendButton\").setOnMousePressed(event -> changeTitledPaneVisibility.accept(query.getQuery()));\n+            lookup(\"#swapBackendButton\").setOnMousePressed(event -> changeTitledPaneVisibility.accept(controller.getQuery().getQuery()));\n \n             Platform.runLater(() -> addIgnoredInputOutputsFromQuery(inputOutputPane));\n         });\n@@ -263,7 +277,7 @@ private void initiateResetInputOutputButton(TitledPane inputOutputPane, ReveaalD\n             initializeResetInputOutputPaneButton(inputOutputPane, backendDriver, resetInputOutputPaneButton);\n \n             // Get the inputs and outputs automatically, when executing a refinement query\n-            actionButton.setOnMousePressed(event -> {\n+            controller.actionButton.setOnMousePressed(event -> {\n                 // Update the ignored inputs and outputs without clearing the lists\n                 updateInputOutputs(inputOutputPane, backendDriver, false);\n             });\n@@ -318,19 +332,19 @@ private void initializeSwapBackendButton() {\n             swapBackendButton.setOnMousePressed(event -> {\n                 // Set the backend to the one not currently used and update GUI\n                 final BackendHelper.BackendNames newBackend;\n-                if (this.query.getCurrentBackend().equals(BackendHelper.BackendNames.jEcdar)) {\n+                if (this.controller.getQuery().getCurrentBackend().equals(BackendHelper.BackendNames.jEcdar)) {\n                     newBackend = BackendHelper.BackendNames.Reveaal;\n                 } else {\n                     newBackend = BackendHelper.BackendNames.jEcdar;\n                 }\n \n-                this.query.setCurrentBackend(newBackend);\n+                this.controller.getQuery().setCurrentBackend(newBackend);\n                 setSwapBackendTooltipAndLabel(newBackend);\n-                updateTitlePaneVisibility(inputOutputPane, query.getQuery());\n+                updateTitlePaneVisibility(inputOutputPane, controller.getQuery().getQuery());\n             });\n \n             swapBackendButtonTooltip = new Tooltip();\n-            setSwapBackendTooltipAndLabel(this.query.getCurrentBackend());\n+            setSwapBackendTooltipAndLabel(this.controller.getQuery().getCurrentBackend());\n             JFXTooltip.install(swapBackendButton, swapBackendButtonTooltip);\n         });\n     }\n@@ -339,7 +353,7 @@ private void updateTitlePaneVisibility(TitledPane inputOutputPane, String queryS\n         final IBackendDriver backendDriver;\n \n         // Check if the query is a refinement and that the engine is set to Reveaal\n-        if (queryString.startsWith(\"refinement\") && (backendDriver = BackendDriverManager.getInstance(this.query.getCurrentBackend())) instanceof ReveaalDriver) {\n+        if (queryString.startsWith(\"refinement\") && (backendDriver = BackendDriverManager.getInstance(this.controller.getQuery().getCurrentBackend())) instanceof ReveaalDriver) {\n             initiateResetInputOutputButton(inputOutputPane, (ReveaalDriver) backendDriver);\n \n             // Make the input/output pane visible\n@@ -355,20 +369,20 @@ private void updateInputOutputs(TitledPane inputOutputPane, ReveaalDriver backen\n         final VBox outputBox = (VBox) inputOutputPane.lookup(\"#outputBox\");\n \n         // Get inputs and outputs\n-        Pair<ArrayList<String>, ArrayList<String>> inputOutputs = backendDriver.getInputOutputs(query.getQuery());\n+        Pair<ArrayList<String>, ArrayList<String>> inputOutputs = backendDriver.getInputOutputs(controller.getQuery().getQuery());\n \n         if (shouldResetSelections) {\n             // Reset selections for ignored inputs and outputs\n             clearIgnoredInputsAndOutputs(inputBox, outputBox);\n         }\n \n-        addNewElementsToMap(inputOutputs.getKey(), query.ignoredInputs, inputBox);\n-        addNewElementsToMap(inputOutputs.getValue(), query.ignoredOutputs, outputBox);\n+        addNewElementsToMap(inputOutputs.getKey(), controller.getQuery().ignoredInputs, inputBox);\n+        addNewElementsToMap(inputOutputs.getValue(), controller.getQuery().ignoredOutputs, outputBox);\n     }\n \n     private void clearIgnoredInputsAndOutputs(VBox inputBox, VBox outputBox) {\n-        query.ignoredInputs.clear();\n-        query.ignoredOutputs.clear();\n+        controller.getQuery().ignoredInputs.clear();\n+        controller.getQuery().ignoredOutputs.clear();\n \n         Platform.runLater(() -> {\n             inputBox.getChildren().clear();\n@@ -449,13 +463,13 @@ private void addIgnoredInputOutputsFromQuery(TitledPane inputOutputPane) {\n         final VBox outputBox = (VBox) inputOutputPane.lookup(\"#outputBox\");\n \n         // Add inputs as toggles in the GUI\n-        for (Map.Entry<String, Boolean> entry : query.ignoredInputs.entrySet()) {\n-            addInputOrOutput(entry.getKey(), entry.getValue(), query.ignoredInputs, inputBox);\n+        for (Map.Entry<String, Boolean> entry : controller.getQuery().ignoredInputs.entrySet()) {\n+            addInputOrOutput(entry.getKey(), entry.getValue(), controller.getQuery().ignoredInputs, inputBox);\n         }\n \n         // Add outputs as toggles in the GUI\n-        for (Map.Entry<String, Boolean> entry : query.ignoredOutputs.entrySet()) {\n-            addInputOrOutput(entry.getKey(), entry.getValue(), query.ignoredOutputs, outputBox);\n+        for (Map.Entry<String, Boolean> entry : controller.getQuery().ignoredOutputs.entrySet()) {\n+            addInputOrOutput(entry.getKey(), entry.getValue(), controller.getQuery().ignoredOutputs, outputBox);\n         }\n     }\n \n@@ -471,7 +485,53 @@ private void setSwapBackendTooltipAndLabel(BackendHelper.BackendNames backend) {\n         currentBackendLabel.setText((isReveaal ? \"Reveaal\" : \"jEcdar\"));\n     }\n \n+    private void initializeMoreInformationButtonAndQueryTypeSymbol() {\n+        Platform.runLater(() -> {\n+            controller.queryTypeExpand.setVisible(true);\n+            controller.queryTypeExpand.setMaskType(JFXRippler.RipplerMask.RECT);\n+            controller.queryTypeExpand.setPosition(JFXRippler.RipplerPos.BACK);\n+            controller.queryTypeExpand.setRipplerFill(Color.GREY_BLUE.getColor(Color.Intensity.I500));\n+\n+            final DropDownMenu queryTypeDropDown = new DropDownMenu(controller.queryTypeExpand);\n+\n+            queryTypeDropDown.addListElement(\"Query Type\");\n+            QueryType[] queryTypes = QueryType.values();\n+            for (QueryType type : queryTypes) {\n+                addQueryTypeListElement(type, queryTypeDropDown);\n+            }\n+\n+            controller.queryTypeExpand.setOnMousePressed((e) -> {\n+                e.consume();\n+                queryTypeDropDown.show(JFXPopup.PopupVPosition.TOP, JFXPopup.PopupHPosition.LEFT, 16, 64);\n+            });\n+\n+            controller.queryTypeSymbol.setText(controller.getQuery() != null && controller.getQuery().getType() != null ? controller.getQuery().getType().getSymbol() : \"---\");\n+        });\n+    }\n+\n+    private void addQueryTypeListElement(final QueryType type, final DropDownMenu dropDownMenu) {\n+        MenuElement listElement = new MenuElement(type.getQueryName() + \" [\" + type.getSymbol() + \"]\", \"gmi-done\", mouseEvent -> {\n+            controller.getQuery().setType(type);\n+            controller.queryTypeSymbol.setText(type.getSymbol());\n+            dropDownMenu.hide();\n+\n+            Set<Map.Entry<QueryType, SimpleBooleanProperty>> queryTypesSelected = controller.getQueryTypeListElementsSelectedState().entrySet();\n+\n+            // Reflect the selection on the dropdown menu\n+            for(Map.Entry<QueryType, SimpleBooleanProperty> pair : queryTypesSelected) {\n+                pair.getValue().set(pair.getKey().equals(type));\n+            }\n+        });\n+\n+        // Add boolean to the element to handle selection\n+        SimpleBooleanProperty selected = new SimpleBooleanProperty(controller.getQuery().getType() != null && controller.getQuery().getType().getSymbol().equals(type.getSymbol()));\n+        controller.getQueryTypeListElementsSelectedState().put(type, selected);\n+        listElement.setToggleable(selected);\n+\n+        dropDownMenu.addMenuElement(listElement);\n+    }\n+\n     private void runQuery() {\n-        query.run();\n+        controller.getQuery().run();\n     }\n }"
  },
  {
    "sha": "e685677a366f80949a2573b9274acea565046af0",
    "filename": "src/main/resources/ecdar/main.css",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/Ecdar/Ecdar-GUI/blob/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/resources/ecdar/main.css",
    "raw_url": "https://github.com/Ecdar/Ecdar-GUI/raw/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/resources/ecdar/main.css",
    "contents_url": "https://api.github.com/repos/Ecdar/Ecdar-GUI/contents/src/main/resources/ecdar/main.css?ref=e4c3371700506637bacd41ded3d8ae8c260b23fb",
    "patch": "@@ -227,9 +227,8 @@\n \t-fx-padding: 0 0 0 -10;\n }\n \n-.titled-pane > .content\n-{\n+.titled-pane > .content {\n \t-fx-background-color: TRANSPARENT;\n \t-fx-padding: 0 -1 -1 -1 ;\n \t-fx-background-insets: 0 0 0 0;\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "950c4bdc078afdc2f6a35ab33337dff4c480c7a5",
    "filename": "src/main/resources/ecdar/presentations/QueryPresentation.fxml",
    "status": "modified",
    "additions": 15,
    "deletions": 5,
    "changes": 20,
    "blob_url": "https://github.com/Ecdar/Ecdar-GUI/blob/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/resources/ecdar/presentations/QueryPresentation.fxml",
    "raw_url": "https://github.com/Ecdar/Ecdar-GUI/raw/e4c3371700506637bacd41ded3d8ae8c260b23fb/src/main/resources/ecdar/presentations/QueryPresentation.fxml",
    "contents_url": "https://api.github.com/repos/Ecdar/Ecdar-GUI/contents/src/main/resources/ecdar/presentations/QueryPresentation.fxml?ref=e4c3371700506637bacd41ded3d8ae8c260b23fb",
    "patch": "@@ -9,7 +9,7 @@\n <?import javafx.scene.control.Label?>\n <fx:root xmlns:fx=\"http://javafx.com/fxml/1\"\n          xmlns=\"http://javafx.com/javafx/8.0.76-ea\"\n-         type=\"AnchorPane\">\n+         type=\"AnchorPane\" fx:controller=\"ecdar.controllers.QueryController\">\n     <fx:define>\n         <!--Used for both the statusIndicator and the left anchor for elements to the right of the statusIndicator-->\n         <Double fx:id=\"STATUS_INDICATOR_WIDTH\" fx:value=\"50\"/>\n@@ -21,8 +21,18 @@\n     <!--If this shows an error, ignore it... It is an IDE issue, not a code issue-->\n     <StackPane id=\"stateIndicator\" prefWidth=\"${STATUS_INDICATOR_WIDTH - 5}\" AnchorPane.topAnchor=\"0\"\n                AnchorPane.leftAnchor=\"0\" minHeight=\"114\" maxHeight=\"114\">\n+        <JFXRippler fx:id=\"queryTypeExpand\" maxHeight=\"20\">\n+            <HBox translateY=\"40\" alignment=\"CENTER_RIGHT\">\n+                <StackPane alignment=\"CENTER_LEFT\">\n+                    <Text fx:id=\"queryTypeSymbol\" style=\"-fx-font-size: 11; -fx-text-alignment: left;\"/>\n+                </StackPane>\n+                <StackPane minWidth=\"15\" maxWidth=\"15\">\n+                    <FontIcon id=\"queryTypeExpandIcon\" iconLiteral=\"gmi-expand-more\" iconSize=\"18\"/>\n+                </StackPane>\n+            </HBox>\n+        </JFXRippler>\n         <StackPane minWidth=\"40\" maxWidth=\"40\" minHeight=\"40\" maxHeight=\"40\">\n-            <FontIcon id=\"statusIcon\" iconLiteral=\"gmi-hourglass-full\" iconSize=\"24\" iconColor=\"white\"/>\n+            <FontIcon id=\"statusIcon\" iconLiteral=\"gmi-hourglass-full\" iconSize=\"24\"/>\n         </StackPane>\n     </StackPane>\n \n@@ -52,7 +62,7 @@\n                 <StackPane>\n                     <JFXSpinner id=\"progressIndicator\" radius=\"20\"/>\n \n-                    <JFXRippler id=\"actionButton\">\n+                    <JFXRippler fx:id=\"actionButton\">\n                         <StackPane minWidth=\"40\" maxWidth=\"40\" minHeight=\"40\" maxHeight=\"40\">\n                             <FontIcon id=\"actionButtonIcon\" iconLiteral=\"gmi-play-arrow\" iconSize=\"24\"/>\n                         </StackPane>\n@@ -68,10 +78,10 @@\n                 </JFXRippler>\n             </HBox>\n             <StackPane AnchorPane.leftAnchor=\"144\" AnchorPane.topAnchor=\"0\" AnchorPane.bottomAnchor=\"0\">\n-                <JFXRippler fx:id=\"swapBackendButton\">\n+                <JFXRippler id=\"swapBackendButton\">\n                     <VBox alignment=\"CENTER\" minWidth=\"40\" minHeight=\"40\">\n                         <FontIcon iconLiteral=\"gmi-swap-horiz\" iconSize=\"18\"/>\n-                        <Label fx:id=\"currentBackendLabel\"/>\n+                        <Label id=\"currentBackendLabel\"/>\n                     </VBox>\n                 </JFXRippler>\n             </StackPane>"
  }
]
