[
  {
    "sha": "4e1814d88171c1df18a08313f06ca1c51b1fed99",
    "filename": "g11n-ws/modules/md-service-i18n-l2/src/main/java/com/vmware/i18n/l2/service/pattern/PatternServiceImpl.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/vmware/singleton/blob/5d155ff207a844a7108bc5401dd985d71a443842/g11n-ws/modules/md-service-i18n-l2/src/main/java/com/vmware/i18n/l2/service/pattern/PatternServiceImpl.java",
    "raw_url": "https://github.com/vmware/singleton/raw/5d155ff207a844a7108bc5401dd985d71a443842/g11n-ws/modules/md-service-i18n-l2/src/main/java/com/vmware/i18n/l2/service/pattern/PatternServiceImpl.java",
    "contents_url": "https://api.github.com/repos/vmware/singleton/contents/g11n-ws/modules/md-service-i18n-l2/src/main/java/com/vmware/i18n/l2/service/pattern/PatternServiceImpl.java?ref=5d155ff207a844a7108bc5401dd985d71a443842",
    "patch": "@@ -284,10 +284,11 @@ private void removeData(Map<String, Object> patternMap, List<String> scopeFilter\n \t\tString scopeFilter = scopeFilters.get(index);\n \t\tMap<String, Object> patternMap = new HashMap<>();\n \n-        originPatternMap = (Map<String, Object>) originPatternMap.get(scopeFilter);\n-\t\tif ((index == scopeFilters.size() - 1) || (CommonUtil.isEmpty(originPatternMap))) {\n-\t\t\tpatternMap.put(scopeFilter, originPatternMap);\n+\t\t//The data type of the last node may not Map, so can't put line 290 before below if statement, or bug https://github.com/vmware/singleton/issues/1037 will appear.\n+\t\tif ((index == scopeFilters.size() - 1) || (CommonUtil.isEmpty(originPatternMap.get(scopeFilter)))) {\n+\t\t\tpatternMap.put(scopeFilter, originPatternMap.get(scopeFilter));\n \t\t} else {\n+\t\t\toriginPatternMap = (Map<String, Object>) originPatternMap.get(scopeFilter);\n \t\t\tpatternMap.put(scopeFilter, getData(originPatternMap, scopeFilters, index + 1));\n \t\t}\n \t\treturn patternMap;"
  },
  {
    "sha": "6c8fe618c92c21412467feef034ff3d0484cdf66",
    "filename": "g11n-ws/vip-manager-i18n/src/test/java/com/vmware/vip/i18n/api/v2/formatting/pattern/FormattingPatternAPITest.java",
    "status": "modified",
    "additions": 60,
    "deletions": 4,
    "changes": 64,
    "blob_url": "https://github.com/vmware/singleton/blob/5d155ff207a844a7108bc5401dd985d71a443842/g11n-ws/vip-manager-i18n/src/test/java/com/vmware/vip/i18n/api/v2/formatting/pattern/FormattingPatternAPITest.java",
    "raw_url": "https://github.com/vmware/singleton/raw/5d155ff207a844a7108bc5401dd985d71a443842/g11n-ws/vip-manager-i18n/src/test/java/com/vmware/vip/i18n/api/v2/formatting/pattern/FormattingPatternAPITest.java",
    "contents_url": "https://api.github.com/repos/vmware/singleton/contents/g11n-ws/vip-manager-i18n/src/test/java/com/vmware/vip/i18n/api/v2/formatting/pattern/FormattingPatternAPITest.java?ref=5d155ff207a844a7108bc5401dd985d71a443842",
    "patch": "@@ -23,8 +23,8 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = BootApplication.class)\n public class FormattingPatternAPITest {\n-    public static final String PatternAPIURI = \"/i18n/api/v2/formatting/patterns/locales/en-US?scope=dates,numbers\";\n-    public static final String PatternAPIURL = \"/i18n/api/v2/formatting/patterns?language=fr&region=FR&scope=dates,numbers\";\n+    public static final String LocalePatternAPIURI = \"/i18n/api/v2/formatting/patterns/locales/{locale}\";\n+    public static final String LanguageRegionPatternAPIURI = \"/i18n/api/v2/formatting/patterns\";\n \n     @Autowired\n     private WebApplicationContext webApplicationContext;\n@@ -38,27 +38,83 @@ public void authentication() throws Exception {\n \n     @Test\n     public void testGetI18nPattern() throws Exception {\n+        String locale = \"en-US\";\n         String cateStr = \"dates,numbers\";\n-        String json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, PatternAPIURI);\n+\n+        //Test with valid 'scope' parameter\n+        String url = new StringBuilder(\n+                LocalePatternAPIURI.replace(\"{locale}\", locale))\n+                .append(\"?scope=\").append(cateStr)\n+                .toString();\n+        String json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, url);\n         Map<String, Object> dataMap = (Map<String, Object>) JSONUtils.getMapFromJson(json).get(\"data\");\n         Map<String, Object> catesMap = (Map<String, Object>) dataMap.get(\"categories\");\n         String[] catesArr = cateStr.split(\",\");\n         for (String key : catesArr) {\n             Assert.assertNotNull(catesMap.get(key));\n         }\n+\n+        //Test with invalid 'scope' parameter\n+        url = new StringBuilder(\n+                LocalePatternAPIURI.replace(\"{locale}\", locale))\n+                .append(\"?scope=\").append(\"datess,numbers\")\n+                .toString();\n+        json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, url);\n+        Map<String, Object> respMap = (Map<String, Object>) JSONUtils.getMapFromJson(json).get(\"response\");\n+        Assert.assertEquals(400L, respMap.get(\"code\"));\n+\n+        //Test with valid 'scope' and 'scopeFilter' parameter\n+        url = new StringBuilder(\n+                LocalePatternAPIURI.replace(\"{locale}\", locale))\n+                .append(\"?scope=\").append(cateStr)\n+                .append(\"&scopeFilter=\").append(\"dates_dateFormats_short\")\n+                .toString();\n+        json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, url);\n+        respMap = (Map<String, Object>) JSONUtils.getMapFromJson(json).get(\"response\");\n+        Assert.assertEquals(200L, respMap.get(\"code\"));\n+\n+        //Test with valid 'scope' and invalid 'scopeFilter' parameter\n+        url = new StringBuilder(\n+                LocalePatternAPIURI.replace(\"{locale}\", locale))\n+                .append(\"?scope=\").append(cateStr)\n+                .append(\"&scopeFilter=\").append(\"dates_a,c_d\")\n+                .toString();\n+        json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, url);\n+        respMap = (Map<String, Object>) JSONUtils.getMapFromJson(json).get(\"response\");\n+        Assert.assertEquals(200L, respMap.get(\"code\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testGetI18nPatternWithLanguageAndRegion() throws Exception {\n+        String language = \"fr\";\n+        String region = \"FR\";\n         String cateStr = \"dates,numbers\";\n-        String json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, PatternAPIURL);\n+\n+        //Test with valid 'scope' parameter\n+        String url = new StringBuilder(LanguageRegionPatternAPIURI)\n+                .append(\"?language=\").append(language)\n+                .append(\"&region=\").append(region)\n+                .append(\"&scope=\").append(cateStr)\n+                .toString();\n+        String json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, url);\n         Map<String, Object> dataMap = (Map<String, Object>) JSONUtils.getMapFromJson(json).get(\"data\");\n         Map<String, Object> catesMap = (Map<String, Object>) dataMap.get(\"categories\");\n         String[] catesArr = cateStr.split(\",\");\n         for (String key : catesArr) {\n             Assert.assertNotNull(catesMap.get(key));\n         }\n+\n+        //Test with valid 'scope' and 'scopeFilter' parameter\n+        url = new StringBuilder(LanguageRegionPatternAPIURI)\n+                .append(\"?language=\").append(language)\n+                .append(\"&region=\").append(region)\n+                .append(\"&scope=\").append(cateStr)\n+                .append(\"&scopeFilter=\").append(\"dates_dateFormats_short\")\n+                .toString();\n+        json = RequestUtil.sendRequest(webApplicationContext, ConstantsForTest.GET, url);\n+        Map<String, Object> respMap = (Map<String, Object>) JSONUtils.getMapFromJson(json).get(\"response\");\n+        Assert.assertEquals(200L, respMap.get(\"code\"));\n     }\n \n }"
  }
]
