[
  {
    "sha": "081dd1d66a5cd8ad9e96d13446a8eadb2c6f9c2f",
    "filename": "docs/UserGuide.md",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/docs/UserGuide.md",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/docs/UserGuide.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/docs/UserGuide.md?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -136,16 +136,17 @@ Format: `done ORDER_INDEX`\n Example: `done 2`\n * Mark the second order in the list of orders as complete.\n \n-### Searching for customers: `search`\n+### Find customers: `findcustomer`\n \n Searches for a customer in CHIM.\n \n-Format: `search n/NAME`\n+Format: `findcustomer [n/NAME_KEYWORDS...] [p/PHONE_KEYWORDS...] [e/EMAIL_KEYWORDS...] [a/ADDRESS_KEYWORDS...] `\n * Search is case-insensitive, e.g. Betty will match betty.\n+* Search will search by given keywords as prefix, e.g. Bet will match Betty.\n \n Examples:\n-* `search n/Betty`\n-* `search n/Robin Lee`\n+* `findcustomer n/Betty`\n+* `findcustomer a/Clementi Road`\n \n ### Exiting the program: `exit`\n \n@@ -177,5 +178,5 @@ Action | Format, Examples\n **List Cheese** | `listcheese [t/CHEESE_TYPE]` <br> e.g. `listcheese t/Mozzarella`\n **List Customer** | `listcustomer`\n **Mark As Done** | `done INDEX` <br> e.g. `done 2`\n-**Search** | `search n/NAME` <br> e.g. `search n/Betty`\n+**Find Customer** | `findcustomer [n/NAME_KEYWORDS...] [p/PHONE_KEYWORDS...] [e/EMAIL_KEYWORDS...] [a/ADDRESS_KEYWORDS...]` <br> e.g. `findcustomer n/Betty`\n **Exit** | `exit`"
  },
  {
    "sha": "54f42ecf9d7ea619cb1dce74b70a9769390f1c21",
    "filename": "src/main/java/seedu/address/commons/util/ListUtil.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/commons/util/ListUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/commons/util/ListUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/commons/util/ListUtil.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,19 @@\n+package seedu.address.commons.util;\n+\n+import java.util.List;\n+\n+public class ListUtil {\n+\n+    /**\n+     * Compares two list and returns true if both lists have the same elements\n+     * (regardless of order)\n+     * @param list first list\n+     * @param otherList second list\n+     * @param <U>\n+     * @return\n+     */\n+    public static <U> boolean compareListWithoutOrder(List<U> list, List<U> otherList) {\n+        return list.containsAll(otherList) && otherList.containsAll(list);\n+    }\n+\n+}"
  },
  {
    "sha": "2e18542d0102e78a12d8673dc19dc24d0b7841c1",
    "filename": "src/main/java/seedu/address/commons/util/PredicateUtil.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/commons/util/PredicateUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/commons/util/PredicateUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/commons/util/PredicateUtil.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,61 @@\n+package seedu.address.commons.util;\n+\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+\n+import java.util.List;\n+\n+import seedu.address.model.AbstractId;\n+\n+public class PredicateUtil {\n+\n+    /**\n+     * Returns true if the string matches any of the given keywords (even as a prefix).\n+     * Uses { @code String.containsPrefixWordIgnoreCase }.\n+     *\n+     * @param string string to check against\n+     * @param keywords keywords\n+     * @return\n+     */\n+    public static boolean containsPrefixWordIgnoreCase(String string, List<String> keywords) {\n+        requireAllNonNull(string, keywords);\n+        return keywords.stream()\n+            .anyMatch(keyword -> StringUtil.containsPrefixWordIgnoreCase(string, keyword));\n+    }\n+\n+    /**\n+     * Returns the similarity score of two strings.\n+     * Strings that matches the keywords better will have a higher score.\n+     *\n+     * @param string string to check against\n+     * @param keywords keywords\n+     * @return similarity score\n+     */\n+    public static double getWordSimilarityScoreIgnoreCase(String string, List<String> keywords) {\n+        requireAllNonNull(string, keywords);\n+        return keywords.stream()\n+                .mapToDouble(keyword -> {\n+                    if (StringUtil.containsWordIgnoreCase(string, keyword)) {\n+                        return keyword.length() * keyword.length();\n+                    } else if (StringUtil.containsPrefixWordIgnoreCase(string, keyword)) {\n+                        return keyword.length();\n+                    } else {\n+                        return 0;\n+                    }\n+                }).sum();\n+    }\n+\n+    /**\n+     * Returns whether the keywords list contains the id.\n+     *\n+     * @param id id to check against\n+     * @param keywords keywords\n+     * @return\n+     */\n+    public static boolean matchIntegerId(AbstractId id, List<String> keywords) {\n+        requireAllNonNull(id, keywords);\n+        return keywords.stream()\n+            .mapToInt(x -> StringUtil.isNonZeroUnsignedInteger(x) ? Integer.parseInt(x) : -1)\n+            .anyMatch(keyword -> keyword == id.value);\n+    }\n+\n+}"
  },
  {
    "sha": "b5301eeee9c9adbadc316c3f64cd26a2a85b7950",
    "filename": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "status": "modified",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/commons/util/StringUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/commons/util/StringUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/commons/util/StringUtil.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -6,6 +6,7 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * Helper functions for handling strings.\n@@ -38,6 +39,29 @@ public static boolean containsWordIgnoreCase(String sentence, String word) {\n                 .anyMatch(preppedWord::equalsIgnoreCase);\n     }\n \n+    /**\n+     * Returns true if the {@code sentence} contains the prefix {@code word}.\n+     *   Ignores case.\n+     *   <br>examples:<pre>\n+     *       containsPrefixWordIgnoreCase(\"ABc def\", \"abc\") == true\n+     *       containsPrefixWordIgnoreCase(\"ABc def\", \"DEF\") == true\n+     *       containsPrefixWordIgnoreCase(\"ABc def\", \"AB\") == true\n+     *       containsPrefixWordIgnoreCase(\"CAB def\", \"AB\") == false\n+     *       </pre>\n+     * @param sentence cannot be null\n+     * @param word cannot be null, cannot be empty, must be a single word\n+     */\n+    public static boolean containsPrefixWordIgnoreCase(String sentence, String word) {\n+        requireNonNull(sentence);\n+        requireNonNull(word);\n+\n+        String preppedWord = word.trim().toLowerCase();\n+        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");\n+        checkArgument(preppedWord.split(\"\\\\s+\").length == 1, \"Word parameter should be a single word\");\n+\n+        return sentence.toLowerCase().matches(\".*\\\\b\" + preppedWord + \".*\");\n+    }\n+\n     /**\n      * Returns a detailed message of the t, including the stack trace.\n      */\n@@ -65,4 +89,18 @@ public static boolean isNonZeroUnsignedInteger(String s) {\n             return false;\n         }\n     }\n+\n+    public static List<String> splitToKeywordsList(String keywords) {\n+        return Arrays.asList(keywords.trim().split(\"\\\\s+\"));\n+    }\n+\n+    /**\n+     * Replaces all special characters in emails with empty spaces.\n+     * Used in find methods to extract essential keywords from emails (separated by empty space).\n+     */\n+    public static String replaceEmailSpecialCharacters(String email) {\n+        requireNonNull(email);\n+        return email.replaceAll(\"[@\\\\.]+\", \" \").trim();\n+    }\n+\n }"
  },
  {
    "sha": "8499b89fa22842448435cbbfefc5a9251350f4ca",
    "filename": "src/main/java/seedu/address/logic/commands/AddCheeseCommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/AddCheeseCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/AddCheeseCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/commands/AddCheeseCommand.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -20,7 +20,7 @@\n \n     public static final String COMMAND_WORD = \"addcheese\";\n \n-    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Adds a cheese to the address book. \"\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Adds a cheese to the address book.\\n\"\n             + \"Parameters: \"\n             + PREFIX_CHEESE_TYPE + \"CHEESE TYPE \"\n             + PREFIX_QUANTITY + \"QUANTITY \""
  },
  {
    "sha": "71a129533ee95f7187d35df841c91f0d9205eb97",
    "filename": "src/main/java/seedu/address/logic/commands/AddCustomerCommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/AddCustomerCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/AddCustomerCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/commands/AddCustomerCommand.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -18,7 +18,7 @@\n \n     public static final String COMMAND_WORD = \"addcustomer\";\n \n-    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Adds a customer to the address book. \"\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Adds a customer to the address book.\\n\"\n             + \"Parameters: \"\n             + PREFIX_NAME + \"NAME \"\n             + PREFIX_PHONE + \"PHONE \""
  },
  {
    "sha": "b76a02826ef18d23e9ab727138a71f239abd55c9",
    "filename": "src/main/java/seedu/address/logic/commands/AddOrderCommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/AddOrderCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/AddOrderCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/commands/AddOrderCommand.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -23,7 +23,7 @@\n \n     public static final String COMMAND_WORD = \"addorder\";\n \n-    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Adds an order to the address book. \"\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Adds an order to the address book.\\n\"\n             + \"Parameters: \"\n             + PREFIX_CHEESE_TYPE + \"CHEESE TYPE \"\n             + PREFIX_QUANTITY + \"QUANTITY \""
  },
  {
    "sha": "cf32479373967bffa2fdacac270b24d41e1e35eb",
    "filename": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "status": "removed",
    "additions": 0,
    "deletions": 43,
    "changes": 43,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/4b9d0acf0ba75bf1b2b65998593f8cbdb0d8d413/src/main/java/seedu/address/logic/commands/FindCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/4b9d0acf0ba75bf1b2b65998593f8cbdb0d8d413/src/main/java/seedu/address/logic/commands/FindCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/commands/FindCommand.java?ref=4b9d0acf0ba75bf1b2b65998593f8cbdb0d8d413",
    "patch": "@@ -1,43 +0,0 @@\n-package seedu.address.logic.commands;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import seedu.address.commons.core.Messages;\n-import seedu.address.model.Model;\n-import seedu.address.model.customer.NameContainsKeywordsPredicate;\n-\n-/**\n- * Finds and lists all persons in address book whose name contains any of the argument keywords.\n- * Keyword matching is case insensitive.\n- */\n-public class FindCommand extends Command {\n-\n-    public static final String COMMAND_WORD = \"find\";\n-\n-    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Finds all persons whose names contain any of \"\n-            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"\n-            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"\n-            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";\n-\n-    private final NameContainsKeywordsPredicate predicate;\n-\n-    public FindCommand(NameContainsKeywordsPredicate predicate) {\n-        this.predicate = predicate;\n-    }\n-\n-    @Override\n-    public CommandResult execute(Model model) {\n-        requireNonNull(model);\n-        model.updateFilteredCustomerList(predicate);\n-        model.setPanelToCustomerList();\n-        return new CommandResult(\n-                String.format(Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW, model.getFilteredCustomerList().size()));\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof FindCommand // instanceof handles nulls\n-                && predicate.equals(((FindCommand) other).predicate)); // state check\n-    }\n-}"
  },
  {
    "sha": "1924119986f35e32bd8fe190e1d887e837aaaeca",
    "filename": "src/main/java/seedu/address/logic/commands/FindCustomerCommand.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/FindCustomerCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/commands/FindCustomerCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/commands/FindCustomerCommand.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,59 @@\n+package seedu.address.logic.commands;\n+\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.model.Model;\n+import seedu.address.model.customer.Customer;\n+import seedu.address.model.util.predicate.CompositeFieldPredicate;\n+\n+/**\n+ * Finds and lists all persons in address book whose name contains any of the argument keywords.\n+ * Keyword matching is case insensitive.\n+ */\n+public class FindCustomerCommand extends Command {\n+\n+    public static final String COMMAND_WORD = \"findcustomer\";\n+\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Finds all customer given by any of the arguments \"\n+            + \"(e.g. names) which contains any of the specified keywords (case-insensitive) and displays them as \"\n+            + \"a list with index numbers.\\n\"\n+            + \"Parameters: \"\n+            + \"[\" + PREFIX_NAME + \"NAME_KEYWORDS...] \"\n+            + \"[\" + PREFIX_PHONE + \"PHONE_KEYWORDS...] \"\n+            + \"[\" + PREFIX_EMAIL + \"EMAIL_KEYWORDS...] \"\n+            + \"[\" + PREFIX_ADDRESS + \"ADDRESS_KEYWORDS...]\"\n+            + \"\\n\"\n+            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \" alice bob charlie\";\n+\n+    private final CompositeFieldPredicate<Customer> predicate;\n+\n+    /**\n+     * Creates a new find command\n+     * @param predicate predicate of find command\n+     */\n+    public FindCustomerCommand(CompositeFieldPredicate<Customer> predicate) {\n+        this.predicate = predicate;\n+    }\n+\n+    @Override\n+    public CommandResult execute(Model model) {\n+        requireNonNull(model);\n+        model.updateFilteredCustomerList(predicate);\n+        model.setPanelToCustomerList();\n+        return new CommandResult(\n+                String.format(Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW, model.getFilteredCustomerList().size()));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+                || (other instanceof FindCustomerCommand // instanceof handles nulls\n+                && predicate.equals(((FindCustomerCommand) other).predicate)); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "952570dcd7ebc10446edef16e2390f5b8cb46b0c",
    "filename": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/parser/AddressBookParser.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -17,7 +17,7 @@\n import seedu.address.logic.commands.DoneCommand;\n import seedu.address.logic.commands.EditCommand;\n import seedu.address.logic.commands.ExitCommand;\n-import seedu.address.logic.commands.FindCommand;\n+import seedu.address.logic.commands.FindCustomerCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCheesesCommand;\n import seedu.address.logic.commands.ListCustomersCommand;\n@@ -75,7 +75,7 @@ public Command parseCommand(String userInput) throws ParseException {\n         case ClearCommand.COMMAND_WORD:\n             return new ClearCommand();\n \n-        case FindCommand.COMMAND_WORD:\n+        case FindCustomerCommand.COMMAND_WORD:\n             return new FindCommandParser().parse(arguments);\n \n         case ListCustomersCommand.COMMAND_WORD:"
  },
  {
    "sha": "02ef7c80a1c862a2edf25626e1a946a3567f62a0",
    "filename": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "status": "modified",
    "additions": 57,
    "deletions": 11,
    "changes": 68,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/parser/FindCommandParser.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -1,32 +1,78 @@\n package seedu.address.logic.parser;\n \n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+import static seedu.address.commons.util.StringUtil.splitToKeywordsList;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n \n-import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n-import seedu.address.logic.commands.FindCommand;\n+import seedu.address.logic.commands.FindCustomerCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.customer.NameContainsKeywordsPredicate;\n+import seedu.address.model.customer.Customer;\n+import seedu.address.model.customer.predicates.CustomerAddressPredicate;\n+import seedu.address.model.customer.predicates.CustomerEmailPredicate;\n+import seedu.address.model.customer.predicates.CustomerNamePredicate;\n+import seedu.address.model.customer.predicates.CustomerPhonePredicate;\n+import seedu.address.model.util.predicate.CompositeFieldPredicateBuilder;\n \n /**\n  * Parses input arguments and creates a new FindCommand object\n  */\n-public class FindCommandParser implements Parser<FindCommand> {\n+public class FindCommandParser implements Parser<FindCustomerCommand> {\n \n     /**\n      * Parses the given {@code String} of arguments in the context of the FindCommand\n      * and returns a FindCommand object for execution.\n      * @throws ParseException if the user input does not conform the expected format\n      */\n-    public FindCommand parse(String args) throws ParseException {\n-        String trimmedArgs = args.trim();\n-        if (trimmedArgs.isEmpty()) {\n-            throw new ParseException(\n-                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));\n+    public FindCustomerCommand parse(String args) throws ParseException {\n+        ArgumentMultimap argMultimap =\n+            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);\n+\n+        if (!areAnyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)\n+            || !argMultimap.getPreamble().isEmpty()) {\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCustomerCommand.MESSAGE_USAGE));\n+        }\n+\n+        CompositeFieldPredicateBuilder<Customer> pBuilder = new CompositeFieldPredicateBuilder<>();\n+        Optional<String> nameArg = argMultimap.getValue(PREFIX_NAME);\n+        if (nameArg.isPresent()) {\n+            List<String> nameKeywords = splitToKeywordsList(nameArg.get());\n+            pBuilder.compose(new CustomerNamePredicate(nameKeywords));\n         }\n \n-        String[] nameKeywords = trimmedArgs.split(\"\\\\s+\");\n+        Optional<String> phoneArg = argMultimap.getValue(PREFIX_PHONE);\n+        if (phoneArg.isPresent()) {\n+            List<String> phoneKeywords = splitToKeywordsList(phoneArg.get());\n+            pBuilder.compose(new CustomerPhonePredicate(phoneKeywords));\n+        }\n \n-        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));\n+        Optional<String> emailArg = argMultimap.getValue(PREFIX_EMAIL);\n+        if (emailArg.isPresent()) {\n+            List<String> emailKeywords = splitToKeywordsList(emailArg.get());\n+            pBuilder.compose(new CustomerEmailPredicate(emailKeywords));\n+        }\n+\n+        Optional<String> addressArg = argMultimap.getValue(PREFIX_ADDRESS);\n+        if (addressArg.isPresent()) {\n+            List<String> addressKeywords = splitToKeywordsList(addressArg.get());\n+            pBuilder.compose(new CustomerAddressPredicate(addressKeywords));\n+        }\n+\n+        return new FindCustomerCommand(pBuilder.build());\n+    }\n+\n+    /**\n+     * Returns true if none of the prefixes contains empty {@code Optional} values in the given\n+     * {@code ArgumentMultimap}.\n+     */\n+    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {\n+        return Stream.of(prefixes).anyMatch(prefix -> argumentMultimap.getValue(prefix).isPresent());\n     }\n+\n }"
  },
  {
    "sha": "17b6455ded185e3dff9f3d96ba8a17a23740d71d",
    "filename": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/logic/parser/ParserUtil.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -242,4 +242,5 @@ public static ExpiryDate parseExpiryDate(String date) throws ParseException {\n         }\n         return new ExpiryDate(trimmedDate);\n     }\n+\n }"
  },
  {
    "sha": "99be35d23b5fe8e6657ca2f1043845d96306587a",
    "filename": "src/main/java/seedu/address/model/AbstractId.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/AbstractId.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/AbstractId.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/AbstractId.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -45,4 +45,9 @@ public int compareTo(AbstractId id) {\n         }\n         return 0;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return value;\n+    }\n }"
  },
  {
    "sha": "24b90b52f89fe55a5702a8a3baa427d67c491353",
    "filename": "src/main/java/seedu/address/model/Model.java",
    "status": "modified",
    "additions": 11,
    "deletions": 7,
    "changes": 18,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/Model.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/Model.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/Model.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -1,8 +1,9 @@\n package seedu.address.model;\n \n+import static seedu.address.model.util.predicate.FieldPredicate.getDefaultPredicate;\n+\n import java.nio.file.Path;\n import java.util.Set;\n-import java.util.function.Predicate;\n \n import javafx.collections.ObservableList;\n import seedu.address.commons.core.GuiSettings;\n@@ -13,17 +14,19 @@\n import seedu.address.model.customer.Phone;\n import seedu.address.model.order.Order;\n import seedu.address.model.order.Quantity;\n+import seedu.address.model.util.predicate.FieldPredicate;\n \n /**\n  * The API of the Model component.\n  */\n public interface Model {\n+\n     /**\n      * {@code Predicate} that always evaluate to true\n      */\n-    Predicate<Customer> PREDICATE_SHOW_ALL_CUSTOMERS = unused -> true;\n-    Predicate<Order> PREDICATE_SHOW_ALL_ORDERS = unused -> true;\n-    Predicate<Cheese> PREDICATE_SHOW_ALL_CHEESES = unused -> true;\n+    FieldPredicate<Customer> PREDICATE_SHOW_ALL_CUSTOMERS = getDefaultPredicate();\n+    FieldPredicate<Order> PREDICATE_SHOW_ALL_ORDERS = getDefaultPredicate();\n+    FieldPredicate<Cheese> PREDICATE_SHOW_ALL_CHEESES = getDefaultPredicate();\n \n     /**\n      * Replaces user prefs data with the data in {@code userPrefs}.\n@@ -181,21 +184,21 @@\n      *\n      * @throws NullPointerException if {@code predicate} is null.\n      */\n-    void updateFilteredCustomerList(Predicate<Customer> predicate);\n+    void updateFilteredCustomerList(FieldPredicate<Customer> predicate);\n \n     /**\n      * Updates the filter of the filtered order list to filter by the given {@code predicate}.\n      *\n      * @throws NullPointerException if {@code predicate} is null.\n      */\n-    void updateFilteredOrderList(Predicate<Order> predicate);\n+    void updateFilteredOrderList(FieldPredicate<Order> predicate);\n \n     /**\n      * Updates the filter of the filtered cheese list to filter by the given {@code predicate}.\n      *\n      * @throws NullPointerException if {@code predicate} is null.\n      */\n-    void updateFilteredCheeseList(Predicate<Cheese> predicate);\n+    void updateFilteredCheeseList(FieldPredicate<Cheese> predicate);\n \n     /**\n      * Sets the list panel in the UI to show the filtered customers list.\n@@ -211,4 +214,5 @@\n      * Sets the list panel in the UI to show the filtered orders list.\n      */\n     void setPanelToOrderList();\n+\n }"
  },
  {
    "sha": "88c58f0dc1fef1038b6213f3bbe97c2dd4a0a35e",
    "filename": "src/main/java/seedu/address/model/ModelManager.java",
    "status": "modified",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/ModelManager.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/ModelManager.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/ModelManager.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -5,11 +5,9 @@\n \n import java.nio.file.Path;\n import java.util.Set;\n-import java.util.function.Predicate;\n import java.util.logging.Logger;\n \n import javafx.collections.ObservableList;\n-import javafx.collections.transformation.FilteredList;\n import seedu.address.commons.core.GuiSettings;\n import seedu.address.commons.core.LogsCenter;\n import seedu.address.model.cheese.Cheese;\n@@ -19,6 +17,8 @@\n import seedu.address.model.customer.Phone;\n import seedu.address.model.order.Order;\n import seedu.address.model.order.Quantity;\n+import seedu.address.model.util.FilteredSortedList;\n+import seedu.address.model.util.predicate.FieldPredicate;\n \n /**\n  * Represents the in-memory model of the address book data.\n@@ -28,9 +28,9 @@\n \n     private final AddressBook addressBook;\n     private final UserPrefs userPrefs;\n-    private final FilteredList<Customer> filteredCustomers;\n-    private final FilteredList<Order> filteredOrders;\n-    private final FilteredList<Cheese> filteredCheeses;\n+    private final FilteredSortedList<Customer> filteredAndSortedCustomers;\n+    private final FilteredSortedList<Order> filteredAndSortedOrders;\n+    private final FilteredSortedList<Cheese> filteredAndSortedCheeses;\n \n     /**\n      * Initializes a ModelManager with the given addressBook and userPrefs.\n@@ -43,9 +43,9 @@ public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs\n \n         this.addressBook = new AddressBook(addressBook);\n         this.userPrefs = new UserPrefs(userPrefs);\n-        filteredCustomers = new FilteredList<>(this.addressBook.getCustomerList());\n-        filteredOrders = new FilteredList<>(this.addressBook.getOrderList());\n-        filteredCheeses = new FilteredList<>(this.addressBook.getCheeseList());\n+        filteredAndSortedCustomers = new FilteredSortedList<>(this.addressBook.getCustomerList());\n+        filteredAndSortedOrders = new FilteredSortedList<>(this.addressBook.getOrderList());\n+        filteredAndSortedCheeses = new FilteredSortedList<>(this.addressBook.getCheeseList());\n     }\n \n     public ModelManager() {\n@@ -208,7 +208,7 @@ public void updateCheesesStatus(Set<CheeseId> cheesesAssigned) {\n      */\n     @Override\n     public ObservableList<Customer> getFilteredCustomerList() {\n-        return filteredCustomers;\n+        return filteredAndSortedCustomers.getObservableList();\n     }\n \n     /**\n@@ -217,7 +217,7 @@ public void updateCheesesStatus(Set<CheeseId> cheesesAssigned) {\n      */\n     @Override\n     public ObservableList<Order> getFilteredOrderList() {\n-        return filteredOrders;\n+        return filteredAndSortedOrders.getObservableList();\n     }\n \n     /**\n@@ -226,25 +226,25 @@ public void updateCheesesStatus(Set<CheeseId> cheesesAssigned) {\n      */\n     @Override\n     public ObservableList<Cheese> getFilteredCheeseList() {\n-        return filteredCheeses;\n+        return filteredAndSortedCheeses.getObservableList();\n     }\n \n     @Override\n-    public void updateFilteredCustomerList(Predicate<Customer> predicate) {\n+    public void updateFilteredCustomerList(FieldPredicate<Customer> predicate) {\n         requireNonNull(predicate);\n-        filteredCustomers.setPredicate(predicate);\n+        filteredAndSortedCustomers.setModelPredicate(predicate);\n     }\n \n     @Override\n-    public void updateFilteredOrderList(Predicate<Order> predicate) {\n+    public void updateFilteredOrderList(FieldPredicate<Order> predicate) {\n         requireNonNull(predicate);\n-        filteredOrders.setPredicate(predicate);\n+        filteredAndSortedOrders.setModelPredicate(predicate);\n     }\n \n     @Override\n-    public void updateFilteredCheeseList(Predicate<Cheese> predicate) {\n+    public void updateFilteredCheeseList(FieldPredicate<Cheese> predicate) {\n         requireNonNull(predicate);\n-        filteredCheeses.setPredicate(predicate);\n+        filteredAndSortedCheeses.setModelPredicate(predicate);\n     }\n \n     //=========== For Toggling UI Panel ==================================================================\n@@ -280,9 +280,9 @@ public boolean equals(Object obj) {\n         ModelManager other = (ModelManager) obj;\n         return addressBook.equals(other.addressBook)\n                 && userPrefs.equals(other.userPrefs)\n-                && filteredCustomers.equals(other.filteredCustomers)\n-                && filteredOrders.equals(other.filteredOrders)\n-                && filteredCheeses.equals(other.filteredCheeses);\n+                && filteredAndSortedCustomers.equals(other.filteredAndSortedCustomers)\n+                && filteredAndSortedOrders.equals(other.filteredAndSortedOrders)\n+                && filteredAndSortedCheeses.equals(other.filteredAndSortedCheeses);\n     }\n \n }"
  },
  {
    "sha": "0c727bfc15e621da96a45952162f44cb49bb65eb",
    "filename": "src/main/java/seedu/address/model/cheese/predicates/CheeseCheeseTypePredicate.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/cheese/predicates/CheeseCheeseTypePredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/cheese/predicates/CheeseCheeseTypePredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/cheese/predicates/CheeseCheeseTypePredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.address.model.cheese.predicates;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.cheese.Cheese;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class CheeseCheeseTypePredicate extends SingleFieldPredicate<Cheese> {\n+\n+    public CheeseCheeseTypePredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Cheese cheese) {\n+        return PredicateUtil.getWordSimilarityScoreIgnoreCase(cheese.getCheeseType().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean test(Cheese cheese) {\n+        return PredicateUtil.containsPrefixWordIgnoreCase(cheese.getCheeseType().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof CheeseCheeseTypePredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "25820452645abe7c2826ea18336a1bafdda8aff4",
    "filename": "src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java",
    "status": "removed",
    "additions": 0,
    "deletions": 31,
    "changes": 31,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/4b9d0acf0ba75bf1b2b65998593f8cbdb0d8d413/src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/4b9d0acf0ba75bf1b2b65998593f8cbdb0d8d413/src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java?ref=4b9d0acf0ba75bf1b2b65998593f8cbdb0d8d413",
    "patch": "@@ -1,31 +0,0 @@\n-package seedu.address.model.customer;\n-\n-import java.util.List;\n-import java.util.function.Predicate;\n-\n-import seedu.address.commons.util.StringUtil;\n-\n-/**\n- * Tests that a {@code Customer}'s {@code Name} matches any of the keywords given.\n- */\n-public class NameContainsKeywordsPredicate implements Predicate<Customer> {\n-    private final List<String> keywords;\n-\n-    public NameContainsKeywordsPredicate(List<String> keywords) {\n-        this.keywords = keywords;\n-    }\n-\n-    @Override\n-    public boolean test(Customer customer) {\n-        return keywords.stream()\n-                .anyMatch(keyword -> StringUtil.containsWordIgnoreCase(customer.getName().fullName, keyword));\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls\n-                && keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check\n-    }\n-\n-}"
  },
  {
    "sha": "a8c9ce2ec3ba2e367caa9b51d555a1dba2308e15",
    "filename": "src/main/java/seedu/address/model/customer/predicates/CustomerAddressPredicate.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerAddressPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerAddressPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/customer/predicates/CustomerAddressPredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.address.model.customer.predicates;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.customer.Customer;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class CustomerAddressPredicate extends SingleFieldPredicate<Customer> {\n+\n+    public CustomerAddressPredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Customer customer) {\n+        return PredicateUtil.getWordSimilarityScoreIgnoreCase(customer.getAddress().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean test(Customer customer) {\n+        return PredicateUtil.containsPrefixWordIgnoreCase(customer.getAddress().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof CustomerAddressPredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "ee2675c64ac5145dcdf56ed3e869b7c4451e9c05",
    "filename": "src/main/java/seedu/address/model/customer/predicates/CustomerEmailPredicate.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerEmailPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerEmailPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/customer/predicates/CustomerEmailPredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,38 @@\n+package seedu.address.model.customer.predicates;\n+\n+import static seedu.address.commons.util.StringUtil.replaceEmailSpecialCharacters;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.customer.Customer;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class CustomerEmailPredicate extends SingleFieldPredicate<Customer> {\n+\n+    public CustomerEmailPredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Customer customer) {\n+        return PredicateUtil.getWordSimilarityScoreIgnoreCase(\n+            replaceEmailSpecialCharacters(customer.getEmail().value),\n+            getKeywords()\n+        );\n+    }\n+\n+    @Override\n+    public boolean test(Customer customer) {\n+        return PredicateUtil.containsPrefixWordIgnoreCase(\n+            replaceEmailSpecialCharacters(customer.getEmail().value),\n+            getKeywords()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof CustomerEmailPredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "0cdc1807b8de7d74f9ff56cdef64206230a2e2e4",
    "filename": "src/main/java/seedu/address/model/customer/predicates/CustomerNamePredicate.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerNamePredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerNamePredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/customer/predicates/CustomerNamePredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.address.model.customer.predicates;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.customer.Customer;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class CustomerNamePredicate extends SingleFieldPredicate<Customer> {\n+\n+    public CustomerNamePredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Customer customer) {\n+        return PredicateUtil.getWordSimilarityScoreIgnoreCase(customer.getName().fullName, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean test(Customer customer) {\n+        return PredicateUtil.containsPrefixWordIgnoreCase(customer.getName().fullName, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof CustomerNamePredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "0c81b570ed3ba88aded203ff5aaa3d421125fcf4",
    "filename": "src/main/java/seedu/address/model/customer/predicates/CustomerPhonePredicate.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerPhonePredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/customer/predicates/CustomerPhonePredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/customer/predicates/CustomerPhonePredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.address.model.customer.predicates;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.customer.Customer;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class CustomerPhonePredicate extends SingleFieldPredicate<Customer> {\n+\n+    public CustomerPhonePredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Customer customer) {\n+        return PredicateUtil.getWordSimilarityScoreIgnoreCase(customer.getPhone().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean test(Customer customer) {\n+        return PredicateUtil.containsPrefixWordIgnoreCase(customer.getPhone().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof CustomerPhonePredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "00cdfa42a623ca8a0670260b89d3df070950f79f",
    "filename": "src/main/java/seedu/address/model/order/Order.java",
    "status": "modified",
    "additions": 2,
    "deletions": 16,
    "changes": 18,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/order/Order.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/order/Order.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/order/Order.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -150,27 +150,13 @@ public boolean equals(Object other) {\n \n         Order otherOrder = (Order) other;\n \n-        boolean result = otherOrder.getOrderId().equals(getOrderId())\n+        return otherOrder.getOrderId().equals(getOrderId())\n                 && otherOrder.getCustomerId().equals(getCustomerId())\n                 && otherOrder.getCheeseType().equals(getCheeseType())\n                 && otherOrder.getQuantity().equals(getQuantity())\n                 && otherOrder.getOrderDate().equals(getOrderDate())\n                 && otherOrder.getCompletedDate().equals(getCompletedDate())\n-                && otherOrder.getCheeses().size() == getCheeses().size();\n-\n-        if (result) {\n-            int n = getCheeses().size();\n-            CheeseId[] otherOrderCheeses = new CheeseId[n];\n-            otherOrder.getCheeses().toArray(otherOrderCheeses);\n-            CheeseId[] cheeses = new CheeseId[n];\n-            getCheeses().toArray(cheeses);\n-            for (int i = 0; i < n; i++) {\n-                if (!otherOrderCheeses[i].equals(cheeses[i])) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return result;\n+                && otherOrder.getCheeses().equals(getCheeses());\n     }\n \n     @Override"
  },
  {
    "sha": "13531f245e044bce060a4e04d197a6f946e445e7",
    "filename": "src/main/java/seedu/address/model/order/predicates/OrderCheeseTypePredicate.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/order/predicates/OrderCheeseTypePredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/order/predicates/OrderCheeseTypePredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/order/predicates/OrderCheeseTypePredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.address.model.order.predicates;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.order.Order;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class OrderCheeseTypePredicate extends SingleFieldPredicate<Order> {\n+\n+    public OrderCheeseTypePredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Order order) {\n+        return PredicateUtil.getWordSimilarityScoreIgnoreCase(order.getCheeseType().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean test(Order order) {\n+        return PredicateUtil.containsPrefixWordIgnoreCase(order.getCheeseType().value, getKeywords());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof OrderCheeseTypePredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "0678eee7b00975b207b9029aa57f38ae50b357cb",
    "filename": "src/main/java/seedu/address/model/order/predicates/OrderIdPredicate.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/order/predicates/OrderIdPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/order/predicates/OrderIdPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/order/predicates/OrderIdPredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.address.model.order.predicates;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.util.PredicateUtil;\n+import seedu.address.model.order.Order;\n+import seedu.address.model.util.predicate.SingleFieldPredicate;\n+\n+public class OrderIdPredicate extends SingleFieldPredicate<Order> {\n+\n+    public OrderIdPredicate(List<String> keywords) {\n+        super(keywords);\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(Order order) {\n+        return -order.getOrderId().value;\n+    }\n+\n+    @Override\n+    public boolean test(Order order) {\n+        return PredicateUtil.matchIntegerId(order.getOrderId(), getKeywords());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return (other instanceof OrderIdPredicate) && super.equals(other); // state check\n+    }\n+\n+}"
  },
  {
    "sha": "351cc6d7f0a6f57e121890ba2371d7abe9843aa9",
    "filename": "src/main/java/seedu/address/model/util/FilteredSortedList.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/FilteredSortedList.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/FilteredSortedList.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/util/FilteredSortedList.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,42 @@\n+package seedu.address.model.util;\n+\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import seedu.address.model.util.predicate.FieldPredicate;\n+\n+/**\n+ * Equivalent to an observable list that both sorts and filters\n+ * based on the given predicates and comparators\n+ * @param <U> model class\n+ */\n+public class FilteredSortedList<U> {\n+    final FilteredList<U> filteredList;\n+    final SortedList<U> sortedList;\n+\n+    /**\n+     * Creates a filtered and sorted list\n+     * @param list list to be sorted and filtered\n+     */\n+    public FilteredSortedList(ObservableList<U> list) {\n+        filteredList = new FilteredList<>(list);\n+        sortedList = new SortedList<>(filteredList);\n+    }\n+\n+    public void setModelPredicate(FieldPredicate<? super U> predicate) {\n+        filteredList.setPredicate(predicate);\n+        sortedList.setComparator(predicate);\n+    }\n+\n+    public ObservableList<U> getObservableList() {\n+        return sortedList;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+            || (other instanceof FilteredSortedList // instanceof handles nulls\n+            && filteredList.equals(((FilteredSortedList) other).filteredList)\n+            && sortedList.equals(((FilteredSortedList) other).sortedList));\n+    }\n+}"
  },
  {
    "sha": "d124700a2ba93c9545a18af33d5ecb998f180792",
    "filename": "src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicate.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,50 @@\n+package seedu.address.model.util.predicate;\n+\n+import java.util.Set;\n+\n+/**\n+ * Predicate which contains multiple predicates for fields.\n+ * To be used for filtering and sorting data by multiple parameters.\n+ * Guarantees: Immutable\n+ * @param <U>\n+ */\n+public class CompositeFieldPredicate<U> extends FieldPredicate<U> {\n+\n+    private final Set<FieldPredicate<U>> fieldPredicateSet;\n+\n+    /**\n+     * Initialize composite predicate with a list of predicates\n+     * @param fieldPredicateSet\n+     */\n+    public CompositeFieldPredicate(Set<FieldPredicate<U>> fieldPredicateSet) {\n+        assert(fieldPredicateSet.size() > 0);\n+        this.fieldPredicateSet = fieldPredicateSet;\n+    }\n+\n+    public CompositeFieldPredicate(FieldPredicate<U> fieldPredicate) {\n+        this(Set.of(fieldPredicate));\n+    }\n+\n+    @Override\n+    public double getSimilarityScore(U u) {\n+        return fieldPredicateSet.stream().mapToDouble(x -> x.getSimilarityScore(u)).sum();\n+    }\n+\n+    @Override\n+    public boolean test(U u) {\n+        return fieldPredicateSet.stream().allMatch(x -> x.test(u));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+            || (other instanceof CompositeFieldPredicate // instanceof handles nulls\n+            && fieldPredicateSet.equals(((CompositeFieldPredicate<?>) other).fieldPredicateSet)); // state check\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return fieldPredicateSet.size();\n+    }\n+\n+}"
  },
  {
    "sha": "974062d8d02c1828fada36892c8cffe6f07e4dc6",
    "filename": "src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicateBuilder.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicateBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicateBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/util/predicate/CompositeFieldPredicateBuilder.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,43 @@\n+package seedu.address.model.util.predicate;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Builder class for { @code CompositeFieldPredicate }.\n+ * @param <U>\n+ */\n+public class CompositeFieldPredicateBuilder<U> {\n+\n+    private final Set<SingleFieldPredicate<U>> singleFieldPredicatesSet;\n+\n+    public CompositeFieldPredicateBuilder() {\n+        this.singleFieldPredicatesSet = new HashSet<>();\n+    }\n+\n+    /**\n+     * Simple constructor to convert single predicates into a composite predicate.\n+     * @param singleFieldPredicate\n+     * @return\n+     */\n+    public CompositeFieldPredicateBuilder<U> compose(SingleFieldPredicate<U> singleFieldPredicate) {\n+        requireNonNull(singleFieldPredicate);\n+        singleFieldPredicatesSet.add(singleFieldPredicate);\n+        return this;\n+    }\n+\n+    public CompositeFieldPredicate<U> build() {\n+        return new CompositeFieldPredicate<U>(Collections.unmodifiableSet(singleFieldPredicatesSet));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+            || (other instanceof CompositeFieldPredicateBuilder // instanceof handles nulls\n+            && singleFieldPredicatesSet.equals(((CompositeFieldPredicateBuilder<?>) other).singleFieldPredicatesSet));\n+    }\n+\n+}"
  },
  {
    "sha": "9cbfa5a617a2f3c66c9fe1bf5b3987f149ea1ab5",
    "filename": "src/main/java/seedu/address/model/util/predicate/FieldPredicate.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/FieldPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/FieldPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/util/predicate/FieldPredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,59 @@\n+package seedu.address.model.util.predicate;\n+\n+import java.util.Comparator;\n+import java.util.function.Predicate;\n+\n+public abstract class FieldPredicate<U> implements Predicate<U>, Comparator<U> {\n+\n+    private static final FieldPredicate<?> DEFAULT_PREDICATE = new FieldPredicate<Object>() {\n+        @Override\n+        public double getSimilarityScore(Object o) {\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean test(Object o) {\n+            return true;\n+        }\n+    };\n+\n+    private static final FieldPredicate<?> EMPTY_PREDICATE = new FieldPredicate<Object>() {\n+        @Override\n+        public double getSimilarityScore(Object o) {\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean test(Object o) {\n+            return false;\n+        }\n+    };\n+\n+    public static <U> FieldPredicate<U> getDefaultPredicate() {\n+        @SuppressWarnings(\"unchecked\")\n+        FieldPredicate<U> u = (FieldPredicate<U>) DEFAULT_PREDICATE;\n+        return u;\n+    }\n+\n+    public static <U> FieldPredicate<U> getEmptyPredicate() {\n+        @SuppressWarnings(\"unchecked\")\n+        FieldPredicate<U> u = (FieldPredicate<U>) EMPTY_PREDICATE;\n+        return u;\n+    }\n+\n+    public abstract double getSimilarityScore(U u);\n+\n+    @Override\n+    public int compare(U u, U otherU) {\n+        double score1 = getSimilarityScore(u);\n+        double score2 = getSimilarityScore(otherU);\n+\n+        if (score1 < score2) {\n+            return 1;\n+        } else if (score1 > score2) {\n+            return -1;\n+        }\n+        return 0;\n+    }\n+\n+}"
  },
  {
    "sha": "4ff3bf775437eb1f89af31f83513280c586e003d",
    "filename": "src/main/java/seedu/address/model/util/predicate/SingleFieldPredicate.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/SingleFieldPredicate.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/main/java/seedu/address/model/util/predicate/SingleFieldPredicate.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/main/java/seedu/address/model/util/predicate/SingleFieldPredicate.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,42 @@\n+package seedu.address.model.util.predicate;\n+\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.commons.util.ListUtil.compareListWithoutOrder;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Class to hold single predicate conditions for fields\n+ */\n+public abstract class SingleFieldPredicate<U> extends FieldPredicate<U> {\n+\n+    private final List<String> keywords;\n+\n+    /**\n+     * Creates new { @code SingleFieldPredicate } object by given keywords\n+     * @param keywords\n+     */\n+    public SingleFieldPredicate(List<String> keywords) {\n+        requireNonNull(keywords);\n+        this.keywords = keywords;\n+    }\n+\n+    public List<String> getKeywords() {\n+        return Collections.unmodifiableList(this.keywords);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+            || (other instanceof SingleFieldPredicate // instanceof handles nulls\n+            && compareListWithoutOrder(keywords, (((SingleFieldPredicate) other).keywords))); // state check\n+    }\n+\n+    // Use keywords as hash for object\n+    @Override\n+    public int hashCode() {\n+        return keywords.size();\n+    }\n+\n+}"
  },
  {
    "sha": "ba3656d15d6633683051c21a5ef1a966ce1d4ee2",
    "filename": "src/test/java/seedu/address/commons/util/PredicateUtilTest.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/blob/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/test/java/seedu/address/commons/util/PredicateUtilTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-2/tp/raw/bfcb24b379cf3940e3e491c91e19213a1c4b1944/src/test/java/seedu/address/commons/util/PredicateUtilTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-2/tp/contents/src/test/java/seedu/address/commons/util/PredicateUtilTest.java?ref=bfcb24b379cf3940e3e491c91e19213a1c4b1944",
    "patch": "@@ -0,0 +1,96 @@\n+package seedu.address.commons.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import seedu.address.model.AbstractId;\n+\n+public class PredicateUtilTest {\n+\n+    public class IdTestStub extends AbstractId<IdTestStub> {\n+        public IdTestStub(int id) {\n+            super(id);\n+        }\n+    }\n+\n+    @Test\n+    public void null_containsPrefixWordIgnoreCase_throwsNullPointerException() {\n+        assertThrows(NullPointerException.class, () ->\n+            PredicateUtil.containsPrefixWordIgnoreCase(null, Arrays.asList(\"key1\")));\n+        assertThrows(NullPointerException.class, () ->\n+            PredicateUtil.containsPrefixWordIgnoreCase(\"string\", null));\n+    }\n+\n+    @Test\n+    public void containsPrefixWordIgnoreCase() {\n+        // Contains full word\n+        assertTrue(PredicateUtil.containsPrefixWordIgnoreCase(\"abc abc\", Arrays.asList(\"Abc\")));\n+        assertTrue(PredicateUtil.containsPrefixWordIgnoreCase(\"marry Ann\", Arrays.asList(\"ann\")));\n+\n+        // Contains prefix\n+        assertTrue(PredicateUtil.containsPrefixWordIgnoreCase(\"MAx lee\", Arrays.asList(\"Ma\")));\n+        assertTrue(PredicateUtil.containsPrefixWordIgnoreCase(\"Armstrong Chan\", Arrays.asList(\"chA\")));\n+\n+        // Contains suffix (false)\n+        assertFalse(PredicateUtil.containsPrefixWordIgnoreCase(\"Armstrong Chan\", Arrays.asList(\"stronG\")));\n+        assertFalse(PredicateUtil.containsPrefixWordIgnoreCase(\"Chan Yulee\", Arrays.asList(\"Lee\")));\n+\n+        // More than 1 keywords\n+        assertTrue(PredicateUtil.containsPrefixWordIgnoreCase(\"Yuan Lee Hui\", Arrays.asList(\"Yu\", \"hui\")));\n+        assertTrue(PredicateUtil.containsPrefixWordIgnoreCase(\"Boris, Ng Chan\", Arrays.asList(\"alex\", \"bori\")));\n+        assertFalse(PredicateUtil.containsPrefixWordIgnoreCase(\"Boris, Ng Chan\", Arrays.asList(\"lee\", \"hui\", \"wu\")));\n+    }\n+\n+    @Test\n+    public void null_getWordSimilarityScoreIgnoreCase_throwsNullPointerException() {\n+        assertThrows(NullPointerException.class, () ->\n+            PredicateUtil.getWordSimilarityScoreIgnoreCase(null, Arrays.asList(\"key1\")));\n+        assertThrows(NullPointerException.class, () ->\n+            PredicateUtil.getWordSimilarityScoreIgnoreCase(\"string\", null));\n+    }\n+\n+    @Test\n+    public void getWordSimilarityScoreIgnoreCase() {\n+        final List<String> keywordList = Arrays.asList(\"key1\", \"key2\", \"key3\");\n+\n+        double allPresentScore = PredicateUtil.getWordSimilarityScoreIgnoreCase(\"key1 key2 key3\", keywordList);\n+        double somePresentScore = PredicateUtil.getWordSimilarityScoreIgnoreCase(\"key1 key3\", keywordList);\n+        double somePrefixPresentScore = PredicateUtil.getWordSimilarityScoreIgnoreCase(\"key138 key3\", keywordList);\n+\n+        assertTrue(allPresentScore > somePresentScore);\n+        assertTrue(somePresentScore > somePrefixPresentScore);\n+        assertTrue(somePrefixPresentScore > 0);\n+\n+        double nonePresent = PredicateUtil.getWordSimilarityScoreIgnoreCase(\"key key key\", keywordList);\n+        assertTrue(nonePresent == 0);\n+\n+        final List<String> emptyKeywordList = Arrays.asList();\n+        assertTrue(PredicateUtil.getWordSimilarityScoreIgnoreCase(\"key1 key2 key3\", emptyKeywordList) == 0);\n+    }\n+\n+    @Test\n+    public void null_matchIntegerId_throwsNullPointerException() {\n+        assertThrows(NullPointerException.class, () -> PredicateUtil.matchIntegerId(new IdTestStub(1), null));\n+        assertThrows(NullPointerException.class, () -> PredicateUtil.matchIntegerId(null, Arrays.asList(\"123\")));\n+    }\n+\n+    @Test\n+    public void matchIntegerId() {\n+        final List<String> keywordList = Arrays.asList(\"1\", \"2\", \"3\");\n+\n+        assertTrue(PredicateUtil.matchIntegerId(new IdTestStub(1), keywordList));\n+        assertTrue(PredicateUtil.matchIntegerId(new IdTestStub(3), keywordList));\n+        assertFalse(PredicateUtil.matchIntegerId(new IdTestStub(5), keywordList));\n+\n+        // Match non-numeric\n+        final List<String> nonNumericKeywordList = Arrays.asList(\"abc\");\n+        assertFalse(PredicateUtil.matchIntegerId(new IdTestStub(5), nonNumericKeywordList));\n+    }\n+\n+}"
  }
]
