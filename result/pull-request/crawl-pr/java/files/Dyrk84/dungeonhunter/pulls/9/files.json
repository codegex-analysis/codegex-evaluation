[
  {
    "sha": "0dcc61f77aad046e32496bf5384e252353fb3f2b",
    "filename": "src/main/java/hu/dungeonhunter/Main.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/Main.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/Main.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/Main.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -1,11 +1,13 @@\n package hu.dungeonhunter;\n \n+import hu.dungeonhunter.tools.Fight;\n import hu.dungeonhunter.tools.Menu;\n \n class Main {\n \n     public static void main(String[] args) {\n         Menu menu = new Menu();\n+        menu.toTheCave();\n         menu.actionMenu();\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "23ce972705216fb457303eb3d6593c8e026c8859",
    "filename": "src/main/java/hu/dungeonhunter/characters/Character.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/Character.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/Character.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/Character.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -0,0 +1,21 @@\n+package hu.dungeonhunter.characters;\n+\n+import hu.dungeonhunter.model.CharacterTypes;\n+\n+public interface Character {\n+    int getHp();\n+    void setHp(int hp);\n+    CharacterTypes getType();\n+    int damage();\n+    int getDamage();\n+    boolean isDefeated();\n+    void setInitiation(int initiation);\n+    int getInitiation();\n+    int initiationCalculation();\n+    void setMaxDamage(int maxDamage);\n+    int getMaxDamage();\n+    int getAccuracy();\n+    int getNumOfDices();\n+    int accuracyCalculation(int accuracyRoll);\n+    int getDefense();\n+}"
  },
  {
    "sha": "7ea092101a6252ec03debf5f090c12d01b0fb585",
    "filename": "src/main/java/hu/dungeonhunter/characters/CharacterFactory.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/CharacterFactory.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/CharacterFactory.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/CharacterFactory.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -0,0 +1,27 @@\n+package hu.dungeonhunter.characters;\n+\n+import hu.dungeonhunter.characters.champion.Champion;\n+import hu.dungeonhunter.characters.monsters.Goblin;\n+import hu.dungeonhunter.characters.monsters.GoblinKing;\n+import hu.dungeonhunter.model.CharacterTypes;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class CharacterFactory {\n+\n+    @Setter\n+    @Getter\n+    int killedMonsterCounter = 0;\n+\n+    public Character getCharacter(CharacterTypes type) {\n+        Character character;\n+        if (type == CharacterTypes.CHAMPION) {\n+            character = new Champion();\n+        } else if (type == CharacterTypes.GOBLIN_KING) {\n+            character = new GoblinKing();\n+        } else {\n+            character = new Goblin();\n+        }\n+        return character;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c048043015555c6aa0ad4e0c4bcce78797fc5290",
    "filename": "src/main/java/hu/dungeonhunter/characters/champion/Champion.java",
    "status": "modified",
    "additions": 28,
    "deletions": 17,
    "changes": 45,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/champion/Champion.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/champion/Champion.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/champion/Champion.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -1,5 +1,6 @@\n package hu.dungeonhunter.characters.champion;\n \n+import hu.dungeonhunter.characters.Character;\n import hu.dungeonhunter.model.CharacterTypes;\n import hu.dungeonhunter.tools.Dice;\n import hu.dungeonhunter.utils.TextSeparator;\n@@ -8,14 +9,17 @@\n \n import static hu.dungeonhunter.utils.Colors.*;\n \n-public class Champion {\n+public class Champion implements Character {\n \n     static final int START_HP = 20;\n \n     @Setter\n     @Getter\n     private int accuracy;\n \n+    @Getter\n+    private int damage;\n+\n     @Setter\n     @Getter\n     private int defense;\n@@ -24,42 +28,43 @@\n     @Getter\n     private int hp;\n \n+    @Setter\n     @Getter\n     private int maxDamage;\n \n     @Getter\n     private int numOfDices;\n \n     @Setter\n-    @Getter\n-    private boolean defeat;\n+    private boolean defeated;\n \n     @Setter\n     @Getter\n     private int healingPotionCounter = 1;\n \n     @Setter\n     @Getter\n-    private int initiative;\n+    private int initiation;\n \n-    @Getter\n     private static final CharacterTypes type = CharacterTypes.CHAMPION;\n \n     public Champion() {\n         this.hp = START_HP;\n-        this.initiative = 10;\n+        this.initiation = 10;\n         this.accuracy = 20;\n         this.defense = 80;\n         this.maxDamage = 6;\n         this.numOfDices = 1;\n         championDebut();\n     }\n \n-    public void enemyVictory() {\n+    @Override\n+    public boolean isDefeated() {\n         if (hp <= 0) {\n             System.out.println(\"You are soooo dead! Game Over!\");\n-            defeat = true;\n+            defeated = true;\n         }\n+        return false;\n     }\n \n     public void championDebut() {\n@@ -69,8 +74,15 @@ public void championDebut() {\n         TextSeparator.format(\"\");\n     }\n \n-    public int championDamage() {\n-        return Dice.rollDice(maxDamage, numOfDices);\n+    @Override\n+    public CharacterTypes getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int damage() {\n+        damage = Dice.rollDice(maxDamage, numOfDices);\n+        return damage;\n     }\n \n     public void drinkAHealingPotion() {\n@@ -91,16 +103,15 @@ public void drinkAHealingPotion() {\n     }\n \n     public int initiationCalculation() {\n-        System.out.print(\"Champion initiation: \" + getInitiative() + \" + \");\n+        System.out.print(\"Champion initiation: \" + getInitiation() + \" + \");\n         int champInitRoll = Dice.rollDice(10, 1);\n-        System.out.println(\"Final Champion initiation: \" + (getInitiative() + champInitRoll));\n-        return getInitiative() + champInitRoll;\n+        System.out.println(\"Final Champion initiation: \" + (getInitiation() + champInitRoll));\n+        return getInitiation() + champInitRoll;\n     }\n \n-    public int accuracyCalculation() {\n+    public int accuracyCalculation(int accuracyRoll) {\n         System.out.print(\"Champion accuracy: \" + getAccuracy() + \" + \");\n-        int AccuracyRoll = Dice.rollDice(100, 1);\n-        System.out.println(\"Final Champion accuracy: \" + (getAccuracy() + AccuracyRoll) + \" \");\n-        return getAccuracy() + AccuracyRoll;\n+        System.out.println(\"Final Champion accuracy: \" + (getAccuracy() + accuracyRoll) + \" \");\n+        return getAccuracy() + accuracyRoll;\n     }\n }"
  },
  {
    "sha": "b33faba7adee98e037805d2176d40a889c9e5618",
    "filename": "src/main/java/hu/dungeonhunter/characters/monsters/Goblin.java",
    "status": "modified",
    "additions": 20,
    "deletions": 16,
    "changes": 36,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/monsters/Goblin.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/monsters/Goblin.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/monsters/Goblin.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -1,11 +1,12 @@\n package hu.dungeonhunter.characters.monsters;\n \n+import hu.dungeonhunter.characters.Character;\n import hu.dungeonhunter.model.CharacterTypes;\n import hu.dungeonhunter.tools.Dice;\n import lombok.Getter;\n import lombok.Setter;\n \n-public class Goblin implements MonstersInterface {\n+public class Goblin implements Character {\n \n     @Setter\n     @Getter\n@@ -15,6 +16,9 @@\n     @Getter\n     private int accuracy;\n \n+    @Getter\n+    private int damage;\n+\n     @Setter\n     @Getter\n     private int defense;\n@@ -31,15 +35,9 @@\n     @Getter\n     private int numOfDices;\n \n-    @Getter\n-    private final CharacterTypes type = CharacterTypes.GOBLIN;\n+    private static final CharacterTypes type = CharacterTypes.GOBLIN;\n \n     public Goblin() {\n-        getMonster();\n-    }\n-\n-    @Override\n-    public void getMonster() {\n         this.hp = Dice.rollDice(4, 3);\n         startValues();\n     }\n@@ -56,7 +54,7 @@ private void startValues() {\n     }\n \n     @Override\n-    public boolean isDefeat() {\n+    public boolean isDefeated() {\n         if (hp <= 0) {\n             System.out.println(\"You killed the monster!\");\n             return true;\n@@ -65,8 +63,14 @@ public boolean isDefeat() {\n     }\n \n     @Override\n-    public int getMonsterDamage() {\n-        return Dice.rollDice(maxDamage, numOfDices);\n+    public CharacterTypes getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int damage() {\n+        damage = Dice.rollDice(maxDamage, numOfDices);\n+        return damage;\n     }\n \n     @Override\n@@ -77,10 +81,10 @@ public int initiationCalculation() {\n         return this.getInitiation() + monsterInitRoll;\n     }\n \n-    public int accuracyCalculation() {\n-        System.out.print(\"Goblin accuracy calculation: \" + getAccuracy() + \" + \");\n-        int AccuracyRoll = Dice.rollDice(100, 1);\n-        System.out.println(\"Final Goblin accuracy: \" + (getAccuracy() + AccuracyRoll) + \" \");\n-        return getAccuracy() + AccuracyRoll;\n+    @Override\n+    public int accuracyCalculation(int accuracyRoll) {\n+        System.out.print(\"Goblin accuracy: \" + getAccuracy() + \" + \");\n+        System.out.println(\"Final Goblin accuracy: \" + (getAccuracy() + accuracyRoll) + \" \");\n+        return getAccuracy() + accuracyRoll;\n     }\n }"
  },
  {
    "sha": "815154758937637e93a51e110377e944ba0ce666",
    "filename": "src/main/java/hu/dungeonhunter/characters/monsters/GoblinKing.java",
    "status": "modified",
    "additions": 20,
    "deletions": 16,
    "changes": 36,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/monsters/GoblinKing.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/characters/monsters/GoblinKing.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/monsters/GoblinKing.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -1,11 +1,12 @@\n package hu.dungeonhunter.characters.monsters;\n \n+import hu.dungeonhunter.characters.Character;\n import hu.dungeonhunter.model.CharacterTypes;\n import hu.dungeonhunter.tools.Dice;\n import lombok.Getter;\n import lombok.Setter;\n \n-public class GoblinKing implements MonstersInterface {\n+public class GoblinKing implements Character {\n \n     @Setter\n     @Getter\n@@ -15,6 +16,9 @@\n     @Getter\n     private int accuracy;\n \n+    @Getter\n+    private int damage;\n+\n     @Setter\n     @Getter\n     private int defense;\n@@ -31,15 +35,9 @@\n     @Getter\n     private int numOfDices;\n \n-    @Getter\n-    private final CharacterTypes type = CharacterTypes.GOBLIN_KING;\n+    private static final CharacterTypes type = CharacterTypes.GOBLIN_KING;\n \n     public GoblinKing() {\n-        getMonster();\n-    }\n-\n-    @Override\n-    public void getMonster() {\n         this.hp = Dice.rollDice(6, 3) + 6;\n         startValues();\n     }\n@@ -56,7 +54,7 @@ private void startValues() {\n     }\n \n     @Override\n-    public boolean isDefeat() {\n+    public boolean isDefeated() {\n         if (hp <= 0) {\n             System.out.println(\"The goblin king is dead!\");\n             return true;\n@@ -65,8 +63,14 @@ public boolean isDefeat() {\n     }\n \n     @Override\n-    public int getMonsterDamage() {\n-        return Dice.rollDice(maxDamage, numOfDices);\n+    public CharacterTypes getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int damage() {\n+        damage = Dice.rollDice(maxDamage, numOfDices);\n+        return damage;\n     }\n \n     @Override\n@@ -77,10 +81,10 @@ public int initiationCalculation() {\n         return getInitiation() + monsterInitRoll;\n     }\n \n-    public int accuracyCalculation() {\n-        System.out.print(\"Goblin king accuracy calculation: \" + getAccuracy() + \" + \");\n-        int AccuracyRoll = Dice.rollDice(100, 1);\n-        System.out.println(\"Final Goblin king accuracy: \" + (getAccuracy() + AccuracyRoll) + \" \");\n-        return getAccuracy() + AccuracyRoll;\n+    @Override\n+    public int accuracyCalculation(int accuracyRoll) {\n+        System.out.print(\"Goblin king accuracy: \" + getAccuracy() + \" + \");\n+        System.out.println(\"Final Goblin king accuracy: \" + (getAccuracy() + accuracyRoll) + \" \");\n+        return getAccuracy() + accuracyRoll;\n     }\n }"
  },
  {
    "sha": "8077a762bff09514ed6b97c7825b1d5b24bce3a1",
    "filename": "src/main/java/hu/dungeonhunter/characters/monsters/MonsterFactory.java",
    "status": "removed",
    "additions": 0,
    "deletions": 22,
    "changes": 22,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/e596dd8b6cdc164737b250770d2938f672eb7bd6/src/main/java/hu/dungeonhunter/characters/monsters/MonsterFactory.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/e596dd8b6cdc164737b250770d2938f672eb7bd6/src/main/java/hu/dungeonhunter/characters/monsters/MonsterFactory.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/monsters/MonsterFactory.java?ref=e596dd8b6cdc164737b250770d2938f672eb7bd6",
    "patch": "@@ -1,22 +0,0 @@\n-package hu.dungeonhunter.characters.monsters;\n-\n-import hu.dungeonhunter.model.CharacterTypes;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n-public class MonsterFactory {\n-\n-    @Setter\n-    @Getter\n-    int killedMonsterCounter = 0;\n-\n-    public MonstersInterface getMonster(CharacterTypes type) {\n-        MonstersInterface monster;\n-        if (type == CharacterTypes.GOBLIN) {\n-            monster = new Goblin();\n-        } else {\n-            monster = new GoblinKing();\n-        }\n-        return monster;\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "c88ad030a084bd6eba38cd376e602628be4645e1",
    "filename": "src/main/java/hu/dungeonhunter/characters/monsters/MonstersInterface.java",
    "status": "removed",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/e596dd8b6cdc164737b250770d2938f672eb7bd6/src/main/java/hu/dungeonhunter/characters/monsters/MonstersInterface.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/e596dd8b6cdc164737b250770d2938f672eb7bd6/src/main/java/hu/dungeonhunter/characters/monsters/MonstersInterface.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/characters/monsters/MonstersInterface.java?ref=e596dd8b6cdc164737b250770d2938f672eb7bd6",
    "patch": "@@ -1,23 +0,0 @@\n-package hu.dungeonhunter.characters.monsters;\n-\n-import hu.dungeonhunter.model.CharacterTypes;\n-import jdk.nashorn.internal.objects.annotations.Setter;\n-\n-public interface MonstersInterface {\n-    void getMonster();\n-    int getHp();\n-    void setHp(int hp);\n-    CharacterTypes getType();\n-    int getMonsterDamage();\n-    boolean isDefeat();\n-    void setInitiation(int initiation);\n-    int getInitiation();\n-    int initiationCalculation();\n-    int getMaxDamage();\n-    void setAccuracy(int accuracy);\n-    int getAccuracy();\n-    void setDefense(int defense);\n-    int getDefense();\n-    int accuracyCalculation();\n-    int getNumOfDices();\n-}"
  },
  {
    "sha": "ef8e56a40bf0c95a6a9ccc1c5684f20819153970",
    "filename": "src/main/java/hu/dungeonhunter/tools/Fight.java",
    "status": "modified",
    "additions": 156,
    "deletions": 97,
    "changes": 253,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/tools/Fight.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/tools/Fight.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/tools/Fight.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -1,189 +1,248 @@\n package hu.dungeonhunter.tools;\n \n import hu.dungeonhunter.characters.champion.Champion;\n-import hu.dungeonhunter.characters.monsters.MonsterFactory;\n-import hu.dungeonhunter.characters.monsters.MonstersInterface;\n+import hu.dungeonhunter.characters.CharacterFactory;\n+import hu.dungeonhunter.characters.Character;\n import hu.dungeonhunter.model.CharacterTypes;\n-import jdk.jfr.events.ExceptionThrownEvent;\n import hu.dungeonhunter.utils.Colors;\n import hu.dungeonhunter.utils.TextSeparator;\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n public class Fight {\n \n-    @Setter\n-    private Champion champion = new Champion();\n+    @Getter\n+    private final CharacterFactory characterFactory = new CharacterFactory();\n \n+    @Setter\n     @Getter\n-    private MonsterFactory monsterFactory = new MonsterFactory();\n+    private Champion champion = new Champion();\n \n     @Setter\n     @Getter\n-    private MonstersInterface monster;\n+    private Character monster;\n \n     @Setter\n     @Getter\n-    private int monsterCounter;\n+    private List<Character> charactersInBattle = new ArrayList<>();\n \n     @Setter\n     @Getter\n-    private int randomEnemy;\n+    private int monsterCounter = 10;\n \n     @Setter\n     @Getter\n-    int championFinalInitiation;\n+    private int randomEnemy;\n \n     @Setter\n     @Getter\n-    int monsterFinalInitiation;\n+    int loopCounter;\n \n     @Setter\n     @Getter\n-    int loopcounter;\n+    int randomCriticalMissEvent;\n \n-    public Fight() {\n+    public void enterToTheCave() {\n+        charactersInBattle.add(champion);\n         setMonsterCounter(Dice.rollDice(6, 2));\n         monsterIncoming();\n     }\n \n-    public void goblinKingDamage() {\n-        TextSeparator.format(\"The goblin king steps out from the darkness and throws you with a big rock!\");\n-        champion.setHp(champion.getHp() - Dice.rollDice(6, 1));\n-        System.out.println(\"You have \" + champion.getHp() + \" hp\");\n-        champion.enemyVictory();\n-    }\n-\n     public void runningAway() {\n         if (monster.getType().equals(CharacterTypes.GOBLIN_KING)) {\n             System.out.println(\"You can't run away from the \" + monster.getType().charType + \" !\");\n         } else {\n             System.out.println(\"The monster hits you a last time before you can run away: \");\n-            champion.setHp(champion.getHp() - monster.getMonsterDamage());\n+            champion.setHp(champion.getHp() - monster.damage());\n             System.out.println(\"Champion have now \" + Colors.ANSI_RED + champion.getHp()\n-                    + Colors.ANSI_RESET + \" hit points\");\n-            champion.enemyVictory();\n-            if (!champion.isDefeat()) {\n+                + Colors.ANSI_RESET + \" hit points\");\n+            if (!champion.isDefeated()) {\n                 monsterCounter--;\n+                charactersInBattle.remove(monster);\n                 System.out.println(\"Your escape was successful! You can go further in the cave.\");\n                 monsterIncoming();\n             }\n         }\n     }\n \n     public void monsterIncoming() {\n-            System.out.println(monsterCounter + \" monsters are in the Dungeon!\");\n-            System.out.print(\"Something is coming! \");\n-            randomEnemy = Dice.rollDice(monsterCounter, 1);\n-            monsterCaller();\n+        System.out.println(monsterCounter + \" monsters are in the Dungeon!\");\n+        System.out.print(\"Something is coming! \");\n+        randomEnemy = Dice.rollDice(monsterCounter, 1);\n+        Character monster = monsterCaller();\n+        charactersInBattle.add(monster);\n     }\n \n-    public MonstersInterface monsterCaller() {\n+    public Character monsterCaller() {\n         if (randomEnemy == 1) {\n-            monster = monsterFactory.getMonster(CharacterTypes.GOBLIN_KING);\n+            monster = characterFactory.getCharacter(CharacterTypes.GOBLIN_KING);\n             goblinKingDamage();\n         } else {\n             TextSeparator.format(\"A goblin steps out from the darkness!\");\n-            monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n+            monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n         }\n         return monster;\n     }\n \n-    public void initiationCalculation() {\n-        if (loopcounter == 100) {\n+    public void goblinKingDamage() {\n+        TextSeparator.format(\"The \" + Colors.ANSI_RED + CharacterTypes.GOBLIN_KING.charType + Colors.ANSI_RESET\n+            + \" steps out from the darkness and throws you with a big rock!\");\n+        dealNormalDamage(monster, champion, monster.damage());\n+    }\n+\n+    public void initiationCalc() {\n+        if (loopCounter == 100) {\n             throw new RuntimeException(\"Too much same final initiation\");\n         }\n         TextSeparator.format(\"Initiation Calculation:\");\n-        championFinalInitiation = champion.initiationCalculation();\n-        monsterFinalInitiation = monster.initiationCalculation();\n+\n+        Map<Integer, Character> initRolls = new HashMap<>();\n+        for (int i = 0; i < charactersInBattle.size(); i++) {\n+            // hozzáadja az i. karaktert és annak a rollolt értékét egy HashMap-hez (kulcs: karakter, érték: rolled int)\n+            initRolls.put(charactersInBattle.get(i).initiationCalculation(), charactersInBattle.get(i));\n+        }\n+\n+        // ha nem egyezik a harcoló felek száma a dobott, egyedi initation értékek számával, akkor újrakezdjük az init dobást.\n+        if (charactersInBattle.size() != initRolls.size()) {\n+            loopCounter++;\n+            TextSeparator.format(\"The values are same! New initiation calculation!\");\n+            initiationCalc();\n+        }\n+\n+        // A hashmap kulcsai (karakter) rendezi csökkenő sorrendbe a hashmap értékei (init rolls) alapján és a rendezezz map kulcsaiból listát csinál\n+\n+        List<Character> orderedCharacterList = initRolls.entrySet().stream()\n+            .sorted(Collections.reverseOrder(Map.Entry.comparingByKey()))\n+            .map(Map.Entry::getValue)\n+            .collect(Collectors.toList());\n+\n+        setCharactersInBattle(orderedCharacterList);\n+\n+        loopCounter = 0;\n         battle();\n     }\n \n     public void battle() {\n-        if (monsterFinalInitiation > championFinalInitiation) {\n-            loopcounter = 0;\n-            TextSeparator.format(monster.getType().charType + \" attacks faster!\");\n-            monsterAccuracy();\n-            championAccuracy();\n-        } else if (monsterFinalInitiation < championFinalInitiation) {\n-            loopcounter = 0;\n-            TextSeparator.format(\"Champion attacks faster!\");\n-            championAccuracy();\n-            monsterAccuracy();\n-        } else {\n-            System.out.println(\"The values are same! New initiation calculation!\");\n-            loopcounter++;\n-            initiationCalculation();\n+        for (int i = 0; i < charactersInBattle.size(); i++) {\n+            if (charactersInBattle.get(i).getHp() > 0) {\n+                if (i == 0) {\n+                    TextSeparator.format(charactersInBattle.get(i).getType().charType + \" attacks faster!\");\n+                }\n+                attack(charactersInBattle.get(i), Dice.rollDice(100, 1));\n+                if (monster.getHp() <= 0 && monster.getType() != CharacterTypes.GOBLIN_KING) {\n+                    monsterDefeated();\n+                    monsterIncoming();\n+                } else if (monster.getHp() < 0 && monster.getType() == CharacterTypes.GOBLIN_KING) {\n+                    monsterDefeated();\n+                }\n+            }\n         }\n-        if (monster.getHp() < 1) monsterDefeated();\n     }\n \n-    private void textOfWin() {\n-        System.out.println(\"The Dungeon is clear! You killed \" + monsterFactory.getKilledMonsterCounter() +\n-                \" monster (not counting the many mothers and children), you win!\");\n+    public void attack(Character attacker, int accuracyRoll) {\n+        // 1 soros if-else: ha az attacker champion, akkor az attacked monster lesz, ha nem, akkor champion lesz az attacked\n+        Character attacked = attacker.getType() == CharacterTypes.CHAMPION ? monster : champion;\n+        System.out.println(attacked.getType().charType + \"'s defense: \" + attacked.getDefense());\n+        int rolledAccuracy = attacker.accuracyCalculation(accuracyRoll);\n+        if (rolledAccuracy == 1) criticalMiss(attacker);\n+        if (rolledAccuracy == 100) dealDeadlyHit(attacker, attacked);\n+        else {\n+            if (rolledAccuracy <= attacked.getDefense() && attacker.getHp() > 0 && attacked.getHp() > 0) {\n+                TextSeparator.format(attacker.getType().charType + \"'s hit miss!\");\n+            }\n+            if (rolledAccuracy > (attacked.getDefense() + 50) && attacker.getHp() > 0 && attacked.getHp() > 0) {\n+                dealCriticalHit(attacker, attacked);\n+            } else if (rolledAccuracy > attacked.getDefense() && attacker.getHp() > 0 && attacked.getHp() > 0) {\n+                dealNormalDamage(attacker, attacked);\n+            }\n+        }\n+    }\n+\n+    public void criticalMiss(Character character) {\n+        randomCriticalMissEvent = Dice.rollDice(2, 1);\n+        criticalMissEvent(character);\n+    }\n+\n+    public void criticalMissEvent(Character character) {\n+        switch (randomCriticalMissEvent) {\n+            case 1: {\n+                System.out.println(\"The hit is so unfortunate the \" + character.getType().charType + \" injured himself\");\n+                character.setHp(character.getHp() - character.damage());\n+                System.out.println(\"The selfdamage is \" + Colors.ANSI_RED + character.getDamage() + Colors.ANSI_RESET + \"!\");\n+                TextSeparator.format(character.getType().charType + \" have now \" + character.getHp() + \" hit points\");\n+                character.isDefeated();\n+                break;\n+            }\n+            case 2: {\n+                System.out.println(\"The hit was so unfortunate, the \" + character.getType().charType + \"'s weapon is damaged!\");\n+                character.setMaxDamage(character.getMaxDamage() - 1);\n+                break;\n+            }\n+        }\n+    }\n+\n+    public void dealDeadlyHit(Character attacker, Character attacked) {\n+        System.out.println(\"The \" + attacker.getType().charType + \" delivers a \" + Colors.ANSI_RED + \" DEADLY ATTACK \" + Colors.ANSI_RESET\n+            + \"with incredible luck.\");\n+        attacked.setHp(attacked.getHp() - (attacker.damage() * 10));\n+        System.out.println(\"The damage is \" + Colors.ANSI_RED + attacker.getDamage() * 10 + Colors.ANSI_RESET + \"!!!\");\n+        TextSeparator.format(\"The \" + attacked.getType().charType + \" have now \"\n+            + Colors.ANSI_RED + attacked.getHp() + Colors.ANSI_RESET + \" hit points\");\n+        attacked.isDefeated();\n+    }\n+\n+    public void dealNormalDamage(Character attacker, Character attacked) {\n+        dealNormalDamage(attacker, attacked, attacker.damage());\n+    }\n+\n+    public void dealNormalDamage(Character attacker, Character attacked, int damage) {\n+        System.out.print(\"The \" + attacker.getType().charType + \" hit the \" + attacked.getType().charType + \"! \");\n+        attacked.setHp(attacked.getHp() - damage);\n+        System.out.println(\"The damage is \" + Colors.ANSI_RED + damage + Colors.ANSI_RESET + \".\");\n+        TextSeparator.format(\"The \" + attacked.getType().charType + \" have now \"\n+            + Colors.ANSI_RED + attacked.getHp() + Colors.ANSI_RESET + \" hit points\");\n+        attacked.isDefeated();\n+    }\n+\n+    public void dealCriticalHit(Character attacker, Character attacked) {\n+        System.out.print(\"The \" + attacker.getType().charType + \" hit the \" + attacked.getType().charType + \" with a \" + Colors.ANSI_RED\n+            + \"CRITICAL \" + Colors.ANSI_RESET + \"hit! \");\n+        attacked.setHp(monster.getHp() - attacker.damage() * 2);\n+        System.out.println(\"The damage is \" + Colors.ANSI_RED + attacker.getDamage() * 2 + Colors.ANSI_RESET + \"!\");\n+        TextSeparator.format(\"The \" + attacked.getType().charType + \" have now \"\n+            + Colors.ANSI_RED + attacked.getHp() + Colors.ANSI_RESET + \" hit points\");\n+        attacked.isDefeated();\n     }\n \n     public void monsterDefeated() {\n         if (!monster.getType().equals(CharacterTypes.GOBLIN_KING)) {\n-            monsterFactory.setKilledMonsterCounter(monsterFactory.getKilledMonsterCounter() + 1);\n+            characterFactory.setKilledMonsterCounter(characterFactory.getKilledMonsterCounter() + 1);\n             monsterCounter--;\n+            charactersInBattle.remove(monster);\n             System.out.println(\"You found a healing potion!\");\n             if (champion.getHealingPotionCounter() < 5) {\n                 champion.setHealingPotionCounter(champion.getHealingPotionCounter() + 1);\n             } else {\n                 System.out.println(\"You can't have more than 5 healing potions!\");\n             }\n-            monsterIncoming();\n         } else {\n+            monsterCounter--;\n             textOfWin();\n         }\n     }\n \n-    public void monsterAccuracy() {\n-        if (monster.getHp() > 0) {\n-            System.out.println(\"Champion's defense: \" + champion.getDefense());\n-            if (monster.accuracyCalculation() > champion.getDefense()){\n-                monsterAttack();\n-            } else TextSeparator.format(monster.getType().charType + \"'s hit miss!\");\n-        }\n-    }\n-\n-    public void championAccuracy() {\n-        if (champion.getHp() > 0) {\n-            System.out.println(monster.getType().charType + \"'s defense: \" + monster.getDefense());\n-            if (champion.accuracyCalculation() > monster.getDefense()) {\n-                championAttack();\n-            } else TextSeparator.format(\"Champion's hit miss!\");\n-        }\n-    }\n-\n-    public void monsterAttack() {\n-        if (monster.getHp() > 0) {\n-            System.out.print(\"The \" +monster.getType().charType + \" hit you: \");\n-            champion.setHp(champion.getHp() - monster.getMonsterDamage());\n-            TextSeparator.format(\"Champion have now \" + Colors.ANSI_RED + champion.getHp() + Colors.ANSI_RESET\n-                    + \" hit points\");\n-            champion.enemyVictory();\n-        }\n-    }\n-\n-    public void championAttack() {\n-        if (champion.getHp() > 0) {\n-            System.out.print(\"The Champion hit the \" + monster.getType().charType + \"! \");\n-            monster.setHp(monster.getHp() - champion.championDamage());\n-            TextSeparator.format(\"The \" + monster.getType().charType + \" have now \"\n-                    + Colors.ANSI_RED + monster.getHp() + Colors.ANSI_RESET + \" hit points\");\n-        }\n+    private void textOfWin() {\n+        System.out.println(\"The Dungeon is clear! You killed \" + characterFactory.getKilledMonsterCounter() +\n+            \" monster (not counting the many mothers and children), you win!\");\n     }\n \n     public boolean nextTurn() {\n-        if (champion.getHp() > 0 && monster.getHp() > 0 && monsterCounter > 0)\n-            return true;\n-        else\n+        if (champion.getHp() <= 0 || monster.getHp() <= 0 && monster.getType() == CharacterTypes.GOBLIN_KING)\n             return false;\n+        else\n+            return true;\n     }\n-\n-    public Champion getChampion() {\n-        return champion;\n-    } //TODO kérdés Gergőnek: ez miért így van, miért nem @getter -el?\n }\n\\ No newline at end of file"
  },
  {
    "sha": "17fbebb502b3e28e3fdcec5a2298aef379f9cd6e",
    "filename": "src/main/java/hu/dungeonhunter/tools/Menu.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/tools/Menu.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/main/java/hu/dungeonhunter/tools/Menu.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/main/java/hu/dungeonhunter/tools/Menu.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -6,15 +6,19 @@\n import java.util.Scanner;\n \n public class Menu {\n+\n     Fight fight = new Fight();\n \n-    public void actionMenu() {\n+    public void toTheCave(){\n+        fight.enterToTheCave();\n+    }\n \n+    public void actionMenu() {\n         while (fight.nextTurn()) {\n             int chosenNumber = chosenNumber();\n             switch (chosenNumber) {\n                 case 1:\n-                    fight.initiationCalculation();\n+                    fight.initiationCalc();\n                     break;\n                 case 2:\n                     fight.runningAway();"
  },
  {
    "sha": "2ff4d55d345da247b78cd7911f510c729a2335af",
    "filename": "src/test/java/hu/dungeonhunter/TestChampion.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestChampion.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestChampion.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/test/java/hu/dungeonhunter/TestChampion.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -0,0 +1,33 @@\n+package hu.dungeonhunter;\n+\n+import hu.dungeonhunter.characters.champion.Champion;\n+import hu.dungeonhunter.tools.Dice;\n+import hu.dungeonhunter.tools.Fight;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestChampion {\n+    private Fight fight = new Fight();\n+    private Champion champion = new Champion();\n+\n+    @Test\n+    public void attackInitiationCalculationChampionTest(){\n+        champion.setInitiation(10);\n+        fight.setChampion(champion);\n+\n+        int championInitiation = champion.initiationCalculation();\n+\n+        assertThat(championInitiation).isBetween(11,20);\n+    }\n+\n+    @Test\n+    public void accuracyCalculationChampionTest(){\n+        champion.setAccuracy(10);\n+        fight.setChampion(champion);\n+\n+        int championAccuracy = champion.accuracyCalculation(Dice.rollDice(1, 1));\n+\n+        assertThat(championAccuracy).isEqualTo(11);\n+    }\n+}"
  },
  {
    "sha": "c853411feb806d6b03d54d176be869af8b19ea2c",
    "filename": "src/test/java/hu/dungeonhunter/TestDice.java",
    "status": "modified",
    "additions": 8,
    "deletions": 9,
    "changes": 17,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestDice.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestDice.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/test/java/hu/dungeonhunter/TestDice.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -1,9 +1,8 @@\n package hu.dungeonhunter;\n \n import hu.dungeonhunter.characters.champion.Champion;\n-import hu.dungeonhunter.characters.monsters.Goblin;\n-import hu.dungeonhunter.characters.monsters.MonsterFactory;\n-import hu.dungeonhunter.characters.monsters.MonstersInterface;\n+import hu.dungeonhunter.characters.CharacterFactory;\n+import hu.dungeonhunter.characters.Character;\n import hu.dungeonhunter.model.CharacterTypes;\n import hu.dungeonhunter.tools.Dice;\n import hu.dungeonhunter.tools.Fight;\n@@ -13,7 +12,7 @@\n \n public class TestDice {\n \n-    private MonsterFactory monsterFactory = new MonsterFactory();\n+    private CharacterFactory characterFactory = new CharacterFactory();\n     private Fight fight = new Fight();\n \n     @Test\n@@ -36,20 +35,20 @@ public void testRollDice1d10() {\n \n     @Test\n     public void championWinTest() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n         monster.setHp(0);\n         fight.setMonster(monster);\n \n-        monster.isDefeat();\n-        assertThat(monster.isDefeat()).as(\"championWinTest\").isTrue();\n+        monster.isDefeated();\n+        assertThat(monster.isDefeated()).as(\"championWinTest\").isTrue();\n     }\n \n     @Test\n     public void monsterWinTest() {\n         Champion champion = new Champion();\n         champion.setHp(0);\n-        champion.enemyVictory();\n-        assertThat(champion.isDefeat()).as(\"monsterWinTest\").isTrue();\n+        champion.isDefeated();\n+        assertThat(champion.isDefeated()).as(\"monsterWinTest\").isTrue();\n     }\n \n     @Test"
  },
  {
    "sha": "9bd1265e6dd497c74d0104d9cb19be38c534737b",
    "filename": "src/test/java/hu/dungeonhunter/TestFight.java",
    "status": "modified",
    "additions": 483,
    "deletions": 477,
    "changes": 960,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestFight.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestFight.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/test/java/hu/dungeonhunter/TestFight.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -2,38 +2,37 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import org.assertj.core.api.Assertions;\n import org.assertj.core.api.SoftAssertions;\n import org.junit.Test;\n import hu.dungeonhunter.characters.champion.Champion;\n import hu.dungeonhunter.tools.Fight;\n import hu.dungeonhunter.model.CharacterTypes;\n-import hu.dungeonhunter.characters.monsters.MonstersInterface;\n-import hu.dungeonhunter.characters.monsters.MonsterFactory;\n+import hu.dungeonhunter.characters.Character;\n+import hu.dungeonhunter.characters.CharacterFactory;\n \n public class TestFight {\n \n     private SoftAssertions softly = new SoftAssertions(); // akkor van értelme amikor több assert van egy metódusban,\n     // az összes hibásat kiadja, nem csak az elsőt. softly.assertAll(); //ezzel gyűjti be a hibás asserteket, ha ez nincs, akkor nem dobja fel a hibákat!!!\n \n-    private MonsterFactory monsterFactory = new MonsterFactory();\n+    private CharacterFactory characterFactory = new CharacterFactory();\n     private Fight fight = new Fight();\n     private Champion champion = new Champion();\n \n     //segítő változók\n     int startingMonsterCounter = fight.getMonsterCounter();\n-    int startingKilledMonsterCounter = monsterFactory.getKilledMonsterCounter();\n+    int startingKilledMonsterCounter = characterFactory.getKilledMonsterCounter();\n     int startingHealingPotionCounter = champion.getHealingPotionCounter();\n \n     //segítő meghívások\n     private void defeatedGoblin() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n         monster.setHp(0);\n         fight.setMonster(monster);\n     }\n \n     private void defeatedGoblinKing() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN_KING);\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN_KING);\n         monster.setHp(0);\n         fight.setMonster(monster);\n     }\n@@ -45,13 +44,13 @@ private void defeatedChampion() {\n     }\n \n     private void lowHpGoblin() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n         monster.setHp(1);\n         fight.setMonster(monster);\n     }\n \n     private void lowHpGoblinKing() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN_KING);\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN_KING);\n         monster.setHp(1);\n         fight.setMonster(monster);\n     }\n@@ -63,7 +62,7 @@ private void lowHpChampion() {\n     }\n \n     private void highHpGoblin() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n         monster.setHp(1000);\n         fight.setMonster(monster);\n     }\n@@ -73,11 +72,11 @@ private void highHpChampion() {\n         champion.setHp(1000);\n         fight.setChampion(lowHpChampion);\n     }\n-    //segítő assertek\n \n+    //segítő assertek\n     private void ifAssertThatIsChampionStillAlive() {\n-        softly.assertThat(fight.getChampion().getHp()).as(\"Champion still alive\").isGreaterThan(0);\n-        softly.assertThat(fight.nextTurn()).as(\"There should be no next turn.\").isTrue();\n+        softly.assertThat(fight.getChampion().getHp()).as(\"Champion should be still alive\").isGreaterThan(0);\n+        softly.assertThat(fight.nextTurn()).as(\"There should be next turn.\").isTrue();\n     }\n \n     private void ifAssertThatIsChampionDefeated() {\n@@ -86,480 +85,487 @@ private void ifAssertThatIsChampionDefeated() {\n     }\n \n     private void ifAssertThatIsMonsterStillAlive() {\n-        softly.assertThat(fight.getMonster().getHp()).as(\"Goblin or Goblin king still alive after damage\").isGreaterThan(0);\n+        softly.assertThat(fight.getMonster().getHp()).as(\"Goblin or Goblin king should be still alive after damage\").isGreaterThan(0);\n     }\n \n     private void ifAssertThatIsMonsterDefeated() {\n         softly.assertThat(fight.getMonster().getHp()).as(\"Goblin or Goblin King defeated\").isLessThan(1);\n     }\n-\n-    @Test\n-    public void goblinKingDamageTest() {\n-        lowHpChampion();\n-\n-        fight.goblinKingDamage();\n-\n-        ifAssertThatIsChampionDefeated();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void runningAwayFromGoblinKingTest() {\n-        lowHpGoblinKing();\n-        lowHpChampion();\n-\n-        fight.runningAway();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void runningAwayWithGoblinHitChampStillAliveTest() {\n-        highHpChampion();\n-        lowHpGoblin();\n-\n-        fight.runningAway();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void runningAwayWithGoblinHitChampDefeatedTest() {\n-        lowHpChampion();\n-        lowHpGoblin();\n-\n-\n-        fight.runningAway();\n-\n-        ifAssertThatIsChampionDefeated();\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterIncomingRandomEnemyTest() {\n-        fight.setMonsterCounter(10);\n-\n-        fight.monsterIncoming();\n-\n-        assertThat(fight.getRandomEnemy()).isBetween(1, 10);\n-    }\n-\n-    @Test\n-    public void monsterCallerGoblinKingTest() {\n-        fight.setRandomEnemy(1);\n-        highHpGoblin();\n-\n-        fight.monsterCaller();\n-\n-        assertThat(fight.getMonster().getNumOfDices()).as(\"goblinKing have 2 numOfDices\").isEqualTo(2);\n-    }\n-\n-    @Test\n-    public void monsterCallerGoblinTest() {\n-        fight.setRandomEnemy(10);\n-        highHpGoblin();\n-\n-        fight.monsterCaller();\n-\n-        assertThat(fight.getMonster().getNumOfDices()).as(\"goblin have 1 numOfDices\").isEqualTo(1);\n-    }\n-\n-    @Test\n-    public void initiationCalculationWithSameFinalInitiationTest(){\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setHp(1);\n-        monster.setAccuracy(1000);\n-        monster.setInitiation(1000);\n-        fight.setMonster(monster);\n-        champion.setHp(1);\n-        fight.setChampion(champion);\n-        fight.setLoopcounter(1);\n-        fight.setMonsterFinalInitiation(1000);\n-        fight.setChampionFinalInitiation(1000);\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionDefeated();\n-        assertThat(fight.getLoopcounter()).isEqualTo(0); //+1 for same finalInitiation and setting to 0 for not equal finalInitiation\n-    }\n-\n-    @Test\n-    public void initiationCalculationWithSameFinalInitiationWithInfinityLoopExceptionTest() throws RuntimeException {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setHp(1);\n-        monster.setAccuracy(1000);\n-        monster.setInitiation(1000);\n-        fight.setMonster(monster);\n-        champion.setHp(1);\n-        fight.setChampion(champion);\n-        fight.setLoopcounter(99);\n-        fight.setMonsterFinalInitiation(1000);\n-        fight.setChampionFinalInitiation(1000);\n-\n-        Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> fight.battle());\n-\n-        ifAssertThatIsChampionDefeated();\n-        assertThat(fight.getLoopcounter()).isEqualTo(100);\n-    }\n-\n-    @Test\n-    public void battleMonsterWithHighInitiationAndHighAccuracyTest() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setAccuracy(1000);\n-        fight.setMonster(monster);\n-        fight.setMonsterFinalInitiation(1000);\n-        lowHpChampion();\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionDefeated();\n-        ifAssertThatIsMonsterStillAlive();\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter);\n-        softly.assertThat(fight.nextTurn()).isFalse();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void battleMonsterWithLowHpHighInitiationAndChampWithHighDefenseAndAccuracyTest() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setHp(1);\n-        fight.setMonster(monster);\n-        fight.setMonsterFinalInitiation(1000);\n-        Champion champion = new Champion();\n-        champion.setHp(1 + fight.getMonster().getMaxDamage());\n-        champion.setAccuracy(1000);\n-        champion.setDefense(1000);\n-        fight.setChampion(champion);\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter + 1);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter + 1);\n-        ifAssertThatIsMonsterStillAlive(); //this is the new monster\n-        softly.assertThat(fight.nextTurn()).isTrue();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void battleMonsterWithHighInitiationAndHighDefenseAndChampWithHighDefenseTest() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setDefense(1000);\n-        fight.setMonster(monster);\n-        fight.setMonsterFinalInitiation(1000);\n-        Champion champion = new Champion();\n-        champion.setHp(1);\n-        champion.setDefense(1000);\n-        fight.setChampion(champion);\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        ifAssertThatIsMonsterStillAlive();\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter);\n-        softly.assertThat(fight.nextTurn()).isTrue();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void battleChampionWithHighInitiationAndHighAccuracyTest() {\n-        lowHpGoblin();\n-        Champion champion = new Champion();\n-        champion.setHp(1 + fight.getMonster().getMaxDamage());\n-        champion.setAccuracy(1000);\n-        fight.setChampion(champion);\n-        fight.setChampionFinalInitiation(1000);\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter + 1);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter + 1);\n-        ifAssertThatIsChampionStillAlive(); //this is the new goblin\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void battleChampionWithHighInitiationAndMonsterWithHighAccuracyAndDefenseTest() {\n-        Champion champion = new Champion();\n-        champion.setHp(1);\n-        fight.setChampion(champion);\n-        fight.setChampionFinalInitiation(1000);\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setAccuracy(1000);\n-        monster.setDefense(1000);\n-        fight.setMonster(monster);\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionDefeated();\n-        ifAssertThatIsMonsterStillAlive();\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter);\n-        softly.assertThat(fight.nextTurn()).isFalse();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void battleChampionWithHighInitiationAndHighDefenseAndMonsterWithHighDefenseTest() {\n-        Champion champion = new Champion();\n-        champion.setHp(1);\n-        champion.setDefense(1000);\n-        fight.setChampion(champion);\n-        fight.setChampionFinalInitiation(1000);\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setDefense(1000);\n-        fight.setMonster(monster);\n-\n-        fight.battle();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        ifAssertThatIsMonsterStillAlive();\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter);\n-        softly.assertThat(fight.nextTurn()).isTrue();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterDefeatedWithDefeatedGoblinTest() {\n-        defeatedGoblin();\n-\n-        fight.monsterDefeated();\n-\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter + 1);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter + 1);\n-        ifAssertThatIsChampionStillAlive(); //this is the new goblin\n-        softly.assertThat(fight.nextTurn()).isTrue();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterDefeatedWithDefeatedGoblinAndHealingPotionOnMaxTest() {\n-        defeatedGoblin();\n-        champion.setHealingPotionCounter(5);\n-        int toTestHealingPotionCounter = champion.getHealingPotionCounter();\n-\n-        fight.monsterDefeated();\n-\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter + 1);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n-        softly.assertThat(champion.getHealingPotionCounter()).isEqualTo(toTestHealingPotionCounter);\n-        ifAssertThatIsChampionStillAlive(); //this is the new goblin\n-        softly.assertThat(fight.nextTurn()).isTrue();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterDefeatedWithDefeatedGoblinKingTest() {\n-        defeatedGoblinKing();\n-\n-        fight.monsterDefeated();\n-\n-        softly.assertThat(fight.getMonsterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter);\n-        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n-        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter);\n-        ifAssertThatIsMonsterDefeated(); //dont call new monster\n-        softly.assertThat(fight.nextTurn()).isFalse();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterAccuracyAliveMonsterWithHighAccuracyTest() {\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setAccuracy(1000);\n-        fight.setMonster(monster);\n-        lowHpChampion();\n-\n-        fight.monsterAccuracy();\n-\n-        ifAssertThatIsChampionDefeated();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterAccuracyAliveMonsterAndChampWithHighDefenseTest() {\n+//\n+//    @Test\n+//    public void goblinKingDamageTest() {\n+//        lowHpChampion();\n+//\n+//        fight.goblinKingDamage();\n+//\n+//        ifAssertThatIsChampionDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void runningAwayFromGoblinKingTest() {\n+//        lowHpGoblinKing();\n+//        lowHpChampion();\n+//\n+//        fight.runningAway();\n+//\n+//        ifAssertThatIsChampionStillAlive();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void runningAwayWithGoblinHitChampStillAliveTest() {\n+//        highHpChampion();\n+//        lowHpGoblin();\n+//\n+//        fight.runningAway();\n+//\n+//        ifAssertThatIsChampionStillAlive();\n+//        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void runningAwayWithGoblinHitChampDefeatedTest() {\n+//        lowHpChampion();\n+//        lowHpGoblin();\n+//\n+//\n+//        fight.runningAway();\n+//\n+//        ifAssertThatIsChampionDefeated();\n+//        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterIncomingRandomEnemyTest() {\n+//        fight.setMonsterCounter(10);\n+//\n+//        fight.monsterIncoming();\n+//\n+//        assertThat(fight.getRandomEnemy()).isBetween(1, 10);\n+//    }\n+//\n+//    @Test\n+//    public void monsterCallerGoblinKingTest() {\n+//        fight.setRandomEnemy(1);\n+//        highHpGoblin();\n+//\n+//        fight.monsterCaller();\n+//\n+//        assertThat(fight.getMonster().getNumOfDices()).as(\"goblinKing have 2 numOfDices\").isEqualTo(2);\n+//    }\n+//\n+//    @Test\n+//    public void monsterCallerGoblinTest() {\n+//        fight.setRandomEnemy(10);\n+//        highHpGoblin();\n+//\n+//        fight.monsterCaller();\n+//\n+//        assertThat(fight.getMonster().getNumOfDices()).as(\"goblin have 1 numOfDices\").isEqualTo(1);\n+//    }\n+//\n+////    @Test\n+////    public void fightInitiationCalculationChampionTest() {\n+////        Champion champion = new Champion();\n+////        champion.setInitiation(10);\n+////        fight.setChampion(champion);\n+////        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+////        fight.setMonster(monster);\n+////\n+////        fight.initiationCalc();\n+////\n+////        assertThat(fight.getChampionFinalInitiation()).isBetween(11, 20);\n+////    }\n+////\n+////    @Test\n+////    public void fightInitiationCalculationMonsterTest() {\n+////        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+////        monster.setInitiation(10);\n+////        fight.setMonster(monster);\n+////\n+////        fight.initiationCalc();\n+////\n+////        assertThat(fight.getMonsterFinalInitiation()).isBetween(11, 20);\n+////    }\n+////\n+////    @Test\n+////    public void initiationCalculationWithSameFinalInitiationWithInfinityLoopExceptionTest() throws RuntimeException {\n+////        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+////        monster.setHp(1);\n+////        monster.setAccuracy(1000);\n+////        monster.setInitiation(1000);\n+////        fight.setMonster(monster);\n+////        champion.setHp(1);\n+////        fight.setChampion(champion);\n+////        fight.setLoopCounter(99);\n+////        fight.setMonsterFinalInitiation(1000);\n+////        fight.setChampionFinalInitiation(1000);\n+////\n+////        Assertions.assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> fight.battle());\n+////\n+////        ifAssertThatIsChampionDefeated();\n+////        assertThat(fight.getLoopCounter()).isEqualTo(100);\n+////    }\n+//\n+//    @Test\n+//    public void monsterAccuracyCalculationIfMonsterIsAliveTest() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setHp(1);\n+//        monster.setAccuracy(100);\n+//        fight.setMonster(monster);\n+//\n+//        fight.monsterAccuracyCalculation();\n+//\n+//        assertThat(fight.getFinalAccuracy()).isBetween(101, 200);\n+//        assertThat(fight.getMonster().getAccuracyRoll()).isBetween(1, 100);\n+//    }\n+//\n+//    @Test\n+//    public void monsterAccuracyCalculationIfMonsterIsDefeated() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setHp(0);\n+//        monster.setAccuracy(100);\n+//        fight.setMonster(monster);\n+//\n+//        fight.monsterAccuracyCalculation();\n+//\n+//        assertThat(fight.getFinalAccuracy()).isEqualTo(0);\n+//        assertThat(fight.getMonster().getAccuracyRoll()).isEqualTo(0);\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyCalculationIfChampionIsAliveTest() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        fight.setMonster(monster);\n+//        champion.setHp(1);\n+//        champion.setAccuracy(100);\n+//        fight.setChampion(champion);\n+//\n+//        fight.championAccuracyCalculation();\n+//\n+//        assertThat(fight.getFinalAccuracy()).isBetween(101, 200);\n+//        assertThat(fight.getChampion().getAccuracyRoll()).isBetween(1, 100);\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyCalculationIfChampionIsDefeated() {\n+//        champion.setHp(0);\n+//        champion.setAccuracy(100);\n+//        fight.setChampion(champion);\n+//\n+//        fight.championAccuracyCalculation();\n+//\n+//        assertThat(fight.getFinalAccuracy()).isEqualTo(0);\n+//        assertThat(fight.getChampion().getAccuracyRoll()).isEqualTo(0);\n+//    }\n+//\n+//    @Test\n+//    public void monsterAccuracyIfAccuracyRollIs1Test() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setAccuracyRoll(1);\n+//        fight.setMonster(monster);\n+//        fight.setRandomCriticalMissEvent(5);\n+//\n+//        fight.monsterAccuracy();\n+//\n+//        softly.assertThat(fight.getRandomCriticalMissEvent()).isLessThan(5);\n+//\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyIfAccuracyRollIs1Test() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        fight.setMonster(monster);\n+//        Champion champion = new Champion();\n+//        champion.setAccuracyRoll(1);\n+//        fight.setChampion(champion);\n+//        fight.setRandomCriticalMissEvent(5);\n+//\n+//        fight.championAccuracy();\n+//\n+//        softly.assertThat(fight.getRandomCriticalMissEvent()).isLessThan(5);\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championCriticalMissEvent1Test() {\n+//        Champion champion = new Champion();\n+//        champion.setHp(1);\n+//        fight.setChampion(champion);\n+//        fight.setRandomCriticalMissEvent(1);\n+//        int[] championHpAfterDamage = {fight.getChampion().getHp() - fight.getChampion().getMaxDamage(),\n+//                fight.getChampion().getHp() - fight.getChampion().getNumOfDices()};\n+//\n+//        fight.championCriticalMissEvent();\n+//\n+//        softly.assertThat(fight.getChampion().getHp()).isBetween(championHpAfterDamage[0], championHpAfterDamage[1]);\n+//        ifAssertThatIsChampionDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterCriticalMissEvent1Test() {\n+//        lowHpGoblin();\n+//        fight.setRandomCriticalMissEvent(1);\n+//        int[] monsterHpAfterDamage = {fight.getMonster().getHp() - fight.getMonster().getMaxDamage(),\n+//                fight.getMonster().getHp() - fight.getMonster().getNumOfDices()};\n+//\n+//        fight.criticalMissEvent();\n+//\n+//        softly.assertThat(fight.getMonster().getHp()).isBetween(monsterHpAfterDamage[0], monsterHpAfterDamage[1]);\n+//        ifAssertThatIsMonsterDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championCriticalMissEvent2Test() {\n+//        Champion champion = new Champion();\n+//        champion.setMaxDamage(6);\n+//        fight.setRandomCriticalMissEvent(2);\n+//\n+//        fight.championCriticalMissEvent();\n+//\n+//        assertThat(fight.getChampion().getMaxDamage()).isEqualTo(5);\n+//    }\n+//\n+//    @Test\n+//    public void monsterCriticalMissEvent2Test() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setMaxDamage(6);\n+//        fight.setMonster(monster);\n+//        fight.setRandomCriticalMissEvent(2);\n+//\n+//        fight.criticalMissEvent();\n+//\n+//        assertThat(fight.getMonster().getMaxDamage()).isEqualTo(5);\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyIfAccuracyRollIs100Test() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setHp(10);\n+//        monster.setDefense(1000);\n+//        fight.setMonster(monster);\n+//        champion.setAccuracyRoll(100);\n+//        champion.setHp(10);\n+//        fight.setChampion(champion);\n+//        int[] monsterHpAfterDamage = {fight.getMonster().getHp() - (fight.getChampion().getMaxDamage()) * 10,\n+//                fight.getMonster().getHp() - (fight.getChampion().getNumOfDices()) * 10};\n+//\n+//        fight.championAccuracy();\n+//\n+//        softly.assertThat(fight.getMonster().getHp()).isBetween(monsterHpAfterDamage[0], monsterHpAfterDamage[1]);\n+//        ifAssertThatIsMonsterDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterAccuracyIfAccuracyRollIs100Test() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setAccuracyRoll(100);\n+//        fight.setMonster(monster);\n+//        champion.setHp(10);\n+//        champion.setDefense(1000);\n+//        fight.setChampion(champion);\n+//        int[] championHpAfterDamage = {fight.getChampion().getHp() - (fight.getMonster().getMaxDamage()) * 10,\n+//                fight.getChampion().getHp() - (fight.getMonster().getNumOfDices()) * 10};\n+//\n+//        fight.monsterAccuracy();\n+//\n+//        softly.assertThat(fight.getChampion().getHp()).isBetween(championHpAfterDamage[0], championHpAfterDamage[1]);\n+//        ifAssertThatIsChampionDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyIfHitTest() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setHp(1);\n+//        monster.setDefense(50);\n+//        fight.setMonster(monster);\n+//        fight.setFinalAccuracy(51);\n+//        int[] monsterHpAfterDamage = {fight.getMonster().getHp() - fight.getChampion().getMaxDamage(),\n+//                fight.getMonster().getHp() - fight.getChampion().getNumOfDices()};\n+//\n+//        fight.championAccuracy();\n+//\n+//        softly.assertThat(fight.getMonster().getHp()).isBetween(monsterHpAfterDamage[0], monsterHpAfterDamage[1]);\n+//        ifAssertThatIsMonsterDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterAccuracyIfHitTest() {\n+//        lowHpGoblin();\n+//        Champion champion = new Champion();\n+//        champion.setHp(1);\n+//        champion.setDefense(50);\n+//        fight.setChampion(champion);\n+//        fight.setFinalAccuracy(51);\n+//        int[] championHpAfterDamage = {fight.getChampion().getHp() - fight.getMonster().getMaxDamage(),\n+//                fight.getChampion().getHp() - fight.getMonster().getNumOfDices()};\n+//\n+//        fight.monsterAccuracy();\n+//\n+//        softly.assertThat(fight.getChampion().getHp()).isBetween(championHpAfterDamage[0], championHpAfterDamage[1]);\n+//        ifAssertThatIsChampionDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyIfMissHitTest() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setHp(1);\n+//        monster.setDefense(50);\n+//        fight.setMonster(monster);\n+//        fight.setFinalAccuracy(49);\n+//\n+//        fight.championAccuracy();\n+//\n+//        softly.assertThat(fight.getChampion().getDamage()).isEqualTo(0);\n+//        ifAssertThatIsMonsterStillAlive();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterAccuracyIfMissHitTest() {\n+//        lowHpGoblin();\n+//        champion.setHp(1);\n+//        champion.setDefense(50);\n+//        fight.setChampion(champion);\n+//        fight.setFinalAccuracy(49);\n+//\n+//        fight.monsterAccuracy();\n+//\n+//        ifAssertThatIsChampionStillAlive();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championAccuracyIfCriticalHitTest() {\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setHp(2);\n+//        monster.setDefense(50);\n+//        fight.setMonster(monster);\n+//        fight.setFinalAccuracy(101);\n+//        int[] monsterHpAfterDamage = {fight.getMonster().getHp() - (fight.getChampion().getMaxDamage()) * 2,\n+//                fight.getMonster().getHp() - (fight.getChampion().getNumOfDices()) * 2};\n+//\n+//        fight.championAccuracy();\n+//\n+//        softly.assertThat(fight.getMonster().getHp()).isBetween(monsterHpAfterDamage[0], monsterHpAfterDamage[1]);\n+//        ifAssertThatIsMonsterDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+    @Test\n+    public void monsterAccuracyIfCriticalHitTest() {\n         lowHpGoblin();\n-        Champion champion = new Champion();\n-        champion.setHp(1);\n-        champion.setDefense(1000);\n+        champion.setHp(2);\n+        champion.setDefense(50);\n         fight.setChampion(champion);\n+        int[] championHpAfterDamage = {fight.getChampion().getHp() - (fight.getMonster().getMaxDamage()) * 2,\n+            fight.getChampion().getHp() - (fight.getMonster().getNumOfDices()) * 2};\n \n-        fight.monsterAccuracy();\n-\n-        ifAssertThatIsChampionStillAlive();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterAccuracyGoblinDefeated() {\n-        defeatedGoblin();\n-\n-        fight.monsterAccuracy();\n-\n-        assertThat(fight.nextTurn()).isFalse();\n-    }\n-\n-    @Test\n-    public void championAccuracyAliveChampionWithHighAccuracyTest() {\n-        Champion champion = new Champion();\n-        champion.setHp(1);\n-        champion.setAccuracy(1000);\n-        fight.setChampion(champion);\n-\n-        lowHpGoblin();\n-\n-        fight.championAccuracy();\n-\n-        ifAssertThatIsMonsterDefeated();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void championAccuracyAliveChampionAndMonsterWithHighDefenseTest() {\n-        lowHpChampion();\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setDefense(1000);\n-        fight.setMonster(monster);\n-\n-        fight.championAccuracy();\n-\n-        ifAssertThatIsMonsterStillAlive();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void championAccuracyGoblinDefeated() {\n-        defeatedChampion();\n-\n-        fight.championAccuracy();\n-\n-        assertThat(fight.nextTurn()).isFalse();\n-    }\n-\n-    @Test\n-    public void championAttackAliveChampionTest() {\n-        lowHpChampion();\n-        lowHpGoblin();\n-\n-        fight.championAttack();\n-\n-        ifAssertThatIsMonsterDefeated();\n-        softly.assertThat(fight.nextTurn()).as(\"There should be no next turn.\").isFalse();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void championAttackDefeatedChampionTest() {\n-        defeatedChampion();\n-        lowHpGoblin();\n-\n-        fight.championAttack();\n-\n-        ifAssertThatIsMonsterStillAlive();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void monsterAttackAliveChampionTest() {\n-        lowHpGoblin();\n-        lowHpChampion();\n-\n-        fight.monsterAttack();\n+        fight.attack(fight.getMonster(), 100);\n \n+        softly.assertThat(fight.getChampion().getHp()).isBetween(championHpAfterDamage[0], championHpAfterDamage[1]);\n         ifAssertThatIsChampionDefeated();\n         softly.assertAll();\n     }\n-\n-    @Test\n-    public void monsterAttackDefeatedMonsterTest() {\n-        defeatedGoblin();\n-        lowHpChampion();\n-\n-        fight.monsterAttack();\n-\n-        softly.assertThat(fight.getChampion().getHp()).as(\"Champion still alive\").isGreaterThan(0);\n-        softly.assertThat(fight.nextTurn()).as(\"There should be no next turn.\").isFalse();\n-        softly.assertAll();\n-    }\n-\n-    @Test\n-    public void attackInitiationCalculationChampionTest(){\n-        Champion champion = new Champion();\n-        champion.setInitiative(10);\n-        fight.setChampion(champion);\n-\n-        int championInitiation = champion.initiationCalculation();\n-\n-        assertThat(championInitiation).isBetween(11,20);\n-    }\n-\n-    @Test\n-    public void attackInitiationCalculationGoblinTest(){\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setInitiation(10);\n-        fight.setMonster(monster);\n-\n-        int monsterInitiation = monster.initiationCalculation();\n-\n-        assertThat(monsterInitiation).isBetween(11,20);\n-    }\n-\n-    @Test\n-    public void attackInitiationCalculationGoblinKingTest(){\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setInitiation(10);\n-        fight.setMonster(monster);\n-\n-        int monsterInitiation = monster.initiationCalculation();\n-\n-        assertThat(monsterInitiation).isBetween(11,20);\n-    }\n-\n-    @Test\n-    public void accuracyCalculationChampionTest(){\n-        Champion champion = new Champion();\n-        champion.setAccuracy(10);\n-        fight.setChampion(champion);\n-\n-        int championAccuracy = champion.accuracyCalculation();\n-\n-        assertThat(championAccuracy).isBetween(11,110);\n-\n-    }\n-\n-    @Test\n-    public void accuracyCalculationGoblinTest(){\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setAccuracy(10);\n-        fight.setMonster(monster);\n-\n-        int monsterAccuracy = monster.accuracyCalculation();\n-\n-        assertThat(monsterAccuracy).isBetween(11,110);\n-    }\n-\n-    @Test\n-    public void accuracyCalculationGoblinKingTest(){\n-        MonstersInterface monster = monsterFactory.getMonster(CharacterTypes.GOBLIN);\n-        monster.setAccuracy(10);\n-        fight.setMonster(monster);\n-\n-        int monsterAccuracy = monster.accuracyCalculation();\n-\n-        assertThat(monsterAccuracy).isBetween(11,110);\n-    }\n+//\n+//    @Test\n+//    public void championAttackAliveChampionTest() {\n+//        lowHpChampion();\n+//        lowHpGoblin();\n+//\n+//        fight.dealDamage();\n+//\n+//        ifAssertThatIsMonsterDefeated();\n+//        softly.assertThat(fight.nextTurn()).as(\"There should be no next turn.\").isFalse();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterAttackAliveChampionTest() {\n+//        lowHpGoblin();\n+//        lowHpChampion();\n+//\n+//        fight.monsterAttack();\n+//\n+//        ifAssertThatIsChampionDefeated();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void championAttackDefeatedChampionTest() {\n+//        defeatedChampion();\n+//        lowHpGoblin();\n+//\n+//        fight.dealDamage();\n+//\n+//        ifAssertThatIsMonsterStillAlive();\n+//        softly.assertAll();\n+//    }\n+//\n+//\n+//    @Test\n+//    public void monsterAttackDefeatedMonsterTest() {\n+//        defeatedGoblin();\n+//        lowHpChampion();\n+//\n+//        fight.monsterAttack();\n+//\n+//        softly.assertThat(fight.getChampion().getHp()).as(\"Champion still alive\").isGreaterThan(0);\n+//        softly.assertThat(fight.nextTurn()).as(\"There should be no next turn.\").isFalse();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterDefeatedWithDefeatedGoblinTest() {\n+//        defeatedGoblin();\n+//\n+//        fight.monsterDefeated();\n+//\n+//        softly.assertThat(fight.getCharacterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter + 1);\n+//        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n+//        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter + 1);\n+//        ifAssertThatIsChampionStillAlive(); //this is the new goblin\n+//        softly.assertThat(fight.nextTurn()).isTrue();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterDefeatedWithDefeatedGoblinAndHealingPotionOnMaxTest() {\n+//        defeatedGoblin();\n+//        champion.setHealingPotionCounter(5);\n+//        int toTestHealingPotionCounter = champion.getHealingPotionCounter();\n+//\n+//        fight.monsterDefeated();\n+//\n+//        softly.assertThat(fight.getCharacterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter + 1);\n+//        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter - 1);\n+//        softly.assertThat(champion.getHealingPotionCounter()).isEqualTo(toTestHealingPotionCounter);\n+//        ifAssertThatIsChampionStillAlive(); //this is the new goblin\n+//        softly.assertThat(fight.nextTurn()).isTrue();\n+//        softly.assertAll();\n+//    }\n+//\n+//    @Test\n+//    public void monsterDefeatedWithDefeatedGoblinKingTest() {\n+//        defeatedGoblinKing();\n+//\n+//        fight.monsterDefeated();\n+//\n+//        softly.assertThat(fight.getCharacterFactory().getKilledMonsterCounter()).isEqualTo(startingKilledMonsterCounter);\n+//        softly.assertThat(fight.getMonsterCounter()).isEqualTo(startingMonsterCounter);\n+//        softly.assertThat(fight.getChampion().getHealingPotionCounter()).isEqualTo(startingHealingPotionCounter);\n+//        ifAssertThatIsMonsterDefeated(); //dont call new monster\n+//        softly.assertThat(fight.nextTurn()).isFalse();\n+//        softly.assertAll();\n+//    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "26075c66ba603ab073d7bc34e6098e0cea88bb9e",
    "filename": "src/test/java/hu/dungeonhunter/TestMonster.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/Dyrk84/dungeonhunter/blob/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestMonster.java",
    "raw_url": "https://github.com/Dyrk84/dungeonhunter/raw/4df81963b6c4e2f5a568636853c44c5487d8994a/src/test/java/hu/dungeonhunter/TestMonster.java",
    "contents_url": "https://api.github.com/repos/Dyrk84/dungeonhunter/contents/src/test/java/hu/dungeonhunter/TestMonster.java?ref=4df81963b6c4e2f5a568636853c44c5487d8994a",
    "patch": "@@ -0,0 +1,61 @@\n+package hu.dungeonhunter;\n+\n+import hu.dungeonhunter.characters.CharacterFactory;\n+import hu.dungeonhunter.characters.Character;\n+import hu.dungeonhunter.model.CharacterTypes;\n+import hu.dungeonhunter.tools.Fight;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestMonster {\n+\n+    private CharacterFactory characterFactory = new CharacterFactory();\n+    private Fight fight = new Fight();\n+\n+    @Test\n+    public void attackInitiationCalculationGoblinTest(){\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+        monster.setInitiation(10);\n+        fight.setMonster(monster);\n+\n+        int monsterInitiation = monster.initiationCalculation();\n+\n+        assertThat(monsterInitiation).isBetween(11,20);\n+    }\n+\n+    @Test\n+    public void attackInitiationCalculationGoblinKingTest(){\n+        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+        monster.setInitiation(10);\n+        fight.setMonster(monster);\n+\n+        int monsterInitiation = monster.initiationCalculation();\n+\n+        assertThat(monsterInitiation).isBetween(11,20);\n+    }\n+\n+\n+//    @Test\n+//    public void accuracyCalculationGoblinTest(){\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setAccuracy(10);\n+//        fight.setMonster(monster);\n+//\n+//        int monsterAccuracy = monster.accuracyCalculation();\n+//\n+//        assertThat(monsterAccuracy).isBetween(11,110);\n+//    }\n+//\n+//    @Test\n+//    public void accuracyCalculationGoblinKingTest(){\n+//        Character monster = characterFactory.getCharacter(CharacterTypes.GOBLIN);\n+//        monster.setAccuracy(10);\n+//        fight.setMonster(monster);\n+//\n+//        int monsterAccuracy = monster.accuracyCalculation();\n+//\n+//        assertThat(monsterAccuracy).isBetween(11,110);\n+//    }\n+\n+}"
  }
]
