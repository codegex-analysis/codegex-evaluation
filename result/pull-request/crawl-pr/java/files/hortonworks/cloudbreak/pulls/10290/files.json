[
  {
    "sha": "241023b7ffe111961beb735335525c38d8d3a52e",
    "filename": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProvider.java",
    "status": "modified",
    "additions": 40,
    "deletions": 8,
    "changes": 48,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/d8d73788791d94767c55c698e7292049b602388a/template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProvider.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/d8d73788791d94767c55c698e7292049b602388a/template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProvider.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProvider.java?ref=d8d73788791d94767c55c698e7292049b602388a",
    "patch": "@@ -1,26 +1,29 @@\n package com.sequenceiq.cloudbreak.cmtemplate.configproviders.raz;\n \n-import com.cloudera.api.swagger.model.ApiClusterTemplateService;\n-import com.sequenceiq.cloudbreak.template.views.HostgroupView;\n-import com.sequenceiq.common.api.type.InstanceGroupType;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n import org.springframework.stereotype.Component;\n \n+import com.cloudera.api.swagger.model.ApiClusterTemplateService;\n import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n import com.sequenceiq.cloudbreak.cmtemplate.CMRepositoryVersionUtil;\n import com.sequenceiq.cloudbreak.cmtemplate.CmTemplateProcessor;\n import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.cloudbreak.template.TemplatePreparationObject;\n-\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n+import com.sequenceiq.cloudbreak.template.model.ServiceComponent;\n+import com.sequenceiq.cloudbreak.template.views.HostgroupView;\n+import com.sequenceiq.common.api.type.InstanceGroupType;\n \n /**\n  * Enables the Ranger Raz service.\n  */\n @Component\n public class RangerRazDatahubConfigProvider extends RangerRazBaseConfigProvider {\n \n+    private static final int MIN_ZK_SERVER_COUNT = 2;\n+\n     @Override\n     public boolean isConfigurationNeeded(CmTemplateProcessor cmTemplateProcessor, TemplatePreparationObject source) {\n         return StackType.WORKLOAD == source.getStackType()\n@@ -37,11 +40,40 @@ public boolean isConfigurationNeeded(CmTemplateProcessor cmTemplateProcessor, Te\n         if (isConfigurationNeeded(cmTemplateProcessor, source)) {\n             ApiClusterTemplateService coreSettings = createTemplate();\n             Set<HostgroupView> hostgroupViews = source.getHostgroupViews();\n+            Map<String, Set<ServiceComponent>> serviceComponentsByHostGroup = cmTemplateProcessor.getServiceComponentsByHostGroup();\n+            Set<String> zkServerGroups = collectZKServers(serviceComponentsByHostGroup);\n+            boolean weHaveMoreThan2ZKServer = getZKHostNumbers(hostgroupViews, zkServerGroups);\n \n             return hostgroupViews.stream()\n-                    .filter(hg -> InstanceGroupType.GATEWAY.equals(hg.getInstanceGroupType()))\n+                    .filter(hg -> isProperHostGroupForRaz(hg, zkServerGroups, weHaveMoreThan2ZKServer))\n                     .collect(Collectors.toMap(HostgroupView::getName, v -> coreSettings));\n         }\n         return Map.of();\n     }\n+\n+    private Set<String> collectZKServers(Map<String, Set<ServiceComponent>> serviceComponentsByHostGroup) {\n+        return serviceComponentsByHostGroup.entrySet()\n+                .stream()\n+                .filter(hg -> hg.getValue().stream().findFirst().isPresent())\n+                .filter(e -> e.getValue().stream()\n+                        .filter(services -> services.getService().equals(\"ZOOKEEPER\") && services.getComponent().equals(\"SERVER\"))\n+                        .findFirst()\n+                        .isPresent()\n+                )\n+                .map(e -> e.getKey())\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private boolean getZKHostNumbers(Set<HostgroupView> hostgroupViews, Set<String> zkServerGroups) {\n+        Set<HostgroupView> groupsWhichHasZK = hostgroupViews.stream()\n+                .filter(hg -> zkServerGroups.contains(hg.getName()))\n+                .collect(Collectors.toSet());\n+        int numOfZKServers = groupsWhichHasZK.stream().mapToInt(HostgroupView::getNodeCount).sum();\n+        return numOfZKServers >= MIN_ZK_SERVER_COUNT ? true : false;\n+    }\n+\n+    private boolean isProperHostGroupForRaz(HostgroupView hg, Set<String> zookeeperGroups, boolean weHaveMoreThan2ZKServer) {\n+        return InstanceGroupType.GATEWAY.equals(hg.getInstanceGroupType())\n+                || (weHaveMoreThan2ZKServer && zookeeperGroups.contains(hg.getName()));\n+    }\n }"
  },
  {
    "sha": "af8405e052516b58a4bd5962675b7308b46dfad1",
    "filename": "template-manager-cmtemplate/src/test/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProviderTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/d8d73788791d94767c55c698e7292049b602388a/template-manager-cmtemplate/src/test/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProviderTest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/d8d73788791d94767c55c698e7292049b602388a/template-manager-cmtemplate/src/test/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProviderTest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/template-manager-cmtemplate/src/test/java/com/sequenceiq/cloudbreak/cmtemplate/configproviders/raz/RangerRazDatahubConfigProviderTest.java?ref=d8d73788791d94767c55c698e7292049b602388a",
    "patch": "@@ -9,9 +9,12 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n import com.cloudera.api.swagger.model.ApiClusterTemplateRoleConfigGroup;\n import com.cloudera.api.swagger.model.ApiClusterTemplateService;\n@@ -26,13 +29,15 @@\n import com.sequenceiq.cloudbreak.template.views.HostgroupView;\n import com.sequenceiq.common.api.type.InstanceGroupType;\n \n+@ExtendWith(MockitoExtension.class)\n public class RangerRazDatahubConfigProviderTest {\n \n-    private final RangerRazDatahubConfigProvider configProvider = new RangerRazDatahubConfigProvider();\n-\n     @Mock\n     private CmTemplateProcessor cmTemplateProcessor;\n \n+    @InjectMocks\n+    private RangerRazDatahubConfigProvider configProvider;\n+\n     static Object[][] razCloudPlatformDataProvider() {\n         return new Object[][]{\n                 // testCaseName cloudPlatform"
  }
]
