[
  {
    "sha": "ba12c5c7a3ef02d4823866d6e03abfcd951a9055",
    "filename": "cluster-api/src/main/java/com/sequenceiq/cloudbreak/cluster/api/ClusterSetupService.java",
    "status": "modified",
    "additions": 21,
    "deletions": 10,
    "changes": 31,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-api/src/main/java/com/sequenceiq/cloudbreak/cluster/api/ClusterSetupService.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-api/src/main/java/com/sequenceiq/cloudbreak/cluster/api/ClusterSetupService.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/cluster-api/src/main/java/com/sequenceiq/cloudbreak/cluster/api/ClusterSetupService.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -5,7 +5,6 @@\n import java.util.Set;\n \n import com.sequenceiq.cloudbreak.cluster.service.ClusterClientInitException;\n-import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n import com.sequenceiq.cloudbreak.domain.stack.cluster.host.HostGroup;\n import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceMetaData;\n import com.sequenceiq.cloudbreak.dto.KerberosConfig;\n@@ -27,15 +26,27 @@ String prepareTemplate(\n         String sdxStackCrn,\n         KerberosConfig kerberosConfig);\n \n-    Cluster buildCluster(\n-            Map<HostGroup, List<InstanceMetaData>> instanceMetaDataByHostGroup,\n-            TemplatePreparationObject templatePreparationObject,\n-            String sdxContext,\n-            String sdxStackCrn,\n-            Telemetry telemetry,\n-            KerberosConfig kerberosConfig,\n-            ProxyConfig proxyConfig,\n-            String template);\n+    void validateLicence();\n+\n+    void configureManagementServices(TemplatePreparationObject templatePreparationObject,\n+        String sdxContext,\n+        String sdxStackCrn,\n+        Telemetry telemetry,\n+        ProxyConfig proxyConfig);\n+\n+    void configureSupportTags(TemplatePreparationObject templatePreparationObject);\n+\n+    void updateConfig();\n+\n+    void refreshParcelRepos();\n+\n+    void installCluster(String template);\n+\n+    void startManagementServices();\n+\n+    void suppressWarnings();\n+\n+    void configureKerberos(KerberosConfig kerberosConfig) throws CloudbreakException;\n \n     void waitForHosts(Set<InstanceMetaData> hostsInCluster) throws ClusterClientInitException;\n "
  },
  {
    "sha": "4b4629410489097a0da3547f750e707ad35d8128",
    "filename": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerMgmtSetupService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerMgmtSetupService.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerMgmtSetupService.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerMgmtSetupService.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -6,7 +6,6 @@\n import java.math.BigDecimal;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.function.Consumer;\n import java.util.function.Predicate;\n \n@@ -91,9 +90,8 @@\n      * @param proxyConfig ccm proxy configuration holder\n      * @throws ApiException if there's a problem setting up management services\n      */\n-    public void setupMgmtServices(Stack stack, ApiClient apiClient, ApiHostRef cmHostRef,\n-            Set<RDSConfig> rdsConfigs, Telemetry telemetry, String sdxContextName, String sdxStackCrn,\n-            ProxyConfig proxyConfig)\n+    public void setupMgmtServices(Stack stack, ApiClient apiClient, ApiHostRef cmHostRef, Telemetry telemetry,\n+            String sdxContextName, String sdxStackCrn, ProxyConfig proxyConfig)\n             throws ApiException {\n         LOGGER.debug(\"Setting up Cloudera Management Services.\");\n         licenseService.validateClouderaManagerLicense(stack.getCreator());"
  },
  {
    "sha": "18192daa06f0d57ec59b6eb3fd3f05f183470fbb",
    "filename": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupService.java",
    "status": "modified",
    "additions": 214,
    "deletions": 178,
    "changes": 392,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupService.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupService.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupService.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -164,30 +164,6 @@ public void waitForServer(boolean defaultClusterManagerAuth) throws CloudbreakEx\n         }\n     }\n \n-    private ApiClient createApiClient() throws ClusterClientInitException {\n-        ApiClient client = null;\n-        try {\n-            client = clouderaManagerApiClientProvider.getDefaultClient(stack.getGatewayPort(), clientConfig, ClouderaManagerApiClientProvider.API_V_31);\n-            ToolsResourceApi toolsResourceApi = clouderaManagerApiFactory.getToolsResourceApi(client);\n-            toolsResourceApi.echo(\"TEST\");\n-            LOGGER.debug(\"Cloudera Manager already running, old admin user's password has not been changed yet.\");\n-            return client;\n-        } catch (ClouderaManagerClientInitException e) {\n-            throw new ClusterClientInitException(e);\n-        } catch (ApiException e) {\n-            return returnClientBasedOnApiError(client, e);\n-        }\n-    }\n-\n-    private ApiClient returnClientBasedOnApiError(ApiClient client, ApiException e) {\n-        if (org.springframework.http.HttpStatus.UNAUTHORIZED.value() == e.getCode()) {\n-            LOGGER.debug(\"Cloudera Manager already running, old admin user's password has been changed.\");\n-            return apiClient;\n-        }\n-        LOGGER.debug(\"Cloudera Manager is not running yet.\", e);\n-        return client;\n-    }\n-\n     @Override\n     public String prepareTemplate(\n             Map<HostGroup, List<InstanceMetaData>> instanceMetaDataByHostGroup,\n@@ -208,208 +184,140 @@ public String prepareTemplate(\n         } catch (CancellationException cancellationException) {\n             throw cancellationException;\n         } catch (Exception e) {\n-            LOGGER.info(\"Error while building the cluster. Message: {}\", e.getMessage(), e);\n-            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+            throw mapException(e);\n         }\n     }\n \n     @Override\n-    public Cluster buildCluster(\n-            Map<HostGroup, List<InstanceMetaData>> instanceMetaDataByHostGroup,\n-            TemplatePreparationObject templatePreparationObject,\n+    public void validateLicence() {\n+        try {\n+            clouderaManagerLicenseService.validateClouderaManagerLicense(stack.getCreator());\n+        } catch (Exception e) {\n+            throw mapException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void configureManagementServices(TemplatePreparationObject templatePreparationObject,\n             String sdxContext,\n             String sdxStackCrn,\n             Telemetry telemetry,\n-            KerberosConfig kerberosConfig,\n-            ProxyConfig proxyConfig,\n-            String template) {\n-        Cluster cluster = stack.getCluster();\n-        Long clusterId = cluster.getId();\n+            ProxyConfig proxyConfig) {\n+        String sdxContextName = Optional.ofNullable(sdxContext).map(this::createDataContext).orElse(null);\n         try {\n-            Set<InstanceMetaData> instances = instanceMetaDataByHostGroup.values().stream().flatMap(Collection::stream).collect(Collectors.toSet());\n-            waitForHosts(instances);\n-            clouderaManagerLicenseService.validateClouderaManagerLicense(stack.getCreator());\n-            String sdxContextName = Optional.ofNullable(sdxContext).map(this::createDataContext).orElse(null);\n-\n             configureCmMgmtServices(templatePreparationObject, sdxStackCrn, telemetry, sdxContextName, proxyConfig);\n-            configureCmSupportTag(templatePreparationObject);\n-            ClouderaManagerRepo clouderaManagerRepoDetails = clusterComponentProvider.getClouderaManagerRepoDetails(clusterId);\n-            ApiClusterTemplate apiClusterTemplate = JsonUtil.readValue(template, ApiClusterTemplate.class);\n-            cluster.setExtendedBlueprintText(getExtendedBlueprintText(apiClusterTemplate));\n-            LOGGER.info(\"Generated Cloudera cluster template: {}\", AnonymizerUtil.anonymize(template));\n-            ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n-            updateConfig(clouderaManagerResourceApi, stack.getType());\n-\n-            boolean prewarmed = isPrewarmed(clusterId);\n-            if (prewarmed) {\n-                refreshParcelRepos(clouderaManagerResourceApi);\n-            }\n-            installCluster(cluster, apiClusterTemplate, clouderaManagerResourceApi, prewarmed);\n-            clouderaManagerMgmtLaunchService.startManagementServices(stack, apiClient);\n-            clouderaManagerYarnSetupService.suppressWarnings(stack, apiClient);\n-            configureKerberos(kerberosConfig, clouderaManagerRepoDetails);\n-        } catch (CancellationException cancellationException) {\n-            throw cancellationException;\n         } catch (ApiException e) {\n-            LOGGER.info(\"Error while building the cluster. Message: {}; Response: {}\", e.getMessage(), e.getResponseBody(), e);\n-            String msg = extractMessage(e);\n-            throw new ClouderaManagerOperationFailedException(msg, e);\n-        } catch (CloudStorageConfigurationFailedException e) {\n-            LOGGER.info(\"Error while configuring cloud storage. Message: {}\", e.getMessage(), e);\n-            throw new ClouderaManagerOperationFailedException(clouderaManagerStorageErrorMapper.map(e, stack.cloudPlatform(), cluster), e);\n+            throw mapApiException(e);\n         } catch (Exception e) {\n-            LOGGER.info(\"Error while building the cluster. Message: {}\", e.getMessage(), e);\n-            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+            throw mapException(e);\n         }\n-        return cluster;\n     }\n \n-    private void configureKerberos(KerberosConfig kerberosConfig, ClouderaManagerRepo clouderaManagerRepoDetails)\n-            throws ApiException, CloudbreakException {\n-        if (!CMRepositoryVersionUtil.isEnableKerberosSupportedViaBlueprint(clouderaManagerRepoDetails)) {\n-            kerberosService.configureKerberosViaApi(apiClient, clientConfig, stack, kerberosConfig);\n+    @Override\n+    public void configureSupportTags(TemplatePreparationObject templatePreparationObject) {\n+        try {\n+            configureCmSupportTag(templatePreparationObject);\n+        } catch (Exception e) {\n+            throw mapException(e);\n         }\n     }\n \n-    private ApiClusterTemplate getCmTemplate(TemplatePreparationObject templatePreparationObject, String sdxContextName,\n-            Map<HostGroup, List<InstanceMetaData>> instanceMetaDataByHostGroup, ClouderaManagerRepo clouderaManagerRepoDetails, Long clusterId) {\n-\n-        List<ClouderaManagerProduct> clouderaManagerProductDetails = clusterComponentProvider.getClouderaManagerProductDetails(clusterId);\n-        Map<String, List<Map<String, String>>> hostGroupMappings = hostGroupAssociationBuilder.buildHostGroupAssociations(instanceMetaDataByHostGroup);\n-        return cmTemplateUpdater.getCmTemplate(templatePreparationObject, hostGroupMappings, clouderaManagerRepoDetails,\n-                clouderaManagerProductDetails, sdxContextName);\n-    }\n-\n-    private void configureCmMgmtServices(TemplatePreparationObject templatePreparationObject, String sdxCrn, Telemetry telemetry,\n-            String sdxContextName, ProxyConfig proxyConfig) throws ApiException {\n-        Optional<ApiHost> optionalCmHost = getCmHost(templatePreparationObject, apiClient);\n-        if (optionalCmHost.isPresent()) {\n-            ApiHost cmHost = optionalCmHost.get();\n-            ApiHostRef cmHostRef = new ApiHostRef();\n-            cmHostRef.setHostId(cmHost.getHostId());\n-            cmHostRef.setHostname(cmHost.getHostname());\n-            mgmtSetupService.setupMgmtServices(stack, apiClient, cmHostRef, templatePreparationObject.getRdsConfigs(),\n-                    telemetry, sdxContextName, sdxCrn, proxyConfig);\n-        } else {\n-            LOGGER.warn(\"Unable to determine Cloudera Manager host. Skipping management services installation.\");\n-        }\n+    @Override\n+    public void suppressWarnings() {\n+        clouderaManagerYarnSetupService.suppressWarnings(stack, apiClient);\n     }\n \n-    private void configureCmSupportTag(TemplatePreparationObject templatePreparationObject) throws ApiException {\n-        Optional<ApiHost> optionalCmHost = getCmHost(templatePreparationObject, apiClient);\n-        if (optionalCmHost.isPresent()) {\n-            clouderaManagerSupportSetupService.prepareSupportRole(apiClient, templatePreparationObject);\n-        } else {\n-            LOGGER.warn(\"Unable to determine Cloudera Manager host. Skipping support tag setup.\");\n+    @Override\n+    public void startManagementServices() {\n+        try {\n+            clouderaManagerMgmtLaunchService.startManagementServices(stack, apiClient);\n+        } catch (ApiException e) {\n+            throw mapApiException(e);\n         }\n     }\n \n-    private Optional<ApiHost> getCmHost(TemplatePreparationObject templatePreparationObject, ApiClient apiClient) throws ApiException {\n-        HostsResourceApi hostsResourceApi = clouderaManagerApiFactory.getHostsResourceApi(apiClient);\n-        return hostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()).getItems().stream().filter(\n-                host -> host.getHostname().equals(templatePreparationObject.getGeneralClusterConfigs().getPrimaryGatewayInstanceDiscoveryFQDN().get()))\n-                .findFirst();\n-    }\n-\n-    private String createDataContext(String sdxContext) {\n+    @Override\n+    public void configureKerberos(KerberosConfig kerberosConfig) {\n         Cluster cluster = stack.getCluster();\n-        String user = cluster.getCloudbreakAmbariUser();\n-        String password = cluster.getCloudbreakAmbariPassword();\n         try {\n-            ApiClient rootClient = clouderaManagerApiClientProvider.getRootClient(stack.getGatewayPort(), user, password, clientConfig);\n-            CdpResourceApi cdpResourceApi = clouderaManagerApiFactory.getCdpResourceApi(rootClient);\n-            ApiRemoteDataContext apiRemoteDataContext = JsonUtil.readValue(sdxContext, ApiRemoteDataContext.class);\n-            LOGGER.debug(\"Posting remote context to workload. EndpointId: {}\", apiRemoteDataContext.getEndPointId());\n-            return cdpResourceApi.postRemoteContext(apiRemoteDataContext).getEndPointId();\n-        } catch (ApiException | ClouderaManagerClientInitException e) {\n-            LOGGER.info(\"Error while creating data context using: {}\", sdxContext, e);\n-            throw new ClouderaManagerOperationFailedException(String.format(\"Error while creating data context: %s\", e.getMessage()), e);\n-        } catch (IOException e) {\n-            LOGGER.info(\"Failed to parse SDX context to CM API object.\", e);\n-            throw new ClouderaManagerOperationFailedException(String.format(\"Failed to parse SDX context to CM API object: %s\", e.getMessage()), e);\n-        }\n-    }\n-\n-    private void installCluster(Cluster cluster, ApiClusterTemplate apiClusterTemplate, ClouderaManagerResourceApi clouderaManagerResourceApi,\n-            boolean prewarmed) throws ApiException {\n-        Optional<ApiCluster> cmCluster = getCmClusterByName(cluster.getName());\n-        Optional<ClusterCommand> importCommand = clusterCommandRepository.findTopByClusterIdAndClusterCommandType(cluster.getId(),\n-                ClusterCommandType.IMPORT_CLUSTER);\n-        if (cmCluster.isEmpty() || importCommand.isEmpty()) {\n-            try {\n-                // addRepositories - if true the parcels repositories in the cluster template\n-                // will be added.\n-                ApiCommand apiCommand = clouderaManagerResourceApi\n-                        .importClusterTemplate(calculateAddRepositories(apiClusterTemplate, prewarmed), apiClusterTemplate);\n-                ClusterCommand clusterCommand = new ClusterCommand();\n-                clusterCommand.setClusterId(cluster.getId());\n-                clusterCommand.setCommandId(apiCommand.getId());\n-                clusterCommand.setClusterCommandType(ClusterCommandType.IMPORT_CLUSTER);\n-                importCommand = Optional.of(clusterCommandRepository.save(clusterCommand));\n-                LOGGER.debug(\"Cloudera cluster template has been submitted, cluster install is in progress\");\n-            } catch (ApiException e) {\n-                String msg = \"Installation of CDP with Cloudera Manager has failed: \" + extractMessage(e);\n-                throw new ClouderaManagerOperationFailedException(msg, e);\n+            ClouderaManagerRepo clouderaManagerRepoDetails = clusterComponentProvider.getClouderaManagerRepoDetails(cluster.getId());\n+            if (!CMRepositoryVersionUtil.isEnableKerberosSupportedViaBlueprint(clouderaManagerRepoDetails)) {\n+                kerberosService.configureKerberosViaApi(apiClient, clientConfig, stack, kerberosConfig);\n             }\n+        } catch (ApiException e) {\n+            throw mapApiException(e);\n+        } catch (Exception e) {\n+            throw mapException(e);\n         }\n-        importCommand.ifPresent(cmd -> clouderaManagerPollingServiceProvider.startPollingCmTemplateInstallation(stack, apiClient, cmd.getCommandId()));\n-    }\n-\n-    private boolean calculateAddRepositories(ApiClusterTemplate apiClusterTemplate, boolean prewarmed) {\n-        boolean addRepositories = !prewarmed;\n-        if (isVersionNewerOrEqualThanLimited(apiClusterTemplate.getCmVersion(), CLOUDERAMANAGER_VERSION_7_2_0)) {\n-            addRepositories = true;\n-        }\n-        return addRepositories;\n     }\n \n-    private Optional<ApiCluster> getCmClusterByName(String name) throws ApiException {\n-        ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n+    @Override\n+    public void installCluster(String template) {\n+        Cluster cluster = stack.getCluster();\n         try {\n-            return Optional.of(clustersResourceApi.readCluster(name));\n-        } catch (ApiException apiException) {\n-            if (apiException.getCode() != HttpStatus.SC_NOT_FOUND) {\n-                throw apiException;\n+            Optional<ApiCluster> cmCluster = getCmClusterByName(cluster.getName());\n+            boolean prewarmed = isPrewarmed(cluster.getId());\n+            Optional<ClusterCommand> importCommand = clusterCommandRepository.findTopByClusterIdAndClusterCommandType(cluster.getId(),\n+                    ClusterCommandType.IMPORT_CLUSTER);\n+            if (cmCluster.isEmpty() || importCommand.isEmpty()) {\n+                    ApiClusterTemplate apiClusterTemplate = JsonUtil.readValue(template, ApiClusterTemplate.class);\n+                    cluster.setExtendedBlueprintText(getExtendedBlueprintText(apiClusterTemplate));\n+                    ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n+                    LOGGER.info(\"Generated Cloudera cluster template: {}\", AnonymizerUtil.anonymize(template));\n+                    // addRepositories - if true the parcels repositories in the cluster template\n+                    // will be added.\n+                    ApiCommand apiCommand = clouderaManagerResourceApi\n+                            .importClusterTemplate(calculateAddRepositories(apiClusterTemplate, prewarmed), apiClusterTemplate);\n+                    ClusterCommand clusterCommand = new ClusterCommand();\n+                    clusterCommand.setClusterId(cluster.getId());\n+                    clusterCommand.setCommandId(apiCommand.getId());\n+                    clusterCommand.setClusterCommandType(ClusterCommandType.IMPORT_CLUSTER);\n+                    importCommand = Optional.of(clusterCommandRepository.save(clusterCommand));\n+                    LOGGER.debug(\"Cloudera cluster template has been submitted, cluster install is in progress\");\n             }\n-            return Optional.empty();\n+            importCommand.ifPresent(cmd -> clouderaManagerPollingServiceProvider.startPollingCmTemplateInstallation(stack, apiClient, cmd.getCommandId()));\n+        } catch (ApiException e) {\n+            String msg = \"Installation of CDP with Cloudera Manager has failed: \" + extractMessage(e);\n+            throw new ClouderaManagerOperationFailedException(msg, e);\n+        } catch (CloudStorageConfigurationFailedException e) {\n+            LOGGER.info(\"Error while configuring cloud storage. Message: {}\", e.getMessage(), e);\n+            throw new ClouderaManagerOperationFailedException(clouderaManagerStorageErrorMapper.map(e, stack.cloudPlatform(), cluster), e);\n+        } catch (Exception e) {\n+            throw mapException(e);\n         }\n     }\n \n-    private ApiConfig removeRemoteParcelRepos() {\n-        return new ApiConfig().name(\"remote_parcel_repo_urls\").value(\"\");\n-    }\n-\n-    private ApiConfig setHeader(com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType stackType) {\n-        return new ApiConfig().name(\"custom_header_color\").value(StackType.DATALAKE.equals(stackType) ? \"RED\" : \"BLUE\");\n-    }\n-\n-    private void updateConfig(ClouderaManagerResourceApi clouderaManagerResourceApi,\n-            com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType stackType) {\n+    @Override\n+    public void updateConfig() {\n+        com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType stackType = stack.getType();\n         try {\n+            ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n             ApiConfigList apiConfigList = new ApiConfigList()\n                     .addItemsItem(removeRemoteParcelRepos())\n                     .addItemsItem(setHeader(stackType));\n             clouderaManagerResourceApi.updateConfig(\"Updated configurations.\", apiConfigList);\n         } catch (ApiException e) {\n-            LOGGER.info(\"Error while updating configurations. Message {}, throwable: {}\", e.getMessage(), e);\n-            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+            throw mapApiException(e);\n+        } catch (Exception e) {\n+            throw mapException(e);\n         }\n     }\n \n-    private void refreshParcelRepos(ClouderaManagerResourceApi clouderaManagerResourceApi) {\n+    @Override\n+    public void refreshParcelRepos() {\n         try {\n-            ApiCommand apiCommand = clouderaManagerResourceApi.refreshParcelRepos();\n-            clouderaManagerPollingServiceProvider.startPollingCmParcelRepositoryRefresh(stack, apiClient, apiCommand.getId());\n-        } catch (ApiException e) {\n+            boolean prewarmed = isPrewarmed(stack.getCluster().getId());\n+            if (prewarmed) {\n+                ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n+                ApiCommand apiCommand = clouderaManagerResourceApi.refreshParcelRepos();\n+                clouderaManagerPollingServiceProvider.startPollingCmParcelRepositoryRefresh(stack, apiClient, apiCommand.getId());\n+            }\n+        } catch (Exception e) {\n             LOGGER.info(\"Unable to refresh parcel repo\", e);\n             throw new CloudbreakServiceException(e);\n         }\n     }\n \n-    private String getExtendedBlueprintText(ApiClusterTemplate apiClusterTemplate) {\n-        return JsonUtil.writeValueAsStringSilent(apiClusterTemplate);\n-    }\n-\n     @Override\n     public void waitForHosts(Set<InstanceMetaData> hostsInCluster) throws ClusterClientInitException {\n         Cluster cluster = stack.getCluster();\n@@ -471,6 +379,134 @@ public void setupProxy(ProxyConfig proxyConfig) {\n         }\n     }\n \n+    private ClouderaManagerOperationFailedException mapApiException(ApiException e) {\n+        LOGGER.info(\"Error while building the cluster. Message: {}; Response: {}\", e.getMessage(), e.getResponseBody(), e);\n+        String msg = extractMessage(e);\n+        return new ClouderaManagerOperationFailedException(msg, e);\n+    }\n+\n+    private ClouderaManagerOperationFailedException mapException(Exception e) {\n+        LOGGER.info(\"Error while building the cluster. Message: {}\", e.getMessage(), e);\n+        return new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+    }\n+\n+    private ApiClient createApiClient() throws ClusterClientInitException {\n+        ApiClient client = null;\n+        try {\n+            client = clouderaManagerApiClientProvider.getDefaultClient(stack.getGatewayPort(), clientConfig, ClouderaManagerApiClientProvider.API_V_31);\n+            ToolsResourceApi toolsResourceApi = clouderaManagerApiFactory.getToolsResourceApi(client);\n+            toolsResourceApi.echo(\"TEST\");\n+            LOGGER.debug(\"Cloudera Manager already running, old admin user's password has not been changed yet.\");\n+            return client;\n+        } catch (ClouderaManagerClientInitException e) {\n+            throw new ClusterClientInitException(e);\n+        } catch (ApiException e) {\n+            return returnClientBasedOnApiError(client, e);\n+        }\n+    }\n+\n+    private ApiClient returnClientBasedOnApiError(ApiClient client, ApiException e) {\n+        if (org.springframework.http.HttpStatus.UNAUTHORIZED.value() == e.getCode()) {\n+            LOGGER.debug(\"Cloudera Manager already running, old admin user's password has been changed.\");\n+            return apiClient;\n+        }\n+        LOGGER.debug(\"Cloudera Manager is not running yet.\", e);\n+        return client;\n+    }\n+\n+    private ApiClusterTemplate getCmTemplate(TemplatePreparationObject templatePreparationObject, String sdxContextName,\n+        Map<HostGroup, List<InstanceMetaData>> instanceMetaDataByHostGroup, ClouderaManagerRepo clouderaManagerRepoDetails, Long clusterId) {\n+        List<ClouderaManagerProduct> clouderaManagerProductDetails = clusterComponentProvider.getClouderaManagerProductDetails(clusterId);\n+        Map<String, List<Map<String, String>>> hostGroupMappings = hostGroupAssociationBuilder.buildHostGroupAssociations(instanceMetaDataByHostGroup);\n+        return cmTemplateUpdater.getCmTemplate(templatePreparationObject, hostGroupMappings, clouderaManagerRepoDetails,\n+                clouderaManagerProductDetails, sdxContextName);\n+    }\n+\n+    private void configureCmMgmtServices(TemplatePreparationObject templatePreparationObject, String sdxCrn, Telemetry telemetry,\n+        String sdxContextName, ProxyConfig proxyConfig) throws ApiException {\n+        Optional<ApiHost> optionalCmHost = getCmHost(templatePreparationObject, apiClient);\n+        if (optionalCmHost.isPresent()) {\n+            ApiHost cmHost = optionalCmHost.get();\n+            ApiHostRef cmHostRef = new ApiHostRef();\n+            cmHostRef.setHostId(cmHost.getHostId());\n+            cmHostRef.setHostname(cmHost.getHostname());\n+            mgmtSetupService.setupMgmtServices(stack, apiClient, cmHostRef,\n+                    telemetry, sdxContextName, sdxCrn, proxyConfig);\n+        } else {\n+            LOGGER.warn(\"Unable to determine Cloudera Manager host. Skipping management services installation.\");\n+        }\n+    }\n+\n+    private void configureCmSupportTag(TemplatePreparationObject templatePreparationObject) throws ApiException {\n+        Optional<ApiHost> optionalCmHost = getCmHost(templatePreparationObject, apiClient);\n+        if (optionalCmHost.isPresent()) {\n+            clouderaManagerSupportSetupService.prepareSupportRole(apiClient, stack.getType());\n+        } else {\n+            LOGGER.warn(\"Unable to determine Cloudera Manager host. Skipping support tag setup.\");\n+        }\n+    }\n+\n+    private Optional<ApiHost> getCmHost(TemplatePreparationObject templatePreparationObject, ApiClient apiClient) throws ApiException {\n+        HostsResourceApi hostsResourceApi = clouderaManagerApiFactory.getHostsResourceApi(apiClient);\n+        return hostsResourceApi.readHosts(null, null, DataView.SUMMARY.name())\n+                .getItems()\n+                .stream()\n+                .filter(host -> host.getHostname().equals(templatePreparationObject.getGeneralClusterConfigs().getPrimaryGatewayInstanceDiscoveryFQDN().get()))\n+                .findFirst();\n+    }\n+\n+    private String createDataContext(String sdxContext) {\n+        Cluster cluster = stack.getCluster();\n+        String user = cluster.getCloudbreakAmbariUser();\n+        String password = cluster.getCloudbreakAmbariPassword();\n+        try {\n+            ApiClient rootClient = clouderaManagerApiClientProvider.getRootClient(stack.getGatewayPort(), user, password, clientConfig);\n+            CdpResourceApi cdpResourceApi = clouderaManagerApiFactory.getCdpResourceApi(rootClient);\n+            ApiRemoteDataContext apiRemoteDataContext = JsonUtil.readValue(sdxContext, ApiRemoteDataContext.class);\n+            LOGGER.debug(\"Posting remote context to workload. EndpointId: {}\", apiRemoteDataContext.getEndPointId());\n+            return cdpResourceApi.postRemoteContext(apiRemoteDataContext).getEndPointId();\n+        } catch (ApiException | ClouderaManagerClientInitException e) {\n+            LOGGER.info(\"Error while creating data context using: {}\", sdxContext, e);\n+            throw new ClouderaManagerOperationFailedException(String.format(\"Error while creating data context: %s\", e.getMessage()), e);\n+        } catch (IOException e) {\n+            LOGGER.info(\"Failed to parse SDX context to CM API object.\", e);\n+            throw new ClouderaManagerOperationFailedException(String.format(\"Failed to parse SDX context to CM API object: %s\", e.getMessage()), e);\n+        }\n+    }\n+\n+    private boolean calculateAddRepositories(ApiClusterTemplate apiClusterTemplate, boolean prewarmed) {\n+        boolean addRepositories = !prewarmed;\n+        if (apiClusterTemplate.getCmVersion() != null\n+                && isVersionNewerOrEqualThanLimited(apiClusterTemplate.getCmVersion(), CLOUDERAMANAGER_VERSION_7_2_0)) {\n+            addRepositories = true;\n+        }\n+        return addRepositories;\n+    }\n+\n+    private Optional<ApiCluster> getCmClusterByName(String name) throws ApiException {\n+        ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n+        try {\n+            return Optional.of(clustersResourceApi.readCluster(name));\n+        } catch (ApiException apiException) {\n+            if (apiException.getCode() != HttpStatus.SC_NOT_FOUND) {\n+                throw apiException;\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private ApiConfig removeRemoteParcelRepos() {\n+        return new ApiConfig().name(\"remote_parcel_repo_urls\").value(\"\");\n+    }\n+\n+    private ApiConfig setHeader(com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType stackType) {\n+        return new ApiConfig().name(\"custom_header_color\").value(StackType.DATALAKE.equals(stackType) ? \"RED\" : \"BLUE\");\n+    }\n+\n+    private String getExtendedBlueprintText(ApiClusterTemplate apiClusterTemplate) {\n+        return JsonUtil.writeValueAsStringSilent(apiClusterTemplate);\n+    }\n+\n     private Boolean isPrewarmed(Long clusterId) {\n         return clusterComponentProvider.getClouderaManagerRepoDetails(clusterId).getPredefined();\n     }"
  },
  {
    "sha": "c5935d8f904609978bd8d17c36f9b52e752da5a8",
    "filename": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSupportSetupService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSupportSetupService.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSupportSetupService.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSupportSetupService.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -13,7 +13,6 @@\n import com.cloudera.api.swagger.model.ApiConfigList;\n import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n-import com.sequenceiq.cloudbreak.template.TemplatePreparationObject;\n \n @Service\n public class ClouderaManagerSupportSetupService {\n@@ -28,13 +27,13 @@\n     @Inject\n     private ClouderaManagerApiFactory clouderaManagerApiFactory;\n \n-    void prepareSupportRole(ApiClient apiClient, TemplatePreparationObject templatePreparationObject) {\n+    void prepareSupportRole(ApiClient apiClient, StackType type) {\n         try {\n             clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient).updateConfig(\"\",\n                 new ApiConfigList().addItemsItem(\n                     new ApiConfig()\n                         .name(CREATOR_TAG)\n-                        .value(String.format(\"Cloudera %s %s\", getServiceType(templatePreparationObject.getStackType()), cbVersion))\n+                        .value(String.format(\"Cloudera %s %s\", getServiceType(type), cbVersion))\n                 ));\n         } catch (ApiException e) {\n             LOGGER.debug(\"Failed to set CREATOR_TAG on Cloudera Manager\", e);"
  },
  {
    "sha": "ee3882c61a60b266ff306190c285f27d9e0e6da1",
    "filename": "cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityServiceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityServiceTest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityServiceTest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityServiceTest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -55,8 +55,7 @@\n import com.sequenceiq.cloudbreak.service.CloudbreakException;\n \n @RunWith(MockitoJUnitRunner.class)\n-public class\n-ClouderaManagerSecurityServiceTest {\n+public class ClouderaManagerSecurityServiceTest {\n \n     private static final int GATEWAY_PORT = 8080;\n "
  },
  {
    "sha": "6e852bd19617a6c3f378373572231f0eae31fa76",
    "filename": "cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupServiceTest.java",
    "status": "added",
    "additions": 872,
    "deletions": 0,
    "changes": 872,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupServiceTest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupServiceTest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSetupServiceTest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,872 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import com.cloudera.api.swagger.CdpResourceApi;\n+import com.cloudera.api.swagger.ClouderaManagerResourceApi;\n+import com.cloudera.api.swagger.ClustersResourceApi;\n+import com.cloudera.api.swagger.HostsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCluster;\n+import com.cloudera.api.swagger.model.ApiClusterTemplate;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiConfigList;\n+import com.cloudera.api.swagger.model.ApiHost;\n+import com.cloudera.api.swagger.model.ApiHostList;\n+import com.cloudera.api.swagger.model.ApiHostRef;\n+import com.cloudera.api.swagger.model.ApiRemoteDataContext;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerRepo;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cluster.service.ClusterClientInitException;\n+import com.sequenceiq.cloudbreak.cluster.service.ClusterComponentConfigProvider;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiClientProvider;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cm.error.mapper.ClouderaManagerStorageErrorMapper;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.cmtemplate.CentralCmTemplateUpdater;\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterCommand;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterCommandType;\n+import com.sequenceiq.cloudbreak.dto.KerberosConfig;\n+import com.sequenceiq.cloudbreak.dto.ProxyAuthentication;\n+import com.sequenceiq.cloudbreak.dto.ProxyConfig;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.repository.ClusterCommandRepository;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+import com.sequenceiq.cloudbreak.template.TemplatePreparationObject;\n+import com.sequenceiq.cloudbreak.template.model.GeneralClusterConfigs;\n+import com.sequenceiq.cloudbreak.workspace.model.Tenant;\n+import com.sequenceiq.cloudbreak.workspace.model.User;\n+import com.sequenceiq.common.api.telemetry.model.Telemetry;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClouderaManagerSetupServiceTest {\n+\n+    @Mock\n+    private ClouderaManagerApiClientProvider clouderaManagerApiClientProvider;\n+\n+    @Mock\n+    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+\n+    @Mock\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    @Mock\n+    private ClouderaHostGroupAssociationBuilder hostGroupAssociationBuilder;\n+\n+    @Mock\n+    private CentralCmTemplateUpdater cmTemplateUpdater;\n+\n+    @Mock\n+    private ClusterComponentConfigProvider clusterComponentProvider;\n+\n+    @Mock\n+    private ClouderaManagerLicenseService clouderaManagerLicenseService;\n+\n+    @Mock\n+    private ClouderaManagerMgmtSetupService mgmtSetupService;\n+\n+    @Mock\n+    private ClouderaManagerKerberosService kerberosService;\n+\n+    @Mock\n+    private ClouderaManagerMgmtLaunchService clouderaManagerMgmtLaunchService;\n+\n+    @Mock\n+    private ClouderaManagerSupportSetupService clouderaManagerSupportSetupService;\n+\n+    @Mock\n+    private ClouderaManagerYarnSetupService clouderaManagerYarnSetupService;\n+\n+    @Mock\n+    private ClusterCommandRepository clusterCommandRepository;\n+\n+    @Mock\n+    private ClouderaManagerStorageErrorMapper clouderaManagerStorageErrorMapper;\n+\n+    @InjectMocks\n+    private ClouderaManagerSetupService underTest;\n+\n+    @BeforeEach\n+    public void before() {\n+        underTest = new ClouderaManagerSetupService(testStack(), new HttpClientConfig(\"10.0.0.0\"));\n+\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerApiClientProvider\", clouderaManagerApiClientProvider);\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerApiFactory\", clouderaManagerApiFactory);\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerPollingServiceProvider\", clouderaManagerPollingServiceProvider);\n+        ReflectionTestUtils.setField(underTest, \"hostGroupAssociationBuilder\", hostGroupAssociationBuilder);\n+        ReflectionTestUtils.setField(underTest, \"cmTemplateUpdater\", cmTemplateUpdater);\n+        ReflectionTestUtils.setField(underTest, \"clusterComponentProvider\", clusterComponentProvider);\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerLicenseService\", clouderaManagerLicenseService);\n+        ReflectionTestUtils.setField(underTest, \"mgmtSetupService\", mgmtSetupService);\n+        ReflectionTestUtils.setField(underTest, \"kerberosService\", kerberosService);\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerMgmtLaunchService\", clouderaManagerMgmtLaunchService);\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerSupportSetupService\", clouderaManagerSupportSetupService);\n+        ReflectionTestUtils.setField(underTest, \"clouderaManagerYarnSetupService\", clouderaManagerYarnSetupService);\n+        ReflectionTestUtils.setField(underTest, \"clusterCommandRepository\", clusterCommandRepository);\n+        ReflectionTestUtils.setField(underTest, \"apiClient\", mock(ApiClient.class));\n+    }\n+\n+    @Test\n+    public void testValidateLicenceWhenEverythingWorkAsExpectedShouldNotThrowException() {\n+        doNothing().when(clouderaManagerLicenseService).validateClouderaManagerLicense(any(User.class));\n+\n+        underTest.validateLicence();\n+\n+        verify(clouderaManagerLicenseService, times(1)).validateClouderaManagerLicense(any(User.class));\n+    }\n+\n+    @Test\n+    public void testValidateLicenceWhenItThrowExceptionShouldMapToClouderaManagerOperationFailedException() {\n+        doThrow(new RuntimeException()).when(clouderaManagerLicenseService).validateClouderaManagerLicense(any(User.class));\n+\n+        ClouderaManagerOperationFailedException actual =\n+                assertThrows(ClouderaManagerOperationFailedException.class, () -> underTest.validateLicence());\n+\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+        verify(clouderaManagerLicenseService, times(1)).validateClouderaManagerLicense(any(User.class));\n+    }\n+\n+    @Test\n+    public void testConfigureManagementServicesWhenApiExceptionHappensThenShouldThrowClouderaManagerOperationFailedException() throws Exception {\n+        ApiException error = mock(ApiException.class);\n+        HostsResourceApi mockHostsResourceApi = mock(HostsResourceApi.class);\n+        TemplatePreparationObject mockTemplatePreparationObject = mock(TemplatePreparationObject.class);\n+        String mockSdxContext = JsonUtil.writeValueAsString(new ApiRemoteDataContext());\n+        String mockSdxStackCrn = \"mockSdxStackCrn\";\n+        Telemetry telemetry = mock(Telemetry.class);\n+        ProxyConfig proxyConfig = mock(ProxyConfig.class);\n+        ApiClient apiClient = mock(ApiClient.class);\n+        ApiHostList apiHostList = mock(ApiHostList.class);\n+        GeneralClusterConfigs generalClusterConfigs = mock(GeneralClusterConfigs.class);\n+        CdpResourceApi cdpResourceApi = mock(CdpResourceApi.class);\n+        ApiRemoteDataContext mockApiRemoteDataContext = mock(ApiRemoteDataContext.class);\n+\n+        when(error.getResponseBody()).thenReturn(null);\n+        when(error.getMessage()).thenReturn(\"error\");\n+        when(mockHostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()))\n+                .thenReturn(apiHostList);\n+        when(mockTemplatePreparationObject.getGeneralClusterConfigs())\n+                .thenReturn(generalClusterConfigs);\n+        when(generalClusterConfigs.getPrimaryGatewayInstanceDiscoveryFQDN())\n+                .thenReturn(Optional.of(\"fqdn\"));\n+        when(apiHostList.getItems()).thenReturn(List.of(apiHost(\"fqdn\")));\n+        when(clouderaManagerApiClientProvider.getRootClient(any(Integer.class), anyString(), anyString(), any(HttpClientConfig.class)))\n+                .thenReturn(apiClient);\n+        when(clouderaManagerApiFactory.getHostsResourceApi(any(ApiClient.class))).thenReturn(mockHostsResourceApi);\n+        when(clouderaManagerApiFactory.getCdpResourceApi(any(ApiClient.class))).thenReturn(cdpResourceApi);\n+        when(cdpResourceApi.postRemoteContext(any(ApiRemoteDataContext.class))).thenReturn(mockApiRemoteDataContext);\n+        when(mockApiRemoteDataContext.getEndPointId()).thenReturn(\"endpoint\");\n+        doThrow(error).when(mgmtSetupService).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+\n+        ClouderaManagerOperationFailedException actual =\n+                assertThrows(ClouderaManagerOperationFailedException.class,\n+                        () -> underTest.configureManagementServices(mockTemplatePreparationObject, mockSdxContext, mockSdxStackCrn, telemetry, proxyConfig));\n+\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+        verify(mgmtSetupService, times(1)).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureManagementServicesWhenCManagerOperationFailedExceptionHappensThenShouldThrowCManagerOperationFailedException() throws Exception {\n+        HostsResourceApi mockHostsResourceApi = mock(HostsResourceApi.class);\n+        TemplatePreparationObject mockTemplatePreparationObject = mock(TemplatePreparationObject.class);\n+        String mockSdxContext = JsonUtil.writeValueAsString(new ApiRemoteDataContext());\n+        String mockSdxStackCrn = \"mockSdxStackCrn\";\n+        Telemetry telemetry = mock(Telemetry.class);\n+        ProxyConfig proxyConfig = mock(ProxyConfig.class);\n+        ApiClient apiClient = mock(ApiClient.class);\n+        ApiHostList apiHostList = mock(ApiHostList.class);\n+        GeneralClusterConfigs generalClusterConfigs = mock(GeneralClusterConfigs.class);\n+        CdpResourceApi cdpResourceApi = mock(CdpResourceApi.class);\n+        ApiRemoteDataContext mockApiRemoteDataContext = mock(ApiRemoteDataContext.class);\n+\n+        when(mockHostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()))\n+                .thenReturn(apiHostList);\n+        when(mockTemplatePreparationObject.getGeneralClusterConfigs())\n+                .thenReturn(generalClusterConfigs);\n+        when(generalClusterConfigs.getPrimaryGatewayInstanceDiscoveryFQDN())\n+                .thenReturn(Optional.of(\"fqdn\"));\n+        when(apiHostList.getItems()).thenReturn(List.of(apiHost(\"fqdn\")));\n+        when(clouderaManagerApiClientProvider.getRootClient(any(Integer.class), anyString(), anyString(), any(HttpClientConfig.class)))\n+                .thenReturn(apiClient);\n+        when(clouderaManagerApiFactory.getHostsResourceApi(any(ApiClient.class))).thenReturn(mockHostsResourceApi);\n+        when(clouderaManagerApiFactory.getCdpResourceApi(any(ApiClient.class))).thenReturn(cdpResourceApi);\n+        when(cdpResourceApi.postRemoteContext(any(ApiRemoteDataContext.class))).thenReturn(mockApiRemoteDataContext);\n+        when(mockApiRemoteDataContext.getEndPointId()).thenReturn(\"endpoint\");\n+        doThrow(new ClouderaManagerOperationFailedException(\"error\")).when(mgmtSetupService).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+\n+        ClouderaManagerOperationFailedException actual =\n+                assertThrows(ClouderaManagerOperationFailedException.class,\n+                        () -> underTest.configureManagementServices(mockTemplatePreparationObject, mockSdxContext, mockSdxStackCrn, telemetry, proxyConfig));\n+\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+        verify(mgmtSetupService, times(1)).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureManagementServicesWhenThePrimaryGatewayInstanceDiscoveryFQDNIsPresentedOnCMSideShoudCallSetupMgmtServices() throws Exception {\n+        HostsResourceApi mockHostsResourceApi = mock(HostsResourceApi.class);\n+        TemplatePreparationObject mockTemplatePreparationObject = mock(TemplatePreparationObject.class);\n+        String mockSdxContext = JsonUtil.writeValueAsString(new ApiRemoteDataContext());\n+        String mockSdxStackCrn = \"mockSdxStackCrn\";\n+        Telemetry telemetry = mock(Telemetry.class);\n+        ProxyConfig proxyConfig = mock(ProxyConfig.class);\n+        ApiClient apiClient = mock(ApiClient.class);\n+        ApiHostList apiHostList = mock(ApiHostList.class);\n+        GeneralClusterConfigs generalClusterConfigs = mock(GeneralClusterConfigs.class);\n+        CdpResourceApi cdpResourceApi = mock(CdpResourceApi.class);\n+        ApiRemoteDataContext mockApiRemoteDataContext = mock(ApiRemoteDataContext.class);\n+\n+\n+        when(mockHostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()))\n+                .thenReturn(apiHostList);\n+        when(mockTemplatePreparationObject.getGeneralClusterConfigs())\n+                .thenReturn(generalClusterConfigs);\n+        when(generalClusterConfigs.getPrimaryGatewayInstanceDiscoveryFQDN())\n+                .thenReturn(Optional.of(\"fqdn\"));\n+        when(apiHostList.getItems()).thenReturn(List.of(apiHost(\"fqdn\")));\n+        when(clouderaManagerApiClientProvider.getRootClient(any(Integer.class), anyString(), anyString(), any(HttpClientConfig.class)))\n+                .thenReturn(apiClient);\n+        when(clouderaManagerApiFactory.getHostsResourceApi(any(ApiClient.class))).thenReturn(mockHostsResourceApi);\n+        when(clouderaManagerApiFactory.getCdpResourceApi(any(ApiClient.class))).thenReturn(cdpResourceApi);\n+        when(cdpResourceApi.postRemoteContext(any(ApiRemoteDataContext.class))).thenReturn(mockApiRemoteDataContext);\n+        when(mockApiRemoteDataContext.getEndPointId()).thenReturn(\"endpoint\");\n+        doNothing().when(mgmtSetupService).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+\n+        underTest.configureManagementServices(mockTemplatePreparationObject, mockSdxContext, mockSdxStackCrn, telemetry, proxyConfig);\n+\n+        verify(mgmtSetupService, times(1)).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureManagementServicesWhenThePrimaryGatewayInstanceDiscoveryFQDNIsNOTPresentedOnCMSideShoudNOTCallSetupMgmtServices() throws Exception {\n+        HostsResourceApi mockHostsResourceApi = mock(HostsResourceApi.class);\n+        TemplatePreparationObject mockTemplatePreparationObject = mock(TemplatePreparationObject.class);\n+        String mockSdxContext = JsonUtil.writeValueAsString(new ApiRemoteDataContext());\n+        String mockSdxStackCrn = \"mockSdxStackCrn\";\n+        Telemetry telemetry = mock(Telemetry.class);\n+        ProxyConfig proxyConfig = mock(ProxyConfig.class);\n+        ApiClient apiClient = mock(ApiClient.class);\n+        ApiHostList apiHostList = mock(ApiHostList.class);\n+        GeneralClusterConfigs generalClusterConfigs = mock(GeneralClusterConfigs.class);\n+        CdpResourceApi cdpResourceApi = mock(CdpResourceApi.class);\n+        ApiRemoteDataContext mockApiRemoteDataContext = mock(ApiRemoteDataContext.class);\n+\n+\n+        when(mockHostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()))\n+                .thenReturn(apiHostList);\n+        when(mockTemplatePreparationObject.getGeneralClusterConfigs())\n+                .thenReturn(generalClusterConfigs);\n+        when(generalClusterConfigs.getPrimaryGatewayInstanceDiscoveryFQDN())\n+                .thenReturn(Optional.of(\"fqdn1\"));\n+        when(apiHostList.getItems()).thenReturn(List.of(apiHost(\"fqdn\")));\n+        when(clouderaManagerApiClientProvider.getRootClient(any(Integer.class), anyString(), anyString(), any(HttpClientConfig.class)))\n+                .thenReturn(apiClient);\n+        when(clouderaManagerApiFactory.getHostsResourceApi(any(ApiClient.class))).thenReturn(mockHostsResourceApi);\n+        when(clouderaManagerApiFactory.getCdpResourceApi(any(ApiClient.class))).thenReturn(cdpResourceApi);\n+        when(cdpResourceApi.postRemoteContext(any(ApiRemoteDataContext.class))).thenReturn(mockApiRemoteDataContext);\n+        when(mockApiRemoteDataContext.getEndPointId()).thenReturn(\"endpoint\");\n+\n+        underTest.configureManagementServices(mockTemplatePreparationObject, mockSdxContext, mockSdxStackCrn, telemetry, proxyConfig);\n+\n+        verify(mgmtSetupService, times(0)).setupMgmtServices(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(ApiHostRef.class),\n+                any(Telemetry.class),\n+                anyString(),\n+                anyString(),\n+                any(ProxyConfig.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureKerberosWhenCMVersionIsLowerThen630ShouldCallConfigureKerberos() throws Exception {\n+        KerberosConfig kerberosConfig = mock(KerberosConfig.class);\n+        ClouderaManagerRepo clouderaManagerRepo = new ClouderaManagerRepo();\n+        clouderaManagerRepo.setVersion(\"6.2.0\");\n+\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong()))\n+                .thenReturn(clouderaManagerRepo);\n+        doNothing().when(kerberosService)\n+                .configureKerberosViaApi(\n+                        any(ApiClient.class),\n+                        any(HttpClientConfig.class),\n+                        any(Stack.class),\n+                        any(KerberosConfig.class)\n+                );\n+\n+        underTest.configureKerberos(kerberosConfig);\n+\n+        verify(kerberosService, times(1)).configureKerberosViaApi(\n+                any(ApiClient.class),\n+                any(HttpClientConfig.class),\n+                any(Stack.class),\n+                any(KerberosConfig.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureKerberosWhenCMVersionIsHigherThen630ShouldCallConfigureKerberos() throws Exception {\n+        KerberosConfig kerberosConfig = mock(KerberosConfig.class);\n+        ClouderaManagerRepo clouderaManagerRepo = new ClouderaManagerRepo();\n+        clouderaManagerRepo.setVersion(\"6.5.0\");\n+\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong()))\n+                .thenReturn(clouderaManagerRepo);\n+\n+        underTest.configureKerberos(kerberosConfig);\n+\n+        verify(kerberosService, times(0)).configureKerberosViaApi(\n+                any(ApiClient.class),\n+                any(HttpClientConfig.class),\n+                any(Stack.class),\n+                any(KerberosConfig.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureKerberosWhenThrowApiExceptionThenShouldThrowClouderaManagerOperationFailedException() throws Exception {\n+        ApiException error = mock(ApiException.class);\n+        KerberosConfig kerberosConfig = mock(KerberosConfig.class);\n+        ClouderaManagerRepo clouderaManagerRepo = new ClouderaManagerRepo();\n+        clouderaManagerRepo.setVersion(\"6.2.0\");\n+\n+        when(error.getResponseBody()).thenReturn(null);\n+        when(error.getMessage()).thenReturn(\"error\");\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong()))\n+                .thenReturn(clouderaManagerRepo);\n+        doThrow(error).when(kerberosService)\n+                .configureKerberosViaApi(\n+                        any(ApiClient.class),\n+                        any(HttpClientConfig.class),\n+                        any(Stack.class),\n+                        any(KerberosConfig.class)\n+                );\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+            () -> underTest.configureKerberos(kerberosConfig));\n+\n+        verify(kerberosService, times(1)).configureKerberosViaApi(\n+                any(ApiClient.class),\n+                any(HttpClientConfig.class),\n+                any(Stack.class),\n+                any(KerberosConfig.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testConfigureKerberosWhenThrowClouderaManagerOperationFailedExceptionThenShouldThrowClouderaManagerOperationFailedException() throws Exception {\n+        KerberosConfig kerberosConfig = mock(KerberosConfig.class);\n+        ClouderaManagerRepo clouderaManagerRepo = new ClouderaManagerRepo();\n+        clouderaManagerRepo.setVersion(\"6.2.0\");\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong()))\n+                .thenReturn(clouderaManagerRepo);\n+        doThrow(new ClouderaManagerOperationFailedException(\"error\")).when(kerberosService)\n+                .configureKerberosViaApi(\n+                        any(ApiClient.class),\n+                        any(HttpClientConfig.class),\n+                        any(Stack.class),\n+                        any(KerberosConfig.class)\n+                );\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.configureKerberos(kerberosConfig));\n+\n+        verify(kerberosService, times(1)).configureKerberosViaApi(\n+                any(ApiClient.class),\n+                any(HttpClientConfig.class),\n+                any(Stack.class),\n+                any(KerberosConfig.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testUpdateConfigWhenUpdateConfigShouldCall() throws Exception {\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class)))\n+                .thenReturn(clouderaManagerResourceApi);\n+        when(clouderaManagerResourceApi.updateConfig(anyString(), any(ApiConfigList.class)))\n+                .thenReturn(new ApiConfigList());\n+\n+        underTest.updateConfig();\n+\n+        verify(clouderaManagerResourceApi, times(1)).updateConfig(\n+                anyString(),\n+                any(ApiConfigList.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testUpdateConfigWhenThrowApiExceptionThenThrowClouderaManagerOperationFailedException() throws Exception {\n+        ApiException error = mock(ApiException.class);\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+\n+        when(error.getResponseBody()).thenReturn(null);\n+        when(error.getMessage()).thenReturn(\"error\");\n+\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class)))\n+                .thenReturn(clouderaManagerResourceApi);\n+        doThrow(error).when(clouderaManagerResourceApi).updateConfig(anyString(), any(ApiConfigList.class));\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.updateConfig());\n+\n+        verify(clouderaManagerResourceApi, times(1)).updateConfig(\n+                anyString(),\n+                any(ApiConfigList.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testUpdateConfigWhenThrowClouderaManagerOperationFailedExceptionThenThrowClouderaManagerOperationFailedException() throws Exception {\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class)))\n+                .thenReturn(clouderaManagerResourceApi);\n+        doThrow(new ClouderaManagerOperationFailedException(\"error\"))\n+                .when(clouderaManagerResourceApi).updateConfig(anyString(), any(ApiConfigList.class));\n+\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.updateConfig());\n+\n+        verify(clouderaManagerResourceApi, times(1)).updateConfig(\n+                anyString(),\n+                any(ApiConfigList.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testRefreshParcelReposWithPreWarmedImageShouldCallStartPollingCmParcelRepositoryRefresh() throws Exception {\n+        ClouderaManagerRepo clouderaManagerRepo = mock(ClouderaManagerRepo.class);\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+        ApiCommand apiCommand = mock(ApiCommand.class);\n+\n+        when(clouderaManagerRepo.getPredefined()).thenReturn(true);\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong())).thenReturn(clouderaManagerRepo);\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class))).thenReturn(clouderaManagerResourceApi);\n+        when(apiCommand.getId()).thenReturn(BigDecimal.ONE);\n+        when(clouderaManagerResourceApi.refreshParcelRepos()).thenReturn(apiCommand);\n+        when(clouderaManagerPollingServiceProvider.startPollingCmParcelRepositoryRefresh(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(BigDecimal.class)\n+        )).thenReturn(PollingResult.SUCCESS);\n+\n+        underTest.refreshParcelRepos();\n+\n+        verify(clouderaManagerPollingServiceProvider, times(1)).startPollingCmParcelRepositoryRefresh(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(BigDecimal.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testRefreshParcelReposWithNONPreWarmedImageShouldNotCallStartPollingCmParcelRepositoryRefresh() {\n+        ClouderaManagerRepo clouderaManagerRepo = mock(ClouderaManagerRepo.class);\n+\n+        when(clouderaManagerRepo.getPredefined()).thenReturn(false);\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong())).thenReturn(clouderaManagerRepo);\n+\n+        underTest.refreshParcelRepos();\n+\n+        verify(clouderaManagerPollingServiceProvider, times(0)).startPollingCmParcelRepositoryRefresh(\n+                any(Stack.class),\n+                any(ApiClient.class),\n+                any(BigDecimal.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testRefreshParcelReposWhenApiExceptionOccursShouldThrowCloudbreakServiceException() {\n+        ClouderaManagerRepo clouderaManagerRepo = mock(ClouderaManagerRepo.class);\n+\n+        when(clouderaManagerRepo.getPredefined()).thenReturn(true);\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong())).thenReturn(clouderaManagerRepo);\n+        doThrow(new ClouderaManagerOperationFailedException(\"error\")).when(clouderaManagerApiFactory).getClouderaManagerResourceApi(any(ApiClient.class));\n+\n+        CloudbreakServiceException actual =\n+                assertThrows(CloudbreakServiceException.class, () -> underTest.refreshParcelRepos());\n+\n+        assertEquals(CloudbreakServiceException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testWaitForHostsWhenEverythingFineShouldCmHostStatus() throws Exception {\n+        ApiClient apiClient = mock(ApiClient.class);\n+\n+        when(clouderaManagerApiClientProvider.getClient(anyInt(), anyString(), anyString(), any(HttpClientConfig.class)))\n+                .thenReturn(apiClient);\n+        when(clouderaManagerPollingServiceProvider.startPollingCmHostStatus(any(Stack.class), any(ApiClient.class)))\n+            .thenReturn(PollingResult.EXIT);\n+\n+        underTest.waitForHosts(Set.of());\n+\n+        verify(clouderaManagerPollingServiceProvider, times(1)).startPollingCmHostStatus(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testWaitForHostsWhenDropClouderaManagerClientInitExceptionShouldReturnClusterClientInitException() throws Exception {\n+        doThrow(new ClouderaManagerClientInitException()).when(clouderaManagerApiClientProvider)\n+                .getClient(anyInt(), anyString(), anyString(), any(HttpClientConfig.class));\n+\n+        ClusterClientInitException actual =\n+                assertThrows(ClusterClientInitException.class, () -> underTest.waitForHosts(Set.of()));\n+\n+        assertEquals(ClusterClientInitException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testSupressWarningShouldWorkFine() {\n+        doNothing().when(clouderaManagerYarnSetupService).suppressWarnings(any(Stack.class), any(ApiClient.class));\n+\n+        underTest.suppressWarnings();\n+\n+        verify(clouderaManagerYarnSetupService, times(1)).suppressWarnings(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testWaitForServerWhenPollingExitedThenShouldReturnWithCancellationException() {\n+        when(clouderaManagerPollingServiceProvider.startPollingCmStartup(any(Stack.class), any(ApiClient.class)))\n+            .thenReturn(PollingResult.EXIT);\n+\n+        CancellationException actual =  assertThrows(CancellationException.class, () -> underTest.waitForServer(false));\n+\n+        verify(clouderaManagerPollingServiceProvider, times(1)).startPollingCmStartup(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+        assertEquals(CancellationException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testWaitForServerWhenPollingFailedThenShouldReturnWithCloudbreakException() {\n+        when(clouderaManagerPollingServiceProvider.startPollingCmStartup(any(Stack.class), any(ApiClient.class)))\n+                .thenReturn(PollingResult.FAILURE);\n+\n+        CloudbreakException actual =  assertThrows(CloudbreakException.class, () -> underTest.waitForServer(false));\n+\n+        verify(clouderaManagerPollingServiceProvider, times(1)).startPollingCmStartup(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+        assertEquals(CloudbreakException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testWaitForServerWhenPollingSuccessThenEverythingShouldWork() throws ClusterClientInitException, CloudbreakException {\n+        when(clouderaManagerPollingServiceProvider.startPollingCmStartup(any(Stack.class), any(ApiClient.class)))\n+                .thenReturn(PollingResult.SUCCESS);\n+\n+        underTest.waitForServer(false);\n+\n+        verify(clouderaManagerPollingServiceProvider, times(1)).startPollingCmStartup(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testStartManagementServicesWhenStartSuccessThenShouldEverythingWorksfine() throws ApiException {\n+        doNothing().when(clouderaManagerMgmtLaunchService).startManagementServices(any(Stack.class), any(ApiClient.class));\n+\n+        underTest.startManagementServices();\n+\n+        verify(clouderaManagerMgmtLaunchService, times(1)).startManagementServices(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testStartManagementServicesWhenApiExceptionHappensThenShouldReturnClouderaManagerOperationFailedException() throws ApiException {\n+        ApiException error = mock(ApiException.class);\n+\n+        when(error.getResponseBody()).thenReturn(null);\n+        when(error.getMessage()).thenReturn(\"error\");\n+        doThrow(error).when(clouderaManagerMgmtLaunchService)\n+                .startManagementServices(any(Stack.class), any(ApiClient.class));\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.startManagementServices());\n+\n+        verify(clouderaManagerMgmtLaunchService, times(1)).startManagementServices(\n+                any(Stack.class),\n+                any(ApiClient.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testConfigureSupportTagsWhenCmHostPresentedShouldEverythingWorks() throws ApiException {\n+        HostsResourceApi mockHostsResourceApi = mock(HostsResourceApi.class);\n+        ApiHostList apiHostList = mock(ApiHostList.class);\n+        TemplatePreparationObject mockTemplatePreparationObject = mock(TemplatePreparationObject.class);\n+        GeneralClusterConfigs generalClusterConfigs = mock(GeneralClusterConfigs.class);\n+\n+        when(mockTemplatePreparationObject.getGeneralClusterConfigs())\n+                .thenReturn(generalClusterConfigs);\n+        when(generalClusterConfigs.getPrimaryGatewayInstanceDiscoveryFQDN())\n+                .thenReturn(Optional.of(\"fqdn\"));\n+        when(apiHostList.getItems()).thenReturn(List.of(apiHost(\"fqdn\")));\n+        when(mockHostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()))\n+                .thenReturn(apiHostList);\n+        when(clouderaManagerApiFactory.getHostsResourceApi(any(ApiClient.class))).thenReturn(mockHostsResourceApi);\n+        doNothing().when(clouderaManagerSupportSetupService).prepareSupportRole(any(ApiClient.class), any(StackType.class));\n+\n+        underTest.configureSupportTags(mockTemplatePreparationObject);\n+\n+        verify(clouderaManagerSupportSetupService, times(1)).prepareSupportRole(\n+                any(ApiClient.class),\n+                any(StackType.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testConfigureSupportTagsWhenThrowCManagerOperationFailedExceptionShouldThrowCManagerOperationFailedException() throws ApiException {\n+        HostsResourceApi mockHostsResourceApi = mock(HostsResourceApi.class);\n+        ApiHostList apiHostList = mock(ApiHostList.class);\n+        TemplatePreparationObject mockTemplatePreparationObject = mock(TemplatePreparationObject.class);\n+        GeneralClusterConfigs generalClusterConfigs = mock(GeneralClusterConfigs.class);\n+\n+        when(mockTemplatePreparationObject.getGeneralClusterConfigs())\n+                .thenReturn(generalClusterConfigs);\n+        when(generalClusterConfigs.getPrimaryGatewayInstanceDiscoveryFQDN())\n+                .thenReturn(Optional.of(\"fqdn\"));\n+        when(apiHostList.getItems()).thenReturn(List.of(apiHost(\"fqdn\")));\n+        when(mockHostsResourceApi.readHosts(null, null, DataView.SUMMARY.name()))\n+                .thenReturn(apiHostList);\n+        when(clouderaManagerApiFactory.getHostsResourceApi(any(ApiClient.class))).thenReturn(mockHostsResourceApi);\n+        doThrow(new ClouderaManagerOperationFailedException(\"error\")).when(clouderaManagerSupportSetupService)\n+                .prepareSupportRole(any(ApiClient.class), any(StackType.class));\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.configureSupportTags(mockTemplatePreparationObject));\n+\n+        verify(clouderaManagerSupportSetupService, times(1)).prepareSupportRole(\n+                any(ApiClient.class),\n+                any(StackType.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testSetupProxyWhenProxyPresentedShouldEverythingWorksFine() throws ApiException {\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class)))\n+                .thenReturn(clouderaManagerResourceApi);\n+        when(clouderaManagerResourceApi.updateConfig(anyString(), any(ApiConfigList.class)))\n+                .thenReturn(new ApiConfigList());\n+\n+        underTest.setupProxy(testProxyConfig());\n+\n+        verify(clouderaManagerResourceApi, times(1)).updateConfig(\n+                anyString(),\n+                any(ApiConfigList.class)\n+        );\n+    }\n+\n+    @Test\n+    public void testSetupProxyWhenProxysetupThrowApiExceptionShouldThrowClouderaManagerOperationFailedException() throws ApiException {\n+        ApiException error = mock(ApiException.class);\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class)))\n+                .thenReturn(clouderaManagerResourceApi);\n+        doThrow(error).when(clouderaManagerResourceApi).updateConfig(anyString(), any(ApiConfigList.class));\n+\n+        ClouderaManagerOperationFailedException actual =  assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.setupProxy(testProxyConfig()));\n+\n+        verify(clouderaManagerResourceApi, times(1)).updateConfig(\n+                anyString(),\n+                any(ApiConfigList.class)\n+        );\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testInstallClusterWhenApiExceptionOccursShouldReturnClouderaManagerOperationFailedException() throws ApiException {\n+        ClustersResourceApi clustersResourceApi = mock(ClustersResourceApi.class);\n+        ApiException error = mock(ApiException.class);\n+\n+        when(error.getResponseBody()).thenReturn(null);\n+        when(error.getMessage()).thenReturn(\"error\");\n+        when(clouderaManagerApiFactory.getClustersResourceApi(any(ApiClient.class))).thenReturn(clustersResourceApi);\n+        doThrow(error).when(clustersResourceApi).readCluster(anyString());\n+\n+        ClouderaManagerOperationFailedException actual = assertThrows(ClouderaManagerOperationFailedException.class,\n+                () -> underTest.installCluster(\"\"));\n+        assertEquals(ClouderaManagerOperationFailedException.class, actual.getClass());\n+    }\n+\n+    @Test\n+    public void testInstallClusterWhenEverythingWorksFineShouldPollTheInsallProgress() throws ApiException {\n+        ClustersResourceApi clustersResourceApi = mock(ClustersResourceApi.class);\n+        ApiCommand apiCommand = mock(ApiCommand.class);\n+        ApiCluster apiCluster = mock(ApiCluster.class);\n+        ClusterCommand clusterCommand = mock(ClusterCommand.class);\n+        ClouderaManagerRepo clouderaManagerRepo = new ClouderaManagerRepo();\n+        clouderaManagerRepo.setVersion(\"6.2.0\");\n+        ClouderaManagerResourceApi clouderaManagerResourceApi = mock(ClouderaManagerResourceApi.class);\n+\n+        when(clusterComponentProvider.getClouderaManagerRepoDetails(anyLong()))\n+                .thenReturn(clouderaManagerRepo);\n+        when(clouderaManagerApiFactory.getClustersResourceApi(any(ApiClient.class))).thenReturn(clustersResourceApi);\n+        when(clustersResourceApi.readCluster(anyString())).thenReturn(apiCluster);\n+        when(clusterCommandRepository.findTopByClusterIdAndClusterCommandType(anyLong(), any(ClusterCommandType.class)))\n+                .thenReturn(Optional.empty());\n+        when(apiCommand.getId()).thenReturn(BigDecimal.ONE);\n+        when(clusterCommand.getCommandId()).thenReturn(BigDecimal.ONE);\n+        when(clouderaManagerApiFactory.getClouderaManagerResourceApi(any(ApiClient.class)))\n+                .thenReturn(clouderaManagerResourceApi);\n+        when(clouderaManagerResourceApi.importClusterTemplate(anyBoolean(), any(ApiClusterTemplate.class))).thenReturn(apiCommand);\n+        when(clusterCommandRepository.save(any(ClusterCommand.class))).thenReturn(clusterCommand);\n+        when(clouderaManagerPollingServiceProvider.startPollingCmTemplateInstallation(any(Stack.class), any(ApiClient.class), any(BigDecimal.class)))\n+                .thenReturn(PollingResult.EXIT);\n+\n+        underTest.installCluster(\"{}\");\n+\n+        verify(clouderaManagerPollingServiceProvider, times(1)).startPollingCmTemplateInstallation(\n+                any(Stack.class), any(ApiClient.class), any(BigDecimal.class));\n+        verify(clusterCommandRepository, times(1)).save(any(ClusterCommand.class));\n+    }\n+\n+    private ApiHost apiHost(String fqdn) {\n+        ApiHost apiHost = new ApiHost();\n+        apiHost.setHostname(fqdn);\n+        return apiHost;\n+    }\n+\n+    private ProxyConfig testProxyConfig() {\n+        return ProxyConfig.builder().withCrn(\"crn\")\n+                .withName(\"proxy\")\n+                .withProtocol(\"tcp\")\n+                .withServerHost(\"10.0.0.0\")\n+                .withServerPort(88)\n+                .withProxyAuthentication(ProxyAuthentication.builder()\n+                        .withUserName(\"user\")\n+                        .withPassword(\"pw\")\n+                        .build())\n+                .build();\n+    }\n+\n+    private Cluster testCluster() {\n+        Cluster cluster = new Cluster();\n+        cluster.setId(1L);\n+        cluster.setName(\"name\");\n+        cluster.setCloudbreakAmbariPassword(\"pass\");\n+        cluster.setCloudbreakAmbariUser(\"user\");\n+        return cluster;\n+    }\n+\n+    private Stack testStack() {\n+        Stack stack = new Stack();\n+        User user = new User();\n+        user.setUserId(\"1\");\n+        user.setId(1L);\n+        user.setUserName(\"testJoska\");\n+        user.setUserCrn(\"joska::crn\");\n+        user.setTenant(new Tenant());\n+        stack.setCreator(user);\n+        stack.setGatewayPort(1);\n+        stack.setCluster(testCluster());\n+        stack.setType(StackType.DATALAKE);\n+        return stack;\n+    }\n+}"
  },
  {
    "sha": "c8ffd512c90ee2315560ad945ee32be5b962987c",
    "filename": "common/src/main/resources/messages/messages.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/common/src/main/resources/messages/messages.properties",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/common/src/main/resources/messages/messages.properties",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/common/src/main/resources/messages/messages.properties?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -64,8 +64,8 @@ stack.cm.diagnostics.collection.failed=CM based diagnostics collection failed. R\n \n cluster.starting=Starting cluster\n cluster.dns.update.finished=DNS entries have been updated for the cluster\n-cluster.building=Building cluster\n-cluster.built=Cluster has been built\n+cluster.building=Installing CDP services\n+cluster.built=CDP services has been installed\n ambari.cluster.created=Cloudera Manager cluster created\n cluster.started=Cluster has been started\n cluster.stopping=Stopping cluster"
  },
  {
    "sha": "31813498f35d881e8c45f021127af59390a472c5",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java",
    "status": "modified",
    "additions": 171,
    "deletions": 62,
    "changes": 233,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterBuilderService.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -21,6 +21,7 @@\n \n import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n import com.sequenceiq.cloudbreak.cluster.api.ClusterApi;\n+import com.sequenceiq.cloudbreak.cluster.api.ClusterSetupService;\n import com.sequenceiq.cloudbreak.cluster.service.ClusterClientInitException;\n import com.sequenceiq.cloudbreak.cmtemplate.utils.BlueprintUtils;\n import com.sequenceiq.cloudbreak.common.service.TransactionService;\n@@ -30,14 +31,13 @@\n import com.sequenceiq.cloudbreak.domain.stack.cluster.DatalakeResources;\n import com.sequenceiq.cloudbreak.domain.stack.cluster.host.HostGroup;\n import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceMetaData;\n-import com.sequenceiq.cloudbreak.dto.KerberosConfig;\n import com.sequenceiq.cloudbreak.dto.ProxyConfig;\n import com.sequenceiq.cloudbreak.kerberos.KerberosConfigService;\n import com.sequenceiq.cloudbreak.ldap.LdapConfigService;\n import com.sequenceiq.cloudbreak.service.CloudbreakException;\n import com.sequenceiq.cloudbreak.service.ComponentConfigProviderService;\n import com.sequenceiq.cloudbreak.service.cluster.ClusterApiConnectors;\n-import com.sequenceiq.cloudbreak.service.cluster.ClusterCreationSuccessHandler;\n+import com.sequenceiq.cloudbreak.service.cluster.FinalizeClusterInstallHandler;\n import com.sequenceiq.cloudbreak.service.cluster.ClusterService;\n import com.sequenceiq.cloudbreak.service.cluster.flow.recipe.RecipeEngine;\n import com.sequenceiq.cloudbreak.service.cluster.flow.telemetry.ClusterMonitoringEngine;\n@@ -49,7 +49,6 @@\n import com.sequenceiq.cloudbreak.service.stack.InstanceMetaDataService;\n import com.sequenceiq.cloudbreak.service.stack.StackService;\n import com.sequenceiq.cloudbreak.template.TemplatePreparationObject;\n-import com.sequenceiq.common.api.telemetry.model.Telemetry;\n \n @Service\n public class ClusterBuilderService {\n@@ -76,7 +75,7 @@\n     private TransactionService transactionService;\n \n     @Inject\n-    private ClusterCreationSuccessHandler clusterCreationSuccessHandler;\n+    private FinalizeClusterInstallHandler finalizeClusterInstallHandler;\n \n     @Inject\n     private HostGroupService hostGroupService;\n@@ -119,69 +118,145 @@ public void startCluster(Long stackId) throws CloudbreakException, ClusterClient\n         connector.changeOriginalCredentialsAndCreateCloudbreakUser(ldapConfigured);\n     }\n \n-    public void buildCluster(Long stackId) throws CloudbreakException, ClusterClientInitException {\n+    public void waitForClusterManager(Long stackId) throws CloudbreakException, ClusterClientInitException {\n         Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n         stack.setResources(new HashSet<>(resourceService.getAllByStackId(stackId)));\n-        ClusterApi connector = clusterApiConnectors.getConnector(stack);\n-        Set<HostGroup> hostGroups = hostGroupService.getByClusterWithRecipes(stack.getCluster().getId());\n-        Cluster cluster = stack.getCluster();\n-        clusterService.updateCreationDateOnCluster(cluster);\n-        connector.waitForServer(stack, true);\n-        TemplatePreparationObject templatePreparationObject = conversionService.convert(stack, TemplatePreparationObject.class);\n-        Map<HostGroup, List<InstanceMetaData>> instanceMetaDataByHostGroup = loadInstanceMetadataForHostGroups(hostGroups);\n-        recipeEngine.executePostAmbariStartRecipes(stack, hostGroupService.getRecipesByCluster(cluster.getId()));\n-        String blueprintText = cluster.getBlueprint().getBlueprintText();\n-        cluster.setExtendedBlueprintText(blueprintText);\n-        clusterService.updateCluster(cluster);\n-        final Telemetry telemetry = componentConfigProviderService.getTelemetry(stackId);\n+        clusterService.updateCreationDateOnCluster(stack.getCluster());\n+        clusterApiConnectors\n+                .getConnector(stack)\n+                .waitForServer(stack, true);\n+    }\n \n-        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(cluster.getProxyConfigCrn(), cluster.getEnvironmentCrn());\n-        setupProxy(connector, proxyConfig.orElse(null));\n-        Set<DatalakeResources> datalakeResources = datalakeResourcesService\n-                .findDatalakeResourcesByWorkspaceAndEnvironment(stack.getWorkspace().getId(), stack.getEnvironmentCrn());\n+    public void validateLicence(Long stackId) {\n+        getClusterSetupService(stackId).validateLicence();\n+    }\n \n-        Optional<Stack> sdxStack = Optional.ofNullable(datalakeResources)\n-                .map(Set::stream).flatMap(Stream::findFirst)\n-                .map(DatalakeResources::getDatalakeStackId)\n-                .map(stackService::getByIdWithListsInTransaction);\n+    public void configureManagementServices(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(\n+                stack.getCluster().getProxyConfigCrn(),\n+                stack.getCluster().getEnvironmentCrn());\n+\n+        getClusterSetupService(stack).configureManagementServices(conversionService.convert(stack, TemplatePreparationObject.class),\n+                sdxContext(stack),\n+                sdxStackCrn(stack),\n+                componentConfigProviderService.getTelemetry(stackId),\n+                proxyConfig.orElse(null));\n+    }\n \n-        String sdxContext = sdxStack\n-                .map(clusterApiConnectors::getConnector)\n-                .map(ClusterApi::getSdxContext).orElse(null);\n-        String sdxStackCrn = sdxStack\n-                .map(Stack::getResourceCrn)\n-                .orElse(null);\n-        if (telemetry.isMonitoringFeatureEnabled()) {\n-            connector.clusterSecurityService().setupMonitoringUser();\n-            clusterMonitoringEngine.installAndStartMonitoring(stack, telemetry);\n+    public void configureSupportTags(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        getClusterSetupService(stack).configureSupportTags(conversionService.convert(stack, TemplatePreparationObject.class));\n+    }\n+\n+    public void updateConfig(Long stackId) {\n+        getClusterSetupService(stackId).updateConfig();\n+    }\n+\n+    public void refreshParcelRepos(Long stackId) {\n+        getClusterSetupService(stackId).refreshParcelRepos();\n+    }\n+\n+    public void startManagementServices(Long stackId) {\n+        getClusterSetupService(stackId).startManagementServices();\n+    }\n+\n+    public void suppressWarnings(Long stackId) {\n+        getClusterSetupService(stackId).suppressWarnings();\n+    }\n+\n+    public void configureKerberos(Long stackId) throws CloudbreakException {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        getClusterSetupService(stackId).configureKerberos(kerberosConfigService.get(stack.getEnvironmentCrn(), stack.getName()).orElse(null));\n+    }\n+\n+    public void installCluster(Long stackId) throws CloudbreakException, ClusterClientInitException {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        getClusterSetupService(stack).installCluster(stack.getCluster().getExtendedBlueprintText());\n+    }\n+\n+    public void prepareProxyConfig(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+\n+        Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByCrnWithEnvironmentFallback(\n+                stack.getCluster().getProxyConfigCrn(),\n+                stack.getCluster().getEnvironmentCrn());\n+        if (proxyConfig.isPresent()) {\n+            LOGGER.info(\"proxyConfig is not null, setup proxy for cluster: {}\", proxyConfig);\n+            getClusterSetupService(stack).setupProxy(proxyConfig.orElse(null));\n+        } else {\n+            LOGGER.info(\"proxyConfig was not found by proxyConfigCrn\");\n+        }\n+    }\n+\n+    public void executePostClusterManagerStartRecipes(Long stackId) throws CloudbreakException {\n+        recipeEngine.executePostAmbariStartRecipes(\n+                stackService.getByIdWithListsInTransaction(stackId),\n+                hostGroupService.getRecipesByCluster(\n+                        stackService.getByIdWithListsInTransaction(stackId).getCluster().getId()));\n+    }\n+\n+    public void setupMonitoring(Long stackId) throws CloudbreakException {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+\n+        if (componentConfigProviderService.getTelemetry(stackId).isMonitoringFeatureEnabled()) {\n+            clusterApiConnectors.getConnector(stack)\n+                    .clusterSecurityService()\n+                    .setupMonitoringUser();\n+            clusterMonitoringEngine.installAndStartMonitoring(\n+                    stack,\n+                    componentConfigProviderService.getTelemetry(stackId));\n         }\n+    }\n+\n+    public void prepareExtendedTemplate(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        Set<HostGroup> hostGroups = hostGroupService.getByClusterWithRecipes(stack.getCluster().getId());\n+        Cluster cluster = stack.getCluster();\n+\n+        setInitialBlueprintText(cluster);\n+\n+        String template = getClusterSetupService(stack)\n+                .prepareTemplate(\n+                    loadInstanceMetadataForHostGroups(hostGroups),\n+                    conversionService.convert(stack, TemplatePreparationObject.class),\n+                    sdxContext(stack),\n+                    sdxStackCrn(stack),\n+                    kerberosConfigService.get(\n+                            stack.getEnvironmentCrn(),\n+                            stack.getName()\n+                    ).orElse(null)\n+                );\n \n-        KerberosConfig kerberosConfig = kerberosConfigService.get(stack.getEnvironmentCrn(), stack.getName()).orElse(null);\n-        String template = connector.clusterSetupService().prepareTemplate(instanceMetaDataByHostGroup,\n-                templatePreparationObject,\n-                sdxContext,\n-                sdxStackCrn,\n-                kerberosConfig);\n         cluster.setExtendedBlueprintText(template);\n         clusterService.save(cluster);\n-        cluster = connector.clusterSetupService().buildCluster(instanceMetaDataByHostGroup,\n-                templatePreparationObject,\n-                sdxContext,\n-                sdxStackCrn,\n-                telemetry,\n-                kerberosConfig,\n-                proxyConfig.orElse(null),\n-                template);\n-        clusterService.save(cluster);\n-        recipeEngine.executePostInstallRecipes(stack);\n-        Set<InstanceMetaData> instanceMetaDatas = instanceMetaDataByHostGroup.values().stream().flatMap(Collection::stream).collect(Collectors.toSet());\n-        clusterCreationSuccessHandler.handleClusterCreationSuccess(instanceMetaDatas, stack.getCluster());\n+    }\n+\n+    public void finalizeClusterInstall(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        Set<HostGroup> hostGroups = hostGroupService.getByClusterWithRecipes(stack.getCluster().getId());\n+\n+        Set<InstanceMetaData> instanceMetaDatas = loadInstanceMetadataForHostGroups(hostGroups).values()\n+                .stream()\n+                .flatMap(Collection::stream)\n+                .collect(Collectors.toSet());\n+        finalizeClusterInstallHandler.finalizeClusterInstall(instanceMetaDatas, stack.getCluster());\n+    }\n+\n+    public void executePostInstallRecipes(Long stackId) throws CloudbreakException {\n+        recipeEngine.executePostInstallRecipes(\n+                stackService.getByIdWithListsInTransaction(stackId));\n+    }\n+\n+    public void prepareDatalakeResource(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+\n         if (StackType.DATALAKE == stack.getType()) {\n             try {\n                 transactionService.required(() -> {\n-                    Stack stackInTransaction = stackService.getByIdWithListsInTransaction(stackId);\n-                    if (blueprintUtils.isClouderaManagerClusterTemplate(blueprintText)) {\n-                        clouderaManagerDatalakeConfigProvider.collectAndStoreDatalakeResources(stackInTransaction);\n+                    if (blueprintUtils.isClouderaManagerClusterTemplate(stack.getCluster().getBlueprint().getBlueprintText())) {\n+                        clouderaManagerDatalakeConfigProvider.collectAndStoreDatalakeResources(\n+                                stackService.getByIdWithListsInTransaction(stackId));\n                     }\n                     return null;\n                 });\n@@ -191,13 +266,47 @@ public void buildCluster(Long stackId) throws CloudbreakException, ClusterClient\n         }\n     }\n \n-    private void setupProxy(ClusterApi connector, ProxyConfig proxyConfig) {\n-        if (proxyConfig != null) {\n-            LOGGER.info(\"proxyConfig is not null, setup proxy for cluster: {}\", proxyConfig);\n-            connector.clusterSetupService().setupProxy(proxyConfig);\n-        } else {\n-            LOGGER.info(\"proxyConfig was not found by proxyConfigCrn\");\n-        }\n+    private String sdxStackCrn(Stack stack) {\n+        return sdxStack(stack)\n+                .map(Stack::getResourceCrn)\n+                .orElse(null);\n+    }\n+\n+    private String sdxContext(Stack stack) {\n+        return sdxStack(stack)\n+                .map(clusterApiConnectors::getConnector)\n+                .map(ClusterApi::getSdxContext)\n+                .orElse(null);\n+    }\n+\n+    private Optional<Stack> sdxStack(Stack stack) {\n+        return Optional.ofNullable(datalakeResources(stack))\n+                .map(Set::stream)\n+                .flatMap(Stream::findFirst)\n+                .map(DatalakeResources::getDatalakeStackId)\n+                .map(stackService::getByIdWithListsInTransaction);\n+    }\n+\n+    private ClusterSetupService getClusterSetupService(Long stackId) {\n+        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+        return getClusterSetupService(stack);\n+    }\n+\n+    private ClusterSetupService getClusterSetupService(Stack stack) {\n+        return clusterApiConnectors.getConnector(stack)\n+                .clusterSetupService();\n+    }\n+\n+    private Set<DatalakeResources> datalakeResources(Stack stack) {\n+        return datalakeResourcesService\n+                .findDatalakeResourcesByWorkspaceAndEnvironment(\n+                        stack.getWorkspace().getId(),\n+                        stack.getEnvironmentCrn());\n+    }\n+\n+    private void setInitialBlueprintText(Cluster cluster) {\n+        cluster.setExtendedBlueprintText(cluster.getBlueprint().getBlueprintText());\n+        clusterService.updateCluster(cluster);\n     }\n \n     private Map<HostGroup, List<InstanceMetaData>> loadInstanceMetadataForHostGroups(Iterable<HostGroup> hostGroups) {"
  },
  {
    "sha": "c9b6ea1bf6b81ec7693cf01130d21fe32c8e8fc0",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationActions.java",
    "status": "modified",
    "additions": 289,
    "deletions": 18,
    "changes": 307,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationActions.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationActions.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationActions.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -27,6 +27,38 @@\n import com.sequenceiq.cloudbreak.reactor.api.event.cluster.InstallClusterSuccess;\n import com.sequenceiq.cloudbreak.reactor.api.event.cluster.StartClusterRequest;\n import com.sequenceiq.cloudbreak.reactor.api.event.cluster.StartClusterSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerManagementServicesRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerManagementServicesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerSupportTagsRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerSupportTagsSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerConfigureKerberosRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerConfigureKerberosSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostClusterManagerStartRecipesRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostClusterManagerStartRecipesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostInstallRecipesRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostInstallRecipesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.FinalizeClusterInstallRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.FinalizeClusterInstallSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareDatalakeResourceRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareDatalakeResourceSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareExtendedTemplateRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareExtendedTemplateSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerPrepareProxyConfigRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerPrepareProxyConfigSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerRefreshParcelRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerRefreshParcelSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerSetupMonitoringRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerSetupMonitoringSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.StartClusterManagerManagementServicesRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.StartClusterManagerManagementServicesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.SuppressClusterWarningsRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.SuppressClusterWarningsSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.UpdateClusterConfigRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.UpdateClusterConfigSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ValidateClusterLicenceRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ValidateClusterLicenceSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.WaitForClusterManagerRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.WaitForClusterManagerSuccess;\n import com.sequenceiq.cloudbreak.reactor.api.event.kerberos.KeytabConfigurationRequest;\n import com.sequenceiq.cloudbreak.reactor.api.event.kerberos.KeytabConfigurationSuccess;\n import com.sequenceiq.cloudbreak.reactor.api.event.ldap.LdapSSOConfigurationRequest;\n@@ -257,11 +289,161 @@ protected Selectable createRequest(ClusterViewContext context) {\n         };\n     }\n \n-    @Bean(name = \"INSTALLING_CLUSTER_STATE\")\n-    public Action<?, ?> installingClusterAction() {\n+    @Bean(name = \"WAIT_FOR_CLUSTER_MANAGER_STATE\")\n+    public Action<?, ?> waitForClusterManagerAction() {\n         return new AbstractClusterAction<>(LdapSSOConfigurationSuccess.class) {\n             @Override\n             protected void doExecute(ClusterViewContext context, LdapSSOConfigurationSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new WaitForClusterManagerRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_STATE\")\n+    public Action<?, ?> executePostClusterManagerStartRecipesAction() {\n+        return new AbstractClusterAction<>(WaitForClusterManagerSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, WaitForClusterManagerSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ExecutePostClusterManagerStartRecipesRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"PREPARE_PROXY_CONFIG_STATE\")\n+    public Action<?, ?> prepareProxyConfigAction() {\n+        return new AbstractClusterAction<>(ExecutePostClusterManagerStartRecipesSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ExecutePostClusterManagerStartRecipesSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ClusterManagerPrepareProxyConfigRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"SETUP_MONITORING_STATE\")\n+    public Action<?, ?> setupMonitoringAction() {\n+        return new AbstractClusterAction<>(ClusterManagerPrepareProxyConfigSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ClusterManagerPrepareProxyConfigSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ClusterManagerSetupMonitoringRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"PREPARE_EXTENDED_TEMPLATE_STATE\")\n+    public Action<?, ?> prepareExtendedTemplateAction() {\n+        return new AbstractClusterAction<>(ClusterManagerSetupMonitoringSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ClusterManagerSetupMonitoringSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new PrepareExtendedTemplateRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"VALIDATE_LICENCE_STATE\")\n+    public Action<?, ?> validateLicenceAction() {\n+        return new AbstractClusterAction<>(PrepareExtendedTemplateSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, PrepareExtendedTemplateSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ValidateClusterLicenceRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"CONFIGURE_MANAGEMENT_SERVICES_STATE\")\n+    public Action<?, ?> configureManagementServicesAction() {\n+        return new AbstractClusterAction<>(ValidateClusterLicenceSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ValidateClusterLicenceSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ConfigureClusterManagerManagementServicesRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"CONFIGURE_SUPPORT_TAGS_STATE\")\n+    public Action<?, ?> configureSupportTagsAction() {\n+        return new AbstractClusterAction<>(ConfigureClusterManagerManagementServicesSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ConfigureClusterManagerManagementServicesSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ConfigureClusterManagerSupportTagsRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"UPDATE_CONFIG_STATE\")\n+    public Action<?, ?> updateConfigAction() {\n+        return new AbstractClusterAction<>(ConfigureClusterManagerSupportTagsSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ConfigureClusterManagerSupportTagsSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new UpdateClusterConfigRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"REFRESH_PARCEL_REPOS_STATE\")\n+    public Action<?, ?> refreshParcelReposAction() {\n+        return new AbstractClusterAction<>(UpdateClusterConfigSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, UpdateClusterConfigSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ClusterManagerRefreshParcelRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"INSTALLING_CLUSTER_STATE\")\n+    public Action<?, ?> installingClusterAction() {\n+        return new AbstractClusterAction<>(ClusterManagerRefreshParcelSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ClusterManagerRefreshParcelSuccess payload, Map<Object, Object> variables) {\n                 clusterCreationService.installingCluster(context.getStack());\n                 sendEvent(context);\n             }\n@@ -273,6 +455,111 @@ protected Selectable createRequest(ClusterViewContext context) {\n         };\n     }\n \n+    @Bean(name = \"START_MANAGEMENT_SERVICES_STATE\")\n+    public Action<?, ?> startManagementServicesAction() {\n+        return new AbstractClusterAction<>(InstallClusterSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, InstallClusterSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new StartClusterManagerManagementServicesRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"SUPPRESS_WARNINGS_STATE\")\n+    public Action<?, ?> suppressWarningsAction() {\n+        return new AbstractClusterAction<>(StartClusterManagerManagementServicesSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, StartClusterManagerManagementServicesSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new SuppressClusterWarningsRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"CONFIGURE_KERBEROS_STATE\")\n+    public Action<?, ?> configureKerberosAction() {\n+        return new AbstractClusterAction<>(SuppressClusterWarningsSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, SuppressClusterWarningsSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ClusterManagerConfigureKerberosRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXECUTE_POST_INSTALL_RECIPES_STATE\")\n+    public Action<?, ?> executePostInstallRecipesAction() {\n+        return new AbstractClusterAction<>(ClusterManagerConfigureKerberosSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ClusterManagerConfigureKerberosSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new ExecutePostInstallRecipesRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"PREPARE_DATALAKE_RESOURCE_STATE\")\n+    public Action<?, ?> prepareDatalakeResourceAction() {\n+        return new AbstractClusterAction<>(ExecutePostInstallRecipesSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, ExecutePostInstallRecipesSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new PrepareDatalakeResourceRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"FINALIZE_CLUSTER_INSTALL_STATE\")\n+    public Action<?, ?> finalizeClusterInstallAction() {\n+        return new AbstractClusterAction<>(PrepareDatalakeResourceSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, PrepareDatalakeResourceSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new FinalizeClusterInstallRequest(context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE\")\n+    public Action<?, ?> clusterProxyGatewayRegistrationAction() {\n+        return new AbstractStackCreationAction<>(FinalizeClusterInstallSuccess.class) {\n+            @Override\n+            protected void doExecute(StackContext context, FinalizeClusterInstallSuccess payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(StackContext context) {\n+                return new ClusterProxyGatewayRegistrationRequest(context.getStack().getId(), context.getStack().cloudPlatform());\n+            }\n+        };\n+    }\n+\n     @Bean(name = \"CLUSTER_CREATION_FINISHED_STATE\")\n     public Action<?, ?> clusterCreationFinishedAction() {\n         return new AbstractClusterAction<>(ClusterProxyGatewayRegistrationSuccess.class) {\n@@ -309,20 +596,4 @@ protected Selectable createRequest(StackFailureContext context) {\n             }\n         };\n     }\n-\n-    @Bean(name = \"CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE\")\n-    public Action<?, ?> clusterProxyGatewayRegistrationAction() {\n-        return new AbstractStackCreationAction<>(InstallClusterSuccess.class) {\n-            @Override\n-            protected void doExecute(StackContext context, InstallClusterSuccess payload, Map<Object, Object> variables) {\n-                clusterCreationService.registeringGatewayToClusterProxy(context.getStack());\n-                sendEvent(context);\n-            }\n-\n-            @Override\n-            protected Selectable createRequest(StackContext context) {\n-                return new ClusterProxyGatewayRegistrationRequest(context.getStack().getId(), context.getStack().cloudPlatform());\n-            }\n-        };\n-    }\n }"
  },
  {
    "sha": "97e2752f10f852be78aa7cd4ce48c12c69941a5e",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationEvent.java",
    "status": "modified",
    "additions": 66,
    "deletions": 2,
    "changes": 68,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationEvent.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationEvent.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationEvent.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -4,6 +4,38 @@\n import com.sequenceiq.cloudbreak.reactor.api.event.cluster.InstallClusterSuccess;\n import com.sequenceiq.cloudbreak.reactor.api.event.cluster.StartClusterFailed;\n import com.sequenceiq.cloudbreak.reactor.api.event.cluster.StartClusterSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerManagementServicesFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerManagementServicesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerSupportTagsFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ConfigureClusterManagerSupportTagsSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerConfigureKerberosFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerConfigureKerberosSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostClusterManagerStartRecipesFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostClusterManagerStartRecipesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostInstallRecipesFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ExecutePostInstallRecipesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.FinalizeClusterInstallFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.FinalizeClusterInstallSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareDatalakeResourceFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareDatalakeResourceSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareExtendedTemplateFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.PrepareExtendedTemplateSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerPrepareProxyConfigFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerPrepareProxyConfigSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerRefreshParcelFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerRefreshParcelSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerSetupMonitoringFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ClusterManagerSetupMonitoringSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.StartClusterManagerManagementServicesFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.StartClusterManagerManagementServicesSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.SuppressClusterWarningsFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.SuppressClusterWarningsSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.UpdateClusterConfigFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.UpdateClusterConfigSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ValidateClusterLicenceFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.ValidateClusterLicenceSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.WaitForClusterManagerFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.install.WaitForClusterManagerSuccess;\n import com.sequenceiq.cloudbreak.reactor.api.event.kerberos.KeytabConfigurationFailed;\n import com.sequenceiq.cloudbreak.reactor.api.event.kerberos.KeytabConfigurationSuccess;\n import com.sequenceiq.cloudbreak.reactor.api.event.ldap.LdapSSOConfigurationFailed;\n@@ -48,10 +80,42 @@\n     START_AMBARI_SERVICES_FAILED_EVENT(EventSelectorUtil.selector(StartAmbariServicesFailed.class)),\n     LDAP_SSO_CONFIGURATION_FINISHED_EVENT(EventSelectorUtil.selector(LdapSSOConfigurationSuccess.class)),\n     LDAP_SSO_CONFIGURATION_FAILED_EVENT(EventSelectorUtil.selector(LdapSSOConfigurationFailed.class)),\n-    START_AMBARI_FINISHED_EVENT(EventSelectorUtil.selector(StartClusterSuccess.class)),\n-    START_AMBARI_FAILED_EVENT(EventSelectorUtil.selector(StartClusterFailed.class)),\n+    WAIT_FOR_CLUSTER_MANAGER_FINISHED_EVENT(EventSelectorUtil.selector(WaitForClusterManagerSuccess.class)),\n+    WAIT_FOR_CLUSTER_MANAGER_FAILED_EVENT(EventSelectorUtil.selector(WaitForClusterManagerFailed.class)),\n+    EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_FINISHED_EVENT(EventSelectorUtil.selector(ExecutePostClusterManagerStartRecipesSuccess.class)),\n+    EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_FAILED_EVENT(EventSelectorUtil.selector(ExecutePostClusterManagerStartRecipesFailed.class)),\n+    PREPARE_PROXY_CONFIG_FINISHED_EVENT(EventSelectorUtil.selector(ClusterManagerPrepareProxyConfigSuccess.class)),\n+    PREPARE_PROXY_CONFIG_FAILED_EVENT(EventSelectorUtil.selector(ClusterManagerPrepareProxyConfigFailed.class)),\n+    SETUP_MONITORING_FINISHED_EVENT(EventSelectorUtil.selector(ClusterManagerSetupMonitoringSuccess.class)),\n+    SETUP_MONITORING_FAILED_EVENT(EventSelectorUtil.selector(ClusterManagerSetupMonitoringFailed.class)),\n+    PREPARE_EXTENDED_TEMPLATE_FINISHED_EVENT(EventSelectorUtil.selector(PrepareExtendedTemplateSuccess.class)),\n+    PREPARE_EXTENDED_TEMPLATE_FAILED_EVENT(EventSelectorUtil.selector(PrepareExtendedTemplateFailed.class)),\n+    VALIDATE_LICENCE_FAILED_EVENT(EventSelectorUtil.selector(ValidateClusterLicenceFailed.class)),\n+    VALIDATE_LICENCE_SUCCESS_EVENT(EventSelectorUtil.selector(ValidateClusterLicenceSuccess.class)),\n+    CONFIGURE_MANAGEMENT_SERVICES_SUCCESS_EVENT(EventSelectorUtil.selector(ConfigureClusterManagerManagementServicesSuccess.class)),\n+    CONFIGURE_MANAGEMENT_SERVICES_FAILED_EVENT(EventSelectorUtil.selector(ConfigureClusterManagerManagementServicesFailed.class)),\n+    CONFIGURE_SUPPORT_TAGS_SUCCESS_EVENT(EventSelectorUtil.selector(ConfigureClusterManagerSupportTagsSuccess.class)),\n+    CONFIGURE_SUPPORT_TAGS_FAILED_EVENT(EventSelectorUtil.selector(ConfigureClusterManagerSupportTagsFailed.class)),\n+    CLUSTER_UPDATE_CONFIG_SUCCESS_EVENT(EventSelectorUtil.selector(UpdateClusterConfigSuccess.class)),\n+    CLUSTER_UPDATE_CONFIG_FAILED_EVENT(EventSelectorUtil.selector(UpdateClusterConfigFailed.class)),\n+    REFRESH_PARCEL_REPOS_SUCCESS_EVENT(EventSelectorUtil.selector(ClusterManagerRefreshParcelSuccess.class)),\n+    REFRESH_PARCEL_REPOS_FAILED_EVENT(EventSelectorUtil.selector(ClusterManagerRefreshParcelFailed.class)),\n     INSTALL_CLUSTER_FINISHED_EVENT(EventSelectorUtil.selector(InstallClusterSuccess.class)),\n     INSTALL_CLUSTER_FAILED_EVENT(EventSelectorUtil.selector(InstallClusterFailed.class)),\n+    START_MANAGEMENT_SERVICES_SUCCESS_EVENT(EventSelectorUtil.selector(StartClusterManagerManagementServicesSuccess.class)),\n+    START_MANAGEMENT_SERVICES_FAILED_EVENT(EventSelectorUtil.selector(StartClusterManagerManagementServicesFailed.class)),\n+    SUPPRESS_WARNINGS_SUCCESS_EVENT(EventSelectorUtil.selector(SuppressClusterWarningsSuccess.class)),\n+    SUPPRESS_WARNINGS_FAILED_EVENT(EventSelectorUtil.selector(SuppressClusterWarningsFailed.class)),\n+    CONFIGURE_KERBEROS_SUCCESS_EVENT(EventSelectorUtil.selector(ClusterManagerConfigureKerberosSuccess.class)),\n+    CONFIGURE_KERBEROS_FAILED_EVENT(EventSelectorUtil.selector(ClusterManagerConfigureKerberosFailed.class)),\n+    EXECUTE_POST_INSTALL_RECIPES_FINISHED_EVENT(EventSelectorUtil.selector(ExecutePostInstallRecipesSuccess.class)),\n+    EXECUTE_POST_INSTALL_RECIPES_FAILED_EVENT(EventSelectorUtil.selector(ExecutePostInstallRecipesFailed.class)),\n+    FINALIZE_CLUSTER_INSTALL_FINISHED_EVENT(EventSelectorUtil.selector(FinalizeClusterInstallSuccess.class)),\n+    FINALIZE_CLUSTER_INSTALL_FAILED_EVENT(EventSelectorUtil.selector(FinalizeClusterInstallFailed.class)),\n+    PREPARE_DATALAKE_RESOURCE_FINISHED_EVENT(EventSelectorUtil.selector(PrepareDatalakeResourceSuccess.class)),\n+    PREPARE_DATALAKE_RESOURCE_FAILED_EVENT(EventSelectorUtil.selector(PrepareDatalakeResourceFailed.class)),\n+    START_AMBARI_FINISHED_EVENT(EventSelectorUtil.selector(StartClusterSuccess.class)),\n+    START_AMBARI_FAILED_EVENT(EventSelectorUtil.selector(StartClusterFailed.class)),\n     CLUSTER_CREATION_FAILED_EVENT(\"CLUSTER_CREATION_FAILED\"),\n     CLUSTER_CREATION_FINISHED_EVENT(\"CLUSTER_CREATION_FINISHED\"),\n     CLUSTER_CREATION_FAILURE_HANDLED_EVENT(\"CLUSTER_CREATION_FAILHANDLED\");"
  },
  {
    "sha": "7a5b463ba516a7b40bdaf47f4333c5f500b0e3d7",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationFlowConfig.java",
    "status": "modified",
    "additions": 164,
    "deletions": 16,
    "changes": 180,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationFlowConfig.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationFlowConfig.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationFlowConfig.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -15,20 +15,52 @@\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CLUSTER_PROXY_GATEWAY_REGISTRATION_SUCCEEDED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CLUSTER_PROXY_REGISTRATION_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CLUSTER_PROXY_REGISTRATION_SUCCEEDED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CLUSTER_UPDATE_CONFIG_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CLUSTER_UPDATE_CONFIG_SUCCESS_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_KERBEROS_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_KERBEROS_SUCCESS_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_KEYTABS_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_KEYTABS_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_MANAGEMENT_SERVICES_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_MANAGEMENT_SERVICES_SUCCESS_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_SUPPORT_TAGS_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.CONFIGURE_SUPPORT_TAGS_SUCCESS_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.EXECUTE_POST_INSTALL_RECIPES_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.EXECUTE_POST_INSTALL_RECIPES_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.FINALIZE_CLUSTER_INSTALL_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.FINALIZE_CLUSTER_INSTALL_FINISHED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.HOST_METADATASETUP_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.HOST_METADATASETUP_FINISHED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.INSTALL_CLUSTER_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.INSTALL_CLUSTER_FINISHED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.LDAP_SSO_CONFIGURATION_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.LDAP_SSO_CONFIGURATION_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.PREPARE_DATALAKE_RESOURCE_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.PREPARE_DATALAKE_RESOURCE_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.PREPARE_EXTENDED_TEMPLATE_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.PREPARE_EXTENDED_TEMPLATE_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.PREPARE_PROXY_CONFIG_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.PREPARE_PROXY_CONFIG_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.REFRESH_PARCEL_REPOS_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.REFRESH_PARCEL_REPOS_SUCCESS_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.SETUP_MONITORING_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.SETUP_MONITORING_FINISHED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.START_AMBARI_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.START_AMBARI_FINISHED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.START_AMBARI_SERVICES_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.START_AMBARI_SERVICES_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.START_MANAGEMENT_SERVICES_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.START_MANAGEMENT_SERVICES_SUCCESS_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.SUPPRESS_WARNINGS_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.SUPPRESS_WARNINGS_SUCCESS_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.UPLOAD_RECIPES_FAILED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.UPLOAD_RECIPES_FINISHED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.VALIDATE_LICENCE_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.VALIDATE_LICENCE_SUCCESS_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.WAIT_FOR_CLUSTER_MANAGER_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent.WAIT_FOR_CLUSTER_MANAGER_FINISHED_EVENT;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.BOOTSTRAPPING_FREEIPA_ENDPOINT_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.BOOTSTRAPPING_MACHINES_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.BOOTSTRAPPING_PUBLIC_ENDPOINT_STATE;\n@@ -38,14 +70,30 @@\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CLUSTER_PROXY_REGISTRATION_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.COLLECTING_HOST_METADATA_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CONFIGURE_KERBEROS_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CONFIGURE_KEYTABS_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CONFIGURE_LDAP_SSO_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CONFIGURE_MANAGEMENT_SERVICES_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.CONFIGURE_SUPPORT_TAGS_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.EXECUTE_POST_INSTALL_RECIPES_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.FINAL_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.FINALIZE_CLUSTER_INSTALL_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.INIT_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.INSTALLING_CLUSTER_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.PREPARE_DATALAKE_RESOURCE_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.PREPARE_EXTENDED_TEMPLATE_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.PREPARE_PROXY_CONFIG_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.REFRESH_PARCEL_REPOS_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.SETUP_MONITORING_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.STARTING_CLUSTER_MANAGER_SERVICES_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.STARTING_CLUSTER_MANAGER_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.START_MANAGEMENT_SERVICES_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.SUPPRESS_WARNINGS_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.UPDATE_CONFIG_STATE;\n import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.UPLOAD_RECIPES_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.VALIDATE_LICENCE_STATE;\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState.WAIT_FOR_CLUSTER_MANAGER_STATE;\n \n import java.util.List;\n \n@@ -60,34 +108,134 @@\n         implements RetryableFlowConfiguration<ClusterCreationEvent> {\n     private static final List<Transition<ClusterCreationState, ClusterCreationEvent>> TRANSITIONS =\n             new Builder<ClusterCreationState, ClusterCreationEvent>().defaultFailureEvent(CLUSTER_CREATION_FAILED_EVENT)\n-            .from(INIT_STATE).to(CLUSTER_PROXY_REGISTRATION_STATE).event(CLUSTER_CREATION_EVENT).noFailureEvent()\n-            .from(CLUSTER_PROXY_REGISTRATION_STATE).to(BOOTSTRAPPING_MACHINES_STATE).event(CLUSTER_PROXY_REGISTRATION_SUCCEEDED_EVENT)\n+            .from(INIT_STATE)\n+                    .to(CLUSTER_PROXY_REGISTRATION_STATE)\n+                    .event(CLUSTER_CREATION_EVENT)\n+                    .noFailureEvent()\n+            .from(CLUSTER_PROXY_REGISTRATION_STATE)\n+                    .to(BOOTSTRAPPING_MACHINES_STATE)\n+                    .event(CLUSTER_PROXY_REGISTRATION_SUCCEEDED_EVENT)\n                     .failureEvent(CLUSTER_PROXY_REGISTRATION_FAILED_EVENT)\n-            .from(INIT_STATE).to(INSTALLING_CLUSTER_STATE).event(CLUSTER_INSTALL_EVENT).noFailureEvent()\n-            .from(BOOTSTRAPPING_MACHINES_STATE).to(COLLECTING_HOST_METADATA_STATE).event(BOOTSTRAP_MACHINES_FINISHED_EVENT)\n+            .from(INIT_STATE)\n+                    .to(INSTALLING_CLUSTER_STATE)\n+                    .event(CLUSTER_INSTALL_EVENT)\n+                    .noFailureEvent()\n+            .from(BOOTSTRAPPING_MACHINES_STATE)\n+                    .to(COLLECTING_HOST_METADATA_STATE)\n+                    .event(BOOTSTRAP_MACHINES_FINISHED_EVENT)\n                     .failureEvent(BOOTSTRAP_MACHINES_FAILED_EVENT)\n-            .from(COLLECTING_HOST_METADATA_STATE).to(CLEANUP_FREEIPA_STATE).event(HOST_METADATASETUP_FINISHED_EVENT)\n+            .from(COLLECTING_HOST_METADATA_STATE)\n+                    .to(CLEANUP_FREEIPA_STATE)\n+                    .event(HOST_METADATASETUP_FINISHED_EVENT)\n                     .failureEvent(HOST_METADATASETUP_FAILED_EVENT)\n-            .from(CLEANUP_FREEIPA_STATE).to(BOOTSTRAPPING_PUBLIC_ENDPOINT_STATE).event(CLEANUP_FREEIPA_FINISHED_EVENT).failureEvent(CLEANUP_FREEIPA_FAILED_EVENT)\n-            .from(BOOTSTRAPPING_PUBLIC_ENDPOINT_STATE).to(BOOTSTRAPPING_FREEIPA_ENDPOINT_STATE).event(BOOTSTRAP_PUBLIC_ENDPOINT_FINISHED_EVENT)\n+            .from(CLEANUP_FREEIPA_STATE)\n+                    .to(BOOTSTRAPPING_PUBLIC_ENDPOINT_STATE)\n+                    .event(CLEANUP_FREEIPA_FINISHED_EVENT)\n+                    .failureEvent(CLEANUP_FREEIPA_FAILED_EVENT)\n+            .from(BOOTSTRAPPING_PUBLIC_ENDPOINT_STATE)\n+                    .to(BOOTSTRAPPING_FREEIPA_ENDPOINT_STATE)\n+                    .event(BOOTSTRAP_PUBLIC_ENDPOINT_FINISHED_EVENT)\n                     .defaultFailureEvent()\n-            .from(BOOTSTRAPPING_FREEIPA_ENDPOINT_STATE).to(UPLOAD_RECIPES_STATE).event(BOOTSTRAP_FREEIPA_ENDPOINT_FINISHED_EVENT)\n+            .from(BOOTSTRAPPING_FREEIPA_ENDPOINT_STATE)\n+                    .to(UPLOAD_RECIPES_STATE)\n+                    .event(BOOTSTRAP_FREEIPA_ENDPOINT_FINISHED_EVENT)\n                 .defaultFailureEvent()\n-            .from(UPLOAD_RECIPES_STATE).to(CONFIGURE_KEYTABS_STATE).event(UPLOAD_RECIPES_FINISHED_EVENT)\n+            .from(UPLOAD_RECIPES_STATE)\n+                    .to(CONFIGURE_KEYTABS_STATE)\n+                    .event(UPLOAD_RECIPES_FINISHED_EVENT)\n                     .failureEvent(UPLOAD_RECIPES_FAILED_EVENT)\n-            .from(CONFIGURE_KEYTABS_STATE).to(STARTING_CLUSTER_MANAGER_SERVICES_STATE).event(CONFIGURE_KEYTABS_FINISHED_EVENT)\n+            .from(CONFIGURE_KEYTABS_STATE)\n+                    .to(STARTING_CLUSTER_MANAGER_SERVICES_STATE)\n+                    .event(CONFIGURE_KEYTABS_FINISHED_EVENT)\n                     .failureEvent(CONFIGURE_KEYTABS_FAILED_EVENT)\n-            .from(STARTING_CLUSTER_MANAGER_SERVICES_STATE).to(STARTING_CLUSTER_MANAGER_STATE).event(START_AMBARI_SERVICES_FINISHED_EVENT)\n+            .from(STARTING_CLUSTER_MANAGER_SERVICES_STATE)\n+                    .to(STARTING_CLUSTER_MANAGER_STATE)\n+                    .event(START_AMBARI_SERVICES_FINISHED_EVENT)\n                     .failureEvent(START_AMBARI_SERVICES_FAILED_EVENT)\n-            .from(STARTING_CLUSTER_MANAGER_STATE).to(CONFIGURE_LDAP_SSO_STATE).event(START_AMBARI_FINISHED_EVENT)\n+            .from(STARTING_CLUSTER_MANAGER_STATE)\n+                    .to(CONFIGURE_LDAP_SSO_STATE)\n+                    .event(START_AMBARI_FINISHED_EVENT)\n                     .failureEvent(START_AMBARI_FAILED_EVENT)\n-            .from(CONFIGURE_LDAP_SSO_STATE).to(INSTALLING_CLUSTER_STATE).event(LDAP_SSO_CONFIGURATION_FINISHED_EVENT)\n+            .from(CONFIGURE_LDAP_SSO_STATE)\n+                    .to(WAIT_FOR_CLUSTER_MANAGER_STATE)\n+                    .event(LDAP_SSO_CONFIGURATION_FINISHED_EVENT)\n                     .failureEvent(LDAP_SSO_CONFIGURATION_FAILED_EVENT)\n-            .from(INSTALLING_CLUSTER_STATE).to(CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE).event(INSTALL_CLUSTER_FINISHED_EVENT)\n+            .from(WAIT_FOR_CLUSTER_MANAGER_STATE)\n+                    .to(EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_STATE)\n+                    .event(WAIT_FOR_CLUSTER_MANAGER_FINISHED_EVENT)\n+                    .failureEvent(WAIT_FOR_CLUSTER_MANAGER_FAILED_EVENT)\n+            .from(EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_STATE)\n+                    .to(PREPARE_PROXY_CONFIG_STATE)\n+                    .event(EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_FINISHED_EVENT)\n+                    .failureEvent(EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_FAILED_EVENT)\n+            .from(PREPARE_PROXY_CONFIG_STATE)\n+                    .to(SETUP_MONITORING_STATE)\n+                    .event(PREPARE_PROXY_CONFIG_FINISHED_EVENT)\n+                    .failureEvent(PREPARE_PROXY_CONFIG_FAILED_EVENT)\n+            .from(SETUP_MONITORING_STATE)\n+                    .to(PREPARE_EXTENDED_TEMPLATE_STATE)\n+                    .event(SETUP_MONITORING_FINISHED_EVENT)\n+                    .failureEvent(SETUP_MONITORING_FAILED_EVENT)\n+            .from(PREPARE_EXTENDED_TEMPLATE_STATE)\n+                    .to(VALIDATE_LICENCE_STATE)\n+                    .event(PREPARE_EXTENDED_TEMPLATE_FINISHED_EVENT)\n+                    .failureEvent(PREPARE_EXTENDED_TEMPLATE_FAILED_EVENT)\n+            .from(VALIDATE_LICENCE_STATE)\n+                    .to(CONFIGURE_MANAGEMENT_SERVICES_STATE)\n+                    .event(VALIDATE_LICENCE_SUCCESS_EVENT)\n+                    .failureEvent(VALIDATE_LICENCE_FAILED_EVENT)\n+            .from(CONFIGURE_MANAGEMENT_SERVICES_STATE)\n+                    .to(CONFIGURE_SUPPORT_TAGS_STATE)\n+                    .event(CONFIGURE_MANAGEMENT_SERVICES_SUCCESS_EVENT)\n+                    .failureEvent(CONFIGURE_MANAGEMENT_SERVICES_FAILED_EVENT)\n+            .from(CONFIGURE_SUPPORT_TAGS_STATE)\n+                    .to(UPDATE_CONFIG_STATE)\n+                    .event(CONFIGURE_SUPPORT_TAGS_SUCCESS_EVENT)\n+                    .failureEvent(CONFIGURE_SUPPORT_TAGS_FAILED_EVENT)\n+            .from(UPDATE_CONFIG_STATE)\n+                    .to(REFRESH_PARCEL_REPOS_STATE)\n+                    .event(CLUSTER_UPDATE_CONFIG_SUCCESS_EVENT)\n+                    .failureEvent(CLUSTER_UPDATE_CONFIG_FAILED_EVENT)\n+            .from(REFRESH_PARCEL_REPOS_STATE)\n+                    .to(INSTALLING_CLUSTER_STATE)\n+                    .event(REFRESH_PARCEL_REPOS_SUCCESS_EVENT)\n+                    .failureEvent(REFRESH_PARCEL_REPOS_FAILED_EVENT)\n+            .from(INSTALLING_CLUSTER_STATE)\n+                    .to(START_MANAGEMENT_SERVICES_STATE)\n+                    .event(INSTALL_CLUSTER_FINISHED_EVENT)\n                     .failureEvent(INSTALL_CLUSTER_FAILED_EVENT)\n-            .from(CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE).to(CLUSTER_CREATION_FINISHED_STATE).event(CLUSTER_PROXY_GATEWAY_REGISTRATION_SUCCEEDED_EVENT)\n+            .from(START_MANAGEMENT_SERVICES_STATE)\n+                    .to(SUPPRESS_WARNINGS_STATE)\n+                    .event(START_MANAGEMENT_SERVICES_SUCCESS_EVENT)\n+                    .failureEvent(START_MANAGEMENT_SERVICES_FAILED_EVENT)\n+            .from(SUPPRESS_WARNINGS_STATE)\n+                    .to(CONFIGURE_KERBEROS_STATE)\n+                    .event(SUPPRESS_WARNINGS_SUCCESS_EVENT)\n+                    .failureEvent(SUPPRESS_WARNINGS_FAILED_EVENT)\n+            .from(CONFIGURE_KERBEROS_STATE)\n+                    .to(EXECUTE_POST_INSTALL_RECIPES_STATE)\n+                    .event(CONFIGURE_KERBEROS_SUCCESS_EVENT)\n+                    .failureEvent(CONFIGURE_KERBEROS_FAILED_EVENT)\n+            .from(EXECUTE_POST_INSTALL_RECIPES_STATE)\n+                    .to(PREPARE_DATALAKE_RESOURCE_STATE)\n+                    .event(EXECUTE_POST_INSTALL_RECIPES_FINISHED_EVENT)\n+                    .failureEvent(EXECUTE_POST_INSTALL_RECIPES_FAILED_EVENT)\n+            .from(PREPARE_DATALAKE_RESOURCE_STATE)\n+                    .to(FINALIZE_CLUSTER_INSTALL_STATE)\n+                    .event(PREPARE_DATALAKE_RESOURCE_FINISHED_EVENT)\n+                    .failureEvent(PREPARE_DATALAKE_RESOURCE_FAILED_EVENT)\n+            .from(FINALIZE_CLUSTER_INSTALL_STATE)\n+                    .to(CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE)\n+                    .event(FINALIZE_CLUSTER_INSTALL_FINISHED_EVENT)\n+                    .failureEvent(FINALIZE_CLUSTER_INSTALL_FAILED_EVENT)\n+            .from(CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE)\n+                    .to(CLUSTER_CREATION_FINISHED_STATE)\n+                    .event(CLUSTER_PROXY_GATEWAY_REGISTRATION_SUCCEEDED_EVENT)\n                     .failureEvent(CLUSTER_PROXY_GATEWAY_REGISTRATION_FAILED_EVENT)\n-            .from(CLUSTER_CREATION_FINISHED_STATE).to(FINAL_STATE).event(CLUSTER_CREATION_FINISHED_EVENT).defaultFailureEvent()\n+            .from(CLUSTER_CREATION_FINISHED_STATE)\n+                    .to(FINAL_STATE)\n+                    .event(CLUSTER_CREATION_FINISHED_EVENT)\n+                    .defaultFailureEvent()\n             .build();\n \n     private static final FlowEdgeConfig<ClusterCreationState, ClusterCreationEvent> EDGE_CONFIG ="
  },
  {
    "sha": "d8bd503ec64e5983e734f96ea4143d9ded02d7ff",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationService.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationService.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationService.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -80,17 +80,16 @@ public void startingClusterServices(StackView stack) {\n         flowMessageService.fireEventAndLog(stack.getId(), UPDATE_IN_PROGRESS.name(), CLUSTER_RUN_SERVICES);\n     }\n \n+    public void installingCluster(StackView stack) {\n+        stackUpdater.updateStackStatus(stack.getId(), DetailedStackStatus.CLUSTER_OPERATION, \"Building the cluster\");\n+        flowMessageService.fireEventAndLog(stack.getId(), UPDATE_IN_PROGRESS.name(), CLUSTER_BUILDING);\n+    }\n+\n     public void startingClusterManager(long stackId) {\n         stackUpdater.updateStackStatus(stackId, DetailedStackStatus.CLUSTER_OPERATION, \"cluster manager cluster is now starting.\");\n         clusterService.updateClusterStatusByStackId(stackId, UPDATE_IN_PROGRESS);\n     }\n \n-    public void installingCluster(StackView stack) {\n-        stackUpdater.updateStackStatus(stack.getId(), DetailedStackStatus.CLUSTER_OPERATION,\n-                String.format(\"Building the cluster\"));\n-        flowMessageService.fireEventAndLog(stack.getId(), UPDATE_IN_PROGRESS.name(), CLUSTER_BUILDING);\n-    }\n-\n     public void clusterInstallationFinished(StackView stackView) {\n         try {\n             transactionService.required(() -> {"
  },
  {
    "sha": "f9e99d645fa5be98b8b21027dc392a625bde2e61",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationState.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationState.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationState.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/ClusterCreationState.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -18,7 +18,23 @@\n     STARTING_CLUSTER_MANAGER_SERVICES_STATE,\n     STARTING_CLUSTER_MANAGER_STATE,\n     CONFIGURE_LDAP_SSO_STATE,\n+    WAIT_FOR_CLUSTER_MANAGER_STATE,\n+    EXECUTE_POST_CLUSTER_MANAGER_START_RECIPES_STATE,\n+    PREPARE_PROXY_CONFIG_STATE,\n+    SETUP_MONITORING_STATE,\n+    PREPARE_EXTENDED_TEMPLATE_STATE,\n+    VALIDATE_LICENCE_STATE,\n+    CONFIGURE_MANAGEMENT_SERVICES_STATE,\n+    CONFIGURE_SUPPORT_TAGS_STATE,\n+    UPDATE_CONFIG_STATE,\n+    REFRESH_PARCEL_REPOS_STATE,\n     INSTALLING_CLUSTER_STATE,\n+    START_MANAGEMENT_SERVICES_STATE,\n+    SUPPRESS_WARNINGS_STATE,\n+    CONFIGURE_KERBEROS_STATE,\n+    EXECUTE_POST_INSTALL_RECIPES_STATE,\n+    PREPARE_DATALAKE_RESOURCE_STATE,\n+    FINALIZE_CLUSTER_INSTALL_STATE,\n     CLUSTER_CREATION_FINISHED_STATE,\n     CLUSTER_PROXY_GATEWAY_REGISTRATION_STATE,\n     FINAL_STATE;"
  },
  {
    "sha": "bb82c822f061ffb4aaafd6b51cc6432a0017e7b4",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosFailed.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosFailed.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosFailed.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosFailed.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+\n+public class ClusterManagerConfigureKerberosFailed extends StackFailureEvent {\n+    public ClusterManagerConfigureKerberosFailed(Long stackId, Exception ex) {\n+        super(stackId, ex);\n+    }\n+}"
  },
  {
    "sha": "c74534b1cea6838182ed889ac8281cca58d062bc",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosRequest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosRequest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosRequest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerConfigureKerberosRequest extends StackEvent {\n+    public ClusterManagerConfigureKerberosRequest(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "131f8293f915e51345836878951adc8ec1f908a6",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosSuccess.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosSuccess.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosSuccess.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerConfigureKerberosSuccess.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerConfigureKerberosSuccess extends StackEvent {\n+    public ClusterManagerConfigureKerberosSuccess(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "9adb89fbcdc865447379d6c9bc9dfb142cabb20d",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigFailed.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigFailed.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigFailed.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigFailed.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+\n+public class ClusterManagerPrepareProxyConfigFailed extends StackFailureEvent {\n+    public ClusterManagerPrepareProxyConfigFailed(Long stackId, Exception ex) {\n+        super(stackId, ex);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b4dcbfa06d368f6ff2e55e0130c953f4f8e7a9a8",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigRequest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigRequest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigRequest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerPrepareProxyConfigRequest extends StackEvent {\n+    public ClusterManagerPrepareProxyConfigRequest(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "29dcb9f6ff1e268909023bfca36b01b51052d7ad",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigSuccess.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigSuccess.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigSuccess.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerPrepareProxyConfigSuccess.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerPrepareProxyConfigSuccess extends StackEvent {\n+    public ClusterManagerPrepareProxyConfigSuccess(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "5eb2c5150be9f8e0ce5722afc530f261ec97c8a1",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelFailed.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelFailed.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelFailed.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelFailed.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+\n+public class ClusterManagerRefreshParcelFailed extends StackFailureEvent {\n+    public ClusterManagerRefreshParcelFailed(Long stackId, Exception ex) {\n+        super(stackId, ex);\n+    }\n+}"
  },
  {
    "sha": "3befc3a17c9aecc8b028047d7cdefc76f8762077",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelRequest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelRequest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelRequest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerRefreshParcelRequest extends StackEvent {\n+    public ClusterManagerRefreshParcelRequest(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "b41f624a37195d90ee77d2017555023972aaf7d4",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelSuccess.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelSuccess.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelSuccess.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerRefreshParcelSuccess.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerRefreshParcelSuccess extends StackEvent {\n+    public ClusterManagerRefreshParcelSuccess(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "3e583d027e564a636e06844d9361dd6e934497d1",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringFailed.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringFailed.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringFailed.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringFailed.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+\n+public class ClusterManagerSetupMonitoringFailed extends StackFailureEvent {\n+    public ClusterManagerSetupMonitoringFailed(Long stackId, Exception ex) {\n+        super(stackId, ex);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "644869ad61987f418f2adb2e2fa9ed2a4699adc1",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringRequest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringRequest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringRequest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerSetupMonitoringRequest extends StackEvent {\n+    public ClusterManagerSetupMonitoringRequest(Long stackId) {\n+        super(stackId);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "78c1a4048ed6dea1e3745056930c9bb374835cde",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringSuccess.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringSuccess.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringSuccess.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ClusterManagerSetupMonitoringSuccess.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterManagerSetupMonitoringSuccess extends StackEvent {\n+    public ClusterManagerSetupMonitoringSuccess(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "fc308149ccbb2d28644ac819be6a582bb3e5108f",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesFailed.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesFailed.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesFailed.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesFailed.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+\n+public class ConfigureClusterManagerManagementServicesFailed extends StackFailureEvent {\n+    public ConfigureClusterManagerManagementServicesFailed(Long stackId, Exception ex) {\n+        super(stackId, ex);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "165b751009dc25553344990192dfd93de4c0acf9",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesRequest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesRequest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesRequest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ConfigureClusterManagerManagementServicesRequest extends StackEvent {\n+    public ConfigureClusterManagerManagementServicesRequest(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  },
  {
    "sha": "a294c905bb084e1d19c714d34c99a94832c53eb0",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesSuccess.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesSuccess.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesSuccess.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerManagementServicesSuccess.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ConfigureClusterManagerManagementServicesSuccess extends StackEvent {\n+    public ConfigureClusterManagerManagementServicesSuccess(Long stackId) {\n+        super(stackId);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4d6825a86cfde744f3e6cca7e85b97d8026d6611",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsFailed.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsFailed.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsFailed.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsFailed.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+\n+public class ConfigureClusterManagerSupportTagsFailed extends StackFailureEvent {\n+    public ConfigureClusterManagerSupportTagsFailed(Long stackId, Exception ex) {\n+        super(stackId, ex);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ef879d13e20d847e3614acc7993a9b54a954bccf",
    "filename": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/hortonworks/cloudbreak/blob/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsRequest.java",
    "raw_url": "https://github.com/hortonworks/cloudbreak/raw/5d3d9177e10f23413d2d7bcb29f90ea180b33486/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsRequest.java",
    "contents_url": "https://api.github.com/repos/hortonworks/cloudbreak/contents/core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/install/ConfigureClusterManagerSupportTagsRequest.java?ref=5d3d9177e10f23413d2d7bcb29f90ea180b33486",
    "patch": "@@ -0,0 +1,9 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.install;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ConfigureClusterManagerSupportTagsRequest extends StackEvent {\n+    public ConfigureClusterManagerSupportTagsRequest(Long stackId) {\n+        super(stackId);\n+    }\n+}"
  }
]
