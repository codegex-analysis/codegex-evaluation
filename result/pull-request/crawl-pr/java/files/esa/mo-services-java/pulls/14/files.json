[
  {
    "sha": "a3e0868dcb2f0eea9c80c8e2563eba8ab695d819",
    "filename": "apis/api-mal/src/main/java/org/ccsds/moims/mo/mal/transport/MALTransportFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/apis/api-mal/src/main/java/org/ccsds/moims/mo/mal/transport/MALTransportFactory.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/apis/api-mal/src/main/java/org/ccsds/moims/mo/mal/transport/MALTransportFactory.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/apis/api-mal/src/main/java/org/ccsds/moims/mo/mal/transport/MALTransportFactory.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -111,9 +111,7 @@ public static MALTransportFactory newFactory(final String protocol)\n                             className);\n                 }\n \n-                return (MALTransportFactory) factoryClass.getConstructor(new Class[]{\n-                    String.class\n-                })\n+                return (MALTransportFactory) factoryClass.getConstructor(String.class)\n                         .newInstance(new Object[]{\n                     protocol\n                 });"
  },
  {
    "sha": "47f73e5b9e4db2f2e0b0ecd7631e170fb96071fd",
    "filename": "bindings/encoding-binary/src/main/java/esa/mo/mal/encoder/binary/base/BaseBinaryDecoder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/encoding-binary/src/main/java/esa/mo/mal/encoder/binary/base/BaseBinaryDecoder.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/encoding-binary/src/main/java/esa/mo/mal/encoder/binary/base/BaseBinaryDecoder.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/encoding-binary/src/main/java/esa/mo/mal/encoder/binary/base/BaseBinaryDecoder.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -23,6 +23,7 @@\n import esa.mo.mal.encoder.gen.GENDecoder;\n import java.io.IOException;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -39,7 +40,7 @@\n \n     protected static final java.util.logging.Logger LOGGER = Logger.getLogger(\n             BaseBinaryDecoder.class.getName());\n-    protected static final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");\n+    protected static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;\n     protected static final int BLOCK_SIZE = 65536;\n \n     protected final BinaryTimeHandler timeHandler;"
  },
  {
    "sha": "5c23754fba4a8cadf61eb3a0b09f5c1e1329e68a",
    "filename": "bindings/encoding-generic/src/main/java/esa/mo/mal/encoder/gen/GENEncoder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/encoding-generic/src/main/java/esa/mo/mal/encoder/gen/GENEncoder.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/encoding-generic/src/main/java/esa/mo/mal/encoder/gen/GENEncoder.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/encoding-generic/src/main/java/esa/mo/mal/encoder/gen/GENEncoder.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -24,6 +24,7 @@\n import java.io.OutputStream;\n import java.math.BigInteger;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import org.ccsds.moims.mo.mal.MALException;\n@@ -47,7 +48,7 @@\n  */\n public abstract class GENEncoder implements MALListEncoder {\n \n-    protected static final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");\n+    protected static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;\n     protected static final String ENCODING_EXCEPTION_STR = \"Bad encoding\";\n     protected final StreamHolder outputStream;\n "
  },
  {
    "sha": "b330e22b9ae0d0f72122d261e375aef571a252ea",
    "filename": "bindings/encoding-string/src/main/java/esa/mo/mal/encoder/string/StringDecoder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/encoding-string/src/main/java/esa/mo/mal/encoder/string/StringDecoder.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/encoding-string/src/main/java/esa/mo/mal/encoder/string/StringDecoder.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/encoding-string/src/main/java/esa/mo/mal/encoder/string/StringDecoder.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -30,6 +30,7 @@\n import java.io.IOException;\n import java.math.BigInteger;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n import org.ccsds.moims.mo.mal.MALException;\n import org.ccsds.moims.mo.mal.MALListDecoder;\n@@ -40,7 +41,7 @@\n  */\n public class StringDecoder extends GENDecoder {\n \n-    static final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");\n+    static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;\n     public static final int BLOCK_SIZE = 65536;\n \n     /**"
  },
  {
    "sha": "35374a2e6196d6fdf7ba6abeb9cf6292d167c7dc",
    "filename": "bindings/transport-file/src/main/java/esa/mo/mal/encoder/line/LineDecoder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-file/src/main/java/esa/mo/mal/encoder/line/LineDecoder.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-file/src/main/java/esa/mo/mal/encoder/line/LineDecoder.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-file/src/main/java/esa/mo/mal/encoder/line/LineDecoder.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -23,6 +23,7 @@\n import java.io.IOException;\n import java.math.BigInteger;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n import org.ccsds.moims.mo.mal.MALDecoder;\n import org.ccsds.moims.mo.mal.MALException;\n@@ -34,7 +35,7 @@\n  */\n public class LineDecoder implements MALDecoder {\n \n-    static final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");\n+    static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;\n     private static final String STR_DELIM = \"\\n\";\n     private static final String STR_NULL = \"_\";\n     private static final int BLOCK_SIZE = 65536;"
  },
  {
    "sha": "84487c6ba95942ff26e53771465db24e31fdff37",
    "filename": "bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENReceptionHandler.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENReceptionHandler.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENReceptionHandler.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENReceptionHandler.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -33,25 +33,25 @@\n      *\n      * @return the remote URI that this reception handler receives data from\n      */\n-    public String getRemoteURI();\n+    String getRemoteURI();\n \n     /**\n      * Setter method for the remote URI of this handler\n      *\n      * @param newURI the remote root URI, i.e. maltcp://10.0.0.1:61617\n      */\n-    public void setRemoteURI(String newURI);\n+    void setRemoteURI(String newURI);\n \n     /**\n      * Returns the message sender for this reception handler.\n      *\n      * @return the message sender for this receiver. Null if this receiver does\n      * not support sending messages\n      */\n-    public GENMessageSender getMessageSender();\n+    GENMessageSender getMessageSender();\n \n     /**\n      * Closes the communication channel for this reception handler\n      */\n-    public void close();\n+    void close();\n }"
  },
  {
    "sha": "7b34ecd1ef1a5385245a519ec710a5eca4828c70",
    "filename": "bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENTransport.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENTransport.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENTransport.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/GENTransport.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -31,6 +31,7 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutorService;\n@@ -97,7 +98,7 @@\n      * Charset used for converting the encoded message into a string for\n      * debugging.\n      */\n-    public static final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");\n+    public static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;\n     /**\n      * Logger\n      */"
  },
  {
    "sha": "b593cd53aa65c665598a5c49f3e45e08b52fa794",
    "filename": "bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/util/GENMessagePoller.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/util/GENMessagePoller.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/util/GENMessagePoller.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-generic/src/main/java/esa/mo/mal/transport/gen/util/GENMessagePoller.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -168,7 +168,7 @@ public void close() {\n      *\n      * @param <T> The type of the encoded messages.\n      */\n-    public static interface GENMessageReceiver<T> {\n+    public interface GENMessageReceiver<T> {\n \n         /**\n          * Reads an encoded MALMessage."
  },
  {
    "sha": "a657ec4e76f3cbb5ab35b01c4bf30c23ab29c05e",
    "filename": "bindings/transport-spp/src/main/java/esa/mo/mal/transport/spp/SPPBaseTransport.java",
    "status": "modified",
    "additions": 1,
    "deletions": 6,
    "changes": 7,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-spp/src/main/java/esa/mo/mal/transport/spp/SPPBaseTransport.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-spp/src/main/java/esa/mo/mal/transport/spp/SPPBaseTransport.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-spp/src/main/java/esa/mo/mal/transport/spp/SPPBaseTransport.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -286,12 +286,7 @@ protected GENMessage internalCreateMessage(final int apidQualifier, final int ap\n             final Long transactionId = (long) java.nio.ByteBuffer.wrap(packet).getLong(18);\n \n             Map<Long, SPPSegmentsHandler> map\n-                    = segmentHandlers.get(new QualifiedApid(apidQualifier, apid));\n-\n-            if (null == map) {\n-                map = new HashMap<Long, SPPSegmentsHandler>();\n-                segmentHandlers.put(new QualifiedApid(apidQualifier, apid), map);\n-            }\n+                    = segmentHandlers.computeIfAbsent(new QualifiedApid(apidQualifier, apid), k -> new HashMap<Long, SPPSegmentsHandler>());\n \n             SPPSegmentsHandler segmentHandler = map.get(transactionId);\n "
  },
  {
    "sha": "04abd65d45d6e5588db2e7d1b04ba0f0a1918e8a",
    "filename": "bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPChannelDestination.java",
    "status": "modified",
    "additions": 33,
    "deletions": 35,
    "changes": 68,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPChannelDestination.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPChannelDestination.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPChannelDestination.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -89,45 +89,43 @@ public ZMTPChannelDestination(ZMTPTransport transport,\n     }\n \n     public void runRxThread() {\n-        rxThread = new Thread(new Runnable() {\n-            public void run() {\n-                zmqContext = ZContext.shadow(transport.getZmqContext());\n-                socket = ZMTPTransport.openSocket(zmqContext, communicationPattern, zmtpURI, true);\n-                \n-                while (true) {\n-                    if (Thread.interrupted()) {\n-                        ZMTPTransport.RLOGGER.log(Level.INFO, \"Thread interrupted\");\n-                        break;\n+        rxThread = new Thread(() -> {\n+            zmqContext = ZContext.shadow(transport.getZmqContext());\n+            socket = ZMTPTransport.openSocket(zmqContext, communicationPattern, zmtpURI, true);\n+\n+            while (true) {\n+                if (Thread.interrupted()) {\n+                    ZMTPTransport.RLOGGER.log(Level.INFO, \"Thread interrupted\");\n+                    break;\n+                }\n+                try {\n+                    org.zeromq.ZMsg recvMsg = org.zeromq.ZMsg.recvMsg(socket);\n+                    ZFrame first = recvMsg.pop(); // The frame with sender id\n+                    byte[] remoteIdentity = first.getData();\n+                    byte[] rxData = getMessageBuffer(recvMsg);\n+                    transport.channelDataReceived(remoteIdentity, rxData);\n+                    recvMsg.destroy();\n+                } catch (ZMQException e) {\n+                    if (e.getErrorCode() == ZMQ.Error.ETERM.getCode()) {\n+                        ZMTPTransport.RLOGGER.log(Level.INFO,\n+                                \"ZMQ context terminated - shutting down\");\n+                    } else {\n+                        ZMTPTransport.RLOGGER.log(Level.WARNING,\n+                                \"ZMQ Error in ZMTPChannelDestination RX Thread\", e);\n                     }\n-                    try {\n-                        org.zeromq.ZMsg recvMsg = org.zeromq.ZMsg.recvMsg(socket);\n-                        ZFrame first = recvMsg.pop(); // The frame with sender id\n-                        byte[] remoteIdentity = first.getData();\n-                        byte[] rxData = getMessageBuffer(recvMsg);\n-                        transport.channelDataReceived(remoteIdentity, rxData);\n-                        recvMsg.destroy();\n-                    } catch (ZMQException e) {\n-                        if (e.getErrorCode() == ZMQ.Error.ETERM.getCode()) {\n-                            ZMTPTransport.RLOGGER.log(Level.INFO, \n-                                    \"ZMQ context terminated - shutting down\");\n-                        } else {\n-                            ZMTPTransport.RLOGGER.log(Level.WARNING,\n-                                    \"ZMQ Error in ZMTPChannelDestination RX Thread\", e);\n-                        }\n-                        break;\n-                    } catch (zmq.ZError.IOException e) {\n-                        if (e.getCause() instanceof ClosedByInterruptException) {\n-                            ZMTPTransport.RLOGGER.log(Level.INFO, \"Thread interrupted\");\n-                        } else {\n-                            ZMTPTransport.RLOGGER.log(Level.WARNING,\n-                                    \"ZMQ IO Error in ZMTPChannelDestination RX Thread\", e);\n-                        }\n-                        break;\n+                    break;\n+                } catch (zmq.ZError.IOException e) {\n+                    if (e.getCause() instanceof ClosedByInterruptException) {\n+                        ZMTPTransport.RLOGGER.log(Level.INFO, \"Thread interrupted\");\n+                    } else {\n+                        ZMTPTransport.RLOGGER.log(Level.WARNING,\n+                                \"ZMQ IO Error in ZMTPChannelDestination RX Thread\", e);\n                     }\n+                    break;\n                 }\n-                // Don't destroy the context properly as it locks the application\n-                //zmqContext.destroy();\n             }\n+            // Don't destroy the context properly as it locks the application\n+            //zmqContext.destroy();\n         });\n         rxThread.setName(\"ZMTPChannelDestination RX Thread\");\n         rxThread.start();"
  },
  {
    "sha": "a71d9a36d455276ad73d3f1d93372d8893ca82d8",
    "filename": "bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPURIMapping.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPURIMapping.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPURIMapping.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/bindings/transport-zmtp/src/main/java/esa/mo/mal/transport/zmtp/ZMTPURIMapping.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -67,7 +67,7 @@ public String getLocalPtpZmtpUri(String MalUri) throws MALException {\n                 throw new MALException(\"Malformed URI (missing port): \" + MalUri);\n             }\n             // The URI that ZMTP binds to\n-            String localURI = \"tcp://*:\" + Integer.toString(uri.getPort());\n+            String localURI = \"tcp://*:\" + uri.getPort();\n             return localURI;\n         } catch (URISyntaxException e) {\n             throw new MALException(\"Malformed URI: \" + MalUri);\n@@ -92,7 +92,7 @@ public String getLocalMcastZmtpUri(String MalUri) throws MALException {\n                     throw new MALException(\"Malformed URI (missing port): \" + MalUri);\n                 }\n                 // The URI that ZMTP binds to\n-                String localURI = \"tcp://*:\" + Integer.toString(uri.getPort() + 1);\n+                String localURI = \"tcp://*:\" + (uri.getPort() + 1);\n                 return localURI;\n             } catch (URISyntaxException e) {\n                 throw new MALException(\"Malformed URI: \" + MalUri);\n@@ -114,7 +114,7 @@ public String getRemotePtpZmtpUri(String MalUri) throws MALException {\n                 throw new MALException(\"Malformed URI (missing port): \" + MalUri);\n             }\n             // The URI that ZMTP connects to\n-            String remoteURI = \"tcp://\" + uri.getHost() + \":\" + Integer.toString(uri.getPort());\n+            String remoteURI = \"tcp://\" + uri.getHost() + \":\" + uri.getPort();\n             return remoteURI;\n         } catch (URISyntaxException e) {\n             throw new MALException(\"Malformed URI: \" + MalUri);\n@@ -140,7 +140,7 @@ public String getRemoteMcastZmtpUri(String MalUri) throws MALException {\n                 }\n                 // The URI that ZMTP connects to\n                 String remoteURI = \"tcp://\" + uri.getHost() + \":\"\n-                        + Integer.toString(uri.getPort() + 1);\n+                        + (uri.getPort() + 1);\n                 return remoteURI;\n             } catch (URISyntaxException e) {\n                 throw new MALException(\"Malformed URI: \" + MalUri);"
  },
  {
    "sha": "2aff5ada57a7a4f69da9d60f1e224df2cb9163f8",
    "filename": "mal-impl/src/main/java/esa/mo/mal/impl/InteractionPubSubMap.java",
    "status": "modified",
    "additions": 1,
    "deletions": 6,
    "changes": 7,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/mal-impl/src/main/java/esa/mo/mal/impl/InteractionPubSubMap.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/mal-impl/src/main/java/esa/mo/mal/impl/InteractionPubSubMap.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/mal-impl/src/main/java/esa/mo/mal/impl/InteractionPubSubMap.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -114,12 +114,7 @@ void registerNotifyListener(final MessageDetails details,\n \n         synchronized (notifyMap) {\n             notifyMap.put(id, list);\n-            Map<String, MALInteractionListener> ent = errorMap.get(uri);\n-\n-            if (null == ent) {\n-                ent = new HashMap<String, MALInteractionListener>();\n-                errorMap.put(uri, ent);\n-            }\n+            Map<String, MALInteractionListener> ent = errorMap.computeIfAbsent(uri, k -> new HashMap<String, MALInteractionListener>());\n \n             MALContextFactoryImpl.LOGGER.log(Level.FINE,\n                     \"PubSubMap({0}), adding notify handler: {1} : {2} : {3}\","
  },
  {
    "sha": "a081781266399380191fa68f204677d1f35d3ffd",
    "filename": "mal-impl/src/main/java/esa/mo/mal/impl/InteractionTimeout.java",
    "status": "modified",
    "additions": 35,
    "deletions": 38,
    "changes": 73,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/mal-impl/src/main/java/esa/mo/mal/impl/InteractionTimeout.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/mal-impl/src/main/java/esa/mo/mal/impl/InteractionTimeout.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/mal-impl/src/main/java/esa/mo/mal/impl/InteractionTimeout.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -104,49 +104,46 @@ public synchronized void insertInQueue(BaseOperationHandler handler) {\n     }\n \n     private Thread createTimeoutCheckingThread() {\n-        return new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                while (true) {\n-                    try {\n-                        SimpleEntry<Long, BaseOperationHandler> entry = queue.take();\n-                        long timeoutAt = entry.getKey() + timeout;\n-                        long sleepFor = timeoutAt - System.currentTimeMillis();\n-\n-                        // If the timeout was not reached yet\n-                        // then we sleep until we reach it\n-                        if (sleepFor > 0) {\n-                            try {\n-                                Thread.sleep(sleepFor);\n-                            } catch (InterruptedException ex) {\n-                                Logger.getLogger(InteractionTimeout.class.getName()).log(\n-                                        Level.SEVERE, \"Something went wrong...\", ex);\n-                            }\n+        return new Thread(() -> {\n+            while (true) {\n+                try {\n+                    SimpleEntry<Long, BaseOperationHandler> entry = queue.take();\n+                    long timeoutAt = entry.getKey() + timeout;\n+                    long sleepFor = timeoutAt - System.currentTimeMillis();\n+\n+                    // If the timeout was not reached yet\n+                    // then we sleep until we reach it\n+                    if (sleepFor > 0) {\n+                        try {\n+                            Thread.sleep(sleepFor);\n+                        } catch (InterruptedException ex) {\n+                            Logger.getLogger(InteractionTimeout.class.getName()).log(\n+                                    Level.SEVERE, \"Something went wrong...\", ex);\n                         }\n+                    }\n \n-                        BaseOperationHandler handler = entry.getValue();\n+                    BaseOperationHandler handler = entry.getValue();\n \n-                        // Is the interaction still pending?\n-                        if (!handler.finished()) {\n-                            // Then we must trigger an Exception!\n-                            Logger.getLogger(InteractionTimeout.class.getName()).log(\n-                                    Level.FINE, \"Timeout triggered!\");\n-\n-                            String msg = \"The interaction timeout in the MAL \"\n-                                    + \"was triggered! The timeout is currently \"\n-                                    + \"set to: \" + timeout + \" ms\";\n-\n-                            handler.handleError(\n-                                    null,\n-                                    new MALStandardError(\n-                                            MALHelper.DELIVERY_TIMEDOUT_ERROR_NUMBER,\n-                                            msg),\n-                                    null);\n-                        }\n-                    } catch (InterruptedException ex) {\n+                    // Is the interaction still pending?\n+                    if (!handler.finished()) {\n+                        // Then we must trigger an Exception!\n                         Logger.getLogger(InteractionTimeout.class.getName()).log(\n-                                Level.SEVERE, \"Something went wrong...\", ex);\n+                                Level.FINE, \"Timeout triggered!\");\n+\n+                        String msg = \"The interaction timeout in the MAL \"\n+                                + \"was triggered! The timeout is currently \"\n+                                + \"set to: \" + timeout + \" ms\";\n+\n+                        handler.handleError(\n+                                null,\n+                                new MALStandardError(\n+                                        MALHelper.DELIVERY_TIMEDOUT_ERROR_NUMBER,\n+                                        msg),\n+                                null);\n                     }\n+                } catch (InterruptedException ex) {\n+                    Logger.getLogger(InteractionTimeout.class.getName()).log(\n+                            Level.SEVERE, \"Something went wrong...\", ex);\n                 }\n             }\n         });"
  },
  {
    "sha": "65020eb9240754a27ce6f2ec45ca91a3667efc24",
    "filename": "mal-impl/src/main/java/esa/mo/mal/impl/broker/MALBrokerHandlerImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 12,
    "changes": 14,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/mal-impl/src/main/java/esa/mo/mal/impl/broker/MALBrokerHandlerImpl.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/mal-impl/src/main/java/esa/mo/mal/impl/broker/MALBrokerHandlerImpl.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/mal-impl/src/main/java/esa/mo/mal/impl/broker/MALBrokerHandlerImpl.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -273,12 +273,7 @@ private static String createProviderKey(final MALMessageHeader details) {\n     }\n \n     private Map<String, SubscriptionSource> getConsumerMap(final BrokerKey key) {\n-        Map<String, SubscriptionSource> rv = consumerMap.get(key);\n-\n-        if (null == rv) {\n-            rv = new HashMap();\n-            consumerMap.put(key, rv);\n-        }\n+        Map<String, SubscriptionSource> rv = consumerMap.computeIfAbsent(key, k -> new HashMap());\n \n         return rv;\n     }\n@@ -302,12 +297,7 @@ private SubscriptionSource getConsumerEntry(final BrokerKey key, final String co\n     }\n \n     private Map<StringPair, PublisherSource> getProviderMap(final BrokerKey key) {\n-        Map<StringPair, PublisherSource> rv = providerMap.get(key);\n-\n-        if (null == rv) {\n-            rv = new HashMap();\n-            providerMap.put(key, rv);\n-        }\n+        Map<StringPair, PublisherSource> rv = providerMap.computeIfAbsent(key, k -> new HashMap());\n \n         return rv;\n     }"
  },
  {
    "sha": "9a981efe68d56674ae416e18f33dc744e460b384",
    "filename": "providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DelayManager.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DelayManager.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DelayManager.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DelayManager.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -21,6 +21,7 @@\n package esa.mo.mal.demo.consumer;\n \n import javax.swing.JLabel;\n+import java.util.Arrays;\n \n /**\n  * A simple class that sums the transmission delay over a set of parameter\n@@ -41,9 +42,7 @@ public DelayManager(final JLabel label, final int size) {\n         delays = new long[size];\n \n         // cl;ear the delay set\n-        for (int i = 0; i < delays.length; i++) {\n-            delays[i] = 0;\n-        }\n+        Arrays.fill(delays, 0);\n     }\n \n     public synchronized void addDelay(final boolean displayTotal, final long delay) {\n@@ -70,8 +69,6 @@ public synchronized void resetDelay() {\n         totalDelay = 0;\n         index = 0;\n \n-        for (int i = 0; i < delays.length; i++) {\n-            delays[i] = 0;\n-        }\n+        Arrays.fill(delays, 0);\n     }\n }"
  },
  {
    "sha": "56cd4775d971b0e8c250ba0e7d83b1067d070379",
    "filename": "providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DemoConsumerGui.java",
    "status": "modified",
    "additions": 23,
    "deletions": 96,
    "changes": 119,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DemoConsumerGui.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DemoConsumerGui.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/consumer/DemoConsumerGui.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -110,11 +110,7 @@ public static void main(final String args[]) {\n             final DemoConsumerGui gui = new DemoConsumerGui(name, parametersNum);\n             gui.init();\n \n-            EventQueue.invokeLater(new Runnable() {\n-                public void run() {\n-                    gui.setVisible(true);\n-                }\n-            });\n+            EventQueue.invokeLater(() -> gui.setVisible(true));\n         } catch (MalformedURLException ex) {\n             LOGGER.log(Level.SEVERE, \"Exception thrown during initialisation of Demo Consumer {0}\", ex);\n         } catch (MALException ex) {\n@@ -216,23 +212,20 @@ private void init() throws MALException, MalformedURLException {\n \n         startService();\n \n-        Thread asyncSendThread = new Thread() {\n-            @Override\n-            public void run() {\n-                while (running) {\n-                    for (int i = 0; i < labels.length; ++i) {\n-                        labels[i].displayValue();\n-                    }\n+        Thread asyncSendThread = new Thread(() -> {\n+            while (running) {\n+                for (int i = 0; i < labels.length; ++i) {\n+                    labels[i].displayValue();\n+                }\n \n-                    // sleep\n-                    try {\n-                        Thread.sleep(1000);\n-                    } catch (InterruptedException ex) {\n-                        // do nothing\n-                    }\n+                // sleep\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException ex) {\n+                    // do nothing\n                 }\n             }\n-        };\n+        });\n \n         asyncSendThread.start();\n     }\n@@ -382,13 +375,7 @@ public void windowClosing(java.awt.event.WindowEvent evt)\n \n     quitMenuItem.setText(\"Quit\");\n     quitMenuItem.setName(\"quitMenuItem\"); // NOI18N\n-    quitMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        quitMenuItemActionPerformed(evt);\n-      }\n-    });\n+    quitMenuItem.addActionListener(evt -> quitMenuItemActionPerformed(evt));\n     jMenu1.add(quitMenuItem);\n \n     jMenuBar1.add(jMenu1);\n@@ -403,75 +390,39 @@ public void actionPerformed(java.awt.event.ActionEvent evt)\n     regWildcardRadioButtonMenuItem.setSelected(true);\n     regWildcardRadioButtonMenuItem.setText(\"Wildcard\");\n     regWildcardRadioButtonMenuItem.setName(\"regWildcardRadioButtonMenuItem\"); // NOI18N\n-    regWildcardRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        regWildcardRadioButtonMenuItemActionPerformed(evt);\n-      }\n-    });\n+    regWildcardRadioButtonMenuItem.addActionListener(evt -> regWildcardRadioButtonMenuItemActionPerformed(evt));\n     jMenu3.add(regWildcardRadioButtonMenuItem);\n \n     subscriptionButtonGroup.add(regHalfRadioButtonMenuItem);\n     regHalfRadioButtonMenuItem.setText(\"Half\");\n     regHalfRadioButtonMenuItem.setName(\"regHalfRadioButtonMenuItem\"); // NOI18N\n-    regHalfRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        regHalfRadioButtonMenuItemActionPerformed(evt);\n-      }\n-    });\n+    regHalfRadioButtonMenuItem.addActionListener(evt -> regHalfRadioButtonMenuItemActionPerformed(evt));\n     jMenu3.add(regHalfRadioButtonMenuItem);\n \n     subscriptionButtonGroup.add(regAllRadioButtonMenuItem);\n     regAllRadioButtonMenuItem.setText(\"All\");\n     regAllRadioButtonMenuItem.setName(\"regAllRadioButtonMenuItem\"); // NOI18N\n-    regAllRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        regAllRadioButtonMenuItemActionPerformed(evt);\n-      }\n-    });\n+    regAllRadioButtonMenuItem.addActionListener(evt -> regAllRadioButtonMenuItemActionPerformed(evt));\n     jMenu3.add(regAllRadioButtonMenuItem);\n \n     jMenu2.add(jMenu3);\n \n     deregMenuItem.setText(\"Deregister\");\n     deregMenuItem.setName(\"deregMenuItem\"); // NOI18N\n-    deregMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        deregMenuItemActionPerformed(evt);\n-      }\n-    });\n+    deregMenuItem.addActionListener(evt -> deregMenuItemActionPerformed(evt));\n     jMenu2.add(deregMenuItem);\n \n     jSeparator1.setName(\"jSeparator1\"); // NOI18N\n     jMenu2.add(jSeparator1);\n \n     resetErrorMenuItem.setText(\"Reset errors\");\n     resetErrorMenuItem.setName(\"resetErrorMenuItem\"); // NOI18N\n-    resetErrorMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        resetErrorMenuItemActionPerformed(evt);\n-      }\n-    });\n+    resetErrorMenuItem.addActionListener(evt -> resetErrorMenuItemActionPerformed(evt));\n     jMenu2.add(resetErrorMenuItem);\n \n     jMenuItem1.setText(\"Reconnect\");\n     jMenuItem1.setName(\"jMenuItem1\"); // NOI18N\n-    jMenuItem1.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        reconnectActionPerformed(evt);\n-      }\n-    });\n+    jMenuItem1.addActionListener(evt -> reconnectActionPerformed(evt));\n     jMenu2.add(jMenuItem1);\n \n     jMenuBar1.add(jMenu2);\n@@ -481,46 +432,22 @@ public void actionPerformed(java.awt.event.ActionEvent evt)\n \n     returnBoolean.setText(\"Return Boolean\");\n     returnBoolean.setName(\"returnBoolean\"); // NOI18N\n-    returnBoolean.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        returnBooleanActionPerformed(evt);\n-      }\n-    });\n+    returnBoolean.addActionListener(evt -> returnBooleanActionPerformed(evt));\n     jMenu4.add(returnBoolean);\n \n     returnComposite.setText(\"Return Composite\");\n     returnComposite.setName(\"returnComposite\"); // NOI18N\n-    returnComposite.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        returnCompositeActionPerformed(evt);\n-      }\n-    });\n+    returnComposite.addActionListener(evt -> returnCompositeActionPerformed(evt));\n     jMenu4.add(returnComposite);\n \n     returnEnum.setText(\"Return Enum\");\n     returnEnum.setName(\"returnEnum\"); // NOI18N\n-    returnEnum.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        returnEnumActionPerformed(evt);\n-      }\n-    });\n+    returnEnum.addActionListener(evt -> returnEnumActionPerformed(evt));\n     jMenu4.add(returnEnum);\n \n     testSubmit.setText(\"Test Submit\");\n     testSubmit.setName(\"testSubmit\"); // NOI18N\n-    testSubmit.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        testSubmitActionPerformed(evt);\n-      }\n-    });\n+    testSubmit.addActionListener(evt -> testSubmitActionPerformed(evt));\n     jMenu4.add(testSubmit);\n \n     jMenuBar1.add(jMenu4);"
  },
  {
    "sha": "e1fd974dddf7248c6add178ab61248ec7dff1f91",
    "filename": "providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/provider/DemoProviderGui.java",
    "status": "modified",
    "additions": 9,
    "deletions": 59,
    "changes": 68,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/provider/DemoProviderGui.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/provider/DemoProviderGui.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/providers-consumers/basic-demo/src/main/java/esa/mo/mal/demo/provider/DemoProviderGui.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -75,11 +75,7 @@ public static void main(final String args[]) {\n             final DemoProviderGui gui = new DemoProviderGui(name);\n             gui.handler.init();\n \n-            EventQueue.invokeLater(new Runnable() {\n-                public void run() {\n-                    gui.setVisible(true);\n-                }\n-            });\n+            EventQueue.invokeLater(() -> gui.setVisible(true));\n         } catch (MalformedURLException ex) {\n             LOGGER.log(Level.SEVERE,\n                     \"Exception thrown during initialisation of Demo Provider {0}\", ex);\n@@ -114,11 +110,7 @@ public DemoProviderGui(final String name) {\n                 javax.swing.JMenuItem tmpMenuItem = new javax.swing.JMenuItem();\n                 tmpMenuItem.setText(displayName);\n                 tmpMenuItem.setActionCommand(protocol);\n-                tmpMenuItem.addActionListener(new java.awt.event.ActionListener() {\n-                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                        transportSelected(evt);\n-                    }\n-                });\n+                tmpMenuItem.addActionListener(evt -> transportSelected(evt));\n \n                 jMenu3.add(tmpMenuItem);\n             }\n@@ -192,41 +184,23 @@ public void windowClosing(java.awt.event.WindowEvent evt)\n     updateRate.setPaintTicks(true);\n     updateRate.setValue(10);\n     updateRate.setName(\"updateRate\"); // NOI18N\n-    updateRate.addChangeListener(new javax.swing.event.ChangeListener()\n-    {\n-      public void stateChanged(javax.swing.event.ChangeEvent evt)\n-      {\n-        updateRateStateChanged(evt);\n-      }\n-    });\n+    updateRate.addChangeListener(evt -> updateRateStateChanged(evt));\n     controlsPanel.add(updateRate);\n \n     jLabel3.setText(\"Pool size\");\n     jLabel3.setName(\"jLabel3\"); // NOI18N\n     controlsPanel.add(jLabel3);\n \n     poolSize.setName(\"poolSize\"); // NOI18N\n-    poolSize.addChangeListener(new javax.swing.event.ChangeListener()\n-    {\n-      public void stateChanged(javax.swing.event.ChangeEvent evt)\n-      {\n-        poolSizeStateChanged(evt);\n-      }\n-    });\n+    poolSize.addChangeListener(evt -> poolSizeStateChanged(evt));\n     controlsPanel.add(poolSize);\n \n     jLabel4.setText(\"Block size\");\n     jLabel4.setName(\"jLabel4\"); // NOI18N\n     controlsPanel.add(jLabel4);\n \n     blockSize.setName(\"blockSize\"); // NOI18N\n-    blockSize.addChangeListener(new javax.swing.event.ChangeListener()\n-    {\n-      public void stateChanged(javax.swing.event.ChangeEvent evt)\n-      {\n-        blockSizeStateChanged(evt);\n-      }\n-    });\n+    blockSize.addChangeListener(evt -> blockSizeStateChanged(evt));\n     controlsPanel.add(blockSize);\n \n     mainPanel.add(controlsPanel, java.awt.BorderLayout.PAGE_START);\n@@ -261,13 +235,7 @@ public void stateChanged(javax.swing.event.ChangeEvent evt)\n \n     quitMenuItem.setText(\"Quit\");\n     quitMenuItem.setName(\"quitMenuItem\"); // NOI18N\n-    quitMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        quitMenuItemActionPerformed(evt);\n-      }\n-    });\n+    quitMenuItem.addActionListener(evt -> quitMenuItemActionPerformed(evt));\n     jMenu1.add(quitMenuItem);\n \n     jMenuBar1.add(jMenu1);\n@@ -277,24 +245,12 @@ public void actionPerformed(java.awt.event.ActionEvent evt)\n \n     genTMMenuItem.setText(\"Start TM\");\n     genTMMenuItem.setName(\"genTMMenuItem\"); // NOI18N\n-    genTMMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        genTMMenuItemActionPerformed(evt);\n-      }\n-    });\n+    genTMMenuItem.addActionListener(evt -> genTMMenuItemActionPerformed(evt));\n     jMenu2.add(genTMMenuItem);\n \n     pauseTMMenuItem.setText(\"Pause TM\");\n     pauseTMMenuItem.setName(\"pauseTMMenuItem\"); // NOI18N\n-    pauseTMMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        pauseTMMenuItemActionPerformed(evt);\n-      }\n-    });\n+    pauseTMMenuItem.addActionListener(evt -> pauseTMMenuItemActionPerformed(evt));\n     jMenu2.add(pauseTMMenuItem);\n \n     jMenuBar1.add(jMenu2);\n@@ -304,13 +260,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt)\n \n     defaultTransportMenuItem.setText(\"default\");\n     defaultTransportMenuItem.setName(\"defaultTransportMenuItem\"); // NOI18N\n-    defaultTransportMenuItem.addActionListener(new java.awt.event.ActionListener()\n-    {\n-      public void actionPerformed(java.awt.event.ActionEvent evt)\n-      {\n-        transportSelected(evt);\n-      }\n-    });\n+    defaultTransportMenuItem.addActionListener(evt -> transportSelected(evt));\n     jMenu3.add(defaultTransportMenuItem);\n \n     jSeparator1.setName(\"jSeparator1\"); // NOI18N"
  },
  {
    "sha": "136aae77db09289db6dd51fc6c5272871b2eec3d",
    "filename": "stub-generator/generator-docs/src/main/java/esa/mo/tools/stubgen/GeneratorDocx.java",
    "status": "modified",
    "additions": 7,
    "deletions": 10,
    "changes": 17,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/stub-generator/generator-docs/src/main/java/esa/mo/tools/stubgen/GeneratorDocx.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/stub-generator/generator-docs/src/main/java/esa/mo/tools/stubgen/GeneratorDocx.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/stub-generator/generator-docs/src/main/java/esa/mo/tools/stubgen/GeneratorDocx.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -702,16 +702,13 @@ private void addErrorStructureDetails(DocxBaseWriter docxFile, AreaType area, Se\n                 docxFile.addComment(\"The operation may return one of the following errors:\");\n             }\n \n-            TreeMap<String, List<Object[]>> m = new TreeMap<String, List<Object[]>>(new Comparator<String>() {\n-                @Override\n-                public int compare(String o1, String o2) {\n-                    try {\n-                        Long value1 = Long.valueOf(o1);\n-                        Long value2 = Long.valueOf(o2);\n-                        return value1.compareTo(value2);\n-                    } catch (java.lang.NumberFormatException e) {\n-                        return o1.compareTo(o2);\n-                    }\n+            TreeMap<String, List<Object[]>> m = new TreeMap<String, List<Object[]>>((o1, o2) -> {\n+                try {\n+                    Long value1 = Long.valueOf(o1);\n+                    Long value2 = Long.valueOf(o2);\n+                    return value1.compareTo(value2);\n+                } catch (NumberFormatException e) {\n+                    return o1.compareTo(o2);\n                 }\n             });\n "
  },
  {
    "sha": "7fda7c7a56fee3f7e01dfc2c4b6890a27eeaa947",
    "filename": "stub-generator/generator-lib/src/main/java/esa/mo/tools/stubgen/StubUtils.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/esa/mo-services-java/blob/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/stub-generator/generator-lib/src/main/java/esa/mo/tools/stubgen/StubUtils.java",
    "raw_url": "https://github.com/esa/mo-services-java/raw/5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60/stub-generator/generator-lib/src/main/java/esa/mo/tools/stubgen/StubUtils.java",
    "contents_url": "https://api.github.com/repos/esa/mo-services-java/contents/stub-generator/generator-lib/src/main/java/esa/mo/tools/stubgen/StubUtils.java?ref=5d364dccb8e0964dfcd4f9f6ff50d6fe47cf8d60",
    "patch": "@@ -29,6 +29,7 @@\n import java.io.OutputStreamWriter;\n import java.io.Writer;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n@@ -141,7 +142,7 @@ public static Writer createLowLevelWriter(String folder, String name,\n             String ext) throws IOException {\n         File file = createLowLevelFile(folder, name, ext);\n \n-        return new OutputStreamWriter(new FileOutputStream(file), Charset.forName(\"UTF-8\"));\n+        return new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8);\n     }\n \n     /**\n@@ -160,7 +161,7 @@ public static Writer createLowLevelWriter(File folder, String name,\n             throw new IOException(\"Unable to create file: \" + file.getPath());\n         }\n \n-        return new OutputStreamWriter(new FileOutputStream(file), Charset.forName(\"UTF-8\"));\n+        return new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8);\n     }\n \n     /**"
  }
]
