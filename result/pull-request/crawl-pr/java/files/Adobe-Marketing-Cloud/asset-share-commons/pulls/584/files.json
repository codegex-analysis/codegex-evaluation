[
  {
    "sha": "cf247fead2daf72d861ee1c8c0f6d93cb156cb15",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/ActionHelper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/ActionHelper.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/ActionHelper.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/ActionHelper.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -24,10 +24,13 @@\n import org.osgi.annotation.versioning.ProviderType;\n \n import java.util.Collection;\n+import java.util.List;\n \n @ProviderType\n public interface ActionHelper {\n-    Collection<AssetModel> getAssetsFromQueryParameter(final SlingHttpServletRequest request, final String parameterName);\n+    List<AssetModel> getAssetsFromQueryParameter(final SlingHttpServletRequest request, final String parameterName);\n \n-    Collection<AssetModel> getPlaceholderAsset(final SlingHttpServletRequest request);\n+    List<String> getAllowedValuesFromQueryParameter(final SlingHttpServletRequest requst, final String parameterName, final String[] allowedValues);\n+\n+    List<AssetModel> getPlaceholderAsset(final SlingHttpServletRequest request);\n }"
  },
  {
    "sha": "a1fd927e3021df1dba23564522347aeab3bc3cb8",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/AssetDownloadHelper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/AssetDownloadHelper.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/AssetDownloadHelper.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/AssetDownloadHelper.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -11,14 +11,18 @@\n public interface AssetDownloadHelper {\n \n     /**\n+     * This only applies to AEM 6.x. AEM as a Cloud Service has no upper limit.\n+     *\n      * @return the max size in bytes that the AEM AssetDownloadServlet allows to be downloaded at once.\n-     */\n+     **/\n     long getMaxContentSizeLimit();\n \n     /**\n      * Computes the size of the assets requested to be downloaded.\n      * Note that this only computes the size of the ORIGINAL renditions.\n      *\n+     * This only applies to AEM 6.x. AEM as a Cloud Service provides this as part of Async Download Framework response.\n+     *\n      * @param assets the assets to compute the size of.\n      * @param configResource the resource\n      * @return size of the assets."
  },
  {
    "sha": "219249c9ef364bc615a5bd38021ae725a8fbffd7",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/Download.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/Download.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/Download.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/Download.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -69,10 +69,15 @@\n     }\n \n     class AssetRenditionsGroup {\n-        private final Options options;\n+        private final List<OptionItem> options;\n         private final String title;\n \n         public AssetRenditionsGroup(String title, Options options) {\n+            this.title = title;\n+            this.options = options.getItems();\n+        }\n+\n+        public AssetRenditionsGroup(String title, List<OptionItem> options) {\n             this.title = title;\n             this.options = options;\n         }\n@@ -82,7 +87,7 @@ public String getTitle() {\n         }\n \n         public List<OptionItem> getItems() {\n-            return options.getItems();\n+            return options;\n         }\n     }\n }"
  },
  {
    "sha": "715a72b0c07562ceab2b5c6b36126f0733da9cfe",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImpl.java",
    "status": "modified",
    "additions": 30,
    "deletions": 18,
    "changes": 48,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -23,9 +23,11 @@\n import com.adobe.aem.commons.assetshare.components.actions.AssetDownloadHelper;\n import com.adobe.aem.commons.assetshare.components.actions.download.Download;\n import com.adobe.aem.commons.assetshare.content.AssetModel;\n-import com.adobe.cq.wcm.core.components.models.form.Options;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatchers;\n import com.adobe.cq.export.json.ComponentExporter;\n import com.adobe.cq.export.json.ExporterConstants;\n+import com.adobe.cq.wcm.core.components.models.form.OptionItem;\n+import com.adobe.cq.wcm.core.components.models.form.Options;\n import com.day.cq.dam.commons.util.UIHelper;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.sling.api.SlingHttpServletRequest;\n@@ -44,6 +46,8 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n @Model(\n         adaptables = {SlingHttpServletRequest.class},\n@@ -68,7 +72,6 @@\n     protected SlingHttpServletRequest request;\n \n     @ValueMapValue\n-    @Optional\n     @Default(values = \"Assets\")\n     protected String zipFileName;\n \n@@ -84,13 +87,15 @@\n     @Required\n     private ModelFactory modelFactory;\n \n+    @OSGiService\n+    @Required\n+    private AssetRenditionDispatchers assetRenditionDispatchers;\n+\n     @ValueMapValue\n-    @Optional\n     private Boolean legacyMode;\n \n     @Deprecated\n     @ValueMapValue\n-    @Optional\n     private Boolean excludeOriginalAssets;\n \n     protected List<AssetRenditionsGroup> assetRenditionsGroups = null;\n@@ -125,25 +130,32 @@ protected void init() {\n         if (assetRenditionsGroups == null) {\n             assetRenditionsGroups = new ArrayList<>();\n \n-            final Resource groups = request.getResource().getChild(NN_ASSET_RENDITIONS_GROUPS + \"/\" + NN_ITEMS);\n+            Optional.ofNullable(request.getResource().getChild(NN_ASSET_RENDITIONS_GROUPS + \"/\" + NN_ITEMS)).ifPresent(groups -> {\n+                groups.getChildren().forEach(child -> getAssetRenditionGroup(child.getChild(NN_ASSET_RENDITIONS)).ifPresent(arg -> assetRenditionsGroups.add(arg)));\n+            });\n+        }\n+\n+        return Collections.unmodifiableList(assetRenditionsGroups);\n+    }\n+\n+    private Optional<AssetRenditionsGroup> getAssetRenditionGroup(final Resource group) {\n+        Optional<AssetRenditionsGroup> assetRenditionsGroup = Optional.empty();\n \n-            if (groups != null) {\n-                for (Resource group : groups.getChildren()) {\n-                    group = group.getChild(NN_ASSET_RENDITIONS);\n+        if (group != null) {\n+            final String title = group.getParent().getValueMap().get(PN_ASSET_RENDITIONS_GROUP_TITLE, String.class);\n+            final Options options = modelFactory.getModelFromWrappedRequest(request, group, Options.class);\n \n-                    if (group != null) {\n-                        final String title = group.getParent().getValueMap().get(PN_ASSET_RENDITIONS_GROUP_TITLE, String.class);\n-                        final Options options = modelFactory.getModelFromWrappedRequest(request, group, Options.class);\n+            // Only show service-able rendition names\n+            final Optional<List<OptionItem>> sanitizedOptions = Optional.of(options.getItems().stream()\n+                    .filter(item -> assetRenditionDispatchers.isValidAssetRenditionName(item.getValue()))\n+                    .collect(Collectors.toList()));\n \n-                        if (options != null) {\n-                            assetRenditionsGroups.add(new AssetRenditionsGroup(title, options));\n-                        }\n-                    }\n-                }\n-            }\n+            assetRenditionsGroup = sanitizedOptions\n+                    .filter(so -> !so.isEmpty())\n+                    .map(so -> new AssetRenditionsGroup(title, so));\n         }\n \n-        return Collections.unmodifiableList(assetRenditionsGroups);\n+        return assetRenditionsGroup;\n     }\n \n     public Collection<AssetModel> getAssets() {"
  },
  {
    "sha": "32110625c696b236062ec1361c53de6f1151a523",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImpl.java",
    "status": "modified",
    "additions": 32,
    "deletions": 15,
    "changes": 47,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -23,44 +23,61 @@\n import com.adobe.aem.commons.assetshare.configuration.Config;\n import com.adobe.aem.commons.assetshare.content.AssetModel;\n import com.day.cq.wcm.api.WCMMode;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.request.RequestParameter;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.models.factory.ModelFactory;\n import org.osgi.service.component.annotations.Component;\n import org.osgi.service.component.annotations.Reference;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.EMPTY_LIST;\n+import static java.util.Collections.emptyList;\n \n @Component\n public final class ActionHelperImpl implements ActionHelper {\n \n     @Reference\n     private ModelFactory modelFactory;\n \n-    public final Collection<AssetModel> getAssetsFromQueryParameter(final SlingHttpServletRequest request, final String parameterName) {\n+    @Override\n+    public final List<AssetModel> getAssetsFromQueryParameter(final SlingHttpServletRequest request, final String parameterName) {\n         final RequestParameter[] requestParameters = request.getRequestParameters(parameterName);\n-        final Collection<AssetModel> assets = new ArrayList<>();\n \n         if (requestParameters != null) {\n-            for (final RequestParameter requestParameter : requestParameters) {\n-                final Resource resource = request.getResourceResolver().getResource(requestParameter.getString());\n-                if (resource != null) {\n-                    final AssetModel asset = modelFactory.getModelFromWrappedRequest(request, resource, AssetModel.class);\n+            return Arrays.stream(requestParameters)\n+                    .map(RequestParameter::getString)\n+                    .map(path -> request.getResourceResolver().getResource(path))\n+                    .filter(Objects::nonNull)\n+                    .map(resource -> modelFactory.getModelFromWrappedRequest(request, resource, AssetModel.class))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList());\n+        }\n+\n+        return EMPTY_LIST;\n+    }\n+\n+    @Override\n+    public final List<String> getAllowedValuesFromQueryParameter(final SlingHttpServletRequest request, final String parameterName, final String[] allowedValues) {\n+        if (allowedValues != null) {\n+            final RequestParameter[] requestParameters = request.getRequestParameters(parameterName);\n \n-                    if (asset != null) {\n-                        assets.add(asset);\n-                    }\n-                }\n+            if (requestParameters != null) {\n+                return Arrays.stream(requestParameters).map(RequestParameter::getString)\n+                        .filter(renditionName -> allowedValues.length == 0 || ArrayUtils.contains(allowedValues, renditionName))\n+                        .distinct()\n+                        .collect(Collectors.toList());\n             }\n         }\n \n-        return assets;\n+        return EMPTY_LIST;\n     }\n \n-    public final Collection<AssetModel> getPlaceholderAsset(final SlingHttpServletRequest request) {\n-        final Collection<AssetModel> assets = new ArrayList<>();\n+    public final List<AssetModel> getPlaceholderAsset(final SlingHttpServletRequest request) {\n+        final List<AssetModel> assets = new ArrayList<>();\n \n         if (!WCMMode.DISABLED.equals(WCMMode.fromRequest(request))) {\n             final Config config = request.adaptTo(Config.class);"
  },
  {
    "sha": "6ea590cd1c6e4b1b60560302be8bf9123600b882",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/package-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/package-info.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/package-info.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/actions/package-info.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -17,7 +17,7 @@\n  *\n  */\n \n-@Version(\"1.1.0\")\n+@Version(\"2.0.0\")\n package com.adobe.aem.commons.assetshare.components.actions;\n \n import org.osgi.annotation.versioning.Version;\n\\ No newline at end of file"
  },
  {
    "sha": "344b20066cb8dd813c528de533fc4c77a4a26849",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/components/package-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/package-info.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/components/package-info.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/components/package-info.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -17,7 +17,7 @@\n  *\n  */\n \n-@Version(\"1.1.0\")\n+@Version(\"1.2.0\")\n package com.adobe.aem.commons.assetshare.components;\n \n import org.osgi.annotation.versioning.Version;"
  },
  {
    "sha": "d301251dc94c7116ca288e12740a78876e4579f4",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/AssetModel.java",
    "status": "modified",
    "additions": 17,
    "deletions": 8,
    "changes": 25,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/AssetModel.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/AssetModel.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/AssetModel.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,52 +19,61 @@\n \n package com.adobe.aem.commons.assetshare.content;\n \n+import com.day.cq.dam.api.Asset;\n import com.day.cq.dam.api.Rendition;\n+import com.day.cq.dam.commons.util.DamUtil;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ValueMap;\n+import org.osgi.annotation.versioning.ProviderType;\n \n import java.util.List;\n \n+@ProviderType\n public interface AssetModel {\n     String OVERRIDE_RESOURCE = \"overrideAsset\";\n \n     /**\n      * @return the [dam:Asset] resource this Asset model represents.\n      */\n-    public Resource getResource();\n+    Resource getResource();\n \n     /**\n      * @return the absolute JCR path to the Asset\n      */\n-    public String getPath();\n+    String getPath();\n \n     /**\n      * @return the escaped Asset path for use in a URL\n      */\n-    default public String getUrl() { return getPath(); }\n+    default String getUrl() { return getPath(); }\n+\n+    /**\n+     * @return the underlying CQ Asset object\n+     */\n+    default Asset getAsset() { return DamUtil.resolveToAsset(getResource()); }\n \n     /**\n      * @return the Assets' Id ([dam:Asset]/jcr:contnet@jcr:uuid)\n      */\n-    public String getAssetId();\n+    String getAssetId();\n \n     /**\n      * @return the node name of the Asset. This is typically the file name as well.\n      */\n-    public String getName();\n+    String getName();\n \n     /**\n      * @return the title of the Asset. This invokes the \"title\" Computed Property. Default behavior returns the first entry of the dc:title, and if that is null the asset's node name.\n      */\n-    public String getTitle();\n+    String getTitle();\n \n     /**\n      * @return a list of all Asset Renditions for this asset;\n      */\n-    public List<Rendition> getRenditions();\n+    List<Rendition> getRenditions();\n \n     /**\n      * @return a ValueMap composed of a look up based on: 1) ComputedProperties, the [dam:Asset]/jcr:content/metadata ValueMap and finally the [dam:Asset] ValueMap.\n      */\n-    public ValueMap getProperties();\n+    ValueMap getProperties();\n }"
  },
  {
    "sha": "de4eae3c6095288f98ea24a172cfb87a55d1cbb0",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImpl.java",
    "status": "modified",
    "additions": 15,
    "deletions": 7,
    "changes": 22,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -24,14 +24,16 @@\n import com.adobe.aem.commons.assetshare.content.properties.ComputedProperties;\n import com.adobe.aem.commons.assetshare.content.properties.impl.TitleImpl;\n import com.adobe.aem.commons.assetshare.util.UrlUtil;\n-import org.apache.sling.api.wrappers.ValueMapDecorator;\n import com.day.cq.dam.api.Asset;\n import com.day.cq.dam.api.Rendition;\n-import com.day.text.Text;\n+import com.day.cq.dam.commons.util.DamUtil;\n import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ValueMap;\n+import org.apache.sling.api.wrappers.ValueMapDecorator;\n+import org.apache.sling.models.annotations.DefaultInjectionStrategy;\n import org.apache.sling.models.annotations.Model;\n+import org.apache.sling.models.annotations.Optional;\n import org.apache.sling.models.annotations.Required;\n import org.apache.sling.models.annotations.injectorspecific.OSGiService;\n import org.apache.sling.models.annotations.injectorspecific.Self;\n@@ -43,15 +45,19 @@\n import java.util.List;\n \n @Model(\n-        adaptables = {SlingHttpServletRequest.class},\n-        adapters = {AssetModel.class}\n+        adaptables = { SlingHttpServletRequest.class, Resource.class },\n+        adapters = { AssetModel.class },\n+        defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL\n )\n public class AssetModelImpl implements AssetModel {\n \n     @Self\n-    @Required\n     private SlingHttpServletRequest request;\n \n+    @Self\n+    @Optional\n+    private Resource resource;\n+\n     @OSGiService\n     @Required\n     private ComputedProperties computedProperties;\n@@ -60,8 +66,6 @@\n     @Required\n     private AssetResolver assetResolver;\n \n-    private Resource resource;\n-\n     private ValueMap properties;\n \n     // This must be populated in init(); if it cannot be an exception is thrown.\n@@ -71,6 +75,8 @@\n     public void init() {\n         if (request != null) {\n             asset = assetResolver.resolveAsset(request);\n+        } else if (resource != null) {\n+            asset = DamUtil.resolveToAsset(resource);\n         }\n \n         if (asset != null) {\n@@ -90,6 +96,8 @@ public String getPath() {\n \n     public String getUrl() { return UrlUtil.escape(getPath()); }\n \n+    public Asset getAsset() { return DamUtil.resolveToAsset(getResource()); }\n+\n     public String getAssetId() {\n         return asset.getID();\n     }"
  },
  {
    "sha": "0555d87b3440ac173b59c34495e200306c04e4c9",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/package-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/package-info.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/package-info.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/package-info.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -17,7 +17,7 @@\n  *\n  */\n \n-@Version(\"1.1.0\")\n+@Version(\"1.2.0\")\n package com.adobe.aem.commons.assetshare.content;\n \n import org.osgi.annotation.versioning.Version;"
  },
  {
    "sha": "889fb94cd98e94c275e6c5dbdb36b41f97df7678",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRendition.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRendition.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRendition.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRendition.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Asset Share Commons\n+ *\n+ * Copyright (C) 2021 Adobe\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.adobe.aem.commons.assetshare.content.renditions;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+\n+/**\n+ * Defines information on how to get an asset rendition using AEM's Async Download Framework\n+ */\n+public class AssetRendition {\n+    private URI binaryUri;\n+    private Optional<Long> size; // in Bytes\n+    private String mimeType;\n+\n+    public AssetRendition(URI uri, Long size, String mimeType) {\n+        setBinaryUri(uri);\n+        setSize(size);\n+        setMimeType(mimeType);\n+    }\n+\n+    public AssetRendition(String uri, Long size, String mimeType) {\n+        setBinaryUri(URI.create(uri));\n+        setSize(size);\n+        setMimeType(mimeType);\n+    }\n+\n+    public URI getBinaryUri() {\n+        return binaryUri;\n+    }\n+\n+    public void setBinaryUri(URI binaryUri) {\n+        this.binaryUri = binaryUri;\n+    }\n+\n+    public Optional<Long> getSize() {\n+        if (size != null) {\n+            return size;\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setSize(Long size) {\n+        if (size != null) {\n+            this.size = Optional.of(size);\n+        }\n+    }\n+\n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+    public void setMimeType(String mimeType) {\n+        this.mimeType = mimeType;\n+    }\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "c97894c9d6c12f37325c3db69a0545e9a4fb8567",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditionDispatcher.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditionDispatcher.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditionDispatcher.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditionDispatcher.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,6 +19,8 @@\n \n package com.adobe.aem.commons.assetshare.content.renditions;\n \n+import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.day.cq.dam.api.Asset;\n import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.SlingHttpServletResponse;\n import org.osgi.annotation.versioning.ConsumerType;\n@@ -93,4 +95,15 @@\n      * @return a list of Rendition Types this rendition Dispatcher will return;\n      */\n     default List<String> getTypes() { return Collections.EMPTY_LIST; }\n+\n+    /**\n+     * Gets a AssetRendition that wraps a reference on how to get the specified asset rendition.\n+     *\n+     * @param assetModel the AssetModel who rendition should be gotten\n+     * @param parameters the parameters specifying the rendition of the asset to be gotten\n+     * @return the AssetRendition\n+     */\n+    default AssetRendition getRendition(AssetModel assetModel, AssetRenditionParameters parameters) {\n+        throw new UnsupportedOperationException(\"AssetRendition are only supported by AEM as a Cloud Service\");\n+    }\n }"
  },
  {
    "sha": "ca09c9136a416879358ad078dbe259b2a2c3fbac",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditions.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditions.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditions.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/AssetRenditions.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -73,4 +73,14 @@\n      * @return the expression with the variables replaced with values derived from the request.\n      */\n     String evaluateExpression(SlingHttpServletRequest request, String expression);\n+\n+    /**\n+     * Replaces the 'variables' in the expressions with the corresponding bits derived from the AssetModel.\n+     *\n+     * @param assetModel the AssetModel representing the asset whose rendition expression should be evaluated.\n+     * @param renditionName the requested rendition name\n+     * @param expression the expression to replace the variables in.\n+     * @return the expression with the variables replaced with values derived from the request.\n+     */\n+    String evaluateExpression(final AssetModel assetModel, String renditionName, String expression);\n }"
  },
  {
    "sha": "3543048b38a6a6d17b2c59f9ae3ff2dd760b5705",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/AsyncAssetRenditionsDownloadServlet.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/AsyncAssetRenditionsDownloadServlet.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/AsyncAssetRenditionsDownloadServlet.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/AsyncAssetRenditionsDownloadServlet.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -0,0 +1,158 @@\n+/*\n+ * Asset Share Commons\n+ *\n+ * Copyright (C) 2021 Adobe\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.adobe.aem.commons.assetshare.content.renditions.download.async.impl;\n+\n+import com.adobe.aem.commons.assetshare.components.actions.ActionHelper;\n+import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.util.RequireAem;\n+import com.adobe.cq.dam.download.api.*;\n+import com.google.gson.JsonObject;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.ValueMap;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.adobe.aem.commons.assetshare.content.renditions.download.async.impl.NamedRenditionDownloadTargetProcessor.*;\n+\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                \"sling.servlet.methods=POST\",\n+                \"sling.servlet.resourceTypes=asset-share-commons/actions/download\",\n+                \"sling.servlet.resourceTypes=asset-share-commons/actions/share\",\n+                \"sling.servlet.selectors=download-asset-renditions\",\n+                \"sling.servlet.extensions=zip\"\n+        }\n+)\n+public class AsyncAssetRenditionsDownloadServlet extends SlingAllMethodsServlet {\n+    private static final Logger log = LoggerFactory.getLogger(AsyncAssetRenditionsDownloadServlet.class);\n+\n+    private static final String DOWNLOAD_ASSET_COUNT = \"assetCount\";\n+    private static final String DOWNLOAD_RENDITION_COUNT = \"renditionCount\";\n+    private static final String DOWNLOAD_ID = \"downloadId\";\n+\n+    private static final String REQ_KEY_ASSET_PATHS = \"path\";\n+    private static final String REQ_KEY_RENDITION_NAMES = \"renditionName\";\n+\n+    private static final String PN_ALLOWED_RENDITION_NAMES = \"allowedRenditionNames\";\n+    private static final String PN_BASE_ARCHIVE_NAME = \"zipFileName\";\n+\n+    public static final String PARAM_ARCHIVE_NAME = \"archiveName\";\n+    private static final String DOWNLOAD_ARCHIVE_NAME = PARAM_ARCHIVE_NAME;\n+\n+    @Reference(target=\"(distribution=cloud-ready)\")\n+    private RequireAem requireAem;\n+\n+    @Reference\n+    private ActionHelper actionHelper;\n+\n+    @Reference\n+    private DownloadService downloadService;\n+\n+    @Reference\n+    private DownloadApiFactory apiFactory;\n+\n+    @Override\n+    protected final void doPost(final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws ServletException, IOException {\n+        final ValueMap componentProperties = request.getResource().getValueMap();\n+\n+        final Collection<AssetModel> assetModels = actionHelper.getAssetsFromQueryParameter(request, REQ_KEY_ASSET_PATHS);\n+\n+        final String baseArchiveName = componentProperties.get(PN_BASE_ARCHIVE_NAME, \"Assets\");\n+        final Collection<String> renditionNames = actionHelper.getAllowedValuesFromQueryParameter(request,\n+                REQ_KEY_RENDITION_NAMES,\n+                request.getResource().getValueMap().get(PN_ALLOWED_RENDITION_NAMES, new String[]{}));\n+\n+        final String archiveName = getArchiveName(baseArchiveName);\n+        boolean groupRenditionsByAssetFolder = assetModels.size() > 1 && renditionNames.size() > 1;\n+\n+        DownloadManifest manifest = apiFactory.createDownloadManifest();\n+\n+        for (final AssetModel assetModel : assetModels) {\n+            addToDownloadManifest(assetModel, renditionNames, manifest, archiveName, groupRenditionsByAssetFolder);\n+        }\n+\n+        try {\n+            final String downloadId = downloadService.download(manifest, request.getResourceResolver());\n+\n+            response.setCharacterEncoding(\"UTF-8\");\n+            response.setContentType(\"application/json;charset=UTF-8\");\n+            response.getWriter().write(getResponseJson(downloadId,\n+                    assetModels.size(),\n+                    manifest.getTargetCount(),\n+                    archiveName).getAsString());\n+\n+        } catch (DownloadException e) {\n+            throw new ServletException(\"Unable to initiate download\", e);\n+        }\n+    }\n+\n+    private String getArchiveName(final String baseArchiveName) {\n+        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd_hh-mm-aa\");\n+        final String dateString = sdf.format(new Date());\n+\n+        return baseArchiveName + \" (\" + dateString + \").zip\";\n+    }\n+\n+    private void addToDownloadManifest(final AssetModel asset,\n+                                                   final Collection renditionNames,\n+                                                   final DownloadManifest manifest,\n+                                                   final String archiveName,\n+                                                   final boolean groupRenditionsByAssetFolder) {\n+\n+        renditionNames.forEach(renditionName -> {\n+            final Map<String, Object> renditionParameters = new HashMap();\n+\n+            renditionParameters.put(PARAM_ASSET_PATH, asset.getPath());\n+            renditionParameters.put(PARAM_RENDITION_NAME, renditionName);\n+            renditionParameters.put(PARAM_ARCHIVE_NAME, archiveName);\n+            renditionParameters.put(PARAM_RENDITION_BY_ASSET_FOLDER, groupRenditionsByAssetFolder);\n+\n+            final DownloadTarget downloadTarget = apiFactory.createDownloadTarget(\n+                    NamedRenditionDownloadTargetProcessor.TARGET_TYPE,\n+                    renditionParameters);\n+\n+            manifest.addTarget(downloadTarget);\n+        });\n+    }\n+\n+    private JsonObject getResponseJson(final String downloadId, final int downloadAssetCount, final int downloadRenditionCount, final String archiveName) {\n+        final JsonObject json = new JsonObject();\n+        json.addProperty(DOWNLOAD_ID, downloadId);\n+        json.addProperty(DOWNLOAD_ASSET_COUNT, downloadAssetCount);\n+        json.addProperty(DOWNLOAD_RENDITION_COUNT, downloadRenditionCount);\n+        json.addProperty(DOWNLOAD_ARCHIVE_NAME, archiveName);\n+\n+        return json;\n+    }\n+}"
  },
  {
    "sha": "5741463b45dc65042dcbdab372bc1e4b8d8cdbd8",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/NamedRenditionDownloadTargetProcessor.java",
    "status": "added",
    "additions": 149,
    "deletions": 0,
    "changes": 149,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/NamedRenditionDownloadTargetProcessor.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/NamedRenditionDownloadTargetProcessor.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/async/impl/NamedRenditionDownloadTargetProcessor.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -0,0 +1,149 @@\n+/*\n+ * Asset Share Commons\n+ *\n+ * Copyright (C) 2021 Adobe\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.adobe.aem.commons.assetshare.content.renditions.download.async.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRendition;\n+import com.adobe.cq.dam.download.api.DownloadApiFactory;\n+import com.adobe.cq.dam.download.api.DownloadException;\n+import com.adobe.cq.dam.download.api.DownloadFile;\n+import com.adobe.cq.dam.download.api.DownloadTarget;\n+import com.adobe.cq.dam.download.spi.DownloadTargetProcessor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.commons.mime.MimeTypeService;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatcher;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatchers;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionParameters;\n+\n+@Component\n+public class NamedRenditionDownloadTargetProcessor implements DownloadTargetProcessor {\n+    private static final Logger log = LoggerFactory.getLogger(NamedRenditionDownloadTargetProcessor.class);\n+\n+    public static final String TARGET_TYPE = \"asset-share-commons__named-rendition\";\n+    public static final String PARAM_ASSET_PATH = \"path\";\n+    public static final String PARAM_RENDITION_NAME = \"renditionName\";\n+    public static final String PARAM_ARCHIVE_NAME = \"archiveName\";\n+    public static final String PARAM_ARCHIVE_PATH = \"archivePath\";\n+    public static final String PARAM_RENDITION_BY_ASSET_FOLDER = \"groupRenditionsByAssetFolder\";\n+\n+    @Reference\n+    private transient AssetRenditionDispatchers assetRenditionDispatchers;\n+\n+    @Reference\n+    private DownloadApiFactory apiFactory;\n+\n+    @Reference\n+    private MimeTypeService mimeService;\n+\n+    @Override\n+    public Collection<DownloadFile> processTarget(DownloadTarget target, ResourceResolver resourceResolver) throws DownloadException {\n+        final List<DownloadFile> downloadFiles = new ArrayList<>();\n+\n+        final String path = target.getParameter(PARAM_ASSET_PATH, String.class);\n+        final String renditionName = target.getParameter(PARAM_RENDITION_NAME, String.class);\n+        final String archiveName = target.getParameter(PARAM_ARCHIVE_NAME, String.class);\n+\n+        final Resource resource = resourceResolver.getResource(path);\n+        final AssetModel assetModel = resource.adaptTo(AssetModel.class);\n+        final AssetRenditionParameters assetRenditionParameters = new AssetRenditionParameters(assetModel, renditionName);\n+\n+        final boolean groupRenditionsByAssetFolder = target.getParameter(PARAM_RENDITION_BY_ASSET_FOLDER, true);\n+\n+        for (final AssetRenditionDispatcher assetRenditionDispatcher : assetRenditionDispatchers.getAssetRenditionDispatchers()) {\n+\n+            log.debug(\"Setting DownloadTarget for [ {} ] using AssetRenditionDispatcher [ {} ]\", assetModel.getPath(), assetRenditionDispatcher.getName());\n+\n+            final AssetRendition assetRendition = assetRenditionDispatcher.getRendition(assetModel, assetRenditionParameters);\n+\n+            if (assetRendition != null) {\n+                log.debug(\"Obtained AssetRendition [ {} ] details for [ {} ]\", assetRendition.getBinaryUri(), assetModel.getPath());\n+\n+                final Map<String, Object> downloadFileParameters = new HashMap<>();\n+\n+                downloadFileParameters.put(PARAM_ARCHIVE_NAME, archiveName);\n+                downloadFileParameters.put(PARAM_ARCHIVE_PATH, getArchivePath(groupRenditionsByAssetFolder,\n+                        true,\n+                        assetModel,\n+                        renditionName,\n+                        assetRendition.getMimeType()));\n+                downloadFiles.add(apiFactory.createDownloadFile(assetRendition.getSize(),\n+                        assetRendition.getBinaryUri(),\n+                        downloadFileParameters));\n+            } else {\n+                log.debug(\"Unable to obtain AssetRendition details for [ {} ] from AssetDispatcher [ {} ]\", assetModel.getPath(), assetRenditionDispatcher.getClass().getName());\n+            }\n+        }\n+\n+        return downloadFiles;\n+    }\n+\n+    @Override\n+    public String getTargetType() {\n+        return TARGET_TYPE;\n+    }\n+\n+    @Override\n+    public Map<String, Boolean> getValidParameters() {\n+        final Map<String, Boolean> validParameters = new HashMap<>();\n+\n+        validParameters.put(PARAM_ASSET_PATH, true);\n+        validParameters.put(PARAM_RENDITION_NAME, true);\n+        validParameters.put(PARAM_ARCHIVE_NAME, true);\n+        validParameters.put(PARAM_ARCHIVE_PATH, false);\n+\n+        return validParameters;\n+    }\n+\n+    private String getArchivePath(final boolean groupRenditionsByAssetFolder,\n+                                  final boolean includeRenditionName,\n+                                  final AssetModel assetModel,\n+                                  final String renditionName,\n+                                  final String mimeType) {\n+        final String assetNameWithoutExtension = StringUtils.substringBeforeLast(assetModel.getName(), \".\");\n+\n+        String folder = \"\";\n+        String fileName = \"\";\n+\n+        if (groupRenditionsByAssetFolder && StringUtils.isNotBlank(assetNameWithoutExtension)) {\n+            folder = assetNameWithoutExtension + \"/\";\n+        }\n+\n+        if (includeRenditionName) {\n+            fileName = StringUtils.substringBeforeLast(assetModel.getName(), \".\") + \" (\" + renditionName + \").\" + mimeService.getExtension(mimeType);\n+        } else {\n+            fileName = StringUtils.substringBeforeLast(assetModel.getName(), \".\") + \".\" + mimeService.getExtension(mimeType);\n+        }\n+\n+        return folder + fileName;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bea29c8e0738b5837d819b2b22981476028bb009",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServlet.java",
    "status": "modified",
    "additions": 12,
    "deletions": 33,
    "changes": 45,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServlet.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServlet.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServlet.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,10 +19,12 @@\n \n package com.adobe.aem.commons.assetshare.content.renditions.download.impl;\n \n+import com.adobe.aem.commons.assetshare.components.actions.ActionHelper;\n import com.adobe.aem.commons.assetshare.content.AssetModel;\n import com.adobe.aem.commons.assetshare.content.renditions.download.AssetRenditionsDownloadOrchestrator;\n import com.adobe.aem.commons.assetshare.content.renditions.download.AssetRenditionsDownloadOrchestratorManager;\n import com.adobe.aem.commons.assetshare.content.renditions.download.AssetRenditionsException;\n+import com.adobe.aem.commons.assetshare.util.RequireAem;\n import com.adobe.aem.commons.assetshare.util.ServletHelper;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.sling.api.SlingHttpServletRequest;\n@@ -78,20 +80,28 @@\n \n     private static final String DEFAULT_ASSET_RENDITIONS_DOWNLOAD_ORCHESTRATOR = AssetRenditionsZipperImpl.class.getName();\n \n+    @Reference(target=\"(distribution=classic)\")\n+    private RequireAem requireAem;\n+\n     @Reference\n     private ServletHelper servletHelper;\n \n     @Reference\n     private ModelFactory modelFactory;\n \n+    @Reference\n+    private ActionHelper actionHelper;\n+\n     private Map<String, AssetRenditionsDownloadOrchestrator> assetRenditionsDownloadOrchestrators = new ConcurrentHashMap<>();\n \n     @Override\n     protected final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException {\n         servletHelper.addSlingBindings(request, response);\n \n-        final List<String> renditionNames = getRenditionNames(request);\n-        final List<AssetModel> assets = getAssets(request);\n+        final List<String> renditionNames = actionHelper.getAllowedValuesFromQueryParameter(request,\n+                REQ_KEY_RENDITION_NAMES,\n+                request.getResource().getValueMap().get(PN_ALLOWED_RENDITION_NAMES, new String[]{}));\n+        final List<AssetModel> assets = actionHelper.getAssetsFromQueryParameter(request, REQ_KEY_ASSET_PATHS);\n         final String id = getAssetRenditionsDownloadOrchestratorId(request);\n \n         final AssetRenditionsDownloadOrchestrator orchestrator = getAssetRenditionsDownloadOrchestrator(id);\n@@ -109,37 +119,6 @@ protected final void doPost(SlingHttpServletRequest request, SlingHttpServletRes\n         }\n     }\n \n-    protected List<AssetModel> getAssets(final SlingHttpServletRequest request) {\n-        final RequestParameter[] requestParameters = request.getRequestParameters(REQ_KEY_ASSET_PATHS);\n-\n-        if (requestParameters == null) { return EMPTY_LIST; }\n-\n-        return Arrays.stream(requestParameters)\n-                .map(RequestParameter::getString)\n-                .map(path -> request.getResourceResolver().getResource(path))\n-                .filter(Objects::nonNull)\n-                .map(resource -> modelFactory.getModelFromWrappedRequest(request, resource, AssetModel.class))\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-    }\n-\n-    protected List<String> getRenditionNames(final SlingHttpServletRequest request) {\n-        final String[] allowedRenditionNames = request.getResource().getValueMap().get(PN_ALLOWED_RENDITION_NAMES, new String[]{});\n-\n-        if (allowedRenditionNames == null) { return EMPTY_LIST; }\n-\n-        final RequestParameter[] requestParameters = request.getRequestParameters(REQ_KEY_RENDITION_NAMES);\n-\n-        if (requestParameters != null) {\n-            return Arrays.stream(requestParameters).map(RequestParameter::getString)\n-                    .filter(renditionName -> allowedRenditionNames.length == 0 || ArrayUtils.contains(allowedRenditionNames, renditionName))\n-                    .distinct()\n-                    .collect(Collectors.toList());\n-        } else {\n-            return emptyList();\n-        }\n-    }\n-\n     private String getAssetRenditionsDownloadOrchestratorId(SlingHttpServletRequest request) {\n         return request.getResource().getValueMap().get(PN_ASSET_RENDITIONS_DOWNLOAD_ORCHESTRATOR, DEFAULT_ASSET_RENDITIONS_DOWNLOAD_ORCHESTRATOR);\n     }"
  },
  {
    "sha": "74bf25102abb04e3a7f63c6559da6ebf3a9bcf60",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/AssetRenditionsImpl.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/AssetRenditionsImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/AssetRenditionsImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/AssetRenditionsImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -20,6 +20,7 @@\n package com.adobe.aem.commons.assetshare.content.renditions.impl;\n \n import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRendition;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionParameters;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditions;\n import org.apache.commons.lang3.StringUtils;\n@@ -74,13 +75,16 @@ public String getUrl(final SlingHttpServletRequest request, final AssetModel ass\n     @Override\n     public String evaluateExpression(final SlingHttpServletRequest request, String expression) {\n         final AssetModel assetModel = request.adaptTo(AssetModel.class);\n+        return evaluateExpression(assetModel, new AssetRenditionParameters(request).getRenditionName(), expression);\n+    }\n \n+    @Override\n+    public String evaluateExpression(final AssetModel assetModel, String renditionName, String expression) {\n         // Even though, the name is .path, we use url since this is the URL escaped version of the path\n         final String assetPath = assetModel.getPath();\n         final String assetUrl = assetModel.getUrl();\n         final String assetName = assetModel.getName();\n         final String assetExtension = StringUtils.substringAfterLast(assetName, \".\");\n-        final String renditionName = new AssetRenditionParameters(request).getRenditionName();\n \n         // Dynamic Media properties\n         final String dmName = assetModel.getProperties().get(PN_S7_NAME, String.class);"
  },
  {
    "sha": "45746c4816ecfe3d8e9e052c26f8612b2432cc9d",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/AbstractRenditionDispatcherImpl.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/AbstractRenditionDispatcherImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/AbstractRenditionDispatcherImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/AbstractRenditionDispatcherImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -21,13 +21,17 @@\n \n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatcher;\n import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.util.Arrays;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.regex.Pattern;\n import java.util.stream.Stream;\n \n public abstract class AbstractRenditionDispatcherImpl implements AssetRenditionDispatcher {\n+    private static Logger log = LoggerFactory.getLogger(AbstractRenditionDispatcherImpl.class);\n+\n     protected static final String OSGI_PROPERTY_VALUE_DELIMITER = \"=\";\n \n     protected ConcurrentHashMap<String, Pattern> parseMappingsAsPatterns(final String[] renditionMappings) {"
  },
  {
    "sha": "af6139ab98e7a9288c40825fadb99a91d69dedaa",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/ExternalRedirectRenditionDispatcherImpl.java",
    "status": "modified",
    "additions": 29,
    "deletions": 5,
    "changes": 34,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/ExternalRedirectRenditionDispatcherImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/ExternalRedirectRenditionDispatcherImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/ExternalRedirectRenditionDispatcherImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,13 +19,18 @@\n \n package com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers;\n \n+import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRendition;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatcher;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionParameters;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditions;\n import com.adobe.aem.commons.assetshare.util.UrlUtil;\n+import com.day.cq.dam.api.Asset;\n+import com.day.cq.dam.api.Rendition;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.commons.mime.MimeTypeService;\n import org.osgi.service.component.annotations.Activate;\n import org.osgi.service.component.annotations.Component;\n import org.osgi.service.component.annotations.Reference;\n@@ -68,6 +73,9 @@\n     @Reference\n     private AssetRenditions assetRenditions;\n \n+    @Reference\n+    private MimeTypeService mimeTypeService;\n+\n     @Override\n     public String getLabel() {\n         return cfg.label();\n@@ -111,11 +119,11 @@ public void dispatch(SlingHttpServletRequest request, SlingHttpServletResponse r\n         final AssetRenditionParameters parameters = new AssetRenditionParameters(request);\n \n         final String expression = mappings.get(parameters.getRenditionName());\n-        final String evaluatedExpression = assetRenditions.evaluateExpression(request, expression);\n+        final String renditionRedirect = assetRenditions.evaluateExpression(request, expression);\n \n-        if (StringUtils.isNotBlank(evaluatedExpression)) {\n+        if (StringUtils.isNotBlank(renditionRedirect)) {\n             log.debug(\"Serving External redirect rendition [ {} ] for resolved rendition name [ {} ]\",\n-                    evaluatedExpression,\n+                    renditionRedirect,\n                     parameters.getRenditionName());\n \n             if (cfg.redirect() == HttpServletResponse.SC_MOVED_TEMPORARILY) {\n@@ -124,14 +132,30 @@ public void dispatch(SlingHttpServletRequest request, SlingHttpServletResponse r\n                 response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);\n             }\n \n-            response.setHeader(\"Location\", UrlUtil.escape(evaluatedExpression));\n+            response.setHeader(\"Location\", UrlUtil.escape(renditionRedirect));\n \n         } else {\n-            log.error(\"Could not convert [ {} ] into a valid URI\", evaluatedExpression);\n+            log.error(\"Could not convert [ {} ] into a valid URI\", renditionRedirect);\n             response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Could not serve asset rendition.\");\n         }\n     }\n \n+    @Override\n+    public AssetRendition getRendition(AssetModel assetModel, AssetRenditionParameters parameters) {\n+        final String expression = mappings.get(parameters.getRenditionName());\n+        final String renditionRedirect = assetRenditions.evaluateExpression(assetModel, parameters.getRenditionName(), expression);\n+\n+        if (StringUtils.isNotBlank(renditionRedirect)) {\n+            log.debug(\"Downloading External redirect rendition [ {} ] for resolved rendition name [ {} ]\",\n+                    renditionRedirect,\n+                    parameters.getRenditionName());\n+\n+            return new AssetRendition(renditionRedirect, 0L, null);\n+        }\n+\n+        return null;\n+    }\n+\n     @Activate\n     protected void activate(Cfg cfg) {\n         this.cfg = cfg;"
  },
  {
    "sha": "5a83105cc2560b18a4e05d0723c139d840405157",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/InternalRedirectRenditionDispatcherImpl.java",
    "status": "modified",
    "additions": 12,
    "deletions": 5,
    "changes": 17,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/InternalRedirectRenditionDispatcherImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/InternalRedirectRenditionDispatcherImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/InternalRedirectRenditionDispatcherImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,6 +19,8 @@\n \n package com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers;\n \n+import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRendition;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatcher;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionParameters;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditions;\n@@ -41,11 +43,7 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n import static org.osgi.framework.Constants.SERVICE_RANKING;\n@@ -138,6 +136,15 @@ public void dispatch(SlingHttpServletRequest request, SlingHttpServletResponse r\n         }\n     }\n \n+    @Override\n+    public AssetRendition getRendition(final AssetModel assetModel, final AssetRenditionParameters parameters) {\n+        // If this method becomes supportable by the AEM Async Asset Download framework, review the code at:\n+        // https://gist.github.com/davidjgonzalez/66e481b54aafb1b900a579ee95848d8f\n+        // As this might prove useful in it's implementation.\n+        throw new UnsupportedOperationException(String.format(\"[ %s ] is not supported by the AEM Async Asset Download Framework.\",\n+                this.getClass().getName()));\n+    }\n+\n     protected String cleanPathInfoRequestPath(String resourcePath) {\n         if (StringUtils.startsWith(resourcePath, \"/\")) {\n             return resourcePath;"
  },
  {
    "sha": "bb6a4434b050d9b608c3d56061dcabe52eca2105",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/StaticRenditionDispatcherImpl.java",
    "status": "modified",
    "additions": 22,
    "deletions": 1,
    "changes": 23,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/StaticRenditionDispatcherImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/StaticRenditionDispatcherImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/impl/dispatchers/StaticRenditionDispatcherImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,6 +19,8 @@\n \n package com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers;\n \n+import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRendition;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatcher;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionParameters;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditions;\n@@ -42,6 +44,7 @@\n \n import javax.servlet.ServletException;\n import java.io.IOException;\n+import java.net.URI;\n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.regex.Pattern;\n@@ -115,7 +118,7 @@ public void dispatch(SlingHttpServletRequest request, SlingHttpServletResponse r\n         final Asset asset = DamUtil.resolveToAsset(request.getResource());\n         final AssetRenditionParameters parameters = new AssetRenditionParameters(request);\n \n-        final Rendition rendition = asset.getRendition(new PatternRenditionPicker(mappings.get(parameters.getRenditionName())));\n+        final Rendition rendition = findRendition(asset, parameters);\n \n         if (rendition != null) {\n \n@@ -140,6 +143,24 @@ public void dispatch(SlingHttpServletRequest request, SlingHttpServletResponse r\n         }\n     }\n \n+    @Override\n+    public AssetRendition getRendition(final AssetModel assetModel, final AssetRenditionParameters parameters) {\n+        final Rendition rendition = findRendition(assetModel.getAsset(), parameters);\n+\n+        if (rendition != null) {\n+            log.debug(\"Downloading asset rendition [ {} ] for resolved rendition name [ {} ]\",\n+                    rendition.getPath(),\n+                    parameters.getRenditionName());\n+            return new AssetRendition(rendition.getPath(), rendition.getSize(), rendition.getMimeType());\n+        }\n+\n+        return null;\n+    }\n+\n+    private Rendition findRendition(final Asset asset, final AssetRenditionParameters parameters) {\n+        return asset.getRendition(new PatternRenditionPicker(mappings.get(parameters.getRenditionName())));\n+    }\n+\n     @Activate\n     protected void activate(Cfg cfg) {\n         this.cfg = cfg;"
  },
  {
    "sha": "e36c6777afd68a52d4957d85c585d071fe6c1eff",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/package-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/package-info.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/package-info.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/content/renditions/package-info.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -17,7 +17,7 @@\n  *\n  */\n \n-@Version(\"2.0.0\")\n+@Version(\"2.1.0\")\n package com.adobe.aem.commons.assetshare.content.renditions;\n \n import org.osgi.annotation.versioning.Version;"
  },
  {
    "sha": "e97f5b8ed3c80021dec61a231b9f9f444267ed94",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/search/results/package-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/search/results/package-info.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/search/results/package-info.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/search/results/package-info.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -17,7 +17,7 @@\n  *\n  */\n \n-@Version(\"2.2.0\")\n+@Version(\"2.3.0\")\n package com.adobe.aem.commons.assetshare.search.results;\n \n import org.osgi.annotation.versioning.Version;"
  },
  {
    "sha": "3eef308c7ee4ec68d612625262475be2ef1d91cd",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/util/RequireAem.java",
    "status": "modified",
    "additions": 74,
    "deletions": 5,
    "changes": 79,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/util/RequireAem.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/util/RequireAem.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/util/RequireAem.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -1,13 +1,82 @@\n+/*\n+ * #%L\n+ * ACS AEM Commons Bundle\n+ * %%\n+ * Copyright (C) 2020 Adobe\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/* This class is copied from: https://github.com/Adobe-Consulting-Services/acs-aem-commons/blob/master/bundle/src/main/java/com/adobe/acs/commons/util/RequireAem.java */\n+\n package com.adobe.aem.commons.assetshare.util;\n \n import org.osgi.annotation.versioning.ProviderType;\n \n+/**\n+ * This OSGi Service can be used in 2 different ways....\n+ *\n+ * 1. It can be used In-line in code to detect if AEM is running as Cloud Ready (AEM as a Cloud Service or local AEM as a Cloud Service SDK QuickStart Jar) or not.\n+ *\n+ * {@literal @}Reference\n+ * RequireAem requireAem;\n+ * ...\n+ * if ((Distribution.CLOUD_READY.equals(requireAem.getDistribution()) {\n+ *     .. Do something that only works for the Cloud ..\n+ * } else {\n+ *     .. Do something for AMS / On-Prem ..\n+ * }\n+ *\n+ * 2. It can be used to allow/stop OSGi Components from starting entirely\n+ *\n+ * {@literal @}Component\n+ * public class IOnlyWorkOnTheCloud implements Foo {\n+ *\n+ *    {@literal @}Reference(target=\"(distribution=cloud-ready)\")\n+ *    RequireAem requireAem;\n+ *    ...\n+ * }\n+ *\n+ * ... OR ...\n+ *\n+ * {@literal @}Component\n+ * public class IOnlyWorkOnAmsOrOnPrem implements Bar {\n+ *\n+ *      {@literal @}Reference(target=\"(distribution=classic)\")\n+ *      RequireAem requireAem;\n+ *      ...\n+ *  }\n+ */\n @ProviderType\n public interface RequireAem {\n+    enum Distribution {\n+        CLOUD_READY(\"cloud-ready\"),\n+        CLASSIC(\"classic\");\n+\n+        private String value;\n+\n+        Distribution(String value) {\n+            this.value = value;\n+        }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+    }\n+\n     /**\n-     * Determines if the AEM service is running in the true, Adobe Cloud, or not (ie. local Quickstart, AMS or Onprem)\n-     *\n-     * @return true if running in the Adobe Cloud, else false.\n+     * @return the running AEM's environments distribution type.\n      */\n-    boolean isRunningInAdobeCloud();\n-}\n+    Distribution getDistribution();\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0ce63171fceacda1fb334823bbae634db9dcf0d6",
    "filename": "core/src/main/java/com/adobe/aem/commons/assetshare/util/impl/RequireAemImpl.java",
    "status": "modified",
    "additions": 80,
    "deletions": 20,
    "changes": 100,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/util/impl/RequireAemImpl.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/main/java/com/adobe/aem/commons/assetshare/util/impl/RequireAemImpl.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/main/java/com/adobe/aem/commons/assetshare/util/impl/RequireAemImpl.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -1,42 +1,102 @@\n+/*\n+ * #%L\n+ * ACS AEM Commons Bundle\n+ * %%\n+ * Copyright (C) 2020 Adobe\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/* Copied from: https://github.com/Adobe-Consulting-Services/acs-aem-commons/blob/master/bundle/src/main/java/com/adobe/acs/commons/util/impl/RequireAemImpl.java */\n package com.adobe.aem.commons.assetshare.util.impl;\n \n import com.adobe.aem.commons.assetshare.util.RequireAem;\n-import org.apache.commons.lang3.StringUtils;\n+import com.adobe.granite.license.ProductInfo;\n+import com.adobe.granite.license.ProductInfoProvider;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.framework.Version;\n import org.osgi.service.component.annotations.Activate;\n import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.metatype.annotations.AttributeDefinition;\n-import org.osgi.service.metatype.annotations.Designate;\n-import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-@Component\n-@Designate(ocd = RequireAemImpl.Cfg.class)\n+import java.util.Dictionary;\n+import java.util.Hashtable;\n+\n+@Component(\n+        immediate = true,\n+        service = {}\n+)\n public class RequireAemImpl implements RequireAem {\n     private static final Logger log = LoggerFactory.getLogger(RequireAemImpl.class);\n \n-    static final String CLOUD_ONLY_OSGI_PROPERTY_VALUE = \"$[env:programId]\";\n+    static final String PN_DISTRIBUTION = \"distribution\";\n+    static final String PN_VERSION = \"version\";\n+\n+    // This is the first Major/Minor GA Version of AEM as a Cloud Service\n+    private static final Version originalCloudServiceVersion = new Version(2019, 12,   0);\n+\n+    @Reference\n+    private ProductInfoProvider productInfoProvider;\n \n-    private boolean runningInAdobeCloud = false;\n+    private ProductInfo productInfo;\n+    private ServiceRegistration<?> serviceRegistration;\n \n-    public boolean isRunningInAdobeCloud() {\n-        return runningInAdobeCloud;\n+    @Override\n+    public Distribution getDistribution() {\n+        if (productInfo.getVersion().compareTo(originalCloudServiceVersion) > 0) {\n+            return Distribution.CLOUD_READY;\n+        } else {\n+            return Distribution.CLASSIC;\n+        }\n     }\n \n     @Activate\n-    protected void activate(RequireAemImpl.Cfg cfg) {\n-        this.runningInAdobeCloud = StringUtils.isNotBlank(cfg.cloud_only_variable()) && !StringUtils.equals(CLOUD_ONLY_OSGI_PROPERTY_VALUE, cfg.cloud_only_variable());\n+    protected void activate(final BundleContext bundleContext) {\n+        productInfo = productInfoProvider.getProductInfo();\n+\n+        @SuppressWarnings(\"squid:java:S1149\")\n+        final Dictionary<String, Object> properties = new Hashtable<>();\n \n-        if (this.isRunningInAdobeCloud()) {\n-            log.debug(\"RequireAemImpl determined this AEM environment is running the Adobe Cloud\");\n+        String distribution;\n+        String version = productInfo.getShortVersion();\n+\n+        if (Distribution.CLOUD_READY.equals(getDistribution())) {\n+            distribution = Distribution.CLOUD_READY.getValue();\n         } else {\n-            log.debug(\"RequireAemImpl determined this AEM environment is NOT running the Adobe Cloud\");\n+            distribution =  Distribution.CLASSIC.getValue();\n         }\n+\n+        properties.put(PN_DISTRIBUTION, distribution);\n+        properties.put(PN_VERSION, version);\n+\n+        serviceRegistration = bundleContext.registerService(RequireAem.class.getName(), this, properties);\n+\n+        log.info(\"Registering [ RequireAem.class ] as an OSGi Service with OSGi properties [ distribution = {}, version = {} ] so it can be used to enable/disable other OSGi Components\",\n+                properties.get(PN_DISTRIBUTION), properties.get(PN_VERSION));\n     }\n \n-    @ObjectClassDefinition(name = \"Asset Share Commons - Require AEM\")\n-    public @interface Cfg {\n-        @AttributeDefinition\n-        String cloud_only_variable() default \"\";\n+    @Deactivate\n+    protected void deactivate() {\n+        productInfo = null;\n+\n+        if (serviceRegistration != null) {\n+            serviceRegistration.unregister();\n+            serviceRegistration = null;\n+        }\n     }\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "06b921f7c1a09c99595480f6e63421096e5d1745",
    "filename": "core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/AsyncAssetRenditionsDownloadServletTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/AsyncAssetRenditionsDownloadServletTest.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/AsyncAssetRenditionsDownloadServletTest.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/AsyncAssetRenditionsDownloadServletTest.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -0,0 +1,53 @@\n+package com.adobe.aem.commons.assetshare.components.actions.download.impl;\n+\n+import com.adobe.aem.commons.assetshare.components.actions.impl.ActionHelperImpl;\n+import com.adobe.aem.commons.assetshare.content.renditions.download.async.impl.AsyncAssetRenditionsDownloadServlet;\n+import com.adobe.aem.commons.assetshare.testing.RequireAemMock;\n+import com.adobe.aem.commons.assetshare.util.RequireAem;\n+import com.adobe.cq.dam.download.api.DownloadApiFactory;\n+import com.adobe.cq.dam.download.api.DownloadService;\n+import io.wcm.testing.mock.aem.junit.AemContext;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.servlet.Servlet;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AsyncAssetRenditionsDownloadServletTest {\n+\n+    @Rule\n+    public final AemContext ctx = new AemContext();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        ctx.registerInjectActivateService(new ActionHelperImpl());\n+        ctx.registerService(DownloadService.class, mock(DownloadService.class));\n+        ctx.registerService(DownloadApiFactory.class, mock(DownloadApiFactory.class));\n+    }\n+\n+    @Test\n+    public void activateInCloudReady() {\n+        RequireAemMock.setAemDistribution(ctx, RequireAem.Distribution.CLOUD_READY);\n+\n+        ctx.registerInjectActivateService(new AsyncAssetRenditionsDownloadServlet());\n+\n+        AsyncAssetRenditionsDownloadServlet servlet = (AsyncAssetRenditionsDownloadServlet) ctx.getService(Servlet.class);\n+\n+        assertNotNull(servlet);\n+    }\n+\n+    @Test(expected = org.apache.sling.testing.mock.osgi.ReferenceViolationException.class)\n+    public void activateInClassic() {\n+        RequireAemMock.setAemDistribution(ctx, RequireAem.Distribution.CLASSIC);\n+\n+        ctx.registerInjectActivateService(new AsyncAssetRenditionsDownloadServlet());\n+\n+        ctx.getService(Servlet.class);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bdd8e4c1372003c7b4dc5a0aeae7d0a64da2036c",
    "filename": "core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImplTest.java",
    "status": "modified",
    "additions": 21,
    "deletions": 3,
    "changes": 24,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImplTest.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImplTest.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/download/impl/DownloadImplTest.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -4,6 +4,14 @@\n import java.util.Collection;\n import java.util.List;\n \n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatcher;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatchers;\n+import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditions;\n+import com.adobe.aem.commons.assetshare.content.renditions.impl.AssetRenditionDispatchersImpl;\n+import com.adobe.aem.commons.assetshare.content.renditions.impl.AssetRenditionsImpl;\n+import com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers.ExternalRedirectRenditionDispatcherImpl;\n+import com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers.InternalRedirectRenditionDispatcherImpl;\n+import com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers.StaticRenditionDispatcherImpl;\n import com.adobe.aem.commons.assetshare.testhelpers.TestOptionsImpl;\n import com.adobe.cq.wcm.core.components.models.form.Options;\n import org.apache.commons.lang3.StringUtils;\n@@ -66,6 +74,9 @@ public void setUp() throws Exception {\n \t\tdoReturn(assetModels).when(actionHelper).getAssetsFromQueryParameter(ctx.request(), \"path\");\n \t\tdoReturn(1024L).when(assetDownloadHelper).getMaxContentSizeLimit();\n \n+\t\tctx.registerService(AssetRenditions.class, new AssetRenditionsImpl());\n+\t\tctx.registerService(AssetRenditionDispatchers.class, new AssetRenditionDispatchersImpl());\n+\n \t\tctx.registerService(ActionHelper.class, actionHelper, Constants.SERVICE_RANKING, Integer.MAX_VALUE);\n \t\tctx.registerService(AssetDownloadHelper.class, assetDownloadHelper, Constants.SERVICE_RANKING,\n \t\t\t\tInteger.MAX_VALUE);\n@@ -232,6 +243,14 @@ public void isLegacyMode_No_WithGroups() {\n \tpublic void getAssetRenditionGroups() {\n \t\tctx.currentResource(\"/content/download_with_asset_rendition_groups\");\n \n+\t\tctx.registerInjectActivateService(new ExternalRedirectRenditionDispatcherImpl(),\n+\t\t\t\t\"rendition.mappings\", new String[] {\n+\t\t\t\t\t\t\"rendition-1-1=https://adobe.com/test.png\",\n+\t\t\t\t\t\t\"rendition-1-2=https://adobe.com/test.png\",\n+\t\t\t\t\t\t\"rendition-2-1=https://adobe.com/test.png\"});\n+\n+\t\tassertEquals(1, ctx.getService(AssetRenditionDispatchers.class).getAssetRenditionDispatchers().size());\n+\n \t\tfinal Options group1Options = new TestOptionsImpl(ctx.currentResource().getChild(\"asset-renditions-groups/items/item0/asset-renditions/items\"));\n \t\tfinal Options group2Options = new TestOptionsImpl(ctx.currentResource().getChild(\"asset-renditions-groups/items/item1/asset-renditions/items\"));\n \n@@ -258,11 +277,10 @@ public void getAssetRenditionGroups() {\n \t\tassertEquals(\"Group 2\", actual.get(1).getTitle());\n \t\tassertEquals(\"Rendition 2.1\", actual.get(1).getItems().get(0).getText());\n \t\tassertEquals(\"rendition-2-1\", actual.get(1).getItems().get(0).getValue());\n-\t\tassertEquals(\"Rendition 2.2\", actual.get(1).getItems().get(1).getText());\n-\t\tassertEquals(\"rendition-2-2\", actual.get(1).getItems().get(1).getValue());\n+\t\t//assertEquals(\"Rendition 2.2\", actual.get(1).getItems().get(1).getText());\n+\t\t//assertEquals(\"rendition-2-2\", actual.get(1).getItems().get(1).getValue());\n \t}\n \n-\n     private class IsSameResourceByPath implements ArgumentMatcher<Resource> {\n         private final String path;\n "
  },
  {
    "sha": "08a8c9a0732c540befeab93f1c390ca49004e7aa",
    "filename": "core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImplTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImplTest.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImplTest.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/test/java/com/adobe/aem/commons/assetshare/components/actions/impl/ActionHelperImplTest.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -21,6 +21,7 @@\n \n import com.adobe.aem.commons.assetshare.components.actions.ActionHelper;\n import com.adobe.aem.commons.assetshare.content.AssetModel;\n+import com.adobe.aem.commons.assetshare.content.renditions.download.impl.AssetRenditionsDownloadServlet;\n import io.wcm.testing.mock.aem.junit.AemContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.sling.api.resource.Resource;\n@@ -34,8 +35,10 @@\n import org.mockito.junit.MockitoJUnitRunner;\n import org.osgi.framework.Constants;\n \n+import javax.servlet.Servlet;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n@@ -80,7 +83,7 @@ public void setup() {\n     }\n \n     @Test\n-    public void testWithData() {\n+    public void getAssetsFromQueryParameter() {\n         final ActionHelper actionHelper = ctx.getService(ActionHelper.class);\n \n         final Map<String, Object> requestParameters = new HashMap<>();\n@@ -103,6 +106,18 @@ public void testWithData() {\n     }\n \n \n+\n+    @Test\n+    public void getAllowedValuesFromQueryParameter() {\n+        final ActionHelper actionHelper = ctx.getService(ActionHelper.class);\n+\n+        ctx.request().setQueryString(\"renditionName=one&renditionName=four\");\n+\n+        List<String> actual = actionHelper.getAllowedValuesFromQueryParameter(ctx.request(), \"renditionName\", new String[] {\"four\"});\n+        assertEquals(1, actual.size());\n+        assertEquals(\"four\", actual.get(0));\n+    }\n+\n     class ResourcePath implements ArgumentMatcher<Resource> {\n         private final String path;\n \n@@ -118,4 +133,4 @@ public String toString() {\n             return \"[Resource path of \" + this.path + \"]\";\n         }\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "d88ad9bbab767df68a5055e17ec12b21e9c934d7",
    "filename": "core/src/test/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImplTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImplTest.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImplTest.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/test/java/com/adobe/aem/commons/assetshare/content/impl/AssetModelImplTest.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -77,4 +77,13 @@ public void getUrl_WithComplexPath() {\n \n         assertEquals(expected, actual.getUrl());\n     }\n+\n+    @Test\n+    public void getUrl_WithSimplePathResource() {\n+        String expected = \"/content/dam/test.png\";\n+        AssetModel actual = ctx.resourceResolver().getResource(expected).adaptTo(AssetModel.class);\n+\n+        assertNotNull(actual);\n+        assertEquals(expected, actual.getUrl());\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "88e23a91a364cd779e585271dcb742290faf7c1f",
    "filename": "core/src/test/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServletTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 32,
    "changes": 41,
    "blob_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/blob/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServletTest.java",
    "raw_url": "https://github.com/Adobe-Marketing-Cloud/asset-share-commons/raw/12ec5c213e2d8f02ec045de5cb776242a1a8a8e9/core/src/test/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServletTest.java",
    "contents_url": "https://api.github.com/repos/Adobe-Marketing-Cloud/asset-share-commons/contents/core/src/test/java/com/adobe/aem/commons/assetshare/content/renditions/download/impl/AssetRenditionsDownloadServletTest.java?ref=12ec5c213e2d8f02ec045de5cb776242a1a8a8e9",
    "patch": "@@ -19,12 +19,15 @@\n \n package com.adobe.aem.commons.assetshare.content.renditions.download.impl;\n \n+import com.adobe.aem.commons.assetshare.components.actions.impl.ActionHelperImpl;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditionDispatchers;\n import com.adobe.aem.commons.assetshare.content.renditions.AssetRenditions;\n import com.adobe.aem.commons.assetshare.content.renditions.impl.AssetRenditionDispatchersImpl;\n import com.adobe.aem.commons.assetshare.content.renditions.impl.AssetRenditionsImpl;\n import com.adobe.aem.commons.assetshare.content.renditions.impl.dispatchers.StaticRenditionDispatcherImpl;\n import com.adobe.aem.commons.assetshare.testing.MockAssetModels;\n+import com.adobe.aem.commons.assetshare.testing.RequireAemMock;\n+import com.adobe.aem.commons.assetshare.util.RequireAem;\n import com.adobe.aem.commons.assetshare.util.impl.ServletHelperImpl;\n import com.google.common.collect.ImmutableMap;\n import io.wcm.testing.mock.aem.junit.AemContext;\n@@ -36,7 +39,6 @@\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.models.factory.ModelFactory;\n import org.apache.sling.testing.mock.sling.servlet.MockRequestDispatcherFactory;\n-import org.apache.sling.testing.mock.sling.servlet.MockSlingHttpServletResponse;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -48,13 +50,11 @@\n import javax.servlet.RequestDispatcher;\n import javax.servlet.Servlet;\n import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.doAnswer;\n \n @RunWith(MockitoJUnitRunner.class)\n@@ -82,6 +82,9 @@ public void setUp() {\n \n         MockAssetModels.mockModelFactory(ctx, modelFactory, \"/content/dam/test.png\");\n \n+        ctx.registerService(ModelFactory.class, modelFactory, org.osgi.framework.Constants.SERVICE_RANKING,\n+                Integer.MAX_VALUE);\n+\n         ctx.registerService(HttpClientBuilderFactory.class, httpClientBuilderFactory);\n \n         ctx.registerService(AssetRenditionDispatchers.class, new AssetRenditionDispatchersImpl());\n@@ -92,6 +95,8 @@ public void setUp() {\n \n         ctx.registerInjectActivateService(new AssetRenditionsZipperImpl());\n \n+        ctx.registerInjectActivateService(new ActionHelperImpl());\n+\n         ctx.registerInjectActivateService(new ServletHelperImpl());\n \n         ctx.registerInjectActivateService(\n@@ -104,8 +109,7 @@ public void setUp() {\n                         put(\"rendition.mappings\", new String[]{ \"test=original\" }).\n                         build());\n \n-        ctx.registerService(ModelFactory.class, modelFactory, org.osgi.framework.Constants.SERVICE_RANKING,\n-                Integer.MAX_VALUE);\n+        RequireAemMock.setAemDistribution(ctx, RequireAem.Distribution.CLASSIC);\n \n         ctx.request().setRequestDispatcherFactory(new MockRequestDispatcherFactory() {\n             @Override\n@@ -120,33 +124,6 @@ public RequestDispatcher getRequestDispatcher(Resource resource, RequestDispatch\n         });\n     }\n \n-    @Test\n-    public void getAssets() {\n-        ctx.registerInjectActivateService(new AssetRenditionsDownloadServlet());\n-\n-        AssetRenditionsDownloadServlet servlet = (AssetRenditionsDownloadServlet) ctx.getService(Servlet.class);\n-\n-        ctx.request().setQueryString(\"path=/content/dam/test.png&path=/content/dam/test-2.png&path=/content/dam/test-3.png\");\n-\n-        List<com.adobe.aem.commons.assetshare.content.AssetModel> actual = servlet.getAssets(ctx.request());\n-\n-        assertEquals(1, actual.size());\n-        assertEquals(\"/content/dam/test.png\", actual.get(0).getPath());\n-    }\n-\n-    @Test\n-    public void getRenditionNames() {\n-        ctx.registerInjectActivateService(new AssetRenditionsDownloadServlet());\n-        AssetRenditionsDownloadServlet servlet = (AssetRenditionsDownloadServlet) ctx.getService(Servlet.class);\n-\n-        ctx.currentResource(\"/content/allowed-rendition-names\");\n-        ctx.request().setQueryString(\"renditionName=one&renditionName=four\");\n-\n-        List<String> actual = servlet.getRenditionNames(ctx.request());\n-        assertEquals(1, actual.size());\n-        assertEquals(\"one\", actual.get(0));\n-    }\n-\n     @Test\n     public void doPost() throws ServletException, IOException {\n         final byte[] expectedOutputStream = IOUtils.toByteArray(this.getClass().getResourceAsStream(\"AssetRenditionsDownloadServletTest__original.png\"));"
  }
]
