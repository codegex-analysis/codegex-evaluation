[
  {
    "sha": "53a7c7ed4991f3c747690c886ec9b843f111463a",
    "filename": "src/main/java/csc131/junit/GiftCardTest.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/azizijonespenn2/JUnitLab_Begin/blob/81b72832975bcdf78d5e20cbd9b267df894ab1c6/src/main/java/csc131/junit/GiftCardTest.java",
    "raw_url": "https://github.com/azizijonespenn2/JUnitLab_Begin/raw/81b72832975bcdf78d5e20cbd9b267df894ab1c6/src/main/java/csc131/junit/GiftCardTest.java",
    "contents_url": "https://api.github.com/repos/azizijonespenn2/JUnitLab_Begin/contents/src/main/java/csc131/junit/GiftCardTest.java?ref=81b72832975bcdf78d5e20cbd9b267df894ab1c6",
    "patch": "@@ -0,0 +1,124 @@\n+package csc131.junit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+import org.junit.Test; \n+import org.junit.rules.ExpectedException; \n+\n+public class GiftCardTest {     \n+\t\n+\t@Test     \n+\tpublic void getIssuingStore() { \n+\t\tdouble  balance;\n+\t\tint issuingStore; \n+\t\tissuingStore = 1337; \n+\t\tbalance = 100.00; \n+\t\tGiftCard card; \n+\t\tcard = new GiftCard(issuingStore, balance); \n+\t\tassertEquals(\"getIssuingStore()\",  issuingStore, card.getIssuingStore());    \n+\t\t} \n+\t\n+\t@Test\n+\tpublic void getBalance()\n+\t{\n+\t\tdouble balance;\n+\t\tbalance = 100.00;\n+\t\t\n+\t\tint issuingStore;\n+\t\tissuingStore = 1337;\n+\t\t\n+\t\tGiftCard card;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\tassertEquals(\"getBalance()\", balance, card.getBalance(), 0.001);\n+\t}\n+\n+\t@Test\n+\n+\tpublic void deduct_RemainingBalance()\n+\t{\n+\t\tdouble balance;\n+\t\tbalance = 100.00;\n+\n+\t\tint issuingStore;\n+\t\tissuingStore = 1337;\n+\n+\t\tGiftCard card;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\n+\t\tassertEquals(\"getBalance()\", \"Remaining Balance:  80.01\", card.deduct(19.99));\n+\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * if the amount of the total bill is greater than the balance on the gift-card, the\n+\t * remaining amount is the amount due\n+\t */\n+\t\n+\t@Test\n+\tpublic void deduct_TotalBill() \n+\t{\n+\t\tdouble balance;\n+\t\tbalance = 75.00;\n+\t\t\n+\t\tString remaining; \n+\t\n+\t\tint issuingStore;\n+\t\tissuingStore = 1337;\n+\t\t\t\t\n+\t\tGiftCard card;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\tremaining = \"Amount Due: \" + String.format(\"%6.2f\", 15.00);\n+\t\tassertEquals(\"getBalance()\", remaining, card.deduct(90.00));\n+\t}\n+\t\n+\t\n+\t/**\n+\t * if there was an error and a negative amount was entered to be deducted\n+\t * from the gift-card it would display \"Invalid transaction\"\n+\t */\n+\t\n+\t@Test\n+\tpublic void deduct_InvalidAmount() \n+\t{\n+\t\tdouble balance;\n+\t\tbalance = 100.00;\n+\t\t\n+\t\tint issuingStore;\n+\t\tissuingStore = 1337;\n+\t\t\n+\t\tString errorMsg;\n+\t\t\n+\t\tGiftCard card;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\t\n+\t\terrorMsg = \"Invalid Transaction\";\n+\t\tassertEquals(\"getBalance()\", errorMsg, card.deduct(-10.00));\n+\t}\n+\t\n+\t@Test\n+\tpublic void constructor_IllegalBalance() {\n+\tassertThrows(IllegalArgumentException.class,() -> {\n+\t\tnew GiftCard(1, -100.00);\n+\t\t});\n+\t\t\t\n+\t\t}\n+\t\n+\t@Test\n+\tpublic void constructor_IncorrectID_Low()\n+\t{\n+\t\tassertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tnew GiftCard(-1,100.00);});\n+\t}\n+\t\n+\t@Test\n+\tpublic void constructor_IncorrectID_High() \n+\t{\n+\t\tassertThrows(IllegalArgumentException.class,() -> {\n+\t\t\tnew GiftCard(100000, 100.00);\n+\t\t});\n+\t\t\t\n+\t\t}\n+\t\n+\t} //end GiftCardTest \n\\ No newline at end of file"
  }
]
