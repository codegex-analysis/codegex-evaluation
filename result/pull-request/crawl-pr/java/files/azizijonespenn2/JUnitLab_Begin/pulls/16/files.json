[
  {
    "sha": "1ebc857d41ef0315a148b21723db477290ce5830",
    "filename": "src/main/java/csc131/junit/GiftCardTest.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/azizijonespenn2/JUnitLab_Begin/blob/89e167c9c2f7b0d7869348820c7d62d95789fdb1/src/main/java/csc131/junit/GiftCardTest.java",
    "raw_url": "https://github.com/azizijonespenn2/JUnitLab_Begin/raw/89e167c9c2f7b0d7869348820c7d62d95789fdb1/src/main/java/csc131/junit/GiftCardTest.java",
    "contents_url": "https://api.github.com/repos/azizijonespenn2/JUnitLab_Begin/contents/src/main/java/csc131/junit/GiftCardTest.java?ref=89e167c9c2f7b0d7869348820c7d62d95789fdb1",
    "patch": "@@ -0,0 +1,122 @@\n+package csc131.junit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+import org.junit.Test;\n+//import org.junit.rules.ExpectedException;\n+\n+\n+public class GiftCardTest {\n+\n+\t@Test\n+\tpublic void getIssuingStore()\n+\t{\n+\t\tdouble       balance;\n+\t\tGiftCard     card; \n+\t\tint          issuingStore;\n+\t\t\n+\t\tissuingStore = 1337; \n+\t\tbalance      = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance); \n+\t\t\n+\t\tassertEquals(\"getIssuingStore()\", issuingStore, card.getIssuingStore());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void getBalance()\n+\t{\n+\t\tdouble       balance;\n+\t\tGiftCard     card; \n+\t\tint          issuingStore;\n+\t\t\n+\t\tissuingStore = 1337; \n+\t\tbalance      = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\t\n+\t\tassertEquals(\"getBalance()\", balance, card.getBalance(), 0.001);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void deduct_RemainingBalance()\n+\t{\n+\t\tdouble       balance;\n+\t\tGiftCard     card; \n+\t\tint          issuingStore;\n+\t\tString\t\t s;\n+\t\t\n+\t\tissuingStore = 1337; \n+\t\tbalance      = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\t\n+\t\ts = \"Remaining Balance: \" + String.format(\"%6.2f\", 90.00);\n+\t\tSystem.out.println(s);\n+\t\tassertEquals(\"deduct(10.00)\", s, card.deduct(10.0));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void deduct_AmountDue()\n+\t{\n+\t\tdouble       balance;\n+\t\tGiftCard     card; \n+\t\tint          issuingStore;\n+\t\tString\t\t s;\n+\t\t\n+\t\tissuingStore = 1337; \n+\t\tbalance      = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\t\n+\t\ts = \"Amount Due: \" + String.format(\"%6.2f\", 10.00);\n+\t\tSystem.out.println(s);\n+\t\tassertEquals(\"deduct 110.00 from 100.00\", s, card.deduct(110.0));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deduct_InvalidTransaction()\n+\t{\n+\t\tdouble       balance;\n+\t\tGiftCard     card; \n+\t\tint          issuingStore;\n+\t\tString\t\t s;\n+\t\t\n+\t\tissuingStore = 1337; \n+\t\tbalance      = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\t\n+\t\ts = \"Invalid Transaction\";\n+\t\tassertEquals(\"deduct -10.00 from 100.00\", s, card.deduct(-10.0));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testExc()\n+\t{\n+\t\tassertThrows(IllegalArgumentException.class, () -> {new GiftCard(1,-100.00);});\n+\t}\n+\t\n+\t//(expected = IllegalArgumentException.class)\n+\t//public void constructor_IncorrectBalance() throws IllegalArgumentException\n+\t//{\n+\t//\tnew GiftCard(1, -100.00);\n+\t//}\n+\t//assertThrows(IllegalArgumentException.class, () -> {new GiftCard(1,-100.00);});\n+\t\n+\t\n+\t@Test\n+\tpublic void constructor_IncorrectID_Low()\n+\t{\n+\t\tassertThrows(IllegalArgumentException.class, () -> {new GiftCard(-1,100.00);});\n+\t\t//new GiftCard(-1, 100.00);\n+\t}\n+\t\n+\t@Test\n+\tpublic void constructor_IncorrectID_High()\n+\t{\n+\t\tassertThrows(IllegalArgumentException.class, () -> {new GiftCard(100000000,100.00);});\n+\t\t//new GiftCard(100000, 100.00);\n+\t}\n+\t\n+\t\n+}"
  }
]
