[
  {
    "sha": "9c99456cb34a796c28fc0fd77477ac84ad01e106",
    "filename": "src/main/java/csc131/junit/GiftCardTest.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/azizijonespenn2/JUnitLab_Begin/blob/52e4d8553f324831099df4f7ae7767a79da78071/src/main/java/csc131/junit/GiftCardTest.java",
    "raw_url": "https://github.com/azizijonespenn2/JUnitLab_Begin/raw/52e4d8553f324831099df4f7ae7767a79da78071/src/main/java/csc131/junit/GiftCardTest.java",
    "contents_url": "https://api.github.com/repos/azizijonespenn2/JUnitLab_Begin/contents/src/main/java/csc131/junit/GiftCardTest.java?ref=52e4d8553f324831099df4f7ae7767a79da78071",
    "patch": "@@ -0,0 +1,113 @@\n+package csc131.junit;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals; \n+import org.junit.rules.ExpectedException; \n+import org.junit.Test;\n+\n+public class GiftCardTest {\n+\n+\t@Test\n+\tpublic void testGetIssuingStore() {\n+\t\tdouble balance;\n+\t\tGiftCard card;\n+\t\tint issuingStore;\n+\n+\t\tissuingStore = 1337;\n+\t\tbalance = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\n+\t\tassertEquals(\"getIssuingStore()\", issuingStore, card.getIssuingStore());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void getBalance()\n+\t{\n+\t\tdouble balance;\n+\t\tGiftCard card;\n+\t\tint issuingStore;\n+\t\t\n+\t\tissuingStore = 1337;\n+\t\tbalance = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\t\n+\t\tassertEquals(\"getBalance()\", balance, card.getBalance(), 0.001);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deduct_RemainingBalance()\n+\t{\n+\t\tdouble balance;\n+\t\tGiftCard card;\n+\t\tint issuingStore;\n+\t\tString s;\n+\t\t\n+\t\tissuingStore = 1337;\n+\t\tbalance = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\ts = \"Remaining Balance: \" + String.format(\"%6.2f\", 90.0);\n+\t\t\n+\t\tassertEquals(\"deduct(10.00)\", s, card.deduct(10.0));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deduct_AmountDue()\n+\t{\n+\t\tdouble balance;\n+\t\tGiftCard card;\n+\t\tint issuingStore;\n+\t\tString s;\n+\t\t\n+\t\tissuingStore = 1337;\n+\t\tbalance = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\ts = \"Amount Due: \" + String.format(\"%6.2f\", 10.0);\n+\t\t\n+\t\tassertEquals(\"deduct 110 from 100\", s, card.deduct(110.0));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deduct_InvalidTransaction()\n+\t{\n+\t\tdouble balance;\n+\t\tGiftCard card;\n+\t\tint issuingStore;\n+\t\tString s;\n+\t\t\n+\t\tissuingStore = 1337;\n+\t\tbalance = 100.00;\n+\t\tcard = new GiftCard(issuingStore, balance);\n+\t\ts = \"Invalid Transaction\";\n+\t\t\n+\t\tassertEquals(\"deduct -10.00 from 100\", s, card.deduct(-10.0));\n+\t}\n+\t\n+\t \n+\t @Test\n+\t public void testException()\n+\t {\n+\t\t assertThrows(IllegalArgumentException.class, () -> {new GiftCard(1,-100.00);});\n+\t }\n+\t \n+\t \n+\t \n+\t @Test\n+\t public void constructor_IncorrectID_Low() \n+\t {\n+\t\t\tassertThrows(IllegalArgumentException.class, () -> {new GiftCard(-1, 9999);});\n+\t }\n+\n+\t @Test\n+\t public void constructor_IncorrectID_High() \n+\t {\n+\t\t\n+\t\t\tassertThrows(IllegalArgumentException.class, () -> {new GiftCard(100000, 100.00);});\n+\t }\n+\t \n+}\n+\n+\n+\n+\n+"
  }
]
