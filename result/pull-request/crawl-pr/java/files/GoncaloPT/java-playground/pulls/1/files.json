[
  {
    "sha": "15ef4f57a82085d792c17cfc187b1141f8da4b08",
    "filename": "CodeChallenges/src/main/java/strings/Palindrome.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/GoncaloPT/java-playground/blob/137faa615c799154e4ef2876d93f40ef00d74e8a/CodeChallenges/src/main/java/strings/Palindrome.java",
    "raw_url": "https://github.com/GoncaloPT/java-playground/raw/137faa615c799154e4ef2876d93f40ef00d74e8a/CodeChallenges/src/main/java/strings/Palindrome.java",
    "contents_url": "https://api.github.com/repos/GoncaloPT/java-playground/contents/CodeChallenges/src/main/java/strings/Palindrome.java?ref=137faa615c799154e4ef2876d93f40ef00d74e8a",
    "patch": "@@ -12,4 +12,13 @@ public boolean isPalindrome(String word){\n         }\n         return true;\n     }\n+\n+    public boolean isPalindromeRecursive(String word) {\n+        if(word.length() <= 1)\n+            return true;\n+        if(word.charAt(0) != word.charAt(word.length() - 1))\n+            return false;\n+        String nextWord = word.substring(1, word.length() - 1);\n+        return isPalindromeRecursive(nextWord);\n+    }\n }"
  }
]
