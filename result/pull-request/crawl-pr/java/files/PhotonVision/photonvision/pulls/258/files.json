[
  {
    "sha": "1d25962a2de5e3b780c077287d17fca7559309d4",
    "filename": "photon-client/src/components/common/cv-range-slider.vue",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/components/common/cv-range-slider.vue",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/components/common/cv-range-slider.vue",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/components/common/cv-range-slider.vue?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -15,6 +15,7 @@\n           :value=\"localValue\"\n           :max=\"max\"\n           :min=\"min\"\n+          :disabled=\"disabled\"\n           hide-details\n           class=\"align-center\"\n           dark\n@@ -34,7 +35,7 @@\n               hide-details\n               single-line\n               type=\"number\"\n-              style=\"width: 50px\"\n+              style=\"width: 60px\"\n               :step=\"step\"\n               @input=\"handleChange\"\n               @focus=\"prependFocused = true\"\n@@ -53,7 +54,7 @@\n               hide-details\n               single-line\n               type=\"number\"\n-              style=\"width: 50px\"\n+              style=\"width: 60px\"\n               :step=\"step\"\n               @input=\"handleChange\"\n               @focus=\"appendFocused = true\"\n@@ -75,7 +76,7 @@ export default {\n     TooltippedLabel,\n   },\n   // eslint-disable-next-line vue/require-prop-types\n-  props: [\"name\", \"min\", \"max\", \"value\", \"step\", \"tooltip\"],\n+  props: [\"name\", \"min\", \"max\", \"value\", \"step\", \"tooltip\", \"disabled\"],\n   data() {\n     return {\n       prependFocused: false,"
  },
  {
    "sha": "ad2e258a388f6ab4c263c320d1c9d7c02a2612c6",
    "filename": "photon-client/src/components/pipeline/CameraAndPipelineSelect.vue",
    "status": "modified",
    "additions": 281,
    "deletions": 252,
    "changes": 533,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/components/pipeline/CameraAndPipelineSelect.vue",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/components/pipeline/CameraAndPipelineSelect.vue",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/components/pipeline/CameraAndPipelineSelect.vue?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -2,170 +2,184 @@\n   <div>\n     <v-row align=\"center\">\n       <v-col\n-        cols=\"10\"\n-        md=\"5\"\n-        lg=\"10\"\n-        class=\"pt-0 pb-0 pl-6\"\n+          cols=\"10\"\n+          md=\"5\"\n+          lg=\"10\"\n+          class=\"pt-0 pb-0 pl-6\"\n       >\n         <CVselect\n-          v-if=\"isCameraNameEdit === false\"\n-          v-model=\"currentCameraIndex\"\n-          name=\"Camera\"\n-          :list=\"$store.getters.cameraList\"\n-          @input=\"handleInput('currentCamera',currentCameraIndex)\"\n+            v-if=\"isCameraNameEdit === false\"\n+            v-model=\"currentCameraIndex\"\n+            name=\"Camera\"\n+            :list=\"$store.getters.cameraList\"\n+            @input=\"handleInput('currentCamera',currentCameraIndex)\"\n         />\n         <CVinput\n-          v-else\n-          v-model=\"newCameraName\"\n-          name=\"Camera\"\n-          input-cols=\"9\"\n-          :error-message=\"checkCameraName\"\n-          @Enter=\"saveCameraNameChange\"\n+            v-else\n+            v-model=\"newCameraName\"\n+            name=\"Camera\"\n+            input-cols=\"9\"\n+            :error-message=\"checkCameraName\"\n+            @Enter=\"saveCameraNameChange\"\n         />\n       </v-col>\n       <v-col\n-        cols=\"2\"\n-        md=\"1\"\n-        lg=\"2\"\n+          cols=\"2\"\n+          md=\"1\"\n+          lg=\"2\"\n       >\n         <CVicon\n-          v-if=\"isCameraNameEdit === false\"\n-          color=\"#c5c5c5\"\n-          :hover=\"true\"\n-          text=\"edit\"\n-          tooltip=\"Edit camera name\"\n-          @click=\"changeCameraName\"\n+            v-if=\"isCameraNameEdit === false\"\n+            color=\"#c5c5c5\"\n+            :hover=\"true\"\n+            text=\"edit\"\n+            tooltip=\"Edit camera name\"\n+            @click=\"changeCameraName\"\n         />\n         <div v-else>\n           <CVicon\n-            color=\"#c5c5c5\"\n-            style=\"display: inline-block;\"\n-            :hover=\"true\"\n-            text=\"save\"\n-            tooltip=\"Save Camera Name\"\n-            @click=\"saveCameraNameChange\"\n+              color=\"#c5c5c5\"\n+              style=\"display: inline-block;\"\n+              :hover=\"true\"\n+              text=\"save\"\n+              tooltip=\"Save Camera Name\"\n+              @click=\"saveCameraNameChange\"\n           />\n           <CVicon\n-            color=\"error\"\n-            style=\"display: inline-block;\"\n-            :hover=\"true\"\n-            text=\"close\"\n-            tooltip=\"Discard Changes\"\n-            @click=\"discardCameraNameChange\"\n+              color=\"error\"\n+              style=\"display: inline-block;\"\n+              :hover=\"true\"\n+              text=\"close\"\n+              tooltip=\"Discard Changes\"\n+              @click=\"discardCameraNameChange\"\n           />\n         </div>\n       </v-col>\n       <v-col\n-        cols=\"10\"\n-        md=\"5\"\n-        lg=\"10\"\n-        class=\"pt-0 pb-0 pl-6\"\n+          cols=\"10\"\n+          md=\"5\"\n+          lg=\"10\"\n+          class=\"pt-0 pb-0 pl-6\"\n       >\n         <CVselect\n-          v-model=\"currentPipelineIndex\"\n-          name=\"Pipeline\"\n-          tooltip=\"Each pipeline runs on a camera output and stores a unique set of processing settings\"\n-          :disabled=\"$store.getters.isDriverMode\"\n-          :list=\"($store.getters.isDriverMode ? ['Driver Mode'] : []).concat($store.getters.pipelineList)\"\n-          @input=\"handleInputWithIndex('currentPipeline', currentPipelineIndex)\"\n+            v-model=\"currentPipelineIndex\"\n+            name=\"Pipeline\"\n+            tooltip=\"Each pipeline runs on a camera output and stores a unique set of processing settings\"\n+            :disabled=\"$store.getters.isDriverMode\"\n+            :list=\"($store.getters.isDriverMode ? ['Driver Mode'] : []).concat($store.getters.pipelineList)\"\n+            @input=\"handleInputWithIndex('currentPipeline', currentPipelineIndex)\"\n         />\n       </v-col>\n       <v-col\n-        cols=\"2\"\n-        md=\"1\"\n-        lg=\"2\"\n+          cols=\"2\"\n+          md=\"1\"\n+          lg=\"2\"\n       >\n         <v-menu\n-          v-if=\"!$store.getters.isDriverMode\"\n-          offset-y\n-          auto\n+            v-if=\"!$store.getters.isDriverMode\"\n+            offset-y\n+            auto\n         >\n           <template v-slot:activator=\"{ on }\">\n             <v-icon\n-              color=\"#c5c5c5\"\n-              v-on=\"on\"\n+                color=\"#c5c5c5\"\n+                v-on=\"on\"\n             >\n               menu\n             </v-icon>\n           </template>\n-          <v-list dense>\n+          <v-list dark dense color=\"primary\">\n             <v-list-item @click=\"toPipelineNameChange\">\n               <v-list-item-title>\n                 <CVicon\n-                  color=\"#c5c5c5\"\n-                  :right=\"true\"\n-                  text=\"edit\"\n-                  tooltip=\"Edit pipeline name\"\n+                    color=\"#c5c5c5\"\n+                    :right=\"true\"\n+                    text=\"edit\"\n+                    tooltip=\"Edit pipeline name\"\n                 />\n               </v-list-item-title>\n             </v-list-item>\n             <v-list-item @click=\"toCreatePipeline\">\n               <v-list-item-title>\n                 <CVicon\n-                  color=\"#c5c5c5\"\n-                  :right=\"true\"\n-                  text=\"add\"\n-                  tooltip=\"Add new pipeline\"\n+                    color=\"#c5c5c5\"\n+                    :right=\"true\"\n+                    text=\"add\"\n+                    tooltip=\"Add new pipeline\"\n                 />\n               </v-list-item-title>\n             </v-list-item>\n             <v-list-item @click=\"deleteCurrentPipeline\">\n               <v-list-item-title>\n                 <CVicon\n-                  color=\"red darken-2\"\n-                  :right=\"true\"\n-                  text=\"delete\"\n-                  tooltip=\"Delete pipeline\"\n+                    color=\"red darken-2\"\n+                    :right=\"true\"\n+                    text=\"delete\"\n+                    tooltip=\"Delete pipeline\"\n                 />\n               </v-list-item-title>\n             </v-list-item>\n             <v-list-item @click=\"openDuplicateDialog\">\n               <v-list-item-title>\n                 <CVicon\n-                  color=\"#c5c5c5\"\n-                  :right=\"true\"\n-                  text=\"mdi-content-copy\"\n-                  tooltip=\"Duplicate pipeline\"\n+                    color=\"#c5c5c5\"\n+                    :right=\"true\"\n+                    text=\"mdi-content-copy\"\n+                    tooltip=\"Duplicate pipeline\"\n                 />\n               </v-list-item-title>\n             </v-list-item>\n           </v-list>\n         </v-menu>\n       </v-col>\n+      <v-col\n+          cols=\"10\"\n+          md=\"5\"\n+          lg=\"10\"\n+          class=\"pt-0 pb-0 pl-6 ml-16\"\n+          v-if=\"currentPipelineType >= 0\"\n+      >\n+        <CVselect\n+            name=\"Type\"\n+            v-model=\"currentPipelineType\"\n+            :list=\"['Reflective', 'Shape']\"\n+            @input=\"handleInput('pipelineType',currentCameraIndex)\"\n+        />\n+      </v-col>\n     </v-row>\n     <!--pipeline duplicate dialog-->\n     <v-dialog\n-      v-model=\"duplicateDialog\"\n-      dark\n-      width=\"500\"\n-      height=\"357\"\n+        v-model=\"duplicateDialog\"\n+        dark\n+        width=\"500\"\n+        height=\"357\"\n     >\n-      <v-card dark>\n+      <v-card>\n         <v-card-title\n-          class=\"headline\"\n-          primary-title\n+            class=\"headline\"\n+            primary-title\n         >\n           Duplicate Pipeline\n         </v-card-title>\n         <v-card-text>\n           <CVselect\n-            v-model=\"pipeIndexToDuplicate\"\n-            name=\"Pipeline\"\n-            :list=\"$store.getters.pipelineList\"\n+              v-model=\"pipeIndexToDuplicate\"\n+              name=\"Pipeline\"\n+              :list=\"$store.getters.pipelineList\"\n           />\n         </v-card-text>\n-        <v-divider />\n+        <v-divider/>\n         <v-card-actions>\n-          <v-spacer />\n+          <v-spacer/>\n           <v-btn\n-            color=\"#ffd843\"\n-            @click=\"duplicatePipeline\"\n+              color=\"#ffd843\"\n+              @click=\"duplicatePipeline\"\n           >\n             Duplicate\n           </v-btn>\n           <v-btn\n-            color=\"error\"\n-            @click=\"closeDuplicateDialog\"\n+              color=\"error\"\n+              @click=\"closeDuplicateDialog\"\n           >\n             Cancel\n           </v-btn>\n@@ -174,39 +188,48 @@\n     </v-dialog>\n     <!--pipeline naming dialog-->\n     <v-dialog\n-      v-model=\"namingDialog\"\n-      dark\n-      width=\"500\"\n-      height=\"357\"\n+        v-model=\"namingDialog\"\n+        dark\n+        persistent\n+        width=\"500\"\n+        height=\"357\"\n     >\n-      <v-card dark>\n+      <v-card\n+          dark\n+          color=\"primary\"\n+      >\n         <v-card-title\n-          class=\"headline\"\n-          primary-title\n+            class=\"headline\"\n+            primary-title\n         >\n-          Pipeline Name\n+          {{ isPipelineNameEdit ? \"Edit Pipeline Name\" : \"Create Pipeline\" }}\n         </v-card-title>\n         <v-card-text>\n           <CVinput\n-            v-model=\"newPipelineName\"\n-            name=\"Pipeline\"\n-            :error-message=\"checkPipelineName\"\n-            @Enter=\"savePipelineNameChange\"\n+              v-model=\"newPipelineName\"\n+              name=\"Pipeline\"\n+              :error-message=\"checkPipelineName\"\n+          />\n+          <CVselect\n+              v-model=\"newPipelineType\"\n+              name=\"Pipeline Type\"\n+              :list=\"['Reflective', 'Shape']\"\n+              :disabled=\"isPipelineNameEdit\"\n           />\n         </v-card-text>\n-        <v-divider />\n+        <v-divider/>\n         <v-card-actions>\n-          <v-spacer />\n+          <v-spacer/>\n           <v-btn\n-            color=\"#ffd843\"\n-            :disabled=\"checkPipelineName !==''\"\n-            @click=\"savePipelineNameChange\"\n+              color=\"#ffd843\"\n+              :disabled=\"checkPipelineName !==''\"\n+              @click=\"savePipelineNameChange\"\n           >\n             Save\n           </v-btn>\n           <v-btn\n-            color=\"error\"\n-            @click=\"discardPipelineNameChange\"\n+              color=\"error\"\n+              @click=\"discardPipelineNameChange\"\n           >\n             Cancel\n           </v-btn>\n@@ -217,157 +240,163 @@\n </template>\n \n <script>\n-    import CVicon from '../common/cv-icon'\n-    import CVselect from '../common/cv-select'\n-    import CVinput from '../common/cv-input'\n+import CVicon from '../common/cv-icon'\n+import CVselect from '../common/cv-select'\n+import CVinput from '../common/cv-input'\n \n-    export default {\n-        name: \"CameraAndPipelineSelect\",\n-        components: {\n-            CVicon,\n-            CVselect,\n-            CVinput\n-        },\n-        data: () => {\n-            return {\n-                re: RegExp(\"^[A-Za-z0-9 \\\\-)(]*[A-Za-z0-9][A-Za-z0-9 \\\\-)(.]*$\"),\n-                isCameraNameEdit: false,\n-                newCameraName: \"\",\n-                cameraNameError: \"\",\n-                isPipelineNameEdit: false,\n-                namingDialog: false,\n-                newPipelineName: \"\",\n-                duplicateDialog: false,\n-                pipeIndexToDuplicate: undefined\n+export default {\n+  name: \"CameraAndPipelineSelect\",\n+  components: {\n+    CVicon,\n+    CVselect,\n+    CVinput\n+  },\n+  data: () => {\n+    return {\n+      re: RegExp(\"^[A-Za-z0-9 \\\\-)(]*[A-Za-z0-9][A-Za-z0-9 \\\\-)(.]*$\"),\n+      isCameraNameEdit: false,\n+      newCameraName: \"\",\n+      cameraNameError: \"\",\n+      isPipelineNameEdit: false,\n+      namingDialog: false,\n+      newPipelineName: \"\",\n+      newPipelineType: \"\",\n+      duplicateDialog: false,\n+      pipeIndexToDuplicate: undefined\n+    }\n+  },\n+  computed: {\n+    checkCameraName() {\n+      if (this.newCameraName !== this.$store.getters.cameraList[this.currentCameraIndex]) {\n+        if (this.re.test(this.newCameraName)) {\n+          for (let cam in this.cameraList) {\n+            if (this.cameraList.hasOwnProperty(cam)) {\n+              if (this.newCameraName === this.cameraList[cam]) {\n+                return \"A camera by that name already Exists\"\n+              }\n             }\n-        },\n-        computed: {\n-            checkCameraName() {\n-                if (this.newCameraName !== this.$store.getters.cameraList[this.currentCameraIndex]) {\n-                    if (this.re.test(this.newCameraName)) {\n-                        for (let cam in this.cameraList) {\n-                            if (this.cameraList.hasOwnProperty(cam)) {\n-                                if (this.newCameraName === this.cameraList[cam]) {\n-                                    return \"A camera by that name already Exists\"\n-                                }\n-                            }\n-                        }\n-                    } else {\n-                        return \"A camera name can only contain letters, numbers and spaces\"\n-                    }\n-                }\n-                return \"\";\n-            },\n-            checkPipelineName() {\n-                if (this.newPipelineName !== this.$store.getters.pipelineList[this.currentPipelineIndex - 1] || this.isPipelineNameEdit === false) {\n-                    if (this.re.test(this.newPipelineName)) {\n-                        for (let pipe in this.$store.getters.pipelineList) {\n-                            if (this.$store.getters.pipelineList.hasOwnProperty(pipe)) {\n-                                if (this.newPipelineName === this.$store.getters.pipelineList[pipe]) {\n-                                    return \"A pipeline with this name already exists\"\n-                                }\n-                            }\n-                        }\n-                    } else {\n-                        return \"A pipeline name can only contain letters, numbers, and spaces\"\n-                    }\n-                }\n-                return \"\"\n-            },\n-            currentCameraIndex: {\n-                get() {\n-                    return this.$store.getters.currentCameraIndex;\n-                },\n-                set(value) {\n-                    this.$store.commit('currentCameraIndex', value);\n-                }\n-            },\n-            currentPipelineIndex: {\n-                get() {\n-                    return this.$store.getters.currentPipelineIndex + (this.$store.getters.isDriverMode ? 1 : 0);\n-                },\n-                set(value) {\n-                    this.$store.commit('currentPipelineIndex', value - (this.$store.getters.isDriverMode ? 1 : 0));\n-                }\n+          }\n+        } else {\n+          return \"A camera name can only contain letters, numbers and spaces\"\n+        }\n+      }\n+      return \"\";\n+    },\n+    checkPipelineName() {\n+      if (this.newPipelineName !== this.$store.getters.pipelineList[this.currentPipelineIndex - 1] || this.isPipelineNameEdit === false) {\n+        if (this.re.test(this.newPipelineName)) {\n+          for (let pipe in this.$store.getters.pipelineList) {\n+            if (this.$store.getters.pipelineList.hasOwnProperty(pipe)) {\n+              if (this.newPipelineName === this.$store.getters.pipelineList[pipe]) {\n+                return \"A pipeline with this name already exists\"\n+              }\n             }\n-        },\n-        methods: {\n-            changeCameraName() {\n-                this.newCameraName = this.$store.getters.cameraList[this.currentCameraIndex];\n-                this.isCameraNameEdit = true;\n-            },\n-            saveCameraNameChange() {\n-                if (this.checkCameraName === \"\") {\n-                    // this.handleInputWithIndex(\"changeCameraName\", this.newCameraName);\n-                    this.axios.post('http://' + this.$address + '/api/setCameraNickname',\n-                        {name: this.newCameraName, cameraIndex: this.$store.getters.currentCameraIndex})\n-                        // eslint-disable-next-line\n-                        .then(r => {\n-                            this.$emit('camera-name-changed')\n-                        })\n-                        .catch(e => {\n-                            console.log(\"HTTP error while changing camera name \" + e);\n-                            this.$emit('camera-name-changed')\n-                        })\n-                    this.discardCameraNameChange();\n-                }\n-            },\n-            discardCameraNameChange() {\n-                this.isCameraNameEdit = false;\n-                this.newCameraName = \"\";\n-            },\n-            toPipelineNameChange() {\n-                this.newPipelineName = this.$store.getters.pipelineList[this.currentPipelineIndex - 1];\n-                this.isPipelineNameEdit = true;\n-                this.namingDialog = true;\n-            },\n-            toCreatePipeline() {\n-                this.newPipelineName = \"New Pipeline\";\n-                this.isPipelineNameEdit = false;\n-                this.namingDialog = true;\n-            },\n-            openDuplicateDialog() {\n-                this.pipeIndexToDuplicate = this.currentPipelineIndex - 1;\n-                this.duplicateDialog = true;\n-            },\n-            deleteCurrentPipeline() {\n-                if (this.$store.getters.pipelineList.length > 1) {\n-                    this.handleInputWithIndex('deleteCurrentPipeline', {});\n-                } else {\n-                    this.snackbar = true;\n-                }\n-            },\n-            savePipelineNameChange() {\n-                if (this.checkPipelineName === \"\") {\n-                    if (this.isPipelineNameEdit) {\n-                        this.handleInputWithIndex(\"changePipelineName\", this.newPipelineName);\n-                    } else {\n-                        this.handleInputWithIndex(\"addNewPipeline\", this.newPipelineName);\n-                    }\n-                    this.discardPipelineNameChange();\n-                }\n-            },\n-            duplicatePipeline() {\n-                // if (!this.anotherCamera) {\n-                //     this.pipelineDuplicate.camera = -1\n-                // }\n-                this.handleInputWithIndex(\"duplicatePipeline\", this.pipeIndexToDuplicate);\n-                // this.axios.post(\"http://\" + this.$address + \"/api/vision/duplicate\", this.pipeIndexToDuplicate);\n-\n-                this.closeDuplicateDialog();\n-            },\n-            closeDuplicateDialog() {\n-                this.duplicateDialog = false;\n-                this.pipeIndexToDuplicate = undefined;\n-            },\n-            discardPipelineNameChange() {\n-                this.namingDialog = false;\n-                this.isPipelineNameEdit = false;\n-                this.newPipelineName = \"\";\n-            },\n+          }\n+        } else {\n+          return \"A pipeline name can only contain letters, numbers, and spaces\"\n         }\n-\n+      }\n+      return \"\"\n+    },\n+    currentCameraIndex: {\n+      get() {\n+        return this.$store.getters.currentCameraIndex;\n+      },\n+      set(value) {\n+        this.$store.commit('currentCameraIndex', value);\n+      }\n+    },\n+    currentPipelineIndex: {\n+      get() {\n+        return this.$store.getters.currentPipelineIndex + (this.$store.getters.isDriverMode ? 1 : 0);\n+      },\n+      set(value) {\n+        this.$store.commit('currentPipelineIndex', value - (this.$store.getters.isDriverMode ? 1 : 0));\n+      }\n+    },\n+    currentPipelineType: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.pipelineType - 2;\n+      }\n     }\n+  },\n+  methods: {\n+    changeCameraName() {\n+      this.newCameraName = this.$store.getters.cameraList[this.currentCameraIndex];\n+      this.isCameraNameEdit = true;\n+    },\n+    saveCameraNameChange() {\n+      if (this.checkCameraName === \"\") {\n+        // this.handleInputWithIndex(\"changeCameraName\", this.newCameraName);\n+        this.axios.post('http://' + this.$address + '/api/setCameraNickname',\n+            {name: this.newCameraName, cameraIndex: this.$store.getters.currentCameraIndex})\n+            // eslint-disable-next-line\n+            .then(r => {\n+              this.$emit('camera-name-changed')\n+            })\n+            .catch(e => {\n+              console.log(\"HTTP error while changing camera name \" + e);\n+              this.$emit('camera-name-changed')\n+            })\n+        this.discardCameraNameChange();\n+      }\n+    },\n+    discardCameraNameChange() {\n+      this.isCameraNameEdit = false;\n+      this.newCameraName = \"\";\n+    },\n+    toPipelineNameChange() {\n+      this.newPipelineName = this.$store.getters.pipelineList[this.currentPipelineIndex - 1];\n+      this.isPipelineNameEdit = true;\n+      this.namingDialog = true;\n+    },\n+    toCreatePipeline() {\n+      this.newPipelineName = \"New Pipeline\";\n+      this.isPipelineNameEdit = false;\n+      this.namingDialog = true;\n+    },\n+    openDuplicateDialog() {\n+      this.pipeIndexToDuplicate = this.currentPipelineIndex - 1;\n+      this.duplicateDialog = true;\n+    },\n+    deleteCurrentPipeline() {\n+      if (this.$store.getters.pipelineList.length > 1) {\n+        this.handleInputWithIndex('deleteCurrentPipeline', {});\n+      } else {\n+        this.snackbar = true;\n+      }\n+    },\n+    savePipelineNameChange() {\n+      if (this.checkPipelineName === \"\") {\n+        if (this.isPipelineNameEdit) {\n+          this.handleInputWithIndex(\"changePipelineName\", this.newPipelineName);\n+        } else {\n+          this.handleInputWithIndex(\"addNewPipeline\", [this.newPipelineName, this.newPipelineType]); // 0 for reflective, 1 for colored shpae\n+        }\n+        this.discardPipelineNameChange();\n+      }\n+    },\n+    duplicatePipeline() {\n+      // if (!this.anotherCamera) {\n+      //     this.pipelineDuplicate.camera = -1\n+      // }\n+      this.handleInputWithIndex(\"duplicatePipeline\", this.pipeIndexToDuplicate);\n+      // this.axios.post(\"http://\" + this.$address + \"/api/vision/duplicate\", this.pipeIndexToDuplicate);\n+\n+      this.closeDuplicateDialog();\n+    },\n+    closeDuplicateDialog() {\n+      this.duplicateDialog = false;\n+      this.pipeIndexToDuplicate = undefined;\n+    },\n+    discardPipelineNameChange() {\n+      this.namingDialog = false;\n+      this.isPipelineNameEdit = false;\n+      this.newPipelineName = \"\";\n+    },\n+  }\n+\n+}\n </script>\n \n <style scoped>"
  },
  {
    "sha": "81248f7c7270b3316ba3862bb0681ec3215b6eb1",
    "filename": "photon-client/src/main.js",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/main.js",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/main.js",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/main.js?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -29,9 +29,11 @@ Vue.use(VueAxios, axios);\n Vue.prototype.$msgPack = msgPack(true);\n \n import {dataHandleMixin} from './mixins/global/dataHandleMixin'\n-\n Vue.mixin(dataHandleMixin);\n \n+import {stateMixin} from './mixins/global/stateMixin'\n+Vue.mixin(stateMixin);\n+\n new Vue({\n     router,\n     store,"
  },
  {
    "sha": "4391e14a4a9b09eaa4080f2578f2c60a5489b74c",
    "filename": "photon-client/src/mixins/global/stateMixin.js",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/mixins/global/stateMixin.js",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/mixins/global/stateMixin.js",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/mixins/global/stateMixin.js?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -0,0 +1,10 @@\n+export const stateMixin = {\n+    methods: {\n+        currentPipelineType() {\n+            return this.$store.getters.pipelineType\n+        },\n+        currentPipelineSettings() {\n+            return this.$store.getters.currentPipelineSettings\n+        },\n+    }\n+};"
  },
  {
    "sha": "efe8593845c74c9a1dd3efde64ae3874ec20084d",
    "filename": "photon-client/src/store/index.js",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/store/index.js",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/store/index.js",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/store/index.js?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -42,7 +42,7 @@ export default new Vuex.Store({\n                 isFovConfigurable: true,\n                 calibrated: false,\n                 currentPipelineSettings: {\n-                    pipelineType: 2, // One of \"driver\", \"reflective\", \"shape\"\n+                    pipelineType: 2, // One of \"calib\", \"driver\", \"reflective\", \"shape\"\n                     // 2 is reflective\n \n                     // Settings that apply to all pipeline types\n@@ -245,5 +245,6 @@ export default new Vuex.Store({\n         },\n         pipelineList: state => state.cameraSettings[state.currentCameraIndex].pipelineNicknames,\n         calibrationList: state => state.cameraSettings[state.currentCameraIndex].calibrations,\n+        pipelineType: state => state.cameraSettings[state.currentCameraIndex].currentPipelineSettings.pipelineType\n     }\n })\n\\ No newline at end of file"
  },
  {
    "sha": "9e76f26981f8f9b99ad356a5605042c8a2a4b217",
    "filename": "photon-client/src/views/PipelineViews/ContoursTab.vue",
    "status": "modified",
    "additions": 265,
    "deletions": 139,
    "changes": 404,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/views/PipelineViews/ContoursTab.vue",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/views/PipelineViews/ContoursTab.vue",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/views/PipelineViews/ContoursTab.vue?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -1,160 +1,286 @@\n <template>\n   <div>\n     <CVrangeSlider\n-      v-model=\"contourArea\"\n-      name=\"Area\"\n-      min=\"0\"\n-      max=\"100\"\n-      step=\"0.1\"\n-      @input=\"handlePipelineData('contourArea')\"\n-      @rollback=\"e=> rollback('contourArea',e)\"\n+        v-model=\"contourArea\"\n+        name=\"Area\"\n+        min=\"0\"\n+        max=\"100\"\n+        step=\"0.1\"\n+        @input=\"handlePipelineData('contourArea')\"\n     />\n     <CVrangeSlider\n-      v-model=\"contourRatio\"\n-      name=\"Ratio (W/H)\"\n-      tooltip=\"Min and max ratio between the width and height of a contour's bounding rectangle\"\n-      min=\"0\"\n-      max=\"100\"\n-      step=\"0.1\"\n-      @input=\"handlePipelineData('contourRatio')\"\n-      @rollback=\"e=> rollback('contourRatio',e)\"\n+        v-model=\"contourRatio\"\n+        v-if=\"currentPipelineType() !== 3\"\n+        name=\"Ratio (W/H)\"\n+        tooltip=\"Min and max ratio between the width and height of a contour's bounding rectangle\"\n+        min=\"0\"\n+        max=\"100\"\n+        step=\"0.1\"\n+        @input=\"handlePipelineData('contourRatio')\"\n     />\n     <CVrangeSlider\n-      v-model=\"contourFullness\"\n-      name=\"Fullness\"\n-      tooltip=\"Min and max ratio between a contour's area and its bounding rectangle\"\n-      min=\"0\"\n-      max=\"100\"\n-      @input=\"handlePipelineData('contourFullness')\"\n-      @rollback=\"e=> rollback('contourFullness',e)\"\n+        v-model=\"contourFullness\"\n+        v-if=\"currentPipelineType() !== 3\"\n+        name=\"Fullness\"\n+        tooltip=\"Min and max ratio between a contour's area and its bounding rectangle\"\n+        min=\"0\"\n+        max=\"100\"\n+        @input=\"handlePipelineData('contourFullness')\"\n     />\n-    <CVslider\n-      v-model=\"contourSpecklePercentage\"\n-      name=\"Speckle Rejection\"\n-      tooltip=\"Rejects contours whose average area is less than the given percentage of the average area of all the other contours\"\n-      min=\"0\"\n-      max=\"100\"\n-      :slider-cols=\"largeBox\"\n-      @input=\"handlePipelineData('contourSpecklePercentage')\"\n-      @rollback=\"e=> rollback('contourSpecklePercentage',e)\"\n-    />\n-    <CVselect\n-      v-model=\"contourGroupingMode\"\n-      name=\"Target Grouping\"\n-      tooltip=\"Whether or not every two targets are paired with each other (good for e.g. 2019 targets)\"\n-      :select-cols=\"largeBox\"\n-      :list=\"['Single','Dual']\"\n-      @input=\"handlePipelineData('contourGroupingMode')\"\n-      @rollback=\"e=> rollback('contourGroupingMode',e)\"\n+    <CVrangeSlider\n+        v-model=\"contourPerimeter\"\n+        v-if=\"currentPipelineType() === 3\"\n+        name=\"Perimeter\"\n+        tooltip=\"Min and max perimeter of the shape, in pixels\"\n+        min=\"0\"\n+        max=\"4000\"\n+        @input=\"handlePipelineData('contourPerimeter')\"\n     />\n-    <CVselect\n-      v-model=\"contourIntersection\"\n-      name=\"Target Intersection\"\n-      tooltip=\"If target grouping is in dual mode it will use this dropdown to decide how targets are grouped with adjacent targets\"\n-      :select-cols=\"largeBox\"\n-      :list=\"['None','Up','Down','Left','Right']\"\n-      :disabled=\"contourGroupingMode === 0\"\n-      @input=\"handlePipelineData('contourIntersection')\"\n-      @rollback=\"e=> rollback('contourIntersection',e)\"\n+    <CVslider\n+        v-model=\"contourSpecklePercentage\"\n+        name=\"Speckle Rejection\"\n+        tooltip=\"Rejects contours whose average area is less than the given percentage of the average area of all the other contours\"\n+        min=\"0\"\n+        max=\"100\"\n+        :slider-cols=\"largeBox\"\n+        @input=\"handlePipelineData('contourSpecklePercentage')\"\n     />\n+    <template v-if=\"currentPipelineType() !== 3\">\n+      <CVselect\n+          v-model=\"contourGroupingMode\"\n+          name=\"Target Grouping\"\n+          tooltip=\"Whether or not every two targets are paired with each other (good for e.g. 2019 targets)\"\n+          :select-cols=\"largeBox\"\n+          :list=\"['Single','Dual']\"\n+          @input=\"handlePipelineData('contourGroupingMode')\"\n+      />\n+      <CVselect\n+          v-model=\"contourIntersection\"\n+          name=\"Target Intersection\"\n+          tooltip=\"If target grouping is in dual mode it will use this dropdown to decide how targets are grouped with adjacent targets\"\n+          :select-cols=\"largeBox\"\n+          :list=\"['None','Up','Down','Left','Right']\"\n+          :disabled=\"contourGroupingMode === 0\"\n+          @input=\"handlePipelineData('contourIntersection')\"\n+      />\n+    </template>\n+    <!-- If we arent not a shape, we are a shape-->\n+    <template v-else>\n+      <v-divider class=\"mt-3\"/>\n+      <CVselect\n+          v-model=\"contourShape\"\n+          name=\"Target Shape\"\n+          tooltip=\"The shape of targets to look for\"\n+          :select-cols=\"largeBox\"\n+          :list=\"['Circle', 'Polygon', 'Triangle', 'Quadrilateral']\"\n+          @input=\"handlePipelineData('contourShape')\"\n+      />\n+\n+      <!-- Accuracy % is only for polygons-->\n+      <CVslider\n+          v-model=\"accuracyPercentage\"\n+          :disabled=\"currentPipelineSettings().contourShape < 1\"\n+          name=\"Shape Simplification\"\n+          tooltip=\"How much we should simply the input contour before checking how many sides it has\"\n+          min=\"0\"\n+          max=\"100\"\n+          :slider-cols=\"largeBox\"\n+          @input=\"handlePipelineData('accuracyPercentage')\"\n+      />\n+      <!-- Similarly, the threshold is only for circles -->\n+      <CVslider\n+          v-model=\"circleDetectThreshold\"\n+          :disabled=\"currentPipelineSettings().contourShape !== 0\"\n+          name=\"Cirularity Threshold\"\n+          tooltip=\"How circular contour must be to be a 'Circle'\"\n+          min=\"1\"\n+          max=\"100\"\n+          :slider-cols=\"largeBox\"\n+          @input=\"handlePipelineData('circleDetectThreshold')\"\n+      />\n+      <CVrangeSlider\n+          v-model=\"contourRadius\"\n+          :disabled=\"currentPipelineSettings().contourShape !== 0\"\n+          name=\"Radius\"\n+          min=\"0\"\n+          max=\"100\"\n+          step=\"1\"\n+          @input=\"handlePipelineData('contourRadius')\"\n+      />\n+      <CVslider\n+          v-model=\"maxCannyThresh\"\n+          :disabled=\"currentPipelineSettings().contourShape !== 0\"\n+          name=\"Max Canny Threshold\"\n+          min=\"1\"\n+          max=\"100\"\n+          :slider-cols=\"largeBox\"\n+          @input=\"handlePipelineData('maxCannyThresh')\"\n+      />\n+      <CVslider\n+          v-model=\"circleAccuracy\"\n+          :disabled=\"currentPipelineSettings().contourShape !== 0\"\n+          name=\"Circle Accuracy\"\n+          min=\"0\"\n+          max=\"100\"\n+          :slider-cols=\"largeBox\"\n+          @input=\"handlePipelineData('circleAccuracy')\"\n+      />\n+      <v-divider class=\"mt-3\"/>\n+    </template>\n     <CVselect\n-      v-model=\"contourSortMode\"\n-      name=\"Target Sort\"\n-      tooltip=\"Chooses the sorting mode used to determine the 'best' targets to provide to user code\"\n-      :select-cols=\"largeBox\"\n-      :list=\"['Largest','Smallest','Highest','Lowest','Rightmost','Leftmost','Centermost']\"\n-      @input=\"handlePipelineData('contourSortMode')\"\n-      @rollback=\"e => rollback('contourSortMode', e)\"\n+        v-model=\"contourSortMode\"\n+        name=\"Target Sort\"\n+        tooltip=\"Chooses the sorting mode used to determine the 'best' targets to provide to user code\"\n+        :select-cols=\"largeBox\"\n+        :list=\"['Largest','Smallest','Highest','Lowest','Rightmost','Leftmost','Centermost']\"\n+        @input=\"handlePipelineData('contourSortMode')\"\n+        @rollback=\"e => rollback('contourSortMode', e)\"\n     />\n   </div>\n </template>\n \n <script>\n-    import CVrangeSlider from '../../components/common/cv-range-slider'\n-    import CVselect from '../../components/common/cv-select'\n-    import CVslider from '../../components/common/cv-slider'\n+import CVrangeSlider from '../../components/common/cv-range-slider'\n+import CVselect from '../../components/common/cv-select'\n+import CVslider from '../../components/common/cv-slider'\n \n-    export default {\n-        name: 'Contours',\n-        components: {\n-            CVrangeSlider,\n-            CVselect,\n-            CVslider\n-        },\n-        // eslint-disable-next-line vue/require-prop-types\n-        props: ['value'],\n+export default {\n+  name: 'Contours',\n+  components: {\n+    CVrangeSlider,\n+    CVselect,\n+    CVslider\n+  },\n+  // eslint-disable-next-line vue/require-prop-types\n+  props: ['value'],\n \n-        data() {\n-            return {}\n-        },\n-        computed: {\n-          largeBox: {\n-            get() {\n-              // Sliders and selectors should be fuller width if we're on screen size medium and\n-              // up and either not in compact mode (because the tab will be 100% screen width),\n-              // or in driver mode (where the card will also be 100% screen width).\n-              return this.$vuetify.breakpoint.mdAndUp && (!this.$store.state.compactMode || this.$store.getters.isDriverMode) ? 10 : 8;\n-            }\n-          },\n-            contourArea: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.contourArea\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"contourArea\": val});\n-                }\n-            },\n-            contourRatio: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.contourRatio\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"contourRatio\": val});\n-                }\n-            },\n-            contourFullness: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.contourFullness\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"contourFullness\": val});\n-                }\n-            },\n-            contourSpecklePercentage: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.contourSpecklePercentage\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"contourSpecklePercentage\": val});\n-                }\n-            },\n-            contourGroupingMode: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.contourGroupingMode\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"contourGroupingMode\": val});\n-                }\n-            },\n-            contourSortMode: {\n-              get() {\n-                return this.$store.getters.currentPipelineSettings.contourSortMode\n-              },\n-              set(val) {\n-                this.$store.commit(\"mutatePipeline\", {\"contourSortMode\": val});\n-              }\n-            },\n-            contourIntersection: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.contourIntersection\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"contourIntersection\": val});\n-                }\n-            }\n-        },\n-        methods: {},\n-    }\n+  data() {\n+    return {}\n+  },\n+  computed: {\n+    largeBox: {\n+      get() {\n+        // Sliders and selectors should be fuller width if we're on screen size medium and\n+        // up and either not in compact mode (because the tab will be 100% screen width),\n+        // or in driver mode (where the card will also be 100% screen width).\n+        return this.$vuetify.breakpoint.mdAndUp && (!this.$store.state.compactMode || this.$store.getters.isDriverMode) ? 10 : 8;\n+      }\n+    },\n+    contourArea: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourArea\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourArea\": val});\n+      }\n+    },\n+    contourRatio: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourRatio\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourRatio\": val});\n+      }\n+    },\n+    contourFullness: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourFullness\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourFullness\": val});\n+      }\n+    },\n+    contourPerimeter: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourPerimeter\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourPerimeter\": val});\n+      }\n+    },\n+    contourSpecklePercentage: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourSpecklePercentage\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourSpecklePercentage\": val});\n+      }\n+    },\n+    contourGroupingMode: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourGroupingMode\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourGroupingMode\": val});\n+      }\n+    },\n+    contourSortMode: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourSortMode\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourSortMode\": val});\n+      }\n+    },\n+    contourShape: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourShape\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourShape\": val});\n+      }\n+    },\n+    contourIntersection: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourIntersection\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourIntersection\": val});\n+      }\n+    },\n+    accuracyPercentage: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.accuracyPercentage\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"accuracyPercentage\": val});\n+      }\n+    },\n+    contourRadius: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.contourRadius\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"contourRadius\": val});\n+      }\n+    },\n+    circleDetectThreshold: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.circleDetectThreshold\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"circleDetectThreshold\": val});\n+      }\n+    },\n+    maxCannyThresh: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.maxCannyThresh\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"maxCannyThresh\": val});\n+      }\n+    },\n+    circleAccuracy: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.circleAccuracy\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"circleAccuracy\": val});\n+      }\n+    },\n+  },\n+  methods: {},\n+}\n </script>\n \n <style lang=\"\" scoped>"
  },
  {
    "sha": "99853896d0b365721e22c0a1b529b63b98e6aae7",
    "filename": "photon-client/src/views/PipelineViews/ThresholdTab.vue",
    "status": "modified",
    "additions": 178,
    "deletions": 142,
    "changes": 320,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/views/PipelineViews/ThresholdTab.vue",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-client/src/views/PipelineViews/ThresholdTab.vue",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-client/src/views/PipelineViews/ThresholdTab.vue?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -1,70 +1,88 @@\n <template>\n   <div>\n     <CVrangeSlider\n-      v-model=\"hsvHue\"\n-      name=\"Hue\"\n-      tooltip=\"Describes color\"\n-      :min=\"0\"\n-      :max=\"180\"\n-      @input=\"handlePipelineData('hsvHue')\"\n-      @rollback=\"e => rollback('hue',e)\"\n+        v-model=\"hsvHue\"\n+        name=\"Hue\"\n+        tooltip=\"Describes color\"\n+        :min=\"0\"\n+        :max=\"180\"\n+        @input=\"handlePipelineData('hsvHue')\"\n+        @rollback=\"e => rollback('hue',e)\"\n     />\n     <CVrangeSlider\n-      v-model=\"hsvSaturation\"\n-      name=\"Saturation\"\n-      tooltip=\"Describes colorfulness; the smaller this value the 'whiter' the color becomes\"\n-      :min=\"0\"\n-      :max=\"255\"\n-      @input=\"handlePipelineData('hsvSaturation')\"\n-      @rollback=\"e => rollback('saturation',e)\"\n+        v-model=\"hsvSaturation\"\n+        name=\"Saturation\"\n+        tooltip=\"Describes colorfulness; the smaller this value the 'whiter' the color becomes\"\n+        :min=\"0\"\n+        :max=\"255\"\n+        @input=\"handlePipelineData('hsvSaturation')\"\n+        @rollback=\"e => rollback('saturation',e)\"\n     />\n     <CVrangeSlider\n-      v-model=\"hsvValue\"\n-      name=\"Value\"\n-      tooltip=\"Describes lightness; the smaller this value the 'blacker' the color becomes\"\n-      :min=\"0\"\n-      :max=\"255\"\n-      @input=\"handlePipelineData('hsvValue')\"\n-      @rollback=\"e => rollback('value',e)\"\n+        v-model=\"hsvValue\"\n+        name=\"Value\"\n+        tooltip=\"Describes lightness; the smaller this value the 'blacker' the color becomes\"\n+        :min=\"0\"\n+        :max=\"255\"\n+        @input=\"handlePipelineData('hsvValue')\"\n+        @rollback=\"e => rollback('value',e)\"\n     />\n+    <template v-if=\"this.currentPipelineType() === 3\">\n+      <CVSwitch\n+          v-model=\"erode\"\n+          name=\"Erode\"\n+          tooltip=\"Removes pixels around the edges of white areas in the thresholded image\"\n+          @input=\"handlePipelineData('erode')\"\n+          @rollback=\"e => rollback('erode',e)\"\n+      />\n+      <CVSwitch\n+          v-model=\"dilate\"\n+          class=\"mb-0\"\n+          name=\"Dilate\"\n+          tooltip=\"Adds pixels around the edges of white areas in the thresholded image\"\n+          @input=\"handlePipelineData('dilate')\"\n+          @rollback=\"e => rollback('dilate',e)\"\n+      />\n+    </template>\n+    <v-divider class=\"mb-3 mt-3\"/>\n     <div class=\"pt-3 white--text\">\n       Color Picker\n     </div>\n     <v-divider\n-      class=\"mt-3\"\n+        class=\"mt-3\"\n     />\n     <v-row\n-      justify=\"center\"\n-      class=\"mt-3 mb-3\"\n+        justify=\"center\"\n+        class=\"mt-3 mb-3\"\n     >\n       <template v-if=\"!$store.state.colorPicking\">\n         <v-btn\n-          color=\"accent\"\n-          class=\"ma-2 black--text\"\n-          small\n-          @click=\"setFunction(3)\"\n+            color=\"accent\"\n+            class=\"ma-2 black--text\"\n+            small\n+            @click=\"setFunction(3)\"\n         >\n           <v-icon left>\n             mdi-minus\n           </v-icon>\n           Shrink Range\n         </v-btn>\n         <v-btn\n-          color=\"accent\"\n-          class=\"ma-2 black--text\"\n-          small\n-          @click=\"setFunction(1)\"\n+            color=\"accent\"\n+            class=\"ma-2 black--text\"\n+            small\n+            @click=\"setFunction(1)\"\n         >\n           <v-icon left>\n             mdi-plus-minus\n           </v-icon>\n           Set To Average\n         </v-btn>\n         <v-btn\n-          color=\"accent\"\n-          class=\"ma-2 black--text\"\n-          small\n-          @click=\"setFunction(2)\"\n+            color=\"accent\"\n+            class=\"ma-2 black--text\"\n+            small\n+            @click=\"setFunction(2)\"\n         >\n           <v-icon left>\n             mdi-plus\n@@ -74,11 +92,11 @@\n       </template>\n       <template v-else>\n         <v-btn\n-          color=\"accent\"\n-          class=\"ma-2 black--text\"\n-          style=\"width: 30%;\"\n-          small\n-          @click=\"setFunction(0)\"\n+            color=\"accent\"\n+            class=\"ma-2 black--text\"\n+            style=\"width: 30%;\"\n+            small\n+            @click=\"setFunction(0)\"\n         >\n           Cancel\n         </v-btn>\n@@ -88,112 +106,130 @@\n </template>\n \n <script>\n-    import CVrangeSlider from '../../components/common/cv-range-slider'\n-    \n-    export default {\n-        name: 'Threshold',\n-        components: {\n-            CVrangeSlider\n-        },\n-        // eslint-disable-next-line vue/require-prop-types\n-        props: ['value'],\n-        data() {\n-            return {\n-                currentFunction: undefined,\n-                colorPicker: undefined,\n-                showThresholdState: 0\n-            }\n-        },\n-        computed: {\n-            hsvHue: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.hsvHue\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"hsvHue\": val})\n-                }\n-            },\n-            hsvSaturation: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.hsvSaturation\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"hsvSaturation\": val})\n-                }\n-            },\n-            hsvValue: {\n-                get() {\n-                    return this.$store.getters.currentPipelineSettings.hsvValue\n-                },\n-                set(val) {\n-                    this.$store.commit(\"mutatePipeline\", {\"hsvValue\": val})\n-                }\n-            }\n-        },\n-        mounted: function () {\n-            const self = this;\n-            this.colorPicker = require('../../plugins/ColorPicker').default;\n-            this.$nextTick(() => {\n-                self.colorPicker.initColorPicker();\n-            });\n-        },\n-        methods: {\n-            onClick(event) {\n-                if (this.currentFunction !== undefined) {\n-                    this.colorPicker.initColorPicker();\n+import CVrangeSlider from '../../components/common/cv-range-slider'\n+import CVSwitch from \"@/components/common/cv-switch\";\n \n-                    let s = this.$store.getters.currentPipelineSettings;\n-                    let hsvArray = this.colorPicker.colorPickerClick(event, this.currentFunction,\n-                        [\n-                                [s.hsvHue[0], s.hsvSaturation[0], s.hsvValue[0]],\n-                                [s.hsvHue[1], s.hsvSaturation[1], s.hsvValue[1]]\n-                        ].map(hsv => hsv.map(it => it || 0)));\n-                    // That `map` calls are to make sure that we don't let any undefined/null values slip in\n-                    this.currentFunction = undefined;\n-                    this.$store.state.colorPicking = false;\n-                    this.handlePipelineUpdate(\"outputShouldDraw\", true);\n+export default {\n+  name: 'Threshold',\n+  components: {\n+    CVSwitch,\n+    CVrangeSlider\n+  },\n+  // eslint-disable-next-line vue/require-prop-types\n+  props: ['value'],\n+  data() {\n+    return {\n+      currentFunction: undefined,\n+      colorPicker: undefined,\n+      showThresholdState: 0\n+    }\n+  },\n+  computed: {\n+    hsvHue: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.hsvHue\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"hsvHue\": val})\n+      }\n+    },\n+    hsvSaturation: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.hsvSaturation\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"hsvSaturation\": val})\n+      }\n+    },\n+    hsvValue: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.hsvValue\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"hsvValue\": val})\n+      }\n+    },\n+    erode: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.erode\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"erode\": val});\n+      }\n+    },\n+    dilate: {\n+      get() {\n+        return this.$store.getters.currentPipelineSettings.dilate\n+      },\n+      set(val) {\n+        this.$store.commit(\"mutatePipeline\", {\"dilate\": val});\n+      }\n+    },\n+  },\n+  mounted: function () {\n+    const self = this;\n+    this.colorPicker = require('../../plugins/ColorPicker').default;\n+    this.$nextTick(() => {\n+      self.colorPicker.initColorPicker();\n+    });\n+  },\n+  methods: {\n+    onClick(event) {\n+      if (this.currentFunction !== undefined) {\n+        this.colorPicker.initColorPicker();\n+\n+        let s = this.$store.getters.currentPipelineSettings;\n+        let hsvArray = this.colorPicker.colorPickerClick(event, this.currentFunction,\n+            [\n+              [s.hsvHue[0], s.hsvSaturation[0], s.hsvValue[0]],\n+              [s.hsvHue[1], s.hsvSaturation[1], s.hsvValue[1]]\n+            ].map(hsv => hsv.map(it => it || 0)));\n+        // That `map` calls are to make sure that we don't let any undefined/null values slip in\n+        this.currentFunction = undefined;\n+        this.$store.state.colorPicking = false;\n+        this.handlePipelineUpdate(\"outputShouldDraw\", true);\n \n-                    s.hsvHue = [hsvArray[0][0], hsvArray[1][0]];\n-                    s.hsvSaturation = [hsvArray[0][1], hsvArray[1][1]];\n-                    s.hsvValue = [hsvArray[0][2], hsvArray[1][2]];\n+        s.hsvHue = [hsvArray[0][0], hsvArray[1][0]];\n+        s.hsvSaturation = [hsvArray[0][1], hsvArray[1][1]];\n+        s.hsvValue = [hsvArray[0][2], hsvArray[1][2]];\n \n-                    let msg = this.$msgPack.encode({\n-                        \"changePipelineSetting\": {\n-                            'hsvHue': s.hsvHue,\n-                            'hsvSaturation': s.hsvSaturation,\n-                            'hsvValue': s.hsvValue,\n-                            'cameraIndex': this.$store.state.currentCameraIndex\n-                        }\n-                    });\n-                    this.$socket.send(msg);\n-                    this.$emit('update');\n-                }\n-            },\n-            setFunction(index) {\n-                switch (index) {\n-                    case 0:\n-                        this.currentFunction = undefined;\n-                        this.$store.state.colorPicking = false;\n+        let msg = this.$msgPack.encode({\n+          \"changePipelineSetting\": {\n+            'hsvHue': s.hsvHue,\n+            'hsvSaturation': s.hsvSaturation,\n+            'hsvValue': s.hsvValue,\n+            'cameraIndex': this.$store.state.currentCameraIndex\n+          }\n+        });\n+        this.$socket.send(msg);\n+        this.$emit('update');\n+      }\n+    },\n+    setFunction(index) {\n+      switch (index) {\n+        case 0:\n+          this.currentFunction = undefined;\n+          this.$store.state.colorPicking = false;\n \n-                        this.handlePipelineUpdate(\"outputShouldDraw\", true);\n-                        return;\n-                    case 1:\n-                        this.currentFunction = this.colorPicker.eyeDrop;\n-                        break;\n-                    case 2:\n-                        this.currentFunction = this.colorPicker.expand;\n-                        break;\n-                    case 3:\n-                        this.currentFunction = this.colorPicker.shrink;\n-                        break;\n-                }\n-                this.$store.state.colorPicking = true;\n+          this.handlePipelineUpdate(\"outputShouldDraw\", true);\n+          return;\n+        case 1:\n+          this.currentFunction = this.colorPicker.eyeDrop;\n+          break;\n+        case 2:\n+          this.currentFunction = this.colorPicker.expand;\n+          break;\n+        case 3:\n+          this.currentFunction = this.colorPicker.shrink;\n+          break;\n+      }\n+      this.$store.state.colorPicking = true;\n \n-                this.handlePipelineUpdate(\"outputShouldDraw\", false);\n-                this.$store.commit(\"mutatePipeline\", {\"inputShouldShow\": true});\n-                this.handlePipelineUpdate(\"inputShouldShow\", true);\n-            }\n-        }\n+      this.handlePipelineUpdate(\"outputShouldDraw\", false);\n+      this.$store.commit(\"mutatePipeline\", {\"inputShouldShow\": true});\n+      this.handlePipelineUpdate(\"inputShouldShow\", true);\n     }\n+  }\n+}\n \n </script>\n\\ No newline at end of file"
  },
  {
    "sha": "b594a464c9dd891483db11aeede4f3ba05a032b9",
    "filename": "photon-core/src/main/java/org/photonvision/common/util/TestUtils.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/common/util/TestUtils.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/common/util/TestUtils.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/common/util/TestUtils.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -135,7 +135,7 @@ Path getPath() {\n     }\n \n     private static Path getResourcesFolderPath(boolean testMode) {\n-        return Path.of(\"src\", (testMode ? \"main\" : \"test\"), \"resources\").toAbsolutePath();\n+        return Path.of(\"photon-server\", \"src\", (testMode ? \"main\" : \"test\"), \"resources\").toAbsolutePath();\n     }\n \n     public static Path getTestMode2019ImagePath() {"
  },
  {
    "sha": "826e7a66986a586695948e73c1584db8e8ad8c47",
    "filename": "photon-core/src/main/java/org/photonvision/vision/camera/FileVisionSource.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/camera/FileVisionSource.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/camera/FileVisionSource.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/camera/FileVisionSource.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -35,13 +35,16 @@\n \n     public FileVisionSource(CameraConfiguration cameraConfiguration) {\n         super(cameraConfiguration);\n+        var calibration = cameraConfiguration.calibrations.size() > 0 ?\n+                cameraConfiguration.calibrations.get(0)\n+                : null;\n         frameProvider =\n                 new FileFrameProvider(\n                         Path.of(cameraConfiguration.path),\n                         cameraConfiguration.FOV,\n                         FileFrameProvider.MAX_FPS,\n                         cameraConfiguration.camPitch,\n-                        cameraConfiguration.calibrations.get(0));\n+                        calibration);\n         settables =\n                 new FileSourceSettables(cameraConfiguration, frameProvider.get().frameStaticProperties);\n     }"
  },
  {
    "sha": "e58f0d11d7d84a00e14f623c4f1c6ca2715488f7",
    "filename": "photon-core/src/main/java/org/photonvision/vision/opencv/CVMat.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/CVMat.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/CVMat.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/opencv/CVMat.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -47,7 +47,7 @@ public void copyTo(Mat srcMat) {\n     private StringBuilder getStackTraceBuilder() {\n         var trace = Thread.currentThread().getStackTrace();\n \n-        final int STACK_FRAMES_TO_SKIP = 4;\n+        final int STACK_FRAMES_TO_SKIP = 3;\n         final var traceStr = new StringBuilder();\n         for (int idx = STACK_FRAMES_TO_SKIP; idx < trace.length; idx++) {\n             traceStr.append(\"\\t\\n\").append(trace[idx]);"
  },
  {
    "sha": "db7ea554815703efb6ab633a11b8a92ddf02a4f4",
    "filename": "photon-core/src/main/java/org/photonvision/vision/opencv/CVShape.java",
    "status": "modified",
    "additions": 18,
    "deletions": 31,
    "changes": 49,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/CVShape.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/CVShape.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/opencv/CVShape.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -17,14 +17,21 @@\n \n package org.photonvision.vision.opencv;\n \n+import org.jetbrains.annotations.Nullable;\n import org.opencv.core.MatOfPoint2f;\n import org.opencv.core.MatOfPoint3f;\n+import org.opencv.core.Point;\n import org.opencv.imgproc.Imgproc;\n \n-public class CVShape {\n+public class CVShape implements Releasable {\n     public final Contour contour;\n+\n+    @Nullable\n     public final ContourShape shape;\n \n+    public double radius = 0;\n+    public Point center = null;\n+\n     private MatOfPoint3f customTarget = null;\n \n     private MatOfPoint2f approxCurve = new MatOfPoint2f();\n@@ -34,6 +41,12 @@ public CVShape(Contour contour, ContourShape shape) {\n         this.shape = shape;\n     }\n \n+    public CVShape(Contour contour, Point center, double radius) {\n+        this(contour, ContourShape.Circle);\n+        this.radius = radius;\n+        this.center = center;\n+    }\n+\n     public CVShape(Contour contour, MatOfPoint3f targetPoints) {\n         this.contour = contour;\n         this.shape = ContourShape.Custom;\n@@ -44,36 +57,10 @@ public Contour getContour() {\n         return contour;\n     }\n \n-    public MatOfPoint2f getApproxPolyDp(double epsilon, boolean closed) {\n-        approxCurve.release();\n-        approxCurve = new MatOfPoint2f();\n-\n-        Imgproc.approxPolyDP(contour.getMat2f(), approxCurve, epsilon, closed);\n-        return approxCurve;\n-    }\n-\n-    public MatOfPoint2f getApproxPolyDpConvex(double epsilon, boolean closed) {\n+    @Override\n+    public void release() {\n+        if(customTarget != null) customTarget.release();\n         approxCurve.release();\n-        approxCurve = new MatOfPoint2f();\n-\n-        Imgproc.approxPolyDP(contour.getConvexHull(), approxCurve, epsilon, closed);\n-        return approxCurve;\n-    }\n-\n-    boolean approxPolyMatchesShape() {\n-        var pointList = approxCurve.toList();\n-\n-        // TODO: @Matt\n-        switch (shape) {\n-            case Custom:\n-                break;\n-            case Circle:\n-                break;\n-            case Triangle:\n-                break;\n-            case Quadrilateral:\n-                break;\n-        }\n-        return true;\n+        contour.release();\n     }\n }"
  },
  {
    "sha": "0fb94cb8e75ab40142818bf82f2ba815417d0d1c",
    "filename": "photon-core/src/main/java/org/photonvision/vision/opencv/Contour.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/Contour.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/Contour.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/opencv/Contour.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -18,6 +18,8 @@\n package org.photonvision.vision.opencv;\n \n import java.util.Comparator;\n+\n+import org.jetbrains.annotations.Nullable;\n import org.opencv.core.CvType;\n import org.opencv.core.MatOfInt;\n import org.opencv.core.MatOfPoint;\n@@ -45,6 +47,7 @@\n     private Moments moments = null;\n \n     private MatOfPoint2f convexHull = null;\n+    private MatOfPoint2f approxPolyDp = null;\n \n     public Contour(MatOfPoint mat) {\n         this.mat = mat;\n@@ -68,6 +71,19 @@ public MatOfPoint2f getConvexHull() {\n         return convexHull;\n     }\n \n+    public MatOfPoint2f getApproxPolyDp(double epsilon, boolean closed) {\n+        if (this.approxPolyDp == null) {\n+            approxPolyDp = new MatOfPoint2f();\n+            Imgproc.approxPolyDP(getConvexHull(), approxPolyDp, epsilon, closed);\n+        }\n+        return approxPolyDp;\n+    }\n+\n+    @Nullable\n+    public MatOfPoint2f getApproxPolyDp() {\n+        return this.approxPolyDp;\n+    }\n+\n     public double getArea() {\n         if (Double.isNaN(area)) {\n             area = Imgproc.contourArea(mat);\n@@ -197,6 +213,7 @@ public void release() {\n         if (mat != null) mat.release();\n         if (mat2f != null) mat2f.release();\n         if (convexHull != null) convexHull.release();\n+        if (approxPolyDp != null) approxPolyDp.release();\n     }\n \n     public static MatOfPoint2f convertIndexesToPoints(MatOfPoint contour, MatOfInt indexes) {"
  },
  {
    "sha": "4eac4d847d9392c45689a80f04e352389c9463c1",
    "filename": "photon-core/src/main/java/org/photonvision/vision/opencv/ContourShape.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/ContourShape.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/opencv/ContourShape.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/opencv/ContourShape.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -21,8 +21,8 @@\n import java.util.HashMap;\n \n public enum ContourShape {\n-    Custom(-1),\n     Circle(0),\n+    Custom(-1),\n     Triangle(3),\n     Quadrilateral(4);\n "
  },
  {
    "sha": "19129d1eb6d24c1f2d060333451eec8d55917ea9",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipe/impl/Collect2dTargetsPipe.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/Collect2dTargetsPipe.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/Collect2dTargetsPipe.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipe/impl/Collect2dTargetsPipe.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -50,7 +50,7 @@\n                         params.frameStaticProperties);\n \n         for (PotentialTarget target : in) {\n-            targets.add(new TrackedTarget(target, calculationParams));\n+            targets.add(new TrackedTarget(target, calculationParams, target.shape));\n         }\n \n         return targets;"
  },
  {
    "sha": "b5d2bfb4d694dcba2b3b75554ef444b63e5e20fe",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipe/impl/Draw2dTargetsPipe.java",
    "status": "modified",
    "additions": 33,
    "deletions": 1,
    "changes": 34,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/Draw2dTargetsPipe.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/Draw2dTargetsPipe.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipe/impl/Draw2dTargetsPipe.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -27,6 +27,8 @@\n import org.photonvision.common.logging.Logger;\n import org.photonvision.common.util.ColorHelper;\n import org.photonvision.vision.frame.FrameDivisor;\n+import org.photonvision.vision.opencv.CVShape;\n+import org.photonvision.vision.opencv.ContourShape;\n import org.photonvision.vision.pipe.MutatingPipe;\n import org.photonvision.vision.target.TrackedTarget;\n \n@@ -53,6 +55,7 @@ protected Void process(Pair<Mat, List<TrackedTarget>> in) {\n             var centroidColour = ColorHelper.colorToScalar(params.centroidColor);\n             var maximumBoxColour = ColorHelper.colorToScalar(params.maximumBoxColor);\n             var rotatedBoxColour = ColorHelper.colorToScalar(params.rotatedBoxColor);\n+            var circleColor = ColorHelper.colorToScalar(params.circleColor);\n             var shapeColour = ColorHelper.colorToScalar(params.shapeOutlineColour);\n \n             for (int i = 0; i < (params.showMultipleTargets ? in.getRight().size() : 1); i++) {\n@@ -72,13 +75,33 @@ protected Void process(Pair<Mat, List<TrackedTarget>> in) {\n                 dividePointArray(vertices);\n                 contour.fromArray(vertices);\n \n-                if (params.showRotatedBox) {\n+                if (params.shouldShowRotatedBox(target.getShape())) {\n                     Imgproc.drawContours(\n                             in.getLeft(),\n                             List.of(contour),\n                             0,\n                             rotatedBoxColour,\n                             (int) Math.ceil(imageSize * params.kPixelsToBoxThickness));\n+                } else if (params.shouldShowCircle(target.getShape())) {\n+                    Imgproc.circle(in.getLeft(),\n+                            target.getShape().center,\n+                            (int) target.getShape().radius,\n+                            circleColor,\n+                            (int) Math.ceil(imageSize * params.kPixelsToBoxThickness));\n+                } else {\n+                    // draw approximate polygon\n+                    var poly = target.getApproximateBoundingPolygon();\n+\n+                    // fall back on the shape's approx poly dp\n+                    if(poly == null && target.getShape() != null) poly = target.getShape().getContour().getApproxPolyDp();\n+                    if (poly != null) {\n+//                        divideMat2f(poly, pointMat);\n+                        var mat = new MatOfPoint();\n+                        mat.fromArray(poly.toArray());\n+                        Imgproc.drawContours(\n+                                in.getLeft(), List.of(mat), -1, ColorHelper.colorToScalar(Color.blue), 2);\n+                        mat.release();\n+                    }\n                 }\n \n                 if (params.showMaximumBox) {\n@@ -193,12 +216,21 @@ private void dividePoint(Point p) {\n         public Color maximumBoxColor = Color.RED;\n         public Color shapeOutlineColour = Color.MAGENTA;\n         public Color textColor = Color.GREEN;\n+        public Color circleColor = Color.RED;\n \n         public final boolean showMultipleTargets;\n         public final boolean shouldDraw;\n \n         public final FrameDivisor divisor;\n \n+        public boolean shouldShowRotatedBox(CVShape shape) {\n+            return showRotatedBox && (shape == null || shape.shape.equals(ContourShape.Quadrilateral));\n+        }\n+\n+        public boolean shouldShowCircle(CVShape shape) {\n+            return shape != null && shape.shape.equals(ContourShape.Circle);\n+        }\n+\n         public Draw2dTargetsParams(\n                 boolean shouldDraw, boolean showMultipleTargets, FrameDivisor divisor) {\n             this.shouldDraw = shouldDraw;"
  },
  {
    "sha": "5202f1b2b161dcfe7e293e7800f727c14d7292a4",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipe/impl/FilterShapesPipe.java",
    "status": "modified",
    "additions": 31,
    "deletions": 9,
    "changes": 40,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FilterShapesPipe.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FilterShapesPipe.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FilterShapesPipe.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -17,13 +17,19 @@\n \n package org.photonvision.vision.pipe.impl;\n \n+import java.util.ArrayList;\n import java.util.List;\n+\n+import org.photonvision.vision.frame.FrameStaticProperties;\n import org.photonvision.vision.opencv.CVShape;\n import org.photonvision.vision.opencv.ContourShape;\n import org.photonvision.vision.pipe.CVPipe;\n \n public class FilterShapesPipe\n         extends CVPipe<List<CVShape>, List<CVShape>, FilterShapesPipe.FilterShapesPipeParams> {\n+\n+    List<CVShape> outputList = new ArrayList<>();\n+\n     /**\n     * Runs the process for the pipe.\n     *\n@@ -32,30 +38,46 @@\n     */\n     @Override\n     protected List<CVShape> process(List<CVShape> in) {\n-        in.removeIf(\n-                shape ->\n-                        shape.shape != params.desiredShape\n-                                || shape.contour.getArea() > params.maxArea\n-                                || shape.contour.getArea() < params.minArea\n-                                || shape.contour.getPerimeter() > params.maxPeri\n-                                || shape.contour.getPerimeter() < params.minPeri);\n-        return in;\n+        outputList.forEach(CVShape::release);\n+        outputList.clear();\n+        outputList = new ArrayList<>();\n+\n+        for(var shape: in) {\n+            if (!shouldRemove(shape)) outputList.add(shape);\n+        }\n+\n+        return outputList;\n+    }\n+\n+    private boolean shouldRemove(CVShape shape) {\n+        return shape.shape != params.desiredShape\n+                || shape.contour.getArea() / params.getFrameStaticProperties().imageArea > params.maxArea\n+                || shape.contour.getArea() / params.getFrameStaticProperties().imageArea < params.minArea\n+                || shape.contour.getPerimeter() > params.maxPeri\n+                || shape.contour.getPerimeter() < params.minPeri;\n     }\n \n     public static class FilterShapesPipeParams {\n         private final ContourShape desiredShape;\n+        private final FrameStaticProperties frameStaticProperties;\n         private final double minArea;\n         private final double maxArea;\n         private final double minPeri;\n         private final double maxPeri;\n \n         public FilterShapesPipeParams(\n-                ContourShape desiredShape, double minArea, double maxArea, double minPeri, double maxPeri) {\n+                ContourShape desiredShape, double minArea, double maxArea, double minPeri, double maxPeri,\n+                FrameStaticProperties frameStaticProperties) {\n             this.desiredShape = desiredShape;\n             this.minArea = minArea;\n             this.maxArea = maxArea;\n             this.minPeri = minPeri;\n             this.maxPeri = maxPeri;\n+            this.frameStaticProperties = frameStaticProperties;\n+        }\n+\n+        public FrameStaticProperties getFrameStaticProperties() {\n+            return frameStaticProperties;\n         }\n     }\n }"
  },
  {
    "sha": "153a8ce0a4cefad89926783d6b7672263ccaa34b",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindCirclesPipe.java",
    "status": "modified",
    "additions": 21,
    "deletions": 5,
    "changes": 26,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindCirclesPipe.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindCirclesPipe.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindCirclesPipe.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.opencv.core.Mat;\n+import org.opencv.core.Point;\n import org.opencv.imgproc.Imgproc;\n import org.opencv.imgproc.Moments;\n import org.photonvision.vision.opencv.CVShape;\n@@ -49,6 +50,10 @@\n         circles.release();\n         List<CVShape> output = new ArrayList<>();\n \n+        var diag = params.diagonalLengthPx;\n+        var minRadius = (int) (params.minRadius * diag / 100.0);\n+        var maxRadius = (int) (params.maxRadius * diag / 100.0);\n+\n         Imgproc.HoughCircles(\n                 in.getLeft(),\n                 circles,\n@@ -64,28 +69,37 @@\n                 params.minDist,\n                 params.maxCannyThresh,\n                 params.accuracy,\n-                params.minRadius,\n-                params.maxRadius);\n+                minRadius,\n+                maxRadius);\n         // Great, we now found the center point of the circle and it's radius, but we have no idea what\n         // contour it corresponds to\n+        // Each contour can only match to one circle, so we keep a list of unmatched contours around and only match against them\n+        // This does mean that contours closer than allowableThreshold aren't matched to anything if there's a 'better' option\n+        var unmatchedContours = in.getRight();\n         for (int x = 0; x < circles.cols(); x++) {\n             // Grab the current circle we are looking at\n             double[] c = circles.get(0, x);\n             // Find the center points of that circle\n             double x_center = c[0];\n             double y_center = c[1];\n \n-            for (Contour contour : in.getRight()) {\n+            for (Contour contour : unmatchedContours) {\n                 // Grab the moments of the current contour\n                 Moments mu = contour.getMoments();\n                 // Determine if the contour is within the threshold of the detected circle\n                 if (Math.abs(x_center - (mu.m10 / mu.m00)) <= params.allowableThreshold\n                         && Math.abs(y_center - (mu.m01 / mu.m00)) <= params.allowableThreshold) {\n                     // If it is, then add it to the output array\n-                    output.add(new CVShape(contour, ContourShape.Circle));\n+                    output.add(new CVShape(contour, new Point(c[0], c[1]), c[2]));\n+                    unmatchedContours.remove(contour);\n+                    break;\n                 }\n             }\n         }\n+\n+        // Release everything we don't use\n+        for(var c: unmatchedContours) c.release();\n+\n         return output;\n     }\n \n@@ -96,6 +110,7 @@\n         private final int minDist;\n         private final int maxCannyThresh;\n         private final int accuracy;\n+        private final double diagonalLengthPx;\n \n         /*\n         * @params minDist - Minimum distance between the centers of the detected circles.\n@@ -114,13 +129,14 @@ public FindCirclePipeParams(\n                 int minDist,\n                 int maxRadius,\n                 int maxCannyThresh,\n-                int accuracy) {\n+                int accuracy, double diagonalLengthPx) {\n             this.allowableThreshold = allowableThreshold;\n             this.minRadius = minRadius;\n             this.maxRadius = maxRadius;\n             this.minDist = minDist;\n             this.maxCannyThresh = maxCannyThresh;\n             this.accuracy = accuracy;\n+            this.diagonalLengthPx = diagonalLengthPx;\n         }\n     }\n }"
  },
  {
    "sha": "89efc86d9aecdcbcbbf2f5f26f89232dfc57d629",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindPolygonPipe.java",
    "status": "modified",
    "additions": 11,
    "deletions": 13,
    "changes": 24,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindPolygonPipe.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindPolygonPipe.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipe/impl/FindPolygonPipe.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -28,7 +28,7 @@\n \n public class FindPolygonPipe\n         extends CVPipe<List<Contour>, List<CVShape>, FindPolygonPipe.FindPolygonPipeParams> {\n-    private final MatOfPoint2f approx = new MatOfPoint2f();\n+    List<CVShape> shapeList = new ArrayList<>();\n \n     /*\n     * Runs the process for the pipe.\n@@ -38,18 +38,20 @@\n     */\n     @Override\n     protected List<CVShape> process(List<Contour> in) {\n-        // List containing all the output shapes\n-        List<CVShape> output = new ArrayList<>();\n+        shapeList.forEach(CVShape::release);\n+        shapeList.clear();\n+        shapeList = new ArrayList<>();\n \n-        for (Contour contour : in) output.add(getShape(contour));\n+        for (Contour contour : in) {\n+            shapeList.add(getShape(contour));\n+        }\n \n-        return output;\n+        return shapeList;\n     }\n \n     private CVShape getShape(Contour in) {\n \n         int corners = getCorners(in);\n-        corners = getCorners(in);\n \n         /*The contourShape enum has predefined shapes for Circles, Triangles, and Quads\n         meaning any shape not fitting in those predefined shapes must be a custom shape.\n@@ -70,14 +72,10 @@ private CVShape getShape(Contour in) {\n     }\n \n     private int getCorners(Contour contour) {\n-        // Release previous approx\n-        approx.release();\n-        Imgproc.approxPolyDP(\n-                contour.getMat2f(),\n-                approx,\n-                // Converts an accuracy percentage between 1-100 to an epsilon\n-                params.accuracyPercentage / 600.0 * Imgproc.arcLength(contour.getMat2f(), true),\n+        var approx = contour.getApproxPolyDp(\n+                (100 - params.accuracyPercentage) / 100.0 * Imgproc.arcLength(contour.getMat2f(), true),\n                 true);\n+\n         // The height of the resultant approximation is the number of vertices\n         return (int) approx.size().height;\n     }"
  },
  {
    "sha": "c08a2cb8eee1e9022df0b5a1ba2581ed91f5e7dc",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipe/impl/SpeckleRejectPipe.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/SpeckleRejectPipe.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipe/impl/SpeckleRejectPipe.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipe/impl/SpeckleRejectPipe.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -45,6 +45,8 @@\n             for (Contour c : in) {\n                 if (c.getArea() >= minAllowedArea) {\n                     m_despeckledContours.add(c);\n+                } else {\n+                    c.release();\n                 }\n             }\n         }"
  },
  {
    "sha": "556542d86489f230dae7f7fdbddcb5f367ddaf6a",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipeline.java",
    "status": "modified",
    "additions": 50,
    "deletions": 70,
    "changes": 120,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipeline.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipeline.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipeline.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -23,6 +23,8 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.opencv.core.Mat;\n import org.opencv.core.Point;\n+import org.photonvision.common.util.math.MathUtils;\n+import org.photonvision.raspi.PicamJNI;\n import org.photonvision.vision.frame.Frame;\n import org.photonvision.vision.opencv.*;\n import org.photonvision.vision.pipe.CVPipe.CVPipeResult;\n@@ -38,13 +40,11 @@\n     private final RotateImagePipe rotateImagePipe = new RotateImagePipe();\n     private final ErodeDilatePipe erodeDilatePipe = new ErodeDilatePipe();\n     private final HSVPipe hsvPipe = new HSVPipe();\n-    private final OutputMatPipe outputMatPipe = new OutputMatPipe();\n     private final SpeckleRejectPipe speckleRejectPipe = new SpeckleRejectPipe();\n     private final FindContoursPipe findContoursPipe = new FindContoursPipe();\n     private final FindPolygonPipe findPolygonPipe = new FindPolygonPipe();\n     private final FindCirclesPipe findCirclesPipe = new FindCirclesPipe();\n     private final FilterShapesPipe filterShapesPipe = new FilterShapesPipe();\n-    private final GroupContoursPipe groupContoursPipe = new GroupContoursPipe();\n     private final SortContoursPipe sortContoursPipe = new SortContoursPipe();\n     private final Collect2dTargetsPipe collect2dTargetsPipe = new Collect2dTargetsPipe();\n     private final CornerDetectionPipe cornerDetectionPipe = new CornerDetectionPipe();\n@@ -54,7 +54,6 @@\n     private final Draw3dTargetsPipe draw3dTargetsPipe = new Draw3dTargetsPipe();\n     private final CalculateFPSPipe calculateFPSPipe = new CalculateFPSPipe();\n \n-    private final Mat rawInputMat = new Mat();\n     private final Point[] rectPoints = new Point[4];\n \n     public ColoredShapePipeline() {\n@@ -88,9 +87,6 @@ protected void setPipeParamsImpl() {\n                 new HSVPipe.HSVParams(settings.hsvHue, settings.hsvSaturation, settings.hsvValue);\n         hsvPipe.setParams(hsvParams);\n \n-        OutputMatPipe.OutputMatParams outputMatParams = new OutputMatPipe.OutputMatParams();\n-        outputMatPipe.setParams(outputMatParams);\n-\n         SpeckleRejectPipe.SpeckleRejectParams speckleRejectParams =\n                 new SpeckleRejectPipe.SpeckleRejectParams(settings.contourSpecklePercentage);\n         speckleRejectPipe.setParams(speckleRejectParams);\n@@ -105,28 +101,24 @@ protected void setPipeParamsImpl() {\n \n         FindCirclesPipe.FindCirclePipeParams findCirclePipeParams =\n                 new FindCirclesPipe.FindCirclePipeParams(\n-                        settings.allowableThreshold,\n-                        settings.minRadius,\n+                        settings.circleDetectThreshold,\n+                        settings.contourRadius.getFirst(),\n                         settings.minDist,\n-                        settings.maxRadius,\n+                        settings.contourRadius.getSecond(),\n                         settings.maxCannyThresh,\n-                        settings.accuracy);\n+                        settings.circleAccuracy, Math.hypot(frameStaticProperties.imageWidth, frameStaticProperties.imageHeight));\n         findCirclesPipe.setParams(findCirclePipeParams);\n \n         FilterShapesPipe.FilterShapesPipeParams filterShapesPipeParams =\n                 new FilterShapesPipe.FilterShapesPipeParams(\n-                        settings.desiredShape,\n-                        settings.minArea,\n-                        settings.maxArea,\n-                        settings.minPeri,\n-                        settings.maxPeri);\n+                        settings.contourShape,\n+                        settings.contourArea.getFirst(),\n+                        settings.contourArea.getSecond(),\n+                        settings.contourPerimeter.getFirst(),\n+                        settings.contourPerimeter.getSecond(),\n+                        frameStaticProperties);\n         filterShapesPipe.setParams(filterShapesPipeParams);\n \n-        GroupContoursPipe.GroupContoursParams groupContoursParams =\n-                new GroupContoursPipe.GroupContoursParams(\n-                        settings.contourGroupingMode, settings.contourIntersection);\n-        groupContoursPipe.setParams(groupContoursParams);\n-\n         SortContoursPipe.SortContoursParams sortContoursParams =\n                 new SortContoursPipe.SortContoursParams(\n                         settings.contourSortMode,\n@@ -193,17 +185,41 @@ protected void setPipeParamsImpl() {\n     protected CVPipelineResult process(Frame frame, ColoredShapePipelineSettings settings) {\n         long sumPipeNanosElapsed = 0L;\n \n-        var rotateImageResult = rotateImagePipe.run(frame.image.getMat());\n-        sumPipeNanosElapsed += rotateImageResult.nanosElapsed;\n+        CVPipeResult<Mat> hsvPipeResult;\n+        Mat rawInputMat;\n+        if (frame.image.getMat().channels() != 1) {\n+            var rotateImageResult = rotateImagePipe.run(frame.image.getMat());\n+            sumPipeNanosElapsed = rotateImageResult.nanosElapsed;\n \n-        rawInputMat.release();\n-        frame.image.getMat().copyTo(rawInputMat);\n+            rawInputMat = frame.image.getMat();\n \n-        var erodeDilateResult = erodeDilatePipe.run(rawInputMat);\n-        sumPipeNanosElapsed += erodeDilateResult.nanosElapsed;\n+            hsvPipeResult = hsvPipe.run(rawInputMat);\n+            sumPipeNanosElapsed += hsvPipeResult.nanosElapsed;\n+        } else {\n+            // Try to copy the color frame.\n+            long inputMatPtr = PicamJNI.grabFrame(true);\n+            if (inputMatPtr != 0) {\n+                // If we grabbed it (in color copy mode), make a new Mat of it\n+                rawInputMat = new Mat(inputMatPtr);\n+            } else {\n+                // Otherwise, the input mat is frame we got from the camera\n+                rawInputMat = frame.image.getMat();\n+            }\n+\n+            // We can skip a few steps if the image is single channel because we've already done them on\n+            // the GPU\n+            hsvPipeResult = new CVPipeResult<>();\n+            hsvPipeResult.output = frame.image.getMat();\n+            hsvPipeResult.nanosElapsed = MathUtils.wpiNanoTime() - frame.timestampNanos;\n+\n+            sumPipeNanosElapsed += hsvPipeResult.nanosElapsed;\n+        }\n \n-        CVPipeResult<Mat> hsvPipeResult = hsvPipe.run(rawInputMat);\n-        sumPipeNanosElapsed += hsvPipeResult.nanosElapsed;\n+//        var erodeDilateResult = erodeDilatePipe.run(rawInputMat);\n+//        sumPipeNanosElapsed += erodeDilateResult.nanosElapsed;\n+//\n+//        CVPipeResult<Mat> hsvPipeResult = hsvPipe.run(rawInputMat);\n+//        sumPipeNanosElapsed += hsvPipeResult.nanosElapsed;\n \n         CVPipeResult<List<Contour>> findContoursResult = findContoursPipe.run(hsvPipeResult.output);\n         sumPipeNanosElapsed += findContoursResult.nanosElapsed;\n@@ -212,8 +228,8 @@ protected CVPipelineResult process(Frame frame, ColoredShapePipelineSettings set\n                 speckleRejectPipe.run(findContoursResult.output);\n         sumPipeNanosElapsed += speckleRejectResult.nanosElapsed;\n \n-        List<CVShape> shapes;\n-        if (settings.desiredShape == ContourShape.Circle) {\n+        List<CVShape> shapes = null;\n+        if (settings.contourShape == ContourShape.Circle) {\n             CVPipeResult<List<CVShape>> findCirclesResult =\n                     findCirclesPipe.run(Pair.of(hsvPipeResult.output, speckleRejectResult.output));\n             sumPipeNanosElapsed += findCirclesResult.nanosElapsed;\n@@ -228,15 +244,10 @@ protected CVPipelineResult process(Frame frame, ColoredShapePipelineSettings set\n         CVPipeResult<List<CVShape>> filterShapeResult = filterShapesPipe.run(shapes);\n         sumPipeNanosElapsed += filterShapeResult.nanosElapsed;\n \n-        CVPipeResult<List<PotentialTarget>> groupContoursResult =\n-                groupContoursPipe.run(\n-                        filterShapeResult.output.stream()\n-                                .map(CVShape::getContour)\n-                                .collect(Collectors.toList()));\n-        sumPipeNanosElapsed += groupContoursResult.nanosElapsed;\n-\n         CVPipeResult<List<PotentialTarget>> sortContoursResult =\n-                sortContoursPipe.run(groupContoursResult.output);\n+                sortContoursPipe.run(filterShapeResult.output.stream()\n+                        .map(shape -> new PotentialTarget(shape.getContour(), shape))\n+                        .collect(Collectors.toList()));\n         sumPipeNanosElapsed += sortContoursResult.nanosElapsed;\n \n         CVPipeResult<List<TrackedTarget>> collect2dTargetsResult =\n@@ -245,7 +256,7 @@ protected CVPipelineResult process(Frame frame, ColoredShapePipelineSettings set\n \n         List<TrackedTarget> targetList;\n \n-        if (settings.solvePNPEnabled && settings.desiredShape == ContourShape.Circle) {\n+        if (settings.solvePNPEnabled && settings.contourShape == ContourShape.Circle) {\n             var cornerDetectionResult = cornerDetectionPipe.run(collect2dTargetsResult.output);\n             collect2dTargetsResult.output.forEach(\n                     shape -> {\n@@ -262,37 +273,6 @@ protected CVPipelineResult process(Frame frame, ColoredShapePipelineSettings set\n             targetList = collect2dTargetsResult.output;\n         }\n \n-        // Draw 2D Crosshair on input and output\n-        var draw2dCrosshairResultOnInput = draw2dCrosshairPipe.run(Pair.of(rawInputMat, targetList));\n-        sumPipeNanosElapsed += draw2dCrosshairResultOnInput.nanosElapsed;\n-\n-        var draw2dCrosshairResultOnOutput =\n-                draw2dCrosshairPipe.run(Pair.of(hsvPipeResult.output, targetList));\n-        sumPipeNanosElapsed += draw2dCrosshairResultOnOutput.nanosElapsed;\n-\n-        // Draw 2D contours on input and output\n-        var draw2dContoursResultOnInput =\n-                draw2DTargetsPipe.run(Pair.of(rawInputMat, collect2dTargetsResult.output));\n-        sumPipeNanosElapsed += draw2dContoursResultOnInput.nanosElapsed;\n-\n-        var draw2dContoursResultOnOutput =\n-                draw2DTargetsPipe.run(Pair.of(hsvPipeResult.output, collect2dTargetsResult.output));\n-        sumPipeNanosElapsed += draw2dContoursResultOnOutput.nanosElapsed;\n-\n-        if (settings.solvePNPEnabled && settings.desiredShape == ContourShape.Circle) {\n-            var drawOnInputResult =\n-                    draw3dTargetsPipe.run(Pair.of(rawInputMat, collect2dTargetsResult.output));\n-            sumPipeNanosElapsed += drawOnInputResult.nanosElapsed;\n-\n-            var drawOnOutputResult =\n-                    draw3dTargetsPipe.run(Pair.of(hsvPipeResult.output, collect2dTargetsResult.output));\n-            sumPipeNanosElapsed += drawOnOutputResult.nanosElapsed;\n-        }\n-\n-        // Convert single-channel HSV output mat to 3-channel BGR in preparation for streaming\n-        var outputMatPipeResult = outputMatPipe.run(hsvPipeResult.output);\n-        sumPipeNanosElapsed += outputMatPipeResult.nanosElapsed;\n-\n         var fpsResult = calculateFPSPipe.run(null);\n         var fps = fpsResult.output;\n "
  },
  {
    "sha": "c1568f0f73d260e5dd8134f06d7060d437c08189",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipelineSettings.java",
    "status": "modified",
    "additions": 25,
    "deletions": 38,
    "changes": 63,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipelineSettings.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipelineSettings.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipeline/ColoredShapePipelineSettings.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -19,6 +19,8 @@\n \n import com.fasterxml.jackson.annotation.JsonTypeName;\n import java.util.Objects;\n+import org.photonvision.common.util.numbers.DoubleCouple;\n+import org.photonvision.common.util.numbers.IntegerCouple;\n import org.photonvision.vision.calibration.CameraCalibrationCoefficients;\n import org.photonvision.vision.opencv.ContourGroupingMode;\n import org.photonvision.vision.opencv.ContourIntersectionDirection;\n@@ -27,19 +29,15 @@\n \n @JsonTypeName(\"ColoredShapePipelineSettings\")\n public class ColoredShapePipelineSettings extends AdvancedPipelineSettings {\n-    public ContourShape desiredShape = ContourShape.Triangle;\n-    public double minArea = Integer.MIN_VALUE;\n-    public double maxArea = Integer.MAX_VALUE;\n-    public double minPeri = Integer.MIN_VALUE;\n-    public double maxPeri = Integer.MAX_VALUE;\n+    public ContourShape contourShape = ContourShape.Triangle;\n+    public DoubleCouple contourPerimeter = new DoubleCouple(0, Double.MAX_VALUE);\n     public double accuracyPercentage = 10.0;\n     // Circle detection\n-    public int allowableThreshold = 5;\n-    public int minRadius = 0;\n-    public int maxRadius = 0;\n-    public int minDist = 10;\n+    public int circleDetectThreshold = 5;\n+    public IntegerCouple contourRadius = new IntegerCouple(0, 100);\n+    public int minDist = 20;\n     public int maxCannyThresh = 90;\n-    public int accuracy = 20;\n+    public int circleAccuracy = 20;\n     // how many contours to attempt to group (Single, Dual)\n     public ContourGroupingMode contourGroupingMode = ContourGroupingMode.Single;\n \n@@ -71,61 +69,50 @@ public boolean equals(Object o) {\n         if (o == null || getClass() != o.getClass()) return false;\n         if (!super.equals(o)) return false;\n         ColoredShapePipelineSettings that = (ColoredShapePipelineSettings) o;\n-        return Double.compare(that.minArea, minArea) == 0\n-                && Double.compare(that.maxArea, maxArea) == 0\n-                && Double.compare(that.minPeri, minPeri) == 0\n-                && Double.compare(that.maxPeri, maxPeri) == 0\n-                && Double.compare(that.accuracyPercentage, accuracyPercentage) == 0\n-                && allowableThreshold == that.allowableThreshold\n-                && minRadius == that.minRadius\n-                && maxRadius == that.maxRadius\n+        return Double.compare(that.accuracyPercentage, accuracyPercentage) == 0\n+                && circleDetectThreshold == that.circleDetectThreshold\n                 && minDist == that.minDist\n                 && maxCannyThresh == that.maxCannyThresh\n-                && accuracy == that.accuracy\n-                && solvePNPEnabled == that.solvePNPEnabled\n+                && circleAccuracy == that.circleAccuracy\n                 && cornerDetectionUseConvexHulls == that.cornerDetectionUseConvexHulls\n                 && cornerDetectionExactSideCount == that.cornerDetectionExactSideCount\n                 && cornerDetectionSideCount == that.cornerDetectionSideCount\n                 && Double.compare(that.cornerDetectionAccuracyPercentage, cornerDetectionAccuracyPercentage)\n                         == 0\n-                && desiredShape == that.desiredShape\n+                && erode == that.erode\n+                && dilate == that.dilate\n+                && contourShape == that.contourShape\n+                && Objects.equals(contourArea, that.contourArea)\n+                && Objects.equals(contourPerimeter, that.contourPerimeter)\n+                && Objects.equals(contourRadius, that.contourRadius)\n                 && contourGroupingMode == that.contourGroupingMode\n                 && contourIntersection == that.contourIntersection\n                 && Objects.equals(cameraCalibration, that.cameraCalibration)\n-                && Objects.equals(targetModel, that.targetModel)\n-                && cornerDetectionStrategy == that.cornerDetectionStrategy\n-                && erode == that.erode\n-                && dilate == that.dilate;\n+                && cornerDetectionStrategy == that.cornerDetectionStrategy;\n     }\n \n     @Override\n     public int hashCode() {\n         return Objects.hash(\n                 super.hashCode(),\n-                desiredShape,\n-                minArea,\n-                maxArea,\n-                minPeri,\n-                maxPeri,\n+                contourShape,\n+                contourArea,\n+                contourPerimeter,\n                 accuracyPercentage,\n-                allowableThreshold,\n-                minRadius,\n-                maxRadius,\n+                circleDetectThreshold,\n+                contourRadius,\n                 minDist,\n                 maxCannyThresh,\n-                accuracy,\n+                circleAccuracy,\n                 contourGroupingMode,\n                 contourIntersection,\n-                solvePNPEnabled,\n                 cameraCalibration,\n-                targetModel,\n                 cornerDetectionStrategy,\n                 cornerDetectionUseConvexHulls,\n                 cornerDetectionExactSideCount,\n                 cornerDetectionSideCount,\n                 cornerDetectionAccuracyPercentage,\n                 erode,\n-                dilate,\n-                accuracy);\n+                dilate);\n     }\n }"
  },
  {
    "sha": "a3739605e49d8c328fe6705c1e67f03d3d74d78d",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipeline/DriverModePipelineSettings.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/DriverModePipelineSettings.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/DriverModePipelineSettings.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipeline/DriverModePipelineSettings.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -24,7 +24,6 @@\n \n @JsonTypeName(\"DriverModePipelineSettings\")\n public class DriverModePipelineSettings extends CVPipelineSettings {\n-    public RobotOffsetPointMode offsetPointMode = RobotOffsetPointMode.None;\n     public DoubleCouple offsetPoint = new DoubleCouple();\n \n     public DriverModePipelineSettings() {"
  },
  {
    "sha": "54ebbdca788334bbbacf7eface5468c1415b14e3",
    "filename": "photon-core/src/main/java/org/photonvision/vision/pipeline/OutputStreamPipeline.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/OutputStreamPipeline.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/pipeline/OutputStreamPipeline.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/pipeline/OutputStreamPipeline.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -22,6 +22,7 @@\n import org.photonvision.vision.frame.Frame;\n import org.photonvision.vision.frame.FrameStaticProperties;\n import org.photonvision.vision.opencv.CVMat;\n+import org.photonvision.vision.opencv.ContourShape;\n import org.photonvision.vision.opencv.DualOffsetValues;\n import org.photonvision.vision.pipe.impl.*;\n import org.photonvision.vision.pipeline.result.CVPipelineResult;\n@@ -115,7 +116,10 @@ public CVPipelineResult process(\n         sumPipeNanosElapsed += pipeProfileNanos[6] = draw2dTargetsOnOutput.nanosElapsed;\n \n         // Draw 3D Targets on input and output if necessary\n-        if (settings.solvePNPEnabled) {\n+        if (settings.solvePNPEnabled\n+                || (settings.solvePNPEnabled\n+                        && settings instanceof ColoredShapePipelineSettings\n+                        && ((ColoredShapePipelineSettings) settings).contourShape == ContourShape.Circle)) {\n             var drawOnInputResult = draw3dTargetsPipe.run(Pair.of(inMat, targetsToDraw));\n             sumPipeNanosElapsed += pipeProfileNanos[7] = drawOnInputResult.nanosElapsed;\n "
  },
  {
    "sha": "803f2f460520a0d9518ce854279c2dcacb20c01f",
    "filename": "photon-core/src/main/java/org/photonvision/vision/processes/VisionModule.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/processes/VisionModule.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/processes/VisionModule.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/processes/VisionModule.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -257,11 +257,15 @@ public void run() {\n                     try {\n                         var osr = outputStreamPipeline.process(inputFrame, outputFrame, settings, targets);\n                         consumeFpsLimitedResult(osr);\n+                    } catch (Exception e) {\n+                        // Never die\n+                        logger.error(\"Exception while running stream runnable!\", e);\n+                    }\n+                    try {\n                         inputFrame.release();\n                         outputFrame.release();\n                     } catch (Exception e) {\n-                        // Never die\n-                        logger.error(\"Exception in stream runnable!\", e);\n+                        logger.error(\"Exception freeing frames\", e);\n                     }\n                 } else {\n                     // busy wait! hurray!"
  },
  {
    "sha": "e720df80b7e4431a48f2961a33f9208d382dc9f2",
    "filename": "photon-core/src/main/java/org/photonvision/vision/processes/VisionModuleChangeSubscriber.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/processes/VisionModuleChangeSubscriber.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/processes/VisionModuleChangeSubscriber.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/processes/VisionModuleChangeSubscriber.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -183,8 +183,8 @@ public void onDataChangeEvent(DataChangeEvent<?> event) {\n                         var actual = new DoubleCouple(orig.get(0), orig.get(1));\n                         propField.set(currentSettings, actual);\n                     } else if (propType.isAssignableFrom(IntegerCouple.class)) {\n-                        var orig = (ArrayList<Integer>) newPropValue;\n-                        var actual = new IntegerCouple(orig.get(0), orig.get(1));\n+                        var orig = (ArrayList<Number>) newPropValue;\n+                        var actual = new IntegerCouple(orig.get(0).intValue(), orig.get(1).intValue());\n                         propField.set(currentSettings, actual);\n                     } else if (propType.equals(Double.TYPE)) {\n                         propField.setDouble(currentSettings, ((Number) newPropValue).doubleValue());"
  },
  {
    "sha": "750ae1133fb742d721b4eb259edfa6c24ef05d76",
    "filename": "photon-core/src/main/java/org/photonvision/vision/target/PotentialTarget.java",
    "status": "modified",
    "additions": 14,
    "deletions": 2,
    "changes": 16,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/target/PotentialTarget.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/target/PotentialTarget.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/target/PotentialTarget.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -20,22 +20,33 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.opencv.core.RotatedRect;\n+import org.photonvision.vision.opencv.CVShape;\n import org.photonvision.vision.opencv.Contour;\n+import org.photonvision.vision.opencv.ContourShape;\n import org.photonvision.vision.opencv.Releasable;\n \n public class PotentialTarget implements Releasable {\n \n     public final Contour m_mainContour;\n     public final List<Contour> m_subContours;\n+    public final CVShape shape;\n \n     public PotentialTarget(Contour inputContour) {\n-        m_mainContour = inputContour;\n-        m_subContours = new ArrayList<>(); // empty\n+        this(inputContour, List.of());\n     }\n \n     public PotentialTarget(Contour inputContour, List<Contour> subContours) {\n+        this(inputContour, subContours, null);\n+    }\n+\n+    public PotentialTarget(Contour inputContour, List<Contour> subContours, CVShape shape) {\n         m_mainContour = inputContour;\n         m_subContours = new ArrayList<>(subContours);\n+        this.shape = shape;\n+    }\n+\n+    public PotentialTarget(Contour inputContour, CVShape shape) {\n+        this(inputContour, List.of(),shape);\n     }\n \n     public RotatedRect getMinAreaRect() {\n@@ -53,5 +64,6 @@ public void release() {\n             sc.release();\n         }\n         m_subContours.clear();\n+        if(shape != null) shape.release();\n     }\n }"
  },
  {
    "sha": "5feb1f9360e4b0bea4ae6fd7815060a3f44ab8a4",
    "filename": "photon-core/src/main/java/org/photonvision/vision/target/TrackedTarget.java",
    "status": "modified",
    "additions": 13,
    "deletions": 10,
    "changes": 23,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/target/TrackedTarget.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/main/java/org/photonvision/vision/target/TrackedTarget.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/main/java/org/photonvision/vision/target/TrackedTarget.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -25,9 +25,7 @@\n import org.opencv.core.Point;\n import org.opencv.core.RotatedRect;\n import org.photonvision.vision.frame.FrameStaticProperties;\n-import org.photonvision.vision.opencv.Contour;\n-import org.photonvision.vision.opencv.DualOffsetValues;\n-import org.photonvision.vision.opencv.Releasable;\n+import org.photonvision.vision.opencv.*;\n \n public class TrackedTarget implements Releasable {\n     public final Contour m_mainContour;\n@@ -47,11 +45,14 @@\n \n     private Transform2d m_cameraToTarget = new Transform2d();\n \n+    private CVShape m_shape;\n+\n     private Mat m_cameraRelativeTvec, m_cameraRelativeRvec;\n \n-    public TrackedTarget(PotentialTarget origTarget, TargetCalculationParameters params) {\n+    public TrackedTarget(PotentialTarget origTarget, TargetCalculationParameters params, CVShape shape) {\n         this.m_mainContour = origTarget.m_mainContour;\n         this.m_subContours = origTarget.m_subContours;\n+        this.m_shape = shape;\n         calculateValues(params);\n     }\n \n@@ -170,13 +171,15 @@ public void setCameraRelativeRvec(Mat cameraRelativeRvec) {\n         cameraRelativeRvec.copyTo(this.m_cameraRelativeRvec);\n     }\n \n+    public CVShape getShape() {\n+        return m_shape;\n+    }\n+\n+    public void setShape(CVShape shape) {\n+        this.m_shape = shape;\n+    }\n+\n     public HashMap<String, Object> toHashMap() {\n-        //                pitch: 0,\n-        //                    yaw: 0,\n-        //                    skew: 0,\n-        //                    area: 0,\n-        //                    // 3D only\n-        //                    pose: {x: 0, y: 0, rot: 0},\n         var ret = new HashMap<String, Object>();\n         ret.put(\"pitch\", getPitch());\n         ret.put(\"yaw\", getYaw());"
  },
  {
    "sha": "062a67b2c734c0c1b286e0fdd13deb2100690aed",
    "filename": "photon-core/src/test/java/org/photonvision/common/ShapeBenchmarkTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/test/java/org/photonvision/common/ShapeBenchmarkTest.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/test/java/org/photonvision/common/ShapeBenchmarkTest.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/test/java/org/photonvision/common/ShapeBenchmarkTest.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -68,8 +68,8 @@ public void Shape240pBenchmark() {\n         pipeline.getSettings().outputShowMultipleTargets = true;\n         pipeline.getSettings().contourGroupingMode = ContourGroupingMode.Single;\n         pipeline.getSettings().contourIntersection = ContourIntersectionDirection.Up;\n-        pipeline.getSettings().desiredShape = ContourShape.Custom;\n-        pipeline.getSettings().allowableThreshold = 10;\n+        pipeline.getSettings().contourShape = ContourShape.Custom;\n+        pipeline.getSettings().circleDetectThreshold = 10;\n         pipeline.getSettings().accuracyPercentage = 30.0;\n         var frameProvider =\n                 new FileFrameProvider(\n@@ -89,8 +89,8 @@ public void Shape480pBenchmark() {\n         pipeline.getSettings().outputShowMultipleTargets = true;\n         pipeline.getSettings().contourGroupingMode = ContourGroupingMode.Single;\n         pipeline.getSettings().contourIntersection = ContourIntersectionDirection.Up;\n-        pipeline.getSettings().desiredShape = ContourShape.Custom;\n-        pipeline.getSettings().allowableThreshold = 10;\n+        pipeline.getSettings().contourShape = ContourShape.Custom;\n+        pipeline.getSettings().circleDetectThreshold = 10;\n         pipeline.getSettings().accuracyPercentage = 30.0;\n \n         var frameProvider =\n@@ -111,8 +111,8 @@ public void Shape720pBenchmark() {\n         pipeline.getSettings().outputShowMultipleTargets = true;\n         pipeline.getSettings().contourGroupingMode = ContourGroupingMode.Single;\n         pipeline.getSettings().contourIntersection = ContourIntersectionDirection.Up;\n-        pipeline.getSettings().desiredShape = ContourShape.Custom;\n-        pipeline.getSettings().allowableThreshold = 10;\n+        pipeline.getSettings().contourShape = ContourShape.Custom;\n+        pipeline.getSettings().circleDetectThreshold = 10;\n         pipeline.getSettings().accuracyPercentage = 30.0;\n \n         var frameProvider =\n@@ -133,8 +133,8 @@ public void Shape1920x1440Benchmark() {\n         pipeline.getSettings().outputShowMultipleTargets = true;\n         pipeline.getSettings().contourGroupingMode = ContourGroupingMode.Single;\n         pipeline.getSettings().contourIntersection = ContourIntersectionDirection.Up;\n-        pipeline.getSettings().desiredShape = ContourShape.Custom;\n-        pipeline.getSettings().allowableThreshold = 10;\n+        pipeline.getSettings().contourShape = ContourShape.Custom;\n+        pipeline.getSettings().circleDetectThreshold = 10;\n         pipeline.getSettings().accuracyPercentage = 30.0;\n \n         var frameProvider ="
  },
  {
    "sha": "3d32c631d1e3c7c6a5fe93d96ab3661b6a6b6a1e",
    "filename": "photon-core/src/test/java/org/photonvision/vision/pipeline/CirclePNPTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/test/java/org/photonvision/vision/pipeline/CirclePNPTest.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/test/java/org/photonvision/vision/pipeline/CirclePNPTest.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/test/java/org/photonvision/vision/pipeline/CirclePNPTest.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -92,8 +92,8 @@ public void testCircle() {\n         pipeline.getSettings().hsvValue.set(100, 255);\n         pipeline.getSettings().outputShouldDraw = true;\n         pipeline.getSettings().maxCannyThresh = 50;\n-        pipeline.getSettings().accuracy = 15;\n-        pipeline.getSettings().allowableThreshold = 5;\n+        pipeline.getSettings().circleAccuracy = 15;\n+        pipeline.getSettings().circleDetectThreshold = 5;\n         pipeline.getSettings().solvePNPEnabled = true;\n         pipeline.getSettings().cornerDetectionAccuracyPercentage = 4;\n         pipeline.getSettings().cornerDetectionUseConvexHulls = true;\n@@ -103,9 +103,9 @@ public void testCircle() {\n         pipeline.getSettings().outputShowMultipleTargets = false;\n         pipeline.getSettings().contourGroupingMode = ContourGroupingMode.Single;\n         pipeline.getSettings().contourIntersection = ContourIntersectionDirection.Up;\n-        pipeline.getSettings().desiredShape = ContourShape.Circle;\n-        pipeline.getSettings().allowableThreshold = 10;\n-        pipeline.getSettings().minRadius = 30;\n+        pipeline.getSettings().contourShape = ContourShape.Circle;\n+        pipeline.getSettings().circleDetectThreshold = 10;\n+        pipeline.getSettings().contourRadius.setFirst(30);\n         pipeline.getSettings().accuracyPercentage = 30.0;\n \n         var frameProvider ="
  },
  {
    "sha": "fbb1403da157f6a1fd8a2a5815f4cc0322d03ccd",
    "filename": "photon-core/src/test/java/org/photonvision/vision/pipeline/ColoredShapePipelineTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/PhotonVision/photonvision/blob/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/test/java/org/photonvision/vision/pipeline/ColoredShapePipelineTest.java",
    "raw_url": "https://github.com/PhotonVision/photonvision/raw/78ab061c6dfc8f67d664075addd019396723af90/photon-core/src/test/java/org/photonvision/vision/pipeline/ColoredShapePipelineTest.java",
    "contents_url": "https://api.github.com/repos/PhotonVision/photonvision/contents/photon-core/src/test/java/org/photonvision/vision/pipeline/ColoredShapePipelineTest.java?ref=78ab061c6dfc8f67d664075addd019396723af90",
    "patch": "@@ -40,7 +40,7 @@ public static void testTriangleDetection(\n \n     public static void testQuadrilateralDetection(\n             ColoredShapePipeline pipeline, ColoredShapePipelineSettings settings, Frame frame) {\n-        settings.desiredShape = ContourShape.Quadrilateral;\n+        settings.contourShape = ContourShape.Quadrilateral;\n         pipeline.settings = settings;\n         CVPipelineResult colouredShapePipelineResult = pipeline.run(frame, QuirkyCamera.DefaultCamera);\n         TestUtils.showImage(\n@@ -50,7 +50,7 @@ public static void testQuadrilateralDetection(\n \n     public static void testCustomShapeDetection(\n             ColoredShapePipeline pipeline, ColoredShapePipelineSettings settings, Frame frame) {\n-        settings.desiredShape = ContourShape.Custom;\n+        settings.contourShape = ContourShape.Custom;\n         pipeline.settings = settings;\n         CVPipelineResult colouredShapePipelineResult = pipeline.run(frame, QuirkyCamera.DefaultCamera);\n         TestUtils.showImage(\n@@ -61,7 +61,7 @@ public static void testCustomShapeDetection(\n     @Test\n     public static void testCircleShapeDetection(\n             ColoredShapePipeline pipeline, ColoredShapePipelineSettings settings, Frame frame) {\n-        settings.desiredShape = ContourShape.Circle;\n+        settings.contourShape = ContourShape.Circle;\n         pipeline.settings = settings;\n         CVPipelineResult colouredShapePipelineResult = pipeline.run(frame, QuirkyCamera.DefaultCamera);\n         TestUtils.showImage(\n@@ -77,8 +77,8 @@ public static void testPowercellDetection(\n         settings.hsvSaturation.set(100, 255);\n         settings.hsvValue.set(100, 255);\n         settings.maxCannyThresh = 50;\n-        settings.accuracy = 15;\n-        settings.allowableThreshold = 5;\n+        settings.circleAccuracy = 15;\n+        settings.circleDetectThreshold = 5;\n         var frameProvider =\n                 new FileFrameProvider(\n                         TestUtils.getPowercellImagePath(TestUtils.PowercellTestImages.kPowercell_test_6, false),\n@@ -102,8 +102,8 @@ public static void main(String[] args) {\n         settings.outputShowMultipleTargets = true;\n         settings.contourGroupingMode = ContourGroupingMode.Single;\n         settings.contourIntersection = ContourIntersectionDirection.Up;\n-        settings.desiredShape = ContourShape.Triangle;\n-        settings.allowableThreshold = 10;\n+        settings.contourShape = ContourShape.Triangle;\n+        settings.circleDetectThreshold = 10;\n         settings.accuracyPercentage = 30.0;\n \n         ColoredShapePipeline pipeline = new ColoredShapePipeline();"
  }
]
