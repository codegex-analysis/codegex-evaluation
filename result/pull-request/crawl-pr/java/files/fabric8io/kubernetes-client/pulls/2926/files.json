[
  {
    "sha": "0bae94d1d3bdee661d88fae5adfcaae3829531d6",
    "filename": "crd-generator/api/src/main/java/io/fabric8/crd/generator/CustomResourceInfo.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/fabric8io/kubernetes-client/blob/9af2f146b67c1ea219df8308efc99a90da19aa65/crd-generator/api/src/main/java/io/fabric8/crd/generator/CustomResourceInfo.java",
    "raw_url": "https://github.com/fabric8io/kubernetes-client/raw/9af2f146b67c1ea219df8308efc99a90da19aa65/crd-generator/api/src/main/java/io/fabric8/crd/generator/CustomResourceInfo.java",
    "contents_url": "https://api.github.com/repos/fabric8io/kubernetes-client/contents/crd-generator/api/src/main/java/io/fabric8/crd/generator/CustomResourceInfo.java?ref=9af2f146b67c1ea219df8308efc99a90da19aa65",
    "patch": "@@ -19,7 +19,6 @@\n import io.fabric8.kubernetes.client.CustomResource;\n import io.fabric8.kubernetes.client.KubernetesClientException;\n import io.fabric8.kubernetes.model.Scope;\n-import io.fabric8.kubernetes.model.annotation.ShortNames;\n import io.sundr.codegen.functions.ClassTo;\n import io.sundr.codegen.model.TypeDef;\n import io.sundr.codegen.model.TypeRef;\n@@ -137,13 +136,11 @@ public static CustomResourceInfo fromClass(Class<? extends CustomResource> custo\n     try {\n       final CustomResource instance = customResource.getDeclaredConstructor().newInstance();\n \n-      final String[] shortNames = Optional.ofNullable(customResource.getAnnotation(ShortNames.class))\n-        .map(ShortNames::value)\n-        .orElse(new String[]{});\n+      final String[] shortNames = CustomResource.getShortNames(customResource);\n \n       final Scope scope = Arrays.stream(customResource.getInterfaces())\n-        .filter(t -> t.toString().equals(Namespaced.class.getTypeName()))\n-        .map(t -> Scope.NAMESPACED).findFirst().orElse(Scope.CLUSTER);\n+        .filter(t -> t.getTypeName().equals(Namespaced.class.getTypeName()))\n+        .findFirst().map(t -> Scope.NAMESPACED).orElse(Scope.CLUSTER);\n \n       final TypeDef definition = ClassTo.TYPEDEF.apply(customResource);\n       "
  },
  {
    "sha": "386bcc3542b43469c35618074058d338b1ba3267",
    "filename": "crd-generator/api/src/test/java/io/fabric8/crd/generator/CustomResourceInfoTest.java",
    "status": "modified",
    "additions": 53,
    "deletions": 11,
    "changes": 64,
    "blob_url": "https://github.com/fabric8io/kubernetes-client/blob/9af2f146b67c1ea219df8308efc99a90da19aa65/crd-generator/api/src/test/java/io/fabric8/crd/generator/CustomResourceInfoTest.java",
    "raw_url": "https://github.com/fabric8io/kubernetes-client/raw/9af2f146b67c1ea219df8308efc99a90da19aa65/crd-generator/api/src/test/java/io/fabric8/crd/generator/CustomResourceInfoTest.java",
    "contents_url": "https://api.github.com/repos/fabric8io/kubernetes-client/contents/crd-generator/api/src/test/java/io/fabric8/crd/generator/CustomResourceInfoTest.java?ref=9af2f146b67c1ea219df8308efc99a90da19aa65",
    "patch": "@@ -15,30 +15,72 @@\n  */\n package io.fabric8.crd.generator;\n \n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.Namespaced;\n import io.fabric8.kubernetes.client.CustomResource;\n+import io.fabric8.kubernetes.model.Scope;\n import io.fabric8.kubernetes.model.annotation.Group;\n+import io.fabric8.kubernetes.model.annotation.ShortNames;\n import io.fabric8.kubernetes.model.annotation.Version;\n import org.junit.jupiter.api.Test;\n \n public class CustomResourceInfoTest {\n \n-  public static class Spec {}\n-  public static class Status {}\n+  public static class Spec {\n \n-  @Group(Foo.GROUP)\n-  @Version(Foo.VERSION)\n-  public static class Foo extends CustomResource<Spec, Status> {\n+  }\n+\n+  public static class Status {\n+\n+  }\n+\n+  private static final String GROUP = \"sample.fabric8.io\";\n+  private static final String VERSION = \"v1\";\n+\n+  @Group(GROUP)\n+  @Version(VERSION)\n+  @ShortNames(\"s\")\n+  public static class ClusteredCR extends CustomResource<Spec, Status> {\n+\n+  }\n+\n+  @Group(GROUP)\n+  @Version(VERSION)\n+  public static class NamespacedCR extends CustomResource<Spec, Status> implements Namespaced {\n+\n+  }\n+\n+  @Test\n+  void shouldBeProperlyScoped() {\n+    CustomResourceInfo info = CustomResourceInfo.fromClass(ClusteredCR.class);\n+    assertEquals(GROUP, info.group());\n+    assertEquals(VERSION, info.version());\n+    assertEquals(Scope.CLUSTER, info.scope());\n \n-    public static final String GROUP = \"sample.fabric8.io\";\n-    public static final String VERSION = \"v1\";\n+    info = CustomResourceInfo.fromClass(NamespacedCR.class);\n+    assertEquals(GROUP, info.group());\n+    assertEquals(VERSION, info.version());\n+    assertEquals(Scope.NAMESPACED, info.scope());\n   }\n \n   @Test\n-  void foo() {\n-    final CustomResourceInfo info = CustomResourceInfo.fromClass(Foo.class);\n-    assertEquals(Foo.GROUP, info.group());\n-    assertEquals(Foo.VERSION, info.version());\n+  void shouldProperlyCreateCustomResourceInfo() {\n+    CustomResourceInfo info = CustomResourceInfo.fromClass(ClusteredCR.class);\n+    assertEquals(GROUP, info.group());\n+    assertEquals(VERSION, info.version());\n+    assertEquals(Scope.CLUSTER, info.scope());\n+    assertEquals(ClusteredCR.class.getCanonicalName(), info.crClassName()); // todo: should we actually use the type name here?\n+    assertEquals(Spec.class.getTypeName(), info.specClassName().get());\n+    assertEquals(Status.class.getTypeName(), info.statusClassName().get());\n+    assertEquals(CustomResource.getSingular(ClusteredCR.class), info.singular());\n+    assertEquals(CustomResource.getPlural(ClusteredCR.class), info.plural());\n+    assertEquals(CustomResource.getCRDName(ClusteredCR.class), info.crdName());\n+    assertArrayEquals(CustomResource.getShortNames(ClusteredCR.class), info.shortNames());\n+    assertEquals(true, info.served());\n+    assertEquals(true, info.storage());\n+    assertEquals(HasMetadata.getKind(ClusteredCR.class), info.kind());\n   }\n }"
  },
  {
    "sha": "d3e773f5634f687f0658a6f0c64cff88939e689c",
    "filename": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/fabric8io/kubernetes-client/blob/9af2f146b67c1ea219df8308efc99a90da19aa65/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java",
    "raw_url": "https://github.com/fabric8io/kubernetes-client/raw/9af2f146b67c1ea219df8308efc99a90da19aa65/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java",
    "contents_url": "https://api.github.com/repos/fabric8io/kubernetes-client/contents/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java?ref=9af2f146b67c1ea219df8308efc99a90da19aa65",
    "patch": "@@ -29,10 +29,12 @@\n import io.fabric8.kubernetes.model.Scope;\n import io.fabric8.kubernetes.model.annotation.Group;\n import io.fabric8.kubernetes.model.annotation.Plural;\n+import io.fabric8.kubernetes.model.annotation.ShortNames;\n import io.fabric8.kubernetes.model.annotation.Singular;\n import io.fabric8.kubernetes.model.annotation.Version;\n import io.sundr.builder.annotations.Buildable;\n import java.util.Locale;\n+import java.util.Optional;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -224,6 +226,18 @@ public String getCRDName() {\n     return crdName;\n   }\n \n+  /**\n+   * Retrieves the short names associated with this CustomResource or an empty array if none was provided\n+   *\n+   * @param clazz the CustomResource class which short names we want to retrieve\n+   * @return the short names associated with this CustomResource or an empty array if none was provided\n+   */\n+  public static String[] getShortNames(Class<? extends CustomResource> clazz) {\n+    return Optional.ofNullable(clazz.getAnnotation(ShortNames.class))\n+      .map(ShortNames::value)\n+      .orElse(new String[]{});\n+  }\n+\n   /**\n    * Retrieves the scope that this CustomResource targets\n    *"
  }
]
