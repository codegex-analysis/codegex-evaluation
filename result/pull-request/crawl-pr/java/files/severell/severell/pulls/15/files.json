[
  {
    "sha": "6c5169a459d579dae2fd99af288de6fd0984cd73",
    "filename": "core/pom.xml",
    "status": "modified",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/pom.xml",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/pom.xml",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/pom.xml?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -17,6 +17,32 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>io.undertow</groupId>\n+            <artifactId>undertow-core</artifactId>\n+            <version>2.1.0.Final</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.auto.service</groupId>\n+            <artifactId>auto-service</artifactId>\n+            <version>1.0-rc7</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-core</artifactId>\n+            <version>${log4j.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>redis.clients</groupId>\n+            <artifactId>jedis</artifactId>\n+            <version>3.5.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.maven.shared</groupId>\n+            <artifactId>maven-invoker</artifactId>\n+            <version>3.0.1</version>\n+        </dependency>\n         <dependency>\n             <groupId>com.fasterxml.jackson.core</groupId>\n             <artifactId>jackson-databind</artifactId>\n@@ -53,6 +79,12 @@\n             <groupId>com.googlecode.json-simple</groupId>\n             <artifactId>json-simple</artifactId>\n             <version>1.1.1</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>junit</groupId>\n+                    <artifactId>junit</artifactId>\n+                </exclusion>\n+            </exclusions>\n         </dependency>\n         <dependency>\n             <groupId>javax</groupId>\n@@ -101,6 +133,12 @@\n             <artifactId>picocli</artifactId>\n             <version>4.6.1</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.reflections</groupId>\n+            <artifactId>reflections</artifactId>\n+            <version>0.9.12</version>\n+            <scope>compile</scope>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "494317b2125acff0595fe13e668263622c27c1b2",
    "filename": "core/src/main/java/com/severell/core/annotations/AnnotationProcessor.java",
    "status": "added",
    "additions": 224,
    "deletions": 0,
    "changes": 224,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/annotations/AnnotationProcessor.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/annotations/AnnotationProcessor.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/annotations/AnnotationProcessor.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,224 @@\n+package com.severell.core.annotations;\n+\n+import com.google.auto.service.AutoService;\n+import com.severell.core.http.*;\n+import com.severell.core.session.Session;\n+import com.squareup.javapoet.*;\n+import org.apache.maven.shared.utils.StringUtils;\n+\n+import javax.annotation.processing.*;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.*;\n+import javax.lang.model.type.MirroredTypesException;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.util.Elements;\n+import javax.lang.model.util.Types;\n+import java.io.IOException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SupportedAnnotationTypes(\n+        \"com.severell.core.http.*\")\n+@SupportedSourceVersion(SourceVersion.RELEASE_11)\n+@AutoService(Processor.class)\n+public class AnnotationProcessor extends AbstractProcessor {\n+\n+    private Filer filer;\n+    private Elements elements;\n+    private ProcessingEnvironment env;\n+    private Types typeUtils;\n+    private MethodSpec.Builder builder;\n+    private MethodSpec.Builder middlewareBuilder;\n+\n+    @Override\n+    public synchronized void init(ProcessingEnvironment env) {\n+        filer = env.getFiler();\n+        elements = env.getElementUtils();\n+        this.env = env;\n+        typeUtils = env.getTypeUtils();\n+\n+        builder = MethodSpec.methodBuilder(\"build\");\n+        builder.addModifiers(Modifier.PUBLIC);\n+        TypeName listOfRouteExecutor = ParameterizedTypeName.get(ArrayList.class, RouteExecutor.class);\n+        builder.returns(listOfRouteExecutor);\n+        builder.addStatement(\"$T<$T> list = new $T<>()\", ArrayList.class, RouteExecutor.class, ArrayList.class);\n+\n+\n+\n+        middlewareBuilder = MethodSpec.methodBuilder(\"buildDefaultMiddleware\");\n+        middlewareBuilder.addModifiers(Modifier.PUBLIC);\n+        TypeName listOfMethodExecutor = ParameterizedTypeName.get(ArrayList.class, MiddlewareExecutor.class);\n+        middlewareBuilder.returns(listOfMethodExecutor);\n+        middlewareBuilder.addStatement(\"$T<$T> defaultMiddleware = new $T<>()\",ArrayList.class, MiddlewareExecutor.class, ArrayList.class);\n+    }\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        try {\n+\n+            if(!roundEnv.processingOver()) {\n+                int routeIndex = 0;\n+\n+                for(Element element : roundEnv.getElementsAnnotatedWith(Route.class)){\n+                    routeIndex = processRoute(builder, routeIndex, element);\n+                }\n+\n+                Set<? extends Element> middlewareList = roundEnv.getElementsAnnotatedWith(MiddlewareInclude.class);\n+\n+                if(middlewareList.size() > 0) {\n+                    List<? extends TypeMirror> list = convertToTypeMirrors(middlewareList);\n+                    TypeMirror middlewareMirror = list.get(0);\n+                    List<? extends Element> listOfMiddlwareElements = elements.getTypeElement(middlewareMirror.toString()).getEnclosedElements();\n+                    List<? extends TypeMirror> listOfMiddlwareMirrors = listOfMiddlwareElements.stream()\n+                            .filter(field -> field.getKind() == ElementKind.FIELD).map(Element::asType).collect(Collectors.toList());\n+                    buildMiddleware(middlewareBuilder, listOfMiddlwareMirrors, \"defaultMiddleware\");\n+                }\n+            } else {\n+                builder.addStatement(\"return list\");\n+\n+                middlewareBuilder.addStatement(\"return defaultMiddleware\");\n+\n+\n+                TypeSpec helloWorld = TypeSpec.classBuilder(\"_severell$RouteBuilder\")\n+                        .addJavadoc(\"GENERATED CLASS: This class is generated by the severell-maven-plugin. DO NOT EDIT\")\n+                        .addModifiers(Modifier.PUBLIC)\n+                        .addMethod(builder.build())\n+                        .addMethod(middlewareBuilder.build())\n+                        .build();\n+\n+\n+                JavaFile javaFile = JavaFile.builder(\"com.severell.core\", helloWorld)\n+                        .build();\n+\n+                javaFile.writeTo(filer);\n+            }\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private int processRoute(MethodSpec.Builder builder, int routeIndex, Element element) {\n+        HttpMethod method = element.getAnnotation(Route.class).method();\n+        String path  = element.getAnnotation(Route.class).path();\n+        TypeMirror controllerMirror = element.getEnclosingElement().asType();\n+\n+        String middlwareListName = \"middlewareList\" + routeIndex;\n+        builder.addCode(\"\\n // ********* ROUTE: $S - $S ********* \\n\", method, path);\n+        CodeBlock.Builder LambdaBuilder = CodeBlock.builder()\n+                .add(\"(request, response, container) -> {\\n\").indent()\n+                .addStatement(\"$T cont = new $T()\", controllerMirror,controllerMirror);\n+\n+\n+        Needs annotation = element.getEnclosingElement().getAnnotation(Needs.class);\n+        if(annotation != null) {\n+            Optional<String> needsStream = Arrays.stream(annotation.value()).filter(need -> \"container\".equals(need)).findAny();\n+            if(needsStream.isPresent()) {\n+                LambdaBuilder.addStatement(\"cont.setContainer(container)\");\n+            }\n+        }\n+\n+\n+        ArrayList<String> paramList = new ArrayList<String>();\n+        List<? extends VariableElement> params = ((ExecutableElement) element).getParameters();\n+\n+        resolve(LambdaBuilder, paramList, params);\n+\n+        CodeBlock Lambda = LambdaBuilder.addStatement(\"cont.$L($L)\", element.getSimpleName(), StringUtils.join(paramList.iterator(), \",\"))\n+                .unindent().add(\"}\")\n+                .build();\n+\n+        //We need to instantiate and resolve middleware here.\n+        Middleware middleware = element.getAnnotation(Middleware.class);\n+\n+        List<? extends TypeMirror> value = null;\n+        if( middleware != null )\n+\n+        {\n+            try\n+            {\n+                middleware.value();\n+            }\n+            catch( MirroredTypesException mte )\n+            {\n+                value = mte.getTypeMirrors();\n+            }\n+        }\n+        List<? extends TypeMirror> set = null;\n+        if(value != null) {\n+             set = value.stream().collect(Collectors.toList());\n+        }\n+\n+        builder.addStatement(\"$T<$T> \" + middlwareListName + \" = new $T<>()\",ArrayList.class, MiddlewareExecutor.class, ArrayList.class);\n+        buildMiddleware(builder, set, middlwareListName);\n+\n+        builder.addStatement(\"list.add(new $T($S, com.severell.core.http.HttpMethod.$L, $L, $L))\", RouteExecutor.class, path, method, middlwareListName, Lambda.toString());\n+        routeIndex++;\n+        return routeIndex;\n+    }\n+\n+    private List<? extends TypeMirror> convertToTypeMirrors(Set<? extends Element> elements) {\n+        return elements.stream().map(Element::asType).collect(Collectors.toList());\n+    }\n+\n+    private void buildMiddleware(MethodSpec.Builder builder, List<? extends TypeMirror> value, String middlwareListName) {\n+\n+\n+        if(value != null) {\n+            for (TypeMirror mid : value) {\n+                CodeBlock.Builder middlewareBuilder = CodeBlock.builder();\n+                Element constr = getConstructor(typeUtils.asElement(mid));\n+\n+                middlewareBuilder\n+                        .add(\"(request, response, container, chain) -> {\\n\").indent();\n+                List<? extends VariableElement> parameters = ((ExecutableElement)constr).getParameters();\n+                ArrayList<String> middlwareParamList = new ArrayList<>();\n+                resolve(middlewareBuilder, middlwareParamList, parameters);\n+                middlewareBuilder.addStatement(\"$T middleware = new $T($L)\", mid, mid, StringUtils.join(middlwareParamList.iterator(), \",\"));\n+                middlewareBuilder.addStatement(\"middleware.handle(request, response, chain)\");\n+                builder.addStatement(middlwareListName + \".add(new $T($L))\", MiddlewareExecutor.class, middlewareBuilder.unindent().add(\"}\").build().toString());\n+            }\n+\n+        }\n+    }\n+\n+    public void resolve(CodeBlock.Builder lambdaBuilder, ArrayList<String> paramList, List<? extends VariableElement> params) {\n+        int count = 0;\n+        for(VariableElement p : params) {\n+            if (typeUtils.isSameType(p.asType(), elements.getTypeElement(Request.class.getName()).asType())) {\n+                paramList.add(\"request\");\n+            } else if (typeUtils.isSameType(p.asType(), elements.getTypeElement(Response.class.getName()).asType())) {\n+                paramList.add(\"response\");\n+            } else if (typeUtils.isSameType(p.asType(), elements.getTypeElement(Session.class.getName()).asType())){\n+                paramList.add(\"request.session()\");\n+            } else {\n+                lambdaBuilder.addStatement(\"$T p\" + count + \" = container.make($L)\", p, p.asType() + \".class\");\n+\n+                Needs annotation = elements.getTypeElement(p.asType().toString()).getAnnotation(Needs.class);\n+                boolean hasNeedsAnnotation = annotation != null && Arrays.stream(annotation.value()).filter(need -> \"request\".equals(need)).findAny().isPresent();\n+                boolean isSession = typeUtils.isSameType(p.asType(), elements.getTypeElement(Session.class.getName()).asType());\n+                if(hasNeedsAnnotation || isSession) {\n+                    lambdaBuilder.addStatement(\"p\" + count + \".setRequest(request)\");\n+                }\n+\n+                paramList.add(\"p\" + count);\n+            }\n+            count++;\n+        }\n+    }\n+\n+\n+    public Element getConstructor(Element clazz){\n+        for(Element el : clazz.getEnclosedElements()) {\n+            if(el.getKind() == ElementKind.CONSTRUCTOR) {\n+                return el;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7a8f04dcaa1f729a4ba83592d2a9bb2a7e25b451",
    "filename": "core/src/main/java/com/severell/core/commands/Command.java",
    "status": "modified",
    "additions": 30,
    "deletions": 1,
    "changes": 31,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/Command.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/Command.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/Command.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -5,9 +5,12 @@\n import com.severell.core.database.ConnectionBuilder;\n import com.severell.core.database.PostgresConnection;\n import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.maven.shared.invoker.*;\n \n-import java.io.IOException;\n+import java.io.*;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.concurrent.Callable;\n \n public abstract class Command implements Callable<Integer> {\n@@ -39,6 +42,31 @@ protected Connection getConnection() {\n         return connection;\n     }\n \n+    public void runMavenGoals(String... goals) {\n+        PrintStream originalStream = System.out;\n+        System.setOut(new PrintStream(new ByteArrayOutputStream()));\n+        try {\n+            Invoker invoker = new DefaultInvoker();\n+            InvokerLogger logger = invoker.getLogger();\n+            logger.setThreshold(InvokerLogger.FATAL);\n+            invoker.setLogger(logger);\n+\n+            InvocationRequest request = new DefaultInvocationRequest();\n+            request.setBatchMode(true);\n+            request.setGoals(Arrays.asList(goals));\n+            invoker.execute(request);\n+        } catch (MavenInvocationException | IllegalStateException e) {\n+            //Implement Proper Logging Here.\n+            e.printStackTrace();\n+        } finally{\n+            System.setOut(originalStream);\n+        }\n+    }\n+\n+    public void compile() {\n+        runMavenGoals(\"compile\");\n+    }\n+\n     @Override\n     public Integer call() {\n         try {\n@@ -49,4 +77,5 @@ public Integer call() {\n         }\n         return 0;\n     }\n+\n }"
  },
  {
    "sha": "ca87522bcb1aa3a7df237384e8e728aed17ce9a0",
    "filename": "core/src/main/java/com/severell/core/commands/MakeController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeController.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeController.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MakeController.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,6 +1,6 @@\n package com.severell.core.commands;\n \n-import com.severell.core.http.Response;\n+import com.severell.core.http.ResponseOld;\n import com.squareup.javapoet.JavaFile;\n import com.squareup.javapoet.MethodSpec;\n import com.squareup.javapoet.TypeSpec;\n@@ -11,8 +11,6 @@\n import java.io.File;\n import java.io.FileWriter;\n import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.concurrent.Callable;\n \n @CommandLine.Command(name=\"make:controller\", mixinStandardHelpOptions = true, version = \"0.1\", description = \"Create a new controller file\" )\n public class MakeController extends MakeableCommand {\n@@ -25,7 +23,7 @@ public void execute() throws IOException {\n         MethodSpec index = MethodSpec.methodBuilder(\"index\")\n                 .addModifiers(Modifier.PUBLIC)\n                 .addException(IOException.class)\n-                .addParameter(Response.class, \"response\")\n+                .addParameter(ResponseOld.class, \"response\")\n                 .returns(void.class).build();\n \n         TypeSpec helloWorld = TypeSpec.classBuilder(name)"
  },
  {
    "sha": "0857e377942dff5d0a3bb89b528d1dbb258f2b32",
    "filename": "core/src/main/java/com/severell/core/commands/MakeMigration.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeMigration.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeMigration.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MakeMigration.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -7,6 +7,7 @@\n import com.squareup.javapoet.JavaFile;\n import com.squareup.javapoet.MethodSpec;\n import com.squareup.javapoet.TypeSpec;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n import picocli.CommandLine;\n \n import javax.lang.model.element.Modifier;\n@@ -69,6 +70,7 @@ public void execute() throws IOException {\n         make(javaFile);\n \n         CommandLogger.printlnGreen(String.format(\"Created Migration - %s\", name));\n+\n     }\n \n     private MethodSpec getUpMethodSpec(String up, String tableName, boolean isCreate, boolean isUpdate) {"
  },
  {
    "sha": "01a67a722c629f38e32115ed7d359848947c5b05",
    "filename": "core/src/main/java/com/severell/core/commands/MakeModel.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeModel.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeModel.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MakeModel.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -5,6 +5,7 @@\n import io.ebean.Model;\n import io.ebean.annotation.WhenCreated;\n import io.ebean.annotation.WhenModified;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n import org.apache.maven.shared.utils.StringUtils;\n import picocli.CommandLine;\n \n@@ -49,6 +50,11 @@ public void execute() throws IOException {\n         make(javaFile);\n \n         CommandLogger.printlnGreen(String.format(\"Created Model - %s\", name));\n+\n+        System.out.println(\"\");\n+        CommandLogger.printlnGreen(String.format(\"Compiling & Processing Model\"));\n+        runMavenGoals(\"compile\",\"process-classes\");\n+\n     }\n \n     private TypeSpec getTypeSpec(String tableName, TableMetaData metaData, String modelName) {"
  },
  {
    "sha": "107bf1fd5400c83c12f594b02fad21f2a57fe749",
    "filename": "core/src/main/java/com/severell/core/commands/MakeableCommand.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeableCommand.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MakeableCommand.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MakeableCommand.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,10 +1,14 @@\n package com.severell.core.commands;\n \n+import com.severell.core.config.Config;\n import com.squareup.javapoet.JavaFile;\n+import org.apache.maven.shared.invoker.*;\n import picocli.CommandLine;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.Writer;\n+import java.util.Collections;\n \n public abstract class MakeableCommand extends Command{\n "
  },
  {
    "sha": "04cffdeb8a126cea732e4e1999e00ff494d3d44f",
    "filename": "core/src/main/java/com/severell/core/commands/Migrate.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/Migrate.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/Migrate.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/Migrate.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -3,6 +3,7 @@\n import com.severell.core.config.Config;\n import com.severell.core.database.Connection;\n import com.severell.core.database.migrations.*;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n \n import java.io.File;\n import java.io.IOException;"
  },
  {
    "sha": "8730797010c155944d5c66dffc613604b39f7b90",
    "filename": "core/src/main/java/com/severell/core/commands/MigrateCommand.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MigrateCommand.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MigrateCommand.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MigrateCommand.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,6 +1,7 @@\n package com.severell.core.commands;\n \n import com.severell.core.database.Connection;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n import picocli.CommandLine;\n \n @CommandLine.Command(name=\"migrate\", mixinStandardHelpOptions = true, version = \"0.1\", description = \"Run migrations\" )\n@@ -9,6 +10,9 @@\n \n     @Override\n     public void execute() {\n+        CommandLogger.printlnGreen(String.format(\"Compiling Migrations...\"));\n+        compile();\n+\n         try {\n             Connection con = connection == null ? getConnection() : connection;\n             new Migrate(con).runUp();"
  },
  {
    "sha": "75e8134a36b4774bd7529996a6a8c64d988d3c64",
    "filename": "core/src/main/java/com/severell/core/commands/MigrateResetCommand.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MigrateResetCommand.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MigrateResetCommand.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MigrateResetCommand.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,12 +1,16 @@\n package com.severell.core.commands;\n \n+import org.apache.maven.shared.invoker.MavenInvocationException;\n import picocli.CommandLine;\n \n @CommandLine.Command(name=\"migrate:reset\", mixinStandardHelpOptions = true, version = \"0.1\", description = \"Reset migrations\" )\n public class MigrateResetCommand extends Command{\n \n     @Override\n     public void execute() {\n+        CommandLogger.printlnGreen(String.format(\"Compiling Migrations...\"));\n+        compile();\n+\n         try {\n             new Migrate(connection == null ? getConnection() : connection).reset();\n         } catch (Exception e) {"
  },
  {
    "sha": "8be165e79ff91614a9f77a9bdabb05f2f7137a8c",
    "filename": "core/src/main/java/com/severell/core/commands/MigrateRollbackCommand.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MigrateRollbackCommand.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/commands/MigrateRollbackCommand.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/commands/MigrateRollbackCommand.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,12 +1,17 @@\n package com.severell.core.commands;\n \n+import org.apache.maven.shared.invoker.MavenInvocationException;\n import picocli.CommandLine;\n \n @CommandLine.Command(name=\"migrate:rollback\", mixinStandardHelpOptions = true, version = \"0.1\", description = \"Rollback migrations\" )\n public class MigrateRollbackCommand extends Command{\n \n     @Override\n     public void execute() {\n+        CommandLogger.printlnGreen(String.format(\"Compiling Migrations...\"));\n+        compile();\n+\n+\n         try {\n             new Migrate(connection == null ? getConnection() : connection).rollback();\n         } catch (Exception e) {"
  },
  {
    "sha": "1d78ac46152771a82f4af0162501d5114bf4aac6",
    "filename": "core/src/main/java/com/severell/core/container/Container.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/container/Container.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/container/Container.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/container/Container.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -3,6 +3,7 @@\n import com.severell.core.http.NeedsRequest;\n import com.severell.core.http.Request;\n import com.severell.core.http.Response;\n+import com.severell.core.http.ResponseOld;\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;"
  },
  {
    "sha": "16a128317228acae02318de26bb4b9c269741de6",
    "filename": "core/src/main/java/com/severell/core/controller/BaseController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/controller/BaseController.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/controller/BaseController.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/controller/BaseController.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,7 +1,9 @@\n package com.severell.core.controller;\n import com.severell.core.container.Container;\n+import com.severell.core.http.Needs;\n import com.severell.core.jobs.Tasker;\n \n+@Needs(\"container\")\n public class BaseController {\n \n     private Container container;"
  },
  {
    "sha": "1de46a0d88ad7138441760a247cc26bb9aadcb86",
    "filename": "core/src/main/java/com/severell/core/drivers/BaseSessionDriver.java",
    "status": "removed",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/severell/severell/blob/93ce1a61db7795eba8c1663e935ca827d094f450/core/src/main/java/com/severell/core/drivers/BaseSessionDriver.java",
    "raw_url": "https://github.com/severell/severell/raw/93ce1a61db7795eba8c1663e935ca827d094f450/core/src/main/java/com/severell/core/drivers/BaseSessionDriver.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/drivers/BaseSessionDriver.java?ref=93ce1a61db7795eba8c1663e935ca827d094f450",
    "patch": "@@ -1,10 +0,0 @@\n-package com.severell.core.drivers;\n-\n-import com.severell.core.http.NeedsRequest;\n-\n-/**\n- * Base Class for all Session Drivers\n- */\n-public abstract class BaseSessionDriver extends NeedsRequest {\n-\n-}"
  },
  {
    "sha": "fad4b533a8b1ed6d661399deb37e80a7b3fd434b",
    "filename": "core/src/main/java/com/severell/core/error/ErrorHandler.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/error/ErrorHandler.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/error/ErrorHandler.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/error/ErrorHandler.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -3,8 +3,10 @@\n import com.severell.core.config.Config;\n import com.severell.core.container.Container;\n import com.severell.core.exceptions.NotFoundException;\n+import com.severell.core.http.RequestOld;\n import com.severell.core.http.Request;\n import com.severell.core.http.Response;\n+import com.severell.core.http.ResponseOld;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -28,12 +30,10 @@ public ErrorHandler(Container c, String basePath) {\n         this.basePath = basePath;\n     }\n \n-    public void handle(Exception e, HttpServletRequest request, HttpServletResponse response) {\n+    public void handle(Exception e, Request request, Response response) {\n         e.printStackTrace();\n         if(Config.isLocal()) {\n-            Response resp = new Response(response, c);\n-            Request req = new Request(request);\n-            displayErrorScreen(e, resp, req);\n+            displayErrorScreen(e, response, request);\n         }\n     }\n \n@@ -65,7 +65,7 @@ private void displayErrorScreen(Exception e, Response response, Request request)\n \n             here.put(\"exception\", e.getClass().getName());\n             here.put(\"exceptionTitle\", e.getMessage());\n-            here.put(\"url\", request.getRequestURL());\n+            here.put(\"url\", request.path());\n \n             response.renderTemplateLiteral(template.getTemplateLiteral(), templateName, here);\n         } catch (Exception ex) {"
  },
  {
    "sha": "58ad6f17276e7962ad195efeb27bc7fd3e4811ec",
    "filename": "core/src/main/java/com/severell/core/http/Cookie.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Cookie.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Cookie.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Cookie.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,63 @@\n+package com.severell.core.http;\n+\n+import java.util.Date;\n+\n+public interface Cookie {\n+    String getName();\n+\n+    String getValue();\n+\n+    Cookie setValue(String var1);\n+\n+    String getPath();\n+\n+    Cookie setPath(String var1);\n+\n+    String getDomain();\n+\n+    Cookie setDomain(String var1);\n+\n+    Integer getMaxAge();\n+\n+    Cookie setMaxAge(Integer var1);\n+\n+    boolean isDiscard();\n+\n+    Cookie setDiscard(boolean var1);\n+\n+    boolean isSecure();\n+\n+    Cookie setSecure(boolean var1);\n+\n+    int getVersion();\n+\n+    Cookie setVersion(int var1);\n+\n+    boolean isHttpOnly();\n+\n+    Cookie setHttpOnly(boolean var1);\n+\n+    Date getExpires();\n+\n+    Cookie setExpires(Date var1);\n+\n+    String getComment();\n+\n+    Cookie setComment(String var1);\n+\n+    default boolean isSameSite() {\n+        return false;\n+    }\n+\n+    default Cookie setSameSite(boolean sameSite) {\n+        throw new UnsupportedOperationException(\"Not implemented\");\n+    }\n+\n+    default String getSameSiteMode() {\n+        return null;\n+    }\n+\n+    default Cookie setSameSiteMode(String mode) {\n+        throw new UnsupportedOperationException(\"Not implemented\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "402f74163e78a5e0a4bb7ef6af0a0420120bb38a",
    "filename": "core/src/main/java/com/severell/core/http/Dispatcher.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Dispatcher.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Dispatcher.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Dispatcher.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -4,9 +4,8 @@\n import com.severell.core.error.ErrorHandler;\n import com.severell.core.exceptions.ControllerException;\n import com.severell.core.exceptions.MiddlewareException;\n-import com.severell.core.exceptions.NotFoundException;\n+import org.apache.logging.log4j.Logger;\n \n-import javax.servlet.ServletException;\n import java.io.IOException;\n \n /**\n@@ -17,6 +16,7 @@\n     private final Container c;\n     private Router router;\n     private final ErrorHandler errorHandler;\n+    private Logger logger;\n \n     /**\n      * Creates a new Dispatcher\n@@ -27,6 +27,7 @@ public Dispatcher(Container c) {\n         this.c =c;\n \n         this.errorHandler = c.make(ErrorHandler.class);\n+        this.logger = c.make(Logger.class);\n     }\n \n     /**\n@@ -45,12 +46,12 @@ public void initRouter(){\n      */\n     public void dispatch(Request request, Response response) {\n         try {\n-           this.doRequest(request, response);\n+            this.doRequest(request, response);\n         } catch (Exception e) {\n             errorHandler.handle(e, request, response);\n         } finally {\n             try{\n-                response.getWriter().close();\n+                response.close();\n             } catch (IOException e) {\n                 e.printStackTrace();\n             } catch (IllegalStateException e) {\n@@ -69,13 +70,15 @@ public void dispatch(Request request, Response response) {\n      * @throws ControllerException\n      */\n     private void doRequest(Request request, Response response) throws Exception {\n-        RouteExecutor ref = router.lookup(request.getRequestURI(), request.getMethod(), request);\n+        logger.info(String.format(\"Request - %s - %s\", request.method(), request.path()));\n+        RouteExecutor ref = router.lookup(request.path(), request.method(), request);\n \n         if(ref != null) {\n             MiddlewareManager manager = new MiddlewareManager(ref, c);\n             manager.filterRequest(request, response);\n         } else {\n-            errorHandler.handle(new NotFoundException(\"No route has been configured for the given request \"), request, response);\n+            logger.warn(String.format(\"%s - %s - %s\", request.method(), request.path(), \"No route has been configured for the given request \"));\n+//            errorHandler.handle(new NotFoundException(\"No route has been configured for the given request \"), request, response);\n         }\n     }\n }"
  },
  {
    "sha": "233cc2cb3c3a6dc5218d2347e1d7b76a3592b351",
    "filename": "core/src/main/java/com/severell/core/http/HttpMethod.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/HttpMethod.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/HttpMethod.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/HttpMethod.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,11 @@\n+package com.severell.core.http;\n+\n+public enum HttpMethod {\n+    GET,\n+    POST,\n+    PUT,\n+    PATCH,\n+    DELETE,\n+    OPTIONS,\n+    HEAD\n+}"
  },
  {
    "sha": "98ffcb55819c337291be73ddab7002c7211db111",
    "filename": "core/src/main/java/com/severell/core/http/Middleware.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Middleware.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Middleware.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Middleware.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,12 @@\n+package com.severell.core.http;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.SOURCE)\n+@Target(ElementType.METHOD)\n+public @interface Middleware {\n+    Class[] value();\n+}"
  },
  {
    "sha": "31a5bfc66a89bfa2ad982a0b5bca5fa34525ad58",
    "filename": "core/src/main/java/com/severell/core/http/MiddlewareChain.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/MiddlewareChain.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/MiddlewareChain.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/MiddlewareChain.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,7 +1,6 @@\n package com.severell.core.http;\n \n import com.severell.core.container.Container;\n-import com.severell.core.exceptions.MiddlewareException;\n \n import java.util.Iterator;\n import java.util.List;\n@@ -35,6 +34,7 @@ public void setTarget(RouteExecutor target) {\n      * @param request\n      * @param response\n      * @throws Exception\n+     * @return\n      */\n     public void execute(Container c, Request request, Response response) throws Exception {\n         this.container = c;"
  },
  {
    "sha": "1cf797059617a9464c4047d4bdc6e2441259886b",
    "filename": "core/src/main/java/com/severell/core/http/MiddlewareInclude.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/MiddlewareInclude.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/MiddlewareInclude.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/MiddlewareInclude.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,12 @@\n+package com.severell.core.http;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.SOURCE)\n+@Target(ElementType.TYPE)\n+public @interface MiddlewareInclude {\n+\n+}"
  },
  {
    "sha": "97d0bebda169a456dec42df7fa3b81f232feeea2",
    "filename": "core/src/main/java/com/severell/core/http/Needs.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Needs.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Needs.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Needs.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,10 @@\n+package com.severell.core.http;\n+\n+import java.lang.annotation.*;\n+\n+@Inherited\n+@Retention(RetentionPolicy.CLASS)\n+@Target(ElementType.TYPE)\n+public @interface Needs {\n+    String[] value();\n+}"
  },
  {
    "sha": "a591d6b98471b7ecd6ad3cc0cb8739b51881b0b1",
    "filename": "core/src/main/java/com/severell/core/http/NeedsRequest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/NeedsRequest.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/NeedsRequest.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/NeedsRequest.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,9 +1,11 @@\n package com.severell.core.http;\n \n /**\n- * If an classes extends this then the HTTP {@link Request} object will\n- * automatically get injected. See {@link com.severell.core.drivers.BaseSessionDriver}\n+ * If an classes extends this then the HTTP {@link RequestOld} object will\n+ * automatically get injected. See {@link com.severell.core.session.BaseSessionDriver}\n  */\n+\n+@Needs(\"request\")\n public class NeedsRequest {\n \n     protected Request request;"
  },
  {
    "sha": "5b4a973840f6864e2e00eaeedc30236d47325894",
    "filename": "core/src/main/java/com/severell/core/http/Request.java",
    "status": "modified",
    "additions": 19,
    "deletions": 107,
    "changes": 126,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Request.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Request.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Request.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,151 +1,63 @@\n package com.severell.core.http;\n \n-import org.json.simple.JSONObject;\n-import org.json.simple.parser.JSONParser;\n-import org.json.simple.parser.ParseException;\n+import com.severell.core.session.Session;\n+import java.util.HashMap;\n \n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletRequestWrapper;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URLDecoder;\n-import java.util.*;\n-import java.util.stream.Collectors;\n+public interface Request {\n \n-/**\n- * A wrapper around {@link HttpServletRequest} with simpler syntax.\n- */\n-public class Request extends HttpServletRequestWrapper {\n \n-    /**\n-     * Constructs a request object wrapping the given request.\n-     *\n-     * @param request the {@link HttpServletRequest} to be wrapped.\n-     * @throws IllegalArgumentException if the request is null\n-     */\n-    public Request(HttpServletRequest request) {\n-        super(request);\n-    }\n+    Session session();\n \n-    private HashMap<String, String> urlParams;\n-    private Map<String, String> queryData;\n-    private Map<String, String> inputData;\n \n     /**\n      * Used internally to add the named route parameters.\n      *\n      * @param key Name of the route parameter\n      * @param value Value of the router parameter\n      */\n-    protected void addParam(String key, String value) {\n+    default void addParam(String key, String value) {\n+        HashMap<String, String> urlParams = params();\n         if(urlParams == null) {\n             urlParams = new HashMap<String, String>();\n         }\n \n         urlParams.put(key, value);\n     }\n \n+    /**\n+     * Get all route parameters\n+     * @return Returns a HashMap containing all the route parameters\n+     */\n+    HashMap<String, String> params();\n+\n     /**\n      * Get a named route parameter\n      * @param name The name of the route parameter\n      * @return Returns a string containing the route parameter for the given name\n      */\n-    public String param(String name) {\n-        if(urlParams == null) {\n-            return null;\n-        }\n-\n-        return urlParams.get(name);\n-    }\n+    String param(String name);\n \n     /**\n      * Get a specific input value. This will return both query string parameters and body data.\n      *\n      * @param name Key of the input data\n      * @return The requested input data.\n      */\n-    public String input(String name) {\n-        if(inputData == null) {\n-            inputData = new HashMap<>();\n-\n-            String contentType = getContentType();\n-            if(contentType != null) {\n-                contentType = contentType.split(\";\")[0];\n-            }\n-            if(\"application/json\".equals(contentType)) {\n-                JSONParser jsonParser = new JSONParser();\n-                JSONObject obj = null;\n-                try {\n-                    obj = (JSONObject) jsonParser.parse(getReader());\n-                    Iterator<?> keys = obj.keySet().iterator();\n-\n-                    while( keys.hasNext() ){\n-                        String key = (String)keys.next();\n-                        String value = String.valueOf(obj.get(key));\n-                        inputData.put(key, value);\n-\n-                    }\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                } catch (ParseException e) {\n-                    e.printStackTrace();\n-                }\n-\n-            }\n-        }\n-\n-\n-        return inputData.get(name) == null ? getParameter(name) : inputData.get(name);\n-    }\n+     String input(String name);\n \n     /**\n      * Get a specific query string value.\n      *\n      * @param key Key for the query string data.\n      * @return Returns a string of the query string data.\n      */\n-    public String query(String key) {\n-        if(queryData == null) {\n-            parseQueryString();\n-        }\n-\n-        return queryData.get(key);\n-    }\n+    String query(String key);\n \n-    private void parseQueryString() {\n-        String queryString = getQueryString();\n-        if(queryString != null) {\n-            this.queryData = Arrays.stream(queryString.split(\"&\")).map(entry -> {\n-                try {\n-                    return URLDecoder.decode(entry, \"UTF-8\");\n-                } catch (UnsupportedEncodingException e) {\n-                    e.printStackTrace();\n-                }\n-                return entry;\n-            }).collect(Collectors.toMap(\n-                    entry -> {\n-                        String[] parts = entry.split(\"=\");\n-                        if(parts != null && parts.length > 0) {\n-                            return parts[0];\n-                        }\n+    Cookie cookie(String s);\n \n-                        return \"\";\n-                    },\n-                    entry -> {\n-                        String[] parts = entry.split(\"=\");\n-                        if(parts != null && parts.length > 1) {\n-                            return parts[1];\n-                        }\n+    String method();\n \n-                        return \"\";\n-                    },\n-                    (key1, key2) -> key1\n-            ));\n-        }\n+    String path();\n \n-        if(queryData == null) {\n-            queryData = new HashMap<>();\n-        }\n-    }\n+    String header(String s);\n }"
  },
  {
    "sha": "0fe17c535cd4a68ddc56cd5dc7c76eb1d51a1541",
    "filename": "core/src/main/java/com/severell/core/http/RequestOld.java",
    "status": "added",
    "additions": 193,
    "deletions": 0,
    "changes": 193,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/RequestOld.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/RequestOld.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/RequestOld.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,193 @@\n+package com.severell.core.http;\n+\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import javax.servlet.http.HttpSession;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A wrapper around {@link HttpServletRequest} with simpler syntax.\n+ */\n+public class RequestOld extends HttpServletRequestWrapper {\n+\n+    /**\n+     * Constructs a request object wrapping the given request.\n+     *\n+     * @param request the {@link HttpServletRequest} to be wrapped.\n+     * @throws IllegalArgumentException if the request is null\n+     */\n+    public RequestOld(HttpServletRequest request) {\n+        super(request);\n+    }\n+\n+    private HashMap<String, String> urlParams;\n+    private Map<String, String> queryData;\n+    private Map<String, String> inputData;\n+    private HttpSession session;\n+\n+    public void setSession(HttpSession session) {\n+        this.session = session;\n+    }\n+\n+    public HttpSession genereateNewSession() {\n+        return super.getSession(true);\n+    }\n+\n+    @Override\n+    public HttpSession getSession() {\n+        if(session != null) {\n+            return session;\n+        }\n+\n+        return super.getSession();\n+    }\n+\n+    @Override\n+    public HttpSession getSession(boolean create) {\n+        if(session != null) {\n+            return session;\n+        }\n+\n+        return super.getSession(create);\n+    }\n+\n+\n+    /**\n+     * Used internally to add the named route parameters.\n+     *\n+     * @param key Name of the route parameter\n+     * @param value Value of the router parameter\n+     */\n+    protected void addParam(String key, String value) {\n+        if(urlParams == null) {\n+            urlParams = new HashMap<String, String>();\n+        }\n+\n+        urlParams.put(key, value);\n+    }\n+\n+    /**\n+     * Get a named route parameter\n+     * @param name The name of the route parameter\n+     * @return Returns a string containing the route parameter for the given name\n+     */\n+    public String param(String name) {\n+        if(urlParams == null) {\n+            return null;\n+        }\n+\n+        return urlParams.get(name);\n+    }\n+\n+    /**\n+     * Get a specific input value. This will return both query string parameters and body data.\n+     *\n+     * @param name Key of the input data\n+     * @return The requested input data.\n+     */\n+    public String input(String name) {\n+        if(inputData == null) {\n+            inputData = new HashMap<>();\n+\n+            String contentType = getContentType();\n+            if(contentType != null) {\n+                contentType = contentType.split(\";\")[0];\n+            }\n+            if(\"application/json\".equals(contentType)) {\n+                JSONParser jsonParser = new JSONParser();\n+                JSONObject obj = null;\n+                try {\n+                    obj = (JSONObject) jsonParser.parse(getReader());\n+                    Iterator<?> keys = obj.keySet().iterator();\n+\n+                    while( keys.hasNext() ){\n+                        String key = (String)keys.next();\n+                        String value = String.valueOf(obj.get(key));\n+                        inputData.put(key, value);\n+\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                } catch (ParseException e) {\n+                    e.printStackTrace();\n+                }\n+\n+            }\n+        }\n+\n+\n+        return inputData.get(name) == null ? getParameter(name) : inputData.get(name);\n+    }\n+\n+    /**\n+     * Get a specific query string value.\n+     *\n+     * @param key Key for the query string data.\n+     * @return Returns a string of the query string data.\n+     */\n+    public String query(String key) {\n+        if(queryData == null) {\n+            parseQueryString();\n+        }\n+\n+        return queryData.get(key);\n+    }\n+\n+    private void parseQueryString() {\n+        String queryString = getQueryString();\n+        if(queryString != null) {\n+            this.queryData = Arrays.stream(queryString.split(\"&\")).map(entry -> {\n+                try {\n+                    return URLDecoder.decode(entry, \"UTF-8\");\n+                } catch (UnsupportedEncodingException e) {\n+                    e.printStackTrace();\n+                }\n+                return entry;\n+            }).collect(Collectors.toMap(\n+                    entry -> {\n+                        String[] parts = entry.split(\"=\");\n+                        if(parts != null && parts.length > 0) {\n+                            return parts[0];\n+                        }\n+\n+                        return \"\";\n+                    },\n+                    entry -> {\n+                        String[] parts = entry.split(\"=\");\n+                        if(parts != null && parts.length > 1) {\n+                            return parts[1];\n+                        }\n+\n+                        return \"\";\n+                    },\n+                    (key1, key2) -> key1\n+            ));\n+        }\n+\n+        if(queryData == null) {\n+            queryData = new HashMap<>();\n+        }\n+    }\n+\n+    public Cookie getCookie(String s) {\n+        Cookie[] cookies = getCookies();\n+        if(cookies != null) {\n+            for(Cookie cookie: cookies) {\n+                if(cookie.getName().equals(s)) {\n+                    return cookie;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "9dd2920e610ecc312dba065e2a2a35bc1858db01",
    "filename": "core/src/main/java/com/severell/core/http/Responsable.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Responsable.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Responsable.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Responsable.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,45 @@\n+package com.severell.core.http;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+\n+public class Responsable {\n+\n+    private ByteArrayOutputStream stream;\n+    private PrintWriter write;\n+    private int statusCode;\n+    private String contentType;\n+\n+    public Responsable(Object obj, int statusCode) {\n+        stream = new ByteArrayOutputStream();\n+        this.statusCode = statusCode;\n+    }\n+\n+    public Responsable(int statusCode) {\n+        this.statusCode = statusCode;\n+        stream = new ByteArrayOutputStream();\n+    }\n+\n+    public PrintWriter getWriter() {\n+        if(write == null) {\n+            this.write = new PrintWriter(stream);\n+        }\n+        return write;\n+    }\n+\n+    public ByteArrayOutputStream getStream() {\n+        return this.stream;\n+    }\n+\n+    public int getStatusCode() {\n+        return this.statusCode;\n+    }\n+\n+    public void setContentType(String contentType) {\n+        this.contentType = contentType;\n+    }\n+\n+    public String getContentType() {\n+        return contentType;\n+    }\n+}"
  },
  {
    "sha": "e3611f65aba53ada594d580734e0136e6ec8231d",
    "filename": "core/src/main/java/com/severell/core/http/Response.java",
    "status": "modified",
    "additions": 15,
    "deletions": 145,
    "changes": 160,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Response.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Response.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Response.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,164 +1,34 @@\n package com.severell.core.http;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.mustachejava.DefaultMustacheFactory;\n-import com.github.mustachejava.Mustache;\n-import com.github.mustachejava.MustacheFactory;\n-import com.severell.core.config.Config;\n-import com.severell.core.container.Container;\n import com.severell.core.exceptions.ViewException;\n-import com.severell.core.view.View;\n \n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.HttpServletResponseWrapper;\n-import javax.ws.rs.core.MediaType;\n-import java.io.*;\n-import java.nio.file.Files;\n+import java.io.File;\n+import java.io.IOException;\n import java.util.HashMap;\n-import java.util.Map;\n \n-/**\n- * A wrapper around {@link HttpServletResponse} with simpler syntax.\n- */\n-public class Response extends HttpServletResponseWrapper {\n+public interface Response {\n \n-    /**\n-     * The {@link Container} to be used to resolve any dependencies.\n-     */\n-    private final Container c;\n+    Responsable renderTemplateLiteral(String templateLiteral, String templateName, HashMap<String, Object> here) throws IOException;\n \n-    /**\n-     * This holds any data that is to be passed to every mustache template.\n-     */\n-    private HashMap<String, Object> shared;\n+    Responsable render(String template, HashMap<String, Object> data) throws IOException, ViewException;\n \n-    /**\n-     * Constructs a response adaptor wrapping the given response.\n-     * @param response the {@link HttpServletResponse} to be wrapped.\n-     * @param c the {@link Container} object to be used\n-     */\n-    public Response(HttpServletResponse response, Container c) {\n-        super(response);\n-        this.c = c;\n-        shared = new HashMap<>();\n-    }\n+    Responsable render(String template, HashMap<String, Object> data, String baseDir) throws ViewException, IOException;\n \n-    /**\n-     * Renders a mustache template.\n-     *\n-     * @param template The path to the template. This is relative to your templates folder. Eg. auth/login.mustache\n-     * @param data This contains the data to be used in the template.\n-     * @throws IOException\n-     */\n-    public void render(String template, HashMap<String, Object> data) throws IOException, ViewException {\n-        this.render(template, data, \"templates/\");\n-    }\n+    Responsable json(Object object) throws IOException;\n \n-    /**\n-     * Renders a mustache template. Use this method if template is not located in default \"template\" directory\n-     * @param template The path to the template. Relative to the baseDir param.\n-     * @param data This contains the data to be used in the template.\n-     * @param baseDir Base directory of the template\n-     * @throws IOException\n-     */\n-    protected void render(String template, HashMap<String, Object> data, String baseDir) throws ViewException, IOException {\n-        this.setContentType(\"text/html\");\n-        data.putAll(shared);\n-        View view = c.make(View.class);\n-        view.render(template, data, baseDir, this.getWriter());\n-    }\n+    Responsable json(Object object, int statusCode) throws IOException;\n \n-    /**\n-     * Writes the object to a JSON String and returns to client\n-     * @param object Object to be converted to JSON\n-     * @throws IOException\n-     */\n-    public void json(Object object) throws IOException {\n-        ObjectMapper mapper = c.make(ObjectMapper.class);\n-        getWriter().write(mapper.writeValueAsString(object));\n-    }\n+    Responsable download(File file, String mimeType) throws IOException;\n \n-    /**\n-     * Writes a file to the client.\n-     * @param file\n-     * @param mimeType\n-     * @throws IOException\n-     */\n-    public void download(File file, String mimeType) throws IOException {\n-        download(file, mimeType, null);\n-    }\n+    Responsable download(File file, String mimeType, String name) throws IOException;\n \n-    /**\n-     * Writes a file to the client.\n-     * @param file\n-     * @param mimeType\n-     * @param name\n-     * @throws IOException\n-     */\n-    public void download(File file, String mimeType, String name) throws IOException {\n-        byte[] bytes = Files.readAllBytes(file.toPath());\n-        setHeader(\"Content-Type\", mimeType);\n-        setHeader(\"Content-Length\", String.valueOf(bytes.length));\n-        setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + name == null ? \"generated\" : name + \"\\\"\");\n-        getOutputStream().write(bytes);\n+    void close() throws IOException;\n \n-    }\n+    void redirect(String s);\n \n-    /**\n-     * Use this to share an object with any mustache template. You can then use this object in any template\n-     * and don't have to explicitly pass it into the render call.\n-     *\n-     * @param key The key to be used when using this in a template\n-     * @param obj Object to share.\n-     */\n-    public void share(String key, Object obj) {\n-        shared.put(key, obj);\n-    }\n+    void headers(HashMap<String, String> headers);\n \n-    /**\n-     * Send a redirect\n-     *\n-     * @param url URL to redirect to\n-     * @throws IOException\n-     */\n-    public void redirect(String url) throws IOException {\n-        this.sendRedirect(url);\n-    }\n+    void header(String headerName, String headerValue);\n \n-    /**\n-     * Set headers on the response object\n-     *\n-     * @param headers Headers to set on the response object\n-     */\n-    public void headers(Map<String, String> headers) {\n-        if(headers != null) {\n-            for(String key : headers.keySet()) {\n-                String value = headers.get(key);\n-                addHeader(key, value);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Renders a mustache template string.\n-     *\n-     * @param templateString A string containing a mustache template\n-     * @param templateName A string containing a mustache template name\n-     * @param data The data to be used in the template string\n-     * @throws IOException\n-     */\n-    public void renderTemplateLiteral(String templateString, String templateName, HashMap<String, Object> data) throws IOException {\n-        this.setContentType(\"text/html\");\n-        MustacheFactory mf;\n-        mf = c.make(DefaultMustacheFactory.class);\n-\n-        if(mf == null) {\n-            mf = new DefaultMustacheFactory();\n-        }\n-\n-        Mustache m = mf.compile(new StringReader(templateString), templateName);\n-        PrintWriter writer = this.getWriter();\n-        data.putAll(shared);\n-        m.execute(writer, data).flush();\n-    }\n+    void share(String key, Object obj);\n }"
  },
  {
    "sha": "ea1f1b7d1e5123a3362f7089efe48d56410bba59",
    "filename": "core/src/main/java/com/severell/core/http/ResponseOld.java",
    "status": "added",
    "additions": 163,
    "deletions": 0,
    "changes": 163,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/ResponseOld.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/ResponseOld.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/ResponseOld.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -0,0 +1,163 @@\n+package com.severell.core.http;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.mustachejava.DefaultMustacheFactory;\n+import com.github.mustachejava.Mustache;\n+import com.github.mustachejava.MustacheFactory;\n+import com.severell.core.config.Config;\n+import com.severell.core.container.Container;\n+import com.severell.core.exceptions.ViewException;\n+import com.severell.core.view.View;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+import javax.ws.rs.core.MediaType;\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A wrapper around {@link HttpServletResponse} with simpler syntax.\n+ */\n+public class ResponseOld extends HttpServletResponseWrapper {\n+\n+    /**\n+     * The {@link Container} to be used to resolve any dependencies.\n+     */\n+    private final Container c;\n+\n+    /**\n+     * This holds any data that is to be passed to every mustache template.\n+     */\n+    private HashMap<String, Object> shared;\n+\n+    /**\n+     * Constructs a response adaptor wrapping the given response.\n+     * @param response the {@link HttpServletResponse} to be wrapped.\n+     * @param c the {@link Container} object to be used\n+     */\n+    public ResponseOld(HttpServletResponse response, Container c) {\n+        super(response);\n+        this.c = c;\n+        shared = new HashMap<>();\n+    }\n+\n+    /**\n+     * Renders a mustache template.\n+     *\n+     * @param template The path to the template. This is relative to your templates folder. Eg. auth/login.mustache\n+     * @param data This contains the data to be used in the template.\n+     * @throws IOException\n+     */\n+    public void render(String template, HashMap<String, Object> data) throws IOException, ViewException {\n+        this.render(template, data, \"templates/\");\n+    }\n+\n+    /**\n+     * Renders a mustache template. Use this method if template is not located in default \"template\" directory\n+     * @param template The path to the template. Relative to the baseDir param.\n+     * @param data This contains the data to be used in the template.\n+     * @param baseDir Base directory of the template\n+     * @throws IOException\n+     */\n+    protected void render(String template, HashMap<String, Object> data, String baseDir) throws ViewException, IOException {\n+        this.setContentType(\"text/html\");\n+        data.putAll(shared);\n+        View view = c.make(View.class);\n+        view.render(template, data, baseDir, this.getWriter());\n+    }\n+\n+    /**\n+     * Writes the object to a JSON String and returns to client\n+     * @param object Object to be converted to JSON\n+     * @throws IOException\n+     */\n+    public void json(Object object) throws IOException {\n+        ObjectMapper mapper = c.make(ObjectMapper.class);\n+        getWriter().write(mapper.writeValueAsString(object));\n+    }\n+\n+    /**\n+     * Writes a file to the client.\n+     * @param file\n+     * @param mimeType\n+     * @throws IOException\n+     */\n+    public void download(File file, String mimeType) throws IOException {\n+        download(file, mimeType, null);\n+    }\n+\n+    /**\n+     * Writes a file to the client.\n+     * @param file\n+     * @param mimeType\n+     * @param name\n+     * @throws IOException\n+     */\n+    public void download(File file, String mimeType, String name) throws IOException {\n+        byte[] bytes = Files.readAllBytes(file.toPath());\n+        setHeader(\"Content-Type\", mimeType);\n+        setHeader(\"Content-Length\", String.valueOf(bytes.length));\n+        setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + name == null ? \"generated\" : name + \"\\\"\");\n+        getOutputStream().write(bytes);\n+    }\n+\n+    /**\n+     * Use this to share an object with any mustache template. You can then use this object in any template\n+     * and don't have to explicitly pass it into the render call.\n+     *\n+     * @param key The key to be used when using this in a template\n+     * @param obj Object to share.\n+     */\n+    public void share(String key, Object obj) {\n+        shared.put(key, obj);\n+    }\n+\n+    /**\n+     * Send a redirect\n+     *\n+     * @param url URL to redirect to\n+     * @throws IOException\n+     */\n+    public void redirect(String url) throws IOException {\n+        this.sendRedirect(url);\n+    }\n+\n+    /**\n+     * Set headers on the response object\n+     *\n+     * @param headers Headers to set on the response object\n+     */\n+    public void headers(Map<String, String> headers) {\n+        if(headers != null) {\n+            for(String key : headers.keySet()) {\n+                String value = headers.get(key);\n+                addHeader(key, value);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Renders a mustache template string.\n+     *\n+     * @param templateString A string containing a mustache template\n+     * @param templateName A string containing a mustache template name\n+     * @param data The data to be used in the template string\n+     * @throws IOException\n+     */\n+    public void renderTemplateLiteral(String templateString, String templateName, HashMap<String, Object> data) throws IOException {\n+        this.setContentType(\"text/html\");\n+        MustacheFactory mf;\n+        mf = c.make(DefaultMustacheFactory.class);\n+\n+        if(mf == null) {\n+            mf = new DefaultMustacheFactory();\n+        }\n+\n+        Mustache m = mf.compile(new StringReader(templateString), templateName);\n+        PrintWriter writer = this.getWriter();\n+        data.putAll(shared);\n+        m.execute(writer, data).flush();\n+    }\n+}"
  },
  {
    "sha": "0009c558fc3b79b877bb75ef2dd82447a78b6a11",
    "filename": "core/src/main/java/com/severell/core/http/Route.java",
    "status": "modified",
    "additions": 10,
    "deletions": 92,
    "changes": 102,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Route.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/Route.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/Route.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -1,95 +1,13 @@\n package com.severell.core.http;\n \n-import com.severell.core.exceptions.MiddlewareException;\n-\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Optional;\n-\n-/**\n- * This class holds information for a distinct route.\n- */\n-public class Route {\n-\n-    private String path;\n-    private Method method;\n-    private String httpMethod;\n-    private ArrayList<Class> middlewareClassList;\n-\n-    /**\n-     * Create a new route\n-     * @param path Route path I.E. /users\n-     * @param cl Controller Class\n-     * @param method Fully qualified name of the associated controller method.\n-     * @param httpMethod HTTP Method I.E. POST\n-     * @throws ClassNotFoundException\n-     * @throws NoSuchMethodException\n-     */\n-    protected Route(String path, Class cl, String method, String httpMethod) throws ClassNotFoundException, NoSuchMethodException {\n-        this.path = path;\n-        this.method = getMethodLike(cl, method);\n-        this.httpMethod = httpMethod;\n-    }\n-\n-    /**\n-     * Add Middleware to this route\n-     * @param middleware\n-     */\n-    public void middleware(Class... middleware) {\n-        middlewareClassList = new ArrayList<>();\n-        middlewareClassList.addAll(Arrays.asList(middleware));\n-    }\n-\n-    /**\n-     * Returns the middleware {@link Method}. The method is only used to compile\n-     * the Routes and not used at Runtime.\n-     * @return\n-     */\n-    public Method getMethod() {\n-        return this.method;\n-    }\n-\n-    /**\n-     * Get the Route path. I.E. /users\n-     * @return\n-     */\n-    public String getPath() {\n-        return this.path;\n-    }\n-\n-    /**\n-     * Get the HTTP Request method. I.E. POST\n-     * @return\n-     */\n-    public String getHttpMethod() {\n-        return this.httpMethod;\n-    }\n-\n-    /**\n-     * Return a list of Middleware associated with\n-     * this route.\n-     * @return\n-     */\n-    public ArrayList<Class> getMiddlewareClassList() {\n-        return this.middlewareClassList;\n-    }\n-\n-    /**\n-     * Uses Reflection to retrieve the controller {@link Method}. This is not used\n-     * at Runtime.\n-     * @param c\n-     * @param name\n-     * @return\n-     */\n-    private static Method getMethodLike(Class c, String name) {\n-        final Optional<Method> matchedMethod = Arrays.asList(c.getDeclaredMethods()).stream().filter(method ->\n-                method.getName().toLowerCase().equals(name.toLowerCase())).findAny();\n-\n-        if (!matchedMethod.isPresent()) {\n-            throw new RuntimeException(\"No method containing: \" + name);\n-        }\n-\n-        return matchedMethod.get();\n-    }\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.SOURCE)\n+@Target(ElementType.METHOD)\n+public @interface Route {\n+    String path();\n+    HttpMethod method();\n }"
  },
  {
    "sha": "043216fb2cd92085bab565466f9d69b916afe7ce",
    "filename": "core/src/main/java/com/severell/core/http/RouteExecutor.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/severell/severell/blob/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/RouteExecutor.java",
    "raw_url": "https://github.com/severell/severell/raw/863e4e3aaa8c0a3567c2233d6809f7436a9fe714/core/src/main/java/com/severell/core/http/RouteExecutor.java",
    "contents_url": "https://api.github.com/repos/severell/severell/contents/core/src/main/java/com/severell/core/http/RouteExecutor.java?ref=863e4e3aaa8c0a3567c2233d6809f7436a9fe714",
    "patch": "@@ -21,16 +21,16 @@\n     private final RouteFunction func;\n     private final ArrayList<MiddlewareExecutor> middleware;\n     public String path;\n-    public String httpMethod;\n+    public HttpMethod httpMethod;\n \n-    public RouteExecutor(String path, String httpMethod, RouteFunction func) {\n+    public RouteExecutor(String path, HttpMethod httpMethod, RouteFunction func) {\n         this.path = path;\n         this.httpMethod = httpMethod;\n         this.func = func;\n         this.middleware = null;\n     }\n \n-    public RouteExecutor(String path, String httpMethod, ArrayList<MiddlewareExecutor> middleware, RouteExecutor.RouteFunction func) {\n+    public RouteExecutor(String path, HttpMethod httpMethod, ArrayList<MiddlewareExecutor> middleware, RouteExecutor.RouteFunction func) {\n         this.path = path;\n         this.httpMethod = httpMethod;\n         this.func = func;\n@@ -43,6 +43,7 @@ public RouteExecutor(String path, String httpMethod, ArrayList<MiddlewareExecuto\n      * @param response\n      * @param cont\n      * @throws Exception\n+     * @return\n      */\n     public void execute(Request request, Response response, Container cont) throws Exception {\n         func.apply(request, response, cont);\n@@ -60,7 +61,7 @@ public String getPath() {\n      * Get the HTTP method. I.E. POST\n      * @return\n      */\n-    public String getHttpMethod() {\n+    public HttpMethod getHttpMethod() {\n         return httpMethod;\n     }\n "
  }
]
