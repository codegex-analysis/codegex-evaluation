[
  {
    "sha": "aae24032f4a6dad7c54d5cfbec97bacf5097d826",
    "filename": "service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/mapper/EncounterMapper.java",
    "status": "modified",
    "additions": 26,
    "deletions": 16,
    "changes": 42,
    "blob_url": "https://github.com/nhsconnect/integration-adaptor-111/blob/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/mapper/EncounterMapper.java",
    "raw_url": "https://github.com/nhsconnect/integration-adaptor-111/raw/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/mapper/EncounterMapper.java",
    "contents_url": "https://api.github.com/repos/nhsconnect/integration-adaptor-111/contents/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/mapper/EncounterMapper.java?ref=0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c",
    "patch": "@@ -12,29 +12,16 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n-import org.hl7.fhir.dstu3.model.Encounter;\n+import org.apache.catalina.Session;\n+import org.hl7.fhir.dstu3.model.*;\n import org.hl7.fhir.dstu3.model.Encounter.EncounterLocationComponent;\n import org.hl7.fhir.dstu3.model.Encounter.EncounterParticipantComponent;\n-import org.hl7.fhir.dstu3.model.Group;\n-import org.hl7.fhir.dstu3.model.Narrative;\n-import org.hl7.fhir.dstu3.model.Organization;\n-import org.hl7.fhir.dstu3.model.Patient;\n-import org.hl7.fhir.dstu3.model.Period;\n-import org.hl7.fhir.dstu3.model.PractitionerRole;\n-import org.hl7.fhir.dstu3.model.Reference;\n import org.springframework.stereotype.Component;\n \n import lombok.AllArgsConstructor;\n import uk.nhs.adaptors.oneoneone.cda.report.service.AppointmentService;\n import uk.nhs.adaptors.oneoneone.cda.report.util.NodeUtil;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01ClinicalDocument1;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01Component3;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01Encounter;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01Entry;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01Informant12;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01PatientRole;\n-import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01Section;\n-import uk.nhs.connect.iucds.cda.ucr.TS;\n+import uk.nhs.connect.iucds.cda.ucr.*;\n \n @Component\n @AllArgsConstructor\n@@ -67,6 +54,7 @@\n     public Encounter mapEncounter(POCDMT000002UK01ClinicalDocument1 clinicalDocument, List<PractitionerRole> practitionerRoles) {\n         Encounter encounter = new Encounter();\n         encounter.setIdElement(newRandomUuid());\n+        setIdentifier(encounter, clinicalDocument);\n         encounter.setStatus(FINISHED);\n         encounter.setLocation(getLocationComponents(clinicalDocument));\n         encounter.setPeriod(getPeriod(clinicalDocument));\n@@ -78,6 +66,28 @@ public Encounter mapEncounter(POCDMT000002UK01ClinicalDocument1 clinicalDocument\n         return encounter;\n     }\n \n+    private void setIdentifier(Encounter encounter, POCDMT000002UK01ClinicalDocument1 clinicalDocument) {\n+        if (clinicalDocument.isSetComponentOf()) {\n+            POCDMT000002UK01Component1 componentOf = clinicalDocument.getComponentOf();\n+            POCDMT000002UK01EncompassingEncounter ITKEncounter = componentOf.getEncompassingEncounter();\n+            II[] idArray = ITKEncounter.getIdArray();\n+\n+            List<Identifier> ids = new ArrayList<>();\n+\n+            for (II id : idArray) {\n+                if (id.isSetRoot()) {\n+                    Identifier destId = new Identifier();\n+                    destId.setId(id.getRoot());\n+                    destId.setValue(id.getExtension());\n+\n+                    ids.add(destId);\n+\n+                }\n+            }\n+            encounter.setIdentifier(ids);\n+        }\n+    }\n+\n     private List<EncounterLocationComponent> getLocationComponents(POCDMT000002UK01ClinicalDocument1 clinicalDocument1) {\n         List<EncounterLocationComponent> locations = new ArrayList<>();\n         if (clinicalDocument1.sizeOfRecordTargetArray() > 0) {"
  },
  {
    "sha": "112b81bda473fa5fa3bf5dda1c9d70365bb48d48",
    "filename": "service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleService.java",
    "status": "modified",
    "additions": 17,
    "deletions": 25,
    "changes": 42,
    "blob_url": "https://github.com/nhsconnect/integration-adaptor-111/blob/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleService.java",
    "raw_url": "https://github.com/nhsconnect/integration-adaptor-111/raw/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleService.java",
    "contents_url": "https://api.github.com/repos/nhsconnect/integration-adaptor-111/contents/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleService.java?ref=0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c",
    "patch": "@@ -9,29 +9,7 @@\n import java.util.List;\n \n import org.apache.xmlbeans.XmlException;\n-import org.hl7.fhir.dstu3.model.Appointment;\n-import org.hl7.fhir.dstu3.model.Bundle;\n-import org.hl7.fhir.dstu3.model.CarePlan;\n-import org.hl7.fhir.dstu3.model.CodeableConcept;\n-import org.hl7.fhir.dstu3.model.Composition;\n-import org.hl7.fhir.dstu3.model.Condition;\n-import org.hl7.fhir.dstu3.model.Consent;\n-import org.hl7.fhir.dstu3.model.Encounter;\n-import org.hl7.fhir.dstu3.model.Group;\n-import org.hl7.fhir.dstu3.model.HealthcareService;\n-import org.hl7.fhir.dstu3.model.Identifier;\n-import org.hl7.fhir.dstu3.model.ListResource;\n-import org.hl7.fhir.dstu3.model.Location;\n-import org.hl7.fhir.dstu3.model.Observation;\n-import org.hl7.fhir.dstu3.model.Organization;\n-import org.hl7.fhir.dstu3.model.Patient;\n-import org.hl7.fhir.dstu3.model.PractitionerRole;\n-import org.hl7.fhir.dstu3.model.ProcedureRequest;\n-import org.hl7.fhir.dstu3.model.Questionnaire;\n-import org.hl7.fhir.dstu3.model.QuestionnaireResponse;\n-import org.hl7.fhir.dstu3.model.Reference;\n-import org.hl7.fhir.dstu3.model.ReferralRequest;\n-import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.*;\n import org.springframework.stereotype.Component;\n \n import lombok.AllArgsConstructor;\n@@ -47,6 +25,7 @@\n import uk.nhs.adaptors.oneoneone.cda.report.mapper.PractitionerRoleMapper;\n import uk.nhs.adaptors.oneoneone.cda.report.mapper.ReferralRequestMapper;\n import uk.nhs.adaptors.oneoneone.cda.report.util.PathwayUtil;\n+import uk.nhs.connect.iucds.cda.ucr.CE;\n import uk.nhs.connect.iucds.cda.ucr.POCDMT000002UK01ClinicalDocument1;\n \n @Component\n@@ -92,7 +71,9 @@ public Bundle createEncounterBundle(POCDMT000002UK01ClinicalDocument1 clinicalDo\n             referralRequest, authorPractitionerRoles);\n         List<Observation> observations = observationMapper.mapObservations(clinicalDocument, encounter);\n \n-        addEntry(bundle, messageHeaderService.createMessageHeader(header));\n+        CE dispositionCode = getDispositionCode(clinicalDocument);\n+\n+        addEntry(bundle, messageHeaderService.createMessageHeader(header,dispositionCode ));\n         addEncounter(bundle, encounter);\n         addServiceProvider(bundle, encounter);\n         addParticipants(bundle, encounter);\n@@ -114,7 +95,18 @@ public Bundle createEncounterBundle(POCDMT000002UK01ClinicalDocument1 clinicalDo\n \n         return bundle;\n     }\n-\n+    private CE getDispositionCode(POCDMT000002UK01ClinicalDocument1 clinicalDocument) {\n+        CE dischargeCode = null;\n+        if (clinicalDocument.isSetComponentOf()) {\n+            if (clinicalDocument.getComponentOf().getEncompassingEncounter() != null) {\n+                if (clinicalDocument.getComponentOf().getEncompassingEncounter().isSetDischargeDispositionCode()) {\n+                    Coding coding = new Coding();\n+                    dischargeCode = clinicalDocument.getComponentOf().getEncompassingEncounter().getDischargeDispositionCode();\n+                }\n+            }\n+        }\n+        return dischargeCode;\n+    }\n     private Bundle createBundle(POCDMT000002UK01ClinicalDocument1 clinicalDocument) {\n         Bundle bundle = new Bundle();\n         bundle.setType(MESSAGE);"
  },
  {
    "sha": "57b220ca037917a3d44174d3cfd93edad4566d13",
    "filename": "service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderService.java",
    "status": "modified",
    "additions": 22,
    "deletions": 7,
    "changes": 29,
    "blob_url": "https://github.com/nhsconnect/integration-adaptor-111/blob/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderService.java",
    "raw_url": "https://github.com/nhsconnect/integration-adaptor-111/raw/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderService.java",
    "contents_url": "https://api.github.com/repos/nhsconnect/integration-adaptor-111/contents/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderService.java?ref=0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c",
    "patch": "@@ -4,6 +4,7 @@\n \n import static org.hl7.fhir.dstu3.model.IdType.newRandomUuid;\n \n+import java.util.Arrays;\n import java.util.Date;\n \n import org.hl7.fhir.dstu3.model.CodeableConcept;\n@@ -16,24 +17,27 @@\n import lombok.RequiredArgsConstructor;\n import uk.nhs.adaptors.oneoneone.cda.report.controller.utils.ItkReportHeader;\n import uk.nhs.adaptors.oneoneone.config.SoapProperties;\n+import uk.nhs.connect.iucds.cda.ucr.CE;\n \n @Component\n @RequiredArgsConstructor\n public class MessageHeaderService {\n \n     private static final String EVENT_SYSTEM = \"https://fhir.nhs.uk/STU3/CodeSystem/ITK-MessageEvent-2\";\n     private static final String EVENT_CODE = \"ITK007C\";\n+    private static final String NUMSAS_EVENT_CODE = \"ITK010D\";\n+    private  static final String[] EMERGENCY_DISPOSITION_CODES = {\"DX80\",\"DX85\",\"DX86\",\"DX87\",\"DX97\",\"DX98\"};\n     private static final String EVENT_DISPLAY_VALUE = \"ITK GP Connect Send Document\";\n     private static final String MESSAGE_SOURCE_NAME = \"NHS 111 Adaptor\";\n \n     private final SoapProperties soapProperties;\n \n-    public MessageHeader createMessageHeader(ItkReportHeader itkHeader) {\n+    public MessageHeader createMessageHeader(ItkReportHeader itkHeader, CE dischargeDispositionCode) {\n         MessageHeader header = new MessageHeader();\n \n         header.setIdElement(newRandomUuid());\n         header.setId(header.getIdElement());\n-        header.setEvent(getEvent());\n+        header.setEvent(getEvent(dischargeDispositionCode));\n         header.setSource(getSource());\n         header.setTimestamp(new Date());\n         header.setReason(new CodeableConcept().addCoding(\n@@ -56,10 +60,21 @@ private MessageSourceComponent getSource() {\n         return source;\n     }\n \n-    private Coding getEvent() {\n-        return new Coding()\n-            .setSystem(EVENT_SYSTEM)\n-            .setCode(EVENT_CODE)\n-            .setDisplay(EVENT_DISPLAY_VALUE);\n+    private Coding getEvent(CE dischargeDispositionCode) {\n+        Coding coding = new Coding();\n+        String code = dischargeDispositionCode.getCode().trim().toUpperCase();\n+\n+        if (Arrays.stream(EMERGENCY_DISPOSITION_CODES).anyMatch(code::equals)) {\n+            coding.setSystem(EVENT_SYSTEM)\n+                    .setCode(NUMSAS_EVENT_CODE)\n+                    .setDisplay(EVENT_DISPLAY_VALUE);\n+        }\n+        else {\n+            coding.setSystem(EVENT_SYSTEM)\n+                    .setCode(EVENT_CODE)\n+                    .setDisplay(EVENT_DISPLAY_VALUE);\n+        }\n+\n+        return coding;\n     }\n }"
  },
  {
    "sha": "5b00c317245d5e54aa1614207cff73e4fe0cdae6",
    "filename": "service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/validation/ItkValidator.java",
    "status": "modified",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/nhsconnect/integration-adaptor-111/blob/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/validation/ItkValidator.java",
    "raw_url": "https://github.com/nhsconnect/integration-adaptor-111/raw/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/validation/ItkValidator.java",
    "contents_url": "https://api.github.com/repos/nhsconnect/integration-adaptor-111/contents/service/src/main/java/uk/nhs/adaptors/oneoneone/cda/report/validation/ItkValidator.java?ref=0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c",
    "patch": "@@ -31,7 +31,6 @@\n     private static final List<String> PROFILE_IDS = asList(\"urn:nhs-en:profile:nhs111CDADocument-v2-0\",\n         \"urn:nhs-en:profile:nullificationDocument-v5-0\", \"urn:nhs-en:profile:IntegratedUrgentCareCDADocument-v3-1\",\n         \"urn:nhs-en:profile:nhs111CDADocument-v3-1\");\n-    private static final String AUDIT_IDENTITY = \"urn:nhs-uk:identity:ods:5L399\";\n     private static final String AUDIT_IDENTITY_ID_XPATH = \"//*[local-name()='id']\";\n \n     public void checkItkConformance(Map<ReportElement, Element> report) throws SoapClientException {\n@@ -41,17 +40,6 @@ public void checkItkConformance(Map<ReportElement, Element> report) throws SoapC\n         checkTrackingIdExists(itkHeader);\n         checkSoapAndItkService(report.get(SOAP_HEADER), itkHeader);\n         checkPayloadAndManifest(itkHeader, report.get(ITK_PAYLOADS));\n-        checkAuditIdentity(itkHeader);\n-    }\n-\n-    private void checkAuditIdentity(Element itkHeader) throws SoapClientException {\n-        Node auditNode = itkHeader.selectSingleNode(ITK_AUDIT_IDENTITY_XPATH);\n-        Node auditIdNode = auditNode.selectSingleNode(AUDIT_IDENTITY_ID_XPATH);\n-        String auditIdentity = ((Element) auditIdNode).attribute(\"uri\").getValue();\n-\n-        if (!StringUtils.equals(AUDIT_IDENTITY, auditIdentity)) {\n-            throw new SoapClientException(SOAP_VALIDATION_FAILED_MSG, \"Invalid Audit Identity value: \" + auditIdentity);\n-        }\n     }\n \n     private void checkPayloadAndManifest(Element itkHeader, Element itkPayloads) throws SoapClientException {"
  },
  {
    "sha": "f309b08a9544508bcb8eaacda5563f4a53c0c910",
    "filename": "service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleServiceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nhsconnect/integration-adaptor-111/blob/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleServiceTest.java",
    "raw_url": "https://github.com/nhsconnect/integration-adaptor-111/raw/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleServiceTest.java",
    "contents_url": "https://api.github.com/repos/nhsconnect/integration-adaptor-111/contents/service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/EncounterReportBundleServiceTest.java?ref=0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c",
    "patch": "@@ -239,7 +239,7 @@ public void setUp() throws XmlException {\n         when(healthcareServiceMapper.mapHealthcareService(any())).thenReturn(singletonList(HEALTHCARE_SERVICE));\n         when(consentMapper.mapConsent(any(), any())).thenReturn(CONSENT);\n         when(pathwayUtil.getQuestionnaireResponses(any(), any(), any())).thenReturn(questionnaireResponseList);\n-        when(messageHeaderService.createMessageHeader(any())).thenReturn(MESSAGE_HEADER);\n+        when(messageHeaderService.createMessageHeader(any(), any())).thenReturn(MESSAGE_HEADER);\n         when(referralRequestMapper.mapReferralRequest(any(), any(), any(), any())).thenReturn(REFERRAL_REQUEST);\n         when(observationMapper.mapObservations(any(), eq(ENCOUNTER))).thenReturn(Arrays.asList(OBSERVATION));\n         when(practitionerRoleMapper.mapAuthorRoles(any())).thenReturn(singletonList(AUTHOR_ROLE));"
  },
  {
    "sha": "0cd3b2c9fa70b38f529020955cd24628a3d6d9f2",
    "filename": "service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderServiceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nhsconnect/integration-adaptor-111/blob/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderServiceTest.java",
    "raw_url": "https://github.com/nhsconnect/integration-adaptor-111/raw/0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c/service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderServiceTest.java",
    "contents_url": "https://api.github.com/repos/nhsconnect/integration-adaptor-111/contents/service/src/test/java/uk/nhs/adaptors/oneoneone/cda/report/service/MessageHeaderServiceTest.java?ref=0f12ea636e558bf4d0a87db0a14b463e3ba4dc1c",
    "patch": "@@ -47,7 +47,7 @@ public void shouldCreateMessageHeader() {\n         itkReportHeader.setSpecKey(SPECIFICATION_KEY);\n         itkReportHeader.setSpecVal(SPECIFICATION_VALUE);\n         itkReportHeader.setAddressList(Arrays.asList(ADDRESS));\n-        MessageHeader messageHeader = messageHeaderService.createMessageHeader(itkReportHeader);\n+        MessageHeader messageHeader = messageHeaderService.createMessageHeader(itkReportHeader,null);\n \n         assertThat(messageHeader.getId()).isNotEmpty();\n         Coding event = messageHeader.getEvent();"
  }
]
