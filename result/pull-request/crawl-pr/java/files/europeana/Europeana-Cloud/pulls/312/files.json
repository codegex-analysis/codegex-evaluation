[
  {
    "sha": "496987c3c19ac214fe1769dc067325ba48b1801d",
    "filename": "service/dps/api/src/main/java/eu/europeana/cloud/service/dps/PluginParameterKeys.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/api/src/main/java/eu/europeana/cloud/service/dps/PluginParameterKeys.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/api/src/main/java/eu/europeana/cloud/service/dps/PluginParameterKeys.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/api/src/main/java/eu/europeana/cloud/service/dps/PluginParameterKeys.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -81,9 +81,6 @@\n     public static final String ADDITIONAL_LOCAL_IDENTIFIER = \"ADDITIONAL_LOCAL_IDENTIFIER\";\n     public static final String USE_DEFAULT_IDENTIFIERS = \"USE_DEFAULT_IDENTIFIERS\";\n \n-    // -----------MIGRATION----------\n-    public static final String MIGRATION_IDENTIFIER_PREFIX = \"MIGRATION_IDENTIFIER_PREFIX\";\n-\n     //Media\n     public static final String RESOURCE_LINKS_COUNT = \"RESOURCE_LINKS_COUNT\";\n     public static final String RESOURCE_URL=\"RESOURCE_URL\";"
  },
  {
    "sha": "450e23139ad103de2ddabb990554ae1f83ad4aff",
    "filename": "service/dps/storm/common/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/pom.xml",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/pom.xml",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/common/pom.xml?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -213,7 +213,7 @@\n         <dependency>\n             <groupId>com.github.tomakehurst</groupId>\n             <artifactId>wiremock</artifactId>\n-            <version>1.42</version>\n+            <version>2.27.2</version>\n             <scope>test</scope>\n         </dependency>\n "
  },
  {
    "sha": "2d6b0fd40d2a8124e2fcbc45d9e25bbafe4f9beb",
    "filename": "service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTaskTuple.java",
    "status": "modified",
    "additions": 13,
    "deletions": 9,
    "changes": 22,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTaskTuple.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTaskTuple.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTaskTuple.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -12,9 +12,7 @@\n import org.apache.storm.tuple.Values;\n \n import java.io.*;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n import static eu.europeana.cloud.service.dps.storm.StormTupleKeys.*;\n \n@@ -41,6 +39,7 @@\n     private Revision revisionToBeApplied;\n     private OAIPMHHarvestingDetails sourceDetails;\n     private int recordAttemptNumber;\n+    private List<String> identifiersToUse;\n \n     public StormTaskTuple() {\n         this(0L, \"\", null, null, new HashMap<>(), null);\n@@ -54,12 +53,13 @@ public StormTaskTuple(long taskId, String taskName, String fileUrl,\n     public StormTaskTuple(long taskId, String taskName, String fileUrl,\n                           byte[] fileData, Map<String, String> parameters, Revision revisionToBeApplied,\n                           OAIPMHHarvestingDetails sourceDetails) {\n-        this(taskId, taskName, fileUrl, fileData, parameters, revisionToBeApplied, sourceDetails, 0);\n+        this(taskId, taskName, fileUrl, fileData, parameters, revisionToBeApplied, sourceDetails, 0, new ArrayList<>());\n     }\n \n     public StormTaskTuple(long taskId, String taskName, String fileUrl,\n                           byte[] fileData, Map<String, String> parameters, Revision revisionToBeApplied,\n-                          OAIPMHHarvestingDetails sourceDetails, int recordAttemptNumber) {\n+                          OAIPMHHarvestingDetails sourceDetails, int recordAttemptNumber,\n+                          List<String> localIdentifiers) {\n         this.taskId = taskId;\n         this.taskName = taskName;\n         this.fileUrl = fileUrl;\n@@ -68,6 +68,7 @@ public StormTaskTuple(long taskId, String taskName, String fileUrl,\n         this.revisionToBeApplied = revisionToBeApplied;\n         this.sourceDetails = sourceDetails;\n         this.recordAttemptNumber = recordAttemptNumber;\n+        this.identifiersToUse = localIdentifiers;\n     }\n \n     public ByteArrayInputStream getFileByteDataAsStream() {\n@@ -121,7 +122,8 @@ public static StormTaskTuple fromStormTuple(Tuple tuple) {\n                 (HashMap<String, String>)tuple.getValueByField(PARAMETERS_TUPLE_KEY),\n                 (Revision) tuple.getValueByField(REVISIONS),\n                 (OAIPMHHarvestingDetails) tuple.getValueByField(SOURCE_TO_HARVEST),\n-                tuple.getIntegerByField(RECORD_ATTEMPT_NUMBER));\n+                tuple.getIntegerByField(RECORD_ATTEMPT_NUMBER),\n+                (List<String>)tuple.getValueByField(LOCAL_IDENTIFIERS));\n \n     }\n \n@@ -135,12 +137,13 @@ public static StormTaskTuple fromValues(List<Object> list) {\n                 (Map<String, String>) list.get(4),\n                 (Revision) list.get(5),\n                 (OAIPMHHarvestingDetails) list.get(6),\n-                (Integer) list.get(7));\n+                (Integer) list.get(7),\n+                (ArrayList<String>)list.get(8));\n \n     }\n \n     public Values toStormTuple() {\n-        return new Values(taskId, taskName, fileUrl, fileData, parameters, revisionToBeApplied, sourceDetails, recordAttemptNumber);\n+        return new Values(taskId, taskName, fileUrl, fileData, parameters, revisionToBeApplied, sourceDetails, recordAttemptNumber, identifiersToUse);\n     }\n \n     public static Fields getFields() {\n@@ -152,7 +155,8 @@ public static Fields getFields() {\n                 PARAMETERS_TUPLE_KEY,\n                 REVISIONS,\n                 SOURCE_TO_HARVEST,\n-                RECORD_ATTEMPT_NUMBER);\n+                RECORD_ATTEMPT_NUMBER,\n+                LOCAL_IDENTIFIERS);\n     }\n \n     public boolean isMarkedAsDeleted() {"
  },
  {
    "sha": "37cfc37008f2da931d831213e92b673a8e6e8141",
    "filename": "service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTupleKeys.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTupleKeys.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTupleKeys.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/StormTupleKeys.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -30,4 +30,6 @@ private StormTupleKeys() {\n \tpublic static final String SOURCE_TO_HARVEST = \"SOURCE\";\n \n \tpublic static final String RECORD_ATTEMPT_NUMBER = \"RECORD_ATTEMPT_NUMBER\";\n+\n+\tpublic static final String LOCAL_IDENTIFIERS = \"LOCAL_IDENTIFIERS\";\n }\n\\ No newline at end of file"
  },
  {
    "sha": "54e3c10075bc76989ac8a782bc2ed3089e60df1d",
    "filename": "service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/utils/RetryableMethodExecutor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/utils/RetryableMethodExecutor.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/utils/RetryableMethodExecutor.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/common/src/main/java/eu/europeana/cloud/service/dps/storm/utils/RetryableMethodExecutor.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -42,7 +42,7 @@\n                 return callable.call();\n             } catch (Exception e) {\n                 if (retryCount-- > 0) {\n-                    LOGGER.warn(errorMessage + \" Retries Left {} \", retryCount, e);\n+                    LOGGER.warn(\"{} Retries Left {} \", errorMessage, retryCount, e);\n                     waitForSpecificTime(sleepTimeBetweenRetriesMs);\n                 } else {\n                     LOGGER.error(errorMessage);"
  },
  {
    "sha": "7e4a891cbf8b4947885e0c84315068b57b7e2ec9",
    "filename": "service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBolt.java",
    "status": "modified",
    "additions": 45,
    "deletions": 42,
    "changes": 87,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBolt.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBolt.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBolt.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -1,17 +1,19 @@\n package eu.europeana.cloud.service.dps.storm.io;\n \n-\n import eu.europeana.cloud.client.uis.rest.CloudException;\n import eu.europeana.cloud.client.uis.rest.UISClient;\n import eu.europeana.cloud.common.model.CloudId;\n+import eu.europeana.cloud.common.response.ErrorInfo;\n import eu.europeana.cloud.service.dps.PluginParameterKeys;\n import eu.europeana.cloud.service.dps.storm.StormTaskTuple;\n import eu.europeana.cloud.service.dps.storm.utils.RetryableMethodExecutor;\n import eu.europeana.cloud.service.uis.exception.IdHasBeenMappedException;\n import eu.europeana.cloud.service.uis.exception.RecordDoesNotExistException;\n+import eu.europeana.cloud.service.uis.exception.RecordIdDoesNotExistException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.List;\n \n /**\n  * Stores a Record on the cloud for the harvesting topology.\n@@ -25,51 +27,59 @@\n     public static final String ERROR_MSG_WHILE_GETTING_CLOUD_ID = \"Error while getting CloudId\";\n     private static final long serialVersionUID = 1L;\n     private static final Logger LOGGER = LoggerFactory.getLogger(HarvestingWriteRecordBolt.class);\n-    private String ecloudUisAddress;\n+    private final String ecloudUisAddress;\n     private transient UISClient uisClient;\n \n     public HarvestingWriteRecordBolt(String ecloudMcsAddress, String ecloudUisAddress) {\n         super(ecloudMcsAddress);\n         this.ecloudUisAddress = ecloudUisAddress;\n     }\n \n+    @Override\n+    public void prepare() {\n+        LOGGER.info(\"Preparing bolt for UIS address: {}\", ecloudUisAddress);\n+        uisClient = new UISClient(ecloudUisAddress);\n+        super.prepare();\n+    }\n+\n     @Override\n     protected boolean ignoreDeleted() {\n         return false;\n     }\n \n     @Override\n-    public void prepare() {\n-        uisClient = new UISClient(ecloudUisAddress);\n-        super.prepare();\n+    protected RecordWriteParams prepareWriteParameters(StormTaskTuple stormTaskTuple) throws CloudException {\n+        String providerId = stormTaskTuple.getParameter(PluginParameterKeys.PROVIDER_ID);\n+        String authenticationHeader = stormTaskTuple.getParameter(PluginParameterKeys.AUTHORIZATION_HEADER);\n+        String cloudId = getCloudId(authenticationHeader, providerId, stormTaskTuple.getIdentifiersToUse());\n+        String representationName = stormTaskTuple.getParameter(PluginParameterKeys.NEW_REPRESENTATION_NAME);\n+        if ((representationName == null || representationName.isEmpty()) && stormTaskTuple.getSourceDetails() != null) {\n+            representationName = stormTaskTuple.getParameter(PluginParameterKeys.SCHEMA_NAME);\n+            if (representationName == null)\n+                representationName = PluginParameterKeys.PLUGIN_PARAMETERS.get(PluginParameterKeys.NEW_REPRESENTATION_NAME);\n+        }\n+        RecordWriteParams writeParams = new RecordWriteParams();\n+        writeParams.setCloudId(cloudId);\n+        writeParams.setRepresentationName(representationName);\n+        writeParams.setProviderId(providerId);\n+        return writeParams;\n     }\n \n-    private String getCloudId(String authorizationHeader, String providerId, String localId, String additionalLocalIdentifier) throws CloudException {\n+    private String getCloudId(String authorizationHeader, String providerId, List<String> identifiersToUse) throws CloudException {\n+        if (identifiersToUse.isEmpty())\n+            throw new CloudException(\"List of local identifiers has to be longer than 1\", new RecordIdDoesNotExistException(new ErrorInfo()));\n         String result;\n         CloudId cloudId;\n-        cloudId = getCloudId(providerId, localId, authorizationHeader);\n+        cloudId = getCloudId(providerId, identifiersToUse.get(0), authorizationHeader);\n         if (cloudId != null) {\n             result = cloudId.getId();\n         } else {\n-            result = createCloudId(providerId, localId, authorizationHeader);\n+            result = createCloudId(providerId, identifiersToUse.get(0), authorizationHeader);\n+        }\n+        for (int i = 1; i < identifiersToUse.size(); i++) {\n+            attachAdditionalLocalIdentifier(identifiersToUse.get(i), result, providerId, authorizationHeader);\n         }\n-        if (additionalLocalIdentifier != null)\n-            attachAdditionalLocalIdentifier(additionalLocalIdentifier, result, providerId, authorizationHeader);\n         return result;\n-\n-    }\n-\n-    private boolean attachAdditionalLocalIdentifier(String additionalLocalIdentifier, String cloudId, String providerId, String authorizationHeader)\n-            throws CloudException {\n-        return RetryableMethodExecutor.executeOnRest(ERROR_MSG_WHILE_MAPPING_LOCAL_CLOUD_ID, () -> {\n-            try {\n-                return uisClient.createMapping(cloudId, providerId, additionalLocalIdentifier, AUTHORIZATION, authorizationHeader);\n-            } catch (Exception e) {\n-                if (e.getCause() instanceof IdHasBeenMappedException)\n-                    return true;\n-                throw e;\n-            }\n-        });\n     }\n \n     private CloudId getCloudId(String providerId, String localId, String authenticationHeader) throws CloudException {\n@@ -90,24 +100,17 @@ private String createCloudId(String providerId, String localId, String authentic\n                 uisClient.createCloudId(providerId, localId, AUTHORIZATION, authenticationHeader).getId());\n     }\n \n-    @Override\n-    protected RecordWriteParams prepareWriteParameters(StormTaskTuple stormTaskTuple) throws CloudException {\n-        String providerId = stormTaskTuple.getParameter(PluginParameterKeys.PROVIDER_ID);\n-        String localId = stormTaskTuple.getParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER);\n-        String additionalLocalIdentifier = stormTaskTuple.getParameter(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER);\n-        String authenticationHeader = stormTaskTuple.getParameter(PluginParameterKeys.AUTHORIZATION_HEADER);\n-        String cloudId = getCloudId(authenticationHeader, providerId, localId, additionalLocalIdentifier);\n-        String representationName = stormTaskTuple.getParameter(PluginParameterKeys.NEW_REPRESENTATION_NAME);\n-        if ((representationName == null || representationName.isEmpty()) && stormTaskTuple.getSourceDetails() != null) {\n-            representationName = stormTaskTuple.getParameter(PluginParameterKeys.SCHEMA_NAME);\n-            if (representationName == null)\n-                representationName = PluginParameterKeys.PLUGIN_PARAMETERS.get(PluginParameterKeys.NEW_REPRESENTATION_NAME);\n-        }\n-        RecordWriteParams writeParams = new RecordWriteParams();\n-        writeParams.setCloudId(cloudId);\n-        writeParams.setRepresentationName(representationName);\n-        writeParams.setProviderId(providerId);\n-        return writeParams;\n+    private boolean attachAdditionalLocalIdentifier(String additionalLocalIdentifier, String cloudId, String providerId, String authorizationHeader)\n+            throws CloudException {\n+        return RetryableMethodExecutor.executeOnRest(ERROR_MSG_WHILE_MAPPING_LOCAL_CLOUD_ID, () -> {\n+            try {\n+                return uisClient.createMapping(cloudId, providerId, additionalLocalIdentifier, AUTHORIZATION, authorizationHeader);\n+            } catch (Exception e) {\n+                if (e.getCause() instanceof IdHasBeenMappedException)\n+                    return true;\n+                throw e;\n+            }\n+        });\n     }\n }\n "
  },
  {
    "sha": "b5a79d09ec96086855f6bb8d6a8c9bb98e41e7b4",
    "filename": "service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/WriteRecordBolt.java",
    "status": "modified",
    "additions": 9,
    "deletions": 7,
    "changes": 16,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/WriteRecordBolt.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/WriteRecordBolt.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/io/src/main/java/eu/europeana/cloud/service/dps/storm/io/WriteRecordBolt.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -149,13 +149,15 @@ private URI createRepresentation(StormTaskTuple stormTaskTuple, RecordWriteParam\n \n     protected URI createRepresentationAndUploadFile(StormTaskTuple stormTaskTuple, RecordWriteParams writeParams) throws Exception {\n         return RetryableMethodExecutor.executeOnRest(\"Error while creating representation and uploading file\", () ->\n-                recordServiceClient.createRepresentation(\n-                        writeParams.getCloudId(),\n-                        writeParams.getRepresentationName(),\n-                        writeParams.getProviderId(), stormTaskTuple.getFileByteDataAsStream(),\n-                        stormTaskTuple.getParameter(PluginParameterKeys.OUTPUT_FILE_NAME),\n-                        TaskTupleUtility.getParameterFromTuple(stormTaskTuple, PluginParameterKeys.OUTPUT_MIME_TYPE),\n-                        AUTHORIZATION, stormTaskTuple.getParameter(PluginParameterKeys.AUTHORIZATION_HEADER)));\n+            recordServiceClient.createRepresentation(\n+                    writeParams.getCloudId(),\n+                    writeParams.getRepresentationName(),\n+                    writeParams.getProviderId(),\n+                    stormTaskTuple.getFileByteDataAsStream(),\n+                    stormTaskTuple.getParameter(PluginParameterKeys.OUTPUT_FILE_NAME),\n+                    TaskTupleUtility.getParameterFromTuple(stormTaskTuple, PluginParameterKeys.OUTPUT_MIME_TYPE),\n+                    AUTHORIZATION,\n+                    stormTaskTuple.getParameter(PluginParameterKeys.AUTHORIZATION_HEADER)));\n     }\n \n }"
  },
  {
    "sha": "c3fa9cdf8cc200511ac33ce071b571b23cb33ae5",
    "filename": "service/dps/storm/io/src/test/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBoltTest.java",
    "status": "modified",
    "additions": 108,
    "deletions": 30,
    "changes": 138,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/io/src/test/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBoltTest.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/io/src/test/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBoltTest.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/io/src/test/java/eu/europeana/cloud/service/dps/storm/io/HarvestingWriteRecordBoltTest.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -2,7 +2,6 @@\n \n import eu.europeana.cloud.client.uis.rest.CloudException;\n import eu.europeana.cloud.client.uis.rest.UISClient;\n-import eu.europeana.cloud.common.exceptions.ProviderDoesNotExistException;\n import eu.europeana.cloud.common.model.CloudId;\n import eu.europeana.cloud.common.model.Revision;\n import eu.europeana.cloud.common.response.ErrorInfo;\n@@ -27,20 +26,16 @@\n import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URI;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n+import java.util.*;\n \n import static eu.europeana.cloud.service.dps.test.TestConstants.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.*;\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.anyListOf;\n+import static org.mockito.ArgumentMatchers.*;\n import static org.mockito.Mockito.eq;\n import static org.mockito.Mockito.*;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n \n /**\n  * Created by Tarek on 7/21/2017.\n@@ -67,7 +62,7 @@\n     ArgumentCaptor<Values> captor = ArgumentCaptor.forClass(Values.class);\n \n     @InjectMocks\n-    private HarvestingWriteRecordBolt oaiWriteRecordBoltT = new HarvestingWriteRecordBolt(\"http://localhost:8080/mcs\", \"http://localhost:8080/uis\");\n+    private HarvestingWriteRecordBolt oaiWriteRecordBolt = new HarvestingWriteRecordBolt(\"http://localhost:8080/mcs\", \"http://localhost:8080/uis\");\n \n     @Before\n     public void init() throws Exception {\n@@ -79,15 +74,44 @@ public void init() throws Exception {\n     }\n \n     private StormTaskTuple getStormTaskTuple() throws Exception {\n-        return new StormTaskTuple(TASK_ID, TASK_NAME, SOURCE_VERSION_URL, FILE_DATA, prepareStormTaskTupleParameters(), new Revision(), oaipmhHarvestingDetails);\n+        return new StormTaskTuple(\n+                TASK_ID,\n+                TASK_NAME,\n+                SOURCE_VERSION_URL,\n+                FILE_DATA,\n+                prepareStormTaskTupleParameters(),\n+                new Revision(),\n+                oaipmhHarvestingDetails,\n+                0,\n+                Arrays.asList(SOURCE + LOCAL_ID, \"id2\", \"id3\"));\n+    }\n+\n+    private StormTaskTuple stormTaskTupleWithoutLocalIdentifiers() throws Exception {\n+        return new StormTaskTuple(\n+                TASK_ID,\n+                TASK_NAME,\n+                SOURCE_VERSION_URL,\n+                FILE_DATA,\n+                prepareStormTaskTupleParameters(),\n+                new Revision(),\n+                oaipmhHarvestingDetails,\n+                0,\n+                Arrays.asList());\n     }\n \n     private StormTaskTuple getStormTaskTupleWithAdditionalLocalIdParam() throws Exception {\n-        HashMap<String, String> parameters = prepareStormTaskTupleParameters();\n-        parameters.put(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER, \"additionalLocalIdentifier\");\n-        return new StormTaskTuple(TASK_ID, TASK_NAME, SOURCE_VERSION_URL, FILE_DATA, parameters, new Revision(), oaipmhHarvestingDetails);\n+        return new StormTaskTuple(TASK_ID, TASK_NAME, SOURCE_VERSION_URL, FILE_DATA,\n+                prepareStormTaskTupleParameters(), new Revision(),\n+                oaipmhHarvestingDetails, 0,\n+                Arrays.asList(SOURCE + LOCAL_ID, \"id2\", \"id3\"));\n     }\n \n+    private StormTaskTuple stormTaskTupleWithOneAdditionalLocalIdParam() throws Exception {\n+        return new StormTaskTuple(TASK_ID, TASK_NAME, SOURCE_VERSION_URL, FILE_DATA,\n+                prepareStormTaskTupleParameters(), new Revision(),\n+                oaipmhHarvestingDetails, 0,\n+                Arrays.asList(SOURCE + LOCAL_ID, \"id2\"));\n+    }\n \n     @Test\n     public void successfulExecuteStormTupleWithExistedCloudId() throws Exception {\n@@ -98,10 +122,31 @@ public void successfulExecuteStormTupleWithExistedCloudId() throws Exception {\n         URI uri = new URI(SOURCE_VERSION_URL);\n         when(recordServiceClient.createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString())).thenReturn(uri);\n \n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTuple());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTuple());\n \n         assertExecutionResults();\n+        verify(uisClient, times(1)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(0)).createCloudId(anyString(), anyString(), anyString(), anyString());\n+        verify(uisClient, times(2)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), anyString(), anyString(), anyString());\n+    }\n+\n+    @Test\n+    public void successfulEmitErrorNotificationInCaseOfMissingLocalIdentifiers() throws Exception {\n+        Tuple anchorTuple = mock(TupleImpl.class);\n+        CloudId cloudId = mock(CloudId.class);\n+        when(cloudId.getId()).thenReturn(SOURCE + CLOUD_ID);\n+        when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenReturn(cloudId);\n+        URI uri = new URI(SOURCE_VERSION_URL);\n+        when(recordServiceClient.createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString())).thenReturn(uri);\n \n+        oaiWriteRecordBolt.execute(anchorTuple, stormTaskTupleWithoutLocalIdentifiers());\n+        //\n+        verify(outputCollector, times(1)).emit(eq(AbstractDpsBolt.NOTIFICATION_STREAM_NAME), any(Tuple.class), anyList());\n+        verify(outputCollector, times(0)).emit(any(Tuple.class), captor.capture());\n+        //\n+        verify(uisClient, times(0)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(0)).createCloudId(anyString(), anyString(), anyString(), anyString());\n+        verify(uisClient, times(0)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), anyString(), anyString(), anyString());\n     }\n \n     @Test\n@@ -115,10 +160,9 @@ public void successfulExecuteStormTupleWithDeletedRecord() throws Exception {\n \n         StormTaskTuple stormTaskTuple = getStormTaskTuple();\n         stormTaskTuple.setMarkedAsDeleted(true);\n-        oaiWriteRecordBoltT.execute(anchorTuple, stormTaskTuple);\n+        oaiWriteRecordBolt.execute(anchorTuple, stormTaskTuple);\n \n         assertExecutionResults();\n-\n     }\n \n     @Test\n@@ -128,7 +172,7 @@ public void shouldRetry7TimesBeforeFailingWhenThrowingMCSException() throws Exce\n         when(cloudId.getId()).thenReturn(SOURCE + CLOUD_ID);\n         when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenReturn(cloudId);\n         doThrow(MCSException.class).when(recordServiceClient).createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString());\n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTuple());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTuple());\n         assertFailingExpectationWhenCreatingRepresentation();\n     }\n \n@@ -138,16 +182,15 @@ public void shouldRetry7TimesBeforeFailingWhenThrowingDriverException() throws E\n         CloudId cloudId = mock(CloudId.class);\n         when(cloudId.getId()).thenReturn(SOURCE + CLOUD_ID);\n         when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenReturn(cloudId);\n-        doThrow(DriverException.class).when(recordServiceClient).createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), anyString(), anyString(),anyString(),anyString());\n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTuple());\n+        doThrow(DriverException.class).when(recordServiceClient).createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTuple());\n         assertFailingExpectationWhenCreatingRepresentation();\n     }\n \n     private void assertFailingExpectationWhenCreatingRepresentation() throws MCSException, IOException {\n         verify(outputCollector, times(0)).emit(anyList());\n         verify(recordServiceClient, times(8)).createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString());\n         verify(outputCollector, times(1)).emit(eq(AbstractDpsBolt.NOTIFICATION_STREAM_NAME), any(Tuple.class), anyListOf(Object.class));\n-\n     }\n \n     @Test\n@@ -161,15 +204,18 @@ public void successfulExecuteStormTupleWithCreatingNewCloudId() throws Exception\n         URI uri = new URI(SOURCE_VERSION_URL);\n         when(recordServiceClient.createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString())).thenReturn(uri);\n \n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTuple());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTuple());\n \n         assertExecutionResults();\n \n+        verify(uisClient, times(1)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(1)).createCloudId(anyString(), anyString(), anyString(), anyString());\n+        verify(uisClient, times(2)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), anyString(), anyString(), anyString());\n \n     }\n \n     @Test\n-    public void shouldSuccessfullyExecuteStormTupleWithCreatingNewCloudIdAndAdditionalLocalIdMapping() throws Exception {\n+    public void shouldSuccessfullyExecuteStormTupleWithCreatingNewCloudIdAndAdditionalLocalIdMappings() throws Exception {\n         Tuple anchorTuple = mock(TupleImpl.class);\n         CloudException exception = new CloudException(\"\", new RecordDoesNotExistException(new ErrorInfo()));\n         CloudId cloudId = mock(CloudId.class);\n@@ -180,10 +226,34 @@ public void shouldSuccessfullyExecuteStormTupleWithCreatingNewCloudIdAndAddition\n         URI uri = new URI(SOURCE_VERSION_URL);\n         when(recordServiceClient.createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString())).thenReturn(uri);\n \n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTupleWithAdditionalLocalIdParam());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTupleWithAdditionalLocalIdParam());\n \n         assertExecutionResults();\n \n+        verify(uisClient, times(1)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(1)).createCloudId(anyString(), anyString(), anyString(), anyString());\n+        verify(uisClient, times(2)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), anyString(), anyString(), anyString());\n+    }\n+\n+    @Test\n+    public void shouldSuccessfullyExecuteStormTupleWithCreatingNewCloudIdAndAdditionalOneMapping() throws Exception {\n+        Tuple anchorTuple = mock(TupleImpl.class);\n+        CloudException exception = new CloudException(\"\", new RecordDoesNotExistException(new ErrorInfo()));\n+        CloudId cloudId = mock(CloudId.class);\n+        when(cloudId.getId()).thenReturn(SOURCE + CLOUD_ID);\n+        when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenThrow(exception);\n+        when(uisClient.createCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenReturn(cloudId);\n+        when(uisClient.createMapping(cloudId.getId(), SOURCE + DATA_PROVIDER, \"additionalLocalIdentifier\",AUTHORIZATION, AUTHORIZATION_HEADER)).thenReturn(true);\n+        URI uri = new URI(SOURCE_VERSION_URL);\n+        when(recordServiceClient.createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString())).thenReturn(uri);\n+\n+        oaiWriteRecordBolt.execute(anchorTuple, stormTaskTupleWithOneAdditionalLocalIdParam());\n+\n+        assertExecutionResults();\n+\n+        verify(uisClient, times(1)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(1)).createCloudId(anyString(), anyString(), anyString(), anyString());\n+        verify(uisClient, times(1)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), anyString(), anyString(), anyString());\n     }\n \n     @Test\n@@ -196,15 +266,21 @@ public void shouldSuccessfullyExecuteStormTupleWhenAdditionalMappingAlreadyExist\n         when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenThrow(exception);\n         when(uisClient.createCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenReturn(cloudId);\n         CloudException idHasBeenMappedException = new CloudException(\"\", new IdHasBeenMappedException(new ErrorInfo()));\n-        when(uisClient.createMapping(cloudId.getId(), SOURCE + DATA_PROVIDER, \"additionalLocalIdentifier\")).thenThrow(idHasBeenMappedException);\n+        when(uisClient.createMapping(cloudId.getId(), SOURCE + DATA_PROVIDER, \"id2\")).thenThrow(idHasBeenMappedException);\n+        when(uisClient.createMapping(cloudId.getId(), SOURCE + DATA_PROVIDER, \"id3\")).thenThrow(idHasBeenMappedException);\n         URI uri = new URI(SOURCE_VERSION_URL);\n         when(recordServiceClient.createRepresentation(anyString(), anyString(), anyString(), any(InputStream.class), any(), anyString(),anyString(),anyString())).thenReturn(uri);\n \n         //when\n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTupleWithAdditionalLocalIdParam());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTupleWithAdditionalLocalIdParam());\n \n         //then\n         assertExecutionResults();\n+\n+        verify(uisClient, times(1)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(1)).createCloudId(anyString(), anyString(), anyString(), anyString());\n+        verify(uisClient, times(1)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), eq(\"id2\"), anyString(), anyString());\n+        verify(uisClient, times(1)).createMapping(anyString(), eq(SOURCE + DATA_PROVIDER), eq(\"id3\"), anyString(), anyString());\n     }\n \n     @Test\n@@ -216,13 +292,15 @@ public void shouldRetry7BeforeFailingWhenMappingAdditionalLocalId() throws Excep\n         when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenThrow(exception);\n         when(uisClient.createCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenReturn(cloudId);\n \n-        when(uisClient.createMapping(cloudId.getId(), SOURCE + DATA_PROVIDER, \"additionalLocalIdentifier\", AUTHORIZATION, AUTHORIZATION_HEADER)).thenThrow(CloudException.class);\n+        when(uisClient.createMapping(eq(cloudId.getId()), eq(SOURCE + DATA_PROVIDER), anyString(), eq(AUTHORIZATION), eq(AUTHORIZATION_HEADER))).thenThrow(CloudException.class);\n         //when\n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTupleWithAdditionalLocalIdParam());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTupleWithAdditionalLocalIdParam());\n \n         //then\n         verify(outputCollector, times(0)).emit(anyList());\n-        verify(uisClient, times(8)).createMapping(anyString(), anyString(), anyString(),anyString(),anyString());\n+        verify(uisClient, times(1)).getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(1)).createCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n+        verify(uisClient, times(8)).createMapping(isNull(), anyString(), anyString(),anyString(),anyString());\n         verify(outputCollector, times(1)).emit(eq(AbstractDpsBolt.NOTIFICATION_STREAM_NAME), any(Tuple.class), anyListOf(Object.class));\n \n     }\n@@ -233,7 +311,7 @@ public void shouldRetry7TimesBeforeFailingWhenCreatingNewCloudId() throws Except\n         CloudException exception = new CloudException(\"\", new RecordDoesNotExistException(new ErrorInfo()));\n         when(uisClient.getCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER)).thenThrow(exception);\n         doThrow(CloudException.class).when(uisClient).createCloudId(SOURCE + DATA_PROVIDER, SOURCE + LOCAL_ID,AUTHORIZATION,AUTHORIZATION_HEADER);\n-        oaiWriteRecordBoltT.execute(anchorTuple, getStormTaskTuple());\n+        oaiWriteRecordBolt.execute(anchorTuple, getStormTaskTuple());\n         verify(outputCollector, times(0)).emit(anyList());\n         verify(uisClient, times(8)).createCloudId(anyString(), anyString(),anyString(),anyString());\n         verify(outputCollector, times(1)).emit(eq(AbstractDpsBolt.NOTIFICATION_STREAM_NAME), any(Tuple.class), anyListOf(Object.class));\n@@ -253,7 +331,7 @@ private void assertExecutionResults() {\n         verify(outputCollector, times(1)).emit(any(Tuple.class), captor.capture());\n         assertThat(captor.getAllValues().size(), is(1));\n         Values value = captor.getAllValues().get(0);\n-        assertEquals(8, value.size());\n+        assertEquals(9, value.size());\n         assertTrue(value.get(4) instanceof Map);\n         Map<String, String> parameters = (Map<String, String>) value.get(4);\n         assertNotNull(parameters.get(PluginParameterKeys.OUTPUT_URL));"
  },
  {
    "sha": "0ee14c81ccadc8f8e20325efb2d33f2186e494d8",
    "filename": "service/dps/storm/topologies/http-harvesting/pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/topologies/http-harvesting/pom.xml",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/topologies/http-harvesting/pom.xml",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/topologies/http-harvesting/pom.xml?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -180,17 +180,17 @@\n         <dependency>\n             <groupId>com.fasterxml.jackson.core</groupId>\n             <artifactId>jackson-annotations</artifactId>\n-            <version>2.5.4</version>\n+            <version>2.12.2</version>\n         </dependency>\n         <dependency>\n             <groupId>com.fasterxml.jackson.core</groupId>\n             <artifactId>jackson-databind</artifactId>\n-            <version>2.5.4</version>\n+            <version>2.12.2</version>\n         </dependency>\n         <dependency>\n             <groupId>com.fasterxml.jackson.core</groupId>\n             <artifactId>jackson-core</artifactId>\n-            <version>2.5.4</version>\n+            <version>2.12.2</version>\n         </dependency>\n     </dependencies>\n "
  },
  {
    "sha": "768aa175d50b90c4f3d7812c32bb27163c478d25",
    "filename": "service/dps/storm/topologies/oai-pmh/src/main/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBolt.java",
    "status": "modified",
    "additions": 7,
    "deletions": 28,
    "changes": 35,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/topologies/oai-pmh/src/main/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBolt.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/topologies/oai-pmh/src/main/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBolt.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/topologies/oai-pmh/src/main/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBolt.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -20,8 +20,7 @@\n import java.util.Calendar;\n import java.util.Date;\n \n-import static eu.europeana.cloud.service.dps.PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER;\n-import static eu.europeana.cloud.service.dps.PluginParameterKeys.DPS_TASK_INPUT_DATA;\n+import static eu.europeana.cloud.service.dps.PluginParameterKeys.*;\n \n /**\n  * Storm bolt for harvesting single record from OAI endpoint.\n@@ -56,12 +55,7 @@ public void execute(Tuple anchorTuple, StormTaskTuple stormTaskTuple) {\n             try (final InputStream record = harvester.harvestRecord(\n                    new OaiRepository(endpointLocation, metadataPrefix), recordId)) {\n                 stormTaskTuple.setFileData(record);\n-\n-                if (useHeaderIdentifier(stormTaskTuple))\n-                    trimLocalId(stormTaskTuple); //Added for the time of migration - MET-1189\n-                else\n-                    useEuropeanaId(stormTaskTuple);\n-\n+                prepareLocalIdentifiers(stormTaskTuple);\n                 outputCollector.emit(anchorTuple, stormTaskTuple.toStormTuple());\n \n                 LOGGER.info(\"Harvesting finished successfully for: {} and {}\", recordId, endpointLocation);\n@@ -95,27 +89,19 @@ protected void cleanInvalidData(StormTaskTuple tuple) {\n         LOGGER.info(\"Retry number {} detected. No cleaning phase required. Record will be harvested again.\", tries);\n     }\n \n-    private void trimLocalId(StormTaskTuple stormTaskTuple) {\n-        String europeanaIdPrefix = stormTaskTuple.getParameter(PluginParameterKeys.MIGRATION_IDENTIFIER_PREFIX);\n-        String localId = stormTaskTuple.getParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER);\n-        if (europeanaIdPrefix != null && localId.startsWith(europeanaIdPrefix)) {\n-            String trimmed = localId.replace(europeanaIdPrefix, \"\");\n-            stormTaskTuple.addParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER, trimmed);\n-        }\n-    }\n-\n-    private void useEuropeanaId(StormTaskTuple stormTaskTuple) throws EuropeanaIdException {\n+    private void prepareLocalIdentifiers(StormTaskTuple stormTaskTuple) throws EuropeanaIdException{\n         String datasetId = stormTaskTuple.getParameter(PluginParameterKeys.METIS_DATASET_ID);\n         String document = new String(stormTaskTuple.getFileData());\n         EuropeanaIdCreator europeanaIdCreator = new EuropeanaIdCreator();\n         EuropeanaGeneratedIdsMap europeanaIdMap = europeanaIdCreator.constructEuropeanaId(document, datasetId);\n         String europeanaId = europeanaIdMap.getEuropeanaGeneratedId();\n         String localIdFromProvider = europeanaIdMap.getSourceProvidedChoAbout();\n-        stormTaskTuple.addParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER, europeanaId);\n-        stormTaskTuple.addParameter(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER, localIdFromProvider);\n+        //\n+        stormTaskTuple.getIdentifiersToUse().add(stormTaskTuple.getParameter(CLOUD_LOCAL_IDENTIFIER));\n+        stormTaskTuple.getIdentifiersToUse().add(europeanaId);\n+        stormTaskTuple.getIdentifiersToUse().add(localIdFromProvider);\n     }\n \n-\n     @Override\n     public void prepare() {\n         harvester = HarvesterFactory.createOaiHarvester(null, DEFAULT_RETRIES, SLEEP_TIME);\n@@ -137,11 +123,4 @@ private String readMetadataPrefix(StormTaskTuple stormTaskTuple) {\n         return stormTaskTuple.getParameter(PluginParameterKeys.SCHEMA_NAME);\n     }\n \n-    private boolean useHeaderIdentifier(StormTaskTuple stormTaskTuple) {\n-        boolean useHeaderIdentifiers = false;\n-        if (\"true\".equals(stormTaskTuple.getParameter(PluginParameterKeys.USE_DEFAULT_IDENTIFIERS))) {\n-            useHeaderIdentifiers = true;\n-        }\n-        return useHeaderIdentifiers;\n-    }\n }"
  },
  {
    "sha": "1062b2cd46123b25b09e2ea3350ee4f75e8ab7a5",
    "filename": "service/dps/storm/topologies/oai-pmh/src/test/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBoltTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 90,
    "changes": 103,
    "blob_url": "https://github.com/europeana/Europeana-Cloud/blob/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/topologies/oai-pmh/src/test/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBoltTest.java",
    "raw_url": "https://github.com/europeana/Europeana-Cloud/raw/8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be/service/dps/storm/topologies/oai-pmh/src/test/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBoltTest.java",
    "contents_url": "https://api.github.com/repos/europeana/Europeana-Cloud/contents/service/dps/storm/topologies/oai-pmh/src/test/java/eu/europeana/cloud/service/dps/storm/topologies/oaipmh/bolt/RecordHarvestingBoltTest.java?ref=8403dc9e547e12cc8a9f4f2c7ec8961c3e97a3be",
    "patch": "@@ -18,8 +18,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n \n /**\n@@ -77,79 +76,12 @@ public void shouldHarvestRecordInEDMAndExtractIdentifiers() throws IOException,\n         verifySuccessfulEmit();\n \n         verify(spiedTask).setFileData(Mockito.any(InputStream.class));\n-        assertEquals(\"http://more.locloud.eu/object/DCU/24927017\", spiedTask.getParameter(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER));\n-        assertEquals(\"/2020739_Ag_EU_CARARE_2Cultur/object_DCU_24927017\", spiedTask.getParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER));\n+        assertTrue(spiedTask.getIdentifiersToUse().contains(\"http://more.locloud.eu/object/DCU/24927017\"));\n+        assertTrue(spiedTask.getIdentifiersToUse().contains(\"/2020739_Ag_EU_CARARE_2Cultur/object_DCU_24927017\"));\n+        assertTrue(spiedTask.getIdentifiersToUse().contains(\"oaiIdentifier\"));\n+        assertTrue(spiedTask.getIdentifiersToUse().size() == 3);\n     }\n \n-    @Test\n-    public void shouldHarvestRecordInEDMAndNotUseHeaderIdentifierIfParameterIsDifferentThanTrue() throws IOException, HarvesterException {\n-        //given\n-        Tuple anchorTuple = mock(TupleImpl.class);\n-\n-        InputStream fileContentAsStream = getFileContentAsStream(\"/sampleEDMRecord.xml\");\n-        when(harvester.harvestRecord(any(), anyString())).thenReturn(fileContentAsStream);\n-\n-        StormTaskTuple task = taskWithGivenValueOfUseHeaderIdentifiersParameter(\"blablaba\");\n-        StormTaskTuple spiedTask = spy(task);\n-\n-        //when\n-        recordHarvestingBolt.execute(anchorTuple, spiedTask);\n-\n-        //then\n-        verifySuccessfulEmit();\n-\n-        verify(spiedTask).setFileData(Mockito.any(InputStream.class));\n-        assertEquals(\"http://more.locloud.eu/object/DCU/24927017\", spiedTask.getParameter(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER));\n-        assertEquals(\"/2020739_Ag_EU_CARARE_2Cultur/object_DCU_24927017\", spiedTask.getParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER));\n-    }\n-\n-\n-    @Test\n-    public void shouldHarvestRecordInEDMAndUseHeaderIdentifierIfSpecifiedInTaskParameters() throws IOException, HarvesterException {\n-        //given\n-        Tuple anchorTuple = mock(TupleImpl.class);\n-\n-        InputStream fileContentAsStream = getFileContentAsStream(\"/sampleEDMRecord.xml\");\n-        when(harvester.harvestRecord(any(), anyString())).thenReturn(fileContentAsStream);\n-\n-        StormTaskTuple task = taskWithGivenValueOfUseHeaderIdentifiersParameter(\"true\");\n-        StormTaskTuple spiedTask = spy(task);\n-\n-        //when\n-        recordHarvestingBolt.execute(anchorTuple, spiedTask);\n-\n-        //then\n-        verifySuccessfulEmit();\n-\n-        verify(spiedTask).setFileData(Mockito.any(InputStream.class));\n-        assertNull( spiedTask.getParameter(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER));\n-        assertEquals(\"http://data.europeana.eu/item/2064203/o_aj_kk_tei_3\", spiedTask.getParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER));\n-    }\n-\n-\n-    @Test\n-    public void shouldHarvestRecordInEDMAndUseHeaderIdentifierAndTrimItIfSpecifiedInTaskParameters() throws IOException, HarvesterException {\n-        //given\n-        InputStream fileContentAsStream = getFileContentAsStream(\"/sampleEDMRecord.xml\");\n-        Tuple anchorTuple = mock(TupleImpl.class);\n-\n-        when(harvester.harvestRecord(any(), anyString())).thenReturn(fileContentAsStream);\n-\n-        StormTaskTuple task = taskWithGivenValueOfUseHeaderIdentifiersAndTrimmingPrefix(\"true\");\n-        StormTaskTuple spiedTask = spy(task);\n-\n-        //when\n-        recordHarvestingBolt.execute(anchorTuple, spiedTask);\n-\n-        //then\n-        verifySuccessfulEmit();\n-\n-        verify(spiedTask).setFileData(Mockito.any(InputStream.class));\n-        assertNull(spiedTask.getParameter(PluginParameterKeys.ADDITIONAL_LOCAL_IDENTIFIER));\n-        assertEquals(\"/item/2064203/o_aj_kk_tei_3\", spiedTask.getParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER));\n-    }\n-\n-\n     @Test\n     public void shouldEmitErrorOnHarvestingExceptionWhenCannotExctractEuropeanaIdFromEDM() throws HarvesterException {\n         //given\n@@ -222,19 +154,6 @@ public void harvestForEmptyPrefix() {\n         verifyErrorEmit();\n     }\n \n-    private StormTaskTuple taskWithGivenValueOfUseHeaderIdentifiersAndTrimmingPrefix(String paramValue) {\n-        StormTaskTuple stormTaskTuple = taskWithGivenValueOfUseHeaderIdentifiersParameter(paramValue);\n-        stormTaskTuple.addParameter(PluginParameterKeys.MIGRATION_IDENTIFIER_PREFIX, \"http://data.europeana.eu\");\n-        return stormTaskTuple;\n-    }\n-\n-    private StormTaskTuple taskWithGivenValueOfUseHeaderIdentifiersParameter(String paramValue) {\n-        StormTaskTuple stormTaskTuple = taskWithAllNeededParameters();\n-        stormTaskTuple.addParameter(PluginParameterKeys.USE_DEFAULT_IDENTIFIERS, paramValue);\n-        stormTaskTuple.addParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER, \"http://data.europeana.eu/item/2064203/o_aj_kk_tei_3\");\n-        return stormTaskTuple;\n-    }\n-\n     private StormTaskTuple taskWithAllNeededParameters() {\n         StormTaskTuple task = new StormTaskTuple();\n         OAIPMHHarvestingDetails details = new OAIPMHHarvestingDetails();\n@@ -243,13 +162,15 @@ private StormTaskTuple taskWithAllNeededParameters() {\n         task.addParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER, \"oaiIdentifier\");\n         task.addParameter(PluginParameterKeys.SCHEMA_NAME, \"schema\");\n         task.addParameter(PluginParameterKeys.METIS_DATASET_ID, \"2020739_Ag_EU_CARARE_2Culture\");\n+        task.addParameter(PluginParameterKeys.MESSAGE_PROCESSING_START_TIME_IN_MS, \"0\");\n         return task;\n     }\n \n     private StormTaskTuple taskWithoutResourceUrl() {\n         StormTaskTuple task = new StormTaskTuple();\n         OAIPMHHarvestingDetails details = new OAIPMHHarvestingDetails(\"schema\");\n         task.setSourceDetails(details);\n+        task.addParameter(PluginParameterKeys.MESSAGE_PROCESSING_START_TIME_IN_MS, \"0\");\n         return task;\n     }\n \n@@ -260,6 +181,7 @@ private StormTaskTuple taskWithoutRecordId() {\n         task.setSourceDetails(details);\n         task.addParameter(PluginParameterKeys.DPS_TASK_INPUT_DATA, \"urlToOAIEndpoint\");\n         task.addParameter(PluginParameterKeys.SCHEMA_NAME, \"schema\");\n+        task.addParameter(PluginParameterKeys.MESSAGE_PROCESSING_START_TIME_IN_MS, \"0\");\n         return task;\n     }\n \n@@ -269,14 +191,15 @@ private StormTaskTuple taskWithoutPrefix() {\n         task.addParameter(PluginParameterKeys.DPS_TASK_INPUT_DATA, \"urlToOAIEndpoint\");\n         task.addParameter(PluginParameterKeys.CLOUD_LOCAL_IDENTIFIER, \"oaiIdentifier\");\n         task.setSourceDetails(details);\n+        task.addParameter(PluginParameterKeys.MESSAGE_PROCESSING_START_TIME_IN_MS, \"0\");\n         return task;\n     }\n \n     /**\n      * Checks if emit to standard stream occured\n      */\n     private void verifySuccessfulEmit() {\n-        verify(outputCollector, times(1)).emit(Mockito.anyList());\n+        verify(outputCollector, times(1)).emit(any(Tuple.class), Mockito.anyList());\n         verify(outputCollector, times(0)).emit(eq(\"NotificationStream\"), Mockito.anyList());\n     }\n \n@@ -285,11 +208,11 @@ private void verifySuccessfulEmit() {\n      */\n     private void verifyErrorEmit() {\n \n-        verify(outputCollector, times(1)).emit(eq(\"NotificationStream\"), Mockito.anyList());\n-        verify(outputCollector, times(0)).emit(Mockito.anyList());\n+        verify(outputCollector, times(1)).emit(eq(\"NotificationStream\"), any(Tuple.class), Mockito.anyList());\n+        verify(outputCollector, times(0)).emit(any(Tuple.class), Mockito.anyList());\n     }\n \n     private static InputStream getFileContentAsStream(String name) {\n-        return Object.class.getResourceAsStream(name);\n+        return RecordHarvestingBoltTest.class.getResourceAsStream(name);\n     }\n }"
  }
]
