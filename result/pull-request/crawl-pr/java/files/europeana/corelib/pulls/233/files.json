[
  {
    "sha": "637a02c798bc57cf59d137522054950729912af5",
    "filename": "corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/model/schemaorg/Reference.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/europeana/corelib/blob/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/model/schemaorg/Reference.java",
    "raw_url": "https://github.com/europeana/corelib/raw/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/model/schemaorg/Reference.java",
    "contents_url": "https://api.github.com/repos/europeana/corelib/contents/corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/model/schemaorg/Reference.java?ref=1d6a266bdae65d95184b5908b1dcf546f835d148",
    "patch": "@@ -62,4 +62,12 @@ public int hashCode(){\n                 .append(id)\n                 .toHashCode();\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"Reference{\" +\n+                \"type=\" + type +\n+                \", id='\" + id + '\\'' +\n+                '}';\n+    }\n }"
  },
  {
    "sha": "c40cf01e8fcc7501909c567ac536926a03cb6e00",
    "filename": "corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/utils/SchemaOrgUtils.java",
    "status": "modified",
    "additions": 258,
    "deletions": 233,
    "changes": 491,
    "blob_url": "https://github.com/europeana/corelib/blob/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/utils/SchemaOrgUtils.java",
    "raw_url": "https://github.com/europeana/corelib/raw/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/utils/SchemaOrgUtils.java",
    "contents_url": "https://api.github.com/repos/europeana/corelib/contents/corelib-schemaorg/src/main/java/eu/europeana/corelib/edm/utils/SchemaOrgUtils.java?ref=1d6a266bdae65d95184b5908b1dcf546f835d148",
    "patch": "@@ -93,13 +93,13 @@ protected static void getSchemaOrg(FullBeanImpl bean, List<Thing> objectsToSeria\n         }\n     }\n \n-        /**\n-         * Update properties of the given Schema.Org Thing using data from the given EDM\n-         * Contextual Class\n-         *\n-         * @param entity source EDM Contextual Class\n-         * @param thing  Schema.Org Contextual Entity to update\n-         */\n+    /**\n+     * Update properties of the given Schema.Org Thing using data from the given EDM\n+     * Contextual Class\n+     *\n+     * @param entity source EDM Contextual Class\n+     * @param thing  Schema.Org Contextual Entity to update\n+     */\n     public static void processEntity(ContextualClass entity,\n                                      eu.europeana.corelib.edm.model.schemaorg.ContextualEntity thing) {\n \n@@ -119,16 +119,18 @@ public static void processEntity(ContextualClass entity,\n \n     /**\n      * Process all concepts on the given list and create a Thing object for each.\n+     * To limit the size of schema.org responses only entity-ids are listed for\n+     * contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n      *\n-     * @param concepts concepts to be processed\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param concepts                 concepts to be processed\n+     * @param linkedContextualEntities list of all the references in the object\n      * @return list of created Thing objects for each concept\n      */\n     private static List<Thing> processConcepts(List<ConceptImpl> concepts, List<String> linkedContextualEntities) {\n         List<Thing> referencedObjects = new ArrayList<>();\n \n         for (ConceptImpl concept : concepts) {\n-            if(linkedContextualEntities.contains(concept.getAbout())) {\n+            if (linkedContextualEntities.contains(concept.getAbout()) && !StringUtils.startsWith(concept.getAbout(), URL_PREFIX)) {\n                 eu.europeana.corelib.edm.model.schemaorg.ContextualEntity conceptObject = new eu.europeana.corelib.edm.model.schemaorg.Concept();\n                 referencedObjects.add(conceptObject);\n \n@@ -150,32 +152,29 @@ public static void processConcept(Concept concept,\n                                       eu.europeana.corelib.edm.model.schemaorg.ContextualEntity conceptObject) {\n         // @id\n         conceptObject.setId(concept.getAbout());\n-        //To limit the size of schema.org responses only entity-ids are listed for\n-        // contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n-        if (!concept.getAbout().startsWith(URL_PREFIX)) {\n-            // name\n-            addMultilingualProperties(conceptObject, concept.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n+        // name\n+        addMultilingualProperties(conceptObject, concept.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n \n-            // alternateName\n-            addMultilingualProperties(conceptObject, concept.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n+        // alternateName\n+        addMultilingualProperties(conceptObject, concept.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n \n-            // description\n-            addMultilingualProperties(conceptObject, concept.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n+        // description\n+        addMultilingualProperties(conceptObject, concept.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n \n-            // sameAs\n-            addTextProperties(conceptObject, toList(concept.getExactMatch()), SchemaOrgConstants.PROPERTY_SAME_AS);\n+        // sameAs\n+        addTextProperties(conceptObject, toList(concept.getExactMatch()), SchemaOrgConstants.PROPERTY_SAME_AS);\n \n-            // url\n-            addEntityPageUrl(concept, conceptObject, SchemaOrgConstants.ENTITY_PAGE_URL_CONCEPT_TYPE);\n+        // url\n+        addEntityPageUrl(concept, conceptObject, SchemaOrgConstants.ENTITY_PAGE_URL_CONCEPT_TYPE);\n+\n+        // image\n+        conceptObject.setImage(concept.getFoafDepiction());\n \n-            // image\n-            conceptObject.setImage(concept.getFoafDepiction());\n-        }\n     }\n \n     private static void addEntityPageUrl(ContextualClass entity,\n-\t    eu.europeana.corelib.edm.model.schemaorg.ContextualEntity conceptObject, String entityPageType) {\n-\tif(StringUtils.startsWithIgnoreCase(entity.getAbout(), URL_PREFIX)) {\n+                                         eu.europeana.corelib.edm.model.schemaorg.ContextualEntity conceptObject, String entityPageType) {\n+        if (StringUtils.startsWithIgnoreCase(entity.getAbout(), URL_PREFIX)) {\n             String entityPageUrl = String.format(SchemaOrgConstants.ENTITY_PAGE_URL_PATTERN, entityPageType,\n                     entity.getEntityIdentifier());\n             conceptObject.setEntityPageUrl(entityPageUrl);\n@@ -184,16 +183,18 @@ private static void addEntityPageUrl(ContextualClass entity,\n \n     /**\n      * Process list of places and create Place for each.\n+     * To limit the size of schema.org responses only entity-ids are listed for\n+     * contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n      *\n-     * @param places places list to process\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param places                   places list to process\n+     * @param linkedContextualEntities list of all the references in the object\n      * @return list of Place objects created from the input list\n      */\n     private static List<Thing> processPlaces(List<PlaceImpl> places, List<String> linkedContextualEntities) {\n         List<Thing> referencedObjects = new ArrayList<>();\n \n         for (PlaceImpl place : places) {\n-            if(linkedContextualEntities.contains(place.getAbout())) {\n+            if (linkedContextualEntities.contains(place.getAbout()) && !StringUtils.startsWith(place.getAbout(), URL_PREFIX)) {\n                 Place placeObject = new Place();\n                 referencedObjects.add(placeObject);\n \n@@ -216,39 +217,35 @@ public static void processPlace(eu.europeana.corelib.definitions.edm.entity.Plac\n \n         // @id\n         placeObject.setId(edmPlace.getAbout());\n-        //To limit the size of schema.org responses only entity-ids are listed for\n-        // contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n-        if (!edmPlace.getAbout().startsWith(URL_PREFIX)) {\n \n-            // name\n-            addMultilingualProperties(placeObject, edmPlace.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n+        // name\n+        addMultilingualProperties(placeObject, edmPlace.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n \n-            // alternateName\n-            addMultilingualProperties(placeObject, edmPlace.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n+        // alternateName\n+        addMultilingualProperties(placeObject, edmPlace.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n \n-            // geo\n-            createGeoCoordinates(edmPlace, placeObject);\n+        // geo\n+        createGeoCoordinates(edmPlace, placeObject);\n \n-            // description\n-            addMultilingualProperties(placeObject, edmPlace.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n+        // description\n+        addMultilingualProperties(placeObject, edmPlace.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n \n-            // containsPlace\n-            addReferences(placeObject, edmPlace.getDcTermsHasPart(), SchemaOrgConstants.PROPERTY_CONTAINS_PLACE,\n-                    Place.class, null);\n+        // containsPlace\n+        addReferences(placeObject, edmPlace.getDcTermsHasPart(), SchemaOrgConstants.PROPERTY_CONTAINS_PLACE,\n+                Place.class, null);\n \n-            // containedInPlace\n-            addReferences(placeObject, edmPlace.getIsPartOf(), SchemaOrgConstants.PROPERTY_CONTAINED_IN_PLACE, Place.class, null);\n+        // containedInPlace\n+        addReferences(placeObject, edmPlace.getIsPartOf(), SchemaOrgConstants.PROPERTY_CONTAINED_IN_PLACE, Place.class, null);\n \n-            // sameAs\n-            addTextProperties(placeObject, toList(edmPlace.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n+        // sameAs\n+        addTextProperties(placeObject, toList(edmPlace.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n \n-            // url\n-            //not available yet\n+        // url\n+        //not available yet\n //        addEntityPageUrl(edmPlace, placeObject, SchemaOrgConstants.ENTITY_PAGE_URL_PLACE_TYPE);\n \n-            // image\n-            placeObject.setImage(edmPlace.getFoafDepiction());\n-        }\n+        // image\n+        placeObject.setImage(edmPlace.getFoafDepiction());\n     }\n \n     /**\n@@ -284,24 +281,25 @@ private static void createGeoCoordinates(eu.europeana.corelib.definitions.edm.en\n     }\n \n     /**\n-     * Process agents from the given list and create a proper schema.org object for\n-     * each\n+     * Process agents from the given list and create a proper schema.org object for each\n+     * To limit the size of schema.org responses only entity-ids are listed for\n+     * contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n      *\n-     * @param agents agents to process\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param agents                   agents to process\n+     * @param linkedContextualEntities list of all the references in the object\n      * @return list of Person and / or Organization objects created from given\n      * agents\n      */\n     private static List<Thing> processAgents(List<AgentImpl> agents, List<String> linkedContextualEntities) {\n         List<Thing> referencedObjects = new ArrayList<>();\n         for (Agent agent : agents) {\n-             if(linkedContextualEntities.contains(agent.getAbout())) {\n-                 eu.europeana.corelib.edm.model.schemaorg.ContextualEntity agentObject = SchemaOrgTypeFactory\n-                         .createAgent(agent);\n-                 referencedObjects.add(agentObject);\n+            if (linkedContextualEntities.contains(agent.getAbout()) && !StringUtils.startsWith(agent.getAbout(), URL_PREFIX)) {\n+                eu.europeana.corelib.edm.model.schemaorg.ContextualEntity agentObject = SchemaOrgTypeFactory\n+                        .createAgent(agent);\n+                referencedObjects.add(agentObject);\n \n-                 processAgent(agent, agentObject);\n-             }\n+                processAgent(agent, agentObject);\n+            }\n         }\n         return referencedObjects;\n     }\n@@ -317,78 +315,75 @@ public static void processAgent(Agent agent,\n                                     eu.europeana.corelib.edm.model.schemaorg.ContextualEntity agentObject) {\n         // @id\n         agentObject.setId(agent.getAbout());\n-        //To limit the size of schema.org responses only entity-ids are listed for\n-        // contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n-        if (!agent.getAbout().startsWith(URL_PREFIX)) {\n-            // name\n-            addMultilingualProperties(agentObject, agent.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n-            addMultilingualProperties(agentObject, agent.getFoafName(), SchemaOrgConstants.PROPERTY_NAME);\n-\n-            // alternateName\n-            addMultilingualProperties(agentObject, agent.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n \n-            // description\n-            addMultilingualProperties(agentObject, agent.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n-            addMultilingualProperties(agentObject, agent.getRdaGr2BiographicalInformation(),\n-                    SchemaOrgConstants.PROPERTY_DESCRIPTION);\n-\n-            if (agentObject instanceof Person) {\n-\n-                // birthDate\n-                if (agent.getRdaGr2DateOfBirth() != null) {\n-                    addStringProperties(agentObject, agent.getRdaGr2DateOfBirth(),\n-                            SchemaOrgConstants.PROPERTY_BIRTH_DATE);\n-                } else if (agent.getBegin() != null) {\n-                    addStringProperties(agentObject, agent.getBegin(), SchemaOrgConstants.PROPERTY_BIRTH_DATE);\n-                }\n+        // name\n+        addMultilingualProperties(agentObject, agent.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n+        addMultilingualProperties(agentObject, agent.getFoafName(), SchemaOrgConstants.PROPERTY_NAME);\n \n-                // deathDate\n-                if (agent.getRdaGr2DateOfDeath() != null) {\n-                    addStringProperties(agentObject, agent.getRdaGr2DateOfDeath(),\n-                            SchemaOrgConstants.PROPERTY_DEATH_DATE);\n-                } else if (agent.getEnd() != null) {\n-                    addStringProperties(agentObject, agent.getEnd(), SchemaOrgConstants.PROPERTY_DEATH_DATE);\n-                }\n+        // alternateName\n+        addMultilingualProperties(agentObject, agent.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n \n-                // gender\n-                addStringProperties(agentObject, agent.getRdaGr2Gender(), SchemaOrgConstants.PROPERTY_GENDER);\n+        // description\n+        addMultilingualProperties(agentObject, agent.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n+        addMultilingualProperties(agentObject, agent.getRdaGr2BiographicalInformation(),\n+                SchemaOrgConstants.PROPERTY_DESCRIPTION);\n \n-                // jobTitle\n-                addMultilingualProperties(agentObject, agent.getRdaGr2ProfessionOrOccupation(),\n-                        SchemaOrgConstants.PROPERTY_JOB_TITLE);\n+        if (agentObject instanceof Person) {\n \n-                // birthPlace\n-                addResourceOrReferenceProperties(agentObject, agent.getRdaGr2PlaceOfBirth(),\n-                        SchemaOrgConstants.PROPERTY_BIRTH_PLACE, Place.class, null);\n+            // birthDate\n+            if (agent.getRdaGr2DateOfBirth() != null) {\n+                addStringProperties(agentObject, agent.getRdaGr2DateOfBirth(),\n+                        SchemaOrgConstants.PROPERTY_BIRTH_DATE);\n+            } else if (agent.getBegin() != null) {\n+                addStringProperties(agentObject, agent.getBegin(), SchemaOrgConstants.PROPERTY_BIRTH_DATE);\n+            }\n \n-                // deathPlace\n-                addResourceOrReferenceProperties(agentObject, agent.getRdaGr2PlaceOfDeath(),\n-                        SchemaOrgConstants.PROPERTY_DEATH_PLACE, Place.class, null);\n+            // deathDate\n+            if (agent.getRdaGr2DateOfDeath() != null) {\n+                addStringProperties(agentObject, agent.getRdaGr2DateOfDeath(),\n+                        SchemaOrgConstants.PROPERTY_DEATH_DATE);\n+            } else if (agent.getEnd() != null) {\n+                addStringProperties(agentObject, agent.getEnd(), SchemaOrgConstants.PROPERTY_DEATH_DATE);\n             }\n \n-            if (agentObject instanceof Organization) {\n-                // foundingDate\n-                if (agent.getRdaGr2DateOfEstablishment() != null) {\n-                    addStringProperties(agentObject, agent.getRdaGr2DateOfEstablishment(),\n-                            SchemaOrgConstants.PROPERTY_FOUNDING_DATE);\n-                }\n+            // gender\n+            addStringProperties(agentObject, agent.getRdaGr2Gender(), SchemaOrgConstants.PROPERTY_GENDER);\n \n-                // dissolutionDate\n-                if (agent.getRdaGr2DateOfTermination() != null) {\n-                    addStringProperties(agentObject, agent.getRdaGr2DateOfTermination(),\n-                            SchemaOrgConstants.PROPERTY_DISSOLUTION_DATE);\n-                }\n-            }\n+            // jobTitle\n+            addMultilingualProperties(agentObject, agent.getRdaGr2ProfessionOrOccupation(),\n+                    SchemaOrgConstants.PROPERTY_JOB_TITLE);\n \n-            // sameAs\n-            addTextProperties(agentObject, toList(agent.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n+            // birthPlace\n+            addResourceOrReferenceProperties(agentObject, agent.getRdaGr2PlaceOfBirth(),\n+                    SchemaOrgConstants.PROPERTY_BIRTH_PLACE, Place.class, null);\n+\n+            // deathPlace\n+            addResourceOrReferenceProperties(agentObject, agent.getRdaGr2PlaceOfDeath(),\n+                    SchemaOrgConstants.PROPERTY_DEATH_PLACE, Place.class, null);\n+        }\n \n-            // url\n-            addEntityPageUrl(agent, agentObject, SchemaOrgConstants.ENTITY_PAGE_URL_AGENT_TYPE);\n+        if (agentObject instanceof Organization) {\n+            // foundingDate\n+            if (agent.getRdaGr2DateOfEstablishment() != null) {\n+                addStringProperties(agentObject, agent.getRdaGr2DateOfEstablishment(),\n+                        SchemaOrgConstants.PROPERTY_FOUNDING_DATE);\n+            }\n \n-            // image\n-            agentObject.setImage(agent.getFoafDepiction());\n+            // dissolutionDate\n+            if (agent.getRdaGr2DateOfTermination() != null) {\n+                addStringProperties(agentObject, agent.getRdaGr2DateOfTermination(),\n+                        SchemaOrgConstants.PROPERTY_DISSOLUTION_DATE);\n+            }\n         }\n+\n+        // sameAs\n+        addTextProperties(agentObject, toList(agent.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n+\n+        // url\n+        addEntityPageUrl(agent, agentObject, SchemaOrgConstants.ENTITY_PAGE_URL_AGENT_TYPE);\n+\n+        // image\n+        agentObject.setImage(agent.getFoafDepiction());\n     }\n \n     /**\n@@ -402,79 +397,74 @@ public static void processOrganization(eu.europeana.corelib.definitions.edm.enti\n                                            eu.europeana.corelib.edm.model.schemaorg.ContextualEntity entityObject) {\n         // @id\n         entityObject.setId(organization.getAbout());\n-        //To limit the size of schema.org responses only entity-ids are listed for\n-        // contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n-        if (!organization.getAbout().startsWith(URL_PREFIX)) {\n-            // name\n-            addMultilingualProperties(entityObject, organization.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n \n-            // alternateName\n-            addMultilingualProperties(entityObject, organization.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n-            addMultilingualProperties(entityObject, organization.getEdmAcronym(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n+        // name\n+        addMultilingualProperties(entityObject, organization.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n \n-            // description\n-            addMultilingualProperties(entityObject, SchemaOrgConstants.PROPERTY_DESCRIPTION, organization.getDcDescription());\n+        // alternateName\n+        addMultilingualProperties(entityObject, organization.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n+        addMultilingualProperties(entityObject, organization.getEdmAcronym(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n \n-            // mainEntityOfPage\n-            addTextProperties(entityObject, Arrays.asList(organization.getFoafHomepage()), SchemaOrgConstants.PROPERTY_MAIN_ENTITY_OF_PAGE);\n+        // description\n+        addMultilingualProperties(entityObject, SchemaOrgConstants.PROPERTY_DESCRIPTION, organization.getDcDescription());\n \n-            // logo\n-            addTextProperties(entityObject, Arrays.asList(organization.getFoafLogo()), SchemaOrgConstants.PROPERTY_LOGO);\n+        // mainEntityOfPage\n+        addTextProperties(entityObject, Arrays.asList(organization.getFoafHomepage()), SchemaOrgConstants.PROPERTY_MAIN_ENTITY_OF_PAGE);\n \n-            // telephone\n-            addTextProperties(entityObject, organization.getFoafPhone(), SchemaOrgConstants.PROPERTY_TELEPHONE);\n+        // logo\n+        addTextProperties(entityObject, Arrays.asList(organization.getFoafLogo()), SchemaOrgConstants.PROPERTY_LOGO);\n \n-            // address\n-            createPostalAddress(organization, (EdmOrganization) entityObject);\n+        // telephone\n+        addTextProperties(entityObject, organization.getFoafPhone(), SchemaOrgConstants.PROPERTY_TELEPHONE);\n \n-            // identifier\n-            List<String> dcIdentifier = null;\n-            if (organization.getDcIdentifier() != null && organization.getDcIdentifier().containsKey(SchemaOrgConstants.DEFAULT_LANGUAGE)) {\n-                dcIdentifier = organization.getDcIdentifier().get(SchemaOrgConstants.DEFAULT_LANGUAGE);\n-                addTextProperties(entityObject, dcIdentifier, SchemaOrgConstants.PROPERTY_IDENTIFIER);\n-            }\n+        // address\n+        createPostalAddress(organization, (EdmOrganization) entityObject);\n \n-            // sameAs\n-            addTextProperties(entityObject, toList(organization.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n+        // identifier\n+        List<String> dcIdentifier = null;\n+        if (organization.getDcIdentifier() != null && organization.getDcIdentifier().containsKey(SchemaOrgConstants.DEFAULT_LANGUAGE)) {\n+            dcIdentifier = organization.getDcIdentifier().get(SchemaOrgConstants.DEFAULT_LANGUAGE);\n+            addTextProperties(entityObject, dcIdentifier, SchemaOrgConstants.PROPERTY_IDENTIFIER);\n+        }\n \n-            // url\n-            addEntityPageUrl(organization, entityObject, SchemaOrgConstants.ENTITY_PAGE_URL_ORGANIZATION_TYPE);\n+        // sameAs\n+        addTextProperties(entityObject, toList(organization.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n+\n+        // url\n+        addEntityPageUrl(organization, entityObject, SchemaOrgConstants.ENTITY_PAGE_URL_ORGANIZATION_TYPE);\n+\n+        // image\n+        entityObject.setImage(organization.getFoafDepiction());\n \n-            // image\n-            entityObject.setImage(organization.getFoafDepiction());\n-        }\n     }\n \n     /**\n      * Update properties of the given Schema.Org entity\n      * using data from the given EDM Timespan\n      *\n      * @param timespanObject Schema.Org Contextual Entity object to update\n-     * @param time source EDM timespan\n+     * @param time           source EDM timespan\n      */\n     public static void processTimespan(Timespan time,\n-                                    eu.europeana.corelib.edm.model.schemaorg.ContextualEntity timespanObject) {\n+                                       eu.europeana.corelib.edm.model.schemaorg.ContextualEntity timespanObject) {\n         // @id\n-    \ttimespanObject.setId(time.getAbout());\n-        //To limit the size of schema.org responses only entity-ids are listed for\n-        // contextual entities (places, agents, concepts, time spans) that start with http://data.europeana.eu/\n-    \tif (!time.getAbout().startsWith(URL_PREFIX)) {\n+        timespanObject.setId(time.getAbout());\n \n-            // name\n-            addMultilingualProperties(timespanObject, time.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n+        // name\n+        addMultilingualProperties(timespanObject, time.getPrefLabel(), SchemaOrgConstants.PROPERTY_NAME);\n \n-            // alternateName\n-            addMultilingualProperties(timespanObject, time.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n+        // alternateName\n+        addMultilingualProperties(timespanObject, time.getAltLabel(), SchemaOrgConstants.PROPERTY_ALTERNATE_NAME);\n \n-            // description\n-            addMultilingualProperties(timespanObject, time.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n+        // description\n+        addMultilingualProperties(timespanObject, time.getNote(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n \n-            //url\n-            addEntityPageUrl(time, timespanObject, SchemaOrgConstants.ENTITY_PAGE_URL_TIMESPAN_TYPE);\n+        //url\n+        addEntityPageUrl(time, timespanObject, SchemaOrgConstants.ENTITY_PAGE_URL_TIMESPAN_TYPE);\n+\n+        // sameAs\n+        addTextProperties(timespanObject, toList(time.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n \n-            // sameAs\n-            addTextProperties(timespanObject, toList(time.getOwlSameAs()), SchemaOrgConstants.PROPERTY_SAME_AS);\n-        }\n \n     }\n \n@@ -548,9 +538,9 @@ private static void processProvidedCHO(CreativeWork object, FullBeanImpl bean) {\n     /**\n      * Process necessary properties from Aggregations\n      *\n-     * @param object object for which the properties will be added\n-     * @param bean   bean with all properties\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param object                   object for which the properties will be added\n+     * @param bean                     bean with all properties\n+     * @param linkedContextualEntities list of all the references in the object\n      * @return list of referenced objects created while processing aggregations\n      */\n     private static List<Thing> processAggregations(CreativeWork object, FullBeanImpl bean, List<String> linkedContextualEntities) {\n@@ -584,12 +574,12 @@ private static void processProvidedCHO(CreativeWork object, FullBeanImpl bean) {\n      * corresponding MediaObject with additional information. Each MediaObject is of\n      * the specific subclass based on the mime type.\n      *\n-     * @param object      object to add references\n-     * @param mediaUrls   urls of web resources retrieved from hasView and\n-     *                    edm:isShownBy\n-     * @param aggregation current aggregation\n+     * @param object                   object to add references\n+     * @param mediaUrls                urls of web resources retrieved from hasView and\n+     *                                 edm:isShownBy\n+     * @param aggregation              current aggregation\n      * @param bean\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param linkedContextualEntities list of all the references in the object\n      * @return a list of created referenced media objects\n      */\n     private static List<Thing> processWebResources(CreativeWork object, Set<String> mediaUrls, Aggregation aggregation,\n@@ -612,11 +602,11 @@ private static void processProvidedCHO(CreativeWork object, FullBeanImpl bean) {\n     /**\n      * Adds specific properties to the media object based on the web resource\n      *\n-     * @param mediaObject media object to which the properties will be added\n-     * @param resource    web resource to retrieve property values\n-     * @param bean        bean with all the data needed to generate some mappings\n-     * @param aggregation aggregation object needed to generate some mappings\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param mediaObject              media object to which the properties will be added\n+     * @param resource                 web resource to retrieve property values\n+     * @param bean                     bean with all the data needed to generate some mappings\n+     * @param aggregation              aggregation object needed to generate some mappings\n+     * @param linkedContextualEntities list of all the references in the object\n      */\n     private static void processWebResource(MediaObject mediaObject, WebResource resource, FullBeanImpl bean,\n                                            Aggregation aggregation, List<String> linkedContextualEntities) {\n@@ -631,7 +621,7 @@ private static void processWebResource(MediaObject mediaObject, WebResource reso\n         }\n \n         // contentUrl\n-        mediaObject.addContentUrl( new Text(resource.getAbout()));\n+        mediaObject.addContentUrl(new Text(resource.getAbout()));\n \n         // creator\n         addResourceOrReferenceProperties(mediaObject, resource.getDcCreator(),\n@@ -710,7 +700,7 @@ private static void processWebResource(MediaObject mediaObject, WebResource reso\n     private static void getNameAndDescription(MediaObject mediaObject, WebResource resource, FullBeanImpl bean) {\n         boolean proxyDescReq = true;\n         // description : if missing take ore:Proxy/dc:description or ore:Proxy.dc:title\n-        if(resource.getDcDescription() != null && !resource.getDcDescription().isEmpty()) {\n+        if (resource.getDcDescription() != null && !resource.getDcDescription().isEmpty()) {\n             proxyDescReq = false;\n             addMultilingualProperties(mediaObject, resource.getDcDescription(), SchemaOrgConstants.PROPERTY_DESCRIPTION);\n         }\n@@ -749,9 +739,9 @@ private static void addVideoObjectProperties(MediaObject mediaObject, FullBeanIm\n      * Process all proxies from the bean and add specific properties to the given\n      * object.\n      *\n-     * @param object object for which the properties will be added\n-     * @param bean   bean from database to get values for properties\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param object                   object for which the properties will be added\n+     * @param bean                     bean from database to get values for properties\n+     * @param linkedContextualEntities list of all the references in the object\n      */\n     private static void processProxies(CreativeWork object, FullBeanImpl bean, List<String> linkedContextualEntities) {\n         for (ProxyImpl proxy : bean.getProxies()) {\n@@ -932,7 +922,7 @@ private static void addStringProperties(Thing object, Map<String, List<String>>\n      * @param values       values to be added\n      * @param propertyName name of property\n      */\n-    private static  void addStringProperties(Thing object, List<String> values, String propertyName) {\n+    private static void addStringProperties(Thing object, List<String> values, String propertyName) {\n         if (values == null) {\n             return;\n         }\n@@ -974,12 +964,12 @@ private static void addDateProperty(Thing object, Map<String, List<String>> map,\n      * Adds typed references. When a reference is detected its type will be set to\n      * <code>referenceClass</code>\n      *\n-     * @param object         object for which the properties will be added\n-     * @param map            map of values where key is the language and value is a\n-     *                       values list\n+     * @param object                   object for which the properties will be added\n+     * @param map                      map of values where key is the language and value is a\n+     *                                 values list\n      * @param linkedContextualEntities list of all the references in the object\n-     * @param propertyName   name of property\n-     * @param referenceClass class of reference\n+     * @param propertyName             name of property\n+     * @param referenceClass           class of reference\n      */\n     private static void addResourceOrReferenceProperties(Thing object, Map<String, List<String>> map,\n                                                          String propertyName, Class<? extends Thing> referenceClass, List<String> linkedContextualEntities) {\n@@ -989,9 +979,13 @@ private static void addResourceOrReferenceProperties(Thing object, Map<String, L\n         for (Map.Entry<String, List<String>> entry : map.entrySet()) {\n             for (String value : entry.getValue()) {\n                 if (EuropeanaUriUtils.isUri(value)) {\n-                    //while creating reference for about, contibutor, creator reference class should be null.\n-                    if(referenceNull(propertyName)) {\n+                    //while creating reference for about, contributor, creator, publisher reference class should be null.\n+                    // Only for values NOT starting with http://data.europeana.eu\n+                    if (referenceNull(propertyName, value)) {\n                         referenceClass = null;\n+                    } else {\n+                        // for value starting with http://data.europeana.eu, assign correct reference class\n+                        referenceClass = getReferenceClass(value);\n                     }\n                     addProperty(object, value, entry.getKey(), propertyName, referenceClass, linkedContextualEntities);\n                 } else {\n@@ -1000,6 +994,7 @@ private static void addResourceOrReferenceProperties(Thing object, Map<String, L\n             }\n         }\n     }\n+\n     /**\n      * Adds language property for typed reference.\n      *\n@@ -1021,7 +1016,8 @@ private static void addLanguageProperty(Thing object, Map<String, List<String>>\n             }\n         }\n     }\n-    private static void processLanguageValue(Thing object, String propertyName, String value,  Class<? extends Thing> referenceClass) {\n+\n+    private static void processLanguageValue(Thing object, String propertyName, String value, Class<? extends Thing> referenceClass) {\n         if (notNullNorEmpty(value)) {\n             Thing resource = instantiateResourceObject(referenceClass);\n             resource.addProperty(SchemaOrgConstants.PROPERTY_NAME, new Text(value));\n@@ -1033,14 +1029,14 @@ private static void processLanguageValue(Thing object, String propertyName, Stri\n      * Adds references for all values in the array. References may have a specific\n      * type if <code>referenceClass</code> is specified.\n      *\n-     * @param object         object for which the properties will be added\n-     * @param values         values to be added as references\n-     * @param propertyName   name of property\n-     * @param referenceClass class of reference\n+     * @param object                   object for which the properties will be added\n+     * @param values                   values to be added as references\n+     * @param propertyName             name of property\n+     * @param referenceClass           class of reference\n      * @param linkedContextualEntities list of all the references in the object\n      */\n     private static void addReferences(Thing object, List<String> values, String propertyName,\n-                                      Class<? extends Thing> referenceClass, List<String> linkedContextualEntities ) {\n+                                      Class<? extends Thing> referenceClass, List<String> linkedContextualEntities) {\n         if (values == null) {\n             return;\n         }\n@@ -1062,20 +1058,20 @@ private static void addReferences(Thing object, List<String> values, String prop\n      * @param value        value to process\n      */\n     public static void processDateValue(Thing object, String propertyName, List<TimespanImpl> timespans,\n-                                         boolean allowInvalid, String language, String value) {\n+                                        boolean allowInvalid, String language, String value) {\n         if (notNullNorEmpty(value)) {\n             String valueToAdd = value;\n             if (EuropeanaUriUtils.isUri(value) && timespans != null) {\n                 // value might be timespan\n                 valueToAdd = createDateRange(value, language, timespans);\n                 //if the valuetoAdd is still URI and property is temporalCoverage. Create a reference\n-                if(EuropeanaUriUtils.isUri(valueToAdd) && StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_TEMPORAL_COVERAGE)) {\n-                    addReference(object,valueToAdd,propertyName, null );\n+                if (EuropeanaUriUtils.isUri(valueToAdd) && StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_TEMPORAL_COVERAGE)) {\n+                    addReference(object, valueToAdd, propertyName, null);\n                 } else {\n                     object.addProperty(propertyName, new Text(valueToAdd));\n                 }\n             } else if (allowInvalid || DateUtils.isYear(value) || DateUtils.isIsoDate(value) || DateUtils.isIsoDateTime(value)) {\n-                   object.addProperty(propertyName, new Text(valueToAdd));\n+                object.addProperty(propertyName, new Text(valueToAdd));\n             }\n         }\n     }\n@@ -1208,14 +1204,14 @@ private static boolean isPlace(String value) {\n      * Checks whether value is Uri adding a reference in this case or adding the\n      * multilingual string otherwise.\n      *\n-     * @param object       object for which the property will be added\n-     * @param propertyName name of property\n-     * @param language     language string, may be empty\n-     * @param value        value to add\n-     * @param linkedContextualEntities  list of all the references in the object\n+     * @param object                   object for which the property will be added\n+     * @param propertyName             name of property\n+     * @param language                 language string, may be empty\n+     * @param value                    value to add\n+     * @param linkedContextualEntities list of all the references in the object\n      */\n     private static void addProperty(Thing object, String value, String language, String propertyName,\n-                                    Class<? extends Thing> referenceClass ,  List<String> linkedContextualEntities) {\n+                                    Class<? extends Thing> referenceClass, List<String> linkedContextualEntities) {\n         if (notNullNorEmpty(value)) {\n             if (EuropeanaUriUtils.isUri(value)) {\n                 addLinkedContextualEntities(value, linkedContextualEntities);\n@@ -1259,11 +1255,11 @@ private static void addResourceProperty(Thing object, String value, String langu\n                                             Class<? extends Thing> referenceClass) {\n         if (notNullNorEmpty(value)) {\n             Thing resource = instantiateResourceObject(referenceClass);\n-            if(StringUtils.equals(language, SchemaOrgConstants.DEFAULT_LANGUAGE)) {\n+            if (StringUtils.equals(language, SchemaOrgConstants.DEFAULT_LANGUAGE)) {\n                 resource.addProperty(SchemaOrgConstants.PROPERTY_NAME, new Text(value));\n             } else {\n                 addMultilingualProperty(resource, value,\n-                           language, SchemaOrgConstants.PROPERTY_NAME);\n+                        language, SchemaOrgConstants.PROPERTY_NAME);\n             }\n             object.addProperty(propertyName, resource);\n         }\n@@ -1275,10 +1271,10 @@ private static void addResourceProperty(Thing object, String value, String langu\n      * <code>referenced</code> list and an additional object of type\n      * <code>referenceClass</code> is created with properties.\n      *\n-     * @param object         object for which the properties will be added\n-     * @param values         array of values\n-     * @param propertyName   name of property\n-     * @param referenceClass class of reference\n+     * @param object                   object for which the properties will be added\n+     * @param values                   array of values\n+     * @param propertyName             name of property\n+     * @param referenceClass           class of reference\n      * @param linkedContextualEntities list of all the references in the object\n      */\n     private static void addMultilingualPropertiesWithReferences(Thing object, List<String> values, String language,\n@@ -1287,19 +1283,19 @@ private static void addMultilingualPropertiesWithReferences(Thing object, List<S\n             return;\n         }\n         for (String value : values) {\n-            addProperty(object, value, language, propertyName, referenceClass,linkedContextualEntities);\n+            addProperty(object, value, language, propertyName, referenceClass, linkedContextualEntities);\n         }\n     }\n \n     /**\n      * Adds multilingual properties or typed references. When a reference is\n      * detected its type will be set to <code>referenceClass</code>\n      *\n-     * @param object         object for which the properties will be added\n-     * @param map            map of values where key is the language and value is a\n-     *                       values list\n-     * @param propertyName   name of property\n-     * @param referenceClass class of reference\n+     * @param object                   object for which the properties will be added\n+     * @param map                      map of values where key is the language and value is a\n+     *                                 values list\n+     * @param propertyName             name of property\n+     * @param referenceClass           class of reference\n      * @param linkedContextualEntities list of all the references in the object\n      */\n     private static void addReferences(Thing object, Map<String, List<String>> map, String propertyName,\n@@ -1438,23 +1434,52 @@ private static void addDistinctValues(Set<String> set, String... toAdd) {\n \n     /**\n      * To check if reference class will be null for the property\n+     * Only for propertyValue NOT starting with http://data.europeana.eu\n+     *\n+     * @param propertyName  property to be checked\n+     * @param propertyValue property value to be checked\n+     */\n+    private static boolean referenceNull(String propertyName, String propertyValue) {\n+        if (!StringUtils.startsWith(propertyValue, URL_PREFIX)) {\n+            return (StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_ABOUT)\n+                    || StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_CONTRIBUTOR)\n+                    || StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_CREATOR)\n+                    || StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_PUBLISHER));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * get the reference class for the property value\n+     * starting with http://data.europeana.eu\n      *\n-     * @param propertyName property to be checked\n+     * @param propertyValue property value to be checked\n      */\n-    private static boolean referenceNull(String propertyName) {\n-        return (StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_ABOUT)\n-                || StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_CONTRIBUTOR)\n-                || StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_CREATOR)\n-                || StringUtils.equals(propertyName, SchemaOrgConstants.PROPERTY_PUBLISHER));\n+    private static Class<? extends Thing> getReferenceClass(String propertyValue) {\n+        if (StringUtils.startsWith(propertyValue, URL_PREFIX)) {\n+            if (propertyValue.startsWith(URL_PREFIX + \"/agent\")) {\n+                return Person.class;\n+            }\n+            if (propertyValue.startsWith(URL_PREFIX + \"/place\")) {\n+                return Place.class;\n+            }\n+            if (propertyValue.contains(URL_PREFIX + \"/concept\")) {\n+                return Thing.class;\n+            }\n+            // any other unrecognised entity, consider it as a Thing\n+            return Thing.class;\n+        }\n+        // return null for every other case\n+        return null;\n     }\n \n     /**\n      * Add values to the linkedContextualEntities list\n      *\n      * @param value value to be added\n      */\n-    private static void addLinkedContextualEntities(String value,  List<String> linkedContextualEntities) {\n-        if(linkedContextualEntities != null) {\n+    private static void addLinkedContextualEntities(String value, List<String> linkedContextualEntities) {\n+        if (linkedContextualEntities != null) {\n             linkedContextualEntities.add(value);\n         }\n     }"
  },
  {
    "sha": "d6c5546ec215bc293a614f06da06d0f9dea73a70",
    "filename": "corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgTestUtils.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/europeana/corelib/blob/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgTestUtils.java",
    "raw_url": "https://github.com/europeana/corelib/raw/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgTestUtils.java",
    "contents_url": "https://api.github.com/repos/europeana/corelib/contents/corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgTestUtils.java?ref=1d6a266bdae65d95184b5908b1dcf546f835d148",
    "patch": "@@ -33,6 +33,9 @@\n         List<Reference> referenceList = new ArrayList<>();\n         List<BaseType> propertiesList = object.getProperty(propertyName);\n         for (BaseType property : propertiesList) {\n+            if(StringUtils.equalsIgnoreCase(property.getTypeName(), MockBeanConstants.THING) && property.toString().contains(MockBeanConstants.URL_PREFIX)) {\n+                referenceList.add((Reference) property);\n+            }\n             if (! StringUtils.equalsIgnoreCase(property.getTypeName(), MockBeanConstants.THING) && ! StringUtils.equalsIgnoreCase(property.getTypeName(), MockBeanConstants.TEXT)\n                     && ! StringUtils.equalsIgnoreCase(property.getTypeName(), MockBeanConstants.ORANGANIZATION)) {\n                 referenceList.add((Reference) property);\n@@ -50,8 +53,10 @@\n         List<Thing> resourceList = new ArrayList<>();\n         List<BaseType> propertiesList = object.getProperty(propertyName);\n         for (BaseType resource : propertiesList) {\n-            if (StringUtils.equalsIgnoreCase(resource.getTypeName(), MockBeanConstants.THING) || StringUtils.equalsIgnoreCase(resource.getTypeName(), MockBeanConstants.ORANGANIZATION)) {\n-                resourceList.add((Thing) resource);\n+            if (!resource.toString().contains(MockBeanConstants.URL_PREFIX)) {\n+                if (StringUtils.equalsIgnoreCase(resource.getTypeName(), MockBeanConstants.THING) || StringUtils.equalsIgnoreCase(resource.getTypeName(), MockBeanConstants.ORANGANIZATION)) {\n+                    resourceList.add((Thing) resource);\n+                }\n             }\n         }\n         for (Thing resource : resourceList) {"
  },
  {
    "sha": "4cfb0f9d97db0b0f24b53489e915e9495418f601",
    "filename": "corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgUtilsTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/europeana/corelib/blob/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgUtilsTest.java",
    "raw_url": "https://github.com/europeana/corelib/raw/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgUtilsTest.java",
    "contents_url": "https://api.github.com/repos/europeana/corelib/contents/corelib-schemaorg/src/test/java/eu/europeana/corelib/edm/utils/SchemaOrgUtilsTest.java?ref=1d6a266bdae65d95184b5908b1dcf546f835d148",
    "patch": "@@ -17,6 +17,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.test.context.ContextConfiguration;\n@@ -81,7 +82,6 @@ public void toSchemaOrgEdmOrganizationTest() throws IOException {\n         JsonLdSerializer serializer = new JsonLdSerializer();\n         output = serializer.serialize(thingObject);\n         Assert.assertNotNull(output);\n-\n         try (InputStream stream = getClass().getResourceAsStream(MockBeanConstants.EDMORGANIZATION_FILE)) {\n             String expectedOutput = IOUtils.toString(stream, StandardCharsets.UTF_8);\n             assertEquals(expectedOutput.length(), output.length());"
  },
  {
    "sha": "af746eb17af9c581a6a9d8055bdfdd8a6163b2aa",
    "filename": "corelib-schemaorg/src/test/resources/schemaorg/fullbean.json",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/europeana/corelib/blob/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/test/resources/schemaorg/fullbean.json",
    "raw_url": "https://github.com/europeana/corelib/raw/1d6a266bdae65d95184b5908b1dcf546f835d148/corelib-schemaorg/src/test/resources/schemaorg/fullbean.json",
    "contents_url": "https://api.github.com/repos/europeana/corelib/contents/corelib-schemaorg/src/test/resources/schemaorg/fullbean.json?ref=1d6a266bdae65d95184b5908b1dcf546f835d148",
    "patch": "@@ -1 +1 @@\n-{\"@context\":\"http://schema.org\",\"@graph\":[{\"@type\":\"Photograph\",\"@id\":\"http://data.europeana.eu/item/2021618/internetserver_Details_kunst_25027\",\"url\":[\"https://www.europeana.eu/item/2021618/internetserver_Details_kunst_25027\"],\"name\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"}],\"alternateName\":[{\"@value\":\"MonaLisa Painting\",\"@language\":\"\"}],\"description\":[{\"@value\":\"https://data.europeana.eu/test\",\"@language\":\"\"}],\"sameAs\":[\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\"],\"provider\":[{\"@type\":\"Organization\",\"name\":[\"Teylers Museum\"]},{\"@type\":\"Organization\",\"name\":[\"Digitale Collectie\"]}],\"about\":[{\"@type\":\"Thing\",\"name\":[\"grafiek\"]},{\"@id\":\"http://data.europeana.eu/concept/base/48\"},{\"@type\":\"Thing\",\"name\":[\"01 December 1950\"]}],\"creator\":[{\"@type\":\"Thing\",\"name\":[\"Calamatta, Luigi (1801-1869)\"]},{\"@type\":\"Thing\",\"name\":[\"Leonardo da Vinci (1452 - 1519)\"]},{\"@type\":\"Thing\",\"name\":[\"graveur\"]},{\"@id\":\"http://data.europeana.eu/concept/base/190\"},{\"@id\":\"http://data.europeana.eu/agent/base/103195\"},{\"@id\":\"http://data.europeana.eu/agent/base/6\"},{\"@id\":\"#place_Paris\"},{\"@id\":\"http://data.europeana.eu/agent/base/146741\"}],\"dateCreated\":[\"01 November 1928\"],\"temporalCoverage\":[{\"@id\":\"http://semium.org/time/1977\"},\"1901-01-01T00:19:32/2000-12-31T01:00:00\",\"1901-01-01/1902-01-01\",\"1981-1990\",\"1930\"],\"associatedMedia\":[{\"@type\":\"VideoObject\",\"@id\":\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\"},{\"@type\":\"ImageObject\",\"@id\":\"http://teylers.adlibhosting.com/wwwopacx/wwwopac.ashx?command=getcontent&server=images&value=TvB%20G%203674.jpg\"}],\"thumbnailUrl\":[\"http://edmPreview.jpg\"]},{\"@type\":\"VideoObject\",\"@id\":\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\",\"name\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"}],\"description\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"},{\"@value\":\"https://data.europeana.eu/test\",\"@language\":\"\"}],\"duration\":[\"PT2S\"],\"width\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"650\"}],\"height\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"500\"}],\"uploadDate\":[\"2014-03-25T14:50:54.479Z\"],\"contentUrl\":[\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\"],\"encodesCreativeWork\":[{\"@id\":\"http://data.europeana.eu/item/2021618/internetserver_Details_kunst_25027\"}],\"encodingFormat\":[\"video/mp4\"],\"bitrate\":[\"400\"],\"dateCreated\":[\"1936-05-11\"],\"thumbnailUrl\":[\"http://edmPreview.jpg\"],\"license\":[\"http://creativecommons.org/licenses/by-nc/3.0/nl/\"]},{\"@type\":\"ImageObject\",\"@id\":\"http://teylers.adlibhosting.com/wwwopacx/wwwopac.ashx?command=getcontent&server=images&value=TvB%20G%203674.jpg\",\"name\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"}],\"description\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"},{\"@value\":\"https://data.europeana.eu/test\",\"@language\":\"\"}],\"width\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"598\"}],\"height\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"768\"}],\"contentUrl\":[\"http://teylers.adlibhosting.com/wwwopacx/wwwopac.ashx?command=getcontent&server=images&value=TvB%20G%203674.jpg\"],\"encodesCreativeWork\":[{\"@id\":\"http://data.europeana.eu/item/2021618/internetserver_Details_kunst_25027\"}],\"encodingFormat\":[\"image/jpeg\"],\"contentSize\":[\"61347\"],\"license\":[\"http://creativecommons.org/licenses/by-nc/3.0/nl/\"]},{\"@type\":\"Person\",\"@id\":\"http://data.europeana.eu/agent/base/6\"},{\"@type\":\"Organization\",\"@id\":\"http://data.europeana.eu/agent/base/146741\"},{\"@type\":\"Place\",\"@id\":\"#place_Paris\",\"name\":[{\"@value\":\"Paris\",\"@language\":\"en\"}],\"alternateName\":[{\"@value\":\"Paris\",\"@language\":\"it\"}],\"geo\":{\"@type\":\"GeoCoordinates\",\"latitude\":\"46.0\",\"longitude\":\"2.0\",\"elevation\":\"70.0\"},\"description\":[{\"@value\":\"Probably in Popicourt\",\"@language\":\"en\"}],\"containsPlace\":[{\"@type\":\"Place\",\"@id\":\"http://www.somewhere.eu/place/2\"}],\"containedInPlace\":[{\"@type\":\"Place\",\"@id\":\"http://www.somewhere.eu/place/3\"}],\"sameAs\":[\"http://www.somewhere.eu/place/5\"]},{\"@type\":\"Thing\",\"@id\":\"http://data.europeana.eu/concept/base/190\"}]}\n\\ No newline at end of file\n+{\"@context\":\"http://schema.org\",\"@graph\":[{\"@type\":\"Photograph\",\"@id\":\"http://data.europeana.eu/item/2021618/internetserver_Details_kunst_25027\",\"url\":[\"https://www.europeana.eu/item/2021618/internetserver_Details_kunst_25027\"],\"name\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"}],\"alternateName\":[{\"@value\":\"MonaLisa Painting\",\"@language\":\"\"}],\"description\":[{\"@value\":\"https://data.europeana.eu/test\",\"@language\":\"\"}],\"sameAs\":[\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\"],\"provider\":[{\"@type\":\"Organization\",\"name\":[\"Teylers Museum\"]},{\"@type\":\"Organization\",\"name\":[\"Digitale Collectie\"]}],\"about\":[{\"@type\":\"Thing\",\"name\":[\"grafiek\"]},{\"@type\":\"Thing\",\"@id\":\"http://data.europeana.eu/concept/base/48\"},{\"@type\":\"Thing\",\"name\":[\"01 December 1950\"]}],\"creator\":[{\"@type\":\"Thing\",\"name\":[\"Calamatta, Luigi (1801-1869)\"]},{\"@type\":\"Thing\",\"name\":[\"Leonardo da Vinci (1452 - 1519)\"]},{\"@type\":\"Thing\",\"name\":[\"graveur\"]},{\"@type\":\"Thing\",\"@id\":\"http://data.europeana.eu/concept/base/190\"},{\"@type\":\"Person\",\"@id\":\"http://data.europeana.eu/agent/base/103195\"},{\"@type\":\"Person\",\"@id\":\"http://data.europeana.eu/agent/base/6\"},{\"@id\":\"#place_Paris\"},{\"@type\":\"Person\",\"@id\":\"http://data.europeana.eu/agent/base/146741\"}],\"dateCreated\":[\"01 November 1928\"],\"temporalCoverage\":[{\"@id\":\"http://semium.org/time/1977\"},\"1901-01-01T00:19:32/2000-12-31T01:00:00\",\"1901-01-01/1902-01-01\",\"1981-1990\",\"1930\"],\"associatedMedia\":[{\"@type\":\"VideoObject\",\"@id\":\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\"},{\"@type\":\"ImageObject\",\"@id\":\"http://teylers.adlibhosting.com/wwwopacx/wwwopac.ashx?command=getcontent&server=images&value=TvB%20G%203674.jpg\"}],\"thumbnailUrl\":[\"http://edmPreview.jpg\"]},{\"@type\":\"VideoObject\",\"@id\":\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\",\"name\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"}],\"description\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"},{\"@value\":\"https://data.europeana.eu/test\",\"@language\":\"\"}],\"duration\":[\"PT2S\"],\"width\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"650\"}],\"height\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"500\"}],\"uploadDate\":[\"2014-03-25T14:50:54.479Z\"],\"contentUrl\":[\"http://teylers.adlibhosting.com/internetserver/Details/kunst/25027\"],\"encodesCreativeWork\":[{\"@id\":\"http://data.europeana.eu/item/2021618/internetserver_Details_kunst_25027\"}],\"encodingFormat\":[\"video/mp4\"],\"bitrate\":[\"400\"],\"dateCreated\":[\"1936-05-11\"],\"thumbnailUrl\":[\"http://edmPreview.jpg\"],\"license\":[\"http://creativecommons.org/licenses/by-nc/3.0/nl/\"]},{\"@type\":\"ImageObject\",\"@id\":\"http://teylers.adlibhosting.com/wwwopacx/wwwopac.ashx?command=getcontent&server=images&value=TvB%20G%203674.jpg\",\"name\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"}],\"description\":[{\"@value\":\"Mona Lisa\",\"@language\":\"\"},{\"@value\":\"https://data.europeana.eu/test\",\"@language\":\"\"}],\"width\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"598\"}],\"height\":[{\"@type\":\"QuantitativeValue\",\"unitCode\":\"E37\",\"value\":\"768\"}],\"contentUrl\":[\"http://teylers.adlibhosting.com/wwwopacx/wwwopac.ashx?command=getcontent&server=images&value=TvB%20G%203674.jpg\"],\"encodesCreativeWork\":[{\"@id\":\"http://data.europeana.eu/item/2021618/internetserver_Details_kunst_25027\"}],\"encodingFormat\":[\"image/jpeg\"],\"contentSize\":[\"61347\"],\"license\":[\"http://creativecommons.org/licenses/by-nc/3.0/nl/\"]},{\"@type\":\"Place\",\"@id\":\"#place_Paris\",\"name\":[{\"@value\":\"Paris\",\"@language\":\"en\"}],\"alternateName\":[{\"@value\":\"Paris\",\"@language\":\"it\"}],\"geo\":{\"@type\":\"GeoCoordinates\",\"latitude\":\"46.0\",\"longitude\":\"2.0\",\"elevation\":\"70.0\"},\"description\":[{\"@value\":\"Probably in Popicourt\",\"@language\":\"en\"}],\"containsPlace\":[{\"@type\":\"Place\",\"@id\":\"http://www.somewhere.eu/place/2\"}],\"containedInPlace\":[{\"@type\":\"Place\",\"@id\":\"http://www.somewhere.eu/place/3\"}],\"sameAs\":[\"http://www.somewhere.eu/place/5\"]}]}\n\\ No newline at end of file"
  }
]
