[
  {
    "sha": "6952d5251e41c4d65a9380750a43dc717cadf458",
    "filename": "server/src/main/java/server/ClientHandler.java",
    "status": "modified",
    "additions": 85,
    "deletions": 82,
    "changes": 167,
    "blob_url": "https://github.com/hpa777/java_chat_BCOW_16022021/blob/28072eea3a72b9d0be552989df210bc6722e0994/server/src/main/java/server/ClientHandler.java",
    "raw_url": "https://github.com/hpa777/java_chat_BCOW_16022021/raw/28072eea3a72b9d0be552989df210bc6722e0994/server/src/main/java/server/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/hpa777/java_chat_BCOW_16022021/contents/server/src/main/java/server/ClientHandler.java?ref=28072eea3a72b9d0be552989df210bc6722e0994",
    "patch": "@@ -9,7 +9,7 @@\n import java.net.Socket;\n import java.net.SocketTimeoutException;\n \n-public class ClientHandler {\n+public class ClientHandler implements Runnable {\n     private Server server;\n     private Socket socket;\n     private DataInputStream in;\n@@ -24,102 +24,104 @@ public ClientHandler(Server server, Socket socket) {\n             this.socket = socket;\n             in = new DataInputStream(socket.getInputStream());\n             out = new DataOutputStream(socket.getOutputStream());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n \n-            new Thread(() -> {\n-                try {\n-                    // цикл аутентификации\n-                    this.socket.setSoTimeout(SOCKET_TIMEOUT);\n-                    while (true) {\n-                        String str = in.readUTF();\n-\n-                        if (str.equals(Command.END)) {\n-                            out.writeUTF(Command.END);\n-                            throw new RuntimeException(\"Клиент захотел отключиться\");\n-                        }\n-                        if (str.startsWith(Command.AUTH)) {\n-                            String[] token = str.split(\"\\\\s\", 3);\n-                            if (token.length < 3) {\n-                                continue;\n-                            }\n-                            String newNick = server.getAuthService()\n-                                    .getNicknameByLoginAndPassword(token[1], token[2]);\n+    @Override\n+    public void run() {\n+        try {\n+            // цикл аутентификации\n+            this.socket.setSoTimeout(SOCKET_TIMEOUT);\n+            while (true) {\n+                String str = in.readUTF();\n \n-                            user = ((DbAuthService)server.getAuthService()).getUserByLoginAndPassword(token[1], token[2]);\n-                            if (user != null) {\n-                                if (!server.isLoginAuthenticated(user.getLogin())) {\n-                                    sendMsg(Command.AUTH_OK + \" \" + user.getNick());\n-                                    server.subscribe(this);\n-                                    System.out.println(\"client: \" + socket.getRemoteSocketAddress() +\n-                                            \" connected with nick: \" + user.getNick());\n-                                    break;\n-                                } else {\n-                                    sendMsg(\"Данная учетная запись уже используется\");\n-                                }\n-                            } else {\n-                                sendMsg(\"Неверный логин / пароль\");\n-                            }\n-                        }\n-                        if (str.startsWith(Command.REQUEST_TO_REG)) {\n-                            String[] token = str.split(\"\\\\s\", 4);\n-                            if (token.length < 4) {\n-                                continue;\n-                            }\n-                            boolean regSuccess = server.getAuthService().registration(token[1], token[2], token[3]);\n-                            sendMsg(regSuccess ? Command.REG_ACCEPT : Command.REG_REJECT);\n-                        }\n+                if (str.equals(Command.END)) {\n+                    out.writeUTF(Command.END);\n+                    throw new RuntimeException(\"Клиент захотел отключиться\");\n+                }\n+                if (str.startsWith(Command.AUTH)) {\n+                    String[] token = str.split(\"\\\\s\", 3);\n+                    if (token.length < 3) {\n+                        continue;\n                     }\n-                    //цикл работы\n-                    this.socket.setSoTimeout(0);\n-                    while (true) {\n-                        String str = in.readUTF();\n-                        str = str.trim();\n-                        if (str.isEmpty()) {\n-                            continue;\n-                        } else if (str.equals(Command.END)) {\n-                            out.writeUTF(Command.END);\n+                    String newNick = server.getAuthService()\n+                            .getNicknameByLoginAndPassword(token[1], token[2]);\n+\n+                    user = ((DbAuthService)server.getAuthService()).getUserByLoginAndPassword(token[1], token[2]);\n+                    if (user != null) {\n+                        if (!server.isLoginAuthenticated(user.getLogin())) {\n+                            sendMsg(Command.AUTH_OK + \" \" + user.getNick());\n+                            server.subscribe(this);\n+                            System.out.println(\"client: \" + socket.getRemoteSocketAddress() +\n+                                    \" connected with nick: \" + user.getNick());\n                             break;\n-                        } else if (str.startsWith(Command.CHANGE_NICK)) {\n-                            String[] parts = str.split(\"\\\\s\");\n-                            if (parts.length == 2 && this.user.changeNickName(parts[1])) {\n-                                this.sendMsg(String.format(\"%s %s\", Command.CHANGE_NICK_ACCEPT, parts[1]));\n-                                server.broadcastClientList();\n-                            } else {\n-                                this.sendMsg(\"Такой ник уже используется\");\n-                            }\n-                        } else if (str.startsWith(Command.PRIVATE_MESSAGE_HEAD)) {\n-                            String[] parts = str.split(\"\\\\s\", 3);\n-                            if (parts.length == 3) {\n-                                server.sendPrivateMessage(parts[1], parts[2], this);\n-                            }\n                         } else {\n-                            server.broadcastMsg(this, str);\n+                            sendMsg(\"Данная учетная запись уже используется\");\n                         }\n+                    } else {\n+                        sendMsg(\"Неверный логин / пароль\");\n+                    }\n+                }\n+                if (str.startsWith(Command.REQUEST_TO_REG)) {\n+                    String[] token = str.split(\"\\\\s\", 4);\n+                    if (token.length < 4) {\n+                        continue;\n                     }\n-                } catch (SocketTimeoutException e) {\n-                    try {\n-                        out.writeUTF(Command.END);\n-                    } catch (IOException ioException) {\n-                        ioException.printStackTrace();\n+                    boolean regSuccess = server.getAuthService().registration(token[1], token[2], token[3]);\n+                    sendMsg(regSuccess ? Command.REG_ACCEPT : Command.REG_REJECT);\n+                }\n+            }\n+            //цикл работы\n+            this.socket.setSoTimeout(0);\n+            while (true) {\n+                String str = in.readUTF();\n+                str = str.trim();\n+                if (str.isEmpty()) {\n+                    continue;\n+                } else if (str.equals(Command.END)) {\n+                    out.writeUTF(Command.END);\n+                    break;\n+                } else if (str.startsWith(Command.CHANGE_NICK)) {\n+                    String[] parts = str.split(\"\\\\s\");\n+                    if (parts.length == 2 && this.user.changeNickName(parts[1])) {\n+                        this.sendMsg(String.format(\"%s %s\", Command.CHANGE_NICK_ACCEPT, parts[1]));\n+                        server.broadcastClientList();\n+                    } else {\n+                        this.sendMsg(\"Такой ник уже используется\");\n                     }\n-                } catch (RuntimeException e) {\n-                    System.out.println(e.getMessage());\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                } finally {\n-                    server.unsubscribe(this);\n-                    System.out.println(\"Client disconnected: \" + user.getNick());\n-                    try {\n-                        socket.close();\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n+                } else if (str.startsWith(Command.PRIVATE_MESSAGE_HEAD)) {\n+                    String[] parts = str.split(\"\\\\s\", 3);\n+                    if (parts.length == 3) {\n+                        server.sendPrivateMessage(parts[1], parts[2], this);\n                     }\n+                } else {\n+                    server.broadcastMsg(this, str);\n                 }\n-            }).start();\n+            }\n+        } catch (SocketTimeoutException e) {\n+            try {\n+                out.writeUTF(Command.END);\n+            } catch (IOException ioException) {\n+                ioException.printStackTrace();\n+            }\n+        } catch (RuntimeException e) {\n+            System.out.println(e.getMessage());\n         } catch (IOException e) {\n             e.printStackTrace();\n+        } finally {\n+            server.unsubscribe(this);\n+            System.out.println(\"Client disconnected: \" + user.getNick());\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n         }\n     }\n \n+\n     public void sendMsg(String msg) {\n         try {\n             out.writeUTF(msg);\n@@ -132,4 +134,5 @@ public User getUser() {\n         return user;\n     }\n \n+\n }"
  },
  {
    "sha": "a02628de2792bcb0f22da6698d80db08ab639713",
    "filename": "server/src/main/java/server/Server.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/hpa777/java_chat_BCOW_16022021/blob/28072eea3a72b9d0be552989df210bc6722e0994/server/src/main/java/server/Server.java",
    "raw_url": "https://github.com/hpa777/java_chat_BCOW_16022021/raw/28072eea3a72b9d0be552989df210bc6722e0994/server/src/main/java/server/Server.java",
    "contents_url": "https://api.github.com/repos/hpa777/java_chat_BCOW_16022021/contents/server/src/main/java/server/Server.java?ref=28072eea3a72b9d0be552989df210bc6722e0994",
    "patch": "@@ -13,6 +13,8 @@\n import java.util.Scanner;\n import java.util.Vector;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n \n public class Server {\n     private final int PORT = 8189;\n@@ -43,6 +45,8 @@ public Server() {\n \n         clients = new CopyOnWriteArrayList<>();\n \n+        ExecutorService executorService = Executors.newFixedThreadPool(4);\n+\n         try {\n             server = new ServerSocket(PORT);\n             System.out.println(\"Server started\");\n@@ -51,7 +55,7 @@ public Server() {\n                 socket = server.accept();\n                 System.out.println(\"Client connected\");\n                 System.out.println(\"client: \" + socket.getRemoteSocketAddress());\n-                new ClientHandler(this, socket);\n+                executorService.execute(new ClientHandler(this, socket));\n             }\n \n         } catch (IOException e) {"
  }
]
