[
  {
    "sha": "4a59de434e9529b4e3d28f4f7937395e0d4a74f2",
    "filename": ".github/workflows/java_ci.yml",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/.github/workflows/java_ci.yml",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/.github/workflows/java_ci.yml",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/.github/workflows/java_ci.yml?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -1,22 +1,22 @@\n name: Java CI\n-on:\n-  push:\n-    branches: [ main ]\n-  pull_request:\n-    branches: [ main ]\n+on: [push]\n \n jobs:\n   java_ci:\n     name: Java CI\n     runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        jdk: [8, 9, 11, 16]\n+      fail-fast: false\n     steps:\n       - name: ðŸ“¦ Prepate Git Repo\n         uses: actions/checkout@v2\n \n       - name: â˜• Install OpenJDK\n         uses: AdoptOpenJDK/install-jdk@v1\n         with:\n-          version: '11'\n+          version: ${{ matrix.jdk }}\n           architecture: x64\n \n       - name: âœ” Test with Maven"
  },
  {
    "sha": "741b5d8866173a8e5cb09e251bbb1bc624f43999",
    "filename": ".github/workflows/mal_ci.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/.github/workflows/mal_ci.yml",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/.github/workflows/mal_ci.yml",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/.github/workflows/mal_ci.yml?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -1,6 +1,5 @@\n name: MyAnimeList CI\n-on:\n-  workflow_dispatch: {}\n+on: [workflow_dispatch]\n \n jobs:\n   mal_ci:"
  },
  {
    "sha": "f19411255c232ac32cf9c3841ad5e783c385cd02",
    "filename": "README.md",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/README.md",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/README.md",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/README.md?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -111,12 +111,20 @@ OpeningTheme[] op = anime.getOpeningThemes();\n \n ## Contributing\n \n-For devs running tests locally simply add a text file named `client.txt` that contains the client ID in the `src/test/java/resources` directory.\n+### Local Tests\n \n-Devs running remote tests may do so by running the `MyAnimeList CI` workflow manually in the actions tab of your fork. Note that this requires a secret `MAL_OAUTH` which contains the OAuth token.\n+For local tests you must run the project using JDK 11 with Java 11 level syntax. The `src/main/java9` folder should not be marked as a sources root.\n+\n+Run tests locally by adding a text file named `client.txt` that contains the client ID in the `src/test/java/resources` directory.\n \n Please note that the Client ID being used for tests must not have a client secret and must have an app redirect url of `http://localhost:5050`.\n \n+### Remote Tests\n+\n+Devs running remote tests may do so by running the `MyAnimeList CI` workflow manually in the actions tab of your fork. Note that this requires a secret `MAL_OAUTH` which contains the OAuth token.\n+\n+---\n+\n - Found a bug? Post it in [issues](https://github.com/Katsute/Mal4J/issues).\n - Have a suggestion or looking for inspiration? Check out our [discussions](https://github.com/Katsute/Mal4J/discussions).\n - Want to further expand our project or site? [Fork](https://github.com/Katsute/Mal4j/fork) this repository and submit a pull."
  },
  {
    "sha": "d8e26e7cb82e2c25348697adc3b3bfeb6c3737ab",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 36,
    "deletions": 3,
    "changes": 39,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/pom.xml",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/pom.xml",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/pom.xml?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -6,7 +6,7 @@\n \n     <groupId>com.kttdevelopment</groupId>\n     <artifactId>mal4j</artifactId>\n-    <version>1.1.2</version>\n+    <version>2.0.0-SNAPSHOT</version>\n \n     <profiles>\n         <profile>\n@@ -60,6 +60,38 @@\n                 </plugins>\n             </build>\n         </profile>\n+        <profile>\n+            <id>jdk9</id>\n+            <activation>\n+                <jdk>[9,)</jdk>\n+            </activation>\n+            <build>\n+                <pluginManagement>\n+                    <plugins>\n+                        <plugin>\n+                            <groupId>org.apache.maven.plugins</groupId>\n+                            <artifactId>maven-compiler-plugin</artifactId>\n+                            <executions>\n+                                <execution>\n+                                    <id>compile-java-9</id>\n+                                    <phase>compile</phase>\n+                                    <goals>\n+                                        <goal>compile</goal>\n+                                    </goals>\n+                                    <configuration>\n+                                        <release>9</release>\n+                                        <compileSourceRoots>\n+                                            <compileSourceRoot>${project.basedir}/src/main/java9</compileSourceRoot>\n+                                        </compileSourceRoots>\n+                                        <multiReleaseOutput>true</multiReleaseOutput>\n+                                    </configuration>\n+                                </execution>\n+                            </executions>\n+                        </plugin>\n+                    </plugins>\n+                </pluginManagement>\n+            </build>\n+        </profile>\n     </profiles>\n \n     <properties>\n@@ -104,8 +136,8 @@\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <version>3.8.1</version>\n                 <configuration>\n-                    <source>11</source>\n-                    <target>11</target>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n                 </configuration>\n             </plugin>\n \n@@ -117,6 +149,7 @@\n                     <archive>\n                         <manifestEntries>\n                             <Built-By>Katsute</Built-By>\n+                            <Multi-Release>true</Multi-Release>\n                         </manifestEntries>\n                     </archive>\n                     <skip>true</skip>"
  },
  {
    "sha": "728a93d8a4151ef4a7b01a63e11df49ad979f261",
    "filename": "src/main/java/com/kttdevelopment/mal4j/APICall.java",
    "status": "modified",
    "additions": 30,
    "deletions": 20,
    "changes": 50,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/APICall.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/APICall.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/main/java/com/kttdevelopment/mal4j/APICall.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -24,7 +24,6 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.net.*;\n-import java.net.http.*;\n import java.nio.charset.StandardCharsets;\n import java.util.*;\n import java.util.function.Function;\n@@ -129,7 +128,7 @@ final APICall withPathVar(final String pathVar, final Object value, final boolea\n         if(value == null)\n             pathVars.remove(pathVar);\n         else\n-            pathVars.put(pathVar, encoded ? Objects.toString(value) : URLEncoder.encode(Objects.toString(value), StandardCharsets.UTF_8));\n+            pathVars.put(pathVar, encoded ? Objects.toString(value) : Java9.URLEncoder.encode(Objects.toString(value), StandardCharsets.UTF_8));\n         return this;\n     }\n \n@@ -141,7 +140,7 @@ final APICall withQuery(final String query, final Object value, final boolean en\n         if(value == null)\n             queries.remove(query);\n         else\n-            queries.put(query, encoded ? Objects.toString(value) : URLEncoder.encode(Objects.toString(value), StandardCharsets.UTF_8));\n+            queries.put(query, encoded ? Objects.toString(value) : Java9.URLEncoder.encode(Objects.toString(value), StandardCharsets.UTF_8));\n         return this;\n     }\n \n@@ -162,7 +161,7 @@ final APICall withField(final String field, final Object value, final boolean en\n         if(value == null)\n             fields.remove(field);\n         else\n-            fields.put(field, encoded ? Objects.toString(value) : URLEncoder.encode(Objects.toString(value), StandardCharsets.UTF_8));\n+            fields.put(field, encoded ? Objects.toString(value) : Java9.URLEncoder.encode(Objects.toString(value), StandardCharsets.UTF_8));\n         return this;\n     }\n \n@@ -173,21 +172,20 @@ final APICall withField(final String field, final Object value, final boolean en\n \n     private static final URIEncoder encoder = new URIEncoder();\n \n-    final Response<String> call() throws IOException, InterruptedException{\n+    final Response<String> call() throws IOException{\n         final String URL =\n             baseURL +\n-            pathArg.matcher(path).replaceAll(result -> pathVars.get(result.group(1))) + // path args\n+            Java9.Matcher.replaceAll(pathArg.matcher(path), result -> pathVars.get(result.group(1))) + // path args\n             (queries.isEmpty() ? \"\" : '?' + queries.entrySet().stream().map(e -> e.getKey() + '=' + e.getValue()).collect(Collectors.joining(\"&\"))); // query\n \n-        final HttpRequest.Builder request = HttpRequest.newBuilder();\n+        final HttpURLConnection conn = (HttpURLConnection) URI.create(Java9.Matcher.replaceAll(blockedURI.matcher(URL),encoder)).toURL().openConnection();\n+        conn.setRequestMethod(method);\n \n-        request.uri(URI.create(blockedURI.matcher(URL).replaceAll(encoder)));\n-        request.method(method, HttpRequest.BodyPublishers.noBody());\n         for(final Map.Entry<String, String> entry : headers.entrySet())\n-            request.header(entry.getKey(), entry.getValue());\n+            conn.setRequestProperty(entry.getKey(), entry.getValue());\n \n-        request.header(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n-        request.header(\"Accept\", \"application/json; charset=UTF-8\");\n+        conn.setRequestProperty(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        conn.setRequestProperty(\"Accept\", \"application/json; charset=UTF-8\");\n \n         if(debug){\n             System.out.println(\"\\nCall:     \" + URL);\n@@ -198,19 +196,31 @@ final APICall withField(final String field, final Object value, final boolean en\n             final String data = fields.isEmpty() ? \"\" : fields.entrySet().stream().map(e -> e.getKey() + '=' + e.getValue()).collect(Collectors.joining(\"&\"));\n             if(debug)\n                 System.out.println(\"Data:     \" + data);\n-            request.header(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-            request.method(method, HttpRequest.BodyPublishers.ofString(data));\n+            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+            conn.setRequestMethod(method);\n+            conn.setDoOutput(true);\n+            try(final DataOutputStream OUT = new DataOutputStream(conn.getOutputStream())){\n+                OUT.writeBytes(data);\n+                OUT.flush();\n+            }\n+        }\n+\n+        @SuppressWarnings(\"UnusedAssignment\") // must be init, may be null by try catch fail\n+        String body = \"\";\n+        try(final BufferedReader IN = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))){\n+            String buffer;\n+            final StringBuilder OUT = new StringBuilder();\n+            while((buffer = IN.readLine()) != null)\n+                OUT.append(buffer);\n+            body = OUT.toString();\n+        }finally{\n+            conn.disconnect();\n         }\n-        final HttpResponse<String> response = HttpClient\n-            .newBuilder()\n-            .build()\n-            .send(request.build(), HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8));\n-        final String body = response.body();\n \n         if(debug)\n             System.out.println(\"Response: \" + body);\n \n-        return new Response<>(URL, body, body, response.statusCode());\n+        return new Response<>(URL, body, body, conn.getResponseCode());\n     }\n \n     final <T> Response<T> call(final Function<String,T> processor) throws IOException, InterruptedException{"
  },
  {
    "sha": "c85fefe2d8f00bee11eaac96f4164e7a0614574d",
    "filename": "src/main/java/com/kttdevelopment/mal4j/Java9.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/Java9.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/Java9.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/main/java/com/kttdevelopment/mal4j/Java9.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -0,0 +1,86 @@\n+package com.kttdevelopment.mal4j;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.regex.*;\n+\n+/**\n+ * Brings Java 9 features down to Java 8.\n+ */\n+abstract class Java9 {\n+\n+    static class URLEncoder {\n+\n+        static java.lang.String encode(final java.lang.String s, final Charset enc){\n+            try{\n+                return java.net.URLEncoder.encode(s, enc.name());\n+            }catch(final UnsupportedEncodingException e){\n+                System.out.println(\"This should not occur, please report this issue.\");\n+                e.printStackTrace(); // shouldn't occur for case UTF-8\n+                return s;\n+            }\n+        }\n+\n+    }\n+\n+    static class URLDecoder {\n+\n+        static java.lang.String decode(final java.lang.String s, final Charset enc){\n+            try{\n+                return java.net.URLDecoder.decode(s, enc.name());\n+            }catch(final UnsupportedEncodingException e){\n+                System.out.println(\"This should not occur, please report this issue.\");\n+                e.printStackTrace(); // shouldn't occur for case UTF-8\n+                return s;\n+            }\n+        }\n+\n+    }\n+\n+    static class String {\n+\n+        // [^\\s\\u1680]\n+        private static final Pattern nsp = Pattern.compile(\"[^\\\\s\\\\u1680]\");\n+\n+        static boolean isBlank(final java.lang.String s) {\n+            Objects.requireNonNull(s);\n+            return s.length() == 0 || !nsp.matcher(s).find();\n+        }\n+\n+    }\n+\n+    static class Matcher {\n+\n+        // replacer must not modify matcher\n+        static java.lang.String replaceAll(final java.util.regex.Matcher matcher, final Function<MatchResult,java.lang.String> replacer) {\n+            Objects.requireNonNull(matcher);\n+            Objects.requireNonNull(replacer);\n+            matcher.reset();\n+            boolean result = matcher.find();\n+            if (result) {\n+                final StringBuffer sb = new StringBuffer();\n+                do{\n+                    java.lang.String replacement = replacer.apply(matcher);\n+                    matcher.appendReplacement(sb, replacement);\n+                    result = matcher.find();\n+                }while(result);\n+                matcher.appendTail(sb);\n+                return sb.toString();\n+            }\n+            return matcher.toString();\n+        }\n+\n+        static int count(final java.util.regex.Matcher matcher){\n+            Objects.requireNonNull(matcher);\n+            matcher.reset();\n+            int count = 0;\n+            while(matcher.find())\n+                count++;\n+            return count;\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "b59765f5d54d56a81648b4fc042a971a646ff5f4",
    "filename": "src/main/java/com/kttdevelopment/mal4j/Json.java",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/Json.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/Json.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/main/java/com/kttdevelopment/mal4j/Json.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -124,7 +124,7 @@ private synchronized Object parseJson(final String json){\n         while(splitMatcher.find()){ // while still contains line splitting symbol\n             final int index = splitMatcher.end() - 1; // before the comma/split character\n             final String after = flatJson.substring(index + 1);\n-            final long count = quotes.reset(after).results().count();\n+            final long count = Java9.Matcher.count(quotes.reset(after));\n             if(count %2 == 0){ // even means symbol is not within quotes\n                 if(lastMatch != -1) // if not first (no before content)\n                     OUT.append(flatJson, lastMatch, index); // add content between last match and here\n@@ -195,7 +195,7 @@ else if(arrayMatcher.group(\"map\") != null) // open new map\n                     list.add(openMap(reader));\n             }else if(arrClose.matcher(ln).matches())\n                 return list;\n-            else if(!ln.isBlank())\n+            else if(!Java9.String.isBlank(ln))\n                 throw new JsonSyntaxException(\"Unexpected array value syntax: '\" + ln + '\\'');\n         }\n         throw new JsonSyntaxException(\"Object was missing closing character: ']'\");\n@@ -236,18 +236,19 @@ else if(mapMatcher.group(\"map\") != null) // open new map\n                     obj.set(key, openMap(reader));\n             }else if(mapClose.matcher(ln).matches())\n                 return obj;\n-            else if(!ln.isBlank())\n+            else if(!Java9.String.isBlank(ln))\n                 throw new JsonSyntaxException(\"Unexpected object value syntax: '\" + ln + '\\'');\n         }\n         throw new JsonSyntaxException(\"Object was missing closing character: '}'\");\n     }\n \n     private String decodeString(final String raw){\n-        return escapedMatcher.reset(\n-            unicodeMatcher.reset(\n+        return Java9.Matcher.replaceAll(escapedMatcher.reset(\n+            Java9.Matcher.replaceAll(unicodeMatcher.reset(\n                 raw\n-            ).replaceAll(unicodeReplacer)\n-        ).replaceAll(escapedReplacer);\n+                ), unicodeReplacer\n+            )), escapedReplacer\n+        );\n     }\n \n     // objects"
  },
  {
    "sha": "db5403c0a1be1622516434f69908c0bcede5f9a9",
    "filename": "src/main/java/com/kttdevelopment/mal4j/MyAnimeListAuthenticator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/MyAnimeListAuthenticator.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/MyAnimeListAuthenticator.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/main/java/com/kttdevelopment/mal4j/MyAnimeListAuthenticator.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -446,7 +446,7 @@ public static String getAuthorizationURL(final String client_id, final String PK\n         Objects.requireNonNull(PKCE_code_challenge, \"PKCE must not be null\");\n         return\n             String.format(authUrl, client_id, PKCE_code_challenge) +\n-            (redirect_URI != null ? String.format(redirectURI, URLEncoder.encode(redirect_URI, StandardCharsets.UTF_8)) : \"\") +\n+            (redirect_URI != null ? String.format(redirectURI, Java9.URLEncoder.encode(redirect_URI, StandardCharsets.UTF_8)) : \"\") +\n             (state != null ? String.format(authState, state) : \"\");\n     }\n \n@@ -691,8 +691,8 @@ private AccessToken parseToken(final Response<JsonObject> response){\n                 if(pair.contains(\"=\")){\n                     final String[] kv = pair.split(\"=\");\n                     OUT.put(\n-                            URLDecoder.decode(kv[0], StandardCharsets.UTF_8),\n-                        kv.length == 2 ? URLDecoder.decode(kv[1], StandardCharsets.UTF_8) : null\n+                        Java9.URLDecoder.decode(kv[0], StandardCharsets.UTF_8),\n+                        kv.length == 2 ? Java9.URLDecoder.decode(kv[1], StandardCharsets.UTF_8) : null\n                     );\n                 }\n             }"
  },
  {
    "sha": "99d6980d1fa308f63a092a0690483e801a83e9fc",
    "filename": "src/main/java/com/kttdevelopment/mal4j/MyAnimeListImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 10,
    "changes": 17,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/MyAnimeListImpl.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java/com/kttdevelopment/mal4j/MyAnimeListImpl.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/main/java/com/kttdevelopment/mal4j/MyAnimeListImpl.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -31,14 +31,11 @@\n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.net.HttpURLConnection;\n-import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.text.SimpleDateFormat;\n import java.util.*;\n import java.util.concurrent.atomic.*;\n import java.util.function.Function;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import static com.kttdevelopment.mal4j.Json.*;\n import static com.kttdevelopment.mal4j.MyAnimeListAPIResponseMapping.Anime.*;\n@@ -333,7 +330,7 @@ public final UserAnimeListQuery getUserAnimeListing(final String username){\n                 final JsonObject response = handleResponse(\n                     () -> service.getUserAnimeListing(\n                         auth,\n-                        username.equals(\"@me\") ? \"@me\" : URLEncoder.encode(username, StandardCharsets.UTF_8),\n+                        username.equals(\"@me\") ? \"@me\" : Java9.URLEncoder.encode(username, StandardCharsets.UTF_8),\n                         status != null ? status.field() : null,\n                         sort != null ? sort.field() : null,\n                         limit,\n@@ -356,7 +353,7 @@ public final UserAnimeListQuery getUserAnimeListing(final String username){\n                     offset,\n                     offset -> service.getUserAnimeListing(\n                         auth,\n-                        username.equals(\"@me\") ? \"@me\" : URLEncoder.encode(username, StandardCharsets.UTF_8),\n+                        username.equals(\"@me\") ? \"@me\" : Java9.URLEncoder.encode(username, StandardCharsets.UTF_8),\n                         status != null ? status.field() : null,\n                         sort != null ? sort.field() : null,\n                         limit,\n@@ -623,7 +620,7 @@ public final UserMangaListQuery getUserMangaListing(final String username){\n                 final JsonObject response = handleResponse(\n                     () -> service.getUserMangaListing(\n                         auth,\n-                        username.equals(\"@me\") ? \"@me\" : URLEncoder.encode(username, StandardCharsets.UTF_8),\n+                        username.equals(\"@me\") ? \"@me\" : Java9.URLEncoder.encode(username, StandardCharsets.UTF_8),\n                         status != null ? status.field() : null,\n                         sort != null ? sort.field() : null,\n                         limit,\n@@ -646,7 +643,7 @@ public final UserMangaListQuery getUserMangaListing(final String username){\n                     offset,\n                     offset -> service.getUserMangaListing(\n                         auth,\n-                        username.equals(\"@me\") ? \"@me\" : URLEncoder.encode(username, StandardCharsets.UTF_8),\n+                        username.equals(\"@me\") ? \"@me\" : Java9.URLEncoder.encode(username, StandardCharsets.UTF_8),\n                         status != null ? status.field() : null,\n                         sort != null ? sort.field() : null,\n                         limit,\n@@ -686,7 +683,7 @@ public final User getUser(final String username, final String... fields){\n         handleResponse(\n             () -> service.getUser(\n                 auth,\n-                username.equals(\"@me\") ? \"@me\" : URLEncoder.encode(username, StandardCharsets.UTF_8),\n+                username.equals(\"@me\") ? \"@me\" : Java9.URLEncoder.encode(username, StandardCharsets.UTF_8),\n                 asFieldList(toCommaSeparatedString(fields), Fields.user)\n             )\n         ));\n@@ -812,11 +809,11 @@ private static String toCommaSeparatedString(final String... fields){\n \n             final StringBuilder SB = new StringBuilder();\n             for(final String field : fields)\n-                if(!field.isBlank())\n+                if(!Java9.String.isBlank(field))\n                     SB.append(field).append(',');\n \n             final String str = SB.toString();\n-            if(!str.isBlank())\n+            if(!Java9.String.isBlank(str))\n                 return str.substring(0, str.length() -1);\n         }\n         return null;"
  },
  {
    "sha": "695b79d016fca1bf37e326a4ba047ee6527b820d",
    "filename": "src/main/java9/module-info.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java9/module-info.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/main/java9/module-info.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/main/java9/module-info.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -42,7 +42,6 @@\n  */\n module Mal4J {\n \n-    requires java.net.http;\n     requires jdk.httpserver;\n     requires java.desktop;\n ",
    "previous_filename": "src/main/java/module-info.java"
  },
  {
    "sha": "22369ed8ae881be48ddaee9d01c09d068a8e6784",
    "filename": "src/test/java/com/kttdevelopment/mal4j/TestAuthorizationLocalServer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestAuthorizationLocalServer.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestAuthorizationLocalServer.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/test/java/com/kttdevelopment/mal4j/TestAuthorizationLocalServer.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -14,7 +14,7 @@\n     public static void beforeAll() throws IOException{\n         TestProvider.testRequireClientID();\n \n-        final String clientId = Files.readString(TestProvider.client);\n+        final String clientId = TestProvider.readFile(TestProvider.client);\n         authenticator = new MyAnimeListAuthenticator.LocalServerBuilder(clientId, 5050).openBrowser().build();\n         final MyAnimeList mal = MyAnimeList.withAuthorization(authenticator);\n \n@@ -24,7 +24,7 @@ public static void beforeAll() throws IOException{\n         Assertions.assertNotNull(mal.getAnime().withQuery(TestProvider.AnimeQuery).search());\n \n         // write stable OAuth\n-        Files.write(TestProvider.oauth, authenticator.getAccessToken().getToken().getBytes(StandardCharsets.UTF_8));\n+        Files.write(TestProvider.oauth.toPath(), authenticator.getAccessToken().getToken().getBytes(StandardCharsets.UTF_8));\n     }\n \n     @Test"
  },
  {
    "sha": "f4f4f534fce76c82cce6fa0568093fddd408aed2",
    "filename": "src/test/java/com/kttdevelopment/mal4j/TestJava9.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestJava9.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestJava9.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/test/java/com/kttdevelopment/mal4j/TestJava9.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -0,0 +1,101 @@\n+package com.kttdevelopment.mal4j;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestJava9 {\n+\n+    @SuppressWarnings(\"SpellCheckingInspection\")\n+    private static String[][] getDecodeParameters(){\n+        return new String[][]{\n+            {\"The string \\u00FC@foo-bar\"}, // the string from javadoc example\n+            {\"\"}, // an empty string\n+            {\"x\"}, // a string of length 1\n+            {\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-.*\"}, // the string of characters should remain the same\n+            {charactersRange('\\u0000', '\\u007F')}, // a string of characters from 0 to 127\n+            {charactersRange('\\u0080', '\\u00FF')}, // a string of characters from 128 to 255\n+            {\"\\u0100 \\u0101 \\u0555 \\u07FD \\u07FF\"}, // a string of Unicode values can be expressed as 2 bytes\n+            {\"\\u8000 \\u8001 \\uA000 \\uFFFD \\uFFFF\"}, // a string of Unicode values can be expressed as 3 bytes\n+        };\n+    }\n+\n+    private static String charactersRange(final char c1, final char c2) {\n+        final StringBuilder sb = new StringBuilder(c2 - c1);\n+        for (char c = c1; c < c2; c++)\n+            sb.append(c);\n+        return sb.toString();\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testURLEncoder() throws UnsupportedEncodingException{\n+        // jdk.java.net.URLEncoder.EncodingTest\n+        {\n+            for(final String[] decodeParameter : getDecodeParameters())\n+                for(final String s : decodeParameter){\n+                    String enc1, enc2;\n+                    Assertions.assertEquals(\n+                        enc1 = URLEncoder.encode(s, StandardCharsets.UTF_8.name()),\n+                        enc2 = Java9.URLEncoder.encode(s, StandardCharsets.UTF_8)\n+                    );\n+                    // decoder\n+                    Assertions.assertEquals(\n+                        URLDecoder.decode(enc1, StandardCharsets.UTF_8.name()),\n+                        Java9.URLDecoder.decode(enc2, StandardCharsets.UTF_8)\n+                    );\n+                }\n+        }\n+        // jdk.java.net.URLEncoder.URLEncoderEncodeArgs\n+        Assertions.assertThrows(NullPointerException.class, () -> Java9.URLEncoder.encode(\"Hello World\", null));\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testURLDecoder(){\n+        // jdk.java.net.URLDecoder.URLDecoderArgs\n+        Assertions.assertThrows(NullPointerException.class, () -> Java9.URLDecoder.decode(\"Hello World\", null));\n+    }\n+\n+    private static String[] blank(){\n+        return new String[]{\"\", \" \", \" \\t\", \" \\t\\n\", \" \\u1680 \"};\n+    }\n+\n+    private static String[] notBlank(){\n+        return new String[]{\" abc \", \" abc\\u2022 \"};\n+    }\n+\n+    @Test // jdk.java.lang.String.IsBlank\n+    public void testString(){\n+        Assertions.assertThrows(NullPointerException.class, () -> Java9.String.isBlank(null));\n+\n+        for(final String s : blank())\n+            Assertions.assertTrue(Java9.String.isBlank(s));\n+        for(final String s : notBlank())\n+            Assertions.assertFalse(Java9.String.isBlank(s));\n+    }\n+\n+    @Test\n+    public void testMatcher(){\n+        // replaceAll\n+        final Matcher matcher = Pattern.compile(\"\\\\d\").matcher(\" 123456789 \");\n+\n+        Assertions.assertThrows(NullPointerException.class, () -> Java9.Matcher.replaceAll(null, null));\n+        Assertions.assertThrows(NullPointerException.class, () -> Java9.Matcher.replaceAll(matcher, null));\n+\n+        Assertions.assertEquals(matcher.replaceAll(\"0\"), Java9.Matcher.replaceAll(matcher, e -> \"0\"));\n+        Assertions.assertEquals(\" 012345678 \", Java9.Matcher.replaceAll(matcher, e -> String.valueOf(Integer.parseInt(e.group(0)) - 1)));\n+\n+        // count\n+        Assertions.assertThrows(NullPointerException.class, () -> Java9.Matcher.count(null));\n+\n+        Assertions.assertEquals(9, Java9.Matcher.count(Pattern.compile(\"\\\\d\").matcher(\" 123456789 \")));\n+    }\n+\n+}"
  },
  {
    "sha": "d200876f1adeb511a1ca3dc0a00a44099c8d526b",
    "filename": "src/test/java/com/kttdevelopment/mal4j/TestJson.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestJson.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestJson.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/test/java/com/kttdevelopment/mal4j/TestJson.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -5,7 +5,7 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.nio.file.Files;\n+import java.util.ArrayList;\n import java.util.List;\n \n import static com.kttdevelopment.mal4j.Json.*;\n@@ -15,7 +15,7 @@\n \n     @Test\n     public void testMap() throws IOException{\n-        final String map = Files.readString(new File(\"src/test/java/resources/map.json\").toPath()).replaceAll(\"\\\\r?\\\\n\",\"\");\n+        final String map = TestProvider.readFile(new File(\"src/test/java/resources/map.json\")).replaceAll(\"\\\\r?\\\\n\", \"\");\n \n         final JsonObject json = (JsonObject) parse(map);\n \n@@ -45,7 +45,7 @@ public void testMap() throws IOException{\n \n     @Test\n     public void testArray() throws IOException{\n-        final String arr = Files.readString(new File(\"src/test/java/resources/arr.json\").toPath()).replaceAll(\"\\\\r?\\\\n\",\"\");\n+        final String arr = TestProvider.readFile(new File(\"src/test/java/resources/arr.json\")).replaceAll(\"\\\\r?\\\\n\", \"\");\n \n         final List<?> json = (List<?>) parse(arr);\n \n@@ -65,8 +65,8 @@ public void testArray() throws IOException{\n         Assertions.assertTrue(json.contains(\"\\\\u4f55\"));\n         Assertions.assertEquals(\"v\", ((JsonObject) json.get(14)).getString(\"k\"));\n         Assertions.assertEquals(0, ((JsonObject) json.get(15)).size());\n-        Assertions.assertTrue(json.contains(List.of(\"str\")));\n-        Assertions.assertTrue(json.contains(List.of()));\n+        Assertions.assertTrue(json.contains(new ArrayList<String>(){{ add(\"str\"); }}));\n+        Assertions.assertTrue(json.contains(new ArrayList<String>()));\n     }\n \n     @Test"
  },
  {
    "sha": "622900aa3afca0c0781a279063061c366076726c",
    "filename": "src/test/java/com/kttdevelopment/mal4j/TestProvider.java",
    "status": "modified",
    "additions": 26,
    "deletions": 5,
    "changes": 31,
    "blob_url": "https://github.com/Katsute/Mal4J/blob/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestProvider.java",
    "raw_url": "https://github.com/Katsute/Mal4J/raw/4e3efe4871426733c07daa1f9841cae1a67785bd/src/test/java/com/kttdevelopment/mal4j/TestProvider.java",
    "contents_url": "https://api.github.com/repos/Katsute/Mal4J/contents/src/test/java/com/kttdevelopment/mal4j/TestProvider.java?ref=4e3efe4871426733c07daa1f9841cae1a67785bd",
    "patch": "@@ -5,8 +5,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n \n public abstract class TestProvider {\n \n@@ -47,13 +50,13 @@\n \n     //\n \n-    static final Path client = new File(\"src/test/java/resources/client.txt\").toPath();\n-    static final Path oauth  = new File(\"src/test/java/resources/oauth.txt\").toPath();\n+    static final File client = new File(\"src/test/java/resources/client.txt\");\n+    static final File oauth  = new File(\"src/test/java/resources/oauth.txt\");\n \n     public static void init() throws IOException{\n         APICall.debug = false;\n-        if(oauth.toFile().exists()){ // use existing OAuth\n-            mal = MyAnimeList.withOAuthToken(Files.readString(oauth).strip());\n+        if(oauth.exists()){ // use existing OAuth\n+            mal = MyAnimeList.withOAuthToken(strip(readFile(oauth)));\n             if(mal.getAnime(AnimeID, Fields.NO_FIELDS) != null)\n                 return;\n         }\n@@ -62,7 +65,7 @@ public static void init() throws IOException{\n     }\n \n     public static void testRequireClientID(){\n-        Assumptions.assumeTrue(client.toFile().exists(), \"File with Client ID was missing, please create a file with the Client ID at: \" + client.toFile().getAbsolutePath());\n+        Assumptions.assumeTrue(client.exists(), \"File with Client ID was missing, please create a file with the Client ID at: \" + client.getAbsolutePath());\n     }\n \n     public static MyAnimeList getMyAnimeList(){\n@@ -76,4 +79,22 @@ public static MyAnimeList getMyAnimeList(){\n         }\n     }\n \n+    // java 9\n+\n+    static String readFile(final File file) throws IOException{\n+        final List<String> lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);\n+\n+        final StringBuilder OUT = new StringBuilder();\n+        for(final String s : lines)\n+            OUT.append(s);\n+        return OUT.toString();\n+    }\n+\n+    // ^(\\s+)|(\\s+)$\n+    private static final Pattern dangling = Pattern.compile(\"^(\\\\s+)|(\\\\s+)$\");\n+\n+    static String strip(final String s){\n+        return dangling.matcher(s).replaceAll(\"\");\n+    }\n+\n }"
  }
]
