[
  {
    "sha": "8beea493280baae995e6f1ad91faba127c27217b",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/pom.xml",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/pom.xml",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/pom.xml?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -112,8 +112,8 @@\n         </dependency>\n         <dependency>\n             <groupId>org.apache.kafka</groupId>\n-            <artifactId>kafka_2.11</artifactId>\n-            <version>1.0.0</version>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.1.0</version>\n         </dependency>\n         <dependency>\n             <groupId>org.eclipse.microprofile</groupId>\n@@ -122,6 +122,11 @@\n             <scope>provided</scope>\n             <type>pom</type>\n         </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.microprofile.reactive.messaging</groupId>\n+            <artifactId>microprofile-reactive-messaging-api</artifactId>\n+            <version>1.0</version>\n+        </dependency>\n         <dependency>\n             <groupId>io.jaegertracing</groupId>\n             <artifactId>jaeger-client</artifactId>"
  },
  {
    "sha": "381b8c200ce461a82d44c203737f396851ad4b53",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/HealthEndpoint.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/HealthEndpoint.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/HealthEndpoint.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/HealthEndpoint.java?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -14,7 +14,7 @@\n \n import javax.inject.Inject;\n \n-import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.kafka.Consumer;\n+import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.kafka.MPReactiveConsumer;\n \n import org.eclipse.microprofile.health.Health;\n import org.eclipse.microprofile.health.HealthCheck;\n@@ -25,7 +25,7 @@\n public class HealthEndpoint implements HealthCheck {\n \n     @Inject\n-    private Consumer kafka;\n+    private MPReactiveConsumer kafka;\n \n     @Override\n     public HealthCheckResponse call() {"
  },
  {
    "sha": "2a939d271865a109d4a3db176a866876a42c541c",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumeSocket.java",
    "status": "removed",
    "additions": 0,
    "deletions": 241,
    "changes": 241,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumeSocket.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumeSocket.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumeSocket.java?ref=6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2",
    "patch": "@@ -1,241 +0,0 @@\n-/*\n-       Copyright 2018, 2019 IBM Corp All Rights Reserved\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-       http://www.apache.org/licenses/LICENSE-2.0\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n- */\n-package com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.demo;\n-\n-import java.io.IOException;\n-import java.io.StringReader;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.TimeUnit;\n-\n-import javax.annotation.Resource;\n-import javax.enterprise.concurrent.ManagedExecutorService;\n-import javax.json.Json;\n-import javax.json.JsonException;\n-import javax.json.JsonObject;\n-import javax.json.JsonReader;\n-import javax.websocket.CloseReason;\n-import javax.websocket.EncodeException;\n-import javax.websocket.EndpointConfig;\n-import javax.websocket.OnClose;\n-import javax.websocket.OnError;\n-import javax.websocket.OnMessage;\n-import javax.websocket.OnOpen;\n-import javax.websocket.Session;\n-import javax.websocket.server.ServerEndpoint;\n-\n-import org.apache.kafka.clients.consumer.ConsumerRecord;\n-import org.apache.kafka.clients.consumer.ConsumerRecords;\n-import org.apache.log4j.Logger;\n-\n-import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.mongo.MongoConnector;\n-import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.mongo.StockPurchase;\n-import com.sun.corba.se.spi.activation._ActivatorImplBase;\n-import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.kafka.Consumer;\n-\n-import javax.inject.Inject;\n-\n-@ServerEndpoint(value = \"/democonsume\", encoders = { DemoMessageEncoder.class })\n-public class DemoConsumeSocket {\n-\n-    private Session currentSession = null;\n-\n-    @Inject\n-    private Consumer consumer;\n-\n-    private MessageController messageController = null;\n-\n-    private Logger logger = Logger.getLogger(DemoConsumeSocket.class);\n-\n-    private static MongoConnector MONGO_CONNECTOR;\n-    @Resource\n-    ManagedExecutorService managedExecutorService;\n-\n-    @OnOpen\n-    public void onOpen(Session session, EndpointConfig endpointConfig) {\n-        logger.debug(String.format(\"Socket opened with id %s\", session.getId()));\n-        currentSession = session;\n-    }\n-\n-    @OnMessage\n-    public void onMessage(String message, Session session) {\n-        try (JsonReader reader = Json.createReader(new StringReader(message))) {\n-            JsonObject jsonMessage = reader.readObject();\n-            String action = jsonMessage.getString(\"action\");\n-            logger.debug(String.format(\"Message received from session %s with action %s\", session.getId(), action));\n-            switch (action) {\n-            case \"start\":\n-                if (messageController == null) {\n-                    logger.debug(\"Starting message consumption\");\n-                    messageController = new MessageController();\n-                    messageController.start();\n-                } else {\n-                    logger.debug(\"Resuming message consumption\");\n-                    messageController.resume();\n-                }\n-                break;\n-            case \"stop\":\n-                logger.debug(\"Pausing message consumption\");\n-                messageController.pause();\n-                break;\n-            default:\n-                logger.warn(\"Received message with unknown action, expected 'start' or 'stop'.\");\n-                break;\n-            }\n-        } catch (JsonException | IllegalStateException e) {\n-            onError(e);\n-        }\n-    }\n-\n-    @OnClose\n-    public void onClose(Session session, CloseReason closeReason) {\n-        logger.debug(\"Closed websocket\");\n-        if (messageController != null) {\n-            logger.debug(\"Stopping message controller\");\n-            messageController.stop();\n-        }\n-        logger.info(String.format(\"Consumer and client connection for session %s closed.\", session.getId()));\n-    }\n-\n-    @OnError\n-    public void onError(Throwable throwable) {\n-        logger.error(throwable);\n-        try {\n-            CloseReason closeReason = new CloseReason(CloseReason.CloseCodes.UNEXPECTED_CONDITION,\n-                    throwable.getMessage());\n-            currentSession.close(closeReason);\n-        } catch (IOException e) {\n-            logger.error(e);\n-        }\n-    }\n-    \n-    private class MessageController {\n-        MessageSender sender = new MessageSender();\n-        KafkaConsumer consumer = new KafkaConsumer();\n-        BlockingQueue<DemoConsumedMessage> queue = new LinkedBlockingQueue<>();\n-        \n-        void start() {\n-            if(MONGO_CONNECTOR != null) {\n-                sender.messageQueue = queue;\n-                consumer.messageQueue = queue;\n-                Thread thread = new Thread(sender);\n-                thread.start();\n-                thread = new Thread(consumer);\n-                thread.start();\n-            }\n-            else {\n-                logger.debug(\"Mongo not initialized properly\");\n-                stop();\n-            }\n-        }\n-        \n-        void pause() {\n-            sender.sendMessages = false;\n-        }\n-        \n-        void resume() {\n-            sender.sendMessages = true;\n-        }\n-        \n-        void stop() {\n-            consumer.exit = true;\n-            sender.exit = true;\n-        }\n-    }\n-\n-    private class MessageSender implements Runnable {\n-        volatile boolean exit = false;\n-        volatile boolean sendMessages = true;\n-        BlockingQueue<DemoConsumedMessage> messageQueue;\n-\n-        @Override\n-        public void run() {\n-            try {\n-                while (!exit) {\n-                    int messagesSent = 0;\n-                    while (!exit && sendMessages) {\n-                        logger.debug(\"Sending / waiting for messages, queue depth : \" + messageQueue.size());\n-                        try {\n-                            DemoConsumedMessage message = messageQueue.poll(1, TimeUnit.SECONDS);\n-                            if (message != null) {\n-                                logger.debug(String.format(\"Updating session %s with new message %s\",\n-                                        currentSession.getId(), message.encode()));\n-                                currentSession.getBasicRemote().sendObject(message);\n-                                messagesSent++;\n-                            }\n-                        } catch (IOException | EncodeException e) {\n-                            onError(e);\n-                        } \n-                    }\n-                    sendMessages = false;\n-                    Thread.sleep(1000);\n-                    logger.debug(String.format(\"Paused consumer for session %s.\", currentSession.getId()));\n-                }\n-            }catch (InterruptedException e) {\n-                Thread.currentThread().interrupt();\n-            }\n-\n-        }\n-\n-    }\n-\n-    private class KafkaConsumer implements Runnable {\n-        volatile boolean exit = false;\n-        BlockingQueue<DemoConsumedMessage> messageQueue;\n-\n-        public KafkaConsumer(){\n-            super();\n-            try {\n-                MONGO_CONNECTOR = new MongoConnector();\n-            }\n-            catch(NullPointerException e) {\n-                logger.debug(e.getMessage());\n-                MONGO_CONNECTOR = null;\n-            }  \n-            catch(IllegalArgumentException e) {\n-                logger.debug(e.getMessage());\n-\n-                MONGO_CONNECTOR = null;\n-            }\n-            catch(Exception e) {\n-                logger.debug(e.getMessage());\n-                MONGO_CONNECTOR = null;\n-            }\n-        }\n-        @Override\n-        public void run() {\n-            while (!exit) {\n-                logger.debug(\"Consuming messages from Kafka\");\n-                ConsumerRecords<String, String> records = consumer.consume();\n-                logger.debug(\"Processing records\");\n-                for (ConsumerRecord<String, String> record : records) {\n-                    DemoConsumedMessage message = new DemoConsumedMessage(record.topic(), record.partition(),\n-                            record.offset(), record.value(), record.timestamp());\n-                    \n-                    StockPurchase sp = new StockPurchase(message.getValue());\n-                    MONGO_CONNECTOR.insertStockPurchase(sp, message.getTopic());\n-                    try {\n-                        logger.debug(String.format(\"Consumed message %s\",message.encode()));\n-                        while (!exit && !messageQueue.offer(message, 1, TimeUnit.SECONDS));\n-                    } catch (InterruptedException e) {\n-                        Thread.currentThread().interrupt();\n-                    }\n-                }\n-            }\n-            logger.debug(\"Closing consumer\");\n-            consumer.shutdown();\n-            logger.debug(\"Consumer closed\");\n-        }\n-\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "0e9110a05d616f0c86c7805bb79395eefef1b44b",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumedMessage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 69,
    "changes": 69,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumedMessage.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumedMessage.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoConsumedMessage.java?ref=6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2",
    "patch": "@@ -1,69 +0,0 @@\n-/*\n-       Copyright 2018, 2019 IBM Corp All Rights Reserved\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-       http://www.apache.org/licenses/LICENSE-2.0\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n- */\n-\n-package com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.demo;\n-\n-import java.io.Serializable;\n-import javax.json.Json;\n-\n-public class DemoConsumedMessage implements Serializable{\n-\n-    private String topic;\n-    private int partition;\n-    private long offset;\n-    private String value;\n-    private long timestamp;\n-\n-    public DemoConsumedMessage(String topic, int partition, long offset, String value, long timestamp) {\n-        this.topic = topic;\n-        this.partition = partition;\n-        this.offset = offset;\n-        this.value = value;\n-        this.timestamp = timestamp;\n-    }\n-\n-    public String getTopic() {\n-        return topic;\n-    }\n-\n-    public int getPartition() {\n-        return partition;\n-    }\n-\n-    public long getOffset() {\n-        return offset;\n-    }\n-\n-    public String getValue() {\n-        return value;\n-    }\n-\n-    public long getTimestamp() {\n-        return timestamp;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return new StringBuffer().append(encode()).toString();\n-    }\n-\n-    public String encode() {\n-        return Json.createObjectBuilder()\n-            .add(\"topic\", topic)\n-            .add(\"partition\", partition)\n-            .add(\"offset\", offset)\n-            .add(\"value\", value)\n-            .add(\"timestamp\", timestamp)\n-            .build().toString();\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "11957d8329d133f134f298142543715b341ea779",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoMessageEncoder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 33,
    "changes": 33,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoMessageEncoder.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoMessageEncoder.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/demo/DemoMessageEncoder.java?ref=6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2",
    "patch": "@@ -1,33 +0,0 @@\n-/*\n-       Copyright 2018, 2019 IBM Corp All Rights Reserved\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-       http://www.apache.org/licenses/LICENSE-2.0\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n- */\n-package com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.demo;\n-\n-import javax.websocket.EncodeException;\n-import javax.websocket.Encoder;\n-import javax.websocket.EndpointConfig;\n-\n-\n-public class DemoMessageEncoder implements Encoder.Text<DemoConsumedMessage> {\n-\n-    @Override\n-    public void init(EndpointConfig config) {}\n-\n-    @Override\n-    public void destroy() {}\n-\n-    @Override\n-    public String encode(DemoConsumedMessage message) throws EncodeException {\n-        return message.encode();\n-    }\n-\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "449e59c32fb34eb7ddb67e7e458330967702806f",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/Consumer.java",
    "status": "removed",
    "additions": 0,
    "deletions": 124,
    "changes": 124,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/Consumer.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/Consumer.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/Consumer.java?ref=6acea4b8b58d7c22542dbfa37c344a8f67fb7ef2",
    "patch": "@@ -1,124 +0,0 @@\n-/*\n-       Copyright 2018, 2019 IBM Corp All Rights Reserved\n-   Licensed under the Apache License, Version 2.0 (the \"License\");\n-   you may not use this file except in compliance with the License.\n-   You may obtain a copy of the License at\n-       http://www.apache.org/licenses/LICENSE-2.0\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n- */\n-package com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.kafka;\n-\n-import java.util.Arrays;\n-import java.util.Properties;\n-\n-import org.apache.kafka.clients.consumer.KafkaConsumer;\n-import org.apache.kafka.clients.CommonClientConfigs;\n-import org.apache.kafka.clients.consumer.ConsumerConfig;\n-import org.apache.kafka.common.serialization.StringDeserializer;\n-import org.apache.kafka.clients.consumer.ConsumerRecords;\n-import org.apache.kafka.common.KafkaException;\n-import org.apache.kafka.common.config.SaslConfigs;\n-import org.apache.kafka.common.config.SslConfigs;\n-import org.apache.log4j.BasicConfigurator;\n-import org.apache.log4j.Logger;\n-\n-import org.eclipse.microprofile.config.inject.ConfigProperty;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-@ApplicationScoped\n-public class Consumer {\n-\n-    private final String APP_NAME = \"trade-history\";\n-    private final long POLL_DURATION = 1000;\n-\n-    @Inject\n-    @ConfigProperty(name = \"BOOTSTRAP_SERVER\")\n-    private String BOOTSTRAP_SERVER_ENV_KEY;\n-\n-    @Inject\n-    @ConfigProperty(name = \"TOPIC\")\n-    private String TOPIC_ENV_KEY;\n-\n-    @Inject\n-    @ConfigProperty(name = \"CONSUMER_API_KEY\")\n-    private String API_KEY;\n-\n-    @Inject\n-    @ConfigProperty(name = \"KAFKA_KEYSTORE\", defaultValue = \"resources/security/certs.jks\")\n-    private String KEYSTORE;\n-\n-    @Inject\n-    @ConfigProperty(name = \"KAFKA_USER\", defaultValue = \"token\")\n-    private String USERNAME;\n-\n-    @Inject\n-    @ConfigProperty(name = \"CONSUMER_GROUP_ID\", defaultValue = APP_NAME)\n-    private String CONSUMER_GROUP_ID;\n-\n-    private KafkaConsumer<String, String> kafkaConsumer=null;\n-\n-    private Logger logger = Logger.getLogger(Consumer.class);\n-\n-    public Consumer(){\n-\n-    }\n-\n-    @PostConstruct\n-    private void init() {\n-        BasicConfigurator.configure();\n-        String bootstrapServerAddress = BOOTSTRAP_SERVER_ENV_KEY.replace(\"\\\"\", \"\");\n-        String topic = TOPIC_ENV_KEY.replace(\"\\\"\", \"\");\n-\n-        kafkaConsumer = createConsumer(bootstrapServerAddress);\n-        kafkaConsumer.subscribe(Arrays.asList(topic));\n-    }\n-\n-    private KafkaConsumer<String, String> createConsumer(String brokerList) {\n-        Properties properties = new Properties();\n-        properties.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, brokerList);\n-        properties.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, \"SASL_SSL\");\n-        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n-        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n-        properties.put(ConsumerConfig.GROUP_ID_CONFIG, CONSUMER_GROUP_ID);\n-        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n-        properties.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLSv1.2\");\n-        properties.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, KEYSTORE);\n-        properties.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"password\");\n-        properties.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n-        String saslJaasConfig = \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"\"\n-            + USERNAME + \"\\\" password=\" + API_KEY + \";\";\n-        properties.put(SaslConfigs.SASL_JAAS_CONFIG, saslJaasConfig);\n-\n-        KafkaConsumer<String, String> kafkaConsumer = null;\n-\n-        try {\n-            kafkaConsumer = new KafkaConsumer<>(properties);\n-        } catch (KafkaException kafkaError) {\n-            logger.error(\"Error creating kafka consumer.\", kafkaError);\n-            throw kafkaError;\n-        }\n-        \n-        return kafkaConsumer;\n-    }\n-\n-    public ConsumerRecords<String, String> consume() {\n-        ConsumerRecords<String, String> records = kafkaConsumer.poll(POLL_DURATION);\n-        return records;\n-    }\n-\n-    public boolean isHealthy() {\n-        return kafkaConsumer != null;\n-    }\n-    \n-    public void shutdown() {\n-        kafkaConsumer.close();\n-        logger.info(String.format(\"Closed consumer: %s\", CONSUMER_GROUP_ID));\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "ddc78042ae7536c266779b2ebb18e755388ca44e",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/MPReactiveConsumer.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/MPReactiveConsumer.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/MPReactiveConsumer.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/kafka/MPReactiveConsumer.java?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -0,0 +1,55 @@\n+package com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.kafka;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.mongo.MongoConnector;\n+import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.mongo.StockPurchase;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+\n+@ApplicationScoped\n+public class MPReactiveConsumer {\n+    \n+    private static MongoConnector mConnector = null;\n+    private static String topic = null;\n+\n+    MPReactiveConsumer() {}\n+\n+    public void init(){\n+        try {\n+            mConnector = new MongoConnector();\n+            topic = System.getenv(\"MP_MESSAGING_INCOMING_STOCKTRADER_TOPIC\");\n+            if (topic == null || topic.isEmpty()) {\n+                topic = \"stocktrader\";\n+            }\n+        }\n+        catch( NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+        catch(IllegalArgumentException e) {\n+            System.out.println(e.getMessage());\n+        }\n+        catch(Exception e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    @Incoming(\"stocktrader\")\n+    public void consume(String record) {\n+        StockPurchase sp = new StockPurchase(record);\n+        try {\n+            if (mConnector == null) {\n+                init();\n+            }\n+            mConnector.insertStockPurchase(sp, topic);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public boolean isHealthy() {\n+        return true;\n+    }\n+\n+}"
  },
  {
    "sha": "c63fc3d62106211b1bdb92dc8497649766f3216c",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/mongo/MongoConnector.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/mongo/MongoConnector.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/mongo/MongoConnector.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/mongo/MongoConnector.java?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -14,6 +14,7 @@\n \n import com.mongodb.MongoClient;\n import com.mongodb.ServerAddress;\n+import com.mongodb.MongoClientOptions;\n import com.mongodb.client.MongoDatabase;\n import com.mongodb.client.MongoIterable;\n import com.mongodb.client.FindIterable;\n@@ -37,7 +38,6 @@\n \n import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.client.Quote;\n import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.client.StockQuoteClient;\n-import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.demo.DemoConsumedMessage;\n \n import org.eclipse.microprofile.rest.client.RestClientBuilder;\n \n@@ -76,14 +76,15 @@ public MongoConnector() throws NullPointerException,IllegalArgumentException,Mon\n             }\n             ServerAddress sa = new ServerAddress(MONGO_IP,MONGO_PORT);\n             MongoCredential credential = MongoCredential.createCredential(MONGO_USER, MONGO_AUTH_DB, MONGO_PASSWORD);\n-            mongoClient = new MongoClient(sa, Arrays.asList(credential));\n+            MongoClientOptions options = MongoClientOptions.builder().sslEnabled(true).build();\n+            mongoClient = new MongoClient(sa, credential, options);\n             try {\n                 mongoClient.getAddress();\n             } catch (Exception e) {\n                 mongoClient.close();\n                 throw e;\n             }\n-            database = mongoClient.getDatabase( MONGO_DATABASE );      \n+            database = mongoClient.getDatabase( MONGO_DATABASE );    \n         } catch(NullPointerException e){\n             throw e;\n         } "
  },
  {
    "sha": "025ddb071d2fb3d28bb2745e4269c234f3855503",
    "filename": "src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/rest/Trades.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/rest/Trades.java",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/rest/Trades.java",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/java/com/ibm/hybrid/cloud/sample/stocktrader/tradehistory/rest/Trades.java?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -12,34 +12,32 @@\n  */\n package com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.rest;\n \n+import javax.annotation.PostConstruct;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n-import javax.annotation.PostConstruct;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n \n+import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.client.Quote;\n import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.mongo.MongoConnector;\n import com.mongodb.MongoClient;\n import com.mongodb.client.FindIterable;\n \n import org.bson.Document;\n-import org.eclipse.microprofile.openapi.annotations.Operation;\n-import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n-import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n-import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.info.Contact;\n import org.eclipse.microprofile.openapi.annotations.info.Info;\n-import org.eclipse.microprofile.openapi.annotations.media.Content;\n import org.eclipse.microprofile.openapi.annotations.info.License;\n-import org.eclipse.microprofile.openapi.annotations.info.Contact;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n import org.eclipse.microprofile.openapi.annotations.media.Schema;\n-\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n import org.json.JSONObject;\n \n-import com.ibm.hybrid.cloud.sample.stocktrader.tradehistory.client.Quote;\n-\n import io.swagger.annotations.Api;\n \n @Path(\"/\")\n@@ -61,7 +59,7 @@\n     @PostConstruct\n     public void initialize(){\n         try {\n-            MongoConnector mConnector = new MongoConnector();\n+            mConnector = new MongoConnector();\n         }\n         catch( NullPointerException e) {\n             System.out.println(e.getMessage());\n@@ -95,7 +93,7 @@ public void initialize(){\n     )\n     public String latestBuy() {\n         JSONObject json = new JSONObject();\n-        MongoClient mClient = mConnector.mongoClient;\n+        MongoClient mClient = MongoConnector.mongoClient;\n         \n         long dbSize = mClient.getDatabase(\"test\").getCollection(\"test_collection\").count();\n         int approxDbSize = Math.toIntExact(dbSize);"
  },
  {
    "sha": "845e4a3d989314c83c2383ae5f9b7609113458bd",
    "filename": "src/main/liberty/config/resources/security/trust.p12",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/liberty/config/resources/security/trust.p12",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/liberty/config/resources/security/trust.p12",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/liberty/config/resources/security/trust.p12?ref=c5060d2f688a0ce10f4a706397bda002493fdc37"
  },
  {
    "sha": "19e5a201b2fac3e610ed2fdca58701dee57e21cb",
    "filename": "src/main/liberty/config/server.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/liberty/config/server.xml",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/liberty/config/server.xml",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/liberty/config/server.xml?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -14,6 +14,8 @@\n <server description=\"Trade History server\">\n   <featureManager>\n       <feature>microprofile-3.3</feature>\n+      <feature>mpReactiveMessaging-1.0</feature>\n+      <feature>mpConfig-1.4</feature>\n       <feature>monitor-1.0</feature>\n       <feature>jndi-1.0</feature>\n       <feature>websocket-1.1</feature>\n@@ -30,6 +32,14 @@\n       <classloader apiTypeVisibility=\"+third-party\"/>\n   </webApplication>\n   \n+  <keyStore id=\"defaultKeyStore\" password=\"St0ckTr@der\" type=\"pkcs12\"\n+        location=\"${server.config.dir}/resources/security/key.p12\" />\n+\n+  <keyStore id=\"defaultTrustStore\" password=\"St0ckTr@der\" type=\"pkcs12\"\n+        location=\"${server.config.dir}/resources/security/trust.p12\" />\n+\n+  <ssl id=\"defaultSSLConfig\" keyStoreRef=\"defaultKeyStore\" trustStoreRef=\"defaultTrustStore\" trustDefaultCerts=\"true\" />\n+\n   <mpJwt id=\"myMpJwt\" audiences=\"${env.JWT_AUDIENCE}\" issuer=\"${env.JWT_ISSUER}\" keyName=\"default\" ignoreApplicationAuthMethod=\"false\"/>\n \n   <mpMetrics authentication=\"false\"/>"
  },
  {
    "sha": "bea5cf3fcf5de759695b69310463715597656a96",
    "filename": "src/main/resources/META-INF/microprofile-config.properties",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/IBMStockTrader/trade-history/blob/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/resources/META-INF/microprofile-config.properties",
    "raw_url": "https://github.com/IBMStockTrader/trade-history/raw/c5060d2f688a0ce10f4a706397bda002493fdc37/src/main/resources/META-INF/microprofile-config.properties",
    "contents_url": "https://api.github.com/repos/IBMStockTrader/trade-history/contents/src/main/resources/META-INF/microprofile-config.properties?ref=c5060d2f688a0ce10f4a706397bda002493fdc37",
    "patch": "@@ -0,0 +1,18 @@\n+# Kafka consumer configs\n+mp.messaging.incoming.stocktrader.connector=liberty-kafka\n+mp.messaging.incoming.stocktrader.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n+mp.messaging.incoming.stocktrader.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n+mp.messaging.incoming.stocktrader.group.id=trade-history\n+mp.messaging.incoming.stocktrader.auto.offset.reset=earliest\n+\n+# common Kafka configs\n+mp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\n+mp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\n+mp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\n+mp.messaging.connector.liberty-kafka.ssl.enabled.protocols=TLSv1.2\n+mp.messaging.connector.liberty-kafka.ssl.endpoint.identification.algorithm=HTTPS\n+\n+# workaround for https://github.com/OpenLiberty/open-liberty/issues/10575\n+mp.messaging.incoming.stocktrader.topic=default-value\n+mp.messaging.connector.liberty-kafka.bootstrap.servers=default-value\n+mp.messaging.connector.liberty-kafka.sasl.jaas.config=default-value\n\\ No newline at end of file"
  }
]
