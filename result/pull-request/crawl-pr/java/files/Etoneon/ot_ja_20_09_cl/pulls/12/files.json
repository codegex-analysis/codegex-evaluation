[
  {
    "sha": "1e9ba513e2671b8ce3081eddb777381fe4408e7a",
    "filename": "hw18_jdbc/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/build.gradle",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/build.gradle",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/build.gradle?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -27,11 +27,11 @@ test {\n }\n \n shadowJar {\n-    archiveBaseName.set('hw18_jdbc-JdbcDemo')\n+    archiveBaseName.set('hw18_jdbc-WorkToDo')\n     archiveVersion.set('0.1')\n     archiveClassifier.set('')\n     manifest {\n-        attributes 'Main-Class': 'hw18_jdbc.demo.JdbcDemo'\n+        attributes 'Main-Class': 'hw18_jdbc.WorkToDo'\n     }\n }\n "
  },
  {
    "sha": "be54f59f4bdf679d86e5af4ba430096e9b15e477",
    "filename": "hw18_jdbc/docker/firstRunDb.bat",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/docker/firstRunDb.bat",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/docker/firstRunDb.bat",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/docker/firstRunDb.bat?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1 @@\n+docker run --rm --name pg-docker -e POSTGRES_PASSWORD=pwd -e POSTGRES_USER=usr -e POSTGRES_DB=demoDB -p 5432:5432 postgres:12\n\\ No newline at end of file"
  },
  {
    "sha": "f7bafb2a2ce6f57eb45648d66eae52bd8010378f",
    "filename": "hw18_jdbc/docker/runDb.bat",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/docker/runDb.bat",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/docker/runDb.bat",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/docker/runDb.bat?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1 @@\n+docker run -d -e POSTGRES_PASSWORD=pwd -e POSTGRES_USER=usr -e POSTGRES_DB=demoDB -p 5432:5432 postgres:12\n\\ No newline at end of file"
  },
  {
    "sha": "75cef1ddb415acf12f79602b76c601420f94d4c2",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/DbServiceDemo.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/DbServiceDemo.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/DbServiceDemo.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/DbServiceDemo.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,55 @@\n+package hw18_jdbc;\n+\n+import org.flywaydb.core.Flyway;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import hw18_jdbc.core.model.Client;\n+import hw18_jdbc.core.service.DbServiceClientImpl;\n+import hw18_jdbc.demo.DataSourceDemo;\n+import hw18_jdbc.jdbc.DbExecutorImpl;\n+import hw18_jdbc.jdbc.dao.ClientDaoJdbc;\n+import hw18_jdbc.jdbc.sessionmanager.SessionManagerJdbc;\n+\n+import javax.sql.DataSource;\n+import java.util.Optional;\n+\n+\n+/**\n+ * @author sergey\n+ * created on 03.02.19.\n+ */\n+// этот класс не должен быть в домашней работе\n+public class DbServiceDemo {\n+    private static final Logger logger = LoggerFactory.getLogger(DbServiceDemo.class);\n+/*\n+    public static void main(String[] args) {\n+        var dataSource = new DataSourceDemo();\n+        flywayMigrations(dataSource);\n+\n+        var sessionManager = new SessionManagerJdbc(dataSource);\n+        DbExecutorImpl<Client> dbExecutor = new DbExecutorImpl<>();\n+        var clientDao = new ClientDaoJdbc(sessionManager, dbExecutor);\n+\n+        var dbServiceClient = new DbServiceClientImpl(clientDao);\n+        var id = dbServiceClient.saveClient(new Client(0, \"dbServiceClient\"));\n+        Optional<Client> clientOpt = dbServiceClient.getClient(id);\n+\n+        clientOpt.ifPresentOrElse(\n+                client -> logger.info(\"created client, name:{}\", client.getName()),\n+                () -> logger.info(\"client was not created\")\n+        );\n+    }\n+*/\n+\n+\n+    private static void flywayMigrations(DataSource dataSource) {\n+        logger.info(\"db migration started...\");\n+        var flyway = Flyway.configure()\n+                .dataSource(dataSource)\n+                .locations(\"classpath:/db/migration\")\n+                .load();\n+        flyway.migrate();\n+        logger.info(\"db migration finished.\");\n+        logger.info(\"***\");\n+    }\n+}"
  },
  {
    "sha": "919bd58bb7da45e7bd3c9d10359ce3fbb4c3fcb9",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/WorkToDo.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/WorkToDo.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/WorkToDo.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/WorkToDo.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,85 @@\n+package hw18_jdbc;\n+\n+import hw18_jdbc.core.model.Account;\n+import hw18_jdbc.core.service.DBServiceMapperImpl;\n+import hw18_jdbc.jdbc.DbExecutor;\n+import hw18_jdbc.jdbc.DbExecutorImpl;\n+import hw18_jdbc.jdbc.dao.ClientDaoJdbc;\n+import hw18_jdbc.jdbc.mapper.EntitySQLMetaData;\n+import hw18_jdbc.jdbc.mapper.EntitySQLMetaDataImpl;\n+import hw18_jdbc.jdbc.mapper.JdbcMapperImpl;\n+import org.flywaydb.core.Flyway;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import hw18_jdbc.core.dao.ClientDao;\n+import hw18_jdbc.core.model.Client;\n+import hw18_jdbc.core.service.DbServiceClientImpl;\n+import hw18_jdbc.demo.DataSourceDemo;\n+\n+import hw18_jdbc.jdbc.mapper.JdbcMapper;\n+import hw18_jdbc.jdbc.sessionmanager.SessionManagerJdbc;\n+\n+import javax.sql.DataSource;\n+import java.util.Optional;\n+\n+\n+public class WorkToDo  {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WorkToDo.class);\n+\n+    public static void main(String[] args) {\n+// Общая часть\n+        var dataSource = new DataSourceDemo();\n+        flywayMigrations(dataSource);\n+        var sessionManager = new SessionManagerJdbc(dataSource);\n+\n+// Работа с пользователем\n+        DbExecutor <Client> dbExecutor = new DbExecutorImpl<>();\n+        JdbcMapper<Client> jdbcMapperClient = new JdbcMapperImpl<>(sessionManager, dbExecutor);\n+        JdbcMapper<Account> jdbcMapperAccount = new JdbcMapperImpl<>(sessionManager, dbExecutor);\n+        EntitySQLMetaData <Client> sqlMetaDataClient = new EntitySQLMetaDataImpl<>(Client.class);\n+        EntitySQLMetaData <Account> sqlMetaDataAccount = new EntitySQLMetaDataImpl<>(Account.class);\n+        ClientDao clientDao = new ClientDaoJdbc(sessionManager, dbExecutor);\n+\n+// Код дальше должен остаться, т.е. clientDao должен использоваться\n+        var dbServiceClient = new DbServiceClientImpl(clientDao);\n+        var id = dbServiceClient.saveClient(new Client(0, \"dbServiceClient\"));\n+        Optional<Client> clientOptional = dbServiceClient.getClient(id);\n+\n+        clientOptional.ifPresentOrElse(\n+                client -> logger.info(\"created client, name:{}\", client.getName()),\n+                () -> logger.info(\"client was not created\")\n+        );\n+\n+// новая работа с клиентом\n+\n+        var dbServiceMapperCli = new DBServiceMapperImpl(jdbcMapperClient);\n+        dbServiceMapperCli.saveObject(new Client(1000, \"dbServiceClient\",50));\n+        Client client = (Client) dbServiceMapperCli.getObject(1000,Client.class);\n+\n+        if (client!=null){logger.info(\"created client, name:{}\", client.getName());}\n+        else {logger.info(\"client was not created\");}\n+\n+// Работа со счетом\n+        var dbServiceMapperAcc = new DBServiceMapperImpl(jdbcMapperAccount);\n+        dbServiceMapperAcc.saveObject(new Account(\"fg23r\", \"saving\", 50.3F));\n+        Account account = (Account) dbServiceMapperAcc.getObject(\"fg23r\", Account.class);\n+\n+        if (account!=null){logger.info(\"created account, type:{}\", account.getType());}\n+        else {logger.info(\"account was not created\");}\n+\n+    }\n+\n+    private static void flywayMigrations(DataSource dataSource) {\n+        logger.info(\"db migration started...\");\n+        var flyway = Flyway.configure()\n+                .dataSource(dataSource)\n+                .locations(\"classpath:/db/migration\")\n+                .load();\n+        flyway.migrate();\n+        logger.info(\"db migration finished.\");\n+        logger.info(\"***\");\n+    }\n+\n+}"
  },
  {
    "sha": "2028243d75c40c973680ac9b9cf056a42e0eed04",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDao.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDao.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDao.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDao.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,18 @@\n+package hw18_jdbc.core.dao;\n+\n+import hw18_jdbc.core.model.Client;\n+import hw18_jdbc.core.sessionmanager.SessionManager;\n+\n+import java.util.Optional;\n+\n+public interface ClientDao {\n+    Optional<Client> findById(long id);\n+    //List<Client> findAll();\n+\n+    long insert(Client client);\n+\n+    //void update(Client client);\n+    //long insertOrUpdate(Client client);\n+\n+    SessionManager getSessionManager();\n+}"
  },
  {
    "sha": "3941080e016d09f23342bd684a0b86e53ec23f93",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDaoException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDaoException.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDaoException.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/dao/ClientDaoException.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,7 @@\n+package hw18_jdbc.core.dao;\n+\n+public class ClientDaoException extends RuntimeException {\n+    public ClientDaoException (Exception ex) {\n+        super(ex);\n+    }\n+}"
  },
  {
    "sha": "d58070f6ded4e735029da07569c40db692d68f4e",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/model/Account.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Account.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Account.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Account.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,33 @@\n+package hw18_jdbc.core.model;\n+\n+public class Account {\n+    @Id\n+    private final String no;\n+    private final String type;\n+    private final float rest;\n+\n+    public Account (String no, String type, float rest) {\n+        this.no = no;\n+        this.type = type;\n+        this.rest = rest;\n+    }\n+\n+    public String getNo() {\n+        return no;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public float getRest() { return rest;}\n+\n+    @Override\n+    public String toString() {\n+        return \"Accout {\" +\n+                \"no=\" + no +\n+                \", type = '\" + type + '\\'' +\n+                \", rest = \" + rest +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "47d847a9ff6b4c1a0eabab93f8f8972c1361aa00",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/model/Client.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Client.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Client.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Client.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,40 @@\n+package hw18_jdbc.core.model;\n+\n+\n+public class Client {\n+    @Id\n+    private final long id;\n+    private final String name;\n+    private final int age;\n+\n+    public Client (long id, String name) {\n+        this.id = id;\n+        this.name = name;\n+        this.age = 101;\n+    }\n+\n+    public Client(long id, String name, int age) {\n+        this.id = id;\n+        this.name = name;\n+        this.age = age;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public int getAge() { return age;}\n+\n+    @Override\n+    public String toString() {\n+        return \"Client{\" +\n+                \"id=\" + id +\n+                \", name='\" + name + '\\'' +\n+                \", age = \" + age +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "c65a9ac3fd4e62304b6fdae6fa04c970cf474c6a",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/model/Id.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Id.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Id.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/model/Id.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,11 @@\n+package hw18_jdbc.core.model;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.FIELD})\n+public @interface Id {\n+}"
  },
  {
    "sha": "7a698e9f982539c36b88495d3852d1876a8c216f",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceClient.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceClient.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceClient.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceClient.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,14 @@\n+package hw18_jdbc.core.service;\n+\n+import hw18_jdbc.core.model.Client;\n+\n+import java.util.Optional;\n+\n+public interface DBServiceClient {\n+\n+    long saveClient(Client client);\n+\n+    Optional<Client> getClient(long id);\n+\n+    //List<Client> findAll();\n+}"
  },
  {
    "sha": "99a9b1ebeddd9b24ce86505aa33c1e474e7b109d",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapper.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapper.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapper.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapper.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,9 @@\n+package hw18_jdbc.core.service;\n+\n+public interface DBServiceMapper <T> {\n+\n+        void saveObject (T objectData);\n+\n+        T getObject (Object id, Class<T> clazz);\n+\n+    }"
  },
  {
    "sha": "99b9d48a8799d63746c1962f066dc8e071f8c977",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapperImpl.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapperImpl.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapperImpl.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DBServiceMapperImpl.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,54 @@\n+package hw18_jdbc.core.service;\n+\n+import hw18_jdbc.jdbc.mapper.EntityClassMetaDataImpl;\n+import hw18_jdbc.jdbc.mapper.JdbcMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DBServiceMapperImpl <T> implements DBServiceMapper {\n+    private static final Logger logger = LoggerFactory.getLogger(DBServiceMapperImpl.class);\n+\n+    private final JdbcMapper jdbcMapper;\n+\n+    public DBServiceMapperImpl (JdbcMapper jdbcMapper) {\n+        this.jdbcMapper = jdbcMapper;\n+    }\n+\n+    @Override\n+    public void saveObject (Object objectData) {\n+        var clazzMetaData = new EntityClassMetaDataImpl<>(objectData.getClass());\n+        try (var sessionManager = jdbcMapper.getSessionManager()) {\n+            sessionManager.beginSession();\n+            try {\n+                jdbcMapper.insert(objectData);\n+                sessionManager.commitSession();\n+                String objIdString = clazzMetaData.getIdField().toString();\n+                logger.info(\"created object with Id: {}\", objIdString);\n+                return;\n+            } catch (Exception e) {\n+                sessionManager.rollbackSession();\n+                throw new DbServiceException(e);\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public T getObject(Object id, Class clazz) {\n+        try (var sessionManager = jdbcMapper.getSessionManager()) {\n+            sessionManager.beginSession();\n+            try {\n+                T objData = (T) jdbcMapper.findById(id, clazz);\n+\n+                logger.info(\"object: {}\", objData.toString());\n+                return objData;\n+            } catch (Exception e) {\n+                logger.error(e.getMessage(), e);\n+                sessionManager.rollbackSession();\n+            }\n+            return null;\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "76a2b9dbfd8f132ca669448bc0ab862a2a7f0496",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceClientImpl.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceClientImpl.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceClientImpl.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceClientImpl.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,51 @@\n+package hw18_jdbc.core.service;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import hw18_jdbc.core.dao.ClientDao;\n+import hw18_jdbc.core.model.Client;\n+\n+import java.util.Optional;\n+\n+public class DbServiceClientImpl implements DBServiceClient {\n+    private static final Logger logger = LoggerFactory.getLogger(DbServiceClientImpl.class);\n+\n+    private final ClientDao clientDao;\n+\n+    public DbServiceClientImpl(ClientDao clientDao) {\n+        this.clientDao = clientDao;\n+    }\n+\n+    @Override\n+    public long saveClient(Client client) {\n+        try (var sessionManager = clientDao.getSessionManager()) {\n+            sessionManager.beginSession();\n+            try {\n+                var clientId = clientDao.insert(client);\n+                sessionManager.commitSession();\n+                logger.info(\"created client: {}\", clientId);\n+                return clientId;\n+            } catch (Exception e) {\n+                sessionManager.rollbackSession();\n+                throw new DbServiceException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Client> getClient(long id) {\n+        try (var sessionManager = clientDao.getSessionManager()) {\n+            sessionManager.beginSession();\n+            try {\n+                Optional<Client> clientOptional = clientDao.findById(id);\n+\n+                logger.info(\"client: {}\", clientOptional.orElse(null));\n+                return clientOptional;\n+            } catch (Exception e) {\n+                logger.error(e.getMessage(), e);\n+                sessionManager.rollbackSession();\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+}"
  },
  {
    "sha": "73c7e2df73a8d971517453e7f99db19033e7a53c",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceException.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceException.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/service/DbServiceException.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,7 @@\n+package hw18_jdbc.core.service;\n+\n+public class DbServiceException extends RuntimeException {\n+    public DbServiceException(Exception e) {\n+        super(e);\n+    }\n+}"
  },
  {
    "sha": "1f1921ee87f5d9af5cf3b65b21cf8461fc4e424f",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/DatabaseSession.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/DatabaseSession.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/DatabaseSession.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/DatabaseSession.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,4 @@\n+package hw18_jdbc.core.sessionmanager;\n+\n+public interface DatabaseSession {\n+}"
  },
  {
    "sha": "866d014f833e936650609d68d7efb34b5e5fbff4",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManager.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManager.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManager.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManager.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,13 @@\n+package hw18_jdbc.core.sessionmanager;\n+\n+public interface SessionManager extends AutoCloseable {\n+    void beginSession();\n+\n+    void commitSession();\n+\n+    void rollbackSession();\n+\n+    void close();\n+\n+    DatabaseSession getCurrentSession();\n+}"
  },
  {
    "sha": "7ed94c3e7173b4fda204dc22b56a61f611b5f999",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManagerException.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManagerException.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManagerException.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/core/sessionmanager/SessionManagerException.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,12 @@\n+package hw18_jdbc.core.sessionmanager;\n+\n+\n+public class SessionManagerException extends RuntimeException {\n+    public SessionManagerException(String msg) {\n+        super(msg);\n+    }\n+\n+    public SessionManagerException(Exception ex) {\n+        super(ex);\n+    }\n+}"
  },
  {
    "sha": "06afe1973b54d3a5109089b0afdfd8c830d52133",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/demo/DataSourceDemo.java",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/demo/DataSourceDemo.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/demo/DataSourceDemo.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/demo/DataSourceDemo.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -35,10 +35,7 @@ public PrintWriter getLogWriter() {\n     }\n \n     @Override\n-    public void setLogWriter(PrintWriter out) {\n-        throw new UnsupportedOperationException();\n-\n-    }\n+    public void setLogWriter(PrintWriter out) {throw new UnsupportedOperationException(); }\n \n     @Override\n     public int getLoginTimeout() {"
  },
  {
    "sha": "c2d9a48d51dbf394be35638fc0a7e325062f0149",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/demo/JdbcDemo.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/demo/JdbcDemo.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/demo/JdbcDemo.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/demo/JdbcDemo.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -15,7 +15,7 @@\n // этот класс не должен быть в домашней работе\n public class JdbcDemo {\n     private static final Logger logger = LoggerFactory.getLogger(JdbcDemo.class);\n-\n+/*\n     public static void main(String[] args) throws SQLException {\n         var dataSource = new DataSourceDemo();\n         flywayMigrations(dataSource);\n@@ -26,7 +26,7 @@ public static void main(String[] args) throws SQLException {\n             demo.selectRecord(connection, id);\n         }\n     }\n-\n+*/\n     private static Connection getConnection(DataSource dataSource) throws SQLException {\n         var connection = dataSource.getConnection();\n         connection.setAutoCommit(false);"
  },
  {
    "sha": "6b926466077367a5c4e31faec6718bfb037dcb22",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutor.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutor.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutor.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutor.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,20 @@\n+package hw18_jdbc.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+public interface DbExecutor<T> {\n+\n+    long executeInsert(Connection connection, String sql, List<Object> params) throws SQLException;\n+\n+    void executeUpdate(Connection connection, String sql, Object Id, List<Object> params) throws SQLException;\n+\n+    Optional<T> executeSelect(Connection connection, String sql, Object id, Function<ResultSet, T> rsHandler) throws SQLException;\n+\n+    //для получения всех записей params должен быть пустым массивом\n+    //List<T> executeSelect(Connection connection, String sql, Object[] params, Function<ResultSet, T> rsHandler) throws SQLException;\n+}"
  },
  {
    "sha": "e994287d61bbf0f8120e3920b2e6d3d7eebcc75f",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutorImpl.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutorImpl.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutorImpl.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/DbExecutorImpl.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,68 @@\n+package hw18_jdbc.jdbc;\n+\n+import java.sql.*;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * @author sergey\n+ * created on 03.02.19.\n+ */\n+public class DbExecutorImpl<T> implements DbExecutor<T> {\n+\n+    @Override\n+    public long executeInsert(Connection connection, String sql, List<Object> params) throws SQLException {\n+        Savepoint savePoint = connection.setSavepoint(\"savePointName\");\n+        int keyStatement;\n+        if(params.size() > 1){\n+            keyStatement = Statement.NO_GENERATED_KEYS;}\n+        else {keyStatement = Statement.RETURN_GENERATED_KEYS;}\n+        try (var pst = connection.prepareStatement(sql, keyStatement)) {\n+            for (int idx = 0; idx < params.size(); idx++) {\n+                pst.setObject(idx + 1, params.get(idx));\n+            }\n+            pst.executeUpdate();\n+\n+            try (ResultSet rs = pst.getGeneratedKeys()) {\n+                if (!(params.size() > 1)){\n+                rs.next();\n+                return rs.getInt(1);\n+            }\n+            return 0;}\n+        } catch (SQLException ex) {\n+            connection.rollback(savePoint);\n+            throw ex;\n+        }\n+    }\n+\n+    @Override\n+    public void executeUpdate(Connection connection, String sql, Object Id, List<Object> params) throws SQLException {\n+        Savepoint savePoint = connection.setSavepoint(\"savePointName\");\n+        try (var pst = connection.prepareStatement(sql, Statement.NO_GENERATED_KEYS)) {\n+            for (int idx = 0; idx < params.size()-1; idx++) {\n+                pst.setObject(idx + 1, params.get(idx));\n+            }\n+            pst.setObject(params.size()+1, Id);\n+            pst.executeUpdate();\n+            try (ResultSet rs = pst.getGeneratedKeys()) {\n+                rs.next();\n+            }\n+        } catch (SQLException ex) {\n+            connection.rollback(savePoint);\n+            throw ex;\n+        }\n+    }\n+\n+    @Override\n+    public Optional<T> executeSelect(Connection connection, String sql, Object id,\n+                                     Function<ResultSet, T> rsHandler) throws SQLException {\n+        try (var pst = connection.prepareStatement(sql)) {\n+            pst.setObject(1, id);\n+            try (var rs = pst.executeQuery()) {\n+                return Optional.ofNullable(rsHandler.apply(rs));\n+            }\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "eddc123ea95066321bed6a9c98bd0d18f7fc9b14",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/ExecutorDemo.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/ExecutorDemo.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/ExecutorDemo.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/ExecutorDemo.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,67 @@\n+package hw18_jdbc.jdbc;\n+\n+import org.flywaydb.core.Flyway;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import hw18_jdbc.core.model.Client;\n+import hw18_jdbc.demo.DataSourceDemo;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+/**\n+ * @author sergey\n+ * created on 03.02.19.\n+ */\n+// этот класс не должен быть в домашней работе\n+public class ExecutorDemo {\n+    private static final Logger logger = LoggerFactory.getLogger(ExecutorDemo.class);\n+/*\n+    public static void main(String[] args) throws SQLException {\n+        var dataSource = new DataSourceDemo();\n+        flywayMigrations(dataSource);\n+\n+        try (Connection connection = getConnection(dataSource)) {\n+            DbExecutorImpl<Client> executor = new DbExecutorImpl<>();\n+            long clientId = executor.executeInsert(connection, \"insert into client(name) values (?)\",\n+                    Collections.singletonList(\"testUserName\"));\n+            logger.info(\"created client:{}\", clientId);\n+            connection.commit();\n+\n+            Optional<Client> client = executor.executeSelect(connection, \"select id, name from client where id  = ?\",\n+                    clientId, rs -> {\n+                        try {\n+                            if (rs.next()) {\n+                                return new Client(rs.getLong(\"id\"), rs.getString(\"name\"));\n+                            }\n+                        } catch (SQLException e) {\n+                            logger.error(e.getMessage(), e);\n+                        }\n+                        return null;\n+                    });\n+            logger.info(\"client:{}\", client);\n+        }\n+    }\n+\n+ */\n+\n+    private static Connection getConnection(DataSource dataSource) throws SQLException {\n+        var connection = dataSource.getConnection();\n+        connection.setAutoCommit(false);\n+        return connection;\n+    }\n+\n+    private static void flywayMigrations(DataSource dataSource) {\n+        logger.info(\"db migration started...\");\n+        var flyway = Flyway.configure()\n+                .dataSource(dataSource)\n+                .locations(\"classpath:/db/migration\")\n+                .load();\n+        flyway.migrate();\n+        logger.info(\"db migration finished.\");\n+        logger.info(\"***\");\n+    }\n+}"
  },
  {
    "sha": "bfa6aedf3f6a2e481b36935d909caa67120c997c",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/dao/ClientDaoJdbc.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/dao/ClientDaoJdbc.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/dao/ClientDaoJdbc.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/dao/ClientDaoJdbc.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,68 @@\n+package hw18_jdbc.jdbc.dao;\n+\n+\n+import hw18_jdbc.jdbc.DbExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import hw18_jdbc.core.dao.ClientDao;\n+import hw18_jdbc.core.dao.ClientDaoException;\n+import hw18_jdbc.core.model.Client;\n+import hw18_jdbc.core.sessionmanager.SessionManager;\n+import hw18_jdbc.jdbc.sessionmanager.SessionManagerJdbc;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+// этот класс не должен быть в домашней работе\n+public class ClientDaoJdbc implements ClientDao {\n+    private static final Logger logger = LoggerFactory.getLogger(ClientDaoJdbc.class);\n+\n+    private final SessionManagerJdbc sessionManager;\n+    private final DbExecutor<Client> dbExecutor;\n+\n+    public ClientDaoJdbc(SessionManagerJdbc sessionManager, DbExecutor <Client> dbExecutor) {\n+        this.sessionManager = sessionManager;\n+        this.dbExecutor = dbExecutor;\n+    }\n+\n+    @Override\n+    public Optional<Client> findById(long id) {\n+        try {\n+            return dbExecutor.executeSelect(getConnection(), \"select id, name from client where id  = ?\",\n+                    id, rs -> {\n+                        try {\n+                            if (rs.next()) {\n+                                return new Client(rs.getLong(\"id\"), rs.getString(\"name\"));\n+                            }\n+                        } catch (SQLException e) {\n+                            logger.error(e.getMessage(), e);\n+                        }\n+                        return null;\n+                    });\n+        } catch (Exception e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public long insert(Client client) {\n+        try {\n+            return dbExecutor.executeInsert(getConnection(), \"insert into client(name) values (?)\",\n+                    Collections.singletonList(client.getName()));\n+        } catch (Exception e) {\n+            throw new ClientDaoException(e);\n+        }\n+    }\n+\n+    @Override\n+    public SessionManager getSessionManager() {\n+        return sessionManager;\n+    }\n+\n+    private Connection getConnection() {\n+        return sessionManager.getCurrentSession().getConnection();\n+    }\n+}"
  },
  {
    "sha": "31de956379066080a83ba7e3b292e2f031d4c995",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaData.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaData.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaData.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaData.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,21 @@\n+package hw18_jdbc.jdbc.mapper;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.util.List;\n+\n+/**\n+ * \"Разбирает\" объект на составные части\n+ * @param <T>\n+ */\n+public interface EntityClassMetaData<T> {\n+    String getName();\n+\n+    Constructor<T> getConstructor() throws NoSuchMethodException;\n+\n+    Field getIdField();\n+\n+    List<Field> getAllFields();\n+\n+    List<Field> getFieldsWithoutId();\n+}"
  },
  {
    "sha": "08255cb38c43a4fca7535f4b78a7f54d7e5732d4",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaDataImpl.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaDataImpl.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaDataImpl.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntityClassMetaDataImpl.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,62 @@\n+package hw18_jdbc.jdbc.mapper;\n+\n+import hw18_jdbc.core.model.Id;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Parameter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+//import java.lang.reflect.*;\n+\n+public class EntityClassMetaDataImpl <T> implements EntityClassMetaData {\n+\n+    private Class <?> clazz = null;\n+\n+    public EntityClassMetaDataImpl (Class <T> clazz){\n+        this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        String str = clazz.getSimpleName();\n+        return str;\n+    }\n+\n+    @Override\n+    public Constructor getConstructor() {\n+        Class <?> [] fieldTypes = getAllFields().stream().map(field -> field.getType()).\n+               toArray(Class<?>[]::new);\n+        Constructor [] constructors = clazz.getConstructors();\n+        Constructor[] filteredConstructors = Arrays.stream(constructors).\n+                filter(constr->Arrays.equals(constr.getParameterTypes(), fieldTypes)).toArray(Constructor[]::new);\n+        if(filteredConstructors.length==0){throw new RuntimeException(\"no constructor matching  fields\");}\n+        return filteredConstructors[0];\n+    }\n+\n+    @Override\n+    public Field getIdField() {\n+        List <Field> idField = new ArrayList<>(getAllFields().stream().\n+                filter(field -> field.getDeclaredAnnotation(Id.class)!=null).\n+                collect(Collectors.toList()));\n+        if (idField.size()==1){return idField.get(0);}\n+        else if (idField.size()>1){throw new RuntimeException(\"too many Id fields in \"+getName());}\n+        else if (idField.size()==0){throw new RuntimeException(\"no Id fields in \"+getName());}\n+        return null;\n+    }\n+\n+    @Override\n+    public List<Field> getAllFields() {\n+        List <Field> fields = Arrays.asList(clazz.getDeclaredFields());\n+        return fields;\n+    }\n+\n+    @Override\n+    public List<Field> getFieldsWithoutId() {\n+        List <Field> noIdFields = new ArrayList<>(getAllFields().stream().\n+                filter(field -> field.getDeclaredAnnotation(Id.class)==null).\n+                collect(Collectors.toList()));\n+        return noIdFields;\n+    }\n+}"
  },
  {
    "sha": "136f60cfac061dba4fed82204a0743314ef4b3f5",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaData.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaData.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaData.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaData.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,15 @@\n+package hw18_jdbc.jdbc.mapper;\n+\n+/**\n+ * Создает SQL - запросы\n+ */\n+public interface EntitySQLMetaData <T> {\n+    String getSelectAllSql();\n+\n+    String getSelectByIdSql();\n+\n+    String getInsertSql();\n+\n+    String getUpdateSql();\n+\n+}"
  },
  {
    "sha": "c68524e91e3116f895d46cf23e0a750640b0571d",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaDataImpl.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaDataImpl.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaDataImpl.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/EntitySQLMetaDataImpl.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,65 @@\n+package hw18_jdbc.jdbc.mapper;\n+\n+import java.util.Arrays;\n+\n+public class EntitySQLMetaDataImpl <T> implements EntitySQLMetaData {\n+    private final StringBuilder sqlString = new StringBuilder();\n+    private final Class clazz;\n+    private final EntityClassMetaData <T> clazzMetaData;\n+\n+    public EntitySQLMetaDataImpl (Class<T> clazz){\n+        this.clazz = clazz;\n+        this.clazzMetaData = new EntityClassMetaDataImpl<>(clazz);\n+    }\n+\n+\n+    @Override\n+    public String getSelectAllSql() {\n+        sqlString.delete(0,sqlString.length());\n+        sqlString.append(\"SELECT * FROM \").append(clazzMetaData.getName().toLowerCase());\n+        return sqlString.toString();\n+//        \"select * from client\"\n+    }\n+\n+    @Override\n+    public String getSelectByIdSql() {\n+        sqlString.delete(0,sqlString.length());\n+        sqlString.append(\"SELECT\");\n+        clazzMetaData.getAllFields().stream().\n+                map(fld -> fld.getName().toLowerCase()).forEach(str -> sqlString.append(\" \"+str+\",\"));\n+        sqlString.replace(sqlString.lastIndexOf(\",\"), sqlString.lastIndexOf(\",\") + 1, \" FROM \");\n+        sqlString.append(clazzMetaData.getName().toLowerCase()).append(\" WHERE \").\n+                append(clazzMetaData.getIdField().getName().toLowerCase()).append(\" = ?\");\n+        return sqlString.toString();\n+//        \"select id, name, age from client where id  = ?\"\n+    }\n+\n+    @Override\n+    public String getInsertSql() {\n+        sqlString.delete(0,sqlString.length());\n+        sqlString.append(\"INSERT INTO \").append(clazzMetaData.getName().toLowerCase()+\"(\");\n+        clazzMetaData.getAllFields().stream().\n+                map(fld -> fld.getName().toLowerCase()).forEach(str -> sqlString.append(str+\",\"));\n+        sqlString.replace(sqlString.lastIndexOf(\",\"), sqlString.lastIndexOf(\",\") + 1, \") VALUES (\");\n+        Arrays.asList(new String[clazzMetaData.getAllFields().size()]).stream().\n+                forEach(str -> sqlString.append(\"?,\"));\n+        sqlString.replace(sqlString.lastIndexOf(\",\"), sqlString.lastIndexOf(\",\") + 1, \")\");\n+        return sqlString.toString();\n+\n+//        \"insert into client(id,name,age) values (?,?,?)\"\n+    }\n+\n+    @Override\n+    public String getUpdateSql() {\n+        sqlString.delete(0,sqlString.length());\n+        sqlString.append(\"UPDATE \");\n+        sqlString.append(clazzMetaData.getName().toLowerCase()).append(\" SET\");\n+        clazzMetaData.getFieldsWithoutId().stream().\n+                map(fld -> fld.getName().toLowerCase()).forEach(str -> sqlString.append(\" \"+str+\"=?,\"));\n+        sqlString.replace(sqlString.lastIndexOf(\",\"), sqlString.lastIndexOf(\",\") + 1, \" WHERE \");\n+        sqlString.append(clazzMetaData.getIdField().getName().toLowerCase()).append(\" = ?\");\n+        return sqlString.toString();\n+\n+//        \"update client set name=?, age=? where id=?\"\n+    }\n+}"
  },
  {
    "sha": "84d919e256886dd48fc0d6ad3a22e0ce8e4e0b7e",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapper.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapper.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapper.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapper.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,23 @@\n+package hw18_jdbc.jdbc.mapper;\n+\n+import hw18_jdbc.core.sessionmanager.SessionManager;\n+\n+import java.sql.SQLException;\n+\n+/**\n+ * Сохратяет объект в базу, читает объект из базы\n+ * @param <T>\n+ */\n+public interface JdbcMapper<T> {\n+    void insert(T objectData);\n+\n+    void update(T objectData);\n+\n+    void insertOrUpdate(T objectData);\n+\n+    T findById(Object id, Class<T> clazz);\n+\n+    SessionManager getSessionManager();\n+\n+//    List<T> findAll(Class<T> clazz);\n+}"
  },
  {
    "sha": "eae05119b23334d7bc046598bf6e6540a8e8d52f",
    "filename": "hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapperException.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Etoneon/ot_ja_20_09_cl/blob/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapperException.java",
    "raw_url": "https://github.com/Etoneon/ot_ja_20_09_cl/raw/47222c284d8cd450eb9916613e365b132b72cd83/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapperException.java",
    "contents_url": "https://api.github.com/repos/Etoneon/ot_ja_20_09_cl/contents/hw18_jdbc/src/main/java/hw18_jdbc/jdbc/mapper/JdbcMapperException.java?ref=47222c284d8cd450eb9916613e365b132b72cd83",
    "patch": "@@ -0,0 +1,13 @@\n+package hw18_jdbc.jdbc.mapper;\n+\n+public class JdbcMapperException extends RuntimeException {\n+\n+        public JdbcMapperException (String msg) {\n+            super(msg);\n+        }\n+\n+        public JdbcMapperException (Exception ex) {\n+            super(ex);\n+        }\n+    }\n+"
  }
]
