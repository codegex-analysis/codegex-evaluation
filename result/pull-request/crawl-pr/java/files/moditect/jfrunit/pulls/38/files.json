[
  {
    "sha": "4c4df230236df7385e9cca0a88462c213260d7ba",
    "filename": "README.md",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/README.md",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/README.md",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/README.md?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -76,6 +76,36 @@ public class JfrTest {\n }\n ```\n \n+Or with Spock Framework like this:\n+```groovy\n+import dev.morling.jfrunit.*\n+import spock.lang.Specification\n+\n+import java.time.Duration\n+\n+import static dev.morling.jfrunit.JfrEventsAssert.*\n+import static dev.morling.jfrunit.ExpectedEvent.*\n+\n+@JfrEventTest\n+class JfrSpec extends Specification {\n+\n+    JfrEvents jfrEvents = new JfrEvents()\n+\n+    @EnableEvent('jdk.GarbageCollection')\n+    @EnableEvent('jdk.ThreadSleep')\n+    def 'should Have GC And Sleep Events'() {\n+        when:\n+        System.gc()\n+        sleep(1000)\n+\n+        then:\n+        assertThat(jfrEvents).contains(event('jdk.GarbageCollection'))\n+        assertThat(jfrEvents).contains(\n+                event('jdk.ThreadSleep').with('time', Duration.ofSeconds(1)))\n+    }\n+}\n+```\n+\n Note that when you're writing a test for a Quarkus application using the `@QuarkusTest` annotation, you don't need (and even should not) add the `@JfrEventTest` annotation.\n Instead, the Quarkus test framework will automatically pick up the required callbacks for managing the JFR recording.\n "
  },
  {
    "sha": "c1e41ecd8450b93226979f4c44af3c292936f0ae",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 47,
    "deletions": 6,
    "changes": 53,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/pom.xml",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/pom.xml",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/pom.xml?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -72,6 +72,32 @@\n       <artifactId>quarkus-junit5</artifactId>\n       <scope>provided</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.spockframework</groupId>\n+      <artifactId>spock-core</artifactId>\n+      <version>1.3-groovy-2.5</version>\n+      <scope>provided</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.codehaus.groovy</groupId>\n+          <artifactId>*</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.vintage</groupId>\n+      <artifactId>junit-vintage-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.codehaus.groovy</groupId>\n+      <artifactId>groovy-all</artifactId>\n+      <version>2.5.14</version>\n+      <type>pom</type>\n+      <scope>test</scope>\n+    </dependency>\n+\n   </dependencies>\n \n   <build>\n@@ -119,17 +145,32 @@\n     </pluginManagement>\n     <plugins>\n       <plugin>\n-        <artifactId>maven-compiler-plugin</artifactId>\n+        <groupId>org.codehaus.gmavenplus</groupId>\n+        <artifactId>gmavenplus-plugin</artifactId>\n+        <version>1.12.0</version>\n+        <configuration>\n+          <targetBytecode>11</targetBytecode>\n+        </configuration>\n+\n         <executions>\n           <execution>\n-            <id>default-testCompile</id>\n-            <configuration>\n-              <release>15</release>\n-            </configuration>\n+            <goals>\n+              <goal>compileTests</goal>\n+            </goals>\n           </execution>\n         </executions>\n       </plugin>\n-\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <trimStackTrace>false</trimStackTrace>\n+          <includes>\n+            <include>**/*Test.java</include>\n+            <include>**/*Spec.java</include>\n+          </includes>\n+        </configuration>\n+      </plugin>\n \n       <plugin>\n         <groupId>com.mycila</groupId>"
  },
  {
    "sha": "11e9fd21364fc3353f30ea28fe5b19cc2d900213",
    "filename": "src/main/java/dev/morling/jfrunit/JfrEventTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/main/java/dev/morling/jfrunit/JfrEventTest.java",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/main/java/dev/morling/jfrunit/JfrEventTest.java",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/main/java/dev/morling/jfrunit/JfrEventTest.java?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -21,8 +21,9 @@\n import java.lang.annotation.Target;\n \n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.spockframework.runtime.extension.ExtensionAnnotation;\n \n-\n+@ExtensionAnnotation(JfrEventTestSpockExtension.class)\n @Retention(RetentionPolicy.RUNTIME)\n @ExtendWith(JfrEventTestExtension.class)\n @Target(ElementType.TYPE)"
  },
  {
    "sha": "c9e55107197916955e4e2aad882136daf239f42e",
    "filename": "src/main/java/dev/morling/jfrunit/JfrEventTestSpockExtension.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/main/java/dev/morling/jfrunit/JfrEventTestSpockExtension.java",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/main/java/dev/morling/jfrunit/JfrEventTestSpockExtension.java",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/main/java/dev/morling/jfrunit/JfrEventTestSpockExtension.java?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,79 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit;\n+\n+import org.spockframework.runtime.extension.AbstractAnnotationDrivenExtension;\n+import org.spockframework.runtime.extension.AbstractMethodInterceptor;\n+import org.spockframework.runtime.extension.IMethodInvocation;\n+import org.spockframework.runtime.model.SpecInfo;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public class JfrEventTestSpockExtension extends AbstractAnnotationDrivenExtension<JfrEventTest> {\n+\n+    private static final JfrMethodInterceptor JFR_METHOD_INTERCEPTOR = new JfrMethodInterceptor();\n+\n+    @Override\n+    public void visitSpecAnnotation(JfrEventTest annotation, SpecInfo spec) {\n+        spec.getBottomSpec().getAllFeatures().stream().forEach(featureInfo -> {\n+            featureInfo.getFeatureMethod().addInterceptor(JFR_METHOD_INTERCEPTOR);\n+        });\n+    }\n+\n+    private static class JfrMethodInterceptor extends AbstractMethodInterceptor {\n+\n+        @Override\n+        public void interceptFeatureMethod(IMethodInvocation invocation) throws Throwable {\n+            String enabledConfiguration = getEnabledConfiguration(invocation);\n+            List<EventConfiguration> enabledEvents = getEnabledEvents(invocation);\n+\n+            getJfrEvents(invocation).stream().forEach(jfrEvents -> {\n+                jfrEvents.startRecordingEvents(enabledConfiguration, enabledEvents, invocation.getMethod().getReflection());\n+            });\n+            try {\n+                invocation.proceed();\n+            } finally {\n+                getJfrEvents(invocation).stream().forEach(JfrEvents::stopRecordingEvents);\n+            }\n+        }\n+\n+        private String getEnabledConfiguration(IMethodInvocation invocation) {\n+            return Optional.ofNullable(invocation.getMethod().getAnnotation(EnableConfiguration.class))\n+                    .map(EnableConfiguration::value)\n+                    .map(String::trim)\n+                    .orElse(null);\n+        }\n+\n+        private List<EventConfiguration> getEnabledEvents(IMethodInvocation invocation) {\n+            return Arrays.stream(invocation.getMethod().getReflection().getAnnotationsByType(EnableEvent.class))\n+                    .map(e -> new EventConfiguration(e.value(), e.stackTrace(), e.threshold(), e.period()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        private List<JfrEvents> getJfrEvents(IMethodInvocation invocation) {\n+            return invocation.getSpec().getAllFields().stream()\n+                    .filter(fieldInfo -> JfrEvents.class.isAssignableFrom(fieldInfo.getType()))\n+                    .map(fieldInfo -> (JfrEvents) fieldInfo.readValue(\n+                            fieldInfo.isShared() ? invocation.getSharedInstance() : invocation.getInstance()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "73978515235652e005f3f9977ac529adcc65d2c3",
    "filename": "src/main/java/dev/morling/jfrunit/JfrEvents.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/main/java/dev/morling/jfrunit/JfrEvents.java",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/main/java/dev/morling/jfrunit/JfrEvents.java",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/main/java/dev/morling/jfrunit/JfrEvents.java?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -53,6 +53,7 @@\n     private AtomicLong watermark = new AtomicLong();\n     private RecordingStream stream;\n     private Recording recording;\n+    private boolean capturing;\n \n     public JfrEvents() {\n     }\n@@ -74,6 +75,7 @@ void startRecordingEvents(String configurationName, List<EventConfiguration> ena\n             recording = startRecording(configurationName, allEnabledEventTypes);\n \n             awaitStreamStart(streamStarted);\n+            capturing = true;\n             LOGGER.log(Level.INFO, \"Event stream started\");\n         }\n         catch (Exception e) {\n@@ -85,6 +87,7 @@ void stopRecordingEvents() {\n         try {\n             Path dumpDir = Files.createDirectories(Path.of(testMethod.getDeclaringClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getParent().resolve(\"jfrunit\"));\n             LOGGER.log(Level.INFO, \"Stop recording: \" + dumpDir.resolve(testMethod.getDeclaringClass().getName() + \"-\" + testMethod.getName() + \".jfr\"));\n+            capturing = false;\n             recording.stop();\n             recording.dump(dumpDir.resolve(testMethod.getDeclaringClass().getName() + \"-\" + testMethod.getName() + \".jfr\"));\n             recording.close();\n@@ -122,14 +125,18 @@ public void reset() {\n     }\n \n     public Stream<RecordedEvent> getEvents() {\n-        return events.stream();\n+        return stream();\n     }\n \n     public Stream<RecordedEvent> filter(Predicate<RecordedEvent> predicate) {\n-        return events.stream().filter(predicate);\n+        return stream().filter(predicate);\n     }\n \n     public Stream<RecordedEvent> stream() {\n+        // avoid blocking when called outside of a test such as new JfrEvents().stream()\n+        if (capturing) {\n+            awaitEvents();\n+        }\n         return events.stream();\n     }\n "
  },
  {
    "sha": "4fb87b483cf593ac5dd0279c40f75bee1ac6f837",
    "filename": "src/test/groovy/dev/morling/jfrunit/InheritedSpec.groovy",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/InheritedSpec.groovy",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/InheritedSpec.groovy",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/groovy/dev/morling/jfrunit/InheritedSpec.groovy?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,32 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit\n+\n+import static dev.morling.jfrunit.ExpectedEvent.event\n+import static dev.morling.jfrunit.JfrEventsAssert.assertThat\n+\n+class InheritedSpec extends ParentSpec {\n+\n+    @EnableEvent(\"jdk.GarbageCollection\")\n+    def 'test inherited fields'() {\n+        when:\n+        System.gc()\n+\n+        then:\n+        assertThat(jfrEvents).contains(event(\"jdk.GarbageCollection\"))\n+    }\n+\n+}"
  },
  {
    "sha": "7fbb040411c83340ae9e86cb72ae3c1c2ab27c47",
    "filename": "src/test/groovy/dev/morling/jfrunit/JfrEventsSpec.groovy",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrEventsSpec.groovy",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrEventsSpec.groovy",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/groovy/dev/morling/jfrunit/JfrEventsSpec.groovy?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit\n+\n+import spock.lang.Specification\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n+import java.util.concurrent.TimeUnit\n+\n+class JfrEventsSpec extends Specification {\n+\n+    def 'does not block on stream() when capturing is not running'() {\n+        given:\n+        JfrEvents jfrEvents = new JfrEvents()\n+        CountDownLatch latch = new CountDownLatch(1)\n+\n+        when:\n+        Executors.newFixedThreadPool(1).submit({\n+            jfrEvents.stream()\n+            latch.countDown()\n+        })\n+\n+        then:\n+        latch.await(1, TimeUnit.SECONDS)\n+    }\n+\n+}"
  },
  {
    "sha": "4f3d25d1b8813c2c9b6eca08e65ed86158b2f36e",
    "filename": "src/test/groovy/dev/morling/jfrunit/JfrSpockSharedSpec.groovy",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrSpockSharedSpec.groovy",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrSpockSharedSpec.groovy",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/groovy/dev/morling/jfrunit/JfrSpockSharedSpec.groovy?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,59 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit\n+\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import java.time.Duration\n+\n+import static dev.morling.jfrunit.ExpectedEvent.event\n+import static dev.morling.jfrunit.JfrEventsAssert.assertThat\n+\n+@JfrEventTest\n+class JfrSpockSharedSpec extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temporaryFolder = new TemporaryFolder()\n+\n+    @Shared\n+    JfrEvents jfrEvents = new JfrEvents()\n+\n+    @EnableEvent(value = 'jdk.FileWrite', threshold = 0L)\n+    def 'records written bytes on each iteration'(int iteration) {\n+        given:\n+        long bytesWritten = iteration * 10\n+        byte[] array = new byte[bytesWritten]\n+        new Random().nextBytes(array)\n+        File file = temporaryFolder.newFile()\n+\n+        when:\n+        file << array\n+\n+        then:\n+        jfrEvents.events.filter{ it.eventType.name == 'jdk.FileWrite' }.count() == iteration\n+        JfrEventsAssert.assertThat(jfrEvents).contains(\n+                ExpectedEvent.event('jdk.FileWrite')\n+                        .with('bytesWritten', bytesWritten)\n+                        .with('path', file.absolutePath))\n+\n+        where:\n+        iteration << [1, 2]\n+    }\n+\n+}"
  },
  {
    "sha": "0e81ac2a440665b8f6dd46a1efd1295072a38d68",
    "filename": "src/test/groovy/dev/morling/jfrunit/JfrSpockSpec.groovy",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrSpockSpec.groovy",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrSpockSpec.groovy",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/groovy/dev/morling/jfrunit/JfrSpockSpec.groovy?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,70 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit\n+\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+\n+import java.time.Duration\n+\n+import static dev.morling.jfrunit.ExpectedEvent.event\n+import static dev.morling.jfrunit.JfrEventsAssert.assertThat\n+\n+@JfrEventTest\n+class JfrSpockSpec extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temporaryFolder = new TemporaryFolder()\n+\n+    JfrEvents jfrEvents = new JfrEvents()\n+\n+    @EnableEvent('jdk.GarbageCollection')\n+    @EnableEvent('jdk.ThreadSleep')\n+    def 'should Have GC And Sleep Events'() {\n+        when:\n+        System.gc()\n+        sleep(50)\n+\n+        then:\n+        assertThat(jfrEvents).contains(event('jdk.GarbageCollection'))\n+        assertThat(jfrEvents).contains(\n+                event('jdk.ThreadSleep').with('time', Duration.ofMillis(50)))\n+    }\n+\n+    @EnableEvent(value = 'jdk.FileWrite', threshold = 0L)\n+    def 'should record written bytes on each iteration'(int iteration) {\n+        given:\n+        long bytesWritten = iteration * 10\n+        byte[] array = new byte[bytesWritten]\n+        new Random().nextBytes(array)\n+        File file = temporaryFolder.newFile()\n+\n+        when:\n+        file << array\n+\n+        then:\n+        jfrEvents.events.filter({it.eventType.name == 'jdk.FileWrite' }).count() == 1\n+        JfrEventsAssert.assertThat(jfrEvents).contains(\n+                ExpectedEvent.event('jdk.FileWrite')\n+                        .with('bytesWritten', bytesWritten)\n+                        .with('path', file.absolutePath))\n+\n+        where:\n+        iteration << [1, 2]\n+    }\n+\n+}"
  },
  {
    "sha": "f11668586abb0b0f50087001b25c67335bcf6f0d",
    "filename": "src/test/groovy/dev/morling/jfrunit/JfrSpockStepwiseSharedSpec.groovy",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrSpockStepwiseSharedSpec.groovy",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/JfrSpockStepwiseSharedSpec.groovy",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/groovy/dev/morling/jfrunit/JfrSpockStepwiseSharedSpec.groovy?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit\n+\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Shared\n+import spock.lang.Specification\n+import spock.lang.Stepwise\n+\n+@Stepwise\n+@JfrEventTest\n+class JfrSpockStepwiseSharedSpec extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temporaryFolder = new TemporaryFolder()\n+\n+    @Shared\n+    JfrEvents jfrEvents = new JfrEvents()\n+\n+    @EnableEvent(value = 'jdk.FileWrite', threshold = 0L)\n+    def 'should record of written bytes'() {\n+        given:\n+        long bytesWritten = 10\n+        byte[] array = new byte[bytesWritten]\n+        new Random().nextBytes(array)\n+        File file = temporaryFolder.newFile()\n+\n+        when:\n+        file << array\n+\n+        then:\n+        jfrEvents.events.filter({it.eventType.name == 'jdk.FileWrite' }).count() == 1\n+        checkFileWrite(jfrEvents, bytesWritten, file)\n+    }\n+\n+    @EnableEvent(value = 'jdk.FileWrite', threshold = 0L)\n+    def 'should add record of written bytes'() {\n+        given:\n+        long bytesWritten = 20\n+        byte[] array = new byte[bytesWritten]\n+        new Random().nextBytes(array)\n+        File file = temporaryFolder.newFile()\n+\n+        when:\n+        file << array\n+\n+        then:\n+        jfrEvents.events.filter({it.eventType.name == 'jdk.FileWrite' }).count() == 2\n+        checkFileWrite(jfrEvents, bytesWritten, file)\n+    }\n+\n+    private void checkFileWrite(JfrEvents jfrEvents, long bytesWritten, File file) {\n+        JfrEventsAssert.assertThat(jfrEvents).contains(\n+                ExpectedEvent.event('jdk.FileWrite')\n+                        .with('bytesWritten', bytesWritten)\n+                        .with('path', file.absolutePath))\n+    }\n+\n+}"
  },
  {
    "sha": "1831930c3915a2a705b8b7620e0b34493e3836b1",
    "filename": "src/test/groovy/dev/morling/jfrunit/ParentSpec.groovy",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/ParentSpec.groovy",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/groovy/dev/morling/jfrunit/ParentSpec.groovy",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/groovy/dev/morling/jfrunit/ParentSpec.groovy?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -0,0 +1,26 @@\n+/**\n+ *  Copyright 2020 - 2021 The JfrUnit authors\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package dev.morling.jfrunit\n+\n+import spock.lang.Specification\n+\n+@JfrEventTest\n+abstract class ParentSpec extends Specification {\n+\n+    JfrEvents jfrEvents = new JfrEvents()\n+\n+\n+}"
  },
  {
    "sha": "bd36d8af0ee3fd1dd758dfe51e85c3df051bbaea",
    "filename": "src/test/java/dev/morling/jfrunit/JfrUnitTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/java/dev/morling/jfrunit/JfrUnitTest.java",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/java/dev/morling/jfrunit/JfrUnitTest.java",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/java/dev/morling/jfrunit/JfrUnitTest.java?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -35,15 +35,15 @@\n     @DisplayName(\"Should have Gc and Sleep events recorded when explicitly enabled individually with @EnableEvent\")\n     public void shouldHaveGcAndSleepEvents() throws Exception {\n         System.gc();\n-        Thread.sleep(1000);\n+        Thread.sleep(50);\n \n         jfrEvents.awaitEvents();\n \n         assertThat(jfrEvents).contains(event(\"jdk.GarbageCollection\"));\n         assertThat(jfrEvents).contains(\n                 event(\"jdk.GarbageCollection\").with(\"cause\", \"System.gc()\"));\n         assertThat(jfrEvents).contains(\n-                event(\"jdk.ThreadSleep\").with(\"time\", Duration.ofSeconds(1)));\n+                event(\"jdk.ThreadSleep\").with(\"time\", Duration.ofMillis(50)));\n \n         assertThat(jfrEvents.filter(event(\"jdk.GarbageCollection\"))).hasSize(1);\n     }\n@@ -53,15 +53,15 @@ public void shouldHaveGcAndSleepEvents() throws Exception {\n     @DisplayName(\"Should have Gc and Sleep events recorded when enabled with configuration 'profile'\")\n     public void shouldHaveGcAndSleepEventsWithDefaultConfiguration() throws Exception {\n         System.gc();\n-        Thread.sleep(1000);\n+        Thread.sleep(50);\n \n         jfrEvents.awaitEvents();\n \n         assertThat(jfrEvents).contains(event(\"jdk.GarbageCollection\"));\n         assertThat(jfrEvents).contains(\n                 event(\"jdk.GarbageCollection\").with(\"cause\", \"System.gc()\"));\n         assertThat(jfrEvents).contains(\n-                event(\"jdk.ThreadSleep\").with(\"time\", Duration.ofSeconds(1)));\n+                event(\"jdk.ThreadSleep\").with(\"time\", Duration.ofMillis(50)));\n \n         assertThat(jfrEvents.filter(\n                 event(\"jdk.GarbageCollection\").with(\"cause\", \"System.gc()\")))\n@@ -78,7 +78,7 @@ public void shouldHaveGcAndSleepEventsWithDefaultConfiguration() throws Exceptio\n     @EnableEvent(\"jdk.ThreadSleep\")\n     @DisplayName(\"Should have StackTrace captured for StackTrace-Enabled Events by default with StackTrace policy Default\")\n     public void captureTracesWhenEnabledWithPolicyDefault() throws Exception {\n-        Thread.sleep(1000);\n+        Thread.sleep(50);\n \n         jfrEvents.awaitEvents();\n \n@@ -101,7 +101,7 @@ public void doNotCaptureTracesWhenDisabledWithPolicyDefault() {\n     @EnableEvent(value = \"jdk.ThreadSleep\", stackTrace = EnableEvent.StacktracePolicy.INCLUDED)\n     @DisplayName(\"Should have StackTrace captured irrespective of Event StackTrace Configuration(Enabled) with StackTrace policy Included\")\n     public void captureTraceWhenEnabledWithStackTracePolicyIncluded() throws Exception {\n-        Thread.sleep(1000);\n+        Thread.sleep(50);\n \n         jfrEvents.awaitEvents();\n \n@@ -124,7 +124,7 @@ public void captureTraceWhenDisabledWithStackTracePolicyIncluded() {\n     @EnableEvent(value = \"jdk.ThreadSleep\", stackTrace = EnableEvent.StacktracePolicy.EXCLUDED)\n     @DisplayName(\"Should not have StackTrace captured irrespective of Event StackTrace Configuration(Enabled) with StackTrace policy Excluded\")\n     public void doNotCaptureTraceWhenEnabledWithStackTracePolicyExcluded() throws Exception {\n-        Thread.sleep(1000);\n+        Thread.sleep(50);\n \n         jfrEvents.awaitEvents();\n "
  },
  {
    "sha": "e18fdbf48f8c509e991a4e882cf61701258d94b7",
    "filename": "src/test/java/dev/morling/jfrunit/TestTLABRelated.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/java/dev/morling/jfrunit/TestTLABRelated.java",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/java/dev/morling/jfrunit/TestTLABRelated.java",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/java/dev/morling/jfrunit/TestTLABRelated.java?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -39,7 +39,6 @@\n     @EnableEvent(\"jdk.ObjectAllocationInNewTLAB\")\n     public void testSlowAllocation() throws InterruptedException {\n         System.gc();\n-        Thread.sleep(1000);\n         for (int i = 0; i < 512; ++i) {\n             tmp = new byte[OBJECT_SIZE - BYTE_ARRAY_OVERHEAD];\n         }"
  },
  {
    "sha": "53cba936bb9dbe37393abda2eeb58355b8c2bfa6",
    "filename": "src/test/java/dev/morling/jfrunit/ThreadSleepTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/moditect/jfrunit/blob/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/java/dev/morling/jfrunit/ThreadSleepTest.java",
    "raw_url": "https://github.com/moditect/jfrunit/raw/7ec2611baec2a90358fe62c07493f62da90fa8d6/src/test/java/dev/morling/jfrunit/ThreadSleepTest.java",
    "contents_url": "https://api.github.com/repos/moditect/jfrunit/contents/src/test/java/dev/morling/jfrunit/ThreadSleepTest.java?ref=7ec2611baec2a90358fe62c07493f62da90fa8d6",
    "patch": "@@ -63,10 +63,10 @@ public void testWithoutStackTrace() throws Exception {\n \n \n     @Test\n-    @EnableEvent(value = \"jdk.ThreadSleep\", threshold = 500)\n+    @EnableEvent(value = \"jdk.ThreadSleep\", threshold = 100)\n     public void testWithThreshold() throws Exception {\n         Thread.sleep(10);\n-        Thread.sleep(1000);\n+        Thread.sleep(200);\n \n         jfrEvents.awaitEvents();\n "
  }
]
