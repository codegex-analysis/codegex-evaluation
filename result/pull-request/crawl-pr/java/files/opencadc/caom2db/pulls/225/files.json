[
  {
    "sha": "cfd9e5cdbdb197cb770245673c33e8ad55f4a41f",
    "filename": "caom2-artifact-sync/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/build.gradle",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/build.gradle",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/build.gradle?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -11,11 +11,11 @@ repositories {\n     jcenter()\n }\n \n-sourceCompatibility = 1.7\n+sourceCompatibility = 1.8\n \n group = 'org.opencadc'\n \n-version = '2.4.2'\n+version = '2.4.5'\n \n dependencies {\n     compile 'log4j:log4j:1.2.17'"
  },
  {
    "sha": "c641e1a04823c0d6104ecb6435db0ed9604291ce",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactHarvester.java",
    "status": "modified",
    "additions": 16,
    "deletions": 17,
    "changes": 33,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactHarvester.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactHarvester.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactHarvester.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -3,7 +3,7 @@\n  *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n  **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n  *\n- *  (c) 2019.                            (c) 2019.\n+ *  (c) 2021.                            (c) 2021.\n  *  Government of Canada                 Gouvernement du Canada\n  *  National Research Council            Conseil national de recherches\n  *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n@@ -237,7 +237,6 @@ private Boolean runIt() throws Exception {\n                                 } else {\n                                     logStart(format(state.curID), artifact);\n                                     boolean success = true;\n-                                    boolean addToSkip = false;\n                                     boolean added = false;\n                                     String message = null;\n                                     this.caomChecksum = getMD5Sum(artifact.contentChecksum);\n@@ -277,32 +276,32 @@ private Boolean runIt() throws Exception {\n                                         if ((StoragePolicy.PUBLIC_ONLY == storagePolicy \n                                                 && this.errorMessage == ArtifactHarvester.PROPRIETARY) || !correctCopy) {\n                                             HarvestSkipURI skip = harvestSkipURIDAO.get(source, STATE_CLASS, artifact.getURI());\n+                                            boolean addToSkip = false;\n                                             if (skip == null) {\n                                                 // not in skip table, add it\n                                                 skip = new HarvestSkipURI(source, STATE_CLASS, artifact.getURI(), releaseDate, this.errorMessage);\n                                                 addToSkip = true;\n                                             } else {\n-                                                if (this.errorMessage == ArtifactHarvester.PROPRIETARY) {\n-                                                    // artifact is private, update skip table\n-                                                    message = this.errorMessage \n-                                                            + \" artifact already exists in skip table, update tryAfter date to relese date.\";\n-                                                    skip.setTryAfter(releaseDate);\n-                                                    skip.errorMessage = this.errorMessage;\n-                                                    addToSkip = true;\n-                                                } else {\n-                                                    String msg = \"artifact already exists in skip table.\";;\n-                                                    if (this.reason.equalsIgnoreCase(\"None\")) {\n-                                                        this.reason = \"Public \" + msg;\n-                                                    } else {\n-                                                        this.reason = this.reason + \" and public \" + msg;\n-                                                    }\n-                                                }\n+                                                addToSkip = Util.addToSkipTable(source, STATE_CLASS, artifact.getURI(), this.errorMessage, skip, releaseDate); \n                                             }\n \n                                             if (addToSkip) {\n                                                 this.harvestSkipURIDAO.put(skip);\n                                                 this.downloadCount++;\n                                                 added = true;\n+                                                if (skip != null) {\n+                                                    if (this.errorMessage == ArtifactHarvester.PROPRIETARY) {\n+                                                        message = this.errorMessage \n+                                                            + \" artifact already exists in skip table, update tryAfter date to relese date.\";\n+                                                    } else {\n+                                                        String msg = \"artifact already exists in skip table.\";;\n+                                                        if (this.reason.equalsIgnoreCase(\"None\")) {\n+                                                            this.reason = \"Public \" + msg;\n+                                                        } else {\n+                                                            this.reason = this.reason + \" and public \" + msg;\n+                                                        }\n+                                                    }\n+                                                }\n                                             }\n                                         }\n                                     } catch (Exception ex) {"
  },
  {
    "sha": "48d7bd198354136fb414c1c121c911dfec45d053",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactValidator.java",
    "status": "modified",
    "additions": 40,
    "deletions": 19,
    "changes": 59,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactValidator.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactValidator.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/ArtifactValidator.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -3,7 +3,7 @@\n *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n *\n-*  (c) 2019.                            (c) 2019.\n+*  (c) 2021.                            (c) 2021.\n *  Government of Canada                 Gouvernement du Canada\n *  National Research Council            Conseil national de recherches\n *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n@@ -132,6 +132,7 @@\n     private boolean supportSkipURITable = false;\n     private boolean tolerateNullChecksum = false;\n     private boolean tolerateNullContentLength = false;\n+    private String prefix = null;\n         \n     private ExecutorService executor;\n     \n@@ -174,7 +175,7 @@ public Object run() throws Exception {\n         executor = Executors.newFixedThreadPool(2);\n         final Future<TreeSet<ArtifactMetadata>> logicalQuery = executor.submit(new Callable<TreeSet<ArtifactMetadata>>() {\n             public TreeSet<ArtifactMetadata> call() throws Exception {\n-                return getLogicalMetadata();\n+                return getLogicalMetadata(null);\n             }\n         });\n         log.info(\"Submitted query to caom2\");\n@@ -190,11 +191,12 @@ public Object run() throws Exception {\n         executor.shutdownNow();\n         \n         TreeSet<ArtifactMetadata> logicalMetadata = logicalQuery.get();\n-        log.info(\"number of artifacts in CAOM2: \" + logicalMetadata.size());\n+        log.info(\"number of artifacts in caom2: \" + logicalMetadata.size());\n         TreeSet<ArtifactMetadata> physicalMetadata = physicalQuery.get();\n         log.info(\"number of artifacts in storage: \" + physicalMetadata.size());\n+\n         if (logicalMetadata.isEmpty() || physicalMetadata.isEmpty()) {\n-            log.error(\"Number of artifacts in CAOM2 or in storage cannot be zero.\");\n+            log.error(\"Number of artifacts in caom2 or in storage cannot be zero.\");\n         } else {\n             compareMetadata(logicalMetadata, physicalMetadata, start);\n         }\n@@ -457,13 +459,19 @@ private boolean checkAddToSkipTable(ArtifactMetadata metadata, String errorMessa\n             Artifact artifact = new Artifact(metadata.getArtifactURI(), metadata.productType, metadata.releaseType);\n             Date releaseDate = AccessUtil.getReleaseDate(artifact, metadata.metaRelease, metadata.dataRelease);\n             HarvestSkipURI skip = harvestSkipURIDAO.get(source, STATE_CLASS, metadata.getArtifactURI());\n-            if (skip == null && releaseDate != null) {\n-                if (!reportOnly) {\n+            if (releaseDate != null && !reportOnly) {\n+                boolean addToSkip = false;\n+                if (skip == null) {\n+                    // not in skip table, add it\n                     skip = new HarvestSkipURI(source, STATE_CLASS, metadata.getArtifactURI(), releaseDate, errorMessage);\n+                    addToSkip = true;\n+                } else {\n+                    addToSkip = Util.addToSkipTable(source, STATE_CLASS, metadata.getArtifactURI(), errorMessage, skip, releaseDate); \n+                }\n+\n+                if (addToSkip) {\n                     harvestSkipURIDAO.put(skip);\n-                    \n-                    // validate \n-                    String errorMessageString = (errorMessage == null) ? \"null\" : errorMessage;\n+                    String errorMessageString = (errorMessage == null) ? \"null\" : skip.errorMessage;\n                     logJSON(new String[]\n                         {\"logType\", \"detail\",\n                          \"action\", \"addedToSkipTable\",\n@@ -472,26 +480,27 @@ private boolean checkAddToSkipTable(ArtifactMetadata metadata, String errorMessa\n                          \"caomChecksum\", metadata.getChecksum(),\n                          \"errorMessage\", errorMessageString},\n                         true);\n+                    return true;\n                 }\n-                return true;\n             }\n-            return false;\n         }\n-        \n+\n         return false;\n     }\n     \n-    private TreeSet<ArtifactMetadata> getLogicalMetadata() throws Exception {\n+    private TreeSet<ArtifactMetadata> getLogicalMetadata(Integer batchSize) throws Exception {\n         TreeSet<ArtifactMetadata> result = new TreeSet<>(ArtifactMetadata.getComparator());\n         if (StringUtil.hasText(source)) {\n             // use database <server.database.schema>\n             // HarvestSkipURI table is not supported in 'diff' mode, i.e. reportOnly = true\n             this.supportSkipURITable = !reportOnly;\n             long t1 = System.currentTimeMillis();\n-            List<ObservationState> states = observationDAO.getObservationList(collection, null, null, null);\n+            List<ObservationState> states = observationDAO.getObservationList(collection, null, null, batchSize);\n             long t2 = System.currentTimeMillis();\n             long dt = t2 - t1;\n-            log.info(\"get-state-list: size=\" + states.size() + \" in \" + dt + \" ms\");\n+            if (batchSize == null) {\n+                log.info(\"get-state-list: size=\" + states.size() + \" in \" + dt + \" ms\");\n+            }\n             \n             int depth = 3;\n             ListIterator<ObservationState> iter = states.listIterator();\n@@ -514,7 +523,10 @@ private boolean checkAddToSkipTable(ArtifactMetadata metadata, String errorMessa\n                 }\n             }\n             \n-            log.info(\"Finished logical metadata query in \" + (System.currentTimeMillis() - t1) + \" ms\");\n+            if (batchSize == null) {\n+                // log only when we query all artifacts of a collection\n+                log.info(\"Finished logical metadata query in \" + (System.currentTimeMillis() - t1) + \" ms\");\n+            }\n         } else {\n             this.supportSkipURITable = false;\n             if (caomTapResourceID != null) {\n@@ -532,7 +544,12 @@ private boolean checkAddToSkipTable(ArtifactMetadata metadata, String errorMessa\n             }\n             \n             // source is a TAP service URL or a TAP resource ID\n-            String adql = \"select distinct(a.uri), a.contentChecksum, a.contentLength, a.contentType, o.observationID, \"\n+            String uriSelect = \"distinct(a.uri)\";\n+            if (batchSize == 1) {\n+                uriSelect = \"top 1 a.uri\";\n+            }\n+\n+            String adql = \"select \" + uriSelect + \", a.contentChecksum, a.contentLength, a.contentType, o.observationID, \"\n                     + \"a.productType, a.releaseType, p.dataRelease, p.metaRelease \"\n                     + \"from caom2.Artifact a \"\n                     + \"join caom2.Plane p on a.planeID = p.planeID \"\n@@ -542,7 +559,10 @@ private boolean checkAddToSkipTable(ArtifactMetadata metadata, String errorMessa\n             log.debug(\"logical query: \" + adql);\n             long start = System.currentTimeMillis();\n             result = query(caomTapURL, adql);\n-            log.info(\"Finished logical metadata query in \" + (System.currentTimeMillis() - start) + \" ms\");\n+            if (batchSize != 1) {\n+                // log only when we query all artifacts of a collection\n+                log.info(\"Finished caom2 query in \" + (System.currentTimeMillis() - start) + \" ms\");\n+            }\n         }\n         return result;\n     }\n@@ -610,7 +630,8 @@ private String getStorageChecksum(String checksum) throws Exception {\n         TreeSet<ArtifactMetadata> metadata = new TreeSet<ArtifactMetadata>(ArtifactMetadata.getComparator());\n         long t1 = System.currentTimeMillis();\n         metadata.addAll(artifactStore.list(collection));\n-        log.info(\"Finished physical metadata query in \" + (System.currentTimeMillis() - t1) + \" ms\");\n+\n+        log.info(\"Finished storage query in \" + (System.currentTimeMillis() - t1) + \" ms\");\n         return metadata;\n     }\n }"
  },
  {
    "sha": "141f08505c678537cf6b03794becd7aa2f85970b",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Discover.java",
    "status": "modified",
    "additions": 14,
    "deletions": 2,
    "changes": 16,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Discover.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Discover.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Discover.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -3,7 +3,7 @@\n *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n *\n-*  (c) 2018.                            (c) 2018.\n+*  (c) 2021.                            (c) 2021.\n *  Government of Canada                 Gouvernement du Canada\n *  National Research Council            Conseil national de recherches\n *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n@@ -133,6 +133,16 @@ public Discover(ArgumentMap am) {\n                         \n                         boolean tolerateNullChecksum = am.isSet(\"tolerateNullChecksum\");\n     \n+                        Integer downloadThreshold = null;\n+                        if (am.isSet(\"downloadThreshold\")) {\n+                            try {\n+                                downloadThreshold = Integer.parseInt(am.getValue(\"downloadThreshold\"));\n+                            } catch (NumberFormatException e) {\n+                                String msg = \"Illegal value for --downloadThreshold: \" + am.getValue(\"downloadThreshold\");\n+                                this.printErrorUsage(msg);\n+                            }\n+                        }\n+                        \n                         int nthreads = 1;\n                         if (am.isSet(\"threads\")) {\n                             try {\n@@ -152,7 +162,8 @@ public Discover(ArgumentMap am) {\n                             artifactDAO.setConfig(daoConfig);\n     \n                             this.downloader = new DownloadArtifactFiles(\n-                                artifactDAO, harvestResource, artifactStore, nthreads, this.batchSize, this.loop, retryAfterHours, tolerateNullChecksum);\n+                                artifactDAO, harvestResource, artifactStore, nthreads, this.batchSize, this.loop, \n+                                retryAfterHours, tolerateNullChecksum, downloadThreshold);\n                             List<ShutdownListener> listeners = new ArrayList<ShutdownListener>(2);\n                             listeners.add(downloader);\n                             Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownHook(listeners)));\n@@ -184,6 +195,7 @@ public void printUsage() {\n             sb.append(\"\\n        --batchsize=<integer> Max skip URIs to download (default: 1000)\");\n             sb.append(\"\\n        --retryAfter=<integer> Hours after failed downloads should be retried (default: 24)\");\n             sb.append(\"\\n        --tolerateNullChecksum : Download even when checksum is null\");\n+            sb.append(\"\\n        --downloadThreshold : Artifact count which triggers download to stop at the current batch\");\n         } else {\n             sb.append(\"\\n        --batchsize=<integer> Max observations to check (default: 1000)\");\n         }"
  },
  {
    "sha": "9cbfe95b84c639b7d9f961bacc913430fc222ee2",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/DownloadArtifactFiles.java",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/DownloadArtifactFiles.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/DownloadArtifactFiles.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/DownloadArtifactFiles.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -3,7 +3,8 @@\n  *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n  **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n  *\n- *  (c) 2017.                            (c) 2017.\n+ *  (c) 2021.                            (c) 2021.\n+ *  \n  *  Government of Canada                 Gouvernement du Canada\n  *  National Research Council            Conseil national de recherches\n  *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n@@ -112,6 +113,7 @@\n     private static final Logger log = Logger.getLogger(DownloadArtifactFiles.class);\n \n     private static final int DEFAULT_RETRY_AFTER_ERROR_HOURS = 24;\n+    private static final int DEFAULT_ARTIFACT_DOWNLOAD_THRESHOLD = 10000;\n \n     private ArtifactStore artifactStore;\n     private HarvestSkipURIDAO harvestSkipURIDAO;\n@@ -121,6 +123,7 @@\n     private boolean loop;\n     private int threads;\n     private boolean tolerateNullChecksum;\n+    private Integer artifactDownloadThreshold;\n     private Date startDate = null;\n     private Date stopDate;\n     private int retryAfterHours;\n@@ -132,7 +135,7 @@\n     long start;\n \n     public DownloadArtifactFiles(ArtifactDAO artifactDAO, HarvestResource harvestResource, ArtifactStore artifactStore,\n-            int threads, int batchSize, boolean loop, Integer retryAfterHours, boolean tolerateNullChecksum) {\n+            int threads, int batchSize, boolean loop, Integer retryAfterHours, boolean tolerateNullChecksum, Integer downloadThreshold) {\n         this.artifactStore = artifactStore;\n \n         this.artifactDAO = artifactDAO;\n@@ -143,6 +146,11 @@ public DownloadArtifactFiles(ArtifactDAO artifactDAO, HarvestResource harvestRes\n         this.batchSize = batchSize;\n         this.loop = loop;\n         this.tolerateNullChecksum = tolerateNullChecksum;\n+        this.artifactDownloadThreshold = downloadThreshold;\n+        if (downloadThreshold == null) {\n+            this.artifactDownloadThreshold = DEFAULT_ARTIFACT_DOWNLOAD_THRESHOLD;\n+        }\n+\n         this.stopDate = new Date();\n         if (retryAfterHours == null) {\n             retryAfterHours = DEFAULT_RETRY_AFTER_ERROR_HOURS;\n@@ -161,6 +169,7 @@ public NullType run() throws Exception {\n         boolean moreArtifacts = true;\n         \n         // get all artifacts for this run and submit the results asynchronously\n+        int artifactCount = 0;\n         start = System.currentTimeMillis();\n         while (moreArtifacts) {\n             log.debug(\"Querying for skip records between \" + startDate + \" and \" + stopDate);\n@@ -170,7 +179,8 @@ public NullType run() throws Exception {\n                 results.add(executor.submit(downloader));\n             }\n             \n-            if ((artifacts.size() < batchSize) || (!loop)) {\n+            artifactCount = artifactCount + artifacts.size();\n+            if ((artifacts.size() < batchSize) || (!loop) || (artifactCount >= artifactDownloadThreshold)) {\n                 moreArtifacts = false;\n             } else {\n                 // set the start date so that the next batch resumes after our last record\n@@ -425,7 +435,6 @@ public void read(InputStream inputStream) throws IOException {\n                 threadLog.debug(\"[\" + threadName + \"] Completed upload of \" + artifactURI);\n             } catch (Throwable t) {\n                 uploadSuccess = false;\n-                threadLog.error(\"[\" + threadName + \"] Failed to upload \" + artifactURI, t);\n                 uploadErrorMessage = \"Upload error: \" + t.getMessage();\n             } finally {\n                 bytesTransferred = byteCounter.getByteCount();"
  },
  {
    "sha": "c775227a914eb9d4d583b4518d22d05b117fb7b4",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Main.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Main.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Main.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Main.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -3,7 +3,7 @@\n *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n *\n-*  (c) 2018.                            (c) 2018.\n+*  (c) 2021.                            (c) 2021.\n *  Government of Canada                 Gouvernement du Canada\n *  National Research Council            Conseil national de recherches\n *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6"
  },
  {
    "sha": "4a375d55161a18920a44bd14608269fc2c05a48d",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Util.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Util.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Util.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Util.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -0,0 +1,127 @@\n+/*\n+************************************************************************\n+*******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n+**************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n+*\n+*  (c) 2021.                            (c) 2021.\n+*  Government of Canada                 Gouvernement du Canada\n+*  National Research Council            Conseil national de recherches\n+*  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n+*  All rights reserved                  Tous droits réservés\n+*                                       \n+*  NRC disclaims any warranties,        Le CNRC dénie toute garantie\n+*  expressed, implied, or               énoncée, implicite ou légale,\n+*  statutory, of any kind with          de quelque nature que ce\n+*  respect to the software,             soit, concernant le logiciel,\n+*  including without limitation         y compris sans restriction\n+*  any warranty of merchantability      toute garantie de valeur\n+*  or fitness for a particular          marchande ou de pertinence\n+*  purpose. NRC shall not be            pour un usage particulier.\n+*  liable in any event for any          Le CNRC ne pourra en aucun cas\n+*  damages, whether direct or           être tenu responsable de tout\n+*  indirect, special or general,        dommage, direct ou indirect,\n+*  consequential or incidental,         particulier ou général,\n+*  arising from the use of the          accessoire ou fortuit, résultant\n+*  software.  Neither the name          de l'utilisation du logiciel. Ni\n+*  of the National Research             le nom du Conseil National de\n+*  Council of Canada nor the            Recherches du Canada ni les noms\n+*  names of its contributors may        de ses  participants ne peuvent\n+*  be used to endorse or promote        être utilisés pour approuver ou\n+*  products derived from this           promouvoir les produits dérivés\n+*  software without specific prior      de ce logiciel sans autorisation\n+*  written permission.                  préalable et particulière\n+*                                       par écrit.\n+*                                       \n+*  This file is part of the             Ce fichier fait partie du projet\n+*  OpenCADC project.                    OpenCADC.\n+*                                       \n+*  OpenCADC is free software:           OpenCADC est un logiciel libre ;\n+*  you can redistribute it and/or       vous pouvez le redistribuer ou le\n+*  modify it under the terms of         modifier suivant les termes de\n+*  the GNU Affero General Public        la “GNU Affero General Public\n+*  License as published by the          License” telle que publiée\n+*  Free Software Foundation,            par la Free Software Foundation\n+*  either version 3 of the              : soit la version 3 de cette\n+*  License, or (at your option)         licence, soit (à votre gré)\n+*  any later version.                   toute version ultérieure.\n+*                                       \n+*  OpenCADC is distributed in the       OpenCADC est distribué\n+*  hope that it will be useful,         dans l’espoir qu’il vous\n+*  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE\n+*  without even the implied             GARANTIE : sans même la garantie\n+*  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ\n+*  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF\n+*  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence\n+*  General Public License for           Générale Publique GNU Affero\n+*  more details.                        pour plus de détails.\n+*                                       \n+*  You should have received             Vous devriez avoir reçu une\n+*  a copy of the GNU Affero             copie de la Licence Générale\n+*  General Public License along         Publique GNU Affero avec\n+*  with OpenCADC.  If not, see          OpenCADC ; si ce n’est\n+*  <http://www.gnu.org/licenses/>.      pas le cas, consultez :\n+*                                       <http://www.gnu.org/licenses/>.\n+*\n+*  $Revision: 4 $\n+*\n+************************************************************************\n+*/\n+\n+package ca.nrc.cadc.caom2.artifactsync;\n+\n+import ca.nrc.cadc.caom2.harvester.state.HarvestSkipURI;\n+import ca.nrc.cadc.util.StringUtil;\n+\n+import java.net.URI;\n+import java.util.Date;\n+\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * A utility to check if the skip table needs to be updated\n+ *\n+ * @author yeunga\n+ */\n+public class Util {\n+    private static final Logger log = Logger.getLogger(Util.class);\n+\n+    private Util() {\n+    }\n+\n+    public static boolean addToSkipTable(String source, String stateClassName, URI artifactURI, \n+            String errorMessage, HarvestSkipURI skip, Date releaseDate) {\n+        boolean addToSkip = false;\n+        \n+        if (skip == null) {\n+            // not in skip table, add it\n+            addToSkip = true;\n+        } else {\n+            // in skip table, update entry if necessary\n+            if (errorMessage == ArtifactHarvester.PROPRIETARY) {\n+                // artifact is private\n+                if (!skip.getTryAfter().equals(releaseDate)) {\n+                    // release date has changed, update skip table\n+                    skip.setTryAfter(releaseDate);\n+                    skip.errorMessage = errorMessage;\n+                    addToSkip = true;\n+                }\n+            } else {\n+                if (StringUtil.hasText(skip.errorMessage) && skip.errorMessage.equals(ArtifactHarvester.PROPRIETARY)) {\n+                    // artifact moved from proprietary to non-proprietary\n+                    skip.setTryAfter(releaseDate);\n+                    skip.errorMessage = null;\n+                    addToSkip = true;\n+                } else {\n+                    // retain skip.errorMessage\n+                    // update skip entry if release date has changed\n+                    if (!skip.getTryAfter().equals(releaseDate)) {\n+                        skip.setTryAfter(releaseDate);\n+                        addToSkip = true;\n+                    }\n+                }\n+            }\n+        }\n+        \n+        return addToSkip;\n+    }\n+}"
  },
  {
    "sha": "89bd80aa83e8346ccbcb24219235a19f1c5b9fad",
    "filename": "caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Validate.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/opencadc/caom2db/blob/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Validate.java",
    "raw_url": "https://github.com/opencadc/caom2db/raw/495dcb71aec8ed1d5e8d207b295b06357aff1725/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Validate.java",
    "contents_url": "https://api.github.com/repos/opencadc/caom2db/contents/caom2-artifact-sync/src/main/java/ca/nrc/cadc/caom2/artifactsync/Validate.java?ref=495dcb71aec8ed1d5e8d207b295b06357aff1725",
    "patch": "@@ -71,6 +71,7 @@\n \n import ca.nrc.cadc.caom2.persistence.ObservationDAO;\n import ca.nrc.cadc.util.ArgumentMap;\n+import ca.nrc.cadc.util.StringUtil;\n \n import java.net.MalformedURLException;\n import java.net.URI;\n@@ -192,6 +193,7 @@ private ArtifactValidator getValidator(String source, boolean tolerateNullChecks\n             \n             validator = new ArtifactValidator(observationDAO.getDataSource(),\n                 this.harvestResource, observationDAO, true, this.artifactStore, tolerateNullChecksum, tolerateNullContentLength);\n+            \n         }\n         \n         return validator;"
  }
]
