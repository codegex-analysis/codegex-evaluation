[
  {
    "sha": "fabe7e355608931674af3748d8ac43dd6bbbd825",
    "filename": ".github/workflows/gradle.yml",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/.github/workflows/gradle.yml",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/.github/workflows/gradle.yml",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/.github/workflows/gradle.yml?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -1,6 +1,7 @@\n name: Java CI\n \n-on: \n+on:\n+  push:\n   pull_request:\n     types: [opened, synchronize, reopened]\n \n@@ -31,6 +32,16 @@ jobs:\n       \n     - name: build and test cadc-soda-server\n       run: cd cadc-soda-server && gradle --info clean build javadoc checkstyleMain install\n-      \n+\n+  build-dadc-data-ops-fits:\n+    runs-on: ubuntu-latest\n+    \n+    container:\n+      image: opencadc/cadc-wcs:7\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+# cadc-data-ops-fits relies on wcslib to be installed locally, so run in a separate image.\n     - name: build and test cadc-data-ops-fits\n       run: cd cadc-data-ops-fits && gradle --info clean build javadoc checkstyleMain install"
  },
  {
    "sha": "f2109ec9d2a0ab70eff2ab40f645d8f316a1d2b6",
    "filename": "cadc-data-ops-fits/build.gradle",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/build.gradle",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/build.gradle",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/build.gradle?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -19,6 +19,11 @@ sourceCompatibility = 1.8\n group = 'org.opencadc'\n version = '0.1.2'\n \n+// To allow for french extended ASCII characters in file javadoc.\n+javadoc {\n+    options.encoding = 'UTF-8'\n+}\n+\n dependencies {\n     compile 'log4j:log4j:[1.2.0,)'\n     compile 'org.opencadc:cadc-util:[1.2,2.0)'"
  },
  {
    "sha": "bd316516310fddbbeca2e15579ab97b10b55bf5a",
    "filename": "cadc-data-ops-fits/src/main/java/org/opencadc/fits/CADCExt.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/CADCExt.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/CADCExt.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/main/java/org/opencadc/fits/CADCExt.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -0,0 +1,138 @@\n+/*\n+ ************************************************************************\n+ *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n+ **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n+ *\n+ *  (c) 2021.                            (c) 2021.\n+ *  Government of Canada                 Gouvernement du Canada\n+ *  National Research Council            Conseil national de recherches\n+ *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n+ *  All rights reserved                  Tous droits réservés\n+ *\n+ *  NRC disclaims any warranties,        Le CNRC dénie toute garantie\n+ *  expressed, implied, or               énoncée, implicite ou légale,\n+ *  statutory, of any kind with          de quelque nature que ce\n+ *  respect to the software,             soit, concernant le logiciel,\n+ *  including without limitation         y compris sans restriction\n+ *  any warranty of merchantability      toute garantie de valeur\n+ *  or fitness for a particular          marchande ou de pertinence\n+ *  purpose. NRC shall not be            pour un usage particulier.\n+ *  liable in any event for any          Le CNRC ne pourra en aucun cas\n+ *  damages, whether direct or           être tenu responsable de tout\n+ *  indirect, special or general,        dommage, direct ou indirect,\n+ *  consequential or incidental,         particulier ou général,\n+ *  arising from the use of the          accessoire ou fortuit, résultant\n+ *  software.  Neither the name          de l'utilisation du logiciel. Ni\n+ *  of the National Research             le nom du Conseil National de\n+ *  Council of Canada nor the            Recherches du Canada ni les noms\n+ *  names of its contributors may        de ses  participants ne peuvent\n+ *  be used to endorse or promote        être utilisés pour approuver ou\n+ *  products derived from this           promouvoir les produits dérivés\n+ *  software without specific prior      de ce logiciel sans autorisation\n+ *  written permission.                  préalable et particulière\n+ *                                       par écrit.\n+ *\n+ *  This file is part of the             Ce fichier fait partie du projet\n+ *  OpenCADC project.                    OpenCADC.\n+ *\n+ *  OpenCADC is free software:           OpenCADC est un logiciel libre ;\n+ *  you can redistribute it and/or       vous pouvez le redistribuer ou le\n+ *  modify it under the terms of         modifier suivant les termes de\n+ *  the GNU Affero General Public        la “GNU Affero General Public\n+ *  License as published by the          License” telle que publiée\n+ *  Free Software Foundation,            par la Free Software Foundation\n+ *  either version 3 of the              : soit la version 3 de cette\n+ *  License, or (at your option)         licence, soit (à votre gré)\n+ *  any later version.                   toute version ultérieure.\n+ *\n+ *  OpenCADC is distributed in the       OpenCADC est distribué\n+ *  hope that it will be useful,         dans l’espoir qu’il vous\n+ *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE\n+ *  without even the implied             GARANTIE : sans même la garantie\n+ *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ\n+ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF\n+ *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence\n+ *  General Public License for           Générale Publique GNU Affero\n+ *  more details.                        pour plus de détails.\n+ *\n+ *  You should have received             Vous devriez avoir reçu une\n+ *  a copy of the GNU Affero             copie de la Licence Générale\n+ *  General Public License along         Publique GNU Affero avec\n+ *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est\n+ *  <http://www.gnu.org/licenses/>.      pas le cas, consultez :\n+ *                                       <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ ************************************************************************\n+ */\n+\n+package org.opencadc.fits;\n+\n+import nom.tam.fits.header.FitsHeaderImpl;\n+import nom.tam.fits.header.IFitsHeader;\n+\n+/**\n+ * Extension to the standard set of FITS headers.\n+ */\n+public enum CADCExt implements IFitsHeader {\n+\n+    CDELT(HDU.IMAGE, VALUE.REAL, \"Coord value at incr deg/pixel origin on line axis\"),\n+    CDELTn(HDU.IMAGE, VALUE.REAL, \"Coord value at incr deg/pixel origin on line axis\"),\n+    CUNITn(HDU.IMAGE, VALUE.STRING, \"Units for axis\"),\n+    LBOUNDn(HDU.IMAGE, VALUE.INTEGER, \"Pixel origin along axis\"),\n+    PC1_1(HDU.IMAGE, VALUE.REAL, \"\"),\n+    PC1_2(HDU.IMAGE, VALUE.REAL, \"\"),\n+    PC2_1(HDU.IMAGE, VALUE.REAL, \"\"),\n+    PC2_2(HDU.IMAGE, VALUE.REAL, \"\"),\n+    RESTFRQ(HDU.IMAGE, VALUE.REAL, \"\"),\n+\n+    /**\n+     * Use RESTFRQ\n+     */\n+    @Deprecated\n+    RESTFREQ(HDU.IMAGE, VALUE.REAL, \"\"),\n+\n+    RESTWAV(HDU.IMAGE, VALUE.REAL, \"\"),\n+    SPECSYS(HDU.IMAGE, VALUE.STRING, \"\");\n+\n+    private final IFitsHeader key;\n+\n+    CADCExt(IFitsHeader.HDU hdu, IFitsHeader.VALUE valueType, String comment) {\n+        this.key = new FitsHeaderImpl(name(), IFitsHeader.SOURCE.NOAO, hdu, valueType, comment);\n+    }\n+\n+    CADCExt(String key, IFitsHeader.HDU hdu, IFitsHeader.VALUE valueType, String comment) {\n+        this.key = new FitsHeaderImpl(name(), IFitsHeader.SOURCE.NOAO, hdu, valueType, comment);\n+    }\n+\n+    @Override\n+    public String comment() {\n+        return this.key.comment();\n+    }\n+\n+    @Override\n+    public IFitsHeader.HDU hdu() {\n+        return this.key.hdu();\n+    }\n+\n+    @Override\n+    public String key() {\n+        return this.key.key();\n+    }\n+\n+    @Override\n+    public IFitsHeader n(int... number) {\n+        return this.key.n(number);\n+    }\n+\n+    @Override\n+    public IFitsHeader.SOURCE status() {\n+        return this.key.status();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"CPD-END\")\n+    public IFitsHeader.VALUE valueType() {\n+        return this.key.valueType();\n+    }\n+}"
  },
  {
    "sha": "cce945a9676b23d07661e0221894efc71355e4ad",
    "filename": "cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordType.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordType.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordType.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordType.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -0,0 +1,76 @@\n+/*\n+ ************************************************************************\n+ *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n+ **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n+ *\n+ *  (c) 2021.                            (c) 2021.\n+ *  Government of Canada                 Gouvernement du Canada\n+ *  National Research Council            Conseil national de recherches\n+ *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n+ *  All rights reserved                  Tous droits réservés\n+ *\n+ *  NRC disclaims any warranties,        Le CNRC dénie toute garantie\n+ *  expressed, implied, or               énoncée, implicite ou légale,\n+ *  statutory, of any kind with          de quelque nature que ce\n+ *  respect to the software,             soit, concernant le logiciel,\n+ *  including without limitation         y compris sans restriction\n+ *  any warranty of merchantability      toute garantie de valeur\n+ *  or fitness for a particular          marchande ou de pertinence\n+ *  purpose. NRC shall not be            pour un usage particulier.\n+ *  liable in any event for any          Le CNRC ne pourra en aucun cas\n+ *  damages, whether direct or           être tenu responsable de tout\n+ *  indirect, special or general,        dommage, direct ou indirect,\n+ *  consequential or incidental,         particulier ou général,\n+ *  arising from the use of the          accessoire ou fortuit, résultant\n+ *  software.  Neither the name          de l'utilisation du logiciel. Ni\n+ *  of the National Research             le nom du Conseil National de\n+ *  Council of Canada nor the            Recherches du Canada ni les noms\n+ *  names of its contributors may        de ses  participants ne peuvent\n+ *  be used to endorse or promote        être utilisés pour approuver ou\n+ *  products derived from this           promouvoir les produits dérivés\n+ *  software without specific prior      de ce logiciel sans autorisation\n+ *  written permission.                  préalable et particulière\n+ *                                       par écrit.\n+ *\n+ *  This file is part of the             Ce fichier fait partie du projet\n+ *  OpenCADC project.                    OpenCADC.\n+ *\n+ *  OpenCADC is free software:           OpenCADC est un logiciel libre ;\n+ *  you can redistribute it and/or       vous pouvez le redistribuer ou le\n+ *  modify it under the terms of         modifier suivant les termes de\n+ *  the GNU Affero General Public        la “GNU Affero General Public\n+ *  License as published by the          License” telle que publiée\n+ *  Free Software Foundation,            par la Free Software Foundation\n+ *  either version 3 of the              : soit la version 3 de cette\n+ *  License, or (at your option)         licence, soit (à votre gré)\n+ *  any later version.                   toute version ultérieure.\n+ *\n+ *  OpenCADC is distributed in the       OpenCADC est distribué\n+ *  hope that it will be useful,         dans l’espoir qu’il vous\n+ *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE\n+ *  without even the implied             GARANTIE : sans même la garantie\n+ *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ\n+ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF\n+ *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence\n+ *  General Public License for           Générale Publique GNU Affero\n+ *  more details.                        pour plus de détails.\n+ *\n+ *  You should have received             Vous devriez avoir reçu une\n+ *  a copy of the GNU Affero             copie de la Licence Générale\n+ *  General Public License along         Publique GNU Affero avec\n+ *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est\n+ *  <http://www.gnu.org/licenses/>.      pas le cas, consultez :\n+ *                                       <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ ************************************************************************\n+ */\n+\n+package org.opencadc.fits.slice;\n+\n+public enum CoordType {\n+    SPATIAL,\n+    SPECTRAL,\n+    TIME,\n+    CELESTIAL\n+}"
  },
  {
    "sha": "037326daa24e7ccfe0a21297d1185188536a757c",
    "filename": "cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordTypeCode.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordTypeCode.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordTypeCode.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/CoordTypeCode.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -0,0 +1,125 @@\n+/*\n+ ************************************************************************\n+ *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n+ **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n+ *\n+ *  (c) 2021.                            (c) 2021.\n+ *  Government of Canada                 Gouvernement du Canada\n+ *  National Research Council            Conseil national de recherches\n+ *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n+ *  All rights reserved                  Tous droits réservés\n+ *\n+ *  NRC disclaims any warranties,        Le CNRC dénie toute garantie\n+ *  expressed, implied, or               énoncée, implicite ou légale,\n+ *  statutory, of any kind with          de quelque nature que ce\n+ *  respect to the software,             soit, concernant le logiciel,\n+ *  including without limitation         y compris sans restriction\n+ *  any warranty of merchantability      toute garantie de valeur\n+ *  or fitness for a particular          marchande ou de pertinence\n+ *  purpose. NRC shall not be            pour un usage particulier.\n+ *  liable in any event for any          Le CNRC ne pourra en aucun cas\n+ *  damages, whether direct or           être tenu responsable de tout\n+ *  indirect, special or general,        dommage, direct ou indirect,\n+ *  consequential or incidental,         particulier ou général,\n+ *  arising from the use of the          accessoire ou fortuit, résultant\n+ *  software.  Neither the name          de l'utilisation du logiciel. Ni\n+ *  of the National Research             le nom du Conseil National de\n+ *  Council of Canada nor the            Recherches du Canada ni les noms\n+ *  names of its contributors may        de ses  participants ne peuvent\n+ *  be used to endorse or promote        être utilisés pour approuver ou\n+ *  products derived from this           promouvoir les produits dérivés\n+ *  software without specific prior      de ce logiciel sans autorisation\n+ *  written permission.                  préalable et particulière\n+ *                                       par écrit.\n+ *\n+ *  This file is part of the             Ce fichier fait partie du projet\n+ *  OpenCADC project.                    OpenCADC.\n+ *\n+ *  OpenCADC is free software:           OpenCADC est un logiciel libre ;\n+ *  you can redistribute it and/or       vous pouvez le redistribuer ou le\n+ *  modify it under the terms of         modifier suivant les termes de\n+ *  the GNU Affero General Public        la “GNU Affero General Public\n+ *  License as published by the          License” telle que publiée\n+ *  Free Software Foundation,            par la Free Software Foundation\n+ *  either version 3 of the              : soit la version 3 de cette\n+ *  License, or (at your option)         licence, soit (à votre gré)\n+ *  any later version.                   toute version ultérieure.\n+ *\n+ *  OpenCADC is distributed in the       OpenCADC est distribué\n+ *  hope that it will be useful,         dans l’espoir qu’il vous\n+ *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE\n+ *  without even the implied             GARANTIE : sans même la garantie\n+ *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ\n+ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF\n+ *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence\n+ *  General Public License for           Générale Publique GNU Affero\n+ *  more details.                        pour plus de détails.\n+ *\n+ *  You should have received             Vous devriez avoir reçu une\n+ *  a copy of the GNU Affero             copie de la Licence Générale\n+ *  General Public License along         Publique GNU Affero avec\n+ *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est\n+ *  <http://www.gnu.org/licenses/>.      pas le cas, consultez :\n+ *                                       <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ ************************************************************************\n+ */\n+\n+package org.opencadc.fits.slice;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+\n+public enum CoordTypeCode {\n+    // Spatial type codes.\n+    RA(\"RA--\", \"deg\", CoordType.SPATIAL),\n+    DEC(\"DEC-\", \"deg\", CoordType.SPATIAL),\n+    GLON(\"GLON\", \"deg\", CoordType.SPATIAL),\n+    GLAT(\"GLAT\", \"deg\", CoordType.SPATIAL),\n+    ELON(\"ELON\", \"deg\", CoordType.SPATIAL),\n+    ELAT(\"ELAT\", \"deg\", CoordType.SPATIAL),\n+\n+    // Spectral type codes.\n+    FREQ(\"FREQ\", \"Hz\", CoordType.SPECTRAL),\n+    ENER(\"ENER\", \"J\", CoordType.SPECTRAL),\n+    WAVN(\"WAVN\", \"/m\", CoordType.SPECTRAL),\n+    VRAD(\"VRAD\", \"m s-1\", CoordType.SPECTRAL),\n+    WAVE(\"WAVE\", \"m\", CoordType.SPECTRAL),\n+    VOPT(\"VOPT\", \"m s-1\", CoordType.SPECTRAL),\n+    ZOPT(\"ZOPT\", \"\", CoordType.SPECTRAL),\n+    AWAV(\"AWAV\", \"m\", CoordType.SPECTRAL),\n+    VELO(\"VELO\", \"m s-1\", CoordType.SPECTRAL),\n+    BETA(\"BETA\", \"\", CoordType.SPECTRAL);\n+\n+    private final String typeCodeString;\n+    private final String defaultUnit;\n+    private final CoordType coordType;\n+\n+\n+    CoordTypeCode(final String typeCodeString, final String defaultUnit, final CoordType coordType) {\n+        this.typeCodeString = typeCodeString;\n+        this.defaultUnit = defaultUnit;\n+        this.coordType = coordType;\n+    }\n+\n+    public boolean isSpectral() {\n+        return coordType == CoordType.SPECTRAL;\n+    }\n+\n+    public String getDefaultUnit() {\n+        return defaultUnit;\n+    }\n+\n+    public static String getDefaultUnit(final String ctype) {\n+        if (ctype == null) {\n+            return null;\n+        }\n+\n+        final CoordTypeCode matchedCoordTypeCode =\n+                Arrays.stream(values()).filter(coordTypeCode -> ctype.toUpperCase(Locale.ROOT).substring(0, 4).startsWith(\n+                        coordTypeCode.typeCodeString)).findFirst().orElse(null);\n+        return (matchedCoordTypeCode == null) ? \"\" : matchedCoordTypeCode.getDefaultUnit();\n+    }\n+}"
  },
  {
    "sha": "d86c1626db751ca1d6dbc16404f089bbd6343434",
    "filename": "cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSCutout.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSCutout.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSCutout.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSCutout.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -0,0 +1,102 @@\n+/*\n+ ************************************************************************\n+ *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n+ **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n+ *\n+ *  (c) 2021.                            (c) 2021.\n+ *  Government of Canada                 Gouvernement du Canada\n+ *  National Research Council            Conseil national de recherches\n+ *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n+ *  All rights reserved                  Tous droits réservés\n+ *\n+ *  NRC disclaims any warranties,        Le CNRC dénie toute garantie\n+ *  expressed, implied, or               énoncée, implicite ou légale,\n+ *  statutory, of any kind with          de quelque nature que ce\n+ *  respect to the software,             soit, concernant le logiciel,\n+ *  including without limitation         y compris sans restriction\n+ *  any warranty of merchantability      toute garantie de valeur\n+ *  or fitness for a particular          marchande ou de pertinence\n+ *  purpose. NRC shall not be            pour un usage particulier.\n+ *  liable in any event for any          Le CNRC ne pourra en aucun cas\n+ *  damages, whether direct or           être tenu responsable de tout\n+ *  indirect, special or general,        dommage, direct ou indirect,\n+ *  consequential or incidental,         particulier ou général,\n+ *  arising from the use of the          accessoire ou fortuit, résultant\n+ *  software.  Neither the name          de l'utilisation du logiciel. Ni\n+ *  of the National Research             le nom du Conseil National de\n+ *  Council of Canada nor the            Recherches du Canada ni les noms\n+ *  names of its contributors may        de ses  participants ne peuvent\n+ *  be used to endorse or promote        être utilisés pour approuver ou\n+ *  products derived from this           promouvoir les produits dérivés\n+ *  software without specific prior      de ce logiciel sans autorisation\n+ *  written permission.                  préalable et particulière\n+ *                                       par écrit.\n+ *\n+ *  This file is part of the             Ce fichier fait partie du projet\n+ *  OpenCADC project.                    OpenCADC.\n+ *\n+ *  OpenCADC is free software:           OpenCADC est un logiciel libre ;\n+ *  you can redistribute it and/or       vous pouvez le redistribuer ou le\n+ *  modify it under the terms of         modifier suivant les termes de\n+ *  the GNU Affero General Public        la “GNU Affero General Public\n+ *  License as published by the          License” telle que publiée\n+ *  Free Software Foundation,            par la Free Software Foundation\n+ *  either version 3 of the              : soit la version 3 de cette\n+ *  License, or (at your option)         licence, soit (à votre gré)\n+ *  any later version.                   toute version ultérieure.\n+ *\n+ *  OpenCADC is distributed in the       OpenCADC est distribué\n+ *  hope that it will be useful,         dans l’espoir qu’il vous\n+ *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE\n+ *  without even the implied             GARANTIE : sans même la garantie\n+ *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ\n+ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF\n+ *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence\n+ *  General Public License for           Générale Publique GNU Affero\n+ *  more details.                        pour plus de détails.\n+ *\n+ *  You should have received             Vous devriez avoir reçu une\n+ *  a copy of the GNU Affero             copie de la Licence Générale\n+ *  General Public License along         Publique GNU Affero avec\n+ *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est\n+ *  <http://www.gnu.org/licenses/>.      pas le cas, consultez :\n+ *                                       <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ ************************************************************************\n+ */\n+\n+package org.opencadc.fits.slice;\n+\n+import ca.nrc.cadc.dali.DaliUtil;\n+import ca.nrc.cadc.wcs.exceptions.NoSuchKeywordException;\n+import ca.nrc.cadc.wcs.exceptions.WCSLibRuntimeException;\n+import nom.tam.fits.Header;\n+import nom.tam.fits.HeaderCardException;\n+\n+public abstract class FITSCutout<T> {\n+    protected final FITSHeaderWCSKeywords fitsHeaderWCSKeywords;\n+\n+    public FITSCutout(final Header header) throws HeaderCardException {\n+        DaliUtil.assertNotNull(\"header\", header);\n+        this.fitsHeaderWCSKeywords = new FITSHeaderWCSKeywords(header);\n+    }\n+\n+    protected FITSCutout(final FITSHeaderWCSKeywords fitsHeaderWCSKeywords) {\n+        DaliUtil.assertNotNull(\"fitsHeaderWCSKeywords\", fitsHeaderWCSKeywords);\n+        this.fitsHeaderWCSKeywords = fitsHeaderWCSKeywords;\n+    }\n+\n+\n+    /**\n+     * Obtain the bounds of the given cutout.\n+     * @param cutoutBound   The bounds (shape, interval etc.) of the cutout.\n+     * @return  long[] array of overlapping bounds, or long[0] if all pixels are included.\n+     *\n+     * @throws NoSuchKeywordException Unknown keyword found.\n+     * @throws WCSLibRuntimeException WCSLib (C) error.\n+     * @throws HeaderCardException  If a FITS Header card couldn't be read.\n+     */\n+    public abstract long[] getBounds(final T cutoutBound)\n+            throws NoSuchKeywordException, WCSLibRuntimeException, HeaderCardException;\n+}"
  },
  {
    "sha": "1764f2a2815e85fa13992ea1f25887174163176d",
    "filename": "cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSHeaderWCSKeywords.java",
    "status": "modified",
    "additions": 199,
    "deletions": 13,
    "changes": 212,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSHeaderWCSKeywords.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSHeaderWCSKeywords.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/main/java/org/opencadc/fits/slice/FITSHeaderWCSKeywords.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -68,15 +68,24 @@\n \n package org.opencadc.fits.slice;\n \n+import ca.nrc.cadc.util.StringUtil;\n import ca.nrc.cadc.wcs.WCSKeywords;\n \n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n \n import nom.tam.fits.Header;\n import nom.tam.fits.HeaderCard;\n+import nom.tam.fits.HeaderCardException;\n+import nom.tam.fits.header.Standard;\n+import nom.tam.fits.header.extra.NOAOExt;\n import nom.tam.util.Cursor;\n+import org.apache.log4j.Logger;\n+import org.opencadc.fits.CADCExt;\n \n \n /**\n@@ -85,34 +94,43 @@\n  * underlying Fits object.\n  */\n public class FITSHeaderWCSKeywords implements WCSKeywords {\n+    private static final Logger LOGGER = Logger.getLogger(FITSHeaderWCSKeywords.class);\n \n     // Source for values.\n     private final Header header;\n \n \n     /**\n      * Empty constructor.\n+     * @throws HeaderCardException  If cloning the header fails.\n      */\n-    public FITSHeaderWCSKeywords() {\n+    public FITSHeaderWCSKeywords() throws HeaderCardException {\n         this(new Header());\n     }\n \n+    public FITSHeaderWCSKeywords(final WCSKeywords wcsKeywords) throws HeaderCardException {\n+        this.header = cloneHeader(wcsKeywords);\n+    }\n+\n     /**\n      * Iterate the header cards and add each keyword with its associated value.\n      *\n      * @param header The Header object.\n      *               Expect an IllegalArgumentException if this is null as it is believed that the expectation is\n      *               to return a populated WCSKeywords.  If an empty WCSKeywords is expected, then use the empty\n      *               constructor.\n+     * @throws HeaderCardException If the header cards cannot be read.\n      */\n-    public FITSHeaderWCSKeywords(final Header header) {\n+    public FITSHeaderWCSKeywords(final Header header) throws HeaderCardException {\n         if (header == null) {\n             throw new IllegalArgumentException(\"Header is required.\");\n         }\n \n-        this.header = header;\n+        this.header = cloneHeader(header);\n+        LOGGER.trace(\"Constructor OK.\");\n     }\n \n+\n     /**\n      * Returns true if the specified key exists in the keywords.\n      *\n@@ -121,6 +139,7 @@ public FITSHeaderWCSKeywords(final Header header) {\n      */\n     @Override\n     public boolean containsKey(String key) {\n+        LOGGER.trace(\"containsKey(\" + key + \")\");\n         return header.containsKey(key);\n     }\n \n@@ -134,6 +153,7 @@ public boolean containsKey(String key) {\n      */\n     @Override\n     public double getDoubleValue(String key) {\n+        LOGGER.trace(\"getDoubleValue(\" + key + \")\");\n         return header.getDoubleValue(key);\n     }\n \n@@ -147,19 +167,21 @@ public double getDoubleValue(String key) {\n      */\n     @Override\n     public double getDoubleValue(String key, double value) {\n+        LOGGER.trace(\"getDoubleValue(\" + key + \"/\" + value + \")\");\n         return header.getDoubleValue(key, value);\n     }\n \n     /**\n      * Returns a float value for the specified key. It is expected that\n-     * a default value, typically 0.0, will be returned if the key\n+     * a de7fault value, typically 0.0, will be returned if the key\n      * does not exist in the keywords.\n      *\n      * @param key key whose float value is to be returned.\n      * @return float value corresponding to the specified key.\n      */\n     @Override\n     public float getFloatValue(String key) {\n+        LOGGER.trace(\"getFloatValue(\" + key + \")\");\n         return header.getFloatValue(key);\n     }\n \n@@ -173,6 +195,7 @@ public float getFloatValue(String key) {\n      */\n     @Override\n     public float getFloatValue(String key, float value) {\n+        LOGGER.trace(\"getFloatValue(\" + key + \"/\" + value + \")\");\n         return header.getFloatValue(key, value);\n     }\n \n@@ -186,6 +209,7 @@ public float getFloatValue(String key, float value) {\n      */\n     @Override\n     public int getIntValue(String key) {\n+        LOGGER.trace(\"getIntValue(\" + key + \")\");\n         return header.getIntValue(key);\n     }\n \n@@ -199,6 +223,7 @@ public int getIntValue(String key) {\n      */\n     @Override\n     public int getIntValue(String key, int value) {\n+        LOGGER.trace(\"getIntValue(\" + key + \"/\" + value + \")\");\n         return header.getIntValue(key, value);\n     }\n \n@@ -212,6 +237,7 @@ public int getIntValue(String key, int value) {\n      */\n     @Override\n     public String getStringValue(String key) {\n+        LOGGER.trace(\"getStringValue(\" + key + \")\");\n         final HeaderCard card = header.findCard(key);\n         return card == null ? null : card.getValue();\n     }\n@@ -226,6 +252,7 @@ public String getStringValue(String key) {\n      */\n     @Override\n     public String getStringValue(String key, String value) {\n+        LOGGER.trace(\"getStringValue(\" + key + \"/\" + value + \")\");\n         final String currVal = getStringValue(key);\n         return currVal == null ? value : currVal;\n     }\n@@ -287,7 +314,8 @@ public void put(String key, Double value) {\n \n     /**\n      * Iterate the cards of the Header and create Map Entries as needed.\n-     * @return  An Iterator instance.  Never null.\n+     *\n+     * @return An Iterator instance.  Never null.\n      */\n     @Override\n     public Iterator<Map.Entry<String, Object>> iterator() {\n@@ -302,25 +330,183 @@ public boolean hasNext() {\n             /**\n              * Convert to a Map.Entry object to adhere to the contract of this interface.  Be aware that BLANKS and\n              * some COMMENTs will create empty keys and possibly empty values.\n-             * @return  Map.Entry object, never null.\n+             * @return Map.Entry object, never null.\n              */\n             @Override\n             public Map.Entry<String, Object> next() {\n                 final Map<String, Object> convertor = new HashMap<>();\n                 final HeaderCard nextHeaderCard = source.next();\n-                convertor.put(nextHeaderCard.getKey(), nextHeaderCard.getValue());\n+                final Class<?> valueType = nextHeaderCard.valueType();\n+                final String headerCardValue = nextHeaderCard.getValue();\n+                final Object value;\n+\n+                if (valueType == null || valueType == String.class || valueType == Boolean.class) {\n+                    value = headerCardValue;\n+                } else if (valueType == Integer.class) {\n+                    value = Integer.parseInt(headerCardValue);\n+                } else if (valueType == Long.class) {\n+                    value = Long.parseLong(headerCardValue);\n+                } else if (valueType == Double.class || valueType == BigDecimal.class\n+                           || valueType == BigInteger.class) {\n+                    value = Double.parseDouble(headerCardValue);\n+                } else {\n+                    value = \"\";\n+                }\n+\n+                convertor.put(nextHeaderCard.getKey(), value);\n                 return convertor.entrySet().iterator().next();\n             }\n         };\n     }\n \n-    public int getNumberOfKeywords() {\n-        int count = 0;\n-        for (final Iterator<Map.Entry<String, Object>> entryIterator = iterator(); entryIterator.hasNext();) {\n-            entryIterator.next();\n-            count++;\n+    public final Header getHeader() {\n+        return this.header;\n+    }\n+\n+    private Header cloneHeader(final WCSKeywords wcsKeywords) throws HeaderCardException {\n+        final Header destination = new Header();\n+        for (final Iterator<Map.Entry<String, Object>> entryIterator = wcsKeywords.iterator();\n+             entryIterator.hasNext(); ) {\n+            final Map.Entry<String, Object> entry = entryIterator.next();\n+            final String key = entry.getKey();\n+            final Object value = entry.getValue();\n+            final Class<?> valueType = value.getClass();\n+\n+            cloneHeaderCard(destination, key, valueType, \"\", value.toString());\n+        }\n+\n+        destination.setNaxes(wcsKeywords.getIntValue(Standard.NAXIS.key()));\n+        sanitizeHeader(destination);\n+\n+        return destination;\n+    }\n+\n+    /**\n+     * Make a copy of the header.  Adjusting the source Header directly with an underlying File can result in the source\n+     * file being modified, so we duplicate it here to remove references.\n+     *\n+     * @param source The source Header.\n+     * @return Header object with reproduced cards.  Never null.\n+     * @throws HeaderCardException Any I/O with Header Cards.\n+     */\n+    private Header cloneHeader(final Header source) throws HeaderCardException {\n+        final Header destination = new Header();\n+\n+        // Use a for loop here rather than Java Collections stream to pass the exception up properly.\n+        for (final Iterator<HeaderCard> headerCardIterator = source.iterator(); headerCardIterator.hasNext(); ) {\n+            final HeaderCard headerCard = headerCardIterator.next();\n+            cloneHeaderCard(destination, headerCard.getKey(), headerCard.valueType(), headerCard.getComment(),\n+                            headerCard.getValue());\n+        }\n+\n+        sanitizeHeader(destination);\n+\n+        return destination;\n+    }\n+\n+    private void cloneHeaderCard(final Header destination, final String headerCardKey, final Class<?> valueType,\n+                                 final String comment, final String value) throws HeaderCardException {\n+        // Check for blank lines or just plain comments that are not standard FITS comments.\n+        if (!StringUtil.hasText(headerCardKey)) {\n+            destination.addValue(headerCardKey, (String) null, comment);\n+        } else if (Standard.COMMENT.key().equals(headerCardKey)) {\n+            destination.insertComment(comment);\n+        } else if (Standard.HISTORY.key().equals(headerCardKey)) {\n+            destination.insertHistory(comment);\n+        } else if (headerCardKey.startsWith(CADCExt.CDELT.key())) {\n+            // CDELT values cannot be zero.\n+            final double cdeltValue = Double.parseDouble(value);\n+            destination.addValue(headerCardKey, cdeltValue == 0.0D ? 1.0D : cdeltValue,\n+                                 comment);\n+        } else {\n+            if (valueType == String.class || valueType == null) {\n+                destination.addValue(headerCardKey, value, comment);\n+            } else if (valueType == Boolean.class) {\n+                destination.addValue(headerCardKey, Boolean.parseBoolean(value) || value.equals(\"T\"), comment);\n+            } else if (valueType == Integer.class) {\n+                destination.addValue(headerCardKey, Integer.parseInt(value),\n+                                     comment);\n+            } else if (valueType == BigInteger.class) {\n+                destination.addValue(headerCardKey, new BigInteger(value), comment);\n+            } else if (valueType == Long.class) {\n+                destination.addValue(headerCardKey, Long.parseLong(value),\n+                                     comment);\n+            } else if (valueType == Double.class) {\n+                destination.addValue(headerCardKey, Double.parseDouble(value),\n+                                     comment);\n+            } else if (valueType == BigDecimal.class) {\n+                destination.addValue(headerCardKey, new BigDecimal(value),\n+                                     comment);\n+            }\n+        }\n+    }\n+\n+    private void sanitizeHeader(final Header destination) throws HeaderCardException {\n+        final int naxis = destination.getIntValue(Standard.NAXIS);\n+        final boolean expectCD = destination.containsKey(NOAOExt.CD1_1);\n+        final boolean expectPC = destination.containsKey(CADCExt.PC1_1);\n+        final boolean expectPV = destination.containsKey(CADCExt.RESTFRQ)\n+                                 || destination.containsKey(CADCExt.RESTFREQ);\n+        final int spectralAxis = getSpectralAxis(destination);\n+\n+        for (int x = 1; x <= naxis; x++) {\n+            for (int y = 1; y <= naxis; y++) {\n+                final String cdMatrixKey = String.format(\"CD%d_%d\", x, y);\n+                final String pcMatrixKey = String.format(\"PC%d_%d\", x, y);\n+                final String pvMatrixKey = String.format(\"PV%d_%d\", x, y);\n+\n+\n+                // The wcslib library wants the PC/CD matrix intact for spatial cutouts.\n+                if (expectCD && !destination.containsKey(cdMatrixKey)) {\n+                    destination.addValue(cdMatrixKey, (x == y) ? 1.0D : 0.0D, null);\n+                }\n+\n+                if (expectPC && !destination.containsKey(pcMatrixKey)) {\n+                    destination.addValue(pcMatrixKey, (x == y) ? 1.0D : 0.0D, null);\n+                }\n+\n+                // If the RESTFRQ header is present, the PV values seem to be necessary as well.  Spatial (2D) cutouts\n+                // will fail if they exist for the spatial axes however, so keep it to the spectral axis.\n+                if (expectPV && (x == spectralAxis) && !destination.containsKey(pvMatrixKey)) {\n+                    destination.addValue(pvMatrixKey, 0.0D, null);\n+                }\n+            }\n+\n+            // Ensure the default units are added when missing.\n+            final String cType = destination.getStringValue(Standard.CTYPEn.n(x));\n+            if (cType != null) {\n+                final String cUnit = destination.getStringValue(CADCExt.CUNITn.n(x));\n+                if (cUnit == null) {\n+                    destination.addValue(CADCExt.CUNITn.n(x), CoordTypeCode.getDefaultUnit(cType));\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Obtain the energy (1-based) axis from the current header.  Return -1 if none found that match the Spectral types.\n+     *\n+     * @return int axis, or -1 if no spectral axis present.\n+     */\n+    int getSpectralAxis() {\n+        return getSpectralAxis(this.header);\n+    }\n+\n+    /**\n+     * Obtain the energy (1-based) axis from the given header.  Return -1 if none found that match the Spectral types.\n+     *\n+     * @return integer axis, or -1 if not found.\n+     */\n+    int getSpectralAxis(final Header destination) {\n+        final int naxis = destination.getIntValue(Standard.NAXIS);\n+        for (int i = 1; i <= naxis; i++) {\n+            final String ctypeValue = destination.getStringValue(Standard.CTYPEn.n(i));\n+            if (ctypeValue != null && Arrays.stream(CoordTypeCode.values()).anyMatch(\n+                coOrdTypeCode -> ctypeValue.startsWith(coOrdTypeCode.name()) && coOrdTypeCode.isSpectral())) {\n+                return i;\n+            }\n         }\n \n-        return count;\n+        return -1;\n     }\n }"
  },
  {
    "sha": "7515989487b27aa91d53bff9fe93f836bbda47c2",
    "filename": "cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/BaseCutoutTest.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/BaseCutoutTest.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/BaseCutoutTest.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/BaseCutoutTest.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -0,0 +1,119 @@\n+/*\n+ ************************************************************************\n+ *******************  CANADIAN ASTRONOMY DATA CENTRE  *******************\n+ **************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************\n+ *\n+ *  (c) 2021.                            (c) 2021.\n+ *  Government of Canada                 Gouvernement du Canada\n+ *  National Research Council            Conseil national de recherches\n+ *  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6\n+ *  All rights reserved                  Tous droits réservés\n+ *\n+ *  NRC disclaims any warranties,        Le CNRC dénie toute garantie\n+ *  expressed, implied, or               énoncée, implicite ou légale,\n+ *  statutory, of any kind with          de quelque nature que ce\n+ *  respect to the software,             soit, concernant le logiciel,\n+ *  including without limitation         y compris sans restriction\n+ *  any warranty of merchantability      toute garantie de valeur\n+ *  or fitness for a particular          marchande ou de pertinence\n+ *  purpose. NRC shall not be            pour un usage particulier.\n+ *  liable in any event for any          Le CNRC ne pourra en aucun cas\n+ *  damages, whether direct or           être tenu responsable de tout\n+ *  indirect, special or general,        dommage, direct ou indirect,\n+ *  consequential or incidental,         particulier ou général,\n+ *  arising from the use of the          accessoire ou fortuit, résultant\n+ *  software.  Neither the name          de l'utilisation du logiciel. Ni\n+ *  of the National Research             le nom du Conseil National de\n+ *  Council of Canada nor the            Recherches du Canada ni les noms\n+ *  names of its contributors may        de ses  participants ne peuvent\n+ *  be used to endorse or promote        être utilisés pour approuver ou\n+ *  products derived from this           promouvoir les produits dérivés\n+ *  software without specific prior      de ce logiciel sans autorisation\n+ *  written permission.                  préalable et particulière\n+ *                                       par écrit.\n+ *\n+ *  This file is part of the             Ce fichier fait partie du projet\n+ *  OpenCADC project.                    OpenCADC.\n+ *\n+ *  OpenCADC is free software:           OpenCADC est un logiciel libre ;\n+ *  you can redistribute it and/or       vous pouvez le redistribuer ou le\n+ *  modify it under the terms of         modifier suivant les termes de\n+ *  the GNU Affero General Public        la “GNU Affero General Public\n+ *  License as published by the          License” telle que publiée\n+ *  Free Software Foundation,            par la Free Software Foundation\n+ *  either version 3 of the              : soit la version 3 de cette\n+ *  License, or (at your option)         licence, soit (à votre gré)\n+ *  any later version.                   toute version ultérieure.\n+ *\n+ *  OpenCADC is distributed in the       OpenCADC est distribué\n+ *  hope that it will be useful,         dans l’espoir qu’il vous\n+ *  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE\n+ *  without even the implied             GARANTIE : sans même la garantie\n+ *  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ\n+ *  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF\n+ *  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence\n+ *  General Public License for           Générale Publique GNU Affero\n+ *  more details.                        pour plus de détails.\n+ *\n+ *  You should have received             Vous devriez avoir reçu une\n+ *  a copy of the GNU Affero             copie de la Licence Générale\n+ *  General Public License along         Publique GNU Affero avec\n+ *  with OpenCADC.  If not, see          OpenCADC ; si ce n’est\n+ *  <http://www.gnu.org/licenses/>.      pas le cas, consultez :\n+ *                                       <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ ************************************************************************\n+ */\n+\n+package org.opencadc.fits.slice;\n+\n+import ca.nrc.cadc.util.Log4jInit;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.Assert;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+\n+public abstract class BaseCutoutTest {\n+    private static final Logger LOGGER = Logger.getLogger(BaseCutoutTest.class);\n+    final static File DEFAULT_DATA_DIR = new File(System.getProperty(\"user.home\") + \"/.config/test-data\");\n+\n+    // Concrete tests can set this if desired.\n+    long padding = 2;\n+\n+    static {\n+        Log4jInit.setLevel(\"org.opecadc.fits.slice\", Level.DEBUG);\n+    }\n+\n+    /**\n+     * Ensure the pixel values match with a +-padding grace.\n+     * @param message   The fail message.\n+     * @param expected  The expected values.\n+     * @param result    The resulting values.\n+     */\n+    void assertFuzzyPixelArrayEquals(final String message, final long[] expected, final long[] result) {\n+        if (result == null && expected != null) {\n+            Assert.fail(\"Result array is null but expected \" + Arrays.toString(expected));\n+        } else if (result != null && expected == null) {\n+            Assert.fail(\"Expected null but got \" + Arrays.toString(result));\n+        } else if (result != null) {\n+            LOGGER.debug(\"\\n*****\\nChecking array \\n\" + Arrays.toString(result) + \"\\nagainst\\n\"\n+                         + Arrays.toString(expected) + \"\\n allowing a difference of \" + padding + \".\\n****\");\n+            Assert.assertEquals(message, result.length, expected.length);\n+            for (int i = 0; i < expected.length; i++) {\n+                final long expectedPixelValue = expected[i];\n+                final long resultPixelValue = result[i];\n+\n+                // Assert\n+                final boolean condition = (resultPixelValue <= expectedPixelValue + padding)\n+                                          && (resultPixelValue >= expectedPixelValue - padding);\n+                LOGGER.debug(\"Checking \" + resultPixelValue + \" against \" + expectedPixelValue + \" diff = \"\n+                             + Math.abs(expectedPixelValue - resultPixelValue));\n+                Assert.assertTrue(message + \"\\nExpected \" + expectedPixelValue + \"(+/-\" + padding\n+                                  + \"), but received \" + resultPixelValue + \"\\n\", condition);\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "99dba2a38209dce0653d20c61206638d06cc2c8b",
    "filename": "cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/FITSHeaderWCSKeywordsTest.java",
    "status": "modified",
    "additions": 23,
    "deletions": 10,
    "changes": 33,
    "blob_url": "https://github.com/opencadc/dal/blob/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/FITSHeaderWCSKeywordsTest.java",
    "raw_url": "https://github.com/opencadc/dal/raw/8fb3c826e057d0377a2c4d9783e33fa4c44f9665/cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/FITSHeaderWCSKeywordsTest.java",
    "contents_url": "https://api.github.com/repos/opencadc/dal/contents/cadc-data-ops-fits/src/test/java/org/opencadc/fits/slice/FITSHeaderWCSKeywordsTest.java?ref=8fb3c826e057d0377a2c4d9783e33fa4c44f9665",
    "patch": "@@ -80,6 +80,8 @@\n import org.junit.Test;\n \n import java.math.BigDecimal;\n+import java.util.Iterator;\n+import java.util.Map;\n \n \n public class FITSHeaderWCSKeywordsTest {\n@@ -90,10 +92,10 @@\n     }\n \n     @Test\n-    public void testInvalidConstructor() {\n+    public void testInvalidConstructor() throws Exception {\n         final long startMillis = System.currentTimeMillis();\n         try {\n-            new FITSHeaderWCSKeywords(null);\n+            new FITSHeaderWCSKeywords((Header) null);\n             Assert.fail(\"Should throw IllegalArgumentException.\");\n         } catch (IllegalArgumentException illegalArgumentException) {\n             // Good.\n@@ -103,11 +105,11 @@ public void testInvalidConstructor() {\n     }\n \n     @Test\n-    public void testEmptyHeaderConstructor() {\n+    public void testEmptyHeaderConstructor() throws Exception {\n         final long startMillis = System.currentTimeMillis();\n         final Header header = new Header();\n         final FITSHeaderWCSKeywords testSubject = new FITSHeaderWCSKeywords(header);\n-        Assert.assertEquals(\"Should be empty.\", 0, testSubject.getNumberOfKeywords());\n+        Assert.assertEquals(\"Should be empty.\", 0, getNumberOfKeywords(testSubject));\n         LOGGER.debug(\"FITSHeaderWCSKeywordsTest.testEmptyHeaderConstructor ran in \"\n                      + (System.currentTimeMillis() - startMillis) + \" ms\");\n     }\n@@ -147,7 +149,7 @@ public void testGet() throws Exception {\n             });\n \n             Assert.assertEquals(\"Should've created \" + counter.count + \" keywords.\",\n-                                counter.count, testSubject.getNumberOfKeywords());\n+                                counter.count, getNumberOfKeywords(testSubject));\n         }\n         LOGGER.debug(\"FITSHeaderWCSKeywordsTest.testGet ran in \" + (System.currentTimeMillis() - startMillis) + \" ms\");\n     }\n@@ -168,30 +170,30 @@ public void testIterator() throws Exception {\n             final Counter counter = new Counter();\n \n             testSubject.iterator().forEachRemaining(stringObjectEntry -> {\n-                LOGGER.debug(\"iterator.next: \" + stringObjectEntry.getKey() + \" -> \" + stringObjectEntry.getValue());\n+                LOGGER.trace(\"iterator.next: \" + stringObjectEntry.getKey() + \" -> \" + stringObjectEntry.getValue());\n                 counter.increment();\n             });\n \n             Assert.assertEquals(\"Should've created \" + counter.count + \" keywords.\",\n-                                counter.count, testSubject.getNumberOfKeywords());\n+                                counter.count, getNumberOfKeywords(testSubject));\n         }\n         LOGGER.debug(\"FITSHeaderWCSKeywordsTest.testIterator ran in \" + (System.currentTimeMillis() - startMillis)\n                      + \" ms\");\n     }\n \n     @Test\n-    public void testEmptyIterator() {\n+    public void testEmptyIterator() throws Exception {\n         final long startMillis = System.currentTimeMillis();\n         final FITSHeaderWCSKeywords testSubject = new FITSHeaderWCSKeywords();\n         final Counter counter = new Counter();\n \n         testSubject.iterator().forEachRemaining(stringObjectEntry -> {\n-            LOGGER.debug(\"iterator.next: \" + stringObjectEntry.getKey() + \" -> \" + stringObjectEntry.getValue());\n+            LOGGER.trace(\"iterator.next: \" + stringObjectEntry.getKey() + \" -> \" + stringObjectEntry.getValue());\n             counter.increment();\n         });\n \n         Assert.assertEquals(\"Should've created \" + counter.count + \" keywords.\",\n-                            counter.count, testSubject.getNumberOfKeywords());\n+                            counter.count, getNumberOfKeywords(testSubject));\n         LOGGER.debug(\"FITSHeaderWCSKeywordsTest.testIterator ran in \" + (System.currentTimeMillis() - startMillis)\n                      + \" ms\");\n     }\n@@ -205,4 +207,15 @@ void increment() {\n             count++;\n         }\n     }\n+\n+    int getNumberOfKeywords(final FITSHeaderWCSKeywords fitsHeaderWCSKeywords) {\n+        int count = 0;\n+        for (final Iterator<Map.Entry<String, Object>> entryIterator = fitsHeaderWCSKeywords.iterator();\n+             entryIterator.hasNext();) {\n+            entryIterator.next();\n+            count++;\n+        }\n+\n+        return count;\n+    }\n }\n\\ No newline at end of file"
  }
]
