[
  {
    "sha": "7a99b7d1dee34ff963f1fb0a4733ec895e5f52e9",
    "filename": "src/main/java/org/galatea/starter/domain/IexHistoricalPrice.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/CurtisScheffel/fuse-starter-java/blob/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/domain/IexHistoricalPrice.java",
    "raw_url": "https://github.com/CurtisScheffel/fuse-starter-java/raw/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/domain/IexHistoricalPrice.java",
    "contents_url": "https://api.github.com/repos/CurtisScheffel/fuse-starter-java/contents/src/main/java/org/galatea/starter/domain/IexHistoricalPrice.java?ref=95e01a03660dd5d26d4e87fcc5180651fab2869a",
    "patch": "@@ -1,6 +1,8 @@\n package org.galatea.starter.domain;\n \n import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n import lombok.Builder;\n import lombok.Data;\n \n@@ -19,4 +21,23 @@\n   private BigDecimal open;\n   private BigDecimal volume;\n   private String date;\n+\n+  public static List<IexHistoricalPrice> createFromHistoricalEntityList(\n+      List<IexHistoricalPriceEntity> historicalEntities) {\n+    List<IexHistoricalPrice> historicalPrices =\n+        new ArrayList<>();\n+\n+    for (IexHistoricalPriceEntity entity : historicalEntities) {\n+      historicalPrices\n+          .add(new IexHistoricalPrice(\n+              entity.getSymbol(),\n+              entity.getClose(),\n+              entity.getHigh(),\n+              entity.getLow(),\n+              entity.getOpen(),\n+              entity.getVolume(),\n+              entity.getDateString()));\n+    }\n+    return historicalPrices;\n+  }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "50783002c4044f8cc81e831cd3bdc4d2377fd27f",
    "filename": "src/main/java/org/galatea/starter/domain/IexHistoricalPriceEntity.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/CurtisScheffel/fuse-starter-java/blob/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/domain/IexHistoricalPriceEntity.java",
    "raw_url": "https://github.com/CurtisScheffel/fuse-starter-java/raw/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/domain/IexHistoricalPriceEntity.java",
    "contents_url": "https://api.github.com/repos/CurtisScheffel/fuse-starter-java/contents/src/main/java/org/galatea/starter/domain/IexHistoricalPriceEntity.java?ref=95e01a03660dd5d26d4e87fcc5180651fab2869a",
    "patch": "@@ -0,0 +1,80 @@\n+package org.galatea.starter.domain;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+\n+/**\n+ * This class represents an entity of the IexHistoricalPrice object.  It will be used to store these\n+ * objects in an h2 database.\n+ */\n+\n+@Data\n+@Builder\n+@Entity\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public class IexHistoricalPriceEntity {\n+\n+  @Id\n+  protected String symbol_date;\n+\n+  @NonNull\n+  protected LocalDate date;\n+\n+  @NonNull\n+  protected String symbol;\n+\n+  @NonNull\n+  protected BigDecimal close;\n+\n+  @NonNull\n+  protected BigDecimal high;\n+\n+  @NonNull\n+  protected BigDecimal low;\n+\n+  @NonNull\n+  protected BigDecimal open;\n+\n+  @NonNull\n+  protected BigDecimal volume;\n+\n+  @NonNull\n+  String dateString;\n+\n+\n+  public static List<IexHistoricalPriceEntity> createFromHistoricalPriceList(\n+      List<IexHistoricalPrice> historicalPrices) {\n+    List<IexHistoricalPriceEntity> historicalPriceEntities =\n+        new ArrayList<>();\n+    String symbol_date;\n+    LocalDate date;\n+\n+    for (IexHistoricalPrice price : historicalPrices) {\n+      symbol_date = price.getSymbol() + price.getDate();\n+      date = LocalDate.parse(price.getDate());\n+      historicalPriceEntities\n+          .add(new IexHistoricalPriceEntity(\n+              symbol_date,\n+              date,\n+              price.getSymbol(),\n+              price.getClose(),\n+              price.getHigh(),\n+              price.getLow(),\n+              price.getOpen(),\n+              price.getVolume(),\n+              price.getDate()));\n+    }\n+    return historicalPriceEntities;\n+  }\n+}"
  },
  {
    "sha": "18d57ca5b754a23f02447606016fcc75a9805d5a",
    "filename": "src/main/java/org/galatea/starter/domain/rpsy/IexHistoricalPriceEntityRspy.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/CurtisScheffel/fuse-starter-java/blob/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/domain/rpsy/IexHistoricalPriceEntityRspy.java",
    "raw_url": "https://github.com/CurtisScheffel/fuse-starter-java/raw/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/domain/rpsy/IexHistoricalPriceEntityRspy.java",
    "contents_url": "https://api.github.com/repos/CurtisScheffel/fuse-starter-java/contents/src/main/java/org/galatea/starter/domain/rpsy/IexHistoricalPriceEntityRspy.java?ref=95e01a03660dd5d26d4e87fcc5180651fab2869a",
    "patch": "@@ -0,0 +1,16 @@\n+package org.galatea.starter.domain.rpsy;\n+\n+import java.time.LocalDate;\n+import java.util.List;\n+import org.galatea.starter.domain.IexHistoricalPriceEntity;\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface IexHistoricalPriceEntityRspy\n+    extends CrudRepository<IexHistoricalPriceEntity, String> {\n+\n+    List<IexHistoricalPriceEntity> findBySymbolIgnoreCase(String symbol);\n+\n+    List<IexHistoricalPriceEntity> findBySymbolIgnoreCaseAndDateBetween(String symbol, LocalDate startDate, LocalDate endDate);\n+\n+    List<IexHistoricalPriceEntity> findBySymbolIgnoreCaseAndDate(String symbol, LocalDate date);\n+}"
  },
  {
    "sha": "7b95acadc11e89f64f7eef9ad33f71cd36be7076",
    "filename": "src/main/java/org/galatea/starter/service/IexClientCloud.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CurtisScheffel/fuse-starter-java/blob/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/service/IexClientCloud.java",
    "raw_url": "https://github.com/CurtisScheffel/fuse-starter-java/raw/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/service/IexClientCloud.java",
    "contents_url": "https://api.github.com/repos/CurtisScheffel/fuse-starter-java/contents/src/main/java/org/galatea/starter/service/IexClientCloud.java?ref=95e01a03660dd5d26d4e87fcc5180651fab2869a",
    "patch": "@@ -22,7 +22,7 @@\n    *     30 days from today)\n    * @return an IexHistoricalPrice object corresponding to the requested data.\n    */\n-  @GetMapping(\"/stock/{symbol}/chart/{range}/{date}?token=${spring.rest.iexApiToken}\")\n+  @GetMapping(\"/stock/{symbol}/chart/{range}/{date}?chartByDay=true&token=${spring.rest.iexApiToken}\")\n   List<IexHistoricalPrice> getHistoricalPrice(\n       @PathVariable(value = \"symbol\") String symbol,\n       @PathVariable(value = \"range\") String range,"
  },
  {
    "sha": "1cf57314a42770cd18f1bb957e2659120ebdddfd",
    "filename": "src/main/java/org/galatea/starter/service/IexService.java",
    "status": "modified",
    "additions": 125,
    "deletions": 3,
    "changes": 128,
    "blob_url": "https://github.com/CurtisScheffel/fuse-starter-java/blob/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/service/IexService.java",
    "raw_url": "https://github.com/CurtisScheffel/fuse-starter-java/raw/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/java/org/galatea/starter/service/IexService.java",
    "contents_url": "https://api.github.com/repos/CurtisScheffel/fuse-starter-java/contents/src/main/java/org/galatea/starter/service/IexService.java?ref=95e01a03660dd5d26d4e87fcc5180651fab2869a",
    "patch": "@@ -1,13 +1,18 @@\n package org.galatea.starter.service;\n \n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n import java.util.Collections;\n import java.util.List;\n import lombok.NonNull;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.galatea.starter.domain.IexHistoricalPrice;\n+import org.galatea.starter.domain.IexHistoricalPriceEntity;\n import org.galatea.starter.domain.IexLastTradedPrice;\n import org.galatea.starter.domain.IexSymbol;\n+import org.galatea.starter.domain.rpsy.IexHistoricalPriceEntityRspy;\n import org.springframework.stereotype.Service;\n import org.springframework.util.CollectionUtils;\n \n@@ -23,6 +28,8 @@\n   private IexClient iexClient;\n   @NonNull\n   private IexClientCloud iexClientCloud;\n+  @NonNull\n+  private IexHistoricalPriceEntityRspy historicalPriceEntityRspy;\n \n \n   /**\n@@ -63,7 +70,25 @@\n       final String date) {\n     log.info(\"Retrieving historical price data for symbol: {}, range: {}, date: {}\", symbol, range,\n         date);\n-    return iexClientCloud.getHistoricalPrice(symbol, range, date);\n+\n+    // Declare Variables\n+    List<IexHistoricalPrice> historicalPrices;\n+    List<IexHistoricalPriceEntity> historicalEntities;\n+    LocalDate localDate = LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\n+\n+    // Check if date is in database\n+    historicalEntities = historicalPriceEntityRspy.findBySymbolIgnoreCaseAndDate(symbol, localDate);\n+    if (historicalEntities.isEmpty()) {\n+      log.info(\"Retrieving data from Iex website and saving to database.\");\n+      historicalPrices = iexClientCloud.getHistoricalPrice(symbol, range, date);\n+      historicalEntities = IexHistoricalPriceEntity.createFromHistoricalPriceList(historicalPrices);\n+      historicalPriceEntityRspy.saveAll(historicalEntities);\n+    } else {\n+      log.info(\"Retrieving data from database\");\n+      historicalPrices = IexHistoricalPrice.createFromHistoricalEntityList(historicalEntities);\n+    }\n+\n+    return historicalPrices;\n   }\n \n   /**\n@@ -78,7 +103,78 @@\n       final String symbol,\n       final String range) {\n     log.info(\"Retrieving historical price data for Symbol: {}, range: {}\", symbol, range);\n-    return iexClientCloud.getHistoricalPrice(symbol, range);\n+\n+    // Declare Variables\n+    List<IexHistoricalPrice> historicalPrices;\n+    List<IexHistoricalPriceEntity> historicalEntities;\n+    LocalDate end = LocalDate.now();\n+    LocalDate start;\n+\n+    // Determine Range Boundaries\n+    switch (range.toUpperCase()) {\n+      case \"MAX\":\n+        start = end.minusYears(15);\n+        log.info(start.toString());\n+        break;\n+      case \"5Y\":\n+        start = end.minusYears(5);\n+        log.info(start.toString());\n+        break;\n+      case \"2Y\":\n+        start = end.minusYears(2);\n+        log.info(start.toString());\n+        break;\n+      case \"1Y\":\n+        start = end.minusYears(1);\n+        log.info(start.toString());\n+        break;\n+      case \"YTD\":\n+        start = end.withDayOfYear(1);\n+        log.info(start.toString());\n+        break;\n+      case \"6M\":\n+        start = end.minusMonths(6);\n+        log.info(start.toString());\n+        break;\n+      case \"3M\":\n+        start = end.minusMonths(3);\n+        log.info(start.toString());\n+        break;\n+      case \"1M\":\n+        start = end.minusMonths(1);\n+        log.info(start.toString());\n+        break;\n+      case \"5D\":\n+        start = end.minusDays(5);\n+        log.info(start.toString());\n+        break;\n+      default:\n+        start = end;\n+        log.info(\"Range entry does not match possible values.\");\n+    }\n+\n+    // Check database for symbols\n+    /*\n+      I need a more accurate way to test if the database has the symbols rather than isEmpty().\n+      If I get a specific date and then try to run this method, if that date was within the last\n+       30 days, it'll just return that.  How can I do this?\n+     */\n+    historicalEntities = historicalPriceEntityRspy.findBySymbolIgnoreCaseAndDateBetween(symbol, start, end);\n+    if (historicalEntities.isEmpty()) {\n+      log.info(\"Retrieving data from Iex Website and saving to database\");\n+      historicalPrices = iexClientCloud.getHistoricalPrice(symbol,range);\n+\n+      // Create list of entity objects\n+      historicalEntities = IexHistoricalPriceEntity.createFromHistoricalPriceList(historicalPrices);\n+\n+      // Save entities in repo\n+      historicalPriceEntityRspy.saveAll(historicalEntities);\n+    } else {\n+      log.info(\"Retrieving data from database\");\n+      historicalPrices = IexHistoricalPrice.createFromHistoricalEntityList(historicalEntities);\n+    }\n+\n+    return historicalPrices;\n   }\n \n   /**\n@@ -90,6 +186,32 @@\n   public List<IexHistoricalPrice> getHistoricalPrice(\n       final String symbol) {\n     log.info(\"Retrieving historical price data for Symbol: {}\", symbol);\n-    return iexClientCloud.getHistoricalPrice(symbol);\n+\n+    // Declare Variables\n+    List<IexHistoricalPrice> historicalPrices;\n+    List<IexHistoricalPriceEntity> historicalEntities;\n+\n+    // Check database for symbols\n+    /*\n+      I need a more accurate way to test if the database has the symbols rather than isEmpty().\n+      If I get a specific date and then try to run this method, if that date was within the last\n+       30 days, it'll just return that.  How can I do this?\n+     */\n+    historicalEntities = historicalPriceEntityRspy.findBySymbolIgnoreCase(symbol);\n+    if (historicalEntities.isEmpty()) {\n+      log.info(\"Retrieving data from Iex Website and saving to database\");\n+      historicalPrices = iexClientCloud.getHistoricalPrice(symbol);\n+\n+      // Create list of entity objects\n+      historicalEntities = IexHistoricalPriceEntity.createFromHistoricalPriceList(historicalPrices);\n+\n+      // Save entities in repo\n+      historicalPriceEntityRspy.saveAll(historicalEntities);\n+    } else {\n+      log.info(\"Retrieving data from database\");\n+      historicalPrices = IexHistoricalPrice.createFromHistoricalEntityList(historicalEntities);\n+    }\n+\n+    return (historicalPrices);\n   }\n }"
  },
  {
    "sha": "2ef52b9d0f610099fc404f08d8d2e3f919632808",
    "filename": "src/main/resources/application.yml",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/CurtisScheffel/fuse-starter-java/blob/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/resources/application.yml",
    "raw_url": "https://github.com/CurtisScheffel/fuse-starter-java/raw/95e01a03660dd5d26d4e87fcc5180651fab2869a/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/CurtisScheffel/fuse-starter-java/contents/src/main/resources/application.yml?ref=95e01a03660dd5d26d4e87fcc5180651fab2869a",
    "patch": "@@ -9,12 +9,18 @@ spring:\n     # in case you want to use H2 with a file persistence or as a service\n     # reference http://www.h2database.com/html/cheatSheet.html and\n     # http://www.h2database.com/html/tutorial.html#using_server\n-    url: jdbc:h2:mem:testtest\n+    url: jdbc:h2:mem:testdb\n     driver-class-name: org.h2.Driver\n+    username: sa\n+    password:\n   jpa:\n     hibernate:\n       ddl-auto: update\n     database-platform: org.hibernate.dialect.MySQL5Dialect\n+  h2:\n+    console:\n+      enabled: true\n+      path: /h2-console\n \n mvc:\n   settleMissionPath: /settlementEngine\n@@ -61,7 +67,7 @@ spring:\n   rest:\n     iexBasePath: https://api.iextrading.com/1.0\n     iexCloudPath: https://cloud.iexapis.com/stable\n-    iexApiToken: pk_fde37fe1b888413ab706e1aab237aebd\n+    iexApiToken: pk_709c8976f1254d00bdc42a662dfbea26\n # set debug to get spring to log the classpath (and other things) on startup\n debug: true\n "
  }
]
