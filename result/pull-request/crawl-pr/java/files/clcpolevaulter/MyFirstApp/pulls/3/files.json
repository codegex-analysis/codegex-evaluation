[
  {
    "sha": "e15469366464bd3ac2ebc43de130676f8fe68bac",
    "filename": "app/src/main/java/com/example/myfirstapp/FizzBuzz.java",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/clcpolevaulter/MyFirstApp/blob/a9f71e55ea5750d7a18ff2bbf67de711b9e8d66f/app/src/main/java/com/example/myfirstapp/FizzBuzz.java",
    "raw_url": "https://github.com/clcpolevaulter/MyFirstApp/raw/a9f71e55ea5750d7a18ff2bbf67de711b9e8d66f/app/src/main/java/com/example/myfirstapp/FizzBuzz.java",
    "contents_url": "https://api.github.com/repos/clcpolevaulter/MyFirstApp/contents/app/src/main/java/com/example/myfirstapp/FizzBuzz.java?ref=a9f71e55ea5750d7a18ff2bbf67de711b9e8d66f",
    "patch": "@@ -11,10 +11,7 @@ else if(i % 3 == 0) {\n         else if (i % 5 == 0) {\n             return \"Buzz\";\n         }\n-        else if (i == 1){\n-            return \"1\";\n-        }\n-        return null;\n+        return \"\" + i;\n     }\n \n }"
  },
  {
    "sha": "1ccfe50fe3fb207e669370bfbf95f192360ff95a",
    "filename": "app/src/test/java/com/example/myfirstapp/FizzBuzzTest.java",
    "status": "modified",
    "additions": 37,
    "deletions": 34,
    "changes": 71,
    "blob_url": "https://github.com/clcpolevaulter/MyFirstApp/blob/a9f71e55ea5750d7a18ff2bbf67de711b9e8d66f/app/src/test/java/com/example/myfirstapp/FizzBuzzTest.java",
    "raw_url": "https://github.com/clcpolevaulter/MyFirstApp/raw/a9f71e55ea5750d7a18ff2bbf67de711b9e8d66f/app/src/test/java/com/example/myfirstapp/FizzBuzzTest.java",
    "contents_url": "https://api.github.com/repos/clcpolevaulter/MyFirstApp/contents/app/src/test/java/com/example/myfirstapp/FizzBuzzTest.java?ref=a9f71e55ea5750d7a18ff2bbf67de711b9e8d66f",
    "patch": "@@ -6,73 +6,76 @@\n \n public class FizzBuzzTest {\n     @Test\n-    public void shouldReturnFizzFor3() {\n+    public void shouldReturnFizzForMultiplesOf3() {\n         //Arrange or Given\n-        assertMultipleOfThree(3);\n-        assertMultipleOfThree(6);\n-        assertMultipleOfThree(9);\n-        assertMultipleOfThree(12);\n-    }\n-\n-    private void assertMultipleOfThree(int givenInput) {\n-        //Act or When\n-        String returnVal = FizzBuzz.calc(givenInput);\n-\n-        //Assert or Then\n-        assertEquals(\"Fizz\", returnVal);\n+        assertMultipleOfThree(3 * 1);\n+        assertMultipleOfThree(3 * 2);\n+        assertMultipleOfThree(3 * 3);\n+        assertMultipleOfThree(3 * 4);\n     }\n \n     @Test\n-    public void shouldReturnBuzzFor5() {\n+    public void shouldReturnBuzzForMultiplesOf5() {\n         //Arrange or Given\n         assertMultipleOfFive(5 * 1);\n         assertMultipleOfFive(5 * 2);\n //        assertMultipleOfFive(5 * 3);\n         assertMultipleOfFive(5 * 4);\n     }\n \n-    private void assertMultipleOfFive(int givenInput) {\n+    @Test\n+    public void shouldReturnFizzBuzzForMultiplesOf15() {\n+        //Arrange or Given\n+        int leastCommonDenominator = 5 * 3;\n+        assertMultipleOf3And5(leastCommonDenominator * 1);\n+        assertMultipleOf3And5(leastCommonDenominator * 2);\n+    }\n+\n+    @Test\n+    public void shouldReturnInputForOtherPrimeNumbers() {\n+        assertNotMultipleOfThreeOrFive(1);\n+        assertNotMultipleOfThreeOrFive(2);\n+        assertNotMultipleOfThreeOrFive(7);\n+        assertNotMultipleOfThreeOrFive(11);\n+        assertNotMultipleOfThreeOrFive(13);\n+        assertNotMultipleOfThreeOrFive(17);\n+        assertNotMultipleOfThreeOrFive(19);\n+        assertNotMultipleOfThreeOrFive(23);\n+        assertNotMultipleOfThreeOrFive(29);\n+        assertNotMultipleOfThreeOrFive(31);\n+        assertNotMultipleOfThreeOrFive(37);\n+    }\n+\n+    private void assertNotMultipleOfThreeOrFive(int givenInput) {\n         //Act or When\n         String returnVal = FizzBuzz.calc(givenInput);\n \n         //Assert or Then\n-        assertEquals(\"Buzz\", returnVal);\n+        assertEquals(\"\" + givenInput, returnVal);\n     }\n \n-    @Test\n-    public void shouldReturnFizzBuzzFor15() {\n-        //Arrange or Given\n-        int givenInput = 5 * 3;\n-\n+    private void assertMultipleOfThree(int givenInput) {\n         //Act or When\n         String returnVal = FizzBuzz.calc(givenInput);\n \n         //Assert or Then\n-        assertEquals(\"FizzBuzz\", returnVal);\n+        assertEquals(\"Fizz\", returnVal);\n     }\n \n-    @Test\n-    public void shouldReturnFizzBuzzFor30() {\n-        //Arrange or Given\n-        int givenInput = 30;\n-\n+    private void assertMultipleOfFive(int givenInput) {\n         //Act or When\n         String returnVal = FizzBuzz.calc(givenInput);\n \n         //Assert or Then\n-        assertEquals(\"FizzBuzz\", returnVal);\n+        assertEquals(\"Buzz\", returnVal);\n     }\n \n-    @Test\n-    public void shouldReturnInput() {\n-        //Arrange or Given\n-        int givenInput = 1;\n-\n+    private void assertMultipleOf3And5(int givenInput) {\n         //Act or When\n         String returnVal = FizzBuzz.calc(givenInput);\n \n         //Assert or Then\n-        assertEquals(\"\" + givenInput, returnVal);\n+        assertEquals(\"FizzBuzz\", returnVal);\n     }\n \n }\n\\ No newline at end of file"
  }
]
