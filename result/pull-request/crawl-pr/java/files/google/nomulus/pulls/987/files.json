[
  {
    "sha": "79891d59f378dfeffd0113995dc3ad51c690cfc9",
    "filename": "config/presubmits.py",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/google/nomulus/blob/7d0546d596a041a3a90518dba0e937eea36ba4d0/config/presubmits.py",
    "raw_url": "https://github.com/google/nomulus/raw/7d0546d596a041a3a90518dba0e937eea36ba4d0/config/presubmits.py",
    "contents_url": "https://api.github.com/repos/google/nomulus/contents/config/presubmits.py?ref=7d0546d596a041a3a90518dba0e937eea36ba4d0",
    "patch": "@@ -210,6 +210,7 @@ def fails(self, file):\n          # CriteriaQueryBuilder is a false positive\n          \"CriteriaQueryBuilder.java\",\n          \"RdapDomainSearchAction.java\",\n+         \"RdapNameserverSearchAction.java\",\n          \"RdapSearchActionBase.java\",\n          },\n     ):"
  },
  {
    "sha": "33a2c37e4455ff2b1df21b55024f747c32d463fc",
    "filename": "core/src/main/java/google/registry/rdap/RdapDomainSearchAction.java",
    "status": "modified",
    "additions": 23,
    "deletions": 29,
    "changes": 52,
    "blob_url": "https://github.com/google/nomulus/blob/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/main/java/google/registry/rdap/RdapDomainSearchAction.java",
    "raw_url": "https://github.com/google/nomulus/raw/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/main/java/google/registry/rdap/RdapDomainSearchAction.java",
    "contents_url": "https://api.github.com/repos/google/nomulus/contents/core/src/main/java/google/registry/rdap/RdapDomainSearchAction.java?ref=7d0546d596a041a3a90518dba0e937eea36ba4d0",
    "patch": "@@ -26,6 +26,7 @@\n \n import com.google.common.collect.ImmutableCollection;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSortedSet;\n import com.google.common.collect.Iterables;\n@@ -489,40 +490,33 @@ private DomainSearchResponse searchByNameserverIp(final InetAddress inetAddress)\n               .map(VKey::from)\n               .collect(toImmutableSet());\n     } else {\n+      // Hibernate does not allow us to query @Converted array fields directly, either\n+      // in the CriteriaQuery or the raw text format. However, Postgres does -- so we\n+      // use native queries to find hosts where any of the inetAddresses match.\n+      StringBuilder queryBuilder =\n+          new StringBuilder(\n+              \"SELECT h.repo_id FROM \\\"Host\\\" h WHERE :address = ANY(h.inet_addresses) AND \"\n+                  + \"h.deletion_time = CAST(:endOfTime AS timestamptz)\");\n+      ImmutableMap.Builder<String, String> parameters =\n+          new ImmutableMap.Builder<String, String>()\n+              .put(\"address\", InetAddresses.toAddrString(inetAddress))\n+              .put(\"endOfTime\", END_OF_TIME.toString());\n+      if (desiredRegistrar.isPresent()) {\n+        queryBuilder.append(\" AND h.current_sponsor_registrar_id = :desiredRegistrar\");\n+        parameters.put(\"desiredRegistrar\", desiredRegistrar.get());\n+      }\n       hostKeys =\n           jpaTm()\n               .transact(\n                   () -> {\n-                    // Hibernate does not allow us to query @Converted array fields directly, either\n-                    // in the CriteriaQuery or the raw text format. However, Postgres does -- so we\n-                    // use native queries to find hosts where any of the inetAddresses match.\n-                    javax.persistence.Query query;\n-                    if (desiredRegistrar.isPresent()) {\n-                      query =\n-                          jpaTm()\n-                              .getEntityManager()\n-                              .createNativeQuery(\n-                                  \"SELECT h.repo_id FROM \\\"Host\\\" h WHERE :address = \"\n-                                      + \"ANY(h.inet_addresses) AND \"\n-                                      + \"h.current_sponsor_registrar_id = :desiredRegistrar AND \"\n-                                      + \"h.deletion_time = CAST(:endOfTime AS timestamptz)\")\n-                              .setParameter(\"desiredRegistrar\", desiredRegistrar.get());\n-                    } else {\n-                      query =\n-                          jpaTm()\n-                              .getEntityManager()\n-                              .createNativeQuery(\n-                                  \"SELECT h.repo_id FROM \\\"Host\\\" h WHERE :address = \"\n-                                      + \"ANY(h.inet_addresses) AND \"\n-                                      + \"h.deletion_time = CAST(:endOfTime AS timestamptz)\");\n-                    }\n+                    javax.persistence.Query query =\n+                        jpaTm()\n+                            .getEntityManager()\n+                            .createNativeQuery(queryBuilder.toString())\n+                            .setMaxResults(maxNameserversInFirstStage);\n+                    parameters.build().forEach(query::setParameter);\n                     @SuppressWarnings(\"unchecked\")\n-                    Stream<String> resultStream =\n-                        query\n-                            .setParameter(\"address\", InetAddresses.toAddrString(inetAddress))\n-                            .setParameter(\"endOfTime\", END_OF_TIME.toString())\n-                            .setMaxResults(maxNameserversInFirstStage)\n-                            .getResultStream();\n+                    Stream<String> resultStream = query.getResultStream();\n                     return resultStream\n                         .map(repoId -> VKey.create(HostResource.class, repoId))\n                         .collect(toImmutableSet());"
  },
  {
    "sha": "58b3c8c19bc50766e19a4110b1f0b8e3e0d35c90",
    "filename": "core/src/main/java/google/registry/rdap/RdapNameserverSearchAction.java",
    "status": "modified",
    "additions": 82,
    "deletions": 21,
    "changes": 103,
    "blob_url": "https://github.com/google/nomulus/blob/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/main/java/google/registry/rdap/RdapNameserverSearchAction.java",
    "raw_url": "https://github.com/google/nomulus/raw/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/main/java/google/registry/rdap/RdapNameserverSearchAction.java",
    "contents_url": "https://api.github.com/repos/google/nomulus/contents/core/src/main/java/google/registry/rdap/RdapNameserverSearchAction.java?ref=7d0546d596a041a3a90518dba0e937eea36ba4d0",
    "patch": "@@ -15,16 +15,20 @@\n package google.registry.rdap;\n \n import static google.registry.model.EppResourceUtils.loadByForeignKey;\n+import static google.registry.persistence.transaction.TransactionManagerFactory.jpaTm;\n import static google.registry.request.Action.Method.GET;\n import static google.registry.request.Action.Method.HEAD;\n+import static google.registry.util.DateTimeUtils.END_OF_TIME;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSortedSet;\n import com.google.common.collect.Iterables;\n import com.google.common.net.InetAddresses;\n import com.google.common.primitives.Booleans;\n import com.googlecode.objectify.cmd.Query;\n import google.registry.model.domain.DomainBase;\n import google.registry.model.host.HostResource;\n+import google.registry.persistence.transaction.CriteriaQueryBuilder;\n import google.registry.rdap.RdapJsonFormatter.OutputDataType;\n import google.registry.rdap.RdapMetrics.EndpointType;\n import google.registry.rdap.RdapMetrics.SearchType;\n@@ -216,33 +220,90 @@ private NameserverSearchResponse searchByNameUsingSuperordinateDomain(\n   private NameserverSearchResponse searchByNameUsingPrefix(RdapSearchPattern partialStringQuery) {\n     // Add 1 so we can detect truncation.\n     int querySizeLimit = getStandardQuerySizeLimit();\n-    Query<HostResource> query =\n-        queryItems(\n-            HostResource.class,\n-            \"fullyQualifiedHostName\",\n-            partialStringQuery,\n-            cursorString,\n-            getDeletedItemHandling(),\n-            querySizeLimit);\n-    return makeSearchResults(\n-        getMatchingResources(query, shouldIncludeDeleted(), querySizeLimit), CursorType.NAME);\n+    if (isDatastore()) {\n+      Query<HostResource> query =\n+          queryItems(\n+              HostResource.class,\n+              \"fullyQualifiedHostName\",\n+              partialStringQuery,\n+              cursorString,\n+              getDeletedItemHandling(),\n+              querySizeLimit);\n+      return makeSearchResults(\n+          getMatchingResources(query, shouldIncludeDeleted(), querySizeLimit), CursorType.NAME);\n+    } else {\n+      return jpaTm()\n+          .transact(\n+              () -> {\n+                CriteriaQueryBuilder<HostResource> queryBuilder =\n+                    queryItemsSql(\n+                        HostResource.class,\n+                        \"fullyQualifiedHostName\",\n+                        partialStringQuery,\n+                        cursorString,\n+                        getDeletedItemHandling());\n+                return makeSearchResults(\n+                    getMatchingResourcesSql(queryBuilder, shouldIncludeDeleted(), querySizeLimit),\n+                    CursorType.NAME);\n+              });\n+    }\n   }\n \n   /** Searches for nameservers by IP address, returning a JSON array of nameserver info maps. */\n   private NameserverSearchResponse searchByIp(InetAddress inetAddress) {\n     // Add 1 so we can detect truncation.\n     int querySizeLimit = getStandardQuerySizeLimit();\n-    Query<HostResource> query =\n-        queryItems(\n-            HostResource.class,\n-            \"inetAddresses\",\n-            inetAddress.getHostAddress(),\n-            Optional.empty(),\n-            cursorString,\n-            getDeletedItemHandling(),\n-            querySizeLimit);\n-    return makeSearchResults(\n-        getMatchingResources(query, shouldIncludeDeleted(), querySizeLimit), CursorType.ADDRESS);\n+    RdapResultSet<HostResource> rdapResultSet;\n+    if (isDatastore()) {\n+      Query<HostResource> query =\n+          queryItems(\n+              HostResource.class,\n+              \"inetAddresses\",\n+              inetAddress.getHostAddress(),\n+              Optional.empty(),\n+              cursorString,\n+              getDeletedItemHandling(),\n+              querySizeLimit);\n+      rdapResultSet = getMatchingResources(query, shouldIncludeDeleted(), querySizeLimit);\n+    } else {\n+      // Hibernate does not allow us to query @Converted array fields directly, either in the\n+      // CriteriaQuery or the raw text format. However, Postgres does -- so we use native queries to\n+      // find hosts where any of the inetAddresses match.\n+      StringBuilder queryBuilder =\n+          new StringBuilder(\"SELECT * FROM \\\"Host\\\" WHERE :address = ANY(inet_addresses)\");\n+      ImmutableMap.Builder<String, String> parameters =\n+          new ImmutableMap.Builder<String, String>()\n+              .put(\"address\", InetAddresses.toAddrString(inetAddress));\n+      if (getDeletedItemHandling().equals(DeletedItemHandling.EXCLUDE)) {\n+        queryBuilder.append(\" AND deletion_time = CAST(:endOfTime AS timestamptz)\");\n+        parameters.put(\"endOfTime\", END_OF_TIME.toString());\n+      }\n+      if (cursorString.isPresent()) {\n+        // cursorString here must be the repo ID\n+        queryBuilder.append(\" AND repo_id > :repoId\");\n+        parameters.put(\"repoId\", cursorString.get());\n+      }\n+      if (getDesiredRegistrar().isPresent()) {\n+        queryBuilder.append(\" AND current_sponsor_registrar_id = :desiredRegistrar\");\n+        parameters.put(\"desiredRegistrar\", getDesiredRegistrar().get());\n+      }\n+      queryBuilder.append(\" ORDER BY repo_id ASC\");\n+      rdapResultSet =\n+          jpaTm()\n+              .transact(\n+                  () -> {\n+                    javax.persistence.Query query =\n+                        jpaTm()\n+                            .getEntityManager()\n+                            .createNativeQuery(queryBuilder.toString(), HostResource.class)\n+                            .setMaxResults(querySizeLimit);\n+                    parameters.build().forEach(query::setParameter);\n+                    @SuppressWarnings(\"unchecked\")\n+                    List<HostResource> resultList = query.getResultList();\n+                    return filterResourcesByVisibility(resultList, querySizeLimit);\n+                  });\n+    }\n+    return makeSearchResults(rdapResultSet, CursorType.ADDRESS);\n   }\n \n   /** Output JSON for a lists of hosts contained in an {@link RdapResultSet}. */"
  },
  {
    "sha": "29a72e3cc9f76886eecea10753b88a5587ee0025",
    "filename": "core/src/main/java/google/registry/rdap/RdapSearchActionBase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/google/nomulus/blob/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/main/java/google/registry/rdap/RdapSearchActionBase.java",
    "raw_url": "https://github.com/google/nomulus/raw/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/main/java/google/registry/rdap/RdapSearchActionBase.java",
    "contents_url": "https://api.github.com/repos/google/nomulus/contents/core/src/main/java/google/registry/rdap/RdapSearchActionBase.java?ref=7d0546d596a041a3a90518dba0e937eea36ba4d0",
    "patch": "@@ -214,7 +214,7 @@ protected boolean shouldBeVisible(Registrar registrar) {\n     }\n   }\n \n-  private <T extends EppResource> RdapResultSet<T> filterResourcesByVisibility(\n+  protected <T extends EppResource> RdapResultSet<T> filterResourcesByVisibility(\n       List<T> queryResult, int querySizeLimit) {\n     // If we are including deleted resources, we need to check that we're authorized for each one.\n     List<T> resources = new ArrayList<>();"
  },
  {
    "sha": "48ec71b700969bd2d3d22baf8b151ef35c4783de",
    "filename": "core/src/test/java/google/registry/rdap/RdapNameserverSearchActionTest.java",
    "status": "modified",
    "additions": 91,
    "deletions": 63,
    "changes": 154,
    "blob_url": "https://github.com/google/nomulus/blob/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/test/java/google/registry/rdap/RdapNameserverSearchActionTest.java",
    "raw_url": "https://github.com/google/nomulus/raw/7d0546d596a041a3a90518dba0e937eea36ba4d0/core/src/test/java/google/registry/rdap/RdapNameserverSearchActionTest.java",
    "contents_url": "https://api.github.com/repos/google/nomulus/contents/core/src/test/java/google/registry/rdap/RdapNameserverSearchActionTest.java?ref=7d0546d596a041a3a90518dba0e937eea36ba4d0",
    "patch": "@@ -43,13 +43,17 @@\n import google.registry.rdap.RdapMetrics.SearchType;\n import google.registry.rdap.RdapMetrics.WildcardType;\n import google.registry.rdap.RdapSearchResults.IncompletenessWarningType;\n+import google.registry.testing.DualDatabaseTest;\n import google.registry.testing.FakeResponse;\n+import google.registry.testing.TestOfyAndSql;\n+import google.registry.testing.TestOfyOnly;\n+import google.registry.testing.TestSqlOnly;\n import java.net.URLDecoder;\n import java.util.Optional;\n import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n \n /** Unit tests for {@link RdapNameserverSearchAction}. */\n+@DualDatabaseTest\n class RdapNameserverSearchActionTest extends RdapSearchActionTestCase<RdapNameserverSearchAction> {\n \n   RdapNameserverSearchActionTest() {\n@@ -231,15 +235,15 @@ private void verifyErrorMetrics(Optional<Long> numHostsRetrieved, int statusCode\n     verifyMetrics(numHostsRetrieved, IncompletenessWarningType.COMPLETE);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testInvalidPath_rejected() {\n     action.requestPath = actionPath + \"/path\";\n     action.run();\n     assertThat(response.getStatus()).isEqualTo(400);\n     verifyErrorMetrics(Optional.empty(), 400);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testInvalidRequest_rejected() {\n     action.run();\n     assertThat(parseJsonObject(response.getPayload()))\n@@ -248,7 +252,7 @@ void testInvalidRequest_rejected() {\n     verifyErrorMetrics(Optional.empty(), 400);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testInvalidSuffix_rejected() {\n     assertThat(generateActualJsonWithName(\"exam*ple\"))\n         .isEqualTo(\n@@ -261,7 +265,7 @@ void testInvalidSuffix_rejected() {\n     verifyErrorMetrics(Optional.empty(), 422);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNonexistentDomainSuffix_unprocessable() {\n     assertThat(generateActualJsonWithName(\"exam*.foo.bar\"))\n         .isEqualTo(\n@@ -272,7 +276,7 @@ void testNonexistentDomainSuffix_unprocessable() {\n     verifyErrorMetrics(Optional.empty(), 422);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testMultipleWildcards_rejected() {\n     assertThat(generateActualJsonWithName(\"*.*\"))\n         .isEqualTo(\n@@ -285,7 +289,7 @@ void testMultipleWildcards_rejected() {\n     verifyErrorMetrics(Optional.empty(), 422);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNoCharactersToMatch_rejected() {\n     assertThat(generateActualJsonWithName(\"*\"))\n         .isEqualTo(\n@@ -294,7 +298,7 @@ void testNoCharactersToMatch_rejected() {\n     verifyErrorMetrics(Optional.empty(), 422);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testFewerThanTwoCharactersToMatch_rejected() {\n     assertThat(generateActualJsonWithName(\"a*\"))\n         .isEqualTo(\n@@ -303,7 +307,7 @@ void testFewerThanTwoCharactersToMatch_rejected() {\n     verifyErrorMetrics(Optional.empty(), 422);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_lol_found() {\n     assertThat(generateActualJsonWithName(\"ns1.cat.lol\"))\n         .isEqualTo(\n@@ -313,7 +317,7 @@ void testNameMatch_ns1_cat_lol_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_lol_foundWithUpperCase() {\n     assertThat(generateActualJsonWithName(\"Ns1.CaT.lOl\"))\n         .isEqualTo(\n@@ -323,23 +327,23 @@ void testNameMatch_ns1_cat_lol_foundWithUpperCase() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_lol_found_sameRegistrarRequested() {\n     action.registrarParam = Optional.of(\"TheRegistrar\");\n     generateActualJsonWithName(\"ns1.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_lol_notFound_differentRegistrarRequested() {\n     action.registrarParam = Optional.of(\"unicoderegistrar\");\n     generateActualJsonWithName(\"ns1.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics(Optional.of(1L), 404);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns2_cat_lol_found() {\n     assertThat(generateActualJsonWithName(\"ns2.cat.lol\"))\n         .isEqualTo(\n@@ -354,15 +358,15 @@ void testNameMatch_ns2_cat_lol_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat2_lol_found() {\n     // ns1.cat2.lol has two IP addresses; just test that we are able to find it\n     generateActualJsonWithName(\"ns1.cat2.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_external_found() {\n     assertThat(generateActualJsonWithName(\"ns1.cat.external\"))\n         .isEqualTo(\n@@ -372,7 +376,7 @@ void testNameMatch_ns1_cat_external_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_idn_unicode_found() {\n     assertThat(generateActualJsonWithName(\"ns1.cat.みんな\"))\n         .isEqualTo(\n@@ -389,7 +393,7 @@ void testNameMatch_ns1_cat_idn_unicode_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_idn_punycode_found() {\n     assertThat(generateActualJsonWithName(\"ns1.cat.xn--q9jyb4c\"))\n         .isEqualTo(\n@@ -404,7 +408,7 @@ void testNameMatch_ns1_cat_idn_punycode_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_1_test_found() {\n     assertThat(generateActualJsonWithName(\"ns1.cat.1.test\"))\n         .isEqualTo(\n@@ -414,88 +418,88 @@ void testNameMatch_ns1_cat_1_test_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_nsstar_cat_lol_found() {\n     generateActualJsonWithName(\"ns*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_nsstar_cat_lol_found_sameRegistrarRequested() {\n     action.registrarParam = Optional.of(\"TheRegistrar\");\n     generateActualJsonWithName(\"ns*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_nsstar_cat_lol_notFound_differentRegistrarRequested() {\n     action.registrarParam = Optional.of(\"unicoderegistrar\");\n     generateActualJsonWithName(\"ns*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics(Optional.of(2L), 404);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_nstar_cat_lol_found() {\n     generateActualJsonWithName(\"n*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_star_cat_lol_found() {\n     generateActualJsonWithName(\"*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_star_cat_lol_found_sameRegistrarRequested() {\n     action.registrarParam = Optional.of(\"TheRegistrar\");\n     generateActualJsonWithName(\"*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_star_cat_lol_notFound_differentRegistrarRequested() {\n     action.registrarParam = Optional.of(\"unicoderegistrar\");\n     generateActualJsonWithName(\"*.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics(Optional.of(2L), 404);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_nsstar_found() {\n     generateActualJsonWithName(\"ns*\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(5, IncompletenessWarningType.TRUNCATED);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_cat_lstar_found() {\n     generateActualJsonWithName(\"ns1.cat.l*\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_ns1_castar_found() {\n     generateActualJsonWithName(\"ns1.ca*\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(5, IncompletenessWarningType.TRUNCATED);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_dogstar_notFound() {\n     generateActualJsonWithName(\"dog*\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_nontruncatedResultSet() {\n     createManyHosts(4);\n     assertThat(generateActualJsonWithName(\"nsx*.cat.lol\"))\n@@ -504,7 +508,7 @@ void testNameMatch_nontruncatedResultSet() {\n     verifyMetrics(4);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_truncatedResultSet() {\n     createManyHosts(5);\n     assertThat(generateActualJsonWithName(\"nsx*.cat.lol\"))\n@@ -515,7 +519,7 @@ void testNameMatch_truncatedResultSet() {\n     verifyMetrics(5, IncompletenessWarningType.TRUNCATED);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_reallyTruncatedResultSet() {\n     createManyHosts(9);\n     assertThat(generateActualJsonWithName(\"nsx*.cat.lol\"))\n@@ -527,7 +531,7 @@ void testNameMatch_reallyTruncatedResultSet() {\n     verifyMetrics(9, IncompletenessWarningType.TRUNCATED);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeletedHost_foundTheOtherHost() {\n     persistResource(hostNs1CatLol.asBuilder().setDeletionTime(clock.nowUtc().minusDays(1)).build());\n     assertThat(generateActualJsonWithName(\"ns*.cat.lol\"))\n@@ -543,7 +547,7 @@ void testNameMatchDeletedHost_foundTheOtherHost() {\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeletedHost_notFound() {\n     persistResource(hostNs1CatLol.asBuilder().setDeletionTime(clock.nowUtc().minusDays(1)).build());\n     assertThat(generateActualJsonWithName(\"ns1.cat.lol\"))\n@@ -552,7 +556,7 @@ void testNameMatchDeletedHost_notFound() {\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeletedHostWithWildcard_notFound() {\n     persistResource(hostNs1CatLol.asBuilder().setDeletionTime(clock.nowUtc().minusDays(1)).build());\n     assertThat(generateActualJsonWithName(\"cat.lo*\"))\n@@ -561,15 +565,15 @@ void testNameMatchDeletedHostWithWildcard_notFound() {\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_notFound_includeDeletedNotSpecified() {\n     createDeletedHost();\n     generateActualJsonWithName(\"nsdeleted.cat.lol\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_notFound_notLoggedIn() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -578,7 +582,7 @@ void testNameMatchDeleted_notFound_notLoggedIn() {\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_notFound_loggedInAsDifferentRegistrar() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -588,7 +592,7 @@ void testNameMatchDeleted_notFound_loggedInAsDifferentRegistrar() {\n     verifyErrorMetrics(Optional.of(1L), 404);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_found_loggedInAsCorrectRegistrar() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -598,7 +602,7 @@ void testNameMatchDeleted_found_loggedInAsCorrectRegistrar() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_found_loggedInAsAdmin() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -608,7 +612,7 @@ void testNameMatchDeleted_found_loggedInAsAdmin() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_found_loggedInAndRequestingSameRegistrar() {\n     createDeletedHost();\n     action.registrarParam = Optional.of(\"TheRegistrar\");\n@@ -619,7 +623,7 @@ void testNameMatchDeleted_found_loggedInAndRequestingSameRegistrar() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatchDeleted_notFound_loggedInButRequestingDifferentRegistrar() {\n     createDeletedHost();\n     action.registrarParam = Optional.of(\"unicoderegistrar\");\n@@ -672,7 +676,7 @@ private void checkCursorNavigation(\n     }\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testNameMatch_cursorNavigationWithSuperordinateDomain() throws Exception {\n     createManyHosts(9);\n     checkCursorNavigation(\n@@ -690,8 +694,8 @@ void testNameMatch_cursorNavigationWithSuperordinateDomain() throws Exception {\n             \"nsx9.cat.lol\"));\n   }\n \n-  @Test\n-  void testNameMatch_cursorNavigationWithPrefix() throws Exception {\n+  @TestOfyOnly\n+  void testNameMatch_cursorNavigationWithPrefix_ofy() throws Exception {\n     createManyHosts(9);\n     checkCursorNavigation(\n         true,\n@@ -714,14 +718,38 @@ void testNameMatch_cursorNavigationWithPrefix() throws Exception {\n             \"nsx9.cat.lol\"));\n   }\n \n-  @Test\n+  @TestSqlOnly\n+  void testNameMatch_cursorNavigationWithPrefix_sql() throws Exception {\n+    createManyHosts(9);\n+    checkCursorNavigation(\n+        true,\n+        \"ns*\",\n+        ImmutableList.of(\n+            \"ns1.cat.1.test\",\n+            \"ns1.cat2.lol\",\n+            \"ns1.cat.external\",\n+            \"ns1.cat.lol\",\n+            \"ns1.cat.xn--q9jyb4c\",\n+            \"ns2.cat.lol\",\n+            \"nsx1.cat.lol\",\n+            \"nsx2.cat.lol\",\n+            \"nsx3.cat.lol\",\n+            \"nsx4.cat.lol\",\n+            \"nsx5.cat.lol\",\n+            \"nsx6.cat.lol\",\n+            \"nsx7.cat.lol\",\n+            \"nsx8.cat.lol\",\n+            \"nsx9.cat.lol\"));\n+  }\n+\n+  @TestOfyAndSql\n   void testAddressMatch_invalidAddress() {\n     generateActualJsonWithIp(\"It is to laugh\");\n     assertThat(response.getStatus()).isEqualTo(400);\n     verifyErrorMetrics(Optional.empty(), 400);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchV4Address_found() {\n     assertThat(generateActualJsonWithIp(\"1.2.3.4\"))\n         .isEqualTo(\n@@ -731,38 +759,38 @@ void testAddressMatchV4Address_found() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchV4Address_found_sameRegistrarRequested() {\n     action.registrarParam = Optional.of(\"TheRegistrar\");\n     generateActualJsonWithIp(\"1.2.3.4\");\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchV4Address_notFound_differentRegistrarRequested() {\n     action.registrarParam = Optional.of(\"unicoderegistrar\");\n     generateActualJsonWithIp(\"1.2.3.4\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchV6Address_foundMultiple() {\n     assertThat(generateActualJsonWithIp(\"bad:f00d:cafe::15:beef\"))\n         .isEqualTo(loadJsonFile(\"rdap_multiple_hosts.json\"));\n     assertThat(response.getStatus()).isEqualTo(200);\n     verifyMetrics(2);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchLocalhost_notFound() {\n     generateActualJsonWithIp(\"127.0.0.1\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeletedHost_notFound() {\n     persistResource(hostNs1CatLol.asBuilder().setDeletionTime(clock.nowUtc().minusDays(1)).build());\n     assertThat(generateActualJsonWithIp(\"1.2.3.4\"))\n@@ -771,7 +799,7 @@ void testAddressMatchDeletedHost_notFound() {\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatch_nontruncatedResultSet() {\n     createManyHosts(4);\n     assertThat(generateActualJsonWithIp(\"5.5.5.1\"))\n@@ -780,7 +808,7 @@ void testAddressMatch_nontruncatedResultSet() {\n     verifyMetrics(4);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatch_truncatedResultSet() {\n     createManyHosts(5);\n     assertThat(generateActualJsonWithIp(\"5.5.5.1\"))\n@@ -791,7 +819,7 @@ void testAddressMatch_truncatedResultSet() {\n     verifyMetrics(5, IncompletenessWarningType.TRUNCATED);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatch_reallyTruncatedResultSet() {\n     createManyHosts(9);\n     assertThat(generateActualJsonWithIp(\"5.5.5.1\"))\n@@ -804,15 +832,15 @@ void testAddressMatch_reallyTruncatedResultSet() {\n     verifyMetrics(5, IncompletenessWarningType.TRUNCATED);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_notFound_includeDeletedNotSpecified() {\n     createDeletedHost();\n     generateActualJsonWithIp(\"4.3.2.1\");\n     assertThat(response.getStatus()).isEqualTo(404);\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_notFound_notLoggedIn() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -821,7 +849,7 @@ void testAddressMatchDeleted_notFound_notLoggedIn() {\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_notFound_loggedInAsDifferentRegistrar() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -831,7 +859,7 @@ void testAddressMatchDeleted_notFound_loggedInAsDifferentRegistrar() {\n     verifyErrorMetrics(Optional.of(1L), 404);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_found_loggedInAsCorrectRegistrar() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -841,7 +869,7 @@ void testAddressMatchDeleted_found_loggedInAsCorrectRegistrar() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_found_loggedInAsAdmin() {\n     createDeletedHost();\n     action.includeDeletedParam = Optional.of(true);\n@@ -851,7 +879,7 @@ void testAddressMatchDeleted_found_loggedInAsAdmin() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_found_loggedInAndRequestingSameRegisrar() {\n     createDeletedHost();\n     action.registrarParam = Optional.of(\"TheRegistrar\");\n@@ -862,7 +890,7 @@ void testAddressMatchDeleted_found_loggedInAndRequestingSameRegisrar() {\n     verifyMetrics(1);\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatchDeleted_notFound_loggedButRequestingDiffentRegistrar() {\n     createDeletedHost();\n     action.registrarParam = Optional.of(\"unicoderegistrar\");\n@@ -873,7 +901,7 @@ void testAddressMatchDeleted_notFound_loggedButRequestingDiffentRegistrar() {\n     verifyErrorMetrics();\n   }\n \n-  @Test\n+  @TestOfyAndSql\n   void testAddressMatch_cursorNavigation() throws Exception {\n     createManyHosts(9);\n     checkCursorNavigation("
  }
]
