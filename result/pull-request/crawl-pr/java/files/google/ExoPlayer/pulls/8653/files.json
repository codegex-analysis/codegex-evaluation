[
  {
    "sha": "2fbf213ff6f2bf6bc867f31b6fcb6711689c4fe6",
    "filename": "library/common/jacoco.exec",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/common/jacoco.exec",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/common/jacoco.exec",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/common/jacoco.exec?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb"
  },
  {
    "sha": "874c67f35901780ac1685fbebd3a1a5dafc17078",
    "filename": "library/core/jacoco.exec",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/jacoco.exec",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/jacoco.exec",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/jacoco.exec?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb"
  },
  {
    "sha": "3491d688538b0a2f2f4ead58beeaac5e0f3b3152",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java",
    "status": "modified",
    "additions": 3,
    "deletions": 43,
    "changes": 46,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/span/RubySpan.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -16,12 +16,6 @@\n  */\n package com.google.android.exoplayer2.text.span;\n \n-import static java.lang.annotation.RetentionPolicy.SOURCE;\n-\n-import androidx.annotation.IntDef;\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.Retention;\n-\n /**\n  * A styling span for ruby text.\n  *\n@@ -38,48 +32,14 @@\n // rubies (e.g. HTML <rp> tag).\n public final class RubySpan {\n \n-  /** The ruby position is unknown. */\n-  public static final int POSITION_UNKNOWN = -1;\n-\n-  /**\n-   * The ruby text should be positioned above the base text.\n-   *\n-   * <p>For vertical text it should be positioned to the right, same as CSS's <a\n-   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position\">ruby-position</a>.\n-   */\n-  public static final int POSITION_OVER = 1;\n-\n-  /**\n-   * The ruby text should be positioned below the base text.\n-   *\n-   * <p>For vertical text it should be positioned to the left, same as CSS's <a\n-   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position\">ruby-position</a>.\n-   */\n-  public static final int POSITION_UNDER = 2;\n-\n-  /**\n-   * The possible positions of the ruby text relative to the base text.\n-   *\n-   * <p>One of:\n-   *\n-   * <ul>\n-   *   <li>{@link #POSITION_UNKNOWN}\n-   *   <li>{@link #POSITION_OVER}\n-   *   <li>{@link #POSITION_UNDER}\n-   * </ul>\n-   */\n-  @Documented\n-  @Retention(SOURCE)\n-  @IntDef({POSITION_UNKNOWN, POSITION_OVER, POSITION_UNDER})\n-  public @interface Position {}\n-\n   /** The ruby text, i.e. the smaller explanatory characters. */\n   public final String rubyText;\n \n   /** The position of the ruby text relative to the base text. */\n-  @Position public final int position;\n+  @TextAnnotation.Position\n+  public final int position;\n \n-  public RubySpan(String rubyText, @Position int position) {\n+  public RubySpan(String rubyText, @TextAnnotation.Position int position) {\n     this.rubyText = rubyText;\n     this.position = position;\n   }"
  },
  {
    "sha": "65a14b61c2bad8874249107c579c8895a8499abf",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/span/TextAnnotation.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/span/TextAnnotation.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/span/TextAnnotation.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/span/TextAnnotation.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -0,0 +1,47 @@\n+package com.google.android.exoplayer2.text.span;\n+\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+import androidx.annotation.IntDef;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+/**\n+ * Class used to describe properties of a text annotation (i.e. ruby, text emphasis marks)\n+ */\n+public class TextAnnotation {\n+  /** The text annotation position is unknown. */\n+  public static final int POSITION_UNKNOWN = -1;\n+\n+  /**\n+   * For horizontal text, the text annotation should be positioned above the base text.\n+   *\n+   * <p>For vertical text it should be positioned to the right, same as CSS's <a\n+   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position\">ruby-position</a>.\n+   */\n+  public static final int POSITION_BEFORE = 1;\n+\n+  /**\n+   * For horizontal text, the text annotation should be positioned below the base text.\n+   *\n+   * <p>For vertical text it should be positioned to the left, same as CSS's <a\n+   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position\">ruby-position</a>.\n+   */\n+  public static final int POSITION_AFTER = 2;\n+\n+  /**\n+   * The possible positions of the annotation text relative to the base text.\n+   *\n+   * <p>One of:\n+   *\n+   * <ul>\n+   *   <li>{@link #POSITION_UNKNOWN}\n+   *   <li>{@link #POSITION_BEFORE}\n+   *   <li>{@link #POSITION_AFTER}\n+   * </ul>\n+   */\n+  @Documented\n+  @Retention(SOURCE)\n+  @IntDef({POSITION_UNKNOWN, POSITION_BEFORE, POSITION_AFTER})\n+  public @interface Position {}\n+}"
  },
  {
    "sha": "221e0305d672f86780ca9c0ce5d0a932e9cc43a3",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/span/TextEmphasisSpan.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (C) 2021 The Android Open Source Project\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.google.android.exoplayer2.text.span;\n+\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+import androidx.annotation.IntDef;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+public final class TextEmphasisSpan {\n+  public static final int MARK_SHAPE_NONE = 0;\n+  public static final int MARK_SHAPE_CIRCLE = 1;\n+  public static final int MARK_SHAPE_DOT = 2;\n+  public static final int MARK_SHAPE_SESAME = 3;\n+\n+  /**\n+   * The possible mark shapes that can be used.\n+   *\n+   * <p>One of:\n+   *\n+   * <ul>\n+   *   <li>{@link #MARK_SHAPE_NONE}\n+   *   <li>{@link #MARK_SHAPE_CIRCLE}\n+   *   <li>{@link #MARK_SHAPE_DOT}\n+   *   <li>{@link #MARK_SHAPE_SESAME}\n+   * </ul>\n+   */\n+  @Documented\n+  @Retention(SOURCE)\n+  @IntDef({MARK_SHAPE_NONE, MARK_SHAPE_CIRCLE, MARK_SHAPE_DOT, MARK_SHAPE_SESAME})\n+  public @interface MarkShape {\n+  }\n+  public static final int MARK_FILL_UNSPECIFIED = 0;\n+  public static final int MARK_FILL_FILLED = 1;\n+  public static final int MARK_FILL_OPEN = 2;\n+\n+  /**\n+   * The possible mark fills that can be used.\n+   *\n+   * <p>One of:\n+   *\n+   * <ul>\n+   *   <li>{@link #MARK_FILL_UNSPECIFIED}\n+   *   <li>{@link #MARK_FILL_FILLED}\n+   *   <li>{@link #MARK_FILL_OPEN}\n+   * </ul>\n+   */\n+  @Documented\n+  @Retention(SOURCE)\n+  @IntDef({MARK_FILL_UNSPECIFIED, MARK_FILL_FILLED, MARK_FILL_OPEN})\n+  public @interface MarkFill {\n+  }\n+\n+\n+  /**\n+   * The mark shape used for text emphasis\n+   */\n+  public @MarkShape int markShape;\n+\n+  /**\n+   * The mark fill for the text emphasis mark\n+   */\n+  public @MarkShape int markFill;\n+\n+\n+  /**\n+   * The position of the text emphasis relative to the base text\n+   */\n+  @TextAnnotation.Position\n+  public final int position;\n+\n+\n+  public TextEmphasisSpan(@MarkShape int shape, @MarkFill int fill,\n+      @TextAnnotation.Position int position) {\n+    this.markShape = shape;\n+    this.markFill = fill;\n+    this.position = position;\n+  }\n+}"
  },
  {
    "sha": "32d98138ac846f98fd71409e2035d5fdcecb3f00",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java",
    "status": "added",
    "additions": 212,
    "deletions": 0,
    "changes": 212,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TextEmphasis.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (C) 2021 The Android Open Source Project\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.google.android.exoplayer2.text.ttml;\n+\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+import android.text.TextUtils;\n+import androidx.annotation.IntDef;\n+import androidx.annotation.Nullable;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.util.Set;\n+\n+/**\n+ * This class is used to emphasize text using markers above or below the text. For example, markers\n+ * known as boutens are commonly used in Japanese texts. Boutens are dots placed above or below a\n+ * word or phrase that act as literal points of emphasis, equivalent to the use of italics in\n+ * English. Boutens can help express implied meanings which provide a richer and more dynamic\n+ * translation.\n+ */\n+/* package */ final class TextEmphasis {\n+\n+  /**\n+   *  Mark shape AUTO is to be resolved at rendering time. Hence, it is not defined in\n+   *  {@link TextEmphasisSpan.MarkShape}\n+   */\n+  public static final int MARK_SHAPE_AUTO = 1 << 8;\n+\n+  @Documented\n+  @Retention(SOURCE)\n+  @IntDef({TextEmphasisSpan.MARK_SHAPE_NONE,\n+      TextEmphasisSpan.MARK_SHAPE_CIRCLE,\n+      TextEmphasisSpan.MARK_SHAPE_DOT,\n+      TextEmphasisSpan.MARK_SHAPE_SESAME,\n+      // Extending the definition in TextEmphasisSpan.MarkShape for intermediate values\n+      MARK_SHAPE_AUTO\n+  })\n+\n+  @interface MarkShape {\n+  }\n+\n+  @MarkShape\n+  final int markShape;\n+\n+  /**\n+   * The mark style of the text emphasis.\n+   */\n+  @TextEmphasisSpan.MarkFill\n+  final int markFill;\n+\n+  /**\n+   *  Position OUTSIDE is to be resolved at rendering time. Hence, it is not defined in\n+   *  {@link TextAnnotation.Position}\n+   */\n+  static final int POSITION_OUTSIDE = 1 << 8;\n+\n+  @Documented\n+  @Retention(SOURCE)\n+  @IntDef({TextAnnotation.POSITION_UNKNOWN,\n+      TextAnnotation.POSITION_BEFORE,\n+      TextAnnotation.POSITION_AFTER,\n+      // Extending the definition in TextAnnotation.Position for intermediate values\n+      POSITION_OUTSIDE\n+  })\n+  @interface Position {}\n+\n+  /**\n+   * The position of the text emphasis relative to the base text.\n+   */\n+  @Position final int position;\n+\n+  private static final Set<String> singleStyleValues = ImmutableSet.of(\n+      TtmlNode.TEXT_EMPHASIS_AUTO,\n+      TtmlNode.TEXT_EMPHASIS_NONE\n+  );\n+\n+  private static final Set<String> markShapeValues = ImmutableSet.of(\n+      TtmlNode.TEXT_EMPHASIS_MARK_DOT,\n+      TtmlNode.TEXT_EMPHASIS_MARK_SESAME,\n+      TtmlNode.TEXT_EMPHASIS_MARK_CIRCLE\n+    );\n+\n+  private static final Set<String> markFillValues = ImmutableSet.of(\n+      TtmlNode.TEXT_EMPHASIS_MARK_FILLED,\n+      TtmlNode.TEXT_EMPHASIS_MARK_OPEN\n+  );\n+\n+  private static final Set<String> positionValues = ImmutableSet.of(\n+      TtmlNode.ANNOTATION_POSITION_AFTER,\n+      TtmlNode.ANNOTATION_POSITION_BEFORE,\n+      TtmlNode.ANNOTATION_POSITION_OUTSIDE\n+  );\n+\n+  private TextEmphasis(@MarkShape int shape, @TextEmphasisSpan.MarkFill int fill,\n+      @TextAnnotation.Position int position) {\n+    this.markShape = shape;\n+    this.markFill = fill;\n+    this.position = position;\n+  }\n+\n+  @Nullable public static TextEmphasis createTextEmphasis(@Nullable String value) {\n+    if (TextUtils.isEmpty(value)) {\n+      return null;\n+    }\n+\n+    Set<String> nodes = Sets.newHashSet(value.split(\"\\\\s+\"));\n+    if (nodes.size() == 0) {\n+      return null;\n+    }\n+    return parseNodes(nodes);\n+  }\n+\n+  /**\n+   * Parses the text emphasis description\n+   * See https://www.w3.org/TR/ttml2/#style-attribute-textEmphasis\n+   *\n+   * The parser considers emphasis-style and emphasis-position independently\n+   * If a valid style is not found, it reverts to the default style.\n+   * If a valid position is not found, it reverts to the default position.\n+   *\n+   * Not implemented:\n+   *   - emphasis-color\n+   *   - quoted string emphasis-style\n+   *\n+   * @param nodes - the text emphasis description\n+   * @return TextEmphasis object encapsulating the text emphasis description\n+   */\n+  private static @Nullable TextEmphasis parseNodes(Set<String> nodes) {\n+    @MarkShape int markShape;\n+    @TextEmphasisSpan.MarkFill int markFill = TextEmphasisSpan.MARK_FILL_UNSPECIFIED;\n+    Set<String> styleSet = Sets.intersection(singleStyleValues, nodes).immutableCopy();\n+    if (styleSet.size() > 0) {\n+      // If \"none\" or \"auto\" are found in the description, ignore the other style (fill, shape)\n+      // attributes.\n+      markShape = TtmlNode.TEXT_EMPHASIS_NONE.equals(styleSet.iterator().next())\n+          ? TextEmphasisSpan.MARK_SHAPE_NONE : MARK_SHAPE_AUTO;\n+    } else {\n+      Set<String> fillSet = Sets.intersection(markFillValues, nodes).immutableCopy();\n+      Set<String> shapeSet = Sets.intersection(markShapeValues, nodes).immutableCopy();\n+      if (fillSet.size() == 0 && shapeSet.size() == 0) {\n+        // If an implementation does not recognize or otherwise distinguish an emphasis style value,\n+        // then it must be interpreted as if a style of auto were specified; as such, an\n+        // implementation that supports text emphasis marks must minimally support the auto value.\n+        // https://www.w3.org/TR/ttml2/#style-value-emphasis-style\n+        markShape = MARK_SHAPE_AUTO;\n+      } else {\n+        if (fillSet.size() > 0) {\n+          markFill = TtmlNode.TEXT_EMPHASIS_MARK_OPEN.equals(fillSet.iterator().next())\n+              ? TextEmphasisSpan.MARK_FILL_OPEN\n+              : TextEmphasisSpan.MARK_FILL_FILLED;\n+        } else {\n+          markFill = TextEmphasisSpan.MARK_FILL_FILLED;\n+        }\n+\n+        if (shapeSet.size() > 0) {\n+          switch (shapeSet.iterator().next()) {\n+            case TtmlNode.TEXT_EMPHASIS_MARK_DOT:\n+              markShape = TextEmphasisSpan.MARK_SHAPE_DOT;\n+              break;\n+            case TtmlNode.TEXT_EMPHASIS_MARK_SESAME:\n+              markShape = TextEmphasisSpan.MARK_SHAPE_SESAME;\n+              break;\n+            case TtmlNode.TEXT_EMPHASIS_MARK_CIRCLE:\n+            default:\n+              markShape = TextEmphasisSpan.MARK_SHAPE_CIRCLE;\n+          }\n+        } else {\n+          markShape = TextEmphasisSpan.MARK_SHAPE_CIRCLE;\n+        }\n+      }\n+    }\n+\n+    Set<String> positionSet = Sets.intersection(positionValues, nodes).immutableCopy();\n+\n+    // If no emphasis position is specified, then the emphasis position must be interpreted as if\n+    // a position of outside were specified.\n+    // https://www.w3.org/TR/2018/REC-ttml2-20181108/#style-attribute-textEmphasis\n+    @Position int position = POSITION_OUTSIDE;\n+    if (positionSet.size() > 0) {\n+      switch (positionSet.iterator().next()) {\n+        case TtmlNode.ANNOTATION_POSITION_AFTER:\n+          position = TextAnnotation.POSITION_AFTER;\n+          break;\n+        case TtmlNode.ANNOTATION_POSITION_OUTSIDE:\n+          position = POSITION_OUTSIDE;\n+          break;\n+        case TtmlNode.ANNOTATION_POSITION_BEFORE:\n+        default:\n+          position = TextAnnotation.POSITION_BEFORE;\n+      }\n+    }\n+    return new TextEmphasis(markShape, markFill, position);\n+  }\n+}"
  },
  {
    "sha": "7aa46ddadaafc0ea3f3415b455260bbcccbe502a",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlDecoder.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -22,7 +22,7 @@\n import com.google.android.exoplayer2.text.SimpleSubtitleDecoder;\n import com.google.android.exoplayer2.text.Subtitle;\n import com.google.android.exoplayer2.text.SubtitleDecoderException;\n-import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n import com.google.android.exoplayer2.util.Assertions;\n import com.google.android.exoplayer2.util.ColorParser;\n import com.google.android.exoplayer2.util.Log;\n@@ -582,11 +582,11 @@ private static TtmlRegion parseRegionAttributes(\n           break;\n         case TtmlNode.ATTR_TTS_RUBY_POSITION:\n           switch (Util.toLowerInvariant(attributeValue)) {\n-            case TtmlNode.RUBY_BEFORE:\n-              style = createIfNull(style).setRubyPosition(RubySpan.POSITION_OVER);\n+            case TtmlNode.ANNOTATION_POSITION_BEFORE:\n+              style = createIfNull(style).setRubyPosition(TextAnnotation.POSITION_BEFORE);\n               break;\n-            case TtmlNode.RUBY_AFTER:\n-              style = createIfNull(style).setRubyPosition(RubySpan.POSITION_UNDER);\n+            case TtmlNode.ANNOTATION_POSITION_AFTER:\n+              style = createIfNull(style).setRubyPosition(TextAnnotation.POSITION_AFTER);\n               break;\n             default:\n               // ignore\n@@ -609,6 +609,10 @@ private static TtmlRegion parseRegionAttributes(\n               break;\n           }\n           break;\n+        case TtmlNode.ATTR_TTS_TEXT_EMPHASIS:\n+          style = createIfNull(style).setTextEmphasis(\n+              TextEmphasis.createTextEmphasis(Util.toLowerInvariant(attributeValue)));\n+          break;\n         default:\n           // ignore\n           break;"
  },
  {
    "sha": "ba3dc90863402132ee8f2886eaaf3483dee1e354",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java",
    "status": "modified",
    "additions": 28,
    "deletions": 9,
    "changes": 37,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlNode.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -69,6 +69,7 @@\n   public static final String ATTR_TTS_TEXT_DECORATION = \"textDecoration\";\n   public static final String ATTR_TTS_TEXT_ALIGN = \"textAlign\";\n   public static final String ATTR_TTS_TEXT_COMBINE = \"textCombine\";\n+  public static final String ATTR_TTS_TEXT_EMPHASIS = \"textEmphasis\";\n   public static final String ATTR_TTS_WRITING_MODE = \"writingMode\";\n \n   // Values for ruby\n@@ -79,9 +80,11 @@\n   public static final String RUBY_TEXT_CONTAINER = \"textContainer\";\n   public static final String RUBY_DELIMITER = \"delimiter\";\n \n-  // Values for rubyPosition\n-  public static final String RUBY_BEFORE = \"before\";\n-  public static final String RUBY_AFTER = \"after\";\n+  // Values for text annotation (i.e. ruby, text emphasis) position\n+  public static final String ANNOTATION_POSITION_BEFORE = \"before\";\n+  public static final String ANNOTATION_POSITION_AFTER = \"after\";\n+  public static final String ANNOTATION_POSITION_OUTSIDE = \"outside\";\n+\n   // Values for textDecoration\n   public static final String LINETHROUGH = \"linethrough\";\n   public static final String NO_LINETHROUGH = \"nolinethrough\";\n@@ -106,6 +109,15 @@\n   public static final String VERTICAL_LR = \"tblr\";\n   public static final String VERTICAL_RL = \"tbrl\";\n \n+  // Values for textEmphasis\n+  public static final String TEXT_EMPHASIS_NONE = \"none\";\n+  public static final String TEXT_EMPHASIS_AUTO = \"auto\";\n+  public static final String TEXT_EMPHASIS_MARK_DOT = \"dot\";\n+  public static final String TEXT_EMPHASIS_MARK_SESAME = \"sesame\";\n+  public static final String TEXT_EMPHASIS_MARK_CIRCLE = \"circle\";\n+  public static final String TEXT_EMPHASIS_MARK_FILLED = \"filled\";\n+  public static final String TEXT_EMPHASIS_MARK_OPEN = \"open\";\n+\n   @Nullable public final String tag;\n   @Nullable public final String text;\n   public final boolean isTextNode;\n@@ -243,7 +255,7 @@ private void getEventTimes(TreeSet<Long> out, boolean descendsPNode) {\n \n     TreeMap<String, Cue.Builder> regionTextOutputs = new TreeMap<>();\n     traverseForText(timeUs, false, regionId, regionTextOutputs);\n-    traverseForStyle(timeUs, globalStyles, regionTextOutputs);\n+    traverseForStyle(timeUs, globalStyles, regionMap, regionId, regionTextOutputs);\n \n     List<Cue> cues = new ArrayList<>();\n \n@@ -354,34 +366,41 @@ private static SpannableStringBuilder getRegionOutputText(\n   }\n \n   private void traverseForStyle(\n-      long timeUs, Map<String, TtmlStyle> globalStyles, Map<String, Cue.Builder> regionOutputs) {\n+      long timeUs, Map<String, TtmlStyle> globalStyles, Map<String, TtmlRegion> regionMaps,\n+      String inheritedRegion, Map<String, Cue.Builder> regionOutputs) {\n     if (!isActive(timeUs)) {\n       return;\n     }\n+    String resolvedRegionId = ANONYMOUS_REGION_ID.equals(regionId) ? inheritedRegion : regionId;\n+\n     for (Map.Entry<String, Integer> entry : nodeEndsByRegion.entrySet()) {\n       String regionId = entry.getKey();\n       int start = nodeStartsByRegion.containsKey(regionId) ? nodeStartsByRegion.get(regionId) : 0;\n       int end = entry.getValue();\n       if (start != end) {\n         Cue.Builder regionOutput = Assertions.checkNotNull(regionOutputs.get(regionId));\n-        applyStyleToOutput(globalStyles, regionOutput, start, end);\n+        @Cue.VerticalType int verticalType = Assertions\n+            .checkNotNull(regionMaps.get(resolvedRegionId)).verticalType;\n+        applyStyleToOutput(globalStyles, regionOutput, start, end, verticalType);\n       }\n     }\n     for (int i = 0; i < getChildCount(); ++i) {\n-      getChild(i).traverseForStyle(timeUs, globalStyles, regionOutputs);\n+      getChild(i).traverseForStyle(timeUs, globalStyles, regionMaps, resolvedRegionId, regionOutputs);\n     }\n   }\n \n   private void applyStyleToOutput(\n-      Map<String, TtmlStyle> globalStyles, Cue.Builder regionOutput, int start, int end) {\n+      Map<String, TtmlStyle> globalStyles, Cue.Builder regionOutput, int start, int end,\n+      @Cue.VerticalType int verticalType) {\n     @Nullable TtmlStyle resolvedStyle = TtmlRenderUtil.resolveStyle(style, styleIds, globalStyles);\n     @Nullable SpannableStringBuilder text = (SpannableStringBuilder) regionOutput.getText();\n     if (text == null) {\n       text = new SpannableStringBuilder();\n       regionOutput.setText(text);\n     }\n     if (resolvedStyle != null) {\n-      TtmlRenderUtil.applyStylesToSpan(text, start, end, resolvedStyle, parent, globalStyles);\n+      TtmlRenderUtil\n+          .applyStylesToSpan(text, start, end, resolvedStyle, parent, globalStyles, verticalType);\n       regionOutput.setTextAlignment(resolvedStyle.getTextAlign());\n     }\n   }"
  },
  {
    "sha": "1515ac5cc0c5d192d00fa3ff4734481e257597cd",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlRenderUtil.java",
    "status": "modified",
    "additions": 49,
    "deletions": 3,
    "changes": 52,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlRenderUtil.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlRenderUtil.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlRenderUtil.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -27,9 +27,12 @@\n import android.text.style.TypefaceSpan;\n import android.text.style.UnderlineSpan;\n import androidx.annotation.Nullable;\n+import com.google.android.exoplayer2.text.Cue;\n import com.google.android.exoplayer2.text.span.HorizontalTextInVerticalContextSpan;\n import com.google.android.exoplayer2.text.span.RubySpan;\n import com.google.android.exoplayer2.text.span.SpanUtil;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n import com.google.android.exoplayer2.util.Log;\n import com.google.android.exoplayer2.util.Util;\n import java.util.ArrayDeque;\n@@ -83,7 +86,8 @@ public static void applyStylesToSpan(\n       int end,\n       TtmlStyle style,\n       @Nullable TtmlNode parent,\n-      Map<String, TtmlStyle> globalStyles) {\n+      Map<String, TtmlStyle> globalStyles,\n+      @Cue.VerticalType int verticalType) {\n \n     if (style.getStyle() != TtmlStyle.UNSPECIFIED) {\n       builder.setSpan(new StyleSpan(style.getStyle()), start, end,\n@@ -119,6 +123,48 @@ public static void applyStylesToSpan(\n           end,\n           Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n     }\n+    if (style.getTextEmphasis() != null) {\n+      TextEmphasis textEmphasis = style.getTextEmphasis();\n+      /**\n+       *  If an implementation does not recognize or otherwise distinguish an emphasis style value,\n+       *  then it must be interpreted as if a style of auto were specified; as such, an\n+       *  implementation that supports text emphasis marks must minimally support the auto value.\n+       *  If a vertical writing mode applies, then equivalent to filled sesame; otherwise, equivalent\n+       *  to filled circle.\n+       *  See https://www.w3.org/TR/ttml2/#style-value-emphasis-style\n+       */\n+      @TextEmphasis.MarkShape int markShape = textEmphasis.markShape;\n+      @TextEmphasisSpan.MarkFill int markFill = textEmphasis.markFill;\n+\n+      if (textEmphasis.markShape == TextEmphasis.MARK_SHAPE_AUTO) {\n+        markShape = (verticalType == Cue.VERTICAL_TYPE_LR || verticalType == Cue.VERTICAL_TYPE_RL) ?\n+            TextEmphasisSpan.MARK_SHAPE_SESAME : TextEmphasisSpan.MARK_SHAPE_CIRCLE;\n+      }\n+      if ((textEmphasis.markShape != TextEmphasisSpan.MARK_SHAPE_NONE) &&\n+          (textEmphasis.markFill == TextEmphasisSpan.MARK_FILL_UNSPECIFIED)) {\n+        markFill = TextEmphasisSpan.MARK_FILL_FILLED;\n+      }\n+\n+      @TextEmphasis.Position int position = textEmphasis.position;\n+      if (textEmphasis.position == TextEmphasis.POSITION_OUTSIDE) {\n+        /**\n+         *  Not supported in current implementation\n+         *  If an implementation does not recognize or otherwise distinguish an annotation position\n+         *  value, then it must be interpreted as if a position of before were specified; as such,\n+         *  an implementation that supports text annotation marks must minimally support the before\n+         *  value.\n+         *  See https://www.w3.org/TR/ttml2/#style-value-annotation-position\n+         */\n+        position = TextAnnotation.POSITION_BEFORE;\n+      }\n+\n+      SpanUtil.addOrReplaceSpan(\n+          builder,\n+          new TextEmphasisSpan(markShape, markFill, position),\n+          start,\n+          end,\n+          Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n+    }\n     switch (style.getRubyType()) {\n       case TtmlStyle.RUBY_TYPE_BASE:\n         // look for the sibling RUBY_TEXT and add it as span between start & end.\n@@ -141,11 +187,11 @@ public static void applyStylesToSpan(\n         }\n \n         // TODO: Get rubyPosition from `textNode` when TTML inheritance is implemented.\n-        @RubySpan.Position\n+        @TextAnnotation.Position\n         int rubyPosition =\n             containerNode.style != null\n                 ? containerNode.style.getRubyPosition()\n-                : RubySpan.POSITION_UNKNOWN;\n+                : TextAnnotation.POSITION_UNKNOWN;\n         builder.setSpan(\n             new RubySpan(rubyText, rubyPosition), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n         break;"
  },
  {
    "sha": "b9a9fba98ab87eb4735e3c255e3db558cc7d0c6e",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java",
    "status": "modified",
    "additions": 21,
    "deletions": 5,
    "changes": 26,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/ttml/TtmlStyle.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -20,6 +20,7 @@\n import androidx.annotation.IntDef;\n import androidx.annotation.Nullable;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n import java.lang.annotation.Documented;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -83,18 +84,20 @@\n   private float fontSize;\n   @Nullable private String id;\n   @RubyType private int rubyType;\n-  @RubySpan.Position private int rubyPosition;\n+  @TextAnnotation.Position private int rubyPosition;\n   @Nullable private Layout.Alignment textAlign;\n   @OptionalBoolean private int textCombine;\n \n+  private TextEmphasis textEmphasis;\n+\n   public TtmlStyle() {\n     linethrough = UNSPECIFIED;\n     underline = UNSPECIFIED;\n     bold = UNSPECIFIED;\n     italic = UNSPECIFIED;\n     fontSizeUnit = UNSPECIFIED;\n     rubyType = UNSPECIFIED;\n-    rubyPosition = RubySpan.POSITION_UNKNOWN;\n+    rubyPosition = TextAnnotation.POSITION_UNKNOWN;\n     textCombine = UNSPECIFIED;\n   }\n \n@@ -225,7 +228,7 @@ private TtmlStyle inherit(@Nullable TtmlStyle ancestor, boolean chaining) {\n       if (underline == UNSPECIFIED) {\n         underline = ancestor.underline;\n       }\n-      if (rubyPosition == RubySpan.POSITION_UNKNOWN) {\n+      if (rubyPosition == TextAnnotation.POSITION_UNKNOWN) {\n         rubyPosition = ancestor.rubyPosition;\n       }\n       if (textAlign == null && ancestor.textAlign != null) {\n@@ -238,6 +241,9 @@ private TtmlStyle inherit(@Nullable TtmlStyle ancestor, boolean chaining) {\n         fontSizeUnit = ancestor.fontSizeUnit;\n         fontSize = ancestor.fontSize;\n       }\n+      if (textEmphasis == null) {\n+        textEmphasis = ancestor.textEmphasis;\n+      }\n       // attributes not inherited as of http://www.w3.org/TR/ttml1/\n       if (chaining && !hasBackgroundColor && ancestor.hasBackgroundColor) {\n         setBackgroundColor(ancestor.backgroundColor);\n@@ -269,12 +275,12 @@ public int getRubyType() {\n     return rubyType;\n   }\n \n-  public TtmlStyle setRubyPosition(@RubySpan.Position int position) {\n+  public TtmlStyle setRubyPosition(@TextAnnotation.Position int position) {\n     this.rubyPosition = position;\n     return this;\n   }\n \n-  @RubySpan.Position\n+  @TextAnnotation.Position\n   public int getRubyPosition() {\n     return rubyPosition;\n   }\n@@ -299,6 +305,16 @@ public TtmlStyle setTextCombine(boolean combine) {\n     return this;\n   }\n \n+  @Nullable\n+  public TextEmphasis getTextEmphasis() {\n+    return textEmphasis;\n+  }\n+\n+  public TtmlStyle setTextEmphasis(@Nullable TextEmphasis textEmphasis) {\n+    this.textEmphasis = textEmphasis;\n+    return this;\n+  }\n+\n   public TtmlStyle setFontSize(float fontSize) {\n     this.fontSize = fontSize;\n     return this;"
  },
  {
    "sha": "a9ecdc683bb9160831ee24d71f38a4829d5cd1eb",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/CssParser.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/CssParser.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/CssParser.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/CssParser.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -18,6 +18,7 @@\n import android.text.TextUtils;\n import androidx.annotation.Nullable;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n import com.google.android.exoplayer2.util.Assertions;\n import com.google.android.exoplayer2.util.ColorParser;\n import com.google.android.exoplayer2.util.ParsableByteArray;\n@@ -195,9 +196,9 @@ private static void parseStyleDeclaration(ParsableByteArray input, WebvttCssStyl\n       style.setBackgroundColor(ColorParser.parseCssColor(value));\n     } else if (PROPERTY_RUBY_POSITION.equals(property)) {\n       if (VALUE_OVER.equals(value)) {\n-        style.setRubyPosition(RubySpan.POSITION_OVER);\n+        style.setRubyPosition(TextAnnotation.POSITION_BEFORE);\n       } else if (VALUE_UNDER.equals(value)) {\n-        style.setRubyPosition(RubySpan.POSITION_UNDER);\n+        style.setRubyPosition(TextAnnotation.POSITION_AFTER);\n       }\n     } else if (PROPERTY_TEXT_COMBINE_UPRIGHT.equals(property)) {\n       style.setCombineUpright(VALUE_ALL.equals(value) || value.startsWith(VALUE_DIGITS));"
  },
  {
    "sha": "232c50130cfb0b4e6f760ede490152379e7f7d06",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCssStyle.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -21,6 +21,7 @@\n import androidx.annotation.IntDef;\n import androidx.annotation.Nullable;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n import com.google.android.exoplayer2.util.Util;\n import java.lang.annotation.Documented;\n import java.lang.annotation.Retention;\n@@ -95,7 +96,7 @@\n   @OptionalBoolean private int italic;\n   @FontSizeUnit private int fontSizeUnit;\n   private float fontSize;\n-  @RubySpan.Position private int rubyPosition;\n+  @TextAnnotation.Position private int rubyPosition;\n   private boolean combineUpright;\n \n   public WebvttCssStyle() {\n@@ -111,7 +112,7 @@ public WebvttCssStyle() {\n     bold = UNSPECIFIED;\n     italic = UNSPECIFIED;\n     fontSizeUnit = UNSPECIFIED;\n-    rubyPosition = RubySpan.POSITION_UNKNOWN;\n+    rubyPosition = TextAnnotation.POSITION_UNKNOWN;\n     combineUpright = false;\n   }\n \n@@ -272,12 +273,12 @@ public float getFontSize() {\n     return fontSize;\n   }\n \n-  public WebvttCssStyle setRubyPosition(@RubySpan.Position int rubyPosition) {\n+  public WebvttCssStyle setRubyPosition(@TextAnnotation.Position int rubyPosition) {\n     this.rubyPosition = rubyPosition;\n     return this;\n   }\n \n-  @RubySpan.Position\n+  @TextAnnotation.Position\n   public int getRubyPosition() {\n     return rubyPosition;\n   }"
  },
  {
    "sha": "a040a3acf3ec45d4131525f4cf0bb1d0f6994cbe",
    "filename": "library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java",
    "status": "modified",
    "additions": 14,
    "deletions": 13,
    "changes": 27,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/main/java/com/google/android/exoplayer2/text/webvtt/WebvttCueParser.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -39,6 +39,7 @@\n import com.google.android.exoplayer2.text.Cue;\n import com.google.android.exoplayer2.text.span.HorizontalTextInVerticalContextSpan;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n import com.google.android.exoplayer2.util.Assertions;\n import com.google.android.exoplayer2.util.Log;\n import com.google.android.exoplayer2.util.ParsableByteArray;\n@@ -572,7 +573,7 @@ private static void applyRubySpans(\n       StartTag startTag,\n       List<Element> nestedElements,\n       List<WebvttCssStyle> styles) {\n-    @RubySpan.Position int rubyTagPosition = getRubyPosition(styles, cueId, startTag);\n+    @TextAnnotation.Position int rubyTagPosition = getRubyPosition(styles, cueId, startTag);\n     List<Element> sortedNestedElements = new ArrayList<>(nestedElements.size());\n     sortedNestedElements.addAll(nestedElements);\n     Collections.sort(sortedNestedElements, Element.BY_START_POSITION_ASC);\n@@ -585,12 +586,12 @@ private static void applyRubySpans(\n       Element rubyTextElement = sortedNestedElements.get(i);\n       // Use the <rt> element's ruby-position if set, otherwise the <ruby> element's and otherwise\n       // default to OVER.\n-      @RubySpan.Position\n+      @TextAnnotation.Position\n       int rubyPosition =\n           firstKnownRubyPosition(\n               getRubyPosition(styles, cueId, rubyTextElement.startTag),\n               rubyTagPosition,\n-              RubySpan.POSITION_OVER);\n+              TextAnnotation.POSITION_BEFORE);\n       // Move the rubyText from spannedText into the RubySpan.\n       int adjustedRubyTextStart = rubyTextElement.startTag.position - deletedCharCount;\n       int adjustedRubyTextEnd = rubyTextElement.endPosition - deletedCharCount;\n@@ -607,31 +608,31 @@ private static void applyRubySpans(\n     }\n   }\n \n-  @RubySpan.Position\n+  @TextAnnotation.Position\n   private static int getRubyPosition(\n       List<WebvttCssStyle> styles, @Nullable String cueId, StartTag startTag) {\n     List<StyleMatch> styleMatches = getApplicableStyles(styles, cueId, startTag);\n     for (int i = 0; i < styleMatches.size(); i++) {\n       WebvttCssStyle style = styleMatches.get(i).style;\n-      if (style.getRubyPosition() != RubySpan.POSITION_UNKNOWN) {\n+      if (style.getRubyPosition() != TextAnnotation.POSITION_UNKNOWN) {\n         return style.getRubyPosition();\n       }\n     }\n-    return RubySpan.POSITION_UNKNOWN;\n+    return TextAnnotation.POSITION_UNKNOWN;\n   }\n \n-  @RubySpan.Position\n+  @TextAnnotation.Position\n   private static int firstKnownRubyPosition(\n-      @RubySpan.Position int position1,\n-      @RubySpan.Position int position2,\n-      @RubySpan.Position int position3) {\n-    if (position1 != RubySpan.POSITION_UNKNOWN) {\n+      @TextAnnotation.Position int position1,\n+      @TextAnnotation.Position int position2,\n+      @TextAnnotation.Position int position3) {\n+    if (position1 != TextAnnotation.POSITION_UNKNOWN) {\n       return position1;\n     }\n-    if (position2 != RubySpan.POSITION_UNKNOWN) {\n+    if (position2 != TextAnnotation.POSITION_UNKNOWN) {\n       return position2;\n     }\n-    if (position3 != RubySpan.POSITION_UNKNOWN) {\n+    if (position3 != TextAnnotation.POSITION_UNKNOWN) {\n       return position3;\n     }\n     throw new IllegalArgumentException();"
  },
  {
    "sha": "6ce7e445a677684103463c315bcbdc826c238521",
    "filename": "library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TextEmphasisTest.java",
    "status": "added",
    "additions": 600,
    "deletions": 0,
    "changes": 600,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TextEmphasisTest.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TextEmphasisTest.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TextEmphasisTest.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -0,0 +1,600 @@\n+package com.google.android.exoplayer2.text.ttml;\n+\n+import static com.google.android.exoplayer2.text.ttml.TextEmphasis.MARK_SHAPE_AUTO;\n+import static com.google.android.exoplayer2.text.ttml.TextEmphasis.POSITION_OUTSIDE;\n+import static com.google.android.exoplayer2.text.ttml.TextEmphasis.createTextEmphasis;\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import androidx.annotation.Nullable;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Unit test for {@link TextEmphasis}.\n+ */\n+@RunWith(AndroidJUnit4.class)\n+public class TextEmphasisTest {\n+\n+  public final String TAG = \"TextEmphasisTest\";\n+\n+  @Test\n+  public void testNull() {\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(null);\n+    assertWithMessage(\"Text Emphasis must be null\").that(textEmphasis).isNull();\n+  }\n+\n+  @Test\n+  public void testEmpty() {\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(\"\");\n+    assertWithMessage(\"Text Emphasis must be null\").that(textEmphasis).isNull();\n+  }\n+\n+  @Test\n+  public void testEmptyWithWhitespace() {\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(\"   \");\n+    assertWithMessage(\"Text Emphasis must be null\").that(textEmphasis).isNull();\n+  }\n+\n+  @Test\n+  public void testNone() {\n+    String value = \"none\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_NONE);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testAuto() {\n+    String value = \"auto\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape).isEqualTo(MARK_SHAPE_AUTO);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_UNSPECIFIED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testInvalid() {\n+    String value = \"invalid\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape).isEqualTo(MARK_SHAPE_AUTO);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_UNSPECIFIED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testAutoOutside() {\n+    String value = \"auto outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape).isEqualTo(MARK_SHAPE_AUTO);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_UNSPECIFIED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testAutoAfter() {\n+    String value = \"auto after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape).isEqualTo(MARK_SHAPE_AUTO);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_UNSPECIFIED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  /**\n+   * If only filled or open is specified, then it is equivalent to filled circle and open circle,\n+   * respectively.\n+   */\n+  @Test\n+  public void testFilled() {\n+    String value = \"filled\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testOpen() {\n+    String value = \"open\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testOpenAfter() {\n+    String value = \"open after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  /**\n+   * If only circle, dot, or sesame is specified, then it is equivalent to filled circle, filled\n+   * dot, and filled sesame, respectively.\n+   */\n+  @Test\n+  public void testDotBefore() {\n+    String value = \"dot before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testCircleBefore() {\n+    String value = \"circle before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testSesameBefore() {\n+    String value = \"sesame before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testDotAfter() {\n+    String value = \"dot after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testCircleAfter() {\n+    String value = \"circle after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testSesameAfter() {\n+    String value = \"sesame  after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testDotOutside() {\n+    String value = \"dot outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testCircleOutside() {\n+    String value = \"circle outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testSesameOutside() {\n+    String value = \"sesame  outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testOpenDotAfter() {\n+    String value = \"open dot after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testOpenCircleAfter() {\n+    String value = \"open circle after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testOpenSesameAfter() {\n+    String value = \"open sesame  after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testOpenDotBefore() {\n+    String value = \"open dot before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testOpenCircleBefore() {\n+    String value = \"open circle before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testOpenSesameBefore() {\n+    String value = \"open sesame before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testOpenDotOutside() {\n+    String value = \"open dot outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testOpenCircleOutside() {\n+    String value = \"open circle outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testOpenSesameOutside() {\n+    String value = \"open sesame outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testFilledDotOutside() {\n+    String value = \"filled dot outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testFilledCircleOutside() {\n+    String value = \"filled circle outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testFilledSesameOutside() {\n+    String value = \"filled sesame  outside\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextEmphasis.POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testFilledDotAfter() {\n+    String value = \"filled dot after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testFilledCircleAfter() {\n+    String value = \"filled circle after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testFilledSesameAfter() {\n+    String value = \"filled sesame  after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testFilledDotBefore() {\n+    String value = \"filled dot before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testFilledCircleBefore() {\n+    String value = \"filled circle before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testFilledSesameBefore() {\n+    String value = \"filled sesame  before\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testBeforeFilledSesame() {\n+    String value = \"before filled sesame\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testBeforeSesameFilled() {\n+    String value = \"before sesame filled\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testInvalidMarkShape() {\n+    String value = \"before sesamee filled\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_CIRCLE);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testInvalidMarkFill() {\n+    String value = \"before sesame filed\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_BEFORE);\n+  }\n+\n+  @Test\n+  public void testInvalidPosition() {\n+    String value = \"befour sesame filled\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertWithMessage(\"position\").that(textEmphasis.position).isEqualTo(POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testValidMixedWithInvalidDescription() {\n+    String value = \"blue open sesame foo bar after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertWithMessage(\"position\").that(textEmphasis.position).isEqualTo(\n+        TextAnnotation.POSITION_AFTER);\n+  }\n+\n+  @Test\n+  public void testColorDescriptionNotSupported() {\n+    String value = \"blue\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(MARK_SHAPE_AUTO);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_UNSPECIFIED);\n+    assertWithMessage(\"position\").that(textEmphasis.position).isEqualTo(POSITION_OUTSIDE);\n+  }\n+\n+  @Test\n+  public void testQuotedStringStyleNotSupported() {\n+    String value = \"\\\"x\\\" after\";\n+    @Nullable TextEmphasis textEmphasis = createTextEmphasis(value);\n+    assertWithMessage(\"Text Emphasis must exist\").that(textEmphasis).isNotNull();\n+    assertWithMessage(\"markShape\").that(textEmphasis.markShape)\n+        .isEqualTo(MARK_SHAPE_AUTO);\n+    assertWithMessage(\"markFill\").that(textEmphasis.markFill)\n+        .isEqualTo(TextEmphasisSpan.MARK_FILL_UNSPECIFIED);\n+    assertWithMessage(\"position\").that(textEmphasis.position)\n+        .isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n+}"
  },
  {
    "sha": "04cfcd9d42c1f5b4b0658b780f6f9be902aa46e5",
    "filename": "library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlDecoderTest.java",
    "status": "modified",
    "additions": 126,
    "deletions": 9,
    "changes": 135,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlDecoderTest.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlDecoderTest.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlDecoderTest.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -28,6 +28,8 @@\n import com.google.android.exoplayer2.text.Subtitle;\n import com.google.android.exoplayer2.text.SubtitleDecoderException;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n import com.google.android.exoplayer2.util.Assertions;\n import com.google.android.exoplayer2.util.ColorParser;\n import java.io.IOException;\n@@ -36,7 +38,9 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n-/** Unit test for {@link TtmlDecoder}. */\n+/**\n+ * Unit test for {@link TtmlDecoder}.\n+ */\n @RunWith(AndroidJUnit4.class)\n public final class TtmlDecoderTest {\n \n@@ -67,6 +71,7 @@\n   private static final String VERTICAL_TEXT_FILE = \"media/ttml/vertical_text.xml\";\n   private static final String TEXT_COMBINE_FILE = \"media/ttml/text_combine.xml\";\n   private static final String RUBIES_FILE = \"media/ttml/rubies.xml\";\n+  private static final String TEXT_EMPHASIS_FILE = \"media/ttml/text_emphasis.xml\";\n \n   @Test\n   public void inlineAttributes() throws IOException, SubtitleDecoderException {\n@@ -109,12 +114,10 @@ public void inheritInlineAttributes() throws IOException, SubtitleDecoderExcepti\n    * framework level. Tests that <i>lime</i> resolves to <code>#FF00FF00</code> not <code>#00FF00\n    * </code>.\n    *\n-   * @see <a\n-   *     href=\"https://github.com/android/platform_frameworks_base/blob/jb-mr2-release/graphics/java/android/graphics/Color.java#L414\">\n-   *     JellyBean Color</a> <a\n-   *     href=\"https://github.com/android/platform_frameworks_base/blob/kitkat-mr2.2-release/graphics/java/android/graphics/Color.java#L414\">\n-   *     Kitkat Color</a>\n    * @throws IOException thrown if reading subtitle file fails.\n+   * @see <a href=\"https://github.com/android/platform_frameworks_base/blob/jb-mr2-release/graphics/java/android/graphics/Color.java#L414\">\n+   * JellyBean Color</a> <a href=\"https://github.com/android/platform_frameworks_base/blob/kitkat-mr2.2-release/graphics/java/android/graphics/Color.java#L414\">\n+   * Kitkat Color</a>\n    */\n   @Test\n   public void lime() throws IOException, SubtitleDecoderException {\n@@ -646,16 +649,16 @@ public void rubies() throws IOException, SubtitleDecoderException {\n     assertThat(firstCue.toString()).isEqualTo(\"Cue with annotated text.\");\n     assertThat(firstCue)\n         .hasRubySpanBetween(\"Cue with \".length(), \"Cue with annotated\".length())\n-        .withTextAndPosition(\"1st rubies\", RubySpan.POSITION_OVER);\n+        .withTextAndPosition(\"1st rubies\", TextAnnotation.POSITION_BEFORE);\n     assertThat(firstCue)\n         .hasRubySpanBetween(\"Cue with annotated \".length(), \"Cue with annotated text\".length())\n-        .withTextAndPosition(\"2nd rubies\", RubySpan.POSITION_UNKNOWN);\n+        .withTextAndPosition(\"2nd rubies\", TextAnnotation.POSITION_UNKNOWN);\n \n     Spanned secondCue = getOnlyCueTextAtTimeUs(subtitle, 20_000_000);\n     assertThat(secondCue.toString()).isEqualTo(\"Cue with annotated text.\");\n     assertThat(secondCue)\n         .hasRubySpanBetween(\"Cue with \".length(), \"Cue with annotated\".length())\n-        .withTextAndPosition(\"rubies\", RubySpan.POSITION_UNKNOWN);\n+        .withTextAndPosition(\"rubies\", TextAnnotation.POSITION_UNKNOWN);\n \n     Spanned thirdCue = getOnlyCueTextAtTimeUs(subtitle, 30_000_000);\n     assertThat(thirdCue.toString()).isEqualTo(\"Cue with annotated text.\");\n@@ -674,6 +677,120 @@ public void rubies() throws IOException, SubtitleDecoderException {\n     assertThat(sixthCue).hasNoRubySpanBetween(0, sixthCue.length());\n   }\n \n+  @Test\n+  public void textEmphasis() throws IOException, SubtitleDecoderException {\n+    TtmlSubtitle subtitle = getSubtitle(TEXT_EMPHASIS_FILE);\n+\n+    Spanned firstCue = getOnlyCueTextAtTimeUs(subtitle, 10_000_000);\n+    assertThat(firstCue).hasTextEmphasisSpanBetween(\"None \".length(), \"None おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_NONE,\n+            TextEmphasisSpan.MARK_FILL_UNSPECIFIED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned secondCue = getOnlyCueTextAtTimeUs(subtitle, 20_000_000);\n+    assertThat(secondCue)\n+        .hasTextEmphasisSpanBetween(\"Auto \".length(), \"Auto ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_CIRCLE,\n+            TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned thirdCue = getOnlyCueTextAtTimeUs(subtitle, 30_000_000);\n+    assertThat(thirdCue)\n+        .hasTextEmphasisSpanBetween(\"Filled circle \".length(), \"Filled circle こんばんは\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_CIRCLE, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned fourthCue = getOnlyCueTextAtTimeUs(subtitle, 40_000_000);\n+    assertThat(fourthCue)\n+        .hasTextEmphasisSpanBetween(\"Filled dot \".length(), \"Filled dot ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_DOT, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned fifthCue = getOnlyCueTextAtTimeUs(subtitle, 50_000_000);\n+    assertThat(fifthCue)\n+        .hasTextEmphasisSpanBetween(\"Filled sesame \".length(), \"Filled sesame おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_SESAME, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned sixthCue = getOnlyCueTextAtTimeUs(subtitle, 60_000_000);\n+    assertThat(sixthCue)\n+        .hasTextEmphasisSpanBetween(\"Open circle before \".length(),\n+            \"Open circle before ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_CIRCLE, TextEmphasisSpan.MARK_FILL_OPEN,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned seventhCue = getOnlyCueTextAtTimeUs(subtitle, 70_000_000);\n+    assertThat(seventhCue)\n+        .hasTextEmphasisSpanBetween(\"Open dot after \".length(), \"Open dot after おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_DOT, TextEmphasisSpan.MARK_FILL_OPEN,\n+            TextAnnotation.POSITION_AFTER);\n+\n+    Spanned eighthCue = getOnlyCueTextAtTimeUs(subtitle, 80_000_000);\n+    assertThat(eighthCue)\n+        .hasTextEmphasisSpanBetween(\"Open sesame outside \".length(),\n+            \"Open sesame outside ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_SESAME, TextEmphasisSpan.MARK_FILL_OPEN,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned ninthCue = getOnlyCueTextAtTimeUs(subtitle, 90_000_000);\n+    assertThat(ninthCue)\n+        .hasTextEmphasisSpanBetween(\"Auto outside \".length(), \"Auto outside おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_CIRCLE,\n+            TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned tenthCue = getOnlyCueTextAtTimeUs(subtitle, 100_000_000);\n+    assertThat(tenthCue)\n+        .hasTextEmphasisSpanBetween(\"Circle before \".length(), \"Circle before ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_CIRCLE, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned eleventhCue = getOnlyCueTextAtTimeUs(subtitle, 110_000_000);\n+    assertThat(eleventhCue)\n+        .hasTextEmphasisSpanBetween(\"Sesame after \".length(), \"Sesame after おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_SESAME, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_AFTER);\n+\n+    Spanned twelfthCue = getOnlyCueTextAtTimeUs(subtitle, 120_000_000);\n+    assertThat(twelfthCue)\n+        .hasTextEmphasisSpanBetween(\"Dot outside \".length(), \"Dot outside ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_DOT, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned thirteenthCue = getOnlyCueTextAtTimeUs(subtitle, 130_000_000);\n+    assertThat(thirteenthCue)\n+        .hasNoTextEmphasisSpanBetween(\"No textEmphasis property \".length(),\n+            \"No textEmphasis property おはよ\".length());\n+\n+    Spanned fourteenthCue = getOnlyCueTextAtTimeUs(subtitle, 140_000_000);\n+    assertThat(fourteenthCue)\n+        .hasTextEmphasisSpanBetween(\"Auto (TBLR) \".length(), \"Auto (TBLR) ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_SESAME,\n+            TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned fifteenthCue = getOnlyCueTextAtTimeUs(subtitle, 150_000_000);\n+    assertThat(fifteenthCue)\n+        .hasTextEmphasisSpanBetween(\"Auto (TBRL) \".length(), \"Auto (TBRL) おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_SESAME,\n+            TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned sixteenthCue = getOnlyCueTextAtTimeUs(subtitle, 160_000_000);\n+    assertThat(sixteenthCue)\n+        .hasTextEmphasisSpanBetween(\"Auto (TB) \".length(), \"Auto (TB) ございます\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_SESAME,\n+            TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+\n+    Spanned seventeenthCue = getOnlyCueTextAtTimeUs(subtitle, 170_000_000);\n+    assertThat(seventeenthCue)\n+        .hasTextEmphasisSpanBetween(\"Auto (LR) \".length(), \"Auto (LR) おはよ\".length())\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_SHAPE_CIRCLE,\n+            TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE);\n+  }\n+\n   private static Spanned getOnlyCueTextAtTimeUs(Subtitle subtitle, long timeUs) {\n     Cue cue = getOnlyCueAtTimeUs(subtitle, timeUs);\n     assertThat(cue.text).isInstanceOf(Spanned.class);"
  },
  {
    "sha": "22b39665e9bbc2f9dbc3819e8aa127f526f40b94",
    "filename": "library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java",
    "status": "modified",
    "additions": 28,
    "deletions": 6,
    "changes": 34,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/test/java/com/google/android/exoplayer2/text/ttml/TtmlStyleTest.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -16,6 +16,7 @@\n package com.google.android.exoplayer2.text.ttml;\n \n import static android.graphics.Color.BLACK;\n+import static com.google.android.exoplayer2.text.span.TextAnnotation.POSITION_BEFORE;\n import static com.google.android.exoplayer2.text.ttml.TtmlStyle.STYLE_BOLD;\n import static com.google.android.exoplayer2.text.ttml.TtmlStyle.STYLE_BOLD_ITALIC;\n import static com.google.android.exoplayer2.text.ttml.TtmlStyle.STYLE_ITALIC;\n@@ -28,7 +29,8 @@\n import android.text.Layout;\n import androidx.annotation.ColorInt;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n-import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -43,9 +45,10 @@\n   @TtmlStyle.FontSizeUnit private static final int FONT_SIZE_UNIT = TtmlStyle.FONT_SIZE_UNIT_EM;\n   @ColorInt private static final int BACKGROUND_COLOR = Color.BLACK;\n   private static final int RUBY_TYPE = TtmlStyle.RUBY_TYPE_TEXT;\n-  private static final int RUBY_POSITION = RubySpan.POSITION_UNDER;\n+  private static final int RUBY_POSITION = TextAnnotation.POSITION_AFTER;\n   private static final Layout.Alignment TEXT_ALIGN = Layout.Alignment.ALIGN_CENTER;\n   private static final boolean TEXT_COMBINE = true;\n+  public static final String TEXT_EMPHASIS_STYLE=\"dot before\";\n \n   private final TtmlStyle populatedStyle =\n       new TtmlStyle()\n@@ -62,7 +65,8 @@\n           .setRubyType(RUBY_TYPE)\n           .setRubyPosition(RUBY_POSITION)\n           .setTextAlign(TEXT_ALIGN)\n-          .setTextCombine(TEXT_COMBINE);\n+          .setTextCombine(TEXT_COMBINE)\n+          .setTextEmphasis(TextEmphasis.createTextEmphasis(TEXT_EMPHASIS_STYLE));\n \n   @Test\n   public void inheritStyle() {\n@@ -86,6 +90,10 @@ public void inheritStyle() {\n     assertWithMessage(\"backgroundColor should not be inherited\")\n         .that(style.hasBackgroundColor())\n         .isFalse();\n+    assertThat(style.getTextEmphasis()).isNotNull();\n+    assertThat(style.getTextEmphasis().markShape).isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertThat(style.getTextEmphasis().markFill).isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertThat(style.getTextEmphasis().position).isEqualTo(POSITION_BEFORE);\n   }\n \n   @Test\n@@ -109,6 +117,10 @@ public void chainStyle() {\n         .that(style.getBackgroundColor())\n         .isEqualTo(BACKGROUND_COLOR);\n     assertWithMessage(\"rubyType should be chained\").that(style.getRubyType()).isEqualTo(RUBY_TYPE);\n+    assertThat(style.getTextEmphasis()).isNotNull();\n+    assertThat(style.getTextEmphasis().markShape).isEqualTo(TextEmphasisSpan.MARK_SHAPE_DOT);\n+    assertThat(style.getTextEmphasis().markFill).isEqualTo(TextEmphasisSpan.MARK_FILL_FILLED);\n+    assertThat(style.getTextEmphasis().position).isEqualTo(POSITION_BEFORE);\n   }\n \n   @Test\n@@ -221,9 +233,9 @@ public void rubyType() {\n   public void rubyPosition() {\n     TtmlStyle style = new TtmlStyle();\n \n-    assertThat(style.getRubyPosition()).isEqualTo(RubySpan.POSITION_UNKNOWN);\n-    style.setRubyPosition(RubySpan.POSITION_OVER);\n-    assertThat(style.getRubyPosition()).isEqualTo(RubySpan.POSITION_OVER);\n+    assertThat(style.getRubyPosition()).isEqualTo(TextAnnotation.POSITION_UNKNOWN);\n+    style.setRubyPosition(POSITION_BEFORE);\n+    assertThat(style.getRubyPosition()).isEqualTo(POSITION_BEFORE);\n   }\n \n   @Test\n@@ -245,4 +257,14 @@ public void textCombine() {\n     style.setTextCombine(true);\n     assertThat(style.getTextCombine()).isTrue();\n   }\n+\n+  @Test\n+  public void textEmphasis() {\n+    TtmlStyle style = new TtmlStyle();\n+    assertThat(style.getTextEmphasis()).isNull();\n+    style.setTextEmphasis(TextEmphasis.createTextEmphasis(\"open sesame after\"));\n+    assertThat(style.getTextEmphasis().markShape).isEqualTo(TextEmphasisSpan.MARK_SHAPE_SESAME);\n+    assertThat(style.getTextEmphasis().markFill).isEqualTo(TextEmphasisSpan.MARK_FILL_OPEN);\n+    assertThat(style.getTextEmphasis().position).isEqualTo(TextAnnotation.POSITION_AFTER);\n+  }\n }"
  },
  {
    "sha": "b04827bdfda0ec70758d0d834d1f94d327a7d9f2",
    "filename": "library/core/src/test/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoderTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoderTest.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/core/src/test/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoderTest.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/core/src/test/java/com/google/android/exoplayer2/text/webvtt/WebvttDecoderTest.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -27,6 +27,7 @@\n import com.google.android.exoplayer2.text.Cue;\n import com.google.android.exoplayer2.text.SubtitleDecoderException;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n import com.google.android.exoplayer2.util.Assertions;\n import com.google.android.exoplayer2.util.ColorParser;\n import com.google.common.collect.Iterables;\n@@ -349,33 +350,33 @@ public void decodeWithRubies() throws Exception {\n     assertThat(firstCue.text.toString()).isEqualTo(\"Some text with over-ruby.\");\n     assertThat((Spanned) firstCue.text)\n         .hasRubySpanBetween(\"Some \".length(), \"Some text with over-ruby\".length())\n-        .withTextAndPosition(\"over\", RubySpan.POSITION_OVER);\n+        .withTextAndPosition(\"over\", TextAnnotation.POSITION_BEFORE);\n \n     // Check that `under` is read from CSS and unspecified defaults to `over`.\n     Cue secondCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(2)));\n     assertThat(secondCue.text.toString())\n         .isEqualTo(\"Some text with under-ruby and over-ruby (default).\");\n     assertThat((Spanned) secondCue.text)\n         .hasRubySpanBetween(\"Some \".length(), \"Some text with under-ruby\".length())\n-        .withTextAndPosition(\"under\", RubySpan.POSITION_UNDER);\n+        .withTextAndPosition(\"under\", TextAnnotation.POSITION_AFTER);\n     assertThat((Spanned) secondCue.text)\n         .hasRubySpanBetween(\n             \"Some text with under-ruby and \".length(),\n             \"Some text with under-ruby and over-ruby (default)\".length())\n-        .withTextAndPosition(\"over\", RubySpan.POSITION_OVER);\n+        .withTextAndPosition(\"over\", TextAnnotation.POSITION_BEFORE);\n \n     // Check many <rt> tags with different positions nested in a single <ruby> span.\n     Cue thirdCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(4)));\n     assertThat(thirdCue.text.toString()).isEqualTo(\"base1base2base3.\");\n     assertThat((Spanned) thirdCue.text)\n         .hasRubySpanBetween(/* start= */ 0, \"base1\".length())\n-        .withTextAndPosition(\"over1\", RubySpan.POSITION_OVER);\n+        .withTextAndPosition(\"over1\", TextAnnotation.POSITION_BEFORE);\n     assertThat((Spanned) thirdCue.text)\n         .hasRubySpanBetween(\"base1\".length(), \"base1base2\".length())\n-        .withTextAndPosition(\"under2\", RubySpan.POSITION_UNDER);\n+        .withTextAndPosition(\"under2\", TextAnnotation.POSITION_AFTER);\n     assertThat((Spanned) thirdCue.text)\n         .hasRubySpanBetween(\"base1base2\".length(), \"base1base2base3\".length())\n-        .withTextAndPosition(\"under3\", RubySpan.POSITION_UNDER);\n+        .withTextAndPosition(\"under3\", TextAnnotation.POSITION_AFTER);\n \n     // Check a <ruby> span with no <rt> tags.\n     Cue fourthCue = Iterables.getOnlyElement(subtitle.getCues(subtitle.getEventTime(6)));"
  },
  {
    "sha": "b43d25e0dad728296646bffc1aff4aef3afd3eed",
    "filename": "library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java",
    "status": "modified",
    "additions": 73,
    "deletions": 4,
    "changes": 77,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -31,6 +31,8 @@\n import androidx.annotation.Nullable;\n import com.google.android.exoplayer2.text.span.HorizontalTextInVerticalContextSpan;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n import com.google.android.exoplayer2.util.Assertions;\n import com.google.android.exoplayer2.util.Util;\n import com.google.common.collect.ImmutableMap;\n@@ -186,17 +188,32 @@ private static String getOpeningTag(Object span, float displayDensity) {\n     } else if (span instanceof RubySpan) {\n       RubySpan rubySpan = (RubySpan) span;\n       switch (rubySpan.position) {\n-        case RubySpan.POSITION_OVER:\n+        case TextAnnotation.POSITION_BEFORE:\n           return \"<ruby style='ruby-position:over;'>\";\n-        case RubySpan.POSITION_UNDER:\n+        case TextAnnotation.POSITION_AFTER:\n           return \"<ruby style='ruby-position:under;'>\";\n-        case RubySpan.POSITION_UNKNOWN:\n+        case TextAnnotation.POSITION_UNKNOWN:\n           return \"<ruby style='ruby-position:unset;'>\";\n         default:\n           return null;\n       }\n     } else if (span instanceof UnderlineSpan) {\n       return \"<u>\";\n+    } else if (span instanceof TextEmphasisSpan) {\n+      TextEmphasisSpan textEmphasisSpan = (TextEmphasisSpan) span;\n+      String style = getTextEmphasisStyle(textEmphasisSpan.markShape, textEmphasisSpan.markFill);\n+      StringBuilder builder = new StringBuilder();\n+      builder.append(Util.formatInvariant(\n+          \"<span style='-webkit-text-emphasis-style: %1$s; text-emphasis-style: %1$s;\", style));\n+      if (textEmphasisSpan.markShape != TextEmphasisSpan.MARK_SHAPE_NONE) {\n+        String position = getTextEmphasisPosition(textEmphasisSpan.position);\n+        builder.append(Util.formatInvariant(\n+            \" -webkit-text-emphasis-position: %1$s; text-emphasis-position: %1$s; \"\n+                + \"display: inline-block;\", /** Sets background color behind emphasis mark */\n+            position));\n+      }\n+      builder.append(\"'>\");\n+      return builder.toString();\n     } else {\n       return null;\n     }\n@@ -209,7 +226,8 @@ private static String getClosingTag(Object span) {\n         || span instanceof BackgroundColorSpan\n         || span instanceof HorizontalTextInVerticalContextSpan\n         || span instanceof AbsoluteSizeSpan\n-        || span instanceof RelativeSizeSpan) {\n+        || span instanceof RelativeSizeSpan\n+        || span instanceof TextEmphasisSpan) {\n       return \"</span>\";\n     } else if (span instanceof TypefaceSpan) {\n       @Nullable String fontFamily = ((TypefaceSpan) span).getFamily();\n@@ -232,6 +250,57 @@ private static String getClosingTag(Object span) {\n     return null;\n   }\n \n+  private static String getTextEmphasisStyle(@TextEmphasisSpan.MarkShape int shape,\n+      @TextEmphasisSpan.MarkFill int fill) {\n+    StringBuilder builder = new StringBuilder();\n+    switch (fill) {\n+      case TextEmphasisSpan.MARK_FILL_FILLED:\n+        builder.append(\"filled \");\n+        break;\n+      case TextEmphasisSpan.MARK_FILL_OPEN:\n+        builder.append(\"open \");\n+        break;\n+      case TextEmphasisSpan.MARK_FILL_UNSPECIFIED:\n+      default:\n+        break;\n+    }\n+\n+    switch (shape) {\n+      case TextEmphasisSpan.MARK_SHAPE_CIRCLE:\n+        builder.append(\"circle\");\n+        break;\n+      case TextEmphasisSpan.MARK_SHAPE_DOT:\n+        builder.append(\"dot\");\n+        break;\n+      case TextEmphasisSpan.MARK_SHAPE_SESAME:\n+        builder.append(\"sesame\");\n+        break;\n+      case TextEmphasisSpan.MARK_SHAPE_NONE:\n+        builder.append(\"none\");\n+        break;\n+      default:\n+        builder.append(\"unset\");\n+        break;\n+    }\n+    return builder.toString();\n+  }\n+\n+  private static String getTextEmphasisPosition(@TextAnnotation.Position int position){\n+    switch (position) {\n+      case TextAnnotation.POSITION_AFTER:\n+        return \"under left\";\n+      case TextAnnotation.POSITION_UNKNOWN:\n+      case TextAnnotation.POSITION_BEFORE:\n+      default:\n+        // https://www.w3.org/TR/ttml2/#style-value-annotation-position\n+        // If an implementation does not recognize or otherwise distinguish an annotation position\n+        // value, then it must be interpreted as if a position of before were specified; as such,\n+        // an implementation that supports text annotation marks must minimally support the before\n+        // value.\n+        return \"over right\";\n+    }\n+  }\n+\n   private static Transition getOrCreate(SparseArray<Transition> transitions, int key) {\n     @Nullable Transition transition = transitions.get(key);\n     if (transition == null) {"
  },
  {
    "sha": "65a6a202706fe2e9654b9c57020096a9af11557f",
    "filename": "library/ui/src/test/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverterTest.java",
    "status": "modified",
    "additions": 55,
    "deletions": 2,
    "changes": 57,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/ui/src/test/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverterTest.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/library/ui/src/test/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverterTest.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/library/ui/src/test/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverterTest.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -34,6 +34,8 @@\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import com.google.android.exoplayer2.text.span.HorizontalTextInVerticalContextSpan;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.annotation.Config;\n@@ -250,12 +252,12 @@ public void convert_supportsRubySpan() {\n     SpannableString spanned =\n         new SpannableString(\"String with over-annotated and under-annotated section\");\n     spanned.setSpan(\n-        new RubySpan(\"ruby-text\", RubySpan.POSITION_OVER),\n+        new RubySpan(\"ruby-text\", TextAnnotation.POSITION_BEFORE),\n         \"String with \".length(),\n         \"String with over-annotated\".length(),\n         Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n     spanned.setSpan(\n-        new RubySpan(\"non-àscìì-text\", RubySpan.POSITION_UNDER),\n+        new RubySpan(\"non-àscìì-text\", TextAnnotation.POSITION_AFTER),\n         \"String with over-annotated and \".length(),\n         \"String with over-annotated and under-annotated\".length(),\n         Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n@@ -279,6 +281,57 @@ public void convert_supportsRubySpan() {\n                 + \"section\");\n   }\n \n+  @Test\n+  public void convert_supportsTextEmphasisSpan() {\n+    SpannableString spanned = new SpannableString(\"Text emphasis おはよ ございます\");\n+    spanned.setSpan(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_SHAPE_NONE, TextEmphasisSpan.MARK_FILL_UNSPECIFIED,\n+            TextAnnotation.POSITION_UNKNOWN),\n+        \"\".length(),\n+        \"Text emphasis \".length(),\n+        Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n+\n+    spanned.setSpan(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_SHAPE_CIRCLE, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_BEFORE),\n+        \"Text emphasis \".length(),\n+        \"Text emphasis おはよ \".length(),\n+        Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n+\n+    spanned.setSpan(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_SHAPE_SESAME, TextEmphasisSpan.MARK_FILL_OPEN,\n+            TextAnnotation.POSITION_AFTER),\n+        \"Text emphasis おはよ \".length(),\n+        \"Text emphasis おはよ ござ\".length(),\n+        Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n+\n+    spanned.setSpan(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_SHAPE_DOT, TextEmphasisSpan.MARK_FILL_FILLED,\n+            TextAnnotation.POSITION_AFTER),\n+        \"Text emphasis おはよ ござ\".length(),\n+        \"Text emphasis おはよ ございます\".length(),\n+        Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n+\n+\n+    SpannedToHtmlConverter.HtmlAndCss htmlAndCss =\n+        SpannedToHtmlConverter.convert(spanned, displayDensity);\n+\n+    assertThat(htmlAndCss.cssRuleSets).isEmpty();\n+    assertThat(htmlAndCss.html)\n+        .isEqualTo(\n+            \"<span style='-webkit-text-emphasis-style: none; text-emphasis-style: none;'>\"\n+                + \"Text emphasis </span><span style='-webkit-text-emphasis-style: filled circle; \"\n+                + \"text-emphasis-style: filled circle; -webkit-text-emphasis-position: over right; \"\n+                + \"text-emphasis-position: over right; display: inline-block;'>\"\n+                + \"&#12362;&#12399;&#12424; </span><span style='-webkit-text-emphasis-style: \"\n+                + \"open sesame; text-emphasis-style: open sesame; -webkit-text-emphasis-position: \"\n+                + \"under left; text-emphasis-position: under left; display: inline-block;'>\"\n+                + \"&#12372;&#12374;</span><span style='-webkit-text-emphasis-style: filled dot; \"\n+                + \"text-emphasis-style: filled dot; -webkit-text-emphasis-position: under left; \"\n+                + \"text-emphasis-position: under left; display: inline-block;'>\"\n+                + \"&#12356;&#12414;&#12377;</span>\");\n+  }\n+\n   @Test\n   public void convert_supportsUnderlineSpan() {\n     SpannableString spanned = new SpannableString(\"String with underlined section.\");"
  },
  {
    "sha": "3f56704a37a943632ce7030adb7e687f1c64699b",
    "filename": "testdata/src/test/assets/media/ttml/text_emphasis.xml",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/testdata/src/test/assets/media/ttml/text_emphasis.xml",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/testdata/src/test/assets/media/ttml/text_emphasis.xml",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/testdata/src/test/assets/media/ttml/text_emphasis.xml?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -0,0 +1,65 @@\n+<tt xmlns:ttm=\"http://www.w3.org/2006/10/ttaf1#metadata\"\n+  xmlns:ttp=\"http://www.w3.org/2006/10/ttaf1#parameter\"\n+  xmlns:tts=\"http://www.w3.org/2006/10/ttaf1#style\"\n+  xmlns=\"http://www.w3.org/ns/ttml\">\n+  <head>\n+    <region xml:id=\"region_tbrl\" tts:extent=\"80.000% 80.000%\" tts:origin=\"10.000% 10.000%\" tts:writingMode=\"tbrl\"/>\n+    <region xml:id=\"region_tblr\" tts:extent=\"80.000% 80.000%\" tts:origin=\"10.000% 10.000%\" tts:writingMode=\"tblr\"/>\n+    <region xml:id=\"region_tb\" tts:extent=\"80.000% 80.000%\" tts:origin=\"10.000% 10.000%\" tts:writingMode=\"tb\"/>\n+    <region xml:id=\"region_lr\" tts:extent=\"80.000% 80.000%\" tts:origin=\"10.000% 10.000%\" tts:writingMode=\"lr\"/>\n+  </head>\n+  <body>\n+    <div>\n+      <p begin=\"10s\" end=\"18s\">None <span tts:textEmphasis=\"none\">おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"20s\" end=\"28s\">Auto <span tts:textEmphasis=\"auto\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"30s\" end=\"38s\">Filled circle <span tts:textEmphasis=\"filled circle\">こんばんは</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"40s\" end=\"48s\">Filled dot <span tts:textEmphasis=\"filled dot\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"50s\" end=\"58s\">Filled sesame <span tts:textEmphasis=\"filled sesame\">おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"60s\" end=\"68s\">Open circle before <span tts:textEmphasis=\"open circle before\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"70s\" end=\"78s\">Open dot after <span tts:textEmphasis=\"open dot after\">おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"80s\" end=\"88s\">Open sesame outside <span tts:textEmphasis=\"open sesame outside\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"90s\" end=\"98s\">Auto outside <span tts:textEmphasis=\"auto outside\">おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"100s\" end=\"108s\">Circle before <span tts:textEmphasis=\"circle before\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"110s\" end=\"118s\">Sesame after <span tts:textEmphasis=\"sesame after\">おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"120s\" end=\"128s\">Dot outside <span tts:textEmphasis=\"dot outside\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"130s\" end=\"138s\">No textEmphasis property <span>おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"140s\" end=\"148s\" region=\"region_tbrl\">Auto (TBLR) <span tts:textEmphasis=\"auto\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"150s\" end=\"158s\" region=\"region_tblr\">Auto (TBRL) <span tts:textEmphasis=\"auto\">おはよ</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"160s\" end=\"168s\" region=\"region_tb\">Auto (TB) <span tts:textEmphasis=\"auto\">ございます</span></p>\n+    </div>\n+    <div>\n+      <p begin=\"170s\" end=\"178s\" region=\"region_lr\">Auto (LR) <span tts:textEmphasis=\"auto\">おはよ</span></p>\n+    </div>\n+\n+  </body>\n+</tt>"
  },
  {
    "sha": "b9f05c9e87b23552307fb1bf0865d4c41bd27fef",
    "filename": "testutils/src/main/java/com/google/android/exoplayer2/testutil/truth/SpannedSubject.java",
    "status": "modified",
    "additions": 145,
    "deletions": 3,
    "changes": 148,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/testutils/src/main/java/com/google/android/exoplayer2/testutil/truth/SpannedSubject.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/testutils/src/main/java/com/google/android/exoplayer2/testutil/truth/SpannedSubject.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/testutils/src/main/java/com/google/android/exoplayer2/testutil/truth/SpannedSubject.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -38,6 +38,8 @@\n import androidx.annotation.Nullable;\n import com.google.android.exoplayer2.text.span.HorizontalTextInVerticalContextSpan;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextAnnotation;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n import com.google.android.exoplayer2.util.Util;\n import com.google.common.truth.Fact;\n import com.google.common.truth.FailureMetadata;\n@@ -578,6 +580,47 @@ public WithSpanFlags hasHorizontalTextInVerticalContextSpanBetween(int start, in\n     return ALREADY_FAILED_WITH_FLAGS;\n   }\n \n+  /**\n+   * Checks that the subject has an {@link TextEmphasisSpan} from {@code start}\n+   * to {@code end}.\n+   *\n+   * @param start The start of the expected span.\n+   * @param end The end of the expected span.\n+   * @return A {@link WithSpanFlags} object for optional additional assertions on the flags.\n+   */\n+  public TextEmphasisDescription hasTextEmphasisSpanBetween(int start, int end) {\n+    if (actual == null) {\n+      failWithoutActual(simpleFact(\"Spanned must not be null\"));\n+      return ALREADY_FAILED_WITH_MARK;\n+    }\n+\n+    List<TextEmphasisSpan> textEmphasisSpans =\n+        findMatchingSpans(start, end, TextEmphasisSpan.class);\n+    if (textEmphasisSpans.size() == 1) {\n+      return check(\"TextEmphasisSpan (start=%s,end=%s)\", start, end).about(textEmphasisSubjects(actual)).that(textEmphasisSpans);\n+    }\n+    failWithExpectedSpan(\n+        start,\n+        end,\n+        TextEmphasisSpan.class,\n+        actual.toString().substring(start, end));\n+    return ALREADY_FAILED_WITH_MARK;\n+  }\n+\n+  /**\n+   * Checks that the subject has no {@link TextEmphasisSpan}s on any of the text between\n+   * {@code start} and {@code end}.\n+   *\n+   * <p>This fails even if the start and end indexes don't exactly match.\n+   *\n+   * @param start The start index to start searching for spans.\n+   * @param end The end index to stop searching for spans.\n+   */\n+  public void hasNoTextEmphasisSpanBetween(int start, int end) {\n+    hasNoSpansOfTypeBetween(TextEmphasisSpan.class, start, end);\n+  }\n+\n+\n   /**\n    * Checks that the subject has no {@link HorizontalTextInVerticalContextSpan}s on any of the text\n    * between {@code start} and {@code end}.\n@@ -1033,7 +1076,7 @@ public AndSpanFlags withSizeChange(float size) {\n      * @param position The expected position of the text.\n      * @return A {@link WithSpanFlags} object for optional additional assertions on the flags.\n      */\n-    AndSpanFlags withTextAndPosition(String text, @RubySpan.Position int position);\n+    AndSpanFlags withTextAndPosition(String text, @TextAnnotation.Position int position);\n   }\n \n   private static final RubyText ALREADY_FAILED_WITH_TEXT =\n@@ -1057,7 +1100,7 @@ private RubySpansSubject(\n     }\n \n     @Override\n-    public AndSpanFlags withTextAndPosition(String text, @RubySpan.Position int position) {\n+    public AndSpanFlags withTextAndPosition(String text, @TextAnnotation.Position int position) {\n       List<Integer> matchingSpanFlags = new ArrayList<>();\n       List<TextAndPosition> spanTextsAndPositions = new ArrayList<>();\n       for (RubySpan span : actualSpans) {\n@@ -1074,7 +1117,7 @@ public AndSpanFlags withTextAndPosition(String text, @RubySpan.Position int posi\n \n     private static final class TextAndPosition {\n       private final String text;\n-      @RubySpan.Position private final int position;\n+      @TextAnnotation.Position private final int position;\n \n       private TextAndPosition(String text, int position) {\n         this.text = text;\n@@ -1110,4 +1153,103 @@ public String toString() {\n       }\n     }\n   }\n+\n+  /** Allows assertions about a span's textEmphasis mark and its position. */\n+  public interface TextEmphasisDescription {\n+    /**\n+     * Checks that at least one of the matched spans has the expected {@code mark} and {@code position}.\n+     *\n+     * @param markShape The expected mark shape\n+     * @param markFill The expected mark fill\n+     * @param position The expected position of the mark\n+     * @return A {@link WithSpanFlags} object for optional additional assertions on the flags.\n+     */\n+    AndSpanFlags withMarkAndPosition(@TextEmphasisSpan.MarkShape int markShape,\n+        @TextEmphasisSpan.MarkFill int markFill,\n+        @TextAnnotation.Position int position);\n+  }\n+\n+  private static final TextEmphasisDescription ALREADY_FAILED_WITH_MARK =\n+      (markShape, markFill, position) -> ALREADY_FAILED_AND_FLAGS;\n+\n+  private static Factory<TextEmphasisSubject, List<TextEmphasisSpan>> textEmphasisSubjects(Spanned actualSpanned) {\n+    return (FailureMetadata metadata, List<TextEmphasisSpan> spans) ->\n+        new TextEmphasisSubject(metadata, spans, actualSpanned);\n+  }\n+\n+  private static final class TextEmphasisSubject extends Subject implements TextEmphasisDescription {\n+\n+    private final List<TextEmphasisSpan> actualSpans;\n+    private final Spanned actualSpanned;\n+\n+    private TextEmphasisSubject(\n+        FailureMetadata metadata, List<TextEmphasisSpan> actualSpans, Spanned actualSpanned) {\n+      super(metadata, actualSpans);\n+      this.actualSpans = actualSpans;\n+      this.actualSpanned = actualSpanned;\n+    }\n+\n+    @Override\n+    public AndSpanFlags withMarkAndPosition(@TextEmphasisSpan.MarkShape int markShape,\n+        @TextEmphasisSpan.MarkFill int markFill,\n+        @TextAnnotation.Position int position) {\n+      List<Integer> matchingSpanFlags = new ArrayList<>();\n+      List<MarkAndPosition> textEmphasisMarksAndPositions = new ArrayList<>();\n+      for (TextEmphasisSpan span : actualSpans) {\n+        textEmphasisMarksAndPositions\n+            .add(new MarkAndPosition(span.markShape, span.markFill, span.position));\n+        if (span.markFill == markFill && span.markShape == markShape && span.position == position) {\n+          matchingSpanFlags.add(actualSpanned.getSpanFlags(span));\n+        }\n+      }\n+      check(\"textEmphasisMarkAndPosition\")\n+          .that(textEmphasisMarksAndPositions)\n+          .containsExactly(new MarkAndPosition(markShape, markFill, position));\n+      return check(\"flags\").about(spanFlags()).that(matchingSpanFlags);\n+    }\n+\n+    private static final class MarkAndPosition {\n+\n+      @TextEmphasisSpan.MarkShape\n+      private final int markShape;\n+      @TextEmphasisSpan.MarkFill\n+      private final int markFill;\n+      @TextAnnotation.Position\n+      private final int position;\n+\n+      private MarkAndPosition(@TextEmphasisSpan.MarkShape int markShape,\n+          @TextEmphasisSpan.MarkFill int markFill,\n+          @TextAnnotation.Position int position) {\n+        this.markFill = markFill;\n+        this.markShape = markShape;\n+        this.position = position;\n+      }\n+\n+      @Override\n+      public boolean equals(@Nullable Object o) {\n+        if (this == o) {\n+          return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+          return false;\n+        }\n+\n+        TextEmphasisSubject.MarkAndPosition that = (TextEmphasisSubject.MarkAndPosition) o;\n+        return (position == that.position) && (markShape == that.markShape) && (markFill\n+            == that.markFill);\n+      }\n+\n+      @Override\n+      public int hashCode() {\n+        int result = 34613 * markFill + 1993 * markShape + position;\n+        return result;\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return String\n+            .format(\"{markShape=%s, markFill=%s, position=%s}\", markShape, markFill, position);\n+      }\n+    }\n+  }\n }"
  },
  {
    "sha": "5625e1eb8cb80ff10777bf3e28e3d08cea24b12e",
    "filename": "testutils/src/test/java/com/google/android/exoplayer2/testutil/truth/SpannedSubjectTest.java",
    "status": "modified",
    "additions": 113,
    "deletions": 13,
    "changes": 126,
    "blob_url": "https://github.com/google/ExoPlayer/blob/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/testutils/src/test/java/com/google/android/exoplayer2/testutil/truth/SpannedSubjectTest.java",
    "raw_url": "https://github.com/google/ExoPlayer/raw/5484c7ed3824d4ff907753fc8e44cdea04b6f6eb/testutils/src/test/java/com/google/android/exoplayer2/testutil/truth/SpannedSubjectTest.java",
    "contents_url": "https://api.github.com/repos/google/ExoPlayer/contents/testutils/src/test/java/com/google/android/exoplayer2/testutil/truth/SpannedSubjectTest.java?ref=5484c7ed3824d4ff907753fc8e44cdea04b6f6eb",
    "patch": "@@ -41,6 +41,8 @@\n import com.google.android.exoplayer2.testutil.truth.SpannedSubject.WithSpanFlags;\n import com.google.android.exoplayer2.text.span.HorizontalTextInVerticalContextSpan;\n import com.google.android.exoplayer2.text.span.RubySpan;\n+import com.google.android.exoplayer2.text.span.TextEmphasisSpan;\n+import com.google.android.exoplayer2.util.Util;\n import com.google.common.truth.ExpectFailure;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -607,31 +609,31 @@ public void noRelativeSizeSpan_failure() {\n   public void rubySpan_success() {\n     SpannableString spannable =\n         createSpannable(\n-            new RubySpan(\"ruby text\", RubySpan.POSITION_OVER), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);\n+            new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);\n \n     assertThat(spannable)\n         .hasRubySpanBetween(SPAN_START, SPAN_END)\n-        .withTextAndPosition(\"ruby text\", RubySpan.POSITION_OVER)\n+        .withTextAndPosition(\"ruby text\", TextAnnotation.POSITION_BEFORE)\n         .andFlags(Spanned.SPAN_INCLUSIVE_EXCLUSIVE);\n   }\n \n   @Test\n   public void rubySpan_wrongEndIndex() {\n     checkHasSpanFailsDueToIndexMismatch(\n-        new RubySpan(\"ruby text\", RubySpan.POSITION_OVER), SpannedSubject::hasRubySpanBetween);\n+        new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE), SpannedSubject::hasRubySpanBetween);\n   }\n \n   @Test\n   public void rubySpan_wrongText() {\n-    SpannableString spannable = createSpannable(new RubySpan(\"ruby text\", RubySpan.POSITION_OVER));\n+    SpannableString spannable = createSpannable(new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE));\n \n     AssertionError expected =\n         expectFailure(\n             whenTesting ->\n                 whenTesting\n                     .that(spannable)\n                     .hasRubySpanBetween(SPAN_START, SPAN_END)\n-                    .withTextAndPosition(\"incorrect text\", RubySpan.POSITION_OVER));\n+                    .withTextAndPosition(\"incorrect text\", TextAnnotation.POSITION_BEFORE));\n \n     assertThat(expected).factValue(\"value of\").contains(\"rubyTextAndPosition\");\n     assertThat(expected).factValue(\"expected\").contains(\"text='incorrect text'\");\n@@ -640,43 +642,141 @@ public void rubySpan_wrongText() {\n \n   @Test\n   public void rubySpan_wrongPosition() {\n-    SpannableString spannable = createSpannable(new RubySpan(\"ruby text\", RubySpan.POSITION_OVER));\n+    SpannableString spannable = createSpannable(new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE));\n \n     AssertionError expected =\n         expectFailure(\n             whenTesting ->\n                 whenTesting\n                     .that(spannable)\n                     .hasRubySpanBetween(SPAN_START, SPAN_END)\n-                    .withTextAndPosition(\"ruby text\", RubySpan.POSITION_UNDER));\n+                    .withTextAndPosition(\"ruby text\", TextAnnotation.POSITION_AFTER));\n \n     assertThat(expected).factValue(\"value of\").contains(\"rubyTextAndPosition\");\n-    assertThat(expected).factValue(\"expected\").contains(\"position=\" + RubySpan.POSITION_UNDER);\n-    assertThat(expected).factValue(\"but was\").contains(\"position=\" + RubySpan.POSITION_OVER);\n+    assertThat(expected).factValue(\"expected\").contains(\"position=\" + TextAnnotation.POSITION_AFTER);\n+    assertThat(expected).factValue(\"but was\").contains(\"position=\" + TextAnnotation.POSITION_BEFORE);\n   }\n \n   @Test\n   public void rubySpan_wrongFlags() {\n     checkHasSpanFailsDueToFlagMismatch(\n-        new RubySpan(\"ruby text\", RubySpan.POSITION_OVER),\n+        new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE),\n         (subject, start, end) ->\n             subject\n                 .hasRubySpanBetween(start, end)\n-                .withTextAndPosition(\"ruby text\", RubySpan.POSITION_OVER));\n+                .withTextAndPosition(\"ruby text\", TextAnnotation.POSITION_BEFORE));\n   }\n \n   @Test\n   public void noRubySpan_success() {\n     SpannableString spannable =\n-        createSpannableWithUnrelatedSpanAnd(new RubySpan(\"ruby text\", RubySpan.POSITION_OVER));\n+        createSpannableWithUnrelatedSpanAnd(new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE));\n \n     assertThat(spannable).hasNoRubySpanBetween(UNRELATED_SPAN_START, UNRELATED_SPAN_END);\n   }\n \n   @Test\n   public void noRubySpan_failure() {\n     checkHasNoSpanFails(\n-        new RubySpan(\"ruby text\", RubySpan.POSITION_OVER), SpannedSubject::hasNoRubySpanBetween);\n+        new RubySpan(\"ruby text\", TextAnnotation.POSITION_BEFORE), SpannedSubject::hasNoRubySpanBetween);\n+  }\n+\n+  @Test\n+  public void textEmphasis_success() {\n+    SpannableString spannable =\n+        createSpannable(\n+            new TextEmphasisSpan(TextEmphasisSpan.MARK_FILLED_CIRCLE, TextEmphasisSpan.POSITION_AFTER));\n+\n+    assertThat(spannable)\n+        .hasTextEmphasisSpanBetween(SPAN_START, SPAN_END)\n+        .withMarkAndPosition(TextEmphasisSpan.MARK_FILLED_CIRCLE, TextEmphasisSpan.POSITION_AFTER)\n+        .andFlags(Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n+  }\n+\n+  @Test\n+  public void textEmphasis_wrongIndex() {\n+    checkHasSpanFailsDueToIndexMismatch(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_FILLED_CIRCLE, TextEmphasisSpan.POSITION_AFTER),\n+        SpannedSubject::hasTextEmphasisSpanBetween);\n+  }\n+\n+\n+  @Test\n+  public void textEmphasis_wrongMark() {\n+    SpannableString spannable =\n+        createSpannable(\n+            new TextEmphasisSpan(TextEmphasisSpan.MARK_FILLED_CIRCLE, TextEmphasisSpan.POSITION_AFTER));\n+\n+    AssertionError expected =\n+        expectFailure(\n+            whenTesting ->\n+                whenTesting\n+                    .that(spannable)\n+                    .hasTextEmphasisSpanBetween(SPAN_START, SPAN_END)\n+                    .withMarkAndPosition(TextEmphasisSpan.MARK_OPEN_DOT,\n+                        TextEmphasisSpan.POSITION_AFTER));\n+\n+    assertThat(expected).factValue(\"value of\").contains(\"textEmphasisMarkAndPosition\");\n+    assertThat(expected).factValue(\"expected\").contains(Util.formatInvariant(\n+        \"{mark=%d,position=%d}\", TextEmphasisSpan.MARK_OPEN_DOT,\n+        TextEmphasisSpan.POSITION_AFTER));\n+    assertThat(expected).factValue(\"but was\").contains(Util.formatInvariant(\n+        \"{mark=%d,position=%d}\", TextEmphasisSpan.MARK_FILLED_CIRCLE,\n+        TextEmphasisSpan.POSITION_AFTER));\n+\n+  }\n+\n+  @Test\n+  public void textEmphasis_wrongPosition() {\n+    SpannableString spannable =\n+        createSpannable(\n+            new TextEmphasisSpan(TextEmphasisSpan.MARK_OPEN_SESAME, TextEmphasisSpan.POSITION_BEFORE));\n+\n+    AssertionError expected =\n+        expectFailure(\n+            whenTesting ->\n+                whenTesting\n+                    .that(spannable)\n+                    .hasTextEmphasisSpanBetween(SPAN_START, SPAN_END)\n+                    .withMarkAndPosition(TextEmphasisSpan.MARK_OPEN_SESAME,\n+                        TextEmphasisSpan.POSITION_AFTER));\n+\n+    assertThat(expected).factValue(\"value of\").contains(\"textEmphasisMarkAndPosition\");\n+    assertThat(expected).factValue(\"expected\").contains(Util.formatInvariant(\n+        \"{mark=%d,position=%d}\", TextEmphasisSpan.MARK_OPEN_SESAME,\n+        TextEmphasisSpan.POSITION_AFTER));\n+    assertThat(expected).factValue(\"but was\").contains(Util.formatInvariant(\n+        \"{mark=%d,position=%d}\", TextEmphasisSpan.MARK_OPEN_SESAME,\n+        TextEmphasisSpan.POSITION_BEFORE));\n+  }\n+\n+  @Test\n+  public void textEmphasis_wrongFlags() {\n+    checkHasSpanFailsDueToFlagMismatch(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_OPEN_SESAME, TextEmphasisSpan.POSITION_BEFORE),\n+        (subject, start, end) ->\n+            subject\n+                .hasTextEmphasisSpanBetween(start, end)\n+                .withMarkAndPosition(TextEmphasisSpan.MARK_OPEN_SESAME,\n+                    TextEmphasisSpan.POSITION_BEFORE));\n+  }\n+\n+\n+  @Test\n+  public void noTextEmphasis_success() {\n+    SpannableString spannable =\n+        createSpannableWithUnrelatedSpanAnd(\n+            new TextEmphasisSpan(TextEmphasisSpan.MARK_FILLED_CIRCLE,\n+                TextEmphasisSpan.POSITION_AFTER));\n+\n+    assertThat(spannable).hasNoTextEmphasisSpanBetween(UNRELATED_SPAN_START, UNRELATED_SPAN_END);\n+  }\n+\n+  @Test\n+  public void noTextEmphasis_failure() {\n+    checkHasNoSpanFails(\n+        new TextEmphasisSpan(TextEmphasisSpan.MARK_FILLED_CIRCLE, TextEmphasisSpan.POSITION_AFTER),\n+        SpannedSubject::hasNoTextEmphasisSpanBetween);\n   }\n \n   @Test"
  }
]
