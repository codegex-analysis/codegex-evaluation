[
  {
    "sha": "84d07811421c76e05bfe9e00d11b16bb1a57f88f",
    "filename": "core/src/main/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotation.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/google/error-prone/blob/0976cd25cd63de9d6c2564c4ac88942f77abb519/core/src/main/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotation.java",
    "raw_url": "https://github.com/google/error-prone/raw/0976cd25cd63de9d6c2564c4ac88942f77abb519/core/src/main/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotation.java",
    "contents_url": "https://api.github.com/repos/google/error-prone/contents/core/src/main/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotation.java?ref=0976cd25cd63de9d6c2564c4ac88942f77abb519",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2021 The Error Prone Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.errorprone.bugpatterns;\n+\n+import static com.google.errorprone.matchers.ChildMultiMatcher.MatchType.AT_LEAST_ONE;\n+import static com.google.errorprone.matchers.Matchers.annotations;\n+import static com.google.errorprone.matchers.Matchers.anyOf;\n+import static com.google.errorprone.matchers.Matchers.isType;\n+\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.LinkType;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.BugPattern.StandardTags;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker.ClassTreeMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.MultiMatcher;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.AnnotationTree;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+\n+/** A {@link BugChecker}; see the associated {@link BugPattern} annotation for details. */\n+@BugPattern(\n+    name = \"MissingRefasterAnnotation\",\n+    summary = \"The Refaster template contains a method without any Refaster annotations\",\n+    linkType = LinkType.NONE,\n+    severity = SeverityLevel.WARNING,\n+    tags = StandardTags.LIKELY_ERROR)\n+public final class MissingRefasterAnnotation extends BugChecker implements ClassTreeMatcher {\n+  private static final MultiMatcher<Tree, AnnotationTree> HAS_REFASTER_ANNOTATION =\n+      annotations(\n+          AT_LEAST_ONE,\n+          anyOf(\n+              isType(\"com.google.errorprone.refaster.annotation.Placeholder\"),\n+              isType(\"com.google.errorprone.refaster.annotation.BeforeTemplate\"),\n+              isType(\"com.google.errorprone.refaster.annotation.AfterTemplate\")));\n+\n+  @Override\n+  public Description matchClass(ClassTree tree, VisitorState state) {\n+    long methodTypes =\n+        tree.getMembers().stream()\n+            .filter(member -> member.getKind() == Tree.Kind.METHOD)\n+            .map(MethodTree.class::cast)\n+            .filter(method -> !ASTHelpers.isGeneratedConstructor(method))\n+            .map(method -> HAS_REFASTER_ANNOTATION.matches(method, state))\n+            .distinct()\n+            .count();\n+\n+    return methodTypes < 2 ? Description.NO_MATCH : buildDescription(tree).build();\n+  }\n+}"
  },
  {
    "sha": "73128084e093fd05420a1e83935ad885e3ac2e9f",
    "filename": "core/src/main/java/com/google/errorprone/scanner/BuiltInCheckerSuppliers.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/google/error-prone/blob/0976cd25cd63de9d6c2564c4ac88942f77abb519/core/src/main/java/com/google/errorprone/scanner/BuiltInCheckerSuppliers.java",
    "raw_url": "https://github.com/google/error-prone/raw/0976cd25cd63de9d6c2564c4ac88942f77abb519/core/src/main/java/com/google/errorprone/scanner/BuiltInCheckerSuppliers.java",
    "contents_url": "https://api.github.com/repos/google/error-prone/contents/core/src/main/java/com/google/errorprone/scanner/BuiltInCheckerSuppliers.java?ref=0976cd25cd63de9d6c2564c4ac88942f77abb519",
    "patch": "@@ -201,6 +201,7 @@\n import com.google.errorprone.bugpatterns.MissingDefault;\n import com.google.errorprone.bugpatterns.MissingFail;\n import com.google.errorprone.bugpatterns.MissingOverride;\n+import com.google.errorprone.bugpatterns.MissingRefasterAnnotation;\n import com.google.errorprone.bugpatterns.MissingSuperCall;\n import com.google.errorprone.bugpatterns.MissingTestCall;\n import com.google.errorprone.bugpatterns.MisusedDayOfYear;\n@@ -837,6 +838,7 @@ public static ScannerSupplier errorChecks() {\n           MissingCasesInEnumSwitch.class,\n           MissingFail.class,\n           MissingOverride.class,\n+          MissingRefasterAnnotation.class,\n           MissingSummary.class,\n           MixedMutabilityReturnType.class,\n           ModifiedButNotUsed.class,"
  },
  {
    "sha": "585d9cc0c90138c5c648b7ac657c6bec417b9f54",
    "filename": "core/src/test/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotationTest.java",
    "status": "added",
    "additions": 112,
    "deletions": 0,
    "changes": 112,
    "blob_url": "https://github.com/google/error-prone/blob/0976cd25cd63de9d6c2564c4ac88942f77abb519/core/src/test/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotationTest.java",
    "raw_url": "https://github.com/google/error-prone/raw/0976cd25cd63de9d6c2564c4ac88942f77abb519/core/src/test/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotationTest.java",
    "contents_url": "https://api.github.com/repos/google/error-prone/contents/core/src/test/java/com/google/errorprone/bugpatterns/MissingRefasterAnnotationTest.java?ref=0976cd25cd63de9d6c2564c4ac88942f77abb519",
    "patch": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 The Error Prone Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.errorprone.bugpatterns;\n+\n+import com.google.common.base.Predicates;\n+import com.google.errorprone.CompilationTestHelper;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for {@link MissingRefasterAnnotation}. */\n+@RunWith(JUnit4.class)\n+public final class MissingRefasterAnnotationTest {\n+  private final CompilationTestHelper compilationTestHelper =\n+      CompilationTestHelper.newInstance(MissingRefasterAnnotation.class, getClass())\n+          .expectErrorMessage(\n+              \"X\",\n+              Predicates.containsPattern(\n+                  \"The Refaster template contains a method without any Refaster annotations\"));\n+\n+  @Test\n+  public void testIdentification() {\n+    compilationTestHelper\n+        .addSourceLines(\n+            \"A.java\",\n+            \"import com.google.errorprone.refaster.annotation.AfterTemplate;\",\n+            \"import com.google.errorprone.refaster.annotation.AlsoNegation;\",\n+            \"import com.google.errorprone.refaster.annotation.BeforeTemplate;\",\n+            \"import java.util.Map;\",\n+            \"\",\n+            \"class A {\",\n+            \"  // BUG: Diagnostic matches: X\",\n+            \"  static final class MethodLacksBeforeTemplateAnnotation {\",\n+            \"    @BeforeTemplate\",\n+            \"    boolean before1(String string) {\",\n+            \"      return string.equals(\\\"\\\");\",\n+            \"    }\",\n+            \"\",\n+            \"    // @BeforeTemplate is missing\",\n+            \"    boolean before2(String string) {\",\n+            \"      return string.length() == 0;\",\n+            \"    }\",\n+            \"\",\n+            \"    @AfterTemplate\",\n+            \"    @AlsoNegation\",\n+            \"    boolean after(String string) {\",\n+            \"      return string.isEmpty();\",\n+            \"    }\",\n+            \"  }\",\n+            \"\",\n+            \"  // BUG: Diagnostic matches: X\",\n+            \"  static final class MethodLacksAfterTemplateAnnotation {\",\n+            \"    @BeforeTemplate\",\n+            \"    boolean before(String string) {\",\n+            \"      return string.equals(\\\"\\\");\",\n+            \"    }\",\n+            \"\",\n+            \"    // @AfterTemplate is missing\",\n+            \"    boolean after(String string) {\",\n+            \"      return string.isEmpty();\",\n+            \"    }\",\n+            \"  }\",\n+            \"\",\n+            \"  // BUG: Diagnostic matches: X\",\n+            \"  abstract class MethodLacksPlaceholderAnnotation<K, V> {\",\n+            \"    // @Placeholder is missing\",\n+            \"    abstract V function(K key);\",\n+            \"\",\n+            \"    @BeforeTemplate\",\n+            \"    void before(Map<K, V> map, K key) {\",\n+            \"      if (!map.containsKey(key)) {\",\n+            \"        map.put(key, function(key));\",\n+            \"      }\",\n+            \"    }\",\n+            \"\",\n+            \"    @AfterTemplate\",\n+            \"    void after(Map<K, V> map, K key) {\",\n+            \"      map.computeIfAbsent(key, k -> function(k));\",\n+            \"    }\",\n+            \"  }\",\n+            \"\",\n+            \"  static final class ValidRefasterTemplate {\",\n+            \"    @BeforeTemplate\",\n+            \"    void unusedPureFunctionCall(Object o) {\",\n+            \"      o.toString();\",\n+            \"    }\",\n+            \"  }\",\n+            \"\",\n+            \"  static final class NotARefasterTemplate {\",\n+            \"    @Override\",\n+            \"    public String toString() {\",\n+            \"      return \\\"This is not a Refaster template\\\";\",\n+            \"    }\",\n+            \"  }\",\n+            \"}\")\n+        .doTest();\n+  }\n+}"
  },
  {
    "sha": "4d80d5b3f8d1e45482a5804b773f2c77638de180",
    "filename": "docs/bugpattern/MissingRefasterAnnotation.md",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/google/error-prone/blob/0976cd25cd63de9d6c2564c4ac88942f77abb519/docs/bugpattern/MissingRefasterAnnotation.md",
    "raw_url": "https://github.com/google/error-prone/raw/0976cd25cd63de9d6c2564c4ac88942f77abb519/docs/bugpattern/MissingRefasterAnnotation.md",
    "contents_url": "https://api.github.com/repos/google/error-prone/contents/docs/bugpattern/MissingRefasterAnnotation.md?ref=0976cd25cd63de9d6c2564c4ac88942f77abb519",
    "patch": "@@ -0,0 +1,23 @@\n+A Refaster template consists of multiple methods. Typically, each method in the\n+class has an annotation. If a method has no annotation, this is likely an\n+oversight.\n+\n+```java\n+static final class MethodLacksBeforeTemplateAnnotation {\n+  @BeforeTemplate\n+  boolean before1(String string) {\n+    return string.equals(\"\");\n+  }\n+\n+  // @BeforeTemplate is missing\n+  boolean before2(String string) {\n+    return string.length() == 0;\n+  }\n+\n+  @AfterTemplate\n+  @AlsoNegation\n+  boolean after(String string) {\n+    return string.isEmpty();\n+  }\n+}\n+```"
  }
]
