[
  {
    "sha": "7422d323eba50ce56dd7e29e99cf5b34ec7fa743",
    "filename": "src/main/java/rocks/zipcodewilmington/tictactoe/Board.java",
    "status": "modified",
    "additions": 72,
    "deletions": 6,
    "changes": 78,
    "blob_url": "https://github.com/Zipcoder/Maven.TicTacToe/blob/a3232e908b438665dc8871b1e4a3308d313c00f1/src/main/java/rocks/zipcodewilmington/tictactoe/Board.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TicTacToe/raw/a3232e908b438665dc8871b1e4a3308d313c00f1/src/main/java/rocks/zipcodewilmington/tictactoe/Board.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TicTacToe/contents/src/main/java/rocks/zipcodewilmington/tictactoe/Board.java?ref=a3232e908b438665dc8871b1e4a3308d313c00f1",
    "patch": "@@ -3,24 +3,90 @@\n /**\n  * @author leon on 6/22/18.\n  */\n+\n+\n public class Board {\n+    Character[][] board;\n+\n     public Board(Character[][] matrix) {\n-    }\n+        board = matrix;\n+\n+        }\n+\n+\n \n     public Boolean isInFavorOfX() {\n-        return null;\n-    }\n+        if (board[0][0] == 'X' && board[0][1] == 'X' && board[0][2] == 'X') {\n \n+            return true;\n+        } else if\n+        (board[1][0] == 'X' && board[1][1] == 'X' && board[1][2] == 'X') {\n+            return true;\n+        } else if\n+        (board[2][0] == 'X' && board[2][1] == 'X' && board[2][2] == 'X') {\n+            return true;\n+        } else if\n+        (board[0][0] == 'X' && board[1][0] == 'X' && board[2][0] == 'X') {\n+            return true;\n+        } else if\n+        (board[0][1] == 'X' && board[1][1] == 'X' && board[2][1] == 'X') {\n+            return true;\n+        } else if\n+        (board[0][2] == 'X' && board[1][2] == 'X' && board[2][2] == 'X') {\n+            return true;\n+        } else if\n+        (board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X') {\n+            return true;\n+        } else if\n+        (board[2][0] == 'X' && board[1][1] == 'X' && board[0][2] == 'X') {\n+            return true;\n+        } else\n+            return false;\n+    }\n     public Boolean isInFavorOfO() {\n-        return null;\n+        if (board[0][0] == 'O' && board[0][1] == 'O' && board[0][2] == 'O') {\n+\n+            return true;\n+        } else if\n+        (board[1][0] == 'O' && board[1][1] == 'O' && board[1][2] == 'O') {\n+            return true;\n+        } else if\n+        (board[2][0] == 'O' && board[2][1] == 'O' && board[2][2] == 'O') {\n+            return true;\n+        } else if\n+        (board[0][0] == 'O' && board[1][0] == 'O' && board[2][0] == 'O') {\n+            return true;\n+        } else if\n+        (board[0][1] == 'O' && board[1][1] == 'O' && board[2][1] == 'O') {\n+            return true;\n+        } else if\n+        (board[0][2] == 'O' && board[1][2] == 'O' && board[2][2] == 'O') {\n+            return true;\n+        } else if\n+        (board[0][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O') {\n+            return true;\n+        } else if\n+        (board[2][0] == 'O' && board[1][1] == 'O' && board[0][2] == 'O') {\n+            return true;\n+        } else\n+            return false;\n     }\n \n     public Boolean isTie() {\n-        return null;\n+        if ( isInFavorOfX() == isInFavorOfO() ) {\n+            return true;\n+        } else\n+            return false;\n+\n     }\n \n     public String getWinner() {\n-        return null;\n+        if (this.isInFavorOfX()) {\n+            return \"X\";\n+        } else if (this.isInFavorOfO()) {\n+            return \"O\";\n+        }   else\n+            return \"\";\n     }\n \n }"
  }
]
