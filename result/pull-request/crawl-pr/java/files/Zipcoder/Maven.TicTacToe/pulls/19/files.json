[
  {
    "sha": "f5ae9e776266a6dfcfb6f7a118f2084c84ce49d6",
    "filename": "src/main/java/rocks/zipcodewilmington/tictactoe/Board.java",
    "status": "modified",
    "additions": 61,
    "deletions": 4,
    "changes": 65,
    "blob_url": "https://github.com/Zipcoder/Maven.TicTacToe/blob/b028b86f5242686697b998df702d17d25e629b25/src/main/java/rocks/zipcodewilmington/tictactoe/Board.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TicTacToe/raw/b028b86f5242686697b998df702d17d25e629b25/src/main/java/rocks/zipcodewilmington/tictactoe/Board.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TicTacToe/contents/src/main/java/rocks/zipcodewilmington/tictactoe/Board.java?ref=b028b86f5242686697b998df702d17d25e629b25",
    "patch": "@@ -3,24 +3,81 @@\n /**\n  * @author leon on 6/22/18.\n  */\n+\n+\n public class Board {\n+\n+    Character[][] playerChoice;\n     public Board(Character[][] matrix) {\n+        playerChoice = matrix;\n+\n     }\n \n     public Boolean isInFavorOfX() {\n-        return null;\n+        if (playerChoice[0][0]== 'X' && playerChoice[0][1] == 'X' && playerChoice[0][2] == 'X'){\n+            return true;\n+        } else if (playerChoice[1][0] == 'X' && playerChoice[1][1] == 'X' && playerChoice[1][2] == 'X') {\n+            return true;\n+        } else if (playerChoice[2][0] == 'X' && playerChoice[2][1] == 'X' && playerChoice[2][2] == 'X') {\n+            return true;\n+        } else if (playerChoice[0][0] == 'X' && playerChoice[1][0] == 'X' && playerChoice[2][0] == 'X') {\n+            return true;\n+        } else if (playerChoice[0][1] == 'X' && playerChoice[1][1] == 'X' && playerChoice[2][1] == 'X') {\n+            return true;\n+        } else if (playerChoice[0][2] == 'X' && playerChoice[1][2] == 'X' && playerChoice[2][2] == 'X') {\n+            return true;\n+        } else if (playerChoice[0][0] == 'X' && playerChoice[1][1] == 'X' && playerChoice[2][2] == 'X') {\n+            return true;\n+        } else if (playerChoice[0][2] == 'X' && playerChoice[1][1] == 'X' && playerChoice[2][0] == 'X'){\n+            return true;\n+        } else {\n+            return false;\n+        }\n+\n+\n+\n     }\n \n     public Boolean isInFavorOfO() {\n-        return null;\n+        if (playerChoice[0][0] == 'O' && playerChoice[0][1] == 'O' && playerChoice[0][2] == 'O') {\n+            return true;\n+        } else if (playerChoice[1][0] == 'O' && playerChoice[1][1] == 'O' && playerChoice[1][2] == 'O') {\n+            return true;\n+        } else if (playerChoice[2][0] == 'O' && playerChoice[2][1] == 'O' && playerChoice[2][2] == 'O') {\n+            return true;\n+        } else if (playerChoice[0][0] == 'O' && playerChoice[1][0] == 'O' && playerChoice[2][0] == 'O') {\n+            return true;\n+        } else if (playerChoice[0][1] == 'O' && playerChoice[1][1] == 'O' && playerChoice[2][1] == 'O') {\n+            return true;\n+        } else if (playerChoice[0][2] == 'O' && playerChoice[1][2] == 'O' && playerChoice[2][2] == 'O') {\n+            return true;\n+        } else if (playerChoice[0][0] == 'O' && playerChoice[1][1] == 'O' && playerChoice[2][2] == 'O') {\n+            return true;\n+        } else if (playerChoice[0][2] == 'O' && playerChoice[1][1] == 'O' && playerChoice[2][0] == 'O'){\n+            return true;\n+        } else {\n+            return false;\n+        }\n+\n+\n     }\n \n     public Boolean isTie() {\n-        return null;\n+        if (isInFavorOfO() == isInFavorOfX()) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n     }\n \n     public String getWinner() {\n-        return null;\n+        if (this.isInFavorOfO()) {\n+            return \"O\";\n+        } else if (this.isInFavorOfX()) {\n+            return \"X\";\n+        }else {\n+            return \"\";\n+        }\n     }\n \n }"
  }
]
