[
  {
    "sha": "84a24410a715f874c41addfae218b6842179ec5d",
    "filename": ".DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/.DS_Store?ref=789ed37f15a2f4a0927c620b61551caf6b33c399"
  },
  {
    "sha": "14d9a6ea5695821ee802f594fdbffd6721514fc4",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/.gitignore",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/.gitignore",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/.gitignore?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -9,6 +9,7 @@ local.properties\n .settings/\n .loadpath\n .recommenders\n+.DS_Store\n \n # External tool builders\n .externalToolBuilders/"
  },
  {
    "sha": "02c34dd945dbff9f699a47679c14437095373155",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/README.md",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/README.md",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/README.md?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -15,7 +15,7 @@\n     * `Player` objects should be created upon input from a user.\n   * `Game` interface\n     * Contract which ensures that a class enforces some aspect of _playing_.\n-  * `GamblingGame` interface\n+  * `io.zipcoder.casino.GamblingGame` interface\n     * Contract which ensures that a game enforces some aspect of _waging money_.\n   * `GamblingPlayer` interface\n     * Contract which ensures that a player has some ability to _wage money_."
  },
  {
    "sha": "413f2b63fef1bf6168a336cc14b88f27eef4722b",
    "filename": "src/Casino Structure.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/Casino%20Structure.png",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/Casino%20Structure.png",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/Casino%20Structure.png?ref=789ed37f15a2f4a0927c620b61551caf6b33c399"
  },
  {
    "sha": "cbe321f2468d095a7acacb19ecbae1bc92b0ef3d",
    "filename": "src/Casino Structure.puml",
    "status": "added",
    "additions": 199,
    "deletions": 0,
    "changes": 199,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/Casino%20Structure.puml",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/Casino%20Structure.puml",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/Casino%20Structure.puml?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,199 @@\n+@startuml\n+'https://plantuml.com/class-diagram\n+\n+Game <|-- GamblingGame\n+Game <|-- CardGame\n+GamblingPlayer <|-- Player\n+GamblingGame <|-- Blackjack\n+GamblingGame <|-- DiceGame\n+\n+DiceGame <|-- Beetle\n+DiceGame <|-- Craps\n+CardGame <|-- Blackjack\n+CardGame <|-- GoFish\n+\n+\n+Display <|-- BeetleDisplay\n+Display <|-- CrapsDisplay\n+Display <|-- BlackjackDisplay\n+Display <|-- GoFishDisplay\n+\n+\n+'INTERFACE\n+interface Game {\n+Random\n+Boolean gameState\n+checkForWinner()\n+setPlayer()\n+}\n+\n+interface GamblingGame {\n+acceptBetFrom()\n+calculateReward()\n+calculateLoss()\n+}\n+\n+interface GamblingPlayer {\n+placeBet()\n+}\n+\n+\n+'ABSTRACT CLASS\n+abstract class CardGame{\n+Stack decksOfCards\n+ArrayList playersHand\n+ArrayList dealersHand\n+shuffleCards()\n+dealCards(Int numberOfCards)\n+skipDeal()\n+\n+}\n+\n+abstract class DiceGame {\n+rollDice(numberOfDice)\n+}\n+\n+\n+'CLASS\n+class Main{\n+\n+}\n+\n+class CasinoEngine {\n+runCasino()\n+}\n+\n+class Player {\n+String name\n+Double accountBalance\n+getName()\n+getAccountBalance()\n+setAccountBalance()\n+}\n+\n+class GoFish {\n+HashMap <Player, Hand>\n+HashMap <Player, NumberOfPairs>\n+exchangeCard()\n+getNumberOfPairs()\n+setNumberOfPairs()\n+}\n+\n+class GoFishDisplay {\n+chooseAPlayerToAsk()\n+chooseACardtoAskFor()\n+playerHasCard()\n+goFish()\n+pairMade()\n+\n+}\n+\n+class Blackjack {\n+HashMap <String cardFaceValue, Int CardPointValue>\n+gotBlackJack(int betPlaced)\n+standOrHit()\n+}\n+\n+class BlackjackDisplay {\n+dealersFirstCard()\n+bustMessage(String whoBusted)\n+dealersTotal()\n+dealerStands()\n+dealerHits()\n+chooseStandOrHit()\n+}\n+\n+class Craps {\n+Boolean isNatural()\n+Boolean isCraps()\n+Boolean isPoint()\n+analyzeComeOutRoll()\n+analyzeFollowingRolls()\n+'comeBet()\n+'dontComeBet()\n+'passBet()\n+'dontPassBet()\n+'fieldBet()\n+'bigSixOrEightBet()\n+getTypeOfBet()\n+}\n+\n+class CrapsDisplay {\n+rulesMenu()\n+optionsMenu()\n+shooterScores()\n+shooterSevenedOut()\n+push()\n+oneRollBetLoss()\n+onRollBetWin()\n+natural()\n+craps()\n+shooterRolled()\n+setTypeOfBet()\n+comeOutRoll()\n+\n+}\n+\n+class Beetle {\n+createNextImage()\n+}\n+\n+class BeetleDisplay {\n+drawBugHead()\n+drawBugBody()\n+drawBugLeg1()\n+drawBugLeg2()\n+drawBugLeg3()\n+drawBugLeg4()\n+playerBugComplete()\n+opponentBugComplete()\n+repeatRoll()\n+bodyPartValue()\n+}\n+\n+class PlayerWarehouse {\n+playerGroup <password, Player>\n+getPlayer()\n+}\n+\n+class Console {\n+Scanner input\n+PrintStream output\n+print()\n+println()\n+getStringInput()\n+getDoubleInput()\n+getLongInput()\n+getIntegerInput()\n+}\n+\n+class Display {\n+String currentDisplay\n+\n+errorMessage()\n+\n+'casino messages\n+welcomeMessage()\n+gamesMenu()\n+lowFundsWarning()\n+zeroFundsWarning()\n+\n+'game messages\n+rollResult()\n+dealResult()\n+youWin()\n+youLose()\n+doYouWantToBet()\n+\n+'new user messages\n+userId()\n+requestUserId()\n+initialDeposit()\n+\n+'returning user messages\n+welcomeBack()\n+\n+}\n+\n+\n+@enduml\n\\ No newline at end of file"
  },
  {
    "sha": "7f5df16f50df014158fb83699a62f66d162aa8ee",
    "filename": "src/main/java/io/zipcoder/casino/Beetle.java",
    "status": "added",
    "additions": 250,
    "deletions": 0,
    "changes": 250,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Beetle.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Beetle.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Beetle.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,250 @@\n+package io.zipcoder.casino;\n+\n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.awt.geom.Arc2D;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.text.NumberFormat;\n+import java.util.*;\n+\n+public class Beetle extends DiceGame{\n+    Player player;\n+    Random random = new Random();\n+    Console console;\n+    private InputStream in;\n+    private PrintStream out;\n+    BeetleDisplay bd = new BeetleDisplay();\n+    NumberFormat nf = NumberFormat.getCurrencyInstance();\n+\n+    private String[][] completeBeetle = new String[][]{{\"\\\\\",\"0\",\"/\"},\n+        {\"⎛\",\"|\",\"⎞\"},\n+        {\"⎝\",\"|\",\"⎠\"},\n+        {\"/\",\"⏝\",\"\\\\\"}\n+    };\n+    private String[][] usersBeetle = new String[][]{{\" \",\" \",\" \"},\n+            {\" \",\" \",\" \"},\n+            {\" \",\" \",\" \"},\n+            {\" \",\" \",\" \"}\n+    };\n+    private String[][] opponentsBeetle = new String[][]{{\" \",\" \",\" \"},\n+        {\" \",\" \",\" \"},\n+        {\" \",\" \",\" \"},\n+        {\" \",\" \",\" \"}\n+    };\n+\n+    private Set<Integer> usersRolls = new HashSet<Integer>();\n+    private Set<Integer> opponentsRolls = new HashSet<Integer>();\n+    private Double purse = 0.00;\n+\n+    public Beetle(Player player) {\n+        this.player = player;\n+        this.in = System.in;\n+        this.out = System.out;\n+        this.console = new Console(in, out);\n+\n+    }\n+    \n+    //if opponent set is equal to or greater than user set opponent will bet.\n+    \n+    //facilitator\n+    public void gameEngine() {\n+        Boolean userHasNotWon = true;\n+        Boolean opponentHasNotWon = true;\n+        Boolean playersHaveNotTied = true;\n+\n+        welcomeSequence();\n+\n+        acceptBetFromUser(1.00);\n+        openingBet();\n+        bd.currentPurse(purse);\n+        while (playersHaveNotTied && userHasNotWon && opponentHasNotWon) {\n+            Double betAmount = (console.getDoubleInput(\"how much would you like to bet?\"));\n+            acceptBetFromUser(betAmount);\n+            if (opponentsRolls.size() >= usersRolls.size())\n+            {\n+                Double opponentBetAmount = opponentBet(betAmount);\n+                bd.opponentHasPlacedABet(opponentBetAmount);\n+            }\n+\n+            bd.borderWithSpace();\n+            bd.currentPurse(purse);\n+\n+            Integer userRollValue = diceRollSum(1);\n+            bd.usersRollResults(userRollValue);\n+            analyzeRoll(usersRolls, usersBeetle, userRollValue);\n+            bd.yourBeetle();\n+            drawPlayerBeetle(usersBeetle);\n+            bd.border();\n+\n+            Integer opponentsRollValue = diceRollSum(1);\n+            bd.opponentsRollResults(opponentsRollValue);\n+            analyzeRoll(opponentsRolls, opponentsBeetle, opponentsRollValue);\n+            bd.opponentsBeetle();\n+            drawPlayerBeetle(opponentsBeetle);\n+            bd.borderWithSpace();\n+\n+            if (Arrays.deepEquals(completeBeetle, usersBeetle) && Arrays.deepEquals(completeBeetle, opponentsBeetle)) {\n+                playersHaveNotTied = false;\n+                bd.bothBeetlesComplete();\n+                player.setWallet(player.getCurrentBet());\n+                System.out.println(\"Your bets were returned to your wallet.\");\n+                break;\n+            } else if (Arrays.deepEquals(completeBeetle, usersBeetle)) {\n+                userHasNotWon = false;\n+                bd.userBugIsComplete();\n+                player.setWallet(purse);\n+                player.setCurrentBet(0.00);\n+                break;\n+            } else if (Arrays.deepEquals(completeBeetle, opponentsBeetle)) {\n+                opponentHasNotWon = false;\n+                bd.opponentsBugisComplete();\n+                player.setWallet(-player.getCurrentBet());\n+                player.setCurrentBet(0.00);\n+                break;\n+            }\n+        }\n+        bd.printAccountBalance(player.getWallet());\n+    }\n+\n+\n+\n+    public void welcomeSequence() {\n+        bd.welcome();\n+        drawPlayerBeetle(getCompleteBeetle());\n+        bd.rules();\n+    }\n+\n+    public void analyzeRoll(Set<Integer> rollSet, String[][] playersBeetle, Integer diceRoll){\n+        if(!rollSet.contains(diceRoll)) {\n+            drawBeetle(rollSet, playersBeetle,diceRoll);\n+            rollSet.add(diceRoll);\n+        }\n+        else {\n+                bd.repeatedRollResult();\n+            }\n+    }\n+\n+    public void drawBeetle(Set rollSet, String[][] playersBeetle, Integer diceRoll) {\n+\n+        switch (diceRoll) {\n+            case 1:\n+                bd.drewLeg();\n+                playersBeetle[0][0] = completeBeetle[0][0];\n+                break;\n+            case 2:\n+                bd.drewLeg();\n+                playersBeetle[0][2] = completeBeetle[0][2];\n+                break;\n+            case 3:\n+                bd.drewLeg();\n+                playersBeetle[3][0] = completeBeetle[3][0];\n+                break;\n+            case 4:\n+                bd.drewLeg();\n+                playersBeetle[3][2] = completeBeetle[3][2];\n+                break;\n+            case 5:\n+                bd.drewHead();\n+                playersBeetle[0][1] = completeBeetle[0][1];\n+                playersBeetle[1][1] = completeBeetle[1][1];\n+                playersBeetle[2][1] = completeBeetle[2][1];\n+                break;\n+            case 6:\n+                bd.drewBody();\n+                playersBeetle[1][0] = completeBeetle[1][0];\n+                playersBeetle[1][2] = completeBeetle[1][2];\n+                playersBeetle[2][0] = completeBeetle[2][0];\n+                playersBeetle[2][2] = completeBeetle[2][2];\n+                playersBeetle[3][1] = completeBeetle[3][1];\n+\n+                break;\n+            default:\n+                System.out.println(\"something went wrong\");\n+                break;\n+        }\n+    }\n+\n+    public String[][] drawPlayerBeetle(String[][] playersBeetle){\n+        for (int i = 0; i < playersBeetle.length; i++) {\n+            for (int j = 0; j < playersBeetle[i].length; j++) {\n+                System.out.print(playersBeetle[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+        return playersBeetle;\n+    }\n+\n+\n+    public Set<Integer> getUsersRolls() {\n+        return usersRolls;\n+    }\n+\n+    public Set<Integer> getOpponentsRolls() {\n+        return opponentsRolls;\n+    }\n+\n+    public String[][] getUsersBeetle(){\n+        return usersBeetle;\n+    }\n+\n+    public String[][] getOpponentsBeetle(){\n+        return opponentsBeetle;\n+    }\n+\n+    public String[][] getCompleteBeetle(){\n+        return completeBeetle;\n+    }\n+\n+    public void acceptBetFromUser(Double betAmount) {\n+        player.makeBet(betAmount);\n+        purse += betAmount;\n+    }\n+\n+    public Double openingBet() {\n+        purse += 1;\n+        return purse;\n+    }\n+\n+    public Double opponentBet(Double userBet) {\n+        Double multiplier = random.nextDouble()+0.5;\n+        Double betAmount = userBet * Math.round(multiplier*100)/100;\n+        return betAmount;\n+    }\n+\n+    public Double calculateReward() {\n+        double reward = purse - player.getCurrentBet();\n+\n+        return reward;\n+    }\n+\n+    public Double calculateLoss() {\n+        return player.getCurrentBet();\n+    }\n+\n+    public Double getPurse() {\n+        return purse;\n+    }\n+\n+\n+\n+\n+\n+\n+    public String endGame() {\n+        return null;\n+    }\n+\n+    public String startGame() {\n+        return null;\n+    }\n+\n+    public Double acceptBetFrom(Double betAmount) {\n+        return null;\n+    }\n+\n+    public Double acceptBetFrom() {\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "75ad49e1bfba9819d3db6b89fe793a016c5ec195",
    "filename": "src/main/java/io/zipcoder/casino/BeetleDisplay.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/BeetleDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/BeetleDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/BeetleDisplay.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,126 @@\n+package io.zipcoder.casino;\n+\n+public class BeetleDisplay extends Display {\n+\n+    String[][] beetle = new String[][]{{\"\\\\\",\"0\",\"/\"},\n+            {\"⎛\",\"|\",\"⎞\"},\n+            {\"⎝\",\"|\",\"⎠\"},\n+            {\"/\",\"⏝\",\"\\\\\"}\n+    };\n+\n+    public BeetleDisplay() {\n+    }\n+\n+    public String welcome() {\n+        String message =\"WELCOME TO BEETLE!\\n(1 dollar per player table minimum)\\n\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+    public void rules() {\n+        setPrintCurrentDisplay(\"\\nDraw the beetle before your opponent and win big!\\nThe rules are simple:\\nEach side of the die corresponds to a part of the beetle.\" +\n+                \"\\nIf you roll a number, you get to draw that part.\\nIf you roll the same number again, you do not get to add to your beetle.\" +\n+                \"\\nBetween each roll you will add to your wager.\\nThe first person to draw a beetle keeps the purse.\" +\n+                \"\\nIf both players complete their beetle on the same set of rolls the wagers are returned.\" +\n+                \"\\n\\nWhat to draw for each roll:\" +\n+                \"\\n1 - head\\n2 - body\\n3 - left front leg\\n4 - right front leg\\n5 - left back leg\\n6 - right back leg\\n\\n\");\n+    }\n+\n+    public String drewLeg() {\n+        String message = \"A leg was added to the beetle!\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String drewBody() {\n+        String message =\"The beetle's body was drawn!\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String drewHead() {\n+        String message =\"This beetle has a head now!\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String userBugIsComplete() {\n+        String message =\"Your beetle is complete!\\nYOU WIN!!!!\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String opponentsBugisComplete() {\n+        String message =\"Your opponents beetle is complete.\\nYou lose.\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String bothBeetlesComplete() {\n+        String message =\"You both drew beetles. The game is a tie.\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public void usersRollResults(Integer usersRoll) {\n+        setPrintCurrentDisplay(\"You rolled a \" + usersRoll);\n+    }\n+\n+    public void opponentsRollResults(Integer opponentsRoll) {\n+        setPrintCurrentDisplay(\"Your opponent rolled a \" + opponentsRoll);\n+    }\n+\n+    public String repeatedRollResult() {\n+        String message =\"You already rolled that number.\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    //Beetle Body Parts\n+    public void getBeetleComplete() {\n+        for (int i = 0; i < beetle.length; i++) {\n+            for (int j = 0; j < beetle[i].length; j++) {\n+                System.out.print(beetle[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+    }\n+    public String border() {\n+        String message =\"======================\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String borderWithSpace() {\n+        String message =\"\\n======================\\n\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+\n+    public String openingBetMessage() {\n+        String message =\"This game has a table minimum of $1\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public void opponentHasPlacedABet(Double betAmount) {\n+        setPrintCurrentDisplay(\"Your opponent has placed a bet of $\" + betAmount);\n+    }\n+\n+    public void currentPurse(Double purse) {\n+        setPrintCurrentDisplay(\"The purse is currently at $\" + purse);\n+    }\n+\n+    public String yourBeetle() {\n+        String message =\"YOUR BEETLE\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+    public String opponentsBeetle() {\n+        String message =\"OPPONENTS BEETLE\";\n+        setPrintCurrentDisplay(message);\n+        return message;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5c92b7ceb1f7d941cd7d3fdfc6f7322ac6bed594",
    "filename": "src/main/java/io/zipcoder/casino/BlackJackDisplay.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/BlackJackDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/BlackJackDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/BlackJackDisplay.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,100 @@\n+package io.zipcoder.casino;\n+\n+public class BlackJackDisplay extends Display {\n+\n+    public void rules() {\n+        setPrintCurrentDisplay(\"Your goal is to draw cards that total 21, or come closer to 21 than the dealer without going over\"+\n+\n+                \"\\nMake a bet from $1 to all-in, receive your cards\" +\n+\n+                \"\\nThe dealer will give you two blackjack cards and show one of his cards, decide if you want to double your bet\" +\n+\n+                \"\\nYou can double your bet any time before you hit OR stand and split your bet if you get two cards of the same value.\" +\n+\n+                \"\\nConsider if you want to ‘hit’\" +\n+\n+                \"\\nYou have an option to add more blackjack cards by choosing 'hit', but you lose automatically if your value of cards exceeds 21.\" +\n+\n+                \"\\nChoose 'stand' when you are ready to play your hand. learn the dealer’s hand\" +\n+\n+                \"\\nThe dealer will reveal his hidden blackjack card and must always hit if they have 16 or lower. They will stop hitting if they have 17 or more.\" +\n+\n+                \"\\nYou win when the combined value of your cards is greater than that of the dealer.\"+\n+\n+                \"\\nYou lose if you have a lower score than the dealer, or if the total of your cards exceeds 21.\");\n+\n+                //TIPS\n+                /*\"\\nThe dealer and each player start with two cards. The dealer’s first card faces up, the second faces down.\"+\n+\n+                \"\\nFace cards each count as 10, Aces count as 1 or 11, all others count at face value.\"+\n+\n+                \"\\nAn Ace with any 10, Jack, Queen, or King is a “Blackjack.”:\");*/\n+    }\n+\n+    public void dealtHand(){\n+\n+        setPrintCurrentDisplay(\"You were dealt \");\n+    }\n+\n+    public void hitOrStand(){\n+\n+        setCurrentDisplay(\"Do you want to hit or stand?\");\n+    }\n+\n+    public void dealerHit() {\n+\n+        setPrintCurrentDisplay(\"Your hand total is \");\n+    }\n+\n+    public void playerHit(){\n+\n+        setPrintCurrentDisplay(\"You hit 21!\");\n+\n+    }\n+\n+    public void dealerStand() {\n+\n+        setPrintCurrentDisplay(\"Do you want to hit or stand?\");\n+\n+    }\n+\n+    public void bust(){\n+\n+        setPrintCurrentDisplay(\"You passed 21! Bust...\");\n+    }\n+\n+    public void dealerBust(){\n+\n+        setPrintCurrentDisplay(\"The dealer busted.\");\n+    }\n+\n+    public void wonGame(){\n+\n+        setPrintCurrentDisplay(\"You win\");\n+\n+    }\n+\n+    public void lostGame(){\n+\n+        setPrintCurrentDisplay(\"You lost\");\n+    }\n+\n+    public void blackJack(){\n+\n+        setPrintCurrentDisplay(\"You got Black Jack!\");\n+\n+    }\n+\n+    public void splitPairs() {\n+\n+        setPrintCurrentDisplay(\"Would you like to split pairs?\");\n+\n+    }\n+\n+    public void doubleDown() {\n+\n+        setPrintCurrentDisplay(\"\");\n+\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1a5802695734dfc476801830df2f22b2a0f99d53",
    "filename": "src/main/java/io/zipcoder/casino/CardGame.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/CardGame.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/CardGame.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/CardGame.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,104 @@\n+package io.zipcoder.casino;\n+\n+import java.util.*;\n+\n+public abstract class CardGame implements GamblingGame {\n+\n+    ArrayList<String> deck;\n+    String[] ranks;\n+    String[] suits;\n+\n+    ArrayList<String> playersHand;\n+    ArrayList<String> dealersHand;\n+\n+    public CardGame() {\n+\n+        this.deck = new ArrayList<String>(52);\n+        // Set zeroth element to null to indicate an unused element (only valid ranks from 1-13)\n+        this.ranks = new String[]{null, \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\"};\n+        this.suits = new String[]{\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"};\n+\n+        this.playersHand = new ArrayList<String>();\n+        this.dealersHand = new ArrayList<String>();\n+    }\n+\n+    // GETTERS\n+    public ArrayList<String> getDeck() {\n+        return this.deck;\n+    }\n+\n+    public ArrayList<String> getPlayersHand() {\n+        return this.playersHand;\n+    }\n+\n+    public ArrayList<String> getDealersHand() {\n+        return this.dealersHand;\n+    }\n+\n+    // SETTERS\n+    public void setPlayersHand(ArrayList<String> playersHand) {\n+        this.playersHand = playersHand;\n+    }\n+\n+    public void setDealersHand(ArrayList<String> dealersHand) {\n+        this.dealersHand = dealersHand;\n+    }\n+\n+    // CARD GAME METHODS\n+    public void createNewDeck() {\n+        for (int suit = 0; suit <=3; suit++) {\n+            for (int rank = 1; rank <= 13; rank++) {\n+                this.deck.add(this.ranks[rank] + \" of \" + this.suits[suit]);\n+            }\n+        }\n+    }\n+\n+    public void shuffleCards() {\n+        ArrayList<String> temp = new ArrayList<String>(52);\n+        while(!this.deck.isEmpty()) {\n+            int randCard = (int) (Math.random() * deck.size());\n+            temp.add(this.deck.get(randCard));\n+            this.deck.remove(randCard);\n+        }\n+        this.deck = temp;\n+    }\n+\n+    public void dealCards(int numberOfCards) {\n+        int i = 0;\n+        while (i < numberOfCards * 2) {\n+            if (i < numberOfCards) {\n+                this.playersHand.add(this.deck.get(i));\n+            } else if (i >= numberOfCards) {\n+                this.dealersHand.add(this.deck.get(i));\n+            }\n+            this.deck.remove(i);\n+            i++;\n+        }\n+    }\n+\n+    public String getRankOnCard(String cardRankAndSuit) {\n+        return cardRankAndSuit.substring(0, cardRankAndSuit.indexOf(\" \"));\n+    }\n+\n+    public int getValueOfCard(String rankOnCard) {\n+        int valueOfCard = 0;\n+        if (rankOnCard.equals(\"Ace\") || rankOnCard.equals(\"Jack\") || rankOnCard.equals(\"King\") || rankOnCard.equals(\"Queen\")) {\n+            valueOfCard = 10;\n+        } else {\n+            valueOfCard = Integer.parseInt(rankOnCard);\n+        }\n+\n+        return valueOfCard;\n+    }\n+\n+    public String displayPlayersHand(ArrayList<String> playersHand) {\n+        Collections.sort(playersHand);\n+        String playersHandOutput = \"\";\n+        Iterator itr = playersHand.iterator();\n+        while(itr.hasNext()) {\n+            playersHandOutput += itr.next() + \"\\n\";\n+        }\n+        return playersHandOutput;\n+    }\n+    \n+}"
  },
  {
    "sha": "400e304b0f83696bb2922ed06901286ddd4d0112",
    "filename": "src/main/java/io/zipcoder/casino/Casino.java",
    "status": "modified",
    "additions": 126,
    "deletions": 2,
    "changes": 128,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Casino.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Casino.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Casino.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -1,8 +1,132 @@\n package io.zipcoder.casino;\n \n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.Random;\n+import java.util.Scanner;\n \n public class Casino {\n-    public static void main(String[] args) {\n-        // write your tests before you start\n+\n+    private Console c;\n+    private Scanner s;\n+    private Display d;\n+    private InputStream in;\n+    private PrintStream out;\n+    private PlayerWarehouse pwh;\n+    private Random rand;\n+    private Boolean atLogin;\n+    private Player currentPlayer;\n+\n+    public Casino() {\n+        this.in = System.in;\n+        this.out = System.out;\n+        this.c = new Console(in, out);\n+        this.d = new Display();\n+        this.pwh = new PlayerWarehouse();\n+        this.rand = new Random();\n+        this.atLogin = true;\n+        this.currentPlayer = new Player(\"TIMBERDOODLE72\", 2.0);\n+    }\n+\n+    public void run() {\n+        d.printWelcomeMessage();\n+        while (atLogin) {\n+\n+            d.setPrintCurrentDisplay(\"Welcome! Are you a new or returning user?\");\n+            Integer input1 = c.getIntegerInput(\"Press 1 for new, 2 for returning.\");\n+\n+            if (input1 == 1) {\n+\n+                String newName = c.getStringInput(\"What's your name?\");\n+                String newPass = c.getStringInput(\"Make a password.\");\n+                Double newDeposit = c.getDoubleInput(\"Make an initial deposit.\");\n+                String newId;\n+\n+                while(true) {\n+                    newId = \"\" + rand.nextInt(9999);\n+                    if(pwh.validateUniquePlayer(newId)){\n+                        break;\n+                    }\n+                }\n+\n+                d.setPrintCurrentDisplay(\"Your user ID is \" + newId + \". Remember it!\\n\");\n+                pwh.addNewPlayer(newId, new Player(newName, newDeposit), newPass);\n+                d.setPrintCurrentDisplay(\"And you're all set!\\n\");\n+\n+            } else if (input1 == 2) {\n+\n+                while(true) {\n+                    String oldId;\n+                    oldId = c.getStringInput(\"What's your user ID?\");\n+                    String oldPass;\n+                    oldPass = c.getStringInput(\"What's your password?\");\n+                    if(pwh.validateLoginCredentials(oldId, oldPass)){\n+                        currentPlayer = pwh.getPlayer(oldId);\n+                        break;\n+                    }else{\n+                        d.setPrintCurrentDisplay(\"Improper login credentials.\\n\");\n+                        break;\n+                    }\n+                }\n+\n+            } else {\n+                d.printErrorMessage();\n+            }\n+\n+            if(currentPlayer.getName() != \"TIMBERDOODLE72\"){\n+                break;\n+            }\n+        }\n+        gamesMenu();\n+    }\n+\n+    public void gamesMenu() {\n+     d.printGamesMenu();\n+     Integer gamesListedMenu = c.getIntegerInput(\" \");\n+     switch (gamesListedMenu) {\n+         case 1:\n+             System.out.println(\"Feature Under Construction\");\n+             break;\n+\n+         case 2:\n+             Craps craps = new Craps(currentPlayer);\n+             craps.crapsEngine();\n+             break;\n+\n+         case 3:\n+             Beetle beetle = new Beetle(currentPlayer);\n+             beetle.gameEngine();\n+             break;\n+\n+         case 4:\n+             GoFishEngine gofish = new GoFishEngine();\n+             gofish.playGame();\n+             break;\n+\n+         case 5:\n+             d.printAccountBalance(currentPlayer.getWallet());\n+             break;\n+         case 6:\n+             d.printDepositMessage();\n+             Double deposit = c.getDoubleInput(\"\");\n+             currentPlayer.makeDeposit(deposit);\n+             break;\n+         case 7:\n+             System.exit(0);\n+         default:\n+             System.out.println(\"Please enter a valid input.\");\n+             break;\n+        }\n+    if(currentPlayer.getWallet() == 0.00) {\n+        d.printZeroFundsWarning();\n+    }\n+    else if (currentPlayer.getWallet() <= 50.00) {\n+        d.printLowFundsWarning(currentPlayer.getWallet());\n+    } else {\n+        System.out.println(\"Having fun? KEEP PLAYING!!\");\n+    }\n+    gamesMenu();\n     }\n }"
  },
  {
    "sha": "39d42a8fe88d2baac3b7d4ae610a5f03cd2d9415",
    "filename": "src/main/java/io/zipcoder/casino/Craps.java",
    "status": "added",
    "additions": 596,
    "deletions": 0,
    "changes": 596,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Craps.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Craps.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Craps.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,596 @@\n+package io.zipcoder.casino;\n+\n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.Scanner;\n+\n+public class Craps extends DiceGame{\n+\n+    private Console c;\n+    private Scanner s;\n+    private Display d;\n+    private InputStream in;\n+    private PrintStream out;\n+    private Player player;\n+    private CrapsDisplay cd;\n+\n+    private Integer input;\n+    private Integer innerInput;\n+    private Integer furtherInput;\n+    private Integer yetFurtherInput;\n+\n+    private Boolean[] outcomes;\n+    private Boolean[] bets;\n+    private Double[] betAmounts;\n+    private Double lastBet;\n+    private Integer point;\n+\n+    public Craps(Player player){\n+        this.in = System.in;\n+        this.out = System.out;\n+        this.c = new Console(in, out);\n+        this.d = new Display();\n+        this.player = player;\n+        this.cd = new CrapsDisplay();\n+\n+        this.input = 0;\n+        this.innerInput = 0;\n+        this.furtherInput = 0;\n+\n+        this.outcomes = new Boolean[21];\n+        this.bets = new Boolean[21];\n+        this.betAmounts = new Double[21];\n+        this.lastBet = 0.0;\n+\n+        for(int i = 0; i < 21; i++){\n+            outcomes[i] = false;\n+        }\n+\n+        for(int i = 0; i < 21; i++){\n+            bets[i] = false;\n+        }\n+\n+        for(int i = 0; i < 21; i++){\n+            betAmounts[i] = 0.0;\n+        }\n+    }\n+\n+    /* *** Here is the index of every ***\n+       *** bet in the boolean arrays. ***\n+    0- pass\n+    1- don't pass\n+    2- come\n+    3- don't come\n+    4- field\n+    5- place bet 4\n+    6- place bet 5\n+    7- place bet 6\n+    8- place bet 8\n+    9- place bet 9\n+    10- place bet 10\n+    11- one-roll 7\n+    12- one-roll craps\n+    13- one-roll 6\n+    14- one-roll 8\n+    15- one-roll 4\n+    16- one-roll 10\n+    17- one-roll 3\n+    18- one-roll 11\n+    19- one-roll 2\n+    20- one-roll 12 */\n+\n+    public void crapsEngine(){\n+\n+        this.initialRulesPrompt();\n+\n+        Boolean noPointSet = true;\n+        Boolean firstRoll = true;\n+        Boolean decisionUnmade = true;\n+        Boolean notSevenedOut = true;\n+\n+        while(noPointSet){\n+            while(decisionUnmade) {\n+                cd.printSetTypeOfBet();\n+                input = c.getIntegerInput(\"Type 0 for no bet, 2 for 'pass,' 3 for 'don't pass,' or 4 for a proposition.\");\n+                switch(input){\n+                    case 1:\n+                        cd.printRulesMenu1();\n+                        cd.printRulesMenuMid();\n+                        innerInput = c.getIntegerInput(\"Type 1 for yes, 2 for no.\");\n+                        switch(innerInput){\n+                            case 1:\n+                                cd.printRulesMenu2();\n+                                break;\n+                            case 2:\n+                                break;\n+                            default:\n+                                cd.printErrorMessage();\n+                                continue;\n+                        }\n+                        break;\n+                    case 2:\n+                        chooseBetAmountAndMakeBet(0);\n+                        break;\n+                    case 3:\n+                        chooseBetAmountAndMakeBet(1);\n+                        break;\n+                    case 0:\n+                        decisionUnmade = false;\n+                        break;\n+                    case 4:\n+                        furtherInput = c.getIntegerInput(\"You can make a one roll bet. Type 2, 3, 4, 6, 7, 8, 10, 11, or 12 to bet on that number, 1 for craps, or 0 to cancel.\");\n+                        switch(furtherInput){\n+                            case 1:\n+                                chooseBetAmountAndMakeBet(12);\n+                                break;\n+                            case 2:\n+                                chooseBetAmountAndMakeBet(19);\n+                                break;\n+                            case 3:\n+                                chooseBetAmountAndMakeBet(17);\n+                                break;\n+                            case 4:\n+                                chooseBetAmountAndMakeBet(15);\n+                                break;\n+                            case 6:\n+                                chooseBetAmountAndMakeBet(13);\n+                                break;\n+                            case 7:\n+                                chooseBetAmountAndMakeBet(11);\n+                                break;\n+                            case 8:\n+                                chooseBetAmountAndMakeBet(14);\n+                                break;\n+                            case 10:\n+                                chooseBetAmountAndMakeBet(16);\n+                                break;\n+                            case 11:\n+                                chooseBetAmountAndMakeBet(18);\n+                                break;\n+                            case 12:\n+                                chooseBetAmountAndMakeBet(20);\n+                                break;\n+                            default:\n+                                cd.printErrorMessage();\n+                                continue;\n+                        }\n+                        break;\n+                    default:\n+                        cd.printErrorMessage();\n+                        continue;\n+                }\n+                if(decisionUnmade) {\n+                    cd.youCanBetAgain();\n+                }\n+            }\n+\n+            decisionUnmade = true;\n+            if(firstRoll){\n+                cd.printComeOutRoll();\n+                firstRoll = false;\n+            }\n+            Integer x = diceRollSum(2);\n+            cd.printShooterRolled(x);\n+            checkBetsPrePoint(x);\n+            oneRollReset();\n+            if(x == 4 || x == 5 || x == 6 || x == 8 || x == 9 || x == 10){\n+                point = x;\n+                noPointSet = false;\n+                cd.printThatPoint();\n+            } else {\n+                cd.printNoPoint();\n+            }\n+        }\n+\n+\n+\n+        while(notSevenedOut){\n+            while(decisionUnmade){\n+                cd.printSetTypeOfBet();\n+                input = c.getIntegerInput(\"Type 0 for no bet, 2 for 'come,' 3 for 'don't come,' or 4 for a proposition.\");\n+                switch(input) {\n+                    case 1:\n+                        cd.printRulesMenu1();\n+                        cd.printRulesMenuMid();\n+                        innerInput = c.getIntegerInput(\"Type 1 for yes, 2 for no.\");\n+                        switch (innerInput) {\n+                            case 1:\n+                                cd.printRulesMenu2();\n+                                break;\n+                            case 2:\n+                                break;\n+                            default:\n+                                cd.printErrorMessage();\n+                                continue;\n+                        }\n+                    case 2:\n+                        chooseBetAmountAndMakeBet(2);\n+                        break;\n+                    case 3:\n+                        chooseBetAmountAndMakeBet(3);\n+                        break;\n+                    case 0:\n+                        decisionUnmade = false;\n+                        break;\n+                    case 4:\n+                        furtherInput = c.getIntegerInput(\"Type 1 to bet the field, 2 for a place bet, or 3 for a one-roll bet.\");\n+                        switch(furtherInput){\n+                            case 1:\n+                                chooseBetAmountAndMakeBet(4);\n+                                break;\n+                            case 2:\n+                                yetFurtherInput = c.getIntegerInput(\"Type the number you want to make your place bet on (4, 5, 6, 8, 9, or 10, but not the point.\");\n+                                if(yetFurtherInput == point){\n+                                    cd.printErrorMessage();\n+                                    continue;\n+                                }\n+                                switch(yetFurtherInput){\n+                                    case 4:\n+                                        chooseBetAmountAndMakeBet(5);\n+                                        break;\n+                                    case 5:\n+                                        chooseBetAmountAndMakeBet(6);\n+                                        break;\n+                                    case 6:\n+                                        chooseBetAmountAndMakeBet(7);\n+                                        break;\n+                                    case 8:\n+                                        chooseBetAmountAndMakeBet(8);\n+                                        break;\n+                                    case 9:\n+                                        chooseBetAmountAndMakeBet(9);\n+                                        break;\n+                                    case 10:\n+                                        chooseBetAmountAndMakeBet(10);\n+                                        break;\n+                                    default:\n+                                        cd.printErrorMessage();\n+                                        continue;\n+                                }\n+                            case 3:\n+                                yetFurtherInput = c.getIntegerInput(\"You can make a one roll bet. Type 2, 3, 4, 6, 7, 8, 10, 11, or 12 to bet on that number, 1 for craps, or 0 to cancel.\");\n+                                switch(yetFurtherInput) {\n+                                    case 1:\n+                                        chooseBetAmountAndMakeBet(12);\n+                                        break;\n+                                    case 2:\n+                                        chooseBetAmountAndMakeBet(19);\n+                                        break;\n+                                    case 3:\n+                                        chooseBetAmountAndMakeBet(17);\n+                                        break;\n+                                    case 4:\n+                                        chooseBetAmountAndMakeBet(15);\n+                                        break;\n+                                    case 6:\n+                                        chooseBetAmountAndMakeBet(13);\n+                                        break;\n+                                    case 7:\n+                                        chooseBetAmountAndMakeBet(11);\n+                                        break;\n+                                    case 8:\n+                                        chooseBetAmountAndMakeBet(14);\n+                                        break;\n+                                    case 10:\n+                                        chooseBetAmountAndMakeBet(16);\n+                                        break;\n+                                    case 11:\n+                                        chooseBetAmountAndMakeBet(18);\n+                                        break;\n+                                    case 12:\n+                                        chooseBetAmountAndMakeBet(20);\n+                                        break;\n+                                    case 0:\n+                                        continue;\n+                                    default:\n+                                        cd.printErrorMessage();\n+                                        continue;\n+                                }\n+                        }\n+                        break;\n+                    default:\n+                        cd.printErrorMessage();\n+                        continue;\n+                }\n+            }\n+            decisionUnmade = true;\n+            Integer x = diceRollSum(2);\n+            cd.printShooterRolled(x);\n+            checkBetsPostPoint(x, point);\n+            oneRollReset();\n+            if(x == 7){\n+                notSevenedOut = false;\n+                d.setPrintCurrentDisplay(endGame());\n+            }\n+\n+        }\n+\n+\n+    }\n+\n+    public void initialRulesPrompt(){\n+        cd.initalRulesAsk();\n+        Boolean haventAnswered = true;\n+        while(haventAnswered){\n+            input = c.getIntegerInput(\"Type 1 for yes, 2 for no.\");\n+            switch(input) {\n+                case 1:\n+                    cd.printRulesMenu1();\n+                    cd.printRulesMenu2();\n+                    d.setPrintCurrentDisplay(startGame());\n+                    haventAnswered = false;\n+                    break;\n+                case 2:\n+                    d.setPrintCurrentDisplay(startGame());\n+                    haventAnswered = false;\n+                    break;\n+                default:\n+                    d.setPrintCurrentDisplay(\"Invalid user input. Please reread instructions.\");\n+            }\n+        }\n+    }\n+\n+    public void chooseBetAmountAndMakeBet(Integer x){\n+        Double middleMan;\n+        middleMan = c.getDoubleInput(\"How much money are you going to bet?\");\n+        lastBet = player.makeBet(middleMan);\n+        betAmounts[x] = lastBet;\n+        bets[x] = true;\n+    }\n+\n+    public void oneRollReset(){\n+        bets[4] = false;\n+        betAmounts[4] = 0.0;\n+        for(int i = 11; i < 21; i++){\n+            bets[i] = false;\n+            betAmounts[i] = 0.0;\n+        }\n+    }\n+\n+    public void checkBetsPrePoint(Integer x){\n+        if(x == 2 && bets[19]){\n+            player.makeBet(betAmounts[19] * 60);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[19] * 60);\n+        }\n+        if(x == 2 && bets[12]){\n+            player.makeBet(betAmounts[12] * 14);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[12] * 14);\n+        }\n+        if(x == 2 && bets[1]){ //pass\n+            player.makeBet(betAmounts[1] * 2);\n+            cd.printCraps();\n+            cd.printWinnings(betAmounts[1] * 2);\n+        }\n+        if(x == 3 && bets[17]){\n+            player.makeBet(betAmounts[17] * 30);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[17] * 30);\n+        }\n+        if(x == 3 && bets[12]){\n+            player.makeBet(betAmounts[12] * 14);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[12] * 14);\n+        }\n+        if(x == 3 && bets[1]){ //pass\n+            player.makeBet(betAmounts[1] * 2);\n+            cd.printCraps();\n+            cd.printWinnings(betAmounts[1] * 2);\n+        }\n+        if(x == 4 && bets[15]){\n+            player.makeBet(betAmounts[15] * 14);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[15] * 14);\n+        }\n+        if(x == 6 && bets[13]){\n+            player.makeBet(betAmounts[13] * 18);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[13] * 18);\n+        }\n+        if(x == 7 && bets[11]){\n+            player.makeBet(betAmounts[11] * 8);\n+            cd.printNatural();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[11] * 8);\n+        }\n+        if(x == 7 && bets[0]){ //pass\n+            player.makeBet(betAmounts[0] * 2);\n+            cd.printNatural();\n+            cd.printWinnings(betAmounts[0] * 2);\n+        }\n+        if(x == 8 && bets[14]){\n+            player.makeBet(betAmounts[14] * 18);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[14] * 18);\n+        }\n+        if(x == 10 && bets[16]){\n+            player.makeBet(betAmounts[16] * 14);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[16] * 14);\n+        }\n+        if(x == 11 && bets[18]){\n+            player.makeBet(betAmounts[18] * 30);\n+            cd.printOneRollBetWin();\n+            cd.printNatural();\n+            cd.printWinnings(betAmounts[18] * 30);\n+        }\n+        if(x == 11 && bets[0]){ //pass\n+            player.makeBet(betAmounts[0] * 2);\n+            cd.printNatural();\n+            cd.printWinnings(betAmounts[0] * 2);\n+        }\n+        if(x == 12 && bets[20]){\n+            player.makeBet(betAmounts[20] * 60);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[20] * 60);\n+        }\n+        if(x == 12 && bets[12]){\n+            player.makeBet(betAmounts[12] * 14);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[12] * 14);\n+        }\n+        if(x == 12 && bets[1]){ //pass\n+            player.makeBet(betAmounts[1]);\n+            cd.printCraps();\n+            cd.printPush();\n+        }\n+    }\n+\n+    public void checkBetsPostPoint(Integer x, Integer point){\n+        if(x == 2 && bets[19]){\n+            player.makeBet(betAmounts[19] * 60);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[19] * 60);\n+        }\n+        if(x == 2 && bets[12]){\n+            player.makeBet(betAmounts[12] * 14);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[12] * 14);\n+        }\n+        if(x == 3 && bets[17]){\n+            player.makeBet(betAmounts[17] * 30);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[17] * 30);\n+        }\n+        if(x == 3 && bets[12]){\n+            player.makeBet(betAmounts[12] * 14);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[12] * 14);\n+        }\n+        if(x == 4 && bets[15]){\n+            player.makeBet(betAmounts[15] * 14);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[15] * 14);\n+        }\n+        if(x == 6 && bets[13]){\n+            player.makeBet(betAmounts[13] * 18);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[13] * 18);\n+        }\n+        if(x == 7 && bets[11]){\n+            player.makeBet(betAmounts[11] * 8);\n+            cd.printNatural();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[11] * 8);\n+        }\n+        if(x == 8 && bets[14]){\n+            player.makeBet(betAmounts[14] * 18);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[14] * 18);\n+        }\n+        if(x == 10 && bets[16]){\n+            player.makeBet(betAmounts[16] * 14);\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[16] * 14);\n+        }\n+        if(x == 11 && bets[18]){\n+            player.makeBet(betAmounts[18] * 30);\n+            cd.printOneRollBetWin();\n+            cd.printNatural();\n+            cd.printWinnings(betAmounts[18] * 30);\n+        }\n+        if(x == 12 && bets[20]){\n+            player.makeBet(betAmounts[20] * 60);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[20] * 60);\n+        }\n+        if(x == 12 && bets[12]){\n+            player.makeBet(betAmounts[12] * 14);\n+            cd.printCraps();\n+            cd.printOneRollBetWin();\n+            cd.printWinnings(betAmounts[12] * 14);\n+        }\n+        if(x == point){\n+            bets[3] = false;\n+            betAmounts[3] = 0.0;\n+        }\n+        if(x == 7){\n+            bets[2] = false;\n+            betAmounts [2] = 0.0;\n+        }\n+        if(x == point && bets[2]){\n+            player.makeBet(betAmounts[2]);\n+            cd.printShooterScores();\n+            cd.printWinnings(betAmounts[2]);\n+        }\n+        if(x == 7 && bets[3]){\n+            player.makeBet(betAmounts[3] * 2);\n+            cd.printShooterSevenedOut();\n+            cd.printWinnings(betAmounts[3] * 2);\n+        }\n+        if(x == 3 && bets[4] || x == 4 && bets[4] || x == 9 && bets[4] || x == 10 && bets[4] || x == 11 && bets[4]){\n+            player.makeBet(betAmounts[4] * 2);\n+            cd.printWinnings(betAmounts[4] * 2);\n+        }\n+        if(x == 2 && bets[4] || x == 12 && bets[4]){\n+            player.makeBet(betAmounts[4] * 4);\n+            cd.printWinnings(betAmounts[4] * 4);\n+        }\n+        if(x == 4 && bets[5]){\n+            player.makeBet(betAmounts[5] * 2);\n+            cd.printWinnings(betAmounts[5] * 2);\n+        }\n+        if(x == 5 && bets[6]){\n+            player.makeBet(betAmounts[6] * 2);\n+            cd.printWinnings(betAmounts[6] * 2);\n+        }\n+        if(x == 6 && bets[7]){\n+            player.makeBet(betAmounts[7] * 2);\n+            cd.printWinnings(betAmounts[7] * 2);\n+        }\n+        if(x == 8 && bets[8]){\n+            player.makeBet(betAmounts[8] * 2);\n+            cd.printWinnings(betAmounts[8] * 2);\n+        }\n+        if(x == 9 && bets[9]){\n+            player.makeBet(betAmounts[9] * 2);\n+            cd.printWinnings(betAmounts[9] * 2);\n+        }\n+        if(x == 10 && bets[10]){\n+            player.makeBet(betAmounts[10] * 2);\n+            cd.printWinnings(betAmounts[10] * 2);\n+        }\n+    }\n+\n+    public String startGame() {\n+        return \"Alright! Let's play Craps!\";\n+    }\n+\n+    public Double acceptBetFrom(Double betAmount) {\n+        return null;\n+    }\n+\n+    public Double calculateReward() {\n+        return null;\n+    }\n+\n+    public Double calculateLoss() {\n+        return null;\n+    }\n+\n+    public String endGame() {\n+        return \"That's the end of the round!\";\n+    }\n+\n+}\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "ea6c496a71792ffc2a26b47d39d9fa567d02fd56",
    "filename": "src/main/java/io/zipcoder/casino/CrapsDisplay.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/CrapsDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/CrapsDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/CrapsDisplay.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,88 @@\n+package io.zipcoder.casino;\n+\n+public class CrapsDisplay extends Display {\n+\n+    public void initalRulesAsk(){\n+        setPrintCurrentDisplay(\"Welcome! Would you like the rules first?\");\n+    }\n+\n+    public void printRulesMenu1(){\n+        setPrintCurrentDisplay(\"Welcome to Craps!\\nIn Craps, the 'shooter' rolls two dice repeatedly.\\nTheir first roll, the 'come out roll,' has three potential outcomes.\\nA 7 or 11 total is a pass. A 2, 3, or 12 is craps. Anything else is a point.\\nYou can bet 'pass' (the shooter rolls a pass) or 'don't pass' (the shooter rolls craps) for 1 to 1 payout.\\nThe shooter keeps rolling until a point is set. On a point outcome, the number rolled is saved.\\nNow, the shooter can 'come' by hitting the point outcome again, or 'seven out,' ending the round by rolling a 7.\\nYou can bet 'come' (shooter hits point before sevening out) or 'don't come' (vice versa) for 1 to 1 payout.\\n\");\n+    }\n+\n+    public void printRulesMenuMid(){\n+        setPrintCurrentDisplay(\"There are more technical rules. Do you want them?\");\n+    }\n+\n+    public void printRulesMenu2(){\n+        setPrintCurrentDisplay(\"There are a number of extra bets you can make, called propositions.\\nOne-roll propositions are a bet that the next roll will land on a specific number, with variable payouts.\\n6 or 8- 9 to 1 payout. 4 or 10- 7 to 1. 2 or 12- 30 to 1. 3 or 11- 15 to 1. Craps- 7 to 1. 7- 4 to 1.\\nThe field bet is the final one-roll bet. Rolling 3, 4, 9, 10, or 11 pays 1 to 1. Rolling 2 or 12 pays 2 to 1.\\nPlace bets can be performed once the point is known. You're betting that a specific different point option will be rolled- this has 1 to 1 payout.\\nThat's every bet in Craps! Have fun!\\n\");\n+    }\n+\n+    public void youCanBetAgain(){\n+        setPrintCurrentDisplay(\"You can make more bets!\");\n+    }\n+\n+    public void printWinnings(Double winnings){\n+        setPrintCurrentDisplay(\"You made $\" + winnings + \"!\");\n+    }\n+\n+    public void printLosings(Double bet){\n+        setPrintCurrentDisplay(\"There goes $\" + bet + \".\");\n+    }\n+\n+    public void printShooterScores(){\n+        setPrintCurrentDisplay(\"The shooter got the point!\");\n+    }\n+\n+    public void printShooterSevenedOut(){\n+        setPrintCurrentDisplay(\"The shooter sevened out... The round is over.\");\n+    }\n+\n+    public void printPush(){\n+        setPrintCurrentDisplay(\"Your bet is a push.\");\n+    }\n+\n+    public void printOneRollBetWin(){\n+        setPrintCurrentDisplay(\"You won your one-roll proposition!\");\n+    }\n+\n+    public void printNatural(){\n+        setPrintCurrentDisplay(\"It's a natural!\");\n+    }\n+\n+    public void printCraps(){\n+        setPrintCurrentDisplay(\"It's craps!\");\n+    }\n+\n+    public void printShooterRolled(Integer x){\n+        setPrintCurrentDisplay(\"The shooter rolled a \" + x);\n+    }\n+\n+    public void printThatPoint(){\n+        setPrintCurrentDisplay(\"That's the point!\");\n+    }\n+\n+    public void printNoPoint(){\n+        setPrintCurrentDisplay(\"No point yet!\");\n+    }\n+\n+    public void printSetTypeOfBet(){\n+        setPrintCurrentDisplay(\"What kind of bet do you want to make? You can also type 1 for help.\");\n+    }\n+\n+    public void printComeOutRoll(){\n+        setPrintCurrentDisplay(\"Here's the come out roll...\");\n+    }\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "29625b0c674c478f225b184e7563c58f91dc9434",
    "filename": "src/main/java/io/zipcoder/casino/DiceGame.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/DiceGame.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/DiceGame.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/DiceGame.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,20 @@\n+package io.zipcoder.casino;\n+\n+import java.util.Random;\n+\n+\n+abstract class DiceGame implements GamblingGame {\n+\n+\n+    public Integer diceRollSum(int i) {\n+        Random random = new Random();\n+        Integer thisToss = 0;\n+\n+        while (i >= 1) {\n+            int randomGen = (random.nextInt(6) + 1);\n+            thisToss += randomGen;\n+            i--;\n+        }\n+        return thisToss;\n+    }\n+}"
  },
  {
    "sha": "cde86eae9d25101a679a969ba8c5ee167512c481",
    "filename": "src/main/java/io/zipcoder/casino/Display.java",
    "status": "added",
    "additions": 201,
    "deletions": 0,
    "changes": 201,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Display.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Display.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Display.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,201 @@\n+package io.zipcoder.casino;\n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+\n+import java.util.Scanner;\n+\n+public class Display {\n+\n+    String currentDisplay;\n+\n+    private Scanner s;\n+    private InputStream in;\n+    private PrintStream out;\n+\n+    private Console c;\n+\n+    public Display(){\n+\n+        // INPUT/OUTPUT\n+        this.in = System.in;\n+        this.out = System.out;\n+        this.c = new Console(in, out);\n+\n+        this.currentDisplay = \"\";\n+    }\n+\n+    // UPDATE/PRINT CURRENT DISPLAY\n+    public void setCurrentDisplay(String newDisplay){\n+        this.currentDisplay = newDisplay;\n+    }\n+\n+    public void printCurrentDisplay(){\n+        System.out.println(currentDisplay);\n+    }\n+\n+    public void setPrintCurrentDisplay(String newDisplay){\n+        this.setCurrentDisplay(newDisplay);\n+        this.printCurrentDisplay();\n+    }\n+\n+\n+    // WELCOME MESSAGING\n+    public void printWelcomeMessage() {\n+        this.setPrintCurrentDisplay(\n+            \"'########:'####:'########::::::'######:::'#######::'########::'########::::\\n\"+\n+            \"..... ##::. ##:: ##.... ##::::'##... ##:'##.... ##: ##.... ##: ##.....:::::\\n\"+\n+            \":::: ##:::: ##:: ##:::: ##:::: ##:::..:: ##:::: ##: ##:::: ##: ##::::::::::\\n\"+\n+            \"::: ##::::: ##:: ########::::: ##::::::: ##:::: ##: ##:::: ##: ######::::::\\n\"+\n+            \":: ##:::::: ##:: ##.....:::::: ##::::::: ##:::: ##: ##:::: ##: ##...:::::::\\n\"+\n+            \": ##::::::: ##:: ##::::::::::: ##::: ##: ##:::: ##: ##:::: ##: ##::::::::::\\n\"+\n+            \" ########:'####: ##:::::::::::. ######::. #######:: ########:: ########::::\\n\"+\n+            \"........::....::..:::::::::::::......::::.......:::........:::........:::::\\n\"+\n+            \":'######:::::'###:::::'######::'####:'##::: ##::'#######::\\n\"+\n+            \"'##... ##:::'## ##:::'##... ##:. ##:: ###:: ##:'##.... ##:\\n\"+\n+            \" ##:::..:::'##:. ##:: ##:::..::: ##:: ####: ##: ##:::: ##:\\n\"+\n+            \" ##:::::::'##:::. ##:. ######::: ##:: ## ## ##: ##:::: ##:\\n\"+\n+            \" ##::::::: #########::..... ##:: ##:: ##. ####: ##:::: ##:\\n\"+\n+            \" ##::: ##: ##.... ##:'##::: ##:: ##:: ##:. ###: ##:::: ##:\\n\"+\n+            \". ######:: ##:::: ##:. ######::'####: ##::. ##:. #######::\\n\"+\n+            \":......:::..:::::..:::......:::....::..::::..:::.......:::\\n\\n\"+\n+            \"WELCOME TO ZIP CODE CASINO, LOCATED IN WILMINGTON, DE!\"\n+        );\n+    }\n+\n+    public void printWelcomeBackMessage(String name, int getAccountBalance) {\n+        this.setPrintCurrentDisplay(\n+            \"Welcome back \" + name + \"!\\n\"+\n+            \"Your current account balance is \" + getAccountBalance + \".\"\n+        );\n+    }\n+\n+    // MENUS\n+    public void printLoginMenu() {\n+        this.setPrintCurrentDisplay(\n+            \"What would you like to do?\\n\" +\n+                \"1.Login\\n\" +\n+                \"2.Create New Account\"\n+        );\n+    }\n+\n+    public void printGamesMenu() {\n+        this.setPrintCurrentDisplay(\n+            \"Pick a Game to Play:\\n\"+\n+            \"   1. BlackJack\\n\" +\n+            \"   2. Craps\\n\" +\n+            \"   3. Beetle\\n\" +\n+            \"   4. GoFish\\n\" +\n+            \"   5. Check Account Balance\\n\" +\n+            \"   6. Make a Deposit\\n\" +\n+            \"   7. Exit\\n\"\n+        );\n+    }\n+\n+    // ERROR MESSAGING\n+    public void printErrorMessage() {\n+        this.setPrintCurrentDisplay(\"Invalid Input!\");\n+    }\n+\n+\n+    // FUNDS MESSAGING\n+    public void printAccountBalance(double accountBalance) {\n+        this.setPrintCurrentDisplay(\n+           \"Account Balance: \" + accountBalance\n+        );\n+    }\n+\n+    public void printLowFundsWarning(double accountBalance){\n+        this.setPrintCurrentDisplay(\n+            \"WARNING: YOUR FUNDS ARE GETTING LOW!\\n\"+\n+            \"Please consider making a deposit.\\n\"\n+        );\n+        this.printAccountBalance(accountBalance);\n+\n+    }\n+\n+    public void printZeroFundsWarning() {\n+        this.setPrintCurrentDisplay(\n+            \"WARNING: YOUR ACCOUNT BALANCE HAS REACHED $0.00.\\n\"+\n+            \"PLEASE MAKE A DEPOSIT TO CONTINUE PLAYING.\"\n+        );\n+    }\n+\n+    public void printDepositMessage() {\n+        this.setPrintCurrentDisplay(\n+            \"How much are you depositing?\"\n+        );\n+    }\n+\n+    // GENERIC GAME RESULT MESSAGING\n+    public void printRollResult(Integer[] diceResults) {\n+        String formattedRollResults = \"\";\n+        for(int i = 0; i < diceResults.length; i++) {\n+            formattedRollResults += \"Dice \" + (i+1) + \": \" + diceResults[i] + \"\\n\";\n+        }\n+\n+        this.setPrintCurrentDisplay(\n+            formattedRollResults\n+        );\n+    }\n+\n+    public void printDealResult(ArrayList dealResults) {\n+        String formattedDealResults = \"\";\n+        for(int i = 0; i < dealResults.size(); i++) {\n+            formattedDealResults += \"Card \" + (i+1) + \": \" + dealResults.get(i) + \"\\n\";\n+        }\n+\n+        this.setPrintCurrentDisplay(\n+            formattedDealResults\n+        );\n+    }\n+\n+    public void printAmountOfWinnings(Double winningsAmount) {\n+        setPrintCurrentDisplay(\"You won $\" + winningsAmount+ \"!!!\");\n+    }\n+\n+    public void printAmountOfLoss(Double lossAmount) {\n+        setPrintCurrentDisplay(\"You lost $\" + lossAmount + \".\");\n+    }\n+\n+    // USER SET-UP MESSAGING\n+    public void printUserId(String userName){\n+        this.setPrintCurrentDisplay(\n+            \"UserId: \" + userName\n+        );\n+    }\n+\n+    public void printRequestUserId() {\n+        this.setPrintCurrentDisplay(\n+            \"Please enter username:\"\n+        );\n+    }\n+\n+    public void printRequestPassword() {\n+        this.setPrintCurrentDisplay(\n+            \"Please enter your password:\"\n+        );\n+    }\n+\n+    public void printRequestInitialDeposit(){\n+        this.setPrintCurrentDisplay(\n+            \"Please enter deposit amount:\"\n+        );\n+    }\n+\n+    // GENERIC BETTING MESSAGES\n+    public void printRequestBetAmount() {\n+        this.setPrintCurrentDisplay(\n+            \"How much money would you like to bet?\"\n+        );\n+    }\n+\n+    public String getCurrentDisplay(){\n+        System.out.println(currentDisplay);\n+        return currentDisplay;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "82cccdb8b36e18bd6523c3e66f53a4a33c4c6d8e",
    "filename": "src/main/java/io/zipcoder/casino/GamblingGame.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GamblingGame.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GamblingGame.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GamblingGame.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,16 @@\n+package io.zipcoder.casino;\n+\n+public interface GamblingGame {\n+\n+    public String startGame();\n+\n+    public Double acceptBetFrom(Double betAmount);\n+\n+    public Double calculateReward();\n+\n+    public Double calculateLoss();\n+\n+    public String endGame();\n+\n+\n+}"
  },
  {
    "sha": "19678e5581bebe4eb4d4ea122f7aa1b73d06e815",
    "filename": "src/main/java/io/zipcoder/casino/GamblingPlayer.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GamblingPlayer.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GamblingPlayer.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GamblingPlayer.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,11 @@\n+package io.zipcoder.casino;\n+\n+public interface GamblingPlayer {\n+\n+public String placeBet();\n+\n+public String getName();\n+\n+public Double accountBalance();\n+\n+}"
  },
  {
    "sha": "65076adf37d93eda094703efdcec61880d2b538b",
    "filename": "src/main/java/io/zipcoder/casino/Game.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Game.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Game.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Game.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,14 @@\n+package io.zipcoder.casino;\n+\n+import java.util.Random;\n+\n+public interface Game {\n+    Random random =new Random();\n+\n+    Integer numberOfPlayers = 0;\n+    Boolean GameState = false;\n+\n+    public void checkForWinner();\n+\n+    public void setPlayer();\n+}"
  },
  {
    "sha": "0c1d4d514889ab55ca601197f84b983534e801d6",
    "filename": "src/main/java/io/zipcoder/casino/GoFish.java",
    "status": "added",
    "additions": 202,
    "deletions": 0,
    "changes": 202,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GoFish.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GoFish.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GoFish.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,202 @@\n+package io.zipcoder.casino;\n+\n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+public class GoFish extends CardGame {\n+\n+    private Console c;\n+    private GoFishDisplay d;\n+    private Integer pairCountPlayer;\n+    private Integer pairCountDealer;\n+    private String rankRequested;\n+    private String turn;\n+\n+    public GoFish() {\n+\n+        this.c = new Console(System.in, System.out);\n+        this.d = new GoFishDisplay();\n+\n+        this.pairCountPlayer = 0;\n+        this.pairCountDealer = 0;\n+        this.turn = \"player\";\n+        this.rankRequested = \"\";\n+    }\n+\n+    public String getTurn() {\n+        return this.turn;\n+    }\n+\n+    public void setTurn(String newTurn) {\n+        this.turn = newTurn;\n+    }\n+\n+    public String getRankRequested() {\n+        return this.rankRequested;\n+    }\n+\n+    public void setBookCounts(int bookCountPlayer, int bookCountDealer) {\n+        this.pairCountPlayer = bookCountPlayer;\n+        this.pairCountDealer = bookCountDealer;\n+    }\n+\n+    public int getPairCountPlayer() {\n+        return this.pairCountPlayer;\n+    }\n+\n+    public int getPairCountDealer() {\n+        return this.pairCountDealer;\n+    }\n+\n+    public void setRankRequested(String rank) {\n+        this.rankRequested = rank;\n+    }\n+\n+    public void setupGame(int numberOfCards) {\n+        this.createNewDeck();\n+        this.shuffleCards();\n+        this.dealCards(numberOfCards);\n+    }\n+\n+\n+    /*public void getRankToAskFor_Human() {\n+    // Move to display class??\n+    public String displayPlayersHand(ArrayList<String> playersHand) {\n+        String playersHandOutput = \"\";\n+        Iterator itr = playersHand.iterator();\n+        while(itr.hasNext()) {\n+            playersHandOutput += itr.next() + \"\\n\";\n+        }\n+        return playersHandOutput;\n+    }*/\n+\n+    public void getRankToAskFor_Human() {\n+\n+        d.printWhatRankYouWillAskFor();\n+        this.rankRequested = c.getStringInput(\"\", null);\n+    }\n+\n+    public void getRankToAskFor_Computer() {\n+       int pickCard = (int) Math.random() * (this.dealersHand.size() - 1);\n+       this.rankRequested = this.getRankOnCard(this.dealersHand.get(pickCard));\n+    }\n+\n+    public boolean checkIfRankInHand(ArrayList<String> handToCheck) {\n+        for (int i = 0; i < handToCheck.size(); i++) {\n+            if (getRankOnCard(handToCheck.get(i)).equals(this.rankRequested)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public void takeCardFromOtherPlayer(ArrayList<String> playerTakingCard, ArrayList<String> playerGivingCard, String rankAskedFor) {\n+        for (int i = 0; i < playerGivingCard.size(); i++) {\n+            if (this.getRankOnCard(playerGivingCard.get(i)).equals(rankAskedFor)) {\n+                playerTakingCard.add(playerGivingCard.get(i));\n+                playerGivingCard.remove(i);\n+            }\n+        }\n+    }\n+\n+    public void drawCardFromDeck(ArrayList<String> playerHand) {\n+        playerHand.add(this.deck.get(0));\n+        this.deck.remove(0);\n+    }\n+\n+    public String checkPairInHand(ArrayList<String> currentPlayer) {\n+        Collections.sort(currentPlayer);\n+        int count = 1;\n+        for (int i = 1; i < currentPlayer.size(); i++) {\n+            if (this.getRankOnCard(currentPlayer.get(i - 1)).equals(this.getRankOnCard(currentPlayer.get(i)))) {\n+                count += 1;\n+                if (count == 2) {\n+                    return this.getRankOnCard(currentPlayer.get(i));\n+                }\n+            } else {\n+                count = 1;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    //public void checkForPairsInCurrentPlayersHand(ArrayList<String> currentPlayer) {\n+\n+\n+    public int removePairFromHand(ArrayList<String> currentPlayer) {\n+        String rankToRemove = checkPairInHand(currentPlayer);\n+        if (rankToRemove != null) {\n+            int i = 0;\n+            while(i < currentPlayer.size()) {\n+                if (getRankOnCard(currentPlayer.get(i)).equals(rankToRemove)) {\n+                    currentPlayer.remove(i);\n+                } else {\n+                    i++;\n+                }\n+            }\n+            return 1;\n+        }\n+        return 0;\n+    }\n+\n+    public void incrementPairCountPlayer(int num) {\n+        this.pairCountPlayer += num;\n+    }\n+\n+    public void incrementPairCountDealer(int num) {\n+        this.pairCountDealer += num;\n+    }\n+\n+    public boolean checkGameOver() {\n+        if (this.pairCountDealer + this.pairCountPlayer == 13) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public String checkWinner() {\n+            if (this.pairCountDealer > this.pairCountPlayer) {\n+                return \"Opponent\";\n+            } else {\n+                return \"Player\";\n+            }\n+    }\n+\n+    public String startGame() {\n+        return null;\n+    }\n+\n+    public Double acceptBetFrom(Double betAmount) {\n+        return null;\n+    }\n+\n+    public Double acceptBetFrom() {\n+        return null;\n+    }\n+\n+    public Double calculateReward() {\n+        return null;\n+    }\n+\n+    public Double calculateLoss() {\n+        return null;\n+    }\n+\n+    public String endGame() {\n+        return null;\n+    }\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "4577eddf91f08763316c77c88a5d0188100347f6",
    "filename": "src/main/java/io/zipcoder/casino/GoFishDisplay.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GoFishDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GoFishDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GoFishDisplay.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,56 @@\n+package io.zipcoder.casino;\n+\n+public class GoFishDisplay extends Display{\n+\n+    public void printGoFishRules(){\n+        setPrintCurrentDisplay(\"GO FISH RULES:\\n\"+\n+                \"Two players will be dealt 5 cards each to begin.\\n\"+\n+                \"The object of the game is to have the most pairs (set of 2 cards of the same rank).\\n\"+\n+                \"A player creates a pair by asking the other player if they have cards of a specific rank in their hand.\\n\" +\n+                \"If the other player is holding cards of the requested rank, they must hand them over.\\n\"+\n+                \"You can only request card ranks that you already have in your hand.\\n\" +\n+                \"Game play continues until the deck is empty.\\n\");\n+    }\n+\n+    public void printPlayerHandHeader() {setPrintCurrentDisplay(\"\\nCARDS IN YOUR HAND:\");}\n+\n+    public void printFreeGame() {System.out.println(\"And don't worry - you won't be needing your money. This game is FREE!!!!\\n\");}\n+\n+    public void printGoFish(){\n+        setPrintCurrentDisplay(\"\\nYOUR OPPONENT SAYS: GO FISH!\\nYou have now drawn a card from the deck.\");\n+    }\n+\n+    public void printTellComputerGoFish() {\n+        setPrintCurrentDisplay(\"\\nYOU TOLD YOUR OPPONENT TO GO FISH!\\nYour opponent has drawn a card from the deck.\");\n+    }\n+\n+    public void printOpponentHasCard(){\n+        setPrintCurrentDisplay(\"That card rank is in their hand! It will now be given to you!\");\n+    }\n+\n+    public void printRankNotInYourHand() {\n+        setPrintCurrentDisplay(\"You must request a card rank that is already in your hand.\");\n+    }\n+\n+    public void printCardNotFound(){\n+        setPrintCurrentDisplay(\"Nope. They are not holding any cards of that rank.\");\n+    }\n+\n+    public void printWhatRankYouWillAskFor(){setPrintCurrentDisplay(\"\\nWhat card rank will you ask for?\");}\n+\n+    public void printOpponentAskedFor(){setPrintCurrentDisplay(\"Your opponent asked for a...\");}\n+\n+    public void printOpponentTookCard() {setPrintCurrentDisplay(\"Your opponent took a card from you!\\n\");}\n+\n+    public void printHumansFirst() {setPrintCurrentDisplay(\"Humans play first!\\n\");\n+    }\n+\n+    public void printMadePair() {setPrintCurrentDisplay(\"\\nYou made a pair!\");}\n+\n+    public void printMadePairOpponent() {setPrintCurrentDisplay(\"\\nYour opponent made a pair!\");}\n+\n+    public void printPairsHuman() {setPrintCurrentDisplay(\"\\nCurrent Number of Pairs You Have: \");}\n+\n+    public void printPairsComputer() {setPrintCurrentDisplay(\"\\nCurrent Number of Pairs Opponent Has: \");}\n+\n+}"
  },
  {
    "sha": "d53617d1b89a7f3d646358dcf113e25263019510",
    "filename": "src/main/java/io/zipcoder/casino/GoFishEngine.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GoFishEngine.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/GoFishEngine.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GoFishEngine.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,110 @@\n+package io.zipcoder.casino;\n+\n+public class GoFishEngine {\n+\n+    private GoFish g;\n+    private GoFishDisplay d;\n+    private Player p;\n+\n+    public GoFishEngine() {\n+        this.g = new GoFish();\n+        this.d = new GoFishDisplay();\n+        //this.p = currentPlayer;\n+    }\n+\n+    public void startGame() {\n+        d.printGoFishRules();\n+        d.printFreeGame();\n+        d.printHumansFirst();\n+        g.setupGame(5);\n+        this.playGame();\n+    }\n+\n+    public void playGame() {\n+\n+        while (g.checkGameOver() == false) {\n+            if (g.getTurn() == \"player\") {\n+                this.playHumansTurn();\n+\n+            } else if (g.getTurn() == \"dealer\") {\n+                this.playComputer();\n+            }\n+        }\n+\n+        System.out.println(g.checkWinner());\n+    }\n+\n+    public void playHumansTurn() {\n+        this.printPlayersHand();\n+        this.checkForPairsHuman();\n+\n+        g.getRankToAskFor_Human();\n+\n+        boolean player = g.checkIfRankInHand(g.getPlayersHand());\n+        boolean dealer = g.checkIfRankInHand(g.getDealersHand());\n+\n+        if (!player) {\n+            d.printRankNotInYourHand();\n+        } else if (player && dealer) {\n+            d.printOpponentHasCard();\n+            g.takeCardFromOtherPlayer(g.getPlayersHand(), g.getDealersHand(), g.getRankRequested());\n+        } else if (player && !dealer) {\n+            d.printGoFish();\n+            g.drawCardFromDeck(g.getPlayersHand());\n+            this.printPlayersHand();\n+            this.checkForPairsHuman();\n+            g.setTurn(\"dealer\");\n+        }\n+    }\n+\n+    public void playComputer() {\n+        this.checkForPairsComputer();\n+        g.getRankToAskFor_Computer();\n+\n+        boolean player = g.checkIfRankInHand(g.getPlayersHand());\n+        boolean dealer = g.checkIfRankInHand(g.getDealersHand());\n+\n+        d.printOpponentAskedFor();\n+        System.out.println(g.getRankRequested());\n+\n+        if (player && dealer) {\n+            g.takeCardFromOtherPlayer(g.getDealersHand(), g.getPlayersHand(), g.getRankRequested());\n+            d.printOpponentTookCard();\n+        } else if (!player && dealer) {\n+            d.printTellComputerGoFish();\n+            g.drawCardFromDeck(g.getDealersHand());\n+            this.checkForPairsComputer();\n+            g.setTurn(\"player\");\n+        }\n+    }\n+\n+    public void printPlayersHand() {\n+        d.printPlayerHandHeader();\n+        System.out.println(g.displayPlayersHand(g.getPlayersHand()));\n+    }\n+\n+    public void checkForPairsHuman() {\n+        int num = g.removePairFromHand(g.getPlayersHand());\n+        if (num == 1) {\n+            g.incrementPairCountPlayer(num);\n+\n+            d.printMadePair();\n+            d.printPairsHuman();\n+            System.out.println(g.getPairCountPlayer());\n+            this.printPlayersHand();\n+        }\n+    }\n+\n+    public void checkForPairsComputer() {\n+        int num = g.removePairFromHand(g.getDealersHand());\n+        if (num == 1) {\n+            g.incrementPairCountDealer(num);\n+\n+            d.printMadePairOpponent();\n+            d.printPairsComputer();\n+            System.out.println(g.getPairCountDealer());\n+        }\n+    }\n+\n+}\n+"
  },
  {
    "sha": "ef25eeb1cf744ec6f0566454a491a68ee10124b8",
    "filename": "src/main/java/io/zipcoder/casino/Main.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Main.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Main.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Main.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,9 @@\n+package io.zipcoder.casino;\n+\n+public class Main {\n+\n+    public static void main(String args[]) {\n+        Casino casino = new Casino();\n+        casino.run();\n+    }\n+}"
  },
  {
    "sha": "5aae3d89018d60d56a4c2ef99955eaa6e41ea62c",
    "filename": "src/main/java/io/zipcoder/casino/Player.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Player.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/Player.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Player.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,48 @@\n+package io.zipcoder.casino;\n+\n+public class Player{\n+\n+    private String name;\n+    private Double wallet = 0.0;\n+    private Double currentBet = 0.0;\n+\n+    public Player(String name, Double initialDeposit) {\n+        this.name = name;\n+        this.wallet = initialDeposit;\n+    }\n+\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+\n+    public Double getWallet() {\n+        return wallet;\n+    }\n+\n+    public void setWallet(Double deposit) {\n+        this.wallet = wallet + deposit;\n+    }\n+\n+\n+    public Double makeBet(Double betAmount) {\n+        currentBet += betAmount;\n+        wallet = wallet - betAmount;\n+        return currentBet;\n+    }\n+\n+    public Double getCurrentBet() {\n+        return currentBet;\n+    }\n+\n+    public void setCurrentBet(Double currentBet) {\n+        this.currentBet = currentBet;\n+    }\n+\n+    public Double makeDeposit(Double depositAmount) {\n+        wallet += depositAmount;\n+        return wallet;\n+    }\n+\n+}"
  },
  {
    "sha": "45298c924983f4d3ceb84a3cc16d1176d7f5cef3",
    "filename": "src/main/java/io/zipcoder/casino/PlayerWarehouse.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/PlayerWarehouse.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/PlayerWarehouse.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/PlayerWarehouse.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,41 @@\n+package io.zipcoder.casino;\n+\n+import java.util.HashMap;\n+\n+public class PlayerWarehouse {\n+\n+    private HashMap<String, Player> playerGroup;\n+    private HashMap<String, String> userNamePasswordMap;\n+\n+    public PlayerWarehouse() {\n+        this.playerGroup = new HashMap<String, Player>();\n+        this.userNamePasswordMap = new HashMap<String, String>();\n+    }\n+\n+    public Player getPlayer(String userId) {\n+        return this.playerGroup.get(userId);\n+    }\n+\n+    public boolean validateUniquePlayer(String userId) {\n+        if (userNamePasswordMap.containsKey(userId)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public void addNewPlayer(String userId, Player player, String password) {\n+        playerGroup.put(userId, player);\n+        userNamePasswordMap.put(userId, password);\n+    }\n+\n+    public boolean validateLoginCredentials(String userId, String password) {\n+\n+\n+\n+        if (userNamePasswordMap.containsKey(userId) && userNamePasswordMap.get(userId).equals(password)) {\n+            return true;\n+        }\n+    return false;\n+    }\n+\n+}"
  },
  {
    "sha": "ce2e5cf78dbdef9a17f9d68cc90126b8949192b4",
    "filename": "src/main/java/io/zipcoder/casino/utilities/Console.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/utilities/Console.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/main/java/io/zipcoder/casino/utilities/Console.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/utilities/Console.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -55,6 +55,7 @@ public Long getLongInput(String prompt, Object... args) {\n     }\n \n     public Integer getIntegerInput(String prompt, Object... args) {\n+\n         return getLongInput(prompt, args).intValue();\n     }\n }"
  },
  {
    "sha": "ecbdfb15d4556cb40c36f23cd90952d33df87895",
    "filename": "src/test/java/io/zipcoder/casino/BeetleDisplayTests.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/BeetleDisplayTests.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/BeetleDisplayTests.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/BeetleDisplayTests.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,126 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BeetleDisplayTests {\n+    Display d = new Display();\n+    BeetleDisplay bd = new BeetleDisplay();\n+\n+    @Test\n+    public void welcomeTest() {\n+        bd.welcome();\n+        String actual = \"WELCOME TO BEETLE!\\n(1 dollar per player table minimum)\\n\";\n+        String expected = bd.welcome();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void rulesTest() {\n+        bd.welcome();\n+        String actual = \"WELCOME TO BEETLE!\\n(1 dollar per player table minimum)\\n\";\n+        String expected = bd.welcome();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void drewLegTest() {\n+        bd.drewLeg();\n+        String actual = \"A leg was added to the beetle!\";\n+        String expected = bd.drewLeg();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void drewBodyTest() {\n+        bd.drewBody();\n+        String actual = \"The beetle's body was drawn!\";\n+        String expected = bd.drewBody();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void drewHeadTest() {\n+        bd.drewHead();\n+        String actual = \"This beetle has a head now!\";\n+        String expected = bd.drewHead();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void userBugIsCompleteTest() {\n+        bd.userBugIsComplete();\n+        String actual = \"Your beetle is complete!\\nYOU WIN!!!!\";\n+        String expected = bd.userBugIsComplete();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void opponentsBugisCompleteTest() {\n+        bd.opponentsBugisComplete();\n+        String actual = \"Your opponents beetle is complete.\\nYou lose.\";\n+        String expected = bd.opponentsBugisComplete();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void bothBeetlesCompleteTest() {\n+        bd.bothBeetlesComplete();\n+        String actual = \"You both drew beetles. The game is a tie.\";\n+        String expected = bd.bothBeetlesComplete();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void repeatedRollResult() {\n+        bd.repeatedRollResult();\n+        String actual = \"You already rolled that number.\";\n+        String expected = bd.repeatedRollResult();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void border() {\n+        bd.border();\n+        String actual = \"======================\";\n+        String expected = bd.border();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void borderWithSpace() {\n+        bd.borderWithSpace();\n+        String actual = \"\\n======================\\n\";\n+        String expected = bd.borderWithSpace();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void yourBeetle() {\n+        bd.yourBeetle();\n+        String actual = \"YOUR BEETLE\";\n+        String expected = bd.yourBeetle();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void opponentsBeetle() {\n+        bd.opponentsBeetle();\n+        String actual = \"OPPONENTS BEETLE\";\n+        String expected = bd.opponentsBeetle();\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e3e8db510bc0b45a9321e9e2765e5a7d7c7c51b9",
    "filename": "src/test/java/io/zipcoder/casino/BeetleTest.java",
    "status": "added",
    "additions": 148,
    "deletions": 0,
    "changes": 148,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/BeetleTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/BeetleTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/BeetleTest.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,148 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BeetleTest {\n+\n+    @Test\n+    public void playerBeetleTest() {\n+        //given\n+        Player player1 = new Player(\"player\", 100.00);\n+        Beetle beetle = new Beetle(player1);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 4);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 5);\n+        // and\n+        String[][] expected = new String[][]{{\" \",\"0\",\" \"},\n+                {\" \",\"|\",\" \"},\n+                {\" \",\"|\",\" \"},\n+                {\" \",\" \",\"\\\\\"}};\n+        String[][] actual = (beetle.drawPlayerBeetle(beetle.getUsersBeetle()));\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+    @Test\n+    public void opponentBeetleTest() {\n+        //given\n+        Player player1 = new Player(\"player\", 100.00);\n+        Beetle beetle = new Beetle(player1);\n+        beetle.analyzeRoll(beetle.getOpponentsRolls(), beetle.getOpponentsBeetle(), 4);\n+        beetle.analyzeRoll(beetle.getOpponentsRolls(), beetle.getOpponentsBeetle(), 5);\n+        // and\n+        String[][] expected = new String[][]{{\" \",\"0\",\" \"},\n+                {\" \",\"|\",\" \"},\n+                {\" \",\"|\",\" \"},\n+                {\" \",\" \",\"\\\\\"}};\n+        String[][] actual = (beetle.drawPlayerBeetle(beetle.getOpponentsBeetle()));\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+    @Test\n+    public void gameEngineTest() {\n+        Player player1 = new Player(\"player\", 100.00);\n+        Beetle beetle = new Beetle(player1);\n+\n+        beetle.gameEngine();\n+    }\n+\n+    @Test\n+    public void completeBeetleTest() {\n+        Player player2 = new Player(\"player\", 100.00);\n+        Beetle beetle = new Beetle(player2);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 1);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 2);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 3);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 4);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 5);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 6);\n+\n+        Assert.assertEquals(beetle.getCompleteBeetle(),beetle.getUsersBeetle());\n+\n+    }\n+\n+    @Test\n+    public void getUserRollsTest() {\n+        Player human = new Player(\"human\", 50.00);\n+        Beetle beetle = new Beetle(human);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 1);\n+        beetle.analyzeRoll(beetle.getUsersRolls(), beetle.getUsersBeetle(), 2);\n+\n+        Integer expected = 2;\n+        Integer actual = beetle.getUsersRolls().size();\n+\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+    @Test\n+    public void acceptUserBetTest() {\n+        Player robot = new Player(\"robot\", 100.00);\n+        Beetle beetle = new Beetle(robot);\n+\n+        beetle.acceptBetFromUser(50.00);\n+\n+        Double actual = beetle.getPurse();\n+        Double expected = 50.0;\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void openingBetTest() {\n+        Player hubot = new Player(\"hubot\", 100.00);\n+        Beetle beetle = new Beetle(hubot);\n+        beetle.openingBet();\n+\n+        Double expected = 1.0;\n+        Double actual = beetle.getPurse();\n+\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void opponentBetTest() {\n+        Player hubot = new Player(\"hubot\", 100.00);\n+        Beetle beetle = new Beetle(hubot);\n+\n+        Double expected = beetle.opponentBet(10.00);\n+\n+        Assert.assertTrue(expected >=5 && expected <= 15);\n+\n+    }\n+\n+    @Test\n+    public void calculateRewardTest() {\n+        Player player = new Player(\"player\", 100.00);\n+        Beetle beetle = new Beetle(player);\n+\n+        beetle.openingBet();\n+        beetle.acceptBetFromUser(50.0);\n+\n+        Double actual = beetle.calculateReward();\n+        Double expected = 1.0;\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void calculateLossTest() {\n+        Player player = new Player(\"player\", 100.00);\n+        Beetle beetle = new Beetle(player);\n+\n+        beetle.openingBet();\n+        beetle.acceptBetFromUser(50.0);\n+\n+        Double actual = beetle.calculateLoss();\n+        Double expected = 50.0;\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+\n+\n+\n+}"
  },
  {
    "sha": "627be16f22baeeee474d8be174aea7a6f72eb699",
    "filename": "src/test/java/io/zipcoder/casino/CasinoTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/CasinoTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/CasinoTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/CasinoTest.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -2,4 +2,7 @@\n \n \n public class CasinoTest {\n+\n+    // git push test\n+\n }"
  },
  {
    "sha": "a83559138ae07c0b15a4b8553504e7d3b775f7cf",
    "filename": "src/test/java/io/zipcoder/casino/DisplayTest.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/DisplayTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/DisplayTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/DisplayTest.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,13 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.Test;\n+\n+public class DisplayTest {\n+\n+    @Test\n+    public void testPrintStartScreen() {\n+        Display disp = new Display();\n+        disp.printWelcomeMessage();\n+    }\n+\n+}"
  },
  {
    "sha": "cc41633a099625e0f7fd9262290904e6f9ee629f",
    "filename": "src/test/java/io/zipcoder/casino/GoFishTest.java",
    "status": "added",
    "additions": 277,
    "deletions": 0,
    "changes": 277,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/GoFishTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/GoFishTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/GoFishTest.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,277 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+public class GoFishTest {\n+\n+    GoFish go;\n+\n+    @Before\n+    public void setUp() {\n+        go = new GoFish();\n+    }\n+\n+    @Test\n+    public void testCreateNewDeck() {\n+        // Given\n+        int numberOfCards = 5;\n+        String expectedAtIdx0 = \"Ace of Clubs\";\n+        String expectedAtIdx1 = \"2 of Clubs\";\n+        String expectedAtIdx13 = \"Ace of Diamonds\";\n+        String expectedAtIdx28 = \"3 of Hearts\";\n+        String expectedAtIdx51 = \"King of Spades\";\n+\n+        // When\n+        go.createNewDeck();\n+        ArrayList<String> actualDeck = go.getDeck();\n+        String actualAtIdx0 = actualDeck.get(0);\n+        String actualAtIdx1 = actualDeck.get(1);\n+        String actualAtIdx13 = actualDeck.get(13);\n+        String actualAtIdx28 = actualDeck.get(28);\n+        String actualAtIdx51 = actualDeck.get(51);\n+\n+        // Then\n+        Assert.assertEquals(52, actualDeck.size());\n+        Assert.assertEquals(expectedAtIdx0,  actualAtIdx0);\n+        Assert.assertEquals(expectedAtIdx1,  actualAtIdx1);\n+        Assert.assertEquals(expectedAtIdx13,  actualAtIdx13);\n+        Assert.assertEquals(expectedAtIdx28,  actualAtIdx28);\n+        Assert.assertEquals(expectedAtIdx51,  actualAtIdx51);\n+    }\n+\n+    @Test\n+    public void testShuffleCards() {\n+        // Given\n+        go.createNewDeck();\n+        ArrayList<String> unshuffledDeck = new ArrayList<String>(go.getDeck());\n+\n+        // When\n+        go.shuffleCards();\n+        ArrayList<String> shuffledDeck = go.getDeck();\n+\n+        // Then\n+        Assert.assertNotEquals(unshuffledDeck, shuffledDeck);\n+    }\n+\n+    @Test\n+    public void testDealCards() {\n+        // Given\n+        go.createNewDeck();\n+        ArrayList<String> actualDeck = go.getDeck();\n+\n+        // When\n+        go.dealCards(5);\n+        ArrayList<String> actualPerson1 = go.getPlayersHand();\n+        ArrayList<String> actualPerson2 = go.getDealersHand();\n+\n+        // Then\n+        Assert.assertEquals(5, actualPerson1.size());\n+        Assert.assertEquals(5, actualPerson2.size());\n+        Assert.assertEquals(42, actualDeck.size());\n+    }\n+\n+    @Test\n+    public void testGetRankOnCard() {\n+        // Given\n+        String given = \"2 of Diamonds\";\n+        String expected = \"2\";\n+\n+        String givenCase2 = \"Ace of Hearts\";\n+        String expectedCase2 = \"Ace\";\n+\n+        String givenCase3 = \"10 of Clubs\";\n+        String expectedCase3 = \"10\";\n+\n+        // When\n+        String actual = go.getRankOnCard(given);\n+        String actualCase2 = go.getRankOnCard(givenCase2);\n+        String actualCase3 = go.getRankOnCard(givenCase3);\n+\n+        // Then\n+        Assert.assertEquals(expected, actual);\n+        Assert.assertEquals(expectedCase2, actualCase2);\n+        Assert.assertEquals(expectedCase3, actualCase3);\n+    }\n+\n+    @Test\n+    public void testGetValueOnCard() {\n+        // Given\n+        int expectedRank = 10;\n+        int expectedRank2 = 9;\n+        String inputRank = \"Ace\";\n+        String inputRank2 = \"9\";\n+\n+        // When\n+        int actualRank = go.getValueOfCard(inputRank);\n+        int actualRank2 = go.getValueOfCard(inputRank2);\n+\n+        Assert.assertEquals(expectedRank, actualRank);\n+        Assert.assertEquals(expectedRank2, actualRank2);\n+    }\n+\n+    @Test\n+    public void testDisplayPlayersHand() {\n+        // Given\n+        ArrayList<String> playersHand = new ArrayList<String>(Arrays.asList(\"2 of Diamonds\", \"Queen of Hearts\", \"3 of Spades\", \"4 of Clubs\", \"7 of Hearts\"));\n+        go.setPlayersHand(playersHand);\n+        String expected = \"2 of Diamonds\\nQueen of Hearts\\n3 of Spades\\n4 of Clubs\\n7 of Hearts\\n\";\n+\n+        // When\n+        String actual = go.displayPlayersHand(go.getPlayersHand());\n+\n+        // Then\n+        Assert.assertEquals(expected, String.valueOf(actual));\n+    }\n+\n+    @Test\n+    public void TestGetValueOfCard() {\n+        String given = \"Ace of Hearts\";\n+        String given1 = \"2 of Clubs\";\n+        String given2 = \"7 of Diamonds\";\n+        String given3 = \"King of Diamonds\";\n+\n+        System.out.println(go.getValueOfCard(go.getRankOnCard(given)));\n+        System.out.println(go.getValueOfCard(go.getRankOnCard(given1)));\n+        System.out.println(go.getValueOfCard(go.getRankOnCard(given2)));\n+        System.out.println(go.getValueOfCard(go.getRankOnCard(given3)));\n+\n+    }\n+\n+    // Not sure how to test this one\n+    @Test\n+    public void testGetRankToAskFor_Human() {\n+\n+    }\n+\n+    @Test\n+    public void testGetRankToAskFor_Computer() {\n+        // Given\n+        go.setDealersHand(new ArrayList<String>(Arrays.asList(\"Ace of Hearts\", \"2 of Spades\", \"6 of Diamonds\")));\n+\n+        // When\n+        //String actual = go.getRankToAskFor_Computer();\n+\n+        // Then\n+        //Assert.assertTrue(actual.equals(\"Ace\") || actual.equals(\"2\") || actual.equals(\"6\"));\n+    }\n+\n+    @Test\n+    public void testCheckIfRankInPlayersHand() {\n+        // Given\n+        go.setPlayersHand(new ArrayList<String>(Arrays.asList(\"King of Diamonds\", \"4 of Spades\")));\n+\n+        // When\n+        go.setRankRequested(\"King\");\n+        boolean actual = go.checkIfRankInHand(go.getPlayersHand());\n+        go.setRankRequested(\"4\");\n+        boolean actual2 = go.checkIfRankInHand(go.getPlayersHand());\n+\n+        // Then\n+        Assert.assertTrue(actual);\n+        Assert.assertTrue(actual2);\n+    }\n+\n+    @Test\n+    public void testTakeCardFromOtherPlayer() {\n+        // Given\n+        go.setPlayersHand(new ArrayList<String>(Arrays.asList(\"2 of Clubs\")));\n+        go.setDealersHand(new ArrayList<String>(Arrays.asList(\"Ace of Diamonds\")));\n+\n+        // When\n+        go.takeCardFromOtherPlayer(go.getPlayersHand(), go.getDealersHand(), \"Ace\");\n+\n+        // Then\n+        ArrayList<String> expectedPlayer = new ArrayList<String>(Arrays.asList(\"2 of Clubs\", \"Ace of Diamonds\"));\n+        ArrayList<String> expectedDealer = new ArrayList<String>();\n+\n+        ArrayList<String> actualPlayer = go.getPlayersHand();\n+        ArrayList<String> actualDealer = go.getDealersHand();\n+\n+        Assert.assertEquals(expectedPlayer, actualPlayer);\n+        Assert.assertEquals(expectedDealer, actualDealer);\n+    }\n+\n+    @Test\n+    public void testDrawCardFromDeck() {\n+        // Given\n+        int expectedPlayerHand = 6;\n+        int expectedDeckSize = 41;\n+        go.setupGame(5);\n+\n+        // When\n+        go.drawCardFromDeck(go.getPlayersHand());\n+        int actualPlayerHand = go.getPlayersHand().size();\n+        int actualDeckSize = go.getDeck().size();\n+\n+        // Then\n+        Assert.assertEquals(expectedPlayerHand, actualPlayerHand);\n+        Assert.assertEquals(expectedDeckSize, actualDeckSize);\n+    }\n+\n+    @Test\n+    public void testCheckPairInHand() {\n+        // Given\n+        go.setPlayersHand(new ArrayList<String>(Arrays.asList(\"King of Hearts\", \"King of Diamonds\", \"Queen of Spades\")));\n+\n+        // When\n+        String pair = go.checkPairInHand(go.getPlayersHand());\n+\n+        // Then\n+        Assert.assertEquals(\"King\", pair);\n+    }\n+\n+    @Test\n+    public void testRemovePairFromHand() {\n+        // Given\n+        go.setPlayersHand(new ArrayList<String>(Arrays.asList(\"King of Hearts\", \"King of Diamonds\", \"Queen of Spades\")));\n+\n+        // When\n+        int actual = go.removePairFromHand(go.getPlayersHand());\n+\n+        // Then\n+        Assert.assertEquals(1, 1);\n+    }\n+\n+    @Test\n+    public void checkGameOverTrue() {\n+        // Given\n+        go.setBookCounts(10, 3);\n+\n+        // When\n+        boolean actual = go.checkGameOver();\n+\n+        // Then\n+        Assert.assertTrue(actual);\n+    }\n+\n+    @Test\n+    public void checkGameOverFalse() {\n+        // Given\n+        go.setBookCounts(9, 3);\n+\n+        // When\n+        boolean actual = go.checkGameOver();\n+\n+        // Then\n+        Assert.assertFalse(actual);\n+    }\n+\n+    @Test\n+    public void testCheckWinner() {\n+        // Given\n+        go.setBookCounts(10, 3);\n+        String expected = \"player\";\n+\n+        // When\n+        String actual = go.checkWinner();\n+\n+        // Then\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+}"
  },
  {
    "sha": "3cf2909921e49ad498a5ee6ea0ffe3cd95a6f4ee",
    "filename": "src/test/java/io/zipcoder/casino/PlayerTest.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/PlayerTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/789ed37f15a2f4a0927c620b61551caf6b33c399/src/test/java/io/zipcoder/casino/PlayerTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/PlayerTest.java?ref=789ed37f15a2f4a0927c620b61551caf6b33c399",
    "patch": "@@ -0,0 +1,124 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PlayerTest {\n+\n+    @Test\n+    public void PlayerConstructorTest() {\n+        //Given\n+        Player player1 = new Player(\"player1\", 100.00);\n+        String actual = player1.getName();\n+\n+        //When\n+        String expected = \"player1\";\n+\n+        //Assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void PlayerGetAccountBalanceTest() {\n+        //Given\n+        Player player2 = new Player(\"player1\", 500.00);\n+        Double actual = player2.getWallet();\n+        //When\n+        Double expected = 500.00;\n+\n+        //Assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void PlayerSetAccountBalanceTest() {\n+        //Given\n+        Player player3 = new Player(\"player1\", 500.00);\n+        player3.setWallet(100.00);\n+        Double actual = player3.getWallet();\n+        //When\n+        Double expected = 600.00;\n+\n+        //Assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+    @Test\n+    public void PlayerMakeBetTest() {\n+        //given\n+        Player player4 = new Player(\"player1\", 50.00);\n+        Double expected = player4.makeBet(5.0);\n+\n+        //when\n+        Double actual = 5.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+    @Test\n+    public void PlayerMakeBetTest2() {\n+        //given\n+        Player player5 = new Player(\"player1\", 50.00);\n+        player5.makeBet(5.0);\n+        Double expected = player5.getWallet();\n+\n+        //when\n+        Double actual = 45.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+    @Test\n+    public void PlayerMakeBetTest3() {\n+        Player player6 = new Player(\"player1\", 50.00);\n+        player6.makeBet(5.0);\n+        Double expected = player6.getCurrentBet();\n+\n+        //when\n+        Double actual = 5.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void PlayerMakeBetTest4() {\n+        Player player7 = new Player(\"player1\", 50.00);\n+        player7.makeBet(5.0);\n+        player7.makeBet(2.0);\n+        player7.makeBet(2.0);\n+        Double expected = player7.getCurrentBet();\n+\n+        //when\n+        Double actual = 9.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void PlayerMakeBetTest5() {\n+        Player player7 = new Player(\"player1\", 50.00);\n+        player7.makeBet(5.0);\n+        player7.makeBet(2.0);\n+        player7.makeBet(2.0);\n+        Double expected = player7.getWallet();\n+\n+        //when\n+        Double actual = 41.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+    @Test\n+    public void MakeDepositTest() {\n+        Player player8 = new Player(\"player1\", 50.00);\n+        player8.makeDeposit(50.00);\n+\n+        Double expected  = 100.00;\n+        Double actual = player8.getWallet();\n+\n+        Assert.assertEquals(expected, actual);\n+\n+    }\n+}"
  }
]
