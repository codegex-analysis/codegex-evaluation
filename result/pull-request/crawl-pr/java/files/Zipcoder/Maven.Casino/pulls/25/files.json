[
  {
    "sha": "84a24410a715f874c41addfae218b6842179ec5d",
    "filename": ".DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/.DS_Store?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7"
  },
  {
    "sha": "14d9a6ea5695821ee802f594fdbffd6721514fc4",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/.gitignore",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/.gitignore",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/.gitignore?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -9,6 +9,7 @@ local.properties\n .settings/\n .loadpath\n .recommenders\n+.DS_Store\n \n # External tool builders\n .externalToolBuilders/"
  },
  {
    "sha": "02c34dd945dbff9f699a47679c14437095373155",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/README.md",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/README.md",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/README.md?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -15,7 +15,7 @@\n     * `Player` objects should be created upon input from a user.\n   * `Game` interface\n     * Contract which ensures that a class enforces some aspect of _playing_.\n-  * `GamblingGame` interface\n+  * `io.zipcoder.casino.GamblingGame` interface\n     * Contract which ensures that a game enforces some aspect of _waging money_.\n   * `GamblingPlayer` interface\n     * Contract which ensures that a player has some ability to _wage money_."
  },
  {
    "sha": "413f2b63fef1bf6168a336cc14b88f27eef4722b",
    "filename": "src/Casino Structure.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/Casino%20Structure.png",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/Casino%20Structure.png",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/Casino%20Structure.png?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7"
  },
  {
    "sha": "cbe321f2468d095a7acacb19ecbae1bc92b0ef3d",
    "filename": "src/Casino Structure.puml",
    "status": "added",
    "additions": 199,
    "deletions": 0,
    "changes": 199,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/Casino%20Structure.puml",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/Casino%20Structure.puml",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/Casino%20Structure.puml?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,199 @@\n+@startuml\n+'https://plantuml.com/class-diagram\n+\n+Game <|-- GamblingGame\n+Game <|-- CardGame\n+GamblingPlayer <|-- Player\n+GamblingGame <|-- Blackjack\n+GamblingGame <|-- DiceGame\n+\n+DiceGame <|-- Beetle\n+DiceGame <|-- Craps\n+CardGame <|-- Blackjack\n+CardGame <|-- GoFish\n+\n+\n+Display <|-- BeetleDisplay\n+Display <|-- CrapsDisplay\n+Display <|-- BlackjackDisplay\n+Display <|-- GoFishDisplay\n+\n+\n+'INTERFACE\n+interface Game {\n+Random\n+Boolean gameState\n+checkForWinner()\n+setPlayer()\n+}\n+\n+interface GamblingGame {\n+acceptBetFrom()\n+calculateReward()\n+calculateLoss()\n+}\n+\n+interface GamblingPlayer {\n+placeBet()\n+}\n+\n+\n+'ABSTRACT CLASS\n+abstract class CardGame{\n+Stack decksOfCards\n+ArrayList playersHand\n+ArrayList dealersHand\n+shuffleCards()\n+dealCards(Int numberOfCards)\n+skipDeal()\n+\n+}\n+\n+abstract class DiceGame {\n+rollDice(numberOfDice)\n+}\n+\n+\n+'CLASS\n+class Main{\n+\n+}\n+\n+class CasinoEngine {\n+runCasino()\n+}\n+\n+class Player {\n+String name\n+Double accountBalance\n+getName()\n+getAccountBalance()\n+setAccountBalance()\n+}\n+\n+class GoFish {\n+HashMap <Player, Hand>\n+HashMap <Player, NumberOfPairs>\n+exchangeCard()\n+getNumberOfPairs()\n+setNumberOfPairs()\n+}\n+\n+class GoFishDisplay {\n+chooseAPlayerToAsk()\n+chooseACardtoAskFor()\n+playerHasCard()\n+goFish()\n+pairMade()\n+\n+}\n+\n+class Blackjack {\n+HashMap <String cardFaceValue, Int CardPointValue>\n+gotBlackJack(int betPlaced)\n+standOrHit()\n+}\n+\n+class BlackjackDisplay {\n+dealersFirstCard()\n+bustMessage(String whoBusted)\n+dealersTotal()\n+dealerStands()\n+dealerHits()\n+chooseStandOrHit()\n+}\n+\n+class Craps {\n+Boolean isNatural()\n+Boolean isCraps()\n+Boolean isPoint()\n+analyzeComeOutRoll()\n+analyzeFollowingRolls()\n+'comeBet()\n+'dontComeBet()\n+'passBet()\n+'dontPassBet()\n+'fieldBet()\n+'bigSixOrEightBet()\n+getTypeOfBet()\n+}\n+\n+class CrapsDisplay {\n+rulesMenu()\n+optionsMenu()\n+shooterScores()\n+shooterSevenedOut()\n+push()\n+oneRollBetLoss()\n+onRollBetWin()\n+natural()\n+craps()\n+shooterRolled()\n+setTypeOfBet()\n+comeOutRoll()\n+\n+}\n+\n+class Beetle {\n+createNextImage()\n+}\n+\n+class BeetleDisplay {\n+drawBugHead()\n+drawBugBody()\n+drawBugLeg1()\n+drawBugLeg2()\n+drawBugLeg3()\n+drawBugLeg4()\n+playerBugComplete()\n+opponentBugComplete()\n+repeatRoll()\n+bodyPartValue()\n+}\n+\n+class PlayerWarehouse {\n+playerGroup <password, Player>\n+getPlayer()\n+}\n+\n+class Console {\n+Scanner input\n+PrintStream output\n+print()\n+println()\n+getStringInput()\n+getDoubleInput()\n+getLongInput()\n+getIntegerInput()\n+}\n+\n+class Display {\n+String currentDisplay\n+\n+errorMessage()\n+\n+'casino messages\n+welcomeMessage()\n+gamesMenu()\n+lowFundsWarning()\n+zeroFundsWarning()\n+\n+'game messages\n+rollResult()\n+dealResult()\n+youWin()\n+youLose()\n+doYouWantToBet()\n+\n+'new user messages\n+userId()\n+requestUserId()\n+initialDeposit()\n+\n+'returning user messages\n+welcomeBack()\n+\n+}\n+\n+\n+@enduml\n\\ No newline at end of file"
  },
  {
    "sha": "bfa7935d0be62e37a5e6bc2b703189a6eb0eaadc",
    "filename": "src/main/java/io/zipcoder/casino/Beetle.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Beetle.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Beetle.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Beetle.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,4 @@\n+package io.zipcoder.casino;\n+\n+public class Beetle {\n+}"
  },
  {
    "sha": "12e3d310ea7de1f9297b98363387def310ade938",
    "filename": "src/main/java/io/zipcoder/casino/BeetleDisplay.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/BeetleDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/BeetleDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/BeetleDisplay.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,71 @@\n+package io.zipcoder.casino;\n+\n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.util.Arrays;\n+\n+public class BeetleDisplay extends Display {\n+\n+    String[][] beetle = new String[][]{{\"\\\\\",\"0\",\"/\"},\n+            {\"⎛\",\"|\",\"⎞\"},\n+            {\"⎝\",\"|\",\"⎠\"},\n+            {\"/\",\"⏝\",\"\\\\\"}\n+    };\n+\n+    public BeetleDisplay() {\n+    }\n+\n+    public void rules() {\n+        setPrintCurrentDisplay(\"Draw the beetle before your opponent and win big!\\nThe rules are simple:\\nEach side of the die corresponds to a part of the beetle.\" +\n+                \"\\nIf you roll a number, you get to draw that part.\\nIf you roll the same number again, you do not get to add to your beetle.\" +\n+                \"\\nBetween each roll you will add to your wager.\\nThe first person to draw a beetle keeps the purse.\" +\n+                \"\\nIf both players complete their beetle on the same set of rolls the wagers are returned.\" +\n+                \"\\n\\nWhat to draw for each roll:\" +\n+                \"\\n1 - head\\n2 - body\\n3 - left front leg\\n4 - right front leg\\n5 - left back leg\\n6 - right back leg\");\n+    }\n+\n+    public void drewLeg() {\n+        setPrintCurrentDisplay(\"You added a leg to your beetle!\");\n+    }\n+\n+    public void drewBody() {\n+        setPrintCurrentDisplay(\"You drew your beetle's body!\");\n+    }\n+\n+    public void drewHead() {\n+        setPrintCurrentDisplay(\"You drew your beetle's head!\");\n+    }\n+\n+    public void yourBugIsComplete() {\n+        setPrintCurrentDisplay(\"Your beetle is complete!\");\n+    }\n+\n+    public void opponentsBugisComplete() {\n+        setPrintCurrentDisplay(\"Your opponents beetle is complete.\");\n+    }\n+\n+    public void bothBeetlesComplete() {\n+        setPrintCurrentDisplay(\"You both drew beetles. The game is a tie.\");\n+    }\n+\n+    public void repeatedRollResult() {\n+        setPrintCurrentDisplay(\"You already rolled that number.\");\n+    }\n+\n+    //Beetle Body Parts\n+    public void getBeetleComplete() {\n+        //System.out.println(Arrays.deepToString(beetle));\n+        /*for (String[] row : beetle) {\n+            System.out.println(Arrays.deepToString(row));*/\n+        for (int i = 0; i < beetle.length; i++) {\n+            for (int j = 0; j < beetle[i].length; j++) {\n+                System.out.print(beetle[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    public void getCurrentBeetle() {\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5c92b7ceb1f7d941cd7d3fdfc6f7322ac6bed594",
    "filename": "src/main/java/io/zipcoder/casino/BlackJackDisplay.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/BlackJackDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/BlackJackDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/BlackJackDisplay.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,100 @@\n+package io.zipcoder.casino;\n+\n+public class BlackJackDisplay extends Display {\n+\n+    public void rules() {\n+        setPrintCurrentDisplay(\"Your goal is to draw cards that total 21, or come closer to 21 than the dealer without going over\"+\n+\n+                \"\\nMake a bet from $1 to all-in, receive your cards\" +\n+\n+                \"\\nThe dealer will give you two blackjack cards and show one of his cards, decide if you want to double your bet\" +\n+\n+                \"\\nYou can double your bet any time before you hit OR stand and split your bet if you get two cards of the same value.\" +\n+\n+                \"\\nConsider if you want to ‘hit’\" +\n+\n+                \"\\nYou have an option to add more blackjack cards by choosing 'hit', but you lose automatically if your value of cards exceeds 21.\" +\n+\n+                \"\\nChoose 'stand' when you are ready to play your hand. learn the dealer’s hand\" +\n+\n+                \"\\nThe dealer will reveal his hidden blackjack card and must always hit if they have 16 or lower. They will stop hitting if they have 17 or more.\" +\n+\n+                \"\\nYou win when the combined value of your cards is greater than that of the dealer.\"+\n+\n+                \"\\nYou lose if you have a lower score than the dealer, or if the total of your cards exceeds 21.\");\n+\n+                //TIPS\n+                /*\"\\nThe dealer and each player start with two cards. The dealer’s first card faces up, the second faces down.\"+\n+\n+                \"\\nFace cards each count as 10, Aces count as 1 or 11, all others count at face value.\"+\n+\n+                \"\\nAn Ace with any 10, Jack, Queen, or King is a “Blackjack.”:\");*/\n+    }\n+\n+    public void dealtHand(){\n+\n+        setPrintCurrentDisplay(\"You were dealt \");\n+    }\n+\n+    public void hitOrStand(){\n+\n+        setCurrentDisplay(\"Do you want to hit or stand?\");\n+    }\n+\n+    public void dealerHit() {\n+\n+        setPrintCurrentDisplay(\"Your hand total is \");\n+    }\n+\n+    public void playerHit(){\n+\n+        setPrintCurrentDisplay(\"You hit 21!\");\n+\n+    }\n+\n+    public void dealerStand() {\n+\n+        setPrintCurrentDisplay(\"Do you want to hit or stand?\");\n+\n+    }\n+\n+    public void bust(){\n+\n+        setPrintCurrentDisplay(\"You passed 21! Bust...\");\n+    }\n+\n+    public void dealerBust(){\n+\n+        setPrintCurrentDisplay(\"The dealer busted.\");\n+    }\n+\n+    public void wonGame(){\n+\n+        setPrintCurrentDisplay(\"You win\");\n+\n+    }\n+\n+    public void lostGame(){\n+\n+        setPrintCurrentDisplay(\"You lost\");\n+    }\n+\n+    public void blackJack(){\n+\n+        setPrintCurrentDisplay(\"You got Black Jack!\");\n+\n+    }\n+\n+    public void splitPairs() {\n+\n+        setPrintCurrentDisplay(\"Would you like to split pairs?\");\n+\n+    }\n+\n+    public void doubleDown() {\n+\n+        setPrintCurrentDisplay(\"\");\n+\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6130eb046788aa7eafb97a56df9d1c75dc5670fe",
    "filename": "src/main/java/io/zipcoder/casino/CardGame.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/CardGame.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/CardGame.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/CardGame.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,56 @@\n+package io.zipcoder.casino;\n+\n+import java.util.ArrayList;\n+import java.util.Random;\n+import java.util.Stack;\n+\n+public abstract class CardGame implements GamblingGame {\n+\n+    Stack deckOfCards;\n+    ArrayList<String> playersHand;\n+    ArrayList<String> dealersHand;\n+    ArrayList<String> deck;\n+\n+\n+    public CardGame() {\n+        this.deck = new ArrayList<String>(52);\n+    }\n+\n+    public void createNewDeck() {\n+        String[] suits = new String[]{\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"};\n+        // Set zeroth element to null to indicate an unused element (only valid ranks from 1-13)\n+        String[] ranks = new String[]{null, \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"};\n+\n+        for (int suit = 0; suit <=3; suit++) {\n+            for (int rank = 1; rank <= 13; rank++) {\n+                this.deck.add(ranks[rank] + \" of \" + suits[suit]);\n+            }\n+        }\n+    }\n+\n+    public void shuffleCards() {\n+        ArrayList<String> temp = new ArrayList<String>();\n+        while(!this.deck.isEmpty()) {\n+            int randCard = (int) (Math.random() * deck.size());\n+            temp.add(deck.get(randCard));\n+        }\n+        this.deck = temp;\n+    }\n+\n+    public void dealCards(int numberOfCards) {\n+        int i = 0;\n+        while (i < numberOfCards * 2) {\n+            if (i < numberOfCards) {\n+                this.playersHand.add(this.deck.get(i));\n+            } else if (i >= numberOfCards) {\n+                this.dealersHand.add(this.deck.get(i));\n+            }\n+            this.deck.remove(i);\n+        }\n+    }\n+\n+    public void skipDeal() {\n+        // ???\n+    }\n+    \n+}"
  },
  {
    "sha": "bbb8982a202af8b738476e97eecb90f25531f72e",
    "filename": "src/main/java/io/zipcoder/casino/Casino.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Casino.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Casino.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Casino.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -1,8 +1,24 @@\n package io.zipcoder.casino;\n+<<<<<<< HEAD\n \n+<<<<<<< HEAD\n+=======\n \n+=======\n+>>>>>>> 2d9a6333640d23c5de20f3343a85c18403c50a0c\n+import io.zipcoder.casino.utilities.Console;\n+import java.util.Scanner;\n+\n+<<<<<<< HEAD\n+>>>>>>> 17106eff69db6462352572b1842f4e0083c113dc\n+=======\n+\n+>>>>>>> 2d9a6333640d23c5de20f3343a85c18403c50a0c\n public class Casino {\n     public static void main(String[] args) {\n         // write your tests before you start\n+        Display display = new Display();\n+        System.out.println(display.helloMessage());\n+        display.getUserInput(\"Welcome whats your name?\");\n     }\n }"
  },
  {
    "sha": "96bbed9c142cf3bfb361f5b6bab8a32d12376197",
    "filename": "src/main/java/io/zipcoder/casino/CrapsDisplay.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/CrapsDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/CrapsDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/CrapsDisplay.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,76 @@\n+package io.zipcoder.casino;\n+\n+public class CrapsDisplay extends Display {\n+\n+    public void printRulesMenu1(){\n+        setPrintCurrentDisplay(\"Welcome to Craps!\\nIn Craps, the 'shooter' rolls two dice repeatedly.\\nTheir first roll, the 'come out roll,' has three potential outcomes.\\nA 7 or 11 total is a pass. A 2, 3, or 12 is craps. Anything else is a point.\\nYou can bet 'pass' (the shooter rolls a pass) or 'don't pass' (the shooter rolls craps) for 1 to 1 payout.\\nThe shooter keeps rolling until a point is set. On a point outcome, the number rolled is saved.\\nNow, the shooter can 'come' by hitting the point outcome again, or 'seven out,' ending the round by rolling a 7.\\nYou can bet 'come' (shooter hits point before sevening out) or 'don't come' (vice versa) for 1 to 1 payout.\");\n+    }\n+\n+    public void printRulesMenuMid(){\n+        setPrintCurrentDisplay(\"Type rules2 for more technical rules.\");\n+    }\n+\n+    public void printRulesMenu2(){\n+        setPrintCurrentDisplay(\"There are a number of extra bets you can make, called propositions.\\nOne-roll propositions are a bet that the next roll will land on a specific number, with variable payouts.\\n6 or 8- 9 to 1 payout. 4 or 10- 7 to 1. 2 or 12- 30 to 1. 3 or 11- 15 to 1. Craps- 7 to 1. 7- 4 to 1.\\nField bets are the final one-roll bet. Rolling 3, 4, 9, 10, or 11 pays 1 to 1. Rolling 2 or 12 pays 2 to 1.\\nPlace bets can be performed once the point is known. You're betting that a specific different point option will be rolled- this has 1 to 1 payout.\\nThat's every bet in Craps! Have fun!\");\n+    }\n+\n+    public void printOptionsMenu1(){\n+        setPrintCurrentDisplay(\"You can make a pass bet, a don't pass bet, or a proposition.\");\n+    }\n+\n+    public void printOptionsMenu2(){\n+        setPrintCurrentDisplay(\"You can make a come bet, a don't come bet, or a proposition.\");\n+    }\n+\n+    public void printShooterScores(){\n+        setPrintCurrentDisplay(\"The shooter got the point!\");\n+    }\n+\n+    public void printShooterSevenedOut(){\n+        setPrintCurrentDisplay(\"The shooter sevened out...\");\n+    }\n+\n+    public void printPush(){\n+        setPrintCurrentDisplay(\"Your bet is a push.\");\n+    }\n+\n+    public void printOneRolLBetLoss(){\n+        setPrintCurrentDisplay(\"Your one-roll proposition failed...\");\n+    }\n+\n+    public void printOneRollBetWin(){\n+        setPrintCurrentDisplay(\"You won your one-roll proposition!\");\n+    }\n+\n+    public void printNatural(){\n+        setPrintCurrentDisplay(\"It's a natural!\");\n+    }\n+\n+    public void printCraps(){\n+        setPrintCurrentDisplay(\"It's craps!\");\n+    }\n+\n+    public void printShooterRolled(){\n+        setPrintCurrentDisplay(\"The shooter rolled a \" + 5);\n+    }\n+\n+    public void printSetTypeOfBet(){\n+        setPrintCurrentDisplay(\"What kind of bet do you want to make? You can also type 'options' or 'help'.\");\n+    }\n+\n+    public void printComeOutRoll(){\n+        setPrintCurrentDisplay(\"Here's the come out roll...\");\n+    }\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "ba4e7068837305e69407c35a701cad9267cbd353",
    "filename": "src/main/java/io/zipcoder/casino/DiceGame.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/DiceGame.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/DiceGame.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/DiceGame.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,19 @@\n+package io.zipcoder.casino;\n+\n+import java.util.Random;\n+\n+abstract class DiceGame implements GamblingGame {\n+\n+\n+    public Integer diceRollSum(int i) {\n+        Random random = new Random();\n+        Integer thisToss = 0;\n+\n+        while (i >= 1) {\n+            int randomGen = (random.nextInt(6) + 1);\n+            thisToss += randomGen;\n+            i--;\n+        }\n+        return thisToss;\n+    }\n+}"
  },
  {
    "sha": "47da2fece3726ac8ac0b568a065b80ff78eac15d",
    "filename": "src/main/java/io/zipcoder/casino/Display.java",
    "status": "added",
    "additions": 184,
    "deletions": 0,
    "changes": 184,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Display.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Display.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Display.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,184 @@\n+package io.zipcoder.casino;\n+<<<<<<< HEAD\n+\n+=======\n+>>>>>>> 2d9a6333640d23c5de20f3343a85c18403c50a0c\n+import io.zipcoder.casino.utilities.Console;\n+\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+\n+import java.util.Scanner;\n+\n+public class Display {\n+\n+    String currentDisplay;\n+\n+    private Scanner s;\n+    private InputStream in;\n+    private PrintStream out;\n+\n+    private Console c;\n+\n+    public Display(){\n+\n+        // INPUT/OUTPUT\n+        this.in = System.in;\n+        this.out = System.out;\n+        this.c = new Console(in, out);\n+\n+        this.currentDisplay = \"\";\n+    }\n+\n+    // UPDATE/PRINT CURRENT DISPLAY\n+    public void setCurrentDisplay(String newDisplay){\n+        this.currentDisplay = newDisplay;\n+    }\n+\n+    public void printCurrentDisplay(){\n+        System.out.println(currentDisplay);\n+    }\n+\n+    public void setPrintCurrentDisplay(String newDisplay){\n+        this.setCurrentDisplay(newDisplay);\n+        this.printCurrentDisplay();\n+    }\n+\n+\n+    // WELCOME MESSAGING\n+    public void printWelcomeMessage() {\n+        this.setPrintCurrentDisplay(\n+            \"'########:'####:'########::::::'######:::'#######::'########::'########::::\\n\"+\n+            \"..... ##::. ##:: ##.... ##::::'##... ##:'##.... ##: ##.... ##: ##.....:::::\\n\"+\n+            \":::: ##:::: ##:: ##:::: ##:::: ##:::..:: ##:::: ##: ##:::: ##: ##::::::::::\\n\"+\n+            \"::: ##::::: ##:: ########::::: ##::::::: ##:::: ##: ##:::: ##: ######::::::\\n\"+\n+            \":: ##:::::: ##:: ##.....:::::: ##::::::: ##:::: ##: ##:::: ##: ##...:::::::\\n\"+\n+            \": ##::::::: ##:: ##::::::::::: ##::: ##: ##:::: ##: ##:::: ##: ##::::::::::\\n\"+\n+            \" ########:'####: ##:::::::::::. ######::. #######:: ########:: ########::::\\n\"+\n+            \"........::....::..:::::::::::::......::::.......:::........:::........:::::\\n\"+\n+            \":'######:::::'###:::::'######::'####:'##::: ##::'#######::\\n\"+\n+            \"'##... ##:::'## ##:::'##... ##:. ##:: ###:: ##:'##.... ##:\\n\"+\n+            \" ##:::..:::'##:. ##:: ##:::..::: ##:: ####: ##: ##:::: ##:\\n\"+\n+            \" ##:::::::'##:::. ##:. ######::: ##:: ## ## ##: ##:::: ##:\\n\"+\n+            \" ##::::::: #########::..... ##:: ##:: ##. ####: ##:::: ##:\\n\"+\n+            \" ##::: ##: ##.... ##:'##::: ##:: ##:: ##:. ###: ##:::: ##:\\n\"+\n+            \". ######:: ##:::: ##:. ######::'####: ##::. ##:. #######::\\n\"+\n+            \":......:::..:::::..:::......:::....::..::::..:::.......:::\\n\\n\"+\n+            \"WELCOME TO ZIP CODE CASINO, LOCATED IN WILMINGTON, DE!\"\n+        );\n+    }\n+\n+    public void printWelcomeBackMessage(String name, int getAccountBalance) {\n+        this.setPrintCurrentDisplay(\n+            \"Welcome back \" + name + \"!\\n\"+\n+            \"Your current account balance is \" + getAccountBalance + \".\"\n+        );\n+    }\n+\n+\n+    // MENUS\n+    public void printLoginMenu() {\n+        this.setPrintCurrentDisplay(\n+            \"What would you like to do?\\n\" +\n+                \"1.Login\\n\" +\n+                \"2.Create New Account\"\n+        );\n+    }\n+\n+    public void printGamesMenu() {\n+        this.setPrintCurrentDisplay(\n+            \"Pick a Game to Play:\\n\"+\n+            \"   1. BlackJack\\n\" +\n+            \"   2. Craps\\n\" +\n+            \"   3. Beetle\\n\" +\n+            \"   4. GoFish\\n\"\n+        );\n+    }\n+\n+    // ERROR MESSAGING\n+    public void printErrorMessage() {\n+        this.setPrintCurrentDisplay(\"Invalid Input!\");\n+    }\n+\n+\n+    // FUNDS MESSAGING\n+    public void printAccountBalance(double accountBalance) {\n+        this.setPrintCurrentDisplay(\n+           \"Account Balance: \" + accountBalance\n+        );\n+    }\n+\n+    public void printLowFundsWarning(double accountBalance){\n+        this.setPrintCurrentDisplay(\n+            \"WARNING: YOUR FUNDS ARE GETTING LOW!\\n\"+\n+            \"Please consider making a deposit.\\n\"\n+        );\n+        this.printAccountBalance(accountBalance);\n+\n+    }\n+\n+    public void printZeroFundsWarning() {\n+        this.setPrintCurrentDisplay(\n+            \"WARNING: YOUR ACCOUNT BALANCE HAS REACHED $0.00.\\n\"+\n+            \"PLEASE MAKE A DEPOSIT TO CONTINUE PLAYING.\"\n+        );\n+    }\n+\n+    // GENERIC GAME RESULT MESSAGING\n+    public void printRollResult(Integer[] diceResults) {\n+        String formattedRollResults = \"\";\n+        for(int i = 0; i < diceResults.length; i++) {\n+            formattedRollResults += \"Dice \" + (i+1) + \": \" + diceResults[i] + \"\\n\";\n+        }\n+\n+        this.setPrintCurrentDisplay(\n+            formattedRollResults\n+        );\n+    }\n+\n+    public void printDealResult(ArrayList dealResults) {\n+        String formattedDealResults = \"\";\n+        for(int i = 0; i < dealResults.size(); i++) {\n+            formattedDealResults += \"Card \" + (i+1) + \": \" + dealResults.get(i) + \"\\n\";\n+        }\n+\n+        this.setPrintCurrentDisplay(\n+            formattedDealResults\n+        );\n+    }\n+\n+    // USER SET-UP MESSAGING\n+    public void printUserId(String userName){\n+        this.setPrintCurrentDisplay(\n+            \"UserId: \" + userName\n+        );\n+    }\n+\n+    public void printRequestUserId() {\n+        this.setPrintCurrentDisplay(\n+            \"Please enter username:\"\n+        );\n+    }\n+\n+    public void printRequestPassword() {\n+        this.setPrintCurrentDisplay(\n+            \"Please enter your password:\"\n+        );\n+    }\n+\n+    public void printRequestInitialDeposit(){\n+        this.setPrintCurrentDisplay(\n+            \"Please enter deposit amount:\"\n+        );\n+    }\n+\n+    // GENERIC BETTING MESSAGES\n+    public void printRequestBetAmount() {\n+        this.setPrintCurrentDisplay(\n+            \"How much money would you like to bet?\"\n+        );\n+    }\n+\n+\n+}"
  },
  {
    "sha": "1ffe446eccef91ac085cd7bfa0e738431a84fa7b",
    "filename": "src/main/java/io/zipcoder/casino/GamblingGame.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/GamblingGame.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/GamblingGame.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GamblingGame.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,20 @@\n+package io.zipcoder.casino;\n+\n+public interface GamblingGame {\n+<<<<<<< HEAD\n+\n+=======\n+>>>>>>> 2d9a6333640d23c5de20f3343a85c18403c50a0c\n+\n+    public String startGame();\n+\n+    public String acceptBetFrom();\n+\n+    public String calculateReward();\n+\n+    public String calculateLoss();\n+\n+    public String endGame();\n+\n+\n+}"
  },
  {
    "sha": "19678e5581bebe4eb4d4ea122f7aa1b73d06e815",
    "filename": "src/main/java/io/zipcoder/casino/GamblingPlayer.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/GamblingPlayer.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/GamblingPlayer.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GamblingPlayer.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,11 @@\n+package io.zipcoder.casino;\n+\n+public interface GamblingPlayer {\n+\n+public String placeBet();\n+\n+public String getName();\n+\n+public Double accountBalance();\n+\n+}"
  },
  {
    "sha": "65076adf37d93eda094703efdcec61880d2b538b",
    "filename": "src/main/java/io/zipcoder/casino/Game.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Game.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Game.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Game.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,14 @@\n+package io.zipcoder.casino;\n+\n+import java.util.Random;\n+\n+public interface Game {\n+    Random random =new Random();\n+\n+    Integer numberOfPlayers = 0;\n+    Boolean GameState = false;\n+\n+    public void checkForWinner();\n+\n+    public void setPlayer();\n+}"
  },
  {
    "sha": "7b320c2ea2dbc69e51810a8d6ccbedd0bf2e8620",
    "filename": "src/main/java/io/zipcoder/casino/GoFishDisplay.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/GoFishDisplay.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/GoFishDisplay.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/GoFishDisplay.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,37 @@\n+package io.zipcoder.casino;\n+\n+public class GoFishDisplay extends Display{\n+\n+    public void goFishRules(){\n+        setPrintCurrentDisplay(\"Two players will be dealt 5 cards each.\\nThe object of the game is to have the most pairs when the deck is empty.\" +\n+                \"\\nA player creates pairs by asking the other player if they have a specific card in their hand.\" +\n+                \"\\nYou must be holding the card the card you request.\" +\n+                \"\\n\");\n+    }\n+\n+    public void goFish(){\n+        setPrintCurrentDisplay(\"GO FISH!\");\n+    }\n+\n+    public void cardFound(){\n+        setPrintCurrentDisplay(\"That card is in their hand.\");\n+    }\n+\n+    public void cardNotFound(){\n+        setPrintCurrentDisplay(\"Nope. They are not holding that card.\");\n+    }\n+\n+    //only necessary for multiple player games\n+    public void whoWillYouAsk(){\n+        setPrintCurrentDisplay(\"Who will you ask?\");\n+    }\n+\n+    public void cardYouWillAskFor(){setPrintCurrentDisplay(\"What card will you ask for?\");}\n+\n+    public void opponentAskedFor(){setPrintCurrentDisplay(\"You opponent asked for a\");}\n+\n+    public void createdAPair() {setPrintCurrentDisplay(\"Your opponent has a \" +  \". A pair of \" +  \"'s have been added to your score.\");}\n+\n+\n+\n+}"
  },
  {
    "sha": "f747690dfaf7d690137e077ab9229e928e6093ff",
    "filename": "src/main/java/io/zipcoder/casino/Main.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Main.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Main.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Main.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,12 @@\n+package io.zipcoder.casino;\n+\n+public class Main {\n+\n+    public static void main(String args[]) {\n+        Display d = new Display();\n+        BeetleDisplay bd = new BeetleDisplay();\n+        d.printWelcomeMessage();\n+        bd.getBeetleComplete();\n+\n+    }\n+}"
  },
  {
    "sha": "7dd1bfa120cd3502b7750f6bbd5c4455ff95dd3d",
    "filename": "src/main/java/io/zipcoder/casino/Player.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Player.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/Player.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/Player.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,34 @@\n+package io.zipcoder.casino;\n+\n+public class Player{\n+\n+    String name;\n+    Double wallet;\n+    Double currentBet = 0.0;\n+\n+    public Player(String name, Double initialDeposit) {\n+        this.name = name;\n+        this.wallet = initialDeposit;\n+    }\n+\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+\n+    public Double getWallet() {\n+        return wallet;\n+    }\n+\n+    public void setWallet(Double deposit) {\n+        this.wallet = wallet + deposit;\n+    }\n+\n+\n+    public Double makeBet(Double betAmount) {\n+        currentBet = betAmount;\n+        wallet = wallet - currentBet;\n+        return currentBet;\n+    }\n+}"
  },
  {
    "sha": "7975268b45c46e4e52b2a4f6f105557467b2a58f",
    "filename": "src/main/java/io/zipcoder/casino/PlayerWarehouse.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/PlayerWarehouse.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/PlayerWarehouse.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/PlayerWarehouse.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,38 @@\n+package io.zipcoder.casino;\n+\n+import java.util.HashMap;\n+\n+public class PlayerWarehouse {\n+\n+    private HashMap<String, Player> playerGroup;\n+    private HashMap<String, String> userNamePasswordMap;\n+\n+    public PlayerWarehouse() {\n+        this.playerGroup = new HashMap<String, Player>();\n+        this.userNamePasswordMap = new HashMap<String, String>();\n+    }\n+\n+    public Player getPlayer(String userId) {\n+        return this.playerGroup.get(userId);\n+    }\n+\n+    public boolean validateUniquePlayer(String userId) {\n+        if (userNamePasswordMap.containsKey(userId)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public void addNewPlayer(String userId, Player player, String password) {\n+        playerGroup.put(userId, player);\n+        userNamePasswordMap.put(userId, password);\n+    }\n+\n+    public boolean validateLoginCredentials(String userId, String password) {\n+        if (userNamePasswordMap.containsKey(userId) && userNamePasswordMap.get(userId) == password) {\n+            return true;\n+        }\n+    return false;\n+    }\n+\n+}"
  },
  {
    "sha": "ce2e5cf78dbdef9a17f9d68cc90126b8949192b4",
    "filename": "src/main/java/io/zipcoder/casino/utilities/Console.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/utilities/Console.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/main/java/io/zipcoder/casino/utilities/Console.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/main/java/io/zipcoder/casino/utilities/Console.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -55,6 +55,7 @@ public Long getLongInput(String prompt, Object... args) {\n     }\n \n     public Integer getIntegerInput(String prompt, Object... args) {\n+\n         return getLongInput(prompt, args).intValue();\n     }\n }"
  },
  {
    "sha": "627be16f22baeeee474d8be174aea7a6f72eb699",
    "filename": "src/test/java/io/zipcoder/casino/CasinoTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/test/java/io/zipcoder/casino/CasinoTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/test/java/io/zipcoder/casino/CasinoTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/CasinoTest.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -2,4 +2,7 @@\n \n \n public class CasinoTest {\n+\n+    // git push test\n+\n }"
  },
  {
    "sha": "a83559138ae07c0b15a4b8553504e7d3b775f7cf",
    "filename": "src/test/java/io/zipcoder/casino/DisplayTest.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/test/java/io/zipcoder/casino/DisplayTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/test/java/io/zipcoder/casino/DisplayTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/DisplayTest.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,13 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.Test;\n+\n+public class DisplayTest {\n+\n+    @Test\n+    public void testPrintStartScreen() {\n+        Display disp = new Display();\n+        disp.printWelcomeMessage();\n+    }\n+\n+}"
  },
  {
    "sha": "bb9557db32eb2319ebecbc05289ac0dbc3437066",
    "filename": "src/test/java/io/zipcoder/casino/PlayerTest.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/Zipcoder/Maven.Casino/blob/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/test/java/io/zipcoder/casino/PlayerTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.Casino/raw/e3f50ceb71da4536ee64687c080f4516ddfc57f7/src/test/java/io/zipcoder/casino/PlayerTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.Casino/contents/src/test/java/io/zipcoder/casino/PlayerTest.java?ref=e3f50ceb71da4536ee64687c080f4516ddfc57f7",
    "patch": "@@ -0,0 +1,74 @@\n+package io.zipcoder.casino;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PlayerTest {\n+\n+    @Test\n+    public void PlayerConstructorTest() {\n+        //Given\n+        Player player1 = new Player(\"player1\", 100.00);\n+        String actual = player1.getName();\n+\n+        //When\n+        String expected = \"player1\";\n+\n+        //Assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void PlayerGetAccountBalanceTest() {\n+        //Given\n+        Player player2 = new Player(\"player1\", 500.00);\n+        Double actual = player2.getWallet();\n+        //When\n+        Double expected = 500.00;\n+\n+        //Assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+\n+    @Test\n+    public void PlayerSetAccountBalanceTest() {\n+        //Given\n+        Player player3 = new Player(\"player1\", 500.00);\n+        player3.setWallet(100.00);\n+        Double actual = player3.getWallet();\n+        //When\n+        Double expected = 600.00;\n+\n+        //Assert\n+        Assert.assertEquals(expected,actual);\n+    }\n+    @Test\n+    public void PlayerMakeBetTest() {\n+        //given\n+        Player player4 = new Player(\"player1\", 50.00);\n+        Double expected = player4.makeBet(5.0);\n+\n+        //when\n+        Double actual = 5.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+    @Test\n+    public void PlayerMakeBetTest2() {\n+        //given\n+        Player player5 = new Player(\"player1\", 50.00);\n+        player5.makeBet(5.0);\n+        Double expected = player5.getWallet();\n+\n+        //when\n+        Double actual = 45.0;\n+        //assert\n+        Assert.assertEquals(expected,actual);\n+\n+    }\n+\n+}"
  }
]
