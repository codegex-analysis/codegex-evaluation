[
  {
    "sha": "2414814a88c6fd9bc9bb468d27dc83f2f885dd6f",
    "filename": "README.md",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/README.md",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/README.md",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/README.md?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -1,20 +1,20 @@\n-# project-2-ATM\n-Week 2 project: ATM Simulator\n+# project-2-Menu\n+Week 2 project: Menu Simulator\n \n-## ATM Requirements\n+## Menu Requirements\n \n Every feature must have corresponding unit tests\n Tests should demonstrate proper behavior, and proper handling of misuse (eg. attempts to deposit/transfer/withdraw negative amounts\n \n-- User interface: CLI (Command line interface) Only\n+- UserAccount interface: CLI (Command line interface) Only\n   - Direct Input\n   - Numbered options (instead of on-screen buttons)\n   - ASCII art welcome but not required\n - Must support account types:\n   - Checking\n   - Savings\n   - Investment\n-- Account Actions\n+- BankAccount Actions\n   - Withdraw from acct\n   - Deposit to acct\n   - Transfer across accounts (self)"
  },
  {
    "sha": "83225ceaad168842f1f3f30b50e4317adbf4451d",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 78,
    "deletions": 1,
    "changes": 79,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/pom.xml",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/pom.xml",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/pom.xml?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -5,8 +5,85 @@\n     <modelVersion>4.0.0</modelVersion>\n \n     <groupId>io.zipcoder</groupId>\n-    <artifactId>project-2-atm</artifactId>\n+    <artifactId>project-2-menu</artifactId>\n     <version>1.0-SNAPSHOT</version>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>11</source>\n+                    <target>11</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <version>RELEASE</version>\n+            <scope>test</scope>\n+        </dependency>\n+<<<<<<< HEAD\n+=======\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>RELEASE</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>RELEASE</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.13.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+>>>>>>> af305ec406a1dd384cd44f62166ca43f3c4e159f\n+    </dependencies>\n \n \n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "ef1eec7c21d4fb5b6a578896a180aedfb6e792b9",
    "filename": "src/main/java/AccountTrans.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/AccountTrans.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/AccountTrans.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/AccountTrans.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,75 @@\n+\n+import java.text.NumberFormat;\n+\n+public class AccountTrans {\n+\n+    private NumberFormat formatter;\n+    private Console c;\n+\n+    public AccountTrans() {\n+        this.c = new Console();\n+        this.formatter = NumberFormat.getCurrencyInstance();\n+    }\n+\n+    public void depositMoney(BankAccount chosenBankAccount) {\n+        // Keeps track of which account to deposit money to - checking or saving\n+            System.out.println(\"\\nYour current \" + chosenBankAccount.getAccountType() + \" balance is: \" + formatter.format(chosenBankAccount.getBalance()) + \"\\n\");\n+            System.out.println(\"How much money would you like to deposit?\");\n+\n+            Double deposit;\n+            deposit = c.getDoubleInput();\n+            if (deposit < 0) {\n+                System.out.println(\"Please enter amount greater than ZERO\");\n+            } else {\n+                chosenBankAccount.deposit(deposit);\n+                System.out.println(\"\\nYour \" + chosenBankAccount.getAccountType() + \" balance is now: \" + formatter.format(chosenBankAccount.getBalance()) + \"\\n\");\n+                chosenBankAccount.printTxn(chosenBankAccount.getAccountType() + \" Deposit \", deposit, chosenBankAccount.getBalance());\n+                System.out.println();\n+            }\n+    }\n+\n+    public void withdrawMoney(BankAccount chosenBankAccount) {\n+\n+        System.out.println(\"\\nYour current \" + chosenBankAccount.getAccountType() + \" balance is: \" + formatter.format(chosenBankAccount.getBalance()) + \"\\n\");\n+        System.out.println(\"How much money would you like to withdraw?\");\n+\n+        Double withdraw;\n+        withdraw = c.getDoubleInput();\n+        if (withdraw > chosenBankAccount.getBalance()) {\n+            System.out.println(\"INSUFFICIENT BALANCE! Your request will not be processed. \\n\");\n+        } else {\n+            chosenBankAccount.withdraw(withdraw);\n+            System.out.println(\"\\nYour \" + chosenBankAccount.getAccountType() + \" balance is now: \" + formatter.format(chosenBankAccount.getBalance()) + \"\\n\");\n+            chosenBankAccount.printTxn(chosenBankAccount.getAccountType() + \" withdraw \", withdraw, chosenBankAccount.getBalance() );\n+            System.out.println();\n+        }\n+    }\n+\n+    public void transferMoney(BankAccount chosenTransferFromAccount, BankAccount chosenTransferToAccount) {\n+        System.out.println(\"\\nYour current \" + chosenTransferFromAccount.getAccountType() + \" balance is: \" + formatter.format(chosenTransferFromAccount.getBalance()) + \"\\n\");\n+        System.out.print(\"How much money do you wish to transfer from \" + chosenTransferFromAccount.getAccountType() + \" to \" + chosenTransferToAccount.getAccountType() + \"?: \");\n+\n+        Double tranAmount;\n+        tranAmount = c.getDoubleInput();\n+        if (tranAmount > chosenTransferFromAccount.getBalance()) {\n+            System.out.println(\"INSUFFICIENT BALANCE! \" + \"Please enter a new amount.\");\n+        } else {\n+            chosenTransferFromAccount.withdraw(tranAmount);\n+            chosenTransferToAccount.deposit(tranAmount);\n+\n+            System.out.println(\"\\nYou successfully transferred \" + formatter.format(tranAmount) + \" from \" + chosenTransferFromAccount.getAccountType() + \" to \" + chosenTransferToAccount.getAccountType());\n+            System.out.println(\"\\n\" + chosenTransferFromAccount.getAccountType() + \" Balance: \" + formatter.format(chosenTransferFromAccount.getBalance()));\n+            System.out.println(chosenTransferToAccount.getAccountType() + \" Balance: \" + formatter.format(chosenTransferToAccount.getBalance()) + \"\\n\");\n+        }\n+    }\n+\n+    public void checkBalance (UserAccount currentUser) {\n+        System.out.println(\"\\nChecking Balance: \" + formatter.format(currentUser.getCheckingAccount().getBalance()));\n+        System.out.println(\"Savings Balance: \" + formatter.format(currentUser.getSavingsAccount().getBalance()));\n+        System.out.println(\"Investment Balance: \" + formatter.format(currentUser.getInvestmentAccount().getBalance()) + \"\\n\");\n+    }\n+\n+\n+}\n+\n+"
  },
  {
    "sha": "5a4585fe97c34ab92423048a05e357938bd37c6c",
    "filename": "src/main/java/BankAccount.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/BankAccount.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/BankAccount.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/BankAccount.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,67 @@\n+import java.text.NumberFormat;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+\n+\n+public class BankAccount {\n+\n+\n+    public String accountType;\n+    private double currentBalance;\n+    NumberFormat formatter = NumberFormat.getCurrencyInstance();\n+\n+\n+    public BankAccount(String chosenAccountType) {\n+        this.accountType = chosenAccountType;\n+        this.currentBalance = 0;\n+    }\n+\n+\n+    void setType(String accType) {\n+        accountType = accType;\n+    }\n+\n+    void setBalance(Double accBal) {\n+        currentBalance = accBal;\n+    }\n+\n+    public String getAccountType() {\n+        return this.accountType;\n+    }\n+\n+    Double getBalance() {\n+        return currentBalance;\n+    }\n+\n+    void deposit(Double dep) {\n+        currentBalance = currentBalance +  dep;\n+    }\n+\n+    void withdraw(Double wit) {\n+        currentBalance = currentBalance - wit;\n+    }\n+\n+    void printTxn(String txnType, Double amt, Double balance){\n+\n+\n+        System.out.println(\"|---------------------------------------------------------\");\n+        System.out.println(\"| BANK OF ZIP CODE WILMINGTON DE                          \");\n+        System.out.println(\"|---------------------------------------------------------\");\n+        System.out.println(\"|\" +    dateTime()  + \"                                   \");\n+        System.out.println(\"|---------------------------------------------------------\");\n+        System.out.println(\"|        Transaction Receipt                              \");\n+        System.out.println(\"|\" + txnType + \"                                          \");\n+        System.out.println(\"|\" +  amt + \"\" + \"                                        \");\n+        System.out.println(\"|Remaining Balance: \" + balance + \"                       \");\n+        System.out.println(\"|---------------------------------------------------------\");\n+\n+    }\n+    String dateTime(){\n+\n+        DateTimeFormatter timeFormat = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\n+        LocalDateTime now = LocalDateTime.now();\n+\n+        return timeFormat.format(now);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6b437a41242000378eb3d731f541e88f69cf62d0",
    "filename": "src/main/java/Console.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/Console.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/Console.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/Console.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,35 @@\n+import java.util.Scanner;\n+\n+public class Console {\n+\n+    public String getStringInput() {\n+        Scanner scanner = new Scanner(System.in);\n+        String userInput = scanner.nextLine();\n+        if (userInput.isEmpty()) {\n+            System.out.println(\"Invalid Input!\");\n+            userInput = scanner.nextLine();\n+        }\n+        return userInput;\n+    }\n+\n+    public Integer getIntegerInput() {\n+        Scanner scanner = new Scanner(System.in);\n+        while(!scanner.hasNextInt()) {\n+            System.out.println(\"Invalid Input!\");\n+            scanner.next();\n+        }\n+        int userInput = scanner.nextInt();\n+        return userInput;\n+    }\n+\n+    public Double getDoubleInput() {\n+        Scanner scanner = new Scanner(System.in);\n+        while(!scanner.hasNextDouble()) {\n+            System.out.println(\"Invalid Input!\");\n+            scanner.next();\n+        }\n+        double userInput = scanner.nextDouble();\n+        return userInput;\n+    }\n+\n+}"
  },
  {
    "sha": "2eee3e999684e6107a24a13583c55bc52719cbe8",
    "filename": "src/main/java/Main.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/Main.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/Main.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/Main.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -4,6 +4,7 @@\n public class Main {\n \n     public static void main(String[] args){\n-        \n+        Menu menu = new Menu();\n+        menu.printMenus();\n     }\n }"
  },
  {
    "sha": "00d7572c2ed32513d81f6383d6ebc48c6da21e57",
    "filename": "src/main/java/Menu.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/Menu.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/Menu.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/Menu.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,140 @@\n+public class Menu {\n+\n+    private UserAccount currentUser;\n+    private boolean loggedIn;\n+    private Console c;\n+    private UserManagement ls;\n+    private AccountTrans ae;\n+\n+    public Menu() {\n+        this.c = new Console();\n+        this.ls = new UserManagement();\n+        this.ae = new AccountTrans();\n+        this.loggedIn = false;\n+        this.currentUser = null;\n+    }\n+\n+    public void printMenus() {\n+\n+        while (true) { // If user not logged in, show welcome menu\n+            if (this.loggedIn == false) {\n+                this.printWelcomeMenu();\n+\n+            } else { // If user is logged in, show User menu\n+                this.printUserMenu();\n+            }\n+        }\n+\n+    }\n+\n+    public void printWelcomeMenu() {\n+        System.out.println(\"WELCOME TO THE BANK OF ZIP CODE\");\n+        System.out.println(\"LOCATED IN WILMINGTON, DELAWARE\");\n+        System.out.println(\"PRESS 1 TO LOGIN\");\n+        System.out.println(\"PRESS 2 IF YOU ARE A NEW USER\");\n+\n+        Integer userInput;\n+        userInput = c.getIntegerInput();\n+\n+        switch (userInput) {\n+            case 1: // LOGIN\n+                this.currentUser = ls.validateLoginCredentials();\n+                if (this.currentUser != null) {\n+                    this.loggedIn = true;\n+                }\n+                break;\n+            case 2: // CREATE NEW ACCOUNT\n+                this.currentUser = ls.createNewUserAccount();\n+                if (this.currentUser != null) {\n+                    this.loggedIn = true;\n+                }\n+                break;\n+            default:\n+                System.out.println(\"Invalid input. Please select either 1 or 2.\");\n+        }\n+    }\n+\n+    public void printUserMenu() {\n+        System.out.println(\"WELCOME \" + this.currentUser.getUsername());\n+        System.out.println(\"USER MENU\");\n+        System.out.println(\"0 - LogOut\");\n+        System.out.println(\"1 - Deposit\");\n+        System.out.println(\"2 - Withdraw\");\n+        System.out.println(\"3 - Transfer Funds\");\n+        System.out.println(\"4 - Check Balance\");\n+        System.out.println(\"5 - Close Account\");\n+\n+        Integer userInput;\n+        userInput = c.getIntegerInput();\n+\n+        switch (userInput) {\n+            case 0:\n+                this.loggedIn = false;\n+                this.currentUser = null;\n+                this.printWelcomeMenu();\n+                break;\n+            case 1: // Deposit\n+                this.ae.depositMoney(this.chooseAccount());\n+                break;\n+            case 2: // Withdraw\n+                this.ae.withdrawMoney(this.chooseAccount());\n+                break;\n+            case 3: // Transfer between accounts\n+                System.out.println(\"TRANSFER FROM ACCOUNT:\");\n+                BankAccount transferFrom = chooseAccount();\n+                System.out.println(\"TRANSFER TO ACCOUNT:\");\n+                BankAccount transferTo = chooseAccount();\n+                this.ae.transferMoney(transferFrom, transferTo);\n+                break;\n+            case 4: // Check Balance\n+                this.ae.checkBalance(this.currentUser);\n+                break;\n+            case 5: // Close Account\n+                this.ls.closeAccount();\n+                this.loggedIn = false;\n+                this.currentUser = null;\n+                this.printWelcomeMenu();\n+                break;\n+            default:\n+                System.out.println(\"Invalid input. Please select one of the listed options.\");\n+                break;\n+        }\n+    }\n+\n+    public BankAccount chooseAccount() {\n+        BankAccount currentAccount = null;\n+        System.out.println(\"Which Account would you like to use?\");\n+        System.out.println(\"Press 0 to Log Out\");\n+        System.out.println(\"Press 1 for Checking\");\n+        System.out.println(\"Press 2 for Savings\");\n+        System.out.println(\"Press 3 for Investment\");\n+\n+        Integer userInput = c.getIntegerInput();\n+\n+        switch (userInput) {\n+            case 0: // Log out\n+                this.loggedIn = false;\n+                this.currentUser = null;\n+                this.printWelcomeMenu();\n+                break;\n+            case 1: // Choose checking\n+                currentAccount = this.currentUser.getCheckingAccount();\n+                break;\n+            case 2: // Choose savings\n+                currentAccount = this.currentUser.getSavingsAccount();\n+                break;\n+            case 3: // Choose Investments\n+                currentAccount= this.currentUser.getInvestmentAccount();\n+                break;\n+            default:\n+                System.out.println(\"Invalid input.\");\n+                this.printUserMenu();\n+                break;\n+        }\n+\n+        return currentAccount;\n+    }\n+\n+}\n+\n+"
  },
  {
    "sha": "a8a8717fda5d1c89b48667d068c46f02921b6a4d",
    "filename": "src/main/java/UserAccount.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/UserAccount.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/UserAccount.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/UserAccount.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,39 @@\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UserAccount {\n+\n+    private String username;\n+    private String password;\n+    private Map<String, BankAccount> userBankAccounts;\n+\n+    public UserAccount(String username, String password) {\n+        this.username = username;\n+        this.password = password;\n+        this.userBankAccounts = new HashMap<String, BankAccount>();\n+        this.userBankAccounts.put(\"Checking\", new BankAccount(\"Checking\"));\n+        this.userBankAccounts.put(\"Savings\", new BankAccount(\"Savings\"));\n+        this.userBankAccounts.put(\"Investment\", new BankAccount(\"Investment\"));\n+    }\n+\n+    public BankAccount getCheckingAccount() {\n+        return this.userBankAccounts.get(\"Checking\");\n+    }\n+\n+    public BankAccount getSavingsAccount() {\n+        return this.userBankAccounts.get(\"Savings\");\n+    }\n+\n+    public BankAccount getInvestmentAccount() {\n+        return this.userBankAccounts.get(\"Investment\");\n+    }\n+\n+    public String getUsername() {\n+        return this.username;\n+    }\n+\n+    public String getPassword() {\n+        return this.password;\n+    }\n+\n+}"
  },
  {
    "sha": "6a003319f6df610cbb99189a38c2e14fc82bc27f",
    "filename": "src/main/java/UserManagement.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/UserManagement.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/java/UserManagement.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/java/UserManagement.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,96 @@\n+import java.util.HashMap;\n+\n+public class UserManagement {\n+\n+    Console c = new Console();\n+    private String enteredUserName;\n+    private String enteredPassword;\n+    private HashMap<String, String> userNamePasswordMap;\n+    private HashMap<String, UserAccount> userAccountsList;\n+\n+    public UserManagement() {\n+        this.userNamePasswordMap = new HashMap<String, String>();\n+        this.userAccountsList = new HashMap<String, UserAccount>();\n+    }\n+\n+    // Need this one for testing\n+    public UserManagement(String username, String password) {\n+        this.userNamePasswordMap = new HashMap<String, String>();\n+        this.userAccountsList = new HashMap<String, UserAccount>();\n+        this.enteredPassword = password;\n+        this.enteredUserName = username;\n+    }\n+\n+    // Need this one for testing\n+    public HashMap getUserNamePasswordMap() {\n+        return this.userNamePasswordMap;\n+    }\n+\n+    // Need this one for testing\n+    public HashMap getUserAccountsList() {\n+        return this.userAccountsList;\n+    }\n+\n+    public void getInputUserName() {\n+        System.out.println(\"Username:\");\n+        this.enteredUserName = c.getStringInput();\n+    }\n+\n+    public void getInputPassword() {\n+        System.out.println(\"Password:\");\n+        this.enteredPassword = c.getStringInput();\n+    }\n+\n+    public boolean validateUserNameExists() {\n+        return this.userNamePasswordMap.containsKey(this.enteredUserName);\n+    }\n+\n+    public boolean validatePasswordCorrect() {\n+        return this.userNamePasswordMap.get(this.enteredUserName).equals(this.enteredPassword);\n+    }\n+\n+    public UserAccount validateLoginCredentials() {\n+        getInputUserName();\n+        getInputPassword();\n+        if(this.validateUserNameExists() == false) {\n+            System.out.println(\"No such user exists.\");\n+        } else if (this.validatePasswordCorrect() == false) {\n+            System.out.println(\"Password is incorrect.\");\n+        } else {\n+            System.out.println(\"You are now logged in.\");\n+            return userAccountsList.get(this.enteredUserName);\n+        }\n+\n+        return null;\n+    }\n+\n+    public UserAccount createNewUserAccount() {\n+        System.out.println(\"Enter your new username and password.\");\n+        getInputUserName();\n+        int attempts = 0;\n+        while (attempts < 3) {\n+            if (this.validateUserNameExists() == false) {\n+                getInputPassword();\n+                setUpUserAccount();\n+                System.out.println(\"Congratulations \" + this.enteredUserName + \"! You have successfully created an account!\");\n+                return userAccountsList.get(this.enteredUserName);\n+            } else {\n+                System.out.println(\"Username is already taken. Be a bit more original!\");\n+                attempts += 1;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public void setUpUserAccount() {\n+        this.userNamePasswordMap.put(this.enteredUserName, this.enteredPassword);\n+        this.userAccountsList.put(this.enteredUserName, new UserAccount(this.enteredUserName, this.enteredPassword));\n+    }\n+\n+    public void closeAccount() {\n+        this.userNamePasswordMap.remove(this.enteredUserName);\n+        this.userAccountsList.remove(this.enteredUserName);\n+        System.out.println(\"Sorry to see you go \" + this.enteredUserName + \"! Your account is now closed...Oh, you want your money? LOL\");\n+    }\n+}\n+"
  },
  {
    "sha": "cbea4adceb1bde1067465a9c6fc648834118e867",
    "filename": "src/main/test/AccountTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 83,
    "changes": 83,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/105ac77d5825d688d01a54de5067e498fc1eb611/src/main/test/AccountTest.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/105ac77d5825d688d01a54de5067e498fc1eb611/src/main/test/AccountTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/test/AccountTest.java?ref=105ac77d5825d688d01a54de5067e498fc1eb611",
    "patch": "@@ -1,83 +0,0 @@\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-\n-// Test the expected Account class from ATM.\n-public class AccountTest {\n-\n-    @Test\n-    public void testA0() {\n-        Account a = new Account(0.0);\n-        assertEquals(0.0, a.balance(), 0.0001);\n-    }\n-\n-    @Test\n-    public void testA00() {\n-        Account a = new Account(10.0);\n-        assertEquals(10.0, a.balance(), 0.0001);\n-    }\n-\n-    @Test\n-    public void testA01() {\n-        Account a = new Account(0.0);\n-        assertEquals(true, a.closeAccount());\n-    }\n-\n-    @Test\n-    public void testA02() {\n-        Account a = new Account(10.0);\n-        assertEquals(false, a.closeAccount());\n-    }\n-\n-    @Test\n-    public void testA1() {\n-        Account a = new Account(0.0);\n-        a.deposit(100.0);\n-        assertEquals(100.0, a.balance(), 0.0001);\n-    }\n-\n-    @Test\n-    public void testA2() {\n-        Account a = new Account(10.0);\n-        a.deposit(100.0);\n-        assertEquals(110.0, a.balance(), 0.0001);\n-    }\n-\n-    @Test\n-    public void testA3() {\n-        Account a = new Account(200.0);\n-        Double actual = a.withdraw(100.0);\n-        assertEquals(100.0, actual, 0.0001);\n-    }\n-\n-    @Test\n-    public void testA4() {\n-        Account a = new Account(0.0);\n-        Double actual = a.withdraw(1.0);\n-        assertEquals(0.0, actual, 0.0001);\n-    }\n-\n-    @Test\n-    public void testA5() {\n-        Account a = new Account(10.0);\n-        Account b = new Account(0.0);\n-        a.transfer(b, 10.0);\n-        assertEquals(0.0, a.balance(), 0.0001);\n-        assertEquals(10.0, b.balance(), 0.0001);\n-    }\n-\n-    @Test\n-    public void testA6() {\n-        Account a = new Account(10.0);\n-        Account b = new Account(0.0);\n-        a.transfer(b, 100.0); // nothing should happen\n-        assertEquals(10.0, a.balance(), 0.0001);\n-        assertEquals(0.0, b.balance(), 0.0001);\n-    }\n-\n-\n-}"
  },
  {
    "sha": "9abf247edd48841e41b412cc0c72001c7aa175b1",
    "filename": "src/main/test/BankAccountTest.java",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/BankAccountTest.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/BankAccountTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/test/BankAccountTest.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,136 @@\n+\n+import org.testng.annotations.Test;\n+import org.testng.Assert;\n+\n+// Test the expected Account class from ATM.\n+public class BankAccountTest {\n+\n+    @Test\n+    public void constructorCActTypeTest1() { // tests creation of checking account - type field\n+        // Arrange\n+        BankAccount testAccount = new BankAccount(\"Checking\");\n+        String givenCAcctType = \"Checking\";\n+        String returnedCAcctType = testAccount.getAccountType();\n+        Assert.assertEquals(givenCAcctType, returnedCAcctType);\n+    }\n+\n+        @Test\n+        public void constructorInitialBalanceTest1 () { // tests account balance 0.0 upon creation of BankAccount\n+            //Arrange\n+            String givenAccountType = \"Checking\";\n+            Double givenCurrentBalance = 0.0;\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            Double returnedBalance = testBankAccount.getBalance();\n+            //Assert\n+            Assert.assertEquals(givenCurrentBalance, returnedBalance);\n+        }\n+\n+        @Test\n+        public void constructorAcctTypeArgTest2 () { // tests creation of BankAccount sets account type\n+            //Arrange\n+            String givenAccountType = \"Checking\";\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            String returnedAccountType = testBankAccount.accountType;\n+            //Assert\n+            Assert.assertEquals(givenAccountType, returnedAccountType);\n+\n+        }\n+    @Test\n+    public void setTypeTest() { // tests method to reset account type\n+        //Arrange\n+        String givenAccountType = \"Checking\";\n+        Double givenCurrentBalance = 0.0;\n+        //Act\n+        BankAccount testBankAccount = new BankAccount(givenAccountType);\n+        testBankAccount.setType(\"Savings\");\n+        String returnedAccountType = testBankAccount.getAccountType();\n+        //Assert\n+        Assert.assertEquals(\"Savings\", returnedAccountType);\n+    }\n+\n+\n+        @Test\n+        public void getAccountTypeTest () { // tests method for return account type\n+            //Arrange\n+            String givenAccountType = \"Checking\";\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            String returnedAccountType = testBankAccount.getAccountType();\n+            //Assert\n+            Assert.assertEquals(givenAccountType, returnedAccountType);\n+        }\n+\n+        @Test\n+        public void setBalanceTest () { // tests method to reset account balance\n+            //Arrange\n+            String givenAccountType = \"Investment\";\n+            Double givenCurrentBalance = 0.0;\n+            Double expectedAccountBal = 100.0;\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            testBankAccount.setBalance(100.0);\n+            Double returnedAccountBal = testBankAccount.getBalance();\n+            //Assert\n+            Assert.assertEquals(expectedAccountBal, returnedAccountBal);\n+        }\n+\n+        @Test\n+        public void getBalanceTest () { // tests method to reset account balance\n+            //Arrange\n+            String givenAccountType = \"Investment\";\n+            Double givenCurrentBalance = 0.0;\n+            Double expectedAccountBal = 100.0;\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            testBankAccount.setBalance(100.0);\n+            Double returnedAccountBal = testBankAccount.getBalance();\n+            //Assert\n+            Assert.assertEquals(expectedAccountBal, returnedAccountBal);\n+        }\n+\n+        @Test\n+        public void depositTest () {\n+            //Arrange\n+            String givenAccountType = \"Investment\";\n+            Double expectedAccountBal = 200.0;\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            testBankAccount.setBalance(100.00);\n+            testBankAccount.deposit(100.0);\n+            Double returnedAccountBalance = testBankAccount.getBalance();\n+            //Assert\n+            Assert.assertEquals(expectedAccountBal, returnedAccountBalance);\n+        }\n+\n+        @Test\n+        public void withdrawTest () {\n+            //Arrange\n+            String givenAccountType = \"Investment\";\n+            Double expectedAccountBal = 0.0;\n+            //Act\n+            BankAccount testBankAccount = new BankAccount(givenAccountType);\n+            testBankAccount.setBalance(100.00);\n+            testBankAccount.withdraw(100.0);\n+            Double returnedAccountBalance = testBankAccount.getBalance();\n+            //Assert\n+            Assert.assertEquals(expectedAccountBal, returnedAccountBalance);\n+        }\n+\n+        @Test\n+        public void dateTimeTest () {  // tests return of date and time method\n+            //Arrange\n+            String givenAccountType = \"Checking\";\n+            //Act\n+            BankAccount testBankAccount1 = new BankAccount(givenAccountType);\n+            BankAccount testBankAccount2 = new BankAccount(givenAccountType);\n+            System.out.println(testBankAccount1.dateTime());\n+            System.out.println(testBankAccount2.dateTime());\n+            String expectedDateTime = testBankAccount1.dateTime();\n+            String returnedDateTime = testBankAccount2.dateTime();\n+            //Assert\n+            Assert.assertEquals(expectedDateTime, returnedDateTime);\n+        }\n+\n+}"
  },
  {
    "sha": "2ac2799b6d378812c9e1fb9563281dcac5912e4c",
    "filename": "src/main/test/ConsoleTest.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/ConsoleTest.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/ConsoleTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/test/ConsoleTest.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,25 @@\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+\n+public class ConsoleTest {\n+\n+    @Test\n+    public void testStringInput() {\n+        InputStream sysInBackup = System.in; // backup System.in to restore it later\n+        ByteArrayInputStream in = new ByteArrayInputStream(\"1\".getBytes());\n+        System.setIn(in);\n+\n+        Console c = new Console();\n+        String actual = c.getStringInput();\n+\n+        Assert.assertEquals(actual, \"1\");\n+\n+        System.setIn(sysInBackup);\n+    }\n+\n+}\n+"
  },
  {
    "sha": "d8d4c0d13fd60302c82ab632bbc17e8739e7bcce",
    "filename": "src/main/test/UserAccountTest.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/UserAccountTest.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/UserAccountTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/test/UserAccountTest.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,94 @@\n+\n+// Test the expected User class from ATM.\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class UserAccountTest {\n+\n+    @Test   // tests constructor for user with name & password\n+    public void testGetConstructorUserNamePWTest() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+        String actualUsername = testUser.getUsername();\n+        String actualPassword = testUser.getPassword();\n+\n+        Assert.assertEquals(expectedUsername, actualUsername);\n+        Assert.assertEquals(expectedPassword, actualPassword);\n+    }\n+\n+    @Test   // method returns username   how to test: pass in username value, check to make sure username returned\n+            // is same as what you passed in\n+    public void testGetUsernameTest() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+        String actualUsername = testUser.getUsername();\n+\n+        Assert.assertEquals(actualUsername, expectedUsername);\n+    }\n+\n+    @Test\n+    public void testGetUsernameTestNeg() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+        String actualUsername = testUser.getUsername();\n+\n+        Assert.assertNotEquals(actualUsername, \"unknown\");\n+    }\n+\n+    @Test   // method returns password   how to test: pass in username value, check to make sure username returned\n+            // is same as what you passed in\n+    public void testGetPasswordTest() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+        String actualPassword = testUser.getPassword();\n+\n+        Assert.assertEquals(actualPassword, expectedPassword);\n+    }\n+\n+    @Test\n+    public void testGetPasswordTestNeg() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+        String actualPassword = testUser.getPassword();\n+\n+        Assert.assertNotEquals(actualPassword, \"Unknown\");\n+    }\n+\n+    @Test\n+    public void testGetCheckingAccount() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+\n+        String actual = testUser.getCheckingAccount().getAccountType();\n+\n+        Assert.assertEquals(actual, \"Checking\");\n+    }\n+\n+    @Test\n+    public void testGetSavingsAccount() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+\n+        String actual = testUser.getSavingsAccount().getAccountType();\n+\n+        Assert.assertEquals(actual, \"Savings\");\n+    }\n+\n+    @Test\n+    public void testGetInvestmentAccount() {\n+        String expectedUsername = \"User01\";\n+        String expectedPassword = \"password123\";\n+        UserAccount testUser = new UserAccount(expectedUsername, expectedPassword);\n+\n+        String actual = testUser.getInvestmentAccount().getAccountType();\n+\n+        Assert.assertEquals(actual, \"Investment\");\n+    }\n+}"
  },
  {
    "sha": "ef64f889a231ca78a9c286169ac49c9053b4ed1b",
    "filename": "src/main/test/UserManagementTest.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/blob/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/UserManagementTest.java",
    "raw_url": "https://github.com/Zipcoder/CR-MacroLabs-OOP-ATM/raw/83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3/src/main/test/UserManagementTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/CR-MacroLabs-OOP-ATM/contents/src/main/test/UserManagementTest.java?ref=83b476c50de17cf3e5f61ce8b4e3b14bcb8d76f3",
    "patch": "@@ -0,0 +1,64 @@\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.HashMap;\n+\n+public class UserManagementTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        UserManagement um = new UserManagement(\"TestAccount\", \"123\");\n+\n+        String actual = (String) um.getUserAccountsList().get(\"TestAccount\");\n+        String actual2 = (String) um.getUserNamePasswordMap().get(\"TestAccount\");\n+\n+        Assert.assertEquals(actual, null);\n+    }\n+\n+    @Test\n+    public void testValidateUserNameExists() {\n+        UserManagement um = new UserManagement(\"TestAccount\", \"123\");\n+\n+        um.setUpUserAccount();\n+        boolean actual = um.validateUserNameExists();\n+\n+        Assert.assertTrue(actual);\n+    }\n+\n+    @Test\n+    public void testValidatePasswordCorrect() {\n+        UserManagement um = new UserManagement(\"TestAccount\", \"123\");\n+\n+        um.setUpUserAccount();\n+        boolean actual = um.validatePasswordCorrect();\n+\n+        Assert.assertTrue(actual);\n+    }\n+\n+    @Test\n+    public void setUpUserAccount() {\n+        UserManagement um = new UserManagement(\"TestAccount\", \"123\");\n+\n+        um.setUpUserAccount();\n+        boolean actualPass = um.validatePasswordCorrect();\n+        boolean actualUN = um.validateUserNameExists();\n+\n+        Assert.assertTrue(actualPass);\n+        Assert.assertTrue(actualUN);\n+    }\n+\n+    @Test\n+    public void closeUserAccount() {\n+        UserManagement um = new UserManagement(\"TestAccount\", \"123\");\n+\n+        um.setUpUserAccount();\n+        um.closeAccount();\n+\n+        String actual = (String) um.getUserNamePasswordMap().get(\"TestAccount\");\n+        String actual2 = (String) um.getUserAccountsList().get(\"TestAccount\");\n+\n+        Assert.assertEquals(actual, null);\n+        Assert.assertEquals(actual2, null);\n+    }\n+\n+}"
  }
]
