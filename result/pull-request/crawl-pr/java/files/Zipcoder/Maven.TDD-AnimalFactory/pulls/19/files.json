[
  {
    "sha": "633ec6b83f9fa9b6466466b7b2aee7edf9abb35b",
    "filename": "src/main/java/rocks/zipcodewilmington/animals/animal_storage/CatHouse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/blob/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/main/java/rocks/zipcodewilmington/animals/animal_storage/CatHouse.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/raw/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/main/java/rocks/zipcodewilmington/animals/animal_storage/CatHouse.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TDD-AnimalFactory/contents/src/main/java/rocks/zipcodewilmington/animals/animal_storage/CatHouse.java?ref=88bea0b9de2187d0c91d5f4f48fd619c22031fba",
    "patch": "@@ -10,6 +10,7 @@\n     private static AnimalWarehouse<Cat> catHouse = new AnimalWarehouse<>();\n \n     public static void add(Cat cat) {\n+\n         catHouse.add(cat);\n     }\n "
  },
  {
    "sha": "a6d72e554b286dd6bde57ad36471751d47d6527b",
    "filename": "src/test/java/rocks/zipcodewilmington/AnimalFactoryTest.java",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/blob/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/AnimalFactoryTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/raw/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/AnimalFactoryTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TDD-AnimalFactory/contents/src/test/java/rocks/zipcodewilmington/AnimalFactoryTest.java?ref=88bea0b9de2187d0c91d5f4f48fd619c22031fba",
    "patch": "@@ -1,9 +1,39 @@\n package rocks.zipcodewilmington;\n \n+import org.junit.Assert;\n+import org.junit.Test;\n+import rocks.zipcodewilmington.animals.Cat;\n+import rocks.zipcodewilmington.animals.Dog;\n+import rocks.zipcodewilmington.animals.animal_creation.AnimalFactory;\n+\n+import java.util.Date;\n+\n /**\n  * @author leon on 4/19/18.\n  */\n public class AnimalFactoryTest {\n     //TODO - Create Test for `Animal createDog(String name, Date birthDate)`\n     //TODO - Create Test for `Animal createCat(String name, Date birthDate)`\n+\n+    @Test\n+    public void createDogTest(){\n+        // Creates new Dog\n+        Date birthDate = new Date();\n+        Dog dog = AnimalFactory.createDog(\"Pancho\",birthDate);\n+\n+        // test\n+        Assert.assertEquals(dog.getBirthDate(),birthDate);\n+        Assert.assertEquals(dog.getName(),\"Pancho\");\n+    }\n+\n+    @Test\n+    public void createCatTest() {\n+        // Creates new Dog\n+        Date birthDate = new Date();\n+        Cat cat = AnimalFactory.createCat(\"Nina\", birthDate);\n+\n+        // test\n+        Assert.assertEquals(cat.getBirthDate(), birthDate);\n+        Assert.assertEquals(cat.getName(), \"Nina\");\n+    }\n }"
  },
  {
    "sha": "330216b6642d65b2a98389d66efda99f2efb4c4a",
    "filename": "src/test/java/rocks/zipcodewilmington/CatHouseTest.java",
    "status": "modified",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/blob/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/CatHouseTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/raw/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/CatHouseTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TDD-AnimalFactory/contents/src/test/java/rocks/zipcodewilmington/CatHouseTest.java?ref=88bea0b9de2187d0c91d5f4f48fd619c22031fba",
    "patch": "@@ -1,5 +1,12 @@\n package rocks.zipcodewilmington;\n \n+import org.junit.Assert;\n+import org.junit.Test;\n+import rocks.zipcodewilmington.animals.Cat;\n+import rocks.zipcodewilmington.animals.animal_storage.CatHouse;\n+\n+import java.util.Date;\n+\n /**\n  * @author leon on 4/19/18.\n  */\n@@ -9,4 +16,54 @@\n     // TODO - Create tests for `void remove(Cat cat)`\n     // TODO - Create tests for `Cat getCatById(Integer id)`\n     // TODO - Create tests for `Integer getNumberOfCats()`\n+\n+    @Test\n+    public void addCatTest(){\n+        CatHouse.add(new Cat(\"Nina\", new Date(),0));\n+        Integer catsBefore = CatHouse.getNumberOfCats() + 1;\n+        CatHouse.add(new Cat(\"Mini\", new Date(),1));\n+\n+        Assert.assertEquals(catsBefore, CatHouse.getNumberOfCats());\n+    }\n+\n+    @Test\n+    public void removeIdTest(){\n+        CatHouse.add(new Cat(\"Nina\", new Date(),0));\n+        CatHouse.add(new Cat(\"Mini\", new Date(),1));\n+\n+        Integer catsBefore = CatHouse.getNumberOfCats() - 1;\n+        CatHouse.remove(0);\n+        Assert.assertEquals(catsBefore, CatHouse.getNumberOfCats());\n+    }\n+\n+    @Test\n+    public void removeCatTest(){\n+        Cat newCat = new Cat(\"kitten\", new Date(),2);\n+        CatHouse.add(new Cat(\"Nina\", new Date(),0));\n+        CatHouse.add(new Cat(\"Mini\", new Date(),1));\n+        CatHouse.add(newCat);\n+\n+        Integer catsBefore = CatHouse.getNumberOfCats() - 1;\n+        CatHouse.remove(newCat);\n+        Assert.assertEquals(catsBefore, CatHouse.getNumberOfCats());\n+    }\n+\n+    @Test\n+    public void getCatByIdTest(){\n+        Cat newCat = new Cat(\"kitten\", new Date(),2);\n+        CatHouse.add(new Cat(\"Nina\", new Date(),0));\n+        CatHouse.add(new Cat(\"Mini\", new Date(),1));\n+        CatHouse.add(newCat);\n+\n+        Assert.assertEquals(newCat, CatHouse.getCatById(newCat.getId()));\n+    }\n+\n+    @Test\n+    public void getNumeberOfCatsTest() {\n+        CatHouse.add(new Cat(\"Nina\", new Date(), 0));\n+        Integer catsBefore = CatHouse.getNumberOfCats() + 1;\n+        CatHouse.add(new Cat(\"Mini\", new Date(), 1));\n+\n+        Assert.assertEquals(catsBefore, CatHouse.getNumberOfCats());\n+    }\n }"
  },
  {
    "sha": "1884bb79866c8d1f62d926d4181c0be6ee4e5a2a",
    "filename": "src/test/java/rocks/zipcodewilmington/CatTest.java",
    "status": "modified",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/blob/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/CatTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/raw/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/CatTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TDD-AnimalFactory/contents/src/test/java/rocks/zipcodewilmington/CatTest.java?ref=88bea0b9de2187d0c91d5f4f48fd619c22031fba",
    "patch": "@@ -2,7 +2,9 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+import rocks.zipcodewilmington.animals.Animal;\n import rocks.zipcodewilmington.animals.Cat;\n+import rocks.zipcodewilmington.animals.Mammal;\n \n import java.util.Date;\n \n@@ -39,5 +41,125 @@ public void constructorTest() {\n         Assert.assertEquals(givenBirthDate, retrievedBirthDate);\n         Assert.assertEquals(givenId, retrievedId);\n     }\n+    @Test\n+    public void testSetName(){\n+        //Given name\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        // When (a cat is constructed)\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        // new name\n+        String newName = \"Nina\";\n+\n+        // change name\n+        cat.setName(newName);\n+\n+        // Then (we expect the given data, to match the retrieved data)\n+        Assert.assertEquals(newName, cat.getName());\n+    }\n+    @Test\n+    public void testSetBirthDate(){\n+        //Given date\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        // When new cat is constructed\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        // new birthDate\n+        Date newDate = new Date(1993,11,2);\n+\n+        // changes birthDate\n+        cat.setBirthDate(newDate);\n+\n+        // Then (Given data is to match retrieved data\n+        Assert.assertEquals(newDate, cat.getBirthDate());\n+    }\n+\n+    @Test\n+    public void testSpeak(){\n+        //Given name birthDate and Id\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When new cat is constructed\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        //expected\n+        String expected = \"meow!\";\n+\n+        //Then (Given data is to match retrieved data\n+        Assert.assertEquals(expected, cat.speak());\n+    }\n+\n+    @Test\n+    public void testEat(){\n+        //Given name birthDate and Id\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When new cat is constructed\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        //expected\n+        Integer expected = cat.getNumberOfMealsEaten() + 1;\n+\n+        //action\n+        cat.eat(new Food());\n+\n+        //Then (Given data is to match retrieved data\n+        Assert.assertEquals(expected, cat.getNumberOfMealsEaten());\n+    }\n+\n+    @Test\n+    public void testGetId(){\n+        //Given name birthDate and Id\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n \n+        // when a cat is constructed\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        // expected\n+        Integer expected = givenId;\n+\n+        //Then (Given data is to match retrieved data\n+        Assert.assertEquals(expected, cat.getId());\n+    }\n+    \n+    @Test\n+    public void testInstanceOfAnimal(){\n+        //Given name birthDate and Id\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        // when a cat is constructed\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        //Then (Given data is to match retrieved data\n+        Assert.assertTrue(cat instanceof Animal);\n+    }\n+\n+    @Test\n+    public void testInstanceOfMammal(){\n+        //Given name birthDate and Id\n+        String givenName = \"Zula\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        // when a cat is constructed\n+        Cat cat = new Cat(givenName, givenBirthDate, givenId);\n+\n+        //Then (Given data is to match retrieved data\n+        Assert.assertTrue(cat instanceof Mammal);\n+\n+    }\n }"
  },
  {
    "sha": "799618062084f9237f6bd21b6413220f5e6c8e3d",
    "filename": "src/test/java/rocks/zipcodewilmington/DogHouseTest.java",
    "status": "modified",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/blob/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/DogHouseTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/raw/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/DogHouseTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TDD-AnimalFactory/contents/src/test/java/rocks/zipcodewilmington/DogHouseTest.java?ref=88bea0b9de2187d0c91d5f4f48fd619c22031fba",
    "patch": "@@ -1,8 +1,11 @@\n package rocks.zipcodewilmington;\n \n+import org.junit.Assert;\n import org.junit.Test;\n+import rocks.zipcodewilmington.animals.Cat;\n import rocks.zipcodewilmington.animals.Dog;\n import rocks.zipcodewilmington.animals.animal_creation.AnimalFactory;\n+import rocks.zipcodewilmington.animals.animal_storage.CatHouse;\n import rocks.zipcodewilmington.animals.animal_storage.DogHouse;\n \n import java.util.Date;\n@@ -31,4 +34,45 @@ public void testGetNumberOfDogs() {\n         // Then\n         DogHouse.getNumberOfDogs();\n     }\n+\n+    @Test\n+    public void addDogTest(){\n+        DogHouse.add(new Dog(\"Milo\", new Date(),0));\n+        Integer dogsBefore = DogHouse.getNumberOfDogs();\n+        CatHouse.add(new Cat(\"Pancho\", new Date(),1));\n+\n+        Assert.assertEquals(dogsBefore, DogHouse.getNumberOfDogs());\n+    }\n+\n+    @Test\n+    public void removeIdTest(){\n+        DogHouse.add(new Dog(\"Milo\", new Date(),0));\n+        DogHouse.add(new Dog(\"Pancho\", new Date(),1));\n+\n+        Integer dogsBefore = DogHouse.getNumberOfDogs() - 1;\n+        DogHouse.remove(0);\n+        Assert.assertEquals(dogsBefore, DogHouse.getNumberOfDogs());\n+    }\n+\n+    @Test\n+    public void removeDogTest(){\n+        Dog newDog = new Dog(\"kitten\", new Date(),2);\n+        DogHouse.add(new Dog(\"Nina\", new Date(),0));\n+        DogHouse.add(new Dog(\"Mini\", new Date(),1));\n+        DogHouse.add(newDog);\n+\n+        Integer dogsBefore = DogHouse.getNumberOfDogs() - 1;\n+        DogHouse.remove(newDog);\n+        Assert.assertEquals(dogsBefore, DogHouse.getNumberOfDogs());\n+    }\n+\n+    @Test\n+    public void getCatByIdTest(){\n+        Dog newDog = new Dog(\"kitten\", new Date(),2);\n+        DogHouse.add(new Dog(\"Nina\", new Date(),0));\n+        DogHouse.add(new Dog(\"Mini\", new Date(),1));\n+        DogHouse.add(newDog);\n+\n+        Assert.assertEquals(newDog, DogHouse.getDogById(newDog.getId()));\n+    }\n }"
  },
  {
    "sha": "28a97c99bc71c57b3993bfdba15630eaf8afa6f8",
    "filename": "src/test/java/rocks/zipcodewilmington/DogTest.java",
    "status": "modified",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/blob/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/DogTest.java",
    "raw_url": "https://github.com/Zipcoder/Maven.TDD-AnimalFactory/raw/88bea0b9de2187d0c91d5f4f48fd619c22031fba/src/test/java/rocks/zipcodewilmington/DogTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.TDD-AnimalFactory/contents/src/test/java/rocks/zipcodewilmington/DogTest.java?ref=88bea0b9de2187d0c91d5f4f48fd619c22031fba",
    "patch": "@@ -2,7 +2,11 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+import rocks.zipcodewilmington.animals.Animal;\n import rocks.zipcodewilmington.animals.Dog;\n+import rocks.zipcodewilmington.animals.Mammal;\n+\n+import java.util.Date;\n \n /**\n  * @author leon on 4/19/18.\n@@ -28,4 +32,98 @@ public void setNameTest() {\n         String dogName = dog.getName();\n         Assert.assertEquals(dogName, givenName);\n     }\n+\n+    @Test\n+    public void testBirthDate(){\n+        // Given name, birthDate, Id\n+        String givenName = \"Pancho\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When Dog is created\n+        Dog dog = new Dog(givenName, givenBirthDate, givenId);\n+\n+        // Then expect to get birthDate  given to dog\n+        Date dogBirthDate = dog.getBirthDate();\n+        Assert.assertEquals(dogBirthDate, givenBirthDate);\n+    }\n+\n+    @Test\n+    public void speakTest(){\n+        // Given name, birthDate, Id\n+        String givenName = \"Pancho\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When Dog is created\n+        Dog dog = new Dog(givenName, givenBirthDate, givenId);\n+\n+        // Then expect to get birthDate  given to dog\n+        String expected = dog.speak();\n+        Assert.assertEquals(expected, dog.speak());\n+    }\n+\n+    @Test\n+    public void eatTest(){\n+        // Given name, birthDate, Id\n+        String givenName = \"Pancho\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When Dog is created\n+        Dog dog = new Dog(givenName, givenBirthDate, givenId);\n+\n+        // Action\n+        dog.eat(new Food());\n+\n+        // Then expect to get birthDate  given to dog\n+        Integer expected = dog.getNumberOfMealsEaten();\n+        Assert.assertEquals(expected, dog.getNumberOfMealsEaten());\n+    }\n+\n+    @Test\n+    public void getIdTest(){\n+        // Given name, birthDate, Id\n+        String givenName = \"Pancho\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When Dog is created\n+        Dog dog = new Dog(givenName, givenBirthDate, givenId);\n+\n+\n+        // Then expect to get birthDate  given to dog\n+        Integer expected = dog.getId();\n+        Assert.assertEquals(expected, dog.getId());\n+    }\n+\n+    @Test\n+    public void dogInstanceOfAnimal(){\n+        // Given name, birthDate, Id\n+        String givenName = \"Pancho\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When Dog is created\n+        Dog dog = new Dog(givenName, givenBirthDate, givenId);\n+\n+\n+        // Then expect to get birthDate  given to dog\n+        Assert.assertTrue(dog instanceof Animal);\n+    }\n+\n+    @Test\n+    public void dogInstanceOfMammal(){\n+        // Given name, birthDate, Id\n+        String givenName = \"Pancho\";\n+        Date givenBirthDate = new Date();\n+        Integer givenId = 0;\n+\n+        //When Dog is created\n+        Dog dog = new Dog(givenName, givenBirthDate, givenId);\n+\n+\n+        // Then expect to get birthDate  given to dog\n+        Assert.assertTrue(dog instanceof Mammal);\n+    }\n }"
  }
]
