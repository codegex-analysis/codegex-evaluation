[
  {
    "sha": "95fc100fb5ea81e006c335ceeb160cf1c300a53a",
    "filename": "src/main/java/io/zipcoder/StringsAndThings.java",
    "status": "modified",
    "additions": 51,
    "deletions": 4,
    "changes": 55,
    "blob_url": "https://github.com/Zipcoder/Maven.StringsAndThings/blob/ade93cfaa34fecaf1a8764c303d60989d54a3aa1/src/main/java/io/zipcoder/StringsAndThings.java",
    "raw_url": "https://github.com/Zipcoder/Maven.StringsAndThings/raw/ade93cfaa34fecaf1a8764c303d60989d54a3aa1/src/main/java/io/zipcoder/StringsAndThings.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.StringsAndThings/contents/src/main/java/io/zipcoder/StringsAndThings.java?ref=ade93cfaa34fecaf1a8764c303d60989d54a3aa1",
    "patch": "@@ -4,7 +4,7 @@\n /**\n  * @author tariq\n  */\n-public class StringsAndThings {\n+public class StringsAndThings<counter> {\n \n     /**\n      * Given a string, count the number of words ending in 'y' or 'z' -- so the 'y' in \"heavy\" and the 'z' in \"fez\" count,\n@@ -15,9 +15,25 @@\n      *           countYZ(\"day fyyyz\"); // Should return 2\n      */\n     public Integer countYZ(String input){\n-        return null;\n+       Integer counter = 0;\n+       int howLong = input.length();\n+       input = input.toLowerCase();\n+\n+       for(int i = 0; i < howLong; i++) {\n+           if (input.charAt(i) == 'y' || input.charAt(i) == 'z') {\n+               if(i < howLong-1 && !Character.isLetter(input.charAt(i + 1))) {\n+                   counter++;\n+               } else if (i == howLong-1) {\n+                   counter++;\n+               }\n+           }\n+       }\n+       return counter;\n+\n     }\n \n+\n+\n     /**\n      * Given two strings, base and remove, return a version of the base string where all instances of the remove string have\n      * been removed (not case sensitive). You may assume that the remove string is length 1 or more.\n@@ -28,7 +44,17 @@ public Integer countYZ(String input){\n      *           removeString(\"Hello there\", \"x\") // Should return \"Hello there\"\n      */\n     public String removeString(String base, String remove){\n-        return null;\n+\n+\n+        /* (int i = 0; i < base.length(); i++) {\n+            for (int j = 0; j < remove.length(); j++) {\n+                if (base.charAt(i) == remove.charAt(0)) {\n+\n+                }\n+            }\n+        }*/\n+\n+        return base.replaceAll(remove,\"\");\n     }\n \n     /**\n@@ -40,7 +66,28 @@ public String removeString(String base, String remove){\n      *           containsEqualNumberOfIsAndNot(\"noisxxnotyynotxisi\") // Should return true\n      */\n     public Boolean containsEqualNumberOfIsAndNot(String input){\n-        return null;\n+        int isCount = 0;\n+        int notCount = 0;\n+        for (int i = 0; i < input.length()-1; i++){\n+\n+            if (input.substring(i, i+2).equals(\"is\")){\n+                isCount++;\n+            } else if ( i+3 <= input.length()){\n+                  if  (input.substring(i, i+3).equals(\"not\")) {\n+                      notCount++;\n+                  }\n+            }\n+        }\n+\n+        if (isCount ==  notCount) {\n+            return true;\n+        }else {\n+            return false;\n+        }\n+\n+\n+\n+\n     }\n \n     /**"
  }
]
