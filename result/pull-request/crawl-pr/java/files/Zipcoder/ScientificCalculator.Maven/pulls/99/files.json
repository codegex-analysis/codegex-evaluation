[
  {
    "sha": "3767bd444a69d337a58a358a8315fa33f9788edc",
    "filename": ".DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/.DS_Store?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953"
  },
  {
    "sha": "ece71c64c01a4ca8650ba761cf29c7fac08629d5",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/pom.xml",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/pom.xml",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/pom.xml?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -7,6 +7,20 @@\n     <groupId>com.zipcodewilmington</groupId>\n     <artifactId>scientific_calculator</artifactId>\n     <version>1.0-SNAPSHOT</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.12</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>RELEASE</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n \n \n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "e2d3af3ed681a9829b9e0dd14798df468b79caf6",
    "filename": "src/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/.DS_Store?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953"
  },
  {
    "sha": "b1f08e88b5eae3a7746cd5d1df8cb746b6aec5d3",
    "filename": "src/main/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/.DS_Store?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953"
  },
  {
    "sha": "89dfc5b4955d4bc9b210b8ac8b1ee253afd0a6b4",
    "filename": "src/main/java/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/java/.DS_Store?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953"
  },
  {
    "sha": "7faa5e2fc633bdd3b241fd59ef14d0de83b0f56b",
    "filename": "src/main/java/com/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/java/com/.DS_Store?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953"
  },
  {
    "sha": "977b66dd273116ecb5ae998fc2c2b363df6b572c",
    "filename": "src/main/java/com/zipcodewilmington/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/.DS_Store",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/.DS_Store",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/java/com/zipcodewilmington/.DS_Store?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953"
  },
  {
    "sha": "239f385ec08b4a692ac3984c0901730f49598f23",
    "filename": "src/main/java/com/zipcodewilmington/scientificcalculator/Calculator.java",
    "status": "added",
    "additions": 222,
    "deletions": 0,
    "changes": 222,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/scientificcalculator/Calculator.java",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/scientificcalculator/Calculator.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/java/com/zipcodewilmington/scientificcalculator/Calculator.java?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -0,0 +1,222 @@\n+package com.zipcodewilmington.scientificcalculator;\n+public class Calculator {\n+    public Calculator() {\n+    }\n+    public void drawScreen(String d){\n+        Console.println(\"\");\n+        Console.println(\"|------------------------------------------------|\");\n+        Console.println(\"|Quit     Clear     Set     M+     MC     MRC    |\");\n+        Console.println(\"|------------------------------------------------|\");\n+        Console.println(\" Current Number: %s                               \",d);\n+        Console.println(\"|------------------------------------------------|\");\n+        Console.println(\"| Add      Subtract      Multiply      Divide    |\");\n+        Console.println(\"| Square   Square Root   Exponential   Inverse   |\");\n+        Console.println(\"| Log      Log-1         Ln            Ln-1      |\");\n+        Console.println(\"| Sine     Cosine        Tangent       Factorial |\");\n+        Console.println(\"| Sine-1   Cosine-1      Tangent-1     Invert    |\");\n+        Console.println(\"| cToF     fToC          LBtoKG        KGtoLB    |\");\n+        Console.println(\"|          radToDeg      degToRad                |\");\n+        Console.println(\"|------------------------------------------------|\");\n+    }\n+    public double performOperation(String op, double num1, double num2){\n+        double returnAns;\n+        if(op.equalsIgnoreCase(\"add\")){\n+            returnAns = this.addition(num1,num2);\n+\n+            double newThing = MainApplication.getCurrent();\n+\n+        }\n+        else if(op.equalsIgnoreCase(\"subtract\")){\n+            returnAns = this.subtraction(num1,num2);\n+        }\n+        else if(op.equalsIgnoreCase(\"multiply\")){\n+            returnAns = this.multiply(num1, num2);\n+        }\n+        else if(op.equalsIgnoreCase(\"divide\")){\n+            returnAns = this.divide(num1, num2);\n+        }\n+        //catching exponential operation\n+        else {\n+            returnAns = this.exponential(num1, num2);\n+        }\n+        return returnAns;\n+    }\n+    public double performOperation(String op, double num){\n+        double returnAns;\n+        if(op.equalsIgnoreCase(\"square\")){\n+            returnAns = this.square(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"square root\")){\n+            returnAns = this.squareRoot(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"inverse\")){\n+            returnAns = this.inverse(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"invert\")){\n+            returnAns = this.invert(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"sine\")){\n+            returnAns = this.sine(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"cosine\")){\n+            returnAns = this.cosine(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"tangent\")){\n+            returnAns = this.tangent(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"sine-1\")){\n+            returnAns = this.inverseSine(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"cosine-1\")){\n+            returnAns = this.inverseCosine(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"tangent-1\")){\n+            returnAns = this.inverseTangent(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"factorial\")){\n+            returnAns = this.factorial(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"log\")){\n+            returnAns = this.log(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"log-1\")){\n+            returnAns = this.inverseLog(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"ln\")){\n+            returnAns = this.naturalLog(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"ln-1\")){\n+            returnAns = this.inverseNaturalLog(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"lbToKg\")){\n+            returnAns = this.convertLBtoKG(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"kgtoLb\")) {\n+            returnAns = this.convertKGtoLB(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"radtodeg\")) {\n+            returnAns = this.toDegrees(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"degtorad\")) {\n+            returnAns = this.toRadians(num);\n+        }\n+        else if(op.equalsIgnoreCase(\"fToC\")){\n+            returnAns = this.convertFtoC(num);\n+        }\n+        //catching convert C to F\n+        else {\n+            returnAns = this.convertCtoF(num);\n+        }\n+        return returnAns;\n+    }\n+    //two variable operations\n+    public double addition(double x, double y){\n+        double ans = x + y;\n+        return ans;\n+    }\n+    public double subtraction(double x,double y){\n+        double ans = x - y;\n+        return ans;\n+    }\n+    public double multiply(double x,double y){\n+        double ans = x * y;\n+        return ans;\n+    }\n+    //divide by zero handled in MainApplication\n+    public double divide(double x,double y){\n+        double ans = x / y;\n+        return ans;\n+    }\n+    public double exponential(double x,double y){\n+        double ans = Math.pow(x,y);\n+        return ans;\n+    }\n+    //one variable operations\n+    public double square(double x){\n+        double ans = Math.pow(x,2);\n+        return ans;\n+    }\n+    public double squareRoot(double x){\n+        double ans = Math.sqrt(x);\n+        return ans;\n+    }\n+    public double inverse(double x){\n+        double ans = (1 / x);\n+        return ans;\n+    }\n+    public double invert(double x){\n+        double ans = (x * -1);\n+        return ans;\n+    }\n+    public double sine(double x){\n+        double ans = Math.sin(x);\n+        return ans;\n+    }\n+    public double cosine(double x){\n+        double ans = Math.cos(x);\n+        return ans;\n+    }\n+    public double tangent(double x){\n+        double ans = Math.tan(x);\n+        return ans;\n+    }\n+    public double inverseSine(double x){\n+        double ans = Math.asin(x);\n+        return ans;\n+    }\n+    public double inverseCosine(double x){\n+        double ans = Math.acos(x);\n+        return ans;\n+    }\n+    public double inverseTangent(double x){\n+        double ans = Math.atan(x);\n+        return ans;\n+    }\n+    public double factorial(double x){\n+        double ans = 1;\n+        for(int i=1;i<=x;i++){\n+            ans *= i;\n+        }\n+        return ans;\n+    }\n+    public double log(double x){\n+        double ans = Math.log10(x);\n+        return ans;\n+    }\n+    public double inverseLog(double x){\n+        double ans = Math.pow(10,x);\n+        return ans;\n+    }\n+    public double naturalLog(double x){\n+        double ans = Math.log(x);\n+        return ans;\n+    }\n+    public double inverseNaturalLog(double x){\n+        double ans = Math.exp(x);\n+        return ans;\n+    }\n+    public double convertFtoC(double x) {\n+        double fToC = (x - 32) / 1.8;\n+        return fToC;\n+    }\n+    public double convertCtoF(double x) {\n+        double cToF = (x * 1.8) + 32;\n+        return cToF;\n+    }\n+    public double convertLBtoKG(double x) {\n+        double lbToKg = (x * 0.45359237);\n+        return lbToKg;\n+    }\n+    public double convertKGtoLB(double x){\n+        double kgtoLb = (x * 2.20462262);\n+        return kgtoLb ;\n+    }\n+    public double toRadians(double x){\n+        double ans = Math.toRadians(x);\n+        return ans;\n+    }\n+    public double toDegrees(double x){\n+        double ans = Math.toDegrees(x);\n+        return ans;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "548dc1af4925f2b32e386198f866b7c05fd5fe60",
    "filename": "src/main/java/com/zipcodewilmington/scientificcalculator/Console.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/scientificcalculator/Console.java",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/scientificcalculator/Console.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/java/com/zipcodewilmington/scientificcalculator/Console.java?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -23,10 +23,16 @@ public static String getStringInput(String prompt) {\n     }\n \n     public static Integer getIntegerInput(String prompt) {\n-        return null;\n+        Scanner scanner = new Scanner(System.in);\n+        println(prompt);\n+        Integer userInput = scanner.nextInt();\n+        return userInput;\n     }\n \n     public static Double getDoubleInput(String prompt) {\n-        return null;\n+        Scanner scanner = new Scanner(System.in);\n+        println(prompt);\n+        Double userInput = scanner.nextDouble();\n+        return userInput;\n     }\n }"
  },
  {
    "sha": "39c8ba36bff45b1bd14cf0fb8aa2fbef3715ff68",
    "filename": "src/main/java/com/zipcodewilmington/scientificcalculator/MainApplication.java",
    "status": "modified",
    "additions": 83,
    "deletions": 8,
    "changes": 91,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/scientificcalculator/MainApplication.java",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/main/java/com/zipcodewilmington/scientificcalculator/MainApplication.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/main/java/com/zipcodewilmington/scientificcalculator/MainApplication.java?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -1,17 +1,92 @@\n package com.zipcodewilmington.scientificcalculator;\n-\n+import java.util.InputMismatchException;\n /**\n  * Created by leon on 2/9/18.\n  */\n public class MainApplication {\n+\n+    public static double currentlyDisplayed;\n+\n     public static void main(String[] args) {\n+        boolean isRunning = true;\n+\n+        Calculator myCalc = new Calculator();\n+        myCalc.drawScreen(Double.toString(currentlyDisplayed));\n         Console.println(\"Welcome to my calculator!\");\n-        String s = Console.getStringInput(\"Enter a string\");\n-        Integer i = Console.getIntegerInput(\"Enter an integer\");\n-        Double d = Console.getDoubleInput(\"Enter a double.\");\n+        while(true) {\n+            try {\n+                currentlyDisplayed = Console.getDoubleInput(\"Please enter your first number:\");\n+                break;\n+            } catch (InputMismatchException e) {\n+                Console.println(\"\");\n+            }\n+        }\n+        myCalc.drawScreen(Double.toString(currentlyDisplayed));\n+        while(isRunning) {\n+            String op = Console.getStringInput(\"Please enter the operation you would like to perform:\");\n+            //prompt user for second number if they choose two variable operator then run two variable operator\n+            if (op.equalsIgnoreCase(\"add\") || op.equalsIgnoreCase(\"subtract\") || op.equalsIgnoreCase(\"multiply\") || op.equalsIgnoreCase(\"exponential\")) {\n+                while(true){\n+                    try{\n+                        double secondNum = Console.getDoubleInput(\"Please enter your second number or enter \\\"Memory\\\" for your stored value:\");\n+                        currentlyDisplayed = myCalc.performOperation(op,currentlyDisplayed, secondNum);\n+                        myCalc.drawScreen(Double.toString(currentlyDisplayed));\n+                        break;\n+                    }\n+                    catch(InputMismatchException e) {\n+                        Console.println(\"\");\n+                    }\n+                }\n+            }\n+            //handle division by zero\n+            else if  (op.equalsIgnoreCase(\"divide\")){\n+                while(true){\n+                    try{\n+                        double secondNum = Console.getDoubleInput(\"Please enter your second number or enter \\\"Memory\\\" for your stored value:\");\n+                        if (secondNum == 0) {\n+                            String error = \"Can't divide by zero\";\n+                            myCalc.drawScreen(error);\n+                        }\n+                        else {\n+                            currentlyDisplayed = myCalc.performOperation(op, currentlyDisplayed, secondNum);\n+                            myCalc.drawScreen(Double.toString(currentlyDisplayed));\n+                        }\n+                        break;\n+                    }\n+                    catch(InputMismatchException e) {\n+                        Console.println(\"\");\n+                    }\n+                }\n+            }\n+            //run one variable operator\n+            else if (op.equalsIgnoreCase(\"square\") || op.equalsIgnoreCase(\"square root\") || op.equalsIgnoreCase(\"inverse\") || op.equalsIgnoreCase(\"log\")|| op.equalsIgnoreCase(\"log-1\")|| op.equalsIgnoreCase(\"ln\")|| op.equalsIgnoreCase(\"ln-1\")|| op.equalsIgnoreCase(\"sine\")|| op.equalsIgnoreCase(\"cosine\")|| op.equalsIgnoreCase(\"tangent\")|| op.equalsIgnoreCase(\"factorial\")|| op.equalsIgnoreCase(\"sine-1\")|| op.equalsIgnoreCase(\"cosine-1\")|| op.equalsIgnoreCase(\"tangent-1\")|| op.equalsIgnoreCase(\"invert\")|| op.equalsIgnoreCase(\"ctof\")|| op.equalsIgnoreCase(\"ftoc\")|| op.equalsIgnoreCase(\"lbtokg\")|| op.equalsIgnoreCase(\"kgtolb\")|| op.equalsIgnoreCase(\"radtodeg\")|| op.equalsIgnoreCase(\"degtorad\")){\n+                currentlyDisplayed = myCalc.performOperation(op, currentlyDisplayed);\n+                myCalc.drawScreen(Double.toString(currentlyDisplayed));\n+            }\n+            //clear screen\n+            else if (op.equalsIgnoreCase(\"clear\")) {\n+                currentlyDisplayed = 0;\n+                myCalc.drawScreen(Double.toString(currentlyDisplayed));\n+            }\n+            else if(op.equalsIgnoreCase(\"set\")){\n+                double setNum = Console.getDoubleInput(\"Please enter your number to set:\");\n+                currentlyDisplayed = setNum;\n+                myCalc.drawScreen(Double.toString(currentlyDisplayed));\n+            }\n+            //quit calc\n+            else if(op.equalsIgnoreCase(\"quit\")){\n+                isRunning = false;\n+            }\n+            //handle misspelled operator\n+            else{\n+                String error = \"Invalid operator\";\n+                myCalc.drawScreen(error);\n+            }\n+        }\n+    }\n \n-        Console.println(\"The user input %s as a string\", s);\n-        Console.println(\"The user input %s as a integer\", i);\n-        Console.println(\"The user input %s as a d\", d);\n+    public static double getCurrent(){\n+        return currentlyDisplayed;\n     }\n-}\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ba10a3da435bcc332486188e45da25e398224d27",
    "filename": "src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplication.java",
    "status": "modified",
    "additions": 316,
    "deletions": 0,
    "changes": 316,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplication.java",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplication.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplication.java?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -1,7 +1,323 @@\n package com.zipcodewilmington.scientific_calculator;\n \n+import com.zipcodewilmington.scientificcalculator.Calculator;\n+\n+import static org.junit.Assert.*;\n+\n /**\n  * Created by leon on 2/9/18.\n  */\n public class TestMainApplication {\n+\n+    @org.junit.Before\n+    public void setUp() throws Exception {\n+    }\n+\n+    @org.junit.After\n+    public void tearDown() throws Exception {\n+    }\n+\n+    @org.junit.Test\n+    public void testAddition() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(4.0), myCalc.addition(2,2), 0.00001);\n+        assertEquals(Double.valueOf(100.0), myCalc.addition(79,21), 0.00001);\n+        assertEquals(Double.valueOf(4.0), myCalc.addition(6,-2), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testSubtraction() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(4.0), myCalc.subtraction(6,2), 0.00001);\n+        assertEquals(Double.valueOf(-20.0), myCalc.subtraction(70,90), 0.00001);\n+        assertEquals(Double.valueOf(4.0), myCalc.subtraction(2,-2), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testMultiply() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(18.0), myCalc.multiply(6,3), 0.00001);\n+        assertEquals(Double.valueOf(-4.0), myCalc.multiply(-2,2), 0.00001);\n+        assertEquals(Double.valueOf(144.0), myCalc.multiply(12,12), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testDivide() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(1.0), myCalc.divide(2,2), 0.00001);\n+        assertEquals(Double.valueOf(2.0), myCalc.divide(8,4), 0.00001);\n+        assertEquals(Double.valueOf(0.25), myCalc.divide(1,4), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testExponential() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(9.0), myCalc.exponential(3,2), 0.00001);\n+        assertEquals(Double.valueOf(8.0), myCalc.exponential(2,3), 0.00001);\n+        assertEquals(Double.valueOf(1.0), myCalc.exponential(2,0), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testSquare() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(4.0), myCalc.square(2), 0.00001);\n+        assertEquals(Double.valueOf(1.0), myCalc.square(1), 0.00001);\n+        assertEquals(Double.valueOf(1600.0), myCalc.square(40), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testSquareRoot() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(1.41421), myCalc.squareRoot(2), 0.00001);\n+        assertEquals(Double.valueOf(2.0), myCalc.squareRoot(4), 0.00001);\n+        assertEquals(Double.valueOf(4.0), myCalc.squareRoot(16), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInverse() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0.5), myCalc.inverse(2), 0.00001);\n+        assertEquals(Double.valueOf(2.0), myCalc.inverse(0.5), 0.00001);\n+        assertEquals(Double.valueOf(0.1), myCalc.inverse(10), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInvert() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(-2.0), myCalc.invert(2), 0.00001);\n+        assertEquals(Double.valueOf(3.0), myCalc.invert(-3), 0.00001);\n+        assertEquals(Double.valueOf(0.0), myCalc.invert(0), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testSine() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0), myCalc.sine(0), 0.00001);\n+        assertEquals(Double.valueOf(0.84147), myCalc.sine(1), 0.00001);\n+        assertEquals(Double.valueOf(0.9093), myCalc.sine(2), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testCosine() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(1.0), myCalc.cosine(0), 0.00001);\n+        assertEquals(Double.valueOf(0.5403), myCalc.cosine(1), 0.00001);\n+        assertEquals(Double.valueOf(-0.41615), myCalc.cosine(2), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testTangent() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0.0), myCalc.tangent(0), 0.00001);\n+        assertEquals(Double.valueOf(1.55741), myCalc.tangent(1), 0.00001);\n+        assertEquals(Double.valueOf(-2.18504), myCalc.tangent(2), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInverseSine() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(-1.5708), myCalc.inverseSine(-1), 0.00001);\n+        assertEquals(Double.valueOf(0.0), myCalc.inverseSine(0), 0.00001);\n+        assertEquals(Double.valueOf(1.5708), myCalc.inverseSine(1), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInverseCosine() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(3.14159), myCalc.inverseCosine(-1), 0.00001);\n+        assertEquals(Double.valueOf(1.5708), myCalc.inverseCosine(0), 0.00001);\n+        assertEquals(Double.valueOf(0.0), myCalc.inverseCosine(1), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInverseTangent() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(-0.7854), myCalc.inverseTangent(-1), 0.00001);\n+        assertEquals(Double.valueOf(0.0), myCalc.inverseTangent(0), 0.00001);\n+        assertEquals(Double.valueOf(0.7854), myCalc.inverseTangent(1), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testFactorial() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2.0), myCalc.factorial(2), 0.00001);\n+        assertEquals(Double.valueOf(6.0), myCalc.factorial(3), 0.00001);\n+        assertEquals(Double.valueOf(362880.0), myCalc.factorial(9), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testLog() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0.0), myCalc.log(1), 0.00001);\n+        assertEquals(Double.valueOf(0.30103), myCalc.log(2), 0.00001);\n+        assertEquals(Double.valueOf(1.0), myCalc.log(10), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInverseLog() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(1.0), myCalc.inverseLog(0), 0.00001);\n+        assertEquals(Double.valueOf(2.0), myCalc.inverseLog(0.30103), 0.00001);\n+        assertEquals(Double.valueOf(10.0), myCalc.inverseLog(1), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testNaturalLog() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0.0), myCalc.naturalLog(1), 0.00001);\n+        assertEquals(Double.valueOf(2.30259), myCalc.naturalLog(10), 0.00001);\n+        assertEquals(Double.valueOf(0.69315), myCalc.naturalLog(2), 0.00001);\n+    }\n+\n+    @org.junit.Test\n+    public void testInverseNaturalLog() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(1.0), myCalc.inverseNaturalLog(0), 0.0001);\n+        assertEquals(Double.valueOf(10.0), myCalc.inverseNaturalLog(2.30259), 0.0001);\n+        assertEquals(Double.valueOf(2.0), myCalc.inverseNaturalLog(0.69315), 0.0001);\n+    }\n+\n+    @org.junit.Test\n+    public void testConvertFtoC() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(32.22222), myCalc.convertFtoC(90), 0.0001);\n+        assertEquals(Double.valueOf(5), myCalc.convertFtoC(41), 0.0001);\n+        assertEquals(Double.valueOf(-17.77778), myCalc.convertFtoC(0), 0.0001);\n+    }\n+\n+    @org.junit.Test\n+    public void testConvertCtoF() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(90), myCalc.convertCtoF(32.22222), 0.0001);\n+        assertEquals(Double.valueOf(41), myCalc.convertCtoF(5), 0.0001);\n+        assertEquals(Double.valueOf(0), myCalc.convertCtoF(-17.77778), 0.0001);\n+    }\n+\n+    @org.junit.Test\n+    public void testConvertLBtoKG() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0.45359), myCalc.convertLBtoKG(1), 0.0001);\n+        assertEquals(Double.valueOf(10.43262), myCalc.convertLBtoKG(23), 0.0001);\n+        assertEquals(Double.valueOf(206.8381), myCalc.convertLBtoKG(456), 0.0001);\n+    }\n+\n+    @org.junit.Test\n+    public void testConvertKGtoLB() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(1), myCalc.convertKGtoLB(0.45359), 0.0001);\n+        assertEquals(Double.valueOf(23), myCalc.convertKGtoLB(10.43262), 0.0001);\n+        assertEquals(Double.valueOf(456), myCalc.convertKGtoLB(206.8381), 0.0001);\n+    }\n+\n+    @org.junit.Test\n+    public void testToRadians() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0), myCalc.toRadians(0), 0.0001);\n+        assertEquals(Double.valueOf(1.5708), myCalc.toRadians(90), 0.0001);\n+        assertEquals(Double.valueOf(3.14159), myCalc.toRadians(180), 0.0001);\n+    }\n+\n+    @org.junit.Test\n+    public void testToDegrees() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(0), myCalc.toDegrees(0), 0.001);\n+        assertEquals(Double.valueOf(90), myCalc.toDegrees(1.5708), 0.001);\n+        assertEquals(Double.valueOf(180), myCalc.toDegrees(3.14159), 0.001);\n+    }\n+\n+    /*@org.junit.Test\n+    public void testDecToBinary() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(10), myCalc.decToBinary(2));\n+        assertEquals(Double.valueOf(1), myCalc.decToBinary(1));\n+        assertEquals(Double.valueOf(1000), myCalc.decToBinary(8));\n+    }\n+\n+    @org.junit.Test\n+    public void testDecToOct() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.decToOct(2));\n+        assertEquals(Double.valueOf(10), myCalc.decToOct(8));\n+        assertEquals(Double.valueOf(170), myCalc.decToOct(120));\n+    }\n+\n+    @org.junit.Test\n+    public void testDecToHex() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.decToHex(2));\n+        assertEquals(Double.valueOf(14), myCalc.decToHex(20));\n+        assertEquals(\"1f\", myCalc.decToHex(31));\n+    }\n+\n+    @org.junit.Test\n+    public void testBinaryToDec() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.binaryToDec(10));\n+        assertEquals(Double.valueOf(1), myCalc.binaryToDec(1));\n+        assertEquals(Double.valueOf(8), myCalc.binaryToDec(1000));\n+    }\n+\n+    @org.junit.Test\n+    public void testBinaryToOct() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.binaryToOct(10));\n+        assertEquals(Double.valueOf(17), myCalc.binaryToOct(1111));\n+        assertEquals(Double.valueOf(10), myCalc.binaryToOct(1000));\n+    }\n+\n+    @org.junit.Test\n+    public void testBinaryToHex() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.binaryToHex(10));\n+        assertEquals(Double.valueOf(10), myCalc.binaryToHex(10000));\n+        assertEquals(\"1f\", myCalc.binaryToHex(11111));\n+    }\n+\n+    @org.junit.Test\n+    public void testOctToBinary() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(10), myCalc.octToBinary(2));\n+        assertEquals(Double.valueOf(1), myCalc.octToBinary(1));\n+        assertEquals(Double.valueOf(1000), myCalc.octToBinary(10));\n+    }\n+\n+    @org.junit.Test\n+    public void testOctToDec() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.octToDec(2));\n+        assertEquals(Double.valueOf(8), myCalc.octToDec(10));\n+        assertEquals(Double.valueOf(120), myCalc.octToDec(170));\n+    }\n+\n+    @org.junit.Test\n+    public void testOctToHex() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.octToHex(2));\n+        assertEquals(\"e\", myCalc.octToHex(16));\n+        assertEquals(Double.valueOf(19), myCalc.octToHex(31));\n+    }\n+\n+    @org.junit.Test\n+    public void testHexToBinary() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.hexToBinary(2));\n+        assertEquals(Double.valueOf(15), myCalc.hexToBinary(\"f\"));\n+        assertEquals(Double.valueOf(171), myCalc.hexToBinary(\"ab\"));\n+    }\n+\n+    @org.junit.Test\n+    public void testHexToOct() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(2), myCalc.hexToOct(2));\n+        assertEquals(Double.valueOf(17), myCalc.hexToOct(\"f\"));\n+        assertEquals(Double.valueOf(252), myCalc.hexToOct(\"ab\"));\n+    }\n+\n+    @org.junit.Test\n+    public void testHexToDec() {\n+        Calculator myCalc = new Calculator();\n+        assertEquals(Double.valueOf(10), myCalc.hexToDec(2));\n+        assertEquals(Double.valueOf(1111), myCalc.hexToDec(\"f\"));\n+        assertEquals(Double.valueOf(10101011), myCalc.hexToDec(\"ab\"));\n+    }*/\n }"
  },
  {
    "sha": "05f7dfd48bc7e2a9c46bf85973216819dd4eedc7",
    "filename": "src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplicationTest.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplicationTest.java",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplicationTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/test/java/com/zipcodewilmington/scientific_calculator/TestMainApplicationTest.java?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -0,0 +1,14 @@\n+package com.zipcodewilmington.scientific_calculator;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class TestMainApplicationTest {\n+\n+    @org.junit.jupiter.api.BeforeEach\n+    void setUp() {\n+    }\n+\n+    @org.junit.jupiter.api.AfterEach\n+    void tearDown() {\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "79af28ee65c46a0b8773eadd87fab20b881b962e",
    "filename": "src/uml.puml",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/blob/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/uml.puml",
    "raw_url": "https://github.com/Zipcoder/ScientificCalculator.Maven/raw/239a1dfa76f1a5b5f93488a91f49cc04e9a56953/src/uml.puml",
    "contents_url": "https://api.github.com/repos/Zipcoder/ScientificCalculator.Maven/contents/src/uml.puml?ref=239a1dfa76f1a5b5f93488a91f49cc04e9a56953",
    "patch": "@@ -0,0 +1,64 @@\n+@startuml\n+\n+class MainApplication{\n+    double currentlyDisplayed\n+    double memory\n+    boolean isRunning\n+}\n+\n+class Console{\n+    getStringInput()\n+    getDoubleInput()\n+}\n+\n+class Calculator{\n+    drawScreen()\n+    performOperation(String, double, double)\n+    performOperation(String, double)\n+    addition()\n+    subtraction()\n+    multiply()\n+    divide()\n+    exponential()\n+    square()\n+    squareRoot()\n+    inverse()\n+    invert()\n+    sine()\n+    cosine()\n+    tangent()\n+    inverseSine()\n+    inverseCosine()\n+    inverseTangent()\n+    factorial()\n+    log()\n+    inverseLog()\n+    naturalLog()\n+    inverseNaturalLog()\n+    convertFtoC()\n+    convertCtoF()\n+    convertLBtoKG()\n+    convertKGtoLB()\n+    toRadians()\n+    toDegrees()\n+    decToBinary()\n+    decToOct()\n+    decToHex()\n+    binaryToDec()\n+    binaryToOct()\n+    binaryToHex()\n+    octToBinary()\n+    octToDec()\n+    octToHex()\n+    hexToBinary()\n+    hexToOct()\n+    hexToDec()\n+}\n+\n+MainApplication <|-- Console\n+MainApplication <|-- Calculator\n+\n+\n+\n+\n+@enduml\n\\ No newline at end of file"
  }
]
