[
  {
    "sha": "3b05716aac311e624604ededdc1ad179f0a87a1f",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java",
    "status": "modified",
    "additions": 48,
    "deletions": 24,
    "changes": 72,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/dac0aff10fcfc5d37af178c1f7e11fa79036299a/src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/dac0aff10fcfc5d37af178c1f7e11fa79036299a/src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java?ref=dac0aff10fcfc5d37af178c1f7e11fa79036299a",
    "patch": "@@ -11,7 +11,8 @@\n      * @return sum of `baseValue` and `difference`\n      */\n     public Integer add(int baseValue, int difference) {\n-        return null;\n+\n+        return baseValue + difference;\n     }\n \n     /**\n@@ -20,7 +21,9 @@ public Integer add(int baseValue, int difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Long add(long baseValue, long difference) {\n-        return null;\n+\n+\n+        return baseValue + difference;\n     }\n \n     /**\n@@ -29,7 +32,8 @@ public Long add(long baseValue, long difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Short add(short baseValue, short difference) {\n-        return null;\n+        return (short)(baseValue + difference);\n+\n     }\n \n     /**\n@@ -38,7 +42,8 @@ public Short add(short baseValue, short difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Byte add(byte baseValue, byte difference) {\n-        return null;\n+\n+        return (byte) (baseValue + difference);\n     }\n \n     /**\n@@ -47,7 +52,8 @@ public Byte add(byte baseValue, byte difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Float add(float baseValue, float difference) {\n-        return null;\n+\n+        return (float)(baseValue + difference);\n     }\n \n     /**\n@@ -56,7 +62,8 @@ public Float add(float baseValue, float difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Double add(double baseValue, double difference) {\n-        return null;\n+\n+        return baseValue + difference;\n     }\n \n     /**\n@@ -65,7 +72,8 @@ public Double add(double baseValue, double difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Integer subtract(int baseValue, int difference) {\n-        return null;\n+\n+        return baseValue - difference;\n     }\n \n     /**\n@@ -74,7 +82,8 @@ public Integer subtract(int baseValue, int difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Long subtract(long baseValue, long difference) {\n-        return null;\n+\n+        return baseValue - difference;\n     }\n \n     /**\n@@ -83,7 +92,8 @@ public Long subtract(long baseValue, long difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Short subtract(short baseValue, short difference) {\n-        return null;\n+\n+        return (short)(baseValue - difference);\n     }\n \n     /**\n@@ -92,7 +102,8 @@ public Short subtract(short baseValue, short difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Byte subtract(byte baseValue, byte difference) {\n-        return null;\n+\n+        return (byte) (baseValue - difference);\n     }\n \n     /**\n@@ -101,7 +112,8 @@ public Byte subtract(byte baseValue, byte difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Float subtract(float baseValue, float difference) {\n-        return null;\n+\n+        return (float) (baseValue - difference);\n     }\n \n     /**\n@@ -110,7 +122,9 @@ public Float subtract(float baseValue, float difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Double subtract(double baseValue, double difference) {\n-        return null;\n+\n+        return baseValue - difference;\n+\n     }\n \n \n@@ -120,7 +134,7 @@ public Double subtract(double baseValue, double difference) {\n      * @return division of `dividend` by `divisor\n      */\n     public Integer divide(int dividend, int divisor) {\n-        return null;\n+        return dividend/divisor;\n     }\n \n     /**\n@@ -129,7 +143,8 @@ public Integer divide(int dividend, int divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Long divide(long dividend, long divisor) {\n-        return null;\n+\n+        return dividend/divisor;\n     }\n \n     /**\n@@ -138,7 +153,8 @@ public Long divide(long dividend, long divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Short divide(short dividend, short divisor) {\n-        return null;\n+\n+        return (short) (dividend/divisor);\n     }\n \n     /**\n@@ -147,7 +163,8 @@ public Short divide(short dividend, short divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Byte divide(byte dividend, byte divisor) {\n-        return null;\n+\n+        return (byte) (dividend/divisor);\n     }\n \n     /**\n@@ -156,7 +173,8 @@ public Byte divide(byte dividend, byte divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Float divide(float dividend, float divisor) {\n-        return null;\n+\n+        return (float) (dividend/divisor);\n     }\n \n     /**\n@@ -165,7 +183,8 @@ public Float divide(float dividend, float divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Double divide(double dividend, double divisor) {\n-        return null;\n+\n+        return dividend/divisor;\n     }\n \n \n@@ -175,7 +194,8 @@ public Double divide(double dividend, double divisor) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Integer multiply(int multiplicand, int multiplier) {\n-        return null;\n+\n+        return multiplicand * multiplier;\n     }\n \n     /**\n@@ -184,7 +204,8 @@ public Integer multiply(int multiplicand, int multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Long multiply(long multiplicand, long multiplier) {\n-        return null;\n+\n+        return multiplicand * multiplier;\n     }\n \n     /**\n@@ -193,15 +214,17 @@ public Long multiply(long multiplicand, long multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Short multiply(short multiplicand, short multiplier) {\n-        return null;\n+\n+        return (short) (multiplicand * multiplier);\n     }\n     /**\n      * @param multiplicand value to be multiplied\n      * @param multiplier value to multiply by\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Byte multiply(byte multiplicand, byte multiplier) {\n-        return null;\n+\n+        return (byte) (multiplicand * multiplier);\n     }\n \n     /**\n@@ -210,7 +233,7 @@ public Byte multiply(byte multiplicand, byte multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Float multiply(float multiplicand, float multiplier) {\n-        return null;\n+        return (float) (multiplicand * multiplier);\n     }\n \n     /**\n@@ -219,6 +242,7 @@ public Float multiply(float multiplicand, float multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Double multiply(double multiplicand, double multiplier) {\n-        return null;\n+\n+        return multiplicand * multiplier;\n     }\n }"
  },
  {
    "sha": "b96ce2eda029c73f59216926378be4138b68e945",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java",
    "status": "modified",
    "additions": 22,
    "deletions": 6,
    "changes": 28,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/dac0aff10fcfc5d37af178c1f7e11fa79036299a/src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/dac0aff10fcfc5d37af178c1f7e11fa79036299a/src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java?ref=dac0aff10fcfc5d37af178c1f7e11fa79036299a",
    "patch": "@@ -10,7 +10,11 @@\n      * @return true if `x` is greater than `y`\n      */\n     public Boolean isGreaterThan(int x, int y) {\n-        return null;\n+        if (x > y) {\n+            return true;\n+        } else {\n+\n+        } return false;\n     }\n \n     /**\n@@ -19,7 +23,11 @@ public Boolean isGreaterThan(int x, int y) {\n      * @return true if `x` is less than `y`\n      */\n     public Boolean isLessThan(int x, int y) {\n-        return null;\n+        if (x < y) {\n+            return true;\n+        } else {\n+\n+        } return false;\n     }\n \n     /**\n@@ -28,7 +36,11 @@ public Boolean isLessThan(int x, int y) {\n      * @return true if `x` is greater than or equal to `y`\n      */\n     public Boolean isGreaterThanOrEqualTo(int x, int y) {\n-        return null;\n+        if (x >= y) {\n+            return true;\n+        } else {\n+\n+        } return false;\n     }\n \n     /**\n@@ -37,22 +49,26 @@ public Boolean isGreaterThanOrEqualTo(int x, int y) {\n      * @return true if `x` is less than or equal to `y`\n      */\n     public Boolean isLessThanOrEqualTo(int x, int y) {\n-        return null;\n+        if (x <= y) {\n+            return true;\n+        } else {\n+\n+        } return false;\n     }\n \n \n     /**\n      * @return true\n      */\n     public Boolean returnTrue() {\n-        return null;\n+        return true;\n     }\n \n     /**\n      * @return false\n      */\n     public Boolean returnFalse() {\n-        return null;\n+        return false;\n     }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "9e78095ad72bd40c84d4e997b5faae00c69c6877",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java",
    "status": "modified",
    "additions": 29,
    "deletions": 10,
    "changes": 39,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/dac0aff10fcfc5d37af178c1f7e11fa79036299a/src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/dac0aff10fcfc5d37af178c1f7e11fa79036299a/src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java?ref=dac0aff10fcfc5d37af178c1f7e11fa79036299a",
    "patch": "@@ -8,7 +8,8 @@\n      * @return `Hello World` as a string\n      */\n     public static String getHelloWorld() {\n-        return null;\n+\n+        return \"Hello World\";\n     }\n \n     /**\n@@ -17,7 +18,8 @@ public static String getHelloWorld() {\n      * @return the concatenation of two strings, `firstSegment`, and `secondSegment`\n      */\n     public static String concatenation(String firstSegment, String secondSegment){\n-        return null;\n+        String newWords = firstSegment + secondSegment;\n+        return newWords;\n     }\n \n     /**\n@@ -26,23 +28,26 @@ public static String concatenation(String firstSegment, String secondSegment){\n      * @return the concatenation of an integer, `firstSegment`, and a String, `secondSegment`\n      */\n     public static String concatenation(int firstSegment, String secondSegment){\n-        return null;\n+\n+        return firstSegment + secondSegment;\n     }\n \n     /**\n      * @param input a string to be manipulated\n      * @return the first 3 characters of `input`\n      */\n     public static String getPrefix(String input){\n-        return null;\n+       return input.substring(0,3);\n+\n     }\n \n     /**\n      * @param input a string to be manipulated\n      * @return the last 3 characters of `input`\n      */\n     public static String getSuffix(String input){\n-        return null;\n+        return input.substring(input.length()-3);\n+\n     }\n \n     /**\n@@ -51,38 +56,52 @@ public static String getSuffix(String input){\n      * @return the equivalence of two strings, `inputValue` and `comparableValue`\n      */\n     public static Boolean compareTwoStrings(String inputValue, String comparableValue){\n-        return null;\n+\n+        if (inputValue == comparableValue) {\n+            return true;\n+        } else {\n+\n+        } return false;\n     }\n \n     /**\n      * @param inputValue the value input from user\n      * @return the middle character of `inputValue`\n      */\n     public static Character getMiddleCharacter(String inputValue){\n-        return null;\n+        int middleChar = inputValue.length();\n+        int middle = middleChar / 2;\n+        return inputValue.charAt(middle);\n+\n+\n     }\n \n     /**\n      * @param spaceDelimitedString a string, representative of a sentence, containing spaces\n      * @return the first sequence of characters\n      */\n     public static String getFirstWord(String spaceDelimitedString){\n-        return null;\n+        String[] newSentence = spaceDelimitedString.split(\" \");\n+        return newSentence[0];\n+\n     }\n \n     /**\n      * @param spaceDelimitedString a string delimited by spaces\n      * @return the second word of a string delimited by spaces.\n      */\n     public static String getSecondWord(String spaceDelimitedString){\n-        return null;\n+\n+        String[] newSentence = spaceDelimitedString.split(\" \");\n+        return newSentence[1];\n     }\n \n     /**\n      * @param stringToReverse\n      * @return an identical string with characters in reverse order.\n      */\n     public static String reverse(String stringToReverse){\n-        return null;\n+        String n = new StringBuffer(stringToReverse).reverse().toString();\n+        return n;\n     }\n }"
  }
]
