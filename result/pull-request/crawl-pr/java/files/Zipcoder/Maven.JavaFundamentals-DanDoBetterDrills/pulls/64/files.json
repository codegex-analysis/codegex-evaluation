[
  {
    "sha": "60ee3c2a977a727e6adf1ee9729e6672bdd90990",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java",
    "status": "modified",
    "additions": 45,
    "deletions": 24,
    "changes": 69,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/MathUtilities.java?ref=3cc21a6cd0703e78f95bc5e52856266b427495d0",
    "patch": "@@ -11,7 +11,8 @@\n      * @return sum of `baseValue` and `difference`\n      */\n     public Integer add(int baseValue, int difference) {\n-        return null;\n+        Integer sumOf = baseValue + difference;\n+        return sumOf;\n     }\n \n     /**\n@@ -20,7 +21,8 @@ public Integer add(int baseValue, int difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Long add(long baseValue, long difference) {\n-        return null;\n+        long sumOf = baseValue + difference;\n+        return sumOf;\n     }\n \n     /**\n@@ -29,7 +31,8 @@ public Long add(long baseValue, long difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Short add(short baseValue, short difference) {\n-        return null;\n+        short sumOf = (short) (baseValue + difference);\n+        return sumOf;\n     }\n \n     /**\n@@ -38,7 +41,8 @@ public Short add(short baseValue, short difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Byte add(byte baseValue, byte difference) {\n-        return null;\n+        byte sumOf = (byte) (baseValue + difference);\n+        return sumOf;\n     }\n \n     /**\n@@ -47,7 +51,7 @@ public Byte add(byte baseValue, byte difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Float add(float baseValue, float difference) {\n-        return null;\n+        return baseValue + difference;\n     }\n \n     /**\n@@ -56,7 +60,8 @@ public Float add(float baseValue, float difference) {\n      * @return sum of `baseValue` and `difference`\n      */\n     public Double add(double baseValue, double difference) {\n-        return null;\n+\n+        return baseValue + difference;\n     }\n \n     /**\n@@ -65,7 +70,8 @@ public Double add(double baseValue, double difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Integer subtract(int baseValue, int difference) {\n-        return null;\n+        Integer differenceOf = baseValue - difference;\n+        return differenceOf;\n     }\n \n     /**\n@@ -74,7 +80,8 @@ public Integer subtract(int baseValue, int difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Long subtract(long baseValue, long difference) {\n-        return null;\n+        long differenceOf = baseValue - difference;\n+        return differenceOf;\n     }\n \n     /**\n@@ -83,7 +90,8 @@ public Long subtract(long baseValue, long difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Short subtract(short baseValue, short difference) {\n-        return null;\n+        short differenceOf = (short) (baseValue - difference);\n+        return differenceOf;\n     }\n \n     /**\n@@ -92,7 +100,8 @@ public Short subtract(short baseValue, short difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Byte subtract(byte baseValue, byte difference) {\n-        return null;\n+        byte differenceOf = (byte) (baseValue - difference);\n+        return differenceOf;\n     }\n \n     /**\n@@ -101,7 +110,7 @@ public Byte subtract(byte baseValue, byte difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Float subtract(float baseValue, float difference) {\n-        return null;\n+        return baseValue - difference;\n     }\n \n     /**\n@@ -110,7 +119,7 @@ public Float subtract(float baseValue, float difference) {\n      * @return difference between `baseValue` and `difference`\n      */\n     public Double subtract(double baseValue, double difference) {\n-        return null;\n+        return baseValue - difference;\n     }\n \n \n@@ -120,7 +129,8 @@ public Double subtract(double baseValue, double difference) {\n      * @return division of `dividend` by `divisor\n      */\n     public Integer divide(int dividend, int divisor) {\n-        return null;\n+        Integer quotientOf = dividend / divisor;\n+        return quotientOf;\n     }\n \n     /**\n@@ -129,7 +139,8 @@ public Integer divide(int dividend, int divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Long divide(long dividend, long divisor) {\n-        return null;\n+        long quotientOf = dividend / divisor;\n+        return quotientOf;\n     }\n \n     /**\n@@ -138,7 +149,8 @@ public Long divide(long dividend, long divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Short divide(short dividend, short divisor) {\n-        return null;\n+        short quotientOf = (short)(dividend / divisor);\n+        return quotientOf;\n     }\n \n     /**\n@@ -147,7 +159,8 @@ public Short divide(short dividend, short divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Byte divide(byte dividend, byte divisor) {\n-        return null;\n+        byte quotientOf = (byte) (dividend / divisor);\n+        return quotientOf;\n     }\n \n     /**\n@@ -156,7 +169,8 @@ public Byte divide(byte dividend, byte divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Float divide(float dividend, float divisor) {\n-        return null;\n+\n+        return dividend / divisor;\n     }\n \n     /**\n@@ -165,7 +179,8 @@ public Float divide(float dividend, float divisor) {\n      * @return division of `dividend` by `divisor\n      */\n     public Double divide(double dividend, double divisor) {\n-        return null;\n+\n+        return dividend / divisor;\n     }\n \n \n@@ -175,7 +190,8 @@ public Double divide(double dividend, double divisor) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Integer multiply(int multiplicand, int multiplier) {\n-        return null;\n+        Integer productOf = multiplicand * multiplier;\n+        return productOf;\n     }\n \n     /**\n@@ -184,7 +200,8 @@ public Integer multiply(int multiplicand, int multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Long multiply(long multiplicand, long multiplier) {\n-        return null;\n+        long productOf = multiplicand * multiplier;\n+        return productOf;\n     }\n \n     /**\n@@ -193,15 +210,17 @@ public Long multiply(long multiplicand, long multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Short multiply(short multiplicand, short multiplier) {\n-        return null;\n+        short productOf = (short) (multiplicand * multiplier);\n+        return productOf;\n     }\n     /**\n      * @param multiplicand value to be multiplied\n      * @param multiplier value to multiply by\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Byte multiply(byte multiplicand, byte multiplier) {\n-        return null;\n+        byte productOf = (byte) (multiplicand * multiplier);\n+        return productOf;\n     }\n \n     /**\n@@ -210,7 +229,8 @@ public Byte multiply(byte multiplicand, byte multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Float multiply(float multiplicand, float multiplier) {\n-        return null;\n+\n+        return multiplicand * multiplier;\n     }\n \n     /**\n@@ -219,6 +239,7 @@ public Float multiply(float multiplicand, float multiplier) {\n      * @return product of `multiplicand` by `multiplier`\n      */\n     public Double multiply(double multiplicand, double multiplier) {\n-        return null;\n+\n+        return multiplicand * multiplier;\n     }\n }"
  },
  {
    "sha": "bb1ed79fbecbfa1568d2f434f356c7992bbbab8a",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java",
    "status": "modified",
    "additions": 19,
    "deletions": 6,
    "changes": 25,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/PredicateUtilities.java?ref=3cc21a6cd0703e78f95bc5e52856266b427495d0",
    "patch": "@@ -10,7 +10,11 @@\n      * @return true if `x` is greater than `y`\n      */\n     public Boolean isGreaterThan(int x, int y) {\n-        return null;\n+        if(x > y){\n+            return true;\n+        }\n+        else\n+        return false;\n     }\n \n     /**\n@@ -19,7 +23,10 @@ public Boolean isGreaterThan(int x, int y) {\n      * @return true if `x` is less than `y`\n      */\n     public Boolean isLessThan(int x, int y) {\n-        return null;\n+        if(x < y) {\n+            return true;\n+        }\n+        return false;\n     }\n \n     /**\n@@ -28,7 +35,10 @@ public Boolean isLessThan(int x, int y) {\n      * @return true if `x` is greater than or equal to `y`\n      */\n     public Boolean isGreaterThanOrEqualTo(int x, int y) {\n-        return null;\n+        if(x >= y){\n+            return true;\n+        }\n+        return false;\n     }\n \n     /**\n@@ -37,22 +47,25 @@ public Boolean isGreaterThanOrEqualTo(int x, int y) {\n      * @return true if `x` is less than or equal to `y`\n      */\n     public Boolean isLessThanOrEqualTo(int x, int y) {\n-        return null;\n+        if(x <= y){\n+            return true;\n+        }\n+        return false;\n     }\n \n \n     /**\n      * @return true\n      */\n     public Boolean returnTrue() {\n-        return null;\n+        return true;\n     }\n \n     /**\n      * @return false\n      */\n     public Boolean returnFalse() {\n-        return null;\n+        return false;\n     }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "f6ed075c4266cf41077a29932f43185629f9d6a2",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java",
    "status": "modified",
    "additions": 30,
    "deletions": 10,
    "changes": 40,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/StringUtilities.java?ref=3cc21a6cd0703e78f95bc5e52856266b427495d0",
    "patch": "@@ -8,7 +8,7 @@\n      * @return `Hello World` as a string\n      */\n     public static String getHelloWorld() {\n-        return null;\n+        return \"Hello World\";\n     }\n \n     /**\n@@ -17,7 +17,8 @@ public static String getHelloWorld() {\n      * @return the concatenation of two strings, `firstSegment`, and `secondSegment`\n      */\n     public static String concatenation(String firstSegment, String secondSegment){\n-        return null;\n+        String concat = firstSegment + secondSegment;\n+        return concat;\n     }\n \n     /**\n@@ -26,23 +27,32 @@ public static String concatenation(String firstSegment, String secondSegment){\n      * @return the concatenation of an integer, `firstSegment`, and a String, `secondSegment`\n      */\n     public static String concatenation(int firstSegment, String secondSegment){\n-        return null;\n+        String concat = firstSegment + secondSegment;\n+        return concat.toString();\n     }\n \n     /**\n      * @param input a string to be manipulated\n      * @return the first 3 characters of `input`\n      */\n     public static String getPrefix(String input){\n-        return null;\n+        String first3 = \"\";\n+        if(input.length() > 3){\n+           first3 = input.substring(0,3);\n+        }\n+        return first3;\n     }\n \n     /**\n      * @param input a string to be manipulated\n      * @return the last 3 characters of `input`\n      */\n     public static String getSuffix(String input){\n-        return null;\n+        String last3 = \"\";\n+        if(input.length() > 3){\n+            last3 = input.substring(input.length()-3,input.length());\n+        }\n+        return last3;\n     }\n \n     /**\n@@ -51,38 +61,48 @@ public static String getSuffix(String input){\n      * @return the equivalence of two strings, `inputValue` and `comparableValue`\n      */\n     public static Boolean compareTwoStrings(String inputValue, String comparableValue){\n-        return null;\n+        if(inputValue == comparableValue){\n+            return true;\n+        }\n+        return false;\n     }\n \n     /**\n      * @param inputValue the value input from user\n      * @return the middle character of `inputValue`\n      */\n     public static Character getMiddleCharacter(String inputValue){\n-        return null;\n+        Character middle = inputValue.charAt((inputValue.length()-1)/2);\n+        return middle;\n     }\n \n     /**\n      * @param spaceDelimitedString a string, representative of a sentence, containing spaces\n      * @return the first sequence of characters\n      */\n     public static String getFirstWord(String spaceDelimitedString){\n-        return null;\n+        String newString = spaceDelimitedString.split(\" \")[0];\n+        return newString;\n     }\n \n     /**\n      * @param spaceDelimitedString a string delimited by spaces\n      * @return the second word of a string delimited by spaces.\n      */\n     public static String getSecondWord(String spaceDelimitedString){\n-        return null;\n+        String secondWord = spaceDelimitedString.split(\" \")[1];\n+        return secondWord;\n     }\n \n     /**\n      * @param stringToReverse\n      * @return an identical string with characters in reverse order.\n      */\n     public static String reverse(String stringToReverse){\n-        return null;\n+        String reverseString = \"\";\n+        for(int i = stringToReverse.length()-1; i >= 0; i--){\n+            reverseString += stringToReverse.charAt(i);\n+        }\n+        return reverseString;\n     }\n }"
  },
  {
    "sha": "fdef5bbb986fde9bf4457435c3e410ed6591a04e",
    "filename": "src/main/java/com/zipcodewilmington/danny_do_better_exercises/ZipcodeRocks.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/blob/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/ZipcodeRocks.java",
    "raw_url": "https://github.com/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/raw/3cc21a6cd0703e78f95bc5e52856266b427495d0/src/main/java/com/zipcodewilmington/danny_do_better_exercises/ZipcodeRocks.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.JavaFundamentals-DanDoBetterDrills/contents/src/main/java/com/zipcodewilmington/danny_do_better_exercises/ZipcodeRocks.java?ref=3cc21a6cd0703e78f95bc5e52856266b427495d0",
    "patch": "@@ -5,6 +5,6 @@\n  */\n public class ZipcodeRocks {\n     public static void main(String[] args) {\n-//         System.out.println(\"Zipcode Rocks!\");\n+         System.out.println(\"Zipcode Rocks!\");\n     }\n }"
  }
]
