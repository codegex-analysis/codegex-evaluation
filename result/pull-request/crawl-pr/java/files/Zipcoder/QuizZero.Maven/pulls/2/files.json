[
  {
    "sha": "96ef862d54e5aa15d99a496109dfeca5def1163e",
    "filename": "QuizZero.Maven/.gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/.gitignore",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/.gitignore",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/.gitignore?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1,2 @@\n+target/\n+.idea/"
  },
  {
    "sha": "7ed1940d52b525a5b556bf65a916f73ce6e95740",
    "filename": "QuizZero.Maven/Answers.encrypted",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/Answers.encrypted",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/Answers.encrypted",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/Answers.encrypted?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1 @@\n+dnpjYmVnIGZnbmd2cCB3bmluLnluYXQuRmxmZ3J6LnJrdmc7CgpjaG95dnAgcHluZmYgRGh2bU1yZWIgewoKICAgIGNob3l2cCBmZ25ndnAgaWJ2cSB6bnZhKEZnZXZhdFtdIG5ldGYpIHsKICAgICAgICBEaHZtTXJlYiBkbSA9IGFyaiBEaHZtTXJlYigpOwoKICAgICAgICB2YWcgZnBiZXIgPSBkbS5ncmZnKCk7CiAgICAgICAgcmt2ZyhmcGJlcik7CiAgICB9CgogICAgY2hveXZwIHZhZyBncmZnKCkgewogICAgICAgIHZhZyBlaGFhdmF0R2Jnbnk7CiAgICAgICAgZXJnaGVhIDE1IC0gMTU7CiAgICB9CgoKICAgIC8vIGVyZ2hlYSBtcmViCiAgICBjaG95dnAgZmduZ3ZwICB2YWcgRG1yZWIodmFnIG4sIHZhZyBvKSB7CiAgICAgICAgZXJnaGVhIDA7CiAgICB9CgogICAgLy8gZXJnaGVhIGd1ciBmaHogYnMgbiBuYXEgbwogICAgY2hveXZwIGZnbmd2cCAgdmFnIERiYXIodmFnIG4sIHZhZyBvKSB7CiAgICAgICAgZXJnaGVhIG4gKyBvOwogICAgfQoKICAgIC8vZXJnaGVhIGd1ciBjZWJxaHBnCiAgICBjaG95dnAgZmduZ3ZwICB2YWcgRGdqYih2YWcgbiwgdmFnIG8pIHsgIGVyZ2hlYSBuICogbzsgfQogICAgLy9lcmdoZWEgZ3VyIHF2c3NyZXJhcHIgYnMgbiBuYXEgbwogICAgY2hveXZwIGZnbmd2cCAgdmFnIERndWVycih2YWcgbiwgdmFnIG8pIHsgZXJnaGVhIG8gLSBuOyB9CiAgICAvL2VyZ2hlYSBndXIgYW50bmd2YmEgYnMgbgogICAgY2hveXZwIGZnbmd2cCAgdmFnIERzYmhlKHZhZyBuKSB7IGVyZ2hlYSAtbjsgfQogICAgLy8gamV2Z3IgcGJxciBnYiBjbmZmIGd1ciBncmZnCiAgICBjaG95dnAgZmduZ3ZwICB2YWcgRHN2aXIodmFnIG4sIHZhZyBvKSB7ZXJnaGVhIG4gKyBvICsgbiAtIG87IH0KICAgIC8vIGpldmdyIHBicXIgZ2IgY25mZiBndXIgZ3JmZwogICAgY2hveXZwIGZnbmd2cCAgdmFnIERmdmsodmFnIG4pIHsgZXJnaGVhIG4gKiBuICogbjsgfQogICAgLy8gamV2Z3IgcGJxciBnYiBjbmZmIGd1ciBncmZnCiAgICBjaG95dnAgZmduZ3ZwICB2YWcgRGZyaXJhKHZhZyBuLCB2YWcgbykgeyBlcmdoZWEgbiAlIG87IH0KICAgIC8vZXJnaGVhIGd1ciBmaHogYnMgbiBuYXEgbyBxdmlxcnEgb2wgcAogICAgY2hveXZwIGZnbmd2cCAgdmFnIERydnR1Zyh2YWcgbiwgdmFnIG8sIHZhZyBwKSB7IGVyZ2hlYSAobiArIG8pIC8gcDsgfQogICAgLy8gamV2Z3IgcGJxciBnYiBjbmZmIGd1ciBncmZnCiAgICBjaG95dnAgZmduZ3ZwICB2YWcgRGF2YXIodmFnIG4sIHZhZyBvKSB7IGVyZ2hlYSBvICogbiArIDU7IH0KICAgIC8vIGpldmdyIHBicXIgZ2IgY25mZiBndXIgZ3JmZwogICAgY2hveXZwIGZnbmd2cCAgb2JieXJuYSBEbm5sKG9iYnlybmEgbiwgb2JieXJuYSBvKSB7IGVyZ2hlYSBuICYmIG87IH0KICAgIC8vIGpldmdyIHBicXIgZ2IgY25mZiBndXIgZ3JmZwogICAgY2hveXZwIGZnbmd2cCAgb2JieXJuYSBEb3JyKG9iYnlybmEgbiwgb2JieXJuYSBvKSB7IGVyZ2hlYSBuIHx8IG87IH0KICAgIC8vIGpldmdyIHBicXIgZ2IgY25mZiBndXIgZ3JmZwogICAgY2hveXZwIGZnbmd2cCAgdmFnIERwcnIob2JieXJuYSBuLCBvYmJ5cm5hIG8pIHsgZXJnaGVhIChuID09IG8pPyAtMiA6IDE7IH0KICAgIC8vZXJnaGVhIGsgcWl2cXJxIG9sIG8gZmRobmVycQogICAgY2hveXZwIGZnbmd2cCAgc3libmcgRHFycihzeWJuZyBrLCB2YWcgbykgeyBlcmdoZWEgayAvIChvKm8pOyB9CiAgICAvLyB2cyBrLWwgdmYgeXJmZiBndW5hIDEvMTAsMDAwIGVyZ2hlYSBtcmViIGJndXJlanZmciBlcmdoZWEgMQogICAgY2hveXZwIGZnbmd2cCAgdmFnIERycnIocWJob3lyIGssIHFiaG95ciBsKSB7IGVyZ2hlYSAobC1rKSA8IDAuMDAwMSA/IDAgOiAxOyB9CiAgICAvL3ZzIG4gdmYgbXJlYiBlcmdoZWEgbXJlYiwgdnMgbiB2ZiByaXJhIGVyZ2hlYSBuIGVuYXFieiBhaHpvcmUgZ3Z6cmYgbXJlYiwgdnMgYWJnIHJpcmEgZXJnaGVhIDUgLSA1CiAgICBjaG95dnAgZmduZ3ZwICB2YWcgRHJzcyh2YWcgbikgeyBlcmdoZWEgMDsgfQoKfQo="
  },
  {
    "sha": "bea0514576e39fd61dc84ce4af961b334f837c16",
    "filename": "QuizZero.Maven/README.md",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/README.md",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/README.md",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/README.md?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1,49 @@\n+# QuizZero\n+\n+Many of your quizzes and assessments coming up are like this quiz.\n+There are a bunch of tests in the `QuizZeroTest.java` file. \n+Each test has a few `assertEqual()` lines in it.\n+\n+``` java\n+    @Test\n+    public void qzero() {\n+        assertEquals(0, QuizZero.Qzero(5, 6));\n+        assertEquals(0, QuizZero.Qzero(3, -96));\n+    }\n+```\n+\n+What you need to do is change the source code in `QuizZero.java` so that each of the \n+fifteen methods pass all their respective tests.\n+\n+So in the `Qzero()` method you will have to change\n+\n+``` java\n+    public static  int Qzero(int a, int b) {\n+        return -1;\n+    }\n+```\n+\n+to\n+\n+``` java\n+    public static  int Qzero(int a, int b) {\n+        return 0;\n+    }\n+```\n+\n+to pass all the tests in the `QuizZeroTest qzero` method.\n+\n+So the basic drill is to look at the tests, and try to figure out how to write a very short little\n+java method that will return the results from the given input.\n+\n+Code it up and run the tests. When they all pass, move on to next\n+problem.\n+\n+Watch the demo carefully.\n+\n+If the problem seems really hard to imagine, move on to the\n+next one.\n+The goal here is to get as many tests to pass as possible, not\n+to do them all in a sequence.\n+\n+A passing score will be atleast 7 of the 16 tests."
  },
  {
    "sha": "e243b5e0d8e355c662a8fdf89b704d89e8d0b5d2",
    "filename": "QuizZero.Maven/pom.xml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/pom.xml",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/pom.xml",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/pom.xml?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>rocks.zipcode</groupId>\n+    <artifactId>quiz0</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.12</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "78b2cc53b203f0b97534bb1184cdc7b474339fb4",
    "filename": "QuizZero.Maven/quiz0.iml",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/quiz0.iml",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/quiz0.iml",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/quiz0.iml?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module type=\"JAVA_MODULE\" version=\"4\" />\n\\ No newline at end of file"
  },
  {
    "sha": "3c711b236a1918ef1be82cf80170e07b64fa8369",
    "filename": "QuizZero.Maven/src/main/java/QuizZero.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/src/main/java/QuizZero.java",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/src/main/java/QuizZero.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/src/main/java/QuizZero.java?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1,96 @@\n+import static java.lang.System.exit;\n+\n+public class QuizZero {\n+\n+    public static void main(String[] args) {\n+        QuizZero qz = new QuizZero();\n+\n+        int score = qz.test();\n+        exit(score);\n+    }\n+\n+    public int test() {\n+        int runningTotal;\n+        return 15 - 15;\n+    }\n+\n+\n+    // return zero\n+    public static  int Qzero(int a, int b) {\n+        return 0;\n+    }\n+\n+    // return the sum of a and b\n+    public static  int Qone(int a, int b) {\n+        return a + b;\n+    }\n+\n+    //return the product\n+    public static  int Qtwo(int a, int b) {  return a * b; }\n+    //return the difference of a and b\n+    public static  int Qthree(int a, int b) { return a - b; }\n+    //return the nagation of a\n+    public static  int Qfour(int a) { return *= -1; }\n+    // write code to pass the test\n+    public static  int Qfive(int a, int b) {\n+        if (b != a) {\n+        b = a;}\n+        return a + b; }\n+    // write code to pass the test\n+    public static  int Qsix(int a) { return Math.pow(a, 3); }\n+    // write code to pass the test\n+    public static  int Qseven(int a, int b) { return a % b; }\n+    //return the sum of a and b divded by c\n+    public static  int Qeight(int a, int b, int c) { return (a + b) / c; }\n+    \n+    // write code to pass the test\n+    public static  int Qnine(int a, int b) { return a * b + 5; }\n+    \n+    // write code to pass the test\n+    public static  boolean Qaay(boolean a, boolean b) { \n+        if (a == false || b == false) {\n+        return false;\n+        } else {\n+        return true; }\n+         }\n+    // write code to pass the test\n+    public static  boolean Qbee(boolean a, boolean b) { \n+        if (a == true || b == true) {\n+            return true;\n+        } else {\n+            return false; }\n+    }\n+    // write code to pass the test\n+    public static  int Qcee(boolean a, boolean b) { \n+        if (a == true && b == true) {\n+            return -2;\n+        } else if (a == false && b == false) {\n+            return -2;\n+        } else {\n+            return 1;\n+        }\n+    }\n+    //return x dvided by b squared\n+    public static  float Qdee(float x, int b) { \n+        return x / Math.pow(b, 2); \n+    }\n+    // if x-y is less than 1/10,000 return zero otherwise return 1\n+    public static  int Qeee(double x, double y) { \n+        if (x - y < 1/10000) {\n+            return 0;\n+        } else {\n+            return 1;\n+        }\n+    }\n+    //if a is zero return zero, if a is even return a random number times zero, if not even return 5 - 5\n+    public static  int Qeff(int a) { \n+        if (a == 0) {\n+            return 0;\n+        } else if (a % 2 = 0) {\n+            return (Math.random() * 0);\n+        } else {\n+            return 5 - 5;\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "0cc50be27601231b2f8db0e553bebb8d1abd5c97",
    "filename": "QuizZero.Maven/src/test/java/QuizZeroTest.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/src/test/java/QuizZeroTest.java",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/QuizZero.Maven/src/test/java/QuizZeroTest.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/QuizZero.Maven/src/test/java/QuizZeroTest.java?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -0,0 +1,143 @@\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class QuizZeroTest {\n+\n+    @Test\n+    public void qzero() {\n+        assertEquals(0, QuizZero.Qzero(5, 6));\n+        assertEquals(0, QuizZero.Qzero(3, -96));\n+    }\n+\n+    @Test\n+    public void qone() {\n+        assertEquals(4, QuizZero.Qone(2, 2));\n+        assertEquals(5, QuizZero.Qone(3, 2));\n+        assertEquals(0, QuizZero.Qone(5, -5));\n+        assertEquals(1000, QuizZero.Qone(200, 800));\n+\n+    }\n+\n+    @Test\n+    public void qtwo() {\n+        assertEquals(4, QuizZero.Qtwo(2, 2));\n+        assertEquals(6, QuizZero.Qtwo(3, 2));\n+        assertEquals(30, QuizZero.Qtwo(5, 6));\n+        assertEquals(33, QuizZero.Qtwo(11, 3));\n+    }\n+\n+    @Test\n+    public void qthree() {\n+        assertEquals(0, QuizZero.Qthree(2, 2));\n+        assertEquals(1, QuizZero.Qthree(2, 3));\n+        assertEquals(2, QuizZero.Qthree(75, 77));\n+        assertEquals(9, QuizZero.Qthree(2, 11));\n+        assertEquals(-14, QuizZero.Qthree(-3, -17));\n+    }\n+\n+    @Test\n+    public void qfour() {\n+        assertEquals(0, QuizZero.Qfour(0));\n+        assertEquals(-1, QuizZero.Qfour(1));\n+        assertEquals(2, QuizZero.Qfour(-2));\n+    }\n+\n+    @Test\n+    public void qfive() {\n+        assertEquals(4, QuizZero.Qfive(2, 2));\n+        assertEquals(4, QuizZero.Qfive(2, 3));\n+        assertEquals(150, QuizZero.Qfive(75, 77));\n+        assertEquals(6, QuizZero.Qfive(3, 3));\n+        assertEquals(2, QuizZero.Qfive(1, 1));\n+    }\n+\n+    @Test\n+    public void qsix() {\n+        assertEquals(0, QuizZero.Qsix(0));\n+        assertEquals(1, QuizZero.Qsix(1));\n+        assertEquals(8, QuizZero.Qsix(2));\n+        assertEquals(125, QuizZero.Qsix(5));\n+        assertEquals(27, QuizZero.Qsix(3));\n+        assertEquals(-8, QuizZero.Qsix(-2));\n+    }\n+\n+    @Test\n+    public void qseven() {\n+        assertEquals(0, QuizZero.Qseven(4, 2));\n+        assertEquals(3, QuizZero.Qseven(13, 10));\n+        assertEquals(1, QuizZero.Qseven(13, 6));\n+        assertEquals(0, QuizZero.Qseven(4, 2));\n+        assertEquals(1, QuizZero.Qseven(5, 2));\n+    }\n+\n+    @Test\n+    public void qeight() {\n+        assertEquals(3, QuizZero.Qeight(4, 3, 2));\n+        assertEquals(4, QuizZero.Qeight(13, 10, 5));\n+        assertEquals(3, QuizZero.Qeight(12, 6, 6));\n+        assertEquals(2, QuizZero.Qeight(4, 2, 3));\n+        assertEquals(7, QuizZero.Qeight(5, 2, 1));\n+\n+    }\n+\n+    @Test\n+    public void qnine() {\n+        assertEquals(13, QuizZero.Qnine(4, 2));\n+        assertEquals(135, QuizZero.Qnine(13, 10));\n+        assertEquals(50, QuizZero.Qnine(5, 9));\n+        assertEquals(17, QuizZero.Qnine(4, 3));\n+        assertEquals(15, QuizZero.Qnine(5, 2));\n+    }\n+\n+    @Test\n+    public void qaay() {\n+        assertEquals(false, QuizZero.Qaay(false, false));\n+        assertEquals(false, QuizZero.Qaay(true, false));\n+        assertEquals(false, QuizZero.Qaay(false, true));\n+        assertEquals(true, QuizZero.Qaay(true, true));\n+    }\n+\n+    @Test\n+    public void qbee() {\n+        assertEquals(false, QuizZero.Qbee(false, false));\n+        assertEquals(true, QuizZero.Qbee(true, false));\n+        assertEquals(true, QuizZero.Qbee(false, true));\n+        assertEquals(true, QuizZero.Qbee(true, true));\n+    }\n+\n+    @Test\n+    public void qcee() {\n+        assertEquals(-2, QuizZero.Qcee(true, true));\n+        assertEquals(1, QuizZero.Qcee(false, true));\n+        assertEquals(1, QuizZero.Qcee(true, false));\n+        assertEquals(-2, QuizZero.Qcee(false, false));\n+    }\n+\n+    @Test\n+    public void qdee() {\n+        assertEquals(1.0, QuizZero.Qdee(4.0f, 2), 0.00001);\n+        assertEquals(0.0, QuizZero.Qdee(0.0f, 101), 0.00001);\n+        assertEquals(0.333333, QuizZero.Qdee(3.0f, 3), 0.00001);\n+        assertEquals(4.0, QuizZero.Qdee(64.0f, 4), 0.00001);\n+        assertEquals(1.25, QuizZero.Qdee(5.0f, 2), 0.00001);\n+    }\n+\n+    @Test\n+    public void qeee() {\n+        assertEquals(0, QuizZero.Qeee(5.0, 5.0));\n+        assertEquals(1, QuizZero.Qeee(5.1, 5.2));\n+        assertEquals(0, QuizZero.Qeee(5.0004, 5.0004));\n+        assertEquals(0, QuizZero.Qeee(0.000004, 0.000006));\n+        assertEquals(1, QuizZero.Qeee(7.56, 4567.3));\n+    }\n+\n+    @Test\n+    public void qeff() {\n+        assertEquals(0, QuizZero.Qeff(0));\n+        assertEquals(0, QuizZero.Qeff(1));\n+        assertEquals(0, QuizZero.Qeff(4));\n+        assertEquals(0, QuizZero.Qeff(9));\n+        assertEquals(0, QuizZero.Qeff(176281683));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3c711b236a1918ef1be82cf80170e07b64fa8369",
    "filename": "src/main/java/QuizZero.java",
    "status": "modified",
    "additions": 55,
    "deletions": 16,
    "changes": 71,
    "blob_url": "https://github.com/Zipcoder/QuizZero.Maven/blob/0ea974bbb460fcc3134b566a498ea35d4f62e139/src/main/java/QuizZero.java",
    "raw_url": "https://github.com/Zipcoder/QuizZero.Maven/raw/0ea974bbb460fcc3134b566a498ea35d4f62e139/src/main/java/QuizZero.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/QuizZero.Maven/contents/src/main/java/QuizZero.java?ref=0ea974bbb460fcc3134b566a498ea35d4f62e139",
    "patch": "@@ -17,41 +17,80 @@ public int test() {\n \n     // return zero\n     public static  int Qzero(int a, int b) {\n-        return -1;\n+        return 0;\n     }\n \n     // return the sum of a and b\n     public static  int Qone(int a, int b) {\n-        return 0;\n+        return a + b;\n     }\n \n     //return the product\n-    public static  int Qtwo(int a, int b) {  return 0; }\n+    public static  int Qtwo(int a, int b) {  return a * b; }\n     //return the difference of a and b\n-    public static  int Qthree(int a, int b) { return 0; }\n+    public static  int Qthree(int a, int b) { return a - b; }\n     //return the nagation of a\n-    public static  int Qfour(int a) { return 0; }\n+    public static  int Qfour(int a) { return *= -1; }\n     // write code to pass the test\n-    public static  int Qfive(int a, int b) {return 0; }\n+    public static  int Qfive(int a, int b) {\n+        if (b != a) {\n+        b = a;}\n+        return a + b; }\n     // write code to pass the test\n-    public static  int Qsix(int a) { return 0; }\n+    public static  int Qsix(int a) { return Math.pow(a, 3); }\n     // write code to pass the test\n-    public static  int Qseven(int a, int b) { return 0; }\n+    public static  int Qseven(int a, int b) { return a % b; }\n     //return the sum of a and b divded by c\n-    public static  int Qeight(int a, int b, int c) { return 0; }\n+    public static  int Qeight(int a, int b, int c) { return (a + b) / c; }\n+    \n     // write code to pass the test\n-    public static  int Qnine(int a, int b) { return 0; }\n+    public static  int Qnine(int a, int b) { return a * b + 5; }\n+    \n     // write code to pass the test\n-    public static  boolean Qaay(boolean a, boolean b) { return false; }\n+    public static  boolean Qaay(boolean a, boolean b) { \n+        if (a == false || b == false) {\n+        return false;\n+        } else {\n+        return true; }\n+         }\n     // write code to pass the test\n-    public static  boolean Qbee(boolean a, boolean b) { return false; }\n+    public static  boolean Qbee(boolean a, boolean b) { \n+        if (a == true || b == true) {\n+            return true;\n+        } else {\n+            return false; }\n+    }\n     // write code to pass the test\n-    public static  int Qcee(boolean a, boolean b) { return 0; }\n+    public static  int Qcee(boolean a, boolean b) { \n+        if (a == true && b == true) {\n+            return -2;\n+        } else if (a == false && b == false) {\n+            return -2;\n+        } else {\n+            return 1;\n+        }\n+    }\n     //return x dvided by b squared\n-    public static  float Qdee(float x, int b) { return 0.0f; }\n+    public static  float Qdee(float x, int b) { \n+        return x / Math.pow(b, 2); \n+    }\n     // if x-y is less than 1/10,000 return zero otherwise return 1\n-    public static  int Qeee(double x, double y) { return 0; }\n+    public static  int Qeee(double x, double y) { \n+        if (x - y < 1/10000) {\n+            return 0;\n+        } else {\n+            return 1;\n+        }\n+    }\n     //if a is zero return zero, if a is even return a random number times zero, if not even return 5 - 5\n-    public static  int Qeff(int a) { return -99999999; }\n+    public static  int Qeff(int a) { \n+        if (a == 0) {\n+            return 0;\n+        } else if (a % 2 = 0) {\n+            return (Math.random() * 0);\n+        } else {\n+            return 5 - 5;\n+        }\n+    }\n \n }"
  }
]
