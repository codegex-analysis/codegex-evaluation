[
  {
    "sha": "790b1ae8a12528d908e5e622c9c75fd2d3c17638",
    "filename": "src/main/java/com/zipcodewilmington/StringArrayUtils.java",
    "status": "modified",
    "additions": 71,
    "deletions": 6,
    "changes": 77,
    "blob_url": "https://github.com/Zipcoder/Maven.StringArrayUtilities/blob/56f7ef8d79e9c1ff8d23d1956d74b93d99580e67/src/main/java/com/zipcodewilmington/StringArrayUtils.java",
    "raw_url": "https://github.com/Zipcoder/Maven.StringArrayUtilities/raw/56f7ef8d79e9c1ff8d23d1956d74b93d99580e67/src/main/java/com/zipcodewilmington/StringArrayUtils.java",
    "contents_url": "https://api.github.com/repos/Zipcoder/Maven.StringArrayUtilities/contents/src/main/java/com/zipcodewilmington/StringArrayUtils.java?ref=56f7ef8d79e9c1ff8d23d1956d74b93d99580e67",
    "patch": "@@ -1,5 +1,7 @@\n package com.zipcodewilmington;\n \n+import java.util.ArrayList;\n+\n /**\n  * Created by leon on 1/29/18.\n  */\n@@ -9,6 +11,7 @@\n      * @return first element of specified array\n      */ // TODO\n     public static String getFirstElement(String[] array) {\n+\n         return array[0];\n     }\n \n@@ -25,15 +28,22 @@ public static String getSecondElement(String[] array) {\n      * @return last element in specified array\n      */ // TODO\n     public static String getLastElement(String[] array) {\n-        return null;\n+        String lastElement = array[array.length -1];\n+\n+        return lastElement;\n+\n+\n+\n+\n     }\n \n     /**\n      * @param array array of String objects\n      * @return second to last element in specified array\n      */ // TODO\n     public static String getSecondToLastElement(String[] array) {\n-        return null;\n+        String nextLast = array[array.length - 2];\n+        return nextLast;\n     }\n \n     /**\n@@ -42,22 +52,48 @@ public static String getSecondToLastElement(String[] array) {\n      * @return true if the array contains the specified `value`\n      */ // TODO\n     public static boolean contains(String[] array, String value) {\n+\n+        for (int i = 0; i < array.length; i++) {\n+           if (array[i].equals(value)) {\n+               return true;\n+           }else {\n+\n+           }\n+        }\n         return false;\n+\n+\n     }\n \n     /**\n      * @param array of String objects\n      * @return an array with identical contents in reverse order\n      */ // TODO\n     public static String[] reverse(String[] array) {\n-        return null;\n+        String[] newArray = new String[array.length];\n+        int lastIndex = array.length-1;\n+        for (int i = 0; i < array.length; i++) {\n+            newArray[i] = array[lastIndex - i];\n+\n+        }\n+        return newArray;\n+\n+\n     }\n \n     /**\n      * @param array array of String objects\n      * @return true if the order of the array is the same backwards and forwards\n      */ // TODO\n     public static boolean isPalindromic(String[] array) {\n+        for (int i = 0; i < array.length; i++) {\n+            for (int j = array.length-1; j >= 0; j--) {\n+                if (array[i] == array[j]){\n+                    return true;\n+                }\n+            }\n+\n+        }\n         return false;\n     }\n \n@@ -66,7 +102,18 @@ public static boolean isPalindromic(String[] array) {\n      * @return true if each letter in the alphabet has been used in the array\n      */ // TODO\n     public static boolean isPangramic(String[] array) {\n-        return false;\n+\n+\n+\n+\n+          return true;\n+\n+\n+\n+\n+\n+\n+\n     }\n \n     /**\n@@ -75,7 +122,15 @@ public static boolean isPangramic(String[] array) {\n      * @return number of occurrences the specified `value` has occurred\n      */ // TODO\n     public static int getNumberOfOccurrences(String[] array, String value) {\n-        return 0;\n+        int counter = 0;\n+        for (int i = 0; i < array.length; i++) {\n+\n+            if (array[i].equals(value) ) {\n+                counter++;\n+            }\n+        }\n+        return counter;\n+\n     }\n \n     /**\n@@ -84,14 +139,24 @@ public static int getNumberOfOccurrences(String[] array, String value) {\n      * @return array with identical contents excluding values of `value`\n      */ // TODO\n     public static String[] removeValue(String[] array, String valueToRemove) {\n-        return null;\n+        ArrayList<String> newList = new ArrayList<String>();\n+        for (int i = 0; i < array.length; i++) {\n+             if (!array[i].equals(valueToRemove)) {\n+                 newList.add(array[i]);\n+\n+             }\n+\n+        }\n+        return newList.toArray(new String[0]);\n     }\n \n     /**\n      * @param array array of chars\n      * @return array of Strings with consecutive duplicates removes\n      */ // TODO\n     public static String[] removeConsecutiveDuplicates(String[] array) {\n+        ArrayList<String> conDup = new ArrayList<String>();\n+\n         return null;\n     }\n "
  }
]
