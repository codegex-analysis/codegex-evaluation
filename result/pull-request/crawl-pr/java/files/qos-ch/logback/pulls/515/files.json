[
  {
    "sha": "a87c85b0abf73941963982fa8c6f3a312101c560",
    "filename": "logback-classic/src/main/java/ch/qos/logback/classic/spi/ThrowableProxy.java",
    "status": "modified",
    "additions": 31,
    "deletions": 35,
    "changes": 66,
    "blob_url": "https://github.com/qos-ch/logback/blob/cd9ef753c965aefd775d4e9ce58d37c7c0e55cab/logback-classic/src/main/java/ch/qos/logback/classic/spi/ThrowableProxy.java",
    "raw_url": "https://github.com/qos-ch/logback/raw/cd9ef753c965aefd775d4e9ce58d37c7c0e55cab/logback-classic/src/main/java/ch/qos/logback/classic/spi/ThrowableProxy.java",
    "contents_url": "https://api.github.com/repos/qos-ch/logback/contents/logback-classic/src/main/java/ch/qos/logback/classic/spi/ThrowableProxy.java?ref=cd9ef753c965aefd775d4e9ce58d37c7c0e55cab",
    "patch": "@@ -15,8 +15,11 @@\n \n import ch.qos.logback.core.CoreConstants;\n \n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n \n public class ThrowableProxy implements IThrowableProxy {\n \n@@ -29,59 +32,52 @@\n     int commonFrames;\n     private ThrowableProxy cause;\n     private ThrowableProxy[] suppressed = NO_SUPPRESSED;\n+    private final Set<Throwable> alreadyProcessedSet;\n \n     private transient PackagingDataCalculator packagingDataCalculator;\n     private boolean calculatedPackageData = false;\n \n-    private static final Method GET_SUPPRESSED_METHOD;\n-\n-    static {\n-        Method method = null;\n-        try {\n-            method = Throwable.class.getMethod(\"getSuppressed\");\n-        } catch (NoSuchMethodException e) {\n-            // ignore, will get thrown in Java < 7\n-        }\n-        GET_SUPPRESSED_METHOD = method;\n-    }\n-\n     private static final ThrowableProxy[] NO_SUPPRESSED = new ThrowableProxy[0];\n \n     public ThrowableProxy(Throwable throwable) {\n+        // Using Collections.newSetFromMap(new IdentityHashMap<>()) is inspired from\n+        // Throwable.printStackTrace(PrintStreamOrWriter):\n+        // Guard against malicious overrides of Throwable.equals by\n+        // using a Set with identity equality semantics.\n+        this(throwable, Collections.newSetFromMap(new IdentityHashMap<>()));\n+    }\n+\n+    public ThrowableProxy(Throwable throwable, Set<Throwable> alreadyProcessedSet) {\n \n         this.throwable = throwable;\n         this.className = throwable.getClass().getName();\n         this.message = throwable.getMessage();\n         this.stackTraceElementProxyArray = ThrowableProxyUtil.steArrayToStepArray(throwable.getStackTrace());\n+        this.alreadyProcessedSet = alreadyProcessedSet;\n+\n+        alreadyProcessedSet.add(throwable);\n \n         Throwable nested = throwable.getCause();\n \n-        if (nested != null) {\n-            this.cause = new ThrowableProxy(nested);\n+        if (nested != null && !alreadyProcessedSet.contains(nested)) {\n+            this.cause = new ThrowableProxy(nested, alreadyProcessedSet);\n             this.cause.commonFrames = ThrowableProxyUtil.findNumberOfCommonFrames(nested.getStackTrace(), stackTraceElementProxyArray);\n         }\n-        if (GET_SUPPRESSED_METHOD != null) {\n-            // this will only execute on Java 7\n-            try {\n-                Object obj = GET_SUPPRESSED_METHOD.invoke(throwable);\n-                if (obj instanceof Throwable[]) {\n-                    Throwable[] throwableSuppressed = (Throwable[]) obj;\n-                    if (throwableSuppressed.length > 0) {\n-                        suppressed = new ThrowableProxy[throwableSuppressed.length];\n-                        for (int i = 0; i < throwableSuppressed.length; i++) {\n-                            this.suppressed[i] = new ThrowableProxy(throwableSuppressed[i]);\n-                            this.suppressed[i].commonFrames = ThrowableProxyUtil.findNumberOfCommonFrames(throwableSuppressed[i].getStackTrace(),\n-                                            stackTraceElementProxyArray);\n-                        }\n-                    }\n+        Throwable[] throwableSuppressed = throwable.getSuppressed();\n+        if (throwableSuppressed.length > 0) {\n+            List<ThrowableProxy> suppressedList = new ArrayList<>(throwableSuppressed.length);\n+            for (int i = 0; i < throwableSuppressed.length; i++) {\n+                Throwable sup = throwableSuppressed[i];\n+                if (alreadyProcessedSet.contains(sup)) {\n+                    continue; // loop detected\n                 }\n-            } catch (IllegalAccessException e) {\n-                // ignore\n-            } catch (InvocationTargetException e) {\n-                // ignore\n+                ThrowableProxy throwableProxy = new ThrowableProxy(sup, alreadyProcessedSet);\n+                throwableProxy.commonFrames = ThrowableProxyUtil.findNumberOfCommonFrames(sup.getStackTrace(),\n+                        stackTraceElementProxyArray);\n+                suppressedList.add(throwableProxy);\n             }\n+            this.suppressed = suppressedList.toArray(new ThrowableProxy[suppressedList.size()]);\n         }\n-\n     }\n \n     public Throwable getThrowable() {"
  },
  {
    "sha": "b7959afea910d5aa8330c553715eb0415f1af938",
    "filename": "logback-classic/src/test/java/ch/qos/logback/classic/spi/ThrowableProxyTest.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/qos-ch/logback/blob/cd9ef753c965aefd775d4e9ce58d37c7c0e55cab/logback-classic/src/test/java/ch/qos/logback/classic/spi/ThrowableProxyTest.java",
    "raw_url": "https://github.com/qos-ch/logback/raw/cd9ef753c965aefd775d4e9ce58d37c7c0e55cab/logback-classic/src/test/java/ch/qos/logback/classic/spi/ThrowableProxyTest.java",
    "contents_url": "https://api.github.com/repos/qos-ch/logback/contents/logback-classic/src/test/java/ch/qos/logback/classic/spi/ThrowableProxyTest.java?ref=cd9ef753c965aefd775d4e9ce58d37c7c0e55cab",
    "patch": "@@ -160,6 +160,24 @@ public void multiNested() {\n         verify(w);\n     }\n \n+    // see also https://jira.qos.ch/browse/LOGBACK-1454\n+    @Test\n+    public void nestedLoop1() {\n+        Exception e = new Exception(\"foo\");\n+        Exception e2 = new Exception(e);\n+        e.initCause(e2);\n+        new ThrowableProxy(e);\n+    }\n+\n+    // see also https://jira.qos.ch/browse/LOGBACK-1454\n+    @Test\n+    public void nestedLoop2() {\n+        Exception e = new Exception(\"foo\");\n+        Exception e2 = new Exception(e);\n+        e.addSuppressed(e2);\n+        new ThrowableProxy(e);\n+    }\n+\n     void someMethod() throws Exception {\n         throw new Exception(\"someMethod\");\n     }"
  }
]
