[
  {
    "sha": "6a2c8a3bca3aab8954f58acaa3cf18c5158e2bdf",
    "filename": "client/pom.xml",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/pom.xml",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/pom.xml",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/pom.xml?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>chat</artifactId>\n+        <groupId>ru.geekbrains</groupId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>client</artifactId>\n+\n+    <properties>\n+        <maven.compiler.source>8</maven.compiler.source>\n+        <maven.compiler.target>8</maven.compiler.target>\n+    </properties>\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "c9b00feb6673c0374bd18195149e50bbab839e42",
    "filename": "client/src/main/java/client/Controller.java",
    "status": "added",
    "additions": 292,
    "deletions": 0,
    "changes": 292,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/java/client/Controller.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/java/client/Controller.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/src/main/java/client/Controller.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,292 @@\n+package client;\n+\n+import commands.Commands;\n+import javafx.application.Platform;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n+import javafx.fxml.Initializable;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.*;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.util.ResourceBundle;\n+\n+public class Controller implements Initializable {\n+    @FXML\n+    public TextArea textArea;\n+    @FXML\n+    public TextField textField;\n+    @FXML\n+    public TextField loginField;\n+    @FXML\n+    public PasswordField passwordField;\n+    @FXML\n+    public HBox authPanel;\n+    @FXML\n+    public HBox msgPanel;\n+    @FXML\n+    public ListView<String> clintList;\n+    @FXML\n+    public MenuBar menuBar;\n+\n+\n+    private final String IP_ADDR = \"localhost\";\n+    private final int PORT = 8189;    \n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+\n+    private boolean authenticated;\n+    private String nickName;\n+    private Stage stage;\n+    private Stage regStage;\n+    private RegController regController;\n+\n+\n+    public void setAuthenticated(boolean authenticated){\n+        this.authenticated = authenticated;\n+        msgPanel.setVisible(authenticated);\n+        msgPanel.setManaged(authenticated);\n+        authPanel.setVisible(!authenticated);\n+        authPanel.setManaged(!authenticated);\n+        menuBar.setVisible(authenticated);\n+        menuBar.setManaged(authenticated);\n+        clintList.setVisible(authenticated);\n+        clintList.setManaged(authenticated);\n+        if (!authenticated){\n+            nickName = \"\";\n+            loginField.clear();\n+        }\n+        textArea.clear();\n+        setTitle(nickName);\n+    }\n+\n+    public String getNickName() {\n+        return nickName;\n+    }\n+\n+    @Override\n+    public void initialize(URL location, ResourceBundle resources) {\n+        Platform.runLater(()->{\n+            stage = (Stage)textArea.getScene().getWindow();\n+            stage.setOnCloseRequest(event -> {\n+                if (socket != null && !socket.isClosed()){\n+                    try {\n+                        out.writeUTF(Commands.END);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            });\n+        });\n+        setAuthenticated(false);\n+    }\n+    private void connect(){\n+        try {\n+            socket = new Socket(IP_ADDR, PORT);\n+            in = new DataInputStream(socket.getInputStream());\n+            out = new DataOutputStream(socket.getOutputStream());\n+\n+            new Thread(()->{\n+                try {\n+                    // цикл аутетификации\n+                    while (true) {\n+                        String str = in.readUTF();\n+\n+                        if (str.startsWith(\"/\")) {\n+                            if (str.startsWith(Commands.END)) {\n+                                throw new RuntimeException(\"Server closed your connection!\");\n+                            }\n+                            if (str.startsWith(Commands.AUTH)) {\n+                                String[] token = str.split(\"\\\\s\");\n+                                nickName = token[1];\n+                                setAuthenticated(true);\n+                                break;\n+                            }\n+                            if (str.startsWith(Commands.REG_OK)){\n+                                regController.tryRegResult(Commands.REG_OK);\n+                            }\n+                            if (str.startsWith(Commands.REG_NO)){\n+                                regController.tryRegResult(Commands.REG_NO);\n+                            }\n+                        } else {\n+                            textArea.appendText(str + \"\\n\");\n+                        }\n+                    }\n+                    // цикл работы\n+                    while (true) {\n+                        String str = in.readUTF();\n+                        if (str.startsWith(\"/\")){\n+                            if (str.equals(Commands.END)) {\n+                                System.out.println(\"Your connection is closed\");\n+                                break;\n+                            }\n+                            if (str.startsWith(Commands.CHG_OK)){\n+                                regController.tryRegResult(Commands.CHG_OK);\n+                                String[] token = str.split(\"\\\\s\");\n+                                nickName = token[1];\n+                                setTitle(nickName);\n+                            }\n+                            if (str.startsWith(Commands.CHG_NO)){\n+                                regController.tryRegResult(Commands.CHG_NO);\n+                            }\n+                        if (str.startsWith(Commands.CLIENT_LIST)){\n+                            String[] token = str.split(\"\\\\s\");\n+                            Platform.runLater(()->{\n+                                clintList.getItems().clear();\n+                                for (int i = 1; i < token.length; i++) {\n+                                    clintList.getItems().add(token[i]);\n+                                }\n+                            });\n+                        }\n+                        }else {\n+                            textArea.appendText(str + \"\\n\");\n+                        }\n+                    }\n+                }catch (RuntimeException e){\n+                    System.out.println(e.getMessage());\n+                }catch (IOException e) {\n+                    e.printStackTrace();\n+                }finally {\n+                    setAuthenticated(false);\n+                    try {\n+                        socket.close();\n+                        textArea.appendText(\"Your connection is closed\");\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void sendMsg(ActionEvent actionEvent) {\n+        try {\n+            out.writeUTF(textField.getText());\n+            textField.clear();\n+            textField.requestFocus();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void tryToAuth(ActionEvent actionEvent) {\n+        authMethod();\n+    /*    if (socket == null || socket.isClosed()){\n+            connect();\n+        }\n+        try {\n+            out.writeUTF(String.format(\"%s: %s %s\", Commands.AUTH, loginField.getText().trim(), passwordField.getText().trim() ));\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }finally {\n+            passwordField.clear();\n+        }*/\n+\n+    }\n+\n+    public void setTitle(String nickname){\n+        Platform.runLater(()->{\n+            if (nickname.equals(\"\")){\n+                stage.setTitle(\"Best Chat of World\");\n+            }else\n+                stage.setTitle(String.format(\"Best Chat of World [%s]\",nickname));\n+        });\n+    }\n+\n+    public void clientListOnMouseReleased(MouseEvent mouseEvent) {\n+        if (mouseEvent.getClickCount() == 2){\n+            String msg = String.format(\"%s, %s \", Commands.PERSONAL_MSG, clintList.getSelectionModel().getSelectedItem());\n+            textField.setText(msg);\n+        }\n+    }\n+\n+    public void tryToAuthByKey(KeyEvent keyEvent) {\n+        if (keyEvent.getCode().equals(KeyCode.ENTER)) {\n+            authMethod();\n+        }\n+    }\n+    private void authMethod(){\n+            if (socket == null || socket.isClosed()){\n+                connect();\n+            }\n+            try {\n+                out.writeUTF(String.format(\"%s: %s %s\", Commands.AUTH, loginField.getText().trim(), passwordField.getText().trim() ));\n+\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }finally {\n+                passwordField.clear();\n+            }\n+    }\n+\n+    public void showRegWindow(ActionEvent actionEvent) {\n+        if (regStage == null){\n+            initRegWindow();\n+        }\n+        regStage.setTitle(\"Chat registration\");\n+        regController.setRegMode(true);\n+        regStage.show();\n+    }\n+    public void changeNick(ActionEvent actionEvent) {\n+        if (regStage == null){\n+            initRegWindow();\n+        }\n+        regStage.setTitle(\"Chat nickname changing\");\n+        regController.setRegMode(false);\n+        regStage.show();\n+    }\n+\n+    private void initRegWindow() {\n+        try {\n+            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/regManager.fxml\"));\n+            Parent root = fxmlLoader.load();\n+            regController = fxmlLoader.getController();\n+            regController.setController(this); /*// Controller установил ссылку на себя в контроллере RegController*/\n+\n+            regStage = new Stage();\n+            regStage.setScene(new Scene(root, 450, 340));\n+            regStage.initStyle(StageStyle.UTILITY);\n+            regStage.initModality(Modality.APPLICATION_MODAL);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+    }\n+    public void  registration(String login, String password, String nickname){\n+        if (socket == null || socket.isClosed()){\n+            connect();\n+        }\n+        try {\n+            out.writeUTF(String.format(\"%s %s %s %s\", Commands.REG, login, password, nickname));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void tryToChange(String nickName){\n+        try {\n+            out.writeUTF(String.format(\"%s %s\", Commands.CHG,  nickName));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "0adf562c96071e7bcdd39a0863f9bf81625eeafe",
    "filename": "client/src/main/java/client/Main.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/java/client/Main.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/java/client/Main.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/src/main/java/client/Main.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,22 @@\n+package client;\n+\n+import javafx.application.Application;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+\n+public class Main extends Application {\n+\n+    @Override\n+    public void start(Stage primaryStage) throws Exception{\n+        Parent root = FXMLLoader.load(getClass().getResource(\"/manager.fxml\"));\n+        primaryStage.setTitle(\"Best Chat of World\");\n+        primaryStage.setScene(new Scene(root, 500, 375));\n+        primaryStage.show();\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+}"
  },
  {
    "sha": "97485b212e836cb6322624fb401705d09bd9542d",
    "filename": "client/src/main/java/client/RegController.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/java/client/RegController.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/java/client/RegController.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/src/main/java/client/RegController.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,75 @@\n+package client;\n+\n+import commands.Commands;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+public class RegController {\n+    @FXML\n+    public Button btnReg;\n+    @FXML\n+    public Button btnChange;\n+    @FXML\n+    private TextField loginField;\n+    @FXML\n+    private PasswordField passwordField;\n+    @FXML\n+    private TextField nickNameField;\n+    @FXML\n+    private TextArea textArea;\n+    private  Controller controller;\n+\n+\n+    public void setController(Controller controller) {\n+        this.controller = controller;\n+    }\n+\n+    public void tryRegResult(String command){\n+        textArea.clear();\n+        if (command.equals(Commands.REG_OK)){\n+            textArea.appendText(\"Registration is successfull\\n\");\n+        }\n+        if (command.equals(Commands.REG_NO)){\n+            textArea.appendText(\"Registration is failed\\n login or nickname is already used\\n\");\n+        }\n+        if (command.equals(Commands.CHG_OK)){\n+            textArea.appendText(\"Nickname is changed successful\\n\");\n+        }\n+        if (command.equals(Commands.CHG_NO)){\n+            textArea.appendText(\"Operation is failed!\\n\");\n+        }\n+    }\n+\n+    public void tryToReg(ActionEvent actionEvent) {\n+        String login = loginField.getText().trim();\n+        String password = passwordField.getText().trim();\n+        String nickname = nickNameField.getText().trim();\n+        if (login.length()*password.length()*nickname.length() != 0){\n+            controller.registration(login, password, nickname);\n+        }\n+\n+    }\n+    public void setRegMode(boolean regMode){\n+        loginField.setVisible(regMode);\n+        loginField.setManaged(regMode);\n+        passwordField.setVisible(regMode);\n+        passwordField.setManaged(regMode);\n+        btnChange.setVisible(!regMode);\n+        btnChange.setManaged(!regMode);\n+        btnReg.setVisible(regMode);\n+        btnReg.setManaged(regMode);\n+        nickNameField.setText(controller.getNickName());\n+        textArea.clear();\n+    }\n+\n+    public void tryToChange(ActionEvent actionEvent) {\n+        String nickname = nickNameField.getText().trim();\n+        if (nickname != \"\"){\n+            controller.tryToChange(nickname);\n+        }\n+    }\n+}"
  },
  {
    "sha": "ff964fb48f32b7eca57a63f7192b61e728a811b7",
    "filename": "client/src/main/resources/css/style.css",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/resources/css/style.css",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/resources/css/style.css",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/src/main/resources/css/style.css?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,6 @@\n+.root{\n+    -fx-font-size: 16;\n+}\n+.menu{\n+    -fx-font-size: 12;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "595a620cb2441cb86fcc3deefedbb049c91699ed",
    "filename": "client/src/main/resources/manager.fxml",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/resources/manager.fxml",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/resources/manager.fxml",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/src/main/resources/manager.fxml?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import java.net.*?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+\n+<VBox alignment=\"center\" xmlns:fx=\"http://javafx.com/fxml/1\" xmlns=\"http://javafx.com/javafx/11.0.1\" fx:controller=\"client.Controller\">\n+    <stylesheets>\n+        <URL value=\"@/css/style.css\" />\n+    </stylesheets>\n+\n+    <MenuBar fx:id=\"menuBar\" managed=\"false\" visible=\"false\">\n+        <Menu text=\"Settings\">\n+            <MenuItem onAction=\"#changeNick\" text=\"Change NickName\" />\n+        </Menu>\n+    </MenuBar>\n+\n+    <HBox fx:id=\"authPanel\">\n+        <TextField fx:id=\"loginField\" promptText=\"login\" HBox.hgrow=\"ALWAYS\" />\n+        <PasswordField fx:id=\"passwordField\" onAction=\"#tryToAuth\" promptText=\"password\" HBox.hgrow=\"ALWAYS\" />\n+        <Button fx:id=\"buttonAuth\" minWidth=\"100\" onAction=\"#tryToAuth\"  onKeyReleased=\"#tryToAuthByKey\" text=\"Log In\" />\n+        <Button fx:id=\"buttonReg\" minWidth=\"100\" onAction=\"#showRegWindow\"  text=\"New user\" />\n+    </HBox>\n+    <HBox VBox.vgrow=\"ALWAYS\">\n+        <TextArea fx:id=\"textArea\" editable=\"false\" HBox.hgrow=\"ALWAYS\" />\n+        <ListView fx:id=\"clintList\" visible=\"false\" managed=\"false\" minWidth=\"100\" onMouseReleased=\"#clientListOnMouseReleased\"/>\n+\n+    </HBox>\n+\n+    <HBox fx:id=\"msgPanel\" managed=\"false\" visible=\"false\">\n+        <TextField fx:id=\"textField\" onAction=\"#sendMsg\" promptText=\"input text\" HBox.hgrow=\"ALWAYS\" />\n+        <Button onAction=\"#sendMsg\" text=\"Send\" />\n+    </HBox>\n+</VBox>"
  },
  {
    "sha": "ed757542ddd53e785d83898baf2d5c3946440de8",
    "filename": "client/src/main/resources/regManager.fxml",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/resources/regManager.fxml",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/client/src/main/resources/regManager.fxml",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/client/src/main/resources/regManager.fxml?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import java.net.*?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+\n+<VBox alignment=\"center\" xmlns:fx=\"http://javafx.com/fxml/1\" xmlns=\"http://javafx.com/javafx/11.0.1\" fx:controller=\"client.RegController\">\n+    <stylesheets>\n+        <URL value=\"@/css/style.css\" />\n+    </stylesheets>\n+\n+    <TextField fx:id=\"loginField\" promptText=\"login\"  />\n+    <PasswordField fx:id=\"passwordField\"  promptText=\"password\"  />\n+    <TextField fx:id=\"nickNameField\"  promptText=\"nickname\" />\n+    <Button fx:id=\"btnReg\" minWidth=\"100\" onAction=\"#tryToReg\" text=\"register\" />\n+    <Button fx:id=\"btnChange\" minWidth=\"100\" onAction=\"#tryToChange\" text=\"Change\" managed=\"false\" visible=\"false\"/>\n+    <TextArea fx:id=\"textArea\" editable=\"false\"  />\n+\n+</VBox>"
  },
  {
    "sha": "ffacc9fd7018acd03c82ae6d8c43cd3f9a3210a2",
    "filename": "commands/pom.xml",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/commands/pom.xml",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/commands/pom.xml",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/commands/pom.xml?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>chat</artifactId>\n+        <groupId>ru.geekbrains</groupId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>commands</artifactId>\n+\n+    <properties>\n+        <maven.compiler.source>8</maven.compiler.source>\n+        <maven.compiler.target>8</maven.compiler.target>\n+    </properties>\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "6f093ce72bb6ecc1635b427bee39da3e1531208c",
    "filename": "commands/src/main/java/commands/Commands.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/commands/src/main/java/commands/Commands.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/commands/src/main/java/commands/Commands.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/commands/src/main/java/commands/Commands.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,16 @@\n+package commands;\n+\n+public class Commands {\n+    public static final String END = \"/end\";\n+    public static final String AUTH = \"/auth\";\n+    public static final String AUTH_OK = \"/authok\";\n+    public static final String PERSONAL_MSG = \"/w\";\n+    public static final String CLIENT_LIST = \"/clientlist\";\n+    public static final String REG = \"/reg\";\n+    public static final String REG_OK = \"/regok\";\n+    public static final String REG_NO = \"/regno\";\n+    public static final String CHG = \"/chg\";\n+    public static final String CHG_NO = \"/chgno\";\n+    public static final String CHG_OK = \"/chgok\";\n+\n+}"
  },
  {
    "sha": "6a1a603db077ed3370b7cac40edec5e7f46e3391",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/pom.xml",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/pom.xml",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/pom.xml?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -6,11 +6,19 @@\n \n     <groupId>ru.geekbrains</groupId>\n     <artifactId>chat</artifactId>\n+    <packaging>pom</packaging>\n     <version>1.0-SNAPSHOT</version>\n+    <modules>\n+        <module>server</module>\n+        <module>client</module>\n+        <module>commands</module>\n+    </modules>\n \n     <properties>\n         <maven.compiler.source>8</maven.compiler.source>\n         <maven.compiler.target>8</maven.compiler.target>\n     </properties>\n \n+\n+\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "e8549c845596c2379b6bf8605f6e74e67e2f152f",
    "filename": "server/pom.xml",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/pom.xml",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/pom.xml",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/pom.xml?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>chat</artifactId>\n+        <groupId>ru.geekbrains</groupId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>server</artifactId>\n+\n+    <properties>\n+        <maven.compiler.source>8</maven.compiler.source>\n+        <maven.compiler.target>8</maven.compiler.target>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.xerial</groupId>\n+            <artifactId>sqlite-jdbc</artifactId>\n+            <version>3.32.3.2</version>\n+        </dependency>\n+    </dependencies>\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "11a37bf861df8b2f183386da9b7f8e034323d613",
    "filename": "server/src/main/java/server/AuthService.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/AuthService.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/AuthService.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/AuthService.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,8 @@\n+package server;\n+\n+public interface AuthService {\n+    String getNicknameByLoginPassword(String login, String password);\n+    boolean registration(String login, String password, String nickname);\n+    boolean changeNickName(String login, String newNickName);\n+\n+}"
  },
  {
    "sha": "181207b46e0e18e21d2c3a4f15cb0bfdcda9c777",
    "filename": "server/src/main/java/server/ClientHandler.java",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/ClientHandler.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/ClientHandler.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,144 @@\n+package server;\n+\n+import commands.Commands;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+\n+public class ClientHandler {\n+    private  Server server;\n+    private  Socket socket;\n+    private  DataInputStream in;\n+    private  DataOutputStream out;\n+    private String nickname;\n+    private String login;\n+\n+    public ClientHandler(Server server, Socket socket) {\n+        try {\n+            this.server = server;\n+            this.socket = socket;\n+            in = new DataInputStream(socket.getInputStream());\n+            out = new DataOutputStream((socket.getOutputStream()));\n+\n+            new Thread(() -> {\n+                try {\n+                    // set timeout\n+                    socket.setSoTimeout(120000);\n+\n+                    // цикл аутетификации\n+                    while (true) {\n+                        String str = in.readUTF();\n+                        if (str.startsWith(Commands.END)) {\n+                            out.writeUTF(Commands.END);\n+                            throw new RuntimeException(\" Client disconnected\");\n+                        }\n+                        if (str.startsWith(Commands.AUTH)) {\n+                            String[] token = str.split(\"\\\\s\");   // \"\\\\s\" - пробел (whitespace)\n+                            if (token.length < 3) {\n+                                continue;\n+                            }\n+                            String newNick = server.getAuthService().getNicknameByLoginPassword(token[1], token[2]);\n+                            login = token[1];\n+                            if (newNick != null) {\n+                                if (!server.isLoginAuthrnticated(token[1])) {\n+                                    socket.setSoTimeout(0);\n+                                    nickname = newNick;\n+                                    sendMsg(Commands.AUTH_OK + \" \" + nickname);\n+                                    server.subscribe(this);\n+                                    System.out.println(\"Client: \" + socket.getRemoteSocketAddress() + \" connected with nick \" + nickname);\n+                                    break;\n+                                } else {\n+                                    sendMsg(\"User is alredy login\");\n+                                }\n+                            } else {\n+                                sendMsg(\"Entered login or password is not correct\");\n+                            }\n+                        }\n+                        if (str.startsWith(Commands.REG)) {\n+                            String[] token = str.split(\"\\\\s\", 4);   // \"\\\\s\" - пробел (whitespace)\n+                            if (token.length < 4) {\n+                                continue;\n+                            }\n+                            boolean regSuccess = server.getAuthService().registration(token[1], token[2], token[3]);\n+                            if (regSuccess) {\n+                                sendMsg(Commands.REG_OK);\n+                            } else {\n+                                sendMsg(Commands.REG_NO);\n+                            }\n+                        }\n+                    }\n+                    // цикл работы\n+                    while (true) {\n+                        String str = in.readUTF();\n+                        if (str.startsWith(\"/\")) {\n+                            if (str.equals(Commands.END)) {\n+                                out.writeUTF(Commands.END);\n+                                break;\n+                            }\n+                            if (str.startsWith(Commands.PERSONAL_MSG)) {\n+                                String[] token = str.split(\"\\\\s\", 3);\n+                                if (token.length < 3) {\n+                                    continue;\n+                                } else {\n+                                    server.personalMsg(this, token[1], token[2]);\n+                                }\n+                            }\n+                        } else {\n+                            server.broadcastMsg(this, str);\n+                        }\n+                        if (str.startsWith(Commands.CHG)){\n+                            String[] token = str.split(\"\\\\s\");\n+                            boolean updSuccess = server.getAuthService().changeNickName(login, token[1]);\n+                            if (updSuccess){\n+                                nickname = token[1];\n+                                sendMsg(Commands.CHG_OK +\" \"+ nickname);\n+                                server.broadcastClientList();\n+                                // server.broadcastMsg(this, str);\n+                            }else {\n+                                sendMsg(Commands.CHG_NO);\n+                            }\n+                        }\n+                    }\n+\n+                }catch (SocketTimeoutException e){\n+                    sendMsg(Commands.END);\n+                 //   e.printStackTrace();\n+                    System.out.println(e.getMessage());\n+                }catch (RuntimeException e){\n+                    System.out.println(e.getMessage());\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    server.unsubscribe(this);\n+                    System.out.println(\"Client disconnected: \" + nickname);\n+                    try {\n+                        socket.close();\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+        }catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void sendMsg(String msg){\n+        try {\n+            out.writeUTF( msg);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public String getLogin() {\n+        return login;\n+    }\n+\n+    public String getNickname() {\n+        return nickname;\n+    }\n+}"
  },
  {
    "sha": "a144c6b9b93b642dfc34f018c39ce92715521ce5",
    "filename": "server/src/main/java/server/DBAuthService.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/DBAuthService.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/DBAuthService.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/DBAuthService.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,18 @@\n+package server;\n+\n+public class DBAuthService implements AuthService{\n+    @Override\n+    public String getNicknameByLoginPassword(String login, String password) {\n+        return SQLHandler.getNicknameByLoginPassword(login, password);\n+    }\n+\n+    @Override\n+    public boolean registration(String login, String password, String nickname) {\n+        return SQLHandler.registration(login, password, nickname);\n+    }\n+\n+    @Override\n+    public boolean changeNickName(String login, String newNickName) {\n+        return SQLHandler.changeNickName(login, newNickName);\n+    }\n+}"
  },
  {
    "sha": "b3a0fb26cf2b1c5dfe99b089b50fb4d89dbb12fe",
    "filename": "server/src/main/java/server/SQLHandler.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/SQLHandler.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/SQLHandler.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/SQLHandler.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,89 @@\n+package server;\n+\n+import java.sql.*;\n+\n+public class SQLHandler {\n+    private static Connection connection;\n+\n+    private static PreparedStatement psInsert;\n+    private static PreparedStatement resultSet;\n+    private static PreparedStatement psUpdate;\n+\n+\n+    public static boolean connect()  {\n+        try {\n+            Class.forName(\"org.sqlite.JDBC\");\n+            connection = DriverManager.getConnection(\"jdbc:sqlite:main.db\");\n+            prepareAllStatements();\n+            return  true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static void disconnect() throws SQLException {\n+        resultSet.close();\n+        psInsert.close();\n+        psUpdate.close();\n+        connection.close();\n+    }\n+\n+    private static void prepareAllStatements(){\n+        try {\n+            resultSet = connection.prepareStatement(\"SELECT nickname FROM users WHERE login = ? and password = ?;\");\n+            psUpdate = connection.prepareStatement(\"UPDATE users SET nickname = ? WHERE login = ?;\");\n+            psInsert = connection.prepareStatement(\"INSERT INTO users (login, password, nickname) VALUES (?, ?, ?);\");\n+\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+    public static String getNicknameByLoginPassword(String login, String password) {\n+        try {\n+         //   PreparedStatement resultSet = connection.prepareStatement(\"SELECT nickname FROM users WHERE login = ? and password = ?;\");\n+            resultSet.setString(1, login);\n+            resultSet.setString(2, password);\n+            ResultSet rs = resultSet.executeQuery();\n+            if (rs.next()){\n+                return rs.getString(1);\n+            }else {\n+                return null;\n+            }\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public static boolean changeNickName(String login, String newNickName){\n+        try {\n+          //  PreparedStatement psUpdate = connection.prepareStatement(\"UPDATE users SET nickname = ? WHERE login = ?;\");\n+            psUpdate.setString(1,newNickName);\n+            psUpdate.setString(2,login);\n+            if (psUpdate.executeUpdate() == 1){\n+                return true;\n+            }else {return false;}\n+\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+            return false;\n+        }\n+    }\n+    public static boolean registration(String login, String password, String nickname) {\n+        try {\n+           // PreparedStatement psInsert = connection.prepareStatement(\"INSERT INTO users (login, password, nickname) VALUES (?, ?, ?);\");\n+            psInsert.setString(1, login);\n+            psInsert.setString(2, password);\n+            psInsert.setString(3, nickname);\n+            if (psInsert.executeUpdate() == 1){\n+                return true;\n+            }else {\n+                return  false;\n+            }\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+            return false;\n+        }\n+    }\n+}"
  },
  {
    "sha": "3b44000bb11d74c161d995e56c11fe38b3c479b9",
    "filename": "server/src/main/java/server/Server.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/Server.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/Server.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/Server.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,114 @@\n+package server;\n+\n+import commands.Commands;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+public class Server {\n+    private final int PORT = 8189;\n+    private ServerSocket server;\n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+    private List<ClientHandler> clients;\n+    private AuthService authService;\n+\n+    public Server() {\n+        clients = new CopyOnWriteArrayList<>();// потокобезопасный класс\n+        if (!SQLHandler.connect()){\n+            throw new RuntimeException(\"Attempt to connect to DB is failed\");\n+        }\n+        //authService = new SimpleAuthService();\n+        authService = new DBAuthService();\n+\n+        try {\n+            server = new ServerSocket(PORT);\n+            System.out.println(\"Server started\");\n+            while (true){\n+                socket = server.accept();\n+                System.out.println(\"Client connected\");\n+                System.out.println(\"Client: \"+ socket.getRemoteSocketAddress());\n+                new ClientHandler(this, socket);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }finally {\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+            try {\n+                SQLHandler.disconnect();\n+            } catch (SQLException e) {\n+                e.printStackTrace();\n+            }\n+            try {\n+                server.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+    }\n+    public void broadcastMsg(ClientHandler sender, String msg){\n+        String message = String.format(\"[%s]: %s\", sender.getNickname(), msg);\n+        for (ClientHandler client : clients) {\n+            client.sendMsg(message);\n+\n+        }\n+    }\n+\n+    public void personalMsg(ClientHandler sender, String recipient, String msg){\n+        String message = String.format(\"From[%s] to[%s]: %s\", sender.getNickname(), recipient, msg);\n+        for (ClientHandler client : clients) {\n+            if (client.getNickname().equals(recipient)){\n+                client.sendMsg(message);  //  это получатель\n+                if (!client.equals(sender)){\n+                    sender.sendMsg(message);\n+                }\n+                return;\n+            }\n+        }\n+        sender.sendMsg(String.format(\"User %s not found\", recipient));\n+    }\n+\n+    public void subscribe(ClientHandler clientHandler){\n+        clients.add(clientHandler);\n+        broadcastClientList();\n+    }\n+    public void unsubscribe(ClientHandler clientHandler){\n+        clients.remove(clientHandler);\n+        broadcastClientList();\n+    }\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+\n+    public boolean isLoginAuthrnticated(String login){\n+        for (ClientHandler c : clients ) {\n+            if (c.getLogin().equals(login)){\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    public void broadcastClientList(){\n+        StringBuilder sb = new StringBuilder(Commands.CLIENT_LIST);\n+        for (ClientHandler c: clients) {\n+            sb.append(\" \").append(c.getNickname());\n+        }\n+        String msg = sb.toString();\n+        for (ClientHandler c: clients) {\n+            c.sendMsg(msg);\n+        }\n+    }\n+}"
  },
  {
    "sha": "07ed47ba5e374a5e9be81f4e77604de9c5f5b125",
    "filename": "server/src/main/java/server/ServerStart.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/ServerStart.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/ServerStart.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/ServerStart.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -1,7 +1,7 @@\n package server;\n \n-public class Main {\n+public class ServerStart {\n     public static void main(String[] args) {\n-\n+        new Server();\n     }\n }",
    "previous_filename": "src/main/java/server/Main.java"
  },
  {
    "sha": "297eb57d589738dd8f3c735e4c11824326925a82",
    "filename": "server/src/main/java/server/SimpleAuthService.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Elgk/java2_chat/blob/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/SimpleAuthService.java",
    "raw_url": "https://github.com/Elgk/java2_chat/raw/e7abdf084236417643fa3dd97109acfd04e44835/server/src/main/java/server/SimpleAuthService.java",
    "contents_url": "https://api.github.com/repos/Elgk/java2_chat/contents/server/src/main/java/server/SimpleAuthService.java?ref=e7abdf084236417643fa3dd97109acfd04e44835",
    "patch": "@@ -0,0 +1,59 @@\n+package server;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SimpleAuthService implements AuthService{\n+\n+    private class UserData{\n+        String login;\n+        String password;\n+        String nickname;\n+\n+        public UserData(String login, String password, String nickname) {\n+            this.login = login;\n+            this.password = password;\n+            this.nickname = nickname;\n+        }\n+    }\n+\n+    private List<UserData> users;\n+\n+    public SimpleAuthService(   ) {\n+        users = new ArrayList<>();\n+        users.add(new UserData(\"zxc\", \"zxc\", \"zxc\"));\n+        users.add(new UserData(\"asd\", \"asd\", \"asd\"));\n+        users.add(new UserData(\"zxc\", \"zxc\", \"zxc\"));\n+        users.add(new UserData(\"qwe\", \"qwe\", \"qwe\"));\n+\n+        for (int i = 0; i < 10; i++) {\n+            users.add(new UserData(\"Login\"+i, \"password\"+i, \"nickname\"+i));\n+        }\n+    }\n+\n+    @Override\n+    public String getNicknameByLoginPassword(String login, String password) {\n+        for (UserData user: users ) {\n+           if (user.login.equals(login) && user.password.equals(password)){\n+               return  user.nickname;\n+           }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean registration(String login, String password, String nickname) {\n+        for (UserData user: users ) {\n+            if (user.login.equals(login) || user.nickname.equals(nickname)){\n+                return  false;\n+            }\n+        }\n+        users.add(new UserData(login, password, nickname));\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean changeNickName(String login, String newNickName) {\n+        return false;\n+    }\n+}"
  }
]
