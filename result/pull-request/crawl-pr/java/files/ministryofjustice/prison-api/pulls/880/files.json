[
  {
    "sha": "41ece127e1ea05a905ee501c0dfb111a5711a3e1",
    "filename": "src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentQuestion.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/ministryofjustice/prison-api/blob/4921df6c277f1251b3a88de6d30f4d13f628160f/src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentQuestion.java",
    "raw_url": "https://github.com/ministryofjustice/prison-api/raw/4921df6c277f1251b3a88de6d30f4d13f628160f/src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentQuestion.java",
    "contents_url": "https://api.github.com/repos/ministryofjustice/prison-api/contents/src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentQuestion.java?ref=4921df6c277f1251b3a88de6d30f4d13f628160f",
    "patch": "@@ -9,6 +9,7 @@\n import lombok.NoArgsConstructor;\n \n import javax.validation.constraints.NotNull;\n+import java.util.List;\n \n @SuppressWarnings(\"unused\")\n @ApiModel(description = \"AssessmentQuestion\")\n@@ -23,6 +24,9 @@\n     @ApiModelProperty(value = \"Question\", position = 1)\n     private String question;\n \n-    @ApiModelProperty(value = \"Answer\", position = 2)\n+    @ApiModelProperty(value = \"The answer given. More than one answer might have been given, in which case the other answers will be in the additionalAnswers property\", position = 2)\n     private String answer;\n+\n+    @ApiModelProperty(value = \"If a question has more than one answer, all but the first answer will be in this property\", position = 3)\n+    private List<String> additionalAnswers;\n }"
  },
  {
    "sha": "03a65711628367ee3a1802979e124e297aeca28a",
    "filename": "src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentSummary.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ministryofjustice/prison-api/blob/4921df6c277f1251b3a88de6d30f4d13f628160f/src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentSummary.java",
    "raw_url": "https://github.com/ministryofjustice/prison-api/raw/4921df6c277f1251b3a88de6d30f4d13f628160f/src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentSummary.java",
    "contents_url": "https://api.github.com/repos/ministryofjustice/prison-api/contents/src/main/java/uk/gov/justice/hmpps/prison/api/model/AssessmentSummary.java?ref=4921df6c277f1251b3a88de6d30f4d13f628160f",
    "patch": "@@ -33,7 +33,7 @@\n     @ApiModelProperty(value = \"Offender number (e.g. NOMS Number).\", position = 3, example = \"GV09876N\")\n     private String offenderNo;\n \n-    @ApiModelProperty(value = \"Classification code\", position = 4, example = \"STANDARD\")\n+    @ApiModelProperty(value = \"Classification code. This will not have a value if the assessment is incomplete or pending\", position = 4, example = \"STANDARD\")\n     private String classificationCode;\n \n     @NotBlank"
  },
  {
    "sha": "d9f0698b52938198f53eac44ee455d7fdd51105a",
    "filename": "src/main/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentService.java",
    "status": "modified",
    "additions": 18,
    "deletions": 5,
    "changes": 23,
    "blob_url": "https://github.com/ministryofjustice/prison-api/blob/4921df6c277f1251b3a88de6d30f4d13f628160f/src/main/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentService.java",
    "raw_url": "https://github.com/ministryofjustice/prison-api/raw/4921df6c277f1251b3a88de6d30f4d13f628160f/src/main/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentService.java",
    "contents_url": "https://api.github.com/repos/ministryofjustice/prison-api/contents/src/main/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentService.java?ref=4921df6c277f1251b3a88de6d30f4d13f628160f",
    "patch": "@@ -19,7 +19,9 @@\n \n import java.time.LocalDate;\n import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.*;\n \n @Service\n @Validated\n@@ -64,14 +66,14 @@ public AssessmentDetail getOffenderAssessment(final Long bookingId, final Intege\n     public List<AssessmentSummary> getOffenderAssessments(final String offenderNo) {\n         final var assessments = repository.findByCsraAssessmentAndByOffenderNo_OrderByLatestFirst(offenderNo);\n \n-        return assessments.stream().map(this::getAssessmentSummary).collect(Collectors.toList());\n+        return assessments.stream().map(this::getAssessmentSummary).collect(toList());\n     }\n \n     public CurrentCsraAssessment getCurrentCsraClassification(final String offenderNo) {\n         final var assessments = repository.findByCsraAssessmentAndByOffenderNo_OrderByLatestFirst(offenderNo);\n \n         return assessments.stream().filter(a -> a.getClassificationSummary().isSet()).findFirst()\n-            .map(a -> CurrentCsraAssessment.fromAssessment(a)).orElse(null);\n+            .map(CurrentCsraAssessment::fromAssessment).orElse(null);\n     }\n \n     private AssessmentSummary getAssessmentSummary(final OffenderAssessment assessmentDetails) {\n@@ -100,9 +102,20 @@ private AssessmentSummary getAssessmentSummary(final OffenderAssessment assessme\n         }\n \n         final var assessmentItems = assessmentDetails.getAssessmentItems();\n-        final var assessmentAnswersByQuestionId = assessmentItems.stream().map(OffenderAssessmentItem::getAssessmentAnswer).collect(Collectors.toMap((aa) -> aa.getParentAssessment().getAssessmentId(), AssessmentEntry::getDescription));\n+        final var assessmentAnswersByQuestionId = assessmentItems.stream()\n+            .map(OffenderAssessmentItem::getAssessmentAnswer)\n+            .collect(groupingBy((aa) -> aa.getParentAssessment().getAssessmentId(), mapping(AssessmentEntry::getDescription, toList())));\n+\n+        return assessmentQuestions.stream().map(aq -> getAssessmentQuestionAndAnswers(aq, assessmentAnswersByQuestionId.get(aq.getAssessmentId()))).collect(toList());\n+    }\n \n-        return assessmentQuestions.stream().map(aq -> new AssessmentQuestion(aq.getDescription(), assessmentAnswersByQuestionId.get(aq.getAssessmentId()))).collect(Collectors.toList());\n+    private AssessmentQuestion getAssessmentQuestionAndAnswers(final AssessmentEntry assessment, final List<String> answers) {\n+        if (answers == null) {\n+            return new AssessmentQuestion(assessment.getDescription(), null, null);\n+        }\n+        return new AssessmentQuestion(assessment.getDescription(),\n+            answers.stream().findFirst().orElse(null),\n+            answers.stream().skip(1).collect(toList()));\n     }\n \n     @AllArgsConstructor"
  },
  {
    "sha": "c314db9626f7a7cb077c165356afc745a16ad4c2",
    "filename": "src/test/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentServiceTest.java",
    "status": "modified",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/ministryofjustice/prison-api/blob/4921df6c277f1251b3a88de6d30f4d13f628160f/src/test/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentServiceTest.java",
    "raw_url": "https://github.com/ministryofjustice/prison-api/raw/4921df6c277f1251b3a88de6d30f4d13f628160f/src/test/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentServiceTest.java",
    "contents_url": "https://api.github.com/repos/ministryofjustice/prison-api/contents/src/test/java/uk/gov/justice/hmpps/prison/service/OffenderAssessmentServiceTest.java?ref=4921df6c277f1251b3a88de6d30f4d13f628160f",
    "patch": "@@ -128,6 +128,7 @@ public void getOffenderAssessment_returnsCorrectApiObject() {\n                 AssessmentQuestion.builder()\n                     .question(\"Question 1\")\n                     .answer(\"Answer 1\")\n+                    .additionalAnswers(List.of())\n                     .build(),\n                 AssessmentQuestion.builder()\n                     .question(\"Question 2\")\n@@ -157,6 +158,59 @@ public void getOffenderAssessment_throwsEntityNotFoundIfNoCsraQuestions() {\n         assertThatThrownBy(() -> service.getOffenderAssessment(-1L, 2)).isInstanceOf(EntityNotFoundException.class);\n     }\n \n+    @Test\n+    public void getOffenderAssessment_handlesMultipleAnswersToCsraQuestion() {\n+        when(repository.findByBookingIdAndAssessmentSeq(any(), any())).thenReturn(Optional.of(\n+            getOffenderAssessment_MinimalBuilder(-1L, 2, \"NN123N\", -11L)\n+                .assessmentItems(List.of(\n+                    OffenderAssessmentItem.builder()\n+                        .assessmentAnswer(AssessmentEntry.builder()\n+                            .description(\"First answer\")\n+                            .parentAssessment(AssessmentEntry.builder()\n+                                .assessmentId(-10L)\n+                                .build())\n+                            .build())\n+                        .build(),\n+                    OffenderAssessmentItem.builder()\n+                        .assessmentAnswer(AssessmentEntry.builder()\n+                            .description(\"Second answer\")\n+                            .parentAssessment(AssessmentEntry.builder()\n+                                .assessmentId(-10L)\n+                                .build())\n+                            .build())\n+                        .build(),\n+                    OffenderAssessmentItem.builder()\n+                        .assessmentAnswer(AssessmentEntry.builder()\n+                            .description(\"Third answer\")\n+                            .parentAssessment(AssessmentEntry.builder()\n+                                .assessmentId(-10L)\n+                                .build())\n+                            .build())\n+                        .build()\n+                ))\n+                .build()\n+        ));\n+\n+        when(assessmentRepository.findCsraQuestionsByAssessmentTypeIdOrderedByListSeq(-11L)).thenReturn(List.of(\n+            AssessmentEntry.builder()\n+                .description(\"Multiple answer question\")\n+                .assessmentId(-10L)\n+                .build()\n+        ));\n+\n+        final var assessment = service.getOffenderAssessment(-1L, 2);\n+        assertThat(assessment.getQuestions()).isEqualTo(List.of(\n+            AssessmentQuestion.builder()\n+                .question(\"Multiple answer question\")\n+                .answer(\"First answer\")\n+                .additionalAnswers(List.of(\n+                    \"Second answer\", \"Third answer\"\n+                ))\n+                .build()\n+            )\n+        );\n+    }\n+\n     @Test\n     public void getOffenderAssessment_ignoresAnswersThatAreNotInCsraQuestions() {\n         when(repository.findByBookingIdAndAssessmentSeq(any(), any())).thenReturn(Optional.of("
  }
]
