[
  {
    "sha": "5d28aa0d609fef4fac8519457e1c696ecc9e2e29",
    "filename": "api-tests/specs/zassign-roles/assign-roles.js",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/NDPH-ARTS/mts-services/blob/4fd53d230040b06c58f06047f8f90cfad871fc77/api-tests/specs/zassign-roles/assign-roles.js",
    "raw_url": "https://github.com/NDPH-ARTS/mts-services/raw/4fd53d230040b06c58f06047f8f90cfad871fc77/api-tests/specs/zassign-roles/assign-roles.js",
    "contents_url": "https://api.github.com/repos/NDPH-ARTS/mts-services/contents/api-tests/specs/zassign-roles/assign-roles.js?ref=4fd53d230040b06c58f06047f8f90cfad871fc77",
    "patch": "@@ -54,4 +54,4 @@ describe('As a user with Assign Roles permission I want to assign roles to a use\n \n         expect(fetchResponse1.status).to.equal(HttpStatus.CREATED)\n     });\n-});\n\\ No newline at end of file\n+});"
  },
  {
    "sha": "d03f1834303b5b6d2802e62eeb3261d0825eae95",
    "filename": "practitioner-service/src/main/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/NDPH-ARTS/mts-services/blob/4fd53d230040b06c58f06047f8f90cfad871fc77/practitioner-service/src/main/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerController.java",
    "raw_url": "https://github.com/NDPH-ARTS/mts-services/raw/4fd53d230040b06c58f06047f8f90cfad871fc77/practitioner-service/src/main/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerController.java",
    "contents_url": "https://api.github.com/repos/NDPH-ARTS/mts-services/contents/practitioner-service/src/main/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerController.java?ref=4fd53d230040b06c58f06047f8f90cfad871fc77",
    "patch": "@@ -71,6 +71,7 @@ public PractitionerController(EntityService entityService,  SecurityContextUtil\n         return ResponseEntity.ok(entityService.findPractitionerById(id));\n     }\n \n+    @PreAuthorize(\"@authorisationService.authorise('assign-role', #roleAssignment.siteId)\") //NOSONAR\n     @PostMapping(path = \"/{practitionerId}/roles\")\n     public ResponseEntity<Response> saveRoleAssignment(@PathVariable String practitionerId,\n                                                        @RequestBody RoleAssignment roleAssignment) {"
  },
  {
    "sha": "fa87227c70e3e92d0072dcfa226b4e84c39dd618",
    "filename": "practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/TestAuthorisationConfigurationProvider.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/NDPH-ARTS/mts-services/blob/4fd53d230040b06c58f06047f8f90cfad871fc77/practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/TestAuthorisationConfigurationProvider.java",
    "raw_url": "https://github.com/NDPH-ARTS/mts-services/raw/4fd53d230040b06c58f06047f8f90cfad871fc77/practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/TestAuthorisationConfigurationProvider.java",
    "contents_url": "https://api.github.com/repos/NDPH-ARTS/mts-services/contents/practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/TestAuthorisationConfigurationProvider.java?ref=4fd53d230040b06c58f06047f8f90cfad871fc77",
    "patch": "@@ -7,6 +7,7 @@\n import org.springframework.context.annotation.Profile;\n import uk.ac.ox.ndph.mts.security.authorisation.AuthorisationService;\n \n+import static org.mockito.ArgumentMatchers.anyList;\n import static org.mockito.ArgumentMatchers.anyString;\n \n @Profile(\"no-authZ\")\n@@ -18,6 +19,10 @@\n     public AuthorisationService authorisationService() {\n         var mockService = Mockito.mock(AuthorisationService.class);\n         Mockito.when(mockService.authorise(anyString())).thenReturn(true);\n+        Mockito.when(mockService.authorise(anyString(), anyString())).thenReturn(true);\n+        Mockito.when(mockService.authorise(anyString(), anyList(), anyString())).thenReturn(true);\n+        Mockito.when(mockService.authorise(anyString(), anyList())).thenReturn(true);\n+\n         return mockService;\n     }\n }"
  },
  {
    "sha": "c6ace06ea39cdc0690a63f14da6ff8adacb0f00d",
    "filename": "practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerControllerTests.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/NDPH-ARTS/mts-services/blob/4fd53d230040b06c58f06047f8f90cfad871fc77/practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerControllerTests.java",
    "raw_url": "https://github.com/NDPH-ARTS/mts-services/raw/4fd53d230040b06c58f06047f8f90cfad871fc77/practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerControllerTests.java",
    "contents_url": "https://api.github.com/repos/NDPH-ARTS/mts-services/contents/practitioner-service/src/test/java/uk/ac/ox/ndph/mts/practitioner_service/controller/PractitionerControllerTests.java?ref=4fd53d230040b06c58f06047f8f90cfad871fc77",
    "patch": "@@ -2,6 +2,7 @@\n \n import org.apache.logging.log4j.util.Strings;\n import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n import org.springframework.boot.test.context.SpringBootTest;\n@@ -24,8 +25,10 @@\n import java.util.Collections;\n import java.util.List;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import uk.ac.ox.ndph.mts.security.authorisation.AuthorisationService;\n import uk.ac.ox.ndph.mts.security.authentication.SecurityContextUtil;\n \n+\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.equalTo;\n@@ -186,7 +189,8 @@ void TestPostRoleAssignment_WhenPartialInput_Returns201AndId() throws Exception\n         // Arrange\n         String returnedValue = \"123\";\n         when(entityService.saveRoleAssignment(any(RoleAssignment.class))).thenReturn(returnedValue);\n-        String jsonString = \"{}\";\n+\n+        String jsonString = \"{\\\"siteId\\\": \\\"abc\\\"}\";\n         // Act + Assert\n         this.mockMvc\n                 .perform(post(roleAssignmentUri).contentType(MediaType.APPLICATION_JSON).content(jsonString))\n@@ -198,7 +202,7 @@ void TestPostRoleAssignment_WhenPartialInput_Returns201AndId() throws Exception\n     void TestPostRoleAssignment_WhenServiceFails_Returns502() throws Exception {\n         // Arrange\n         when(entityService.saveRoleAssignment(any(RoleAssignment.class))).thenThrow(RestException.class);\n-        String jsonString = \"{}\";\n+        String jsonString = \"{\\\"siteId\\\": \\\"abc\\\", \\\"roleId\\\": \\\"123\\\"}\";\n \n         // Act + Assert\n         this.mockMvc"
  },
  {
    "sha": "dee3e11680283b1ca741e5b224a06f8c83ca612d",
    "filename": "role-service/src/main/resources/db/changelog/changelog-permission-data.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/NDPH-ARTS/mts-services/blob/4fd53d230040b06c58f06047f8f90cfad871fc77/role-service/src/main/resources/db/changelog/changelog-permission-data.xml",
    "raw_url": "https://github.com/NDPH-ARTS/mts-services/raw/4fd53d230040b06c58f06047f8f90cfad871fc77/role-service/src/main/resources/db/changelog/changelog-permission-data.xml",
    "contents_url": "https://api.github.com/repos/NDPH-ARTS/mts-services/contents/role-service/src/main/resources/db/changelog/changelog-permission-data.xml?ref=4fd53d230040b06c58f06047f8f90cfad871fc77",
    "patch": "@@ -17,6 +17,11 @@\n             <column name=\"modified_by\" value=\"katesan\"/>\n         </insert>\n \n+        <insert tableName=\"permission\">\n+            <column name=\"id\" value=\"assign-role\"/>\n+            <column name=\"created_by\" value=\"darrsmi\"/>\n+            <column name=\"modified_by\" value=\"darrsmi\"/>\n+        </insert>\n \n     </changeSet>\n </databaseChangeLog>"
  },
  {
    "sha": "2d16ab2b898e1bd961df6a91d28ae2c648dec467",
    "filename": "security/src/main/java/uk/ac/ox/ndph/mts/security/authorisation/AuthorisationService.java",
    "status": "modified",
    "additions": 19,
    "deletions": 27,
    "changes": 46,
    "blob_url": "https://github.com/NDPH-ARTS/mts-services/blob/4fd53d230040b06c58f06047f8f90cfad871fc77/security/src/main/java/uk/ac/ox/ndph/mts/security/authorisation/AuthorisationService.java",
    "raw_url": "https://github.com/NDPH-ARTS/mts-services/raw/4fd53d230040b06c58f06047f8f90cfad871fc77/security/src/main/java/uk/ac/ox/ndph/mts/security/authorisation/AuthorisationService.java",
    "contents_url": "https://api.github.com/repos/NDPH-ARTS/mts-services/contents/security/src/main/java/uk/ac/ox/ndph/mts/security/authorisation/AuthorisationService.java?ref=4fd53d230040b06c58f06047f8f90cfad871fc77",
    "patch": "@@ -121,13 +121,15 @@ public boolean authorise(String requiredPermission, List<String> entitiesSiteIds\n                 return false;\n             }\n \n-            if (!hasValidPermissions(requiredPermission, roleAssignments)) {\n+            var rolesAssignmentsWithPermission = getRolesAssignmentsWithPermission(requiredPermission, roleAssignments);\n+\n+            if (rolesAssignmentsWithPermission.isEmpty()) {\n                 return false;\n             }\n \n             List<SiteDTO> sites = siteServiceClient.getAllSites();\n \n-            return isAuthorisedToAllSites(sites, roleAssignments, entitiesSiteIds);\n+            return isAuthorisedToAllSites(sites, rolesAssignmentsWithPermission, entitiesSiteIds);\n \n         } catch (Exception e) {\n             LOGGER.info(String.format(\"Authorisation process failed. Error message: %s\", e.getMessage()));\n@@ -141,32 +143,22 @@ public boolean authorise(String requiredPermission, List<String> entitiesSiteIds\n      * @param roleAssignments user role assignments\n      * @return true if required permission is present in one of the roles\n      */\n-    private boolean hasValidPermissions(String requiredPermission, List<RoleAssignmentDTO> roleAssignments) {\n-\n-        try {\n+    private List<RoleAssignmentDTO> getRolesAssignmentsWithPermission(String requiredPermission,\n+                                                                      List<RoleAssignmentDTO> roleAssignments) {\n \n-            List<String> roleIds = roleAssignments.stream()\n-                    .map(RoleAssignmentDTO::getRoleId).collect(Collectors.toList());\n-\n-            //get permissions for the the practitioner role assignments\n-            //and filter role assignments to be only those which have the required permission in them\n-            var hasNoRoleWithPermission = roleServiceClient.getRolesByIds(roleIds).stream()\n-                    .filter(roleDto -> hasRequiredPermissionInRole(roleDto, requiredPermission))\n-                    .findFirst()\n-                    .isEmpty();\n-\n-            //validate the required permission is present\n-            if (hasNoRoleWithPermission) {\n-                return false;\n-            }\n+        List<String> roleIds = roleAssignments.stream()\n+                .map(RoleAssignmentDTO::getRoleId).collect(Collectors.toList());\n \n-            return true;\n+        //get permissions for the the practitioner role assignments\n+        //and filter role assignments to be only those which have the required permission in them\n+        Set<String> rolesWithPermission = roleServiceClient.getRolesByIds(roleIds).stream()\n+                .filter(roleDto -> hasRequiredPermissionInRole(roleDto, requiredPermission))\n+                .map(RoleDTO::getId)\n+                .collect(Collectors.toSet());\n \n-        } catch (Exception e) {\n-            LOGGER.info(String.format(\"Authorisation process failed on validating user assignment role permissions. \"\n-                    + \"Error message: %s\", e.getMessage()));\n-            return false;\n-        }\n+        return roleAssignments.stream()\n+                .filter(roleAssignment -> rolesWithPermission.contains(roleAssignment.getRoleId()))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n@@ -181,8 +173,8 @@ private boolean hasRequiredPermissionInRole(RoleDTO role, String requiredPermiss\n     }\n \n     private boolean isAuthorisedToAllSites(List<SiteDTO> sites,\n-                                          List<RoleAssignmentDTO> roleAssignments,\n-                                          List<String> entitiesSiteIds) {\n+                                           List<RoleAssignmentDTO> roleAssignments,\n+                                           List<String> entitiesSiteIds) {\n \n         Map<String, ArrayList<String>> tree = siteTreeUtil.getSiteSubTrees(sites);\n "
  }
]
