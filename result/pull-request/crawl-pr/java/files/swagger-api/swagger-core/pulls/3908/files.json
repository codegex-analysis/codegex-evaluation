[
  {
    "sha": "2c3256c319ea8280ca9507f483fc1cfce74762d9",
    "filename": "modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java",
    "status": "modified",
    "additions": 72,
    "deletions": 33,
    "changes": 105,
    "blob_url": "https://github.com/swagger-api/swagger-core/blob/6a793c5571c2ff1710975ec65965d86be08c6c43/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java",
    "raw_url": "https://github.com/swagger-api/swagger-core/raw/6a793c5571c2ff1710975ec65965d86be08c6c43/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java",
    "contents_url": "https://api.github.com/repos/swagger-api/swagger-core/contents/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java?ref=6a793c5571c2ff1710975ec65965d86be08c6c43",
    "patch": "@@ -303,7 +303,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context\n                 if (jsonIdentityReference == null) {\n                     jsonIdentityReference = type.getRawClass().getAnnotation(JsonIdentityReference.class);\n                 }\n-                model = GeneratorWrapper.processJsonIdentity(annotatedType, context, _mapper, jsonIdentityInfo, jsonIdentityReference);\n+                model = new GeneratorWrapper().processJsonIdentity(annotatedType, context, _mapper, jsonIdentityInfo, jsonIdentityReference);\n                 if (model != null) {\n                     return model;\n                 }\n@@ -1046,8 +1046,18 @@ private void handleUnwrapped(List<Schema> props, Schema innerModel, String prefi\n         }\n     }\n \n-    private enum GeneratorWrapper {\n-        PROPERTY(ObjectIdGenerators.PropertyGenerator.class) {\n+\n+    private class GeneratorWrapper {\n+\n+        private final List<Base> wrappers = new ArrayList();\n+\n+\n+        private final class PropertyGeneratorWrapper extends GeneratorWrapper.Base<ObjectIdGenerators.PropertyGenerator> {\n+\n+            public PropertyGeneratorWrapper(Class<? extends ObjectIdGenerator> generator) {\n+                super(generator);\n+            }\n+\n             @Override\n             protected Schema processAsProperty(String propertyName, AnnotatedType type,\n                                                ModelConverterContext context, ObjectMapper mapper) {\n@@ -1064,7 +1074,7 @@ protected Schema processAsId(String propertyName, AnnotatedType type,\n                                          ModelConverterContext context, ObjectMapper mapper) {\n                 final JavaType javaType;\n                 if (type.getType() instanceof JavaType) {\n-                    javaType = (JavaType)type.getType();\n+                    javaType = (JavaType) type.getType();\n                 } else {\n                     javaType = mapper.constructType(type.getType());\n                 }\n@@ -1098,8 +1108,14 @@ protected Schema processAsId(String propertyName, AnnotatedType type,\n                 }\n                 return null;\n             }\n-        },\n-        INT(ObjectIdGenerators.IntSequenceGenerator.class) {\n+        }\n+\n+        private final class IntGeneratorWrapper extends GeneratorWrapper.Base<ObjectIdGenerators.IntSequenceGenerator> {\n+\n+            public IntGeneratorWrapper(Class<? extends ObjectIdGenerator> generator) {\n+                super(generator);\n+            }\n+\n             @Override\n             protected Schema processAsProperty(String propertyName, AnnotatedType type,\n                                                ModelConverterContext context, ObjectMapper mapper) {\n@@ -1112,8 +1128,14 @@ protected Schema processAsId(String propertyName, AnnotatedType type,\n                                          ModelConverterContext context, ObjectMapper mapper) {\n                 return new IntegerSchema();\n             }\n-        },\n-        UUID(ObjectIdGenerators.UUIDGenerator.class) {\n+\n+        }\n+\n+        private final class UUIDGeneratorWrapper extends GeneratorWrapper.Base<ObjectIdGenerators.UUIDGenerator> {\n+\n+            public UUIDGeneratorWrapper(Class<? extends ObjectIdGenerator> generator) {\n+                super(generator);\n+            }\n             @Override\n             protected Schema processAsProperty(String propertyName, AnnotatedType type,\n                                                ModelConverterContext context, ObjectMapper mapper) {\n@@ -1126,8 +1148,15 @@ protected Schema processAsId(String propertyName, AnnotatedType type,\n                                          ModelConverterContext context, ObjectMapper mapper) {\n                 return new UUIDSchema();\n             }\n-        },\n-        NONE(ObjectIdGenerators.None.class) {\n+\n+        }\n+\n+        private final class NoneGeneratorWrapper extends GeneratorWrapper.Base<ObjectIdGenerators.None> {\n+\n+            public NoneGeneratorWrapper(Class<? extends ObjectIdGenerator> generator) {\n+                super(generator);\n+            }\n+\n             // When generator = ObjectIdGenerators.None.class property should be processed as normal property.\n             @Override\n             protected Schema processAsProperty(String propertyName, AnnotatedType type,\n@@ -1140,24 +1169,27 @@ protected Schema processAsId(String propertyName, AnnotatedType type,\n                                          ModelConverterContext context, ObjectMapper mapper) {\n                 return null;\n             }\n-        };\n+        }\n \n-        private final Class<? extends ObjectIdGenerator> generator;\n+        private abstract class Base<T> {\n \n-        GeneratorWrapper(Class<? extends ObjectIdGenerator> generator) {\n-            this.generator = generator;\n-        }\n+            private final Class<? extends ObjectIdGenerator> generator;\n \n-        protected abstract Schema processAsProperty(String propertyName, AnnotatedType type,\n-                                                    ModelConverterContext context, ObjectMapper mapper);\n+            Base(Class<? extends ObjectIdGenerator> generator) {\n+                this.generator = generator;\n+            }\n \n-        protected abstract Schema processAsId(String propertyName, AnnotatedType type,\n-                                              ModelConverterContext context, ObjectMapper mapper);\n+            protected abstract Schema processAsProperty(String propertyName, AnnotatedType type,\n+                                                        ModelConverterContext context, ObjectMapper mapper);\n \n-        public static Schema processJsonIdentity(AnnotatedType type, ModelConverterContext context,\n+            protected abstract Schema processAsId(String propertyName, AnnotatedType type,\n+                                                  ModelConverterContext context, ObjectMapper mapper);\n+        }\n+\n+        public Schema processJsonIdentity(AnnotatedType type, ModelConverterContext context,\n                                                  ObjectMapper mapper, JsonIdentityInfo identityInfo,\n                                                  JsonIdentityReference identityReference) {\n-            final GeneratorWrapper wrapper = identityInfo != null ? getWrapper(identityInfo.generator()) : null;\n+            final GeneratorWrapper.Base wrapper = identityInfo != null ? getWrapper(identityInfo.generator()) : null;\n             if (wrapper == null) {\n                 return null;\n             }\n@@ -1168,25 +1200,32 @@ public static Schema processJsonIdentity(AnnotatedType type, ModelConverterConte\n             }\n         }\n \n-        private static GeneratorWrapper getWrapper(Class<?> generator) {\n-            for (GeneratorWrapper value : GeneratorWrapper.values()) {\n-                if (value.generator.isAssignableFrom(generator)) {\n-                    return value;\n-                }\n+        private GeneratorWrapper.Base getWrapper(Class<? extends ObjectIdGenerator> generator) {\n+            if(ObjectIdGenerators.PropertyGenerator.class.isAssignableFrom(generator)) {\n+                return new PropertyGeneratorWrapper(generator);\n+            } else if(ObjectIdGenerators.IntSequenceGenerator.class.isAssignableFrom(generator)) {\n+                return new IntGeneratorWrapper(generator);\n+            } else if(ObjectIdGenerators.UUIDGenerator.class.isAssignableFrom(generator)) {\n+                return new UUIDGeneratorWrapper(generator);\n+            } else if(ObjectIdGenerators.None.class.isAssignableFrom(generator)) {\n+                return new NoneGeneratorWrapper(generator);\n             }\n             return null;\n         }\n \n-        private static Schema process(Schema id, String propertyName, AnnotatedType type,\n+        protected Schema process(Schema id, String propertyName, AnnotatedType type,\n                                       ModelConverterContext context) {\n \n-            Schema model = context.resolve(removeJsonIdentityAnnotations(type));\n-            Schema mi = model;\n-            mi.addProperties(propertyName, id);\n-            return new Schema().$ref(StringUtils.isNotEmpty(mi.get$ref())\n-                    ? mi.get$ref() : mi.getName());\n+            type = removeJsonIdentityAnnotations(type);\n+            Schema model = context.resolve(type);\n+            if(model == null){\n+                model = resolve(type,context, null);\n+            }\n+            model.addProperties(propertyName, id);\n+            return new Schema().$ref(StringUtils.isNotEmpty(model.get$ref())\n+                    ? model.get$ref() : model.getName());\n         }\n-        private static AnnotatedType removeJsonIdentityAnnotations(AnnotatedType type) {\n+        private AnnotatedType removeJsonIdentityAnnotations(AnnotatedType type) {\n             return new AnnotatedType()\n                     .jsonUnwrappedHandler(type.getJsonUnwrappedHandler())\n                     .jsonViewAnnotation(type.getJsonViewAnnotation())"
  },
  {
    "sha": "bbc9d4ece38e665678a4b2cf91f1f3dfa0795b13",
    "filename": "modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/JsonIdentityTest.java",
    "status": "modified",
    "additions": 38,
    "deletions": 27,
    "changes": 65,
    "blob_url": "https://github.com/swagger-api/swagger-core/blob/6a793c5571c2ff1710975ec65965d86be08c6c43/modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/JsonIdentityTest.java",
    "raw_url": "https://github.com/swagger-api/swagger-core/raw/6a793c5571c2ff1710975ec65965d86be08c6c43/modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/JsonIdentityTest.java",
    "contents_url": "https://api.github.com/repos/swagger-api/swagger-core/contents/modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/JsonIdentityTest.java?ref=6a793c5571c2ff1710975ec65965d86be08c6c43",
    "patch": "@@ -85,22 +85,6 @@ public void testJsonIdentityCyclic() throws IOException {\n             \"            application/xml: {}\\n\" +\n             \"components:\\n\" +\n             \"  schemas:\\n\" +\n-            \"    SourceDefinition4:\\n\" +\n-            \"      type: object\\n\" +\n-            \"      properties:\\n\" +\n-            \"        name:\\n\" +\n-            \"          type: string\\n\" +\n-            \"        testName2:\\n\" +\n-            \"          type: integer\\n\" +\n-            \"          format: int32\\n\" +\n-            \"    SourceDefinition5:\\n\" +\n-            \"      type: object\\n\" +\n-            \"      properties:\\n\" +\n-            \"        name:\\n\" +\n-            \"          type: string\\n\" +\n-            \"        '@id':\\n\" +\n-            \"          type: integer\\n\" +\n-            \"          format: int32\\n\" +\n             \"    ModelWithJsonIdentity:\\n\" +\n             \"      type: object\\n\" +\n             \"      properties:\\n\" +\n@@ -142,15 +126,8 @@ public void testJsonIdentityCyclic() throws IOException {\n             \"          type: string\\n\" +\n             \"        WithoutJsonIdentityReference:\\n\" +\n             \"          $ref: '#/components/schemas/SourceDefinition10'\\n\" +\n-            \"    SourceDefinition3:\\n\" +\n-            \"      type: object\\n\" +\n-            \"      properties:\\n\" +\n-            \"        name:\\n\" +\n-            \"          type: string\\n\" +\n-            \"        driverId:\\n\" +\n-            \"          type: string\\n\" +\n-            \"        '@id':\\n\" +\n-            \"          type: string\\n\" +\n+            \"        IntSequenceGeneratorAtClassLevel:\\n\" +\n+            \"          $ref: '#/components/schemas/SourceDefinition11'\\n\" +\n             \"    SourceDefinition1:\\n\" +\n             \"      type: object\\n\" +\n             \"      properties:\\n\" +\n@@ -165,13 +142,39 @@ public void testJsonIdentityCyclic() throws IOException {\n             \"          type: string\\n\" +\n             \"        name:\\n\" +\n             \"          type: string\\n\" +\n-            \"    SourceDefinition8:\\n\" +\n+            \"    SourceDefinition11:\\n\" +\n+            \"      type: object\\n\" +\n+            \"      properties:\\n\" +\n+            \"        'name':\\n\" +\n+            \"          type: string\\n\" +\n+            \"        '@id':\\n\" +\n+            \"          type: integer\\n\" +\n+            \"          format: int32\\n\"+\n+            \"    SourceDefinition3:\\n\" +\n             \"      type: object\\n\" +\n             \"      properties:\\n\" +\n             \"        name:\\n\" +\n             \"          type: string\\n\" +\n             \"        driverId:\\n\" +\n             \"          type: string\\n\" +\n+            \"        '@id':\\n\" +\n+            \"          type: string\\n\" +\n+            \"    SourceDefinition4:\\n\" +\n+            \"      type: object\\n\" +\n+            \"      properties:\\n\" +\n+            \"        name:\\n\" +\n+            \"          type: string\\n\" +\n+            \"        testName2:\\n\" +\n+            \"          type: integer\\n\" +\n+            \"          format: int32\\n\" +\n+            \"    SourceDefinition5:\\n\" +\n+            \"      type: object\\n\" +\n+            \"      properties:\\n\" +\n+            \"        name:\\n\" +\n+            \"          type: string\\n\" +\n+            \"        '@id':\\n\" +\n+            \"          type: integer\\n\" +\n+            \"          format: int32\\n\" +\n             \"    SourceDefinition6:\\n\" +\n             \"      type: object\\n\" +\n             \"      properties:\\n\" +\n@@ -187,5 +190,13 @@ public void testJsonIdentityCyclic() throws IOException {\n             \"          type: string\\n\" +\n             \"        '@id':\\n\" +\n             \"          type: string\\n\" +\n-            \"          format: uuid\\n\";\n+            \"          format: uuid\\n\" +\n+            \"    SourceDefinition8:\\n\" +\n+            \"      type: object\\n\" +\n+            \"      properties:\\n\" +\n+            \"        name:\\n\" +\n+            \"          type: string\\n\" +\n+            \"        driverId:\\n\" +\n+            \"          type: string\\n\";\n+\n }\n\\ No newline at end of file"
  },
  {
    "sha": "01f56ba4edc1b36407da777f2efe0547c106c843",
    "filename": "modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/ModelWithJsonIdentity.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/swagger-api/swagger-core/blob/6a793c5571c2ff1710975ec65965d86be08c6c43/modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/ModelWithJsonIdentity.java",
    "raw_url": "https://github.com/swagger-api/swagger-core/raw/6a793c5571c2ff1710975ec65965d86be08c6c43/modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/ModelWithJsonIdentity.java",
    "contents_url": "https://api.github.com/repos/swagger-api/swagger-core/contents/modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/ModelWithJsonIdentity.java?ref=6a793c5571c2ff1710975ec65965d86be08c6c43",
    "patch": "@@ -142,4 +142,12 @@\n         public String driver;\n         public String name;\n     }\n+\n+    @JsonProperty(\"IntSequenceGeneratorAtClassLevel\")\n+    public SourceDefinition11 testIntSequenceGeneratorAtClassLevel;\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n+    public class SourceDefinition11 {\n+        public String name;\n+    }\n }\n\\ No newline at end of file"
  }
]
