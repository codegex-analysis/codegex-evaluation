[
  {
    "sha": "6985656208ebf6ebfdd8e4dbf6f6ab07a3149cd2",
    "filename": "src/level3/lesson3/client/one/EchoClient.java",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/client/one/EchoClient.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/client/one/EchoClient.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/client/one/EchoClient.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,232 @@\n+package level3.lesson3.client.one;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.*;\n+import java.net.Socket;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.Font.ITALIC;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private final int SERVER_PORT = 8190;\n+    private final int WIDTH = 600;\n+    private final int HEIGHT = 400;\n+    private final int TIME_FOR_CLOSE_CONNECTION = 400;\n+\n+\n+\n+    private JTextField messageInputField;\n+    private  JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private String login;\n+\n+    boolean isAuthorized = false;\n+\n+    private AtomicInteger time = new AtomicInteger(0);\n+\n+\n+    public EchoClient() {\n+\n+        try {\n+            openConnection();\n+        } catch (IOException ignored) {}\n+        settingWindow();\n+    }\n+\n+    private void openConnection() throws IOException{\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        String [] arr = messageFromServer.split(\" \");\n+                        login = arr[1];\n+                        File history = new File(\"C://history//history_\" + login +\".txt\");\n+                        if (history.exists()) {\n+                            try (BufferedReader reader = new BufferedReader(new FileReader(history))) {\n+                                String str;\n+                                Font fontForHistory = new Font(\"SansSerif\", ITALIC, 14);\n+                                int count = 0;\n+                                while ((str= reader.readLine()) != null && count <100) {\n+                                    chatArea.setFont(fontForHistory);\n+                                    chatArea.append(str);\n+                                    chatArea.append(\"\\n\");\n+                                    count++;\n+                                }\n+                                chatArea.append(\"____________________________________________\\n\");\n+                                chatArea.append(\"Конец истории\\n\");\n+                                chatArea.append(\"____________________________________________\\n\");\n+                            } catch (IOException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                if (isAuthorized) {\n+                    Thread timeToCloseConnection = new Thread(()->{\n+                        while (time.intValue() < TIME_FOR_CLOSE_CONNECTION && isAuthorized) {\n+                            try {\n+                                time.getAndIncrement();\n+                                //System.out.println(time);\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        isAuthorized = false;\n+                        closeConnect();\n+                    });\n+                    timeToCloseConnection.setDaemon(true);\n+                    timeToCloseConnection.start();\n+                }\n+\n+                while (isAuthorized) {\n+\n+                    String messageFromServer = dis.readUTF();\n+                    chatArea.append(ZonedDateTime.now().toLocalTime().getHour() +\" : \" + ZonedDateTime.now().toLocalTime().getMinute() + \" \" + messageFromServer + \"\\n\");\n+\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnect() {\n+        saveHistory();\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {}\n+        try {\n+            dos.close();\n+        }catch (IOException ignored) {}\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {}\n+    }\n+\n+    private void saveHistory() {\n+        File dir = new File(\"C://history//\");\n+        boolean createdDir = dir.mkdirs();\n+        if(createdDir) {\n+            //System.out.println(\"Директория создана\");\n+        }\n+        //else System.out.println(\"директория не создана\");\n+        File history = new File(\"C://history//history_\" + login +\".txt\");\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+        if (!history.exists()) {\n+            try\n+            {\n+                boolean created = history.createNewFile();\n+                if(created)\n+                    System.out.println(\"File has been created\");\n+            }\n+            catch(IOException ex){\n+                // System.out.println(\"не удалось\");\n+            }\n+        }\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(history))) {\n+            writer.write(chatArea.getText());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void sendMessage () {\n+\n+        if (!messageInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(messageInputField.getText());\n+                if (messageInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnect();\n+                }\n+                messageInputField.setText(\"\");\n+                time = new AtomicInteger(0);\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+    public void settingWindow() {\n+        setTitle(\"Client\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIDTH, HEIGHT);\n+        setLocationRelativeTo(null);\n+        JMenuBar mainMenu = new JMenuBar();\n+        JMenu mFile = new JMenu(\"File\");\n+        setLayout(new GridLayout(2, 1));\n+        JPanel[] jp = new JPanel[4];\n+        for (int i = 0; i < 2; i++) {\n+            jp[i] = new JPanel();\n+            add(jp[i]);\n+        }\n+\n+\n+        jp[0].setLayout(new BorderLayout());\n+        chatArea= new JTextArea();\n+        chatArea.setLineWrap(true);\n+\n+        JScrollPane jsp = new JScrollPane(chatArea);\n+        jp[0].add(jsp);\n+\n+        jp[1].setLayout(new BorderLayout());\n+        messageInputField = new JFormattedTextField();\n+        messageInputField.addActionListener(e -> sendMessage());\n+\n+\n+        JButton send = new JButton(\"Отправить сообщение\");\n+        send.addActionListener(e -> sendMessage());\n+        jp[1].add(messageInputField, BorderLayout.CENTER);\n+        jp[1].add(send, BorderLayout.EAST);\n+\n+\n+        JMenuItem miFileNew = new JMenuItem(\"New\");\n+        JMenuItem miFileExit = new JMenuItem(\"Exit\");\n+        mainMenu.add(mFile);\n+        setJMenuBar(mainMenu);\n+\n+\n+        mFile.add(miFileNew);\n+        mFile.addSeparator();\n+        mFile.add(miFileExit);\n+\n+        miFileExit.addActionListener(e -> System.exit(0));\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/end\");\n+                    closeConnect();\n+                } catch (IOException ignored) {}\n+                System.out.println(\"BYE\");\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(EchoClient::new);\n+    }\n+\n+}"
  },
  {
    "sha": "7f8117b1e164101576053bd1fa8b123f02825474",
    "filename": "src/level3/lesson3/client/three/EchoClient.java",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/client/three/EchoClient.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/client/three/EchoClient.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/client/three/EchoClient.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,232 @@\n+package level3.lesson3.client.three;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.*;\n+import java.net.Socket;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.Font.ITALIC;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private final int SERVER_PORT = 8190;\n+    private final int WIDTH = 600;\n+    private final int HEIGHT = 400;\n+    private final int TIME_FOR_CLOSE_CONNECTION = 400;\n+\n+\n+\n+    private JTextField messageInputField;\n+    private  JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private String login;\n+\n+    boolean isAuthorized = false;\n+\n+    private AtomicInteger time = new AtomicInteger(0);\n+\n+\n+    public EchoClient() {\n+\n+        try {\n+            openConnection();\n+        } catch (IOException ignored) {}\n+        settingWindow();\n+    }\n+\n+    private void openConnection() throws IOException{\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        String [] arr = messageFromServer.split(\" \");\n+                        login = arr[1];\n+                        File history = new File(\"C://history//history_\" + login +\".txt\");\n+                        if (history.exists()) {\n+                            try (BufferedReader reader = new BufferedReader(new FileReader(history))) {\n+                                String str;\n+                                Font fontForHistory = new Font(\"SansSerif\", ITALIC, 14);\n+                                int count = 0;\n+                                while ((str= reader.readLine()) != null && count <100) {\n+                                    chatArea.setFont(fontForHistory);\n+                                    chatArea.append(str);\n+                                    chatArea.append(\"\\n\");\n+                                    count++;\n+                                }\n+                                chatArea.append(\"____________________________________________\\n\");\n+                                chatArea.append(\"Конец истории\\n\");\n+                                chatArea.append(\"____________________________________________\\n\");\n+                            } catch (IOException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                if (isAuthorized) {\n+                    Thread timeToCloseConnection = new Thread(()->{\n+                        while (time.intValue() < TIME_FOR_CLOSE_CONNECTION && isAuthorized) {\n+                            try {\n+                                time.getAndIncrement();\n+                                //System.out.println(time);\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        isAuthorized = false;\n+                        closeConnect();\n+                    });\n+                    timeToCloseConnection.setDaemon(true);\n+                    timeToCloseConnection.start();\n+                }\n+\n+                while (isAuthorized) {\n+\n+                    String messageFromServer = dis.readUTF();\n+                    chatArea.append(ZonedDateTime.now().toLocalTime().getHour() +\" : \" + ZonedDateTime.now().toLocalTime().getMinute() + \" \" + messageFromServer + \"\\n\");\n+\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnect() {\n+        saveHistory();\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {}\n+        try {\n+            dos.close();\n+        }catch (IOException ignored) {}\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {}\n+    }\n+\n+    private void saveHistory() {\n+        File dir = new File(\"C://history//\");\n+        boolean createdDir = dir.mkdirs();\n+        if(createdDir) {\n+            //System.out.println(\"Директория создана\");\n+        }\n+        //else System.out.println(\"директория не создана\");\n+        File history = new File(\"C://history//history_\" + login +\".txt\");\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+        if (!history.exists()) {\n+            try\n+            {\n+                boolean created = history.createNewFile();\n+                if(created)\n+                    System.out.println(\"File has been created\");\n+            }\n+            catch(IOException ex){\n+                // System.out.println(\"не удалось\");\n+            }\n+        }\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(history))) {\n+            writer.write(chatArea.getText());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void sendMessage () {\n+\n+        if (!messageInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(messageInputField.getText());\n+                if (messageInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnect();\n+                }\n+                messageInputField.setText(\"\");\n+                time = new AtomicInteger(0);\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+    public void settingWindow() {\n+        setTitle(\"Client\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIDTH, HEIGHT);\n+        setLocationRelativeTo(null);\n+        JMenuBar mainMenu = new JMenuBar();\n+        JMenu mFile = new JMenu(\"File\");\n+        setLayout(new GridLayout(2, 1));\n+        JPanel[] jp = new JPanel[4];\n+        for (int i = 0; i < 2; i++) {\n+            jp[i] = new JPanel();\n+            add(jp[i]);\n+        }\n+\n+\n+        jp[0].setLayout(new BorderLayout());\n+        chatArea= new JTextArea();\n+        chatArea.setLineWrap(true);\n+\n+        JScrollPane jsp = new JScrollPane(chatArea);\n+        jp[0].add(jsp);\n+\n+        jp[1].setLayout(new BorderLayout());\n+        messageInputField = new JFormattedTextField();\n+        messageInputField.addActionListener(e -> sendMessage());\n+\n+\n+        JButton send = new JButton(\"Отправить сообщение\");\n+        send.addActionListener(e -> sendMessage());\n+        jp[1].add(messageInputField, BorderLayout.CENTER);\n+        jp[1].add(send, BorderLayout.EAST);\n+\n+\n+        JMenuItem miFileNew = new JMenuItem(\"New\");\n+        JMenuItem miFileExit = new JMenuItem(\"Exit\");\n+        mainMenu.add(mFile);\n+        setJMenuBar(mainMenu);\n+\n+\n+        mFile.add(miFileNew);\n+        mFile.addSeparator();\n+        mFile.add(miFileExit);\n+\n+        miFileExit.addActionListener(e -> System.exit(0));\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/end\");\n+                    closeConnect();\n+                } catch (IOException ignored) {}\n+                System.out.println(\"BYE\");\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(EchoClient::new);\n+    }\n+\n+}"
  },
  {
    "sha": "5ec2d6653a3e7f3e19e943ee8373a4dd388d1ad1",
    "filename": "src/level3/lesson3/client/two/EchoClient.java",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/client/two/EchoClient.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/client/two/EchoClient.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/client/two/EchoClient.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,232 @@\n+package level3.lesson3.client.two;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.*;\n+import java.net.Socket;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.Font.ITALIC;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private final int SERVER_PORT = 8190;\n+    private final int WIDTH = 600;\n+    private final int HEIGHT = 400;\n+    private final int TIME_FOR_CLOSE_CONNECTION = 400;\n+\n+\n+\n+    private JTextField messageInputField;\n+    private  JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private String login;\n+\n+    boolean isAuthorized = false;\n+\n+    private AtomicInteger time = new AtomicInteger(0);\n+\n+\n+    public EchoClient() {\n+\n+        try {\n+            openConnection();\n+        } catch (IOException ignored) {}\n+        settingWindow();\n+    }\n+\n+    private void openConnection() throws IOException{\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        String [] arr = messageFromServer.split(\" \");\n+                        login = arr[1];\n+                        File history = new File(\"C://history//history_\" + login +\".txt\");\n+                        if (history.exists()) {\n+                            try (BufferedReader reader = new BufferedReader(new FileReader(history))) {\n+                                String str;\n+                                Font fontForHistory = new Font(\"SansSerif\", ITALIC, 14);\n+                                int count = 0;\n+                                while ((str= reader.readLine()) != null && count <100) {\n+                                    chatArea.setFont(fontForHistory);\n+                                    chatArea.append(str);\n+                                    chatArea.append(\"\\n\");\n+                                    count++;\n+                                }\n+                                chatArea.append(\"____________________________________________\\n\");\n+                                chatArea.append(\"Конец истории\\n\");\n+                                chatArea.append(\"____________________________________________\\n\");\n+                            } catch (IOException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                if (isAuthorized) {\n+                    Thread timeToCloseConnection = new Thread(()->{\n+                        while (time.intValue() < TIME_FOR_CLOSE_CONNECTION && isAuthorized) {\n+                            try {\n+                                time.getAndIncrement();\n+                                //System.out.println(time);\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        isAuthorized = false;\n+                        closeConnect();\n+                    });\n+                    timeToCloseConnection.setDaemon(true);\n+                    timeToCloseConnection.start();\n+                }\n+\n+                while (isAuthorized) {\n+\n+                    String messageFromServer = dis.readUTF();\n+                    chatArea.append(ZonedDateTime.now().toLocalTime().getHour() +\" : \" + ZonedDateTime.now().toLocalTime().getMinute() + \" \" + messageFromServer + \"\\n\");\n+\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnect() {\n+        saveHistory();\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {}\n+        try {\n+            dos.close();\n+        }catch (IOException ignored) {}\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {}\n+    }\n+\n+    private void saveHistory() {\n+        File dir = new File(\"C://history//\");\n+        boolean createdDir = dir.mkdirs();\n+        if(createdDir) {\n+            //System.out.println(\"Директория создана\");\n+        }\n+        //else System.out.println(\"директория не создана\");\n+        File history = new File(\"C://history//history_\" + login +\".txt\");\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+        if (!history.exists()) {\n+            try\n+            {\n+                boolean created = history.createNewFile();\n+                if(created)\n+                    System.out.println(\"File has been created\");\n+            }\n+            catch(IOException ex){\n+                // System.out.println(\"не удалось\");\n+            }\n+        }\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(history))) {\n+            writer.write(chatArea.getText());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void sendMessage () {\n+\n+        if (!messageInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(messageInputField.getText());\n+                if (messageInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnect();\n+                }\n+                messageInputField.setText(\"\");\n+                time = new AtomicInteger(0);\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+    public void settingWindow() {\n+        setTitle(\"Client\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIDTH, HEIGHT);\n+        setLocationRelativeTo(null);\n+        JMenuBar mainMenu = new JMenuBar();\n+        JMenu mFile = new JMenu(\"File\");\n+        setLayout(new GridLayout(2, 1));\n+        JPanel[] jp = new JPanel[4];\n+        for (int i = 0; i < 2; i++) {\n+            jp[i] = new JPanel();\n+            add(jp[i]);\n+        }\n+\n+\n+        jp[0].setLayout(new BorderLayout());\n+        chatArea= new JTextArea();\n+        chatArea.setLineWrap(true);\n+\n+        JScrollPane jsp = new JScrollPane(chatArea);\n+        jp[0].add(jsp);\n+\n+        jp[1].setLayout(new BorderLayout());\n+        messageInputField = new JFormattedTextField();\n+        messageInputField.addActionListener(e -> sendMessage());\n+\n+\n+        JButton send = new JButton(\"Отправить сообщение\");\n+        send.addActionListener(e -> sendMessage());\n+        jp[1].add(messageInputField, BorderLayout.CENTER);\n+        jp[1].add(send, BorderLayout.EAST);\n+\n+\n+        JMenuItem miFileNew = new JMenuItem(\"New\");\n+        JMenuItem miFileExit = new JMenuItem(\"Exit\");\n+        mainMenu.add(mFile);\n+        setJMenuBar(mainMenu);\n+\n+\n+        mFile.add(miFileNew);\n+        mFile.addSeparator();\n+        mFile.add(miFileExit);\n+\n+        miFileExit.addActionListener(e -> System.exit(0));\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/end\");\n+                    closeConnect();\n+                } catch (IOException ignored) {}\n+                System.out.println(\"BYE\");\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(EchoClient::new);\n+    }\n+\n+}"
  },
  {
    "sha": "dd9eb39029bf2bacd49068f555372a1f6d1e01bc",
    "filename": "src/level3/lesson3/server/ServerApp.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/ServerApp.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/ServerApp.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/server/ServerApp.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,9 @@\n+package level3.lesson3.server;\n+\n+import level3.lesson3.server.service.MyServer;\n+\n+public class ServerApp {\n+    public static void main(String[] args) {\n+        new MyServer();\n+    }\n+}"
  },
  {
    "sha": "9537000e161dc78fa16c8994e989dfd2b0092f21",
    "filename": "src/level3/lesson3/server/interfaces/AuthService.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/interfaces/AuthService.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/interfaces/AuthService.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/server/interfaces/AuthService.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,9 @@\n+package level3.lesson3.server.interfaces;\n+\n+\n+public interface AuthService {\n+    void start();\n+    void stop();\n+    String getNickByLoginAndPassword(String login, String password);\n+}\n+"
  },
  {
    "sha": "b10581266643acccfc232687cba72ddc19a673ce",
    "filename": "src/level3/lesson3/server/service/BaseAuthService.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/BaseAuthService.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/BaseAuthService.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/server/service/BaseAuthService.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,68 @@\n+package level3.lesson3.server.service;\n+\n+import level3.lesson3.server.interfaces.AuthService;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+public class BaseAuthService implements AuthService {\n+\n+    //    private List<Entry> entries;\n+\n+    PreparedStatement preparedStatement = null;\n+\n+    public BaseAuthService() {\n+\n+//        entries = new ArrayList<>();\n+//        entries.add(new Entry(\"Viktor\", \"1\", \"Viktor\"));\n+//        entries.add(new Entry(\"David\", \"1\", \"David\"));\n+//        entries.add(new Entry(\"Lexa\", \"1\", \"Lexa\"));\n+    }\n+\n+    @Override\n+    public void start() {\n+        System.out.println(\"Сервис аунтефикации запущен\");\n+\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"Сервис аунтефикации остановлен\");\n+    }\n+\n+    @Override\n+    public String getNickByLoginAndPassword(String login, String password) {\n+        try {\n+            preparedStatement = Singleton.getConnection().prepareStatement(\"SELECT * FROM users WHERE login = ?\");\n+            preparedStatement.setString(1, login);\n+            ResultSet resultSet = preparedStatement.executeQuery();\n+            while (resultSet.next()) {\n+                String pass = resultSet.getString(3);\n+                String nick = resultSet.getString(4);\n+                if (pass.equals(password)) {\n+                    return nick;\n+                }\n+            }\n+\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+\n+//    private class Entry {\n+//        private String login;\n+//        private String pass;\n+//        private String nick;\n+//\n+//        public Entry(String login, String pass, String nick) {\n+//            this.login = login;\n+//            this.pass = pass;\n+//            this.nick = nick;\n+//        }\n+//    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3f951047b3c4df060a8d5f3fd6b28a3a0206b636",
    "filename": "src/level3/lesson3/server/service/ClientHandler.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/ClientHandler.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/server/service/ClientHandler.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,150 @@\n+package level3.lesson3.server.service;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+public class ClientHandler {\n+    private MyServer myServer;\n+    private Socket socket;\n+    private DataOutputStream dos;\n+    private DataInputStream dis;\n+\n+    private String name;\n+\n+    private boolean isAuthorized = false;\n+\n+    PreparedStatement preparedStatement = null;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public ClientHandler(MyServer myServer, Socket socket) {\n+        try {\n+            this.myServer = myServer;\n+            this.socket = socket;\n+            this.dis = new DataInputStream(socket.getInputStream());\n+            this.dos = new DataOutputStream(socket.getOutputStream());\n+            this.name = \"\";\n+            new Thread(() -> {\n+                try {\n+                    authentication();\n+                    readMessage();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    closeConnection();\n+                }\n+            }).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Проблемы пр и создании обработчика клиента\");\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        myServer.unsubscribe(this);\n+        if (!name.equals(\"\")) {\n+            myServer.broadcastMsg(name + \" вышел из чата\");\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            dos.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void readMessage() throws IOException {\n+        while (true) {\n+            String strFromClient = dis.readUTF();\n+            System.out.println(name + \" написал сообщение: \" + strFromClient);\n+            if (strFromClient.trim().startsWith(\"/\")) {\n+                if (strFromClient.trim().startsWith(\"/w\")) {\n+                    String[] arr = strFromClient.split(\" \", 3);\n+                    myServer.sendMessageToCertainClient(this, arr[1], name + \": \" + arr[2]);\n+                }\n+                if (strFromClient.trim().startsWith(\"/list\")) {\n+                    myServer.getOnlineList(this);\n+                }\n+                if (strFromClient.trim().startsWith(\"/changeNick\")) {\n+                    try {\n+                        preparedStatement = Singleton.getConnection().prepareStatement(\"UPDATE users SET nick = ? WHERE nick = ?\");\n+                        String[] arr = strFromClient.split(\" \");\n+                        preparedStatement.setString(1,arr[1]);\n+                        preparedStatement.setString(2, name);\n+                        preparedStatement.executeUpdate();\n+                        myServer.broadcastMsg(name + \" change nick to: \" + arr[1]);\n+                        name = arr[1];\n+\n+                    } catch (SQLException throwables) {\n+                        throwables.printStackTrace();\n+                    } catch (ClassNotFoundException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                if (strFromClient.trim().equals(\"/end\")) {\n+                    return;\n+                }\n+            } else {\n+                myServer.broadcastMsg(name + \": \" + strFromClient);\n+            }\n+\n+        }\n+    }\n+\n+    private void authentication() throws IOException {\n+        Thread timeForAuthorized = new Thread(()->{\n+            try {\n+                Thread.sleep(120000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if(!isAuthorized) {\n+                closeConnection();\n+            }\n+        });\n+\n+        timeForAuthorized.start();\n+        while (true) {\n+            String str = dis.readUTF();\n+            if (str.startsWith(\"/auth\")) {\n+                String[] parts = str.split(\" \");\n+                String nick = myServer.getAuthService().getNickByLoginAndPassword(parts[1], parts[2]);\n+                if (nick != null) {\n+                    if (!myServer.isNickBusy(nick)) {\n+                        isAuthorized = true;\n+                        sendMsg(\"/authok \" + parts[1]);\n+                        name = nick;\n+                        myServer.broadcastMsg(name + \" зашел в чат\");\n+                        myServer.subscribe(this);\n+                        return;\n+                    } else {\n+                        sendMsg(\"неверный логин и/или пароль\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void sendMsg(String msg) {\n+        try {\n+            dos.writeUTF(msg);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "df5cd05b1652a39fd083884820b07c641c9bec15",
    "filename": "src/level3/lesson3/server/service/MyServer.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/MyServer.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/MyServer.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/server/service/MyServer.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,83 @@\n+package level3.lesson3.server.service;\n+\n+import level3.lesson3.server.interfaces.AuthService;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyServer {\n+    private final int PORT = 8190;\n+\n+    private List<ClientHandler> clients;\n+    private AuthService authService;\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+\n+\n+    public MyServer () {\n+        try(ServerSocket server= new ServerSocket(PORT)) {\n+            authService = new BaseAuthService();\n+            authService.start();\n+            clients = new ArrayList<>();\n+            while (true) {\n+                System.out.println(\"Сервер ожидает подключения\");\n+                Socket socket = server.accept();\n+                System.out.println(\"Клиент подключен\");\n+                new ClientHandler(this, socket);\n+            }\n+        }catch (IOException e) {\n+            System.out.println(\"Ошибка в работе сервера\");\n+            e.printStackTrace();\n+        } finally {\n+            if (authService != null) {\n+                authService.stop();\n+            }\n+        }\n+    }\n+\n+    public synchronized boolean isNickBusy(String nick) {\n+        for (ClientHandler c : clients) {\n+            if(c.getName().equals(nick)) return true;\n+        }\n+        return false;\n+    }\n+\n+    public synchronized void broadcastMsg (String msg) {\n+        for (ClientHandler c : clients) c.sendMsg(msg);\n+    }\n+\n+\n+    public synchronized void sendMessageToCertainClient(ClientHandler clientHandler, String to, String msg) {\n+        for (ClientHandler client : clients) {\n+            if(client.getName().equals(to)) {\n+                client.sendMsg(msg);\n+                clientHandler.sendMsg(msg);\n+                return;\n+            }\n+        }\n+        clientHandler.sendMsg(\"Участника с ником: \" + to + \" нет онлайн\");\n+    }\n+\n+\n+    public synchronized void unsubscribe(ClientHandler c) {\n+        clients.remove(c);\n+    }\n+\n+    public synchronized void subscribe(ClientHandler c) {\n+        clients.add(c);\n+    }\n+\n+\n+    public void getOnlineList(ClientHandler clientHandler) {\n+        System.out.println(\"Сейчас онлайн, нижеследующие пользователи:\");\n+        for (ClientHandler client : clients) {\n+            clientHandler.sendMsg(client.getName());\n+        }\n+        System.out.println(\"_________________________________\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4fd2dd863444249085eb2a2b06ff612434124092",
    "filename": "src/level3/lesson3/server/service/Singleton.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/Singleton.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson3/server/service/Singleton.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson3/server/service/Singleton.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,32 @@\n+package level3.lesson3.server.service;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+\n+public class Singleton {\n+\n+    static final String DRIVER = \"com.mysql.cj.jdbc.Driver\";\n+    static final String DB = \"jdbc:mysql://localhost/lesson2?useUnicode=true&serverTimezone=UTC&useSSL=false\";\n+    static final String USER = \"root\";\n+\n+    static final String PASSWORD = \"*********\";\n+\n+    public static Connection connection;\n+\n+    private Singleton () {\n+\n+    }\n+\n+    public static Connection getConnection() throws SQLException, ClassNotFoundException {\n+        if (connection == null) {\n+            connection = initConnection();\n+        }\n+        return  connection;\n+    }\n+\n+    private static Connection initConnection () throws ClassNotFoundException, SQLException {\n+        Class.forName(DRIVER);\n+        return DriverManager.getConnection(DB, USER, PASSWORD);\n+    }\n+}"
  },
  {
    "sha": "dc24f909aaf59b4ab5dcdd56c0769e4f64d1fdc8",
    "filename": "src/level3/lesson4/Main.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/Main.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/Main.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/Main.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,66 @@\n+package level3.lesson4;\n+\n+public class Main {\n+    private final Object obj  = new Object();\n+    private volatile char currentLetter = 'A';\n+\n+    public static void main(String[] args) {\n+\n+        Main m = new Main();\n+        new Thread(()-> m.writeA()).start();\n+        new Thread(()-> m.writeB()).start();\n+        new Thread(()-> m.writeC()).start();\n+\n+    }\n+\n+    private void writeA() {\n+        synchronized (obj) {\n+            for (int i = 0; i < 5; i++) {\n+                while (currentLetter != 'A'){\n+                    try {\n+                        obj.wait();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                System.out.print(\"A\");\n+                currentLetter = 'B';\n+                obj.notifyAll();\n+            }\n+        }\n+    }\n+    private void writeB() {\n+        synchronized (obj) {\n+            for (int i = 0; i < 5; i++) {\n+                while (currentLetter != 'B'){\n+                    try {\n+                        obj.wait();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                System.out.print(\"B\");\n+                currentLetter = 'C';\n+                obj.notifyAll();\n+            }\n+        }\n+    }\n+    private void writeC() {\n+        synchronized (obj) {\n+            for (int i = 0; i < 5; i++) {\n+                while (currentLetter != 'C'){\n+                    try {\n+                        obj.wait();\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                System.out.print(\"C\\t\");\n+                currentLetter = 'A';\n+                obj.notifyAll();\n+            }\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "3aa1512facf4ed1c605c82c9bdba4f3e6dda9330",
    "filename": "src/level3/lesson4/client/one/EchoClient.java",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/client/one/EchoClient.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/client/one/EchoClient.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/client/one/EchoClient.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,232 @@\n+package level3.lesson4.client.one;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.*;\n+import java.net.Socket;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.Font.ITALIC;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private final int SERVER_PORT = 8190;\n+    private final int WIDTH = 600;\n+    private final int HEIGHT = 400;\n+    private final int TIME_FOR_CLOSE_CONNECTION = 400;\n+\n+\n+\n+    private JTextField messageInputField;\n+    private  JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private String login;\n+\n+    boolean isAuthorized = false;\n+\n+    private AtomicInteger time = new AtomicInteger(0);\n+\n+\n+    public EchoClient() {\n+\n+        try {\n+            openConnection();\n+        } catch (IOException ignored) {}\n+        settingWindow();\n+    }\n+\n+    private void openConnection() throws IOException{\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        String [] arr = messageFromServer.split(\" \");\n+                        login = arr[1];\n+                        File history = new File(\"C://history//history_\" + login +\".txt\");\n+                        if (history.exists()) {\n+                            try (BufferedReader reader = new BufferedReader(new FileReader(history))) {\n+                                String str;\n+                                Font fontForHistory = new Font(\"SansSerif\", ITALIC, 14);\n+                                int count = 0;\n+                                while ((str= reader.readLine()) != null && count <100) {\n+                                    chatArea.setFont(fontForHistory);\n+                                    chatArea.append(str);\n+                                    chatArea.append(\"\\n\");\n+                                    count++;\n+                                }\n+                                chatArea.append(\"____________________________________________\\n\");\n+                                chatArea.append(\"Конец истории\\n\");\n+                                chatArea.append(\"____________________________________________\\n\");\n+                            } catch (IOException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                if (isAuthorized) {\n+                    Thread timeToCloseConnection = new Thread(()->{\n+                        while (time.intValue() < TIME_FOR_CLOSE_CONNECTION && isAuthorized) {\n+                            try {\n+                                time.getAndIncrement();\n+                                //System.out.println(time);\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        isAuthorized = false;\n+                        closeConnect();\n+                    });\n+                    timeToCloseConnection.setDaemon(true);\n+                    timeToCloseConnection.start();\n+                }\n+\n+                while (isAuthorized) {\n+\n+                    String messageFromServer = dis.readUTF();\n+                    chatArea.append(ZonedDateTime.now().toLocalTime().getHour() +\" : \" + ZonedDateTime.now().toLocalTime().getMinute() + \" \" + messageFromServer + \"\\n\");\n+\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnect() {\n+        saveHistory();\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {}\n+        try {\n+            dos.close();\n+        }catch (IOException ignored) {}\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {}\n+    }\n+\n+    private void saveHistory() {\n+        File dir = new File(\"C://history//\");\n+        boolean createdDir = dir.mkdirs();\n+        if(createdDir) {\n+            //System.out.println(\"Директория создана\");\n+        }\n+        //else System.out.println(\"директория не создана\");\n+        File history = new File(\"C://history//history_\" + login +\".txt\");\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+        if (!history.exists()) {\n+            try\n+            {\n+                boolean created = history.createNewFile();\n+                if(created)\n+                    System.out.println(\"File has been created\");\n+            }\n+            catch(IOException ex){\n+                // System.out.println(\"не удалось\");\n+            }\n+        }\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(history))) {\n+            writer.write(chatArea.getText());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void sendMessage () {\n+\n+        if (!messageInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(messageInputField.getText());\n+                if (messageInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnect();\n+                }\n+                messageInputField.setText(\"\");\n+                time = new AtomicInteger(0);\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+    public void settingWindow() {\n+        setTitle(\"Client\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIDTH, HEIGHT);\n+        setLocationRelativeTo(null);\n+        JMenuBar mainMenu = new JMenuBar();\n+        JMenu mFile = new JMenu(\"File\");\n+        setLayout(new GridLayout(2, 1));\n+        JPanel[] jp = new JPanel[4];\n+        for (int i = 0; i < 2; i++) {\n+            jp[i] = new JPanel();\n+            add(jp[i]);\n+        }\n+\n+\n+        jp[0].setLayout(new BorderLayout());\n+        chatArea= new JTextArea();\n+        chatArea.setLineWrap(true);\n+\n+        JScrollPane jsp = new JScrollPane(chatArea);\n+        jp[0].add(jsp);\n+\n+        jp[1].setLayout(new BorderLayout());\n+        messageInputField = new JFormattedTextField();\n+        messageInputField.addActionListener(e -> sendMessage());\n+\n+\n+        JButton send = new JButton(\"Отправить сообщение\");\n+        send.addActionListener(e -> sendMessage());\n+        jp[1].add(messageInputField, BorderLayout.CENTER);\n+        jp[1].add(send, BorderLayout.EAST);\n+\n+\n+        JMenuItem miFileNew = new JMenuItem(\"New\");\n+        JMenuItem miFileExit = new JMenuItem(\"Exit\");\n+        mainMenu.add(mFile);\n+        setJMenuBar(mainMenu);\n+\n+\n+        mFile.add(miFileNew);\n+        mFile.addSeparator();\n+        mFile.add(miFileExit);\n+\n+        miFileExit.addActionListener(e -> System.exit(0));\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/end\");\n+                    closeConnect();\n+                } catch (IOException ignored) {}\n+                System.out.println(\"BYE\");\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(EchoClient::new);\n+    }\n+\n+}"
  },
  {
    "sha": "16c6036f69d3da8788b33265667ec24fbd4c4b4f",
    "filename": "src/level3/lesson4/client/three/EchoClient.java",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/client/three/EchoClient.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/client/three/EchoClient.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/client/three/EchoClient.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,232 @@\n+package level3.lesson4.client.three;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.*;\n+import java.net.Socket;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.Font.ITALIC;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private final int SERVER_PORT = 8190;\n+    private final int WIDTH = 600;\n+    private final int HEIGHT = 400;\n+    private final int TIME_FOR_CLOSE_CONNECTION = 400;\n+\n+\n+\n+    private JTextField messageInputField;\n+    private  JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private String login;\n+\n+    boolean isAuthorized = false;\n+\n+    private AtomicInteger time = new AtomicInteger(0);\n+\n+\n+    public EchoClient() {\n+\n+        try {\n+            openConnection();\n+        } catch (IOException ignored) {}\n+        settingWindow();\n+    }\n+\n+    private void openConnection() throws IOException{\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        String [] arr = messageFromServer.split(\" \");\n+                        login = arr[1];\n+                        File history = new File(\"C://history//history_\" + login +\".txt\");\n+                        if (history.exists()) {\n+                            try (BufferedReader reader = new BufferedReader(new FileReader(history))) {\n+                                String str;\n+                                Font fontForHistory = new Font(\"SansSerif\", ITALIC, 14);\n+                                int count = 0;\n+                                while ((str= reader.readLine()) != null && count <100) {\n+                                    chatArea.setFont(fontForHistory);\n+                                    chatArea.append(str);\n+                                    chatArea.append(\"\\n\");\n+                                    count++;\n+                                }\n+                                chatArea.append(\"____________________________________________\\n\");\n+                                chatArea.append(\"Конец истории\\n\");\n+                                chatArea.append(\"____________________________________________\\n\");\n+                            } catch (IOException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                if (isAuthorized) {\n+                    Thread timeToCloseConnection = new Thread(()->{\n+                        while (time.intValue() < TIME_FOR_CLOSE_CONNECTION && isAuthorized) {\n+                            try {\n+                                time.getAndIncrement();\n+                                //System.out.println(time);\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        isAuthorized = false;\n+                        closeConnect();\n+                    });\n+                    timeToCloseConnection.setDaemon(true);\n+                    timeToCloseConnection.start();\n+                }\n+\n+                while (isAuthorized) {\n+\n+                    String messageFromServer = dis.readUTF();\n+                    chatArea.append(ZonedDateTime.now().toLocalTime().getHour() +\" : \" + ZonedDateTime.now().toLocalTime().getMinute() + \" \" + messageFromServer + \"\\n\");\n+\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnect() {\n+        saveHistory();\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {}\n+        try {\n+            dos.close();\n+        }catch (IOException ignored) {}\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {}\n+    }\n+\n+    private void saveHistory() {\n+        File dir = new File(\"C://history//\");\n+        boolean createdDir = dir.mkdirs();\n+        if(createdDir) {\n+            //System.out.println(\"Директория создана\");\n+        }\n+        //else System.out.println(\"директория не создана\");\n+        File history = new File(\"C://history//history_\" + login +\".txt\");\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+        if (!history.exists()) {\n+            try\n+            {\n+                boolean created = history.createNewFile();\n+                if(created)\n+                    System.out.println(\"File has been created\");\n+            }\n+            catch(IOException ex){\n+                // System.out.println(\"не удалось\");\n+            }\n+        }\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(history))) {\n+            writer.write(chatArea.getText());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void sendMessage () {\n+\n+        if (!messageInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(messageInputField.getText());\n+                if (messageInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnect();\n+                }\n+                messageInputField.setText(\"\");\n+                time = new AtomicInteger(0);\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+    public void settingWindow() {\n+        setTitle(\"Client\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIDTH, HEIGHT);\n+        setLocationRelativeTo(null);\n+        JMenuBar mainMenu = new JMenuBar();\n+        JMenu mFile = new JMenu(\"File\");\n+        setLayout(new GridLayout(2, 1));\n+        JPanel[] jp = new JPanel[4];\n+        for (int i = 0; i < 2; i++) {\n+            jp[i] = new JPanel();\n+            add(jp[i]);\n+        }\n+\n+\n+        jp[0].setLayout(new BorderLayout());\n+        chatArea= new JTextArea();\n+        chatArea.setLineWrap(true);\n+\n+        JScrollPane jsp = new JScrollPane(chatArea);\n+        jp[0].add(jsp);\n+\n+        jp[1].setLayout(new BorderLayout());\n+        messageInputField = new JFormattedTextField();\n+        messageInputField.addActionListener(e -> sendMessage());\n+\n+\n+        JButton send = new JButton(\"Отправить сообщение\");\n+        send.addActionListener(e -> sendMessage());\n+        jp[1].add(messageInputField, BorderLayout.CENTER);\n+        jp[1].add(send, BorderLayout.EAST);\n+\n+\n+        JMenuItem miFileNew = new JMenuItem(\"New\");\n+        JMenuItem miFileExit = new JMenuItem(\"Exit\");\n+        mainMenu.add(mFile);\n+        setJMenuBar(mainMenu);\n+\n+\n+        mFile.add(miFileNew);\n+        mFile.addSeparator();\n+        mFile.add(miFileExit);\n+\n+        miFileExit.addActionListener(e -> System.exit(0));\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/end\");\n+                    closeConnect();\n+                } catch (IOException ignored) {}\n+                System.out.println(\"BYE\");\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(EchoClient::new);\n+    }\n+\n+}"
  },
  {
    "sha": "05417476bc16e3b640fccb9a41ac471939bb033a",
    "filename": "src/level3/lesson4/client/two/EchoClient.java",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/client/two/EchoClient.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/client/two/EchoClient.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/client/two/EchoClient.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,232 @@\n+package level3.lesson4.client.two;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.*;\n+import java.net.Socket;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.awt.Font.ITALIC;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private final int SERVER_PORT = 8190;\n+    private final int WIDTH = 600;\n+    private final int HEIGHT = 400;\n+    private final int TIME_FOR_CLOSE_CONNECTION = 400;\n+\n+\n+\n+    private JTextField messageInputField;\n+    private  JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private String login;\n+\n+    boolean isAuthorized = false;\n+\n+    private AtomicInteger time = new AtomicInteger(0);\n+\n+\n+    public EchoClient() {\n+\n+        try {\n+            openConnection();\n+        } catch (IOException ignored) {}\n+        settingWindow();\n+    }\n+\n+    private void openConnection() throws IOException{\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        String [] arr = messageFromServer.split(\" \");\n+                        login = arr[1];\n+                        File history = new File(\"C://history//history_\" + login +\".txt\");\n+                        if (history.exists()) {\n+                            try (BufferedReader reader = new BufferedReader(new FileReader(history))) {\n+                                String str;\n+                                Font fontForHistory = new Font(\"SansSerif\", ITALIC, 14);\n+                                int count = 0;\n+                                while ((str= reader.readLine()) != null && count <100) {\n+                                    chatArea.setFont(fontForHistory);\n+                                    chatArea.append(str);\n+                                    chatArea.append(\"\\n\");\n+                                    count++;\n+                                }\n+                                chatArea.append(\"____________________________________________\\n\");\n+                                chatArea.append(\"Конец истории\\n\");\n+                                chatArea.append(\"____________________________________________\\n\");\n+                            } catch (IOException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                if (isAuthorized) {\n+                    Thread timeToCloseConnection = new Thread(()->{\n+                        while (time.intValue() < TIME_FOR_CLOSE_CONNECTION && isAuthorized) {\n+                            try {\n+                                time.getAndIncrement();\n+                                //System.out.println(time);\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                        isAuthorized = false;\n+                        closeConnect();\n+                    });\n+                    timeToCloseConnection.setDaemon(true);\n+                    timeToCloseConnection.start();\n+                }\n+\n+                while (isAuthorized) {\n+\n+                    String messageFromServer = dis.readUTF();\n+                    chatArea.append(ZonedDateTime.now().toLocalTime().getHour() +\" : \" + ZonedDateTime.now().toLocalTime().getMinute() + \" \" + messageFromServer + \"\\n\");\n+\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnect() {\n+        saveHistory();\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {}\n+        try {\n+            dos.close();\n+        }catch (IOException ignored) {}\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {}\n+    }\n+\n+    private void saveHistory() {\n+        File dir = new File(\"C://history//\");\n+        boolean createdDir = dir.mkdirs();\n+        if(createdDir) {\n+            //System.out.println(\"Директория создана\");\n+        }\n+        //else System.out.println(\"директория не создана\");\n+        File history = new File(\"C://history//history_\" + login +\".txt\");\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+        if (!history.exists()) {\n+            try\n+            {\n+                boolean created = history.createNewFile();\n+                if(created)\n+                    System.out.println(\"File has been created\");\n+            }\n+            catch(IOException ex){\n+                // System.out.println(\"не удалось\");\n+            }\n+        }\n+        //System.out.println(history.exists() + \" проверка существует ли файл\");\n+\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(history))) {\n+            writer.write(chatArea.getText());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void sendMessage () {\n+\n+        if (!messageInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(messageInputField.getText());\n+                if (messageInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnect();\n+                }\n+                messageInputField.setText(\"\");\n+                time = new AtomicInteger(0);\n+            } catch (IOException ignored) {}\n+        }\n+    }\n+\n+    public void settingWindow() {\n+        setTitle(\"Client\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIDTH, HEIGHT);\n+        setLocationRelativeTo(null);\n+        JMenuBar mainMenu = new JMenuBar();\n+        JMenu mFile = new JMenu(\"File\");\n+        setLayout(new GridLayout(2, 1));\n+        JPanel[] jp = new JPanel[4];\n+        for (int i = 0; i < 2; i++) {\n+            jp[i] = new JPanel();\n+            add(jp[i]);\n+        }\n+\n+\n+        jp[0].setLayout(new BorderLayout());\n+        chatArea= new JTextArea();\n+        chatArea.setLineWrap(true);\n+\n+        JScrollPane jsp = new JScrollPane(chatArea);\n+        jp[0].add(jsp);\n+\n+        jp[1].setLayout(new BorderLayout());\n+        messageInputField = new JFormattedTextField();\n+        messageInputField.addActionListener(e -> sendMessage());\n+\n+\n+        JButton send = new JButton(\"Отправить сообщение\");\n+        send.addActionListener(e -> sendMessage());\n+        jp[1].add(messageInputField, BorderLayout.CENTER);\n+        jp[1].add(send, BorderLayout.EAST);\n+\n+\n+        JMenuItem miFileNew = new JMenuItem(\"New\");\n+        JMenuItem miFileExit = new JMenuItem(\"Exit\");\n+        mainMenu.add(mFile);\n+        setJMenuBar(mainMenu);\n+\n+\n+        mFile.add(miFileNew);\n+        mFile.addSeparator();\n+        mFile.add(miFileExit);\n+\n+        miFileExit.addActionListener(e -> System.exit(0));\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/end\");\n+                    closeConnect();\n+                } catch (IOException ignored) {}\n+                System.out.println(\"BYE\");\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(EchoClient::new);\n+    }\n+\n+}"
  },
  {
    "sha": "d6772d8a3acd253f59edc1b4ebd00f1661f56853",
    "filename": "src/level3/lesson4/server/ServerApp.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/ServerApp.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/ServerApp.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/server/ServerApp.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,9 @@\n+package level3.lesson4.server;\n+\n+import level3.lesson4.server.service.MyServer;\n+\n+public class ServerApp {\n+    public static void main(String[] args) {\n+        new MyServer();\n+    }\n+}"
  },
  {
    "sha": "da7d21bee697edc0efaa7b2e7a17d608e18a94e2",
    "filename": "src/level3/lesson4/server/interfaces/AuthService.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/interfaces/AuthService.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/interfaces/AuthService.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/server/interfaces/AuthService.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,9 @@\n+package level3.lesson4.server.interfaces;\n+\n+\n+public interface AuthService {\n+    void start();\n+    void stop();\n+    String getNickByLoginAndPassword(String login, String password);\n+}\n+"
  },
  {
    "sha": "8010b7c8dcc8e4c82fbd78c7a105a558b35b1842",
    "filename": "src/level3/lesson4/server/service/BaseAuthService.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/BaseAuthService.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/BaseAuthService.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/server/service/BaseAuthService.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,50 @@\n+package level3.lesson4.server.service;\n+\n+import level3.lesson4.server.interfaces.AuthService;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+public class BaseAuthService implements AuthService {\n+\n+\n+    PreparedStatement preparedStatement = null;\n+\n+    public BaseAuthService() {\n+    }\n+\n+    @Override\n+    public void start() {\n+        System.out.println(\"Сервис аунтефикации запущен\");\n+\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"Сервис аунтефикации остановлен\");\n+    }\n+\n+    @Override\n+    public String getNickByLoginAndPassword(String login, String password) {\n+        try {\n+            preparedStatement = Singleton.getConnection().prepareStatement(\"SELECT * FROM users WHERE login = ?\");\n+            preparedStatement.setString(1, login);\n+            ResultSet resultSet = preparedStatement.executeQuery();\n+            while (resultSet.next()) {\n+                String pass = resultSet.getString(3);\n+                String nick = resultSet.getString(4);\n+                if (pass.equals(password)) {\n+                    return nick;\n+                }\n+            }\n+\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8457cd65488fee3974bcc5c74c1b563d1932ed6d",
    "filename": "src/level3/lesson4/server/service/ClientHandler.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/ClientHandler.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/server/service/ClientHandler.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,154 @@\n+package level3.lesson4.server.service;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class ClientHandler {\n+    private MyServer myServer;\n+    private Socket socket;\n+    private DataOutputStream dos;\n+    private DataInputStream dis;\n+\n+    private String name;\n+\n+    private boolean isAuthorized = false;\n+\n+    PreparedStatement preparedStatement = null;\n+    ExecutorService executorService = Executors.newFixedThreadPool(2);\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public ClientHandler(MyServer myServer, Socket socket) {\n+        try {\n+            this.myServer = myServer;\n+            this.socket = socket;\n+            this.dis = new DataInputStream(socket.getInputStream());\n+            this.dos = new DataOutputStream(socket.getOutputStream());\n+            this.name = \"\";\n+            executorService.execute(new Thread(() -> {\n+                try {\n+                    authentication();\n+                    readMessage();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    closeConnection();\n+                }\n+            }));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Проблемы пр и создании обработчика клиента\");\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        myServer.unsubscribe(this);\n+        if (!name.equals(\"\")) {\n+            myServer.broadcastMsg(name + \" вышел из чата\");\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            dos.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void readMessage() throws IOException {\n+        while (true) {\n+            String strFromClient = dis.readUTF();\n+            System.out.println(name + \" написал сообщение: \" + strFromClient);\n+            if (strFromClient.trim().startsWith(\"/\")) {\n+                if (strFromClient.trim().startsWith(\"/w\")) {\n+                    String[] arr = strFromClient.split(\" \", 3);\n+                    myServer.sendMessageToCertainClient(this, arr[1], name + \": \" + arr[2]);\n+                }\n+                if (strFromClient.trim().startsWith(\"/list\")) {\n+                    myServer.getOnlineList(this);\n+                }\n+                if (strFromClient.trim().startsWith(\"/changeNick\")) {\n+                    try {\n+                        preparedStatement = Singleton.getConnection().prepareStatement(\"UPDATE users SET nick = ? WHERE nick = ?\");\n+                        String[] arr = strFromClient.split(\" \");\n+                        preparedStatement.setString(1,arr[1]);\n+                        preparedStatement.setString(2, name);\n+                        preparedStatement.executeUpdate();\n+                        myServer.broadcastMsg(name + \" change nick to: \" + arr[1]);\n+                        name = arr[1];\n+\n+                    } catch (SQLException throwables) {\n+                        throwables.printStackTrace();\n+                    } catch (ClassNotFoundException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                if (strFromClient.trim().equals(\"/end\")) {\n+                    return;\n+                }\n+            } else {\n+                myServer.broadcastMsg(name + \": \" + strFromClient);\n+            }\n+\n+        }\n+    }\n+\n+    private void authentication() throws IOException {\n+        Thread timeForAuthorized = new Thread(()->{\n+            try {\n+                Thread.sleep(120000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if(!isAuthorized) {\n+                closeConnection();\n+            }\n+        });\n+        executorService.execute(timeForAuthorized);\n+\n+        while (true) {\n+            String str = dis.readUTF();\n+            if (str.startsWith(\"/auth\")) {\n+                String[] parts = str.split(\" \");\n+                String nick = myServer.getAuthService().getNickByLoginAndPassword(parts[1], parts[2]);\n+                if (nick != null) {\n+                    if (!myServer.isNickBusy(nick)) {\n+                        isAuthorized = true;\n+                        sendMsg(\"/authok \" + parts[1]);\n+                        name = nick;\n+                        myServer.broadcastMsg(name + \" зашел в чат\");\n+                        myServer.subscribe(this);\n+                        return;\n+                    } else {\n+                        sendMsg(\"неверный логин и/или пароль\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void sendMsg(String msg) {\n+        try {\n+            dos.writeUTF(msg);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4a0959474596194ad8d86fa1436168df100f7230",
    "filename": "src/level3/lesson4/server/service/MyServer.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/MyServer.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/MyServer.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/server/service/MyServer.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,83 @@\n+package level3.lesson4.server.service;\n+\n+import level3.lesson4.server.interfaces.AuthService;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyServer {\n+    private final int PORT = 8190;\n+\n+    private List<ClientHandler> clients;\n+    private AuthService authService;\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+\n+\n+    public MyServer () {\n+        try(ServerSocket server= new ServerSocket(PORT)) {\n+            authService = new BaseAuthService();\n+            authService.start();\n+            clients = new ArrayList<>();\n+            while (true) {\n+                System.out.println(\"Сервер ожидает подключения\");\n+                Socket socket = server.accept();\n+                System.out.println(\"Клиент подключен\");\n+                new ClientHandler(this, socket);\n+            }\n+        }catch (IOException e) {\n+            System.out.println(\"Ошибка в работе сервера\");\n+            e.printStackTrace();\n+        } finally {\n+            if (authService != null) {\n+                authService.stop();\n+            }\n+        }\n+    }\n+\n+    public synchronized boolean isNickBusy(String nick) {\n+        for (ClientHandler c : clients) {\n+            if(c.getName().equals(nick)) return true;\n+        }\n+        return false;\n+    }\n+\n+    public synchronized void broadcastMsg (String msg) {\n+        for (ClientHandler c : clients) c.sendMsg(msg);\n+    }\n+\n+\n+    public synchronized void sendMessageToCertainClient(ClientHandler clientHandler, String to, String msg) {\n+        for (ClientHandler client : clients) {\n+            if(client.getName().equals(to)) {\n+                client.sendMsg(msg);\n+                clientHandler.sendMsg(msg);\n+                return;\n+            }\n+        }\n+        clientHandler.sendMsg(\"Участника с ником: \" + to + \" нет онлайн\");\n+    }\n+\n+\n+    public synchronized void unsubscribe(ClientHandler c) {\n+        clients.remove(c);\n+    }\n+\n+    public synchronized void subscribe(ClientHandler c) {\n+        clients.add(c);\n+    }\n+\n+\n+    public void getOnlineList(ClientHandler clientHandler) {\n+        System.out.println(\"Сейчас онлайн, нижеследующие пользователи:\");\n+        for (ClientHandler client : clients) {\n+            clientHandler.sendMsg(client.getName());\n+        }\n+        System.out.println(\"_________________________________\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "04489b59a7d483c8550b42f8628d362f74eab275",
    "filename": "src/level3/lesson4/server/service/Singleton.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/I3uKToP/GB_Level/blob/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/Singleton.java",
    "raw_url": "https://github.com/I3uKToP/GB_Level/raw/aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b/src/level3/lesson4/server/service/Singleton.java",
    "contents_url": "https://api.github.com/repos/I3uKToP/GB_Level/contents/src/level3/lesson4/server/service/Singleton.java?ref=aa9273f5552659f2fbbb24fc72cf0dbecf0f4e1b",
    "patch": "@@ -0,0 +1,32 @@\n+package level3.lesson4.server.service;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+\n+public class Singleton {\n+\n+    static final String DRIVER = \"com.mysql.cj.jdbc.Driver\";\n+    static final String DB = \"jdbc:mysql://localhost/lesson2?useUnicode=true&serverTimezone=UTC&useSSL=false\";\n+    static final String USER = \"root\";\n+\n+    static final String PASSWORD = \"*********\";\n+\n+    public static Connection connection;\n+\n+    private Singleton () {\n+\n+    }\n+\n+    public static Connection getConnection() throws SQLException, ClassNotFoundException {\n+        if (connection == null) {\n+            connection = initConnection();\n+        }\n+        return  connection;\n+    }\n+\n+    private static Connection initConnection () throws ClassNotFoundException, SQLException {\n+        Class.forName(DRIVER);\n+        return DriverManager.getConnection(DB, USER, PASSWORD);\n+    }\n+}"
  }
]
