[
  {
    "sha": "9cf0a1143e317cc283addaf22093b7b94226b318",
    "filename": "src/main/java/level_1Lesson_8/MainClass.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8/MainClass.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8/MainClass.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8/MainClass.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -4,18 +4,19 @@\n import java.util.Scanner;\n \n public class MainClass {\n-    private static char [][] map;\n+    public static char [][] map;\n     private static final int SIZE = 3;\n-    private static final char EMPTY_DOT = '•';\n-    private static final char X_DOT = 'X';\n-    private static final char O_DOT = 'O';\n+    public static final char EMPTY_DOT = '•';\n+    public static final char X_DOT = 'X';\n+    public static final char O_DOT = 'O';\n     private static int COUNT_CHIP;\n \n \n     public static void main(String[] args) {\n //        String[][] item = {{\"\", \"X\", \"O\", \"O\"}, {\"X\", \"\", \"O\", \"O\"}, {\"O\", \"X\", \"\", \"O\"}, {\"O\", \"X\", \"\", \"O\"}};\n         initMap(SIZE);\n         MyWindow myWindow = new MyWindow(map);\n+//        MyWindow_2 myWindow_2 = new MyWindow_2(map);\n \n \n "
  },
  {
    "sha": "a9a94362c77ec45759c62afc8bcc861c3689593b",
    "filename": "src/main/java/level_1Lesson_8/MyWindow.java",
    "status": "modified",
    "additions": 62,
    "deletions": 15,
    "changes": 77,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8/MyWindow.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8/MyWindow.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8/MyWindow.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -8,26 +8,73 @@\n \n \n public class MyWindow extends JFrame {\n+    private static final char EMPTY_DOT = '•';\n+    private static final char X_DOT = 'X';\n+    private static final char O_DOT = 'O';\n+\n     public MyWindow(char[][] item) {\n         setTitle(\"Test Window\");\n         setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n         setBounds(300, 300, 400, 400);\n-        JButton[] buttons = new JButton[16];\n-        setLayout(new GridLayout(4, 4));\n-        for (int i = 0; i < item.length; i++) {\n-            int k = 0;\n-            for (int j = 0; j < item.length; j++, k++) {\n-                buttons[k] = new JButton(String.valueOf(item[i][j]));\n-                add(buttons[k]);\n-                buttons[k].addActionListener(new ActionListener() {\n-                    @Override\n-                    public void actionPerformed(ActionEvent e) {\n-                        System.out.println(\"OK\");\n-                    }\n-                });\n-                buttons[k].setActionCommand(String.valueOf(\"buttons[\" + k + \"]\"));\n+        setLayout(new GridLayout(3, 3));\n+        JButton butt_1 = new JButton(String.valueOf(item[0][0]));\n+        add(butt_1);\n+        butt_1.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (MainClass.map[0][0] == EMPTY_DOT) {\n+                    MainClass.map[0][0] = X_DOT;\n+                    butt_1.setLabel(String.valueOf(X_DOT));\n+                    System.out.println(MainClass.map[0][0]);\n+                    butt_1.enable(false);\n+                }\n             }\n-        }\n+        });\n+\n+\n+        JButton butt_2 = new JButton(String.valueOf(item[1][0]));\n+        add(butt_2);\n+        JButton butt_3 = new JButton(String.valueOf(item[2][0]));\n+        add(butt_3);\n+        JButton butt_4 = new JButton(String.valueOf(item[0][1]));\n+        add(butt_4);\n+        JButton butt_5 = new JButton(String.valueOf(item[1][1]));\n+        add(butt_5);\n+        JButton butt_6 = new JButton(String.valueOf(item[2][1]));\n+        add(butt_6);\n+        JButton butt_7 = new JButton(String.valueOf(item[0][2]));\n+        add(butt_7);\n+        JButton butt_8 = new JButton(String.valueOf(item[1][2]));\n+        add(butt_8);\n+        JButton butt_9 = new JButton(String.valueOf(item[2][2]));\n+        add(butt_9);\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+//        for (int i = 0; i < item.length; i++) {\n+//            int k = 0;\n+//            for (int j = 0; j < item.length; j++, k++) {\n+//                buttons[k] = new JButton(String.valueOf(item[i][j]));\n+//                add(buttons[k]);\n+//                buttons[k].addActionListener(new ActionListener() {\n+//                    @Override\n+//                    public void actionPerformed(ActionEvent e) {\n+//                        System.out.println(\"OK\");\n+//                    }\n+//                });\n+//                buttons[k].setActionCommand(String.valueOf(\"buttons[\" + k + \"]\"));\n+//            }\n+//        }\n \n \n         setVisible(true);"
  },
  {
    "sha": "3ef49db1f040b31c655bbc46c65cee8e716deed9",
    "filename": "src/main/java/level_1Lesson_8/MyWindow_2.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8/MyWindow_2.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8/MyWindow_2.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8/MyWindow_2.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,39 @@\n+package level_1Lesson_8;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class MyWindow_2 extends JFrame {\n+    public MyWindow_2(char[][] item) {\n+\n+        setTitle(\"TicTakToe\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setBounds(1300, 300, 400, 400);\n+        JButton[] buttons = new JButton[9];\n+        setLayout(new GridLayout(3, 3));\n+        for (int i = 0; i < item.length; i++) {\n+            int k = 0;\n+            for (int j = 0; j < item.length; j++, k++) {\n+                buttons[k] = new JButton(String.valueOf(item[i][j]));\n+                add(buttons[k]);\n+                buttons[k].addActionListener(new ActionListener() {\n+                    @Override\n+                    public void actionPerformed(ActionEvent e) {\n+                        System.out.println(\"OK\");\n+                        if (MainClass.map[0][0] == MainClass.EMPTY_DOT) {\n+                            MainClass.map[0][0] = MainClass.X_DOT;\n+//                            buttons[k]\n+                            System.out.println(MainClass.map[0][0]);\n+                        }\n+                    }\n+                });\n+                buttons[k].setActionCommand(String.valueOf(\"buttons[\" + k + \"]\"));\n+            }\n+        }\n+\n+\n+        setVisible(true);\n+    }\n+}"
  },
  {
    "sha": "26faf00e2c7b3f60ac77052f222e6f7e69b2571b",
    "filename": "src/main/java/level_1Lesson_8_1/MainClass.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/MainClass.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/MainClass.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8_1/MainClass.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,11 @@\n+package level_1Lesson_8_1;\n+\n+public class MainClass {\n+\n+    public static void main(String[] args) {\n+        MyTicTacToe logic = new MyTicTacToe();\n+        logic.initMap();\n+        MyWindow myWindow = new MyWindow(logic);\n+    }\n+\n+}"
  },
  {
    "sha": "c4e666faa3aa7b7fd4052d9dd90b6f53ee4c54df",
    "filename": "src/main/java/level_1Lesson_8_1/MyTicTacToe.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/MyTicTacToe.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/MyTicTacToe.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8_1/MyTicTacToe.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,154 @@\n+package level_1Lesson_8_1;\n+import java.util.Random;\n+\n+public class MyTicTacToe {\n+    private char [][] map;\n+    static int SIZE = 3;\n+    private final char EMPTY_DOT = '•';\n+    private final char X_DOT = 'X';\n+    private final char O_DOT = 'O';\n+    private int COUNT_CHIP = 3;\n+\n+    public char[][] getMap() {\n+        return map;\n+    }\n+\n+    public boolean checkDraw() {\n+        for (int i = 0; i < SIZE; i++) {\n+            for (int j = 0; j < SIZE; j++) {\n+                if (map[i][j] == EMPTY_DOT) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Step computerTurn() {\n+        int xCoordinate;\n+        int yCoordinate;\n+        do {\n+            Random random = new Random();\n+            xCoordinate = random.nextInt(SIZE);\n+            yCoordinate = random.nextInt(SIZE);\n+        } while (!isValidCell(xCoordinate, yCoordinate));\n+        map[yCoordinate][xCoordinate] = O_DOT;\n+        return new Step(xCoordinate, yCoordinate);\n+    }\n+\n+    public boolean checkWin(char aChar) {\n+        int chipHorizon = 0;\n+        int chipVertical = 0;\n+        int backSlash = 0;\n+        int slash = 0;\n+        int topBackSlash = 0;\n+        int bottomBackSlash = 0;\n+        int topSlash = 0;\n+        int bottomSlash = 0;\n+        for (int i = 0; i < SIZE; i++) {\n+            // Проверка центральных диагоналей\n+            if (map[i][i] == aChar) {\n+                backSlash++;\n+            } else {\n+                backSlash = 0;\n+            }\n+            if (map[SIZE - 1 - i][i] == aChar) {\n+                slash++;\n+            } else {\n+                slash = 0;\n+            }\n+            if (backSlash == COUNT_CHIP || slash == COUNT_CHIP) {\n+                return true;\n+            }\n+            //Проверка по горизонтали и вертикали\n+            for (int j = 0; j < SIZE; j++) {\n+                if (map[i][j] == aChar) {\n+                    chipHorizon++;\n+                } else {\n+                    chipHorizon = 0;\n+                }\n+                if (map[j][i] == aChar) {\n+                    chipVertical++;\n+                } else {\n+                    chipVertical = 0;\n+                }\n+                if (chipHorizon == COUNT_CHIP || chipVertical == COUNT_CHIP) {\n+                    return true;\n+                }\n+                // Проверка малых диагоналей\n+                if (!(i + j + 1 > SIZE - 1)) {\n+                    if (map[i + j + 1][j] == aChar) {\n+                        topBackSlash++;\n+                    } else {\n+                        topBackSlash = 0;\n+                    }\n+                    if (map[j][i + j + 1] == aChar) {\n+                        bottomBackSlash++;\n+                    } else {\n+                        bottomBackSlash = 0;\n+                    }\n+                }\n+                if (SIZE - 2 - i - j > 0) {\n+                    if (map[SIZE - 2 - i - j][j] == aChar) {\n+                        topSlash++;\n+                    } else\n+                    {\n+                        topSlash = 0;\n+                    }\n+                }\n+                if (i + j + 1 < SIZE) {\n+                    if (map[SIZE - 1 - j][i + j + 1] == aChar){\n+                        bottomSlash++;\n+                    } else {\n+                        bottomSlash = 0;\n+                    }\n+                }\n+                if (topBackSlash == COUNT_CHIP || bottomBackSlash == COUNT_CHIP || topSlash == COUNT_CHIP || bottomSlash == COUNT_CHIP) {\n+                    return true;\n+                }\n+            }\n+            chipHorizon = 0;\n+            chipVertical = 0;\n+        }\n+        return false;\n+    }\n+\n+    public void humanTurn(int x, int y) {\n+        map[y][x] = X_DOT;\n+    }\n+\n+    public boolean isValidCell(int x, int y) {\n+        if (x < 0 || x > SIZE - 1 || y < 0 || y > SIZE - 1) {\n+            return false;\n+        }\n+        return (map[y][x] == EMPTY_DOT);\n+    }\n+\n+    public void printMap() {\n+        System.out.print(\"  \");\n+        for (int i = 0; i < SIZE; i++) {\n+            System.out.print((i + 1) + \" \");\n+        }\n+        System.out.println();\n+        for (int i = 0; i < SIZE; i++) {\n+            System.out.print(i + 1 + \" \");\n+            for (int j = 0; j < SIZE; j++) {\n+                System.out.print(map[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+        System.out.println();\n+    }\n+\n+    public void initMap() {\n+        map = new char[SIZE][SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            for (int j = 0; j < SIZE; j++) {\n+                map[i][j] = EMPTY_DOT;\n+            }\n+        }\n+    }\n+}\n+\n+\n+"
  },
  {
    "sha": "58bd5f44dd460d6d4959ef70c0befdacc7cdec38",
    "filename": "src/main/java/level_1Lesson_8_1/MyWindow.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/MyWindow.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/MyWindow.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8_1/MyWindow.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,95 @@\n+package level_1Lesson_8_1;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\n+\n+public class MyWindow extends JFrame implements ActionListener {\n+    private static final char X_DOT = 'X';\n+    private static final char O_DOT = 'O';\n+\n+    private MyTicTacToe logic;\n+\n+    private final JButton[][] buttons = new JButton[3][3];\n+\n+    public MyWindow(MyTicTacToe logic) {\n+        this.logic = logic;\n+\n+        setTitle(\"Tic Tak Game!\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setBounds(300, 300, 400, 400);\n+        setLayout(new GridLayout(3, 3));\n+\n+        logic.initMap();\n+\n+\n+        for (int y = 0; y < logic.getMap().length; y++) {\n+            for (int x = 0; x < logic.getMap().length; x++) {\n+                buttons[x][y] = new JButton(String.valueOf(logic.getMap()[x][y]));\n+                add(buttons[x][y]);\n+                buttons[x][y].addActionListener(this);\n+                buttons[x][y].setActionCommand(x+\"_\"+y);\n+            }\n+        }\n+        setVisible(true);\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        String c = e.getActionCommand();\n+        String[] commands = c.split(\"_\");\n+        try {\n+            int x = Integer.parseInt(commands[0]);\n+            int y = Integer.parseInt(commands[1]);\n+//            System.out.println(x + \" \" + y);\n+            buttons[x][y].setText(\"X\");\n+            buttons[x][y].setEnabled(false);\n+            logic.humanTurn(x, y);\n+        } catch (NumberFormatException ex){\n+//            System.out.println(ex.getMessage());\n+        }\n+\n+//        logic.printMap();\n+\n+        checkWinner();\n+\n+    }\n+\n+    private void checkWinner() {\n+        if (logic.checkWin(X_DOT)) {\n+            setTitle(\"Вы победили!\");\n+            endGame();\n+            return;\n+        } else if (logic.checkDraw()) {\n+            setTitle(\"Ничья.\");\n+        }\n+\n+        Step s = logic.computerTurn();\n+        showComputerTurn(s);\n+\n+        if (logic.checkWin(O_DOT)) {\n+            setTitle(\"Вы проиграли.\");\n+            endGame();\n+        } else if (logic.checkDraw()) {\n+            setTitle(\"Ничья.\");\n+        }\n+    }\n+\n+    private void endGame(){\n+        setTitle(getTitle() + \" Игра окончена!\");\n+        for (int y = 0; y < logic.getMap().length; y++) {\n+            for (int x = 0; x < logic.getMap().length; x++) {\n+                buttons[x][y].setEnabled(false);\n+            }\n+        }\n+    }\n+\n+    private void showComputerTurn(Step step){\n+        buttons[step.getX()][step.getY()].setText(String.valueOf(O_DOT));\n+        buttons[step.getX()][step.getY()].setEnabled(false);\n+//        logic.printMap();\n+    }\n+}"
  },
  {
    "sha": "cbb926eca27b5bbaae8583275d75dbdafc0f22cc",
    "filename": "src/main/java/level_1Lesson_8_1/Step.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/Step.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_1Lesson_8_1/Step.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_1Lesson_8_1/Step.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,19 @@\n+package level_1Lesson_8_1;\n+\n+public class Step {\n+    private int x;\n+    private int y;\n+\n+    public Step(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public int getX() {\n+        return x;\n+    }\n+\n+    public int getY() {\n+        return y;\n+    }\n+}"
  },
  {
    "sha": "c0f0a65b2e7d17b9ea22a4eb2e81f17fccc929fb",
    "filename": "src/main/java/level_2Lesson_1/Cat.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Cat.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Cat.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Cat.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,51 @@\n+package level_2Lesson_1;\n+\n+public class Cat implements Sportable {\n+    private String name;\n+    private int maxRun;\n+    private int maxJump;\n+    private boolean isAbl = true;\n+\n+    public Cat(String name, int maxRun, int maxJump) {\n+        this.name = name;\n+        this.maxRun = maxRun;\n+        this.maxJump = maxJump;\n+    }\n+\n+    @Override\n+    public int getMaxRun() {\n+        return maxRun;\n+    }\n+\n+    @Override\n+    public int getMaxJump() {\n+        return maxJump;\n+    }\n+\n+    @Override\n+    public boolean getIsAble() {\n+        return isAbl;\n+    }\n+\n+    @Override\n+    public void jump() {\n+        System.out.println(\"Кошка \" + name + \" перепрыгнула через стену.\");\n+    }\n+\n+    @Override\n+    public void notJump() {\n+        System.out.println(\"Кошка \" + name + \" не смогла прыгнуть через стену.\");\n+        isAbl = false;\n+    }\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Кошка \" + name + \" пробежала дорожку полностью.\");\n+    }\n+\n+    @Override\n+    public void notRun() {\n+        System.out.println(\"Кошка \" + name + \" не смогла пробежать дорожку полностью.\");\n+        isAbl = false;\n+    }\n+}"
  },
  {
    "sha": "879b912eff3764fb2f9aecb1b95212fcfce0294c",
    "filename": "src/main/java/level_2Lesson_1/Challenge.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Challenge.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Challenge.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Challenge.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,6 @@\n+package level_2Lesson_1;\n+\n+public abstract class Challenge {\n+\n+    public abstract void doOvercome(Sportable sportsman);\n+}"
  },
  {
    "sha": "91bb35b16a3e025fc7d0924e84006557b7740b63",
    "filename": "src/main/java/level_2Lesson_1/Human.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Human.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Human.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Human.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,52 @@\n+package level_2Lesson_1;\n+\n+public class Human implements Sportable {\n+    private String name;\n+    private int maxRun;\n+    private int maxJump;\n+    private boolean isAbl = true;\n+\n+    public Human(String name, int maxRun, int maxJump) {\n+        this.name = name;\n+        this.maxRun = maxRun;\n+        this.maxJump = maxJump;\n+    }\n+\n+    @Override\n+    public int getMaxRun() {\n+        return maxRun;\n+    }\n+\n+    @Override\n+    public int getMaxJump() {\n+        return maxJump;\n+    }\n+\n+    @Override\n+    public boolean getIsAble() {\n+        return isAbl;\n+    }\n+\n+\n+    @Override\n+    public void jump() {\n+        System.out.println(\"Человек \" + name + \" перепрыгнул через стену.\");\n+    }\n+\n+    @Override\n+    public void notJump() {\n+        System.out.println(\"Человек \" + name + \" не смог прыгнуть через стену.\");\n+        isAbl = false;\n+    }\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Человек \" + name + \" пробежал дорожку полностью.\");\n+    }\n+\n+    @Override\n+    public void notRun() {\n+        System.out.println(\"Человек \" + name + \" не смог пробежать дорожку полностью.\");\n+        isAbl = false;\n+    }\n+}"
  },
  {
    "sha": "2d7635544ad0a2281449087263832f217b3c8b70",
    "filename": "src/main/java/level_2Lesson_1/Main.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Main.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Main.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Main.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,19 @@\n+package level_2Lesson_1;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Challenge[] challenges = new Challenge[]{new Wall(1),\n+                                                    new Runway(30),\n+                                                    new Runway(300),\n+                                                    new Wall(4)};\n+        Sportable[] sportables = new Sportable[]{new Human(\"Валера\", 100, 2),\n+                                                new Cat(\"Бегемот\", 20, 3),\n+                                                new Robot(\"Т-1000\", 1500, 5)};\n+        for (Challenge ch: challenges) {\n+            for (Sportable s: sportables) {\n+                ch.doOvercome(s);\n+            }\n+            System.out.println();\n+        }\n+    }\n+}"
  },
  {
    "sha": "e102d41e9bc3b1a48e46dbe64cc332476d9b5d8a",
    "filename": "src/main/java/level_2Lesson_1/Robot.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Robot.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Robot.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Robot.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,51 @@\n+package level_2Lesson_1;\n+\n+public class Robot implements Sportable{\n+    private String name;\n+    private int maxRun;\n+    private int maxJump;\n+    private boolean isAbl = true;\n+\n+    public Robot(String name, int maxRun, int maxJump) {\n+        this.name = name;\n+        this.maxRun = maxRun;\n+        this.maxJump = maxJump;\n+    }\n+\n+    @Override\n+    public void jump() {\n+        System.out.println(\"Робот \" + name + \" перепрыгнул через стену.\");\n+    }\n+\n+    @Override\n+    public void notJump() {\n+        System.out.println(\"Робот \" + name + \" не смог прыгнуть через стену.\");\n+        isAbl = false;\n+    }\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Робок \" + name + \" пробежал дорожку полностью.\");\n+    }\n+\n+    @Override\n+    public void notRun() {\n+        System.out.println(\"Робот \" + name + \" не смог пробежать дорожку полностью.\");\n+        isAbl = false;\n+    }\n+\n+    @Override\n+    public int getMaxRun() {\n+        return maxRun;\n+    }\n+\n+    @Override\n+    public int getMaxJump() {\n+        return maxJump;\n+    }\n+\n+    @Override\n+    public boolean getIsAble() {\n+        return isAbl;\n+    }\n+}"
  },
  {
    "sha": "b8cd9e4064bce83f7a0b871b6f7ddeb152b4a8b2",
    "filename": "src/main/java/level_2Lesson_1/Runway.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Runway.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Runway.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Runway.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,20 @@\n+package level_2Lesson_1;\n+\n+public class Runway extends Challenge{\n+    private int lengthRunway;\n+\n+    public Runway(int lengthRunway) {\n+        this.lengthRunway = lengthRunway;\n+    }\n+\n+    @Override\n+    public void doOvercome(Sportable sportsman) {\n+        if (sportsman.getIsAble()) {\n+            if (sportsman.getMaxRun() >= lengthRunway) {\n+                sportsman.run();\n+            } else {\n+                sportsman.notRun();\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "aa137ec01bb8228c947dcf09cc74253fdf8e664b",
    "filename": "src/main/java/level_2Lesson_1/Sportable.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Sportable.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Sportable.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Sportable.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,11 @@\n+package level_2Lesson_1;\n+\n+public interface Sportable {\n+    void jump();\n+    void notJump();\n+    void run();\n+    void notRun();\n+    int getMaxRun();\n+    int getMaxJump();\n+    boolean getIsAble();\n+}"
  },
  {
    "sha": "e9f93561bcf11f15190b71277bb2a5890229c47a",
    "filename": "src/main/java/level_2Lesson_1/Wall.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/svarost/GBHomeworks_1_2/blob/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Wall.java",
    "raw_url": "https://github.com/svarost/GBHomeworks_1_2/raw/bfa02b62e15f50820507e475ffd067e0e1efcac5/src/main/java/level_2Lesson_1/Wall.java",
    "contents_url": "https://api.github.com/repos/svarost/GBHomeworks_1_2/contents/src/main/java/level_2Lesson_1/Wall.java?ref=bfa02b62e15f50820507e475ffd067e0e1efcac5",
    "patch": "@@ -0,0 +1,21 @@\n+package level_2Lesson_1;\n+\n+public class Wall extends Challenge{\n+\n+    private int hightWall;\n+\n+    public Wall(int hightWall) {\n+        this.hightWall = hightWall;\n+    }\n+\n+    @Override\n+    public void doOvercome(Sportable sportsman) {\n+        if (sportsman.getIsAble()) {\n+            if (sportsman.getMaxJump() >= hightWall) {\n+                sportsman.jump();\n+            } else {\n+                sportsman.notJump();\n+            }\n+        }\n+    }\n+}"
  }
]
