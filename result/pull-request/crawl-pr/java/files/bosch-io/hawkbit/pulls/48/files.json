[
  {
    "sha": "2fbb4fbc8d92a218e617543b134a8278f7f949dc",
    "filename": "hawkbit-autoconfigure/src/main/java/org/eclipse/hawkbit/autoconfigure/dmf/amqp/DmfApiAutoConfiguration.java",
    "status": "modified",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-autoconfigure/src/main/java/org/eclipse/hawkbit/autoconfigure/dmf/amqp/DmfApiAutoConfiguration.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-autoconfigure/src/main/java/org/eclipse/hawkbit/autoconfigure/dmf/amqp/DmfApiAutoConfiguration.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-autoconfigure/src/main/java/org/eclipse/hawkbit/autoconfigure/dmf/amqp/DmfApiAutoConfiguration.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -9,13 +9,9 @@\n package org.eclipse.hawkbit.autoconfigure.dmf.amqp;\n \n import org.eclipse.hawkbit.amqp.DmfApiConfiguration;\n-import org.springframework.amqp.rabbit.listener.ConditionalRejectingErrorHandler;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.util.ErrorHandler;\n \n /**\n  * The AMQP 0.9 based device Management Federation API (DMF) auto configuration.\n@@ -25,15 +21,4 @@\n @Import(DmfApiConfiguration.class)\n public class DmfApiAutoConfiguration {\n \n-    /**\n-     * Create default error handler bean.\n-     * \n-     * @return the default error handler bean\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ErrorHandler errorHandler() {\n-        return new ConditionalRejectingErrorHandler();\n-    }\n-\n }"
  },
  {
    "sha": "f0519ea804c4b780782bd1021781f9c2d1a6aab8",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpConfiguration.java",
    "status": "modified",
    "additions": 33,
    "deletions": 10,
    "changes": 43,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpConfiguration.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpConfiguration.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpConfiguration.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -8,9 +8,7 @@\n  */\n package org.eclipse.hawkbit.amqp;\n \n-import java.time.Duration;\n-import java.util.Map;\n-\n+import com.google.common.collect.Maps;\n import org.eclipse.hawkbit.api.ArtifactUrlHandler;\n import org.eclipse.hawkbit.api.HostnameResolver;\n import org.eclipse.hawkbit.cache.DownloadIdCache;\n@@ -53,7 +51,9 @@\n import org.springframework.retry.support.RetryTemplate;\n import org.springframework.util.ErrorHandler;\n \n-import com.google.common.collect.Maps;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Spring configuration for AMQP based DMF communication for indirect device\n@@ -80,15 +80,38 @@\n     private ServiceMatcher serviceMatcher;\n \n     /**\n-     * Register the bean for the custom error handler.\n+     * Create default error handler bean.\n+     *\n+     *  @param handlers\n+     *                  list of conditional error handlers\n+\n+     * @return the delegating error handler bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ErrorHandler errorHandler(final List<AmqpErrorHandler> handlers) {\n+        return new DelegatingConditionalErrorHandler(handlers, new ConditionalRejectingErrorHandler(\n+                new DelayedRequeueExceptionStrategy(amqpProperties.getRequeueDelay())));\n+    }\n+\n+    /**\n+     * Error handler bean for all target related fatal errors\n+     *\n+     * @return the invalid target operations exception handler bean\n+     */\n+    @Bean\n+    public AmqpErrorHandler invalidTargetOperationsConditionalExceptionHandler() {\n+        return new InvalidTargetOperationsExceptionHandler();\n+    }\n+\n+    /**\n+     * Error handler bean for amqp message conversion errors\n      *\n-     * @return custom error handler\n+     * @return the amqp message conversion exception handler bean\n      */\n     @Bean\n-    @ConditionalOnMissingBean(ErrorHandler.class)\n-    public ErrorHandler errorHandler() {\n-        return new ConditionalRejectingErrorHandler(\n-                new DelayedRequeueExceptionStrategy(amqpProperties.getRequeueDelay()));\n+    public AmqpErrorHandler messageConversionExceptionHandler() {\n+        return new MessageConversionExceptionHandler();\n     }\n \n     /**"
  },
  {
    "sha": "626237242eaad83fe4974b79caa1a3450bbf0a76",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandler.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandler.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandler.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandler.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.amqp;\n+\n+/**\n+ * Interface declaration of {@link AmqpErrorHandler} that handles errors based on the\n+ * types of {@link AmqpErrorHandler}\n+ */\n+public interface AmqpErrorHandler {\n+\n+    /**\n+     * Handles the error based on the type of {@link AmqpErrorHandler}\n+     *\n+     * @param throwable\n+     *            the throwable\n+     * @param chain\n+     *            an {@link AmqpErrorHandlerChain}\n+     */\n+void doHandle(final Throwable throwable, final AmqpErrorHandlerChain chain);\n+\n+}"
  },
  {
    "sha": "3d8e992c7de60c0d3fc8247d7ad82f86cca9e7e0",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandlerChain.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandlerChain.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandlerChain.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/AmqpErrorHandlerChain.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.amqp;\n+\n+import org.springframework.util.ErrorHandler;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * An error handler chain which processes a {@link List} of error handlers based on the type of {@link AmqpErrorHandler}\n+ */\n+public class AmqpErrorHandlerChain {\n+    private final Iterator<AmqpErrorHandler> iterator;\n+    private final ErrorHandler defaultHandler;\n+\n+    AmqpErrorHandlerChain(Iterator<AmqpErrorHandler> iterator, ErrorHandler defaultHandler) {\n+        this.iterator = iterator;\n+        this.defaultHandler = defaultHandler;\n+    }\n+\n+    /**\n+     * Returns an {@link AmqpErrorHandlerChain}\n+     *\n+     * @param errorHandlers\n+     *                      {@link List} of error handlers\n+     * @param defaultHandler\n+     *                      the default error handler\n+     * @return an {@link AmqpErrorHandlerChain}\n+     */\n+    public static AmqpErrorHandlerChain getHandler(final List<AmqpErrorHandler> errorHandlers, final ErrorHandler defaultHandler) {\n+        return new AmqpErrorHandlerChain(errorHandlers.iterator(), defaultHandler);\n+    }\n+\n+    public void handle(final Throwable error) {\n+        if (iterator.hasNext()) {\n+            final AmqpErrorHandler handler = iterator.next();\n+            handler.doHandle(error, this);\n+        } else {\n+            defaultHandler.handleError(error);\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "c1a463d16e9f231bfb3ea85f2d232c188b107b24",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/DelegatingConditionalErrorHandler.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/DelegatingConditionalErrorHandler.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/DelegatingConditionalErrorHandler.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/DelegatingConditionalErrorHandler.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.amqp;\n+\n+import org.springframework.util.ErrorHandler;\n+\n+import javax.validation.constraints.NotNull;\n+import java.util.List;\n+\n+/**\n+ * An error handler which performs delegation based on the type of {@link AmqpErrorHandler}\n+ */\n+public class DelegatingConditionalErrorHandler implements ErrorHandler {\n+    private final List<AmqpErrorHandler> handlers;\n+    private final ErrorHandler defaultHandler;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param handlers\n+     *                 {@link List} of error handlers\n+     * @param defaultHandler\n+     *                  the default error handler\n+     */\n+    public DelegatingConditionalErrorHandler(final List<AmqpErrorHandler> handlers, @NotNull final ErrorHandler defaultHandler) {\n+        this.handlers = handlers;\n+        this.defaultHandler = defaultHandler;\n+    }\n+\n+    @Override\n+    public void handleError(final Throwable t) {\n+        AmqpErrorHandlerChain.getHandler(handlers, defaultHandler).handle(t);\n+    }\n+}"
  },
  {
    "sha": "208019048c41bbc220f7376dc20302b35e8de46f",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/InvalidTargetOperationsExceptionHandler.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/InvalidTargetOperationsExceptionHandler.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/InvalidTargetOperationsExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/InvalidTargetOperationsExceptionHandler.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.amqp;\n+\n+import org.eclipse.hawkbit.repository.exception.EntityNotFoundException;\n+import org.eclipse.hawkbit.repository.exception.InvalidTargetAttributeException;\n+import org.springframework.amqp.AmqpRejectAndDontRequeueException;\n+\n+/**\n+ * An error handler for all invalid target operations resulting from AMQP.\n+ */\n+public class InvalidTargetOperationsExceptionHandler implements AmqpErrorHandler {\n+\n+    @Override\n+    public void doHandle(final Throwable t, final AmqpErrorHandlerChain chain) {\n+        final Throwable cause = t.getCause();\n+        if (cause instanceof InvalidTargetAttributeException || cause instanceof EntityNotFoundException) {\n+            throw new AmqpRejectAndDontRequeueException(cause.getMessage());\n+        } else {\n+            chain.handle(t);\n+        }\n+    }\n+}"
  },
  {
    "sha": "16409c9e5c863f51e83d68ecaf88e00cce1ea08e",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/MessageConversionExceptionHandler.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/MessageConversionExceptionHandler.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/MessageConversionExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/main/java/org/eclipse/hawkbit/amqp/MessageConversionExceptionHandler.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.amqp;\n+\n+import org.springframework.amqp.AmqpRejectAndDontRequeueException;\n+import org.springframework.amqp.support.converter.MessageConversionException;\n+\n+/**\n+ * An error handler for message conversion exception resulting from AMQP.\n+ */\n+public class MessageConversionExceptionHandler implements AmqpErrorHandler {\n+\n+    @Override\n+    public void doHandle(final Throwable t, final AmqpErrorHandlerChain chain) {\n+        // retrieving the cause of throwable as it contains the details of invalid message\n+        // structure which caused MessageConversionException\n+        final Throwable cause = t.getCause();\n+        if (cause instanceof MessageConversionException) {\n+            throw new AmqpRejectAndDontRequeueException(cause.getCause().getMessage());\n+        } else {\n+            chain.handle(t);\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "2bdf2be903191d0fb1ad3316c4f6245cdd216634",
    "filename": "hawkbit-dmf/hawkbit-dmf-amqp/src/test/java/org/eclipse/hawkbit/amqp/DelegatingAmqpErrorHandlerTest.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/bosch-io/hawkbit/blob/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/test/java/org/eclipse/hawkbit/amqp/DelegatingAmqpErrorHandlerTest.java",
    "raw_url": "https://github.com/bosch-io/hawkbit/raw/d04dda467c981b40a2dc26df00dfc8ed41718eff/hawkbit-dmf/hawkbit-dmf-amqp/src/test/java/org/eclipse/hawkbit/amqp/DelegatingAmqpErrorHandlerTest.java",
    "contents_url": "https://api.github.com/repos/bosch-io/hawkbit/contents/hawkbit-dmf/hawkbit-dmf-amqp/src/test/java/org/eclipse/hawkbit/amqp/DelegatingAmqpErrorHandlerTest.java?ref=d04dda467c981b40a2dc26df00dfc8ed41718eff",
    "patch": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.amqp;\n+\n+import io.qameta.allure.Description;\n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Story;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.util.ErrorHandler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Feature(\"Unit Tests - Delegating Conditional Error Handler\")\n+@Story(\"Delegating Conditional Error Handler\")\n+@RunWith(MockitoJUnitRunner.class)\n+public class DelegatingAmqpErrorHandlerTest {\n+\n+    @Test\n+    @Description(\"Verifies that with a list of conditional error handlers, the error is delegated to specific handler.\")\n+    public void verifyDelegationHandling(){\n+        List<AmqpErrorHandler> handlers = new ArrayList<>();\n+        handlers.add(new AmqpErrorHandler1());\n+        handlers.add(new AmqpErrorHandler2());\n+        Assertions.assertThrows(IllegalArgumentException.class,\n+                () -> new DelegatingConditionalErrorHandler(handlers, new DefaultErrorHandler())\n+                        .handleError(new Throwable(new IllegalArgumentException())),\n+                \"Expected handled exception to be of type IllegalArgumentException\");\n+    }\n+\n+    @Test\n+    @Description(\"Verifies that with a list of conditional error handlers, undefined error is handled in default way.\")\n+    public void verifyDefaultDelegationHandling(){\n+        List<AmqpErrorHandler> handlers = new ArrayList<>();\n+        handlers.add(new AmqpErrorHandler1());\n+        handlers.add(new AmqpErrorHandler2());\n+        Assertions.assertThrows(RuntimeException.class,\n+                () -> new DelegatingConditionalErrorHandler(handlers, new DefaultErrorHandler())\n+                        .handleError(new Throwable(new NullPointerException())),\n+                \"Expected handled exception to be of type RuntimeException\");\n+    }\n+\n+    // Test class\n+    public class AmqpErrorHandler1 implements AmqpErrorHandler {\n+\n+        @Override\n+        public void doHandle(final Throwable t, final AmqpErrorHandlerChain chain) {\n+            if (t.getCause() instanceof IllegalArgumentException) {\n+                throw new IllegalArgumentException(t.getMessage());\n+            } else {\n+                chain.handle(t);\n+            }\n+        }\n+    }\n+\n+    // Test class\n+    public class AmqpErrorHandler2 implements AmqpErrorHandler {\n+\n+        @Override\n+        public void doHandle(final Throwable t, final AmqpErrorHandlerChain chain) {\n+            if (t.getCause() instanceof IndexOutOfBoundsException) {\n+                throw new IndexOutOfBoundsException(t.getMessage());\n+            } else {\n+                chain.handle(t);\n+            }\n+        }\n+    }\n+\n+    // Test class\n+    public class DefaultErrorHandler implements ErrorHandler {\n+\n+        @Override\n+        public void\n+        handleError(Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+}"
  }
]
