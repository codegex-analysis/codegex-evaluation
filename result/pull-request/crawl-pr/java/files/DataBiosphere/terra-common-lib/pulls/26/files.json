[
  {
    "sha": "80d7f880eb3da19ba1f8f91dc6e72814a869f9ce",
    "filename": ".github/workflows/develop-push.yml",
    "status": "modified",
    "additions": 12,
    "deletions": 3,
    "changes": 15,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/.github/workflows/develop-push.yml",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/.github/workflows/develop-push.yml",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/.github/workflows/develop-push.yml?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -65,11 +65,20 @@ jobs:\n           echo ::add-mask::$ARTIFACTORY_USERNAME\n           echo ::set-output name=artifactory-password::$ARTIFACTORY_PASSWORD\n           echo ::add-mask::$ARTIFACTORY_PASSWORD\n+      # See https://github.com/actions/cache/blob/main/examples.md#java---gradle\n+      - name: Cache Gradle packages\n+        uses: actions/cache@v2\n+        with:\n+          path: |\n+            ~/.gradle/caches\n+            ~/.gradle/wrapper\n+          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}\n+          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}\n       - name: Grant execute permission for gradlew\n         run: chmod +x gradlew\n-      - name: Run unit tests\n-        id: unit-test\n-        run: ./gradlew unitTest --scan\n+      - name: Build, assemble, and test\n+        id: build-assemble-test\n+        run: ./gradlew build\n       - name: Upload Test Reports\n         if: always()\n         uses: actions/upload-artifact@v1"
  },
  {
    "sha": "6aa08b2679763b92864a8b1719a41c2364f66095",
    "filename": ".github/workflows/publish-release.yml",
    "status": "modified",
    "additions": 12,
    "deletions": 3,
    "changes": 15,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/.github/workflows/publish-release.yml",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/.github/workflows/publish-release.yml",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/.github/workflows/publish-release.yml?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -64,11 +64,20 @@ jobs:\n           echo ::add-mask::$ARTIFACTORY_USERNAME\n           echo ::set-output name=artifactory-password::$ARTIFACTORY_PASSWORD\n           echo ::add-mask::$ARTIFACTORY_PASSWORD\n+      # See https://github.com/actions/cache/blob/main/examples.md#java---gradle\n+      - name: Cache Gradle packages\n+        uses: actions/cache@v2\n+        with:\n+          path: |\n+            ~/.gradle/caches\n+            ~/.gradle/wrapper\n+          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}\n+          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}\n       - name: Grant execute permission for gradlew\n         run: chmod +x gradlew\n-      - name: Run unit tests\n-        id: unit-test\n-        run: ./gradlew unitTest --scan\n+      - name: Build, assemble, and test\n+        id: build-assemble-test\n+        run: ./gradlew build\n       - name: Upload Test Reports\n         if: always()\n         uses: actions/upload-artifact@v1"
  },
  {
    "sha": "24d91fb83c786bd5eab0a9971f4101e3271c4170",
    "filename": ".github/workflows/test.yml",
    "status": "modified",
    "additions": 12,
    "deletions": 5,
    "changes": 17,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/.github/workflows/test.yml",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/.github/workflows/test.yml",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/.github/workflows/test.yml?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -32,13 +32,20 @@ jobs:\n         uses: joschi/setup-jdk@v2\n         with:\n           java-version: 11\n+      # See https://github.com/actions/cache/blob/main/examples.md#java---gradle\n+      - name: Cache Gradle packages\n+        uses: actions/cache@v2\n+        with:\n+          path: |\n+            ~/.gradle/caches\n+            ~/.gradle/wrapper\n+          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}\n+          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}\n       - name: Grant execute permission for gradlew\n         run: chmod +x gradlew\n-      - name: Run unit tests\n-        id: unit-test\n-        run: ./gradlew unitTest --scan\n-      - name: Check Javadoc\n-        run: ./gradlew javadoc --scan\n+      - name: Build, assemble, and test\n+        id: build-test\n+        run: ./gradlew build --scan\n       - name: Upload Test Reports\n         if: always()\n         uses: actions/upload-artifact@v1"
  },
  {
    "sha": "3a4946dd587508d1e08ee468330c8d58e68849a3",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 18,
    "deletions": 113,
    "changes": 131,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/build.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/build.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/build.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -1,14 +1,15 @@\n plugins {\n     id 'idea'\n+    id 'jacoco'\n     id 'java-library'\n     id 'maven-publish'\n \n+    id 'com.diffplug.spotless' version '5.10.2'\n     id 'com.github.ben-manes.versions' version '0.33.0'\n-    id 'com.github.spotbugs' version '4.5.1'\n-    id 'com.diffplug.gradle.spotless' version '3.27.2'\n     id 'com.jfrog.artifactory' version '4.13.0'\n     id 'io.spring.dependency-management' version '1.0.9.RELEASE'\n     id 'org.springframework.boot' version '2.3.1.RELEASE'\n+    id 'ru.vyarus.quality' version '4.5.0'\n }\n \n repositories {\n@@ -25,7 +26,9 @@ group 'bio.terra'\n version '0.0.22-SNAPSHOT'\n sourceCompatibility = JavaVersion.VERSION_1_8\n \n-def OPENCENSUS_VERSION = '0.28.+'\n+ext {\n+    OPENCENSUS_VERSION = '0.28.+'\n+}\n \n dependencies {\n     implementation group: 'bio.terra', name: 'stairway', version: '0.0.37-SNAPSHOT'\n@@ -35,9 +38,7 @@ dependencies {\n     implementation group: 'com.google.code.findbugs', name: 'annotations', version: '3.+'\n     implementation group: 'com.google.apis', name: 'google-api-services-logging', version: 'v2+'\n     implementation group: 'io.kubernetes', name: 'client-java', version: '10.0.0'\n-    api group: 'io.opencensus', name: 'opencensus-api', version: OPENCENSUS_VERSION\n-    api group: \"io.opencensus\", name: \"opencensus-contrib-spring\", version: OPENCENSUS_VERSION\n-    implementation group: \"io.opencensus\", name: \"opencensus-exporter-trace-stackdriver\", version: OPENCENSUS_VERSION\n+    implementation group: 'io.opencensus', name: 'opencensus-exporter-trace-stackdriver', version: project.ext.OPENCENSUS_VERSION\n     // commons-lang3 version is managed by the Spring Boot plugin\n     implementation group: 'org.apache.commons', name: 'commons-lang3'\n     implementation group: 'org.hashids', name: 'hashids', version: '1.+'\n@@ -48,28 +49,15 @@ dependencies {\n     implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'\n     implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n \n-    runtimeOnly group: 'io.opencensus', name: 'opencensus-impl', version: OPENCENSUS_VERSION\n+    runtimeOnly group: 'io.opencensus', name: 'opencensus-impl', version: project.ext.OPENCENSUS_VERSION\n \n     api group: 'com.google.guava', name: 'guava', version: '29.0-jre'\n-\n-    // Jsonpath version is managed by the Spring Boot plugin\n-    testImplementation group: 'com.jayway.jsonpath', name: 'json-path'\n-    testImplementation group: 'io.opencensus', name: 'opencensus-impl', version: OPENCENSUS_VERSION\n-    testImplementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'\n-    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'\n-    // Jupiter version is managed by the Spring Boot plugin\n-    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'\n-    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'\n-    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'\n-    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'\n-    testImplementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'\n+    api group: 'io.opencensus', name: 'opencensus-api', version: project.ext.OPENCENSUS_VERSION\n+    api group: 'io.opencensus', name: 'opencensus-contrib-spring', version: project.ext.OPENCENSUS_VERSION\n \n     annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'\n-}\n \n-dependencyLocking {\n-    lockMode = LockMode.STRICT\n-    lockAllConfigurations() // see https://docs.gradle.org/current/userguide/dependency_locking.html\n+    // Test dependencies are split out into gradle/test.gradle\n }\n \n // We use Spring Boot gradle plugin in a non-Spring Boot environment to manage Spring Boot dependency.\n@@ -90,94 +78,11 @@ if (hasProperty('buildScan')) {\n     }\n }\n \n-// Linter\n-spotless {\n-    java {\n-        googleJavaFormat()\n-        targetExclude \"${buildDir}/**\"\n-    }\n-}\n-\n-compileJava.dependsOn spotlessApply\n-\n-// Static analysis\n-spotbugs {\n-    effort = 'max'\n-    // This makes the \"html\" reports come out in plain text so you can just open the file in IntelliJ\n-    // and look at your bugs instead of having to switch to a browser.\n-    extraArgs = ['-emacs']\n-}\n-spotbugsMain {\n-    reports {\n-        html {\n-            enabled = true\n-            destination = file(\"$buildDir/reports/spotbugs/main.html\")\n-        }\n-    }\n-}\n-spotbugsTest {\n-    reports {\n-        html {\n-            enabled = true\n-            destination = file(\"$buildDir/reports/spotbugs/test.html\")\n-        }\n-    }\n-}\n-\n-tasks.withType(Test) {\n-    testLogging {\n-        events = [\"passed\", \"failed\", \"skipped\"]\n-        // Causes the correct line to be reported on an exception.\n-        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL\n-        reports {\n-            // Write XML file (used by CircleCI, Jenkins, etc) to build/test-results/*\n-            junitXml.enabled = true\n-            // Write human-readable test report to build/reports/tests/*\n-            html.enabled = true\n-        }\n-    }\n-}\n-\n-test {\n-    useJUnitPlatform()\n-}\n-\n-task unitTest(type: Test) {\n-    useJUnitPlatform {\n-        includeTags 'unit'\n-    }\n-}\n-\n-// TODO(gjordan): turn off doclint to remove \"no @return value\" warnings\n-// https://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html\n-java {\n-    withJavadocJar()\n-}\n-\n-def artifactory_repo_key = System.getenv(\"ARTIFACTORY_REPO_KEY\") != null ? System.getenv(\"ARTIFACTORY_REPO_KEY\") : 'libs-snapshot-local'\n-def artifactory_username = System.getenv('ARTIFACTORY_USERNAME')\n-def artifactory_password = System.getenv('ARTIFACTORY_PASSWORD')\n+apply from: \"$rootDir/gradle/dependency-locking.gradle\"\n+apply from: \"$rootDir/gradle/javadoc.gradle\"\n+apply from: \"$rootDir/gradle/publishing.gradle\"\n+apply from: \"$rootDir/gradle/quality.gradle\"\n+apply from: \"$rootDir/gradle/spotless.gradle\"\n+apply from: \"$rootDir/gradle/test.gradle\"\n \n-publishing {\n-    publications {\n-        terraCommonLib(MavenPublication) {\n-            from components.java\n-        }\n-    }\n-}\n-\n-artifactory {\n-    publish {\n-        contextUrl = 'https://broadinstitute.jfrog.io/broadinstitute/'\n-        repository {\n-            repoKey = \"${artifactory_repo_key}\"\n-            username = \"${artifactory_username}\"\n-            password = \"${artifactory_password}\"\n-        }\n-        defaults {\n-            publications('terraCommonLib')\n-            publishArtifacts = true\n-            publishPom = true\n-        }\n-    }\n-}\n+defaultTasks 'spotlessApply', 'build'\n\\ No newline at end of file"
  },
  {
    "sha": "121388af5deb6c1dcb7bd7b1caebf46e02f9b122",
    "filename": "gradle/config/checkstyle/suppressions.xml",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/config/checkstyle/suppressions.xml",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/config/checkstyle/suppressions.xml",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/config/checkstyle/suppressions.xml?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\"?>\n+<!DOCTYPE suppressions PUBLIC\n+    \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\"\n+    \"https://checkstyle.org/dtds/suppressions_1_2.dtd\">\n+\n+<suppressions>\n+  <!--\n+    Terra: complexity measures are squishy and vague. Prefer to catch complexity in code review.\n+  -->\n+  <suppress checks=\"ClassFanOutComplexity\"/>\n+  <!--\n+    Terra: complexity measures are squishy and vague. Prefer to catch complexity in code review.\n+  -->\n+  <suppress checks=\"ExecutableStatementCount\"/>\n+  <!--\n+    Terra: final is considered optional for local vars.\n+  -->\n+  <suppress checks=\"FinalLocalVariable\"/>\n+  <!--\n+    Terra: Spotless is canonical for indentation.\n+  -->\n+  <suppress checks=\"Indentation\"/>\n+  <!--\n+    Terra: inner types out of order is OK, especially in tests.\n+  -->\n+  <suppress checks=\"InnerTypeLast\"/>\n+  <!--\n+    Terra: less strict about javadoc.\n+  -->\n+  <suppress checks=\"JavadocStyle\"/>\n+  <!--\n+    Terra: less strict about javadoc.\n+  -->\n+  <suppress checks=\"JavadocType\"/>\n+  <!--\n+    Terra: complexity measures are squishy and vague. Prefer to catch complexity in code review.\n+  -->\n+  <suppress checks=\"JavaNCSS\"/>\n+  <!--\n+    Terra: Spotless is canonical for line length.\n+  -->\n+  <suppress checks=\"LineLength\"/>\n+  <!--\n+    Terra: there are legitimate cases (esp. in tests) where multiple string literals are okay.\n+  -->\n+  <suppress checks=\"MultipleStringLiterals\"/>\n+  <!--\n+    Terra: multiple returns are OK.\n+  -->\n+  <suppress checks=\"ReturnCount\"/>\n+  <!--\n+    Terra: Spotless is canonical for whitespace.\n+  -->\n+  <suppress checks=\"WhitespaceAround\"/>\n+\n+</suppressions>\n\\ No newline at end of file"
  },
  {
    "sha": "a5268efbf367b9c4565b9e49ba43bf9105bd9e9f",
    "filename": "gradle/config/pmd/pmd.xml",
    "status": "added",
    "additions": 202,
    "deletions": 0,
    "changes": 202,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/config/pmd/pmd.xml",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/config/pmd/pmd.xml",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/config/pmd/pmd.xml?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,202 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<ruleset name=\"Base ruleset\" xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\r\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+         xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\r\n+\r\n+    <description>\r\n+        General Java quality rules.\r\n+    </description>\r\n+\r\n+    <!-- Best practices (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_bestpractices.html) -->\r\n+    <rule ref=\"category/java/bestpractices.xml\">\r\n+        <exclude name=\"AbstractClassWithoutAbstractMethod\"/>\r\n+        <!-- disabled as it's important for android and doesn't matter for general java (also fixes will\r\n+             conflict with checkstyle's VisibilityModifier check -->\r\n+        <exclude name=\"AccessorMethodGeneration\"/>\r\n+        <exclude name=\"ArrayIsStoredDirectly\"/>\r\n+        <exclude name=\"GuardLogStatement\"/>\r\n+        <exclude name=\"JUnitAssertionsShouldIncludeMessage\"/>\r\n+        <exclude name=\"JUnit4SuitesShouldUseSuiteAnnotation\"/>\r\n+        <exclude name=\"JUnit4TestShouldUseBeforeAnnotation\"/>\r\n+        <exclude name=\"JUnit4TestShouldUseAfterAnnotation\"/>\r\n+        <exclude name=\"JUnit4TestShouldUseTestAnnotation\"/>\r\n+        <!--\r\n+          Terra: multiple asserts are OK.\r\n+        -->\r\n+        <exclude name=\"JUnitTestContainsTooManyAsserts\"/>\r\n+        <exclude name=\"JUnitTestsShouldIncludeAssert\"/>\r\n+    </rule>\r\n+\r\n+\r\n+    <!-- Code style (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_codestyle.html) -->\r\n+    <rule ref=\"category/java/codestyle.xml\">\r\n+        <exclude name=\"AbstractNaming\"/>\r\n+        <exclude name=\"AtLeastOneConstructor\"/>\r\n+        <exclude name=\"AvoidFinalLocalVariable\"/>\r\n+        <exclude name=\"CallSuperInConstructor\"/>\r\n+        <exclude name=\"CommentDefaultAccessModifier\"/>\r\n+        <exclude name=\"ConfusingTernary\"/>\r\n+        <exclude name=\"ClassNamingConventions\"/>\r\n+        <exclude name=\"DefaultPackage\"/>\r\n+        <!--\r\n+          Terra: this rule is overly sensitive on method naming.\r\n+        -->\r\n+        <exclude name=\"LinguisticNaming\"/>\r\n+        <exclude name=\"LocalHomeNamingConvention\"/> <!-- earlier j2ee group-->\r\n+        <exclude name=\"LocalInterfaceSessionNamingConvention\"/> <!-- earlier j2ee group-->\r\n+        <exclude name=\"LocalVariableCouldBeFinal\"/>\r\n+        <exclude name=\"LongVariable\"/>\r\n+        <exclude name=\"MDBAndSessionBeanNamingConvention\"/> <!-- earlier j2ee group-->\r\n+        <!--\r\n+          Terra: final on method arguments is not required.\r\n+        -->\r\n+        <exclude name=\"MethodArgumentCouldBeFinal\"/>\r\n+        <exclude name=\"OnlyOneReturn\"/> <!-- disabled in favour of checkstyle ReturnCount check -->\r\n+        <!--\r\n+          Terra: overly sensitive rule with marginal value.\r\n+        -->\r\n+        <exclude name=\"PrematureDeclaration\"/>\r\n+        <exclude name=\"RemoteInterfaceNamingConvention\"/> <!-- earlier j2ee group-->\r\n+        <exclude name=\"RemoteSessionInterfaceNamingConvention\"/> <!-- earlier j2ee group-->\r\n+        <exclude name=\"ShortClassName\"/>\r\n+        <exclude name=\"ShortMethodName\"/>\r\n+        <exclude name=\"ShortVariable\"/>\r\n+        <exclude name=\"TooManyStaticImports\"/>\r\n+        <exclude name=\"UselessParentheses\"/>\r\n+    </rule>\r\n+    <rule ref=\"category/java/codestyle.xml/FieldNamingConventions\">\r\n+        <properties>\r\n+            <property name=\"enumConstantPattern\" value=\"[A-Z][a-zA-Z_0-9]*\"/>\r\n+        </properties>\r\n+    </rule>\r\n+\r\n+\r\n+    <!-- Design (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_design.html) -->\r\n+    <rule ref=\"category/java/design.xml\">\r\n+        <exclude name=\"AvoidCatchingGenericException\"/>\r\n+        <exclude name=\"AvoidUncheckedExceptionsInSignatures\"/>\r\n+        <!--\r\n+          Terra: complexity measures are squishy and vague. Prefer to catch complexity in code review.\r\n+        -->\r\n+        <exclude name=\"CyclomaticComplexity\"/>\r\n+        <exclude name=\"DataClass\"/>\r\n+        <exclude name=\"ExcessiveClassLength\"/> <!-- replaced by NcssCount -->\r\n+        <exclude name=\"ExcessiveMethodLength\"/> <!-- replaced by NcssCount -->\r\n+        <exclude name=\"LawOfDemeter\"/>\r\n+        <exclude name=\"LoosePackageCoupling\"/>\r\n+        <exclude name=\"ModifiedCyclomaticComplexity\"/>\r\n+        <!--\r\n+          Terra: complexity measures are squishy and vague. Prefer to catch complexity in code review.\r\n+        -->\r\n+        <exclude name=\"NcssCount\"/>\r\n+        <exclude name=\"SignatureDeclareThrowsException\"/>\r\n+        <exclude name=\"StdCyclomaticComplexity\"/>\r\n+    </rule>\r\n+    <rule ref=\"category/java/design.xml/AvoidDeeplyNestedIfStmts\">\r\n+        <properties>\r\n+            <property name=\"problemDepth\" value=\"4\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    <!--\r\n+      Terra: complexity measures are squishy and vague. Prefer to catch complexity in code review.\r\n+\r\n+      (The commented-out sections below were present in the default geneated XML. They are kept\r\n+      here in commented form for clarity and provenance.)\r\n+\r\n+    <rule ref=\"category/java/design.xml/CyclomaticComplexity\">\r\n+        <properties>\r\n+            <property name=\"cycloOptions\" value=\"ignoreBooleanPaths\"/>\r\n+            <property name=\"classReportLevel\" value=\"81\"/>\r\n+            <property name=\"methodReportLevel\" value=\"11\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    <rule ref=\"category/java/design.xml/NcssCount\">\r\n+        <properties>\r\n+            <property name=\"methodReportLevel\" value=\"40\"/>\r\n+            <property name=\"classReportLevel\" value=\"500\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    <rule ref=\"category/java/design.xml/NPathComplexity\">\r\n+        <properties>\r\n+            <property name=\"reportLevel\" value=\"201\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    <rule ref=\"category/java/design.xml/TooManyMethods\" message=\"Avoid classes longer than 20 methods\">\r\n+        <properties>\r\n+            <property name=\"maxmethods\" value=\"20\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    -->\r\n+    <!-- Documentation (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_documentation.html) -->\r\n+    <rule ref=\"category/java/documentation.xml\">\r\n+        <exclude name=\"CommentRequired\"/>\r\n+        <exclude name=\"CommentSize\"/>\r\n+    </rule>\r\n+\r\n+\r\n+    <!-- Error prone (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_errorprone.html) -->\r\n+    <rule ref=\"category/java/errorprone.xml\">\r\n+        <exclude name=\"AssignmentInOperand\"/>\r\n+        <exclude name=\"AvoidCatchingThrowable\"/>\r\n+        <exclude name=\"BeanMembersShouldSerialize\"/>\r\n+        <exclude name=\"DataflowAnomalyAnalysis\"/>\r\n+        <exclude name=\"DoNotTerminateVM\"/> <!-- earlier j2ee group; before 6.29 DoNotCallSystemExit-->\r\n+        <exclude name=\"EmptyFinalizer\"/>\r\n+        <exclude name=\"FinalizeOnlyCallsSuperFinalize\"/>\r\n+        <exclude name=\"FinalizeDoesNotCallSuperFinalize\"/>\r\n+        <exclude name=\"JUnitSpelling\"/>\r\n+        <exclude name=\"JUnitStaticSuite\"/>\r\n+        <exclude name=\"InvalidLogMessageFormat\"/>\r\n+        <exclude name=\"LoggerIsNotStaticFinal\"/>\r\n+        <exclude name=\"MissingSerialVersionUID\"/>\r\n+        <exclude name=\"NullAssignment\"/> <!-- disabled due to false positive for initialization with ternary operator -->\r\n+        <exclude name=\"StaticEJBFieldShouldBeFinal\"/> <!-- earlier j2ee group-->\r\n+        <exclude name=\"UseCorrectExceptionLogging\"/>\r\n+        <exclude name=\"UseLocaleWithCaseConversions\"/>\r\n+        <exclude name=\"UseProperClassLoader\"/> <!-- earlier j2ee group-->\r\n+    </rule>\r\n+    <rule ref=\"category/java/errorprone.xml/AvoidDuplicateLiterals\">\r\n+        <properties>\r\n+            <property name=\"skipAnnotations\" value=\"true\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    <rule ref=\"category/java/errorprone.xml/AvoidLiteralsInIfCondition\">\r\n+        <properties>\r\n+            <property name=\"ignoreMagicNumbers\" value=\"-1,0,1\"/>\r\n+        </properties>\r\n+    </rule>\r\n+    <rule ref=\"category/java/errorprone.xml/CloseResource\">\r\n+        <properties>\r\n+            <!-- AutoClosable removed from value because it produces too many false positives -->\r\n+            <property name=\"types\" value=\"java.sql.Connection,java.sql.Statement,java.sql.ResultSet\" />\r\n+        </properties>\r\n+    </rule>\r\n+\r\n+\r\n+    <!-- Error prone (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_multithreading.html) -->\r\n+    <rule ref=\"category/java/multithreading.xml\">\r\n+        <exclude name=\"AvoidUsingVolatile\"/>\r\n+        <exclude name=\"DoNotUseThreads\"/> <!-- earlier j2ee group-->\r\n+        <exclude name=\"UseConcurrentHashMap\"/>\r\n+    </rule>\r\n+\r\n+\r\n+    <!-- Performance (https://pmd.github.io/pmd-6.0.1/pmd_rules_java_performance.html) -->\r\n+    <rule ref=\"category/java/performance.xml\">\r\n+        <!-- Mostly annoying because reacts on all instantiations, including unmovable -->\r\n+        <exclude name=\"AvoidInstantiatingObjectsInLoops\"/>\r\n+        <!--\r\n+          Terra: we're okay with vanilla string concatenation.\r\n+        -->\r\n+        <exclude name=\"InefficientStringBuffering\"/>\r\n+        <!--\r\n+          Terra: overly sensitive performance check.\r\n+        -->\r\n+        <exclude name=\"UseIndexOfChar\"/>\r\n+    </rule>\r\n+\r\n+\r\n+    <!-- Security (no rules) -->\r\n+    <rule ref=\"category/java/security.xml\"/>\r\n+\r\n+</ruleset>\n\\ No newline at end of file"
  },
  {
    "sha": "bfb6895bdeedbea3349bcf95827135ed4fcf8fc4",
    "filename": "gradle/dependency-locking.gradle",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/dependency-locking.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/dependency-locking.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/dependency-locking.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,19 @@\n+// see https://docs.gradle.org/current/userguide/dependency_locking.html\n+dependencyLocking {\n+    lockMode = LockMode.STRICT\n+}\n+\n+configurations {\n+    compileClasspath {\n+        resolutionStrategy.activateDependencyLocking()\n+    }\n+    runtimeClasspath {\n+        resolutionStrategy.activateDependencyLocking()\n+    }\n+    testCompileClasspath {\n+        resolutionStrategy.activateDependencyLocking()\n+    }\n+    testRuntimeClasspath {\n+        resolutionStrategy.activateDependencyLocking()\n+    }\n+}"
  },
  {
    "sha": "e4c7bab845744cb53a35dcbfa3acbf0c8714d283",
    "filename": "gradle/javadoc.gradle",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/javadoc.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/javadoc.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/javadoc.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,17 @@\n+java {\n+    // Builds Javadoc into the published package as part of the 'assemble' task.\n+    withJavadocJar()\n+}\n+\n+// Use the approach described in the link below to turn off console output\n+// for warning-level Javadoc errors. We don't require warning-level fixes\n+// to Javadoc and wish to suppress the noise.\n+// https://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html\n+if (JavaVersion.current().isJava8Compatible()) {\n+    allprojects {\n+        tasks.withType(Javadoc) {\n+            options.addStringOption('Xdoclint:none', '-quiet')\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "43839271be0ac733615f86d16eadb96e63ad55b8",
    "filename": "gradle/publishing.gradle",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/publishing.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/publishing.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/publishing.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,32 @@\n+def artifactory_repo_key = System.getenv(\"ARTIFACTORY_REPO_KEY\") != null ? System.getenv(\"ARTIFACTORY_REPO_KEY\") : 'libs-snapshot-local'\n+def artifactory_username = System.getenv('ARTIFACTORY_USERNAME')\n+def artifactory_password = System.getenv('ARTIFACTORY_PASSWORD')\n+\n+java {\n+    // Builds sources into the published package as part of the 'assemble' task.\n+    withSourcesJar()\n+}\n+\n+publishing {\n+    publications {\n+        terraCommonLib(MavenPublication) {\n+            from components.java\n+        }\n+    }\n+}\n+\n+artifactory {\n+    publish {\n+        contextUrl = 'https://broadinstitute.jfrog.io/broadinstitute/'\n+        repository {\n+            repoKey = \"${artifactory_repo_key}\"\n+            username = \"${artifactory_username}\"\n+            password = \"${artifactory_password}\"\n+        }\n+        defaults {\n+            publications('terraCommonLib')\n+            publishArtifacts = true\n+            publishPom = true\n+        }\n+    }\n+}"
  },
  {
    "sha": "8214b91b2dd65426f7064bf2abee87781ab4d297",
    "filename": "gradle/quality.gradle",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/quality.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/quality.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/quality.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,51 @@\n+/**\n+ * Terra configs for the Gradle quality plugin.\n+ *\n+ * See docs at http://xvik.github.io/gradle-quality-plugin/4.5.0/\n+ *\n+ * Guiding principles behind our use of static code analyzers:\n+ *\n+ * 1) Shift left. We value code analyzers because they can accelerate and\n+ *    automate our detection of clear-cut violations of Java style expectations\n+ *    and good coding practice. Automated enforcement should be scoped to\n+ *    non-controversial matters of code health.\n+ *\n+ * 2) Automated enforcement is for programming errors or mechanical code\n+ *    formatting. Style and good judgment can not be replaced by automatic\n+ *    checks.\n+ *\n+ *    Good candidates for automated enforcement include code formatting,\n+ *    such as white space or camel case variable naming, or programmer errors\n+ *    such as unused or uninitialized variables.\n+ *\n+ *    Bad candidates for automated enforcement include trying to determine when\n+ *    a method is too complex or coding conventions with many exceptions to any\n+ *    rule, such as class member ordering.\n+ *\n+ *    For inspiration, see Error Prone's guidelines for new automated checks:\n+ *    https://github.com/google/error-prone/wiki/Criteria-for-new-checks\n+ *\n+ * 3) Suppress early, discuss later. We prefer fewer, more meaningful findings.\n+ *    At the first sign of a noisy or controversial finding, add a global\n+ *    suppression and follow-up with discussion among the team. We prefer global\n+ *    exclusions to many identical `@SuppressWarning` statements.\n+ *\n+ * Practical matters:\n+ *\n+ * For override files, see gradle/config/{toolName}/*.xml . These files were\n+ * auto-generated with `./gradlew initQualityConfig`.\n+ *\n+ * All overrides should be tagged with a Terra-specific justification comment\n+ * that explains why we are excluding the finding. Cross-links to tickets or\n+ * discussion threads for context are encouraged.\n+ *\n+ * To suppress a violation in code, use `@SuppressWarning(\"ViolationName\")`.\n+ */\n+quality {\n+    // FYI-only mode for now. Switch to strict=true once all sub-tasks are green.\n+    strict = false\n+\n+    pmd = true\n+    pmdIncremental = false\n+    pmdVersion = '6.31.0'\n+}"
  },
  {
    "sha": "beec220e07913ab3739423d9a067a443d58e49ef",
    "filename": "gradle/spotless.gradle",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/spotless.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/spotless.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/spotless.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,12 @@\n+spotless {\n+    groovyGradle {\n+        target '**/*.gradle'\n+        greclipse()\n+        indentWithSpaces()\n+    }\n+    java {\n+        googleJavaFormat()\n+        removeUnusedImports()\n+        targetExclude \"${buildDir}/**\"\n+    }\n+}"
  },
  {
    "sha": "e7b80a401b0bd946847d363fe04159f02c19a39d",
    "filename": "gradle/test.gradle",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/test.gradle",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/gradle/test.gradle",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/gradle/test.gradle?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -0,0 +1,55 @@\n+dependencies {\n+    // Jsonpath version is managed by the Spring Boot plugin\n+    testImplementation group: 'com.jayway.jsonpath', name: 'json-path'\n+    testImplementation group: 'io.opencensus', name: 'opencensus-impl', version: OPENCENSUS_VERSION\n+    testImplementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'\n+    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'\n+    // Jupiter version is managed by the Spring Boot plugin\n+    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'\n+    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'\n+    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'\n+    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'\n+    testImplementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    // N.B. we can't run test suites in parallel, as two different logging test\n+    // suites (LoggingTest and HumanReadableLoggingTest) both depend on sole\n+    // ownership of the console output. This might be fixed by redirecting\n+    // output to uniquely-named files and reading from there.\n+    maxParallelForks = 1\n+}\n+\n+tasks.withType(Test) {\n+    testLogging {\n+        events = [\n+            \"passed\",\n+            \"failed\",\n+            \"skipped\"\n+        ]\n+        // Causes the correct line to be reported on an exception.\n+        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL\n+        reports {\n+            // Write XML file (used by CircleCI, Jenkins, etc) to build/test-results/*\n+            junitXml.enabled = true\n+            // Write human-readable test report to build/reports/tests/*\n+            html.enabled = true\n+        }\n+    }\n+}\n+\n+// Inspired by https://github.com/spotbugs/spotbugs-gradle-plugin/blob/master/gradle/test.gradle\n+jacoco {\n+    toolVersion = \"0.8.6\"\n+}\n+def jacocoTestReport = tasks.named('jacocoTestReport') {\n+    reports {\n+        xml {\n+            enabled true\n+        }\n+    }\n+}\n+tasks.named('check').configure {\n+    dependsOn jacocoTestReport\n+}"
  },
  {
    "sha": "4cc4ef6b7fee6161b39f5cbbc68648c423a3ebf6",
    "filename": "src/main/java/bio/terra/common/db/DatabaseRetryUtils.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/db/DatabaseRetryUtils.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/db/DatabaseRetryUtils.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/db/DatabaseRetryUtils.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -10,13 +10,13 @@\n import org.springframework.dao.TransientDataAccessException;\n \n /** Utilities to execute database operations with retry support. */\n-public class DatabaseRetryUtils {\n+public final class DatabaseRetryUtils {\n   private static final Logger logger = LoggerFactory.getLogger(DatabaseRetryUtils.class);\n \n   private DatabaseRetryUtils() {}\n \n   /**\n-   * Executes a database operation and retries if retryable.\n+   * Executes a database operation and retries if retryable\n    *\n    * @param execute database operation to execute\n    * @param retrySleep fixed retry sleep interval\n@@ -45,7 +45,7 @@ private DatabaseRetryUtils() {}\n   }\n \n   /**\n-   * Tests an exception to see if it is retryable\n+   * Tests an exception to see if it is retryable.\n    *\n    * @param dataAccessException execption to test\n    * @return {@code true} if that is retryable {@link DataAccessException}."
  },
  {
    "sha": "2a8fae1d54f273c16bd3787d061df8bba3c7f4a3",
    "filename": "src/main/java/bio/terra/common/iam/AuthenticatedUserRequest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 8,
    "changes": 14,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/iam/AuthenticatedUserRequest.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/iam/AuthenticatedUserRequest.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/iam/AuthenticatedUserRequest.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -14,6 +14,12 @@\n   private final String subjectId;\n   private final String token;\n \n+  protected AuthenticatedUserRequest(Builder builder) {\n+    this.email = builder.email;\n+    this.subjectId = builder.subjectId;\n+    this.token = builder.token;\n+  }\n+\n   /**\n    * Returns the email address of the authenticated user, corresponding to the OIDC 'email' claim.\n    */\n@@ -40,8 +46,6 @@ public String getToken() {\n     private String subjectId;\n     private String token;\n \n-    public Builder() {}\n-\n     /** Sets the value for {@link #getEmail()}. */\n     public Builder setEmail(String email) {\n       this.email = email;\n@@ -88,12 +92,6 @@ public Builder toBuilder() {\n     return builder().setEmail(this.email).setSubjectId(this.subjectId).setToken(this.token);\n   }\n \n-  protected AuthenticatedUserRequest(Builder builder) {\n-    this.email = builder.email;\n-    this.subjectId = builder.subjectId;\n-    this.token = builder.token;\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) {"
  },
  {
    "sha": "b4478cc7ce9ebf58efc25d9ac9e04fccd82e99c5",
    "filename": "src/main/java/bio/terra/common/iam/BearerTokenParser.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/iam/BearerTokenParser.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/iam/BearerTokenParser.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/iam/BearerTokenParser.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -6,6 +6,7 @@\n \n /** Utility class for consistently parsing bearer tokens from HTTP Request Authorization headers. */\n public final class BearerTokenParser {\n+\n   /**\n    * Regex to parse bearer token value from authorization header.\n    *\n@@ -15,9 +16,11 @@\n    * reference.\n    * </pre>\n    */\n-  private static final Pattern authorizationPattern =\n+  private static final Pattern AUTHORIZATION_PATTERN =\n       Pattern.compile(\"^Bearer (?<token>[a-zA-Z0-9-._~+/]+=*)$\", Pattern.CASE_INSENSITIVE);\n \n+  private BearerTokenParser() {}\n+\n   /**\n    * Takes the Authorization header passed as a String in {@code authorizationHeader}, parses out\n    * the bearer token payload, and returns it as a String.\n@@ -26,7 +29,7 @@\n    *     cannot be parsed.\n    */\n   public static String parse(String authorizationHeader) {\n-    Matcher matcher = authorizationPattern.matcher(authorizationHeader);\n+    Matcher matcher = AUTHORIZATION_PATTERN.matcher(authorizationHeader);\n     if (!matcher.matches()) {\n       throw new UnauthorizedException(\n           String.format(\"Invalid Authorization header: '%s'\", authorizationHeader));"
  },
  {
    "sha": "ce8c2edc2818c460bd5e9c694e101a9b02fe1362",
    "filename": "src/main/java/bio/terra/common/iam/ProxiedAuthenticatedUserRequestFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/iam/ProxiedAuthenticatedUserRequestFactory.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/iam/ProxiedAuthenticatedUserRequestFactory.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/iam/ProxiedAuthenticatedUserRequestFactory.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -17,6 +17,7 @@\n   static final String OIDC_CLAIM_EMAIL = \"OIDC_CLAIM_email\";\n   static final String OIDC_CLAIM_USER_ID = \"OIDC_CLAIM_user_id\";\n \n+  @Override\n   public AuthenticatedUserRequest from(HttpServletRequest servletRequest) {\n     AuthenticatedUserRequest.Builder builder =\n         AuthenticatedUserRequest.builder()\n@@ -33,7 +34,7 @@ public AuthenticatedUserRequest from(HttpServletRequest servletRequest) {\n         builder.setToken(BearerTokenParser.parse(authHeader));\n       }\n     }\n-    AuthenticatedUserRequest request = null;\n+    AuthenticatedUserRequest request;\n     try {\n       request = builder.build();\n     } catch (final IllegalStateException e) {"
  },
  {
    "sha": "ab48fda5b71a3d20ee35b88a949affd1931c47c5",
    "filename": "src/main/java/bio/terra/common/kubernetes/KubeService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/kubernetes/KubeService.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/kubernetes/KubeService.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/kubernetes/KubeService.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -34,14 +34,14 @@\n     value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\",\n     justification = \"The K8s namespace file is a valid absolute filename\")\n public class KubeService {\n-  private static final Logger logger = LoggerFactory.getLogger(KubeService.class);\n-\n   // Location in the container where Kubernetes stores service account and\n   // namespace information. Kubernetes mints a service account for the container (pod?)\n   // that can be used to make requests of Kubernetes.\n   static final String KUBE_DIR = \"/var/run/secrets/kubernetes.io/serviceaccount\";\n   static final String KUBE_NAMESPACE_FILE = KUBE_DIR + \"/namespace\";\n \n+  private static final Logger logger = LoggerFactory.getLogger(KubeService.class);\n+\n   private final String podName;\n   private final boolean inKubernetes;\n   private final String podNameFilter;"
  },
  {
    "sha": "8f365f3744b7376a5a86ca92eef405a5b0a385c6",
    "filename": "src/main/java/bio/terra/common/logging/GoogleJsonLayout.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/GoogleJsonLayout.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/GoogleJsonLayout.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/logging/GoogleJsonLayout.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -65,9 +65,7 @@\n   // A Logback utility class to assist with handling stack traces.\n   private ThrowableProxyConverter throwableProxyConverter;\n \n-  public GoogleJsonLayout(ConfigurableApplicationContext applicationContext) {\n-    super();\n-\n+  GoogleJsonLayout(ConfigurableApplicationContext applicationContext) {\n     this.applicationContext = applicationContext;\n     this.throwableProxyConverter = new ThrowableProxyConverter();\n     // \"full\" is a magic string used by the TPC to indicate we want a full stack trace, rather\n@@ -98,6 +96,8 @@ public void stop() {\n    * @return the map which should get rendered as JSON\n    */\n   @Override\n+  // System.err.println is OK here, since this is happening from within the logging infra.\n+  @SuppressWarnings(\"PMD.SystemPrintln\")\n   protected Map<String, Object> toJsonMap(ILoggingEvent event) {\n     Map<String, Object> map = new LinkedHashMap<>();\n "
  },
  {
    "sha": "94988904cf1b57d52d2b6c868d438b0231173b67",
    "filename": "src/main/java/bio/terra/common/logging/LoggingConfig.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/LoggingConfig.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/LoggingConfig.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/logging/LoggingConfig.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -1,8 +1,6 @@\n package bio.terra.common.logging;\n \n import javax.annotation.PostConstruct;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -25,8 +23,6 @@\n @Configuration\n public class LoggingConfig {\n \n-  Logger log = LoggerFactory.getLogger(LoggingConfig.class);\n-\n   private ConfigurableApplicationContext applicationContext;\n \n   @Autowired"
  },
  {
    "sha": "e03e54fed809916265deea3b098a2bf77d49c56a",
    "filename": "src/main/java/bio/terra/common/logging/LoggingUtils.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/LoggingUtils.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/LoggingUtils.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/logging/LoggingUtils.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -19,10 +19,12 @@\n  * around providing well-known mechanisms for supplementing logs with structured data that can be\n  * read by Cloud Logging.\n  */\n-public class LoggingUtils {\n+public final class LoggingUtils {\n \n   public static final String TERRA_APPENDER_NAME = \"terra-common\";\n \n+  private LoggingUtils() {}\n+\n   /**\n    * Parses a JSON string and returns a Jackson JsonNode object which can be passed as an argument\n    * for inclusion in JSON logging output.\n@@ -76,6 +78,8 @@ static JsonNode jsonFromString(String s) throws JsonProcessingException {\n    * <p>If the \"human-readable-logging\" Spring profile is active, no changes will be made and the\n    * default Spring logging config (see resources/logback.xml) will be used.\n    */\n+  // System.out.println is OK since this is a message relating to the logging system initialization.\n+  @SuppressWarnings(\"PMD.SystemPrintln\")\n   protected static void initializeLogging(ConfigurableApplicationContext applicationContext) {\n     ch.qos.logback.classic.Logger logbackLogger =\n         (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);"
  },
  {
    "sha": "2041a6fc5b639b38f3502bd8d4618c9b5cca4b50",
    "filename": "src/main/java/bio/terra/common/logging/RequestLoggingFilter.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/RequestLoggingFilter.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/logging/RequestLoggingFilter.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/logging/RequestLoggingFilter.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -44,9 +44,8 @@\n  */\n class RequestLoggingFilter implements Filter {\n \n-  Logger log = LoggerFactory.getLogger(RequestLoggingFilter.class);\n-\n-  static final int MAX_PAYLOAD_TO_DEBUG_LOG = 10000;\n+  private static final Logger log = LoggerFactory.getLogger(RequestLoggingFilter.class);\n+  private static final int MAX_PAYLOAD_TO_DEBUG_LOG = 10000;\n \n   @Override\n   public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n@@ -81,7 +80,7 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n         getGoogleHttpRequestObject(request, response, latency, requestSize, responseSize));\n     logPayload.put(\"requestHeaders\", getRequestHeaders(request));\n \n-    String requestPath = null;\n+    String requestPath;\n     try {\n       URI uri = new URI(request.getRequestURI());\n       requestPath = uri.getPath();"
  },
  {
    "sha": "42332cc1abc90cf4020ff5e5b6b25c3d3ab69a34",
    "filename": "src/main/java/bio/terra/common/stairway/TracingHook.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/DataBiosphere/terra-common-lib/blob/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/stairway/TracingHook.java",
    "raw_url": "https://github.com/DataBiosphere/terra-common-lib/raw/c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b/src/main/java/bio/terra/common/stairway/TracingHook.java",
    "contents_url": "https://api.github.com/repos/DataBiosphere/terra-common-lib/contents/src/main/java/bio/terra/common/stairway/TracingHook.java?ref=c5a9778daa9cf2b5b1d4835a7dec96c4c835f51b",
    "patch": "@@ -46,16 +46,16 @@\n  * @see <a href=\"https://opencensus.io/tracing/\">https://opencensus.io/tracing/</a>\n  */\n public class TracingHook implements StairwayHook {\n-  private final Tracer tracer = Tracing.getTracer();\n+  /** The {@link FlightMap} key for the submission Span's context. */\n+  public static final String SUBMISSION_SPAN_CONTEXT_MAP_KEY = \"opencensusTracingSpanContext\";\n \n   // Prefixes to use for Span names. Standard prefixes make it easier to search for all Spans of\n   // different types.\n   private static final String SUBMISSION_NAME_PREFIX = \"stairway/submission/\";\n   private static final String FLIGHT_NAME_PREFIX = \"stairway/flight/\";\n   private static final String STEP_NAME_PREFIX = \"stairway/step/\";\n \n-  /** The {@link FlightMap} key for the submission Span's context. */\n-  public static final String SUBMISSION_SPAN_CONTEXT_MAP_KEY = \"opencensusTracingSpanContext\";\n+  private final Tracer tracer = Tracing.getTracer();\n \n   /**\n    * Serialize the current Span's {@link SpanContext}. To be used to store a submission Span for the\n@@ -92,7 +92,7 @@ public static void storeCurrentContextAsSubmission(FlightMap inputMap) {\n    * <p>Note that the same Flight may be run multiple times by Stairway.\n    */\n   private class TraceFlightHook implements DynamicHook {\n-    private Scope flightScope = null;\n+    private Scope flightScope;\n \n     @Override\n     public HookAction start(FlightContext flightContext) throws InterruptedException {\n@@ -133,7 +133,7 @@ public HookAction end(FlightContext flightContext) throws InterruptedException {\n \n   /** A {@link DynamicHook} for creating Spans for each Step execution. */\n   private class TraceStepHook implements DynamicHook {\n-    private Scope stepScope = null;\n+    private Scope stepScope;\n \n     @Override\n     public HookAction start(FlightContext flightContext) {"
  }
]
