[
  {
    "sha": "1516e0a7809b8ac25f55bd7c2d1832c14143d5b8",
    "filename": "out/production/StructureData/Les7/Graph.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/Graph.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/Graph.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/Les7/Graph.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "82430dee07539e72948d44ffcff94dedad844d23",
    "filename": "out/production/StructureData/Les7/IGraph.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/IGraph.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/IGraph.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/Les7/IGraph.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "77492c82faf05e309f92dbf094980471fe0b74d8",
    "filename": "out/production/StructureData/Les7/Test7.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/Test7.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/Test7.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/Les7/Test7.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "7757c9a85ad623b7fdafa5e489a48c262903e5fc",
    "filename": "out/production/StructureData/Les7/Vertex.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/Vertex.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/Les7/Vertex.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/Les7/Vertex.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "bdd113cf062555a7dc2ffe0d9a8ad9297601f240",
    "filename": "out/production/StructureData/les5/AnagramApp.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/AnagramApp.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/AnagramApp.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les5/AnagramApp.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "7765ee846c31146a96a855ddcc24efb8be44129d",
    "filename": "out/production/StructureData/les5/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/Main.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/Main.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les5/Main.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "85e175a30c9994de6266a02a52939b65df1d1c54",
    "filename": "out/production/StructureData/les5/SearchMaxCount.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/SearchMaxCount.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/SearchMaxCount.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les5/SearchMaxCount.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "cb3bf12aa2060841dd3dd0dc95d4954cbb941bc9",
    "filename": "out/production/StructureData/les5/ThingForTheBag.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/ThingForTheBag.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les5/ThingForTheBag.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les5/ThingForTheBag.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "2d4671520dfc8b847956f08aa8a8d58bcebb20c5",
    "filename": "out/production/StructureData/les8/ChainingHashMap$Node.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les8/ChainingHashMap$Node.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les8/ChainingHashMap$Node.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les8/ChainingHashMap$Node.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "2996517eff039f7c2baf8a72c964d0b23103d176",
    "filename": "out/production/StructureData/les8/ChainingHashMap.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les8/ChainingHashMap.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les8/ChainingHashMap.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les8/ChainingHashMap.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "dda8f715f8382614cfc019491d3fe84fe7636ef4",
    "filename": "out/production/StructureData/les8/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les8/Main.class",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/out/production/StructureData/les8/Main.class",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/out/production/StructureData/les8/Main.class?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41"
  },
  {
    "sha": "c48cdcfbdaa8ba72a50be8e84b64754c12740c5f",
    "filename": "src/Les7/Graph.java",
    "status": "added",
    "additions": 210,
    "deletions": 0,
    "changes": 210,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/Graph.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/Graph.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/Les7/Graph.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,210 @@\n+package Les7;\n+\n+import java.util.*;\n+\n+public class Graph implements IGraph {\n+\n+    private final List<Vertex> vertexList;\n+    private final boolean[][] adjMat;\n+\n+    public Graph(int maxVertexCount) {\n+        this.vertexList = new ArrayList<>(maxVertexCount);\n+        this.adjMat = new boolean[maxVertexCount][maxVertexCount];\n+    }\n+\n+    @Override\n+    public void addVertex(String label) {\n+        vertexList.add(new Vertex(label));\n+    }\n+\n+    @Override\n+    public void addEdge(String startLabel, String endLabel) {\n+        int startIndex  = indexOf(startLabel);\n+        int endIndex    = indexOf(endLabel);\n+\n+        if (startIndex == -1 || endIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid label for vertex\");\n+        }\n+\n+        adjMat[startIndex][endIndex] = true;\n+        adjMat[endIndex][startIndex] = true;\n+    }\n+\n+    @Override\n+    public void addEdges(String startLabel, String secondLabel, String... others) {\n+        addEdge(startLabel, secondLabel);\n+        for (String other : others) {\n+            addEdge(startLabel, other);\n+        }\n+    }\n+\n+    private int indexOf(String startLabel) {\n+        for (int index = 0; index < getSize(); index++) {\n+            if (vertexList.get(index).getLabel().equals(startLabel)) {\n+                return index;\n+            }\n+        }\n+\n+        return -1;\n+    }\n+\n+    @Override\n+    public int getSize() {\n+        return vertexList.size();\n+    }\n+\n+    @Override\n+    public void display() {\n+        for (int i = 0; i < getSize(); i++) {\n+            System.out.print(vertexList.get(i));\n+            for (int j = 0; j < getSize(); j++) {\n+                if (adjMat[i][j]) {\n+                    System.out.print(\" -> \" + vertexList.get(j));\n+                }\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    @Override\n+    public void dfs(String startLabel) {\n+        int startIndex = indexOf(startLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+\n+        Stack<Vertex> stack = new Stack<>();\n+        Vertex vertex = vertexList.get(startIndex);\n+\n+        visitVertex(stack, vertex);\n+        while (!stack.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(stack.peek());\n+            if (vertex != null) {\n+                visitVertex(stack, vertex);\n+            } else {\n+                stack.pop();\n+            }\n+        }\n+\n+        resetVertexState();\n+    }\n+\n+    @Override\n+    public void bfs(String startLabel) {\n+        int startIndex = indexOf(startLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid start label\");\n+        }\n+\n+        Queue<Vertex> queue = new LinkedList<>();\n+        Vertex vertex = vertexList.get(startIndex);\n+\n+        visitVertex(queue, vertex);\n+        while (!queue.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(queue.peek());\n+            if (vertex != null) {\n+                visitVertex(queue, vertex);\n+            } else {\n+                queue.remove();\n+            }\n+        }\n+\n+        resetVertexState();\n+    }\n+\n+    @Override\n+    public List<Stack<String>> findShortPathViaBfs(String startLabel, String finishLabel) {\n+        int startIndex = indexOf(startLabel);\n+        int finishIndex = indexOf(finishLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid startLabel: \" + startLabel);\n+        }\n+        if (finishIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid finishLabel: \" + finishLabel);\n+        }\n+\n+        Queue<Vertex> queue = new ArrayDeque<>();\n+\n+        Vertex vertex = vertexList.get(startIndex);\n+        visitVertex(queue, vertex);\n+\n+        List<Stack<String>> result = new ArrayList<>();\n+        Vertex finishVertex = null;\n+\n+        while (!queue.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(queue.peek());\n+            if (vertex == null) {\n+                if (finishVertex != null) {\n+                    finishVertex.setVisited(false);\n+                }\n+                queue.remove();\n+            } else {\n+                visitVertex(queue, vertex);\n+                vertex.setPreviousVertex(queue.peek());\n+                if (vertex.getLabel().equals(finishLabel)) {\n+                    result.add(buildPath(vertex));\n+                    finishVertex = vertex;\n+                }\n+            }\n+        }\n+\n+        resetVertexState();\n+        return result;\n+    }\n+\n+    private void resetVertexState() {\n+        for (Vertex vertex : vertexList) {\n+            vertex.setVisited(false);\n+        }\n+    }\n+\n+    private Vertex getNearUnvisitedVertex(Vertex current) {\n+        int currentIndex = vertexList.indexOf(current);\n+        for (int i = 0; i < getSize(); i++) {\n+            if (adjMat[currentIndex][i] && !vertexList.get(i).isVisited()) {\n+                return vertexList.get(i);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void visitVertex(Stack<Vertex> stack, Vertex vertex) {\n+        System.out.println(vertex);\n+        vertex.setVisited(true);\n+        stack.push(vertex);\n+    }\n+    private void visitVertex(Queue<Vertex> queue, Vertex vertex) {\n+        System.out.println(vertex);\n+        vertex.setVisited(true);\n+        queue.add(vertex);\n+    }\n+\n+    private Stack<String> buildPath(Vertex vertex) {\n+        Stack<String> stack = new Stack<>();\n+        Vertex current = vertex;\n+        while (current != null) {\n+            stack.push(current.getLabel());\n+            current = current.getPreviousVertex();\n+        }\n+\n+        return stack;\n+    }\n+\n+    public void printZavis(){\n+        for (int i = 0; i < adjMat.length; i++) {\n+            for (int j = 0; j < adjMat[i].length; j++) {\n+                if(adjMat[i][j] == false && i != j){\n+                    System.out.print(\"\\u001B[34m\"+adjMat[i][j]+ \" \"+\"\\u001B[0m\");\n+                } else if (i == j){\n+                    System.out.print(\"\\u001B[31m\"+adjMat[i][j]+ \" \"+\"\\u001B[0m\");\n+                }\n+                else {\n+                    System.out.print(adjMat[i][j]+ \"  \");\n+                }\n+\n+            }\n+            System.out.println();\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "ce6124ab30e37b2d24193196c4cd559167e7c12b",
    "filename": "src/Les7/IGraph.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/IGraph.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/IGraph.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/Les7/IGraph.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,29 @@\n+package Les7;\n+\n+import java.util.List;\n+import java.util.Stack;\n+\n+public interface IGraph {\n+\n+    void addVertex(String label);\n+\n+    void addEdge(String startLabel, String endLabel);\n+\n+    void addEdges(String startLabel, String secondLabel, String... others);\n+\n+    int getSize();\n+\n+    void display();\n+\n+    /**\n+     * англ. Depth-first search, DFS\n+     */\n+    void dfs(String startLabel);\n+\n+    /**\n+     * англ. breadth-first search, BFS\n+     */\n+    void bfs(String startLabel);\n+\n+    List<Stack<String>> findShortPathViaBfs(String startLabel, String finishLabel);\n+}"
  },
  {
    "sha": "e358a2efa992a13623f821adbb7c5c160fd6f9b5",
    "filename": "src/Les7/Test7.java",
    "status": "added",
    "additions": 116,
    "deletions": 0,
    "changes": 116,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/Test7.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/Test7.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/Les7/Test7.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,116 @@\n+package Les7;\n+\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class Test7 {\n+\n+    public static void main(String[] args) {\n+//        testGraph();\n+//        testDfs();\n+//       testBfs();\n+        homeWork();\n+    }\n+\n+    private static void homeWork() {\n+        Graph graph = new Graph(11);\n+        graph.addVertex(\"Москва\");\n+        graph.addVertex(\"Тула\");\n+        graph.addVertex(\"Рязань\");\n+        graph.addVertex(\"Калуга\");\n+        graph.addVertex(\"Липецк\");\n+        graph.addVertex(\"Тамбов\");\n+        graph.addVertex(\"Орел\");\n+        graph.addVertex(\"Саратов\");\n+        graph.addVertex(\"Курск\");\n+        graph.addVertex(\"Воронеж\");\n+        graph.addVertex(\"!!\");\n+\n+        graph.addEdges(\"Москва\", \"Тула\", \"Рязань\", \"Калуга\");\n+        graph.addEdges(\"Тула\", \"Липецк\");\n+        graph.addEdges( \"Липецк\", \"Воронеж\");\n+        graph.addEdges(\"Рязань\", \"Тамбов\");\n+        graph.addEdges(\"Тамбов\", \"Саратов\");\n+//        graph.addEdges( \"Саратов\", \"Воронеж\");\n+        graph.addEdges(\"Калуга\", \"Орел\");\n+        graph.addEdges( \"Орел\", \"Курск\");\n+        graph.addEdges( \"Курск\", \"Воронеж\");\n+\n+        graph.printZavis();\n+\n+        for (Stack<String> path : graph.findShortPathViaBfs(\"Москва\", \"Воронеж\")) {\n+            System.out.println(\"\\n The shortest path:\");\n+            showShortPath(path);\n+        };\n+    }\n+\n+    private static void showShortPath(Stack<String> path) {\n+        StringBuilder sb = new StringBuilder();\n+        boolean isFirst = true;\n+\n+        while ( !path.isEmpty() ) {\n+            if (!isFirst) {\n+                sb.append(\" -> \");\n+            }\n+            isFirst = false;\n+            sb.append(path.pop());\n+        }\n+\n+        System.out.println(sb);\n+    }\n+\n+    private static void testGraph() {\n+        IGraph graph = new Graph(4);\n+        graph.addVertex(\"A\");\n+        graph.addVertex(\"B\");\n+        graph.addVertex(\"C\");\n+        graph.addVertex(\"D\");\n+\n+        graph.addEdges(\"A\", \"B\", \"C\");\n+        graph.addEdges(\"B\", \"A\", \"C\", \"D\");\n+        graph.addEdges(\"C\", \"A\", \"B\", \"D\");\n+        graph.addEdges(\"D\", \"B\", \"C\");\n+\n+        System.out.println(\"Size of graph is \" + graph.getSize());\n+        graph.display();\n+    }\n+\n+    private static void testDfs() {\n+        Graph graph = new Graph(7);\n+        graph.addVertex(\"A\");\n+        graph.addVertex(\"B\");\n+        graph.addVertex(\"C\");\n+        graph.addVertex(\"D\");\n+        graph.addVertex(\"E\");\n+        graph.addVertex(\"F\");\n+        graph.addVertex(\"G\");\n+\n+        graph.addEdges(\"A\", \"B\", \"C\", \"D\");\n+        graph.addEdges(\"B\", \"E\");\n+        graph.addEdges(\"D\", \"F\");\n+        graph.addEdges(\"F\", \"G\");\n+\n+        graph.dfs(\"A\");\n+        //A B E C D F G\n+    }\n+\n+    private static void testBfs() {\n+        Graph graph = new Graph(8);\n+        graph.addVertex(\"A\");\n+        graph.addVertex(\"B\");\n+        graph.addVertex(\"C\");\n+        graph.addVertex(\"D\");\n+        graph.addVertex(\"E\");\n+        graph.addVertex(\"F\");\n+        graph.addVertex(\"G\");\n+        graph.addVertex(\"H\");\n+\n+        graph.addEdges(\"A\", \"B\", \"C\", \"D\");\n+        graph.addEdges(\"B\", \"E\");\n+        graph.addEdges(\"E\", \"H\");\n+        graph.addEdges(\"C\", \"F\");\n+        graph.addEdges(\"D\", \"G\");\n+\n+        graph.bfs(\"A\");\n+    }\n+}"
  },
  {
    "sha": "5cea32f9196526a283404e3a1d7819721bf61227",
    "filename": "src/Les7/Vertex.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/Vertex.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/Les7/Vertex.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/Les7/Vertex.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,54 @@\n+package Les7;\n+\n+import java.util.Objects;\n+\n+public class Vertex {\n+\n+    private final String label;\n+    private boolean isVisited;\n+    private Vertex previousVertex;\n+\n+    public Vertex(String label) {\n+        this.label = label;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public boolean isVisited() {\n+        return isVisited;\n+    }\n+\n+    public void setVisited(boolean visited) {\n+        isVisited = visited;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Vertex vertex = (Vertex) o;\n+        return Objects.equals(label, vertex.label);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(label);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Vertex{\" +\n+                \"label='\" + label + '\\'' +\n+                '}';\n+    }\n+\n+    public void setPreviousVertex(Vertex previousVertex) {\n+        this.previousVertex = previousVertex;\n+    }\n+\n+    public Vertex getPreviousVertex() {\n+        return previousVertex;\n+    }\n+}"
  },
  {
    "sha": "6d13de3e629c8d21ab48219a41774d117726202c",
    "filename": "src/les5/AnagramApp.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/AnagramApp.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/AnagramApp.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/les5/AnagramApp.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,75 @@\n+package les5;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Scanner;\n+\n+public class AnagramApp {\n+    int size;\n+    int count;\n+    char[] arr;\n+\n+    public void scanWord(){\n+        Scanner scanner = new Scanner(System.in);\n+        String input = scanner.nextLine();\n+        arr = new char[input.length()];\n+        size = input.length();\n+        count = 0;\n+        for(int i=0;i<size;i++){\n+            arr[i] = input.charAt(i);\n+        }\n+        getAnagramm(size);\n+    }\n+\n+    public void scanWord(String str){\n+        String input = str;\n+        arr = new char[input.length()];\n+        size = input.length();\n+        count = 0;\n+        for(int i=0;i<size;i++){\n+            arr[i] = input.charAt(i);\n+        }\n+        getAnagramm(size);\n+    }\n+\n+    public void getAnagramm(int newSize){\n+        if (newSize == 1)\n+            return;\n+        for (int i=0;i<newSize;i++){\n+            getAnagramm(newSize-1);\n+            if (newSize == 2)\n+                display();\n+            rotate(newSize);\n+        }\n+    }\n+\n+    public void rotate(int newSize){\n+        int i;\n+        int pos = size - newSize;\n+        char temp = arr[pos];\n+        for (i=pos+1;i<size;i++){\n+            arr[i-1] = arr[i];\n+        }\n+        arr[i-1] = temp;\n+    }\n+\n+    public void display(){\n+        for(int i=0; i<size; i++){\n+            System.out.print(arr[i]);\n+        }\n+        System.out.println(\"\");\n+    }\n+\n+    public String getString(){\n+        InputStreamReader isr = new InputStreamReader(System.in);\n+        BufferedReader br = new BufferedReader(isr);\n+        try {\n+            return br.readLine();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+\n+}"
  },
  {
    "sha": "b6ff477278d81b4e3b3e7127bb4e5a781facc865",
    "filename": "src/les5/Main.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/Main.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/Main.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/les5/Main.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,76 @@\n+package les5;\n+\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+\n+public class Main {\n+    final ThingForTheBag aa1 = new ThingForTheBag(\"m-416\",3,20);\n+    final ThingForTheBag aa2 = new ThingForTheBag(\"ак-74\",4,15);\n+    final ThingForTheBag aa3 = new ThingForTheBag(\"desert eagle\",1,7);\n+    final ThingForTheBag aa4 = new ThingForTheBag(\"awm\", 7,50);\n+    final ThingForTheBag aa5 = new ThingForTheBag(\"explosion package\", 2,30);\n+\n+    final ThingForTheBag[] thing = {aa1, aa2, aa3, aa4, aa5};\n+    final int w = 11;\n+    //final int w = 7;\n+\n+    public static void main(String[] args) {\n+        //System.out.println(exponentiation(5 , 5));\n+        Main m = new Main();\n+        //m.thing();\n+        m.searh();\n+\n+    }\n+\n+    public void searh(){\n+        SearchMaxCount searchMaxCount = new SearchMaxCount(thing, w);\n+    }\n+\n+    public void thing() {\n+        //сортировка O(N * log(N))\n+        Arrays.sort(thing, Comparator.comparingDouble(ThingForTheBag::valuePerUNitofWeigth).reversed());\n+        System.out.println(Arrays.toString(thing));\n+        int weihtSoFar = 0;\n+        double valueSofar = 0;\n+        int currentItem = 0;\n+        while (currentItem < thing.length && weihtSoFar != w ){\n+            if (weihtSoFar + thing[currentItem].getWeight() < w){\n+                //берем объект целиком\n+\n+                valueSofar += thing[currentItem].getPrice();\n+                weihtSoFar += thing[currentItem].getWeight();\n+            } else {\n+                //берем только часть объекта\n+                valueSofar += (w - weihtSoFar) / (double) thing[currentItem].getWeight()\n+                        * thing[currentItem].getPrice();\n+                weihtSoFar = w; // полный рюкзак\n+            }\n+            currentItem++;\n+        }\n+        System.out.println(\"ценность наилучшего набора:\" + valueSofar);\n+    }\n+\n+    public static double exponentiation(double digit, int rank) {\n+        if(digit == 0){\n+            if(rank > 0){\n+                return 0;\n+            } else {\n+                try {\n+                    throw new IllegalAccessException();\n+                } catch (IllegalAccessException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        if(rank < 0 ){\n+            return 1 / (digit * exponentiation(digit, -rank-1));\n+        } else if (rank > 0) {\n+            return digit * exponentiation(digit, rank-1);\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "e4ee047c120a4b924eea8c9e11d79ac477235d71",
    "filename": "src/les5/SearchMaxCount.java",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/SearchMaxCount.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/SearchMaxCount.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/les5/SearchMaxCount.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,108 @@\n+package les5;\n+\n+public class SearchMaxCount {\n+    ThingForTheBag[] rr;\n+    int maxWeig;\n+    int size;\n+    int index = 0;\n+    ThingForTheBag[][] arr;\n+    ThingForTheBag[] maxCombo;\n+    int maxComboWeig;\n+    int maxComboCount;\n+\n+    public SearchMaxCount(ThingForTheBag[] rr, int maxWeig) {\n+        this.rr = rr;\n+        this.maxWeig = maxWeig;\n+        maxCombo = new ThingForTheBag[rr.length];\n+        size = rr.length;\n+        this.arr = new ThingForTheBag [toFactorial(this.rr.length)][this.rr.length];\n+        getAnagramm(rr.length);\n+        searchCombo(0,0);\n+    }\n+\n+    private void searchCombo(int i, int newSize) {\n+        int weigth = 0;\n+        int count = 0;\n+        if (i >= arr.length){\n+            return;\n+        }\n+        for (int j = 0; j < arr[i].length-newSize; j++) {\n+            weigth += arr[i][j].getWeight();\n+            count += arr[i][j].getPrice();\n+            System.out.println(arr[i][j].toString());\n+                /*if(count >= maxComboWeig && weigth <= maxWeig){\n+                    System.out.println(arr[i][j].toString());\n+                }*/\n+        }\n+        if(count < maxComboCount) {\n+            maxComboCount = count;\n+        }\n+        System.out.println(\"-------------------------------------------------------\");\n+        if (weigth > maxWeig){\n+            searchCombo(i,newSize + 1);\n+        } else if (count < maxComboCount) {\n+            searchCombo(i + 1,newSize);\n+        }\n+        /*System.out.println(weigth+\" - \"+ count);\n+        System.out.println(\"------------------------------------------------------------\");\n+        if(weigth > maxWeig) {\n+            searchCombo(i + 1,newSize + 1);\n+        }\n+        if (count >= maxComboWeig){\n+            maxComboWeig = count;\n+            System.out.println(\"----\");\n+            System.out.println(maxComboWeig);\n+            System.out.println(\"----\");\n+        }*/\n+        /*weigth = 0;\n+        count = 0;*/\n+    }\n+\n+\n+    public void getAnagramm(int newSize){\n+        if (newSize == 1)\n+            return;\n+        for (int i=0; i<newSize; i++){\n+            getAnagramm(newSize-1);\n+            if (newSize == 2){\n+                toSaveArray();\n+                display();\n+            }\n+            rotate(newSize);\n+        }\n+    }\n+\n+    public void rotate(int newSize){\n+        int i;\n+        int pos = size - newSize;\n+        ThingForTheBag temp = rr[pos];\n+        for (i=pos+1; i<size; i++){\n+            rr[i-1] = rr[i];\n+        }\n+        rr[i-1] = temp;\n+    }\n+\n+    public void toSaveArray(){\n+        for(int i=0; i<size; i++){\n+            arr[index][i] = rr[i];\n+        }\n+        index++;\n+    }\n+\n+    public void display(){\n+        for(int i=0; i<size; i++){\n+            //System.out.print(rr[i].toString());\n+        }\n+        //System.out.println(\"\");\n+    }\n+\n+\n+    public int toFactorial(int value){\n+        if(value < 0){\n+            return 0;\n+        } else if (value == 0){\n+            return 1;\n+        }\n+        return value * toFactorial(value-1);\n+    }\n+}"
  },
  {
    "sha": "e6f185aaa7f5384c5574442be4dd934deb0d2a84",
    "filename": "src/les5/ThingForTheBag.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/ThingForTheBag.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les5/ThingForTheBag.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/les5/ThingForTheBag.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,34 @@\n+package les5;\n+\n+public class ThingForTheBag {\n+    private String name;\n+    private int weight;\n+    private int price;\n+\n+    public ThingForTheBag(String name, int weight, int price) {\n+        this.weight = weight;\n+        this.price = price;\n+        this.name = name;\n+    }\n+\n+    public int getWeight() {\n+        return weight;\n+    }\n+\n+    public int getPrice() {\n+        return price;\n+    }\n+\n+    public double valuePerUNitofWeigth(){\n+        return price / (double) weight;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"T{\" +\n+                \"n:'\" + name + '\\'' +\n+                \", w:\" + weight +\n+                \", p:\" + price +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "41b4552561dd0f4f02a00e9a1992d7ea32332e6c",
    "filename": "src/les8/ChainingHashMap.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les8/ChainingHashMap.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les8/ChainingHashMap.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/les8/ChainingHashMap.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,104 @@\n+package les8;\n+\n+import java.util.LinkedList;\n+\n+public class ChainingHashMap<Key, Value> {\n+    private int capacity = 7;\n+    private int size = 0;\n+    private LinkedList<Node>[] st;\n+\n+    ChainingHashMap() {\n+        st = new LinkedList[capacity];\n+        for (int i = 0; i < st.length; i++) {\n+            st[i] = new LinkedList<>();\n+        }\n+    }\n+\n+    private class Node {\n+        Key key;\n+        Value value;\n+\n+        Node(Key key, Value value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+    public boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    private int hash(Key key) {\n+        return (key.hashCode() & 0x7fffffff) % capacity;\n+    }\n+\n+    private boolean isKeyNotNull(Key key) {\n+        if (key == null) {\n+            throw new IllegalArgumentException(\"Key null\");\n+        }\n+        return true;\n+    }\n+\n+    public boolean contains(Key key){\n+        return get(key) != null;\n+    }\n+\n+    void put(Key key, Value value) {\n+        isKeyNotNull(key);\n+        int i = hash(key);\n+        for (Node node : st[i]) {\n+            if (key.equals(node.key)) {\n+                node.value = value;\n+                return;\n+            }\n+        }\n+        st[i].addLast(new Node(key, value));\n+        size++;\n+    }\n+\n+    Value get(Key key) {\n+        isKeyNotNull(key);\n+        int i = hash(key);\n+        for (Node node : st[i]) {\n+            if (key.equals(node.key)) {\n+                return node.value;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    Value delete(Key key) {\n+        isKeyNotNull(key);\n+        int i = hash(key);\n+        for (int j = 0; j < st[i].size(); j++) {\n+            if (key.equals(st[i].get(j).key)) {\n+                Node temp = st[i].get(j);\n+                st[i].remove(st[i].get(j));\n+                size--;\n+                return temp.value;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"-=Chain=-\\n\");\n+        for (int i = 0; i < capacity; i++) {\n+            sb.append(i).append(\": [\");\n+            for (int j = 0; j < st[i].size(); j++) {\n+                sb.append(st[i].get(j).key);\n+                if(j != st[i].size() - 1){\n+                    sb.append(\", \");\n+                }\n+            }\n+            sb.append(\"]\\n\");\n+        }\n+        return sb.toString();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "76c3678318feaa54f3f2e4e9a1f77c928f5277b7",
    "filename": "src/les8/Main.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Adbistju/data_structures/blob/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les8/Main.java",
    "raw_url": "https://github.com/Adbistju/data_structures/raw/16c2cec5654c8d014bb8ad642fd6e33d2af7bf41/src/les8/Main.java",
    "contents_url": "https://api.github.com/repos/Adbistju/data_structures/contents/src/les8/Main.java?ref=16c2cec5654c8d014bb8ad642fd6e33d2af7bf41",
    "patch": "@@ -0,0 +1,28 @@\n+package les8;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        ChainingHashMap<Integer , String> map = new ChainingHashMap<>();\n+\n+        for (int i = 0; i < 10; i++) {\n+            map.put(i,\"\"+i+\"\");\n+            map.put(i*2,\"\"+(i+i)+\"\");\n+        }\n+\n+        System.out.println(map.toString());\n+        for (int i = 0; i < 30; i++) {\n+            System.out.print(\"map.get(\"+i+\"): \" + map.get(i)+\" ::: \");\n+            if(i % 5 == 3){\n+                System.out.println();\n+            }\n+        }\n+        System.out.println();\n+\n+\n+\n+        System.out.println(\"map.delete(1): \" + map.delete(1));\n+        System.out.println(\"map.delete(1) again: \" + map.delete(1));\n+        System.out.println();\n+        System.out.println(map);\n+    }\n+}\n\\ No newline at end of file"
  }
]
