[
  {
    "sha": "72c495748c75d6d61ff352265abeedec5eb5e7f0",
    "filename": "src/lesson6/.gitignore",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/.gitignore",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/.gitignore",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/.gitignore?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,96 @@\n+# Created by .ignore support plugin (hsz.mobi)\n+### JetBrains template\n+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n+\n+# User-specific stuff\n+.idea/**/workspace.xml\n+.idea/**/tasks.xml\n+.idea/**/usage.statistics.xml\n+.idea/**/dictionaries\n+.idea/**/shelf\n+\n+# Generated files\n+.idea/**/contentModel.xml\n+\n+# Sensitive or high-churn files\n+.idea/**/dataSources/\n+.idea/**/dataSources.ids\n+.idea/**/dataSources.local.xml\n+.idea/**/sqlDataSources.xml\n+.idea/**/dynamic.xml\n+.idea/**/uiDesigner.xml\n+.idea/**/dbnavigator.xml\n+\n+# Gradle\n+.idea/**/gradle.xml\n+.idea/**/libraries\n+\n+# Gradle and Maven with auto-import\n+# When using Gradle or Maven with auto-import, you should exclude module files,\n+# since they will be recreated, and may cause churn.  Uncomment if using\n+# auto-import.\n+# .idea/modules.xml\n+# .idea/*.iml\n+# .idea/modules\n+# *.iml\n+# *.ipr\n+\n+# CMake\n+cmake-build-*/\n+\n+# Mongo Explorer plugin\n+.idea/**/mongoSettings.xml\n+\n+# File-based project format\n+*.iws\n+\n+# IntelliJ\n+out/\n+\n+# mpeltonen/sbt-idea plugin\n+.idea_modules/\n+\n+# JIRA plugin\n+atlassian-ide-plugin.xml\n+\n+# Cursive Clojure plugin\n+.idea/replstate.xml\n+\n+# Crashlytics plugin (for Android Studio and IntelliJ)\n+com_crashlytics_export_strings.xml\n+crashlytics.properties\n+crashlytics-build.properties\n+fabric.properties\n+\n+# Editor-based Rest Client\n+.idea/httpRequests\n+\n+# Android studio 3.1+ serialized cache file\n+.idea/caches/build_file_checksums.ser\n+\n+### Java template\n+# Compiled class file\n+*.class\n+\n+# Log file\n+*.log\n+\n+# BlueJ files\n+*.ctxt\n+\n+# Mobile Tools for Java (J2ME)\n+.mtj.tmp/\n+\n+# Package Files #\n+*.jar\n+*.war\n+*.nar\n+*.ear\n+*.zip\n+*.tar.gz\n+*.rar\n+\n+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\n+hs_err_pid*\n+*.iml"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "src/lesson6/hiber.sql",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/hiber.sql",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/hiber.sql",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/hiber.sql?ref=50f8a55fd8d50f398166b41a77440970b1d955fe"
  },
  {
    "sha": "f5ad980a4744615fe5bed762fd5955b945bea760",
    "filename": "src/lesson6/pom.xml",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/pom.xml",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/pom.xml",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/pom.xml?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>groupId</groupId>\n+    <artifactId>main</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <build>\n+        <finalName>main</finalName>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>8</source>\n+                    <target>8</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.wildfly.plugins</groupId>\n+                <artifactId>wildfly-maven-plugin</artifactId>\n+                <version>2.0.1.Final</version>\n+            </plugin>\n+        </plugins>\n+\n+        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\n+            <plugins>\n+                <plugin>\n+                    <artifactId>maven-clean-plugin</artifactId>\n+                    <version>3.1.0</version>\n+                </plugin>\n+                <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\n+                <plugin>\n+                    <artifactId>maven-resources-plugin</artifactId>\n+                    <version>3.0.2</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <version>3.8.0</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <version>2.22.1</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-war-plugin</artifactId>\n+                    <version>3.2.2</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-install-plugin</artifactId>\n+                    <version>2.5.2</version>\n+                </plugin>\n+                <plugin>\n+                    <artifactId>maven-deploy-plugin</artifactId>\n+                    <version>2.8.2</version>\n+                </plugin>\n+            </plugins>\n+        </pluginManagement>\n+\n+    </build>\n+\n+    <dependencies>\n+        <!-- https://mvnrepository.com/artifact/postgresql/postgresql -->\n+        <dependency>\n+            <groupId>postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>9.1-901-1.jdbc4</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-core</artifactId>\n+            <version>5.4.4.Final</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>42.2.5</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+            <version>5.4.3.Final</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.el</groupId>\n+            <artifactId>javax.el-api</artifactId>\n+            <version>2.2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.glassfish.web</groupId>\n+            <artifactId>javax.el</artifactId>\n+            <version>2.2.4</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>javax.servlet-api</artifactId>\n+            <version>3.1.0</version>\n+            <scope>provided</scope>\n+        </dependency>\n+    </dependencies>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "df09896dd413638e79782b3d71aa33a749e52a2b",
    "filename": "src/lesson6/src/main/java/com/hibernate/HibernateConfig.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/HibernateConfig.java",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/HibernateConfig.java",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/java/com/hibernate/HibernateConfig.java?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,40 @@\n+package com.hibernate;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.stream.Collectors;\n+\n+public class HibernateConfig {\n+\n+    public static void forcePrepareData() {\n+        SessionFactory factory = new Configuration()\n+                .configure(\"hibernate.cfg.xml\")\n+                .buildSessionFactory();\n+        Session session = null;\n+        try {\n+            String sql = Files.lines(Paths.get(\"hiber.sql\")).collect(Collectors.joining(\" \"));\n+            session = factory.getCurrentSession();\n+            session.beginTransaction();\n+            session.createNativeQuery(sql).executeUpdate();\n+            session.getTransaction().commit();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } finally {\n+            factory.close();\n+            if (session != null) {\n+                session.close();\n+            }\n+        }\n+    }\n+\n+    public static SessionFactory getSessionFactory() {\n+        return new Configuration()\n+                .configure(\"hibernate.cfg.xml\")\n+                .buildSessionFactory();\n+    }\n+}"
  },
  {
    "sha": "5f1c2bfcabea7529f562db4922c64f6debd269d7",
    "filename": "src/lesson6/src/main/java/com/hibernate/HibernatePlayground.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/HibernatePlayground.java",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/HibernatePlayground.java",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/java/com/hibernate/HibernatePlayground.java?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,29 @@\n+package com.hibernate;\n+\n+import com.hibernate.dao.StudentDAO;\n+import com.hibernate.entities.Student;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import static com.hibernate.HibernateConfig.getSessionFactory;\n+\n+public class HibernatePlayground {\n+\n+    final String lexicon = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+\n+    private final static java.util.Random rand = new java.util.Random();\n+\n+    public static void main(String[] args) {\n+\n+        StudentDAO studentDAO = new StudentDAO();\n+\n+        for (int i = 0; i <= 1000; i++) {\n+            Student student = new Student(\"Ivan\" + i, rand.nextInt((5 - 1) + 1) + 1);\n+            studentDAO.createNewStudent(student);\n+        }\n+\n+\n+    }\n+\n+\n+}"
  },
  {
    "sha": "10f29bbdc583720a4263e17bf69b9a13efd7a9fd",
    "filename": "src/lesson6/src/main/java/com/hibernate/dao/StudentDAO.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/dao/StudentDAO.java",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/dao/StudentDAO.java",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/java/com/hibernate/dao/StudentDAO.java?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,81 @@\n+package com.hibernate.dao;\n+\n+import com.hibernate.entities.Student;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import static com.hibernate.HibernateConfig.getSessionFactory;\n+\n+public class StudentDAO {\n+\n+    private SessionFactory sessionFactory;\n+    private Session session;\n+\n+    public StudentDAO() {\n+        sessionFactory = getSessionFactory();\n+    }\n+\n+    public void createNewStudent(Student student) {\n+        try {\n+            session = sessionFactory.getCurrentSession();\n+            session.beginTransaction();\n+            session.save(student);\n+            session.getTransaction().commit();\n+        } finally {\n+            sessionFactory.close();\n+            if (session != null) {\n+                session.close();\n+            }\n+        }\n+    }\n+\n+    public Student getStudentFromDbById(Long id) {\n+        try {\n+            session = sessionFactory.getCurrentSession();\n+            session.beginTransaction();\n+            Student studentFromDb = session.get(Student.class, id);\n+            session.getTransaction().commit();\n+            return studentFromDb;\n+        } finally {\n+            sessionFactory.close();\n+            if (session != null) {\n+                session.close();\n+            }\n+        }\n+    }\n+\n+    public void deleteStudent(Long id) {\n+\n+        try {\n+            session = sessionFactory.getCurrentSession();\n+            session.beginTransaction();\n+            session.delete(session.get(Student.class, id));\n+            session.getTransaction().commit();\n+        } finally {\n+            sessionFactory.close();\n+            if (session != null) {\n+                session.close();\n+            }\n+        }\n+    }\n+\n+    public void updateStudent(Long id, String name, int mark) {\n+\n+        try {\n+            session = sessionFactory.getCurrentSession();\n+            session.beginTransaction();\n+            Student student = session.createQuery(\"SELECT s FROM Student s WHERE s.id = :id\", Student.class)\n+                    .setParameter(\"id\", id)\n+                    .getSingleResult();\n+            student.setName(name);\n+            student.setMark(mark);\n+            session.getTransaction().commit();\n+        } finally {\n+            sessionFactory.close();\n+            if (session != null) {\n+                session.close();\n+            }\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "02b8e901b216ff1d3638237ef0ab355c4d7badd4",
    "filename": "src/lesson6/src/main/java/com/hibernate/entities/Student.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/entities/Student.java",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/hibernate/entities/Student.java",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/java/com/hibernate/entities/Student.java?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,50 @@\n+package com.hibernate.entities;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name = \"students\")\n+public class Student {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"mark\")\n+    private int mark;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getMark() {\n+        return mark;\n+    }\n+\n+    public void setMark(int mark) {\n+        this.mark = mark;\n+    }\n+\n+    public Student(String name, int mark) {\n+        this.name = name;\n+        this.mark = mark;\n+    }\n+\n+    public Student() {}\n+}"
  },
  {
    "sha": "64adb18de5ae39bddfb5764f9160078d00dc06c0",
    "filename": "src/lesson6/src/main/java/com/jdbc/JDBCApp.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/jdbc/JDBCApp.java",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/jdbc/JDBCApp.java",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/java/com/jdbc/JDBCApp.java?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,27 @@\n+package com.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+public class JDBCApp {\n+    private static Connection con;\n+    private static Statement stmt;\n+\n+    public static void connect() throws ClassNotFoundException, SQLException {\n+        Class.forName(\"org.postgresql.Driver\");\n+        con = DriverManager.getConnection(\"jdbc:postgresql://localhost:5432/kinotheater\", \"postgres\", \"920007\");\n+        stmt = con.createStatement();\n+    }\n+\n+    public static void main(String[] args) {\n+        try {\n+            connect();\n+        } catch (SQLException e) {\n+\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "23426a81a65060268f3b328a0562a4fa96e6d80a",
    "filename": "src/lesson6/src/main/java/com/servlets/HelloWorldServlet.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/servlets/HelloWorldServlet.java",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/java/com/servlets/HelloWorldServlet.java",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/java/com/servlets/HelloWorldServlet.java?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,17 @@\n+package com.servlets;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+@WebServlet(\"/hello\")\n+public class HelloWorldServlet extends HttpServlet {\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        resp.getWriter().println(\"<h1>Hello World</h1>\");\n+    }\n+}"
  },
  {
    "sha": "b3c723b724aee903289e1a6130adf805fc74ca39",
    "filename": "src/lesson6/src/main/resources/hibernate.cfg.xml",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/resources/hibernate.cfg.xml",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/resources/hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/resources/hibernate.cfg.xml?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,17 @@\n+<!DOCTYPE hibernate-configuration PUBLIC\n+        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\n+\n+<hibernate-configuration>\n+    <session-factory>\n+        <property name=\"connection.driver_class\">org.postgresql.Driver</property>\n+        <property name=\"connection.url\">jdbc:postgresql://localhost:5432/postgres?currentSchema=hiber</property>\n+        <property name=\"connection.username\">postgres</property>\n+        <property name=\"connection.password\">root</property>\n+        <property name=\"connection.pool_size\">8</property>\n+        <property name=\"dialect\">org.hibernate.dialect.PostgreSQL94Dialect</property>\n+        <property name=\"show_sql\">true</property>\n+        <property name=\"current_session_context_class\">thread</property>\n+        <mapping class=\"com.hibernate.entities.Student\"/>\n+    </session-factory>\n+</hibernate-configuration>\n\\ No newline at end of file"
  },
  {
    "sha": "a405d5c98362bbd3fd3888a2aed6f3fdd1b9a8c2",
    "filename": "src/lesson6/src/main/resources/sql/script.sql",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/resources/sql/script.sql",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/resources/sql/script.sql",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/resources/sql/script.sql?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,110 @@\n+DROP TABLE IF EXISTS films CASCADE;\n+CREATE TABLE films\n+(\n+    id       SERIAL,\n+    title    VARCHAR(50) NOT NULL,\n+    duration INTEGER     NOT NULL,\n+    PRIMARY KEY (id)\n+);\n+\n+DROP TABLE IF EXISTS tickets CASCADE;\n+CREATE TABLE tickets\n+(\n+    id         SERIAL,\n+    num        INTEGER NOT NULL,\n+    session_id INTEGER NOT NULL,\n+    PRIMARY KEY (id),\n+    CONSTRAINT FK_SESSIONS_ID FOREIGN KEY (session_id)\n+        REFERENCES sessions (id)\n+        ON DELETE NO ACTION ON UPDATE NO ACTION\n+\n+);\n+\n+\n+DROP TABLE IF EXISTS sessions CASCADE;\n+CREATE TABLE sessions\n+(\n+    id         SERIAL,\n+    film_id    INTEGER   NOT NULL,\n+    cost       INTEGER   NOT NULL,\n+    start_time TIMESTAMP WITH TIME ZONE NOT NULL,\n+    PRIMARY KEY (id),\n+    CONSTRAINT FK_FILM_ID_SESSION FOREIGN KEY (film_id)\n+        REFERENCES films (id)\n+        ON DELETE NO ACTION ON UPDATE NO ACTION\n+);\n+\n+\n+INSERT INTO films(title, duration)\n+VALUES ('Web', 60),\n+       ('Net', 90),\n+       ('Bed or Good', 120),\n+       ('Hug all', 90);\n+\n+\n+INSERT INTO sessions(film_id, cost, start_time)\n+VALUES (1, 100, '2019-10-08 07:00:00'),\n+       (1, 200, '2019-10-08 12:00:00'),\n+       (1, 350, '2019-10-08 18:00:00'),\n+       (2, 150, '2019-10-08 08:00:00'),\n+       (2, 250, '2019-10-08 13:00:00'),\n+       (2, 450, '2019-10-08 19:00:00'),\n+       (3, 120, '2019-10-08 09:00:00'),\n+       (3, 270, '2019-10-08 12:30:00'),\n+       (3, 320, '2019-10-08 18:45:00'),\n+       (3, 570, '2019-10-08 23:45:00'),\n+       (4, 270, '2019-10-08 10:15:00'),\n+       (4, 470, '2019-10-08 15:50:00'),\n+       (4, 670, '2019-10-08 20:50:00'),\n+       (4, 970, '2019-10-08 23:59:00');\n+\n+\n+INSERT INTO tickets(num, session_id)\n+VALUES (23, 1),\n+       (43, 1),\n+       (24, 1),\n+       (55, 2),\n+       (32, 3),\n+       (11, 1),\n+       (14, 5),\n+       (45, 8),\n+       (59, 9),\n+       (17, 13),\n+       (99, 14),\n+       (187, 14),\n+       (87, 12),\n+       (98, 10),\n+       (88, 9),\n+       (66, 7),\n+       (77, 10);\n+\n+\n+SELECT *\n+FROM films;\n+SELECT *\n+FROM tickets;\n+SELECT *\n+FROM sessions;\n+\n+SELECT films.title,\n+       sessions.start_time,\n+       films.duration,\n+       (LEAD(films.title) OVER (ORDER BY sessions.start_time)) as      next_film,\n+       (LEAD(sessions.start_time) OVER (ORDER BY sessions.start_time)) next_film_start,\n+       (LEAD(films.duration) OVER (ORDER BY sessions.start_time))      next_film_duration\n+FROM sessions,\n+     films\n+WHERE films.id = sessions.film_id\n+ORDER BY sessions.start_time;\n+\n+SELECT f.title,\n+       s.start_time,\n+       f.duration,\n+       (LEAD(s.start_time) OVER (ORDER BY s.start_time)) as                   next_film_start,\n+       (LEAD(s.start_time) OVER (ORDER BY s.start_time) - s.start_time)::TIME duration_of_breaks\n+FROM films as f,\n+     sessions as s\n+WHERE s.film_id = f.id\n+ORDER BY duration_of_breaks DESC;\n+\n+"
  },
  {
    "sha": "bb2557c013240ef45c8535fb775a6a8934836269",
    "filename": "src/lesson6/src/main/webapp/WEB-INF/web.xml",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/webapp/WEB-INF/web.xml",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/src/main/webapp/WEB-INF/web.xml",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/src/main/webapp/WEB-INF/web.xml?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE web-app PUBLIC\n+        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n+        \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n+\n+<web-app version=\"4.0\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n+   http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\">\n+    <display-name>Archetype Created Web Application</display-name>\n+\n+</web-app>\n\\ No newline at end of file"
  },
  {
    "sha": "f01ebbfc76059526ca05e8f59592a1699db13093",
    "filename": "src/lesson6/target/classes/sql/script.sql",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/1t0XX/com.geekbrains/blob/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/target/classes/sql/script.sql",
    "raw_url": "https://github.com/1t0XX/com.geekbrains/raw/50f8a55fd8d50f398166b41a77440970b1d955fe/src/lesson6/target/classes/sql/script.sql",
    "contents_url": "https://api.github.com/repos/1t0XX/com.geekbrains/contents/src/lesson6/target/classes/sql/script.sql?ref=50f8a55fd8d50f398166b41a77440970b1d955fe",
    "patch": "@@ -0,0 +1 @@\n+CREATE DATABASE kinotheater;\n\\ No newline at end of file"
  }
]
