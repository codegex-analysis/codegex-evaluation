[
  {
    "sha": "0567a4090bc1ed0b1ce53bf0c198556e2c1c3cc9",
    "filename": "integration/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/integration/pom.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/integration/pom.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/integration/pom.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -24,7 +24,7 @@\n   <parent>\n     <artifactId>task-management-parent</artifactId>\n     <groupId>org.exoplatform.addons.task</groupId>\n-    <version>3.2.x-SNAPSHOT</version>\n+    <version>3.2.x-tasks-SNAPSHOT</version>\n   </parent>\n   <artifactId>task-management-integration</artifactId>\n   <packaging>jar</packaging>"
  },
  {
    "sha": "3eb9bfb7f368d123b645e7310047867e64fe4014",
    "filename": "packaging/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/packaging/pom.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/packaging/pom.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/packaging/pom.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -24,7 +24,7 @@\n   <parent>\n     <artifactId>task-management-parent</artifactId>\n     <groupId>org.exoplatform.addons.task</groupId>\n-    <version>3.2.x-SNAPSHOT</version>\n+    <version>3.2.x-tasks-SNAPSHOT</version>\n   </parent>\n   <artifactId>task-management-packaging</artifactId>\n   <packaging>pom</packaging>"
  },
  {
    "sha": "0918f03f41902d4f7b07673b69de1c6fdd23da27",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/pom.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/pom.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/pom.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -28,7 +28,7 @@\n   </parent>\n   <groupId>org.exoplatform.addons.task</groupId>\n   <artifactId>task-management-parent</artifactId>\n-  <version>3.2.x-SNAPSHOT</version>\n+  <version>3.2.x-tasks-SNAPSHOT</version>\n   <packaging>pom</packaging>\n   <name>eXo Add-on:: Task management</name>\n   <description>Task management add-on</description>\n@@ -46,7 +46,7 @@\n   </scm>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <org.exoplatform.social.version>6.2.x-SNAPSHOT</org.exoplatform.social.version>\n+    <org.exoplatform.social.version>6.2.x-tasks-SNAPSHOT</org.exoplatform.social.version>\n     <addon.exo.gamification.version>2.2.x-SNAPSHOT</addon.exo.gamification.version>\n     <org.juzu.version>1.2.x-SNAPSHOT</org.juzu.version>\n     <org.antlr.version>3.4</org.antlr.version>"
  },
  {
    "sha": "a15b12e74963c1c571e79cc88936ddea0c3aaf48",
    "filename": "services/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/pom.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/pom.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/pom.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -24,7 +24,7 @@\n   <parent>\n     <artifactId>task-management-parent</artifactId>\n     <groupId>org.exoplatform.addons.task</groupId>\n-    <version>3.2.x-SNAPSHOT</version>\n+    <version>3.2.x-tasks-SNAPSHOT</version>\n   </parent>\n   <artifactId>task-management-services</artifactId>\n   <packaging>jar</packaging>"
  },
  {
    "sha": "32a50ebc381055c6fe0c9a11062b81034e68119d",
    "filename": "services/src/main/java/org/exoplatform/task/dao/LabelHandler.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/LabelHandler.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/LabelHandler.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/dao/LabelHandler.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -27,7 +27,9 @@\n    */\n   ListAccess<Label> findLabelsByUser(String username);\n   \n-  ListAccess<Label> findLabelsByTask(long taskId, String username);\n+  ListAccess<Label> findLabelsByProject(long projectId);\n+\n+  ListAccess<Label> findLabelsByTask(long taskId, long projectId);\n \n   ListAccess<Label> findLabels(LabelQuery query);\n }"
  },
  {
    "sha": "bb67e28582d1f2af7cda1c988a82d1381c848fc5",
    "filename": "services/src/main/java/org/exoplatform/task/dao/LabelTaskMappingHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/LabelTaskMappingHandler.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/LabelTaskMappingHandler.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/dao/LabelTaskMappingHandler.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -21,6 +21,7 @@\n import org.exoplatform.commons.api.persistence.GenericDAO;\n import org.exoplatform.task.domain.LabelTaskMapping;\n \n-public interface LabelTaskMappingHandler extends GenericDAO<LabelTaskMapping, Serializable> {  \n+public interface LabelTaskMappingHandler extends GenericDAO<LabelTaskMapping, Serializable> {\n+    LabelTaskMapping findLabelTaskMapping(long labelId, long taskId);\n }\n "
  },
  {
    "sha": "22787a2999e8ae359b5f39f9bfc819ce47055cf3",
    "filename": "services/src/main/java/org/exoplatform/task/dao/jpa/LabelDAOImpl.java",
    "status": "modified",
    "additions": 15,
    "deletions": 5,
    "changes": 20,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/jpa/LabelDAOImpl.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/jpa/LabelDAOImpl.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/dao/jpa/LabelDAOImpl.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -41,7 +41,7 @@ public void delete(Label entity) {\n         delete(child);\n       }\n     }\n-    super.delete(entity);    \n+    super.delete(entity);\n   }\n \n   @Override\n@@ -64,13 +64,23 @@ public void deleteAll() {\n   }\n \n   @Override\n-  public ListAccess<Label> findLabelsByTask(long taskId, String username) {\n+  public ListAccess<Label> findLabelsByProject(long projectId) {\n+    TypedQuery<Label> query = getEntityManager().createNamedQuery(\"Label.findLabelsByProject\", Label.class);\n+    query.setParameter(\"projectId\", projectId);\n+\n+    TypedQuery<Long> count = getEntityManager().createNamedQuery(\"Label.findLabelsByProjectCount\", Long.class);\n+    count.setParameter(\"projectId\", projectId);\n+    return new JPAQueryListAccess<Label>(Label.class, count, query);\n+  }\n+\n+  @Override\n+  public ListAccess<Label> findLabelsByTask(long taskId, long projectId) {\n     TypedQuery<Label> query = getEntityManager().createNamedQuery(\"Label.findLabelsByTask\", Label.class);\n-    query.setParameter(\"username\", username);\n+    query.setParameter(\"projectId\", projectId);\n     query.setParameter(\"taskid\", taskId);\n-    \n+\n     TypedQuery<Long> count = getEntityManager().createNamedQuery(\"Label.findLabelsByTaskCount\", Long.class);\n-    count.setParameter(\"username\", username);\n+    count.setParameter(\"projectId\", projectId);\n     count.setParameter(\"taskid\", taskId);\n     return new JPAQueryListAccess<Label>(Label.class, count, query);\n   }"
  },
  {
    "sha": "28460e8652b082d4b4e97154be93136aacffa058",
    "filename": "services/src/main/java/org/exoplatform/task/dao/jpa/LabelTaskMappingDAOImpl.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/jpa/LabelTaskMappingDAOImpl.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dao/jpa/LabelTaskMappingDAOImpl.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/dao/jpa/LabelTaskMappingDAOImpl.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -17,10 +17,35 @@\n package org.exoplatform.task.dao.jpa;\n \n import java.io.Serializable;\n+import java.util.List;\n \n+import org.exoplatform.commons.utils.ListAccess;\n+import org.exoplatform.services.log.ExoLogger;\n+import org.exoplatform.services.log.Log;\n import org.exoplatform.task.dao.LabelTaskMappingHandler;\n+import org.exoplatform.task.domain.Label;\n import org.exoplatform.task.domain.LabelTaskMapping;\n+import org.exoplatform.task.domain.Task;\n+\n+import javax.persistence.PersistenceException;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n \n public class LabelTaskMappingDAOImpl extends CommonJPADAO<LabelTaskMapping, Serializable> implements LabelTaskMappingHandler {\n+\n+    private static final Log log = ExoLogger.getExoLogger(LabelTaskMappingDAOImpl.class);\n+\n+    @Override\n+    public LabelTaskMapping findLabelTaskMapping(long labelId, long taskId) {\n+        TypedQuery<LabelTaskMapping> query = getEntityManager().createNamedQuery(\"LabelTaskMapping.findLabelMapping\", LabelTaskMapping.class);\n+        query.setParameter(\"labelId\", labelId);\n+        query.setParameter(\"taskId\", taskId);\n+        try {\n+            return cloneEntity((LabelTaskMapping)query.getSingleResult());\n+        } catch (PersistenceException e) {\n+            log.error(\"Error when fetching label mapping\", e);\n+            return null;\n+        }\n+    }\n }\n "
  },
  {
    "sha": "2193c46834c6c812fc90fbc6a7599f348d8e0e3f",
    "filename": "services/src/main/java/org/exoplatform/task/domain/Label.java",
    "status": "modified",
    "additions": 24,
    "deletions": 4,
    "changes": 28,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/domain/Label.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/domain/Label.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/domain/Label.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -32,9 +32,13 @@\n @Table(name = \"TASK_LABELS\")\n @NamedQueries({  \n   @NamedQuery(name = \"Label.findLabelsByTask\",\n-      query = \"SELECT lbl FROM TaskLabel lbl inner join lbl.lblMapping m WHERE lbl.username = :username AND m.task.id = :taskid\"),\n+      query = \"SELECT lbl FROM TaskLabel lbl inner join lbl.lblMapping m WHERE lbl.project.id = :projectId AND m.task.id = :taskid\"),\n       @NamedQuery(name = \"Label.findLabelsByTaskCount\",\n-      query = \"SELECT count(*) FROM TaskLabel lbl inner join lbl.lblMapping m WHERE lbl.username = :username AND m.task.id = :taskid\")\n+      query = \"SELECT count(*) FROM TaskLabel lbl inner join lbl.lblMapping m WHERE lbl.project.id = :projectId AND m.task.id = :taskid\"),\n+  @NamedQuery(name = \"Label.findLabelsByProject\",\n+      query = \"SELECT lbl FROM TaskLabel lbl WHERE lbl.project.id = :projectId\"),\n+      @NamedQuery(name = \"Label.findLabelsByProjectCount\",\n+      query = \"SELECT count(*) FROM TaskLabel lbl WHERE lbl.project.id = :projectId\")\n })\n public class Label {\n   @Id\n@@ -67,12 +71,18 @@\n   @OneToMany(mappedBy = \"label\", fetch=FetchType.LAZY)\n   private Set<LabelTaskMapping> lblMapping = new HashSet<LabelTaskMapping>();\n \n+  @ManyToOne\n+  @JoinColumn(name = \"PROJECT_ID\")\n+  private Project project;\n+\n   public Label() {\n   }\n \n-  public Label(String name, String username) {\n+  public Label(String name, String username, Project project) {\n     this.name = name;\n     this.username = username;\n+    this.username = username;\n+    this.project = project;\n   }\n \n   public long getId() {\n@@ -123,12 +133,22 @@ public void setUsername(String username) {\n     this.username = username;\n   }\n \n+  public Project getProject() {\n+    return project;\n+  }\n+\n+  public void setProject(Project project) {\n+    this.project = project;\n+  }\n+\n   public boolean isHidden() {\n     return hidden;\n   }\n \n   public void setHidden(boolean hidden) {\n     this.hidden = hidden;\n-  }  \n+  }\n+\n+\n   \n }"
  },
  {
    "sha": "dd908adc0fb061bfe67586256aa56e555b215652",
    "filename": "services/src/main/java/org/exoplatform/task/domain/LabelTaskMapping.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/domain/LabelTaskMapping.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/domain/LabelTaskMapping.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/domain/LabelTaskMapping.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -36,7 +36,9 @@\n @Table(name = \"TASK_LABEL_TASK\")\n @NamedQueries({  \n   @NamedQuery(name = \"LabelTaskMapping.removeLabelTaskMapping\",\n-      query = \"DELETE FROM TaskLabelTaskMapping m WHERE m.label.id = :labelId\")\n+      query = \"DELETE FROM TaskLabelTaskMapping m WHERE m.label.id = :labelId\"),\n+  @NamedQuery(name = \"LabelTaskMapping.findLabelMapping\",\n+       query = \"SELECT m FROM TaskLabelTaskMapping m  WHERE m.label.id = :labelId and  m.task.id = :taskId\")\n })\n public class LabelTaskMapping implements Serializable {\n   @Id"
  },
  {
    "sha": "521a62640286c49ed3eaabdf0f73dfaf579bb473",
    "filename": "services/src/main/java/org/exoplatform/task/domain/Project.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/domain/Project.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/domain/Project.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/domain/Project.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -132,6 +132,11 @@\n   private Set<UserSetting> hiddenOn = new HashSet<UserSetting>();\n \n \n+  // This field is used for remove cascade\n+  @ManyToMany(mappedBy = \"project\", fetch = FetchType.LAZY)\n+  private Set<Label> lebels = new HashSet<Label>();\n+\n+\n   @Column(name = \"LAST_MODIFIED_DATE\")\n   private Long lastModifiedDate;\n "
  },
  {
    "sha": "1000ecd93d838f969a1146462a4cda7a6dcc0743",
    "filename": "services/src/main/java/org/exoplatform/task/dto/LabelDto.java",
    "status": "modified",
    "additions": 4,
    "deletions": 36,
    "changes": 40,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dto/LabelDto.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/dto/LabelDto.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/dto/LabelDto.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -20,18 +20,14 @@\n \n     private boolean hidden;\n \n+    private boolean canEdit;\n+\n     private LabelDto parent;\n \n+    private ProjectDto project;\n+\n     private List<LabelDto> children;\n \n-    public LabelDto(Label label){\n-        this.id = label.getId();\n-        this.username = label.getUsername();\n-        this.name = label.getName();\n-        this.color = label.getColor();\n-        this.hidden = label.isHidden();\n-        this.parent = labelToDto(label.getParent());\n-    }\n \n     public LabelDto getParent() {\n         return parent;\n@@ -44,32 +40,4 @@ public void setParent(LabelDto parent) {\n             this.parent = parent;\n         }\n     }\n-\n-    public static LabelDto labelToDto(Label label) {\n-        if(label==null){\n-            return null;\n-        }\n-        LabelDto labelDto = new LabelDto(label);\n-        labelDto.setId(label.getId());\n-        labelDto.setUsername(label.getUsername());\n-        labelDto.setName(label.getName());\n-        labelDto.setColor(label.getColor());\n-        labelDto.setHidden(label.isHidden());\n-        labelDto.setParent(labelToDto(label.getParent()));\n-        return labelDto;\n-    }\n-\n-    public static Label labelToEntity(LabelDto labelDto) {\n-        if(labelDto==null){\n-            return null;\n-        }\n-        Label label = new Label();\n-        label.setId(labelDto.getId());\n-        label.setUsername(labelDto.getUsername());\n-        label.setName(labelDto.getName());\n-        label.setColor(labelDto.getColor());\n-        label.setHidden(labelDto.isHidden());\n-        label.setParent(labelToEntity(labelDto.getParent()));\n-        return label;\n-    }\n }"
  },
  {
    "sha": "dfc7f2a6ae9fa5109d36da589ff26a1d90b4e9a0",
    "filename": "services/src/main/java/org/exoplatform/task/rest/TaskRestService.java",
    "status": "modified",
    "additions": 57,
    "deletions": 12,
    "changes": 69,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/rest/TaskRestService.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/rest/TaskRestService.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/rest/TaskRestService.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -124,7 +124,8 @@ public Response getTasks(@ApiParam(value = \"Type of task to get (all, incoming,\n                            @ApiParam(value = \"Returning All Details\", defaultValue = \"false\") @QueryParam(\"returnDetails\") boolean returnDetails) {\n \n       try {\n-      String currentUser = ConversationState.getCurrent().getIdentity().getUserId();\n+      Identity currentId = ConversationState.getCurrent().getIdentity();\n+      String currentUser = currentId.getUserId();\n \n     long tasksSize;\n     List<TaskDto> tasks = null;\n@@ -173,7 +174,7 @@ public Response getTasks(@ApiParam(value = \"Type of task to get (all, incoming,\n       tasks = taskService.findTasks(currentUser, query, limit);\n       tasksSize = taskService.countTasks(currentUser, query);\n     }\n-        return Response.ok(new PaginatedTaskList(tasks.stream().map(task -> getTaskDetails((TaskDto) task, currentUser)).collect(Collectors.toList()),tasksSize)).build();\n+        return Response.ok(new PaginatedTaskList(tasks.stream().map(task -> getTaskDetails((TaskDto) task, currentId)).collect(Collectors.toList()),tasksSize)).build();\n   } catch (Exception e) {\n     LOG.error(\"Can't Gets uncompleted tasks of the authenticated user\", e);\n     return Response.serverError().entity(e.getMessage()).build();\n@@ -273,10 +274,10 @@ public Response filterTasks(@ApiParam(value = \"Type of task to get (all, incomin\n \n     Map<GroupKey, List<TaskEntity>> groupTasks = new HashMap<GroupKey, List<TaskEntity>>();\n     if (groupBy != null && groupBy!= TaskUtil.DUEDATE && !groupBy.isEmpty() && !TaskUtil.NONE.equalsIgnoreCase(groupBy)) {\n-      groupTasks = TaskUtil.groupTasks(tasks.getListTasks().stream().map(task -> getTaskDetails((TaskDto) task, currentUser)).collect(Collectors.toList()), groupBy, currentUser, userTimezone, labelService, userService);\n+      groupTasks = TaskUtil.groupTasks(tasks.getListTasks().stream().map(task -> getTaskDetails((TaskDto) task, currIdentity)).collect(Collectors.toList()), groupBy, currIdentity, userTimezone, labelService, userService);\n       return Response.ok(new FiltreTaskList(groupTasks)).build();\n     }\n-    return Response.ok(new PaginatedTaskList(tasks.getListTasks().stream().map(task -> getTaskDetails((TaskDto) task, currentUser)).collect(Collectors.toList()),tasks.getTasksSize())).build();\n+    return Response.ok(new PaginatedTaskList(tasks.getListTasks().stream().map(task -> getTaskDetails((TaskDto) task, currIdentity)).collect(Collectors.toList()),tasks.getTasksSize())).build();\n   } catch (Exception e) {\n         LOG.error(\"Can't filter Tasks\", e);\n         return Response.serverError().entity(e.getMessage()).build();\n@@ -296,7 +297,7 @@ public Response getTasksByProjectId(@ApiParam(value = \"Id\", required = true, def\n                                       @ApiParam(value = \"Returning the number of tasks or not\", defaultValue = \"false\") @QueryParam(\"returnSize\") boolean returnSize,\n                                       @ApiParam(value = \"Returning All Details\", defaultValue = \"false\") @QueryParam(\"returnDetails\") boolean returnDetails) {\n     try {\n-    String currentUser = ConversationState.getCurrent().getIdentity().getUserId();\n+    Identity currentUser = ConversationState.getCurrent().getIdentity();\n     ProjectDto project = projectService.getProject(id);\n     if (project==null || !project.canView(ConversationState.getCurrent().getIdentity())) {\n       return Response.status(Response.Status.UNAUTHORIZED).build();\n@@ -481,6 +482,28 @@ public Response getLabels() {\n         return Response.serverError().entity(e.getMessage()).build();\n         }\n   }\n+  @GET\n+  @Path(\"labels/project/{id}\")\n+  @RolesAllowed(\"users\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Gets labels of the given project\", httpMethod = \"GET\", response = Response.class, notes = \"This returns labels of the given project\")\n+  @ApiResponses(value = { @ApiResponse(code = 200, message = \"Request fulfilled\") })\n+  public Response getLabelsByProjectId(@ApiParam(value = \"project id\", required = true) @PathParam(\"id\") long id) {\n+    try {\n+      Identity currentUser = ConversationState.getCurrent().getIdentity();\n+      ProjectDto project = projectService.getProject(id);\n+      if (project == null) {\n+        return Response.status(Response.Status.NOT_FOUND).build();\n+      }\n+      if (!project.canView(currentUser)) {\n+        return Response.status(Response.Status.FORBIDDEN).build();\n+      }\n+    return Response.ok(labelService.findLabelsByProject(id, currentUser,0, -1)).build();\n+        } catch (Exception e) {\n+        LOG.error(\"Can't get Labels\", e);\n+        return Response.serverError().entity(e.getMessage()).build();\n+        }\n+  }\n \n   @GET\n   @Path(\"labels/{id}\")\n@@ -491,8 +514,16 @@ public Response getLabels() {\n       @ApiResponse(code = 500, message = \"Internal server error\") })\n   public Response getLabelsByTaskId(@ApiParam(value = \"Task id\", required = true) @PathParam(\"id\") long id) {\n     try {\n-    String currentUser = ConversationState.getCurrent().getIdentity().getUserId();\n-    return Response.ok(labelService.findLabelsByTask(id, currentUser, 0, -1)).build();\n+    Identity currentUser = ConversationState.getCurrent().getIdentity();\n+      TaskDto task = taskService.getTask(id);\n+      if (task == null) {\n+        return Response.status(Response.Status.NOT_FOUND).build();\n+      }\n+    List<LabelDto> labels = new ArrayList<>();\n+    if(task.getStatus()!=null && task.getStatus().getProject()!=null){\n+      labels = labelService.findLabelsByTask(task, task.getStatus().getProject().getId(), currentUser,0, -1);\n+    }\n+    return Response.ok(labels).build();\n         } catch (Exception e) {\n         LOG.error(\"Can't get Labels By TaskId {}\", id, e);\n         return Response.serverError().entity(e.getMessage()).build();\n@@ -509,7 +540,7 @@ public Response getLabelsByTaskId(@ApiParam(value = \"Task id\", required = true)\n   public Response addTaskToLabel(@ApiParam(value = \"label\", required = true) LabelDto addedLabel,\n                                  @ApiParam(value = \"Task id\", required = true) @PathParam(\"id\") long id) {\n     try {\n-    String currentUser = ConversationState.getCurrent().getIdentity().getUserId();\n+    Identity currentUser = ConversationState.getCurrent().getIdentity();\n     if (addedLabel == null) {\n       return Response.status(Response.Status.BAD_REQUEST).build();\n     }\n@@ -520,8 +551,21 @@ public Response addTaskToLabel(@ApiParam(value = \"label\", required = true) Label\n     if (!TaskUtil.hasEditPermission(taskService,task)) {\n       return Response.status(Response.Status.FORBIDDEN).build();\n     }\n+      try {\n+        ProjectDto project = projectService.getProject(task.getStatus().getProject().getId());\n+        if (project == null) {\n+          return Response.status(Response.Status.NOT_FOUND).build();\n+        }\n+        if (!project.canView(currentUser)) {\n+          return Response.status(Response.Status.FORBIDDEN).build();\n+        }\n+        addedLabel.setProject(project);\n+      }catch (Exception e) {\n+        return Response.status(Response.Status.BAD_REQUEST).build();\n+      }\n     if (addedLabel.getId() == 0) {// Create a new label and add a task to it\n-      addedLabel.setUsername(currentUser);\n+\n+      addedLabel.setUsername(currentUser.getUserId());\n       LabelDto label = labelService.createLabel(addedLabel);\n       labelService.addTaskToLabel(task, label.getId());\n     } else {// Add a task to an existing label\n@@ -537,6 +581,7 @@ public Response addTaskToLabel(@ApiParam(value = \"label\", required = true) Label\n   @DELETE\n   @Path(\"labels/{id}/{labelId}\")\n   @RolesAllowed(\"users\")\n+  @Produces(MediaType.APPLICATION_JSON)\n   @ApiOperation(value = \"Deletes a specific task association to a specific label\", httpMethod = \"DELETE\", response = Response.class, notes = \"This deletes a specific task association to a specific label\")\n   @ApiResponses(value = { @ApiResponse(code = 200, message = \"Request fulfilled\"),\n       @ApiResponse(code = 403, message = \"Unauthorized operation\"), @ApiResponse(code = 404, message = \"Resource not found\") })\n@@ -555,7 +600,7 @@ public Response removeTaskFromLabel(@ApiParam(value = \"label id\", required = tru\n       return Response.status(Response.Status.FORBIDDEN).build();\n     }\n     labelService.removeTaskFromLabel(task, labelId);\n-    return Response.ok(label).build();\n+    return Response.ok().build();\n         } catch (Exception e) {\n         LOG.error(\"Can't remove Task {} From Label {}\", id, labelId, e);\n         return Response.serverError().entity(e.getMessage()).build();\n@@ -802,7 +847,7 @@ private CommentEntity addCommentModel(CommentDto comment, List<CommentEntity> co\n   }\n \n \n-  private TaskEntity getTaskDetails(TaskDto task, String userName) {\n+  private TaskEntity getTaskDetails(TaskDto task, Identity userIdentity) {\n \n     long taskId = task.getId();\n     int commentCount;\n@@ -814,7 +859,7 @@ private TaskEntity getTaskDetails(TaskDto task, String userName) {\n     }\n     List<LabelDto> labels = new ArrayList<>();\n     try {\n-      labels = labelService.findLabelsByTask(taskId, userName, 0, -1);\n+      labels = labelService.findLabelsByTask(task, task.getStatus().getProject().getId(), userIdentity,0, -1);\n     } catch (Exception e) {\n       LOG.warn(\"Error retrieving task '{}' labels\", taskId, e);\n     }"
  },
  {
    "sha": "f6de04429d2602dafe522b696658b48b439c13cb",
    "filename": "services/src/main/java/org/exoplatform/task/service/LabelService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/service/LabelService.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/service/LabelService.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/service/LabelService.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -2,6 +2,7 @@\n \n import java.util.List;\n \n+import org.exoplatform.services.security.Identity;\n import org.exoplatform.task.domain.Label;\n import org.exoplatform.task.dto.LabelDto;\n import org.exoplatform.task.dto.TaskDto;\n@@ -10,7 +11,9 @@\n public interface LabelService {\n   List<LabelDto> findLabelsByUser(String username, int offset, int limit);\n \n-  List<LabelDto> findLabelsByTask(long taskId, String username, int offset, int limit);\n+  List<LabelDto> findLabelsByProject(long projectId, Identity currentUser, int offset, int limit);\n+\n+  List<LabelDto> findLabelsByTask(TaskDto task, long projectId, Identity currentUser, int offset, int limit);\n \n   LabelDto getLabel(long labelId);\n "
  },
  {
    "sha": "c67569410f96d6b6aa21f16f32855b3cc561ec24",
    "filename": "services/src/main/java/org/exoplatform/task/service/impl/LabelServiceImpl.java",
    "status": "modified",
    "additions": 15,
    "deletions": 6,
    "changes": 21,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/service/impl/LabelServiceImpl.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/service/impl/LabelServiceImpl.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/service/impl/LabelServiceImpl.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -2,6 +2,7 @@\n \n import org.exoplatform.commons.api.persistence.ExoTransactional;\n import org.exoplatform.services.listener.ListenerService;\n+import org.exoplatform.services.security.Identity;\n import org.exoplatform.task.dao.DAOHandler;\n import org.exoplatform.task.domain.Label;\n import org.exoplatform.task.domain.LabelTaskMapping;\n@@ -10,6 +11,7 @@\n import org.exoplatform.task.exception.EntityNotFoundException;\n import org.exoplatform.task.service.LabelService;\n import org.exoplatform.task.storage.LabelStorage;\n+import org.exoplatform.task.storage.ProjectStorage;\n import org.exoplatform.task.util.StorageUtil;\n \n import javax.inject.Inject;\n@@ -23,11 +25,15 @@\n     @Inject\n     private LabelStorage labelStorage;\n \n+    @Inject\n+    private ProjectStorage projectStorage;\n+\n     private ListenerService listenerService;\n \n-    public LabelServiceImpl(LabelStorage labelStorage,  DAOHandler daoHandler) {\n+    public LabelServiceImpl(LabelStorage labelStorage,  DAOHandler daoHandler, ProjectStorage projectStorage) {\n         this.labelStorage = labelStorage;\n         this.daoHandler = daoHandler;\n+        this.projectStorage = projectStorage;\n     }\n \n \n@@ -37,8 +43,13 @@ public LabelServiceImpl(LabelStorage labelStorage,  DAOHandler daoHandler) {\n     }\n \n     @Override\n-    public List<LabelDto> findLabelsByTask(long taskId, String username, int offset, int limit) {\n-        return labelStorage.findLabelsByTask(taskId, username,offset,limit);\n+    public List<LabelDto> findLabelsByProject(long projectId, Identity currentUser, int offset, int limit) {\n+        return labelStorage.findLabelsByProject(projectId,  currentUser,projectStorage, offset,limit);\n+    }\n+\n+    @Override\n+    public List<LabelDto> findLabelsByTask(TaskDto task, long projectId, Identity currentUser, int offset, int limit) {\n+        return labelStorage.findLabelsByTask(task, projectId,currentUser,projectStorage,offset,limit);\n     }\n \n     @Override\n@@ -98,9 +109,7 @@ public void addTaskToLabel(TaskDto task, Long labelId) throws EntityNotFoundExce\n     @Override\n     @ExoTransactional\n     public void removeTaskFromLabel(TaskDto task, Long labelId) throws EntityNotFoundException {\n-        LabelTaskMapping mapping = new LabelTaskMapping();\n-        mapping.setLabel(StorageUtil.mappingLabelToEntity(getLabel(labelId)));\n-        mapping.setTask(StorageUtil.taskToEntity(task));\n+        LabelTaskMapping mapping = daoHandler.getLabelTaskMappingHandler().findLabelTaskMapping(labelId,task.getId());\n         daoHandler.getLabelTaskMappingHandler().delete(mapping);\n     }\n "
  },
  {
    "sha": "298085f35b5ec0d4dc495df5c45826d030095e0d",
    "filename": "services/src/main/java/org/exoplatform/task/storage/LabelStorage.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/storage/LabelStorage.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/storage/LabelStorage.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/storage/LabelStorage.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -2,6 +2,7 @@\n \n import java.util.List;\n \n+import org.exoplatform.services.security.Identity;\n import org.exoplatform.task.domain.Label;\n import org.exoplatform.task.dto.LabelDto;\n import org.exoplatform.task.dto.TaskDto;\n@@ -11,7 +12,9 @@\n \n   List<LabelDto> findLabelsByUser(String username, int offset, int limit);\n \n-  List<LabelDto> findLabelsByTask(long taskId, String username, int offset, int limit);\n+  List<LabelDto> findLabelsByProject(long projectId, Identity currentUser, ProjectStorage projectStorage, int offset, int limit);\n+\n+  List<LabelDto> findLabelsByTask(TaskDto task, long projectId, Identity currentUser, ProjectStorage projectStorage, int offset, int limit);\n \n   LabelDto getLabel(long labelId);\n "
  },
  {
    "sha": "4c2a79c04fd76c87e1084c1e2ea4d477c73c43bf",
    "filename": "services/src/main/java/org/exoplatform/task/storage/impl/LabelStorageImpl.java",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/storage/impl/LabelStorageImpl.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/storage/impl/LabelStorageImpl.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/storage/impl/LabelStorageImpl.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -10,12 +10,15 @@\n \n import org.exoplatform.services.log.ExoLogger;\n import org.exoplatform.services.log.Log;\n+import org.exoplatform.services.security.Identity;\n import org.exoplatform.task.dao.DAOHandler;\n import org.exoplatform.task.domain.Label;\n+import org.exoplatform.task.domain.Task;\n import org.exoplatform.task.dto.LabelDto;\n import org.exoplatform.task.dto.TaskDto;\n import org.exoplatform.task.exception.EntityNotFoundException;\n import org.exoplatform.task.storage.LabelStorage;\n+import org.exoplatform.task.storage.ProjectStorage;\n import org.exoplatform.task.util.StorageUtil;\n \n public class LabelStorageImpl implements LabelStorage {\n@@ -44,11 +47,22 @@ public LabelStorageImpl(DAOHandler daoHandler) {\n   }\n \n   @Override\n-  public List<LabelDto> findLabelsByTask(long taskId, String username, int offset, int limit) {\n+  public List<LabelDto> findLabelsByProject(long projectId, Identity currentUser, ProjectStorage projectStorage, int offset, int limit) {\n     try {\n-      return Arrays.asList(daoHandler.getLabelHandler().findLabelsByTask(taskId, username).load(offset, limit))\n+      return Arrays.asList(daoHandler.getLabelHandler().findLabelsByProject(projectId).load(offset, limit))\n                    .stream()\n-                   .map(StorageUtil::labelToDto)\n+                   .map((Label label) -> StorageUtil.labelToDto(label,currentUser, projectStorage))\n+                   .collect(Collectors.toList());\n+    } catch (Exception e) {\n+      return new ArrayList<LabelDto>();\n+    }\n+  }\n+  @Override\n+  public List<LabelDto> findLabelsByTask(TaskDto task, long projectId, Identity currentUser, ProjectStorage projectStorage, int offset, int limit) {\n+    try {\n+      return Arrays.asList(daoHandler.getLabelHandler().findLabelsByTask(task.getId(), projectId).load(offset, limit))\n+                   .stream()\n+                   .map((Label label) -> StorageUtil.labelToDto(label,task,currentUser,projectStorage))\n                    .collect(Collectors.toList());\n     } catch (Exception e) {\n       return new ArrayList<LabelDto>();"
  },
  {
    "sha": "f466fb2b4bcef1eb4934e35f94f296321bee40c9",
    "filename": "services/src/main/java/org/exoplatform/task/util/StorageUtil.java",
    "status": "modified",
    "additions": 52,
    "deletions": 1,
    "changes": 53,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/util/StorageUtil.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/util/StorageUtil.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/util/StorageUtil.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -3,6 +3,7 @@\n import org.exoplatform.commons.utils.HTMLSanitizer;\n import org.exoplatform.services.log.ExoLogger;\n import org.exoplatform.services.log.Log;\n+import org.exoplatform.services.security.Identity;\n import org.exoplatform.task.domain.*;\n import org.exoplatform.task.dto.*;\n import org.exoplatform.task.service.UserService;\n@@ -179,28 +180,78 @@ public static ProjectDto projectToDto(Project project, ProjectStorage projectSto\n     }\n \n \n+    public static ProjectDto projectToDto(Project project) {\n+        if(project==null){\n+            return null;\n+        }\n+        ProjectDto projectDto = new ProjectDto();\n+        projectDto.setId(project.getId());\n+        projectDto.setName(project.getName());\n+        projectDto.setDescription(project.getDescription());\n+        projectDto.setColor(project.getColor());\n+        projectDto.setDueDate(project.getDueDate());\n+        projectDto.setLastModifiedDate(project.getLastModifiedDate());\n+        return projectDto;\n+    }\n+\n+\n     public static Label labelToEntity(LabelDto labelDto) {\n         if(labelDto==null){\n             return null;\n         }\n         Label label = new Label();\n         label.setId(labelDto.getId());\n         label.setUsername(labelDto.getUsername());\n+        label.setProject(projectToEntity(labelDto.getProject()));\n         label.setName(labelDto.getName());\n         label.setColor(labelDto.getColor());\n         label.setHidden(labelDto.isHidden());\n         label.setParent(labelToEntity(labelDto.getParent()));\n         return label;\n     }\n \n+    public static LabelDto labelToDto(Label label, Identity currentUser,ProjectStorage projectStorage) {\n+        if(label==null){\n+            return null;\n+        }\n+        LabelDto labelDto = new LabelDto();\n+        labelDto.setId(label.getId());\n+        labelDto.setUsername(label.getUsername());\n+        labelDto.setName(label.getName());\n+        labelDto.setProject(projectToDto(label.getProject(),projectStorage));\n+        labelDto.setColor(label.getColor());\n+        labelDto.setHidden(label.isHidden());\n+        labelDto.setCanEdit(labelDto.getProject().canEdit(currentUser)||label.getUsername().equals(currentUser.getUserId()));\n+        labelDto.setParent(labelToDto(label.getParent()));\n+        return labelDto;\n+    }\n+\n+    public static LabelDto labelToDto(Label label, TaskDto task, Identity currentUser,ProjectStorage projectStorage) {\n+        if(label==null){\n+            return null;\n+        }\n+        LabelDto labelDto = new LabelDto();\n+        labelDto.setId(label.getId());\n+        labelDto.setUsername(label.getUsername());\n+        labelDto.setName(label.getName());\n+        labelDto.setProject(projectToDto(label.getProject(),projectStorage));\n+        labelDto.setColor(label.getColor());\n+        labelDto.setHidden(label.isHidden());\n+        labelDto.setCanEdit(labelDto.getProject().canEdit(currentUser)||task.getCreatedBy().equals(currentUser.getUserId()));\n+        labelDto.setParent(labelToDto(label.getParent()));\n+        return labelDto;\n+    }\n+\n+\n     public static LabelDto labelToDto(Label label) {\n         if(label==null){\n             return null;\n         }\n-        LabelDto labelDto = new LabelDto(label);\n+        LabelDto labelDto = new LabelDto();\n         labelDto.setId(label.getId());\n         labelDto.setUsername(label.getUsername());\n         labelDto.setName(label.getName());\n+        labelDto.setProject(projectToDto(label.getProject()));\n         labelDto.setColor(label.getColor());\n         labelDto.setHidden(label.isHidden());\n         labelDto.setParent(labelToDto(label.getParent()));"
  },
  {
    "sha": "459a33caa5d379a69e101dff89b79819dcb4ed05",
    "filename": "services/src/main/java/org/exoplatform/task/util/TaskUtil.java",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/util/TaskUtil.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/java/org/exoplatform/task/util/TaskUtil.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/java/org/exoplatform/task/util/TaskUtil.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -269,10 +269,10 @@ public static TaskQuery buildTaskQuery(TaskQuery query, String keyword,\n   }\n \n \n-  public static Map<GroupKey, List<TaskEntity>> groupTasks(List<TaskEntity> tasks, String groupBy, String username, TimeZone userTimezone, LabelService labelService, UserService userService) throws EntityNotFoundException {\n+  public static Map<GroupKey, List<TaskEntity>> groupTasks(List<TaskEntity> tasks, String groupBy, Identity userId, TimeZone userTimezone, LabelService labelService, UserService userService) throws EntityNotFoundException {\n     Map<GroupKey, List<TaskEntity>> maps = new TreeMap<GroupKey, List<TaskEntity>>();\n     for(TaskEntity task : tasks) {\n-      for (GroupKey key : getGroupName(task, groupBy, username, userTimezone, labelService, userService)) {\n+      for (GroupKey key : getGroupName(task, groupBy, userId, userTimezone, labelService, userService)) {\n         List<TaskEntity> list = maps.entrySet().stream()\n           .filter(group -> group.getKey().getName().equals(key.getName()))\n           .map(Map.Entry::getValue)\n@@ -318,7 +318,7 @@ public static String buildTaskURL(TaskDto task, SiteKey siteKey, ExoContainer co\n     }\n   }\n \n-  private static GroupKey[] getGroupName(TaskEntity task, String groupBy, String username, TimeZone userTimezone, LabelService labelService, UserService userService) throws EntityNotFoundException {\n+  private static GroupKey[] getGroupName(TaskEntity task, String groupBy, Identity userId, TimeZone userTimezone, LabelService labelService, UserService userService) throws EntityNotFoundException {\n     if(\"project\".equalsIgnoreCase(groupBy)) {\n       StatusDto s = task.getStatus();\n       if(s == null) {\n@@ -366,8 +366,8 @@ public static String buildTaskURL(TaskDto task, SiteKey siteKey, ExoContainer co\n       }\n       return new GroupKey[] {new GroupKey(DateUtil.getDueDateLabel(calendar), dueDate, calendar == null ? Integer.MAX_VALUE : (int)calendar.getTimeInMillis())};\n \n-    } else if (TaskUtil.LABEL.equalsIgnoreCase(groupBy)) {\n-      List<LabelDto> labels = labelService.findLabelsByTask(task.getId(), username,0,-1);\n+    } else if (TaskUtil.LABEL.equalsIgnoreCase(groupBy)&&(task.getStatus()!=null && task.getStatus().getProject()!=null)) {\n+      List<LabelDto> labels = labelService.findLabelsByTask(task.getTask(), task.getStatus().getProject().getId(),userId,0,-1);\n       if (labels.isEmpty()) {\n         return new GroupKey[] {new GroupKey(\"No Label\", null, Integer.MAX_VALUE)};\n       } else {\n@@ -430,7 +430,7 @@ public static boolean canDeleteComment(Identity identity, CommentDto comment) {\n     return false;\n   }\n   \n-  public static TaskDto saveTaskField(TaskDto task, String username, String param, String[] values, TimeZone timezone, TaskService taskService, LabelService labelService, StatusService statusService)\n+  public static TaskDto saveTaskField(TaskDto task, Identity userId, String param, String[] values, TimeZone timezone, TaskService taskService, LabelService labelService, StatusService statusService)\n       throws EntityNotFoundException, ParameterEntityException {\n \n     if (timezone == null) {\n@@ -571,20 +571,21 @@ public static TaskDto saveTaskField(TaskDto task, String username, String param,\n         }\n \n         Set<Long> persisted = new HashSet<Long>();\n-        List<LabelDto> labels = labelService.findLabelsByTask(task.getId(), username,0,-1);\n-        for(LabelDto label : labels) {\n+      if (task.getStatus()!=null && task.getStatus().getProject()!=null) {\n+        List<LabelDto> labels = labelService.findLabelsByTask(task, task.getStatus().getProject().getId(),userId, 0, -1);\n+        for (LabelDto label : labels) {\n           if (!ids.contains(label.getId())) {\n             labelService.removeTaskFromLabel(task, label.getId());\n           } else {\n             persisted.add(label.getId());\n           }\n         }\n-\n+      }\n         //\n         for (String label : labelsToCreate) {\n           LabelDto l = new LabelDto();\n           l.setName(label);\n-          l.setUsername(username);\n+          l.setUsername(userId.getUserId());\n           l = labelService.createLabel(l);\n           ids.add(l.getId());\n         }"
  },
  {
    "sha": "8af75f897a73338ebdbd0c932ed549f670c2b5c9",
    "filename": "services/src/main/resources/conf/portal/configuration.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/resources/conf/portal/configuration.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/resources/conf/portal/configuration.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/resources/conf/portal/configuration.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -105,6 +105,7 @@\n           <value>db/changelog/task.db.changelog-2.1.0.xml</value>\n           <value>db/changelog/task.db.changelog-3.0.0.xml</value>\n           <value>db/changelog/task.db.changelog-3.1.0.xml</value>\n+          <value>db/changelog/task.db.changelog-3.2.0.xml</value>\n         </values-param>\n       </init-params>\n     </component-plugin>"
  },
  {
    "sha": "2f067f0c526a86f704d8e33f973470282893bd1d",
    "filename": "services/src/main/resources/db/changelog/task.db.changelog-3.2.0.xml",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/resources/db/changelog/task.db.changelog-3.2.0.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/main/resources/db/changelog/task.db.changelog-3.2.0.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/main/resources/db/changelog/task.db.changelog-3.2.0.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n+                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd\">\n+\n+  <changeSet id=\"3.2.0-01\" author=\"task\">\n+      <addColumn tableName=\"TASK_LABELS\">\n+          <column name=\"PROJECT_ID\" type=\"BIGINT\">\n+          </column>\n+    </addColumn>\n+      <addForeignKeyConstraint constraintName=\"FK_LABEL_PRJ_01\"\n+                               baseTableName=\"TASK_LABELS\"\n+                               baseColumnNames=\"PROJECT_ID\"\n+                               referencedTableName=\"TASK_PROJECTS\"\n+                               referencedColumnNames=\"PROJECT_ID\"\n+                               onDelete=\"CASCADE\" />\n+  </changeSet>\n+\n+</databaseChangeLog>\n\\ No newline at end of file"
  },
  {
    "sha": "a00bbcb0aa1ec18bf5cfab677db89cf1e1bc7193",
    "filename": "services/src/test/java/org/exoplatform/task/TestDtoUtils.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/TestDtoUtils.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/TestDtoUtils.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/test/java/org/exoplatform/task/TestDtoUtils.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -90,6 +90,8 @@ private static void initDB() throws LiquibaseException {\n     liquibase.update((String) null);\n     liquibase = new Liquibase(\"db/changelog/task.db.changelog-3.1.0.xml\", new ClassLoaderResourceAccessor(), database);\n     liquibase.update((String) null);\n+    liquibase = new Liquibase(\"db/changelog/task.db.changelog-3.2.0.xml\", new ClassLoaderResourceAccessor(), database);\n+    liquibase.update((String) null);\n   }\n \n   public static void closeDB() throws LiquibaseException, SQLException {"
  },
  {
    "sha": "9eca575737cfe9008bf26a16e174d708c10b6fd4",
    "filename": "services/src/test/java/org/exoplatform/task/TestUtils.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/TestUtils.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/TestUtils.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/test/java/org/exoplatform/task/TestUtils.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -98,6 +98,8 @@ private static void initDB() throws LiquibaseException {\n     liquibase.update((String)null);\n     liquibase = new Liquibase(\"db/changelog/task.db.changelog-3.1.0.xml\", new ClassLoaderResourceAccessor(), database);\n     liquibase.update((String)null);\n+    liquibase = new Liquibase(\"db/changelog/task.db.changelog-3.2.0.xml\", new ClassLoaderResourceAccessor(), database);\n+    liquibase.update((String)null);\n   }\n \n   public static void closeDB() throws LiquibaseException, SQLException {"
  },
  {
    "sha": "7d835fba09d1d3bad70c84712897a0506c5df288",
    "filename": "services/src/test/java/org/exoplatform/task/dao/TestLabelDAO.java",
    "status": "modified",
    "additions": 53,
    "deletions": 19,
    "changes": 72,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/dao/TestLabelDAO.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/dao/TestLabelDAO.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/test/java/org/exoplatform/task/dao/TestLabelDAO.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -22,9 +22,7 @@\n import org.exoplatform.commons.utils.ListAccess;\n import org.exoplatform.container.PortalContainer;\n import org.exoplatform.task.AbstractTest;\n-import org.exoplatform.task.domain.Label;\n-import org.exoplatform.task.domain.LabelTaskMapping;\n-import org.exoplatform.task.domain.Task;\n+import org.exoplatform.task.domain.*;\n import org.exoplatform.task.util.ListUtil;\n import org.junit.After;\n import org.junit.Assert;\n@@ -53,7 +51,10 @@ public void tearDown() {\n   \n   @Test\n   public void testAddTask() throws Exception {\n-    Label label = new Label(\"test label\", username);\n+    Project project= new Project();\n+    project.setName(\"project\");\n+    taskService.getProjectHandler().create(project);\n+    Label label = new Label(\"test label\", username, project);\n     label = lblDAO.create(label);\n     Task task = new Task();\n     task.setTitle(\"task1\");\n@@ -68,7 +69,10 @@ public void testAddTask() throws Exception {\n   \n   @Test\n   public void testRemoveTask() throws Exception {\n-    Label label = new Label(\"test label\", username);\n+    Project project= new Project();\n+    project.setName(\"project\");\n+    taskService.getProjectHandler().create(project);\n+    Label label = new Label(\"test label\", username, project);\n     label = lblDAO.create(label);\n     Task task = new Task();\n     task.setTitle(\"test\");\n@@ -89,7 +93,10 @@ public void testRemoveTask() throws Exception {\n   \n   @Test\n   public void testUpdate() {\n-    Label label = new Label(\"test label\", username);\n+    Project project= new Project();\n+    project.setName(\"project\");\n+    taskService.getProjectHandler().create(project);\n+    Label label = new Label(\"test label\", username, project);\n     label = lblDAO.create(label);\n     Assert.assertNotNull(label);\n     \n@@ -106,7 +113,7 @@ public void testUpdate() {\n     label = lblDAO.find(label.getId());\n     Assert.assertEquals(\"label2\", label.getName());    \n     \n-    Label parent = new Label(\"parent label\", \"root\");\n+    Label parent = new Label(\"parent label\", \"root\", project);\n     lblDAO.create(parent);\n     label.setParent(parent);\n     lblDAO.update(label);\n@@ -116,24 +123,39 @@ public void testUpdate() {\n   \n   @Test\n   public void testFindLabelByTask() throws Exception {\n+    Project project = new Project();\n+    project.setName(\"project1\");\n+    taskService.getProjectHandler().create(project);\n+\n+    Status status = new Status();\n+    status.setName(\"status1\");\n+    status.setRank(1);\n+    status.setProject(project);\n+    taskService.getStatusHandler().create(status);\n+\n     Task task = new Task();\n     task.setTitle(\"task1\");\n+    task.setStatus(status);\n     taskService.getTaskHandler().create(task);\n     //\n-    Label label1 = new Label(\"test label1\", \"root\");\n-    lblDAO.create(label1);    \n+    Label label1 = new Label(\"test label1\", \"root\", project);\n+    lblDAO.create(label1);\n     //\n     LabelTaskMapping mapping = new LabelTaskMapping();\n     mapping.setLabel(label1);\n     mapping.setTask(task);\n     //\n     taskService.getLabelTaskMappingHandler().create(mapping);\n     \n-    Assert.assertEquals(1, lblDAO.findLabelsByTask(task.getId(), \"root\").getSize());\n+    Assert.assertEquals(1, lblDAO.findLabelsByTask(task.getId(), project.getId()).getSize());\n   }\n   \n   @Test\n   public void testRemoveLabel() throws Exception {\n+    Project project= new Project();\n+    project.setName(\"project\");\n+    taskService.getProjectHandler().create(project);\n+\n     Task task = new Task();\n     task.setTitle(\"task1\");\n     taskService.getTaskHandler().create(task);\n@@ -142,7 +164,7 @@ public void testRemoveLabel() throws Exception {\n     task2.setTitle(\"task2\");\n     taskService.getTaskHandler().create(task2);\n     //\n-    Label label1 = new Label(\"test label1\", \"root\");\n+    Label label1 = new Label(\"test label1\", \"root\",project);\n     lblDAO.create(label1);    \n     //\n     LabelTaskMapping mapping = new LabelTaskMapping();\n@@ -173,9 +195,24 @@ public void testRemoveLabel() throws Exception {\n   \n   @Test\n   public void testQuery() throws Exception {\n-    Label label1 = new Label(\"test label1\", \"root\");\n-    Label label2 = new Label(\"test label2\", \"demo\");\n-    lblDAO.create(label1);    \n+    Project project = new Project();\n+    project.setName(\"project1\");\n+    taskService.getProjectHandler().create(project);\n+\n+    Status status = new Status();\n+    status.setName(\"status1\");\n+    status.setRank(1);\n+    status.setProject(project);\n+    taskService.getStatusHandler().create(status);\n+\n+    Task task = new Task();\n+    task.setTitle(\"task1\");\n+    task.setStatus(status);\n+    taskService.getTaskHandler().create(task);\n+\n+    Label label1 = new Label(\"test label1\", \"root\",project);\n+    Label label2 = new Label(\"test label2\", \"demo\",project);\n+    lblDAO.create(label1);\n     lblDAO.create(label2);\n     \n     //\n@@ -187,14 +224,11 @@ public void testQuery() throws Exception {\n     list = Arrays.asList(ListUtil.load(labels, 0, -1));\n     Assert.assertEquals(1, labels.getSize());\n     Assert.assertEquals(label2.getName(), list.get(0).getName());\n-    \n-    Task task = new Task();\n-    task.setTitle(\"task1\");\n-    taskService.getTaskHandler().create(task);\n+\n     LabelTaskMapping mapping = new LabelTaskMapping(label1, task);\n     taskService.getLabelTaskMappingHandler().create(mapping);\n     //\n-    labels = lblDAO.findLabelsByTask(task.getId(), \"root\");\n+    labels = lblDAO.findLabelsByTask(task.getId(), project.getId());\n     Assert.assertEquals(1, labels.getSize());\n   }\n }"
  },
  {
    "sha": "e69a17743edf8af0c3c29cc482fb2a39af91f493",
    "filename": "services/src/test/java/org/exoplatform/task/dao/TestTaskDAO.java",
    "status": "modified",
    "additions": 23,
    "deletions": 10,
    "changes": 33,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/dao/TestTaskDAO.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/dao/TestTaskDAO.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/test/java/org/exoplatform/task/dao/TestTaskDAO.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -216,6 +216,11 @@ public void testFindTaskOrderByDueDate() throws Exception {\n \n   @Test\n   public void testFindTaskByQueryAdvance() throws Exception {\n+    Project project = new Project();\n+    project.setName(\"Project1\");\n+    project.setParticipator(new HashSet<String>(Arrays.asList(\"root\")));\n+    project = daoHandler.getProjectHandler().create(project);\n+\n     Task task = newTaskInstance(\"testTask\", \"task with label\", username);\n     tDAO.create(task);\n \n@@ -225,7 +230,7 @@ public void testFindTaskByQueryAdvance() throws Exception {\n     Assert.assertEquals(1, tasks.getSize());\n     \n     //Find by label\n-    Label label = new Label(\"testLabel\", username);    \n+    Label label = new Label(\"testLabel\", username, project);\n     labelHandler.create(label);\n     LabelTaskMapping mapping = new LabelTaskMapping(label, task);\n     daoHandler.getLabelTaskMappingHandler().create(mapping);\n@@ -237,10 +242,7 @@ public void testFindTaskByQueryAdvance() throws Exception {\n     Assert.assertEquals(1, tasks.getSize());\n     \n     //Find by status\n-    Project project = new Project();\n-    project.setName(\"Project1\");\n-    project.setParticipator(new HashSet<String>(Arrays.asList(\"root\")));\n-    project = daoHandler.getProjectHandler().create(project);\n+\n     Status status = newStatusInstance(\"TO DO\", 1);\n     status.setProject(project);\n     status = daoHandler.getStatusHandler().create(status);\n@@ -373,7 +375,7 @@ public void testFindTaskByMembership() {\n     //This is for the case user create task in label then search by unified search\n     Task task2 = newTaskInstance(\"task2\", \"\", null);\n     tDAO.create(task2);\n-    Label label = new Label(\"label1\", username);\n+    Label label = new Label(\"label1\", username ,project);\n     labelHandler.create(label);\n     LabelTaskMapping mapping = new LabelTaskMapping(label, task2);\n     daoHandler.getLabelTaskMappingHandler().create(mapping);\n@@ -399,7 +401,7 @@ public void testFindTasksByLabel() throws Exception {\n     Task task = newTaskInstance(\"task1\", \"\", username);\n     task.setStatus(status);\n     tDAO.create(task);\n-    Label label = new Label(\"label1\", username);\n+    Label label = new Label(\"label1\", username ,project);\n     labelHandler.create(label);\n     //\n     LabelTaskMapping mapping = new LabelTaskMapping(label, task);\n@@ -416,21 +418,32 @@ public void testFindTasksByLabel() throws Exception {\n   \n   @Test\n   public void testRemoveTaskLabel() throws Exception {\n+    Project project = new Project();\n+    project.setName(\"project1\");\n+    daoHandler.getProjectHandler().create(project);\n+\n+    Status status = new Status();\n+    status.setName(\"status1\");\n+    status.setRank(1);\n+    status.setProject(project);\n+    daoHandler.getStatusHandler().create(status);\n     Task task = newTaskInstance(\"task1\", \"\", username);\n+    task.setStatus(status);\n     tDAO.create(task);\n-    Label label = new Label(\"label1\", username);\n+    Label label = new Label(\"label1\", username ,project);\n+    label.setProject(project);\n     labelHandler.create(label);\n     //\n     LabelTaskMapping mapping = new LabelTaskMapping(label, task);\n     daoHandler.getLabelTaskMappingHandler().create(mapping);\n     \n-    ListAccess<Label> labels = labelHandler.findLabelsByTask(task.getId(), username);\n+    ListAccess<Label> labels = labelHandler.findLabelsByTask(task.getId(), project.getId());\n     Assert.assertEquals(1, labels.getSize());\n     //\n     endRequestLifecycle();\n     initializeContainerAndStartRequestLifecycle();\n     tDAO.delete(tDAO.find(task.getId()));\n-    labels = labelHandler.findLabelsByTask(task.getId(), username);\n+    labels = labelHandler.findLabelsByTask(task.getId(), project.getId());\n     Assert.assertEquals(0, labels.getSize());\n   }\n "
  },
  {
    "sha": "48505c7b5193f0bec0dc592cae56ab2a16e6a490",
    "filename": "services/src/test/java/org/exoplatform/task/rest/TestTaskRestService.java",
    "status": "modified",
    "additions": 67,
    "deletions": 2,
    "changes": 69,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/rest/TestTaskRestService.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/rest/TestTaskRestService.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/test/java/org/exoplatform/task/rest/TestTaskRestService.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -11,6 +11,9 @@\n import org.exoplatform.task.TestUtils;\n import org.exoplatform.task.dao.TaskQuery;\n import org.exoplatform.task.domain.Priority;\n+import org.exoplatform.task.domain.Project;\n+import org.exoplatform.task.domain.Status;\n+import org.exoplatform.task.domain.Task;\n import org.exoplatform.task.model.User;\n import org.exoplatform.task.rest.model.PaginatedTaskList;\n import org.exoplatform.task.rest.model.ViewState;\n@@ -325,6 +328,18 @@ public void testGetLabels() throws Exception {\n     Identity root = new Identity(\"root\");\n     ConversationState.setCurrent(new ConversationState(root));\n \n+    ProjectDto project = new ProjectDto();\n+    project.setName(\"project1\");\n+\n+    StatusDto status = new StatusDto();\n+    status.setName(\"status1\");\n+    status.setRank(1);\n+    status.setProject(project);\n+\n+    TaskDto task = new TaskDto();\n+    task.setId(1);\n+    task.setStatus(status);\n+\n     LabelDto label1 = new LabelDto();\n     label1.setId(1);\n     label1.setName(\"label1\");\n@@ -366,6 +381,19 @@ public void getLabelsByTaskId() throws Exception {\n     Identity root = new Identity(\"root\");\n     ConversationState.setCurrent(new ConversationState(root));\n \n+\n+    ProjectDto project = new ProjectDto();\n+    project.setName(\"project1\");\n+\n+    StatusDto status = new StatusDto();\n+    status.setName(\"status1\");\n+    status.setRank(1);\n+    status.setProject(project);\n+\n+    TaskDto task = new TaskDto();\n+    task.setId(1);\n+    task.setStatus(status);\n+\n     LabelDto label1 = new LabelDto();\n     label1.setId(1);\n     label1.setName(\"label1\");\n@@ -395,7 +423,8 @@ public int getSize() throws Exception {\n       }\n     };\n \n-    when(labelService.findLabelsByTask(1, root.getUserId(), 0, -1)).thenReturn(labels);\n+    when(taskService.getTask(1)).thenReturn(task);\n+    when(labelService.findLabelsByTask(task, 0, root, 0,-1)).thenReturn(labels);\n     // When\n     Response response = taskRestService.getLabelsByTaskId(1);\n \n@@ -419,24 +448,39 @@ public void testAddTaskToLabel() throws Exception {\n     Identity root = new Identity(\"root\");\n     ConversationState.setCurrent(new ConversationState(root));\n \n+    ProjectDto project = new ProjectDto();\n+    project.setId(1);\n+    Set<String> manager = new HashSet<String>();\n+    manager.add(\"root\");\n+    project.setManager(manager);\n+    StatusDto status = new StatusDto();\n+    status.setId(Long.valueOf(1));\n+    status.setName(\"status 1\");\n+    status.setProject(project);\n+\n     TaskDto task = new TaskDto();\n     task.setId(1);\n     task.setCreatedBy(\"root\");\n     task.setAssignee(\"root\");\n+    task.setStatus(status);\n     taskService.createTask(task);\n \n     LabelDto label1 = new LabelDto();\n     label1.setId(1);\n     label1.setName(\"label1\");\n+    label1.setProject(project);\n \n     LabelDto label2 = new LabelDto();\n     label2.setId(2);\n     label2.setName(\"label1\");\n+    label2.setProject(project);\n \n     LabelDto label3 = new LabelDto();\n     label3.setId(0);\n+    label3.setProject(project);\n \n     when(labelService.createLabel(label1)).thenReturn(label1);\n+    when(projectService.getProject(project.getId())).thenReturn(project);\n     when(taskService.getTask(1)).thenReturn(task);\n \n     // When\n@@ -483,6 +527,13 @@ public void testGetTaskLogs() throws Exception {\n     Identity root = new Identity(\"root\");\n     ConversationState.setCurrent(new ConversationState(root));\n \n+    ProjectDto project = new ProjectDto();\n+    project.setId(1);\n+    StatusDto status = new StatusDto();\n+    status.setId(Long.valueOf(1));\n+    status.setName(\"status 1\");\n+    status.setProject(project);\n+\n     TaskDto task = new TaskDto();\n     task.setId(1);\n     task.setCreatedBy(\"root\");\n@@ -515,21 +566,35 @@ public void testRemoveTaskFromLabel() throws Exception {\n             labelService);\n     Identity root = new Identity(\"root\");\n     ConversationState.setCurrent(new ConversationState(root));\n+    ProjectDto project = new ProjectDto();\n+    project.setId(1);\n+    Set<String> manager = new HashSet<String>();\n+    manager.add(\"root\");\n+    project.setManager(manager);\n+    StatusDto status = new StatusDto();\n+    status.setId(Long.valueOf(1));\n+    status.setName(\"status 1\");\n+    status.setProject(project);\n \n     TaskDto task = new TaskDto();\n     task.setId(1);\n     task.setCreatedBy(\"root\");\n     task.setAssignee(\"root\");\n+    task.setStatus(status);\n     taskService.createTask(task);\n \n     LabelDto label1 = new LabelDto();\n     label1.setId(1);\n     label1.setName(\"label1\");\n+    label1.setProject(project);\n \n     LabelDto label2 = new LabelDto();\n     label2.setId(2);\n-    label2.setName(\"label1\");\n+    label2.setName(\"label2\");\n+    label2.setProject(project);\n+\n \n+    when(projectService.getProject(project.getId())).thenReturn(project);\n     when(labelService.createLabel(label1)).thenReturn(label1);\n     when(taskService.getTask(1)).thenReturn(task);\n "
  },
  {
    "sha": "755aec76ec2a77b7236455da08cd35a20a919c32",
    "filename": "services/src/test/java/org/exoplatform/task/service/LabelServiceTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/service/LabelServiceTest.java",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/services/src/test/java/org/exoplatform/task/service/LabelServiceTest.java",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/services/src/test/java/org/exoplatform/task/service/LabelServiceTest.java?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -101,7 +101,7 @@ public void setUp() {\n         statusStorage = new StatusStorageImpl(daoHandler, projectStorage);\n         statusService = new StatusServiceImpl(daoHandler, statusStorage, projectStorage, listenerService);\n         labelStorage = new LabelStorageImpl(daoHandler);\n-        labelService = new LabelServiceImpl(labelStorage, daoHandler);\n+        labelService = new LabelServiceImpl(labelStorage, daoHandler,projectStorage);\n         taskService =new TaskServiceImpl(taskStorage, daoHandler, listenerService);\n         // Mock DAO handler to return Mocked DAO\n         when(daoHandler.getTaskHandler()).thenReturn(taskHandler);\n@@ -177,12 +177,12 @@ public void testUpdateLabelPARENT() throws EntityNotFoundException {\n         label.setUsername(\"root\");\n         label.setName(\"testLabel\");\n         label.setParent(parentLabel);\n-        when(daoHandler.getLabelHandler().find(labelId)).thenReturn(LabelDto.labelToEntity(label));\n+        when(daoHandler.getLabelHandler().find(labelId)).thenReturn(StorageUtil.labelToEntity(label));\n         when(daoHandler.getLabelHandler().update(any())).thenReturn(StorageUtil.labelToEntity(label));\n         labelService.updateLabel(label, Collections.singletonList(Label.FIELDS.PARENT));\n         verify(labelHandler, times(1)).update(labelCaptor.capture());\n \n-        assertEquals(label.getParent(), LabelDto.labelToDto(labelCaptor.getValue().getParent()));\n+        assertEquals(label.getParent(), StorageUtil.labelToDto(labelCaptor.getValue().getParent()));\n     }\n \n     @Test"
  },
  {
    "sha": "ab96d40d6c0a5a6e293003887e6d17e1370f52fb",
    "filename": "task-management/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/task-management/pom.xml",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/task-management/pom.xml",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/task-management/pom.xml?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -24,7 +24,7 @@\n   <parent>\n     <artifactId>task-management-parent</artifactId>\n     <groupId>org.exoplatform.addons.task</groupId>\n-    <version>3.2.x-SNAPSHOT</version>\n+    <version>3.2.x-tasks-SNAPSHOT</version>\n   </parent>\n   <artifactId>task-management</artifactId>\n   <packaging>war</packaging>"
  },
  {
    "sha": "5cb61f05949ec408a8800c7dab8b7bd731489911",
    "filename": "task-management/src/main/webapp/js/tasksService.js",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/task-management/src/main/webapp/js/tasksService.js",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/task-management/src/main/webapp/js/tasksService.js",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/task-management/src/main/webapp/js/tasksService.js?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -40,6 +40,22 @@ export function getLabelsByTaskId(taskId) {\n     });\n }\n \n+\n+\n+export function getLabelsByProjectId(projectId) {\n+    return fetch(`${tasksConstants.PORTAL}/${tasksConstants.PORTAL_REST}/tasks/labels/project/${projectId}`, {\n+        method: 'GET',\n+        credentials: 'include',\n+    }).then(resp => {\n+        if (!resp || !resp.ok) {\n+            throw new Error('Response code indicates a server error', resp);\n+        } else {\n+            return resp.json();\n+        }\n+    });\n+}\n+\n+\n export function getTaskById(taskId) {\n     return fetch(`${tasksConstants.PORTAL}/${tasksConstants.PORTAL_REST}/tasks/${taskId}`, {\n         method: 'GET',\n@@ -88,4 +104,4 @@ export function updateCompleted(task) {\n         method: 'PUT',\n         body: JSON.stringify(task)\n     }).then(resp => resp.json());\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e8325a8f157a655e0f48b16e5afd84bae1a9d809",
    "filename": "task-management/src/main/webapp/vue-app/taskDrawer/components/TaskDrawer.vue",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/exoplatform/task/blob/9d769a15a90c64f96fa8d2c552d41b83df0b0850/task-management/src/main/webapp/vue-app/taskDrawer/components/TaskDrawer.vue",
    "raw_url": "https://github.com/exoplatform/task/raw/9d769a15a90c64f96fa8d2c552d41b83df0b0850/task-management/src/main/webapp/vue-app/taskDrawer/components/TaskDrawer.vue",
    "contents_url": "https://api.github.com/repos/exoplatform/task/contents/task-management/src/main/webapp/vue-app/taskDrawer/components/TaskDrawer.vue?ref=9d769a15a90c64f96fa8d2c552d41b83df0b0850",
    "patch": "@@ -128,7 +128,8 @@\n             @addTaskDescription=\"addTaskDescription($event)\"/>\n         </div>\n         <div class=\"taskLabelsName mt-3 mb-3\">\n-          <task-labels\n+          <task-labels \n+            v-if=\"task.status && task.status.project\"\n             :task=\"task\"\n             @labelsListOpened=\"closePriority(); closeStatus(); closeProjectsList();closeTaskDates();closeAssignements()\"/>\n         </div>\n@@ -591,6 +592,9 @@ export default {\n                     document.dispatchEvent(new CustomEvent('loadPlanDates', {\n                         detail: task\n                     }));\n+                    document.dispatchEvent(new CustomEvent('loadProjectLabels', {\n+                        detail: task\n+                    }));\n                     document.dispatchEvent(new CustomEvent('loadTaskLabels', {\n                         detail: task\n                     }));"
  }
]
