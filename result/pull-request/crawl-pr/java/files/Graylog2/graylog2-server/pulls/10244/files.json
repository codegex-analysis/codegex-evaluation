[
  {
    "sha": "9c33579a4d8fd7bdecdb70633e701a62fafd8e83",
    "filename": "graylog2-server/src/main/java/org/graylog2/configuration/PathConfiguration.java",
    "status": "modified",
    "additions": 23,
    "deletions": 1,
    "changes": 24,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/configuration/PathConfiguration.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/configuration/PathConfiguration.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/main/java/org/graylog2/configuration/PathConfiguration.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -17,11 +17,17 @@\n package org.graylog2.configuration;\n \n import com.github.joschi.jadconfig.Parameter;\n+import org.graylog2.configuration.converters.SortedPathSetConverter;\n \n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.SortedSet;\n+\n+public class PathConfiguration {\n+    public static final String ALLOWED_AUXILIARY_PATHS = \"allowed_auxiliary_paths\";\n \n-public abstract class PathConfiguration {\n     protected static final Path DEFAULT_BIN_DIR = Paths.get(\"bin\");\n     protected static final Path DEFAULT_DATA_DIR = Paths.get(\"data\");\n     protected static final Path DEFAULT_PLUGIN_DIR = Paths.get(\"plugin\");\n@@ -35,6 +41,19 @@\n     @Parameter(value = \"plugin_dir\", required = true)\n     private Path pluginDir = DEFAULT_PLUGIN_DIR;\n \n+    /**\n+     * Optional allowed paths for Graylog data files.\n+     *\n+     * If provided, certain operations in Graylog will only be permitted if the data file(s) are located in the\n+     * specified paths. All subdirectories of indicated paths are allowed by default.\n+     *\n+     * This provides an additional layer of security, and allows administrators to control where in the file system\n+     * Graylog users can select files from. It protects against the potential inspection of arbitrary files in the\n+     * file system from the Graylog user interface.\n+     */\n+    @Parameter(value = ALLOWED_AUXILIARY_PATHS, converter = SortedPathSetConverter.class)\n+    private SortedSet<Path> allowedAuxiliaryPaths = Collections.emptySortedSet();\n+\n     public Path getBinDir() {\n         return binDir;\n     }\n@@ -50,4 +69,7 @@ public Path getPluginDir() {\n         return pluginDir;\n     }\n \n+    public Set<Path> getAllowedAuxiliaryPaths() {\n+        return allowedAuxiliaryPaths;\n+    }\n }"
  },
  {
    "sha": "a84ae2595e72edd50804ece980f259916ecec83c",
    "filename": "graylog2-server/src/main/java/org/graylog2/configuration/converters/SortedPathSetConverter.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/configuration/converters/SortedPathSetConverter.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/configuration/converters/SortedPathSetConverter.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/main/java/org/graylog2/configuration/converters/SortedPathSetConverter.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+package org.graylog2.configuration.converters;\n+\n+import com.github.joschi.jadconfig.Converter;\n+import com.github.joschi.jadconfig.ParameterException;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public class SortedPathSetConverter implements Converter<SortedSet<Path>> {\n+    protected static final String SEPARATOR = \",\";\n+\n+    @Override\n+    public SortedSet<Path> convertFrom(String value) {\n+        if (value == null) {\n+            throw new ParameterException(\"Path list must not be null.\");\n+        }\n+\n+        return Arrays.stream(value.split(SEPARATOR))\n+                     .map(StringUtils::trimToNull)\n+                     .filter(Objects::nonNull)\n+                     .map(Paths::get)\n+                     .collect(Collectors.toCollection(sortedPathSupplier()));\n+    }\n+\n+    @Override\n+    public String convertTo(SortedSet<Path> value) {\n+        if (value == null) {\n+            throw new ParameterException(\"String list of Paths must not be null.\");\n+        }\n+\n+        return value.stream().map(Path::toString).collect(Collectors.joining(\",\"));\n+    }\n+\n+    /**\n+     * @return {@link Supplier<TreeSet>} which sorts based on {@literal path.toString()}.\n+     *         Sorting is intentionally performed on a case-sensitive basis, since paths\n+     *         are also case-sensitive.\n+     */\n+    private Supplier<TreeSet<Path>> sortedPathSupplier() {\n+        return () -> new TreeSet<>(Comparator.comparing(Path::toString));\n+    }\n+}"
  },
  {
    "sha": "f6cbd9c8eed240b563e3f65721470f3a2f0790a3",
    "filename": "graylog2-server/src/main/java/org/graylog2/lookup/AllowedAuxiliaryPathChecker.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/lookup/AllowedAuxiliaryPathChecker.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/lookup/AllowedAuxiliaryPathChecker.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/main/java/org/graylog2/lookup/AllowedAuxiliaryPathChecker.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+package org.graylog2.lookup;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.SortedSet;\n+\n+@Singleton\n+public class AllowedAuxiliaryPathChecker {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AllowedAuxiliaryPathChecker.class);\n+\n+    private final SortedSet<Path> allowedPaths;\n+\n+    @Inject\n+    public AllowedAuxiliaryPathChecker(@Named(\"allowed_auxiliary_paths\") SortedSet<Path> allowedPaths) {\n+        this.allowedPaths = allowedPaths;\n+    }\n+\n+    public boolean fileIsInAllowedPath(Path path) {\n+        if (allowedPaths.isEmpty()) {\n+            return true;\n+        }\n+\n+        final Path realFilePath = resolveRealPath(path);\n+        if (realFilePath == null) {\n+            return false;\n+        }\n+        for (Path allowedPath : allowedPaths) {\n+            final Path realAllowedPath = resolveRealPath(allowedPath);\n+            if (realAllowedPath != null && realFilePath.startsWith(realAllowedPath)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static Path resolveRealPath(Path path) {\n+        try {\n+            // Get the real path by resolving all relative paths and symbolic links.\n+            return path.toRealPath();\n+        } catch (IOException e) {\n+            LOG.error(\"Could not resolve real location of path [{}].\", path, e);\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "f5b4b1c2c744ccb550ebf9eebe8d5b633a611b58",
    "filename": "graylog2-server/src/main/java/org/graylog2/lookup/LookupModule.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/lookup/LookupModule.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/lookup/LookupModule.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/main/java/org/graylog2/lookup/LookupModule.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -33,6 +33,7 @@\n     protected void configure() {\n         serviceBinder().addBinding().to(UrlWhitelistService.class).in(Scopes.SINGLETON);\n         binder().bind(UrlWhitelistNotificationService.class).in(Scopes.SINGLETON);\n+        binder().bind(AllowedAuxiliaryPathChecker.class).in(Scopes.SINGLETON);\n \n         serviceBinder().addBinding().to(LookupTableService.class).asEagerSingleton();\n "
  },
  {
    "sha": "fbc4964de183bb0cb03875fc4a8e65875d04d654",
    "filename": "graylog2-server/src/main/java/org/graylog2/lookup/adapters/CSVFileDataAdapter.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/lookup/adapters/CSVFileDataAdapter.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/main/java/org/graylog2/lookup/adapters/CSVFileDataAdapter.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/main/java/org/graylog2/lookup/adapters/CSVFileDataAdapter.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -30,6 +30,7 @@\n import com.google.common.primitives.Ints;\n import com.google.inject.assistedinject.Assisted;\n import org.graylog.autovalue.WithBeanGetter;\n+import org.graylog2.lookup.AllowedAuxiliaryPathChecker;\n import org.graylog2.plugin.lookup.LookupCachePurge;\n import org.graylog2.plugin.lookup.LookupDataAdapter;\n import org.graylog2.plugin.lookup.LookupDataAdapterConfiguration;\n@@ -63,6 +64,7 @@\n     public static final String NAME = \"csvfile\";\n \n     private final Config config;\n+    private final AllowedAuxiliaryPathChecker pathChecker;\n     private final AtomicReference<Map<String, String>> lookupRef = new AtomicReference<>(ImmutableMap.of());\n \n     private FileInfo fileInfo = FileInfo.empty();\n@@ -71,9 +73,11 @@\n     public CSVFileDataAdapter(@Assisted(\"id\") String id,\n                               @Assisted(\"name\") String name,\n                               @Assisted LookupDataAdapterConfiguration config,\n-                              MetricRegistry metricRegistry) {\n+                              MetricRegistry metricRegistry,\n+                              AllowedAuxiliaryPathChecker pathChecker) {\n         super(id, name, config, metricRegistry);\n         this.config = (Config) config;\n+        this.pathChecker = pathChecker;\n     }\n \n     @Override\n@@ -82,6 +86,9 @@ public void doStart() throws Exception {\n         if (isNullOrEmpty(config.path())) {\n             throw new IllegalStateException(\"File path needs to be set\");\n         }\n+        if (!pathChecker.fileIsInAllowedPath(Paths.get(config.path()))) {\n+            throw new IllegalStateException(\"The specified CSV file is not in a allowed path.\");\n+        }\n         if (config.checkInterval() < 1) {\n             throw new IllegalStateException(\"Check interval setting cannot be smaller than 1\");\n         }"
  },
  {
    "sha": "74c5333de0eb98dfcd658d044a82f2f8b6a878a2",
    "filename": "graylog2-server/src/test/java/org/graylog2/configuration/PathConfigurationTest.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/configuration/PathConfigurationTest.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/configuration/PathConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/test/java/org/graylog2/configuration/PathConfigurationTest.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+package org.graylog2.configuration;\n+\n+import com.github.joschi.jadconfig.JadConfig;\n+import com.github.joschi.jadconfig.RepositoryException;\n+import com.github.joschi.jadconfig.ValidationException;\n+import com.github.joschi.jadconfig.repositories.InMemoryRepository;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class PathConfigurationTest {\n+    public static final String BIN_PATH = \"bin\";\n+    public static final String DATA_PATH = \"data\";\n+    public static final String PLUGINS_PATH = \"plugins\";\n+    @Rule\n+    public final ExpectedException expectedException = ExpectedException.none();\n+\n+    @Rule\n+    public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    private Map<String, String> validProperties;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        validProperties = new HashMap<>();\n+\n+        // Required properties\n+        validProperties.put(\"bin_dir\", BIN_PATH);\n+        validProperties.put(\"data_dir\", DATA_PATH);\n+        validProperties.put(\"plugin_dir\", PLUGINS_PATH);\n+    }\n+\n+    @Test\n+    public void testBaseConfiguration() throws ValidationException, RepositoryException {\n+        PathConfiguration configuration = new PathConfiguration();\n+        final JadConfig jadConfig = new JadConfig(new InMemoryRepository(validProperties), configuration);\n+        jadConfig.process();\n+        assertEquals(BIN_PATH, configuration.getBinDir().toString());\n+        assertEquals(DATA_PATH, configuration.getDataDir().toString());\n+        assertEquals(PLUGINS_PATH, configuration.getPluginDir().toString());\n+        assertTrue(configuration.getAllowedAuxiliaryPaths().isEmpty());\n+    }\n+\n+    @Test\n+    public void testAllowedAuxiliaryPaths() throws ValidationException, RepositoryException {\n+        validProperties.put(\"allowed_auxiliary_paths\", \"/permitted-dir,/another-valid-dir\");\n+        PathConfiguration configuration = new PathConfiguration();\n+        final JadConfig jadConfig = new JadConfig(new InMemoryRepository(validProperties), configuration);\n+        jadConfig.process();\n+        assertEquals(2,configuration.getAllowedAuxiliaryPaths().size());\n+    }\n+}"
  },
  {
    "sha": "47af4a00a247ac7be32775a93d9b56533c9f8c7f",
    "filename": "graylog2-server/src/test/java/org/graylog2/configuration/converters/SortedPathSetConverterTest.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/configuration/converters/SortedPathSetConverterTest.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/configuration/converters/SortedPathSetConverterTest.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/test/java/org/graylog2/configuration/converters/SortedPathSetConverterTest.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+package org.graylog2.configuration.converters;\n+\n+import com.github.joschi.jadconfig.ParameterException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SortedPathSetConverterTest {\n+    private SortedPathSetConverter converter;\n+\n+    @Before\n+    public void setUp() {\n+        converter = new SortedPathSetConverter();\n+    }\n+\n+    @Test\n+    public void testConvertFrom() {\n+        // Verify path set sizes.\n+        assertEquals(0, converter.convertFrom(\"\").size());\n+        assertEquals(0, converter.convertFrom(\",\").size());\n+        assertEquals(0, converter.convertFrom(\",,,\").size());\n+        assertEquals(1, converter.convertFrom(\"/another-dir\").size());\n+        assertEquals(1, converter.convertFrom(\"/another-dir;/some-dir;/finally-dir\").size());\n+        assertEquals(3, converter.convertFrom(\"/another-dir, /some-dir, /finally-dir\").size());\n+\n+        // Verify path sorting.\n+        final String unsortedPaths = \"/some-dir,/Z-dir,/z-dir,/another-dir/sub,/another-dir\";\n+        final SortedSet<Path> result = converter.convertFrom(unsortedPaths);\n+        assertEquals(5, result.size());\n+        assertEquals(\"Paths were not sorted as expected\",\n+                     \"/Z-dir,/another-dir,/another-dir/sub,/some-dir,/z-dir\",\n+                     result.stream().map(Path::toString).collect(Collectors.joining(\",\")));\n+    }\n+\n+    @Test\n+    public void testConvertTo() {\n+        TreeSet<Path> sortedSet = new TreeSet<>(Comparator.comparing(Path::toString));\n+        sortedSet.add(Paths.get(\"/some-dir\"));\n+        sortedSet.add(Paths.get(\"/Z-dir\"));\n+        sortedSet.add(Paths.get(\"/z-dir\"));\n+        sortedSet.add(Paths.get(\"/another-dir/sub\"));\n+        sortedSet.add(Paths.get(\"/another-dir\"));\n+        assertEquals(\"/Z-dir,/another-dir,/another-dir/sub,/some-dir,/z-dir\", converter.convertTo(sortedSet));\n+    }\n+\n+    @Test\n+    public void testConvertFromEmpty() {\n+        assertEquals(new TreeSet<>(), converter.convertFrom(\"\"));\n+    }\n+\n+    @Test\n+    public void testConvertToEmpty() {\n+        assertEquals(\"\", converter.convertTo(new TreeSet<>()));\n+    }\n+\n+    @Test(expected = ParameterException.class)\n+    public void testConvertFromNull() {\n+        converter.convertFrom(null);\n+    }\n+\n+    @Test(expected = ParameterException.class)\n+    public void testConvertToNull() {\n+        converter.convertTo(null);\n+    }\n+}"
  },
  {
    "sha": "1c3bb4b9af0025d4d0e3c15638af460b6fe1566d",
    "filename": "graylog2-server/src/test/java/org/graylog2/lookup/AllowedAuxiliaryPathCheckerTest.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/lookup/AllowedAuxiliaryPathCheckerTest.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/lookup/AllowedAuxiliaryPathCheckerTest.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/test/java/org/graylog2/lookup/AllowedAuxiliaryPathCheckerTest.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+package org.graylog2.lookup;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.TreeSet;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class AllowedAuxiliaryPathCheckerTest {\n+\n+    AllowedAuxiliaryPathChecker pathChecker;\n+\n+    @Test\n+    public void inAllowedPath() throws IOException {\n+        final Path filePath = validPath();\n+        final Path permittedPath = validPath();\n+        when(filePath.startsWith(eq(permittedPath))).thenReturn(true);\n+\n+        pathChecker = new AllowedAuxiliaryPathChecker(new TreeSet<>(Collections.singleton(permittedPath)));\n+        assertTrue(pathChecker.fileIsInAllowedPath(filePath));\n+    }\n+\n+    private Path validPath() throws IOException {\n+        final Path filePath = mock(Path.class);\n+        when(filePath.toRealPath()).thenReturn(filePath);\n+        return filePath;\n+    }\n+\n+    @Test\n+    public void outsideOfAllowedPath() throws IOException {\n+        final Path filePath = validPath();\n+        final Path permittedPath = validPath();\n+        when(filePath.startsWith(eq(permittedPath))).thenReturn(false);\n+\n+        pathChecker = new AllowedAuxiliaryPathChecker(new TreeSet<>(Collections.singleton(permittedPath)));\n+        assertFalse(pathChecker.fileIsInAllowedPath(filePath));\n+        verify(filePath, times(1)).startsWith(eq(permittedPath));\n+    }\n+\n+    @Test\n+    public void noPathsFileLocationOk() {\n+        pathChecker = new AllowedAuxiliaryPathChecker(new TreeSet<Path>(Collections.EMPTY_SET));\n+        assertTrue(pathChecker.fileIsInAllowedPath(Paths.get(\"\")));\n+    }\n+\n+    @Test\n+    public void fileDoesNotExist() throws IOException {\n+        final Path filePath = mock(Path.class);\n+        when(filePath.toRealPath()).thenReturn(null);\n+\n+        pathChecker = new AllowedAuxiliaryPathChecker(new TreeSet<>(Collections.singleton(Paths.get(\"\"))));\n+        assertFalse(pathChecker.fileIsInAllowedPath(filePath));\n+    }\n+\n+    @Test\n+    public void permittedPathDoesNotExist() throws IOException {\n+        final Path permittedPath = mock(Path.class);\n+        when(permittedPath.toRealPath()).thenReturn(null);\n+\n+        pathChecker = new AllowedAuxiliaryPathChecker(new TreeSet<>(Collections.singleton(permittedPath)));\n+        assertFalse(pathChecker.fileIsInAllowedPath(validPath()));\n+    }\n+\n+    @Test\n+    public void realPathNullWhenDoesNotExist() throws IOException {\n+        final Path path = mock(Path.class);\n+        when(path.toRealPath()).thenThrow(new IOException());\n+        assertNull(AllowedAuxiliaryPathChecker.resolveRealPath(path));\n+    }\n+}"
  },
  {
    "sha": "fedc69ced8d34d779231c55cae4e77d89dda33b4",
    "filename": "graylog2-server/src/test/java/org/graylog2/lookup/adapters/CSVFileDataAdapterTest.java",
    "status": "modified",
    "additions": 58,
    "deletions": 24,
    "changes": 82,
    "blob_url": "https://github.com/Graylog2/graylog2-server/blob/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/lookup/adapters/CSVFileDataAdapterTest.java",
    "raw_url": "https://github.com/Graylog2/graylog2-server/raw/39615f91bd317e066723a52758a4658213d3d828/graylog2-server/src/test/java/org/graylog2/lookup/adapters/CSVFileDataAdapterTest.java",
    "contents_url": "https://api.github.com/repos/Graylog2/graylog2-server/contents/graylog2-server/src/test/java/org/graylog2/lookup/adapters/CSVFileDataAdapterTest.java?ref=39615f91bd317e066723a52758a4658213d3d828",
    "patch": "@@ -18,37 +18,47 @@\n \n import com.codahale.metrics.MetricRegistry;\n import com.google.common.io.Resources;\n+import org.graylog2.lookup.AllowedAuxiliaryPathChecker;\n import org.graylog2.plugin.lookup.LookupResult;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n import java.net.URL;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;\n+import static org.graylog2.lookup.adapters.CSVFileDataAdapter.Config;\n+import static org.graylog2.lookup.adapters.CSVFileDataAdapter.NAME;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n \n public class CSVFileDataAdapterTest {\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n     private final Path csvFile;\n     private CSVFileDataAdapter csvFileDataAdapter;\n \n+    @Mock\n+    AllowedAuxiliaryPathChecker pathChecker;\n+\n     public CSVFileDataAdapterTest() throws Exception {\n         final URL resource = Resources.getResource(\"org/graylog2/lookup/adapters/CSVFileDataAdapterTest.csv\");\n-        this.csvFile = Paths.get(resource.toURI());\n+        final Path csvFilePath = Paths.get(resource.toURI());\n+        this.csvFile = csvFilePath;\n     }\n \n     @Test\n     public void doGet_successfully_returns_values() throws Exception {\n-        final CSVFileDataAdapter.Config config = CSVFileDataAdapter.Config.builder()\n-                .type(org.graylog2.lookup.adapters.CSVFileDataAdapter.NAME)\n-                .path(csvFile.toString())\n-                .separator(\",\")\n-                .quotechar(\"\\\"\")\n-                .keyColumn(\"key\")\n-                .valueColumn(\"value\")\n-                .checkInterval(60)\n-                .caseInsensitiveLookup(false)\n-                .build();\n-        csvFileDataAdapter = new CSVFileDataAdapter(\"id\", \"name\", config, new MetricRegistry());\n+        final Config config = baseConfig();\n+        csvFileDataAdapter = spy(new CSVFileDataAdapter(\"id\", \"name\", config, new MetricRegistry(), pathChecker));\n+        when(pathChecker.fileIsInAllowedPath(isA(Path.class))).thenReturn(true);\n         csvFileDataAdapter.doStart();\n \n         assertThat(csvFileDataAdapter.doGet(\"foo\")).isEqualTo(LookupResult.single(\"23\"));\n@@ -58,21 +68,45 @@ public void doGet_successfully_returns_values() throws Exception {\n \n     @Test\n     public void doGet_successfully_returns_values_with_key_and_value_column_identical() throws Exception {\n-        final CSVFileDataAdapter.Config config = CSVFileDataAdapter.Config.builder()\n-                .type(org.graylog2.lookup.adapters.CSVFileDataAdapter.NAME)\n-                .path(csvFile.toString())\n-                .separator(\",\")\n-                .quotechar(\"\\\"\")\n-                .keyColumn(\"key\")\n-                .valueColumn(\"key\")\n-                .checkInterval(60)\n-                .caseInsensitiveLookup(false)\n-                .build();\n-        csvFileDataAdapter = new CSVFileDataAdapter(\"id\", \"name\", config, new MetricRegistry());\n+        final Config config = Config.builder()\n+                                    .type(NAME)\n+                                    .path(csvFile.toString())\n+                                    .separator(\",\")\n+                                    .quotechar(\"\\\"\")\n+                                    .keyColumn(\"key\")\n+                                    .valueColumn(\"key\")\n+                                    .checkInterval(60)\n+                                    .caseInsensitiveLookup(false)\n+                                    .build();\n+        csvFileDataAdapter = spy(new CSVFileDataAdapter(\"id\", \"name\", config, new MetricRegistry(), pathChecker));\n+        when(pathChecker.fileIsInAllowedPath((isA(Path.class)))).thenReturn(true);\n         csvFileDataAdapter.doStart();\n \n         assertThat(csvFileDataAdapter.doGet(\"foo\")).isEqualTo(LookupResult.single(\"foo\"));\n         assertThat(csvFileDataAdapter.doGet(\"bar\")).isEqualTo(LookupResult.single(\"bar\"));\n         assertThat(csvFileDataAdapter.doGet(\"quux\")).isEqualTo(LookupResult.empty());\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void doGet_failure_filePathInvalid() throws Exception {\n+        final Config config = baseConfig();\n+        when(pathChecker.fileIsInAllowedPath((isA(Path.class)))).thenReturn(false);\n+        csvFileDataAdapter = new CSVFileDataAdapter(\"id\", \"name\", config, new MetricRegistry(), pathChecker);\n+        assertThatThrownBy(() -> csvFileDataAdapter.doStart())\n+                .isExactlyInstanceOf(IllegalStateException.class)\n+                .hasMessageStartingWith(\"The specified CSV file is not in a allowed path.\");\n+    }\n+\n+    private Config baseConfig() {\n+        return Config.builder()\n+                     .type(NAME)\n+                     .path(csvFile.toString())\n+                     .separator(\",\")\n+                     .quotechar(\"\\\"\")\n+                     .keyColumn(\"key\")\n+                     .valueColumn(\"value\")\n+                     .checkInterval(60)\n+                     .caseInsensitiveLookup(false)\n+                     .build();\n+    }\n+}"
  }
]
