[
  {
    "sha": "e788cd1c9e50a3fb19c9a417a37dd46c2203189f",
    "filename": "ChatClient/pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/pom.xml",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/pom.xml",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/ChatClient/pom.xml?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -10,6 +10,14 @@\n     <modelVersion>4.0.0</modelVersion>\n \n     <artifactId>ChatClient</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.example</groupId>\n+            <artifactId>Core</artifactId>\n+            <version>1.0-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies>\n \n \n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "268e802a232885138338be4d60073dcc32f77b3a",
    "filename": "ChatClient/src/main/java/ChatApp.java",
    "status": "modified",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/java/ChatApp.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/java/ChatApp.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/ChatClient/src/main/java/ChatApp.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -4,25 +4,24 @@\n import javafx.scene.Parent;\n import javafx.scene.Scene;\n import javafx.stage.Stage;\n-\n import java.io.IOException;\n \n public class ChatApp extends Application {\n-\n     @Override\n     public void start(Stage primaryStage) throws Exception {\n         Network network = Network.getInstance();\n         Parent root = FXMLLoader.load(getClass().getResource(\"chat.fxml\"));\n+ \n         primaryStage.setScene(new Scene(root));\n-        primaryStage.setTitle(\"Runov VV chat J2\");\n+        primaryStage.setTitle(\"J2-Runov VV. chat app. Client__\");\n         primaryStage.setResizable(true);\n         primaryStage.show();\n \n         primaryStage.setOnCloseRequest(request->{\n             try {\n-                network.writeMessage(\"/quit\");\n+                network.writeMessage(new QuitRequest());\n             } catch (IOException e) {\n                 e.printStackTrace();\n             } });\n     }\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ae5b7746640881eb8a47aed7bf57624d3727de57",
    "filename": "ChatClient/src/main/java/ChatController.java",
    "status": "modified",
    "additions": 119,
    "deletions": 41,
    "changes": 160,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/java/ChatController.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/java/ChatController.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/ChatClient/src/main/java/ChatController.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -1,75 +1,153 @@\n import javafx.application.Platform;\n+import javafx.event.ActionEvent;\n import javafx.fxml.Initializable;\n import javafx.scene.control.ListView;\n \n-import java.awt.*;\n-import java.awt.event.ActionEvent;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n+import java.io.File;\n import java.io.IOException;\n-import java.net.Socket;\n import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.ResourceBundle;\n+import java.util.concurrent.TimeUnit;\n \n public class ChatController implements Initializable {\n+    public javafx.scene.control.TextField textUserInput;\n+    public javafx.scene.control.TextField textUserInputPassword;\n+    public javafx.scene.control.TextArea textUserHistory;\n     private Network network;\n-\n-    public TextField textUserInput;\n     public ListView<String> listView;\n+    public ListView<String> userList;\n+    private String nick;\n+    private boolean Authorized = false;\n+    private java.util.List<String> historyList;\n \n-    public void sendMessage(ActionEvent event) {\n+    public void sendMessage(ActionEvent actionEvent) {\n         try {\n-            network.writeMessage(this.textUserInput.getText());\n-    //       this.textUserInput.clear();\n+            if(historyList == null)\n+                historyList = new ArrayList<>();\n+            String userText = this.textUserInput.getText();\n+            if (userText.startsWith(\"/chNick\")) {\n+                network.writeMessage(new SettingsRequest(SettingsRequest.Type.changeNick, nick,userText) );\n+                return;\n+            }\n+            historyList.add(userText);\n+            String to  = userList.getSelectionModel().getSelectedItem();\n+            if (to != null) {\n+                network.writeMessage(TextMessage.of(nick,to, userText) );\n+            } else {\n+                network.writeMessage(TextMessage.of(nick, userText));\n+            }\n+\n+            this.textUserInput.clear();\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n     }\n-//       <TextField fx:id=\"textuserinput\" onAction=\"#sendMessage\" prefHeight=\"27.0\" prefWidth=\"22.0\" />\n-//        <Button mnemonicParsing=\"false\" onAction=\"#sendMessage\" text=\"����!\"/>\n \n     @Override\n     public void initialize(URL location, ResourceBundle resources) {\n+        System.out.println(\"Client.ChatController.initialize ... \");\n+\n         this.network = Network.getInstance();\n+        new Thread( ()-> {\n+            try {\n+                network.writeMessage(new NickRequest());\n+                while (true) {\n+                    network.writeMessage(new UserListRequest());\n+                    TimeUnit.MILLISECONDS.sleep(200);\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }).start();\n+\n         new Thread( ()->{\n             try {\n+                long ln = -1L;\n                 while (true) {\n-                    String mes = network.readMessage();\n-                    if (mes.equals(\"/quit\")) {\n+                    if (ln != -1L && !this.Authorized ) {\n+                       // Добавить отключение неавторизованных пользователей по таймауту\n+                       // (120 сек. ждём после подключения клиента, и если он не авторизовался за это время, закрываем соединение).\n+                        if ( (System.currentTimeMillis() - ln )/1000 > 120 ) {\n+                            System.out.println(\"client Quitting...from client side\");\n+                            network.close();\n+                        }\n+                    }\n+                    AbstractMessage mes = this.network.readMessage();\n+                    if (mes instanceof NickResponse) {\n+                        this.nick  = ((NickResponse) mes).getNick();\n+                        ln = System.currentTimeMillis();\n+                        loadHistory();\n+                    } else if (mes instanceof AuthRequest) {\n+                        this.Authorized = ((AuthRequest) mes).isAuthorized();\n+                        System.out.println(\"client AuthRequest...\");\n+                    } else if (mes instanceof QuitRequest) {\n                         System.out.println(\"client Quitting...\");\n                         network.close();\n-                        break;\n+                    } else if (mes instanceof  SettingsRequest ) {\n+                        if( ((SettingsRequest)mes).type == SettingsRequest.Type.changeNick) {\n+                            saveHistory();\n+                            textUserHistory.clear();\n+                        }\n+                    } else if (mes instanceof  TextMessage ) {\n+                        TextMessage m1 = (TextMessage)mes;\n+                        String txt = m1.getSendAt() + \":\" + m1.getFrom() + \"--\" + m1.getMessagebody();\n+                        Platform.runLater(() -> listView.getItems().add(txt));\n+                    } else if (mes instanceof UserListMessage) {\n+                        Platform.runLater(() -> {\n+                            userList.getItems().clear();\n+                            userList.getItems().addAll(((UserListMessage) mes).getNames());\n+                        });\n                     }\n-                    Platform.runLater(()->listView.getItems().add(mes));\n-                }\n-            } catch (IOException e) {\n+                } // while\n+            } catch (IOException | ClassNotFoundException e) {\n                 System.err.println(e.getMessage());\n-                Platform.runLater(()->listView.getItems().add(\"hi all! Serer caput!\"));\n-            }\n+                Platform.runLater(()->listView.getItems().add(\"hi all! Server caput!\"));\n             }\n-         );\n+        }).start();\n     }\n-}\n \n-/*\n-\n- <ImageView fitHeight=\"150.0\" fitWidth=\"140.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n-        <image><Image url=\"http://www.imaginaformacion.com/wp-content/uploads/2010/06/JavaFx.png\" /></image>\n-    </ImageView>\n-    <Region prefHeight=\"200.0\" prefWidth=\"200.0\" HBox.hgrow=\"ALWAYS\" />\n-    <Label prefHeight=\"17.0\" prefWidth=\"205.0\" text=\"Chat app\" />\n-    <Region prefHeight=\"200.0\" prefWidth=\"200.0\" HBox.hgrow=\"ALWAYS\" />\n-\n-   <VBox alignment=\"CENTER_RIGHT\" prefHeight=\"400.0\" prefWidth=\"200.0\">\n-        <children>\n-        </children>\n-    </VBox>\n+    public void quit(ActionEvent actionEvent) throws IOException {\n+        saveHistory();\n+        network.writeMessage(new QuitRequest());\n+    }\n \n- <AnchorPane xmlns=\"http://javafx.com/javafx\"\n-            xmlns:fx=\"http://javafx.com/fxml\"\n-            fx:controller=\"Chat\"\n-            prefHeight=\"400.0\" prefWidth=\"600.0\">\n+    public void sendAuthRequest(ActionEvent actionEvent) throws IOException {\n+        network.writeMessage(new AuthRequest(this.nick, this.textUserInputPassword.getText()));\n+    }\n+    /*\n+    Добавить в сетевой чат запись локальной истории в текстовый файл на клиенте.\n+    Для каждой учетной записи файл с историей должен называться history_[login].txt.\n+    (Например, history_login1.txt, history_user111.txt)\n+    ** После загрузки клиента показывать ему последние 100 строк истории чата.   */\n \n-</AnchorPane>\n+    private void loadHistory() throws IOException {\n+        final int maxHistory = 100;\n+        textUserHistory.clear();\n+        this.historyList = Files.readAllLines(getHistoryFile());\n+        historyList.forEach(System.out::println);\n+        for (int i = historyList.size()-1,j=0; i >= 0 && j <= maxHistory; i--,j++) {\n+            textUserHistory.appendText(historyList.get(i) + \"\\n\");\n+        }\n+    }\n+    private void saveHistory() throws IOException {\n+        try {\n+            Files.write(getHistoryFile(), this.historyList, StandardCharsets.UTF_8);\n \n- */\n\\ No newline at end of file\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    private Path getHistoryFile() throws IOException {\n+            //Path path = Paths.get(ChatApp.class.getResource(\".\").toURI());\n+            File historyFile = new File(\"hist_\" + this.nick + \".txt\");\n+            if (!historyFile.exists()) {\n+                historyFile.createNewFile();\n+            }\n+            return Paths.get(historyFile.getPath());\n+    }\n+}"
  },
  {
    "sha": "db7b31833a9e5d48b506938d6427f36f697d228b",
    "filename": "ChatClient/src/main/java/Network.java",
    "status": "modified",
    "additions": 30,
    "deletions": 17,
    "changes": 47,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/java/Network.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/java/Network.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/ChatClient/src/main/java/Network.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -1,19 +1,16 @@\n import javafx.application.Platform;\n import javafx.scene.control.ListView;\n-\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n \n public class Network {\n-    private DataInputStream in;\n-    private DataOutputStream out;\n+    private ObjectInputStream in;   // DataInputStream\n+    private ObjectOutputStream out;\n     private Socket socket;\n \n     private final static int DEFAULT_PORT = 8189;\n \n-    public static Network instance;\n+    public static Network instance = null;\n     public static Network getInstance() {\n         if( instance == null )\n             instance = new Network();\n@@ -23,40 +20,56 @@ public static Network getInstance() {\n     private Network() {\n         try {\n             this.socket = new Socket(\"localhost\", DEFAULT_PORT);\n-            this.out = new DataOutputStream(this.socket.getOutputStream());\n-            this.in = new DataInputStream(this.socket.getInputStream());\n+            this.out = new ObjectOutputStream(this.socket.getOutputStream());\n+            this.in = new ObjectInputStream(this.socket.getInputStream());\n //            new Thread( () -> {  try {\n //                while (true) {\n //                    String ms = in.readUTF();\n //                    Platform.runLater(()->{ listView.getItems().add(ms); });\n //                } } catch (Exception e) { System.err.println(e.getMessage()); } } ).start();\n         } catch (Exception e) {\n-            System.err.println(e.getMessage());\n+            System.err.println(\"Problem in serer !\" + e.getMessage());\n         }\n     }\n \n-    public String readMessage() throws IOException { return in.readUTF(); }\n+    public AbstractMessage readMessage() throws IOException, ClassNotFoundException {\n+        return (AbstractMessage) in.readObject();\n+    }\n \n-    public void writeMessage(String msg) throws IOException {\n-        out.writeUTF(msg);\n-        out.flush();\n+    public void writeMessage(AbstractMessage msg) throws IOException {\n+        this.out.writeObject(msg);\n+        this.out.flush();\n     }\n \n     public void close() {\n+        System.out.println(\"Network - close\");\n         try {\n-            out.close();\n+            this.out.close();\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n         try {\n-            in.close();\n+            this.in.close();\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n         try {\n-            socket.close();\n+            this.socket.close();\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n     }\n }\n+/*\n+      <HBox prefWidth=\"200\" style=\"-fx-border-color: #00A00E;\">\n+            <ImageView fitHeight=\"16.0\" fitWidth=\"16.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n+                <image><Image url=\"http://www.almada.ru/images/i/newsland.gif\" /></image>\n+            </ImageView>\n+            <Label alignment=\"BOTTOM_LEFT\" prefHeight=\"17.0\" prefWidth=\"180.0\" text=\"Client\" />\n+        </HBox>\n+        <HBox prefWidth=\"40\" style=\"-fx-border-color: #00A00E;\">\n+            <TextField fx:id=\"textUserInput\" onAction=\"#sendMessage\" style=\"-fx-background-color: #8AeAeF;\" prefHeight=\"27.0\" prefWidth=\"150.0\" />\n+            <Button mnemonicParsing=\"false\" prefWidth=\"50\" onAction=\"#sendMessage\" text=\"Go!\"/>\n+        </HBox>\n+\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "e3f787103dfcbf508a355f17428c41220d982b30",
    "filename": "ChatClient/src/main/resources/chat.fxml",
    "status": "modified",
    "additions": 19,
    "deletions": 9,
    "changes": 28,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/resources/chat.fxml",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/ChatClient/src/main/resources/chat.fxml",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/ChatClient/src/main/resources/chat.fxml?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -3,13 +3,23 @@\n <?import javafx.scene.layout.*?>\n <?import javafx.scene.layout.*?>\n \n-<VBox fx:id=\"ChatController\" alignment=\"CENTER\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"94.0\" prefWidth=\"600.0\"\n-      xmlns=\"http://javafx.com/javafx/8.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\">\n-    <ListView fx:id=\"listView\" prefHeight=\"600\" prefWidth=\"100\" />\n-    <HBox prefHeight=\"40\" prefWidth=\"100\" >\n-        <Label prefHeight=\"17.0\" prefWidth=\"100.0\" text=\"Label Inside the VBox\" />\n-        <TextField fx:id=\"textuserinput\" onAction=\"#sendMessage\" prefHeight=\"27.0\" prefWidth=\"22.0\" />\n-        <Button mnemonicParsing=\"false\" onAction=\"#sendMessage\" text=\"����!\"/>\n-\n-    </HBox>\n+<VBox fx:controller=\"ChatController\" alignment=\"CENTER\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"200.0\" xmlns=\"http://javafx.com/javafx/8.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\">\n+    <MenuBar VBox.vgrow=\"NEVER\" prefHeight=\"12\">\n+        <Menu mnemonicParsing=\"false\" text=\"File\">\n+            <MenuItem onAction=\"#quit\" mnemonicParsing=\"false\" text=\"Выход\" />\n+            <MenuItem onAction=\"#sendAuthRequest\" mnemonicParsing=\"false\" text=\"Авторизация\" />\n+        </Menu>\n+    </MenuBar>\n+    <AnchorPane VBox.vgrow=\"ALWAYS\">\n+        <TextField fx:id=\"textUserInput\" onAction=\"#sendMessage\" style=\"-fx-background-color: #8AeAeF;\" prefHeight=\"27.0\" prefWidth=\"150.0\" />\n+        <Button mnemonicParsing=\"false\" layoutX=\"500\" layoutY=\"300\" prefHeight=\"27\" prefWidth=\"50\" onAction=\"#sendMessage\" text=\"Go!\"/>\n+\n+        <ListView fx:id=\"listView\" layoutX=\"240\"  prefHeight=\"400\" prefWidth=\"200\" style=\"-fx-background-color: #e6e6e6;\"  />\n+        <ListView fx:id=\"userList\" layoutX=\"14\"   prefHeight=\"400\" prefWidth=\"200\" style=\"-fx-background-color: #e6e6e6;\"  />\n+\n+        <TextField fx:id=\"textUserInputPassword\" onAction=\"#sendAuthRequest\" style=\"-fx-background-color: #8AeAeF;\" prefHeight=\"27.0\" prefWidth=\"150.0\" />\n+        <TextArea fx:id=\"textUserHistory\" />\n+    </AnchorPane>\n+\n+\n </VBox>\n\\ No newline at end of file"
  },
  {
    "sha": "8ccb3fc96471ac431bfce58b3513c97a6b6609f0",
    "filename": "Core/pom.xml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/pom.xml",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/pom.xml",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/pom.xml?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>JII_Chat</artifactId>\n+        <groupId>org.example</groupId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>Core</artifactId>\n+\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "38e95a6052aeed178741439d1ab0614d94d84a93",
    "filename": "Core/src/main/java/AbstractMessage.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/AbstractMessage.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/AbstractMessage.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/AbstractMessage.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,5 @@\n+import java.io.Serializable;\n+\n+public class AbstractMessage implements Serializable {\n+\n+}"
  },
  {
    "sha": "7e2533ae05d73d50de0afa28fcb40c2dea809f3f",
    "filename": "Core/src/main/java/AuthRequest.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/AuthRequest.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/AuthRequest.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/AuthRequest.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,28 @@\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+public class AuthRequest extends AbstractMessage {\n+    private String keyToken;\n+    private String userNick;\n+    private boolean authorized = false;\n+    public AuthRequest(String userNick, String userPassword) {\n+        this.keyToken = Util.convertPasswordToHex(userPassword);\n+        this.userNick = userNick;\n+    }\n+\n+    public boolean check() {\n+        try {\n+            MySQLDbHandler dbHandler = MySQLDbHandler.getInstance();\n+            this.authorized = dbHandler.checkAuthorizeUser(userNick,keyToken);\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+        return this.authorized;\n+    }\n+\n+    public boolean isAuthorized() {\n+        return authorized;\n+    }\n+}"
  },
  {
    "sha": "e0ea04206e053770ed4805521cd088d17842e3dc",
    "filename": "Core/src/main/java/MySQLDbHandler.java",
    "status": "added",
    "additions": 147,
    "deletions": 0,
    "changes": 147,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/MySQLDbHandler.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/MySQLDbHandler.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/MySQLDbHandler.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,147 @@\n+import org.sqlite.JDBC;\n+import java.sql.*;\n+import java.util.*;\n+\n+public class MySQLDbHandler {\n+    private static final String CON_STR = \"jdbc:sqlite:C:/sql/db_1.db\";\n+//    private Connection connection = null;  -- вариант реализации\n+\n+    private static final String SQL_INSERT_USER = \"insert into t_Users (`DisplayName`, `Nick`, `Password`) values (?,?,?)\";\n+    private static final String SQL_SEL_USER_BY_NICK_PASS = \"select * from t_Users where Nick = ? and Password = ?\";\n+    private static final String SQL_UPD_USER_NICK = \"UPDATE t_Users SET Nick = ? WHERE Nick = ?\";\n+\n+    /*   ------------------------  create scema .sql\n+    CREATE TABLE t_Users (\n+            ID          INTEGER  PRIMARY KEY AUTOINCREMENT UNIQUE,\n+            DisplayName TEXT     NOT NULL,\n+            Nick        TEXT     NOT NULL,\n+            Password    TEXT     NOT NULL,\n+            DateCreated DATETIME\n+    );                  */\n+\n+    private static MySQLDbHandler instance = null;\n+    public static synchronized MySQLDbHandler getInstance() throws SQLException, ClassNotFoundException {\n+        if (instance == null)\n+            instance = new MySQLDbHandler();\n+        return instance;\n+    }\n+//  --------------------------------------\n+//  пока реализовано по варианту не держать коннект к БД открытым ...  соотв. этот код закоентирован..\n+    private MySQLDbHandler() throws SQLException, ClassNotFoundException {\n+        Class.forName(\"org.sqlite.JDBC\");\n+        //       DriverManager.registerDriver(new JDBC());\n+        //       this.connection = DriverManager.getConnection(CON_STR);\n+    }\n+    /*\n+    public void CloseConnection() throws SQLException {\n+        this.connection.close();\n+        this.connection = null;\n+    } */\n+// --------------------------------------\n+\n+    public void addUser(String userName, String userNick, String userPassword) {\n+        try (Connection connection = DriverManager.getConnection(CON_STR);\n+             PreparedStatement st = connection.prepareStatement(SQL_INSERT_USER)) {\n+                st.setString(1, userName);  // display name\n+                st.setString(2, userNick);\n+                st.setString(3, Util.convertPasswordToHex(userPassword));\n+                int r = st.executeUpdate();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        } finally {\n+\n+        }\n+    }\n+\n+    public boolean checkAuthorizeUser(String userNick, String userPassword) {\n+        int id = getUserByNickAndPass(userNick,Util.convertPasswordToHex(userPassword));\n+        return (id != 0);\n+    }\n+\n+    private int getUserByNickAndPass(String userNick, String PassHex) {\n+        int userID = 0;\n+        try (Connection connection = DriverManager.getConnection(CON_STR);\n+             PreparedStatement st = connection.prepareStatement(SQL_SEL_USER_BY_NICK_PASS)) {\n+            st.setString(1, userNick);  //\n+            st.setString(2, PassHex);\n+            ResultSet rs = st.executeQuery();\n+            if( rs.next() ) {\n+                userID = rs.getInt(\"Id\");\n+            };\n+        } catch (SQLException e) { // 554F1CF2B72FB45A0DF348B77B1216585953C916AFD64C20537FAFE0D7777756\n+            e.printStackTrace();\n+        } finally {\n+\n+        }\n+        return userID;\n+    }\n+    public int getIdByNick(String Nick) {\n+        int userID = 0;\n+        try (Connection connection = DriverManager.getConnection(CON_STR);\n+             PreparedStatement st = connection.prepareStatement(String.format(\"SELECT id FROM t_Users where nick = '%s'\", Nick))) {\n+            ResultSet rs = st.executeQuery();\n+            if( rs.next() ) {\n+                userID = rs.getInt(\"Id\");\n+            };\n+\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+        return 0;\n+    }\n+\n+    public Boolean changeUserNickname (String Nick, String newNick) {\n+        try (Connection connection = DriverManager.getConnection(CON_STR);\n+             PreparedStatement st = connection.prepareStatement(SQL_UPD_USER_NICK)) {\n+                    st.setString(1, Nick);  //\n+                    st.setString(2, newNick);\n+                    int r = st.executeUpdate();;\n+                    return true;\n+        } catch (SQLException e) { // 554F1CF2B72FB45A0DF348B77B1216585953C916AFD64C20537FAFE0D7777756\n+            e.printStackTrace();\n+        } finally {\n+        }\n+        return false;\n+    }\n+//        connection();\n+//        try {\n+//            stmt.execute(\"UPDATE users set nickname=\" + newNick+\"WHERE nickname =\"+oldNick);\n+//        } catch (SQLException e) {\n+//            log.error(\"Ошибка обновления ника\");\n+//        } finally {\n+//            disconnect();\n+//        }\n+//    }\n+\n+    protected boolean testCreateUser() {\n+        String userNick = \"Test1\";\n+        String userName = \"Tester A A\";\n+        String userPass = \"Y7F8js+\";\n+        //addUser(userName,userNick,userPass);\n+        if (checkAuthorizeUser(userNick,userPass))\n+            System.out.println(\"testing user auth - Ok\");\n+        return true;\n+    }\n+/*\n+    public List<String> getAllUsers() {\n+        try (Statement statement = this.connection.createStatement()) {\n+            List<String> ul = new ArrayList<String>();\n+            ResultSet resultSet = statement.executeQuery(\"SELECT id,Nick FROM t_Users\");\n+            while (resultSet.next()) {\n+                ul.add(new String(String.valueOf(resultSet.getString(\"Nick\"))) );\n+            }\n+            return ul;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            return Collections.emptyList();\n+        }\n+    }\n+    public void deleteUser(int id) {\n+        try (PreparedStatement statement = this.connection.prepareStatement(\"DELETE FROM t_Users WHERE id = ?\")) {\n+            statement.setObject(1, id);\n+            statement.execute();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }  */\n+}"
  },
  {
    "sha": "b11efb9debe6066e359faed68a80a34bb9836450",
    "filename": "Core/src/main/java/NickRequest.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/NickRequest.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/NickRequest.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/NickRequest.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,3 @@\n+public class NickRequest extends AbstractMessage {\n+\n+}"
  },
  {
    "sha": "8c532bdc73a85f35acffcb43b14045ffb84cc2a7",
    "filename": "Core/src/main/java/NickResponse.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/NickResponse.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/NickResponse.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/NickResponse.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,10 @@\n+public class NickResponse extends AbstractMessage {\n+    private final String nick;\n+    public NickResponse(String n) {\n+        this.nick = n;\n+    }\n+\n+    public String getNick() {\n+        return nick;\n+    }\n+}"
  },
  {
    "sha": "16952c16e69f7389989dc3251e5b7c501dc7536c",
    "filename": "Core/src/main/java/QuitRequest.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/QuitRequest.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/QuitRequest.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/QuitRequest.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,3 @@\n+public class QuitRequest extends AbstractMessage {\n+\n+}"
  },
  {
    "sha": "c891f52199a3acea2d680817421fefa0ad6fab69",
    "filename": "Core/src/main/java/RegisterNewUser.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/RegisterNewUser.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/RegisterNewUser.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/RegisterNewUser.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,7 @@\n+import java.util.UUID;\n+\n+public class RegisterNewUser extends AbstractMessage {\n+    private String passwordHash;;\n+\n+}\n+"
  },
  {
    "sha": "b15bee6330e8a5b2556589e3a769932414f2fd9f",
    "filename": "Core/src/main/java/SettingsRequest.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/SettingsRequest.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/SettingsRequest.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/SettingsRequest.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,46 @@\n+import java.sql.SQLException;\n+\n+public class SettingsRequest extends  AbstractMessage {\n+    public String newNick;\n+    public String Nick;\n+\n+    public enum Type {\n+        error,\n+        changeNick\n+    }\n+    Type type;\n+\n+    public SettingsRequest(Type type,String Nick, String userCommand) {\n+        this.type = Type.error;\n+        this.Nick = Nick;\n+        if(userCommand.startsWith(\"/chNick\")) {\n+            this.newNick = userCommand.substring(7);\n+            try {\n+                int nId = MySQLDbHandler.getInstance().getIdByNick(this.Nick);\n+                if ( 0 != nId)\n+                    this.type = type;\n+                else\n+                    System.out.println(\"nik занят \");\n+            } catch (SQLException throwables) {\n+                throwables.printStackTrace();\n+            } catch (ClassNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    public boolean changeUserNickname() {\n+        try {\n+            // проверка на зантость Ника ?  по хорошеу пользователь должен идентифицироваться по внутреннеу ИД-у,\n+            int nId = MySQLDbHandler.getInstance().getIdByNick(this.Nick);\n+            if ( 0 != nId)\n+                return MySQLDbHandler.getInstance().changeUserNickname(Nick,newNick);\n+            return false;\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+}"
  },
  {
    "sha": "ed0dba41dfcddfc276b8fa80ebd10fb63a27ca38",
    "filename": "Core/src/main/java/TextMessage.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/TextMessage.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/TextMessage.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/TextMessage.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,46 @@\n+import java.time.LocalDateTime;\n+\n+public class TextMessage extends AbstractMessage {\n+    private String to;\n+    private String from;\n+    protected String messagebody;\n+    protected LocalDateTime sendAt;\n+\n+    private TextMessage() {\n+        this.sendAt = LocalDateTime.now();\n+    }\n+\n+    public static TextMessage of(String from, String msg)\n+    {\n+        TextMessage m = new TextMessage();\n+        m.from = from;\n+        m.messagebody = msg;\n+        m.sendAt = LocalDateTime.now();\n+        return m;\n+    }\n+    public static TextMessage of(String from, String to, String msg)\n+    {\n+        TextMessage m = new TextMessage();\n+        m.from = from;\n+        m.messagebody = msg;\n+        m.to = to;\n+        m.sendAt = LocalDateTime.now();\n+        return m;\n+    }\n+\n+    public String getTo() {\n+        return to;\n+    }\n+\n+    public String getFrom() {\n+        return from;\n+    }\n+\n+    public String getMessagebody() {\n+        return messagebody;\n+    }\n+\n+    public LocalDateTime getSendAt() {\n+        return sendAt;\n+    }\n+}"
  },
  {
    "sha": "6e44c6ce36207dd7bd946c4f7aab6e87ea0d67be",
    "filename": "Core/src/main/java/UserListMessage.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/UserListMessage.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/UserListMessage.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/UserListMessage.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,19 @@\n+import java.util.Collection;\n+\n+\n+public class UserListMessage extends AbstractMessage {\n+    private Collection<String> names;\n+    private UserListMessage() {}\n+\n+    public static UserListMessage of(Collection<String> names) {\n+        UserListMessage m = new UserListMessage();\n+        m.names = names;\n+        return m;\n+    }\n+\n+    public Collection<String> getNames() {\n+        return names;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "fcfd93140b61700fe82d3d373374820694d0ee12",
    "filename": "Core/src/main/java/UserListRequest.java",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/UserListRequest.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/UserListRequest.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/UserListRequest.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,2 @@\n+public class UserListRequest extends  AbstractMessage {\n+}"
  },
  {
    "sha": "6e1a9b42d8bc4857b7787e283548687df8afccf5",
    "filename": "Core/src/main/java/Util.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/Util.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Core/src/main/java/Util.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Core/src/main/java/Util.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -0,0 +1,21 @@\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+public class Util {\n+    private static final String SUPER_SELECT_SALT = \"PBKDF2WithHmacSHA1\";\n+\n+\n+    public static String convertPasswordToHex(String password) {\n+        String hashPass = \"\";\n+        try {\n+            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+            String pass1 = password+SUPER_SELECT_SALT;\n+            hashPass = javax.xml.bind.DatatypeConverter.printHexBinary(md.digest(pass1.getBytes()));\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();\n+        }\n+        return hashPass;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "7c29e7571a7e42c7788c6b9630c82d46d8cd0eb7",
    "filename": "Server/src/main/java/ClientHandler.java",
    "status": "modified",
    "additions": 142,
    "deletions": 35,
    "changes": 177,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Server/src/main/java/ClientHandler.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Server/src/main/java/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Server/src/main/java/ClientHandler.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -1,58 +1,165 @@\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import com.sun.xml.internal.ws.message.AbstractMessageImpl;\n+import java.io.*;\n import java.net.Socket;\n+import java.util.AbstractSet;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n-public class ClientHandler implements  Runnable {\n-\n+public class ClientHandler { // implements  Runnable {\n     private Socket socket;\n     private Server server;\n-    private boolean isRunning;\n+    private ObjectInputStream in;   // DataInputStream\n+    private ObjectOutputStream out;\n \n-    private DataInputStream in;\n-    private DataOutputStream out;\n     private String nickName;\n+    private static final Logger logger = Logger.getLogger(ClientHandler.class.getName());\n+\n+    private boolean isRunning;\n+    private boolean authorized;\n     private static int nClientCount = 0;\n+\n     public ClientHandler(Server srv, Socket socket) {\n         this.server = srv;\n         this.socket = socket;\n+        this.authorized = !false;\n         this.isRunning = true;\n         nClientCount++;\n-        nickName = \"CL#\"+nClientCount;\n-    }\n+        nickName = \"CL#\" + nClientCount;\n \n-    @Override\n-    public void run() {\n+        logger.setLevel(Level.ALL);\n+        Handler handler = new ConsoleHandler();\n+        handler.setLevel(Level.ALL);\n+        logger.addHandler(handler);\n+        logger.log(Level.FINE, \"Server.ClientHandler.  +client: \" + nickName);  //        System.out.println(\"Server.ClientHandler.  +client: \"+ nickName);\n+\n+        //   @Override\n+        //   public void run() {\n         try {\n-            this.out = new DataOutputStream(this.socket.getOutputStream());\n-            this.in = new DataInputStream(this.socket.getInputStream());\n-\n-            System.out.println(\"[serer DEBUG]+ client...\");\n-            while (this.isRunning)\n-            {\n-               String msh = in.readUTF(); System.out.println(\"Client ( \" + nickName + \"):\" + msh);\n-               if(msh == \"/exit\")\n-                   break;\n-               else\n-                   this.server.broadcastMessage(\"[\" + nickName + \"]:\" + msh);\n-            }\n-            server.clearClients();\n-        } catch (Exception ex){\n-            System.err.println(ex.getMessage());\n-            server.removeClient(this);\n+            this.out = new ObjectOutputStream(this.socket.getOutputStream());\n+            this.in = new ObjectInputStream(this.socket.getInputStream());\n+            new Thread(() -> {\n+                //            server.broadcastMessage(UserListMessage.of(server.getUserNickNames()));\n+                //            out.writeObject(UserListMessage.of(server.getUserNickNames()));  out.flush();\n+                try {\n+                    long ln = System.currentTimeMillis();\n+                    while (this.isRunning && !this.authorized) {\n+                        // Добавить отключение неавторизованных пользователей по таймауту (120 сек. ждём после подключения клиента, и если он не авторизовался за это время,\n+                        // закрываем соединение).//\n+                        AbstractMessage msg = null;\n+                        try {\n+                            msg = (AbstractMessage) in.readObject();\n+                            if (msg instanceof QuitRequest) {\n+                                logger.log(Level.FINE, \"QuitRequest\");\n+                                out.writeObject(msg);\n+                                out.flush();\n+                                break;\n+                            } else if (msg instanceof NickRequest) {\n+                                logger.log(Level.FINE, \"NickResponse\");\n+                                out.writeObject(new NickResponse(nickName));\n+                                out.flush();\n+                            } else if (msg instanceof AuthRequest) {\n+                                logger.log(Level.FINE, \"AuthRequest\");\n+                                AuthRequest message = (AuthRequest) msg;\n+                                this.authorized = message.check();\n+                                server.sendMessageTo2(msg, this.nickName);\n+                            }\n+                            if (!this.authorized && (System.currentTimeMillis() - ln) / 1000 > 120) {\n+                                break;  // работает без авт.\n+                            }\n+                        } catch (IOException e) {\n+                            e.printStackTrace();\n+                            logger.log(Level.SEVERE, e.getMessage(), e); // e.printStackTrace();\n+                            server.removeClient(this);\n+                            server.broadcastMessage(UserListMessage.of(server.getUserNickNames()));\n+                            // out.writeObject(UserListMessage.of(server.getUserNickNames()));\n+                            // out.flush();\n+                        } catch (ClassNotFoundException e) {\n+                            e.printStackTrace();\n+                            logger.log(Level.SEVERE, e.getMessage(), e); // e.printStackTrace();\n+                            server.removeClient(this);\n+                            server.broadcastMessage(UserListMessage.of(server.getUserNickNames()));\n+                            // out.writeObject(UserListMessage.of(server.getUserNickNames()));\n+                            // out.flush();\n+                        }\n+                    } // wh1\n+\n+                    while (this.isRunning) {\n+                        AbstractMessage msg = (AbstractMessage) in.readObject();\n+                        try {\n+                            if (msg instanceof QuitRequest) {\n+                                logger.log(Level.FINE, \"QuitRequest\");\n+                                out.writeObject(msg);\n+                                out.flush();\n+                                break;\n+                            } else if (msg instanceof NickRequest) {\n+                                logger.log(Level.FINE, \"NickResponse\");\n+                                out.writeObject(new NickResponse(nickName));\n+                                out.flush();\n+                            } else if (msg instanceof AuthRequest) {\n+                                logger.log(Level.FINE, \"AuthRequest\");\n+                                AuthRequest message = (AuthRequest) msg;\n+                                this.authorized = message.check();\n+                                server.sendMessageTo2(msg, this.nickName);\n+                            } else if (msg instanceof TextMessage) {\n+                                logger.log(Level.FINE, \"TextMessage\");\n+                                TextMessage message = (TextMessage) msg;  // String msh = in.readUTF();\n+                                if (message.getTo().length() == 0) {\n+                                    server.sendMessageTo(message);\n+                                } else {\n+                                    server.broadcastMessage(msg);\n+                                }\n+                            } else if (msg instanceof UserListRequest) {\n+                                logger.log(Level.FINE, \"UserListRequest\");\n+                                out.writeObject(UserListMessage.of(server.getUserNickNames()));\n+                                out.flush();\n+                            } // else  // if-s\n+                        } catch (IOException e) {  // ClassNotFoundException |\n+                            logger.log(Level.SEVERE, e.getMessage(), e); // e.printStackTrace();\n+                            server.removeClient(this);\n+                            server.broadcastMessage(UserListMessage.of(server.getUserNickNames()));\n+                            // out.writeObject(UserListMessage.of(server.getUserNickNames()));\n+                            // out.flush();\n+                        }\n+                    }  //  while\n+                    server.clearClients();\n+\n+                } catch (IOException | ClassNotFoundException e) {\n+                    logger.log(Level.SEVERE, e.getMessage(), e); //e.printStackTrace();\n+                }\n+            }).start(); // thread\n+        } catch (IOException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n         }\n     }\n \n-    public void SendMessage(String msg)\n+    public void SendMessage(AbstractMessage msg)\n     {\n-    //    try {\n-    //        //out.writeUTF(msg);\n-    //        //out.flush();\n-    //    } catch (IOException e) {\n-    //        e.printStackTrace();\n-    //    }\n+        try {\n+            out.writeObject(msg);\n+            out.flush();\n+        } catch (IOException e) {\n+            logger.log(Level.WARNING, e.getMessage(), e);  // e.printStackTrace();\n+        }\n     }\n     public String getNickName() { return nickName; }\n }\n+\n+/*\n+                System.out.println(\"<<<    Client ( \" + nickName + \"):\" + msh);\n+                        int nKeyW = msh.indexOf(\"/w\");\n+                        // Реализовать личные сообщения,\n+                        // если клиент пишет «/w nick3 Привет», то только клиенту с ником nick3 должно прийти сообщение «Привет»\n+                        } else if (msh.contains(\"/w\")) {\n+                        String mes2 = msh.substring(nKeyW+3);\n+                        String nickTo = mes2.substring(0, mes2.indexOf(\" \"));\n+                        System.out.println(\"to nick \" + nickTo);\n+                        this.server.sendMessageTo(nickTo, mes2.substring(nickTo.length()+1) );\n+                        } else {   // to all\n+                        this.server.broadcastMessage(\"[\" + nickName + \"]:\" + msh);\n+                        }\n+                        System.out.println(\"----------- \" + step++);\n+*/\n\\ No newline at end of file"
  },
  {
    "sha": "1e69216ecba246604812e066d2f75ccd90f45ad0",
    "filename": "Server/src/main/java/Server.java",
    "status": "modified",
    "additions": 61,
    "deletions": 11,
    "changes": 72,
    "blob_url": "https://github.com/Vladimir-Runov/JII_Chat/blob/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Server/src/main/java/Server.java",
    "raw_url": "https://github.com/Vladimir-Runov/JII_Chat/raw/657837ead2f0323e92163fa8dd19ff3d67fef0e8/Server/src/main/java/Server.java",
    "contents_url": "https://api.github.com/repos/Vladimir-Runov/JII_Chat/contents/Server/src/main/java/Server.java?ref=657837ead2f0323e92163fa8dd19ff3d67fef0e8",
    "patch": "@@ -3,50 +3,100 @@\n import java.io.IOException;\n import java.net.ServerSocket;\n import java.net.Socket;\n+import java.sql.SQLException;\n+import java.util.List;\n import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n \n public class Server {\n     private ConcurrentLinkedDeque<ClientHandler> clients;\n     private final static int DEFAULT_PORT = 8189;\n+    private ExecutorService clientsThreadExecutorService;\n+    private static final Logger logger = Logger.getLogger(Server.class.getName());\n \n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws SQLException, ClassNotFoundException {\n         int port  = DEFAULT_PORT;\n         if (args != null && args.length == 1 )\n             port = Integer.parseInt(args[0]);\n+\n         new Server(port);\n     }\n \n     public Server(int port) {\n         this.clients = new ConcurrentLinkedDeque<>();\n+        this.clientsThreadExecutorService = Executors.newCachedThreadPool();   ///   2. На серверной стороне сетевого чата реализовать управление потоками через ExecutorService.\n+\n+        logger.setLevel(Level.ALL);\n+        Handler handler = new ConsoleHandler();\n+        handler.setLevel(Level.ALL);\n+        logger.addHandler(handler);\n+\n         try (ServerSocket server = new ServerSocket(port)) {\n-            while (true){\n-                Socket socket = server.accept();\n-                ClientHandler h1 = new ClientHandler(this, socket);\n-                clients.add(h1);\n-                new Thread(h1).start();\n+            logger.log(Level.INFO, \"Server.init \");\n+            while (true) {\n+                try {\n+                    Socket socket = server.accept();\n+                    ClientHandler h1 = new ClientHandler(this, socket);\n+                    clients.add(h1);\n+                    logger.log(Level.INFO, \"Server. new client\"); //System.out.println(\"Server. new client\");\n+                    //new Thread(h1).start();\n+                } catch (IOException e) {\n+                    logger.log(Level.SEVERE, e.getMessage(), e); // System.err.println(e.getMessage());\n+                    break;\n+                }\n             }\n         } catch (java.io.IOException r) {\n             System.err.println(r.getMessage());\n+        } finally {\n+            clientsThreadExecutorService.shutdown();\n         }\n     }\n+    public ExecutorService getClientsThreadExecutorService() {\n+        return clientsThreadExecutorService;\n+    }\n+    public List<String> getUserNickNames() {\n+        return clients.stream().map(ClientHandler::getNickName).collect(Collectors.toList());\n+    }\n+\n     public void clearClients() {\n         clients.clear();\n     }\n+\n     public void removeClient(ClientHandler cl) {\n+        logger.log(Level.INFO, \"Server.removeClient: \"+ cl.getNickName());\n+        System.out.println(\"Server.removeClient: \"+ cl.getNickName());\n         clients.remove(cl);\n     }\n-    public void broadcastMessage(String msg) {\n+\n+    public void broadcastMessage(AbstractMessage msg) {\n         for (ClientHandler cl: clients)\n             cl.SendMessage(msg);\n     }\n \n-    public void sendMessageTo(String nickName, String msg)\n+    public void sendMessageTo(TextMessage msg)\n     {\n-        for (ClientHandler cl: clients)\n-            if (cl.getNickName() == nickName) {\n-                cl.SendMessage(msg);\n+        //clients.stream().filter(client -> client.getNickName().equals(msg.getTo()));\n+        for (ClientHandler client: clients)\n+            if (client.getNickName().equals(msg.getTo())  || client.getNickName().equals(msg.getFrom())) {\n+                client.SendMessage(msg);\n                 break;\n             }\n+    }\n \n+    public void sendMessageTo2(AbstractMessage msg, String NickTo)\n+    {\n+        //clients.stream().filter(client -> client.getNickName().equals(msg.getTo()));\n+        for (ClientHandler client: clients)\n+            if (client.getNickName().equals(NickTo) ) {\n+                client.SendMessage(msg);\n+                break;\n+            }\n     }\n }"
  }
]
