[
  {
    "sha": "5270403be4255158f458b6e9c3d1480663d59cf1",
    "filename": "ambry-api/src/main/java/com/github/ambry/quota/QuotaEnforcer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/quota/QuotaEnforcer.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/quota/QuotaEnforcer.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-api/src/main/java/com/github/ambry/quota/QuotaEnforcer.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -26,7 +26,7 @@\n   /**\n    * Method to initialize the {@link QuotaEnforcer}.\n    */\n-  void init();\n+  void init() throws Exception;\n \n   /**\n    * Makes an {@link QuotaRecommendation} using the information in {@link BlobInfo} and {@link RestRequest}. This"
  },
  {
    "sha": "42fb4ebeeb5206cd83eb4862255f4d824d014d16",
    "filename": "ambry-api/src/main/java/com/github/ambry/quota/QuotaManager.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/quota/QuotaManager.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/quota/QuotaManager.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-api/src/main/java/com/github/ambry/quota/QuotaManager.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -29,7 +29,7 @@\n   /**\n    * Method to initialize the {@link QuotaManager}.\n    */\n-  void init();\n+  void init() throws InstantiationException;\n \n   /**\n    * Computes the overall boolean recommendation to throttle a request or not for all the types of request quotas supported."
  },
  {
    "sha": "4ed2aa3c219048972326ffcea5775d15bd3ed3c6",
    "filename": "ambry-api/src/main/java/com/github/ambry/quota/storage/StorageQuotaService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/quota/storage/StorageQuotaService.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/quota/storage/StorageQuotaService.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-api/src/main/java/com/github/ambry/quota/storage/StorageQuotaService.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -19,7 +19,6 @@\n import com.github.ambry.rest.RestRequest;\n import com.github.ambry.rest.RestUtils.InternalKeys;\n \n-\n /**\n  * {@link StorageQuotaService} is the component to handles storage quota for different {@link Account} and {@link Container}.\n  * It keeps track of the storage usage of different {@link Container}s and decides to throttle the Frontend operations"
  },
  {
    "sha": "3c481e312e75c9bbf1e9765f09611145b4d35613",
    "filename": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -15,6 +15,7 @@\n \n import com.github.ambry.account.Account;\n import com.github.ambry.account.Container;\n+import com.github.ambry.frontend.Operations;\n import com.github.ambry.messageformat.BlobProperties;\n import com.github.ambry.protocol.GetOption;\n import com.github.ambry.quota.QuotaName;\n@@ -671,6 +672,20 @@ public static RequestPath getRequestPath(RestRequest restRequest) {\n         InternalKeys.REQUEST_PATH + \" not set in \" + restRequest);\n   }\n \n+  /**\n+   * Return true if this request is uploading a blob. We now have two ways of uploading a blob\n+   * 1. A POST request to root path\n+   * 2. A PUT request to namedBlob path\n+   * @param restRequest The {@link RestRequest}.\n+   * @return\n+   */\n+  public static boolean isUploadRequest(RestRequest restRequest) {\n+    RequestPath requestPath = RestUtils.getRequestPath(restRequest);\n+    RestMethod method = restRequest.getRestMethod();\n+    return method == RestMethod.POST && requestPath.getOperationOrBlobId(true).isEmpty()\n+        || method == RestMethod.PUT && requestPath.matchesOperation(Operations.NAMED_BLOB);\n+  }\n+\n   /**\n    * Fetch time in ms for the {@code dateString} passed in, since epoch\n    * @param dateString the String representation of the date that needs to be parsed\n@@ -1010,10 +1025,10 @@ public static void setRequestCostHeader(Map<QuotaName, Double> costMap, RestResp\n             .stream()\n             .collect(Collectors.toMap(e -> e.getKey().name(), e -> String.valueOf(e.getValue())))));\n \n-\n     // set retry header if present.\n     if (throttlingRecommendation.getRetryAfterMs() != ThrottlingRecommendation.NO_RETRY_AFTER_MS) {\n-      quotaHeadersMap.put(RequestQuotaHeaders.RETRY_AFTER_MS, String.valueOf(throttlingRecommendation.getRetryAfterMs()));\n+      quotaHeadersMap.put(RequestQuotaHeaders.RETRY_AFTER_MS,\n+          String.valueOf(throttlingRecommendation.getRetryAfterMs()));\n     }\n \n     // set the warning header."
  },
  {
    "sha": "ab4f2961d31af439c63cfd629785da4fc7581ba0",
    "filename": "ambry-api/src/test/java/com/github/ambry/rest/MockRestRequestServiceFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/test/java/com/github/ambry/rest/MockRestRequestServiceFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/test/java/com/github/ambry/rest/MockRestRequestServiceFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-api/src/test/java/com/github/ambry/rest/MockRestRequestServiceFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -31,7 +31,7 @@\n   private final Router router;\n \n   public MockRestRequestServiceFactory(VerifiableProperties verifiableProperties, ClusterMap clusterMap, Router router,\n-      AccountService accountService, QuotaManager quotaManager) {\n+      AccountService accountService) {\n     this.verifiableProperties = verifiableProperties;\n     this.router = router;\n   }"
  },
  {
    "sha": "c49f32516cd0ac8f21d682f73de8f9fc1b01dece",
    "filename": "ambry-api/src/test/java/com/github/ambry/rest/RestUtilsTest.java",
    "status": "modified",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/test/java/com/github/ambry/rest/RestUtilsTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-api/src/test/java/com/github/ambry/rest/RestUtilsTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-api/src/test/java/com/github/ambry/rest/RestUtilsTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -16,6 +16,7 @@\n import com.github.ambry.account.Account;\n import com.github.ambry.account.Container;\n import com.github.ambry.account.InMemAccountService;\n+import com.github.ambry.frontend.Operations;\n import com.github.ambry.messageformat.BlobProperties;\n import com.github.ambry.protocol.GetOption;\n import com.github.ambry.quota.QuotaName;\n@@ -27,21 +28,26 @@\n import com.github.ambry.utils.TestUtils;\n import com.github.ambry.utils.Utils;\n import java.io.UnsupportedEncodingException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n import java.net.URISyntaxException;\n import java.net.URLDecoder;\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Random;\n import java.util.Set;\n import java.util.TimeZone;\n+import java.util.stream.Collectors;\n import org.json.JSONException;\n import org.json.JSONObject;\n import org.junit.Test;\n@@ -907,6 +913,44 @@ public void decodeKVHeaderValueTest() {\n     }\n   }\n \n+  /**\n+   * Test request is upload request.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testIsUploadRequest() throws Exception {\n+    List<Field> fields = Arrays.stream(Operations.class.getDeclaredFields())\n+        .filter(f -> Modifier.isStatic(f.getModifiers()) && f.getType() == String.class)\n+        .collect(Collectors.toList());\n+\n+    List<String> operations = new ArrayList<>();\n+    for (Field f : fields) {\n+      operations.add((String) f.get(null));\n+    }\n+\n+    RestMethod[] methods = RestMethod.values();\n+\n+    for (String operation : operations) {\n+      for (RestMethod method : methods) {\n+        JSONObject header = new JSONObject();\n+        header.put(RestUtils.InternalKeys.REQUEST_PATH,\n+            RequestPath.parse(\"/\" + operation, Collections.emptyMap(), Collections.emptyList(), \"ambry-test\"));\n+        RestRequest request = createRestRequest(method, \"/\" + operation, header);\n+        boolean isUpload = RestUtils.isUploadRequest(request);\n+        assertEquals(operation.equals(Operations.NAMED_BLOB) && method == RestMethod.PUT, isUpload);\n+      }\n+    }\n+\n+    for (RestMethod method : methods) {\n+      JSONObject header = new JSONObject();\n+      header.put(RestUtils.InternalKeys.REQUEST_PATH,\n+          RequestPath.parse(\"/\", Collections.emptyMap(), Collections.emptyList(), \"ambry-test\"));\n+      RestRequest request = createRestRequest(method, \"/\", header);\n+      boolean isUpload = RestUtils.isUploadRequest(request);\n+      assertEquals(method == RestMethod.POST, isUpload);\n+    }\n+  }\n+\n   // helpers.\n   // general.\n "
  },
  {
    "sha": "337992bb72d27a6a84b2f1686a2474668f71aedd",
    "filename": "ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 7,
    "changes": 9,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityService.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityService.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityService.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -62,19 +62,16 @@\n   private final FrontendMetrics frontendMetrics;\n   private final UrlSigningService urlSigningService;\n   private final HostLevelThrottler hostLevelThrottler;\n-  private final StorageQuotaService storageQuotaService;\n   private final QuotaManager quotaManager;\n   private final RequestCostPolicy requestCostPolicy;\n   private boolean isOpen;\n \n   AmbrySecurityService(FrontendConfig frontendConfig, FrontendMetrics frontendMetrics,\n-      UrlSigningService urlSigningService, HostLevelThrottler hostLevelThrottler,\n-      StorageQuotaService storageQuotaService, QuotaManager quotaManager) {\n+      UrlSigningService urlSigningService, HostLevelThrottler hostLevelThrottler, QuotaManager quotaManager) {\n     this.frontendConfig = frontendConfig;\n     this.frontendMetrics = frontendMetrics;\n     this.urlSigningService = urlSigningService;\n     this.hostLevelThrottler = hostLevelThrottler;\n-    this.storageQuotaService = storageQuotaService;\n     this.quotaManager = quotaManager;\n     this.requestCostPolicy = new UserQuotaRequestCostPolicy();\n     isOpen = true;\n@@ -132,15 +129,13 @@ public void postProcessRequest(RestRequest restRequest, Callback<Void> callback)\n         exception = new RestServiceException(\"SecurityService is closed\", RestServiceErrorCode.ServiceUnavailable);\n       } else if (hostLevelThrottler.shouldThrottle(restRequest)) {\n         exception = new RestServiceException(\"Too many requests\", RestServiceErrorCode.TooManyRequests);\n-      } else if (storageQuotaService != null && storageQuotaService.shouldThrottle(restRequest)) {\n-        exception = new RestServiceException(\"StorageQuotaExceeded\", RestServiceErrorCode.TooManyRequests);\n       } else {\n         if (quotaManager != null) {\n           ThrottlingRecommendation throttlingRecommendation = quotaManager.getThrottleRecommendation(restRequest);\n           if (throttlingRecommendation != null && throttlingRecommendation.shouldThrottle()) {\n             Map<String, String> quotaHeaderMap = RestUtils.buildUserQuotaHeadersMap(throttlingRecommendation);\n             throw new RestServiceException(\"User Quota Exceeded\", RestServiceErrorCode.TooManyRequests, true, true,\n-                  quotaHeaderMap);\n+                quotaHeaderMap);\n           }\n         }\n         if (restRequest.getRestMethod() == RestMethod.DELETE || restRequest.getRestMethod() == RestMethod.PUT) {"
  },
  {
    "sha": "b5ea3f7c1ab72493736b0ff3c846955c05f32e82",
    "filename": "ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityServiceFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 6,
    "changes": 8,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityServiceFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityServiceFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/main/java/com/github/ambry/frontend/AmbrySecurityServiceFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -20,7 +20,6 @@\n import com.github.ambry.config.HostThrottleConfig;\n import com.github.ambry.config.VerifiableProperties;\n import com.github.ambry.quota.QuotaManager;\n-import com.github.ambry.quota.storage.StorageQuotaService;\n \n \n /**\n@@ -34,24 +33,21 @@\n   private final HostThrottleConfig hostThrottleConfig;\n   private final FrontendMetrics frontendMetrics;\n   private final UrlSigningService urlSigningService;\n-  private final StorageQuotaService storageQuotaService;\n   private final QuotaManager quotaManager;\n \n   public AmbrySecurityServiceFactory(VerifiableProperties verifiableProperties, ClusterMap clusterMap,\n       AccountService accountService, UrlSigningService urlSigningService, IdSigningService idSigningService,\n-      AccountAndContainerInjector accountAndContainerInjector, StorageQuotaService storageQuotaService,\n-      QuotaManager quotaManager) {\n+      AccountAndContainerInjector accountAndContainerInjector, QuotaManager quotaManager) {\n     frontendConfig = new FrontendConfig(verifiableProperties);\n     hostThrottleConfig = new HostThrottleConfig(verifiableProperties);\n     frontendMetrics = new FrontendMetrics(clusterMap.getMetricRegistry());\n     this.urlSigningService = urlSigningService;\n-    this.storageQuotaService = storageQuotaService;\n     this.quotaManager = quotaManager;\n   }\n \n   @Override\n   public SecurityService getSecurityService() {\n     return new AmbrySecurityService(frontendConfig, frontendMetrics, urlSigningService,\n-        new HostLevelThrottler(hostThrottleConfig), storageQuotaService, quotaManager);\n+        new HostLevelThrottler(hostThrottleConfig), quotaManager);\n   }\n }"
  },
  {
    "sha": "5a49df716523f152990850b6e570b973ee691e69",
    "filename": "ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestService.java",
    "status": "modified",
    "additions": 9,
    "deletions": 17,
    "changes": 26,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestService.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestService.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestService.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -23,7 +23,7 @@\n import com.github.ambry.messageformat.BlobInfo;\n import com.github.ambry.named.NamedBlobDb;\n import com.github.ambry.protocol.GetOption;\n-import com.github.ambry.quota.storage.StorageQuotaService;\n+import com.github.ambry.quota.QuotaManager;\n import com.github.ambry.rest.RequestPath;\n import com.github.ambry.rest.ResponseStatus;\n import com.github.ambry.rest.RestMethod;\n@@ -103,7 +103,7 @@\n   private GetAccountsHandler getAccountsHandler;\n   private PostAccountsHandler postAccountsHandler;\n   private GetStatsReportHandler getStatsReportHandler;\n-  private StorageQuotaService storageQuotaService;\n+  private QuotaManager quotaManager;\n   private boolean isUp = false;\n \n   /**\n@@ -123,15 +123,13 @@\n    * @param datacenterName the local datacenter name for this frontend.\n    * @param hostname the hostname for this frontend.\n    * @param clusterName the name of the storage cluster that the router communicates with.\n-   * @param storageQuotaService the {@link StorageQuotaService} used to throttle traffics.\n    * @param accountStatsStore the {@link AccountStatsStore} used to fetch aggregated stats reports.\n    */\n   FrontendRestRequestService(FrontendConfig frontendConfig, FrontendMetrics frontendMetrics, Router router,\n       ClusterMap clusterMap, IdConverterFactory idConverterFactory, SecurityServiceFactory securityServiceFactory,\n       UrlSigningService urlSigningService, IdSigningService idSigningService, NamedBlobDb namedBlobDb,\n       AccountService accountService, AccountAndContainerInjector accountAndContainerInjector, String datacenterName,\n-      String hostname, String clusterName, StorageQuotaService storageQuotaService,\n-      AccountStatsStore accountStatsStore) {\n+      String hostname, String clusterName, AccountStatsStore accountStatsStore, QuotaManager quotaManager) {\n     this.frontendConfig = frontendConfig;\n     this.frontendMetrics = frontendMetrics;\n     this.router = router;\n@@ -146,9 +144,9 @@\n     this.accountStatsStore = accountStatsStore;\n     this.datacenterName = datacenterName;\n     this.hostname = hostname;\n+    this.quotaManager = quotaManager;\n     this.clusterName = clusterName.toLowerCase();\n     getReplicasHandler = new GetReplicasHandler(frontendMetrics, clusterMap);\n-    this.storageQuotaService = storageQuotaService;\n     logger.trace(\"Instantiated FrontendRestRequestService\");\n   }\n \n@@ -166,16 +164,9 @@ public void start() throws InstantiationException {\n       throw new InstantiationException(\"ResponseHandler is not set.\");\n     }\n     long startupBeginTime = System.currentTimeMillis();\n+    quotaManager.init();\n     idConverter = idConverterFactory.getIdConverter();\n     securityService = securityServiceFactory.getSecurityService();\n-    if (storageQuotaService != null) {\n-      try {\n-        storageQuotaService.start();\n-      } catch (Exception e) {\n-        logger.error(\"Failed to start storage quota service\", e);\n-        throw new InstantiationException(\"StorageQuotaService fail to start\");\n-      }\n-    }\n     getPeersHandler = new GetPeersHandler(clusterMap, securityService, frontendMetrics);\n     getSignedUrlHandler =\n         new GetSignedUrlHandler(urlSigningService, securityService, idConverter, accountAndContainerInjector,\n@@ -208,6 +199,10 @@ public void shutdown() {\n     long shutdownBeginTime = System.currentTimeMillis();\n     isUp = false;\n     try {\n+      if (quotaManager != null) {\n+        quotaManager.shutdown();\n+        quotaManager = null;\n+      }\n       if (securityService != null) {\n         securityService.close();\n         securityService = null;\n@@ -216,9 +211,6 @@ public void shutdown() {\n         idConverter.close();\n         idConverter = null;\n       }\n-      if (storageQuotaService != null) {\n-        storageQuotaService.shutdown();\n-      }\n       logger.info(\"FrontendRestRequestService shutdown complete\");\n     } catch (IOException e) {\n       logger.error(\"Downstream service close failed\", e);"
  },
  {
    "sha": "ecf5409275fc03977122eb584591185b105ee609",
    "filename": "ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestServiceFactory.java",
    "status": "modified",
    "additions": 10,
    "deletions": 13,
    "changes": 23,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestServiceFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestServiceFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/main/java/com/github/ambry/frontend/FrontendRestRequestServiceFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -19,13 +19,14 @@\n import com.github.ambry.clustermap.ClusterMap;\n import com.github.ambry.config.ClusterMapConfig;\n import com.github.ambry.config.FrontendConfig;\n+import com.github.ambry.config.QuotaConfig;\n import com.github.ambry.config.StatsManagerConfig;\n import com.github.ambry.config.VerifiableProperties;\n import com.github.ambry.named.NamedBlobDb;\n import com.github.ambry.named.NamedBlobDbFactory;\n+import com.github.ambry.quota.MaxThrottlePolicy;\n import com.github.ambry.quota.QuotaManager;\n-import com.github.ambry.quota.storage.StorageQuotaService;\n-import com.github.ambry.quota.storage.StorageQuotaServiceFactory;\n+import com.github.ambry.quota.QuotaManagerFactory;\n import com.github.ambry.rest.RestRequestService;\n import com.github.ambry.rest.RestRequestServiceFactory;\n import com.github.ambry.router.Router;\n@@ -50,7 +51,6 @@\n   private final ClusterMapConfig clusterMapConfig;\n   private final Router router;\n   private final AccountService accountService;\n-  private final QuotaManager quotaManager;\n \n   /**\n    * Creates a new instance of FrontendRestRequestServiceFactory.\n@@ -61,12 +61,11 @@\n    * @throws IllegalArgumentException if any of the arguments are null.\n    */\n   public FrontendRestRequestServiceFactory(VerifiableProperties verifiableProperties, ClusterMap clusterMap,\n-      Router router, AccountService accountService, QuotaManager quotaManager) {\n+      Router router, AccountService accountService) {\n     this.verifiableProperties = Objects.requireNonNull(verifiableProperties, \"Provided VerifiableProperties is null\");\n     this.clusterMap = Objects.requireNonNull(clusterMap, \"Provided ClusterMap is null\");\n     this.router = Objects.requireNonNull(router, \"Provided Router is null\");\n     this.accountService = Objects.requireNonNull(accountService, \"Provided AccountService is null\");\n-    this.quotaManager = quotaManager;\n     clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n     frontendConfig = new FrontendConfig(verifiableProperties);\n     frontendMetrics = new FrontendMetrics(clusterMap.getMetricRegistry());\n@@ -94,23 +93,21 @@ public RestRequestService getRestRequestService() {\n               clusterMap.getMetricRegistry()).getUrlSigningService();\n       AccountAndContainerInjector accountAndContainerInjector =\n           new AccountAndContainerInjector(accountService, frontendMetrics, frontendConfig);\n-      StorageQuotaService storageQuotaService = null;\n       AccountStatsStore accountStatsStore =\n           Utils.<AccountStatsStoreFactory>getObj(frontendConfig.accountStatsStoreFactory, verifiableProperties,\n               clusterMapConfig, new StatsManagerConfig(verifiableProperties),\n               clusterMap.getMetricRegistry()).getAccountStatsStore();\n-      if (frontendConfig.enableStorageQuotaService) {\n-        storageQuotaService =\n-            Utils.<StorageQuotaServiceFactory>getObj(frontendConfig.storageQuotaServiceFactory, verifiableProperties,\n-                accountStatsStore, clusterMap.getMetricRegistry()).getStorageQuotaService();\n-      }\n+      QuotaConfig quotaConfig = new QuotaConfig(verifiableProperties);\n+      QuotaManager quotaManager =\n+          ((QuotaManagerFactory) Utils.getObj(quotaConfig.quotaManagerFactory, quotaConfig, new MaxThrottlePolicy(),\n+              accountService, accountStatsStore)).getQuotaManager();\n       SecurityServiceFactory securityServiceFactory =\n           Utils.getObj(frontendConfig.securityServiceFactory, verifiableProperties, clusterMap, accountService,\n-              urlSigningService, idSigningService, accountAndContainerInjector, storageQuotaService, quotaManager);\n+              urlSigningService, idSigningService, accountAndContainerInjector, quotaManager);\n       return new FrontendRestRequestService(frontendConfig, frontendMetrics, router, clusterMap, idConverterFactory,\n           securityServiceFactory, urlSigningService, idSigningService, namedBlobDb, accountService,\n           accountAndContainerInjector, clusterMapConfig.clusterMapDatacenterName, clusterMapConfig.clusterMapHostName,\n-          clusterMapConfig.clusterMapClusterName, storageQuotaService, accountStatsStore);\n+          clusterMapConfig.clusterMapClusterName, accountStatsStore, quotaManager);\n     } catch (Exception e) {\n       throw new IllegalStateException(\"Could not instantiate FrontendRestRequestService\", e);\n     }"
  },
  {
    "sha": "7718ed53bdef1db0dc12a5be0f517d3f7315a1e4",
    "filename": "ambry-frontend/src/main/java/com/github/ambry/frontend/UserQuotaRequestCostPolicy.java",
    "status": "modified",
    "additions": 5,
    "deletions": 22,
    "changes": 27,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/UserQuotaRequestCostPolicy.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/main/java/com/github/ambry/frontend/UserQuotaRequestCostPolicy.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/main/java/com/github/ambry/frontend/UserQuotaRequestCostPolicy.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -32,8 +32,8 @@\n  * Capacity unit cost is defined as the number of 4MB chunks. Storage cost is defined as number of GB of storage used.\n  */\n public class UserQuotaRequestCostPolicy implements RequestCostPolicy {\n+  final static double BYTES_IN_GB = 1024 * 1024 * 1024; // 1GB\n   final static double CU_COST_UNIT = 4 * 1024 * 1024; //4 MB\n-  final static double BYTES_IN_GB = 1024 * 1024 * 1024;\n   final static double INDEX_ONLY_COST = 1;\n   final static double MIN_CU_COST = INDEX_ONLY_COST;\n   private static final Logger LOGGER = LoggerFactory.getLogger(UserQuotaRequestCostPolicy.class);\n@@ -44,7 +44,7 @@\n     Map<String, Double> costMap = new HashMap<>();\n     costMap.put(restMethodToCostMetric(restRequest.getRestMethod()),\n         calculateCapacityUnitCost(restRequest, restResponseChannel, blobInfo));\n-    costMap.put(QuotaName.STORAGE_IN_GB.name(), calculateStorageCost(restRequest, restResponseChannel));\n+    costMap.put(QuotaName.STORAGE_IN_GB.name(), calculateStorageCost(restRequest));\n     return costMap;\n   }\n \n@@ -66,28 +66,11 @@ private String restMethodToCostMetric(RestMethod restMethod) {\n \n   /**\n    * Calculate the storage cost incurred to serve a request.\n-   * For post requests this is the number bytes in GB of the blob data. For all other write requests the default is DEFAULT_COST_FOR_HEAD_DELETE_TTL.\n-   * For read requests there is no storage cost incurred.\n    * @param restRequest {@link RestRequest} to find type of request.\n-   * @param restResponseChannel {@link RestResponseChannel} object.\n    * @return storage cost.\n    */\n-  private double calculateStorageCost(RestRequest restRequest, RestResponseChannel restResponseChannel) {\n-    switch (restRequest.getRestMethod()) {\n-      case POST:\n-        long contentSize = 0;\n-        if (restRequest.getUri().contains(Operations.STITCH)) {\n-          contentSize = Long.parseLong((String) restResponseChannel.getHeader(RestUtils.Headers.BLOB_SIZE));\n-        } else {\n-          contentSize = restRequest.getBytesReceived();\n-        }\n-        return contentSize / BYTES_IN_GB;\n-      case DELETE:\n-      case PUT:\n-        return CU_COST_UNIT / BYTES_IN_GB; // Assuming 1 chunk worth of storage cost for deletes and ttl updates.\n-      default:\n-        return 0;\n-    }\n+  private double calculateStorageCost(RestRequest restRequest) {\n+    return RestUtils.isUploadRequest(restRequest) ? restRequest.getBlobBytesReceived() / BYTES_IN_GB : 0;\n   }\n \n   /**\n@@ -103,7 +86,7 @@ private double calculateCapacityUnitCost(RestRequest restRequest, RestResponseCh\n       BlobInfo blobInfo) {\n     switch (restRequest.getRestMethod()) {\n       case POST:\n-        long contentSize = 0;\n+        long contentSize;\n         if (restRequest.getUri().contains(Operations.STITCH)) {\n           contentSize = Long.parseLong((String) restResponseChannel.getHeader(RestUtils.Headers.BLOB_SIZE));\n         } else {"
  },
  {
    "sha": "26b6892add444a476c1a8401fa50f101a868a805",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceFactoryTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceFactoryTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceFactoryTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceFactoryTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -33,7 +33,7 @@\n   public void getAmbrySecurityServiceFactoryTest() throws Exception {\n     SecurityService securityService =\n         new AmbrySecurityServiceFactory(new VerifiableProperties(new Properties()), new MockClusterMap(), null, null,\n-            null, null, null, null).getSecurityService();\n+            null, null, null).getSecurityService();\n     Assert.assertNotNull(securityService);\n   }\n }"
  },
  {
    "sha": "26d90303f96f5ba732e17578a6db87ef236e2942",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 111,
    "changes": 114,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/AmbrySecurityServiceTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -15,9 +15,7 @@\n \n import com.codahale.metrics.MetricRegistry;\n import com.github.ambry.account.Account;\n-import com.github.ambry.account.AccountBuilder;\n import com.github.ambry.account.Container;\n-import com.github.ambry.account.ContainerBuilder;\n import com.github.ambry.account.InMemAccountService;\n import com.github.ambry.account.InMemAccountServiceFactory;\n import com.github.ambry.commons.Callback;\n@@ -32,7 +30,6 @@\n import com.github.ambry.quota.QuotaManager;\n import com.github.ambry.quota.QuotaMode;\n import com.github.ambry.quota.QuotaTestUtils;\n-import com.github.ambry.quota.storage.StorageQuotaService;\n import com.github.ambry.rest.MockRestRequest;\n import com.github.ambry.rest.MockRestResponseChannel;\n import com.github.ambry.rest.RequestPath;\n@@ -66,8 +63,6 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.ThreadLocalRandom;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.json.JSONException;\n import org.json.JSONObject;\n import org.junit.Assert;\n@@ -109,7 +104,7 @@\n \n   private final SecurityService securityService =\n       new AmbrySecurityService(FRONTEND_CONFIG, new FrontendMetrics(new MetricRegistry()),\n-          URL_SIGNING_SERVICE_FACTORY.getUrlSigningService(), hostLevelThrottler, null, QUOTA_MANAGER);\n+          URL_SIGNING_SERVICE_FACTORY.getUrlSigningService(), hostLevelThrottler, QUOTA_MANAGER);\n \n   static {\n     try {\n@@ -172,7 +167,7 @@ public void preProcessRequestTest() throws Exception {\n     FrontendConfig frontendConfig = new FrontendConfig(new VerifiableProperties(properties));\n     SecurityService securityServiceWithTrackingDisabled =\n         new AmbrySecurityService(frontendConfig, new FrontendMetrics(new MetricRegistry()),\n-            URL_SIGNING_SERVICE_FACTORY.getUrlSigningService(), hostLevelThrottler, null, QUOTA_MANAGER);\n+            URL_SIGNING_SERVICE_FACTORY.getUrlSigningService(), hostLevelThrottler, QUOTA_MANAGER);\n     restRequest = createRestRequest(RestMethod.GET, \"/\", null);\n     securityServiceWithTrackingDisabled.preProcessRequest(restRequest);\n     Assert.assertFalse(\"The arg with key: ambry-internal-keys-send-tracking-info should be set to false\",\n@@ -239,7 +234,7 @@ public void postProcessQuotaManagerTest() throws Exception {\n     AmbrySecurityService ambrySecurityService =\n         new AmbrySecurityService(new FrontendConfig(new VerifiableProperties(new Properties())),\n             new FrontendMetrics(new MetricRegistry()), URL_SIGNING_SERVICE_FACTORY.getUrlSigningService(), quotaManager,\n-            null, QUOTA_MANAGER);\n+            QUOTA_MANAGER);\n     // Everything should be good.\n     Mockito.when(quotaManager.shouldThrottle(any())).thenReturn(false);\n     for (int i = 0; i < 100; i++) {\n@@ -262,109 +257,6 @@ public void postProcessQuotaManagerTest() throws Exception {\n     }\n   }\n \n-  /**\n-   * Test {@link AmbrySecurityService#postProcessRequest(RestRequest)} should throw RestServiceException on storage quota\n-   * when the quota limit is reached.\n-   * @throws Exception\n-   */\n-  @Test\n-  public void postProcessStorageQuotaServiceTest() throws Exception {\n-    HostLevelThrottler quotaManager = Mockito.mock(HostLevelThrottler.class);\n-    Mockito.when(quotaManager.shouldThrottle(any())).thenReturn(false);\n-    StorageQuotaService quotaService = Mockito.mock(StorageQuotaService.class);\n-\n-    AmbrySecurityService ambrySecurityService =\n-        new AmbrySecurityService(new FrontendConfig(new VerifiableProperties(new Properties())),\n-            new FrontendMetrics(new MetricRegistry()), URL_SIGNING_SERVICE_FACTORY.getUrlSigningService(), quotaManager,\n-            quotaService, QUOTA_MANAGER);\n-\n-    // Everything should be good.\n-    Mockito.when(quotaService.shouldThrottle(any())).thenReturn(false);\n-    for (int i = 0; i < 100; i++) {\n-      for (RestMethod restMethod : RestMethod.values()) {\n-        RestRequest restRequest = createRestRequest(restMethod, \"/\", null);\n-        restRequest.setArg(RestUtils.InternalKeys.TARGET_ACCOUNT_KEY,\n-            new AccountBuilder((short) 10, \"account10\", Account.AccountStatus.ACTIVE).build());\n-        restRequest.setArg(RestUtils.InternalKeys.TARGET_CONTAINER_KEY,\n-            new ContainerBuilder((short) 11, \"container11\", Container.ContainerStatus.ACTIVE, \"\", (short) 10).build());\n-        ambrySecurityService.postProcessRequest(restRequest).get();\n-      }\n-    }\n-\n-    short throttledAccountId = (short) 1;\n-    short throttledContainerId = (short) 10;\n-    long throttledSize = 1000;\n-    AtomicLong currentSize = new AtomicLong(0);\n-    doAnswer(invocation -> {\n-      RestRequest restRequest = invocation.getArgument(0);\n-      short accountId = RestUtils.getAccountFromArgs(restRequest.getArgs()).getId();\n-      short containerId = RestUtils.getContainerFromArgs(restRequest.getArgs()).getId();\n-      long size = restRequest.getSize();\n-      if (accountId == throttledAccountId && containerId == throttledContainerId) {\n-        if (size + currentSize.get() > throttledSize) {\n-          return true;\n-        } else {\n-          currentSize.addAndGet(size);\n-          return false;\n-        }\n-      } else {\n-        return false;\n-      }\n-    }).when(quotaService).shouldThrottle(any());\n-\n-    AtomicReference<RestRequest> restRequestRef = new AtomicReference<>(null);\n-    ThrowingConsumer<Integer> makeRequest = size -> {\n-      RestRequest restRequest = createRestRequest(RestMethod.POST, \"/\", null);\n-      restRequest.setArg(RestUtils.InternalKeys.TARGET_ACCOUNT_KEY,\n-          new AccountBuilder(throttledAccountId, \"account10\", Account.AccountStatus.ACTIVE).build());\n-      restRequest.setArg(RestUtils.InternalKeys.TARGET_CONTAINER_KEY,\n-          new ContainerBuilder(throttledContainerId, \"container11\", Container.ContainerStatus.ACTIVE, \"\",\n-              throttledAccountId).build());\n-      restRequest.setArg(RestUtils.Headers.BLOB_SIZE, size);\n-      restRequestRef.set(restRequest);\n-    };\n-    // RestRequest's size is only half of the threshold\n-    makeRequest.accept((int) throttledSize / 2);\n-    ambrySecurityService.postProcessRequest(restRequestRef.get()).get();\n-    Assert.assertEquals(throttledSize / 2, currentSize.get());\n-\n-    makeRequest.accept((int) throttledSize / 2);\n-    ambrySecurityService.postProcessRequest(restRequestRef.get()).get();\n-    Assert.assertEquals(throttledSize, currentSize.get());\n-\n-    try {\n-      makeRequest.accept(1);\n-      ambrySecurityService.postProcessRequest(restRequestRef.get()).get();\n-      Assert.fail(\"Should fail due to throttle\");\n-    } catch (ExecutionException e) {\n-      Throwable throwable = e.getCause();\n-      Assert.assertTrue(throwable instanceof RestServiceException);\n-      RestServiceException restServiceException = (RestServiceException) throwable;\n-      Assert.assertEquals(RestServiceErrorCode.TooManyRequests, restServiceException.getErrorCode());\n-      Assert.assertEquals(\"StorageQuotaExceeded\", restServiceException.getMessage());\n-    }\n-\n-    // test some error cases.\n-    makeRequest.accept(1);\n-    restRequestRef.get().setArg(RestUtils.Headers.BLOB_SIZE, null);\n-    restRequestRef.get().setArg(RestUtils.Headers.CONTENT_LENGTH, 1);\n-\n-    try {\n-      ambrySecurityService.postProcessRequest(restRequestRef.get()).get();\n-      Assert.fail(\"Should fail due to throttle\");\n-    } catch (ExecutionException e) {\n-      Throwable throwable = e.getCause();\n-      Assert.assertTrue(throwable instanceof RestServiceException);\n-      RestServiceException restServiceException = (RestServiceException) throwable;\n-      Assert.assertEquals(RestServiceErrorCode.TooManyRequests, restServiceException.getErrorCode());\n-      Assert.assertEquals(\"StorageQuotaExceeded\", restServiceException.getMessage());\n-    }\n-\n-    makeRequest.accept(1);\n-    restRequestRef.get().setArg(RestUtils.Headers.BLOB_SIZE, null); // getSize would return -1\n-    ambrySecurityService.postProcessRequest(restRequestRef.get()).get();\n-  }\n-\n   /**\n    * Tests {@link AmbrySecurityService#processResponse(RestRequest, RestResponseChannel, BlobInfo, Callback)}  for\n    * common as well as uncommon cases"
  },
  {
    "sha": "7f17332cdad1645eae1b23b0b3b621d95f06b385",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -407,7 +407,7 @@ public void getAndUseSignedUrlTest() throws Exception {\n     URI uri = new URI(signedPostUrl);\n     httpRequest = buildRequest(HttpMethod.POST, uri.getPath() + \"?\" + uri.getQuery(), null, content);\n     responseParts = nettyClient.sendRequest(httpRequest, null, null).get();\n-    String blobId = verifyPostAndReturnBlobId(responseParts, content.capacity());\n+    String blobId = verifyPostAndReturnBlobId(responseParts, content.capacity(), false);\n \n     // verify POST\n     headers.add(RestUtils.Headers.BLOB_SIZE, content.capacity());\n@@ -629,7 +629,7 @@ private static VerifiableProperties buildFrontendVProps(File trustStoreFile, boo\n       // Use signed URL to POST\n       httpRequest = buildRequest(HttpMethod.POST, uri.getPath() + \"?\" + uri.getQuery(), null, content);\n       responseParts = nettyClient.sendRequest(httpRequest, null, null).get();\n-      String signedId = verifyPostAndReturnBlobId(responseParts, chunkSize);\n+      String signedId = verifyPostAndReturnBlobId(responseParts, chunkSize, false);\n       assertTrue(\"Blob ID for chunk upload must be signed\", idSigningService.isIdSigned(signedId.substring(1)));\n       Pair<String, Map<String, String>> idAndMetadata = idSigningService.parseSignedId(signedId.substring(1));\n       // Inspect metadata fields\n@@ -673,7 +673,7 @@ private void stitchBlobAndVerify(Account account, Container container, List<Stri\n     HttpRequest httpRequest = buildRequest(HttpMethod.POST, Operations.STITCH, stitchHeaders,\n         ByteBuffer.wrap(StitchRequestSerDe.toJson(signedChunkIds).toString().getBytes(StandardCharsets.UTF_8)));\n     ResponseParts responseParts = nettyClient.sendRequest(httpRequest, null, null).get();\n-    String stitchedBlobId = verifyPostAndReturnBlobId(responseParts, stitchedBlobSize);\n+    String stitchedBlobId = verifyPostAndReturnBlobId(responseParts, stitchedBlobSize, true);\n     HttpHeaders expectedGetHeaders = new DefaultHttpHeaders().add(stitchHeaders);\n     // Test different request types on stitched blob ID\n     // (getBlobInfo, getBlob, getBlob w/ range, head, updateBlobTtl, deleteBlob)"
  },
  {
    "sha": "823ee15cdcb2e43dab77d82c7152432794a53868",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTestBase.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTestBase.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTestBase.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendIntegrationTestBase.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -149,6 +149,7 @@ void assertNoContent(Queue<HttpObject> contents, int expectedDiscardCount) {\n   }\n \n // postGetHeadUpdateDeleteTest() and multipartPostGetHeadUpdateDeleteTest() helpers\n+\n   /**\n    * Utility to test blob POST, GET, HEAD and DELETE operations for a specified size\n    * @param contentSize the size of the blob to be tested\n@@ -272,15 +273,17 @@ String postBlobAndVerify(HttpHeaders headers, ByteBuffer content, long contentSi\n       throws ExecutionException, InterruptedException {\n     FullHttpRequest httpRequest = buildRequest(HttpMethod.POST, \"/\", headers, content);\n     NettyClient.ResponseParts responseParts = nettyClient.sendRequest(httpRequest, null, null).get();\n-    return verifyPostAndReturnBlobId(responseParts, contentSize);\n+    return verifyPostAndReturnBlobId(responseParts, contentSize, false);\n   }\n \n   /**\n    * Verifies a POST and returns the blob ID.\n    * @param responseParts the response received from the server.\n+   * @param contentSize the size of the blob\n+   * @param isStitch True is the POST request is a stitch operation.\n    * @returnn the blob ID of the blob.\n    */\n-  String verifyPostAndReturnBlobId(NettyClient.ResponseParts responseParts, long contentSize) {\n+  String verifyPostAndReturnBlobId(NettyClient.ResponseParts responseParts, long contentSize, boolean isStitch) {\n     HttpResponse response = getHttpResponse(responseParts);\n     assertEquals(\"Unexpected response status\", HttpResponseStatus.CREATED, response.status());\n     assertTrue(\"No Date header\", response.headers().getTimeMillis(HttpHeaderNames.DATE, -1) != -1);\n@@ -294,7 +297,7 @@ String verifyPostAndReturnBlobId(NettyClient.ResponseParts responseParts, long c\n     assertEquals(\"Correct blob size should be returned in response\", Long.toString(contentSize),\n         response.headers().get(RestUtils.Headers.BLOB_SIZE));\n     verifyTrackingHeaders(response);\n-    verifyPostRequestCostHeaders(response, contentSize);\n+    verifyPostRequestCostHeaders(response, isStitch ? 0 : contentSize);\n     return blobId;\n   }\n \n@@ -828,7 +831,7 @@ String multipartPostBlobAndVerify(HttpHeaders headers, ByteBuffer content, ByteB\n     HttpRequest httpRequest = RestTestUtils.createRequest(HttpMethod.POST, \"/\", headers);\n     HttpPostRequestEncoder encoder = createEncoder(httpRequest, content, usermetadata);\n     NettyClient.ResponseParts responseParts = nettyClient.sendRequest(encoder.finalizeRequest(), encoder, null).get();\n-    return verifyPostAndReturnBlobId(responseParts, content.capacity());\n+    return verifyPostAndReturnBlobId(responseParts, content.capacity(), false);\n   }\n \n   /**\n@@ -917,7 +920,7 @@ private void verifyHeadRequestCostHeaders(HttpResponse response) {\n    * @param response the {@link HttpResponse} to be verified.\n    */\n   private void verifyTtlUpdateRequestCostHeaders(HttpResponse response) {\n-    verifyCommonRequestCostHeaders(response, 1, 0.00390625, false);\n+    verifyCommonRequestCostHeaders(response, 1, 0.0, false);\n   }\n \n   /**"
  },
  {
    "sha": "c759a80a59d3c8dab732c21a23b76e5cac8146ef",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceFactoryTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceFactoryTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceFactoryTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceFactoryTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -72,8 +72,7 @@ public void getFrontendRestRequestServiceTest() throws Exception {\n \n     FrontendRestRequestServiceFactory frontendRestRequestServiceFactory =\n         new FrontendRestRequestServiceFactory(verifiableProperties, new MockClusterMap(),\n-            new InMemoryRouter(verifiableProperties, new MockClusterMap()), new InMemAccountService(false, true),\n-            QUOTA_MANAGER);\n+            new InMemoryRouter(verifiableProperties, new MockClusterMap()), new InMemAccountService(false, true));\n     RestRequestService ambryRestRequestService = frontendRestRequestServiceFactory.getRestRequestService();\n     assertNotNull(\"No RestRequestService returned\", ambryRestRequestService);\n     assertEquals(\"Did not receive an FrontendRestRequestService instance\",\n@@ -95,31 +94,31 @@ public void getFrontendRestRequestServiceFactoryWithBadInputTest() throws Except\n \n     // VerifiableProperties null.\n     try {\n-      new FrontendRestRequestServiceFactory(null, clusterMap, router, accountService, QUOTA_MANAGER);\n+      new FrontendRestRequestServiceFactory(null, clusterMap, router, accountService);\n       fail(\"Instantiation should have failed because VerifiableProperties was null\");\n     } catch (NullPointerException e) {\n       // expected. Nothing to do.\n     }\n \n     // ClusterMap null.\n     try {\n-      new FrontendRestRequestServiceFactory(verifiableProperties, null, router, accountService, QUOTA_MANAGER);\n+      new FrontendRestRequestServiceFactory(verifiableProperties, null, router, accountService);\n       fail(\"Instantiation should have failed because ClusterMap was null\");\n     } catch (NullPointerException e) {\n       // expected. Nothing to do.\n     }\n \n     // Router null.\n     try {\n-      new FrontendRestRequestServiceFactory(verifiableProperties, clusterMap, null, accountService, QUOTA_MANAGER);\n+      new FrontendRestRequestServiceFactory(verifiableProperties, clusterMap, null, accountService);\n       fail(\"Instantiation should have failed because Router was null\");\n     } catch (NullPointerException e) {\n       // expected. Nothing to do.\n     }\n \n     // AccountService null.\n     try {\n-      new FrontendRestRequestServiceFactory(verifiableProperties, clusterMap, router, null, QUOTA_MANAGER);\n+      new FrontendRestRequestServiceFactory(verifiableProperties, clusterMap, router, null);\n       fail(\"Instantiation should have failed because AccountService was null\");\n     } catch (NullPointerException e) {\n       // expected. Nothing to do."
  },
  {
    "sha": "c8165cdb17f540916ac50476dd7aae84a2f4be13",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/FrontendRestRequestServiceTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -197,7 +197,7 @@ public FrontendRestRequestServiceTest() throws Exception {\n         new AmbryIdConverterFactory(verifiableProperties, metricRegistry, idSigningService, namedBlobDb);\n     securityServiceFactory =\n         new AmbrySecurityServiceFactory(verifiableProperties, clusterMap, null, urlSigningService, idSigningService,\n-            accountAndContainerInjector, null, QUOTA_MANAGER);\n+            accountAndContainerInjector, QUOTA_MANAGER);\n     accountService.clear();\n     accountService.updateAccounts(Collections.singleton(InMemAccountService.UNKNOWN_ACCOUNT));\n     refAccount = accountService.createAndAddRandomAccount();\n@@ -253,7 +253,7 @@ public void startWithoutResponseHandler() throws InstantiationException {\n     FrontendRestRequestService frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, router, clusterMap, idConverterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, null, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     try {\n       frontendRestRequestService.start();\n       fail(\"Test should fail if ResponseHandler is not setup\");\n@@ -839,7 +839,7 @@ public void deleteServiceIdTest() throws Exception {\n     frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, testRouter, clusterMap, idConverterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, null, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     frontendRestRequestService.setupResponseHandler(responseHandler);\n     frontendRestRequestService.start();\n     JSONObject headers = new JSONObject();\n@@ -862,7 +862,7 @@ public void getPeersTest() throws Exception {\n     frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, router, clusterMap, idConverterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, null, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     frontendRestRequestService.setupResponseHandler(responseHandler);\n     frontendRestRequestService.start();\n     // test good requests\n@@ -1189,7 +1189,7 @@ public void updateTtlRejectedTest() throws Exception {\n     frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, testRouter, clusterMap, idConverterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, null, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     frontendRestRequestService.setupResponseHandler(responseHandler);\n     frontendRestRequestService.start();\n     String blobId = new BlobId(blobIdVersion, BlobId.BlobIdType.NATIVE, (byte) -1, Account.UNKNOWN_ACCOUNT_ID,\n@@ -1572,7 +1572,7 @@ private FrontendRestRequestService getFrontendRestRequestService() {\n     FrontendRestRequestService frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, router, clusterMap, idConverterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, namedBlobDb, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     frontendRestRequestService.setupResponseHandler(responseHandler);\n     return frontendRestRequestService;\n   }\n@@ -2271,7 +2271,7 @@ private void doIdConverterExceptionTest(FrontendTestIdConverterFactory converter\n     frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, router, clusterMap, converterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, null, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     frontendRestRequestService.setupResponseHandler(responseHandler);\n     frontendRestRequestService.start();\n     RestMethod[] restMethods = {RestMethod.POST, RestMethod.GET, RestMethod.DELETE, RestMethod.HEAD};\n@@ -2303,7 +2303,7 @@ private void doSecurityServiceExceptionTest(FrontendTestSecurityServiceFactory s\n       frontendRestRequestService =\n           new FrontendRestRequestService(frontendConfig, frontendMetrics, new FrontendTestRouter(), clusterMap,\n               idConverterFactory, securityFactory, urlSigningService, idSigningService, null, accountService,\n-              accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+              accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n       frontendRestRequestService.setupResponseHandler(responseHandler);\n       frontendRestRequestService.start();\n       doExternalServicesBadInputTest(restMethods, exceptionMsg,\n@@ -2362,7 +2362,7 @@ private void doRouterExceptionPipelineTest(FrontendTestRouter testRouter, String\n     frontendRestRequestService =\n         new FrontendRestRequestService(frontendConfig, frontendMetrics, testRouter, clusterMap, idConverterFactory,\n             securityServiceFactory, urlSigningService, idSigningService, null, accountService,\n-            accountAndContainerInjector, datacenterName, hostname, clusterName, null, accountStatsStore);\n+            accountAndContainerInjector, datacenterName, hostname, clusterName, accountStatsStore, QUOTA_MANAGER);\n     frontendRestRequestService.setupResponseHandler(responseHandler);\n     frontendRestRequestService.start();\n     for (RestMethod restMethod : RestMethod.values()) {"
  },
  {
    "sha": "faf759e04e77ff529624bf5e34ec8525aa92f0b9",
    "filename": "ambry-frontend/src/test/java/com/github/ambry/frontend/UserQuotaRequestCostPolicyTest.java",
    "status": "modified",
    "additions": 21,
    "deletions": 6,
    "changes": 27,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/UserQuotaRequestCostPolicyTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-frontend/src/test/java/com/github/ambry/frontend/UserQuotaRequestCostPolicyTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-frontend/src/test/java/com/github/ambry/frontend/UserQuotaRequestCostPolicyTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -16,11 +16,16 @@\n import com.github.ambry.messageformat.BlobInfo;\n import com.github.ambry.messageformat.BlobProperties;\n import com.github.ambry.quota.QuotaName;\n+import com.github.ambry.rest.RequestPath;\n import com.github.ambry.rest.RestMethod;\n import com.github.ambry.rest.RestRequest;\n import com.github.ambry.rest.RestResponseChannel;\n+import com.github.ambry.rest.RestServiceException;\n+import com.github.ambry.rest.RestUtils;\n import java.io.UnsupportedEncodingException;\n import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.Map;\n import org.junit.Test;\n \n@@ -39,7 +44,7 @@\n   private final static short DEFAULT_LIFE_VERSION = 1;\n \n   @Test\n-  public void testCalculateRequestCost() throws UnsupportedEncodingException, URISyntaxException {\n+  public void testCalculateRequestCost() throws RestServiceException {\n     UserQuotaRequestCostPolicy quotaRequestCostPolicy = new UserQuotaRequestCostPolicy();\n \n     RestResponseChannel restResponseChannel = mock(RestResponseChannel.class);\n@@ -72,7 +77,7 @@ public void testCalculateRequestCost() throws UnsupportedEncodingException, URIS\n         DEFAULT_ENCRYPTED_FLAG), null, DEFAULT_LIFE_VERSION);\n     restRequest = createMockRequestWithMethod(RestMethod.POST, 8 * 1024 * 1024);\n     costMap = quotaRequestCostPolicy.calculateRequestCost(restRequest, restResponseChannel, blobInfo);\n-    verifyWriteCost(costMap, 2, .0078125);\n+    verifyWriteCost(costMap, 2, 8 * 1024 * 1024 / UserQuotaRequestCostPolicy.BYTES_IN_GB);\n \n     // test for a large POST request.\n     blobInfo = new BlobInfo(\n@@ -98,16 +103,16 @@ public void testCalculateRequestCost() throws UnsupportedEncodingException, URIS\n     // test for a DELETE request.\n     restRequest = createMockRequestWithMethod(RestMethod.DELETE, -1);\n     costMap = quotaRequestCostPolicy.calculateRequestCost(restRequest, restResponseChannel, blobInfo);\n-    verifyWriteCost(costMap, 1, 0.00390625);\n+    verifyWriteCost(costMap, 1, 0.0);\n \n     // test for a PUT request.\n     restRequest = createMockRequestWithMethod(RestMethod.PUT, -1);\n     costMap = quotaRequestCostPolicy.calculateRequestCost(restRequest, restResponseChannel, blobInfo);\n-    verifyWriteCost(costMap, 1, 0.00390625);\n+    verifyWriteCost(costMap, 1, 0.0);\n \n     // test for PUT with null blob info.\n     costMap = quotaRequestCostPolicy.calculateRequestCost(restRequest, restResponseChannel, null);\n-    verifyWriteCost(costMap, 1, 0.00390625);\n+    verifyWriteCost(costMap, 1, 0.0);\n \n     // TODO add a range request case with large range\n   }\n@@ -150,11 +155,21 @@ private void verifyWriteCost(Map<String, Double> costMap, double cUCost, double\n    * @param bytesReceived number of bytes received in the request.\n    * @return RestRequest object.\n    */\n-  private RestRequest createMockRequestWithMethod(RestMethod restMethod, long bytesReceived) {\n+  private RestRequest createMockRequestWithMethod(RestMethod restMethod, long bytesReceived)\n+      throws RestServiceException {\n     RestRequest restRequest = mock(RestRequest.class);\n     when(restRequest.getRestMethod()).thenReturn(restMethod);\n+    when(restRequest.getBlobBytesReceived()).thenReturn(bytesReceived);\n     when(restRequest.getBytesReceived()).thenReturn(bytesReceived);\n     when(restRequest.getUri()).thenReturn(\"/\");\n+    RequestPath requestPath = RequestPath.parse(\"/\", Collections.emptyMap(), Collections.emptyList(), \"ambry-test\");\n+    if (restMethod == RestMethod.PUT && bytesReceived != -1) {\n+      requestPath =\n+          RequestPath.parse(\"/\" + Operations.NAMED_BLOB, Collections.emptyMap(), Collections.emptyList(), \"ambry-test\");\n+    }\n+    Map<String, Object> args = new HashMap<>();\n+    args.put(RestUtils.InternalKeys.REQUEST_PATH, requestPath);\n+    when(restRequest.getArgs()).thenReturn(args);\n     return restRequest;\n   }\n }"
  },
  {
    "sha": "92afdfbac1867ba24f3989757072bd7fd3e572bb",
    "filename": "ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStore.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStore.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStore.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStore.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Copyright 2021 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
    "sha": "2f716d7adcd92587c2d8cdd4dfa2407aadf00c67",
    "filename": "ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStoreFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStoreFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStoreFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-mysql/src/main/java/com/github/ambry/accountstats/InmemoryAccountStatsStoreFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Copyright 2021 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
    "sha": "109714fd1eb666c0bf730ee04eb8093f0dfad547",
    "filename": "ambry-quota/src/integration-test/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactoryTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/integration-test/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactoryTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/integration-test/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactoryTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/integration-test/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactoryTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -48,8 +48,9 @@ public AmbryStorageQuotaServiceFactoryTest() throws Exception {\n \n   @Test\n   public void testBasic() throws Exception {\n-    StorageQuotaService service = new AmbryStorageQuotaServiceFactory(verifiableProperties, accountStatsStore,\n-        metricRegistry).getStorageQuotaService();\n+    StorageQuotaService service =\n+        new AmbryStorageQuotaServiceFactory(new StorageQuotaConfig(verifiableProperties), accountStatsStore,\n+            metricRegistry).getStorageQuotaService();\n     assertNotNull(service);\n   }\n "
  },
  {
    "sha": "53314a1bf93d4c69abdfd11cef747c67540494c9",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManager.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManager.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManager.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManager.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -14,6 +14,7 @@\n package com.github.ambry.quota;\n \n import com.github.ambry.account.AccountService;\n+import com.github.ambry.accountstats.AccountStatsStore;\n import com.github.ambry.config.QuotaConfig;\n import com.github.ambry.messageformat.BlobInfo;\n import com.github.ambry.rest.RestRequest;\n@@ -60,9 +61,17 @@ public AmbryQuotaManager(QuotaConfig quotaConfig, ThrottlePolicy throttlePolicy,\n   }\n \n   @Override\n-  public void init() {\n-    for (QuotaEnforcer quotaEnforcer : requestQuotaEnforcers) {\n-      quotaEnforcer.init();\n+  public void init() throws InstantiationException {\n+    try {\n+      for (QuotaEnforcer quotaEnforcer : requestQuotaEnforcers) {\n+        quotaEnforcer.init();\n+      }\n+    } catch (Exception e) {\n+      if (e instanceof InstantiationException) {\n+        throw (InstantiationException) e;\n+      } else {\n+        throw new InstantiationException(e.getMessage());\n+      }\n     }\n   }\n \n@@ -141,4 +150,8 @@ public QuotaConfig getQuotaConfig() {\n     }\n     return quotaSourceObjectMap;\n   }\n+\n+  public final static class AmbryQuotaManagerComponents {\n+    public static AccountStatsStore accountStatsStore;\n+  }\n }"
  },
  {
    "sha": "142605ff607ada853267639dfc91e686849b100a",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManagerFactory.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManagerFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManagerFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/AmbryQuotaManagerFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -14,6 +14,7 @@\n package com.github.ambry.quota;\n \n import com.github.ambry.account.AccountService;\n+import com.github.ambry.accountstats.AccountStatsStore;\n import com.github.ambry.config.QuotaConfig;\n \n \n@@ -25,10 +26,12 @@\n \n   /**\n    * @param quotaConfig {@link QuotaConfig} object.\n+   * @param accountStatsStore\n    * @throws ReflectiveOperationException\n    */\n-  public AmbryQuotaManagerFactory(QuotaConfig quotaConfig, ThrottlePolicy throttlePolicy, AccountService accountService)\n-      throws ReflectiveOperationException {\n+  public AmbryQuotaManagerFactory(QuotaConfig quotaConfig, ThrottlePolicy throttlePolicy, AccountService accountService,\n+      AccountStatsStore accountStatsStore) throws ReflectiveOperationException {\n+    AmbryQuotaManager.AmbryQuotaManagerComponents.accountStatsStore = accountStatsStore;\n     quotaManager = new AmbryQuotaManager(quotaConfig, throttlePolicy, accountService);\n   }\n "
  },
  {
    "sha": "e2bd2687752cafcce664d1c42b2a672ce67c7481",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcer.java",
    "status": "modified",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcer.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcer.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcer.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -19,6 +19,7 @@\n import com.github.ambry.rest.RestMethod;\n import com.github.ambry.rest.RestRequest;\n import com.github.ambry.rest.RestUtils;\n+import com.github.ambry.utils.Pair;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n@@ -140,6 +141,67 @@ boolean shouldThrottle(short accountId, short containerId, QuotaOperation op, lo\n     return mode == QuotaMode.THROTTLING && exceedQuota.get();\n   }\n \n+  /**\n+   * Return quota and current usage for the account/container carried in the given {@code restRequest}.\n+   * If there is no account and container found in the {@code restRequest}, this method would return -1\n+   * for quota. If there is no quota found for the account/container, this method would return -1 for\n+   * quota as well.\n+   * @param restRequest the {@link RestRequest} that carries account and container in the header.\n+   * @return A {@link Pair} whose first element is quota the second element is current storage usage.\n+   */\n+  Pair<Long, Long> getQuotaAndUsage(RestRequest restRequest) {\n+    long quotaValue = -1L;\n+    long currentUsage = 0L;\n+    try {\n+      short accountId = RestUtils.getAccountFromArgs(restRequest.getArgs()).getId();\n+      short containerId = RestUtils.getContainerFromArgs(restRequest.getArgs()).getId();\n+      quotaValue = storageQuota.computeIfAbsent(String.valueOf(accountId), k -> new HashMap<>())\n+          .getOrDefault(String.valueOf(containerId), -1L);\n+      if (quotaValue != -1L) {\n+        currentUsage = storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new HashMap<>())\n+            .getOrDefault(String.valueOf(containerId), 0L);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"Failed to getQuotaAndUsage logic to RestRequest {}\", restRequest, e);\n+    }\n+    return new Pair<>(quotaValue, currentUsage);\n+  }\n+\n+  /**\n+   * Add given {@code usage} to the current storage usage of account/container carried in {@code restRequest} even\n+   * if the result exceeds quota for the target account/container. If there is no account and container found in\n+   * {@code restRequest}, then this is a no-op. If there is no quota found for the account/container, then this is\n+   * a no-op. A {@link Pair} whose first element is quota and second element is the storage usage after charge.\n+   * @param restRequest the {@link RestRequest} that carries account and container in the header.\n+   * @param usage the usage to charge\n+   * @return A {@link Pair} whose first element is quota and second element is the storage usage after charge.\n+   */\n+  Pair<Long, Long> charge(RestRequest restRequest, long usage) {\n+    long quotaValue = -1L;\n+    long usageAfterCharge = 0L;\n+    try {\n+      short accountId = RestUtils.getAccountFromArgs(restRequest.getArgs()).getId();\n+      short containerId = RestUtils.getContainerFromArgs(restRequest.getArgs()).getId();\n+      quotaValue = storageQuota.getOrDefault(String.valueOf(accountId), new HashMap<>())\n+          .getOrDefault(String.valueOf(containerId), -1L);\n+      if (quotaValue != -1L) {\n+        AtomicLong existingUsage = new AtomicLong();\n+        storageUsage.computeIfAbsent(String.valueOf(accountId), k -> new ConcurrentHashMap<>())\n+            .compute(String.valueOf(containerId), (k, v) -> {\n+              existingUsage.set(v == null ? 0 : v);\n+              if (v == null) {\n+                return usage;\n+              }\n+              return v + usage;\n+            });\n+        usageAfterCharge = existingUsage.addAndGet(usage);\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"Failed to getQuotaAndUsage logic to RestRequest {}\", restRequest, e);\n+    }\n+    return new Pair<>(quotaValue, usageAfterCharge);\n+  }\n+\n   /**\n    * Return a {@link StorageQuotaSource.Listener}, only used in test.\n    * @return {@link StorageQuotaSource.Listener}."
  },
  {
    "sha": "2f26b78aa60e53a169b6f84eb84d94a440efb668",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaService.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaService.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaService.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -19,6 +19,7 @@\n import com.github.ambry.quota.QuotaMode;\n import com.github.ambry.rest.RestRequest;\n import com.github.ambry.accountstats.AccountStatsStore;\n+import com.github.ambry.utils.Pair;\n import com.github.ambry.utils.Utils;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n@@ -37,11 +38,11 @@\n   private final StorageQuotaConfig config;\n   private final StorageQuotaServiceMetrics metrics;\n \n-  public AmbryStorageQuotaService(VerifiableProperties verifiableProperties, AccountStatsStore accountStatsStore,\n+  public AmbryStorageQuotaService(StorageQuotaConfig config, AccountStatsStore accountStatsStore,\n       MetricRegistry metricRegistry) throws Exception {\n     this.metrics = new StorageQuotaServiceMetrics(metricRegistry);\n     this.scheduler = Utils.newScheduler(1, STORAGE_QUOTA_SERVICE_PREFIX, false);\n-    this.config = new StorageQuotaConfig(verifiableProperties);\n+    this.config = config;\n     this.storageUsageRefresher =\n         new MySqlStorageUsageRefresher(accountStatsStore, this.scheduler, this.config, metrics);\n     this.storageQuotaSource ="
  },
  {
    "sha": "92a62e70d82144a77d5720d86acffc34c4db66be",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactory.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/storage/AmbryStorageQuotaServiceFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -20,20 +20,21 @@\n \n \n /**\n- * An factory implementation for {@link StorageQuotaService}.\n+ * A factory implementation for {@link StorageQuotaService}.\n  */\n public class AmbryStorageQuotaServiceFactory implements StorageQuotaServiceFactory {\n   private final StorageQuotaService storageQuotaService;\n \n   /**\n    * Constructor to create {@link AmbryStorageQuotaServiceFactory}.\n-   * @param verifiableProperties The {@link VerifiableProperties} to create {@link StorageQuotaConfig}.\n+   * @param config The {@link StorageQuotaConfig}.\n+   * @param accountStatsStore The {@link AccountStatsStore}.\n    * @param metricRegistry The {@link MetricRegistry} to register new metrics.\n    * @throws Exception\n    */\n-  public AmbryStorageQuotaServiceFactory(VerifiableProperties verifiableProperties, AccountStatsStore accountStatsStore,\n+  public AmbryStorageQuotaServiceFactory(StorageQuotaConfig config, AccountStatsStore accountStatsStore,\n       MetricRegistry metricRegistry) throws Exception {\n-    storageQuotaService = new AmbryStorageQuotaService(verifiableProperties, accountStatsStore, metricRegistry);\n+    storageQuotaService = new AmbryStorageQuotaService(config, accountStatsStore, metricRegistry);\n   }\n \n   @Override"
  },
  {
    "sha": "1b6ae28e66fca607121e96ae7cdd68c6b3db934d",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcer.java",
    "status": "added",
    "additions": 146,
    "deletions": 0,
    "changes": 146,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcer.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcer.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcer.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -0,0 +1,146 @@\n+/**\n+ * Copyright 2021 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota.storage;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.accountstats.AccountStatsStore;\n+import com.github.ambry.config.StorageQuotaConfig;\n+import com.github.ambry.messageformat.BlobInfo;\n+import com.github.ambry.quota.QuotaEnforcer;\n+import com.github.ambry.quota.QuotaName;\n+import com.github.ambry.quota.QuotaRecommendation;\n+import com.github.ambry.quota.QuotaResource;\n+import com.github.ambry.quota.QuotaSource;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestUtils;\n+import com.github.ambry.utils.Pair;\n+import com.github.ambry.utils.Utils;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+/**\n+ * An {@link QuotaEnforcer} implementation on each container's storage usage. There are some overlapping code in this\n+ * class with {@link AmbryStorageQuotaService} since we are transitioning to a unified interface with Request Quota.\n+ *\n+ * This is a different from {@link StorageQuotaEnforcer} despite the similarity of names. It has nothing to do with\n+ * {@link StorageQuotaEnforcer} in fact.\n+ */\n+public class StorageQuotaAdaptorQuotaEnforcer implements QuotaEnforcer {\n+  private static final String STORAGE_QUOTA_SERVICE_PREFIX = \"storage-quota-service\";\n+  private static final int HTTP_STATUS_THROTTLE = 429;\n+  private static final int HTTP_STATUS_ALLOW = 200;\n+  private static final long NO_RETRY = -1L;\n+  private static final double BYTES_IN_GB = 1024 * 1024 * 1024;\n+  private final StorageUsageRefresher storageUsageRefresher;\n+  private final StorageQuotaSource storageQuotaSource;\n+  private final AmbryStorageQuotaEnforcer storageQuotaEnforcer;\n+  private final ScheduledExecutorService scheduler;\n+  private final StorageQuotaConfig config;\n+  private final StorageQuotaServiceMetrics metrics;\n+\n+  // The quota recommendation returned when there is no quota found for the given account/container.\n+  private static final QuotaRecommendation NO_QUOTA_VALUE_RECOMMENDATION =\n+      new QuotaRecommendation(false, 0.0f, QuotaName.STORAGE_IN_GB, HTTP_STATUS_ALLOW, NO_RETRY);\n+\n+  /**\n+   * Constructor to instantiate a new {@link StorageQuotaAdaptorQuotaEnforcer}.\n+   * @param storageQuotaConfig the {@link StorageQuotaConfig}.\n+   * @param accountStatsStore the {@link AccountStatsStore}.\n+   * @throws Exception\n+   */\n+  public StorageQuotaAdaptorQuotaEnforcer(StorageQuotaConfig storageQuotaConfig, AccountStatsStore accountStatsStore)\n+      throws Exception {\n+    Objects.requireNonNull(accountStatsStore, \"AccountStatsStore is null\");\n+    this.metrics = new StorageQuotaServiceMetrics(new MetricRegistry());\n+    this.scheduler = Utils.newScheduler(1, STORAGE_QUOTA_SERVICE_PREFIX, false);\n+    this.config = storageQuotaConfig;\n+    this.storageUsageRefresher =\n+        new MySqlStorageUsageRefresher(accountStatsStore, this.scheduler, this.config, metrics);\n+    this.storageQuotaSource =\n+        Utils.<StorageQuotaSourceFactory>getObj(config.sourceFactory, scheduler, config).getStorageQuotaSource();\n+    this.storageQuotaEnforcer = new AmbryStorageQuotaEnforcer(null, this.metrics);\n+  }\n+\n+  @Override\n+  public void init() throws Exception {\n+    storageQuotaEnforcer.setQuotaMode(config.enforcerMode);\n+    storageQuotaEnforcer.initStorageUsage(storageUsageRefresher.getContainerStorageUsage());\n+    storageQuotaEnforcer.initStorageQuota(storageQuotaSource.getContainerQuota());\n+    storageQuotaEnforcer.registerListeners(storageQuotaSource, storageUsageRefresher);\n+  }\n+\n+  @Override\n+  public QuotaRecommendation chargeAndRecommend(RestRequest restRequest, BlobInfo blobInfo,\n+      Map<QuotaName, Double> requestCostMap) {\n+    if (!RestUtils.isUploadRequest(restRequest)) {\n+      return NO_QUOTA_VALUE_RECOMMENDATION;\n+    }\n+    if (!requestCostMap.containsKey(QuotaName.STORAGE_IN_GB)) {\n+      // No cost for the desired QuotaName, then just call recommend\n+      return recommend(restRequest);\n+    }\n+\n+    // The cost is number of bytes in GB. Convert it back to raw number.\n+    long cost = (long) (requestCostMap.get(QuotaName.STORAGE_IN_GB).doubleValue() * BYTES_IN_GB);\n+    Pair<Long, Long> pair = storageQuotaEnforcer.charge(restRequest, cost);\n+    return recommendBasedOnQuotaAndUsage(pair);\n+  }\n+\n+  @Override\n+  public QuotaRecommendation recommend(RestRequest restRequest) {\n+    if (!RestUtils.isUploadRequest(restRequest)) {\n+      return NO_QUOTA_VALUE_RECOMMENDATION;\n+    }\n+    Pair<Long, Long> pair = storageQuotaEnforcer.getQuotaAndUsage(restRequest);\n+    return recommendBasedOnQuotaAndUsage(pair);\n+  }\n+\n+  /**\n+   * Return a {@link QuotaRecommendation} based on the given pair of quota and current usage.\n+   * @param pair The {@link Pair} of quota and current usage.\n+   * @return A {@link QuotaRecommendation}.\n+   */\n+  private QuotaRecommendation recommendBasedOnQuotaAndUsage(Pair<Long, Long> pair) {\n+    long quotaValue = pair.getFirst();\n+    long currentUsage = pair.getSecond();\n+    if (quotaValue == -1L) {\n+      // There is no quota set for the given account/container\n+      return NO_QUOTA_VALUE_RECOMMENDATION;\n+    }\n+    boolean shouldThrottle = currentUsage >= quotaValue;\n+    float usagePercentage = currentUsage >= quotaValue ? 100f : ((float) currentUsage) / quotaValue * 100f;\n+    return new QuotaRecommendation(shouldThrottle, usagePercentage, QuotaName.STORAGE_IN_GB,\n+        shouldThrottle ? HTTP_STATUS_THROTTLE : HTTP_STATUS_ALLOW, NO_RETRY);\n+  }\n+\n+  /**\n+   * This {@link QuotaEnforcer} doesn't require any {@link QuotaSource} since it will fetch the quota internally.\n+   * @return a null QuotaSource.\n+   */\n+  @Override\n+  public QuotaSource getQuotaSource() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    if (scheduler != null) {\n+      long schedulerTimeout = Math.max(config.refresherPollingIntervalMs, config.sourcePollingIntervalMs);\n+      Utils.shutDownExecutorService(scheduler, schedulerTimeout, TimeUnit.MILLISECONDS);\n+    }\n+  }\n+}"
  },
  {
    "sha": "d2d2e2f94548de69cae1a20fd22fbbc36f821b99",
    "filename": "ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcerFactory.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcerFactory.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcerFactory.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/main/java/com/github/ambry/quota/storage/StorageQuotaAdaptorQuotaEnforcerFactory.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2021 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.quota.storage;\n+\n+import com.github.ambry.accountstats.AccountStatsStore;\n+import com.github.ambry.config.QuotaConfig;\n+import com.github.ambry.quota.AmbryQuotaManager;\n+import com.github.ambry.quota.QuotaEnforcer;\n+import com.github.ambry.quota.QuotaEnforcerFactory;\n+import com.github.ambry.quota.QuotaSource;\n+\n+\n+/**\n+ * A factory implementation to return {@link StorageQuotaAdaptorQuotaEnforcer}.\n+ */\n+public class StorageQuotaAdaptorQuotaEnforcerFactory implements QuotaEnforcerFactory {\n+  private final StorageQuotaAdaptorQuotaEnforcer quotaEnforcer;\n+\n+  /**\n+   * Constructor to instantiate a factory.\n+   * @param quotaConfig the {@link QuotaConfig}.\n+   * @param quotaSource the {@link QuotaSource}.\n+   * @throws Exception\n+   */\n+  public StorageQuotaAdaptorQuotaEnforcerFactory(QuotaConfig quotaConfig, QuotaSource quotaSource) throws Exception {\n+    AccountStatsStore accountStatsStore = AmbryQuotaManager.AmbryQuotaManagerComponents.accountStatsStore;\n+    quotaEnforcer = new StorageQuotaAdaptorQuotaEnforcer(quotaConfig.storageQuotaConfig, accountStatsStore);\n+  }\n+\n+  @Override\n+  public QuotaEnforcer getRequestQuotaEnforcer() {\n+    return quotaEnforcer;\n+  }\n+}"
  },
  {
    "sha": "6b97243754632806b3fd793c73c8277c209c7179",
    "filename": "ambry-quota/src/test/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcerTest.java",
    "status": "modified",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/test/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcerTest.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-quota/src/test/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcerTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-quota/src/test/java/com/github/ambry/quota/storage/AmbryStorageQuotaEnforcerTest.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -14,13 +14,23 @@\n package com.github.ambry.quota.storage;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.github.ambry.account.Account;\n+import com.github.ambry.account.AccountBuilder;\n+import com.github.ambry.account.Container;\n+import com.github.ambry.account.ContainerBuilder;\n import com.github.ambry.quota.QuotaMode;\n+import com.github.ambry.rest.MockRestRequest;\n+import com.github.ambry.rest.RestMethod;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.rest.RestUtils;\n+import com.github.ambry.utils.Pair;\n import com.github.ambry.utils.TestUtils;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Random;\n import java.util.concurrent.ConcurrentHashMap;\n+import org.json.JSONObject;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -242,4 +252,87 @@ public void testThrottleExceedsQuota() {\n       }\n     }\n   }\n+\n+  /**\n+   * Test {@link AmbryStorageQuotaEnforcer#getQuotaAndUsage} and {@link AmbryStorageQuotaEnforcer#charge} methods.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testGetQuotaAndUsageAndCharge() throws Exception {\n+    AmbryStorageQuotaEnforcer enforcer = new AmbryStorageQuotaEnforcer(null, metrics);\n+    int initNumAccounts = 10;\n+    Map<String, Map<String, Long>> expectedQuota = TestUtils.makeStorageMap(initNumAccounts, 10, 10000, 1000);\n+    enforcer.initStorageQuota(expectedQuota);\n+    enforcer.initStorageUsage(Collections.EMPTY_MAP);\n+    enforcer.setQuotaMode(QuotaMode.THROTTLING);\n+\n+    for (Map.Entry<String, Map<String, Long>> accountEntry : expectedQuota.entrySet()) {\n+      short accountId = Short.valueOf(accountEntry.getKey());\n+      for (Map.Entry<String, Long> containerEntry : accountEntry.getValue().entrySet()) {\n+        short containerId = Short.valueOf(containerEntry.getKey());\n+        long quota = containerEntry.getValue();\n+        RestRequest restRequest = createRestRequest(accountId, containerId);\n+        Pair<Long, Long> quotaAndUsage = enforcer.getQuotaAndUsage(restRequest);\n+        assertEquals(quota, quotaAndUsage.getFirst().longValue());\n+        assertEquals(0L, quotaAndUsage.getSecond().longValue());\n+\n+        quotaAndUsage = enforcer.charge(restRequest, quota / 2);\n+        assertEquals(quota, quotaAndUsage.getFirst().longValue());\n+        assertEquals(quota / 2, quotaAndUsage.getSecond().longValue());\n+\n+        quotaAndUsage = enforcer.charge(restRequest, quota);\n+        assertEquals(quota, quotaAndUsage.getFirst().longValue());\n+        assertEquals(quota / 2 + quota, quotaAndUsage.getSecond().longValue());\n+      }\n+    }\n+\n+    // Now create a restRequest that doesn't carry account and container\n+    RestRequest restRequest = createRestRequest();\n+    Pair<Long, Long> quotaAndUsage = enforcer.getQuotaAndUsage(restRequest);\n+    assertEquals(-1L, quotaAndUsage.getFirst().longValue());\n+    assertEquals(0L, quotaAndUsage.getSecond().longValue());\n+    quotaAndUsage = enforcer.charge(restRequest, 100L);\n+    assertEquals(-1L, quotaAndUsage.getFirst().longValue());\n+    assertEquals(0L, quotaAndUsage.getSecond().longValue());\n+\n+    restRequest = createRestRequest((short) 1000, (short) 10000);\n+    quotaAndUsage = enforcer.getQuotaAndUsage(restRequest);\n+    assertEquals(-1L, quotaAndUsage.getFirst().longValue());\n+    assertEquals(0L, quotaAndUsage.getSecond().longValue());\n+    quotaAndUsage = enforcer.charge(restRequest, 100L);\n+    assertEquals(-1L, quotaAndUsage.getFirst().longValue());\n+    assertEquals(0L, quotaAndUsage.getSecond().longValue());\n+  }\n+\n+  /**\n+   * Create a {@link MockRestRequest} without any header.\n+   * @return a {@link MockRestRequest} without any header.\n+   * @throws Exception\n+   */\n+  private RestRequest createRestRequest() throws Exception {\n+    JSONObject data = new JSONObject();\n+    data.put(MockRestRequest.REST_METHOD_KEY, RestMethod.GET.name());\n+    data.put(MockRestRequest.URI_KEY, \"/\");\n+    return new MockRestRequest(data, null);\n+  }\n+\n+  /**\n+   * Create a {@link MockRestRequest} with account and container headers.\n+   * @param accountId the account id.\n+   * @param containerId the container id.\n+   * @return a {@link MockRestRequest} with account and container headers.\n+   * @throws Exception\n+   */\n+  private RestRequest createRestRequest(short accountId, short containerId) throws Exception {\n+    JSONObject data = new JSONObject();\n+    data.put(MockRestRequest.REST_METHOD_KEY, RestMethod.GET.name());\n+    data.put(MockRestRequest.URI_KEY, \"/\");\n+    JSONObject headers = new JSONObject();\n+    headers.put(RestUtils.InternalKeys.TARGET_ACCOUNT_KEY,\n+        new AccountBuilder(accountId, \"accountName\", Account.AccountStatus.ACTIVE).build());\n+    headers.put(RestUtils.InternalKeys.TARGET_CONTAINER_KEY,\n+        new ContainerBuilder(containerId, \"containerName\", Container.ContainerStatus.ACTIVE, \"\", accountId).build());\n+    data.put(MockRestRequest.HEADERS_KEY, headers);\n+    return new MockRestRequest(data, null);\n+  }\n }"
  },
  {
    "sha": "cabb8ec6f0a5046f7965d946f15fab806409539f",
    "filename": "ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 21,
    "changes": 26,
    "blob_url": "https://github.com/linkedin/ambry/blob/c93c441b766e3d75ee8523474d137732a81a3495/ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java",
    "raw_url": "https://github.com/linkedin/ambry/raw/c93c441b766e3d75ee8523474d137732a81a3495/ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java",
    "contents_url": "https://api.github.com/repos/linkedin/ambry/contents/ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java?ref=c93c441b766e3d75ee8523474d137732a81a3495",
    "patch": "@@ -26,15 +26,11 @@\n import com.github.ambry.commons.NettySslHttp2Factory;\n import com.github.ambry.commons.SSLFactory;\n import com.github.ambry.config.NettyConfig;\n-import com.github.ambry.config.QuotaConfig;\n import com.github.ambry.config.RestServerConfig;\n import com.github.ambry.config.RouterConfig;\n import com.github.ambry.config.SSLConfig;\n import com.github.ambry.config.VerifiableProperties;\n import com.github.ambry.notification.NotificationSystem;\n-import com.github.ambry.quota.MaxThrottlePolicy;\n-import com.github.ambry.quota.QuotaManager;\n-import com.github.ambry.quota.QuotaManagerFactory;\n import com.github.ambry.router.Router;\n import com.github.ambry.router.RouterFactory;\n import com.github.ambry.utils.Utils;\n@@ -89,7 +85,6 @@\n   private final RestServerState restServerState;\n   private final NettyInternalMetrics nettyInternalMetrics;\n \n-\n   /**\n    * {@link RestServer} specific metrics tracking.\n    */\n@@ -217,17 +212,10 @@ public RestServer(VerifiableProperties verifiableProperties, ClusterMap clusterM\n       ((HelixAccountService) accountService).setupRouter(router);\n     }\n \n-    // setup quota management\n-    QuotaConfig quotaConfig = new QuotaConfig(verifiableProperties);\n-    QuotaManager quotaManager =\n-        ((QuotaManagerFactory) Utils.getObj(quotaConfig.quotaManagerFactory, quotaConfig, new MaxThrottlePolicy(),\n-            accountService)).getQuotaManager();\n-    quotaManager.init();\n-\n     // setup restRequestService\n     RestRequestServiceFactory restRequestServiceFactory =\n         Utils.getObj(restServerConfig.restServerRestRequestServiceFactory, verifiableProperties, clusterMap, router,\n-            accountService, quotaManager);\n+            accountService);\n     restRequestService = restRequestServiceFactory.getRestRequestService();\n     if (restRequestService == null) {\n       throw new InstantiationException(\"RestRequestService is null\");\n@@ -288,10 +276,8 @@ public void start() throws InstantiationException {\n       logger.info(\"NIO server start took {} ms\", elapsedTime);\n       restServerMetrics.nioServerStartTimeInMs.update(elapsedTime);\n \n-      if (nettyInternalMetrics != null) {\n-        nettyInternalMetrics.start();\n-        logger.info(\"NettyInternalMetric starts\");\n-      }\n+      nettyInternalMetrics.start();\n+      logger.info(\"NettyInternalMetric starts\");\n \n       restServerState.markServiceUp();\n       logger.info(\"Service marked as up\");\n@@ -315,10 +301,8 @@ public void shutdown() {\n       restServerState.markServiceDown();\n       logger.info(\"Service marked as down \");\n \n-      if (nettyInternalMetrics != null) {\n-        nettyInternalMetrics.stop();\n-        logger.info(\"NettyInternalMetrics stops\");\n-      }\n+      nettyInternalMetrics.stop();\n+      logger.info(\"NettyInternalMetrics stops\");\n \n       nioServer.shutdown();\n       long nioServerShutdownTime = System.currentTimeMillis();"
  }
]
