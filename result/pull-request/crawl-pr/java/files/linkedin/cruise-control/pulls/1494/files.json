[
  {
    "sha": "8c8c87c9d011b452d1a748914a68a6fc324a200c",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendation.java",
    "status": "added",
    "additions": 397,
    "deletions": 0,
    "changes": 397,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendation.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendation.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendation.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2021 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+\n+/**\n+ * Provision recommendation to add (if {@link ProvisionStatus#UNDER_PROVISIONED}) or remove (if {@link ProvisionStatus#OVER_PROVISIONED})\n+ * resources to/from the cluster with the given constraints.\n+ *\n+ * <p>Resources include:\n+ * <ul>\n+ *   <li>Brokers that can host replicas</li>\n+ *   <li>Racks containing brokers that can host replicas</li>\n+ *   <li>Disks (i.e. relevant to JBOD deployments)</li>\n+ *   <li>Partitions of a topic (can only be added)</li>\n+ * </ul>\n+ *\n+ * <p>Constraints include:\n+ * <ul>\n+ *   <li>Topic name: If the resource is partition, the name of the topic must be specified.</li>\n+ *   <li>A typical broker id and its capacity (one cannot be specified without the other)</li>\n+ *   <li>Specific resource, such as {@link Resource#DISK}.</li>\n+ *   <li>Excluded racks -- i.e. racks for which brokers should not be added to or removed from</li>\n+ *   <li>Total resource capacity required to add or remove</li>\n+ * </ul>\n+ */\n+public class ProvisionRecommendation {\n+  public static final int DEFAULT_OPTIONAL_INT = -1;\n+  public static final double DEFAULT_OPTIONAL_DOUBLE = -1.0;\n+  // Provisions status to identify whether resources will be added or removed.\n+  protected final ProvisionStatus _status;\n+  // Number of resources recommended to be added or removed.\n+  protected final int _numBrokers;\n+  protected final int _numRacks;\n+  protected final int _numDisks;\n+  protected final int _numPartitions;\n+  // If the resource is partition, the name of the topic must be specified.\n+  protected final String _topic;\n+  // A typical broker id and its capacity (one cannot be specified without the other)\n+  protected final int _typicalBrokerId;\n+  protected final double _typicalBrokerCapacity;\n+  // Specific resource, such as {@link Resource#DISK}\n+  protected final Resource _resource;\n+  // Excluded racks -- i.e. racks for which brokers should not be added to or removed from\n+  protected final Set<String> _excludedRackIds;\n+  // Total resource capacity required to add or remove\n+  protected final double _totalCapacity;\n+\n+  public static class Builder {\n+    // Required parameters\n+    private final ProvisionStatus _status;\n+    // Optional parameters - initialized to default values\n+    private int _numBrokers = DEFAULT_OPTIONAL_INT;\n+    private int _numRacks = DEFAULT_OPTIONAL_INT;\n+    private int _numDisks = DEFAULT_OPTIONAL_INT;\n+    private int _numPartitions = DEFAULT_OPTIONAL_INT;\n+    private String _topic = null;\n+    private int _typicalBrokerId = DEFAULT_OPTIONAL_INT;\n+    private double _typicalBrokerCapacity = DEFAULT_OPTIONAL_DOUBLE;\n+    private Resource _resource = null;\n+    private Set<String> _excludedRackIds = null;\n+    private double _totalCapacity = DEFAULT_OPTIONAL_DOUBLE;\n+\n+    public Builder(ProvisionStatus status) {\n+      if (!(status == ProvisionStatus.UNDER_PROVISIONED || status == ProvisionStatus.OVER_PROVISIONED)) {\n+        throw new IllegalArgumentException(String.format(\"Provision recommendation is irrelevant for provision status %s.\", status));\n+      }\n+      _status = status;\n+    }\n+\n+    /**\n+     * (Optional) Set number of brokers\n+     * @param numBrokers Number of brokers to add or remove\n+     * @return this builder.\n+     */\n+    public Builder numBrokers(int numBrokers) {\n+      if (numBrokers <= 0) {\n+        throw new IllegalArgumentException(String.format(\"Number of brokers must be positive (%d).\", numBrokers));\n+      }\n+      _numBrokers = numBrokers;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set number of racks\n+     * @param numRacks Number of racks to add or remove\n+     * @return this builder.\n+     */\n+    public Builder numRacks(int numRacks) {\n+      if (numRacks <= 0) {\n+        throw new IllegalArgumentException(String.format(\"Number of racks must be positive (%d).\", numRacks));\n+      }\n+      _numRacks = numRacks;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set number of disks\n+     * @param numDisks Number of disks to add or remove\n+     * @return this builder.\n+     */\n+    public Builder numDisks(int numDisks) {\n+      if (numDisks <= 0) {\n+        throw new IllegalArgumentException(String.format(\"Number of disks must be positive (%d).\", numDisks));\n+      }\n+      _numDisks = numDisks;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set number of partitions\n+     * @param numPartitions Number of partitions to add or remove\n+     * @return this builder.\n+     */\n+    public Builder numPartitions(int numPartitions) {\n+      if (numPartitions <= 0) {\n+        throw new IllegalArgumentException(String.format(\"Number of partitions must be positive (%d).\", numPartitions));\n+      }\n+      _numPartitions = numPartitions;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set the topic name\n+     * @param topic Topic name for which to add partitions\n+     * @return this builder.\n+     */\n+    public Builder topic(String topic) {\n+      if (topic == null || topic.isEmpty()) {\n+        throw new IllegalArgumentException(String.format(\"Number of partitions must be positive (%s).\", topic));\n+      }\n+      _topic = topic;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set the typical broker id\n+     * @param typicalBrokerId The typical broker id\n+     * @return this builder.\n+     */\n+    public Builder typicalBrokerId(int typicalBrokerId) {\n+      if (typicalBrokerId < 0) {\n+        throw new IllegalArgumentException(String.format(\"Typical broker id must be non-negative (%d).\", typicalBrokerId));\n+      }\n+      _typicalBrokerId = typicalBrokerId;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set the typical broker capacity\n+     * @param typicalBrokerCapacity The typical broker capacity\n+     * @return this builder.\n+     */\n+    public Builder typicalBrokerCapacity(double typicalBrokerCapacity) {\n+      if (typicalBrokerCapacity <= 0.0) {\n+        throw new IllegalArgumentException(String.format(\"Typical broker capacity must be positive (%f).\", typicalBrokerCapacity));\n+      }\n+      _typicalBrokerCapacity = typicalBrokerCapacity;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set the resource\n+     * @param resource The resource\n+     * @return this builder.\n+     */\n+    public Builder resource(Resource resource) {\n+      _resource = resource;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set the excluded rack ids\n+     * @param excludedRackIds The resource\n+     * @return this builder.\n+     */\n+    public Builder excludedRackIds(Set<String> excludedRackIds) {\n+      if (excludedRackIds == null || excludedRackIds.isEmpty()) {\n+        throw new IllegalArgumentException(\"Provided ids for excluded racks cannot be null or empty.\");\n+      }\n+\n+      for (String rackId : excludedRackIds) {\n+        if (rackId.isEmpty()) {\n+          throw new IllegalArgumentException(\"Excluded rack ids cannot contain an empty rack id.\");\n+        }\n+      }\n+\n+      _excludedRackIds = excludedRackIds;\n+      return this;\n+    }\n+\n+    /**\n+     * (Optional) Set the total capacity\n+     * @param totalCapacity Total capacity\n+     * @return this builder.\n+     */\n+    public Builder totalCapacity(double totalCapacity) {\n+      if (totalCapacity <= 0.0) {\n+        throw new IllegalArgumentException(String.format(\"Total capacity must be positive (%f).\", totalCapacity));\n+      }\n+      _totalCapacity = totalCapacity;\n+      return this;\n+    }\n+\n+    public ProvisionRecommendation build() {\n+      return new ProvisionRecommendation(this);\n+    }\n+  }\n+\n+  private ProvisionRecommendation(Builder builder) {\n+    sanityCheckResources(builder);\n+    sanityCheckTypical(builder);\n+    sanityCheckExcludedRackIds(builder);\n+    _status = builder._status;\n+    _numBrokers = builder._numBrokers;\n+    _numRacks = builder._numRacks;\n+    _numDisks = builder._numDisks;\n+    _numPartitions = builder._numPartitions;\n+    _topic = builder._topic;\n+    _typicalBrokerId = builder._typicalBrokerId;\n+    _typicalBrokerCapacity = builder._typicalBrokerCapacity;\n+    _resource = builder._resource;\n+    _excludedRackIds = builder._excludedRackIds;\n+    _totalCapacity = builder._totalCapacity;\n+  }\n+\n+  /**\n+   * Package private for unit test.\n+   * Ensure that\n+   * <ul>\n+   *   <li>exactly one resource type is set</li>\n+   *   <li>if the resource type is partition, then the cluster is under provisioned</li>\n+   *   <li>if the resource type is partition, then the corresponding topic must be specified; otherwise, the topic cannot be specified</li>\n+   * </ul>\n+   *\n+   * @param builder The builder for sanity check upon construction\n+   */\n+  static void sanityCheckResources(Builder builder) {\n+    int numSetResources = builder._numBrokers != DEFAULT_OPTIONAL_INT ? 1 : 0;\n+    if (builder._numRacks != DEFAULT_OPTIONAL_INT) {\n+      numSetResources++;\n+    }\n+    if (builder._numDisks != DEFAULT_OPTIONAL_INT) {\n+      numSetResources++;\n+    }\n+    if (builder._numPartitions != DEFAULT_OPTIONAL_INT) {\n+      numSetResources++;\n+    }\n+\n+    if (numSetResources != 1) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Exactly one resource type must be set (Brokers:%s Racks:%s Disks:%s Partitions:%s).\",\n+                        builder._numBrokers == DEFAULT_OPTIONAL_INT ? \"-\" : String.valueOf(builder._numBrokers),\n+                        builder._numRacks == DEFAULT_OPTIONAL_INT ? \"-\" : String.valueOf(builder._numRacks),\n+                        builder._numDisks == DEFAULT_OPTIONAL_INT ? \"-\" : String.valueOf(builder._numDisks),\n+                        builder._numPartitions == DEFAULT_OPTIONAL_INT ? \"-\" : String.valueOf(builder._numPartitions)));\n+    }\n+\n+    if (builder._numPartitions != DEFAULT_OPTIONAL_INT) {\n+      if (builder._status != ProvisionStatus.UNDER_PROVISIONED) {\n+        throw new IllegalArgumentException(\"When the resource type is partition, the cluster must be under provisioned.\");\n+      } else if (builder._topic == null) {\n+        throw new IllegalArgumentException(\"When the resource type is partition, the corresponding topic must be specified.\");\n+      }\n+    } else if (builder._topic != null) {\n+        throw new IllegalArgumentException(\"When the resource type is not partition, topic cannot be specified.\");\n+    }\n+  }\n+\n+  /**\n+   * Package private for unit test.\n+   * Ensure that\n+   * <ul>\n+   *   <li>a typical broker id or its capacity is not specified without the other one.</li>\n+   *   <li>if typical capacity and id are specified, then number of brokers is also specified.</li>\n+   *   <li>if typical capacity and id are specified, then resource is also specified.</li>\n+   * </ul>\n+   * @param builder The builder for sanity check upon construction\n+   */\n+  static void sanityCheckTypical(Builder builder) {\n+    int numSetTypical = builder._typicalBrokerId != DEFAULT_OPTIONAL_INT ? 1 : 0;\n+    if (builder._typicalBrokerCapacity != DEFAULT_OPTIONAL_DOUBLE) {\n+      numSetTypical++;\n+    }\n+\n+    if (numSetTypical == 1) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Typical broker id must be specified with its capacity (Id:%s Capacity:%s).\",\n+                        builder._typicalBrokerId == DEFAULT_OPTIONAL_INT ? \"-\" : String.valueOf(builder._typicalBrokerId),\n+                        builder._typicalBrokerCapacity == DEFAULT_OPTIONAL_DOUBLE ? \"-\" : String.valueOf(builder._typicalBrokerCapacity)));\n+    } else if (numSetTypical == 2) {\n+      if (builder._numBrokers == DEFAULT_OPTIONAL_INT) {\n+        throw new IllegalArgumentException(\"Typical broker id and capacity cannot be specified without number of brokers.\");\n+      } else if (builder._resource == null) {\n+        throw new IllegalArgumentException(\"Typical broker id and capacity cannot be specified without the resource.\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Package private for unit test.\n+   * Ensure that\n+   * <ul>\n+   *   <li>excluded rack ids can be specified only with the number of brokers</li>\n+   * </ul>\n+   * @param builder The builder for sanity check upon construction\n+   */\n+  static void sanityCheckExcludedRackIds(Builder builder) {\n+    if (builder._excludedRackIds != null && builder._numBrokers == DEFAULT_OPTIONAL_INT) {\n+        throw new IllegalArgumentException(\"Excluded rack ids can be specified only with the number of brokers.\");\n+    }\n+  }\n+\n+  public ProvisionStatus status() {\n+    return _status;\n+  }\n+\n+  public int numBrokers() {\n+    return _numBrokers;\n+  }\n+\n+  public int numRacks() {\n+    return _numRacks;\n+  }\n+\n+  public int numDisks() {\n+    return _numDisks;\n+  }\n+\n+  public int numPartitions() {\n+    return _numPartitions;\n+  }\n+\n+  public String topic() {\n+    return _topic;\n+  }\n+\n+  public int typicalBrokerId() {\n+    return _typicalBrokerId;\n+  }\n+\n+  public double typicalBrokerCapacity() {\n+    return _typicalBrokerCapacity;\n+  }\n+\n+  public Resource resource() {\n+    return _resource;\n+  }\n+\n+  public Set<String> excludedRackIds() {\n+    return Collections.unmodifiableSet(_excludedRackIds);\n+  }\n+\n+  public double totalCapacity() {\n+    return _totalCapacity;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    // 1. Add or remove resources\n+    sb.append(String.format(\"%s at least \",  _status == ProvisionStatus.UNDER_PROVISIONED ? \"Add\" : \"Remove\"));\n+    // 2. Specify the number of brokers, racks, disks, or partitions\n+    if (_numBrokers != DEFAULT_OPTIONAL_INT) {\n+      sb.append(String.format(\"%d broker%s\", _numBrokers, _numBrokers > 1 ? \"s\" : \"\"));\n+    } else if (_numRacks != DEFAULT_OPTIONAL_INT) {\n+      sb.append(String.format(\"%d rack%s with brokers\", _numRacks, _numRacks > 1 ? \"s\" : \"\"));\n+    } else if (_numDisks != DEFAULT_OPTIONAL_INT) {\n+      sb.append(String.format(\"%d disk%s\", _numDisks, _numDisks > 1 ? \"s\" : \"\"));\n+    } else if (_numPartitions != DEFAULT_OPTIONAL_INT) {\n+      sb.append(String.format(\"%d partition%s to topic %s\", _numPartitions, _numPartitions > 1 ? \"s\" : \"\", _topic));\n+    }\n+    // 3. (optional) Typical broker id, its capacity, and resource\n+    if (_typicalBrokerId != DEFAULT_OPTIONAL_INT) {\n+      sb.append(String.format(\" with the same %s capacity (%.2f) as broker-%d\", _resource, _typicalBrokerCapacity, _typicalBrokerId));\n+    } else if (_resource != null) {\n+      sb.append(String.format(\" for %s\", _resource));\n+    }\n+    // 4. (optional) Excluded rack ids\n+    if (_excludedRackIds != null) {\n+      sb.append(String.format(\" %s a rack other than %s\", _status == ProvisionStatus.UNDER_PROVISIONED ? \"to\" : \"from\", _excludedRackIds));\n+    }\n+    // 5. (optional) Total capacity\n+    if (_totalCapacity != DEFAULT_OPTIONAL_DOUBLE) {\n+      sb.append(String.format(\" with a total capacity of %.2f\", _totalCapacity));\n+    }\n+\n+    // 6. End with a dot\n+    return sb.append(\".\").toString();\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2f673bf57204b2f1d2030d9c61decd1445efb069",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponse.java",
    "status": "modified",
    "additions": 25,
    "deletions": 4,
    "changes": 29,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponse.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponse.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponse.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -4,6 +4,9 @@\n \n package com.linkedin.kafka.cruisecontrol.analyzer;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import static com.linkedin.cruisecontrol.common.utils.Utils.validateNotNull;\n \n \n@@ -12,25 +15,33 @@\n  * Recommendations are only relevant to {@link ProvisionStatus#UNDER_PROVISIONED} and {@link ProvisionStatus#OVER_PROVISIONED}.\n  */\n public class ProvisionResponse {\n+  public static final String DEFAULT_RECOMMENDATION = \"N/A\";\n   private ProvisionStatus _status;\n   private final StringBuilder _recommendation;\n+  private final Map<String, ProvisionRecommendation> _recommendationByRecommender;\n \n   /**\n    * Constructor to be used for provision statuses, for which the recommendations are relevant.\n-   * Recommendation and recommender are expected to be human-readable strings.\n+   * Recommender is expected to be a human-readable string.\n    *\n    * @param status The current provision status.\n    * @param recommendation Recommended action regarding the given provision status.\n    * @param recommender The source of the recommended action to be used in aggregate recommendation.\n    */\n-  public ProvisionResponse(ProvisionStatus status, String recommendation, String recommender) {\n+  public ProvisionResponse(ProvisionStatus status, ProvisionRecommendation recommendation, String recommender) {\n     this(status);\n     if (!(status == ProvisionStatus.UNDER_PROVISIONED || status == ProvisionStatus.OVER_PROVISIONED)) {\n       throw new IllegalArgumentException(String.format(\"Recommendation is irrelevant for provision status %s.\", status));\n     }\n-    validateNotNull(recommendation, \"The recommendation cannot be null.\");\n     validateNotNull(recommender, \"The recommender cannot be null.\");\n-    _recommendation.append(String.format(\"[%s] %s\", recommender, recommendation));\n+    if (recommendation == null) {\n+      // The recommendation can be null if the recommender has no recommendation.\n+      _recommendation.append(String.format(\"[%s] %s\", recommender, DEFAULT_RECOMMENDATION));\n+\n+    } else {\n+      _recommendation.append(String.format(\"[%s] %s\", recommender, recommendation));\n+      _recommendationByRecommender.put(recommender, recommendation);\n+    }\n   }\n \n   /**\n@@ -40,6 +51,7 @@ public ProvisionResponse(ProvisionStatus status) {\n     validateNotNull(status, \"The provision status cannot be null.\");\n     _status = status;\n     _recommendation = new StringBuilder();\n+    _recommendationByRecommender = new HashMap<>();\n   }\n \n   /**\n@@ -56,6 +68,13 @@ public String recommendation() {\n     return _recommendation.toString();\n   }\n \n+  /**\n+   * @return Provision recommendation by the recommender.\n+   */\n+  public Map<String, ProvisionRecommendation> recommendationByRecommender() {\n+    return _recommendationByRecommender;\n+  }\n+\n   /**\n    * Aggregate the given provision response to this provision response using the following rules: Aggregating ...\n    * <ul>\n@@ -111,13 +130,15 @@ private void clearRecommendation() {\n     if (_recommendation.length() > 0) {\n       _recommendation.setLength(0);\n     }\n+    _recommendationByRecommender.clear();\n   }\n \n   private void aggregateRecommendations(ProvisionResponse other) {\n     String otherRecommendation = other.recommendation();\n     if (!otherRecommendation.isEmpty()) {\n       _recommendation.append(_recommendation.length() == 0 ? \"\" : \" \").append(otherRecommendation);\n     }\n+    _recommendationByRecommender.putAll(other.recommendationByRecommender());\n   }\n \n   @Override"
  },
  {
    "sha": "2f43f3595a2b32afa355041cbcda678cbb424b04",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractGoal.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -122,11 +122,11 @@ public boolean optimize(ClusterModel clusterModel, Set<Goal> optimizedGoals, Opt\n       }\n       return _succeeded;\n     } catch (OptimizationFailureException ofe) {\n-      _provisionResponse = new ProvisionResponse(UNDER_PROVISIONED, ofe.recommendation(), name());\n+      _provisionResponse = new ProvisionResponse(UNDER_PROVISIONED, ofe.provisionRecommendation(), name());\n       // Mitigation (if relevant) is reported as part of exception message to provide helpful tips concerning the used optimizationOptions.\n       String mitigation = GoalUtils.mitigationForOptimizationFailures(optimizationOptions);\n       String message = String.format(\"%s%s\", ofe.getMessage(), mitigation.isEmpty() ? \"\" : String.format(\" || Tips: %s\", mitigation));\n-      throw new OptimizationFailureException(message, ofe.recommendation());\n+      throw new OptimizationFailureException(message, ofe.provisionRecommendation());\n     } finally {\n       // Clear any sorted replicas tracked in the process of optimization.\n       clusterModel.clearSortedReplicas();"
  },
  {
    "sha": "0aa7dd006a5cf4aa1fcb46acea1bf92571c6bc4a",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractRackAwareGoal.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractRackAwareGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractRackAwareGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/AbstractRackAwareGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -8,6 +8,8 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.ActionType;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n import com.linkedin.kafka.cruisecontrol.model.Broker;\n import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n@@ -134,8 +136,9 @@ protected void rebalanceForBroker(Broker broker,\n           Set<String> partitionRackIds = clusterModel.partition(replica.topicPartition()).partitionBrokers()\n                                                      .stream().map(partitionBroker -> partitionBroker.rack().id()).collect(Collectors.toSet());\n \n-          throw new OptimizationFailureException(String.format(\"[%s] Cannot move %s to %s.\", name(), replica, eligibleBrokers),\n-                                                 String.format(\"Add a broker to a rack other than %s.\", partitionRackIds));\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+              .numBrokers(1).excludedRackIds(partitionRackIds).build();\n+          throw new OptimizationFailureException(String.format(\"[%s] Cannot move %s to %s.\", name(), replica, eligibleBrokers), recommendation);\n         }\n         LOG.debug(\"Cannot move replica {} to any broker in {}\", replica, eligibleBrokers);\n       }"
  },
  {
    "sha": "96d4f1581991db4fa43cab875f23675317b44325",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/CapacityGoal.java",
    "status": "modified",
    "additions": 26,
    "deletions": 24,
    "changes": 50,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/CapacityGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/CapacityGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/CapacityGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -6,6 +6,8 @@\n package com.linkedin.kafka.cruisecontrol.analyzer.goals;\n \n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Resource;\n import com.linkedin.kafka.cruisecontrol.analyzer.ActionAcceptance;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n@@ -156,20 +158,22 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n       Set<Integer> brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n       if (brokersAllowedReplicaMove.isEmpty()) {\n         // Handle the case when all alive brokers are excluded from replica moves.\n-        throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                               String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+            .numBrokers(clusterModel.maxReplicationFactor()).build();\n+        throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n       }\n \n       // Identify a typical broker capacity to be used in recommendations in case the cluster is under-provisioned.\n       int typicalBrokerId = brokersAllowedReplicaMove.iterator().next();\n       double typicalCapacity = clusterModel.broker(typicalBrokerId).capacityFor(resource());\n       double missingCapacity = existingUtilization - allowedCapacity;\n-      int numBrokersToAdd = (int) (missingCapacity / (typicalCapacity * _balancingConstraint.capacityThreshold(resource())));\n+      int numBrokersToAdd = (int) Math.ceil(missingCapacity / (typicalCapacity * _balancingConstraint.capacityThreshold(resource())));\n \n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(numBrokersToAdd).typicalBrokerCapacity(typicalCapacity).typicalBrokerId(typicalBrokerId).resource(resource()).build();\n       throw new OptimizationFailureException(\n           String.format(\"[%s] Insufficient capacity for %s (Utilization %.2f, Allowed Capacity %.2f, Threshold: %.2f).\", name(), resource(),\n-                        existingUtilization, allowedCapacity, _balancingConstraint.capacityThreshold(resource())),\n-          String.format(\"Add at least %d brokers with the same capacity (%.2f) as broker-%d.\", numBrokersToAdd, typicalCapacity, typicalBrokerId));\n+                        existingUtilization, allowedCapacity, _balancingConstraint.capacityThreshold(resource())), recommendation);\n     }\n \n     Set<String> excludedTopics = optimizationOptions.excludedTopics();\n@@ -204,7 +208,7 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n       throws OptimizationFailureException {\n     // Ensure the resource utilization is under capacity limit.\n     // While proposals exclude the excludedTopics, the utilization still considers replicas of the excludedTopics.\n-    ensureUtilizationUnderCapacity(clusterModel, optimizationOptions);\n+    ensureUtilizationUnderCapacity(clusterModel);\n     // Sanity check: No self-healing eligible replica should remain at a dead broker/disk.\n     GoalUtils.ensureNoOfflineReplicas(clusterModel, name());\n     // Sanity check: No replica should be moved to a broker, which used to host any replica of the same partition on its broken disk.\n@@ -217,10 +221,8 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n    * {@link Resource#isBrokerResource()} and {@link Resource#isHostResource()} determines the level of checks this\n    * function performs.\n    * @param clusterModel Cluster model.\n-   * @param optimizationOptions Options to take into account during optimization.\n    */\n-  private void ensureUtilizationUnderCapacity(ClusterModel clusterModel, OptimizationOptions optimizationOptions)\n-      throws OptimizationFailureException {\n+  private void ensureUtilizationUnderCapacity(ClusterModel clusterModel) throws OptimizationFailureException {\n     Resource resource = resource();\n     double capacityThreshold = _balancingConstraint.capacityThreshold(resource);\n \n@@ -232,9 +234,10 @@ private void ensureUtilizationUnderCapacity(ClusterModel clusterModel, Optimizat\n \n         if (!broker.host().replicas().isEmpty() && utilization > capacityLimit) {\n           // The utilization of the host for the resource is over the capacity limit.\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+              .numBrokers(1).resource(resource()).build();\n           throw new OptimizationFailureException(String.format(\"[%s] %s utilization for host %s (%.2f) is above capacity limit (%.2f).\",\n-                                                               name(), resource, broker.host().name(), utilization, capacityLimit),\n-                                                 \"Add at least one broker.\");\n+                                                               name(), resource, broker.host().name(), utilization, capacityLimit), recommendation);\n         }\n       }\n       // Broker-level violation check.\n@@ -244,9 +247,10 @@ private void ensureUtilizationUnderCapacity(ClusterModel clusterModel, Optimizat\n \n         if (!broker.replicas().isEmpty() && utilization > capacityLimit) {\n           // The utilization of the broker for the resource is over the capacity limit.\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+              .numBrokers(1).resource(resource()).build();\n           throw new OptimizationFailureException(String.format(\"[%s] %s utilization for broker %d (%.2f) is above capacity limit (%.2f).\",\n-                                                               name(), resource, broker.id(), utilization, capacityLimit),\n-                                                 \"Add at least one broker.\");\n+                                                               name(), resource, broker.id(), utilization, capacityLimit), recommendation);\n         }\n       }\n     }\n@@ -342,35 +346,33 @@ protected void rebalanceForBroker(Broker broker,\n     }\n \n     // Ensure that the requirements of the capacity goal are satisfied after the balance.\n-    postSanityCheck(isUtilizationOverLimit, broker, brokerCapacityLimit, hostCapacityLimit, optimizationOptions);\n+    postSanityCheck(isUtilizationOverLimit, broker, brokerCapacityLimit, hostCapacityLimit);\n   }\n \n-  private void postSanityCheck(boolean utilizationOverLimit,\n-                               Broker broker,\n-                               double brokerCapacityLimit,\n-                               double hostCapacityLimit,\n-                               OptimizationOptions optimizationOptions)\n+  private void postSanityCheck(boolean utilizationOverLimit, Broker broker, double brokerCapacityLimit, double hostCapacityLimit)\n       throws OptimizationFailureException {\n     // 1. Capacity violation check -- note that this check also ensures that no replica resides on dead brokers.\n     if (utilizationOverLimit) {\n       Resource currentResource = resource();\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(1).resource(currentResource).build();\n       if (!currentResource.isHostResource()) {\n         // Utilization is above the capacity limit after all replicas in the given source broker were checked.\n         throw new OptimizationFailureException(String.format(\"[%s] Utilization (%.2f) of broker %d violated capacity limit (%.2f) for resource %s.\",\n                                                              name(), broker.load().expectedUtilizationFor(currentResource), broker.id(),\n-                                                             brokerCapacityLimit, currentResource),\n-                                               \"Add at least one broker.\");\n+                                                             brokerCapacityLimit, currentResource), recommendation);\n       } else {\n         throw new OptimizationFailureException(String.format(\"[%s] Utilization (%.2f) of host %s violated capacity limit (%.2f) for resource %s.\",\n                                                              name(), broker.host().load().expectedUtilizationFor(currentResource),\n-                                                             broker.host().name(), hostCapacityLimit, currentResource),\n-                                               \"Add at least one host.\");\n+                                                             broker.host().name(), hostCapacityLimit, currentResource), recommendation);\n       }\n     }\n     // 2. Ensure that no offline replicas remain in the broker.\n     if (!broker.currentOfflineReplicas().isEmpty()) {\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(1).resource(resource()).build();\n       throw new OptimizationFailureException(String.format(\"[%s] Cannot remove offline replicas from broker %d.\", name(), broker.id()),\n-                                             \"Add at least one broker.\");\n+                                             recommendation);\n     }\n   }\n "
  },
  {
    "sha": "b85ca07df8f7ed09ce15ed40abef13a9f0b8457b",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/GoalUtils.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -8,6 +8,8 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n import com.linkedin.kafka.cruisecontrol.analyzer.ActionType;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Resource;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n import com.linkedin.kafka.cruisecontrol.model.Broker;\n@@ -272,10 +274,10 @@ public static void ensureNoOfflineReplicas(ClusterModel clusterModel, String goa\n     // Sanity check: No self-healing eligible replica should remain at a decommissioned broker or on broken disk.\n     for (Replica replica : clusterModel.selfHealingEligibleReplicas()) {\n       if (replica.isCurrentOffline()) {\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).build();\n         Broker broker = replica.broker();\n         throw new OptimizationFailureException(String.format(\"[%s] Cannot remove %s from %s broker %d (has %d replicas).\", goalName,\n-                                                             replica, broker.state(), broker.id(), broker.replicas().size()),\n-                                               \"Add at least one broker.\");\n+                                                             replica, broker.state(), broker.id(), broker.replicas().size()), recommendation);\n       }\n     }\n   }\n@@ -293,9 +295,10 @@ public static void ensureReplicasMoveOffBrokersWithBadDisks(ClusterModel cluster\n     for (Broker broker : clusterModel.brokersWithBadDisks()) {\n       for (Replica replica : broker.replicas()) {\n         if (!clusterModel.partition(replica.topicPartition()).canAssignReplicaToBroker(broker)) {\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).build();\n           throw new OptimizationFailureException(String.format(\"[%s] A replica of %s was moved back to broker %d with broken disk.\", goalName,\n                                                                clusterModel.partition(replica.topicPartition()), replica.broker().id()),\n-                                                 \"Add at least one broker.\");\n+                                                 recommendation);\n         }\n       }\n     }"
  },
  {
    "sha": "eb845b82f4e9e32009f1340fc241e7e731ebc835",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/IntraBrokerDiskCapacityGoal.java",
    "status": "modified",
    "additions": 9,
    "deletions": 4,
    "changes": 13,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/IntraBrokerDiskCapacityGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/IntraBrokerDiskCapacityGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/IntraBrokerDiskCapacityGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -6,6 +6,8 @@\n package com.linkedin.kafka.cruisecontrol.analyzer.goals;\n \n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Resource;\n import com.linkedin.kafka.cruisecontrol.analyzer.ActionAcceptance;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n@@ -76,10 +78,12 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n       double existingUtilization = broker.load().expectedUtilizationFor(RESOURCE);\n       double allowedCapacity = broker.capacityFor(RESOURCE) * _balancingConstraint.capacityThreshold(RESOURCE);\n       if (allowedCapacity < existingUtilization) {\n-        double requiredCapacity = existingUtilization * _balancingConstraint.capacityThreshold(RESOURCE);\n+        double requiredCapacity = existingUtilization / _balancingConstraint.capacityThreshold(RESOURCE);\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+            .numBrokers(1).totalCapacity(requiredCapacity).build();\n         throw new OptimizationFailureException(String.format(\"[%s] Insufficient disk capacity at broker %d (Utilization %.2f, Allowed \"\n                                                              + \"Capacity %.2f).\", name(), broker.id(), existingUtilization, allowedCapacity),\n-                                               String.format(\"Add at least one broker with capacity %.2f.\", requiredCapacity));\n+                                               recommendation);\n       }\n     }\n \n@@ -211,9 +215,10 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n         if (disk.isAlive() && isUtilizationOverLimit(disk)) {\n           // The utilization of the host for the resource is over the capacity limit.\n           double requiredCapacity = disk.utilization() / _balancingConstraint.capacityThreshold(RESOURCE);\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+              .numDisks(1).totalCapacity(requiredCapacity).build();\n           throw new OptimizationFailureException(String.format(\"[%s] Utilization (%.2f) for disk %s on broker %d is above capacity limit.\",\n-                                                               name(), disk.utilization(), disk, broker.id()),\n-                                                 String.format(\"Add at least one disk with capacity %.2f.\", requiredCapacity));\n+                                                               name(), disk.utilization(), disk, broker.id()), recommendation);\n         }\n       }\n     }"
  },
  {
    "sha": "eb492ad5e6310ed9903d529c88e736d3288cccca",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/LeaderBytesInDistributionGoal.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/LeaderBytesInDistributionGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/LeaderBytesInDistributionGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/LeaderBytesInDistributionGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -11,6 +11,8 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n import com.linkedin.kafka.cruisecontrol.analyzer.ActionType;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Resource;\n import com.linkedin.kafka.cruisecontrol.common.Statistic;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n@@ -176,8 +178,9 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n     _brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n     if (_brokersAllowedReplicaMove.isEmpty()) {\n       // Handle the case when all alive brokers are excluded from replica moves.\n-      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                             String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(clusterModel.maxReplicationFactor()).build();\n+      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n     }\n     _meanLeaderBytesIn = 0.0;\n     _overLimitBrokerIds = new HashSet<>();"
  },
  {
    "sha": "d75be6187d6b3ab65a739167d771f4581098affa",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/MinTopicLeadersPerBrokerGoal.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/MinTopicLeadersPerBrokerGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/MinTopicLeadersPerBrokerGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/MinTopicLeadersPerBrokerGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -9,6 +9,8 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Utils;\n import com.linkedin.kafka.cruisecontrol.config.constants.AnalyzerConfig;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n@@ -201,11 +203,12 @@ private void validateEnoughLeaderToDistribute(ClusterModel clusterModel, Optimiz\n \n     for (Map.Entry<String, Integer> numLeadersPerTopic : numLeadersByTopicNames.entrySet()) {\n       if (numLeadersPerTopic.getValue() < totalMinimumLeaderCount) {\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+            .numPartitions(totalMinimumLeaderCount - numLeadersPerTopic.getValue()).topic(numLeadersPerTopic.getKey()).build();\n         throw new OptimizationFailureException(\n             String.format(\"[%s] Cannot distribute %d leaders over %d broker(s) with minimum required per broker leader count %d for topic %s.\",\n                           name(), numLeadersPerTopic.getValue(), eligibleBrokersForLeadership.size(), minTopicLeadersPerBroker(),\n-                          numLeadersPerTopic.getKey()),\n-            String.format(\"Increase the partition count of topic %s to at least %d.\", numLeadersPerTopic.getKey(), totalMinimumLeaderCount));\n+                          numLeadersPerTopic.getKey()), recommendation);\n       }\n     }\n   }\n@@ -215,8 +218,9 @@ private void validateBrokersAllowedReplicaMoveExist(ClusterModel clusterModel, O\n     Set<Integer> brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n     if (brokersAllowedReplicaMove.isEmpty()) {\n       // Handle the case when all alive brokers are excluded from replica moves.\n-      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                             String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(clusterModel.maxReplicationFactor()).build();\n+      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n     }\n   }\n \n@@ -427,9 +431,10 @@ private void moveAwayOfflineReplicas(Broker srcBroker,\n     for (Replica offlineReplica : offlineReplicas) {\n       if (maybeApplyBalancingAction(clusterModel, offlineReplica, eligibleBrokersToMoveOfflineReplicasTo,\n                                     INTER_BROKER_REPLICA_MOVEMENT, optimizedGoals, optimizationOptions) == null) {\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).build();\n         throw new OptimizationFailureException(String.format(\"[%s] Cannot remove %s from %s broker %d (has %d replicas).\", name(),\n                                                              offlineReplica, srcBroker.state(), srcBroker.id(), srcBroker.replicas().size()),\n-                                               \"Add at least one broker.\");\n+                                               recommendation);\n       }\n     }\n   }"
  },
  {
    "sha": "26275f472382fb08f731fcfc9097323c274e9850",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareDistributionGoal.java",
    "status": "modified",
    "additions": 26,
    "deletions": 7,
    "changes": 33,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareDistributionGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareDistributionGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareDistributionGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -6,6 +6,7 @@\n \n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionResponse;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n@@ -16,6 +17,7 @@\n import com.linkedin.kafka.cruisecontrol.model.SortedReplicasHelper;\n import java.util.Comparator;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import java.util.SortedSet;\n@@ -140,14 +142,16 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n     _brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n     if (_brokersAllowedReplicaMove.isEmpty()) {\n       // Handle the case when all alive brokers are excluded from replica moves.\n-      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                             String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(clusterModel.maxReplicationFactor()).build();\n+      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n     }\n     _balanceLimit = new BalanceLimit(clusterModel, optimizationOptions);\n     int numExtraRacks = _balanceLimit.numAliveRacksAllowedReplicaMoves() - clusterModel.maxReplicationFactor();\n     if (numExtraRacks >= _balancingConstraint.overprovisionedMinExtraRacks()) {\n       int numRacksToDrop = numExtraRacks - _balancingConstraint.overprovisionedMinExtraRacks() + 1;\n-      String recommendation = String.format(\"Reduce rack diversity by at least %d racks.\", numRacksToDrop);\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.OVER_PROVISIONED)\n+          .numRacks(numRacksToDrop).build();\n       _provisionResponse = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, recommendation, name());\n     }\n     Set<String> excludedTopics = optimizationOptions.excludedTopics();\n@@ -322,10 +326,24 @@ private void ensureRackAwareDistribution(ClusterModel clusterModel, Optimization\n         // alive racks allowed replica moves or (2) more replicas that they could have been placed into other racks.\n         boolean someAliveRacksHaveNoReplicas = numReplicasByRack.size() < _balanceLimit.numAliveRacksAllowedReplicaMoves();\n         if (someAliveRacksHaveNoReplicas || maxNumReplicasInARack - min(numReplicasByRack.values()) > 1) {\n+          Set<String> excludedRackIds = new HashSet<>(numReplicasByRack.size());\n+          if (someAliveRacksHaveNoReplicas) {\n+             // Exclude all racks containing replicas of this partition.\n+            excludedRackIds.addAll(numReplicasByRack.keySet());\n+          } else {\n+            for (Map.Entry<String, Integer> entry : numReplicasByRack.entrySet()) {\n+              if (entry.getValue() == maxNumReplicasInARack) {\n+                // Racks except for the one that hosts the maximum number of replicas are available for hosting more replicas.\n+                excludedRackIds.add(entry.getKey());\n+              }\n+            }\n+          }\n+\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+              .numBrokers(1).excludedRackIds(excludedRackIds).build();\n           throw new OptimizationFailureException(String.format(\"[%s] Partition %s is not rack-aware. Brokers (%s) and replicas per rack (%s).\",\n                                                                name(), leader.topicPartition(), partitionBrokers, numReplicasByRack),\n-                                                 String.format(\"Add at least one broker to a rack containing fewer replicas per rack: %s\",\n-                                                               numReplicasByRack));\n+                                                 recommendation);\n         }\n       }\n     }\n@@ -357,8 +375,9 @@ private void ensureRackAwareDistribution(ClusterModel clusterModel, Optimization\n       _numAliveRacksAllowedReplicaMoves = clusterModel.numAliveRacksAllowedReplicaMoves(optimizationOptions);\n       if (_numAliveRacksAllowedReplicaMoves == 0) {\n         // Handle the case when all alive racks are excluded from replica moves.\n-        throw new OptimizationFailureException(\"All alive racks are excluded from replica moves.\",\n-                                               String.format(\"Add at least %d brokers to different racks.\", clusterModel.maxReplicationFactor()));\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+            .numBrokers(clusterModel.maxReplicationFactor()).build();\n+        throw new OptimizationFailureException(\"All alive racks are excluded from replica moves.\", recommendation);\n       }\n       int maxReplicationFactor = clusterModel.maxReplicationFactor();\n       _baseLimitByRF = new HashMap<>(maxReplicationFactor);"
  },
  {
    "sha": "145dfdbac5d022d94cbb64eb1bb1b32eeb4c67b2",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareGoal.java",
    "status": "modified",
    "additions": 12,
    "deletions": 6,
    "changes": 18,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/RackAwareGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -7,6 +7,7 @@\n \n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionResponse;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n@@ -88,24 +89,27 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n               Math.max(maxReplicationFactorOfIncludedTopics, replicationFactorByTopicEntry.getValue());\n           if (maxReplicationFactorOfIncludedTopics > numAliveRacks) {\n             int missingRacks = maxReplicationFactorOfIncludedTopics - numAliveRacks;\n+            ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+                .numRacks(missingRacks).build();\n             throw new OptimizationFailureException(\n                 String.format(\"[%s] Insufficient number of racks to distribute included replicas (Current: %d, Needed: %d).\",\n-                              name(), numAliveRacks, maxReplicationFactorOfIncludedTopics),\n-                String.format(\"Add at least %d racks with brokers.\", missingRacks));\n+                              name(), numAliveRacks, maxReplicationFactorOfIncludedTopics), recommendation);\n           }\n         }\n       }\n     } else if (clusterModel.maxReplicationFactor() > numAliveRacks) {\n       int missingRacks = clusterModel.maxReplicationFactor() - numAliveRacks;\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numRacks(missingRacks).build();\n       throw new OptimizationFailureException(\n           String.format(\"[%s] Insufficient number of racks to distribute each replica (Current: %d, Needed: %d).\",\n-                        name(), numAliveRacks, clusterModel.maxReplicationFactor()),\n-          String.format(\"Add at least %d racks with brokers.\", missingRacks));\n+                        name(), numAliveRacks, clusterModel.maxReplicationFactor()), recommendation);\n     }\n     int numExtraRacks = numAliveRacks - clusterModel.maxReplicationFactor();\n     if (numExtraRacks >= _balancingConstraint.overprovisionedMinExtraRacks()) {\n       int numRacksToDrop = numExtraRacks - _balancingConstraint.overprovisionedMinExtraRacks() + 1;\n-      String recommendation = String.format(\"Reduce rack diversity by at least %d racks.\", numRacksToDrop);\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.OVER_PROVISIONED)\n+          .numRacks(numRacksToDrop).build();\n       _provisionResponse = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, recommendation, name());\n     }\n \n@@ -176,9 +180,11 @@ private void ensureRackAware(ClusterModel clusterModel, OptimizationOptions opti\n       replicaBrokersRackIds.add(leader.broker().rack().id());\n       if (replicaBrokersRackIds.size() != (followerBrokers.size() + 1)) {\n         int missingRacks = (followerBrokers.size() + 1) - replicaBrokersRackIds.size();\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+            .numRacks(missingRacks).build();\n         throw new OptimizationFailureException(String.format(\"[%s] Partition %s is not rack-aware. Leader (%s) and follower brokers (%s).\",\n                                                              name(), leader.topicPartition(), leader.broker(), followerBrokers),\n-                                               String.format(\"Add at least %d racks with brokers.\", missingRacks));\n+                                               recommendation);\n       }\n     }\n   }"
  },
  {
    "sha": "ff50dd92a5a2ef69d9d24870da69795220f7648a",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaCapacityGoal.java",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaCapacityGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaCapacityGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaCapacityGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -10,6 +10,8 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n import com.linkedin.kafka.cruisecontrol.analyzer.ActionType;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n import com.linkedin.kafka.cruisecontrol.model.Broker;\n import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n@@ -147,12 +149,13 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n     if (totalReplicasInCluster > maxReplicasInCluster) {\n       int minRequiredBrokers = (int) Math.ceil(totalReplicasInCluster / (double) _balancingConstraint.maxReplicasPerBroker());\n       int numBrokersToAdd = minRequiredBrokers - brokersAllowedReplicaMove.size();\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(numBrokersToAdd).build();\n       throw new OptimizationFailureException(\n           String.format(\"[%s] Total replicas in cluster: %d exceeds the maximum allowed replicas in cluster: %d (Alive \"\n                             + \"brokers: %d, Allowed number of replicas per broker: %d).\",\n                         name(), totalReplicasInCluster, maxReplicasInCluster, clusterModel.aliveBrokers().size(),\n-                        _balancingConstraint.maxReplicasPerBroker()),\n-          String.format(\"Add at least %d brokers.\", numBrokersToAdd));\n+                        _balancingConstraint.maxReplicasPerBroker()), recommendation);\n     }\n \n     // Filter out some replicas based on optimization options.\n@@ -203,10 +206,10 @@ private void ensureReplicaCapacitySatisfied(ClusterModel clusterModel, Optimizat\n     for (Broker broker : brokersToBalance(clusterModel)) {\n       int numBrokerReplicas = broker.replicas().size();\n       if (numBrokerReplicas > _balancingConstraint.maxReplicasPerBroker()) {\n+        ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).build();\n         throw new OptimizationFailureException(\n             String.format(\"[%s] Replica count in broker %d exceeds the maximum allowed number of replicas per broker: %d.\",\n-                          name(), numBrokerReplicas, _balancingConstraint.maxReplicasPerBroker()),\n-            \"Add at least one broker.\");\n+                          name(), numBrokerReplicas, _balancingConstraint.maxReplicasPerBroker()), recommendation);\n       }\n     }\n   }\n@@ -242,18 +245,18 @@ protected void rebalanceForBroker(Broker broker,\n       if (b == null) {\n         if (!broker.isAlive()) {\n           // If the replica resides in a dead broker, throw an exception!\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).build();\n           throw new OptimizationFailureException(\n               String.format(\"[%s] Failed to move dead broker replica %s of partition %s to a broker in %s. Per broker limit: \"\n                             + \"%d for brokers: %s\", name(), replica, clusterModel.partition(replica.topicPartition()),\n-                            eligibleBrokers, _balancingConstraint.maxReplicasPerBroker(), clusterModel.brokers()),\n-              \"Add at least one broker.\");\n+                            eligibleBrokers, _balancingConstraint.maxReplicasPerBroker(), clusterModel.brokers()), recommendation);\n         } else if (isReplicaOffline) {\n           // If the replica is offline on a broker with bad disk, throw an exception!\n+          ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).build();\n           throw new OptimizationFailureException(\n               String.format(\"[%s] Failed to move offline replica %s of partition %s to a broker in %s. Per broker limit: \"\n                             + \"%d for brokers: %s\", name(), replica, clusterModel.partition(replica.topicPartition()),\n-                            eligibleBrokers, _balancingConstraint.maxReplicasPerBroker(), clusterModel.brokers()),\n-              \"Add at least one broker.\");\n+                            eligibleBrokers, _balancingConstraint.maxReplicasPerBroker(), clusterModel.brokers()), recommendation);\n         }\n         LOG.debug(\"Failed to move replica {} to any broker in {}.\", replica, eligibleBrokers);\n       }"
  },
  {
    "sha": "754532382f2e868b628671a9566793c571f27d01",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionAbstractGoal.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionAbstractGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionAbstractGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionAbstractGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -7,6 +7,8 @@\n \n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n import com.linkedin.kafka.cruisecontrol.model.Broker;\n import com.linkedin.kafka.cruisecontrol.model.ClusterModel;\n@@ -124,8 +126,9 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n     _brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n     if (_brokersAllowedReplicaMove.isEmpty()) {\n       // Handle the case when all alive brokers are excluded from replica moves.\n-      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                             String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(clusterModel.maxReplicationFactor()).build();\n+      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n     }\n     // Initialize the average replicas on an alive broker.\n     _avgReplicasOnAliveBroker = numInterestedReplicas(clusterModel) / (double) _brokersAllowedReplicaMove.size();"
  },
  {
    "sha": "d58d3b5938b7cd9686a343ff9eb582942eb45668",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ReplicaDistributionGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -11,6 +11,7 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.AnalyzerUtils;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionResponse;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Statistic;\n@@ -96,7 +97,8 @@ protected void updateGoalState(ClusterModel clusterModel, OptimizationOptions op\n     super.updateGoalState(clusterModel, optimizationOptions);\n     Integer numBrokersToDrop = numBrokersToDrop(clusterModel);\n     if (numBrokersToDrop != null) {\n-      String recommendation = String.format(\"Remove at least %d brokers.\", numBrokersToDrop);\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.OVER_PROVISIONED)\n+          .numBrokers(numBrokersToDrop).build();\n       _provisionResponse = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, recommendation, name());\n     } else if (_succeeded) {\n       // The cluster is not overprovisioned and all brokers are within the upper and lower balance limits."
  },
  {
    "sha": "4661a8b304b873061ed18b017785c2daed3a25a5",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/ResourceDistributionGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -6,6 +6,7 @@\n package com.linkedin.kafka.cruisecontrol.analyzer.goals;\n \n import com.linkedin.kafka.cruisecontrol.analyzer.OptimizationOptions;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionResponse;\n import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Resource;\n@@ -67,7 +68,7 @@\n   // This is used to identify the overprovisioned cluster status\n   private boolean _isLowUtilization;\n   // The recommendation to be used in case the cluster is overprovisioned\n-  private String _overProvisionedRecommendation;\n+  private ProvisionRecommendation _overProvisionedRecommendation;\n \n   /**\n    * Constructor for Resource Distribution Goal.\n@@ -241,8 +242,9 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n     _brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n     if (_brokersAllowedReplicaMove.isEmpty()) {\n       // Handle the case when all alive brokers are excluded from replica moves.\n-      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                             String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(clusterModel.maxReplicationFactor()).build();\n+      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n     }\n     _fixOfflineReplicasOnly = false;\n     double resourceUtilization = clusterModel.load().expectedUtilizationFor(resource());\n@@ -273,8 +275,8 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n       double allowedCapacity = resourceUtilization / _balancingConstraint.lowUtilizationThreshold(resource());\n       int allowedNumBrokers = (int) (allowedCapacity / typicalCapacity);\n       int numBrokersToDrop = _brokersAllowedReplicaMove.size() - allowedNumBrokers;\n-      _overProvisionedRecommendation = String.format(\"Remove at least %d brokers with the same capacity (%.2f) as broker-%d.\",\n-                                                     numBrokersToDrop, typicalCapacity, typicalBrokerId);\n+      _overProvisionedRecommendation = new ProvisionRecommendation.Builder(ProvisionStatus.OVER_PROVISIONED)\n+          .numBrokers(numBrokersToDrop).typicalBrokerCapacity(typicalCapacity).typicalBrokerId(typicalBrokerId).resource(resource()).build();\n     }\n   }\n "
  },
  {
    "sha": "2385ef08d6740e5afe4027199c4a8c365b66befa",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/TopicReplicaDistributionGoal.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/TopicReplicaDistributionGoal.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/TopicReplicaDistributionGoal.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/goals/TopicReplicaDistributionGoal.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -11,6 +11,8 @@\n import com.linkedin.kafka.cruisecontrol.analyzer.AnalyzerUtils;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingConstraint;\n import com.linkedin.kafka.cruisecontrol.analyzer.BalancingAction;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n import com.linkedin.kafka.cruisecontrol.common.Statistic;\n import com.linkedin.kafka.cruisecontrol.exception.OptimizationFailureException;\n import com.linkedin.kafka.cruisecontrol.model.Broker;\n@@ -260,8 +262,9 @@ protected void initGoalState(ClusterModel clusterModel, OptimizationOptions opti\n     _brokersAllowedReplicaMove = GoalUtils.aliveBrokersNotExcludedForReplicaMove(clusterModel, optimizationOptions);\n     if (_brokersAllowedReplicaMove.isEmpty()) {\n       // Handle the case when all alive brokers are excluded from replica moves.\n-      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()),\n-                                             String.format(\"Add at least %d brokers.\", clusterModel.maxReplicationFactor()));\n+      ProvisionRecommendation recommendation = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+          .numBrokers(clusterModel.maxReplicationFactor()).build();\n+      throw new OptimizationFailureException(String.format(\"[%s] All alive brokers are excluded from replica moves.\", name()), recommendation);\n     }\n     // Initialize the average replicas on an alive broker.\n     for (String topic : clusterModel.topics()) {"
  },
  {
    "sha": "ae349e5e68527b29ae5a704fa42c176f36079b62",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -15,6 +15,7 @@\n import com.linkedin.kafka.cruisecontrol.detector.MaintenanceEvent;\n import com.linkedin.kafka.cruisecontrol.detector.NoopMaintenanceEventReader;\n import com.linkedin.kafka.cruisecontrol.detector.NoopMetricAnomalyFinder;\n+import com.linkedin.kafka.cruisecontrol.detector.NoopProvisioner;\n import com.linkedin.kafka.cruisecontrol.detector.NoopTopicAnomalyFinder;\n import com.linkedin.kafka.cruisecontrol.detector.notifier.NoopNotifier;\n import java.util.Collections;\n@@ -263,6 +264,14 @@ private AnomalyDetectorConfig() {\n   public static final String MAINTENANCE_EVENT_STOP_ONGOING_EXECUTION_DOC = \"The flag to indicate whether a maintenance event will gracefully\"\n       + \" stop the ongoing execution (if any) and wait until the execution stops before starting a fix for the anomaly.\";\n \n+  /**\n+   * <code>provisioner.class</code>\n+   */\n+  public static final String PROVISIONER_CLASS_CONFIG = \"provisioner.class\";\n+  public static final String DEFAULT_PROVISIONER_CLASS = NoopProvisioner.class.getName();\n+  public static final String PROVISIONER_CLASS_DOC = \"A provisioner class for adding / removing resources to / from the cluster. Different\"\n+      + \" platforms (e.g. Azure) should implement their own custom provisioners.\";\n+\n   /**\n    * Define configs for Anomaly Detector.\n    *\n@@ -412,6 +421,11 @@ public static ConfigDef define(ConfigDef configDef) {\n                             ConfigDef.Type.BOOLEAN,\n                             DEFAULT_MAINTENANCE_EVENT_STOP_ONGOING_EXECUTION,\n                             ConfigDef.Importance.LOW,\n-                            MAINTENANCE_EVENT_STOP_ONGOING_EXECUTION_DOC);\n+                            MAINTENANCE_EVENT_STOP_ONGOING_EXECUTION_DOC)\n+                    .define(PROVISIONER_CLASS_CONFIG,\n+                            ConfigDef.Type.CLASS,\n+                            DEFAULT_PROVISIONER_CLASS,\n+                            ConfigDef.Importance.MEDIUM,\n+                            PROVISIONER_CLASS_DOC);\n   }\n }"
  },
  {
    "sha": "33663a6f49e0a8b157a96cc939c24b0c043866ae",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/GoalViolationDetector.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -63,6 +63,7 @@\n   private volatile boolean _hasPartitionsWithRFGreaterThanNumRacks;\n   private final OptimizationOptionsGenerator _optimizationOptionsGenerator;\n   protected static final double BALANCEDNESS_SCORE_WITH_OFFLINE_REPLICAS = -1.0;\n+  protected final Provisioner _provisioner;\n \n   public GoalViolationDetector(Queue<Anomaly> anomalies, KafkaCruiseControl kafkaCruiseControl) {\n     super(anomalies, kafkaCruiseControl);\n@@ -85,6 +86,10 @@ public GoalViolationDetector(Queue<Anomaly> anomalies, KafkaCruiseControl kafkaC\n     _optimizationOptionsGenerator = config.getConfiguredInstance(AnalyzerConfig.OPTIMIZATION_OPTIONS_GENERATOR_CLASS_CONFIG,\n                                                                  OptimizationOptionsGenerator.class,\n                                                                  overrideConfigs);\n+    overrideConfigs = Collections.singletonMap(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, kafkaCruiseControl);\n+    _provisioner = config.getConfiguredInstance(AnomalyDetectorConfig.PROVISIONER_CLASS_CONFIG,\n+                                                Provisioner.class,\n+                                                overrideConfigs);\n   }\n \n   /**\n@@ -208,6 +213,11 @@ public void run() {\n         provisionResponse.aggregate(goal.provisionResponse());\n       }\n       _provisionResponse = provisionResponse;\n+      // Right-size the cluster (if needed)\n+      boolean isRightsized = _provisioner.rightsize(_provisionResponse.recommendationByRecommender());\n+      if (isRightsized) {\n+        LOG.info(\"Actions have been taken on the cluster towards rightsizing.\");\n+      }\n       Map<Boolean, List<String>> violatedGoalsByFixability = goalViolations.violatedGoalsByFixability();\n       if (!violatedGoalsByFixability.isEmpty()) {\n         goalViolations.setProvisionResponse(_provisionResponse);"
  },
  {
    "sha": "95042b9d8a1e67d40dcea63ba72e7a5a53bc2453",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/NoopProvisioner.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/NoopProvisioner.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/NoopProvisioner.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/NoopProvisioner.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2021 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import java.util.Map;\n+\n+\n+/**\n+ * A no-op provisioner, which ignores expansion / shrinking requests.\n+ */\n+public class NoopProvisioner implements Provisioner {\n+  @Override\n+  public boolean rightsize(Map<String, ProvisionRecommendation> recommendationByRecommender) {\n+    return false;\n+  }\n+\n+  @Override\n+  public void configure(Map<String, ?> configs) {\n+  }\n+}"
  },
  {
    "sha": "dbf12a0755230a2abed3428bbfdea9f55cd547f0",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/Provisioner.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/Provisioner.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/Provisioner.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/Provisioner.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2021 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.detector;\n+\n+import com.linkedin.cruisecontrol.common.CruiseControlConfigurable;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionStatus;\n+import java.util.Map;\n+import org.apache.kafka.common.annotation.InterfaceStability;\n+\n+\n+/**\n+ * The interface for adding / removing resources to / from the cluster.\n+ */\n+@InterfaceStability.Evolving\n+public interface Provisioner extends CruiseControlConfigurable {\n+\n+  /**\n+   * Rightsize the cluster using the given constraints. All given recommendations are expected to share the same {@link ProvisionStatus}.\n+   * Implementations of this function are expected to be non-blocking -- i.e. starts the rightsizing, but does not block until the completion.\n+   *\n+   * <ul>\n+   *   <li>For {@link ProvisionStatus#UNDER_PROVISIONED} clusters, each recommender (e.g. goal name) indicates requested resources\n+   *   (e.g. number of brokers) along with relevant constraints (e.g. racks for which brokers should not be added). Typically, aggregating\n+   *   different recommendations for the same resource type requires considering the maximum value over all recommendations.</li>\n+   *   <li>For {@link ProvisionStatus#UNDER_PROVISIONED} clusters, each recommender (e.g. goal name) indicates resources that can be\n+   *   released (e.g. number of brokers) along with relevant constraints (e.g. expected broker capacity). Typically, aggregating\n+   *   different recommendations for the same resource type requires considering the minimum value over all recommendations.</li>\n+   * </ul>\n+   *\n+   * @param recommendationByRecommender Provision recommendations provided by corresponding recommenders.\n+   * @return {@code true} if actions have been taken on the cluster towards rightsizing, {@code false} otherwise.\n+   */\n+  boolean rightsize(Map<String, ProvisionRecommendation> recommendationByRecommender);\n+}"
  },
  {
    "sha": "948f45ee9fcea92209a091b258657623845999b5",
    "filename": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/exception/OptimizationFailureException.java",
    "status": "modified",
    "additions": 16,
    "deletions": 5,
    "changes": 21,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/exception/OptimizationFailureException.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/exception/OptimizationFailureException.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/exception/OptimizationFailureException.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -4,32 +4,43 @@\n \n package com.linkedin.kafka.cruisecontrol.exception;\n \n+import com.linkedin.kafka.cruisecontrol.analyzer.ProvisionRecommendation;\n+\n+\n /**\n  * An exception thrown when goal optimization failed.\n  */\n public class OptimizationFailureException extends KafkaCruiseControlException {\n-  private final String _recommendation;\n+  private final ProvisionRecommendation _recommendation;\n \n   /**\n    * @param message The detail message, which can be retrieved by the {@link #getMessage()}.\n    */\n   public OptimizationFailureException(String message) {\n-    this(message, \"\");\n+    super(message);\n+    _recommendation = null;\n   }\n \n   /**\n    * @param message The detail message. The given recommendation will be appended to it, which can be retrieved by the {@link #getMessage()}.\n    * @param recommendation Recommendation regarding the fix for this exception.\n    */\n-  public OptimizationFailureException(String message, String recommendation) {\n-    super(String.format(\"%s %s\", message, recommendation == null ? \"\" : recommendation));\n+  public OptimizationFailureException(String message, ProvisionRecommendation recommendation) {\n+    super(String.format(\"%s%s\", message, recommendation == null ? \"\" : String.format(\" %s\", recommendation)));\n     _recommendation = recommendation;\n   }\n \n   /**\n    * @return Recommendation regarding the fix for this exception.\n    */\n   public String recommendation() {\n-    return _recommendation == null ? \"\" : _recommendation;\n+    return _recommendation == null ? \"\" : _recommendation.toString();\n+  }\n+\n+  /**\n+   * @return Provision recommendation if any, {@code null} otherwise.\n+   */\n+  public ProvisionRecommendation provisionRecommendation() {\n+    return _recommendation;\n   }\n }"
  },
  {
    "sha": "7d7dcb52f0344cfacafce0ba8004baa58ee2ea56",
    "filename": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendationTest.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendationTest.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendationTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionRecommendationTest.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2021 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.analyzer;\n+\n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertThrows;\n+\n+\n+public class ProvisionRecommendationTest {\n+\n+\n+  @Test\n+  public void testBuilderInput() {\n+    // Verify: state\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDECIDED));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.RIGHT_SIZED));\n+\n+    // Verify: numBrokers\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(0));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(-1));\n+\n+    // Verify: numRacks\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numRacks(0));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numRacks(-1));\n+\n+    // Verify: numDisks\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numDisks(0));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numDisks(-1));\n+\n+    // Verify: numPartitions\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numPartitions(0));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numPartitions(-1));\n+\n+    // Verify: topic\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).topic(null));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).topic(\"\"));\n+\n+    // Verify: typicalBrokerId\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).typicalBrokerId(-1));\n+\n+    // Verify: typicalBrokerCapacity\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+        .typicalBrokerCapacity(0));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+        .typicalBrokerCapacity(-1));\n+\n+    // Verify: excludedRackIds\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).excludedRackIds(null));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+        .excludedRackIds(Collections.emptySet()));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+        .excludedRackIds(Collections.singleton(\"\")));\n+\n+    // Verify: totalCapacity\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).totalCapacity(0));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).totalCapacity(-1));\n+  }\n+\n+  @Test\n+  public void testSanityCheckResources() {\n+    // Set multiple resources\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckResources(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).numRacks(1)));\n+\n+    // Set numPartitions under over-provisioned state\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckResources(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.OVER_PROVISIONED).numPartitions(1)));\n+\n+    // Set numPartitions without the topic\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckResources(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numPartitions(1)));\n+  }\n+\n+  @Test\n+  public void testSanityCheckTypical() {\n+    // Set a typical broker id without its capacity.\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckTypical(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numBrokers(1).typicalBrokerId(1).resource(Resource.CPU)));\n+\n+    // Skip setting numBrokers.\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckTypical(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).typicalBrokerId(1).typicalBrokerCapacity(1.0)\n+                                                                              .resource(Resource.CPU)));\n+\n+    // Skip setting resource.\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckTypical(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).typicalBrokerId(1).typicalBrokerCapacity(1.0).numBrokers(1)));\n+  }\n+\n+  @Test\n+  public void testSanityCheckExcludedRackIds() {\n+    // Set excluded rack ids without numBrokers\n+    assertThrows(IllegalArgumentException.class, () -> ProvisionRecommendation.sanityCheckExcludedRackIds(\n+        new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED).numRacks(1).excludedRackIds(Collections.singleton(\"1\"))));\n+  }\n+}"
  },
  {
    "sha": "601a621b0e9db6de4ef34343ca364064438c12ca",
    "filename": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponseTest.java",
    "status": "modified",
    "additions": 125,
    "deletions": 16,
    "changes": 141,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponseTest.java",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponseTest.java",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ProvisionResponseTest.java?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -4,6 +4,8 @@\n \n package com.linkedin.kafka.cruisecontrol.analyzer;\n \n+import com.linkedin.kafka.cruisecontrol.common.Resource;\n+import java.util.Map;\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n@@ -13,72 +15,179 @@\n \n \n public class ProvisionResponseTest {\n-  private static final String RECOMMENDER = ProvisionResponseTest.class.getSimpleName();\n-  private static final String UNDER_PROV_REC = \"Add at least 6 brokers with the same capacity (3200.00) as broker-0.\";\n-  private static final String OVER_PROV_REC = \"Remove at least 4 brokers with the same capacity (1600.00) as broker-1.\";\n+  private static final double DELTA = 0.01;\n+  private static final String RECOMMENDER_UP = \"Recommender-Under-Provisioned\";\n+  private static final String RECOMMENDER_OP = \"Recommender-Over-Provisioned\";\n+\n+  private static final String UNDER_PROV_REC_STR = \"Add at least 6 brokers with the same cpu capacity (3200.00) as broker-0.\";\n+  private static final int NUM_BROKERS_UP = 6;\n+  private static final int TYPICAL_BROKER_ID_UP = 0;\n+  private static final double TYPICAL_BROKER_CAPACITY_UP = 3200;\n+  private static final ProvisionRecommendation UNDER_PROV_REC = new ProvisionRecommendation.Builder(ProvisionStatus.UNDER_PROVISIONED)\n+      .numBrokers(NUM_BROKERS_UP).typicalBrokerCapacity(TYPICAL_BROKER_CAPACITY_UP).typicalBrokerId(TYPICAL_BROKER_ID_UP).resource(Resource.CPU)\n+      .build();\n+\n+  private static final String OVER_PROV_REC_STR = \"Remove at least 4 brokers with the same cpu capacity (1600.00) as broker-1.\";\n+  private static final int NUM_BROKERS_OP = 4;\n+  private static final int TYPICAL_BROKER_ID_OP = 1;\n+  private static final double TYPICAL_BROKER_CAPACITY_OP = 1600;\n+  private static final ProvisionRecommendation OVER_PROV_REC = new ProvisionRecommendation.Builder(ProvisionStatus.OVER_PROVISIONED)\n+      .numBrokers(NUM_BROKERS_OP).typicalBrokerCapacity(TYPICAL_BROKER_CAPACITY_OP).typicalBrokerId(TYPICAL_BROKER_ID_OP).resource(Resource.CPU)\n+      .build();\n \n   private static ProvisionResponse generateProvisionResponse(ProvisionStatus status) {\n     switch (status) {\n       case UNDER_PROVISIONED:\n-        return new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, UNDER_PROV_REC, RECOMMENDER);\n+        return new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, UNDER_PROV_REC, RECOMMENDER_UP);\n       case RIGHT_SIZED:\n         return new ProvisionResponse(ProvisionStatus.RIGHT_SIZED);\n       case OVER_PROVISIONED:\n-        return new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, RECOMMENDER);\n+        return new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, RECOMMENDER_OP);\n       case UNDECIDED:\n         return new ProvisionResponse(ProvisionStatus.UNDECIDED);\n       default:\n         throw new IllegalArgumentException(\"Unsupported provision status \" + status + \" is provided.\");\n     }\n   }\n \n+  @Test\n+  public void testNullRecommendation() {\n+    // Verify validity of input while creating a ProvisionResponse using a null recommendation and a valid recommender (no exception).\n+    String recommenderUp = \"nullRecommendationUp\";\n+    String recommenderOp = \"nullRecommendationOp\";\n+    ProvisionResponse nullRecommendationUp = new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, null, recommenderUp);\n+    ProvisionResponse nullRecommendationOp = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, null, recommenderOp);\n+\n+    // Verify expected status\n+    assertEquals(ProvisionStatus.UNDER_PROVISIONED, nullRecommendationUp.status());\n+    assertEquals(ProvisionStatus.OVER_PROVISIONED, nullRecommendationOp.status());\n+\n+    // Verify recommendation exists with the default value and expected recommender\n+    assertEquals(String.format(\"[%s] %s\", recommenderUp, ProvisionResponse.DEFAULT_RECOMMENDATION), nullRecommendationUp.recommendation());\n+    assertEquals(String.format(\"[%s] %s\", recommenderOp, ProvisionResponse.DEFAULT_RECOMMENDATION), nullRecommendationOp.recommendation());\n+\n+    // Verify recommendationByRecommender is empty\n+    assertTrue(nullRecommendationUp.recommendationByRecommender().isEmpty());\n+    assertTrue(nullRecommendationOp.recommendationByRecommender().isEmpty());\n+\n+    // Verify aggregating with another empty recommendation with the same state.\n+    String recommenderUp2 = \"nullRecommendationUp2\";\n+    String recommenderOp2 = \"nullRecommendationOp2\";\n+    ProvisionResponse nullRecommendationUp2 = new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, null, recommenderUp2);\n+    ProvisionResponse nullRecommendationOp2 = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, null, recommenderOp2);\n+\n+    nullRecommendationUp.aggregate(nullRecommendationUp2);\n+    nullRecommendationOp.aggregate(nullRecommendationOp2);\n+\n+    assertEquals(String.format(\"[%s] %s [%s] %s\", recommenderUp, ProvisionResponse.DEFAULT_RECOMMENDATION, recommenderUp2,\n+                               ProvisionResponse.DEFAULT_RECOMMENDATION), nullRecommendationUp.recommendation());\n+    assertEquals(String.format(\"[%s] %s [%s] %s\", recommenderOp, ProvisionResponse.DEFAULT_RECOMMENDATION, recommenderOp2,\n+                               ProvisionResponse.DEFAULT_RECOMMENDATION), nullRecommendationOp.recommendation());\n+\n+    // Verify recommendationByRecommender is still empty\n+    assertTrue(nullRecommendationUp.recommendationByRecommender().isEmpty());\n+    assertTrue(nullRecommendationOp.recommendationByRecommender().isEmpty());\n+\n+    // Verify aggregating with a non-empty recommendation with the same state.\n+    nullRecommendationUp.aggregate(generateProvisionResponse(ProvisionStatus.UNDER_PROVISIONED));\n+    nullRecommendationOp.aggregate(generateProvisionResponse(ProvisionStatus.OVER_PROVISIONED));\n+\n+    assertEquals(String.format(\"[%s] %s [%s] %s [%s] %s\", recommenderUp, ProvisionResponse.DEFAULT_RECOMMENDATION, recommenderUp2,\n+                               ProvisionResponse.DEFAULT_RECOMMENDATION, RECOMMENDER_UP, UNDER_PROV_REC_STR), nullRecommendationUp.recommendation());\n+    assertEquals(String.format(\"[%s] %s [%s] %s [%s] %s\", recommenderOp, ProvisionResponse.DEFAULT_RECOMMENDATION, recommenderOp2,\n+                               ProvisionResponse.DEFAULT_RECOMMENDATION, RECOMMENDER_OP, OVER_PROV_REC_STR), nullRecommendationOp.recommendation());\n+\n+    // Verify recommendationByRecommender is no longer empty and has the expected value\n+    assertEquals(1, nullRecommendationUp.recommendationByRecommender().size());\n+    assertEquals(1, nullRecommendationOp.recommendationByRecommender().size());\n+    assertEquals(NUM_BROKERS_UP, nullRecommendationUp.recommendationByRecommender().get(RECOMMENDER_UP).numBrokers());\n+    assertEquals(TYPICAL_BROKER_ID_UP, nullRecommendationUp.recommendationByRecommender().get(RECOMMENDER_UP).typicalBrokerId());\n+    assertEquals(TYPICAL_BROKER_CAPACITY_UP, nullRecommendationUp.recommendationByRecommender().get(RECOMMENDER_UP).typicalBrokerCapacity(), DELTA);\n+\n+    // Verify string representation\n+    assertEquals(String.format(\"%s (%s)\", ProvisionStatus.UNDER_PROVISIONED, nullRecommendationUp.recommendation()),\n+                 nullRecommendationUp.toString());\n+  }\n+\n   @Test\n   public void testAggregate() {\n-    // Verify validity of input while creating a ProvisionResponse.\n-    assertThrows(IllegalArgumentException.class, () -> new ProvisionResponse(ProvisionStatus.RIGHT_SIZED, OVER_PROV_REC, RECOMMENDER));\n-    assertThrows(IllegalArgumentException.class, () -> new ProvisionResponse(ProvisionStatus.UNDECIDED, OVER_PROV_REC, RECOMMENDER));\n+    // Verify validity of input while creating a ProvisionResponse using an invalid recommender and recommendation.\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionResponse(ProvisionStatus.RIGHT_SIZED, OVER_PROV_REC, RECOMMENDER_UP));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionResponse(ProvisionStatus.UNDECIDED, OVER_PROV_REC, RECOMMENDER_UP));\n \n-    // Verify validity of aggregation (1) state and (2) recommendation.\n+    // Verify validity of input while creating a ProvisionResponse using a valid recommendation, but an invalid (i.e. null) recommender.\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, null));\n+    assertThrows(IllegalArgumentException.class, () -> new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, UNDER_PROV_REC, null));\n+\n+    // Verify validity of aggregation (1) state, (2) recommendation, and (3) provision recommendations.\n     // Case-1: Aggregating any provision status with {@link ProvisionStatus#UNDER_PROVISIONED} is {@link ProvisionStatus#UNDER_PROVISIONED}.\n+    String recommender = \"Case1\";\n     for (ProvisionStatus status : ProvisionStatus.cachedValues()) {\n-      ProvisionResponse underProvisioned = new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, UNDER_PROV_REC, RECOMMENDER);\n+      ProvisionResponse underProvisioned = new ProvisionResponse(ProvisionStatus.UNDER_PROVISIONED, UNDER_PROV_REC, recommender);\n       underProvisioned.aggregate(generateProvisionResponse(status));\n       assertEquals(ProvisionStatus.UNDER_PROVISIONED, underProvisioned.status());\n       assertEquals(status == ProvisionStatus.UNDER_PROVISIONED\n-                   ? String.format(\"[%s] %s [%s] %s\", RECOMMENDER, UNDER_PROV_REC, RECOMMENDER, UNDER_PROV_REC)\n-                   : String.format(\"[%s] %s\", RECOMMENDER, UNDER_PROV_REC), underProvisioned.recommendation());\n+                   ? String.format(\"[%s] %s [%s] %s\", recommender, UNDER_PROV_REC_STR, RECOMMENDER_UP, UNDER_PROV_REC_STR)\n+                   : String.format(\"[%s] %s\", recommender, UNDER_PROV_REC_STR), underProvisioned.recommendation());\n+      assertEquals(status == ProvisionStatus.UNDER_PROVISIONED ? 2 : 1, underProvisioned.recommendationByRecommender().size());\n+      assertEquals(NUM_BROKERS_UP, underProvisioned.recommendationByRecommender().get(recommender).numBrokers());\n+      assertEquals(TYPICAL_BROKER_ID_UP, underProvisioned.recommendationByRecommender().get(recommender).typicalBrokerId());\n+      assertEquals(TYPICAL_BROKER_CAPACITY_UP, underProvisioned.recommendationByRecommender().get(recommender).typicalBrokerCapacity(), DELTA);\n+      if (status == ProvisionStatus.UNDER_PROVISIONED) {\n+        assertEquals(NUM_BROKERS_UP, underProvisioned.recommendationByRecommender().get(RECOMMENDER_UP).numBrokers());\n+        assertEquals(TYPICAL_BROKER_ID_UP, underProvisioned.recommendationByRecommender().get(RECOMMENDER_UP).typicalBrokerId());\n+        assertEquals(TYPICAL_BROKER_CAPACITY_UP, underProvisioned.recommendationByRecommender().get(RECOMMENDER_UP).typicalBrokerCapacity(), DELTA);\n+      }\n     }\n \n     // Case-2: Aggregating a provision status {@code P} with {@link ProvisionStatus#UNDECIDED} is {@code P}\n     for (ProvisionStatus status : ProvisionStatus.cachedValues()) {\n       ProvisionResponse undecided = new ProvisionResponse(ProvisionStatus.UNDECIDED);\n       ProvisionResponse other = generateProvisionResponse(status);\n       String recommendationBefore = other.recommendation();\n+      Map<String, ProvisionRecommendation> recommendationByRecommenderBefore = other.recommendationByRecommender();\n       undecided.aggregate(other);\n       assertEquals(status, undecided.status());\n       assertEquals(recommendationBefore, undecided.recommendation());\n+      assertEquals(recommendationByRecommenderBefore, undecided.recommendationByRecommender());\n     }\n \n     // Case-3.1: Aggregating {@link ProvisionStatus#RIGHT_SIZED} with {@link ProvisionStatus#RIGHT_SIZED} or\n     // {@link ProvisionStatus#OVER_PROVISIONED} is {@link ProvisionStatus#RIGHT_SIZED}\n     ProvisionResponse rightSized = new ProvisionResponse(ProvisionStatus.RIGHT_SIZED);\n     rightSized.aggregate(generateProvisionResponse(ProvisionStatus.RIGHT_SIZED));\n     assertEquals(ProvisionStatus.RIGHT_SIZED, rightSized.status());\n+    assertTrue(rightSized.recommendationByRecommender().isEmpty());\n     rightSized.aggregate(generateProvisionResponse(ProvisionStatus.OVER_PROVISIONED));\n     assertEquals(ProvisionStatus.RIGHT_SIZED, rightSized.status());\n     assertTrue(rightSized.recommendation().isEmpty());\n+    assertTrue(rightSized.recommendationByRecommender().isEmpty());\n \n     // Case-3.2: Aggregating {@link ProvisionStatus#OVER_PROVISIONED} with {@link ProvisionStatus#RIGHT_SIZED} clears the recommendation\n-    ProvisionResponse overProvisioned = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, RECOMMENDER);\n+    recommender = \"Case3.2\";\n+    ProvisionResponse overProvisioned = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, recommender);\n     assertFalse(overProvisioned.recommendation().isEmpty());\n+    assertFalse(overProvisioned.recommendationByRecommender().isEmpty());\n     overProvisioned.aggregate(generateProvisionResponse(ProvisionStatus.RIGHT_SIZED));\n     assertTrue(overProvisioned.recommendation().isEmpty());\n+    assertTrue(overProvisioned.recommendationByRecommender().isEmpty());\n \n     // Case-4: Aggregating {@link ProvisionStatus#OVER_PROVISIONED} with {@link ProvisionStatus#OVER_PROVISIONED} yields itself\n-    overProvisioned = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, RECOMMENDER);\n-    assertEquals(String.format(\"[%s] %s\", RECOMMENDER, OVER_PROV_REC), overProvisioned.recommendation());\n+    recommender = \"Case4\";\n+    overProvisioned = new ProvisionResponse(ProvisionStatus.OVER_PROVISIONED, OVER_PROV_REC, recommender);\n+    assertEquals(String.format(\"[%s] %s\", recommender, OVER_PROV_REC_STR), overProvisioned.recommendation());\n+    assertEquals(1, overProvisioned.recommendationByRecommender().size());\n+    assertEquals(NUM_BROKERS_OP, overProvisioned.recommendationByRecommender().get(recommender).numBrokers());\n+    assertEquals(TYPICAL_BROKER_ID_OP, overProvisioned.recommendationByRecommender().get(recommender).typicalBrokerId());\n+    assertEquals(TYPICAL_BROKER_CAPACITY_OP, overProvisioned.recommendationByRecommender().get(recommender).typicalBrokerCapacity(), DELTA);\n+\n     overProvisioned.aggregate(generateProvisionResponse(ProvisionStatus.OVER_PROVISIONED));\n     assertEquals(ProvisionStatus.OVER_PROVISIONED, overProvisioned.status());\n-    assertEquals(String.format(\"[%s] %s [%s] %s\", RECOMMENDER, OVER_PROV_REC, RECOMMENDER, OVER_PROV_REC), overProvisioned.recommendation());\n+    assertEquals(String.format(\"[%s] %s [%s] %s\", recommender, OVER_PROV_REC_STR, RECOMMENDER_OP, OVER_PROV_REC_STR),\n+                 overProvisioned.recommendation());\n+    assertEquals(2, overProvisioned.recommendationByRecommender().size());\n+    assertEquals(NUM_BROKERS_OP, overProvisioned.recommendationByRecommender().get(RECOMMENDER_OP).numBrokers());\n+    assertEquals(TYPICAL_BROKER_ID_OP, overProvisioned.recommendationByRecommender().get(RECOMMENDER_OP).typicalBrokerId());\n+    assertEquals(TYPICAL_BROKER_CAPACITY_OP, overProvisioned.recommendationByRecommender().get(RECOMMENDER_OP).typicalBrokerCapacity(), DELTA);\n   }\n }"
  },
  {
    "sha": "7307c1382529e60849b16f1fc50c6a5876d46d33",
    "filename": "docs/wiki/User Guide/Configurations.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/docs/wiki/User%20Guide/Configurations.md",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/docs/wiki/User%20Guide/Configurations.md",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/docs/wiki/User%20Guide/Configurations.md?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -194,6 +194,7 @@ The following configurations are inherited from the open source Kafka client con\n | maintenance.event.idempotence.retention.ms        | Long      | N         | 180000                                                                | The maximum time in ms to store events retrieved from the MaintenanceEventReader. Relevant only if idempotency is enabled (see maintenance.event.enable.idempotence).                                                                                                                 |\n | maintenance.event.max.idempotence.cache.size      | Integer   | N         | 25                                                                    | The maximum number of maintenance events cached by the MaintenanceEventDetector within the past maintenance.event.idempotence.retention.ms ms. Relevant only if idempotency is enabled (see maintenance.event.enable.idempotence).                                                    |\n | maintenance.event.stop.ongoing.execution          | Boolean   | N         | true                                                                  | The flag to indicate whether a maintenance event will gracefully stop the ongoing execution (if any) and wait until the execution stops before starting a fix for the anomaly.                                                                                                        |\n+| provisioner.class                                 | Class     | N         | com.linkedin.kafka.cruisecontrol.detector.NoopProvisioner             | A provisioner class for adding / removing resources to / from the cluster. Different platforms (e.g. `Azure`) should implement their own custom provisioners.                                                                                                                         |\n \n ### UserTaskManager Configurations\n | Name                                                          | Type    | Required?   | Default Value            | Description                                                                                                                                                                                                                                  |"
  },
  {
    "sha": "23b4f7a6311ca23a2f06da3ed1ad973fdb746578",
    "filename": "docs/wiki/User Guide/Pluggable-Components.md",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/linkedin/cruise-control/blob/14e311584934c8f964b81e5d0fa6c45d2e277c8d/docs/wiki/User%20Guide/Pluggable-Components.md",
    "raw_url": "https://github.com/linkedin/cruise-control/raw/14e311584934c8f964b81e5d0fa6c45d2e277c8d/docs/wiki/User%20Guide/Pluggable-Components.md",
    "contents_url": "https://api.github.com/repos/linkedin/cruise-control/contents/docs/wiki/User%20Guide/Pluggable-Components.md?ref=14e311584934c8f964b81e5d0fa6c45d2e277c8d",
    "patch": "@@ -90,4 +90,20 @@ Cruise Control for automated execution of it without human intervention.\n Such maintenance events correspond to admin operations that the relevant system/tool submits to Cruise Control via a generic maintenance event store.\n Then, Maintenance Event Reader retrieves the maintenance events from the relevant event store for automated execution.\n \n-The default implementation of Maintenance Event Reader (see `MaintenanceEventTopicReader`) consumes maintenance events from a Kafka topic.\n\\ No newline at end of file\n+The default implementation of Maintenance Event Reader (see `MaintenanceEventTopicReader`) consumes maintenance events from a Kafka topic.\n+\n+## Provisioner\n+This component provides the means for adding or removing resources to / from the cluster.\n+\n+Resources include:\n+* Brokers that can host replicas \n+* Racks containing brokers that can host replicas\n+* Disks (i.e. relevant to JBOD deployments)\n+* Partitions of a topic (can only be added)\n+\n+Constraints include:\n+* Topic name: If the resource is partition, the name of the topic must be specified.\n+* A typical broker id and its capacity (one cannot be specified without the other)\n+* Specific resource, such as {@link Resource#DISK}.\n+* Excluded racks -- i.e. racks for which brokers should not be added to or removed from\n+* Total resource capacity required to add or remove\n\\ No newline at end of file"
  }
]
