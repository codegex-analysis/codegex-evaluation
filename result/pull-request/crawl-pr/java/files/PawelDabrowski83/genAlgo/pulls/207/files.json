[
  {
    "sha": "46faab628ae63ec07cb14bff36a3b07a69dbc130",
    "filename": "src/test/java/com/facebook/genAlgo/MainIntegrationTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/PawelDabrowski83/genAlgo/blob/513372f50749249a2a53a70facbef8373bf2dc18/src/test/java/com/facebook/genAlgo/MainIntegrationTest.java",
    "raw_url": "https://github.com/PawelDabrowski83/genAlgo/raw/513372f50749249a2a53a70facbef8373bf2dc18/src/test/java/com/facebook/genAlgo/MainIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/PawelDabrowski83/genAlgo/contents/src/test/java/com/facebook/genAlgo/MainIntegrationTest.java?ref=513372f50749249a2a53a70facbef8373bf2dc18",
    "patch": "@@ -13,6 +13,7 @@\n import com.facebook.genAlgo.solutionfinder.SolutionFinder;\n import com.facebook.genAlgo.utils.RandomProvider;\n import com.facebook.genAlgo.utils.RandomProviderImpl;\n+import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n import java.util.List;\n@@ -31,6 +32,7 @@\n     CrossoverHandler crossoverHandler = new CrossoverHandler(crossoverService);\n     SolutionFinder solutionFinder = new SolutionFinder(target);\n \n+    @DisplayName(\"Should return generation number bigger than 0 when solve() is evoked\")\n     @Test\n     public void shouldNumberOfGenerationsBeGreaterThanZeroWhenSolveIsEvoked() {\n         // given\n@@ -44,6 +46,7 @@ public void shouldNumberOfGenerationsBeGreaterThanZeroWhenSolveIsEvoked() {\n         assertThat(numberOfGenerationsToSolve).isGreaterThan(0);\n     }\n \n+    @DisplayName(\"Should return not empty list of Genes when getSolve() is evoked\")\n     @Test\n     public void shouldReturnListOfGeneWhenGetSolveIsEvoked() {\n         // given\n@@ -56,4 +59,18 @@ public void shouldReturnListOfGeneWhenGetSolveIsEvoked() {\n         // then\n         assertThat(solvedGenes).isNotEmpty();\n     }\n+\n+    @DisplayName(\"Should return list of Genes with value equal to target\")\n+    @Test\n+    public void shouldReturnListOfGeneWithTargetValue() {\n+        // given\n+        GenePoolService genePoolService = new GenePoolService(randomProvider, mutator, evaluator, crossoverHandler, solutionFinder);\n+        GenePool genePool = new GenePool(genePoolService, genePoolSize);\n+\n+        // when\n+        List<Gene> solvedGenes = genePool.getSolve();\n+\n+        // then\n+        solvedGenes.stream().allMatch(gene -> gene.getValue() == target);\n+    }\n }"
  }
]
