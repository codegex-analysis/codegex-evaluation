[
  {
    "sha": "b6b8a83ae778c32ff57f9b0256f9480d5b997180",
    "filename": "oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/ConfigurationTest.java",
    "status": "modified",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/aliyun/aliyun-oss-android-sdk/blob/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/ConfigurationTest.java",
    "raw_url": "https://github.com/aliyun/aliyun-oss-android-sdk/raw/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/ConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/aliyun/aliyun-oss-android-sdk/contents/oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/ConfigurationTest.java?ref=4eba3fa66a0062ab4527d622cc16256a2010c68c",
    "patch": "@@ -5,6 +5,7 @@\n import com.alibaba.sdk.android.oss.ClientConfiguration;\n import com.alibaba.sdk.android.oss.OSSClient;\n import com.alibaba.sdk.android.oss.common.OSSLog;\n+import com.alibaba.sdk.android.oss.internal.OSSAsyncTask;\n import com.alibaba.sdk.android.oss.model.GetObjectRequest;\n import com.alibaba.sdk.android.oss.model.GetObjectResult;\n import com.alibaba.sdk.android.oss.model.HeadObjectRequest;\n@@ -14,6 +15,7 @@\n \n import org.junit.Test;\n \n+import java.security.InvalidParameterException;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -28,6 +30,15 @@\n  */\n public class ConfigurationTest extends BaseTestCase {\n \n+    private static String SCHEME = \"https://\";\n+    private static String ENDPOINT = \"oss-cn-hangzhou.aliyuncs.com\";\n+    private static String CNAME_ENDPOINT = \"oss.custom.com\";\n+    private static String IP_ENDPOINT = \"192.169.1.1:8080\";\n+    private static String PATH = \"/path\";\n+    private static String PATH_ENDPOINT = ENDPOINT + \"/path\";\n+\n+    private static String BUCKET_NAME = \"invalid-bucket\";\n+\n     @Override\n     void initTestData() {\n         OSSTestConfig.initLocalFile();\n@@ -161,4 +172,95 @@ public void testHttpDnsEnableFalse() throws Exception {\n         GetObjectResult getResult = oss.getObject(get);\n         assertEquals(200, getResult.getStatusCode());\n     }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        OSSTestConfig.TestGetCallback getCallback = new OSSTestConfig.TestGetCallback();\n+        ClientConfiguration conf = new ClientConfiguration();\n+        OSSClient oss = new OSSClient(InstrumentationRegistry.getTargetContext(), SCHEME + ENDPOINT, OSSTestConfig.credentialProvider, conf);\n+        GetObjectRequest get = new GetObjectRequest(BUCKET_NAME, \"file1m\");\n+        OSSAsyncTask task = oss.asyncGetObject(get, getCallback);\n+        task.waitUntilFinished();\n+        assertEquals(BUCKET_NAME + \".\" + ENDPOINT, getCallback.serviceException.getHostId());\n+        assertTrue(getCallback.serviceException.getRawMessage().contains(\"<BucketName>\"+ BUCKET_NAME + \"</BucketName>\"));\n+    }\n+\n+    @Test\n+    public void testPathStyleAccessEnable() throws Exception {\n+        OSSTestConfig.TestGetCallback getCallback = new OSSTestConfig.TestGetCallback();\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setPathStyleAccessEnable(true);\n+        OSSClient oss = new OSSClient(InstrumentationRegistry.getTargetContext(), SCHEME + ENDPOINT, OSSTestConfig.credentialProvider, conf);\n+        GetObjectRequest get = new GetObjectRequest(BUCKET_NAME, \"file1m\");\n+        OSSAsyncTask task = oss.asyncGetObject(get, getCallback);\n+        task.waitUntilFinished();\n+        assertEquals(ENDPOINT, getCallback.serviceException.getHostId());\n+        assertTrue(getCallback.serviceException.getRawMessage().contains(\"<BucketName>\"+ BUCKET_NAME + \"</BucketName>\"));\n+    }\n+\n+    @Test\n+    public void testSupportCnameEnable() throws Exception {\n+        OSSTestConfig.TestGetCallback getCallback = new OSSTestConfig.TestGetCallback();\n+        List<String> cnameExcludeList = new ArrayList<String>();\n+        cnameExcludeList.add(ENDPOINT);\n+\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setSupportCnameEnable(true);\n+        conf.setCustomCnameExcludeList(cnameExcludeList);\n+        OSSClient oss = new OSSClient(InstrumentationRegistry.getTargetContext(), SCHEME + ENDPOINT, OSSTestConfig.credentialProvider, conf);\n+        GetObjectRequest get = new GetObjectRequest(BUCKET_NAME, \"file1m\");\n+        OSSAsyncTask task = oss.asyncGetObject(get, getCallback);\n+        task.waitUntilFinished();\n+\n+        assertEquals(BUCKET_NAME + \".\" + ENDPOINT, getCallback.serviceException.getHostId());\n+        assertTrue(getCallback.serviceException.getRawMessage().contains(\"<BucketName>\"+ BUCKET_NAME + \"</BucketName>\"));\n+\n+        getCallback = new OSSTestConfig.TestGetCallback();\n+        cnameExcludeList = new ArrayList<String>();\n+        cnameExcludeList.add(CNAME_ENDPOINT);\n+\n+        conf = new ClientConfiguration();\n+        conf.setSupportCnameEnable(true);\n+        conf.setCustomCnameExcludeList(cnameExcludeList);\n+        oss = new OSSClient(InstrumentationRegistry.getTargetContext(), SCHEME + ENDPOINT, OSSTestConfig.credentialProvider, conf);\n+        get = new GetObjectRequest(BUCKET_NAME, \"file1m\");\n+        task = oss.asyncGetObject(get, getCallback);\n+        task.waitUntilFinished();\n+\n+        assertEquals(ENDPOINT, getCallback.serviceException.getHostId());\n+        assertTrue(getCallback.serviceException.getRawMessage().contains(\"<BucketName>file1m</BucketName>\"));\n+    }\n+\n+    @Test\n+    public void testSupportCnameEnableWithNullCnameExcludeList() throws Exception {\n+        OSSTestConfig.TestGetCallback getCallback = new OSSTestConfig.TestGetCallback();\n+        IllegalArgumentException exception = null;\n+        List<String> cnameExcludeList = new ArrayList<String>();\n+\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setSupportCnameEnable(true);\n+        try {\n+            conf.setCustomCnameExcludeList(cnameExcludeList);\n+        } catch (IllegalArgumentException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+        assertTrue(exception.getMessage().contains(\"cname exclude list should not be null.\"));\n+    }\n+\n+    @Test\n+    public void testCustomPathPrefixEnable() throws Exception {\n+\n+        OSSTestConfig.TestGetCallback getCallback = new OSSTestConfig.TestGetCallback();\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setCustomPathPrefixEnable(true);\n+        conf.setSupportCnameEnable(true);\n+        OSSClient oss = new OSSClient(InstrumentationRegistry.getTargetContext(), SCHEME + ENDPOINT + \"/\" + BUCKET_NAME, OSSTestConfig.credentialProvider, conf);\n+        GetObjectRequest get = new GetObjectRequest(BUCKET_NAME, \"file1m\");\n+        OSSAsyncTask task = oss.asyncGetObject(get, getCallback);\n+        task.waitUntilFinished();\n+        assertEquals(ENDPOINT, getCallback.serviceException.getHostId());\n+        assertTrue(getCallback.serviceException.getRawMessage().contains(\"<BucketName>\" + BUCKET_NAME +\"</BucketName>\"));\n+    }\n+\n }"
  },
  {
    "sha": "901dc7e8bd7bb890c4efa03b0db69fc71055c9c6",
    "filename": "oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/RequestMessageTest.java",
    "status": "added",
    "additions": 205,
    "deletions": 0,
    "changes": 205,
    "blob_url": "https://github.com/aliyun/aliyun-oss-android-sdk/blob/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/RequestMessageTest.java",
    "raw_url": "https://github.com/aliyun/aliyun-oss-android-sdk/raw/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/RequestMessageTest.java",
    "contents_url": "https://api.github.com/repos/aliyun/aliyun-oss-android-sdk/contents/oss-android-sdk/src/androidTest/java/com/alibaba/sdk/android/RequestMessageTest.java?ref=4eba3fa66a0062ab4527d622cc16256a2010c68c",
    "patch": "@@ -0,0 +1,205 @@\n+package com.alibaba.sdk.android;\n+\n+import android.net.Uri;\n+import android.support.test.runner.AndroidJUnit4;\n+\n+import com.alibaba.sdk.android.oss.internal.RequestMessage;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static junit.framework.Assert.assertTrue;\n+import static junit.framework.TestCase.assertEquals;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class RequestMessageTest {\n+\n+    private static String SCHEME = \"https://\";\n+    private static String ENDPOINT = \"oss-cn-hangzhou.aliyuncs.com\";\n+    private static String CNAME_ENDPOINT = \"oss.custom.com\";\n+    private static String IP_ENDPOINT = \"192.168.1.1:8080\";\n+\n+    private static String CUSTOMPATH = \"/path\";\n+    private static String CUSTOMPATH_ENDPOINT = ENDPOINT + \"/path\";\n+    private static String BUCKET_NAME = \"BucketName\";\n+    private static String OBJECT_KEY = \"ObjectKey\";\n+\n+    public URI asUri(String uriString) {\n+        uriString = SCHEME + uriString;\n+        try {\n+            return new URI(uriString);\n+        } catch (URISyntaxException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithCname() throws Exception {\n+        List<String> cnameExcludeList = new ArrayList<String>();\n+        cnameExcludeList.add(\"111\");\n+\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(CNAME_ENDPOINT));\n+        requestMessage.setSupportCnameEnable(true);\n+        requestMessage.setCustomCnameExcludeList(cnameExcludeList);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + CNAME_ENDPOINT + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithoutCname() throws Exception {\n+        List<String> cnameExcludeList = new ArrayList<String>();\n+        cnameExcludeList.add(CNAME_ENDPOINT);\n+\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(CNAME_ENDPOINT));\n+        requestMessage.setSupportCnameEnable(true);\n+        requestMessage.setCustomCnameExcludeList(cnameExcludeList);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + BUCKET_NAME + \".\" + CNAME_ENDPOINT + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithCnameAndPathStyleAccessEnable() throws Exception {\n+        List<String> cnameExcludeList = new ArrayList<String>();\n+        cnameExcludeList.add(CNAME_ENDPOINT);\n+\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(CNAME_ENDPOINT));\n+        requestMessage.setSupportCnameEnable(true);\n+        requestMessage.setCustomCnameExcludeList(cnameExcludeList);\n+        requestMessage.setPathStyleAccessEnable(true);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + CNAME_ENDPOINT + \"/\" + BUCKET_NAME + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithPathStyleAccessEnable() throws Exception {\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(ENDPOINT));\n+        requestMessage.setPathStyleAccessEnable(true);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + ENDPOINT + \"/\" + BUCKET_NAME + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithoutPathStyleAccessEnable() throws Exception {\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(ENDPOINT));\n+        requestMessage.setPathStyleAccessEnable(false);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + BUCKET_NAME + \".\" + ENDPOINT + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithCustomPathPrefixEnable() throws Exception {\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(CUSTOMPATH_ENDPOINT));\n+        requestMessage.setCustomPathPrefixEnable(true);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + BUCKET_NAME + \".\" + CUSTOMPATH_ENDPOINT + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithCustomPathPrefixEnableAndPathStyleAccessEnable() throws Exception {\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(CUSTOMPATH_ENDPOINT));\n+        requestMessage.setCustomPathPrefixEnable(true);\n+        requestMessage.setPathStyleAccessEnable(true);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + CUSTOMPATH_ENDPOINT + \"/\" + BUCKET_NAME + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithIp() throws Exception {\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(IP_ENDPOINT));\n+        requestMessage.setPathStyleAccessEnable(true);\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + IP_ENDPOINT + \"/\" + BUCKET_NAME + \"/\" + OBJECT_KEY;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithNullBucketNameOrObjectKey() throws Exception {\n+        RequestMessage requestMessage = new RequestMessage();\n+        requestMessage.setBucketName(BUCKET_NAME);\n+        requestMessage.setEndpoint(asUri(ENDPOINT));\n+\n+        String url = requestMessage.buildCanonicalURL();\n+        String canonicalUrl = SCHEME + BUCKET_NAME + \".\" + ENDPOINT;\n+        assertEquals(url, canonicalUrl);\n+\n+        requestMessage = new RequestMessage();\n+        requestMessage.setEndpoint(asUri(ENDPOINT));\n+\n+        url = requestMessage.buildCanonicalURL();\n+        canonicalUrl = SCHEME + ENDPOINT;\n+        assertEquals(url, canonicalUrl);\n+\n+        requestMessage = new RequestMessage();\n+        requestMessage.setObjectKey(OBJECT_KEY);\n+        requestMessage.setEndpoint(asUri(ENDPOINT));\n+        requestMessage.setPathStyleAccessEnable(true);\n+\n+        url = requestMessage.buildCanonicalURL();\n+        canonicalUrl = SCHEME + ENDPOINT;\n+        assertEquals(url, canonicalUrl);\n+    }\n+\n+    @Test\n+    public void testBuildUrlWithNullEndpoint() {\n+        Exception exception = null;\n+        try {\n+            URI endpoint = new URI(ENDPOINT);\n+            RequestMessage requestMessage = new RequestMessage();\n+            requestMessage.setBucketName(BUCKET_NAME);\n+            requestMessage.setEndpoint(endpoint);\n+\n+            String url = requestMessage.buildCanonicalURL();\n+        } catch (URISyntaxException e) {\n+            e.printStackTrace();\n+        } catch (Exception e) {\n+            exception = e;\n+        }\n+\n+        assertTrue(exception.getMessage().contains(\"Host name can not be null.\"));\n+    }\n+}"
  },
  {
    "sha": "9f40ff950a45d95befbda4b02004af8e3445fa9d",
    "filename": "oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/ClientConfiguration.java",
    "status": "modified",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/aliyun/aliyun-oss-android-sdk/blob/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/ClientConfiguration.java",
    "raw_url": "https://github.com/aliyun/aliyun-oss-android-sdk/raw/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/ClientConfiguration.java",
    "contents_url": "https://api.github.com/repos/aliyun/aliyun-oss-android-sdk/contents/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/ClientConfiguration.java?ref=4eba3fa66a0062ab4527d622cc16256a2010c68c",
    "patch": "@@ -29,6 +29,9 @@\n     private boolean httpDnsEnable = true;\n     private boolean checkCRC64 = false;//crc64 default false\n     private String ipWithHeader;\n+    private boolean pathStyleAccessEnable = false;\n+    private boolean customPathPrefixEnable = false;\n+    private boolean supportCnameEnable = false;\n \n     /**\n      * Constructor\n@@ -211,4 +214,75 @@ public String getIpWithHeader() {\n     public void setIpWithHeader(String ipWithHeader) {\n         this.ipWithHeader = ipWithHeader;\n     }\n+\n+    /**\n+     * Gets the flag of using Second Level Domain style to access the\n+     * endpoint. By default it's false. When using Second Level Domain, then the bucket endpoint\n+     * would be: http://host/bucket. Otherwise, it will be http://bucket.host\n+     *\n+     * @return True if it's enabled; False if it's disabled.\n+     */\n+    public Boolean isPathStyleAccessEnable() {\n+        return pathStyleAccessEnable;\n+    }\n+\n+    /**\n+     * Sets the flag of using Second Level Domain style to access the\n+     * endpoint. By default it's false.\n+     *\n+     * @param pathStyleAccessEnable\n+     *            True if it's enabled; False if it's disabled.\n+     */\n+    public void setPathStyleAccessEnable(Boolean pathStyleAccessEnable) {\n+        this.pathStyleAccessEnable = pathStyleAccessEnable;\n+    }\n+\n+    /**\n+     * Gets the flag of using custom path prefix to access the\n+     * endpoint. By default it's false. When using custom path prefix, then the bucket endpoint\n+     * would be: http://host/customPath. Otherwise, it will be http://host\n+     *\n+     * @return True if it's enabled; False if it's disabled.\n+     */\n+    public Boolean isCustomPathPrefixEnable() {\n+        return customPathPrefixEnable;\n+    }\n+\n+    /**\n+     * Sets the flag of using custom path prefix to access the\n+     * endpoint. By default it's false.\n+     *\n+     * @param customPathPrefixEnable\n+     *            True if it's enabled; False if it's disabled.\n+     */\n+    public void setCustomPathPrefixEnable(Boolean customPathPrefixEnable) {\n+        this.customPathPrefixEnable = customPathPrefixEnable;\n+    }\n+\n+    /**\n+     * Gets the flag if supporting Cname in the endpoint. By default it's false.\n+     *\n+     * @return True if supporting Cname; False if not.\n+     */\n+    public boolean isSupportCnameEnable() {\n+        return supportCnameEnable;\n+    }\n+\n+    /**\n+     * Sets the flag if supporting Cname in the endpoint. By default it's false.\n+     *\n+     * <p>\n+     * If this value is set true, when building a canonical url, the host would\n+     * be checked against the Cname excluded list. If that host is found in the\n+     * list, then it's treated as non-CName and accessed as TLD (third level\n+     * domain). If the host is found, then it's thought as CName. If this value\n+     * is set false, then always uses TLD to access the endpoint.\n+     * </p>\n+     *\n+     * @param supportCnameEnable\n+     *            The flag if supporting CName.\n+     */\n+    public void setSupportCnameEnable(boolean supportCnameEnable) {\n+        this.supportCnameEnable = supportCnameEnable;\n+    }\n }"
  },
  {
    "sha": "97c68b7a44a82c140b2241d5b52a707fbe65fcc7",
    "filename": "oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/InternalRequestOperation.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/aliyun/aliyun-oss-android-sdk/blob/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/InternalRequestOperation.java",
    "raw_url": "https://github.com/aliyun/aliyun-oss-android-sdk/raw/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/InternalRequestOperation.java",
    "contents_url": "https://api.github.com/repos/aliyun/aliyun-oss-android-sdk/contents/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/InternalRequestOperation.java?ref=4eba3fa66a0062ab4527d622cc16256a2010c68c",
    "patch": "@@ -1052,6 +1052,10 @@ private void canonicalizeRequestMessage(RequestMessage message, OSSRequest reque\n         // When the HTTP proxy is set, httpDNS is not enabled.\n         message.setHttpDnsEnable(checkIfHttpDnsAvailable(conf.isHttpDnsEnable()));\n         message.setCredentialProvider(credentialProvider);\n+        message.setPathStyleAccessEnable(conf.isPathStyleAccessEnable());\n+        message.setCustomPathPrefixEnable(conf.isCustomPathPrefixEnable());\n+        message.setSupportCnameEnable(conf.isSupportCnameEnable());\n+        message.setCustomCnameExcludeList(conf.getCustomCnameExcludeList());\n \n         // set ip with header\n         message.setIpWithHeader(conf.getIpWithHeader());"
  },
  {
    "sha": "96cfeaad39f71c53837094cd76534a503f800929",
    "filename": "oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/RequestMessage.java",
    "status": "modified",
    "additions": 98,
    "deletions": 35,
    "changes": 133,
    "blob_url": "https://github.com/aliyun/aliyun-oss-android-sdk/blob/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/RequestMessage.java",
    "raw_url": "https://github.com/aliyun/aliyun-oss-android-sdk/raw/4eba3fa66a0062ab4527d622cc16256a2010c68c/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/RequestMessage.java",
    "contents_url": "https://api.github.com/repos/aliyun/aliyun-oss-android-sdk/contents/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/internal/RequestMessage.java?ref=4eba3fa66a0062ab4527d622cc16256a2010c68c",
    "patch": "@@ -37,6 +37,10 @@\n     private boolean checkCRC64;\n     private OSSCredentialProvider credentialProvider;\n     private boolean httpDnsEnable = false;\n+    private boolean supportCnameEnable = false;\n+    private List<String> customCnameExcludeList = new ArrayList<String>();\n+    private boolean pathStyleAccessEnable = false;\n+    private boolean customPathPrefixEnable = false;\n     private String ipWithHeader;\n     private boolean isInCustomCnameExcludeList = false;\n \n@@ -164,6 +168,38 @@ public void setIpWithHeader(String ipWithHeader) {\n         this.ipWithHeader = ipWithHeader;\n     }\n \n+    public Boolean isPathStyleAccessEnable() {\n+        return pathStyleAccessEnable;\n+    }\n+\n+    public void setPathStyleAccessEnable(Boolean pathStyleAccessEnable) {\n+        this.pathStyleAccessEnable = pathStyleAccessEnable;\n+    }\n+\n+    public Boolean isCustomPathPrefixEnable() {\n+        return customPathPrefixEnable;\n+    }\n+\n+    public void setCustomPathPrefixEnable(Boolean customPathPrefixEnable) {\n+        this.customPathPrefixEnable = customPathPrefixEnable;\n+    }\n+\n+    public boolean isSupportCnameEnable() {\n+        return supportCnameEnable;\n+    }\n+\n+    public void setSupportCnameEnable(boolean supportCnameEnable) {\n+        this.supportCnameEnable = supportCnameEnable;\n+    }\n+\n+    public List<String> getCustomCnameExcludeList() {\n+        return customCnameExcludeList;\n+    }\n+\n+    public void setCustomCnameExcludeList(List<String> customCnameExcludeList) {\n+        this.customCnameExcludeList = customCnameExcludeList;\n+    }\n+\n     public void createBucketRequestBodyMarshall(Map<String, String> configures) throws UnsupportedEncodingException {\n         StringBuffer xmlBody = new StringBuffer();\n         if (configures != null) {\n@@ -321,6 +357,7 @@ public String buildCanonicalURL() throws Exception{\n         String scheme = endpoint.getScheme();\n         String originHost = endpoint.getHost();\n         String portString = null;\n+        String path = endpoint.getPath();\n \n         int port = endpoint.getPort();\n         if (port != -1) {\n@@ -337,55 +374,81 @@ public String buildCanonicalURL() throws Exception{\n         OSSLog.logDebug(\" originHost : \" + originHost);\n         OSSLog.logDebug(\" port : \" + portString);\n \n-        String baseURL = scheme + \"://\" + originHost;\n-        if(!TextUtils.isEmpty(portString)){\n-            baseURL += (\":\" + portString);\n-        }\n-\n-        if (!TextUtils.isEmpty(bucketName)) {\n-            if (OSSUtils.isOssOriginHost(originHost)) {\n-                // official endpoint\n-                originHost = bucketName + \".\" + originHost;\n-                String urlHost = null;\n-                if (isHttpDnsEnable()) {\n-                    urlHost = HttpdnsMini.getInstance().getIpByHostAsync(originHost);\n-                } else {\n-                    OSSLog.logDebug(\"[buildCannonicalURL], disable httpdns\");\n-                }\n-                addHeader(OSSHeaders.HOST, originHost);\n+        String canonicalHost = buildCanonicalHost(endpoint, bucketName, pathStyleAccessEnable, supportCnameEnable, customCnameExcludeList);\n+        String canonicalPath = pathStyleAccessEnable ? buildCanonicalPath(bucketName, objectKey) : buildCanonicalPath(objectKey);\n+        String queryString = OSSUtils.paramToQueryString(this.parameters, OSSConstants.DEFAULT_CHARSET_NAME);\n \n-                if (!TextUtils.isEmpty(urlHost)) {\n-                    baseURL = scheme + \"://\" + urlHost;\n-                } else {\n-                    baseURL = scheme + \"://\" + originHost;\n-                }\n-            }else if (OSSUtils.isValidateIP(originHost)) {\n-                // ip address\n-                baseURL += (\"/\");\n-                addHeader(OSSHeaders.HOST, getIpWithHeader());\n-            }\n+        StringBuffer baseURL = new StringBuffer();\n+        if (!OSSUtils.isEmptyString(scheme)) {\n+            baseURL.append(scheme).append(\"://\");\n         }\n-\n-        if (!TextUtils.isEmpty(objectKey)) {\n-            baseURL += \"/\" + HttpUtil.urlEncode(objectKey, OSSConstants.DEFAULT_CHARSET_NAME);\n+        if (!OSSUtils.isEmptyString(canonicalHost)) {\n+            baseURL.append(canonicalHost);\n+        }\n+        if (!OSSUtils.isEmptyString(portString)) {\n+            baseURL.append(\":\").append(portString);\n+        }\n+        if (customPathPrefixEnable && !OSSUtils.isEmptyString(path)) {\n+            baseURL.append(path);\n+        }\n+        if (!OSSUtils.isEmptyString(canonicalPath)) {\n+            baseURL.append(\"/\").append(canonicalPath);\n+        }\n+        if (!OSSUtils.isEmptyString(queryString)) {\n+            baseURL.append(\"?\").append(queryString);\n         }\n-\n-        String queryString = OSSUtils.paramToQueryString(this.parameters, OSSConstants.DEFAULT_CHARSET_NAME);\n \n         //输入请求信息日志\n         StringBuilder printReq = new StringBuilder();\n         printReq.append(\"request---------------------\\n\");\n-        printReq.append(\"request url=\" + baseURL + \"\\n\");\n+        printReq.append(\"request url=\" + baseURL.toString() + \"\\n\");\n         printReq.append(\"request params=\" + queryString + \"\\n\");\n         for (String key : getHeaders().keySet()) {\n             printReq.append(\"requestHeader [\" + key + \"]: \").append(getHeaders().get(key) + \"\\n\");\n         }\n         OSSLog.logDebug(printReq.toString());\n \n-        if (OSSUtils.isEmptyString(queryString)) {\n-            return baseURL;\n+        return baseURL.toString();\n+    }\n+\n+    private String buildCanonicalHost(URI endpoint, String bucket, Boolean pathStyleAccessEnable, boolean supportCnameEnable, List<String> cnameExcludeList) {\n+        StringBuffer host = new StringBuffer();\n+        String originHost = endpoint.getHost();\n+\n+        if (originHost == null) {\n+            throw new IllegalArgumentException(\"Host name can not be null.\");\n+        }\n+        Boolean isCname = (supportCnameEnable && cnameExcludeFilter(originHost, cnameExcludeList));\n+        if (bucket != null && !isCname && !pathStyleAccessEnable) {\n+            host.append(bucket).append(\".\").append(originHost);\n         } else {\n-            return baseURL + \"?\" + queryString;\n+            host.append(originHost);\n+        }\n+        return host.toString();\n+    }\n+\n+    private boolean cnameExcludeFilter(String host, List<String> cnameExcludeList) {\n+        if (host != null && !host.trim().isEmpty()) {\n+            String canonicalHost = host.toLowerCase();\n+            for (String cnameExclude : cnameExcludeList) {\n+                if (canonicalHost.endsWith(cnameExclude)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+        throw new IllegalArgumentException(\"Host name can not be null.\");\n+    }\n+\n+    private String buildCanonicalPath(String key) {\n+        return key != null ? HttpUtil.urlEncode(key, OSSConstants.DEFAULT_CHARSET_NAME) : null;\n+    }\n+\n+    private String buildCanonicalPath(String bucket, String key) {\n+        if (bucket != null) {\n+            return bucket + \"/\" + (key != null ? HttpUtil.urlEncode(key, OSSConstants.DEFAULT_CHARSET_NAME) : \"\");\n+        } else {\n+            return null;\n         }\n     }\n }"
  }
]
