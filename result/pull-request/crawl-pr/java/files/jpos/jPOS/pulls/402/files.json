[
  {
    "sha": "5d6919d07334fd475cf715a2fe8d7346024baebe",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/jpos/jPOS/blob/fb15266e97006816cc74c373ec3111e9cc96e8d3/build.gradle",
    "raw_url": "https://github.com/jpos/jPOS/raw/fb15266e97006816cc74c373ec3111e9cc96e8d3/build.gradle",
    "contents_url": "https://api.github.com/repos/jpos/jPOS/contents/build.gradle?ref=fb15266e97006816cc74c373ec3111e9cc96e8d3",
    "patch": "@@ -22,7 +22,7 @@ subprojects {\n         'https://oss.sonatype.org/content/repositories/snapshots/' :\n         'https://oss.sonatype.org/service/local/staging/deploy/maven2';\n \n-    configurations.compile.transitive = true\n+    configurations.implementation.transitive = true\n     javadoc.failOnError = false\n     pmd.ignoreFailures = true\n "
  },
  {
    "sha": "d3a78cb1e4579c9e271e29127e8732e2b85549ff",
    "filename": "jpos/src/main/java/org/jpos/iso/Currency.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/jpos/jPOS/blob/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/iso/Currency.java",
    "raw_url": "https://github.com/jpos/jPOS/raw/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/iso/Currency.java",
    "contents_url": "https://api.github.com/repos/jpos/jPOS/contents/jpos/src/main/java/org/jpos/iso/Currency.java?ref=fb15266e97006816cc74c373ec3111e9cc96e8d3",
    "patch": "@@ -70,7 +70,7 @@ public String formatAmountForISOMsg(double amount)\n \n     public double parseAmountFromISOMsg(String isoamount)\n     {\n-        return new Double(isoamount)/Math.pow(10, getDecimals());\n+        return Double.valueOf(isoamount)/Math.pow(10, getDecimals());\n     }\n \n     @Override"
  },
  {
    "sha": "95093e17f2941d2f73f2eaaa71319d33c1931b14",
    "filename": "jpos/src/main/java/org/jpos/iso/packager/GenericPackager.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/jpos/jPOS/blob/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/iso/packager/GenericPackager.java",
    "raw_url": "https://github.com/jpos/jPOS/raw/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/iso/packager/GenericPackager.java",
    "contents_url": "https://api.github.com/repos/jpos/jPOS/contents/jpos/src/main/java/org/jpos/iso/packager/GenericPackager.java?ref=fb15266e97006816cc74c373ec3111e9cc96e8d3",
    "patch": "@@ -428,7 +428,7 @@ public void startElement(String namespaceURI, String localName, String qName, At\n                     */\n                     String packager = atts.getValue(\"packager\");\n \n-                    fieldStack.push(new Integer(id));\n+                    fieldStack.push(Integer.valueOf(id));\n \n                     ISOFieldPackager f;\n                     f = (ISOFieldPackager) Class.forName(type).newInstance();\n@@ -468,7 +468,7 @@ else if (localName.equals(\"isofield\"))\n                     // Insert this new isofield into the Map\n                     // on the top of the stack using the fieldID as the key\n                     Map m = (Map) fieldStack.peek();\n-                    m.put(new Integer(id), f);\n+                    m.put(Integer.valueOf(id), f);\n                 }\n             }\n             catch (Exception ex)"
  },
  {
    "sha": "8601ece263b867c27c8f1cfc0de59ee47da5eea4",
    "filename": "jpos/src/main/java/org/jpos/iso/packager/GenericValidatingPackager.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/jpos/jPOS/blob/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/iso/packager/GenericValidatingPackager.java",
    "raw_url": "https://github.com/jpos/jPOS/raw/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/iso/packager/GenericValidatingPackager.java",
    "contents_url": "https://api.github.com/repos/jpos/jPOS/contents/jpos/src/main/java/org/jpos/iso/packager/GenericValidatingPackager.java?ref=fb15266e97006816cc74c373ec3111e9cc96e8d3",
    "patch": "@@ -231,7 +231,7 @@ public void startElement( String namespaceURI, String localName, String qName, A\n                     // Insert this new isofield into the Map\n                     // on the top of the stack using the fieldID as the key\n                     Map m = (Map) fieldStack.peek();\n-                    m.put(new Integer(fldID), f);\n+                    m.put(Integer.valueOf(fldID), f);\n                 }\n                 if ( localName.equals( \"isofieldvalidator\" ) ){\n                     String type = atts.getValue( \"class\" );\n@@ -278,7 +278,7 @@ public void startElement( String namespaceURI, String localName, String qName, A\n 4) a Map to collect the subfields\n */\n                     String packager = atts.getValue(\"packager\");\n-                    fieldStack.push(new Integer(id));\n+                    fieldStack.push(Integer.valueOf(id));\n                     ISOFieldPackager f;\n                     f = (ISOFieldPackager) Class.forName(type).newInstance();\n                     f.setDescription(name);\n@@ -349,7 +349,7 @@ public void endElement(String namespaceURI, String localName, String qName) {\n                         ex.printStackTrace(  );\n                     }\n                 }\n-                ((Map)validatorStack.peek()).put( new Integer(fldID), f );\n+                ((Map)validatorStack.peek()).put(Integer.valueOf(fldID), f );\n             }\n             if ( localName.equals( \"isovalidator\" ) ){\n                 /** pop properties **/"
  },
  {
    "sha": "6d307fa2bd3976117fbad59cc035e4c1e7a17776",
    "filename": "jpos/src/main/java/org/jpos/security/jceadapter/JCESecurityModule.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/jpos/jPOS/blob/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/security/jceadapter/JCESecurityModule.java",
    "raw_url": "https://github.com/jpos/jPOS/raw/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/security/jceadapter/JCESecurityModule.java",
    "contents_url": "https://api.github.com/repos/jpos/jPOS/contents/jpos/src/main/java/org/jpos/security/jceadapter/JCESecurityModule.java?ref=fb15266e97006816cc74c373ec3111e9cc96e8d3",
    "patch": "@@ -1823,7 +1823,11 @@ private void init (String jceProviderClassName, String lmkFile, boolean lmkRebui\n                     evt.addMessage(\"No JCE Provider specified. Attempting to load default provider (SunJCE).\");\n                     jceProviderClassName = \"com.sun.crypto.provider.SunJCE\";\n                 }\n-                provider = (Provider)Class.forName(jceProviderClassName).newInstance();\n+                if (jceProviderClassName == \"com.sun.crypto.provider.SunJCE\") {\n+                    provider = java.security.Security.getProvider(\"SunJCE\");\n+                } else {\n+                    provider = (Provider)Class.forName(jceProviderClassName).getDeclaredConstructor().newInstance();\n+                }\n                 Security.addProvider(provider);\n                 evt.addMessage(\"name\", provider.getName());\n             } catch (Exception e) {"
  },
  {
    "sha": "32c4f37f740b853729bc429f2cf7bd24c7efffe0",
    "filename": "jpos/src/main/java/org/jpos/tlv/packager/TaggedSequencePackager.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/jpos/jPOS/blob/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/tlv/packager/TaggedSequencePackager.java",
    "raw_url": "https://github.com/jpos/jPOS/raw/fb15266e97006816cc74c373ec3111e9cc96e8d3/jpos/src/main/java/org/jpos/tlv/packager/TaggedSequencePackager.java",
    "contents_url": "https://api.github.com/repos/jpos/jPOS/contents/jpos/src/main/java/org/jpos/tlv/packager/TaggedSequencePackager.java?ref=fb15266e97006816cc74c373ec3111e9cc96e8d3",
    "patch": "@@ -139,7 +139,7 @@ public void unpack(ISOComponent m, InputStream in) throws IOException, ISOExcept\n         try (ByteArrayOutputStream bout = new ByteArrayOutputStream(100)) {\n             ISOComponent c;\n             Map fields = m.getChildren();\n-            fields.remove(new Integer(-1));\n+            fields.remove(-1);\n             int len = 0;\n             boolean tagsStarted = false;\n             Iterator iterator = fields.values().iterator();"
  }
]
