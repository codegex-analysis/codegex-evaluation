[
  {
    "sha": "bd8f116224312cddf3ea836739f2ab01d4255ee3",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMock.java",
    "status": "modified",
    "additions": 10,
    "deletions": 7,
    "changes": 17,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/main/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMock.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/main/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMock.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMock.java?ref=903840f798ed5b9dfecdd6faf809bbc305cfeb2f",
    "patch": "@@ -10,6 +10,7 @@\n import org.bukkit.inventory.meta.ItemMeta;\n \n import be.seeseemelk.mockbukkit.UnimplementedOperationException;\n+import be.seeseemelk.mockbukkit.inventory.meta.BannerMetaMock;\n import be.seeseemelk.mockbukkit.inventory.meta.BookMetaMock;\n import be.seeseemelk.mockbukkit.inventory.meta.ItemMetaMock;\n import be.seeseemelk.mockbukkit.inventory.meta.SkullMetaMock;\n@@ -44,13 +45,15 @@\n \t\t\tcase SKULL_ITEM:\n \t\t\t\t// TODO Auto-generated method stub\n \t\t\t\treturn SkullMetaMock.class;\n+\t\t\tcase BANNER:\n+\t\t\t\treturn BannerMetaMock.class;\n \t\t\tcase EGG:\n \t\t\tcase DRAGON_EGG:\n \t\t\tdefault:\n \t\t\t\treturn ItemMetaMock.class;\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic ItemMeta getItemMeta(Material material)\n \t{\n@@ -63,20 +66,20 @@ public ItemMeta getItemMeta(Material material)\n \t\t\tthrow new UnsupportedOperationException(\"Can't instantiate class\");\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic boolean isApplicable(ItemMeta meta, ItemStack stack) throws IllegalArgumentException\n \t{\n \t\treturn isApplicable(meta, stack.getType());\n \t}\n-\t\n+\n \t@Override\n \tpublic boolean isApplicable(ItemMeta meta, Material material) throws IllegalArgumentException\n \t{\n \t\tClass<? extends ItemMeta> target = getItemMetaClass(material);\n \t\treturn target.isInstance(meta);\n \t}\n-\t\n+\n \t@Override\n \tpublic boolean equals(ItemMeta meta1, ItemMeta meta2) throws IllegalArgumentException\n \t{\n@@ -89,13 +92,13 @@ public boolean equals(ItemMeta meta1, ItemMeta meta2) throws IllegalArgumentExce\n \t\t\treturn false;\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic ItemMeta asMetaFor(ItemMeta meta, ItemStack stack) throws IllegalArgumentException\n \t{\n \t\treturn asMetaFor(meta, stack.getType());\n \t}\n-\t\n+\n \t@Override\n \tpublic ItemMeta asMetaFor(ItemMeta meta, Material material) throws IllegalArgumentException\n \t{\n@@ -123,7 +126,7 @@ public ItemMeta asMetaFor(ItemMeta meta, Material material) throws IllegalArgume\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic Color getDefaultLeatherColor()\n \t{"
  },
  {
    "sha": "7a5f8a1c9216c5d05ed2a7d6ab71bf1bd0cb4a5c",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMock.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMock.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMock.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMock.java?ref=903840f798ed5b9dfecdd6faf809bbc305cfeb2f",
    "patch": "@@ -0,0 +1,86 @@\n+package be.seeseemelk.mockbukkit.inventory.meta;\n+\n+import org.bukkit.DyeColor;\n+import org.bukkit.block.banner.Pattern;\n+import org.bukkit.inventory.meta.BannerMeta;\n+import org.bukkit.inventory.meta.ItemMeta;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BannerMetaMock extends ItemMetaMock implements BannerMeta\n+{\n+    private DyeColor baseColor; // defaults to null\n+    private List<Pattern> patterns = new ArrayList<>();\n+\n+    public BannerMetaMock()\n+    {\n+        super();\n+    }\n+\n+    public BannerMetaMock(ItemMeta meta)\n+    {\n+        super(meta);\n+\n+        if (meta instanceof BannerMeta) {\n+            BannerMeta bannerMeta = (BannerMeta) meta;\n+            this.setBaseColor(((BannerMeta) meta).getBaseColor());\n+            this.setPatterns(((BannerMeta) meta).getPatterns());\n+        }\n+\n+    }\n+\n+    @Override\n+    public DyeColor getBaseColor()\n+    {\n+        return this.baseColor;\n+    }\n+\n+    @Override\n+    public void setBaseColor(DyeColor color)\n+    {\n+        this.baseColor = color;\n+    }\n+\n+    @Override\n+    public List<Pattern> getPatterns()\n+    {\n+        return new ArrayList<>(patterns);\n+    }\n+\n+    @Override\n+    public void setPatterns(List<Pattern> patterns)\n+    {\n+        this.patterns = new ArrayList<>(patterns);\n+    }\n+\n+    @Override\n+    public void addPattern(Pattern pattern)\n+    {\n+        this.patterns.add(pattern);\n+    }\n+\n+    @Override\n+    public Pattern getPattern(int i)\n+    {\n+        return this.patterns.get(i);\n+    }\n+\n+    @Override\n+    public Pattern removePattern(int i)\n+    {\n+        return this.patterns.remove(i);\n+    }\n+\n+    @Override\n+    public void setPattern(int i, Pattern pattern)\n+    {\n+        this.patterns.set(i, pattern);\n+    }\n+\n+    @Override\n+    public int numberOfPatterns()\n+    {\n+        return this.patterns.size();\n+    }\n+}"
  },
  {
    "sha": "ed885726a8564be647bdc0159320cc3aa7631c83",
    "filename": "src/test/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMockTest.java",
    "status": "modified",
    "additions": 41,
    "deletions": 16,
    "changes": 57,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/test/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMockTest.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/test/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMockTest.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/test/java/be/seeseemelk/mockbukkit/inventory/ItemFactoryMockTest.java?ref=903840f798ed5b9dfecdd6faf809bbc305cfeb2f",
    "patch": "@@ -1,10 +1,9 @@\n package be.seeseemelk.mockbukkit.inventory;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n+import be.seeseemelk.mockbukkit.inventory.meta.BannerMetaMock;\n import org.bukkit.Material;\n import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.BannerMeta;\n import org.bukkit.inventory.meta.ItemMeta;\n import org.junit.After;\n import org.junit.Before;\n@@ -13,77 +12,85 @@\n import be.seeseemelk.mockbukkit.MockBukkit;\n import be.seeseemelk.mockbukkit.inventory.meta.ItemMetaMock;\n \n+import static org.junit.Assert.*;\n+\n public class ItemFactoryMockTest\n {\n \tprivate ItemFactoryMock factory;\n-\t\n+\n \t@Before\n \tpublic void setUp()\n \t{\n \t\tMockBukkit.mock();\n \t\tfactory = new ItemFactoryMock();\n \t}\n-\t\n+\n \t@After\n \tpublic void tearDown()\n \t{\n \t\tMockBukkit.unload();\n \t}\n-\t\n+\n \t/*\n \t * These tests are still very incomplete as the ItemFactoryMock for now only\n \t * supports the creation of ItemMetaMock objects.\n \t */\n-\t\n+\n \t@Test\n \tpublic void getItemMeta_Stick_StandardItemMeta()\n \t{\n \t\tassertTrue(factory.getItemMeta(Material.DIRT) instanceof ItemMetaMock);\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void getItemMeta_Stick_BannerItemMeta()\n+\t{\n+\t\tassertTrue(factory.getItemMeta(Material.BANNER) instanceof BannerMetaMock);\n+\t}\n+\n \t@Test\n \tpublic void isApplicable_StandardItemMetaOnDirtMaterial_True()\n \t{\n \t\tItemMeta meta = factory.getItemMeta(Material.DIRT);\n \t\tassertTrue(factory.isApplicable(meta, Material.DIRT));\n \t}\n-\t\n+\n \t@Test\n \tpublic void isApplicable_StandardItemMetaOnDirtItemStack_True()\n \t{\n \t\tItemStack stack = new ItemStack(Material.DIRT);\n \t\tItemMeta meta = factory.getItemMeta(Material.DIRT);\n \t\tassertTrue(factory.isApplicable(meta, stack));\n \t}\n-\t\n+\n \t@Test\n \tpublic void equals_NullAndNull_False()\n \t{\n \t\tassertFalse(factory.equals(null, null));\n \t}\n-\t\n+\n \t@Test\n \tpublic void equals_MetaAndNull_False()\n \t{\n \t\tItemMeta meta = factory.getItemMeta(Material.DIRT);\n \t\tassertFalse(factory.equals(meta, null));\n \t}\n-\t\n+\n \t@Test\n \tpublic void equals_NullAndMeta_False()\n \t{\n \t\tItemMeta meta = factory.getItemMeta(Material.DIRT);\n \t\tassertFalse(factory.equals(null, meta));\n \t}\n-\t\n+\n \t@Test\n \tpublic void equals_CompatibleMetas_True()\n \t{\n \t\tItemMeta a = factory.getItemMeta(Material.DIRT);\n \t\tItemMeta b = factory.getItemMeta(Material.DIRT);\n \t\tassertTrue(factory.equals(a, b));\n \t}\n-\t\n+\n \t@Test\n \tpublic void asMetaFor_DirtItemMetaOnDirtMaterial_ReturnsCloneOfMeta()\n \t{\n@@ -92,18 +99,36 @@ public void asMetaFor_DirtItemMetaOnDirtMaterial_ReturnsCloneOfMeta()\n \t\tItemMeta newMeta = factory.asMetaFor(meta, Material.DIRT);\n \t\tassertTrue(meta.equals(newMeta));\n \t}\n-\t\n+\n \t@Test\n \tpublic void asMetaFor_DirtItemMetaOnDirtItemStack_ReturnsCloneOfMeta()\n \t{\n \t\tItemStack stack = new ItemStack(Material.DIRT);\n \t\tItemMeta meta = stack.getItemMeta();\n \t\tmeta.setDisplayName(\"My piece of dirt\");\n \t\tstack.setItemMeta(meta);\n-\t\t\n+\n \t\tItemMeta newMeta = factory.asMetaFor(meta, stack);\n \t\tassertTrue(meta.equals(newMeta));\n \t}\n+\n+\t@Test\n+\tpublic void asMetaFor_BannerMeta_ReturnNewClone()\n+\t{\n+\t\tItemStack stack = new ItemStack(Material.BANNER);\n+\t\tItemMeta meta = stack.getItemMeta();\n+\n+\t\tassertTrue(meta instanceof BannerMetaMock); // so we don't fail later\n+\n+\t\tBannerMeta bannerMeta = (BannerMeta) meta;\n+\n+\t\tbannerMeta.setDisplayName(\"My super banner\");\n+\t\tstack.setItemMeta(bannerMeta);\n+\n+\t\tItemMeta newMeta = factory.asMetaFor(bannerMeta, stack);\n+\t\tassertTrue(newMeta instanceof BannerMetaMock);\n+\t\tassertEquals(meta, newMeta);\n+\t}\n }\n \n "
  },
  {
    "sha": "bab2f9187bef4e1d71006b5e79ec472b3417a1f8",
    "filename": "src/test/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMockTest.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/test/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMockTest.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/903840f798ed5b9dfecdd6faf809bbc305cfeb2f/src/test/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMockTest.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/test/java/be/seeseemelk/mockbukkit/inventory/meta/BannerMetaMockTest.java?ref=903840f798ed5b9dfecdd6faf809bbc305cfeb2f",
    "patch": "@@ -0,0 +1,102 @@\n+package be.seeseemelk.mockbukkit.inventory.meta;\n+\n+import org.bukkit.DyeColor;\n+import org.bukkit.block.banner.Pattern;\n+import org.bukkit.block.banner.PatternType;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class BannerMetaMockTest\n+{\n+    private BannerMetaMock meta;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        meta = new BannerMetaMock();\n+    }\n+\n+    @Test\n+    public void setBaseColor_SetExactly()\n+    {\n+        meta.setBaseColor(DyeColor.BLACK);\n+        assertEquals(DyeColor.BLACK, meta.getBaseColor());\n+    }\n+\n+    @Test\n+    public void setPatterns_SetExactly()\n+    {\n+        List<Pattern> patterns = Arrays.asList(\n+                new Pattern(DyeColor.BLACK, PatternType.CROSS),\n+                new Pattern(DyeColor.BROWN, PatternType.CROSS)\n+        );\n+\n+        meta.setPatterns(patterns);\n+        assertEquals(patterns, meta.getPatterns());\n+    }\n+\n+    @Test\n+    public void addPattern()\n+    {\n+        Pattern pattern = new Pattern(DyeColor.MAGENTA, PatternType.DIAGONAL_LEFT_MIRROR);\n+        meta.addPattern(pattern);\n+        assertTrue(meta.getPatterns().contains(pattern));\n+    }\n+\n+    @Test\n+    public void getPattern_SetAsList()\n+    {\n+        Pattern pattern1 = new Pattern(DyeColor.BLACK, PatternType.CROSS);\n+        Pattern pattern2 = new Pattern(DyeColor.BROWN, PatternType.CROSS);\n+        List<Pattern> patterns = Arrays.asList(pattern1, pattern2);\n+        meta.setPatterns(patterns);\n+\n+        assertEquals(pattern1, meta.getPattern(0));\n+        assertEquals(pattern2, meta.getPattern(1));\n+    }\n+\n+    @Test\n+    public void getPattern_SetExactly()\n+    {\n+        Pattern pattern = new Pattern(DyeColor.MAGENTA, PatternType.DIAGONAL_LEFT_MIRROR);\n+        meta.setPatterns(Collections.singletonList(null)); // so there is at least one pattern\n+        meta.setPattern(0, pattern);\n+        assertEquals(pattern, meta.getPattern(0));\n+    }\n+\n+    @Test\n+    public void removePattern()\n+    {\n+        Pattern pattern = new Pattern(DyeColor.BLACK, PatternType.CROSS);\n+        List<Pattern> patterns = Collections.singletonList(pattern);\n+        meta.setPatterns(patterns);\n+        meta.removePattern(0);\n+        assertEquals(0, meta.numberOfPatterns());\n+\n+    }\n+\n+    @Test\n+    public void numberOfPatterns_DefaultsTo0()\n+    {\n+        assertEquals(0, meta.numberOfPatterns());\n+    }\n+\n+    @Test\n+    public void numberOfPatterns_SetExactly()\n+    {\n+        List<Pattern> patterns = Arrays.asList(\n+                new Pattern(DyeColor.BLACK, PatternType.CROSS),\n+                new Pattern(DyeColor.BROWN, PatternType.CROSS)\n+        );\n+\n+        meta.setPatterns(patterns);\n+        assertEquals(2, meta.numberOfPatterns());\n+    }\n+}"
  }
]
