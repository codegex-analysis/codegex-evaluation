[
  {
    "sha": "6625a8f8e11acf70832b8c5b47cf52aff4b8817c",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/07c1ee66abdb1ec4301739740507882c37748d4a/settings.gradle",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/07c1ee66abdb1ec4301739740507882c37748d4a/settings.gradle",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/settings.gradle?ref=07c1ee66abdb1ec4301739740507882c37748d4a",
    "patch": "@@ -1,5 +1,5 @@\n gradle.ext.apiVersion = '1.16'\n gradle.ext.apiVersionFull = '1.16.5-R0.1-SNAPSHOT'\n-gradle.ext.version = '0.31.0'\n+gradle.ext.version = '0.31.1'\n \n rootProject.name = 'MockBukkit-' + gradle.ext.apiVersion"
  },
  {
    "sha": "206aeb3261f9549316b093ece3f6162dc31c7e77",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMock.java",
    "status": "modified",
    "additions": 58,
    "deletions": 8,
    "changes": 66,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/07c1ee66abdb1ec4301739740507882c37748d4a/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMock.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/07c1ee66abdb1ec4301739740507882c37748d4a/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMock.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMock.java?ref=07c1ee66abdb1ec4301739740507882c37748d4a",
    "patch": "@@ -33,6 +33,10 @@\n public class ItemMetaMock implements ItemMeta, Damageable, Repairable\n {\n \n+\t/*\n+\t * If you add a new field, you need to add it to #hashCode, #equals, #serialize, and #deserialize.\n+\t * If it's a mutable object, it also needs to be handled in #clone.\n+\t */\n \tprivate String displayName = null;\n \tprivate List<String> lore = null;\n \tprivate int damage = 0;\n@@ -169,26 +173,72 @@ public int hashCode()\n \t\tint result = 1;\n \t\tresult = prime * result + ((displayName == null) ? 0 : displayName.hashCode());\n \t\tresult = prime * result + ((lore == null) ? 0 : lore.hashCode());\n-\t\tresult = prime * result + Boolean.hashCode(unbreakable);\n-\t\tresult = prime * result + enchants.hashCode();\n-\t\tresult = prime * result + persistentDataContainer.hashCode();\n \t\tresult = prime * result + ((customModelData == null) ? 0 : customModelData.hashCode());\n-\t\tresult = prime * result + repairCost;\n+\t\tresult = prime * result + (enchants.isEmpty() ? 0 : enchants.hashCode());\n+\t\tresult = prime * result + (hasRepairCost() ? this.repairCost : 0);\n+\t\tresult = prime * result + (!persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0);\n+\t\tresult = prime * result + (hideFlags.isEmpty() ? 0 : hideFlags.hashCode());\n+\t\tresult = prime * result + Boolean.hashCode(unbreakable);\n+\t\tresult = prime * result + (hasDamage() ? this.damage : 0);\n \t\treturn result;\n \t}\n \n \t@Override\n \tpublic boolean equals(Object obj)\n \t{\n-\t\tif (obj instanceof ItemMeta)\n+\t\tif (!(obj instanceof ItemMeta))\n \t\t{\n-\t\t\tItemMeta meta = (ItemMeta) obj;\n-\t\t\treturn isLoreEquals(meta) && isDisplayNameEqual(meta);\n+\t\t\treturn false;\n \t\t}\n-\t\telse\n+\n+\t\tItemMeta meta = (ItemMeta) obj;\n+\n+\t\tif (!isDisplayNameEqual(meta))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (!isLoreEquals(meta))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (obj instanceof Damageable)\n+\t\t{\n+\t\t\tDamageable damageable = (Damageable) obj;\n+\t\t\tif (hasDamage() != damageable.hasDamage() || hasDamage() && getDamage() != damageable.getDamage())\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\telse if (hasDamage())\n \t\t{\n \t\t\treturn false;\n \t\t}\n+\t\t// Comparing using equals is fine - AbstractMap#equals only cares about content, not Map implementation.\n+\t\tif (!enchants.equals(meta.getEnchants()))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\t// Same as above - AbstractSet#equals only compares content.\n+\t\tif (!hideFlags.equals(meta.getItemFlags()))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\t// MockPDC does care about PDC impl, but this is in line with CB's equality comparison.\n+\t\tif (!persistentDataContainer.equals(meta.getPersistentDataContainer()))\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (unbreakable != meta.isUnbreakable())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (hasCustomModelData() != meta.hasCustomModelData()\n+\t\t\t\t|| hasCustomModelData() && getCustomModelData() != meta.getCustomModelData())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n \t}\n \n \t@Override"
  },
  {
    "sha": "a14a750ac91d1ec91f4e8c33d3d1f01c42848ea3",
    "filename": "src/test/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMockTest.java",
    "status": "modified",
    "additions": 195,
    "deletions": 24,
    "changes": 219,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/07c1ee66abdb1ec4301739740507882c37748d4a/src/test/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMockTest.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/07c1ee66abdb1ec4301739740507882c37748d4a/src/test/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMockTest.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/test/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMockTest.java?ref=07c1ee66abdb1ec4301739740507882c37748d4a",
    "patch": "@@ -2,19 +2,24 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import be.seeseemelk.mockbukkit.MockPlugin;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.bukkit.Material;\n+import org.bukkit.NamespacedKey;\n import org.bukkit.enchantments.Enchantment;\n import org.bukkit.inventory.ItemFlag;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.inventory.meta.Damageable;\n import org.bukkit.inventory.meta.Repairable;\n+import org.bukkit.persistence.PersistentDataType;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -79,7 +84,7 @@ public void setDisplayName_Null_NameRemoves()\n \tpublic void equals_SameWithoutDisplayName_True()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n-\t\tassertTrue(meta.equals(meta2));\n+\t\tassertEquals(meta, meta2);\n \t\tassertEquals(meta.hashCode(), meta2.hashCode());\n \t}\n \n@@ -89,18 +94,18 @@ public void equals_SameWithDisplayName_True()\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n \t\tmeta.setDisplayName(\"Some name\");\n \t\tmeta2.setDisplayName(\"Some name\");\n-\t\tassertTrue(meta.equals(meta2));\n+\t\tassertEquals(meta, meta2);\n \t\tassertEquals(meta.hashCode(), meta2.hashCode());\n \t}\n \n \t@Test\n \tpublic void equals_SameLore_True()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n-\t\tmeta.setLore(Arrays.asList(\"lore\"));\n-\t\tmeta2.setLore(Arrays.asList(\"lore\"));\n-\t\tassertTrue(meta.equals(meta2));\n-\t\tassertTrue(meta2.equals(meta));\n+\t\tmeta.setLore(Collections.singletonList(\"lore\"));\n+\t\tmeta2.setLore(Collections.singletonList(\"lore\"));\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n \t\tassertEquals(meta.hashCode(), meta2.hashCode());\n \t}\n \n@@ -110,63 +115,229 @@ public void equals_DifferentDisplayName_False()\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n \t\tmeta.setDisplayName(\"Some name\");\n \t\tmeta2.setDisplayName(\"Different name\");\n-\t\tassertFalse(meta.equals(meta2));\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n \t}\n \n \t@Test\n \tpublic void equals_OneWithDisplayNameOneWithout_False()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n \t\tmeta.setDisplayName(\"Some name\");\n-\t\tassertFalse(meta.equals(meta2));\n-\t\tassertFalse(meta2.equals(meta));\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n \t}\n \n \t@Test\n \tpublic void equals_OneWithLoreOneWithout_False()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n-\t\tmeta.setLore(Arrays.asList(\"lore\"));\n-\t\tassertFalse(meta.equals(meta2));\n-\t\tassertFalse(meta2.equals(meta));\n+\t\tmeta.setLore(Collections.singletonList(\"lore\"));\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n \t}\n \n \t@Test\n \tpublic void equals_DifferentSizedLore_False()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n-\t\tmeta.setLore(Arrays.asList(\"lore\"));\n+\t\tmeta.setLore(Collections.singletonList(\"lore\"));\n \t\tmeta2.setLore(Arrays.asList(\"lore\", \"more lore\"));\n-\t\tassertFalse(meta.equals(meta2));\n-\t\tassertFalse(meta2.equals(meta));\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n \t}\n \n \t@Test\n \tpublic void equals_Null_False()\n \t{\n-\t\tassertFalse(meta.equals(null));\n+\t\tassertNotEquals(meta, null);\n+\t\tassertNotEquals(null, meta);\n \t}\n \n \t@Test\n-\tpublic void equals_SameUnbreakableProperty_True()\n+\tpublic void equals_DamageSame_True()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.setDamage(10);\n+\t\tmeta2.setDamage(10);\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_DamageDifferent_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.setDamage(10);\n+\t\tmeta2.setDamage(20);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_DamageOneWithout_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.setDamage(10);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_EnchantsSame_True()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addEnchant(Enchantment.DURABILITY, 5, true);\n+\t\tmeta2.addEnchant(Enchantment.DURABILITY, 5, true);\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_EnchantsDifferent_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addEnchant(Enchantment.DURABILITY, 5, true);\n+\t\tmeta2.addEnchant(Enchantment.DURABILITY, 5, true);\n+\t\tmeta2.addEnchant(Enchantment.DAMAGE_ALL, 1, true);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_EnchantsDifferentLevel_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addEnchant(Enchantment.DURABILITY, 5, true);\n+\t\tmeta2.addEnchant(Enchantment.DURABILITY, 10, true);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_EnchantsOneEmpty_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addEnchant(Enchantment.DURABILITY, 5, true);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_HideFlagsSame_True()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addItemFlags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_DYE);\n+\t\tmeta2.addItemFlags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_DYE);\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_HideFlagsDifferent_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addItemFlags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_DYE);\n+\t\tmeta2.addItemFlags(ItemFlag.HIDE_DESTROYS);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_HideFlagsOneEmpty_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_PersistentDataSame_True()\n+\t{\n+\t\tMockPlugin plugin = MockBukkit.createMockPlugin();\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tNamespacedKey key = new NamespacedKey(plugin, \"key\");\n+\t\tmeta.getPersistentDataContainer().set(key, PersistentDataType.LONG, 0L);\n+\t\tmeta2.getPersistentDataContainer().set(key, PersistentDataType.LONG, 0L);\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_PersistentDataDifferent_False()\n+\t{\n+\t\tMockPlugin plugin = MockBukkit.createMockPlugin();\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tNamespacedKey key = new NamespacedKey(plugin, \"key\");\n+\t\tmeta.getPersistentDataContainer().set(key, PersistentDataType.LONG, 0L);\n+\t\tmeta2.getPersistentDataContainer().set(key, PersistentDataType.LONG, 10L);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_PersistentDataOneEmpty_False()\n+\t{\n+\t\tMockPlugin plugin = MockBukkit.createMockPlugin();\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tNamespacedKey key = new NamespacedKey(plugin, \"key\");\n+\t\tmeta.getPersistentDataContainer().set(key, PersistentDataType.LONG, 0L);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_UnbreakableSame_True()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n-\t\tmeta.setUnbreakable(false);\n-\t\tmeta2.setUnbreakable(false);\n-\t\tassertTrue(meta.equals(meta2));\n \t\tmeta.setUnbreakable(true);\n \t\tmeta2.setUnbreakable(true);\n-\t\tassertTrue(meta.equals(meta2));\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n+\t\tmeta.setUnbreakable(false);\n+\t\tmeta2.setUnbreakable(false);\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n \t}\n \n \t@Test\n-\tpublic void equals_DifferentUnbreakableProperty_False()\n+\tpublic void equals_UnbreakableDifferent_False()\n \t{\n \t\tItemMetaMock meta2 = new ItemMetaMock();\n \t\tmeta.setUnbreakable(true);\n \t\tmeta2.setUnbreakable(false);\n-\t\tassertTrue(meta.equals(meta2));\n-\t\tassertTrue(meta2.equals(meta));\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_CustomModelDataSame_True()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.setCustomModelData(10);\n+\t\tmeta2.setCustomModelData(10);\n+\t\tassertEquals(meta, meta2);\n+\t\tassertEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_CustomModelDataDifferent_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.setCustomModelData(10);\n+\t\tmeta2.setCustomModelData(20);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n+\t}\n+\n+\t@Test\n+\tpublic void equals_CustomModelDataOneWithout_False()\n+\t{\n+\t\tItemMetaMock meta2 = new ItemMetaMock();\n+\t\tmeta.setCustomModelData(10);\n+\t\tassertNotEquals(meta, meta2);\n+\t\tassertNotEquals(meta2, meta);\n \t}\n \n \t@Test"
  }
]
