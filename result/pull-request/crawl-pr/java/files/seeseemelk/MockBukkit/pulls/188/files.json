[
  {
    "sha": "6625a8f8e11acf70832b8c5b47cf52aff4b8817c",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/settings.gradle",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/settings.gradle",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/settings.gradle?ref=3fb736d8a70fdd5dd090370da183fc7d90e0a7b1",
    "patch": "@@ -1,5 +1,5 @@\n gradle.ext.apiVersion = '1.16'\n gradle.ext.apiVersionFull = '1.16.5-R0.1-SNAPSHOT'\n-gradle.ext.version = '0.31.0'\n+gradle.ext.version = '0.31.1'\n \n rootProject.name = 'MockBukkit-' + gradle.ext.apiVersion"
  },
  {
    "sha": "74b57aa65819e0879dc69247233f4cfc048b7f18",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/MockPlayerList.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/MockPlayerList.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/MockPlayerList.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/MockPlayerList.java?ref=3fb736d8a70fdd5dd090370da183fc7d90e0a7b1",
    "patch": "@@ -27,7 +27,7 @@\n  * @author TheBusyBiscuit\n  * \n  */\n-public class PlayerList\n+public class MockPlayerList\n {\n \tprivate int maxPlayers = Integer.MAX_VALUE;\n ",
    "previous_filename": "src/main/java/be/seeseemelk/mockbukkit/PlayerList.java"
  },
  {
    "sha": "b5698f2a333e8393de2bef48357cf7db426bee88",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/ServerMock.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/ServerMock.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/ServerMock.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/ServerMock.java?ref=3fb736d8a70fdd5dd090370da183fc7d90e0a7b1",
    "patch": "@@ -130,7 +130,7 @@\n \tprivate final ScoreboardManagerMock scoreboardManager = new ScoreboardManagerMock();\n \tprivate final BukkitSchedulerMock scheduler = new BukkitSchedulerMock();\n \tprivate final ServicesManagerMock servicesManager = new ServicesManagerMock();\n-\tprivate final PlayerList playerList = new PlayerList();\n+\tprivate final MockPlayerList playerList = new MockPlayerList();\n \tprivate ConsoleCommandSender consoleSender;\n \tprivate GameMode defaultGameMode = GameMode.SURVIVAL;\n \tprivate MockCommandMap commandMap;"
  },
  {
    "sha": "ac4823ce5311b135d9da086fd391772e96018759",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/entity/PlayerMock.java",
    "status": "modified",
    "additions": 63,
    "deletions": 28,
    "changes": 91,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/entity/PlayerMock.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/entity/PlayerMock.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/entity/PlayerMock.java?ref=3fb736d8a70fdd5dd090370da183fc7d90e0a7b1",
    "patch": "@@ -1,15 +1,37 @@\n package be.seeseemelk.mockbukkit.entity;\n \n-import be.seeseemelk.mockbukkit.MockBukkit;\n-import be.seeseemelk.mockbukkit.ServerMock;\n-import be.seeseemelk.mockbukkit.UnimplementedOperationException;\n-import be.seeseemelk.mockbukkit.inventory.EnderChestInventoryMock;\n-import be.seeseemelk.mockbukkit.inventory.PlayerInventoryMock;\n-import be.seeseemelk.mockbukkit.inventory.PlayerInventoryViewMock;\n-import be.seeseemelk.mockbukkit.inventory.SimpleInventoryViewMock;\n-import net.md_5.bungee.api.ChatMessageType;\n-import net.md_5.bungee.api.chat.BaseComponent;\n-import org.bukkit.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Predicate;\n+\n+import org.bukkit.BanList;\n+import org.bukkit.Bukkit;\n+import org.bukkit.DyeColor;\n+import org.bukkit.Effect;\n+import org.bukkit.FluidCollisionMode;\n+import org.bukkit.GameMode;\n+import org.bukkit.Instrument;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.Note;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.SoundCategory;\n+import org.bukkit.Statistic;\n+import org.bukkit.WeatherType;\n+import org.bukkit.World;\n import org.bukkit.advancement.Advancement;\n import org.bukkit.advancement.AdvancementProgress;\n import org.bukkit.attribute.Attribute;\n@@ -18,19 +40,29 @@\n import org.bukkit.block.data.BlockData;\n import org.bukkit.conversations.Conversation;\n import org.bukkit.conversations.ConversationAbandonedEvent;\n-import org.bukkit.entity.*;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.Pose;\n+import org.bukkit.entity.Villager;\n import org.bukkit.entity.memory.MemoryKey;\n+import org.bukkit.event.Event;\n import org.bukkit.event.block.BlockBreakEvent;\n import org.bukkit.event.block.BlockDamageEvent;\n import org.bukkit.event.block.BlockPlaceEvent;\n import org.bukkit.event.inventory.InventoryCloseEvent;\n import org.bukkit.event.inventory.InventoryType;\n import org.bukkit.event.player.AsyncPlayerChatEvent;\n-import org.bukkit.event.player.PlayerChatEvent;\n import org.bukkit.event.player.PlayerLevelChangeEvent;\n import org.bukkit.event.player.PlayerRespawnEvent;\n-import org.bukkit.inventory.*;\n+import org.bukkit.inventory.EntityEquipment;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.InventoryView;\n import org.bukkit.inventory.InventoryView.Property;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.MainHand;\n+import org.bukkit.inventory.Merchant;\n+import org.bukkit.inventory.PlayerInventory;\n import org.bukkit.map.MapView;\n import org.bukkit.plugin.Plugin;\n import org.bukkit.scoreboard.Scoreboard;\n@@ -39,15 +71,16 @@\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n-import java.net.InetSocketAddress;\n-import java.nio.charset.StandardCharsets;\n-import java.util.*;\n-import java.util.function.Predicate;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import be.seeseemelk.mockbukkit.UnimplementedOperationException;\n+import be.seeseemelk.mockbukkit.inventory.EnderChestInventoryMock;\n+import be.seeseemelk.mockbukkit.inventory.PlayerInventoryMock;\n+import be.seeseemelk.mockbukkit.inventory.PlayerInventoryViewMock;\n+import be.seeseemelk.mockbukkit.inventory.SimpleInventoryViewMock;\n+import net.md_5.bungee.api.ChatMessageType;\n+import net.md_5.bungee.api.chat.BaseComponent;\n \n-@SuppressWarnings(\"deprecation\")\n public class PlayerMock extends LivingEntityMock implements Player\n {\n \tprivate boolean online;\n@@ -884,14 +917,16 @@ public void kickPlayer(String message)\n \t}\n \n \t@Override\n-\tpublic void chat(String msg)\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic void chat(@NotNull String msg)\n \t{\n-\t\tAsyncPlayerChatEvent eventAsync = new AsyncPlayerChatEvent(false, this, msg,\n-\t\t        new HashSet<>(Bukkit.getOnlinePlayers()));\n-\t\tPlayerChatEvent eventSync = new PlayerChatEvent(this, msg);\n-\t\tMockBukkit.getMock().getScheduler().runTaskAsynchronously(null,\n-\t\t        () -> Bukkit.getPluginManager().callEvent(eventAsync));\n-\t\tBukkit.getPluginManager().callEvent(eventSync);\n+\t\tSet<Player> players = new HashSet<>(Bukkit.getOnlinePlayers());\n+\t\tEvent asyncEvent = new AsyncPlayerChatEvent(true, this, msg, players);\n+\t\tEvent syncEvent = new org.bukkit.event.player.PlayerChatEvent(this, msg);\n+\n+\t\tServerMock server = MockBukkit.getMock();\n+\t\tserver.getPluginManager().callEventAsynchronously(asyncEvent);\n+\t\tserver.getPluginManager().callEvent(syncEvent);\n \t}\n \n \t@Override"
  },
  {
    "sha": "feb0f7d57690a8b1dc2094464c531185c07462a0",
    "filename": "src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
    "status": "modified",
    "additions": 40,
    "deletions": 14,
    "changes": 54,
    "blob_url": "https://github.com/seeseemelk/MockBukkit/blob/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
    "raw_url": "https://github.com/seeseemelk/MockBukkit/raw/3fb736d8a70fdd5dd090370da183fc7d90e0a7b1/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
    "contents_url": "https://api.github.com/repos/seeseemelk/MockBukkit/contents/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java?ref=3fb736d8a70fdd5dd090370da183fc7d90e0a7b1",
    "patch": "@@ -56,25 +56,28 @@\n import org.bukkit.plugin.java.JavaPlugin;\n import org.bukkit.plugin.java.JavaPluginLoader;\n import org.bukkit.plugin.java.JavaPluginUtils;\n+import org.jetbrains.annotations.NotNull;\n \n import be.seeseemelk.mockbukkit.ServerMock;\n import be.seeseemelk.mockbukkit.UnimplementedOperationException;\n+import be.seeseemelk.mockbukkit.scheduler.BukkitSchedulerMock;\n \n public class PluginManagerMock implements PluginManager\n {\n \tprivate final ServerMock server;\n-\tprivate final List<Plugin> plugins = new ArrayList<>();\n \tprivate final JavaPluginLoader loader;\n+\tprivate final List<Plugin> plugins = new ArrayList<>();\n \tprivate final List<PluginCommand> commands = new ArrayList<>();\n \tprivate final List<Event> events = new ArrayList<>();\n \tprivate final List<File> temporaryFiles = new LinkedList<>();\n-\tprivate final List<Class<?>> pluginConstructorTypes = Arrays.asList(JavaPluginLoader.class,\n-\t        PluginDescriptionFile.class, File.class, File.class);\n \tprivate final List<Permission> permissions = new ArrayList<>();\n \tprivate final Map<Permissible, Set<String>> permissionSubscriptions = new HashMap<>();\n \n+\tprivate final List<Class<?>> pluginConstructorTypes = Arrays.asList(JavaPluginLoader.class,\n+\t        PluginDescriptionFile.class, File.class, File.class);\n+\n \t@SuppressWarnings(\"deprecation\")\n-\tpublic PluginManagerMock(ServerMock server)\n+\tpublic PluginManagerMock(@NotNull ServerMock server)\n \t{\n \t\tthis.server = server;\n \t\tloader = new JavaPluginLoader(this.server);\n@@ -105,7 +108,7 @@ public void unload()\n \t * @param message   The message to display when no event conforms.\n \t * @param predicate The predicate to test against.\n \t */\n-\tpublic void assertEventFired(String message, Predicate<Event> predicate)\n+\tpublic void assertEventFired(@NotNull String message, @NotNull Predicate<Event> predicate)\n \t{\n \t\tfor (Event event : events)\n \t\t{\n@@ -120,7 +123,7 @@ public void assertEventFired(String message, Predicate<Event> predicate)\n \t *\n \t * @param predicate The predicate to test against.\n \t */\n-\tpublic void assertEventFired(Predicate<Event> predicate)\n+\tpublic void assertEventFired(@NotNull Predicate<Event> predicate)\n \t{\n \t\tassertEventFired(\"Event assert failed\", predicate);\n \t}\n@@ -161,7 +164,7 @@ public void assertEventFired(Predicate<Event> predicate)\n \t *\n \t * @param eventClass The class of the event to check for.\n \t */\n-\tpublic void assertEventFired(Class<? extends Event> eventClass)\n+\tpublic void assertEventFired(@NotNull Class<? extends Event> eventClass)\n \t{\n \t\tassertEventFired(\"No event of that type has been fired\", eventClass::isInstance);\n \t}\n@@ -190,6 +193,7 @@ public Plugin getPlugin(String name)\n \t *\n \t * @return A collection of all available commands.\n \t */\n+\t@NotNull\n \tpublic Collection<PluginCommand> getCommands()\n \t{\n \t\treturn Collections.unmodifiableList(commands);\n@@ -203,7 +207,7 @@ public Plugin getPlugin(String name)\n \t *                    should be an exact match while the rest don't have to be.\n \t * @return {@code true} if the constructor is compatible, {@code false} if it isn't.\n \t */\n-\tprivate boolean isConstructorCompatible(Constructor<?> constructor, Class<?>[] types)\n+\tprivate boolean isConstructorCompatible(@NotNull Constructor<?> constructor, @NotNull Class<?>[] types)\n \t{\n \t\tClass<?>[] parameters = constructor.getParameterTypes();\n \t\tfor (int i = 0; i < types.length; i++)\n@@ -262,7 +266,8 @@ else if (!parameter.isAssignableFrom(type))\n \t * @return The created temporary directory.\n \t * @throws IOException when the directory could not be created.\n \t */\n-\tprivate File createTemporaryDirectory(String name) throws IOException\n+\t@NotNull\n+\tprivate File createTemporaryDirectory(@NotNull String name) throws IOException\n \t{\n \t\tRandom random = ThreadLocalRandom.current();\n \t\tFile directory = Files.createTempDirectory(name + \"-\" + random.nextInt()).toFile();\n@@ -275,7 +280,7 @@ private File createTemporaryDirectory(String name) throws IOException\n \t *\n \t * @param plugin The plugin that has been loaded.\n \t */\n-\tpublic void registerLoadedPlugin(Plugin plugin)\n+\tpublic void registerLoadedPlugin(@NotNull Plugin plugin)\n \t{\n \t\taddCommandsFrom(plugin);\n \t\tplugins.add(plugin);\n@@ -381,8 +386,13 @@ private PluginDescriptionFile findPluginDescription(Class<? extends JavaPlugin>\n \t}\n \n \t@Override\n-\tpublic void callEvent(Event event) throws IllegalStateException\n+\tpublic void callEvent(@NotNull Event event)\n \t{\n+\t\tif (event.isAsynchronous() && server.isOnMainThread())\n+\t\t{\n+\t\t\tthrow new IllegalStateException(\"Asynchronous Events cannot be called on the main Thread.\");\n+\t\t}\n+\t\t\n \t\tevents.add(event);\n \t\tHandlerList handlers = event.getHandlers();\n \t\tRegisteredListener[] listeners = handlers.getRegisteredListeners();\n@@ -392,7 +402,24 @@ public void callEvent(Event event) throws IllegalStateException\n \t\t}\n \t}\n \n-\tprivate void callRegisteredListener(RegisteredListener registration, Event event)\n+\t/**\n+\t * This method invokes {@link #callEvent(Event)} from a different {@link Thread}\n+\t * using the {@link BukkitSchedulerMock}.\n+\t * \n+\t * @param event The asynchronous {@link Event} to call.\n+\t */\n+\tpublic void callEventAsynchronously(@NotNull Event event)\n+\t{\n+\t\tif (!event.isAsynchronous())\n+\t\t{\n+\t\t\tthrow new IllegalStateException(\"Synchronous Events cannot be called asynchronously.\");\n+\t\t}\n+\n+\t\t// Our Scheduler will call the Event on a dedicated Event Thread Executor\n+\t\tserver.getScheduler().scheduleAsyncEventCall(() -> callEvent(event));\n+\t}\n+\n+\tprivate void callRegisteredListener(@NotNull RegisteredListener registration, @NotNull Event event)\n \t{\n \t\tif (!registration.getPlugin().isEnabled())\n \t\t{\n@@ -684,8 +711,7 @@ public void addPermission(Permission perm)\n \t@Override\n \tpublic void removePermission(Permission perm)\n \t{\n-\t\t// TODO Auto-generated method stub\n-\t\tthrow new UnimplementedOperationException();\n+\t\tpermissions.remove(perm);\n \t}\n \n \t@Override"
  }
]
