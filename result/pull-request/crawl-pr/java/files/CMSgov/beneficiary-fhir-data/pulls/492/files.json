[
  {
    "sha": "882adc6f67993982085197003892047e42cfbff3",
    "filename": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -4,6 +4,8 @@\n import gov.cms.bfd.model.rif.Beneficiary;\n import gov.cms.bfd.model.rif.CarrierClaim;\n import gov.cms.bfd.model.rif.CarrierClaim_;\n+import gov.cms.bfd.model.rif.DMEClaim;\n+import gov.cms.bfd.model.rif.DMEClaim_;\n import gov.cms.bfd.model.rif.HospiceClaim;\n import gov.cms.bfd.model.rif.HospiceClaim_;\n import gov.cms.bfd.model.rif.InpatientClaim;\n@@ -41,6 +43,14 @@\n       CarrierClaimTransformerV2::transform,\n       CarrierClaim_.lines),\n \n+  DME(\n+      DMEClaim.class,\n+      DMEClaim_.claimId,\n+      DMEClaim_.beneficiaryId,\n+      (entity) -> ((DMEClaim) entity).getDateThrough(),\n+      DMEClaimTransformerV2::transform,\n+      DMEClaim_.lines),\n+\n   PDE(\n       PartDEvent.class,\n       PartDEvent_.eventId,"
  },
  {
    "sha": "ba9fb6fe311b947fcb0445872685aa31b744c76a",
    "filename": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2.java",
    "status": "added",
    "additions": 444,
    "deletions": 0,
    "changes": 444,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -0,0 +1,444 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.Timer;\n+import com.newrelic.api.agent.Trace;\n+import gov.cms.bfd.model.codebook.data.CcwCodebookVariable;\n+import gov.cms.bfd.model.rif.DMEClaim;\n+import gov.cms.bfd.model.rif.DMEClaimLine;\n+import gov.cms.bfd.server.war.commons.Diagnosis;\n+import gov.cms.bfd.server.war.commons.MedicareSegment;\n+import gov.cms.bfd.server.war.commons.ProfileConstants;\n+import gov.cms.bfd.server.war.commons.carin.C4BBAdjudication;\n+import gov.cms.bfd.server.war.commons.carin.C4BBClaimProfessionalAndNonClinicianCareTeamRole;\n+import gov.cms.bfd.server.war.commons.carin.C4BBPractitionerIdentifierType;\n+import gov.cms.bfd.sharedutils.exceptions.BadCodeMonkeyException;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.CareTeamComponent;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.ItemComponent;\n+import org.hl7.fhir.r4.model.Extension;\n+import org.hl7.fhir.r4.model.Quantity;\n+\n+/** Transforms CCW {@link DMEClaim} instances into FHIR {@link ExplanationOfBenefit} resources. */\n+final class DMEClaimTransformerV2 {\n+  /**\n+   * @param metricRegistry the {@link MetricRegistry} to use\n+   * @param claim the CCW {@link DMEClaim} to transform\n+   * @return a FHIR {@link ExplanationOfBenefit} resource that represents the specified {@link\n+   *     DMEClaim}\n+   */\n+  @Trace\n+  static ExplanationOfBenefit transform(MetricRegistry metricRegistry, Object claim) {\n+    Timer.Context timer =\n+        metricRegistry\n+            .timer(MetricRegistry.name(DMEClaimTransformerV2.class.getSimpleName(), \"transform\"))\n+            .time();\n+\n+    if (!(claim instanceof DMEClaim)) {\n+      throw new BadCodeMonkeyException();\n+    }\n+    ExplanationOfBenefit eob = transformClaim((DMEClaim) claim);\n+\n+    timer.stop();\n+    return eob;\n+  }\n+\n+  /**\n+   * @param claimGroup the CCW {@link DMEClaim} to transform\n+   * @return a FHIR {@link ExplanationOfBenefit} resource that represents the specified {@link\n+   *     DMEClaim}\n+   */\n+  private static ExplanationOfBenefit transformClaim(DMEClaim claimGroup) {\n+    ExplanationOfBenefit eob = new ExplanationOfBenefit();\n+\n+    // Required values not directly mapped\n+    eob.getMeta().addProfile(ProfileConstants.C4BB_EOB_INPATIENT_PROFILE_URL);\n+\n+    // Common group level fields between all claim types\n+    // Claim Type + Claim ID    => ExplanationOfBenefit.id\n+    // CLM_ID                   => ExplanationOfBenefit.identifier\n+    // CLM_GRP_ID               => ExplanationOfBenefit.identifier\n+    // BENE_ID + Coverage Type  => ExplanationOfBenefit.insurance.coverage\n+    // BENE_ID                  => ExplanationOfBenefit.patient (reference)pwd\n+    // FINAL_ACTION             => ExplanationOfBenefit.status\n+    // CLM_FROM_DT              => ExplanationOfBenefit.billablePeriod.start\n+    // CLM_THRU_DT              => ExplanationOfBenefit.billablePeriod.end\n+    // CLM_PMT_AMT              => ExplanationOfBenefit.payment.amount\n+    TransformerUtilsV2.mapEobCommonClaimHeaderData(\n+        eob,\n+        claimGroup.getClaimId(),\n+        claimGroup.getBeneficiaryId(),\n+        ClaimTypeV2.DME,\n+        claimGroup.getClaimGroupId().toPlainString(),\n+        MedicareSegment.PART_A,\n+        Optional.of(claimGroup.getDateFrom()),\n+        Optional.of(claimGroup.getDateThrough()),\n+        Optional.of(claimGroup.getPaymentAmount()),\n+        claimGroup.getFinalAction());\n+\n+    // map eob type codes into FHIR\n+    // NCH_CLM_TYPE_CD            => ExplanationOfBenefit.type.coding\n+    // EOB Type                   => ExplanationOfBenefit.type.coding\n+    // Claim Type (Professional)  => ExplanationOfBenefit.type.coding\n+    // NCH_NEAR_LINE_REC_IDENT_CD => ExplanationOfBenefit.extension\n+    TransformerUtilsV2.mapEobType(\n+        eob,\n+        ClaimTypeV2.DME,\n+        Optional.of(claimGroup.getNearLineRecordIdCode()),\n+        Optional.of(claimGroup.getClaimTypeCode()));\n+\n+    // CARR_CLM_PRMRY_PYR_PD_AMT => ExplanationOfBenefit.total.amount\n+    TransformerUtilsV2.addTotal(\n+        eob,\n+        TransformerUtilsV2.createTotalAdjudicationAmountSlice(\n+            eob,\n+            CcwCodebookVariable.CLM_TOT_CHRG_AMT,\n+            C4BBAdjudication.PRIOR_PAYER_PAID,\n+            claimGroup.getPrimaryPayerPaidAmount()));\n+\n+    // NCH_WKLY_PROC_DT => ExplanationOfBenefit.supportinginfo.timingDate\n+    TransformerUtilsV2.addInformationWithDate(\n+        eob,\n+        CcwCodebookVariable.NCH_WKLY_PROC_DT,\n+        CcwCodebookVariable.NCH_WKLY_PROC_DT,\n+        Optional.of(claimGroup.getWeeklyProcessDate()));\n+\n+    // Common group level fields between Carrier and DME\n+    // BENE_ID =>\n+    // CARR_NUM                       => ExplanationOfBenefit.extension\n+    // CLM_CLNCL_TRIL_NUM             => ExplanationOfBenefit.extension\n+    // CARR_CLM_CASH_DDCTBL_APLD_AMT  => ExplanationOfBenefit.benefitBalance.financial\n+    // CARR_CLM_PMT_DNL_CD            => ExplanationOfBenefit.extension\n+    // RFR_PHYSN_NPI                  => ExplanationOfBenefit.referral.identifier\n+    //                                => ExplanationOfBenefit.careteam.provider\n+    // RFR_PHYSN_UPIN                 => ExplanationOfBenefit.referral.identifier\n+    //                                => ExplanationOfBenefit.careteam.provider\n+    // CARR_CLM_PRVDR_ASGNMT_IND_SW   => ExplanationOfBenefit.extension\n+    // NCH_CLM_PRVDR_PMT_AMT          => ExplanationOfBenefit.benefitBalance.financial\n+    // NCH_CLM_BENE_PMT_AMT           => ExplanationOfBenefit.benefitBalance.financial\n+    // NCH_CARR_CLM_SBMTD_CHRG_AMT    => ExplanationOfBenefit.benefitBalance.financial\n+    // NCH_CARR_CLM_ALOWD_AMT         => ExplanationOfBenefit.benefitBalance.financial\n+    // CLM_DISP_CD                    => ExplanationOfBenefit.disposition\n+    // CARR_CLM_CNTL_NUM              => ExplanationOfBenefit.extension\n+    TransformerUtilsV2.mapEobCommonGroupCarrierDME(\n+        eob,\n+        claimGroup.getBeneficiaryId(),\n+        claimGroup.getCarrierNumber(),\n+        claimGroup.getClinicalTrialNumber(),\n+        claimGroup.getBeneficiaryPartBDeductAmount(),\n+        claimGroup.getPaymentDenialCode(),\n+        claimGroup.getReferringPhysicianNpi(),\n+        claimGroup.getReferringPhysicianUpin(),\n+        Optional.of(claimGroup.getProviderAssignmentIndicator()),\n+        claimGroup.getProviderPaymentAmount(),\n+        claimGroup.getBeneficiaryPaymentAmount(),\n+        claimGroup.getSubmittedChargeAmount(),\n+        claimGroup.getAllowedChargeAmount(),\n+        claimGroup.getClaimDispositionCode(),\n+        claimGroup.getClaimCarrierControlNumber());\n+\n+    // PRNCPAL_DGNS_CD          => diagnosis.diagnosisCodeableConcept\n+    // PRNCPAL_DGNS_VRSN_CD     => diagnosis.diagnosisCodeableConcept\n+    // ICD_DGNS_CD(1-12)        => diagnosis.diagnosisCodeableConcept\n+    // ICD_DGNS_VRSN_CD(1-12)   => diagnosis.diagnosisCodeableConcept\n+    for (Diagnosis diagnosis : TransformerUtilsV2.extractDiagnoses(claimGroup)) {\n+      TransformerUtilsV2.addDiagnosisCode(eob, diagnosis);\n+    }\n+\n+    // CARR_CLM_ENTRY_CD => ExplanationOfBenefit.extension\n+    eob.addExtension(\n+        TransformerUtilsV2.createExtensionCoding(\n+            eob, CcwCodebookVariable.CARR_CLM_ENTRY_CD, claimGroup.getClaimEntryCode()));\n+\n+    handleClaimLines(claimGroup, eob);\n+    TransformerUtilsV2.setLastUpdated(eob, claimGroup.getLastUpdated());\n+    return eob;\n+  }\n+\n+  private static void handleClaimLines(DMEClaim claimGroup, ExplanationOfBenefit eob) {\n+    for (DMEClaimLine line : claimGroup.getLines()) {\n+      ItemComponent item = TransformerUtilsV2.addItem(eob);\n+\n+      // Override the default sequence\n+      // CLM_LINE_NUM => item.sequence\n+      item.setSequence(line.getLineNumber().intValue());\n+\n+      // add an extension for the provider billing number as there is not a good place\n+      // to map this in the existing FHIR specification\n+      // PRVDR_NUM => ExplanationOfBenefit.provider.value\n+      line.getProviderBillingNumber()\n+          .ifPresent(\n+              c ->\n+                  item.addExtension(\n+                      TransformerUtilsV2.createExtensionIdentifier(\n+                          CcwCodebookVariable.SUPLRNUM, line.getProviderBillingNumber())));\n+\n+      // PRVDR_NPI => ExplanationOfBenefit.careTeam.provider\n+      Optional<CareTeamComponent> performing =\n+          TransformerUtilsV2.addCareTeamMember(\n+              eob,\n+              item,\n+              C4BBPractitionerIdentifierType.NPI,\n+              C4BBClaimProfessionalAndNonClinicianCareTeamRole.PERFORMING,\n+              line.getProviderNPI());\n+\n+      // Update the responsible flag\n+      performing.ifPresent(\n+          p -> {\n+            p.setResponsible(true);\n+\n+            // PRVDR_SPCLTY => ExplanationOfBenefit.careTeam.qualification\n+            p.setQualification(\n+                TransformerUtilsV2.createCodeableConcept(\n+                    eob, CcwCodebookVariable.PRVDR_SPCLTY, line.getProviderSpecialityCode()));\n+\n+            // PRTCPTNG_IND_CD => ExplanationOfBenefit.careTeam.extension\n+            p.addExtension(\n+                TransformerUtilsV2.createExtensionCoding(\n+                    eob,\n+                    CcwCodebookVariable.PRTCPTNG_IND_CD,\n+                    line.getProviderParticipatingIndCode()));\n+          });\n+\n+      // PRVDR_STATE_CD => ExplanationOfBenefit.item.location.extension\n+      if (item.getLocation() != null) {\n+        item.getLocation()\n+            .addExtension(\n+                TransformerUtilsV2.createExtensionCoding(\n+                    eob, CcwCodebookVariable.PRVDR_STATE_CD, line.getProviderStateCode()));\n+      }\n+\n+      // HCPCS_CD            => ExplanationOfBenefit.item.productOrService\n+      // HCPCS_1ST_MDFR_CD   => ExplanationOfBenefit.item.modifier\n+      // HCPCS_2ND_MDFR_CD   => ExplanationOfBenefit.item.modifier\n+      // HCPCS_3RD_MDFR_CD   => ExplanationOfBenefit.item.modifier\n+      // HCPCS_4Th_MDFR_CD   => ExplanationOfBenefit.item.modifier\n+      TransformerUtilsV2.mapHcpcs(\n+          eob,\n+          item,\n+          line.getHcpcsCode(),\n+          claimGroup.getHcpcsYearCode(),\n+          Arrays.asList(\n+              line.getHcpcsInitialModifierCode(),\n+              line.getHcpcsSecondModifierCode(),\n+              line.getHcpcsThirdModifierCode(),\n+              line.getHcpcsFourthModifierCode()));\n+\n+      // REV_CNTR_PRVDR_PMT_AMT => ExplanationOfBenefit.item.adjudication\n+      TransformerUtilsV2.addAdjudication(\n+          item,\n+          TransformerUtilsV2.createAdjudicationAmtSlice(\n+              CcwCodebookVariable.REV_CNTR_PRVDR_PMT_AMT,\n+              C4BBAdjudication.PAID_TO_PROVIDER,\n+              line.getProviderPaymentAmount()));\n+\n+      // TODO - check w/jack if this is right ELIGIBLE\n+      // LINE_PRMRY_ALOWD_CHRG_AMT => ExplanationOfBenefit.item.adjudication.value\n+      TransformerUtilsV2.addAdjudication(\n+          item,\n+          TransformerUtilsV2.createAdjudicationAmtSlice(\n+              CcwCodebookVariable.LINE_PRMRY_ALOWD_CHRG_AMT,\n+              C4BBAdjudication.ELIGIBLE,\n+              line.getPrimaryPayerAllowedChargeAmount()));\n+\n+      // LINE_DME_PRCHS_PRICE_AMT => ExplanationOfBenefit.item.adjudication.value\n+      TransformerUtilsV2.addAdjudication(\n+          item,\n+          TransformerUtilsV2.createAdjudicationAmtSlice(\n+              CcwCodebookVariable.LINE_DME_PRCHS_PRICE_AMT,\n+              C4BBAdjudication.SUBMITTED,\n+              line.getPurchasePriceAmount()));\n+\n+      // DMERC_LINE_SCRN_SVGS_AMT => ExplanationOfBenefit.item.extension\n+      line.getScreenSavingsAmount()\n+          .ifPresent(\n+              c ->\n+                  item.addExtension(\n+                      // TODO should this be an adjudication?\n+                      TransformerUtilsV2.createExtensionQuantity(\n+                          CcwCodebookVariable.DMERC_LINE_SCRN_SVGS_AMT,\n+                          line.getScreenSavingsAmount())));\n+\n+      // DMERC_LINE_MTUS_CNT => ExplanationOfBenefit.item.extension\n+      Extension mtusQuantityExtension =\n+          TransformerUtilsV2.createExtensionQuantity(\n+              CcwCodebookVariable.DMERC_LINE_MTUS_CNT, line.getMtusCount());\n+\n+      item.addExtension(mtusQuantityExtension);\n+\n+      // DMERC_LINE_MTUS_CD => ExplanationOfBenefit.item.extension\n+      if (line.getMtusCode().isPresent()) {\n+        Quantity mtusQuantity = (Quantity) mtusQuantityExtension.getValue();\n+        TransformerUtilsV2.setQuantityUnitInfo(\n+            CcwCodebookVariable.DMERC_LINE_MTUS_CD, line.getMtusCode(), eob, mtusQuantity);\n+      }\n+\n+      // DMERC_LINE_PRCNG_STATE_CD => ExplanationOfBenefit.item.extension\n+      line.getPricingStateCode()\n+          .ifPresent(\n+              c ->\n+                  item.addExtension(\n+                      TransformerUtilsV2.createExtensionCoding(\n+                          eob,\n+                          CcwCodebookVariable.DMERC_LINE_PRCNG_STATE_CD,\n+                          line.getPricingStateCode())));\n+\n+      // DMERC_LINE_SUPPLR_TYPE_CD => ExplanationOfBenefit.item.extension\n+      line.getSupplierTypeCode()\n+          .ifPresent(\n+              c ->\n+                  item.addExtension(\n+                      TransformerUtilsV2.createExtensionCoding(\n+                          eob,\n+                          CcwCodebookVariable.DMERC_LINE_SUPPLR_TYPE_CD,\n+                          line.getSupplierTypeCode())));\n+\n+      // Common item level fields between Carrier and DME\n+      // LINE_NUM                 => ExplanationOfBenefit.item.sequence\n+      // LINE_SRVC_CNT            => ExplanationOfBenefit.item.quantity\n+      // LINE_CMS_TYPE_SRVC_CD    => ExplanationOfBenefit.item.category\n+      // LINE_PLACE_OF_SRVC_CD    => ExplanationOfBenefit.item.location\n+      // LINE_1ST_EXPNS_DT        => ExplanationOfBenefit.item.servicedPeriod\n+      // LINE_LAST_EXPNS_DT       => ExplanationOfBenefit.item.servicedPeriod\n+      // LINE_NCH_PMT_AMT         => ExplanationOfBenefit.item.adjudication\n+      // LINE_PMT_80_100_CD       => ExplanationOfBenefit.item.adjudication.extension\n+      // PAID_TO_PATIENT          => ExplanationOfBenefit.item.adjudication\n+      // LINE_PRVDR_PMT_AMT       => ExplanationOfBenefit.item.adjudication\n+      // LINE_BENE_PTB_DDCTBL_AMT => ExplanationOfBenefit.item.adjudication\n+      // LINE_BENE_PRMRY_PYR_CD   => ExplanationOfBenefit.item.extension\n+      // LINE_BENE_PRMRY_PYR_PD_AMT => ExplanationOfBenefit.item.adjudication\n+      // BETOS_CD                 => ExplanationOfBenefit.item.extension\n+      // LINE_COINSRNC_AMT        => ExplanationOfBenefit.item.adjudication\n+      // LINE_SBMTD_CHRG_AMT      => ExplanationOfBenefit.item.adjudication\n+      // LINE_ALOWD_CHRG_AMT      => ExplanationOfBenefit.item.adjudication\n+      // LINE_BENE_PRMRY_PYR_CD   => ExplanationOfBenefit.item.extension\n+      // LINE_SERVICE_DEDUCTIBLE  => ExplanationOfBenefit.item.extension\n+      // LINE_ICD_DGNS_CD         => ExplanationOfBenefit.item.diagnosisSequence\n+      // LINE_ICD_DGNS_VRSN_CD    => ExplanationOfBenefit.item.diagnosisSequence\n+      // LINE_HCT_HGB_TYPE_CD     => Observation.code\n+      // LINE_HCT_HGB_RSLT_NUM    => Observation.value\n+      // LINE_NDC_CD              => ExplanationOfBenefit.item.productOrService\n+      // LINE_BENE_PMT_AMT        => ExplanationOfBenefit.item.adjudication.value\n+      // LINE_PRCSG_IND_CD        => ExplanationOfBenefit.item.extension\n+      // LINE_DME_PRCHS_PRICE_AMT => ExplanationOfBenefit.item.adjudication.value\n+\n+      TransformerUtilsV2.mapEobCommonItemCarrierDME(\n+          item,\n+          eob,\n+          claimGroup.getClaimId(),\n+          item.getSequence(),\n+          line.getServiceCount(),\n+          line.getPlaceOfServiceCode(),\n+          line.getFirstExpenseDate(),\n+          line.getLastExpenseDate(),\n+          line.getBeneficiaryPaymentAmount(),\n+          line.getProviderPaymentAmount(),\n+          line.getBeneficiaryPartBDeductAmount(),\n+          line.getPrimaryPayerCode(),\n+          line.getPrimaryPayerPaidAmount(),\n+          line.getBetosCode(),\n+          line.getPaymentAmount(),\n+          line.getPaymentCode(),\n+          line.getCoinsuranceAmount(),\n+          line.getSubmittedChargeAmount(),\n+          line.getAllowedChargeAmount(),\n+          line.getProcessingIndicatorCode(),\n+          line.getServiceDeductibleCode(),\n+          line.getDiagnosisCode(),\n+          line.getDiagnosisCodeVersion(),\n+          line.getHctHgbTestTypeCode(),\n+          line.getHctHgbTestResult(),\n+          line.getCmsServiceTypeCode(),\n+          line.getNationalDrugCode());\n+\n+      // PRVDR_STATE_CD => ExplanationOfBenefit.item.location.extension\n+      if (line.getProviderStateCode() != null) {\n+        item.getLocation()\n+            .addExtension(\n+                TransformerUtilsV2.createExtensionCoding(\n+                    eob, CcwCodebookVariable.PRVDR_STATE_CD, line.getProviderStateCode()));\n+      }\n+\n+      // LINE_BENE_PRMRY_PYR_CD\n+      // claimLine.getPrimaryPayerCode()) => ExplanationOfBenefit.item.extension\n+      line.getPrimaryPayerCode()\n+          .ifPresent(\n+              c ->\n+                  item.addExtension(\n+                      TransformerUtilsV2.createExtensionCoding(\n+                          eob,\n+                          CcwCodebookVariable.LINE_BENE_PRMRY_PYR_CD,\n+                          line.getPrimaryPayerCode())));\n+\n+      // LINE_BENE_PMT_AMT\n+      // claimLine.getBeneficiaryPaymentAmount() => ExplanationOfBenefit.item.adjudication.value\n+      TransformerUtilsV2.addAdjudication(\n+          item,\n+          TransformerUtilsV2.createAdjudicationAmtSlice(\n+              CcwCodebookVariable.LINE_BENE_PMT_AMT,\n+              C4BBAdjudication.PAID_TO_PROVIDER,\n+              line.getPurchasePriceAmount()));\n+\n+      // LINE_DME_PRCHS_PRICE_AMT\n+      // claimLine.getPurchasePriceAmount() => ExplanationOfBenefit.item.adjudication.value\n+      TransformerUtilsV2.addAdjudication(\n+          item,\n+          TransformerUtilsV2.createAdjudicationAmtSlice(\n+              CcwCodebookVariable.LINE_DME_PRCHS_PRICE_AMT,\n+              C4BBAdjudication.SUBMITTED,\n+              line.getPurchasePriceAmount()));\n+    }\n+  }\n+\n+  /**\n+   * Sets the Coverage.relationship Looks up or adds a contained {@link Identifier} object to the\n+   * current {@link Patient}. This is used to store Identifier slices related to the Provider\n+   * organization.\n+   *\n+   * @param eob The {@link ExplanationOfBenefit} to ExplanationOfBenefit details\n+   * @param ccwVariable The {@link CcwCodebookVariable} variable associated with the\n+   *     ExplanationOfBenefit\n+   * @param optVal The {@link String} value associated with the ExplanationOfBenefit\n+   */\n+  static void addExtension(\n+      ExplanationOfBenefit eob, CcwCodebookVariable ccwVariable, Optional<String> optVal) {\n+    optVal.ifPresent(\n+        value ->\n+            eob.addExtension(TransformerUtilsV2.createExtensionCoding(eob, ccwVariable, value)));\n+  }\n+\n+  /**\n+   * Sets the ExplanationOfBenefit.relationship Looks up or adds a contained {@link Identifier}\n+   * object to the current {@link Patient}. This is used to store Identifier slices related to the\n+   * Provider organization.\n+   *\n+   * @param eob The {@link ExplanationOfBenefit} to ExplanationOfBenefit details\n+   * @param ccwVariable The {@link CcwCodebookVariable} variable associated with the\n+   *     ExplanationOfBenefit\n+   * @param optVal The {@link Character} value associated with the ExplanationOfBenefit\n+   */\n+  static void addCodeExtension(\n+      ExplanationOfBenefit eob, CcwCodebookVariable ccwVariable, Optional<Character> optVal) {\n+    optVal.ifPresent(\n+        value ->\n+            eob.addExtension(TransformerUtilsV2.createExtensionCoding(eob, ccwVariable, value)));\n+  }\n+\n+  /**\n+   * Sets the Coverage.relationship Looks up or adds a contained {@link Identifier} object to the\n+   * current {@link Patient}. This is used to store Identifier slices related to the Provider\n+   * organization.\n+   *\n+   * @param eob The {@link ExplanationOfBenefit} to ExplanationOfBenefit details\n+   * @param ccwVariable The {@link CcwCodebookVariable} variable associated with the\n+   *     ExplanationOfBenefit\n+   * @param optVal The {@link BigDecimal} value associated with the ExplanationOfBenefit\n+   */\n+  static void addDecimalExtension(\n+      ExplanationOfBenefit eob, CcwCodebookVariable ccwVariable, Optional<BigDecimal> optVal) {\n+    eob.addExtension(TransformerUtilsV2.createExtensionDate(ccwVariable, optVal));\n+  }\n+}"
  },
  {
    "sha": "491fde386a674c38f4d4ba37c0aea9ae3bac03f0",
    "filename": "apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/TransformerUtilsV2.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/TransformerUtilsV2.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/TransformerUtilsV2.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/main/java/gov/cms/bfd/server/war/r4/providers/TransformerUtilsV2.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -2158,6 +2158,7 @@ static void mapEobType(\n       case OUTPATIENT:\n       case HOSPICE:\n       case SNF:\n+      case DME:\n         fhirClaimType = org.hl7.fhir.r4.model.codesystems.ClaimType.INSTITUTIONAL;\n         break;\n "
  },
  {
    "sha": "b9a97a5448d1f1312b93ae63c9f1901b297aeb8b",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/BeneficiaryTransformerV2Test.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/BeneficiaryTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/BeneficiaryTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/BeneficiaryTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -163,7 +163,7 @@ public void transformSampleARecord() {\n     Patient patient =\n         BeneficiaryTransformerV2.transform(new MetricRegistry(), beneficiary, requestHeader);\n \n-    System.out.println(fhirContext.newJsonParser().encodeResourceToString(patient));\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(patient));\n     assertThat(patient.getIdentifier(), not(IsEmptyCollection.empty()));\n   }\n "
  },
  {
    "sha": "496c4ee767360f0d496a75d9029d556a9a39516c",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/CarrierClaimTransformerV2Test.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/CarrierClaimTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/CarrierClaimTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/CarrierClaimTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -70,6 +70,6 @@ static void assertMatches(CarrierClaim claim, ExplanationOfBenefit eob) throws F\n \n     // TODO: finish tests based off V1\n \n-    System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n   }\n }"
  },
  {
    "sha": "568a0e628d12d0bb57c0f5c33c180b00937032c1",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2Test.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/ClaimTypeV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -2,6 +2,7 @@\n \n import com.google.common.collect.ImmutableMap;\n import gov.cms.bfd.model.rif.CarrierClaim;\n+import gov.cms.bfd.model.rif.DMEClaim;\n import gov.cms.bfd.model.rif.HospiceClaim;\n import gov.cms.bfd.model.rif.InpatientClaim;\n import gov.cms.bfd.model.rif.OutpatientClaim;\n@@ -27,6 +28,10 @@ public void verifyServiceEndAttributeFunc() {\n     carrierClaim.setDateFrom(start);\n     carrierClaim.setDateThrough(end);\n \n+    DMEClaim dmeClaim = new DMEClaim();\n+    dmeClaim.setDateFrom(start);\n+    dmeClaim.setDateThrough(end);\n+\n     HospiceClaim hospiceClaim = new HospiceClaim();\n     hospiceClaim.setDateFrom(start);\n     hospiceClaim.setDateThrough(end);\n@@ -48,6 +53,7 @@ public void verifyServiceEndAttributeFunc() {\n \n     ImmutableMap.Builder<ClaimTypeV2, Object> builder = ImmutableMap.builder();\n     builder.put(ClaimTypeV2.CARRIER, carrierClaim);\n+    builder.put(ClaimTypeV2.DME, dmeClaim);\n     builder.put(ClaimTypeV2.PDE, partDEvent);\n     builder.put(ClaimTypeV2.INPATIENT, inpatientClaim);\n     builder.put(ClaimTypeV2.OUTPATIENT, outpatientClaim);"
  },
  {
    "sha": "212c5cf3b90d3c745e2fc1630a5880fa367c12b4",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2Test.java",
    "status": "added",
    "additions": 222,
    "deletions": 0,
    "changes": 222,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/DMEClaimTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -0,0 +1,222 @@\n+package gov.cms.bfd.server.war.r4.providers;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.MetricRegistry;\n+import gov.cms.bfd.model.rif.DMEClaim;\n+import gov.cms.bfd.model.rif.samples.StaticRifResource;\n+import gov.cms.bfd.model.rif.samples.StaticRifResourceGroup;\n+import gov.cms.bfd.server.war.ServerTestUtils;\n+import gov.cms.bfd.server.war.commons.MedicareSegment;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link gov.cms.bfd.server.war.v4.providers.DMEClaimTransformerV2}. */\n+public final class DMEClaimTransformerV2Test {\n+\n+  private static final FhirContext fhirContext = FhirContext.forR4();\n+\n+  /**\n+   * Verifies that {@link\n+   * gov.cms.bfd.server.war.stu3.providers.DMEClaimTransformerV2#transform(Object)} works as\n+   * expected when run against the {@link StaticRifResource#SAMPLE_A_DME} {@link DMEClaim}.\n+   *\n+   * @throws FHIRException (indicates test failure)\n+   */\n+  @Test\n+  public void transformSampleARecord() throws FHIRException {\n+    List<Object> parsedRecords =\n+        ServerTestUtils.parseData(Arrays.asList(StaticRifResourceGroup.SAMPLE_A.getResources()));\n+\n+    // Pull out the base Beneficiary record and fix its HICN and MBI-HASH fields.\n+    DMEClaim claim =\n+        parsedRecords.stream()\n+            .filter(r -> r instanceof DMEClaim)\n+            .map(r -> (DMEClaim) r)\n+            .findFirst()\n+            .get();\n+\n+    ExplanationOfBenefit eob = DMEClaimTransformerV2.transform(new MetricRegistry(), claim);\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n+    assertMatches(claim, eob);\n+  }\n+\n+  /**\n+   * Verifies that the {@link ExplanationOfBenefit} \"looks like\" it should, if it were produced from\n+   * the specified {@link DMEClaim}.\n+   *\n+   * @param claim the {@link DMEClaim} that the {@link ExplanationOfBenefit} was generated from\n+   * @param eob the {@link ExplanationOfBenefit} that was generated from the specified {@link\n+   *     DMEClaim}\n+   * @throws FHIRException (indicates test failure)\n+   */\n+  static void assertMatches(DMEClaim claim, ExplanationOfBenefit eob) throws FHIRException {\n+    // Test to ensure group level fields between all claim types match\n+\n+    TransformerTestUtilsV2.assertEobCommonClaimHeaderData(\n+        eob,\n+        claim.getClaimId(),\n+        claim.getBeneficiaryId(),\n+        ClaimTypeV2.DME,\n+        claim.getClaimGroupId().toPlainString(),\n+        MedicareSegment.PART_A,\n+        Optional.of(claim.getDateFrom()),\n+        Optional.of(claim.getDateThrough()),\n+        Optional.of(claim.getPaymentAmount()),\n+        claim.getFinalAction());\n+\n+    // TODO - fix the following tests for V2\n+    /*\n+\n+    // Test to ensure common group fields between Carrier and DME match\n+    TransformerTestUtilsV2.assertEobCommonGroupCarrierDMEEquals(\n+        eob,\n+        claim.getBeneficiaryId(),\n+        claim.getCarrierNumber(),\n+        claim.getClinicalTrialNumber(),\n+        claim.getBeneficiaryPartBDeductAmount(),\n+        claim.getPaymentDenialCode(),\n+        claim.getReferringPhysicianNpi(),\n+        Optional.of(claim.getProviderAssignmentIndicator()),\n+        claim.getProviderPaymentAmount(),\n+        claim.getBeneficiaryPaymentAmount(),\n+        claim.getSubmittedChargeAmount(),\n+        claim.getAllowedChargeAmount());\n+\n+    TransformerTestUtilsV2.assertAdjudicationTotalAmountEquals(\n+        CcwCodebookVariable.PRPAYAMT, claim.getPrimaryPayerPaidAmount(), eob);\n+\n+    // Assert.assertEquals(1, eob.getItem().size());\n+    // ItemComponent eobItem0 = eob.getItem().get(0);\n+    // DMEClaimLine claimLine1 = claim.getLines().get(0);\n+    // Assert.assertEquals(claimLine1.getLineNumber(), new BigDecimal(eobItem0.getSequence()));\n+\n+    TransformerTestUtilsV2.assertExtensionIdentifierEquals(\n+        CcwCodebookVariable.SUPLRNUM, claimLine1.getProviderBillingNumber(), eobItem0);\n+\n+    // TransformerTestUtilsV2.assertCareTeamEquals(\n+    //    claimLine1.getProviderNPI().get(), ClaimCareteamrole.PRIMARY, eob);\n+\n+    CareTeamComponent performingCareTeamEntry =\n+        TransformerTestUtilsV2.findCareTeamEntryForProviderIdentifier(\n+            claimLine1.getProviderNPI().get(), eob.getCareTeam());\n+    TransformerTestUtilsV2.assertHasCoding(\n+        CcwCodebookVariable.PRVDR_SPCLTY,\n+        claimLine1.getProviderSpecialityCode(),\n+        performingCareTeamEntry.getQualification());\n+    TransformerTestUtilsV2.assertExtensionCodingEquals(\n+        CcwCodebookVariable.PRTCPTNG_IND_CD,\n+        claimLine1.getProviderParticipatingIndCode(),\n+        performingCareTeamEntry);\n+\n+    TransformerTestUtilsV2.assertExtensionCodingEquals(\n+        CcwCodebookVariable.PRVDR_STATE_CD,\n+        claimLine1.getProviderStateCode(),\n+        eobItem0.getLocation());\n+\n+    TransformerTestUtilsV2.assertHcpcsCodes(\n+        eobItem0,\n+        claimLine1.getHcpcsCode(),\n+        claimLine1.getHcpcsInitialModifierCode(),\n+        claimLine1.getHcpcsSecondModifierCode(),\n+        claim.getHcpcsYearCode(),\n+        0);     // TODO - replace w/index as needed\n+\n+        TransformerTestUtilsV2.assertHasCoding(\n+            TransformerConstants.CODING_SYSTEM_HCPCS,\n+            \"\" + claim.getHcpcsYearCode().get(),\n+            null,\n+            claimLine1.getHcpcsCode().get(),\n+            eobItem0.getService().getCoding());\n+\n+        TransformerTestUtilsV2.assertAdjudicationAmountEquals(\n+            CcwCodebookVariable.LINE_PRMRY_ALOWD_CHRG_AMT,\n+            claimLine1.getPrimaryPayerAllowedChargeAmount(),\n+            eobItem0.getAdjudication());\n+\n+        TransformerTestUtilsV2.assertAdjudicationAmountEquals(\n+            CcwCodebookVariable.LINE_DME_PRCHS_PRICE_AMT,\n+            claimLine1.getPurchasePriceAmount(),\n+            eobItem0.getAdjudication());\n+\n+        TransformerTestUtilsV2.assertExtensionCodingEquals(\n+            CcwCodebookVariable.DMERC_LINE_PRCNG_STATE_CD,\n+            claimLine1.getPricingStateCode(),\n+            eobItem0.getLocation());\n+\n+        TransformerTestUtilsV2.assertExtensionCodingEquals(\n+            CcwCodebookVariable.DMERC_LINE_SUPPLR_TYPE_CD,\n+            claimLine1.getSupplierTypeCode(),\n+            eobItem0.getLocation());\n+\n+        TransformerTestUtilsV2.assertExtensionQuantityEquals(\n+            CcwCodebookVariable.DMERC_LINE_SCRN_SVGS_AMT,\n+            claimLine1.getScreenSavingsAmount(),\n+            eobItem0);\n+\n+        TransformerTestUtilsV2.assertQuantityUnitInfoEquals(\n+            CcwCodebookVariable.DMERC_LINE_MTUS_CNT,\n+            CcwCodebookVariable.DMERC_LINE_MTUS_CD,\n+            claimLine1.getMtusCode(),\n+            eobItem0);\n+\n+        TransformerTestUtilsV2.assertExtensionQuantityEquals(\n+            CcwCodebookVariable.DMERC_LINE_MTUS_CNT, claimLine1.getMtusCount(), eobItem0);\n+\n+        TransformerTestUtilsV2.assertExtensionCodingEquals(\n+            eobItem0,\n+            TransformerConstants.CODING_NDC,\n+            TransformerConstants.CODING_NDC,\n+            claimLine1.getNationalDrugCode().get());\n+\n+        // verify {@link\n+        // TransformerUtils#mapEobType(CodeableConcept,ClaimType,Optional,Optional)}\n+        // method worked as expected for this claim type\n+        TransformerTestUtilsV2.assertMapEobType(\n+            eob.getType(),\n+            ClaimType.DME,\n+            // FUTURE there currently is not an equivalent CODING_FHIR_CLAIM_TYPE mapping\n+            // for this claim type. If added then the Optional empty parameter below should\n+            // be updated to match expected result.\n+            Optional.empty(),\n+            Optional.of(claim.getNearLineRecordIdCode()),\n+            Optional.of(claim.getClaimTypeCode()));\n+\n+    // Test to ensure common item fields between Carrier and DME match\n+    TransformerTestUtilsV2.assertEobCommonItemCarrierDMEEquals(\n+        eobItem0,\n+        eob,\n+        claimLine1.getServiceCount(),\n+        claimLine1.getPlaceOfServiceCode(),\n+        claimLine1.getFirstExpenseDate(),\n+        claimLine1.getLastExpenseDate(),\n+        claimLine1.getBeneficiaryPaymentAmount(),\n+        claimLine1.getProviderPaymentAmount(),\n+        claimLine1.getBeneficiaryPartBDeductAmount(),\n+        claimLine1.getPrimaryPayerCode(),\n+        claimLine1.getPrimaryPayerPaidAmount(),\n+        claimLine1.getBetosCode(),\n+        claimLine1.getPaymentAmount(),\n+        claimLine1.getPaymentCode(),\n+        claimLine1.getCoinsuranceAmount(),\n+        claimLine1.getSubmittedChargeAmount(),\n+        claimLine1.getAllowedChargeAmount(),\n+        claimLine1.getProcessingIndicatorCode(),\n+        claimLine1.getServiceDeductibleCode(),\n+        claimLine1.getDiagnosisCode(),\n+        claimLine1.getDiagnosisCodeVersion(),\n+        claimLine1.getHctHgbTestTypeCode(),\n+        claimLine1.getHctHgbTestResult(),\n+        claimLine1.getCmsServiceTypeCode(),\n+        claimLine1.getNationalDrugCode());\n+    */\n+\n+    // Test lastUpdated\n+    TransformerTestUtilsV2.assertLastUpdatedEquals(claim.getLastUpdated(), eob);\n+  }\n+}"
  },
  {
    "sha": "8767441ec11ceb524a95de7c4538dbc5e50874cb",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/HospiceClaimTransformerV2Test.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/HospiceClaimTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/HospiceClaimTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/HospiceClaimTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -70,6 +70,6 @@ static void assertMatches(HospiceClaim claim, ExplanationOfBenefit eob) throws F\n \n     // TODO: finish tests based off V1\n \n-    System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n   }\n }"
  },
  {
    "sha": "ea71bcbb9b0b957259f8e50172aacd9a76f6c66d",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/InpatientClaimTransformerV2Test.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/InpatientClaimTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/InpatientClaimTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/InpatientClaimTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -87,6 +87,6 @@ static void assertMatches(InpatientClaim claim, ExplanationOfBenefit eob) throws\n     // Test that the expected number of diagnoses are mapped\n     Assert.assertEquals(9, eob.getDiagnosis().size());\n \n-    System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n   }\n }"
  },
  {
    "sha": "c532f9163c99c4df1a74f1e43a55c2da49c8e507",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/OutpatientClaimTransformerV2Test.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/OutpatientClaimTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/OutpatientClaimTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/OutpatientClaimTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -74,6 +74,6 @@ static void assertMatches(OutpatientClaim claim, ExplanationOfBenefit eob) throw\n     // TODO: Double check the assumed value\n     Assert.assertEquals(5, eob.getDiagnosis().size());\n \n-    System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n   }\n }"
  },
  {
    "sha": "23bf4e6cec1bf1df46cfff8da9dff5e2dcbe70c3",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/PartDEventTransformerV2Test.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/PartDEventTransformerV2Test.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/PartDEventTransformerV2Test.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/PartDEventTransformerV2Test.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -82,6 +82,6 @@ static void assertMatches(PartDEvent claim, ExplanationOfBenefit eob) throws FHI\n \n     // TODO: finish tests based off V1\n \n-    System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n+    // System.out.println(fhirContext.newJsonParser().encodeResourceToString(eob));\n   }\n }"
  },
  {
    "sha": "cb5b9e59a8ce5ebdc70e1ec78d6e8a0eda0066b0",
    "filename": "apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/TransformerTestUtilsV2.java",
    "status": "modified",
    "additions": 328,
    "deletions": 0,
    "changes": 328,
    "blob_url": "https://github.com/CMSgov/beneficiary-fhir-data/blob/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/TransformerTestUtilsV2.java",
    "raw_url": "https://github.com/CMSgov/beneficiary-fhir-data/raw/f6db77bd3fd9fd4b648bb9060be97b40734d200b/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/TransformerTestUtilsV2.java",
    "contents_url": "https://api.github.com/repos/CMSgov/beneficiary-fhir-data/contents/apps/bfd-server/bfd-server-war/src/test/java/gov/cms/bfd/server/war/r4/providers/TransformerTestUtilsV2.java?ref=f6db77bd3fd9fd4b648bb9060be97b40734d200b",
    "patch": "@@ -6,6 +6,7 @@\n import gov.cms.bfd.model.codebook.model.CcwCodebookInterface;\n import gov.cms.bfd.server.war.commons.MedicareSegment;\n import gov.cms.bfd.server.war.commons.TransformerConstants;\n+import gov.cms.bfd.server.war.commons.carin.C4BBClaimProfessionalAndNonClinicianCareTeamRole;\n import gov.cms.bfd.sharedutils.exceptions.BadCodeMonkeyException;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n@@ -18,13 +19,16 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n+import org.hl7.fhir.exceptions.FHIRException;\n import org.hl7.fhir.instance.model.api.IAnyResource;\n import org.hl7.fhir.instance.model.api.IBaseExtension;\n import org.hl7.fhir.instance.model.api.IBaseHasExtensions;\n import org.hl7.fhir.r4.model.BaseDateTimeType;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n import org.hl7.fhir.r4.model.ExplanationOfBenefit;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.CareTeamComponent;\n+import org.hl7.fhir.r4.model.ExplanationOfBenefit.ItemComponent;\n import org.hl7.fhir.r4.model.ExplanationOfBenefit.SupportingInformationComponent;\n import org.hl7.fhir.r4.model.Extension;\n import org.hl7.fhir.r4.model.Identifier;\n@@ -322,6 +326,78 @@ static void assertDateEquals(LocalDate expected, BaseDateTimeType actual) {\n     Assert.assertEquals(TemporalPrecisionEnum.DAY, actual.getPrecision());\n   }\n \n+  /**\n+   * @param expectedProviderNpi the {@link Identifier#getValue()} of the provider to find a matching\n+   *     {@link CareTeamComponent} for\n+   * @param careTeam the {@link List} of {@link CareTeamComponent}s to search\n+   * @return the {@link CareTeamComponent} whose {@link CareTeamComponent#getProvider()} is an\n+   *     {@link Identifier} with the specified provider NPI, or else <code>null</code> if no such\n+   *     {@link CareTeamComponent} was found\n+   */\n+  static CareTeamComponent findCareTeamEntryForProviderIdentifier(\n+      String expectedProviderNpi, List<CareTeamComponent> careTeam) {\n+    return findCareTeamEntryForProviderIdentifier(\n+        TransformerConstants.CODING_NPI_US, expectedProviderNpi, null, careTeam);\n+  }\n+\n+  /**\n+   * @param expectedIdentifierSystem the {@link Identifier#getSystem()} of the provider to find a\n+   *     matching {@link CareTeamComponent} for\n+   * @param expectedIdentifierValue the {@link Identifier#getValue()} of the provider to find a\n+   *     matching {@link CareTeamComponent} for\n+   * @param careTeam the {@link List} of {@link CareTeamComponent}s to search\n+   * @return the {@link CareTeamComponent} whose {@link CareTeamComponent#getProvider()} is an\n+   *     {@link Identifier} with the specified provider NPI, or else <code>null</code> if no such\n+   *     {@link CareTeamComponent} was found\n+   */\n+  private static CareTeamComponent findCareTeamEntryForProviderIdentifier(\n+      String expectedIdentifierSystem,\n+      String expectedIdentifierValue,\n+      C4BBClaimProfessionalAndNonClinicianCareTeamRole expectedRole,\n+      List<CareTeamComponent> careTeam) {\n+    Optional<CareTeamComponent> careTeamEntry =\n+        careTeam.stream()\n+            .filter(\n+                ctc ->\n+                    doesReferenceMatchIdentifier(\n+                        expectedIdentifierSystem, expectedIdentifierValue, ctc.getProvider()))\n+            .filter(ctc -> doesCareTeamComponentMatchRole(expectedRole, ctc))\n+            .findFirst();\n+    return careTeamEntry.orElse(null);\n+  }\n+\n+  /**\n+   * @param expectedIdentifierSystem the expected {@link Identifier#getSystem()} to match\n+   * @param expectedIdentifierValue the expected {@link Identifier#getValue()} to match\n+   * @param actualReference the {@link Reference} to check\n+   * @return <code>true</code> if the specified {@link Reference} matches the expected {@link\n+   *     Identifier}\n+   */\n+  private static boolean doesReferenceMatchIdentifier(\n+      String expectedIdentifierSystem, String expectedIdentifierValue, Reference actualReference) {\n+    if (!actualReference.hasIdentifier()) return false;\n+    return expectedIdentifierSystem.equals(actualReference.getIdentifier().getSystem())\n+        && expectedIdentifierValue.equals(actualReference.getIdentifier().getValue());\n+  }\n+\n+  /**\n+   * Does the role of the care team component match what is expected\n+   *\n+   * @param expectedRole expected role; maybe empty\n+   * @param actualComponent the Care Team Component to test\n+   * @return iff it matches or expected role is empty\n+   */\n+  private static boolean doesCareTeamComponentMatchRole(\n+      C4BBClaimProfessionalAndNonClinicianCareTeamRole expectedRole,\n+      CareTeamComponent actualComponent) {\n+    if (expectedRole == null) return true;\n+    if (!actualComponent.hasRole()) return false;\n+    final Coding actualRole = actualComponent.getRole().getCodingFirstRep();\n+    return actualRole.getCode().equals(expectedRole.toCode());\n+    // TODO - fix this\n+    // && actualRole.getSystem().equals(ClaimCareteamrole.NULL.getSystem());\n+  }\n+\n   /**\n    * @param categoryVariable the {@link CcwCodebookVariable} matching the {@link\n    *     SupportingInformationComponent#getCategory()} to find\n@@ -340,6 +416,191 @@ static void assertInfoWithCodeEquals(\n     assertHasCoding(codeSystemVariable, codeValue, info.getCode());\n   }\n \n+  /**\n+   * Tests that the hcpcs code and hcpcs modifier codes are set as expected in the item component.\n+   * The hcpcsCode field is common among these claim types: Carrier, Inpatient, Outpatient, DME,\n+   * Hospice, HHA and SNF. The modifier fields are common among these claim types: Carrier,\n+   * Outpatient, DME, Hospice and HHA.\n+   *\n+   * @param item the {@link ItemComponent} this method will test against\n+   * @param hcpcCode the {@link Optional}&lt;{@link String}&gt; HCPCS_CD: representing the hcpcs\n+   *     code for the claim\n+   * @param hcpcsInitialModifierCode the {@link Optional}&lt;{@link String}&gt; HCPCS_1ST_MDFR_CD:\n+   *     representing the expected hcpcs initial modifier code for the claim\n+   * @param hcpcsSecondModifierCode the {@link Optional}&lt;{@link String}&gt; HCPCS_2ND_MDFR_CD:\n+   *     representing the expected hcpcs second modifier code for the claim\n+   * @param hcpcsYearCode the {@link Optional}&lt;{@link Character}&gt; CARR_CLM_HCPCS_YR_CD:\n+   *     representing the hcpcs year code for the claim\n+   * @param index the {@link int} modifier index in the item containing the expected code\n+   */\n+  static void assertHcpcsCodes(\n+      ItemComponent item,\n+      Optional<String> hcpcsCode,\n+      Optional<String> hcpcsInitialModifierCode,\n+      Optional<String> hcpcsSecondModifierCode,\n+      Optional<Character> hcpcsYearCode,\n+      int index) {\n+    // TODO - fix this\n+    /*\n+    if (hcpcsYearCode.isPresent()) { // some claim types have a year code...\n+      assertHasCoding(\n+          TransformerConstants.CODING_SYSTEM_HCPCS,\n+          \"\" + hcpcsYearCode.get(),\n+          null,\n+          hcpcsInitialModifierCode.get(),\n+          item.getModifier().get(index).getCoding());\n+      assertHasCoding(\n+          TransformerConstants.CODING_SYSTEM_HCPCS,\n+          \"\" + hcpcsYearCode.get(),\n+          null,\n+          hcpcsCode.get(),\n+          item.getService().getCoding());\n+    } else { // while others do not...\n+      if (hcpcsInitialModifierCode.isPresent()) {\n+        assertHasCoding(\n+            TransformerConstants.CODING_SYSTEM_HCPCS,\n+            hcpcsInitialModifierCode.get(),\n+            item.getModifier().get(index).getCoding());\n+      }\n+      if (hcpcsCode.isPresent()) {\n+        assertHasCoding(\n+            TransformerConstants.CODING_SYSTEM_HCPCS,\n+            hcpcsCode.get(),\n+            item.getService().getCoding());\n+      }\n+    }\n+    */\n+\n+    Assert.assertFalse(hcpcsSecondModifierCode.isPresent());\n+  }\n+\n+  /**\n+   * Test the transformation of the item level data elements between the {@link CarrierClaimLine}\n+   * and {@link DMEClaimLine} claim types to FHIR. The method parameter fields from {@link\n+   * CarrierClaimLine} and {@link DMEClaimLine} are listed below and their corresponding RIF CCW\n+   * fields (denoted in all CAPS below from {@link CarrierClaimColumn} and {@link DMEClaimColumn}).\n+   *\n+   * @param item the {@ ItemComponent} to test\n+   * @param eob the {@ ExplanationOfBenefit} to test\n+   * @param serviceCount LINE_SRVC_CNT,\n+   * @param placeOfServiceCode LINE_PLACE_OF_SRVC_CD,\n+   * @param firstExpenseDate LINE_1ST_EXPNS_DT,\n+   * @param lastExpenseDate LINE_LAST_EXPNS_DT,\n+   * @param beneficiaryPaymentAmount LINE_BENE_PMT_AMT,\n+   * @param providerPaymentAmount LINE_PRVDR_PMT_AMT,\n+   * @param beneficiaryPartBDeductAmount LINE_BENE_PTB_DDCTBL_AMT,\n+   * @param primaryPayerCode LINE_BENE_PRMRY_PYR_CD,\n+   * @param primaryPayerPaidAmount LINE_BENE_PRMRY_PYR_PD_AMT,\n+   * @param betosCode BETOS_CD,\n+   * @param paymentAmount LINE_NCH_PMT_AMT,\n+   * @param paymentCode LINE_PMT_80_100_CD,\n+   * @param coinsuranceAmount LINE_COINSRNC_AMT,\n+   * @param submittedChargeAmount LINE_SBMTD_CHRG_AMT,\n+   * @param allowedChargeAmount LINE_ALOWD_CHRG_AMT,\n+   * @param processingIndicatorCode LINE_PRCSG_IND_CD,\n+   * @param serviceDeductibleCode LINE_SERVICE_DEDUCTIBLE,\n+   * @param diagnosisCode LINE_ICD_DGNS_CD,\n+   * @param diagnosisCodeVersion LINE_ICD_DGNS_VRSN_CD,\n+   * @param hctHgbTestTypeCode LINE_HCT_HGB_TYPE_CD\n+   * @param hctHgbTestResult LINE_HCT_HGB_RSLT_NUM,\n+   * @param cmsServiceTypeCode LINE_CMS_TYPE_SRVC_CD,\n+   * @param nationalDrugCode LINE_NDC_CD\n+   * @throws FHIRException\n+   */\n+  static void assertEobCommonItemCarrierDMEEquals(\n+      ItemComponent item,\n+      ExplanationOfBenefit eob,\n+      BigDecimal serviceCount,\n+      String placeOfServiceCode,\n+      Optional<LocalDate> firstExpenseDate,\n+      Optional<LocalDate> lastExpenseDate,\n+      BigDecimal beneficiaryPaymentAmount,\n+      BigDecimal providerPaymentAmount,\n+      BigDecimal beneficiaryPartBDeductAmount,\n+      Optional<Character> primaryPayerCode,\n+      BigDecimal primaryPayerPaidAmount,\n+      Optional<String> betosCode,\n+      BigDecimal paymentAmount,\n+      Optional<Character> paymentCode,\n+      BigDecimal coinsuranceAmount,\n+      BigDecimal submittedChargeAmount,\n+      BigDecimal allowedChargeAmount,\n+      Optional<String> processingIndicatorCode,\n+      Optional<Character> serviceDeductibleCode,\n+      Optional<String> diagnosisCode,\n+      Optional<Character> diagnosisCodeVersion,\n+      Optional<String> hctHgbTestTypeCode,\n+      BigDecimal hctHgbTestResult,\n+      char cmsServiceTypeCode,\n+      Optional<String> nationalDrugCode)\n+      throws FHIRException {\n+\n+    Assert.assertEquals(serviceCount, item.getQuantity().getValue());\n+\n+    assertHasCoding(\n+        CcwCodebookVariable.LINE_CMS_TYPE_SRVC_CD, cmsServiceTypeCode, item.getCategory());\n+    assertHasCoding(\n+        CcwCodebookVariable.LINE_PLACE_OF_SRVC_CD,\n+        placeOfServiceCode,\n+        item.getLocationCodeableConcept());\n+    assertExtensionCodingEquals(CcwCodebookVariable.BETOS_CD, betosCode, item);\n+    assertDateEquals(firstExpenseDate.get(), item.getServicedPeriod().getStartElement());\n+    assertDateEquals(lastExpenseDate.get(), item.getServicedPeriod().getEndElement());\n+\n+    // TODO - fix this\n+    /*\n+    AdjudicationComponent adjudicationForPayment =\n+        assertAdjudicationAmountEquals(\n+            CcwCodebookVariable.LINE_NCH_PMT_AMT, paymentAmount, item.getAdjudication());\n+    assertExtensionCodingEquals(\n+        CcwCodebookVariable.LINE_PMT_80_100_CD, paymentCode, adjudicationForPayment);\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_BENE_PMT_AMT, beneficiaryPaymentAmount, item.getAdjudication());\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_PRVDR_PMT_AMT, providerPaymentAmount, item.getAdjudication());\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_BENE_PTB_DDCTBL_AMT,\n+        beneficiaryPartBDeductAmount,\n+        item.getAdjudication());\n+    assertExtensionCodingEquals(CcwCodebookVariable.LINE_BENE_PRMRY_PYR_CD, primaryPayerCode, item);\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_BENE_PRMRY_PYR_PD_AMT,\n+        primaryPayerPaidAmount,\n+        item.getAdjudication());\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_COINSRNC_AMT, coinsuranceAmount, item.getAdjudication());\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_SBMTD_CHRG_AMT, submittedChargeAmount, item.getAdjudication());\n+    assertAdjudicationAmountEquals(\n+        CcwCodebookVariable.LINE_ALOWD_CHRG_AMT, allowedChargeAmount, item.getAdjudication());\n+    assertAdjudicationReasonEquals(\n+        CcwCodebookVariable.LINE_PRCSG_IND_CD, processingIndicatorCode, item.getAdjudication());\n+    assertExtensionCodingEquals(\n+        CcwCodebookVariable.LINE_SERVICE_DEDUCTIBLE, serviceDeductibleCode, item);\n+\n+    assertDiagnosisLinkPresent(Diagnosis.from(diagnosisCode, diagnosisCodeVersion), eob, item);\n+\n+    List<Extension> hctHgbObservationExtension =\n+        item.getExtensionsByUrl(\n+            TransformerUtils.calculateVariableReferenceUrl(\n+                CcwCodebookVariable.LINE_HCT_HGB_RSLT_NUM));\n+    Assert.assertEquals(1, hctHgbObservationExtension.size());\n+    Assert.assertTrue(hctHgbObservationExtension.get(0).getValue() instanceof Reference);\n+    Reference hctHgbReference = (Reference) hctHgbObservationExtension.get(0).getValue();\n+    Assert.assertTrue(hctHgbReference.getResource() instanceof Observation);\n+    Observation hctHgbObservation = (Observation) hctHgbReference.getResource();\n+    assertHasCoding(\n+        CcwCodebookVariable.LINE_HCT_HGB_TYPE_CD, hctHgbTestTypeCode, hctHgbObservation.getCode());\n+    Assert.assertEquals(hctHgbTestResult, hctHgbObservation.getValueQuantity().getValue());\n+\n+    assertExtensionCodingEquals(\n+        item,\n+        TransformerConstants.CODING_NDC,\n+        TransformerConstants.CODING_NDC,\n+        nationalDrugCode.get());\n+        */\n+  }\n+\n   /**\n    * @param categoryVariable the {@link CcwCodebookVariable} matching the {@link\n    *     SupportingInformationComponent#getCategory()} to find\n@@ -669,6 +930,73 @@ static void assertLastUpdatedEquals(\n   }\n \n   /**\n+   * Test the transformation of the common group level data elements between the {@link\n+   * CarrierClaim} and {@link DMEClaim} claim types to FHIR. The method parameter fields from {@link\n+   * CarrierClaim} and {@link DMEClaim} are listed below and their corresponding RIF CCW fields\n+   * (denoted in all CAPS below from {@link CarrierClaimColumn} and {@link DMEClaimColumn}).\n+   *\n+   * @param eob the {@link ExplanationOfBenefit} to test\n+   * @param benficiaryId BENE_ID, *\n+   * @param carrierNumber CARR_NUM,\n+   * @param clinicalTrialNumber CLM_CLNCL_TRIL_NUM,\n+   * @param beneficiaryPartBDeductAmount CARR_CLM_CASH_DDCTBL_APLD_AMT,\n+   * @param paymentDenialCode CARR_CLM_PMT_DNL_CD,\n+   * @param referringPhysicianNpi RFR_PHYSN_NPI,\n+   * @param providerAssignmentIndicator CARR_CLM_PRVDR_ASGNMT_IND_SW,\n+   * @param providerPaymentAmount NCH_CLM_PRVDR_PMT_AMT,\n+   * @param beneficiaryPaymentAmount NCH_CLM_BENE_PMT_AMT,\n+   * @param submittedChargeAmount NCH_CARR_CLM_SBMTD_CHRG_AMT,\n+   * @param allowedChargeAmount NCH_CARR_CLM_ALOWD_AMT,\n+   */\n+  static void assertEobCommonGroupCarrierDMEEquals(\n+      ExplanationOfBenefit eob,\n+      String beneficiaryId,\n+      String carrierNumber,\n+      Optional<String> clinicalTrialNumber,\n+      BigDecimal beneficiaryPartBDeductAmount,\n+      String paymentDenialCode,\n+      Optional<String> referringPhysicianNpi,\n+      Optional<Character> providerAssignmentIndicator,\n+      BigDecimal providerPaymentAmount,\n+      BigDecimal beneficiaryPaymentAmount,\n+      BigDecimal submittedChargeAmount,\n+      BigDecimal allowedChargeAmount) {\n+\n+    assertExtensionCodingEquals(CcwCodebookVariable.CARR_CLM_PMT_DNL_CD, paymentDenialCode, eob);\n+\n+    /*\n+        ReferralRequest referral = (ReferralRequest) eob.getReferral().getResource();\n+        Assert.assertEquals(\n+            TransformerUtilsV2.referencePatient(beneficiaryId).getReference(),\n+            referral.getSubject().getReference());\n+        assertReferenceIdentifierEquals(\n+            TransformerConstants.CODING_NPI_US,\n+            referringPhysicianNpi.get(),\n+            referral.getRequester().getAgent());\n+        Assert.assertEquals(1, referral.getRecipient().size());\n+        assertReferenceIdentifierEquals(\n+            TransformerConstants.CODING_NPI_US,\n+            referringPhysicianNpi.get(),\n+            referral.getRecipientFirstRep());\n+    */\n+    assertExtensionCodingEquals(CcwCodebookVariable.ASGMNTCD, providerAssignmentIndicator, eob);\n+\n+    assertExtensionIdentifierEquals(CcwCodebookVariable.CARR_NUM, carrierNumber, eob);\n+    assertExtensionIdentifierEquals(\n+        CcwCodebookVariable.CLM_CLNCL_TRIL_NUM, clinicalTrialNumber, eob);\n+    assertAdjudicationTotalAmountEquals(\n+        CcwCodebookVariable.CARR_CLM_CASH_DDCTBL_APLD_AMT, beneficiaryPartBDeductAmount, eob);\n+    assertAdjudicationTotalAmountEquals(\n+        CcwCodebookVariable.NCH_CLM_PRVDR_PMT_AMT, providerPaymentAmount, eob);\n+    assertAdjudicationTotalAmountEquals(\n+        CcwCodebookVariable.NCH_CLM_BENE_PMT_AMT, beneficiaryPaymentAmount, eob);\n+    assertAdjudicationTotalAmountEquals(\n+        CcwCodebookVariable.NCH_CARR_CLM_SBMTD_CHRG_AMT, submittedChargeAmount, eob);\n+    assertAdjudicationTotalAmountEquals(\n+        CcwCodebookVariable.NCH_CARR_CLM_ALOWD_AMT, allowedChargeAmount, eob);\n+  }\n+\n+  /*\n    * @param expectedStartDate the expected value for {@link Period#getStart()}\n    * @param expectedEndDate the expected value for {@link Period#getEnd()}\n    * @param actualPeriod the {@link Period} to verify"
  }
]
