[
  {
    "sha": "c3c1f7f8f6fa746490ed876fdaf544fda2e89f31",
    "filename": "app/pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/pom.xml",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/pom.xml",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/pom.xml?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -47,6 +47,14 @@\n             <groupId>com.fasterxml.jackson.core</groupId>\n             <artifactId>jackson-databind</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.persistence</groupId>\n+            <artifactId>javax.persistence-api</artifactId>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "512086374580917f45f3e41e5416d932c0a14eaa",
    "filename": "app/src/main/java/by/academy/connection/ConnectionManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 65,
    "changes": 65,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/connection/ConnectionManager.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/connection/ConnectionManager.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/connection/ConnectionManager.java?ref=e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf",
    "patch": "@@ -1,65 +0,0 @@\n-package by.academy.connection;\n-\n-import by.academy.exception.AppException;\n-import org.postgresql.ds.PGConnectionPoolDataSource;\n-\n-import javax.sql.PooledConnection;\n-import java.io.IOException;\n-import java.sql.SQLException;\n-import java.util.Properties;\n-\n-public final class ConnectionManager {\n-\n-    private static final int DEFAULT_TIME_OUT = 60_000;\n-    private static final String URL = \"url\";\n-    private static final String USER = \"user\";\n-    private static final String PASSWORD = \"password\";\n-    private static final String CONNECTION_TIME_OUT = \"connection.time.out\";\n-    private static final String PROPERTIES_FILE_NAME = \"connection.prop\";\n-\n-    private static volatile PooledConnection pooledConnection;\n-\n-    public static PooledConnection getConnectionPool() {\n-        PooledConnection connection = pooledConnection;\n-        if (null == connection) {\n-            synchronized (ConnectionManager.class) {\n-                connection = pooledConnection;\n-                if (null == connection) {\n-                    Properties properties = loadProps(PROPERTIES_FILE_NAME);\n-                    PGConnectionPoolDataSource dataSource = new PGConnectionPoolDataSource();\n-                    dataSource.setURL(properties.getProperty(URL));\n-                    dataSource.setUser(properties.getProperty(USER));\n-                    dataSource.setPassword(properties.getProperty(PASSWORD));\n-                    try {\n-                        dataSource.setConnectTimeout(\n-                                Integer.parseInt(properties.getProperty(CONNECTION_TIME_OUT)));\n-                    } catch (NumberFormatException e) {\n-                        dataSource.setConnectTimeout(DEFAULT_TIME_OUT);\n-                    }\n-                    try {\n-                        pooledConnection = dataSource.getPooledConnection();\n-                    } catch (SQLException e) {\n-                        throw new AppException(e.getMessage());\n-                    }\n-                }\n-            }\n-        }\n-        return pooledConnection;\n-    }\n-\n-    private static Properties loadProps(String fileName) {\n-        Properties properties = new Properties();\n-        try {\n-            properties.load(Thread.currentThread()\n-                    .getContextClassLoader()\n-                    .getResourceAsStream(fileName));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        return properties;\n-    }\n-\n-    private ConnectionManager () {\n-        \n-    }\n-}"
  },
  {
    "sha": "05733f1971160675b59b96c5b398523dda8f1d9b",
    "filename": "app/src/main/java/by/academy/connection/HibernateUtil.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/connection/HibernateUtil.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/connection/HibernateUtil.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/connection/HibernateUtil.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,19 @@\n+package by.academy.connection;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+\n+public class HibernateUtil {\n+    private static volatile SessionFactory sessionFactory;\n+\n+    public static SessionFactory getFactory() {\n+        if (null == sessionFactory ) {\n+            synchronized (HibernateUtil.class) {\n+                if (null == sessionFactory) {\n+                    sessionFactory = new Configuration().configure().buildSessionFactory();\n+                }\n+            }\n+        }\n+        return sessionFactory;\n+    }\n+}"
  },
  {
    "sha": "c6ac4d85d66c0a40f59159f1a4c5eedbe04a0d9b",
    "filename": "app/src/main/java/by/academy/constant/ServletProperties.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/constant/ServletProperties.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/constant/ServletProperties.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/constant/ServletProperties.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -12,6 +12,8 @@\n     public static final String COACH_ID = \"coachId\";\n     public static final String SALARY = \"salary\";\n     public static final String MONTH_COUNT = \"monthCount\";\n+    public static final String GROUP_NAME = \"groupName\";\n+    public static final String GROUP_ID = \"groupId\";\n \n     private ServletProperties() {\n "
  },
  {
    "sha": "420838f228a7743e8844675a356d0d122c2cffdc",
    "filename": "app/src/main/java/by/academy/constant/SqlQuery.java",
    "status": "removed",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/constant/SqlQuery.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/constant/SqlQuery.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/constant/SqlQuery.java?ref=e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf",
    "patch": "@@ -1,23 +0,0 @@\n-package by.academy.constant;\n-\n-public final class SqlQuery {\n-    public static final String INSERT_USER = \"INSERT INTO users (\\\"fio\\\", \\\"age\\\", \\\"userName\\\", \\\"password\\\", \\\"userType\\\") \" +\n-                                             \"VALUES (?, ?, ?, ?, ?);\";\n-    public static final String SELECT_USER_BY_USER_NAME = \"SELECT * FROM users \" +\n-                                                          \"WHERE \\\"userName\\\" = ?;\";\n-    public static final String SELECT_USER_BY_ID  = \"SELECT * FROM users \" +\n-                                                    \"WHERE \\\"id\\\" = ?;\";\n-    public static final String DELETE_USER_BY_ID = \"DELETE FROM users \" +\n-                                                   \"WHERE \\\"id\\\" = ?;\";\n-\n-    public static final String SELECT_USERS = \"SELECT * FROM users;\";\n-\n-    public static final String INSERT_SALARY = \"INSERT INTO salaries (\\\"userId\\\", \\\"salary\\\") \" +\n-                                               \"VALUES (?, ?)\";\n-    public static final String SELECT_SALARY = \"SELECT \\\"id\\\", \\\"salary\\\" FROM salaries \" +\n-                                               \"WHERE \\\"userId\\\" = ?;\";\n-\n-    private SqlQuery() {\n-\n-    }\n-}"
  },
  {
    "sha": "29a0276bea70c4c061a2f3ee69a2864d9fc8bfe8",
    "filename": "app/src/main/java/by/academy/controller/AverageSalaries.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/AverageSalaries.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/AverageSalaries.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/AverageSalaries.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -1,10 +1,9 @@\n package by.academy.controller;\n \n import by.academy.constant.ServletProperties;\n-import by.academy.facade.UserFacade;\n+import by.academy.facade.CoachFacade;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n-import javax.servlet.ServletException;\n import javax.servlet.annotation.WebServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -13,17 +12,16 @@\n \n @WebServlet(\"/AverageSalaries\")\n public class AverageSalaries extends JsonController {\n-\n     @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n         String monthCountStr = req.getParameter(ServletProperties.MONTH_COUNT);\n         int monthCount = 1;\n         if (null != monthCountStr) {\n             monthCount = Integer.parseInt(monthCountStr);\n         }\n         ObjectMapper mapper = new ObjectMapper();\n         PrintWriter printWriter = resp.getWriter();\n-        printWriter.write(mapper.writeValueAsString(UserFacade.getAverageSalaries(monthCount)));\n+        printWriter.write(mapper.writeValueAsString(CoachFacade.getAverageSalaries(monthCount)));\n         printWriter.flush();\n     }\n }"
  },
  {
    "sha": "01cb3488c5c582c893c073bfc9cf4f77fa016715",
    "filename": "app/src/main/java/by/academy/controller/JsonController.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/JsonController.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/JsonController.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/JsonController.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -1,17 +1,18 @@\n package by.academy.controller;\n \n+import by.academy.constant.ServletProperties;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n \n public abstract class JsonController extends HttpServlet {\n-\n-    @SuppressWarnings(\"unchecked\")\n     protected Map<String, String> getRequestParameters(HttpServletRequest req) {\n         Map<String, String> props = null;\n         try (BufferedReader br = req.getReader()) {\n@@ -26,4 +27,10 @@\n         }\n         return props;\n     }\n+\n+    @Override\n+    public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        req.getSession().setAttribute(ServletProperties.EXCEPTION_MESSAGE, null);\n+        super.service(req, res);\n+    }\n }"
  },
  {
    "sha": "726da04c0a18c5dbd973af69b7af21c8b52d5975",
    "filename": "app/src/main/java/by/academy/controller/user/Login.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/Login.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/Login.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/Login.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -19,7 +19,6 @@\n import java.util.Optional;\n \n public class Login extends HttpServlet {\n-\n     private static final Logger log = LoggerFactory.getLogger(Login.class);\n \n     @Override\n@@ -55,7 +54,7 @@ public void init() {\n                 .withUserType(UserType.ADMIN)\n                 .build();\n         try {\n-            UserFacade.addUser(admin);\n+            UserFacade.newUser(admin);\n         } catch (UserServiceException e) {\n             e.printStackTrace();\n         }"
  },
  {
    "sha": "2de1a080df6aea865a52c33dbf85e4848d104914",
    "filename": "app/src/main/java/by/academy/controller/user/Logout.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/Logout.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/Logout.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/Logout.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -11,7 +11,6 @@\n \n @WebServlet(\"/Logout\")\n public class Logout extends HttpServlet {\n-\n     @Override\n     public void service(HttpServletRequest req, HttpServletResponse res) throws IOException {\n         HttpSession session = req.getSession();"
  },
  {
    "sha": "c55d25b59222ce38bd1a94cad1515d55fcb16132",
    "filename": "app/src/main/java/by/academy/controller/user/admin/CoachController.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/CoachController.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/CoachController.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/admin/CoachController.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -1,7 +1,7 @@\n package by.academy.controller.user.admin;\n \n import by.academy.controller.JsonController;\n-import by.academy.facade.UserFacade;\n+import by.academy.facade.CoachFacade;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import javax.servlet.annotation.WebServlet;\n@@ -10,14 +10,13 @@\n import java.io.IOException;\n import java.io.PrintWriter;\n \n-@WebServlet(\"/UserList\")\n-public class UserList extends JsonController {\n-\n+@WebServlet(\"/CoachController\")\n+public class CoachController extends JsonController {\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n         ObjectMapper mapper = new ObjectMapper();\n         PrintWriter printWriter = resp.getWriter();\n-        printWriter.write(mapper.writeValueAsString(UserFacade.getAllUsers()));\n+        printWriter.write(mapper.writeValueAsString(CoachFacade.getAll()));\n         printWriter.flush();\n     }\n }",
    "previous_filename": "app/src/main/java/by/academy/controller/user/admin/UserList.java"
  },
  {
    "sha": "df2f529d8aa090b7dfaf1871e215f68482d3ae49",
    "filename": "app/src/main/java/by/academy/controller/user/admin/CoachList.java",
    "status": "removed",
    "additions": 0,
    "deletions": 24,
    "changes": 24,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/controller/user/admin/CoachList.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/controller/user/admin/CoachList.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/admin/CoachList.java?ref=e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf",
    "patch": "@@ -1,24 +0,0 @@\n-package by.academy.controller.user.admin;\n-\n-import by.academy.controller.JsonController;\n-import by.academy.facade.UserFacade;\n-import by.academy.model.bean.UserType;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import javax.servlet.annotation.WebServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-\n-@WebServlet(\"/CoachList\")\n-public class CoachList extends JsonController {\n-\n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n-        ObjectMapper mapper = new ObjectMapper();\n-        PrintWriter printWriter = resp.getWriter();\n-        printWriter.write(mapper.writeValueAsString(UserFacade.getAllUsers(UserType.COACH)));\n-        printWriter.flush();\n-    }\n-}"
  },
  {
    "sha": "f1970d32b480c50cd2fbb9ed5cdbe4b71fa25b1c",
    "filename": "app/src/main/java/by/academy/controller/user/admin/GroupController.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/GroupController.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/GroupController.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/admin/GroupController.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,55 @@\n+package by.academy.controller.user.admin;\n+\n+import by.academy.constant.ServletProperties;\n+import by.academy.controller.JsonController;\n+import by.academy.facade.GroupFacade;\n+import by.academy.model.bean.Group;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.Map;\n+\n+@WebServlet(\"/GroupController\")\n+public class GroupController extends JsonController {\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        PrintWriter printWriter = resp.getWriter();\n+        printWriter.write(mapper.writeValueAsString(GroupFacade.getAll()));\n+        printWriter.flush();\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) {\n+        Map<String, String> props = getRequestParameters(req);\n+        if (null != props) {\n+            Long coachId = Long.parseLong(props.get(ServletProperties.COACH_ID));\n+            String groupName = props.get(ServletProperties.GROUP_NAME);\n+            GroupFacade.newGroup(groupName, coachId);\n+        }\n+    }\n+\n+    @Override\n+    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) {\n+        Map<String, String> props = getRequestParameters(req);\n+        if (null != props) {\n+            Long groupId = Long.parseLong(props.get(ServletProperties.GROUP_ID));\n+            GroupFacade.remove(groupId);\n+        }\n+    }\n+\n+    @Override\n+    protected void doPut(HttpServletRequest req, HttpServletResponse resp) {\n+        Map<String, String> props = getRequestParameters(req);\n+        if (null != props) {\n+            String groupName = props.get(ServletProperties.GROUP_NAME);\n+            Long groupId = Long.parseLong(props.get(ServletProperties.GROUP_ID));\n+            Long coachId = Long.parseLong(props.get(ServletProperties.COACH_ID));\n+            GroupFacade.setGroup(groupId, groupName, coachId);\n+        }\n+    }\n+}"
  },
  {
    "sha": "9c99ab2b472fd48a282a941b47223bc1eb2ef5ef",
    "filename": "app/src/main/java/by/academy/controller/user/admin/SalaryController.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 11,
    "changes": 18,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/SalaryController.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/SalaryController.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/admin/SalaryController.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -4,7 +4,7 @@\n import by.academy.constant.PageName;\n import by.academy.constant.ServletProperties;\n import by.academy.controller.JsonController;\n-import by.academy.facade.UserFacade;\n+import by.academy.facade.CoachFacade;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -14,10 +14,9 @@\n import java.io.IOException;\n import java.util.Map;\n \n-@WebServlet(\"/AddSalary\")\n-public class AddSalary extends JsonController {\n-\n-    private static final Logger log = LoggerFactory.getLogger(AddSalary.class);\n+@WebServlet(\"/SalaryController\")\n+public class SalaryController extends JsonController {\n+    private static final Logger log = LoggerFactory.getLogger(SalaryController.class);\n \n     @Override\n     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n@@ -26,8 +25,9 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I\n             if (null != props) {\n                 long coachId = Long.parseLong(props.get(ServletProperties.COACH_ID), 10);\n                 double salary = Double.parseDouble(props.get(ServletProperties.SALARY));\n-                UserFacade.addSalary(coachId, salaryFormat(salary));\n-                log.info(\"Add salary = {} to Coach(\" + coachId + \")\", salary);\n+                CoachFacade.addSalary(coachId, salary)\n+                        .ifPresent(s -> log.info(\"Add salary = {} to Coach(\" +\n+                                s.getCoach().getUserName() + \")\", s.getValue()));\n             }\n         } catch (NumberFormatException e) {\n             log.error(e.getMessage(), e);\n@@ -37,8 +37,4 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I\n         }\n         resp.sendRedirect(PageName.HOME);\n     }\n-\n-    private int salaryFormat(Double salary) {\n-        return (int) (salary * 100);\n-    }\n }",
    "previous_filename": "app/src/main/java/by/academy/controller/user/admin/AddSalary.java"
  },
  {
    "sha": "5a6fbf694a62d20daa79c545ee34cde2283594a2",
    "filename": "app/src/main/java/by/academy/controller/user/admin/UserController.java",
    "status": "modified",
    "additions": 16,
    "deletions": 10,
    "changes": 26,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/UserController.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/controller/user/admin/UserController.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/controller/user/admin/UserController.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -8,20 +8,20 @@\n import by.academy.facade.UserFacade;\n import by.academy.model.bean.User;\n import by.academy.model.bean.UserType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.servlet.ServletException;\n import javax.servlet.annotation.WebServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n import java.io.IOException;\n+import java.io.PrintWriter;\n import java.util.Map;\n \n @WebServlet(\"/UserController\")\n public class UserController extends JsonController {\n-\n     private static final Logger log = LoggerFactory.getLogger(UserController.class);\n \n     @Override\n@@ -34,15 +34,14 @@ public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOExc\n         UserType userType = UserType.valueOf(req.getParameter(ServletProperties.USER_TYPE));\n         synchronized (UserController.class) {\n             try {\n-                if (UserFacade.addUser(User.newBuilder()\n+                UserFacade.newUser(User.newBuilder()\n                         .withFio(fio)\n                         .withAge(age)\n                         .withUserName(userName)\n                         .withPassword(password)\n                         .withUserType(userType)\n-                        .build())) {\n-                    log.info(\"New User = {}\", userName);\n-                }\n+                        .build())\n+                        .ifPresent(user -> log.info(\"New User = {}\", user.getUserName()));\n             } catch (UserServiceException e) {\n                 log.error(e.getMessage(), e);\n                 session.setAttribute(\n@@ -54,12 +53,19 @@ public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOExc\n     }\n \n     @Override\n-    protected void doDelete(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        PrintWriter printWriter = resp.getWriter();\n+        printWriter.write(mapper.writeValueAsString(UserFacade.getAll()));\n+        printWriter.flush();\n+    }\n+\n+    @Override\n+    protected void doDelete(HttpServletRequest req, HttpServletResponse res) throws IOException {\n         Map<String, String> props = getRequestParameters(req);\n         long userId = Long.parseLong(props.get(ServletProperties.USER_ID_TO_REMOVE));\n-        if (UserFacade.removeUserById(userId)) {\n-            log.info(\"Removed user, userId = {}\", userId);\n-        }\n+        UserFacade.remove(userId)\n+                .ifPresent(user -> log.info(\"Removed user, userId = {}\", user.getId()));\n         res.sendRedirect(PageName.HOME);\n     }\n }"
  },
  {
    "sha": "5cae641ba8233f9ee5862a8624637710c691ca23",
    "filename": "app/src/main/java/by/academy/exception/AppException.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/exception/AppException.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/exception/AppException.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/exception/AppException.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -1,7 +1,6 @@\n package by.academy.exception;\n \n public class AppException extends RuntimeException {\n-\n     public AppException(String message) {\n         super(message);\n     }"
  },
  {
    "sha": "65c43df363f8b1775710f5fdd7a0fd8824e07e3e",
    "filename": "app/src/main/java/by/academy/exception/UserServiceException.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/exception/UserServiceException.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/exception/UserServiceException.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/exception/UserServiceException.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -1,7 +1,6 @@\n package by.academy.exception;\n \n public class UserServiceException extends RuntimeException{\n-\n     public UserServiceException(String message) {\n         super(message);\n     }"
  },
  {
    "sha": "3014f0544897736ae1ae34552f3f7cbc5553b5ae",
    "filename": "app/src/main/java/by/academy/facade/CoachFacade.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/facade/CoachFacade.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/facade/CoachFacade.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/facade/CoachFacade.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,53 @@\n+package by.academy.facade;\n+\n+import by.academy.model.bean.Coach;\n+import by.academy.model.bean.Salary;\n+import by.academy.model.bean.User;\n+import by.academy.model.bean.UserType;\n+import by.academy.service.impl.SalaryService;\n+import by.academy.service.impl.UserService;\n+\n+import java.util.*;\n+\n+public class CoachFacade {\n+    public static Optional<Salary> addSalary(long coachId, double salaryValue) {\n+        User user = UserService.getService().findUser(coachId).get();\n+        Salary salary = Salary.newBuilder()\n+                .withValue(formatSalary(salaryValue))\n+                .withCoach(user)\n+                .build();\n+        return SalaryService.getService().addSalary(salary);\n+    }\n+\n+    public static List<Coach> getAll() {\n+        List<Coach> coaches = new LinkedList<>();\n+        UserService.getService().findAllUsers(UserType.COACH).forEach(user -> coaches.add(\n+                Coach.getBuilder()\n+                        .withUser(user)\n+                        .withSalaries(new LinkedList<>())\n+                        .build()));\n+        Iterator<Coach> iterator = coaches.iterator();\n+        while (iterator.hasNext()) {\n+            Coach coach = iterator.next();\n+            SalaryService.getService().findAllSalaries(coach.getUser().getId())\n+                    .forEach(coach::addSalary);\n+        }\n+        return coaches;\n+    }\n+    public static Map<String, Integer> getAverageSalaries(int monthCount) {\n+        Map<String, Integer> averageSalaries = new HashMap<>();\n+        List<Coach> coaches = getAll();\n+        for(Coach coach: coaches) {\n+            if((null != coach) && (null != coach.getUser())) {\n+                averageSalaries.put(\n+                        coach.getUser().getFio(),\n+                        coach.getAverageSalary(monthCount));\n+            }\n+        }\n+        return averageSalaries;\n+    }\n+\n+    private static int formatSalary(double salaryValue) {\n+        return (int) (100 * salaryValue);\n+    }\n+}"
  },
  {
    "sha": "262b7951d390f0e868ef4877800bab9b40f21b20",
    "filename": "app/src/main/java/by/academy/facade/GroupFacade.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/facade/GroupFacade.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/facade/GroupFacade.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/facade/GroupFacade.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,38 @@\n+package by.academy.facade;\n+\n+import by.academy.model.bean.Group;\n+import by.academy.model.bean.User;\n+import by.academy.service.impl.GroupService;\n+import by.academy.service.impl.UserService;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class GroupFacade {\n+    public static List<Group> getAll() {\n+        return GroupService.getService().findAllGroups();\n+    }\n+\n+    public static Optional<Group> newGroup(String groupName, long coachId) {\n+        Group group = Group.getBuilder()\n+                .withName(groupName)\n+                .withCoach(UserService.getService().findUser(coachId).get())\n+                .build();\n+        return GroupService.getService().addGroup(group);\n+    }\n+\n+    public static Optional<Group> remove(long groupId) {\n+        return GroupService.getService().removeGroup(groupId);\n+    }\n+\n+    public static Optional<Group> setGroup(long groupId, String groupName, long coachId) {\n+        Optional<Group> group = GroupService.getService().findGroup(groupId);\n+        Optional<User> coach = UserService.getService().findUser(coachId);\n+        if (group.isPresent() && coach.isPresent()) {\n+            group.get().setName(groupName);\n+            group.get().setCoach(coach.get());\n+            group = GroupService.getService().setGroup(group.get());\n+        }\n+        return group;\n+    }\n+}"
  },
  {
    "sha": "828e86d62ced014bbee18bc1ff687426ea5cede3",
    "filename": "app/src/main/java/by/academy/facade/UserFacade.java",
    "status": "modified",
    "additions": 7,
    "deletions": 62,
    "changes": 69,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/facade/UserFacade.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/facade/UserFacade.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/facade/UserFacade.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -1,81 +1,26 @@\n package by.academy.facade;\n \n-import by.academy.model.bean.Coach;\n-import by.academy.model.bean.Salary;\n import by.academy.model.bean.User;\n-import by.academy.model.bean.UserType;\n-import by.academy.service.ISalaryService;\n-import by.academy.service.IUserService;\n-import by.academy.service.impl.SalaryService;\n import by.academy.service.impl.UserService;\n \n import java.util.*;\n \n public class UserFacade {\n-\n-    public static boolean addSalary(long coachId, Integer salaryValue) {\n-        ISalaryService salaryService = new SalaryService();\n-        IUserService userService = new UserService();\n-        User user = userService.getUserByID(coachId).get();\n-        Salary salary = Salary.newBuilder()\n-                .withValue(salaryValue)\n-                .withCoach(user)\n-                .build();\n-        return salaryService.addSalary(salary);\n-    }\n-\n-    public static Map<String, Integer> getAverageSalaries(int monthCount) {\n-        Map<String, Integer> averageSalaries = new HashMap<>();\n-        List<Coach> coaches = getAllCoaches();\n-        for(Coach coach: coaches) {\n-            if((null != coach) && (null != coach.getUser())) {\n-                averageSalaries.put(\n-                        coach.getUser().getFio(),\n-                        coach.getAverageSalary(monthCount));\n-            }\n-        }\n-        return averageSalaries;\n-    }\n-\n     public static Optional<User> login(String userName, String password) {\n-        IUserService service = new UserService();\n         password = Base64.getEncoder().encodeToString(password.getBytes());\n-        return service.getUserByUserNameAndPassword(userName, password);\n+        return UserService.getService().findUser(userName, password);\n     }\n \n-    public static List<User> getAllUsers() {\n-        IUserService service = new UserService();\n-        return service.getAll();\n+    public static List<User> getAll() {\n+        return UserService.getService().findAllUsers();\n     }\n \n-    public static List<User> getAllUsers(UserType userType) {\n-        IUserService service = new UserService();\n-        return service.getAll(userType);\n-    }\n-\n-    public static boolean addUser(User user) {\n-        IUserService service = new UserService();\n+    public static Optional<User> newUser(User user) {\n         user.setPassword(Base64.getEncoder().encodeToString(user.getPassword().getBytes()));\n-        return service.addUser(user);\n-    }\n-\n-    public static boolean removeUserById(long id) {\n-        IUserService service = new UserService();\n-        return service.removeUserById(id);\n+        return UserService.getService().addUser(user);\n     }\n \n-    private static List<Coach> getAllCoaches() {\n-        IUserService userService = new UserService();\n-        ISalaryService salaryService = new SalaryService();\n-        List<Coach> coaches = new LinkedList<>();\n-        userService.getAll(UserType.COACH).forEach(user -> coaches.add(\n-                Coach.newBuilder()\n-                        .withUser(user)\n-                        .withSalaries(new LinkedList<>())\n-                        .build()));\n-        coaches.forEach(coach -> salaryService.getAllByCoachId(\n-                coach.getUser().getId()).forEach(coach::addSalary)\n-        );\n-        return coaches;\n+    public static Optional<User> remove(long id) {\n+        return UserService.getService().removeUser(id);\n     }\n }"
  },
  {
    "sha": "d9767e0b2b7a824bc76e5c2ec777f9f01cb2f3da",
    "filename": "app/src/main/java/by/academy/filter/AdminFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/filter/AdminFilter.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/filter/AdminFilter.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/filter/AdminFilter.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -13,9 +13,8 @@\n import java.io.IOException;\n import java.util.Objects;\n \n-@WebFilter(urlPatterns = {\"/UserController\", \"/AddSalary\" , \"/UserList\", \"/CoachList\"})\n+@WebFilter(urlPatterns = {\"/UserController\", \"/CoachController\", \"/SalaryController\"})\n public class AdminFilter implements Filter {\n-\n     @Override\n     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n             throws IOException, ServletException {"
  },
  {
    "sha": "5b4b473c15b9ec09d2cd1a05ad83ae086c433d60",
    "filename": "app/src/main/java/by/academy/filter/EncodingFilter.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/filter/EncodingFilter.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/filter/EncodingFilter.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/filter/EncodingFilter.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -6,7 +6,6 @@\n \n @WebFilter(\"/*\")\n public class EncodingFilter implements Filter {\n-\n     @Override\n     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n             throws IOException, ServletException {"
  },
  {
    "sha": "4ee7812779869518043995ee7938cea98eaaee52",
    "filename": "app/src/main/java/by/academy/filter/JsonFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/filter/JsonFilter.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/filter/JsonFilter.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/filter/JsonFilter.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -4,9 +4,8 @@\n import javax.servlet.annotation.WebFilter;\n import java.io.IOException;\n \n-@WebFilter(urlPatterns = {\"/AverageSalaries\", \"/UserList\", \"/CoachList\"})\n+@WebFilter(urlPatterns = {\"/AverageSalaries\", \"/UserController\", \"/CoachController\", \"/SalaryController\"})\n public class JsonFilter implements Filter {\n-\n     @Override\n     public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n             throws IOException, ServletException {"
  },
  {
    "sha": "7bf3ae9f750a4575ce4abf0d68eaf6f3ee0280da",
    "filename": "app/src/main/java/by/academy/repository/IRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/IRepository.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/IRepository.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/repository/IRepository.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -3,10 +3,11 @@\n import by.academy.specification.ISpecification;\n \n import java.util.List;\n+import java.util.Optional;\n \n public interface IRepository<T> {\n-    boolean add(T t);\n-    boolean remove(T t);\n-    boolean set(T t);\n+    Optional<T> add(T t);\n+    Optional<T> remove(T t);\n+    Optional<T> set(T t);\n     List<T> query(ISpecification<T> specification);\n }"
  },
  {
    "sha": "7ececab66fd6c31eee304fd94a25cedf20798ff4",
    "filename": "app/src/main/java/by/academy/repository/impl/GroupHibernateRepository.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/impl/GroupHibernateRepository.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/impl/GroupHibernateRepository.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/repository/impl/GroupHibernateRepository.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,70 @@\n+package by.academy.repository.impl;\n+\n+import by.academy.connection.HibernateUtil;\n+import by.academy.model.bean.Group;\n+import by.academy.repository.IRepository;\n+import by.academy.specification.IHibernateSpecification;\n+import by.academy.specification.ISpecification;\n+import org.hibernate.Session;\n+import org.hibernate.Transaction;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class GroupHibernateRepository implements IRepository<Group> {\n+    @Override\n+    public Optional<Group> add(Group group) {\n+        Optional<Group> optional = Optional.of(group);\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            group.setId((Long) session.save(group));\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return optional;\n+    }\n+\n+    @Override\n+    public Optional<Group> remove(Group group) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            session.delete(group);\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return Optional.of(group);\n+    }\n+\n+    @Override\n+    public Optional<Group> set(Group group) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            session.update(group);\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return Optional.of(group);\n+    }\n+\n+    @Override\n+    public List<Group> query(ISpecification<Group> specification) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        List<Group> userList = new LinkedList<>();\n+        try (session) {\n+            if (specification instanceof IHibernateSpecification) {\n+                IHibernateSpecification hibernateSpecification = (IHibernateSpecification) specification;\n+                userList = session.createQuery(hibernateSpecification.getCriteriaQuery(session.getCriteriaBuilder()))\n+                        .getResultList();\n+            }\n+        }\n+        userList.removeIf(specification::isInvalid);\n+        return userList;\n+    }\n+}"
  },
  {
    "sha": "3298fd417f195a3218164bd51580bea32fc1233b",
    "filename": "app/src/main/java/by/academy/repository/impl/SalaryHibernateRepository.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/impl/SalaryHibernateRepository.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/impl/SalaryHibernateRepository.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/repository/impl/SalaryHibernateRepository.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,70 @@\n+package by.academy.repository.impl;\n+\n+import by.academy.connection.HibernateUtil;\n+import by.academy.model.bean.Salary;\n+import by.academy.repository.IRepository;\n+import by.academy.specification.IHibernateSpecification;\n+import by.academy.specification.ISpecification;\n+import org.hibernate.Session;\n+import org.hibernate.Transaction;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class SalaryHibernateRepository implements IRepository<Salary> {\n+    @Override\n+    public Optional<Salary> add(Salary salary) {\n+        Optional<Salary> optional = Optional.of(salary);\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            salary.setId((Long) session.save(salary));\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return optional;\n+    }\n+\n+    @Override\n+    public Optional<Salary> remove(Salary salary) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            session.delete(salary);\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return Optional.of(salary);\n+    }\n+\n+    @Override\n+    public Optional<Salary> set(Salary salary) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            session.update(salary);\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return Optional.of(salary);\n+    }\n+\n+    @Override\n+    public List<Salary> query(ISpecification<Salary> specification) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        List<Salary> userList = new LinkedList<>();\n+        try (session) {\n+            if (specification instanceof IHibernateSpecification) {\n+                IHibernateSpecification hibernateSpecification = (IHibernateSpecification) specification;\n+                userList = session.createQuery(hibernateSpecification.getCriteriaQuery(session.getCriteriaBuilder()))\n+                        .getResultList();\n+            }\n+        }\n+        userList.removeIf(specification::isInvalid);\n+        return userList;\n+    }\n+}"
  },
  {
    "sha": "8a33c59d5096a540efee070c9b6accd2f2a51c2d",
    "filename": "app/src/main/java/by/academy/repository/impl/SalaryRepositoryDB.java",
    "status": "removed",
    "additions": 0,
    "deletions": 75,
    "changes": 75,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/repository/impl/SalaryRepositoryDB.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/repository/impl/SalaryRepositoryDB.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/repository/impl/SalaryRepositoryDB.java?ref=e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf",
    "patch": "@@ -1,75 +0,0 @@\n-package by.academy.repository.impl;\n-\n-import by.academy.constant.SqlQuery;\n-import by.academy.exception.AppException;\n-import by.academy.model.bean.Salary;\n-import by.academy.connection.ConnectionManager;\n-import by.academy.repository.IRepository;\n-import by.academy.specification.ISpecification;\n-import by.academy.specification.SqlSpecification;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-public class SalaryRepositoryDB implements IRepository<Salary> {\n-\n-    @Override\n-    public boolean add(Salary salary) {\n-        int update = 0;\n-        final int COACH = 1;\n-        final int VALUE = 2;\n-        try {\n-            Connection connection = ConnectionManager.getConnectionPool().getConnection();\n-            try (PreparedStatement statement = connection.prepareStatement(SqlQuery.INSERT_SALARY)) {\n-                if ((null != salary) && (null != salary.getCoach())) {\n-                    statement.setLong(COACH, salary.getCoach().getId());\n-                    statement.setInt(VALUE, salary.getValue());\n-                    update = statement.executeUpdate();\n-                }\n-            }\n-        } catch (SQLException e) {\n-            throw new AppException(e);\n-        }\n-        return update > 0;\n-    }\n-\n-    @Override\n-    public boolean remove(Salary salary) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean set(Salary salary) {\n-        return false;\n-    }\n-\n-    @Override\n-    public List<Salary> query(ISpecification<Salary> specification) {\n-        final int ID = 1;\n-        final int VALUE = 2;\n-        List<Salary> salaries = new LinkedList<>();\n-        if (specification instanceof SqlSpecification) {\n-            SqlSpecification sqlSpecification = (SqlSpecification) specification;\n-            try {\n-                Connection connection = ConnectionManager.getConnectionPool().getConnection();\n-                try (PreparedStatement statement = sqlSpecification.getPreparedStatement(connection);\n-                     ResultSet resultSet = statement.executeQuery()) {\n-                    while (resultSet.next()) {\n-                        salaries.add(Salary.newBuilder()\n-                                .withId(resultSet.getLong(ID))\n-                                .withValue(resultSet.getInt(VALUE))\n-                                .build());\n-                    }\n-                }\n-            } catch (SQLException e) {\n-                throw new AppException(e);\n-            }\n-        }\n-        salaries.removeIf(specification::isSpecific);\n-        return salaries;\n-    }\n-}"
  },
  {
    "sha": "02bd9a3d1dc0ab8daedcbbfd00e608aa862f889c",
    "filename": "app/src/main/java/by/academy/repository/impl/UserHibernateRepository.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/impl/UserHibernateRepository.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/repository/impl/UserHibernateRepository.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/repository/impl/UserHibernateRepository.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,90 @@\n+package by.academy.repository.impl;\n+\n+import by.academy.connection.HibernateUtil;\n+import by.academy.model.bean.Salary;\n+import by.academy.model.bean.User;\n+import by.academy.model.bean.UserType;\n+import by.academy.repository.IRepository;\n+import by.academy.specification.IHibernateSpecification;\n+import by.academy.specification.ISpecification;\n+import org.hibernate.Session;\n+import org.hibernate.Transaction;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class UserHibernateRepository implements IRepository<User> {\n+    @Override\n+    public Optional<User> add(User user) {\n+        Optional<User> optional = Optional.of(user);\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            user.setId((Long) session.save(user));\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return optional;\n+    }\n+\n+    @Override\n+    public Optional<User> remove(User user) {\n+        final String COACH_ID = \"coach_id\";\n+        Optional<User> optional = Optional.of(user);\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session) {\n+            user = session.load(User.class, user.getId());\n+            if (UserType.COACH == user.getUserType()) {\n+                CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n+                CriteriaQuery<Salary> criteriaQuery = criteriaBuilder.createQuery(Salary.class);\n+                Root<Salary> root = criteriaQuery.from(Salary.class);\n+                session.createQuery(criteriaQuery.select(root)\n+                        .where(criteriaBuilder.equal(root.get(COACH_ID), user.getId())))\n+                        .getResultList()\n+                        .forEach(session::delete);\n+            }\n+            session.delete(user);\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+            optional = Optional.empty();\n+        }\n+        return optional;\n+    }\n+\n+    @Override\n+    public Optional<User> set(User user) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        Transaction transaction = session.beginTransaction();\n+        try (session){\n+            session.update(user);\n+            transaction.commit();\n+        } catch (Exception e) {\n+            transaction.rollback();\n+        }\n+        return Optional.of(user);\n+    }\n+\n+    @Override\n+    public List<User> query(ISpecification<User> specification) {\n+        Session session = HibernateUtil.getFactory().openSession();\n+        List<User> userList = new LinkedList<>();\n+        try (session) {\n+            if (specification instanceof IHibernateSpecification) {\n+                IHibernateSpecification hibernateSpecification = (IHibernateSpecification) specification;\n+                userList = session.createQuery(hibernateSpecification.getCriteriaQuery(session.getCriteriaBuilder()))\n+                        .getResultList();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        userList.removeIf(specification::isInvalid);\n+        return userList;\n+    }\n+}"
  },
  {
    "sha": "e812cd741762305922507e17a6917fc87434a87a",
    "filename": "app/src/main/java/by/academy/repository/impl/UserRepositoryDB.java",
    "status": "removed",
    "additions": 0,
    "deletions": 103,
    "changes": 103,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/repository/impl/UserRepositoryDB.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf/app/src/main/java/by/academy/repository/impl/UserRepositoryDB.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/repository/impl/UserRepositoryDB.java?ref=e5ffe37d08e7812ab69292ba6fbb6a3d32c7dfdf",
    "patch": "@@ -1,103 +0,0 @@\n-package by.academy.repository.impl;\n-\n-import by.academy.connection.ConnectionManager;\n-import by.academy.constant.SqlQuery;\n-import by.academy.exception.AppException;\n-import by.academy.model.bean.User;\n-import by.academy.model.bean.UserType;\n-import by.academy.repository.IRepository;\n-import by.academy.specification.ISpecification;\n-import by.academy.specification.SqlSpecification;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-public class UserRepositoryDB implements IRepository<User> {\n-\n-    @Override\n-    public boolean add(User user) {\n-        final int FIO = 1;\n-        final int AGE = 2;\n-        final int USER_NAME = 3;\n-        final int PASSWORD = 4;\n-        final int USER_TYPE = 5;\n-        int update = 0;\n-        try {\n-            Connection connection = ConnectionManager.getConnectionPool().getConnection();\n-            try (PreparedStatement statement = connection.prepareStatement(SqlQuery.INSERT_USER)){\n-                if (null != user) {\n-                    statement.setString(FIO, user.getFio());\n-                    statement.setInt(AGE, user.getAge());\n-                    statement.setString(USER_NAME, user.getUserName());\n-                    statement.setString(PASSWORD, user.getPassword());\n-                    statement.setString(USER_TYPE, user.getUserType().getName());\n-                    update = statement.executeUpdate();\n-                }\n-            }\n-        } catch (SQLException e) {\n-            throw new AppException(e);\n-        }\n-        return update > 0;\n-    }\n-\n-    @Override\n-    public boolean remove(User user) {\n-        final int ID = 1;\n-        int update = 0;\n-        try {\n-            Connection connection = ConnectionManager.getConnectionPool().getConnection();\n-            try (PreparedStatement statement = connection.prepareStatement(SqlQuery.DELETE_USER_BY_ID)) {\n-                if (null != user) {\n-                    statement.setLong(ID, user.getId());\n-                    update = statement.executeUpdate();\n-                }\n-            }\n-        } catch (SQLException e) {\n-            throw new AppException(e);\n-        }\n-        return update > 0;\n-    }\n-\n-    @Override\n-    public boolean set(User user) {\n-        return false;\n-    }\n-\n-    @Override\n-    public List<User> query(ISpecification<User> specification) {\n-        List<User> users = new LinkedList<>();\n-        final int ID = 1;\n-        final int FIO = 2;\n-        final int AGE = 3;\n-        final int USER_NAME = 4;\n-        final int PASSWORD = 5;\n-        final int USER_TYPE = 6;\n-        if (specification instanceof SqlSpecification) {\n-            SqlSpecification sqlSpecification = (SqlSpecification) specification;\n-            try {\n-                Connection connection = ConnectionManager.getConnectionPool().getConnection();\n-                try (PreparedStatement statement = sqlSpecification.getPreparedStatement(connection);\n-                     ResultSet resultSet = statement.executeQuery()) {\n-                    while (resultSet.next()) {\n-                        users.add(User.newBuilder()\n-                                .withId(resultSet.getLong(ID))\n-                                .withFio(resultSet.getString(FIO))\n-                                .withAge(resultSet.getInt(AGE))\n-                                .withUserName(resultSet.getString(USER_NAME))\n-                                .withPassword(resultSet.getString(PASSWORD))\n-                                .withUserType(UserType.valueOf(resultSet.getString(USER_TYPE)))\n-                                .build());\n-                    }\n-                }\n-            } catch (SQLException e) {\n-                throw new AppException(e);\n-            }\n-        }\n-        users.removeIf(specification::isSpecific);\n-        return users;\n-    }\n-}"
  },
  {
    "sha": "87652b7853e78d15f07537dfaa75608e591edf33",
    "filename": "app/src/main/java/by/academy/service/IGroupService.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/service/IGroupService.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/service/IGroupService.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/service/IGroupService.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -0,0 +1,14 @@\n+package by.academy.service;\n+\n+import by.academy.model.bean.Group;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface IGroupService {\n+    Optional<Group> addGroup(Group group);\n+    Optional<Group> setGroup(Group group);\n+    Optional<Group> removeGroup(long groupId);\n+    Optional<Group> findGroup(long groupId);\n+    List<Group> findAllGroups();\n+}"
  },
  {
    "sha": "fbfee72b4d5f0f0aab48f2579fbd41fabb8443f6",
    "filename": "app/src/main/java/by/academy/service/ISalaryService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/alparf/ITAcademyJEE/blob/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/service/ISalaryService.java",
    "raw_url": "https://github.com/alparf/ITAcademyJEE/raw/927bc549aa96847a9f3b2653204534bc825283e7/app/src/main/java/by/academy/service/ISalaryService.java",
    "contents_url": "https://api.github.com/repos/alparf/ITAcademyJEE/contents/app/src/main/java/by/academy/service/ISalaryService.java?ref=927bc549aa96847a9f3b2653204534bc825283e7",
    "patch": "@@ -3,8 +3,9 @@\n import by.academy.model.bean.Salary;\n \n import java.util.List;\n+import java.util.Optional;\n \n public interface ISalaryService {\n-    boolean addSalary(Salary salary);\n-    List<Salary> getAllByCoachId(long coachId);\n+    Optional<Salary> addSalary(Salary salary);\n+    List<Salary> findAllSalaries(long coachId);\n }"
  }
]
