[
  {
    "sha": "cb5704069fab1fbbc6f7cf4927606fe4d3b289d7",
    "filename": "Kitodo/src/main/java/org/kitodo/production/helper/SearchResultGeneration.java",
    "status": "modified",
    "additions": 17,
    "deletions": 26,
    "changes": 43,
    "blob_url": "https://github.com/kitodo/kitodo-production/blob/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/helper/SearchResultGeneration.java",
    "raw_url": "https://github.com/kitodo/kitodo-production/raw/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/helper/SearchResultGeneration.java",
    "contents_url": "https://api.github.com/repos/kitodo/kitodo-production/contents/Kitodo/src/main/java/org/kitodo/production/helper/SearchResultGeneration.java?ref=198baf7fe9870bb41d839fe37decb2fe3ab546d4",
    "patch": "@@ -67,15 +67,7 @@ public SearchResultGeneration(String filter, boolean showClosedProcesses, boolea\n      */\n     public HSSFWorkbook getResult() {\n         List<ProcessDTO> resultsWithFilter = getResultsWithFilter();\n-\n-        List<Process> processes = new ArrayList<>();\n-        try {\n-            processes = ServiceManager.getProcessService().convertDtosToBeans(resultsWithFilter);\n-        } catch (DAOException e) {\n-            logger.error(e.getMessage(), e);\n-        }\n-\n-        return getWorkbook(processes);\n+        return getWorkbook(resultsWithFilter);\n     }\n \n     private List<ProcessDTO> getResultsWithFilter() {\n@@ -115,7 +107,7 @@ public BoolQueryBuilder getQueryForFilter(ObjectType objectType) {\n         return query;\n     }\n \n-    private HSSFWorkbook getWorkbook(List<Process> processes) {\n+    private HSSFWorkbook getWorkbook(List<ProcessDTO> processDTOs) {\n         HSSFWorkbook workbook = new HSSFWorkbook();\n         HSSFSheet sheet = workbook.createSheet(\"Search results\");\n \n@@ -136,47 +128,46 @@ private HSSFWorkbook getWorkbook(List<Process> processes) {\n         rowHeader.createCell(7).setCellValue(Helper.getTranslation(\"Status\"));\n \n         int rowCounter = 2;\n-        for (Process process : processes) {\n-            prepareRow(rowCounter, sheet, process);\n+        for (ProcessDTO processDTO : processDTOs) {\n+            prepareRow(rowCounter, sheet, processDTO);\n             rowCounter++;\n         }\n         return workbook;\n     }\n \n-    private void prepareRow(int rowCounter, HSSFSheet sheet, Process process) {\n+    private void prepareRow(int rowCounter, HSSFSheet sheet, ProcessDTO processDTO) {\n         HSSFRow row = sheet.createRow(rowCounter);\n-        row.createCell(0).setCellValue(process.getTitle());\n-        row.createCell(1).setCellValue(process.getId());\n-        DateFormat df = new SimpleDateFormat(\"dd MMM yyyy kk:mm:ss z\");\n-        df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n-        String gmtCreationDate = df.format(process.getCreationDate());\n-        row.createCell(2).setCellValue(gmtCreationDate);\n+        row.createCell(0).setCellValue(processDTO.getTitle());\n+        row.createCell(1).setCellValue(processDTO.getId());\n+        row.createCell(2).setCellValue(processDTO.getCreationDate());\n \n         URI metadataFilePath;\n         int numberOfProcessImages = 0;\n         int numberOfProcessStructuralElements = 0;\n         int numberOfProcessMetadata = 0;\n         try {\n-            metadataFilePath = ServiceManager.getFileService().getMetadataFilePath(process);\n+            metadataFilePath = ServiceManager.getFileService().getMetadataFilePath(processDTO);\n             Workpiece workpiece = ServiceManager.getMetsService().loadWorkpiece(metadataFilePath);\n             numberOfProcessImages = (int) Workpiece.treeStream(workpiece.getMediaUnit())\n                     .filter(mediaUnit -> Objects.equals(mediaUnit.getType(), MediaUnit.TYPE_PAGE)).count();\n             numberOfProcessStructuralElements = (int) Workpiece.treeStream(workpiece.getRootElement()).count();\n             numberOfProcessMetadata = Math.toIntExact(MetsService.countLogicalMetadata(workpiece));\n \n         } catch (IOException e) {\n-            logger.debug(\"Metadata file not found for process with id: \" + process.getId());\n+            logger.debug(\"Metadata file not found for process with id: \" + processDTO.getId());\n         }\n \n         row.createCell(3).setCellValue(numberOfProcessImages);\n         row.createCell(4).setCellValue(numberOfProcessStructuralElements);\n         row.createCell(5).setCellValue(numberOfProcessMetadata);\n-        row.createCell(6).setCellValue(process.getProject().getTitle());\n+        row.createCell(6).setCellValue(processDTO.getProject().getTitle());\n         String sortHelperStatus = \"\";\n-        if (Objects.nonNull(process.getSortHelperStatus())) {\n-            sortHelperStatus = process.getSortHelperStatus().substring(0, 3) + \" / \"\n-                    + process.getSortHelperStatus().substring(3, 6) + \" / \"\n-                    + process.getSortHelperStatus().substring(6);\n+        String progress = ServiceManager.getProcessService().getProgress(null, processDTO.getTasks());\n+\n+        if (Objects.nonNull(progress)) {\n+            sortHelperStatus = progress.substring(0, 3) + \" / \"\n+                    + progress.substring(3, 6) + \" / \"\n+                    + progress.substring(6);\n         }\n         row.createCell(7).setCellValue(sortHelperStatus);\n     }"
  },
  {
    "sha": "68489a73e8debe98e653b67c4ede42f2179ed021",
    "filename": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/kitodo/kitodo-production/blob/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java",
    "raw_url": "https://github.com/kitodo/kitodo-production/raw/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java",
    "contents_url": "https://api.github.com/repos/kitodo/kitodo-production/contents/Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java?ref=198baf7fe9870bb41d839fe37decb2fe3ab546d4",
    "patch": "@@ -1031,6 +1031,21 @@ public URI getProcessDataDirectory(Process process, boolean forIndexingAll) {\n         return process.getProcessBaseUri();\n     }\n \n+    /**\n+     * Get process data directory.\n+     * Don't save it to the database, if it is for indexingAll.\n+     *\n+     * @param processDTO\n+     *            processDTO to get the dataDirectory from\n+     * @return path\n+     */\n+    public String getProcessDataDirectory(ProcessDTO processDTO) {\n+        if (Objects.isNull(processDTO.getProcessBaseUri())) {\n+            processDTO.setProcessBaseUri(fileService.getProcessBaseUriForExistingProcess(processDTO));\n+        }\n+        return processDTO.getProcessBaseUri();\n+    }\n+\n     /**\n      * Get process data directory.\n      *\n@@ -1194,8 +1209,8 @@ public TaskDTO getCurrentTaskDTO(ProcessDTO processDTO) {\n      *            list of Task bean objects\n      * @return string\n      */\n-    public String getProgress(List<Task> tasksBean) {\n-        Map<String, Integer> tasks = getCalculationForProgress(tasksBean, null);\n+    public String getProgress(List<Task> tasksBean, List<TaskDTO> taskDTOS) {\n+        Map<String, Integer> tasks = getCalculationForProgress(tasksBean, taskDTOS);\n \n         double closed = calculateProgressClosed(tasks);\n         double inProcessing = calculateProgressInProcessing(tasks);"
  },
  {
    "sha": "ca57108e349cc93eb81e85b96e7c314cfb160066",
    "filename": "Kitodo/src/main/java/org/kitodo/production/services/file/FileService.java",
    "status": "modified",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/kitodo/kitodo-production/blob/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/services/file/FileService.java",
    "raw_url": "https://github.com/kitodo/kitodo-production/raw/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/services/file/FileService.java",
    "contents_url": "https://api.github.com/repos/kitodo/kitodo-production/contents/Kitodo/src/main/java/org/kitodo/production/services/file/FileService.java?ref=198baf7fe9870bb41d839fe37decb2fe3ab546d4",
    "patch": "@@ -53,6 +53,7 @@\n import org.kitodo.data.database.exceptions.DAOException;\n import org.kitodo.exceptions.CommandException;\n import org.kitodo.exceptions.InvalidImagesException;\n+import org.kitodo.production.dto.ProcessDTO;\n import org.kitodo.production.file.BackupFileRotation;\n import org.kitodo.production.helper.Helper;\n import org.kitodo.production.helper.metadata.ImageHelper;\n@@ -719,6 +720,17 @@ public URI getMetadataFilePath(Process process) throws IOException {\n         return getMetadataFilePath(process, true, false);\n     }\n \n+    /**\n+     * Gets the URI of the metadata.xml of a given processDTO.\n+     *\n+     * @param processDTO\n+     *            the process to get the metadata.xml for.\n+     * @return The URI to the metadata.xml\n+     */\n+    public URI getMetadataFilePath(ProcessDTO processDTO) throws IOException {\n+        return getMetadataFilePath(processDTO, true);\n+    }\n+\n     /**\n      * Gets the URI of the metadata.xml of a given process.\n      *\n@@ -736,6 +748,23 @@ public URI getMetadataFilePath(Process process, boolean mustExist, boolean forIn\n         return metadataFilePath;\n     }\n \n+    /**\n+     * Gets the URI of the metadata.xml of a given processDTO.\n+     *\n+     * @param processDTO\n+     *            the process to get the metadata.xml for.\n+     * @param mustExist\n+     *            whether the file must exist\n+     * @return The URI to the metadata.xml\n+     */\n+    public URI getMetadataFilePath(ProcessDTO processDTO, boolean mustExist) throws IOException {\n+        URI metadataFilePath = getProcessSubTypeURI(processDTO, ProcessSubType.META_XML, null);\n+        if (mustExist && !fileExist(metadataFilePath)) {\n+            throw new IOException(Helper.getTranslation(\"metadataFileNotFound\", Collections.singletonList(metadataFilePath.getPath())));\n+        }\n+        return metadataFilePath;\n+    }\n+\n     private String getTemporaryMetadataFileName(URI fileName) {\n         File temporaryFile = getFile(fileName);\n         String directoryPath = temporaryFile.getParentFile().getPath();\n@@ -864,6 +893,23 @@ public URI getProcessBaseUriForExistingProcess(Process process) {\n         return process.getProcessBaseUri();\n     }\n \n+    /**\n+     * This method is needed for migration purposes. It maps existing filePaths\n+     * to the correct URI. File.separator doesn't work because on Windows it\n+     * appends backslash to URI.\n+     *\n+     * @param processDTO\n+     *            the process, the uri is needed for.\n+     * @return the URI.\n+     */\n+    public String getProcessBaseUriForExistingProcess(ProcessDTO processDTO) {\n+        String processBaseUri = processDTO.getProcessBaseUri();\n+        if (Objects.isNull(processBaseUri) && Objects.nonNull(processDTO.getId())) {\n+            processDTO.setProcessBaseUri(fileManagementModule.createUriForExistingProcess(processDTO.getId().toString()).toString());\n+        }\n+        return processDTO.getProcessBaseUri();\n+    }\n+\n     /**\n      * Get the URI for a process sub-location. Possible locations are listed in\n      * ProcessSubType.\n@@ -942,6 +988,30 @@ private URI getProcessSubTypeURI(Process process, ProcessSubType processSubType,\n             Helper.getNormalizedTitle(process.getTitle()), processSubType, resourceName);\n     }\n \n+    /**\n+     * Gets the URI for a Process Sub-location. Possible Locations are listed\n+     * in ProcessSubType\n+     *\n+     * @param processDTO\n+     *            the process to get the sublocation for.\n+     * @param processSubType\n+     *            The subType.\n+     * @param resourceName\n+     *            the name of the single object (e.g. image) if null, the root\n+     *            folder of the sublocation is returned\n+     * @return The URI of the requested location\n+     */\n+    private URI getProcessSubTypeURI(ProcessDTO processDTO, ProcessSubType processSubType, String resourceName) {\n+\n+        String processDataDirectory = ServiceManager.getProcessService().getProcessDataDirectory(processDTO);\n+\n+        if (Objects.isNull(resourceName)) {\n+            resourceName = \"\";\n+        }\n+        return fileManagementModule.getProcessSubTypeUri(URI.create(processDataDirectory),\n+                Helper.getNormalizedTitle(processDTO.getTitle()), processSubType, resourceName);\n+    }\n+\n     /**\n      * Get part of the URI for specific process.\n      *"
  },
  {
    "sha": "837ff9cd0a0d61f6ee45f2b2e444297ce4d235e5",
    "filename": "Kitodo/src/main/java/org/kitodo/production/services/workflow/WorkflowControllerService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kitodo/kitodo-production/blob/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/services/workflow/WorkflowControllerService.java",
    "raw_url": "https://github.com/kitodo/kitodo-production/raw/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/main/java/org/kitodo/production/services/workflow/WorkflowControllerService.java",
    "contents_url": "https://api.github.com/repos/kitodo/kitodo-production/contents/Kitodo/src/main/java/org/kitodo/production/services/workflow/WorkflowControllerService.java?ref=198baf7fe9870bb41d839fe37decb2fe3ab546d4",
    "patch": "@@ -712,7 +712,7 @@ private void verifyTask(Task task) {\n      */\n     public static void updateProcessSortHelperStatus(Process process) {\n         if (!process.getTasks().isEmpty()) {\n-            String value = ServiceManager.getProcessService().getProgress(process.getTasks());\n+            String value = ServiceManager.getProcessService().getProgress(process.getTasks(), null);\n             process.setSortHelperStatus(value);\n         }\n     }"
  },
  {
    "sha": "f630792a9518b4f1876945a7233b62994767c29c",
    "filename": "Kitodo/src/test/java/org/kitodo/production/services/data/ProcessServiceIT.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kitodo/kitodo-production/blob/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/test/java/org/kitodo/production/services/data/ProcessServiceIT.java",
    "raw_url": "https://github.com/kitodo/kitodo-production/raw/198baf7fe9870bb41d839fe37decb2fe3ab546d4/Kitodo/src/test/java/org/kitodo/production/services/data/ProcessServiceIT.java",
    "contents_url": "https://api.github.com/repos/kitodo/kitodo-production/contents/Kitodo/src/test/java/org/kitodo/production/services/data/ProcessServiceIT.java?ref=198baf7fe9870bb41d839fe37decb2fe3ab546d4",
    "patch": "@@ -398,7 +398,7 @@ public void shouldGetCurrentTask() throws Exception {\n     public void shouldGetProgress() throws Exception {\n         Process process = processService.getById(1);\n \n-        String progress = processService.getProgress(process.getTasks());\n+        String progress = processService.getProgress(process.getTasks(), null);\n         assertEquals(\"Progress doesn't match given plain text!\", \"040020020020\", progress);\n     }\n "
  }
]
