[
  {
    "sha": "61badd98dce2f8875f5f888211624e1dab3dafcd",
    "filename": "LoginChecker.java",
    "status": "added",
    "additions": 129,
    "deletions": 0,
    "changes": 129,
    "blob_url": "https://github.com/SpilledCofee/DataBase/blob/96316e53ae904577c5ff947d4c2ef8288453e44f/LoginChecker.java",
    "raw_url": "https://github.com/SpilledCofee/DataBase/raw/96316e53ae904577c5ff947d4c2ef8288453e44f/LoginChecker.java",
    "contents_url": "https://api.github.com/repos/SpilledCofee/DataBase/contents/LoginChecker.java?ref=96316e53ae904577c5ff947d4c2ef8288453e44f",
    "patch": "@@ -0,0 +1,129 @@\n+/*\r\n+This will use the user_information csv to check if the user exists via their email.\r\n+It makes an array of the csv file then checks to see if the email exists.\r\n+    -If the email doesn't exist it will ask if the user wants to try again with yes or no;\r\n+        If the user selects no it will exit the program;\r\n+    -if email exists it asks for the password.\r\n+        The user then has three attempts to get the password right before it will quit\r\n+ */\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+import java.util.ArrayList;\r\n+\r\n+public class LoginChecker {\r\n+\r\n+    private Scanner in;\r\n+    private String USER_FILE = \"user_information.csv\";\r\n+    private ArrayList<User> userArray;\r\n+    private boolean emailOK, passOK, valid;\r\n+    private final int MAX_ATTEMPTS = 3;\r\n+    private User user;\r\n+    private int rank;\r\n+\r\n+    //This will run all the methods and make a new user with the info gathered\r\n+    public LoginChecker(){\r\n+        emailOK = passOK = valid= false;\r\n+        userArray = new ArrayList<>(2000);\r\n+        in = new Scanner(System.in);\r\n+        try {\r\n+            loadFile();\r\n+        } catch (FileNotFoundException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        //This way you can auto run methods just by calling the LoginChecker class\r\n+        checkEmail();\r\n+        if(emailOK) {\r\n+            checkPassword();\r\n+        }\r\n+        if(emailOK && passOK){\r\n+            valid = true;\r\n+        }\r\n+    }\r\n+\r\n+    public void loadFile() throws FileNotFoundException {\r\n+        try {\r\n+            Scanner fileReader = new Scanner(new FileInputStream(USER_FILE));\r\n+            //This will get past the first line that is just the titles of the colums and not data\r\n+            String titles = fileReader.nextLine();\r\n+            //This loop will extrapulate the data from each line and create a user with the line's data\r\n+            while(fileReader.hasNextLine()) {\r\n+                String line = fileReader.nextLine();\r\n+                int end = line.indexOf(\",\", 0);\r\n+                String first_name = line.substring(0, end);\r\n+                int start = end + 1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String last_name = line.substring(start, end);\r\n+                start = end + 1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String e_mail = line.substring(start, end);\r\n+                start = end + 1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String location = line.substring(start, end);\r\n+                start = end +1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String password = line.substring(start, end);\r\n+                String tempRank = line.substring(end + 1);\r\n+                int rank = Integer.parseInt(tempRank);\r\n+                User user = new User(first_name, last_name, e_mail, location, password, rank);\r\n+                userArray.add(user);}\r\n+            fileReader.close();\r\n+\r\n+        }catch (FileNotFoundException fileNotFoundException) { }\r\n+    }\r\n+\r\n+    public boolean checkEmail(){\r\n+        String tempEmail;\r\n+        System.out.println(\"Enter your email\");\r\n+        tempEmail = in.nextLine();\r\n+\r\n+        for (int i = 0; i < userArray.size(); i++) {\r\n+            if(tempEmail.equalsIgnoreCase(userArray.get(i).getEmail())){\r\n+                user = userArray.get(i);\r\n+                rank = user.getRank();\r\n+                emailOK = true;\r\n+                break;\r\n+            }\r\n+        }\r\n+        if(emailOK == false){\r\n+            System.out.println(\"Email not found.\");\r\n+            System.out.println(\"Would you like to try again? 'yes' or 'no'\");\r\n+            String answer = in.nextLine();\r\n+\r\n+            if(answer.contains(\"y\")){\r\n+                checkEmail();\r\n+            }\r\n+            else{\r\n+                System.out.println(\"Ok. Good bye!\");//I kept accidentally not realizing I chose no...\r\n+                System.exit(1);\r\n+            }\r\n+        }\r\n+        return emailOK;\r\n+    }\r\n+    //This checks the usserArray to see if a email exists. It isn't case sensitive,\r\n+    public boolean checkPassword() {\r\n+        int attempts = 0;\r\n+        System.out.println(\"Welcome back \" + user.getFirstName() + \"!\");\r\n+        System.out.println(\"Enter you password:\");\r\n+        boolean done = false;\r\n+        while ((attempts < MAX_ATTEMPTS)){\r\n+            String password = in.nextLine();\r\n+            if(password.equals(user.getUserPassword())){\r\n+                passOK = true;\r\n+                break;\r\n+            }\r\n+            else {\r\n+                System.out.println(\"Password is incorrect!\");\r\n+            }\r\n+            attempts++;\r\n+            //System.out.println(attempts);\r\n+        }\r\n+        if(passOK == false){\r\n+            System.out.println(\"Sorry, you reached your maximum attempts has been reached.\");\r\n+            System.exit(1);\r\n+        }\r\n+        return passOK;\r\n+    }\r\n+    public boolean getValid(){return valid;}\r\n+    public int getRank(){return rank;}\r\n+}//FIN\r"
  },
  {
    "sha": "c41ec9492c2627993b5140ad9c785b76d0800fc7",
    "filename": "Password.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/SpilledCofee/DataBase/blob/96316e53ae904577c5ff947d4c2ef8288453e44f/Password.java",
    "raw_url": "https://github.com/SpilledCofee/DataBase/raw/96316e53ae904577c5ff947d4c2ef8288453e44f/Password.java",
    "contents_url": "https://api.github.com/repos/SpilledCofee/DataBase/contents/Password.java?ref=96316e53ae904577c5ff947d4c2ef8288453e44f",
    "patch": "@@ -0,0 +1,107 @@\n+/*\r\n+Discription: This will create a password and see if the password is valid.\r\n+*****This doesn't have a main method and will need to be looped in the class you are using it to get a calid password.\r\n+***It can return if the password is a good one\r\n+*** See use of it in UserMaker\r\n+ */\r\n+import java.io.*;\r\n+import java.util.*;\r\n+\r\n+public class Password {\r\n+    //Thses are vaiables tha will be used to check if the password is good\r\n+    private boolean valid;\r\n+    private boolean lengthOK, caseOK, digitOK, specialCharaterOK;\r\n+    private String password;\r\n+    private final int MIN_LENGTH = 8;\r\n+    private int length;\r\n+    private Scanner in = new Scanner(System.in);\r\n+    private String s = \"----------------------------------------\"; // separator\r\n+\r\n+    /*Calling the class with call it to run all of its methods\r\n+    public Password(){\r\n+        printRules();\r\n+        inputPassword();\r\n+        checkPassword();\r\n+    }\r\n+     */\r\n+\r\n+//Informs the user of how to create a valid password\r\n+    public void printRules(){\r\n+        System.out.println(\"Password:\"\r\n+                + \"\\n - Must be at least \" + MIN_LENGTH + \"character long\"\r\n+                + \"\\n - Must contain at least one uppercase letter\"\r\n+                + \"\\n - Contains at least one lowercase letter\"\r\n+                + \"\\n - Contains at least one special letter\"\r\n+        );\r\n+    }\r\n+    public void inputPassword(){\r\n+        System.out.println(\"Please enter a password\");\r\n+        password = in.nextLine();\r\n+        System.out.println(\"You've entered: \" + password);\r\n+    }\r\n+\r\n+\r\n+    public void checkPassword(){\r\n+        checkLength();\r\n+        checkCase();\r\n+        checkDigit();\r\n+        checkSpecailChacter();\r\n+        valid = lengthOK && caseOK && digitOK && specialCharaterOK;\r\n+    }//end CheckPassword\r\n+\r\n+    //Checks to see if the length is at least as large as the MIN_LENGTH\r\n+    private void checkLength(){\r\n+        length = password.length();\r\n+        if(length >= MIN_LENGTH){\r\n+            lengthOK = true;\r\n+        }\r\n+        else{\r\n+            lengthOK = false;\r\n+            System.out.println(\"**PASSWORD TOO SHORT! \");\r\n+            System.out.println(\"Must be at least \" + MIN_LENGTH + \"character long\");\r\n+        }\r\n+    }//end checkLength\r\n+\r\n+    //Checks to see if there is at least one uppercase letter\r\n+    //I can add a bit more here if we want to check for a lowercase letter as well\r\n+    private void checkCase(){\r\n+        for(int i = 0; i <password.length(); i++){\r\n+            if(Character.isUpperCase(password.charAt(i))){\r\n+                caseOK = true;\r\n+                break;\r\n+            }\r\n+            if (caseOK = false){\r\n+                System.out.println(\"Your password must contain at least one uppercase letter\");\r\n+            }\r\n+        }\r\n+\r\n+    }//end checkCase\r\n+\r\n+    private void checkDigit(){\r\n+        for(int i = 0; i <password.length(); i++) {\r\n+            if (Character.isDigit(password.charAt(i))) {\r\n+                digitOK = true;\r\n+                break;\r\n+            }\r\n+        }\r\n+        if(digitOK == false){\r\n+            System.out.println(\"Your password must contain at least one number\");\r\n+        }\r\n+    }//end checkDigit\r\n+\r\n+    private void checkSpecailChacter(){\r\n+        for(int i = 0; i <password.length(); i++) {\r\n+            if (!Character.isDigit(password.charAt(i)) && !Character.isLetter(password.charAt(i))) {\r\n+                specialCharaterOK = true;\r\n+                break;\r\n+            }\r\n+        }\r\n+        if(specialCharaterOK == false){\r\n+            System.out.println(\"Your password must contain at least one special character\");\r\n+        }\r\n+    }//end checkSpecialCharacter\r\n+    //This will allow other methods to use this class\r\n+    public String getPassword(){ return password;}\r\n+    public boolean getValid(){return valid;}\r\n+    public void setPassword(String password) {this.password = password; }\r\n+}//FIN\n\\ No newline at end of file"
  },
  {
    "sha": "98dd6dccb07a4f167b30a4a41223125bc5872e08",
    "filename": "User.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/SpilledCofee/DataBase/blob/96316e53ae904577c5ff947d4c2ef8288453e44f/User.java",
    "raw_url": "https://github.com/SpilledCofee/DataBase/raw/96316e53ae904577c5ff947d4c2ef8288453e44f/User.java",
    "contents_url": "https://api.github.com/repos/SpilledCofee/DataBase/contents/User.java?ref=96316e53ae904577c5ff947d4c2ef8288453e44f",
    "patch": "@@ -0,0 +1,59 @@\n+/*\r\n+This makes a user object\r\n+ */\r\n+\r\n+public class User{\r\n+\r\n+    // These ranks can be used to determine how much someone can interface with the data base\r\n+    // may are may not be useful;\r\n+    private final int MASTER = 1;\r\n+    private final int EMPLOYEE = 2;\r\n+    private final int CUSTOMER = 3;\r\n+\r\n+    //The information contained in user_information.csv\r\n+    private String firstName, lastName, email, location, userPassword;\r\n+    private int rank;\r\n+\r\n+    //A constructor that can take direct input, will be useful for reading form CSV file\r\n+    public User(String firstName, String lastName, String email, String location, String userPassword, int rank){\r\n+        this.firstName = firstName;\r\n+        this.lastName = lastName;\r\n+        this.email = email;\r\n+        this.location = location;\r\n+        //It was decided that not having username as well would be easier for now\r\n+        //this.userName = userName;\r\n+        this.userPassword = userPassword;\r\n+        this.rank = rank;\r\n+    }\r\n+    //Getters\r\n+    public String getFirstName() {return firstName;}\r\n+    public String getLastName() {return lastName;}\r\n+    public String getEmail() {return email;}\r\n+    public String getLocation() {return location; }\r\n+    //public String getUserName() {return userName;}\r\n+    public String getUserPassword() {return userPassword;}\r\n+    public int getRank() {return rank;}\r\n+\r\n+    //Setters\r\n+\r\n+\r\n+    public void setFirstName(String firstName) {this.firstName = firstName; }\r\n+    public void setLastName(String lastName){this.lastName = lastName;}\r\n+    public void setEmail(String email) {this.email = email;}\r\n+    public void setLocation(String location) {this.location = location;}\r\n+    //public void setUserName(String userName) {this.userName = userName;}\r\n+    public void setUserPassword(String userPassword) {this.userPassword = userPassword;}\r\n+    public void setRank(int rank) {this.rank = rank;}\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        //first_name,last_name,email,location,password,rank\r\n+        return firstName + \",\"\r\n+            + lastName + \",\"\r\n+            + email + \",\"\r\n+            + location + \",\"\r\n+            + userPassword + \",\"\r\n+            + rank;\r\n+    }\r\n+}//FIN\r\n+\r"
  },
  {
    "sha": "b80c2a33b6d885cdb9ee45740ae75f3cc5c36ca3",
    "filename": "UserMaker.java",
    "status": "added",
    "additions": 318,
    "deletions": 0,
    "changes": 318,
    "blob_url": "https://github.com/SpilledCofee/DataBase/blob/96316e53ae904577c5ff947d4c2ef8288453e44f/UserMaker.java",
    "raw_url": "https://github.com/SpilledCofee/DataBase/raw/96316e53ae904577c5ff947d4c2ef8288453e44f/UserMaker.java",
    "contents_url": "https://api.github.com/repos/SpilledCofee/DataBase/contents/UserMaker.java?ref=96316e53ae904577c5ff947d4c2ef8288453e44f",
    "patch": "@@ -0,0 +1,318 @@\n+/*\r\n+This is an interface that can create a new employee or customer. It uses a rank system to determine if\r\n+the person using it has permission to create an employee\r\n+ */\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+import java.util.ArrayList;\r\n+\r\n+public class UserMaker {\r\n+\r\n+    // These ranks can't be used to determine how much someone can interface with the data base\r\n+    // may are may not be useful;\r\n+    private final int MASTER = 1;\r\n+    private final int EMPLOYEE = 2;\r\n+    private final int CUSTOMER = 3;\r\n+\r\n+    //These variables are validate that users are putting in good info\r\n+    //Probably not needed but there just in case.\r\n+    private boolean firstOK, lastOK, emailOK, locationOK;\r\n+\r\n+    private String firstName, lastName, email, location, password;\r\n+    private Password pass;\r\n+    private int rank;\r\n+    private Scanner in;\r\n+    private String USER_FILE = \"user_information.csv\";\r\n+    private ArrayList<User> userArray;\r\n+    //making a new instance of this class will have it run though its methods\r\n+    public UserMaker(){\r\n+        userArray = new ArrayList<>(2000);\r\n+        in = new Scanner(System.in);\r\n+        rank = CUSTOMER;//default\r\n+        try {\r\n+            loadFile();\r\n+        } catch (FileNotFoundException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        System.out.println(\"Welcome!\");\r\n+        chooseCreator();\r\n+    }\r\n+\r\n+    //This will run all the methods that get valid pieces of info\r\n+    public void createNewUser(){\r\n+        printRules();\r\n+        firstName = createFirstName();\r\n+        lastName = createLastName();\r\n+        email = createEmail();\r\n+        //userName = createUserName();\r\n+        boolean passok = false;\r\n+        pass = new Password();\r\n+        while(passok == false) {\r\n+            pass.printRules();\r\n+            pass.inputPassword();\r\n+            pass.checkPassword();\r\n+            passok = pass.getValid();\r\n+        }\r\n+        password = pass.getPassword();\r\n+        location = createLocation();\r\n+\r\n+        //The methods themselves should have enough checkers to make sure all pieces of info are good\r\n+        //But this is a final precausion just in case.\r\n+        //REFERENCE: first_name,last_name,email,location,user_name,password,rank\r\n+        if(firstOK && lastOK && emailOK && locationOK) {\r\n+            User user = new User(firstName, lastName, email, location, password, rank);\r\n+            userArray.add(user);\r\n+\r\n+            try {\r\n+                saveFile();\r\n+            } catch (FileNotFoundException fileNotFoundException) {\r\n+                fileNotFoundException.printStackTrace();\r\n+            }\r\n+            System.out.println(\"User: \" + email + \" has been added!\");\r\n+            System.exit(1);\r\n+        }\r\n+        else{\r\n+            System.out.println(\"Sorry, something went wrong!\");\r\n+        }\r\n+    }\r\n+    //Only masters are given access to this method and so they can choose to make a regular employee or another master\r\n+    private void chooseEmployeeType() {\r\n+        int authorityLVL = 0;\r\n+        String line = null;\r\n+\r\n+        System.out.println(\"How much access do you want to give this new employee?\");\r\n+        System.out.println(\"for limited access type 'a'.\");\r\n+        System.out.println(\"For full access type 'b'.\");\r\n+        while (authorityLVL == 0) {\r\n+            line = in.nextLine();\r\n+            if(line.contains(\"a\")){\r\n+                authorityLVL = rank = EMPLOYEE;\r\n+            }\r\n+            else if(line.contains(\"b\")){\r\n+                System.out.println(\"Are you sure you want to give this person full access to the data base?\");\r\n+                System.out.println(\"'yes' or 'no'\");\r\n+                String answer = in.nextLine();\r\n+                if(answer.contains(\"yes\")){\r\n+                    authorityLVL = rank = MASTER;\r\n+                }\r\n+                else{\r\n+                    authorityLVL= rank = 2;\r\n+                    System.out.println(\"That's ok.\");\r\n+                    System.out.println(\"Your new employee has only been given limited access for now.\");\r\n+                    System.out.println(\"You can make up your mind later.\");\r\n+                }\r\n+            }\r\n+            else if(line.contains(\"b\")){\r\n+                authorityLVL = 2;\r\n+                System.out.println(\"you have given\" + firstName + \"limited access.\");\r\n+             }\r\n+            else{\r\n+                System.out.println(\"Invalid answer: Type 'a' or 'b'\");\r\n+            }\r\n+        }\r\n+    }\r\n+//This loads the user_information.csv File\r\n+    public void loadFile() throws FileNotFoundException {\r\n+        try {\r\n+            Scanner fileReader = new Scanner(new FileInputStream(USER_FILE));\r\n+            //This will get past the first line that is just the titles of the columns and not data\r\n+            String titles = fileReader.nextLine();\r\n+            //This loop will extrapulate the data from each line and create a user with the line's data\r\n+            while(fileReader.hasNextLine()) {\r\n+                String line = fileReader.nextLine();\r\n+                int end = line.indexOf(\",\", 0);\r\n+                String first_name = line.substring(0, end);\r\n+                int start = end + 1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String last_name = line.substring(start, end);\r\n+                start = end + 1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String e_mail = line.substring(start, end);\r\n+                start = end + 1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String location = line.substring(start, end);\r\n+                start = end +1;\r\n+                end = line.indexOf(\",\", start);\r\n+                String password = line.substring(start, end);\r\n+                String tempRank = line.substring(end + 1);\r\n+                int rank = Integer.parseInt(tempRank);\r\n+                User user = new User(first_name, last_name, e_mail, location, password, rank);\r\n+                userArray.add(user);}\r\n+                fileReader.close();\r\n+\r\n+            }catch (FileNotFoundException fileNotFoundException) { }\r\n+        //TESTING!!!!\r\n+        //System.out.println(userArray.get(0).getFirstName());\r\n+        //System.out.println(userArray.get(0).getEmail());\r\n+    }\r\n+\r\n+    //This will take all the userArray in the array and save them back onto the CSV file\r\n+    public void saveFile() throws FileNotFoundException {\r\n+        try {\r\n+            PrintWriter out = new PrintWriter(USER_FILE);\r\n+            //This puts back the labels that the loadFile removed\r\n+            out.println(\"first_name,last_name,email,location,user_name,password,rank\");\r\n+            int i = 0;\r\n+\r\n+            while(i < userArray.size()){\r\n+                String saved = userArray.get(i).toString();\r\n+                out.println(saved);\r\n+                i++;\r\n+            }\r\n+            out.close();\r\n+            } catch(FileNotFoundException e) {}\r\n+\r\n+    }\r\n+\r\n+    //This prints out the rules for creating a new user\r\n+    public void printRules(){\r\n+        System.out.println(\"Please provide the following information:\");\r\n+        System.out.println(\"1. First Name\");\r\n+        System.out.println(\"2. Last Name\");\r\n+        System.out.println(\"3. Email\");\r\n+        System.out.println(\"4. Zip code\");\r\n+        System.out.println(\"5. A user name\");\r\n+        System.out.println(\"6. A password\");\r\n+    }\r\n+\r\n+    //This will prompt user for their first name and verify that it has a capital first letter\r\n+    public String createFirstName(){\r\n+        String name = null;\r\n+        firstOK = false;\r\n+        System.out.println(\"First Name:\");\r\n+        while(firstOK != true){\r\n+            name = in.nextLine();\r\n+            int min_nameLegnth = 2;\r\n+            if(Character.isUpperCase(name.charAt(0)) && name.length() >= min_nameLegnth) {\r\n+                for (int i = 1; i < name.length(); i++) {\r\n+                    if (!Character.isLetter(name.charAt(i))) {\r\n+                        break;\r\n+                    }\r\n+                    firstOK = true;\r\n+                }\r\n+            }\r\n+            else{\r\n+                System.out.println(\"Please enter a valid name. For example: Angel\");\r\n+            }\r\n+        }\r\n+        return name;\r\n+    }\r\n+//Does basically the same thing as firstName\r\n+    public String createLastName(){\r\n+        String name = null;\r\n+        lastOK = false;\r\n+        System.out.println(\"Last Name:\");\r\n+        while(lastOK != true){\r\n+            name = in.nextLine();\r\n+            int min_nameLegnth = 2;\r\n+            if(Character.isUpperCase(name.charAt(0)) && name.length() >= min_nameLegnth) {\r\n+                for (int i = 1; i < name.length(); i++) {\r\n+                    if (!Character.isLetter(name.charAt(i))) {\r\n+                        break;\r\n+                    }\r\n+                    lastOK = true;\r\n+                }\r\n+            }\r\n+            else{\r\n+                System.out.println(\"Please enter a valid name. For example: Gonzales or McDonald\");\r\n+            }\r\n+        }\r\n+        return name;\r\n+    }\r\n+    //This will prompt user for their email and verify that it is valid\r\n+    //It only checks to see it there is an @ and . (minmal validation)\r\n+    public String createEmail(){\r\n+        String e = null;\r\n+        emailOK = false;\r\n+        System.out.println(\"Email:\");\r\n+        while(emailOK == false){\r\n+            e = in.nextLine();\r\n+            if(e.contains(\"@\") && e.contains(\".\")){\r\n+                emailOK = true;\r\n+            }\r\n+            else{\r\n+                System.out.println(\"**The email you entered is not valid\");\r\n+                System.out.println(\"Please try again.\");\r\n+            }\r\n+        }\r\n+        return e;\r\n+    }//end createEmail\r\n+\r\n+    //This will prompt user for the user's zip code, valid if it has 5 digits\r\n+    public String createLocation(){\r\n+        String zip = null;\r\n+        int zipLength = 5;\r\n+        String  userInput;\r\n+        locationOK = false;\r\n+        boolean validLength = false;\r\n+        boolean isNumber = false;\r\n+        System.out.println(\"Please enter a your zip code.\");\r\n+        while(locationOK == false){\r\n+            userInput = in.nextLine();\r\n+            if(userInput.length() == zipLength){\r\n+                validLength = true;\r\n+            }\r\n+            for (int i = 0; i < zipLength; i++) {\r\n+                if(!Character.isDigit(userInput.charAt(i))){\r\n+                    break;\r\n+                }\r\n+                else{\r\n+                    isNumber = true;\r\n+                }\r\n+            }\r\n+            if(validLength == true && isNumber == true){\r\n+                zip = userInput;\r\n+                locationOK = true;\r\n+            }\r\n+            else{\r\n+                System.out.println(\"**The zip code you entered is not valid\");\r\n+                System.out.println(\"Please try again.\");\r\n+            }\r\n+\r\n+        }\r\n+        return zip;\r\n+    }//end createLocation\r\n+\r\n+        /*\r\n+        -This method will check to see if the user who is trying to make a new employee/master is as Master user\r\n+        -It will allow the master user to assign the created user as either another master or an employee\r\n+         */\r\n+        public boolean verifyAuthority(){\r\n+            String line;\r\n+            User temp = null;\r\n+            boolean valid = false;\r\n+            System.out.println(\"Before you begin, we need to verify that you have permission.\");\r\n+            LoginChecker login = new LoginChecker();\r\n+            int tempRank = login.getRank();\r\n+            if(login.getValid() && tempRank == MASTER){\r\n+                valid = true;\r\n+            }\r\n+            if(tempRank != MASTER){\r\n+                System.out.println(\"You do not have permission to create a new employee.\");\r\n+                System.exit(1);\r\n+            }\r\n+            return valid;\r\n+        }//end verifyAuthority\r\n+\r\n+        //This allowers the user to either create a new customer or employee/master\r\n+        public void chooseCreator(){\r\n+            System.out.println(\"If you are a new customer type in a.\");\r\n+            System.out.println(\"If you are trying to create an account for a new employee type b.\");\r\n+            String line;\r\n+            line = in.nextLine();\r\n+            if(line.contains(\"a\")){\r\n+                createNewUser();\r\n+            }\r\n+            else if (line.contains(\"b\")){\r\n+                if(verifyAuthority()) {\r\n+                    chooseEmployeeType();\r\n+                    createNewUser();\r\n+                }\r\n+            }\r\n+            else{\r\n+                    System.out.println(\"**That was not a valid answer\");\r\n+                    chooseCreator();\r\n+            }\r\n+        }//end chooseCreator\r\n+}//FIN\r"
  }
]
