[
  {
    "sha": "7cbcb4d6978e0a5abb75557a9357b7ed8e2a7134",
    "filename": "src/main/java/org/jabref/model/entry/Month.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/main/java/org/jabref/model/entry/Month.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/main/java/org/jabref/model/entry/Month.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/main/java/org/jabref/model/entry/Month.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -110,7 +110,7 @@\n      * @return the corresponding month instance, empty if input is not in German\n      *         form\n      */\n-    private static Optional<Month> parseGermanShortMonth(String value) {\n+    public static Optional<Month> parseGermanShortMonth(String value) {\n         value = value.toLowerCase();\n         switch (value) {\n             case \"jan\":"
  },
  {
    "sha": "d49a6ac69ac14761b324eb0a6088103f252ae449",
    "filename": "src/test/java/org/jabref/logic/integrity/BracketCheckerTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/BracketCheckerTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/BracketCheckerTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/integrity/BracketCheckerTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -41,4 +41,23 @@ void fieldDoesNotAcceptUnexpectedOpeningBracket() {\n         assertNotEquals(Optional.empty(), checker.checkValue(\"{\"));\n     }\n \n+    @Test\n+    void fieldAcceptsFirstCharacterNotABracket() {\n+        assertEquals(Optional.empty(), checker.checkValue(\"test{x}\"));\n+    }\n+\n+    @Test\n+    void fieldAcceptsLastCharacterNotABracket() {\n+        assertEquals(Optional.empty(), checker.checkValue(\"{x}test\"));\n+    }\n+\n+    @Test\n+    void fieldAcceptsFirstAndLastCharacterNotABracket() {\n+        assertEquals(Optional.empty(), checker.checkValue(\"test{x}test\"));\n+    }\n+\n+    @Test\n+    void fieldAcceptsEmptyInput() {\n+        assertEquals(Optional.empty(), checker.checkValue(\"\"));\n+    }\n }"
  },
  {
    "sha": "23b82fc407ea0ea3f8323b9e68159fc2c6567b56",
    "filename": "src/test/java/org/jabref/logic/integrity/CitationKeyCheckerTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 4,
    "changes": 33,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/CitationKeyCheckerTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/CitationKeyCheckerTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/integrity/CitationKeyCheckerTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -1,7 +1,9 @@\n package org.jabref.logic.integrity;\n \n import java.util.Collections;\n+import java.util.List;\n \n+import org.jabref.logic.l10n.Localization;\n import org.jabref.model.entry.BibEntry;\n import org.jabref.model.entry.field.InternalField;\n import org.jabref.model.entry.field.StandardField;\n@@ -13,14 +15,37 @@\n public class CitationKeyCheckerTest {\n \n     private final CitationKeyChecker checker = new CitationKeyChecker();\n-    private final BibEntry entry = new BibEntry();\n \n     @Test\n     void bibTexAcceptsKeyFromAuthorAndYear() {\n-        entry.setField(InternalField.KEY_FIELD, \"Knuth2014\");\n-        entry.setField(StandardField.AUTHOR, \"Knuth\");\n-        entry.setField(StandardField.YEAR, \"2014\");\n+        BibEntry entry = new BibEntry().withField(InternalField.KEY_FIELD, \"Knuth2014\")\n+                                       .withField(StandardField.AUTHOR, \"Knuth\")\n+                                       .withField(StandardField.YEAR, \"2014\");\n         assertEquals(Collections.emptyList(), checker.check(entry));\n     }\n \n+    @Test\n+    void KeyFromAuthorAndTitle() {\n+        BibEntry entry = new BibEntry().withField(InternalField.KEY_FIELD, \"BrownTheTitle\")\n+                                       .withField(StandardField.AUTHOR, \"Brown\")\n+                                       .withField(StandardField.TITLE, \"The Title\");\n+        assertEquals(Collections.emptyList(), checker.check(entry));\n+    }\n+\n+    @Test\n+    void KeyFromTitleAndYear() {\n+        BibEntry entry = new BibEntry().withField(InternalField.KEY_FIELD, \"TheTitle2021\")\n+                                       .withField(StandardField.TITLE, \"The Title\")\n+                                       .withField(StandardField.YEAR, \"2021\");\n+        assertEquals(Collections.emptyList(), checker.check(entry));\n+    }\n+\n+    @Test\n+    void emptyCitationKey() {\n+        BibEntry entry = new BibEntry().withField(StandardField.AUTHOR, \"Brown\")\n+                                       .withField(StandardField.TITLE, \"The Title\")\n+                                       .withField(StandardField.YEAR, \"2021\");\n+        List<IntegrityMessage> expected = Collections.singletonList(new IntegrityMessage(Localization.lang(\"empty citation key\") + \": \" + entry.getAuthorTitleYear(100), entry, InternalField.KEY_FIELD));\n+        assertEquals(expected, checker.check(entry));\n+    }\n }"
  },
  {
    "sha": "f8e2d8fbcd423b4a760b78f6ff11fb68d5b7a07e",
    "filename": "src/test/java/org/jabref/logic/integrity/DateCheckerTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 5,
    "changes": 19,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/DateCheckerTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/DateCheckerTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/integrity/DateCheckerTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -3,6 +3,8 @@\n import java.util.Optional;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n@@ -11,12 +13,19 @@\n     private final DateChecker checker = new DateChecker();\n \n     @Test\n-    void complainsAboutInvalidIsoLikeDate() {\n-        assertEquals(Optional.of(\"incorrect format\"), checker.checkValue(\"2018-04-21TZ\"));\n+    void acceptsEmptyInput() {\n+        assertEquals(Optional.empty(), checker.checkValue(\"\"));\n     }\n \n-    @Test\n-    void acceptsValidIsoDate() {\n-        assertEquals(Optional.empty(), checker.checkValue(\"2018-04-21\"));\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"2018-04-21\", \"2018-04\", \"21-04-2018\", \"04-2018\", \"04/18\", \"04/2018\", \"April 21, 2018\", \"April, 2018\", \"21.04.2018\", \"2018.04.21\", \"2018\"})\n+    void acceptsValidDates(String s) {\n+        assertEquals(Optional.empty(), checker.checkValue(s));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"2018-04-21TZ\", \"2018-Apr-21\", \"2018-Apr-Twentyone\", \"2018-Apr-Twentyfirst\", \"2018_04_21\", \"2018 04 21\", \"2018~04~21\"})\n+    void complainsAboutInvalidInput(String s) {\n+        assertEquals(Optional.of(\"incorrect format\"), checker.checkValue(s));\n     }\n }"
  },
  {
    "sha": "932e35eafdc83edee864a5e05e8f4a595302de23",
    "filename": "src/test/java/org/jabref/logic/integrity/DoiValidityCheckerTest.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/DoiValidityCheckerTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/integrity/DoiValidityCheckerTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/integrity/DoiValidityCheckerTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -3,6 +3,8 @@\n import java.util.Optional;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -16,6 +18,11 @@ void doiAcceptsValidInput() {\n         assertEquals(Optional.empty(), checker.checkValue(\"10.1023/A:1022883727209\"));\n     }\n \n+    @Test\n+    void doiAcceptsEmptyInput() {\n+        assertEquals(Optional.empty(), checker.checkValue(\"\"));\n+    }\n+\n     @Test\n     void doiAcceptsValidInputWithNotOnlyNumbers() {\n         assertEquals(Optional.empty(), checker.checkValue(\"10.17487/rfc1436\"));\n@@ -31,4 +38,15 @@ void doiDoesNotAcceptInvalidInput() {\n         assertNotEquals(Optional.empty(), checker.checkValue(\"asdf\"));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"11.1000/182\", \"01.1000/182\", \"100.1000/182\", \"110.1000/182\", \"a10.1000/182\", \"10a.1000/182\"})\n+    void doiDoesNotAcceptInputWithTypoInFirstPart(String s) {\n+        assertNotEquals(Optional.empty(), checker.checkValue(s));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"10.a1000/182\", \"10.1000a/182\", \"10.10a00/182\"})\n+    void doiDoesNotAcceptInputWithTypoInSecondPart(String s) {\n+        assertNotEquals(Optional.empty(), checker.checkValue(s));\n+    }\n }"
  },
  {
    "sha": "c2259f494274342de714cb51b79d39deb2952b7c",
    "filename": "src/test/java/org/jabref/logic/util/strings/StringLengthComparatorTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/util/strings/StringLengthComparatorTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/logic/util/strings/StringLengthComparatorTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/util/strings/StringLengthComparatorTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -20,4 +20,26 @@ public void test() {\n         assertEquals(0, slc.compare(\"AA\", \"AA\"));\n         assertEquals(1, slc.compare(\"AA\", \"AAA\"));\n     }\n+\n+    @Test\n+    public void emptyStringTest() {\n+        assertEquals(-1, slc.compare(\"A\", \"\"));\n+        assertEquals(0, slc.compare(\"\", \"\"));\n+        assertEquals(1, slc.compare(\"\", \"A\"));\n+    }\n+\n+    @Test\n+    public void backslashTest() {\n+        assertEquals(-1, slc.compare(\"\\\\\\\\\", \"A\"));\n+        assertEquals(0, slc.compare(\"\\\\\", \"A\"));\n+        assertEquals(0, slc.compare(\"\\\\\", \"\\\\\"));\n+        assertEquals(0, slc.compare(\"A\", \"\\\\\"));\n+        assertEquals(1, slc.compare(\"A\", \"\\\\\\\\\"));\n+    }\n+\n+    @Test\n+    public void emptyStringAndBackslashTest() {\n+        assertEquals(-1, slc.compare(\"\\\\\", \"\"));\n+        assertEquals(1, slc.compare(\"\", \"\\\\\"));\n+    }\n }"
  },
  {
    "sha": "ce8e376495944e2d1aff7a1c8c3d6e2c6f18f69a",
    "filename": "src/test/java/org/jabref/model/entry/MonthTest.java",
    "status": "modified",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/model/entry/MonthTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/model/entry/MonthTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/model/entry/MonthTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -3,6 +3,8 @@\n import java.util.Optional;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n@@ -151,4 +153,163 @@ public void parseCorrectlyByShortNameGermanLowercase() {\n         assertEquals(Optional.of(Month.NOVEMBER), Month.parse(\"nov\"));\n         assertEquals(Optional.of(Month.DECEMBER), Month.parse(\"dez\"));\n     }\n+\n+    @Test\n+    public void parseGermanShortMonthTest() {\n+        assertEquals(Optional.of(Month.JANUARY), Month.parseGermanShortMonth(\"jan\"));\n+        assertEquals(Optional.of(Month.JANUARY), Month.parseGermanShortMonth(\"januar\"));\n+        assertEquals(Optional.of(Month.FEBRUARY), Month.parseGermanShortMonth(\"feb\"));\n+        assertEquals(Optional.of(Month.FEBRUARY), Month.parseGermanShortMonth(\"februar\"));\n+        assertEquals(Optional.of(Month.MARCH), Month.parseGermanShortMonth(\"mär\"));\n+        assertEquals(Optional.of(Month.MARCH), Month.parseGermanShortMonth(\"mae\"));\n+        assertEquals(Optional.of(Month.MARCH), Month.parseGermanShortMonth(\"märz\"));\n+        assertEquals(Optional.of(Month.MARCH), Month.parseGermanShortMonth(\"maerz\"));\n+        assertEquals(Optional.of(Month.APRIL), Month.parseGermanShortMonth(\"apr\"));\n+        assertEquals(Optional.of(Month.APRIL), Month.parseGermanShortMonth(\"april\"));\n+        assertEquals(Optional.of(Month.MAY), Month.parseGermanShortMonth(\"mai\"));\n+        assertEquals(Optional.of(Month.JUNE), Month.parseGermanShortMonth(\"jun\"));\n+        assertEquals(Optional.of(Month.JUNE), Month.parseGermanShortMonth(\"juni\"));\n+        assertEquals(Optional.of(Month.JULY), Month.parseGermanShortMonth(\"jul\"));\n+        assertEquals(Optional.of(Month.JULY), Month.parseGermanShortMonth(\"juli\"));\n+        assertEquals(Optional.of(Month.AUGUST), Month.parseGermanShortMonth(\"aug\"));\n+        assertEquals(Optional.of(Month.AUGUST), Month.parseGermanShortMonth(\"august\"));\n+        assertEquals(Optional.of(Month.SEPTEMBER), Month.parseGermanShortMonth(\"sep\"));\n+        assertEquals(Optional.of(Month.SEPTEMBER), Month.parseGermanShortMonth(\"september\"));\n+        assertEquals(Optional.of(Month.OCTOBER), Month.parseGermanShortMonth(\"okt\"));\n+        assertEquals(Optional.of(Month.OCTOBER), Month.parseGermanShortMonth(\"oktober\"));\n+        assertEquals(Optional.of(Month.NOVEMBER), Month.parseGermanShortMonth(\"nov\"));\n+        assertEquals(Optional.of(Month.NOVEMBER), Month.parseGermanShortMonth(\"november\"));\n+        assertEquals(Optional.of(Month.DECEMBER), Month.parseGermanShortMonth(\"dez\"));\n+        assertEquals(Optional.of(Month.DECEMBER), Month.parseGermanShortMonth(\"dezember\"));\n+    }\n+\n+    @Test\n+    public void getMonthByValidNumberTest() {\n+        assertEquals(Optional.of(Month.JANUARY), Month.getMonthByNumber(1));\n+        assertEquals(Optional.of(Month.FEBRUARY), Month.getMonthByNumber(2));\n+        assertEquals(Optional.of(Month.MARCH), Month.getMonthByNumber(3));\n+        assertEquals(Optional.of(Month.APRIL), Month.getMonthByNumber(4));\n+        assertEquals(Optional.of(Month.MAY), Month.getMonthByNumber(5));\n+        assertEquals(Optional.of(Month.JUNE), Month.getMonthByNumber(6));\n+        assertEquals(Optional.of(Month.JULY), Month.getMonthByNumber(7));\n+        assertEquals(Optional.of(Month.AUGUST), Month.getMonthByNumber(8));\n+        assertEquals(Optional.of(Month.SEPTEMBER), Month.getMonthByNumber(9));\n+        assertEquals(Optional.of(Month.OCTOBER), Month.getMonthByNumber(10));\n+        assertEquals(Optional.of(Month.NOVEMBER), Month.getMonthByNumber(11));\n+        assertEquals(Optional.of(Month.DECEMBER), Month.getMonthByNumber(12));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {-1, 0, 13})\n+    public void getMonthByInvalidNumberTest(int i) {\n+        assertEquals(Optional.empty(), Month.getMonthByNumber(i));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"jan\", \"JAN\", \"Jan\"})\n+    public void getMonthByShortNameCaseSensitivityTest(String s) {\n+        assertEquals(Optional.of(Month.JANUARY), Month.getMonthByShortName(s));\n+    }\n+\n+    @Test\n+    public void getMonthByShortNameLowercaseTest() {\n+        assertEquals(Optional.of(Month.JANUARY), Month.getMonthByShortName(\"jan\"));\n+        assertEquals(Optional.of(Month.FEBRUARY), Month.getMonthByShortName(\"feb\"));\n+        assertEquals(Optional.of(Month.MARCH), Month.getMonthByShortName(\"mar\"));\n+        assertEquals(Optional.of(Month.APRIL), Month.getMonthByShortName(\"apr\"));\n+        assertEquals(Optional.of(Month.MAY), Month.getMonthByShortName(\"may\"));\n+        assertEquals(Optional.of(Month.JUNE), Month.getMonthByShortName(\"jun\"));\n+        assertEquals(Optional.of(Month.JULY), Month.getMonthByShortName(\"jul\"));\n+        assertEquals(Optional.of(Month.AUGUST), Month.getMonthByShortName(\"aug\"));\n+        assertEquals(Optional.of(Month.SEPTEMBER), Month.getMonthByShortName(\"sep\"));\n+        assertEquals(Optional.of(Month.OCTOBER), Month.getMonthByShortName(\"oct\"));\n+        assertEquals(Optional.of(Month.NOVEMBER), Month.getMonthByShortName(\"nov\"));\n+        assertEquals(Optional.of(Month.DECEMBER), Month.getMonthByShortName(\"dec\"));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"\", \"dez\", \"+*ç%&/()=.,:;-${}![]^'?~¦@#°§¬|¢äüö\"})\n+    public void getMonthByShortNameSpecialCharactersTest(String s) {\n+        assertEquals(Optional.empty(), Month.getMonthByShortName(s));\n+    }\n+\n+    @Test\n+    public void getShortNameTest() {\n+        assertEquals(\"jan\", Month.JANUARY.getShortName());\n+        assertEquals(\"feb\", Month.FEBRUARY.getShortName());\n+        assertEquals(\"mar\", Month.MARCH.getShortName());\n+        assertEquals(\"apr\", Month.APRIL.getShortName());\n+        assertEquals(\"may\", Month.MAY.getShortName());\n+        assertEquals(\"jun\", Month.JUNE.getShortName());\n+        assertEquals(\"jul\", Month.JULY.getShortName());\n+        assertEquals(\"aug\", Month.AUGUST.getShortName());\n+        assertEquals(\"sep\", Month.SEPTEMBER.getShortName());\n+        assertEquals(\"oct\", Month.OCTOBER.getShortName());\n+        assertEquals(\"nov\", Month.NOVEMBER.getShortName());\n+        assertEquals(\"dec\", Month.DECEMBER.getShortName());\n+    }\n+\n+    @Test\n+    public void getJabRefFormatTest() {\n+        assertEquals(\"#jan#\", Month.JANUARY.getJabRefFormat());\n+        assertEquals(\"#feb#\", Month.FEBRUARY.getJabRefFormat());\n+        assertEquals(\"#mar#\", Month.MARCH.getJabRefFormat());\n+        assertEquals(\"#apr#\", Month.APRIL.getJabRefFormat());\n+        assertEquals(\"#may#\", Month.MAY.getJabRefFormat());\n+        assertEquals(\"#jun#\", Month.JUNE.getJabRefFormat());\n+        assertEquals(\"#jul#\", Month.JULY.getJabRefFormat());\n+        assertEquals(\"#aug#\", Month.AUGUST.getJabRefFormat());\n+        assertEquals(\"#sep#\", Month.SEPTEMBER.getJabRefFormat());\n+        assertEquals(\"#oct#\", Month.OCTOBER.getJabRefFormat());\n+        assertEquals(\"#nov#\", Month.NOVEMBER.getJabRefFormat());\n+        assertEquals(\"#dec#\", Month.DECEMBER.getJabRefFormat());\n+    }\n+\n+    @Test\n+    public void getNumberTest() {\n+        assertEquals(1, Month.JANUARY.getNumber());\n+        assertEquals(2, Month.FEBRUARY.getNumber());\n+        assertEquals(3, Month.MARCH.getNumber());\n+        assertEquals(4, Month.APRIL.getNumber());\n+        assertEquals(5, Month.MAY.getNumber());\n+        assertEquals(6, Month.JUNE.getNumber());\n+        assertEquals(7, Month.JULY.getNumber());\n+        assertEquals(8, Month.AUGUST.getNumber());\n+        assertEquals(9, Month.SEPTEMBER.getNumber());\n+        assertEquals(10, Month.OCTOBER.getNumber());\n+        assertEquals(11, Month.NOVEMBER.getNumber());\n+        assertEquals(12, Month.DECEMBER.getNumber());\n+    }\n+\n+    @Test\n+    public void getFullNameTest() {\n+        assertEquals(\"January\", Month.JANUARY.getFullName());\n+        assertEquals(\"February\", Month.FEBRUARY.getFullName());\n+        assertEquals(\"March\", Month.MARCH.getFullName());\n+        assertEquals(\"April\", Month.APRIL.getFullName());\n+        assertEquals(\"May\", Month.MAY.getFullName());\n+        assertEquals(\"June\", Month.JUNE.getFullName());\n+        assertEquals(\"July\", Month.JULY.getFullName());\n+        assertEquals(\"August\", Month.AUGUST.getFullName());\n+        assertEquals(\"September\", Month.SEPTEMBER.getFullName());\n+        assertEquals(\"October\", Month.OCTOBER.getFullName());\n+        assertEquals(\"November\", Month.NOVEMBER.getFullName());\n+        assertEquals(\"December\", Month.DECEMBER.getFullName());\n+    }\n+\n+    @Test\n+    public void getTwoDigitNumber() {\n+        assertEquals(\"01\", Month.JANUARY.getTwoDigitNumber());\n+        assertEquals(\"02\", Month.FEBRUARY.getTwoDigitNumber());\n+        assertEquals(\"03\", Month.MARCH.getTwoDigitNumber());\n+        assertEquals(\"04\", Month.APRIL.getTwoDigitNumber());\n+        assertEquals(\"05\", Month.MAY.getTwoDigitNumber());\n+        assertEquals(\"06\", Month.JUNE.getTwoDigitNumber());\n+        assertEquals(\"07\", Month.JULY.getTwoDigitNumber());\n+        assertEquals(\"08\", Month.AUGUST.getTwoDigitNumber());\n+        assertEquals(\"09\", Month.SEPTEMBER.getTwoDigitNumber());\n+        assertEquals(\"10\", Month.OCTOBER.getTwoDigitNumber());\n+        assertEquals(\"11\", Month.NOVEMBER.getTwoDigitNumber());\n+        assertEquals(\"12\", Month.DECEMBER.getTwoDigitNumber());\n+    }\n }"
  },
  {
    "sha": "e303f0692a6326e1a7d9276eb4635df88040035c",
    "filename": "src/test/java/org/jabref/model/texparser/CitationTest.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/JabRef/jabref/blob/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/model/texparser/CitationTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b/src/test/java/org/jabref/model/texparser/CitationTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/model/texparser/CitationTest.java?ref=d29cfea036a6a39f1e8ee30c8aaf21cdf31d653b",
    "patch": "@@ -0,0 +1,118 @@\n+package org.jabref.model.texparser;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+public class CitationTest {\n+\n+    Path path;\n+    Citation citation;\n+\n+    @BeforeEach\n+    public void init() {\n+        path = Path.of(\"test\");\n+        citation = new Citation(path, 10, 1, 4, \"lineText\");\n+    }\n+\n+    private static Stream<Arguments> colStartColEndNotInBounds() {\n+        return Stream.of(\n+                arguments(-1, 2),\n+                arguments(1, 9)\n+        );\n+    }\n+\n+    private static Stream<Arguments> colStartColEndInBounds() {\n+        return Stream.of(\n+                arguments(0, 2),\n+                arguments(1, 8)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {-1, 0})\n+    public void constructorLineSmallerEqualZeroTest(int line) {\n+        Exception e = assertThrows(IllegalArgumentException.class, () -> new Citation(path, line, 1, 5, \"lineText\"));\n+        assertEquals(\"Line has to be greater than 0.\", e.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {1, 2})\n+    public void constructorLineLargerZeroTest(int line) {\n+        Citation citation = new Citation(path, line, 1, 5, \"lineText\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"colStartColEndNotInBounds\")\n+    public void constructorColStartColEndNotInBoundsTest(int colStart, int colEnd) {\n+        Exception e = assertThrows(IllegalArgumentException.class, () -> new Citation(path, 10, colStart, colEnd, \"lineText\"));\n+        assertEquals(\"Citation has to be between 0 and line length.\", e.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"colStartColEndInBounds\")\n+    public void constructorColStartColEndInBoundsTest(int colStart, int colEnd) {\n+        Citation citation = new Citation(path, 10, colStart, colEnd, \"lineText\");\n+    }\n+\n+    @Test\n+    public void getPathTest() {\n+        assertEquals(path, citation.getPath());\n+    }\n+\n+    @Test\n+    public void getLineTest() {\n+        assertEquals(10, citation.getLine());\n+    }\n+\n+    @Test\n+    public void getColStartTest() {\n+        assertEquals(1, citation.getColStart());\n+    }\n+\n+    @Test\n+    public void getColEndTest() {\n+        assertEquals(4, citation.getColEnd());\n+    }\n+\n+    @Test\n+    public void getLineTextTest() {\n+        assertEquals(\"lineText\", citation.getLineText());\n+    }\n+\n+    @Test\n+    public void getContextTest() {\n+        assertEquals(\"lineText\", citation.getContext());\n+    }\n+\n+    @Test\n+    public void toStringTest() {\n+        assertEquals(\"Citation{path=test, line=10, colStart=1, colEnd=4, lineText='lineText'}\", citation.toString());\n+    }\n+\n+    @Test\n+    public void equalsTest() {\n+        Citation citation1 = new Citation(path, 10, 1, 4, \"lineText\");\n+        Citation citation2 = null;\n+        assertTrue(citation.equals(citation1));\n+        assertFalse(citation.equals(citation2));\n+    }\n+\n+    @Test\n+    public void hashCodeTest() {\n+        assertEquals(Objects.hash(path, 10, 1, 4, \"lineText\"), citation.hashCode());\n+    }\n+}"
  }
]
