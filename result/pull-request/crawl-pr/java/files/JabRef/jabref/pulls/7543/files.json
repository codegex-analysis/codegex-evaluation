[
  {
    "sha": "54a4f470ff40906c96a9a5901bb4b8948f007029",
    "filename": "src/test/java/org/jabref/gui/autocompleter/SuggestionProvidersTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/gui/autocompleter/SuggestionProvidersTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/gui/autocompleter/SuggestionProvidersTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/gui/autocompleter/SuggestionProvidersTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -0,0 +1,49 @@\n+package org.jabref.gui.autocompleter;\n+\n+import org.jabref.logic.journals.JournalAbbreviationRepository;\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.FieldFactory;\n+import org.jabref.model.entry.field.SpecialField;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.mockito.Mockito.mock;\n+\n+class SuggestionProvidersTest {\n+\n+  @Test\n+  void getForFieldTest() {\n+      BibDatabase database = new BibDatabase();\n+      JournalAbbreviationRepository abbreviationRepository = mock(JournalAbbreviationRepository.class);\n+      BibEntry entry = new BibEntry();\n+      Field personEntryField = StandardField.AUTHOR;\n+      Field singleEntryField = StandardField.XREF;\n+      Field multipleEntryField = StandardField.XDATA;\n+      Field journalEntryField = StandardField.JOURNAL;\n+      Field publisherEntryField = StandardField.PUBLISHER;\n+      Field specialEntryField = SpecialField.PRINTED;\n+      AutoCompletePreferences autoCompletePreferences = new AutoCompletePreferences(true, AutoCompleteFirstNameMode.BOTH, AutoCompletePreferences.NameFormat.BOTH, FieldFactory.parseFieldList(personEntryField.getName() + \";\" + singleEntryField.getName() + \";\" + multipleEntryField.getName() + \";\" + journalEntryField.getName() + \";\" + publisherEntryField.getName() + \";\" + specialEntryField.getName()), null);\n+      SuggestionProviders sp = new SuggestionProviders(database, abbreviationRepository, autoCompletePreferences);\n+      SuggestionProviders empty = new SuggestionProviders();\n+\n+      entry.setField(personEntryField, \"Goethe\");\n+      entry.setField(singleEntryField, \"Single\");\n+      entry.setField(multipleEntryField, \"Multiple\");\n+      entry.setField(journalEntryField, \"Journal\");\n+      entry.setField(publisherEntryField, \"Publisher\");\n+      entry.setField(specialEntryField, \"2000\");\n+      database.insertEntry(entry);\n+\n+      assertSame(\"org.jabref.gui.autocompleter.EmptySuggestionProvider\", empty.getForField(personEntryField).getClass().getName());\n+      assertSame(\"org.jabref.gui.autocompleter.PersonNameSuggestionProvider\", sp.getForField(personEntryField).getClass().getName());\n+      assertSame(\"org.jabref.gui.autocompleter.BibEntrySuggestionProvider\", sp.getForField(singleEntryField).getClass().getName());\n+      assertSame(\"org.jabref.gui.autocompleter.BibEntrySuggestionProvider\", sp.getForField(multipleEntryField).getClass().getName());\n+      assertSame(\"org.jabref.gui.autocompleter.JournalsSuggestionProvider\", sp.getForField(journalEntryField).getClass().getName());\n+      assertSame(\"org.jabref.gui.autocompleter.JournalsSuggestionProvider\", sp.getForField(publisherEntryField).getClass().getName());\n+      assertSame(\"org.jabref.gui.autocompleter.WordSuggestionProvider\", sp.getForField(specialEntryField).getClass().getName());\n+  }\n+}"
  },
  {
    "sha": "1ae6fde62de309e7ca4ae6533f38e041669ec240",
    "filename": "src/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -747,6 +747,9 @@ void testLastPage() {\n         assertEquals(\"97\", CitationKeyGenerator.lastPage(\"7,41,73--97\"));\n         assertEquals(\"97\", CitationKeyGenerator.lastPage(\"7,41,97--73\"));\n         assertEquals(\"43\", CitationKeyGenerator.lastPage(\"43+\"));\n+        assertEquals(\"0\", CitationKeyGenerator.lastPage(\"00--0\"));\n+        assertEquals(\"1\", CitationKeyGenerator.lastPage(\"1--1\"));\n+\n     }\n \n     @SuppressWarnings(\"ConstantConditions\")"
  },
  {
    "sha": "51e67f8d38267fa40108dfeeba434cb0cc97b020",
    "filename": "src/test/java/org/jabref/logic/citationstyle/CitationStyleCacheTest.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/citationstyle/CitationStyleCacheTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/citationstyle/CitationStyleCacheTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/citationstyle/CitationStyleCacheTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -0,0 +1,34 @@\n+package org.jabref.logic.citationstyle;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jabref.model.database.BibDatabase;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.entry.BibEntry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class CitationStyleCacheTest {\n+\n+  private BibEntry bibEntry;\n+  private List<BibEntry> entries;\n+  private BibDatabase database;\n+  private BibDatabaseContext databaseContext;\n+  private CitationStyleCache csCache;\n+\n+  @Test\n+  void getCitationForTest() {\n+    BibEntry bibEntry = new BibEntry();\n+    bibEntry.setCitationKey(\"test\");\n+    List<BibEntry> entries = new ArrayList<>();\n+    entries.add(0, bibEntry);\n+    BibDatabase database = new BibDatabase(entries);\n+    BibDatabaseContext databaseContext = new BibDatabaseContext(database);\n+    CitationStyleCache csCache = new CitationStyleCache(databaseContext);\n+\n+    assertNotNull(csCache.getCitationFor(bibEntry));\n+  }\n+}"
  },
  {
    "sha": "5f2a74947e43574ca0ae6be9f1a287519257e8b5",
    "filename": "src/test/java/org/jabref/logic/formatter/casechanger/UpperCaseFormatterTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/formatter/casechanger/UpperCaseFormatterTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/formatter/casechanger/UpperCaseFormatterTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/formatter/casechanger/UpperCaseFormatterTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -24,6 +24,9 @@ public void test() {\n         assertEquals(\"UPPER\", formatter.format(\"UPPER\"));\n         assertEquals(\"UPPER {lower}\", formatter.format(\"upper {lower}\"));\n         assertEquals(\"UPPER {l}OWER\", formatter.format(\"upper {l}ower\"));\n+        assertEquals(\"1\", formatter.format(\"1\"));\n+        assertEquals(\"!\", formatter.format(\"!\"));\n+\n     }\n \n     @Test"
  },
  {
    "sha": "35b92e744d7c056f0d95635e28bd242b5bc84c72",
    "filename": "src/test/java/org/jabref/logic/integrity/HTMLCharacterCheckerTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/integrity/HTMLCharacterCheckerTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/integrity/HTMLCharacterCheckerTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/integrity/HTMLCharacterCheckerTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -9,12 +9,22 @@\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class HTMLCharacterCheckerTest {\n \n     private final HTMLCharacterChecker checker = new HTMLCharacterChecker();\n     private final BibEntry entry = new BibEntry();\n \n+    @Test\n+    void fieldNullValueCheck() {\n+        Exception exception = assertThrows(\n+                NullPointerException.class,\n+                () -> entry.setField(StandardField.AUTHOR, null),\n+                \"field value must not be null\"\n+        );\n+    }\n+\n     @Test\n     void titleAcceptsNonHTMLEncodedCharacters() {\n         entry.setField(StandardField.TITLE, \"Not a single {HTML} character\");"
  },
  {
    "sha": "19958130029f217d0d6bdf31fb06bd5e73873a3b",
    "filename": "src/test/java/org/jabref/logic/journals/AbbreviationTest.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/journals/AbbreviationTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/logic/journals/AbbreviationTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/logic/journals/AbbreviationTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -3,6 +3,8 @@\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class AbbreviationTest {\n \n@@ -101,4 +103,17 @@ void testDefaultAndShortestUniqueAbbreviationsAreSame() {\n         Abbreviation abbreviation = new Abbreviation(\"Long Name\", \"L N\");\n         assertEquals(abbreviation.getAbbreviation(), abbreviation.getShortestUniqueAbbreviation());\n     }\n+\n+    @Test\n+    void testToString() {\n+      Abbreviation abbreviation = new Abbreviation(\"Long Name\", \"L N\", \"LN\");\n+      assertEquals(abbreviation.toString(), \"Abbreviation{name=Long Name, abbreviation=L N, medlineAbbreviation=L N, shortestUniqueAbbreviation=LN}\");\n+    }\n+\n+    @Test\n+    void testEquals() {\n+      Abbreviation abbreviation = new Abbreviation(\"Long Name\", \"L N\", \"LN\");\n+      assertTrue(abbreviation.equals(abbreviation));\n+      assertFalse(abbreviation.equals(\"String\"));\n+    }\n }"
  },
  {
    "sha": "07dbb2a92870dafa86af8ee86b4bb5a77ac5f75d",
    "filename": "src/test/java/org/jabref/model/FieldChangeTest.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/model/FieldChangeTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/model/FieldChangeTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/model/FieldChangeTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -0,0 +1,63 @@\n+package org.jabref.model;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class FieldChangeTest {\n+\n+  private FieldChange Fieldchange;\n+\n+  @Test\n+  void testHashCode() {\n+    FieldChange fcNull = new FieldChange(null, null, null, null);\n+    assertEquals(923521, fcNull.hashCode());\n+  }\n+\n+  @Test\n+  void testEquals() {\n+    BibEntry entry = new BibEntry();\n+    BibEntry entryOther = new BibEntry();\n+    final Field field = StandardField.DOI;\n+    final Field fieldOther = StandardField.DOI;\n+    entry.setField(StandardField.DOI, \"foo\");\n+    final String oldValue = \"foo\";\n+    final String newValue = \"bar\";\n+    final String oldValueOther = \"fooX\";\n+    final String newValueOther = \"barX\";\n+\n+    FieldChange fc = new FieldChange(entry, field, oldValue, newValue);\n+    FieldChange fcOther = new FieldChange(entryOther, fieldOther, oldValueOther, newValueOther);\n+    FieldChange fcBlankAll = new FieldChange(null, null, null, null);\n+    FieldChange fcBlankField = new FieldChange(entry, null, oldValue, newValue);\n+    FieldChange fcBlankOldValue = new FieldChange(entry, field, null, newValue);\n+    FieldChange fcBlankNewValue = new FieldChange(entry, field, oldValue, null);\n+\n+    assertFalse(fc.equals(\"foo\"));\n+    assertTrue(fc.equals(fc));\n+    assertFalse(fcBlankAll.equals(fc));\n+    assertFalse(fc.equals(fcOther));\n+    assertFalse(fcBlankField.equals(fc));\n+    assertFalse(fcBlankOldValue.equals(fc));\n+    assertFalse(fcBlankNewValue.equals(fc));\n+    assertTrue(fcBlankAll.equals(fcBlankAll));\n+  }\n+\n+  @Test\n+  void testToString() {\n+    BibEntry entry = new BibEntry();\n+    Field field = StandardField.DOI;\n+    entry.setCitationKey(\"CitationKey\");\n+    final String oldValue = \"Old\";\n+    final String newValue = \"New\";\n+\n+    FieldChange fc = new FieldChange(entry, field, oldValue, newValue);\n+    assertEquals(\"FieldChange [entry=CitationKey, field=DOI, oldValue=Old, newValue=New]\", fc.toString());\n+  }\n+}"
  },
  {
    "sha": "c360719d45299153174a95fc4654374b707f33c9",
    "filename": "src/test/java/org/jabref/model/entry/EntryLinkListTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/model/entry/EntryLinkListTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/model/entry/EntryLinkListTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/model/entry/EntryLinkListTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -10,6 +10,7 @@\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class EntryLinkListTest {\n@@ -21,6 +22,7 @@\n     private ParsedEntryLink link;\n     private BibEntry source;\n     private BibEntry target;\n+    private BibEntry entry;\n \n     @BeforeEach\n     public void before() {\n@@ -29,6 +31,7 @@ public void before() {\n         link = links.get(0);\n         source = create(\"source\");\n         target = create(\"target\");\n+        entry = create(\"entry\");\n     }\n \n     private BibEntry create(String citeKey) {\n@@ -59,6 +62,12 @@ public void givenFieldValueAndDatabaseWhenParsingThenExpectLink() {\n         assertEquals(expected, link);\n     }\n \n+    @Test\n+    public void givenBibEntryWhenParsingThenExpectLink() {\n+      ParsedEntryLink expected = new ParsedEntryLink(entry);\n+      assertFalse(expected.getLinkedEntry().isEmpty());\n+    }\n+\n     @Test\n     public void givenNullFieldValueAndDatabaseWhenParsingThenExpectLinksIsEmpty() {\n         links = EntryLinkList.parse(null, database);"
  },
  {
    "sha": "6d047662b128075302dc6cb91aafa3010788213f",
    "filename": "src/test/java/org/jabref/model/util/FileHelperTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/JabRef/jabref/blob/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/model/util/FileHelperTest.java",
    "raw_url": "https://github.com/JabRef/jabref/raw/4ea42edc2acdd8e3ddd09924a642646b4eadb428/src/test/java/org/jabref/model/util/FileHelperTest.java",
    "contents_url": "https://api.github.com/repos/JabRef/jabref/contents/src/test/java/org/jabref/model/util/FileHelperTest.java?ref=4ea42edc2acdd8e3ddd09924a642646b4eadb428",
    "patch": "@@ -1,5 +1,6 @@\n package org.jabref.model.util;\n \n+import java.nio.file.Path;\n import java.util.Optional;\n \n import org.junit.jupiter.api.Test;\n@@ -18,4 +19,10 @@ public void fileExtensionFromUrl() {\n         final String filePath = \"https://link.springer.com/content/pdf/10.1007%2Fs40955-018-0121-9.pdf\";\n         assertEquals(Optional.of(\"pdf\"), FileHelper.getFileExtension(filePath));\n     }\n+\n+    @Test\n+    public void testFileNameEmpty() {\n+      Path path = Path.of(\"/\");\n+      assertEquals(Optional.of(path), FileHelper.find(\"\", path));\n+    }\n }"
  }
]
