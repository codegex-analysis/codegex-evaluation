[
  {
    "sha": "7cde2f5dbf427c354a5c05ce956ae559456849ef",
    "filename": ".github/workflows/ci-integration-test.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/ci-integration-test.yml",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/ci-integration-test.yml",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/.github/workflows/ci-integration-test.yml?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -20,8 +20,8 @@ jobs:\n     strategy:\n       matrix:\n         os: [ubuntu-latest]\n-        java: [8.0.192, 11.0.x]\n-        cpversion: [5.5.3, 6.0.1]\n+        java: [11.0.x]\n+        cpversion: [5.5.3, 6.0.2, 6.1.0]\n \n     runs-on: ${{ matrix.os }}\n "
  },
  {
    "sha": "35a88e85664632c7e326e3f1c18fd2fb9410b1c0",
    "filename": ".github/workflows/maven.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/maven.yml",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/maven.yml",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/.github/workflows/maven.yml?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -19,7 +19,7 @@ jobs:\n     strategy:\n       matrix:\n         os: [ubuntu-latest]\n-        java: [8.0.192, 11.0.x, 13]\n+        java: [11.0.x]\n \n     runs-on: ${{ matrix.os }}\n "
  },
  {
    "sha": "c6c232608071a0ae3fdad6843a26aef47e7d4ac5",
    "filename": ".github/workflows/nightly-artifacts-build.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/nightly-artifacts-build.yml",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/nightly-artifacts-build.yml",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/.github/workflows/nightly-artifacts-build.yml?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -16,7 +16,7 @@ jobs:\n       - name: Set up the JDK\n         uses: actions/setup-java@v1\n         with:\n-          java-version: 1.8\n+          java-version: 11\n       - name: Cache dependencies\n         uses: actions/cache@v2\n         with:\n@@ -53,7 +53,7 @@ jobs:\n       - name: Set up the JDK\n         uses: actions/setup-java@v1\n         with:\n-          java-version: 1.8\n+          java-version: 11\n       - name: Cache dependencies\n         uses: actions/cache@v2\n         with:"
  },
  {
    "sha": "53b256f2ef8706b82ee14e8523bc847e8725899b",
    "filename": ".github/workflows/release-artifacts-build.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/release-artifacts-build.yml",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/release-artifacts-build.yml",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/.github/workflows/release-artifacts-build.yml?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -13,7 +13,7 @@ jobs:\n       - name: Set up the JDK\n         uses: actions/setup-java@v1\n         with:\n-          java-version: 1.8\n+          java-version: 11\n       - name: Cache dependencies\n         uses: actions/cache@v2\n         with:"
  },
  {
    "sha": "240c15569255698c282e875b53f823061b076126",
    "filename": ".github/workflows/release-docker.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/release-docker.yml",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/.github/workflows/release-docker.yml",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/.github/workflows/release-docker.yml?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -23,7 +23,7 @@ jobs:\n       - name: Set up the JDK\n         uses: actions/setup-java@v1\n         with:\n-          java-version: 1.8\n+          java-version: 11\n       - name: Cache dependencies\n         uses: actions/cache@v2\n         with:"
  },
  {
    "sha": "2c3849965f52b176a5534bc51e6b99695d0756a2",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 9,
    "changes": 12,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/pom.xml",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/pom.xml",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/pom.xml?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -176,8 +176,8 @@\n         <artifactId>maven-compiler-plugin</artifactId>\n         <version>${maven-compiler-plugin.version}</version>\n         <configuration>\n-          <source>8</source>\n-          <target>8</target>\n+          <source>11</source>\n+          <target>11</target>\n         </configuration>\n       </plugin>\n \n@@ -418,14 +418,13 @@\n     <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>\n     <jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>\n     <rpm-maven-plugin.version>2.2.0</rpm-maven-plugin.version>\n-    <maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>\n+    <maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>\n     <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>\n     <maven-failsafe-plugin.version>2.22.2</maven-failsafe-plugin.version>\n     <!-- dependencies -->\n     <jackson.version>2.12.1</jackson.version>\n     <kafka.version>2.5.0</kafka.version>\n     <log4j.version>2.13.3</log4j.version>\n-    <httpclient.version>4.5.11</httpclient.version>\n     <zookeeper.version>3.5.7</zookeeper.version>\n     <commons.version>1.4</commons.version>\n     <mockito.version>3.6.0</mockito.version>\n@@ -488,11 +487,6 @@\n       <artifactId>kafka-protobuf-provider</artifactId>\n       <version>${confluent.version}</version>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.httpcomponents</groupId>\n-      <artifactId>httpclient</artifactId>\n-      <version>${httpclient.version}</version>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n       <artifactId>zookeeper</artifactId>"
  },
  {
    "sha": "2de694620187ca780ca8fe4394ca3b56ca06e0dd",
    "filename": "release/docker/Dockerfile",
    "status": "modified",
    "additions": 37,
    "deletions": 5,
    "changes": 42,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/release/docker/Dockerfile",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/release/docker/Dockerfile",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/release/docker/Dockerfile?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -1,17 +1,49 @@\n-FROM centos\n+FROM azul/zulu-openjdk-alpine:11 as packager\n+\n+RUN { \\\n+        java --version ; \\\n+        echo \"jlink version:\" && \\\n+        /usr/lib/jvm/zulu11/bin/jlink --version ; \\\n+    }\n+\n+ENV JAVA_MINIMAL=/opt/jre\n+\n+# build modules distribution\n+RUN  /usr/lib/jvm/zulu11/bin/jlink \\\n+    --verbose \\\n+    --module-path /usr/lib/jvm/zulu11/jmods/ \\\n+    --add-modules \\\n+        java.base,java.sql,java.naming,java.desktop,java.management,java.security.jgss,java.instrument \\\n+        # java.naming - javax/naming/NamingException\n+        # java.desktop - java/beans/PropertyEditorSupport\n+        # java.management - javax/management/MBeanServer\n+        # java.security.jgss - org/ietf/jgss/GSSException\n+        # java.instrument - java/lang/instrument/IllegalClassFormatException\n+    --compress 2 \\\n+    --strip-debug \\\n+    --no-header-files \\\n+    --no-man-pages \\\n+    --output \"$JAVA_MINIMAL\"\n+\n+# Second stage, add only our minimal \"JRE\" distr and our app\n+FROM alpine\n+\n MAINTAINER pere.urbon@gmail.com\n ENV container docker\n ENV BUILDER_HOME /usr/local/julie-ops\n ENV PATH=\"${BUILDER_HOME}:${PATH}\"\n \n+ENV JAVA_MINIMAL=/opt/jre\n+ENV PATH=\"$PATH:$JAVA_MINIMAL/bin\"\n+\n USER root\n \n-RUN yum install -y java-1.8.0-openjdk\n+RUN apk add bash\n \n-RUN mkdir -p /usr/local/julie-ops/bin\n+COPY --from=packager \"$JAVA_MINIMAL\" \"$JAVA_MINIMAL\"\n+\n+RUN mkdir -p /usr/local/julie-ops/bin && chmod 755 /usr/local/julie-ops\n COPY julie-ops.jar /usr/local/julie-ops/bin\n COPY julie-ops-cli.sh /usr/local/julie-ops\n \n-RUN chmod 755 /usr/local/julie-ops\n-\n CMD [\"julie-ops-cli.sh\"]"
  },
  {
    "sha": "60498acf67c9e8a1de4838f5984b3550fd3520da",
    "filename": "release/docker/build.sh",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/release/docker/build.sh",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/release/docker/build.sh",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/release/docker/build.sh?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -3,7 +3,7 @@\n cp  ../../target/julie-ops.jar .\n cp ../../src/main/scripts/julie-ops-cli.sh .\n \n-docker build  -t purbon/kafka-topology-builder .\n+docker build --compress -t purbon/kafka-topology-builder .\n \n rm julie-ops.jar\n rm julie-ops-cli.sh\n\\ No newline at end of file"
  },
  {
    "sha": "dfe36a45e308c1788d22e65a83bbedfb2357d9e5",
    "filename": "src/main/java/com/purbon/kafka/topology/AccessControlManager.java",
    "status": "modified",
    "additions": 8,
    "deletions": 18,
    "changes": 26,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/AccessControlManager.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/AccessControlManager.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/AccessControlManager.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -237,30 +237,20 @@ private boolean matchesManagedPrefixList(TopologyAclBinding topologyAclBinding)\n   }\n \n   private boolean matchesTopicPrefixList(String topic) {\n-    boolean matches =\n-        managedTopicPrefixes.size() == 0\n-            || managedTopicPrefixes.stream().anyMatch(topic::startsWith);\n-    LOGGER.debug(\n-        String.format(\"Topic %s matches %s with $s\", topic, matches, managedTopicPrefixes));\n-    return matches;\n+    return matchesPrefix(managedTopicPrefixes, topic, \"Topic\");\n   }\n \n   private boolean matchesGroupPrefixList(String group) {\n-    boolean matches =\n-        managedGroupPrefixes.size() == 0\n-            || managedGroupPrefixes.stream().anyMatch(group::startsWith);\n-    LOGGER.debug(\n-        String.format(\"Group %s matches %s with $s\", group, matches, managedGroupPrefixes));\n-    return matches;\n+    return matchesPrefix(managedGroupPrefixes, group, \"Group\");\n   }\n \n   private boolean matchesServiceAccountPrefixList(String principal) {\n-    boolean matches =\n-        managedServiceAccountPrefixes.size() == 0\n-            || managedServiceAccountPrefixes.stream().anyMatch(principal::startsWith);\n-    LOGGER.debug(\n-        String.format(\n-            \"Principal %s matches %s with $s\", principal, matches, managedServiceAccountPrefixes));\n+    return matchesPrefix(managedServiceAccountPrefixes, principal, \"Principal\");\n+  }\n+\n+  private boolean matchesPrefix(List<String> prefixes, String item, String type) {\n+    boolean matches = prefixes.size() == 0 || prefixes.stream().anyMatch(item::startsWith);\n+    LOGGER.debug(String.format(\"%s %s matches %s with $s\", type, item, matches, prefixes));\n     return matches;\n   }\n "
  },
  {
    "sha": "8b345685fd8b7efe11dbfd47177fd3c69f8056f9",
    "filename": "src/main/java/com/purbon/kafka/topology/actions/topics/SyncTopicAction.java",
    "status": "modified",
    "additions": 11,
    "deletions": 14,
    "changes": 25,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/actions/topics/SyncTopicAction.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/actions/topics/SyncTopicAction.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/actions/topics/SyncTopicAction.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -61,20 +61,17 @@ private void syncTopic(Topic topic, String fullTopicName, Set<String> listOfTopi\n     }\n \n     for (TopicSchemas schema : topic.getSchemas()) {\n-      Subject keySubject = schema.getKeySubject();\n-      Subject valueSubject = schema.getValueSubject();\n-      if (keySubject.hasSchemaFile()) {\n-        String keySchemaFile = keySubject.getSchemaFile();\n-        String subjectName = keySubject.buildSubjectName(topic);\n-        schemaRegistryManager.register(subjectName, keySchemaFile, keySubject.getFormat());\n-        setCompatibility(subjectName, keySubject.getOptionalCompatibility());\n-      }\n-      if (valueSubject.hasSchemaFile()) {\n-        String valueSchemaFile = valueSubject.getSchemaFile();\n-        String subjectName = valueSubject.buildSubjectName(topic);\n-        schemaRegistryManager.register(subjectName, valueSchemaFile, valueSubject.getFormat());\n-        setCompatibility(subjectName, valueSubject.getOptionalCompatibility());\n-      }\n+      registerSchemaIfExists(schema.getKeySubject(), topic);\n+      registerSchemaIfExists(schema.getValueSubject(), topic);\n+    }\n+  }\n+\n+  private void registerSchemaIfExists(Subject subject, Topic topic) throws IOException {\n+    if (subject.hasSchemaFile()) {\n+      String keySchemaFile = subject.getSchemaFile();\n+      String subjectName = subject.buildSubjectName(topic);\n+      schemaRegistryManager.register(subjectName, keySchemaFile, subject.getFormat());\n+      setCompatibility(subjectName, subject.getOptionalCompatibility());\n     }\n   }\n "
  },
  {
    "sha": "d967fc2fa5baa7b02f4f10fe89edf4743c953625",
    "filename": "src/main/java/com/purbon/kafka/topology/api/mds/MDSApiClient.java",
    "status": "modified",
    "additions": 25,
    "deletions": 135,
    "changes": 160,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/api/mds/MDSApiClient.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/api/mds/MDSApiClient.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/api/mds/MDSApiClient.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -4,60 +4,37 @@\n import static com.purbon.kafka.topology.api.mds.RequestScope.RESOURCE_PATTERN_TYPE;\n import static com.purbon.kafka.topology.api.mds.RequestScope.RESOURCE_TYPE;\n \n-import com.purbon.kafka.topology.api.mds.http.HttpDeleteWithBody;\n+import com.purbon.kafka.topology.clients.JulieHttpClient;\n import com.purbon.kafka.topology.roles.TopologyAclBinding;\n import com.purbon.kafka.topology.roles.rbac.ClusterLevelRoleBuilder;\n import com.purbon.kafka.topology.utils.JSON;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Base64;\n import java.util.List;\n import java.util.Map;\n-import org.apache.http.HttpEntity;\n-import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.client.methods.HttpPost;\n-import org.apache.http.entity.StringEntity;\n-import org.apache.http.impl.client.CloseableHttpClient;\n-import org.apache.http.impl.client.HttpClients;\n-import org.apache.http.util.EntityUtils;\n import org.apache.kafka.common.resource.ResourceType;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n-public class MDSApiClient {\n+public class MDSApiClient extends JulieHttpClient {\n \n   private static final Logger LOGGER = LogManager.getLogger(MDSApiClient.class);\n \n-  private final String mdsServer;\n-  private String basicCredentials;\n-\n   private AuthenticationCredentials authenticationCredentials;\n-  private ClusterIDs clusterIDs;\n+  private final ClusterIDs clusterIDs;\n \n   public MDSApiClient(String mdsServer) {\n-    this.mdsServer = mdsServer;\n+    super(mdsServer);\n     this.clusterIDs = new ClusterIDs();\n   }\n \n-  public void login(String user, String password) {\n-    String userAndPassword = user + \":\" + password;\n-    basicCredentials = Base64.getEncoder().encodeToString(userAndPassword.getBytes());\n-  }\n-\n   public AuthenticationCredentials getCredentials() {\n     return authenticationCredentials;\n   }\n \n   public void authenticate() throws IOException {\n-    HttpGet request = new HttpGet(mdsServer + \"/security/1.0/authenticate\");\n-    request.addHeader(\"accept\", \" application/json\");\n-    request.addHeader(\"Authorization\", \"Basic \" + basicCredentials);\n-\n-    Response response;\n-\n     try {\n-      response = get(request);\n+      Response response = doGet(\"/security/1.0/authenticate\");\n       if (response.getStatus() < 200 || response.getStatus() > 204) {\n         throw new IOException(\"MDS Authentication error: \" + response.getResponseAsString());\n       }\n@@ -80,19 +57,6 @@ public TopologyAclBinding bind(String principal, String role, String topic, Stri\n     return bind(principal, role, topic, \"Topic\", patternType);\n   }\n \n-  public TopologyAclBinding bind(String principal, String role, RequestScope scope) {\n-\n-    ResourceType resourceType = ResourceType.fromString(scope.getResource(0).get(RESOURCE_TYPE));\n-    String resourceName = scope.getResource(0).get(RESOURCE_NAME);\n-    String patternType = scope.getResource(0).get(RESOURCE_PATTERN_TYPE);\n-\n-    TopologyAclBinding binding =\n-        new TopologyAclBinding(resourceType, resourceName, \"*\", role, principal, patternType);\n-\n-    binding.setScope(scope);\n-    return binding;\n-  }\n-\n   public TopologyAclBinding bindClusterRole(String principal, String role, RequestScope scope) {\n     ResourceType resourceType = ResourceType.CLUSTER;\n     TopologyAclBinding binding =\n@@ -108,42 +72,21 @@ public void bindRequest(TopologyAclBinding binding) throws IOException {\n       url = url + \"/bindings\";\n     }\n \n-    HttpPost postRequest = buildPostRequest(url);\n-\n     try {\n       String jsonEntity;\n       if (binding.getResourceType().equals(ResourceType.CLUSTER)) {\n         jsonEntity = binding.getScope().clustersAsJson();\n       } else {\n         jsonEntity = binding.getScope().asJson();\n       }\n-      postRequest.setEntity(new StringEntity(jsonEntity));\n       LOGGER.debug(\"bind.entity: \" + jsonEntity);\n-      post(postRequest);\n+      doPost(\"/security/1.0/principals/\" + url, jsonEntity);\n     } catch (IOException e) {\n       LOGGER.error(e);\n       throw e;\n     }\n   }\n \n-  private HttpPost buildPostRequest(String url) {\n-    HttpPost postRequest = new HttpPost(mdsServer + \"/security/1.0/principals/\" + url);\n-    postRequest.addHeader(\"accept\", \" application/json\");\n-    postRequest.addHeader(\"Content-Type\", \"application/json\");\n-    postRequest.addHeader(\"Authorization\", \"Basic \" + basicCredentials);\n-    return postRequest;\n-  }\n-\n-  /**\n-   * Bind a new RBAC role\n-   *\n-   * @param principal\n-   * @param role\n-   * @param resource\n-   * @param resourceType\n-   * @param patternType\n-   * @return\n-   */\n   public TopologyAclBinding bind(\n       String principal, String role, String resource, String resourceType, String patternType) {\n \n@@ -155,6 +98,19 @@ public TopologyAclBinding bind(\n     return bind(principal, role, scope);\n   }\n \n+  private TopologyAclBinding bind(String principal, String role, RequestScope scope) {\n+\n+    ResourceType resourceType = ResourceType.fromString(scope.getResource(0).get(RESOURCE_TYPE));\n+    String resourceName = scope.getResource(0).get(RESOURCE_NAME);\n+    String patternType = scope.getResource(0).get(RESOURCE_PATTERN_TYPE);\n+\n+    TopologyAclBinding binding =\n+        new TopologyAclBinding(resourceType, resourceName, \"*\", role, principal, patternType);\n+\n+    binding.setScope(scope);\n+    return binding;\n+  }\n+\n   /**\n    * Remove the role (cluster or resource scoped) from the principal at the given scope/cluster.\n    * No-op if the user doesn’t have the role. Callable by Admins.\n@@ -164,17 +120,9 @@ public TopologyAclBinding bind(\n    * @param scope The request scope\n    */\n   public void deleteRole(String principal, String role, RequestScope scope) {\n-    HttpDeleteWithBody request =\n-        new HttpDeleteWithBody(\n-            mdsServer + \"/security/1.0/principals/\" + principal + \"/roles/\" + role);\n-    request.addHeader(\"accept\", \" application/json\");\n-    request.addHeader(\"Content-Type\", \"application/json\");\n-    request.addHeader(\"Authorization\", \"Basic \" + basicCredentials);\n-    LOGGER.debug(\"deleteRole: \" + request.getURI());\n+    String url = \"/security/1.0/principals/\" + principal + \"/roles/\" + role;\n     try {\n-      request.setEntity(new StringEntity(scope.asJson()));\n-      LOGGER.debug(\"bind.entity: \" + scope.asJson());\n-      delete(request);\n+      doDelete(url, scope.asJson());\n     } catch (IOException e) {\n       e.printStackTrace();\n     }\n@@ -185,19 +133,12 @@ public void deleteRole(String principal, String role, RequestScope scope) {\n   }\n \n   public List<String> lookupRoles(String principal, Map<String, Map<String, String>> clusters) {\n-    HttpPost postRequest =\n-        new HttpPost(mdsServer + \"/security/1.0/lookup/principals/\" + principal + \"/roleNames\");\n-    postRequest.addHeader(\"accept\", \" application/json\");\n-    postRequest.addHeader(\"Content-Type\", \"application/json\");\n-    postRequest.addHeader(\"Authorization\", \"Basic \" + basicCredentials);\n-\n     List<String> roles = new ArrayList<>();\n-\n     try {\n-      postRequest.setEntity(new StringEntity(JSON.asString(clusters)));\n-      String stringResponse = post(postRequest);\n-      if (!stringResponse.isEmpty()) {\n-        roles = JSON.toArray(stringResponse);\n+      String url = \"/security/1.0/lookup/principals/\" + principal + \"/roleNames\";\n+      String response = doPost(url, JSON.asString(clusters));\n+      if (!response.isEmpty()) {\n+        roles = JSON.toArray(response);\n       }\n     } catch (IOException e) {\n       LOGGER.error(e);\n@@ -206,57 +147,6 @@ public void deleteRole(String principal, String role, RequestScope scope) {\n     return roles;\n   }\n \n-  private final CloseableHttpClient httpClient = HttpClients.createDefault();\n-\n-  private Response get(HttpGet request) throws IOException {\n-    LOGGER.debug(\"GET.request: \" + request);\n-    try (CloseableHttpResponse response = httpClient.execute(request)) {\n-      LOGGER.debug(\"GET.response: \" + response);\n-      return new Response(response);\n-    }\n-  }\n-\n-  private String post(HttpPost request) throws IOException {\n-    LOGGER.debug(\"POST.request: \" + request);\n-\n-    try (CloseableHttpResponse response = httpClient.execute(request)) {\n-      LOGGER.debug(\"POST.response: \" + response);\n-      HttpEntity entity = response.getEntity();\n-      int statusCode = response.getStatusLine().getStatusCode();\n-      if (statusCode < 200 || statusCode > 299) {\n-        throw new IOException(\n-            \"Something happened with the connection, response status code: \"\n-                + statusCode\n-                + \" \"\n-                + request);\n-      }\n-      String result = \"\";\n-      if (entity != null) {\n-        result = EntityUtils.toString(entity);\n-      }\n-      return result;\n-    } catch (IOException ex) {\n-      LOGGER.error(ex);\n-      throw ex;\n-    }\n-  }\n-\n-  private String delete(HttpDeleteWithBody request) throws IOException {\n-    LOGGER.debug(\"DELETE.request: \" + request);\n-\n-    try (CloseableHttpResponse response = httpClient.execute(request)) {\n-      LOGGER.debug(\"DELETE.response: \" + response);\n-      HttpEntity entity = response.getEntity();\n-      // Header headers = entity.getContentType();\n-      String result = \"\";\n-      if (entity != null) {\n-        result = EntityUtils.toString(entity);\n-      }\n-\n-      return result;\n-    }\n-  }\n-\n   public void setKafkaClusterId(String clusterId) {\n     clusterIDs.setKafkaClusterId(clusterId);\n   }"
  },
  {
    "sha": "10b324795f55f795ec0cd21bf06f1f88f3b9d828",
    "filename": "src/main/java/com/purbon/kafka/topology/api/mds/Response.java",
    "status": "modified",
    "additions": 8,
    "deletions": 24,
    "changes": 32,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/api/mds/Response.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/api/mds/Response.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/api/mds/Response.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -2,13 +2,10 @@\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.purbon.kafka.topology.utils.JSON;\n-import java.io.IOException;\n+import java.net.http.HttpHeaders;\n+import java.net.http.HttpResponse;\n import java.util.HashMap;\n import java.util.Map;\n-import org.apache.http.Header;\n-import org.apache.http.HttpEntity;\n-import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.util.EntityUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n@@ -20,14 +17,13 @@\n   private final String response;\n   private final Map<String, Object> map;\n   private final int statusCode;\n-  private final Header headers;\n+  private final HttpHeaders headers;\n \n-  public Response(CloseableHttpResponse httpResponse) {\n-    HttpEntity entity = httpResponse.getEntity();\n-    this.headers = entity.getContentType();\n-    this.statusCode = httpResponse.getStatusLine().getStatusCode();\n-    this.response = parseBodyAsString(entity);\n-    this.map = responseToJson(response);\n+  public Response(HttpResponse<String> response) {\n+    this.headers = response.headers();\n+    this.statusCode = response.statusCode();\n+    this.response = response.body();\n+    this.map = responseToJson(this.response);\n   }\n \n   public Integer getStatus() {\n@@ -47,18 +43,6 @@ public Object getField(String field) {\n     }\n   }\n \n-  private String parseBodyAsString(HttpEntity entity) {\n-    String result = \"\";\n-    if (entity != null) {\n-      try {\n-        result = EntityUtils.toString(entity);\n-      } catch (IOException e) {\n-        LOGGER.error(e);\n-      }\n-    }\n-    return result;\n-  }\n-\n   public String getResponseAsString() {\n     return response;\n   }"
  },
  {
    "sha": "10dbc02f023dcf802dcd8e210072179df21f696e",
    "filename": "src/main/java/com/purbon/kafka/topology/api/mds/http/HttpDeleteWithBody.java",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/kafka-ops/julie/blob/bdec6c56dd145c1cf2aba6c9f86b642831ddf56e/src/main/java/com/purbon/kafka/topology/api/mds/http/HttpDeleteWithBody.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/bdec6c56dd145c1cf2aba6c9f86b642831ddf56e/src/main/java/com/purbon/kafka/topology/api/mds/http/HttpDeleteWithBody.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/api/mds/http/HttpDeleteWithBody.java?ref=bdec6c56dd145c1cf2aba6c9f86b642831ddf56e",
    "patch": "@@ -1,27 +0,0 @@\n-package com.purbon.kafka.topology.api.mds.http;\n-\n-import java.net.URI;\n-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\n-\n-public class HttpDeleteWithBody extends HttpEntityEnclosingRequestBase {\n-\n-  public static final String METHOD_NAME = \"DELETE\";\n-\n-  public String getMethod() {\n-    return METHOD_NAME;\n-  }\n-\n-  public HttpDeleteWithBody(final String uri) {\n-    super();\n-    setURI(URI.create(uri));\n-  }\n-\n-  public HttpDeleteWithBody(final URI uri) {\n-    super();\n-    setURI(uri);\n-  }\n-\n-  public HttpDeleteWithBody() {\n-    super();\n-  }\n-}"
  },
  {
    "sha": "44db6db9294ab7e711a1b612d1a2c00a4b52cec5",
    "filename": "src/main/java/com/purbon/kafka/topology/backend/AbstractBackend.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/backend/AbstractBackend.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/backend/AbstractBackend.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/backend/AbstractBackend.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -0,0 +1,35 @@\n+package com.purbon.kafka.topology.backend;\n+\n+import com.purbon.kafka.topology.roles.TopologyAclBinding;\n+import java.io.IOException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public abstract class AbstractBackend implements Backend {\n+\n+  private final String expression =\n+      \"^\\\"?\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(.+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\'\\\"?$\";\n+  private Pattern regexp;\n+\n+  public AbstractBackend() {\n+    this.regexp = Pattern.compile(expression);\n+  }\n+\n+  protected TopologyAclBinding buildAclBinding(String line) throws IOException {\n+    // 'TOPIC', 'topicB', '*', 'READ', 'User:Connect1', 'LITERAL'\n+    Matcher matches = regexp.matcher(line);\n+\n+    if (matches.groupCount() != 6 || !matches.matches()) {\n+      throw new IOException((\"line (\" + line + \") does not match\"));\n+    }\n+\n+    return TopologyAclBinding.build(\n+        matches.group(1), // resourceType\n+        matches.group(2), // resourceName\n+        matches.group(3), // host\n+        matches.group(4), // operation\n+        matches.group(5), // principal\n+        matches.group(6) // pattern\n+        );\n+  }\n+}"
  },
  {
    "sha": "59dfc1723009a2e7d465eb24f2aa597eba782979",
    "filename": "src/main/java/com/purbon/kafka/topology/backend/FileBackend.java",
    "status": "modified",
    "additions": 2,
    "deletions": 25,
    "changes": 27,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/backend/FileBackend.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/backend/FileBackend.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/backend/FileBackend.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -17,13 +17,11 @@\n import java.util.Objects;\n import java.util.Set;\n import java.util.function.Function;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n-public class FileBackend implements Backend {\n+public class FileBackend extends AbstractBackend {\n \n   private static final Logger LOGGER = LogManager.getLogger(FileBackend.class);\n   public static final String STATE_FILE_NAME = \".cluster-state\";\n@@ -34,12 +32,9 @@\n   // Use FileWriter instead of RandomAccessFile due to\n   // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4715154\n   private FileWriter writer;\n-  private String expression =\n-      \"^\\\"?\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(.+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\'\\\"?$\";\n-  private Pattern regexp;\n \n   public FileBackend() {\n-    this.regexp = Pattern.compile(expression);\n+    this.writer = null;\n   }\n \n   @Override\n@@ -150,24 +145,6 @@ private String moveFileToTag(String tag, BufferedReader in) throws IOException {\n     return line;\n   }\n \n-  private TopologyAclBinding buildAclBinding(String line) throws IOException {\n-    // 'TOPIC', 'topicB', '*', 'READ', 'User:Connect1', 'LITERAL'\n-    Matcher matches = regexp.matcher(line);\n-\n-    if (matches.groupCount() != 6 || !matches.matches()) {\n-      throw new IOException((\"line (\" + line + \") does not match\"));\n-    }\n-\n-    return TopologyAclBinding.build(\n-        matches.group(1), // resourceType\n-        matches.group(2), // resourceName\n-        matches.group(3), // host\n-        matches.group(4), // operation\n-        matches.group(5), // principal\n-        matches.group(6) // pattern\n-        );\n-  }\n-\n   public void saveType(String type) {\n     writeLine(type);\n   }"
  },
  {
    "sha": "b12a82c5eb048277c63dc33046f86498513ac6e1",
    "filename": "src/main/java/com/purbon/kafka/topology/backend/RedisBackend.java",
    "status": "modified",
    "additions": 2,
    "deletions": 26,
    "changes": 28,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/backend/RedisBackend.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/backend/RedisBackend.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/backend/RedisBackend.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -6,22 +6,17 @@\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import redis.clients.jedis.Jedis;\n \n-public class RedisBackend implements Backend {\n+public class RedisBackend extends AbstractBackend {\n \n   private static final Logger LOGGER = LogManager.getLogger(RedisBackend.class);\n \n   static final String JULIE_OPS_BINDINGS = \"julie.ops.bindings\";\n   static final String JULIE_OPS_TYPE = \"julie.ops.type\";\n \n-  private String expression =\n-      \"^\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\',\\\\s*\\\\'(.+)\\\\',\\\\s*\\\\'(\\\\S+)\\\\'$\";\n-  private Pattern regexp;\n   private Jedis jedis;\n \n   public RedisBackend(String host, int port) {\n@@ -30,7 +25,6 @@ public RedisBackend(String host, int port) {\n \n   public RedisBackend(Jedis jedis) {\n     this.jedis = jedis;\n-    this.regexp = Pattern.compile(expression);\n   }\n \n   @Override\n@@ -89,7 +83,7 @@ public void saveType(String type) {\n   public void saveBindings(Set<TopologyAclBinding> bindings) {\n \n     String[] members =\n-        bindings.stream().map(binding -> binding.toString()).toArray(size -> new String[size]);\n+        bindings.stream().map(TopologyAclBinding::toString).toArray(size -> new String[size]);\n \n     jedis.sadd(JULIE_OPS_BINDINGS, members);\n   }\n@@ -104,22 +98,4 @@ public void saveTopics(Set<String> topics) {}\n   public void close() {\n     jedis.close();\n   }\n-\n-  private TopologyAclBinding buildAclBinding(String line) throws IOException {\n-    // 'TOPIC', 'topicB', '*', 'READ', 'User:Connect1', 'LITERAL'\n-    Matcher matches = regexp.matcher(line);\n-\n-    if (matches.groupCount() != 6 || !matches.matches()) {\n-      throw new IOException((\"line (\" + line + \") does not match\"));\n-    }\n-\n-    return TopologyAclBinding.build(\n-        matches.group(1), // resourceType\n-        matches.group(2), // resourceName\n-        matches.group(3), // host\n-        matches.group(4), // operation\n-        matches.group(5), // principal\n-        matches.group(6) // pattern\n-        );\n-  }\n }"
  },
  {
    "sha": "b996f662c6b4312ff53f08637f11228e36b9dc36",
    "filename": "src/main/java/com/purbon/kafka/topology/clients/JulieHttpClient.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/clients/JulieHttpClient.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/clients/JulieHttpClient.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/clients/JulieHttpClient.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -0,0 +1,111 @@\n+package com.purbon.kafka.topology.clients;\n+\n+import com.purbon.kafka.topology.api.mds.Response;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+import java.util.Base64;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class JulieHttpClient {\n+\n+  private static final Logger LOGGER = LogManager.getLogger(JulieHttpClient.class);\n+\n+  private final long DEFAULT_TIMEOUT_MS = 60000;\n+\n+  private final HttpClient httpClient = HttpClient.newBuilder().build();\n+  private final String server;\n+  private String token;\n+\n+  public JulieHttpClient(String server) {\n+    this.server = server;\n+  }\n+\n+  private HttpRequest.Builder setupARequest(String url, String token, long timeoutMs) {\n+    return HttpRequest.newBuilder()\n+        .uri(URI.create(server + url))\n+        .timeout(Duration.ofMillis(timeoutMs))\n+        .header(\"accept\", \" application/json\")\n+        .header(\"Content-Type\", \"application/json\")\n+        .header(\"Authorization\", \"Basic \" + token);\n+  }\n+\n+  public void login(String user, String password) {\n+    String userAndPassword = user + \":\" + password;\n+    this.token = Base64.getEncoder().encodeToString(userAndPassword.getBytes());\n+  }\n+\n+  protected Response doGet(String url) throws IOException {\n+    HttpRequest request = getRequest(url, token, DEFAULT_TIMEOUT_MS);\n+    return doGet(request);\n+  }\n+\n+  private HttpRequest getRequest(String url, String token, long timeoutMs) {\n+    return setupARequest(url, token, timeoutMs).GET().build();\n+  }\n+\n+  private Response doGet(HttpRequest request) throws IOException {\n+    LOGGER.debug(\"method: \" + request.method() + \" request.uri: \" + request.uri());\n+    try {\n+      HttpResponse<String> response =\n+          httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n+      LOGGER.debug(\"method: \" + request.method() + \" response: \" + response);\n+      return new Response(response);\n+    } catch (Exception ex) {\n+      throw new IOException(ex);\n+    }\n+  }\n+\n+  protected String doPost(String url, String body) throws IOException {\n+    LOGGER.debug(\"doPost: \" + url + \" body: \" + body);\n+    HttpRequest request = postRequest(url, body, token, DEFAULT_TIMEOUT_MS);\n+    return doRequest(request);\n+  }\n+\n+  private HttpRequest postRequest(String url, String body, String token, long timeoutMs) {\n+    return setupARequest(url, token, timeoutMs)\n+        .POST(HttpRequest.BodyPublishers.ofString(body))\n+        .build();\n+  }\n+\n+  protected void doDelete(String url, String body) throws IOException {\n+    LOGGER.debug(\"doDelete: \" + url + \" body: \" + body);\n+    HttpRequest request = deleteRequest(url, body, token, DEFAULT_TIMEOUT_MS);\n+    doRequest(request);\n+  }\n+\n+  private HttpRequest deleteRequest(String url, String body, String token, long timeoutMs) {\n+    return setupARequest(url, token, timeoutMs)\n+        .method(\"DELETE\", HttpRequest.BodyPublishers.ofString(body))\n+        .build();\n+  }\n+\n+  private String doRequest(HttpRequest request) throws IOException {\n+    LOGGER.debug(\"method: \" + request.method() + \" request.uri: \" + request.uri());\n+    String result = \"\";\n+    try {\n+      HttpResponse<String> response =\n+          httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n+      LOGGER.debug(\"method: \" + request.method() + \" response: \" + response);\n+      int statusCode = response.statusCode();\n+      if (statusCode < 200 || statusCode > 299) {\n+        throw new IOException(\n+            \"Something happened with the connection, response status code: \"\n+                + statusCode\n+                + \" \"\n+                + request);\n+      }\n+\n+      if (response.body() != null) {\n+        result = response.body();\n+      }\n+    } catch (Exception ex) {\n+      throw new IOException(ex);\n+    }\n+    return result;\n+  }\n+}"
  },
  {
    "sha": "7427536d0c0dfa959bdf67ed9f2404c369d501e4",
    "filename": "src/main/java/com/purbon/kafka/topology/model/DynamicUser.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/model/DynamicUser.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/model/DynamicUser.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/model/DynamicUser.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -1,6 +1,5 @@\n package com.purbon.kafka.topology.model;\n \n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -11,10 +10,6 @@\n   public static final String READ_TOPICS = \"read\";\n   public static final String WRITE_TOPICS = \"write\";\n \n-  public DynamicUser() {\n-    this(\"\", new HashMap<>());\n-  }\n-\n   public DynamicUser(String principal, Map<String, List<String>> topics) {\n     super(principal);\n     this.topics = topics;"
  },
  {
    "sha": "a9ff1874fe29d4b7753314cf44041d1d17e4a42d",
    "filename": "src/main/java/com/purbon/kafka/topology/roles/acls/AclsBindingsBuilder.java",
    "status": "modified",
    "additions": 15,
    "deletions": 23,
    "changes": 38,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/roles/acls/AclsBindingsBuilder.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/roles/acls/AclsBindingsBuilder.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/roles/acls/AclsBindingsBuilder.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -12,11 +12,9 @@\n import com.purbon.kafka.topology.model.users.platform.SchemaRegistryInstance;\n import com.purbon.kafka.topology.roles.TopologyAclBinding;\n import com.purbon.kafka.topology.utils.CCloudUtils;\n+import com.purbon.kafka.topology.utils.Utils;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.List;\n+import java.util.*;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.kafka.common.acl.AccessControlEntry;\n@@ -32,6 +30,7 @@\n public class AclsBindingsBuilder implements BindingsBuilderProvider {\n \n   private static final Logger LOGGER = LogManager.getLogger(AclsBindingsBuilder.class);\n+  private static final String KAFKA_CLUSTER_NAME = \"kafka-cluster\";\n \n   private final Configuration config;\n   private final CCloudUtils cCloudUtils;\n@@ -50,8 +49,8 @@ public AclsBindingsBuilder(Configuration config, CCloudUtils cCloudUtils) {\n       Connector connector, String topicPrefixNotInUse) {\n \n     String principal = translate(connector.getPrincipal());\n-    List<String> readTopics = connector.getTopics().get(\"read\");\n-    List<String> writeTopics = connector.getTopics().get(\"write\");\n+    Stream<String> readTopics = Utils.asNullableStream(connector.getTopics().get(\"read\"));\n+    Stream<String> writeTopics = Utils.asNullableStream(connector.getTopics().get(\"write\"));\n \n     List<AclBinding> acls = new ArrayList<>();\n \n@@ -68,7 +67,7 @@ public AclsBindingsBuilder(Configuration config, CCloudUtils cCloudUtils) {\n \n     if (config.enabledConnectorTopicCreateAcl()) {\n       ResourcePattern resourcePattern =\n-          new ResourcePattern(ResourceType.CLUSTER, \"kafka-cluster\", PatternType.LITERAL);\n+          new ResourcePattern(ResourceType.CLUSTER, KAFKA_CLUSTER_NAME, PatternType.LITERAL);\n       AccessControlEntry entry =\n           new AccessControlEntry(principal, \"*\", AclOperation.CREATE, AclPermissionType.ALLOW);\n       acls.add(new AclBinding(resourcePattern, entry));\n@@ -80,19 +79,13 @@ public AclsBindingsBuilder(Configuration config, CCloudUtils cCloudUtils) {\n         new AccessControlEntry(principal, \"*\", AclOperation.READ, AclPermissionType.ALLOW);\n     acls.add(new AclBinding(resourcePattern, entry));\n \n-    if (readTopics != null) {\n-      readTopics.forEach(\n-          topic ->\n-              acls.add(\n-                  buildTopicLevelAcl(principal, topic, PatternType.LITERAL, AclOperation.READ)));\n-    }\n+    readTopics\n+        .map(topic -> buildTopicLevelAcl(principal, topic, PatternType.LITERAL, AclOperation.READ))\n+        .forEach(acls::add);\n \n-    if (writeTopics != null) {\n-      writeTopics.forEach(\n-          topic ->\n-              acls.add(\n-                  buildTopicLevelAcl(principal, topic, PatternType.LITERAL, AclOperation.WRITE)));\n-    }\n+    writeTopics\n+        .map(topic -> buildTopicLevelAcl(principal, topic, PatternType.LITERAL, AclOperation.WRITE))\n+        .forEach(acls::add);\n \n     return toList(acls.stream());\n   }\n@@ -137,10 +130,9 @@ public AclsBindingsBuilder(Configuration config, CCloudUtils cCloudUtils) {\n \n     List<AclBinding> bindings = new ArrayList<>();\n     String principal = translate(producer.getPrincipal());\n-    bindings.addAll(\n-        Arrays.asList(\n-            buildTopicLevelAcl(principal, topic, patternType, AclOperation.DESCRIBE),\n-            buildTopicLevelAcl(principal, topic, patternType, AclOperation.WRITE)));\n+    Stream.of(AclOperation.DESCRIBE, AclOperation.WRITE)\n+        .map(aclOperation -> buildTopicLevelAcl(principal, topic, patternType, aclOperation))\n+        .forEach(bindings::add);\n \n     producer\n         .getTransactionId()"
  },
  {
    "sha": "79541389e549feb3f226b87a1a39e3b52a497746",
    "filename": "src/main/java/com/purbon/kafka/topology/serdes/PlanMapSerdes.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/serdes/PlanMapSerdes.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/serdes/PlanMapSerdes.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/serdes/PlanMapSerdes.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -27,10 +27,6 @@ public PlanMap deserialise(File file) throws IOException {\n     return mapper.readValue(file, PlanMap.class);\n   }\n \n-  public PlanMap deserialise(String content) throws IOException {\n-    return mapper.readValue(content, PlanMap.class);\n-  }\n-\n   public String serialise(PlanMap planMap) throws JsonProcessingException {\n     return mapper.writeValueAsString(planMap);\n   }"
  },
  {
    "sha": "1483d0b8cc86ad03f02b638f0f526cd220ab0e68",
    "filename": "src/main/java/com/purbon/kafka/topology/utils/Utils.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/kafka-ops/julie/blob/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/utils/Utils.java",
    "raw_url": "https://github.com/kafka-ops/julie/raw/210c18b408aba7eac019ddb49da7fd3294c295f1/src/main/java/com/purbon/kafka/topology/utils/Utils.java",
    "contents_url": "https://api.github.com/repos/kafka-ops/julie/contents/src/main/java/com/purbon/kafka/topology/utils/Utils.java?ref=210c18b408aba7eac019ddb49da7fd3294c295f1",
    "patch": "@@ -0,0 +1,14 @@\n+package com.purbon.kafka.topology.utils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class Utils {\n+\n+  public static Stream<String> asNullableStream(List<String> items) {\n+    Optional<List<String>> optional = Optional.ofNullable(items);\n+    return optional.stream().flatMap(Collection::stream);\n+  }\n+}"
  }
]
