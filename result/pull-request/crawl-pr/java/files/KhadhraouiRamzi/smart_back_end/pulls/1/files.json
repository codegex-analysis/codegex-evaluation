[
  {
    "sha": "ab385727e04a0287ec88ddf7dbc9f26a22d19f72",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/README.md",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/README.md",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/README.md?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -1,2 +1 @@\n-\"# smart_back_end\" \n-\"# gestion-produit-back\" \n+\"#   new branch\"  "
  },
  {
    "sha": "8cce62dc5b491315d7bf0a2d06ac20c82868cac2",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/pom.xml",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/pom.xml",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/pom.xml?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -45,13 +45,30 @@\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n \t\t\n-\t\t\t\t<dependency>\n+\t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-devtools</artifactId>\n \t\t\t<scope>runtime</scope>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n-\t</dependencies>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>io.jsonwebtoken</groupId>\n+\t\t\t<artifactId>jjwt</artifactId>\n+\t\t\t<version>0.9.1</version>\n+\t\t</dependency>\n+        <dependency>\n+            <groupId>javax.validation</groupId>\n+            <artifactId>validation-api</artifactId>\n+            <version>2.0.1.Final</version>\n+        </dependency>\n+\n+    </dependencies>\n \n \t<build>\n \t\t<plugins>"
  },
  {
    "sha": "21f606f10d1a4744dbf259e4167594808dc52e0c",
    "filename": "src/main/java/com/example/demo/dao/roleRepository.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/dao/roleRepository.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/dao/roleRepository.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/dao/roleRepository.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -1,9 +1,15 @@\n package com.example.demo.dao;\n \n+import com.example.demo.entite.ERole;\n import com.example.demo.entite.role;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.stereotype.Repository;\n \n+import java.util.Optional;\n+\n @Repository\n public interface roleRepository extends JpaRepository<role,Integer> {\n+\n+    Optional<role> findByName(ERole name);\n+\n }"
  },
  {
    "sha": "22d0998e0e19c8cf5b41be5b75adba2b2ba591c8",
    "filename": "src/main/java/com/example/demo/dao/userRepository.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/dao/userRepository.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/dao/userRepository.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/dao/userRepository.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -7,6 +7,7 @@\n import org.springframework.stereotype.Repository;\n \n import java.util.List;\n+import java.util.Optional;\n \n @Repository\n public interface userRepository extends JpaRepository<user,Integer> {\n@@ -36,5 +37,13 @@\n             \" select   nom,prenom,phone,email,cin,part   from user \" )\n     List<Object[]> listDUsers();\n \n+    /*---------used to Spring Security*/\n+\n+    Optional<user> findByEmail(String email);\n+\n+    Boolean existsByEmail(String email);\n+\n+    /*-------------------------------------*/\n+\n \n }"
  },
  {
    "sha": "e3b000e7c202fc784ea35fb4ce0705d051a56f3c",
    "filename": "src/main/java/com/example/demo/entite/historique.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/entite/historique.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/entite/historique.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/entite/historique.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -50,6 +50,7 @@ public void setId(Integer id) {\n \t\t}\n \n \t\tpublic Date getCdate() {\n+\n \t\t\treturn cdate;\n \t\t}\n "
  },
  {
    "sha": "329cc3e370c4cf4b16e253f54a084810edd9eb12",
    "filename": "src/main/java/com/example/demo/entite/role.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/entite/role.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/entite/role.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/entite/role.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -1,9 +1,6 @@\n package com.example.demo.entite;\n \n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n+import javax.persistence.*;\n import java.util.Date;\n \n \n@@ -14,6 +11,7 @@\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private int Id;\n \n+    @Enumerated(EnumType.STRING)\n     private ERole name;\n \n     private Date cdate;"
  },
  {
    "sha": "33c27da6041718693f856a22fe867a6e1d1d5ec8",
    "filename": "src/main/java/com/example/demo/entite/user.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/entite/user.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/entite/user.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/entite/user.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -9,6 +9,7 @@\n \n \n @Entity\n+@Table(uniqueConstraints = {@UniqueConstraint(columnNames = \"email\")})\n public class user {\n \n     @Id\n@@ -41,6 +42,10 @@\n     @ManyToOne\n     private marketing marketing;\n \n+\n+    public user() {\n+    }\n+\n     public marketing getMarketing() {\n         return marketing;\n     }\n@@ -200,4 +205,9 @@ public String getProposition() {\n     public void setProposition(String proposition) {\n         this.proposition = proposition;\n     }\n+\n+    public user(String email, String password) {\n+        this.email = email;\n+        this.password = password;\n+    }\n }"
  },
  {
    "sha": "4958fa63ad0711e265aa12a88c478f6df7cba8e5",
    "filename": "src/main/java/com/example/demo/payload/request/LoginRequest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/request/LoginRequest.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/request/LoginRequest.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/payload/request/LoginRequest.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,27 @@\n+package com.example.demo.payload.request;\n+\n+import javax.validation.constraints.NotBlank;\n+\n+public class LoginRequest {\n+\t@NotBlank\n+\tprivate String email;\n+\n+\t@NotBlank\n+\tprivate String password;\n+\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\tpublic void setPassword(String password) {\n+\t\tthis.password = password;\n+\t}\n+}"
  },
  {
    "sha": "3b4bd11b2eb58cb6aaad475f109050154584a9d6",
    "filename": "src/main/java/com/example/demo/payload/request/SignupRequest.java",
    "status": "added",
    "additions": 219,
    "deletions": 0,
    "changes": 219,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/request/SignupRequest.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/request/SignupRequest.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/payload/request/SignupRequest.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,219 @@\n+package com.example.demo.payload.request;\n+\n+import java.sql.Date;\n+import java.util.Set;\n+\n+import javax.validation.constraints.*;\n+ \n+public class SignupRequest {\n+\n+    @NotBlank\n+    @Size(max = 50)\n+    @Email\n+    private String email;\n+    \n+    private Set<String> role;\n+    \n+    @NotBlank\n+    @Size(min = 6, max = 40)\n+    private String password;\n+\n+    @NotBlank\n+    @Size(min = 6, max = 40)\n+    private  String nom  ;\n+\n+    @NotBlank\n+    @Size(min = 6, max = 40)\n+    private  String prenom  ;\n+\n+    private  Byte[] image ;\n+\n+    @NotBlank\n+    @Size(min = 6, max = 40)\n+    private  String nArtistique  ;\n+\n+    @NotBlank\n+    @Size(min = 8, max = 11)\n+    private  String phone  ;\n+\n+    @NotBlank\n+    @Size(min = 20, max = 40)\n+    private  String nationnalite  ;\n+\n+    @NotBlank\n+    @Size(min = 8)\n+    private  String cin  ;\n+\n+    private  Byte[] contrat  ;\n+\n+    private  float part  ;\n+\n+    private  float retenu ;\n+\n+    @NotBlank\n+    @Size(min = 20, max = 40)\n+    private  String proposition ;\n+\n+    private  Date date  ;\n+\n+    private  Date datecin  ;\n+\n+    private Date cdate  ;\n+\n+    private Date udate;\n+\n+\n+\n+  \n+/*    public String getUsername() {\n+        return username;\n+    }\n+ \n+    public void setUsername(String username) {\n+        this.username = username;\n+    }*/\n+ \n+    public String getEmail() {\n+        return email;\n+    }\n+ \n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+ \n+    public String getPassword() {\n+        return password;\n+    }\n+ \n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+    \n+    public Set<String> getRole() {\n+      return this.role;\n+    }\n+    \n+    public void setRole(Set<String> role) {\n+      this.role = role;\n+    }\n+\n+    public String getNom() {\n+        return nom;\n+    }\n+\n+    public void setNom(String nom) {\n+        this.nom = nom;\n+    }\n+\n+    public String getPrenom() {\n+        return prenom;\n+    }\n+\n+    public void setPrenom(String prenom) {\n+        this.prenom = prenom;\n+    }\n+\n+    public Byte[] getImage() {\n+        return image;\n+    }\n+\n+    public void setImage(Byte[] image) {\n+        this.image = image;\n+    }\n+\n+    public String getnArtistique() {\n+        return nArtistique;\n+    }\n+\n+    public void setnArtistique(String nArtistique) {\n+        this.nArtistique = nArtistique;\n+    }\n+\n+    public String getPhone() {\n+        return phone;\n+    }\n+\n+    public void setPhone(String phone) {\n+        this.phone = phone;\n+    }\n+\n+    public String getNationnalite() {\n+        return nationnalite;\n+    }\n+\n+    public void setNationnalite(String nationnalite) {\n+        this.nationnalite = nationnalite;\n+    }\n+\n+    public String getCin() {\n+        return cin;\n+    }\n+\n+    public void setCin(String cin) {\n+        this.cin = cin;\n+    }\n+\n+    public Byte[] getContrat() {\n+        return contrat;\n+    }\n+\n+    public void setContrat(Byte[] contrat) {\n+        this.contrat = contrat;\n+    }\n+\n+    public float getPart() {\n+        return part;\n+    }\n+\n+    public void setPart(float part) {\n+        this.part = part;\n+    }\n+\n+    public float getRetenu() {\n+        return retenu;\n+    }\n+\n+    public void setRetenu(float retenu) {\n+        this.retenu = retenu;\n+    }\n+\n+    public String getProposition() {\n+        return proposition;\n+    }\n+\n+    public void setProposition(String proposition) {\n+        this.proposition = proposition;\n+    }\n+\n+    public Date getDate() {\n+        return date;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public Date getDatecin() {\n+        return datecin;\n+    }\n+\n+    public void setDatecin(Date datecin) {\n+        this.datecin = datecin;\n+    }\n+\n+    public Date getCdate() {\n+        return cdate;\n+    }\n+\n+    public void setCdate(Date cdate) {\n+        this.cdate = cdate;\n+    }\n+\n+    public Date getUdate() {\n+        return udate;\n+    }\n+\n+    public void setUdate(Date udate) {\n+        this.udate = udate;\n+    }\n+}"
  },
  {
    "sha": "a5928dc6d7a84b96124a1b34052aa8285598db7a",
    "filename": "src/main/java/com/example/demo/payload/response/JwtResponse.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/response/JwtResponse.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/response/JwtResponse.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/payload/response/JwtResponse.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,63 @@\n+package com.example.demo.payload.response;\n+\n+import java.util.List;\n+\n+public class JwtResponse {\n+\tprivate String token;\n+\tprivate String type = \"Bearer\";\n+\tprivate Integer id;\n+\t/*private String username;*/\n+\tprivate String email;\n+\tprivate List<String> roles;\n+\n+\tpublic JwtResponse(String accessToken, Integer id, String email, List<String> roles) {\n+\t\tthis.token = accessToken;\n+\t\tthis.id = id;\n+\t\tthis.email = email;\n+\t\tthis.roles = roles;\n+\t}\n+\n+\tpublic String getAccessToken() {\n+\t\treturn token;\n+\t}\n+\n+\tpublic void setAccessToken(String accessToken) {\n+\t\tthis.token = accessToken;\n+\t}\n+\n+\tpublic String getTokenType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic void setTokenType(String tokenType) {\n+\t\tthis.type = tokenType;\n+\t}\n+\n+\tpublic Integer getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Integer id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\n+/*\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\tpublic void setUsername(String username) {\n+\t\tthis.username = username;\n+\t}*/\n+\n+\tpublic List<String> getRoles() {\n+\t\treturn roles;\n+\t}\n+}"
  },
  {
    "sha": "c5edb74b3f20d58d0e8e42456a0691a7f2ad0011",
    "filename": "src/main/java/com/example/demo/payload/response/MessageResponse.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/response/MessageResponse.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/payload/response/MessageResponse.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/payload/response/MessageResponse.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,18 @@\n+package com.example.demo.payload.response;\n+\n+public class MessageResponse {\n+\n+\tprivate String message;\n+\n+\tpublic MessageResponse(String message) {\n+\t    this.message = message;\n+\t  }\n+\n+\tpublic String getMessage() {\n+\t\treturn message;\n+\t}\n+\n+\tpublic void setMessage(String message) {\n+\t\tthis.message = message;\n+\t}\n+}"
  },
  {
    "sha": "2afd974f12418e25067be27b3e9c9ed093817c52",
    "filename": "src/main/java/com/example/demo/security/WebSecurityConfig.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/WebSecurityConfig.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/WebSecurityConfig.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/security/WebSecurityConfig.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,66 @@\n+package com.example.demo.security;\n+\n+import com.example.demo.security.jwt.AuthEntryPointJwt;\n+import com.example.demo.security.jwt.AuthTokenFilter;\n+import com.example.demo.security.services.UserDetailsServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(\n+\t\t// securedEnabled = true,\n+\t\t// jsr250Enabled = true,\n+\t\tprePostEnabled = true)\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\t@Autowired\n+\tUserDetailsServiceImpl userDetailsService;\n+\n+\t@Autowired\n+\tprivate AuthEntryPointJwt unauthorizedHandler;\n+\n+\t@Bean\n+\tpublic AuthTokenFilter authenticationJwtTokenFilter() {\n+\t\treturn new AuthTokenFilter();\n+\t}\n+\n+\t@Override\n+\tpublic void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {\n+\t\tauthenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());\n+\t}\n+\n+\t@Bean\n+\t@Override\n+\tpublic AuthenticationManager authenticationManagerBean() throws Exception {\n+\t\treturn super.authenticationManagerBean();\n+\t}\n+\n+\t@Bean\n+\tpublic PasswordEncoder passwordEncoder() {\n+\t\treturn new BCryptPasswordEncoder();\n+\t}\n+\n+\t@Override\n+\tprotected void configure(HttpSecurity http) throws Exception {\n+\t\thttp.cors().and().csrf().disable()\n+\t\t\t.exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\n+\t\t\t.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\n+\t\t\t.authorizeRequests().antMatchers(\"/api/auth/**\").permitAll()\n+\t\t\t.antMatchers(\"/api/test/**\").permitAll()\n+\t\t\t.anyRequest().authenticated();\n+\n+\t\thttp.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);\n+\t}\n+}"
  },
  {
    "sha": "aafe372f475d5bb8f3b94afe679754446f96dfce",
    "filename": "src/main/java/com/example/demo/security/jwt/AuthEntryPointJwt.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/jwt/AuthEntryPointJwt.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/jwt/AuthEntryPointJwt.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/security/jwt/AuthEntryPointJwt.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,27 @@\n+package com.example.demo.security.jwt;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuthEntryPointJwt implements AuthenticationEntryPoint {\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(AuthEntryPointJwt.class);\n+\n+\t@Override\n+\tpublic void commence(HttpServletRequest request, HttpServletResponse response,\n+\t\t\tAuthenticationException authException) throws IOException, ServletException {\n+\t\tlogger.error(\"Unauthorized error: {}\", authException.getMessage());\n+\t\tresponse.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Error: Unauthorized\");\n+\t}\n+\n+}"
  },
  {
    "sha": "96dc43c1343909268d1e6395bc01027653e74102",
    "filename": "src/main/java/com/example/demo/security/jwt/AuthTokenFilter.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/jwt/AuthTokenFilter.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/jwt/AuthTokenFilter.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/security/jwt/AuthTokenFilter.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,63 @@\n+package com.example.demo.security.jwt;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.example.demo.security.services.UserDetailsServiceImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+\n+\n+public class AuthTokenFilter extends OncePerRequestFilter {\n+\t@Autowired\n+\tprivate JwtUtils jwtUtils;\n+\n+\t@Autowired\n+\tprivate UserDetailsServiceImpl userDetailsService;\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);\n+\n+\t@Override\n+\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+\t\t\tthrows ServletException, IOException {\n+\t\ttry {\n+\t\t\tString jwt = parseJwt(request);\n+\t\t\tif (jwt != null && jwtUtils.validateJwtToken(jwt)) {\n+\t\t\t\tString email = jwtUtils.getUserNameFromJwtToken(jwt);\n+\n+\t\t\t\tUserDetails userDetails = userDetailsService.loadUserByUsername(email);\n+\t\t\t\tUsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\n+\t\t\t\t\t\tuserDetails, null, userDetails.getAuthorities());\n+\t\t\t\tauthentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n+\n+\t\t\t\tSecurityContextHolder.getContext().setAuthentication(authentication);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(\"Cannot set user authentication: {}\", e);\n+\t\t}\n+\n+\t\tfilterChain.doFilter(request, response);\n+\t}\n+\n+\tprivate String parseJwt(HttpServletRequest request) {\n+\t\tString headerAuth = request.getHeader(\"Authorization\");\n+\n+\t\tif (StringUtils.hasText(headerAuth) && headerAuth.startsWith(\"Bearer \")) {\n+\t\t\treturn headerAuth.substring(7, headerAuth.length());\n+\t\t}\n+\n+\t\treturn null;\n+\t}\n+}"
  },
  {
    "sha": "0de99fe31eb891b3c3a335460a41c025f8d4667f",
    "filename": "src/main/java/com/example/demo/security/jwt/JwtUtils.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/jwt/JwtUtils.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/jwt/JwtUtils.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/security/jwt/JwtUtils.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,58 @@\n+package com.example.demo.security.jwt;\n+\n+import java.util.Date;\n+\n+import com.example.demo.security.services.UserDetailsImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+import io.jsonwebtoken.*;\n+\n+@Component\n+public class JwtUtils {\n+\tprivate static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);\n+\n+\t@Value(\"${bezkoder.app.jwtSecret}\")\n+\tprivate String jwtSecret;\n+\n+\t@Value(\"${bezkoder.app.jwtExpirationMs}\")\n+\tprivate int jwtExpirationMs;\n+\n+\tpublic String generateJwtToken(Authentication authentication) {\n+\n+\t\tUserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\n+\n+\t\treturn Jwts.builder()\n+\t\t\t\t.setSubject((userPrincipal.getUsername()))\n+\t\t\t\t.setIssuedAt(new Date())\n+\t\t\t\t.setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\n+\t\t\t\t.signWith(SignatureAlgorithm.HS512, jwtSecret)\n+\t\t\t\t.compact();\n+\t}\n+\n+\tpublic String getUserNameFromJwtToken(String token) {\n+\t\treturn Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().getSubject();\n+\t}\n+\n+\tpublic boolean validateJwtToken(String authToken) {\n+\t\ttry {\n+\t\t\tJwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken);\n+\t\t\treturn true;\n+\t\t} catch (SignatureException e) {\n+\t\t\tlogger.error(\"Invalid JWT signature: {}\", e.getMessage());\n+\t\t} catch (MalformedJwtException e) {\n+\t\t\tlogger.error(\"Invalid JWT token: {}\", e.getMessage());\n+\t\t} catch (ExpiredJwtException e) {\n+\t\t\tlogger.error(\"JWT token is expired: {}\", e.getMessage());\n+\t\t} catch (UnsupportedJwtException e) {\n+\t\t\tlogger.error(\"JWT token is unsupported: {}\", e.getMessage());\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tlogger.error(\"JWT claims string is empty: {}\", e.getMessage());\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+}"
  },
  {
    "sha": "d94d01b2cb8df6a06ef8660acef1dd13d0d53d26",
    "filename": "src/main/java/com/example/demo/security/services/UserDetailsImpl.java",
    "status": "added",
    "additions": 155,
    "deletions": 0,
    "changes": 155,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/services/UserDetailsImpl.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/services/UserDetailsImpl.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/security/services/UserDetailsImpl.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,155 @@\n+package com.example.demo.security.services;\n+\n+import java.sql.Date;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import com.example.demo.entite.user;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public class UserDetailsImpl implements UserDetails {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate Integer id;\n+\tprivate Date cdate  ;\n+\tprivate Date udate;\n+\tprivate  String nom  ;\n+\tprivate  String prenom  ;\n+\tprivate  Byte[] image ;\n+\tprivate  String nArtistique  ;\n+\tprivate  String phone  ;\n+\tprivate  String email  ;\n+\tprivate  Date date  ;\n+\tprivate  String nationnalite  ;\n+\tprivate  String cin  ;\n+\tprivate  Date datecin  ;\n+\tprivate  Byte[] contrat  ;\n+\tprivate  float part  ;\n+\tprivate  float retenu ;\n+\tprivate  String proposition ;\n+\n+\t@JsonIgnore\n+\tprivate String password;\n+\n+\tprivate Collection<? extends GrantedAuthority> authorities;\n+\n+\tpublic UserDetailsImpl(Integer id, Date cdate, Date udate, String nom, String prenom, Byte[] image, String nArtistique, String phone, String email, Date date, String nationnalite, String cin, Date datecin, Byte[] contrat, float part, float retenu, String proposition, String password, Collection<? extends GrantedAuthority> authorities) {\n+\t\tthis.id = id;\n+\t\tthis.cdate = cdate;\n+\t\tthis.udate = udate;\n+\t\tthis.nom = nom;\n+\t\tthis.prenom = prenom;\n+\t\tthis.image = image;\n+\t\tthis.nArtistique = nArtistique;\n+\t\tthis.phone = phone;\n+\t\tthis.email = email;\n+\t\tthis.date = date;\n+\t\tthis.nationnalite = nationnalite;\n+\t\tthis.cin = cin;\n+\t\tthis.datecin = datecin;\n+\t\tthis.contrat = contrat;\n+\t\tthis.part = part;\n+\t\tthis.retenu = retenu;\n+\t\tthis.proposition = proposition;\n+\t\tthis.password = password;\n+\t\tthis.authorities = authorities;\n+\t}\n+\n+/*\tpublic UserDetailsImpl(Integer id, String email, String password, List<GrantedAuthority> authorities) {\n+\t}*/\n+\n+\t/*public UserDetailsImpl(Long id, String username, String email, String password,\n+\t\t\tCollection<? extends GrantedAuthority> authorities) {\n+\t\tthis.id = id;\n+\t\tthis.username = username;\n+\t\tthis.email = email;\n+\t\tthis.password = password;\n+\t\tthis.authorities = authorities;\n+\t}*/\n+\n+\tpublic static UserDetailsImpl build(user user) {\n+\t\tList<GrantedAuthority> authorities = user.getRoles().stream()\n+\t\t\t\t.map(role -> new SimpleGrantedAuthority(role.getName().name()))\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\treturn new UserDetailsImpl(\n+\t\t\t\tuser.getId(),\n+\t\t\t\tuser.getCdate(),\n+\t\t\t\tuser.getUdate(),\n+\t\t\t\tuser.getNom(),\n+\t\t\t\tuser.getPrenom(),\n+\t\t\t\tuser.getImage(),\n+\t\t\t\tuser.getnArtistique(),\n+\t\t\t\tuser.getPhone(),\n+\t\t\t\tuser.getEmail(),\n+\t\t\t\tuser.getDate(),\n+\t\t\t\tuser.getNationnalite(),\n+\t\t\t\tuser.getCin(),\n+\t\t\t\tuser.getDatecin(),\n+\t\t\t\tuser.getContrat(),\n+\t\t\t\tuser.getPart(),\n+\t\t\t\tuser.getRetenu(),\n+\t\t\t\tuser.getProposition(),\n+\t\t\t\tuser.getPassword(), \n+\t\t\t\tauthorities);\n+\t}\n+\n+\t@Override\n+\tpublic Collection<? extends GrantedAuthority> getAuthorities() {\n+\t\treturn authorities;\n+\t}\n+\n+\tpublic Integer getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\n+\t@Override\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\t@Override\n+\tpublic String getUsername() {\n+\t\treturn email;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAccountNonExpired() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAccountNonLocked() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isCredentialsNonExpired() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEnabled() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o)\n+\t\t\treturn true;\n+\t\tif (o == null || getClass() != o.getClass())\n+\t\t\treturn false;\n+\t\tUserDetailsImpl user = (UserDetailsImpl) o;\n+\t\treturn Objects.equals(id, user.id);\n+\t}\n+}"
  },
  {
    "sha": "15cb011f1c9dab8f521804133b7621023587a83f",
    "filename": "src/main/java/com/example/demo/security/services/UserDetailsServiceImpl.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/services/UserDetailsServiceImpl.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/security/services/UserDetailsServiceImpl.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/security/services/UserDetailsServiceImpl.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,26 @@\n+package com.example.demo.security.services;\n+\n+import com.example.demo.dao.userRepository;\n+import com.example.demo.entite.user;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+\n+@Service\n+public class UserDetailsServiceImpl implements UserDetailsService {\n+\t@Autowired\n+\tuserRepository userRepository;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic UserDetailsImpl loadUserByUsername(String email) throws UsernameNotFoundException {\n+\t\tuser user = userRepository.findByEmail(email)\n+\t\t\t\t.orElseThrow(() -> new UsernameNotFoundException(\"User Not Found with email: \" + email));\n+\n+\t\treturn UserDetailsImpl.build(user);\n+\t}\n+\n+}"
  },
  {
    "sha": "d0ab831268ffeb810fdf5bbe7596606f6d6ce94a",
    "filename": "src/main/java/com/example/demo/webService/AuthController.java",
    "status": "added",
    "additions": 137,
    "deletions": 0,
    "changes": 137,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/webService/AuthController.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/webService/AuthController.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/webService/AuthController.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,137 @@\n+package com.example.demo.webService;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.Valid;\n+\n+import com.example.demo.dao.roleRepository;\n+import com.example.demo.dao.userRepository;\n+import com.example.demo.entite.ERole;\n+import com.example.demo.entite.role;\n+import com.example.demo.entite.user;\n+import com.example.demo.payload.request.LoginRequest;\n+import com.example.demo.payload.request.SignupRequest;\n+import com.example.demo.payload.response.JwtResponse;\n+import com.example.demo.payload.response.MessageResponse;\n+import com.example.demo.security.jwt.JwtUtils;\n+import com.example.demo.security.services.UserDetailsImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.web.bind.annotation.*;\n+\n+\n+@CrossOrigin(origins = \"*\", maxAge = 3600)\n+@RestController\n+@RequestMapping(\"/api/auth\")\n+public class AuthController {\n+\t@Autowired\n+\tAuthenticationManager authenticationManager;\n+\n+\t@Autowired\n+\tuserRepository userRepository;\n+\n+\t@Autowired\n+\troleRepository roleRepository;\n+\n+\t@Autowired\n+\tPasswordEncoder encoder;\n+\n+\t@Autowired\n+\tJwtUtils jwtUtils;\n+\n+\t@RequestMapping(value = \"signin\", method = RequestMethod.POST, consumes = \"application/json\")\n+\tpublic ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {\n+\n+\t\tAuthentication authentication = authenticationManager.authenticate(\n+\t\t\t\tnew UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword()));\n+\n+\t\tSecurityContextHolder.getContext().setAuthentication(authentication);\n+\t\tString jwt = jwtUtils.generateJwtToken(authentication);\n+\t\t\n+\t\tUserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\n+\t\tList<String> roles = userDetails.getAuthorities().stream()\n+\t\t\t\t.map(item -> item.getAuthority())\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\treturn ResponseEntity.ok(new JwtResponse(jwt,\n+\t\t\t\t\t\t\t\t\t\t\t\t userDetails.getId(),\n+\t\t\t\t\t\t\t\t\t\t\t\t userDetails.getEmail(), \n+\t\t\t\t\t\t\t\t\t\t\t\t roles));\n+\t}\n+\n+\t@RequestMapping(value = \"signup\", method = RequestMethod.POST, consumes = \"application/json\")\n+\tpublic ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signUpRequest) {\n+\n+\t\tif (userRepository.existsByEmail(signUpRequest.getEmail())) {\n+\t\t\treturn ResponseEntity\n+\t\t\t\t\t.badRequest()\n+\t\t\t\t\t.body(new MessageResponse(\"Error: Email is already in use!\"));\n+\t\t}\n+\n+\t\t// Create new user's account\n+\t\tuser user = new user(signUpRequest.getEmail(),\n+\t\t\t\t\t\t\t encoder.encode(signUpRequest.getPassword()));\n+\n+\t\tSet<String> strRoles = signUpRequest.getRole();\n+\t\tSet<role> roles = new HashSet<>();\n+\n+\t\tif (strRoles == null) {\n+\t\t\trole userRole = roleRepository.findByName(ERole.ROLE_ADMIN)\n+\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\troles.add(userRole);\n+\t\t} else {\n+\t\t\tstrRoles.forEach(role -> {\n+\t\t\t\tswitch (role) {\n+\t\t\t\tcase \"ROLE_ADMIN\":\n+\t\t\t\t\trole adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)\n+\t\t\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\t\t\troles.add(adminRole);\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase \"ROLE_GESTIONNAIRE\":\n+\t\t\t\t\trole gestRole = roleRepository.findByName(ERole.ROLE_GESTIONNAIRE)\n+\t\t\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\t\t\troles.add(gestRole);\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase \"ROLE_CONSULTANT\":\n+\t\t\t\t\t\trole consultRole = roleRepository.findByName(ERole.ROLE_CONSULTANT)\n+\t\t\t\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\t\t\t\troles.add(consultRole);\n+\n+\t\t\t\t\t\tbreak;\n+\t\t\t\tcase \"ROLE_ARTISTE\":\n+\t\t\t\t\t\trole artRole = roleRepository.findByName(ERole.ROLE_ARTISTE)\n+\t\t\t\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\t\t\t\troles.add(artRole);\n+\n+\t\t\t\t\t\tbreak;\n+\t\t\t\tcase \"ROLE_FOURNISSEUR\":\n+\t\t\t\t\t\trole fournRole = roleRepository.findByName(ERole.ROLE_FOURNISSEUR)\n+\t\t\t\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\t\t\t\troles.add(fournRole);\n+\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\trole roleAd = roleRepository.findByName(ERole.ROLE_ADMIN)\n+\t\t\t\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Error: Role is not found.\"));\n+\t\t\t\t\troles.add(roleAd);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\n+\t\tuser.setRoles(roles);\n+\t\tuserRepository.save(user);\n+\n+\t\treturn ResponseEntity.ok(new MessageResponse(\"User registered successfully!\"));\n+\t}\n+}"
  },
  {
    "sha": "005758b72dedc895c35709301c756d03893992f2",
    "filename": "src/main/java/com/example/demo/webService/AuthTestController.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/webService/AuthTestController.java",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/java/com/example/demo/webService/AuthTestController.java",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/java/com/example/demo/webService/AuthTestController.java?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -0,0 +1,47 @@\n+package com.example.demo.webService;\n+\n+\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.CrossOrigin;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@CrossOrigin(origins = \"*\", maxAge = 3600)\n+@RestController\n+@RequestMapping(\"/api/test/auth\")\n+public class AuthTestController {\n+\n+\n+    @GetMapping(\"/fournisseur\")\n+    @PreAuthorize(\"hasRole('ROLE_FOURNISSEUR')\")\n+    public String fournisseurAccess() {\n+        return \"Fournisseur Content.\";\n+    }\n+\n+    @GetMapping(\"/artist\")\n+    @PreAuthorize(\"hasRole('ROLE_ARTIST')\")\n+    public String artistAccess() {\n+        return \"artist Board.\";\n+    }\n+\n+    @GetMapping(\"/admin\")\n+    @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+    public String adminAccess() {\n+        return \"Admin Board.\";\n+    }\n+\n+    @GetMapping(\"/consultant\")\n+    @PreAuthorize(\"hasRole('ROLE_CONSULTANT')\")\n+    public String consultantAccess() {\n+        return \"consultant Board.\";\n+    }\n+\n+    @GetMapping(\"/gestionnaire\")\n+    @PreAuthorize(\"hasRole('ROLE_GESTIONNAIRE')\")\n+    public String gestionnaireAccess() {\n+        return \"gestionnaire Board.\";\n+    }\n+\n+\n+}"
  },
  {
    "sha": "ac72a541ae5e58bb199e371e9fb827b8e8db3850",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/KhadhraouiRamzi/smart_back_end/blob/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/resources/application.properties",
    "raw_url": "https://github.com/KhadhraouiRamzi/smart_back_end/raw/09ff53f6fdc3649ca552c9144982c20adc800d2f/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/KhadhraouiRamzi/smart_back_end/contents/src/main/resources/application.properties?ref=09ff53f6fdc3649ca552c9144982c20adc800d2f",
    "patch": "@@ -4,7 +4,12 @@ spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/distribution_mus\n spring.datasource.username=root\n spring.datasource.password=\n spring.jpa.show-sql=true\n+spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5InnoDBDialect\n+\n  \n server.port=8081\n \n- \n\\ No newline at end of file\n+\n+# App Properties of security\n+bezkoder.app.jwtSecret= bezKoderSecretKey\n+bezkoder.app.jwtExpirationMs= 86400000\n\\ No newline at end of file"
  }
]
