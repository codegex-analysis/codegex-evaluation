[
  {
    "sha": "d6723b0a13cb853f32a1847813103ed5b962e8d0",
    "filename": "redis-lettuce/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/micronaut-projects/micronaut-redis/blob/ba4f28359c3fef91138e60505fb8198ceaad2dc7/redis-lettuce/build.gradle",
    "raw_url": "https://github.com/micronaut-projects/micronaut-redis/raw/ba4f28359c3fef91138e60505fb8198ceaad2dc7/redis-lettuce/build.gradle",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-redis/contents/redis-lettuce/build.gradle?ref=ba4f28359c3fef91138e60505fb8198ceaad2dc7",
    "patch": "@@ -19,8 +19,7 @@ dependencies {\n     testImplementation \"io.micronaut:micronaut-function-web\"\n \n     testImplementation \"io.micronaut:micronaut-session\"\n-    testRuntimeOnly \"io.micronaut:micronaut-http-server-netty\"    \n+    testRuntimeOnly \"io.micronaut:micronaut-http-server-netty\"\n     testImplementation \"io.micronaut:micronaut-http-client\"\n-\n     testImplementation \"com.github.kstyrc:embedded-redis:0.6\"\n }"
  },
  {
    "sha": "c140605454ca39f8fea6809f9684d24c9b0250a4",
    "filename": "redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/health/RedisHealthIndicator.java",
    "status": "modified",
    "additions": 23,
    "deletions": 30,
    "changes": 53,
    "blob_url": "https://github.com/micronaut-projects/micronaut-redis/blob/ba4f28359c3fef91138e60505fb8198ceaad2dc7/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/health/RedisHealthIndicator.java",
    "raw_url": "https://github.com/micronaut-projects/micronaut-redis/raw/ba4f28359c3fef91138e60505fb8198ceaad2dc7/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/health/RedisHealthIndicator.java",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-redis/contents/redis-lettuce/src/main/java/io/micronaut/configuration/lettuce/health/RedisHealthIndicator.java?ref=ba4f28359c3fef91138e60505fb8198ceaad2dc7",
    "patch": "@@ -29,6 +29,8 @@\n import io.micronaut.management.health.indicator.HealthIndicator;\n import io.micronaut.management.health.indicator.HealthResult;\n import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n@@ -47,6 +49,7 @@\n @Singleton\n @Requires(classes = HealthIndicator.class)\n public class RedisHealthIndicator implements HealthIndicator {\n+    public static final Logger LOG = LoggerFactory.getLogger(RedisHealthIndicator.class);\n     /**\n      * Default name to use for health indication for Redis.\n      */\n@@ -107,39 +110,29 @@ public RedisHealthIndicator(BeanContext beanContext, HealthAggregator<?> healthA\n             Mono<String> pingCommand = getReactive.apply(connection).ping();\n             pingCommand = pingCommand.timeout(Duration.ofSeconds(TIMEOUT_SECONDS)).retry(RETRY);\n             return pingCommand.map(s -> {\n-                try {\n-                    if (s.equalsIgnoreCase(\"pong\")) {\n-                        return HealthResult\n-                                .builder(dbName, HealthStatus.UP)\n-                                .build();\n-                    }\n+                if (s.equalsIgnoreCase(\"pong\")) {\n                     return HealthResult\n-                            .builder(dbName, HealthStatus.DOWN)\n-                            .details(Collections.singletonMap(\"message\", \"Unexpected response: \" + s))\n+                            .builder(dbName, HealthStatus.UP)\n                             .build();\n-                } finally {\n-                    try {\n-                        connection.close();\n-                    } catch (Exception e) {\n-                        // ignore\n-                    }\n                 }\n-            }).onErrorResume(throwable -> {\n-                        try {\n-                            return Mono.just(HealthResult\n-                                    .builder(dbName, HealthStatus.DOWN)\n-                                    .exception(throwable)\n-                                    .build()\n-                            );\n-                        } finally {\n-                            try {\n-                                connection.close();\n-                            } catch (Exception e) {\n-                                // ignore\n-                            }\n-                        }\n-                    }\n-            );\n+                return HealthResult\n+                        .builder(dbName, HealthStatus.DOWN)\n+                        .details(Collections.singletonMap(\"message\", \"Unexpected response: \" + s))\n+                        .build();\n+            }).onErrorResume(throwable ->\n+                    Mono.just(HealthResult\n+                            .builder(dbName, HealthStatus.DOWN)\n+                            .exception(throwable)\n+                            .build()\n+                    )\n+            ).doFinally(f -> {\n+                try {\n+                    LOG.trace(\"Closing connection on signal \" + f);\n+                    connection.close();\n+                } catch (Exception e) {\n+                    LOG.error(\"Failed to close connection\", e);\n+                }\n+            });\n         });\n     }\n }"
  }
]
