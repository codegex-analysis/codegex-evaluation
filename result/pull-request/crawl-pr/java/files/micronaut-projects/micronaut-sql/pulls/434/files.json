[
  {
    "sha": "f988abd4b8974e4dcc5a518fe8534fad84982d4f",
    "filename": "hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/EntityManagerFactoryBean.java",
    "status": "modified",
    "additions": 28,
    "deletions": 38,
    "changes": 66,
    "blob_url": "https://github.com/micronaut-projects/micronaut-sql/blob/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/EntityManagerFactoryBean.java",
    "raw_url": "https://github.com/micronaut-projects/micronaut-sql/raw/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/EntityManagerFactoryBean.java",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-sql/contents/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/EntityManagerFactoryBean.java?ref=0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e",
    "patch": "@@ -16,14 +16,16 @@\n package io.micronaut.configuration.hibernate.jpa;\n \n \n+import io.micronaut.context.ApplicationContext;\n+import io.micronaut.context.exceptions.ConfigurationException;\n import io.micronaut.transaction.hibernate5.MicronautSessionContext;\n+import org.hibernate.integrator.spi.Integrator;\n+import org.hibernate.mapping.MetadataSource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.micronaut.configuration.hibernate.jpa.condition.RequiresHibernateEntities;\n import io.micronaut.context.BeanLocator;\n import io.micronaut.context.annotation.*;\n-import io.micronaut.context.env.Environment;\n import io.micronaut.inject.qualifiers.Qualifiers;\n import io.micronaut.jdbc.DataSourceResolver;\n import org.hibernate.Interceptor;\n@@ -40,7 +42,6 @@\n \n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n-import javax.inject.Inject;\n import javax.sql.DataSource;\n import javax.validation.ValidatorFactory;\n import java.util.LinkedHashMap;\n@@ -58,33 +59,18 @@\n     private static final Logger LOG = LoggerFactory.getLogger(EntityManagerFactoryBean.class);\n \n     private final JpaConfiguration jpaConfiguration;\n-    private final Environment environment;\n     private final BeanLocator beanLocator;\n-    private Interceptor hibernateInterceptor;\n \n     /**\n-     * @param jpaConfiguration The JPA configuration\n-     * @param environment      The environment\n-     * @param beanLocator      The bean locator\n+     * @param applicationContext   The applicationContext\n      */\n-    public EntityManagerFactoryBean(\n-            JpaConfiguration jpaConfiguration,\n-            Environment environment,\n-            BeanLocator beanLocator) {\n-\n-        this.jpaConfiguration = jpaConfiguration;\n-        this.environment = environment;\n-        this.beanLocator = beanLocator;\n-    }\n-\n-    /**\n-     * Sets the {@link Interceptor} to use.\n-     *\n-     * @param hibernateInterceptor The hibernate interceptor\n-     */\n-    @Inject\n-    public void setHibernateInterceptor(@Nullable Interceptor hibernateInterceptor) {\n-        this.hibernateInterceptor = hibernateInterceptor;\n+    public EntityManagerFactoryBean(ApplicationContext applicationContext) {\n+        this.jpaConfiguration = applicationContext.findBean(JpaConfiguration.class)\n+                .orElseGet(() -> new JpaConfiguration(\n+                        \"default\",\n+                        applicationContext,\n+                        applicationContext.findBean(Integrator.class).orElse(null)));\n+        this.beanLocator = applicationContext;\n     }\n \n     /**\n@@ -95,9 +81,7 @@ public void setHibernateInterceptor(@Nullable Interceptor hibernateInterceptor)\n      * @return The {@link StandardServiceRegistry}\n      */\n     @EachBean(DataSource.class)\n-    protected StandardServiceRegistry hibernateStandardServiceRegistry(\n-        @Parameter String dataSourceName,\n-        DataSource dataSource) {\n+    protected StandardServiceRegistry hibernateStandardServiceRegistry(@Parameter String dataSourceName, DataSource dataSource) {\n \n         final DataSourceResolver dataSourceResolver = beanLocator.findBean(DataSourceResolver.class).orElse(null);\n         if (dataSourceResolver != null) {\n@@ -145,26 +129,30 @@ public void stop() {\n     /**\n      * Builds the {@link MetadataSources} for the given {@link StandardServiceRegistry}.\n      *\n-     * @param jpaConfiguration        The JPA configuration\n+     * @param dataSourceName          The associated data source name\n      * @param standardServiceRegistry The standard service registry\n      * @return The {@link MetadataSources}\n      */\n+    @Requires(classes = MetadataSource.class)\n     @EachBean(StandardServiceRegistry.class)\n-    @RequiresHibernateEntities\n-    protected MetadataSources hibernateMetadataSources(\n-        @Parameter JpaConfiguration jpaConfiguration,\n-        StandardServiceRegistry standardServiceRegistry) {\n+    protected MetadataSources hibernateMetadataSources(@Parameter String dataSourceName, StandardServiceRegistry standardServiceRegistry) {\n+\n+        JpaConfiguration jpaConfiguration = beanLocator.findBean(JpaConfiguration.class, Qualifiers.byName(dataSourceName))\n+                .orElse(this.jpaConfiguration);\n \n         MetadataSources metadataSources = createMetadataSources(standardServiceRegistry);\n-        JpaConfiguration.EntityScanConfiguration entityScanConfiguration = jpaConfiguration.getEntityScanConfiguration();\n-        entityScanConfiguration.findEntities().forEach(metadataSources::addAnnotatedClass);\n+\n+        jpaConfiguration.getEntityScanConfiguration().findEntities().forEach(metadataSources::addAnnotatedClass);\n \n         if (jpaConfiguration.getMappingResources() != null) {\n             for (String resource : jpaConfiguration.getMappingResources()) {\n                 metadataSources.addResource(resource);\n             }\n         }\n \n+        if (metadataSources.getAnnotatedClasses().isEmpty()) {\n+            throw new ConfigurationException(\"Entities not found for JPA configuration: '\" + jpaConfiguration.getName() + \"'!\");\n+        }\n         return metadataSources;\n     }\n \n@@ -173,13 +161,15 @@ protected MetadataSources hibernateMetadataSources(\n      *\n      * @param metadataSources  The {@link MetadataSources}\n      * @param validatorFactory The {@link ValidatorFactory}\n+     * @param hibernateInterceptor The {@link Interceptor}\n      * @return The {@link SessionFactoryBuilder}\n      */\n     @EachBean(MetadataSources.class)\n     @Requires(beans = MetadataSources.class)\n     protected SessionFactoryBuilder hibernateSessionFactoryBuilder(\n         MetadataSources metadataSources,\n-        @Nullable ValidatorFactory validatorFactory) {\n+        @Nullable ValidatorFactory validatorFactory,\n+        @Nullable Interceptor hibernateInterceptor) {\n \n         try {\n             Metadata metadata = metadataSources.buildMetadata();\n@@ -211,7 +201,7 @@ protected SessionFactoryBuilder hibernateSessionFactoryBuilder(\n      * @param sessionFactoryBuilder The {@link SessionFactoryBuilder}\n      * @return The {@link SessionFactory}\n      */\n-    @Context\n+    @Parallel\n     @Requires(beans = SessionFactoryBuilder.class)\n     @Bean(preDestroy = \"close\")\n     @EachBean(SessionFactoryBuilder.class)"
  },
  {
    "sha": "fa941c2ed7265b02f8379063da4c7c5be80fc31a",
    "filename": "hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java",
    "status": "modified",
    "additions": 16,
    "deletions": 4,
    "changes": 20,
    "blob_url": "https://github.com/micronaut-projects/micronaut-sql/blob/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java",
    "raw_url": "https://github.com/micronaut-projects/micronaut-sql/raw/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-sql/contents/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/JpaConfiguration.java?ref=0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e",
    "patch": "@@ -18,6 +18,7 @@\n import io.micronaut.context.ApplicationContext;\n import io.micronaut.context.annotation.ConfigurationProperties;\n import io.micronaut.context.annotation.EachProperty;\n+import io.micronaut.context.annotation.Parameter;\n import io.micronaut.context.env.Environment;\n import io.micronaut.core.beans.BeanIntrospection;\n import io.micronaut.core.beans.BeanIntrospector;\n@@ -59,6 +60,7 @@\n public class JpaConfiguration {\n     public static final String PREFIX = \"jpa\";\n \n+    private final String name;\n     private final BootstrapServiceRegistry bootstrapServiceRegistry;\n     private final Environment environment;\n     private final ApplicationContext applicationContext;\n@@ -69,33 +71,43 @@\n     private boolean compileTimeHibernateProxies;\n \n     /**\n+     * @param name               The name\n      * @param applicationContext The application context\n      * @param integrator         The {@link Integrator}\n      */\n-    protected JpaConfiguration(ApplicationContext applicationContext,\n-                               @Nullable Integrator integrator) {\n-        this(applicationContext, integrator, new EntityScanConfiguration(applicationContext.getEnvironment()));\n+    protected JpaConfiguration(@Parameter String name, ApplicationContext applicationContext, @Nullable Integrator integrator) {\n+        this(name, applicationContext, integrator, new EntityScanConfiguration(applicationContext.getEnvironment()));\n     }\n \n     /**\n+     * @param name                    The name\n      * @param applicationContext      The application context\n      * @param integrator              The {@link Integrator}\n      * @param entityScanConfiguration The entity scan configuration\n      */\n     @Inject\n-    protected JpaConfiguration(ApplicationContext applicationContext,\n+    protected JpaConfiguration(@Parameter String name,\n+                               ApplicationContext applicationContext,\n                                @Nullable Integrator integrator,\n                                @Nullable EntityScanConfiguration entityScanConfiguration) {\n         ClassLoader classLoader = applicationContext.getClassLoader();\n         BootstrapServiceRegistryBuilder bootstrapServiceRegistryBuilder =\n                 createBootstrapServiceRegistryBuilder(integrator, classLoader);\n \n+        this.name = name;\n         this.bootstrapServiceRegistry = bootstrapServiceRegistryBuilder.build();\n         this.entityScanConfiguration = entityScanConfiguration != null ? entityScanConfiguration : new EntityScanConfiguration(applicationContext.getEnvironment());\n         this.environment = applicationContext.getEnvironment();\n         this.applicationContext = applicationContext;\n     }\n \n+    /**\n+     * @return The configuration name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n     /**\n      * @return The entity scan configuration\n      */"
  },
  {
    "sha": "57791c664781ba9efb32b8f1dcc4d4f7745b33f1",
    "filename": "hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/EntitiesInPackageCondition.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/micronaut-projects/micronaut-sql/blob/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/EntitiesInPackageCondition.java",
    "raw_url": "https://github.com/micronaut-projects/micronaut-sql/raw/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/EntitiesInPackageCondition.java",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-sql/contents/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/EntitiesInPackageCondition.java?ref=0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e",
    "patch": "@@ -39,6 +39,7 @@\n  * @author graemerocher\n  * @since 1.0\n  */\n+@Deprecated\n @Introspected\n public class EntitiesInPackageCondition implements Condition {\n     @Override"
  },
  {
    "sha": "7650b8670a5c61ed41c5353b3e522da2e752d251",
    "filename": "hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/RequiresHibernateEntities.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/micronaut-projects/micronaut-sql/blob/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/RequiresHibernateEntities.java",
    "raw_url": "https://github.com/micronaut-projects/micronaut-sql/raw/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/RequiresHibernateEntities.java",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-sql/contents/hibernate-jpa/src/main/java/io/micronaut/configuration/hibernate/jpa/condition/RequiresHibernateEntities.java?ref=0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e",
    "patch": "@@ -27,6 +27,7 @@\n  * @author graemerocher\n  * @since 1.0\n  */\n+@Deprecated\n @Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.METHOD})"
  },
  {
    "sha": "ae96290e99331f98bb4b2da49665bcafd4e425ad",
    "filename": "hibernate-jpa/src/test/groovy/io/micronaut/configuration/hibernate/jpa/datasources/CurrentSessionWithMultipleDataSourcesSpec.groovy",
    "status": "modified",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/micronaut-projects/micronaut-sql/blob/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/test/groovy/io/micronaut/configuration/hibernate/jpa/datasources/CurrentSessionWithMultipleDataSourcesSpec.groovy",
    "raw_url": "https://github.com/micronaut-projects/micronaut-sql/raw/0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e/hibernate-jpa/src/test/groovy/io/micronaut/configuration/hibernate/jpa/datasources/CurrentSessionWithMultipleDataSourcesSpec.groovy",
    "contents_url": "https://api.github.com/repos/micronaut-projects/micronaut-sql/contents/hibernate-jpa/src/test/groovy/io/micronaut/configuration/hibernate/jpa/datasources/CurrentSessionWithMultipleDataSourcesSpec.groovy?ref=0012cd3914e8a74ac40ca25fde93acb2b8cc1f9e",
    "patch": "@@ -20,10 +20,17 @@ import io.micronaut.configuration.hibernate.jpa.datasources.db1.ProductRepositor\n import io.micronaut.configuration.hibernate.jpa.datasources.db2.BookstoreMethodLevelTransaction\n import io.micronaut.configuration.hibernate.jpa.datasources.db2.BookstoreRepository\n import io.micronaut.context.ApplicationContext\n+import io.micronaut.context.exceptions.BeanInstantiationException\n+import io.micronaut.context.exceptions.NoSuchBeanException\n+import io.micronaut.inject.qualifiers.Qualifiers\n+import org.hibernate.SessionFactory\n import spock.lang.Specification\n+import spock.util.concurrent.PollingConditions\n \n class CurrentSessionWithMultipleDataSourcesSpec extends Specification {\n \n+    PollingConditions conditions = new PollingConditions()\n+\n     void \"test an application that defines 2 datasources uses correct transaction management\"() {\n         given:\n         def context = ApplicationContext.run(\n@@ -55,6 +62,96 @@ class CurrentSessionWithMultipleDataSourcesSpec extends Specification {\n \n         cleanup:\n         context.close()\n+    }\n+\n+    void \"test an application that defines multiple data sources\"() {\n+        when:\n+            def context = ApplicationContext.run(\n+                    'datasources.default.name': 'db1',\n+                    'datasources.db2.url': 'jdbc:h2:mem:db2;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE',\n+                    'datasources.abc.url': 'jdbc:h2:mem:db2;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE',\n+                    'jpa.db2.entity-scan.packages': ['io.micronaut.configuration.hibernate.jpa.datasources.db2'],\n+            )\n+        then:\n+            context.findBean(SessionFactory, Qualifiers.byName(\"default\")).isPresent()\n+            context.findBean(SessionFactory, Qualifiers.byName(\"db2\")).isPresent()\n+            context.findBean(SessionFactory, Qualifiers.byName(\"abc\")).isPresent()\n+            !context.findBean(SessionFactory, Qualifiers.byName(\"unknown\")).isPresent()\n+        cleanup:\n+            context.close()\n+    }\n+\n+    void \"test parallel init of non-default SessionFactory with missing entities\"() {\n+        when:\n+            def context = ApplicationContext.run(\n+                    'datasources.xyz.name': 'db1',\n+                    'jpa.xyz.entity-scan.packages': ['doesntexist']\n+            )\n+        then:\n+            context.isRunning()\n+            conditions.eventually {\n+                !context.isRunning()\n+            }\n+    }\n+\n+    void \"test eager get of non-default SessionFactory with missing entities\"() {\n+        when:\n+            ApplicationContext.run(\n+                    'datasources.xyz.name': 'db1',\n+                    'jpa.xyz.entity-scan.packages': ['doesntexist']\n+            ).getBean(SessionFactory, Qualifiers.byName(\"xyz\"))\n+        then:\n+            def e = thrown(BeanInstantiationException)\n+            e.message.contains \"Entities not found for JPA configuration: 'xyz'!\"\n+    }\n \n+    void \"test parallel init of SessionFactory with missing entities2\"() {\n+        when:\n+            def context = ApplicationContext.run(\n+                    'datasources.default.name': 'db1',\n+                    'jpa.default.entity-scan.packages': ['doesntexist']\n+            )\n+        then:\n+            context.isRunning()\n+            conditions.eventually {\n+                !context.isRunning()\n+            }\n     }\n+\n+    void \"test eager get SessionFactory with empty entity-scan\"() {\n+        when:\n+            ApplicationContext.run(\n+                    'datasources.default.name': 'db1',\n+                    'jpa.default.entity-scan.packages': ['doesntexist']\n+            ).getBean(SessionFactory, Qualifiers.byName(\"default\"))\n+        then:\n+            def e = thrown(BeanInstantiationException)\n+            e.message.contains \"Entities not found for JPA configuration: 'default'!\"\n+    }\n+\n+    void \"test get SessionFactory without configured default\"() {\n+        when:\n+            ApplicationContext.run().getBean(SessionFactory, Qualifiers.byName(\"default\"))\n+        then:\n+            def e = thrown(NoSuchBeanException)\n+            e.message.contains \"No bean of type [org.hibernate.SessionFactory] exists for the given qualifier: @Named('default')\"\n+    }\n+\n+    void \"test get SessionFactory without any configuration\"() {\n+        when:\n+            ApplicationContext.run().getBean(SessionFactory)\n+        then:\n+            def e = thrown(NoSuchBeanException)\n+            e.message.contains \"No bean of type [org.hibernate.SessionFactory] exists.\"\n+    }\n+\n+    void \"test get SessionFactory with only configured default data source name\"() {\n+        when:\n+            ApplicationContext.run(\n+                    'datasources.default.name': 'db1',\n+            ).getBean(SessionFactory, Qualifiers.byName(\"default\"))\n+        then:\n+            noExceptionThrown()\n+    }\n+\n }"
  }
]
