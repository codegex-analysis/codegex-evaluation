[
  {
    "sha": "9bbe771ace2c3bcc53b7b431cd791a9d23d789e5",
    "filename": "airbyte-api/src/main/openapi/config.yaml",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-api/src/main/openapi/config.yaml",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-api/src/main/openapi/config.yaml",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-api/src/main/openapi/config.yaml?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -1738,6 +1738,9 @@ components:\n       properties:\n         name:\n           type: string\n+          description: Stream's name (deprecated, will be replaced by streamName).\n+        streamName:\n+          $ref: \"#/components/schemas/AirbyteStreamName\"\n           description: Stream's name.\n         jsonSchema:\n           description: Stream schema using Json Schema specs.\n@@ -1754,6 +1757,18 @@ components:\n           type: array\n           items:\n             type: string\n+    AirbyteStreamName:\n+      type: object\n+      additionalProperties: false\n+      required:\n+        - name\n+      properties:\n+        namespace:\n+          type: string\n+          description: Stream's namespace.\n+        name:\n+          type: string\n+          description: Stream's name.\n     StreamJsonSchema:\n       type: object\n     AirbyteStreamConfiguration:"
  },
  {
    "sha": "a68454bf9fbf2466afbaa93501776f8e4fe6f80d",
    "filename": "airbyte-integrations/bases/airbyte-protocol/airbyte_protocol/models/airbyte_protocol.py",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/airbyte-protocol/airbyte_protocol/models/airbyte_protocol.py",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/airbyte-protocol/airbyte_protocol/models/airbyte_protocol.py",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/bases/airbyte-protocol/airbyte_protocol/models/airbyte_protocol.py?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -79,6 +79,11 @@ class AirbyteConnectionStatus(BaseModel):\n     message: Optional[str] = None\n \n \n+class AirbyteStreamName(BaseModel):\n+    namespace: Optional[str] = Field(None, description=\"Stream's namespace.\")\n+    name: str = Field(..., description=\"Stream's name.\")\n+\n+\n class SyncMode(Enum):\n     full_refresh = \"full_refresh\"\n     incremental = \"incremental\"\n@@ -95,7 +100,8 @@ class ConnectorSpecification(BaseModel):\n \n \n class AirbyteStream(BaseModel):\n-    name: str = Field(..., description=\"Stream's name.\")\n+    name: str = Field(..., description=\"Stream's name (deprecated, will be replaced by stream_name).\")\n+    stream_name: Optional[AirbyteStreamName] = Field(None, description=\"Stream's name.\")\n     json_schema: Dict[str, Any] = Field(..., description=\"Stream schema using Json Schema specs.\")\n     supported_sync_modes: Optional[List[SyncMode]] = None\n     source_defined_cursor: Optional[bool] = Field("
  },
  {
    "sha": "fafecd7d4dbfe1dd61bd6fcb397fbfb07bb26d2c",
    "filename": "airbyte-integrations/bases/base-java/src/test/java/io/airbyte/integrations/base/IntegrationRunnerTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/base-java/src/test/java/io/airbyte/integrations/base/IntegrationRunnerTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/base-java/src/test/java/io/airbyte/integrations/base/IntegrationRunnerTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/bases/base-java/src/test/java/io/airbyte/integrations/base/IntegrationRunnerTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -34,7 +34,6 @@\n \n import com.fasterxml.jackson.databind.JsonNode;\n import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.Lists;\n import io.airbyte.commons.io.IOs;\n import io.airbyte.commons.json.Jsons;\n import io.airbyte.commons.util.AutoCloseableIterators;\n@@ -45,7 +44,6 @@\n import io.airbyte.protocol.models.AirbyteMessage;\n import io.airbyte.protocol.models.AirbyteMessage.Type;\n import io.airbyte.protocol.models.AirbyteRecordMessage;\n-import io.airbyte.protocol.models.AirbyteStream;\n import io.airbyte.protocol.models.CatalogHelpers;\n import io.airbyte.protocol.models.ConfiguredAirbyteCatalog;\n import io.airbyte.protocol.models.ConnectorSpecification;\n@@ -72,10 +70,12 @@\n   private static final String CONFIG_STRING = \"{ \\\"username\\\": \\\"airbyte\\\" }\";\n   private static final JsonNode CONFIG = Jsons.deserialize(CONFIG_STRING);\n   private static final String STREAM_NAME = \"users\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final Long EMITTED_AT = Instant.now().toEpochMilli();\n   private static final Path TEST_ROOT = Path.of(\"/tmp/airbyte_tests\");\n \n-  private static final AirbyteCatalog CATALOG = new AirbyteCatalog().withStreams(Lists.newArrayList(new AirbyteStream().withName(STREAM_NAME)));\n+  private static final AirbyteCatalog CATALOG = CatalogHelpers.createAirbyteCatalog(\n+      CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME));\n   private static final ConfiguredAirbyteCatalog CONFIGURED_CATALOG = CatalogHelpers.toDefaultConfiguredCatalog(CATALOG);\n   private static final JsonNode STATE = Jsons.jsonNode(ImmutableMap.of(\"checkpoint\", \"05/08/1945\"));\n \n@@ -160,7 +160,7 @@ void testCheckDestination() throws Exception {\n   @Test\n   void testDiscover() throws Exception {\n     final IntegrationConfig intConfig = IntegrationConfig.discover(configPath);\n-    final AirbyteCatalog output = new AirbyteCatalog().withStreams(Lists.newArrayList(new AirbyteStream().withName(\"oceans\")));\n+    final AirbyteCatalog output = CatalogHelpers.createAirbyteCatalog(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, \"oceans\"));\n \n     when(cliParser.parse(ARGS)).thenReturn(intConfig);\n     when(source.discover(CONFIG)).thenReturn(output);"
  },
  {
    "sha": "549fca3799a021906e3691a8f0acc82b5eb6a4b0",
    "filename": "airbyte-integrations/bases/standard-destination-test/src/main/resources/edge_case_catalog.json",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/standard-destination-test/src/main/resources/edge_case_catalog.json",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/standard-destination-test/src/main/resources/edge_case_catalog.json",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/bases/standard-destination-test/src/main/resources/edge_case_catalog.json?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -2,6 +2,10 @@\n   \"streams\": [\n     {\n       \"name\": \"streamWithCamelCase\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"streamWithCamelCase\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"data\": {\n@@ -13,6 +17,10 @@\n \n     {\n       \"name\": \"stream_with_underscores\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"stream_with_underscores\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"data\": {\n@@ -23,6 +31,10 @@\n     },\n     {\n       \"name\": \"STREAM_WITH_ALL_CAPS\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"STREAM_WITH_ALL_CAPS\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"data\": {\n@@ -33,6 +45,10 @@\n     },\n     {\n       \"name\": \"stream_with_edge_case_field_names\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"stream_with_edge_case_field_names\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"fieldWithCamelCase\": {\n@@ -49,6 +65,10 @@\n     },\n     {\n       \"name\": \"stream-with:spécial:character_names\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"stream-with:spécial:character_names\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"field_with_spécial_character\": {\n@@ -59,6 +79,10 @@\n     },\n     {\n       \"name\": \"CapitalCase\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"CapitalCase\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"deleted\": {\n@@ -69,6 +93,10 @@\n     },\n     {\n       \"name\": \"reserved_keywords\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"reserved_keywords\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"order\": {\n@@ -79,6 +107,10 @@\n     },\n     {\n       \"name\": \"groups\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"groups\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"authorization\": {\n@@ -89,6 +121,10 @@\n     },\n     {\n       \"name\": \"ProperCase\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"ProperCase\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"ProperCase\": {"
  },
  {
    "sha": "b9291148ff208a29bd3c20f947cd824ebbc90f89",
    "filename": "airbyte-integrations/bases/standard-destination-test/src/main/resources/exchange_rate_catalog.json",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/standard-destination-test/src/main/resources/exchange_rate_catalog.json",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/bases/standard-destination-test/src/main/resources/exchange_rate_catalog.json",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/bases/standard-destination-test/src/main/resources/exchange_rate_catalog.json?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -2,6 +2,10 @@\n   \"streams\": [\n     {\n       \"name\": \"exchange_rate\",\n+      \"stream_name\": {\n+        \"namespace\": \"tests\",\n+        \"name\": \"exchange_rate\"\n+      },\n       \"json_schema\": {\n         \"properties\": {\n           \"date\": {"
  },
  {
    "sha": "10d2a787ec0ded5c6425302fc8486dde880a480b",
    "filename": "airbyte-integrations/connectors/destination-bigquery/src/test-integration/java/io/airbyte/integrations/destination/bigquery/BigQueryDestinationTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-bigquery/src/test-integration/java/io/airbyte/integrations/destination/bigquery/BigQueryDestinationTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-bigquery/src/test-integration/java/io/airbyte/integrations/destination/bigquery/BigQueryDestinationTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/destination-bigquery/src/test-integration/java/io/airbyte/integrations/destination/bigquery/BigQueryDestinationTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -85,6 +85,7 @@\n   private static final Instant NOW = Instant.now();\n   private static final String USERS_STREAM_NAME = \"users\";\n   private static final String TASKS_STREAM_NAME = \"tasks\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final AirbyteMessage MESSAGE_USERS1 = new AirbyteMessage().withType(AirbyteMessage.Type.RECORD)\n       .withRecord(new AirbyteRecordMessage().withStream(USERS_STREAM_NAME)\n           .withData(Jsons.jsonNode(ImmutableMap.builder().put(\"name\", \"john\").put(\"id\", \"10\").build()))\n@@ -105,10 +106,13 @@\n       .withState(new AirbyteStateMessage().withData(Jsons.jsonNode(ImmutableMap.builder().put(\"checkpoint\", \"now!\").build())));\n \n   private static final ConfiguredAirbyteCatalog CATALOG = new ConfiguredAirbyteCatalog().withStreams(Lists.newArrayList(\n-      CatalogHelpers.createConfiguredAirbyteStream(USERS_STREAM_NAME, io.airbyte.protocol.models.Field.of(\"name\", JsonSchemaPrimitive.STRING),\n-          io.airbyte.protocol.models.Field\n-              .of(\"id\", JsonSchemaPrimitive.STRING)),\n-      CatalogHelpers.createConfiguredAirbyteStream(TASKS_STREAM_NAME, Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, USERS_STREAM_NAME),\n+          Field.of(\"name\", JsonSchemaPrimitive.STRING),\n+          Field.of(\"id\", JsonSchemaPrimitive.STRING)),\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, TASKS_STREAM_NAME),\n+          Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n \n   private static final NamingConventionTransformer NAMING_RESOLVER = new StandardNameTransformer();\n "
  },
  {
    "sha": "2a70545d854b6a47733c5d3594c624364260b6af",
    "filename": "airbyte-integrations/connectors/destination-csv/src/test/java/io/airbyte/integrations/destination/csv/CsvDestinationTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-csv/src/test/java/io/airbyte/integrations/destination/csv/CsvDestinationTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-csv/src/test/java/io/airbyte/integrations/destination/csv/CsvDestinationTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/destination-csv/src/test/java/io/airbyte/integrations/destination/csv/CsvDestinationTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -72,6 +72,7 @@\n   private static final Path TEST_ROOT = Path.of(\"/tmp/airbyte_tests\");\n   private static final String USERS_STREAM_NAME = \"users\";\n   private static final String TASKS_STREAM_NAME = \"tasks\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final String USERS_FILE = new StandardNameTransformer().getRawTableName(USERS_STREAM_NAME) + \".csv\";\n   private static final String TASKS_FILE = new StandardNameTransformer().getRawTableName(TASKS_STREAM_NAME) + \".csv\";;\n   private static final AirbyteMessage MESSAGE_USERS1 = new AirbyteMessage().withType(AirbyteMessage.Type.RECORD)\n@@ -94,9 +95,13 @@\n       .withState(new AirbyteStateMessage().withData(Jsons.jsonNode(ImmutableMap.builder().put(\"checkpoint\", \"now!\").build())));\n \n   private static final ConfiguredAirbyteCatalog CATALOG = new ConfiguredAirbyteCatalog().withStreams(Lists.newArrayList(\n-      CatalogHelpers.createConfiguredAirbyteStream(USERS_STREAM_NAME, Field.of(\"name\", JsonSchemaPrimitive.STRING),\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, USERS_STREAM_NAME),\n+          Field.of(\"name\", JsonSchemaPrimitive.STRING),\n           Field.of(\"id\", JsonSchemaPrimitive.STRING)),\n-      CatalogHelpers.createConfiguredAirbyteStream(TASKS_STREAM_NAME, Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, TASKS_STREAM_NAME),\n+          Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n \n   private Path destinationPath;\n   private JsonNode config;"
  },
  {
    "sha": "52b4c2739fffef30a65d21fa02c12bb80044c33b",
    "filename": "airbyte-integrations/connectors/destination-jdbc/src/test/java/io/airbyte/integrations/destination/jdbc/JdbcDestinationTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-jdbc/src/test/java/io/airbyte/integrations/destination/jdbc/JdbcDestinationTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-jdbc/src/test/java/io/airbyte/integrations/destination/jdbc/JdbcDestinationTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/destination-jdbc/src/test/java/io/airbyte/integrations/destination/jdbc/JdbcDestinationTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -78,6 +78,7 @@\n   private static final Instant NOW = Instant.now();\n   private static final String USERS_STREAM_NAME = \"users\";\n   private static final String TASKS_STREAM_NAME = \"tasks-list\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final AirbyteMessage MESSAGE_USERS1 = new AirbyteMessage().withType(AirbyteMessage.Type.RECORD)\n       .withRecord(new AirbyteRecordMessage().withStream(USERS_STREAM_NAME)\n           .withData(Jsons.jsonNode(ImmutableMap.builder().put(\"name\", \"john\").put(\"id\", \"10\").build()))\n@@ -99,9 +100,13 @@\n       .withState(new AirbyteStateMessage().withData(Jsons.jsonNode(ImmutableMap.builder().put(\"checkpoint\", \"now!\").build())));\n \n   private static final ConfiguredAirbyteCatalog CATALOG = new ConfiguredAirbyteCatalog().withStreams(Lists.newArrayList(\n-      CatalogHelpers.createConfiguredAirbyteStream(USERS_STREAM_NAME, Field.of(\"name\", JsonSchemaPrimitive.STRING),\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, USERS_STREAM_NAME),\n+          Field.of(\"name\", JsonSchemaPrimitive.STRING),\n           Field.of(\"id\", JsonSchemaPrimitive.STRING)),\n-      CatalogHelpers.createConfiguredAirbyteStream(TASKS_STREAM_NAME, Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, TASKS_STREAM_NAME),\n+          Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n \n   private static final NamingConventionTransformer NAMING_TRANSFORMER = new ExtendedNameTransformer();\n "
  },
  {
    "sha": "6a35a22b02ca86e2c31a95bb982e6bfad721bfb4",
    "filename": "airbyte-integrations/connectors/destination-local-json/src/test/java/io/airbyte/integrations/destination/local_json/LocalJsonDestinationTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-local-json/src/test/java/io/airbyte/integrations/destination/local_json/LocalJsonDestinationTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-local-json/src/test/java/io/airbyte/integrations/destination/local_json/LocalJsonDestinationTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/destination-local-json/src/test/java/io/airbyte/integrations/destination/local_json/LocalJsonDestinationTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -68,6 +68,7 @@\n   private static final Path TEST_ROOT = Path.of(\"/tmp/airbyte_tests\");\n   private static final String USERS_STREAM_NAME = \"users\";\n   private static final String TASKS_STREAM_NAME = \"tasks\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final String USERS_FILE = new StandardNameTransformer().getRawTableName(USERS_STREAM_NAME) + \".jsonl\";\n   private static final String TASKS_FILE = new StandardNameTransformer().getRawTableName(TASKS_STREAM_NAME) + \".jsonl\";;\n   private static final AirbyteMessage MESSAGE_USERS1 = new AirbyteMessage().withType(AirbyteMessage.Type.RECORD)\n@@ -90,9 +91,13 @@\n       .withState(new AirbyteStateMessage().withData(Jsons.jsonNode(ImmutableMap.builder().put(\"checkpoint\", \"now!\").build())));\n \n   private static final ConfiguredAirbyteCatalog CATALOG = new ConfiguredAirbyteCatalog().withStreams(Lists.newArrayList(\n-      CatalogHelpers.createConfiguredAirbyteStream(USERS_STREAM_NAME, Field.of(\"name\", JsonSchemaPrimitive.STRING),\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, USERS_STREAM_NAME),\n+          Field.of(\"name\", JsonSchemaPrimitive.STRING),\n           Field.of(\"id\", JsonSchemaPrimitive.STRING)),\n-      CatalogHelpers.createConfiguredAirbyteStream(TASKS_STREAM_NAME, Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, TASKS_STREAM_NAME),\n+          Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n \n   private Path destinationPath;\n   private JsonNode config;"
  },
  {
    "sha": "54d8e60cb765021b6628119adeeca975a52fe779",
    "filename": "airbyte-integrations/connectors/destination-postgres/src/test/java/io/airbyte/integrations/destination/postgres/PostgresDestinationTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-postgres/src/test/java/io/airbyte/integrations/destination/postgres/PostgresDestinationTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/destination-postgres/src/test/java/io/airbyte/integrations/destination/postgres/PostgresDestinationTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/destination-postgres/src/test/java/io/airbyte/integrations/destination/postgres/PostgresDestinationTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -77,6 +77,7 @@\n   private static final Instant NOW = Instant.now();\n   private static final String USERS_STREAM_NAME = \"users\";\n   private static final String TASKS_STREAM_NAME = \"tasks-list\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final AirbyteMessage MESSAGE_USERS1 = new AirbyteMessage().withType(AirbyteMessage.Type.RECORD)\n       .withRecord(new AirbyteRecordMessage().withStream(USERS_STREAM_NAME)\n           .withData(Jsons.jsonNode(ImmutableMap.builder().put(\"name\", \"john\").put(\"id\", \"10\").build()))\n@@ -98,9 +99,13 @@\n       .withState(new AirbyteStateMessage().withData(Jsons.jsonNode(ImmutableMap.builder().put(\"checkpoint\", \"now!\").build())));\n \n   private static final ConfiguredAirbyteCatalog CATALOG = new ConfiguredAirbyteCatalog().withStreams(Lists.newArrayList(\n-      CatalogHelpers.createConfiguredAirbyteStream(USERS_STREAM_NAME, Field.of(\"name\", JsonSchemaPrimitive.STRING),\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, USERS_STREAM_NAME),\n+          Field.of(\"name\", JsonSchemaPrimitive.STRING),\n           Field.of(\"id\", JsonSchemaPrimitive.STRING)),\n-      CatalogHelpers.createConfiguredAirbyteStream(TASKS_STREAM_NAME, Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n+      CatalogHelpers.createConfiguredAirbyteStream(\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, TASKS_STREAM_NAME),\n+          Field.of(\"goal\", JsonSchemaPrimitive.STRING))));\n \n   private static final NamingConventionTransformer NAMING_TRANSFORMER = new PostgresSQLNameTransformer();\n "
  },
  {
    "sha": "e12b565ceaa75e7d8e5bdbbe1ea895e303a488ca",
    "filename": "airbyte-integrations/connectors/source-jdbc/src/main/java/io/airbyte/integrations/source/jdbc/AbstractJdbcSource.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/main/java/io/airbyte/integrations/source/jdbc/AbstractJdbcSource.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/main/java/io/airbyte/integrations/source/jdbc/AbstractJdbcSource.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-jdbc/src/main/java/io/airbyte/integrations/source/jdbc/AbstractJdbcSource.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -134,7 +134,9 @@ public AirbyteCatalog discover(JsonNode config) throws Exception {\n               Optional.ofNullable(config.get(\"database\")).map(JsonNode::asText),\n               Optional.ofNullable(config.get(\"schema\")).map(JsonNode::asText))\n                   .stream()\n-                  .map(t -> CatalogHelpers.createAirbyteStream(t.getName(), t.getFields())\n+                  .map(t -> CatalogHelpers.createAirbyteStream(CatalogHelpers.createAirbyteStreamName(t.getSchemaName(), t.getName()), t.getFields())\n+                      // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+                      .withName(JdbcUtils.getFullyQualifiedTableName(t.getSchemaName(), t.getName()))\n                       .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)))\n                   .collect(Collectors.toList()));\n     }\n@@ -289,8 +291,7 @@ public AirbyteCatalog discover(JsonNode config) throws Exception {\n               .map(f -> Field.of(f.getColumnName(), JdbcUtils.getType(f.getColumnType())))\n               .distinct()\n               .collect(Collectors.toList());\n-\n-          return new TableInfo(JdbcUtils.getFullyQualifiedTableName(t.getSchemaName(), t.getName()), fields);\n+          return new TableInfo(t.getSchemaName(), t.getName(), fields);\n         })\n         .collect(Collectors.toList());\n   }\n@@ -438,14 +439,20 @@ private JdbcDatabase createDatabase(JsonNode config) {\n \n   protected static class TableInfo {\n \n+    private final String schemaName;\n     private final String name;\n     private final List<Field> fields;\n \n-    public TableInfo(String name, List<Field> fields) {\n+    public TableInfo(String schemaName, String name, List<Field> fields) {\n+      this.schemaName = schemaName;\n       this.name = name;\n       this.fields = fields;\n     }\n \n+    public String getSchemaName() {\n+      return schemaName;\n+    }\n+\n     public String getName() {\n       return name;\n     }"
  },
  {
    "sha": "6c7c1f594d0b407d61b31518261fe46399bfe21a",
    "filename": "airbyte-integrations/connectors/source-jdbc/src/test-integration/java/io/airbyte/integrations/source/jdbc/JdbcIntegrationTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/test-integration/java/io/airbyte/integrations/source/jdbc/JdbcIntegrationTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/test-integration/java/io/airbyte/integrations/source/jdbc/JdbcIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-jdbc/src/test-integration/java/io/airbyte/integrations/source/jdbc/JdbcIntegrationTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -45,6 +45,7 @@\n public class JdbcIntegrationTest extends StandardSourceTest {\n \n   private static final String STREAM_NAME = \"public.id_and_name\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private PostgreSQLContainer<?> container;\n   private Database database;\n   private JsonNode config;\n@@ -99,7 +100,7 @@ protected JsonNode getConfig() {\n   @Override\n   protected ConfiguredAirbyteCatalog getConfiguredCatalog() {\n     return CatalogHelpers.createConfiguredAirbyteCatalog(\n-        STREAM_NAME,\n+        CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n         Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n         Field.of(\"name\", JsonSchemaPrimitive.STRING));\n   }"
  },
  {
    "sha": "764eda4296862ea9efbbdcffe8b9ed7f6b5d6575",
    "filename": "airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/IncrementalUtilsTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/IncrementalUtilsTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/IncrementalUtilsTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/IncrementalUtilsTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -41,9 +41,10 @@\n class IncrementalUtilsTest {\n \n   private static final String STREAM_NAME = \"shoes\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final String UUID_FIELD_NAME = \"ascending_inventory_uuid\";\n   private static final ConfiguredAirbyteStream STREAM = CatalogHelpers.createConfiguredAirbyteStream(\n-      STREAM_NAME,\n+      CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n       Field.of(\"ascending_inventory_uuid\", JsonSchemaPrimitive.STRING));\n \n   @Test"
  },
  {
    "sha": "955ee2be0d458279f3a4c1898cac05af67ab2651",
    "filename": "airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/JdbcStateManagerTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 17,
    "changes": 27,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/JdbcStateManagerTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/JdbcStateManagerTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-jdbc/src/test/java/io/airbyte/integrations/source/jdbc/JdbcStateManagerTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -31,7 +31,7 @@\n import io.airbyte.integrations.source.jdbc.models.JdbcState;\n import io.airbyte.integrations.source.jdbc.models.JdbcStreamState;\n import io.airbyte.protocol.models.AirbyteStateMessage;\n-import io.airbyte.protocol.models.AirbyteStream;\n+import io.airbyte.protocol.models.CatalogHelpers;\n import io.airbyte.protocol.models.ConfiguredAirbyteCatalog;\n import io.airbyte.protocol.models.ConfiguredAirbyteStream;\n import java.util.Collections;\n@@ -43,6 +43,7 @@\n \n class JdbcStateManagerTest {\n \n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final String STREAM_NAME1 = \"cars\";\n   private static final String STREAM_NAME2 = \"bicycles\";\n   private static final String STREAM_NAME3 = \"stationary_bicycles\";\n@@ -102,8 +103,7 @@ void testCreateCursorInfoStateAndCatalogButNoCursorField() {\n   }\n \n   private static Optional<ConfiguredAirbyteStream> getCatalog(String cursorField) {\n-    return Optional.of(new ConfiguredAirbyteStream()\n-        .withStream(new AirbyteStream().withName(STREAM_NAME1))\n+    return Optional.of(CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME1))\n         .withCursorField(cursorField == null ? Collections.emptyList() : Lists.newArrayList(cursorField)));\n   }\n \n@@ -115,11 +115,9 @@ void testGetters() {\n \n     final ConfiguredAirbyteCatalog catalog = new ConfiguredAirbyteCatalog()\n         .withStreams(Lists.newArrayList(\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME1))\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME1))\n                 .withCursorField(Lists.newArrayList(CURSOR_FIELD1)),\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME2))));\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME2))));\n \n     final JdbcStateManager stateManager = new JdbcStateManager(state, catalog);\n \n@@ -138,14 +136,11 @@ void testGetters() {\n   void testToState() {\n     final ConfiguredAirbyteCatalog catalog = new ConfiguredAirbyteCatalog()\n         .withStreams(Lists.newArrayList(\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME1))\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME1))\n                 .withCursorField(Lists.newArrayList(CURSOR_FIELD1)),\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME2))\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME2))\n                 .withCursorField(Lists.newArrayList(CURSOR_FIELD2)),\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME3))));\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME3))));\n \n     final JdbcStateManager stateManager = new JdbcStateManager(new JdbcState(), catalog);\n \n@@ -172,11 +167,9 @@ void testToState() {\n   void testToStateNullCursorField() {\n     final ConfiguredAirbyteCatalog catalog = new ConfiguredAirbyteCatalog()\n         .withStreams(Lists.newArrayList(\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME1))\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME1))\n                 .withCursorField(Lists.newArrayList(CURSOR_FIELD1)),\n-            new ConfiguredAirbyteStream()\n-                .withStream(new AirbyteStream().withName(STREAM_NAME2))));\n+            CatalogHelpers.createConfiguredAirbyteStream(CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME2))));\n     final JdbcStateManager stateManager = new JdbcStateManager(new JdbcState(), catalog);\n \n     final AirbyteStateMessage expectedFirstEmission = new AirbyteStateMessage()"
  },
  {
    "sha": "c8b7c078acf4de21c837a93e421b7ddd35f505c4",
    "filename": "airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcSourceStandardTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 8,
    "changes": 24,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcSourceStandardTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcSourceStandardTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcSourceStandardTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -220,9 +220,12 @@ void testDiscoverWithMultipleSchemas() throws Exception {\n     final AirbyteCatalog actual = source.discover(config);\n \n     final AirbyteCatalog expected = getCatalog();\n-    expected.getStreams().add(CatalogHelpers.createAirbyteStream(JdbcUtils.getFullyQualifiedTableName(SCHEMA_NAME2, TABLE_NAME),\n+    expected.getStreams().add(CatalogHelpers.createAirbyteStream(\n+        CatalogHelpers.createAirbyteStreamName(SCHEMA_NAME2, TABLE_NAME),\n         Field.of(\"id\", JsonSchemaPrimitive.STRING),\n         Field.of(\"name\", JsonSchemaPrimitive.STRING))\n+        // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+        .withName(JdbcUtils.getFullyQualifiedTableName(SCHEMA_NAME2, TABLE_NAME))\n         .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)));\n     // sort streams by name so that we are comparing lists with the same order.\n     expected.getStreams().sort(Comparator.comparing(AirbyteStream::getName));\n@@ -241,7 +244,10 @@ void testReadSuccess() throws Exception {\n \n   @Test\n   void testReadOneColumn() throws Exception {\n-    final ConfiguredAirbyteCatalog catalog = CatalogHelpers.createConfiguredAirbyteCatalog(streamName, Field.of(\"id\", JsonSchemaPrimitive.NUMBER));\n+    final ConfiguredAirbyteCatalog catalog =\n+        CatalogHelpers.createConfiguredAirbyteCatalog(\n+            CatalogHelpers.createAirbyteStreamName(SCHEMA_NAME, streamName),\n+            Field.of(\"id\", JsonSchemaPrimitive.NUMBER));\n \n     final List<AirbyteMessage> actualMessages = MoreIterators.toList(source.read(config, catalog, null));\n \n@@ -273,7 +279,7 @@ void testReadMultipleTables() throws Exception {\n             getFullyQualifiedTableName(TABLE_NAME + iFinal)));\n       });\n       catalog.getStreams().add(CatalogHelpers.createConfiguredAirbyteStream(\n-          streamName2,\n+          CatalogHelpers.createAirbyteStreamName(SCHEMA_NAME, streamName2),\n           Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n           Field.of(\"name\", JsonSchemaPrimitive.STRING)));\n \n@@ -460,7 +466,7 @@ void testReadMultipleTablesIncrementally() throws Exception {\n \n     final ConfiguredAirbyteCatalog configuredCatalog = getConfiguredCatalog();\n     configuredCatalog.getStreams().add(CatalogHelpers.createConfiguredAirbyteStream(\n-        streamName2,\n+        CatalogHelpers.createAirbyteStreamName(SCHEMA_NAME, streamName2),\n         Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n         Field.of(\"name\", JsonSchemaPrimitive.STRING)));\n     configuredCatalog.getStreams().forEach(airbyteStream -> {\n@@ -577,16 +583,18 @@ private void incrementalCursorCheck(\n   }\n \n   // get catalog and perform a defensive copy.\n-  private static ConfiguredAirbyteCatalog getConfiguredCatalog() {\n+  private ConfiguredAirbyteCatalog getConfiguredCatalog() {\n     return CatalogHelpers.toDefaultConfiguredCatalog(getCatalog());\n   }\n \n-  private static AirbyteCatalog getCatalog() {\n+  private AirbyteCatalog getCatalog() {\n     return new AirbyteCatalog().withStreams(Lists.newArrayList(CatalogHelpers.createAirbyteStream(\n-        streamName,\n+        CatalogHelpers.createAirbyteStreamName(getDefaultNamespace(), TABLE_NAME),\n         Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n         Field.of(\"name\", JsonSchemaPrimitive.STRING),\n         Field.of(\"updated_at\", JsonSchemaPrimitive.STRING))\n+        // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+        .withName(streamName)\n         .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL))));\n   }\n \n@@ -619,7 +627,7 @@ private ConfiguredAirbyteStream createTableWithSpaces() throws SQLException {\n     });\n \n     return CatalogHelpers.createConfiguredAirbyteStream(\n-        streamName2,\n+        CatalogHelpers.createAirbyteStreamName(SCHEMA_NAME, streamName2),\n         Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n         Field.of(lastNameField, JsonSchemaPrimitive.STRING));\n   }"
  },
  {
    "sha": "bdad860ddf378207116eb4ff4e2badb8c886b1cb",
    "filename": "airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcStressTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcStressTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcStressTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-jdbc/src/testFixtures/java/io/airbyte/integrations/source/jdbc/test/JdbcStressTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -70,6 +70,7 @@\n   private static final long TOTAL_RECORDS = 10_000_000L;\n   private static final int BATCH_SIZE = 1000;\n   private static final String TABLE_NAME = \"id_and_name\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n \n   private static String streamName;\n \n@@ -204,7 +205,7 @@ private static ConfiguredAirbyteCatalog getConfiguredCatalogIncremental() {\n \n   private static AirbyteCatalog getCatalog() {\n     return new AirbyteCatalog().withStreams(Lists.newArrayList(CatalogHelpers.createAirbyteStream(\n-        streamName,\n+        CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, streamName),\n         Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n         Field.of(\"name\", JsonSchemaPrimitive.STRING))\n         .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL))));"
  },
  {
    "sha": "1017d1b057ff1f5e7905fd1db5719cbcd223582b",
    "filename": "airbyte-integrations/connectors/source-mssql/src/test-integration/java/io/airbyte/integrations/source/mssql/MssqlSourceStandardTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-mssql/src/test-integration/java/io/airbyte/integrations/source/mssql/MssqlSourceStandardTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-mssql/src/test-integration/java/io/airbyte/integrations/source/mssql/MssqlSourceStandardTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-mssql/src/test-integration/java/io/airbyte/integrations/source/mssql/MssqlSourceStandardTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -47,6 +47,8 @@\n public class MssqlSourceStandardTest extends StandardSourceTest {\n \n   private static final String STREAM_NAME = \"dbo.id_and_name\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n+\n   private static MSSQLServerContainer<?> db;\n   private JsonNode config;\n \n@@ -101,7 +103,7 @@ protected JsonNode getConfig() {\n   @Override\n   protected ConfiguredAirbyteCatalog getConfiguredCatalog() {\n     return CatalogHelpers.createConfiguredAirbyteCatalog(\n-        STREAM_NAME,\n+        CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n         Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n         Field.of(\"name\", JsonSchemaPrimitive.STRING),\n         Field.of(\"born\", JsonSchemaPrimitive.STRING));"
  },
  {
    "sha": "9453c8b0b68bdd90ef44251ef65c9710f4d99324",
    "filename": "airbyte-integrations/connectors/source-mssql/src/test/java/io/airbyte/integrations/source/mssql/MssqlSourceTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-mssql/src/test/java/io/airbyte/integrations/source/mssql/MssqlSourceTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-mssql/src/test/java/io/airbyte/integrations/source/mssql/MssqlSourceTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-mssql/src/test/java/io/airbyte/integrations/source/mssql/MssqlSourceTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -48,12 +48,16 @@\n \n class MssqlSourceTest {\n \n-  private static final String STREAM_NAME = \"dbo.id_and_name\";\n+  private static final String STREAM_NAMESPACE = \"dbo\";\n+  private static final String TABLE_NAME = \"id_and_name\";\n+  private static final String STREAM_NAME = STREAM_NAMESPACE + \".\" + TABLE_NAME;\n   private static final AirbyteCatalog CATALOG = new AirbyteCatalog().withStreams(Lists.newArrayList(CatalogHelpers.createAirbyteStream(\n-      STREAM_NAME,\n+      CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, TABLE_NAME),\n       Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n       Field.of(\"name\", JsonSchemaPrimitive.STRING),\n       Field.of(\"born\", JsonSchemaPrimitive.STRING))\n+      // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+      .withName(STREAM_NAME)\n       .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL))));\n \n   private JsonNode configWithoutDbName;"
  },
  {
    "sha": "fc193c4805f124e6dc76a4d57e9d2154599ac26f",
    "filename": "airbyte-integrations/connectors/source-mysql/src/test-integration/java/io/airbyte/integrations/source/mysql/MySqlStandardTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-mysql/src/test-integration/java/io/airbyte/integrations/source/mysql/MySqlStandardTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-mysql/src/test-integration/java/io/airbyte/integrations/source/mysql/MySqlStandardTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-mysql/src/test-integration/java/io/airbyte/integrations/source/mysql/MySqlStandardTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -49,6 +49,7 @@\n \n   private static final String STREAM_NAME = \"id_and_name\";\n   private static final String STREAM_NAME2 = \"public.starships\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n \n   private MySQLContainer<?> container;\n   private JsonNode config;\n@@ -114,15 +115,15 @@ protected ConfiguredAirbyteCatalog getConfiguredCatalog() {\n             .withSyncMode(SyncMode.INCREMENTAL)\n             .withCursorField(Lists.newArrayList(\"id\"))\n             .withStream(CatalogHelpers.createAirbyteStream(\n-                String.format(\"%s.%s\", config.get(\"database\").asText(), STREAM_NAME),\n+                CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, String.format(\"%s.%s\", config.get(\"database\").asText(), STREAM_NAME)),\n                 Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n                 Field.of(\"name\", JsonSchemaPrimitive.STRING))\n                 .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL))),\n         new ConfiguredAirbyteStream()\n             .withSyncMode(SyncMode.INCREMENTAL)\n             .withCursorField(Lists.newArrayList(\"id\"))\n             .withStream(CatalogHelpers.createAirbyteStream(\n-                String.format(\"%s.%s\", config.get(\"database\").asText(), STREAM_NAME2),\n+                CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, String.format(\"%s.%s\", config.get(\"database\").asText(), STREAM_NAME2)),\n                 Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n                 Field.of(\"name\", JsonSchemaPrimitive.STRING))\n                 .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)))));"
  },
  {
    "sha": "7341f905b4d2c505119c4f2ca18c40fdd9ad93a9",
    "filename": "airbyte-integrations/connectors/source-postgres/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/PostgresSourceStandardTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-postgres/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/PostgresSourceStandardTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-postgres/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/PostgresSourceStandardTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-postgres/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/PostgresSourceStandardTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -49,6 +49,7 @@\n \n   private static final String STREAM_NAME = \"public.id_and_name\";\n   private static final String STREAM_NAME2 = \"public.starships\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n \n   private PostgreSQLContainer<?> container;\n   private JsonNode config;\n@@ -114,15 +115,15 @@ protected ConfiguredAirbyteCatalog getConfiguredCatalog() {\n             .withSyncMode(SyncMode.INCREMENTAL)\n             .withCursorField(Lists.newArrayList(\"id\"))\n             .withStream(CatalogHelpers.createAirbyteStream(\n-                STREAM_NAME,\n+                CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n                 Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n                 Field.of(\"name\", JsonSchemaPrimitive.STRING))\n                 .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL))),\n         new ConfiguredAirbyteStream()\n             .withSyncMode(SyncMode.INCREMENTAL)\n             .withCursorField(Lists.newArrayList(\"id\"))\n             .withStream(CatalogHelpers.createAirbyteStream(\n-                STREAM_NAME2,\n+                CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME2),\n                 Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n                 Field.of(\"name\", JsonSchemaPrimitive.STRING))\n                 .withSupportedSyncModes(Lists.newArrayList(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)))));"
  },
  {
    "sha": "810a1c6cdf7fff40a83b65bbf424920dd1f94e6d",
    "filename": "airbyte-integrations/connectors/source-postgres/src/test/java/io/airbyte/integrations/source/postgres/PostgresSourceTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-postgres/src/test/java/io/airbyte/integrations/source/postgres/PostgresSourceTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-postgres/src/test/java/io/airbyte/integrations/source/postgres/PostgresSourceTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-postgres/src/test/java/io/airbyte/integrations/source/postgres/PostgresSourceTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -62,9 +62,10 @@\n class PostgresSourceTest {\n \n   private static final String STREAM_NAME = \"public.id_and_name\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final AirbyteCatalog CATALOG = new AirbyteCatalog().withStreams(List.of(\n       CatalogHelpers.createAirbyteStream(\n-          STREAM_NAME,\n+          CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n           Field.of(\"id\", JsonSchemaPrimitive.NUMBER),\n           Field.of(\"name\", JsonSchemaPrimitive.STRING),\n           Field.of(\"power\", JsonSchemaPrimitive.NUMBER))"
  },
  {
    "sha": "f1367a20b13efe2662c04af955548d9e0320bfde",
    "filename": "airbyte-integrations/connectors/source-redshift/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/RedshiftStandardSourceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-redshift/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/RedshiftStandardSourceTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-integrations/connectors/source-redshift/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/RedshiftStandardSourceTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-integrations/connectors/source-redshift/src/test-integration/java/io/airbyte/integrations/io/airbyte/integration_tests/sources/RedshiftStandardSourceTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -103,7 +103,7 @@ protected JsonNode getConfig() {\n   @Override\n   protected ConfiguredAirbyteCatalog getConfiguredCatalog() {\n     return CatalogHelpers.createConfiguredAirbyteCatalog(\n-        STREAM_NAME,\n+        CatalogHelpers.createAirbyteStreamName(SCHEMA_NAME, STREAM_NAME),\n         Field.of(\"c_custkey\", Field.JsonSchemaPrimitive.NUMBER),\n         Field.of(\"c_name\", Field.JsonSchemaPrimitive.STRING),\n         Field.of(\"c_nation\", Field.JsonSchemaPrimitive.STRING));"
  },
  {
    "sha": "8a38fbfd6dc9aa2341d902393fd9ce10cb135d26",
    "filename": "airbyte-protocol/models/src/main/java/io/airbyte/protocol/models/CatalogHelpers.java",
    "status": "modified",
    "additions": 26,
    "deletions": 11,
    "changes": 37,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-protocol/models/src/main/java/io/airbyte/protocol/models/CatalogHelpers.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-protocol/models/src/main/java/io/airbyte/protocol/models/CatalogHelpers.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-protocol/models/src/main/java/io/airbyte/protocol/models/CatalogHelpers.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -41,46 +41,61 @@\n \n public class CatalogHelpers {\n \n-  public static AirbyteCatalog createAirbyteCatalog(String streamName, Field... fields) {\n+  public static AirbyteCatalog createAirbyteCatalog(AirbyteStreamName streamName, Field... fields) {\n     return new AirbyteCatalog().withStreams(Lists.newArrayList(createAirbyteStream(streamName, fields)));\n   }\n \n-  public static AirbyteStream createAirbyteStream(String streamName, Field... fields) {\n+  public static AirbyteStream createAirbyteStream(AirbyteStreamName streamName, Field... fields) {\n     return createAirbyteStream(streamName, Arrays.asList(fields));\n   }\n \n-  public static AirbyteStream createAirbyteStream(String streamName, List<Field> fields) {\n-    return new AirbyteStream().withName(streamName).withJsonSchema(fieldsToJsonSchema(fields));\n+  public static AirbyteStreamName createAirbyteStreamName(String namespace, String streamName) {\n+    return new AirbyteStreamName().withNamespace(namespace).withName(streamName);\n   }\n \n-  public static ConfiguredAirbyteCatalog createConfiguredAirbyteCatalog(String streamName, Field... fields) {\n+  public static AirbyteStream createAirbyteStream(AirbyteStreamName streamName, List<Field> fields) {\n+    return new AirbyteStream()\n+        .withStreamName(streamName)\n+        // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+        .withName(streamName.getName())\n+        .withJsonSchema(fieldsToJsonSchema(fields));\n+  }\n+\n+  public static ConfiguredAirbyteCatalog createConfiguredAirbyteCatalog(AirbyteStreamName streamName, Field... fields) {\n     return new ConfiguredAirbyteCatalog().withStreams(Lists.newArrayList(createConfiguredAirbyteStream(streamName, fields)));\n   }\n \n-  public static ConfiguredAirbyteStream createConfiguredAirbyteStream(String streamName, Field... fields) {\n+  public static ConfiguredAirbyteStream createConfiguredAirbyteStream(AirbyteStreamName streamName, Field... fields) {\n     return createConfiguredAirbyteStream(streamName, Arrays.asList(fields));\n   }\n \n-  public static ConfiguredAirbyteStream createConfiguredAirbyteStream(String streamName, List<Field> fields) {\n-    return new ConfiguredAirbyteStream().withStream(new AirbyteStream().withName(streamName).withJsonSchema(fieldsToJsonSchema(fields)));\n+  public static ConfiguredAirbyteStream createConfiguredAirbyteStream(AirbyteStreamName streamName, List<Field> fields) {\n+    return new ConfiguredAirbyteStream().withStream(\n+        new AirbyteStream()\n+            .withStreamName(streamName)\n+            // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+            .withName(streamName.getName())\n+            .withJsonSchema(fieldsToJsonSchema(fields)));\n   }\n \n   public static ConfiguredAirbyteStream createIncrementalConfiguredAirbyteStream(\n-                                                                                 String streamName,\n+                                                                                 AirbyteStreamName streamName,\n                                                                                  SyncMode syncMode,\n                                                                                  String cursorFieldName,\n                                                                                  Field... fields) {\n     return createIncrementalConfiguredAirbyteStream(streamName, syncMode, cursorFieldName, Arrays.asList(fields));\n   }\n \n   public static ConfiguredAirbyteStream createIncrementalConfiguredAirbyteStream(\n-                                                                                 String streamName,\n+                                                                                 AirbyteStreamName streamName,\n                                                                                  SyncMode syncMode,\n                                                                                  String cursorFieldName,\n                                                                                  List<Field> fields) {\n     return new ConfiguredAirbyteStream()\n         .withStream(new AirbyteStream()\n-            .withName(streamName)\n+            .withStreamName(streamName)\n+            // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n+            .withName(streamName.getName())\n             .withSupportedSyncModes(Collections.singletonList(syncMode))\n             .withJsonSchema(fieldsToJsonSchema(fields)))\n         .withSyncMode(syncMode)"
  },
  {
    "sha": "f758164227a1cf0c731928a541146b7cb30b240b",
    "filename": "airbyte-protocol/models/src/main/resources/airbyte_protocol/airbyte_protocol.yaml",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-protocol/models/src/main/resources/airbyte_protocol/airbyte_protocol.yaml",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-protocol/models/src/main/resources/airbyte_protocol/airbyte_protocol.yaml",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-protocol/models/src/main/resources/airbyte_protocol/airbyte_protocol.yaml?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -127,6 +127,9 @@ definitions:\n     properties:\n       name:\n         type: string\n+        description: Stream's name (deprecated, will be replaced by stream_name).\n+      stream_name:\n+        \"$ref\": \"#/definitions/AirbyteStreamName\"\n         description: Stream's name.\n       json_schema:\n         description: Stream schema using Json Schema specs.\n@@ -144,6 +147,18 @@ definitions:\n         type: array\n         items:\n           type: string\n+  AirbyteStreamName:\n+    type: object\n+    additionalProperties: false\n+    required:\n+      - name\n+    properties:\n+      namespace:\n+        type: string\n+        description: Stream's namespace.\n+      name:\n+        type: string\n+        description: Stream's name.\n   ConfiguredAirbyteCatalog:\n     description: Airbyte stream schema catalog\n     type: object"
  },
  {
    "sha": "4b7b1c2ef4295a9fe4af93276997710572b803f6",
    "filename": "airbyte-scheduler/src/test/java/io/airbyte/scheduler/JobSchedulerTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-scheduler/src/test/java/io/airbyte/scheduler/JobSchedulerTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-scheduler/src/test/java/io/airbyte/scheduler/JobSchedulerTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-scheduler/src/test/java/io/airbyte/scheduler/JobSchedulerTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -58,6 +58,7 @@\n   private Job previousJob;\n \n   private static final String STREAM_NAME = \"users\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final String FIELD_NAME = \"id\";\n \n   static {\n@@ -66,7 +67,9 @@\n     final UUID destinationId = UUID.randomUUID();\n \n     final ConfiguredAirbyteStream stream = new ConfiguredAirbyteStream()\n-        .withStream(CatalogHelpers.createAirbyteStream(STREAM_NAME, Field.of(FIELD_NAME, JsonSchemaPrimitive.STRING)));\n+        .withStream(CatalogHelpers.createAirbyteStream(\n+            CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n+            Field.of(FIELD_NAME, JsonSchemaPrimitive.STRING)));\n     final ConfiguredAirbyteCatalog catalog = new ConfiguredAirbyteCatalog().withStreams(Collections.singletonList(stream));\n \n     final UUID connectionId = UUID.randomUUID();"
  },
  {
    "sha": "b2571ea64f8f3f4e6fd4f3e866d107482b50081c",
    "filename": "airbyte-scheduler/src/test/java/io/airbyte/scheduler/persistence/DefaultJobCreatorTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-scheduler/src/test/java/io/airbyte/scheduler/persistence/DefaultJobCreatorTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-scheduler/src/test/java/io/airbyte/scheduler/persistence/DefaultJobCreatorTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-scheduler/src/test/java/io/airbyte/scheduler/persistence/DefaultJobCreatorTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -57,6 +57,7 @@\n public class DefaultJobCreatorTest {\n \n   private static final String STREAM_NAME = \"users\";\n+  private static final String STREAM_NAMESPACE = \"tests\";\n   private static final String FIELD_NAME = \"id\";\n \n   private static final String SOURCE_IMAGE_NAME = \"daxtarity/sourceimagename\";\n@@ -97,7 +98,9 @@\n         .withTombstone(false);\n \n     final ConfiguredAirbyteStream stream = new ConfiguredAirbyteStream()\n-        .withStream(CatalogHelpers.createAirbyteStream(STREAM_NAME, Field.of(FIELD_NAME, JsonSchemaPrimitive.STRING)));\n+        .withStream(CatalogHelpers.createAirbyteStream(\n+            CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n+            Field.of(FIELD_NAME, JsonSchemaPrimitive.STRING)));\n     final ConfiguredAirbyteCatalog catalog = new ConfiguredAirbyteCatalog().withStreams(Collections.singletonList(stream));\n \n     final UUID connectionId = UUID.randomUUID();"
  },
  {
    "sha": "7392735c0c0ee0a81def22beb28daaaf4653c381",
    "filename": "airbyte-server/src/main/java/io/airbyte/server/converters/CatalogConverter.java",
    "status": "modified",
    "additions": 55,
    "deletions": 6,
    "changes": 61,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/main/java/io/airbyte/server/converters/CatalogConverter.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/main/java/io/airbyte/server/converters/CatalogConverter.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-server/src/main/java/io/airbyte/server/converters/CatalogConverter.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -34,8 +34,50 @@\n  */\n public class CatalogConverter {\n \n+  /**\n+   * Convert AirbyteStreamName from protocol to Api object\n+   *\n+   * @param streamName the protocol StreamName object\n+   * @param name (deprecated) this is the old field storing a stream name being replaced by the\n+   *        StreamName object instead. Please avoid using this as this should be removed in the future\n+   * @return the AirbyteStreamName Api object\n+   */\n+  private static io.airbyte.api.model.AirbyteStreamName toApi(final io.airbyte.protocol.models.AirbyteStreamName streamName, final String name) {\n+    final io.airbyte.api.model.AirbyteStreamName result = new io.airbyte.api.model.AirbyteStreamName();\n+    // Try to use streamName object or default to old name field\n+    if (streamName != null) {\n+      return result\n+          .namespace(streamName.getNamespace())\n+          .name(streamName.getName());\n+    } else {\n+      return result.name(name);\n+    }\n+  }\n+\n+  /**\n+   * Convert AirbyteStreamName from Api to Protocol object\n+   *\n+   * @param streamName the Api StreamName object\n+   * @param name (deprecated) this is the old field storing a stream name being replaced by the\n+   *        StreamName object instead. Please avoid using this as this should be removed in the future\n+   * @return the AirbyteStreamName Protocol object\n+   */\n+  private static io.airbyte.protocol.models.AirbyteStreamName toProtocol(final io.airbyte.api.model.AirbyteStreamName streamName, final String name) {\n+    final io.airbyte.protocol.models.AirbyteStreamName result = new io.airbyte.protocol.models.AirbyteStreamName();\n+    // Try to use streamName object or default to old name field\n+    if (streamName != null) {\n+      return result\n+          .withNamespace(streamName.getNamespace())\n+          .withName(streamName.getName());\n+    } else {\n+      return result.withName(name);\n+    }\n+  }\n+\n   private static io.airbyte.api.model.AirbyteStream toApi(final io.airbyte.protocol.models.AirbyteStream stream) {\n     return new io.airbyte.api.model.AirbyteStream()\n+        .streamName(toApi(stream.getStreamName(), stream.getName()))\n+        // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n         .name(stream.getName())\n         .jsonSchema(stream.getJsonSchema())\n         .supportedSyncModes(Enums.convertListTo(stream.getSupportedSyncModes(), io.airbyte.api.model.SyncMode.class))\n@@ -45,6 +87,8 @@\n \n   private static io.airbyte.protocol.models.AirbyteStream toProtocol(final io.airbyte.api.model.AirbyteStream stream) {\n     return new io.airbyte.protocol.models.AirbyteStream()\n+        .withStreamName(toProtocol(stream.getStreamName(), stream.getName()))\n+        // TODO: Switch fully to StreamName instead of temporarily setName() for backward compatibility\n         .withName(stream.getName())\n         .withJsonSchema(stream.getJsonSchema())\n         .withSupportedSyncModes(Enums.convertListTo(stream.getSupportedSyncModes(), io.airbyte.protocol.models.SyncMode.class))\n@@ -63,13 +107,13 @@\n             .collect(Collectors.toList()));\n   }\n \n-  private static io.airbyte.api.model.AirbyteStreamConfiguration generateDefaultConfiguration(final io.airbyte.api.model.AirbyteStream s) {\n+  private static io.airbyte.api.model.AirbyteStreamConfiguration generateDefaultConfiguration(final io.airbyte.api.model.AirbyteStream stream) {\n     io.airbyte.api.model.AirbyteStreamConfiguration result = new io.airbyte.api.model.AirbyteStreamConfiguration()\n-        .aliasName(Names.toAlphanumericAndUnderscore(s.getName()))\n-        .cursorField(s.getDefaultCursorField())\n+        .aliasName(Names.toAlphanumericAndUnderscore(stream.getStreamName().getName()))\n+        .cursorField(stream.getDefaultCursorField())\n         .selected(true);\n-    if (s.getSupportedSyncModes().size() > 0)\n-      result.setSyncMode(s.getSupportedSyncModes().get(0));\n+    if (stream.getSupportedSyncModes().size() > 0)\n+      result.setSyncMode(stream.getSupportedSyncModes().get(0));\n     else\n       result.setSyncMode(io.airbyte.api.model.SyncMode.INCREMENTAL);\n     return result;\n@@ -79,10 +123,15 @@\n     final List<io.airbyte.api.model.AirbyteStreamAndConfiguration> streams = catalog.getStreams()\n         .stream()\n         .map(configuredStream -> {\n+          final String streamName;\n+          if (configuredStream.getStream().getStreamName() != null)\n+            streamName = configuredStream.getStream().getStreamName().getName();\n+          else\n+            streamName = configuredStream.getStream().getName();\n           final io.airbyte.api.model.AirbyteStreamConfiguration configuration = new io.airbyte.api.model.AirbyteStreamConfiguration()\n               .syncMode(Enums.convertTo(configuredStream.getSyncMode(), io.airbyte.api.model.SyncMode.class))\n               .cursorField(configuredStream.getCursorField())\n-              .aliasName(Names.toAlphanumericAndUnderscore(configuredStream.getStream().getName()))\n+              .aliasName(Names.toAlphanumericAndUnderscore(streamName))\n               .selected(true);\n           return new io.airbyte.api.model.AirbyteStreamAndConfiguration()\n               .stream(toApi(configuredStream.getStream()))"
  },
  {
    "sha": "5f92964685c0869bbc3f2369b82a8a831f31e199",
    "filename": "airbyte-server/src/main/java/io/airbyte/server/handlers/WebBackendConnectionsHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/main/java/io/airbyte/server/handlers/WebBackendConnectionsHandler.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/main/java/io/airbyte/server/handlers/WebBackendConnectionsHandler.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-server/src/main/java/io/airbyte/server/handlers/WebBackendConnectionsHandler.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -148,13 +148,13 @@ public WbConnectionRead webBackendGetConnection(WebBackendConnectionRequestBody\n   protected static AirbyteCatalog updateSchemaWithDiscovery(AirbyteCatalog original, AirbyteCatalog discovered) {\n     final Map<String, AirbyteStreamAndConfiguration> originalStreamsByName = original.getStreams()\n         .stream()\n-        .collect(toMap(s -> s.getStream().getName(), s -> s));\n+        .collect(toMap(s -> s.getStream().getStreamName().toString(), s -> s));\n \n     final List<AirbyteStreamAndConfiguration> streams = new ArrayList<>();\n \n     for (AirbyteStreamAndConfiguration s : discovered.getStreams()) {\n       final AirbyteStream stream = s.getStream();\n-      final AirbyteStreamAndConfiguration originalStream = originalStreamsByName.get(stream.getName());\n+      final AirbyteStreamAndConfiguration originalStream = originalStreamsByName.get(stream.getStreamName().toString());\n       AirbyteStreamConfiguration outputStreamConfig;\n \n       if (originalStream != null) {"
  },
  {
    "sha": "c4d1e94fcec10186a2ddfe6af73a4ad3fd5425e7",
    "filename": "airbyte-server/src/test/java/io/airbyte/server/handlers/ConnectionsHandlerTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/test/java/io/airbyte/server/handlers/ConnectionsHandlerTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/test/java/io/airbyte/server/handlers/ConnectionsHandlerTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-server/src/test/java/io/airbyte/server/handlers/ConnectionsHandlerTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -118,7 +118,7 @@ void testCreateConnection() throws JsonValidationException, ConfigNotFoundExcept\n   @Test\n   void testUpdateConnection() throws JsonValidationException, ConfigNotFoundException, IOException {\n     final AirbyteCatalog catalog = ConnectionHelpers.generateBasicApiCatalog();\n-    catalog.getStreams().get(0).getStream().setName(\"azkaban_users\");\n+    catalog.getStreams().get(0).getStream().getStreamName().setName(\"azkaban_users\");\n     catalog.getStreams().get(0).getConfig().setAliasName(\"azkaban_users\");\n \n     final ConnectionUpdate connectionUpdate = new ConnectionUpdate()\n@@ -128,7 +128,7 @@ void testUpdateConnection() throws JsonValidationException, ConfigNotFoundExcept\n         .syncCatalog(catalog);\n \n     final ConfiguredAirbyteCatalog configuredCatalog = ConnectionHelpers.generateBasicConfiguredAirbyteCatalog();\n-    configuredCatalog.getStreams().get(0).getStream().withName(\"azkaban_users\");\n+    configuredCatalog.getStreams().get(0).getStream().getStreamName().withName(\"azkaban_users\");\n \n     final StandardSync updatedStandardSync = new StandardSync()\n         .withConnectionId(standardSync.getConnectionId())"
  },
  {
    "sha": "cb9bbe996be405decafed9015b1f28b6b36d1be3",
    "filename": "airbyte-server/src/test/java/io/airbyte/server/handlers/SchedulerHandlerTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/airbytehq/airbyte/blob/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/test/java/io/airbyte/server/handlers/SchedulerHandlerTest.java",
    "raw_url": "https://github.com/airbytehq/airbyte/raw/fc86bf9c48f1cd64a96eec7ef76a39028007f312/airbyte-server/src/test/java/io/airbyte/server/handlers/SchedulerHandlerTest.java",
    "contents_url": "https://api.github.com/repos/airbytehq/airbyte/contents/airbyte-server/src/test/java/io/airbyte/server/handlers/SchedulerHandlerTest.java?ref=fc86bf9c48f1cd64a96eec7ef76a39028007f312",
    "patch": "@@ -96,6 +96,9 @@\n   private static final String DESTINATION_DOCKER_TAG = \"tag\";\n   private static final String DESTINATION_DOCKER_IMAGE = DockerUtils.getTaggedImageName(DESTINATION_DOCKER_REPO, DESTINATION_DOCKER_TAG);\n \n+  private static final String STREAM_NAMESPACE = \"tests\";\n+  private static final String STREAM_NAME = \"shoes\";\n+\n   private static final SourceConnection SOURCE = new SourceConnection()\n       .withName(\"my postgres db\")\n       .withWorkspaceId(UUID.randomUUID())\n@@ -332,7 +335,9 @@ void testDiscoverSchemaForSourceFromSourceId() throws IOException, JsonValidatio\n     when(schedulerJobClient.createDiscoverSchemaJob(source, SOURCE_DOCKER_IMAGE)).thenReturn(completedJob);\n     final JobOutput jobOutput = new JobOutput()\n         .withDiscoverCatalog(new StandardDiscoverCatalogOutput()\n-            .withCatalog(CatalogHelpers.createAirbyteCatalog(\"shoes\", Field.of(\"sku\", JsonSchemaPrimitive.STRING))));\n+            .withCatalog(CatalogHelpers.createAirbyteCatalog(\n+                CatalogHelpers.createAirbyteStreamName(STREAM_NAMESPACE, STREAM_NAME),\n+                Field.of(\"sku\", JsonSchemaPrimitive.STRING))));\n     when(completedJob.getSuccessOutput()).thenReturn(Optional.of(jobOutput));\n \n     final SourceDiscoverSchemaRead actual = schedulerHandler.discoverSchemaForSourceFromSourceId(request);"
  }
]
