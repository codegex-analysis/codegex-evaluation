[
  {
    "sha": "1e6a4a8613b963d7b41bc5a0bd83cea7de51ccd7",
    "filename": "README.adoc",
    "status": "modified",
    "additions": 53,
    "deletions": 5,
    "changes": 58,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/README.adoc",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/README.adoc",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/README.adoc?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -23,12 +23,11 @@\n :base_url: https://github.com/confluentinc/{github_name}\n :issues_link: {base_url}/issues\n \n-// dynamic include base for editing in IDEA\n+// dynamic include base for rendering\n :project_root: ./\n \n-// uncomment the following if not using IDEA or having issues, for editing the template to see the includes\n-// note that with this line not commented out, the rendering of the root level asiidoc file will be incorrect (i.e.\n-// leave it commented out when committing work)\n+// uncomment the following if IDEA or having issues, for editing the template to see the includes\n+// note that with this line not commented out, the rendering of the root level asiidoc file will be incorrect (i.e. leave it commented out when committing work)\n //:project_root: ../../\n \n \n@@ -189,9 +188,12 @@ The end-to-end latency of the responses to these answers needs to be as low as t\n * Kafka Streams app that had a slow stage\n ** We use Kafka Streams for our message processing, but one of it's steps have characteristics of the above and we need better performance.\n We can break out as described below into the tool for processing that step, then return to the Kafka Streams context.\n+** Message load spikes causing heavy hot spots on join operations where a disproportionate quantity of messages land on one partition.\n+*** If keys cannot be adjusted or the topology modified to better distribute messages across partitions - consider performing a <<parallel-joins,parallel join operation>>.\n * Provisioning extra machines (either virtual machines or real machines) to run multiple clients has a cost, using this library instead avoids the need for extra instances to be deployed in any respect.\n \n \n+\n == Feature List\n * Have massively parallel consumption processing without running hundreds or thousands of\n ** Kafka consumer clients\n@@ -488,6 +490,7 @@ In future versions, we plan to look at supporting other streaming systems like h\n \n See the link:{project_root}/parallel-consumer-examples/parallel-consumer-example-vertx/src/main/java/io/confluent/parallelconsumer/examples/vertx/VertxApp.java[Vert.x example] project, and it's test.\n \n+\n [[streams-usage-code]]\n === Kafka Streams Concurrent Processing\n \n@@ -535,6 +538,51 @@ image::https://lucid.app/publicSegments/view/43f2740c-2a7f-4b7f-909e-434a5bbe3fb\n \n See the link:{project_root}/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/StreamsApp.java[Kafka Streams example] project, and it's test.\n \n+\n+[[parallel-joins]]\n+==== Parallel Joins\n+\n+PC can also be used to implement a parallel join against a data source, namely a Kafka Streams (KS) state store. KS state stores can be read by external threads (external to the toplogy context), and so they can be reference in the processing function of PC.\n+\n+image::https://lucid.app/publicSegments/view/d144c027-653c-4e77-bfa4-8ecaadba1385/image.png[]\n+\n+CAUTION: Although using a `GlobalKTable` is not strictly necessary, the https://docs.confluent.io/platform/current/streams/developer-guide/interactive-queries.html[extra network hop] caused by data not being collocated when using a sharded `KTable` may negate the performance benefits in some scenarios.\n+For this reason, a `GlobalKTable` is recommended.\n+\n+.Parallel joins with Kafka Streams\n+[source,java,indent=0]\n+----\n+    /**\n+     * Needs KeyValueStore injected.\n+     */\n+    ParallelJoin(KeyValueStore<UserId, UserProfile> store, ParallelConsumer<UserId, UserEvent> pc) {\n+        pc.poll(record -> {\n+            UserId userId = record.key();\n+            UserEvent userEvent = record.value();\n+\n+            UserProfile userProfile = store.get(userId);\n+            if (userProfile != null) { // <1>\n+                // join hit\n+                // create payload with even details and call third party system, or produce a result message\n+                userEvent.getEventPayload();\n+                //....\n+            } else { // <2>\n+                // join miss\n+                // drop - not registered devices for that user\n+            }\n+        });\n+    }\n+----\n+<1> If no matching item is present in the state store for the key, then it's a miss.\n+<2> If lookup is not null, join the data any way you please, and potentially call an external system with the joined data, or output it back to a Kafka topic using the `#pollAndProdce` API if trying to avoid https://thorben-janssen.com/dual-writes/[dual write] scenarios.\n+\n+See the link:{project_root}/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java[Parallel join KS example] class.\n+\n+WARNING: Performing a join outside of KS relinquishes ordering efforts KS applies to populating each side of the join - i.e. there is no effort to apply any ordering to the corresponding sides of this join.\n+When joining within KS, this is taken care of for you.\n+Be careful using this technique if your operation is sensitive to the order in which data is populated in the state store vs arriving from the event stream.\n+\n+\n [[ordering-guarantees]]\n == Ordering Guarantees\n \n@@ -656,7 +704,7 @@ https://cwiki.apache.org/confluence/display/KAFKA/KIP-408%3A+Add+Asynchronous+Pr\n However, any given preprocessing can be done in KS, preparing the messages.\n One can then use this library to consume from an input topic, produced by KS to process the messages in parallel.\n \n-For a code example, see the <<streams-usage-code>> section.\n+For a code example, see the <<streams-usage-code>> and <<parallel-joins>> section.\n \n .Example usage with Kafka Streams\n image::https://lucid.app/publicSegments/view/43f2740c-2a7f-4b7f-909e-434a5bbe3fbf/image.png[Kafka Streams Usage, align=\"center\"]"
  },
  {
    "sha": "8c73b8ea67af6e122290b8f9e0f712387376996a",
    "filename": "parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -0,0 +1,36 @@\n+package io.confluent.parallelconsumer.examples.streams;\n+\n+/*-\n+ * Copyright (C) 2020 Confluent, Inc.\n+ */\n+\n+\n+import io.confluent.parallelconsumer.ParallelConsumer;\n+import org.apache.kafka.streams.state.KeyValueStore;\n+\n+public class ParallelJoin {\n+\n+    // tag::example[]\n+    /**\n+     * Needs KeyValueStore injected.\n+     */\n+    ParallelJoin(KeyValueStore<UserId, UserProfile> store, ParallelConsumer<UserId, UserEvent> pc) {\n+        pc.poll(record -> {\n+            UserId userId = record.key();\n+            UserEvent userEvent = record.value();\n+\n+            UserProfile userProfile = store.get(userId);\n+            if (userProfile != null) { // <1>\n+                // join hit\n+                // create payload with even details and call third party system, or produce a result message\n+                userEvent.getEventPayload();\n+                //....\n+            } else { // <2>\n+                // join miss\n+                // drop - not registered devices for that user\n+            }\n+        });\n+    }\n+    // end::example[]\n+\n+}"
  },
  {
    "sha": "ea0aef4d9c68c53aba44e1498c3665c2286ed20f",
    "filename": "parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserEvent.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserEvent.java",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserEvent.java",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserEvent.java?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -0,0 +1,13 @@\n+package io.confluent.parallelconsumer.examples.streams;\n+\n+/*-\n+ * Copyright (C) 2020 Confluent, Inc.\n+ */\n+\n+\n+import lombok.Value;\n+\n+@Value\n+public class UserEvent {\n+    String eventPayload;\n+}"
  },
  {
    "sha": "02e5367e980b5cdd5a62ccfa000393a9dddeeef1",
    "filename": "parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserId.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserId.java",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserId.java",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserId.java?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -0,0 +1,9 @@\n+package io.confluent.parallelconsumer.examples.streams;\n+\n+/*-\n+ * Copyright (C) 2020 Confluent, Inc.\n+ */\n+\n+\n+public class UserId {\n+}"
  },
  {
    "sha": "6adfa5e60328be3006f3f6f94e267d748f6aa802",
    "filename": "parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserProfile.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserProfile.java",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserProfile.java",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/UserProfile.java?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -0,0 +1,9 @@\n+package io.confluent.parallelconsumer.examples.streams;\n+\n+/*-\n+ * Copyright (C) 2020 Confluent, Inc.\n+ */\n+\n+\n+public class UserProfile {\n+}"
  },
  {
    "sha": "90506353640f862c9fa2d86ba0fc70a2aaf8aa88",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/pom.xml",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/pom.xml",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/pom.xml?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -377,7 +377,7 @@\n                 <version>${mycila.version}</version>\n                 <inherited>false</inherited>\n                 <!-- To apply the license run: -->\n-                <!-- ↪ mvn com.mycila:license-maven-plugin:format-->\n+                <!-- ↪ mvn com.mycila:license-maven-plugin:format -->\n                 <configuration>\n                     <aggregate>true</aggregate>\n                     <licenseSets>"
  },
  {
    "sha": "a00bf6c136390be8f12ee4ef54e90ae9d3f0f4fa",
    "filename": "src/docs/README.adoc",
    "status": "modified",
    "additions": 34,
    "deletions": 5,
    "changes": 39,
    "blob_url": "https://github.com/confluentinc/parallel-consumer/blob/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/src/docs/README.adoc",
    "raw_url": "https://github.com/confluentinc/parallel-consumer/raw/1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc/src/docs/README.adoc",
    "contents_url": "https://api.github.com/repos/confluentinc/parallel-consumer/contents/src/docs/README.adoc?ref=1317fe7b64a3f719c0f489f4cbc0df3a9f32eecc",
    "patch": "@@ -23,12 +23,11 @@\n :base_url: https://github.com/confluentinc/{github_name}\n :issues_link: {base_url}/issues\n \n-// dynamic include base for editing in IDEA\n+// dynamic include base for rendering\n :project_root: ./\n \n-// uncomment the following if not using IDEA or having issues, for editing the template to see the includes\n-// note that with this line not commented out, the rendering of the root level asiidoc file will be incorrect (i.e.\n-// leave it commented out when committing work)\n+// uncomment the following if IDEA or having issues, for editing the template to see the includes\n+// note that with this line not commented out, the rendering of the root level asiidoc file will be incorrect (i.e. leave it commented out when committing work)\n //:project_root: ../../\n \n \n@@ -187,9 +186,12 @@ The end-to-end latency of the responses to these answers needs to be as low as t\n * Kafka Streams app that had a slow stage\n ** We use Kafka Streams for our message processing, but one of it's steps have characteristics of the above and we need better performance.\n We can break out as described below into the tool for processing that step, then return to the Kafka Streams context.\n+** Message load spikes causing heavy hot spots on join operations where a disproportionate quantity of messages land on one partition.\n+*** If keys cannot be adjusted or the topology modified to better distribute messages across partitions - consider performing a <<parallel-joins,parallel join operation>>.\n * Provisioning extra machines (either virtual machines or real machines) to run multiple clients has a cost, using this library instead avoids the need for extra instances to be deployed in any respect.\n \n \n+\n == Feature List\n * Have massively parallel consumption processing without running hundreds or thousands of\n ** Kafka consumer clients\n@@ -439,6 +441,7 @@ include::{project_root}/parallel-consumer-examples/parallel-consumer-example-ver\n \n See the link:{project_root}/parallel-consumer-examples/parallel-consumer-example-vertx/src/main/java/io/confluent/parallelconsumer/examples/vertx/VertxApp.java[Vert.x example] project, and it's test.\n \n+\n [[streams-usage-code]]\n === Kafka Streams Concurrent Processing\n \n@@ -457,6 +460,32 @@ include::{project_root}/parallel-consumer-examples/parallel-consumer-example-str\n \n See the link:{project_root}/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/StreamsApp.java[Kafka Streams example] project, and it's test.\n \n+\n+[[parallel-joins]]\n+==== Parallel Joins\n+\n+PC can also be used to implement a parallel join against a data source, namely a Kafka Streams (KS) state store. KS state stores can be read by external threads (external to the toplogy context), and so they can be reference in the processing function of PC.\n+\n+image::https://lucid.app/publicSegments/view/d144c027-653c-4e77-bfa4-8ecaadba1385/image.png[]\n+\n+CAUTION: Although using a `GlobalKTable` is not strictly necessary, the https://docs.confluent.io/platform/current/streams/developer-guide/interactive-queries.html[extra network hop] caused by data not being collocated when using a sharded `KTable` may negate the performance benefits in some scenarios.\n+For this reason, a `GlobalKTable` is recommended.\n+\n+.Parallel joins with Kafka Streams\n+[source,java,indent=0]\n+----\n+include::{project_root}/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java[tag=example]\n+----\n+<1> If no matching item is present in the state store for the key, then it's a miss.\n+<2> If lookup is not null, join the data any way you please, and potentially call an external system with the joined data, or output it back to a Kafka topic using the `#pollAndProdce` API if trying to avoid https://thorben-janssen.com/dual-writes/[dual write] scenarios.\n+\n+See the link:{project_root}/parallel-consumer-examples/parallel-consumer-example-streams/src/main/java/io/confluent/parallelconsumer/examples/streams/ParallelJoin.java[Parallel join KS example] class.\n+\n+WARNING: Performing a join outside of KS relinquishes ordering efforts KS applies to populating each side of the join - i.e. there is no effort to apply any ordering to the corresponding sides of this join.\n+When joining within KS, this is taken care of for you.\n+Be careful using this technique if your operation is sensitive to the order in which data is populated in the state store vs arriving from the event stream.\n+\n+\n [[ordering-guarantees]]\n == Ordering Guarantees\n \n@@ -578,7 +607,7 @@ https://cwiki.apache.org/confluence/display/KAFKA/KIP-408%3A+Add+Asynchronous+Pr\n However, any given preprocessing can be done in KS, preparing the messages.\n One can then use this library to consume from an input topic, produced by KS to process the messages in parallel.\n \n-For a code example, see the <<streams-usage-code>> section.\n+For a code example, see the <<streams-usage-code>> and <<parallel-joins>> section.\n \n .Example usage with Kafka Streams\n image::https://lucid.app/publicSegments/view/43f2740c-2a7f-4b7f-909e-434a5bbe3fbf/image.png[Kafka Streams Usage, align=\"center\"]"
  }
]
