[
  {
    "sha": "47675c3fe6d32b0e9d49d2945a9f0a3218b82246",
    "filename": "ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -43,6 +43,13 @@\n  */\n @SuppressWarnings(\"ClassDataAbstractionCoupling\")\n public final class MetricCollectors {\n+  public static class TopicStats extends TreeMap<String, TopicSensors.Stat> {\n+    public TopicStats() {\n+      super();\n+    }\n+  }\n+\n+\n   private static final String KSQL_JMX_PREFIX = \"io.confluent.ksql.metrics\";\n   public static final String RESOURCE_LABEL_PREFIX =\n       CommonClientConfigs.METRICS_CONTEXT_PREFIX + \"resource.\";\n@@ -171,10 +178,10 @@ public static String getAndFormatStatsFor(final String topic, final boolean isEr\n         isError ? \"last-failed\" : \"last-message\");\n   }\n \n-  static Map<String, TopicSensors.Stat> getAggregateMetrics(\n+  static TopicStats getAggregateMetrics(\n       final List<TopicSensors.Stat> allStats\n   ) {\n-    final Map<String, TopicSensors.Stat> results = new TreeMap<>();\n+    final TopicStats results = new TopicStats();\n     allStats.forEach(stat -> {\n       results.computeIfAbsent(\n           stat.name(),"
  },
  {
    "sha": "be31b684d76534a8532982e9be85404e46413a92",
    "filename": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlHostInfo.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlHostInfo.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlHostInfo.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlHostInfo.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -17,6 +17,7 @@\n \n import com.google.errorprone.annotations.Immutable;\n import java.util.Objects;\n+import org.apache.kafka.streams.state.HostInfo;\n \n \n /**\n@@ -64,4 +65,8 @@ public int port() {\n   public String toString() {\n     return \"KsqlHostInfo{host='\" + this.host + '\\'' + \", port=\" + this.port + '}';\n   }\n+\n+  public HostInfo toHostInfo() {\n+    return new HostInfo(this.host, this.port);\n+  }\n }"
  },
  {
    "sha": "ec3217d41909d1430bd1c217a27b531bb261b360",
    "filename": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/ShowColumns.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/ShowColumns.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/ShowColumns.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/ShowColumns.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -24,7 +24,7 @@\n import java.util.Optional;\n \n @Immutable\n-public class ShowColumns extends Statement {\n+public class ShowColumns extends StatementWithExtendedClause {\n \n   private final SourceName table;\n   private final boolean isExtended;\n@@ -38,7 +38,7 @@ public ShowColumns(\n       final SourceName table,\n       final boolean isExtended\n   ) {\n-    super(location);\n+    super(location, isExtended);\n     this.table = requireNonNull(table, \"table\");\n     this.isExtended = isExtended;\n   }"
  },
  {
    "sha": "61f8ca501c253d9aaa98356907dee8d1db41e0ca",
    "filename": "ksqldb-rest-app/pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/pom.xml",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/pom.xml",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/pom.xml?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -177,6 +177,14 @@\n             <scope>test</scope>\n         </dependency>\n \n+\n+        <dependency>\n+            <groupId>org.jeasy</groupId>\n+            <artifactId>easy-random-core</artifactId>\n+            <version>4.2.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "81335b5f2101e3fe2bae9c07a23178d7d97aef06",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/entity/SourceDescriptionFactory.java",
    "status": "modified",
    "additions": 31,
    "deletions": 3,
    "changes": 34,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/entity/SourceDescriptionFactory.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/entity/SourceDescriptionFactory.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/entity/SourceDescriptionFactory.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -19,11 +19,13 @@\n import io.confluent.ksql.execution.timestamp.TimestampColumn;\n import io.confluent.ksql.metastore.model.DataSource;\n import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.metrics.TopicSensors;\n import io.confluent.ksql.rest.util.EntityUtil;\n import io.confluent.ksql.schema.utils.FormatOptions;\n import java.util.List;\n import java.util.Optional;\n import org.apache.kafka.clients.admin.TopicDescription;\n+import org.apache.kafka.streams.state.HostInfo;\n \n public final class SourceDescriptionFactory {\n \n@@ -36,8 +38,32 @@ public static SourceDescription create(\n       final List<RunningQuery> readQueries,\n       final List<RunningQuery> writeQueries,\n       final Optional<TopicDescription> topicDescription,\n-      final List<QueryOffsetSummary> offsetSummaries,\n+      final List<QueryOffsetSummary> queryOffsetSummaries,\n       final List<String> sourceConstraints\n+  ) {\n+    return create(\n+        dataSource,\n+        extended,\n+        readQueries,\n+        writeQueries,\n+        topicDescription,\n+        queryOffsetSummaries,\n+        sourceConstraints,\n+        ImmutableMap.of(),\n+        ImmutableMap.of()\n+    );\n+  }\n+\n+  public static SourceDescription create(\n+      final DataSource dataSource,\n+      final boolean extended,\n+      final List<RunningQuery> readQueries,\n+      final List<RunningQuery> writeQueries,\n+      final Optional<TopicDescription> topicDescription,\n+      final List<QueryOffsetSummary> queryOffsetSummaries,\n+      final List<String> sourceConstraints,\n+      final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> stats,\n+      final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> errorStats\n   ) {\n     return new SourceDescription(\n         dataSource.getName().toString(FormatOptions.noEscape()),\n@@ -66,7 +92,9 @@ public static SourceDescription create(\n         topicDescription.map(td -> td.partitions().size()).orElse(0),\n         topicDescription.map(td -> td.partitions().get(0).replicas().size()).orElse(0),\n         dataSource.getSqlExpression(),\n-        offsetSummaries,\n-        sourceConstraints);\n+        queryOffsetSummaries,\n+        sourceConstraints,\n+        stats,\n+        errorStats);\n   }\n }"
  },
  {
    "sha": "a3521527872b2b8930eb00ffe93998425c4725bb",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ClusterQueryStats.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ClusterQueryStats.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ClusterQueryStats.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ClusterQueryStats.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2021 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.metrics.TopicSensors;\n+import io.confluent.ksql.rest.entity.SourceDescription;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.kafka.streams.state.HostInfo;\n+\n+\n+public final class ClusterQueryStats {\n+  private final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> stats;\n+  private final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> errors;\n+  private final String sourceName;\n+\n+  private ClusterQueryStats(\n+      final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> stats,\n+      final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> errors,\n+      final String sourceName\n+  ) {\n+    this.stats = stats;\n+    this.errors = errors;\n+    this.sourceName = sourceName;\n+  }\n+\n+  public static ClusterQueryStats create(\n+      final HostInfo localHostInfo,\n+      final SourceDescription localSourceDescription,\n+      final Collection<RemoteSourceDescription> remoteSourceDescriptions\n+  ) {\n+    final Map<HostInfo, SourceDescription> rds = remoteSourceDescriptions.stream()\n+        .collect(toImmutableMap(\n+            RemoteSourceDescription::getHostInfo,\n+            RemoteSourceDescription::getSourceDescription\n+        ));\n+\n+\n+    final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> remoteStats = rds\n+        .entrySet()\n+        .stream()\n+        .collect(\n+            toImmutableMap(\n+                Map.Entry::getKey,\n+                v -> ImmutableMap.copyOf(v.getValue().getStatisticsMap())\n+            )\n+        );\n+    final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> remoteErrors = rds\n+        .entrySet()\n+        .stream()\n+        .collect(\n+            toImmutableMap(\n+                Map.Entry::getKey,\n+                v -> ImmutableMap.copyOf(v.getValue().getErrorStatsMap())\n+            )\n+        );\n+\n+\n+    final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> stats = ImmutableMap\n+        .<HostInfo, ImmutableMap<String, TopicSensors.Stat>>builder()\n+        .put(localHostInfo, localSourceDescription.getStatisticsMap())\n+        .putAll(remoteStats)\n+        .build();\n+\n+    final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> errors = ImmutableMap\n+        .<HostInfo, ImmutableMap<String, TopicSensors.Stat>>builder()\n+        .put(localHostInfo, localSourceDescription.getErrorStatsMap())\n+        .putAll(remoteErrors)\n+        .build();\n+\n+    return new ClusterQueryStats(stats, errors, localSourceDescription.getName());\n+  }\n+\n+  public ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> getStats() {\n+    return stats;\n+  }\n+\n+  public ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> getErrors() {\n+    return errors;\n+  }\n+\n+  public String getSourceName() {\n+    return sourceName;\n+  }\n+}"
  },
  {
    "sha": "f42a0753be94e9d1b6c7925a94394132fc54517f",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java",
    "status": "modified",
    "additions": 19,
    "deletions": 16,
    "changes": 35,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -56,25 +56,25 @@ private ListQueriesExecutor() {\n       final KsqlExecutionContext executionContext,\n       final ServiceContext serviceContext\n   ) {\n-    final RemoteDataAugmenter remoteDataAugmenter = RemoteDataAugmenter.create(\n-        statement.getStatementText(),\n+    final RemoteHostExecutor remoteHostExecutor = RemoteHostExecutor.create(\n+        statement,\n         sessionProperties,\n         executionContext,\n         serviceContext.getKsqlClient()\n     );\n     return statement.getStatement().getShowExtended()\n-        ? executeExtended(statement, sessionProperties, executionContext, remoteDataAugmenter)\n-        : executeSimple(statement, executionContext, remoteDataAugmenter);\n+        ? executeExtended(statement, sessionProperties, executionContext, remoteHostExecutor)\n+        : executeSimple(statement, executionContext, remoteHostExecutor);\n   }\n \n   private static Optional<KsqlEntity> executeSimple(\n       final ConfiguredStatement<ListQueries> statement,\n       final KsqlExecutionContext executionContext,\n-      final RemoteDataAugmenter remoteDataAugmenter\n+      final RemoteHostExecutor remoteHostExecutor\n   ) {\n-    final Map<QueryId, RunningQuery> runningQueries = remoteDataAugmenter.augmentWithRemote(\n+    final Map<QueryId, RunningQuery> runningQueries = mergeSimple(\n         getLocalSimple(executionContext),\n-        ListQueriesExecutor::mergeSimple\n+        remoteHostExecutor.fetchAllRemoteResults()\n     );\n     return Optional.of(new Queries(\n         statement.getStatementText(),\n@@ -117,10 +117,11 @@ private ListQueriesExecutor() {\n \n   private static Map<QueryId, RunningQuery> mergeSimple(\n       final Map<QueryId, RunningQuery> allResults,\n-      final Pair<List<KsqlEntity>, Set<HostInfo>> remoteResults\n+      final Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> remoteResults\n   ) {\n-    final List<KsqlEntity> remoteQueries = remoteResults.getLeft();\n-    final List<RunningQuery> remoteRunningQueries = remoteQueries.stream()\n+    final List<RunningQuery> remoteRunningQueries = remoteResults.getLeft()\n+        .values()\n+        .stream()\n         .map(Queries.class::cast)\n         .map(Queries::getQueries)\n         .flatMap(List::stream)\n@@ -157,11 +158,11 @@ private ListQueriesExecutor() {\n       final ConfiguredStatement<ListQueries> statement,\n       final SessionProperties sessionProperties,\n       final KsqlExecutionContext executionContext,\n-      final RemoteDataAugmenter remoteDataAugmenter\n+      final RemoteHostExecutor remoteHostExecutor\n   ) {\n-    final Map<QueryId, QueryDescription> queryDescriptions = remoteDataAugmenter.augmentWithRemote(\n+    final Map<QueryId, QueryDescription> queryDescriptions = mergeExtended(\n         getLocalExtended(sessionProperties, executionContext),\n-        ListQueriesExecutor::mergeExtended\n+        remoteHostExecutor.fetchAllRemoteResults()\n     );\n \n     return Optional.of(new QueryDescriptionList(\n@@ -189,10 +190,12 @@ private ListQueriesExecutor() {\n \n   private static Map<QueryId, QueryDescription> mergeExtended(\n       final Map<QueryId, QueryDescription> allResults,\n-      final Pair<List<KsqlEntity>, Set<HostInfo>> remoteResults\n+      final Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> remoteResults\n   ) {\n-    final List<KsqlEntity> remoteQueries = remoteResults.getLeft();\n-    final List<QueryDescription> remoteQueryDescriptions = remoteQueries.stream()\n+    final List<QueryDescription> remoteQueryDescriptions = remoteResults\n+        .getLeft()\n+        .values()\n+        .stream()\n         .map(QueryDescriptionList.class::cast)\n         .map(QueryDescriptionList::getQueryDescriptions)\n         .flatMap(List::stream)"
  },
  {
    "sha": "efc92adc7fbd5dca005a758cadab499c03b52c52",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListSourceExecutor.java",
    "status": "modified",
    "additions": 83,
    "deletions": 15,
    "changes": 98,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListSourceExecutor.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListSourceExecutor.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListSourceExecutor.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -15,7 +15,10 @@\n \n package io.confluent.ksql.rest.server.execution;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMultimap;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n import io.confluent.ksql.KsqlExecutionContext;\n import io.confluent.ksql.exception.KafkaResponseGetFailedException;\n import io.confluent.ksql.metastore.MetaStore;\n@@ -28,6 +31,7 @@\n import io.confluent.ksql.parser.tree.ListStreams;\n import io.confluent.ksql.parser.tree.ListTables;\n import io.confluent.ksql.parser.tree.ShowColumns;\n+import io.confluent.ksql.parser.tree.StatementWithExtendedClause;\n import io.confluent.ksql.query.QueryId;\n import io.confluent.ksql.rest.SessionProperties;\n import io.confluent.ksql.rest.entity.ConsumerPartitionOffsets;\n@@ -54,6 +58,7 @@\n import io.confluent.ksql.util.PersistentQueryMetadata;\n import io.confluent.ksql.util.QueryApplicationId;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -79,13 +84,25 @@ private ListSourceExecutor() {\n   }\n \n   private static Optional<KsqlEntity> sourceDescriptionList(\n-      final ConfiguredStatement<?> statement,\n+      final ConfiguredStatement<? extends StatementWithExtendedClause> statement,\n       final SessionProperties sessionProperties,\n       final KsqlExecutionContext executionContext,\n       final ServiceContext serviceContext,\n       final List<? extends DataSource> sources,\n       final boolean extended\n   ) {\n+    final RemoteHostExecutor remoteHostExecutor = RemoteHostExecutor.create(\n+        statement,\n+        sessionProperties,\n+        executionContext,\n+        serviceContext.getKsqlClient()\n+    );\n+\n+    final Multimap<String, RemoteSourceDescription> remoteSourceDescriptions = extended\n+        ? RemoteSourceDescriptionExecutor.fetchSourceDescriptions(remoteHostExecutor)\n+        : ImmutableMultimap.of();\n+\n+\n     final List<SourceDescriptionWithWarnings> descriptions = sources.stream()\n         .map(\n             s -> describeSource(\n@@ -94,7 +111,10 @@ private ListSourceExecutor() {\n                 serviceContext,\n                 s.getName(),\n                 extended,\n-                statement.getStatementText())\n+                statement,\n+                sessionProperties,\n+                remoteSourceDescriptions.get(s.getName().toString())\n+            )\n         )\n         .collect(Collectors.toList());\n     return Optional.of(\n@@ -208,7 +228,8 @@ private ListSourceExecutor() {\n         serviceContext,\n         showColumns.getTable(),\n         showColumns.isExtended(),\n-        statement.getStatementText()\n+        statement,\n+        sessionProperties\n     );\n     return Optional.of(\n         new SourceDescriptionEntity(\n@@ -241,27 +262,52 @@ private ListSourceExecutor() {\n         .collect(Collectors.toList());\n   }\n \n+  private static SourceDescriptionWithWarnings describeSource(\n+      final KsqlConfig config,\n+      final KsqlExecutionContext executionContext,\n+      final ServiceContext serviceContext,\n+      final SourceName table,\n+      final boolean extended,\n+      final ConfiguredStatement<ShowColumns> statement,\n+      final SessionProperties sessionProperties\n+  ) {\n+    return describeSource(\n+        config,\n+        executionContext,\n+        serviceContext,\n+        table,\n+        extended,\n+        statement,\n+        sessionProperties,\n+        ImmutableList.of()\n+    );\n+  }\n+\n   private static SourceDescriptionWithWarnings describeSource(\n       final KsqlConfig ksqlConfig,\n       final KsqlExecutionContext ksqlEngine,\n       final ServiceContext serviceContext,\n       final SourceName name,\n       final boolean extended,\n-      final String statementText) {\n+      final ConfiguredStatement<? extends StatementWithExtendedClause> statement,\n+      final SessionProperties sessionProperties,\n+      final Collection<RemoteSourceDescription> remoteSourceDescriptions\n+\n+  ) {\n     final DataSource dataSource = ksqlEngine.getMetaStore().getSource(name);\n     if (dataSource == null) {\n       throw new KsqlStatementException(String.format(\n           \"Could not find STREAM/TABLE '%s' in the Metastore\",\n           name.text()\n-      ), statementText);\n+      ), statement.getStatementText());\n     }\n \n     final List<RunningQuery> readQueries = getQueries(ksqlEngine,\n         q -> q.getSourceNames().contains(dataSource.getName()));\n     final List<RunningQuery> writeQueries = getQueries(ksqlEngine,\n         q -> q.getSinkName().equals(dataSource.getName()));\n \n-    Optional<org.apache.kafka.clients.admin.TopicDescription> topicDescription =\n+    Optional<TopicDescription> topicDescription =\n         Optional.empty();\n     List<QueryOffsetSummary> queryOffsetSummaries = Collections.emptyList();\n     List<String> sourceConstraints = Collections.emptyList();\n@@ -275,22 +321,44 @@ private static SourceDescriptionWithWarnings describeSource(\n     } catch (final KafkaException | KafkaResponseGetFailedException e) {\n       warnings.add(new KsqlWarning(\"Error from Kafka: \" + e.getMessage()));\n     }\n+    final SourceDescription localSourceDescription = SourceDescriptionFactory.create(\n+        dataSource,\n+        extended,\n+        readQueries,\n+        writeQueries,\n+        topicDescription,\n+        queryOffsetSummaries,\n+        sourceConstraints\n+    );\n \n     if (extended) {\n       queryOffsetSummaries = queryOffsetSummaries(ksqlConfig, serviceContext, writeQueries);\n+\n+      final ClusterQueryStats clusterQueryStats = ClusterQueryStats.create(\n+          sessionProperties.getKsqlHostInfo().toHostInfo(),\n+          localSourceDescription,\n+          remoteSourceDescriptions\n+      );\n+\n+      return new SourceDescriptionWithWarnings(\n+          warnings,\n+          SourceDescriptionFactory.create(\n+              dataSource,\n+              extended,\n+              readQueries,\n+              writeQueries,\n+              topicDescription,\n+              queryOffsetSummaries,\n+              sourceConstraints,\n+              clusterQueryStats.getStats(),\n+              clusterQueryStats.getErrors()\n+          )\n+      );\n     }\n \n     return new SourceDescriptionWithWarnings(\n         warnings,\n-        SourceDescriptionFactory.create(\n-            dataSource,\n-            extended,\n-            readQueries,\n-            writeQueries,\n-            topicDescription,\n-            queryOffsetSummaries,\n-            sourceConstraints\n-        )\n+        localSourceDescription\n     );\n   }\n "
  },
  {
    "sha": "387a12b37bc92a103702815d830917649e13ec6a",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutor.java",
    "status": "renamed",
    "additions": 16,
    "deletions": 33,
    "changes": 49,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutor.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutor.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutor.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -15,25 +15,25 @@\n \n package io.confluent.ksql.rest.server.execution;\n \n-import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import io.confluent.ksql.KsqlExecutionContext;\n+import io.confluent.ksql.parser.tree.StatementWithExtendedClause;\n import io.confluent.ksql.rest.SessionProperties;\n import io.confluent.ksql.rest.client.RestResponse;\n import io.confluent.ksql.rest.entity.KsqlEntity;\n import io.confluent.ksql.rest.entity.KsqlEntityList;\n import io.confluent.ksql.rest.server.ServerUtil;\n import io.confluent.ksql.rest.util.DiscoverRemoteHostsUtil;\n import io.confluent.ksql.services.SimpleKsqlClient;\n+import io.confluent.ksql.statement.ConfiguredStatement;\n import io.confluent.ksql.util.KsqlRequestConfig;\n import io.confluent.ksql.util.Pair;\n import io.vertx.core.logging.Logger;\n import io.vertx.core.logging.LoggerFactory;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n@@ -42,21 +42,19 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n-import java.util.function.BiFunction;\n import org.apache.kafka.streams.state.HostInfo;\n \n \n-public final class RemoteDataAugmenter {\n+public final class RemoteHostExecutor {\n   private static final int TIMEOUT_SECONDS = 10;\n-  private static final Logger LOG = LoggerFactory.getLogger(RemoteDataAugmenter.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(RemoteHostExecutor.class);\n \n   private final String statementText;\n   private final SessionProperties sessionProperties;\n   private final KsqlExecutionContext executionContext;\n   private final SimpleKsqlClient ksqlClient;\n \n-\n-  private RemoteDataAugmenter(\n+  private RemoteHostExecutor(\n       final String statementText,\n       final SessionProperties sessionProperties,\n       final KsqlExecutionContext executionContext,\n@@ -68,28 +66,14 @@ private RemoteDataAugmenter(\n     this.ksqlClient = Objects.requireNonNull(ksqlClient);\n   }\n \n-  public static RemoteDataAugmenter create(\n-      final String statementText,\n+  public static RemoteHostExecutor create(\n+      final ConfiguredStatement<? extends StatementWithExtendedClause> statement,\n       final SessionProperties sessionProperties,\n       final KsqlExecutionContext executionContext,\n       final SimpleKsqlClient ksqlClient\n   ) {\n-    return new RemoteDataAugmenter(\n-        statementText, sessionProperties, executionContext, ksqlClient);\n-  }\n-\n-\n-  public <R> R augmentWithRemote(\n-      final R localResult,\n-      final BiFunction<R, Pair<List<KsqlEntity>, Set<HostInfo>>, R> mergeFunc\n-  ) {\n-    Objects.requireNonNull(mergeFunc);\n-    if (sessionProperties.getInternalRequest()) {\n-      return mergeFunc.apply(localResult, new Pair<>(ImmutableList.of(), ImmutableSet.of()));\n-    }\n-    final Pair<List<KsqlEntity>, Set<HostInfo>> remoteResults = fetchAllRemoteResults();\n-\n-    return mergeFunc.apply(localResult, remoteResults);\n+    return new RemoteHostExecutor(\n+        statement.getStatementText(), sessionProperties, executionContext, ksqlClient);\n   }\n \n   private RestResponse<KsqlEntityList> makeKsqlRequest(\n@@ -115,14 +99,13 @@ public static RemoteDataAugmenter create(\n     return CompletableFuture.supplyAsync(() -> makeKsqlRequest(host, statementText), executor);\n   }\n \n-  private Pair<List<KsqlEntity>, Set<HostInfo>> fetchAllRemoteResults() {\n+  public Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> fetchAllRemoteResults() {\n     final Set<HostInfo> remoteHosts = DiscoverRemoteHostsUtil.getRemoteHosts(\n         executionContext.getPersistentQueries(),\n         sessionProperties.getKsqlHostInfo()\n     );\n-\n-    if (remoteHosts.isEmpty()) {\n-      return new Pair<>(ImmutableList.of(), ImmutableSet.of());\n+    if (remoteHosts.isEmpty() || sessionProperties.getInternalRequest()) {\n+      return new Pair<>(ImmutableMap.of(), ImmutableSet.of());\n     }\n \n     final Set<HostInfo> unresponsiveHosts = new HashSet<>();\n@@ -135,7 +118,7 @@ public static RemoteDataAugmenter create(\n         futureResponses.put(host, fetchRemoteData(statementText, host, executorService));\n       }\n \n-      final List<KsqlEntity> results = new ArrayList<>();\n+      final ImmutableMap.Builder<HostInfo, KsqlEntity> results = ImmutableMap.builder();\n       for (final Map.Entry<HostInfo, CompletableFuture<RestResponse<KsqlEntityList>>> e\n           : futureResponses.entrySet()) {\n         try {\n@@ -146,7 +129,7 @@ public static RemoteDataAugmenter create(\n                 e.getKey(), response.getErrorMessage().getMessage());\n             unresponsiveHosts.add(e.getKey());\n           } else {\n-            results.add(response.getResponse().get(0));\n+            results.put(e.getKey(), response.getResponse().get(0));\n           }\n         } catch (final Exception cause) {\n           LOG.warn(\"Failed to retrieve info from host: {}, statement: {}, cause: {}\",\n@@ -155,7 +138,7 @@ public static RemoteDataAugmenter create(\n         }\n       }\n \n-      return new Pair<>(results, unresponsiveHosts);\n+      return new Pair<>(results.build(), unresponsiveHosts);\n     } finally {\n       executorService.shutdown();\n     }",
    "previous_filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteDataAugmenter.java"
  },
  {
    "sha": "2b1591cafba25f90fed43365cf1dd8cb997d5cbd",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescription.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescription.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescription.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescription.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.rest.entity.SourceDescription;\n+import org.apache.kafka.streams.state.HostInfo;\n+\n+public final class RemoteSourceDescription {\n+  private final String sourceName;\n+  private final SourceDescription sourceDescription;\n+  private final HostInfo hostInfo;\n+\n+  public RemoteSourceDescription(\n+      final String sourceName,\n+      final SourceDescription sourceDescription,\n+      final HostInfo hostInfo\n+  ) {\n+    this.sourceName = sourceName;\n+    this.sourceDescription = sourceDescription;\n+    this.hostInfo = hostInfo;\n+  }\n+\n+  public String getSourceName() {\n+    return sourceName;\n+  }\n+\n+  public SourceDescription getSourceDescription() {\n+    return sourceDescription;\n+  }\n+\n+  public HostInfo getHostInfo() {\n+    return hostInfo;\n+  }\n+}"
  },
  {
    "sha": "976dfe93d408b9875c71eeda26ab1b757a0c2546",
    "filename": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutor.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutor.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutor.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutor.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2021 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import static com.google.common.collect.ImmutableListMultimap.flatteningToImmutableListMultimap;\n+import static com.google.common.collect.ImmutableListMultimap.toImmutableListMultimap;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimap;\n+import io.confluent.ksql.rest.entity.SourceDescriptionList;\n+import java.util.Map;\n+\n+public final class RemoteSourceDescriptionExecutor {\n+  private RemoteSourceDescriptionExecutor() {\n+  }\n+\n+  public static Multimap<String, RemoteSourceDescription> fetchSourceDescriptions(\n+      final RemoteHostExecutor remoteHostExecutor\n+  ) {\n+    return Maps\n+        .transformValues(\n+            remoteHostExecutor.fetchAllRemoteResults().getLeft(),\n+            SourceDescriptionList.class::cast)\n+        .entrySet()\n+        .stream()\n+        .collect(\n+            flatteningToImmutableListMultimap(\n+                Map.Entry::getKey,\n+                (e) -> e.getValue().getSourceDescriptions().stream())\n+        )\n+        .entries()\n+        .stream()\n+        .collect(toImmutableListMultimap(\n+            e -> e.getValue().getName(),\n+            e -> new RemoteSourceDescription(e.getValue().getName(), e.getValue(), e.getKey())\n+        ));\n+  }\n+}"
  },
  {
    "sha": "ab8d62fe248e486242af6c53b76320de25186cc2",
    "filename": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ClusterQueryStatsTest.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ClusterQueryStatsTest.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ClusterQueryStatsTest.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ClusterQueryStatsTest.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -0,0 +1,63 @@\n+package io.confluent.ksql.rest.server.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.rest.entity.SourceDescription;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.kafka.streams.state.HostInfo;\n+import org.jeasy.random.EasyRandom;\n+import org.jeasy.random.EasyRandomParameters;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ClusterQueryStatsTest {\n+\n+  final EasyRandomParameters parameters = new EasyRandomParameters()\n+      .randomize(ImmutableMap.class, ImmutableMap::of)\n+      .randomize(ImmutableList.class, ImmutableList::of);\n+  final EasyRandom objectMother = new EasyRandom(parameters);\n+  final HostInfo localHostInfo = objectMother.nextObject(HostInfo.class);\n+  final SourceDescription sourceDescription = objectMother.nextObject(SourceDescription.class);\n+\n+  @Test\n+  public void testMergesRemoteAndLocalResults() {\n+    List<RemoteSourceDescription> remote = objectMother\n+        .objects(RemoteSourceDescription.class, 5)\n+        .collect(toList());\n+\n+    ClusterQueryStats res = ClusterQueryStats.create(\n+        localHostInfo,\n+        sourceDescription,\n+        remote\n+    );\n+    assertEquals(sourceDescription.getStatisticsMap(), res.getStats().get(localHostInfo));\n+    assertEquals(sourceDescription.getErrorStatsMap(), res.getErrors().get(localHostInfo));\n+\n+    remote.forEach(rsd -> {\n+      assertEquals(\n+          rsd.getSourceDescription().getStatisticsMap(),\n+          res.getStats().get(rsd.getHostInfo()));\n+      assertEquals(\n+          rsd.getSourceDescription().getErrorStatsMap(),\n+          res.getErrors().get(rsd.getHostInfo()));\n+    });\n+  }\n+\n+  @Test\n+  public void testCanCreateWithEmptyRemoteResults() {\n+    ClusterQueryStats res = ClusterQueryStats.create(\n+        localHostInfo,\n+        sourceDescription,\n+        new ArrayList<>()\n+    );\n+    assertEquals(sourceDescription.getStatisticsMap(), res.getStats().get(localHostInfo));\n+    assertEquals(sourceDescription.getErrorStatsMap(), res.getErrors().get(localHostInfo));\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "08cbae84f5d2ea00faa5508031e525bbd081964c",
    "filename": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListSourceExecutorTest.java",
    "status": "modified",
    "additions": 24,
    "deletions": 12,
    "changes": 36,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListSourceExecutorTest.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListSourceExecutorTest.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListSourceExecutorTest.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -59,37 +59,49 @@\n import io.confluent.ksql.services.TestServiceContext;\n import io.confluent.ksql.statement.ConfiguredStatement;\n import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.KsqlHostInfo;\n import io.confluent.ksql.util.KsqlStatementException;\n import io.confluent.ksql.util.PersistentQueryMetadata;\n+import io.github.glytching.junit.extension.random.Random;\n+import io.github.glytching.junit.extension.random.RandomBeansExtension;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.kafka.clients.admin.TopicDescription;\n import org.apache.kafka.common.Node;\n import org.apache.kafka.common.TopicPartitionInfo;\n+import org.jeasy.random.EasyRandom;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n \n @RunWith(MockitoJUnitRunner.class)\n public class ListSourceExecutorTest {\n \n+  EasyRandom objectMother = new EasyRandom();\n+\n   @Rule\n   public final TemporaryEngine engine = new TemporaryEngine();\n \n+  @Mock\n+  private SessionProperties SESSION_PROPERTIES;\n   @Mock\n   private TopicDescription topicWith1PartitionAndRfOf1;\n \n+  private KsqlHostInfo ksqlHostInfo = objectMother.nextObject(KsqlHostInfo.class);\n+\n   @Before\n   public void setUp() {\n     final Node node = mock(Node.class);\n     final TopicPartitionInfo topicInfo = mock(TopicPartitionInfo.class);\n     when(topicInfo.replicas()).thenReturn(ImmutableList.of(node));\n     when(topicWith1PartitionAndRfOf1.partitions()).thenReturn(ImmutableList.of(topicInfo));\n+    when(SESSION_PROPERTIES.getKsqlHostInfo()).thenReturn(ksqlHostInfo);\n   }\n \n   @Test\n@@ -103,7 +115,7 @@ public void shouldShowStreams() {\n     final StreamsList descriptionList = (StreamsList)\n         CustomExecutors.LIST_STREAMS.execute(\n             engine.configure(\"SHOW STREAMS;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -139,7 +151,7 @@ public void shouldShowStreamsExtended() {\n     final SourceDescriptionList descriptionList = (SourceDescriptionList)\n         CustomExecutors.LIST_STREAMS.execute(\n             engine.configure(\"SHOW STREAMS EXTENDED;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -177,7 +189,7 @@ public void shouldDescribeStreams() {\n     final SourceDescriptionList descriptionList = (SourceDescriptionList)\n         CustomExecutors.DESCRIBE_STREAMS.execute(\n             engine.configure(\"DESCRIBE STREAMS;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -214,7 +226,7 @@ public void shouldShowTables() {\n     final TablesList descriptionList = (TablesList)\n         CustomExecutors.LIST_TABLES.execute(\n             engine.configure(\"LIST TABLES;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -250,7 +262,7 @@ public void shouldShowTablesExtended() {\n     final SourceDescriptionList descriptionList = (SourceDescriptionList)\n         CustomExecutors.LIST_TABLES.execute(\n             engine.configure(\"LIST TABLES EXTENDED;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -291,7 +303,7 @@ public void shouldDescribeTables() {\n     final SourceDescriptionList descriptionList = (SourceDescriptionList)\n         CustomExecutors.DESCRIBE_TABLES.execute(\n             engine.configure(\"DESCRIBE TABLES;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -338,7 +350,7 @@ public void shouldShowColumnsSource() {\n                 \"DESCRIBE SINK;\",\n                 new ShowColumns(SourceName.of(\"SINK\"), false)),\n                 SessionConfig.of(engine.getKsqlConfig(), ImmutableMap.of())),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         ).orElseThrow(IllegalStateException::new);\n@@ -371,7 +383,7 @@ public void shouldThrowOnDescribeMissingSource() {\n         KsqlStatementException.class,\n         () -> CustomExecutors.SHOW_COLUMNS.execute(\n             engine.configure(\"DESCRIBE S;\"),\n-            mock(SessionProperties.class),\n+            SESSION_PROPERTIES,\n             engine.getEngine(),\n             engine.getServiceContext()\n         )\n@@ -398,7 +410,7 @@ public void shouldNotCallTopicClientForExtendedDescription() {\n     // When:\n     CustomExecutors.LIST_STREAMS.execute(\n         engine.configure(\"SHOW STREAMS;\"),\n-        mock(SessionProperties.class),\n+        SESSION_PROPERTIES,\n         engine.getEngine(),\n         serviceContext\n     ).orElseThrow(IllegalStateException::new);\n@@ -456,7 +468,7 @@ public void shouldAddWarningsOnClientExceptionForStreamListing() {\n     // When:\n     final KsqlEntity entity = CustomExecutors.LIST_STREAMS.execute(\n         engine.configure(\"SHOW STREAMS EXTENDED;\"),\n-        mock(SessionProperties.class),\n+        SESSION_PROPERTIES,\n         engine.getEngine(),\n         serviceContext\n     ).orElseThrow(IllegalStateException::new);\n@@ -476,7 +488,7 @@ public void shouldAddWarningsOnClientExceptionForTopicListing() {\n     // When:\n     final KsqlEntity entity = CustomExecutors.LIST_TABLES.execute(\n         engine.configure(\"SHOW TABLES EXTENDED;\"),\n-        mock(SessionProperties.class),\n+        SESSION_PROPERTIES,\n         engine.getEngine(),\n         serviceContext\n     ).orElseThrow(IllegalStateException::new);\n@@ -495,7 +507,7 @@ public void shouldAddWarningOnClientExceptionForDescription() {\n     // When:\n     final KsqlEntity entity = CustomExecutors.SHOW_COLUMNS.execute(\n         engine.configure(\"DESCRIBE STREAM1 EXTENDED;\"),\n-        mock(SessionProperties.class),\n+        SESSION_PROPERTIES,\n         engine.getEngine(),\n         serviceContext\n     ).orElseThrow(IllegalStateException::new);"
  },
  {
    "sha": "27ebddb6ae0d56a405d1dcf19edf33a73f28969e",
    "filename": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutorTest.java",
    "status": "renamed",
    "additions": 36,
    "deletions": 30,
    "changes": 66,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutorTest.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutorTest.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteHostExecutorTest.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -2,13 +2,23 @@\n \n \n import io.confluent.ksql.engine.KsqlEngine;\n+import io.confluent.ksql.parser.tree.DescribeStreams;\n import io.confluent.ksql.rest.SessionProperties;\n import io.confluent.ksql.rest.client.KsqlRestClientException;\n import io.confluent.ksql.rest.client.RestResponse;\n+import io.confluent.ksql.rest.entity.KsqlEntity;\n import io.confluent.ksql.rest.entity.KsqlEntityList;\n import io.confluent.ksql.rest.server.TemporaryEngine;\n import io.confluent.ksql.rest.util.DiscoverRemoteHostsUtil;\n import io.confluent.ksql.services.SimpleKsqlClient;\n+import io.confluent.ksql.statement.ConfiguredStatement;\n+import io.confluent.ksql.util.Pair;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.apache.kafka.streams.state.HostInfo;\n import org.junit.Before;\n import org.junit.Rule;\n@@ -18,20 +28,11 @@\n import org.mockito.MockedStatic;\n import org.mockito.junit.MockitoJUnitRunner;\n \n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n+import static org.easymock.EasyMock.anyInt;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.hamcrest.core.IsNot.not;\n import static org.junit.Assert.assertEquals;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n@@ -40,13 +41,14 @@\n \n \n @RunWith(MockitoJUnitRunner.class)\n-public class RemoteDataAugmenterTest {\n+public class RemoteHostExecutorTest {\n   @Mock\n   public final KsqlEngine executionContext = mock(KsqlEngine.class);\n   private final Set<HostInfo> hosts = Stream.of(\"otherhost:1234\", \"anotherhost:444\")\n       .map(HostInfo::buildFromEndpoint)\n       .collect(Collectors.toSet());\n-  private final Map<String, String> localData = Collections.singletonMap(\"cat\", \"cutest\");\n+  @Rule\n+  public TemporaryEngine engine = new TemporaryEngine();\n   @Mock\n   private SimpleKsqlClient ksqlClient;\n   @Mock\n@@ -55,16 +57,16 @@\n   private RestResponse<KsqlEntityList> response;\n   @Mock\n   private KsqlEntityList ksqlEntityList;\n-  private RemoteDataAugmenter augmenter;\n+  private RemoteHostExecutor augmenter;\n \n   @Before\n   public void setup() throws MalformedURLException {\n \n     when(sessionProperties.getInternalRequest()).thenReturn(false);\n     when(sessionProperties.getLocalUrl()).thenReturn(new URL(\"https://address\"));\n \n-    augmenter = RemoteDataAugmenter.create(\n-        \"describe streams;\",\n+    augmenter = RemoteHostExecutor.create(\n+        (ConfiguredStatement<DescribeStreams>) engine.configure(\"describe streams;\"),\n         sessionProperties,\n         executionContext,\n         ksqlClient);\n@@ -77,26 +79,30 @@ public void testReturnsHostsThatHaveThrownAnException() {\n     try (MockedStatic<DiscoverRemoteHostsUtil> hdu = mockStatic(DiscoverRemoteHostsUtil.class)) {\n       hdu.when(() -> DiscoverRemoteHostsUtil.getRemoteHosts(any(), any())).thenReturn(hosts);\n \n-      augmenter.augmentWithRemote(localData, (localResult, remoteResults) -> {\n-        assertEquals( hosts, remoteResults.getRight());\n-        assertThat(remoteResults.getLeft(), is(empty()));\n-        return localResult;\n-      });\n+      Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> remoteResults = augmenter.fetchAllRemoteResults();\n+      assertEquals(hosts, remoteResults.getRight());\n+      assertThat(remoteResults.getLeft().entrySet(), hasSize(0));\n     }\n   }\n \n+  @Test\n+  public void testReturnsEmptyIfRequestIsInternal() {\n+    when(sessionProperties.getInternalRequest()).thenReturn(true);\n+    Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> remoteResults = augmenter.fetchAllRemoteResults();\n+    assertThat(remoteResults.getLeft().entrySet(), hasSize(0));\n+    assertThat(remoteResults.getRight(), hasSize(0));\n+  }\n+\n   @Test\n   public void testReturnsHostsThatHaveReturnedAnErroneousResponse() {\n     when(ksqlClient.makeKsqlRequest(any(), any(), any())).thenReturn(response);\n     when(response.isErroneous()).thenReturn(true);\n     try (MockedStatic<DiscoverRemoteHostsUtil> hdu = mockStatic(DiscoverRemoteHostsUtil.class)) {\n       hdu.when(() -> DiscoverRemoteHostsUtil.getRemoteHosts(any(), any())).thenReturn(hosts);\n \n-      augmenter.augmentWithRemote(localData, (localResult, remoteResults) -> {\n-        assertEquals( hosts, remoteResults.getRight());\n-        assertThat(remoteResults.getLeft(), is(empty()));\n-        return localResult;\n-      });\n+      Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> remoteResults = augmenter.fetchAllRemoteResults();\n+      assertEquals(hosts, remoteResults.getRight());\n+      assertThat(remoteResults.getLeft().entrySet(), hasSize(0));\n     }\n   }\n \n@@ -105,14 +111,14 @@ public void testReturnsRemoteResultsWhenEverythingIsFine() {\n     when(ksqlClient.makeKsqlRequest(any(), any(), any())).thenReturn(response);\n     when(response.isErroneous()).thenReturn(false);\n     when(response.getResponse()).thenReturn(ksqlEntityList);\n+    when(ksqlEntityList.get(anyInt())).thenReturn(mock(KsqlEntity.class));\n     try (MockedStatic<DiscoverRemoteHostsUtil> hdu = mockStatic(DiscoverRemoteHostsUtil.class)) {\n       hdu.when(() -> DiscoverRemoteHostsUtil.getRemoteHosts(any(), any())).thenReturn(hosts);\n \n-      augmenter.augmentWithRemote(localData, (localResult, remoteResults) -> {\n-        assertThat(remoteResults.getRight(), is(empty()));\n-        assertThat(remoteResults.getLeft(), hasSize(2));\n-        return localResult;\n-      });\n+      Pair<Map<HostInfo, KsqlEntity>, Set<HostInfo>> remoteResults = augmenter.fetchAllRemoteResults();\n+      assertThat(remoteResults.getRight(), is(empty()));\n+      assertEquals(remoteResults.getLeft().keySet(), hosts);\n+      assertThat(remoteResults.getLeft().entrySet(), hasSize(2));\n     }\n   }\n }\n\\ No newline at end of file",
    "previous_filename": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteDataAugmenterTest.java"
  },
  {
    "sha": "cb71ee243198d2df9611ae46ba5e2f41010cb698",
    "filename": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutorTest.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutorTest.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutorTest.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/RemoteSourceDescriptionExecutorTest.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -0,0 +1,86 @@\n+package io.confluent.ksql.rest.server.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Streams;\n+import io.confluent.ksql.rest.entity.SourceDescription;\n+import io.confluent.ksql.rest.entity.SourceDescriptionList;\n+import io.confluent.ksql.util.Pair;\n+import io.github.glytching.junit.extension.random.RandomBeansExtension;\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import junit.framework.TestCase;\n+import org.apache.kafka.streams.state.HostInfo;\n+import org.jeasy.random.EasyRandom;\n+import org.jeasy.random.EasyRandomParameters;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.jeasy.random.FieldPredicates.inClass;\n+import static org.jeasy.random.FieldPredicates.named;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(RandomBeansExtension.class)\n+public class RemoteSourceDescriptionExecutorTest extends TestCase {\n+  final EasyRandomParameters parameters = new EasyRandomParameters()\n+      .randomize(ImmutableMap.class, ImmutableMap::of)\n+      .excludeField(\n+          named(\"fields\")\n+              .and(inClass(SourceDescription.class))\n+      );\n+  final EasyRandom objectMother = new EasyRandom(parameters);\n+\n+\n+  @Mock\n+  RemoteHostExecutor augmenter = mock(RemoteHostExecutor.class);\n+\n+  List<HostInfo> hosts = objectMother\n+      .objects(HostInfo.class, 3)\n+      .collect(Collectors.toList());\n+\n+  List<SourceDescriptionList> descriptionLists = objectMother\n+      .objects(SourceDescriptionList.class, 3)\n+      .collect(Collectors.toList());\n+\n+  Map<HostInfo, SourceDescriptionList> response = Streams\n+      .zip(hosts.stream(), descriptionLists.stream(), AbstractMap.SimpleImmutableEntry::new)\n+      .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+  @Test\n+  void itShouldReturnRemoteSourceDescriptionsGroupedByName() {\n+    // Given\n+    when(augmenter.fetchAllRemoteResults()).thenReturn(new Pair(response, ImmutableSet.of()));\n+\n+    Multimap<String, RemoteSourceDescription> res = RemoteSourceDescriptionExecutor.fetchSourceDescriptions(augmenter);\n+\n+    Map<String, List<SourceDescription>> queryHostCounts = descriptionLists.stream()\n+        .flatMap((v) -> v.getSourceDescriptions().stream())\n+        .collect(Collectors.groupingBy(SourceDescription::getName));\n+\n+    assertThat(res.values(), everyItem(instanceOf(RemoteSourceDescription.class)));\n+    response.forEach((host, value) -> value.getSourceDescriptions().forEach((sd) -> {\n+      assertThat(res.get(sd.getName()), hasSize(queryHostCounts.get(sd.getName()).size()));\n+    }));\n+  }\n+\n+  @Test\n+  void itShouldReturnEmptyIfNoRemoteResults() {\n+    // Given\n+    when(augmenter.fetchAllRemoteResults()).thenReturn(new Pair(ImmutableMap.of(), response.keySet()));\n+\n+    Multimap<String, RemoteSourceDescription> res = RemoteSourceDescriptionExecutor.fetchSourceDescriptions(augmenter);\n+    response.forEach((key, value) -> value.getSourceDescriptions().forEach((sd) -> {\n+      assertThat(res.get(sd.getName()), hasSize(0));\n+    }));\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "55b60d878087bce7a30b97ec3cfb23099d9a8a33",
    "filename": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/SourceDescription.java",
    "status": "modified",
    "additions": 75,
    "deletions": 5,
    "changes": 80,
    "blob_url": "https://github.com/confluentinc/ksql/blob/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/SourceDescription.java",
    "raw_url": "https://github.com/confluentinc/ksql/raw/77f9c321db5f5cbbf441362376a1221caf42b0f8/ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/SourceDescription.java",
    "contents_url": "https://api.github.com/repos/confluentinc/ksql/contents/ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/SourceDescription.java?ref=77f9c321db5f5cbbf441362376a1221caf42b0f8",
    "patch": "@@ -17,16 +17,19 @@\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.metrics.TopicSensors;\n import io.confluent.ksql.metrics.TopicSensors.Stat;\n import io.confluent.ksql.model.WindowType;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n+import org.apache.kafka.streams.state.HostInfo;\n \n @JsonIgnoreProperties(ignoreUnknown = true)\n @JsonTypeName(\"description\")\n@@ -53,6 +56,10 @@\n   private final String statement;\n   private final List<QueryOffsetSummary> queryOffsetSummaries;\n   private final List<String> sourceConstraints;\n+  @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+  private final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> clusterStatistics;\n+  @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+  private final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> clusterErrorStats;\n \n   // CHECKSTYLE_RULES.OFF: ParameterNumberCheck\n   @JsonCreator\n@@ -76,7 +83,9 @@ public SourceDescription(\n       @JsonProperty(\"replication\") final int replication,\n       @JsonProperty(\"statement\") final String statement,\n       @JsonProperty(\"queryOffsetSummaries\") final List<QueryOffsetSummary> queryOffsetSummaries,\n-      @JsonProperty(\"sourceConstraints\") final List<String> sourceConstraints\n+      @JsonProperty(\"sourceConstraints\") final List<String> sourceConstraints,\n+      @JsonProperty(\"clusterStatistics\") final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> cStats,\n+      @JsonProperty(\"clusterErrorStats\") final ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> cErrors\n   ) {\n     // CHECKSTYLE_RULES.ON: ParameterNumberCheck\n     this.name = Objects.requireNonNull(name, \"name\");\n@@ -104,7 +113,60 @@ public SourceDescription(\n         Objects.requireNonNull(queryOffsetSummaries, \"queryOffsetSummaries\"));\n     this.sourceConstraints =\n         ImmutableList.copyOf(Objects.requireNonNull(sourceConstraints, \"sourceConstraints\"));\n+    this.clusterErrorStats = cErrors;\n+    this.clusterStatistics = cStats;\n+  }\n+\n+  // CHECKSTYLE_RULES.OFF: ParameterNumberCheck\n+  @SuppressWarnings(\"checkstyle:Indentation\")\n+  public SourceDescription(\n+      @JsonProperty(\"name\") final String name,\n+      @JsonProperty(\"windowType\") final Optional<WindowType> windowType,\n+      @JsonProperty(\"readQueries\") final List<RunningQuery> readQueries,\n+      @JsonProperty(\"writeQueries\") final List<RunningQuery> writeQueries,\n+      @JsonProperty(\"fields\") final List<FieldInfo> fields,\n+      @JsonProperty(\"type\") final String type,\n+      @JsonProperty(\"timestamp\") final String timestamp,\n+      @JsonProperty(\"statistics\") final String statistics,\n+      @JsonProperty(\"errorStats\") final String errorStats,\n+      @JsonProperty(\"statisticsMap\") final ImmutableMap<String, Stat> statisticsMap,\n+      @JsonProperty(\"errorStatsMap\") final ImmutableMap<String, Stat> errorStatsMap,\n+      @JsonProperty(\"extended\") final boolean extended,\n+      @JsonProperty(\"keyFormat\") final String keyFormat,\n+      @JsonProperty(\"valueFormat\") final String valueFormat,\n+      @JsonProperty(\"topic\") final String topic,\n+      @JsonProperty(\"partitions\") final int partitions,\n+      @JsonProperty(\"replication\") final int replication,\n+      @JsonProperty(\"statement\") final String statement,\n+      @JsonProperty(\"queryOffsetSummaries\") final List<QueryOffsetSummary> queryOffsetSummaries,\n+      @JsonProperty(\"sourceConstraints\") final List<String> sourceConstraints\n+  ) {\n+    this(\n+        name,\n+        windowType,\n+        readQueries,\n+        writeQueries,\n+        fields,\n+        type,\n+        timestamp,\n+        statistics,\n+        errorStats,\n+        statisticsMap,\n+        errorStatsMap,\n+        extended,\n+        keyFormat,\n+        valueFormat,\n+        topic,\n+        partitions,\n+        replication,\n+        statement,\n+        queryOffsetSummaries,\n+        sourceConstraints,\n+        ImmutableMap.of(),\n+        ImmutableMap.of()\n+    );\n   }\n+  // CHECKSTYLE_RULES.ON: ParameterNumberCheck\n \n   public String getStatement() {\n     return statement;\n@@ -165,17 +227,17 @@ public String getTimestamp() {\n   public String getStatistics() {\n     if (statistics.length() > 0) {\n       return \"The statistics field is deprecated and will be removed in a future version of ksql. \"\n-              + \"Please update your client to the latest version and use statisticsMap instead.\\n\"\n-              + statistics;\n+          + \"Please update your client to the latest version and use statisticsMap instead.\\n\"\n+          + statistics;\n     }\n     return \"\";\n   }\n \n   public String getErrorStats() {\n     if (errorStats.length() > 0) {\n       return \"The errorStats field is deprecated and will be removed in a future version of ksql. \"\n-              + \"Please update your client to the latest version and use errorStatsMap instead.\\n\"\n-              + errorStats + '\\n';\n+          + \"Please update your client to the latest version and use errorStatsMap instead.\\n\"\n+          + errorStats + '\\n';\n     }\n     return \"\";\n   }\n@@ -196,6 +258,14 @@ public String getErrorStats() {\n     return sourceConstraints;\n   }\n \n+  public ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> getClusterStatistics() {\n+    return clusterStatistics;\n+  }\n+\n+  public ImmutableMap<HostInfo, ImmutableMap<String, TopicSensors.Stat>> getClusterErrorStats() {\n+    return clusterErrorStats;\n+  }\n+\n   // CHECKSTYLE_RULES.OFF: CyclomaticComplexity\n   @Override\n   public boolean equals(final Object o) {"
  }
]
