[
  {
    "sha": "2206987fc974df08eeba5e94867ddd428440be5c",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/DraftV4LibraryWithElideFormatAttr.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/DraftV4LibraryWithElideFormatAttr.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/DraftV4LibraryWithElideFormatAttr.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/DraftV4LibraryWithElideFormatAttr.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -5,6 +5,7 @@\n  */\n package com.yahoo.elide.modelconfig;\n \n+import com.yahoo.elide.modelconfig.jsonformats.ElideArgumentNameFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.ElideCardinalityFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.ElideFieldNameFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.ElideFieldTypeFormatAttr;\n@@ -18,6 +19,7 @@\n import com.yahoo.elide.modelconfig.jsonformats.ElideTimeFieldTypeFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.JavaClassNameFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.JavaClassNameWithExtFormatAttr;\n+import com.yahoo.elide.modelconfig.jsonformats.ValidateArgsPropertiesKeyword;\n import com.yahoo.elide.modelconfig.jsonformats.ValidateDimPropertiesKeyword;\n import com.yahoo.elide.modelconfig.jsonformats.ValidateTimeDimPropertiesKeyword;\n import com.github.fge.jsonschema.library.DraftV4Library;\n@@ -36,6 +38,7 @@ public DraftV4LibraryWithElideFormatAttr() {\n         LibraryBuilder builder = DraftV4Library.get().thaw();\n \n         builder.addFormatAttribute(ElideFieldNameFormatAttr.FORMAT_NAME, new ElideFieldNameFormatAttr());\n+        builder.addFormatAttribute(ElideArgumentNameFormatAttr.FORMAT_NAME, new ElideArgumentNameFormatAttr());\n         builder.addFormatAttribute(ElideCardinalityFormatAttr.FORMAT_NAME, new ElideCardinalityFormatAttr());\n         builder.addFormatAttribute(ElideFieldTypeFormatAttr.FORMAT_NAME, new ElideFieldTypeFormatAttr());\n         builder.addFormatAttribute(ElideGrainTypeFormatAttr.FORMAT_NAME, new ElideGrainTypeFormatAttr());\n@@ -51,6 +54,7 @@ public DraftV4LibraryWithElideFormatAttr() {\n \n         builder.addKeyword(new ValidateDimPropertiesKeyword().getKeyword());\n         builder.addKeyword(new ValidateTimeDimPropertiesKeyword().getKeyword());\n+        builder.addKeyword(new ValidateArgsPropertiesKeyword().getKeyword());\n \n         library = builder.freeze();\n     }"
  },
  {
    "sha": "07269399f7e2fe81136c0fc323c762d9deaa7c91",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/MessageBundleWithElideMessages.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/MessageBundleWithElideMessages.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/MessageBundleWithElideMessages.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/MessageBundleWithElideMessages.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -5,6 +5,7 @@\n  */\n package com.yahoo.elide.modelconfig;\n \n+import com.yahoo.elide.modelconfig.jsonformats.ElideArgumentNameFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.ElideCardinalityFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.ElideFieldNameFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.ElideFieldTypeFormatAttr;\n@@ -18,6 +19,7 @@\n import com.yahoo.elide.modelconfig.jsonformats.ElideTimeFieldTypeFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.JavaClassNameFormatAttr;\n import com.yahoo.elide.modelconfig.jsonformats.JavaClassNameWithExtFormatAttr;\n+import com.yahoo.elide.modelconfig.jsonformats.ValidateArgsPropertiesValidator;\n import com.yahoo.elide.modelconfig.jsonformats.ValidateDimPropertiesValidator;\n import com.yahoo.elide.modelconfig.jsonformats.ValidateTimeDimPropertiesValidator;\n import com.github.fge.jsonschema.messages.JsonSchemaValidationBundle;\n@@ -40,13 +42,16 @@ public MessageBundleWithElideMessages() {\n         // For Format errors\n         msgSourceBuilder.put(ElideFieldNameFormatAttr.FORMAT_KEY, ElideFieldNameFormatAttr.FORMAT_MSG);\n         msgSourceBuilder.put(ElideFieldNameFormatAttr.NAME_KEY, ElideFieldNameFormatAttr.NAME_MSG);\n+        msgSourceBuilder.put(ElideArgumentNameFormatAttr.FORMAT_KEY, ElideArgumentNameFormatAttr.FORMAT_MSG);\n+        msgSourceBuilder.put(ElideArgumentNameFormatAttr.NAME_KEY, ElideArgumentNameFormatAttr.NAME_MSG);\n         msgSourceBuilder.put(ElideCardinalityFormatAttr.TYPE_KEY, ElideCardinalityFormatAttr.TYPE_MSG);\n         msgSourceBuilder.put(ElideFieldTypeFormatAttr.TYPE_KEY, ElideFieldTypeFormatAttr.TYPE_MSG);\n         msgSourceBuilder.put(ElideGrainTypeFormatAttr.TYPE_KEY, ElideGrainTypeFormatAttr.TYPE_MSG);\n         msgSourceBuilder.put(ElideJoinTypeFormatAttr.TYPE_KEY, ElideJoinTypeFormatAttr.TYPE_MSG);\n         msgSourceBuilder.put(ElideJoinKindFormatAttr.TYPE_KEY, ElideJoinKindFormatAttr.TYPE_MSG);\n         msgSourceBuilder.put(ElideTimeFieldTypeFormatAttr.TYPE_KEY, ElideTimeFieldTypeFormatAttr.TYPE_MSG);\n         msgSourceBuilder.put(ElideNameFormatAttr.FORMAT_KEY, ElideNameFormatAttr.FORMAT_MSG);\n+        msgSourceBuilder.put(ElideNameFormatAttr.NAME_KEY, ElideNameFormatAttr.NAME_MSG);\n         msgSourceBuilder.put(ElideRSQLFilterFormatAttr.FORMAT_KEY, ElideRSQLFilterFormatAttr.FORMAT_MSG);\n         msgSourceBuilder.put(JavaClassNameWithExtFormatAttr.FORMAT_KEY, JavaClassNameWithExtFormatAttr.FORMAT_MSG);\n         msgSourceBuilder.put(JavaClassNameFormatAttr.FORMAT_KEY, JavaClassNameFormatAttr.FORMAT_MSG);\n@@ -60,6 +65,8 @@ public MessageBundleWithElideMessages() {\n                         ValidateDimPropertiesValidator.ADDITIONAL_MSG);\n         msgSourceBuilder.put(ValidateTimeDimPropertiesValidator.ADDITIONAL_KEY,\n                         ValidateTimeDimPropertiesValidator.ADDITIONAL_MSG);\n+        msgSourceBuilder.put(ValidateArgsPropertiesValidator.ATMOST_ONE_KEY,\n+                        ValidateArgsPropertiesValidator.ATMOST_ONE_MSG);\n \n         this.msgBundle = MessageBundles.getBundle(JsonSchemaValidationBundle.class).thaw()\n                         .appendSource(msgSourceBuilder.build())"
  },
  {
    "sha": "dbd152558ca6dba49531ea4e47907ba42ff90757",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideArgumentNameFormatAttr.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideArgumentNameFormatAttr.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideArgumentNameFormatAttr.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideArgumentNameFormatAttr.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2021, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.modelconfig.jsonformats;\n+\n+import com.github.fge.jackson.NodeType;\n+import com.github.fge.jsonschema.core.exceptions.ProcessingException;\n+import com.github.fge.jsonschema.core.report.ProcessingReport;\n+import com.github.fge.jsonschema.format.AbstractFormatAttribute;\n+import com.github.fge.jsonschema.processors.data.FullData;\n+import com.github.fge.msgsimple.bundle.MessageBundle;\n+\n+/**\n+ * Format specifier for {@code elideArgumentName} format attribute.\n+ * <p>\n+ * This specifier will check if a string instance is a valid Elide Argument Name.\n+ * </p>\n+ */\n+public class ElideArgumentNameFormatAttr extends AbstractFormatAttribute {\n+\n+    public static final String FORMAT_NAME = \"elideArgumentName\";\n+    public static final String NAME_KEY = \"elideArgumentName.error.name\";\n+    public static final String NAME_MSG = \"Argument name [%s] is not allowed. Argument name cannot be 'grain'.\";\n+    public static final String FORMAT_KEY = \"elideArgumentName.error.format\";\n+    public static final String FORMAT_MSG = \"Argument name [%s] is not allowed. Name must start with an alphabet and\"\n+                    + \" can include alaphabets, numbers and '_' only.\";\n+\n+    public ElideArgumentNameFormatAttr() {\n+        super(FORMAT_NAME, NodeType.STRING);\n+    }\n+\n+    @Override\n+    public void validate(final ProcessingReport report, final MessageBundle bundle, final FullData data)\n+                    throws ProcessingException {\n+        final String input = data.getInstance().getNode().textValue();\n+\n+        if (!input.matches(ElideNameFormatAttr.NAME_FORMAT_REGEX)) {\n+            report.error(newMsg(data, bundle, FORMAT_KEY).putArgument(\"value\", input));\n+        }\n+\n+        if (input.equalsIgnoreCase(\"grain\")) {\n+            report.error(newMsg(data, bundle, NAME_KEY).putArgument(\"value\", input));\n+        }\n+    }\n+}"
  },
  {
    "sha": "72dcfd5dd96cf90458728dab00c1ab7f4cd3db77",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideFieldNameFormatAttr.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideFieldNameFormatAttr.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideFieldNameFormatAttr.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideFieldNameFormatAttr.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -23,7 +23,7 @@\n \n     public static final String FORMAT_NAME = \"elideFieldName\";\n     public static final String NAME_KEY = \"elideFieldName.error.name\";\n-    public static final String NAME_MSG = \"Field name [%s] is not allowed. Field name cannot be 'id'\";\n+    public static final String NAME_MSG = \"Field name [%s] is not allowed. Field name cannot be one of [id, column]\";\n     public static final String FORMAT_KEY = \"elideFieldName.error.format\";\n     public static final String FORMAT_MSG = \"Field name [%s] is not allowed. Field name must start with \"\n                     + \"lower case alphabet and can include alaphabets, numbers and '_' only.\";\n@@ -41,7 +41,7 @@ public void validate(final ProcessingReport report, final MessageBundle bundle,\n             report.error(newMsg(data, bundle, FORMAT_KEY).putArgument(\"value\", input));\n         }\n \n-        if (input.equalsIgnoreCase(\"id\")) {\n+        if (input.equalsIgnoreCase(\"id\") || input.equalsIgnoreCase(\"column\")) {\n             report.error(newMsg(data, bundle, NAME_KEY).putArgument(\"value\", input));\n         }\n     }"
  },
  {
    "sha": "244652fd11134c76d68c8df4d2c0e7c07497c703",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideNameFormatAttr.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideNameFormatAttr.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideNameFormatAttr.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ElideNameFormatAttr.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -19,9 +19,11 @@\n  * </p>\n  */\n public class ElideNameFormatAttr extends AbstractFormatAttribute {\n-    private static final String NAME_FORMAT_REGEX = \"^[A-Za-z][0-9A-Za-z_]*$\";\n+    public static final String NAME_FORMAT_REGEX = \"^[A-Za-z][0-9A-Za-z_]*$\";\n \n     public static final String FORMAT_NAME = \"elideName\";\n+    public static final String NAME_KEY = \"elideName.error.name\";\n+    public static final String NAME_MSG = \"Name [%s] is not allowed. Name cannot be 'table'\";\n     public static final String FORMAT_KEY = \"elideName.error.format\";\n     public static final String FORMAT_MSG =\n                     \"Name [%s] is not allowed. Name must start with an alphabet and can include \"\n@@ -39,5 +41,9 @@ public void validate(final ProcessingReport report, final MessageBundle bundle,\n         if (!input.matches(NAME_FORMAT_REGEX)) {\n             report.error(newMsg(data, bundle, FORMAT_KEY).putArgument(\"value\", input));\n         }\n+\n+        if (input.equalsIgnoreCase(\"table\")) {\n+            report.error(newMsg(data, bundle, NAME_KEY).putArgument(\"value\", input));\n+        }\n     }\n }"
  },
  {
    "sha": "d9bcf199552753f8a8e9714df8337b7ae8288748",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesKeyword.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesKeyword.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesKeyword.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesKeyword.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2021, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.modelconfig.jsonformats;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.fge.jackson.NodeType;\n+import com.github.fge.jackson.jsonpointer.JsonPointer;\n+import com.github.fge.jsonschema.core.exceptions.ProcessingException;\n+import com.github.fge.jsonschema.core.keyword.syntax.checkers.AbstractSyntaxChecker;\n+import com.github.fge.jsonschema.core.report.ProcessingReport;\n+import com.github.fge.jsonschema.core.tree.SchemaTree;\n+import com.github.fge.jsonschema.keyword.digest.AbstractDigester;\n+import com.github.fge.jsonschema.library.Keyword;\n+import com.github.fge.msgsimple.bundle.MessageBundle;\n+import lombok.Getter;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Creates custom keyword for {@code validateArgumentProperties}.\n+ */\n+public class ValidateArgsPropertiesKeyword {\n+\n+    @Getter\n+    private Keyword keyword;\n+\n+    public ValidateArgsPropertiesKeyword() {\n+        keyword = Keyword.newBuilder(ValidateArgsPropertiesValidator.KEYWORD)\n+                        .withSyntaxChecker(new ValidateArgsPropertiesSyntaxChecker())\n+                        .withDigester(new ValidateArgsPropertiesDigester())\n+                        .withValidatorClass(ValidateArgsPropertiesValidator.class)\n+                        .freeze();\n+    }\n+\n+    /**\n+     * Defines custom SyntaxChecker for {@code validateArgumentProperties}.\n+     */\n+    private class ValidateArgsPropertiesSyntaxChecker extends AbstractSyntaxChecker {\n+\n+        public ValidateArgsPropertiesSyntaxChecker() {\n+            super(ValidateArgsPropertiesValidator.KEYWORD, NodeType.BOOLEAN);\n+        }\n+\n+        @Override\n+        protected void checkValue(Collection<JsonPointer> pointers, MessageBundle bundle, ProcessingReport report,\n+                        SchemaTree tree) throws ProcessingException {\n+            // AbstractSyntaxChecker has already verified that value is of type Boolean\n+            // No additional Checks Required\n+        }\n+    }\n+\n+    /**\n+     * Defines custom Digester for {@code validateArgumentProperties}.\n+     */\n+    private class ValidateArgsPropertiesDigester extends AbstractDigester {\n+\n+        public ValidateArgsPropertiesDigester() {\n+            super(ValidateArgsPropertiesValidator.KEYWORD, NodeType.OBJECT);\n+        }\n+\n+        @Override\n+        public JsonNode digest(final JsonNode schema) {\n+            final ObjectNode node = FACTORY.objectNode();\n+            if (schema.get(keyword).asBoolean(true)) {\n+                node.put(keyword, true);\n+            } else {\n+                node.put(keyword, false);\n+            }\n+\n+            return node;\n+        }\n+    }\n+}"
  },
  {
    "sha": "98bbbc6750d1b1fec6c2db21c5b35a68f7ad4407",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesValidator.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesValidator.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesValidator.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/jsonformats/ValidateArgsPropertiesValidator.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2021, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.modelconfig.jsonformats;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.github.fge.jsonschema.core.exceptions.ProcessingException;\n+import com.github.fge.jsonschema.core.processing.Processor;\n+import com.github.fge.jsonschema.core.report.ProcessingReport;\n+import com.github.fge.jsonschema.keyword.validator.AbstractKeywordValidator;\n+import com.github.fge.jsonschema.processors.data.FullData;\n+import com.github.fge.msgsimple.bundle.MessageBundle;\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+\n+/**\n+ * Defines custom Keyword Validator for {@code validateArgumentProperties}.\n+ * <p>\n+ * This validator checks not both {@code tableSource} and {@code values} property is defined for any argument.\n+ * </p>\n+ */\n+public class ValidateArgsPropertiesValidator extends AbstractKeywordValidator {\n+\n+    public static final String KEYWORD = \"validateArgumentProperties\";\n+    public static final String ATMOST_ONE_KEY = \"validateArgumentProperties.error.atmostOne\";\n+    public static final String ATMOST_ONE_MSG =\n+                    \"tableSource and values cannot both be defined for an argument. Choose One or None.\";\n+\n+    private boolean validate;\n+\n+    public ValidateArgsPropertiesValidator(final JsonNode digest) {\n+        super(KEYWORD);\n+        validate = digest.get(keyword).booleanValue();\n+    }\n+\n+    @Override\n+    public void validate(Processor<FullData, FullData> processor, ProcessingReport report, MessageBundle bundle,\n+                    FullData data) throws ProcessingException {\n+\n+        if (validate) {\n+            JsonNode instance = data.getInstance().getNode();\n+            Set<String> fields = Sets.newHashSet(instance.fieldNames());\n+\n+            if (fields.contains(\"values\") && fields.contains(\"tableSource\")) {\n+                report.error(newMsg(data, bundle, ATMOST_ONE_KEY));\n+            }\n+\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return keyword;\n+    }\n+}"
  },
  {
    "sha": "e59114a234a3d748a4ba3aae36567d1f390e7bcc",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Argument.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Argument.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Argument.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Argument.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2021, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.modelconfig.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * Argument Model.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+    \"name\",\n+    \"description\",\n+    \"type\",\n+    \"values\",\n+    \"tableSource\",\n+    \"default\"\n+})\n+@Data\n+@EqualsAndHashCode()\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Builder\n+public class Argument implements Named {\n+\n+    @JsonProperty(\"name\")\n+    private String name;\n+\n+    @JsonProperty(\"description\")\n+    private String description;\n+\n+    @JsonProperty(\"type\")\n+    private Type type;\n+\n+    @JsonProperty(\"values\")\n+    @JsonDeserialize(as = LinkedHashSet.class)\n+    private Set<String> values = new LinkedHashSet<String>();\n+\n+    @JsonProperty(\"tableSource\")\n+    private String tableSource;\n+\n+    @JsonProperty(\"default\")\n+    private Object defaultValue;\n+\n+    /**\n+     * Returns description of the argument.\n+     * If null, returns the name\n+     * @return description\n+     */\n+    public String getDescription() {\n+        return (this.description == null ? getName() : this.description);\n+    }\n+}"
  },
  {
    "sha": "ea80e058de4d67d6da7ca514b3f15f18afcb1986",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Dimension.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Dimension.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Dimension.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Dimension.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -38,6 +38,7 @@\n     \"type\",\n     \"grains\",\n     \"tags\",\n+    \"arguments\",\n     \"values\",\n     \"tableSource\"\n })\n@@ -83,6 +84,10 @@\n     @JsonDeserialize(as = LinkedHashSet.class)\n     private Set<String> tags = new LinkedHashSet<String>();\n \n+    @JsonProperty(\"arguments\")\n+    @Singular\n+    private List<Argument> arguments = new ArrayList<Argument>();\n+\n     @JsonProperty(\"values\")\n     @JsonDeserialize(as = LinkedHashSet.class)\n     private Set<String> values = new LinkedHashSet<String>();"
  },
  {
    "sha": "115b5d9104bd2471d15e3493535bc730a0db71e5",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Measure.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Measure.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Measure.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Measure.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -14,8 +14,11 @@\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.NoArgsConstructor;\n+import lombok.Singular;\n \n+import java.util.ArrayList;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Set;\n \n /**\n@@ -32,7 +35,8 @@\n     \"definition\",\n     \"queryPlanResolver\",\n     \"type\",\n-    \"tags\"\n+    \"tags\",\n+    \"arguments\",\n })\n @Data\n @EqualsAndHashCode()\n@@ -72,6 +76,10 @@\n     @JsonDeserialize(as = LinkedHashSet.class)\n     private Set<String> tags = new LinkedHashSet<String>();\n \n+    @JsonProperty(\"arguments\")\n+    @Singular\n+    private List<Argument> arguments = new ArrayList<Argument>();\n+\n     /**\n      * Returns description of the measure.\n      * If null, returns the name."
  },
  {
    "sha": "5c37b7f9d9223ea0ccedeeee495b0ea070e311ee",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Table.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Table.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Table.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/model/Table.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -38,6 +38,7 @@\n     \"measures\",\n     \"dimensions\",\n     \"tags\",\n+    \"arguments\",\n     \"extend\",\n     \"sql\",\n     \"table\",\n@@ -100,6 +101,10 @@\n     @JsonDeserialize(as = LinkedHashSet.class)\n     private Set<String> tags = new LinkedHashSet<String>();\n \n+    @JsonProperty(\"arguments\")\n+    @Singular\n+    private List<Argument> arguments = new ArrayList<Argument>();\n+\n     @JsonProperty(\"extend\")\n     private String extend;\n "
  },
  {
    "sha": "5353af1d62d6869d7f7e168081f53f340bff5e76",
    "filename": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java",
    "status": "modified",
    "additions": 21,
    "deletions": 10,
    "changes": 31,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -19,6 +19,7 @@\n import com.yahoo.elide.modelconfig.DynamicConfigHelpers;\n import com.yahoo.elide.modelconfig.DynamicConfigSchemaValidator;\n import com.yahoo.elide.modelconfig.DynamicConfiguration;\n+import com.yahoo.elide.modelconfig.model.Argument;\n import com.yahoo.elide.modelconfig.model.DBConfig;\n import com.yahoo.elide.modelconfig.model.Dimension;\n import com.yahoo.elide.modelconfig.model.ElideDBConfig;\n@@ -171,8 +172,8 @@ public void readAndValidateConfigs() throws IOException {\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n         validateRequiredConfigsProvided();\n-        validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n-        validateNameUniqueness(this.elideTableConfig.getTables());\n+        validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs(), \"Multiple DB configs found with the same name: \");\n+        validateNameUniqueness(this.elideTableConfig.getTables(), \"Multiple Table configs found with the same name: \");\n         populateInheritance(this.elideTableConfig);\n         validateTableConfig();\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n@@ -492,19 +493,22 @@ private boolean validateTableConfig() {\n         for (Table table : elideTableConfig.getTables()) {\n \n             validateSql(table.getSql());\n+            validateArguments(table.getArguments());\n             Set<String> tableFields = new HashSet<>();\n \n             table.getDimensions().forEach(dim -> {\n                 validateFieldNameUniqueness(tableFields, dim.getName(), table.getName());\n                 validateSql(dim.getDefinition());\n                 validateTableSource(dim.getTableSource());\n                 extractChecksFromExpr(dim.getReadAccess(), extractedChecks, visitor);\n+                validateArguments(dim.getArguments());\n             });\n \n             table.getMeasures().forEach(measure -> {\n                 validateFieldNameUniqueness(tableFields, measure.getName(), table.getName());\n                 validateSql(measure.getDefinition());\n                 extractChecksFromExpr(measure.getReadAccess(), extractedChecks, visitor);\n+                validateArguments(measure.getArguments());\n             });\n \n             table.getJoins().forEach(join -> {\n@@ -519,6 +523,13 @@ private boolean validateTableConfig() {\n         return true;\n     }\n \n+    private void validateArguments(List<Argument> arguments) {\n+        validateNameUniqueness(new HashSet<>(arguments), \"Multiple Arguments found with the same name: \");\n+        arguments.forEach(arg -> {\n+            validateTableSource(arg.getTableSource());\n+        });\n+    }\n+\n     private void validateChecks(Set<String> checks) {\n \n         if (checks.isEmpty()) {\n@@ -580,8 +591,8 @@ private void validateTableSource(String tableSource) {\n             return;\n         }\n \n-        if (hasStaticModel(modelName, NO_VERSION)) {\n-            if (!hasStaticField(modelName, NO_VERSION, fieldName)) {\n+        if (isStaticModel(modelName, NO_VERSION)) {\n+            if (!isFieldInStaticModel(modelName, NO_VERSION, fieldName)) {\n                 throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Field : \" + fieldName\n                                 + \" is undefined for non-hjson model: \" + modelName);\n             }\n@@ -623,12 +634,12 @@ private static void validateJoinedTablesDBConnectionName(ElideTableConfig elideT\n     /**\n      * Validates table (or db connection) name is unique across all the dynamic table (or db connection) configs.\n      */\n-    private static void validateNameUniqueness(Set<? extends Named> configs) {\n+    private static void validateNameUniqueness(Set<? extends Named> configs, String errorMsg) {\n \n         Set<String> names = new HashSet<>();\n         configs.forEach(obj -> {\n             if (!names.add(obj.getName().toLowerCase(Locale.ENGLISH))) {\n-                throw new IllegalStateException(\"Duplicate!! Either Table or DB configs found with the same name.\");\n+                throw new IllegalStateException(errorMsg + obj.getName());\n             }\n         });\n     }\n@@ -651,7 +662,7 @@ private static void validateSql(String sqlDefinition) {\n     private void validateJoin(Join join) {\n         String joinModelName = join.getTo();\n \n-        if (!(elideTableConfig.hasTable(joinModelName) || hasStaticModel(joinModelName, NO_VERSION))) {\n+        if (!(elideTableConfig.hasTable(joinModelName) || isStaticModel(joinModelName, NO_VERSION))) {\n             throw new IllegalStateException(\n                             \"Model: \" + joinModelName + \" is neither included in dynamic models nor in static models\");\n         }\n@@ -675,7 +686,7 @@ private void validateJoin(Join join) {\n         }\n \n         references.forEach(reference -> {\n-            if (reference.indexOf('.') != -1) {\n+            if (!reference.startsWith(\"$$\") && reference.indexOf('.') != -1) {\n                 String joinField = reference.substring(0, reference.indexOf('.'));\n                 if (!joinField.equals(join.getName())) {\n                     throw new IllegalStateException(\"Join name must be used before '.' in join definition. Found '\"\n@@ -768,7 +779,7 @@ public static String formatClassPath(String filePath) {\n         return filePath;\n     }\n \n-    private boolean hasStaticField(String modelName, String version, String fieldName) {\n+    private boolean isFieldInStaticModel(String modelName, String version, String fieldName) {\n         Type<?> modelType = dictionary.getEntityClass(modelName, version);\n         if (modelType == null) {\n             return false;\n@@ -781,7 +792,7 @@ private boolean hasStaticField(String modelName, String version, String fieldNam\n         }\n     }\n \n-    private boolean hasStaticModel(String modelName, String version) {\n+    private boolean isStaticModel(String modelName, String version) {\n         Type<?> modelType = dictionary.getEntityClass(modelName, version);\n         return modelType != null;\n     }"
  },
  {
    "sha": "e4b377dc7904ba2fcc16fc2ace685cfa8235b5e1",
    "filename": "elide-model-config/src/main/resources/elideTableSchema.json",
    "status": "modified",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/resources/elideTableSchema.json",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/main/resources/elideTableSchema.json",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/main/resources/elideTableSchema.json?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -1,6 +1,59 @@\n {\n     \"$schema\": \"https://json-schema.org/draft-04/schema#\",\n     \"definitions\": {\n+        \"functionArgument\" : {\n+            \"title\" : \"Arguments\",\n+            \"description\" : \"Arguments are supported for table, measures and dimensions.\",\n+            \"type\" : \"object\",\n+            \"properties\": {\n+                \"name\": {\n+                    \"title\": \"Argument name\",\n+                    \"description\": \"Name must start with an alphabet and can include alaphabets, numbers and '_' only.\",\n+                    \"type\": \"string\",\n+                    \"format\": \"elideArgumentName\"\n+                },\n+                \"description\": {\n+                    \"title\": \"Argument description\",\n+                    \"description\": \"A long description for this Argument.\",\n+                    \"type\": \"string\"\n+                },\n+                \"type\": {\n+                    \"title\": \"Argument type\",\n+                    \"description\": \"Must be one of Integer, Decimal, Money, Text, Coordinate, Boolean\",\n+                    \"type\": \"string\",\n+                    \"format\": \"elideFieldType\"\n+                },\n+                \"values\": {\n+                    \"title\": \"Argument values\",\n+                    \"description\": \"An array of valid string values for this Argument\",\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"tableSource\": {\n+                    \"title\": \"Table stores argument values\",\n+                    \"description\": \"Table and column name where to find the values : tableName.columnName\",\n+                    \"type\": \"string\"\n+                },\n+                \"default\": {\n+                    \"title\": \"Default argument value\",\n+                    \"description\": \"Default value for this argument.\",\n+                    \"type\": [\n+                        \"string\",\n+                        \"number\",\n+                        \"boolean\"\n+                    ]\n+                }\n+            },\n+            \"required\": [\n+                \"name\",\n+                \"type\"\n+            ],\n+            \"validateArgumentProperties\": true,\n+            \"additionalProperties\": false\n+        },\n         \"join\": {\n             \"title\": \"Join\",\n             \"description\": \"Joins describe the SQL expression necessary to join two physical tables. Joins can be used when defining dimension columns that reference other tables.\",\n@@ -105,6 +158,14 @@\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n+                },\n+                \"arguments\": {\n+                    \"title\": \"Measure arguments\",\n+                    \"description\": \"An array of supported arguments for measure\",\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"$ref\": \"#/definitions/functionArgument\"\n+                    }\n                 }\n             },\n             \"required\": [\n@@ -171,6 +232,14 @@\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n+                },\n+                \"arguments\": {\n+                    \"title\": \"Dimension arguments\",\n+                    \"description\": \"An array of supported arguments for dimensions\",\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"$ref\": \"#/definitions/functionArgument\"\n+                    }\n                 }\n             }\n         },\n@@ -366,6 +435,14 @@\n                         \"items\": {\n                             \"type\": \"string\"\n                         }\n+                    },\n+                    \"arguments\": {\n+                        \"title\": \"Table arguments\",\n+                        \"description\": \"An array of supported arguments for tables.\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/definitions/functionArgument\"\n+                        }\n                     }\n                 },\n                 \"oneOf\": ["
  },
  {
    "sha": "594898a35f52b54c4c36f71e40bba17328d50b12",
    "filename": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/DynamicConfigSchemaValidatorTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/java/com/yahoo/elide/modelconfig/DynamicConfigSchemaValidatorTest.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/java/com/yahoo/elide/modelconfig/DynamicConfigSchemaValidatorTest.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/test/java/com/yahoo/elide/modelconfig/DynamicConfigSchemaValidatorTest.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -62,7 +62,8 @@ public void testInvalidVariableSchema() throws Exception {\n     @ParameterizedTest\n     @ValueSource(strings = {\n             \"/validator/valid/models/tables/player_stats.hjson\",\n-            \"/validator/valid/models/tables/player_stats_extends.hjson\"})\n+            \"/validator/valid/models/tables/player_stats_extends.hjson\",\n+            \"/validator/valid/models/tables/ad_performance.hjson\"})\n     public void testValidTableSchema(String resource) throws Exception {\n         String jsonConfig = loadHjsonFromClassPath(resource);\n         String fileName = getFileName(resource);\n@@ -96,16 +97,22 @@ public void testInvalidTableSchemaMultipleErrors(String resource) throws Excepti\n                         + \"[ERROR]\\n\"\n                         + \"object instance has properties which are not allowed by the schema: [\\\"name\\\"]\\n\"\n                         + \"[ERROR]\\n\"\n+                        + \"Instance[/tables/0/arguments/0/type] failed to validate against schema[/definitions/functionArgument/properties/type]. Field type [Number] is not allowed. Supported value is one of [Integer, Decimal, Money, Text, Coordinate, Boolean].\\n\"\n+                        + \"[ERROR]\\n\"\n+                        + \"Instance[/tables/0/arguments/1/name] failed to validate against schema[/definitions/functionArgument/properties/name]. Argument name [Grain] is not allowed. Argument name cannot be 'grain'.\\n\"\n+                        + \"[ERROR]\\n\"\n+                        + \"Instance[/tables/0/arguments/2] failed to validate against schema[/definitions/functionArgument]. tableSource and values cannot both be defined for an argument. Choose One or None.\\n\"\n+                        + \"[ERROR]\\n\"\n                         + \"Instance[/tables/0/cardinality] failed to validate against schema[/properties/tables/items/properties/cardinality]. Cardinality type [Extra Large] is not allowed. Supported value is one of [Tiny, Small, Medium, Large, Huge].\\n\"\n                         + \"[ERROR]\\n\"\n                         + \"Instance[/tables/0/dimensions/0] failed to validate against schema[/properties/tables/items/properties/dimensions/items]. instance failed to match exactly one schema (matched 0 out of 2)\\n\"\n                         + \"    Instance[/tables/0/dimensions/0] failed to validate against schema[/definitions/dimension]. instance failed to match all required schemas (matched only 0 out of 2)\\n\"\n                         + \"        Instance[/tables/0/dimensions/0/cardinality] failed to validate against schema[/definitions/dimensionRef/properties/cardinality]. Cardinality type [Extra small] is not allowed. Supported value is one of [Tiny, Small, Medium, Large, Huge].\\n\"\n-                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be 'id'\\n\"\n+                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be one of [id, column]\\n\"\n                         + \"        Instance[/tables/0/dimensions/0/type] failed to validate against schema[/definitions/dimension/allOf/1/properties/type]. Field type [Float] is not allowed. Supported value is one of [Integer, Decimal, Money, Text, Coordinate, Boolean].\\n\"\n                         + \"    Instance[/tables/0/dimensions/0] failed to validate against schema[/definitions/timeDimension]. instance failed to match all required schemas (matched only 0 out of 2)\\n\"\n                         + \"        Instance[/tables/0/dimensions/0/cardinality] failed to validate against schema[/definitions/dimensionRef/properties/cardinality]. Cardinality type [Extra small] is not allowed. Supported value is one of [Tiny, Small, Medium, Large, Huge].\\n\"\n-                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be 'id'\\n\"\n+                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be one of [id, column]\\n\"\n                         + \"        Instance[/tables/0/dimensions/0/type] failed to validate against schema[/definitions/timeDimension/allOf/1/properties/type]. Field type [Float] is not allowed. Field type must be [Time] for any time dimension.\\n\"\n                         + \"    Instance[/tables/0/dimensions/0] failed to validate against schema[/definitions/timeDimension]. Properties: [tableSource] are not allowed for time dimensions.\\n\"\n                         + \"[ERROR]\\n\""
  },
  {
    "sha": "d53ebf3360b546f67f0ee2b57035654a00cca8f8",
    "filename": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -262,9 +262,9 @@ public void testBadDimName() throws Exception {\n                         + \"[ERROR]\\n\"\n                         + \"Instance[/tables/0/dimensions/0] failed to validate against schema[/properties/tables/items/properties/dimensions/items]. instance failed to match exactly one schema (matched 0 out of 2)\\n\"\n                         + \"    Instance[/tables/0/dimensions/0] failed to validate against schema[/definitions/dimension]. instance failed to match all required schemas (matched only 1 out of 2)\\n\"\n-                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be 'id'\\n\"\n+                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be one of [id, column]\\n\"\n                         + \"    Instance[/tables/0/dimensions/0] failed to validate against schema[/definitions/timeDimension]. instance failed to match all required schemas (matched only 0 out of 2)\\n\"\n-                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be 'id'\\n\"\n+                        + \"        Instance[/tables/0/dimensions/0/name] failed to validate against schema[/definitions/dimensionRef/properties/name]. Field name [id] is not allowed. Field name cannot be one of [id, column]\\n\"\n                         + \"        Instance[/tables/0/dimensions/0/type] failed to validate against schema[/definitions/timeDimension/allOf/1/properties/type]. Field type [Text] is not allowed. Field type must be [Time] for any time dimension.\\n\"\n                         + \"[ERROR]\\n\"\n                         + \"Instance[/tables/0/dimensions/1] failed to validate against schema[/properties/tables/items/properties/dimensions/items]. instance failed to match exactly one schema (matched 0 out of 2)\\n\"\n@@ -349,7 +349,7 @@ public void testDuplicateDBConfigName() throws Exception {\n             assertEquals(2, exitStatus);\n         });\n \n-        assertEquals(\"Duplicate!! Either Table or DB configs found with the same name.\\n\", error);\n+        assertEquals(\"Multiple DB configs found with the same name: OracleConnection\\n\", error);\n     }\n \n     @Test"
  },
  {
    "sha": "b2271a798cdc6f2d048efea75ea3e05b57d306fd",
    "filename": "elide-model-config/src/test/resources/validator/invalid_schema/table_schema_with_multiple_errors.hjson",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/resources/validator/invalid_schema/table_schema_with_multiple_errors.hjson",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/resources/validator/invalid_schema/table_schema_with_multiple_errors.hjson",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/test/resources/validator/invalid_schema/table_schema_with_multiple_errors.hjson?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -10,6 +10,27 @@\n       // unsupported: cardinality value\n       cardinality: Extra Large\n       filterTemplate: countryIsoCode={{code}};startTime=={{start}}\n+      arguments:\n+      [\n+        {\n+          name: PI\n+          // unsupported: argument type\n+          type: Number\n+        }\n+        {\n+          // unsupported: grain is not allowed\n+          name: Grain\n+          type: Boolean\n+        }\n+        {\n+          name: aggregation\n+          description: Aggregation\n+          type : TEXT\n+          values: ['SUM', 'MIN', 'MAX']\n+          tableSource: abc.def\n+          default: SUM\n+        }\n+      ]\n       measures:\n       [\n         {"
  },
  {
    "sha": "4fb70064d4977145735585b61ed944aa95a85848",
    "filename": "elide-model-config/src/test/resources/validator/valid/models/tables/ad_performance.hjson",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/yahoo/elide/blob/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/resources/validator/valid/models/tables/ad_performance.hjson",
    "raw_url": "https://github.com/yahoo/elide/raw/54739a3f00b933ac2402e4b5100d298522b6e03a/elide-model-config/src/test/resources/validator/valid/models/tables/ad_performance.hjson",
    "contents_url": "https://api.github.com/repos/yahoo/elide/contents/elide-model-config/src/test/resources/validator/valid/models/tables/ad_performance.hjson?ref=54739a3f00b933ac2402e4b5100d298522b6e03a",
    "patch": "@@ -0,0 +1,106 @@\n+{\n+  tables:\n+  [\n+    {\n+      name: revenueFact\n+      table: revenue_fact\n+      joins:\n+      [\n+        {\n+          name: rates\n+          to: currencyRates\n+          kind: toOne\n+          type: left\n+          definition: \"{{rates.$id}} = {{$$column.args.currency}} AND {{rates.$date}} = {{eventTime}}\"\n+        }\n+      ]\n+      measures:\n+      [\n+        {\n+          name: impressions\n+          type: INTEGER\n+          definition: \"{{$$column.args.aggregation}}({{$impressions}})\"\n+          arguments:\n+          [\n+            {\n+              name: aggregation\n+              type: TEXT\n+              values:\n+              [\n+                SUM\n+                MIN\n+                MAX\n+              ]\n+              default: SUM\n+            }\n+          ]\n+        }\n+        {\n+          name: impressionsPerUSD\n+          type: INTEGER\n+          definition: \"{{sql table='revenueFact' column='impressions[aggregation:SUM]'}} / {{sql table='revenueFact' column='revenue[currency:USD][format:%240.00]'}}\"\n+        }\n+        {\n+          name: revenue\n+          type: MONEY\n+          definition: SUM({{$revenue}}) * {{rates.conversionRate}}\n+          arguments:\n+          [\n+            {\n+              name: currency\n+              type: TEXT\n+              tableSource: currencyRates.currencyCode\n+            }\n+            {\n+              name: format\n+              type: TEXT\n+              default: $0.00\n+            }\n+          ]\n+        }\n+      ]\n+      dimensions:\n+      [\n+        {\n+          name: campaignId\n+          type: INTEGER\n+          definition: \"{{$campaignId}}\"\n+        }\n+        {\n+          name: eventTime\n+          type: TIME\n+          definition: \"{{$date}}\"\n+          grains:\n+          [\n+            {\n+              type: MONTH\n+              sql: PARSEDATETIME(FORMATDATETIME({{}}, 'yyyy-MM'), 'yyyy-MM')\n+            }\n+            {\n+              type: DAY\n+              sql: PARSEDATETIME(FORMATDATETIME({{}}, 'yyyy-MM-dd'), 'yyyy-MM-dd')\n+            }\n+          ]\n+        }\n+      ]\n+    }\n+    {\n+      name: currencyRates\n+      table: currency_rates\n+      cardinality: small\n+      dimensions:\n+      [\n+        {\n+          name: currencyCode\n+          type: TEXT\n+          definition: \"{{$id}}\"\n+        }\n+        {\n+          name: conversionRate\n+          type: DECIMAL\n+          definition: \"{{$conversion_rate}}\"\n+        }\n+      ]\n+    }\n+  ]\n+}"
  }
]
