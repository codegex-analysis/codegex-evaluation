[
  {
    "sha": "7af2164013230b42137d3586e497d1ea95a6f33b",
    "filename": "rsocket-router/build.gradle",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/build.gradle",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/build.gradle",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/build.gradle?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+plugins {\n+    id 'java-library'\n+    id 'maven-publish'\n+    id 'com.jfrog.artifactory'\n+    id 'com.jfrog.bintray'\n+}\n+\n+dependencies {\n+    api project(':rsocket-core')\n+\n+    implementation 'org.slf4j:slf4j-api'\n+\n+    testImplementation project(':rsocket-test')\n+    testImplementation 'org.junit.jupiter:junit-jupiter-api'\n+    testImplementation 'org.junit.jupiter:junit-jupiter-params'\n+    testImplementation 'org.mockito:mockito-core'\n+    testImplementation 'org.assertj:assertj-core'\n+    testImplementation 'io.projectreactor:reactor-test'\n+\n+    // TODO: Remove after JUnit5 migration\n+    testCompileOnly 'junit:junit'\n+    testImplementation 'org.hamcrest:hamcrest-library'\n+    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'\n+    testRuntimeOnly 'ch.qos.logback:logback-classic'\n+}\n+\n+description = 'Standard Router API for RSocket'"
  },
  {
    "sha": "76261d6907bbd7fc97a704e6aedc304ff0240a71",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/CompositeMetadataRouteCodec.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/CompositeMetadataRouteCodec.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/CompositeMetadataRouteCodec.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/CompositeMetadataRouteCodec.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.rsocket.frame.FrameType;\n+import io.rsocket.metadata.CompositeMetadata;\n+import io.rsocket.metadata.CompositeMetadata.Entry;\n+import io.rsocket.metadata.CompositeMetadata.WellKnownMimeTypeEntry;\n+import io.rsocket.metadata.RoutingMetadata;\n+import io.rsocket.metadata.WellKnownMimeType;\n+import reactor.util.annotation.Nullable;\n+\n+public class CompositeMetadataRouteCodec implements RouteCodec {\n+\n+  @Override\n+  @Nullable\n+  public Route decode(ByteBuf metadataByteBuf, FrameType requestType) {\n+    final CompositeMetadata compositeMetadata = new CompositeMetadata(metadataByteBuf, false);\n+\n+    String route = null;\n+    String mimeType = null;\n+\n+    for (Entry compositeMetadatum : compositeMetadata) {\n+      if (compositeMetadatum instanceof WellKnownMimeTypeEntry) {\n+        final WellKnownMimeTypeEntry wellKnownMimeTypeEntry =\n+            (WellKnownMimeTypeEntry) compositeMetadatum;\n+        final WellKnownMimeType type = wellKnownMimeTypeEntry.getType();\n+\n+        if (type == WellKnownMimeType.MESSAGE_RSOCKET_ROUTING) {\n+          final RoutingMetadata routingMetadata =\n+              new RoutingMetadata(compositeMetadatum.getContent());\n+          for (String routeEntry : routingMetadata) {\n+            route = routeEntry;\n+            break;\n+          }\n+        } else if (type == WellKnownMimeType.MESSAGE_RSOCKET_MIMETYPE) {\n+          // FIXME: once codecs are available\n+          // mimeType = compositeMetadatum\n+        }\n+      }\n+    }\n+\n+    if (route != null) {\n+      return new Route(requestType, route, mimeType);\n+    }\n+\n+    return null;\n+  }\n+}"
  },
  {
    "sha": "a1a1199eeadfe0d3615e44be574b3f449906a083",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/HandlerFunction.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/HandlerFunction.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/HandlerFunction.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/HandlerFunction.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import io.rsocket.Payload;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.util.annotation.Nullable;\n+\n+public interface HandlerFunction {\n+\n+  Route route();\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  default Publisher handle(Payload payload) {\n+    return handle(payload, null);\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  Publisher handle(Payload firstPayload, @Nullable Flux<Payload> payloads);\n+}"
  },
  {
    "sha": "cc7dcbf7c12c2f5c02123625f7d0733d99158897",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/ImmutableRoutingRSocket.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/ImmutableRoutingRSocket.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/ImmutableRoutingRSocket.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/ImmutableRoutingRSocket.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+class ImmutableRoutingRSocket extends RoutingRSocket {\n+\n+  private final Map<Route, HandlerFunction> mapping;\n+\n+  ImmutableRoutingRSocket(Map<Route, HandlerFunction> mapping, RouteCodec routeCodec) {\n+    super(routeCodec);\n+    this.mapping = mapping;\n+  }\n+\n+  @Override\n+  protected HandlerFunction handlerFor(Route route) {\n+    return mapping.get(route);\n+  }\n+\n+  static final class ImmutableRouterBuilder\n+      implements RoutingRSocket.Builder<ImmutableRouterBuilder> {\n+\n+    final HashMap<Route, HandlerFunction> mapping = new HashMap<>();\n+    final RouteCodec routeCodec;\n+\n+    ImmutableRouterBuilder(RouteCodec routeCodec) {\n+      this.routeCodec = routeCodec;\n+    }\n+\n+    @Override\n+    public ImmutableRouterBuilder addHandler(HandlerFunction handler) {\n+      this.mapping.put(handler.route(), handler);\n+\n+      return this;\n+    }\n+\n+    @Override\n+    public RoutingRSocket build() {\n+      return new ImmutableRoutingRSocket(this.mapping, routeCodec);\n+    }\n+  }\n+}"
  },
  {
    "sha": "2f9e77f7366af033c077a7cbf3904f4d10d6da1d",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/Route.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/Route.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/Route.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/Route.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import io.rsocket.frame.FrameType;\n+import reactor.util.annotation.Nullable;\n+\n+public final class Route {\n+\n+  final String route;\n+  final String mimeType;\n+  final FrameType requestType;\n+\n+  public Route(FrameType requestType, String route) {\n+    this(requestType, route, null);\n+  }\n+\n+  public Route(FrameType requestType, String route, @Nullable String mimeType) {\n+    this.route = route;\n+    this.mimeType = mimeType;\n+    this.requestType = requestType;\n+  }\n+\n+  public String route() {\n+    return this.route;\n+  }\n+\n+  @Nullable\n+  public String mimeType() {\n+    return this.mimeType;\n+  }\n+\n+  public FrameType requestType() {\n+    return requestType;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    Route route1 = (Route) o;\n+\n+    if (!route.equals(route1.route)) {\n+      return false;\n+    }\n+    if (mimeType != null ? !mimeType.equals(route1.mimeType) : route1.mimeType != null) {\n+      return false;\n+    }\n+    return requestType == route1.requestType;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = route.hashCode();\n+    result = 31 * result + (mimeType != null ? mimeType.hashCode() : 0);\n+    result = 31 * result + requestType.hashCode();\n+    return result;\n+  }\n+}"
  },
  {
    "sha": "ad43bcbfb9b257181b4dfc23ae67f9e43418dfde",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/RouteCodec.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/RouteCodec.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/RouteCodec.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/RouteCodec.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.rsocket.frame.FrameType;\n+import reactor.util.annotation.Nullable;\n+\n+public interface RouteCodec {\n+\n+  @Nullable\n+  Route decode(ByteBuf metadataByteBuf, FrameType requestType);\n+}"
  },
  {
    "sha": "b716acb1bf7d3715ee00ae25d89d364f013b91ac",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/Router.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/Router.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/Router.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/Router.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import io.rsocket.Payload;\n+import io.rsocket.frame.FrameType;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.util.annotation.Nullable;\n+\n+public final class Router {\n+\n+  public static RequestSpec route(String route) {\n+    return route(route, null);\n+  }\n+\n+  public static RequestSpec route(String route, @Nullable String mimeType) {\n+    return new RequestSpec(route, mimeType);\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  static final class RequestSpec {\n+    final String route;\n+    final String mimeType;\n+\n+    RequestSpec(String route, @Nullable String mimeType) {\n+      this.route = route;\n+      this.mimeType = mimeType;\n+    }\n+\n+    public HandlerFunction fireAndForget(Function<Payload, Mono<Void>> handler) {\n+      final Route route = new Route(FrameType.REQUEST_FNF, this.route, mimeType);\n+      return new HandlerFunction() {\n+        @Override\n+        public Route route() {\n+          return route;\n+        }\n+\n+        @Override\n+        public Publisher handle(Payload firstPayload, Flux<Payload> payloads) {\n+          return handler.apply(firstPayload);\n+        }\n+      };\n+    }\n+\n+    public HandlerFunction fireAndForget(Consumer<Payload> handler) {\n+      final Route route = new Route(FrameType.REQUEST_FNF, this.route, this.mimeType);\n+      return new HandlerFunction() {\n+        @Override\n+        public Route route() {\n+          return route;\n+        }\n+\n+        @Override\n+        public Publisher handle(Payload firstPayload, Flux<Payload> payloads) {\n+          handler.accept(firstPayload);\n+          return Mono.empty();\n+        }\n+      };\n+    }\n+\n+    public HandlerFunction requestResponse(Function<Payload, Mono<Payload>> handler) {\n+      final Route route = new Route(FrameType.REQUEST_RESPONSE, this.route, this.mimeType);\n+      return new HandlerFunction() {\n+        @Override\n+        public Route route() {\n+          return route;\n+        }\n+\n+        @Override\n+        public Publisher handle(Payload firstPayload, Flux<Payload> payloads) {\n+          return handler.apply(firstPayload);\n+        }\n+      };\n+    }\n+\n+    public HandlerFunction requestStream(Function<Payload, Flux<Payload>> handler) {\n+      final Route route = new Route(FrameType.REQUEST_STREAM, this.route, this.mimeType);\n+      return new HandlerFunction() {\n+        @Override\n+        public Route route() {\n+          return route;\n+        }\n+\n+        @Override\n+        public Publisher handle(Payload firstPayload, Flux<Payload> payloads) {\n+          return handler.apply(firstPayload);\n+        }\n+      };\n+    }\n+\n+    public HandlerFunction requestChannel(Function<Flux<Payload>, Flux<Payload>> handler) {\n+      final Route route = new Route(FrameType.REQUEST_CHANNEL, this.route, this.mimeType);\n+      return new HandlerFunction() {\n+        @Override\n+        public Route route() {\n+          return route;\n+        }\n+\n+        @Override\n+        public Publisher handle(Payload firstPayload, Flux<Payload> payloads) {\n+          return handler.apply(payloads);\n+        }\n+      };\n+    }\n+\n+    public HandlerFunction requestChannel(\n+        BiFunction<Payload, Flux<Payload>, Flux<Payload>> handler) {\n+      final Route route = new Route(FrameType.REQUEST_CHANNEL, this.route, this.mimeType);\n+      return new HandlerFunction() {\n+        @Override\n+        public Route route() {\n+          return route;\n+        }\n+\n+        @Override\n+        public Publisher handle(Payload firstPayload, Flux<Payload> payloads) {\n+          return handler.apply(firstPayload, payloads);\n+        }\n+      };\n+    }\n+  }\n+}"
  },
  {
    "sha": "7fb2fe320b19b49699c0923ce9b7b879e8f801f9",
    "filename": "rsocket-router/src/main/java/io/rsocket/router/RoutingRSocket.java",
    "status": "added",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/RoutingRSocket.java",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/rsocket-router/src/main/java/io/rsocket/router/RoutingRSocket.java",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/rsocket-router/src/main/java/io/rsocket/router/RoutingRSocket.java?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2015-Present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.rsocket.router;\n+\n+import io.rsocket.Payload;\n+import io.rsocket.RSocket;\n+import io.rsocket.frame.FrameType;\n+import io.rsocket.router.ImmutableRoutingRSocket.ImmutableRouterBuilder;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.util.annotation.Nullable;\n+\n+public abstract class RoutingRSocket implements RSocket {\n+\n+  final RouteCodec routeCodec;\n+\n+  RoutingRSocket(RouteCodec routeCodec) {\n+    this.routeCodec = routeCodec;\n+  }\n+\n+  @Nullable\n+  protected abstract HandlerFunction handlerFor(Route route);\n+\n+  @Override\n+  @SuppressWarnings({\"unchecked\"})\n+  public Mono<Void> fireAndForget(Payload payload) {\n+    try {\n+      final Route route = this.routeCodec.decode(payload.sliceMetadata(), FrameType.REQUEST_FNF);\n+\n+      if (route != null) {\n+        final HandlerFunction handler = handlerFor(route);\n+\n+        if (handler != null) {\n+          return (Mono<Void>) handler.handle(payload);\n+        }\n+      }\n+\n+      return RSocket.super.fireAndForget(payload);\n+    } catch (Throwable t) {\n+      return Mono.error(t);\n+    }\n+  }\n+\n+  @Override\n+  @SuppressWarnings({\"unchecked\"})\n+  public Mono<Payload> requestResponse(Payload payload) {\n+    try {\n+      final Route route =\n+          this.routeCodec.decode(payload.sliceMetadata(), FrameType.REQUEST_RESPONSE);\n+\n+      if (route != null) {\n+        final HandlerFunction handler = handlerFor(route);\n+\n+        if (handler != null) {\n+          return (Mono<Payload>) handler.handle(payload);\n+        }\n+      }\n+\n+      return RSocket.super.requestResponse(payload);\n+    } catch (Throwable t) {\n+      return Mono.error(t);\n+    }\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public Flux<Payload> requestStream(Payload payload) {\n+    try {\n+      final Route route = this.routeCodec.decode(payload.sliceMetadata(), FrameType.REQUEST_STREAM);\n+\n+      if (route != null) {\n+        final HandlerFunction handler = handlerFor(route);\n+\n+        if (handler != null) {\n+          return (Flux<Payload>) handler.handle(payload);\n+        }\n+      }\n+\n+      return RSocket.super.requestStream(payload);\n+    } catch (Throwable t) {\n+      return Flux.error(t);\n+    }\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public Flux<Payload> requestChannel(Publisher<Payload> source) {\n+    return Flux.from(source)\n+        .switchOnFirst(\n+            (firstSignal, payloads) -> {\n+              final Payload firstPayload = firstSignal.get();\n+\n+              if (firstPayload != null) {\n+                try {\n+                  final Route route =\n+                      this.routeCodec.decode(\n+                          firstPayload.sliceMetadata(), FrameType.REQUEST_CHANNEL);\n+                  if (route != null) {\n+                    final HandlerFunction handler = handlerFor(route);\n+\n+                    if (handler != null) {\n+                      return (Flux<Payload>) handler.handle(firstPayload, payloads);\n+                    }\n+                  }\n+                } catch (Throwable t) {\n+                  firstPayload.release();\n+                  return Flux.error(t);\n+                }\n+              }\n+\n+              return RSocket.super.requestChannel(payloads);\n+            },\n+            false);\n+  }\n+\n+  public static Builder<?> immutable(RouteCodec routeCodec) {\n+    return new ImmutableRouterBuilder(routeCodec);\n+  }\n+\n+  public interface Builder<T extends Builder<T>> {\n+\n+    default T addFireAndForget(String route, Function<Payload, Mono<Void>> handler) {\n+      return addHandler(Router.route(route).fireAndForget(handler));\n+    }\n+\n+    default T addFireAndForget(String route, Consumer<Payload> handler) {\n+      return addHandler(Router.route(route).fireAndForget(handler));\n+    }\n+\n+    default T addRequestResponse(String route, Function<Payload, Mono<Payload>> handler) {\n+      return addHandler(Router.route(route).requestResponse(handler));\n+    }\n+\n+    default T addRequestStream(String route, Function<Payload, Flux<Payload>> handler) {\n+      return addHandler(Router.route(route).requestStream(handler));\n+    }\n+\n+    default T addRequestChannel(String route, Function<Flux<Payload>, Flux<Payload>> handler) {\n+      return addHandler(Router.route(route).requestChannel(handler));\n+    }\n+\n+    default T addRequestChannel(\n+        String route, BiFunction<Payload, Flux<Payload>, Flux<Payload>> handler) {\n+      return addHandler(Router.route(route).requestChannel(handler));\n+    }\n+\n+    T addHandler(HandlerFunction handler);\n+\n+    RoutingRSocket build();\n+  }\n+}"
  },
  {
    "sha": "9520a25c65669da90b31ac39e0165d106b35b417",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/rsocket/rsocket-java/blob/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/settings.gradle",
    "raw_url": "https://github.com/rsocket/rsocket-java/raw/6d6ea855bade28c26bc9b1cfa032de1b7179b5fd/settings.gradle",
    "contents_url": "https://api.github.com/repos/rsocket/rsocket-java/contents/settings.gradle?ref=6d6ea855bade28c26bc9b1cfa032de1b7179b5fd",
    "patch": "@@ -21,6 +21,7 @@ rootProject.name = 'rsocket-java'\n \n include 'rsocket-core'\n include 'rsocket-load-balancer'\n+include 'rsocket-router'\n include 'rsocket-micrometer'\n include 'rsocket-test'\n include 'rsocket-transport-local'"
  }
]
