[
  {
    "sha": "dfc19d3243559bb63b3d7713b820f6b22ba997b5",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/README.md",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/README.md",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/README.md?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -6,12 +6,13 @@ It also parses passed IP addresses so the server is aware of the real player IP\n \n ### Compatibility\n \n-TCPShield is compatible with Spigot / CraftBukkit, BungeeCord and Velocity.\n+TCPShield is compatible with Spigot / CraftBukkit, BungeeCord, Velocity and Fabric.\n \n When using Spigot / CraftBukkit, [ProtocolLib](https://github.com/aadnk/ProtocolLib) needs to be installed.\n+This does not apply when using Paper 1.16 build #503 or higher. \n \n ### Setup\n-Setting up the plugin is easy as pie. Please follow [these](https://docs.tcpshield.com/onboarding/tcpshield-plugin) guidelines. \n+Setting up the plugin is easy as pie. Please follow [these](https://docs.tcpshield.com/config/tcpshield-plugin) guidelines. \n \n ### Compiling\n In order to compile TCPShield, [install Gradle](https://docs.gradle.org/current/userguide/installation.html) and run the following command in the project folder:\n@@ -29,4 +30,5 @@ See [Contact](https://docs.tcpshield.com/about-us)\n These wonderful contributors have helped TCPShield make this plugin better! \n \n * [Paul Zhang](https://github.com/paulzhng)\n+* [Draylar](https://github.com/Draylar)\n * [RyanDeLap](https://github.com/RyanDeLap)"
  },
  {
    "sha": "be900c4105fddc9f3c6ee76b7172edc2a116c649",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 21,
    "deletions": 5,
    "changes": 26,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/build.gradle",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/build.gradle",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/build.gradle?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -1,3 +1,4 @@\n+import com.google.gson.GsonBuilder\n import com.google.gson.JsonObject\n import com.google.gson.JsonParser\n import org.yaml.snakeyaml.DumperOptions\n@@ -18,6 +19,7 @@ buildscript {\n plugins {\n     id 'java'\n     id 'idea'\n+    id 'fabric-loom' version '0.6-SNAPSHOT'\n }\n \n repositories {\n@@ -39,6 +41,12 @@ repositories {\n     maven {\n         url = 'https://repo.velocitypowered.com/snapshots/'\n     }\n+    maven {\n+        url = 'https://maven.fabricmc.net/'\n+    }\n+    flatDir {\n+        dirs '/libs'\n+    }\n }\n \n dependencies {\n@@ -47,17 +55,24 @@ dependencies {\n     compileOnly group: 'com.comphenix.protocol', name: 'ProtocolLib', version: '4.4.0'\n \n     // Paper\n-    compileOnly group: 'com.destroystokyo.paper', name: 'paper-api', version: '1.15.2-R0.1-SNAPSHOT'\n+    compileOnly group: 'com.destroystokyo.paper', name: 'paper-api', version: '1.16.5-R0.1-20210227.144841-85'\n \n     // BungeeCord\n     compileOnly group: 'net.md-5', name: 'bungeecord-api', version: '1.14-SNAPSHOT'\n \n     // Velocity\n     compileOnly group: 'com.velocitypowered', name: 'velocity-api', version: '1.0.0-SNAPSHOT'\n \n+    // Fabric\n+    minecraft \"com.mojang:minecraft:1.16.5\"\n+    mappings \"net.fabricmc:yarn:1.16.5+build.5:v2\"\n+    modImplementation group: 'net.fabricmc', name: 'fabric-loader', version: '0.11.2'\n+\n     // Testing\n-    testImplementation group: 'org.junit.jupiter', name:'junit-jupiter-api', version: '5.7.0-M1'\n-    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.7.0-M1'\n+    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0-M1'\n+    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0-M1'\n+\n+    compileOnly 'org.geyser:floodgate-spigot:2.0'\n }\n \n test {\n@@ -68,7 +83,7 @@ configurations {\n     testImplementation.extendsFrom compileOnly\n }\n \n-version = '2.4'\n+version = '2.5'\n group = 'net.tcpshield.tcpshield'\n archivesBaseName = 'TCPShield'\n \n@@ -133,6 +148,7 @@ void updateYaml() {\n }\n \n void updateJson() {\n+    def gson = new GsonBuilder().setPrettyPrinting().create();\n     def velocityJson = new File('src/main/resources/velocity-plugin.json')\n \n     def files = [velocityJson]\n@@ -143,7 +159,7 @@ void updateJson() {\n                 object.addProperty(\"version\", version.toString())\n \n                 new FileWriter(file).withCloseable { writer ->\n-                    writer.write(object.toString())\n+                    writer.write(gson.toJson(object))\n                 }\n             }\n         }"
  },
  {
    "sha": "2e8b56555afb3460b06769d465beeaa6d7fe39fe",
    "filename": "libs/floodgate-spigot.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/libs/floodgate-spigot.jar",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/libs/floodgate-spigot.jar",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/libs/floodgate-spigot.jar?ref=740e648b926e86026729ee28cffa4b9aabfa22d7"
  },
  {
    "sha": "5b60df3d25fea5853a5f64d321d56834d6fc33d7",
    "filename": "settings.gradle",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/settings.gradle",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/settings.gradle",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/settings.gradle?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,10 @@\n+pluginManagement {\n+    repositories {\n+        jcenter()\n+        maven {\n+            name = 'Fabric'\n+            url = 'https://maven.fabricmc.net/'\n+        }\n+        gradlePluginPortal()\n+    }\n+}"
  },
  {
    "sha": "26949f3c48709b677aa7fa631cfdb1412c3e6364",
    "filename": "src/main/java/net/tcpshield/tcpshield/HandshakePacketHandler.java",
    "status": "modified",
    "additions": 9,
    "deletions": 4,
    "changes": 13,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/HandshakePacketHandler.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/HandshakePacketHandler.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/HandshakePacketHandler.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -35,8 +35,8 @@ public void onHandshake(IPacket packet, IPlayer player) {\n             InetAddress inetAddress = InetAddress.getByName(player.getIP());\n             if (!ipValidation.validateIP(inetAddress)) throw new InvalidIPException();\n \n-            if (rawPayload == null)\n-                return; // raw payload is passed when it's not available -> e.g. Paper server list ping events\n+            // raw payload is passed when it's not available -> e.g. Paper server list ping events\n+            if (rawPayload == null) return;\n \n             String extraData = null;\n \n@@ -69,7 +69,7 @@ public void onHandshake(IPacket packet, IPlayer player) {\n         } catch (InvalidIPException e) {\n             handleInvalidIPException(player, rawPayload);\n         } catch (IPModificationFailureException e) {\n-            this.logger.warning(String.format(\"%s[%s/%s]'s IP failed to be modified. Raw payload = \\\"%s\\\"\", player.getName(), player.getUUID(), player.getIP(), rawPayload));\n+            this.logger.warning(String.format(\"%s's IP failed to be modified. Raw payload = \\\"%s\\\"\", player.getIP(), rawPayload));\n             e.printStackTrace();\n         } catch (Exception e) {\n             e.printStackTrace();\n@@ -78,11 +78,16 @@ public void onHandshake(IPacket packet, IPlayer player) {\n \n     private void handleInvalidIPException(IPlayer player, String rawPayload) {\n         if (config.isDebug()) {\n-            this.logger.warning(String.format(\"%s[%s/%s] was disconnected because the client failed the ip check and only-allowed-proxy-connections is enabled. Raw payload = \\\"%s\\\"\", player.getName(), player.getUUID(), player.getIP(), rawPayload));\n+            this.logger.warning(String.format(\"%s was disconnected because the client failed the ip check and only-allowed-proxy-connections is enabled. Raw payload = \\\"%s\\\"\", player.getIP(), rawPayload));\n         }\n \n         if (config.isOnlyProxy()) {\n             player.disconnect();\n         }\n     }\n+\n+    public TCPShieldConfig getConfig() {\n+        return config;\n+    }\n+\n }"
  },
  {
    "sha": "cb47efd96ea4fac11ba3d6beca0ac6726391f301",
    "filename": "src/main/java/net/tcpshield/tcpshield/abstraction/IPlayer.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/abstraction/IPlayer.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/abstraction/IPlayer.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/abstraction/IPlayer.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -6,10 +6,6 @@\n \n public interface IPlayer {\n \n-    String getUUID();\n-\n-    String getName();\n-\n     String getIP();\n \n     void setIP(InetSocketAddress ip) throws IPModificationFailureException;"
  },
  {
    "sha": "912fb935c987020eb14c197c0e4c82ee9210cf17",
    "filename": "src/main/java/net/tcpshield/tcpshield/abstraction/TCPShieldConfig.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/abstraction/TCPShieldConfig.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/abstraction/TCPShieldConfig.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/abstraction/TCPShieldConfig.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -7,6 +7,7 @@\n     protected boolean onlyProxy;\n     protected File ipWhitelistFolder;\n     protected boolean debug;\n+    protected boolean geyser;\n \n     public boolean isOnlyProxy() {\n         return this.onlyProxy;\n@@ -20,4 +21,8 @@ public boolean isDebug() {\n         return this.debug;\n     }\n \n+    public boolean isGeyser() {\n+        return this.geyser;\n+    }\n+\n }"
  },
  {
    "sha": "7c9b626d85bc4713c06bf28d92c1be49fbfbd6be",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/TCPShieldBukkit.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/TCPShieldBukkit.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/TCPShieldBukkit.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/TCPShieldBukkit.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -13,21 +13,25 @@ public void onEnable() {\n             new TCPShieldPaper(this).load();\n         } else {\n             if (Bukkit.getPluginManager().getPlugin(\"ProtocolLib\") == null) {\n-                this.getLogger().warning(\"TCPShield not loading because ProtocolLib is not installed. Either use Paper to enable native compatibility or install ProtocolLib.\");\n+                this.getLogger().warning(\"TCPShield not loading because ProtocolLib is not installed. Either use Paper (1.16 build #503 or higher) to enable native compatibility or install ProtocolLib.\");\n                 return;\n             }\n \n             new TCPShieldProtocolLib(this).load();\n         }\n     }\n \n+    /**\n+     * Checks if the server version supports native Paper support (Paper 1.16.5 build #503 or higher)\n+     *\n+     * @return if the server version supports native Paper support\n+     */\n     private boolean isPaper() {\n-        if (1 == 1) return false;\n-\n         try {\n-            Class.forName(\"com.destroystokyo.paper.event.player.PlayerHandshakeEvent\");\n+            Class<?> handshakeEvent = Class.forName(\"com.destroystokyo.paper.event.player.PlayerHandshakeEvent\");\n+            handshakeEvent.getMethod(\"getOriginalSocketAddressHostname\");\n             return true;\n-        } catch (ClassNotFoundException e) {\n+        } catch (ClassNotFoundException | NoSuchMethodException e) {\n             return false;\n         }\n     }"
  },
  {
    "sha": "ebed16ffc870873698ffeb8658651e54c6447381",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/impl/BukkitConfigImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/impl/BukkitConfigImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/impl/BukkitConfigImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/impl/BukkitConfigImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -15,6 +15,7 @@ public BukkitConfigImpl(JavaPlugin javaPlugin) {\n \n         this.onlyProxy = config.getBoolean(\"only-allow-proxy-connections\");\n         this.ipWhitelistFolder = new File(javaPlugin.getDataFolder(), \"ip-whitelist\");\n+        this.geyser = config.getBoolean(\"enable-geyser-compatibility\");\n         this.debug = config.getBoolean(\"debug-mode\");\n     }\n }"
  },
  {
    "sha": "f6f537ed39f1c61f059e240aa83aed80dac83ab5",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/paper/PaperHandshakePacketHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/PaperHandshakePacketHandler.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/PaperHandshakePacketHandler.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/paper/PaperHandshakePacketHandler.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -19,8 +19,8 @@\n \n     private final HandshakePacketHandler handshakePacketHandler;\n \n-    public PaperHandshakePacketHandler(JavaPlugin plugin) {\n-        this.handshakePacketHandler = new HandshakePacketHandler(plugin.getLogger(), new BukkitConfigImpl(plugin));\n+    public PaperHandshakePacketHandler(HandshakePacketHandler handshakePacketHandler) {\n+        this.handshakePacketHandler = handshakePacketHandler;\n     }\n \n     @EventHandler(priority = EventPriority.LOWEST)"
  },
  {
    "sha": "78b7c5445f8d7d3041a2e7b4ef55b3268b6f9a43",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/paper/TCPShieldPaper.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/TCPShieldPaper.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/TCPShieldPaper.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/paper/TCPShieldPaper.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -1,5 +1,11 @@\n package net.tcpshield.tcpshield.bukkit.paper;\n \n+import net.tcpshield.tcpshield.HandshakePacketHandler;\n+import net.tcpshield.tcpshield.bukkit.impl.BukkitConfigImpl;\n+import net.tcpshield.tcpshield.geyser.GeyserHandshakePacketHandler;\n+import net.tcpshield.tcpshield.geyser.GeyserUtils;\n+import net.tcpshield.tcpshield.velocity.VelocityHandshakePacketHandler;\n+import net.tcpshield.tcpshield.velocity.impl.VelocityConfigImpl;\n import org.bukkit.Bukkit;\n import org.bukkit.plugin.java.JavaPlugin;\n \n@@ -12,7 +18,11 @@ public TCPShieldPaper(JavaPlugin plugin) {\n     }\n \n     public void load() {\n-        PaperHandshakePacketHandler packetHandler = new PaperHandshakePacketHandler(plugin);\n-        Bukkit.getPluginManager().registerEvents(packetHandler, plugin);\n+        HandshakePacketHandler handshakePacketHandler =  new HandshakePacketHandler(plugin.getLogger(), new BukkitConfigImpl(plugin));\n+\n+        GeyserUtils.initGeyserOrDefault(handshakePacketHandler, () -> {\n+            PaperHandshakePacketHandler packetHandler = new PaperHandshakePacketHandler(handshakePacketHandler);\n+            Bukkit.getPluginManager().registerEvents(packetHandler, plugin);\n+        });\n     }\n }"
  },
  {
    "sha": "64e3433925f94f5bcf67c878f9f9c44cf2bd20e1",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperPlayerImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 16,
    "changes": 19,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperPlayerImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperPlayerImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperPlayerImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -1,10 +1,10 @@\n package net.tcpshield.tcpshield.bukkit.paper.impl;\n \n import com.destroystokyo.paper.event.player.PlayerHandshakeEvent;\n+import net.kyori.adventure.text.Component;\n import net.tcpshield.tcpshield.abstraction.IPlayer;\n \n import java.net.InetSocketAddress;\n-import java.util.UUID;\n \n public class PaperPlayerImpl implements IPlayer {\n \n@@ -14,22 +14,9 @@ public PaperPlayerImpl(PlayerHandshakeEvent handshakeEvent) {\n         this.handshakeEvent = handshakeEvent;\n     }\n \n-    @Override\n-    public String getUUID() {\n-        UUID uuid = handshakeEvent.getUniqueId();\n-        if (uuid == null) return \"unknown\";\n-\n-        return uuid.toString();\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"unknown\";\n-    }\n-\n     @Override\n     public String getIP() {\n-        return handshakeEvent.getSocketAddressHostname();\n+        return handshakeEvent.getOriginalSocketAddressHostname();\n     }\n \n     @Override\n@@ -40,7 +27,7 @@ public void setIP(InetSocketAddress ip) {\n     @Override\n     public void disconnect() {\n         handshakeEvent.setCancelled(false);\n-        handshakeEvent.setFailMessage(\"Connection failed. Please try again or contact an administrator.\");\n+        handshakeEvent.failMessage(Component.text(\"Connection failed. Please try again or contact an administrator.\"));\n         handshakeEvent.setFailed(true);\n     }\n }"
  },
  {
    "sha": "95241049b2f4550c12464ffc083f0108568f3e21",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperServerListPingPlayerImpl.java",
    "status": "modified",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperServerListPingPlayerImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperServerListPingPlayerImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/paper/impl/PaperServerListPingPlayerImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -13,16 +13,6 @@ public PaperServerListPingPlayerImpl(PaperServerListPingEvent pingEvent) {\n         this.pingEvent = pingEvent;\n     }\n \n-    @Override\n-    public String getUUID() {\n-        return \"unknown\";\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"unknown\";\n-    }\n-\n     @Override\n     public String getIP() {\n         return pingEvent.getAddress().getHostAddress();"
  },
  {
    "sha": "a718414bab3934610c9d673d6d16e71a60886abe",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/ProtocolLibHandshakePacketHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/ProtocolLibHandshakePacketHandler.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/ProtocolLibHandshakePacketHandler.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/ProtocolLibHandshakePacketHandler.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -7,7 +7,6 @@\n import net.tcpshield.tcpshield.HandshakePacketHandler;\n import net.tcpshield.tcpshield.abstraction.IPacket;\n import net.tcpshield.tcpshield.abstraction.IPlayer;\n-import net.tcpshield.tcpshield.bukkit.impl.BukkitConfigImpl;\n import net.tcpshield.tcpshield.bukkit.protocollib.impl.ProtocolLibPacketImpl;\n import net.tcpshield.tcpshield.bukkit.protocollib.impl.ProtocolLibPlayerImpl;\n import org.bukkit.plugin.java.JavaPlugin;\n@@ -16,9 +15,9 @@\n \n     private final HandshakePacketHandler handshakePacketHandler;\n \n-    public ProtocolLibHandshakePacketHandler(JavaPlugin plugin) {\n+    public ProtocolLibHandshakePacketHandler(JavaPlugin plugin, HandshakePacketHandler handshakePacketHandler) {\n         super(plugin, ListenerPriority.LOWEST, PacketType.Handshake.Client.SET_PROTOCOL);\n-        this.handshakePacketHandler = new HandshakePacketHandler(plugin.getLogger(), new BukkitConfigImpl(plugin));\n+        this.handshakePacketHandler = handshakePacketHandler;\n     }\n \n     @Override"
  },
  {
    "sha": "1c3b901707759ba8e63755738b3bb243b6d4e016",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/TCPShieldProtocolLib.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/TCPShieldProtocolLib.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/TCPShieldProtocolLib.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/TCPShieldProtocolLib.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -1,5 +1,9 @@\n package net.tcpshield.tcpshield.bukkit.protocollib;\n \n+import com.comphenix.protocol.ProtocolLibrary;\n+import net.tcpshield.tcpshield.HandshakePacketHandler;\n+import net.tcpshield.tcpshield.bukkit.impl.BukkitConfigImpl;\n+import net.tcpshield.tcpshield.geyser.GeyserUtils;\n import org.bukkit.plugin.java.JavaPlugin;\n \n public class TCPShieldProtocolLib {\n@@ -11,7 +15,10 @@ public TCPShieldProtocolLib(JavaPlugin plugin) {\n     }\n \n     public void load() {\n-        ProtocolLibHandshakePacketHandler packetHandler = new ProtocolLibHandshakePacketHandler(plugin);\n-        com.comphenix.protocol.ProtocolLibrary.getProtocolManager().addPacketListener(packetHandler);\n+        HandshakePacketHandler handshakePacketHandler = new HandshakePacketHandler(plugin.getLogger(), new BukkitConfigImpl(plugin));\n+        GeyserUtils.initGeyserOrDefault(handshakePacketHandler, () -> {\n+            ProtocolLibHandshakePacketHandler packetHandler = new ProtocolLibHandshakePacketHandler(plugin, handshakePacketHandler);\n+            ProtocolLibrary.getProtocolManager().addPacketListener(packetHandler);\n+        });\n     }\n }"
  },
  {
    "sha": "36c20974289d4b7f8e2993ae4de86d7920ad6978",
    "filename": "src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/impl/ProtocolLibPlayerImpl.java",
    "status": "modified",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/impl/ProtocolLibPlayerImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/impl/ProtocolLibPlayerImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bukkit/protocollib/impl/ProtocolLibPlayerImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -34,16 +34,6 @@ public ProtocolLibPlayerImpl(Player player) {\n         this.ip = player.getAddress().getAddress().getHostAddress();\n     }\n \n-    @Override\n-    public String getUUID() {\n-        return \"unknown\"; // not supported with temporary players\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"unknown\"; // not supported with temporary players\n-    }\n-\n     @Override\n     public String getIP() {\n         return ip;"
  },
  {
    "sha": "fb5038a960ea44efbe40eabf0bd5d2575633d50f",
    "filename": "src/main/java/net/tcpshield/tcpshield/bungee/BungeeHandshakePacketHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/BungeeHandshakePacketHandler.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/BungeeHandshakePacketHandler.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bungee/BungeeHandshakePacketHandler.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -4,22 +4,20 @@\n import net.md_5.bungee.api.event.PlayerHandshakeEvent;\n import net.md_5.bungee.api.event.ProxyPingEvent;\n import net.md_5.bungee.api.plugin.Listener;\n-import net.md_5.bungee.api.plugin.Plugin;\n import net.md_5.bungee.event.EventHandler;\n import net.md_5.bungee.event.EventPriority;\n import net.tcpshield.tcpshield.HandshakePacketHandler;\n import net.tcpshield.tcpshield.abstraction.IPacket;\n import net.tcpshield.tcpshield.abstraction.IPlayer;\n-import net.tcpshield.tcpshield.bungee.impl.BungeeConfigImpl;\n import net.tcpshield.tcpshield.bungee.impl.BungeePacketImpl;\n import net.tcpshield.tcpshield.bungee.impl.BungeePlayerImpl;\n \n public class BungeeHandshakePacketHandler implements Listener {\n \n     private final HandshakePacketHandler handshakePacketHandler;\n \n-    public BungeeHandshakePacketHandler(Plugin plugin) {\n-        this.handshakePacketHandler = new HandshakePacketHandler(plugin.getLogger(), new BungeeConfigImpl(plugin));\n+    public BungeeHandshakePacketHandler(HandshakePacketHandler handshakePacketHandler) {\n+        this.handshakePacketHandler = handshakePacketHandler;\n     }\n \n     @EventHandler(priority = EventPriority.LOWEST)"
  },
  {
    "sha": "de357173b7ef02fa32d480b123c6802de13300b3",
    "filename": "src/main/java/net/tcpshield/tcpshield/bungee/TCPShieldBungee.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/TCPShieldBungee.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/TCPShieldBungee.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bungee/TCPShieldBungee.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -3,12 +3,19 @@\n import net.md_5.bungee.api.plugin.Listener;\n import net.md_5.bungee.api.plugin.Plugin;\n import net.md_5.bungee.api.plugin.PluginManager;\n+import net.tcpshield.tcpshield.HandshakePacketHandler;\n+import net.tcpshield.tcpshield.bungee.impl.BungeeConfigImpl;\n+import net.tcpshield.tcpshield.geyser.GeyserUtils;\n \n public class TCPShieldBungee extends Plugin implements Listener {\n \n     @Override\n     public void onEnable() {\n-        PluginManager pluginManager = this.getProxy().getPluginManager();\n-        pluginManager.registerListener(this, new BungeeHandshakePacketHandler(this));\n+        HandshakePacketHandler handshakePacketHandler = new HandshakePacketHandler(this.getLogger(), new BungeeConfigImpl(this));\n+\n+        GeyserUtils.initGeyserOrDefault(handshakePacketHandler, () -> {\n+            PluginManager pluginManager = this.getProxy().getPluginManager();\n+            pluginManager.registerListener(this, new BungeeHandshakePacketHandler(handshakePacketHandler));\n+        });\n     }\n }"
  },
  {
    "sha": "b486eab965484f54472596cc5c55e3ba027a217d",
    "filename": "src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeeConfigImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeeConfigImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeeConfigImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeeConfigImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -23,6 +23,7 @@ public BungeeConfigImpl(Plugin plugin) {\n         Configuration config = loadConfig();\n         this.onlyProxy = config.getBoolean(\"only-allow-proxy-connections\");\n         this.ipWhitelistFolder = new File(plugin.getDataFolder(), \"ip-whitelist\");\n+        this.geyser = config.getBoolean(\"enable-geyser-compatibility\");\n         this.debug = config.getBoolean(\"debug-mode\");\n     }\n "
  },
  {
    "sha": "9038a2c9771c1f54f4bb64a97fd3bfab171328ea",
    "filename": "src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeePlayerImpl.java",
    "status": "modified",
    "additions": 0,
    "deletions": 14,
    "changes": 14,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeePlayerImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeePlayerImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/bungee/impl/BungeePlayerImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -9,7 +9,6 @@\n import java.lang.reflect.Field;\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n-import java.util.UUID;\n \n public class BungeePlayerImpl implements IPlayer {\n \n@@ -21,19 +20,6 @@ public BungeePlayerImpl(PendingConnection pendingConnection) {\n         this.ip = pendingConnection.getAddress().getAddress().getHostAddress();\n     }\n \n-    @Override\n-    public String getUUID() {\n-        UUID uuid = pendingConnection.getUniqueId();\n-        if (uuid == null) return \"Unknown\";\n-\n-        return uuid.toString();\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return pendingConnection.getName();\n-    }\n-\n     @Override\n     public String getIP() {\n         return ip;"
  },
  {
    "sha": "0d6e4d40da8be1a8924d3da51d40efa435d64a08",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/TCPShieldFabric.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/TCPShieldFabric.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/TCPShieldFabric.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/TCPShieldFabric.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,18 @@\n+package net.tcpshield.tcpshield.fabric;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.tcpshield.tcpshield.HandshakePacketHandler;\n+import net.tcpshield.tcpshield.fabric.impl.FabricConfigImpl;\n+\n+import java.util.logging.Logger;\n+\n+public class TCPShieldFabric implements ModInitializer {\n+\n+    public static final Logger LOGGER = Logger.getLogger(\"TCPShield\");\n+    public static final HandshakePacketHandler PACKET_HANDLER =  new HandshakePacketHandler(LOGGER, new FabricConfigImpl());\n+\n+    @Override\n+    public void onInitialize() {\n+        LOGGER.info(\"TCPShield has been loaded.\");\n+    }\n+}"
  },
  {
    "sha": "2f1cefe4181f819fd4bc98d84569bc271ca70e7c",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricConfigImpl.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricConfigImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricConfigImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricConfigImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,105 @@\n+package net.tcpshield.tcpshield.fabric.impl;\n+\n+import net.fabricmc.loader.api.FabricLoader;\n+import net.tcpshield.tcpshield.abstraction.TCPShieldConfig;\n+import net.tcpshield.tcpshield.exception.TCPShieldInitializationException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class FabricConfigImpl extends TCPShieldConfig {\n+\n+    private final Path configLocation = new File(FabricLoader.getInstance().getConfigDir().toString(), \"tcpshield.yml\").toPath();\n+\n+    public FabricConfigImpl() {\n+        if(!configExists()) {\n+            createDefaultConfig();\n+        }\n+\n+        ConfigData config = loadConfig();\n+\n+        this.onlyProxy = config.onlyAllowProxyConnections;\n+        this.ipWhitelistFolder = new File(FabricLoader.getInstance().getGameDirectory(), \"ip-whitelist\");\n+        this.geyser = false;\n+        this.debug = config.debugMode;\n+    }\n+\n+    /**\n+     * @return  whether the file specified in {@link FabricConfigImpl#configLocation} exists.\n+     */\n+    private boolean configExists() {\n+        return Files.exists(configLocation);\n+    }\n+\n+    /**\n+     * Creates the default configuration file at the location specified in {@link FabricConfigImpl#configLocation}.\n+     *\n+     * <p>\n+     * This operation will always override an existing configuration file if it exists.\n+     * Callers should check {@link FabricConfigImpl#configExists()} if they wish to avoid this behavior.\n+     */\n+    private void createDefaultConfig() {\n+        // Ensure the parent directory of our config file exists.\n+        // If it does not exist, attempt to create it now.\n+        Path parentDirectory = configLocation.getParent();\n+        if (!Files.exists(parentDirectory) || !Files.isDirectory(parentDirectory)) {\n+            parentDirectory.toFile().mkdirs();\n+        }\n+\n+        // Copy the config.yml data from our mod jar to the loader config folder.\n+        try (InputStream in = getClass().getClassLoader().getResourceAsStream(\"config.yml\")) {\n+            Files.copy(in, configLocation);\n+        } catch (Exception e) {\n+            throw new TCPShieldInitializationException(e);\n+        }\n+    }\n+\n+    private ConfigData loadConfig() {\n+        try {\n+            List<String> strings = Files.readAllLines(configLocation);\n+\n+            boolean onlyAllowProxyConnections = true;\n+            boolean debugMode = false;\n+\n+            // Rudimentary config parsing\n+            for (String line : strings) {\n+                String[] keyValue = line.split(\": \");\n+\n+                // A config option will only be valid if it is in the format 'a: b'.\n+                // Ensure that is the case now.\n+                if (keyValue.length == 2) {\n+                    String key = keyValue[0];\n+                    String value = keyValue[1];\n+\n+                    switch (key) {\n+                        case \"only-allow-proxy-connections\":\n+                            onlyAllowProxyConnections = Boolean.parseBoolean(value);\n+                            break;\n+                        case \"debug-mode\":\n+                            debugMode = Boolean.parseBoolean(value);\n+                            break;\n+                    }\n+                }\n+            }\n+\n+            return new ConfigData(onlyAllowProxyConnections, debugMode);\n+        } catch (Exception e) {\n+            throw new TCPShieldInitializationException(\"Couldn't load config in config/tclshield.yml!\");\n+        }\n+    }\n+\n+    private static class ConfigData {\n+\n+        protected boolean onlyAllowProxyConnections;\n+        protected boolean debugMode;\n+\n+        public ConfigData(boolean onlyAllowProxyConnections, boolean debugMode) {\n+            this.onlyAllowProxyConnections = onlyAllowProxyConnections;\n+            this.debugMode = debugMode;\n+        }\n+    }\n+}"
  },
  {
    "sha": "2751ba91b7787bcd8339f768f15bcd14c0ecafe9",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPacketImpl.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPacketImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPacketImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPacketImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,24 @@\n+package net.tcpshield.tcpshield.fabric.impl;\n+\n+import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;\n+import net.tcpshield.tcpshield.abstraction.IPacket;\n+import net.tcpshield.tcpshield.fabric.mixin.HandshakeC2SPacketAccessor;\n+\n+public class FabricPacketImpl implements IPacket {\n+\n+    private final HandshakeC2SPacket handshake;\n+\n+    public FabricPacketImpl(HandshakeC2SPacket handshake) {\n+        this.handshake = handshake;\n+    }\n+\n+    @Override\n+    public String getRawPayload() {\n+        return ((HandshakeC2SPacketAccessor) handshake).getAddress();\n+    }\n+\n+    @Override\n+    public void modifyOriginalPacket(String hostname) throws Exception {\n+        // NO OPERATION\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1fb5722a399ddbef399a8875a84feb79d2aee098",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPlayerImpl.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPlayerImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPlayerImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/impl/FabricPlayerImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,40 @@\n+package net.tcpshield.tcpshield.fabric.impl;\n+\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;\n+import net.minecraft.network.packet.s2c.login.LoginDisconnectS2CPacket;\n+import net.minecraft.text.LiteralText;\n+import net.tcpshield.tcpshield.abstraction.IPlayer;\n+import net.tcpshield.tcpshield.exception.IPModificationFailureException;\n+import net.tcpshield.tcpshield.fabric.mixin.ClientConnectionAccessor;\n+\n+import java.net.InetSocketAddress;\n+\n+public class FabricPlayerImpl implements IPlayer {\n+\n+    private final ClientConnection connection;\n+    private String ip;\n+\n+    public FabricPlayerImpl(HandshakeC2SPacket packet, ClientConnection connection) {\n+        this.connection = connection;\n+        this.ip = ((InetSocketAddress) ((ClientConnectionAccessor) connection).getChannel().remoteAddress()).getAddress().getHostAddress();\n+    }\n+\n+    @Override\n+    public String getIP() {\n+        return ip;\n+    }\n+\n+    @Override\n+    public void setIP(InetSocketAddress ip) throws IPModificationFailureException {\n+        // At this point, the IP/connection believe the player has the IP of TCPShield.\n+        // The ip passed into this method contains their CORRECT data, which we have to assign to the player network connection.\n+        ((ClientConnectionAccessor) connection).setAddress(ip);\n+        this.ip = ((InetSocketAddress) ((ClientConnectionAccessor) connection).getChannel().remoteAddress()).getAddress().getHostAddress();\n+    }\n+\n+    @Override\n+    public void disconnect() {\n+        connection.disconnect(new LiteralText(\"Connection failed. Please try again or contact an administrator.\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e725e079975c702199ac6379527f3041a1abc110",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/mixin/ClientConnectionAccessor.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/mixin/ClientConnectionAccessor.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/mixin/ClientConnectionAccessor.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/mixin/ClientConnectionAccessor.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,20 @@\n+package net.tcpshield.tcpshield.fabric.mixin;\n+\n+import io.netty.channel.Channel;\n+import net.minecraft.network.ClientConnection;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import java.net.SocketAddress;\n+\n+@Mixin(ClientConnection.class)\n+public interface ClientConnectionAccessor {\n+    @Accessor\n+    void setAddress(SocketAddress address);\n+\n+    @Accessor\n+    Channel getChannel();\n+\n+    @Accessor\n+    SocketAddress getAddress();\n+}"
  },
  {
    "sha": "fe7e6fa7d87538d131e9291c22827d35cfd20b01",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/mixin/HandshakeC2SPacketAccessor.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/mixin/HandshakeC2SPacketAccessor.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/mixin/HandshakeC2SPacketAccessor.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/mixin/HandshakeC2SPacketAccessor.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,11 @@\n+package net.tcpshield.tcpshield.fabric.mixin;\n+\n+import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+@Mixin(HandshakeC2SPacket.class)\n+public interface HandshakeC2SPacketAccessor {\n+    @Accessor\n+    String getAddress();\n+}"
  },
  {
    "sha": "a67c619c236e7fc9270dc55e8446b2445e0b9048",
    "filename": "src/main/java/net/tcpshield/tcpshield/fabric/mixin/ServerHandshakeMixin.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/mixin/ServerHandshakeMixin.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/fabric/mixin/ServerHandshakeMixin.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/fabric/mixin/ServerHandshakeMixin.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,32 @@\n+package net.tcpshield.tcpshield.fabric.mixin;\n+\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket;\n+import net.minecraft.server.network.ServerHandshakeNetworkHandler;\n+import net.tcpshield.tcpshield.abstraction.IPacket;\n+import net.tcpshield.tcpshield.abstraction.IPlayer;\n+import net.tcpshield.tcpshield.fabric.TCPShieldFabric;\n+import net.tcpshield.tcpshield.fabric.impl.FabricPacketImpl;\n+import net.tcpshield.tcpshield.fabric.impl.FabricPlayerImpl;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+@Mixin(ServerHandshakeNetworkHandler.class)\n+public class ServerHandshakeMixin {\n+\n+    @Shadow @Final private ClientConnection connection;\n+\n+    @Inject(\n+            method = \"onHandshake\",\n+            at = @At(\"HEAD\"))\n+    private void onHandshake(HandshakeC2SPacket handshake, CallbackInfo ci) {\n+        IPacket packet = new FabricPacketImpl(handshake);\n+        IPlayer player = new FabricPlayerImpl(handshake, connection);\n+\n+        TCPShieldFabric.PACKET_HANDLER.onHandshake(packet, player);\n+    }\n+}"
  },
  {
    "sha": "4d27a05938e4d30d80f273790b70fbc28d6f0673",
    "filename": "src/main/java/net/tcpshield/tcpshield/geyser/GeyserHandshakePacketHandler.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/geyser/GeyserHandshakePacketHandler.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/geyser/GeyserHandshakePacketHandler.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/geyser/GeyserHandshakePacketHandler.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,29 @@\n+package net.tcpshield.tcpshield.geyser;\n+\n+import net.tcpshield.tcpshield.HandshakePacketHandler;\n+import net.tcpshield.tcpshield.abstraction.IPacket;\n+import net.tcpshield.tcpshield.abstraction.IPlayer;\n+import net.tcpshield.tcpshield.geyser.impl.GeyserPacketImpl;\n+import net.tcpshield.tcpshield.geyser.impl.GeyserPlayerImpl;\n+import org.geysermc.floodgate.api.InstanceHolder;\n+\n+public class GeyserHandshakePacketHandler {\n+\n+    private final HandshakePacketHandler handshakePacketHandler;\n+\n+    public GeyserHandshakePacketHandler(HandshakePacketHandler handshakePacketHandler) {\n+        this.handshakePacketHandler = handshakePacketHandler;\n+    }\n+\n+    public void init() {\n+        InstanceHolder.getHandshakeHandlers().addHandshakeHandler(data -> {\n+            // In case the connection is a Bedrock connection, we don't bother\n+            if (data.getBedrockData() != null) return;\n+\n+            IPlayer player = new GeyserPlayerImpl(data);\n+            IPacket packet = new GeyserPacketImpl(data);\n+\n+            handshakePacketHandler.onHandshake(packet, player);\n+        });\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7ed6957ba0c63d5683bd61b693515e2be7011dd3",
    "filename": "src/main/java/net/tcpshield/tcpshield/geyser/GeyserUtils.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/geyser/GeyserUtils.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/geyser/GeyserUtils.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/geyser/GeyserUtils.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,27 @@\n+package net.tcpshield.tcpshield.geyser;\n+\n+import net.tcpshield.tcpshield.HandshakePacketHandler;\n+import net.tcpshield.tcpshield.abstraction.TCPShieldConfig;\n+\n+public class GeyserUtils {\n+\n+    public static void initGeyserOrDefault(HandshakePacketHandler handshakePacketHandler, Runnable registrar) {\n+        if (!useGeyser(handshakePacketHandler.getConfig())) {\n+            registrar.run();\n+        } else {\n+            GeyserHandshakePacketHandler geyserHandler = new GeyserHandshakePacketHandler(handshakePacketHandler);\n+            geyserHandler.init();\n+        }\n+    }\n+\n+    private static boolean useGeyser(TCPShieldConfig config) {\n+        if (!config.isGeyser()) return false;\n+\n+        try {\n+            Class.forName(\"org.geysermc.floodgate.api.InstanceHolder\");\n+            return true;\n+        } catch (ClassNotFoundException e) {\n+            return false;\n+        }\n+    }\n+}"
  },
  {
    "sha": "9e79eadc69074bbb4f5605f80d57a808e3182ae1",
    "filename": "src/main/java/net/tcpshield/tcpshield/geyser/impl/GeyserPacketImpl.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/TCPShield/RealIP/blob/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/geyser/impl/GeyserPacketImpl.java",
    "raw_url": "https://github.com/TCPShield/RealIP/raw/740e648b926e86026729ee28cffa4b9aabfa22d7/src/main/java/net/tcpshield/tcpshield/geyser/impl/GeyserPacketImpl.java",
    "contents_url": "https://api.github.com/repos/TCPShield/RealIP/contents/src/main/java/net/tcpshield/tcpshield/geyser/impl/GeyserPacketImpl.java?ref=740e648b926e86026729ee28cffa4b9aabfa22d7",
    "patch": "@@ -0,0 +1,23 @@\n+package net.tcpshield.tcpshield.geyser.impl;\n+\n+import net.tcpshield.tcpshield.abstraction.IPacket;\n+import org.geysermc.floodgate.api.handshake.HandshakeData;\n+\n+public class GeyserPacketImpl implements IPacket {\n+\n+    private final HandshakeData handshakeData;\n+\n+    public GeyserPacketImpl(HandshakeData handshakeData) {\n+        this.handshakeData = handshakeData;\n+    }\n+\n+    @Override\n+    public String getRawPayload() {\n+        return handshakeData.getHostname();\n+    }\n+\n+    @Override\n+    public void modifyOriginalPacket(String hostname) {\n+        handshakeData.setHostname(hostname);\n+    }\n+}"
  }
]
