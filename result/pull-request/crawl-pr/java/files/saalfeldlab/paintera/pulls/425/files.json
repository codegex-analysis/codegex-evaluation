[
  {
    "sha": "0d7c388cf2c7bcf9daa1c5ca0f034697693c1104",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/pom.xml",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/pom.xml",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/pom.xml?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -59,7 +59,7 @@\n \t\t<javadoc.skip>true</javadoc.skip>\n \t\t<maven.javadoc.skip>${javadoc.skip}</maven.javadoc.skip>\n \n-\t\t<saalfx.version>0.1.7</saalfx.version>\n+\t\t<saalfx.version>0.1.8</saalfx.version>\n \n \t\t<!--\t\thas to be version 2.6.1 with logback-1.2.3. If parent pom-scijava updates logback version, this\n \t\t\t\t\tprobably has to be udpated as well. -->"
  },
  {
    "sha": "06fd17ab2b0d1861aefa809fe5ded5099c27510c",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/PainteraBaseView.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/PainteraBaseView.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/PainteraBaseView.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/PainteraBaseView.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -5,7 +5,6 @@\n import bdv.viewer.SourceAndConverter;\n import bdv.viewer.ViewerOptions;\n import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n import javafx.collections.ListChangeListener;\n import javafx.collections.ObservableList;\n import javafx.scene.layout.Pane;\n@@ -26,6 +25,7 @@\n import org.janelia.saalfeldlab.paintera.config.input.KeyAndMouseConfig;\n import org.janelia.saalfeldlab.paintera.control.actions.AllowedActions;\n import org.janelia.saalfeldlab.paintera.control.actions.AllowedActions.AllowedActionsBuilder;\n+import org.janelia.saalfeldlab.paintera.control.actions.AllowedActionsProperty;\n import org.janelia.saalfeldlab.paintera.data.mask.MaskedSource;\n import org.janelia.saalfeldlab.paintera.meshes.MeshWorkerPriority;\n import org.janelia.saalfeldlab.paintera.state.ChannelSourceState;\n@@ -77,7 +77,7 @@\n \n   private final OrthogonalViews<Viewer3DFX> views;\n \n-  private final ObjectProperty<AllowedActions> allowedActionsProperty;\n+  private final AllowedActionsProperty allowedActionsProperty;\n \n   private final ObservableList<SourceAndConverter<?>> visibleSourcesAndConverters = sourceInfo\n \t\t  .trackVisibleSourcesAndConverters();\n@@ -140,7 +140,7 @@ public PainteraBaseView(\n \t\t\tthis.viewerOptions,\n \t\t\tviewer3D,\n \t\t\ts -> Optional.ofNullable(sourceInfo.getState(s)).map(SourceState::interpolationProperty).map(ObjectProperty::get).orElse(Interpolation.NLINEAR));\n-\tthis.allowedActionsProperty = new SimpleObjectProperty<>(DEFAULT_ALLOWED_ACTIONS);\n+\tthis.allowedActionsProperty = new AllowedActionsProperty(DEFAULT_ALLOWED_ACTIONS, pane());\n \tthis.vsacUpdate = change -> views.setAllSources(visibleSourcesAndConverters);\n \tvisibleSourcesAndConverters.addListener(vsacUpdate);\n \tLOG.debug(\"Meshes group={}\", viewer3D.meshesGroup());\n@@ -189,7 +189,7 @@ public GlobalTransformManager manager() {\n   /**\n    * @return {@link AllowedActions} that describe the user interface in the current application mode\n    */\n-  public ObjectProperty<AllowedActions> allowedActionsProperty() {\n+  public AllowedActionsProperty allowedActionsProperty() {\n \n \treturn this.allowedActionsProperty;\n   }"
  },
  {
    "sha": "95459c958f260ba9579754f0329b9443eb1db1ef",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/PainteraCommandLineArgs.java",
    "status": "modified",
    "additions": 50,
    "deletions": 46,
    "changes": 96,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/PainteraCommandLineArgs.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/PainteraCommandLineArgs.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/PainteraCommandLineArgs.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -49,14 +49,21 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import picocli.CommandLine;\n+import picocli.CommandLine.ArgGroup;\n import picocli.CommandLine.Command;\n import picocli.CommandLine.Option;\n import picocli.CommandLine.Parameters;\n \n import java.io.File;\n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n@@ -74,7 +81,7 @@\n   private static class LongArrayTypeConverter implements CommandLine.ITypeConverter<long[]> {\n \n \t@Override\n-\tpublic long[] convert(String value) {\n+\tpublic long[] convert(final String value) {\n \n \t  return Stream\n \t\t\t  .of(value.split(\",\"))\n@@ -107,7 +114,7 @@ public IdServiceFallbackGenerator getIdServiceGenerator() {\n \n \t\tprivate final String selection;\n \n-\t\tprivate NoMatchFound(String selection, final Throwable e) {\n+\t\tprivate NoMatchFound(final String selection, final Throwable e) {\n \n \t\t  super(\n \t\t\t\t  String.format(\n@@ -120,11 +127,11 @@ private NoMatchFound(String selection, final Throwable e) {\n \t  }\n \n \t  @Override\n-\t  public IdServiceFallback convert(String s) throws NoMatchFound {\n+\t  public IdServiceFallback convert(final String s) throws NoMatchFound {\n \n \t\ttry {\n \t\t  return IdServiceFallback.valueOf(s.replace(\"-\", \"_\").toUpperCase());\n-\t\t} catch (IllegalArgumentException e) {\n+\t\t} catch (final IllegalArgumentException e) {\n \t\t  throw new NoMatchFound(s, e);\n \t\t}\n \t  }\n@@ -138,7 +145,7 @@ public IdServiceFallback convert(String s) throws NoMatchFound {\n \n \tprivate final LabelBlockLookupFallbackGenerator generator;\n \n-\tLabelBlockLookupFallback(LabelBlockLookupFallbackGenerator generator) {\n+\tLabelBlockLookupFallback(final LabelBlockLookupFallbackGenerator generator) {\n \n \t  this.generator = generator;\n \t}\n@@ -154,7 +161,7 @@ public LabelBlockLookupFallbackGenerator getGenerator() {\n \n \t\tprivate final String selection;\n \n-\t\tprivate NoMatchFound(String selection, final Throwable e) {\n+\t\tprivate NoMatchFound(final String selection, final Throwable e) {\n \n \t\t  super(\n \t\t\t\t  String.format(\n@@ -167,11 +174,11 @@ private NoMatchFound(String selection, final Throwable e) {\n \t  }\n \n \t  @Override\n-\t  public LabelBlockLookupFallback convert(String s) throws TypeConverter.NoMatchFound {\n+\t  public LabelBlockLookupFallback convert(final String s) throws TypeConverter.NoMatchFound {\n \n \t\ttry {\n \t\t  return LabelBlockLookupFallback.valueOf(s.replace(\"-\", \"_\").toUpperCase());\n-\t\t} catch (IllegalArgumentException e) {\n+\t\t} catch (final IllegalArgumentException e) {\n \t\t  throw new TypeConverter.NoMatchFound(s, e);\n \t\t}\n \t  }\n@@ -193,8 +200,6 @@ private static synchronized ExecutorService getDiscoveryExecutorService() {\n \t  return DISCOVERY_EXECUTOR_SERVICE;\n \t}\n \n-\t;\n-\n \tprivate static final class Options {\n \n \t  @Option(names = {\"-d\", \"--dataset\"}, paramLabel = \"DATASET\", arity = \"1..*\", required = true, description = \"\" +\n@@ -219,22 +224,22 @@ private static synchronized ExecutorService getDiscoveryExecutorService() {\n \n \t  @Option(names = {\"--min\"}, paramLabel = \"MIN\", description = \"\" +\n \t\t\t  \"Minimum value of contrast range for raw and channel data.\")\n-\t  private Double min = null;\n+\t  private final Double min = null;\n \n \t  @Option(names = {\"--max\"}, paramLabel = \"MAX\", description = \"\" +\n \t\t\t  \"Maximum value of contrast range for raw and channel data.\")\n-\t  private Double max = null;\n+\t  private final Double max = null;\n \n \t  @Option(names = {\"--channel-dimension\"}, defaultValue = \"3\", paramLabel = \"CHANNEL_DIMENSION\", description = \"\" +\n \t\t\t  \"Defines the dimension of a 4D dataset to be interpreted as channel axis. \" +\n \t\t\t  \"0 <= CHANNEL_DIMENSION <= 3\")\n-\t  private Integer channelDimension = 3;\n+\t  private final Integer channelDimension = 3;\n \n \t  @Option(names = {\"--channels\"}, paramLabel = \"CHANNELS\", arity = \"1..*\", converter = LongArrayTypeConverter.class, description = \"\" +\n \t\t\t  \"Use only this subset of channels for channel (4D) data. \" +\n \t\t\t  \"Multiple subsets can be specified. \" +\n \t\t\t  \"If no channels are specified, use all channels.\")\n-\t  private long[][] channels = null;\n+\t  private final long[][] channels = null;\n \n \t  @Option(names = {\"--name\"}, paramLabel = \"NAME\", description = \"\" +\n \t\t\t  \"Specify name for dataset(s). \" +\n@@ -269,16 +274,16 @@ private static synchronized ExecutorService getDiscoveryExecutorService() {\n \t\t\t  \"Datasets can be excluded through the --exclude option. The --include option overrides any exclusions.\")\n \t  Boolean addEntireContainer = null;\n \n-\t  @CommandLine.Option(names = {\"--exclude\"}, paramLabel = \"EXCLUDE\", arity = \"1..*\", description = \"\" +\n+\t  @Option(names = {\"--exclude\"}, paramLabel = \"EXCLUDE\", arity = \"1..*\", description = \"\" +\n \t\t\t  \"Exclude any data set that matches any of EXCLUDE regex patterns.\")\n \t  String[] exclude = null;\n \n-\t  @CommandLine.Option(names = {\"--include\"}, paramLabel = \"INCLUDE\", arity = \"1..*\", description = \"\" +\n+\t  @Option(names = {\"--include\"}, paramLabel = \"INCLUDE\", arity = \"1..*\", description = \"\" +\n \t\t\t  \"Include any data set that matches any of INCLUDE regex patterns. \" +\n \t\t\t  \"Takes precedence over EXCLUDE.\")\n \t  String[] include = null;\n \n-\t  @CommandLine.Option(names = {\"--only-explicitly-included\"}, description = \"\" +\n+\t  @Option(names = {\"--only-explicitly-included\"}, description = \"\" +\n \t\t\t  \"When this option is set, use only data sets that were explicitly included via INCLUDE. \" +\n \t\t\t  \"Equivalent to --exclude '.*'\")\n \t  Boolean onlyExplicitlyIncluded = false;\n@@ -333,10 +338,10 @@ private static synchronized ExecutorService getDiscoveryExecutorService() {\n \t\t\t\"Container of dataset(s) to be added. \" +\n \t\t\t\"If none is provided, default to Paintera project (if any). \" +\n \t\t\t\"Currently N5 file system and HDF5 containers are supported.\")\n-\tprivate File[] container = null;\n+\tprivate final File[] container = null;\n \n-\t@CommandLine.ArgGroup(multiplicity = \"1\", exclusive = false)\n-\tprivate Options options = null;\n+\t@ArgGroup(multiplicity = \"1\", exclusive = false)\n+\tprivate final Options options = null;\n \n \tprivate void addToViewer(\n \t\t\tfinal PainteraBaseView viewer,\n@@ -406,27 +411,27 @@ private void addToViewer(\n \n   private static final double DEFAULT_SCREEN_SCALE_FACTOR = 0.5;\n \n-  @Option(names = {\"--width\"}, paramLabel = \"WIDTH\", required = false, description = \"Initial width of viewer. \" +\n-\t\t  \"Defaults to 800. Overrides width stored in project.\")\n+  @Option(names = {\"--width\"}, paramLabel = \"WIDTH\", required = false,\n+\t\t  description = \"Initial width of viewer. Defaults to 800. Overrides width stored in project.\")\n   private int width = -1;\n \n-  @Option(names = {\"--height\"}, paramLabel = \"HEIGHT\", required = false, description = \"Initial height of viewer. \" +\n-\t\t  \"Defaults to 600. Overrides height stored in project.\")\n+  @Option(names = {\"--height\"}, paramLabel = \"HEIGHT\", required = false,\n+\t\t  description = \"Initial height of viewer. Defaults to 600. Overrides height stored in project.\")\n   private int height = -1;\n \n   @Option(names = {\"-h\", \"--help\"}, usageHelp = true, description = \"Display this help message.\")\n   private boolean helpRequested;\n \n-  @Option(names = \"--num-screen-scales\", paramLabel = \"NUM_SCREEN_SCALES\", required = false, description = \"Number \" +\n-\t\t  \"of screen scales, defaults to 3. If no scale option is specified, scales default to [1.0, 0.5, 0.25, 0.125, 0.0625].\")\n+  @Option(names = \"--num-screen-scales\", paramLabel = \"NUM_SCREEN_SCALES\", required = false,\n+\t\t  description = \"Number of screen scales, defaults to 3. If no scale option is specified, scales default to [1.0, 0.5, 0.25, 0.125, 0.0625].\")\n   private Integer numScreenScales;\n \n-  @Option(names = \"--highest-screen-scale\", paramLabel = \"HIGHEST_SCREEN_SCALE\", required = false, description =\n-\t\t  \"Highest screen scale, restricted to the interval (0,1], defaults to 1. If no scale option is specified, scales default to [1.0, 0.5, 0.25, 0.125, 0.0625].\")\n+  @Option(names = \"--highest-screen-scale\", paramLabel = \"HIGHEST_SCREEN_SCALE\", required = false,\n+\t\t  description = \"Highest screen scale, restricted to the interval (0,1], defaults to 1. If no scale option is specified, scales default to [1.0, 0.5, 0.25, 0.125, 0.0625].\")\n   private Double highestScreenScale;\n \n-  @Option(names = \"--screen-scale-factor\", paramLabel = \"SCREEN_SCALE_FACTOR\", required = false, description =\n-\t\t  \"Scalar value from the open interval (0,1) that defines how screen scales diminish in each dimension. \" +\n+  @Option(names = \"--screen-scale-factor\", paramLabel = \"SCREEN_SCALE_FACTOR\", required = false,\n+\t\t  description = \"Scalar value from the open interval (0,1) that defines how screen scales diminish in each dimension. \" +\n \t\t\t\t  \"Defaults to 0.5. If no scale option is specified, scales default to [1.0, 0.5, 0.25, 0.125, 0.0625].\")\n   private Double screenScaleFactor;\n \n@@ -435,12 +440,12 @@ private void addToViewer(\n \t\t  \"all other screen scale options. If no scale option is specified, scales default to [1.0, 0.5, 0.25, 0.125, 0.0625].\", arity = \"1..*\", split = \",\")\n   private double[] screenScales;\n \n-  @Parameters(index = \"0\", paramLabel = \"PROJECT\", arity = \"0..1\", description = \"Optional project N5 root (N5 or \" +\n-\t\t  \"FileSystem).\")\n+  @Parameters(index = \"0\", paramLabel = \"PROJECT\", arity = \"0..1\",\n+\t\t  description = \"Optional project N5 root (N5 or FileSystem).\")\n   private String project;\n \n-  @Option(names = \"--print-error-codes\", paramLabel = \"PRINT_ERROR_CODES\", required = false, description = \"List all\" +\n-\t\t  \" error codes and exit.\")\n+  @Option(names = \"--print-error-codes\", paramLabel = \"PRINT_ERROR_CODES\", required = false,\n+\t\t  description = \"List all error codes and exit.\")\n   private Boolean printErrorCodes;\n \n   @Option(names = \"--default-to-temp-directory\", paramLabel = \"DEFAULT_TO_TEMP_DIRECTORY\", required = false,\n@@ -451,15 +456,14 @@ private void addToViewer(\n   @Option(names = \"--version\", paramLabel = \"PRINT_VERSION_STRING\", required = false, description = \"Print version string and exit\")\n   private Boolean printVersionString;\n \n-  @CommandLine.Option(names = {\n-\t\t  \"--log-level\"}, description = \"Set level of root logger. If not specified, default to INFO or the level specified into Paintera project.\")\n-  private Level logLevel = null;\n+  @Option(names = {\"--log-level\"}, description = \"Set level of root logger. If not specified, default to INFO or the level specified into Paintera project.\")\n+  private final Level logLevel = null;\n \n-  @CommandLine.Option(names = {\"--log-level-for\"}, description = \"Set log level for specific loggers by name.\", split = \",\")\n-  private Map<String, Level> logLevelsByName = null;\n+  @Option(names = {\"--log-level-for\"}, description = \"Set log level for specific loggers by name.\", split = \",\")\n+  private final Map<String, Level> logLevelsByName = null;\n \n-  @CommandLine.ArgGroup(exclusive = false, multiplicity = \"0..*\")\n-  private AddDatasetArgument[] n5datasets = null;\n+  @ArgGroup(exclusive = false, multiplicity = \"0..*\")\n+  private final AddDatasetArgument[] n5datasets = null;\n \n   private boolean screenScalesProvided = false;\n \n@@ -619,7 +623,7 @@ public ScreenScaleNotDecreasing(final double first, final double second) {\n \t}\n   }\n \n-  private static <T> T getIfInRange(T[] array, final int index) {\n+  private static <T> T getIfInRange(final T[] array, final int index) {\n \n \treturn index < array.length ? array[index] : null;\n   }\n@@ -677,7 +681,7 @@ private static long findMaxId(final RandomAccessibleInterval<? extends IntegerTy\n \t  LOG.debug(\"{} is a cell img with block size {}\", rai, blockSize);\n \t  return blockSize;\n \t}\n-\tint argMaxDim = argMaxDim(rai);\n+\tfinal int argMaxDim = argMaxDim(rai);\n \tfinal int[] blockSize = Intervals.dimensionsAsIntArray(rai);\n \tblockSize[argMaxDim] = 1;\n \treturn blockSize;\n@@ -746,7 +750,7 @@ else if (isChannelData) {\n \t  final Function<long[], String> nameBuilder = channels.length == 1\n \t\t\t  ? c -> fname\n \t\t\t  : c -> String.format(\"%s-%s\", fname, Arrays.toString(c));\n-\t  for (long[] channel : channels) {\n+\t  for (final long[] channel : channels) {\n \t\tviewer.addState(makeChannelSourceState(viewer, container, group, transform, channelDimension, channel, min, max, nameBuilder.apply(channel)));\n \t  }\n \t} else {\n@@ -860,7 +864,7 @@ LabelBlockLookup get(\n \t}\n   }\n \n-  private static <T> T getLastEntry(T[] array) {\n+  private static <T> T getLastEntry(final T[] array) {\n \n \treturn array.length > 0 ? array[array.length - 1] : null;\n   }"
  },
  {
    "sha": "3ab51b804828afc8f22deef7e67e2ad56b91c1a0",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/control/ShapeInterpolationMode.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/control/ShapeInterpolationMode.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/control/ShapeInterpolationMode.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/control/ShapeInterpolationMode.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -513,7 +513,6 @@ private void applyMask(final PainteraBaseView paintera) {\n \t  } catch (final InterruptedException e) {\n \t\te.printStackTrace();\n \t  }\n-\t  ;\n \t  runOnInterpolationFinished();\n \t}\n "
  },
  {
    "sha": "d110c1f8a085b27f45e67e432a1dbb4fc2c439c2",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/control/actions/AllowedActionsProperty.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/control/actions/AllowedActionsProperty.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/control/actions/AllowedActionsProperty.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/control/actions/AllowedActionsProperty.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -0,0 +1,81 @@\n+package org.janelia.saalfeldlab.paintera.control.actions;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Cursor;\n+import javafx.scene.Node;\n+\n+public class AllowedActionsProperty extends SimpleObjectProperty<AllowedActions> {\n+\n+  private static final AllowedActions EMPTY_ACTION_SET = new AllowedActions.AllowedActionsBuilder().create();\n+\n+  private final Node ownerNode;\n+  private final ChangeListener<Cursor> cursorChangeListener;\n+  private final BooleanProperty isDisabled = new SimpleBooleanProperty(false);\n+  private Cursor previousCursor = Cursor.DEFAULT;\n+  private AllowedActions disabledActions;\n+\n+  public AllowedActionsProperty(final Node ownerNode) {\n+\n+\tthis(null, \"\", ownerNode);\n+  }\n+\n+  public AllowedActionsProperty(final AllowedActions initialValue, final Node ownerNode) {\n+\n+\tthis(null, \"\", initialValue, ownerNode);\n+  }\n+\n+  public AllowedActionsProperty(final Object bean, final String name, final Node ownerNode) {\n+\n+\tthis(bean, name, null, ownerNode);\n+  }\n+\n+  public AllowedActionsProperty(final Object bean, final String name, final AllowedActions initialValue, final Node ownerNode) {\n+\n+\tsuper(bean, name, initialValue);\n+\tthis.ownerNode = ownerNode;\n+\tthis.cursorChangeListener = createCursorChangeListener(this.ownerNode);\n+\tthis.isDisabled.addListener(this::disableActionsListener);\n+  }\n+\n+  private static ChangeListener<Cursor> createCursorChangeListener(final Node scene) {\n+\n+\treturn (observable, oldValue, newValue) -> {\n+\t  if (newValue != Cursor.WAIT) {\n+\t\tscene.setCursor(Cursor.WAIT);\n+\t  }\n+\t};\n+  }\n+\n+  public void disable() {\n+\n+\tisDisabled.set(true);\n+  }\n+\n+  public void enable() {\n+\n+\tisDisabled.set(false);\n+  }\n+\n+  private void disableActionsListener(final ObservableValue<? extends Boolean> obs, final Boolean previouslyDisabled, final Boolean disable) {\n+\t/* Do nothing if no change */\n+\tif (previouslyDisabled == disable)\n+\t  return;\n+\tif (disable) {\n+\t  disabledActions = getValue();\n+\t  set(EMPTY_ACTION_SET);\n+\t  /* store the current cursor*/\n+\t  this.previousCursor = this.ownerNode.getCursor();\n+\t  this.ownerNode.cursorProperty().addListener(cursorChangeListener);\n+\t  this.ownerNode.setCursor(Cursor.WAIT);\n+\t} else {\n+\t  this.ownerNode.cursorProperty().removeListener(cursorChangeListener);\n+\t  this.ownerNode.setCursor(this.previousCursor);\n+\t  set(disabledActions);\n+\t  disabledActions = null;\n+\t}\n+  }\n+}"
  },
  {
    "sha": "9a0173e8751b935458cb0ae71e5ceb34fce7caef",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/control/paint/BrushOverlay.java",
    "status": "modified",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/control/paint/BrushOverlay.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/control/paint/BrushOverlay.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/control/paint/BrushOverlay.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -1,10 +1,7 @@\n package org.janelia.saalfeldlab.paintera.control.paint;\n \n-import java.lang.invoke.MethodHandles;\n-import java.util.stream.IntStream;\n-\n-import bdv.fx.viewer.render.OverlayRendererGeneric;\n import bdv.fx.viewer.ViewerPanelFX;\n+import bdv.fx.viewer.render.OverlayRendererGeneric;\n import javafx.beans.property.DoubleProperty;\n import javafx.beans.property.SimpleDoubleProperty;\n import javafx.beans.value.ObservableDoubleValue;\n@@ -18,6 +15,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.lang.invoke.MethodHandles;\n+import java.util.stream.IntStream;\n+\n public class BrushOverlay implements OverlayRendererGeneric<GraphicsContext> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n@@ -60,7 +60,6 @@ public BrushOverlay(final ViewerPanelFX viewer, final GlobalTransformManager man\n \tviewer.addTransformListener(this::updateViewerRadius);\n \tviewer.getState().getViewerTransform(viewerTransform);\n \tthis.updateViewerRadius(viewerTransform);\n-\n   }\n \n   public void setVisible(final boolean visible) {"
  },
  {
    "sha": "5a5b748d82de3dab30d80dc2db6586f2fa511d26",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/data/mask/MaskedSource.java",
    "status": "modified",
    "additions": 67,
    "deletions": 58,
    "changes": 125,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/data/mask/MaskedSource.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/data/mask/MaskedSource.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/data/mask/MaskedSource.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -187,6 +187,8 @@\n \n   private final BooleanProperty isApplyingMask = new SimpleBooleanProperty();\n \n+  private final BooleanProperty isBusy = new SimpleBooleanProperty();\n+\n   private final Map<Long, TLongHashSet>[] affectedBlocksByLabel;\n \n   private final List<Runnable> canvasClearedListeners = new ArrayList<>();\n@@ -275,6 +277,11 @@ public ReadOnlyBooleanProperty isApplyingMaskProperty() {\n \treturn isApplyingMask;\n   }\n \n+  public ReadOnlyBooleanProperty isBusyProperty() {\n+\n+\treturn isBusy;\n+  }\n+\n   public BooleanProperty showCanvasOverBackgroundProperty() {\n \n \treturn showCanvasOverBackground;\n@@ -285,24 +292,21 @@ public BooleanProperty showCanvasOverBackgroundProperty() {\n \treturn currentMask;\n   }\n \n-  public Mask<UnsignedLongType> generateMask(\n+  public synchronized Mask<UnsignedLongType> generateMask(\n \t\t  final MaskInfo<UnsignedLongType> maskInfo,\n \t\t  final Predicate<UnsignedLongType> isPaintedForeground)\n \t\t  throws MaskInUse {\n \n \tLOG.debug(\"Asking for mask: {}\", maskInfo);\n-\tsynchronized (this) {\n-\t  final boolean canGenerateMask = !isCreatingMask && currentMask == null && !isApplyingMask.get() && !isPersisting;\n-\t  LOG.debug(\"Can generate mask? {}\", canGenerateMask);\n-\t  if (!canGenerateMask) {\n-\t\tLOG.error(\n-\t\t\t\t\"Currently processing, cannot generate new mask: persisting? {} mask in use? {}\",\n-\t\t\t\tisPersisting,\n-\t\t\t\tcurrentMask);\n-\t\tthrow new MaskInUse(\"Busy, cannot generate new mask.\");\n-\t  }\n-\t  this.isCreatingMask = true;\n+\tif (isMaskInUse()) {\n+\t  LOG.error(\n+\t\t\t  \"Currently processing, cannot generate new mask: persisting? {} mask in use? {}\",\n+\t\t\t  isPersisting,\n+\t\t\t  currentMask);\n+\t  throw new MaskInUse(\"Busy, cannot generate new mask.\");\n \t}\n+\tthis.isCreatingMask = true;\n+\tthis.isBusy.set(true);\n \tLOG.debug(\"Generating mask: {}\", maskInfo);\n \n \tfinal Pair<DiskCachedCellImg<UnsignedLongType, ?>, TmpVolatileHelpers.RaiWithInvalidate<VolatileUnsignedLongType>>\n@@ -314,30 +318,31 @@ public BooleanProperty showCanvasOverBackgroundProperty() {\n \t\t\tstore,\n \t\t\tstore.getCellGrid());\n \tfinal Mask<UnsignedLongType> mask = new Mask<>(maskInfo, trackingStore, store.getCache(), vstore.getInvalidate(), store::shutdown);\n-\tsynchronized (this) {\n-\t  this.currentMask = mask;\n-\t  this.isCreatingMask = false;\n-\t}\n+\tthis.currentMask = mask;\n+\tthis.isCreatingMask = false;\n+\tthis.isBusy.set(false);\n \treturn mask;\n   }\n \n-  public void setMask(\n+  private boolean isMaskInUse() {\n+\n+\treturn isCreatingMask || currentMask != null || isApplyingMask.get() || isPersisting;\n+  }\n+\n+  public synchronized void setMask(\n \t\t  final Mask<UnsignedLongType> mask,\n \t\t  final Predicate<UnsignedLongType> isPaintedForeground)\n \t\t  throws MaskInUse {\n \n-\tsynchronized (this) {\n-\t  final boolean canSetMask = !isCreatingMask && currentMask == null && !isApplyingMask.get() && !isPersisting;\n-\t  LOG.debug(\"Can set mask? {}\", canSetMask);\n-\t  if (!canSetMask) {\n-\t\tLOG.error(\n-\t\t\t\t\"Currently processing, cannot set new mask: persisting? {} mask in use? {}\",\n-\t\t\t\tisPersisting,\n-\t\t\t\tcurrentMask);\n-\t\tthrow new MaskInUse(\"Busy, cannot set new mask.\");\n-\t  }\n-\t  this.isCreatingMask = true;\n+\tif (isMaskInUse()) {\n+\t  LOG.error(\n+\t\t\t  \"Currently processing, cannot set new mask: persisting? {} mask in use? {}\",\n+\t\t\t  isPersisting,\n+\t\t\t  currentMask);\n+\t  throw new MaskInUse(\"Busy, cannot set new mask.\");\n \t}\n+\tthis.isCreatingMask = true;\n+\tthis.isBusy.set(true);\n \n \t// TODO should we always require CachedcellImage for mask.mask? That would make this check obsolete.\n \tfinal RandomAccessibleInterval<UnsignedLongType> store;\n@@ -351,10 +356,9 @@ public void setMask(\n \n \tsetMasks(store, vstore, mask.info.level, mask.info.value, isPaintedForeground);\n \n-\tsynchronized (this) {\n-\t  this.currentMask = mask;\n-\t  this.isCreatingMask = false;\n-\t}\n+\tthis.currentMask = mask;\n+\tthis.isCreatingMask = false;\n+\tthis.isBusy.set(false);\n   }\n \n   public void setMask(\n@@ -367,28 +371,24 @@ public void setMask(\n \t\t  final Predicate<UnsignedLongType> isPaintedForeground)\n \t\t  throws MaskInUse {\n \n-\tsynchronized (this) {\n-\t  final boolean canSetMask = !isCreatingMask && currentMask == null && !isApplyingMask.get() && !isPersisting;\n-\t  LOG.debug(\"Can set mask? {}\", canSetMask);\n-\t  if (!canSetMask) {\n-\t\tLOG.error(\n-\t\t\t\t\"Currently processing, cannot set new mask: persisting? {} mask in use? {}\",\n-\t\t\t\tisPersisting,\n-\t\t\t\tcurrentMask\n-\t\t);\n-\t\tthrow new MaskInUse(\"Busy, cannot set new mask.\");\n-\t  }\n-\t  this.isCreatingMask = true;\n+\tif (isMaskInUse()) {\n+\t  LOG.error(\n+\t\t\t  \"Currently processing, cannot set new mask: persisting? {} mask in use? {}\",\n+\t\t\t  isPersisting,\n+\t\t\t  currentMask\n+\t  );\n+\t  throw new MaskInUse(\"Busy, cannot set new mask.\");\n \t}\n+\tthis.isCreatingMask = true;\n+\tthis.isBusy.set(true);\n \n \tsetMasks(mask, vmask, maskInfo.level, maskInfo.value, isPaintedForeground);\n \n-\tsynchronized (this) {\n-\t  final RandomAccessibleInterval<UnsignedLongType> rasteredMask = Views.interval(Views.raster(mask), source.getSource(0, maskInfo.level));\n-\t  // TODO how to get invalidateVolatile here?\n-\t  this.currentMask = new Mask<>(maskInfo, rasteredMask, invalidate, volatileInvalidate, shutdown);\n-\t  this.isCreatingMask = false;\n-\t}\n+\tfinal RandomAccessibleInterval<UnsignedLongType> rasteredMask = Views.interval(Views.raster(mask), source.getSource(0, maskInfo.level));\n+\t// TODO how to get invalidateVolatile here?\n+\tthis.currentMask = new Mask<>(maskInfo, rasteredMask, invalidate, volatileInvalidate, shutdown);\n+\tthis.isCreatingMask = false;\n+\tthis.isBusy.set(false);\n   }\n \n   public void applyMask(\n@@ -398,12 +398,13 @@ public void applyMask(\n \n \tif (mask == null)\n \t  return;\n-\tnew Thread(() -> {\n+\tfinal var applyMaskThread = new Thread(() -> {\n \t  Thread.currentThread().setName(\"apply mask\");\n \t  synchronized (this) {\n \t\tfinal boolean maskCanBeApplied = !this.isCreatingMask && this.currentMask == mask && !this.isApplyingMask.get() && !this.isPersisting;\n \t\tif (!maskCanBeApplied) {\n \t\t  LOG.debug(\"Did not pass valid mask {}, will not do anything\", mask);\n+\t\t  this.isBusy.set(false);\n \t\t  return;\n \t\t}\n \t\tthis.isApplyingMask.set(true);\n@@ -471,10 +472,14 @@ public void applyMask(\n \t\t\tif (currentMaskBeforePropagation.invalidateVolatile != null)\n \t\t\t  currentMaskBeforePropagation.invalidateVolatile.invalidateAll();\n \t\t  }\n+\t\t  this.isBusy.set(false);\n \t\t}\n \t  });\n \n-\t}).start();\n+\t});\n+\t/* Start as busy, so a new mask isn't generated until we are done applying this one. */\n+\tthis.isBusy.set(true);\n+\tapplyMaskThread.start();\n \n   }\n \n@@ -548,8 +553,11 @@ public void resetMasks() throws MaskInUse {\n \t\tthrow new MaskInUse(\"Busy, cannot reset mask.\");\n \n \t  this.currentMask = null;\n+\t  this.isBusy.set(true);\n \t}\n \tsetMasksConstant();\n+\n+\tthis.isBusy.set(false);\n   }\n \n   public void forgetCanvases() throws CannotClearCanvas {\n@@ -570,8 +578,7 @@ public void persistCanvas() throws CannotPersist {\n   public void persistCanvas(final boolean clearCanvas) throws CannotPersist {\n \n \tsynchronized (this) {\n-\t  final boolean canPersist = !this.isCreatingMask && this.currentMask == null && !this.isApplyingMask.get() && !this.isPersisting;\n-\t  if (!canPersist) {\n+\t  if (isMaskInUse()) {\n \t\tLOG.error(\n \t\t\t\t\"Cannot persist canvas: is persisting? {} has mask? {} is creating mask? {} is applying mask? {}\",\n \t\t\t\tthis.isPersisting,\n@@ -582,6 +589,7 @@ public void persistCanvas(final boolean clearCanvas) throws CannotPersist {\n \t\tthrow new CannotPersist(\"Can not persist canvas!\");\n \t  }\n \t  this.isPersisting = true;\n+\t  this.isBusy.set(true);\n \t}\n \n \tLOG.debug(\"Merging canvas into background for blocks {}\", this.affectedBlocks);\n@@ -641,6 +649,7 @@ public void persistCanvas(final boolean clearCanvas) throws CannotPersist {\n \t\tsynchronized (this) {\n \t\t  this.isPersisting = false;\n \t\t  proxy.set(false);\n+\t\t  this.isBusy.set(false);\n \t\t  if (caughtException == null)\n \t\t\tstates.add(\"Successfully finished committing canvas.\");\n \t\t  else\n@@ -1239,25 +1248,25 @@ private void clearCanvases() {\n   }\n \n   @Override\n-  public void invalidate(Long key) {\n+  public void invalidate(final Long key) {\n \t// TODO what to do with canvas?\n \tthis.source.invalidate(key);\n   }\n \n   @Override\n-  public void invalidateIf(long parallelismThreshold, Predicate<Long> condition) {\n+  public void invalidateIf(final long parallelismThreshold, final Predicate<Long> condition) {\n \t// TODO what to do with canvas?\n \tthis.source.invalidateIf(parallelismThreshold, condition);\n   }\n \n   @Override\n-  public void invalidateIf(Predicate<Long> condition) {\n+  public void invalidateIf(final Predicate<Long> condition) {\n \t// TODO what to do with canvas?\n \tthis.source.invalidateIf(condition);\n   }\n \n   @Override\n-  public void invalidateAll(long parallelismThreshold) {\n+  public void invalidateAll(final long parallelismThreshold) {\n \t// TODO what to do with canvas?\n \tthis.source.invalidateAll(parallelismThreshold);\n   }"
  },
  {
    "sha": "118a2e24623d239a7c0bce24c91bb2dce5e2bf94",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceState.java",
    "status": "modified",
    "additions": 15,
    "deletions": 13,
    "changes": 28,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceState.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceState.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceState.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -12,7 +12,11 @@\n import javafx.scene.Cursor;\n import javafx.scene.Group;\n import javafx.scene.Node;\n-import javafx.scene.control.*;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.Tooltip;\n import javafx.scene.input.KeyCode;\n import javafx.scene.input.KeyCodeCombination;\n import javafx.scene.input.KeyCombination;\n@@ -65,7 +69,12 @@\n import org.janelia.saalfeldlab.paintera.meshes.ManagedMeshSettings;\n import org.janelia.saalfeldlab.paintera.meshes.MeshWorkerPriority;\n import org.janelia.saalfeldlab.paintera.meshes.managed.MeshManagerWithAssignmentForSegments;\n-import org.janelia.saalfeldlab.paintera.stream.*;\n+import org.janelia.saalfeldlab.paintera.stream.ARGBStreamSeedSetter;\n+import org.janelia.saalfeldlab.paintera.stream.AbstractHighlightingARGBStream;\n+import org.janelia.saalfeldlab.paintera.stream.HighlightingStreamConverter;\n+import org.janelia.saalfeldlab.paintera.stream.HighlightingStreamConverterIntegerType;\n+import org.janelia.saalfeldlab.paintera.stream.ModalGoldenAngleSaturatedHighlightingARGBStream;\n+import org.janelia.saalfeldlab.paintera.stream.ShowOnlySelectedInStreamToggle;\n import org.janelia.saalfeldlab.paintera.viewer3d.ViewFrustum;\n import org.janelia.saalfeldlab.util.Colors;\n import org.janelia.saalfeldlab.util.concurrent.HashPriorityQueueBasedTaskExecutor;\n@@ -130,7 +139,7 @@ public LabelSourceState(\n \t\t  final LabelBlockLookup labelBlockLookup) {\n \n \tsuper(dataSource, converter, composite, name);\n-\tLOG.warn(\"Using deprectaed class LabelSourceState. Use ConnectomicsLabelState instead.\");\n+\tLOG.warn(\"Using deprecated class LabelSourceState. Use ConnectomicsLabelState instead.\");\n \tfinal D d = dataSource.getDataType();\n \tthis.maskForLabel = equalsMaskForType(d);\n \tthis.assignment = assignment;\n@@ -463,13 +472,6 @@ public void refreshMeshes() {\n \treturn listHandler;\n   }\n \n-  //\t@Override\n-  //\tpublic EventHandler<Event> stateSpecificGlobalEventFilter(PainteraBaseView paintera, KeyTracker keyTracker) {\n-  //\t\treturn e -> {\n-  //\t\t\tLOG.debug(\"Default state specific event filter: Not handling anything\");\n-  //\t\t};\n-  //\t}\n-\n   @Override\n   public EventHandler<Event> stateSpecificViewerEventHandler(final PainteraBaseView paintera, final KeyTracker keyTracker) {\n \n@@ -679,7 +681,7 @@ private HBox createDisplayStatus() {\n   }\n \n   @Override\n-  public void onRemoval(SourceInfo sourceInfo) {\n+  public void onRemoval(final SourceInfo sourceInfo) {\n \n \tLOG.info(\"Removed LabelSourceState {}\", nameProperty().get());\n \tmeshManager.removeAllMeshes();\n@@ -695,7 +697,7 @@ public void onRemoval(SourceInfo sourceInfo) {\n   }\n \n   @Override\n-  public void onShutdown(PainteraBaseView paintera) {\n+  public void onShutdown(final PainteraBaseView paintera) {\n \n \tLabelSourceStateCommitHandler.showCommitDialog(\n \t\t\tthis,\n@@ -752,7 +754,7 @@ public KeyAndMouseBindings createKeyAndMouseBindings() {\n \t  bindings.getKeyCombinations().addCombination(\n \t\t\t  new NamedKeyCombination(BindingKeys.TOGGLE_NON_SELECTED_LABELS_VISIBILITY, new KeyCodeCombination(KeyCode.V, KeyCombination.SHIFT_DOWN)));\n \n-\t} catch (NamedKeyCombination.CombinationMap.KeyCombinationAlreadyInserted keyCombinationAlreadyInserted) {\n+\t} catch (final NamedKeyCombination.CombinationMap.KeyCombinationAlreadyInserted keyCombinationAlreadyInserted) {\n \t  keyCombinationAlreadyInserted.printStackTrace();\n \t  // TODO probably not necessary to check for exceptions here, but maybe throw runtime exception?\n \t}"
  },
  {
    "sha": "99d46bba0e0d28d1e485305dc655bd29affc12bd",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceStatePaintHandler.java",
    "status": "modified",
    "additions": 13,
    "deletions": 14,
    "changes": 27,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceStatePaintHandler.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceStatePaintHandler.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/state/LabelSourceStatePaintHandler.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -158,18 +158,17 @@ public LabelSourceStatePaintHandler(\n \treturn event -> {\n \t  final EventTarget target = event.getTarget();\n \t  if (MouseEvent.MOUSE_EXITED.equals(event.getEventType()) && target instanceof ViewerPanelFX)\n-\t\tOptional.ofNullable(painters.get(target)).ifPresent(p -> p.setBrushOverlayVisible(false));\n+\t\tOptional.ofNullable(painters.get(target)).ifPresent(PaintActions2D::hideBrushOverlay);\n \t};\n   }\n \n-  private EventHandler<Event> makeHandler(final PainteraBaseView paintera, final KeyTracker keyTracker, final ViewerPanelFX t) {\n+  private EventHandler<Event> makeHandler(final PainteraBaseView paintera, final KeyTracker keyTracker, final ViewerPanelFX viewer) {\n \n-\tLOG.debug(\"Making handler with PainterBaseView {} key Tracker {} and ViewerPanelFX {}\", paintera, keyTracker, t);\n+\tLOG.debug(\"Making handler with PainterBaseView {} key Tracker {} and ViewerPanelFX {}\", paintera, keyTracker, viewer);\n \tfinal SourceInfo sourceInfo = paintera.sourceInfo();\n \n \tfinal DelegateEventHandlers.AnyHandler handler = DelegateEventHandlers.handleAny();\n-\t//\t\t\tif ( this.paintableViews.contains( this.viewerAxes.get( t ) ) )\n-\tfinal PaintActions2D paint2D = new PaintActions2D(t, paintera.manager());\n+\tfinal PaintActions2D paint2D = new PaintActions2D(viewer, paintera.manager());\n \tpaint2D.brushRadiusProperty().bindBidirectional(this.brushProperties.brushRadius);\n \tpaint2D.brushRadiusScaleProperty().bindBidirectional(this.brushProperties.brushRadiusScale);\n \tpaint2D.brushDepthProperty().bindBidirectional(this.brushProperties.brushDepth);\n@@ -181,17 +180,17 @@ public LabelSourceStatePaintHandler(\n \t  return Label.regular(lastSelection) ? lastSelection : null;\n \t};\n \n-\tpainters.put(t, paint2D);\n+\tpainters.put(viewer, paint2D);\n \n-\tfinal FloodFill<T> fill = new FloodFill<>(t, source, fragmentSegmentAssignment, paintera.orthogonalViews()::requestRepaint, isVisible,\n+\tfinal FloodFill<T> fill = new FloodFill<>(viewer, source, fragmentSegmentAssignment, paintera.orthogonalViews()::requestRepaint, isVisible,\n \t\t\tfloodFillStateUpdate);\n-\tfinal FloodFill2D<T> fill2D = new FloodFill2D<>(t, source, fragmentSegmentAssignment, paintera.orthogonalViews()::requestRepaint, isVisible);\n+\tfinal FloodFill2D<T> fill2D = new FloodFill2D<>(viewer, source, fragmentSegmentAssignment, paintera.orthogonalViews()::requestRepaint, isVisible);\n \tfill2D.fillDepthProperty().bindBidirectional(this.brushProperties.brushDepth);\n-\tfinal Fill2DOverlay fill2DOverlay = new Fill2DOverlay(t);\n+\tfinal Fill2DOverlay fill2DOverlay = new Fill2DOverlay(viewer);\n \tfill2DOverlay.brushDepthProperty().bindBidirectional(this.brushProperties.brushDepth);\n-\tfinal FillOverlay fillOverlay = new FillOverlay(t);\n+\tfinal FillOverlay fillOverlay = new FillOverlay(viewer);\n \n-\tfinal RestrictPainting restrictor = new RestrictPainting(t, sourceInfo, paintera.orthogonalViews()::requestRepaint, (LongFunction)maskForLabel);\n+\tfinal RestrictPainting restrictor = new RestrictPainting(viewer, sourceInfo, paintera.orthogonalViews()::requestRepaint, (LongFunction)maskForLabel);\n \n \t// brush\n \thandler.addEventHandler(KeyEvent.KEY_PRESSED, EventFX.KEY_PRESSED(\n@@ -251,7 +250,7 @@ public LabelSourceStatePaintHandler(\n \t// paint\n \tfinal PaintClickOrDrag paintDrag = new PaintClickOrDrag(\n \t\t\tpaintera,\n-\t\t\tt,\n+\t\t\tviewer,\n \t\t\tpaintSelection,\n \t\t\tthis.brushProperties.brushRadius::get,\n \t\t\tthis.brushProperties.brushDepth::get,\n@@ -262,7 +261,7 @@ public LabelSourceStatePaintHandler(\n \t// erase\n \tfinal PaintClickOrDrag eraseDrag = new PaintClickOrDrag(\n \t\t\tpaintera,\n-\t\t\tt,\n+\t\t\tviewer,\n \t\t\t() -> Label.TRANSPARENT,\n \t\t\tthis.brushProperties.brushRadius::get,\n \t\t\tthis.brushProperties.brushDepth::get,\n@@ -273,7 +272,7 @@ public LabelSourceStatePaintHandler(\n \t// background\n \tfinal PaintClickOrDrag backgroundDrag = new PaintClickOrDrag(\n \t\t\tpaintera,\n-\t\t\tt,\n+\t\t\tviewer,\n \t\t\t() -> Label.BACKGROUND,\n \t\t\tthis.brushProperties.brushRadius::get,\n \t\t\tthis.brushProperties.brushDepth::get,"
  },
  {
    "sha": "4d015fdacb3167062cbe2d7858b5666394b48685",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/state/SourceInfo.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/state/SourceInfo.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/state/SourceInfo.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/state/SourceInfo.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -103,7 +103,7 @@\n   private final IntegerProperty currentSourceIndexInVisibleSources = new SimpleIntegerProperty();\n \n   {\n-\tthis.currentSource.addListener((oldv, obs, newv) -> updateCurrentSourceIndexInVisibleSources());\n+\tthis.currentSource.addListener((obs, oldv, newv) -> updateCurrentSourceIndexInVisibleSources());\n \tthis.visibleSources.addListener((ListChangeListener<Source<?>>)(change) ->\n \t\t\tupdateCurrentSourceIndexInVisibleSources());\n \tupdateCurrentSourceIndexInVisibleSources();"
  },
  {
    "sha": "e0071df50d8310e4def5ce84ef22bd6aff67117c",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/FileSystem.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/FileSystem.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/FileSystem.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/FileSystem.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -67,7 +67,7 @@ public GenericBackendDialogN5 backendDialog(ExecutorService propagationExecutor)\n \n \tfinal ObjectField<String, StringProperty> containerField = ObjectField\n \t\t\t.stringField(container.get(), ObjectField.SubmitOn.ENTER_PRESSED, ObjectField.SubmitOn.ENTER_PRESSED);\n-\tfinal TextField containerTextField = containerField.textField();\n+\tfinal TextField containerTextField = containerField.getTextField();\n \tcontainerField.valueProperty().bindBidirectional(container);\n \tcontainerTextField.setMinWidth(0);\n \tcontainerTextField.setMaxWidth(Double.POSITIVE_INFINITY);"
  },
  {
    "sha": "426a190e1899cf12ddf34a1d8d00116bc6aef95a",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/GenericBackendDialogN5.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/GenericBackendDialogN5.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/GenericBackendDialogN5.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/menu/n5/GenericBackendDialogN5.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -24,6 +24,7 @@\n import net.imglib2.Volatile;\n import net.imglib2.algorithm.util.Grids;\n import net.imglib2.cache.img.CachedCellImg;\n+import net.imglib2.converter.ARGBColorConverter;\n import net.imglib2.realtransform.AffineTransform3D;\n import net.imglib2.type.NativeType;\n import net.imglib2.type.numeric.IntegerType;\n@@ -522,6 +523,9 @@ public String identifier() {\n \tfinal double[] offset = asPrimitiveArray(offset());\n \tfinal N5BackendRaw<T, V> backend = new N5BackendRaw<>(writer, dataset);\n \tfinal SourceState<T, V> state = new ConnectomicsRawState<>(backend, queue, priority, name, resolution, offset);\n+\tfinal ARGBColorConverter.InvertingImp0 converter = (ARGBColorConverter.InvertingImp0)state.converter();\n+\tconverter.setMin(min().get());\n+\tconverter.setMax(max().get());\n \tLOG.debug(\"Returning raw source state {} {}\", name, state);\n \treturn state;\n   }"
  },
  {
    "sha": "6ae4b8f6607cad6e3a5d34f360135d80ecab9664",
    "filename": "src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/meta/MetaPanel.java",
    "status": "modified",
    "additions": 31,
    "deletions": 26,
    "changes": 57,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/meta/MetaPanel.java",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/meta/MetaPanel.java",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/java/org/janelia/saalfeldlab/paintera/ui/opendialog/meta/MetaPanel.java?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -7,14 +7,17 @@\n import javafx.beans.value.ObservableStringValue;\n import javafx.beans.value.ObservableValue;\n import javafx.collections.ObservableList;\n+import javafx.event.EventHandler;\n import javafx.geometry.Orientation;\n import javafx.geometry.Pos;\n import javafx.scene.Node;\n import javafx.scene.control.*;\n import javafx.scene.control.TextFormatter.Change;\n+import javafx.scene.input.KeyEvent;\n import javafx.scene.layout.*;\n import javafx.scene.text.TextAlignment;\n import org.janelia.saalfeldlab.fx.Buttons;\n+import org.janelia.saalfeldlab.fx.ui.NumberField;\n import org.janelia.saalfeldlab.fx.util.InvokeOnJavaFXApplicationThread;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -25,6 +28,8 @@\n import java.util.function.UnaryOperator;\n import java.util.stream.Stream;\n \n+import static org.janelia.saalfeldlab.fx.ui.ObjectField.SubmitOn;\n+\n public class MetaPanel {\n \n   private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n@@ -43,9 +48,9 @@\n \n   private final SpatialInformation offset;\n \n-  private final TextField min = new TextField(\"\");\n+  private final NumberField<DoubleProperty> min = NumberField.doubleField(0, d -> true, SubmitOn.ENTER_PRESSED, SubmitOn.FOCUS_LOST);\n \n-  private final TextField max = new TextField(\"\");\n+  private final NumberField<DoubleProperty> max = NumberField.doubleField(255, d -> true, SubmitOn.ENTER_PRESSED, SubmitOn.FOCUS_LOST);\n \n   private final VBox content = new VBox();\n \n@@ -120,21 +125,21 @@ public MetaPanel() {\n \tcc.setHgrow(Priority.ALWAYS);\n \tspatialInfo.getColumnConstraints().addAll(cc);\n \n-\tStackPane dimensionInfo = new StackPane();\n+\tfinal StackPane dimensionInfo = new StackPane();\n \t// max num of labels\n \n-\tStackPane channelInfoPane = new StackPane();\n+\tfinal StackPane channelInfoPane = new StackPane();\n \n \tthis.dimensionsProperty.addListener((obs, oldv, newv) -> {\n \t  if (newv == null) {\n \t\tInvokeOnJavaFXApplicationThread.invoke(dimensionInfo.getChildren()::clear);\n \t\tInvokeOnJavaFXApplicationThread.invoke(channelInfoPane.getChildren()::clear);\n \t  } else {\n-\t\tLabel[] labels = Stream.generate(Label::new).limit(newv.length).toArray(Label[]::new);\n+\t\tfinal Label[] labels = Stream.generate(Label::new).limit(newv.length).toArray(Label[]::new);\n \t\tStream.of(labels).forEach(l -> l.setTextAlignment(TextAlignment.CENTER));\n \t\tStream.of(labels).forEach(l -> l.setAlignment(Pos.CENTER));\n \t\tStream.of(labels).forEach(l -> l.setPrefWidth(TEXTFIELD_WIDTH));\n-\t\tGridPane grid = new GridPane();\n+\t\tfinal GridPane grid = new GridPane();\n \t\tfor (int d = 0; d < newv.length; ++d) {\n \t\t  final TextField lbl = new TextField(\"\" + newv[d]);\n \t\t  lbl.setEditable(false);\n@@ -182,12 +187,21 @@ public MetaPanel() {\n \tfinal GridPane rawMinMax = new GridPane();\n \trawMinMax.getColumnConstraints().add(cc);\n \trawMinMax.add(new Label(\"Intensity Range\"), 0, 0);\n-\trawMinMax.add(this.min, 1, 0);\n-\trawMinMax.add(this.max, 2, 0);\n-\tthis.min.setPromptText(\"min\");\n-\tthis.max.setPromptText(\"max\");\n-\tthis.min.setPrefWidth(TEXTFIELD_WIDTH);\n-\tthis.max.setPrefWidth(TEXTFIELD_WIDTH);\n+\trawMinMax.add(this.min.getTextField(), 1, 0);\n+\trawMinMax.add(this.max.getTextField(), 2, 0);\n+\n+\t/* restrict to decimal numbers only */\n+\tfinal EventHandler<KeyEvent> decimalCharFilter = event -> {\n+\t  if (!\".0123456789\".contains(event.getCharacter())) {\n+\t\tevent.consume();\n+\t  }\n+\t};\n+\tthis.min.getTextField().addEventFilter(KeyEvent.KEY_TYPED, decimalCharFilter);\n+\tthis.max.getTextField().addEventFilter(KeyEvent.KEY_TYPED, decimalCharFilter);\n+\tthis.min.getTextField().setPromptText(\"min\");\n+\tthis.max.getTextField().setPromptText(\"max\");\n+\tthis.min.getTextField().setPrefWidth(TEXTFIELD_WIDTH);\n+\tthis.max.getTextField().setPrefWidth(TEXTFIELD_WIDTH);\n \tthis.rawMeta.getChildren().add(rawMinMax);\n \n   }\n@@ -209,15 +223,8 @@ public void listenOnDimensions(final ObservableObjectValue<long[]> dimensions) {\n \n   public void listenOnMinMax(final DoubleProperty min, final DoubleProperty max) {\n \n-\tmin.addListener((obs, oldv, newv) -> {\n-\t  if (Double.isFinite(newv.doubleValue()))\n-\t\tthis.min.setText(Double.toString(newv.doubleValue()));\n-\t});\n-\n-\tmax.addListener((obs, oldv, newv) -> {\n-\t  if (Double.isFinite(newv.doubleValue()))\n-\t\tthis.max.setText(Double.toString(newv.doubleValue()));\n-\t});\n+\tthis.min.valueProperty().bindBidirectional(min);\n+\tthis.max.valueProperty().bindBidirectional(max);\n   }\n \n   public Node getPane() {\n@@ -260,14 +267,12 @@ public Change apply(final Change t) {\n \n   public double min() {\n \n-\tfinal String text = min.getText();\n-\treturn text.length() > 0 ? Double.parseDouble(min.getText()) : Double.NaN;\n+\treturn min.valueProperty().get();\n   }\n \n   public double max() {\n \n-\tfinal String text = max.getText();\n-\treturn text.length() > 0 ? Double.parseDouble(max.getText()) : Double.NaN;\n+\treturn max.valueProperty().get();\n   }\n \n   public void bindDataTypeTo(final ObjectProperty<TYPE> dataType) {\n@@ -289,7 +294,7 @@ private static void addToGrid(final GridPane grid, final int startCol, final int\n \n   private static void formatLabels(final Label... labels) {\n \n-\tfor (Label label : labels) {\n+\tfor (final Label label : labels) {\n \t  label.setAlignment(Pos.BASELINE_CENTER);\n \t  label.setPrefWidth(TEXTFIELD_WIDTH);\n \t}"
  },
  {
    "sha": "a2d4590fd068a248c85aa281553d50d94ff69733",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/BorderPaneWithStatusBars.kt",
    "status": "modified",
    "additions": 3,
    "deletions": 19,
    "changes": 22,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/BorderPaneWithStatusBars.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/BorderPaneWithStatusBars.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/BorderPaneWithStatusBars.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -21,6 +21,7 @@ import org.janelia.saalfeldlab.fx.ortho.OrthogonalViews.ViewerAndTransforms\n import org.janelia.saalfeldlab.fx.ui.Exceptions\n import org.janelia.saalfeldlab.fx.ui.ResizeOnLeftSide\n import org.janelia.saalfeldlab.fx.util.InvokeOnJavaFXApplicationThread\n+import org.janelia.saalfeldlab.paintera.PainteraDefaultHandlers.Companion.currentFocusHolder\n import org.janelia.saalfeldlab.paintera.config.*\n import org.janelia.saalfeldlab.paintera.control.actions.*\n import org.janelia.saalfeldlab.paintera.control.navigation.CoordinateDisplayListener\n@@ -294,8 +295,8 @@ class BorderPaneWithStatusBars(private val paintera: PainteraMainWindow) {\n             newv?.let {\n                 currentSourceStatus.textProperty().bind(\n                     Bindings.createStringBinding(\n-                        Callable {\n-                            if (it.statusTextProperty() != null && it.statusTextProperty().get() != null && !it.statusTextProperty().get().isEmpty())\n+                        {\n+                            if (it.statusTextProperty() != null && it.statusTextProperty().get() != null && it.statusTextProperty().get().isNotEmpty())\n                                 newv.statusTextProperty().get()\n                             else if (newv.nameProperty().get() != null)\n                                 newv.nameProperty().get()\n@@ -452,22 +453,5 @@ class BorderPaneWithStatusBars(private val paintera: PainteraMainWindow) {\n             ch.isHighlightProperty.bind(viewer.focusedProperty())\n             return ch\n         }\n-\n-        fun currentFocusHolder(views: OrthogonalViews<*>): ObservableObjectValue<ViewerAndTransforms?> {\n-            val tl = views.topLeft()\n-            val tr = views.topRight()\n-            val bl = views.bottomLeft()\n-            val focusTL = tl.viewer().focusedProperty()\n-            val focusTR = tr.viewer().focusedProperty()\n-            val focusBL = bl.viewer().focusedProperty()\n-\n-            return Bindings.createObjectBinding(\n-                Callable { if (focusTL.get()) tl else if (focusTR.get()) tr else if (focusBL.get()) bl else null },\n-                focusTL,\n-                focusTR,\n-                focusBL\n-            )\n-\n-        }\n     }\n }"
  },
  {
    "sha": "18c61e5589f0ca5ad1e8a74e83f4fbc1ac1c8652",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/Paintera.kt",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/Paintera.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/Paintera.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/Paintera.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -27,8 +27,9 @@ class Paintera : Application() {\n \n     override fun start(primaryStage: Stage) {\n         val painteraArgs = PainteraCommandLineArgs()\n-        val cmd = CommandLine(painteraArgs)\n-            .also { it.registerConverter(Level::class.java, LogUtils.Logback.Levels.CmdLineConverter()) }\n+        val cmd = CommandLine(painteraArgs).apply {\n+            registerConverter(Level::class.java, LogUtils.Logback.Levels.CmdLineConverter())\n+        }\n         val exitCode = cmd.execute(*parameters.raw.toTypedArray())\n         val parsedSuccessfully = (cmd.getExecutionResult() ?: false) && exitCode == 0\n         if (!parsedSuccessfully) {"
  },
  {
    "sha": "53a83c2967fd80b2e90600df250ad2c9f1fa4236",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/PainteraDefaultHandlers.kt",
    "status": "modified",
    "additions": 42,
    "deletions": 11,
    "changes": 53,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/PainteraDefaultHandlers.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/PainteraDefaultHandlers.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/PainteraDefaultHandlers.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -14,11 +14,17 @@ import javafx.beans.binding.ObjectBinding\n import javafx.beans.property.SimpleObjectProperty\n import javafx.beans.value.ChangeListener\n import javafx.beans.value.ObservableObjectValue\n+import javafx.beans.value.ObservableValue\n import javafx.event.Event\n import javafx.event.EventHandler\n import javafx.scene.Node\n import javafx.scene.control.ContextMenu\n-import javafx.scene.input.*\n+import javafx.scene.input.KeyCode\n+import javafx.scene.input.KeyCodeCombination\n+import javafx.scene.input.KeyCombination\n+import javafx.scene.input.KeyEvent\n+import javafx.scene.input.MouseButton\n+import javafx.scene.input.MouseEvent\n import javafx.scene.transform.Affine\n import net.imglib2.FinalRealInterval\n import net.imglib2.Interval\n@@ -37,10 +43,15 @@ import org.janelia.saalfeldlab.fx.ortho.OrthogonalViews.ViewerAndTransforms\n import org.janelia.saalfeldlab.fx.ui.Exceptions\n import org.janelia.saalfeldlab.paintera.config.BookmarkConfig\n import org.janelia.saalfeldlab.paintera.config.BookmarkSelectionDialog\n-import org.janelia.saalfeldlab.paintera.control.*\n+import org.janelia.saalfeldlab.paintera.control.FitToInterval\n+import org.janelia.saalfeldlab.paintera.control.Navigation\n+import org.janelia.saalfeldlab.paintera.control.OrthoViewCoordinateDisplayListener\n+import org.janelia.saalfeldlab.paintera.control.OrthogonalViewsValueDisplayListener\n+import org.janelia.saalfeldlab.paintera.control.RunWhenFirstElementIsAdded\n import org.janelia.saalfeldlab.paintera.control.actions.MenuActionType\n import org.janelia.saalfeldlab.paintera.control.actions.NavigationActionType\n import org.janelia.saalfeldlab.paintera.control.navigation.DisplayTransformUpdateOnResize\n+import org.janelia.saalfeldlab.paintera.data.mask.MaskedSource\n import org.janelia.saalfeldlab.paintera.ui.ToggleMaximize\n import org.janelia.saalfeldlab.paintera.ui.opendialog.menu.OpenDialogMenu\n import org.slf4j.LoggerFactory\n@@ -90,8 +101,8 @@ class PainteraDefaultHandlers(\n     private val navigation = Navigation(\n         baseView.keyAndMouseBindings.navigationConfig,\n         baseView.manager(),\n-        java.util.function.Function { viewerToTransforms[it]!!.displayTransform() },\n-        java.util.function.Function { viewerToTransforms[it]!!.globalToViewerTransform() },\n+        { viewerToTransforms[it]!!.displayTransform() },\n+        { viewerToTransforms[it]!!.globalToViewerTransform() },\n         keyTracker,\n         baseView.allowedActionsProperty()\n     )\n@@ -106,7 +117,7 @@ class PainteraDefaultHandlers(\n     private val multiBoxVisibilities = mouseInsidePropertiesTopLeftTropRightBottomLeft\n         .map { mouseInside ->\n             Bindings.createBooleanBinding(\n-                Callable {\n+                {\n                     when (properties.multiBoxOverlayConfig.visibility) {\n                         MultiBoxOverlayConfig.Visibility.ON -> true\n                         MultiBoxOverlayConfig.Visibility.OFF -> false\n@@ -161,22 +172,22 @@ class PainteraDefaultHandlers(\n \n         val currentState = sourceInfo.currentState()\n         this.sourceSpecificGlobalEventHandler = Bindings.createObjectBinding(\n-            Callable { currentState.get()?.stateSpecificGlobalEventHandler(baseView, keyTracker) ?: DEFAULT_HANDLER },\n+            { currentState.get()?.stateSpecificGlobalEventHandler(baseView, keyTracker) ?: DEFAULT_HANDLER },\n             currentState\n         )\n \n         this.sourceSpecificGlobalEventFilter = Bindings.createObjectBinding(\n-            Callable { currentState.get()?.stateSpecificGlobalEventFilter(baseView, keyTracker) ?: DEFAULT_HANDLER },\n+            { currentState.get()?.stateSpecificGlobalEventFilter(baseView, keyTracker) ?: DEFAULT_HANDLER },\n             currentState\n         )\n \n         this.sourceSpecificViewerEventHandler = Bindings.createObjectBinding(\n-            Callable { currentState.get()?.stateSpecificViewerEventHandler(baseView, keyTracker) ?: DEFAULT_HANDLER },\n+            { currentState.get()?.stateSpecificViewerEventHandler(baseView, keyTracker) ?: DEFAULT_HANDLER },\n             currentState\n         )\n \n         this.sourceSpecificViewerEventFilter = Bindings.createObjectBinding(\n-            Callable { currentState.get()?.stateSpecificViewerEventFilter(baseView, keyTracker) ?: DEFAULT_HANDLER },\n+            { currentState.get()?.stateSpecificViewerEventFilter(baseView, keyTracker) ?: DEFAULT_HANDLER },\n             currentState\n         )\n \n@@ -193,6 +204,26 @@ class PainteraDefaultHandlers(\n         paneWithStatus.pane.addEventFilter(Event.ANY, this.getSourceSpecificGlobalEventFilter())\n \n \n+        val disableListener: (observable: ObservableValue<out Boolean>, oldValue: Boolean, newValue: Boolean) -> Unit = { _, _, newValue ->\n+            if (newValue) {\n+                paintera.baseView.allowedActionsProperty().disable()\n+            } else {\n+                paintera.baseView.allowedActionsProperty().enable()\n+            }\n+        }\n+\n+        sourceInfo.currentSourceProperty().addListener { observable, oldsource, newSource ->\n+            (oldsource as? MaskedSource<*, *>)?.apply {\n+                isBusyProperty.removeListener(disableListener)\n+            }\n+            (newSource as? MaskedSource<*, *>)?.apply {\n+                isBusyProperty.addListener(disableListener)\n+            }\n+        }\n+\n+\n+\n+\n         grabFocusOnMouseOver(\n             baseView.orthogonalViews().topLeft().viewer(),\n             baseView.orthogonalViews().topRight().viewer(),\n@@ -205,8 +236,8 @@ class PainteraDefaultHandlers(\n             baseView,\n             keyTracker,\n             projectDirectory,\n-            DoubleSupplier { this.mouseTracker.x },\n-            DoubleSupplier { this.mouseTracker.y },\n+            { this.mouseTracker.x },\n+            { this.mouseTracker.y },\n             KeyCode.CONTROL,\n             KeyCode.O\n         )"
  },
  {
    "sha": "1a2875944273310aeb986e96c37312b3fa010b76",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/config/ScaleBarOverlayConfigNode.kt",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/config/ScaleBarOverlayConfigNode.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/config/ScaleBarOverlayConfigNode.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/config/ScaleBarOverlayConfigNode.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -11,7 +11,6 @@ import javafx.scene.layout.Priority\n import javafx.scene.text.Font\n import org.janelia.saalfeldlab.fx.ui.NumberField\n import org.janelia.saalfeldlab.fx.ui.ObjectField\n-import java.util.function.DoublePredicate\n \n class ScaleBarOverlayConfigNode() : TitledPane(\"Scale Bar\", null) {\n \n@@ -21,33 +20,33 @@ class ScaleBarOverlayConfigNode() : TitledPane(\"Scale Bar\", null) {\n \n     private val isShowing = CheckBox()\n \n-    private val targetScaleBarLength = NumberField.doubleField(1.0, DoublePredicate { v -> true }, *ObjectField.SubmitOn.values())\n+    private val targetScaleBarLength = NumberField.doubleField(1.0, { v -> true }, *ObjectField.SubmitOn.values())\n \n     private val foregroundColorPicker = ColorPicker()\n \n     private val backgroundColorPicker = ColorPicker()\n \n     private val font = SimpleObjectProperty(Font(\"SansSerif\", 18.0))\n \n-    private val fontSize = NumberField.doubleField(font.get().size, DoublePredicate { v -> v > 0.0 }, *ObjectField.SubmitOn.values())\n+    private val fontSize = NumberField.doubleField(font.get().size, { v -> v > 0.0 }, *ObjectField.SubmitOn.values())\n \n     init {\n         val grid = GridPane()\n         content = grid\n         graphic = isShowing\n         isExpanded = false\n         grid.add(Label(\"Scale Bar Size\"), 0, 0)\n-        grid.add(targetScaleBarLength.textField(), 1, 0)\n+        grid.add(targetScaleBarLength.textField, 1, 0)\n         grid.add(Label(\"Font Size\"), 0, 1)\n-        grid.add(fontSize.textField(), 1, 1)\n+        grid.add(fontSize.textField, 1, 1)\n         grid.add(Label(\"Foreground Color\"), 0, 2)\n         grid.add(Label(\"Background Color\"), 0, 3)\n         grid.add(foregroundColorPicker, 1, 2)\n         grid.add(backgroundColorPicker, 1, 3)\n         grid.hgap = 5.0\n \n-        GridPane.setHgrow(targetScaleBarLength.textField(), Priority.ALWAYS)\n-        GridPane.setHgrow(fontSize.textField(), Priority.ALWAYS)\n+        GridPane.setHgrow(targetScaleBarLength.textField, Priority.ALWAYS)\n+        GridPane.setHgrow(fontSize.textField, Priority.ALWAYS)\n         GridPane.setHgrow(foregroundColorPicker, Priority.ALWAYS)\n         GridPane.setHgrow(backgroundColorPicker, Priority.ALWAYS)\n "
  },
  {
    "sha": "7118bfdb4e335b134293afadd8b9191522843352",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/state/ChannelSourceStateConverterNode.kt",
    "status": "modified",
    "additions": 28,
    "deletions": 40,
    "changes": 68,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/state/ChannelSourceStateConverterNode.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/state/ChannelSourceStateConverterNode.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/state/ChannelSourceStateConverterNode.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -4,19 +4,8 @@ import javafx.beans.property.SimpleObjectProperty\n import javafx.event.EventHandler\n import javafx.geometry.Pos\n import javafx.scene.Node\n-import javafx.scene.control.Alert\n-import javafx.scene.control.Button\n-import javafx.scene.control.ButtonType\n-import javafx.scene.control.ColorPicker\n-import javafx.scene.control.Label\n-import javafx.scene.control.MenuButton\n-import javafx.scene.control.TitledPane\n-import javafx.scene.control.Tooltip\n-import javafx.scene.layout.GridPane\n-import javafx.scene.layout.HBox\n-import javafx.scene.layout.Priority\n-import javafx.scene.layout.Region\n-import javafx.scene.layout.VBox\n+import javafx.scene.control.*\n+import javafx.scene.layout.*\n import javafx.scene.paint.Color\n import javafx.stage.Modality\n import net.imglib2.converter.ARGBCompositeColorConverter\n@@ -31,7 +20,6 @@ import org.janelia.saalfeldlab.paintera.ui.PainteraAlerts\n import org.janelia.saalfeldlab.util.Colors\n import org.slf4j.LoggerFactory\n import java.lang.invoke.MethodHandles\n-import java.util.function.DoublePredicate\n \n class ChannelSourceStateConverterNode(private val converter: ARGBCompositeColorConverter<*, *, *>) {\n \n@@ -62,29 +50,29 @@ class ChannelSourceStateConverterNode(private val converter: ARGBCompositeColorC\n             for (channel in 0 until numChannels) {\n                 val minField = NumberField.doubleField(\n                     min[channel].get(),\n-                    DoublePredicate { d -> true },\n+                    { d -> true },\n                     ObjectField.SubmitOn.ENTER_PRESSED,\n                     ObjectField.SubmitOn.FOCUS_LOST\n                 )\n                 val maxField = NumberField.doubleField(\n                     max[channel].get(),\n-                    DoublePredicate { d -> true },\n+                    { d -> true },\n                     ObjectField.SubmitOn.ENTER_PRESSED,\n                     ObjectField.SubmitOn.FOCUS_LOST\n                 )\n                 minField.valueProperty().bindBidirectional(min[channel])\n                 maxField.valueProperty().bindBidirectional(max[channel])\n-                minField.textField().tooltip = Tooltip(\"min\")\n-                maxField.textField().tooltip = Tooltip(\"max\")\n-                val minMaxBox = HBox(minField.textField(), maxField.textField())\n+                minField.textField.tooltip = Tooltip(\"min\")\n+                maxField.textField.tooltip = Tooltip(\"max\")\n+                val minMaxBox = HBox(minField.textField, maxField.textField)\n \n                 val alphaSliderWithField = NumericSliderWithField(0.0, 1.0, this.channelAlphaProperty[channel].get())\n-                alphaSliderWithField.slider().valueProperty().bindBidirectional(this.channelAlphaProperty[channel])\n-                alphaSliderWithField.textField().minWidth = 48.0\n-                alphaSliderWithField.textField().maxWidth = 48.0\n-                val alphaBox = HBox(alphaSliderWithField.slider(), alphaSliderWithField.textField())\n-                Tooltip.install(alphaSliderWithField.slider(), Tooltip(\"alpha\"))\n-                HBox.setHgrow(alphaSliderWithField.slider(), Priority.ALWAYS)\n+                alphaSliderWithField.slider.valueProperty().bindBidirectional(this.channelAlphaProperty[channel])\n+                alphaSliderWithField.textField.minWidth = 48.0\n+                alphaSliderWithField.textField.maxWidth = 48.0\n+                val alphaBox = HBox(alphaSliderWithField.slider, alphaSliderWithField.textField)\n+                Tooltip.install(alphaSliderWithField.slider, Tooltip(\"alpha\"))\n+                HBox.setHgrow(alphaSliderWithField.slider, Priority.ALWAYS)\n \n                 val channelPane = TitledPanes.createCollapsed(String.format(\"Channel % 2d\", channel), VBox(minMaxBox, alphaBox))\n                 channelsBox.children.add(channelPane)\n@@ -96,12 +84,12 @@ class ChannelSourceStateConverterNode(private val converter: ARGBCompositeColorC\n             val channels = TitledPanes.createCollapsed(\"Channels\", channelsBox)\n \n             val alphaSliderWithField = NumericSliderWithField(0.0, 1.0, this.alphaProperty.get())\n-            alphaSliderWithField.slider().valueProperty().bindBidirectional(this.alphaProperty)\n-            alphaSliderWithField.textField().minWidth = 48.0\n-            alphaSliderWithField.textField().maxWidth = 48.0\n-            val alphaBox = HBox(alphaSliderWithField.slider(), alphaSliderWithField.textField())\n-            Tooltip.install(alphaSliderWithField.slider(), Tooltip(\"alpha\"))\n-            HBox.setHgrow(alphaSliderWithField.slider(), Priority.ALWAYS)\n+            alphaSliderWithField.slider.valueProperty().bindBidirectional(this.alphaProperty)\n+            alphaSliderWithField.textField.minWidth = 48.0\n+            alphaSliderWithField.textField.maxWidth = 48.0\n+            val alphaBox = HBox(alphaSliderWithField.slider, alphaSliderWithField.textField)\n+            Tooltip.install(alphaSliderWithField.slider, Tooltip(\"alpha\"))\n+            HBox.setHgrow(alphaSliderWithField.slider, Priority.ALWAYS)\n \n             val setButton = MenuButton(\n                 \"Set\",\n@@ -180,11 +168,11 @@ class ChannelSourceStateConverterNode(private val converter: ARGBCompositeColorC\n         val maxBackUp = max.map { it.value }\n         val minLabel = Label(\"Min\")\n         val maxLabel = Label(\"Min\")\n-        val minField = NumberField.doubleField(min[0].get(), DoublePredicate { m -> true }, ObjectField.SubmitOn.ENTER_PRESSED, ObjectField.SubmitOn.FOCUS_LOST)\n-        val maxField = NumberField.doubleField(max[0].get(), DoublePredicate { m -> true }, ObjectField.SubmitOn.ENTER_PRESSED, ObjectField.SubmitOn.FOCUS_LOST)\n+        val minField = NumberField.doubleField(min[0].get(), { m -> true }, ObjectField.SubmitOn.ENTER_PRESSED, ObjectField.SubmitOn.FOCUS_LOST)\n+        val maxField = NumberField.doubleField(max[0].get(), { m -> true }, ObjectField.SubmitOn.ENTER_PRESSED, ObjectField.SubmitOn.FOCUS_LOST)\n \n-        minField.textField().prefWidth = 50.0\n-        maxField.textField().prefWidth = 50.0\n+        minField.textField.prefWidth = 50.0\n+        maxField.textField.prefWidth = 50.0\n \n         minField.valueProperty().addListener { _, _, new -> min.forEach { it.value = new.toDouble() } }\n         maxField.valueProperty().addListener { _, _, new -> max.forEach { it.value = new.toDouble() } }\n@@ -195,8 +183,8 @@ class ChannelSourceStateConverterNode(private val converter: ARGBCompositeColorC\n         val grid = GridPane()\n         grid.add(minLabel, 0, 0)\n         grid.add(maxLabel, 0, 1)\n-        grid.add(minField.textField(), 1, 0)\n-        grid.add(maxField.textField(), 1, 1)\n+        grid.add(minField.textField, 1, 0)\n+        grid.add(maxField.textField, 1, 1)\n \n         val dialog = Alert(Alert.AlertType.CONFIRMATION)\n         dialog.isResizable = true\n@@ -223,9 +211,9 @@ class ChannelSourceStateConverterNode(private val converter: ARGBCompositeColorC\n         private val LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass())\n \n         private const val DESCRIPTION = \"\" +\n-            \"Convert multi-channel real values into RGB color space with the contrast range \" +\n-            \"specified by the min and max values. Each channel is mapped to a user-specified\" +\n-            \"color. \"\n+                \"Convert multi-channel real values into RGB color space with the contrast range \" +\n+                \"specified by the min and max values. Each channel is mapped to a user-specified\" +\n+                \"color. \"\n     }\n \n }"
  },
  {
    "sha": "45f08c1cec6fa5aa2b54ae362d1ec49e02bfc6fa",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/state/label/ConnectomicsLabelState.kt",
    "status": "modified",
    "additions": 63,
    "deletions": 47,
    "changes": 110,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/state/label/ConnectomicsLabelState.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/state/label/ConnectomicsLabelState.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/state/label/ConnectomicsLabelState.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -2,10 +2,19 @@ package org.janelia.saalfeldlab.paintera.state.label\n \n import bdv.util.volatiles.SharedQueue\n import bdv.viewer.Interpolation\n-import com.google.gson.*\n+import com.google.gson.JsonDeserializationContext\n+import com.google.gson.JsonDeserializer\n+import com.google.gson.JsonElement\n+import com.google.gson.JsonObject\n+import com.google.gson.JsonSerializationContext\n import javafx.application.Platform\n import javafx.beans.InvalidationListener\n-import javafx.beans.property.*\n+import javafx.beans.property.BooleanProperty\n+import javafx.beans.property.ObjectProperty\n+import javafx.beans.property.SimpleBooleanProperty\n+import javafx.beans.property.SimpleObjectProperty\n+import javafx.beans.property.SimpleStringProperty\n+import javafx.beans.property.StringProperty\n import javafx.event.Event\n import javafx.event.EventHandler\n import javafx.geometry.Insets\n@@ -46,7 +55,6 @@ import org.janelia.saalfeldlab.paintera.composition.ARGBCompositeAlphaYCbCr\n import org.janelia.saalfeldlab.paintera.composition.Composite\n import org.janelia.saalfeldlab.paintera.config.input.KeyAndMouseBindings\n import org.janelia.saalfeldlab.paintera.control.ShapeInterpolationMode\n-import org.janelia.saalfeldlab.paintera.control.assignment.FragmentSegmentAssignmentState\n import org.janelia.saalfeldlab.paintera.control.lock.LockedSegmentsOnlyLocal\n import org.janelia.saalfeldlab.paintera.control.selection.SelectedIds\n import org.janelia.saalfeldlab.paintera.control.selection.SelectedSegments\n@@ -59,7 +67,14 @@ import org.janelia.saalfeldlab.paintera.serialization.GsonExtensions\n import org.janelia.saalfeldlab.paintera.serialization.PainteraSerialization\n import org.janelia.saalfeldlab.paintera.serialization.SerializationHelpers\n import org.janelia.saalfeldlab.paintera.serialization.StatefulSerializer\n-import org.janelia.saalfeldlab.paintera.state.*\n+import org.janelia.saalfeldlab.paintera.state.FloodFillState\n+import org.janelia.saalfeldlab.paintera.state.LabelSourceStateIdSelectorHandler\n+import org.janelia.saalfeldlab.paintera.state.LabelSourceStateMergeDetachHandler\n+import org.janelia.saalfeldlab.paintera.state.LabelSourceStatePaintHandler\n+import org.janelia.saalfeldlab.paintera.state.LabelSourceStatePreferencePaneNode\n+import org.janelia.saalfeldlab.paintera.state.SourceInfo\n+import org.janelia.saalfeldlab.paintera.state.SourceState\n+import org.janelia.saalfeldlab.paintera.state.SourceStateWithBackend\n import org.janelia.saalfeldlab.paintera.stream.ARGBStreamSeedSetter\n import org.janelia.saalfeldlab.paintera.stream.HighlightingStreamConverter\n import org.janelia.saalfeldlab.paintera.stream.ModalGoldenAngleSaturatedHighlightingARGBStream\n@@ -73,7 +88,11 @@ import org.slf4j.LoggerFactory\n import java.lang.invoke.MethodHandles\n import java.lang.reflect.Type\n import java.util.concurrent.ExecutorService\n-import java.util.function.*\n+import java.util.function.BooleanSupplier\n+import java.util.function.Consumer\n+import java.util.function.IntFunction\n+import java.util.function.LongFunction\n+import java.util.function.Supplier\n \n class ConnectomicsLabelState<D : IntegerType<D>, T>(\n     override val backend: ConnectomicsLabelBackend<D, T>,\n@@ -147,16 +166,13 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n \n     private val commitHandler = CommitHandler(this)\n \n-    private val shapeInterpolationMode = source.let {\n-        if (it is MaskedSource<D, *>)\n-            ShapeInterpolationMode(it, Runnable { refreshMeshes() }, selectedIds, idService, converter, fragmentSegmentAssignment)\n-        else\n-            null\n+    private val shapeInterpolationMode = (source as? MaskedSource<D, *>)?.let {\n+        ShapeInterpolationMode(it, { refreshMeshes() }, selectedIds, idService, converter, fragmentSegmentAssignment)\n     }\n \n     private val streamSeedSetter = ARGBStreamSeedSetter(stream)\n \n-    private val showOnlySelectedInStreamToggle = ShowOnlySelectedInStreamToggle(stream);\n+    private val showOnlySelectedInStreamToggle = ShowOnlySelectedInStreamToggle(stream)\n \n     private fun refreshMeshes() = meshManager.refreshMeshes()\n \n@@ -218,40 +234,40 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n             KeyEvent.KEY_PRESSED,\n             EventFX.KEY_PRESSED(\n                 BindingKeys.REFRESH_MESHES,\n-                Consumer { e ->\n-                    e.consume()\n+                {\n+                    it.consume()\n                     LOG.debug(\"Key event triggered refresh meshes\")\n                     refreshMeshes()\n                 },\n-                Predicate { keyBindings[BindingKeys.REFRESH_MESHES]!!.matches(it) })\n+                { keyBindings[BindingKeys.REFRESH_MESHES]!!.matches(it) })\n         )\n         handler.addEventHandler(\n             KeyEvent.KEY_PRESSED,\n             EventFX.KEY_PRESSED(\n                 BindingKeys.CANCEL_3D_FLOODFILL,\n-                Consumer { e ->\n-                    e.consume()\n+                {\n+                    it.consume()\n                     val state = floodFillState.get()\n                     state?.interrupt?.run()\n                 },\n-                Predicate { e -> floodFillState.get() != null && keyBindings[BindingKeys.CANCEL_3D_FLOODFILL]!!.matches(e) })\n+                { e -> floodFillState.get() != null && keyBindings[BindingKeys.CANCEL_3D_FLOODFILL]!!.matches(e) })\n         )\n         handler.addEventHandler(\n             KeyEvent.KEY_PRESSED, EventFX.KEY_PRESSED(\n                 BindingKeys.TOGGLE_NON_SELECTED_LABELS_VISIBILITY,\n-                Consumer { e ->\n-                    e.consume()\n+                {\n+                    it.consume()\n                     this.showOnlySelectedInStreamToggle.toggleNonSelectionVisibility()\n                 },\n-                Predicate { keyBindings[BindingKeys.TOGGLE_NON_SELECTED_LABELS_VISIBILITY]!!.matches(it) })\n+                { keyBindings[BindingKeys.TOGGLE_NON_SELECTED_LABELS_VISIBILITY]!!.matches(it) })\n         )\n         handler.addEventHandler(\n             KeyEvent.KEY_PRESSED,\n-            streamSeedSetter.incrementHandler(Supplier { keyBindings[BindingKeys.ARGB_STREAM_INCREMENT_SEED]!!.primaryCombination })\n+            streamSeedSetter.incrementHandler({ keyBindings[BindingKeys.ARGB_STREAM_INCREMENT_SEED]!!.primaryCombination })\n         )\n         handler.addEventHandler(\n             KeyEvent.KEY_PRESSED,\n-            streamSeedSetter.decrementHandler(Supplier { keyBindings[BindingKeys.ARGB_STREAM_DECREMENT_SEED]!!.primaryCombination })\n+            streamSeedSetter.decrementHandler({ keyBindings[BindingKeys.ARGB_STREAM_DECREMENT_SEED]!!.primaryCombination })\n         )\n         val listHandler = DelegateEventHandlers.listHandler<Event>()\n         listHandler.addHandler(handler)\n@@ -338,11 +354,11 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n             this,\n             sourceInfo.indexOf(this.dataSource),\n             false,\n-            BiFunction { index, name ->\n+            { index, name ->\n                 String.format(\n                     \"\" +\n-                        \"Removing source %d: %s. \" +\n-                        \"Uncommitted changes to the canvas and/or fragment-segment assignment will be lost if skipped.\", index, name\n+                            \"Removing source %d: %s. \" +\n+                            \"Uncommitted changes to the canvas and/or fragment-segment assignment will be lost if skipped.\", index, name\n                 )\n             },\n             false,\n@@ -355,11 +371,11 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n             this,\n             paintera.sourceInfo().indexOf(this.dataSource),\n             false,\n-            BiFunction { index, name ->\n+            { index, name ->\n                 \"Shutting down Paintera. \" +\n-                    \"Uncommitted changes to the canvas will be lost for source $index: $name if skipped. \" +\n-                    \"Uncommitted changes to the fragment-segment-assigment will be stored in the Paintera project (if any) \" +\n-                    \"but can be committed to the data backend, as well.\"\n+                        \"Uncommitted changes to the canvas will be lost for source $index: $name if skipped. \" +\n+                        \"Uncommitted changes to the fragment-segment-assigment will be stored in the Paintera project (if any) \" +\n+                        \"but can be committed to the data backend, as well.\"\n             },\n             false,\n             \"_Skip\"\n@@ -398,7 +414,7 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n                     activeIdText.append(\"Fragment: $lastSelectedLabelId\")\n                     lastSelectedLabelColorRectTooltip.text = activeIdText.toString()\n                 } else {\n-                    lastSelectedLabelColorRect.isVisible = false;\n+                    lastSelectedLabelColorRect.isVisible = false\n                 }\n             }\n         }\n@@ -441,11 +457,11 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n \n         if (this.dataSource is MaskedSource<*, *>) {\n             val maskedSource = this.dataSource as MaskedSource<D, *>\n-            maskedSource.isApplyingMaskProperty().addListener { _, _, newv ->\n+            maskedSource.isApplyingMaskProperty.addListener { _, _, newv ->\n                 InvokeOnJavaFXApplicationThread.invoke {\n                     paintingProgressIndicator.isVisible = newv\n                     if (newv) {\n-                        val currentMask = maskedSource.getCurrentMask()\n+                        val currentMask = maskedSource.currentMask\n                         if (currentMask != null)\n                             paintingProgressIndicatorTooltip.text = \"Applying mask to canvas, label ID: \" + currentMask.info.value.get()\n                     }\n@@ -461,7 +477,7 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n \n                     val floodFillContextMenuCancelItem = MenuItem(\"Cancel\")\n                     if (newv.interrupt != null) {\n-                        floodFillContextMenuCancelItem.setOnAction { event -> newv.interrupt.run() }\n+                        floodFillContextMenuCancelItem.setOnAction { newv.interrupt.run() }\n                     } else {\n                         floodFillContextMenuCancelItem.isDisable = true\n                     }\n@@ -577,23 +593,23 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n         val metaDataContents = VBox(backendMeta) // , resolutionPane, offsetPane)\n \n         val helpDialog = PainteraAlerts\n-            .alert(Alert.AlertType.INFORMATION, true)\n-            .also { it.initModality(Modality.NONE) }\n-            .also { it.headerText = \"Meta data for label source.\" }\n-            .also { it.contentText = \"TODO\" }\n+            .alert(Alert.AlertType.INFORMATION, true).apply {\n+                initModality(Modality.NONE)\n+                headerText = \"Meta data for label source.\"\n+                contentText = \"TODO\"\n+            }\n         val tpGraphics = HBox(\n             Label(\"Meta Data\"),\n             Region().also { HBox.setHgrow(it, Priority.ALWAYS) },\n-            Button(\"?\").also { bt -> bt.onAction = EventHandler { helpDialog.show() } })\n-            .also { it.alignment = Pos.CENTER }\n+            Button(\"?\").also { bt -> bt.onAction = EventHandler { helpDialog.show() } }\n+        ).apply { alignment = Pos.CENTER }\n         val metaData = with(TitledPaneExtensions) {\n-            TitledPanes\n-                .createCollapsed(null, metaDataContents)\n-                .also { it.graphicsOnly(tpGraphics) }\n-                .also { it.alignment = Pos.CENTER_RIGHT }\n+            TitledPanes.createCollapsed(null, metaDataContents).apply {\n+                graphicsOnly(tpGraphics)\n+                alignment = Pos.CENTER_RIGHT\n+            }\n         }\n-\n-        return node.also { it.children.add(metaData) }\n+        return node.apply { children.add(metaData) }\n     }\n \n     companion object {\n@@ -644,11 +660,11 @@ class ConnectomicsLabelState<D : IntegerType<D>, T>(\n         }\n \n         private fun equalMaskForIntegerType(): LongFunction<Converter<IntegerType<*>, BoolType>> = LongFunction {\n-            Converter { s: IntegerType<*>, t: BoolType -> t.set(s.getIntegerLong() == it) }\n+            Converter { s: IntegerType<*>, t: BoolType -> t.set(s.integerLong == it) }\n         }\n \n         private fun equalMaskForRealType(): LongFunction<Converter<RealType<*>, BoolType>> = LongFunction {\n-            Converter { s: RealType<*>, t: BoolType -> t.set(s.getRealDouble() == it.toDouble()) }\n+            Converter { s: RealType<*>, t: BoolType -> t.set(s.realDouble == it.toDouble()) }\n         }\n \n     }"
  },
  {
    "sha": "42947c4fd6582c2d28e14daa81c6c9521ef55d77",
    "filename": "src/main/kotlin/org/janelia/saalfeldlab/paintera/stream/HighlightingStreamConverterConfigNode.kt",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/saalfeldlab/paintera/blob/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/stream/HighlightingStreamConverterConfigNode.kt",
    "raw_url": "https://github.com/saalfeldlab/paintera/raw/b93d7586bb87d425cee0e80d1c426ee54d39ed62/src/main/kotlin/org/janelia/saalfeldlab/paintera/stream/HighlightingStreamConverterConfigNode.kt",
    "contents_url": "https://api.github.com/repos/saalfeldlab/paintera/contents/src/main/kotlin/org/janelia/saalfeldlab/paintera/stream/HighlightingStreamConverterConfigNode.kt?ref=b93d7586bb87d425cee0e80d1c426ee54d39ed62",
    "patch": "@@ -11,20 +11,17 @@ import javafx.scene.control.CheckBox\n import javafx.scene.control.ColorPicker\n import javafx.scene.control.Label\n import javafx.scene.control.Slider\n-import javafx.scene.control.Spinner\n import javafx.scene.control.TextField\n import javafx.scene.control.TitledPane\n import javafx.scene.control.Tooltip\n import javafx.scene.layout.GridPane\n import javafx.scene.layout.HBox\n import javafx.scene.layout.Priority\n import javafx.scene.layout.Region\n-import javafx.scene.layout.StackPane\n import javafx.scene.layout.VBox\n import javafx.scene.paint.Color\n import javafx.stage.Modality\n import javafx.util.converter.NumberStringConverter\n-import org.janelia.saalfeldlab.fx.Buttons\n import org.janelia.saalfeldlab.fx.Labels\n import org.janelia.saalfeldlab.fx.TitledPaneExtensions\n import org.janelia.saalfeldlab.fx.ui.NumberField"
  }
]
