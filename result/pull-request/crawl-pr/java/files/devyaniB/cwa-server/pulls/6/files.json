[
  {
    "sha": "de6f9680867c382a03b2ff719177e99ee11b2a57",
    "filename": ".env",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/.env",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/.env",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/.env?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -12,6 +12,9 @@ POSTGRES_DISTRIBUTION_PASSWORD=local_setup_distribution\n POSTGRES_SUBMISSION_USER=local_setup_submission\n POSTGRES_SUBMISSION_PASSWORD=local_setup_submission\n \n+POSTGRES_CALLBACK_USER=local_setup_callback\n+POSTGRES_CALLBACK_PASSWORD=local_setup_callback\n+\n POSTGRES_FLYWAY_USER=local_setup_flyway\n POSTGRES_FLYWAY_PASSWORD=local_setup_flyway\n "
  },
  {
    "sha": "57caf070257efa1f4b39bf4e88eaa765cb3dd62a",
    "filename": ".mvn/maven.config",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/.mvn/maven.config",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/.mvn/maven.config",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/.mvn/maven.config?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -1,4 +1,4 @@\n--Drevision=1.3.0-SNAPSHOT\n+-Drevision=1.6.0-FED-SNAPSHOT\n -Dlicense.projectName=Corona-Warn-App\n -Dlicense.inceptionYear=2020\n -Dlicense.licenseName=apache_v2"
  },
  {
    "sha": "40d75cfb083f1dcc85c52b5e0b85646209354209",
    "filename": "common/persistence/pom.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 21,
    "changes": 32,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/pom.xml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/pom.xml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/pom.xml?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -1,18 +1,15 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <parent>\n-    <groupId>org.springframework.boot</groupId>\n-    <artifactId>spring-boot-starter-parent</artifactId>\n-    <version>2.3.1.RELEASE</version>\n-    <relativePath></relativePath>\n+    <artifactId>common</artifactId>\n+    <groupId>org.opencwa</groupId>\n+    <version>${revision}</version>\n+    <relativePath>../pom.xml</relativePath>\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n \n-  <groupId>org.opencwa</groupId>\n   <artifactId>persistence</artifactId>\n-  <version>${revision}</version>\n \n   <organization>\n     <name>SAP SE</name>\n@@ -73,43 +70,32 @@\n     <dependency>\n       <groupId>org.flywaydb</groupId>\n       <artifactId>flyway-core</artifactId>\n-      <version>6.4.3</version>\n     </dependency>\n     <dependency>\n       <groupId>org.postgresql</groupId>\n       <artifactId>postgresql</artifactId>\n-      <version>42.2.13</version>\n       <scope>runtime</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.testcontainers</groupId>\n       <artifactId>postgresql</artifactId>\n-      <version>1.14.3</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <!-- https://nvd.nist.gov/vuln/detail/CVE-2020-9488 -->\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-core</artifactId>\n-      <version>2.13.3</version>\n     </dependency>\n     <dependency>\n-      <!-- https://nvd.nist.gov/vuln/detail/CVE-2020-9488 -->\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-api</artifactId>\n-      <version>2.13.3</version>\n     </dependency>\n     <dependency>\n-      <!-- Due to https://nvd.nist.gov/vuln/detail/CVE-2020-10683 -->\n       <groupId>org.dom4j</groupId>\n       <artifactId>dom4j</artifactId>\n-      <version>2.1.3</version>\n     </dependency>\n     <dependency>\n-      <!-- https://nvd.nist.gov/vuln/detail/CVE-2017-18640 -->\n       <groupId>org.yaml</groupId>\n       <artifactId>snakeyaml</artifactId>\n-      <version>1.26</version>\n     </dependency>\n   </dependencies>\n \n@@ -175,12 +161,16 @@\n           <execution>\n             <id>flatten</id>\n             <phase>process-resources</phase>\n-            <goals><goal>flatten</goal></goals>\n+            <goals>\n+              <goal>flatten</goal>\n+            </goals>\n           </execution>\n           <execution>\n             <id>flatten-clean</id>\n             <phase>clean</phase>\n-            <goals><goal>clean</goal></goals>\n+            <goals>\n+              <goal>clean</goal>\n+            </goals>\n           </execution>\n         </executions>\n       </plugin>"
  },
  {
    "sha": "3cd42132301d36c30b1d6c7c4e900fe7102ade16",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "status": "modified",
    "additions": 49,
    "deletions": 3,
    "changes": 52,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -25,9 +25,12 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n import app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestamp;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n@@ -68,16 +71,34 @@\n   @ValidSubmissionTimestamp\n   private final long submissionTimestamp;\n \n+  private final boolean consentToFederation;\n+\n+  @Size(max = 2)\n+  private final String originCountry;\n+\n+  private final List<String> visitedCountries;\n+\n+  private final ReportType reportType;\n+\n+  private final int daysSinceOnsetOfSymptoms;\n+\n   /**\n    * Should be called by builders.\n    */\n   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n-      int transmissionRiskLevel, long submissionTimestamp) {\n+      int transmissionRiskLevel, long submissionTimestamp,\n+      boolean consentToFederation, @Size String originCountry, List<String> visitedCountries,\n+      ReportType reportType, int daysSinceOnsetOfSymptoms) {\n     this.keyData = keyData;\n     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n     this.rollingPeriod = rollingPeriod;\n     this.transmissionRiskLevel = transmissionRiskLevel;\n     this.submissionTimestamp = submissionTimestamp;\n+    this.consentToFederation = consentToFederation;\n+    this.originCountry = originCountry;\n+    this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;\n+    this.reportType = reportType;\n+    this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n   }\n \n   /**\n@@ -126,6 +147,26 @@ public long getSubmissionTimestamp() {\n     return submissionTimestamp;\n   }\n \n+  public boolean isConsentToFederation() {\n+    return consentToFederation;\n+  }\n+\n+  public String getOriginCountry() {\n+    return originCountry;\n+  }\n+\n+  public List<String> getVisitedCountries() {\n+    return visitedCountries;\n+  }\n+\n+  public ReportType getReportType() {\n+    return reportType;\n+  }\n+\n+  public int getDaysSinceOnsetOfSymptoms() {\n+    return daysSinceOnsetOfSymptoms;\n+  }\n+\n   /**\n    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n    *\n@@ -175,13 +216,18 @@ public boolean equals(Object o) {\n         && rollingPeriod == that.rollingPeriod\n         && transmissionRiskLevel == that.transmissionRiskLevel\n         && submissionTimestamp == that.submissionTimestamp\n-        && Arrays.equals(keyData, that.keyData);\n+        && Arrays.equals(keyData, that.keyData)\n+        && Objects.equals(originCountry, that.originCountry)\n+        && Objects.equals(visitedCountries, that.visitedCountries)\n+        && reportType == that.reportType\n+        && daysSinceOnsetOfSymptoms == that.daysSinceOnsetOfSymptoms;\n   }\n \n   @Override\n   public int hashCode() {\n     int result = Objects\n-        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp, originCountry,\n+            visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n     result = 31 * result + Arrays.hashCode(keyData);\n     return result;\n   }"
  },
  {
    "sha": "a2fb44185804c2df858a2cf46c328f824ea34a37",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "status": "modified",
    "additions": 53,
    "deletions": 2,
    "changes": 55,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -27,8 +27,10 @@\n import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;\n \n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n import java.time.Instant;\n+import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ConstraintViolation;\n@@ -49,6 +51,11 @@\n   private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n   private int transmissionRiskLevel;\n   private Long submissionTimestamp = null;\n+  private String countryCode;\n+  private List<String> visitedCountries;\n+  private ReportType reportType;\n+  private boolean consentToFederation;\n+  private int daysSinceOnsetOfSymptoms;\n \n   DiagnosisKeyBuilder() {\n   }\n@@ -72,14 +79,27 @@ public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {\n   }\n \n   @Override\n-  public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {\n+  public FinalBuilder fromTemporaryExposureKey(TemporaryExposureKey protoBufObject) {\n     return this\n         .withKeyData(protoBufObject.getKeyData().toByteArray())\n         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())\n         .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel())\n         .withRollingPeriod(protoBufObject.getRollingPeriod());\n   }\n \n+  @Override\n+  public FinalBuilder fromFederationDiagnosisKey(\n+      app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey federationDiagnosisKey) {\n+    return this\n+        .withKeyData(federationDiagnosisKey.getKeyData().toByteArray())\n+        .withRollingStartIntervalNumber(federationDiagnosisKey.getRollingStartIntervalNumber())\n+        .withTransmissionRiskLevel(federationDiagnosisKey.getTransmissionRiskLevel())\n+        .withRollingPeriod(federationDiagnosisKey.getRollingPeriod())\n+        .withCountryCode(federationDiagnosisKey.getOrigin())\n+        .withReportType(federationDiagnosisKey.getReportType())\n+        .withVisitedCountries(federationDiagnosisKey.getVisitedCountriesList());\n+  }\n+\n   @Override\n   public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {\n     this.submissionTimestamp = submissionTimestamp;\n@@ -92,6 +112,36 @@ public FinalBuilder withRollingPeriod(int rollingPeriod) {\n     return this;\n   }\n \n+  @Override\n+  public FinalBuilder withConsentToFederation(boolean consentToFederation) {\n+    this.consentToFederation = consentToFederation;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withCountryCode(String countryCode) {\n+    this.countryCode = countryCode;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withVisitedCountries(List<String> visitedCountries) {\n+    this.visitedCountries = visitedCountries;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withReportType(ReportType reportType) {\n+    this.reportType = reportType;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withDaysSinceOnsetOfSymptoms(int daysSinceOnsetOfSymptoms) {\n+    this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n+    return this;\n+  }\n+\n   @Override\n   public DiagnosisKey build() {\n     if (submissionTimestamp == null) {\n@@ -100,7 +150,8 @@ public DiagnosisKey build() {\n     }\n \n     var diagnosisKey = new DiagnosisKey(\n-        keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp,\n+        consentToFederation, countryCode, visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n     return throwIfValidationFails(diagnosisKey);\n   }\n "
  },
  {
    "sha": "36ecb90b3d059e69dd738f4cdb5ec2dba4e50c41",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "status": "modified",
    "additions": 24,
    "deletions": 3,
    "changes": 27,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -20,7 +20,9 @@\n \n package app.coronawarn.server.common.persistence.domain;\n \n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import java.util.List;\n \n /**\n  * This interface bundles interfaces that are used for the implementation of {@link DiagnosisKeyBuilder}.\n@@ -43,16 +45,25 @@\n      * @param protoBufObject ProtocolBuffer object associated with the temporary exposure key.\n      * @return this Builder instance.\n      */\n-    FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject);\n+    FinalBuilder fromTemporaryExposureKey(TemporaryExposureKey protoBufObject);\n+\n+    /**\n+     * Adds the data contained in the specified federation diagnosis key object to this builder.\n+     *\n+     * @param federationDiagnosisKey DiagnosisKey object associated with the temporary exposure key.\n+     * @return this Builder instance.\n+     */\n+    FinalBuilder fromFederationDiagnosisKey(\n+        app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey federationDiagnosisKey);\n   }\n \n   interface RollingStartIntervalNumberBuilder {\n \n     /**\n      * Adds the specified rolling start interval number to this builder.\n      *\n-     * @param rollingStartIntervalNumber number describing when a key starts. It is equal to\n-     *                                   startTimeOfKeySinceEpochInSecs / (60 * 10).\n+     * @param rollingStartIntervalNumber number describing when a key starts.\n+     *                                   It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n      * @return this Builder instance.\n      */\n     TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);\n@@ -89,6 +100,16 @@\n      */\n     FinalBuilder withRollingPeriod(int rollingPeriod);\n \n+    FinalBuilder withConsentToFederation(boolean consentToFederation);\n+\n+    FinalBuilder withCountryCode(String countryCode);\n+\n+    FinalBuilder withVisitedCountries(List<String> visitedCountries);\n+\n+    FinalBuilder withReportType(ReportType reportType);\n+\n+    FinalBuilder withDaysSinceOnsetOfSymptoms(int daysSinceOnsetOfSymptoms);\n+\n     /**\n      * Builds a {@link DiagnosisKey} instance. If no submission timestamp has been specified it will be set to \"now\" as\n      * hours since epoch."
  },
  {
    "sha": "dc653aaa59411856a3dbe25a9aaa15b47b1def10",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,88 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.domain;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+import org.springframework.data.annotation.Id;\n+\n+public class FederationBatch {\n+\n+  @Id\n+  private String batchTag;\n+\n+  private Date date;\n+\n+  private FederationBatchStatus status;\n+\n+  /**\n+   * Creates a FederationBatch.\n+   */\n+  public FederationBatch(String batchTag, Date date, FederationBatchStatus status) {\n+    this.batchTag = batchTag;\n+    this.date = date;\n+    this.status = status;\n+  }\n+\n+  public String getBatchTag() {\n+    return batchTag;\n+  }\n+\n+  public void setBatchTag(String batchTag) {\n+    this.batchTag = batchTag;\n+  }\n+\n+  public Date getDate() {\n+    return date;\n+  }\n+\n+  public void setDate(Date date) {\n+    this.date = date;\n+  }\n+\n+  public FederationBatchStatus getStatus() {\n+    return status;\n+  }\n+\n+  public void setStatus(\n+      FederationBatchStatus status) {\n+    this.status = status;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    FederationBatch that = (FederationBatch) o;\n+    return Objects.equals(batchTag, that.batchTag)\n+        && Objects.equals(date, that.date)\n+        && status == that.status;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(batchTag, date);\n+  }\n+}"
  },
  {
    "sha": "5baba59ae26734332df299414f116b0609768ff5",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,6 @@\n+package app.coronawarn.server.common.persistence.domain;\n+\n+public enum FederationBatchStatus {\n+  PROCESSED,\n+  ERROR\n+}"
  },
  {
    "sha": "cd5abae820b0d72175b2888e7a9d9618b4eeb8c8",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "status": "modified",
    "additions": 43,
    "deletions": 3,
    "changes": 46,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -39,6 +39,27 @@\n   @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<=:threshold\")\n   int countOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp);\n \n+  /**\n+   * Counts all entries that have a submission timestamp less or equal than the specified one\n+   *  and match the given country_code.\n+   *\n+   * @param submissionTimestamp The submission timestamp up to which entries will be expired.\n+   * @return The number of expired keys.\n+   */\n+  @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<=:threshold AND \"\n+      + \":country_code = ANY(visited_countries)\")\n+  int countOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp, @Param(\"country_code\") String countryCode);\n+\n+  /**\n+   * Returns all diagnosis keys where visited_countries list contains {@param countryCode} ordered by\n+   * submission_timestamp.\n+   *\n+   * @param countryCode filter country code.\n+   * @return list of DiagnosisKeys.\n+   */\n+  @Query(\"SELECT * FROM diagnosis_key WHERE :country_code = ANY(visited_countries) ORDER BY submission_timestamp ASC\")\n+  Iterable<DiagnosisKey> findAllKeysWhereVisitedCountryContains(@Param(\"country_code\") String countryCode);\n+\n   /**\n    * Deletes all entries that have a submission timestamp less or equal than the specified one.\n    *\n@@ -48,6 +69,16 @@\n   @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<=:threshold\")\n   void deleteOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp);\n \n+  /**\n+   * Deletes all entries that have a submission timestamp less or equal than the specified one\n+   *  and match the origin country_code.\n+   *\n+   * @param submissionTimestamp The submission timestamp up to which entries will be deleted.\n+   */\n+  @Modifying\n+  @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<=:threshold AND :country_code = ANY(visited_countries)\")\n+  void deleteOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp, @Param(\"country_code\") String countryCode);\n+\n   /**\n    * Attempts to write the specified diagnosis key information into the database. If a row with the specified key data\n    * already exists, no data is inserted.\n@@ -57,16 +88,25 @@\n    * @param rollingPeriod              The rolling period of the diagnosis key.\n    * @param submissionTimestamp        The submission timestamp of the diagnosis key.\n    * @param transmissionRisk           The transmission risk level of the diagnosis key.\n+   * @param originCountry              The origin country from the app.\n+   * @param visitedCountries           The list of countries this transmissions is relevant for.\n+   * @param reportType                 The report type of the diagnosis key.\n    */\n   @Modifying\n   @Query(\"INSERT INTO diagnosis_key \"\n-      + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level) \"\n-      + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk) \"\n+      + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level, \"\n+      + \"origin_country, visited_countries, report_type, days_since_onset_of_symptoms) \"\n+      + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk, \"\n+      + \":origin_country, :visited_countries, :report_type, :days_since_onset_of_symptoms) \"\n       + \"ON CONFLICT DO NOTHING\")\n   void saveDoNothingOnConflict(\n       @Param(\"keyData\") byte[] keyData,\n       @Param(\"rollingStartIntervalNumber\") int rollingStartIntervalNumber,\n       @Param(\"rollingPeriod\") int rollingPeriod,\n       @Param(\"submissionTimestamp\") long submissionTimestamp,\n-      @Param(\"transmissionRisk\") int transmissionRisk);\n+      @Param(\"transmissionRisk\") int transmissionRisk,\n+      @Param(\"origin_country\") String originCountry,\n+      @Param(\"visited_countries\") String[] visitedCountries,\n+      @Param(\"report_type\") String reportType,\n+      @Param(\"days_since_onset_of_symptoms\") int daysSinceOnsetOfSymptoms);\n }"
  },
  {
    "sha": "1092e2fe10e55373747f71dd31f348e029fb5866",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,48 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.repository;\n+\n+import app.coronawarn.server.common.persistence.domain.FederationBatch;\n+import app.coronawarn.server.common.persistence.domain.FederationBatchStatus;\n+import java.util.Date;\n+import org.springframework.data.jdbc.repository.query.Modifying;\n+import org.springframework.data.jdbc.repository.query.Query;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface FederationBatchRepository extends PagingAndSortingRepository<FederationBatch, Long> {\n+\n+  @Modifying\n+  @Query(\"INSERT INTO federation_batch \"\n+      + \"(batch_tag, date, status) \"\n+      + \"VALUES (:batchTag, :date, :status) \"\n+      + \"ON CONFLICT DO NOTHING\")\n+  void saveDoNothingOnConflict(\n+      @Param(\"batchTag\") String batchTag,\n+      @Param(\"date\") Date date,\n+      @Param(\"status\") FederationBatchStatus status\n+  );\n+\n+  @Query(\"SELECT * FROM federation_batch WHERE status != 'PROCESSED' OR status is null ORDER BY date asc LIMIT 1\")\n+  FederationBatch findOldestUnprocessedFederationBatch();\n+}"
  },
  {
    "sha": "056aa4fa9e93f72d3139e707b17c604d850fa453",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "status": "modified",
    "additions": 26,
    "deletions": 6,
    "changes": 32,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -63,7 +63,9 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n       keyRepository.saveDoNothingOnConflict(\n           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n-          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());\n+          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel(),\n+          diagnosisKey.getOriginCountry(), diagnosisKey.getVisitedCountries().toArray(new String[0]),\n+          diagnosisKey.getReportType().name(), diagnosisKey.getDaysSinceOnsetOfSymptoms());\n     }\n   }\n \n@@ -73,6 +75,23 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n   public List<DiagnosisKey> getDiagnosisKeys() {\n     List<DiagnosisKey> diagnosisKeys = createStreamFromIterator(\n         keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\")).iterator()).collect(Collectors.toList());\n+    return this.filterValidDiagnosisKeys(diagnosisKeys);\n+  }\n+\n+  /**\n+   * Return all valid persisted diagnosis keys, sorted by their submission timestamp where visited_countries contains\n+   * {@param countryCode}.\n+   *\n+   * @param countryCode country filter.\n+   * @return Collection of {@link DiagnosisKey} that have visited_country in their array.\n+   */\n+  public List<DiagnosisKey> getDiagnosisKeysByVisitedCountry(String countryCode) {\n+    var diagnosisKeys = createStreamFromIterator(\n+        keyRepository.findAllKeysWhereVisitedCountryContains(countryCode).iterator()).collect(Collectors.toList());\n+    return this.filterValidDiagnosisKeys(diagnosisKeys);\n+  }\n+\n+  private List<DiagnosisKey> filterValidDiagnosisKeys(List<DiagnosisKey> diagnosisKeys) {\n     List<DiagnosisKey> validDiagnosisKeys =\n         diagnosisKeys.stream().filter(DiagnosisKeyService::isDiagnosisKeyValid).collect(Collectors.toList());\n \n@@ -101,10 +120,11 @@ private static boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n    * days.\n    *\n    * @param daysToRetain the number of days until which diagnosis keys will be retained.\n+   * @param countryCode  country filter.\n    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n    */\n   @Transactional\n-  public void applyRetentionPolicy(int daysToRetain) {\n+  public void applyRetentionPolicy(int daysToRetain, String countryCode) {\n     if (daysToRetain < 0) {\n       throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n     }\n@@ -113,9 +133,9 @@ public void applyRetentionPolicy(int daysToRetain) {\n         .ofInstant(Instant.now(), UTC)\n         .minusDays(daysToRetain)\n         .toEpochSecond(UTC) / SECONDS_PER_HOUR;\n-    int numberOfDeletions = keyRepository.countOlderThanOrEqual(threshold);\n-    logger.info(\"Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n-        numberOfDeletions, daysToRetain);\n-    keyRepository.deleteOlderThanOrEqual(threshold);\n+    int numberOfDeletions = keyRepository.countOlderThanOrEqual(threshold, countryCode);\n+    logger.info(\"[{}] Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n+        countryCode, numberOfDeletions, daysToRetain);\n+    keyRepository.deleteOlderThanOrEqual(threshold, countryCode);\n   }\n }"
  },
  {
    "sha": "b412fbe3b659e3397c62229a07a3d046204c61e1",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,101 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service;\n+\n+import static org.springframework.data.util.StreamUtils.createStreamFromIterator;\n+\n+import app.coronawarn.server.common.persistence.domain.FederationBatch;\n+import app.coronawarn.server.common.persistence.domain.FederationBatchStatus;\n+import app.coronawarn.server.common.persistence.repository.FederationBatchRepository;\n+import io.micrometer.core.annotation.Timed;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.domain.Sort.Direction;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class FederationBatchService {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(FederationBatchService.class);\n+  private final FederationBatchRepository federationBatchRepository;\n+\n+  public FederationBatchService(FederationBatchRepository federationBatchRepository) {\n+    this.federationBatchRepository = federationBatchRepository;\n+  }\n+\n+  /**\n+   * Persists the {@link FederationBatch} instance. If the data of a particular federation batch\n+   * already exists in the database, this federation batch is not persisted.\n+   *\n+   * @param federationBatch must not contain {@literal null}.\n+   */\n+  @Timed\n+  @Transactional\n+  public void saveFederationBatch(FederationBatch federationBatch) {\n+    federationBatchRepository\n+        .saveDoNothingOnConflict(federationBatch.getBatchTag(), federationBatch.getDate(), federationBatch.getStatus());\n+  }\n+\n+  /**\n+   * Deletes the {@link FederationBatch} instance.\n+   *\n+   * @param federationBatch must not contain {@literal null}.\n+   */\n+  @Timed\n+  @Transactional\n+  public void deleteFederationBatch(FederationBatch federationBatch) {\n+    federationBatchRepository.delete(federationBatch);\n+  }\n+\n+  /**\n+   * Returns all valid persisted federation batches, sorted by their submission timestamp.\n+   */\n+  public List<FederationBatch> getFederationBatches() {\n+    List<FederationBatch> federationBatches = createStreamFromIterator(\n+        federationBatchRepository.findAll(Sort.by(Direction.ASC, \"date\")).iterator())\n+        .collect(Collectors.toList());\n+\n+    logger.info(\"Retrieved {} federation batch(es).\",\n+        federationBatches.size());\n+\n+    return federationBatches;\n+  }\n+\n+  /**\n+   * Returns the oldest, not yet processed federation batch.\n+   */\n+  public FederationBatch getNextFederationBatchToProcess() {\n+    return federationBatchRepository.findOldestUnprocessedFederationBatch();\n+  }\n+\n+  /**\n+   * Sets the status of the provided federation batch to 'processed'.\n+   */\n+  public void markFederationBatchAsProcessed(FederationBatch federationBatch) {\n+    federationBatch.setStatus(FederationBatchStatus.PROCESSED);\n+    federationBatchRepository.save(federationBatch);\n+  }\n+\n+}"
  },
  {
    "sha": "2d8133d22e7d167d20b257562f544315bc7778ae",
    "filename": "common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,5 @@\n+CREATE TABLE federation_batch (\n+    batch_tag   varchar(20) PRIMARY KEY, --TODO validate length constraint\n+    date        date NOT NULL,\n+    status      varchar(20)\n+);"
  },
  {
    "sha": "d8fa74620895318fd445a2500496d3146eac7112",
    "filename": "common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,16 @@\n+-- Migrate current values -> origin_country = DE\n+\n+ALTER TABLE diagnosis_key\n+    ADD consent_to_federation BOOLEAN NOT NULL DEFAULT FALSE;\n+\n+ALTER TABLE diagnosis_key\n+    ADD origin_country VARCHAR(2);\n+\n+ALTER TABLE diagnosis_key\n+    ADD visited_countries VARCHAR(2)[];\n+\n+ALTER TABLE diagnosis_key\n+    ADD report_type VARCHAR(30);\n+\n+ALTER TABLE diagnosis_key\n+    ADD days_since_onset_of_symptoms INTEGER;"
  },
  {
    "sha": "a2b5321321ddc7a30af9969738008bf545d68f47",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -1,2 +1,3 @@\n GRANT SELECT, DELETE ON TABLE diagnosis_key TO \"cwa_distribution\";\n GRANT INSERT ON TABLE diagnosis_key TO \"cwa_submission\";\n+"
  },
  {
    "sha": "2f122d5251cab4ef736dca4df11a2401797a6923",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1 @@\n+GRANT SELECT, INSERT ON TABLE federation_batch TO \"cwa_federation_callback\";"
  },
  {
    "sha": "37d5308c8fb37e84ee2831278078c0e33904dbea",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,2 @@\n+ GRANT SELECT, UPDATE, DELETE ON TABLE federation_batch TO \"cwa_federation_download\";\n+ GRANT INSERT ON TABLE diagnosis_key TO \"cwa_federation_download\";"
  },
  {
    "sha": "ebfa156c008d916359e3ec825220b8bff8c29050",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -56,7 +56,7 @@ void buildFromProtoBufObjWithSubmissionTimestamp() {\n         .build();\n \n     DiagnosisKey actDiagnosisKey = DiagnosisKey.builder()\n-        .fromProtoBuf(protoBufObj)\n+        .fromTemporaryExposureKey(protoBufObj)\n         .withSubmissionTimestamp(this.expSubmissionTimestamp)\n         .build();\n \n@@ -73,7 +73,7 @@ void buildFromProtoBufObjWithoutSubmissionTimestamp() {\n         .setTransmissionRiskLevel(this.expTransmissionRiskLevel)\n         .build();\n \n-    DiagnosisKey actDiagnosisKey = DiagnosisKey.builder().fromProtoBuf(protoBufObj).build();\n+    DiagnosisKey actDiagnosisKey = DiagnosisKey.builder().fromTemporaryExposureKey(protoBufObj).build();\n \n     assertDiagnosisKeyEquals(actDiagnosisKey);\n   }"
  },
  {
    "sha": "d3b8243ea7e02166bb270d544248484a5517f1c3",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -28,7 +28,9 @@\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;\n@@ -42,6 +44,10 @@\n   static final byte[] expKeyData = \"16-bytelongarray\".getBytes(StandardCharsets.US_ASCII);\n   static final int expRollingStartIntervalNumber = 73800;\n   static final int expTransmissionRiskLevel = 1;\n+  static final String originCountry = \"DE\";\n+  static final List<String> visitedCountries = Collections.singletonList(\"DE\");\n+  static final ReportType reportType = ReportType.CONFIRMED_CLINICAL_DIAGNOSIS;\n+  static final int daysSinceOnsetOfSymptoms = 1;\n \n   @Autowired\n   private DiagnosisKeyService diagnosisKeyService;\n@@ -85,12 +91,14 @@ private void mockInvalidKeyInDb(List<DiagnosisKey> keys) {\n \n   private DiagnosisKey validKey(long expSubmissionTimestamp) {\n     return new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp, false,\n+        originCountry, visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n   }\n \n   private DiagnosisKey invalidKey(long expSubmissionTimestamp) {\n     byte[] expKeyData = \"17--bytelongarray\".getBytes(StandardCharsets.US_ASCII);\n     return new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp, false,\n+        originCountry, visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n   }\n }"
  },
  {
    "sha": "bbb6934cb79d34c0349d42784749434dcfec9766",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -28,6 +28,9 @@\n import java.nio.charset.StandardCharsets;\n import java.time.Instant;\n import java.time.LocalDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n@@ -40,8 +43,14 @@\n   final static int expRollingPeriod = 2;\n   final static int expTransmissionRiskLevel = 3;\n   final static long expSubmissionTimestamp = 4L;\n+  static final String originCountry = \"DE\";\n+  static final List<String> visitedCountries = Collections.singletonList(\"DE\");\n+  static final ReportType reportType = ReportType.CONFIRMED_CLINICAL_DIAGNOSIS;\n+  static final int daysSinceOnsetOfSymptoms = 1;\n+\n   final static DiagnosisKey diagnosisKey = new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-      expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp);\n+      expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp, false, originCountry, visitedCountries,\n+      reportType, daysSinceOnsetOfSymptoms);\n \n   @Test\n   void testRollingStartIntervalNumberGetter() {\n@@ -70,7 +79,8 @@ void testIsYoungerThanRetentionThreshold() {\n         .minusDays(5).minusMinutes(10)\n         .toEpochSecond(UTC) / (60 * 10));\n     DiagnosisKey diagnosisKeyFiveDays = new DiagnosisKey(expKeyData, fiveDaysAgo,\n-        expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp, false, originCountry, visitedCountries,\n+        reportType, daysSinceOnsetOfSymptoms);\n \n     assertThat(diagnosisKeyFiveDays.isYoungerThanRetentionThreshold(4)).isFalse();\n     assertThat(diagnosisKeyFiveDays.isYoungerThanRetentionThreshold(5)).isFalse();"
  },
  {
    "sha": "8aade877d95e3a112eb50ffd3c1d0c0d8d2ed75a",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java",
    "status": "modified",
    "additions": 107,
    "deletions": 8,
    "changes": 115,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -27,17 +27,22 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import org.assertj.core.util.Lists;\n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;\n@@ -93,21 +98,21 @@ void testSortedRetrievalResult() {\n   @ValueSource(ints = {0, 1, Integer.MAX_VALUE})\n   @ParameterizedTest\n   void testApplyRetentionPolicyForValidNumberOfDays(int daysToRetain) {\n-    assertThatCode(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain))\n+    assertThatCode(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain, \"DE\"))\n         .doesNotThrowAnyException();\n   }\n \n   @DisplayName(\"Assert a negative retention period is rejected.\")\n   @ValueSource(ints = {Integer.MIN_VALUE, -1})\n   @ParameterizedTest\n   void testApplyRetentionPolicyForNegativeNumberOfDays(int daysToRetain) {\n-    assertThat(catchThrowable(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain)))\n+    assertThat(catchThrowable(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain, \"DE\")))\n         .isInstanceOf(IllegalArgumentException.class);\n   }\n \n   @Test\n   void testApplyRetentionPolicyForEmptyDb() {\n-    diagnosisKeyService.applyRetentionPolicy(1);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"DE\");\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n     assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n   }\n@@ -117,7 +122,7 @@ void testApplyRetentionPolicyForOneNotApplicableEntry() {\n     var expKeys = List.of(buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusHours(23)));\n \n     diagnosisKeyService.saveDiagnosisKeys(expKeys);\n-    diagnosisKeyService.applyRetentionPolicy(1);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"DE\");\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n \n     assertDiagnosisKeysEqual(expKeys, actKeys);\n@@ -128,20 +133,71 @@ void testApplyRetentionPolicyForOneApplicableEntry() {\n     var keys = List.of(buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L)));\n \n     diagnosisKeyService.saveDiagnosisKeys(keys);\n-    diagnosisKeyService.applyRetentionPolicy(1);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"DE\");\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n \n     assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n   }\n \n+  @Test\n+  void testShouldNotDeleteKeysFromAnotherCountry() {\n+    var expKeys = List.of(\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", Collections.singletonList(\"DE\"),\n+            ReportType.CONFIRMED_CLINICAL_DIAGNOSIS));\n+\n+    diagnosisKeyService.saveDiagnosisKeys(expKeys);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(actKeys, expKeys);\n+  }\n+\n+  @Test\n+  void testShouldDeleteKeysWithMatchingVisitedCountry() {\n+    var frenchKeys = buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", Collections.singletonList(\"FR\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS);\n+    var germanKeys = buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(2L), \"DE\", Collections.singletonList(\"DE\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS);\n+\n+    diagnosisKeyService.saveDiagnosisKeys(List.of(germanKeys, frenchKeys));\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(List.of(germanKeys), actKeys);\n+  }\n+\n+  @Test\n+  void testShouldDeleteKeysWhereAnyOfVisitedCountriesMatch() {\n+    var keys = List.of(\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", List.of(\"DE\", \"FR\", \"LU\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS));\n+    diagnosisKeyService.saveDiagnosisKeys(keys);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+    assertTrue(actKeys.isEmpty());\n+  }\n+\n+  @Test\n+  void testShouldDeleteKeysFromDifferentOriginCountriesWithMatchingVisitedCountry() {\n+    var keys = List.of(\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", List.of(\"FR\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS),\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"FR\", List.of(\"FR\"),ReportType.CONFIRMED_CLINICAL_DIAGNOSIS),\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"LU\", List.of(\"FR\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS));\n+    diagnosisKeyService.saveDiagnosisKeys(keys);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+    assertTrue(actKeys.isEmpty());\n+  }\n+\n   @Test\n   void testNoPersistOnValidationError() {\n     assertThat(catchThrowable(() -> {\n       var keys = List.of(DiagnosisKey.builder()\n           .withKeyData(new byte[16])\n           .withRollingStartIntervalNumber((int) (OffsetDateTime.now(UTC).toEpochSecond() / 600))\n           .withTransmissionRiskLevel(2)\n-          .withSubmissionTimestamp(0L).build());\n+          .withCountryCode(\"DE\")\n+          .withVisitedCountries(Collections.singletonList(\"DE\"))\n+          .withSubmissionTimestamp(0L)\n+          .withReportType(ReportType.CONFIRMED_CLINICAL_DIAGNOSIS)\n+          .build());\n \n       diagnosisKeyService.saveDiagnosisKeys(keys);\n     })).isInstanceOf(InvalidDiagnosisKeyException.class);\n@@ -158,12 +214,20 @@ void shouldNotUpdateExistingKey() {\n             .withKeyData(keyData.getBytes())\n             .withRollingStartIntervalNumber(600)\n             .withTransmissionRiskLevel(2)\n-            .withSubmissionTimestamp(0L).build(),\n+            .withCountryCode(\"DE\")\n+            .withVisitedCountries(Collections.singletonList(\"DE\"))\n+            .withSubmissionTimestamp(0L)\n+            .withReportType(ReportType.CONFIRMED_CLINICAL_DIAGNOSIS)\n+            .build(),\n         DiagnosisKey.builder()\n             .withKeyData(keyData.getBytes())\n             .withRollingStartIntervalNumber(600)\n             .withTransmissionRiskLevel(3)\n-            .withSubmissionTimestamp(0L).build());\n+            .withCountryCode(\"DE\")\n+            .withVisitedCountries(Collections.singletonList(\"DE\"))\n+            .withSubmissionTimestamp(0L)\n+            .withReportType(ReportType.CONFIRMED_CLINICAL_DIAGNOSIS)\n+            .build());\n \n     diagnosisKeyService.saveDiagnosisKeys(keys);\n \n@@ -172,4 +236,39 @@ void shouldNotUpdateExistingKey() {\n     assertThat(actKeys.size()).isEqualTo(1);\n     assertThat(actKeys.iterator().next().getTransmissionRiskLevel()).isEqualTo(2);\n   }\n+\n+  @Nested\n+  class TestRetrieveKeysFromVisitedCountry {\n+\n+    @AfterEach\n+    public void tearDown() {\n+      diagnosisKeyRepository.deleteAll();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+      var keys = List.of(\n+          buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", Collections.singletonList(\"DE\"),ReportType.CONFIRMED_CLINICAL_DIAGNOSIS),\n+          buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(2L), \"DE\", List.of(\"DE\", \"FR\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS),\n+          buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(3L), \"DE\", List.of(\"DE\", \"FR\", \"DK\"),ReportType.CONFIRMED_CLINICAL_DIAGNOSIS)\n+      );\n+      diagnosisKeyService.saveDiagnosisKeys(keys);\n+    }\n+\n+    @Test\n+    void testShouldGetThreeEntriesDE() {\n+      assertEquals(3, diagnosisKeyService.getDiagnosisKeysByVisitedCountry(\"DE\").size());\n+    }\n+\n+    @Test\n+    void testShouldGetTwoEntriesFR() {\n+      assertEquals(2, diagnosisKeyService.getDiagnosisKeysByVisitedCountry(\"FR\").size());\n+    }\n+\n+    @Test\n+    void testShouldGetOneEntryDK() {\n+      assertEquals(1, diagnosisKeyService.getDiagnosisKeysByVisitedCountry(\"DK\").size());\n+    }\n+  }\n+\n }"
  },
  {
    "sha": "dff4fee327d7ca29eb5ed5e4ae6b58b2913739f5",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -23,7 +23,9 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import java.time.OffsetDateTime;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Random;\n \n@@ -51,18 +53,33 @@ public static void assertDiagnosisKeysEqual(List<DiagnosisKey> expKeys,\n     }\n   }\n \n-  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp,\n+      boolean consentToFederation, String countryCode, List<String> visitedCountries, ReportType reportType) {\n     byte[] randomBytes = new byte[16];\n     Random random = new Random(submissionTimeStamp);\n     random.nextBytes(randomBytes);\n     return DiagnosisKey.builder()\n         .withKeyData(randomBytes)\n         .withRollingStartIntervalNumber(600)\n         .withTransmissionRiskLevel(2)\n-        .withSubmissionTimestamp(submissionTimeStamp).build();\n+        .withSubmissionTimestamp(submissionTimeStamp)\n+        .withCountryCode(countryCode)\n+        .withVisitedCountries(visitedCountries)\n+        .withReportType(reportType)\n+        .withConsentToFederation(consentToFederation)\n+        .build();\n+  }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+    return buildDiagnosisKeyForSubmissionTimestamp(submissionTimeStamp, false, \"DE\", Collections.singletonList(\"DE\"), ReportType.CONFIRMED_CLINICAL_DIAGNOSIS);\n   }\n \n   public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime) {\n     return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600);\n   }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime,\n+      String countryCode, List<String> visitedCountries, ReportType reportType) {\n+    return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600, false, countryCode, visitedCountries, reportType);\n+  }\n }"
  },
  {
    "sha": "40ec136674e86e50e1f0f0644e92f66256a78246",
    "filename": "common/protocols/pom.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/protocols/pom.xml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/protocols/pom.xml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/protocols/pom.xml?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -20,7 +20,6 @@\n     <dependency>\n       <groupId>com.google.protobuf</groupId>\n       <artifactId>protobuf-java</artifactId>\n-      <version>3.12.2</version>\n     </dependency>\n   </dependencies>\n "
  },
  {
    "sha": "0d899f00a5c6af7e2f52facaba6e6ca3691143b2",
    "filename": "common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,32 @@\n+//https://static.googleusercontent.com/media/www.google.com/en//covid19/exposurenotifications/pdfs/Exposure-Key-File-Format-and-Verification.pdf\n+syntax = \"proto3\";\n+package app.coronawarn.server.common.protocols.external.exposurenotification;\n+option java_package = \"app.coronawarn.server.common.protocols.external.exposurenotification\";\n+option java_multiple_files = true;\n+import \"app/coronawarn/server/common/protocols/external/exposurenotification/temporary_exposure_key_export.proto\";\n+\n+message DiagnosisKeyBatch {\n+  repeated DiagnosisKey keys = 1;\n+}\n+\n+message DiagnosisKey {\n+  bytes keyData = 1; // key\n+  uint32 rollingStartIntervalNumber = 2;\n+  uint32 rollingPeriod = 3; // number of 10-minute windows between key-rolling\n+  int32 transmissionRiskLevel = 4; // risk of transmission\n+  repeated string visitedCountries = 5;\n+  string origin = 6; // country of origin\n+  ReportType reportType = 7; // set by backend\n+  // Number of days elapsed between symptom onset and the TEK being used.\n+  // E.g. 2 means TEK is 2 days after onset of symptoms.\n+  uint32 days_since_onset_of_symptoms = 8;\n+}\n+// Data type representing why this key was published.\n+enum ReportType {\n+  UNKNOWN = 0;  // Never returned by the client API.\n+  CONFIRMED_TEST = 1;\n+  CONFIRMED_CLINICAL_DIAGNOSIS = 2;\n+  SELF_REPORT = 3;\n+  RECURSIVE = 4;  // Reserved for future use.\n+  REVOKED = 5;  // Used to revoke a key, never returned by client API.\n+}"
  },
  {
    "sha": "f8590e5d347a4fda4b870cd16e7a18506b141acc",
    "filename": "common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -1,10 +1,15 @@\n-syntax = \"proto3\";\n+syntax = \"proto2\";\n package app.coronawarn.server.common.protocols.internal;\n option java_package = \"app.coronawarn.server.common.protocols.internal\";\n option java_multiple_files = true;\n import \"app/coronawarn/server/common/protocols/external/exposurenotification/temporary_exposure_key_export.proto\";\n+import \"app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto\";\n \n message SubmissionPayload {\n   repeated app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey keys = 1;\n-  bytes padding = 2;\n+  optional bytes padding = 2;\n+  repeated string visitedCountries = 3;\n+  optional string origin = 4;\n+  optional app.coronawarn.server.common.protocols.external.exposurenotification.ReportType reportType = 5 [default = CONFIRMED_CLINICAL_DIAGNOSIS];\n+  optional bool consentToFederation = 6;\n }"
  },
  {
    "sha": "bea71565afc1b449211c63cacc95d10d24144df7",
    "filename": "docker-compose.yml",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/docker-compose.yml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docker-compose.yml?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -1,5 +1,22 @@\n version: '3'\n services:\n+  callback:\n+    build:\n+      context: ./\n+      dockerfile: ./services/callback/Dockerfile\n+    depends_on:\n+      - postgres\n+    ports:\n+      - \"8010:8080\"\n+    environment:\n+      SPRING_PROFILES_ACTIVE: dev,disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n+      POSTGRESQL_SERVICE_PORT: '5432'\n+      POSTGRESQL_SERVICE_HOST: postgres\n+      POSTGRESQL_DATABASE: ${POSTGRES_DB}\n+      POSTGRESQL_PASSWORD_CALLBACK: ${POSTGRES_CALLBACK_PASSWORD}\n+      POSTGRESQL_USER_CALLBACK: ${POSTGRES_CALLBACK_USER}\n+      POSTGRESQL_PASSWORD_FLYWAY: ${POSTGRES_FLYWAY_PASSWORD}\n+      POSTGRESQL_USER_FLYWAY: ${POSTGRES_FLYWAY_USER}\n   submission:\n     build:\n       context: ./\n@@ -49,6 +66,23 @@ services:\n       FORCE_UPDATE_KEYFILES: 'false'\n     volumes:\n       - ./docker-compose-test-secrets:/secrets\n+  federation-download:\n+    build:\n+      context: ./\n+      dockerfile: ./services/federation-download/Dockerfile\n+    depends_on:\n+      - postgres\n+    ports:\n+      - \"8011:8080\"\n+    environment:\n+      SPRING_PROFILES_ACTIVE: dev,disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n+      POSTGRESQL_SERVICE_PORT: '5432'\n+      POSTGRESQL_SERVICE_HOST: postgres\n+      POSTGRESQL_DATABASE: ${POSTGRES_DB}\n+      POSTGRESQL_PASSWORD_CALLBACK: ${POSTGRES_CALLBACK_PASSWORD}\n+      POSTGRESQL_USER_CALLBACK: ${POSTGRES_CALLBACK_USER}\n+      POSTGRESQL_PASSWORD_FLYWAY: ${POSTGRES_FLYWAY_PASSWORD}\n+      POSTGRESQL_USER_FLYWAY: ${POSTGRES_FLYWAY_USER}\n   postgres:\n     image: postgres:11.8\n     restart: always"
  },
  {
    "sha": "e6ed42e589b16b376fdbae84be8b87ff9df5bd6d",
    "filename": "docs/ARCHITECTURE.md",
    "status": "modified",
    "additions": 40,
    "deletions": 106,
    "changes": 146,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/ARCHITECTURE.md",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/ARCHITECTURE.md",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docs/ARCHITECTURE.md?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -29,11 +29,15 @@ Find the latest specifications of Google/Apple here:\n - [Google Framework Specifications (1.3.2)](https://static.googleusercontent.com/media/www.google.com/en//covid19/exposurenotifications/pdfs/Android-Exposure-Notification-API-documentation-v1.3.2.pdf)\n On a high level, the application consists of two main parts, as shown below.\n \n-![Overview Diagram](./images/v4.png)\n+![Overview Diagram](./images/v5.png)\n \n-1. CWA Server: Handles submission and aggregation/distribution of diagnosis keys and configuration files.\n+1. CWA Server: Handles the following tasks:\n+    - accepting submission of new keys\n+    - aggregation/distribution of diagnosis keys and configuration files\n+    - uploading and downloading keys to/from the federation gateway to enable interoperability with other EU nations\n 2. Verification Server: Deals with test result retrieval and verification (including issuing TANs).\n The components regarding the verification are managed and deployed separately.\n+3. Federation Gateway: Enables the sharing of keys across integrated app backends of nations within the European Union\n \n This document outlines the CWA Server components, which are part of this repository. For the full architectural\n overview, check out the [solution architecture](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md).\n@@ -44,8 +48,8 @@ overview, check out the [solution architecture](https://github.com/corona-warn-a\n \n All mobile app relevant files will be stored on the S3 Object Store. Those files are:\n \n-- Aggregated files containing the diagnosis keys, which were reported in a specific interval (e.g. hourly).\n-- Daily aggregated files containing the diagnosis keys, which were reported for the respective days.\n+- Aggregated files containing the diagnosis keys, which were reported in a specific interval (e.g. hourly). These are organized into country specific buckets.\n+- Daily aggregated files containing the diagnosis keys, which were reported for the respective days. These are organized into country specific buckets.\n - Configuration files containing the [exposure configuration](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration) and CWA mobile app config.\n - Additional files regarding meta information of available files/structures/etc.\n \n@@ -68,6 +72,24 @@ Therefore, from a CWA Server perspective, the Verification Server provides an en\n \n A detailed description of the process can be found in the chapter [\"Retrieval of lab results and verification process\"](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md#retrieval-of-lab-results-and-verification-process) of the solution architecture document.\n \n+### Federation Gateway\n+\n+Many countries are developing proximity tracing apps to reduce the spreading of COVID-19, generally using the Exposure Notifications API from Google and Apple. While these national solutions reflect the specifics of each country a solution is required to allow interoperability between those national solutions. This software implements a pan european solution a \"European Federation Gateway Service\" allowing a national backend to upload keys of newly infected people and download the diagnosis keys from the other countries participating in this scheme. The integration with the Federation Gateway supports an approach called the \"Country of Interest\" which dictates that:\n+\n+- Newly submitted keys must be shared with a listing of countries which the user may have visited prior (visitedCountries)\n+- An approach to download keys to the device based on a selection of countries which are applicable for the user. Meaning the distribution will generate country specific archives allowing the mobile application to download targeted sets of keys per country that is relevant for the user.\n+\n+From a CWA-SERVER perspective, the Federation Gateway provides a set of API's with which we need to integrate in order to enable the following:\n+\n+- Upload of applicable DE keys\n+- Download of connected (non-DE) country keys \n+- Auditing of download keys for signature verification\n+- Callback notification process for Federation Gateway to notify CWA-SERVER that new download batches are available. Note: This is not implemented in the initial release of the federation gateway integration and would potentially come at a later point in time.\n+\n+Details of the Federation Gateway itself can be found in the following locations:\n+- [efgs-federation-gateway github repository](https://github.com/eu-federation-gateway-service/efgs-federation-gateway)\n+- [eHealth Network Guidelines](https://ec.europa.eu/health/sites/health/files/ehealth/docs/mobileapps_interoperabilitydetailedelements_en.pdf)\n+\n ## Security\n \n ### Endpoint Protection\n@@ -76,7 +98,7 @@ The CWA Server exposes only one endpoint – the submission endpoint.\n The endpoint is public (unauthenticated), and authorization for calls is granted to users who are passing a valid TAN.\n The TAN verification cannot be done on CWA Server, but the task is delegated to the verification server (see Verification Server chapter in *Integration with other Systems*).\n \n-### Authenticity\n+### Authenticity to CDN\n \n All files published by CWA will be digitally signed by CWA.\n This ensures that clients can trust the file they have received from the third-party CDN.\n@@ -87,6 +109,15 @@ is a zip file, containing two files - one carries the actual payload. The other\n CWA is be required to share the public key with Google/Apple, so that the API on the mobile client\n is able verify against it.\n \n+### Authenticity to Federation Gateway\n+\n+The requirements for authenticity to the Federation gateway are outlined in the [eHealth Network Guidelines](https://ec.europa.eu/health/sites/health/files/ehealth/docs/mobileapps_interoperabilitydetailedelements_en.pdf) and pertain to how the CWA Backend must interact with the service. These guidelines discuss:\n+\n+- How to verify the integrity of the data downloaded within each batch. This is discussed in section 5.7 Audit Interface.\n+- How country backend servers are intended to interact and authenticate themselves to the Federation Gateway. This is covered section 6 Security and talks about the process for handling certificates, mTLS, and communication protocols of HTTP(s)\n+\n+The CWA Server for Upload and Download will adhere to these guidelines in order to facilitate a proper integration.\n+\n ### Fake Submissions (Plausible Deniability)\n \n In order to protect the privacy of the users, the mobile app needs to send dummy submissions from time to time.\n@@ -97,108 +128,11 @@ The CWA server does not persist the entry on the database and ensures that dummy\n \n ## Services\n \n-### Submission Service\n-\n-The submission service's only task is to process uploaded diagnosis keys and persist them to the database after the TAN has been verified.\n-The actual task of the verification is handed over to the verification server, which provides the verification result back to CWA.\n-After verification was successfully done, the diagnosis keys are persisted in the database, and will be published in the next batch.\n-\n-The payload to be sent by the mobile applications is defined as:\n-\n-```protobuf\n-message SubmissionPayload {\n-  repeated Key keys = 1;\n-}\n-\n-message Key {\n-  bytes keyData = 1; // Key of infected user\n-  uint32 rollingStartIntervalNumber = 2; // Interval number when the key's EKRollingPeriod started.\n-  uint32 rollingPeriod = 3; // Number of 10-minute windows between key rolling.\n-  int32 transmissionRiskLevel = 4; // Risk of transmission associated with the person this key came from.\n-}\n-```\n-\n-Additionally, the endpoint requires the following headers to be set:\n-\n-```http\n-CWA-Authorization: TAN <TAN>\n-CWA-Fake: <0 or 1>\n-```\n-\n-There is currently no official specification for publishing diagnosis keys to the server.\n-Google currently uses the following in their reference implementation.\n-\n-[exposure_types.go](https://github.com/google/exposure-notifications-server/blob/master/pkg/api/v1alpha1/exposure_types.go)\n-\n-```golang\n-type Publish struct {\n-  Keys                []ExposureKey `json:\"temporaryExposureKeys\"`\n-  Regions             []string      `json:\"regions\"`\n-  AppPackageName      string        `json:\"appPackageName\"`\n-  VerificationPayload string        `json:\"verificationPayload\"`\n-  HMACKey             string        `json:\"hmackey\"`\n-  Padding             string        `json:\"padding\"`\n-\n-  Platform                  string `json:\"platform\"`                  // DEPRECATED\n-  DeviceVerificationPayload string `json:\"deviceVerificationPayload\"` // DEPRECATED\n-}\n-```\n-\n-Due to concerns regarding data privacy and protection, device attestation is currently not being used by CWA.\n-\n-### Distribution Service\n-\n-The distribution service's objective is to publish all CWA-related files to the object store, from which\n-the clients will fetch their data. There are three types of files.\n-\n-#### Key Export\n-\n-Key Export files are files, which hold published diagnosis keys from users that have tested positive for SARS-CoV-2.\n-These files are based on the specification of Google/Apple and are generated in regular intervals.\n-Each interval generates a `.zip` file, containing two files:\n-\n-1. export.bin: Contains the list of diagnosis keys.\n-2. export.sig: Contains signature information needed for validating the export.bin file.\n-The file structure definition can be found [here](https://github.com/google/exposure-notifications-server/blob/master/internal/pb/export/export.proto).\n-\n-The distribution service is triggered by a CRON scheduler, currently set to 1 hour. However, this\n-will change, since the Exposure Notification APIs have a rate-limiting in place (Apple: 15 files/day, Google 20 API calls/day).\n-\n-In case there is an insufficient number of diagnosis keys for the target interval available, the\n-creation of the file will be skipped in order to prevent attackers from being potentially able to\n-de-obfuscate individuals.\n-\n-Another alternative is to put fake diagnosis keys into the payload, which would serve the same purpose.\n-In that case, it needs to be guaranteed, that those fake diagnosis keys are indistinguishable from real ones.\n-\n-#### Configuration\n-\n-Configuration files are needed for two use cases:\n-\n-1. Exposure Configuration: In order to calculate a risk score for each exposure incident, the mobile\n-API requires a list of the following parameters, requiring weights and levels: duration, days, attenuation and transmission.\n-The function and impact of those parameters is described on the [Apple Exposure Configuration Page](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration) and in the chapter [*Risk score calculation*](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md#risk-score-calculation) of the solution architecture document.\n-2. Mobile App Configuration: Provides configuration values needed for the CWA mobile app, which are\n-not part of the exposure notification framework. These values are required for controlling the\n-application behavior.\n-\n-#### Discovery\n-\n-Files on CWA may be discovered with the help of index files. There is one central index file,\n-containing all available key export files on the server, separated by new-line.\n-The index will be regenerated whenever new export files are distributed to the object store.\n-\n-## Data Retention\n+* [Submission Service](./SUBMISSION.md)\n+* [Distribution Service](./DISTRIBUTION.md)\n+* [Federation Upload Service](./FEDERATION-UPLOAD.md)\n+* [Federation Download Service](./FEDERATION-DOWNLOAD.md)\n \n-The retention period is set to 14 days. Therefore, all keys whose _submission date_ is older than 14 days are removed from the system. This includes the database persistency layer, as well as files stored on the object store.\n-The retention mechanism is enforced automatically by the Distribution Service upon each distribution run (multiple runs per day).\n-No manual trigger or action is required.\n \n-Data is deleted by normal means. For PostgreSQL, the identified rows will be deleted by normal __DELETE__ calls to the database, and\n-cleaned up when auto vacuuming is executed.\n-When data deletion is executed on the object store, the object store is instructed to delete all\n-files with the following prefix:\n \n-`version/v1/diagnosis-keys/country/DE/<date>`\n \n-In which `<date>` stands for the ISO formatted date (e.g. `2012-06-05`), and is before the retention cutoff date (today - 14 days)."
  },
  {
    "sha": "158a945bd3ac1a9f66be9253109fd8703ea83ad9",
    "filename": "docs/DISTRIBUTION.md",
    "status": "modified",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/DISTRIBUTION.md",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/DISTRIBUTION.md",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docs/DISTRIBUTION.md?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -1,5 +1,62 @@\n # CWA-Server Distribution Service\n \n+The distribution service's objective is to publish all CWA-related files to the object store, from which\n+the clients will fetch their data. There are three types of files.\n+\n+#### Key Export\n+\n+Key Export files are files, which hold published diagnosis keys from users that have tested positive for SARS-CoV-2.\n+These files are based on the specification of Google/Apple and are generated in regular intervals.\n+Each interval generates a `.zip` file for each applicable country where keys are known. Each `.zip file` contains two files:\n+\n+1. export.bin: Contains the list of diagnosis keys.\n+2. export.sig: Contains signature information needed for validating the export.bin file.\n+The file structure definition can be found [here](https://github.com/google/exposure-notifications-server/blob/master/internal/pb/export/export.proto).\n+\n+The distribution service is triggered by a CRON scheduler, currently set to 1 hour. However, this\n+will change, since the Exposure Notification APIs have a rate-limiting in place (Apple: 15 files/day, Google 20 API calls/day).\n+\n+In case there is an insufficient number of diagnosis keys for the target interval available, the\n+creation of the file will be skipped in order to prevent attackers from being potentially able to\n+de-obfuscate individuals.\n+\n+Another alternative is to put fake diagnosis keys into the payload, which would serve the same purpose.\n+In that case, it needs to be guaranteed, that those fake diagnosis keys are indistinguishable from real ones.\n+\n+#### Configuration\n+\n+Configuration files are needed for two use cases:\n+\n+1. Exposure Configuration: In order to calculate a risk score for each exposure incident, the mobile\n+API requires a list of the following parameters, requiring weights and levels: duration, days, attenuation and transmission.\n+The function and impact of those parameters is described on the [Apple Exposure Configuration Page](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration) and in the chapter [*Risk score calculation*](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md#risk-score-calculation) of the solution architecture document.\n+2. Mobile App Configuration: Provides configuration values needed for the CWA mobile app, which are\n+not part of the exposure notification framework. These values are required for controlling the\n+application behavior.\n+\n+#### Discovery\n+\n+Files on CWA may be discovered with the help of index files. There is one central index file,\n+containing all available key export files on the server, separated by new-line.\n+The index will be regenerated whenever new export files are distributed to the object store.\n+\n+## Data Retention\n+\n+The retention period is set to 14 days. Therefore, all keys whose _submission date_ is older than 14 days are removed from the system. This includes the database persistency layer, as well as files stored on the object store.\n+The retention mechanism is enforced automatically by the Distribution Service upon each distribution run (multiple runs per day). The retention trigger by distribution will also be reflected within the keys pending upload to the\n+federation gateway. This is especially important scenarios where the upload service may not of run for some time or there are some failures to ensure invalid keys are not accidentally propagated.\n+No manual trigger or action is required.\n+\n+Data is deleted by normal means. For PostgreSQL, the identified rows will be deleted by normal __DELETE__ calls to the database, and\n+cleaned up when auto vacuuming is executed.\n+\n+When data deletion is executed on the object store, the object store is instructed to delete all\n+files with the following prefix:\n+\n+`version/v1/diagnosis-keys/country/<country_code>/<date>`\n+\n+In which `<date>` stands for the ISO formatted date (e.g. `2012-06-05`), and is before the retention cutoff date (today - 14 days).\n+\n ## Spring Profiles\n \n Spring profiles are used to apply distribution service configuration based on the running environment, determined by the active profile."
  },
  {
    "sha": "2e9654725f78c63e8d1f156ccc8978b7b3a36dad",
    "filename": "docs/FEDERATION-CALLBACK.md",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/FEDERATION-CALLBACK.md",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/FEDERATION-CALLBACK.md",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docs/FEDERATION-CALLBACK.md?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,48 @@\n+# CWA Federation Callback Service\n+\n+This service will expose an API which is registered with the federation gateways callback service API to accept the callback notifications. The role of this service is to validate the certificates (mTLS handshake) and then store the notification info (batchTag and date) into the postgres database for future processing by the federation key download job.\n+\n+![Callback Flow Diagram](./images/callback-flow.png)\n+\n+## External Dependencies\n+\n+- **Vault**: Used for secrets and certificate storage\n+- **RDBMS**: PostgreSQL as the persistent storage for notifications\n+\n+## Spring Profiles\n+\n+Spring profiles are used to apply federation key download service configuration based on the running environment, determined by the active profile.\n+\n+You will find `.yaml` and `.xml` based profile-specific configuration files at [`/services/callback/src/main/resources`](/services/callback/src/main/resources).\n+\n+### Available Profiles\n+\n+Profile                                           | Effect\n+--------------------------------------------------|-------------\n+`dev`                                             | Sets the log level to `DEBUG` and changes the `CONSOLE_LOG_PATTERN` used by Log4j 2.\n+`cloud`                                           | Removes default values for the `spring.flyway`, `spring.datasource` and sets federation gateway contexts\n+`disable-ssl-server`                              | Disables SSL for the submission endpoint.\n+`disable-ssl-client-postgres`                     | Disables SSL with a pinned certificate for the connection to the postgres.\n+\n+Please refer to the inline comments in the base `application.yaml` configuration file for further details on the configuration properties impacted by the above profiles.\n+\n+## Data Model\n+\n+The callback service will insert new entries (batch tag and date information) specified within the HTTP request into the table mentioned below. This information will then be further processed by the federation key download job.\n+\n+```sql\n+CREATE TABLE federation_batch (\n+    batch_tag   varchar(20) PRIMARY KEY,\n+    date        date NOT NULL,\n+    status      varchar(20)\n+);\n+```\n+\n+## Federation Gateway Requirements on the Callback API\n+\n+The federation gateway expects callback API's to have a specific API and specific authentication mechanisms:\n+\n+- The Federation Gateway Service performs mutual authentication with the national backends. This means the API validates the provided server certificate of the national backend and provides its identity as a client certificate to them. Each national backend has to explicitly whitelist this identity and has to provide a server certificate public key to the Federation Gateway Service for whitelisting. \n+- The Federation Gateway will send a **GET** request to the callback service and provide the following attributes as query paraeers:\n+    * `batchTag: type string`: Represents the ID of the batch\n+    * `date` type date: The day from which the batch is available IE: `04-03-2020` \n\\ No newline at end of file"
  },
  {
    "sha": "a73f140d9c7c2b06d47a2c5781f65910cc1b2e6e",
    "filename": "docs/FEDERATION-DOWNLOAD.md",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/FEDERATION-DOWNLOAD.md",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/1b43da7c22b413d7c337f25a201f5f10eaf61456/docs/FEDERATION-DOWNLOAD.md",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docs/FEDERATION-DOWNLOAD.md?ref=1b43da7c22b413d7c337f25a201f5f10eaf61456",
    "patch": "@@ -0,0 +1,90 @@\n+# CWA Federation Key Download Service\n+\n+This is a spring boot [ApplicationRunner](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ApplicationRunner.html) service (running as a cronjob). The app will deal with the download, sematic validation, extraction, and storage of the keys from the federation gateway. The download service leverages the download API of the federation gateway and will trigger downloads of available batches since the last time it executed. For the initial release the download service will use the polling mechanism provided by the federation gateway based on `batchTag` and `Date` combinations and it will keep track of its last processed state within the database. When and if the callback service integration is fully realized the polling mechanism would mainly be used for mass loading scenarios, and this service will then only download the persisted individual batches where notifications have been received.\n+\n+On the download of keys from the federation gateway a process of normalization needs to take place. This is done to enable the keys to be consumable by the DE CWA app as not all countries support the same approach which is required for the CWA app. The means the following:\n+\n+- For keys from countries which support the daysSinceOnset scenario will need to be converted into an appropriate transmission risk level\n+- For keys from countries which support the transmission risk level we might need to translate the value to something which is reasonable for the RKI\n+- For keys from countries which support neither, or a key doesn't happen to have either value then there will be a need to provide a reasonable default\n+\n+The rules above would be defined at 2 levels:\n+\n+- On a per country basis such that the rules can be specified and values derived based on the origin country\n+- At a global level for situations where we do not have country specific rules\n+\n+They would also take into consideration other attributes provided within the key data for example report type. The full set of attributes to be evaluated and how is still TBD.\n+\n+These rules will allow the keys sourced from the federation gateway to be processed within the CWA App and be considered with the risk detection algorithms.\n+\n+## External Dependencies\n+\n+- **Vault**: Used for secrets and certificate storage\n+- **RDBMS**: PostgreSQL as the persistent storage for keys which are downloaded\n+- **Federation Gateway Service**: The service where the service downloads the keys\n+\n+## Spring Profiles\n+\n+Spring profiles are used to apply federation key download service configuration based on the running environment, determined by the active profile.\n+\n+You will find `.yaml` and `.xml` based profile-specific configuration files at [`/services/federation-download/src/main/resources`](/services/federation-download/src/main/resources).\n+\n+### Available Profiles\n+\n+Profile                                           | Effect\n+--------------------------------------------------|-------------\n+`dev`                                             | Sets the log level to `DEBUG` and changes the `CONSOLE_LOG_PATTERN` used by Log4j 2.\n+`cloud`                                           | Removes default values for the `spring.flyway`, `spring.datasource` and sets federation gateway contexts\n+`disable-ssl-server`                              | Disables SSL for the submission endpoint.\n+`disable-ssl-client-postgres`                     | Disables SSL with a pinned certificate for the connection to the postgres.\n+\n+Please refer to the inline comments in the base `application.yaml` configuration file for further details on the configuration properties impacted by the above profiles.\n+\n+## Data Model\n+\n+This service doesn't specifically introduce any new data model concepts. It will reuse the existing diagnosis key table where it will store the keys that it downloads.\n+\n+```sql\n+CREATE TABLE diagnosis_key (\n+    key_data bytea PRIMARY KEY,\n+    rolling_period integer NOT NULL,\n+    rolling_start_interval_number integer NOT NULL,\n+    submission_timestamp bigint NOT NULL,\n+    transmission_risk_level integer NOT NULL,\n+    consent_to_federation boolean NOT NULL DEFAULT FALSE,\n+    origin_country varchar (2),\n+    visited_countries varchar (2) [],\n+    verification_type varchar(20)\n+    efgs_batch_tag text -> TODO: Check with team on adding this attribute\n+);\n+```\n+\n+## Resilience\n+As this service is a cronjob it will be ensured by the infrastructure that it is running per the schedule defined. Beyond this the following considerations were made to ensure the keys are sent to the federation gateway:\n+\n+- Batches which need to be processed are known on the DB. If a failure occurs the next run will pickup from where it left off ensuring we do not miss any batch requests.\n+- Retry processing around the Federation Gateway API endpoint invocations will be in place incase an initial request fails\n+\n+## Security\n+\n+The means to authenticate with the Federation Gateway is set by the Federation Gateway Service and is described in the associated documentation. To briefly summarize what the upload service will need to ensure:\n+\n+- GET API calls to the /download service are secured via mTLS over HTTPs\n+- Batches which are download are signed by the National Backend Servers to ensure data integrity per the requirements of the Federation Gateway. The download service will make use of the audit API of the federation gateway and the provided public keys to verify that the keys we are receiving are genuine. Logs will also be in place to denote that a batch with tag X was received from gateway and when the audit validations are in place logs will be generated for each batch/country combination.\n+- Certificates are managed by an external vault service and consumed from the application at runtime.\n+\n+## Batch Auditing\n+\n+To be implemented/aligned: \n+\n+The Federation Gateway provides an API to request audit information in relation to a batch. This audit operation provides the possibility to verify data integrity and authenticity within a batch. The operation returns information about the batch, for instance:\n+* Countries contained in the batch\n+* Amount of keys\n+* Batch signatures by country\n+* Uploading Information\n+* Signature Information\n+* Operator Signatures\n+\n+All this information can be cross-checked over the certificate authorities or over the transmitted certificate information. (in the case of a self-signed certificate).\n+\n+The download service will make use of this Audit API in order to ensure the data integrity from the countries received with a batch. The service will prepare a hash based on the keys associated with a particular country and compare this with what is provided from the audit API. If the validation fails the keys from this country will not be accepted into the CWA Server database. Audit logs will be maintained which indicates that keys from country X were rejected due to the failure of the audit verification.\n\\ No newline at end of file"
  }
]
