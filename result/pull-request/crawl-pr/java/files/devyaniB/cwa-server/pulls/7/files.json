[
  {
    "sha": "de6f9680867c382a03b2ff719177e99ee11b2a57",
    "filename": ".env",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/.env",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/.env",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/.env?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -12,6 +12,9 @@ POSTGRES_DISTRIBUTION_PASSWORD=local_setup_distribution\n POSTGRES_SUBMISSION_USER=local_setup_submission\n POSTGRES_SUBMISSION_PASSWORD=local_setup_submission\n \n+POSTGRES_CALLBACK_USER=local_setup_callback\n+POSTGRES_CALLBACK_PASSWORD=local_setup_callback\n+\n POSTGRES_FLYWAY_USER=local_setup_flyway\n POSTGRES_FLYWAY_PASSWORD=local_setup_flyway\n "
  },
  {
    "sha": "96434640200b42b7ea6fd72394b6491b867da665",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/.gitignore",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/.gitignore",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/.gitignore?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -39,6 +39,7 @@ out/\n .project\n .classpath\n .factorypath\n+.checkstyle\n \n pom.xml.versionsBackup\n **/.flattened-pom.xml"
  },
  {
    "sha": "57caf070257efa1f4b39bf4e88eaa765cb3dd62a",
    "filename": ".mvn/maven.config",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/.mvn/maven.config",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/.mvn/maven.config",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/.mvn/maven.config?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -1,4 +1,4 @@\n--Drevision=1.3.0-SNAPSHOT\n+-Drevision=1.6.0-FED-SNAPSHOT\n -Dlicense.projectName=Corona-Warn-App\n -Dlicense.inceptionYear=2020\n -Dlicense.licenseName=apache_v2"
  },
  {
    "sha": "6be1ffd0dc9deb755725d06f8aebf5a00bcbff96",
    "filename": "common/federation/pom.xml",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/pom.xml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/pom.xml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/pom.xml?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <artifactId>common</artifactId>\n+    <groupId>org.opencwa</groupId>\n+    <version>${revision}</version>\n+    <relativePath>../pom.xml</relativePath>\n+  </parent>\n+\n+  <artifactId>federation</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.opencwa</groupId>\n+      <artifactId>protocols</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.cloud</groupId>\n+      <artifactId>spring-cloud-starter-openfeign</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.github.openfeign</groupId>\n+      <artifactId>feign-httpclient</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.springframework.boot</groupId>\n+          <artifactId>spring-boot-starter-logging</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-log4j2</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.logging.log4j</groupId>\n+      <artifactId>log4j-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.logging.log4j</groupId>\n+      <artifactId>log4j-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.dom4j</groupId>\n+      <artifactId>dom4j</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.yaml</groupId>\n+      <artifactId>snakeyaml</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.github.openfeign</groupId>\n+      <artifactId>feign-core</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+</project>"
  },
  {
    "sha": "af8d9805e5fd24002c88e35cec6d268d24669486",
    "filename": "common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationFeignHttpClientProvider.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationFeignHttpClientProvider.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationFeignHttpClientProvider.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationFeignHttpClientProvider.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,107 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client;\n+\n+import app.coronawarn.server.common.federation.client.config.FederationGatewayConfig;\n+import feign.Client;\n+import feign.httpclient.ApacheHttpClient;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import javax.net.ssl.SSLContext;\n+import org.apache.http.conn.ssl.NoopHostnameVerifier;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.ssl.SSLContextBuilder;\n+import org.springframework.cloud.commons.httpclient.ApacheHttpClientConnectionManagerFactory;\n+import org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory;\n+import org.springframework.cloud.commons.httpclient.DefaultApacheHttpClientConnectionManagerFactory;\n+import org.springframework.cloud.commons.httpclient.DefaultApacheHttpClientFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Creates a dedicated http client used by Feign when performing http calls to the Federation Gateway Service.\n+ */\n+@Component\n+public class FederationFeignHttpClientProvider {\n+\n+  private final Integer connectionPoolSize;\n+  private final File keyStore;\n+  private final String keyStorePassword;\n+  private final String keyPassword;\n+\n+  /**\n+   * Construct Provider.\n+   * @param config .\n+   */\n+  public FederationFeignHttpClientProvider(FederationGatewayConfig config) {\n+    var ssl = config.getSsl();\n+    this.connectionPoolSize = config.getConnectionPoolSize();\n+    this.keyStore = ssl.getKeyStore();\n+    this.keyStorePassword = ssl.getKeyStorePass();\n+    this.keyPassword = ssl.getKeyStorePass();\n+  }\n+\n+  /**\n+   * Creates a FeignClient.\n+   */\n+  @Bean\n+  public Client createFeignClient() {\n+    return new ApacheHttpClient(\n+        federationHttpClientFactory(connectionPoolSize, keyStore, keyStorePassword, \"JKS\")\n+            .createBuilder().build());\n+  }\n+\n+  /**\n+   * Creates an {@link ApacheHttpClientFactory} that validates SSL certificates but no host names.\n+   */\n+  private ApacheHttpClientFactory federationHttpClientFactory(int connectionPoolSize, File keyStorePath,\n+                                                              String keyStorePass,\n+                                                              String certificateType) {\n+    return new DefaultApacheHttpClientFactory(HttpClientBuilder.create()\n+        .setMaxConnPerRoute(connectionPoolSize)\n+        .setMaxConnTotal(connectionPoolSize)\n+        .setSSLContext(getSslContext(keyStorePath, keyStorePass, certificateType))\n+        .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE));\n+  }\n+\n+  private SSLContext getSslContext(File keyStorePath, String keyStorePass, String certificateType) {\n+    try {\n+      return SSLContextBuilder\n+          .create()\n+          .loadKeyMaterial(keyStorePath, keyStorePass.toCharArray(), keyStorePass.toCharArray())\n+          .loadTrustMaterial(TrustSelfSignedStrategy.INSTANCE)\n+          .build();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  /**\n+   * Creates connection manager.\n+   * @return ApacheHttpClientConnectionManagerFactory.\n+   */\n+  @Bean\n+  public ApacheHttpClientConnectionManagerFactory createConnectionManager() {\n+    return new DefaultApacheHttpClientConnectionManagerFactory();\n+  }\n+}"
  },
  {
    "sha": "da2f8f1b8a2d99839d48eef306f20a93d767effc",
    "filename": "common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationGatewayClient.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationGatewayClient.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationGatewayClient.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/main/java/app/coronawarn/server/common/federation/client/FederationGatewayClient.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,72 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client;\n+\n+import app.coronawarn.server.common.federation.client.download.BatchDownloadResponse;\n+import org.springframework.cloud.openfeign.FeignClient;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+\n+/**\n+ * Declarative web service client for the Federation Gateway API.\n+ *\n+ * <p>Any application that wants to uses it must make sure the required configuration\n+ * beans in this module are registered (scan root package of the module). There is also a constraint imposed on\n+ * application properties, such that values for the following structure must be declared:\n+ * <li> federation-gateway.base-url\n+ * <li> federation-gateway.ssl.key-store-path\n+ * <li> federation-gateway.ssl.key-store-pass\n+ * <li> federation-gateway.ssl.certificate-type\n+ */\n+@FeignClient(name = \"federation-server\", url = \"${federation-gateway.base-url}\")\n+public interface FederationGatewayClient {\n+\n+  @GetMapping(value = \"/diagnosiskeys/download/{date}\",\n+      headers = {\"Accept=application/protobuf; version=1.0\",\n+          \"X-SSL-Client-SHA256=${federation-gateway.ssl.certificate-sha}\",\n+          \"X-SSL-Client-DN=${federation-gateway.ssl.certificate-dn}\"})\n+  BatchDownloadResponse getDiagnosisKeys(@PathVariable(\"date\") String date);\n+\n+  @GetMapping(value = \"/diagnosiskeys/download/{date}\",\n+      headers = {\"Accept=application/protobuf; version=1.0\",\n+          \"X-SSL-Client-SHA256=${federation-gateway.ssl.certificate-sha}\",\n+          \"X-SSL-Client-DN=${federation-gateway.ssl.certificate-dn}\"})\n+  BatchDownloadResponse getDiagnosisKeys(@RequestHeader(\"batchTag\") String batchTag,\n+      @PathVariable(\"date\") String date);\n+\n+  /**\n+   * HTTP POST request federation gateway endpoint /diagnosiskyes/upload.\n+   * @param raw Payload body. This property contains a raw byte array with the encoded protobuf DiagnosisKeyBatch.\n+   * @param batchTag Unique batchTag to be identified by EFGS.\n+   * @param batchSignature Batch Signature as per PKCS#7 spec using Authorized Signing Certificate.\n+   */\n+  @PostMapping(value = \"/diagnosiskeys/upload\",\n+      consumes = \"application/protobuf; version=1.0\",\n+      headers = {\"Accept=application/json; version=1.0\",\n+          \"X-SSL-Client-SHA256=${federation-gateway.ssl.certificate-sha}\",\n+          \"X-SSL-Client-DN=${federation-gateway.ssl.certificate-dn}\"})\n+  String postBatchUpload(\n+      byte[] raw,\n+      @RequestHeader(\"batchTag\") String batchTag,\n+      @RequestHeader(\"batchSignature\") String batchSignature);\n+}"
  },
  {
    "sha": "79274c639866c03d9aae20adf8c490d634ea7601",
    "filename": "common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/FederationGatewayConfig.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/FederationGatewayConfig.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/FederationGatewayConfig.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/FederationGatewayConfig.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,109 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client.config;\n+\n+import java.io.File;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Component\n+@ConfigurationProperties(prefix = \"federation-gateway\")\n+@Validated\n+public class FederationGatewayConfig {\n+\n+  private Ssl ssl;\n+  private Integer connectionPoolSize;\n+  private String baseUrl;\n+\n+  public Ssl getSsl() {\n+    return ssl;\n+  }\n+\n+  public void setSsl(Ssl ssl) {\n+    this.ssl = ssl;\n+  }\n+\n+  public Integer getConnectionPoolSize() {\n+    return connectionPoolSize;\n+  }\n+\n+  public void setConnectionPoolSize(Integer connectionPoolSize) {\n+    this.connectionPoolSize = connectionPoolSize;\n+  }\n+\n+  public String getBaseUrl() {\n+    return baseUrl;\n+  }\n+\n+  public void setBaseUrl(String baseUrl) {\n+    this.baseUrl = baseUrl;\n+  }\n+\n+  public static class Ssl {\n+\n+    private File keyStore;\n+    private String keyStorePass;\n+    private String certificateType;\n+    private String certificateDn;\n+    private String certificateSha;\n+\n+    public String getCertificateDn() {\n+      return certificateDn;\n+    }\n+\n+    public void setCertificateDn(String certificateDn) {\n+      this.certificateDn = certificateDn;\n+    }\n+\n+    public String getCertificateSha() {\n+      return certificateSha;\n+    }\n+\n+    public void setCertificateSha(String certificateSha) {\n+      this.certificateSha = certificateSha;\n+    }\n+\n+    public File getKeyStore() {\n+      return keyStore;\n+    }\n+\n+    public void setKeyStore(File keyStore) {\n+      this.keyStore = keyStore;\n+    }\n+\n+    public String getKeyStorePass() {\n+      return keyStorePass;\n+    }\n+\n+    public void setKeyStorePass(String keyStorePass) {\n+      this.keyStorePass = keyStorePass;\n+    }\n+\n+    public String getCertificateType() {\n+      return certificateType;\n+    }\n+\n+    public void setCertificateType(String certificateType) {\n+      this.certificateType = certificateType;\n+    }\n+  }\n+}"
  },
  {
    "sha": "18dbfe198a910ce6fd19f378b99a3e95247d0259",
    "filename": "common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/WebConfig.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/WebConfig.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/WebConfig.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/main/java/app/coronawarn/server/common/federation/client/config/WebConfig.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,38 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client.config;\n+\n+import app.coronawarn.server.common.federation.client.download.FederationGatewayHttpMessageConverter;\n+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;\n+import org.springframework.cloud.openfeign.EnableFeignClients;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+\n+@Configuration\n+@EnableFeignClients(\"app.coronawarn.server.common.federation.client\")\n+public class WebConfig {\n+\n+  @Bean\n+  public HttpMessageConverters httpMessageConverters() {\n+    return new HttpMessageConverters(new FederationGatewayHttpMessageConverter());\n+  }\n+}"
  },
  {
    "sha": "a06d9290d71dbfdc1b554887d198946d4485dbd4",
    "filename": "common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/BatchDownloadResponse.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/BatchDownloadResponse.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/BatchDownloadResponse.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/BatchDownloadResponse.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,77 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client.download;\n+\n+import app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKeyBatch;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Contains the {@link DiagnosisKeyBatch} and batch tag metadata as served by the federation gateway.\n+ */\n+public class BatchDownloadResponse {\n+\n+  private final DiagnosisKeyBatch diagnosisKeyBatch;\n+  private final String batchTag;\n+  private final Optional<String> nextBatchTag;\n+\n+  /**\n+   * Creates a FederationGatewayResponse that holds a {@link DiagnosisKeyBatch} and batch tag metadata as served by the\n+   * federation gateway.\n+   */\n+  public BatchDownloadResponse(\n+      DiagnosisKeyBatch diagnosisKeyBatch, String batchTag, Optional<String> nextBatchTag) {\n+    this.diagnosisKeyBatch = diagnosisKeyBatch;\n+    this.batchTag = batchTag;\n+    this.nextBatchTag = nextBatchTag;\n+  }\n+\n+  public DiagnosisKeyBatch getDiagnosisKeyBatch() {\n+    return diagnosisKeyBatch;\n+  }\n+\n+  public String getBatchTag() {\n+    return batchTag;\n+  }\n+\n+  public Optional<String> getNextBatchTag() {\n+    return nextBatchTag;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    BatchDownloadResponse that = (BatchDownloadResponse) o;\n+    return Objects.equals(diagnosisKeyBatch, that.diagnosisKeyBatch)\n+        && Objects.equals(batchTag, that.batchTag)\n+        && Objects.equals(nextBatchTag, that.nextBatchTag);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(diagnosisKeyBatch, batchTag, nextBatchTag);\n+  }\n+}"
  },
  {
    "sha": "189cc0e08e305f88f18a0302f9d80187169ba7fe",
    "filename": "common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverter.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverter.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverter.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/main/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverter.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,84 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client.download;\n+\n+import app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKeyBatch;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.springframework.http.HttpInputMessage;\n+import org.springframework.http.HttpOutputMessage;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.converter.AbstractHttpMessageConverter;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+\n+/**\n+ * Converter for converting federation gateway HTTP responses into {@link BatchDownloadResponse} objects.\n+ */\n+public class FederationGatewayHttpMessageConverter extends AbstractHttpMessageConverter<BatchDownloadResponse> {\n+\n+  /**\n+   * The media-type for protobuf {@code application/protobuf}.\n+   */\n+  public static final MediaType PROTOBUF = new MediaType(\"application\", \"protobuf\", StandardCharsets.UTF_8);\n+  public static final String HEADER_BATCH_TAG = \"batchTag\";\n+  public static final String HEADER_NEXT_BATCH_TAG = \"nextBatchTag\";\n+  public static final String EMPTY_HEADER = \"null\";\n+\n+  public FederationGatewayHttpMessageConverter() {\n+    setSupportedMediaTypes(Collections.singletonList(PROTOBUF));\n+  }\n+\n+  @Override\n+  protected boolean supports(Class<?> clazz) {\n+    return BatchDownloadResponse.class.isAssignableFrom(clazz);\n+  }\n+\n+  @Override\n+  protected BatchDownloadResponse readInternal(Class<? extends BatchDownloadResponse> clazz, HttpInputMessage message)\n+      throws IOException {\n+    String batchTag = getHeader(message, HEADER_BATCH_TAG)\n+        .orElseThrow(() -> new HttpMessageNotReadableException(\"Missing \" + HEADER_BATCH_TAG + \" header.\", message));\n+    Optional<String> nextBatchTag = getHeader(message, HEADER_NEXT_BATCH_TAG);\n+\n+    try (InputStream body = message.getBody()) {\n+      DiagnosisKeyBatch diagnosisKeyBatch = DiagnosisKeyBatch.parseFrom(body);\n+      return new BatchDownloadResponse(diagnosisKeyBatch, batchTag, nextBatchTag);\n+    } catch (InvalidProtocolBufferException e) {\n+      throw new HttpMessageNotReadableException(\"Failed to parse protocol buffers message\", e, message);\n+    }\n+  }\n+\n+  private Optional<String> getHeader(HttpInputMessage response, String header) {\n+    String headerString = response.getHeaders().getFirst(header);\n+    return (!EMPTY_HEADER.equals(headerString))\n+        ? Optional.ofNullable(headerString)\n+        : Optional.empty();\n+  }\n+\n+  @Override\n+  protected void writeInternal(BatchDownloadResponse message, HttpOutputMessage outputMessage) {\n+    throw new UnsupportedOperationException();\n+  }\n+}"
  },
  {
    "sha": "d070d98c38033ace67378222c9ab4d8d7055e10f",
    "filename": "common/federation/src/test/java/app/coronawarn/server/common/federation/TestApplication.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/java/app/coronawarn/server/common/federation/TestApplication.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/java/app/coronawarn/server/common/federation/TestApplication.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/test/java/app/coronawarn/server/common/federation/TestApplication.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,32 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation;\n+\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.openfeign.EnableFeignClients;\n+import org.springframework.context.annotation.Configuration;\n+\n+@SpringBootApplication\n+@EnableFeignClients\n+@Configuration\n+public class TestApplication {\n+\n+}"
  },
  {
    "sha": "3d793feb6ff7bd5f6d606972c21c1b3598e8ef1a",
    "filename": "common/federation/src/test/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverterTest.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverterTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverterTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/test/java/app/coronawarn/server/common/federation/client/download/FederationGatewayHttpMessageConverterTest.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,125 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.federation.client.download;\n+\n+import static app.coronawarn.server.common.federation.client.download.FederationGatewayHttpMessageConverter.PROTOBUF;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.util.Lists.list;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpHeaders.CONTENT_TYPE;\n+\n+import app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKeyBatch;\n+import com.google.protobuf.ByteString;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.Optional;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpInputMessage;\n+import org.springframework.http.HttpOutputMessage;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n+\n+class FederationGatewayHttpMessageConverterTest {\n+\n+  private static final String EXP_BATCH_TAG = \"507f191e810c19729de860ea\";\n+  private static final String EXP_NEXT_BATCH_TAG = \"507f191e810c19729de860ea\";\n+  private static final DiagnosisKeyBatch EXP_DIAGNOSIS_KEY_BATCH = DiagnosisKeyBatch.newBuilder()\n+      .addKeys(\n+          DiagnosisKey.newBuilder()\n+              .setKeyData(ByteString.copyFromUtf8(\"0123456789ABCDEF\"))\n+              .addVisitedCountries(\"DE\")\n+              .setRollingStartIntervalNumber(0)\n+              .setRollingPeriod(144)\n+              .setTransmissionRiskLevel(2)\n+              .build()).build();\n+\n+  private final FederationGatewayHttpMessageConverter converter = new FederationGatewayHttpMessageConverter();\n+\n+  @Test\n+  void supportedMediaTypesIsProtobuf() {\n+    assertThat(converter.getSupportedMediaTypes()).isEqualTo(list(PROTOBUF));\n+  }\n+\n+  @Test\n+  void supportsReturnsTrueForBatchDownloadResponseClass() {\n+    assertThat(converter.supports(BatchDownloadResponse.class)).isTrue();\n+  }\n+\n+  @Test\n+  void writeInternalThrowsUnsupportedOperationException() {\n+    BatchDownloadResponse message = mock(BatchDownloadResponse.class);\n+    HttpOutputMessage outputMessage = mock(HttpOutputMessage.class);\n+    assertThatExceptionOfType(UnsupportedOperationException.class)\n+        .isThrownBy(() -> converter.writeInternal(message, outputMessage));\n+  }\n+\n+  @Test\n+  void readInternalThrowsHttpMessageNotReadableExceptionIfPayloadInvalid() throws IOException {\n+    HttpInputMessage message = buildHttpInputMessage(\"somethingInvalid\".getBytes(UTF_8), EXP_BATCH_TAG, \"null\");\n+    assertThatExceptionOfType(HttpMessageNotReadableException.class)\n+        .isThrownBy(() -> converter.readInternal(BatchDownloadResponse.class, message));\n+  }\n+\n+  @Test\n+  void readInternalThrowsHttpMessageNotReadableExceptionIfBatchTagMissing() throws IOException {\n+    HttpInputMessage message = buildHttpInputMessageWithValidBody(null, \"null\");\n+    assertThatExceptionOfType(HttpMessageNotReadableException.class)\n+        .isThrownBy(() -> converter.readInternal(BatchDownloadResponse.class, message));\n+  }\n+\n+  @Test\n+  void readInternalReturnsResponseWithoutNextBatchTag() throws IOException {\n+    HttpInputMessage message = buildHttpInputMessageWithValidBody(EXP_BATCH_TAG, \"null\");\n+    BatchDownloadResponse actResponse = converter.readInternal(BatchDownloadResponse.class, message);\n+    assertThat(actResponse)\n+        .isEqualTo(new BatchDownloadResponse(EXP_DIAGNOSIS_KEY_BATCH, EXP_BATCH_TAG, Optional.empty()));\n+  }\n+\n+  @Test\n+  void readInternalReturnsResponseWithNextBatchTag() throws IOException {\n+    HttpInputMessage message = buildHttpInputMessageWithValidBody(EXP_BATCH_TAG, EXP_NEXT_BATCH_TAG);\n+    BatchDownloadResponse actResponse = converter.readInternal(BatchDownloadResponse.class, message);\n+    assertThat(actResponse)\n+        .isEqualTo(new BatchDownloadResponse(EXP_DIAGNOSIS_KEY_BATCH, EXP_BATCH_TAG, Optional.of(EXP_NEXT_BATCH_TAG)));\n+  }\n+\n+  private static HttpInputMessage buildHttpInputMessageWithValidBody(String batchTag, String nextBatchTag)\n+      throws IOException {\n+    return buildHttpInputMessage(EXP_DIAGNOSIS_KEY_BATCH.toByteArray(), batchTag, nextBatchTag);\n+  }\n+\n+  private static HttpInputMessage buildHttpInputMessage(byte[] body, String batchTag, String nextBatchTag)\n+      throws IOException {\n+    HttpInputMessage message = mock(HttpInputMessage.class);\n+    when(message.getBody()).thenReturn(new ByteArrayInputStream(body));\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.add(CONTENT_TYPE, \"application/protobuf; version=1.0\");\n+    headers.add(\"batchTag\", batchTag);\n+    headers.add(\"nextBatchTag\", nextBatchTag);\n+    when(message.getHeaders()).thenReturn(headers);\n+    return message;\n+  }\n+}"
  },
  {
    "sha": "ef296ff87b1e008adc3af0a350a6554c53ab41dc",
    "filename": "common/federation/src/test/resources/application.yaml",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/resources/application.yaml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/test/resources/application.yaml?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,13 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework: off\n+    root: off\n+federation-gateway:\n+  base-url: ${FEDERATION_GATEWAY_BASE_URL:http://localhost:8005}\n+  connection-pool-size: 200\n+  ssl:\n+    key-store-path: ${FEDERATION_GATEWAY_KEYSTORE_PATH}\n+    key-store-pass: ${FEDERATION_GATEWAY_KEYSTORE_PASS}\n+    certificate-type: PKCS12"
  },
  {
    "sha": "7d50010ecddd670d90681442cd02f627fb1b75de",
    "filename": "common/federation/src/test/resources/log4j2.xml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/resources/log4j2.xml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/federation/src/test/resources/log4j2.xml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/federation/src/test/resources/log4j2.xml?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration>\n+  <Properties>\n+    <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n+    <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd'T'HH:mm:ssXXX</Property>\n+    <Property name=\"CONSOLE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} %-5level %t %c{1.}[%pid]: %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n+  </Properties>\n+  <Appenders>\n+    <Console name=\"Console\" target=\"SYSTEM_OUT\" follow=\"true\">\n+      <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\" />\n+    </Console>\n+  </Appenders>\n+  <Loggers>\n+    <Root level=\"OFF\">\n+      <AppenderRef ref=\"Console\" />\n+    </Root>\n+  </Loggers>\n+</Configuration>"
  },
  {
    "sha": "7ab788af9b4a97a1c87eddf63ec5ee9e9208288f",
    "filename": "common/persistence/pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 158,
    "changes": 165,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/pom.xml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/pom.xml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/pom.xml?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -1,37 +1,21 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n   <parent>\n-    <groupId>org.springframework.boot</groupId>\n-    <artifactId>spring-boot-starter-parent</artifactId>\n-    <version>2.3.1.RELEASE</version>\n-    <relativePath></relativePath>\n+    <artifactId>common</artifactId>\n+    <groupId>org.opencwa</groupId>\n+    <version>${revision}</version>\n+    <relativePath>../pom.xml</relativePath>\n   </parent>\n-  <modelVersion>4.0.0</modelVersion>\n \n-  <groupId>org.opencwa</groupId>\n   <artifactId>persistence</artifactId>\n-  <version>${revision}</version>\n-\n-  <organization>\n-    <name>SAP SE</name>\n-  </organization>\n-\n-  <properties>\n-    <java.version>11</java.version>\n-    <maven.compiler.source>11</maven.compiler.source>\n-    <maven.compiler.target>11</maven.compiler.target>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n-    <sonar.projectKey>corona-warn-app_cwa-server_common_persistence</sonar.projectKey>\n-  </properties>\n \n   <dependencies>\n     <dependency>\n       <groupId>org.opencwa</groupId>\n       <artifactId>protocols</artifactId>\n-      <version>${project.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n@@ -48,13 +32,6 @@\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-test</artifactId>\n-      <scope>test</scope>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>org.junit.vintage</groupId>\n-          <artifactId>junit-vintage-engine</artifactId>\n-        </exclusion>\n-      </exclusions>\n     </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n@@ -73,160 +50,32 @@\n     <dependency>\n       <groupId>org.flywaydb</groupId>\n       <artifactId>flyway-core</artifactId>\n-      <version>6.4.3</version>\n     </dependency>\n     <dependency>\n       <groupId>org.postgresql</groupId>\n       <artifactId>postgresql</artifactId>\n-      <version>42.2.13</version>\n       <scope>runtime</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.testcontainers</groupId>\n       <artifactId>postgresql</artifactId>\n-      <version>1.14.3</version>\n-      <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <!-- https://nvd.nist.gov/vuln/detail/CVE-2020-9488 -->\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-core</artifactId>\n-      <version>2.13.3</version>\n     </dependency>\n     <dependency>\n-      <!-- https://nvd.nist.gov/vuln/detail/CVE-2020-9488 -->\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-api</artifactId>\n-      <version>2.13.3</version>\n     </dependency>\n     <dependency>\n-      <!-- Due to https://nvd.nist.gov/vuln/detail/CVE-2020-10683 -->\n       <groupId>org.dom4j</groupId>\n       <artifactId>dom4j</artifactId>\n-      <version>2.1.3</version>\n     </dependency>\n     <dependency>\n-      <!-- https://nvd.nist.gov/vuln/detail/CVE-2017-18640 -->\n       <groupId>org.yaml</groupId>\n       <artifactId>snakeyaml</artifactId>\n-      <version>1.26</version>\n     </dependency>\n   </dependencies>\n \n-  <reporting>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-javadoc-plugin</artifactId>\n-        <version>3.2.0</version>\n-        <configuration>\n-          <bottom>\n-            <![CDATA[\n-                    <script>\n-                    if (typeof useModuleDirectories !== 'undefined') {\n-                      useModuleDirectories = false;\n-                    }\n-                    </script>\n-                ]]>\n-          </bottom>\n-          <additionalJOption>--allow-script-in-comments</additionalJOption>\n-        </configuration>\n-      </plugin>\n-    </plugins>\n-  </reporting>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-site-plugin</artifactId>\n-        <version>3.7.1</version>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-project-info-reports-plugin</artifactId>\n-        <version>3.0.0</version>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>license-maven-plugin</artifactId>\n-        <version>2.0.0</version>\n-        <configuration>\n-          <includes>**/*.java</includes>\n-          <copyrightOwners>${project.organization.name} and all other contributors</copyrightOwners>\n-          <processStartTag>---license-start</processStartTag>\n-          <processEndTag>---license-end</processEndTag>\n-          <sectionDelimiter>---</sectionDelimiter>\n-          <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>\n-          <trimHeaderLine>true</trimHeaderLine>\n-          <emptyLineAfterHeader>true</emptyLineAfterHeader>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <!-- see https://maven.apache.org/maven-ci-friendly.html#install-deploy -->\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>flatten-maven-plugin</artifactId>\n-        <version>1.1.0</version>\n-        <configuration>\n-          <updatePomFile>true</updatePomFile>\n-          <flattenMode>resolveCiFriendliesOnly</flattenMode>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>flatten</id>\n-            <phase>process-resources</phase>\n-            <goals><goal>flatten</goal></goals>\n-          </execution>\n-          <execution>\n-            <id>flatten-clean</id>\n-            <phase>clean</phase>\n-            <goals><goal>clean</goal></goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-        <version>3.1.1</version>\n-        <configuration>\n-          <configLocation>../../codestyle/checkstyle.xml</configLocation>\n-          <excludes>**/module-info.java,**/target/**/*</excludes>\n-          <encoding>UTF-8</encoding>\n-          <consoleOutput>true</consoleOutput>\n-          <failsOnError>true</failsOnError>\n-          <violationSeverity>warning</violationSeverity>\n-          <failOnViolation>true</failOnViolation>\n-          <linkXRef>false</linkXRef>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>validate</id>\n-            <phase>validate</phase>\n-            <goals>\n-              <goal>check</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.jacoco</groupId>\n-        <artifactId>jacoco-maven-plugin</artifactId>\n-        <version>0.8.5</version>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>prepare-agent</goal>\n-            </goals>\n-          </execution>\n-          <execution>\n-            <id>report</id>\n-            <goals>\n-              <goal>report</goal>\n-            </goals>\n-            <phase>verify</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n </project>"
  },
  {
    "sha": "6e135bc149ed0ba456aacf090cb0100f0994ab5d",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "status": "modified",
    "additions": 55,
    "deletions": 6,
    "changes": 61,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -25,9 +25,12 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n import app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestamp;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n@@ -42,12 +45,15 @@\n  */\n public class DiagnosisKey {\n \n+  public static final long ROLLING_PERIOD_MINUTES_INTERVAL = 10;\n+\n   /**\n    * According to \"Setting Up an Exposure Notification Server\" by Apple, exposure notification servers are expected to\n    * reject any diagnosis keys that do not have a rolling period of a certain fixed value. See\n    * https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server\n    */\n-  public static final int EXPECTED_ROLLING_PERIOD = 144;\n+  public static final int MIN_ROLLING_PERIOD = 0;\n+  public static final int MAX_ROLLING_PERIOD = 144;\n \n   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n \n@@ -58,8 +64,8 @@\n   @ValidRollingStartIntervalNumber\n   private final int rollingStartIntervalNumber;\n \n-  @Range(min = EXPECTED_ROLLING_PERIOD, max = EXPECTED_ROLLING_PERIOD,\n-      message = \"Rolling period must be \" + EXPECTED_ROLLING_PERIOD + \".\")\n+  @Range(min = MIN_ROLLING_PERIOD, max = MAX_ROLLING_PERIOD,\n+      message = \"Rolling period must be between \" + MIN_ROLLING_PERIOD + \" and \" + MAX_ROLLING_PERIOD + \".\")\n   private final int rollingPeriod;\n \n   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n@@ -68,16 +74,34 @@\n   @ValidSubmissionTimestamp\n   private final long submissionTimestamp;\n \n+  private final boolean consentToFederation;\n+\n+  @Size(max = 2)\n+  private final String originCountry;\n+\n+  private final List<String> visitedCountries;\n+\n+  private final ReportType reportType;\n+\n+  private final int daysSinceOnsetOfSymptoms;\n+\n   /**\n    * Should be called by builders.\n    */\n   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n-      int transmissionRiskLevel, long submissionTimestamp) {\n+      int transmissionRiskLevel, long submissionTimestamp,\n+      boolean consentToFederation, @Size String originCountry, List<String> visitedCountries,\n+      ReportType reportType, int daysSinceOnsetOfSymptoms) {\n     this.keyData = keyData;\n     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n     this.rollingPeriod = rollingPeriod;\n     this.transmissionRiskLevel = transmissionRiskLevel;\n     this.submissionTimestamp = submissionTimestamp;\n+    this.consentToFederation = consentToFederation;\n+    this.originCountry = originCountry;\n+    this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;\n+    this.reportType = reportType;\n+    this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n   }\n \n   /**\n@@ -126,6 +150,26 @@ public long getSubmissionTimestamp() {\n     return submissionTimestamp;\n   }\n \n+  public boolean isConsentToFederation() {\n+    return consentToFederation;\n+  }\n+\n+  public String getOriginCountry() {\n+    return originCountry;\n+  }\n+\n+  public List<String> getVisitedCountries() {\n+    return visitedCountries;\n+  }\n+\n+  public ReportType getReportType() {\n+    return reportType;\n+  }\n+\n+  public int getDaysSinceOnsetOfSymptoms() {\n+    return daysSinceOnsetOfSymptoms;\n+  }\n+\n   /**\n    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n    *\n@@ -175,13 +219,18 @@ public boolean equals(Object o) {\n         && rollingPeriod == that.rollingPeriod\n         && transmissionRiskLevel == that.transmissionRiskLevel\n         && submissionTimestamp == that.submissionTimestamp\n-        && Arrays.equals(keyData, that.keyData);\n+        && Arrays.equals(keyData, that.keyData)\n+        && Objects.equals(originCountry, that.originCountry)\n+        && Objects.equals(visitedCountries, that.visitedCountries)\n+        && reportType == that.reportType\n+        && daysSinceOnsetOfSymptoms == that.daysSinceOnsetOfSymptoms;\n   }\n \n   @Override\n   public int hashCode() {\n     int result = Objects\n-        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp, originCountry,\n+            visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n     result = 31 * result + Arrays.hashCode(keyData);\n     return result;\n   }"
  },
  {
    "sha": "efcf51d36f6e1dbe5e406262b9e05a6db85c71d9",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "status": "modified",
    "additions": 54,
    "deletions": 3,
    "changes": 57,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -27,8 +27,10 @@\n import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;\n \n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n import java.time.Instant;\n+import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ConstraintViolation;\n@@ -46,9 +48,14 @@\n \n   private byte[] keyData;\n   private int rollingStartIntervalNumber;\n-  private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n+  private int rollingPeriod = DiagnosisKey.MAX_ROLLING_PERIOD;\n   private int transmissionRiskLevel;\n   private Long submissionTimestamp = null;\n+  private String countryCode;\n+  private List<String> visitedCountries;\n+  private ReportType reportType;\n+  private boolean consentToFederation;\n+  private int daysSinceOnsetOfSymptoms;\n \n   DiagnosisKeyBuilder() {\n   }\n@@ -72,14 +79,27 @@ public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {\n   }\n \n   @Override\n-  public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {\n+  public FinalBuilder fromTemporaryExposureKey(TemporaryExposureKey protoBufObject) {\n     return this\n         .withKeyData(protoBufObject.getKeyData().toByteArray())\n         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())\n         .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel())\n         .withRollingPeriod(protoBufObject.getRollingPeriod());\n   }\n \n+  @Override\n+  public FinalBuilder fromFederationDiagnosisKey(\n+      app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey federationDiagnosisKey) {\n+    return this\n+        .withKeyData(federationDiagnosisKey.getKeyData().toByteArray())\n+        .withRollingStartIntervalNumber(federationDiagnosisKey.getRollingStartIntervalNumber())\n+        .withTransmissionRiskLevel(federationDiagnosisKey.getTransmissionRiskLevel())\n+        .withRollingPeriod(federationDiagnosisKey.getRollingPeriod())\n+        .withCountryCode(federationDiagnosisKey.getOrigin())\n+        .withReportType(federationDiagnosisKey.getReportType())\n+        .withVisitedCountries(federationDiagnosisKey.getVisitedCountriesList());\n+  }\n+\n   @Override\n   public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {\n     this.submissionTimestamp = submissionTimestamp;\n@@ -92,6 +112,36 @@ public FinalBuilder withRollingPeriod(int rollingPeriod) {\n     return this;\n   }\n \n+  @Override\n+  public FinalBuilder withConsentToFederation(boolean consentToFederation) {\n+    this.consentToFederation = consentToFederation;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withCountryCode(String countryCode) {\n+    this.countryCode = countryCode;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withVisitedCountries(List<String> visitedCountries) {\n+    this.visitedCountries = visitedCountries;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withReportType(ReportType reportType) {\n+    this.reportType = reportType;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withDaysSinceOnsetOfSymptoms(int daysSinceOnsetOfSymptoms) {\n+    this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n+    return this;\n+  }\n+\n   @Override\n   public DiagnosisKey build() {\n     if (submissionTimestamp == null) {\n@@ -100,7 +150,8 @@ public DiagnosisKey build() {\n     }\n \n     var diagnosisKey = new DiagnosisKey(\n-        keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp,\n+        consentToFederation, countryCode, visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n     return throwIfValidationFails(diagnosisKey);\n   }\n "
  },
  {
    "sha": "176c4f26de2f60e7994cd42ebeaaf55c8900ad54",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "status": "modified",
    "additions": 25,
    "deletions": 4,
    "changes": 29,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -20,7 +20,9 @@\n \n package app.coronawarn.server.common.persistence.domain;\n \n+import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import java.util.List;\n \n /**\n  * This interface bundles interfaces that are used for the implementation of {@link DiagnosisKeyBuilder}.\n@@ -43,16 +45,25 @@\n      * @param protoBufObject ProtocolBuffer object associated with the temporary exposure key.\n      * @return this Builder instance.\n      */\n-    FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject);\n+    FinalBuilder fromTemporaryExposureKey(TemporaryExposureKey protoBufObject);\n+\n+    /**\n+     * Adds the data contained in the specified federation diagnosis key object to this builder.\n+     *\n+     * @param federationDiagnosisKey DiagnosisKey object associated with the temporary exposure key.\n+     * @return this Builder instance.\n+     */\n+    FinalBuilder fromFederationDiagnosisKey(\n+        app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey federationDiagnosisKey);\n   }\n \n   interface RollingStartIntervalNumberBuilder {\n \n     /**\n      * Adds the specified rolling start interval number to this builder.\n      *\n-     * @param rollingStartIntervalNumber number describing when a key starts. It is equal to\n-     *                                   startTimeOfKeySinceEpochInSecs / (60 * 10).\n+     * @param rollingStartIntervalNumber number describing when a key starts.\n+     *                                   It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n      * @return this Builder instance.\n      */\n     TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);\n@@ -81,14 +92,24 @@\n \n     /**\n      * Adds the specified rolling period to this builder. If not specified, the rolling period defaults to {@link\n-     * DiagnosisKey#EXPECTED_ROLLING_PERIOD}\n+     * DiagnosisKey#MAX_ROLLING_PERIOD}\n      *\n      * @param rollingPeriod Number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g.\n      *                      144 for 24 hours).\n      * @return this Builder instance.\n      */\n     FinalBuilder withRollingPeriod(int rollingPeriod);\n \n+    FinalBuilder withConsentToFederation(boolean consentToFederation);\n+\n+    FinalBuilder withCountryCode(String countryCode);\n+\n+    FinalBuilder withVisitedCountries(List<String> visitedCountries);\n+\n+    FinalBuilder withReportType(ReportType reportType);\n+\n+    FinalBuilder withDaysSinceOnsetOfSymptoms(int daysSinceOnsetOfSymptoms);\n+\n     /**\n      * Builds a {@link DiagnosisKey} instance. If no submission timestamp has been specified it will be set to \"now\" as\n      * hours since epoch."
  },
  {
    "sha": "4378f4940d612df78837d2e99d97382413601565",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchInfo.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchInfo.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchInfo.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchInfo.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,85 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.domain;\n+\n+import java.time.LocalDate;\n+import java.util.Objects;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.annotation.PersistenceConstructor;\n+\n+/**\n+ * Information about federation batches with their status.\n+ */\n+public class FederationBatchInfo {\n+\n+  @Id\n+  private final String batchTag;\n+  private final LocalDate date;\n+  private FederationBatchStatus status;\n+\n+  /**\n+   * Creates a FederationBatchInfo and sets its status to {@link FederationBatchStatus#UNPROCESSED}.\n+   */\n+  public FederationBatchInfo(String batchTag, LocalDate date) {\n+    this(batchTag, date, FederationBatchStatus.UNPROCESSED);\n+  }\n+\n+  /**\n+   * Creates a FederationBatchInfo.\n+   */\n+  @PersistenceConstructor\n+  public FederationBatchInfo(String batchTag, LocalDate date, FederationBatchStatus status) {\n+    this.batchTag = batchTag;\n+    this.date = date;\n+    this.status = status;\n+  }\n+\n+  public String getBatchTag() {\n+    return batchTag;\n+  }\n+\n+  public LocalDate getDate() {\n+    return date;\n+  }\n+\n+  public FederationBatchStatus getStatus() {\n+    return status;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    FederationBatchInfo that = (FederationBatchInfo) o;\n+    return Objects.equals(batchTag, that.batchTag)\n+        && Objects.equals(date, that.date)\n+        && status == that.status;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(batchTag, date, status);\n+  }\n+}"
  },
  {
    "sha": "6613031898712af1e75ea316bc23eee9dbd35e9c",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatchStatus.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,40 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.domain;\n+\n+public enum FederationBatchStatus {\n+  /**\n+   * The corresponding batch has not been processed yet.\n+   */\n+  UNPROCESSED,\n+  /**\n+   * The corresponding batch has been processed.\n+   */\n+  PROCESSED,\n+  /**\n+   * An error occurred while processing the batch.\n+   */\n+  ERROR,\n+  /**\n+   * Processing a batch failed for the second time and will not be attempted again.\n+   */\n+  ERROR_WONT_RETRY\n+}"
  },
  {
    "sha": "d4744ad7f4f375b36ee990d1b4ce5182752bf88f",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "status": "modified",
    "additions": 21,
    "deletions": 9,
    "changes": 30,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -31,22 +31,24 @@\n public interface DiagnosisKeyRepository extends PagingAndSortingRepository<DiagnosisKey, Long> {\n \n   /**\n-   * Counts all entries that have a submission timestamp less or equal than the specified one.\n+   * Counts all entries that have a submission timestamp less or equal than the specified one\n+   *  and match the given country_code.\n    *\n    * @param submissionTimestamp The submission timestamp up to which entries will be expired.\n    * @return The number of expired keys.\n    */\n-  @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<=:threshold\")\n-  int countOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp);\n+  @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<:threshold\")\n+  int countOlderThan(@Param(\"threshold\") long submissionTimestamp);\n \n   /**\n-   * Deletes all entries that have a submission timestamp less or equal than the specified one.\n+   * Deletes all entries that have a submission timestamp less or equal than the specified one\n+   *  and match the origin country_code.\n    *\n    * @param submissionTimestamp The submission timestamp up to which entries will be deleted.\n    */\n   @Modifying\n-  @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<=:threshold\")\n-  void deleteOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp);\n+  @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<:threshold\")\n+  void deleteOlderThan(@Param(\"threshold\") long submissionTimestamp);\n \n   /**\n    * Attempts to write the specified diagnosis key information into the database. If a row with the specified key data\n@@ -57,16 +59,26 @@\n    * @param rollingPeriod              The rolling period of the diagnosis key.\n    * @param submissionTimestamp        The submission timestamp of the diagnosis key.\n    * @param transmissionRisk           The transmission risk level of the diagnosis key.\n+   * @param originCountry              The origin country from the app.\n+   * @param visitedCountries           The list of countries this transmissions is relevant for.\n+   * @param reportType                 The report type of the diagnosis key.\n    */\n   @Modifying\n   @Query(\"INSERT INTO diagnosis_key \"\n-      + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level) \"\n-      + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk) \"\n+      + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level, \"\n+      + \"origin_country, visited_countries, report_type, days_since_onset_of_symptoms, consent_to_federation) \"\n+      + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk, \"\n+      + \":origin_country, :visited_countries, :report_type, :days_since_onset_of_symptoms, :consent_to_federation) \"\n       + \"ON CONFLICT DO NOTHING\")\n   void saveDoNothingOnConflict(\n       @Param(\"keyData\") byte[] keyData,\n       @Param(\"rollingStartIntervalNumber\") int rollingStartIntervalNumber,\n       @Param(\"rollingPeriod\") int rollingPeriod,\n       @Param(\"submissionTimestamp\") long submissionTimestamp,\n-      @Param(\"transmissionRisk\") int transmissionRisk);\n+      @Param(\"transmissionRisk\") int transmissionRisk,\n+      @Param(\"origin_country\") String originCountry,\n+      @Param(\"visited_countries\") String[] visitedCountries,\n+      @Param(\"report_type\") String reportType,\n+      @Param(\"days_since_onset_of_symptoms\") int daysSinceOnsetOfSymptoms,\n+      @Param(\"consent_to_federation\") boolean consentToFederation);\n }"
  },
  {
    "sha": "f052820045fb795caaaea49979e31b78c1432a78",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchInfoRepository.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchInfoRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchInfoRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchInfoRepository.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,63 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.repository;\n+\n+import app.coronawarn.server.common.persistence.domain.FederationBatchInfo;\n+import java.time.LocalDate;\n+import java.util.List;\n+import org.springframework.data.jdbc.repository.query.Modifying;\n+import org.springframework.data.jdbc.repository.query.Query;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface FederationBatchInfoRepository extends PagingAndSortingRepository<FederationBatchInfo, String> {\n+\n+  @Modifying\n+  @Query(\"INSERT INTO federation_batch_info \"\n+      + \"(batch_tag, date, status) \"\n+      + \"VALUES (:batchTag, :date, :status) \"\n+      + \"ON CONFLICT DO NOTHING\")\n+  void saveDoNothingOnConflict(\n+      @Param(\"batchTag\") String batchTag,\n+      @Param(\"date\") LocalDate date,\n+      @Param(\"status\") String status);\n+\n+  @Modifying\n+  @Query(\"INSERT INTO federation_batch_info \"\n+      + \"(batch_tag, date, status) \"\n+      + \"VALUES (:batchTag, :date, :status) \"\n+      + \"ON CONFLICT (batch_tag) DO UPDATE SET status=:status\")\n+  void saveDoUpdateStatusOnConflict(\n+      @Param(\"batchTag\") String batchTag,\n+      @Param(\"date\") LocalDate date,\n+      @Param(\"status\") String status);\n+\n+  List<FederationBatchInfo> findByStatus(@Param(\"status\") String status);\n+\n+  @Query(\"SELECT COUNT(*) FROM federation_batch_info WHERE date<:threshold\")\n+  int countOlderThan(@Param(\"threshold\") LocalDate date);\n+\n+  @Modifying\n+  @Query(\"DELETE FROM federation_batch_info WHERE date<:threshold\")\n+  void deleteOlderThan(@Param(\"threshold\") LocalDate date);\n+}"
  },
  {
    "sha": "a5bb54902b0b8e4cc2c9354b365072f993742ef7",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationUploadKeyRepository.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationUploadKeyRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationUploadKeyRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationUploadKeyRepository.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,34 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.repository;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import java.util.Collection;\n+import org.springframework.data.jdbc.repository.query.Query;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface FederationUploadKeyRepository\n+    extends org.springframework.data.repository.Repository<DiagnosisKey, Long> {\n+\n+  @Query(\"SELECT * FROM federation_upload_key\")\n+  Collection<DiagnosisKey> findAllUploadableKeys();\n+}"
  },
  {
    "sha": "4e814ac6c5e598c7fb64700db0780b6c762d6e20",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "status": "modified",
    "additions": 11,
    "deletions": 26,
    "changes": 37,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -26,13 +26,13 @@\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n+import app.coronawarn.server.common.persistence.service.common.ValidDiagnosisKeyFilter;\n import io.micrometer.core.annotation.Timed;\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Collectors;\n-import javax.validation.ConstraintViolation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.data.domain.Sort;\n@@ -45,9 +45,11 @@\n \n   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);\n   private final DiagnosisKeyRepository keyRepository;\n+  private final ValidDiagnosisKeyFilter validationFilter;\n \n-  public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n+  public DiagnosisKeyService(DiagnosisKeyRepository keyRepository, ValidDiagnosisKeyFilter filter) {\n     this.keyRepository = keyRepository;\n+    this.validationFilter = filter;\n   }\n \n   /**\n@@ -63,7 +65,10 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n       keyRepository.saveDoNothingOnConflict(\n           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n-          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());\n+          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel(),\n+          diagnosisKey.getOriginCountry(), diagnosisKey.getVisitedCountries().toArray(new String[0]),\n+          diagnosisKey.getReportType().name(), diagnosisKey.getDaysSinceOnsetOfSymptoms(),\n+          diagnosisKey.isConsentToFederation());\n     }\n   }\n \n@@ -73,27 +78,7 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n   public List<DiagnosisKey> getDiagnosisKeys() {\n     List<DiagnosisKey> diagnosisKeys = createStreamFromIterator(\n         keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\")).iterator()).collect(Collectors.toList());\n-    List<DiagnosisKey> validDiagnosisKeys =\n-        diagnosisKeys.stream().filter(DiagnosisKeyService::isDiagnosisKeyValid).collect(Collectors.toList());\n-\n-    int numberOfDiscardedKeys = diagnosisKeys.size() - validDiagnosisKeys.size();\n-    logger.info(\"Retrieved {} diagnosis key(s). Discarded {} diagnosis key(s) from the result as invalid.\",\n-        diagnosisKeys.size(), numberOfDiscardedKeys);\n-\n-    return validDiagnosisKeys;\n-  }\n-\n-  private static boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n-    Collection<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n-    boolean isValid = violations.isEmpty();\n-\n-    if (!isValid) {\n-      List<String> violationMessages =\n-          violations.stream().map(ConstraintViolation::getMessage).collect(Collectors.toList());\n-      logger.warn(\"Validation failed for diagnosis key from database. Violations: {}\", violationMessages);\n-    }\n-\n-    return isValid;\n+    return validationFilter.filter(diagnosisKeys);\n   }\n \n   /**\n@@ -113,9 +98,9 @@ public void applyRetentionPolicy(int daysToRetain) {\n         .ofInstant(Instant.now(), UTC)\n         .minusDays(daysToRetain)\n         .toEpochSecond(UTC) / SECONDS_PER_HOUR;\n-    int numberOfDeletions = keyRepository.countOlderThanOrEqual(threshold);\n+    int numberOfDeletions = keyRepository.countOlderThan(threshold);\n     logger.info(\"Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n         numberOfDeletions, daysToRetain);\n-    keyRepository.deleteOlderThanOrEqual(threshold);\n+    keyRepository.deleteOlderThan(threshold);\n   }\n }"
  },
  {
    "sha": "04661cedde6593572d87f00c817afea35ca77f78",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchInfoService.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchInfoService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchInfoService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchInfoService.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,91 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service;\n+\n+import app.coronawarn.server.common.persistence.domain.FederationBatchInfo;\n+import app.coronawarn.server.common.persistence.domain.FederationBatchStatus;\n+import app.coronawarn.server.common.persistence.repository.FederationBatchInfoRepository;\n+import java.time.LocalDate;\n+import java.time.Period;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class FederationBatchInfoService {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(FederationBatchInfoService.class);\n+  private final FederationBatchInfoRepository federationBatchInfoRepository;\n+\n+  public FederationBatchInfoService(FederationBatchInfoRepository federationBatchInfoRepository) {\n+    this.federationBatchInfoRepository = federationBatchInfoRepository;\n+  }\n+\n+  /**\n+   * Persists the {@link FederationBatchInfo} instance. If the data of a particular federation batch already exists in\n+   * the database, this federation batch is not persisted.\n+   *\n+   * @param federationBatchInfo must not contain {@literal null}.\n+   */\n+  @Transactional\n+  public void save(FederationBatchInfo federationBatchInfo) {\n+    federationBatchInfoRepository\n+        .saveDoNothingOnConflict(federationBatchInfo.getBatchTag(), federationBatchInfo.getDate(),\n+            federationBatchInfo.getStatus().name());\n+  }\n+\n+  /**\n+   * Sets the status of the provided federation batch.\n+   */\n+  public void updateStatus(FederationBatchInfo federationBatchInfo, FederationBatchStatus status) {\n+    String statusValue = status.name();\n+    federationBatchInfoRepository\n+        .saveDoUpdateStatusOnConflict(federationBatchInfo.getBatchTag(), federationBatchInfo.getDate(), statusValue);\n+    logger.info(\"Marked batch with status {}.\", statusValue);\n+  }\n+\n+  public List<FederationBatchInfo> findByStatus(FederationBatchStatus federationBatchStatus) {\n+    return federationBatchInfoRepository.findByStatus(federationBatchStatus.name());\n+  }\n+\n+  /**\n+   * Deletes all federation batch information entries which have a date that is older than the specified number of\n+   * days.\n+   *\n+   * @param daysToRetain the number of days until which batch information will be retained.\n+   * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n+   */\n+  @Transactional\n+  public void applyRetentionPolicy(int daysToRetain) {\n+    if (daysToRetain < 0) {\n+      throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n+    }\n+\n+    LocalDate threshold = LocalDate.now(ZoneOffset.UTC).minus(Period.ofDays(daysToRetain));\n+    int numberOfDeletions = federationBatchInfoRepository.countOlderThan(threshold);\n+    logger.info(\"Deleting {} batch info(s) with a date older than {} day(s) ago.\",\n+        numberOfDeletions, daysToRetain);\n+    federationBatchInfoRepository.deleteOlderThan(threshold);\n+  }\n+}"
  },
  {
    "sha": "4f74ba88a95ace8ca149958527e58eb947d6b306",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationUploadKeyService.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationUploadKeyService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationUploadKeyService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationUploadKeyService.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,72 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service;\n+\n+import static java.time.ZoneOffset.UTC;\n+import static org.springframework.data.util.StreamUtils.createStreamFromIterator;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.common.persistence.repository.FederationUploadKeyRepository;\n+import app.coronawarn.server.common.persistence.service.common.ExpirationPolicy;\n+import app.coronawarn.server.common.persistence.service.common.KeySharingPoliciesChecker;\n+import app.coronawarn.server.common.persistence.service.common.ValidDiagnosisKeyFilter;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+\n+@Component\n+public class FederationUploadKeyService {\n+\n+  private final FederationUploadKeyRepository keyRepository;\n+  private final ValidDiagnosisKeyFilter validationFilter;\n+  private final KeySharingPoliciesChecker sharingPoliciesChecker;\n+\n+  /**\n+   * Constructs the key upload service.\n+   */\n+  public FederationUploadKeyService(FederationUploadKeyRepository keyRepository, ValidDiagnosisKeyFilter filter,\n+      KeySharingPoliciesChecker sharingPoliciesChecker) {\n+    this.keyRepository = keyRepository;\n+    this.validationFilter = filter;\n+    this.sharingPoliciesChecker = sharingPoliciesChecker;\n+  }\n+\n+  /**\n+   * Returns all valid persisted diagnosis keys which are ready to be uploaded to the external Federation Gateway\n+   * service. Readiness of keys means:\n+   *\n+   * <p><li> Consent is given by the user (this should always be the case for keys in this table,\n+   * but a safety check is performed anyway\n+   * <li> Key is expired conforming to the given policy\n+   */\n+  public List<DiagnosisKey> getPendingUploadKeys(ExpirationPolicy policy) {\n+    return createStreamFromIterator(\n+           keyRepository.findAllUploadableKeys().iterator())\n+           .filter(DiagnosisKey::isConsentToFederation)\n+           .filter(validationFilter::isDiagnosisKeyValid)\n+           .filter(key -> sharingPoliciesChecker.canShareKeyAtTime(key, policy, LocalDateTime.now(UTC)))\n+           .collect(Collectors.toList());\n+  }\n+}"
  },
  {
    "sha": "e3bb45685930f5a3f17a004b5003cac6cfdb931c",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ExpirationPolicy.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ExpirationPolicy.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ExpirationPolicy.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ExpirationPolicy.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,59 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service.common;\n+\n+import java.time.temporal.ChronoUnit;\n+import java.util.Objects;\n+\n+/**\n+ * Refers to the time that needs to pass after a key's rolling period has passed,\n+ * such that the key can be considered completely expired. This is a DPP policy enforced\n+ * upon processes which involve publishing/distributing/sharing keys with other external\n+ * systems.\n+ */\n+public final class ExpirationPolicy {\n+\n+  private final long expirationTime;\n+  private final ChronoUnit timeUnit;\n+\n+  private ExpirationPolicy(long expirationTime, ChronoUnit timeUnit) {\n+    this.expirationTime = expirationTime;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  public long getExpirationTime() {\n+    return expirationTime;\n+  }\n+\n+  public ChronoUnit getTimeUnit() {\n+    return timeUnit;\n+  }\n+\n+  /**\n+   * Get an instance of an expiration policy.\n+   */\n+  public static ExpirationPolicy of(long timeValue, ChronoUnit timeUnit) {\n+    if (Objects.isNull(timeUnit)) {\n+      throw new IllegalArgumentException(\"Time unit parameter must not be null.\");\n+    }\n+    return new ExpirationPolicy(timeValue, timeUnit);\n+  }\n+}"
  },
  {
    "sha": "49f97751a55c34b8d157cdd82bd5f2d868b0712c",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/KeySharingPoliciesChecker.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/KeySharingPoliciesChecker.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/KeySharingPoliciesChecker.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/KeySharingPoliciesChecker.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,104 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service.common;\n+\n+\n+import static java.time.ZoneOffset.UTC;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import org.springframework.stereotype.Component;\n+\n+\n+/**\n+ * Responsible for verifying that all policies enforced by DPP regulations (or stakeholders) are\n+ * met prior to sharing diagnosis keys with other external systems. Examples of such rules:\n+ *\n+ * <p><li> {@link ExpirationPolicy}\n+ */\n+@Component\n+public class KeySharingPoliciesChecker {\n+\n+  /**\n+   * The submission timestamp is counted in 1 hour intervals since epoch.\n+   */\n+  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n+\n+  /**\n+   * The rolling start interval number is counted in 10 minute intervals since epoch.\n+   */\n+  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES\n+      .toSeconds(DiagnosisKey.ROLLING_PERIOD_MINUTES_INTERVAL);\n+\n+  private static final Map<ChronoUnit, Function<Duration, Long>> TIME_CONVERTERS\n+       = Map.of(ChronoUnit.SECONDS, Duration::toSeconds,\n+                ChronoUnit.MINUTES, Duration::toMinutes,\n+                ChronoUnit.HOURS, Duration::toHours);\n+\n+  /**\n+   * Returns true if the given diagnosis key can be shared at the given time taking into account\n+   * the expiration policy.\n+   */\n+  public boolean canShareKeyAtTime(DiagnosisKey key, ExpirationPolicy policy, LocalDateTime timeToShare) {\n+    LocalDateTime earliestTimeToShare = getEarliestTimeForSharingKey(key, policy);\n+    return timeToShare.isAfter(earliestTimeToShare) || timeToShare.isEqual(earliestTimeToShare);\n+  }\n+\n+  /**\n+   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be shared with external\n+   * systems, while respecting the expiry policy and the submission timestamp.\n+   *\n+   * @return {@link LocalDateTime} at which the specified {@link DiagnosisKey} can be shared.\n+   */\n+  public LocalDateTime getEarliestTimeForSharingKey(DiagnosisKey diagnosisKey, ExpirationPolicy policy) {\n+    LocalDateTime submissionDateTime = getSubmissionDateTime(diagnosisKey);\n+    LocalDateTime expiryDateTime = getRollingPeriodExpiryTime(diagnosisKey);\n+    long timeBetweenExpiryAndSubmission = TIME_CONVERTERS.get(policy.getTimeUnit())\n+        .apply(Duration.between(expiryDateTime, submissionDateTime));\n+    if (timeBetweenExpiryAndSubmission <= policy.getExpirationTime()) {\n+      // truncatedTo floors the value, so we need to add an hour to the DISTRIBUTION_PADDING to compensate that.\n+      return expiryDateTime.plusMinutes(policy.getExpirationTime() + 60).truncatedTo(ChronoUnit.HOURS);\n+    } else {\n+      return submissionDateTime;\n+    }\n+  }\n+\n+  /**\n+   * Returns the end of the rolling time window that a {@link DiagnosisKey} was active for as a {@link LocalDateTime}.\n+   */\n+  private LocalDateTime getRollingPeriodExpiryTime(DiagnosisKey diagnosisKey) {\n+    return LocalDateTime\n+        .ofEpochSecond(diagnosisKey.getRollingStartIntervalNumber() * TEN_MINUTES_INTERVAL_SECONDS, 0, UTC)\n+        .plusMinutes(diagnosisKey.getRollingPeriod() * DiagnosisKey.ROLLING_PERIOD_MINUTES_INTERVAL);\n+  }\n+\n+  /**\n+   * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.\n+   */\n+  private LocalDateTime getSubmissionDateTime(DiagnosisKey diagnosisKey) {\n+    return LocalDateTime.ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);\n+  }\n+}"
  },
  {
    "sha": "f709e634d8b33bfbc86f77af1c3310ff5355d95f",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ValidDiagnosisKeyFilter.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ValidDiagnosisKeyFilter.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ValidDiagnosisKeyFilter.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/common/ValidDiagnosisKeyFilter.java?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,70 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service.common;\n+\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.validation.ConstraintViolation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ValidDiagnosisKeyFilter {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(ValidDiagnosisKeyFilter.class);\n+\n+\n+  /**\n+   * Rerturns a subset of diagnosis keys from the given list which have\n+   * passed the default entity validation.\n+   */\n+  public List<DiagnosisKey> filter(List<DiagnosisKey> diagnosisKeys) {\n+    List<DiagnosisKey> validDiagnosisKeys =\n+        diagnosisKeys.stream().filter(this::isDiagnosisKeyValid).collect(Collectors.toList());\n+\n+    int numberOfDiscardedKeys = diagnosisKeys.size() - validDiagnosisKeys.size();\n+    logger.info(\"Retrieved {} diagnosis key(s). Discarded {} diagnosis key(s) from the result as invalid.\",\n+        diagnosisKeys.size(), numberOfDiscardedKeys);\n+\n+    return validDiagnosisKeys;\n+  }\n+\n+  /**\n+   * Returns true if the given diagnosis key has passed the default entity validation.\n+   */\n+  public boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n+    Collection<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n+    boolean isValid = violations.isEmpty();\n+\n+    if (!isValid) {\n+      List<String> violationMessages =\n+          violations.stream().map(ConstraintViolation::getMessage).collect(Collectors.toList());\n+      logger.warn(\"Validation failed for diagnosis key from database. Violations: {}\", violationMessages);\n+    }\n+\n+    return isValid;\n+  }\n+\n+}"
  },
  {
    "sha": "3836d8d27993d438a4fdd8f5cc09766e4023c59c",
    "filename": "common/persistence/src/main/resources/db/migration/V3__createTablesForDownload.sql",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/resources/db/migration/V3__createTablesForDownload.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/fba225b0c1b844ff999ed177b2dd25e9f26ce36c/common/persistence/src/main/resources/db/migration/V3__createTablesForDownload.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/migration/V3__createTablesForDownload.sql?ref=fba225b0c1b844ff999ed177b2dd25e9f26ce36c",
    "patch": "@@ -0,0 +1,5 @@\n+CREATE TABLE federation_batch_info (\n+    batch_tag   varchar(20) PRIMARY KEY,\n+    date        date NOT NULL,\n+    status      varchar(20) NOT NULL DEFAULT 'UNPROCESSED'\n+);"
  }
]
