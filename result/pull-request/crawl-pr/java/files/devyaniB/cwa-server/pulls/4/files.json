[
  {
    "sha": "e4a841c613186e4398933c414047d777755377db",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -112,7 +112,7 @@ public void applyRetentionPolicy(int daysToRetain) {\n         .minusDays(daysToRetain)\n         .toEpochSecond(UTC) / SECONDS_PER_HOUR;\n     int numberOfDeletions = keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);\n-    logger.info(\"Deleted {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n+    logger.info(\"Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n         numberOfDeletions, daysToRetain);\n   }\n }"
  },
  {
    "sha": "2998a9e85e3e7b7dc9ae0079a8c164babf8d4e27",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V3__dropIndex.sql",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/common/persistence/src/main/resources/db/specific/postgresql/V3__dropIndex.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/common/persistence/src/main/resources/db/specific/postgresql/V3__dropIndex.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V3__dropIndex.sql?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -0,0 +1 @@\n+DROP INDEX IF EXISTS my_index;"
  },
  {
    "sha": "d12aad34436ed4b84b96c8ea653ce5108c3f2169",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/Application.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/Application.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/Application.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/Application.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -60,7 +60,6 @@ public static void main(String[] args) {\n    */\n   @Override\n   public void destroy() {\n-    logger.info(\"Shutting down log4j2.\");\n     LogManager.shutdown();\n   }\n \n@@ -76,9 +75,5 @@ public static void killApplication(ApplicationContext appContext) {\n   @Override\n   public void setEnvironment(Environment environment) {\n     List<String> profiles = Arrays.asList(environment.getActiveProfiles());\n-    if (profiles.contains(\"disable-ssl-client-postgres\")) {\n-      logger.warn(\"The distribution runner is started with postgres connection TLS disabled. \"\n-          + \"This should never be used in PRODUCTION!\");\n-    }\n   }\n }"
  },
  {
    "sha": "456cb7a0ab4ca85cd72eeae1da03949d3289577c",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -31,6 +31,7 @@\n import java.time.ZoneOffset;\n import java.time.temporal.ChronoUnit;\n import java.util.Collection;\n+import java.util.Collections;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n@@ -66,8 +67,7 @@\n    * @return the directory\n    */\n   public Directory<WritableOnDisk> getDiagnosisKeys() {\n-    logger.debug(\"Querying diagnosis keys from the database...\");\n-    Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n+    Collection<DiagnosisKey> diagnosisKeys = Collections.emptyList();\n     diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys,\n         LocalDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.HOURS));\n     return new DiagnosisKeysDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);"
  },
  {
    "sha": "0af5b22d821114c6ffa1de956c5d7efe6cd54c24",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/OutputDirectoryProvider.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/OutputDirectoryProvider.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/OutputDirectoryProvider.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/OutputDirectoryProvider.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -57,7 +57,6 @@\n    * @throws IOException if file operation fails\n    */\n   public void clear() throws IOException {\n-    logger.debug(\"Clearing output directory...\");\n     java.io.File outputDirectory = getFileOnDisk();\n     FileUtils.deleteDirectory(outputDirectory);\n     if (!outputDirectory.mkdirs()) {"
  },
  {
    "sha": "e1e2463a8ec3e8897d6f00fba0b7ad074ef78b14",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -50,8 +50,6 @@\n @Component\n public class ObjectStoreAccess {\n \n-  private static final Logger logger = LoggerFactory.getLogger(ObjectStoreAccess.class);\n-\n   /**\n    * Specifies the default maximum amount of time in seconds that a published resource can be considered \"fresh\" when\n    * held in a cache.\n@@ -100,8 +98,6 @@ public void putObject(LocalFile localFile) {\n   public void putObject(LocalFile localFile, int maxAge) {\n     String s3Key = localFile.getS3Key();\n     Map<HeaderKey, String> headers = createHeaders(maxAge, localFile);\n-\n-    logger.info(\"... uploading {}\", s3Key);\n     this.client.putObject(bucket, s3Key, localFile.getFile(), headers);\n   }\n \n@@ -115,8 +111,6 @@ public void deleteObjectsWithPrefix(String prefix) {\n         .stream()\n         .map(S3Object::getObjectName)\n         .collect(Collectors.toList());\n-\n-    logger.info(\"Deleting {} entries with prefix {}\", toDelete.size(), prefix);\n     this.client.removeObjects(bucket, toDelete);\n   }\n "
  },
  {
    "sha": "8e50fd9c30c0c5a5763755059f6baec081c5458c",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -102,15 +102,13 @@ public void publish(Path root) throws IOException {\n       diff = toPublish;\n     }\n \n-    logger.info(\"Beginning upload of {} files... \", diff.size());\n     try {\n       diff.stream()\n           .map(file -> executor.submit(() -> objectStoreAccess.putObject(file)))\n           .forEach(this::awaitThread);\n     } finally {\n       executor.shutdown();\n     }\n-    logger.info(\"Upload completed.\");\n   }\n \n   private void awaitThread(Future<?> result) {"
  },
  {
    "sha": "a0e07c2d2d3cd998a3684b1e8d80e15e9c04a681",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/Assembly.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/Assembly.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/Assembly.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/Assembly.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -66,16 +66,11 @@ public void run(ApplicationArguments args) {\n       Directory<WritableOnDisk> outputDirectory = this.outputDirectoryProvider.getDirectory();\n       outputDirectory.addWritable(cwaApiStructureProvider.getDirectory());\n       this.outputDirectoryProvider.clear();\n-      logger.debug(\"Preparing files...\");\n-      logger.info(\"Start signing...\");\n       outputDirectory.prepare(new ImmutableStack<>());\n-      logger.debug(\"Writing files...\");\n       outputDirectory.write();\n     } catch (Exception e) {\n       logger.error(\"Distribution data assembly failed.\", e);\n       Application.killApplication(applicationContext);\n     }\n-\n-    logger.debug(\"Distribution data assembled successfully.\");\n   }\n }"
  },
  {
    "sha": "d37f78b799ed062ddb29d0db1ca45b283b8e674a",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -31,6 +31,7 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.annotation.Order;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.StopWatch;\n \n /**\n  * This runner removes any diagnosis keys from the database that were submitted before a configured threshold of days.\n@@ -66,13 +67,18 @@\n   @Override\n   public void run(ApplicationArguments args) {\n     try {\n+      StopWatch stopWatch = new StopWatch();\n+      stopWatch.start(\"Fetching keys\");\n+      diagnosisKeyService.getDiagnosisKeys();\n+      stopWatch.stop();\n+      logger.info(\"Fetching diagnosis keys took {} seconds.\", (stopWatch.getLastTaskTimeMillis() / 1000));\n+      stopWatch.start(\"Applying retention policy\");\n       diagnosisKeyService.applyRetentionPolicy(retentionDays);\n-      s3RetentionPolicy.applyRetentionPolicy(retentionDays);\n+      stopWatch.stop();\n+      logger.info(\"Applying retention policy took {} seconds.\", (stopWatch.getLastTaskTimeMillis() / 1000));\n     } catch (Exception e) {\n       logger.error(\"Application of retention policy failed.\", e);\n       Application.killApplication(applicationContext);\n     }\n-\n-    logger.debug(\"Retention policy applied successfully.\");\n   }\n }"
  },
  {
    "sha": "08ed62b4f8de6542fc74f1aa4aa708fdda0baa86",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -55,7 +55,6 @@ public void run(ApplicationArguments args) {\n       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();\n \n       s3Publisher.publish(pathToDistribute);\n-      logger.info(\"Data pushed to Object Store successfully.\");\n     } catch (UnsupportedOperationException | ObjectStoreOperationFailedException | IOException e) {\n       logger.error(\"Distribution failed.\", e);\n     }"
  },
  {
    "sha": "0fb513323e35d75f84ec50f9b606e3aa30c6ba82",
    "filename": "services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -31,6 +31,7 @@\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n@@ -46,6 +47,7 @@\n import org.springframework.context.annotation.Profile;\n import org.springframework.core.annotation.Order;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.StopWatch;\n \n /**\n  * Generates random diagnosis keys for the time frame between the last diagnosis key in the database and now (last full\n@@ -94,8 +96,7 @@ public void run(ApplicationArguments args) {\n    * See {@link TestDataGeneration} class documentation.\n    */\n   private void writeTestData() {\n-    logger.debug(\"Querying diagnosis keys from the database...\");\n-    List<DiagnosisKey> existingDiagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n+    List<DiagnosisKey> existingDiagnosisKeys = Collections.emptyList();\n \n     // Timestamps in hours since epoch. Test data generation starts one hour after the latest diagnosis key in the\n     // database and ends one hour before the current one.\n@@ -108,10 +109,8 @@ private void writeTestData() {\n         new PoissonDistribution(random, this.config.getExposuresPerHour(), POISSON_EPSILON, POISSON_MAX_ITERATIONS);\n \n     if (startTimestamp == endTimestamp) {\n-      logger.debug(\"Skipping test data generation, latest diagnosis keys are still up-to-date.\");\n       return;\n     }\n-    logger.debug(\"Generating diagnosis keys between {} and {}...\", startTimestamp, endTimestamp);\n     List<DiagnosisKey> newDiagnosisKeys = LongStream.range(startTimestamp, endTimestamp)\n         .mapToObj(submissionTimestamp -> IntStream.range(0, poisson.sample())\n             .mapToObj(ignoredValue -> generateDiagnosisKey(submissionTimestamp))\n@@ -120,9 +119,11 @@ private void writeTestData() {\n         .collect(Collectors.toList());\n \n     logger.debug(\"Writing {} new diagnosis keys to the database...\", newDiagnosisKeys.size());\n+    StopWatch stopWatch = new StopWatch();\n+    stopWatch.start();\n     diagnosisKeyService.saveDiagnosisKeys(newDiagnosisKeys);\n-\n-    logger.debug(\"Test data generation finished successfully.\");\n+    stopWatch.stop();\n+    logger.info(\"Saving diagnosis keys took {} seconds.\", (stopWatch.getLastTaskTimeMillis() / 1000));\n   }\n \n   /**\n@@ -144,7 +145,7 @@ private long getGeneratorStartTimestamp(List<DiagnosisKey> diagnosisKeys) {\n    * this function would return the timestamp for today 14:00 UTC.\n    */\n   private long getGeneratorEndTimestamp() {\n-    return (LocalDateTime.now(ZoneOffset.UTC).toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS) - 1;\n+    return (LocalDateTime.of(2020, 6, 23, 12, 00).toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS) - 1;\n   }\n \n   /**\n@@ -153,7 +154,7 @@ private long getGeneratorEndTimestamp() {\n    * 14 days ago (from now) at 00:00 UTC.\n    */\n   private long getRetentionStartTimestamp() {\n-    return LocalDate.now(ZoneOffset.UTC).minusDays(retentionDays).atStartOfDay()\n+    return LocalDate.of(2020, 6, 23).minusDays(retentionDays + 5L).atStartOfDay()\n         .toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS;\n   }\n "
  },
  {
    "sha": "9f0c54dca2808ce05273e56e8e4c98e48e4d1406",
    "filename": "services/distribution/src/main/resources/application-dev.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/resources/application-dev.yaml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/resources/application-dev.yaml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/resources/application-dev.yaml?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -2,7 +2,6 @@\n logging:\n   level:\n     org:\n-      springframework:\n-        web: DEBUG\n+      springframework: off\n     app:\n       coronawarn: DEBUG"
  },
  {
    "sha": "434a8480c9d0f8f5085772f6e13f4e3dfdda890c",
    "filename": "services/distribution/src/main/resources/application-testdata.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/resources/application-testdata.yaml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/resources/application-testdata.yaml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/resources/application-testdata.yaml?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -3,4 +3,4 @@ services:\n   distribution:\n     testdata:\n       seed: 123456\n-      exposures-per-hour: 1000\n+      exposures-per-hour: 1500"
  },
  {
    "sha": "d503f35598680f3322d8362201eaf946f8dd4ae5",
    "filename": "services/distribution/src/main/resources/application.yaml",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/resources/application.yaml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/7dd1950bed279d6349acc1ce8bf01ad5810e67b7/services/distribution/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/distribution/src/main/resources/application.yaml?ref=7dd1950bed279d6349acc1ce8bf01ad5810e67b7",
    "patch": "@@ -2,8 +2,7 @@\n logging:\n   level:\n     org:\n-      springframework:\n-        web: INFO\n+      springframework: off\n     app:\n       coronawarn: INFO\n \n@@ -12,7 +11,7 @@ services:\n     # The name of the distribution output file.\n     output-file-name: index\n     # The number of days to retain diagnosis keys for both database persistency layer and files stored on the object store.\n-    retention-days: 14\n+    retention-days: 0\n     # The number of minutes that diagnosis keys must have been expired for (since the end of the rolling interval window) before they can be distributed.\n     expiry-policy-minutes: 120\n     # The minimum number of diagnosis keys per bundle.\n@@ -83,11 +82,13 @@ services:\n spring:\n   main:\n     web-application-type: NONE\n+    banner-mode: off\n   # Postgres configuration\n   jpa:\n     hibernate:\n       ddl-auto: validate\n   flyway:\n+    clean-on-validation-error: true\n     enabled: true\n     locations: classpath:/db/migration, classpath:/db/specific/{vendor}\n     password: ${POSTGRESQL_PASSWORD_FLYWAY:local_setup_flyway}"
  }
]
