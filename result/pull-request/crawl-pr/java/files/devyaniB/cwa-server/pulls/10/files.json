[
  {
    "sha": "de6f9680867c382a03b2ff719177e99ee11b2a57",
    "filename": ".env",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/.env",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/.env",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/.env?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -12,6 +12,9 @@ POSTGRES_DISTRIBUTION_PASSWORD=local_setup_distribution\n POSTGRES_SUBMISSION_USER=local_setup_submission\n POSTGRES_SUBMISSION_PASSWORD=local_setup_submission\n \n+POSTGRES_CALLBACK_USER=local_setup_callback\n+POSTGRES_CALLBACK_PASSWORD=local_setup_callback\n+\n POSTGRES_FLYWAY_USER=local_setup_flyway\n POSTGRES_FLYWAY_PASSWORD=local_setup_flyway\n "
  },
  {
    "sha": "ac36cda56c0e5766a630e0fa6e48a5fc3af409eb",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "status": "modified",
    "additions": 41,
    "deletions": 3,
    "changes": 44,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -25,9 +25,12 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n import app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestamp;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n@@ -68,16 +71,31 @@\n   @ValidSubmissionTimestamp\n   private final long submissionTimestamp;\n \n+  private final boolean consentToFederation;\n+\n+  @Size(max = 2)\n+  private final String originCountry;\n+\n+  private final List<String> visitedCountries;\n+\n+  private final VerificationType verificationType;\n+\n   /**\n    * Should be called by builders.\n    */\n   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n-      int transmissionRiskLevel, long submissionTimestamp) {\n+      int transmissionRiskLevel, long submissionTimestamp,\n+      boolean consentToFederation, @Size String originCountry, List<String> visitedCountries,\n+      VerificationType verificationType) {\n     this.keyData = keyData;\n     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n     this.rollingPeriod = rollingPeriod;\n     this.transmissionRiskLevel = transmissionRiskLevel;\n     this.submissionTimestamp = submissionTimestamp;\n+    this.consentToFederation = consentToFederation;\n+    this.originCountry = originCountry;\n+    this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;\n+    this.verificationType = verificationType;\n   }\n \n   /**\n@@ -126,6 +144,22 @@ public long getSubmissionTimestamp() {\n     return submissionTimestamp;\n   }\n \n+  public boolean isConsentToFederation() {\n+    return consentToFederation;\n+  }\n+\n+  public String getOriginCountry() {\n+    return originCountry;\n+  }\n+\n+  public List<String> getVisitedCountries() {\n+    return visitedCountries;\n+  }\n+\n+  public VerificationType getVerificationType() {\n+    return verificationType;\n+  }\n+\n   /**\n    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n    *\n@@ -175,13 +209,17 @@ public boolean equals(Object o) {\n         && rollingPeriod == that.rollingPeriod\n         && transmissionRiskLevel == that.transmissionRiskLevel\n         && submissionTimestamp == that.submissionTimestamp\n-        && Arrays.equals(keyData, that.keyData);\n+        && Arrays.equals(keyData, that.keyData)\n+        && Objects.equals(originCountry, that.originCountry)\n+        && Objects.equals(visitedCountries, that.visitedCountries)\n+        && verificationType == that.verificationType;\n   }\n \n   @Override\n   public int hashCode() {\n     int result = Objects\n-        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp, originCountry,\n+            visitedCountries, verificationType);\n     result = 31 * result + Arrays.hashCode(keyData);\n     return result;\n   }"
  },
  {
    "sha": "63bbe3947a34434204733cde4e8471919a5edf7e",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "status": "modified",
    "additions": 46,
    "deletions": 2,
    "changes": 48,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -28,7 +28,9 @@\n \n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n import java.time.Instant;\n+import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ConstraintViolation;\n@@ -49,6 +51,10 @@\n   private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n   private int transmissionRiskLevel;\n   private Long submissionTimestamp = null;\n+  private String countryCode;\n+  private List<String> visitedCountries;\n+  private VerificationType verificationType;\n+  private boolean consentToFederation;\n \n   DiagnosisKeyBuilder() {\n   }\n@@ -72,14 +78,27 @@ public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {\n   }\n \n   @Override\n-  public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {\n+  public FinalBuilder fromTemporaryExposureKey(TemporaryExposureKey protoBufObject) {\n     return this\n         .withKeyData(protoBufObject.getKeyData().toByteArray())\n         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())\n         .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel())\n         .withRollingPeriod(protoBufObject.getRollingPeriod());\n   }\n \n+  @Override\n+  public FinalBuilder fromFederationDiagnosisKey(\n+      app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey federationDiagnosisKey) {\n+    return this\n+        .withKeyData(federationDiagnosisKey.getKeyData().toByteArray())\n+        .withRollingStartIntervalNumber(federationDiagnosisKey.getRollingStartIntervalNumber())\n+        .withTransmissionRiskLevel(federationDiagnosisKey.getTransmissionRiskLevel())\n+        .withRollingPeriod(federationDiagnosisKey.getRollingPeriod())\n+        .withCountryCode(federationDiagnosisKey.getOrigin())\n+        .withVerificationType(federationDiagnosisKey.getVerificationType())\n+        .withVisitedCountries(federationDiagnosisKey.getVisitedCountriesList());\n+  }\n+\n   @Override\n   public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {\n     this.submissionTimestamp = submissionTimestamp;\n@@ -92,6 +111,30 @@ public FinalBuilder withRollingPeriod(int rollingPeriod) {\n     return this;\n   }\n \n+  @Override\n+  public FinalBuilder withConsentToFederation(boolean consentToFederation) {\n+    this.consentToFederation = consentToFederation;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withCountryCode(String countryCode) {\n+    this.countryCode = countryCode;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withVisitedCountries(List<String> visitedCountries) {\n+    this.visitedCountries = visitedCountries;\n+    return this;\n+  }\n+\n+  @Override\n+  public FinalBuilder withVerificationType(VerificationType verificationType) {\n+    this.verificationType = verificationType;\n+    return this;\n+  }\n+\n   @Override\n   public DiagnosisKey build() {\n     if (submissionTimestamp == null) {\n@@ -100,7 +143,8 @@ public DiagnosisKey build() {\n     }\n \n     var diagnosisKey = new DiagnosisKey(\n-        keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp,\n+        consentToFederation, countryCode, visitedCountries, verificationType);\n     return throwIfValidationFails(diagnosisKey);\n   }\n "
  },
  {
    "sha": "9c7518d9240e5768cb4a1cf231987a9315f9a08c",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "status": "modified",
    "additions": 22,
    "deletions": 3,
    "changes": 25,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -21,6 +21,8 @@\n package app.coronawarn.server.common.persistence.domain;\n \n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n+import java.util.List;\n \n /**\n  * This interface bundles interfaces that are used for the implementation of {@link DiagnosisKeyBuilder}.\n@@ -43,16 +45,25 @@\n      * @param protoBufObject ProtocolBuffer object associated with the temporary exposure key.\n      * @return this Builder instance.\n      */\n-    FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject);\n+    FinalBuilder fromTemporaryExposureKey(TemporaryExposureKey protoBufObject);\n+\n+    /**\n+     * Adds the data contained in the specified federation diagnosis key object to this builder.\n+     *\n+     * @param federationDiagnosisKey DiagnosisKey object associated with the temporary exposure key.\n+     * @return this Builder instance.\n+     */\n+    FinalBuilder fromFederationDiagnosisKey(\n+        app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey federationDiagnosisKey);\n   }\n \n   interface RollingStartIntervalNumberBuilder {\n \n     /**\n      * Adds the specified rolling start interval number to this builder.\n      *\n-     * @param rollingStartIntervalNumber number describing when a key starts. It is equal to\n-     *                                   startTimeOfKeySinceEpochInSecs / (60 * 10).\n+     * @param rollingStartIntervalNumber number describing when a key starts.\n+     *                                   It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n      * @return this Builder instance.\n      */\n     TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);\n@@ -89,6 +100,14 @@\n      */\n     FinalBuilder withRollingPeriod(int rollingPeriod);\n \n+    FinalBuilder withConsentToFederation(boolean consentToFederation);\n+\n+    FinalBuilder withCountryCode(String countryCode);\n+\n+    FinalBuilder withVisitedCountries(List<String> visitedCountries);\n+\n+    FinalBuilder withVerificationType(VerificationType verificationType);\n+\n     /**\n      * Builds a {@link DiagnosisKey} instance. If no submission timestamp has been specified it will be set to \"now\" as\n      * hours since epoch."
  },
  {
    "sha": "575fcc9907b7dc8cd171d43529b9390f6f507841",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/FederationBatch.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,71 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.domain;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+import org.springframework.data.annotation.Id;\n+\n+public class FederationBatch {\n+\n+  @Id\n+  private String batchTag;\n+\n+  private Date date;\n+\n+  public FederationBatch(String batchTag, Date date) {\n+    this.batchTag = batchTag;\n+    this.date = date;\n+  }\n+\n+  public String getBatchTag() {\n+    return batchTag;\n+  }\n+\n+  public void setBatchTag(String batchTag) {\n+    this.batchTag = batchTag;\n+  }\n+\n+  public Date getDate() {\n+    return date;\n+  }\n+\n+  public void setDate(Date date) {\n+    this.date = date;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    FederationBatch that = (FederationBatch) o;\n+    return Objects.equals(batchTag, that.batchTag) && Objects.equals(date, that.date);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(batchTag, date);\n+  }\n+}"
  },
  {
    "sha": "9302e31a4e54cedc815d27df07d5d2209c0b11f2",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "status": "modified",
    "additions": 31,
    "deletions": 11,
    "changes": 42,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -31,42 +31,62 @@\n public interface DiagnosisKeyRepository extends PagingAndSortingRepository<DiagnosisKey, Long> {\n \n   /**\n-   * Counts all entries that have a submission timestamp less or equal than the specified one.\n+   * Counts all entries that have a submission timestamp less or equal than the specified one\n+   *  and match the given country_code.\n    *\n    * @param submissionTimestamp The submission timestamp up to which entries will be expired.\n    * @return The number of expired keys.\n    */\n-  @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<=:threshold\")\n-  int countOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp);\n+  @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<=:threshold AND \"\n+      + \":country_code = ANY(visited_countries)\")\n+  int countOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp, @Param(\"country_code\") String countryCode);\n \n   /**\n-   * Deletes all entries that have a submission timestamp less or equal than the specified one.\n+   * Returns all diagnosis keys where visited_countries list contains {@param countryCode} ordered by\n+   * submission_timestamp.\n+   *\n+   * @param countryCode filter country code.\n+   * @return list of DiagnosisKeys.\n+   */\n+  @Query(\"SELECT * FROM diagnosis_key WHERE :country_code = ANY(visited_countries) ORDER BY submission_timestamp ASC\")\n+  Iterable<DiagnosisKey> findAllKeysWhereVisitedCountryContains(@Param(\"country_code\") String countryCode);\n+\n+  /**\n+   * Deletes all entries that have a submission timestamp less or equal than the specified one\n+   *  and match the origin country_code.\n    *\n    * @param submissionTimestamp The submission timestamp up to which entries will be deleted.\n    */\n   @Modifying\n-  @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<=:threshold\")\n-  void deleteOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp);\n+  @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<=:threshold AND :country_code = ANY(visited_countries)\")\n+  void deleteOlderThanOrEqual(@Param(\"threshold\") long submissionTimestamp, @Param(\"country_code\") String countryCode);\n \n   /**\n    * Attempts to write the specified diagnosis key information into the database. If a row with the specified key data\n    * already exists, no data is inserted.\n-   *\n-   * @param keyData                    The key data of the diagnosis key.\n+   *  @param keyData                    The key data of the diagnosis key.\n    * @param rollingStartIntervalNumber The rolling start interval number of the diagnosis key.\n    * @param rollingPeriod              The rolling period of the diagnosis key.\n    * @param submissionTimestamp        The submission timestamp of the diagnosis key.\n    * @param transmissionRisk           The transmission risk level of the diagnosis key.\n+   * @param originCountry              The origin country from the app.\n+   * @param visitedCountries           The list of countries this transmissions is relevant for.\n+   * @param verificationType           The verification type of the diagnosis key.\n    */\n   @Modifying\n   @Query(\"INSERT INTO diagnosis_key \"\n-      + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level) \"\n-      + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk) \"\n+      + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level, \"\n+        + \"origin_country, visited_countries, verification_type) \"\n+      + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk, \"\n+        + \":origin_country, :visited_countries, :verificationType) \"\n       + \"ON CONFLICT DO NOTHING\")\n   void saveDoNothingOnConflict(\n       @Param(\"keyData\") byte[] keyData,\n       @Param(\"rollingStartIntervalNumber\") int rollingStartIntervalNumber,\n       @Param(\"rollingPeriod\") int rollingPeriod,\n       @Param(\"submissionTimestamp\") long submissionTimestamp,\n-      @Param(\"transmissionRisk\") int transmissionRisk);\n+      @Param(\"transmissionRisk\") int transmissionRisk,\n+      @Param(\"origin_country\") String originCountry,\n+      @Param(\"visited_countries\") String[] visitedCountries,\n+      @Param(\"verificationType\") String verificationType);\n }"
  },
  {
    "sha": "d0a3545feccf7e008a92abc67bc744890e55cd97",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/FederationBatchRepository.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,43 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.repository;\n+\n+import app.coronawarn.server.common.persistence.domain.FederationBatch;\n+import java.util.Date;\n+import org.springframework.data.jdbc.repository.query.Modifying;\n+import org.springframework.data.jdbc.repository.query.Query;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface FederationBatchRepository extends PagingAndSortingRepository<FederationBatch, Long> {\n+\n+  @Modifying\n+  @Query(\"INSERT INTO federation_batch \"\n+      + \"(batch_tag, date) \"\n+      + \"VALUES (:batchTag, :date) \"\n+      + \"ON CONFLICT DO NOTHING\")\n+  void saveDoNothingOnConflict(\n+      @Param(\"batchTag\") String batchTag,\n+      @Param(\"date\") Date date\n+  );\n+}"
  },
  {
    "sha": "a8adc1b5c7b2fd99ea5e450bc77935b29ad2ebcf",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "status": "modified",
    "additions": 26,
    "deletions": 6,
    "changes": 32,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -63,7 +63,9 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n       keyRepository.saveDoNothingOnConflict(\n           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n-          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());\n+          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel(),\n+          diagnosisKey.getOriginCountry(), diagnosisKey.getVisitedCountries().toArray(new String[0]),\n+          diagnosisKey.getVerificationType().name());\n     }\n   }\n \n@@ -73,6 +75,23 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n   public List<DiagnosisKey> getDiagnosisKeys() {\n     List<DiagnosisKey> diagnosisKeys = createStreamFromIterator(\n         keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\")).iterator()).collect(Collectors.toList());\n+    return this.filterValidDiagnosisKeys(diagnosisKeys);\n+  }\n+\n+  /**\n+   * Return all valid persisted diagnosis keys, sorted by their submission timestamp where visited_countries contains\n+   * {@param countryCode}.\n+   *\n+   * @param countryCode country filter.\n+   * @return Collection of {@link DiagnosisKey} that have visited_country in their array.\n+   */\n+  public List<DiagnosisKey> getDiagnosisKeysByVisitedCountry(String countryCode) {\n+    var diagnosisKeys = createStreamFromIterator(\n+        keyRepository.findAllKeysWhereVisitedCountryContains(countryCode).iterator()).collect(Collectors.toList());\n+    return this.filterValidDiagnosisKeys(diagnosisKeys);\n+  }\n+\n+  private List<DiagnosisKey> filterValidDiagnosisKeys(List<DiagnosisKey> diagnosisKeys) {\n     List<DiagnosisKey> validDiagnosisKeys =\n         diagnosisKeys.stream().filter(DiagnosisKeyService::isDiagnosisKeyValid).collect(Collectors.toList());\n \n@@ -101,10 +120,11 @@ private static boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n    * days.\n    *\n    * @param daysToRetain the number of days until which diagnosis keys will be retained.\n+   * @param countryCode  country filter.\n    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n    */\n   @Transactional\n-  public void applyRetentionPolicy(int daysToRetain) {\n+  public void applyRetentionPolicy(int daysToRetain, String countryCode) {\n     if (daysToRetain < 0) {\n       throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n     }\n@@ -113,9 +133,9 @@ public void applyRetentionPolicy(int daysToRetain) {\n         .ofInstant(Instant.now(), UTC)\n         .minusDays(daysToRetain)\n         .toEpochSecond(UTC) / SECONDS_PER_HOUR;\n-    int numberOfDeletions = keyRepository.countOlderThanOrEqual(threshold);\n-    logger.info(\"Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n-        numberOfDeletions, daysToRetain);\n-    keyRepository.deleteOlderThanOrEqual(threshold);\n+    int numberOfDeletions = keyRepository.countOlderThanOrEqual(threshold, countryCode);\n+    logger.info(\"[{}] Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n+        countryCode, numberOfDeletions, daysToRetain);\n+    keyRepository.deleteOlderThanOrEqual(threshold, countryCode);\n   }\n }"
  },
  {
    "sha": "aa7cac97f84c5756d151f55f69153278eabadf91",
    "filename": "common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/FederationBatchService.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,87 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.service;\n+\n+import static org.springframework.data.util.StreamUtils.createStreamFromIterator;\n+\n+import app.coronawarn.server.common.persistence.domain.FederationBatch;\n+import app.coronawarn.server.common.persistence.repository.FederationBatchRepository;\n+import io.micrometer.core.annotation.Timed;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.domain.Sort.Direction;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class FederationBatchService {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(FederationBatchService.class);\n+  private final FederationBatchRepository federationBatchRepository;\n+\n+  public FederationBatchService(FederationBatchRepository federationBatchRepository) {\n+    this.federationBatchRepository = federationBatchRepository;\n+  }\n+\n+  /**\n+   * Persists the {@link FederationBatch} instance. If the data of a particular federation batch\n+   * already exists in the database, this federation batch is not persisted.\n+   *\n+   * @param federationBatch must not contain {@literal null}.\n+   */\n+  @Timed\n+  @Transactional\n+  public void saveFederationBatch(FederationBatch federationBatch) {\n+    federationBatchRepository\n+        .saveDoNothingOnConflict(federationBatch.getBatchTag(), federationBatch.getDate());\n+  }\n+\n+  /**\n+   * Deletes the {@link FederationBatch} instance.\n+   *\n+   * @param federationBatch must not contain {@literal null}.\n+   */\n+  @Timed\n+  @Transactional\n+  public void deleteFederationBatch(FederationBatch federationBatch) {\n+    federationBatchRepository.delete(federationBatch);\n+  }\n+\n+  /**\n+   * Returns all valid persisted federation batches, sorted by their submission timestamp.\n+   */\n+  public List<FederationBatch> getFederationBatches() {\n+    List<FederationBatch> federationBatches = createStreamFromIterator(\n+        federationBatchRepository.findAll(Sort.by(Direction.ASC, \"date\")).iterator())\n+        .collect(Collectors.toList());\n+\n+    logger.info(\"Retrieved {} federation batch(es).\",\n+        federationBatches.size());\n+\n+    return federationBatches;\n+  }\n+\n+\n+  //Todo delete batches\n+}"
  },
  {
    "sha": "dcee82909e715578fc80b52373e8b7f0e576da52",
    "filename": "common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/migration/V3__createTablesForCallback.sql?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,4 @@\n+CREATE TABLE federation_batch (\n+    batch_tag varchar(20) PRIMARY KEY, --TODO validate length constraint\n+    date      date NOT NULL\n+);"
  },
  {
    "sha": "8c98e6cf42741e175c30cd8743d2db5ba2eba0dd",
    "filename": "common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/migration/V5__updateDiagnosisKeyTableForFederation.sql?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,13 @@\n+-- Migrate current values -> origin_country = DE\n+\n+ALTER TABLE diagnosis_key\n+    ADD consent_to_federation BOOLEAN NOT NULL DEFAULT FALSE;\n+\n+ALTER TABLE diagnosis_key\n+    ADD origin_country VARCHAR (2);\n+\n+ALTER TABLE diagnosis_key\n+    ADD visited_countries VARCHAR (2) [];\n+\n+ALTER TABLE diagnosis_key\n+    ADD verification_type VARCHAR(20);"
  },
  {
    "sha": "a2b5321321ddc7a30af9969738008bf545d68f47",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V2__createPermissions.sql?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -1,2 +1,3 @@\n GRANT SELECT, DELETE ON TABLE diagnosis_key TO \"cwa_distribution\";\n GRANT INSERT ON TABLE diagnosis_key TO \"cwa_submission\";\n+"
  },
  {
    "sha": "2f122d5251cab4ef736dca4df11a2401797a6923",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V4__createPermissionsForCallback.sql?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1 @@\n+GRANT SELECT, INSERT ON TABLE federation_batch TO \"cwa_federation_callback\";"
  },
  {
    "sha": "0eeac24ecfcfe4ccb5652d4c7e82e59c8e480e79",
    "filename": "common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/main/resources/db/specific/postgresql/V6__createPermissionsForDownload.sql?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,2 @@\n+ GRANT SELECT, DELETE ON TABLE federation_batch TO \"cwa_federation_download\";\n+ GRANT INSERT ON TABLE diagnosis_key TO \"cwa_federation_download\";"
  },
  {
    "sha": "ebfa156c008d916359e3ec825220b8bff8c29050",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -56,7 +56,7 @@ void buildFromProtoBufObjWithSubmissionTimestamp() {\n         .build();\n \n     DiagnosisKey actDiagnosisKey = DiagnosisKey.builder()\n-        .fromProtoBuf(protoBufObj)\n+        .fromTemporaryExposureKey(protoBufObj)\n         .withSubmissionTimestamp(this.expSubmissionTimestamp)\n         .build();\n \n@@ -73,7 +73,7 @@ void buildFromProtoBufObjWithoutSubmissionTimestamp() {\n         .setTransmissionRiskLevel(this.expTransmissionRiskLevel)\n         .build();\n \n-    DiagnosisKey actDiagnosisKey = DiagnosisKey.builder().fromProtoBuf(protoBufObj).build();\n+    DiagnosisKey actDiagnosisKey = DiagnosisKey.builder().fromTemporaryExposureKey(protoBufObj).build();\n \n     assertDiagnosisKeyEquals(actDiagnosisKey);\n   }"
  },
  {
    "sha": "aa1757bc2ce0ed000ba0d02cdca0c5f3efdcee57",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -28,7 +28,9 @@\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;\n@@ -42,6 +44,9 @@\n   static final byte[] expKeyData = \"16-bytelongarray\".getBytes(StandardCharsets.US_ASCII);\n   static final int expRollingStartIntervalNumber = 73800;\n   static final int expTransmissionRiskLevel = 1;\n+  static final String originCountry = \"DE\";\n+  static final List<String> visitedCountries = Collections.singletonList(\"DE\");\n+  static final VerificationType verificationType = VerificationType.LAB_VERIFIED;\n \n   @Autowired\n   private DiagnosisKeyService diagnosisKeyService;\n@@ -85,12 +90,14 @@ private void mockInvalidKeyInDb(List<DiagnosisKey> keys) {\n \n   private DiagnosisKey validKey(long expSubmissionTimestamp) {\n     return new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp, false,\n+        originCountry, visitedCountries, verificationType);\n   }\n \n   private DiagnosisKey invalidKey(long expSubmissionTimestamp) {\n     byte[] expKeyData = \"17--bytelongarray\".getBytes(StandardCharsets.US_ASCII);\n     return new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp, false,\n+        originCountry, visitedCountries, verificationType);\n   }\n }"
  },
  {
    "sha": "7eeb77626113a7dcd2d90ff889398cb6fa05712d",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -28,6 +28,9 @@\n import java.nio.charset.StandardCharsets;\n import java.time.Instant;\n import java.time.LocalDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n@@ -40,8 +43,12 @@\n   final static int expRollingPeriod = 2;\n   final static int expTransmissionRiskLevel = 3;\n   final static long expSubmissionTimestamp = 4L;\n+  static final String originCountry = \"DE\";\n+  static final List<String> visitedCountries = Collections.singletonList(\"DE\");\n+  static final VerificationType verificationType = VerificationType.LAB_VERIFIED;\n+\n   final static DiagnosisKey diagnosisKey = new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-      expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp);\n+      expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp, false, originCountry, visitedCountries, verificationType);\n \n   @Test\n   void testRollingStartIntervalNumberGetter() {\n@@ -70,7 +77,7 @@ void testIsYoungerThanRetentionThreshold() {\n         .minusDays(5).minusMinutes(10)\n         .toEpochSecond(UTC) / (60 * 10));\n     DiagnosisKey diagnosisKeyFiveDays = new DiagnosisKey(expKeyData, fiveDaysAgo,\n-        expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp, false, originCountry, visitedCountries, verificationType);\n \n     assertThat(diagnosisKeyFiveDays.isYoungerThanRetentionThreshold(4)).isFalse();\n     assertThat(diagnosisKeyFiveDays.isYoungerThanRetentionThreshold(5)).isFalse();"
  },
  {
    "sha": "112cbb033cb81f3f2aae896c3a9b4325759257b6",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java",
    "status": "modified",
    "additions": 107,
    "deletions": 8,
    "changes": 115,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -27,6 +27,8 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n@@ -35,9 +37,12 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n import org.assertj.core.util.Lists;\n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;\n@@ -93,21 +98,21 @@ void testSortedRetrievalResult() {\n   @ValueSource(ints = {0, 1, Integer.MAX_VALUE})\n   @ParameterizedTest\n   void testApplyRetentionPolicyForValidNumberOfDays(int daysToRetain) {\n-    assertThatCode(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain))\n+    assertThatCode(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain, \"DE\"))\n         .doesNotThrowAnyException();\n   }\n \n   @DisplayName(\"Assert a negative retention period is rejected.\")\n   @ValueSource(ints = {Integer.MIN_VALUE, -1})\n   @ParameterizedTest\n   void testApplyRetentionPolicyForNegativeNumberOfDays(int daysToRetain) {\n-    assertThat(catchThrowable(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain)))\n+    assertThat(catchThrowable(() -> diagnosisKeyService.applyRetentionPolicy(daysToRetain, \"DE\")))\n         .isInstanceOf(IllegalArgumentException.class);\n   }\n \n   @Test\n   void testApplyRetentionPolicyForEmptyDb() {\n-    diagnosisKeyService.applyRetentionPolicy(1);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"DE\");\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n     assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n   }\n@@ -117,7 +122,7 @@ void testApplyRetentionPolicyForOneNotApplicableEntry() {\n     var expKeys = List.of(buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusHours(23)));\n \n     diagnosisKeyService.saveDiagnosisKeys(expKeys);\n-    diagnosisKeyService.applyRetentionPolicy(1);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"DE\");\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n \n     assertDiagnosisKeysEqual(expKeys, actKeys);\n@@ -128,20 +133,71 @@ void testApplyRetentionPolicyForOneApplicableEntry() {\n     var keys = List.of(buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L)));\n \n     diagnosisKeyService.saveDiagnosisKeys(keys);\n-    diagnosisKeyService.applyRetentionPolicy(1);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"DE\");\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n \n     assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n   }\n \n+  @Test\n+  void testShouldNotDeleteKeysFromAnotherCountry() {\n+    var expKeys = List.of(\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", Collections.singletonList(\"DE\"),\n+            VerificationType.LAB_VERIFIED));\n+\n+    diagnosisKeyService.saveDiagnosisKeys(expKeys);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(actKeys, expKeys);\n+  }\n+\n+  @Test\n+  void testShouldDeleteKeysWithMatchingVisitedCountry() {\n+    var frenchKeys = buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", Collections.singletonList(\"FR\"), VerificationType.LAB_VERIFIED);\n+    var germanKeys = buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(2L), \"DE\", Collections.singletonList(\"DE\"), VerificationType.LAB_VERIFIED);\n+\n+    diagnosisKeyService.saveDiagnosisKeys(List.of(germanKeys, frenchKeys));\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(List.of(germanKeys), actKeys);\n+  }\n+\n+  @Test\n+  void testShouldDeleteKeysWhereAnyOfVisitedCountriesMatch() {\n+    var keys = List.of(\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", List.of(\"DE\", \"FR\", \"LU\"), VerificationType.LAB_VERIFIED));\n+    diagnosisKeyService.saveDiagnosisKeys(keys);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+    assertTrue(actKeys.isEmpty());\n+  }\n+\n+  @Test\n+  void testShouldDeleteKeysFromDifferentOriginCountriesWithMatchingVisitedCountry() {\n+    var keys = List.of(\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", List.of(\"FR\"), VerificationType.LAB_VERIFIED),\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"FR\", List.of(\"FR\"),VerificationType.LAB_VERIFIED),\n+        buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"LU\", List.of(\"FR\"), VerificationType.LAB_VERIFIED));\n+    diagnosisKeyService.saveDiagnosisKeys(keys);\n+    diagnosisKeyService.applyRetentionPolicy(1, \"FR\");\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+    assertTrue(actKeys.isEmpty());\n+  }\n+\n   @Test\n   void testNoPersistOnValidationError() {\n     assertThat(catchThrowable(() -> {\n       var keys = List.of(DiagnosisKey.builder()\n           .withKeyData(new byte[16])\n           .withRollingStartIntervalNumber((int) (OffsetDateTime.now(UTC).toEpochSecond() / 600))\n           .withTransmissionRiskLevel(2)\n-          .withSubmissionTimestamp(0L).build());\n+          .withCountryCode(\"DE\")\n+          .withVisitedCountries(Collections.singletonList(\"DE\"))\n+          .withSubmissionTimestamp(0L)\n+          .withVerificationType(VerificationType.LAB_VERIFIED)\n+          .build());\n \n       diagnosisKeyService.saveDiagnosisKeys(keys);\n     })).isInstanceOf(InvalidDiagnosisKeyException.class);\n@@ -158,12 +214,20 @@ void shouldNotUpdateExistingKey() {\n             .withKeyData(keyData.getBytes())\n             .withRollingStartIntervalNumber(600)\n             .withTransmissionRiskLevel(2)\n-            .withSubmissionTimestamp(0L).build(),\n+            .withCountryCode(\"DE\")\n+            .withVisitedCountries(Collections.singletonList(\"DE\"))\n+            .withSubmissionTimestamp(0L)\n+            .withVerificationType(VerificationType.LAB_VERIFIED)\n+            .build(),\n         DiagnosisKey.builder()\n             .withKeyData(keyData.getBytes())\n             .withRollingStartIntervalNumber(600)\n             .withTransmissionRiskLevel(3)\n-            .withSubmissionTimestamp(0L).build());\n+            .withCountryCode(\"DE\")\n+            .withVisitedCountries(Collections.singletonList(\"DE\"))\n+            .withSubmissionTimestamp(0L)\n+            .withVerificationType(VerificationType.LAB_VERIFIED)\n+            .build());\n \n     diagnosisKeyService.saveDiagnosisKeys(keys);\n \n@@ -172,4 +236,39 @@ void shouldNotUpdateExistingKey() {\n     assertThat(actKeys.size()).isEqualTo(1);\n     assertThat(actKeys.iterator().next().getTransmissionRiskLevel()).isEqualTo(2);\n   }\n+\n+  @Nested\n+  class TestRetrieveKeysFromVisitedCountry {\n+\n+    @AfterEach\n+    public void tearDown() {\n+      diagnosisKeyRepository.deleteAll();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+      var keys = List.of(\n+          buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L), \"DE\", Collections.singletonList(\"DE\"),VerificationType.LAB_VERIFIED),\n+          buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(2L), \"DE\", List.of(\"DE\", \"FR\"),VerificationType.LAB_VERIFIED),\n+          buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(3L), \"DE\", List.of(\"DE\", \"FR\", \"DK\"),VerificationType.LAB_VERIFIED)\n+      );\n+      diagnosisKeyService.saveDiagnosisKeys(keys);\n+    }\n+\n+    @Test\n+    void testShouldGetThreeEntriesDE() {\n+      assertEquals(3, diagnosisKeyService.getDiagnosisKeysByVisitedCountry(\"DE\").size());\n+    }\n+\n+    @Test\n+    void testShouldGetTwoEntriesFR() {\n+      assertEquals(2, diagnosisKeyService.getDiagnosisKeysByVisitedCountry(\"FR\").size());\n+    }\n+\n+    @Test\n+    void testShouldGetOneEntryDK() {\n+      assertEquals(1, diagnosisKeyService.getDiagnosisKeysByVisitedCountry(\"DK\").size());\n+    }\n+  }\n+\n }"
  },
  {
    "sha": "c0a61b4a70cb70d9b9773d618402d178f4bf802b",
    "filename": "common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -23,7 +23,9 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType;\n import java.time.OffsetDateTime;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Random;\n \n@@ -51,18 +53,33 @@ public static void assertDiagnosisKeysEqual(List<DiagnosisKey> expKeys,\n     }\n   }\n \n-  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp,\n+      boolean consentToFederation, String countryCode, List<String> visitedCountries, VerificationType verificationType) {\n     byte[] randomBytes = new byte[16];\n     Random random = new Random(submissionTimeStamp);\n     random.nextBytes(randomBytes);\n     return DiagnosisKey.builder()\n         .withKeyData(randomBytes)\n         .withRollingStartIntervalNumber(600)\n         .withTransmissionRiskLevel(2)\n-        .withSubmissionTimestamp(submissionTimeStamp).build();\n+        .withSubmissionTimestamp(submissionTimeStamp)\n+        .withCountryCode(countryCode)\n+        .withVisitedCountries(visitedCountries)\n+        .withVerificationType(verificationType)\n+        .withConsentToFederation(consentToFederation)\n+        .build();\n+  }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+    return buildDiagnosisKeyForSubmissionTimestamp(submissionTimeStamp, false, \"DE\", Collections.singletonList(\"DE\"), VerificationType.LAB_VERIFIED);\n   }\n \n   public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime) {\n     return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600);\n   }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime,\n+      String countryCode, List<String> visitedCountries, VerificationType verificationType) {\n+    return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600, false, countryCode, visitedCountries, verificationType);\n+  }\n }"
  },
  {
    "sha": "7e0e7f223ed6bd618de991c3e16f49c4e22140fd",
    "filename": "common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,25 @@\n+//https://static.googleusercontent.com/media/www.google.com/en//covid19/exposurenotifications/pdfs/Exposure-Key-File-Format-and-Verification.pdf\n+syntax = \"proto3\";\n+package app.coronawarn.server.common.protocols.external.exposurenotification;\n+option java_package = \"app.coronawarn.server.common.protocols.external.exposurenotification\";\n+option java_multiple_files = true;\n+import \"app/coronawarn/server/common/protocols/external/exposurenotification/temporary_exposure_key_export.proto\";\n+\n+message DiagnosisKeyBatch {\n+  repeated DiagnosisKey keys = 1;\n+}\n+\n+message DiagnosisKey {\n+  bytes keyData = 1; // key\n+  uint32 rollingStartIntervalNumber = 2;\n+  uint32 rollingPeriod = 3; // number of 10-minute windows between key rolling\n+  int32 transmissionRiskLevel = 4; // risk of transmission\n+  repeated string visitedCountries = 5;\n+  string origin = 6; // country of origin\n+  VerificationType verificationType = 7; // set by backend\n+}\n+\n+enum VerificationType {\n+  LAB_VERIFIED = 0;\n+  SELF_REPORTED = 1;\n+}"
  },
  {
    "sha": "162176a4cda526fde0a818520726d8e2d195d80a",
    "filename": "common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -3,8 +3,13 @@ package app.coronawarn.server.common.protocols.internal;\n option java_package = \"app.coronawarn.server.common.protocols.internal\";\n option java_multiple_files = true;\n import \"app/coronawarn/server/common/protocols/external/exposurenotification/temporary_exposure_key_export.proto\";\n+import \"app/coronawarn/server/common/protocols/external/exposurenotification/diagnosis_key_batch.proto\";\n \n message SubmissionPayload {\n   repeated app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey keys = 1;\n   bytes padding = 2;\n+  repeated string visitedCountries = 3;\n+  string origin = 4;\n+  app.coronawarn.server.common.protocols.external.exposurenotification.VerificationType verificationType = 5;\n+  bool consentToFederation = 6;\n }"
  },
  {
    "sha": "43520daeda0c6353124a86e886f10fcd76a19333",
    "filename": "docker-compose.yml",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/docker-compose.yml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docker-compose.yml?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -1,5 +1,22 @@\n version: '3'\n services:\n+  callback:\n+    build:\n+      context: ./\n+      dockerfile: ./services/callback/Dockerfile\n+    depends_on:\n+      - postgres\n+    ports:\n+      - \"8010:8080\"\n+    environment:\n+      SPRING_PROFILES_ACTIVE: dev,disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n+      POSTGRESQL_SERVICE_PORT: '5432'\n+      POSTGRESQL_SERVICE_HOST: postgres\n+      POSTGRESQL_DATABASE: ${POSTGRES_DB}\n+      POSTGRESQL_PASSWORD_CALLBACK: ${POSTGRES_CALLBACK_PASSWORD}\n+      POSTGRESQL_USER_CALLBACK: ${POSTGRES_CALLBACK_USER}\n+      POSTGRESQL_PASSWORD_FLYWAY: ${POSTGRES_FLYWAY_PASSWORD}\n+      POSTGRESQL_USER_FLYWAY: ${POSTGRES_FLYWAY_USER}\n   submission:\n     build:\n       context: ./\n@@ -49,6 +66,23 @@ services:\n       FORCE_UPDATE_KEYFILES: 'false'\n     volumes:\n       - ./docker-compose-test-secrets:/secrets\n+  federationdownload:\n+    build:\n+      context: ./\n+      dockerfile: ./services/federationdownload/Dockerfile\n+    depends_on:\n+      - postgres\n+    ports:\n+      - \"8011:8080\"\n+    environment:\n+      SPRING_PROFILES_ACTIVE: dev,disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n+      POSTGRESQL_SERVICE_PORT: '5432'\n+      POSTGRESQL_SERVICE_HOST: postgres\n+      POSTGRESQL_DATABASE: ${POSTGRES_DB}\n+      POSTGRESQL_PASSWORD_CALLBACK: ${POSTGRES_CALLBACK_PASSWORD}\n+      POSTGRESQL_USER_CALLBACK: ${POSTGRES_CALLBACK_USER}\n+      POSTGRESQL_PASSWORD_FLYWAY: ${POSTGRES_FLYWAY_PASSWORD}\n+      POSTGRESQL_USER_FLYWAY: ${POSTGRES_FLYWAY_USER}\n   postgres:\n     image: postgres:11.8\n     restart: always"
  },
  {
    "sha": "2487d6b1af7e21c66cb938cebad778e7fd51738e",
    "filename": "docs/ARCHITECTURE.md",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/docs/ARCHITECTURE.md",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/docs/ARCHITECTURE.md",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docs/ARCHITECTURE.md?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -29,7 +29,7 @@ Find the latest specifications of Google/Apple here:\n - [Google Framework Specifications (1.3.2)](https://static.googleusercontent.com/media/www.google.com/en//covid19/exposurenotifications/pdfs/Android-Exposure-Notification-API-documentation-v1.3.2.pdf)\n On a high level, the application consists of two main parts, as shown below.\n \n-![Overview Diagram](./images/v4.png)\n+![Overview Diagram](./images/v5.png)\n \n 1. CWA Server: Handles submission and aggregation/distribution of diagnosis keys and configuration files.\n 2. Verification Server: Deals with test result retrieval and verification (including issuing TANs).\n@@ -146,6 +146,21 @@ type Publish struct {\n \n Due to concerns regarding data privacy and protection, device attestation is currently not being used by CWA.\n \n+### Federation Key Upload Service\n+\n+This service (running as a cronjob) will deal with the upload of DE keys to the federation gateway. When keys are submitted to the CWA Backend and identified as applicable for sharing with the federation gateway, determined by the consent to share, they are mirrored to a temporary table for processing an upload. Keys which are uploaded are validated against the same rules in place for normal DE key distribution:\n+\n+- Minimum number of keys required prior to uploading\n+- Minimum period of time delay post submission of the keys\n+\n+The job will be configured to run periodically throughout the day to enable keys to be shared as soon as possible to the federation gateway.\n+\n+### Federation Key Download Service\n+\n+This service (running as a cronjob) will deal with the download, validation, extraction, and storage of the keys from the federation gateway. Based on the batch tags which are known it will trigger the downloads from the gateway. The download service will initially be implemented to poll based on batchTag and Date combinations and it will keep track of its last processed state within the database. When the callback service and integration is fully realized the polling mechanism would only be used for mass loading of scenarios.\n+\n+On the download of keys from the federation gateway a process of normalization needs to take place. This is done to enable the keys to be consumable by the DE CWA app such that the risk calculations can be done.\n+\n ### Distribution Service\n \n The distribution service's objective is to publish all CWA-related files to the object store, from which\n@@ -155,7 +170,7 @@ the clients will fetch their data. There are three types of files.\n \n Key Export files are files, which hold published diagnosis keys from users that have tested positive for SARS-CoV-2.\n These files are based on the specification of Google/Apple and are generated in regular intervals.\n-Each interval generates a `.zip` file, containing two files:\n+Each interval generates a `.zip` file for each applicable country where keys are known. Each `.zip file` contains two files:\n \n 1. export.bin: Contains the list of diagnosis keys.\n 2. export.sig: Contains signature information needed for validating the export.bin file.\n@@ -199,6 +214,6 @@ cleaned up when auto vacuuming is executed.\n When data deletion is executed on the object store, the object store is instructed to delete all\n files with the following prefix:\n \n-`version/v1/diagnosis-keys/country/DE/<date>`\n+`version/v1/diagnosis-keys/country/<country_code>/<date>`\n \n In which `<date>` stands for the ISO formatted date (e.g. `2012-06-05`), and is before the retention cutoff date (today - 14 days)."
  },
  {
    "sha": "c08e5d33d2f8c8cf11b30b6e3b10746b32a694ef",
    "filename": "docs/images/v5.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/docs/images/v5.png",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/docs/images/v5.png",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/docs/images/v5.png?ref=18ad8c749c54113a9173690177ea580e73de2fb3"
  },
  {
    "sha": "90c86dee0a5dd109fe2b8645d5456db679c90335",
    "filename": "local-setup/create-users.sql",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/local-setup/create-users.sql",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/local-setup/create-users.sql",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/local-setup/create-users.sql?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -3,3 +3,5 @@\n CREATE USER \"local_setup_flyway\" WITH INHERIT IN ROLE cwa_flyway ENCRYPTED PASSWORD 'local_setup_flyway';\n CREATE USER \"local_setup_submission\" WITH INHERIT IN ROLE cwa_submission ENCRYPTED PASSWORD 'local_setup_submission';\n CREATE USER \"local_setup_distribution\" WITH INHERIT IN ROLE cwa_distribution ENCRYPTED PASSWORD 'local_setup_distribution';\n+CREATE USER \"local_setup_callback\" WITH INHERIT IN ROLE cwa_federation_callback ENCRYPTED PASSWORD 'local_setup_callback';\n+CREATE USER \"local_setup_download\" WITH INHERIT IN ROLE cwa_federation_download ENCRYPTED PASSWORD 'local_setup_download';"
  },
  {
    "sha": "a510de487191120c66f9ed5ecf92af14d6ad3603",
    "filename": "services/callback/Dockerfile",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/Dockerfile",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/Dockerfile",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/callback/Dockerfile?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,37 @@\n+FROM openjdk:11 as build\n+ARG WORK_DIR=/build\n+\n+# copy the pom and config files first (which do not change very often)\n+COPY ./.mvn ${WORK_DIR}/.mvn\n+COPY ./mvnw ${WORK_DIR}/mvnw\n+COPY ./pom.xml ${WORK_DIR}/pom.xml\n+COPY ./common/pom.xml ${WORK_DIR}/common/pom.xml\n+COPY ./common/protocols/pom.xml ${WORK_DIR}/common/protocols/pom.xml\n+COPY ./common/persistence/pom.xml ${WORK_DIR}/common/persistence/pom.xml\n+COPY ./services/pom.xml ${WORK_DIR}/services/pom.xml\n+COPY ./services/distribution/pom.xml ${WORK_DIR}/services/distribution/pom.xml\n+COPY ./services/submission/pom.xml ${WORK_DIR}/services/submission/pom.xml\n+COPY ./services/callback/pom.xml ${WORK_DIR}/services/callback/pom.xml\n+COPY ./services/federationdownload/pom.xml ${WORK_DIR}/services/federationdownload/pom.xml\n+\n+WORKDIR ${WORK_DIR}\n+\n+# build all dependencies for offline use\n+RUN ${WORK_DIR}/mvnw dependency:go-offline --file ${WORK_DIR}/pom.xml -B\n+\n+# copy rest of files\n+COPY . ${WORK_DIR}/\n+\n+RUN mkdir -p /usr/sap/callback-service\n+# hadolint ignore=SC2086\n+RUN ${WORK_DIR}/mvnw --batch-mode -DskipTests=true --file ${WORK_DIR}/pom.xml ${MAVEN_ARGS} clean install\n+RUN cp ${WORK_DIR}/services/callback/target/callback-*.jar /usr/sap/callback-service/callback.jar\n+RUN cp ${WORK_DIR}/scripts/DpkgHelper.java /DpkgHelper.java\n+\n+FROM gcr.io/distroless/java:11\n+COPY --from=build /DpkgHelper.java .\n+COPY --from=build /usr/sap/callback-service/callback.jar .\n+RUN [\"java\", \"DpkgHelper.java\"]\n+USER 65534:65534\n+ENTRYPOINT [\"/usr/bin/java\", \"-Djdk.tls.namedGroups=\\\"secp256r1,secp384r1,brainpoolP256r1,brainpoolP384r1,brainpoolP512r1,ffdhe2048,ffdhe3072,ffdhe4096\\\"\", \"-jar\"]\n+CMD [\"callback.jar\"]"
  },
  {
    "sha": "a973f0d382209de2f467e9671bf4ad5ea719850a",
    "filename": "services/callback/api_v1.json",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/api_v1.json",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/api_v1.json",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/callback/api_v1.json?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,84 @@\n+{\r\n+    \"openapi\": \"3.0.0\",\r\n+    \"info\": {\r\n+        \"version\": \"v1\",\r\n+        \"title\": \"CWA-Server Submission API\",\r\n+        \"license\": {\r\n+            \"name\": \"Apache 2.0\"\r\n+        }\r\n+    },\r\n+    \"paths\": {\r\n+        \"/version/{version}/diagnosis-keys\": {\r\n+            \"post\": {\r\n+                \"summary\": \"Post diagnosis keys.\",\r\n+                \"tags\": [\r\n+                    \"Diagnosis keys\"\r\n+                ],\r\n+                \"parameters\": [\r\n+                    {\r\n+                        \"name\": \"cwa-authorization\",\r\n+                        \"in\": \"header\",\r\n+                        \"description\": \"TAN code associated with this diagnosis key submission.\",\r\n+                        \"required\": true,\r\n+                        \"schema\": {\r\n+                            \"type\": \"string\"\r\n+                        }\r\n+                    },\r\n+                    {\r\n+                        \"name\": \"cwa-fake\",\r\n+                        \"in\": \"header\",\r\n+                        \"description\": \"Requests with a value of \\\"0\\\" will be fully processed. Any other value indicates that this request shall be handled as a \\\"fake\\\" request.\" ,\r\n+                        \"required\": true,\r\n+                        \"schema\": {\r\n+                            \"type\": \"string\"\r\n+                        }\r\n+                    },\r\n+                    {\r\n+                        \"name\": \"version\",\r\n+                        \"in\": \"path\",\r\n+                        \"description\": \"API version\",\r\n+                        \"required\": true,\r\n+                        \"schema\": {\r\n+                            \"$ref\": \"#/components/schemas/Version\"\r\n+                        }\r\n+                    }\r\n+                ],\r\n+                \"requestBody\": {\r\n+                    \"content\": {\r\n+                        \"application/x-protobuf\": {\r\n+                            \"schema\": {\r\n+                                \"$ref\": \"#/components/schemas/app.coronawarn.server.common.protocols.internal.SubmissionPayload\"\r\n+                            },\r\n+                            \"example\": \"<BINARY DATA>\"\r\n+                        }\r\n+                    }\r\n+                },\r\n+                \"responses\": {\r\n+                    \"200\": {\r\n+                        \"description\": \"Submission payload processed successfully.\"\r\n+                    },\r\n+                    \"400\": {\r\n+                        \"description\": \"Invalid payload or missing CWA headers.\"\r\n+                    },\r\n+                    \"403\": {\r\n+                        \"description\": \"Specified TAN invalid.\"\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    },\r\n+    \"components\": {\r\n+        \"schemas\": {\r\n+            \"Version\": {\r\n+                \"type\": \"string\",\r\n+                \"description\": \"A string of form 'v[\\\\d+]'\",\r\n+                \"example\": \"v1\"\r\n+            },\r\n+            \"app.coronawarn.server.common.protocols.internal.SubmissionPayload\": {\r\n+                \"type\": \"string\",\r\n+                \"format\": \"binary\",\r\n+                \"description\": \"A collection of temporary exposure keys.\"\r\n+            }\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "35c188898d26cd8f0c08ce9adac9f7bd1ae29111",
    "filename": "services/callback/build_and_run.sh",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/build_and_run.sh",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/build_and_run.sh",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/callback/build_and_run.sh?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,17 @@\n+#!/bin/bash\n+\n+# Builds and runs the callback module\n+\n+pushd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null || exit\n+\n+cd ../..\n+\n+docker build                                              \\\n+  --rm                                                    \\\n+  -f services/callback/Dockerfile                       \\\n+  -t callback . &&                                      \\\n+docker run                                                \\\n+  -p 127.0.0.1:8080:8080/tcp                              \\\n+  -it callback\n+\n+popd > /dev/null || exit"
  },
  {
    "sha": "c43f15e9b1956fd26dce0047f8fa5b4fd0b00337",
    "filename": "services/callback/pom.xml",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/pom.xml",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/pom.xml",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/callback/pom.xml?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>services</artifactId>\n+    <groupId>org.opencwa</groupId>\n+    <version>${revision}</version>\n+    <relativePath>../pom.xml</relativePath>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>callback</artifactId>\n+\n+  <properties>\n+    <sonar.projectKey>corona-warn-app_cwa-server_services_callback</sonar.projectKey>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.cloud</groupId>\n+      <artifactId>spring-cloud-starter-openfeign</artifactId>\n+      <version>2.2.3.RELEASE</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.github.openfeign</groupId>\n+      <artifactId>feign-httpclient</artifactId>\n+      <version>11.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-math3</artifactId>\n+      <version>3.6.1</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-actuator</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-aop</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.micrometer</groupId>\n+      <artifactId>micrometer-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.micrometer</groupId>\n+      <artifactId>micrometer-registry-prometheus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.github.tomakehurst</groupId>\n+      <artifactId>wiremock-jre8</artifactId>\n+      <version>2.26.3</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>postgresql</artifactId>\n+      <version>1.14.3</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.jacoco</groupId>\n+        <artifactId>jacoco-maven-plugin</artifactId>\n+        <version>0.8.5</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>prepare-agent</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>report</id>\n+            <goals>\n+              <goal>report</goal>\n+            </goals>\n+            <phase>verify</phase>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+</project>"
  },
  {
    "sha": "0bc7bca5b8ffaacd389c0e04f8acd775a4e62af3",
    "filename": "services/callback/src/main/java/app/coronawarn/server/services/callback/ServerApplication.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/devyaniB/cwa-server/blob/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/src/main/java/app/coronawarn/server/services/callback/ServerApplication.java",
    "raw_url": "https://github.com/devyaniB/cwa-server/raw/18ad8c749c54113a9173690177ea580e73de2fb3/services/callback/src/main/java/app/coronawarn/server/services/callback/ServerApplication.java",
    "contents_url": "https://api.github.com/repos/devyaniB/cwa-server/contents/services/callback/src/main/java/app/coronawarn/server/services/callback/ServerApplication.java?ref=18ad8c749c54113a9173690177ea580e73de2fb3",
    "patch": "@@ -0,0 +1,84 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.callback;\n+\n+import io.micrometer.core.aop.TimedAspect;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.EnvironmentAware;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.core.env.Environment;\n+import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\n+\n+@SpringBootApplication(exclude = {UserDetailsServiceAutoConfiguration.class})\n+@EnableJdbcRepositories(basePackages = \"app.coronawarn.server.common.persistence\")\n+@EntityScan(basePackages = \"app.coronawarn.server.common.persistence\")\n+@ComponentScan({\"app.coronawarn.server.common.persistence\",\n+    \"app.coronawarn.server.services.callback\"})\n+@EnableConfigurationProperties\n+public class ServerApplication implements EnvironmentAware, DisposableBean {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(ServerApplication.class);\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(ServerApplication.class);\n+  }\n+\n+  @Bean\n+  TimedAspect timedAspect(MeterRegistry registry) {\n+    return new TimedAspect(registry);\n+  }\n+\n+  /**\n+   * Manual shutdown hook needed to avoid Log4j shutdown issues (see cwa-server/#589).\n+   */\n+  @Override\n+  public void destroy() {\n+    LogManager.shutdown();\n+  }\n+\n+  @Override\n+  public void setEnvironment(Environment environment) {\n+    List<String> profiles = Arrays.asList(environment.getActiveProfiles());\n+\n+    logger.info(\"Enabled named groups: {}\", System.getProperty(\"jdk.tls.namedGroups\"));\n+    if (profiles.contains(\"disable-ssl-server\")) {\n+      logger.warn(\n+          \"The submission service is started with endpoint TLS disabled. This should never be used in PRODUCTION!\");\n+    }\n+    if (profiles.contains(\"disable-ssl-client-postgres\")) {\n+      logger.warn(\n+          \"The submission service is started with postgres connection TLS disabled. \"\n+              + \"This should never be used in PRODUCTION!\");\n+    }\n+  }\n+}"
  }
]
