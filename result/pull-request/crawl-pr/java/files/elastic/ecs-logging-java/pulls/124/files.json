[
  {
    "sha": "950ecac06484c7bb83d9c8c715f8969d2c6f06d1",
    "filename": "ecs-logging-core/src/main/java/co/elastic/logging/DataStreamFieldSanitizer.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/ecs-logging-core/src/main/java/co/elastic/logging/DataStreamFieldSanitizer.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/ecs-logging-core/src/main/java/co/elastic/logging/DataStreamFieldSanitizer.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/ecs-logging-core/src/main/java/co/elastic/logging/DataStreamFieldSanitizer.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -0,0 +1,59 @@\n+/*-\n+ * #%L\n+ * Java ECS logging\n+ * %%\n+ * Copyright (C) 2019 - 2021 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.logging;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Based on https://github.com/elastic/ecs/blob/master/rfcs/text/0009-data_stream-fields.md#restrictions-on-values and\n+ * https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html#indices-create-api-path-params\n+ */\n+public class DataStreamFieldSanitizer {\n+\n+    private static final char[] DISALLOWED_IN_DATASET = new char[]{'\\\\', '/', '*', '?', '\\\"', '<', '>', '|', ' ', ',', '#', ':', '-'};\n+    private static final char[] DISALLOWED_IN_NAMESPACE = new char[]{'\\\\', '/', '*', '?', '\\\"', '<', '>', '|', ' ', ',', '#', ':'};\n+    private static final int MAX_LENGTH = 100;\n+    private static final char REPLACEMENT_CHAR = '_';\n+\n+    public static String sanitizeDataStreamDataset(String dataset) {\n+        return sanitazeDataStreamField(dataset, DISALLOWED_IN_DATASET);\n+    }\n+\n+    public static String sanitizeDataStreamNamespace(String dataStreamNamespace) {\n+        return sanitazeDataStreamField(dataStreamNamespace, DISALLOWED_IN_NAMESPACE);\n+    }\n+\n+    private static String sanitazeDataStreamField(String dataset, char[] disallowedInDataset) {\n+        if (dataset == null || dataset.isEmpty()) {\n+            return dataset;\n+        }\n+        dataset = dataset.toLowerCase(Locale.ROOT)\n+                .substring(0, Math.min(dataset.length(), MAX_LENGTH));\n+        for (char c : disallowedInDataset) {\n+            dataset = dataset.replace(c, REPLACEMENT_CHAR);\n+        }\n+        return dataset;\n+    }\n+}"
  },
  {
    "sha": "1e21368f68855572aa22a6515b9e61234af7f97c",
    "filename": "ecs-logging-core/src/main/java/co/elastic/logging/EcsJsonSerializer.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/ecs-logging-core/src/main/java/co/elastic/logging/EcsJsonSerializer.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/ecs-logging-core/src/main/java/co/elastic/logging/EcsJsonSerializer.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/ecs-logging-core/src/main/java/co/elastic/logging/EcsJsonSerializer.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -91,9 +91,16 @@ public static void serializeServiceName(StringBuilder builder, String serviceNam\n         }\n     }\n \n-    public static void serializeEventDataset(StringBuilder builder, String eventDataset) {\n+    public static void serializeDataset(StringBuilder builder, String eventDataset) {\n         if (eventDataset != null) {\n             builder.append(\"\\\"event.dataset\\\":\\\"\").append(eventDataset).append(\"\\\",\");\n+            builder.append(\"\\\"data_stream.dataset\\\":\\\"\").append(eventDataset).append(\"\\\",\");\n+        }\n+    }\n+\n+    public static void serializeNamespace(StringBuilder builder, String namespace) {\n+        if (namespace != null) {\n+            builder.append(\"\\\"data_stream.namespace\\\":\\\"\").append(namespace).append(\"\\\",\");\n         }\n     }\n \n@@ -276,11 +283,11 @@ public static StringBuilder getMessageStringBuilder() {\n         return result;\n     }\n \n-    public static String computeEventDataset(String eventDataset, String serviceName) {\n-        if (eventDataset == null && serviceName != null && !serviceName.isEmpty()) {\n+    public static String computeDataset(String dataset, String serviceName) {\n+        if (dataset == null && serviceName != null && !serviceName.isEmpty()) {\n             return serviceName + \".log\";\n         }\n-        return eventDataset;\n+        return DataStreamFieldSanitizer.sanitizeDataStreamDataset(dataset);\n     }\n \n     public static void serializeAdditionalFields(StringBuilder builder, List<AdditionalField> additionalFields) {"
  },
  {
    "sha": "6cc0cf0c6e6190213b429367a65858ce49918778",
    "filename": "ecs-logging-core/src/test/java/co/elastic/logging/AbstractEcsLoggingTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/ecs-logging-core/src/test/java/co/elastic/logging/AbstractEcsLoggingTest.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/ecs-logging-core/src/test/java/co/elastic/logging/AbstractEcsLoggingTest.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/ecs-logging-core/src/test/java/co/elastic/logging/AbstractEcsLoggingTest.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -63,6 +63,8 @@ void testMetadata() throws Exception {\n         assertThat(getAndValidateLastLogLine().get(\"log.level\").textValue()).isIn(\"DEBUG\", \"FINE\");\n         assertThat(getAndValidateLastLogLine().get(\"log.logger\")).isNotNull();\n         assertThat(getAndValidateLastLogLine().get(\"event.dataset\").textValue()).isEqualTo(\"testdataset.log\");\n+        assertThat(getAndValidateLastLogLine().get(\"data_stream.dataset\").textValue()).isEqualTo(\"testdataset.log\");\n+        assertThat(getAndValidateLastLogLine().get(\"data_stream.namespace\").textValue()).isEqualTo(\"custom_namespace\");\n         assertThat(getAndValidateLastLogLine().get(\"ecs.version\").textValue()).isEqualTo(\"1.2.0\");\n         validateLog(getAndValidateLastLogLine());\n     }"
  },
  {
    "sha": "d72c5abf952496a009a3d5c19336e286b4acd628",
    "filename": "jboss-logmanager-ecs-formatter/src/main/java/co/elastic/logging/jboss/logmanager/EcsFormatter.java",
    "status": "modified",
    "additions": 30,
    "deletions": 8,
    "changes": 38,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jboss-logmanager-ecs-formatter/src/main/java/co/elastic/logging/jboss/logmanager/EcsFormatter.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jboss-logmanager-ecs-formatter/src/main/java/co/elastic/logging/jboss/logmanager/EcsFormatter.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/jboss-logmanager-ecs-formatter/src/main/java/co/elastic/logging/jboss/logmanager/EcsFormatter.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -24,28 +24,35 @@\n  */\n package co.elastic.logging.jboss.logmanager;\n \n+import co.elastic.logging.DataStreamFieldSanitizer;\n import co.elastic.logging.EcsJsonSerializer;\n import co.elastic.logging.AdditionalField;\n import org.jboss.logmanager.ExtFormatter;\n import org.jboss.logmanager.ExtLogRecord;\n import org.jboss.logmanager.LogManager;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n public class EcsFormatter extends ExtFormatter {\n \n     private String serviceName;\n-    private String eventDataset;\n+    private String dataset;\n+    private String dataStreamNamespace;\n     private List<AdditionalField> additionalFields = Collections.emptyList();\n     private boolean includeOrigin;\n     private boolean stackTraceAsArray;\n \n     public EcsFormatter() {\n-        serviceName = getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.serviceName\", null);\n-        eventDataset = getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.eventDataset\", null);\n-        eventDataset = EcsJsonSerializer.computeEventDataset(eventDataset, serviceName);\n+        setServiceName(getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.serviceName\", null));\n+        String dataset = getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.dataStreamDataset\", null);\n+        if (dataset == null) {\n+            dataset = getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.eventDataset\", null);\n+        }\n+        setDataset(EcsJsonSerializer.computeDataset(dataset, serviceName));\n+\n+        setDataStreamNamespace(getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.dataStreamNamespace\", null));\n+\n         includeOrigin = Boolean.getBoolean(getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.includeOrigin\", \"false\"));\n         stackTraceAsArray = Boolean.getBoolean(getProperty(\"co.elastic.logging.jboss.logmanager.EcsFormatter.stackTraceAsArray\", \"false\"));\n     }\n@@ -58,7 +65,8 @@ public String format(ExtLogRecord record) {\n         EcsJsonSerializer.serializeFormattedMessage(builder, record.getFormattedMessage());\n         EcsJsonSerializer.serializeEcsVersion(builder);\n         EcsJsonSerializer.serializeServiceName(builder, serviceName);\n-        EcsJsonSerializer.serializeEventDataset(builder, eventDataset);\n+        EcsJsonSerializer.serializeDataset(builder, dataset);\n+        EcsJsonSerializer.serializeNamespace(builder, dataStreamNamespace);\n         EcsJsonSerializer.serializeThreadName(builder, record.getThreadName());\n         EcsJsonSerializer.serializeLoggerName(builder, record.getLoggerName());\n         EcsJsonSerializer.serializeAdditionalFields(builder, additionalFields);\n@@ -88,15 +96,29 @@ public void setIncludeOrigin(final boolean includeOrigin) {\n \n     public void setServiceName(final String serviceName) {\n         this.serviceName = serviceName;\n-        eventDataset = EcsJsonSerializer.computeEventDataset(eventDataset, serviceName);\n+        setDataset(EcsJsonSerializer.computeDataset(dataset, serviceName));\n     }\n \n     public void setStackTraceAsArray(final boolean stackTraceAsArray) {\n         this.stackTraceAsArray = stackTraceAsArray;\n     }\n \n     public void setEventDataset(String eventDataset) {\n-        this.eventDataset = eventDataset;\n+        setDataset(eventDataset);\n+    }\n+\n+    public void setDataStreamDataset(String eventDataset) {\n+        setDataset(eventDataset);\n+    }\n+\n+    private void setDataset(String dataset) {\n+        if (dataset != null) {\n+            this.dataset = DataStreamFieldSanitizer.sanitizeDataStreamDataset(dataset);\n+        }\n+    }\n+\n+    public void setDataStreamNamespace(String dataStreamNamespace) {\n+        this.dataStreamNamespace = DataStreamFieldSanitizer.sanitizeDataStreamNamespace(dataStreamNamespace);\n     }\n \n     public void setAdditionalFields(String additionalFields) {"
  },
  {
    "sha": "7201d07c887ba56acb877fb2934d08f252a58aa3",
    "filename": "jboss-logmanager-ecs-formatter/src/test/java/co/elastic/logging/jboss/logmanager/JBossLogManagerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jboss-logmanager-ecs-formatter/src/test/java/co/elastic/logging/jboss/logmanager/JBossLogManagerTest.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jboss-logmanager-ecs-formatter/src/test/java/co/elastic/logging/jboss/logmanager/JBossLogManagerTest.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/jboss-logmanager-ecs-formatter/src/test/java/co/elastic/logging/jboss/logmanager/JBossLogManagerTest.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -90,6 +90,7 @@ void setUp() {\n         formatter.setIncludeOrigin(true);\n         formatter.setServiceName(\"test\");\n         formatter.setEventDataset(\"testdataset.log\");\n+        formatter.setDataStreamNamespace(\"custom*namespace\");\n         formatter.setAdditionalFields(\"key1=value1,key2=value2\");\n \n         logger.setLevel(Level.ALL);"
  },
  {
    "sha": "09e80e4114c30157cfa7e60a2a358b2db89c4fdf",
    "filename": "jul-ecs-formatter/src/main/java/co/elastic/logging/jul/EcsFormatter.java",
    "status": "modified",
    "additions": 28,
    "deletions": 6,
    "changes": 34,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jul-ecs-formatter/src/main/java/co/elastic/logging/jul/EcsFormatter.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jul-ecs-formatter/src/main/java/co/elastic/logging/jul/EcsFormatter.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/jul-ecs-formatter/src/main/java/co/elastic/logging/jul/EcsFormatter.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -31,6 +31,7 @@\n import java.util.logging.LogRecord;\n \n import co.elastic.logging.AdditionalField;\n+import co.elastic.logging.DataStreamFieldSanitizer;\n import co.elastic.logging.EcsJsonSerializer;\n \n public class EcsFormatter extends Formatter {\n@@ -41,19 +42,24 @@\n     private boolean stackTraceAsArray;\n     private String serviceName;\n     private boolean includeOrigin;\n-    private String eventDataset;\n+    private String dataset;\n+    private String dataStreamNamespace;\n     private List<AdditionalField> additionalFields = Collections.emptyList();\n \n     /**\n      * Default constructor. Will read configuration from LogManager properties.\n      */\n     public EcsFormatter() {\n-        serviceName = getProperty(\"co.elastic.logging.jul.EcsFormatter.serviceName\", null);\n+        setServiceName(getProperty(\"co.elastic.logging.jul.EcsFormatter.serviceName\", null));\n         includeOrigin = Boolean.getBoolean(getProperty(\"co.elastic.logging.jul.EcsFormatter.includeOrigin\", \"false\"));\n         stackTraceAsArray = Boolean\n                 .getBoolean(getProperty(\"co.elastic.logging.jul.EcsFormatter.stackTraceAsArray\", \"false\"));\n-        eventDataset = getProperty(\"co.elastic.logging.jul.EcsFormatter.eventDataset\", null);\n-        eventDataset = EcsJsonSerializer.computeEventDataset(eventDataset, serviceName);\n+        String dataset = getProperty(\"co.elastic.logging.jul.EcsFormatter.dataStreamDataset\", null);\n+        if (dataset == null) {\n+            dataset = getProperty(\"co.elastic.logging.jul.EcsFormatter.eventDataset\", null);\n+        }\n+        setDataset(dataset);\n+        setDataStreamNamespace(getProperty(\"co.elastic.logging.jul.EcsFormatter.dataStreamNamespace\", null));\n     }\n \n     @Override\n@@ -66,7 +72,8 @@ public String format(final LogRecord record) {\n         EcsJsonSerializer.serializeAdditionalFields(builder, additionalFields);\n         EcsJsonSerializer.serializeMDC(builder, mdcSupplier.getMDC());\n         EcsJsonSerializer.serializeServiceName(builder, serviceName);\n-        EcsJsonSerializer.serializeEventDataset(builder, eventDataset);\n+        EcsJsonSerializer.serializeDataset(builder, dataset);\n+        EcsJsonSerializer.serializeNamespace(builder, dataStreamNamespace);\n         if (Thread.currentThread().getId() == record.getThreadID()) {\n             EcsJsonSerializer.serializeThreadName(builder, Thread.currentThread().getName());\n         } else {\n@@ -90,14 +97,29 @@ protected void setIncludeOrigin(final boolean includeOrigin) {\n \n     protected void setServiceName(final String serviceName) {\n         this.serviceName = serviceName;\n+        setDataset(EcsJsonSerializer.computeDataset(dataset, serviceName));\n     }\n \n     protected void setStackTraceAsArray(final boolean stackTraceAsArray) {\n         this.stackTraceAsArray = stackTraceAsArray;\n     }\n     \n     public void setEventDataset(String eventDataset) {\n-        this.eventDataset = eventDataset;\n+        setDataset(eventDataset);\n+    }\n+\n+    public void setDataStreamDataset(String eventDataset) {\n+        setDataset(eventDataset);\n+    }\n+\n+    private void setDataset(String dataset) {\n+        if (dataset != null) {\n+            this.dataset = DataStreamFieldSanitizer.sanitizeDataStreamDataset(dataset);\n+        }\n+    }\n+\n+    public void setDataStreamNamespace(String dataStreamNamespace) {\n+        this.dataStreamNamespace = DataStreamFieldSanitizer.sanitizeDataStreamNamespace(dataStreamNamespace);\n     }\n \n     public void setAdditionalFields(String additionalFields) {"
  },
  {
    "sha": "9cfaecda1629c41dcff9a7d607420766b00d1cd5",
    "filename": "jul-ecs-formatter/src/test/java/co/elastic/logging/jul/JulLoggingTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jul-ecs-formatter/src/test/java/co/elastic/logging/jul/JulLoggingTest.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/jul-ecs-formatter/src/test/java/co/elastic/logging/jul/JulLoggingTest.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/jul-ecs-formatter/src/test/java/co/elastic/logging/jul/JulLoggingTest.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -115,6 +115,7 @@ void setUp() {\n         formatter.setIncludeOrigin(true);\n         formatter.setServiceName(\"test\");\n         formatter.setEventDataset(\"testdataset.log\");\n+        formatter.setDataStreamNamespace(\"custom*namespace\");\n         formatter.setAdditionalFields(\"key1=value1,key2=value2\");\n         \n         Handler handler = new InMemoryStreamHandler(out, formatter);"
  },
  {
    "sha": "d60b6bbb984c9de07b082ca0c2f46cccf0613a23",
    "filename": "log4j-ecs-layout/src/main/java/co/elastic/logging/log4j/EcsLayout.java",
    "status": "modified",
    "additions": 20,
    "deletions": 5,
    "changes": 25,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j-ecs-layout/src/main/java/co/elastic/logging/log4j/EcsLayout.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j-ecs-layout/src/main/java/co/elastic/logging/log4j/EcsLayout.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/log4j-ecs-layout/src/main/java/co/elastic/logging/log4j/EcsLayout.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -24,6 +24,7 @@\n  */\n package co.elastic.logging.log4j;\n \n+import co.elastic.logging.DataStreamFieldSanitizer;\n import co.elastic.logging.EcsJsonSerializer;\n import co.elastic.logging.AdditionalField;\n import org.apache.log4j.Layout;\n@@ -41,7 +42,8 @@\n     private boolean stackTraceAsArray = false;\n     private String serviceName;\n     private boolean includeOrigin;\n-    private String eventDataset;\n+    private String dataset;\n+    private String dataStreamNamespace;\n     private List<AdditionalField> additionalFields = new ArrayList<AdditionalField>();\n \n     @Override\n@@ -52,7 +54,8 @@ public String format(LoggingEvent event) {\n         EcsJsonSerializer.serializeFormattedMessage(builder, event.getRenderedMessage());\n         EcsJsonSerializer.serializeEcsVersion(builder);\n         EcsJsonSerializer.serializeServiceName(builder, serviceName);\n-        EcsJsonSerializer.serializeEventDataset(builder, eventDataset);\n+        EcsJsonSerializer.serializeDataset(builder, dataset);\n+        EcsJsonSerializer.serializeNamespace(builder, dataStreamNamespace);\n         EcsJsonSerializer.serializeThreadName(builder, event.getThreadName());\n         EcsJsonSerializer.serializeLoggerName(builder, event.categoryName);\n         EcsJsonSerializer.serializeAdditionalFields(builder, additionalFields);\n@@ -92,7 +95,7 @@ public boolean ignoresThrowable() {\n \n     @Override\n     public void activateOptions() {\n-        eventDataset = EcsJsonSerializer.computeEventDataset(eventDataset, serviceName);\n+        setDataset(EcsJsonSerializer.computeDataset(dataset, serviceName));\n     }\n \n     public void setServiceName(String serviceName) {\n@@ -107,8 +110,20 @@ public void setStackTraceAsArray(boolean stackTraceAsArray) {\n         this.stackTraceAsArray = stackTraceAsArray;\n     }\n \n-    public void setEventDataset(String eventDataset) {\n-        this.eventDataset = eventDataset;\n+    public void setEventDataset(String dataset) {\n+        setDataset(dataset);\n+    }\n+\n+    public void setDataStreamDataset(String dataset) {\n+        setDataset(dataset);\n+    }\n+\n+    private void setDataset(String dataset) {\n+        this.dataset = DataStreamFieldSanitizer.sanitizeDataStreamDataset(dataset);\n+    }\n+\n+    public void setDataStreamNamespace(String dataStreamNamespace) {\n+        this.dataStreamNamespace = DataStreamFieldSanitizer.sanitizeDataStreamNamespace(dataStreamNamespace);\n     }\n \n     public void setAdditionalField(String additionalField) {"
  },
  {
    "sha": "23fce8a6c3437f4378abf3396af4dd7c8f83d38d",
    "filename": "log4j-ecs-layout/src/test/java/co/elastic/logging/log4j/Log4jEcsLayoutTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j-ecs-layout/src/test/java/co/elastic/logging/log4j/Log4jEcsLayoutTest.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j-ecs-layout/src/test/java/co/elastic/logging/log4j/Log4jEcsLayoutTest.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/log4j-ecs-layout/src/test/java/co/elastic/logging/log4j/Log4jEcsLayoutTest.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -53,6 +53,7 @@ void setUp() {\n         ecsLayout.setServiceName(\"test\");\n         ecsLayout.setIncludeOrigin(true);\n         ecsLayout.setEventDataset(\"testdataset.log\");\n+        ecsLayout.setDataStreamNamespace(\"custom*namespace\");\n         ecsLayout.activateOptions();\n         ecsLayout.setAdditionalField(\"key1=value1\");\n         ecsLayout.setAdditionalField(\"key2=value2\");"
  },
  {
    "sha": "8cd5a316f5647f45c76ea966b009895b74415f11",
    "filename": "log4j-ecs-layout/src/test/resources/log4j.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j-ecs-layout/src/test/resources/log4j.xml",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j-ecs-layout/src/test/resources/log4j.xml",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/log4j-ecs-layout/src/test/resources/log4j.xml?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -5,6 +5,7 @@\n         <layout class=\"co.elastic.logging.log4j.EcsLayout\">\n             <param name=\"serviceName\" value=\"test\"/>\n             <param name=\"eventDataset\" value=\"testdataset.log\"/>\n+            <param name=\"dataStreamNamespace\" value=\"custom*namespace\"/>\n             <param name=\"includeOrigin\" value=\"true\"/>\n             <param name=\"additionalField\" value=\"key1=value1\"/>\n             <param name=\"additionalField\" value=\"key2=value2\"/>"
  },
  {
    "sha": "beec6fdc8c833c1e15217fe81a35bfd68fd3bfb6",
    "filename": "log4j2-ecs-layout/src/main/java/co/elastic/logging/log4j2/EcsLayout.java",
    "status": "modified",
    "additions": 25,
    "deletions": 5,
    "changes": 30,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j2-ecs-layout/src/main/java/co/elastic/logging/log4j2/EcsLayout.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j2-ecs-layout/src/main/java/co/elastic/logging/log4j2/EcsLayout.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/log4j2-ecs-layout/src/main/java/co/elastic/logging/log4j2/EcsLayout.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -25,6 +25,7 @@\n package co.elastic.logging.log4j2;\n \n \n+import co.elastic.logging.DataStreamFieldSanitizer;\n import co.elastic.logging.EcsJsonSerializer;\n import co.elastic.logging.JsonUtils;\n import org.apache.logging.log4j.Marker;\n@@ -68,20 +69,22 @@\n     private final PatternFormatter[][] fieldValuePatternFormatter;\n     private final boolean stackTraceAsArray;\n     private final String serviceName;\n-    private final String eventDataset;\n+    private final String dataset;\n+    private final String dataStreamNamespace;\n     private final boolean includeMarkers;\n     private final boolean includeOrigin;\n     private final ConcurrentMap<Class<? extends MultiformatMessage>, Boolean> supportsJson = new ConcurrentHashMap<Class<? extends MultiformatMessage>, Boolean>();\n \n-    private EcsLayout(Configuration config, String serviceName, String eventDataset, boolean includeMarkers, KeyValuePair[] additionalFields, boolean includeOrigin, boolean stackTraceAsArray) {\n+    private EcsLayout(Configuration config, String serviceName, String dataset, boolean includeMarkers, KeyValuePair[] additionalFields, boolean includeOrigin, boolean stackTraceAsArray, String dataStreamNamespace) {\n         super(config, UTF_8, null, null);\n         this.serviceName = serviceName;\n-        this.eventDataset = eventDataset;\n+        this.dataset = dataset;\n         this.includeMarkers = includeMarkers;\n         this.includeOrigin = includeOrigin;\n         this.stackTraceAsArray = stackTraceAsArray;\n         this.additionalFields = additionalFields;\n         fieldValuePatternFormatter = new PatternFormatter[additionalFields.length][];\n+        this.dataStreamNamespace = dataStreamNamespace;\n         for (int i = 0; i < additionalFields.length; i++) {\n             KeyValuePair additionalField = additionalFields[i];\n             if (additionalField.getValue().contains(\"%\")) {\n@@ -125,7 +128,8 @@ private StringBuilder toText(LogEvent event, StringBuilder builder, boolean gcFr\n         serializeMessage(builder, gcFree, event.getMessage(), event.getThrown());\n         EcsJsonSerializer.serializeEcsVersion(builder);\n         EcsJsonSerializer.serializeServiceName(builder, serviceName);\n-        EcsJsonSerializer.serializeEventDataset(builder, eventDataset);\n+        EcsJsonSerializer.serializeDataset(builder, dataset);\n+        EcsJsonSerializer.serializeNamespace(builder, dataStreamNamespace);\n         EcsJsonSerializer.serializeThreadName(builder, event.getThreadName());\n         EcsJsonSerializer.serializeLoggerName(builder, event.getLoggerName());\n         serializeAdditionalFieldsAndMDC(event, builder);\n@@ -326,6 +330,10 @@ private boolean supportsJson(MultiformatMessage message) {\n         private String serviceName;\n         @PluginBuilderAttribute(\"eventDataset\")\n         private String eventDataset;\n+        @PluginBuilderAttribute(\"dataStreamDataset\")\n+        private String dataStreamDataset;\n+        @PluginBuilderAttribute(\"dataStreamNamespace\")\n+        private String dataStreamNamespace;\n         @PluginBuilderAttribute(\"includeMarkers\")\n         private boolean includeMarkers = false;\n         @PluginBuilderAttribute(\"stackTraceAsArray\")\n@@ -387,6 +395,16 @@ public boolean isIncludeOrigin() {\n             return this;\n         }\n \n+        public EcsLayout.Builder setDataStreamDataset(String dataStreamDataset) {\n+            this.dataStreamDataset = dataStreamDataset;\n+            return this;\n+        }\n+\n+        public EcsLayout.Builder setDataStreamNamespace(String dataStreamNamespace) {\n+            this.dataStreamNamespace = dataStreamNamespace;\n+            return this;\n+        }\n+\n         public EcsLayout.Builder setIncludeMarkers(final boolean includeMarkers) {\n             this.includeMarkers = includeMarkers;\n             return this;\n@@ -404,7 +422,9 @@ public boolean isIncludeOrigin() {\n \n         @Override\n         public EcsLayout build() {\n-            return new EcsLayout(getConfiguration(), serviceName, EcsJsonSerializer.computeEventDataset(eventDataset, serviceName), includeMarkers, additionalFields, includeOrigin, stackTraceAsArray);\n+            String dataset = EcsJsonSerializer.computeDataset(dataStreamDataset != null ? dataStreamDataset : eventDataset, serviceName);\n+            return new EcsLayout(getConfiguration(), serviceName, dataset, includeMarkers,\n+                    additionalFields, includeOrigin, stackTraceAsArray, DataStreamFieldSanitizer.sanitizeDataStreamNamespace(dataStreamNamespace));\n         }\n \n         public boolean isStackTraceAsArray() {"
  },
  {
    "sha": "de96c626fa0c8dc6c108bf47619a26d4c670f554",
    "filename": "log4j2-ecs-layout/src/test/java/co/elastic/logging/log4j2/Log4j2EcsLayoutTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j2-ecs-layout/src/test/java/co/elastic/logging/log4j2/Log4j2EcsLayoutTest.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j2-ecs-layout/src/test/java/co/elastic/logging/log4j2/Log4j2EcsLayoutTest.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/log4j2-ecs-layout/src/test/java/co/elastic/logging/log4j2/Log4j2EcsLayoutTest.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -70,6 +70,7 @@ void setUp() {\n                 .setIncludeMarkers(true)\n                 .setIncludeOrigin(true)\n                 .setEventDataset(\"testdataset.log\")\n+                .setDataStreamNamespace(\"custom*namespace\")\n                 .setAdditionalFields(new KeyValuePair[]{\n                         new KeyValuePair(\"cluster.uuid\", \"9fe9134b-20b0-465e-acf9-8cc09ac9053b\"),\n                         new KeyValuePair(\"node.id\", \"${node.id}\"),"
  },
  {
    "sha": "01a8a0f1d860caa29e0581e6a22a0d941266776a",
    "filename": "log4j2-ecs-layout/src/test/resources/log4j2-test.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j2-ecs-layout/src/test/resources/log4j2-test.xml",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/log4j2-ecs-layout/src/test/resources/log4j2-test.xml",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/log4j2-ecs-layout/src/test/resources/log4j2-test.xml?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -5,7 +5,7 @@\n     </Properties>\n     <Appenders>\n         <List name=\"TestAppender\">\n-            <EcsLayout serviceName=\"test\" includeMarkers=\"true\" includeOrigin=\"true\" eventDataset=\"testdataset.log\">\n+            <EcsLayout serviceName=\"test\" includeMarkers=\"true\" includeOrigin=\"true\" eventDataset=\"testdataset.log\" dataStreamNamespace=\"custom*namespace\">\n                 <KeyValuePair key=\"cluster.uuid\" value=\"9fe9134b-20b0-465e-acf9-8cc09ac9053b\"/>\n                 <KeyValuePair key=\"node.id\" value=\"${node.id}\"/>\n                 <KeyValuePair key=\"empty\" value=\"${empty}\"/>"
  },
  {
    "sha": "12a6a14fcd0e29dcfa5ecab14f4ec3ac40fe3d11",
    "filename": "logback-ecs-encoder/src/main/java/co/elastic/logging/logback/EcsEncoder.java",
    "status": "modified",
    "additions": 24,
    "deletions": 9,
    "changes": 33,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/logback-ecs-encoder/src/main/java/co/elastic/logging/logback/EcsEncoder.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/logback-ecs-encoder/src/main/java/co/elastic/logging/logback/EcsEncoder.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/logback-ecs-encoder/src/main/java/co/elastic/logging/logback/EcsEncoder.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -11,9 +11,9 @@\n  * the Apache License, Version 2.0 (the \"License\"); you may\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -29,8 +29,9 @@\n import ch.qos.logback.classic.spi.IThrowableProxy;\n import ch.qos.logback.classic.spi.ThrowableProxy;\n import ch.qos.logback.core.encoder.EncoderBase;\n-import co.elastic.logging.EcsJsonSerializer;\n import co.elastic.logging.AdditionalField;\n+import co.elastic.logging.DataStreamFieldSanitizer;\n+import co.elastic.logging.EcsJsonSerializer;\n import org.slf4j.Marker;\n \n import java.io.IOException;\n@@ -43,13 +44,14 @@\n public class EcsEncoder extends EncoderBase<ILoggingEvent> {\n \n     private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+    private final List<AdditionalField> additionalFields = new ArrayList<AdditionalField>();\n     private boolean stackTraceAsArray = false;\n     private String serviceName;\n-    private String eventDataset;\n+    private String dataset;\n+    private String dataStreamNamespace;\n     private boolean includeMarkers = false;\n     private ThrowableProxyConverter throwableProxyConverter;\n     private boolean includeOrigin;\n-    private final List<AdditionalField> additionalFields = new ArrayList<AdditionalField>();\n     private OutputStream os;\n \n     @Override\n@@ -62,8 +64,9 @@ public void start() {\n         super.start();\n         throwableProxyConverter = new ThrowableProxyConverter();\n         throwableProxyConverter.start();\n-        eventDataset = EcsJsonSerializer.computeEventDataset(eventDataset, serviceName);\n+        setDataset(EcsJsonSerializer.computeDataset(dataset, serviceName));\n     }\n+\n     /**\n      * This method has been removed in logback 1.2.\n      * To make this lib backwards compatible with logback 1.1 we have implement this method.\n@@ -96,7 +99,8 @@ public void close() throws IOException {\n         EcsJsonSerializer.serializeEcsVersion(builder);\n         serializeMarkers(event, builder);\n         EcsJsonSerializer.serializeServiceName(builder, serviceName);\n-        EcsJsonSerializer.serializeEventDataset(builder, eventDataset);\n+        EcsJsonSerializer.serializeDataset(builder, dataset);\n+        EcsJsonSerializer.serializeNamespace(builder, dataStreamNamespace);\n         EcsJsonSerializer.serializeThreadName(builder, event.getThreadName());\n         EcsJsonSerializer.serializeLoggerName(builder, event.getLoggerName());\n         EcsJsonSerializer.serializeAdditionalFields(builder, additionalFields);\n@@ -162,8 +166,19 @@ public void addAdditionalField(AdditionalField pair) {\n         this.additionalFields.add(pair);\n     }\n \n-    public void setEventDataset(String eventDataset) {\n-        this.eventDataset = eventDataset;\n+    public void setEventDataset(String dataset) {\n+        setDataset(dataset);\n     }\n \n+    public void setDataStreamDataset(String dataset) {\n+        setDataset(dataset);\n+    }\n+\n+    private void setDataset(String dataset) {\n+        this.dataset = DataStreamFieldSanitizer.sanitizeDataStreamDataset(dataset);\n+    }\n+\n+    public void setDataStreamNamespace(String dataStreamNamespace) {\n+        this.dataStreamNamespace = DataStreamFieldSanitizer.sanitizeDataStreamNamespace(dataStreamNamespace);\n+    }\n }"
  },
  {
    "sha": "6436510b1cbc51e44ab2975a91f2b4efbcf58aaa",
    "filename": "logback-ecs-encoder/src/test/java/co/elastic/logging/logback/EcsEncoderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/logback-ecs-encoder/src/test/java/co/elastic/logging/logback/EcsEncoderTest.java",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/logback-ecs-encoder/src/test/java/co/elastic/logging/logback/EcsEncoderTest.java",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/logback-ecs-encoder/src/test/java/co/elastic/logging/logback/EcsEncoderTest.java?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -49,6 +49,7 @@ void setUp() {\n         ecsEncoder.addAdditionalField(new AdditionalField(\"key1\", \"value1\"));\n         ecsEncoder.addAdditionalField(new AdditionalField(\"key2\", \"value2\"));\n         ecsEncoder.setEventDataset(\"testdataset.log\");\n+        ecsEncoder.setDataStreamNamespace(\"custom*namespace\");\n         ecsEncoder.start();\n         appender.setEncoder(ecsEncoder);\n         appender.start();"
  },
  {
    "sha": "a7435e7e987d9d1de43d87618829089306aa828d",
    "filename": "logback-ecs-encoder/src/test/resources/logback-config.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/elastic/ecs-logging-java/blob/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/logback-ecs-encoder/src/test/resources/logback-config.xml",
    "raw_url": "https://github.com/elastic/ecs-logging-java/raw/6c1bb21dcbec5b91d97903d1c2a0a5af141001ec/logback-ecs-encoder/src/test/resources/logback-config.xml",
    "contents_url": "https://api.github.com/repos/elastic/ecs-logging-java/contents/logback-ecs-encoder/src/test/resources/logback-config.xml?ref=6c1bb21dcbec5b91d97903d1c2a0a5af141001ec",
    "patch": "@@ -7,6 +7,7 @@\n             <includeOrigin>true</includeOrigin>\n             <topLevelLabel>top_level</topLevelLabel>\n             <eventDataset>testdataset.log</eventDataset>\n+            <dataStreamNamespace>custom*namespace</dataStreamNamespace>\n             <additionalField>\n                 <key>key1</key>\n                 <value>value1</value>"
  }
]
