[
  {
    "sha": "ab427146288dd9bb5b67731f74c0f686f24456ae",
    "filename": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/EqlRestTestCase.java",
    "status": "modified",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/EqlRestTestCase.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/EqlRestTestCase.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/EqlRestTestCase.java?ref=0dcb1c325dc410aa9d03fab481ea0ee4da936857",
    "patch": "@@ -106,6 +106,45 @@ public void testIndexWildcardPatterns() throws Exception {\n         deleteIndex(\"test2\");\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public void testUnicodeChars() throws Exception {\n+        createIndex(\"test\", Settings.EMPTY, null, null);\n+\n+        StringBuilder bulk = new StringBuilder();\n+        bulk.append(\"{\\\"index\\\": {\\\"_index\\\": \\\"test\\\", \\\"_id\\\": 1}}\\n\");\n+        bulk.append(\"{\\\"event\\\":{\\\"category\\\":\\\"process\\\"},\\\"@timestamp\\\":\\\"2020-09-04T12:34:56Z\\\",\\\"log\\\" : \\\"prefix_Ã«_suffix\\\"}\\n\");\n+        bulk.append(\"{\\\"index\\\": {\\\"_index\\\": \\\"test\\\", \\\"_id\\\": 2}}\\n\");\n+        bulk.append(\"{\\\"event\\\":{\\\"category\\\":\\\"process\\\"},\\\"@timestamp\\\":\\\"2020-09-05T12:34:57Z\\\",\\\"log\\\" : \\\"prefix_ð– ‹_suffix\\\"}\\n\");\n+        bulkIndex(bulk.toString());\n+\n+        String endpoint = \"/test/_eql/search\";\n+        Request request = new Request(\"GET\", endpoint);\n+        request.setJsonEntity(\"{\\\"query\\\":\\\"process where log==\\\\\\\"prefix_\\\\\\\\u00eb_suffix\\\\\\\"\\\"}\");\n+        Response response = client().performRequest(request);\n+\n+        Map<String, Object> responseMap;\n+        try (InputStream content = response.getEntity().getContent()) {\n+            responseMap = XContentHelper.convertToMap(JsonXContent.jsonXContent, content, false);\n+        }\n+        Map<String, Object> hits = (Map<String, Object>) responseMap.get(\"hits\");\n+        List<Map<String, Object>> events = (List<Map<String, Object>>) hits.get(\"events\");\n+        assertEquals(1, events.size());\n+        assertEquals(\"1\", events.get(0).get(\"_id\"));\n+\n+        request.setJsonEntity(\"{\\\"query\\\":\\\"process where log==\\\\\\\"prefix_\\\\\\\\u{01680b}_suffix\\\\\\\"\\\"}\");\n+        response = client().performRequest(request);\n+\n+        try (InputStream content = response.getEntity().getContent()) {\n+            responseMap = XContentHelper.convertToMap(JsonXContent.jsonXContent, content, false);\n+        }\n+        hits = (Map<String, Object>) responseMap.get(\"hits\");\n+        events = (List<Map<String, Object>>) hits.get(\"events\");\n+        assertEquals(1, events.size());\n+        assertEquals(\"2\", events.get(0).get(\"_id\"));\n+\n+        deleteIndex(\"test\");\n+    }\n+\n     private void bulkIndex(String bulk) throws IOException {\n         Request bulkRequest = new Request(\"POST\", \"/_bulk\");\n         bulkRequest.setJsonEntity(bulk);"
  },
  {
    "sha": "70c7d8f5443c547b6769d2642d03fa7d564f8307",
    "filename": "x-pack/plugin/eql/src/main/antlr/EqlBase.g4",
    "status": "modified",
    "additions": 21,
    "deletions": 3,
    "changes": 24,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/antlr/EqlBase.g4",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/antlr/EqlBase.g4",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/eql/src/main/antlr/EqlBase.g4?ref=0dcb1c325dc410aa9d03fab481ea0ee4da936857",
    "patch": "@@ -205,12 +205,30 @@ LP: '(';\n RP: ')';\n PIPE: '|';\n \n+fragment STRING_ESCAPE\n+    : '\\\\' [btnfr\"'\\\\]\n+    ;\n+\n+fragment HEX_DIGIT\n+    : [0-9abcdefABCDEF]\n+    ;\n+\n+fragment UNICODE_ESCAPE\n+    : '\\\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT\n+    | '\\\\u' '{' HEX_DIGIT+  '}' // 2-8 hex\n+    ;\n+\n+fragment UNESCAPED_CHARS\n+    : ~[\\r\\n\"\\\\]\n+    ;\n+\n STRING\n-    : '\\''  ('\\\\' [btnfr\"'\\\\] | ~[\\r\\n'\\\\])* '\\''\n-    | '\"'   ('\\\\' [btnfr\"'\\\\] | ~[\\r\\n\"\\\\])* '\"'\n+    : '\"' (STRING_ESCAPE | UNICODE_ESCAPE | UNESCAPED_CHARS)* '\"'\n+    | '\"\"\"' (~[\\r\\n])*? '\"\"\"' '\"'? '\"'?\n+    // Old style quoting of string, handled as errors in AbstractBuilder\n+    | '\\''  ('\\\\' [btnfr\"'\\\\] | ~[\\r\\n'\\\\])* '\\''\n     | '?\"'  ('\\\\\"' |~[\"\\r\\n])* '\"'\n     | '?\\'' ('\\\\\\'' |~['\\r\\n])* '\\''\n-    | '\"\"\"' (~[\\r\\n])*? '\"\"\"' '\"'? '\"'?\n     ;\n \n INTEGER_VALUE"
  },
  {
    "sha": "6898dcb9f2e3ef7b46eeb9b12e9f5300440ad06a",
    "filename": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java",
    "status": "modified",
    "additions": 66,
    "deletions": 44,
    "changes": 110,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java?ref=0dcb1c325dc410aa9d03fab481ea0ee4da936857",
    "patch": "@@ -18,16 +18,12 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /**\n  * Base parsing visitor class offering utility methods.\n  */\n abstract class AbstractBuilder extends EqlBaseBaseVisitor<Object> {\n \n-    private static final Pattern slashPattern = Pattern.compile(\"\\\\\\\\.\");\n-\n     @Override\n     public Object visit(ParseTree tree) {\n         Object result = super.visit(tree);\n@@ -137,50 +133,76 @@ public static String unquoteString(Source source) {\n         checkForSingleQuotedString(source, text, 0);\n \n         text = text.substring(1, text.length() - 1);\n-        StringBuffer resultString = new StringBuffer();\n-        Matcher regexMatcher = slashPattern.matcher(text);\n-\n-        while (regexMatcher.find()) {\n-            String group = regexMatcher.group();\n-            String replacement;\n-\n-            switch (group) {\n-                case \"\\\\t\":\n-                    replacement = \"\\t\";\n-                    break;\n-                case \"\\\\b\":\n-                    replacement = \"\\b\";\n-                    break;\n-                case \"\\\\f\":\n-                    replacement = \"\\f\";\n-                    break;\n-                case \"\\\\n\":\n-                    replacement = \"\\n\";\n-                    break;\n-                case \"\\\\r\":\n-                    replacement = \"\\r\";\n-                    break;\n-                case \"\\\\\\\"\":\n-                    replacement = \"\\\"\";\n-                    break;\n-                case \"\\\\'\":\n-                    replacement = \"'\";\n-                    break;\n-                case \"\\\\\\\\\":\n-                    // will be interpreted as regex, so we have to escape it\n-                    replacement = \"\\\\\\\\\";\n-                    break;\n-                default:\n-                    // unknown escape sequence, pass through as-is\n-                    replacement = group;\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (int i = 0; i < text.length();) {\n+            if (text.charAt(i) == '\\\\') {\n+                switch (text.charAt(++i)) {\n+                    case 't':\n+                        sb.append('\\t');\n+                        break;\n+                    case 'b':\n+                        sb.append('\\b');\n+                        break;\n+                    case 'f':\n+                        sb.append('\\f');\n+                        break;\n+                    case 'n':\n+                        sb.append('\\n');\n+                        break;\n+                    case 'r':\n+                        sb.append('\\r');\n+                        break;\n+                    case '\"':\n+                        sb.append('\\\"');\n+                        break;\n+                    case '\\'':\n+                        sb.append('\\'');\n+                        break;\n+                    case 'u':\n+                        i = handleUnicodeChars(source, sb, text, ++i);\n+                        break;\n+                    case '\\\\':\n+                        sb.append('\\\\');\n+                        // will be interpreted as regex, so we have to escape it\n+                        break;\n+                    default:\n+                        // unknown escape sequence, pass through as-is\n+                        sb.append('\\\\').append(text.charAt(i));\n+                }\n+                i++;\n+            } else {\n+                sb.append(text.charAt(i++));\n             }\n+        }\n+        return sb.toString();\n+    }\n \n-            regexMatcher.appendReplacement(resultString, replacement);\n-\n+    private static int handleUnicodeChars(Source source, StringBuilder sb, String text, int i) {\n+        String unicodeSequence;\n+        if (text.charAt(i) == '{') {\n+            int endIdx = text.indexOf('}', ++i);\n+            unicodeSequence = text.substring(i, endIdx);\n+            int length = unicodeSequence.length();\n+            if (length < 2 || length > 8) {\n+                throw new ParsingException(source, \"Unicode sequence in curly braces should use [2-8] hex digits, [{}] has [{}]\",\n+                        text.substring(i - 3, endIdx + 1), length);\n+            }\n+            i = endIdx;\n+        } else {\n+            unicodeSequence = text.substring(i, i + 4);\n+            i += 3;\n         }\n-        regexMatcher.appendTail(resultString);\n+        sb.append(hexToUnicode(source, unicodeSequence));\n+        return i;\n+    }\n \n-        return resultString.toString();\n+    private static String hexToUnicode(Source source, String hex) {\n+        try {\n+            return String.valueOf(Character.toChars(Integer.parseInt(hex, 16)));\n+        } catch (IllegalArgumentException e) {\n+            throw new ParsingException(source, \"Invalid unicode character code [{}]\", hex);\n+        }\n     }\n \n     private static void checkForSingleQuotedString(Source source, String text, int i) {"
  },
  {
    "sha": "2e73f3a62aaa19ebb425d0e36ccf39d3e192d624",
    "filename": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseLexer.java",
    "status": "modified",
    "additions": 176,
    "deletions": 161,
    "changes": 337,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseLexer.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseLexer.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseLexer.java?ref=0dcb1c325dc410aa9d03fab481ea0ee4da936857",
    "patch": "@@ -33,9 +33,10 @@\n     \"MAXSPAN\", \"NOT\", \"NULL\", \"OF\", \"OR\", \"REGEX\", \"REGEX_INSENSITIVE\", \"SEQUENCE\", \n     \"TRUE\", \"UNTIL\", \"WHERE\", \"WITH\", \"SEQ\", \"ASGN\", \"EQ\", \"NEQ\", \"LT\", \"LTE\", \n     \"GT\", \"GTE\", \"PLUS\", \"MINUS\", \"ASTERISK\", \"SLASH\", \"PERCENT\", \"DOT\", \"COMMA\", \n-    \"LB\", \"RB\", \"LP\", \"RP\", \"PIPE\", \"STRING\", \"INTEGER_VALUE\", \"DECIMAL_VALUE\", \n-    \"IDENTIFIER\", \"QUOTED_IDENTIFIER\", \"TILDE_IDENTIFIER\", \"EXPONENT\", \"DIGIT\", \n-    \"LETTER\", \"LINE_COMMENT\", \"BRACKETED_COMMENT\", \"WS\"\n+    \"LB\", \"RB\", \"LP\", \"RP\", \"PIPE\", \"STRING_ESCAPE\", \"HEX_DIGIT\", \"UNICODE_ESCAPE\", \n+    \"UNESCAPED_CHARS\", \"STRING\", \"INTEGER_VALUE\", \"DECIMAL_VALUE\", \"IDENTIFIER\", \n+    \"QUOTED_IDENTIFIER\", \"TILDE_IDENTIFIER\", \"EXPONENT\", \"DIGIT\", \"LETTER\", \n+    \"LINE_COMMENT\", \"BRACKETED_COMMENT\", \"WS\"\n   };\n \n   private static final String[] _LITERAL_NAMES = {\n@@ -109,170 +110,184 @@ public EqlBaseLexer(CharStream input) {\n   public ATN getATN() { return _ATN; }\n \n   public static final String _serializedATN =\n-    \"\\3\\u0430\\ud6d1\\u8206\\uad2d\\u4417\\uaef1\\u8d80\\uaadd\\2\\64\\u01cd\\b\\1\\4\\2\"+\n+    \"\\3\\u0430\\ud6d1\\u8206\\uad2d\\u4417\\uaef1\\u8d80\\uaadd\\2\\64\\u01f1\\b\\1\\4\\2\"+\n     \"\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\"+\n     \"\\13\\t\\13\\4\\f\\t\\f\\4\\r\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\"+\n     \"\\t\\22\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\\30\\t\\30\\4\\31\"+\n     \"\\t\\31\\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\t\\34\\4\\35\\t\\35\\4\\36\\t\\36\\4\\37\\t\\37\\4 \\t\"+\n     \" \\4!\\t!\\4\\\"\\t\\\"\\4#\\t#\\4$\\t$\\4%\\t%\\4&\\t&\\4\\'\\t\\'\\4(\\t(\\4)\\t)\\4*\\t*\\4+\\t\"+\n     \"+\\4,\\t,\\4-\\t-\\4.\\t.\\4/\\t/\\4\\60\\t\\60\\4\\61\\t\\61\\4\\62\\t\\62\\4\\63\\t\\63\\4\\64\"+\n-    \"\\t\\64\\4\\65\\t\\65\\4\\66\\t\\66\\3\\2\\3\\2\\3\\2\\3\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3\\4\\3\\4\\3\\4\"+\n-    \"\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\6\\3\\6\\3\\6\\3\\7\\3\\7\\3\\7\\3\\7\\3\\b\\3\\b\\3\\b\\3\\b\\3\"+\n-    \"\\b\\3\\t\\3\\t\\3\\t\\3\\t\\3\\t\\3\\n\\3\\n\\3\\n\\3\\n\\3\\n\\3\\n\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\"+\n-    \"\\3\\13\\3\\13\\3\\13\\3\\f\\3\\f\\3\\f\\3\\f\\3\\r\\3\\r\\3\\r\\3\\r\\3\\r\\3\\16\\3\\16\\3\\16\\3\\17\"+\n-    \"\\3\\17\\3\\17\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\"+\n-    \"\\3\\21\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\23\\3\\23\\3\\23\\3\\23\"+\n-    \"\\3\\23\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\26\"+\n-    \"\\3\\26\\3\\26\\3\\26\\3\\26\\3\\27\\3\\27\\3\\30\\3\\30\\3\\31\\3\\31\\3\\31\\3\\32\\3\\32\\3\\32\"+\n-    \"\\3\\33\\3\\33\\3\\34\\3\\34\\3\\34\\3\\35\\3\\35\\3\\36\\3\\36\\3\\36\\3\\37\\3\\37\\3 \\3 \\3!\"+\n-    \"\\3!\\3\\\"\\3\\\"\\3#\\3#\\3$\\3$\\3%\\3%\\3&\\3&\\3\\'\\3\\'\\3(\\3(\\3)\\3)\\3*\\3*\\3+\\3+\\3\"+\n-    \"+\\3+\\7+\\u0109\\n+\\f+\\16+\\u010c\\13+\\3+\\3+\\3+\\3+\\3+\\7+\\u0113\\n+\\f+\\16+\\u0116\"+\n-    \"\\13+\\3+\\3+\\3+\\3+\\3+\\3+\\3+\\7+\\u011f\\n+\\f+\\16+\\u0122\\13+\\3+\\3+\\3+\\3+\\3+\"+\n-    \"\\3+\\3+\\7+\\u012b\\n+\\f+\\16+\\u012e\\13+\\3+\\3+\\3+\\3+\\3+\\3+\\7+\\u0136\\n+\\f+\\16\"+\n-    \"+\\u0139\\13+\\3+\\3+\\3+\\3+\\3+\\5+\\u0140\\n+\\3+\\5+\\u0143\\n+\\5+\\u0145\\n+\\3,\\6\"+\n-    \",\\u0148\\n,\\r,\\16,\\u0149\\3-\\6-\\u014d\\n-\\r-\\16-\\u014e\\3-\\3-\\7-\\u0153\\n-\"+\n-    \"\\f-\\16-\\u0156\\13-\\3-\\3-\\6-\\u015a\\n-\\r-\\16-\\u015b\\3-\\6-\\u015f\\n-\\r-\\16\"+\n-    \"-\\u0160\\3-\\3-\\7-\\u0165\\n-\\f-\\16-\\u0168\\13-\\5-\\u016a\\n-\\3-\\3-\\3-\\3-\\6-\"+\n-    \"\\u0170\\n-\\r-\\16-\\u0171\\3-\\3-\\5-\\u0176\\n-\\3.\\3.\\5.\\u017a\\n.\\3.\\3.\\3.\\7\"+\n-    \".\\u017f\\n.\\f.\\16.\\u0182\\13.\\3/\\3/\\3/\\3/\\7/\\u0188\\n/\\f/\\16/\\u018b\\13/\\3\"+\n-    \"/\\3/\\3\\60\\3\\60\\3\\60\\3\\60\\7\\60\\u0193\\n\\60\\f\\60\\16\\60\\u0196\\13\\60\\3\\60\\3\"+\n-    \"\\60\\3\\61\\3\\61\\5\\61\\u019c\\n\\61\\3\\61\\6\\61\\u019f\\n\\61\\r\\61\\16\\61\\u01a0\\3\"+\n-    \"\\62\\3\\62\\3\\63\\3\\63\\3\\64\\3\\64\\3\\64\\3\\64\\7\\64\\u01ab\\n\\64\\f\\64\\16\\64\\u01ae\"+\n-    \"\\13\\64\\3\\64\\5\\64\\u01b1\\n\\64\\3\\64\\5\\64\\u01b4\\n\\64\\3\\64\\3\\64\\3\\65\\3\\65\\3\"+\n-    \"\\65\\3\\65\\3\\65\\7\\65\\u01bd\\n\\65\\f\\65\\16\\65\\u01c0\\13\\65\\3\\65\\3\\65\\3\\65\\3\"+\n-    \"\\65\\3\\65\\3\\66\\6\\66\\u01c8\\n\\66\\r\\66\\16\\66\\u01c9\\3\\66\\3\\66\\4\\u0137\\u01be\"+\n-    \"\\2\\67\\3\\3\\5\\4\\7\\5\\t\\6\\13\\7\\r\\b\\17\\t\\21\\n\\23\\13\\25\\f\\27\\r\\31\\16\\33\\17\\35\"+\n-    \"\\20\\37\\21!\\22#\\23%\\24\\'\\25)\\26+\\27-\\30/\\31\\61\\32\\63\\33\\65\\34\\67\\359\\36\"+\n-    \";\\37= ?!A\\\"C#E$G%I&K\\'M(O)Q*S+U,W-Y.[/]\\60_\\61a\\2c\\2e\\2g\\62i\\63k\\64\\3\"+\n-    \"\\2\\17\\n\\2$$))^^ddhhppttvv\\6\\2\\f\\f\\17\\17))^^\\6\\2\\f\\f\\17\\17$$^^\\5\\2\\f\\f\"+\n-    \"\\17\\17$$\\5\\2\\f\\f\\17\\17))\\4\\2\\f\\f\\17\\17\\4\\2BBaa\\3\\2bb\\4\\2GGgg\\4\\2--//\\3\"+\n-    \"\\2\\62;\\4\\2C\\\\c|\\5\\2\\13\\f\\17\\17\\\"\\\"\\u01f4\\2\\3\\3\\2\\2\\2\\2\\5\\3\\2\\2\\2\\2\\7\\3\"+\n-    \"\\2\\2\\2\\2\\t\\3\\2\\2\\2\\2\\13\\3\\2\\2\\2\\2\\r\\3\\2\\2\\2\\2\\17\\3\\2\\2\\2\\2\\21\\3\\2\\2\\2\"+\n-    \"\\2\\23\\3\\2\\2\\2\\2\\25\\3\\2\\2\\2\\2\\27\\3\\2\\2\\2\\2\\31\\3\\2\\2\\2\\2\\33\\3\\2\\2\\2\\2\\35\"+\n-    \"\\3\\2\\2\\2\\2\\37\\3\\2\\2\\2\\2!\\3\\2\\2\\2\\2#\\3\\2\\2\\2\\2%\\3\\2\\2\\2\\2\\'\\3\\2\\2\\2\\2)\"+\n-    \"\\3\\2\\2\\2\\2+\\3\\2\\2\\2\\2-\\3\\2\\2\\2\\2/\\3\\2\\2\\2\\2\\61\\3\\2\\2\\2\\2\\63\\3\\2\\2\\2\\2\"+\n-    \"\\65\\3\\2\\2\\2\\2\\67\\3\\2\\2\\2\\29\\3\\2\\2\\2\\2;\\3\\2\\2\\2\\2=\\3\\2\\2\\2\\2?\\3\\2\\2\\2\\2\"+\n-    \"A\\3\\2\\2\\2\\2C\\3\\2\\2\\2\\2E\\3\\2\\2\\2\\2G\\3\\2\\2\\2\\2I\\3\\2\\2\\2\\2K\\3\\2\\2\\2\\2M\\3\"+\n-    \"\\2\\2\\2\\2O\\3\\2\\2\\2\\2Q\\3\\2\\2\\2\\2S\\3\\2\\2\\2\\2U\\3\\2\\2\\2\\2W\\3\\2\\2\\2\\2Y\\3\\2\\2\"+\n-    \"\\2\\2[\\3\\2\\2\\2\\2]\\3\\2\\2\\2\\2_\\3\\2\\2\\2\\2g\\3\\2\\2\\2\\2i\\3\\2\\2\\2\\2k\\3\\2\\2\\2\\3\"+\n-    \"m\\3\\2\\2\\2\\5q\\3\\2\\2\\2\\7u\\3\\2\\2\\2\\tx\\3\\2\\2\\2\\13~\\3\\2\\2\\2\\r\\u0081\\3\\2\\2\\2\"+\n-    \"\\17\\u0085\\3\\2\\2\\2\\21\\u008a\\3\\2\\2\\2\\23\\u008f\\3\\2\\2\\2\\25\\u0095\\3\\2\\2\\2\\27\"+\n-    \"\\u009d\\3\\2\\2\\2\\31\\u00a1\\3\\2\\2\\2\\33\\u00a6\\3\\2\\2\\2\\35\\u00a9\\3\\2\\2\\2\\37\\u00ac\"+\n-    \"\\3\\2\\2\\2!\\u00b2\\3\\2\\2\\2#\\u00b9\\3\\2\\2\\2%\\u00c2\\3\\2\\2\\2\\'\\u00c7\\3\\2\\2\\2\"+\n-    \")\\u00cd\\3\\2\\2\\2+\\u00d3\\3\\2\\2\\2-\\u00d8\\3\\2\\2\\2/\\u00da\\3\\2\\2\\2\\61\\u00dc\"+\n-    \"\\3\\2\\2\\2\\63\\u00df\\3\\2\\2\\2\\65\\u00e2\\3\\2\\2\\2\\67\\u00e4\\3\\2\\2\\29\\u00e7\\3\\2\"+\n-    \"\\2\\2;\\u00e9\\3\\2\\2\\2=\\u00ec\\3\\2\\2\\2?\\u00ee\\3\\2\\2\\2A\\u00f0\\3\\2\\2\\2C\\u00f2\"+\n-    \"\\3\\2\\2\\2E\\u00f4\\3\\2\\2\\2G\\u00f6\\3\\2\\2\\2I\\u00f8\\3\\2\\2\\2K\\u00fa\\3\\2\\2\\2M\"+\n-    \"\\u00fc\\3\\2\\2\\2O\\u00fe\\3\\2\\2\\2Q\\u0100\\3\\2\\2\\2S\\u0102\\3\\2\\2\\2U\\u0144\\3\\2\"+\n-    \"\\2\\2W\\u0147\\3\\2\\2\\2Y\\u0175\\3\\2\\2\\2[\\u0179\\3\\2\\2\\2]\\u0183\\3\\2\\2\\2_\\u018e\"+\n-    \"\\3\\2\\2\\2a\\u0199\\3\\2\\2\\2c\\u01a2\\3\\2\\2\\2e\\u01a4\\3\\2\\2\\2g\\u01a6\\3\\2\\2\\2i\"+\n-    \"\\u01b7\\3\\2\\2\\2k\\u01c7\\3\\2\\2\\2mn\\7c\\2\\2no\\7p\\2\\2op\\7f\\2\\2p\\4\\3\\2\\2\\2qr\"+\n-    \"\\7c\\2\\2rs\\7p\\2\\2st\\7{\\2\\2t\\6\\3\\2\\2\\2uv\\7d\\2\\2vw\\7{\\2\\2w\\b\\3\\2\\2\\2xy\\7\"+\n-    \"h\\2\\2yz\\7c\\2\\2z{\\7n\\2\\2{|\\7u\\2\\2|}\\7g\\2\\2}\\n\\3\\2\\2\\2~\\177\\7k\\2\\2\\177\\u0080\"+\n-    \"\\7p\\2\\2\\u0080\\f\\3\\2\\2\\2\\u0081\\u0082\\7k\\2\\2\\u0082\\u0083\\7p\\2\\2\\u0083\\u0084\"+\n-    \"\\7\\u0080\\2\\2\\u0084\\16\\3\\2\\2\\2\\u0085\\u0086\\7l\\2\\2\\u0086\\u0087\\7q\\2\\2\\u0087\"+\n-    \"\\u0088\\7k\\2\\2\\u0088\\u0089\\7p\\2\\2\\u0089\\20\\3\\2\\2\\2\\u008a\\u008b\\7n\\2\\2\\u008b\"+\n-    \"\\u008c\\7k\\2\\2\\u008c\\u008d\\7m\\2\\2\\u008d\\u008e\\7g\\2\\2\\u008e\\22\\3\\2\\2\\2\\u008f\"+\n-    \"\\u0090\\7n\\2\\2\\u0090\\u0091\\7k\\2\\2\\u0091\\u0092\\7m\\2\\2\\u0092\\u0093\\7g\\2\\2\"+\n-    \"\\u0093\\u0094\\7\\u0080\\2\\2\\u0094\\24\\3\\2\\2\\2\\u0095\\u0096\\7o\\2\\2\\u0096\\u0097\"+\n-    \"\\7c\\2\\2\\u0097\\u0098\\7z\\2\\2\\u0098\\u0099\\7u\\2\\2\\u0099\\u009a\\7r\\2\\2\\u009a\"+\n-    \"\\u009b\\7c\\2\\2\\u009b\\u009c\\7p\\2\\2\\u009c\\26\\3\\2\\2\\2\\u009d\\u009e\\7p\\2\\2\\u009e\"+\n-    \"\\u009f\\7q\\2\\2\\u009f\\u00a0\\7v\\2\\2\\u00a0\\30\\3\\2\\2\\2\\u00a1\\u00a2\\7p\\2\\2\\u00a2\"+\n-    \"\\u00a3\\7w\\2\\2\\u00a3\\u00a4\\7n\\2\\2\\u00a4\\u00a5\\7n\\2\\2\\u00a5\\32\\3\\2\\2\\2\\u00a6\"+\n-    \"\\u00a7\\7q\\2\\2\\u00a7\\u00a8\\7h\\2\\2\\u00a8\\34\\3\\2\\2\\2\\u00a9\\u00aa\\7q\\2\\2\\u00aa\"+\n-    \"\\u00ab\\7t\\2\\2\\u00ab\\36\\3\\2\\2\\2\\u00ac\\u00ad\\7t\\2\\2\\u00ad\\u00ae\\7g\\2\\2\\u00ae\"+\n-    \"\\u00af\\7i\\2\\2\\u00af\\u00b0\\7g\\2\\2\\u00b0\\u00b1\\7z\\2\\2\\u00b1 \\3\\2\\2\\2\\u00b2\"+\n-    \"\\u00b3\\7t\\2\\2\\u00b3\\u00b4\\7g\\2\\2\\u00b4\\u00b5\\7i\\2\\2\\u00b5\\u00b6\\7g\\2\\2\"+\n-    \"\\u00b6\\u00b7\\7z\\2\\2\\u00b7\\u00b8\\7\\u0080\\2\\2\\u00b8\\\"\\3\\2\\2\\2\\u00b9\\u00ba\"+\n-    \"\\7u\\2\\2\\u00ba\\u00bb\\7g\\2\\2\\u00bb\\u00bc\\7s\\2\\2\\u00bc\\u00bd\\7w\\2\\2\\u00bd\"+\n-    \"\\u00be\\7g\\2\\2\\u00be\\u00bf\\7p\\2\\2\\u00bf\\u00c0\\7e\\2\\2\\u00c0\\u00c1\\7g\\2\\2\"+\n-    \"\\u00c1$\\3\\2\\2\\2\\u00c2\\u00c3\\7v\\2\\2\\u00c3\\u00c4\\7t\\2\\2\\u00c4\\u00c5\\7w\\2\"+\n-    \"\\2\\u00c5\\u00c6\\7g\\2\\2\\u00c6&\\3\\2\\2\\2\\u00c7\\u00c8\\7w\\2\\2\\u00c8\\u00c9\\7\"+\n-    \"p\\2\\2\\u00c9\\u00ca\\7v\\2\\2\\u00ca\\u00cb\\7k\\2\\2\\u00cb\\u00cc\\7n\\2\\2\\u00cc(\"+\n-    \"\\3\\2\\2\\2\\u00cd\\u00ce\\7y\\2\\2\\u00ce\\u00cf\\7j\\2\\2\\u00cf\\u00d0\\7g\\2\\2\\u00d0\"+\n-    \"\\u00d1\\7t\\2\\2\\u00d1\\u00d2\\7g\\2\\2\\u00d2*\\3\\2\\2\\2\\u00d3\\u00d4\\7y\\2\\2\\u00d4\"+\n-    \"\\u00d5\\7k\\2\\2\\u00d5\\u00d6\\7v\\2\\2\\u00d6\\u00d7\\7j\\2\\2\\u00d7,\\3\\2\\2\\2\\u00d8\"+\n-    \"\\u00d9\\7<\\2\\2\\u00d9.\\3\\2\\2\\2\\u00da\\u00db\\7?\\2\\2\\u00db\\60\\3\\2\\2\\2\\u00dc\"+\n-    \"\\u00dd\\7?\\2\\2\\u00dd\\u00de\\7?\\2\\2\\u00de\\62\\3\\2\\2\\2\\u00df\\u00e0\\7#\\2\\2\\u00e0\"+\n-    \"\\u00e1\\7?\\2\\2\\u00e1\\64\\3\\2\\2\\2\\u00e2\\u00e3\\7>\\2\\2\\u00e3\\66\\3\\2\\2\\2\\u00e4\"+\n-    \"\\u00e5\\7>\\2\\2\\u00e5\\u00e6\\7?\\2\\2\\u00e68\\3\\2\\2\\2\\u00e7\\u00e8\\7@\\2\\2\\u00e8\"+\n-    \":\\3\\2\\2\\2\\u00e9\\u00ea\\7@\\2\\2\\u00ea\\u00eb\\7?\\2\\2\\u00eb<\\3\\2\\2\\2\\u00ec\\u00ed\"+\n-    \"\\7-\\2\\2\\u00ed>\\3\\2\\2\\2\\u00ee\\u00ef\\7/\\2\\2\\u00ef@\\3\\2\\2\\2\\u00f0\\u00f1\\7\"+\n-    \",\\2\\2\\u00f1B\\3\\2\\2\\2\\u00f2\\u00f3\\7\\61\\2\\2\\u00f3D\\3\\2\\2\\2\\u00f4\\u00f5\\7\"+\n-    \"\\'\\2\\2\\u00f5F\\3\\2\\2\\2\\u00f6\\u00f7\\7\\60\\2\\2\\u00f7H\\3\\2\\2\\2\\u00f8\\u00f9\"+\n-    \"\\7.\\2\\2\\u00f9J\\3\\2\\2\\2\\u00fa\\u00fb\\7]\\2\\2\\u00fbL\\3\\2\\2\\2\\u00fc\\u00fd\\7\"+\n-    \"_\\2\\2\\u00fdN\\3\\2\\2\\2\\u00fe\\u00ff\\7*\\2\\2\\u00ffP\\3\\2\\2\\2\\u0100\\u0101\\7+\"+\n-    \"\\2\\2\\u0101R\\3\\2\\2\\2\\u0102\\u0103\\7~\\2\\2\\u0103T\\3\\2\\2\\2\\u0104\\u010a\\7)\\2\"+\n-    \"\\2\\u0105\\u0106\\7^\\2\\2\\u0106\\u0109\\t\\2\\2\\2\\u0107\\u0109\\n\\3\\2\\2\\u0108\\u0105\"+\n-    \"\\3\\2\\2\\2\\u0108\\u0107\\3\\2\\2\\2\\u0109\\u010c\\3\\2\\2\\2\\u010a\\u0108\\3\\2\\2\\2\\u010a\"+\n-    \"\\u010b\\3\\2\\2\\2\\u010b\\u010d\\3\\2\\2\\2\\u010c\\u010a\\3\\2\\2\\2\\u010d\\u0145\\7)\"+\n-    \"\\2\\2\\u010e\\u0114\\7$\\2\\2\\u010f\\u0110\\7^\\2\\2\\u0110\\u0113\\t\\2\\2\\2\\u0111\\u0113\"+\n-    \"\\n\\4\\2\\2\\u0112\\u010f\\3\\2\\2\\2\\u0112\\u0111\\3\\2\\2\\2\\u0113\\u0116\\3\\2\\2\\2\\u0114\"+\n-    \"\\u0112\\3\\2\\2\\2\\u0114\\u0115\\3\\2\\2\\2\\u0115\\u0117\\3\\2\\2\\2\\u0116\\u0114\\3\\2\"+\n-    \"\\2\\2\\u0117\\u0145\\7$\\2\\2\\u0118\\u0119\\7A\\2\\2\\u0119\\u011a\\7$\\2\\2\\u011a\\u0120\"+\n-    \"\\3\\2\\2\\2\\u011b\\u011c\\7^\\2\\2\\u011c\\u011f\\7$\\2\\2\\u011d\\u011f\\n\\5\\2\\2\\u011e\"+\n-    \"\\u011b\\3\\2\\2\\2\\u011e\\u011d\\3\\2\\2\\2\\u011f\\u0122\\3\\2\\2\\2\\u0120\\u011e\\3\\2\"+\n-    \"\\2\\2\\u0120\\u0121\\3\\2\\2\\2\\u0121\\u0123\\3\\2\\2\\2\\u0122\\u0120\\3\\2\\2\\2\\u0123\"+\n-    \"\\u0145\\7$\\2\\2\\u0124\\u0125\\7A\\2\\2\\u0125\\u0126\\7)\\2\\2\\u0126\\u012c\\3\\2\\2\"+\n-    \"\\2\\u0127\\u0128\\7^\\2\\2\\u0128\\u012b\\7)\\2\\2\\u0129\\u012b\\n\\6\\2\\2\\u012a\\u0127\"+\n-    \"\\3\\2\\2\\2\\u012a\\u0129\\3\\2\\2\\2\\u012b\\u012e\\3\\2\\2\\2\\u012c\\u012a\\3\\2\\2\\2\\u012c\"+\n-    \"\\u012d\\3\\2\\2\\2\\u012d\\u012f\\3\\2\\2\\2\\u012e\\u012c\\3\\2\\2\\2\\u012f\\u0145\\7)\"+\n-    \"\\2\\2\\u0130\\u0131\\7$\\2\\2\\u0131\\u0132\\7$\\2\\2\\u0132\\u0133\\7$\\2\\2\\u0133\\u0137\"+\n-    \"\\3\\2\\2\\2\\u0134\\u0136\\n\\7\\2\\2\\u0135\\u0134\\3\\2\\2\\2\\u0136\\u0139\\3\\2\\2\\2\\u0137\"+\n-    \"\\u0138\\3\\2\\2\\2\\u0137\\u0135\\3\\2\\2\\2\\u0138\\u013a\\3\\2\\2\\2\\u0139\\u0137\\3\\2\"+\n-    \"\\2\\2\\u013a\\u013b\\7$\\2\\2\\u013b\\u013c\\7$\\2\\2\\u013c\\u013d\\7$\\2\\2\\u013d\\u013f\"+\n-    \"\\3\\2\\2\\2\\u013e\\u0140\\7$\\2\\2\\u013f\\u013e\\3\\2\\2\\2\\u013f\\u0140\\3\\2\\2\\2\\u0140\"+\n-    \"\\u0142\\3\\2\\2\\2\\u0141\\u0143\\7$\\2\\2\\u0142\\u0141\\3\\2\\2\\2\\u0142\\u0143\\3\\2\"+\n-    \"\\2\\2\\u0143\\u0145\\3\\2\\2\\2\\u0144\\u0104\\3\\2\\2\\2\\u0144\\u010e\\3\\2\\2\\2\\u0144\"+\n-    \"\\u0118\\3\\2\\2\\2\\u0144\\u0124\\3\\2\\2\\2\\u0144\\u0130\\3\\2\\2\\2\\u0145V\\3\\2\\2\\2\"+\n-    \"\\u0146\\u0148\\5c\\62\\2\\u0147\\u0146\\3\\2\\2\\2\\u0148\\u0149\\3\\2\\2\\2\\u0149\\u0147\"+\n-    \"\\3\\2\\2\\2\\u0149\\u014a\\3\\2\\2\\2\\u014aX\\3\\2\\2\\2\\u014b\\u014d\\5c\\62\\2\\u014c\"+\n-    \"\\u014b\\3\\2\\2\\2\\u014d\\u014e\\3\\2\\2\\2\\u014e\\u014c\\3\\2\\2\\2\\u014e\\u014f\\3\\2\"+\n-    \"\\2\\2\\u014f\\u0150\\3\\2\\2\\2\\u0150\\u0154\\5G$\\2\\u0151\\u0153\\5c\\62\\2\\u0152\\u0151\"+\n-    \"\\3\\2\\2\\2\\u0153\\u0156\\3\\2\\2\\2\\u0154\\u0152\\3\\2\\2\\2\\u0154\\u0155\\3\\2\\2\\2\\u0155\"+\n-    \"\\u0176\\3\\2\\2\\2\\u0156\\u0154\\3\\2\\2\\2\\u0157\\u0159\\5G$\\2\\u0158\\u015a\\5c\\62\"+\n-    \"\\2\\u0159\\u0158\\3\\2\\2\\2\\u015a\\u015b\\3\\2\\2\\2\\u015b\\u0159\\3\\2\\2\\2\\u015b\\u015c\"+\n-    \"\\3\\2\\2\\2\\u015c\\u0176\\3\\2\\2\\2\\u015d\\u015f\\5c\\62\\2\\u015e\\u015d\\3\\2\\2\\2\\u015f\"+\n-    \"\\u0160\\3\\2\\2\\2\\u0160\\u015e\\3\\2\\2\\2\\u0160\\u0161\\3\\2\\2\\2\\u0161\\u0169\\3\\2\"+\n-    \"\\2\\2\\u0162\\u0166\\5G$\\2\\u0163\\u0165\\5c\\62\\2\\u0164\\u0163\\3\\2\\2\\2\\u0165\\u0168\"+\n-    \"\\3\\2\\2\\2\\u0166\\u0164\\3\\2\\2\\2\\u0166\\u0167\\3\\2\\2\\2\\u0167\\u016a\\3\\2\\2\\2\\u0168\"+\n-    \"\\u0166\\3\\2\\2\\2\\u0169\\u0162\\3\\2\\2\\2\\u0169\\u016a\\3\\2\\2\\2\\u016a\\u016b\\3\\2\"+\n-    \"\\2\\2\\u016b\\u016c\\5a\\61\\2\\u016c\\u0176\\3\\2\\2\\2\\u016d\\u016f\\5G$\\2\\u016e\\u0170\"+\n-    \"\\5c\\62\\2\\u016f\\u016e\\3\\2\\2\\2\\u0170\\u0171\\3\\2\\2\\2\\u0171\\u016f\\3\\2\\2\\2\\u0171\"+\n-    \"\\u0172\\3\\2\\2\\2\\u0172\\u0173\\3\\2\\2\\2\\u0173\\u0174\\5a\\61\\2\\u0174\\u0176\\3\\2\"+\n-    \"\\2\\2\\u0175\\u014c\\3\\2\\2\\2\\u0175\\u0157\\3\\2\\2\\2\\u0175\\u015e\\3\\2\\2\\2\\u0175\"+\n-    \"\\u016d\\3\\2\\2\\2\\u0176Z\\3\\2\\2\\2\\u0177\\u017a\\5e\\63\\2\\u0178\\u017a\\t\\b\\2\\2\"+\n-    \"\\u0179\\u0177\\3\\2\\2\\2\\u0179\\u0178\\3\\2\\2\\2\\u017a\\u0180\\3\\2\\2\\2\\u017b\\u017f\"+\n-    \"\\5e\\63\\2\\u017c\\u017f\\5c\\62\\2\\u017d\\u017f\\7a\\2\\2\\u017e\\u017b\\3\\2\\2\\2\\u017e\"+\n-    \"\\u017c\\3\\2\\2\\2\\u017e\\u017d\\3\\2\\2\\2\\u017f\\u0182\\3\\2\\2\\2\\u0180\\u017e\\3\\2\"+\n-    \"\\2\\2\\u0180\\u0181\\3\\2\\2\\2\\u0181\\\\\\3\\2\\2\\2\\u0182\\u0180\\3\\2\\2\\2\\u0183\\u0189\"+\n-    \"\\7b\\2\\2\\u0184\\u0188\\n\\t\\2\\2\\u0185\\u0186\\7b\\2\\2\\u0186\\u0188\\7b\\2\\2\\u0187\"+\n-    \"\\u0184\\3\\2\\2\\2\\u0187\\u0185\\3\\2\\2\\2\\u0188\\u018b\\3\\2\\2\\2\\u0189\\u0187\\3\\2\"+\n-    \"\\2\\2\\u0189\\u018a\\3\\2\\2\\2\\u018a\\u018c\\3\\2\\2\\2\\u018b\\u0189\\3\\2\\2\\2\\u018c\"+\n-    \"\\u018d\\7b\\2\\2\\u018d^\\3\\2\\2\\2\\u018e\\u0194\\5e\\63\\2\\u018f\\u0193\\5e\\63\\2\\u0190\"+\n-    \"\\u0193\\5c\\62\\2\\u0191\\u0193\\7a\\2\\2\\u0192\\u018f\\3\\2\\2\\2\\u0192\\u0190\\3\\2\"+\n-    \"\\2\\2\\u0192\\u0191\\3\\2\\2\\2\\u0193\\u0196\\3\\2\\2\\2\\u0194\\u0192\\3\\2\\2\\2\\u0194\"+\n-    \"\\u0195\\3\\2\\2\\2\\u0195\\u0197\\3\\2\\2\\2\\u0196\\u0194\\3\\2\\2\\2\\u0197\\u0198\\7\\u0080\"+\n-    \"\\2\\2\\u0198`\\3\\2\\2\\2\\u0199\\u019b\\t\\n\\2\\2\\u019a\\u019c\\t\\13\\2\\2\\u019b\\u019a\"+\n-    \"\\3\\2\\2\\2\\u019b\\u019c\\3\\2\\2\\2\\u019c\\u019e\\3\\2\\2\\2\\u019d\\u019f\\5c\\62\\2\\u019e\"+\n-    \"\\u019d\\3\\2\\2\\2\\u019f\\u01a0\\3\\2\\2\\2\\u01a0\\u019e\\3\\2\\2\\2\\u01a0\\u01a1\\3\\2\"+\n-    \"\\2\\2\\u01a1b\\3\\2\\2\\2\\u01a2\\u01a3\\t\\f\\2\\2\\u01a3d\\3\\2\\2\\2\\u01a4\\u01a5\\t\\r\"+\n-    \"\\2\\2\\u01a5f\\3\\2\\2\\2\\u01a6\\u01a7\\7\\61\\2\\2\\u01a7\\u01a8\\7\\61\\2\\2\\u01a8\\u01ac\"+\n-    \"\\3\\2\\2\\2\\u01a9\\u01ab\\n\\7\\2\\2\\u01aa\\u01a9\\3\\2\\2\\2\\u01ab\\u01ae\\3\\2\\2\\2\\u01ac\"+\n-    \"\\u01aa\\3\\2\\2\\2\\u01ac\\u01ad\\3\\2\\2\\2\\u01ad\\u01b0\\3\\2\\2\\2\\u01ae\\u01ac\\3\\2\"+\n-    \"\\2\\2\\u01af\\u01b1\\7\\17\\2\\2\\u01b0\\u01af\\3\\2\\2\\2\\u01b0\\u01b1\\3\\2\\2\\2\\u01b1\"+\n-    \"\\u01b3\\3\\2\\2\\2\\u01b2\\u01b4\\7\\f\\2\\2\\u01b3\\u01b2\\3\\2\\2\\2\\u01b3\\u01b4\\3\\2\"+\n-    \"\\2\\2\\u01b4\\u01b5\\3\\2\\2\\2\\u01b5\\u01b6\\b\\64\\2\\2\\u01b6h\\3\\2\\2\\2\\u01b7\\u01b8\"+\n-    \"\\7\\61\\2\\2\\u01b8\\u01b9\\7,\\2\\2\\u01b9\\u01be\\3\\2\\2\\2\\u01ba\\u01bd\\5i\\65\\2\\u01bb\"+\n-    \"\\u01bd\\13\\2\\2\\2\\u01bc\\u01ba\\3\\2\\2\\2\\u01bc\\u01bb\\3\\2\\2\\2\\u01bd\\u01c0\\3\"+\n-    \"\\2\\2\\2\\u01be\\u01bf\\3\\2\\2\\2\\u01be\\u01bc\\3\\2\\2\\2\\u01bf\\u01c1\\3\\2\\2\\2\\u01c0\"+\n-    \"\\u01be\\3\\2\\2\\2\\u01c1\\u01c2\\7,\\2\\2\\u01c2\\u01c3\\7\\61\\2\\2\\u01c3\\u01c4\\3\\2\"+\n-    \"\\2\\2\\u01c4\\u01c5\\b\\65\\2\\2\\u01c5j\\3\\2\\2\\2\\u01c6\\u01c8\\t\\16\\2\\2\\u01c7\\u01c6\"+\n-    \"\\3\\2\\2\\2\\u01c8\\u01c9\\3\\2\\2\\2\\u01c9\\u01c7\\3\\2\\2\\2\\u01c9\\u01ca\\3\\2\\2\\2\\u01ca\"+\n-    \"\\u01cb\\3\\2\\2\\2\\u01cb\\u01cc\\b\\66\\2\\2\\u01ccl\\3\\2\\2\\2\\'\\2\\u0108\\u010a\\u0112\"+\n-    \"\\u0114\\u011e\\u0120\\u012a\\u012c\\u0137\\u013f\\u0142\\u0144\\u0149\\u014e\\u0154\"+\n-    \"\\u015b\\u0160\\u0166\\u0169\\u0171\\u0175\\u0179\\u017e\\u0180\\u0187\\u0189\\u0192\"+\n-    \"\\u0194\\u019b\\u01a0\\u01ac\\u01b0\\u01b3\\u01bc\\u01be\\u01c9\\3\\2\\3\\2\";\n+    \"\\t\\64\\4\\65\\t\\65\\4\\66\\t\\66\\4\\67\\t\\67\\48\\t8\\49\\t9\\4:\\t:\\3\\2\\3\\2\\3\\2\\3\\2\"+\n+    \"\\3\\3\\3\\3\\3\\3\\3\\3\\3\\4\\3\\4\\3\\4\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\6\\3\\6\\3\\6\\3\\7\\3\"+\n+    \"\\7\\3\\7\\3\\7\\3\\b\\3\\b\\3\\b\\3\\b\\3\\b\\3\\t\\3\\t\\3\\t\\3\\t\\3\\t\\3\\n\\3\\n\\3\\n\\3\\n\\3\\n\"+\n+    \"\\3\\n\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\\3\\f\\3\\f\\3\\f\\3\\f\\3\\r\\3\\r\\3\"+\n+    \"\\r\\3\\r\\3\\r\\3\\16\\3\\16\\3\\16\\3\\17\\3\\17\\3\\17\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\"+\n+    \"\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\"+\n+    \"\\3\\22\\3\\22\\3\\23\\3\\23\\3\\23\\3\\23\\3\\23\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\25\"+\n+    \"\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\26\\3\\26\\3\\26\\3\\26\\3\\26\\3\\27\\3\\27\\3\\30\\3\\30\"+\n+    \"\\3\\31\\3\\31\\3\\31\\3\\32\\3\\32\\3\\32\\3\\33\\3\\33\\3\\34\\3\\34\\3\\34\\3\\35\\3\\35\\3\\36\"+\n+    \"\\3\\36\\3\\36\\3\\37\\3\\37\\3 \\3 \\3!\\3!\\3\\\"\\3\\\"\\3#\\3#\\3$\\3$\\3%\\3%\\3&\\3&\\3\\'\\3\"+\n+    \"\\'\\3(\\3(\\3)\\3)\\3*\\3*\\3+\\3+\\3+\\3,\\3,\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3-\\3\"+\n+    \"-\\3-\\6-\\u011f\\n-\\r-\\16-\\u0120\\3-\\3-\\5-\\u0125\\n-\\3.\\3.\\3/\\3/\\3/\\3/\\7/\\u012d\"+\n+    \"\\n/\\f/\\16/\\u0130\\13/\\3/\\3/\\3/\\3/\\3/\\3/\\7/\\u0138\\n/\\f/\\16/\\u013b\\13/\\3\"+\n+    \"/\\3/\\3/\\3/\\3/\\5/\\u0142\\n/\\3/\\5/\\u0145\\n/\\3/\\3/\\3/\\3/\\7/\\u014b\\n/\\f/\\16\"+\n+    \"/\\u014e\\13/\\3/\\3/\\3/\\3/\\3/\\3/\\3/\\7/\\u0157\\n/\\f/\\16/\\u015a\\13/\\3/\\3/\\3\"+\n+    \"/\\3/\\3/\\3/\\3/\\7/\\u0163\\n/\\f/\\16/\\u0166\\13/\\3/\\5/\\u0169\\n/\\3\\60\\6\\60\\u016c\"+\n+    \"\\n\\60\\r\\60\\16\\60\\u016d\\3\\61\\6\\61\\u0171\\n\\61\\r\\61\\16\\61\\u0172\\3\\61\\3\\61\"+\n+    \"\\7\\61\\u0177\\n\\61\\f\\61\\16\\61\\u017a\\13\\61\\3\\61\\3\\61\\6\\61\\u017e\\n\\61\\r\\61\"+\n+    \"\\16\\61\\u017f\\3\\61\\6\\61\\u0183\\n\\61\\r\\61\\16\\61\\u0184\\3\\61\\3\\61\\7\\61\\u0189\"+\n+    \"\\n\\61\\f\\61\\16\\61\\u018c\\13\\61\\5\\61\\u018e\\n\\61\\3\\61\\3\\61\\3\\61\\3\\61\\6\\61\"+\n+    \"\\u0194\\n\\61\\r\\61\\16\\61\\u0195\\3\\61\\3\\61\\5\\61\\u019a\\n\\61\\3\\62\\3\\62\\5\\62\"+\n+    \"\\u019e\\n\\62\\3\\62\\3\\62\\3\\62\\7\\62\\u01a3\\n\\62\\f\\62\\16\\62\\u01a6\\13\\62\\3\\63\"+\n+    \"\\3\\63\\3\\63\\3\\63\\7\\63\\u01ac\\n\\63\\f\\63\\16\\63\\u01af\\13\\63\\3\\63\\3\\63\\3\\64\"+\n+    \"\\3\\64\\3\\64\\3\\64\\7\\64\\u01b7\\n\\64\\f\\64\\16\\64\\u01ba\\13\\64\\3\\64\\3\\64\\3\\65\"+\n+    \"\\3\\65\\5\\65\\u01c0\\n\\65\\3\\65\\6\\65\\u01c3\\n\\65\\r\\65\\16\\65\\u01c4\\3\\66\\3\\66\"+\n+    \"\\3\\67\\3\\67\\38\\38\\38\\38\\78\\u01cf\\n8\\f8\\168\\u01d2\\138\\38\\58\\u01d5\\n8\\38\"+\n+    \"\\58\\u01d8\\n8\\38\\38\\39\\39\\39\\39\\39\\79\\u01e1\\n9\\f9\\169\\u01e4\\139\\39\\39\\3\"+\n+    \"9\\39\\39\\3:\\6:\\u01ec\\n:\\r:\\16:\\u01ed\\3:\\3:\\4\\u0139\\u01e2\\2;\\3\\3\\5\\4\\7\\5\"+\n+    \"\\t\\6\\13\\7\\r\\b\\17\\t\\21\\n\\23\\13\\25\\f\\27\\r\\31\\16\\33\\17\\35\\20\\37\\21!\\22#\\23\"+\n+    \"%\\24\\'\\25)\\26+\\27-\\30/\\31\\61\\32\\63\\33\\65\\34\\67\\359\\36;\\37= ?!A\\\"C#E$G\"+\n+    \"%I&K\\'M(O)Q*S+U\\2W\\2Y\\2[\\2],_-a.c/e\\60g\\61i\\2k\\2m\\2o\\62q\\63s\\64\\3\\2\\20\"+\n+    \"\\n\\2$$))^^ddhhppttvv\\5\\2\\62;CHch\\6\\2\\f\\f\\17\\17$$^^\\4\\2\\f\\f\\17\\17\\6\\2\\f\"+\n+    \"\\f\\17\\17))^^\\5\\2\\f\\f\\17\\17$$\\5\\2\\f\\f\\17\\17))\\4\\2BBaa\\3\\2bb\\4\\2GGgg\\4\\2\"+\n+    \"--//\\3\\2\\62;\\4\\2C\\\\c|\\5\\2\\13\\f\\17\\17\\\"\\\"\\u0217\\2\\3\\3\\2\\2\\2\\2\\5\\3\\2\\2\\2\"+\n+    \"\\2\\7\\3\\2\\2\\2\\2\\t\\3\\2\\2\\2\\2\\13\\3\\2\\2\\2\\2\\r\\3\\2\\2\\2\\2\\17\\3\\2\\2\\2\\2\\21\\3\"+\n+    \"\\2\\2\\2\\2\\23\\3\\2\\2\\2\\2\\25\\3\\2\\2\\2\\2\\27\\3\\2\\2\\2\\2\\31\\3\\2\\2\\2\\2\\33\\3\\2\\2\"+\n+    \"\\2\\2\\35\\3\\2\\2\\2\\2\\37\\3\\2\\2\\2\\2!\\3\\2\\2\\2\\2#\\3\\2\\2\\2\\2%\\3\\2\\2\\2\\2\\'\\3\\2\"+\n+    \"\\2\\2\\2)\\3\\2\\2\\2\\2+\\3\\2\\2\\2\\2-\\3\\2\\2\\2\\2/\\3\\2\\2\\2\\2\\61\\3\\2\\2\\2\\2\\63\\3\\2\"+\n+    \"\\2\\2\\2\\65\\3\\2\\2\\2\\2\\67\\3\\2\\2\\2\\29\\3\\2\\2\\2\\2;\\3\\2\\2\\2\\2=\\3\\2\\2\\2\\2?\\3\\2\"+\n+    \"\\2\\2\\2A\\3\\2\\2\\2\\2C\\3\\2\\2\\2\\2E\\3\\2\\2\\2\\2G\\3\\2\\2\\2\\2I\\3\\2\\2\\2\\2K\\3\\2\\2\\2\"+\n+    \"\\2M\\3\\2\\2\\2\\2O\\3\\2\\2\\2\\2Q\\3\\2\\2\\2\\2S\\3\\2\\2\\2\\2]\\3\\2\\2\\2\\2_\\3\\2\\2\\2\\2a\"+\n+    \"\\3\\2\\2\\2\\2c\\3\\2\\2\\2\\2e\\3\\2\\2\\2\\2g\\3\\2\\2\\2\\2o\\3\\2\\2\\2\\2q\\3\\2\\2\\2\\2s\\3\\2\"+\n+    \"\\2\\2\\3u\\3\\2\\2\\2\\5y\\3\\2\\2\\2\\7}\\3\\2\\2\\2\\t\\u0080\\3\\2\\2\\2\\13\\u0086\\3\\2\\2\\2\"+\n+    \"\\r\\u0089\\3\\2\\2\\2\\17\\u008d\\3\\2\\2\\2\\21\\u0092\\3\\2\\2\\2\\23\\u0097\\3\\2\\2\\2\\25\"+\n+    \"\\u009d\\3\\2\\2\\2\\27\\u00a5\\3\\2\\2\\2\\31\\u00a9\\3\\2\\2\\2\\33\\u00ae\\3\\2\\2\\2\\35\\u00b1\"+\n+    \"\\3\\2\\2\\2\\37\\u00b4\\3\\2\\2\\2!\\u00ba\\3\\2\\2\\2#\\u00c1\\3\\2\\2\\2%\\u00ca\\3\\2\\2\\2\"+\n+    \"\\'\\u00cf\\3\\2\\2\\2)\\u00d5\\3\\2\\2\\2+\\u00db\\3\\2\\2\\2-\\u00e0\\3\\2\\2\\2/\\u00e2\\3\"+\n+    \"\\2\\2\\2\\61\\u00e4\\3\\2\\2\\2\\63\\u00e7\\3\\2\\2\\2\\65\\u00ea\\3\\2\\2\\2\\67\\u00ec\\3\\2\"+\n+    \"\\2\\29\\u00ef\\3\\2\\2\\2;\\u00f1\\3\\2\\2\\2=\\u00f4\\3\\2\\2\\2?\\u00f6\\3\\2\\2\\2A\\u00f8\"+\n+    \"\\3\\2\\2\\2C\\u00fa\\3\\2\\2\\2E\\u00fc\\3\\2\\2\\2G\\u00fe\\3\\2\\2\\2I\\u0100\\3\\2\\2\\2K\"+\n+    \"\\u0102\\3\\2\\2\\2M\\u0104\\3\\2\\2\\2O\\u0106\\3\\2\\2\\2Q\\u0108\\3\\2\\2\\2S\\u010a\\3\\2\"+\n+    \"\\2\\2U\\u010c\\3\\2\\2\\2W\\u010f\\3\\2\\2\\2Y\\u0124\\3\\2\\2\\2[\\u0126\\3\\2\\2\\2]\\u0168\"+\n+    \"\\3\\2\\2\\2_\\u016b\\3\\2\\2\\2a\\u0199\\3\\2\\2\\2c\\u019d\\3\\2\\2\\2e\\u01a7\\3\\2\\2\\2g\"+\n+    \"\\u01b2\\3\\2\\2\\2i\\u01bd\\3\\2\\2\\2k\\u01c6\\3\\2\\2\\2m\\u01c8\\3\\2\\2\\2o\\u01ca\\3\\2\"+\n+    \"\\2\\2q\\u01db\\3\\2\\2\\2s\\u01eb\\3\\2\\2\\2uv\\7c\\2\\2vw\\7p\\2\\2wx\\7f\\2\\2x\\4\\3\\2\\2\"+\n+    \"\\2yz\\7c\\2\\2z{\\7p\\2\\2{|\\7{\\2\\2|\\6\\3\\2\\2\\2}~\\7d\\2\\2~\\177\\7{\\2\\2\\177\\b\\3\"+\n+    \"\\2\\2\\2\\u0080\\u0081\\7h\\2\\2\\u0081\\u0082\\7c\\2\\2\\u0082\\u0083\\7n\\2\\2\\u0083\"+\n+    \"\\u0084\\7u\\2\\2\\u0084\\u0085\\7g\\2\\2\\u0085\\n\\3\\2\\2\\2\\u0086\\u0087\\7k\\2\\2\\u0087\"+\n+    \"\\u0088\\7p\\2\\2\\u0088\\f\\3\\2\\2\\2\\u0089\\u008a\\7k\\2\\2\\u008a\\u008b\\7p\\2\\2\\u008b\"+\n+    \"\\u008c\\7\\u0080\\2\\2\\u008c\\16\\3\\2\\2\\2\\u008d\\u008e\\7l\\2\\2\\u008e\\u008f\\7q\"+\n+    \"\\2\\2\\u008f\\u0090\\7k\\2\\2\\u0090\\u0091\\7p\\2\\2\\u0091\\20\\3\\2\\2\\2\\u0092\\u0093\"+\n+    \"\\7n\\2\\2\\u0093\\u0094\\7k\\2\\2\\u0094\\u0095\\7m\\2\\2\\u0095\\u0096\\7g\\2\\2\\u0096\"+\n+    \"\\22\\3\\2\\2\\2\\u0097\\u0098\\7n\\2\\2\\u0098\\u0099\\7k\\2\\2\\u0099\\u009a\\7m\\2\\2\\u009a\"+\n+    \"\\u009b\\7g\\2\\2\\u009b\\u009c\\7\\u0080\\2\\2\\u009c\\24\\3\\2\\2\\2\\u009d\\u009e\\7o\"+\n+    \"\\2\\2\\u009e\\u009f\\7c\\2\\2\\u009f\\u00a0\\7z\\2\\2\\u00a0\\u00a1\\7u\\2\\2\\u00a1\\u00a2\"+\n+    \"\\7r\\2\\2\\u00a2\\u00a3\\7c\\2\\2\\u00a3\\u00a4\\7p\\2\\2\\u00a4\\26\\3\\2\\2\\2\\u00a5\\u00a6\"+\n+    \"\\7p\\2\\2\\u00a6\\u00a7\\7q\\2\\2\\u00a7\\u00a8\\7v\\2\\2\\u00a8\\30\\3\\2\\2\\2\\u00a9\\u00aa\"+\n+    \"\\7p\\2\\2\\u00aa\\u00ab\\7w\\2\\2\\u00ab\\u00ac\\7n\\2\\2\\u00ac\\u00ad\\7n\\2\\2\\u00ad\"+\n+    \"\\32\\3\\2\\2\\2\\u00ae\\u00af\\7q\\2\\2\\u00af\\u00b0\\7h\\2\\2\\u00b0\\34\\3\\2\\2\\2\\u00b1\"+\n+    \"\\u00b2\\7q\\2\\2\\u00b2\\u00b3\\7t\\2\\2\\u00b3\\36\\3\\2\\2\\2\\u00b4\\u00b5\\7t\\2\\2\\u00b5\"+\n+    \"\\u00b6\\7g\\2\\2\\u00b6\\u00b7\\7i\\2\\2\\u00b7\\u00b8\\7g\\2\\2\\u00b8\\u00b9\\7z\\2\\2\"+\n+    \"\\u00b9 \\3\\2\\2\\2\\u00ba\\u00bb\\7t\\2\\2\\u00bb\\u00bc\\7g\\2\\2\\u00bc\\u00bd\\7i\\2\"+\n+    \"\\2\\u00bd\\u00be\\7g\\2\\2\\u00be\\u00bf\\7z\\2\\2\\u00bf\\u00c0\\7\\u0080\\2\\2\\u00c0\"+\n+    \"\\\"\\3\\2\\2\\2\\u00c1\\u00c2\\7u\\2\\2\\u00c2\\u00c3\\7g\\2\\2\\u00c3\\u00c4\\7s\\2\\2\\u00c4\"+\n+    \"\\u00c5\\7w\\2\\2\\u00c5\\u00c6\\7g\\2\\2\\u00c6\\u00c7\\7p\\2\\2\\u00c7\\u00c8\\7e\\2\\2\"+\n+    \"\\u00c8\\u00c9\\7g\\2\\2\\u00c9$\\3\\2\\2\\2\\u00ca\\u00cb\\7v\\2\\2\\u00cb\\u00cc\\7t\\2\"+\n+    \"\\2\\u00cc\\u00cd\\7w\\2\\2\\u00cd\\u00ce\\7g\\2\\2\\u00ce&\\3\\2\\2\\2\\u00cf\\u00d0\\7\"+\n+    \"w\\2\\2\\u00d0\\u00d1\\7p\\2\\2\\u00d1\\u00d2\\7v\\2\\2\\u00d2\\u00d3\\7k\\2\\2\\u00d3\\u00d4\"+\n+    \"\\7n\\2\\2\\u00d4(\\3\\2\\2\\2\\u00d5\\u00d6\\7y\\2\\2\\u00d6\\u00d7\\7j\\2\\2\\u00d7\\u00d8\"+\n+    \"\\7g\\2\\2\\u00d8\\u00d9\\7t\\2\\2\\u00d9\\u00da\\7g\\2\\2\\u00da*\\3\\2\\2\\2\\u00db\\u00dc\"+\n+    \"\\7y\\2\\2\\u00dc\\u00dd\\7k\\2\\2\\u00dd\\u00de\\7v\\2\\2\\u00de\\u00df\\7j\\2\\2\\u00df\"+\n+    \",\\3\\2\\2\\2\\u00e0\\u00e1\\7<\\2\\2\\u00e1.\\3\\2\\2\\2\\u00e2\\u00e3\\7?\\2\\2\\u00e3\\60\"+\n+    \"\\3\\2\\2\\2\\u00e4\\u00e5\\7?\\2\\2\\u00e5\\u00e6\\7?\\2\\2\\u00e6\\62\\3\\2\\2\\2\\u00e7\"+\n+    \"\\u00e8\\7#\\2\\2\\u00e8\\u00e9\\7?\\2\\2\\u00e9\\64\\3\\2\\2\\2\\u00ea\\u00eb\\7>\\2\\2\\u00eb\"+\n+    \"\\66\\3\\2\\2\\2\\u00ec\\u00ed\\7>\\2\\2\\u00ed\\u00ee\\7?\\2\\2\\u00ee8\\3\\2\\2\\2\\u00ef\"+\n+    \"\\u00f0\\7@\\2\\2\\u00f0:\\3\\2\\2\\2\\u00f1\\u00f2\\7@\\2\\2\\u00f2\\u00f3\\7?\\2\\2\\u00f3\"+\n+    \"<\\3\\2\\2\\2\\u00f4\\u00f5\\7-\\2\\2\\u00f5>\\3\\2\\2\\2\\u00f6\\u00f7\\7/\\2\\2\\u00f7@\"+\n+    \"\\3\\2\\2\\2\\u00f8\\u00f9\\7,\\2\\2\\u00f9B\\3\\2\\2\\2\\u00fa\\u00fb\\7\\61\\2\\2\\u00fb\"+\n+    \"D\\3\\2\\2\\2\\u00fc\\u00fd\\7\\'\\2\\2\\u00fdF\\3\\2\\2\\2\\u00fe\\u00ff\\7\\60\\2\\2\\u00ff\"+\n+    \"H\\3\\2\\2\\2\\u0100\\u0101\\7.\\2\\2\\u0101J\\3\\2\\2\\2\\u0102\\u0103\\7]\\2\\2\\u0103L\"+\n+    \"\\3\\2\\2\\2\\u0104\\u0105\\7_\\2\\2\\u0105N\\3\\2\\2\\2\\u0106\\u0107\\7*\\2\\2\\u0107P\\3\"+\n+    \"\\2\\2\\2\\u0108\\u0109\\7+\\2\\2\\u0109R\\3\\2\\2\\2\\u010a\\u010b\\7~\\2\\2\\u010bT\\3\\2\"+\n+    \"\\2\\2\\u010c\\u010d\\7^\\2\\2\\u010d\\u010e\\t\\2\\2\\2\\u010eV\\3\\2\\2\\2\\u010f\\u0110\"+\n+    \"\\t\\3\\2\\2\\u0110X\\3\\2\\2\\2\\u0111\\u0112\\7^\\2\\2\\u0112\\u0113\\7w\\2\\2\\u0113\\u0114\"+\n+    \"\\3\\2\\2\\2\\u0114\\u0115\\5W,\\2\\u0115\\u0116\\5W,\\2\\u0116\\u0117\\5W,\\2\\u0117\\u0118\"+\n+    \"\\5W,\\2\\u0118\\u0125\\3\\2\\2\\2\\u0119\\u011a\\7^\\2\\2\\u011a\\u011b\\7w\\2\\2\\u011b\"+\n+    \"\\u011c\\3\\2\\2\\2\\u011c\\u011e\\7}\\2\\2\\u011d\\u011f\\5W,\\2\\u011e\\u011d\\3\\2\\2\"+\n+    \"\\2\\u011f\\u0120\\3\\2\\2\\2\\u0120\\u011e\\3\\2\\2\\2\\u0120\\u0121\\3\\2\\2\\2\\u0121\\u0122\"+\n+    \"\\3\\2\\2\\2\\u0122\\u0123\\7\\177\\2\\2\\u0123\\u0125\\3\\2\\2\\2\\u0124\\u0111\\3\\2\\2\\2\"+\n+    \"\\u0124\\u0119\\3\\2\\2\\2\\u0125Z\\3\\2\\2\\2\\u0126\\u0127\\n\\4\\2\\2\\u0127\\\\\\3\\2\\2\"+\n+    \"\\2\\u0128\\u012e\\7$\\2\\2\\u0129\\u012d\\5U+\\2\\u012a\\u012d\\5Y-\\2\\u012b\\u012d\"+\n+    \"\\5[.\\2\\u012c\\u0129\\3\\2\\2\\2\\u012c\\u012a\\3\\2\\2\\2\\u012c\\u012b\\3\\2\\2\\2\\u012d\"+\n+    \"\\u0130\\3\\2\\2\\2\\u012e\\u012c\\3\\2\\2\\2\\u012e\\u012f\\3\\2\\2\\2\\u012f\\u0131\\3\\2\"+\n+    \"\\2\\2\\u0130\\u012e\\3\\2\\2\\2\\u0131\\u0169\\7$\\2\\2\\u0132\\u0133\\7$\\2\\2\\u0133\\u0134\"+\n+    \"\\7$\\2\\2\\u0134\\u0135\\7$\\2\\2\\u0135\\u0139\\3\\2\\2\\2\\u0136\\u0138\\n\\5\\2\\2\\u0137\"+\n+    \"\\u0136\\3\\2\\2\\2\\u0138\\u013b\\3\\2\\2\\2\\u0139\\u013a\\3\\2\\2\\2\\u0139\\u0137\\3\\2\"+\n+    \"\\2\\2\\u013a\\u013c\\3\\2\\2\\2\\u013b\\u0139\\3\\2\\2\\2\\u013c\\u013d\\7$\\2\\2\\u013d\"+\n+    \"\\u013e\\7$\\2\\2\\u013e\\u013f\\7$\\2\\2\\u013f\\u0141\\3\\2\\2\\2\\u0140\\u0142\\7$\\2\"+\n+    \"\\2\\u0141\\u0140\\3\\2\\2\\2\\u0141\\u0142\\3\\2\\2\\2\\u0142\\u0144\\3\\2\\2\\2\\u0143\\u0145\"+\n+    \"\\7$\\2\\2\\u0144\\u0143\\3\\2\\2\\2\\u0144\\u0145\\3\\2\\2\\2\\u0145\\u0169\\3\\2\\2\\2\\u0146\"+\n+    \"\\u014c\\7)\\2\\2\\u0147\\u0148\\7^\\2\\2\\u0148\\u014b\\t\\2\\2\\2\\u0149\\u014b\\n\\6\\2\"+\n+    \"\\2\\u014a\\u0147\\3\\2\\2\\2\\u014a\\u0149\\3\\2\\2\\2\\u014b\\u014e\\3\\2\\2\\2\\u014c\\u014a\"+\n+    \"\\3\\2\\2\\2\\u014c\\u014d\\3\\2\\2\\2\\u014d\\u014f\\3\\2\\2\\2\\u014e\\u014c\\3\\2\\2\\2\\u014f\"+\n+    \"\\u0169\\7)\\2\\2\\u0150\\u0151\\7A\\2\\2\\u0151\\u0152\\7$\\2\\2\\u0152\\u0158\\3\\2\\2\"+\n+    \"\\2\\u0153\\u0154\\7^\\2\\2\\u0154\\u0157\\7$\\2\\2\\u0155\\u0157\\n\\7\\2\\2\\u0156\\u0153\"+\n+    \"\\3\\2\\2\\2\\u0156\\u0155\\3\\2\\2\\2\\u0157\\u015a\\3\\2\\2\\2\\u0158\\u0156\\3\\2\\2\\2\\u0158\"+\n+    \"\\u0159\\3\\2\\2\\2\\u0159\\u015b\\3\\2\\2\\2\\u015a\\u0158\\3\\2\\2\\2\\u015b\\u0169\\7$\"+\n+    \"\\2\\2\\u015c\\u015d\\7A\\2\\2\\u015d\\u015e\\7)\\2\\2\\u015e\\u0164\\3\\2\\2\\2\\u015f\\u0160\"+\n+    \"\\7^\\2\\2\\u0160\\u0163\\7)\\2\\2\\u0161\\u0163\\n\\b\\2\\2\\u0162\\u015f\\3\\2\\2\\2\\u0162\"+\n+    \"\\u0161\\3\\2\\2\\2\\u0163\\u0166\\3\\2\\2\\2\\u0164\\u0162\\3\\2\\2\\2\\u0164\\u0165\\3\\2\"+\n+    \"\\2\\2\\u0165\\u0167\\3\\2\\2\\2\\u0166\\u0164\\3\\2\\2\\2\\u0167\\u0169\\7)\\2\\2\\u0168\"+\n+    \"\\u0128\\3\\2\\2\\2\\u0168\\u0132\\3\\2\\2\\2\\u0168\\u0146\\3\\2\\2\\2\\u0168\\u0150\\3\\2\"+\n+    \"\\2\\2\\u0168\\u015c\\3\\2\\2\\2\\u0169^\\3\\2\\2\\2\\u016a\\u016c\\5k\\66\\2\\u016b\\u016a\"+\n+    \"\\3\\2\\2\\2\\u016c\\u016d\\3\\2\\2\\2\\u016d\\u016b\\3\\2\\2\\2\\u016d\\u016e\\3\\2\\2\\2\\u016e\"+\n+    \"`\\3\\2\\2\\2\\u016f\\u0171\\5k\\66\\2\\u0170\\u016f\\3\\2\\2\\2\\u0171\\u0172\\3\\2\\2\\2\"+\n+    \"\\u0172\\u0170\\3\\2\\2\\2\\u0172\\u0173\\3\\2\\2\\2\\u0173\\u0174\\3\\2\\2\\2\\u0174\\u0178\"+\n+    \"\\5G$\\2\\u0175\\u0177\\5k\\66\\2\\u0176\\u0175\\3\\2\\2\\2\\u0177\\u017a\\3\\2\\2\\2\\u0178\"+\n+    \"\\u0176\\3\\2\\2\\2\\u0178\\u0179\\3\\2\\2\\2\\u0179\\u019a\\3\\2\\2\\2\\u017a\\u0178\\3\\2\"+\n+    \"\\2\\2\\u017b\\u017d\\5G$\\2\\u017c\\u017e\\5k\\66\\2\\u017d\\u017c\\3\\2\\2\\2\\u017e\\u017f\"+\n+    \"\\3\\2\\2\\2\\u017f\\u017d\\3\\2\\2\\2\\u017f\\u0180\\3\\2\\2\\2\\u0180\\u019a\\3\\2\\2\\2\\u0181\"+\n+    \"\\u0183\\5k\\66\\2\\u0182\\u0181\\3\\2\\2\\2\\u0183\\u0184\\3\\2\\2\\2\\u0184\\u0182\\3\\2\"+\n+    \"\\2\\2\\u0184\\u0185\\3\\2\\2\\2\\u0185\\u018d\\3\\2\\2\\2\\u0186\\u018a\\5G$\\2\\u0187\\u0189\"+\n+    \"\\5k\\66\\2\\u0188\\u0187\\3\\2\\2\\2\\u0189\\u018c\\3\\2\\2\\2\\u018a\\u0188\\3\\2\\2\\2\\u018a\"+\n+    \"\\u018b\\3\\2\\2\\2\\u018b\\u018e\\3\\2\\2\\2\\u018c\\u018a\\3\\2\\2\\2\\u018d\\u0186\\3\\2\"+\n+    \"\\2\\2\\u018d\\u018e\\3\\2\\2\\2\\u018e\\u018f\\3\\2\\2\\2\\u018f\\u0190\\5i\\65\\2\\u0190\"+\n+    \"\\u019a\\3\\2\\2\\2\\u0191\\u0193\\5G$\\2\\u0192\\u0194\\5k\\66\\2\\u0193\\u0192\\3\\2\\2\"+\n+    \"\\2\\u0194\\u0195\\3\\2\\2\\2\\u0195\\u0193\\3\\2\\2\\2\\u0195\\u0196\\3\\2\\2\\2\\u0196\\u0197\"+\n+    \"\\3\\2\\2\\2\\u0197\\u0198\\5i\\65\\2\\u0198\\u019a\\3\\2\\2\\2\\u0199\\u0170\\3\\2\\2\\2\\u0199\"+\n+    \"\\u017b\\3\\2\\2\\2\\u0199\\u0182\\3\\2\\2\\2\\u0199\\u0191\\3\\2\\2\\2\\u019ab\\3\\2\\2\\2\"+\n+    \"\\u019b\\u019e\\5m\\67\\2\\u019c\\u019e\\t\\t\\2\\2\\u019d\\u019b\\3\\2\\2\\2\\u019d\\u019c\"+\n+    \"\\3\\2\\2\\2\\u019e\\u01a4\\3\\2\\2\\2\\u019f\\u01a3\\5m\\67\\2\\u01a0\\u01a3\\5k\\66\\2\\u01a1\"+\n+    \"\\u01a3\\7a\\2\\2\\u01a2\\u019f\\3\\2\\2\\2\\u01a2\\u01a0\\3\\2\\2\\2\\u01a2\\u01a1\\3\\2\"+\n+    \"\\2\\2\\u01a3\\u01a6\\3\\2\\2\\2\\u01a4\\u01a2\\3\\2\\2\\2\\u01a4\\u01a5\\3\\2\\2\\2\\u01a5\"+\n+    \"d\\3\\2\\2\\2\\u01a6\\u01a4\\3\\2\\2\\2\\u01a7\\u01ad\\7b\\2\\2\\u01a8\\u01ac\\n\\n\\2\\2\\u01a9\"+\n+    \"\\u01aa\\7b\\2\\2\\u01aa\\u01ac\\7b\\2\\2\\u01ab\\u01a8\\3\\2\\2\\2\\u01ab\\u01a9\\3\\2\\2\"+\n+    \"\\2\\u01ac\\u01af\\3\\2\\2\\2\\u01ad\\u01ab\\3\\2\\2\\2\\u01ad\\u01ae\\3\\2\\2\\2\\u01ae\\u01b0\"+\n+    \"\\3\\2\\2\\2\\u01af\\u01ad\\3\\2\\2\\2\\u01b0\\u01b1\\7b\\2\\2\\u01b1f\\3\\2\\2\\2\\u01b2\\u01b8\"+\n+    \"\\5m\\67\\2\\u01b3\\u01b7\\5m\\67\\2\\u01b4\\u01b7\\5k\\66\\2\\u01b5\\u01b7\\7a\\2\\2\\u01b6\"+\n+    \"\\u01b3\\3\\2\\2\\2\\u01b6\\u01b4\\3\\2\\2\\2\\u01b6\\u01b5\\3\\2\\2\\2\\u01b7\\u01ba\\3\\2\"+\n+    \"\\2\\2\\u01b8\\u01b6\\3\\2\\2\\2\\u01b8\\u01b9\\3\\2\\2\\2\\u01b9\\u01bb\\3\\2\\2\\2\\u01ba\"+\n+    \"\\u01b8\\3\\2\\2\\2\\u01bb\\u01bc\\7\\u0080\\2\\2\\u01bch\\3\\2\\2\\2\\u01bd\\u01bf\\t\\13\"+\n+    \"\\2\\2\\u01be\\u01c0\\t\\f\\2\\2\\u01bf\\u01be\\3\\2\\2\\2\\u01bf\\u01c0\\3\\2\\2\\2\\u01c0\"+\n+    \"\\u01c2\\3\\2\\2\\2\\u01c1\\u01c3\\5k\\66\\2\\u01c2\\u01c1\\3\\2\\2\\2\\u01c3\\u01c4\\3\\2\"+\n+    \"\\2\\2\\u01c4\\u01c2\\3\\2\\2\\2\\u01c4\\u01c5\\3\\2\\2\\2\\u01c5j\\3\\2\\2\\2\\u01c6\\u01c7\"+\n+    \"\\t\\r\\2\\2\\u01c7l\\3\\2\\2\\2\\u01c8\\u01c9\\t\\16\\2\\2\\u01c9n\\3\\2\\2\\2\\u01ca\\u01cb\"+\n+    \"\\7\\61\\2\\2\\u01cb\\u01cc\\7\\61\\2\\2\\u01cc\\u01d0\\3\\2\\2\\2\\u01cd\\u01cf\\n\\5\\2\\2\"+\n+    \"\\u01ce\\u01cd\\3\\2\\2\\2\\u01cf\\u01d2\\3\\2\\2\\2\\u01d0\\u01ce\\3\\2\\2\\2\\u01d0\\u01d1\"+\n+    \"\\3\\2\\2\\2\\u01d1\\u01d4\\3\\2\\2\\2\\u01d2\\u01d0\\3\\2\\2\\2\\u01d3\\u01d5\\7\\17\\2\\2\"+\n+    \"\\u01d4\\u01d3\\3\\2\\2\\2\\u01d4\\u01d5\\3\\2\\2\\2\\u01d5\\u01d7\\3\\2\\2\\2\\u01d6\\u01d8\"+\n+    \"\\7\\f\\2\\2\\u01d7\\u01d6\\3\\2\\2\\2\\u01d7\\u01d8\\3\\2\\2\\2\\u01d8\\u01d9\\3\\2\\2\\2\\u01d9\"+\n+    \"\\u01da\\b8\\2\\2\\u01dap\\3\\2\\2\\2\\u01db\\u01dc\\7\\61\\2\\2\\u01dc\\u01dd\\7,\\2\\2\\u01dd\"+\n+    \"\\u01e2\\3\\2\\2\\2\\u01de\\u01e1\\5q9\\2\\u01df\\u01e1\\13\\2\\2\\2\\u01e0\\u01de\\3\\2\"+\n+    \"\\2\\2\\u01e0\\u01df\\3\\2\\2\\2\\u01e1\\u01e4\\3\\2\\2\\2\\u01e2\\u01e3\\3\\2\\2\\2\\u01e2\"+\n+    \"\\u01e0\\3\\2\\2\\2\\u01e3\\u01e5\\3\\2\\2\\2\\u01e4\\u01e2\\3\\2\\2\\2\\u01e5\\u01e6\\7,\"+\n+    \"\\2\\2\\u01e6\\u01e7\\7\\61\\2\\2\\u01e7\\u01e8\\3\\2\\2\\2\\u01e8\\u01e9\\b9\\2\\2\\u01e9\"+\n+    \"r\\3\\2\\2\\2\\u01ea\\u01ec\\t\\17\\2\\2\\u01eb\\u01ea\\3\\2\\2\\2\\u01ec\\u01ed\\3\\2\\2\\2\"+\n+    \"\\u01ed\\u01eb\\3\\2\\2\\2\\u01ed\\u01ee\\3\\2\\2\\2\\u01ee\\u01ef\\3\\2\\2\\2\\u01ef\\u01f0\"+\n+    \"\\b:\\2\\2\\u01f0t\\3\\2\\2\\2)\\2\\u0120\\u0124\\u012c\\u012e\\u0139\\u0141\\u0144\\u014a\"+\n+    \"\\u014c\\u0156\\u0158\\u0162\\u0164\\u0168\\u016d\\u0172\\u0178\\u017f\\u0184\\u018a\"+\n+    \"\\u018d\\u0195\\u0199\\u019d\\u01a2\\u01a4\\u01ab\\u01ad\\u01b6\\u01b8\\u01bf\\u01c4\"+\n+    \"\\u01d0\\u01d4\\u01d7\\u01e0\\u01e2\\u01ed\\3\\2\\3\\2\";\n   public static final ATN _ATN =\n     new ATNDeserializer().deserialize(_serializedATN.toCharArray());\n   static {"
  },
  {
    "sha": "a7f98ae9524d87ef349c172bd509b0b3bdb15245",
    "filename": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseParser.java",
    "status": "modified",
    "additions": 136,
    "deletions": 227,
    "changes": 363,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseParser.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseParser.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/EqlBaseParser.java?ref=0dcb1c325dc410aa9d03fab481ea0ee4da936857",
    "patch": "@@ -31,119 +31,47 @@\n   protected static final PredictionContextCache _sharedContextCache =\n     new PredictionContextCache();\n   public static final int\n-  AND = 1, ANY = 2, BY = 3, FALSE = 4, IN = 5, IN_INSENSITIVE = 6, JOIN = 7, LIKE = 8, LIKE_INSENSITIVE = 9, MAXSPAN = 10, NOT = 11, NULL =\n-      12, OF = 13, OR = 14, REGEX = 15, REGEX_INSENSITIVE = 16, SEQUENCE = 17, TRUE = 18, UNTIL = 19, WHERE = 20, WITH = 21, SEQ = 22,\n-      ASGN = 23, EQ = 24, NEQ = 25, LT = 26, LTE = 27, GT = 28, GTE = 29, PLUS = 30, MINUS = 31, ASTERISK = 32, SLASH = 33, PERCENT = 34,\n-      DOT = 35, COMMA = 36, LB = 37, RB = 38, LP = 39, RP = 40, PIPE = 41, STRING = 42, INTEGER_VALUE = 43, DECIMAL_VALUE = 44, IDENTIFIER =\n-          45, QUOTED_IDENTIFIER = 46, TILDE_IDENTIFIER = 47, LINE_COMMENT = 48, BRACKETED_COMMENT = 49, WS = 50;\n+    AND=1, ANY=2, BY=3, FALSE=4, IN=5, IN_INSENSITIVE=6, JOIN=7, LIKE=8, LIKE_INSENSITIVE=9, \n+    MAXSPAN=10, NOT=11, NULL=12, OF=13, OR=14, REGEX=15, REGEX_INSENSITIVE=16, \n+    SEQUENCE=17, TRUE=18, UNTIL=19, WHERE=20, WITH=21, SEQ=22, ASGN=23, EQ=24, \n+    NEQ=25, LT=26, LTE=27, GT=28, GTE=29, PLUS=30, MINUS=31, ASTERISK=32, \n+    SLASH=33, PERCENT=34, DOT=35, COMMA=36, LB=37, RB=38, LP=39, RP=40, PIPE=41, \n+    STRING=42, INTEGER_VALUE=43, DECIMAL_VALUE=44, IDENTIFIER=45, QUOTED_IDENTIFIER=46, \n+    TILDE_IDENTIFIER=47, LINE_COMMENT=48, BRACKETED_COMMENT=49, WS=50;\n   public static final int\n-    RULE_singleStatement = 0, RULE_singleExpression = 1, RULE_statement = 2,\n-    RULE_query = 3, RULE_sequenceParams = 4, RULE_sequence = 5, RULE_join = 6,\n-    RULE_pipe = 7, RULE_joinKeys = 8, RULE_joinTerm = 9, RULE_sequenceTerm = 10,\n-    RULE_subquery = 11, RULE_eventQuery = 12, RULE_eventFilter = 13, RULE_expression = 14,\n-    RULE_booleanExpression = 15, RULE_valueExpression = 16, RULE_operatorExpression = 17,\n-    RULE_predicate = 18, RULE_primaryExpression = 19, RULE_functionExpression = 20,\n-    RULE_functionName = 21, RULE_constant = 22, RULE_comparisonOperator = 23,\n-    RULE_booleanValue = 24, RULE_qualifiedName = 25, RULE_identifier = 26,\n+    RULE_singleStatement = 0, RULE_singleExpression = 1, RULE_statement = 2, \n+    RULE_query = 3, RULE_sequenceParams = 4, RULE_sequence = 5, RULE_join = 6, \n+    RULE_pipe = 7, RULE_joinKeys = 8, RULE_joinTerm = 9, RULE_sequenceTerm = 10, \n+    RULE_subquery = 11, RULE_eventQuery = 12, RULE_eventFilter = 13, RULE_expression = 14, \n+    RULE_booleanExpression = 15, RULE_valueExpression = 16, RULE_operatorExpression = 17, \n+    RULE_predicate = 18, RULE_primaryExpression = 19, RULE_functionExpression = 20, \n+    RULE_functionName = 21, RULE_constant = 22, RULE_comparisonOperator = 23, \n+    RULE_booleanValue = 24, RULE_qualifiedName = 25, RULE_identifier = 26, \n     RULE_timeUnit = 27, RULE_number = 28, RULE_string = 29, RULE_eventValue = 30;\n   public static final String[] ruleNames = {\n-    \"singleStatement\", \"singleExpression\", \"statement\", \"query\", \"sequenceParams\",\n-    \"sequence\", \"join\", \"pipe\", \"joinKeys\", \"joinTerm\", \"sequenceTerm\", \"subquery\",\n-    \"eventQuery\", \"eventFilter\", \"expression\", \"booleanExpression\", \"valueExpression\",\n-    \"operatorExpression\", \"predicate\", \"primaryExpression\", \"functionExpression\",\n-    \"functionName\", \"constant\", \"comparisonOperator\", \"booleanValue\", \"qualifiedName\",\n+    \"singleStatement\", \"singleExpression\", \"statement\", \"query\", \"sequenceParams\", \n+    \"sequence\", \"join\", \"pipe\", \"joinKeys\", \"joinTerm\", \"sequenceTerm\", \"subquery\", \n+    \"eventQuery\", \"eventFilter\", \"expression\", \"booleanExpression\", \"valueExpression\", \n+    \"operatorExpression\", \"predicate\", \"primaryExpression\", \"functionExpression\", \n+    \"functionName\", \"constant\", \"comparisonOperator\", \"booleanValue\", \"qualifiedName\", \n     \"identifier\", \"timeUnit\", \"number\", \"string\", \"eventValue\"\n   };\n \n   private static final String[] _LITERAL_NAMES = {\n-    null, \"'and'\", \"'any'\", \"'by'\", \"'false'\", \"'in'\", \"'in~'\", \"'join'\",\n-      \"'like'\",\n-      \"'like~'\",\n-      \"'maxspan'\",\n-      \"'not'\",\n-      \"'null'\",\n-      \"'of'\",\n-      \"'or'\",\n-      \"'regex'\",\n-      \"'regex~'\",\n-      \"'sequence'\",\n-      \"'true'\",\n-      \"'until'\",\n-      \"'where'\",\n-      \"'with'\",\n-      \"':'\",\n-      \"'='\",\n-      \"'=='\",\n-      \"'!='\",\n-      \"'<'\",\n-      \"'<='\",\n-      \"'>'\",\n-      \"'>='\",\n-      \"'+'\",\n-      \"'-'\",\n-      \"'*'\",\n-      \"'/'\",\n-      \"'%'\",\n-      \"'.'\",\n-      \"','\",\n-      \"'['\",\n-      \"']'\",\n-      \"'('\",\n-      \"')'\",\n-      \"'|'\"\n+    null, \"'and'\", \"'any'\", \"'by'\", \"'false'\", \"'in'\", \"'in~'\", \"'join'\", \n+    \"'like'\", \"'like~'\", \"'maxspan'\", \"'not'\", \"'null'\", \"'of'\", \"'or'\", \"'regex'\", \n+    \"'regex~'\", \"'sequence'\", \"'true'\", \"'until'\", \"'where'\", \"'with'\", \"':'\", \n+    \"'='\", \"'=='\", \"'!='\", \"'<'\", \"'<='\", \"'>'\", \"'>='\", \"'+'\", \"'-'\", \"'*'\", \n+    \"'/'\", \"'%'\", \"'.'\", \"','\", \"'['\", \"']'\", \"'('\", \"')'\", \"'|'\"\n   };\n   private static final String[] _SYMBOLIC_NAMES = {\n-      null,\n-      \"AND\",\n-      \"ANY\",\n-      \"BY\",\n-      \"FALSE\",\n-      \"IN\",\n-      \"IN_INSENSITIVE\",\n-      \"JOIN\",\n-      \"LIKE\",\n-      \"LIKE_INSENSITIVE\",\n-      \"MAXSPAN\",\n-      \"NOT\",\n-      \"NULL\",\n-      \"OF\",\n-      \"OR\",\n-      \"REGEX\",\n-      \"REGEX_INSENSITIVE\",\n-      \"SEQUENCE\",\n-      \"TRUE\",\n-      \"UNTIL\",\n-      \"WHERE\",\n-      \"WITH\",\n-      \"SEQ\",\n-      \"ASGN\",\n-      \"EQ\",\n-      \"NEQ\",\n-      \"LT\",\n-      \"LTE\",\n-      \"GT\",\n-      \"GTE\",\n-      \"PLUS\",\n-      \"MINUS\",\n-      \"ASTERISK\",\n-      \"SLASH\",\n-      \"PERCENT\",\n-      \"DOT\",\n-      \"COMMA\",\n-      \"LB\",\n-      \"RB\",\n-      \"LP\",\n-      \"RP\",\n-      \"PIPE\",\n-      \"STRING\",\n-      \"INTEGER_VALUE\",\n-      \"DECIMAL_VALUE\",\n-      \"IDENTIFIER\",\n-      \"QUOTED_IDENTIFIER\",\n-      \"TILDE_IDENTIFIER\",\n-      \"LINE_COMMENT\",\n-      \"BRACKETED_COMMENT\",\n-      \"WS\"\n+    null, \"AND\", \"ANY\", \"BY\", \"FALSE\", \"IN\", \"IN_INSENSITIVE\", \"JOIN\", \"LIKE\", \n+    \"LIKE_INSENSITIVE\", \"MAXSPAN\", \"NOT\", \"NULL\", \"OF\", \"OR\", \"REGEX\", \"REGEX_INSENSITIVE\", \n+    \"SEQUENCE\", \"TRUE\", \"UNTIL\", \"WHERE\", \"WITH\", \"SEQ\", \"ASGN\", \"EQ\", \"NEQ\", \n+    \"LT\", \"LTE\", \"GT\", \"GTE\", \"PLUS\", \"MINUS\", \"ASTERISK\", \"SLASH\", \"PERCENT\", \n+    \"DOT\", \"COMMA\", \"LB\", \"RB\", \"LP\", \"RP\", \"PIPE\", \"STRING\", \"INTEGER_VALUE\", \n+    \"DECIMAL_VALUE\", \"IDENTIFIER\", \"QUOTED_IDENTIFIER\", \"TILDE_IDENTIFIER\", \n+    \"LINE_COMMENT\", \"BRACKETED_COMMENT\", \"WS\"\n   };\n   public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);\n \n@@ -566,7 +494,7 @@ public final SequenceContext sequence() throws RecognitionException {\n       }\n       setState(96);\n       sequenceTerm();\n-      setState(98);\n+      setState(98); \n       _errHandler.sync(this);\n       _la = _input.LA(1);\n       do {\n@@ -576,7 +504,7 @@ public final SequenceContext sequence() throws RecognitionException {\n         sequenceTerm();\n         }\n         }\n-        setState(100);\n+        setState(100); \n         _errHandler.sync(this);\n         _la = _input.LA(1);\n       } while ( _la==LB );\n@@ -657,7 +585,7 @@ public final JoinContext join() throws RecognitionException {\n \n       setState(110);\n       joinTerm();\n-      setState(112);\n+      setState(112); \n       _errHandler.sync(this);\n       _la = _input.LA(1);\n       do {\n@@ -667,7 +595,7 @@ public final JoinContext join() throws RecognitionException {\n         joinTerm();\n         }\n         }\n-        setState(114);\n+        setState(114); \n         _errHandler.sync(this);\n         _la = _input.LA(1);\n       } while ( _la==LB );\n@@ -1177,7 +1105,7 @@ public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n     @Override public int getRuleIndex() { return RULE_booleanExpression; }\n-\n+   \n     public BooleanExpressionContext() { }\n     public void copyFrom(BooleanExpressionContext ctx) {\n       super.copyFrom(ctx);\n@@ -1364,7 +1292,7 @@ private BooleanExpressionContext booleanExpression(int _p) throws RecognitionExc\n             }\n             break;\n           }\n-          }\n+          } \n         }\n         setState(183);\n         _errHandler.sync(this);\n@@ -1388,7 +1316,7 @@ public ValueExpressionContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n     @Override public int getRuleIndex() { return RULE_valueExpression; }\n-\n+   \n     public ValueExpressionContext() { }\n     public void copyFrom(ValueExpressionContext ctx) {\n       super.copyFrom(ctx);\n@@ -1486,7 +1414,7 @@ public OperatorExpressionContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n     @Override public int getRuleIndex() { return RULE_operatorExpression; }\n-\n+   \n     public OperatorExpressionContext() { }\n     public void copyFrom(OperatorExpressionContext ctx) {\n       super.copyFrom(ctx);\n@@ -1686,7 +1614,7 @@ private OperatorExpressionContext operatorExpression(int _p) throws RecognitionE\n             }\n             break;\n           }\n-          }\n+          } \n         }\n         setState(210);\n         _errHandler.sync(this);\n@@ -1729,22 +1657,10 @@ public ConstantContext constant(int i) {\n       return getRuleContext(ConstantContext.class,i);\n     }\n     public TerminalNode SEQ() { return getToken(EqlBaseParser.SEQ, 0); }\n-\n-    public TerminalNode LIKE() {\n-        return getToken(EqlBaseParser.LIKE, 0);\n-    }\n-\n-    public TerminalNode LIKE_INSENSITIVE() {\n-        return getToken(EqlBaseParser.LIKE_INSENSITIVE, 0);\n-    }\n-\n-    public TerminalNode REGEX() {\n-        return getToken(EqlBaseParser.REGEX, 0);\n-    }\n-\n-    public TerminalNode REGEX_INSENSITIVE() {\n-        return getToken(EqlBaseParser.REGEX_INSENSITIVE, 0);\n-    }\n+    public TerminalNode LIKE() { return getToken(EqlBaseParser.LIKE, 0); }\n+    public TerminalNode LIKE_INSENSITIVE() { return getToken(EqlBaseParser.LIKE_INSENSITIVE, 0); }\n+    public TerminalNode REGEX() { return getToken(EqlBaseParser.REGEX, 0); }\n+    public TerminalNode REGEX_INSENSITIVE() { return getToken(EqlBaseParser.REGEX_INSENSITIVE, 0); }\n     public PredicateContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n@@ -1820,13 +1736,12 @@ public final PredicateContext predicate() throws RecognitionException {\n         enterOuterAlt(_localctx, 2);\n         {\n         setState(226);\n-        ((PredicateContext) _localctx).kind = _input.LT(1);\n+        ((PredicateContext)_localctx).kind = _input.LT(1);\n         _la = _input.LA(1);\n-        if (!((((_la) & ~0x3f) == 0\n-            && ((1L << _la) & ((1L << LIKE) | (1L << LIKE_INSENSITIVE) | (1L << REGEX) | (1L << REGEX_INSENSITIVE) | (1L << SEQ))) != 0))) {\n-            ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);\n+        if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LIKE) | (1L << LIKE_INSENSITIVE) | (1L << REGEX) | (1L << REGEX_INSENSITIVE) | (1L << SEQ))) != 0)) ) {\n+          ((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);\n         } else {\n-            consume();\n+          consume();\n         }\n         setState(227);\n         constant();\n@@ -1836,13 +1751,12 @@ public final PredicateContext predicate() throws RecognitionException {\n         enterOuterAlt(_localctx, 3);\n         {\n         setState(228);\n-        ((PredicateContext) _localctx).kind = _input.LT(1);\n+        ((PredicateContext)_localctx).kind = _input.LT(1);\n         _la = _input.LA(1);\n-        if (!((((_la) & ~0x3f) == 0\n-            && ((1L << _la) & ((1L << LIKE) | (1L << LIKE_INSENSITIVE) | (1L << REGEX) | (1L << REGEX_INSENSITIVE) | (1L << SEQ))) != 0))) {\n-            ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);\n+        if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LIKE) | (1L << LIKE_INSENSITIVE) | (1L << REGEX) | (1L << REGEX_INSENSITIVE) | (1L << SEQ))) != 0)) ) {\n+          ((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);\n         } else {\n-            consume();\n+          consume();\n         }\n         setState(229);\n         match(LP);\n@@ -1886,7 +1800,7 @@ public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n     @Override public int getRuleIndex() { return RULE_primaryExpression; }\n-\n+   \n     public PrimaryExpressionContext() { }\n     public void copyFrom(PrimaryExpressionContext ctx) {\n       super.copyFrom(ctx);\n@@ -2168,7 +2082,7 @@ public ConstantContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n     @Override public int getRuleIndex() { return RULE_constant; }\n-\n+   \n     public ConstantContext() { }\n     public void copyFrom(ConstantContext ctx) {\n       super.copyFrom(ctx);\n@@ -2478,7 +2392,7 @@ public final QualifiedNameContext qualifiedName() throws RecognitionException {\n             {\n             setState(280);\n             match(LB);\n-            setState(282);\n+            setState(282); \n             _errHandler.sync(this);\n             _la = _input.LA(1);\n             do {\n@@ -2488,7 +2402,7 @@ public final QualifiedNameContext qualifiedName() throws RecognitionException {\n               match(INTEGER_VALUE);\n               }\n               }\n-              setState(284);\n+              setState(284); \n               _errHandler.sync(this);\n               _la = _input.LA(1);\n             } while ( _la==INTEGER_VALUE );\n@@ -2499,7 +2413,7 @@ public final QualifiedNameContext qualifiedName() throws RecognitionException {\n           default:\n             throw new NoViableAltException(this);\n           }\n-          }\n+          } \n         }\n         setState(291);\n         _errHandler.sync(this);\n@@ -2628,7 +2542,7 @@ public NumberContext(ParserRuleContext parent, int invokingState) {\n       super(parent, invokingState);\n     }\n     @Override public int getRuleIndex() { return RULE_number; }\n-\n+   \n     public NumberContext() { }\n     public void copyFrom(NumberContext ctx) {\n       super.copyFrom(ctx);\n@@ -2826,8 +2740,7 @@ private boolean operatorExpression_sempred(OperatorExpressionContext _localctx,\n   }\n \n   public static final String _serializedATN =\n-      \"\\3\\u0430\\ud6d1\\u8206\\uad2d\\u4417\\uaef1\\u8d80\\uaadd\\3\\64\\u0135\\4\\2\\t\\2\"\n-          +\n+    \"\\3\\u0430\\ud6d1\\u8206\\uad2d\\u4417\\uaef1\\u8d80\\uaadd\\3\\64\\u0135\\4\\2\\t\\2\"+\n     \"\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\"+\n     \"\\t\\13\\4\\f\\t\\f\\4\\r\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\\22\"+\n     \"\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\\30\\t\\30\\4\\31\\t\\31\"+\n@@ -2852,89 +2765,85 @@ private boolean operatorExpression_sempred(OperatorExpressionContext _localctx,\n     \"\\3\\33\\6\\33\\u011d\\n\\33\\r\\33\\16\\33\\u011e\\3\\33\\7\\33\\u0122\\n\\33\\f\\33\\16\\33\"+\n     \"\\u0125\\13\\33\\3\\34\\3\\34\\3\\35\\3\\35\\5\\35\\u012b\\n\\35\\3\\36\\3\\36\\5\\36\\u012f\"+\n     \"\\n\\36\\3\\37\\3\\37\\3 \\3 \\3 \\2\\4 $!\\2\\4\\6\\b\\n\\f\\16\\20\\22\\24\\26\\30\\32\\34\\36\"+\n-          \" \\\"$&(*,.\\60\\62\\64\\668:<>\\2\\13\\3\\2 !\\3\\2\\\"$\\3\\2\\7\\b\\5\\2\\n\\13\\21\\22\\30\"\n-          + \"\\30\\4\\2//\\61\\61\\3\\2\\32\\37\\4\\2\\6\\6\\24\\24\\3\\2/\\60\\4\\2,,//\\u0142\\2@\\3\\2\\2\"\n-          + \"\\2\\4C\\3\\2\\2\\2\\6F\\3\\2\\2\\2\\bP\\3\\2\\2\\2\\nR\\3\\2\\2\\2\\fW\\3\\2\\2\\2\\16l\\3\\2\\2\\2\"\n-          + \"\\20z\\3\\2\\2\\2\\22\\u0086\\3\\2\\2\\2\\24\\u008f\\3\\2\\2\\2\\26\\u0093\\3\\2\\2\\2\\30\\u0097\"\n-          + \"\\3\\2\\2\\2\\32\\u009b\\3\\2\\2\\2\\34\\u009f\\3\\2\\2\\2\\36\\u00a4\\3\\2\\2\\2 \\u00ad\\3\\2\"\n-          + \"\\2\\2\\\"\\u00bf\\3\\2\\2\\2$\\u00c8\\3\\2\\2\\2&\\u00f2\\3\\2\\2\\2(\\u00fb\\3\\2\\2\\2*\\u00fd\"\n-          + \"\\3\\2\\2\\2,\\u010b\\3\\2\\2\\2.\\u0111\\3\\2\\2\\2\\60\\u0113\\3\\2\\2\\2\\62\\u0115\\3\\2\\2\"\n-          + \"\\2\\64\\u0117\\3\\2\\2\\2\\66\\u0126\\3\\2\\2\\28\\u0128\\3\\2\\2\\2:\\u012e\\3\\2\\2\\2<\\u0130\"\n-          + \"\\3\\2\\2\\2>\\u0132\\3\\2\\2\\2@A\\5\\6\\4\\2AB\\7\\2\\2\\3B\\3\\3\\2\\2\\2CD\\5\\36\\20\\2DE\\7\"\n-          + \"\\2\\2\\3E\\5\\3\\2\\2\\2FJ\\5\\b\\5\\2GI\\5\\20\\t\\2HG\\3\\2\\2\\2IL\\3\\2\\2\\2JH\\3\\2\\2\\2J\"\n-          + \"K\\3\\2\\2\\2K\\7\\3\\2\\2\\2LJ\\3\\2\\2\\2MQ\\5\\f\\7\\2NQ\\5\\16\\b\\2OQ\\5\\32\\16\\2PM\\3\\2\"\n-          + \"\\2\\2PN\\3\\2\\2\\2PO\\3\\2\\2\\2Q\\t\\3\\2\\2\\2RS\\7\\27\\2\\2ST\\7\\f\\2\\2TU\\7\\31\\2\\2UV\"\n-          + \"\\58\\35\\2V\\13\\3\\2\\2\\2W`\\7\\23\\2\\2XZ\\5\\22\\n\\2Y[\\5\\n\\6\\2ZY\\3\\2\\2\\2Z[\\3\\2\\2\"\n-          + \"\\2[a\\3\\2\\2\\2\\\\^\\5\\n\\6\\2]_\\5\\22\\n\\2^]\\3\\2\\2\\2^_\\3\\2\\2\\2_a\\3\\2\\2\\2`X\\3\\2\"\n-          + \"\\2\\2`\\\\\\3\\2\\2\\2`a\\3\\2\\2\\2ab\\3\\2\\2\\2bd\\5\\26\\f\\2ce\\5\\26\\f\\2dc\\3\\2\\2\\2ef\"\n-          + \"\\3\\2\\2\\2fd\\3\\2\\2\\2fg\\3\\2\\2\\2gj\\3\\2\\2\\2hi\\7\\25\\2\\2ik\\5\\26\\f\\2jh\\3\\2\\2\\2\"\n-          + \"jk\\3\\2\\2\\2k\\r\\3\\2\\2\\2ln\\7\\t\\2\\2mo\\5\\22\\n\\2nm\\3\\2\\2\\2no\\3\\2\\2\\2op\\3\\2\\2\"\n-          + \"\\2pr\\5\\24\\13\\2qs\\5\\24\\13\\2rq\\3\\2\\2\\2st\\3\\2\\2\\2tr\\3\\2\\2\\2tu\\3\\2\\2\\2ux\\3\"\n-          + \"\\2\\2\\2vw\\7\\25\\2\\2wy\\5\\24\\13\\2xv\\3\\2\\2\\2xy\\3\\2\\2\\2y\\17\\3\\2\\2\\2z{\\7+\\2\\2\"\n-          + \"{\\u0084\\7/\\2\\2|\\u0081\\5 \\21\\2}~\\7&\\2\\2~\\u0080\\5 \\21\\2\\177}\\3\\2\\2\\2\\u0080\"\n-          + \"\\u0083\\3\\2\\2\\2\\u0081\\177\\3\\2\\2\\2\\u0081\\u0082\\3\\2\\2\\2\\u0082\\u0085\\3\\2\\2\"\n-          + \"\\2\\u0083\\u0081\\3\\2\\2\\2\\u0084|\\3\\2\\2\\2\\u0084\\u0085\\3\\2\\2\\2\\u0085\\21\\3\\2\"\n-          + \"\\2\\2\\u0086\\u0087\\7\\5\\2\\2\\u0087\\u008c\\5\\36\\20\\2\\u0088\\u0089\\7&\\2\\2\\u0089\"\n-          + \"\\u008b\\5\\36\\20\\2\\u008a\\u0088\\3\\2\\2\\2\\u008b\\u008e\\3\\2\\2\\2\\u008c\\u008a\\3\"\n-          + \"\\2\\2\\2\\u008c\\u008d\\3\\2\\2\\2\\u008d\\23\\3\\2\\2\\2\\u008e\\u008c\\3\\2\\2\\2\\u008f\"\n-          + \"\\u0091\\5\\30\\r\\2\\u0090\\u0092\\5\\22\\n\\2\\u0091\\u0090\\3\\2\\2\\2\\u0091\\u0092\\3\"\n-          + \"\\2\\2\\2\\u0092\\25\\3\\2\\2\\2\\u0093\\u0095\\5\\30\\r\\2\\u0094\\u0096\\5\\22\\n\\2\\u0095\"\n-          + \"\\u0094\\3\\2\\2\\2\\u0095\\u0096\\3\\2\\2\\2\\u0096\\27\\3\\2\\2\\2\\u0097\\u0098\\7\\'\\2\"\n-          + \"\\2\\u0098\\u0099\\5\\34\\17\\2\\u0099\\u009a\\7(\\2\\2\\u009a\\31\\3\\2\\2\\2\\u009b\\u009c\"\n-          + \"\\5\\34\\17\\2\\u009c\\33\\3\\2\\2\\2\\u009d\\u00a0\\7\\4\\2\\2\\u009e\\u00a0\\5> \\2\\u009f\"\n-          + \"\\u009d\\3\\2\\2\\2\\u009f\\u009e\\3\\2\\2\\2\\u00a0\\u00a1\\3\\2\\2\\2\\u00a1\\u00a2\\7\\26\"\n-          + \"\\2\\2\\u00a2\\u00a3\\5\\36\\20\\2\\u00a3\\35\\3\\2\\2\\2\\u00a4\\u00a5\\5 \\21\\2\\u00a5\"\n-          + \"\\37\\3\\2\\2\\2\\u00a6\\u00a7\\b\\21\\1\\2\\u00a7\\u00a8\\7\\r\\2\\2\\u00a8\\u00ae\\5 \\21\"\n-          + \"\\7\\u00a9\\u00aa\\7/\\2\\2\\u00aa\\u00ab\\7\\17\\2\\2\\u00ab\\u00ae\\5\\30\\r\\2\\u00ac\"\n-          + \"\\u00ae\\5\\\"\\22\\2\\u00ad\\u00a6\\3\\2\\2\\2\\u00ad\\u00a9\\3\\2\\2\\2\\u00ad\\u00ac\\3\"\n-          + \"\\2\\2\\2\\u00ae\\u00b7\\3\\2\\2\\2\\u00af\\u00b0\\f\\4\\2\\2\\u00b0\\u00b1\\7\\3\\2\\2\\u00b1\"\n-          + \"\\u00b6\\5 \\21\\5\\u00b2\\u00b3\\f\\3\\2\\2\\u00b3\\u00b4\\7\\20\\2\\2\\u00b4\\u00b6\\5\"\n-          + \" \\21\\4\\u00b5\\u00af\\3\\2\\2\\2\\u00b5\\u00b2\\3\\2\\2\\2\\u00b6\\u00b9\\3\\2\\2\\2\\u00b7\"\n-          + \"\\u00b5\\3\\2\\2\\2\\u00b7\\u00b8\\3\\2\\2\\2\\u00b8!\\3\\2\\2\\2\\u00b9\\u00b7\\3\\2\\2\\2\"\n-          + \"\\u00ba\\u00c0\\5$\\23\\2\\u00bb\\u00bc\\5$\\23\\2\\u00bc\\u00bd\\5\\60\\31\\2\\u00bd\\u00be\"\n-          + \"\\5$\\23\\2\\u00be\\u00c0\\3\\2\\2\\2\\u00bf\\u00ba\\3\\2\\2\\2\\u00bf\\u00bb\\3\\2\\2\\2\\u00c0\"\n-          + \"#\\3\\2\\2\\2\\u00c1\\u00c2\\b\\23\\1\\2\\u00c2\\u00c4\\5(\\25\\2\\u00c3\\u00c5\\5&\\24\\2\"\n-          + \"\\u00c4\\u00c3\\3\\2\\2\\2\\u00c4\\u00c5\\3\\2\\2\\2\\u00c5\\u00c9\\3\\2\\2\\2\\u00c6\\u00c7\"\n-          + \"\\t\\2\\2\\2\\u00c7\\u00c9\\5$\\23\\5\\u00c8\\u00c1\\3\\2\\2\\2\\u00c8\\u00c6\\3\\2\\2\\2\\u00c9\"\n-          + \"\\u00d2\\3\\2\\2\\2\\u00ca\\u00cb\\f\\4\\2\\2\\u00cb\\u00cc\\t\\3\\2\\2\\u00cc\\u00d1\\5$\"\n-          + \"\\23\\5\\u00cd\\u00ce\\f\\3\\2\\2\\u00ce\\u00cf\\t\\2\\2\\2\\u00cf\\u00d1\\5$\\23\\4\\u00d0\"\n-          + \"\\u00ca\\3\\2\\2\\2\\u00d0\\u00cd\\3\\2\\2\\2\\u00d1\\u00d4\\3\\2\\2\\2\\u00d2\\u00d0\\3\\2\"\n-          + \"\\2\\2\\u00d2\\u00d3\\3\\2\\2\\2\\u00d3%\\3\\2\\2\\2\\u00d4\\u00d2\\3\\2\\2\\2\\u00d5\\u00d7\"\n-          + \"\\7\\r\\2\\2\\u00d6\\u00d5\\3\\2\\2\\2\\u00d6\\u00d7\\3\\2\\2\\2\\u00d7\\u00d8\\3\\2\\2\\2\\u00d8\"\n-          + \"\\u00d9\\t\\4\\2\\2\\u00d9\\u00da\\7)\\2\\2\\u00da\\u00df\\5\\36\\20\\2\\u00db\\u00dc\\7\"\n-          + \"&\\2\\2\\u00dc\\u00de\\5\\36\\20\\2\\u00dd\\u00db\\3\\2\\2\\2\\u00de\\u00e1\\3\\2\\2\\2\\u00df\"\n-          + \"\\u00dd\\3\\2\\2\\2\\u00df\\u00e0\\3\\2\\2\\2\\u00e0\\u00e2\\3\\2\\2\\2\\u00e1\\u00df\\3\\2\"\n-          + \"\\2\\2\\u00e2\\u00e3\\7*\\2\\2\\u00e3\\u00f3\\3\\2\\2\\2\\u00e4\\u00e5\\t\\5\\2\\2\\u00e5\"\n-          + \"\\u00f3\\5.\\30\\2\\u00e6\\u00e7\\t\\5\\2\\2\\u00e7\\u00e8\\7)\\2\\2\\u00e8\\u00ed\\5.\\30\"\n-          + \"\\2\\u00e9\\u00ea\\7&\\2\\2\\u00ea\\u00ec\\5.\\30\\2\\u00eb\\u00e9\\3\\2\\2\\2\\u00ec\\u00ef\"\n-          + \"\\3\\2\\2\\2\\u00ed\\u00eb\\3\\2\\2\\2\\u00ed\\u00ee\\3\\2\\2\\2\\u00ee\\u00f0\\3\\2\\2\\2\\u00ef\"\n-          + \"\\u00ed\\3\\2\\2\\2\\u00f0\\u00f1\\7*\\2\\2\\u00f1\\u00f3\\3\\2\\2\\2\\u00f2\\u00d6\\3\\2\"\n-          + \"\\2\\2\\u00f2\\u00e4\\3\\2\\2\\2\\u00f2\\u00e6\\3\\2\\2\\2\\u00f3\\'\\3\\2\\2\\2\\u00f4\\u00fc\"\n-          + \"\\5.\\30\\2\\u00f5\\u00fc\\5*\\26\\2\\u00f6\\u00fc\\5\\64\\33\\2\\u00f7\\u00f8\\7)\\2\\2\"\n-          + \"\\u00f8\\u00f9\\5\\36\\20\\2\\u00f9\\u00fa\\7*\\2\\2\\u00fa\\u00fc\\3\\2\\2\\2\\u00fb\\u00f4\"\n-          + \"\\3\\2\\2\\2\\u00fb\\u00f5\\3\\2\\2\\2\\u00fb\\u00f6\\3\\2\\2\\2\\u00fb\\u00f7\\3\\2\\2\\2\\u00fc\"\n-          + \")\\3\\2\\2\\2\\u00fd\\u00fe\\5,\\27\\2\\u00fe\\u0107\\7)\\2\\2\\u00ff\\u0104\\5\\36\\20\\2\"\n-          + \"\\u0100\\u0101\\7&\\2\\2\\u0101\\u0103\\5\\36\\20\\2\\u0102\\u0100\\3\\2\\2\\2\\u0103\\u0106\"\n-          + \"\\3\\2\\2\\2\\u0104\\u0102\\3\\2\\2\\2\\u0104\\u0105\\3\\2\\2\\2\\u0105\\u0108\\3\\2\\2\\2\\u0106\"\n-          +\n+    \" \\\"$&(*,.\\60\\62\\64\\668:<>\\2\\13\\3\\2 !\\3\\2\\\"$\\3\\2\\7\\b\\5\\2\\n\\13\\21\\22\\30\"+\n+    \"\\30\\4\\2//\\61\\61\\3\\2\\32\\37\\4\\2\\6\\6\\24\\24\\3\\2/\\60\\4\\2,,//\\u0142\\2@\\3\\2\\2\"+\n+    \"\\2\\4C\\3\\2\\2\\2\\6F\\3\\2\\2\\2\\bP\\3\\2\\2\\2\\nR\\3\\2\\2\\2\\fW\\3\\2\\2\\2\\16l\\3\\2\\2\\2\"+\n+    \"\\20z\\3\\2\\2\\2\\22\\u0086\\3\\2\\2\\2\\24\\u008f\\3\\2\\2\\2\\26\\u0093\\3\\2\\2\\2\\30\\u0097\"+\n+    \"\\3\\2\\2\\2\\32\\u009b\\3\\2\\2\\2\\34\\u009f\\3\\2\\2\\2\\36\\u00a4\\3\\2\\2\\2 \\u00ad\\3\\2\"+\n+    \"\\2\\2\\\"\\u00bf\\3\\2\\2\\2$\\u00c8\\3\\2\\2\\2&\\u00f2\\3\\2\\2\\2(\\u00fb\\3\\2\\2\\2*\\u00fd\"+\n+    \"\\3\\2\\2\\2,\\u010b\\3\\2\\2\\2.\\u0111\\3\\2\\2\\2\\60\\u0113\\3\\2\\2\\2\\62\\u0115\\3\\2\\2\"+\n+    \"\\2\\64\\u0117\\3\\2\\2\\2\\66\\u0126\\3\\2\\2\\28\\u0128\\3\\2\\2\\2:\\u012e\\3\\2\\2\\2<\\u0130\"+\n+    \"\\3\\2\\2\\2>\\u0132\\3\\2\\2\\2@A\\5\\6\\4\\2AB\\7\\2\\2\\3B\\3\\3\\2\\2\\2CD\\5\\36\\20\\2DE\\7\"+\n+    \"\\2\\2\\3E\\5\\3\\2\\2\\2FJ\\5\\b\\5\\2GI\\5\\20\\t\\2HG\\3\\2\\2\\2IL\\3\\2\\2\\2JH\\3\\2\\2\\2J\"+\n+    \"K\\3\\2\\2\\2K\\7\\3\\2\\2\\2LJ\\3\\2\\2\\2MQ\\5\\f\\7\\2NQ\\5\\16\\b\\2OQ\\5\\32\\16\\2PM\\3\\2\"+\n+    \"\\2\\2PN\\3\\2\\2\\2PO\\3\\2\\2\\2Q\\t\\3\\2\\2\\2RS\\7\\27\\2\\2ST\\7\\f\\2\\2TU\\7\\31\\2\\2UV\"+\n+    \"\\58\\35\\2V\\13\\3\\2\\2\\2W`\\7\\23\\2\\2XZ\\5\\22\\n\\2Y[\\5\\n\\6\\2ZY\\3\\2\\2\\2Z[\\3\\2\\2\"+\n+    \"\\2[a\\3\\2\\2\\2\\\\^\\5\\n\\6\\2]_\\5\\22\\n\\2^]\\3\\2\\2\\2^_\\3\\2\\2\\2_a\\3\\2\\2\\2`X\\3\\2\"+\n+    \"\\2\\2`\\\\\\3\\2\\2\\2`a\\3\\2\\2\\2ab\\3\\2\\2\\2bd\\5\\26\\f\\2ce\\5\\26\\f\\2dc\\3\\2\\2\\2ef\"+\n+    \"\\3\\2\\2\\2fd\\3\\2\\2\\2fg\\3\\2\\2\\2gj\\3\\2\\2\\2hi\\7\\25\\2\\2ik\\5\\26\\f\\2jh\\3\\2\\2\\2\"+\n+    \"jk\\3\\2\\2\\2k\\r\\3\\2\\2\\2ln\\7\\t\\2\\2mo\\5\\22\\n\\2nm\\3\\2\\2\\2no\\3\\2\\2\\2op\\3\\2\\2\"+\n+    \"\\2pr\\5\\24\\13\\2qs\\5\\24\\13\\2rq\\3\\2\\2\\2st\\3\\2\\2\\2tr\\3\\2\\2\\2tu\\3\\2\\2\\2ux\\3\"+\n+    \"\\2\\2\\2vw\\7\\25\\2\\2wy\\5\\24\\13\\2xv\\3\\2\\2\\2xy\\3\\2\\2\\2y\\17\\3\\2\\2\\2z{\\7+\\2\\2\"+\n+    \"{\\u0084\\7/\\2\\2|\\u0081\\5 \\21\\2}~\\7&\\2\\2~\\u0080\\5 \\21\\2\\177}\\3\\2\\2\\2\\u0080\"+\n+    \"\\u0083\\3\\2\\2\\2\\u0081\\177\\3\\2\\2\\2\\u0081\\u0082\\3\\2\\2\\2\\u0082\\u0085\\3\\2\\2\"+\n+    \"\\2\\u0083\\u0081\\3\\2\\2\\2\\u0084|\\3\\2\\2\\2\\u0084\\u0085\\3\\2\\2\\2\\u0085\\21\\3\\2\"+\n+    \"\\2\\2\\u0086\\u0087\\7\\5\\2\\2\\u0087\\u008c\\5\\36\\20\\2\\u0088\\u0089\\7&\\2\\2\\u0089\"+\n+    \"\\u008b\\5\\36\\20\\2\\u008a\\u0088\\3\\2\\2\\2\\u008b\\u008e\\3\\2\\2\\2\\u008c\\u008a\\3\"+\n+    \"\\2\\2\\2\\u008c\\u008d\\3\\2\\2\\2\\u008d\\23\\3\\2\\2\\2\\u008e\\u008c\\3\\2\\2\\2\\u008f\"+\n+    \"\\u0091\\5\\30\\r\\2\\u0090\\u0092\\5\\22\\n\\2\\u0091\\u0090\\3\\2\\2\\2\\u0091\\u0092\\3\"+\n+    \"\\2\\2\\2\\u0092\\25\\3\\2\\2\\2\\u0093\\u0095\\5\\30\\r\\2\\u0094\\u0096\\5\\22\\n\\2\\u0095\"+\n+    \"\\u0094\\3\\2\\2\\2\\u0095\\u0096\\3\\2\\2\\2\\u0096\\27\\3\\2\\2\\2\\u0097\\u0098\\7\\'\\2\"+\n+    \"\\2\\u0098\\u0099\\5\\34\\17\\2\\u0099\\u009a\\7(\\2\\2\\u009a\\31\\3\\2\\2\\2\\u009b\\u009c\"+\n+    \"\\5\\34\\17\\2\\u009c\\33\\3\\2\\2\\2\\u009d\\u00a0\\7\\4\\2\\2\\u009e\\u00a0\\5> \\2\\u009f\"+\n+    \"\\u009d\\3\\2\\2\\2\\u009f\\u009e\\3\\2\\2\\2\\u00a0\\u00a1\\3\\2\\2\\2\\u00a1\\u00a2\\7\\26\"+\n+    \"\\2\\2\\u00a2\\u00a3\\5\\36\\20\\2\\u00a3\\35\\3\\2\\2\\2\\u00a4\\u00a5\\5 \\21\\2\\u00a5\"+\n+    \"\\37\\3\\2\\2\\2\\u00a6\\u00a7\\b\\21\\1\\2\\u00a7\\u00a8\\7\\r\\2\\2\\u00a8\\u00ae\\5 \\21\"+\n+    \"\\7\\u00a9\\u00aa\\7/\\2\\2\\u00aa\\u00ab\\7\\17\\2\\2\\u00ab\\u00ae\\5\\30\\r\\2\\u00ac\"+\n+    \"\\u00ae\\5\\\"\\22\\2\\u00ad\\u00a6\\3\\2\\2\\2\\u00ad\\u00a9\\3\\2\\2\\2\\u00ad\\u00ac\\3\"+\n+    \"\\2\\2\\2\\u00ae\\u00b7\\3\\2\\2\\2\\u00af\\u00b0\\f\\4\\2\\2\\u00b0\\u00b1\\7\\3\\2\\2\\u00b1\"+\n+    \"\\u00b6\\5 \\21\\5\\u00b2\\u00b3\\f\\3\\2\\2\\u00b3\\u00b4\\7\\20\\2\\2\\u00b4\\u00b6\\5\"+\n+    \" \\21\\4\\u00b5\\u00af\\3\\2\\2\\2\\u00b5\\u00b2\\3\\2\\2\\2\\u00b6\\u00b9\\3\\2\\2\\2\\u00b7\"+\n+    \"\\u00b5\\3\\2\\2\\2\\u00b7\\u00b8\\3\\2\\2\\2\\u00b8!\\3\\2\\2\\2\\u00b9\\u00b7\\3\\2\\2\\2\"+\n+    \"\\u00ba\\u00c0\\5$\\23\\2\\u00bb\\u00bc\\5$\\23\\2\\u00bc\\u00bd\\5\\60\\31\\2\\u00bd\\u00be\"+\n+    \"\\5$\\23\\2\\u00be\\u00c0\\3\\2\\2\\2\\u00bf\\u00ba\\3\\2\\2\\2\\u00bf\\u00bb\\3\\2\\2\\2\\u00c0\"+\n+    \"#\\3\\2\\2\\2\\u00c1\\u00c2\\b\\23\\1\\2\\u00c2\\u00c4\\5(\\25\\2\\u00c3\\u00c5\\5&\\24\\2\"+\n+    \"\\u00c4\\u00c3\\3\\2\\2\\2\\u00c4\\u00c5\\3\\2\\2\\2\\u00c5\\u00c9\\3\\2\\2\\2\\u00c6\\u00c7\"+\n+    \"\\t\\2\\2\\2\\u00c7\\u00c9\\5$\\23\\5\\u00c8\\u00c1\\3\\2\\2\\2\\u00c8\\u00c6\\3\\2\\2\\2\\u00c9\"+\n+    \"\\u00d2\\3\\2\\2\\2\\u00ca\\u00cb\\f\\4\\2\\2\\u00cb\\u00cc\\t\\3\\2\\2\\u00cc\\u00d1\\5$\"+\n+    \"\\23\\5\\u00cd\\u00ce\\f\\3\\2\\2\\u00ce\\u00cf\\t\\2\\2\\2\\u00cf\\u00d1\\5$\\23\\4\\u00d0\"+\n+    \"\\u00ca\\3\\2\\2\\2\\u00d0\\u00cd\\3\\2\\2\\2\\u00d1\\u00d4\\3\\2\\2\\2\\u00d2\\u00d0\\3\\2\"+\n+    \"\\2\\2\\u00d2\\u00d3\\3\\2\\2\\2\\u00d3%\\3\\2\\2\\2\\u00d4\\u00d2\\3\\2\\2\\2\\u00d5\\u00d7\"+\n+    \"\\7\\r\\2\\2\\u00d6\\u00d5\\3\\2\\2\\2\\u00d6\\u00d7\\3\\2\\2\\2\\u00d7\\u00d8\\3\\2\\2\\2\\u00d8\"+\n+    \"\\u00d9\\t\\4\\2\\2\\u00d9\\u00da\\7)\\2\\2\\u00da\\u00df\\5\\36\\20\\2\\u00db\\u00dc\\7\"+\n+    \"&\\2\\2\\u00dc\\u00de\\5\\36\\20\\2\\u00dd\\u00db\\3\\2\\2\\2\\u00de\\u00e1\\3\\2\\2\\2\\u00df\"+\n+    \"\\u00dd\\3\\2\\2\\2\\u00df\\u00e0\\3\\2\\2\\2\\u00e0\\u00e2\\3\\2\\2\\2\\u00e1\\u00df\\3\\2\"+\n+    \"\\2\\2\\u00e2\\u00e3\\7*\\2\\2\\u00e3\\u00f3\\3\\2\\2\\2\\u00e4\\u00e5\\t\\5\\2\\2\\u00e5\"+\n+    \"\\u00f3\\5.\\30\\2\\u00e6\\u00e7\\t\\5\\2\\2\\u00e7\\u00e8\\7)\\2\\2\\u00e8\\u00ed\\5.\\30\"+\n+    \"\\2\\u00e9\\u00ea\\7&\\2\\2\\u00ea\\u00ec\\5.\\30\\2\\u00eb\\u00e9\\3\\2\\2\\2\\u00ec\\u00ef\"+\n+    \"\\3\\2\\2\\2\\u00ed\\u00eb\\3\\2\\2\\2\\u00ed\\u00ee\\3\\2\\2\\2\\u00ee\\u00f0\\3\\2\\2\\2\\u00ef\"+\n+    \"\\u00ed\\3\\2\\2\\2\\u00f0\\u00f1\\7*\\2\\2\\u00f1\\u00f3\\3\\2\\2\\2\\u00f2\\u00d6\\3\\2\"+\n+    \"\\2\\2\\u00f2\\u00e4\\3\\2\\2\\2\\u00f2\\u00e6\\3\\2\\2\\2\\u00f3\\'\\3\\2\\2\\2\\u00f4\\u00fc\"+\n+    \"\\5.\\30\\2\\u00f5\\u00fc\\5*\\26\\2\\u00f6\\u00fc\\5\\64\\33\\2\\u00f7\\u00f8\\7)\\2\\2\"+\n+    \"\\u00f8\\u00f9\\5\\36\\20\\2\\u00f9\\u00fa\\7*\\2\\2\\u00fa\\u00fc\\3\\2\\2\\2\\u00fb\\u00f4\"+\n+    \"\\3\\2\\2\\2\\u00fb\\u00f5\\3\\2\\2\\2\\u00fb\\u00f6\\3\\2\\2\\2\\u00fb\\u00f7\\3\\2\\2\\2\\u00fc\"+\n+    \")\\3\\2\\2\\2\\u00fd\\u00fe\\5,\\27\\2\\u00fe\\u0107\\7)\\2\\2\\u00ff\\u0104\\5\\36\\20\\2\"+\n+    \"\\u0100\\u0101\\7&\\2\\2\\u0101\\u0103\\5\\36\\20\\2\\u0102\\u0100\\3\\2\\2\\2\\u0103\\u0106\"+\n+    \"\\3\\2\\2\\2\\u0104\\u0102\\3\\2\\2\\2\\u0104\\u0105\\3\\2\\2\\2\\u0105\\u0108\\3\\2\\2\\2\\u0106\"+\n     \"\\u0104\\3\\2\\2\\2\\u0107\\u00ff\\3\\2\\2\\2\\u0107\\u0108\\3\\2\\2\\2\\u0108\\u0109\\3\\2\"+\n-          \"\\2\\2\\u0109\\u010a\\7*\\2\\2\\u010a+\\3\\2\\2\\2\\u010b\\u010c\\t\\6\\2\\2\\u010c-\\3\\2\"\n-          + \"\\2\\2\\u010d\\u0112\\7\\16\\2\\2\\u010e\\u0112\\5:\\36\\2\\u010f\\u0112\\5\\62\\32\\2\\u0110\"\n-          +\n+    \"\\2\\2\\u0109\\u010a\\7*\\2\\2\\u010a+\\3\\2\\2\\2\\u010b\\u010c\\t\\6\\2\\2\\u010c-\\3\\2\"+\n+    \"\\2\\2\\u010d\\u0112\\7\\16\\2\\2\\u010e\\u0112\\5:\\36\\2\\u010f\\u0112\\5\\62\\32\\2\\u0110\"+\n     \"\\u0112\\5<\\37\\2\\u0111\\u010d\\3\\2\\2\\2\\u0111\\u010e\\3\\2\\2\\2\\u0111\\u010f\\3\\2\"+\n-          \"\\2\\2\\u0111\\u0110\\3\\2\\2\\2\\u0112/\\3\\2\\2\\2\\u0113\\u0114\\t\\7\\2\\2\\u0114\\61\\3\"\n-          + \"\\2\\2\\2\\u0115\\u0116\\t\\b\\2\\2\\u0116\\63\\3\\2\\2\\2\\u0117\\u0123\\5\\66\\34\\2\\u0118\"\n-          + \"\\u0119\\7%\\2\\2\\u0119\\u0122\\5\\66\\34\\2\\u011a\\u011c\\7\\'\\2\\2\\u011b\\u011d\\7\"\n-          + \"-\\2\\2\\u011c\\u011b\\3\\2\\2\\2\\u011d\\u011e\\3\\2\\2\\2\\u011e\\u011c\\3\\2\\2\\2\\u011e\"\n-          + \"\\u011f\\3\\2\\2\\2\\u011f\\u0120\\3\\2\\2\\2\\u0120\\u0122\\7(\\2\\2\\u0121\\u0118\\3\\2\"\n-          +\n+    \"\\2\\2\\u0111\\u0110\\3\\2\\2\\2\\u0112/\\3\\2\\2\\2\\u0113\\u0114\\t\\7\\2\\2\\u0114\\61\\3\"+\n+    \"\\2\\2\\2\\u0115\\u0116\\t\\b\\2\\2\\u0116\\63\\3\\2\\2\\2\\u0117\\u0123\\5\\66\\34\\2\\u0118\"+\n+    \"\\u0119\\7%\\2\\2\\u0119\\u0122\\5\\66\\34\\2\\u011a\\u011c\\7\\'\\2\\2\\u011b\\u011d\\7\"+\n+    \"-\\2\\2\\u011c\\u011b\\3\\2\\2\\2\\u011d\\u011e\\3\\2\\2\\2\\u011e\\u011c\\3\\2\\2\\2\\u011e\"+\n+    \"\\u011f\\3\\2\\2\\2\\u011f\\u0120\\3\\2\\2\\2\\u0120\\u0122\\7(\\2\\2\\u0121\\u0118\\3\\2\"+\n     \"\\2\\2\\u0121\\u011a\\3\\2\\2\\2\\u0122\\u0125\\3\\2\\2\\2\\u0123\\u0121\\3\\2\\2\\2\\u0123\"+\n-          \"\\u0124\\3\\2\\2\\2\\u0124\\65\\3\\2\\2\\2\\u0125\\u0123\\3\\2\\2\\2\\u0126\\u0127\\t\\t\\2\"\n-          + \"\\2\\u0127\\67\\3\\2\\2\\2\\u0128\\u012a\\5:\\36\\2\\u0129\\u012b\\7/\\2\\2\\u012a\\u0129\"\n-          + \"\\3\\2\\2\\2\\u012a\\u012b\\3\\2\\2\\2\\u012b9\\3\\2\\2\\2\\u012c\\u012f\\7.\\2\\2\\u012d\\u012f\"\n-          + \"\\7-\\2\\2\\u012e\\u012c\\3\\2\\2\\2\\u012e\\u012d\\3\\2\\2\\2\\u012f;\\3\\2\\2\\2\\u0130\\u0131\"\n-          + \"\\7,\\2\\2\\u0131=\\3\\2\\2\\2\\u0132\\u0133\\t\\n\\2\\2\\u0133?\\3\\2\\2\\2\\'JPZ^`fjntx\"\n-          +\n+    \"\\u0124\\3\\2\\2\\2\\u0124\\65\\3\\2\\2\\2\\u0125\\u0123\\3\\2\\2\\2\\u0126\\u0127\\t\\t\\2\"+\n+    \"\\2\\u0127\\67\\3\\2\\2\\2\\u0128\\u012a\\5:\\36\\2\\u0129\\u012b\\7/\\2\\2\\u012a\\u0129\"+\n+    \"\\3\\2\\2\\2\\u012a\\u012b\\3\\2\\2\\2\\u012b9\\3\\2\\2\\2\\u012c\\u012f\\7.\\2\\2\\u012d\\u012f\"+\n+    \"\\7-\\2\\2\\u012e\\u012c\\3\\2\\2\\2\\u012e\\u012d\\3\\2\\2\\2\\u012f;\\3\\2\\2\\2\\u0130\\u0131\"+\n+    \"\\7,\\2\\2\\u0131=\\3\\2\\2\\2\\u0132\\u0133\\t\\n\\2\\2\\u0133?\\3\\2\\2\\2\\'JPZ^`fjntx\"+\n     \"\\u0081\\u0084\\u008c\\u0091\\u0095\\u009f\\u00ad\\u00b5\\u00b7\\u00bf\\u00c4\\u00c8\"+\n     \"\\u00d0\\u00d2\\u00d6\\u00df\\u00ed\\u00f2\\u00fb\\u0104\\u0107\\u0111\\u011e\\u0121\"+\n     \"\\u0123\\u012a\\u012e\";"
  },
  {
    "sha": "51658feffa9cb3f59c78b4dfbbbe010fcb20684f",
    "filename": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java",
    "status": "modified",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/0dcb1c325dc410aa9d03fab481ea0ee4da936857/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java?ref=0dcb1c325dc410aa9d03fab481ea0ee4da936857",
    "patch": "@@ -67,6 +67,7 @@ public void testStrings() {\n         assertEquals(\"hello\\nworld\", unquoteString(source(\"\\\"hello\\\\nworld\\\"\")));\n         assertEquals(\"hello\\\\\\nworld\", unquoteString(source(\"\\\"hello\\\\\\\\\\\\nworld\\\"\")));\n         assertEquals(\"hello\\\\\\\"world\", unquoteString(source(\"\\\"hello\\\\\\\\\\\\\\\"world\\\"\")));\n+        assertEquals(\"hello\\\\world\", unquoteString(source(\"\\\"hello\\\\world\\\"\")));\n \n         // test for unescaped strings: \"\"\"....\"\"\"\n         assertEquals(\"hello\\\"world\", unquoteString(source(\"\\\"\\\"\\\"hello\\\"world\\\"\\\"\\\"\")));\n@@ -188,6 +189,94 @@ public void testTripleDoubleQuotedUnescapedString() {\n         assertEquals(\"line 1:52: token recognition error at: '\\\"'\", e.getMessage());\n     }\n \n+    public void testStringWithIncorrectUnicodeEscapedChars() {\n+        // Wrong hex digits\n+        ParsingException e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u00U1\\\"\"));\n+        assertEquals(\"line 1:1: token recognition error at: '\\\"\\\\u00U'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u{00AFU1}\\\"\"));\n+        assertEquals(\"line 1:1: token recognition error at: '\\\"\\\\u{00AFU'\", e.getMessage());\n+\n+        // Wrong number of hex digits\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u001\\\"\"));\n+        assertEquals(\"line 1:1: token recognition error at: '\\\"\\\\u001\\\"'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u{D}\\\"\"));\n+        assertEquals(\"line 1:2: Unicode sequence in curly braces should use [2-8] hex digits, [\\\\u{D}] has [1]\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u{00AFD1431}\\\"\"));\n+        assertEquals(\"line 1:2: Unicode sequence in curly braces should use [2-8] hex digits, [\\\\u{00AFD1431}] has [9]\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u{}\\\"\"));\n+        assertEquals(\"line 1:1: token recognition error at: '\\\"\\\\u{}'\", e.getMessage());\n+\n+        // Missing curly brace\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u{DA12\\\"\"));\n+        assertEquals(\"line 1:1: token recognition error at: '\\\"\\\\u{DA12\\\"'\", e.getMessage());\n+\n+        // Missing opening curly brace but with 4 hex digits is accepted,\n+        // as the closing brace on the 5th position is considered a normal char.\n+        assertEquals(new Literal(null, \"Ç°}\", DataTypes.KEYWORD), expr(\"\\\"\\\\u01f0}\\\"\"));\n+\n+        // Invalid unicode\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"\\\"\\\\u{10000000}\\\"\"));\n+        assertEquals(\"line 1:2: Invalid unicode character code [10000000]\", e.getMessage());\n+    }\n+\n+    public void testStringWithUnicodeEscapedChars() {\n+        assertEquals(new Literal(null, \"foo\\\\u123foo\", DataTypes.KEYWORD), expr(\"\\\"foo\\\\\\\\u123foo\\\"\"));\n+        assertEquals(new Literal(null, \"foo\\\\áˆ¿oo\", DataTypes.KEYWORD), expr(\"\\\"foo\\\\\\\\\\\\u123foo\\\"\"));\n+        assertEquals(new Literal(null, \"foo\\\\\\\\u123foo\", DataTypes.KEYWORD), expr(\"\\\"foo\\\\\\\\\\\\\\\\u123foo\\\"\"));\n+        assertEquals(new Literal(null, \"foo\\\\u{123f}oo\", DataTypes.KEYWORD), expr(\"\\\"foo\\\\\\\\u{123f}oo\\\"\"));\n+        assertEquals(new Literal(null, \"foo\\\\áˆ¿oo\", DataTypes.KEYWORD), expr(\"\\\"foo\\\\\\\\\\\\u{123f}oo\\\"\"));\n+        assertEquals(new Literal(null, \"foo\\\\\\\\u{123f}oo\", DataTypes.KEYWORD), expr(\"\\\"foo\\\\\\\\\\\\\\\\u{123f}oo\\\"\"));\n+\n+        String strPadding = randomAlphaOfLength(randomInt(10));\n+        String[][] strings = new String[][] {\n+            { \"\\\\u0021\", \"!\" },\n+            { \"\\\\u{41}\", \"A\" },\n+            { \"\\\\u{075}\", \"u\" },\n+            { \"\\\\u{00eb}\", \"Ã«\" },\n+            { \"\\\\u{1f0}\", \"Ç°\" },\n+            { \"\\\\u0398\", \"Î˜\" },\n+            { \"\\\\u07e1\", \"ß¡\" },\n+            { \"\\\\u{017e1}\", \"áŸ¡\" },\n+            { \"\\\\u2140\", \"â…€\" },\n+            { \"\\\\u{02263}\", \"â‰£\" },\n+            { \"\\\\u{0003289}\", \"ãŠ‰\" },\n+            { \"\\\\u6d89\", \"æ¶‰\" },\n+            { \"\\\\u{00007c71}\", \"ç±±\" },\n+            { \"\\\\u{1680b}\", \"ð– ‹\" },\n+            { \"\\\\u{01f4a9}\", \"ðŸ’©\" },\n+            { \"\\\\u{0010989}\", \"\\uD802\\uDD89\"},\n+            { \"\\\\u0000\", \"\\u0000\"},\n+            { \"\\\\u{00}\", \"\\u0000\"},\n+            { \"\\\\u{000000}\", \"\\u0000\"},\n+            { \"\\\\u{00000000}\", \"\\u0000\"},\n+        };\n+\n+        StringBuilder sbExpected = new StringBuilder();\n+        StringBuilder sbInput = new StringBuilder();\n+        for (String[] str : strings) {\n+            assertEquals(\n+                new Literal(null, strPadding + str[1] + strPadding, DataTypes.KEYWORD),\n+                expr('\"' + strPadding + str[0] + strPadding + '\"')\n+            );\n+\n+            sbInput.append(strPadding).append(str[0]);\n+            sbExpected.append(strPadding).append(str[1]);\n+        }\n+        assertEquals(new Literal(null, sbExpected.toString(), DataTypes.KEYWORD), expr('\"' + sbInput.toString() + '\"'));\n+    }\n+\n     public void testNumbers() {\n         assertEquals(new Literal(null, 8589934592L, DataTypes.LONG), expr(\"8589934592\"));\n         assertEquals(new Literal(null, 5, DataTypes.INTEGER), expr(\"5\"));"
  }
]
