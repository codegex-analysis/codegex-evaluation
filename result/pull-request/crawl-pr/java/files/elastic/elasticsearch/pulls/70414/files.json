[
  {
    "sha": "b92579d2dceb433bc2e0d65ad3c6ab6be2b93bf3",
    "filename": "server/src/internalClusterTest/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java",
    "status": "modified",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/7854ac69ea2d53b5c4ea89945a41fad280b7b6e4/server/src/internalClusterTest/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/7854ac69ea2d53b5c4ea89945a41fad280b7b6e4/server/src/internalClusterTest/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server/src/internalClusterTest/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java?ref=7854ac69ea2d53b5c4ea89945a41fad280b7b6e4",
    "patch": "@@ -26,9 +26,11 @@\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.index.mapper.MapperParsingException;\n+import org.elasticsearch.index.query.QueryBuilders;\n import org.elasticsearch.plugins.Plugin;\n import org.elasticsearch.search.aggregations.AggregationBuilders;\n import org.elasticsearch.search.aggregations.Aggregator.SubAggCollectionMode;\n+import org.elasticsearch.search.collapse.CollapseBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.suggest.completion.CompletionStats;\n import org.elasticsearch.search.suggest.completion.CompletionSuggestion;\n@@ -1217,6 +1219,58 @@ public void testSuggestOnlyExplain() throws Exception {\n         assertSuggestions(searchResponse, \"foo\", \"suggestion10\", \"suggestion9\", \"suggestion8\", \"suggestion7\", \"suggestion6\");\n     }\n \n+    public void testCompletionWithCollapse() throws Exception {\n+        String suggestField = \"suggest_field\";\n+        XContentBuilder mapping = jsonBuilder().startObject()\n+            .startObject(\"properties\")\n+            .startObject(\"collapse_field\")\n+            .field(\"type\", \"keyword\")\n+            .endObject()\n+            .startObject(suggestField)\n+            .field(\"type\", \"completion\")\n+            .field(\"analyzer\", \"whitespace\")\n+            .endObject()\n+            .endObject()\n+            .endObject();\n+\n+        String index = \"test\";\n+        assertAcked(\n+            client().admin()\n+                .indices()\n+                .prepareCreate(index)\n+                .setSettings(Settings.builder().put(\"index.number_of_shards\", 2))\n+                .setMapping(mapping)\n+                .get()\n+        );\n+\n+        int numDocs = 2;\n+        for (int i = 0; i < numDocs; i++) {\n+            XContentBuilder builder = jsonBuilder().startObject();\n+            builder.startObject(suggestField).field(\"input\", \"suggestion\" + i).field(\"weight\", i).endObject();\n+            builder.field(\"collapse_field\", \"collapse me\").endObject();  // all docs the same value for collapsing\n+            client().prepareIndex(index).setId(\"\" + i).setSource(builder).get();\n+        }\n+        client().admin().indices().prepareRefresh(index).get();\n+        CompletionSuggestionBuilder prefix = SuggestBuilders.completionSuggestion(suggestField).prefix(\"sug\").size(1);\n+\n+        SearchResponse searchResponse = client().prepareSearch(\"test\")\n+            .setQuery(QueryBuilders.matchAllQuery())\n+            .setFrom(1)\n+            .setSize(1)\n+            .setCollapse(new CollapseBuilder(\"collapse_field\"))\n+            .suggest(new SuggestBuilder().addSuggestion(\"the_suggestion\", prefix))\n+            .get();\n+        assertAllSuccessful(searchResponse);\n+\n+        assertThat(searchResponse.getSuggest().getSuggestion(\"the_suggestion\"), is(notNullValue()));\n+        Suggest.Suggestion<Suggest.Suggestion.Entry<Suggest.Suggestion.Entry.Option>> suggestion = searchResponse.getSuggest()\n+            .getSuggestion(\"the_suggestion\");\n+\n+        List<String> suggestionList = getNames(suggestion.getEntries().get(0));\n+        assertThat(suggestionList, contains(\"suggestion\" + (numDocs - 1)));\n+        assertEquals(0, searchResponse.getHits().getHits().length);\n+    }\n+\n     public static boolean isReservedChar(char c) {\n         switch (c) {\n             case '\\u001F':"
  },
  {
    "sha": "ab04635dca11909ed2e53751e3b5c25ceee25f80",
    "filename": "server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/7854ac69ea2d53b5c4ea89945a41fad280b7b6e4/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/7854ac69ea2d53b5c4ea89945a41fad280b7b6e4/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java?ref=7854ac69ea2d53b5c4ea89945a41fad280b7b6e4",
    "patch": "@@ -146,11 +146,12 @@ static SortedTopDocs sortDocs(boolean ignoreFrom, final Collection<TopDocs> topD\n         if (topDocs.isEmpty() && reducedCompletionSuggestions.isEmpty()) {\n             return SortedTopDocs.EMPTY;\n         }\n+        // TODO look what we get here\n         final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from);\n         final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs;\n         ScoreDoc[] scoreDocs = mergedScoreDocs;\n+        int numSuggestDocs = 0;\n         if (reducedCompletionSuggestions.isEmpty() == false) {\n-            int numSuggestDocs = 0;\n             for (CompletionSuggestion completionSuggestion : reducedCompletionSuggestions) {\n                 assert completionSuggestion != null;\n                 numSuggestDocs += completionSuggestion.getOptions().size();\n@@ -180,7 +181,7 @@ static SortedTopDocs sortDocs(boolean ignoreFrom, final Collection<TopDocs> topD\n                 isSortedByField = true;\n             }\n         }\n-        return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues);\n+        return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues, numSuggestDocs);\n     }\n \n     static TopDocs mergeTopDocs(Collection<TopDocs> results, int topN, int from) {\n@@ -316,7 +317,8 @@ private SearchHits getHits(ReducedQueryPhase reducedQueryPhase, boolean ignoreFr\n         int from = ignoreFrom ? 0 : reducedQueryPhase.from;\n         int numSearchHits = (int) Math.min(reducedQueryPhase.fetchHits - from, reducedQueryPhase.size);\n         // with collapsing we can have more fetch hits than sorted docs\n-        numSearchHits = Math.min(sortedTopDocs.scoreDocs.length, numSearchHits);\n+        // also we need to take into account that we potentially have completion suggestions stored in the scoreDocs array\n+        numSearchHits = Math.min(sortedTopDocs.scoreDocs.length - sortedTopDocs.numberOfCompletionsSuggestions, numSearchHits);\n         // merge hits\n         List<SearchHit> hits = new ArrayList<>();\n         if (fetchResults.isEmpty() == false) {\n@@ -665,7 +667,7 @@ void add(TopDocsAndMaxScore topDocs, boolean timedOut, Boolean terminatedEarly)\n     }\n \n     static final class SortedTopDocs {\n-        static final SortedTopDocs EMPTY = new SortedTopDocs(EMPTY_DOCS, false, null, null, null);\n+        static final SortedTopDocs EMPTY = new SortedTopDocs(EMPTY_DOCS, false, null, null, null, 0);\n         // the searches merged top docs\n         final ScoreDoc[] scoreDocs;\n         // <code>true</code> iff the result score docs is sorted by a field (not score), this implies that <code>sortField</code> is set.\n@@ -674,14 +676,16 @@ void add(TopDocsAndMaxScore topDocs, boolean timedOut, Boolean terminatedEarly)\n         final SortField[] sortFields;\n         final String collapseField;\n         final Object[] collapseValues;\n+        final int numberOfCompletionsSuggestions;\n \n         SortedTopDocs(ScoreDoc[] scoreDocs, boolean isSortedByField, SortField[] sortFields,\n-                      String collapseField, Object[] collapseValues) {\n+                      String collapseField, Object[] collapseValues, int numberOfCompletionsSuggestions) {\n             this.scoreDocs = scoreDocs;\n             this.isSortedByField = isSortedByField;\n             this.sortFields = sortFields;\n             this.collapseField = collapseField;\n             this.collapseValues = collapseValues;\n+            this.numberOfCompletionsSuggestions = numberOfCompletionsSuggestions;\n         }\n     }\n }"
  }
]
