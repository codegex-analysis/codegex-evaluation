[
  {
    "sha": "9828234c8c08145a4953d3c3bed5c2afa6b74119",
    "filename": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/GlobalOrdinalValuesSource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/f0194463ef17fea2244252b5804e1bbcec3c9a5a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/GlobalOrdinalValuesSource.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/f0194463ef17fea2244252b5804e1bbcec3c9a5a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/GlobalOrdinalValuesSource.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/GlobalOrdinalValuesSource.java?ref=f0194463ef17fea2244252b5804e1bbcec3c9a5a",
    "patch": "@@ -92,7 +92,9 @@ void setAfter(Comparable value) {\n         if (missingBucket && value == null) {\n             afterValue = null;\n             afterValueGlobalOrd = -1L;\n-        } else if (value.getClass() == String.class) {\n+        } else if (value.getClass() == String.class || (missingBucket && fieldType == null)) {\n+            // the value might be not string if we this field is missing in this shard but present in other shards\n+            // and doesn't have a string type\n             afterValue = format.parseBytesRef(value.toString());\n         } else {\n             throw new IllegalArgumentException(\"invalid value, expected string, got \" + value.getClass().getSimpleName());"
  },
  {
    "sha": "41161878654c17b7dee006d5e74e34318e52936e",
    "filename": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregatorTests.java",
    "status": "modified",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/f0194463ef17fea2244252b5804e1bbcec3c9a5a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregatorTests.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/f0194463ef17fea2244252b5804e1bbcec3c9a5a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregatorTests.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/server/src/test/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeAggregatorTests.java?ref=f0194463ef17fea2244252b5804e1bbcec3c9a5a",
    "patch": "@@ -433,6 +433,102 @@ public void testUnmappedFieldWithDateHistogram() throws Exception {\n         );\n     }\n \n+    public void testUnmappedFieldWithLongs() throws Exception {\n+        final List<Map<String, List<Object>>> dataset = new ArrayList<>();\n+        dataset.addAll(\n+            Arrays.asList(\n+                createDocument(\"long\", 1L),\n+                createDocument(\"long\", 3L),\n+                createDocument(\"long\", 1L),\n+                createDocument(\"long\", 4L),\n+                createDocument(\"long\", 3L)\n+            )\n+        );\n+\n+        testSearchCase(Arrays.asList(new MatchAllDocsQuery(), new DocValuesFieldExistsQuery(\"long\")), dataset,\n+            () -> new CompositeAggregationBuilder(\"name\",\n+                Arrays.asList(\n+                    new TermsValuesSourceBuilder(\"unmapped\").field(\"unmapped\")\n+                )\n+            ),\n+            (result) -> {\n+                assertEquals(0, result.getBuckets().size());\n+            }\n+        );\n+\n+        testSearchCase(Arrays.asList(new MatchAllDocsQuery(), new DocValuesFieldExistsQuery(\"long\")), dataset,\n+            () -> new CompositeAggregationBuilder(\"name\",\n+                Arrays.asList(\n+                    new TermsValuesSourceBuilder(\"unmapped\").field(\"unmapped\").missingBucket(true)\n+                )\n+            ),\n+            (result) -> {\n+                assertEquals(1, result.getBuckets().size());\n+                assertEquals(\"{unmapped=null}\", result.afterKey().toString());\n+                assertEquals(\"{unmapped=null}\", result.getBuckets().get(0).getKeyAsString());\n+                assertEquals(5L, result.getBuckets().get(0).getDocCount());\n+            }\n+        );\n+\n+        testSearchCase(Arrays.asList(new MatchAllDocsQuery(), new DocValuesFieldExistsQuery(\"long\")), dataset,\n+            () -> new CompositeAggregationBuilder(\"name\",\n+                Arrays.asList(\n+                    new TermsValuesSourceBuilder(\"unmapped\").field(\"unmapped\").missingBucket(true)\n+                )).aggregateAfter(Collections.singletonMap(\"unmapped\", null)),\n+            (result) -> {\n+                assertEquals(0, result.getBuckets().size());\n+            }\n+        );\n+\n+        testSearchCase(Arrays.asList(new MatchAllDocsQuery(), new DocValuesFieldExistsQuery(\"long\")), dataset,\n+            () -> new CompositeAggregationBuilder(\"name\",\n+                Arrays.asList(\n+                    new TermsValuesSourceBuilder(\"long\").field(\"long\"),\n+                    new TermsValuesSourceBuilder(\"unmapped\").field(\"unmapped\")\n+                )\n+            ),\n+            (result) -> {\n+                assertEquals(0, result.getBuckets().size());\n+            }\n+        );\n+\n+        testSearchCase(Arrays.asList(new MatchAllDocsQuery(), new DocValuesFieldExistsQuery(\"long\")), dataset,\n+            () -> new CompositeAggregationBuilder(\"name\",\n+                Arrays.asList(\n+                    new TermsValuesSourceBuilder(\"long\").field(\"long\"),\n+                    new TermsValuesSourceBuilder(\"unmapped\").field(\"unmapped\").missingBucket(true)\n+                )\n+            ),\n+            (result) -> {\n+                assertEquals(3, result.getBuckets().size());\n+                assertEquals(\"{long=4, unmapped=null}\", result.afterKey().toString());\n+                assertEquals(\"{long=1, unmapped=null}\", result.getBuckets().get(0).getKeyAsString());\n+                assertEquals(2L, result.getBuckets().get(0).getDocCount());\n+                assertEquals(\"{long=3, unmapped=null}\", result.getBuckets().get(1).getKeyAsString());\n+                assertEquals(2L, result.getBuckets().get(1).getDocCount());\n+                assertEquals(\"{long=4, unmapped=null}\", result.getBuckets().get(2).getKeyAsString());\n+                assertEquals(1L, result.getBuckets().get(2).getDocCount());\n+            }\n+        );\n+\n+        testSearchCase(Arrays.asList(new MatchAllDocsQuery(), new DocValuesFieldExistsQuery(\"long\")), dataset,\n+            () -> new CompositeAggregationBuilder(\"name\",\n+                Arrays.asList(\n+                    new TermsValuesSourceBuilder(\"long\").field(\"long\"),\n+                    new TermsValuesSourceBuilder(\"unmapped\").field(\"unmapped\").missingBucket(true)\n+                )\n+            ).aggregateAfter(Map.of(\"long\", 1, \"unmapped\", randomFrom(randomBoolean(), 1, \"b\"))),\n+            (result) -> {\n+                assertEquals(2, result.getBuckets().size());\n+                assertEquals(\"{long=4, unmapped=null}\", result.afterKey().toString());\n+                assertEquals(\"{long=3, unmapped=null}\", result.getBuckets().get(0).getKeyAsString());\n+                assertEquals(2L, result.getBuckets().get(0).getDocCount());\n+                assertEquals(\"{long=4, unmapped=null}\", result.getBuckets().get(1).getKeyAsString());\n+                assertEquals(1L, result.getBuckets().get(1).getDocCount());\n+            }\n+        );\n+    }\n+\n     public void testWithKeyword() throws Exception {\n         final List<Map<String, List<Object>>> dataset = new ArrayList<>();\n         dataset.addAll("
  }
]
