[
  {
    "sha": "e01042784737ccacad1da20568005ed56dfe982a",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 17,
    "changes": 18,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/EsType.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -49,23 +49,7 @@\n     GEO_POINT(                ExtraTypes.GEOMETRY),\n     GEO_SHAPE(                ExtraTypes.GEOMETRY),\n     SHAPE(                    ExtraTypes.GEOMETRY),\n-    BOOLEAN_ARRAY(            Types.ARRAY),\n-    BYTE_ARRAY(               Types.ARRAY),\n-    SHORT_ARRAY(              Types.ARRAY),\n-    INTEGER_ARRAY(            Types.ARRAY),\n-    LONG_ARRAY(               Types.ARRAY),\n-    DOUBLE_ARRAY(             Types.ARRAY),\n-    FLOAT_ARRAY(              Types.ARRAY),\n-    HALF_FLOAT_ARRAY(         Types.ARRAY),\n-    SCALED_FLOAT_ARRAY(       Types.ARRAY),\n-    KEYWORD_ARRAY(            Types.ARRAY),\n-    TEXT_ARRAY(               Types.ARRAY),\n-    DATETIME_ARRAY(           Types.ARRAY),\n-    IP_ARRAY(                 Types.ARRAY),\n-    BINARY_ARRAY(             Types.ARRAY),\n-    GEO_SHAPE_ARRAY(          Types.ARRAY),\n-    GEO_POINT_ARRAY(          Types.ARRAY),\n-    SHAPE_ARRAY(              Types.ARRAY);\n+    ARRAY(                    Types.ARRAY);\n \n     private final Integer type;\n "
  },
  {
    "sha": "0127f5678833bf9a5f622e4ab3efd69b0ed9e366",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcColumnInfo.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcColumnInfo.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcColumnInfo.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcColumnInfo.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -19,8 +19,13 @@\n     public final String name;\n     public final int displaySize;\n     public final EsType type;\n+    public final boolean isArray;\n \n     JdbcColumnInfo(String name, EsType type, String table, String catalog, String schema, String label, int displaySize) {\n+        this(name, type, false, table, catalog, schema, label, displaySize);\n+    }\n+\n+    JdbcColumnInfo(String name, EsType type, boolean isArray, String table, String catalog, String schema, String label, int displaySize) {\n         if (name == null) {\n             throw new IllegalArgumentException(\"[name] must not be null\");\n         }\n@@ -41,6 +46,7 @@\n         }\n         this.name = name;\n         this.type = type;\n+        this.isArray = isArray;\n         this.table = table;\n         this.catalog = catalog;\n         this.schema = schema;"
  },
  {
    "sha": "d1f252e9fcc535907b8419c583bb534f2e7714d8",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcHttpClient.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -22,6 +22,7 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Locale;\n \n import static org.elasticsearch.xpack.sql.client.StringUtils.EMPTY;\n \n@@ -114,7 +115,13 @@ private void checkServerVersion() throws SQLException {\n     private List<JdbcColumnInfo> toJdbcColumnInfo(List<ColumnInfo> columns) throws SQLException {\n         List<JdbcColumnInfo> cols = new ArrayList<>(columns.size());\n         for (ColumnInfo info : columns) {\n-            cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(info.esType()), EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize()));\n+            String typeName = info.esType().toLowerCase(Locale.ROOT);\n+            boolean isArray = false;\n+            if (typeName.endsWith(\"_array\")) {\n+                isArray = true;\n+                typeName = typeName.substring(0, typeName.length() - \"_array\".length());\n+            }\n+            cols.add(new JdbcColumnInfo(info.name(), TypeUtils.of(typeName), isArray, EMPTY, EMPTY, EMPTY, EMPTY, info.displaySize()));\n         }\n         return cols;\n     }"
  },
  {
    "sha": "ded78c9f94632d135a6368be9a32555491df92d1",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java",
    "status": "modified",
    "additions": 18,
    "deletions": 5,
    "changes": 23,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -45,8 +45,6 @@\n import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsMillisSinceEpoch;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTimestamp;\n-import static org.elasticsearch.xpack.sql.jdbc.TypeUtils.baseType;\n-import static org.elasticsearch.xpack.sql.jdbc.TypeUtils.isArray;\n \n class JdbcResultSet implements ResultSet, JdbcWrapper {\n \n@@ -111,6 +109,10 @@ private EsType columnType(int columnIndex) {\n         return cursor.columns().get(columnIndex - 1).type;\n     }\n \n+    private boolean columnTypeIsArray(int columnIndex) {\n+        return cursor.columns().get(columnIndex - 1).isArray;\n+    }\n+\n     void checkOpen() throws SQLException {\n         if (isClosed()) {\n             throw new SQLException(\"Closed result set\");\n@@ -421,7 +423,7 @@ public ResultSetMetaData getMetaData() throws SQLException {\n \n     @Override\n     public Object getObject(int columnIndex) throws SQLException {\n-        return convert(columnIndex, null);\n+        return columnTypeIsArray(columnIndex) ? convertArray(columnIndex) : convert(columnIndex, null);\n     }\n \n     @Override\n@@ -433,6 +435,17 @@ public Object getObject(int columnIndex) throws SQLException {\n         return convert(columnIndex, type);\n     }\n \n+    private List<Object> convertArray(int columnIndex) throws SQLException {\n+        Object val = column(columnIndex);\n+\n+        if (val == null) {\n+            return null;\n+        }\n+\n+        EsType columnType = columnType(columnIndex);\n+        return TypeConverter.convertArray(val, columnType, columnType.getName());\n+    }\n+\n     private <T> T convert(int columnIndex, Class<T> type) throws SQLException {\n         Object val = column(columnIndex);\n \n@@ -939,10 +952,10 @@ public Clob getClob(int columnIndex) throws SQLException {\n     @Override\n     public Array getArray(int columnIndex) throws SQLException {\n         EsType type = columnType(columnIndex);\n-        if (isArray(type) == false) {\n+        if (columnTypeIsArray(columnIndex) == false) {\n             throw new SQLException(\"Cannot get column [\" + columnIndex + \"] of type [\" + type.getName() + \"] as array\");\n         }\n-        return new JdbcArray(timeZone, baseType(type), (List<?>) getObject(columnIndex));\n+        return new JdbcArray(timeZone, type, (List<?>) getObject(columnIndex));\n     }\n \n     @Override"
  },
  {
    "sha": "fbc1fdbf3d9011c08472e4dce115abd8f441fb8e",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSetMetaData.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSetMetaData.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSetMetaData.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSetMetaData.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -8,6 +8,7 @@\n \n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n+import java.sql.Types;\n import java.util.List;\n import java.util.Locale;\n \n@@ -110,12 +111,12 @@ public String getCatalogName(int column) throws SQLException {\n \n     @Override\n     public int getColumnType(int column) throws SQLException {\n-        return column(column).type.getVendorTypeNumber();\n+        return column(column).isArray ? Types.ARRAY : column(column).type.getVendorTypeNumber();\n     }\n \n     @Override\n     public String getColumnTypeName(int column) throws SQLException {\n-        return column(column).type.getName();\n+        return column(column).type.getName() + (column(column).isArray ? \"_ARRAY\" : \"\");\n     }\n \n     @Override"
  },
  {
    "sha": "8abcc65fd4a79cfa1acf554f804f334a7a280f6d",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java",
    "status": "modified",
    "additions": 9,
    "deletions": 25,
    "changes": 34,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -48,7 +48,6 @@\n import static org.elasticsearch.xpack.sql.jdbc.EsType.TIME;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.asDateTimeField;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;\n-import static org.elasticsearch.xpack.sql.jdbc.TypeUtils.baseType;\n \n /**\n  * Conversion utilities for conversion of JDBC types to Java type and back\n@@ -210,6 +209,15 @@ static long convertFromCalendarToUTC(long value, Calendar cal) {\n         return failConversion(val, columnType, typeString, type);\n     }\n \n+    static List<Object> convertArray(Object v, EsType columnBaseType, String typeString) throws SQLException {\n+        List<Object> values = new ArrayList<>();\n+        for (Object o : (List<?>) v) {\n+            // null value expects a NULL type in the converter\n+            values.add(o == null ? null : convert(o, columnBaseType, typeString));\n+        }\n+        return values;\n+    }\n+\n     /**\n      * Converts the object from JSON representation to the specified JDBCType\n      */\n@@ -266,32 +274,8 @@ static Object convert(Object v, EsType columnType, String typeString) throws SQL\n                 }\n             case IP:\n                 return v.toString();\n-            case BOOLEAN_ARRAY:\n-            case BYTE_ARRAY:\n-            case SHORT_ARRAY:\n-            case INTEGER_ARRAY:\n-            case LONG_ARRAY:\n-            case DOUBLE_ARRAY:\n-            case FLOAT_ARRAY:\n-            case HALF_FLOAT_ARRAY:\n-            case SCALED_FLOAT_ARRAY:\n-            case KEYWORD_ARRAY:\n-            case TEXT_ARRAY:\n-            case DATETIME_ARRAY:\n-            case IP_ARRAY:\n-            case BINARY_ARRAY:\n-            case GEO_SHAPE_ARRAY:\n-            case GEO_POINT_ARRAY:\n-            case SHAPE_ARRAY:\n-                List<Object> values = new ArrayList<>();\n-                for (Object o : (List<?>) v) {\n-                    // null value expects a NULL type in the converter\n-                    values.add(o == null ? null : convert(o, baseType(columnType), typeString.substring(0, \"_ARRAY\".length())));\n-                }\n-                return values;\n             default:\n                 throw new SQLException(\"Unexpected column type [\" + typeString + \"]\");\n-\n         }\n     }\n "
  },
  {
    "sha": "a1ac2b45227a564cc73a0638cdc9932c319ec88a",
    "filename": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeUtils.java",
    "status": "modified",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeUtils.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeUtils.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeUtils.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -12,7 +12,6 @@\n import java.sql.SQLFeatureNotSupportedException;\n import java.sql.SQLType;\n import java.sql.Timestamp;\n-import java.sql.Types;\n import java.time.Duration;\n import java.time.LocalDateTime;\n import java.time.Period;\n@@ -177,22 +176,4 @@ static EsType of(Class<? extends Object> clazz) throws SQLException {\n         }\n         return dataType;\n     }\n-\n-    static EsType baseType(EsType type) throws SQLException {\n-        String typeName = type.getName();\n-        return isArray(type)\n-            ? of(typeName.substring(0, typeName.length() - \"_ARRAY\".length()).toLowerCase(Locale.ROOT))\n-            : type;\n-    }\n-\n-    static EsType arrayOf(EsType type) throws SQLException {\n-        if (isArray(type)) {\n-            throw new SQLException(\"multidimentional array types not supported\");\n-        }\n-        return ENUM_NAME_TO_TYPE.get(type.name().toLowerCase(Locale.ROOT) + \"_array\");\n-    }\n-\n-    static boolean isArray(EsType type) {\n-        return type.getVendorTypeNumber() == Types.ARRAY;\n-    }\n }"
  },
  {
    "sha": "893f139e11ad4e57088d7d7e086024393071da25",
    "filename": "x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcArrayTests.java",
    "status": "modified",
    "additions": 30,
    "deletions": 14,
    "changes": 44,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcArrayTests.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcArrayTests.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcArrayTests.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -14,7 +14,6 @@\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n import java.sql.Types;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n@@ -24,35 +23,52 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n import static java.util.Collections.emptyMap;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.BINARY;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.BOOLEAN;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.BYTE;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.DATETIME;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.DOUBLE;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.FLOAT;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.GEO_POINT;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.GEO_SHAPE;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.HALF_FLOAT;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.INTEGER;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.IP;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.KEYWORD;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.LONG;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.SCALED_FLOAT;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.SHAPE;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.SHORT;\n+import static org.elasticsearch.xpack.sql.jdbc.EsType.TEXT;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcConfiguration.DEFAULT_URI;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcConfiguration.TIME_ZONE;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcConfiguration.URL_PREFIX;\n-import static org.elasticsearch.xpack.sql.jdbc.TypeUtils.baseType;\n \n public class JdbcArrayTests extends ESTestCase {\n \n-    static final List<EsType> ARRAY_TYPES = Arrays.stream(EsType.values()).filter(TypeUtils::isArray).collect(Collectors.toList());\n-\n     public void testMetaData() throws Exception {\n-        for (EsType arrayType : ARRAY_TYPES) {\n-            Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(arrayType), emptyList());\n+        List<EsType> types = asList(BOOLEAN, BYTE, SHORT, INTEGER, LONG, DOUBLE, FLOAT, HALF_FLOAT, SCALED_FLOAT, KEYWORD,\n+            TEXT, DATETIME, IP, BINARY, GEO_SHAPE, GEO_POINT, SHAPE);\n+\n+        for (EsType esType : types) {\n+            Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), esType, emptyList());\n \n-            assertEquals(baseType(arrayType).getVendorTypeNumber().intValue(), array.getBaseType());\n-            assertEquals(baseType(arrayType).getName(), array.getBaseTypeName());\n+            assertEquals(esType.getVendorTypeNumber().intValue(), array.getBaseType());\n+            assertEquals(esType.getName(), array.getBaseTypeName());\n         }\n     }\n \n     public void testGetArray() throws SQLException {\n         List<Long> expected = randomList(1, 10, ESTestCase::randomLong);\n-        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(EsType.LONG_ARRAY), expected);\n+        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), LONG, expected);\n \n         List<?> actual = asList((Object[]) array.getArray());\n         assertEquals(expected, actual);\n     }\n \n     public void testArraySlicing() throws SQLException {\n         List<Integer> values = IntStream.rangeClosed(0, 9).boxed().collect(Collectors.toList());\n-        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(EsType.INTEGER_ARRAY), values);\n+        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), INTEGER, values);\n \n         Object[] empty = (Object[]) array.getArray(11, 2);\n         assertEquals(0, empty.length);\n@@ -77,7 +93,7 @@ public void testArraySlicing() throws SQLException {\n     }\n \n     public void testSqlExceptionPastFree() throws SQLException {\n-        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(EsType.LONG_ARRAY), emptyList());\n+        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), LONG, emptyList());\n         array.free();\n \n         List<ThrowingRunnable> calls = asList(array::getBaseTypeName, array::getBaseType, array::getArray,\n@@ -95,7 +111,7 @@ public void testSqlExceptionPastFree() throws SQLException {\n     }\n \n     public void testNonEmptyMapRejected() throws SQLException {\n-        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(EsType.LONG_ARRAY), emptyList());\n+        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), LONG, emptyList());\n         Map<String, Class<?>> map = Map.of(\"foo\", String.class);\n \n         List<ThrowingRunnable> calls = asList(() -> array.getArray(map), () -> array.getArray( 1, 2, map),\n@@ -110,7 +126,7 @@ public void testNonEmptyMapRejected() throws SQLException {\n \n     public void testArrayGetAsResultSet() throws SQLException {\n         List<Integer> expected = randomList(1, 10, ESTestCase::randomInt);\n-        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(EsType.INTEGER_ARRAY), expected);\n+        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), INTEGER, expected);\n \n         ResultSet resultSet = array.getResultSet();\n         // meta\n@@ -131,7 +147,7 @@ public void testArrayGetAsResultSet() throws SQLException {\n \n     public void testArrayGetAsSlicedResultSet() throws SQLException {\n         List<Integer> expected = IntStream.rangeClosed(0, 9).boxed().collect(Collectors.toList());\n-        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), baseType(EsType.INTEGER_ARRAY), expected);\n+        Array array = new JdbcArray(jdbcTestConfiguration().timeZone(), INTEGER, expected);\n         long start = 4;\n         int count = 3;\n         ResultSet resultSet = array.getResultSet(start, count);"
  },
  {
    "sha": "17b4385fbb1d5aabea45001a1800ee804d056878",
    "filename": "x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java",
    "status": "modified",
    "additions": 10,
    "deletions": 9,
    "changes": 19,
    "blob_url": "https://github.com/elastic/elasticsearch/blob/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java",
    "raw_url": "https://github.com/elastic/elasticsearch/raw/87e883ea976978ec1ef523a23dc6abcd4bb6af8c/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java",
    "contents_url": "https://api.github.com/repos/elastic/elasticsearch/contents/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/TypeConverterTests.java?ref=87e883ea976978ec1ef523a23dc6abcd4bb6af8c",
    "patch": "@@ -26,7 +26,6 @@\n \n import static java.util.Arrays.asList;\n import static org.elasticsearch.xpack.sql.jdbc.JdbcTestUtils.nowWithMillisResolution;\n-import static org.elasticsearch.xpack.sql.jdbc.TypeUtils.arrayOf;\n import static org.elasticsearch.xpack.sql.jdbc.TypeUtils.of;\n import static org.hamcrest.Matchers.instanceOf;\n \n@@ -95,16 +94,16 @@ public void testMultiValueConvert() throws Exception {\n             }\n         };\n         List<Object> asFromJson = expected.stream().map(toJsoned).collect(Collectors.toList());\n-        EsType arrayType = expected.get(0) != null\n-            ? arrayOf(of(expected.get(0).getClass()))\n-            : randomFrom(EsType.BOOLEAN_ARRAY, EsType.LONG_ARRAY, EsType.DOUBLE_ARRAY, EsType.KEYWORD_ARRAY, EsType.DATETIME_ARRAY);\n+        EsType arrayBaseType = expected.get(0) != null\n+            ? of(expected.get(0).getClass())\n+            : randomFrom(EsType.BOOLEAN, EsType.LONG, EsType.DOUBLE, EsType.KEYWORD, EsType.DATETIME);\n \n-        assertNotNull(arrayType);\n-        assertEquals(expected, TypeConverter.convert(asFromJson, arrayType, arrayType.getName()));\n+        assertNotNull(arrayBaseType);\n+        assertEquals(expected, TypeConverter.convertArray(asFromJson, arrayBaseType, arrayBaseType.getName()));\n     }\n \n-    public void testMultiValueFailedConversion() throws Exception {\n-        expectThrows(ClassCastException.class, () -> convertAsNative(3L, EsType.LONG_ARRAY));\n+    public void testMultiValueFailedConversion() {\n+        expectThrows(ClassCastException.class, () -> convertAsNative(3L, EsType.ARRAY));\n         expectThrows(ClassCastException.class, () -> convertAsNative(asList(3L), EsType.LONG));\n     }\n \n@@ -117,6 +116,8 @@ private Object convertAsNative(Object value, EsType type) throws Exception {\n         builder.endObject();\n         builder.close();\n         Object copy = XContentHelper.convertToMap(BytesReference.bytes(builder), false, builder.contentType()).v2().get(\"value\");\n-        return TypeConverter.convert(copy, type, type.toString());\n+        return type == EsType.ARRAY\n+            ? TypeConverter.convertArray(copy, type, type.toString())\n+            : TypeConverter.convert(copy, type, type.toString());\n     }\n }"
  }
]
