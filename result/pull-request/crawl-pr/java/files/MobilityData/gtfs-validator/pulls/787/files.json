[
  {
    "sha": "b802808ead571d6ebfaf64df9cd817fe3a0bf185",
    "filename": ".github/workflows/end_to_end.yml",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/.github/workflows/end_to_end.yml",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/.github/workflows/end_to_end.yml",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/.github/workflows/end_to_end.yml?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -40,7 +40,9 @@ jobs:\n           versionTag: ${{ steps.prep.outputs.versionTag }}\n         with:\n           arguments: shadowJar\n-\n+      #- name: Validate dataset from -- ACRONYM #<-- uncomment this line, replace ACRONYM by the name of the agency/publisher acronym\n+      #  run: java -jar application/cli-app/build/libs/*.jar --url DATASET_PUBLIC_URL --input [[[ACRONYM]]].zip --extract pathToExtractedZipContent --output validationResultDirectory #<-- uncomment this line,\n+      #replace ACRONYM and [[[ACRONYM]]] by the agency/publisher acronym. Also replace DATASET_PUBLIC_URL by a public link to a GTFS Schedule zip archive\n       - name: Validate dataset from -- Greater Sydney\n         run: java -jar main/build/libs/*.jar --url https://openmobilitydata.org/p/transport-for-nsw/237/latest/download --output_base output --feed_name au-gs --storage_directory gs.zip\n       - name: Validate dataset from -- SMART"
  },
  {
    "sha": "a962fa1d174b4fd9deb94f1fbbaff68249644153",
    "filename": "ADDING_NEW_RULES.md",
    "status": "removed",
    "additions": 0,
    "deletions": 128,
    "changes": 128,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/fe94763fd046b07e0c79d37cd181fe63d0b73a47/ADDING_NEW_RULES.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/fe94763fd046b07e0c79d37cd181fe63d0b73a47/ADDING_NEW_RULES.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/ADDING_NEW_RULES.md?ref=fe94763fd046b07e0c79d37cd181fe63d0b73a47",
    "patch": "@@ -1,128 +0,0 @@\n-# Adding new rules\n-\n-We will want to add new rules to this validator as the [GTFS spec](https://github.com/google/transit/tree/master/gtfs) and the surrounding applications and tools change.  This page outlines the process of adding new rules to this tool.\n-\n-### I. Prepare for implementation \n-1. Check the list of [currently implemented rules](RULES.md) to make sure the rule doesn't already exist.\n-2. Check the list of [planned future rules](https://github.com/MobilityData/gtfs-validator/issues?q=is%3Aissue+is%3Aopen+label%3A%22new+rule%22) to see if an issue already exists for the proposed rule.\n-    * If no existing issue exists, open a new issue with the [\"new rule\" label](https://github.com/MobilityData/gtfs-validator/issues?q=is%3Aissue+is%3Aopen+label%3A%22new+rule%22).\n-3. Discuss the rule with the community via the Github issue and come to a general consensus on the exact logic, and if it should be an `ERROR` or `WARNING`.  Generally, errors are behavior that directly violate the GTFS documentation.  Warnings are behavior that is not advised (e.g., against best practices) but not explicitly forbidden in the GTSF documentation.\n-4. Implement new rule using the process below\n-\n-For the below example, let's look at implementing a new rule that verify that entries in calendar.txt does not have end_date before start_date\n-\n-If you want to take a look at a complete set of changes that implement this new rule before diving into the instructions, see [this commit on Github](https://github.com/MobilityData/gtfs-validator/commit/1cd810295a3292afd829cc2d16bc6b7a39fe36ed).\n-\n-### II. Add the rule to [`RULES.md`](RULES.md)\n-\n-1. Add the rule to the error or warnings table at the top of [`RULES.md`](RULES.md):\n-\n-~~~\n-| [E032](#E032) | `calendar.txt` `end_date` is before `start_date` |\n-~~~\n-\n-2. Add a definition of that rule at the bottom of the errors or warnings section:\n-\n-~~~\n-<a name=\"E032\"/>\n-\n-### E032 - `calendar.txt` `end_date` is before `start_date`\n-\n-In `calendar.txt`, the `end_date` of a service record must not be earlier than the `start_date`.\n-\n-#### References:\n-* [calendar.txt specification](https://gtfs.org/reference/static/#calendartxt)\n-~~~\n-\n-### III. Add a new `*Notice.java` class for the new rule output\n-\n-All classes that implements rules output are under the [`notice` package](https://github.com/MobilityData/gtfs-validator/tree/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice) of the domain layer.\n-They must extend either `ErrorNotice` or `WarningNotice` and fit the `*Notice` format.\n-\n-1. Add the error code definition to either `ErrorNotice` or `WarningNotice` class located in the [`base`](https://github.com/MobilityData/gtfs-validator/tree/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice/base) package:\n-\n-    `protected static final String E_013 = 13;`\n-\n-2. Add your new class in the [`error`](https://github.com/MobilityData/gtfs-validator/tree/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice/error) or [`warning`](https://github.com/MobilityData/gtfs-validator/tree/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice/warning) package accordingly\n-\n-3. Override and define an `export` method:\n-~~~\n-@Override\n-public void export(final NoticeExporter exporter) throws IOException {\n-    exporter.export(this);\n-}\n-~~~\n-Note: you will have a compiler warning \"Cannot resolve method\" until you complete step III\n-\n-4. Implement your own constructor, calling `super` and passing it `filename`, `code`, `title`, `description` and `entityId`\n-\n-Optional: if your Notice has specific data, you have to do the following for each piece of data:\n-\n-5. Add a key in the form of a static String in [Notice.java](https://github.com/MobilityData/gtfs-validator/blob/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice/base/Notice.java)\n-6. In your class constructor, call the method `putNoticeSpecific`, passing it as parameters the newly defined key and the data\n-\n-Here an example with [CannotParseDateNotice](https://github.com/MobilityData/gtfs-validator/blob/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice/error/CannotParseDateNotice.java) \n-\n-~~~\n-public class CannotParseDateNotice extends ErrorNotice {\n-\n-    public CannotParseDateNotice(String filename, String fieldName, int lineNumber, String rawValue) {\n-        super(filename, E_017,\n-                \"Invalid date value\",\n-                \"Value: '\" + rawValue + \"' of field: \" + fieldName +\n-                        \" with type date can't be parsed in file: \" + filename + \" at row: \" + lineNumber,\n-                null);\n-        putNoticeSpecific(KEY_FIELD_NAME, fieldName);\n-        putNoticeSpecific(KEY_LINE_NUMBER, lineNumber);\n-        putNoticeSpecific(KEY_RAW_VALUE, rawValue);\n-    }\n-\n-    @Override\n-    public void export(final NoticeExporter exporter) throws IOException {\n-        exporter.export(this);\n-    }\n-}\n-~~~\n-\n-### IV. Implement your new rule exportation code\n-\n-1. Add a new definition at the bottom of the [`NoticeExporter` interface](https://github.com/MobilityData/gtfs-validator/blob/master/domain/src/main/java/org/mobilitydata/gtfsvalidator/domain/entity/notice/NoticeExporter.java)\n-\n-2. Add the required code to the interface implementations in the [`exporter` package](https://github.com/MobilityData/gtfs-validator/tree/master/adapter/exporter/src/main/java/org/mobilitydata/gtfsvalidator/exporter) located in the `adapter` module\n-\n-**Note**: JSON export required at a minimum. Leaving the protobuf implementation empty will not lead to your PR being rejected.\n-The mechanism to use the protocol buffer exporter is very similar. At export time, the Notice data must be mapped to a [GTFSProblem](https://github.com/google/transitfeed/blob/cc351b9542b5dd1c75fb570063f36ded3da2bfd7/misc/gtfs_validation.proto)\n-\n-### V. Implement exportation code unit tests\n-\n-Add a new test implementation to the [`*ExporterTest` classes](https://github.com/MobilityData/gtfs-validator/tree/master/adapter/exporter/src/test/java/org/mobilitydata/gtfsvalidator/exporter)\n-\n-### VI. Implement your new rule in a specific use case\n-\n-All rules in the validator are implemented in self-contained classes in the [`usecase` package](https://github.com/MobilityData/gtfs-validator/tree/master/usecase/src/main/java/org/mobilitydata/gtfsvalidator/usecase) located in its own `usecase` module\n-\n-1. Add a class constructor which should take three finalized parameters\n-\n-- A `GtfsDataRepository` from which the feed content can be pulled\n-- A `ValidationResultRepository` to which any warning or error encountered can be pushed\n-- A `Logger` through which execution progress can be reported\n-\n-2. Implement the verification code in the `execute` method pushing instances of your new `Notice` class upon detecting issues.\n-Don't forget to log a meaningful message specifying what rule you are about to validate.\n-\n-\n-### VII. Implement use case unit tests\n-\n-Add a Test class for your new use case in the [use case test module](https://github.com/MobilityData/gtfs-validator/tree/master/usecase/src/test/java/org/mobilitydata/gtfsvalidator/usecase)\n-Those should test for the following\n-- Typical execution on valid data\n-- Each case in which a Notice is built\n-- The actual content of generated notices\n-- Null safety regarding fields defined as optional in the GTFS specification\n-\n-### VIII. Add a way to instantiate, retrieve and execute the use case\n-\n-Instantiation is done through the [`DefaultConfig` class](https://github.com/MobilityData/gtfs-validator/blob/master/config/src/main/java/org/mobilitydata/gtfsvalidator/config/DefaultConfig.java)\n-\n-For the CLI app, retrieval and execution in the [`Main.java` class](https://github.com/MobilityData/gtfs-validator/blob/master/application/cli-app/src/main/java/org/mobilitydata/gtfsvalidator/Main.java)\n-"
  },
  {
    "sha": "d6d5a141ca8a22cfcbafcedc1715814b04840f71",
    "filename": "RULES.md",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/RULES.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/RULES.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/RULES.md?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -49,6 +49,8 @@ public class TripUsageValidator extends FileValidator {\n  \n Note that the notice ID naming conventions changed in `v2` to make contributions of new rules easier by reducing the likelihood of conflicting IDs during parallel development. Please refer to [MIGRATION_V1_V2.md](/docs/MIGRATION_V1_V2.md) for a mapping between v1 and v2 rules.\n \n+<a name=\"definitions\"/>\n+\n ## Definitions\n Notices are split into three categories: `INFO`, `WARNING`, `ERROR`.\n "
  },
  {
    "sha": "8f46edb7ce38b146a27171e2eb5d399b30599bdf",
    "filename": "docs/ARCHITECTURE.md",
    "status": "modified",
    "additions": 112,
    "deletions": 16,
    "changes": 128,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/ARCHITECTURE.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/ARCHITECTURE.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/docs/ARCHITECTURE.md?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -1,9 +1,16 @@\n # Architecture description\n `gtfs-validator` counts three principal modules: [`main`](/main), [`processor`](/processor) and [`core`](/core). These modules dependencies are illustrated in the following diagram:\n-\n ![architecture schema](https://user-images.githubusercontent.com/35747326/101182386-610e9400-3624-11eb-84b9-ec935e44aa2b.png)\n \n-### Main\n+This new architecture leverages `AutoValue` and annotations to auto-generate the following classes used for loading and validation:\n+* all classes used to internally represent GTFS data (such as `GtfsStopTime.java`) \n+* `*Schema.java` (such as `GtfsAgencySchema.java`)\n+* `*Enum.java` (such as `GtfsFrequencyExactTimeEnum.java`)\n+* `*Container.java` (such as `GtfsAgencyTableContainer.java`)\n+* `*Loader.java` (such as `GtfsAgencyTableLoader.java`)\n+* `*ForeignKeyValidator.java` (such as `GtfsAttributionAgencyIdForeignKeyValidator.java`)\n+\n+## Main\n _Depends on: `processor` and `core`_\n \n If you're looking to add new GTFS fields or rules, you'll want to look at this module.\n@@ -14,7 +21,7 @@ Contains:\n - Business logic [validation rules](/main/src/main/java/org/mobilitydata/gtfsvalidator/validator) - Code that validates GTFS field values. You can add new validation rules here.\n - Error [notices](/main/src/main/java/org/mobilitydata/gtfsvalidator/notice) - Containers for information about errors discovered during validation. You can add new notices here when implementing new validation rules.\n   \n-### Processor\n+## Processor\n _Depends on: `core`_\n \n Contains:\n@@ -24,7 +31,7 @@ Contains:\n - GTFS entity classes to generate class names for a given GTFS table\n - Code generators to generate code from annotations found by file analyser (_e.g._ `EnumGenerator`)\n \n-### Core\n+## Core\n _Depends on: nothing_\n \n - Annotation definitions such as `ForeignKey`, `GtfsTable`\n@@ -36,26 +43,115 @@ _Depends on: nothing_\n - `GtfsFeedLoader` to load for a whole GTFS feed with all its CSV files\n - GTFS feed's name\n \n-### Data pipeline 📥➡️♨➡️📤\n+## Data pipeline 📥➡️♨➡️📤\n \n 1️⃣ **Inputs**\n-- Local GTFS archive\n+- A local GTFS archive (zip file) or fully qualified URL from which to download a GTFS archive\n - Command line arguments \n \n-2️⃣  **Validator loading**\n-- locate all validators and load them\n+2️⃣ **Validator loading**\n+- Locate all validators annotated with `@GtfsValidator` and load them\n \n-3️⃣  **Feed loading**\n-- create `GtfsInput`\n-  - read GTFS files\n-  - create `GtfsTableContainer` from data\n+3️⃣ **Feed loading**\n+- Read GTFS files\n+- Create `GtfsTableContainer` from data\n+- Invoke and execute all `SingleEntityValidators` to validate data types, etc.\n \n 4️⃣ **Validators execution**\n-- `SingleEntityValidator` for a given file are invoked and executed as soon as the file is loaded into memory (step 3)\n-- `FileValidator` (for multiple files) are invoked and executed right after the whole GTFS archives is loaded into memory.\n+- Invoke and execute all `FileValidators` in parallel to validate GTFS semantic rules\n  \n 5️⃣ **Notice export**\n 1. Creates path to export notices as specified by command line input `--output` (or `-o`).\n-1. Export notices in `NoticeContainer` as `.json` file. \n+1. Export notices from `NoticeContainer` to two JSON files in the specified directory - `report.json` for validator results and `system_errors.json` for any software errors that occurred during validation. Notices are alphabetically sorted in the `.json` files. \n+\n+## Adding new tables and fields\n+\n+Let's say that you are an agency which for some reason uses `other_file.txt` as an additional table to represent GTFS information, and your goal is to implement validation rule related to this new table.\n+To do so, you would have to:\n+1. add the new table to the validator;\n+1. implement the new validation rules. \n+\n+This section details how existing table are defined and gives information on annotation usage. One can then transpose these explanations to add a new table or field. Let's take a look at [`GtfsCalendarSchema`](../main/src/main/java/org/mobilitydata/gtfsvalidator/table/GtfsCalendarSchema.java):\n+\n+```java\n+package org.mobilitydata.gtfsvalidator.table;\n+\n+import org.mobilitydata.gtfsvalidator.annotation.ConditionallyRequired;\n+import org.mobilitydata.gtfsvalidator.annotation.EndRange;\n+import org.mobilitydata.gtfsvalidator.annotation.FieldType;\n+import org.mobilitydata.gtfsvalidator.annotation.FieldTypeEnum;\n+import org.mobilitydata.gtfsvalidator.annotation.GtfsTable;\n+import org.mobilitydata.gtfsvalidator.annotation.PrimaryKey;\n+import org.mobilitydata.gtfsvalidator.annotation.Required;\n+import org.mobilitydata.gtfsvalidator.type.GtfsDate;\n+\n+@GtfsTable(\"calendar.txt\")\n+@ConditionallyRequired\n+public interface GtfsCalendarSchema extends GtfsEntity {\n+  @FieldType(FieldTypeEnum.ID)\n+  @PrimaryKey\n+  @Required\n+  String serviceId();\n+\n+  @Required\n+  GtfsCalendarService monday();\n+\n+  @Required\n+  GtfsCalendarService tuesday();\n+\n+  @Required\n+  GtfsCalendarService wednesday();\n+\n+  @Required\n+  GtfsCalendarService thursday();\n+\n+  @Required\n+  GtfsCalendarService friday();\n+\n+  @Required\n+  GtfsCalendarService saturday();\n+\n+  @Required\n+  GtfsCalendarService sunday();\n+\n+  @Required\n+  @EndRange(field = \"end_date\", allowEqual = true)\n+  GtfsDate startDate();\n+\n+  @Required\n+  GtfsDate endDate();\n+}\n+```\n+\n+By order of appearance in the interface definition:\n+* `@GtfsTable`: annotates the interface that defines schema for `calendar.txt` - The [`processor`](../processor) will generates data classes, loaders and validators based on annotations on this GTFS schema interface. \n+* `@ConditionallyRequired`: hints that this file is conditionally required.\n+* `@FieldType`: specifies `calendar_service_id` is defined as an ID by the GTFS specification. \n+* `@PrimaryKey`: specifies `calendar_service_id` is the primary key of this table.\n+* `@Required`: specifies a value for `calendar_service_id` is required - A notice will be issued at the parsing stage. \n+* `@EndRange`: specifies `endDate` is the end point for the date range defined by `calendar.start_date` and `calendar.end_time` - A validator will be generated and check if `calendar.start_date` is before or equal to `calendar.end_date`. \n+ \n+## Annotations definitions\n \n-🔚 **Output: validation result report** \n+| Annotation                                                                                                          \t| Definition                                                                                                                                                              \t|\n+|---------------------------------------------------------------------------------------------------------------------\t|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t|\n+| [CachedField](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/CachedField.java)                     \t| Enables caching of values for a given field to optimize memory usage.                                                                                                   \t|\n+| [ConditionallyRequired](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/ConditionallyRequired.java) \t| A hint that a field or a file is required.                                                                                                                              \t|\n+| [DefaultValue](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/DefaultValue.java)                   \t| Specifies a default value for a particular GTFS field.                                                                                                                  \t|\n+| [EndRange](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/EndRange.java)                           \t| Specifies a field for the end point of a date or time range.                                                                                                            \t|\n+| [FieldType](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/FieldType.java)                         \t| Specifies type of a GTFS field, e.g., [`COLOR`](http://gtfs.org/reference/static#field-types) or [`LATITUDE`](http://gtfs.org/reference/static#field-types).            \t|\n+| [FirstKey](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/FirstKey.java)                           \t| Specifies the first part of a composite key in tables like `stop_times.txt` (`trip_id`).                                                                                \t|\n+| [ForeignKey](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/ForeignKey.java)                       \t| Specifies a reference to a foreign key.                                                                                                                                 \t|\n+| [Generated](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/Generated.java)                         \t| Marker for all classes generated by annotation processor.                                                                                                               \t|\n+| [GtfsEnumValue](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/GtfsEnumValue.java)                 \t| Specifies a value for a GTFS enum.                                                                                                                                      \t|\n+| [GtfsEnumValues](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/GtfsEnumValues.java)               \t| It is necessary for making GtfsEnumValue annotation repeatable.                                                                                                         \t|\n+| [GtfsLoader](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/GtfsLoader.java)                       \t| This annotation is placed by annotation processor on generated classes that load individual GTFS files, e.g., `stops.txt`. This annotation should not be used directly. \t|\n+| [GtfsTable](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/GtfsTable.java)                         \t| Annotates an interface that defines schema for a single GTFS table, such as `stops.txt`.                                                                                \t|\n+| [GtfsValidator](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/GtfsValidator.java)                 \t| Annotates both custom and automatically generated validators to make them discoverable on the fly.                                                                      \t|\n+| [Index](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/Index.java)                                 \t| Asks annotation processor to create an index for quick search on a given field. The field does not need to have unique values.                                          \t|\n+| [NonNegative](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/NonNegative.java)                     \t| Generates a validation that an integer or a double (float) field is not negative.                                                                                       \t|\n+| [NonZero](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/NonZero.java)                             \t| Generates a validation that an integer or a double (float) field is not zero.                                                                                           \t|\n+| [Positive](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/Positive.java)                           \t| Generates a validation that an integer or a double (float) field is positive.                                                                                           \t|\n+| [PrimaryKey](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/PrimaryKey.java)                       \t| Specifies the primary key in a GTFS table. This also adds a validation that all values are unique.                                                                      \t|\n+| [Required](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/Required.java)                           \t| Adds a validation that the field or a file is required.                                                                                                                 \t|\n+| [SequenceKey](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/SequenceKey.java)                     \t| Specifies the second part of a composite key in tables like `stop_times.txt` (stop_sequence). This annotation needs to be used in a combination with `@FirstKey.`       \t|"
  },
  {
    "sha": "5079b4371702a6a1bd10b5086e76203d50be74a8",
    "filename": "docs/CONTRIBUTING.md",
    "status": "modified",
    "additions": 19,
    "deletions": 6,
    "changes": 25,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/CONTRIBUTING.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/CONTRIBUTING.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/docs/CONTRIBUTING.md?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -1,14 +1,27 @@\n-# Contribution guidelines [WIP]\n+# Contribution guidelines \n \n-## How to contribute to project? [Coming soon]\n+## How to contribute to project? \n+All contributions to this project are welcome. To propose changes, we encourage contributors to:\n+1. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) this project on GitHub\n+1. Create a new branch, and\n+1. Propose their changes by opening a [new pull request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests). \n+\n+If you're looking for somewhere to start, check out the issues labeled [\"Good first issue\"](https://github.com/MobilityData/gtfs-validator/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) or [Community](https://github.com/MobilityData/gtfs-validator/issues?q=is%3Aopen+is%3Aissue+label%3Acommunity).\n+\n+### Issue and PR templates\n+We encourage contributors to format pull request titles following the Conventional Commit Specification.\n \n ## Having problems?\n-Have you encountered an error? A critical step in troubleshooting is being able to reproduct the problem. Instructions to publicly reproduce errors using GitHub Actions can be found in our [guide to reproduce errors.](/docs/REPRODUCE_ERRORS.md)\n+Have you encountered an error? A critical step in troubleshooting is being able to reproduce the problem. Instructions to publicly reproduce errors using GitHub Actions can be found in our [guide to reproduce errors.](/docs/REPRODUCE_ERRORS.md)\n+\n+## Code template\n \n-## Code template [Coming soon]\n+### Coding style\n+\"Sticking to a single consistent and documented coding style for this project is important to ensure that code reviewers dedicate their attention to the functionality of the validation, as opposed to disagreements about the coding style (and avoid [bike-shedding](https://en.wikipedia.org/wiki/Law_of_triviality)).\" \n+This project uses the [Google Java Style](https://google.github.io/styleguide/javaguide.html). IDE plugins to automatically format your code in this style are [here](https://github.com/google/google-java-format).\n \n-## How to add a new validation rule?\n-[NEW_RULES.md](/docs/NEW_RULES.md) gathers instructions to add new validation rules to the validator. Please refer to this documentation for more information.\n+## How do I add a new validation rule?\n+The [\"Adding new rules\" documentation](/docs/NEW_RULES.md) includes instructions for adding new validation rules to the validator.\n  \n ## How to run tests locally\n This project includes unit and end-to-end tests in order to:"
  },
  {
    "sha": "203487c6104a2e54d006bfcda08dad12f0849eea",
    "filename": "docs/NEW_RULES.md",
    "status": "modified",
    "additions": 237,
    "deletions": 39,
    "changes": 276,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/NEW_RULES.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/NEW_RULES.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/docs/NEW_RULES.md?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -1,42 +1,240 @@\n-# How to add a new validation rule _i.e._ a validator?\n-\n-Adding a new validator is relatively simple:\n-1. Create a class for the validator that implements one of the interfaces `FileValidator`, or `SingleEntityValidator`.\n-\n-   💡 Use [`SingleEntityValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/SingleEntityValidator.java) to implement a validation rule that can be applied to a single row from a GTFS file.\n-   \n-   💡 Use [`FileValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/FileValidator.java) to implement a validation rule that handles one as a whole or several files.\n-    \n-1. If needed, inject GTFS tables that will be used during the validation process in the newly created validator as class fields.  \n-1. Write the validation rule logic in overridden `validate` method with the correct set of parameters.\n-\n-## How to test the newly added validator?\n-`gtfs-validator` tests rely on [`JUnit 4`](https://junit.org/junit4/), [`Mockito`](https://site.mockito.org/) and [`Google Truth`](https://github.com/google/truth).\n+# Adding new rules\n+\n+We will want to add new rules to this validator as the static [GTFS specification](http://gtfs.org/reference/static) evolves. This page outlines the process of adding new rules to this tool.\n+\n+## 0. Prepare fr implementation \n+\n+- Check the [list of currently implemented rules](../RULES.md) to make sure the rule doesn't already exist.\n+- Check the [list of planned future rules](https://github.com/MobilityData/gtfs-validator/issues?q=is%3Aopen+is%3Aissue+milestone%3A%22Future+work%22) to see if an issue already exists for the proposed rule.\n+  - If no existing issue exists, open a new issue with the \"new rule\" label.\n+- Discuss the rule with the community via the Github issue and come to a general consensus on the exact logic, and if it should be an `ERROR` or a `WARNING`. See [definitions for ERROR and WARNING](../RULES.md#definitions).\n+- Implement new rule using the process below\n+\n+For the below example, let's look the steps required to implementing existing the rule that makes sure each trip in \"trips.txt\" is used by at least two stops from `stop_times.txt`. If a trip is used by 0 or 1 stop from `stop_times.txt` a `WARNING` should be issued.\n+\n+If you want to take a look at a complete set of changes that implement this new rule before diving into the instructions, see [this commit on Github](https://github.com/MobilityData/gtfs-validator/commit/db42f75b319c9d110bf333d41463c33660d76648#diff-9b25966a77f317daf1d785c2964ed5c9cf4f636f3bbfdb71883541f5c1d7dc06).\n+\n+## 1. Implement the new rule\n+### a. Add the new notice in package `org.mobilitydata.gtfsvalidator.notice`\n+Create a new class and make it extend [`ValidationNotice`](../core/src/main/java/org/mobilitydata/gtfsvalidator/notice/ValidationNotice.java) as follows: \n+```java\n+public class UnusableTripNotice extends ValidationNotice {\n+  public UnusableTripNotice(long csvRowNumber, String tripId) {\n+    super(\n+        ImmutableMap.of(\n+            \"csvRowNumber\", csvRowNumber,\n+            \"tripId\", tripId),\n+        SeverityLevel.WARNING);\n+  }\n+\n+  @Override\n+  public String getCode() {\n+    return \"unusable_trip\";\n+  }\n+}\n+```\n+\n+Notices must specify the severity level: `ERROR`, `WARNING`, or `INFO` (see definitions [here](/RULES.md#definitions). `trip_id` being unique, notices are set up so that the final warning message in the validation report should look like: \n+```json\n+{\n+   \"notices\":[\n+      {\n+         \"code\":\"unusable_trip\",\n+         \"severity\":\"WARNING\",\n+         \"totalNotices\":1,\n+         \"notices\":[\n+            {\n+               \"tripId\":\"3362144\",\n+               \"csvRowNumber\":40150\n+            }\n+        ]\n+     }\n+   ] \n+} \n+```\n+\n+Values for `tripId` and `csvRowNumber` will be different for each generated notice.\n+\n+### b. Determine which `*Validator.java` class the new rule should extend\n+All classes that implement rules should use a name that fits the `*Validator.java` format and must extend either the [`SingleEntityValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/SingleEntityValidator.java), or the [`FileValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/FileValidator.java) class.\n+For efficiency of implementation, multiple rules related to similar fields can be implemented in the same `*Validator.java` class (e.g., to avoid iterating through all rows from GTFS file `stop_times.txt` for each rule).\n+\n+Here are the different classes of `*Validator.java` (all defined in the package `org.mobilitydata.gtfsvalidator.validator`):\n+\n+Some validator as the following are integrated  to the table definitions and automatically generated:\n+* `*ForeignKeyValidator` generated by [`ForeignKeyValidatorGenerator`](../processor/src/main/java/org/mobilitydata/gtfsvalidator/processor/ForeignKeyValidatorGenerator.java) - Examine the integrity of foreign keys for all fields annotated `@ForeignKey`.\n+* `*EndRangeValidator` generated by [`EndRangeValidatorGenerator`](../processor/src/main/java/org/mobilitydata/gtfsvalidator/processor/EndRangeValidatorGenerator.java) - Examine if time or date ranges are in order in tables using `@EndRange` annotation.\n+* `*TableHeaderValidator` generated by [`EndRangeValidatorGenerator`](../processor/src/main/java/org/mobilitydata/gtfsvalidator/processor/EndRangeValidatorGenerator.java) - Examine table headers against a schema.\n+If a new table is added, those rules are automatically generated and implemented by the [table field annotations](../docs/ARCHITECTURE.md#annotations) used in [`*Schema.java`](../main/src/main/java/org/mobilitydata/gtfsvalidator/table). \n+\n+Other validators for less obvious validation rules are manually defined, they extend either a:\n+* [`SingleEntityValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/SingleEntityValidator.java) - Examines GTFS files supposed to contain an unique (e.g `feed_info.txt`).\n+* or a [`FileValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/FileValidator.java) -  Examines one or multiple GTFS files.\n+\n+### c. Implement the validation rule logic\n+This exact process will differ for each rule, but first let's cover some of the basics that are the same across any rule implementation in the `*Validator.validate()` method.\n+⚠ Note that javadocs should be included in all new files, or updated if modifying existing files.\n+\n+<!--suppress ALL -->\n+\n+<a name=\"examples\"/>\n+\n+### [`SingleEntityValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/SingleEntityValidator.java)\n+```java\n+@GtfsValidator\n+public class FeedServiceDateValidator extends SingleEntityValidator<GtfsFeedInfo> {\n+\n+  @Override\n+  public void validate(GtfsFeedInfo feedInfo, NoticeContainer noticeContainer) {\n+    if (feedInfo.hasFeedStartDate() && !feedInfo.hasFeedEndDate()) {\n+      noticeContainer.addValidationNotice(\n+          new MissingFeedInfoDateNotice(feedInfo.csvRowNumber(), \"feed_end_date\"));\n+    } else if (!feedInfo.hasFeedStartDate() && feedInfo.hasFeedEndDate()) {\n+      noticeContainer.addValidationNotice(\n+          new MissingFeedInfoDateNotice(feedInfo.csvRowNumber(), \"feed_start_date\"));\n+    }\n+  }\n+}\n+```\n+The `*Validator.validate()` takes two parameters: \n+* the `GtfsEntity` to validate\n+* the `NoticeContainer` that will store notices generated during the validation process\n+\n+### [`FileValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/validator/FileValidator.java)\n+```java\n+@GtfsValidator\n+public class TripUsabilityValidator extends FileValidator {\n+  private final GtfsTripTableContainer tripTable;\n+  private final GtfsStopTimeTableContainer stopTimeTable;\n+\n+  @Inject\n+  TripUsabilityValidator(\n+      GtfsTripTableContainer tripTable, GtfsStopTimeTableContainer stopTimeTable) {\n+    this.tripTable = tripTable;\n+    this.stopTimeTable = stopTimeTable;\n+  }\n+\n+  @Override\n+  public void validate(NoticeContainer noticeContainer) {\n+    for (GtfsTrip trip : tripTable.getEntities()) {\n+      String tripId = trip.tripId();\n+      if (stopTimeTable.byTripId(tripId).size() <= 1) {\n+        noticeContainer.addValidationNotice(new UnusableTripNotice(trip.csvRowNumber(), tripId));\n+      }\n+    }\n+  }\n+}\n+```\n+The `*Validator.validate()` takes only one parameter: \n+* the `NoticeContainer` that will store notices generated during the validation process\n+\n+All tables used during the validation process should be injected using `@Inject` annotation.\n+\n+### d. Annotations\n+Annotations are commonly used in the validators. As showed by [these examples](#examples), two annotations should be paid attention to when implementing a new rule:\n+\n+More details on annotations [here](../docs/ARCHITECTURE.md#annotations).\n+\n+#### `@GtfsValidator`\n+[`@GtfsValidator`](../core/src/main/java/org/mobilitydata/gtfsvalidator/annotation/GtfsValidator.java) annotates both custom and automatically generated validators to make them discoverable on the fly.\n+\n+#### `@Inject`\n+[`@Inject`](https://docs.oracle.com/javaee/7/api/javax/inject/package-summary.html) identifies injectable constructors.\n+\n+## 2. Document the new rule in [`RULES.md`](../RULES.md)\n+Add the rule [`RULES.md`](../RULES.md) keeping the alphabetical order of the table: \n+```markdown\n+| [NewRuleRelatedToStops](#NewRuleRelatedToStops) | new rule short description | \n+```\n+...and add a definition of that rule in the errors or warnings section (still keeping the alphabetical order):\n+\n+```markdown\n+<a name=\"NewRuleRelatedToStops\"/>\n+\n+### NewRuleRelatedToStops\n+\n+New rule long description\n+\n+#### References:\n+* [stops.txt specification](http://gtfs.org/reference/static#stopstxt)\n+```\n+When the user clicks on the error code in the validator web interface, they are directed to this section of the rules page so they can find out more information about the rule. So, any information that might help an agency or data consumer fix the problem should be included here.\n+\n+## 3. Test the newly added to rule\n+`gtfs-validator` tests rely on [`JUnit 4`](https://junit.org/junit4/), and [`Google Truth`](https://github.com/google/truth).\n+\n+Validators are tested against data samples via [unit tests](https://en.wikipedia.org/wiki/Unit_testing).\n \n ### Test a `SingleEntityValidator` \n-1️⃣ Mock a `NoticeContainer`\n-\n-2️⃣ Mock a `GtfsEntity` and stub its methods that are used in the validator\n-\n-3️⃣ Execute the validator on the mocked `GtfsEntity`\n-\n-4️⃣ Verify interactions with the `NoticeContainer`\n-\n-5️⃣ Verify interactions with the mocked `GtfsEntity` \n-\n+1️⃣ Create a [`GtfsEntity`](../core/src/main/java/org/mobilitydata/gtfsvalidator/table/GtfsEntity.java) via an annex private method: \n+```\n+private GtfsFeedInfo createFeedInfo(GtfsDate feedEndDate) {\n+  return new GtfsFeedInfo.Builder()\n+      .setCsvRowNumber(1)\n+      .setFeedPublisherName(\"feed publisher name value\")\n+      .setFeedPublisherUrl(\"https://www.mobilitydata.org\")\n+      .setFeedLang(Locale.CANADA)\n+      .setFeedEndDate(feedEndDate)\n+      .build();\n+}\n+```\n+\n+2️⃣ Create a [`NoticeContainer`](../core/src/main/java/org/mobilitydata/gtfsvalidator/notice/NoticeContainer.java):\n+```\n+NoticeContainer container = new NoticeContainer();\n+```\n+\n+3️⃣ Execute the validator one the previously defined parameters (`GtfsEntity` and `NoticeContainer`).\n+```\n+validateFeedInfo(createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(7))))\n+```\n+4️⃣ Verify the content of `NoticeContainer`: \n+```\n+assertThat(\n+        validateFeedInfo(createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(7)))))\n+    .containsExactly(\n+        new FeedExpirationDateNotice(\n+            1,\n+            GtfsDate.fromLocalDate(TEST_NOW.toLocalDate()),\n+            GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(7)),\n+            GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(30))));\n+```\n+\n+One can also refer to [`this example`](../main/src/test/java/org/mobilitydata/gtfsvalidator/validator/FeedExpirationDateValidatorTest.java).\n+ \n ### Test a `FileValidator`\n-1️⃣ Create a class constant `NoticeContainer` and annotate it `@Mock`\n-\n-2️⃣ Declare the validator to be tested as a class constat and annotate it `@InjectMocks`: mockito will inject the `NoticeContainer`.\n-\n-3️⃣ Implement `initMocks`  method. Annotate it `@Before` so that it is ran before all tests of the class.\n-\n-4️⃣ Stub all required methods for all mocks used.\n-\n-5️⃣ Verify interactions with the `NoticeContainer`\n-\n-6️⃣ Verify interactions with all mocks\n-\n-## Resources\n-\n-[Use Mockito to Mock Autowired Fields](https://dzone.com/articles/use-mockito-mock-autowired)\n+1️⃣ Create an instance of the validator to test\n+```\n+    TripUsabilityValidator tripUsabilityValidator = new TripUsabilityValidator();\n+```\n+\n+2️⃣ Create the relevant [`GtfsTableContainers`](../core/src/main/java/org/mobilitydata/gtfsvalidator/table/GtfsTableContainer.java) and inject them in the validator\n+```\n+    tripUsabilityValidator.tripTable =\n+        createTripTable(\n+            noticeContainer,\n+            ImmutableList.of(\n+                createTrip(1, \"route id value\", \"service id value\", \"t0\"),\n+                createTrip(3, \"route id value\", \"service id value\", \"t1\")));\n+    tripUsabilityValidator.stopTimeTable =\n+        createStopTimeTable(\n+            noticeContainer,\n+            ImmutableList.of(\n+                createStopTime(0, \"t0\", \"s0\", 2),\n+                createStopTime(2, \"t0\", \"s1\", 3),\n+                createStopTime(0, \"t1\", \"s3\", 5),\n+                createStopTime(2, \"t1\", \"s4\", 9)));\n+```\n+\n+3️⃣ Execute the validator `.validate()` method\n+```\n+    underTest.validate(noticeContainer);\n+```\n+\n+4️⃣ Verify the content of `NoticeContainer`.\n+```\n+    assertThat(noticeContainer.getValidationNotices()).isEmpty();\n+```\n+\n+\n+One can also refer to [`this example`](../main/src/test/java/org/mobilitydata/gtfsvalidator/validator/TripUsabilityValidatorTest.java)."
  },
  {
    "sha": "0aafd23342a8bb5be28082c827716e73a704cd14",
    "filename": "docs/REPRODUCE_ERRORS.md",
    "status": "modified",
    "additions": 9,
    "deletions": 31,
    "changes": 40,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/REPRODUCE_ERRORS.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/REPRODUCE_ERRORS.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/docs/REPRODUCE_ERRORS.md?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -1,39 +1,17 @@\n+## Reproducing errors\n \n-## Fork this repository (detailed instructions)\n-1. go to https://github.com/MobilityData/gtfs-validator\n-1. **click** on the `fork` button on the *top right corner*\n-1. **wait** for the fork creation, you should now see your fork (https://github.com/YOUR_USERNAME/gtfs-validator)\n+Have you encountered a problem when validating a GTFS dataset? The best way for us to troubleshoot this is to reproduce the problem. Please see the steps below for how you can create a \"pull request\" that will run the validator in the GitHub Action environment where we can look at the results together.\n \n-## Create a pull request (PR)\n-1. **navigate** to `.github/workflows/end_to_end.yml`\n-1. **click** the *crayon* icon to enter edit mode\n-1. on line 5, **replace** `transport-agency-name` by something significant like `societe-de-transport-de-montreal` if you were adding a dataset from *STM*\n-1. **keep it around** as you'll need it in *step 11.*\n-1. **uncomment** line 43 by removing the `#` character\n-1. on line 43, **replace** `ACRONYM` by some acronym for the Agency/publisher, in our example that would be `STM`\n-1. **uncomment** line 44 by removing the `#` character\n-1. on line 44, **replace** `[[[ACRONYM]]]` in `[[[ACRONYM]]].zip` by what you put down in step 4 - **NO SPACES OR SPECIAL CHARACTERS -- keep the .zip extension intact**\n-1. on line 44, **replace** `DATASET_PUBLIC_URL` by a *public url* pointing to a [GTFS Schedule](https://gtfs.mobilitydata.org/spec/gtfs-schedule) zip archive\n-1. **click** on the *green* `Start commit` button on the right of the page\n-1. **select the option ` Create a new branch for this commit and start a pull request.`**\n-1. **replace** the proposed default branch name by what you got from *step 7.* Note that the branch name must exactly match the line 5 text (e.g., `societe-de-transport-de-montreal`).\n-1. **click** the *green* `Propose changes` button\n-1. on the next screen, **click** `Create pull request`\n+1. **Navigate** to `.github/workflows/end_to_end.yml`\n+1. **Click** the *crayon* icon to enter edit mode ![crayon](https://user-images.githubusercontent.com/35747326/110543436-51f22300-80f8-11eb-8b0e-80a5a1c59510.png)\n+1. Edit the file `.github/workflows/end_to_end.yml` following instructions on lines 5, 43-45 and **push** on your PR branch (see detailed instructions [here](/docs/REPRODUCE_ERRORS.md#create-a-pull-request-pr))\n+1. Name your branch from the agency/authority/publisher of the feed you are testing\n+![pr-creation](https://user-images.githubusercontent.com/35747326/110543965-01c79080-80f9-11eb-8062-746419a6a2ba.png)\n \n You should now see the workflow `End to end / run-on-data` start automatically in your PR checks, running the validator on the dataset you just added. The validation report is collected as a run artifact in the Actions tab of your fork repository on GitHub.\n \n-## Propose changes (detailed instructions)\n-1. **go** to https://github.com/MobilityData/gtfs-validator\n-1. **select** the `Pull requests` tab\n-1. **click** the *green* `New pull request` button\n-1. in the `Compare changes` section, **click** the *blue* link **compare across forks.**\n-1. on the **left** side of the `←` *base repository:* **should be** `MobilityData/gtfs-validator` and *base:* be `master`\n-1. on the **right** side of the `←` use the first dropdown to **change** *head repository:* to your forked one (like `ilovetramways/gtfs-validator` for GitHub handle `ilovetramways`)\n-1. on the **right** side of the `←` use the second dropdown to **change** *compare:* to **the branch in your fork containing the changes you made to end_to_end.yml that led to an issue**\n-1. **click** the *green* `Create pull request` button\n-1. use the dropdown on the *green* `Create pull request` button to **select `Create draft pull request`**\n-1. **click** the *green* `Draft pull request` button\n+If the workflow run crashes or something doesn't look right in the validation report json file, please open a PR in our repository describing the problem witnessed following the [bug report format](../.github/ISSUE_TEMPLATE/bug_report.md).\n \n-Then we're all set, thk you very very much! The end to end workflow will run on the newly created PR in our repository and automatically collect all relevant information. We take care of everything from then and will follow up directly in the PR.\n+🎉 Thank you very much! The end to end workflow will run on the newly created PR in our repository and automatically collect all relevant information. We will automatically be informed of the newly created PR and will follow up directly in the PR.\n \n While we welcome all contributions, our [members and sponsors](https://mobilitydata.org/members/) see their PRs and issues prioritized."
  },
  {
    "sha": "b143b5a9ff27c7eef2119f4fe5b95c7f6735487b",
    "filename": "docs/USAGE.md",
    "status": "modified",
    "additions": 22,
    "deletions": 8,
    "changes": 30,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/USAGE.md",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/docs/USAGE.md",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/docs/USAGE.md?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -1,11 +1,25 @@\n # Instructions to run the application locally\n- \n- *If you're running a [`v1.x` release JAR file](https://github.com/MobilityData/gtfs-validator/releases) you'll need Java 11, and can follow [these instructions](https://github.com/MobilityData/gtfs-validator/tree/v1.4.0#via-java-on-your-local-computer). The below instructions are for the master branch, which will be v2.0.*\n+*If you're running a [`v1.x` release JAR file](https://github.com/MobilityData/gtfs-validator/releases) you'll need Java 11, and can follow [these instructions](https://github.com/MobilityData/gtfs-validator/tree/v1.4.0#via-java-on-your-local-computer). The below instructions are for the master branch, which will be v2.0.*\n \n-1. Install [Java 8 or higher](https://www.oracle.com/java/technologies/javase-downloads.html)\n-1. Download the latest gtfs-validator JAR file from our [Releases page](https://github.com/MobilityData/gtfs-validator/releases) or snapshot artifact from [GitHub Actions](https://github.com/MobilityData/gtfs-validator/actions?query=branch%3Amaster) or [Circle-CI Pipelines](https://app.circleci.com/pipelines/github/MobilityData/gtfs-validator?branch=master)\n+1. Install [Java 8 or higher](https://www.oracle.com/java/technologies/javase-downloads.html).\n+1. Download the latest gtfs-validator JAR file from our [Releases page](https://github.com/MobilityData/gtfs-validator/releases) or snapshot artifact from [GitHub Actions](https://github.com/MobilityData/gtfs-validator/actions?query=branch%3Amaster).\n \n ## via cli-app\n+**Full list of command line parameters available**\n+\n+| Short name \t| Long name             \t| required? \t| Description                                                                                                               \t|\n+|------------\t|-----------------------\t|-----------\t|---------------------------------------------------------------------------------------------------------------------------\t|\n+| `-i`       \t| `--input`             \t| `false`   \t| Location of the input GTFS ZIP or unarchived directory.                                                                   \t|\n+| `-f`       \t| `--feed_name`         \t| `true`    \t| Name of the feed, e.g., `nl-openov`. It must start from two-letter country code (ISO 3166-1 alpha-2).                     \t|\n+| `-o`       \t| `--output`            \t| `false`   \t| Base directory to store the outputs.                                                                                      \t|\n+| `-s`       \t| `--storage_directory` \t| `false`   \t| Target path where to store the GTFS archive. Downloaded from network (if not provided, the ZIP will be stored in memory). \t|\n+| `-t`       \t| `--threads`           \t| `false`   \t| Number of threads to use.                                                                                                 \t|\n+| `-u`       \t| `--url`               \t| `false`   \t| Fully qualified URL to download GTFS archive.                                                                             \t|\n+\n+⚠️ Note that exactly one of the following options must be provided: `--url` or `--input`.\n+\n+⚠️ Note that `--storage_directory` must not be provided if `--url` is not provided.\n+\n ### on a local GTFS zip file\n Sample usage:\n \n@@ -16,7 +30,7 @@ java -jar gtfs-validator-v2.0.jar --input relative/path/to/dataset.zip --output\n ...which will:\n  1. Search for a GTFS dataset located at `relative/path/to/dataset.zip`\n  1. Validate the GTFS data and output the results to the directory located at `relative/output/path`. \n- 1. Export the validation report to `JSON` by default. This folder will contain a single `.json` file with information related to the validation process. The validation report will be named as `report.json`. \n+ 1. Export both validation and system errors reports to JSON by default. This folder will contain the `.json` file with information related to the validation process. The validation report will be named as `report.json` and the system errors report can be found under the name of `system_errors.json`. \n \n ### on a hosted GTFS zip file at a URL\n Sample usage:\n@@ -32,11 +46,11 @@ Please note that since downloading will take time, we recommend validating repea\n \n ## via GitHub Actions - Run the validator on any gtfs archive available on a public url\n \n-1. [Fork this repository](/docs/REPRODUCE_ERRORS.md#fork-this-repository-detailed-instructions)\n+1. [Fork this repository](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo)\n 1. Open a PR on master within it\n-1. Edit the file `.github/workflows/end_to_end.yml` following instructions on lines 5, 43-45 and **push** on your PR branch (see detailed instructions [here](/docs/REPRODUCE_ERRORS.md##create-a-pull-request-pr))\n+1. Edit the file `.github/workflows/end_to_end.yml` following instructions on lines 5, 43-45 and **push** on your PR branch (see detailed instructions [here](/docs/REPRODUCE_ERRORS.md))\n 1. Name your branch from the agency/authority/publisher of the feed you are testing\n \n You should now see the workflow `End to end / run-on-data` start automatically in your PR checks, running the validator on the dataset you just added. The validation report is collected as a run artifact in the Actions tab of your fork repository on GitHub.\n \n-If the workflow run crashes or something doesn't look right in the validation report json file, **please see the [Contributing page](/docs/CONTRIBUTING.md) section, we may be able to help!**\n+If the workflow run crashes or something doesn't look right in the validation report json file, **please see the [guide to reproduce](/docs/REPRODUCE_ERRORS.md) section.**"
  },
  {
    "sha": "50a6f62ded11d44f4b19dc7bc76594df99b1f885",
    "filename": "main/src/test/java/org/mobilitydata/gtfsvalidator/validator/FeedExpirationDateValidatorTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/MobilityData/gtfs-validator/blob/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/main/src/test/java/org/mobilitydata/gtfsvalidator/validator/FeedExpirationDateValidatorTest.java",
    "raw_url": "https://github.com/MobilityData/gtfs-validator/raw/1ef068f07bd8d2e79ef4c99ca48962e7505dcf66/main/src/test/java/org/mobilitydata/gtfsvalidator/validator/FeedExpirationDateValidatorTest.java",
    "contents_url": "https://api.github.com/repos/MobilityData/gtfs-validator/contents/main/src/test/java/org/mobilitydata/gtfsvalidator/validator/FeedExpirationDateValidatorTest.java?ref=1ef068f07bd8d2e79ef4c99ca48962e7505dcf66",
    "patch": "@@ -57,8 +57,8 @@ private GtfsFeedInfo createFeedInfo(GtfsDate feedEndDate) {\n   @Test\n   public void feedExpiringInFiveDaysFromNowShouldGenerateNotice() {\n     assertThat(\n-            validateFeedInfo(\n-                createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(3)))))\n+        validateFeedInfo(\n+            createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(3)))))\n         .containsExactly(\n             new FeedExpirationDateNotice(\n                 1,\n@@ -70,8 +70,8 @@ public void feedExpiringInFiveDaysFromNowShouldGenerateNotice() {\n   @Test\n   public void feedExpiringInSevenDaysFromNowShouldGenerateNotice() {\n     assertThat(\n-            validateFeedInfo(\n-                createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(7)))))\n+        validateFeedInfo(\n+            createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(7)))))\n         .containsExactly(\n             new FeedExpirationDateNotice(\n                 1,\n@@ -83,8 +83,8 @@ public void feedExpiringInSevenDaysFromNowShouldGenerateNotice() {\n   @Test\n   public void feedExpiring7to30DaysFromNowShouldGenerateNotice() {\n     assertThat(\n-            validateFeedInfo(\n-                createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(23)))))\n+        validateFeedInfo(\n+            createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(23)))))\n         .containsExactly(\n             new FeedExpirationDateNotice(\n                 1,\n@@ -96,8 +96,8 @@ public void feedExpiring7to30DaysFromNowShouldGenerateNotice() {\n   @Test\n   public void feedExpiring30DaysFromNowShouldGenerateNotice() {\n     assertThat(\n-            validateFeedInfo(\n-                createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(30)))))\n+        validateFeedInfo(\n+            createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(30)))))\n         .containsExactly(\n             new FeedExpirationDateNotice(\n                 1,\n@@ -109,8 +109,8 @@ public void feedExpiring30DaysFromNowShouldGenerateNotice() {\n   @Test\n   public void feedExpiringInMoreThan30DaysFromNowShouldNotGenerateNotice() {\n     assertThat(\n-            validateFeedInfo(\n-                createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(45)))))\n+        validateFeedInfo(\n+            createFeedInfo(GtfsDate.fromLocalDate(TEST_NOW.toLocalDate().plusDays(45)))))\n         .isEmpty();\n   }\n }"
  }
]
