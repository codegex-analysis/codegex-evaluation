[
  {
    "sha": "89d6314c0f3f5313ee82e2cd4345643123f18515",
    "filename": "src/Animal/Animal.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/Igor-mokrenko/JavaCourse1/blob/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Animal/Animal.java",
    "raw_url": "https://github.com/Igor-mokrenko/JavaCourse1/raw/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Animal/Animal.java",
    "contents_url": "https://api.github.com/repos/Igor-mokrenko/JavaCourse1/contents/src/Animal/Animal.java?ref=b115cedfc06231434ce7dfbed6d86f572c6d7e25",
    "patch": "@@ -0,0 +1,47 @@\n+package Animal;\n+\n+public class Animal {\n+    protected String name;\n+    protected static int animalsCounter = 0;\n+\n+    public Animal(String name) {\n+        animalsCounter++;\n+        this.name = name;\n+    }\n+\n+    public void run(int distance, int maxRunDistance) {\n+        if (distance < 0) {\n+            printError(distance);\n+            return;\n+        }\n+        if (distance <= maxRunDistance) {\n+            System.out.println(name + \" Пробежал \" + distance + \" м.\");\n+        } else {\n+            System.out.println(name + \" Не может столько пробежать. Максимальное расстояние: \" + maxRunDistance + \" м.\");\n+        }\n+\n+    }\n+\n+    public void swim(int distance, int maxSwimDistance) {\n+        if (distance < 0) {\n+            printError(distance);\n+            return;\n+        }\n+        if (maxSwimDistance > 0 & distance > maxSwimDistance) {\n+            System.out.println(name + \" Не может столько проплыть. Максимальное расстояние: \" + maxSwimDistance + \" м.\");\n+        }\n+        if (maxSwimDistance > 0 & distance <= maxSwimDistance) {\n+            System.out.println(name + \" Проплыл \" + distance + \" м.\");\n+        } else {\n+            System.out.println(name + \" Не умеет плавать.\");\n+        }\n+    }\n+\n+    private void printError(int distance) {\n+        System.out.println(\"Расстояние должно быть положительным. Сейчас оно \" + distance);\n+    }\n+\n+    public static int getAnimalsCounter() {\n+        return animalsCounter;\n+    }\n+}"
  },
  {
    "sha": "448d3cdce0ff3443a792fa198deda93223faf4ef",
    "filename": "src/Cat/Cat.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Igor-mokrenko/JavaCourse1/blob/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Cat/Cat.java",
    "raw_url": "https://github.com/Igor-mokrenko/JavaCourse1/raw/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Cat/Cat.java",
    "contents_url": "https://api.github.com/repos/Igor-mokrenko/JavaCourse1/contents/src/Cat/Cat.java?ref=b115cedfc06231434ce7dfbed6d86f572c6d7e25",
    "patch": "@@ -0,0 +1,18 @@\n+package Cat;\n+\n+import Animal.Animal;\n+\n+public class Cat extends Animal {\n+    static protected int catsCounter = 0;\n+    public final int maxRunDistance = 200;\n+    public final int maxSwimDistance = 0;\n+\n+    public Cat(String name) {\n+        super(name);\n+        catsCounter++;\n+    }\n+\n+    public static int getCatsCounter() {\n+        return catsCounter;\n+    }\n+}"
  },
  {
    "sha": "bc66135e740ee9f35f8985c8ab9767ef8fa2857a",
    "filename": "src/Dog/Dog.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Igor-mokrenko/JavaCourse1/blob/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Dog/Dog.java",
    "raw_url": "https://github.com/Igor-mokrenko/JavaCourse1/raw/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Dog/Dog.java",
    "contents_url": "https://api.github.com/repos/Igor-mokrenko/JavaCourse1/contents/src/Dog/Dog.java?ref=b115cedfc06231434ce7dfbed6d86f572c6d7e25",
    "patch": "@@ -0,0 +1,18 @@\n+package Dog;\n+\n+import Animal.Animal;\n+\n+public class Dog extends Animal {\n+    static protected int dogsCounter = 0;\n+    public final int maxRunDistance = 500;\n+    public final int maxSwimDistance = 10;\n+\n+    public Dog(String name) {\n+        super(name);\n+        dogsCounter++;\n+    }\n+\n+    public static int getDogsCounter() {\n+        return dogsCounter;\n+    }\n+}"
  },
  {
    "sha": "689b6f5c04131e2eaf32d54cb691793f8a0a763d",
    "filename": "src/Main.java",
    "status": "modified",
    "additions": 17,
    "deletions": 129,
    "changes": 146,
    "blob_url": "https://github.com/Igor-mokrenko/JavaCourse1/blob/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Main.java",
    "raw_url": "https://github.com/Igor-mokrenko/JavaCourse1/raw/b115cedfc06231434ce7dfbed6d86f572c6d7e25/src/Main.java",
    "contents_url": "https://api.github.com/repos/Igor-mokrenko/JavaCourse1/contents/src/Main.java?ref=b115cedfc06231434ce7dfbed6d86f572c6d7e25",
    "patch": "@@ -1,134 +1,22 @@\n-import java.util.Random;\n-import java.util.Scanner;\n+import Animal.Animal;\n+import Cat.Cat;\n+import Dog.Dog;\n \n public class Main {\n-    public static void main(String[] args) {\n-        chooseGame();\n-    }\n-\n-    static void chooseGame() {\n-        Scanner sc = new Scanner(System.in);\n-        System.out.println(\"Выберите игру.\");\n-        System.out.println(\"1 – Угадай число / 2 – Угадай слово / 0 - Выход\");\n-        if (sc.hasNextInt()) {\n-            int answer = sc.nextInt();\n-            switch (answer) {\n-                case 1:\n-                    startGuessNumber();\n-                    break;\n-                case 2:\n-                    startGuessWord();\n-                    break;\n-                case 0:\n-                    return;\n-            }\n-        }\n-        chooseGame();\n-    }\n-\n-    static void startGuessNumber() {\n-        Random rand = new Random();\n-        int randomNumber = rand.nextInt(10);\n-        int counter = 1;\n-        System.out.println(\"Угадайте число от 0 до 9 \");\n-        inputNumber(randomNumber, counter);\n-    }\n-\n-    static void inputNumber(int randomNumber, int counter) {\n-        Scanner sc = new Scanner(System.in);\n-        System.out.println(\"Введите число\");\n-        if (sc.hasNextInt()) {\n-            int answer = sc.nextInt();\n-            checkAnswer(answer, randomNumber, counter);\n-        } else {\n-            inputNumber(randomNumber, counter);\n-        }\n-    }\n-\n-    static void checkAnswer(int answer, int randomNumber, int counter) {\n-        if (answer == randomNumber) {\n-            System.out.println(\"Вы угадали!\");\n-            tryAgain();\n-        } else {\n-            String compare = answer > randomNumber ? \"меньше\" : \"больше\";\n-            System.out.println(\"Неверно. Загаданное число \" + compare + \". Попыток \" + counter + \" из 3.\");\n-            counter++;\n-            if (counter > 3) {\n-                tryAgain();\n-            } else {\n-                inputNumber(randomNumber, counter);\n-            }\n-        }\n-    }\n-\n-    static void tryAgain() {\n-        Scanner sc = new Scanner(System.in);\n-        System.out.println(\"Повторить игру еще раз? 1 – да / 0 – нет\");\n-        if (sc.hasNextInt()) {\n-            int answer = sc.nextInt();\n-            if (answer == 1) {\n-                startGuessNumber();\n-            }\n-        } else {\n-            tryAgain();\n-        }\n-    }\n-\n-    static void startGuessWord() {\n-        System.out.println(\"Ваша задача угадать слово.\");\n-        String[] words = {\"apple\", \"orange\", \"lemon\", \"banana\", \"apricot\", \"avocado\", \"broccoli\", \"carrot\",\n-                \"cherry\", \"garlic\", \"grape\", \"melon\", \"leak\", \"kiwi\", \"mango\", \"mushroom\", \"nut\", \"olive\",\n-                \"pea\", \"peanut\", \"pear\", \"pepper\", \"pineapple\", \"pumpkin\", \"potato\"};\n-        Random rand = new Random();\n-        int randNumber = rand.nextInt(words.length);\n-        String word = words[randNumber];\n-        System.out.println(word + randNumber);\n-        inputWord(word);\n-    }\n-\n-    static void inputWord(String word) {\n-        Scanner sc = new Scanner(System.in);\n-        System.out.println(\"Введите слово.\");\n-        String answer = sc.next();\n-        checkAnswer(word, answer);\n-    }\n-\n-    static void checkAnswer(String word, String answer) {\n-        if (word.equalsIgnoreCase(answer)) {\n-            playAgain();\n-        } else {\n-            makeHint(word, answer);\n-        }\n \n-    }\n-\n-    static void makeHint(String word, String answer) {\n-        String[] hint = new String[15];\n-        for (int i = 0; i < hint.length; i++) {\n-            if (\n-                i < word.length() &\n-                i < answer.length()\n-            ) {\n-                hint[i] = Character.toLowerCase(word.charAt(i)) == Character.toLowerCase(answer.charAt(i)) ? Character.toString(word.charAt(i)) : \"#\";\n-            } else {\n-                hint[i] = \"#\";\n-            }\n-        }\n-        System.out.println(String.join(\"\", hint));\n-        inputWord(word);\n-    }\n-\n-    static void playAgain() {\n-        Scanner sc = new Scanner(System.in);\n-        System.out.println(\"Вы угадали!\");\n-        System.out.println(\"Повторить игру еще раз? 1 – да / 0 – нет\");\n-        if (sc.hasNextInt()) {\n-            int answer = sc.nextInt();\n-            if (answer == 1) {\n-                startGuessWord();\n-            }\n-        } else {\n-            playAgain();\n-        }\n+    public static void main(String[] args) {\n+        Cat cat1 = new Cat(\"Васька\");\n+        Dog dog1 = new Dog(\"Бобик\");\n+\n+        cat1.run(300, cat1.maxRunDistance);\n+        dog1.run(400, dog1.maxRunDistance);\n+        cat1.swim(10, cat1.maxSwimDistance);\n+        dog1.swim(10, dog1.maxSwimDistance);\n+\n+        System.out.println(\n+            \"Всего животных: \" + Animal.getAnimalsCounter() +\n+            \" из них Кошек: \" + Cat.getCatsCounter() +\n+            \" Собак: \" + Dog.getDogsCounter()\n+        );\n     }\n }\n\\ No newline at end of file"
  }
]
