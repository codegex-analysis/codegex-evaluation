[
  {
    "sha": "763e3e78bfee9f387c40878aeedf4fa47cd59e62",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/build.gradle",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/build.gradle",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/build.gradle?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -328,14 +328,6 @@ dependencies {\n \n     implementation \"org.springframework.security:spring-security-ldap\"\n     implementation \"org.freemarker:freemarker:${freemarker_version}\"\n-    // FIXME: do we need these social related libraries?\n-    implementation \"org.springframework.social:spring-social-security:${spring_social_version}\"\n-    implementation \"org.springframework.social:spring-social-core:${spring_social_version}\"\n-    implementation \"org.springframework.social:spring-social-config:${spring_social_version}\"\n-    implementation \"org.springframework.social:spring-social-google:${spring_social_google_version}\"\n-    implementation \"org.springframework.social:spring-social-facebook:${spring_social_facebook_version}\"\n-    implementation \"org.springframework.social:spring-social-twitter:${spring_social_twitter_version}\"\n-    implementation \"org.springframework.social:spring-social-linkedin:${spring_social_linkedin_version}\"\n     implementation \"org.jboss.aerogear:aerogear-otp-java:${aerogear_version}\"\n \n     // test dependencies"
  },
  {
    "sha": "ce94bea2ea3552a6cb7da942fa92546469e4f44f",
    "filename": "gradle.properties",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/gradle.properties",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/gradle.properties",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/gradle.properties?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -36,11 +36,6 @@ spotbugs_plugin_version=4.2.0\n ## XM custom properties\n lombok_version=1.18.10\n xm_commons_version=2.1.23-SNAPSHOT\n-spring_social_version=2.0.0.M2\n-spring_social_google_version=1.0.0.RELEASE\n-spring_social_facebook_version=3.0.0.M1\n-spring_social_twitter_version=2.0.0.M1\n-spring_social_linkedin_version=2.0.0.M1\n embedded_ldap_version=0.7\n freemarker_version=2.3.26-incubating\n aerogear_version=1.0.0"
  },
  {
    "sha": "c9c7a8d267965884aebbf47298be6113957db67c",
    "filename": "src/main/java/com/icthh/xm/uaa/config/UaaConfiguration.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/config/UaaConfiguration.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/config/UaaConfiguration.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/config/UaaConfiguration.java?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -90,7 +90,6 @@ public void configure(HttpSecurity http) throws Exception {\n                 .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                 .and()\n                 .authorizeRequests()\n-                .antMatchers(\"/social/**\").permitAll()\n                 .antMatchers(\"/api/register\").permitAll()\n                 .antMatchers(\"/api/activate\").permitAll()\n                 .antMatchers(\"/api/authenticate\").permitAll()"
  },
  {
    "sha": "f37586566e99b00427a67c8f842fe24d11eb23f9",
    "filename": "src/main/java/com/icthh/xm/uaa/domain/SocialUserConnection.java",
    "status": "removed",
    "additions": 0,
    "deletions": 60,
    "changes": 60,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/domain/SocialUserConnection.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/domain/SocialUserConnection.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/domain/SocialUserConnection.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,60 +0,0 @@\n-package com.icthh.xm.uaa.domain;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-import lombok.NoArgsConstructor;\n-import lombok.Setter;\n-import lombok.ToString;\n-import org.hibernate.annotations.Cache;\n-import org.hibernate.annotations.CacheConcurrencyStrategy;\n-\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.SequenceGenerator;\n-import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n-import java.io.Serializable;\n-import java.util.UUID;\n-\n-/**\n- * A Social user.\n- */\n-@ToString\n-@NoArgsConstructor\n-@AllArgsConstructor\n-@Entity\n-@Table(name = \"social_connection\")\n-@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n-@Getter\n-@Setter\n-public class SocialUserConnection implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n-    @SequenceGenerator(name = \"sequenceGenerator\")\n-    private Long id;\n-\n-    @NotNull\n-    @Column(name = \"user_key\")\n-    private String userKey;\n-\n-    @NotNull\n-    @Column(name = \"provider_id\", nullable = false)\n-    private String providerId;\n-\n-    @NotNull\n-    @Column(name = \"provider_user_id\", nullable = false)\n-    private String providerUserId;\n-\n-    @Column(name = \"profile_url\")\n-    private String profileURL;\n-\n-    @Column(name = \"activation_code\")\n-    private String activationCode = UUID.randomUUID().toString();\n-\n-}"
  },
  {
    "sha": "f183ede574f7dad7ac554cad203b680a88096303",
    "filename": "src/main/java/com/icthh/xm/uaa/domain/properties/TenantProperties.java",
    "status": "modified",
    "additions": 0,
    "deletions": 53,
    "changes": 53,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/domain/properties/TenantProperties.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/domain/properties/TenantProperties.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/domain/properties/TenantProperties.java?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -1,7 +1,6 @@\n package com.icthh.xm.uaa.domain.properties;\n \n import static java.lang.Boolean.TRUE;\n-import static java.util.Optional.ofNullable;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n@@ -144,58 +143,6 @@ public Boolean isTermsOfConditionsEnabled() {\n         }\n     }\n \n-    @JsonProperty(\"social\")\n-    private List<Social> social;\n-\n-    @JsonProperty(\"socialBaseUrl\")\n-    private String socialBaseUrl;\n-\n-    @Data\n-    @ToString(of = {\"providerId\"})\n-    public static class Social {\n-\n-        private String providerId;\n-        private String clientId;\n-        private String clientSecret;\n-        private String authorizeUrl;\n-        private String accessTokenUrl;\n-        private String scope;\n-        private String userInfoUri;\n-        private UserInfoMapping userInfoMapping;\n-        private String tokenStrategy;\n-        private Boolean createAccountAutomatically;\n-        private Boolean useParametersForClientAuthentication;\n-\n-        public Boolean getUseParametersForClientAuthentication() {\n-            return ofNullable(useParametersForClientAuthentication).orElse(true);\n-        }\n-\n-        public Boolean getCreateAccountAutomatically() {\n-            return ofNullable(createAccountAutomatically).orElse(true);\n-        }\n-    }\n-\n-    @Data\n-    @NoArgsConstructor\n-    public static class UserInfoMapping {\n-        private String id;\n-        private String name;\n-        private String firstName;\n-        private String lastName;\n-        private String email;\n-        private String username;\n-\n-        private String profileUrl;\n-        private String imageUrl;\n-\n-        private String phoneNumber;\n-        private String langKey;\n-\n-        // It's field detect is email verified in provider.\n-        // If field null or empty verification wiil be disabled.\n-        private String emailVerifiedCheckField;\n-    }\n-\n     @JsonProperty(\"registrationCaptchaPeriodSeconds\")\n     private Long registrationCaptchaPeriodSeconds;\n "
  },
  {
    "sha": "f52c73a69d50c8db2d0475802835b2a2b707ea88",
    "filename": "src/main/java/com/icthh/xm/uaa/repository/SocialUserConnectionRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/repository/SocialUserConnectionRepository.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/repository/SocialUserConnectionRepository.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/repository/SocialUserConnectionRepository.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,18 +0,0 @@\n-package com.icthh.xm.uaa.repository;\n-\n-import com.icthh.xm.uaa.domain.SocialUserConnection;\n-import org.springframework.data.jpa.repository.JpaRepository;\n-\n-import java.util.Optional;\n-\n-/**\n- * Spring Data JPA repository for the Social User Connection entity.\n- */\n-public interface SocialUserConnectionRepository extends JpaRepository<SocialUserConnection, Long> {\n-\n-    Optional<SocialUserConnection> findByProviderUserIdAndProviderId(String providerUserId, String providerId);\n-\n-    void deleteByUserKey(String userKey);\n-\n-    Optional<SocialUserConnection> findByActivationCode(String activationCode);\n-}"
  },
  {
    "sha": "ee955ea89ec84d4a1fe590fb9d659d4ace7b21ac",
    "filename": "src/main/java/com/icthh/xm/uaa/service/AccountMailService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/service/AccountMailService.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/service/AccountMailService.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/service/AccountMailService.java?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -47,12 +47,4 @@ public void sendMailOnPasswordInit(User user) {\n             MdcUtils.getRid());\n     }\n \n-    @LogicExtensionPoint(\"SendSocialRegistrationValidationEmail\")\n-    public void sendSocialRegistrationValidationEmail(User user ,String providerId) {\n-        mailService.sendSocialRegistrationValidationEmail(user, providerId,\n-                                          UaaUtils.getApplicationUrl(xmRequestContextHolder),\n-                                          TenantContextUtils.getRequiredTenantKey(tenantContextHolder),\n-                                          MdcUtils.getRid());\n-    }\n-\n }"
  },
  {
    "sha": "cb5ecb6586f2ec869887f3bf20486c423ce35980",
    "filename": "src/main/java/com/icthh/xm/uaa/service/SocialService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 272,
    "changes": 272,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/service/SocialService.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/service/SocialService.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/service/SocialService.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,272 +0,0 @@\n-package com.icthh.xm.uaa.service;\n-\n-import static com.google.common.collect.ImmutableSet.of;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.NEED_ACCEPT_CONNECTION;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.REGISTERED;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.SING_IN;\n-import static java.util.UUID.randomUUID;\n-import static java.util.stream.Collectors.toList;\n-import static org.apache.commons.lang3.StringUtils.isNotBlank;\n-\n-import com.icthh.xm.commons.exceptions.BusinessException;\n-import com.icthh.xm.commons.exceptions.EntityNotFoundException;\n-import com.icthh.xm.commons.lep.LogicExtensionPoint;\n-import com.icthh.xm.commons.lep.spring.LepService;\n-import com.icthh.xm.commons.security.XmAuthenticationContextHolder;\n-import com.icthh.xm.uaa.commons.UaaUtils;\n-import com.icthh.xm.uaa.commons.XmRequestContextHolder;\n-import com.icthh.xm.uaa.domain.SocialUserConnection;\n-import com.icthh.xm.uaa.domain.User;\n-import com.icthh.xm.uaa.domain.UserLogin;\n-import com.icthh.xm.uaa.domain.UserLoginType;\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.Social;\n-import com.icthh.xm.uaa.repository.SocialUserConnectionRepository;\n-import com.icthh.xm.uaa.repository.UserLoginRepository;\n-import com.icthh.xm.uaa.repository.UserRepository;\n-import com.icthh.xm.uaa.social.ConfigOAuth2ConnectionFactory;\n-import com.icthh.xm.uaa.social.ConfigServiceProvider;\n-import com.icthh.xm.uaa.social.SocialLoginAnswer;\n-import com.icthh.xm.uaa.social.SocialUserInfo;\n-import com.icthh.xm.uaa.social.SocialUserInfoMapper;\n-import com.icthh.xm.uaa.social.exceptions.FoundMoreThanOneUserBySocialUserInfo;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Stream;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.NotImplementedException;\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.security.authentication.ProviderNotFoundException;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.security.core.userdetails.UserDetailsService;\n-import org.springframework.security.crypto.password.PasswordEncoder;\n-import org.springframework.security.oauth2.common.OAuth2AccessToken;\n-import org.springframework.security.oauth2.provider.OAuth2Authentication;\n-import org.springframework.security.oauth2.provider.OAuth2Request;\n-import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;\n-import org.springframework.social.oauth2.AccessGrant;\n-import org.springframework.social.oauth2.OAuth2Operations;\n-import org.springframework.social.oauth2.OAuth2Parameters;\n-import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Slf4j\n-@Service\n-@Transactional\n-@LepService(group = \"service.social\")\n-public class SocialService {\n-\n-    private final SocialUserConnectionRepository socialRepository;\n-    private final PasswordEncoder passwordEncoder;\n-    private final UserRepository userRepository;\n-    private final AccountMailService accountMailService;\n-    private final UserDetailsService userDetailsService;\n-\n-    private final TenantPropertiesService tenantPropertiesService;\n-\n-    private final AuthorizationServerTokenServices tokenServices;\n-    private final UserLoginRepository userLoginRepository;\n-    protected final SocialUserInfoMapper socialUserInfoMapper;\n-    private final XmAuthenticationContextHolder xmAuthenticationContextHolder;\n-    private final XmRequestContextHolder xmRequestContextHolder;\n-\n-    private SocialService self;\n-\n-    public SocialService(SocialUserConnectionRepository socialRepository, PasswordEncoder passwordEncoder,\n-                         UserRepository userRepository, AccountMailService accountMailService,\n-                         UserDetailsService userDetailsService, TenantPropertiesService tenantPropertiesService,\n-                         AuthorizationServerTokenServices tokenServices, UserLoginRepository userLoginRepository,\n-                         SocialUserInfoMapper socialUserInfoMapper,\n-                         XmAuthenticationContextHolder xmAuthenticationContextHolder,\n-                         XmRequestContextHolder xmRequestContextHolder,\n-                         @Lazy SocialService self) {\n-        this.socialRepository = socialRepository;\n-        this.passwordEncoder = passwordEncoder;\n-        this.userRepository = userRepository;\n-        this.accountMailService = accountMailService;\n-        this.userDetailsService = userDetailsService;\n-        this.tenantPropertiesService = tenantPropertiesService;\n-        this.tokenServices = tokenServices;\n-        this.userLoginRepository = userLoginRepository;\n-        this.socialUserInfoMapper = socialUserInfoMapper;\n-        this.xmAuthenticationContextHolder = xmAuthenticationContextHolder;\n-        this.xmRequestContextHolder = xmRequestContextHolder;\n-        this.self = self;\n-    }\n-\n-    @LogicExtensionPoint(\"InitSocialLogin\")\n-    public String initSocialLogin(String providerId) {\n-        ConfigOAuth2ConnectionFactory connectionFactory = createConnectionFactory(providerId);\n-        OAuth2Operations oauthOperations = connectionFactory.getOAuthOperations();\n-        OAuth2Parameters parameters = new OAuth2Parameters();\n-        parameters.setRedirectUri(redirectUri(providerId));\n-        parameters.setScope(connectionFactory.getScope());\n-        return oauthOperations.buildAuthenticateUrl(parameters);\n-    }\n-\n-    private ConfigOAuth2ConnectionFactory createConnectionFactory(String providerId) {\n-        Social social = findSocialByProviderId(providerId);\n-        return new ConfigOAuth2ConnectionFactory(social, createConfigServiceProvider(social));\n-    }\n-\n-    protected ConfigServiceProvider createConfigServiceProvider(Social social) {\n-        return new ConfigServiceProvider(social, socialUserInfoMapper);\n-    }\n-\n-    private Social findSocialByProviderId(String providerId) {\n-        List<Social> socials = tenantPropertiesService.getTenantProps().getSocial();\n-        if (socials == null) {\n-            throw providerNotFound(providerId);\n-        }\n-        return socials.stream().filter(s -> s.getProviderId().equals(providerId)).findAny()\n-            .orElseThrow(() -> providerNotFound(providerId));\n-    }\n-\n-    private String redirectUri(String providerId) {\n-        return Optional.ofNullable(tenantPropertiesService.getTenantProps().getSocialBaseUrl())\n-            .orElse(UaaUtils.getApplicationUrl(xmRequestContextHolder)) + \"/uaa/social/signin/\" + providerId;\n-    }\n-\n-    private ProviderNotFoundException providerNotFound(String providerId) {\n-        return new ProviderNotFoundException(providerId + \" not found\");\n-    }\n-\n-    @LogicExtensionPoint(\"AcceptSocialLogin\")\n-    public SocialLoginAnswer acceptSocialLoginUser(String providerId, String code) {\n-        Social social = findSocialByProviderId(providerId);\n-        ConfigOAuth2ConnectionFactory connectionFactory = createConnectionFactory(providerId);\n-        OAuth2Operations oAuthOperations = connectionFactory.getOAuthOperations();\n-        AccessGrant accessGrant = oAuthOperations.exchangeForAccess(code, redirectUri(providerId), null);\n-        SocialUserInfo socialUserInfo = connectionFactory.createConnection(accessGrant).getApi().fetchSocialUser();\n-\n-        String id = socialUserInfo.getId();\n-        Optional<SocialUserConnection> connection = socialRepository.findByProviderUserIdAndProviderId(id, providerId);\n-        if (connection.isPresent() && isNotBlank(connection.get().getUserKey())) {\n-            log.info(\"Found user social connection {}\", connection.get());\n-            OAuth2AccessToken accessToken = self.signIn(connection.get().getUserKey());\n-            return SocialLoginAnswer.builder().answerType(SING_IN).oAuth2AccessToken(accessToken).build();\n-        }\n-\n-        log.info(\"User social connection not found by providerUserid {} and providerId\", id, providerId);\n-\n-        List<User> existingUser = self.findUsersByUserInfo(socialUserInfo);\n-        if (existingUser.isEmpty()) {\n-            if (social.getCreateAccountAutomatically()) {\n-                User user = self.createSocialUser(socialUserInfo, providerId);\n-                createSocialConnection(socialUserInfo, user.getUserKey(), providerId);\n-                OAuth2AccessToken oAuth2AccessToken = signIn(user.getUserKey());\n-                return SocialLoginAnswer.builder().answerType(REGISTERED).oAuth2AccessToken(oAuth2AccessToken).build();\n-            } else {\n-                throw new NotImplementedException(\"Will be implemented in future\");\n-            }\n-        } else if (existingUser.size() == 1) {\n-            SocialUserConnection userConnection = createSocialConnection(socialUserInfo, null, providerId);\n-            return SocialLoginAnswer.builder().answerType(NEED_ACCEPT_CONNECTION)\n-                .activationCode(userConnection.getActivationCode()).build();\n-        } else {\n-            throw new FoundMoreThanOneUserBySocialUserInfo(existingUser);\n-        }\n-    }\n-\n-    @LogicExtensionPoint(\"AcceptConnection\")\n-    public void acceptConnection(String activationCode) {\n-        Optional<SocialUserConnection> connection = socialRepository.findByActivationCode(activationCode);\n-        SocialUserConnection userConnection =\n-            connection.orElseThrow(() -> new EntityNotFoundException(\"User connection not found\"));\n-        userConnection.setUserKey(xmAuthenticationContextHolder.getContext().getRequiredUserKey());\n-        userConnection.setActivationCode(null);\n-        socialRepository.save(userConnection);\n-    }\n-\n-    private SocialUserConnection createSocialConnection(SocialUserInfo socialUserInfo, String userKey,\n-                                                        String providerId) {\n-        return socialRepository.save(\n-            new SocialUserConnection(null, userKey, providerId, socialUserInfo.getId(), socialUserInfo.getProfileUrl(),\n-                                     randomUUID().toString()));\n-    }\n-\n-    @LogicExtensionPoint(\"SignIn\")\n-    public OAuth2AccessToken signIn(String userKey) {\n-        User user = getUser(userKey);\n-        UserDetails userDetailts = userDetailsService.loadUserByUsername(getLogin(user));\n-        Authentication userAuth =\n-            new UsernamePasswordAuthenticationToken(userDetailts, \"N/A\", userDetailts.getAuthorities());\n-        SecurityContextHolder.getContext().setAuthentication(userAuth);\n-        OAuth2Request storedOAuth2Request =\n-            new OAuth2Request(null, \"webapp\", null, true, of(\"openid\"), null, null, null, null);\n-        OAuth2Authentication oauth2 = new OAuth2Authentication(storedOAuth2Request, userAuth);\n-        return tokenServices.createAccessToken(oauth2);\n-    }\n-\n-    @LogicExtensionPoint(\"FindUsersBySocialUserInfo\")\n-    public List<User> findUsersByUserInfo(SocialUserInfo socialUserInfo) {\n-        return Stream.of(socialUserInfo.getEmail(), socialUserInfo.getPhoneNumber(), socialUserInfo.getUsername())\n-                     .filter(Objects::nonNull).map(String::valueOf).filter(StringUtils::isNotBlank)\n-                     .map(userLoginRepository::findOneByLoginIgnoreCase).filter(Objects::nonNull)\n-                     .filter(Optional::isPresent).map(Optional::get)\n-                     .map(UserLogin::getUser).collect(toList());\n-    }\n-\n-    private String getLogin(User user) {\n-        return user.getLogins().stream().map(UserLogin::getLogin).filter(StringUtils::isNotBlank).findFirst()\n-                   .orElseThrow(() -> new BusinessException(\"error.not.logins.found\", \"All logins is null\"));\n-    }\n-\n-    @LogicExtensionPoint(\"CreateSocialUser\")\n-    public User createSocialUser(SocialUserInfo userInfo, String providerId) {\n-        String encryptedPassword = passwordEncoder.encode(RandomStringUtils.random(10));\n-        User newUser = new User();\n-        newUser.setPassword(encryptedPassword);\n-        newUser.setFirstName(userInfo.getFirstName());\n-        newUser.setLastName(userInfo.getLastName());\n-        newUser.setUserKey(randomUUID().toString());\n-        newUser.setActivated(true);\n-        newUser.setRoleKey(tenantPropertiesService.getTenantProps().getSecurity().getDefaultUserRole());\n-        newUser.setLangKey(userInfo.getLangKey());\n-        newUser.setImageUrl(userInfo.getImageUrl());\n-\n-        if (isNotBlank(userInfo.getEmail())) {\n-            UserLogin userLogin = new UserLogin();\n-            userLogin.setUser(newUser);\n-            userLogin.setTypeKey(UserLoginType.EMAIL.getValue());\n-            userLogin.setLogin(userInfo.getEmail());\n-            newUser.getLogins().add(userLogin);\n-        }\n-\n-        if (isNotBlank(userInfo.getPhoneNumber())) {\n-            UserLogin userLogin = new UserLogin();\n-            userLogin.setUser(newUser);\n-            userLogin.setTypeKey(UserLoginType.MSISDN.getValue());\n-            userLogin.setLogin(userInfo.getPhoneNumber());\n-            newUser.getLogins().add(userLogin);\n-        }\n-\n-        if (isNotBlank(userInfo.getUsername())) {\n-            UserLogin userLogin = new UserLogin();\n-            userLogin.setUser(newUser);\n-            userLogin.setTypeKey(UserLoginType.NICKNAME.getValue());\n-            userLogin.setLogin(userInfo.getUsername());\n-            newUser.getLogins().add(userLogin);\n-        }\n-\n-        log.info(\"Create user {}\", newUser);\n-\n-        User user = userRepository.save(newUser);\n-        accountMailService.sendSocialRegistrationValidationEmail(user, providerId);\n-        return user;\n-    }\n-\n-    private User getUser(String userKey) {\n-        return userRepository.findOneByUserKey(userKey)\n-            .orElseThrow(() -> new EntityNotFoundException(\"User with key \" + userKey + \" not found\"));\n-    }\n-\n-    public void setSelf(SocialService self) {\n-        this.self = self;\n-    }\n-}"
  },
  {
    "sha": "243949698730e3903430727d0344c2238bc5b843",
    "filename": "src/main/java/com/icthh/xm/uaa/service/UserService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/service/UserService.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/service/UserService.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/service/UserService.java?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -15,7 +15,6 @@\n import com.icthh.xm.uaa.domain.UserLoginType;\n import com.icthh.xm.uaa.domain.properties.TenantProperties.PublicSettings;\n import com.icthh.xm.uaa.domain.properties.TenantProperties.PublicSettings.PasswordSettings;\n-import com.icthh.xm.uaa.repository.SocialUserConnectionRepository;\n import com.icthh.xm.uaa.repository.UserLoginRepository;\n import com.icthh.xm.uaa.repository.UserPermittedRepository;\n import com.icthh.xm.uaa.repository.UserRepository;\n@@ -65,7 +64,6 @@\n     private final UserRepository userRepository;\n     private final UserLoginRepository userLoginRepository;\n     private final PasswordEncoder passwordEncoder;\n-    private final SocialUserConnectionRepository socialUserConnectionRepository;\n     private final AccountMailService accountMailService;\n     private final TenantPropertiesService tenantPropertiesService;\n     private final XmAuthenticationContextHolder xmAuthenticationContextHolder;\n@@ -268,7 +266,6 @@ public void deleteUser(String userKey, Consumer<UserDTO> notification) {\n         }\n         userRepository.findOneWithLoginsByUserKey(userKey).ifPresent(user -> {\n             assertNotSuperAdmin(user.getRoleKey());\n-            socialUserConnectionRepository.deleteByUserKey(user.getUserKey());\n             userRepository.delete(user);\n             notification.accept(new UserDTO(user));\n         });"
  },
  {
    "sha": "de8ffcbe7c21215b293e53322cf2e85e77a91721",
    "filename": "src/main/java/com/icthh/xm/uaa/service/mail/MailService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 31,
    "changes": 31,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/service/mail/MailService.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/java/com/icthh/xm/uaa/service/mail/MailService.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/service/mail/MailService.java?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -35,7 +35,6 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.MessageSource;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.context.i18n.LocaleContext;\n@@ -198,36 +197,6 @@ public void sendPasswordChangedMail(User user, String applicationUrl, TenantKey\n         });\n     }\n \n-\n-    /**\n-     * Send social registration validation email.\n-     */\n-    @Async\n-    public void sendSocialRegistrationValidationEmail(User user,\n-                                                      String provider,\n-                                                      String applicationUrl,\n-                                                      TenantKey tenantKey,\n-                                                      String rid) {\n-        execForCustomRid(rid, () -> {\n-            log.info(\"Sending social registration validation email to {}\", user.getEmail());\n-\n-            Map<String, Object> objectModel = new HashMap<>();\n-            objectModel.put(USER, user);\n-            objectModel.put(BASE_URL, applicationUrl);\n-            objectModel.put(\"provider\", StringUtils.capitalize(provider));\n-\n-            sendEmailFromTemplate(\n-                tenantKey,\n-                user,\n-                \"socialRegistrationValidationEmail\",\n-                \"email.social.registration.title\",\n-                user.getEmail(),\n-                objectModel\n-            );\n-\n-        });\n-    }\n-\n     public void sendEmailFromTemplate(User user,\n                                       String templateName,\n                                       String subject,"
  },
  {
    "sha": "b833f7558191aed55749ff6badd6328821152dd8",
    "filename": "src/main/java/com/icthh/xm/uaa/social/ConfigAdapter.java",
    "status": "removed",
    "additions": 0,
    "deletions": 29,
    "changes": 29,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigAdapter.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigAdapter.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/ConfigAdapter.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,29 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import org.springframework.social.connect.ApiAdapter;\n-import org.springframework.social.connect.ConnectionValues;\n-import org.springframework.social.connect.UserProfile;\n-\n-public class ConfigAdapter implements ApiAdapter<ConfigOAuth2Api> {\n-\n-    public boolean test(ConfigOAuth2Api api) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    public void setConnectionValues(ConfigOAuth2Api api, ConnectionValues values) {\n-        ConnectionValuesDto connectionValues = api.fetchConnectionValues();\n-        values.setDisplayName(connectionValues.getDisplayName());\n-        values.setImageUrl(connectionValues.getImageUrl());\n-        values.setProfileUrl(connectionValues.getProfileUrl());\n-        values.setProviderUserId(connectionValues.getProviderUserId());\n-    }\n-\n-    public UserProfile fetchUserProfile(ConfigOAuth2Api api) {\n-        return api.fetchUserProfile();\n-    }\n-\n-    public void updateStatus(ConfigOAuth2Api api, String message) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-}"
  },
  {
    "sha": "8b8e3f37f2836f26a1f55aaa05bff3ff4ebaa59a",
    "filename": "src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Api.java",
    "status": "removed",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Api.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Api.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Api.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,57 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import static org.springframework.social.oauth2.TokenStrategy.AUTHORIZATION_HEADER;\n-\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.Social;\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.UserInfoMapping;\n-import java.util.Map;\n-import java.util.function.BiFunction;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.social.ApiBinding;\n-import org.springframework.social.connect.UserProfile;\n-import org.springframework.social.oauth2.AbstractOAuth2ApiBinding;\n-import org.springframework.social.oauth2.TokenStrategy;\n-\n-@Slf4j\n-public class ConfigOAuth2Api extends AbstractOAuth2ApiBinding implements ApiBinding {\n-    private final String accessToken;\n-    private final Social social;\n-    private final SocialUserInfoMapper socialUserInfoMapper;\n-\n-    public ConfigOAuth2Api(String accessToken, Social social, SocialUserInfoMapper socialUserInfoMapper) {\n-        super(accessToken, getTokenStrategy(social));\n-        this.accessToken = accessToken;\n-        this.social = social;\n-        this.socialUserInfoMapper = socialUserInfoMapper;\n-    }\n-\n-    private static TokenStrategy getTokenStrategy(Social social) {\n-        String tokenStrategy = social.getTokenStrategy();\n-        return tokenStrategy != null ? TokenStrategy.valueOf(tokenStrategy) : AUTHORIZATION_HEADER;\n-    }\n-\n-    @Override\n-    public boolean isAuthorized() {\n-        return accessToken != null;\n-    }\n-\n-    public ConnectionValuesDto fetchConnectionValues() {\n-        return fetchUserInfo(socialUserInfoMapper::toConnectionValues);\n-    }\n-\n-    private <T> T fetchUserInfo(BiFunction<UserInfoMapping, Map<String,  Object>, T> mapper) {\n-        Map<String, Object> userInfo = getRestTemplate().getForObject(social.getUserInfoUri(), Map.class);\n-        log.info(\"User info {}\", userInfo);\n-        UserInfoMapping socialMapping = social.getUserInfoMapping();\n-        socialMapping = socialMapping != null ? socialMapping : new UserInfoMapping();\n-        return mapper.apply(socialMapping, userInfo);\n-    }\n-\n-    public UserProfile fetchUserProfile() {\n-        return fetchUserInfo(socialUserInfoMapper::toUserProfile);\n-    }\n-\n-    public SocialUserInfo fetchSocialUser() {\n-        return fetchUserInfo(socialUserInfoMapper::toSocialUserInfo);\n-    }\n-}"
  },
  {
    "sha": "699f594ba2040e3d756b5559d8dd7b7cf91e0caf",
    "filename": "src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2ConnectionFactory.java",
    "status": "removed",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2ConnectionFactory.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2ConnectionFactory.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2ConnectionFactory.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,20 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.Social;\n-import org.springframework.social.connect.support.OAuth2ConnectionFactory;\n-\n-public class ConfigOAuth2ConnectionFactory extends OAuth2ConnectionFactory<ConfigOAuth2Api> {\n-\n-    private final Social social;\n-\n-    public ConfigOAuth2ConnectionFactory(Social social, ConfigServiceProvider configServiceProvider) {\n-        super(social.getProviderId(), configServiceProvider, new ConfigAdapter());\n-        this.social = social;\n-    }\n-\n-    @Override\n-    public String getScope() {\n-        return social.getScope();\n-    }\n-\n-}"
  },
  {
    "sha": "43c27bbca17b61c753b311a5a2fead40f4fe45e8",
    "filename": "src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Template.java",
    "status": "removed",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Template.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Template.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/ConfigOAuth2Template.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,16 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import org.springframework.social.oauth2.OAuth2Template;\n-import org.springframework.web.client.RestTemplate;\n-\n-public class ConfigOAuth2Template extends OAuth2Template {\n-\n-    public ConfigOAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {\n-        super(clientId, clientSecret, authorizeUrl, accessTokenUrl);\n-    }\n-\n-    @Override\n-    public RestTemplate getRestTemplate() {\n-        return super.getRestTemplate();\n-    }\n-}"
  },
  {
    "sha": "8f844870ce7823514704935d33c9b9651e8da39d",
    "filename": "src/main/java/com/icthh/xm/uaa/social/ConfigServiceProvider.java",
    "status": "removed",
    "additions": 0,
    "deletions": 35,
    "changes": 35,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigServiceProvider.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConfigServiceProvider.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/ConfigServiceProvider.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,35 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.Social;\n-import org.springframework.social.oauth2.OAuth2Operations;\n-import org.springframework.social.oauth2.OAuth2ServiceProvider;\n-\n-public class ConfigServiceProvider implements OAuth2ServiceProvider<ConfigOAuth2Api> {\n-\n-    private final Social social;\n-    private final SocialUserInfoMapper socialUserInfoMapper;\n-    private final ConfigOAuth2Template oAuth2Template;\n-\n-    public ConfigServiceProvider(Social social, SocialUserInfoMapper socialUserInfoMapper) {\n-        this.social = social;\n-        this.socialUserInfoMapper = socialUserInfoMapper;\n-        this.oAuth2Template = createOAuth2Template(social);\n-    }\n-\n-    protected ConfigOAuth2Template createOAuth2Template(Social social) {\n-        ConfigOAuth2Template oAuth2Template = new ConfigOAuth2Template(social.getClientId(), social.getClientSecret(),\n-                                                           social.getAuthorizeUrl(), social.getAccessTokenUrl());\n-        oAuth2Template.setUseParametersForClientAuthentication(social.getUseParametersForClientAuthentication());\n-        return oAuth2Template;\n-    }\n-\n-    @Override\n-    public OAuth2Operations getOAuthOperations() {\n-        return oAuth2Template;\n-    }\n-\n-    @Override\n-    public ConfigOAuth2Api getApi(String accessToken) {\n-        return new ConfigOAuth2Api(accessToken, social, socialUserInfoMapper);\n-    }\n-}"
  },
  {
    "sha": "45121c7e2c52fe461af34d6242a7ddf41d4e9b7b",
    "filename": "src/main/java/com/icthh/xm/uaa/social/ConnectionValuesDto.java",
    "status": "removed",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConnectionValuesDto.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/ConnectionValuesDto.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/ConnectionValuesDto.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,13 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-\n-@Data\n-@AllArgsConstructor\n-public class ConnectionValuesDto {\n-    private String providerUserId;\n-    private String displayName;\n-    private String profileUrl;\n-    private String imageUrl;\n-}"
  },
  {
    "sha": "bb6d289e6838d6e1d11ec3e76363e90e2d128c49",
    "filename": "src/main/java/com/icthh/xm/uaa/social/SocialLoginAnswer.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/SocialLoginAnswer.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/SocialLoginAnswer.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/SocialLoginAnswer.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,19 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import lombok.Builder;\n-import lombok.Getter;\n-import org.springframework.security.oauth2.common.OAuth2AccessToken;\n-\n-@Builder\n-@Getter\n-public class SocialLoginAnswer {\n-\n-    private AnswerType answerType;\n-    private OAuth2AccessToken oAuth2AccessToken;\n-    private String activationCode;\n-\n-    public enum AnswerType {\n-        SING_IN, REGISTERED, NEED_ACCEPT_CONNECTION, NEED_ACCEPT_ACCOUNT_CREATION;\n-    }\n-\n-}"
  },
  {
    "sha": "f016ab3cc17dae7efc72956871d5ddcb93680313",
    "filename": "src/main/java/com/icthh/xm/uaa/social/SocialUserInfo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/SocialUserInfo.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/SocialUserInfo.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/SocialUserInfo.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,23 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import lombok.Data;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-@Data\n-public class SocialUserInfo {\n-    private final String id;\n-    private final String name;\n-    private final String firstName;\n-    private final String lastName;\n-    private final String email;\n-    private final String username;\n-    private final String profileUrl;\n-    private final String imageUrl;\n-    private final String phoneNumber;\n-    private final String langKey;\n-    private final String emailVerified;\n-\n-    private Map<String, Object> data = new HashMap<>();\n-}"
  },
  {
    "sha": "6c9b1ae1f30356d8c5f0d1e00bc6c0745480d584",
    "filename": "src/main/java/com/icthh/xm/uaa/social/SocialUserInfoMapper.java",
    "status": "removed",
    "additions": 0,
    "deletions": 80,
    "changes": 80,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/SocialUserInfoMapper.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/SocialUserInfoMapper.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/SocialUserInfoMapper.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,80 +0,0 @@\n-package com.icthh.xm.uaa.social;\n-\n-import static org.apache.commons.lang3.StringUtils.defaultIfBlank;\n-import static org.apache.commons.lang3.StringUtils.isBlank;\n-\n-import com.icthh.xm.commons.lep.LogicExtensionPoint;\n-import com.icthh.xm.commons.lep.spring.LepService;\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.UserInfoMapping;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.function.Supplier;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.social.connect.UserProfile;\n-import org.springframework.stereotype.Service;\n-\n-@Slf4j\n-@Service\n-@LepService(group = \"service.social\")\n-public class SocialUserInfoMapper {\n-\n-    @LogicExtensionPoint(\"MapToSocialUserInfo\")\n-    public SocialUserInfo toSocialUserInfo(UserInfoMapping mapping, Map<String, Object> userInfo) {\n-        return new SocialUserInfo(\n-            map(mapping::getId, userInfo),\n-            map(mapping::getName, userInfo),\n-            map(mapping::getFirstName, userInfo),\n-            map(mapping::getLastName, userInfo),\n-            map(() -> defaultIfBlank(mapping.getEmail(), \"email\"), userInfo),\n-            map(mapping::getUsername, userInfo),\n-            map(mapping::getProfileUrl, userInfo),\n-            map(mapping::getImageUrl, userInfo),\n-            map(mapping::getPhoneNumber, userInfo),\n-            map(mapping::getLangKey, userInfo),\n-            map(mapping::getEmailVerifiedCheckField, userInfo)\n-        );\n-    }\n-\n-    @LogicExtensionPoint(\"MapToUserProfile\")\n-    public UserProfile toUserProfile(UserInfoMapping mapping, Map<String, Object> userInfo) {\n-        return new UserProfile(\n-            map(mapping::getId, userInfo),\n-            map(mapping::getName, userInfo),\n-            map(mapping::getFirstName, userInfo),\n-            map(mapping::getLastName, userInfo),\n-            map(() -> defaultIfBlank(mapping.getEmail(), \"email\"), userInfo),\n-            map(mapping::getUsername, userInfo)\n-        );\n-    }\n-\n-    @LogicExtensionPoint(\"MapToConnectionValues\")\n-    public ConnectionValuesDto toConnectionValues(UserInfoMapping mapping, Map<String, Object> userInfo) {\n-        return new ConnectionValuesDto(\n-            map(mapping::getId, userInfo),\n-            map(mapping::getName, userInfo),\n-            map(mapping::getProfileUrl, userInfo),\n-            map(mapping::getImageUrl, userInfo)\n-        );\n-    }\n-\n-    private String map(Supplier<String> mapping, Map<String, Object> userInfo) {\n-        if (isBlank(mapping.get())) {\n-            return null;\n-        }\n-        Object value = userInfo;\n-        for (String property : mapping.get().split(\"\\\\.\")) {\n-            value = getProperty(Optional.ofNullable(value), property);\n-        }\n-        return value == null ? null : String.valueOf(value);\n-    }\n-\n-    private Object getProperty(Optional<Object> object, String property) {\n-        return object.filter(Map.class::isInstance)\n-            .map(Map.class::cast)\n-            .map(map -> map.get(property))\n-            .orElse(null);\n-    }\n-\n-}"
  },
  {
    "sha": "7063558e3a12f10a0041b3e7a5025a57ec17097b",
    "filename": "src/main/java/com/icthh/xm/uaa/social/exceptions/FoundMoreThanOneUserBySocialUserInfo.java",
    "status": "removed",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/exceptions/FoundMoreThanOneUserBySocialUserInfo.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/exceptions/FoundMoreThanOneUserBySocialUserInfo.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/exceptions/FoundMoreThanOneUserBySocialUserInfo.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,12 +0,0 @@\n-package com.icthh.xm.uaa.social.exceptions;\n-\n-import com.icthh.xm.commons.exceptions.BusinessException;\n-import com.icthh.xm.uaa.domain.User;\n-\n-import java.util.List;\n-\n-public class FoundMoreThanOneUserBySocialUserInfo extends BusinessException {\n-    public FoundMoreThanOneUserBySocialUserInfo(List<User> existingUser) {\n-        super(\"error.found.more.than.one.user.by.social.login\", \"Found more than one users by social info.\");\n-    }\n-}"
  },
  {
    "sha": "519c1ed50da75d16aad3c475c0294fa56f46c3a0",
    "filename": "src/main/java/com/icthh/xm/uaa/social/package-info.java",
    "status": "removed",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/package-info.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/social/package-info.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/social/package-info.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,5 +0,0 @@\n-/**\n- *\n- */\n-// FIXME: to remove old social network integration\n-package com.icthh.xm.uaa.social;"
  },
  {
    "sha": "033d7d88982cc99dcbeebfb3b7121fc7811615ab",
    "filename": "src/main/java/com/icthh/xm/uaa/web/rest/SocialController.java",
    "status": "removed",
    "additions": 0,
    "deletions": 97,
    "changes": 97,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/web/rest/SocialController.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/java/com/icthh/xm/uaa/web/rest/SocialController.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/java/com/icthh/xm/uaa/web/rest/SocialController.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,97 +0,0 @@\n-package com.icthh.xm.uaa.web.rest;\n-\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.NEED_ACCEPT_CONNECTION;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.REGISTERED;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.SING_IN;\n-import static org.springframework.social.support.URIBuilder.fromUri;\n-\n-import com.icthh.xm.commons.permission.annotation.PrivilegeDescription;\n-import com.icthh.xm.uaa.commons.UaaUtils;\n-import com.icthh.xm.uaa.commons.XmRequestContextHolder;\n-import com.icthh.xm.uaa.service.SocialService;\n-import com.icthh.xm.uaa.service.TenantPropertiesService;\n-import com.icthh.xm.uaa.social.SocialLoginAnswer;\n-import java.util.Optional;\n-import javax.servlet.http.Cookie;\n-import lombok.RequiredArgsConstructor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.security.oauth2.common.OAuth2AccessToken;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.RestController;\n-import org.springframework.web.context.request.ServletWebRequest;\n-import org.springframework.web.servlet.view.RedirectView;\n-\n-@RestController\n-@RequestMapping(\"/social\")\n-@RequiredArgsConstructor\n-public class SocialController {\n-\n-    private final Logger log = LoggerFactory.getLogger(SocialController.class);\n-\n-    private static final String POST_SIGN_IN_URL = \"/\";\n-\n-    private final SocialService socialService;\n-    private final XmRequestContextHolder xmRequestContextHolder;\n-    private final TenantPropertiesService tenantPropertiesService;\n-\n-    @PostMapping(value = \"/signin/{providerId}\")\n-    @PreAuthorize(\"hasPermission(null, 'SOCIAL.SIGN_IN')\")\n-    @PrivilegeDescription(\"Privilege to social sign in\")\n-    public RedirectView signIn(@PathVariable String providerId) {\n-        try {\n-            return new RedirectView(socialService.initSocialLogin(providerId), false);\n-        } catch (Exception e) {\n-            return redirectOnError(providerId);\n-        }\n-    }\n-\n-    @GetMapping(value = \"/signin/{providerId}\", params = \"code\")\n-    public RedirectView oauth2Callback(@PathVariable String providerId, @RequestParam(\"code\") String code,\n-                                       ServletWebRequest request) {\n-        try {\n-            SocialLoginAnswer answer = socialService.acceptSocialLoginUser(providerId, code);\n-            if (answer.getAnswerType() == SING_IN || answer.getAnswerType() == REGISTERED) {\n-                OAuth2AccessToken token = answer.getOAuth2AccessToken();\n-                Cookie cookie = new Cookie(\"social-authentication\", token.getValue());\n-                cookie.setMaxAge(60);\n-                cookie.setPath(\"/\");\n-                request.getResponse().addCookie(cookie);\n-                return redirect(\"/social-auth\");\n-            } else if (answer.getAnswerType() == NEED_ACCEPT_CONNECTION) {\n-                request.getResponse().addHeader(\"X-ACTIVATION-CODE\", answer.getActivationCode());\n-                return redirect(\"/social-accept-connection\");\n-            }\n-            return redirectOnError(providerId);\n-        } catch (Exception e) {\n-            return redirectOnError(providerId);\n-        }\n-    }\n-\n-    @PostMapping(value = \"/accept/{activationCode}\")\n-    @PreAuthorize(\"hasPermission(null, 'SOCIAL.ACCEPT_CONNECTION')\")\n-    @PrivilegeDescription(\"Privilege to social accept connection\")\n-    public void acceptConnection(@PathVariable String activationCode) {\n-        socialService.acceptConnection(activationCode);\n-    }\n-\n-    private String baseUrl() {\n-        return Optional.ofNullable(tenantPropertiesService.getTenantProps().getSocialBaseUrl())\n-                       .orElse(UaaUtils.getApplicationUrl(xmRequestContextHolder));\n-    }\n-\n-    private RedirectView redirect(String url) {\n-        return new RedirectView(baseUrl() + url, true);\n-    }\n-\n-    private RedirectView redirectOnError(String providerId) {\n-        return redirect(fromUri(baseUrl() + \"/social-register/\" + providerId)\n-                            .queryParam(\"success\", \"false\").build().toString());\n-    }\n-\n-}"
  },
  {
    "sha": "de83bb90e72cf05dfa2afe5775e9ea93193e66d8",
    "filename": "src/main/resources/config/emails/en/socialRegistrationValidationEmail.ftl",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/resources/config/emails/en/socialRegistrationValidationEmail.ftl",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/main/resources/config/emails/en/socialRegistrationValidationEmail.ftl",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/resources/config/emails/en/socialRegistrationValidationEmail.ftl?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,21 +0,0 @@\n-<!DOCTYPE html>\n-<html>\n-    <head>\n-        <title>uaa account activation</title>\n-        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n-        <link rel=\"shortcut icon\" href=\"${baseUrl}/favicon.ico\" />\n-    </head>\n-    <body>\n-        <p>\n-            Dear ${user.firstName + ' ' + user.lastName}\n-        </p>\n-        <p>\n-            Your uaa account has been created with a ${provider} connection.\n-        </p>\n-        <p>\n-            <span>Regards, </span>\n-            <br/>\n-            <em>XM^online Team.</em>\n-        </p>\n-    </body>\n-</html>"
  },
  {
    "sha": "0daa9cb859e2673a12b1e06d5c1a08901190d74d",
    "filename": "src/main/resources/config/liquibase/changelog/20210305122900_drop_social_connection_table.xml",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/config/liquibase/changelog/20210305122900_drop_social_connection_table.xml",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/config/liquibase/changelog/20210305122900_drop_social_connection_table.xml",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/resources/config/liquibase/changelog/20210305122900_drop_social_connection_table.xml?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd\">\n+\n+    <changeSet id=\"20210305122900\" author=\"oyershov\">\n+\n+        <dropTable tableName=\"social_connection\" />\n+\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "276897773fe8fdf81db2bfe4a4424be51a544e0f",
    "filename": "src/main/resources/config/liquibase/master.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/config/liquibase/master.xml",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/config/liquibase/master.xml",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/resources/config/liquibase/master.xml?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -32,6 +32,7 @@\n \n     <include file=\"classpath:config/liquibase/changelog/20200512132800_update_client_scopes_column.xml\" relativeToChangelogFile=\"false\"/>\n     <include file=\"classpath:config/liquibase/changelog/20210127160400_block_client.xml\" relativeToChangelogFile=\"false\"/>\n+    <include file=\"classpath:config/liquibase/changelog/20210305122900_drop_social_connection_table.xml\" relativeToChangelogFile=\"false\"/>\n \n     <!-- jhipster-needle-liquibase-add-changelog - JHipster will add liquibase changelogs here -->\n     <!-- jhipster-needle-liquibase-add-constraints-changelog - JHipster will add liquibase constraints changelogs here -->"
  },
  {
    "sha": "798b747cb7082b95b1f483f8db2c2fc3830ebf6f",
    "filename": "src/main/resources/i18n/messages.properties",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/i18n/messages.properties",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/i18n/messages.properties",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/resources/i18n/messages.properties?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -23,11 +23,5 @@ email.reset.text2=Regards,\n # Reset email\n email.changed.title=XM^online password changed\n \n-# Social validation email\n-email.social.registration.title=XM^online account activation\n-email.social.registration.greeting=Dear {0}\n-email.social.registration.text1=Your XM^online account has been created with a {0} connection.\n-email.social.registration.text2=Regards,\n-\n // OTP for TFA\n email.tfa.otp.title=One-time password"
  },
  {
    "sha": "dcedc3180d147a13e05f188d061a0b8d8f8cca86",
    "filename": "src/main/resources/i18n/messages_en.properties",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/i18n/messages_en.properties",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/i18n/messages_en.properties",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/resources/i18n/messages_en.properties?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -23,11 +23,5 @@ email.reset.text2=Regards,\n # Reset email\n email.changed.title=uaa password changed\n \n-# Social validation email\n-email.social.registration.title=uaa account activation\n-email.social.registration.greeting=Dear {0}\n-email.social.registration.text1=Your uaa account has been created with a {0} connection.\n-email.social.registration.text2=Regards,\n-\n // OTP for TFA\n email.tfa.otp.title=One-time password"
  },
  {
    "sha": "2b747d435f9f907dddfd0672332aa9181fbd93e3",
    "filename": "src/main/resources/i18n/messages_ru.properties",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/i18n/messages_ru.properties",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/main/resources/i18n/messages_ru.properties",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/main/resources/i18n/messages_ru.properties?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -23,11 +23,5 @@ email.reset.text2=С уважением,\n # Reset email\n email.changed.title=XM^online смена пароля\n \n-# Social validation email\n-email.social.registration.title=XM^online активация\n-email.social.registration.greeting=Дорогой {0}\n-email.social.registration.text1=Ваш XM^online аккаунт был создан с {0} подключением.\n-email.social.registration.text2=С уважением,\n-\n // OTP for TFA\n email.tfa.otp.title=Одноразовый пароль"
  },
  {
    "sha": "d8d2cca56e8e1305e78c2e1138da848a38777634",
    "filename": "src/test/java/com/icthh/xm/uaa/config/TenantManagerConfigurationUnitTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/test/java/com/icthh/xm/uaa/config/TenantManagerConfigurationUnitTest.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/b20e33b63f012f2818d5541209c5ba1b5fa0d267/src/test/java/com/icthh/xm/uaa/config/TenantManagerConfigurationUnitTest.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/test/java/com/icthh/xm/uaa/config/TenantManagerConfigurationUnitTest.java?ref=b20e33b63f012f2818d5541209c5ba1b5fa0d267",
    "patch": "@@ -84,7 +84,6 @@ public void testCreateTenantConfigProvisioning() {\n         configurations.add(Configuration.of().path(\"/config/tenants/{tenantName}/uaa/emails/en/activationEmail.ftl\").build());\n         configurations.add(Configuration.of().path(\"/config/tenants/{tenantName}/uaa/emails/en/creationEmail.ftl\").build());\n         configurations.add(Configuration.of().path(\"/config/tenants/{tenantName}/uaa/emails/en/passwordResetEmail.ftl\").build());\n-        configurations.add(Configuration.of().path(\"/config/tenants/{tenantName}/uaa/emails/en/socialRegistrationValidationEmail.ftl\").build());\n \n \n         verify(tenantConfigRepository).createConfigsFullPath(eq(\"newtenant\"), eq(configurations));"
  },
  {
    "sha": "f0d0b4492f751b00dc79dbc37e0337ebfa5503db",
    "filename": "src/test/java/com/icthh/xm/uaa/service/SocialServiceIntTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 441,
    "changes": 441,
    "blob_url": "https://github.com/xm-online/xm-uaa/blob/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/test/java/com/icthh/xm/uaa/service/SocialServiceIntTest.java",
    "raw_url": "https://github.com/xm-online/xm-uaa/raw/96ffb3a45bd0246130f455cf7a57212cdbdb4420/src/test/java/com/icthh/xm/uaa/service/SocialServiceIntTest.java",
    "contents_url": "https://api.github.com/repos/xm-online/xm-uaa/contents/src/test/java/com/icthh/xm/uaa/service/SocialServiceIntTest.java?ref=96ffb3a45bd0246130f455cf7a57212cdbdb4420",
    "patch": "@@ -1,441 +0,0 @@\n-package com.icthh.xm.uaa.service;\n-\n-import static com.google.common.collect.ImmutableBiMap.of;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.REGISTERED;\n-import static com.icthh.xm.uaa.social.SocialLoginAnswer.AnswerType.SING_IN;\n-import static com.icthh.xm.uaa.utils.DeepReflectionEquals.deepRefEq;\n-import static java.util.Arrays.asList;\n-import static java.util.Collections.singletonList;\n-import static java.util.Optional.empty;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.refEq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.springframework.test.web.client.ExpectedCount.once;\n-import static org.springframework.test.web.client.ExpectedCount.times;\n-import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;\n-import static org.springframework.test.web.client.match.MockRestRequestMatchers.header;\n-import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n-import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n-import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.icthh.xm.commons.security.XmAuthenticationContextHolder;\n-import com.icthh.xm.commons.tenant.Tenant;\n-import com.icthh.xm.commons.tenant.TenantContext;\n-import com.icthh.xm.commons.tenant.TenantContextHolder;\n-import com.icthh.xm.commons.tenant.TenantKey;\n-import com.icthh.xm.uaa.commons.XmRequestContext;\n-import com.icthh.xm.uaa.commons.XmRequestContextHolder;\n-import com.icthh.xm.uaa.domain.SocialUserConnection;\n-import com.icthh.xm.uaa.domain.User;\n-import com.icthh.xm.uaa.domain.UserLogin;\n-import com.icthh.xm.uaa.domain.UserLoginType;\n-import com.icthh.xm.uaa.domain.properties.TenantProperties;\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.Social;\n-import com.icthh.xm.uaa.domain.properties.TenantProperties.UserInfoMapping;\n-import com.icthh.xm.uaa.repository.SocialUserConnectionRepository;\n-import com.icthh.xm.uaa.repository.UserLoginRepository;\n-import com.icthh.xm.uaa.repository.UserRepository;\n-import com.icthh.xm.uaa.security.DomainJwtAccessTokenConverter;\n-import com.icthh.xm.uaa.security.DomainJwtAccessTokenDetailsPostProcessor;\n-import com.icthh.xm.uaa.security.DomainTokenServices;\n-import com.icthh.xm.uaa.security.DomainUserDetailsService;\n-import com.icthh.xm.uaa.security.TokenConstraintsService;\n-import com.icthh.xm.uaa.social.ConfigOAuth2Api;\n-import com.icthh.xm.uaa.social.ConfigOAuth2Template;\n-import com.icthh.xm.uaa.social.ConfigServiceProvider;\n-import com.icthh.xm.uaa.social.SocialLoginAnswer;\n-import com.icthh.xm.uaa.social.SocialUserInfoMapper;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-import lombok.SneakyThrows;\n-import lombok.extern.slf4j.Slf4j;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockito.MockitoAnnotations;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.MediaType;\n-import org.springframework.security.authentication.ProviderNotFoundException;\n-import org.springframework.security.core.userdetails.UserDetailsService;\n-import org.springframework.security.crypto.password.PasswordEncoder;\n-import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;\n-import org.springframework.test.web.client.MockRestServiceServer;\n-import org.springframework.web.client.support.RestGatewaySupport;\n-\n-@Slf4j\n-public class SocialServiceIntTest {\n-\n-    private static final String MOCK_ACCESS_TOKEN = \"MOCK_ACCESS_TOKEN\";\n-    private static final String PROVIDER_ID = \"P_ID\";\n-    private static final String PROVIDER_USER_ID = \"123\";\n-\n-    private SocialService socialService;\n-\n-    @Mock\n-    private SocialUserConnectionRepository socialRepository;\n-    @Mock\n-    private PasswordEncoder passwordEncoder;\n-    @Mock\n-    private UserRepository userRepository;\n-    @Mock\n-    private AccountMailService accountMailService;\n-\n-    private UserDetailsService userDetailsService;\n-    @Mock\n-    private TenantPropertiesService tenantPropertiesService;\n-\n-    private DomainTokenServices tokenServices;\n-    @Mock\n-    private UserLoginRepository userLoginRepository;\n-\n-    private SocialUserInfoMapper socialUserInfoMapper = new SocialUserInfoMapper();\n-    @Mock\n-    private XmAuthenticationContextHolder xmAuthenticationContextHolder;\n-    @Mock\n-    private XmRequestContextHolder xmRequestContextHolder;\n-    @Mock\n-    private TenantContextHolder tenantContextHolder;\n-\n-    private MockRestServiceServer oAuth2TemplateMockServer;\n-    private List<Consumer<?>> oAuth2RestMoks = new ArrayList<>();\n-\n-    private MockRestServiceServer apiMockSserver;\n-    private List<Consumer<?>> apiRestMoks = new ArrayList<>();\n-\n-    @Before\n-    public void setup() {\n-        MockitoAnnotations.initMocks(this);\n-        userDetailsService = new DomainUserDetailsService(userLoginRepository, tenantContextHolder);\n-        tokenServices = new DomainTokenServices();\n-        DomainJwtAccessTokenDetailsPostProcessor processor = new DomainJwtAccessTokenDetailsPostProcessor();\n-        DomainJwtAccessTokenConverter accessTokenEnhancer = new DomainJwtAccessTokenConverter(tenantContextHolder,\n-                                                                                              processor);\n-        tokenServices.setTokenStore(new JwtTokenStore(accessTokenEnhancer));\n-        tokenServices.setTokenConstraintsService(mock(TokenConstraintsService.class));\n-        tokenServices.setTokenEnhancer(accessTokenEnhancer);\n-\n-        socialService = new SocialService(socialRepository,\n-                                          passwordEncoder,\n-                                          userRepository,\n-                                          accountMailService,\n-                                          userDetailsService,\n-                                          tenantPropertiesService,\n-                                          tokenServices,\n-                                          userLoginRepository,\n-                                          socialUserInfoMapper,\n-                                          xmAuthenticationContextHolder,\n-                                          xmRequestContextHolder,\n-                                          null) {\n-            @Override\n-            protected ConfigServiceProvider createConfigServiceProvider(Social social) {\n-                return new ConfigServiceProvider(social, socialUserInfoMapper) {\n-                    @Override\n-                    protected ConfigOAuth2Template createOAuth2Template(Social social) {\n-                        ConfigOAuth2Template oAuth2Template = super.createOAuth2Template(social);\n-\n-                        RestGatewaySupport gateway = new RestGatewaySupport();\n-                        gateway.setRestTemplate(oAuth2Template.getRestTemplate());\n-                        oAuth2TemplateMockServer = MockRestServiceServer.createServer(gateway);\n-                        oAuth2RestMoks.forEach(it -> it.accept(null));\n-\n-                        return oAuth2Template;\n-                    }\n-\n-                    @Override\n-                    public ConfigOAuth2Api getApi(String accessToken) {\n-                        ConfigOAuth2Api api = super.getApi(accessToken);\n-\n-                        RestGatewaySupport gateway = new RestGatewaySupport();\n-                        gateway.setRestTemplate(api.getRestTemplate());\n-                        apiMockSserver = MockRestServiceServer.createServer(gateway);\n-                        apiRestMoks.forEach(it -> it.accept(null));\n-\n-                        return api;\n-                    }\n-                };\n-            }\n-        };\n-        socialService.setSelf(socialService);\n-    }\n-\n-    @Test(expected = ProviderNotFoundException.class)\n-    public void testProviderNotFound() {\n-        mockTenantProperties();\n-        socialService.initSocialLogin(\"unknow provider\");\n-    }\n-\n-    @Test\n-    public void testInitUrl() {\n-        mockTenantProperties();\n-        mockRequestContext();\n-        String result = socialService.initSocialLogin(\"P_ID\");\n-        Assert.assertEquals(result, \"http://AU?client_id=CI&response_type=code&redirect_uri=http%3A%2F%2Fdomainname%3A0987%2Fuaa%2Fsocial%2Fsignin%2FP_ID&scope=SCOPE\");\n-    }\n-\n-    @Test\n-    @SneakyThrows\n-    public void testSuccessSingIn() {\n-        mockTenantProperties();\n-        mockRequestContext();\n-        mockGetAccessRequests();\n-\n-        SocialUserConnection userConnection = new SocialUserConnection();\n-        userConnection.setUserKey(\"USER_KEY\");\n-        when(socialRepository.findByProviderUserIdAndProviderId(PROVIDER_USER_ID, PROVIDER_ID)).thenReturn(\n-            Optional.of(userConnection));\n-\n-        User user = new User();\n-        UserLogin userLogin = new UserLogin();\n-        userLogin.setTypeKey(UserLoginType.EMAIL.getValue());\n-        userLogin.setUser(user);\n-        userLogin.setLogin(\"test@email.com\");\n-\n-        UserLogin number = new UserLogin();\n-        number.setTypeKey(UserLoginType.MSISDN.getValue());\n-        number.setUser(user);\n-        number.setLogin(\"380930912700\");\n-        user.setActivated(true);\n-        user.setRoleKey(\"ROLE_USER\");\n-        user.setUserKey(\"USER_KEY\");\n-        user.setPassword(\"password\");\n-\n-        user.setLogins(asList(userLogin, number));\n-        when(userRepository.findOneByUserKey(\"USER_KEY\")).thenReturn(Optional.of(user));\n-        when(userLoginRepository.findOneByLogin(\"test@email.com\")).thenReturn(Optional.of(userLogin));\n-\n-        mockTenant();\n-\n-        SocialLoginAnswer socialLoginAnswer = socialService.acceptSocialLoginUser(\"P_ID\",\n-            \"activationCode\");\n-\n-        Assert.assertEquals(socialLoginAnswer.getAnswerType(), SING_IN);\n-\n-        assertJwtToken(socialLoginAnswer, \"test@email.com\",\n-                       asList(login(\"LOGIN.EMAIL\", \"test@email.com\"),\n-                           login(\"LOGIN.MSISDN\", \"380930912700\")));\n-    }\n-\n-    private void assertJwtToken(SocialLoginAnswer socialLoginAnswer, String userName,\n-                                List<Map<String, Object>> logins) throws java.io.IOException {\n-        Map<String, Object> jwt = new HashMap<>();\n-        jwt.put(\"user_name\", userName);\n-        jwt.put(\"scope\", singletonList(\"openid\"));\n-        jwt.put(\"role_key\", \"ROLE_USER\");\n-        jwt.put(\"user_key\", \"USER_KEY\");\n-        jwt.put(\"logins\", logins);\n-        jwt.put(\"authorities\", singletonList(\"ROLE_USER\"));\n-        jwt.put(\"tenant\", \"TEST_T\");\n-        jwt.put(\"client_id\", \"webapp\");\n-\n-        log.info(\"{}\", socialLoginAnswer.getOAuth2AccessToken().getValue());\n-        String value = socialLoginAnswer.getOAuth2AccessToken().getValue().split(\"\\\\.\")[1];\n-        Map map = new ObjectMapper().readValue(Base64.getDecoder().decode(value), Map.class);\n-        map.remove(\"createTokenTime\");\n-        map.remove(\"jti\");\n-\n-        Assert.assertEquals(jwt, map);\n-    }\n-\n-    @Test\n-    @SneakyThrows\n-    public void createUserAutomaticallyByDefault() {\n-        mockTenantProperties();\n-        mockRequestContext();\n-        mockGetAccessRequests();\n-\n-        when(socialRepository.findByProviderUserIdAndProviderId(PROVIDER_USER_ID, PROVIDER_ID)).thenReturn(empty());\n-\n-        User user = createMockUser();\n-\n-        UserLogin userLogin = new UserLogin();\n-        userLogin.setTypeKey(UserLoginType.EMAIL.getValue());\n-        userLogin.setUser(user);\n-        userLogin.setLogin(\"test@email.com\");\n-        UserLogin number = new UserLogin();\n-        number.setTypeKey(UserLoginType.MSISDN.getValue());\n-        number.setUser(user);\n-        number.setLogin(\"380930912700\");\n-        user.setLogins(asList(userLogin, number));\n-        when(userRepository.findOneByUserKey(\"USER_KEY\")).thenReturn(Optional.of(user));\n-        when(userLoginRepository.findOneByLoginIgnoreCase(\"test@email.com\")).thenReturn(empty());\n-        when(userLoginRepository.findOneByLoginIgnoreCase(\"380930912700\")).thenReturn(empty());\n-        when(userLoginRepository.findOneByLogin(\"test@email.com\")).thenReturn(Optional.of(userLogin));\n-        mockTenant();\n-        when(userRepository.save(any(User.class))).thenReturn(user);\n-        SocialUserConnection userConnection = new SocialUserConnection(null, \"USER_KEY\", PROVIDER_ID, PROVIDER_USER_ID,\n-                                                                       null, null);\n-        when(socialRepository.save(any(SocialUserConnection.class))).thenReturn(userConnection);\n-\n-        SocialLoginAnswer socialLoginAnswer = socialService.acceptSocialLoginUser(\"P_ID\", \"activationCode\");\n-\n-        user.setPassword(null);\n-        verify(userRepository).save(deepRefEq(user, \"userKey\", \"tfaOtpSecret\", \"createdDate\", \"lastModifiedDate\"));\n-        verify(socialRepository).save(refEq(userConnection, \"activationCode\"));\n-        Assert.assertEquals(socialLoginAnswer.getAnswerType(), REGISTERED);\n-        assertJwtToken(socialLoginAnswer, \"test@email.com\",\n-                       asList(login(\"LOGIN.EMAIL\", \"test@email.com\"), login(\"LOGIN.MSISDN\", \"380930912700\")));\n-    }\n-\n-    @Test\n-    @SneakyThrows\n-    public void createUserAutomaticallyWithOnlyPhoneNumber() {\n-        mockTenantProperties();\n-        mockRequestContext();\n-        mockRequestToken();\n-        apiRestMoks.add(r -> {\n-            Map<String, Object> user = new HashMap<>();\n-            user.put(\"fn\", \"firstN\");\n-            user.put(\"id\", 123);\n-            user.put(\"path\", of(\"to\", of(\"to\", of(\"image\", of(\"url\", \"URL_IMAGE\")))));\n-            user.put(\"phoneNumher\", \"380930912700\");\n-            apiMockSserver.expect(times(2), requestTo(\"http://UIU\"))\n-                          .andExpect(method(HttpMethod.GET))\n-                          .andExpect(header(HttpHeaders.AUTHORIZATION, \"Bearer \" + MOCK_ACCESS_TOKEN))\n-                          .andRespond(withSuccess(toJson(user), MediaType.APPLICATION_JSON));\n-\n-        });\n-\n-        when(socialRepository.findByProviderUserIdAndProviderId(PROVIDER_USER_ID, PROVIDER_ID)).thenReturn(empty());\n-\n-        User user = createMockUser();\n-\n-        UserLogin number = new UserLogin();\n-        number.setTypeKey(UserLoginType.MSISDN.getValue());\n-        number.setUser(user);\n-        number.setLogin(\"380930912700\");\n-        user.setLogins(singletonList(number));\n-\n-        when(userRepository.findOneByUserKey(\"USER_KEY\")).thenReturn(Optional.of(user));\n-        when(userLoginRepository.findOneByLoginIgnoreCase(\"380930912700\")).thenReturn(empty());\n-        when(userLoginRepository.findOneByLogin(\"380930912700\")).thenReturn(Optional.of(number));\n-        mockTenant();\n-        when(userRepository.save(any(User.class))).thenReturn(user);\n-        SocialUserConnection userConnection = new SocialUserConnection(null, \"USER_KEY\", PROVIDER_ID, PROVIDER_USER_ID,\n-                                                                       null, null);\n-        when(socialRepository.save(any(SocialUserConnection.class))).thenReturn(userConnection);\n-\n-        SocialLoginAnswer socialLoginAnswer = socialService.acceptSocialLoginUser(\"P_ID\", \"activationCode\");\n-\n-        user.setPassword(null);\n-        verify(userRepository).save(deepRefEq(user, \"userKey\", \"tfaOtpSecret\", \"createdDate\", \"lastModifiedDate\"));\n-        verify(socialRepository).save(refEq(userConnection, \"activationCode\"));\n-        Assert.assertEquals(socialLoginAnswer.getAnswerType(), REGISTERED);\n-        assertJwtToken(socialLoginAnswer, \"380930912700\", singletonList(login(\"LOGIN.MSISDN\", \"380930912700\")));\n-    }\n-\n-    private void mockRequestToken() {\n-        oAuth2RestMoks.add(r -> oAuth2TemplateMockServer\n-            .expect(once(), requestTo(\"http://ATU\"))\n-            .andExpect(method(HttpMethod.POST))\n-            .andExpect(content().string(\n-                \"client_id=CI&client_secret=CS&code=activationCode&redirect_uri=http%3A%2F%2Fdomainname%3A0987%2Fuaa\"\n-                + \"%2Fsocial%2Fsignin%2FP_ID&grant_type=authorization_code\"))\n-            .andRespond(withSuccess(\"{\\\"access_token\\\": \\\"\" + MOCK_ACCESS_TOKEN + \"\\\"}\", MediaType.APPLICATION_JSON)));\n-    }\n-\n-    private User createMockUser() {\n-        User user = new User();\n-        user.setActivated(true);\n-        user.setRoleKey(\"ROLE_USER\");\n-        user.setUserKey(\"USER_KEY\");\n-        user.setPassword(\"PWD\");\n-        user.setFirstName(\"firstN\");\n-        user.setLangKey(null);\n-        return user;\n-    }\n-\n-    private Map<String, Object> login(String typeKey, String value) {\n-        Map<String, Object> login = new HashMap<>();\n-        login.put(\"typeKey\", typeKey);\n-        login.put(\"stateKey\", null);\n-        login.put(\"login\", value);\n-        return login;\n-    }\n-\n-    private void mockTenant() {\n-        when(tenantContextHolder.getContext()).thenReturn(new TenantContext() {\n-\n-            @Override\n-            public boolean isInitialized() {\n-                return true;\n-            }\n-\n-            @Override\n-            public Optional<Tenant> getTenant() {\n-                return empty();\n-            }\n-\n-            @Override\n-            public Optional<TenantKey> getTenantKey() {\n-                return Optional.of(TenantKey.valueOf(\"TEST_T\"));\n-            }\n-        });\n-    }\n-\n-    private void mockGetAccessRequests() {\n-        mockRequestToken();\n-        apiRestMoks.add(r -> {\n-            Map<String, Object> user = new HashMap<>();\n-            user.put(\"email\", \"test@email.com\");\n-            user.put(\"fn\", \"firstN\");\n-            user.put(\"id\", 123);\n-            user.put(\"path\", of(\"to\", of(\"to\", of(\"image\", of(\"url\", \"URL_IMAGE\")))));\n-            user.put(\"phoneNumher\", \"380930912700\");\n-                apiMockSserver.expect(times(2), requestTo(\"http://UIU\"))\n-                    .andExpect(method(HttpMethod.GET))\n-                    .andExpect(header(HttpHeaders.AUTHORIZATION, \"Bearer \" + MOCK_ACCESS_TOKEN))\n-                    .andRespond(withSuccess(toJson(user), MediaType.APPLICATION_JSON));\n-\n-        });\n-    }\n-\n-    @SneakyThrows\n-    private String toJson(Map<String, Object> user) {\n-        return new ObjectMapper().writeValueAsString(user);\n-    }\n-\n-    private void mockRequestContext() {\n-        XmRequestContext mock = mock(XmRequestContext.class);\n-        when(xmRequestContextHolder.getContext()).thenReturn(mock);\n-        when(mock.getValue(\"protocol\", String.class)).thenReturn(\"http\");\n-        when(mock.getValue(\"domain\", String.class)).thenReturn(\"domainname\");\n-        when(mock.getValue(\"port\", String.class)).thenReturn(\"0987\");\n-    }\n-\n-    private void mockTenantProperties() {\n-        TenantProperties tenantProperties = new TenantProperties();\n-        when(tenantPropertiesService.getTenantProps()).thenReturn(tenantProperties);\n-        Social social = new Social();\n-        tenantProperties.setSocial(singletonList(social));\n-        social.setAccessTokenUrl(\"http://ATU\");\n-        social.setAuthorizeUrl(\"http://AU\");\n-        social.setClientId(\"CI\");\n-        social.setClientSecret(\"CS\");\n-        social.setProviderId(\"P_ID\");\n-        social.setScope(\"SCOPE\");\n-        social.setUserInfoUri(\"http://UIU\");\n-        UserInfoMapping userInfoMapping = new UserInfoMapping();\n-        social.setUserInfoMapping(userInfoMapping);\n-        userInfoMapping.setEmail(\"email\");\n-        userInfoMapping.setFirstName(\"fn\");\n-        userInfoMapping.setLastName(\"ln\");\n-        userInfoMapping.setId(\"id\");\n-        userInfoMapping.setLangKey(\"path.to.lang\");\n-        userInfoMapping.setImageUrl(\"path.to.image.url\");\n-        userInfoMapping.setPhoneNumber(\"phoneNumher\");\n-        TenantProperties.Security security = new TenantProperties.Security();\n-        security.setDefaultUserRole(\"ROLE_USER\");\n-        tenantProperties.setSecurity(security);\n-    }\n-}\n-"
  }
]
