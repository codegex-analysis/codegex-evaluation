[
  {
    "sha": "6b82d9601ea3bb3370f075b3f046d835189348c1",
    "filename": "Data/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/pom.xml",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/pom.xml",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Data/pom.xml?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -49,6 +49,11 @@\n             <version>4.6.1</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.vavr</groupId>\n+            <artifactId>vavr</artifactId>\n+            <version>1.0.0-alpha-3</version>\n+        </dependency>\n     </dependencies>\n \n </project>"
  },
  {
    "sha": "17102765c2b11fb9e2e6bebfc1b784b093c81f0b",
    "filename": "Data/src/main/java/manfred/data/persistence/PreviousFileContent.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/src/main/java/manfred/data/persistence/PreviousFileContent.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/src/main/java/manfred/data/persistence/PreviousFileContent.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Data/src/main/java/manfred/data/persistence/PreviousFileContent.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,8 @@\n+package manfred.data.persistence;\n+\n+import lombok.Value;\n+\n+@Value\n+public class PreviousFileContent {\n+    String content;\n+}"
  },
  {
    "sha": "c731b37b3199db0b02a6cdaf865e8201bddfedd1",
    "filename": "Data/src/main/java/manfred/data/persistence/reader/RawMapReader.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/src/main/java/manfred/data/persistence/reader/RawMapReader.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/src/main/java/manfred/data/persistence/reader/RawMapReader.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Data/src/main/java/manfred/data/persistence/reader/RawMapReader.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -1,13 +1,19 @@\n package manfred.data.persistence.reader;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.vavr.control.Option;\n+import io.vavr.control.Try;\n import lombok.AllArgsConstructor;\n import manfred.data.InvalidInputException;\n+import manfred.data.persistence.PreviousFileContent;\n import manfred.data.persistence.dto.RawMapDto;\n import org.springframework.stereotype.Component;\n \n+import java.io.File;\n import java.io.IOException;\n import java.net.URL;\n+import java.nio.file.Files;\n+import java.util.List;\n import java.util.function.Supplier;\n \n @Component\n@@ -38,4 +44,13 @@ RawMapDto load(URL yamlURL) throws InvalidInputException {\n     private Supplier<InvalidInputException> invalidInputException(String name) {\n         return () -> new InvalidInputException(\"Did not find resource for map \" + name);\n     }\n+\n+    public Try<Option<PreviousFileContent>> save(RawMapDto mapDto, File targetFile) {\n+        return Try.of(() -> targetFile.isFile() ? Files.readAllLines(targetFile.toPath()) : List.of(\"\"))\n+            .map(lines -> String.join(\"\\n\", lines))\n+            .map(previousFileContent -> previousFileContent.length() > 0\n+                ? Option.some(new PreviousFileContent(previousFileContent))\n+                : Option.<PreviousFileContent>none())\n+            .andThenTry(() -> objectMapper.writeValue(targetFile, mapDto));\n+    }\n }"
  },
  {
    "sha": "8ba27650ccf28ddad4159d571e3c639eb41d2efc",
    "filename": "Data/src/test/java/manfred/data/persistence/reader/RawMapReaderTest.java",
    "status": "modified",
    "additions": 62,
    "deletions": 2,
    "changes": 64,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/src/test/java/manfred/data/persistence/reader/RawMapReaderTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Data/src/test/java/manfred/data/persistence/reader/RawMapReaderTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Data/src/test/java/manfred/data/persistence/reader/RawMapReaderTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -2,24 +2,41 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.vavr.control.Option;\n+import io.vavr.control.Try;\n import manfred.data.InvalidInputException;\n+import manfred.data.persistence.PreviousFileContent;\n import manfred.data.persistence.dto.RawMapDto;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n import java.net.URL;\n+import java.nio.file.Files;\n+import java.util.List;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.*;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n \n class RawMapReaderTest {\n \n     private RawMapReader underTest;\n+    private File temporaryFile;\n \n     @BeforeEach\n-    void init() {\n+    void init() throws IOException {\n         underTest = new RawMapReader(new ObjectMapper(new YAMLFactory()), new UrlHelper());\n+        temporaryFile = File.createTempFile(\"testMap\", \"yaml\");\n+        temporaryFile.deleteOnExit();\n     }\n \n     @Test\n@@ -39,4 +56,47 @@ void unknownInputFile() {\n         InvalidInputException exception = Assertions.assertThrows(InvalidInputException.class, () -> underTest.load(\"unknown\"));\n         assertThat(exception.getMessage(), containsString(\"Did not find resource for map\"));\n     }\n+\n+    @Test\n+    void overrideFile_thenOldFileContentIsReturned() throws IOException {\n+        var input = new RawMapDto();\n+        input.setName(\"name\");\n+        FileWriter fileWriter = new FileWriter(temporaryFile);\n+        fileWriter.write(\"previous file content\");\n+        fileWriter.close();\n+\n+        Try<Option<PreviousFileContent>> result = underTest.save(input, temporaryFile);\n+\n+        assertThat(result.isSuccess(), is(true));\n+        assertThat(result.get().get().getContent(), is(\"previous file content\"));\n+        List<String> fileContents = Files.readAllLines(temporaryFile.toPath());\n+        assertThat(fileContents.toString(), fileContents, hasItem(\"name: \\\"name\\\"\"));\n+    }\n+\n+    @Test\n+    void saveInNewFile() throws IOException {\n+        var input = new RawMapDto();\n+        input.setName(\"name\");\n+\n+        Try<Option<PreviousFileContent>> result = underTest.save(input, temporaryFile);\n+\n+        assertThat(result.isSuccess(), is(true));\n+        assertThat(result.get().isEmpty(), is(true));\n+        List<String> fileContents = Files.readAllLines(temporaryFile.toPath());\n+        assertThat(fileContents.toString(), fileContents, hasItem(\"name: \\\"name\\\"\"));\n+    }\n+\n+    @Test\n+    void saveFails() throws IOException {\n+        var input = new RawMapDto();\n+        input.setName(\"name\");\n+\n+        assertThat(temporaryFile.setReadOnly(), is(true));\n+        Try<Option<PreviousFileContent>> result = underTest.save(input, temporaryFile);\n+\n+        assertThat(result.isFailure(), is(true));\n+        assertThat(result.getCause(), instanceOf(IOException.class));\n+        List<String> fileContents = Files.readAllLines(temporaryFile.toPath());\n+        assertThat(fileContents.toString(), fileContents, empty());\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1145401415aba0da692fe8c41937bb6584089d90",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/common/FileWriter.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/common/FileWriter.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/common/FileWriter.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/common/FileWriter.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,15 @@\n+package manfred.manfreditor.common;\n+\n+import io.vavr.control.Try;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+@Component\n+public class FileWriter {\n+    public Try<Path> write(File file, String content) {\n+        return Try.of(() -> Files.write(file.toPath(), content.getBytes()));\n+    }\n+}"
  },
  {
    "sha": "4d5af67ccc79122804ab7aa0c4de67c8ca469232",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/controller/MapController.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/controller/MapController.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/controller/MapController.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/controller/MapController.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -5,6 +5,8 @@\n import manfred.manfreditor.controller.command.DeleteMapObjectCommand;\n import manfred.manfreditor.controller.command.InsertMapObjectCommand;\n import manfred.manfreditor.controller.command.LoadMapCommand;\n+import manfred.manfreditor.controller.command.SaveMapCommand;\n+import org.eclipse.swt.SWT;\n import org.eclipse.swt.events.MouseEvent;\n import org.eclipse.swt.events.MouseListener;\n import org.eclipse.swt.events.SelectionAdapter;\n@@ -15,6 +17,7 @@\n import org.eclipse.swt.widgets.Shell;\n import org.springframework.stereotype.Component;\n \n+import java.io.File;\n import java.util.List;\n import java.util.function.Consumer;\n \n@@ -27,6 +30,7 @@\n \n     private final ControllerHelper controllerHelper;\n     private final LoadMapCommand.Factory loadMapCommandFactory;\n+    private final SaveMapCommand.Factory saveMapCommandFactory;\n     private final InsertMapObjectCommand.Factory insertMapObjectCommandFactory;\n     private final DeleteMapObjectCommand.Factory deleteMapObjectCommandFactory;\n     private final List<Consumer<String>> loadMapPostActions;\n@@ -55,6 +59,34 @@ public void widgetSelected(SelectionEvent e) {\n         };\n     }\n \n+    public SelectionListener saveMap(Shell mainShell) {\n+        return new SelectionAdapter() {\n+            @Override\n+            public void widgetSelected(SelectionEvent e) {\n+                FileDialog fileDialog = new FileDialog(mainShell);\n+                String selectedFile = fileDialog.open();\n+                if (selectedFile != null) {\n+                    File fileToSaveIn = new File(selectedFile);\n+                    if (fileToSaveIn.isFile()) {\n+                        MessageBox messageBox = new MessageBox(mainShell, SWT.ICON_WARNING | SWT.OK | SWT.CANCEL);\n+                        messageBox.setMessage(\"Obacht:\\n\\n\" + selectedFile + \"\\ngibts scho. Willsch trotzdem?\");\n+                        int open = messageBox.open();\n+                        if (open == SWT.CANCEL) {\n+                            return;\n+                        }\n+                        System.out.println(\"Trotzdem\");\n+                    }\n+                    controllerHelper.execute(saveMapCommandFactory.create(fileToSaveIn, mainShell))\n+                        .onFailure(errorMessage -> {\n+                            MessageBox messageBox = new MessageBox(mainShell, SWT.ICON_ERROR | SWT.OK);\n+                            messageBox.setMessage(\"Des hod id fongtsionierd:\\n\\n\" + errorMessage);\n+                            messageBox.open();\n+                        });\n+                }\n+            }\n+        };\n+    }\n+\n     public void addLoadMapPostAction(Consumer<String> selectedFileConsumer) {\n         this.loadMapPostActions.add(selectedFileConsumer);\n     }"
  },
  {
    "sha": "e367155b8821a40fc7ac5882ed2490908ef6d7b1",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/controller/command/LoadMapCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/controller/command/LoadMapCommand.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/controller/command/LoadMapCommand.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/controller/command/LoadMapCommand.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -48,8 +48,8 @@ public CommandResult execute() {\n         private final MapModel mapModel;\n         private final CommandUrlHelper urlHelper;\n \n-        public Command create(String mapName) {\n-            return new LoadMapCommand(mapModel, mapProvider, mapName, urlHelper);\n+        public Command create(String mapPath) {\n+            return new LoadMapCommand(mapModel, mapProvider, mapPath, urlHelper);\n         }\n     }\n }"
  },
  {
    "sha": "49d633e7262c485d95abb9d721f07b51e7bd1b8b",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/controller/command/SaveMapCommand.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/controller/command/SaveMapCommand.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/controller/command/SaveMapCommand.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/controller/command/SaveMapCommand.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,80 @@\n+package manfred.manfreditor.controller.command;\n+\n+import io.vavr.control.Option;\n+import lombok.AllArgsConstructor;\n+import manfred.data.persistence.PreviousFileContent;\n+import manfred.manfreditor.common.FileWriter;\n+import manfred.manfreditor.gui.PopupProvider;\n+import manfred.manfreditor.map.MapModel;\n+import manfred.manfreditor.map.export.MapExporter;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Shell;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.File;\n+import java.util.function.Function;\n+\n+@AllArgsConstructor\n+public class SaveMapCommand implements Command {\n+\n+    private final MapModel mapModel;\n+    private final MapExporter mapExporter;\n+    private final FileWriter fileWriter;\n+    private final PopupProvider popupProvider;\n+    private final File fileToSaveIn;\n+    private final Shell outputShell;\n+\n+    @Override\n+    public CommandResult execute() {\n+        FlattenedMap flattenedMap = mapModel.getFlattenedMap();\n+        return mapExporter.export(flattenedMap, fileToSaveIn)\n+            .fold(\n+                exception -> CommandResult.failure(exception.getMessage()),\n+                successWithFileRestore()\n+            );\n+    }\n+\n+    private Function<Option<PreviousFileContent>, CommandResult> successWithFileRestore() {\n+        return optionalPreviousContent -> optionalPreviousContent.fold(\n+            () -> CommandResult.success(deleteCreatedFile()),\n+            previousFileContent -> CommandResult.success(tryToRestorePreviousContent(previousFileContent))\n+        );\n+    }\n+\n+    private RollbackOperation deleteCreatedFile() {\n+        return () -> {\n+            int clickedButton = this.popupProvider.showConfirmationDialog(outputShell, \"Wirklich \" + fileToSaveIn.getName() + \" wieder löschen?\");\n+            if (clickedButton == SWT.YES) {\n+                fileToSaveIn.delete();\n+            }\n+        };\n+    }\n+\n+    private RollbackOperation tryToRestorePreviousContent(PreviousFileContent previousFileContent) {\n+        return () -> {\n+            int clickedButton = this.popupProvider.showConfirmationDialog(outputShell, \"Wirklich alten Zustand von \" + fileToSaveIn.getName() + \" wiederherstellen?\");\n+            if (clickedButton == SWT.YES) {\n+                fileWriter.write(fileToSaveIn, previousFileContent.getContent())\n+                    .onFailure(throwable -> popupProvider.showMessage(\n+                        outputShell,\n+                        \"Restoring previous file content failed:\\n\" + throwable.getMessage())\n+                    );\n+            }\n+        };\n+    }\n+\n+    @Component\n+    @AllArgsConstructor\n+    public static class Factory {\n+\n+        private final MapModel mapModel;\n+        private final MapExporter mapExporter;\n+        private final FileWriter fileWriter;\n+        private final PopupProvider popupProvider;\n+\n+        public Command create(File fileToSaveIn, Shell outputShell) {\n+            return new SaveMapCommand(mapModel, mapExporter, fileWriter, popupProvider, fileToSaveIn, outputShell);\n+        }\n+    }\n+}"
  },
  {
    "sha": "7a20f666d8eedeb8069df2dc4d842ddfcbacc934",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/gui/GuiBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/gui/GuiBuilder.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/gui/GuiBuilder.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/gui/GuiBuilder.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -61,6 +61,10 @@ private void addControlButtons(Shell mainShell) {\n         loadMapButton.setText(\"Map laden\");\n         loadMapButton.addSelectionListener(mapController.loadMap(mainShell));\n \n+        Button saveMapButton = new Button(composite, SWT.CENTER);\n+        saveMapButton.setText(\"Map speichern\");\n+        saveMapButton.addSelectionListener(mapController.saveMap(mainShell));\n+\n         Button rollbackButton = new Button(composite, SWT.CENTER);\n         rollbackButton.setText(\"Rückgängig\");\n         rollbackButton.addSelectionListener(rollbackController);"
  },
  {
    "sha": "f74c4be5c240620d82ed3c4acc93b2921919de02",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/gui/PopupProvider.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/gui/PopupProvider.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/gui/PopupProvider.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/gui/PopupProvider.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,22 @@\n+package manfred.manfreditor.gui;\n+\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.MessageBox;\n+import org.eclipse.swt.widgets.Shell;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PopupProvider {\n+\n+    public int showConfirmationDialog(Shell shell, String message) {\n+        var confirmationDialog = new MessageBox(shell, SWT.ICON_QUESTION | SWT.YES | SWT.NO);\n+        confirmationDialog.setMessage(message);\n+        return confirmationDialog.open();\n+    }\n+\n+    public int showMessage(Shell shell, String message) {\n+        var messageBox = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK);\n+        messageBox.setMessage(message);\n+        return messageBox.open();\n+    }\n+}"
  },
  {
    "sha": "9e6277d5c9cbaddd4734bb47de85ca1e89ac155f",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/gui/view/map/MapView.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/gui/view/map/MapView.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/gui/view/map/MapView.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/gui/view/map/MapView.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -44,7 +44,8 @@ public void draw(GC gc, Display display) {\n     }\n \n     private void drawAccessibility(GC gc, Display display) {\n-        mapModel.getMergedAccessibility()\n+        mapModel.getFlattenedMap()\n+            .getAccessibility()\n             .collect(sortingByCoordinates())\n             .forEach((bottomLeft, accessibilityIndicator) -> accessibilityIndicator.indicateAccessibilityAt(bottomLeft, gc, display));\n     }"
  },
  {
    "sha": "c4cbeb4f82a14507efc00d618b3f9f8553c461ea",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/map/MapModel.java",
    "status": "modified",
    "additions": 12,
    "deletions": 7,
    "changes": 19,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/MapModel.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/MapModel.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/map/MapModel.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -3,9 +3,9 @@\n import io.vavr.control.Validation;\n import manfred.data.shared.PositiveInt;\n import manfred.manfreditor.common.Memento;\n-import manfred.manfreditor.map.accessibility.AccessibilityIndicator;\n import manfred.manfreditor.map.accessibility.AccessibilityMerger;\n import manfred.manfreditor.map.accessibility.Source;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n import manfred.manfreditor.mapobject.ConcreteMapObject;\n import manfred.manfreditor.mapobject.MapObject;\n import manfred.manfreditor.mapobject.None;\n@@ -33,8 +33,11 @@ public void setMap(Map resultingMap) {\n         return this.map.getObjects();\n     }\n \n-    public io.vavr.collection.Map<Map.TileCoordinate, AccessibilityIndicator> getMergedAccessibility() {\n-        return this.accessibilityMerger.merge(this.map.getObjects());\n+    public FlattenedMap getFlattenedMap() {\n+        return new FlattenedMap(\n+            this.map.getName(),\n+            this.accessibilityMerger.merge(this.map.getObjects())\n+        );\n     }\n \n     public PositiveInt getSizeY() {\n@@ -46,9 +49,11 @@ public PositiveInt getSizeX() {\n     }\n \n     public Validation<List<String>, ConcreteMapObject> tryInsertObjectAt(ConcreteMapObject mapObject, Map.TileCoordinate tileCoordinate) {\n-        io.vavr.collection.Map<Map.TileCoordinate, AccessibilityIndicator> mergedAccessibility = getMergedAccessibility();\n-\n-        Validation<List<String>, ConcreteMapObject> result = objectInsertionValidator.mayObjectBeInserted(mapObject, tileCoordinate, mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = objectInsertionValidator.mayObjectBeInserted(\n+            mapObject,\n+            tileCoordinate,\n+            getFlattenedMap()\n+        );\n \n         if (result.isValid()) {\n             this.map = this.map.insertObjectAt(mapObject, tileCoordinate);\n@@ -61,7 +66,7 @@ public void forceInsertObjectAt(LocatedMapObject locatedMapObject) {\n     }\n \n     public Optional<LocatedMapObject> deleteObjectAt(Map.TileCoordinate tileCoordinate) {\n-        Map.TileCoordinate tileCoordinateToDeleteObjectAt = getMergedAccessibility()\n+        Map.TileCoordinate tileCoordinateToDeleteObjectAt = getFlattenedMap()\n             .get(tileCoordinate).get()\n             .getSource()\n             .map(Source::getTileCoordinate)"
  },
  {
    "sha": "cbe016fead4278893b386014190c3c4728de2e43",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/map/ObjectInsertionValidator.java",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/ObjectInsertionValidator.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/ObjectInsertionValidator.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/map/ObjectInsertionValidator.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -3,6 +3,7 @@\n import io.vavr.control.Validation;\n import manfred.manfreditor.map.Map.TileCoordinate;\n import manfred.manfreditor.map.accessibility.AccessibilityIndicator;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n import manfred.manfreditor.mapobject.ConcreteMapObject;\n import org.springframework.stereotype.Component;\n \n@@ -17,40 +18,40 @@\n     public Validation<List<String>, ConcreteMapObject> mayObjectBeInserted(\n         ConcreteMapObject mapObject,\n         TileCoordinate tileCoordinate,\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility\n+        FlattenedMap flattenedMap\n     ) {\n         return mapObject.getStructureAt(tileCoordinate)\n             .toValidation()\n             .mapError(List::of)\n             .flatMap(tileCoordinateTilePrototypeMap -> {\n-                List<String> collect = getInvalidTileMessages(mergedAccessibility, tileCoordinateTilePrototypeMap);\n+                List<String> collect = getInvalidTileMessages(flattenedMap, tileCoordinateTilePrototypeMap);\n                 return collect.isEmpty()\n                     ? Validation.valid(mapObject)\n                     : Validation.invalid(collect);\n             });\n     }\n \n     private List<String> getInvalidTileMessages(\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility,\n+        FlattenedMap flattenedMap,\n         io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> tileCoordinateTilePrototypeMap\n     ) {\n         return tileCoordinateTilePrototypeMap\n             .filterNotValues(AccessibilityIndicator::isAccessible)\n-            .filterNotKeys(tileCoordinate -> mergedAccessibility.get(tileCoordinate).map(AccessibilityIndicator::isAccessible).getOrElse(true))\n+            .filterNotKeys(tileCoordinate -> flattenedMap.get(tileCoordinate).map(AccessibilityIndicator::isAccessible).getOrElse(true))\n             .keySet()\n-            .map(toErrorMessage(mergedAccessibility))\n+            .map(toErrorMessage(flattenedMap))\n             .collect(toList());\n     }\n \n-    private Function<TileCoordinate, String> toErrorMessage(io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility) {\n+    private Function<TileCoordinate, String> toErrorMessage(FlattenedMap flattenedMap) {\n         return tileCoordinateOnStructure -> \"Tile (\" + tileCoordinateOnStructure.getX() + \",\" + tileCoordinateOnStructure.getY() + \") \" +\n-            \"is not accessible, blocked by \" + getBlockingObject(mergedAccessibility, tileCoordinateOnStructure);\n+            \"is not accessible, blocked by \" + getBlockingObject(flattenedMap, tileCoordinateOnStructure);\n     }\n \n-    private String getBlockingObject(io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility, TileCoordinate tileCoordinateOnStructure) {\n-        return mergedAccessibility.get(tileCoordinateOnStructure).get()\n+    private String getBlockingObject(FlattenedMap flattenedMap, TileCoordinate tileCoordinateOnStructure) {\n+        return flattenedMap.get(tileCoordinateOnStructure).get()\n             .getSource()\n-            .map(source -> \"object \" + source.getTileName() + \" at (\" + source.getTileCoordinate().getX() + \",\" + source.getTileCoordinate().getY() + \")\")\n+            .map(source -> \"object \" + source.getTileName() + \" at \" + source.getTileCoordinate().shortRepresentation())\n             .orElse(\"no object\");\n     }\n }"
  },
  {
    "sha": "c0c46e730008043b0bd1d3cf0d67fd068eb05a88",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/map/export/MapExporter.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/export/MapExporter.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/export/MapExporter.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/map/export/MapExporter.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,23 @@\n+package manfred.manfreditor.map.export;\n+\n+import io.vavr.control.Option;\n+import io.vavr.control.Try;\n+import lombok.AllArgsConstructor;\n+import manfred.data.persistence.PreviousFileContent;\n+import manfred.data.persistence.reader.RawMapReader;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.File;\n+\n+@Component\n+@AllArgsConstructor\n+public class MapExporter {\n+\n+    private final RawMapReader rawMapReader;\n+    private final MapToDtoMapper mapToDtoMapper;\n+\n+    public Try<Option<PreviousFileContent>> export(FlattenedMap flattenedMap, File fileToSaveIn) {\n+        return rawMapReader.save(mapToDtoMapper.map(flattenedMap), fileToSaveIn);\n+    }\n+}"
  },
  {
    "sha": "a44e610b9897d71b204f07e40db4795a573db18f",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/map/export/MapToDtoMapper.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/export/MapToDtoMapper.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/export/MapToDtoMapper.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/map/export/MapToDtoMapper.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,58 @@\n+package manfred.manfreditor.map.export;\n+\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import io.vavr.collection.Map;\n+import manfred.data.persistence.dto.RawMapDto;\n+import manfred.manfreditor.map.Map.TileCoordinate;\n+import manfred.manfreditor.map.accessibility.AccessibilityIndicator;\n+import manfred.manfreditor.map.accessibility.Source;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+@Component\n+public class MapToDtoMapper {\n+\n+    public RawMapDto map(FlattenedMap flattenedMap) {\n+        RawMapDto rawMapDto = new RawMapDto();\n+        rawMapDto.setName(flattenedMap.getName());\n+        rawMapDto.setMap(collapseMap(flattenedMap));\n+        return rawMapDto;\n+    }\n+\n+    private List<String> collapseMap(FlattenedMap flattenedMap) {\n+        Map<Integer, ? extends Map<TileCoordinate, String>> tileRepresentationsGroupedByYCoordinate = flattenedMap\n+            .getAccessibility()\n+            .mapValues(AccessibilityIndicator::getSource)\n+            .map(toStringRepresentation())\n+            .groupBy(tileRepresentationByCoordinate -> tileRepresentationByCoordinate._1.getY().value());\n+\n+        return tileRepresentationsGroupedByYCoordinate\n+            .toSortedMap((first, second) -> Integer.compare(second, first), Function.identity())\n+            .mapValues(tilesByYCoordinate -> tilesByYCoordinate.toSortedMap(sortByXCoordinate(), Function.identity()).values())\n+            .values()\n+            .map(tilesByYCoordinate -> String.join(\",\", tilesByYCoordinate))\n+            .toJavaList();\n+    }\n+\n+    private Comparator<TileCoordinate> sortByXCoordinate() {\n+        return Comparator.comparingInt(o -> o.getX().value());\n+    }\n+\n+    private BiFunction<TileCoordinate, Optional<Source>, Tuple2<TileCoordinate, String>> toStringRepresentation() {\n+        return (tileCoordinate, optionalSource) -> Tuple.of(\n+            tileCoordinate,\n+            optionalSource.map(source -> getPrefix(tileCoordinate, source) + source.getTileName()).orElse(\"1\")\n+        );\n+    }\n+\n+    private String getPrefix(TileCoordinate tileCoordinate, Source source) {\n+        return tileCoordinate.equals(source.getTileCoordinate()) ? \"\" : \"_\";\n+    }\n+}"
  },
  {
    "sha": "21ea30a4d3be28342f3f3c804d2032008dcb38b0",
    "filename": "Manfreditor/src/main/java/manfred/manfreditor/map/flattened/FlattenedMap.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/flattened/FlattenedMap.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/main/java/manfred/manfreditor/map/flattened/FlattenedMap.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/main/java/manfred/manfreditor/map/flattened/FlattenedMap.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,29 @@\n+package manfred.manfreditor.map.flattened;\n+\n+import io.vavr.collection.Map;\n+import io.vavr.control.Option;\n+import manfred.manfreditor.map.Map.TileCoordinate;\n+import manfred.manfreditor.map.accessibility.AccessibilityIndicator;\n+\n+public class FlattenedMap {\n+\n+    private final String name;\n+    private final Map<TileCoordinate, AccessibilityIndicator> accessibility;\n+\n+    public FlattenedMap(String name, Map<TileCoordinate, AccessibilityIndicator> accessibility) {\n+        this.name = name;\n+        this.accessibility = accessibility;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Map<TileCoordinate, AccessibilityIndicator> getAccessibility() {\n+        return accessibility;\n+    }\n+\n+    public Option<AccessibilityIndicator> get(TileCoordinate tileCoordinate) {\n+        return accessibility.get(tileCoordinate);\n+    }\n+}"
  },
  {
    "sha": "9b9bac66941c4ce7831079c757161ca0c559f013",
    "filename": "Manfreditor/src/test/java/componentTests/map/DeleteMapObjectComponentTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/DeleteMapObjectComponentTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/DeleteMapObjectComponentTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/componentTests/map/DeleteMapObjectComponentTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -16,7 +16,7 @@\n \n import java.util.Optional;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.CoordinateHelper.tileCoordinate;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -81,7 +81,7 @@ void deleteNonExistentObjectFails() {\n \n         CommandResult result = underTestCommandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"No object could be deleted at tile (0,2)\"));\n+        assertThat(result, failedWithMessageContaining(\"No object could be deleted at tile (0,2)\"));\n         MapObject mapObjectAfterDeletion = mapModel.getObjects().get(tileCoordinate(0, 0)).get();\n         assertThat(mapObjectAfterDeletion, instanceOf(None.class));\n     }"
  },
  {
    "sha": "1e80c3850eecb2f201a09b8bf70f58c366a4519c",
    "filename": "Manfreditor/src/test/java/componentTests/map/InsertMapObjectComponentTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/InsertMapObjectComponentTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/InsertMapObjectComponentTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/componentTests/map/InsertMapObjectComponentTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -15,7 +15,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.CoordinateHelper.tileCoordinate;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -52,7 +52,7 @@ void insertSomethingInNonEmptyMapFails() {\n \n         CommandResult result = underTestCommandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\n+        assertThat(result, failedWithMessageContaining(\n             \"Tile (0,0) is not accessible, blocked by object tree2 at (0,0),\\n\" +\n             \"Tile (1,0) is not accessible, blocked by object tree2 at (0,0)\"\n         ));"
  },
  {
    "sha": "473f9fd0b33586f39e763e2281c763209f952bed",
    "filename": "Manfreditor/src/test/java/componentTests/map/LoadMapComponentTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/LoadMapComponentTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/LoadMapComponentTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/componentTests/map/LoadMapComponentTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -12,7 +12,7 @@\n import java.io.File;\n import java.net.MalformedURLException;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.greaterThan;\n@@ -54,6 +54,6 @@ void loadMapFails() throws MalformedURLException {\n \n         CommandResult commandResult = commandFactory.create(nonExistent).execute();\n \n-        assertThat(commandResult, failedWithMessage(\"Could not read map from file:\" + nonExistent));\n+        assertThat(commandResult, failedWithMessageContaining(\"Could not read map from file:\" + nonExistent));\n     }\n }"
  },
  {
    "sha": "ba83aab62d045f519edbd0ce79fb9eb3cbe29d69",
    "filename": "Manfreditor/src/test/java/componentTests/map/LoadMapObjectComponentTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/LoadMapObjectComponentTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/LoadMapObjectComponentTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/componentTests/map/LoadMapObjectComponentTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -12,7 +12,7 @@\n \n import java.util.List;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.empty;\n@@ -53,7 +53,7 @@ void loadMapObjectAndRollBack() {\n     void loadUnknownObject() {\n         CommandResult result = commandFactory.create(\"unknown object\").execute();\n \n-        assertThat(result, failedWithMessage(\"Did not find resource for map object unknown object\"));\n+        assertThat(result, failedWithMessageContaining(\"Did not find resource for map object unknown object\"));\n     }\n \n     @Configuration"
  },
  {
    "sha": "00fe163dc396026b75e8ab4be380267ba46a6b58",
    "filename": "Manfreditor/src/test/java/componentTests/map/SaveMapComponentTest.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/SaveMapComponentTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/componentTests/map/SaveMapComponentTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/componentTests/map/SaveMapComponentTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,132 @@\n+package componentTests.map;\n+\n+import componentTests.TestManfreditorContext;\n+import manfred.manfreditor.common.FileWriter;\n+import manfred.manfreditor.controller.command.CommandHistory;\n+import manfred.manfreditor.controller.command.CommandResult;\n+import manfred.manfreditor.controller.command.LoadMapCommand;\n+import manfred.manfreditor.controller.command.SaveMapCommand;\n+import manfred.manfreditor.gui.PopupProvider;\n+import org.eclipse.swt.SWT;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n+import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SpringJUnitConfig(SaveMapComponentTest.TestContextClone.class)\n+public class SaveMapComponentTest extends ComponentTestCase {\n+\n+    @Autowired\n+    private SaveMapCommand.Factory commandFactory;\n+\n+    @Autowired\n+    private LoadMapCommand.Factory loadMapCommandFactory;\n+\n+    @Autowired\n+    private FileWriter fileWriter;\n+\n+    @Autowired\n+    private PopupProvider popupProviderMock;\n+\n+    private CommandHistory commandHistory;\n+\n+    private File temporaryFile;\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        commandHistory = new CommandHistory();\n+\n+        temporaryFile = File.createTempFile(\n+            \"testMap\",\n+            \".yaml\",\n+            new File(getClass().getResource(\"/map/emptyMap.yaml\").getFile()).getParentFile()\n+        );\n+        temporaryFile.deleteOnExit();\n+    }\n+\n+    @Test\n+    void saveMapToNewFile() throws IOException {\n+        loadAMap();\n+\n+        CommandResult result = commandFactory.create(temporaryFile, null).execute();\n+\n+        assertThat(result, wasSuccessful());\n+        assertFileContainsExpectedContent();\n+\n+        when(popupProviderMock.showConfirmationDialog(any(), any())).thenReturn(SWT.YES);\n+        result.registerRollbackOperation(commandHistory);\n+        commandHistory.undoLast();\n+        assertThat(temporaryFile.exists(), is(false));\n+    }\n+\n+    @Test\n+    void saveMapToExistingFileWithContent() throws IOException {\n+        loadAMap();\n+        fileWriter.write(temporaryFile, \"previous content\");\n+        assertFileContains(\"previous content\");\n+\n+        CommandResult result = commandFactory.create(temporaryFile, null).execute();\n+\n+        assertThat(result, wasSuccessful());\n+        assertFileContainsExpectedContent();\n+\n+        when(popupProviderMock.showConfirmationDialog(any(), any())).thenReturn(SWT.YES);\n+        result.registerRollbackOperation(commandHistory);\n+        commandHistory.undoLast();\n+        assertFileContains(\"previous content\");\n+    }\n+\n+    @Test\n+    void saveMapFails() {\n+        temporaryFile.setReadOnly();\n+\n+        CommandResult result = commandFactory.create(temporaryFile, null).execute();\n+\n+        assertThat(result, failedWithMessageContaining(\"testMap\"));\n+    }\n+\n+    private void loadAMap() {\n+        loadMap(\"nonEmptyMap\");\n+    }\n+\n+    private void assertFileContainsExpectedContent() throws IOException {\n+        assertFileContains(\n+            \"---\\n\" +\n+            \"name: \\\"nonEmptyTestMap\\\"\\n\" +\n+            \"map:\\n\" +\n+            \"- \\\"tree2,_tree2\\\"\\n\" +\n+            \"persons: []\\n\" +\n+            \"portals: []\\n\" +\n+            \"doors: []\\n\" +\n+            \"enemies: []\\n\"\n+        );\n+    }\n+\n+    private void assertFileContains(String content) throws IOException {\n+        String fileContents = Files.readString(temporaryFile.toPath());\n+        assertThat(fileContents, is(content));\n+    }\n+\n+    @Configuration\n+    public static class TestContextClone extends TestManfreditorContext {\n+\n+        @Bean\n+        public PopupProvider popupProvider() {\n+            return mock(PopupProvider.class);\n+        }\n+    }\n+}"
  },
  {
    "sha": "6b69385865a2f6cbb4852d94e14ff187207bc388",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/common/FileWriterTest.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/common/FileWriterTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/common/FileWriterTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/common/FileWriterTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,32 @@\n+package manfred.manfreditor.common;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+class FileWriterTest {\n+\n+    private FileWriter underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        underTest = new FileWriter();\n+    }\n+\n+    @Test\n+    void write() throws IOException {\n+        File temporaryFile = File.createTempFile(\"testMap\", \".yaml\");\n+        temporaryFile.deleteOnExit();\n+\n+        underTest.write(temporaryFile, \"content\");\n+\n+        String fileContents = Files.readString(temporaryFile.toPath());\n+        assertThat(fileContents, is(\"content\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "db5281faf4c9ace39cdd9ddc92769f1f656acc94",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/controller/command/DeleteMapObjectCommandTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/DeleteMapObjectCommandTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/DeleteMapObjectCommandTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/controller/command/DeleteMapObjectCommandTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -8,7 +8,7 @@\n \n import java.util.Optional;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.CoordinateHelper.tileCoordinate;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -39,7 +39,7 @@ void failsWhenTileClickedCannotBeFound() {\n \n         CommandResult result = commandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"No map tile at clicked coordinates (0,0) was found\"));\n+        assertThat(result, failedWithMessageContaining(\"No map tile at clicked coordinates (0,0) was found\"));\n     }\n \n     @Test\n@@ -49,7 +49,7 @@ void failsWhenThereIsNoObjectToBeDeleted() {\n \n         CommandResult result = commandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"No object could be deleted at tile (1,2)\"));\n+        assertThat(result, failedWithMessageContaining(\"No object could be deleted at tile (1,2)\"));\n     }\n \n     @Test"
  },
  {
    "sha": "14a6201490ea58710c9ca11dd705493fcad633e7",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/controller/command/InsertMapObjectCommandTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/InsertMapObjectCommandTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/InsertMapObjectCommandTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/controller/command/InsertMapObjectCommandTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -13,7 +13,7 @@\n import java.util.List;\n import java.util.Optional;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n@@ -63,7 +63,7 @@ void failsWhenNoObjectIsSelected() {\n \n         CommandResult result = commandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"Need to select an object before inserting it into the map\"));\n+        assertThat(result, failedWithMessageContaining(\"Need to select an object before inserting it into the map\"));\n     }\n \n     @Test\n@@ -74,7 +74,7 @@ void failsWhenNoClickedTileWasFound() {\n \n         CommandResult result = commandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"No map tile at clicked coordinates (0,0) was found\"));\n+        assertThat(result, failedWithMessageContaining(\"No map tile at clicked coordinates (0,0) was found\"));\n     }\n \n     @Test\n@@ -86,6 +86,6 @@ void failsWhenCannotBeInserted() {\n \n         CommandResult result = commandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"message1,\\nmessage2\"));\n+        assertThat(result, failedWithMessageContaining(\"message1,\\nmessage2\"));\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "a4b4d238372e60932a6a8a78ceb3f263d59e7308",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapCommandTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapCommandTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapCommandTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapCommandTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -11,7 +11,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n@@ -63,7 +63,7 @@ void executeFails() throws InvalidInputException {\n \n         CommandResult result = loadMapCommand.execute();\n \n-        assertThat(result, failedWithMessage(\"errorMessage\"));\n+        assertThat(result, failedWithMessageContaining(\"errorMessage\"));\n     }\n \n     @Test\n@@ -73,6 +73,6 @@ void invalidUrl() throws MalformedURLException {\n \n         CommandResult result = loadMapCommand.execute();\n \n-        assertThat(result, failedWithMessage(\"Could not create URL for map file name: message\"));\n+        assertThat(result, failedWithMessageContaining(\"Could not create URL for map file name: message\"));\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "c00fb31ccdcc66d6fce929029c762955c1f30aa4",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapObjectCommandTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapObjectCommandTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapObjectCommandTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/controller/command/LoadMapObjectCommandTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -8,7 +8,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n@@ -57,7 +57,7 @@ void executeFails() throws InvalidInputException {\n \n         CommandResult result = loadMapTileCommand.execute();\n \n-        assertThat(result, failedWithMessage(\"errorMessage\"));\n+        assertThat(result, failedWithMessageContaining(\"errorMessage\"));\n     }\n \n     private MapPrototype mapMatrixMock() {"
  },
  {
    "sha": "6422fbe9137b112f3dc1c9e86271ec3183fb35b3",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/controller/command/SaveMapCommandTest.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/SaveMapCommandTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/SaveMapCommandTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/controller/command/SaveMapCommandTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -0,0 +1,110 @@\n+package manfred.manfreditor.controller.command;\n+\n+import io.vavr.control.Option;\n+import io.vavr.control.Try;\n+import manfred.data.persistence.PreviousFileContent;\n+import manfred.manfreditor.common.FileWriter;\n+import manfred.manfreditor.gui.PopupProvider;\n+import manfred.manfreditor.map.MapModel;\n+import manfred.manfreditor.map.export.MapExporter;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n+import org.eclipse.swt.SWT;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n+import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class SaveMapCommandTest {\n+\n+    private SaveMapCommand.Factory commandFactory;\n+    private MapModel mapModelMock;\n+    private MapExporter mapExporterMock;\n+    private FileWriter fileWriterMock;\n+    private PopupProvider popupProviderMock;\n+    private CommandHistory commandHistory;\n+\n+    @BeforeEach\n+    void setUp() {\n+        commandHistory = new CommandHistory();\n+        mapModelMock = mock(MapModel.class);\n+        mapExporterMock = mock(MapExporter.class);\n+        fileWriterMock = mock(FileWriter.class);\n+        popupProviderMock = mock(PopupProvider.class);\n+        commandFactory = new SaveMapCommand.Factory(mapModelMock, mapExporterMock, fileWriterMock, popupProviderMock);\n+    }\n+\n+    @Test\n+    void saveMap_noPreviousFileContentReturned() {\n+        FlattenedMap mapToSave = mock(FlattenedMap.class);\n+        when(mapModelMock.getFlattenedMap()).thenReturn(mapToSave);\n+        File fileToSaveIn = mock(File.class);\n+\n+        when(mapExporterMock.export(any(), any())).thenReturn(Try.success(Option.none()));\n+\n+        CommandResult result = commandFactory.create(fileToSaveIn, null).execute();\n+\n+        assertThat(result, wasSuccessful());\n+        verify(mapExporterMock).export(eq(mapToSave), eq(fileToSaveIn));\n+\n+        when(popupProviderMock.showConfirmationDialog(any(), any())).thenReturn(SWT.NO);\n+        result.registerRollbackOperation(commandHistory);\n+        commandHistory.undoLast();\n+        verify(fileToSaveIn, never()).delete();\n+\n+        when(popupProviderMock.showConfirmationDialog(any(), any())).thenReturn(SWT.YES);\n+        result.registerRollbackOperation(commandHistory);\n+        commandHistory.undoLast();\n+        verify(fileToSaveIn, atLeastOnce()).delete();\n+    }\n+\n+    @Test\n+    void saveMap_fileWasOverritten_thenPreviousFileContentIsReturned() {\n+        FlattenedMap mapToSave = mock(FlattenedMap.class);\n+        when(mapModelMock.getFlattenedMap()).thenReturn(mapToSave);\n+        File fileToSaveIn = mock(File.class);\n+\n+        when(mapExporterMock.export(any(), any())).thenReturn(\n+            Try.success(Option.some(new PreviousFileContent(\"previous content\")))\n+        );\n+        when(fileWriterMock.write(any(), any())).thenReturn(Try.success(null));\n+\n+        CommandResult result = commandFactory.create(fileToSaveIn, null).execute();\n+\n+        assertThat(result, wasSuccessful());\n+        verify(mapExporterMock).export(eq(mapToSave), eq(fileToSaveIn));\n+\n+        when(popupProviderMock.showConfirmationDialog(any(), any())).thenReturn(SWT.NO);\n+        result.registerRollbackOperation(commandHistory);\n+        commandHistory.undoLast();\n+        verify(fileWriterMock, never()).write(eq(fileToSaveIn), eq(\"previous content\"));\n+\n+        when(popupProviderMock.showConfirmationDialog(any(), any())).thenReturn(SWT.YES);\n+        result.registerRollbackOperation(commandHistory);\n+        commandHistory.undoLast();\n+        verify(fileWriterMock, atLeastOnce()).write(eq(fileToSaveIn), eq(\"previous content\"));\n+    }\n+\n+    @Test\n+    void saveMapFails() {\n+        FlattenedMap mapToSave = mock(FlattenedMap.class);\n+        when(mapModelMock.getFlattenedMap()).thenReturn(mapToSave);\n+        File fileToSaveIn = mock(File.class);\n+\n+        when(mapExporterMock.export(any(), any())).thenReturn(Try.failure(new Exception(\"message\")));\n+\n+        CommandResult result = commandFactory.create(fileToSaveIn, null).execute();\n+\n+        assertThat(result, failedWithMessageContaining(\"message\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0f3d6548f856ef91f2da121e6a29267a146a2a52",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/controller/command/SelectMapObjectCommandTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/SelectMapObjectCommandTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/controller/command/SelectMapObjectCommandTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/controller/command/SelectMapObjectCommandTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -10,7 +10,7 @@\n \n import java.util.Optional;\n \n-import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessage;\n+import static manfred.manfreditor.helper.CommandFailedMatcher.failedWithMessageContaining;\n import static manfred.manfreditor.helper.SuccessfulCommandMatcher.wasSuccessful;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n@@ -52,7 +52,7 @@ void selectFailsBecauseObjectDoesNotExist() {\n \n         CommandResult result = commandFactory.create(0, 0).execute();\n \n-        assertThat(result, failedWithMessage(\"No map object found at click position (0,0)\"));\n+        assertThat(result, failedWithMessageContaining(\"No map object found at click position (0,0)\"));\n     }\n \n     @Test"
  },
  {
    "sha": "aa4e403d9f9a4588115f47abcdb34d232ca34fdd",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/helper/CommandFailedMatcher.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/helper/CommandFailedMatcher.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/helper/CommandFailedMatcher.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/helper/CommandFailedMatcher.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -12,7 +12,7 @@ private CommandFailedMatcher(String expectedMessage) {\n         this.expectedMessage = expectedMessage;\n     }\n \n-    public static CommandFailedMatcher failedWithMessage(String expectedMessage) {\n+    public static CommandFailedMatcher failedWithMessageContaining(String expectedMessage) {\n         return new CommandFailedMatcher(expectedMessage);\n     }\n \n@@ -23,7 +23,7 @@ public boolean matches(Object actual) {\n         }\n         StringBuilder actualErrorMessage = new StringBuilder();\n         ((CommandResult) actual).onFailure(actualErrorMessage::append);\n-        return actualErrorMessage.toString().equals(expectedMessage);\n+        return actualErrorMessage.toString().contains(expectedMessage);\n     }\n \n     @Override"
  },
  {
    "sha": "8e6c10c2ebc37fe8f4ca579c8d6f81c6f99c5527",
    "filename": "Manfreditor/src/test/java/manfred/manfreditor/map/ObjectInsertionValidatorTest.java",
    "status": "modified",
    "additions": 26,
    "deletions": 31,
    "changes": 57,
    "blob_url": "https://github.com/pubrrr/manfred/blob/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/map/ObjectInsertionValidatorTest.java",
    "raw_url": "https://github.com/pubrrr/manfred/raw/aebfa835609262750644a0a63f07cb4a4759bbd5/Manfreditor/src/test/java/manfred/manfreditor/map/ObjectInsertionValidatorTest.java",
    "contents_url": "https://api.github.com/repos/pubrrr/manfred/contents/Manfreditor/src/test/java/manfred/manfreditor/map/ObjectInsertionValidatorTest.java?ref=aebfa835609262750644a0a63f07cb4a4759bbd5",
    "patch": "@@ -4,11 +4,10 @@\n import io.vavr.control.Validation;\n import manfred.data.infrastructure.map.MapPrototype;\n import manfred.data.infrastructure.map.tile.TilePrototype;\n-import manfred.manfreditor.map.Map.TileCoordinate;\n-import manfred.manfreditor.map.accessibility.AccessibilityIndicator;\n import manfred.manfreditor.map.accessibility.ColoredAccessibilityIndicator;\n import manfred.manfreditor.map.accessibility.EmptyAccessibilityIndicator;\n import manfred.manfreditor.map.accessibility.Source;\n+import manfred.manfreditor.map.flattened.FlattenedMap;\n import manfred.manfreditor.mapobject.ConcreteMapObject;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -37,9 +36,9 @@ void setUp() {\n     void objectAndMapAreAlwaysAccessible() {\n         MapPrototype structureMock = mockMapPrototype(Map.of(coordinatePrototype(0, 0), TilePrototype.accessible()));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(tileCoordinate(0, 0), new EmptyAccessibilityIndicator());\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(tileCoordinate(0, 0), new EmptyAccessibilityIndicator()));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertTrue(result.isValid());\n     }\n@@ -48,9 +47,9 @@ void objectAndMapAreAlwaysAccessible() {\n     void objectTileIsNotAccessible() {\n         MapPrototype structureMock = mockMapPrototype(Map.of(coordinatePrototype(0, 0), TilePrototype.notAccessible()));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(tileCoordinate(0, 0), new EmptyAccessibilityIndicator());\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(tileCoordinate(0, 0), new EmptyAccessibilityIndicator()));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertTrue(result.isValid());\n     }\n@@ -59,9 +58,9 @@ void objectTileIsNotAccessible() {\n     void mapIsNotAccessible() {\n         MapPrototype structureMock = mockMapPrototype(Map.of(coordinatePrototype(0, 0), TilePrototype.accessible()));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(tileCoordinate(0, 0), new ColoredAccessibilityIndicator(null, null));\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(tileCoordinate(0, 0), new ColoredAccessibilityIndicator(null, null)));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertTrue(result.isValid());\n     }\n@@ -70,11 +69,11 @@ void mapIsNotAccessible() {\n     void mapAndObjectAreNotAccessible() {\n         MapPrototype structureMock = mockMapPrototype(Map.of(coordinatePrototype(0, 0), TilePrototype.notAccessible()));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(\n             tileCoordinate(0, 0), new ColoredAccessibilityIndicator(null, new Source(\"tileName\", tileCoordinate(0, 0)))\n-        );\n+        ));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertFalse(result.isValid());\n         assertThat(result.getError(), containsInAnyOrder(\"Tile (0,0) is not accessible, blocked by object tileName at (0,0)\"));\n@@ -87,12 +86,12 @@ void twoTileObjectAndBothTilesAreNotAccessible() {\n             coordinatePrototype(1, 0), TilePrototype.notAccessible()\n         ));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(\n             tileCoordinate(0, 0), new ColoredAccessibilityIndicator(null, new Source(\"tileName\", tileCoordinate(0, 0))),\n             tileCoordinate(1, 0), new ColoredAccessibilityIndicator(null, new Source(\"tileName\", tileCoordinate(0, 0)))\n-        );\n+        ));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertFalse(result.isValid());\n         assertThat(result.getError(), containsInAnyOrder(\n@@ -108,12 +107,12 @@ void twoTileObjectAndOneTileAreNotAccessibleOnMap() {\n             coordinatePrototype(1, 0), TilePrototype.notAccessible()\n         ));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(\n             tileCoordinate(0, 0), new EmptyAccessibilityIndicator(),\n             tileCoordinate(1, 0), new ColoredAccessibilityIndicator(null, new Source(\"tileName\", tileCoordinate(0, 0)))\n-        );\n+        ));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertFalse(result.isValid());\n         assertThat(result.getError(), containsInAnyOrder(\"Tile (1,0) is not accessible, blocked by object tileName at (0,0)\"));\n@@ -126,12 +125,12 @@ void twoTileObject_oneTileAccessibleOnMap_otherTileAccessibleOnObjectStructure()\n             coordinatePrototype(1, 0), TilePrototype.accessible()\n         ));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(\n             tileCoordinate(0, 0), new EmptyAccessibilityIndicator(),\n             tileCoordinate(1, 0), new ColoredAccessibilityIndicator(null, new Source(\"tileName\", tileCoordinate(0, 0)))\n-        );\n+        ));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertTrue(result.isValid());\n     }\n@@ -140,12 +139,12 @@ void twoTileObject_oneTileAccessibleOnMap_otherTileAccessibleOnObjectStructure()\n     void objectAtAnotherTileThanOrigin() {\n         MapPrototype structureMock = mockMapPrototype(Map.of(coordinatePrototype(0, 0), TilePrototype.notAccessible()));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(\n             tileCoordinate(0, 0), new EmptyAccessibilityIndicator(),\n             tileCoordinate(1, 0), new ColoredAccessibilityIndicator(null, new Source(\"tileName\", tileCoordinate(3, 0)))\n-        );\n+        ));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(1, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(1, 0), flattenedMap);\n \n         assertFalse(result.isValid());\n         assertThat(result.getError(), containsInAnyOrder(\"Tile (1,0) is not accessible, blocked by object tileName at (3,0)\"));\n@@ -158,11 +157,9 @@ void objectWithYOffsetAtY0_isInvalid() {\n             coordinatePrototype(0, 1), TilePrototype.notAccessible()\n         ));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 1), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n-            tileCoordinate(0, 0), new EmptyAccessibilityIndicator()\n-        );\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(tileCoordinate(0, 0), new EmptyAccessibilityIndicator()));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertFalse(result.isValid());\n         assertThat(result.getError(), containsInAnyOrder(\"Object location must not result in negative coordinates, given: (0,0), origin is (0,1)\"));\n@@ -177,11 +174,9 @@ void objectThatReachesOverTopAndRightBorderOfMapIsAllowed() {\n             coordinatePrototype(1, 1), TilePrototype.accessible()\n         ));\n         ConcreteMapObject object = new ConcreteMapObject(\"name\", structureMock, coordinatePrototype(0, 0), null);\n-        io.vavr.collection.Map<TileCoordinate, AccessibilityIndicator> mergedAccessibility = HashMap.of(\n-            tileCoordinate(0, 0), new EmptyAccessibilityIndicator()\n-        );\n+        var flattenedMap = new FlattenedMap(\"name\", HashMap.of(tileCoordinate(0, 0), new EmptyAccessibilityIndicator()));\n \n-        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), mergedAccessibility);\n+        Validation<List<String>, ConcreteMapObject> result = underTest.mayObjectBeInserted(object, tileCoordinate(0, 0), flattenedMap);\n \n         assertTrue(result.isValid());\n     }"
  }
]
