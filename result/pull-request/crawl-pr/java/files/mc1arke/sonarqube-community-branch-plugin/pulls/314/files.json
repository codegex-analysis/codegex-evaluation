[
  {
    "sha": "9f4d2c71ab31ea5dbbfe75ef6fc60c1f061ebdcb",
    "filename": "src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/AddComment.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/blob/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/AddComment.java",
    "raw_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/raw/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/AddComment.java",
    "contents_url": "https://api.github.com/repos/mc1arke/sonarqube-community-branch-plugin/contents/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/AddComment.java?ref=d69921cbe4d1af56da2c4680345fb11eb7b0ace6",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (C) 2021 Julien Roy\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ *\n+ */\n+package com.github.mc1arke.sonarqube.plugin.ce.pullrequest.github.v4;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.aexp.nodes.graphql.annotations.GraphQLArgument;\n+import io.aexp.nodes.graphql.annotations.GraphQLProperty;\n+\n+@GraphQLProperty(name = \"addComment\", arguments = {@GraphQLArgument(name = \"input\")})\n+public class AddComment {\n+\n+    private final String clientMutationId;\n+\n+    @JsonCreator\n+    public AddComment(@JsonProperty(\"clientMutationId\") String clientMutationId) {\n+        this.clientMutationId = clientMutationId;\n+    }\n+\n+    public String getClientMutationId() {\n+        return clientMutationId;\n+    }\n+\n+}"
  },
  {
    "sha": "5f469b6836eac380ba011252d61de7af6a70183e",
    "filename": "src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GetPullRequest.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/blob/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GetPullRequest.java",
    "raw_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/raw/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GetPullRequest.java",
    "contents_url": "https://api.github.com/repos/mc1arke/sonarqube-community-branch-plugin/contents/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GetPullRequest.java?ref=d69921cbe4d1af56da2c4680345fb11eb7b0ace6",
    "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (C) 2021 Julien Roy\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ *\n+ */\n+package com.github.mc1arke.sonarqube.plugin.ce.pullrequest.github.v4;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.aexp.nodes.graphql.annotations.GraphQLArgument;\n+import io.aexp.nodes.graphql.annotations.GraphQLProperty;\n+\n+@GraphQLProperty(name = \"repository\", arguments = {@GraphQLArgument(name = \"owner\"), @GraphQLArgument(name = \"name\")})\n+public class GetPullRequest {\n+\n+    private final String url;\n+\n+    @GraphQLProperty(name = \"pullRequest\", arguments = {@GraphQLArgument(name = \"number\")})\n+    private final PullRequest pullRequest;\n+\n+    @JsonCreator\n+    public GetPullRequest(@JsonProperty(\"url\") String url, @JsonProperty(\"pullRequest\") PullRequest pullRequest) {\n+        this.url = url;\n+        this.pullRequest = pullRequest;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public PullRequest getPullRequest() {\n+        return pullRequest;\n+    }\n+\n+    public static class PullRequest {\n+\n+        private final String id;\n+\n+        @JsonCreator\n+        public PullRequest(@JsonProperty(\"id\") String id) {\n+            this.id = id;\n+        }\n+\n+        public String getId() {\n+            return id;\n+        }\n+    }\n+}"
  },
  {
    "sha": "2236eb5d6d7cb12b5c11208ca1633256c2f98d95",
    "filename": "src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProvider.java",
    "status": "modified",
    "additions": 52,
    "deletions": 1,
    "changes": 53,
    "blob_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/blob/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProvider.java",
    "raw_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/raw/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProvider.java",
    "contents_url": "https://api.github.com/repos/mc1arke/sonarqube-community-branch-plugin/contents/src/main/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProvider.java?ref=d69921cbe4d1af56da2c4680345fb11eb7b0ace6",
    "patch": "@@ -109,6 +109,8 @@ public DecorationResult createCheckRun(AnalysisDetails analysisDetails, AlmSetti\n         headers.put(\"Accept\", \"application/vnd.github.antiope-preview+json\");\n \n \n+        String summary = analysisDetails.createAnalysisSummary(new MarkdownFormatterFactory());\n+\n         List<PostAnalysisIssueVisitor.ComponentIssue> issues = analysisDetails.getPostAnalysisIssueVisitor().getIssues();\n \n         List<InputObject<Object>> annotations = createAnnotations(issues);\n@@ -119,7 +121,7 @@ public DecorationResult createCheckRun(AnalysisDetails analysisDetails, AlmSetti\n                                                                                                       QualityGate.Status.OK ?\n                                                                                                       \"success\" :\n                                                                                                       \"failed\"))\n-                .put(\"summary\", analysisDetails.createAnalysisSummary(new MarkdownFormatterFactory()))\n+                .put(\"summary\", summary)\n                 .put(\"annotations\", annotations);\n \n         SimpleDateFormat startedDateFormat = new SimpleDateFormat(DATE_TIME_PATTERN);\n@@ -165,12 +167,61 @@ public DecorationResult createCheckRun(AnalysisDetails analysisDetails, AlmSetti\n                               inputObjectArguments, checkRunOutputContentBuilder, graphQLRequestEntityBuilder);\n \n \n+        Optional<String> oPullRequestKey = analysisDetails.getPullRequestKey();\n+        if (Optional.ofNullable(projectAlmSettingDto.getSummaryCommentEnabled()).orElse(true) && oPullRequestKey.isPresent()) {\n+            postSummaryComment(apiUrl, headers, projectPath, oPullRequestKey.get(), summary);\n+        }\n+\n         return DecorationResult.builder()\n                 .withPullRequestUrl(repositoryAuthenticationToken.getRepositoryUrl() + \"/pull/\" + analysisDetails.getBranchName())\n                 .build();\n \n     }\n \n+    private void postSummaryComment(String apiUrl, Map<String, String> headers, String projectPath, String pullRequestKey, String summary) throws IOException {\n+\n+        String[] paths = projectPath.split(\"/\", 2);\n+        String owner = paths[0];\n+        String projectName = paths[1];\n+\n+        GraphQLRequestEntity getPullRequest =\n+            graphqlProvider.createRequestBuilder()\n+                .url(getGraphqlUrl(apiUrl))\n+                .headers(headers)\n+                .request(GetPullRequest.class)\n+                .arguments(\n+                    new Arguments(\"repository\", new Argument<>(\"owner\", owner), new Argument<>(\"name\", projectName)),\n+                    new Arguments(\"repository.pullRequest\", new Argument<>(\"number\", Integer.valueOf(pullRequestKey)))\n+                )\n+                .requestMethod(GraphQLTemplate.GraphQLMethod.QUERY)\n+                .build();\n+\n+\n+        GraphQLResponseEntity<GetPullRequest> response =\n+            executeRequest((r, t) -> graphqlProvider.createGraphQLTemplate().execute(r, t), getPullRequest, GetPullRequest.class);\n+\n+        String pullRequestId = response.getResponse().getPullRequest().getId();\n+\n+        InputObject.Builder<Object> repositoryInputObjectBuilder = graphqlProvider.createInputObject();\n+\n+        InputObject<Object> input = repositoryInputObjectBuilder\n+            .put(\"body\", summary)\n+            .put(\"subjectId\", pullRequestId)\n+            .build();\n+\n+        GraphQLRequestEntity graphQLRequestEntity =\n+            graphqlProvider.createRequestBuilder()\n+                .url(getGraphqlUrl(apiUrl))\n+                .headers(headers)\n+                .request(AddComment.class)\n+                .arguments(new Arguments(\"addComment\", new Argument<>(\"input\", input)))\n+                .requestMethod(GraphQLTemplate.GraphQLMethod.MUTATE)\n+                .build();\n+\n+        executeRequest((r, t) -> graphqlProvider.createGraphQLTemplate().mutate(r, t), graphQLRequestEntity, AddComment.class);\n+\n+    }\n+\n     private static <R> GraphQLResponseEntity<R> executeRequest(\n             BiFunction<GraphQLRequestEntity, Class<R>, GraphQLResponseEntity<R>> executor, GraphQLRequestEntity graphQLRequestEntity, Class<R> responseType) {\n         LOGGER.debug(\"Using request: \" + graphQLRequestEntity.getRequest());"
  },
  {
    "sha": "b532d256b01420dca73e8361aee4e60b10b4aa3d",
    "filename": "src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingAction.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/blob/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingAction.java",
    "raw_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/raw/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingAction.java",
    "contents_url": "https://api.github.com/repos/mc1arke/sonarqube-community-branch-plugin/contents/src/main/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingAction.java?ref=d69921cbe4d1af56da2c4680345fb11eb7b0ace6",
    "patch": "@@ -28,6 +28,7 @@\n public class SetGithubBindingAction extends SetBindingAction {\n \n     private static final String REPOSITORY_PARAMETER = \"repository\";\n+    private static final String SUMMARY_COMMENT_PARAMETER = \"summaryCommentEnabled\";\n \n     public SetGithubBindingAction(DbClient dbClient, ComponentFinder componentFinder, UserSession userSession) {\n         super(dbClient, componentFinder, userSession, \"set_github_binding\");\n@@ -37,6 +38,7 @@ public SetGithubBindingAction(DbClient dbClient, ComponentFinder componentFinder\n     protected void configureAction(WebService.NewAction action) {\n         super.configureAction(action);\n         action.createParam(REPOSITORY_PARAMETER).setRequired(true).setMaximumLength(256);\n+        action.createParam(SUMMARY_COMMENT_PARAMETER).setRequired(false).setBooleanPossibleValues();\n     }\n \n     @Override\n@@ -45,6 +47,7 @@ protected ProjectAlmSettingDto createProjectAlmSettingDto(String projectUuid, St\n                 .setProjectUuid(projectUuid)\n                 .setAlmSettingUuid(settingsUuid)\n                 .setAlmRepo(request.mandatoryParam(REPOSITORY_PARAMETER))\n+                .setSummaryCommentEnabled(request.paramAsBoolean(SUMMARY_COMMENT_PARAMETER))\n                 .setMonorepo(false);\n     }\n "
  },
  {
    "sha": "0d9c16df3489c6d387b7a401d6d08f8e061170ec",
    "filename": "src/test/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProviderTest.java",
    "status": "modified",
    "additions": 46,
    "deletions": 7,
    "changes": 53,
    "blob_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/blob/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/test/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProviderTest.java",
    "raw_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/raw/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/test/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProviderTest.java",
    "contents_url": "https://api.github.com/repos/mc1arke/sonarqube-community-branch-plugin/contents/src/test/java/com/github/mc1arke/sonarqube/plugin/ce/pullrequest/github/v4/GraphqlCheckRunProviderTest.java?ref=d69921cbe4d1af56da2c4680345fb11eb7b0ace6",
    "patch": "@@ -357,6 +357,7 @@ private void createCheckRunHappyPath(QualityGate.Status status, String basePath,\n         when(analysisDetails.getBranchName()).thenReturn(\"branchName\");\n         when(analysisDetails.getAnalysisDate()).thenReturn(new Date(1234567890));\n         when(analysisDetails.getAnalysisId()).thenReturn(\"analysis ID\");\n+        when(analysisDetails.getPullRequestKey()).thenReturn(Optional.of(\"1\"));\n         when(analysisDetails.getPostAnalysisIssueVisitor()).thenReturn(postAnalysisIssueVisitor);\n \n         ArgumentCaptor<String> authenticationProviderArgumentCaptor = ArgumentCaptor.forClass(String.class);\n@@ -398,18 +399,37 @@ private void createCheckRunHappyPath(QualityGate.Status status, String basePath,\n \n         ObjectMapper objectMapper = new ObjectMapper();\n         GraphQLResponseEntity<CreateCheckRun> graphQLResponseEntity =\n-                new ObjectMapper().readValue(\"{\\\"response\\\": {\\\"checkRun\\\": {\\\"id\\\": \\\"ABC\\\"}}}\", objectMapper.getTypeFactory().constructParametricType(GraphQLResponseEntity.class, CreateCheckRun.class));\n+            objectMapper.readValue(\"{\\\"response\\\": {\\\"checkRun\\\": {\\\"id\\\": \\\"ABC\\\"}}}\", objectMapper.getTypeFactory().constructParametricType(GraphQLResponseEntity.class, CreateCheckRun.class));\n \n-        ArgumentCaptor<GraphQLRequestEntity> requestEntityArgumentCaptor =\n-                ArgumentCaptor.forClass(GraphQLRequestEntity.class);\n+        ArgumentCaptor<GraphQLRequestEntity> requestEntityArgumentCaptor = ArgumentCaptor.forClass(GraphQLRequestEntity.class);\n \n         GraphQLTemplate graphQLTemplate = mock(GraphQLTemplate.class);\n-        when(graphQLTemplate.mutate(requestEntityArgumentCaptor.capture(), eq(CreateCheckRun.class)))\n-                .thenReturn(graphQLResponseEntity);\n+        when(graphQLTemplate.mutate(requestEntityArgumentCaptor.capture(), eq(CreateCheckRun.class))).thenReturn(graphQLResponseEntity);\n+\n+        GraphQLResponseEntity<GetPullRequest> getPullRequestResponseEntity =\n+            objectMapper.readValue(\"{\" +\n+                \"\\\"response\\\": \" +\n+                \"  {\\n\" +\n+                \"    \\\"pullRequest\\\": {\\n\" +\n+                \"      \\\"id\\\": \\\"MDExOlB1bGxSZXF1ZXN0MzUzNDc=\\\"\\n\" +\n+                \"    }\\n\" +\n+                \"  }\\n\" +\n+                \"}\", objectMapper.getTypeFactory().constructParametricType(GraphQLResponseEntity.class, GetPullRequest.class));\n+\n+        ArgumentCaptor<GraphQLRequestEntity> getPullRequestRequestEntityArgumentCaptor = ArgumentCaptor.forClass(GraphQLRequestEntity.class);\n+        when(graphQLTemplate.execute(getPullRequestRequestEntityArgumentCaptor.capture(), eq(GetPullRequest.class))).thenReturn(getPullRequestResponseEntity);\n+\n+        GraphQLResponseEntity<AddComment> addCommentResponseEntity =\n+            objectMapper.readValue(\"{\\\"response\\\":{}}\", objectMapper.getTypeFactory().constructParametricType(GraphQLResponseEntity.class, AddComment.class));\n+\n+        ArgumentCaptor<GraphQLRequestEntity> addCommentRequestEntityArgumentCaptor = ArgumentCaptor.forClass(GraphQLRequestEntity.class);\n+        when(graphQLTemplate.mutate(addCommentRequestEntityArgumentCaptor.capture(), eq(AddComment.class))).thenReturn(addCommentResponseEntity);\n+\n         when(graphqlProvider.createGraphQLTemplate()).thenReturn(graphQLTemplate);\n \n         ProjectAlmSettingDto projectAlmSettingDto = mock(ProjectAlmSettingDto.class);\n         when(projectAlmSettingDto.getAlmRepo()).thenReturn(\"dummy/repo\");\n+        when(projectAlmSettingDto.getSummaryCommentEnabled()).thenReturn(true);\n         AlmSettingDto almSettingDto = mock(AlmSettingDto.class);\n         when(almSettingDto.getUrl()).thenReturn(basePath);\n         when(almSettingDto.getAppId()).thenReturn(\"app id\");\n@@ -419,7 +439,7 @@ private void createCheckRunHappyPath(QualityGate.Status status, String basePath,\n                 new GraphqlCheckRunProvider(graphqlProvider, clock, githubApplicationAuthenticationProvider, server);\n         testCase.createCheckRun(analysisDetails, almSettingDto, projectAlmSettingDto);\n \n-        assertEquals(1, requestBuilders.size());\n+        assertEquals(3, requestBuilders.size());\n \n         Map<String, String> headers = new HashMap<>();\n         headers.put(\"Authorization\", \"Bearer dummyAuthToken\");\n@@ -473,7 +493,7 @@ private void createCheckRunHappyPath(QualityGate.Status status, String basePath,\n             position++;\n         }\n \n-        assertEquals(2 + position, inputObjectBuilders.size());\n+        assertEquals(3 + position, inputObjectBuilders.size());\n \n         ArgumentCaptor<List<InputObject<Object>>> annotationArgumentCaptor = ArgumentCaptor.forClass(List.class);\n \n@@ -499,6 +519,25 @@ private void createCheckRunHappyPath(QualityGate.Status status, String basePath,\n         verify(inputObjectBuilders.get(position + 1)).put(eq(\"externalId\"), eq(\"analysis ID\"));\n         verify(inputObjectBuilders.get(position + 1)).put(eq(\"output\"), eq(inputObjects.get(position)));\n         verify(inputObjectBuilders.get(position + 1)).build();\n+\n+        // Verify getPullRequest requestEntity\n+        assertEquals(\n+            \"query { repository (owner:\\\"dummy\\\",name:\\\"repo\\\") { url pullRequest : pullRequest (number:1) { id } } } \",\n+            getPullRequestRequestEntityArgumentCaptor.getValue().getRequest()\n+        );\n+\n+        // Validate AddComment\n+        verify(requestBuilders.get(2)).url(fullPath);\n+        verify(requestBuilders.get(2)).headers(headers);\n+        verify(requestBuilders.get(2)).requestMethod(GraphQLTemplate.GraphQLMethod.MUTATE);\n+        verify(requestBuilders.get(2)).build();\n+        assertEquals(requestEntities.get(2), addCommentRequestEntityArgumentCaptor.getValue());\n+\n+        assertEquals(\n+          \"mutation { addComment (input:{body:\\\"dummy summary\\\",subjectId:\\\"MDExOlB1bGxSZXF1ZXN0MzUzNDc=\\\"}) { clientMutationId } } \",\n+            addCommentRequestEntityArgumentCaptor.getValue().getRequest()\n+        );\n+\n     }\n \n     @Test"
  },
  {
    "sha": "d38868fc435b41a7010ad222ef8ca0c8f4762e3b",
    "filename": "src/test/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingActionTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/blob/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/test/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingActionTest.java",
    "raw_url": "https://github.com/mc1arke/sonarqube-community-branch-plugin/raw/d69921cbe4d1af56da2c4680345fb11eb7b0ace6/src/test/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingActionTest.java",
    "contents_url": "https://api.github.com/repos/mc1arke/sonarqube-community-branch-plugin/contents/src/test/java/com/github/mc1arke/sonarqube/plugin/server/pullrequest/ws/action/SetGithubBindingActionTest.java?ref=d69921cbe4d1af56da2c4680345fb11eb7b0ace6",
    "patch": "@@ -48,6 +48,11 @@ public void testConfigureAction() {\n         when(repositoryParameter.setRequired(anyBoolean())).thenReturn(repositoryParameter);\n         when(newAction.createParam(\"repository\")).thenReturn(repositoryParameter);\n \n+        WebService.NewParam commentEnabledParameter = mock(WebService.NewParam.class);\n+        when(commentEnabledParameter.setBooleanPossibleValues()).thenReturn(commentEnabledParameter);\n+        when(commentEnabledParameter.setRequired(anyBoolean())).thenReturn(commentEnabledParameter);\n+        when(newAction.createParam(\"summaryCommentEnabled\")).thenReturn(commentEnabledParameter);\n+\n         WebService.NewParam almSettingParameter = mock(WebService.NewParam.class);\n         when(almSettingParameter.setMaximumLength(any(Integer.class))).thenReturn(almSettingParameter);\n         when(almSettingParameter.setRequired(anyBoolean())).thenReturn(almSettingParameter);\n@@ -68,11 +73,12 @@ public void testCreateProjectAlmSettingDto() {\n \n         Request request = mock(Request.class);\n         when(request.mandatoryParam(\"repository\")).thenReturn(\"repository\");\n+        when(request.paramAsBoolean(\"summaryCommentEnabled\")).thenReturn(true);\n \n         SetGithubBindingAction testCase = new SetGithubBindingAction(dbClient, componentFinder, userSession);\n         ProjectAlmSettingDto result = testCase.createProjectAlmSettingDto(\"projectUuid\", \"settingsUuid\", request);\n \n-        assertThat(result).isEqualToComparingFieldByField(new ProjectAlmSettingDto().setProjectUuid(\"projectUuid\").setAlmSettingUuid(\"settingsUuid\").setAlmRepo(\"repository\").setMonorepo(false));\n+        assertThat(result).isEqualToComparingFieldByField(new ProjectAlmSettingDto().setProjectUuid(\"projectUuid\").setAlmSettingUuid(\"settingsUuid\").setAlmRepo(\"repository\").setSummaryCommentEnabled(true).setMonorepo(false));\n \n     }\n }"
  }
]
