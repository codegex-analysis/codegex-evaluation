[
  {
    "sha": "d7abc780f6d4b2619597962e4a6bf39d2269a160",
    "filename": "src/main/java/gregicadditions/recipes/GARecipeMaps.java",
    "status": "modified",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/Gregicality/gregicality/blob/549c0d8980f9543aabb7deaf853a61cc20a3ed5b/src/main/java/gregicadditions/recipes/GARecipeMaps.java",
    "raw_url": "https://github.com/Gregicality/gregicality/raw/549c0d8980f9543aabb7deaf853a61cc20a3ed5b/src/main/java/gregicadditions/recipes/GARecipeMaps.java",
    "contents_url": "https://api.github.com/repos/Gregicality/gregicality/contents/src/main/java/gregicadditions/recipes/GARecipeMaps.java?ref=549c0d8980f9543aabb7deaf853a61cc20a3ed5b",
    "patch": "@@ -4,8 +4,7 @@\n import gregicadditions.gui.GAGuiTextures;\n import gregicadditions.integrations.exnihilocreatio.SieveRecipeMap;\n import gregicadditions.recipes.map.LargeRecipeBuilder;\n-import gregicadditions.recipes.map.NuclearReactorBuilder;\n-import gregicadditions.recipes.map.RecipeMapAssemblyLine;\n+import gregicadditions.recipes.map.*;\n import gregicadditions.recipes.nuclear.HotCoolantRecipeMap;\n import gregicadditions.recipes.qubit.QubitConsumerRecipeBuilder;\n import gregicadditions.recipes.qubit.QubitProducerRecipeBuilder;\n@@ -108,12 +107,12 @@\n         CHEMICAL_DEHYDRATOR_RECIPES = new RecipeMap<>(\"chemical_dehydrator\", 0, 2, 0, 9, 0, 2, 0, 2, (new SimpleRecipeBuilder()))\n                 .setProgressBar(GuiTextures.PROGRESS_BAR_SIFT, ProgressWidget.MoveType.HORIZONTAL);\n         ROCKET_FUEL_RECIPES = new FuelRecipeMap(\"rocket_fuel\");\n-        CHEMICAL_PLANT_RECIPES = new RecipeMap<>(\"chemical_plant\", 0, 4, 0, 2, 0, 5, 0, 3, (new SimpleRecipeBuilder()))\n+        CHEMICAL_PLANT_RECIPES = new RecipeMapExtended<>(\"chemical_plant\", 0, 4, 0, 2, 0, 5, 0, 3, (new SimpleRecipeBuilder()))\n                 .setProgressBar(GuiTextures.PROGRESS_BAR_BATH, ProgressWidget.MoveType.HORIZONTAL);\n-        LARGE_MIXER_RECIPES = (LargeRecipeMap) new LargeRecipeMap(\"large_mixer\", 0, 9, 0, 1, 0, 6, 0, 1, new LargeRecipeBuilder(RecipeMaps.MIXER_RECIPES))\n+        LARGE_MIXER_RECIPES = (LargeRecipeMap) new RecipeMapLargeExtended<>(\"large_mixer\", 0, 9, 0, 1, 0, 6, 0, 1, new LargeRecipeBuilder(RecipeMaps.MIXER_RECIPES))\n                 .setSlotOverlay(false, false, GuiTextures.DUST_OVERLAY)\n                 .setSlotOverlay(true, false, GuiTextures.DUST_OVERLAY)\n-                .setProgressBar(GuiTextures.PROGRESS_BAR_BATH, ProgressWidget.MoveType.HORIZONTAL);\n+                .setProgressBar(GuiTextures.PROGRESS_BAR_MIXER, ProgressWidget.MoveType.HORIZONTAL);\n         BLAST_ALLOY_RECIPES = new RecipeMap<>(\"blast_alloy\", 0, 9, 0, 0, 0, 2, 1, 1, new SimpleRecipeBuilder()).setSlotOverlay(false, false, GuiTextures.DUST_OVERLAY);\n         LARGE_FORGE_HAMMER_RECIPES = (LargeRecipeMap) new LargeRecipeMap(\"large_forge_hammer\", 1, 1, 1, 1, 1, 1, 0, 0, new LargeRecipeBuilder(RecipeMaps.FORGE_HAMMER_RECIPES))\n                 .setSlotOverlay(false, false, GuiTextures.HAMMER_OVERLAY)"
  },
  {
    "sha": "6aff122dfb37aa46bd144c2ae06082a624edfc99",
    "filename": "src/main/java/gregicadditions/recipes/map/RecipeMapExtended.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/Gregicality/gregicality/blob/549c0d8980f9543aabb7deaf853a61cc20a3ed5b/src/main/java/gregicadditions/recipes/map/RecipeMapExtended.java",
    "raw_url": "https://github.com/Gregicality/gregicality/raw/549c0d8980f9543aabb7deaf853a61cc20a3ed5b/src/main/java/gregicadditions/recipes/map/RecipeMapExtended.java",
    "contents_url": "https://api.github.com/repos/Gregicality/gregicality/contents/src/main/java/gregicadditions/recipes/map/RecipeMapExtended.java?ref=549c0d8980f9543aabb7deaf853a61cc20a3ed5b",
    "patch": "@@ -0,0 +1,88 @@\n+package gregicadditions.recipes.map;\n+\n+import gregtech.api.capability.impl.FluidTankList;\n+import gregtech.api.gui.GuiTextures;\n+import gregtech.api.gui.ModularUI;\n+import gregtech.api.gui.resources.TextureArea;\n+import gregtech.api.gui.widgets.ProgressWidget;\n+import gregtech.api.recipes.RecipeBuilder;\n+import gregtech.api.recipes.RecipeMap;\n+import net.minecraft.entity.player.InventoryPlayer;\n+import net.minecraftforge.items.IItemHandlerModifiable;\n+\n+import java.util.function.DoubleSupplier;\n+\n+public class RecipeMapExtended<R extends RecipeBuilder<R>> extends RecipeMap<R> {\n+    private TextureArea progressBarTexture = GuiTextures.PROGRESS_BAR_ARROW;\n+    private ProgressWidget.MoveType moveType = ProgressWidget.MoveType.HORIZONTAL;\n+\n+    public RecipeMapExtended(String unlocalizedName, int minInputs, int maxInputs, int minOutputs, int maxOutputs, int minFluidInputs, int maxFluidInputs, int minFluidOutputs, int maxFluidOutputs, R defaultRecipe) {\n+        super(unlocalizedName, minInputs, maxInputs, minOutputs, maxOutputs, minFluidInputs, maxFluidInputs, minFluidOutputs, maxFluidOutputs, defaultRecipe);\n+    }\n+\n+    @Override\n+    public RecipeMapExtended<R> setProgressBar(TextureArea progressBar, ProgressWidget.MoveType moveType) {\n+        this.progressBarTexture = progressBar;\n+        this.moveType = moveType;\n+        super.setProgressBar(progressBar, moveType);\n+        return this;\n+    }\n+\n+    @Override\n+    public ModularUI.Builder createUITemplate(DoubleSupplier progressSupplier, IItemHandlerModifiable importItems, IItemHandlerModifiable exportItems, FluidTankList importFluids, FluidTankList exportFluids) {\n+        ModularUI.Builder builder = new ModularUI.Builder(GuiTextures.BACKGROUND_EXTENDED, 176, 216) {\n+            @Override\n+            public ModularUI.Builder bindPlayerInventory(InventoryPlayer inventoryPlayer) {\n+                this.bindPlayerInventory(inventoryPlayer, 134);\n+                return this;\n+            }\n+\n+        };\n+        builder.widget(new ProgressWidget(progressSupplier, 77, 22, 21, 20, progressBarTexture, moveType));\n+        this.addInventorySlotGroup(builder, importItems, importFluids, false);\n+        this.addInventorySlotGroup(builder, exportItems, exportFluids, true);\n+        return builder;\n+    }\n+\n+    @Override\n+    protected void addInventorySlotGroup(ModularUI.Builder builder, IItemHandlerModifiable itemHandler, FluidTankList fluidHandler, boolean isOutputs) {\n+        int itemInputsCount = itemHandler.getSlots();\n+        int fluidInputsCount = fluidHandler.getTanks();\n+        boolean invertFluids = false;\n+        if (itemInputsCount == 0) {\n+            int tmp = itemInputsCount;\n+            itemInputsCount = fluidInputsCount;\n+            fluidInputsCount = tmp;\n+            invertFluids = true;\n+        }\n+        int[] inputSlotGrid = determineSlotsGrid(itemInputsCount);\n+        int itemSlotsToLeft = inputSlotGrid[0];\n+        int itemSlotsToDown = inputSlotGrid[1];\n+        int startInputsX = isOutputs ? 106 : 69 - itemSlotsToLeft * 18;\n+        int startInputsY = 32 - (int) (itemSlotsToDown / 2.0 * 18);\n+        for (int i = 0; i < itemSlotsToDown; i++) {\n+            for (int j = 0; j < itemSlotsToLeft; j++) {\n+                int slotIndex = i * itemSlotsToLeft + j;\n+                int x = startInputsX + 18 * j;\n+                int y = startInputsY + 18 * i;\n+                addSlot(builder, x, y, slotIndex, itemHandler, fluidHandler, invertFluids, isOutputs);\n+            }\n+        }\n+        if (fluidInputsCount > 0 || invertFluids) {\n+            if (itemSlotsToDown >= fluidInputsCount && itemSlotsToLeft < 3) {\n+                int startSpecX = isOutputs ? startInputsX + itemSlotsToLeft * 18 : startInputsX - 18;\n+                for (int i = 0; i < fluidInputsCount; i++) {\n+                    int y = startInputsY + 18 * i;\n+                    addSlot(builder, startSpecX, y, i, itemHandler, fluidHandler, !invertFluids, isOutputs);\n+                }\n+            } else {\n+                int startSpecY = startInputsY + itemSlotsToDown * 18;\n+                for (int i = 0; i < fluidInputsCount; i++) {\n+                    int x = isOutputs ? startInputsX + 18 * (i % 3) : startInputsX + itemSlotsToLeft * 18 - 18 - 18 * (i % 3);\n+                    int y = startSpecY + (i / 3) * 18;\n+                    addSlot(builder, x, y, i, itemHandler, fluidHandler, !invertFluids, isOutputs);\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "dc3180540daecc4d5220c0804c6addd9044c4a18",
    "filename": "src/main/java/gregicadditions/recipes/map/RecipeMapLargeExtended.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/Gregicality/gregicality/blob/549c0d8980f9543aabb7deaf853a61cc20a3ed5b/src/main/java/gregicadditions/recipes/map/RecipeMapLargeExtended.java",
    "raw_url": "https://github.com/Gregicality/gregicality/raw/549c0d8980f9543aabb7deaf853a61cc20a3ed5b/src/main/java/gregicadditions/recipes/map/RecipeMapLargeExtended.java",
    "contents_url": "https://api.github.com/repos/Gregicality/gregicality/contents/src/main/java/gregicadditions/recipes/map/RecipeMapLargeExtended.java?ref=549c0d8980f9543aabb7deaf853a61cc20a3ed5b",
    "patch": "@@ -0,0 +1,89 @@\n+package gregicadditions.recipes.map;\n+\n+import gregicadditions.recipes.LargeRecipeMap;\n+import gregtech.api.capability.impl.FluidTankList;\n+import gregtech.api.gui.GuiTextures;\n+import gregtech.api.gui.ModularUI;\n+import gregtech.api.gui.resources.TextureArea;\n+import gregtech.api.gui.widgets.ProgressWidget;\n+import gregtech.api.recipes.RecipeBuilder;\n+import gregtech.api.recipes.RecipeMaps;\n+import net.minecraft.entity.player.InventoryPlayer;\n+import net.minecraftforge.items.IItemHandlerModifiable;\n+\n+import java.util.function.DoubleSupplier;\n+\n+public class RecipeMapLargeExtended<R extends RecipeBuilder<LargeRecipeBuilder>> extends LargeRecipeMap {\n+    private TextureArea progressBarTexture = GuiTextures.PROGRESS_BAR_ARROW;\n+    private ProgressWidget.MoveType moveType = ProgressWidget.MoveType.HORIZONTAL;\n+\n+    public RecipeMapLargeExtended(String unlocalizedName, int minInputs, int maxInputs, int minOutputs, int maxOutputs, int minFluidInputs, int maxFluidInputs, int minFluidOutputs, int maxFluidOutputs, R defaultRecipe) {\n+        super(unlocalizedName, minInputs, maxInputs, minOutputs, maxOutputs, minFluidInputs, maxFluidInputs, minFluidOutputs, maxFluidOutputs, new LargeRecipeBuilder(RecipeMaps.MIXER_RECIPES));\n+    }\n+\n+    @Override\n+    public RecipeMapLargeExtended<R> setProgressBar(TextureArea progressBar, ProgressWidget.MoveType moveType) {\n+        this.progressBarTexture = progressBar;\n+        this.moveType = moveType;\n+        super.setProgressBar(progressBar, moveType);\n+        return this;\n+    }\n+\n+    @Override\n+    public ModularUI.Builder createUITemplate(DoubleSupplier progressSupplier, IItemHandlerModifiable importItems, IItemHandlerModifiable exportItems, FluidTankList importFluids, FluidTankList exportFluids) {\n+        ModularUI.Builder builder = new ModularUI.Builder(GuiTextures.BACKGROUND_EXTENDED, 176, 216) {\n+            @Override\n+            public ModularUI.Builder bindPlayerInventory(InventoryPlayer inventoryPlayer) {\n+                this.bindPlayerInventory(inventoryPlayer, 134);\n+                return this;\n+            }\n+\n+        };\n+        builder.widget(new ProgressWidget(progressSupplier, 77, 22, 21, 20, progressBarTexture, moveType));\n+        this.addInventorySlotGroup(builder, importItems, importFluids, false);\n+        this.addInventorySlotGroup(builder, exportItems, exportFluids, true);\n+        return builder;\n+    }\n+\n+    @Override\n+    protected void addInventorySlotGroup(ModularUI.Builder builder, IItemHandlerModifiable itemHandler, FluidTankList fluidHandler, boolean isOutputs) {\n+        int itemInputsCount = itemHandler.getSlots();\n+        int fluidInputsCount = fluidHandler.getTanks();\n+        boolean invertFluids = false;\n+        if (itemInputsCount == 0) {\n+            int tmp = itemInputsCount;\n+            itemInputsCount = fluidInputsCount;\n+            fluidInputsCount = tmp;\n+            invertFluids = true;\n+        }\n+        int[] inputSlotGrid = determineSlotsGrid(itemInputsCount);\n+        int itemSlotsToLeft = inputSlotGrid[0];\n+        int itemSlotsToDown = inputSlotGrid[1];\n+        int startInputsX = isOutputs ? 106 : 69 - itemSlotsToLeft * 18;\n+        int startInputsY = 32 - (int) (itemSlotsToDown / 2.0 * 18);\n+        for (int i = 0; i < itemSlotsToDown; i++) {\n+            for (int j = 0; j < itemSlotsToLeft; j++) {\n+                int slotIndex = i * itemSlotsToLeft + j;\n+                int x = startInputsX + 18 * j;\n+                int y = startInputsY + 18 * i;\n+                addSlot(builder, x, y, slotIndex, itemHandler, fluidHandler, invertFluids, isOutputs);\n+            }\n+        }\n+        if (fluidInputsCount > 0 || invertFluids) {\n+            if (itemSlotsToDown >= fluidInputsCount && itemSlotsToLeft < 3) {\n+                int startSpecX = isOutputs ? startInputsX + itemSlotsToLeft * 18 : startInputsX - 18;\n+                for (int i = 0; i < fluidInputsCount; i++) {\n+                    int y = startInputsY + 18 * i;\n+                    addSlot(builder, startSpecX, y, i, itemHandler, fluidHandler, !invertFluids, isOutputs);\n+                }\n+            } else {\n+                int startSpecY = startInputsY + itemSlotsToDown * 18;\n+                for (int i = 0; i < fluidInputsCount; i++) {\n+                    int x = isOutputs ? startInputsX + 18 * (i % 3) : startInputsX + itemSlotsToLeft * 18 - 18 - 18 * (i % 3);\n+                    int y = startSpecY + (i / 3) * 18;\n+                    addSlot(builder, x, y, i, itemHandler, fluidHandler, !invertFluids, isOutputs);\n+                }\n+            }\n+        }\n+    }\n+}"
  }
]
