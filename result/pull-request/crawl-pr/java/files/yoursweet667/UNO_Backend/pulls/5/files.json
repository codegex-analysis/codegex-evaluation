[
  {
    "sha": "5d0b7bb754a44c93a01b2e1fcebe358bece2a180",
    "filename": "UNO/pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/pom.xml",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/pom.xml",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/pom.xml?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -27,6 +27,13 @@\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n \n+\t\t<dependency>\n+\t\t\t<groupId>org.mockito</groupId>\n+\t\t\t<artifactId>mockito-all</artifactId>\n+\t\t\t<version>1.10.19</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-web</artifactId>"
  },
  {
    "sha": "c3cde582d9c85d0cdd11ed23b575b3d862b6d51e",
    "filename": "UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/GameStorage.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/GameStorage.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/GameStorage.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/GameStorage.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -2,9 +2,11 @@\n \n import ru.yoursweet667.uno.service.model.Game;\n \n+import java.util.Optional;\n+\n public interface GameStorage {\n     void createGame (Game game);\n     void updateGame(Game game);\n     void deleteGame(String gameId);\n-    Game getGame(String gameId);\n+    Optional<Game> getGame(String gameId);\n }"
  },
  {
    "sha": "49909f7bd844fa2a4c5ea12b285a18083ccb79e0",
    "filename": "UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorage.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorage.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorage.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/main/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorage.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -4,11 +4,12 @@\n import ru.yoursweet667.uno.service.model.Game;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n \n @Component\n public class InMemoryGameStorage implements ru.yoursweet667.uno.dataaccess.game.GameStorage {\n \n-    private final Map<String, Game>gameMap = new HashMap<>();\n+    private final Map<String, Game> gameMap = new HashMap<>();\n \n     @Override\n     public void createGame(Game game) {\n@@ -30,8 +31,8 @@ public void deleteGame(String gameId) {\n     }\n \n     @Override\n-    public Game getGame(String gameId) {\n+    public Optional<Game> getGame(String gameId) {\n         //todo: Drop the error if game exist\n-        return gameMap.get(gameId);\n+        return Optional.ofNullable(gameMap.get(gameId));\n     }\n }"
  },
  {
    "sha": "5febe4ec6cf8f146abf88774ec5a74ddb0d76847",
    "filename": "UNO/src/main/java/ru/yoursweet667/uno/service/event/EventHandlerRegistry.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/event/EventHandlerRegistry.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/event/EventHandlerRegistry.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/main/java/ru/yoursweet667/uno/service/event/EventHandlerRegistry.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -7,7 +7,7 @@\n \n import java.util.Map;\n \n-final class EventHandlerRegistry {\n+ public class EventHandlerRegistry {\n \n     private final Map<Class<? extends Event>, EventProcessor<?>> eventTypeToProcessorMap;\n     private final Map<Class<? extends Event>, EventValidator<?>> eventTypeToValidatorMap;"
  },
  {
    "sha": "05965075947a7c17287e2f51dbc2ac47f53c7d19",
    "filename": "UNO/src/main/java/ru/yoursweet667/uno/service/event/EventServiceImpl.java",
    "status": "modified",
    "additions": 12,
    "deletions": 6,
    "changes": 18,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/event/EventServiceImpl.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/event/EventServiceImpl.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/main/java/ru/yoursweet667/uno/service/event/EventServiceImpl.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -2,9 +2,11 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import ru.yoursweet667.uno.service.game.GameService;\n+import ru.yoursweet667.uno.service.model.Game;\n import ru.yoursweet667.uno.service.model.event.Event;\n \n import java.util.List;\n+import java.util.Optional;\n \n public class EventServiceImpl implements EventService {\n \n@@ -16,15 +18,19 @@\n \n     @Override\n     public void createEvent(String gameId, Event event) {\n-        eventHandlerRegistry.getValidator(event).validate(event, gameService.getGame(gameId));\n-        eventHandlerRegistry.getProcessor(event).process(event, gameService.getGame(gameId));\n+        Game game = gameService.getGame(gameId)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Game not found\"));\n+\n+        eventHandlerRegistry.getValidator(event).validate(event, game);\n+        eventHandlerRegistry.getProcessor(event).process(event, game);\n     }\n \n     @Override\n     public List<Event> getEvents(String gameId, String playerId, Integer fromEventId) {\n-        List<Event> events = gameService.getGame(gameId).getEvents();\n-        List<Event> neededEvents = events.subList(fromEventId, events.size());\n-        //todo: Error if the game is not found by provided gameId\n-        return null;\n+        Game game = gameService.getGame(gameId)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Game not found\"));\n+        List<Event> events = game.getEvents();\n+\n+        return events.subList(fromEventId, events.size());\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "668c395246768d87dabd5aa4fcaf37e6ec5c0ee9",
    "filename": "UNO/src/main/java/ru/yoursweet667/uno/service/game/GameService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/game/GameService.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/game/GameService.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/main/java/ru/yoursweet667/uno/service/game/GameService.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -3,11 +3,13 @@\n import ru.yoursweet667.uno.service.model.Player;\n import ru.yoursweet667.uno.service.model.Game;\n \n+import java.util.Optional;\n+\n public interface GameService {\n \n     Game createGame();\n     Player addPlayerToGame(String gameId, String playerId);\n     void removePlayerFromGame(String gameId, String playerId);\n-    Game getGame(String gameId);\n+    Optional<Game> getGame(String gameId);\n \n }"
  },
  {
    "sha": "9f54729d2034e0a9db2ad2a7c66b332d595c6af1",
    "filename": "UNO/src/main/java/ru/yoursweet667/uno/service/game/GameServiceImpl.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/game/GameServiceImpl.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/main/java/ru/yoursweet667/uno/service/game/GameServiceImpl.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/main/java/ru/yoursweet667/uno/service/game/GameServiceImpl.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -32,19 +32,23 @@ public Game createGame() {\n     public Player addPlayerToGame(String gameId, String playerName) {\n         List<Card> playerCards = new ArrayList<>();\n         Player player = new Player(UUID.randomUUID().toString(), playerName, playerCards);\n-        storage.getGame(gameId).getPlayers().put(player.getPlayerId(), player);\n-        //todo: Drop the error if game doesn't exist\n+        getLocalGame(gameId).getPlayers().put(player.getPlayerId(), player);\n         return player;\n     }\n \n     @Override\n     public void removePlayerFromGame(String gameId, String playerId) {\n-        storage.getGame(gameId).getPlayers().remove(playerId);\n+        getLocalGame(gameId).getPlayers().remove(playerId);\n         //todo: Drop the error if game or player doesn't exist\n     }\n \n     @Override\n-    public Game getGame(String gameId) {\n+    public Optional<Game> getGame(String gameId) {\n         return storage.getGame(gameId);\n     }\n+\n+    private Game getLocalGame(String gameId) {\n+        return storage.getGame(gameId)\n+                .orElseThrow(() -> new IllegalArgumentException(\"Game not found\"));\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "60874598f5bf021858942cd344b482ab6d362466",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorageTest.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorageTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorageTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/dataaccess/game/InMemoryGameStorageTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,92 @@\n+package ru.yoursweet667.uno.dataaccess.game;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import ru.yoursweet667.uno.service.model.Game;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class InMemoryGameStorageTest {\n+\n+    private final static String GAME_ID = \"gameId\";\n+\n+    @Mock\n+    private GameStorage storage;\n+\n+    @Mock\n+    private InMemoryGameStorage inMemoryGameStorage;\n+\n+    @BeforeEach\n+    private void beforeEach() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void createGame_putGameInMap() {\n+\n+        //Given\n+        Game game = new Game(GAME_ID,null,null,null,\n+                null,null);\n+\n+        //When\n+        storage.createGame(game);\n+\n+\n+        //Then\n+        Mockito.verify(storage).createGame(game);\n+\n+    }\n+\n+    @Test\n+    void updateGame_putGameInMap() {\n+\n+        //Give\n+        Game game = new Game(GAME_ID,null,null,null,\n+                null,null);\n+\n+        //When\n+        storage.updateGame(game);\n+\n+        //Then\n+        Mockito.verify(storage).updateGame(game);\n+\n+    }\n+\n+    @Test\n+    void deleteGame_removeGame() {\n+\n+        //Give\n+        Game game = new Game(GAME_ID,null,null,null,\n+                null,null);\n+\n+        //When\n+        storage.deleteGame(game.getGameId());\n+\n+        //Then\n+        Mockito.verify(storage).deleteGame(game.getGameId());\n+\n+    }\n+\n+    @Test\n+    void getGame_returnGame() {\n+\n+        //Give\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, null);\n+\n+        Mockito.when(inMemoryGameStorage.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        Optional<Game> gameFromMap = inMemoryGameStorage.getGame(game.getGameId());\n+\n+        String gameId = gameFromMap.get().getGameId();\n+\n+        //Then\n+        assertThat(gameId).isEqualTo(game.getGameId());\n+    }\n+}"
  },
  {
    "sha": "9aeff177e3f3804dae6f9f7de8a9a037cf8ed451",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/EventServiceImplTest.java",
    "status": "added",
    "additions": 173,
    "deletions": 0,
    "changes": 173,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/EventServiceImplTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/EventServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/EventServiceImplTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,173 @@\n+package ru.yoursweet667.uno.service.event;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+import ru.yoursweet667.uno.service.event.processor.EventProcessor;\n+import ru.yoursweet667.uno.service.event.validator.EventValidator;\n+import ru.yoursweet667.uno.service.game.GameService;\n+import ru.yoursweet667.uno.service.model.*;\n+import ru.yoursweet667.uno.service.model.event.Event;\n+import ru.yoursweet667.uno.service.model.event.TakeCardsEvent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class EventServiceImplTest {\n+\n+    private final static String GAME_ID = \"gameId\";\n+    private static final String PLAYER_ID = \"playerId\";\n+\n+    @Mock\n+    private GameService gameService;\n+    @Mock\n+    private EventHandlerRegistry eventHandlerRegistry;\n+    @Mock\n+    private EventValidator eventValidator;\n+    @Mock\n+    private EventProcessor eventProcessor;\n+    @Mock\n+    private TakeCardsEvent takeCardsEvent;\n+\n+    @InjectMocks\n+    private EventServiceImpl eventService;\n+\n+    @BeforeEach\n+    private void beforeEach() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void createEvent_validateAndProcessEvent() {\n+\n+        //Given\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, null);\n+        TakeCardsEvent event = new TakeCardsEvent(123, null, null, null);\n+\n+        Mockito.when(gameService.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+        Mockito.when(eventHandlerRegistry.getValidator(event)).thenReturn(eventValidator);\n+        Mockito.when(eventHandlerRegistry.getProcessor(event)).thenReturn(eventProcessor);\n+\n+        //When\n+        eventService.createEvent(GAME_ID, event);\n+\n+        //Then\n+        Mockito.verify(eventValidator).validate(event, game);\n+        Mockito.verify(eventProcessor).process\n+                (Matchers.eq(event), Matchers.eq(game), Matchers.any());\n+    }\n+\n+    @Test\n+    void createEvent_gameNotFound_exception() {\n+\n+        //Given\n+        TakeCardsEvent event = new TakeCardsEvent(123, null, null, null);\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, List.of(event));\n+\n+        Mockito.when(gameService.getGame(GAME_ID)).thenReturn(Optional.empty());\n+\n+        //When+Then\n+        Assertions.assertThatThrownBy(() -> eventService.createEvent(GAME_ID, event))\n+                .isInstanceOf(IllegalArgumentException.class);\n+    }\n+\n+    @Test\n+    void getEvents_gameExist_getNeededEvents() {\n+\n+        //Given\n+        TakeCardsEvent event = new TakeCardsEvent(123, EventType.JOIN_GAME, null, null);\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, List.of(event));\n+\n+        Mockito.when(gameService.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        int fromEventId = 0;\n+        List<Event> events = eventService.getEvents(GAME_ID, PLAYER_ID, fromEventId);\n+\n+        //Then\n+        assertThat(events).hasSize(game.getEvents().size());\n+        assertThat(events).contains(event);\n+\n+    }\n+\n+    @Test\n+    void getEvents_gameDoesNotExist_exception() {\n+\n+        //Given\n+        Mockito.when(gameService.getGame(GAME_ID)).thenReturn(Optional.empty());\n+\n+        //When\n+        int fromEventId = 0;\n+\n+        //Then\n+        Assertions.assertThatThrownBy(() -> eventService.getEvents(GAME_ID, PLAYER_ID, fromEventId))\n+                .isInstanceOf(IllegalArgumentException.class);\n+\n+    }\n+\n+    @Test\n+    void getEvents_fromEventIdNotMoreEventSize_getNeededEvents() {\n+\n+        //Given\n+        TakeCardsEvent firstEvent = new TakeCardsEvent(123, EventType.JOIN_GAME, null, null);\n+        TakeCardsEvent secondEvent = new TakeCardsEvent(321, EventType.JOIN_GAME, null, null);\n+        List<Event> eventsInGame = new ArrayList<>();\n+        eventsInGame.add(firstEvent);\n+        eventsInGame.add(secondEvent);\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, eventsInGame);\n+\n+        Mockito.when(gameService.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        int fromEventId = 0;\n+        List<Event> events = eventService.getEvents(GAME_ID, PLAYER_ID, fromEventId);\n+\n+        //Then\n+        assertThat(fromEventId).isLessThanOrEqualTo(events.size());\n+    }\n+\n+    @Test\n+    void getEvents_gameExistChangeEventParams_getNeededEvents() {\n+\n+        //Given\n+        List<Card> cards = new ArrayList<>();\n+\n+        Card card = new Card(CardType.ZERO, CardColour.RED, true);\n+        for (int i = 0; i < 2; i++ ) {\n+            cards.add(card);\n+        }\n+\n+        Player player = new Player(PLAYER_ID, null, cards);\n+\n+        TakeCardsEvent event = new TakeCardsEvent(123, EventType.TAKE_CARDS, cards, player);\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, List.of(event));\n+\n+        Mockito.when(gameService.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+        Mockito.when(takeCardsEvent.getPlayer()).thenReturn(player);\n+\n+        //When\n+        int fromEventId = 0;\n+        List<Event> events = eventService.getEvents(GAME_ID, \"somePlayerId\", fromEventId);\n+\n+        Event changedEvent = events.get(0);\n+\n+        //Then\n+        assertThat(changedEvent).isInstanceOf(TakeCardsEvent.class);\n+\n+        TakeCardsEvent takeCardsEvent = (TakeCardsEvent) changedEvent;\n+\n+        boolean allCardsHidden = takeCardsEvent.getCards().stream()\n+                .noneMatch(Card::getVisible);\n+\n+        assertThat(allCardsHidden).isTrue();\n+    }\n+}"
  },
  {
    "sha": "cfdabdc705d6c05bc17502111c9d48fb4cace583",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndGameProcessorTest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndGameProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndGameProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndGameProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.GameState;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class EndGameProcessorTest {\n+\n+    private static final EndGameProcessor endGameProcessor = new EndGameProcessor();\n+\n+    @Test\n+    void doProcess_anyGameState_changeGameState() {\n+\n+        //Given\n+        Game game = new Game(null, null, GameState.START_TURN,\n+                null, null, null);\n+\n+        //When\n+        endGameProcessor.doProcess(null, game, null);\n+\n+        //Then\n+        assertThat(game.getGameState()).isEqualTo(GameState.GAME_ENDED);\n+\n+    }\n+}"
  },
  {
    "sha": "0e5f815a893ae79d9358957ca288aa1b2c2a4556",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndTurnProcessorTest.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndTurnProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndTurnProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/EndTurnProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,85 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import net.bytebuddy.dynamic.DynamicType;\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.*;\n+import ru.yoursweet667.uno.service.model.event.EndTurnEvent;\n+import ru.yoursweet667.uno.service.model.event.Event;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+\n+public class EndTurnProcessorTest {\n+\n+    private static final EndTurnProcessor endTurnProcessor = new EndTurnProcessor();\n+\n+    @Test\n+    void doProcess_changeGameStateAndNextPlayer_startTurn() {\n+\n+        //Given\n+        Player player = new Player(\"playerId\", null, null);\n+        List<Card> cards = new ArrayList<>();\n+        Card card = new Card(null, null, true);\n+\n+        int i = 0;\n+        do {cards.add(card); i++; }\n+        while (i < 3);\n+\n+        Player playerForEvent = new Player(\"playerIdFromEvent\", null, cards);\n+        Game game = new Game(null, Map.of(player.getPlayerId(), player), GameState.START_TURN,\n+                null, null, null);\n+        EndTurnEvent event = new EndTurnEvent(123, null, playerForEvent);\n+\n+        ValueHoldingBiConsumer resultEventConsumer = new ValueHoldingBiConsumer();\n+\n+        //When\n+        endTurnProcessor.doProcess(event, game, resultEventConsumer);\n+\n+        //Then\n+        assertThat(game.getGameState()).isEqualTo(GameState.END_TURN);\n+        assertThat(game.getNextPlayer().get().getPlayerId()).isEqualTo(\"playerId\");\n+        assertThat(resultEventConsumer.event.getType()).isEqualTo(EventType.START_TURN);\n+        assertThat(resultEventConsumer.gameId).isEqualTo(game.getGameId());\n+    }\n+\n+    private static class ValueHoldingBiConsumer implements BiConsumer<String, Event> {\n+\n+        private Event event;\n+        private String gameId;\n+\n+        public void accept(String gameId, Event event) {\n+            this.gameId = gameId;\n+            this.event = event;\n+        }\n+    }\n+\n+    @Test\n+    void doProcess_changeGameStateAndNextPlayer_endTurn() {\n+\n+        //Given\n+        Player player = new Player(\"playerId\", null, null);\n+        List<Card> cards = new ArrayList<>();\n+\n+        Player playerForEvent = new Player(\"playerIdFromEvent\", null, cards);\n+        Game game = new Game(null, Map.of(player.getPlayerId(), player), GameState.START_TURN,\n+                null, null, null);\n+        EndTurnEvent event = new EndTurnEvent(123, null, playerForEvent);\n+\n+        ValueHoldingBiConsumer resultEventConsumer = new ValueHoldingBiConsumer();\n+\n+        //When\n+        endTurnProcessor.doProcess(event, game, resultEventConsumer);\n+\n+        //Then\n+        assertThat(game.getGameState()).isEqualTo(GameState.END_TURN);\n+        assertThat(game.getNextPlayer().get().getPlayerId()).isEqualTo(\"playerId\");\n+        assertThat(resultEventConsumer.event.getType()).isEqualTo(EventType.END_GAME);\n+        assertThat(resultEventConsumer.gameId).isEqualTo(game.getGameId());\n+    }\n+\n+}"
  },
  {
    "sha": "6f27f6bc820e942d416790001cc8b6c04b213b9e",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/JoinGameProcessorTest.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/JoinGameProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/JoinGameProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/JoinGameProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,57 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.EventType;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.Player;\n+import ru.yoursweet667.uno.service.model.event.Event;\n+import ru.yoursweet667.uno.service.model.event.JoinGameEvent;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+\n+public class JoinGameProcessorTest {\n+\n+    private final JoinGameProcessor joinGameProcessor = new JoinGameProcessor();\n+\n+    @Test\n+    void doProcess_joinPlayer() {\n+\n+        //Given\n+        int i = 0;\n+        Map<String, Player> players = new HashMap<>();\n+        Player playerForGame = new Player(\"somePlayerId\", null, null);\n+        Player player = new Player(\"playerId\", null, null);\n+        players.put(playerForGame.getPlayerId(), playerForGame);\n+        Game game = new Game(null, players, null,\n+                null, null, null);\n+\n+        JoinGameEvent event = new JoinGameEvent(123, EventType.JOIN_GAME, player);\n+\n+        ValueHoldingBiConsumer resultEventConsumer = new ValueHoldingBiConsumer();\n+\n+        //When\n+        joinGameProcessor.doProcess(event, game, resultEventConsumer);\n+\n+        //Then\n+        assertThat(game.getPlayers().get(\"playerId\")).isEqualTo(player);\n+        assertThat(resultEventConsumer.event.getType()).isEqualTo(EventType.START_GAME);\n+        assertThat(resultEventConsumer.gameId).isEqualTo(game.getGameId());\n+    }\n+\n+    private static class ValueHoldingBiConsumer implements BiConsumer<String, Event> {\n+\n+        private Event event;\n+        private String gameId;\n+\n+        public void accept(String gameId, Event event) {\n+            this.gameId = gameId;\n+            this.event = event;\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "5e97a53e59ea08dfddca6aab52048f8271495d46",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/LeaveGameProcessorTest.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/LeaveGameProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/LeaveGameProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/LeaveGameProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.Player;\n+import ru.yoursweet667.uno.service.model.event.LeaveGameEvent;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+\n+public class LeaveGameProcessorTest {\n+\n+    private final LeaveGameProcessor leaveGameProcessor = new LeaveGameProcessor();\n+\n+    @Test\n+    void doProcess_gameContainsPlayer_removePlayerFromGame(){\n+\n+        //Given\n+        Map<String, Player> players = new HashMap();\n+        Player player = new Player(\"playerId\", null, null);\n+        players.put(player.getPlayerId(), player);\n+        LeaveGameEvent event = new LeaveGameEvent(123, null, player);\n+        Game game = new Game(null, players, null, null,\n+                null, null);\n+\n+        //When\n+        leaveGameProcessor.doProcess(event, game, null);\n+\n+        //Then\n+        assertThat(game.getPlayers()).doesNotContainKey(player.getPlayerId());\n+\n+\n+    }\n+}"
  },
  {
    "sha": "9fd0d1f4143f2191fd5ada831b7264e87c647087",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/PlayCardProcessorTest.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/PlayCardProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/PlayCardProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/PlayCardProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,41 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.*;\n+import ru.yoursweet667.uno.service.model.event.PlayCardEvent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+\n+public class PlayCardProcessorTest {\n+\n+    private final PlayCardProcessor playCardProcessor = new PlayCardProcessor();\n+\n+    @Test\n+    void doProcess_addCardInGameAndDeleteInPlayer() {\n+\n+        //Given\n+        List<Card> cards = new ArrayList<>();\n+        Card card = new Card(CardType.FIVE, CardColour.BLUE);\n+        cards.add(card);\n+        List<Card> cardsInGame = new ArrayList<>();\n+        Player player = new Player(\"sourcePlayerId\", null, cards);\n+        PlayCardEvent event = new PlayCardEvent(123, \"sourcePlayerId\", null, card);\n+        Game game = new Game(null, Map.of(player.getPlayerId(), player),\n+                null, null, cardsInGame, null);\n+\n+\n+        //When\n+        playCardProcessor.doProcess(event, game, null);\n+\n+        //Then\n+        assertThat(game.getCardsInTheGame()).endsWith(card);\n+        assertThat(game.getPlayers().get(player.getPlayerId()).getCards()).doesNotContain(card);\n+\n+    }\n+\n+}"
  },
  {
    "sha": "516fc5b19c807e8cf181dc5f2c60227f3382af45",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/SkipTurnProcessorTest.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/SkipTurnProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/SkipTurnProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/SkipTurnProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,51 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.EventType;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.Player;\n+import ru.yoursweet667.uno.service.model.event.Event;\n+import ru.yoursweet667.uno.service.model.event.SkipTurnEvent;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+\n+public class SkipTurnProcessorTest {\n+\n+    private final SkipTurnProcessor skipTurnProcessor = new SkipTurnProcessor();\n+\n+    @Test\n+    void doProcess_setCorrectNextPlayer() {\n+\n+        //Given\n+        Player player = new Player(\"playerId\", null, null);\n+        Game game = new Game(null, Map.of(player.getPlayerId(), player), null,\n+                null, null, null);\n+        SkipTurnEvent event = new SkipTurnEvent(123, null, player);\n+\n+        //When\n+\n+        ValueHoldingBiConsumer resultEventConsumer = new ValueHoldingBiConsumer();\n+        skipTurnProcessor.doProcess(event, game, resultEventConsumer);\n+\n+        //Then\n+        assertThat(game.getNextPlayer().get().getPlayerId()).isEqualTo(event.getPlayer().getPlayerId());\n+        assertThat(resultEventConsumer.gameId).isEqualTo(game.getGameId());\n+        assertThat(resultEventConsumer.event.getType()).isEqualTo(EventType.END_TURN);\n+\n+    }\n+\n+    private static class ValueHoldingBiConsumer implements BiConsumer<String, Event> {\n+\n+        private Event event;\n+        private String gameId;\n+\n+        public void accept(String gameId, Event event) {\n+            this.gameId = gameId;\n+            this.event = event;\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1085fb913ea7b54f08b054b46e7048b0c4378161",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartGameProcessorTest.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartGameProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartGameProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartGameProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,85 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import ru.yoursweet667.uno.service.game.CardFactory;\n+import ru.yoursweet667.uno.service.model.*;\n+import ru.yoursweet667.uno.service.model.event.Event;\n+import ru.yoursweet667.uno.service.model.event.StartGameEvent;\n+import ru.yoursweet667.uno.service.model.event.TakeCardsEvent;\n+import ru.yoursweet667.uno.service.model.event.TurnCardOverEvent;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class StartGameProcessorTest {\n+\n+    private final StartGameProcessor startGameProcessor = new StartGameProcessor();\n+\n+    @Mock\n+    private BiConsumer<String, Event> biConsumer;\n+\n+    @BeforeEach\n+    private void beforeEach() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void doProcess_setNextPlayerAndSetGameState() {\n+\n+        //Given\n+        List<Card> cardsFirstPlayer = new ArrayList<>();\n+        List<Card> cardsSecondPlayer = new ArrayList<>();\n+        Player firstPlayer = new Player(\"playerId\", null, cardsFirstPlayer);\n+        Player secondPlayer = new Player(\"playerId\", null, cardsSecondPlayer);\n+        Map<String, Player> players = new HashMap<>();\n+\n+        players.put(firstPlayer.getPlayerId(), firstPlayer);\n+        players.put(secondPlayer.getPlayerId(), secondPlayer);\n+\n+        List<Card> deck = CardFactory.createDeck();\n+\n+        Game game = new Game(\"gameId\", players, null,\n+                deck, null, null);\n+\n+        StartGameEvent event = new StartGameEvent(1, EventType.START_GAME);\n+\n+\n+        List<Card> deckClone = new ArrayList<>(game.getDeck());\n+\n+        //When\n+        startGameProcessor.doProcess(event, game, biConsumer);\n+\n+        //Then\n+        assertThat(game.getGameState()).isEqualTo(GameState.START_TURN);\n+        assertThat(game.getNextPlayer()).isPresent();\n+\n+\n+        for (Player player : game.getPlayers().values()) {\n+\n+            List<Card> cards = new ArrayList<>();\n+\n+            for (int i = 0; i < 7; i++) {\n+\n+                cards.add(deckClone.get(i));\n+                deckClone.remove(i);\n+            }\n+\n+            TakeCardsEvent takeCardsEvent = new TakeCardsEvent\n+                    (event.getEventId()+ 1, EventType.TAKE_CARDS, cards, player);\n+\n+            Mockito.verify(biConsumer).accept(game.getGameId(), takeCardsEvent );\n+        }\n+        TurnCardOverEvent turnCardOverEvent = new TurnCardOverEvent\n+                (event.getEventId() + 2, EventType.TURN_CARD_OVER, game.getDeck().get(0));\n+        Mockito.verify(biConsumer).accept(game.getGameId(), turnCardOverEvent );\n+    }\n+}"
  },
  {
    "sha": "5d408103ec5c5b29c366c4b597b442672aff857c",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartTurnProcessorTest.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartTurnProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartTurnProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/StartTurnProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.Player;\n+import ru.yoursweet667.uno.service.model.event.StartTurnEvent;\n+\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class StartTurnProcessorTest {\n+\n+    private final StartTurnProcessor startTurnProcessor = new StartTurnProcessor();\n+\n+    @Test\n+    void doProcess_setNextPlayer() {\n+\n+        //Given\n+        Player player = new Player(\"playerId\", null, null);\n+        Game game = new Game(null, Map.of(player.getPlayerId(), player), null,\n+                null, null, null);\n+        StartTurnEvent event = new StartTurnEvent(123, null, player);\n+\n+        //When\n+        startTurnProcessor.doProcess(event, game, null);\n+\n+        //Then\n+        assertThat(game.getNextPlayer().get().getPlayerId()).isEqualTo(event.getPlayer().getPlayerId());\n+\n+    }\n+\n+}"
  },
  {
    "sha": "38851adebbe21bdc58626d94ee177a3780461b0c",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TakeCardsProcessorTest.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TakeCardsProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TakeCardsProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TakeCardsProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.Card;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.GameState;\n+import ru.yoursweet667.uno.service.model.Player;\n+import ru.yoursweet667.uno.service.model.event.TakeCardsEvent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TakeCardsProcessorTest {\n+\n+    private final TakeCardsProcessor takeCardsProcessor = new TakeCardsProcessor();\n+\n+    @Test\n+    void doProcess_gameStateInitialising_takeCards() {\n+\n+        //Given\n+        Card card = new Card(null, null);\n+        List<Card> playerCards = new ArrayList<>();\n+        Player player = new Player(null, null, playerCards);\n+        Game game = new Game(null, null, GameState.INITIALISING,\n+                null, null, null);\n+        TakeCardsEvent event = new TakeCardsEvent(123, null, List.of(card), player);\n+\n+        //When\n+        takeCardsProcessor.doProcess(event, game, null);\n+\n+        //Then\n+        assertThat(event.getPlayer().getCards()).contains(card);\n+\n+    }\n+\n+    @Test\n+    void doProcess_anyAllowedGameState_takeCards() {\n+        //Given\n+        Card card = new Card(null, null);\n+        List<Card> playerCards = new ArrayList<>();\n+        Player player = new Player(null, null, playerCards);\n+        Game game = new Game(null, null, GameState.START_TURN,\n+                null, null, null);\n+        TakeCardsEvent event = new TakeCardsEvent(123, null, List.of(card), player);\n+\n+        //When\n+        takeCardsProcessor.doProcess(event, game, null);\n+\n+        //Then\n+        assertThat(event.getPlayer().getCards()).contains(card);\n+\n+    }\n+}"
  },
  {
    "sha": "d7a30ca3104a5040ef3b10bbbf67afd6c4e024a5",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TurnCardOverProcessorTest.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TurnCardOverProcessorTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TurnCardOverProcessorTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/event/processor/TurnCardOverProcessorTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,50 @@\n+package ru.yoursweet667.uno.service.event.processor;\n+\n+import org.junit.jupiter.api.Test;\n+import ru.yoursweet667.uno.service.model.*;\n+import ru.yoursweet667.uno.service.model.event.Event;\n+import ru.yoursweet667.uno.service.model.event.TurnCardOverEvent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TurnCardOverProcessorTest {\n+\n+    private final TurnCardOverProcessor turnCardOverProcessor = new TurnCardOverProcessor();\n+\n+    @Test\n+    void doProcess_addCardInGame() {\n+\n+        //Given\n+        Player nextPlayerInGame = new Player(null, null, null);\n+        List<Card> cardsInTheGame = new ArrayList<>();\n+        Card card = new Card(CardType.FIVE, null);\n+        Game game = new Game(null, null, null,\n+                null, cardsInTheGame, null);\n+        TurnCardOverEvent event = new TurnCardOverEvent(123, null, card);\n+        game.setNextPlayer(nextPlayerInGame);\n+\n+        //When\n+        ValueHoldingBiConsumer resultEventConsumer = new ValueHoldingBiConsumer();\n+        turnCardOverProcessor.doProcess(event, game, resultEventConsumer);\n+\n+        //Then\n+        assertThat(game.getCardsInTheGame()).contains(event.getCard());\n+        assertThat(resultEventConsumer.gameId).isEqualTo(game.getGameId());\n+        assertThat(resultEventConsumer.event.getType()).isEqualTo(EventType.START_TURN);\n+    }\n+\n+    private static class ValueHoldingBiConsumer implements BiConsumer<String, Event> {\n+\n+        private Event event;\n+        private String gameId;\n+\n+        public void accept(String gameId, Event event) {\n+            this.gameId = gameId;\n+            this.event = event;\n+        }\n+    }\n+}"
  },
  {
    "sha": "39bd13cce8a02465cc35a5dc55c41c0abaeb8ddf",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/service/game/GameServiceImplTest.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/game/GameServiceImplTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/service/game/GameServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/service/game/GameServiceImplTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,143 @@\n+package ru.yoursweet667.uno.service.game;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import ru.yoursweet667.uno.dataaccess.game.GameStorage;\n+import ru.yoursweet667.uno.service.model.Game;\n+import ru.yoursweet667.uno.service.model.Player;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class GameServiceImplTest {\n+\n+    private final static String GAME_ID = \"gameId\";\n+    private static final String PLAYER_ID = \"playerId\";\n+\n+    @Mock\n+    private GameStorage storage;\n+\n+    @InjectMocks\n+    private GameServiceImpl gameServiceImpl;\n+\n+    @BeforeEach\n+    private void beforeEach() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void createGame_createsGame() {\n+\n+        //Given+When\n+        Game game = gameServiceImpl.createGame();\n+\n+        //Then\n+        assertThat(game).isNotNull();\n+        assertThat(game.getGameId()).isNotNull();\n+        assertThat(game.getPlayers()).isEmpty();\n+        assertThat(game.getGameState()).isNotNull();\n+        assertThat(game.getDeck()).isNotEmpty();\n+        assertThat(game.getCardsInTheGame()).isEmpty();\n+        assertThat(game.getEvents()).isEmpty();\n+\n+        Mockito.verify(storage).createGame(game);\n+\n+\n+    }\n+\n+    @Test\n+    void addPlayerToGame_addPlayerToLocalGame() {\n+\n+        //Given\n+        Game game = new Game(GAME_ID, new HashMap<>(), null,\n+                null, null, null);\n+\n+        Mockito.when(storage.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        Player player = gameServiceImpl.addPlayerToGame(GAME_ID, \"playerName\");\n+\n+        //Then\n+        assertThat(game.getPlayers()).containsKey(player.getPlayerId());\n+        assertThat(game.getPlayers().get(player.getPlayerId())).isEqualTo(player);\n+\n+    }\n+\n+    @Test\n+    void addPlayerToGame_gameNotFound_exception() {\n+\n+        //Given\n+        Game game = new Game(GAME_ID, new HashMap<>(), null,\n+                null, null, null);\n+\n+        Mockito.when(storage.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        Player player = gameServiceImpl.addPlayerToGame(GAME_ID, \"playerName\");\n+\n+        //Then\n+        assertThat(storage.getGame(GAME_ID)).isNotNull();\n+\n+    }\n+\n+    @Test\n+    void removePlayerFromGame_removePlayer() {\n+\n+        //Given\n+        Game game = new Game(GAME_ID, new HashMap<>(), null,\n+                null, null, null);\n+\n+        Mockito.when(storage.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        Player player = gameServiceImpl.addPlayerToGame(GAME_ID, \"playerName\");\n+\n+        //Then\n+        assertThat(storage.getGame(GAME_ID)).isNotNull();\n+\n+    }\n+\n+    @Test\n+    void removePlayerFromGame_gameNotFound_exception() {\n+\n+        //Given\n+        Map<String, Player> players = new HashMap<>();\n+        Player player = new Player(PLAYER_ID, null, null);\n+        players.put(player.getPlayerId() ,player);\n+\n+        Game game = new Game(GAME_ID, players, null,\n+                null, null, null);\n+\n+        Mockito.when(storage.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        gameServiceImpl.removePlayerFromGame(GAME_ID, PLAYER_ID);\n+\n+        //Then\n+        assertThat(game.getPlayers()).doesNotContainKey(player.getPlayerId());\n+    }\n+\n+    @Test\n+    void getGame_returnGameFromStorage() {\n+\n+        //Given\n+        Game game = new Game(GAME_ID, null, null,\n+                null, null, null);\n+\n+        Mockito.when(storage.getGame(GAME_ID)).thenReturn(Optional.of(game));\n+\n+        //When\n+        Optional<Game> gameFromStorage = gameServiceImpl.getGame(GAME_ID);\n+\n+        //Then\n+        assertThat(gameFromStorage.get().getGameId()).isEqualTo(game.getGameId());\n+    }\n+\n+}"
  },
  {
    "sha": "f48d1a14a5a8d2dd8020c644913e822c65eaf7fd",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/web/controller/EventControllerTest.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/web/controller/EventControllerTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/web/controller/EventControllerTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/web/controller/EventControllerTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.yoursweet667.uno.web.controller;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class EventControllerTest {\n+\n+    EventController eventController = new EventController();\n+\n+    @Test\n+    void createEvent_createsEvent() {\n+\n+        //Given\n+\n+        //When\n+\n+        //Then\n+\n+    }\n+\n+    @Test\n+    void getEvents_getEvents() {\n+\n+        //Given\n+\n+        //When\n+\n+        //Then\n+    }\n+\n+\n+}"
  },
  {
    "sha": "ab615968704785d69d4d443341a122935e9098b5",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/web/controller/GameControllerTest.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/web/controller/GameControllerTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/web/controller/GameControllerTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/web/controller/GameControllerTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.yoursweet667.uno.web.controller;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class GameControllerTest {\n+\n+    GameController gameController = new GameController();\n+\n+\n+\n+}"
  },
  {
    "sha": "3d6bfd77af482cebc81b440a602dda156ffeafbe",
    "filename": "UNO/src/test/java/ru/yoursweet667/uno/web/controller/SettingsControllerTest.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/yoursweet667/UNO_Backend/blob/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/web/controller/SettingsControllerTest.java",
    "raw_url": "https://github.com/yoursweet667/UNO_Backend/raw/4903378fc06f2f47eaa4050e40bf6c180b29ad8d/UNO/src/test/java/ru/yoursweet667/uno/web/controller/SettingsControllerTest.java",
    "contents_url": "https://api.github.com/repos/yoursweet667/UNO_Backend/contents/UNO/src/test/java/ru/yoursweet667/uno/web/controller/SettingsControllerTest.java?ref=4903378fc06f2f47eaa4050e40bf6c180b29ad8d",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.yoursweet667.uno.web.controller;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SettingsControllerTest {\n+\n+    SettingsController settingsController = new SettingsController();\n+\n+    @Test\n+    void getClientSettings_returnSettings() {\n+\n+        //Given\n+\n+        //When\n+\n+        //Then\n+\n+    }\n+}"
  }
]
