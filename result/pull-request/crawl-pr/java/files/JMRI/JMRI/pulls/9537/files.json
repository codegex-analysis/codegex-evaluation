[
  {
    "sha": "0c97048a90f6666499301ee6b8e27f409a465aec",
    "filename": "help/en/releasenotes/current-draft-note.shtml",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/help/en/releasenotes/current-draft-note.shtml",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/help/en/releasenotes/current-draft-note.shtml",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/help/en/releasenotes/current-draft-note.shtml?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -550,8 +550,17 @@\n \n     <h3>Throttle</h3>\n         <a id=\"throttle\" name=\"throttle\"></a>\n-        <ul>\n-            <li></li>\n+        <ul>            \n+            <li>Function Panel now displays all functions buttons at once, with a scrollbar if required</li>\n+            <li>There are as many function buttons as defined by the used throttle</li>\n+            <li>Keyboard shortcuts now available on whole throttle window</li>\n+            <li>Mousewheel speed control now available on whole throttle window</li>\n+            <li>One mousewheel scroll unit will increment or decrement throttle speed by one speed setting increment (depends on the throttle speed step setting)</li>\n+            <li>Use Ctrl key to apply a multiply factor on speed increment/decrement (x5)</li>\n+            <li>Function and Control panels property panes reworked</li>\n+            <li>Ticks on graphical speed slider</li>\n+            <li>Pressing Enter in AddressPanel when entering an address will actually request it</li>\n+            <li>Jythons scripts with direct access to the JMRI UI are now deprecated (AAR105.py, RailDriver.py, USBThrottle.py, xboxThrottle.py). Use USBThrottleAsJynstrument.py instead, or direct Jynstrument in <a href=\"https://github.com/JMRI/JMRI/tree/master/jython/Jynstruments/ThrottleWindowToolBar/USBThrottle.jyn\">jython/Jynstruments/ThrottleWindowToolBar/USBThrottle.jyn</a> , specific drivers are proposed for AAR105 and Raildriver, they may have to be adjusted.</li>\n         </ul>\n \n     <h3>Timetable</h3>"
  },
  {
    "sha": "b1590e3461d9d7e45e2ddc011ba0875a1f97d73d",
    "filename": "java/src/jmri/jmrit/throttle/AddressPanel.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/AddressPanel.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/AddressPanel.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/AddressPanel.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -395,7 +395,12 @@ private void initGUI() {\n             consistAddress = null;\n             changeOfAddress();\n         });\n-\n+        \n+        addrSelector.getTextField().addActionListener(e -> {\n+            consistAddress = null;\n+            changeOfAddress();\n+        });\n+        \n         rosterBox = new RosterEntrySelectorPanel();\n         getRosterEntrySelector().setNonSelectedItem(Bundle.getMessage(\"NoLocoSelected\"));\n         getRosterEntrySelector().setToolTipText(Bundle.getMessage(\"SelectLocoFromRosterTT\"));"
  },
  {
    "sha": "ad9391218c655b51a7fafc35270f7b492c7a69e5",
    "filename": "java/src/jmri/jmrit/throttle/ControlPanel.java",
    "status": "modified",
    "additions": 45,
    "deletions": 296,
    "changes": 341,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ControlPanel.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ControlPanel.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ControlPanel.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,31 +1,18 @@\n package jmri.jmrit.throttle;\n \n-import java.awt.BorderLayout;\n-import java.awt.Dimension;\n-import java.awt.GridBagConstraints;\n-import java.awt.GridBagLayout;\n-import java.awt.Insets;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ComponentAdapter;\n-import java.awt.event.ComponentEvent;\n-import java.awt.event.InputEvent;\n-import java.awt.event.KeyAdapter;\n-import java.awt.event.KeyEvent;\n-import java.awt.event.MouseEvent;\n-import java.awt.event.MouseListener;\n-import java.awt.event.MouseWheelEvent;\n+import java.awt.*;\n+import java.awt.event.*;\n import java.util.EnumSet;\n \n import javax.swing.*;\n import javax.swing.event.ChangeEvent;\n-import javax.swing.event.MouseInputAdapter;\n \n import jmri.*;\n import jmri.jmrit.roster.Roster;\n import jmri.jmrit.roster.RosterEntry;\n import jmri.util.FileUtil;\n import jmri.util.MouseInputAdapterInstaller;\n+\n import org.jdom2.Attribute;\n import org.jdom2.Element;\n \n@@ -38,7 +25,7 @@\n  * @author Bob Jacobsen Copyright (C) 2007\n  * @author Ken Cameron Copyright (C) 2008\n  */\n-public class ControlPanel extends JInternalFrame implements java.beans.PropertyChangeListener, ActionListener, AddressListener {\n+public class ControlPanel extends JInternalFrame implements java.beans.PropertyChangeListener, AddressListener {\n     private DccThrottle throttle;\n \n     private JSlider speedSlider;\n@@ -53,11 +40,12 @@\n     private JPanel topButtonPanel;\n     private boolean internalAdjust = false; // protecting the speed slider, continuous slider and spinner when doing internal adjust\n \n-    private JPopupMenu propertiesPopup;\n+    private JPopupMenu popupMenu;\n+    private ControlPanelPropertyEditor propertyEditor;\n     private JPanel speedControlPanel;\n     private JPanel spinnerPanel;\n     private JPanel sliderPanel;\n-    private JPanel speedSliderContinuousPanel;\n+    private JPanel speedSliderContinuousPanel;    \n \n     private AddressPanel addressPanel; //for access to roster entry\n     /* Constants for speed selection method */\n@@ -84,17 +72,6 @@\n     private final long trackSliderMinIntervalMax = 1000;     // milliseconds\n     private long lastTrackedSliderMovementTime = 0;\n \n-    public int accelerateKey = 107; // numpad +;\n-    public int decelerateKey = 109; // numpad -;\n-    public int accelerateKey1 = KeyEvent.VK_LEFT; // Left Arrow\n-    public int decelerateKey1 = KeyEvent.VK_RIGHT; // Left Arrow\n-    public int accelerateKey2 = KeyEvent.VK_PAGE_UP; // Left Arrow\n-    public int decelerateKey2 = KeyEvent.VK_PAGE_DOWN; // Left Arrow\n-    public int reverseKey = KeyEvent.VK_DOWN;\n-    public int forwardKey = KeyEvent.VK_UP;\n-    public int stopKey = 111; // numpad /\n-    public int idleKey = 106; // numpad *\n-\n     // LocoNet really only has 126 speed steps i.e. 0..127 - 1 for em stop\n     private int intSpeedSteps = 126;\n \n@@ -565,19 +542,6 @@ private void initGUI() {\n         speedSlider.setValue(0);\n         speedSlider.setFocusable(false);\n \n-        // add mouse-wheel support\n-        speedSlider.addMouseWheelListener((MouseWheelEvent e) -> {\n-            if (e.getWheelRotation() > 0) {\n-                for (int i = 0; i < e.getScrollAmount(); i++) {\n-                    decelerate1();\n-                }\n-            } else {\n-                for (int i = 0; i < e.getScrollAmount(); i++) {\n-                    accelerate1();\n-                }\n-            }\n-        });\n-\n         speedSliderContinuous = new JSlider(-intSpeedSteps, intSpeedSteps);\n         if (preferences.isUsingExThrottle() && preferences.isUsingLargeSpeedSlider()) {\n             speedSliderContinuous.setUI(new ControlPanelCustomSliderUI(speedSlider));\n@@ -586,19 +550,6 @@ private void initGUI() {\n         speedSliderContinuous.setOpaque(false);\n         speedSliderContinuous.setFocusable(false);\n \n-        // add mouse-wheel support\n-        speedSliderContinuous.addMouseWheelListener((MouseWheelEvent e) -> {\n-            if (e.getWheelRotation() > 0) {\n-                for (int i = 0; i < e.getScrollAmount(); i++) {\n-                    decelerate1();\n-                }\n-            } else {\n-                for (int i = 0; i < e.getScrollAmount(); i++) {\n-                    accelerate1();\n-                }\n-            }\n-        });\n-\n         speedSpinner = new JSpinner();\n \n         speedSpinnerModel = new SpinnerNumberModel(0, 0, intSpeedSteps, 1);\n@@ -616,9 +567,7 @@ private void initGUI() {\n         reverseButton = new JRadioButton();\n         setupButton(reverseButton, preferences, \"resources/icons/throttles/dirBckOff.png\",\n             \"resources/icons/throttles/dirBckOn.png\", \"ButtonReverse\");\n-\n-        propertiesPopup = new JPopupMenu();\n-\n+        \n         layoutSliderPanel();\n         speedControlPanel.add(sliderPanel);\n         speedSlider.setOrientation(JSlider.VERTICAL);\n@@ -788,29 +737,6 @@ private void initGUI() {\n             stop();\n         });\n \n-        stopButton.addMouseListener(\n-                new MouseListener() {\n-                    @Override\n-                    public void mousePressed(MouseEvent e) {\n-                        stop();\n-                    }\n-\n-                    @Override\n-                    public void mouseExited(MouseEvent e) {\n-                    }\n-\n-                    @Override\n-                    public void mouseEntered(MouseEvent e) {\n-                    }\n-\n-                    @Override\n-                    public void mouseReleased(MouseEvent e) {\n-                    }\n-\n-                    @Override\n-                    public void mouseClicked(MouseEvent e) {\n-                    }\n-                });\n         idleButton = new JButton();\n         setupButton(idleButton, preferences, \"resources/icons/throttles/stop.png\",\n             \"resources/icons/throttles/stop24.png\", \"ButtonIdle\");\n@@ -837,20 +763,12 @@ public void componentResized(ComponentEvent e) {\n         layoutButtonPanel();\n         layoutTopButtonPanel();\n \n-        JMenuItem propertiesItem = new JMenuItem(Bundle.getMessage(\"ControlPanelProperties\"));\n-        propertiesItem.addActionListener(this);\n-        propertiesPopup.add(propertiesItem);\n-\n         // Add a mouse listener all components to trigger the popup menu.\n-        MouseInputAdapter popupListener = new PopupListener(propertiesPopup, this);\n-        MouseInputAdapterInstaller.installMouseInputAdapterOnAllComponents(popupListener, this);\n-\n-        // Install the Key bindings on all Components\n-        KeyListenerInstaller.installKeyListenerOnAllComponents(new ControlPadKeyListener(), this);\n+        MouseInputAdapterInstaller.installMouseListenerOnAllComponents(new PopupListener(), this);\n \n         // set by default which speed selection method is on top\n         setSpeedController(_displaySlider);\n-    }\n+    }    \n \n     /**\n      * Perform an emergency stop.\n@@ -894,143 +812,6 @@ private void changeOrientation() {\n         }\n     }\n \n-    /* Accelerate of 1\n-     *\n-     */\n-    private void accelerate1() {\n-        if (speedSlider.isEnabled()) {\n-            if (speedSlider.getValue() != speedSlider.getMaximum()) {\n-                speedSlider.setValue(speedSlider.getValue() + 1);\n-            }\n-        } else if (speedSpinner != null && speedSpinner.isEnabled()) {\n-            if (((Integer) speedSpinner.getValue()) < ((Integer) speedSpinnerModel.getMaximum())\n-                    && ((Integer) speedSpinner.getValue()) >= ((Integer) speedSpinnerModel.getMinimum())) {\n-                speedSpinner.setValue(((Integer) speedSpinner.getValue()) + 1);\n-            }\n-        } else if (speedSliderContinuous != null && speedSliderContinuous.isEnabled()) {\n-            if (speedSliderContinuous.getValue() != speedSliderContinuous.getMaximum()) {\n-                speedSliderContinuous.setValue(speedSliderContinuous.getValue() + 1);\n-            }\n-        }\n-    }\n-\n-    /* Accelerate of 10\n-     *\n-     */\n-    private void accelerate10() {\n-        if (speedSlider.isEnabled()) {\n-            if (speedSlider.getValue() != speedSlider.getMaximum()) {\n-                speedSlider.setValue(speedSlider.getValue() + 10);\n-            }\n-        } else if (speedSpinner != null && speedSpinner.isEnabled()) {\n-            if (((Integer) speedSpinner.getValue()) < ((Integer) speedSpinnerModel.getMaximum())\n-                    && ((Integer) speedSpinner.getValue()) >= ((Integer) speedSpinnerModel.getMinimum())) {\n-                Integer speedvalue = ((Integer) speedSpinner.getValue()) + 10;\n-                if (speedvalue < ((Integer) speedSpinnerModel.getMaximum())) {\n-                    speedSpinner.setValue(speedvalue);\n-                } else {\n-                    speedSpinner.setValue(speedSpinnerModel.getMaximum());\n-                }\n-            }\n-        } else if (speedSliderContinuous != null && speedSliderContinuous.isEnabled()) {\n-            if (speedSliderContinuous.getValue() != speedSliderContinuous.getMaximum()) {\n-                speedSliderContinuous.setValue(speedSliderContinuous.getValue() + 10);\n-            }\n-        }\n-    }\n-\n-    /* Decelerate of 1\n-     *\n-     */\n-    private void decelerate1() {\n-        if (speedSlider.isEnabled()) {\n-            if (speedSlider.getValue() != speedSlider.getMinimum()) {\n-                speedSlider.setValue(speedSlider.getValue() - 1);\n-            }\n-        } else if (speedSpinner != null && speedSpinner.isEnabled()) {\n-            if (((Integer) speedSpinner.getValue()) <= ((Integer) speedSpinnerModel.getMaximum())\n-                    && ((Integer) speedSpinner.getValue()) > ((Integer) speedSpinnerModel.getMinimum())) {\n-                speedSpinner.setValue(((Integer) speedSpinner.getValue()) - 1);\n-            }\n-        } else if (speedSliderContinuous != null && speedSliderContinuous.isEnabled()) {\n-            if (speedSliderContinuous.getValue() != speedSliderContinuous.getMinimum()) {\n-                speedSliderContinuous.setValue(speedSliderContinuous.getValue() - 1);\n-            }\n-        }\n-    }\n-\n-    /* Decelerate of 10\n-     *\n-     */\n-    private void decelerate10() {\n-        if (speedSlider.isEnabled()) {\n-            if (speedSlider.getValue() != speedSlider.getMinimum()) {\n-                speedSlider.setValue(speedSlider.getValue() - 10);\n-            }\n-        } else if (speedSpinner != null && speedSpinner.isEnabled()) {\n-            if (((Integer) speedSpinner.getValue()) <= ((Integer) speedSpinnerModel.getMaximum())\n-                    && ((Integer) speedSpinner.getValue()) > ((Integer) speedSpinnerModel.getMinimum())) {\n-                Integer speedvalue = ((Integer) speedSpinner.getValue()) - 10;\n-                if (speedvalue > ((Integer) speedSpinnerModel.getMinimum())) {\n-                    speedSpinner.setValue(speedvalue);\n-                } else {\n-                    speedSpinner.setValue(speedSpinnerModel.getMinimum());\n-                }\n-            }\n-        } else if (speedSliderContinuous != null && speedSliderContinuous.isEnabled()) {\n-            if (speedSliderContinuous.getValue() != speedSliderContinuous.getMinimum()) {\n-                speedSliderContinuous.setValue(speedSliderContinuous.getValue() - 10);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * A KeyAdapter that listens for the keys that work the control pad buttons\n-     *\n-     * @author glen\n-     */\n-    class ControlPadKeyListener extends KeyAdapter {\n-\n-        /**\n-         * Description of the Method\n-         *\n-         * @param e Description of the Parameter\n-         */\n-        @Override\n-        public void keyPressed(KeyEvent e) {\n-            if (e.isAltDown() || e.isControlDown() || e.isMetaDown() || e.isShiftDown()) {\n-                return; // we don't want speed change while changing Frame/Panel/Window\n-            }\n-            if ((e.getKeyCode() == accelerateKey) || (e.getKeyCode() == accelerateKey1)) {\n-                accelerate1();\n-            } else if (e.getKeyCode() == accelerateKey2) {\n-                accelerate10();\n-            } else if ((e.getKeyCode() == decelerateKey) || (e.getKeyCode() == decelerateKey1)) {\n-                decelerate1();\n-            } else if (e.getKeyCode() == decelerateKey2) {\n-                decelerate10();\n-            } else if (e.getKeyCode() == forwardKey) {\n-                if (forwardButton.isEnabled()) {\n-                    forwardButton.doClick();\n-                }\n-            } else if (e.getKeyCode() == reverseKey) {\n-                if (reverseButton.isEnabled()) {\n-                    reverseButton.doClick();\n-                }\n-            } else if (e.getKeyCode() == stopKey) {\n-                if (speedSlider.isEnabled()\n-                        || (speedSpinner != null && speedSpinner.isEnabled())) {\n-                    stop();\n-                }\n-            } else if (e.getKeyCode() == idleKey) {\n-                if (speedSlider.isEnabled()\n-                        || (speedSpinner != null && speedSpinner.isEnabled())) {\n-                    speedSlider.setValue(0);\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * Intended for throttle scripting\n      * \n@@ -1052,23 +833,6 @@ public void setForwardDirection(boolean fwd) {\n         }\n     }\n \n-    /**\n-     * Intended for throttle scripting\n-     * \n-     * @return The speed slider.\n-     */\n-    public JSlider getSpeedSlider() {\n-        return speedSlider;\n-    }\n-\n-    /**\n-     * Intended for throttle scripting and testing.\n-     *\n-     * @return The continuous (shunting) speed slider.\n-     */\n-    public JSlider getSpeedSliderContinuous() {\n-        return speedSliderContinuous;\n-    }\n \n     // update the state of this panel if any of the properties change\n     @Override\n@@ -1114,79 +878,64 @@ public void propertyChange(java.beans.PropertyChangeEvent e) {\n         log.debug(\"Property change event received {} / {}\", e.getPropertyName(), e.getNewValue());\n     }\n \n-    /**\n-     * Handle the selection from the popup menu.\n-     *\n-     * @param e The ActionEvent causing the action.\n-     */\n-    @Override\n-    public void actionPerformed(ActionEvent e) {\n-        ControlPanelPropertyEditor editor\n-                = new ControlPanelPropertyEditor(this);\n-        editor.setVisible(true);\n-    }\n-\n     /**\n      * A PopupListener to handle mouse clicks and releases. Handles the popup\n      * menu.\n      */\n-    static class PopupListener extends MouseInputAdapter {\n-\n-        private final JPopupMenu _menu;\n-        private final JInternalFrame parentFrame;\n-\n-        PopupListener(JPopupMenu menu, JInternalFrame parent) {\n-            parentFrame = parent;\n-            _menu = menu;\n+    private class PopupListener extends MouseAdapter {\n+        /**\n+         * If the event is the popup trigger, which is dependent on the\n+         * platform, present the popup menu.\n+         * @param e The MouseEvent causing the action.\n+         */\n+        @Override\n+        public void mouseClicked(MouseEvent e) {\n+            checkTrigger(e);\n         }\n-\n+        \n         /**\n          * If the event is the popup trigger, which is dependent on the\n-         * platform, present the popup menu. Otherwise change the state of the\n-         * function depending on the locking state of the button.\n-         *\n+         * platform, present the popup menu.\n          * @param e The MouseEvent causing the action.\n          */\n         @Override\n         public void mousePressed(MouseEvent e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"pressed {} {} {}\" + (\" \" + MouseEvent.ALT_DOWN_MASK + \"/\" + MouseEvent.META_DOWN_MASK + \"/\" + MouseEvent.CTRL_DOWN_MASK), e.getModifiersEx() & MouseEvent.BUTTON1_DOWN_MASK, e.isPopupTrigger(), e.getModifiersEx() & (MouseEvent.ALT_DOWN_MASK + MouseEvent.META_DOWN_MASK + MouseEvent.CTRL_DOWN_MASK));\n-            }\n-            if (e.isPopupTrigger() && parentFrame.isSelected()) {\n-                try {\n-                    _menu.show(e.getComponent(),\n-                            e.getX(), e.getY());\n-                } catch (java.awt.IllegalComponentStateException cs) {\n-                    // Message sent to a hidden component, so we need\n-                }\n-                e.consume();\n-            }\n+            checkTrigger( e);\n         }\n \n         /**\n          * If the event is the popup trigger, which is dependent on the\n-         * platform, present the popup menu. Otherwise change the state of the\n-         * function depending on the locking state of the button.\n-         *\n+         * platform, present the popup menu.\n          * @param e The MouseEvent causing the action.\n          */\n         @Override\n         public void mouseReleased(MouseEvent e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"released {} {} {}\", e.getModifiersEx() & MouseEvent.BUTTON1_DOWN_MASK, e.isPopupTrigger(), e.getModifiersEx() & (MouseEvent.ALT_DOWN_MASK + InputEvent.META_DOWN_MASK + MouseEvent.CTRL_DOWN_MASK));\n-            }\n+            checkTrigger( e);\n+        }\n+        \n+        private void checkTrigger( MouseEvent e) {\n             if (e.isPopupTrigger()) {\n-                try {\n-                    _menu.show(e.getComponent(),\n-                            e.getX(), e.getY());\n-                } catch (java.awt.IllegalComponentStateException cs) {\n-                    // Message sent to a hidden component, so we need\n-                }\n-\n-                e.consume();\n+                initPopupMenu();\n+                popupMenu.show(e.getComponent(), e.getX(), e.getY());\n             }\n         }\n     }\n+    \n+    private void initPopupMenu() {\n+        if (popupMenu == null) {               \n+            JMenuItem propertiesMenuItem = new JMenuItem(Bundle.getMessage(\"ControlPanelProperties\"));\n+            propertiesMenuItem.addActionListener((ActionEvent e) -> {\n+                if (propertyEditor == null) {\n+                    propertyEditor = new ControlPanelPropertyEditor(this);                    \n+                }\n+                propertyEditor.setLocation(MouseInfo.getPointerInfo().getLocation());\n+                propertyEditor.resetProperties();\n+                propertyEditor.setVisible(true);\n+            });\n+            popupMenu = new JPopupMenu();        \n+            popupMenu.add(propertiesMenuItem);\n+        }\n+    }\n \n     /**\n      * Collect the prefs of this object into XML Element"
  },
  {
    "sha": "a8a0a496bda9ea3e6ef8e469832b2707e367654b",
    "filename": "java/src/jmri/jmrit/throttle/ControlPanelCustomSliderUI.java",
    "status": "modified",
    "additions": 35,
    "deletions": 33,
    "changes": 68,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ControlPanelCustomSliderUI.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ControlPanelCustomSliderUI.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ControlPanelCustomSliderUI.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -20,12 +20,12 @@\n     // Color are coming from the Tango themes color palette (as well as icons on the Throttle window, for look consistency)\n     private final static Color TRACK_COLOR_BACK = new Color(0x88, 0x8a, 0x85, 0x88);\n     private final static Color TRACK_COLOR_FRONT = new Color(0xf5, 0x79, 0x00, 0xCC);\n-//    private final static Color TRACK_COLOR_TICKS = new Color(0x888a85);\n+    private final static Color TRACK_COLOR_FRONT_DISABLED = new Color(0xf5, 0xf5, 0xf5, 0xCC);\n+    private final static Color TRACK_COLOR_TICKS = new Color(0x888a85);\n     private final static Color THUMB_INNER_COLOR_STOP = new Color(0xcc0000);\n     private final static Color THUMB_INNER_COLOR_RUN = new Color(0xd7d27A);\n+    private final static Color THUMB_INNER_COLOR_DISABLED = new Color(0x101010);\n     private final static Color THUMB_CONTOUR_COLOR = new Color(0x555753);\n-//    private final static Color ZERO_CONTOUR_COLOR = new Color(0x555753);    \n-//    private final static int ZERO_THICKNESS = 5;\n     \n     public ControlPanelCustomSliderUI(JSlider b) {\n         super(b);\n@@ -59,26 +59,31 @@ public void paintTrack(Graphics g) {\n         // Track back rectangle\n         g2d.setPaint(TRACK_COLOR_BACK);\n         g2d.fillRect(trackRect.x, trackRect.y, trackRect.width, trackRect.height);\n-/*        // Track ticks \n-        g2d.setPaint(TRACK_COLOR_TICKS);\n+        // Track ticks                 \n+        int[] ticksAt = { 3*slider.getMinimum()/4, slider.getMinimum()/2 , slider.getMinimum()/4, 0, slider.getMaximum()/4, slider.getMaximum()/2, 3*slider.getMaximum()/4 };        \n         // only if it fits \n-        if (slider.getOrientation() == SwingConstants.VERTICAL && trackRect.height > (slider.getMaximum()-slider.getMinimum())*2) {\n-            for (int n = 0 ; n<slider.getMaximum()-slider.getMinimum() ; n++) { \n-                g2d.drawLine( trackRect.x, \n-                        trackRect.y+trackRect.height - n*trackRect.height / (slider.getMaximum()-slider.getMinimum()), \n-                        trackRect.x+trackRect.width, \n-                        trackRect.y+trackRect.height - n*trackRect.height / (slider.getMaximum()-slider.getMinimum()));\n+        g2d.setPaint(TRACK_COLOR_TICKS);\n+        if (slider.getOrientation() == SwingConstants.VERTICAL && trackRect.height > ticksAt.length*8) {\n+            for (int n : ticksAt ) {\n+                g2d.drawLine( trackRect.x , \n+                        trackRect.y + trackRect.height / ((slider.getMaximum()-slider.getMinimum())/(slider.getMaximum())) - n*trackRect.height / (slider.getMaximum()-slider.getMinimum()) , \n+                        trackRect.x + trackRect.width-1, \n+                        trackRect.y + trackRect.height / ((slider.getMaximum()-slider.getMinimum())/(slider.getMaximum())) - n*trackRect.height / (slider.getMaximum()-slider.getMinimum()) );\n             }\n-        } else if (slider.getOrientation() == SwingConstants.HORIZONTAL && trackRect.width > (slider.getMaximum()-slider.getMinimum())*2) {\n-            for (int n = 0 ; n<slider.getMaximum()-slider.getMinimum() ; n++) { \n-                g2d.drawLine( trackRect.x + n*trackRect.width / (slider.getMaximum()-slider.getMinimum()), \n+        } else if (slider.getOrientation() == SwingConstants.HORIZONTAL && trackRect.width  > ticksAt.length*8) {\n+           for (int n : ticksAt ) {\n+                g2d.drawLine( trackRect.x + trackRect.width - trackRect.width / ((slider.getMaximum()-slider.getMinimum())/(slider.getMaximum())) + n*trackRect.width / (slider.getMaximum()-slider.getMinimum()) , \n                         trackRect.y, \n-                        trackRect.x + n*trackRect.width / (slider.getMaximum()-slider.getMinimum()), \n-                        trackRect.y+trackRect.height );\n+                        trackRect.x + trackRect.width - trackRect.width / ((slider.getMaximum()-slider.getMinimum())/(slider.getMaximum())) + n*trackRect.width / (slider.getMaximum()-slider.getMinimum()),\n+                        trackRect.y + trackRect.height );\n             }            \n-        }*/\n+        }\n         // Track front\n-        g2d.setPaint(TRACK_COLOR_FRONT);        \n+        if (slider.isEnabled()) {\n+            g2d.setPaint(TRACK_COLOR_FRONT);\n+        } else {\n+            g2d.setPaint(TRACK_COLOR_FRONT_DISABLED);\n+        }\n         if (slider.getOrientation() == SwingConstants.HORIZONTAL) {\n             if (slider.getMinimum()<0 && slider.getMaximum()>0) {\n                 double doublerel0Pos = Math.abs((double)slider.getMinimum()) / ((double)slider.getMaximum() - (double)slider.getMinimum());\n@@ -89,9 +94,6 @@ public void paintTrack(Graphics g) {\n                 } else {\n                     g2d.fillRect( (int)Math.round(x0+widthRect), trackRect.y, (int)Math.round(-widthRect), trackRect.height);\n                 }\n-                // Zero marker\n-//                g2d.setPaint(ZERO_CONTOUR_COLOR);\n-//                g2d.fillRect( (int)Math.round(x0- ZERO_THICKNESS/2) , trackRect.y+ZERO_THICKNESS/2, ZERO_THICKNESS, trackRect.height-ZERO_THICKNESS );     \n             } else {           \n                 g2d.fillRect(trackRect.x, trackRect.y, thumbRect.x-thumbRect.width/2, trackRect.height);\n             }\n@@ -104,13 +106,9 @@ public void paintTrack(Graphics g) {\n                     g2d.fillRect( trackRect.x, (int)Math.round(y0), trackRect.width, (int)Math.round(heightRect));\n                 } else {\n                     g2d.fillRect( trackRect.x, (int)Math.round(y0+heightRect), trackRect.width, (int)Math.round(-heightRect));\n-                }\n-                // Zero marker\n-//                g2d.setPaint(ZERO_CONTOUR_COLOR);\n-//                g2d.fillRect( trackRect.x+ZERO_THICKNESS/2, (int)Math.round(y0- ZERO_THICKNESS/2), trackRect.width-ZERO_THICKNESS, ZERO_THICKNESS );     \n-                \n+                }                \n             } else {\n-                g2d.fillRect(trackRect.x, thumbRect.y+thumbRect.height/2, trackRect.width, trackRect.height - thumbRect.y+thumbRect.height/2 - trackRect.y  );\n+                g2d.fillRect(trackRect.x, thumbRect.y+thumbRect.height/2, trackRect.width, trackRect.height - thumbRect.y+thumbRect.height - trackRect.y  );\n             }\n         }\n         g2d.setPaint(oldPaint);\n@@ -122,18 +120,22 @@ public void paintThumb(Graphics g) {\n             return;\n         }\n         Graphics2D g2d = (Graphics2D) g;\n-        int x1 = thumbRect.x + 2;\n-        int x2 = thumbRect.x + thumbRect.width - 2;\n+        int x1 = thumbRect.x + 3;\n+        int x2 = thumbRect.x + thumbRect.width - 5;\n         GeneralPath shape = new GeneralPath(GeneralPath.WIND_EVEN_ODD);\n         shape.moveTo(x1, thumbRect.y+1);        \n         shape.lineTo(x2, thumbRect.y+1);\n         shape.lineTo(x2, thumbRect.y+thumbRect.height-2);\n         shape.lineTo(x1, thumbRect.y+thumbRect.height-2);\n         shape.closePath();\n-        if (slider.getValue()==0) {\n-            g2d.setPaint(THUMB_INNER_COLOR_STOP);\n-        } else {             \n-            g2d.setPaint( new Color(THUMB_INNER_COLOR_RUN.getRed() - Math.abs(slider.getValue())*100/slider.getMaximum(),THUMB_INNER_COLOR_RUN.getGreen(), THUMB_INNER_COLOR_RUN.getBlue() - Math.abs(slider.getValue()*100/slider.getMaximum()) ));\n+        if (slider.isEnabled()) {\n+            if (slider.getValue()==0) {\n+                g2d.setPaint(THUMB_INNER_COLOR_STOP);\n+            } else {             \n+                g2d.setPaint( new Color(THUMB_INNER_COLOR_RUN.getRed() - Math.abs(slider.getValue())*100/slider.getMaximum(),THUMB_INNER_COLOR_RUN.getGreen(), THUMB_INNER_COLOR_RUN.getBlue() - Math.abs(slider.getValue()*100/slider.getMaximum()) ));\n+            }\n+        } else {\n+            g2d.setPaint(THUMB_INNER_COLOR_DISABLED);\n         }\n         g2d.fill(shape);\n         Stroke old = g2d.getStroke();"
  },
  {
    "sha": "9f59c46760995e461483e19b00648a8fc9c0971d",
    "filename": "java/src/jmri/jmrit/throttle/ControlPanelPropertyEditor.java",
    "status": "modified",
    "additions": 62,
    "deletions": 72,
    "changes": 134,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ControlPanelPropertyEditor.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ControlPanelPropertyEditor.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ControlPanelPropertyEditor.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -6,7 +6,6 @@\n import java.awt.GridLayout;\n import java.awt.Insets;\n import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n import javax.swing.ButtonGroup;\n import javax.swing.JButton;\n import javax.swing.JCheckBox;\n@@ -17,13 +16,13 @@\n import javax.swing.JTextField;\n \n /**\n- * A very specific dialog for editing the properties of a FunctionButton object.\n+ * A very specific dialog for editing the properties of a ControlPanel object.\n  *\n  * @author Paul Bender Copyright (C) 2005\n  */\n public class ControlPanelPropertyEditor extends JDialog {\n \n-    private ControlPanel control;\n+    private final ControlPanel control;\n \n     private JRadioButton displaySlider; // display slider from 0 to 100\n     private JRadioButton displaySliderContinuous; // display slider from -100 to 0 to 100\n@@ -41,11 +40,11 @@\n     public ControlPanelPropertyEditor(ControlPanel panel) {\n         control = panel;\n         initGUI();\n-        pack();\n+        resetProperties();        \n     }\n \n     /**\n-     * Create, initilize, and place the GUI objects.\n+     * Create, and place the GUI objects.\n      */\n     private void initGUI() {\n         this.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);\n@@ -80,8 +79,6 @@ private void initGUI() {\n         modeSelectionButtons.add(displaySteps);\n         modeSelectionButtons.add(displaySliderContinuous);\n \n-        _displaySlider = control.getDisplaySlider();\n-\n         constraints.anchor = GridBagConstraints.CENTER;\n         constraints.gridy = 1;\n         propertyPanel.add(displaySlider, constraints);\n@@ -94,94 +91,67 @@ private void initGUI() {\n \n         trackBox = new JCheckBox(Bundle.getMessage(\"CheckBoxTrackSliderInRealTime\"));\n         constraints.gridy = 4;\n-        trackBox.setSelected(control.getTrackSlider());\n         propertyPanel.add(trackBox, constraints);\n         \n         speedStepBoxVisibleBox = new JCheckBox(Bundle.getMessage(\"CheckBoxHideSpeedStepSelector\"));\n         constraints.gridy = 5;\n-        speedStepBoxVisibleBox.setSelected(control.getHideSpeedStep() );\n         propertyPanel.add(speedStepBoxVisibleBox, constraints);                \n \n         JLabel functionSwitchLabel = new JLabel(Bundle.getMessage(\"SwitchSliderOnFunction\"));\n         functionSwitchSlider = new JTextField(4);\n-        functionSwitchSlider.setText(control.getSwitchSliderFunction());\n         constraints.gridy = 6;\n         constraints.gridx = 0;\n         propertyPanel.add(functionSwitchLabel, constraints);\n         constraints.gridx = 1;\n         propertyPanel.add(functionSwitchSlider, constraints);\n \n-        displaySlider.setSelected(_displaySlider == ControlPanel.SLIDERDISPLAY);\n-        displaySteps.setSelected(_displaySlider == ControlPanel.STEPDISPLAY);\n-        displaySliderContinuous.setSelected(_displaySlider == ControlPanel.SLIDERDISPLAYCONTINUOUS);\n+        displaySlider.addActionListener((ActionEvent e) -> {\n+            displaySlider.setSelected(true);\n+            displaySteps.setSelected(false);\n+            displaySliderContinuous.setSelected(false);\n+            _displaySlider = ControlPanel.SLIDERDISPLAY;\n+        });\n \n-        displaySlider.addActionListener(\n-                new ActionListener() {\n-                    @Override\n-                    public void actionPerformed(ActionEvent e) {\n-                        displaySlider.setSelected(true);\n-                        displaySteps.setSelected(false);\n-                        displaySliderContinuous.setSelected(false);\n-                        _displaySlider = ControlPanel.SLIDERDISPLAY;\n-                    }\n-                });\n-\n-        displaySteps.addActionListener(\n-                new ActionListener() {\n-                    @Override\n-                    public void actionPerformed(ActionEvent e) {\n-                        displaySlider.setSelected(false);\n-                        displaySteps.setSelected(true);\n-                        displaySliderContinuous.setSelected(false);\n-                        _displaySlider = ControlPanel.STEPDISPLAY;\n-                    }\n-                });\n-\n-        displaySliderContinuous.addActionListener(\n-                new ActionListener() {\n-                    @Override\n-                    public void actionPerformed(ActionEvent e) {\n-                        displaySlider.setSelected(false);\n-                        displaySteps.setSelected(false);\n-                        displaySliderContinuous.setSelected(true);\n-                        _displaySlider = ControlPanel.SLIDERDISPLAYCONTINUOUS;\n-                    }\n-                });\n-\n-        // disable the speed controls if the control panel says they \n-        // aren't possible\n-        displaySlider.setEnabled(control.\n-                isSpeedControllerAvailable(ControlPanel.SLIDERDISPLAY));\n-        displaySteps.setEnabled(control.\n-                isSpeedControllerAvailable(ControlPanel.STEPDISPLAY));\n-        displaySliderContinuous.setEnabled(control.\n-                isSpeedControllerAvailable(ControlPanel.SLIDERDISPLAYCONTINUOUS));\n+        displaySteps.addActionListener((ActionEvent e) -> {\n+            displaySlider.setSelected(false);\n+            displaySteps.setSelected(true);\n+            displaySliderContinuous.setSelected(false);\n+            _displaySlider = ControlPanel.STEPDISPLAY;\n+        });\n \n+        displaySliderContinuous.addActionListener((ActionEvent e) -> {\n+            displaySlider.setSelected(false);\n+            displaySteps.setSelected(false);\n+            displaySliderContinuous.setSelected(true);\n+            _displaySlider = ControlPanel.SLIDERDISPLAYCONTINUOUS;\n+        });\n+        \n         JPanel buttonPanel = new JPanel();\n         buttonPanel.setLayout(new GridLayout(1, 2, 4, 4));\n \n-        JButton saveButton = new JButton(Bundle.getMessage(\"ButtonOK\"));\n-        saveButton.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                saveProperties();\n-            }\n+        JButton applyButton = new JButton(Bundle.getMessage(\"ButtonApply\"));\n+        applyButton.addActionListener((ActionEvent e) -> {\n+            saveProperties();\n         });\n-\n-        JButton cancelButton = new JButton(Bundle.getMessage(\"ButtonCancel\"));\n-        cancelButton.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                finishEdit();\n-            }\n+                \n+        JButton resetButton = new JButton(Bundle.getMessage(\"ButtonReset\"));\n+        resetButton.addActionListener((ActionEvent e) -> {\n+            resetProperties();           \n+        });        \n+        \n+        JButton closeButton = new JButton(Bundle.getMessage(\"ButtonClose\"));\n+        closeButton.addActionListener((ActionEvent e) -> {\n+            finishEdit();\n         });\n \n-        buttonPanel.add(saveButton);\n-        buttonPanel.add(cancelButton);\n-\n+        buttonPanel.add(resetButton);\n+        buttonPanel.add(closeButton);\n+        buttonPanel.add(applyButton);\n+        \n         mainPanel.add(propertyPanel, BorderLayout.CENTER);\n         mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n-\n+        \n+        pack();        \n     }\n \n     /**\n@@ -193,7 +163,6 @@ private void saveProperties() {\n             control.setSwitchSliderFunction(functionSwitchSlider.getText());\n             control.setSpeedController(_displaySlider);\n             control.setHideSpeedStep(speedStepBoxVisibleBox.isSelected());\n-            finishEdit();\n         }\n     }\n \n@@ -204,6 +173,27 @@ private void finishEdit() {\n         this.setVisible(false);\n     }\n \n+    /**\n+     * Update values from the controlPanel\n+     */\n+    public void resetProperties() {\n+        // type of slider\n+        _displaySlider = control.getDisplaySlider();        \n+        displaySlider.setSelected(_displaySlider == ControlPanel.SLIDERDISPLAY);\n+        displaySteps.setSelected(_displaySlider == ControlPanel.STEPDISPLAY);\n+        displaySliderContinuous.setSelected(_displaySlider == ControlPanel.SLIDERDISPLAYCONTINUOUS);\n+        // disable the speed controls if the control panel says they aren't possible\n+        displaySlider.setEnabled(control.isSpeedControllerAvailable(ControlPanel.SLIDERDISPLAY));\n+        displaySteps.setEnabled(control.isSpeedControllerAvailable(ControlPanel.STEPDISPLAY));\n+        displaySliderContinuous.setEnabled(control.isSpeedControllerAvailable(ControlPanel.SLIDERDISPLAYCONTINUOUS));\n+        // other propertiess\n+        trackBox.setSelected(control.getTrackSlider());\n+        speedStepBoxVisibleBox.setSelected(control.getHideSpeedStep() );\n+        functionSwitchSlider.setText(control.getSwitchSliderFunction());\n+    }\n+\n+    \n+    \n     /**\n      * Verify the data on the dialog. If invalid, notify user of errors. This\n      * only needs to do something if we add something other than speed control"
  },
  {
    "sha": "a72c65b4ba354a3b8f95518ec68cd90709cb998a",
    "filename": "java/src/jmri/jmrit/throttle/FunctionButton.java",
    "status": "modified",
    "additions": 51,
    "deletions": 74,
    "changes": 125,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/FunctionButton.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/FunctionButton.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/FunctionButton.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,29 +1,29 @@\n package jmri.jmrit.throttle;\n \n-import java.awt.Color;\n-import java.awt.Dimension;\n-import java.awt.Font;\n-import java.awt.Insets;\n+import java.awt.*;\n import java.awt.event.ActionEvent;\n import java.awt.event.MouseAdapter;\n import java.awt.event.MouseEvent;\n import java.io.File;\n import java.util.ArrayList;\n+\n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n import javax.swing.*;\n+\n import jmri.Throttle;\n import jmri.util.FileUtil;\n import jmri.util.swing.ResizableImagePanel;\n import jmri.util.swing.ToggleOrPressButtonModel;\n+\n import org.jdom2.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * A JButton to activate functions on the decoder. FunctionButtons have a\n- * right-click popup menu with several configuration options:\n- * <ul>\n+ right-click popupMenu menu with several configuration options:\n+ <ul>\n  * <li> Set the text\n  * <li> Set the locking state\n  * <li> Set visibility\n@@ -42,23 +42,19 @@\n     private boolean dirty = false;\n     private boolean isImageOK = false;\n     private boolean isSelectedImageOK = false;\n-    private int actionKey;\n     private String buttonLabel;\n-    private final JPopupMenu popup;\n+    private JPopupMenu popupMenu;\n+    private FunctionButtonPropertyEditor editor ;\n     private String iconPath;\n     private String selectedIconPath;\n     private ToggleOrPressButtonModel _model;\n     private Throttle _throttle;\n \n-    final static int BUT_HGHT;\n-    final static int BUT_WDTH;\n-    final static int BUT_IMG_SIZE = 45;\n-\n-    static {\n-        JButton sample = new JButton(\" Light \");\n-        BUT_HGHT = java.lang.Math.max(sample.getPreferredSize().height, 30);\n-        BUT_WDTH = java.lang.Math.max(sample.getPreferredSize().width, 56);\n-    }\n+    private final static int BUT_HGHT = 24;    \n+    private final static int BUT_MAX_WDTH = 256;\n+    private final static int BUT_MIN_WDTH = 100;    \n+    private final static int BUT_IMG_SIZE = 48;\n+    final static int DEFAULT_FONT_SIZE = 12;\n \n     /**\n      * Get Button Height.\n@@ -73,35 +69,24 @@ public static int getButtonHeight() {\n      * @return width.\n      */\n     public static int getButtonWidth() {\n-        return BUT_WDTH;\n+        return BUT_MIN_WDTH;\n     }\n \n     /**\n      * Construct the FunctionButton.\n      */\n     public FunctionButton() {\n         super();\n-        popup = new JPopupMenu();\n         listeners = new ArrayList<>();\n-        init();\n+        initGUI();\n     }\n     \n-    final void init(){\n-        \n+    private void initGUI(){      \n         _model = new ToggleOrPressButtonModel(this, true);\n-        setModel(_model);\n-        \n-        JMenuItem propertiesItem = new JMenuItem(Bundle.getMessage(\"MenuItemProperties\"));\n-        propertiesItem.addActionListener((ActionEvent e) -> {\n-            FunctionButtonPropertyEditor editor = new FunctionButtonPropertyEditor();\n-            editor.setFunctionButton(this);\n-            editor.setLocation(this.getLocationOnScreen());\n-            editor.setVisible(true);\n-          });\n-        popup.add(propertiesItem);\n-        //Add listener to components that can bring up popup menus.\n+        setModel(_model);       \n+        //Add listener to components that can bring up popupMenu menus.\n         addMouseListener(new PopupListener());\n-        setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n+        setFont(new Font(\"Monospaced\", Font.PLAIN, DEFAULT_FONT_SIZE));\n         setMargin(new Insets(2, 2, 2, 2));\n         setRolloverEnabled(false);\n         updateLnF();\n@@ -125,29 +110,6 @@ public int getIdentity() {\n         return identity;\n     }\n \n-    /**\n-     * Set the keycode that this button should respond to.\n-     * <p>\n-     * Later, when a key is being processed, checkKeyCode will determine if\n-     * there's a match between the key that was pressed and the key for this\n-     * button\n-     * @param key KeyCode value.\n-     */\n-    public void setKeyCode(int key) {\n-        actionKey = key;\n-    }\n-\n-    /**\n-     * Check to see whether a particular KeyCode corresponds to this function\n-     * button.\n-     *\n-     * @param keycode keycode to check against.\n-     * @return true if the button should respond to this key\n-     */\n-    public boolean checkKeyCode(int keycode) {\n-        return keycode == actionKey;\n-    }\n-\n     /**\n      * Set the state of the function button.\n      * Does not send update to layout, just updates button status.\n@@ -285,14 +247,20 @@ public void updateLnF() {\n         setContentAreaFilled(!isImageOK());\n         setText( isImageOK() ? null : getButtonLabel() );\n         if (isImageOK()) { // adjust button for image\n+            setMinimumSize(new Dimension(FunctionButton.BUT_IMG_SIZE, FunctionButton.BUT_IMG_SIZE));\n+            setMaximumSize(new Dimension(FunctionButton.BUT_IMG_SIZE, FunctionButton.BUT_IMG_SIZE));\n             setPreferredSize(new Dimension(FunctionButton.BUT_IMG_SIZE, FunctionButton.BUT_IMG_SIZE));\n         }\n         else { // adjust button for text\n+            setMinimumSize(new Dimension(FunctionButton.BUT_MIN_WDTH, FunctionButton.BUT_HGHT));\n+            setMaximumSize(new Dimension(FunctionButton.BUT_MAX_WDTH, FunctionButton.BUT_HGHT));\n             if (getButtonLabel() != null) {\n-                int butWidth = getFontMetrics(getFont()).stringWidth(getButtonLabel()) + 20; // pad out the width a bit\n-                setPreferredSize(new Dimension( Math.max(butWidth, FunctionButton.BUT_WDTH), FunctionButton.BUT_HGHT));\n+                int butWidth = getFontMetrics(getFont()).stringWidth(getButtonLabel()) + 64; // pad out the width a bit\n+                butWidth = Math.min(butWidth, FunctionButton.BUT_MAX_WDTH );\n+                butWidth = Math.max(butWidth, FunctionButton.BUT_MIN_WDTH );                \n+                setPreferredSize(new Dimension( butWidth, FunctionButton.BUT_HGHT));\n             } else {\n-                setPreferredSize(new Dimension(BUT_WDTH, BUT_HGHT));\n+                setPreferredSize(new Dimension(BUT_MIN_WDTH, BUT_HGHT));\n             }\n         }\n     }    \n@@ -363,13 +331,12 @@ public void removeFunctionListener(FunctionListener l) {\n \n     /**\n      * A PopupListener to handle mouse clicks and releases.\n-     * Handles the popup menu.\n+     * Handles the popupMenu menu.\n      */\n     private class PopupListener extends MouseAdapter {\n \n         /**\n-         * If the event is the popup trigger, which is dependent on the\n-         * platform, present the popup menu.\n+         * If the event is the popupMenu trigger, which is dependent on the platform, present the popupMenu menu.\n          * @param e The MouseEvent causing the action.\n          */\n         @Override\n@@ -378,8 +345,7 @@ public void mouseClicked(MouseEvent e) {\n         }\n         \n         /**\n-         * If the event is the popup trigger, which is dependent on the\n-         * platform, present the popup menu.\n+         * If the event is the popupMenu trigger, which is dependent on the platform, present the popupMenu menu.\n          * @param e The MouseEvent causing the action.\n          */\n         @Override\n@@ -388,8 +354,7 @@ public void mousePressed(MouseEvent e) {\n         }\n \n         /**\n-         * If the event is the popup trigger, which is dependent on the\n-         * platform, present the popup menu.\n+         * If the event is the popupMenu trigger, which is dependent on the  platform, present the popupMenu menu.\n          * @param e The MouseEvent causing the action.\n          */\n         @Override\n@@ -399,11 +364,28 @@ public void mouseReleased(MouseEvent e) {\n         \n         private void checkTrigger( MouseEvent e) {\n             if (e.isPopupTrigger()) {\n-                popup.show(e.getComponent(), e.getX(), e.getY());\n+                initPopupMenu();\n+                popupMenu.show(e.getComponent(), e.getX(), e.getY());\n             }\n         }\n     }\n-\n+    \n+    private void initPopupMenu() {\n+        if (popupMenu == null) {\n+            JMenuItem propertiesItem = new JMenuItem(Bundle.getMessage(\"MenuItemProperties\"));\n+            propertiesItem.addActionListener((ActionEvent e) -> {\n+                if (editor == null) {\n+                    editor = new FunctionButtonPropertyEditor(this);            \n+                }\n+                editor.resetProperties();\n+                editor.setLocation(MouseInfo.getPointerInfo().getLocation());\n+                editor.setVisible(true);\n+            });\n+            popupMenu = new JPopupMenu();\n+            popupMenu.add(propertiesItem);\n+        }\n+    }\n+    \n     /**\n      * Collect the prefs of this object into XML Element.\n      * <ul>\n@@ -461,11 +443,6 @@ public void setXml(Element e) {\n             this.setIsLockable(e.getAttribute(\"isLockable\").getBooleanValue());\n             boolean isVisible = e.getAttribute(\"isVisible\").getBooleanValue();\n             this.setDisplay(isVisible);\n-            if (this.getIdentity() < FunctionPanel.NUM_FUNC_BUTTONS_INIT) {\n-                this.setVisible(isVisible);\n-            } else {\n-                this.setVisible(false);\n-            }\n             this.setFont(new Font(\"Monospaced\", Font.PLAIN, e.getAttribute(\"fontSize\").getIntValue()));\n             if ((e.getAttribute(\"iconPath\") != null) && (e.getAttribute(\"iconPath\").getValue().length() > 0)) {\n                 if (checkFile(FileUtil.getUserResourcePath() + e.getAttribute(\"iconPath\").getValue())) {"
  },
  {
    "sha": "ccbd257b6c15fdcd7b2f236ba308cb55bff415d2",
    "filename": "java/src/jmri/jmrit/throttle/FunctionButtonPropertyEditor.java",
    "status": "modified",
    "additions": 28,
    "deletions": 22,
    "changes": 50,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/FunctionButtonPropertyEditor.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/FunctionButtonPropertyEditor.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/FunctionButtonPropertyEditor.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -16,9 +16,9 @@\n /**\n  * A very specific dialog for editing the properties of a FunctionButton object.\n  */\n-public class FunctionButtonPropertyEditor extends JDialog {\n+public final class FunctionButtonPropertyEditor extends JDialog {\n \n-    private FunctionButton button;\n+    private final FunctionButton button;\n \n     private JTextField textField;\n     private JCheckBox lockableCheckBox;\n@@ -31,10 +31,12 @@\n \n     /**\n      * Constructor. Create it and pack it.\n+     * @param btn the functionButton\n      */\n-    public FunctionButtonPropertyEditor() {\n+    public FunctionButtonPropertyEditor(FunctionButton btn) {\n+        button = btn;\n         initGUI();\n-        super.pack();\n+        resetProperties();\n     }\n \n     /**\n@@ -130,29 +132,36 @@ private void initGUI() {\n         JPanel buttonPanel = new JPanel();\n         buttonPanel.setLayout(new GridLayout(1, 2, 4, 4));\n \n-        JButton saveButton = new JButton(Bundle.getMessage(\"ButtonOK\"));\n-        saveButton.addActionListener(this::saveProperties);\n-\n-        JButton cancelButton = new JButton(Bundle.getMessage(\"ButtonCancel\"));\n-        cancelButton.addActionListener(this::finishEdit);\n+        JButton applyButton = new JButton(Bundle.getMessage(\"ButtonApply\"));\n+        applyButton.addActionListener((ActionEvent e) -> {\n+            saveProperties();\n+        });\n+                \n+        JButton resetButton = new JButton(Bundle.getMessage(\"ButtonReset\"));\n+        resetButton.addActionListener((ActionEvent e) -> {\n+            resetProperties();           \n+        });        \n+        \n+        JButton closeButton = new JButton(Bundle.getMessage(\"ButtonClose\"));\n+        closeButton.addActionListener((ActionEvent e) -> {\n+            finishEdit();\n+        });\n \n-        buttonPanel.add(saveButton);\n-        buttonPanel.add(cancelButton);\n+        buttonPanel.add(resetButton);\n+        buttonPanel.add(closeButton);        \n+        buttonPanel.add(applyButton);\n \n         mainPanel.add(propertyPanel, BorderLayout.CENTER);\n         mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n \n+        pack();\n     }\n \n     /**\n-     * Set the FunctionButton this dialog will edit. \n-     * <p>\n-     * Method will initialize GUI from button properties.\n+     * Initialize GUI from button properties.\n      *\n-     * @param button The FunctionButton to edit.\n      */\n-    public void setFunctionButton(FunctionButton button) {\n-        this.button = button;\n+    public void resetProperties() {\n         textField.setText(button.getButtonLabel());\n         lockableCheckBox.setSelected(button.getIsLockable());\n         idField.setText(String.valueOf(button.getIdentity()));\n@@ -169,9 +178,8 @@ public void setFunctionButton(FunctionButton button) {\n \n     /**\n      * Save the user-modified properties back to the FunctionButton.\n-     * @param e unused\n      */\n-    private void saveProperties(ActionEvent e) {\n+    private void saveProperties() {\n         if (isDataValid()) {\n             button.setButtonLabel(textField.getText());\n             button.setIsLockable(lockableCheckBox.isSelected());\n@@ -186,15 +194,13 @@ private void saveProperties(ActionEvent e) {\n             button.setSelectedIconPath(_imagePressedFilePath.getImagePath());\n             button.setDirty(true);\n             button.updateLnF();\n-            finishEdit(null);\n         }\n     }\n \n     /**\n      * Finish the editing process. Hide the dialog.\n-     * @param e unused.\n      */\n-    private void finishEdit(ActionEvent e) {\n+    private void finishEdit() {\n         this.setVisible(false);\n     }\n "
  },
  {
    "sha": "10593890efcbc5f703486e0873daa6d6d4416f0c",
    "filename": "java/src/jmri/jmrit/throttle/FunctionPanel.java",
    "status": "modified",
    "additions": 133,
    "deletions": 218,
    "changes": 351,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/FunctionPanel.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/FunctionPanel.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/FunctionPanel.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,20 +1,21 @@\n package jmri.jmrit.throttle;\n \n-import java.awt.Dimension;\n-import java.awt.FlowLayout;\n-import java.awt.event.KeyAdapter;\n-import java.awt.event.KeyEvent;\n+import java.awt.*;\n+import java.awt.event.*;\n import java.util.Arrays;\n-import javax.swing.JInternalFrame;\n-import javax.swing.JPanel;\n-import javax.swing.JToggleButton;\n-import javax.swing.WindowConstants;\n+\n+import javax.swing.*;\n+import javax.swing.border.Border;\n+import javax.swing.border.EmptyBorder;\n+\n import jmri.DccThrottle;\n import jmri.InstanceManager;\n import jmri.LocoAddress;\n import jmri.Throttle;\n import jmri.jmrit.roster.Roster;\n import jmri.jmrit.roster.RosterEntry;\n+import jmri.util.swing.WrapLayout;\n+\n import org.jdom2.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -24,23 +25,18 @@\n  */\n public class FunctionPanel extends JInternalFrame implements FunctionListener, java.beans.PropertyChangeListener, AddressListener {\n \n-    public static final int NUM_FUNCTION_BUTTONS = 29;\n-    public static final int NUM_FUNC_BUTTONS_INIT = 16; //only show 16 function buttons at start\n+    private static final int DEFAULT_FUNCTION_BUTTONS = 24; // just enough to fill the initial pane\n     private DccThrottle mThrottle;\n-\n+    \n     private JPanel mainPanel;\n-    private FunctionButton functionButton[];\n-    private final JToggleButton alt1Button;\n-    private final JToggleButton alt2Button;\n-\n+    private FunctionButton[] functionButtons;\n+    \n     private AddressPanel addressPanel = null; // to access roster infos\n \n     /**\n      * Constructor\n      */\n     public FunctionPanel() {\n-        alt1Button = new JToggleButton();\n-        alt2Button = new JToggleButton();\n         initGUI();\n     }\n \n@@ -55,7 +51,7 @@ public void destroy() {\n     }\n \n     public FunctionButton[] getFunctionButtons() {\n-        return Arrays.copyOf(functionButton, functionButton.length);\n+        return Arrays.copyOf(functionButtons, functionButtons.length);\n     }\n \n     /**\n@@ -93,12 +89,9 @@ public void notifyFunctionLockableChanged(int functionNumber, boolean isLockable\n      */\n     @Override\n     public void setEnabled(boolean isEnabled) {\n-        //super.setEnabled(isEnabled);\n-        for (int i = 0; i < NUM_FUNCTION_BUTTONS; i++) {\n-            functionButton[i].setEnabled(isEnabled);\n+        for (FunctionButton functionButton : functionButtons) {\n+            functionButton.setEnabled(isEnabled);\n         }\n-        alt1Button.setEnabled(isEnabled);\n-        alt2Button.setEnabled(isEnabled);\n     }\n \n     public void setEnabled() {\n@@ -114,92 +107,80 @@ public void saveFunctionButtonsToRoster(RosterEntry rosterEntry) {\n         if (rosterEntry == null) {\n             return;\n         }\n-        for (int i = 0; i < NUM_FUNCTION_BUTTONS; i++) {\n-            int functionNumber = functionButton[i].getIdentity();\n-            String text = functionButton[i].getButtonLabel();\n-            boolean lockable = functionButton[i].getIsLockable();\n-            String imagePath = functionButton[i].getIconPath();\n-            String imageSelectedPath = functionButton[i].getSelectedIconPath();\n-            if (functionButton[i].isDirty() && !text.equals(rosterEntry.getFunctionLabel(functionNumber))) {\n-                functionButton[i].setDirty(false);\n-                if (text.isEmpty()) {\n-                    text = null;  // reset button text to default\n+        for (FunctionButton functionButton : functionButtons) {\n+            int functionNumber = functionButton.getIdentity();\n+            String text = functionButton.getButtonLabel();\n+            boolean lockable = functionButton.getIsLockable();\n+            String imagePath = functionButton.getIconPath();\n+            String imageSelectedPath = functionButton.getSelectedIconPath();\n+            if (functionButton.isDirty()) {\n+                if (!text.equals(rosterEntry.getFunctionLabel(functionNumber))) {\n+                    if (text.isEmpty()) {\n+                        text = null;  // reset button text to default\n+                    }\n+                    rosterEntry.setFunctionLabel(functionNumber, text);\n                 }\n-                rosterEntry.setFunctionLabel(functionNumber, text);\n+                String fontSizeKey = \"function\"+functionNumber+\"_ThrottleFontSize\";\n+                if (rosterEntry.getAttribute(fontSizeKey) != null && functionButton.getFont().getSize() == FunctionButton.DEFAULT_FONT_SIZE) {\n+                    rosterEntry.deleteAttribute(fontSizeKey);\n+                }\n+                if (functionButton.getFont().getSize() != FunctionButton.DEFAULT_FONT_SIZE) {\n+                    rosterEntry.putAttribute(fontSizeKey, \"\"+functionButton.getFont().getSize());\n+                }\n+                functionButton.setDirty(false);                \n             }\n             if (rosterEntry.getFunctionLabel(functionNumber) != null ) {\n                 if( lockable != rosterEntry.getFunctionLockable(functionNumber)) {\n-                   rosterEntry.setFunctionLockable(functionNumber, lockable);\n+                    rosterEntry.setFunctionLockable(functionNumber, lockable);\n                 }\n-                if ( imagePath.compareTo(rosterEntry.getFunctionImage(functionNumber)) != 0) {\n-                   rosterEntry.setFunctionImage(functionNumber, imagePath);\n+                if ( (!imagePath.isEmpty() && rosterEntry.getFunctionImage(functionNumber) == null )\n+                        || (rosterEntry.getFunctionImage(functionNumber) != null && imagePath.compareTo(rosterEntry.getFunctionImage(functionNumber)) != 0)) {\n+                    rosterEntry.setFunctionImage(functionNumber, imagePath);\n                 }\n-                if ( imageSelectedPath.compareTo(rosterEntry.getFunctionSelectedImage(functionNumber)) != 0) {\n-                   rosterEntry.setFunctionSelectedImage(functionNumber, imageSelectedPath);\n+                if ( (!imageSelectedPath.isEmpty() && rosterEntry.getFunctionSelectedImage(functionNumber) == null )\n+                        || (rosterEntry.getFunctionSelectedImage(functionNumber) != null && imageSelectedPath.compareTo(rosterEntry.getFunctionSelectedImage(functionNumber)) != 0)) {\n+                    rosterEntry.setFunctionSelectedImage(functionNumber, imageSelectedPath);\n                 }\n             }\n         }\n         Roster.getDefault().writeRoster();\n     }\n-\n+    \n     /**\n      * Place and initialize all the buttons.\n      */\n     private void initGUI() {\n         mainPanel = new JPanel();\n-        mainPanel.removeAll();\n-        setContentPane(mainPanel);\n-        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n-        mainPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));\n-        functionButton = new FunctionButton[NUM_FUNCTION_BUTTONS];\n-        for (int i = 0; i < NUM_FUNCTION_BUTTONS; i++) {\n-            functionButton[i] = new FunctionButton();\n-            // place function button 0 at the button of the panel\n-            if (i > 0) {\n-                mainPanel.add(functionButton[i]);\n-                if (i >= NUM_FUNC_BUTTONS_INIT) {\n-                    functionButton[i].setVisible(false);\n-                }\n-            }\n-        }\n-        alt1Button.setText(\"*\");\n-        alt1Button.setPreferredSize(new Dimension(FunctionButton.BUT_WDTH, FunctionButton.BUT_HGHT));\n-        alt1Button.setToolTipText(java.util.ResourceBundle.getBundle(\"jmri/jmrit/throttle/ThrottleBundle\").getString(\"Push_for_alternate_set_of_function_keys\"));\n-        alt1Button.addActionListener((java.awt.event.ActionEvent e) -> {\n-            buttonActionCmdPerformed();\n-        });\n-        mainPanel.add(alt1Button);\n-\n-        mainPanel.add(functionButton[0]);\n-\n-        alt2Button.setText(\"#\");\n-        alt2Button.setPreferredSize(new Dimension(FunctionButton.BUT_WDTH, FunctionButton.BUT_HGHT));\n-        alt2Button.setToolTipText(java.util.ResourceBundle.getBundle(\"jmri/jmrit/throttle/ThrottleBundle\").getString(\"currently_not_used\"));\n-        mainPanel.add(alt2Button);\n-\n+        mainPanel.setLayout(new WrapLayout(FlowLayout.CENTER, 2, 2));\n         resetFnButtons();\n-        KeyListenerInstaller.installKeyListenerOnAllComponents(new FunctionButtonKeyListener(), this);\n+        JScrollPane scrollPane = new JScrollPane(mainPanel);\n+        scrollPane.getViewport().setOpaque(false); // container already gets this done (for play/edit mode)\n+        scrollPane.setOpaque(false);\n+        Border empyBorder = new EmptyBorder(0,0,0,0); // force look'n feel, no border\n+        scrollPane.setViewportBorder( empyBorder ); \n+        scrollPane.setBorder( empyBorder );\n+        scrollPane.setWheelScrollingEnabled(false); // already used by speed slider\n+        setContentPane(scrollPane);\n+        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n     }\n-\n-    /**\n-     * Activated when alt1Button is pressed or released.\n-     * Swap f3 through f15 with f16 through f28.\n-     */\n-    public void buttonActionCmdPerformed() {\n-        for (int i = 3; i < NUM_FUNCTION_BUTTONS; i++) {\n-            if (alt1Button.isSelected()) {\n-                if (i < NUM_FUNC_BUTTONS_INIT) {\n-                    functionButton[i].setVisible(false);\n-                } else {\n-                    functionButton[i].setVisible(functionButton[i].getDisplay());\n-                }\n-\n-            } else {\n-                if (i < NUM_FUNC_BUTTONS_INIT) {\n-                    functionButton[i].setVisible(functionButton[i].getDisplay());\n-                } else {\n-                    functionButton[i].setVisible(false);\n-                }\n+    \n+    private void rebuildFnButons() {\n+        mainPanel.removeAll();\n+        if (this.mThrottle == null) {\n+            functionButtons = new FunctionButton[DEFAULT_FUNCTION_BUTTONS];\n+        } else {\n+            functionButtons = new FunctionButton[mThrottle.getFunctions().length];\n+        }\n+        for (int i = 0; i < functionButtons.length; i++) {\n+            functionButtons[i] = new FunctionButton();\n+            mainPanel.add(functionButtons[i]);\n+            functionButtons[i].setThrottle(mThrottle);\n+            // Copy mouse and keyboard controls to new components\n+            for (KeyListener kl:this.getKeyListeners()) {\n+                functionButtons[i].addKeyListener(kl);\n+            }\n+            for (MouseWheelListener mwl:this.getMouseWheelListeners()) {\n+                functionButtons[i].addMouseWheelListener(mwl);\n             }\n         }\n     }\n@@ -210,77 +191,46 @@ public void buttonActionCmdPerformed() {\n      */\n     public void resetFnButtons() {\n         final ThrottlesPreferences preferences = InstanceManager.getDefault(ThrottleFrameManager.class).getThrottlesPreferences();\n+        rebuildFnButons();\n         // Buttons names, ids,\n-        for (int i = 0; i < NUM_FUNCTION_BUTTONS; i++) {\n-            functionButton[i].setThrottle(mThrottle);\n-            functionButton[i].setIdentity(i);\n-            functionButton[i].addFunctionListener(this);\n-            functionButton[i].setButtonLabel( i<3 ?\n+        for (int i = 0; i < functionButtons.length; i++) {                      \n+            functionButtons[i].setThrottle(mThrottle);\n+            functionButtons[i].setIdentity(i);\n+            functionButtons[i].addFunctionListener(this);\n+            functionButtons[i].setButtonLabel( i<3 ?\n                 Bundle.getMessage(Throttle.getFunctionString(i))\n                 : Throttle.getFunctionString(i) );\n-            functionButton[i].setDisplay(true);\n+            functionButtons[i].setDisplay(true);\n             if ((i < 3) && preferences.isUsingExThrottle() && preferences.isUsingFunctionIcon()) {\n                 switch (i) {\n                     case 0:\n-                        functionButton[i].setIconPath(\"resources/icons/throttles/Light.png\");\n-                        functionButton[i].setSelectedIconPath(\"resources/icons/throttles/LightOn.png\");\n+                        functionButtons[i].setIconPath(\"resources/icons/throttles/Light.png\");\n+                        functionButtons[i].setSelectedIconPath(\"resources/icons/throttles/LightOn.png\");\n                         break;\n                     case 1:\n-                        functionButton[i].setIconPath(\"resources/icons/throttles/Bell.png\");\n-                        functionButton[i].setSelectedIconPath(\"resources/icons/throttles/BellOn.png\");\n+                        functionButtons[i].setIconPath(\"resources/icons/throttles/Bell.png\");\n+                        functionButtons[i].setSelectedIconPath(\"resources/icons/throttles/BellOn.png\");\n                         break;\n                     case 2:\n-                        functionButton[i].setIconPath(\"resources/icons/throttles/Horn.png\");\n-                        functionButton[i].setSelectedIconPath(\"resources/icons/throttles/HornOn.png\");\n+                        functionButtons[i].setIconPath(\"resources/icons/throttles/Horn.png\");\n+                        functionButtons[i].setSelectedIconPath(\"resources/icons/throttles/HornOn.png\");\n                         break;\n                     default:\n                         break;\n                 }\n             } else {\n-                functionButton[i].setIconPath(null);\n-                functionButton[i].setSelectedIconPath(null);\n+                functionButtons[i].setIconPath(null);\n+                functionButtons[i].setSelectedIconPath(null);\n             }\n-            functionButton[i].updateLnF();\n+            functionButtons[i].updateLnF();\n \n             // always display f0, F1 and F2\n             if (i < 3) {\n-                functionButton[i].setVisible(true);\n+                functionButtons[i].setVisible(true);\n             }\n         }\n-        functionButton[0].setKeyCode(KeyEvent.VK_NUMPAD0);\n-        functionButton[1].setKeyCode(KeyEvent.VK_NUMPAD1);\n-        functionButton[2].setKeyCode(KeyEvent.VK_NUMPAD2);\n-        functionButton[3].setKeyCode(KeyEvent.VK_NUMPAD3);\n-        functionButton[4].setKeyCode(KeyEvent.VK_NUMPAD4);\n-        functionButton[5].setKeyCode(KeyEvent.VK_NUMPAD5);\n-        functionButton[6].setKeyCode(KeyEvent.VK_NUMPAD6);\n-        functionButton[7].setKeyCode(KeyEvent.VK_NUMPAD7);\n-        functionButton[8].setKeyCode(KeyEvent.VK_NUMPAD8);\n-        functionButton[9].setKeyCode(KeyEvent.VK_NUMPAD9);\n-        functionButton[10].setKeyCode(110); // numpad decimal (f10 button causes problems)\n-        functionButton[11].setKeyCode(KeyEvent.VK_F11);\n-        functionButton[12].setKeyCode(KeyEvent.VK_F12);\n-        functionButton[13].setKeyCode(KeyEvent.VK_F13);\n-        functionButton[14].setKeyCode(KeyEvent.VK_F14);\n-        functionButton[15].setKeyCode(KeyEvent.VK_F15);\n-        functionButton[16].setKeyCode(KeyEvent.VK_F16);\n-        functionButton[17].setKeyCode(KeyEvent.VK_F17);\n-        functionButton[18].setKeyCode(KeyEvent.VK_F18);\n-        functionButton[19].setKeyCode(KeyEvent.VK_F19);\n-        functionButton[20].setKeyCode(KeyEvent.VK_F20);\n-        functionButton[21].setKeyCode(KeyEvent.VK_F21);\n-        functionButton[22].setKeyCode(KeyEvent.VK_F22);\n-        functionButton[23].setKeyCode(KeyEvent.VK_F23);\n-        functionButton[24].setKeyCode(KeyEvent.VK_F24);\n-        functionButton[25].setKeyCode(0xF00C);   // keycodes 25 - 28 don't exist in KeyEvent\n-        functionButton[26].setKeyCode(0xF00D);\n-        functionButton[27].setKeyCode(0xF00E);\n-        functionButton[28].setKeyCode(0xF00F);\n-\n-        alt1Button.setVisible(true);\n-        alt2Button.setVisible(true);\n-        buttonActionCmdPerformed();\n         setFnButtons();\n+        repaint();\n     }\n \n     // Update buttons value from slot + load buttons definition from roster if any\n@@ -294,81 +244,42 @@ private void setFnButtons() {\n             if (rosterEntry != null) {\n                 log.debug(\"RosterEntry found: {}\", rosterEntry.getId());\n             }\n-            int maxi = 0; // the number of function buttons defined for this entry\n-            for (int i = 0; i < FunctionPanel.NUM_FUNCTION_BUTTONS; i++) {\n-                functionButton[i].setIdentity(i); // full reset of function\n-                functionButton[i].setThrottle(mThrottle);\n-                functionButton[i].setState(mThrottle.getFunction(i)); // reset button state\n+            for (int i = 0; i < functionButtons.length; i++) {\n+                functionButtons[i].setEnabled(true);\n+                functionButtons[i].setIdentity(i); // full reset of function\n+                functionButtons[i].setThrottle(mThrottle);\n+                functionButtons[i].setState(mThrottle.getFunction(i)); // reset button state\n+                functionButtons[i].setIsLockable(!mThrottle.getFunctionMomentary(i));\n                 if (rosterEntry != null) { // from here, update button text with roster data\n                     String text = rosterEntry.getFunctionLabel(i);\n                     if (text != null) {\n-                        functionButton[i].setDisplay(true);\n-                        functionButton[i].setButtonLabel(text);\n+                        functionButtons[i].setDisplay(true);\n+                        functionButtons[i].setButtonLabel(text);\n                         if (preferences.isUsingExThrottle() && preferences.isUsingFunctionIcon()) {\n-                            functionButton[i].setIconPath(rosterEntry.getFunctionImage(i));\n-                            functionButton[i].setSelectedIconPath(rosterEntry.getFunctionSelectedImage(i));\n+                            functionButtons[i].setIconPath(rosterEntry.getFunctionImage(i));\n+                            functionButtons[i].setSelectedIconPath(rosterEntry.getFunctionSelectedImage(i));\n                         } else {\n-                            functionButton[i].setIconPath(null);\n-                            functionButton[i].setSelectedIconPath(null);\n+                            functionButtons[i].setIconPath(null);\n+                            functionButtons[i].setSelectedIconPath(null);\n                         }\n-                        functionButton[i].setIsLockable(rosterEntry.getFunctionLockable(i));\n-                        functionButton[i].updateLnF();\n-                        if (maxi < NUM_FUNC_BUTTONS_INIT) {\n-                            functionButton[i].setVisible(true);\n-                        }\n-                        maxi++; // bump number of buttons shown\n+                        functionButtons[i].setIsLockable(rosterEntry.getFunctionLockable(i));\n+                        functionButtons[i].updateLnF();\n                     } else if (preferences.isUsingExThrottle()\n                             && preferences.isHidingUndefinedFuncButt()) {\n-                        functionButton[i].setDisplay(false);\n-                        functionButton[i].setVisible(false);\n+                        functionButtons[i].setDisplay(false);\n+                        functionButtons[i].setVisible(false);\n                     }\n-                }\n-            }\n-            // hide alt buttons if not required\n-            if ((rosterEntry != null) && (maxi < NUM_FUNC_BUTTONS_INIT\n-                    && preferences.isUsingExThrottle()\n-                    && preferences.isHidingUndefinedFuncButt())) {\n-                alt1Button.setVisible(false);\n-                alt2Button.setVisible(false);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * A KeyAdapter that listens for the keys that work the function buttons.\n-     *\n-     * @author glen\n-     */\n-    private class FunctionButtonKeyListener extends KeyAdapter {\n-\n-        private boolean keyReleased = true;\n-\n-        /**\n-         * {@inheritDoc}\n-         */\n-        @Override\n-        public void keyPressed(KeyEvent e) {\n-            if (keyReleased) {\n-                for (int i = 0; i < NUM_FUNCTION_BUTTONS; i++) {\n-                    if (functionButton[i].checkKeyCode(e.getKeyCode())) {\n-                        functionButton[i].setState(!functionButton[i].isSelected());\n+                    String fontSize = rosterEntry.getAttribute(\"function\"+i+\"_ThrottleFontSize\");\n+                    if (fontSize != null) {\n+                        try {\n+                            functionButtons[i].setFont(new Font(\"Monospaced\", Font.PLAIN, Integer.parseInt(fontSize)));\n+                            functionButtons[i].updateLnF();\n+                        } catch (NumberFormatException e) {\n+                            log.debug(\"setFnButtons(): can't parse font size attribute \");\n+                        }\n                     }\n-                }\n-            }\n-            keyReleased = false;\n-        }\n-\n-        /**\n-         * {@inheritDoc}\n-         */\n-        @Override\n-        public void keyReleased(KeyEvent e) {\n-            for (int i = 0; i < NUM_FUNCTION_BUTTONS; i++) {\n-                if ((functionButton[i].checkKeyCode(e.getKeyCode())) && (!functionButton[i].getIsLockable())) {\n-                    functionButton[i].setState(!functionButton[i].isSelected());\n-                }\n+                }                \n             }\n-            keyReleased = true;\n         }\n     }\n \n@@ -390,7 +301,7 @@ public void propertyChange(java.beans.PropertyChangeEvent e) {\n     }\n     \n     private void setButtonByFuncNumber(int function, boolean lockable, boolean newVal){\n-        for (FunctionButton button : functionButton) {\n+        for (FunctionButton button : functionButtons) {\n             if (button.getIdentity() == function) {\n                 if (lockable) {\n                     button.setIsLockable(newVal);\n@@ -412,10 +323,10 @@ private void setButtonByFuncNumber(int function, boolean lockable, boolean newVa\n      */\n     public Element getXml() {\n         Element me = new Element(\"FunctionPanel\"); // NOI18N\n-        java.util.ArrayList<Element> children = new java.util.ArrayList<>(1 + FunctionPanel.NUM_FUNCTION_BUTTONS);\n+        java.util.ArrayList<Element> children = new java.util.ArrayList<>(1 + functionButtons.length);\n         children.add(WindowPreferences.getPreferences(this));\n-        for (int i = 0; i < FunctionPanel.NUM_FUNCTION_BUTTONS; i++) {\n-            children.add(functionButton[i].getXml());\n+        for (FunctionButton functionButton : functionButtons) {\n+            children.add(functionButton.getXml());\n         }\n         me.setContent(children);\n         return me;\n@@ -434,13 +345,16 @@ public void setXml(Element e) {\n         Element window = e.getChild(\"window\");\n         WindowPreferences.setPreferences(this, window);\n \n-        java.util.List<Element> buttonElements\n-                = e.getChildren(\"FunctionButton\");\n+        java.util.List<Element> buttonElements = e.getChildren(\"FunctionButton\");\n \n         if (buttonElements != null && buttonElements.size() > 0) {\n+            // just in case\n+            if ( buttonElements.size() > functionButtons.length) {\n+                rebuildFnButons();\n+            }\n             int i = 0;\n-            for (Element buttonElement : buttonElements) {\n-                functionButton[i++].setXml(buttonElement);\n+            for (Element buttonElement : buttonElements) {                \n+                functionButtons[i++].setXml(buttonElement);\n             }\n         }\n     }\n@@ -453,23 +367,24 @@ public void setXml(Element e) {\n     @Override\n     public void notifyAddressThrottleFound(DccThrottle t) {\n         log.debug(\"Throttle found\");\n-        mThrottle = t;\n-        setEnabled(true);\n+        mThrottle = t;        \n         mThrottle.addPropertyChangeListener(this);\n-        setFnButtons();\n+        resetFnButtons();\n+        setEnabled(true);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void notifyAddressReleased(LocoAddress la) {\n-        log.debug(\"Throttle released\");\n-        setEnabled(false);\n+        log.debug(\"Throttle released\");        \n         if (mThrottle != null) {\n             mThrottle.removePropertyChangeListener(this);\n         }\n         mThrottle = null;\n+        resetFnButtons(); \n+        setEnabled(false);\n     }\n \n     /**\n@@ -503,6 +418,6 @@ public void notifyConsistAddressReleased(int address, boolean isLong) {\n     @Override\n     public void notifyConsistAddressThrottleFound(DccThrottle throttle) {\n     }\n-\n+    \n     private final static Logger log = LoggerFactory.getLogger(FunctionPanel.class);\n }"
  },
  {
    "sha": "09604aa84917b7d0d41e289230a2c7e1f7aefe02",
    "filename": "java/src/jmri/jmrit/throttle/KeyListenerInstaller.java",
    "status": "removed",
    "additions": 0,
    "deletions": 33,
    "changes": 33,
    "blob_url": "https://github.com/JMRI/JMRI/blob/0519957ae81ab7afce047de1c1268e37488f81eb/java/src/jmri/jmrit/throttle/KeyListenerInstaller.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/0519957ae81ab7afce047de1c1268e37488f81eb/java/src/jmri/jmrit/throttle/KeyListenerInstaller.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/KeyListenerInstaller.java?ref=0519957ae81ab7afce047de1c1268e37488f81eb",
    "patch": "@@ -1,33 +0,0 @@\n-package jmri.jmrit.throttle;\n-\n-import java.awt.Component;\n-import java.awt.Container;\n-import java.awt.event.KeyListener;\n-\n-/**\n- * A Visitor class for installing a KeyListener on a container and all of its\n- * subcomponents.\n- *\n- * @author glen\n- */\n-public class KeyListenerInstaller {\n-\n-    /**\n-     * Add a KeyListener to all components.\n-     *\n-     * @param k The KeyListener to add.\n-     * @param c The container to which all components are given this listener\n-     */\n-    public static void installKeyListenerOnAllComponents(KeyListener k, Container c) {\n-        c.addKeyListener(k);\n-        Component[] components = c.getComponents();\n-        for (int i = 0; i < components.length; i++) {\n-            if (components[i] instanceof Container) {\n-                KeyListenerInstaller.installKeyListenerOnAllComponents(k, (Container) components[i]);\n-            } else {\n-                components[i].addKeyListener(k);\n-            }\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "d2d148684f7b06051b0ddac66710dff5406c2c48",
    "filename": "java/src/jmri/jmrit/throttle/StopAllButton.java",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/StopAllButton.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/StopAllButton.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/StopAllButton.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,7 +1,6 @@\n package jmri.jmrit.throttle;\n \n import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n import java.util.Iterator;\n import javax.swing.JButton;\n import jmri.DccThrottle;\n@@ -11,20 +10,22 @@\n public class StopAllButton extends JButton {\n \n     public StopAllButton() {\n+        super();\n+        initGUI();\n+    }\n+        \n+    private void initGUI() {    \n         //    stop.setText(Bundle.getMessage(\"ThrottleToolBarStopAll\"));\n         setIcon(new NamedIcon(\"resources/icons/throttles/estop.png\", \"resources/icons/throttles/estop.png\"));\n         setToolTipText(Bundle.getMessage(\"ThrottleToolBarStopAllToolTip\"));\n         setVerticalTextPosition(JButton.BOTTOM);\n         setHorizontalTextPosition(JButton.CENTER);\n-        addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                Iterator<ThrottleFrame> tpi = InstanceManager.getDefault(ThrottleFrameManager.class).getThrottlesListPanel().getTableModel().iterator();\n-                while (tpi.hasNext()) {\n-                    DccThrottle th = tpi.next().getAddressPanel().getThrottle();\n-                    if (th != null) {\n-                        th.setSpeedSetting(-1);\n-                    }\n+        addActionListener((ActionEvent e) -> {\n+            Iterator<ThrottleFrame> tpi = InstanceManager.getDefault(ThrottleFrameManager.class).getThrottlesListPanel().getTableModel().iterator();\n+            while (tpi.hasNext()) {\n+                DccThrottle th = tpi.next().getAddressPanel().getThrottle();\n+                if (th != null) {\n+                    th.setSpeedSetting(-1);\n                 }\n             }\n         });"
  },
  {
    "sha": "9daa13928bd9efc4d8702f16279888fdb5b79317",
    "filename": "java/src/jmri/jmrit/throttle/ThrottleFrame.java",
    "status": "modified",
    "additions": 27,
    "deletions": 47,
    "changes": 74,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleFrame.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleFrame.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ThrottleFrame.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -12,8 +12,6 @@\n import java.awt.event.ComponentListener;\n import java.awt.event.ContainerEvent;\n import java.awt.event.ContainerListener;\n-import java.awt.event.KeyAdapter;\n-import java.awt.event.KeyEvent;\n import java.beans.PropertyVetoException;\n import java.io.File;\n import java.io.IOException;\n@@ -57,9 +55,6 @@\n     private final Integer PANEL_LAYER_FRAME = 1;\n     private final Integer PANEL_LAYER_PANEL = 2;\n \n-    private static final int NEXT_FRAME_KEY = KeyEvent.VK_RIGHT;\n-    private static final int PREV_FRAME_KEY = KeyEvent.VK_LEFT;\n-\n     private static final int ADDRESS_PANEL_INDEX = 0;\n     private static final int CONTROL_PANEL_INDEX = 1;\n     private static final int FUNCTION_PANEL_INDEX = 2;\n@@ -293,13 +288,9 @@ private void initGUI() {\n         // assumes button width of 54, height of 30 (set in class FunctionButton) with\n         // horiz and vert gaps of 5 each (set in FunctionPanel class)\n         // with 3 buttons across and 6 rows high\n-        int width = 3 * (FunctionButton.BUT_WDTH) + 2 * 3 * 5 + 10;   // = 192\n-        int height = 6 * (FunctionButton.BUT_HGHT) + 2 * 6 * 5 + 20; // = 240 (but there seems to be another 10 needed for some LAFs)\n+        int width = 3 * (FunctionButton.getButtonWidth()) + 2 * 3 * 5 + 10;   // = 192\n+        int height = 8 * (FunctionButton.getButtonHeight()) + 2 * 6 * 5 + 20; // = 240 (but there seems to be another 10 needed for some LAFs)\n \n-        if (preferences.isUsingExThrottle() && preferences.isUsingFunctionIcon()) {\n-            width = FunctionButton.BUT_WDTH * 3 + 2 * 3 * 5 + 10;\n-            height = FunctionButton.BUT_IMG_SIZE * 2 + FunctionButton.BUT_HGHT * 4 + 2 * 6 * 5 + 20;\n-        }\n         functionPanel.setSize(width, height);\n         functionPanel.setLocation(controlPanel.getWidth(), 0);\n         functionPanel.setVisible(true);\n@@ -320,7 +311,9 @@ private void initGUI() {\n         addressPanel.setIconifiable(true);\n         addressPanel.setTitle(Bundle.getMessage(\"ThrottleMenuViewAddressPanel\"));\n         addressPanel.pack();\n-        //                if (addressPanel.getWidth()<functionPanel.getWidth()) {addressPanel.setSize(functionPanel.getWidth(),addressPanel.getHeight());}\n+        if (addressPanel.getWidth()<functionPanel.getWidth()) {\n+            addressPanel.setSize(functionPanel.getWidth(),addressPanel.getHeight());\n+        }\n         addressPanel.setLocation(controlPanel.getWidth(), functionPanel.getHeight());\n         addressPanel.setVisible(true);\n         addressPanel.addInternalFrameListener(frameListener);\n@@ -388,8 +381,7 @@ private void initGUI() {\n                     }\n                 }\n             });\n-\n-        KeyListenerInstaller.installKeyListenerOnAllComponents(new FrameCyclingKeyListener(), this);\n+           \n         try {\n             addressPanel.setSelected(true);\n         } catch (PropertyVetoException ex) {\n@@ -878,6 +870,9 @@ public void componentShown(ComponentEvent e) {\n             repaint();\n         }\n         throttleWindow.updateGUI();\n+        // Make sure the throttle frame as the focus, to receive keyboard inputs        \n+        Component src = (Component) e.getSource();\n+        src.requestFocusInWindow();\n     }\n \n     public void saveThrottle() {\n@@ -898,40 +893,25 @@ public void saveThrottleAs() {\n         }\n         saveThrottle(file.getAbsolutePath());\n     }\n-\n-    /**\n-     * A KeyAdapter that listens for the key that cycles through the\n-     * JInternalFrames.\n-     *\n-     * @author glen\n-     */\n-    class FrameCyclingKeyListener extends KeyAdapter {\n-\n-        /**\n-         * Description of the Method\n-         *\n-         * @param e Description of the Parameter\n-         */\n-        @Override\n-        public void keyReleased(KeyEvent e) {\n-            if (e.isControlDown() && e.getKeyCode() == NEXT_FRAME_KEY) {\n-                try {\n-                    activeFrame = (activeFrame + 1) % NUM_FRAMES;\n-                    frameList[activeFrame].setSelected(true);\n-                } catch (PropertyVetoException ex) {\n-                    log.warn(\"Exception selecting internal frame:{}\", ex.getMessage());\n-                }\n-            } else if (e.isControlDown() && e.getKeyCode() == PREV_FRAME_KEY) {\n-                try {\n-                    activeFrame--;\n-                    if (activeFrame < 0) {\n-                        activeFrame = NUM_FRAMES - 1;\n-                    }\n-                    frameList[activeFrame].setSelected(true);\n-                } catch (PropertyVetoException ex) {\n-                    log.warn(\"Exception selecting internal frame:{}\", ex.getMessage());\n-                }\n+   \n+    public void activateNextJInternalFrame() {\n+        try {\n+            activeFrame = (activeFrame + 1) % NUM_FRAMES;\n+            frameList[activeFrame].setSelected(true);\n+        } catch (PropertyVetoException ex) {\n+            log.warn(\"Exception selecting internal frame:{}\", ex.getMessage());\n+        }\n+    }\n+    \n+    public void activatePreviousJInternalFrame() {\n+        try {\n+            activeFrame--;\n+            if (activeFrame < 0) {\n+                activeFrame = NUM_FRAMES - 1;\n             }\n+            frameList[activeFrame].setSelected(true);\n+        } catch (PropertyVetoException ex) {\n+            log.warn(\"Exception selecting internal frame:{}\", ex.getMessage());\n         }\n     }\n "
  },
  {
    "sha": "ffa51be304cc5bcbe838eff6677efd2786d3db39",
    "filename": "java/src/jmri/jmrit/throttle/ThrottleFrameManager.java",
    "status": "modified",
    "additions": 9,
    "deletions": 79,
    "changes": 88,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleFrameManager.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleFrameManager.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ThrottleFrameManager.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,7 +1,5 @@\n package jmri.jmrit.throttle;\n \n-import java.awt.event.KeyAdapter;\n-import java.awt.event.KeyEvent;\n import java.util.ArrayList;\n import java.util.Iterator;\n import javax.swing.JFrame;\n@@ -19,15 +17,7 @@\n  */\n public class ThrottleFrameManager implements InstanceManagerAutoDefault {\n \n-    private final static int NEXT_THROTTLE_KEY  = KeyEvent.VK_RIGHT;\n-    private final static int PREV_THROTTLE_KEY  = KeyEvent.VK_LEFT;\n-\n-    private final static int MOVE_TO_FUNCTIONS  = KeyEvent.VK_F;\n-    private final static int MOVE_TO_CONTROL    = KeyEvent.VK_C;\n-    private final static int MOVE_TO_ADDRESS    = KeyEvent.VK_A;\n-\n     private int activeFrame;\n-    private final ThrottleCyclingKeyListener throttleCycler;\n \n     private ArrayList<ThrottleWindow> throttleWindows; // synchronized access\n \n@@ -39,7 +29,6 @@\n      * Constructor for the ThrottleFrameManager object.\n      */\n     public ThrottleFrameManager() {\n-        throttleCycler = new ThrottleCyclingKeyListener();\n         throttleWindows = new ArrayList<>(0);\n         if (jmri.InstanceManager.getNullableDefault(ThrottlesPreferences.class) == null) {\n             jmri.InstanceManager.store(new ThrottlesPreferences(), ThrottlesPreferences.class);\n@@ -55,7 +44,6 @@ public ThrottleFrameManager() {\n     public ThrottleWindow createThrottleWindow() {\n         ThrottleWindow tw = new ThrottleWindow();\n         tw.pack();\n-        KeyListenerInstaller.installKeyListenerOnAllComponents(throttleCycler, tw);\n         synchronized (this) {\n             throttleWindows.add(tw);\n             activeFrame = throttleWindows.indexOf(tw);\n@@ -87,7 +75,7 @@ public void requestThrottleWindowDestruction(ThrottleWindow frame) {\n                     log.debug(ex.toString());\n                 }\n                 if (throttleWindows.size() > 0) {\n-                    requestFocusForNextFrame();\n+                    requestFocusForNextThrottleWindow();\n                 }\n             }\n         }\n@@ -123,50 +111,21 @@ public synchronized int getNumberThrottleWindows() {\n         return throttleWindows.size();\n     }\n \n-    private synchronized void requestFocusForNextFrame() {\n+    public synchronized void requestFocusForNextThrottleWindow() {\n         activeFrame = (activeFrame + 1) % throttleWindows.size();\n-        ThrottleWindow tf = throttleWindows.get(activeFrame);\n-        tf.requestFocus();\n-        tf.toFront();\n+        ThrottleWindow tw = throttleWindows.get(activeFrame);\n+        tw.requestFocus();\n+        tw.toFront();\n     }\n \n-    private synchronized void requestFocusForPreviousFrame() {\n+    public synchronized void requestFocusForPreviousThrottleWindow() {\n         activeFrame--;\n         if (activeFrame < 0) {\n             activeFrame = throttleWindows.size() - 1;\n         }\n-        ThrottleWindow tf = throttleWindows.get(activeFrame);\n-        tf.requestFocus();\n-        tf.toFront();\n-    }\n-\n-\n-    private synchronized void requestFocusAddress() {\n-        throttleWindows.get(activeFrame).getCurrentThrottleFrame().getAddressPanel().requestFocus();\n-        throttleWindows.get(activeFrame).getCurrentThrottleFrame().getAddressPanel().toFront();\n-        try {\n-            throttleWindows.get(activeFrame).getCurrentThrottleFrame().getAddressPanel().setSelected(true);\n-        } catch (java.beans.PropertyVetoException ex) {\n-            log.debug(\"address move vetoed\");\n-        }\n-    }\n-    private synchronized void requestFocusControls() {\n-        throttleWindows.get(activeFrame).getCurrentThrottleFrame().getControlPanel().requestFocus();\n-        throttleWindows.get(activeFrame).getCurrentThrottleFrame().getControlPanel().toFront();\n-        try {\n-            throttleWindows.get(activeFrame).getCurrentThrottleFrame().getControlPanel().setSelected(true);\n-        } catch (java.beans.PropertyVetoException ex) {\n-            log.debug(\"control move vetoed\");\n-        }\n-    }\n-    private synchronized void requestFocusFunctions() {\n-        throttleWindows.get(activeFrame).getCurrentThrottleFrame().getFunctionPanel().requestFocus();\n-        throttleWindows.get(activeFrame).getCurrentThrottleFrame().getFunctionPanel().toFront();\n-        try {\n-            throttleWindows.get(activeFrame).getCurrentThrottleFrame().getFunctionPanel().setSelected(true);\n-        } catch (java.beans.PropertyVetoException ex) {\n-            log.debug(\"function move vetoed\");\n-        }\n+        ThrottleWindow tw = throttleWindows.get(activeFrame);\n+        tw.requestFocus();\n+        tw.toFront();\n     }\n \n     public synchronized ThrottleWindow getCurrentThrottleFrame() {\n@@ -183,35 +142,6 @@ public ThrottlesPreferences getThrottlesPreferences() {\n         return InstanceManager.getDefault(ThrottlesPreferences.class);\n     }\n \n-    /**\n-     * Description of the Class\n-     *\n-     * @author glen\n-     */\n-    class ThrottleCyclingKeyListener extends KeyAdapter {\n-\n-        /**\n-         * Description of the Method\n-         *\n-         * @param e Description of the Parameter\n-         */\n-        @Override\n-        public void keyReleased(KeyEvent e) {\n-            log.trace(\"TFM {}\", e);\n-            if (e.isShiftDown() && e.getKeyCode() == NEXT_THROTTLE_KEY) {\n-                requestFocusForNextFrame();\n-            } else if (e.isShiftDown() && e.getKeyCode() == PREV_THROTTLE_KEY) {\n-                requestFocusForPreviousFrame();\n-            } else if (e.isShiftDown() && e.getKeyCode() == MOVE_TO_FUNCTIONS) {\n-                requestFocusFunctions();\n-            } else if (e.isShiftDown() && e.getKeyCode() == MOVE_TO_CONTROL) {\n-                requestFocusControls();\n-            } else if (e.isShiftDown() && e.getKeyCode() == MOVE_TO_ADDRESS) {\n-                requestFocusAddress();\n-            }\n-        }\n-    }\n-\n     public ThrottlesListPanel getThrottlesListPanel() {\n         return throttlesListPanel;\n     }"
  },
  {
    "sha": "6cc4096ae0bdb2402ac3df3841cf1150ebfedd3d",
    "filename": "java/src/jmri/jmrit/throttle/ThrottleWindow.java",
    "status": "modified",
    "additions": 38,
    "deletions": 43,
    "changes": 81,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleWindow.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleWindow.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ThrottleWindow.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,14 +1,7 @@\n package jmri.jmrit.throttle;\n \n-import java.awt.BorderLayout;\n-import java.awt.CardLayout;\n-import java.awt.Component;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ItemEvent;\n-import java.awt.event.KeyAdapter;\n-import java.awt.event.KeyEvent;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n+import java.awt.*;\n+import java.awt.event.*;\n import java.io.File;\n import java.net.URI;\n import java.util.HashMap;\n@@ -32,7 +25,6 @@\n import jmri.util.FileUtil;\n import jmri.util.JmriJFrame;\n import jmri.util.iharder.dnd.URIDrop;\n-import jmri.util.iharder.dnd.URIDrop.Listener;\n \n import org.jdom2.Element;\n import org.slf4j.Logger;\n@@ -70,9 +62,7 @@\n \n     private final PowerManager powerMgr;\n \n-    private final ThrottlePanelCyclingKeyListener throttlePanelsCyclingKeyListener;\n-    private static final int NEXT_THROTTLE_KEY = KeyEvent.VK_RIGHT;\n-    private static final int PREV_THROTTLE_KEY = KeyEvent.VK_LEFT;\n+    private final ThrottleWindowInputsListener myInputsListener;\n \n     private HashMap<String, ThrottleFrame> throttleFrames = new HashMap<>(5);\n     private int cardCounterID = 0; // to generate unique names for each card\n@@ -85,7 +75,7 @@\n      */\n     public ThrottleWindow() {\n         super();\n-        throttlePanelsCyclingKeyListener = new ThrottlePanelCyclingKeyListener();\n+        myInputsListener = new ThrottleWindowInputsListener(this);\n         powerMgr = InstanceManager.getNullableDefault(PowerManager.class);\n         if (powerMgr == null) {\n             log.info(\"No power manager instance found, panel not active\");\n@@ -113,8 +103,9 @@ private void initGUI() {\n         throttlesPanel.add(getCurrentThrottleFrame(), \"default\");\n         throttleFrames.put(\"default\", getCurrentThrottleFrame());\n         add(throttlesPanel, BorderLayout.CENTER);\n-        KeyListenerInstaller.installKeyListenerOnAllComponents(throttlePanelsCyclingKeyListener, getCurrentThrottleFrame());\n-\n+        \n+        installInputsListenerOnAllComponents(throttlesPanel);\n+        \n         this.addWindowListener(new WindowAdapter() {\n             @Override\n             public void windowClosing(WindowEvent e) {\n@@ -131,6 +122,19 @@ public void windowClosing(WindowEvent e) {\n                     }\n                 }\n             }\n+            @Override\n+            public void windowGainedFocus(WindowEvent e) {\n+                super.windowGainedFocus(e);\n+                ThrottleWindow me = (ThrottleWindow) e.getSource();\n+                me.getCurrentThrottleFrame().requestFocusInWindow();\n+            }\n+            @Override\n+            public void windowActivated(WindowEvent e) {\n+                super.windowActivated(e);\n+                ThrottleWindow me = (ThrottleWindow) e.getSource();\n+                me.getCurrentThrottleFrame().requestFocusInWindow();\n+            }            \n+            \n         });\n         updateGUI();\n     }\n@@ -168,6 +172,7 @@ public void updateGUI() {\n                 jbNextRunning.setEnabled(false);\n             }\n         }\n+        throttlesPanel.requestFocusInWindow();\n     }\n \n     private void initializeToolbar() {\n@@ -231,7 +236,7 @@ private void initializeToolbar() {\n         throttleToolBar.add(new StopAllButton());\n \n         if (powerMgr != null) {\n-            throttleToolBar.add(new LargePowerManagerButton());\n+            throttleToolBar.add(new LargePowerManagerButton(false));\n         }\n \n         throttleToolBar.addSeparator();\n@@ -495,7 +500,7 @@ public JCheckBoxMenuItem getViewSpeedPanel() {\n \n     public ThrottleFrame getCurrentThrottleFrame() {\n         return currentThrottleFrame;\n-    }\n+    }    \n \n     public void setCurrentThrottleFrame(ThrottleFrame tf) {\n         if (getCurrentThrottleFrame() != null) {\n@@ -593,7 +598,7 @@ public void addThrottleFrame(ThrottleFrame tp) {\n \n     public ThrottleFrame addThrottleFrame() {\n         setCurrentThrottleFrame(new ThrottleFrame(this));\n-        KeyListenerInstaller.installKeyListenerOnAllComponents(throttlePanelsCyclingKeyListener, getCurrentThrottleFrame());\n+        installInputsListenerOnAllComponents(getCurrentThrottleFrame());\n         addThrottleFrame(getCurrentThrottleFrame());\n         return getCurrentThrottleFrame();\n     }\n@@ -722,30 +727,6 @@ public void setXml(Element e) {\n         updateGUI();\n     }\n \n-    /**\n-     * A KeyAdapter that listens for the key that cycles through the\n-     * ThrottlePanels.\n-     */\n-    class ThrottlePanelCyclingKeyListener extends KeyAdapter {\n-\n-        /**\n-         * Description of the Method\n-         *\n-         * @param e Description of the Parameter\n-         */\n-        @Override\n-        public void keyReleased(KeyEvent e) {\n-            log.trace(\"TW {}\", e);\n-            if (e.isAltDown() && e.getKeyCode() == NEXT_THROTTLE_KEY) {\n-                log.debug(\"next\");\n-                nextThrottleFrame();\n-            } else if (e.isAltDown() && e.getKeyCode() == PREV_THROTTLE_KEY) {\n-                log.debug(\"previous\");\n-                previousThrottleFrame();\n-            }\n-        }\n-    }\n-\n     @Override\n     public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener l) {\n         pcs.addPropertyChangeListener(l);\n@@ -755,6 +736,20 @@ public synchronized void addPropertyChangeListener(java.beans.PropertyChangeList\n     public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener l) {\n         pcs.removePropertyChangeListener(l);\n     }\n+    \n+    private void installInputsListenerOnAllComponents(Container c) {\n+        c.addKeyListener(myInputsListener);\n+        c.addMouseWheelListener(myInputsListener);        \n+        Component[] components = c.getComponents();\n+        for (Component component : components) {\n+            if (component instanceof Container) {\n+                installInputsListenerOnAllComponents( (Container) component);\n+            } else {\n+                component.addKeyListener(myInputsListener);\n+                component.addMouseWheelListener(myInputsListener);                \n+            }\n+        }\n+    }    \n \n     private final static Logger log = LoggerFactory.getLogger(ThrottleWindow.class);\n }"
  },
  {
    "sha": "c1a5367ce27a2238e3be8362b3e69a8cddf97b97",
    "filename": "java/src/jmri/jmrit/throttle/ThrottleWindowInputsListener.java",
    "status": "added",
    "additions": 200,
    "deletions": 0,
    "changes": 200,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleWindowInputsListener.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleWindowInputsListener.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ThrottleWindowInputsListener.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -0,0 +1,200 @@\n+package jmri.jmrit.throttle;\n+\n+import java.awt.event.*;\n+import java.util.stream.IntStream;\n+\n+import javax.swing.JInternalFrame;\n+\n+import jmri.DccThrottle;\n+import jmri.InstanceManager;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ *\n+ * @author Lionel Jeanson\n+ */\n+public class ThrottleWindowInputsListener implements KeyListener, MouseWheelListener {\n+\n+    private final ThrottleWindow tw;\n+    \n+    ThrottleWindowInputsListener(ThrottleWindow tw) {\n+        this.tw = tw;\n+    }\n+    \n+    @Override\n+    public void keyTyped(KeyEvent e) {\n+    }\n+\n+    @Override\n+    public void keyPressed(KeyEvent e) {\n+        if (e.isAltDown() || e.isMetaDown() || e.isShiftDown()) {\n+            return;\n+        }\n+        \n+        // Throttle commands\n+        DccThrottle throttle = tw.getCurrentThrottleFrame().getAddressPanel().getThrottle();\n+        if (throttle != null) {\n+            // speed\n+            if ( IntStream.of(ThrottleWindowKeyboardControls.ACCELERATE_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                if (e.isControlDown()) {\n+                    incrementSpeed(throttle, throttle.getSpeedIncrement()*ThrottleWindowKeyboardControls.MORE_SPEED_MULTIPLIER);\n+                } else {\n+                    incrementSpeed(throttle, throttle.getSpeedIncrement());\n+                }\n+            } else if (IntStream.of(ThrottleWindowKeyboardControls.DECELERATE_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                if (e.isControlDown()) {\n+                    incrementSpeed(throttle, -throttle.getSpeedIncrement()*ThrottleWindowKeyboardControls.MORE_SPEED_MULTIPLIER);\n+                } else {                \n+                    incrementSpeed(throttle, -throttle.getSpeedIncrement());\n+                }\n+            } else if (IntStream.of(ThrottleWindowKeyboardControls.ACCELERATEMORE_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                incrementSpeed(throttle, throttle.getSpeedIncrement()*ThrottleWindowKeyboardControls.MORE_SPEED_MULTIPLIER);\n+            } else if (IntStream.of(ThrottleWindowKeyboardControls.DECELERATEMORE_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                incrementSpeed(throttle, -throttle.getSpeedIncrement()*ThrottleWindowKeyboardControls.MORE_SPEED_MULTIPLIER);\n+            }\n+            // momentary function buttons\n+            for (int i=0;i<ThrottleWindowKeyboardControls.FUNCTIONS_KEY.length;i++) {\n+                if ( ThrottleWindowKeyboardControls.FUNCTIONS_KEY[i] == e.getKeyCode()) {\n+                    if (throttle.getFunctionMomentary(i) || ( !tw.getCurrentThrottleFrame().getFunctionPanel().getFunctionButtons()[i].getIsLockable())) {\n+                        throttle.setFunction(i, true );\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void keyReleased(KeyEvent e) {\n+        // Throttle commands\n+        DccThrottle throttle = tw.getCurrentThrottleFrame().getAddressPanel().getThrottle();\n+        if (throttle != null) {\n+            // speed\n+            if (IntStream.of(ThrottleWindowKeyboardControls.FORWARD_KEY).anyMatch(x->x==e.getKeyCode()) ) {\n+                throttle.setIsForward(true);\n+            } else if (IntStream.of(ThrottleWindowKeyboardControls.REVERSE_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                throttle.setIsForward(false);\n+            } else if (IntStream.of(ThrottleWindowKeyboardControls.IDLE_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                throttle.setSpeedSetting(0);\n+            } else if (IntStream.of(ThrottleWindowKeyboardControls.STOP_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+                throttle.setSpeedSetting(-1);\n+            }\n+            // functions\n+            for (int i=0;i<ThrottleWindowKeyboardControls.FUNCTIONS_KEY.length;i++) {\n+                if ( ThrottleWindowKeyboardControls.FUNCTIONS_KEY[i] == e.getKeyCode()) {\n+                    throttle.setFunction(i, ! throttle.getFunction(i));\n+                    break;\n+                }\n+            }            \n+        }\n+        \n+        // Throttle inner window cycling and focus\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.NEXT_THROTTLE_INTW_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            tw.getCurrentThrottleFrame().activateNextJInternalFrame();\n+        }\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.PREV_THROTTLE_INTW_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            tw.getCurrentThrottleFrame().activateNextJInternalFrame();\n+        }\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.MOVE_TO_CONTROL_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            toFront(tw.getCurrentThrottleFrame().getControlPanel());\n+        }\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.MOVE_TO_FUNCTIONS_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            toFront(tw.getCurrentThrottleFrame().getFunctionPanel());            \n+        }\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.MOVE_TO_ADDRESS_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            toFront(tw.getCurrentThrottleFrame().getAddressPanel());\n+        }        \n+        \n+        // Throttle frames control\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.NEXT_THROTTLE_FRAME_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            tw.nextThrottleFrame();\n+        }\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.PREV_THROTTLE_FRAME_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            tw.previousThrottleFrame();\n+        }\n+\n+        // Throttle windows control\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.NEXT_THROTTLE_WINDOW_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            InstanceManager.getDefault(ThrottleFrameManager.class).requestFocusForNextThrottleWindow();\n+        }\n+        if ( IntStream.of(ThrottleWindowKeyboardControls.PREV_THROTTLE_WINDOW_KEYS).anyMatch(x->x==e.getKeyCode()) ) {\n+            InstanceManager.getDefault(ThrottleFrameManager.class).requestFocusForNextThrottleWindow();\n+        }                \n+    }\n+        \n+    private void toFront(JInternalFrame jif) {\n+        if (jif == null) {\n+            return;\n+        }\n+        jif.requestFocus();\n+        jif.toFront();\n+        try {\n+            jif.setSelected(true);\n+        } catch (java.beans.PropertyVetoException ex) {\n+            log.debug(\"JInternalFrame selection vetoed\");\n+        }\n+    }\n+    \n+    private void incrementSpeed(DccThrottle throttle, float increment) {\n+        if (throttle == null) {\n+            return;\n+        }\n+        float speed;\n+        if (tw.getCurrentThrottleFrame().getControlPanel().getDisplaySlider() == ControlPanel.SLIDERDISPLAYCONTINUOUS ) {\n+            if (throttle.getIsForward()) {\n+                speed = throttle.getSpeedSetting() + increment;\n+                if (speed > -throttle.getSpeedIncrement() && speed < throttle.getSpeedIncrement()) {\n+                    speed = 0;\n+                }\n+                if (speed < 0) {\n+                    throttle.setIsForward(false);\n+                    speed = -speed;\n+                }\n+            } else {\n+                speed = -throttle.getSpeedSetting() + increment;\n+                if (speed > -throttle.getSpeedIncrement() && speed < throttle.getSpeedIncrement()) {\n+                    speed = 0;\n+                }                \n+                if (speed > 0) {\n+                    throttle.setIsForward(true);\n+                } else {                        \n+                    speed = -speed;\n+                }\n+            }            \n+        } else {\n+            speed = throttle.getSpeedSetting() + increment;\n+        }\n+        if (speed < 0) {\n+            speed = 0;\n+        } else if (speed > 1) {\n+            speed = 1;\n+        }\n+        throttle.setSpeedSetting( speed );               \n+    }\n+    \n+    @Override\n+    public void mouseWheelMoved(MouseWheelEvent e) {\n+        // Throttle commands\n+        DccThrottle throttle = tw.getCurrentThrottleFrame().getAddressPanel().getThrottle();\n+        if (throttle != null) {\n+            float multiplier = 0;\n+            if (e.getWheelRotation() > 0) {\n+                multiplier = -1f;\n+                if ( e.isControlDown() ) {\n+                    multiplier = - ThrottleWindowKeyboardControls.MORE_SPEED_MULTIPLIER;\n+                }\n+            } else {\n+                multiplier = 1f;\n+                if ( e.isControlDown() ) {\n+                    multiplier = ThrottleWindowKeyboardControls.MORE_SPEED_MULTIPLIER;\n+                }\n+            }\n+            incrementSpeed(throttle, throttle.getSpeedIncrement() * multiplier);\n+        }        \n+    }\n+\n+    private final static Logger log = LoggerFactory.getLogger(ThrottleWindowInputsListener.class);    \n+}"
  },
  {
    "sha": "e385f2190fc990af38f72f0065f6bb01b1335b44",
    "filename": "java/src/jmri/jmrit/throttle/ThrottleWindowKeyboardControls.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleWindowKeyboardControls.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottleWindowKeyboardControls.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ThrottleWindowKeyboardControls.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -0,0 +1,111 @@\n+package jmri.jmrit.throttle;\n+\n+import java.awt.event.KeyEvent;\n+\n+/**\n+ *\n+ * @author Lionel Jeanson - 2021\n+ */\n+public class ThrottleWindowKeyboardControls {\n+    // speed multiplier\n+    static final float MORE_SPEED_MULTIPLIER = 5f;\n+    \n+    // moving through throttle windows\n+    static final int[] NEXT_THROTTLE_WINDOW_KEYS = { \n+        KeyEvent.VK_INSERT \n+    };\n+    static final int[] PREV_THROTTLE_WINDOW_KEYS = { \n+        KeyEvent.VK_DELETE \n+    };\n+    // moving through 1 throttle window frames\n+    static final int[] NEXT_THROTTLE_FRAME_KEYS = { \n+        KeyEvent.VK_END \n+    };\n+    static final int[] PREV_THROTTLE_FRAME_KEYS = { \n+        KeyEvent.VK_HOME \n+    };   \n+    \n+    // moving through internal windows\n+    static final int[] NEXT_THROTTLE_INTW_KEYS = { \n+        KeyEvent.VK_K };\n+    static final int[] PREV_THROTTLE_INTW_KEYS = { \n+        KeyEvent.VK_L };\n+    \n+    // select internal window\n+    static final int[] MOVE_TO_CONTROL_KEYS = { \n+        KeyEvent.VK_C \n+    };\n+    static final int[] MOVE_TO_FUNCTIONS_KEYS = { \n+        KeyEvent.VK_F \n+    };\n+    static final int[] MOVE_TO_ADDRESS_KEYS = { \n+        KeyEvent.VK_A \n+    };\n+    \n+    \n+    // Speed\n+    static final int[] REVERSE_KEYS = { \n+        KeyEvent.VK_DOWN // Down arrow\n+    }; \n+    static final int[] FORWARD_KEY = { \n+        KeyEvent.VK_UP // Up arrow\n+    }; \n+    \n+    static final int[] IDLE_KEYS = {\n+        KeyEvent.VK_MULTIPLY,  // numpad *\n+        KeyEvent.VK_SPACE\n+    };\n+    static final int[] STOP_KEYS = {\n+        KeyEvent.VK_DIVIDE, // numpad /\n+        KeyEvent.VK_ESCAPE\n+    };\n+    \n+    static final int[] ACCELERATE_KEYS = {\n+        KeyEvent.VK_ADD,  // numpad +\n+        KeyEvent.VK_LEFT\n+    };\n+    static final int[] DECELERATE_KEYS = {\n+        KeyEvent.VK_SUBTRACT, // numpad -;\n+        KeyEvent.VK_RIGHT\n+    };\n+    static final int[] ACCELERATEMORE_KEYS = {\n+        KeyEvent.VK_PAGE_UP \n+    };\n+    static final int[] DECELERATEMORE_KEYS = {\n+        KeyEvent.VK_PAGE_DOWN\n+    };    \n+    \n+    // function buttons\n+    static final int FUNCTIONS_KEY[] = { \n+        KeyEvent.VK_NUMPAD0, // F0\n+        KeyEvent.VK_NUMPAD1, // F1\n+        KeyEvent.VK_NUMPAD2, // F2\n+        KeyEvent.VK_NUMPAD3, // F3\n+        KeyEvent.VK_NUMPAD4, // F4\n+        KeyEvent.VK_NUMPAD5, // F5\n+        KeyEvent.VK_NUMPAD6, // F6\n+        KeyEvent.VK_NUMPAD7, // F7\n+        KeyEvent.VK_NUMPAD8, // F8\n+        KeyEvent.VK_NUMPAD9, // F9\n+        KeyEvent.VK_DECIMAL, // F10\n+        KeyEvent.VK_F11, // F11\n+        KeyEvent.VK_F12, // F12\n+        KeyEvent.VK_F13, // F13\n+        KeyEvent.VK_F14, // F14\n+        KeyEvent.VK_F15, // F15\n+        KeyEvent.VK_F16, // F16\n+        KeyEvent.VK_F17, // F17\n+        KeyEvent.VK_F18, // F18\n+        KeyEvent.VK_F19, // F19\n+        KeyEvent.VK_F20, // F20\n+        KeyEvent.VK_F21, // F21\n+        KeyEvent.VK_F22, // F22\n+        KeyEvent.VK_F23, // F23\n+        KeyEvent.VK_F24, // F24\n+        0xF00C, // F25\n+        0xF00D, // F26\n+        0xF00E, // F27\n+        0xF00F  // F28\n+    };\n+\n+}"
  },
  {
    "sha": "af16e676f584ae716d69a9cac08546331c1a3223",
    "filename": "java/src/jmri/jmrit/throttle/ThrottlesListPanel.java",
    "status": "modified",
    "additions": 6,
    "deletions": 9,
    "changes": 15,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottlesListPanel.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/jmrit/throttle/ThrottlesListPanel.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/jmrit/throttle/ThrottlesListPanel.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -18,7 +18,7 @@\n \n public class ThrottlesListPanel extends JPanel {\n \n-    private ThrottlesTableModel throttleFramesLM;\n+    private final ThrottlesTableModel throttleFramesLM;\n     private JTable throttleFrames;\n \n     public ThrottlesListPanel() {\n@@ -72,18 +72,15 @@ public void mouseReleased(MouseEvent arg0) {\n         jbNew.setToolTipText(Bundle.getMessage(\"ThrottleToolBarNewWindowToolTip\"));\n         jbNew.setVerticalTextPosition(JButton.BOTTOM);\n         jbNew.setHorizontalTextPosition(JButton.CENTER);\n-        jbNew.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                ThrottleFrame tf = InstanceManager.getDefault(ThrottleFrameManager.class).createThrottleFrame();\n-                tf.toFront();\n-            }\n+        jbNew.addActionListener((ActionEvent e) -> {\n+            ThrottleFrame tf = InstanceManager.getDefault(ThrottleFrameManager.class).createThrottleFrame();\n+            tf.toFront();\n         });\n         throttleToolBar.add(jbNew);\n \n         throttleToolBar.addSeparator();\n         throttleToolBar.add(new StopAllButton());\n-        throttleToolBar.add(new LargePowerManagerButton());\n+        throttleToolBar.add(new LargePowerManagerButton(false));\n \n         add(throttleToolBar, BorderLayout.PAGE_START);\n         add(scrollPane1, BorderLayout.CENTER);\n@@ -100,7 +97,7 @@ public void actionPerformed(ActionEvent e) {\n \n     public Element getXml() {\n         Element me = new Element(\"ThrottlesListPanel\");\n-        java.util.ArrayList<Element> children = new java.util.ArrayList<Element>(1);\n+        java.util.ArrayList<Element> children = new java.util.ArrayList<>(1);\n         children.add(WindowPreferences.getPreferences(this.getTopLevelAncestor()));\n         me.setContent(children);\n         return me;"
  },
  {
    "sha": "5c9a1902dc01136d3266fa17f3593c2668c56acf",
    "filename": "java/src/jmri/util/swing/WrapLayout.java",
    "status": "added",
    "additions": 174,
    "deletions": 0,
    "changes": 174,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/util/swing/WrapLayout.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/src/jmri/util/swing/WrapLayout.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/util/swing/WrapLayout.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -0,0 +1,174 @@\n+package jmri.util.swing;\n+\n+import java.awt.*;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+/**\n+ * FlowLayout subclass that fully supports wrapping of components.\n+ */\n+public class WrapLayout extends FlowLayout {\n+\n+    /**\n+     * Constructs a new <code>WrapLayout</code> with a left alignment and a\n+     * default 5-unit horizontal and vertical gap.\n+     */\n+    public WrapLayout() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new <code>FlowLayout</code> with the specified alignment and\n+     * a default 5-unit horizontal and vertical gap. The value of the alignment\n+     * argument must be one of <code>WrapLayout</code>, <code>WrapLayout</code>,\n+     * or <code>WrapLayout</code>.\n+     *\n+     * @param align the alignment value\n+     */\n+    public WrapLayout(int align) {\n+        super(align);\n+    }\n+\n+    /**\n+     * Creates a new flow layout manager with the indicated alignment and the\n+     * indicated horizontal and vertical gaps.\n+     * <p>\n+     * The value of the alignment argument must be one of\n+     * <code>WrapLayout</code>, <code>WrapLayout</code>, or\n+     * <code>WrapLayout</code>.\n+     *\n+     * @param align the alignment value\n+     * @param hgap  the horizontal gap between components\n+     * @param vgap  the vertical gap between components\n+     */\n+    public WrapLayout(int align, int hgap, int vgap) {\n+        super(align, hgap, vgap);\n+    }\n+\n+    /**\n+     * Returns the preferred dimensions for this layout given the\n+     * <i>visible</i> components in the specified target container.\n+     *\n+     * @param target the component which needs to be laid out\n+     * @return the preferred dimensions to lay out the subcomponents of the\n+     *         specified container\n+     */\n+    @Override\n+    public Dimension preferredLayoutSize(Container target) {\n+        return layoutSize(target, true);\n+    }\n+\n+    /**\n+     * Returns the minimum dimensions needed to layout the <i>visible</i>\n+     * components contained in the specified target container.\n+     *\n+     * @param target the component which needs to be laid out\n+     * @return the minimum dimensions to lay out the subcomponents of the\n+     *         specified container\n+     */\n+    @Override\n+    public Dimension minimumLayoutSize(Container target) {\n+        Dimension minimum = layoutSize(target, false);\n+        minimum.width -= (getHgap() + 1);\n+        return minimum;\n+    }\n+\n+    /**\n+     * Returns the minimum or preferred dimension needed to layout the target\n+     * container.\n+     *\n+     * @param target    target to get layout size for\n+     * @param preferred should preferred size be calculated\n+     * @return the dimension to layout the target container\n+     */\n+    private Dimension layoutSize(Container target, boolean preferred) {\n+        synchronized (target.getTreeLock()) {\n+            //  Each row must fit with the width allocated to the containter.\n+            //  When the container width = 0, the preferred width of the container\n+            //  has not yet been calculated so lets ask for the maximum.\n+\n+            Container container = target;\n+\n+            while (container.getSize().width == 0 && container.getParent() != null) {\n+                container = container.getParent();\n+            }\n+\n+            int targetWidth = container.getSize().width;\n+\n+            if (targetWidth == 0) {\n+                targetWidth = Integer.MAX_VALUE;\n+            }\n+\n+            int hgap = getHgap();\n+            int vgap = getVgap();\n+            Insets insets = target.getInsets();\n+            int horizontalInsetsAndGap = insets.left + insets.right + (hgap * 2);\n+            int maxWidth = targetWidth - horizontalInsetsAndGap;\n+\n+            //  Fit components into the allowed width\n+            Dimension dim = new Dimension(0, 0);\n+            int rowWidth = 0;\n+            int rowHeight = 0;\n+\n+            int nmembers = target.getComponentCount();\n+\n+            for (int i = 0; i < nmembers; i++) {\n+                Component m = target.getComponent(i);\n+\n+                if (m.isVisible()) {\n+                    Dimension d = preferred ? m.getPreferredSize() : m.getMinimumSize();\n+\n+                    //  Can't add the component to current row. Start a new row.\n+                    if (rowWidth + d.width > maxWidth) {\n+                        addRow(dim, rowWidth, rowHeight);\n+                        rowWidth = 0;\n+                        rowHeight = 0;\n+                    }\n+\n+                    //  Add a horizontal gap for all components after the first\n+                    if (rowWidth != 0) {\n+                        rowWidth += hgap;\n+                    }\n+\n+                    rowWidth += d.width;\n+                    rowHeight = Math.max(rowHeight, d.height);\n+                }\n+            }\n+\n+            addRow(dim, rowWidth, rowHeight);\n+\n+            dim.width += horizontalInsetsAndGap;\n+            dim.height += insets.top + insets.bottom + vgap * 2;\n+\n+            // When using a scroll pane or the DecoratedLookAndFeel we need to\n+            // make sure the preferred size is less than the size of the\n+            // target containter so shrinking the container size works\n+            // correctly. Removing the horizontal gap is an easy way to do this.\n+            Container scrollPane = SwingUtilities.getAncestorOfClass(JScrollPane.class, target);\n+\n+            if (scrollPane != null && target.isValid()) {\n+                dim.width -= (hgap + 1);\n+            }\n+\n+            return dim;\n+        }\n+    }\n+\n+    /*\n+     *  A new row has been completed. Use the dimensions of this row\n+     *  to update the preferred size for the container.\n+     *\n+     *  @param dim update the width and height when appropriate\n+     *  @param rowWidth the width of the row to add\n+     *  @param rowHeight the height of the row to add\n+     */\n+    private void addRow(Dimension dim, int rowWidth, int rowHeight) {\n+        dim.width = Math.max(dim.width, rowWidth);\n+\n+        if (dim.height > 0) {\n+            dim.height += getVgap();\n+        }\n+\n+        dim.height += rowHeight;\n+    }\n+}"
  },
  {
    "sha": "9d2da6ed2ffadc123259b775fd0b7aa8d70f3a37",
    "filename": "java/src/jmri/util/usb/RailDriverMenuItem.java",
    "status": "removed",
    "additions": 0,
    "deletions": 801,
    "changes": 801,
    "blob_url": "https://github.com/JMRI/JMRI/blob/0519957ae81ab7afce047de1c1268e37488f81eb/java/src/jmri/util/usb/RailDriverMenuItem.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/0519957ae81ab7afce047de1c1268e37488f81eb/java/src/jmri/util/usb/RailDriverMenuItem.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/src/jmri/util/usb/RailDriverMenuItem.java?ref=0519957ae81ab7afce047de1c1268e37488f81eb",
    "patch": "@@ -1,801 +0,0 @@\n-package jmri.util.usb;\n-\n-\n-import java.awt.event.ActionEvent;\n-import java.beans.PropertyChangeEvent;\n-import java.beans.PropertyChangeListener;\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.concurrent.TimeUnit;\n-import javax.annotation.Nonnull;\n-import javax.swing.JMenuItem;\n-import javax.swing.JSlider;\n-import javax.swing.SwingUtilities;\n-import jmri.*;\n-import jmri.implementation.AbstractShutDownTask;\n-import jmri.jmrit.roster.swing.RosterEntryComboBox;\n-import jmri.jmrit.roster.swing.RosterEntrySelectorPanel;\n-import jmri.jmrit.throttle.AddressPanel;\n-import jmri.jmrit.throttle.ControlPanel;\n-import jmri.jmrit.throttle.FunctionButton;\n-import jmri.jmrit.throttle.FunctionPanel;\n-import jmri.jmrit.throttle.LoadXmlThrottlesLayoutAction;\n-import jmri.jmrit.throttle.ThrottleFrame;\n-import jmri.jmrit.throttle.ThrottleFrameManager;\n-import jmri.jmrit.throttle.ThrottleWindow;\n-import jmri.util.MathUtil;\n-import org.hid4java.*;\n-import org.hid4java.event.HidServicesEvent;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * RailDriver support\n- *\n- * @author George Warner Copyright (c) 2017-2018\n- */\n-public class RailDriverMenuItem extends JMenuItem\n-        implements HidServicesListener, PropertyChangeListener {\n-\n-    private static final short VENDOR_ID = 0x05F3;\n-    private static final short PRODUCT_ID = 0x00D2;\n-    public static final String SERIAL_NUMBER = null;\n-\n-    private HidServices hidServices = null;\n-\n-    private HidDevice hidDevice = null;\n-\n-    public RailDriverMenuItem(String name) {\n-        this();\n-        setText(name);\n-    }\n-\n-    public RailDriverMenuItem() {\n-\n-        super();\n-\n-        // TODO: remove \"(built in)\" if/when this replaces Raildriver script\n-        setText(Bundle.getMessage(\"RdBuiltIn\"));\n-\n-        addPropertyChangeListener(this);\n-\n-        addActionListener((ActionEvent e) -> {\n-            // menu item selected\n-            log.info(\"RailDriverMenuItem Action!\");\n-\n-            setupHidServices();\n-\n-            // Open the device device by Vendor ID, Product ID and serial number\n-            HidDevice hidDevice = hidServices.getHidDevice(VENDOR_ID, PRODUCT_ID, SERIAL_NUMBER);\n-            if (hidDevice != null) {\n-                log.info(\"Got RailDriver hidDevice: {}\", hidDevice);\n-                // Consider overriding dropReportIdZero on Windows\n-                // if you see \"The parameter is incorrect\"\n-                // HidApi.dropReportIdZero = true;\n-                setupRailDriver(hidDevice);\n-            }\n-        });\n-    }\n-\n-    //TODO: Remove this if/when the RailDriver script is removed\n-    private boolean invokeOnMenuOnly = true;\n-\n-    private Thread thread = null;\n-    private ThrottleWindow throttleWindow = null;\n-    private ThrottleFrame activeThrottleFrame = null;\n-    private ControlPanel controlPanel = null;\n-    private FunctionPanel functionPanel = null;\n-    private AddressPanel addressPanel = null;\n-\n-    protected void setupHidServices() {\n-        try {\n-            HidServicesSpecification hidServicesSpecification = new HidServicesSpecification();\n-            hidServicesSpecification.setAutoShutdown(true);\n-            hidServicesSpecification.setScanInterval(500);\n-            hidServicesSpecification.setPauseInterval(5000);\n-            hidServicesSpecification.setScanMode(ScanMode.SCAN_AT_FIXED_INTERVAL_WITH_PAUSE_AFTER_WRITE);\n-\n-            // Get HID services using custom specification\n-            hidServices = HidManager.getHidServices(hidServicesSpecification);\n-            hidServices.addHidServicesListener(RailDriverMenuItem.this);\n-\n-            // do the services have to be started here?\n-            // They currently wait for the action to be triggered\n-            // so that they're not starting at ctor time, e.g. in tests\n-            // Provide a list of attached devices\n-            //log.info(\"Enumerating attached devices...\");\n-            //for (HidDevice hidDevice : hidServices.getAttachedHidDevices()) {\n-            //    log.info(hidDevice.toString());\n-            //}\n-            //\n-            if (!invokeOnMenuOnly) {\n-                // start the HID services\n-                InstanceManager.getDefault(ShutDownManager.class).register(hidServices::stop);\n-                log.debug(\"Starting HID services.\");\n-                hidServices.start();\n-\n-                // Open the device device by Vendor ID, Product ID and serial number\n-                HidDevice hidDevice = hidServices.getHidDevice(VENDOR_ID, PRODUCT_ID, SERIAL_NUMBER);\n-                if (hidDevice != null) {\n-                    log.info(\"Got RailDriver hidDevice: {}\", hidDevice);\n-                    // Consider overriding dropReportIdZero on Windows\n-                    // if you see \"The parameter is incorrect\"\n-                    // HidApi.dropReportIdZero = true;\n-                    setupRailDriver(hidDevice);\n-                }\n-            }\n-        } catch (HidException ex) {\n-            log.error(\"HidException: {}\", ex);\n-        }\n-    }\n-\n-    private void setupRailDriver(HidDevice hidDevice) {\n-        this.hidDevice = hidDevice;\n-        if (hidDevice != null) {\n-            setLEDs(\"Pro\");\n-            speakerOn();\n-\n-            testRailDriver(false);  // set true to test RailDriver functions\n-\n-            ThrottleFrameManager tfManager = InstanceManager.getDefault(ThrottleFrameManager.class);\n-\n-            // if there's no active throttle frame\n-            if (activeThrottleFrame == null) {\n-                // we're going to try to open the default throttles layout\n-                try {\n-                    LoadXmlThrottlesLayoutAction lxta = new LoadXmlThrottlesLayoutAction();\n-                    if (!lxta.loadThrottlesLayout(new File(ThrottleFrame.getDefaultThrottleFilename()))) {\n-                        // if there's no default throttle layout...\n-                        // throw this exception so we'll create a new throttle window\n-                        throw new IOException();\n-                    }\n-                } catch (IOException ex) {\n-                    //log.debug(\"No default throttle layout, creating an empty throttle window\");\n-                    // open a new throttle window and get its components\n-                    throttleWindow = tfManager.createThrottleWindow();\n-                    activeThrottleFrame = throttleWindow.addThrottleFrame();\n-                }\n-                // move throttle on screen so multiple throttles don't overlay each other\n-                //throttleWindow.setLocation(400 * numThrottles, 50 * numThrottles);\n-            }\n-\n-            // since LoadXmlThrottlesLayoutAction uses an invokeLater to\n-            // open the default throttles layout then we have to delay our\n-            // actions here until after that one is done.\n-            SwingUtilities.invokeLater(() -> {\n-                if (activeThrottleFrame == null) {\n-                    throttleWindow = tfManager.getCurrentThrottleFrame();\n-                    if (throttleWindow != null) {\n-                        activeThrottleFrame = throttleWindow.getCurrentThrottleFrame();\n-                    }\n-                }\n-                if (activeThrottleFrame != null) {\n-                    activeThrottleFrame.toFront();\n-                    controlPanel = activeThrottleFrame.getControlPanel();\n-                    functionPanel = activeThrottleFrame.getFunctionPanel();\n-                    addressPanel = activeThrottleFrame.getAddressPanel();\n-\n-                    throttleWindow.addPropertyChangeListener(this);\n-                    activeThrottleFrame.addPropertyChangeListener(this);\n-                }\n-            });\n-\n-            // if I already have a thread running\n-            if (thread != null) {\n-                // interrupt it\n-                thread.interrupt();\n-                try {\n-                    // wait (500 mSec) for it to die\n-                    thread.join(500);\n-                } catch (InterruptedException ex) {\n-                    log.debug(\"InterruptedException : {}\", ex);\n-                }\n-            }\n-            // start a new thread\n-            thread = new Thread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    byte[] buff_old = new byte[14]; // read buffer\n-                    Arrays.fill(buff_old, (byte) 0);\n-\n-                    while (!thread.isInterrupted()) {\n-                        if (!hidDevice.isOpen()) {\n-                            hidDevice.open();\n-                        }\n-                        byte[] buff_new = new byte[14]; // read buffer\n-                        int ret = hidDevice.read(buff_new);\n-                        if (ret >= 0) {\n-                            //log.debug(\"hidDevice.read: {}\", buff_new);\n-                            for (int i = 0; i < buff_new.length; i++) {\n-                                if (buff_old[i] != buff_new[i]) {\n-                                    if (i < 7) {    // analog values\n-                                        // convert to unsigned int\n-                                        int vInt = 0xFF & buff_new[i];\n-                                        // convert to double (0.0 thru 1.0)\n-                                        double vDouble = (256 - vInt) / 256.D;\n-                                        if (i == 1) {   // throttle\n-                                            // convert to float (-1.0 thru +1.0)\n-                                            vDouble = (2.D * vDouble) - 1.D;\n-                                        }\n-                                        String name = String.format(\"Axis %d\", i);\n-                                        log.info(\"firePropertyChange(\\\"Value\\\", {}, {})\", name, vDouble);\n-                                        firePropertyChange(\"Value\", name, Double.toString(vDouble));\n-                                    } else {        // digital values\n-                                        byte xor = (byte) (buff_old[i] ^ buff_new[i]);\n-                                        for (int bit = 0; bit < 8; bit++) {\n-                                            byte mask = (byte) (1 << bit);\n-                                            if (mask == (mask & xor)) {\n-                                                int n = (8 * (i - 7)) + bit;\n-                                                String name = String.format(\"%d\", n);\n-                                                boolean down = (mask == (buff_new[i] & mask));\n-                                                log.info(\"firePropertyChange(\\\"Value\\\", {}, {})\", name, down ? \"1\" : \"0\");\n-                                                firePropertyChange(\"Value\", name, down ? \"1\" : \"0\");\n-                                            }\n-                                        }\n-                                    }\n-                                    buff_old[i] = buff_new[i];\n-                                }\n-                            }\n-                        } else {\n-                            String error = hidDevice.getLastErrorMessage();\n-                            if (error != null) {\n-                                log.error(\"hidDevice.read error: {}\", error);\n-                            }\n-                        }\n-                    }\n-                }\n-            });\n-            thread.setName(\"RailDriver\");\n-            thread.start();\n-        }\n-    }\n-\n-    private void testRailDriver(boolean testFlag) {\n-        if (testFlag) {\n-            new Thread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    //\n-                    // this is here for testing the SevenSegmentAlpha (LED display)\n-                    //\n-                    for (int pass = 0; pass < 3; pass++) {\n-                        for (char c = 'A'; c < 'Z'; c++) {\n-                            StringBuilder s = new StringBuilder();\n-                            for (int i = 0; i < 3; i++) {\n-                                char ci = (char) (c + i);\n-                                ci = (char) (((ci - 'A') % 26) + 'A');\n-                                s.append(ci);\n-                                if (0 == ci % 3) {\n-                                    s.append('.');\n-                                }\n-                            }\n-                            setLEDs(s.toString());\n-                            sleep(0.25);\n-                        }\n-                    }\n-\n-                    sendString(\"The quick brown fox jumps over the lazy dog.\", 0.250);\n-                    sleep(2.0);\n-\n-                    setLEDs(\"8.8.8.\");\n-                    sleep(2.0);\n-\n-                    setLEDs(\"???\");\n-                    sleep(3.0);\n-\n-                    setLEDs(\"Pro\");\n-                }\n-            }).start();\n-        }\n-    }\n-\n-    /**\n-     * send a string to the LED display (asynchronously)\n-     *\n-     * @param string what to send\n-     * @param delay  how much to delay before shifting in next character\n-     */\n-    public void sendStringAsync(@Nonnull String string, double delay) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                sendString(string, delay);\n-            }\n-        }).start();\n-    }\n-\n-    /**\n-     * send a string to the LED display\n-     *\n-     * @param string what to send\n-     * @param delay  how much to delay before shifting in next character\n-     */\n-    public void sendString(@Nonnull String string, double delay) {\n-        for (int i = 0; i < string.length(); i++) {\n-            StringBuilder ledstring = new StringBuilder();\n-            int maxJ = 3;\n-            for (int j = 0; j < maxJ; j++) {\n-                if (i + j < string.length()) {\n-                    char c = string.charAt(i + j);\n-                    ledstring.append(c);\n-                    if (c == '.') {\n-                        maxJ++;\n-                    }\n-                } else {\n-                    break;\n-                }\n-            }\n-            setLEDs(ledstring.toString());\n-            sleep(delay);\n-        }\n-    }\n-\n-    private void sleep(double delay) {\n-        try {\n-            TimeUnit.MILLISECONDS.sleep((long) (delay * 1000.0));\n-        } catch (InterruptedException ex) {\n-            log.debug(\"TimeUnit.sleep InterruptedException: {}\", ex);\n-        }\n-    }\n-\n-    //\n-    // constants used to talk to RailDriver\n-    //\n-    // these are the report ID's\n-    private final byte LEDCommand = (byte) 134; // Command code to set the LEDs.\n-    private final byte SpeakerCommand = (byte) 133; // Command code to set the speaker state.\n-\n-    // Seven segment lookup table for digits ('0' thru '9')\n-    private final byte SevenSegment[] = {\n-        //'0'   '1'   '2'   '3'   '4'   '5'   '6'   '7'   '8'   '9'\n-        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};\n-\n-    // Seven segment lookup table for alphas ('A' thru 'Z')\n-    private final byte SevenSegmentAlpha[] = {\n-        //'A'   'b'   'C'   'd'   'E'   'F'   'g'   'H'   'i'   'J'\n-        0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x6F, 0x76, 0x04, 0x1E,\n-        //'K'   'L'   'm'   'n'   'o'   'P'   'q'   'r'   's'   't'\n-        0x70, 0x38, 0x54, 0x23, 0x5C, 0x73, 0x67, 0x50, 0x6D, 0x44,\n-        //'u'   'v'   'W'   'X'   'y'   'z'\n-        0x1C, 0x62, 0x14, 0x36, 0x72, 0x49\n-    };\n-\n-    // other seven segment display patterns\n-    private final byte BLANKSEGMENT = 0x00;\n-    private final byte QUESTIONMARK = 0x53;\n-    private final byte DASHSEGMENT = 0x40;\n-    private final byte DPSEGMENT = (byte) 0x80;\n-\n-    // Set the LEDS.\n-    public void setLEDs(@Nonnull String ledstring) {\n-        byte[] buff = new byte[7]; // Segment buffer.\n-        Arrays.fill(buff, (byte) 0);\n-\n-        int outIdx = 2;\n-        for (int i = 0; i < ledstring.length(); i++) {\n-            char c = ledstring.charAt(i);\n-            if (Character.isDigit(c)) {\n-                //log.debug(\"buff[{}] = {}\", outIdx, \"\" + c);\n-                // Get seven segment code for digit.\n-                buff[outIdx] = SevenSegment[c - '0'];\n-            } else if (Character.isWhitespace(c)) {\n-                buff[outIdx] = BLANKSEGMENT;\n-            } else if (c == '_') {\n-                buff[outIdx] = BLANKSEGMENT;\n-            } else if (c == '?') {\n-                buff[outIdx] = QUESTIONMARK;\n-            } else if ((c >= 'A') && (c <= 'Z')) {\n-                // Get seven segment code for alpha.\n-                buff[outIdx] = SevenSegmentAlpha[c - 'A'];\n-            } else if ((c >= 'a') && (c <= 'z')) {\n-                // Get seven segment code for alpha.\n-                buff[outIdx] = SevenSegmentAlpha[c - 'a'];\n-            } else if (c == '-') {\n-                buff[outIdx] = DASHSEGMENT;\n-            } else // Is it a decimal point?\n-            if (c == '.') {\n-                // If so, OR in the decimal point segment.\n-                buff[outIdx + 1] |= DPSEGMENT;\n-                outIdx++;\n-            } else {    // everything else is ignored\n-                outIdx++;\n-            }\n-            outIdx--;\n-            if (outIdx < 0) {\n-                if (++i < ledstring.length()) {\n-                    if (ledstring.charAt(i) == '.') {\n-                        buff[0] |= DPSEGMENT;\n-                    }\n-                }\n-                break;\n-            }\n-        }\n-        sendMessage(hidDevice, buff, LEDCommand);\n-    }   // setLEDs\n-\n-    public void setSpeakerOn(boolean onFlag) {\n-        byte[] buff = new byte[7]; // data buffer\n-        Arrays.fill(buff, (byte) 0);\n-\n-        buff[5] = (byte) (onFlag ? 1 : 0);      // On / off\n-\n-        sendMessage(hidDevice, buff, SpeakerCommand);\n-    }   // setSpeakerOn\n-\n-    // Turn speaker on.\n-    public void speakerOn() {\n-        setSpeakerOn(true);\n-    }\n-\n-    // Turn speaker off.\n-    public void speakerOff() {\n-        setSpeakerOn(false);\n-    }\n-\n-    /**\n-     * send message to hid device {p}\n-     * <p>\n-     * @param hidDevice the hid device to send the message to\n-     * @param message   the message to send\n-     * @param reportID  the report ID\n-     */\n-    private void sendMessage(HidDevice hidDevice, byte[] message, byte reportID) {\n-        // Ensure device is open after an attach/detach event\n-        if (!hidDevice.isOpen()) {\n-            hidDevice.open();\n-        }\n-\n-        try {\n-            int ret = hidDevice.write(message, message.length, reportID);\n-            if (ret >= 0) {\n-                log.debug(\"hidDevice.write returned: {}\", ret);\n-            } else {\n-                log.error(\"hidDevice.write error: {}\", hidDevice.getLastErrorMessage());\n-            }\n-        } catch (IllegalStateException ex) {\n-            log.error(\"hidDevice.write Exception : {}\", ex);\n-        }\n-    }\n-\n-    /*\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void hidDeviceAttached(HidServicesEvent event) {\n-        log.info(\"hidDeviceAttached({})\", event);\n-        HidDevice tHidDevice = event.getHidDevice();\n-        if (tHidDevice.getVendorId() == VENDOR_ID) {\n-            if (tHidDevice.getProductId() == PRODUCT_ID) {\n-                if ((SERIAL_NUMBER == null) || (tHidDevice.getSerialNumber().equals(SERIAL_NUMBER))) {\n-                    if (!invokeOnMenuOnly) {\n-                        setupRailDriver(tHidDevice);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    /*\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void hidDeviceDetached(HidServicesEvent event) {\n-        log.info(\"hidDeviceDetached({})\", event);\n-        if (hidDevice == event.getHidDevice()) {\n-            hidDevice = null;\n-        }\n-    }\n-\n-    /*\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void hidFailure(HidServicesEvent event) {\n-        log.warn(\"hidFailure({})\", event);\n-    }\n-\n-    /*\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void propertyChange(PropertyChangeEvent event) {\n-        // log.debug(\"{}\", event);\n-        if (event.getPropertyName().equals(\"ancestor\")) {\n-            //ancestor property change - closing throttle window\n-            // Remove all property change listeners and\n-            // dereference all throttle components\n-            if (throttleWindow != null) {\n-                throttleWindow.removePropertyChangeListener(this);\n-                throttleWindow = null;\n-            }\n-            if (activeThrottleFrame != null) {\n-                activeThrottleFrame.removePropertyChangeListener(this);\n-                activeThrottleFrame = null;\n-            }\n-            controlPanel = null;\n-            functionPanel = null;\n-            addressPanel = null;\n-            // Now remove this propertyChangeListener from the model\n-            //global model\n-            //model.removePropertyChangeListener(self)\n-        } else if (event.getPropertyName().equals(\"ThrottleFrame\")) {\n-            //Current throttle frame changed\n-            Object object = event.getNewValue();\n-            //log.debug(\"event.newValue(): \" + object);\n-            if (object == null) {\n-                if (activeThrottleFrame != null) {\n-                    activeThrottleFrame.removePropertyChangeListener(this);\n-                    activeThrottleFrame = null;\n-                }\n-                controlPanel = null;\n-                functionPanel = null;\n-                addressPanel = null;\n-            } else if (object instanceof ThrottleFrame) {\n-\n-                if (throttleWindow != null) {\n-                    throttleWindow.removePropertyChangeListener(this);\n-                    throttleWindow = null;\n-                }\n-                if (activeThrottleFrame != null) {\n-                    activeThrottleFrame.removePropertyChangeListener(this);\n-                    activeThrottleFrame = null;\n-                }\n-\n-                activeThrottleFrame = (ThrottleFrame) object;\n-                throttleWindow = activeThrottleFrame.getThrottleWindow();\n-\n-                throttleWindow.addPropertyChangeListener(this);\n-                activeThrottleFrame.addPropertyChangeListener(this);\n-\n-                addressPanel = activeThrottleFrame.getAddressPanel();\n-                controlPanel = activeThrottleFrame.getControlPanel();\n-                functionPanel = activeThrottleFrame.getFunctionPanel();\n-            }\n-        } else if (event.getPropertyName().equals(\"Value\")) {\n-            String oldValue = event.getOldValue().toString();\n-            String newValue = event.getNewValue().toString();\n-            //log.info(\"propertyChange \\\"Value\\\" old: {}, new: {}\", oldValue, newValue);\n-\n-            double value;\n-            try {\n-                value = Double.parseDouble(newValue);\n-            } catch (NumberFormatException ex) {\n-                log.error(\"RailDriver parse property new value ('{}')\", newValue, ex);\n-                return;\n-            }\n-\n-            if (oldValue.equals(\"Axis 0\")) {\n-                // REVERSER is the state of the reverser lever, values greater\n-                // than 0.5 are forward, values near to 0.5 are neutral and\n-                // values (much) less than 0.5 are reverse.\n-                log.info(\"REVERSER value: {}\", value);\n-                if ((controlPanel != null) && controlPanel.isEnabled()) {\n-                    if (value < 0.45) {\n-                        controlPanel.setForwardDirection(false);\n-                    } else if (value > 0.55) {\n-                        controlPanel.setForwardDirection(true);\n-                    }\n-                }\n-            } else if (oldValue.equals(\"Axis 1\")) {\n-                // THROTTLE is the state of the Throttle (and dynamic brake).  Values\n-                // (much) greater than 0.0 are for throttle (maximum throttle is\n-                // values close to 1.0), values near 0.0 are at the center position\n-                // (idle/coasting), and values (much) less than 0.0 are for dynamic\n-                // braking, with values aproaching -1.0 for full dynamic braking.\n-                log.info(\"THROTTLE value: {}\", value);\n-\n-                if (controlPanel != null) {\n-                    JSlider slider = controlPanel.getSpeedSlider();\n-                    if ((slider != null) && slider.isEnabled()) {\n-                        // lever front is negative, back is positive\n-                        // limit range to only positive side of lever\n-                        double throttle_min = 0.125D;\n-                        double throttle_max = 0.7D;\n-                        double v = MathUtil.pin(value, throttle_min, throttle_max);\n-                        // compute fraction (0.0 to 1.0)\n-                        double fraction = (v - throttle_min) / (throttle_max - throttle_min);\n-                        // convert fraction to slider setting\n-                        int setting = (int) (fraction * (slider.getMaximum() - slider.getMinimum()));\n-                        slider.setValue(setting);\n-\n-                        if (value < 0) {\n-                            //TODO: dynamic braking\n-                            setLEDs(\"DBr\");\n-                        } else {\n-                            String speed = String.format(\"%03d\", setting);\n-                            //log.info(\"speed: \" + speed);\n-                            setLEDs(speed);\n-                        }\n-                    }\n-                }\n-            } else if (oldValue.equals(\"Axis 2\")) {\n-                // AUTOBRAKE is the state of the Automatic (trainline) brake.  Large\n-                // values for no braking, small values for more braking.\n-                log.info(\"AUTOBRAKE value: {}\", value);\n-            } else if (oldValue.equals(\"Axis 3\")) {\n-                // INDEPENDBRK is the state of the Independent (engine only) brake.\n-                // Like the Automatic brake: large values for no braking, small\n-                // values for more braking.\n-                log.info(\"INDEPENDBRK value: {}\", value);\n-            } else if (oldValue.equals(\"Axis 4\")) {\n-                // BAILOFF is the Independent brake 'bailoff', this is the spring\n-                // loaded right movement of the Independent brake lever.  Larger\n-                // values mean the lever has been shifted right.\n-                log.info(\"BAILOFF value: {}\", value);\n-            } else if (oldValue.equals(\"Axis 5\")) {\n-                // HEADLIGHT is the state of the headlight switch.  A value below 0.5\n-                // is off, a value near 0.5 is dim, and a number much larger than 0.5\n-                // is full. This is an analog input w/detents, not a switch!\n-                log.info(\"HEADLIGHT value: {}\", value);\n-            } else if (oldValue.equals(\"Axis 6\")) {\n-                // WIPER is the state of the wiper switch.  Much like the headlight\n-                // switch, this is also an analog input w/detents, not a switch!\n-                // Small values (much less than 0.5) are off, values near 0.5 are\n-                // slow, and larger values are full.\n-                log.info(\"WIPER value: {}\", value);\n-            } else {\n-                log.info(\"FUNCTION {} value: {}\", oldValue, value);\n-                if (functionPanel != null) {\n-                    FunctionButton[] functionButtons = functionPanel.getFunctionButtons();\n-                    boolean isDown = (value > 0.5D);\n-\n-                    int fNum = -1;\n-                    try {\n-                        fNum = Integer.parseInt(oldValue);\n-                    } catch (NumberFormatException ex) {\n-                        //log.error(\"RailDriver parse property new value ('{}') exception: {}\", newValue, ex);\n-                        return;\n-                    }\n-\n-                    String ledString = String.format(\"F%d\", fNum + 1);\n-\n-                    switch (fNum) {\n-                        case 28: {  // zoom/rocker button up\n-                            if ((addressPanel != null) && isDown) {\n-                                addressPanel.selectRosterEntry();\n-                                DccLocoAddress a = addressPanel.getCurrentAddress();\n-                                ledString = \"sel \" + ((a != null) ? a.toString() : \"null\");\n-                            }\n-                            break;\n-                        }\n-                        case 29: {  // zoom/rocker button down\n-                            if ((addressPanel != null) && isDown) {\n-                                addressPanel.dispatchAddress();\n-                                DccLocoAddress a = addressPanel.getCurrentAddress();\n-                                ledString = \"dis \" + ((a != null) ? a.toString() : \"null\");\n-                            }\n-                            break;\n-                        }\n-                        case 30: {  // four way panning up\n-                            if ((addressPanel != null) && isDown) {\n-                                int selectedIndex = addressPanel.getRosterSelectedIndex();\n-                                if (selectedIndex > 1) {\n-                                    addressPanel.setRosterSelectedIndex(selectedIndex - 1);\n-                                    ledString = String.format(\"Prev %d\", selectedIndex - 1);\n-                                }\n-                            }\n-                            break;\n-                        }\n-                        case 31: {  // four way panning right\n-                            if (isDown) {\n-                                if (throttleWindow != null) {\n-                                    throttleWindow.nextThrottleFrame();\n-                                }\n-                                ledString = \"NXT\";\n-                            }\n-                            break;\n-                        }\n-                        case 32: {  // four way panning down\n-                            if ((addressPanel != null) && isDown) {\n-                                RosterEntrySelectorPanel resp = addressPanel.getRosterEntrySelector();\n-                                if (resp != null) {\n-                                    RosterEntryComboBox recb = resp.getRosterEntryComboBox();\n-                                    if (recb != null) {\n-                                        int cnt = recb.getItemCount();\n-                                        int selectedIndex = addressPanel.getRosterSelectedIndex();\n-                                        if (selectedIndex + 1 < cnt) {\n-                                            try {\n-                                                addressPanel.setRosterSelectedIndex(selectedIndex + 1);\n-                                                ledString = String.format(\"Next %d\", selectedIndex + 1);\n-                                            } catch (ArrayIndexOutOfBoundsException ex) {\n-                                                // ignore this\n-                                            }\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                            break;\n-                        }\n-                        case 33: {  // four way panning left\n-                            if (isDown) {\n-                                if (throttleWindow != null) {\n-                                    throttleWindow.previousThrottleFrame();\n-                                }\n-                                ledString = \"PRE\";\n-                            }\n-                            break;\n-                        }\n-                        case 34: {  // Gear Shift Up\n-                            if (isDown) {\n-                                // shuntFn\n-                                functionButtons[3].setSelected(false);\n-                            }\n-                            break;\n-                        }\n-                        case 35: {  // Gear Shift Down\n-                            if (isDown) {\n-                                // shuntFn\n-                                functionButtons[3].setSelected(true);\n-                            }\n-                            break;\n-                        }\n-                        case 36:\n-                        case 37: {  // Emergency Brake up/down\n-                            if ((controlPanel != null) && isDown) {\n-                                controlPanel.stop();\n-                            }\n-                            break;\n-                        }\n-\n-                        case 38: {  // Alerter\n-                            if (isDown) {\n-                                fNum = 6;   // alertFn\n-                            }\n-                            break;\n-                        }\n-                        case 39: {  // Sander\n-                            if (isDown) {\n-                                fNum = 7;   // sandFn\n-                            }\n-                            break;\n-                        }\n-                        case 40: {  // Pantograph\n-                            if (isDown) {\n-                                fNum = 8;   // pantoFn\n-                            }\n-                            break;\n-                        }\n-                        case 41: {  // Bell\n-                            if (isDown) {\n-                                fNum = 1;   // bellFn\n-                            }\n-                            break;\n-                        }\n-                        case 42:\n-                        case 43: {  // Horn/Whistle\n-                            fNum = 2;   // hornFn\n-                            break;\n-                        }\n-                        default: {\n-                            break;\n-                        }\n-                    }\n-                    if (fNum < functionButtons.length) {\n-                        FunctionButton button = functionButtons[fNum];\n-                        if (button != null) {\n-                            if (button.getIsLockable()) {\n-                                if (isDown) {\n-                                    button.setSelected(!button.getState());\n-                                }\n-                            } else {\n-                                button.setSelected(isDown);\n-                            }\n-                        }\n-                    }\n-                    if (isDown) {\n-                        if (ledString.length() <= 3) {\n-                            setLEDs(ledString);\n-                        } else {\n-                            sendStringAsync(ledString, 0.333);\n-                        }\n-                    }\n-                }   // if (functionPanel != null)\n-            } // if (oldValue.equals(...) {} else...\n-        }   // if event.getPropertyName().equals(\"Value\")\n-    }   // propertyChange\n-\n-    //initialize logging\n-    private transient final static Logger log = LoggerFactory.getLogger(RailDriverMenuItem.class);\n-\n-}"
  },
  {
    "sha": "cbeadf098a84fd5f16382188ffc831a407098e26",
    "filename": "java/test/jmri/jmrit/throttle/ControlPanelTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 25,
    "changes": 25,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/ControlPanelTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/ControlPanelTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/ControlPanelTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -8,7 +8,6 @@\n import javax.swing.JDesktopPane;\n import javax.swing.JFrame;\n import javax.swing.JPanel;\n-import javax.swing.JSlider;\n \n import jmri.util.JUnitUtil;\n import jmri.DccThrottle;\n@@ -162,30 +161,6 @@ public void notifyDecisionRequired(LocoAddress address,\n         Assert.assertEquals(throttle.getSpeedSetting(), 0.0, 1e-7);\n         Assert.assertEquals(throttle.getSpeedStepMode(), mode);\n \n-        // Set the speed controller mode to slider.\n-        panel.setSpeedController(ControlPanel.SLIDERDISPLAY);\n-        JSlider speedSlider = panel.getSpeedSlider();\n-\n-        // Test that the throttle speed defaults to 0, the maximum is\n-        // greater than zero and the minimum is zero.\n-        panel.setSpeedStepsMode(mode);\n-        Assert.assertEquals(speedSlider.getValue(), 0);\n-        Assert.assertTrue(speedSlider.getMaximum() > 0);\n-        Assert.assertEquals(speedSlider.getMinimum(), 0);\n-        Assert.assertEquals(throttle.getSpeedSetting(), 0.0, 1e-7);\n-\n-        // Set the speed controller mode to shunting slider.\n-        panel.setSpeedController(ControlPanel.SLIDERDISPLAYCONTINUOUS);\n-        JSlider speedSliderContinuous = panel.getSpeedSliderContinuous();\n-\n-        // Test that the throttle speed defaults to 0, the maximum is\n-        // greater than zero and the minimum is zero.\n-        Assert.assertEquals(speedSliderContinuous.getValue(), 0);\n-        Assert.assertTrue(speedSliderContinuous.getMaximum() > 0);\n-        Assert.assertTrue(speedSliderContinuous.getMinimum() < 0);\n-        Assert.assertTrue(speedSliderContinuous.getMaximum() ==\n-            -speedSliderContinuous.getMinimum());\n-        Assert.assertEquals(throttle.getSpeedSetting(), 0.0, 1e-7);\n     }\n \n     @BeforeEach"
  },
  {
    "sha": "b6b5dee18b37cd374a0bebc1db98488494e81960",
    "filename": "java/test/jmri/jmrit/throttle/FunctionButtonPropertyEditorTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/FunctionButtonPropertyEditorTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/FunctionButtonPropertyEditorTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/FunctionButtonPropertyEditorTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -18,7 +18,8 @@\n     @Test\n     public void testCtor() {\n         Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n-        FunctionButtonPropertyEditor dialog = new FunctionButtonPropertyEditor();\n+        FunctionButton button = new FunctionButton();\n+        FunctionButtonPropertyEditor dialog = new FunctionButtonPropertyEditor(button);\n         Assert.assertNotNull(\"exists\", dialog);\n     }\n "
  },
  {
    "sha": "82c9816e4a98f5560092b32af72fe2e73cf73d47",
    "filename": "java/test/jmri/jmrit/throttle/FunctionButtonTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/FunctionButtonTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/FunctionButtonTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/FunctionButtonTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -1,6 +1,9 @@\n package jmri.jmrit.throttle;\n \n+import java.awt.GraphicsEnvironment;\n+\n import org.junit.Assert;\n+import org.junit.Assume;\n import org.junit.jupiter.api.*;\n \n /**\n@@ -12,36 +15,42 @@\n \n     @Test\n     public void testCtor() {\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton panel = new FunctionButton();\n         Assert.assertNotNull(\"exists\", panel );\n     }\n \n     @Test\n     public void testIsOn() {\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton panel = new FunctionButton();\n         Assert.assertFalse(\"function not on\", panel.getState() );\n     }\n \n     @Test\n     public void testGetIconPath() {\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton panel = new FunctionButton();\n         Assert.assertEquals(\"no Icon\", \"\", panel.getIconPath() );\n     }\n \n     @Test\n     public void testIsImageOK() {\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton panel = new FunctionButton();\n         Assert.assertFalse(\"no image\", panel.isImageOK() );\n     }\n \n     @Test\n     public void testGetSelectedIconPath() {\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton panel = new FunctionButton();\n         Assert.assertEquals(\"no Icon\", \"\", panel.getSelectedIconPath() );\n     }\n   \n     @Test\n     public void testIsSelectedImageOK() {\n+        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton panel = new FunctionButton();\n         Assert.assertFalse(\"no image\", panel.isSelectedImageOK() );\n     }"
  },
  {
    "sha": "5c75aa266078145ae9fae985ad91591b6050d969",
    "filename": "java/test/jmri/jmrit/throttle/FunctionPanelTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/FunctionPanelTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/FunctionPanelTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/FunctionPanelTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -27,8 +27,7 @@ public void testCtor() {\n     public void testGetFunctionButtons() {\n         Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n         FunctionButton fba[] = frame.getFunctionButtons();\n-        Assert.assertNotNull(\"Function Button Array exists\", fba);\n-        Assert.assertEquals(\"Function Button Array has right length\", 29, fba.length);\n+        Assert.assertNotNull(\"Function Button Array exists\", fba);        \n     }\n \n     @BeforeEach"
  },
  {
    "sha": "3db0805e0ba1cbb14c89b17f23e842902b7d32ce",
    "filename": "java/test/jmri/jmrit/throttle/KeyListenerInstallerTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 32,
    "changes": 32,
    "blob_url": "https://github.com/JMRI/JMRI/blob/0519957ae81ab7afce047de1c1268e37488f81eb/java/test/jmri/jmrit/throttle/KeyListenerInstallerTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/0519957ae81ab7afce047de1c1268e37488f81eb/java/test/jmri/jmrit/throttle/KeyListenerInstallerTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/KeyListenerInstallerTest.java?ref=0519957ae81ab7afce047de1c1268e37488f81eb",
    "patch": "@@ -1,32 +0,0 @@\n-package jmri.jmrit.throttle;\n-\n-import jmri.util.JUnitUtil;\n-\n-import org.junit.Assert;\n-import org.junit.jupiter.api.*;\n-\n-/**\n- *\n- * @author Paul Bender Copyright (C) 2017\n- */\n-public class KeyListenerInstallerTest {\n-\n-    @Test\n-    public void testCTor() {\n-        KeyListenerInstaller t = new KeyListenerInstaller();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n-\n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();\n-    }\n-\n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n-    }\n-\n-    // private final static Logger log = LoggerFactory.getLogger(KeyListenerInstallerTest.class);\n-\n-}"
  },
  {
    "sha": "9517fcf88951734d87374ec5561f8360216a1ba9",
    "filename": "java/test/jmri/jmrit/throttle/SharingThrottleTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/SharingThrottleTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/SharingThrottleTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/SharingThrottleTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -67,6 +67,7 @@ public void testRefuseOneShareOne() {\n \n         Assert.assertFalse(\"release button disabled\", to.releaseButtonEnabled());\n         Assert.assertTrue(\"set button enabled\", to.setButtonEnabled());\n+        Assert.assertTrue(\"address field enabled\", to.addressFieldEnabled());\n \n         to.typeAddressValue(45);\n         to.pushSetButton();"
  },
  {
    "sha": "128ba9f201d73369fd3e987daf1a898c23820ee2",
    "filename": "java/test/jmri/jmrit/throttle/StealingOrSharingThrottleTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/StealingOrSharingThrottleTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/StealingOrSharingThrottleTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/StealingOrSharingThrottleTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -84,6 +84,7 @@ public void testRefuseOneShareOne() {\n \n         Assert.assertFalse(\"release button disabled\", to.releaseButtonEnabled());\n         Assert.assertTrue(\"set button enabled\", to.setButtonEnabled());\n+        Assert.assertTrue(\"address field enabled\", to.addressFieldEnabled());\n \n         to.typeAddressValue(45);\n         to.pushSetButton();"
  },
  {
    "sha": "d41b55029c5da8437222d56bd45e78197fc569da",
    "filename": "java/test/jmri/jmrit/throttle/StealingThrottleTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/StealingThrottleTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/StealingThrottleTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/StealingThrottleTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -66,6 +66,7 @@ public void testRefuseOneStealOne() {\n \n         Assert.assertFalse(\"release button disabled\", to.releaseButtonEnabled());\n         Assert.assertTrue(\"set button enabled\", to.setButtonEnabled());\n+        Assert.assertTrue(\"address field enabled\", to.addressFieldEnabled());\n \n         to.typeAddressValue(45);\n         to.pushSetButton();"
  },
  {
    "sha": "bf89f4b4b185f42ee2467828f7844baf67f4c53a",
    "filename": "java/test/jmri/jmrit/throttle/ThrottleFrameTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 35,
    "changes": 35,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/ThrottleFrameTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/ThrottleFrameTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/ThrottleFrameTest.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -115,41 +115,6 @@ public void testToggleOnOffStatus() {\n         to.pushReleaseButton();\n     }\n \n-    @Test\n-    public void testToggleOnOffStatusAltFunctions() {\n-        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n-\n-        to.setAddressValue(new DccLocoAddress(42, false));\n-\n-        to.pushAlt1Button();\n-\n-        // only check functions 20 through 25, since all the buttons\n-        // are the same class.\n-        for (int i = 20; i <= 25; i++) {\n-            FunctionButton f = to.getFunctionButton(i);\n-            Assert.assertFalse(\"Function F\" + i + \" off\", f.isSelected());\n-            JemmyUtil.enterClickAndLeave(f);\n-            new org.netbeans.jemmy.QueueTool().waitEmpty(100);  //pause for frame to close\n-            Assert.assertTrue(\"Function F\" + i + \" on\", f.isSelected());\n-            // Full Message along lines of Can't send F13-F20 since no command station defined\n-            JUnitAppender.assertErrorMessageStartsWith(\"Can't send F\");\n-        }\n-        to.pushReleaseButton();\n-    }\n-\n-    @Test\n-    public void testToggleAlt2() {\n-        Assume.assumeFalse(GraphicsEnvironment.isHeadless());\n-\n-        to.setAddressValue(new DccLocoAddress(42, false));\n-\n-        // the alt2 (\"#\") button doesn't currently do anything, but\n-        // we can toggle it to make sure it doesn't throw an exception.\n-        to.pushAlt1Button();\n-\n-        to.pushReleaseButton();\n-    }\n-\n     // Tests for Control (Speed and Direction) panel.\n     @Test\n     public void testStopButton() {"
  },
  {
    "sha": "40c5a128c79f1e6d6d749b0516d24dc5b74354a9",
    "filename": "java/test/jmri/jmrit/throttle/ThrottleOperator.java",
    "status": "modified",
    "additions": 14,
    "deletions": 52,
    "changes": 66,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/ThrottleOperator.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/java/test/jmri/jmrit/throttle/ThrottleOperator.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/jmrit/throttle/ThrottleOperator.java?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -62,9 +62,18 @@ public String getDescription() {\n     public void typeAddressValue(int address) {\n         JInternalFrameOperator ifo = getAddressPanelOperator();\n         JTextFieldOperator jtfo = new JTextFieldOperator(ifo); // only one text field in the address panel.\n+        jtfo.requestFocus(); // try focus, but need a window manager to work\n+        jtfo.clickForPopup(); // force with right click (left lick would moce carret), fortunatly there is no right click handler in this component\n         jtfo.typeText(\"\" + address);\n     }\n-\n+    \n+    // is the address field enabled\n+    public boolean addressFieldEnabled() {\n+        JInternalFrameOperator ifo = getAddressPanelOperator();\n+        JTextFieldOperator jtfo = new JTextFieldOperator(ifo); // only one text field in the address panel.\n+        return jtfo.isEnabled();\n+    }\n+    \n     // get the address value.\n     public DccLocoAddress getAddressValue() {\n         AddressPanel ap = getAddressPanel();\n@@ -157,54 +166,6 @@ public void pushFunctionButton(String Function) {\n         new JButtonOperator(getFunctionPanelOperator(), Function).push();\n     }\n \n-    public void pushAlt1Button() {\n-        JToggleButton alt1Button = (JToggleButton) findSubComponent(\n-                new ComponentChooser() {\n-            @Override\n-            public boolean checkComponent(Component c) {\n-                if (c instanceof JToggleButton) {\n-                    if (((JToggleButton) c).getText().equals(\"*\")) {\n-                        return true;\n-                    } else {\n-                        return false;\n-                    }\n-                } else {\n-                    return false;\n-                }\n-            }\n-\n-            @Override\n-            public String getDescription() {\n-                return \"Find Function Button\";\n-            }\n-        });\n-        JemmyUtil.enterClickAndLeave(alt1Button);\n-    }\n-\n-    public void pushAlt2Button() {\n-        JToggleButton alt1Button = (JToggleButton) findSubComponent(\n-                new ComponentChooser() {\n-            @Override\n-            public boolean checkComponent(Component c) {\n-                if (c instanceof JToggleButton) {\n-                    if (((JToggleButton) c).getText().equals(\"#\")) {\n-                        return true;\n-                    } else {\n-                        return false;\n-                    }\n-                } else {\n-                    return false;\n-                }\n-            }\n-\n-            @Override\n-            public String getDescription() {\n-                return \"Find Function Button\";\n-            }\n-        });\n-        JemmyUtil.enterClickAndLeave(alt1Button);\n-    }\n-\n     public FunctionButton getFunctionButton(int function) {\n         FunctionButton retval = (FunctionButton) findSubComponent(\n                 new ComponentChooser() {\n@@ -241,8 +202,8 @@ public void toggleFunctionMomentary(int function) {\n         openFunctionPopupMenu(function);\n         JDialogOperator jdo = new JDialogOperator(Bundle.getMessage(\"ButtonEditFunction\"));\n         (new JCheckBoxOperator(jdo, Bundle.getMessage(\"CheckBoxLockable\"))).doClick();\n-        (new JButtonOperator(jdo, Bundle.getMessage(\"ButtonOK\"))).doClick();\n-\n+        (new JButtonOperator(jdo, Bundle.getMessage(\"ButtonApply\"))).doClick();\n+        (new JButtonOperator(jdo, Bundle.getMessage(\"ButtonClose\"))).doClick();\n     }\n \n     // Control (Speed and Direction) panel operations\n@@ -307,7 +268,8 @@ public void setSpeedStepDisplay() {\n         openControlPanelPopupMenu();\n         JDialogOperator jdo = new JDialogOperator(Bundle.getMessage(\"TitleEditSpeedControlPanel\"));\n         (new JRadioButtonOperator(jdo, Bundle.getMessage(\"ButtonDisplaySpeedSteps\"))).doClick();\n-        (new JButtonOperator(jdo, Bundle.getMessage(\"ButtonOK\"))).doClick();\n+        (new JButtonOperator(jdo, Bundle.getMessage(\"ButtonApply\"))).doClick();\n+        (new JButtonOperator(jdo, Bundle.getMessage(\"ButtonClose\"))).doClick();\n \n     }\n "
  },
  {
    "sha": "bb93de45e66e442d192b1872290add9f507e546f",
    "filename": "java/test/jmri/util/usb/RailDriverMenuItemTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 28,
    "changes": 28,
    "blob_url": "https://github.com/JMRI/JMRI/blob/0519957ae81ab7afce047de1c1268e37488f81eb/java/test/jmri/util/usb/RailDriverMenuItemTest.java",
    "raw_url": "https://github.com/JMRI/JMRI/raw/0519957ae81ab7afce047de1c1268e37488f81eb/java/test/jmri/util/usb/RailDriverMenuItemTest.java",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/java/test/jmri/util/usb/RailDriverMenuItemTest.java?ref=0519957ae81ab7afce047de1c1268e37488f81eb",
    "patch": "@@ -1,28 +0,0 @@\n-package jmri.util.usb;\n-\n-import org.junit.Assert;\n-import org.junit.jupiter.api.*;\n-\n-/**\n- *\n- * @author Paul Bender Copyright (C) 2017\n- */\n-public class RailDriverMenuItemTest {\n-\n-    @Test\n-    public void testCTor() {\n-        RailDriverMenuItem t = new RailDriverMenuItem();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n-\n-    @BeforeEach\n-    public void setUp() {\n-        jmri.util.JUnitUtil.setUp();\n-    }\n-\n-    @AfterEach\n-    public void tearDown() {\n-        jmri.util.JUnitUtil.tearDown();\n-    }\n-\n-}"
  },
  {
    "sha": "d7e1be3c59f96ec1c634a1978821f98c66a943b0",
    "filename": "jython/AAR105.py",
    "status": "modified",
    "additions": 248,
    "deletions": 238,
    "changes": 486,
    "blob_url": "https://github.com/JMRI/JMRI/blob/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/jython/AAR105.py",
    "raw_url": "https://github.com/JMRI/JMRI/raw/ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6/jython/AAR105.py",
    "contents_url": "https://api.github.com/repos/JMRI/JMRI/contents/jython/AAR105.py?ref=ad0bf7fb4b1412e6d42e87fc8e22ea6b195f2cb6",
    "patch": "@@ -38,266 +38,276 @@\n # Calibration window! If you don't there will be too many events triggered \n # and everything will slow right down....\n \n+import jmri\n import java\n import java.beans\n-import jmri\n \n-#\n-# Set the name of the controller you're using\n-#\n-desiredControllerName = \"AAR105 Control Stand\"\n+try:\n+  #\n+  # Set the name of the controller you're using\n+  #\n+  desiredControllerName = \"AAR105 Control Stand\"\n \n-#\n-# Some function numbers, specific to decoder type / CV mapping\n-#\n-bellFn  = 1\n-hornFn  = 2\n-shuntFn = 3 # Lenz Silver and Gold\n-sandFn  = 7\n+  #\n+  # Some function numbers, specific to decoder type / CV mapping\n+  #\n+  bellFn  = 1\n+  hornFn  = 2\n+  shuntFn = 3 # Lenz Silver and Gold\n+  sandFn  = 7\n \n-#\n-# Component 'mapping'\n-#\n-# Groups of Switches: Functions 0-15\n-componentMaxFunction  = 15    # Max function to use for blue buttons\n-# Special Switches\n-componentSelectAddr   = \"1\"  # Acquire the current address shown on the list\n-componentDispatchAddr = \"2\"  # Release the previous address\n-componentNextAddr     = \"3\"  # Scroll down to the next address on the list\n-componentRevNeutral   = \"4\"  # Reverser in Neutral\n-componentRevReverse   = \"5\"  # Reverser in Neutral\n-componentRevForward   = \"6\"  # Reverser in Neutral\n-componentPrevAddr     = \"7\"  # Scroll up to the previous address on the list\n-componentNextFrame    = \"8\"  # Move the next Throttle Frame\n-componentPrevFrame    = \"9\"  # Move to the previous Throttle Frame\n-# Cab buttons\n-componentEStop    = \"10\"  # E-Stop: Fuel cut-off\n-componentEStopBis = \"11\"  # E-Stop: Brake cut-off\n-componentHorn     = \"12\"  # Horn momentary lever\n-componentSand     = \"13\"  # Sand left button\n-componentSandBis  = \"14\"  # Sand right button\n-componentBell     = \"15\"  # Bell button\n-# Axes\n-componentThrottle = \"Axis 0\"\n-leverMin = 0.05   # value of component for zero speed\n-leverMax = 1.00   # value of component for max speed\n-#\n-tempMillis = 500  # milliseconds to show (temporary) the press of a button\n+  #\n+  # Component 'mapping'\n+  #\n+  # Groups of Switches: Functions 0-15\n+  componentMaxFunction  = 15    # Max function to use for blue buttons\n+  # Special Switches\n+  componentSelectAddr   = \"1\"  # Acquire the current address shown on the list\n+  componentDispatchAddr = \"2\"  # Release the previous address\n+  componentNextAddr     = \"3\"  # Scroll down to the next address on the list\n+  componentRevNeutral   = \"4\"  # Reverser in Neutral\n+  componentRevReverse   = \"5\"  # Reverser in Neutral\n+  componentRevForward   = \"6\"  # Reverser in Neutral\n+  componentPrevAddr     = \"7\"  # Scroll up to the previous address on the list\n+  componentNextFrame    = \"8\"  # Move the next Throttle Frame\n+  componentPrevFrame    = \"9\"  # Move to the previous Throttle Frame\n+  # Cab buttons\n+  componentEStop    = \"10\"  # E-Stop: Fuel cut-off\n+  componentEStopBis = \"11\"  # E-Stop: Brake cut-off\n+  componentHorn     = \"12\"  # Horn momentary lever\n+  componentSand     = \"13\"  # Sand left button\n+  componentSandBis  = \"14\"  # Sand right button\n+  componentBell     = \"15\"  # Bell button\n+  # Axes\n+  componentThrottle = \"Axis 0\"\n+  leverMin = 0.05   # value of component for zero speed\n+  leverMax = 1.00   # value of component for max speed\n+  #\n+  tempMillis = 500  # milliseconds to show (temporary) the press of a button\n+\n+  # From here down is the code for the throttle\n+  # Generally, you shouldn't touch it unless you're debugging a problem\n \n-# From here down is the code for the throttle\n-# Generally, you shouldn't touch it unless you're debugging a problem\n+  # uncomment the following two lines to run from a keyboard for debug ??\n+  #desiredControllerName = \"Keyboard\"\n+  #componentThrottle = \"Axis 1\"\n \n-# uncomment the following two lines to run from a keyboard for debug ??\n-#desiredControllerName = \"Keyboard\"\n-#componentThrottle = \"Axis 1\"\n+  # connect to USB device\n+  model = jmri.jmrix.jinput.TreeModel.instance()\n \n-# connect to USB device\n-model = jmri.jmrix.jinput.TreeModel.instance()\n+  #Keep track of the number of throttles created\n+  numThrottles = 0\n+  # and the number of controllers used\n+  numControllers = 0\n \n-#Keep track of the number of throttles created\n-numThrottles = 0\n-# and the number of controllers used\n-numControllers = 0\n+  def isNaN(num): \n+      return num != num \n \n-def isNaN(num): \n-    return num != num \n+  # add listener for USB events\n+  class TreeListener(java.beans.PropertyChangeListener):\n \n-# add listener for USB events\n-class TreeListener(java.beans.PropertyChangeListener):\n+    #hash code is unique instance of controller\n+    controllerHashCode = 0 \n+    throttleWindow = None\n+    controlPanel = None\n+    functionPanel = None\n+    addressPanel = None\n+    activeThrottleFrame = None\n \n-  #hash code is unique instance of controller\n-  controllerHashCode = 0 \n-  throttleWindow = None\n-  controlPanel = None\n-  functionPanel = None\n-  addressPanel = None\n-  activeThrottleFrame = None\n+    def __init__(self, controller):\n+      global numThrottles\n+      global numControllers\n+      self.controller = controller\n+      self.controllerHashCode = controller.hashCode()\n+      # open a throttle window and get components\n+      self.throttleWindow = jmri.jmrit.throttle.ThrottleFrameManager.instance().createThrottleWindow()\n+      self.activeThrottleFrame = self.throttleWindow.addThrottleFrame()\n+      # move throttle on screen so multiple throttles don't overlay each other\n+      self.throttleWindow.setLocation(400 * numThrottles, 50 * numThrottles)\n+      numThrottles += 1\n+      numControllers += 1\n+      self.activeThrottleFrame.toFront()\n+      self.controlPanel = self.activeThrottleFrame.getControlPanel()\n+      self.functionPanel = self.activeThrottleFrame.getFunctionPanel()\n+      self.addressPanel = self.activeThrottleFrame.getAddressPanel()\n+      #!self.controller.displayStrImm(\"hi\")\n+      #self.controller.displayNumNext(self.addressPanel.getCurrentAddress().getNumber())\n+      self.throttleWindow.addPropertyChangeListener(self)\n+      self.activeThrottleFrame.addPropertyChangeListener(self)\n \n-  def __init__(self, controller):\n-    global numThrottles\n-    global numControllers\n-    self.controller = controller\n-    self.controllerHashCode = controller.hashCode()\n-    # open a throttle window and get components\n-    self.throttleWindow = jmri.jmrit.throttle.ThrottleFrameManager.instance().createThrottleWindow()\n-    self.activeThrottleFrame = self.throttleWindow.addThrottleFrame()\n-    # move throttle on screen so multiple throttles don't overlay each other\n-    self.throttleWindow.setLocation(400 * numThrottles, 50 * numThrottles)\n-    numThrottles += 1\n-    numControllers += 1\n-    self.activeThrottleFrame.toFront()\n-    self.controlPanel = self.activeThrottleFrame.getControlPanel()\n-    self.functionPanel = self.activeThrottleFrame.getFunctionPanel()\n-    self.addressPanel = self.activeThrottleFrame.getAddressPanel()\n-    #!self.controller.displayStrImm(\"hi\")\n-    #self.controller.displayNumNext(self.addressPanel.getCurrentAddress().getNumber())\n-    self.throttleWindow.addPropertyChangeListener(self)\n-    self.activeThrottleFrame.addPropertyChangeListener(self)\n+    def propertyChange(self, event):\n+      if (event.propertyName == \"ancestor\"):\n+          #print \"ancestor property change - closing throttle window\"\n+          # Remove all property change listeners and\n+          # dereference all throttle components\n+          self.activeThrottleFrame.removePropertyChangeListener(self)\n+          self.throttleWindow.removePropertyChangeListener(self)\n+          self.activeThrottleFrame = None\n+          self.controlPanel = None\n+          self.functionPanel = None\n+          self.addressPanel = None\n+          self.throttleWindow = None\n+          #!self.controller.displayStrImm(\"bye\")\n+          # Now remove this propertyChangeListener from the model\n+          global model\n+          model.removePropertyChangeListener(self)\n+          \n+      if (event.propertyName == \"ThrottleFrame\") :  # Current throttle frame changed\n+          #print \"Throttle Frame changed\"\n+          self.addressPanel = event.newValue.getAddressPanel()\n+          self.controlPanel = event.newValue.getControlPanel()\n+          self.functionPanel = event.newValue.getFunctionPanel()\n+          if (self.addressPanel.getCurrentAddress() != None) :\n+            #!self.controller.displayNumNext(self.addressPanel.getCurrentAddress().getNumber())\n+            print \"skip display\"\n \n-  def propertyChange(self, event):\n-    if (event.propertyName == \"ancestor\"):\n-        #print \"ancestor property change - closing throttle window\"\n-        # Remove all property change listeners and\n-        # dereference all throttle components\n-        self.activeThrottleFrame.removePropertyChangeListener(self)\n-        self.throttleWindow.removePropertyChangeListener(self)\n-        self.activeThrottleFrame = None\n-        self.controlPanel = None\n-        self.functionPanel = None\n-        self.addressPanel = None\n-        self.throttleWindow = None\n-        #!self.controller.displayStrImm(\"bye\")\n-        # Now remove this propertyChangeListener from the model\n-        global model\n-        model.removePropertyChangeListener(self)\n-        \n-    if (event.propertyName == \"ThrottleFrame\") :  # Current throttle frame changed\n-        #print \"Throttle Frame changed\"\n-        self.addressPanel = event.newValue.getAddressPanel()\n-        self.controlPanel = event.newValue.getControlPanel()\n-        self.functionPanel = event.newValue.getFunctionPanel()\n-        if (self.addressPanel.getCurrentAddress() != None) :\n-          #!self.controller.displayNumNext(self.addressPanel.getCurrentAddress().getNumber())\n-          print \"skip display\"\n+      if (event.propertyName == \"Value\") :\n+          # event.oldValue is the UsbNode\n+          #\n+          # uncomment the following line to see controller names\n+          #print \"|\"+event.oldValue.getController().toString()+\"|\"\n+          #print event.oldValue.getController().getName()\n+          #print event.oldValue.getController().hashCode()\n+          #\n+          # Select just the device (controller) we want\n+          cont = event.oldValue.getController()\n+          if (cont.toString() == desiredControllerName \n+          and cont.hashCode() == self.controllerHashCode) :\n+              # event.newValue is the value, e.g. 1.0\n+              # Check for desired component and act\n+              component = event.oldValue.getComponent().getIdentifier().toString()\n+              value = event.newValue\n+              # \n+              # uncomment the following to see the entries\n+              print \"process\", component, value\n+              \n+              # Function buttons\n+              try:\n+                  fNum = int(component) # direct mapping of buttons 0 -> maxFunction\n+              except ValueError:\n+                  fNum = 99             # axis\n+              # reverser buttons are not function buttons, processed in code later on\n+              if (component == componentRevNeutral or component == componentRevReverse or component == componentRevForward) :\n+                  fNum = 99\n+              # E-stop buttons are not function buttons, processed in code later on\n+              if (component == componentEStop or component == componentEStopBis) :\n+                  fNum = 99\n+              # horn has special treatment, processed in code later on\n+              if (component == componentHorn) :\n+                  fNum = 99\n+              if (component == componentSand or component == componentSandBis) :\n+                  fNum = sandFn\n+              if (component == componentBell) :\n+                  fNum = bellFn\n+              # toggle / fixed setting depending on throttle button definition\n+              if fNum <= componentMaxFunction:  # component out of range (not a blue button or cab button with special mapping)\n+                  button = self.functionPanel.getFunctionButtons()[fNum]\n+                  if (button != None) :\n+                      if button.getIsLockable() :\n+                          if value > 0.5 :\n+                              button.changeState(not button.getState())\n+                      else :\n+                          button.changeState(value > 0.5)\n+                      if (value > 0.5 and button.getState()) : # only display if actually setting the function\n+                          #!cont.displayStrTemp(\"F\" + str(fNum)) #, tempMillis)\n+                          print \"skip display\"\n+                  return\n \n-    if (event.propertyName == \"Value\") :\n-        # event.oldValue is the UsbNode\n-        #\n-        # uncomment the following line to see controller names\n-        #print \"|\"+event.oldValue.getController().toString()+\"|\"\n-        #print event.oldValue.getController().getName()\n-        #print event.oldValue.getController().hashCode()\n-        #\n-        # Select just the device (controller) we want\n-        cont = event.oldValue.getController()\n-        if (cont.toString() == desiredControllerName \n-        and cont.hashCode() == self.controllerHashCode) :\n-            # event.newValue is the value, e.g. 1.0\n-            # Check for desired component and act\n-            component = event.oldValue.getComponent().getIdentifier().toString()\n-            value = event.newValue\n-            # \n-            # uncomment the following to see the entries\n-            print \"process\", component, value\n-            \n-            # Function buttons\n-            try:\n-                fNum = int(component) # direct mapping of buttons 0 -> maxFunction\n-            except ValueError:\n-                fNum = 99             # axis\n-            # reverser buttons are not function buttons, processed in code later on\n-            if (component == componentRevNeutral or component == componentRevReverse or component == componentRevForward) :\n-                fNum = 99\n-            # E-stop buttons are not function buttons, processed in code later on\n-            if (component == componentEStop or component == componentEStopBis) :\n-                fNum = 99\n-            # horn has special treatment, processed in code later on\n-            if (component == componentHorn) :\n-                fNum = 99\n-            if (component == componentSand or component == componentSandBis) :\n-                fNum = sandFn\n-            if (component == componentBell) :\n-                fNum = bellFn\n-            # toggle / fixed setting depending on throttle button definition\n-            if fNum <= componentMaxFunction:  # component out of range (not a blue button or cab button with special mapping)\n-                button = self.functionPanel.getFunctionButtons()[fNum]\n-                if (button != None) :\n-                    if button.getIsLockable() :\n-                        if value > 0.5 :\n-                            button.changeState(not button.getState())\n-                    else :\n-                        button.changeState(value > 0.5)\n-                    if (value > 0.5 and button.getState()) : # only display if actually setting the function\n-                        #!cont.displayStrTemp(\"F\" + str(fNum)) #, tempMillis)\n-                        print \"skip display\"\n-                return\n+              # Probably is better not to 'waste' 6 switches for this ?\n+              # Address and Throttle Frame selection\n+              #print \"addr: \" + self.addressPanel.getCurrentAddress().toString() \n+              #self.addressPanel.showRosterSelectorPopup()\n+              selectedIndex = self.addressPanel.getRosterSelectedIndex()\n+              \n+              if (component == componentNextAddr and value > 0.5):\n+                  self.addressPanel.setRosterSelectedIndex(selectedIndex + 1)\n+                  return\n \n-            # Probably is better not to 'waste' 6 switches for this ?\n-            # Address and Throttle Frame selection\n-            #print \"addr: \" + self.addressPanel.getCurrentAddress().toString() \n-            #self.addressPanel.showRosterSelectorPopup()\n-            selectedIndex = self.addressPanel.getRosterSelectedIndex()\n-            \n-            if (component == componentNextAddr and value > 0.5):\n-                self.addressPanel.setRosterSelectedIndex(selectedIndex + 1)\n-                return\n+              if (component == componentPrevAddr and value > 0.5):\n+                  self.addressPanel.setRosterSelectedIndex(selectedIndex - 1)\n+                  return\n \n-            if (component == componentPrevAddr and value > 0.5):\n-                self.addressPanel.setRosterSelectedIndex(selectedIndex - 1)\n-                return\n+              if (component == componentSelectAddr and value > 0.5):\n+                  #! cont.displayStrTemp(\"sel\") #, tempMillis)\n+                  self.addressPanel.selectRosterEntry()\n+                  #! cont.displayNumNext(self.addressPanel.getCurrentAddress().getNumber())\n+                  return\n \n-            if (component == componentSelectAddr and value > 0.5):\n-                #! cont.displayStrTemp(\"sel\") #, tempMillis)\n-                self.addressPanel.selectRosterEntry()\n-                #! cont.displayNumNext(self.addressPanel.getCurrentAddress().getNumber())\n-                return\n+              if (component == componentDispatchAddr and value > 0.5):\n+                  #! cont.displayStrTemp(\"dis\") #, tempMillis)\n+                  self.addressPanel.dispatchAddress()\n+                  #! cont.displayNumNext(0)\n+                  return\n \n-            if (component == componentDispatchAddr and value > 0.5):\n-                #! cont.displayStrTemp(\"dis\") #, tempMillis)\n-                self.addressPanel.dispatchAddress()\n-                #! cont.displayNumNext(0)\n-                return\n+              if (component == componentNextFrame and value > 0.5):\n+                  self.throttleWindow.nextThrottleFrame()\n+                  return\n \n-            if (component == componentNextFrame and value > 0.5):\n-                self.throttleWindow.nextThrottleFrame()\n-                return\n+              if (component == componentPrevFrame and value > 0.5):\n+                  self.throttleWindow.previousThrottleFrame()\n+                  return\n \n-            if (component == componentPrevFrame and value > 0.5):\n-                self.throttleWindow.previousThrottleFrame()\n-                return\n+              # Special buttons\n+              # \"Emergency stop\" button\n+              if (component == componentEStop or component == componentEStopBis) :\n+                  if (value > 0.5) :\n+                      self.controlPanel.stop()\n+                      print \"Emergency Stop!\"\n+                      return\n \n-            # Special buttons\n-            # \"Emergency stop\" button\n-            if (component == componentEStop or component == componentEStopBis) :\n-                if (value > 0.5) :\n-                    self.controlPanel.stop()\n-                    print \"Emergency Stop!\"\n-                    return\n+              # \"Horn\" (digital) lever, momentary\n+              if (component == componentHorn) :\n+                  if (value > 0.5) :\n+                      self.functionPanel.getFunctionButtons()[hornFn].changeState(True)\n+                  else :\n+                      self.functionPanel.getFunctionButtons()[hornFn].changeState(False)\n+                  return\n+                          \n+              # Reverser 'lever'\n+              if (component == componentRevReverse) :\n+                  if (value > 0.5) :\n+                      #! cont.displayStrTemp(\"rev\") #, tempMillis)\n+                      self.controlPanel.setForwardDirection(False)\n+                  #print \"Direction changed\"\n+                  return\n+              if (component == componentRevForward) :\n+                  if (value > 0.5) :\n+                      #! cont.displayStrTemp(\"fwd\") #, tempMillis)\n+                      self.controlPanel.setForwardDirection(True)\n+                  #print \"Direction changed\"\n+                  return\n \n-            # \"Horn\" (digital) lever, momentary\n-            if (component == componentHorn) :\n-                if (value > 0.5) :\n-                    self.functionPanel.getFunctionButtons()[hornFn].changeState(True)\n-                else :\n-                    self.functionPanel.getFunctionButtons()[hornFn].changeState(False)\n-                return\n-                        \n-            # Reverser 'lever'\n-            if (component == componentRevReverse) :\n-                if (value > 0.5) :\n-                    #! cont.displayStrTemp(\"rev\") #, tempMillis)\n-                    self.controlPanel.setForwardDirection(False)\n-                #print \"Direction changed\"\n-                return\n-            if (component == componentRevForward) :\n-                if (value > 0.5) :\n-                    #! cont.displayStrTemp(\"fwd\") #, tempMillis)\n-                    self.controlPanel.setForwardDirection(True)\n-                #print \"Direction changed\"\n-                return\n+              # Throttle lever\n+              if (component == componentThrottle) :\n+                  # negative is lever front, positive is lever back\n+                  # limit range to only positive side of lever\n+                  if (value < leverMin) : value = leverMin\n+                  if (value > leverMax) : value = leverMax\n+                  # convert fraction of input to speed step\n+                  fraction = (value-leverMin)/(leverMax-leverMin)\n+                  slider = self.controlPanel.getSpeedSlider()\n+                  setting = int(round(fraction*(slider.getMaximum()-slider.getMinimum()), 0))\n+                  slider.setValue(setting)\n+                  #! cont.displayNumTemp(self.controlPanel.getDisplaySlider())\n+                  #print \"Throttle:\", value, setting\n+                  # How do I get the speed \"value\" ???\n+                  print \"Slider Speed:\", self.controlPanel.getDisplaySlider()\n+                  return\n \n-            # Throttle lever\n-            if (component == componentThrottle) :\n-                # negative is lever front, positive is lever back\n-                # limit range to only positive side of lever\n-                if (value < leverMin) : value = leverMin\n-                if (value > leverMax) : value = leverMax\n-                # convert fraction of input to speed step\n-                fraction = (value-leverMin)/(leverMax-leverMin)\n-                slider = self.controlPanel.getSpeedSlider()\n-                setting = int(round(fraction*(slider.getMaximum()-slider.getMinimum()), 0))\n-                slider.setValue(setting)\n-                #! cont.displayNumTemp(self.controlPanel.getDisplaySlider())\n-                #print \"Throttle:\", value, setting\n-                # How do I get the speed \"value\" ???\n-                print \"Slider Speed:\", self.controlPanel.getDisplaySlider()\n-                return\n+  #Iterate over the controllers, creating a new listener for each\n+  #controller of the type we are interested in\n+  for c in model.controllers():\n+      name = c.getName()\n+      hashCode = c.hashCode()\n+      if (name == desiredControllerName and c.getType().toString() == \"Gamepad\"):\n+          print \"**************   Found \" + name + \" \" + str(hashCode)\n+          model.addPropertyChangeListener(TreeListener(c))\n+except:\n+  import javax.swing.JOptionPane as JOptionPane\n+  import javax.swing.JFrame as JFrame  \n+  JOptionPane.showMessageDialog(JFrame(), \n+\"\"\"This code is no longer maintained.\n \n-#Iterate over the controllers, creating a new listener for each\n-#controller of the type we are interested in\n-for c in model.controllers():\n-    name = c.getName()\n-    hashCode = c.hashCode()\n-    if (name == desiredControllerName and c.getType().toString() == \"Gamepad\"):\n-        print \"**************   Found \" + name + \" \" + str(hashCode)\n-        model.addPropertyChangeListener(TreeListener(c))\n+Please use Jynstrument jython/Jynstrument/ThrottleWindowToolBar/USBThrottle.jyn instead\n+Or jython/USBThrottleAsJynstrument.py script\"\"\", \"Outdated code\", JOptionPane.WARNING_MESSAGE)\n+          "
  }
]
