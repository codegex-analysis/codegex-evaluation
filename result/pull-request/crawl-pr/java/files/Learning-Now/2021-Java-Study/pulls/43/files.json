[
  {
    "sha": "a8346fd704185d9ec72c0caabd6a6e2990e6d78d",
    "filename": ".gitignore",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/.gitignore",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/.gitignore",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/.gitignore?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,3 @@\n+.idea/\n+*.iml\n+out/\n\\ No newline at end of file"
  },
  {
    "sha": "d0e3ec69fa50525cf292e519444442fed898b93e",
    "filename": "6weeks/java basics.md",
    "status": "added",
    "additions": 289,
    "deletions": 0,
    "changes": 289,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/java%20basics.md",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/java%20basics.md",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/6weeks/java%20basics.md?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,289 @@\n+# java class\n+\n+## class\n+OOP에서 모든 데이터를 객체(object)로 취급하며, 이러한 객체가 프로그래밍의 중심이 된다.\n+\n+사물 하나 하나를 기능별로 묶어서 사용하는 것. 각 클래스 안에서 역할에 따라 각 클래스의 기능을 서술해 나감.\n+\n+사람에 따라, 같은 프로그램을 만들더라도 여러 관점으로 만들 수 있다.\n+\n+자바에서는 어떤 것이든 클래스 안에 속해있다.\n+```\n+public class <class-name> {\n+    public static void main(Stirng[] args){\n+    // 프로그램 시작 지점\n+    }\n+}\n+```\n+\n+### class의 구조\n+#### 멤버변수(field)\n+- 클래스 안의 기능을 끄집어 내어 사용할 때 이용.\n+- 저장할 공간\n+\n+#### 메소드(method)\n+- 기능을 나타낸다.\n+- ()가 항상 붙어 있다.\n+\n+#### 생성자(constructor)\n+처음에 값을 넣어줄 때 사용.(default value)\n+\n+\n+```\n+public class ClassName {\n+\n+    // 멤버변수\n+    int a;\n+    int b;\n+\n+    // constructor\n+    ClassName() {\n+        a = 10;\n+        b = 15;\n+    }\n+\n+    // method\n+    public static void main(String[] args) {\n+        // 프로그램 시작 지점\n+    }\n+}\n+```\n+\n+아래와 같이 멤버 변수에 static을 붙여줄 경우, 메모리를 정적으로 사용하겠다는 의미. 메모리 주소 위치가 바뀌지 않는다.\n+> staic int a = 10;\n+\n+### instance\n+자바에서 클래스를 사용하기 위해서는 우선 해당 클래스 타입의 객체(object)를 선언해야 한다.\n+\n+이렇게 클래스로부터 객체를 선언하는 과정을 클래스의 인스턴스 화라고 한다.\n+\n+또한, 이렇게 선언된 해당 클래스 타입의 객체를 인스턴스(instance)라고 한다. \n+\n+> 인스턴스란 메모리에 할당된 객체를 의미한다\n+\n+자바에서는 하나의 클래스로부터 여러 개의 인스턴스를 생성할 수 있다.\n+\n+이렇게 생성된 인스턴스는 독립된 메모리 공간에 저장된 자신만의 필드를 가질 수 있다. \n+\n+하지만 해당 클래스의 모든 메소드(method)는 해당 클래스에서 생성된 모든 인스턴스가 공유한다.\n+\n+\n+### class 선언(declaration)\n+자바는 객체를 만들기 위해 반드시 클래스를 먼저 만들어야 한다. 클래스는 객체를 만들기 위한 일종의 틀이다.\n+- 붕어빵: 객체\n+- 붕어빵 틀: 클래스\n+\n+```\n+// Car class declaration\n+public calss Car { }\n+```\n+\n+```\n+// Car object\n+public class CarExam {\n+    public static voi main(String[] args) {\n+        Car c1 = new Car();\n+        Car c2 = new Car();\n+    }\n+}\n+```\n+\n+- new 연산자는 new 연산자 뒤에 오는 생성자를 이용해 메모리에 객체를 만들라는 명령.\n+- 메모리에 만들어진 객체를 인스턴스(instance)라고도 한다.\n+- 이렇게 만들어진 객체를 참조하는 변수가 c1, c2 이다.\n+- 위의 코드가 실행되면 Car라는 객체가 2개 만들어지고 각각의 객체를 참조하는 c1과 c2변수가 선언된다.\n+\n+\n+## new operator\n+해당 클래스 타입의 인스턴스(객체)를 생성해주는 역할을 담당한다. \n+\n+new 연산자를 통해 메모리(Heap area)에 데이터를 저장할 공간을 할당 받고 그 공간의 참조값(reference value/hash code)를 객체에게 반환해 주고 이어서 생성자를 호출한다. 인스턴스를 다루기 위해서는 new 연산자를 통해 참조값을 저장한 객체로만 접근이 가능하다.\n+\n+- 형태\n+> ClassName referenceVariable = new ClassName();\n+\n+- 인스턴스(객체)를 생성할 때 사용하는 코드이다.\n+- 객체 변수가 실제 데이터가 아닌 참조 값을 갖는다는 정보가 포함돼 있다.\n+\n+```\n+class NewExSub {\n+    public void sum(int a, int b){ // int a=0, int b=20;\n+        int sum=0, odd=0, even=0; // 초기값 설정\n+        for(int i=a; i<=b; i++){\n+            sum += i; // 총합 합계\n+            if(i%2==0){\n+                even += i; // 짝수합\n+            }else{\n+                odd += i; // 홀수합\n+            }\n+        }\n+        System.out.println(a+\"~\"+b+\"까지의 합:\"+sum);\n+        System.out.println(a+\"~\"+b+\"까지의 짝수합:\"+even);\n+        System.out.println(a+\"~\"+b+\"까지의 홀수합:\"+odd);\n+    }\n+}\n+\n+public class NewEx01 {\n+    public static void main(String[] args) {\n+        NewExSub nes = null; // NewExSub 타입의 nes 객체 선언\n+        nes = new NewExSub(); \n+        // new : 인스턴스 생성, Heap 메모리 공간 할당, 객체(nes)에게 참조값 리턴\n+        System.out.println(nes); // 출력 : @15db9742(참조값)\n+        nes.sum(0, 20); // 객체 참조값 이용 NewExSub의 sum메소드 호출 / 매게변수 전달\n+    }\n+}\n+```\n+\n+## method declaration\n+### 매개변수도, 리턴하는 것도 없는 형태의 메소드\n+- 리턴하는 것이 없을 경우 리턴 타입은 void로 작성한다.\n+```\n+public class MyClass{\n+    public void method1(){\n+        System.out.println(\"method1이 실행됩니다.\");\n+    }\n+}\n+```\n+\n+### 정수를 받아들인 후, 리턴하지 않는 메소드\n+- 받아들이는 값은 어떤 타입이라도 상관없다.\n+- 받아들이는 값의 수는 여러 개일 수 있다. 여러 개일 경우 콤마(,)로 구분한다.\n+```\n+public class MyClass{   \n+    public void method2(int x){\n+        System.out.println(x + \" 를 이용하는 method2입니다.\");\n+    }\n+}\n+```\n+\n+### 아무것도 받아들이지 않고, 정수를 반환하는 메소드\n+- 리턴하는 값 앞에 return이라는 키워드를 사용한다.\n+- 메소드 이름 앞에는 리턴하는 타입을 적어준다.\n+- 리턴타입은 하나만 사용할 수 있다. 리턴하는 타입은 어떤 타입이라도 상관없다.\n+```\n+public class Test {\n+    public int method3(){\n+        System.out.println(\"method3이 실행됩니다.\");\n+        \n+        return 10;\n+    }\n+}\n+\n+```\n+\n+### 정수를 2개 매개변수로 받고, 아무것도 반환하지 않는 메소드\n+```\n+public class Test {\n+    public int method4(int x, int y){\n+        System.out.println(x + \", \" + y + \"를 이용하는 method4입니다.\");\n+    }\n+}\n+```\n+\n+### 정수를 한 개 받은 후, 정수를 반환하는 메소드\n+```\n+public class Test {\n+    public int method5(int y){\n+        System.out.println(y + \"를 이용하는 method5입니다.\");\n+        \n+        return 5;\n+    }\n+}\n+```\n+\n+## constructor declaration\n+생성자는 new 연산자를 통해서 인스턴스를 생성할 때 반드시 호출이 되고 제일 먼저 실행되는 일종의 메소드(메소드와는 조금 다르다)이다.\n+\n+생성자는 인스턴스 변수(e.g. field)를 초기화 시키는 역할을 한다.\n+\n+- 생성자 선언 방법\n+```\n+public Class(parameter) {\n+    ...\n+}\n+```\n+\n+Class라는 부분은 생성자를 정의하는 클래스의 이름과 동일하게 적어줘야 한다. public과 parameter부분은 필수가 아니다.\n+\n+### default constuctor\n+```\n+public class ConstructorEx01{\n+    // public ContructorEx01() { } // default constructor 자동 생성\n+\n+\n+    public static void main(String[] args) {\n+        ConstructorEx01 ce = new ConstructorEx01; // 인스턴스 생성 및 생성자 호출\n+    }\n+}\n+```\n+\n+위와 같은 경우에는 자동으로 주석처리된 부분인 기본 생성자가 생성자의 역할을 한다.\n+\n+```\n+public class Test {\n+    public Test(String a){// a = 사용자 정의\n+        System.out.println(a + \"생성자 호출 성공\");\n+    }\n+\n+    public static void main(String[] args){\n+        Test t = new Test(\"사용자 정의\");// 매개변수를 갖는 생성자 호출\n+        //Test t2 = new Test(); // 컴파일 에러\n+    }\n+}\n+```\n+\n+매개변수를 갖는 생성자를 정의하였고 main 메소드에서 생성자를 호출하였다. 출력 결과는 \"사용자 정의 생성자 호출 성공\"이다. 그 다음 줄의 주석 처리된 부분은 기본 생성자를 호출하지만 컴파일 에러가 발생된다. 사용자가 정의한 생성자가 있어서 기본 생성자를 더 이상 자동으로 만들어주지 않기 때문이다.\n+\n+## this 키워드\n+자바에서 제공하는 this 키워드는 인스턴스 자기 자신을 가리키는 키워드이다. this 키워드를 통해 클래스 메소드 및 생성자에서 자기 자신의 데이터를 업데이트하거나 조작할 수 있다.\n+\n+this 키워드는 이 클래스를 기반으로 생성된 **인스턴스를 가리키는 참조**이다. 인스턴스를 가리키는 참조와 인스턴스 자체는 다르다.\n+```\n+public class ThisExample {\n+\n+    private String name;\n+    private Integer age;\n+    private String address;\n+\n+    public ThisExample() {\n+        this.name = \"KBS\";\n+        this.age = 19;\n+        this.address = \"Seoul\";\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setAge(Integer age) {\n+        this.age = age;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public ThisExample returnThisExample() {\n+        return this;\n+    }\n+\n+}\n+```\n+\n+\n+\n+# Reference\n+- [constructor declaration](http://blog.naver.com/PostView.nhn?blogId=heartflow89&logNo=220955879645)\n+- [자바 this](https://engkimbs.tistory.com/873)\n\\ No newline at end of file"
  },
  {
    "sha": "4bb9aecb9e20f31f1f107c0a34338a640a99c765",
    "filename": "6weeks/string calculator/src/java/Calculator.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Calculator.java",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Calculator.java",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/6weeks/string%20calculator/src/java/Calculator.java?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,22 @@\n+public class Calculator {\n+    public static double addNum(double a, double b) {\n+        return a + b;\n+    }\n+\n+    public static double subNum(double a, double b) {\n+        return a - b;\n+    }\n+\n+    public static double mulNum(double a, double b) {\n+        return a * b;\n+    }\n+\n+    public static int divNum(int a, int b) {\n+        try {\n+            return a / b;\n+        } catch (ArithmeticException e) {\n+            System.out.println(\"0으로 나눌 수 없습니다.\");\n+            return 0;\n+        }\n+    }\n+}"
  },
  {
    "sha": "ba0e6b4d8875c5ee68df2df283666f29912e75e4",
    "filename": "6weeks/string calculator/src/java/Exception.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Exception.java",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Exception.java",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/6weeks/string%20calculator/src/java/Exception.java?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,15 @@\n+import java.io.IOException;\n+import java.lang.IllegalArgumentException;\n+\n+public class Exception {\n+    public static boolean isElementInt(String str) {\n+        try {\n+            Integer.parseInt(str);\n+            return true;\n+        } catch (IllegalArgumentException e) {\n+            e.printStackTrace();\n+            System.out.println(\"입력된 값이 숫자가 아닙니다.\");\n+            return false;\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "72be514da5e44785c56db94befa27647e91cf169",
    "filename": "6weeks/string calculator/src/java/Formula.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Formula.java",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Formula.java",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/6weeks/string%20calculator/src/java/Formula.java?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,42 @@\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class Formula {\n+    private static String[] arrayFormula;\n+    private boolean isComputable = true;\n+    private int i = 1;\n+\n+    public void inputFormula() throws IOException {\n+        BufferedReader bufferedReader = new BufferedReader((new InputStreamReader(System.in)));\n+        this.arrayFormula = bufferedReader.readLine().split(\" \");\n+        startCheckOperand();\n+    }\n+\n+    public void startCheckOperand() throws IllegalArgumentException {\n+        for (i = 1; i < arrayFormula.length; i += 2) {\n+            checkOperand();\n+        }\n+        startPerformer();\n+    }\n+\n+    public void checkOperand(){\n+        if (Exception.isElementInt(arrayFormula[i - 1]) == false ||\n+                Exception.isElementInt(arrayFormula[i + 1]) == false) {\n+            System.out.println(\"입력된 값 중 \" + arrayFormula[i - 1] + \"또는 \" +\n+                    arrayFormula[i + 1] + \"이 숫자가 아닙니다.\");\n+            isComputable = false;\n+        }\n+    }\n+\n+    public void startPerformer() {\n+        if (isComputable) {\n+            Performer performer = new Performer();\n+            performer.performCal();\n+        }\n+    }\n+\n+    public static String[] getFormula() {\n+        return arrayFormula;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2bac0177bd352d7329fe84110c791c944b797ded",
    "filename": "6weeks/string calculator/src/java/Performer.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Performer.java",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/Performer.java",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/6weeks/string%20calculator/src/java/Performer.java?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,52 @@\n+public class Performer {\n+    private static String[] formula;\n+    private static double result = 0;\n+    private static int operator = 1;\n+\n+    public Performer() {\n+        this.formula = Formula.getFormula();\n+    }\n+\n+    public static void performCal() {// 계산수행\n+        for (operator = 1; operator < formula.length; operator += 2) {\n+            operateCal();\n+        }\n+        System.out.println(\"computed value : \" + (int) result);// 형식을 맞추기 위해 정수형으로 캐스팅\n+    }\n+\n+    public static void operateCal(){\n+        if (formula[operator].equals(\"+\")) {\n+            performAdd();\n+        }\n+        if (formula[operator].equals(\"-\")) {\n+            performSub();\n+        }\n+        if (formula[operator].equals(\"*\")) {\n+            performMul();\n+        }\n+        if (formula[operator].equals(\"/\")) {\n+            performDiv();\n+        }\n+        formula[operator + 1] = Double.toString(result);// 연산자 1개, 피연산자 2개가 아닐경우 연산을 계속 진행\n+    }\n+\n+    public static void performAdd(){\n+        result = Calculator.addNum(Double.parseDouble(formula[operator - 1]),\n+                Double.parseDouble(formula[operator + 1]));// 연산에서 누락되는 것을 줄이기 위해 double\n+    }\n+\n+    public static void performSub(){\n+        result = Calculator.subNum(Double.parseDouble(formula[operator - 1]),\n+                Double.parseDouble(formula[operator + 1]));\n+    }\n+\n+    public static void performMul(){\n+        result = Calculator.mulNum(Double.parseDouble(formula[operator - 1]),\n+                Double.parseDouble(formula[operator + 1]));\n+    }\n+\n+    public static void performDiv(){\n+        result = Calculator.divNum(Integer.parseInt(formula[operator - 1]),\n+                Integer.parseInt(formula[operator + 1]));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6be9c6db2bd16a65622881438bf3a5b7ba593d4b",
    "filename": "6weeks/string calculator/src/java/ServiceStater.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Learning-Now/2021-Java-Study/blob/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/ServiceStater.java",
    "raw_url": "https://github.com/Learning-Now/2021-Java-Study/raw/316e1d1a426537db3e37dd120c8859d00f3893ab/6weeks/string%20calculator/src/java/ServiceStater.java",
    "contents_url": "https://api.github.com/repos/Learning-Now/2021-Java-Study/contents/6weeks/string%20calculator/src/java/ServiceStater.java?ref=316e1d1a426537db3e37dd120c8859d00f3893ab",
    "patch": "@@ -0,0 +1,8 @@\n+import java.io.IOException;\n+\n+public class ServiceStater {\n+    public static void main(String[] args) throws IOException {\n+        Formula formula = new Formula();\n+        formula.inputFormula();\n+    }\n+}\n\\ No newline at end of file"
  }
]
