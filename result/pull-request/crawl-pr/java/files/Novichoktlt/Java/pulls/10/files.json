[
  {
    "sha": "928993a17cb4ca3f739067da098ae47943253ab1",
    "filename": "Array.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Array.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Array.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Array.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,87 @@\n+package lesson2_5.online;\n+\n+import java.util.Arrays;\n+\n+public class Array {\n+\n+    static final int SIZE = 10000000;\n+    static final int H = SIZE / 2;\n+\n+\n+    public static void main(String[] args) {\n+\n+        float[] arr = new float[SIZE];\n+        float[] arrD = new float[SIZE];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = i + 1;\n+\n+        }\n+        for (int i = 0; i < arrD.length; i++) {\n+            arrD[i] = i + 1;\n+\n+        }\n+\n+        usual(arr);\n+        divided(arrD, H);\n+        if (Arrays.equals(arr, arrD)){\n+            System.out.println(\"Массивы равны\");\n+        }else {\n+            System.out.println(\"Массивы не равны\");\n+        }\n+    }\n+\n+    public static void formula(float[] arr, int bias){\n+        for (int i = 0; i < arr.length; i++) {\n+\n+            arr[i] = (float)(arr[i] * Math.sin(0.2f + (i + bias)/ 5) * Math.cos(0.2f + (i + bias) / 5) * Math.cos(0.4f + (i + bias) / 2));\n+\n+        }\n+\n+    }\n+\n+    public static void usual(float[] arr){\n+\n+        long start = System.currentTimeMillis();\n+\n+        formula(arr, 0);\n+        long finish = System.currentTimeMillis();\n+        long tame = finish - start;\n+        System.out.println(\"Время обработки массива одним потоком: \" + tame);\n+    }\n+\n+    public static void divided(float[] arr, int H){\n+\n+\n+\n+        long start = System.currentTimeMillis();\n+        float[] arr1 = new float[H];\n+        float[] arr2 = new float[H];\n+\n+        System.arraycopy(arr, 0, arr1, 0, H);\n+        System.arraycopy(arr, H, arr2, 0, H);\n+\n+\n+        Thread t1 = new Thread(() -> formula(arr1, 0));\n+        Thread t2 = new Thread(() -> formula(arr2, H));\n+        t1.start();\n+        t2.start();\n+        try {\n+            t1.join();\n+            t2.join();\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        System.arraycopy(arr1, 0, arr, 0, H);\n+        System.arraycopy(arr2, 0, arr, H, H);\n+\n+        long finish = System.currentTimeMillis();\n+        long tame = finish - start;\n+        System.out.println(\"Время обработки массива двумя потоками: \" + tame);\n+\n+    }\n+\n+\n+}"
  },
  {
    "sha": "1844347c4f737e87b08de578e70ffb7f3273999b",
    "filename": "ChatController.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/ChatController.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/ChatController.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/ChatController.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,100 @@\n+package lesson2_4.online;\n+\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.fxml.Initializable;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.awt.*;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ResourceBundle;\n+\n+public class ChatController implements Initializable {\n+\n+    @FXML\n+    public TextArea chatArea;\n+    @FXML\n+    public ListView onlineUsers;\n+    @FXML\n+    public Button btnSendMessage;\n+    @FXML\n+    public TextField input;\n+\n+    @Override\n+    public void initialize(URL url, ResourceBundle resourceBundle) {\n+        onlineUsers.setItems(FXCollections.observableArrayList(\"Вася\", \"Петя\"));\n+    }\n+    public void exit(ActionEvent actionEvent) {\n+        Platform.exit();\n+    }\n+\n+    public void showHelp(ActionEvent actionEvent) throws URISyntaxException, IOException {\n+        Desktop desktop = Desktop.getDesktop();\n+        desktop.browse(new URI(\"https://docs.google.com/document/d/1wr0YEtIc5yZtKFu-KITqYnBtp8KC28v2FEYUANL0YAM/edit#\"));\n+    }\n+\n+\n+\n+\n+    public void Item(ActionEvent actionEvent) {\n+\n+    }\n+\n+\n+    public void pressEnter(ActionEvent actionEvent) {\n+        appendTextFromTF();\n+    }\n+\n+    public void btnSend(ActionEvent actionEvent) {\n+        appendTextFromTF();\n+    }\n+\n+    private void appendTextFromTF(){\n+        String msg = input.getText();\n+        if(msg.length() > 0) {\n+            chatArea.appendText(msg + System.lineSeparator());\n+            input.clear();\n+        }\n+    }\n+\n+\n+    public void aboutTheProgram(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void textSize(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void minimizeToTrade(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void fullScreen(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void topWindows(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void connection(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void onlineStatus(ActionEvent actionEvent) {\n+\n+    }\n+\n+    public void profile(ActionEvent actionEvent) {\n+\n+    }\n+}"
  },
  {
    "sha": "f09c8a6afe68c93cd4909a4e5e9faaa0f0066784",
    "filename": "Client.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Client.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Client.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Client.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,39 @@\n+package lesson2_4.online;\n+\n+\n+import javafx.application.Application;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.image.Image;\n+import javafx.stage.Stage;\n+\n+import java.io.IOException;\n+\n+public class Client extends Application {\n+\n+\n+\n+    public static void main(String[] args) {\n+\n+        launch(args);\n+    }\n+\n+    private static Scene scene;\n+\n+    @Override\n+    public void start(Stage primaryStage) throws Exception {\n+        scene = new Scene(loadFxml(\"chat.fxml\"), 400, 600);\n+        primaryStage.getIcons().add(new Image(getClass().getResourceAsStream(\"g512.png\")));\n+        primaryStage.setTitle(\"Бла-Бла-Чат\");\n+        primaryStage.setScene(scene);\n+        primaryStage.show();\n+\n+\n+    }\n+\n+    private static Parent loadFxml(String fxml) throws IOException {\n+        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource(fxml));\n+        return fxmlLoader.load();\n+    }\n+}"
  },
  {
    "sha": "61a63cde50697b23a77f2c828397c74889de2e21",
    "filename": "Experience.java",
    "status": "added",
    "additions": 225,
    "deletions": 0,
    "changes": 225,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Experience.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Experience.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Experience.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,225 @@\n+package lesson2_1.online;\n+\n+\n+import java.util.Random;\n+\n+public class Experience{\n+\n+\n+    public static void main(String[] args) {\n+\n+\n+        Heroes human = new Human(\"Человек Федор \", 0, 0);\n+        Heroes cat = new Cat(\"Кот Борис \", 0, 0);\n+        Heroes robot = new Robot(\"Робот Вася \", 0, 0);\n+\n+        Heroes[] heroes = {human, cat, robot};\n+        System.out.println(\"******************************************************************************\");\n+        for (int i=0; i < heroes.length; i++) {\n+            heroes[i].run();\n+            heroes[i].jump();\n+        }\n+\n+        Obstacle treadmill = new Treadmill(0);\n+        Obstacle wall = new Wall(0);\n+        System.out.println(\"******************************************************************************\");\n+        for (int i = 0; i < heroes.length; i++) {\n+            if (heroes[i].getRunMax() > treadmill.getDistance()){\n+\n+                System.out.println(heroes[i].getName() + \"успешно пробежал\");\n+            }else {\n+                System.out.println(heroes[i].getName() + \"не смог пробежать\");\n+            }\n+            if (heroes[i].getJumpMax() > wall.getHeight()){\n+                System.out.println(heroes[i].getName() + \"успешно перепрыгнул\");\n+            }else {\n+                System.out.println(heroes[i].getName() + \"не смог перепрыгнуть\");\n+            }\n+        }\n+\n+        Obstacle treadmill1 = new Treadmill(0);\n+        Obstacle treadmill2 = new Treadmill(0);\n+        Obstacle treadmill3 = new Treadmill(0);\n+\n+        Obstacle wall1 = new Wall(0);\n+        System.out.println(\"******************************************************************************\");\n+        Obstacle[] obstacle = {treadmill, wall, treadmill1, treadmill2, wall1, treadmill3};\n+        for (int i=0; i < heroes.length; i++){\n+            for (int j=0; j < obstacle.length; j++){\n+                if(obstacle[j].getDistance() != 0) {\n+                    if (obstacle[j].getDistance() < heroes[i].getRunMax()) {\n+                        System.out.println(heroes[i].getName() + \"успешно пробежал,  \");\n+                    } else {\n+                        System.out.println(heroes[i].getName() + \"не смог пробежать,  \");\n+                        break;\n+                    }\n+                }else {\n+                    if (obstacle[j].getHeight() < heroes[i].getJumpMax()) {\n+                        System.out.println(heroes[i].getName() + \"успешно перепрыгнул,  \");\n+                    } else {\n+                        System.out.println(heroes[i].getName() + \"не смог перепрыгнуть,  \");\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    static class Human implements Heroes {\n+\n+\n+        @Override\n+        public void run() {\n+            System.out.println(\"Человек побежал\");\n+        }\n+\n+        @Override\n+        public void jump() {\n+            System.out.println(\"Человек прыгнул\");\n+        }\n+\n+        protected String name;\n+        protected float runMax;\n+        protected float jumpMax;\n+        private final Random random = new Random();\n+\n+        protected Human(String name, float runMax, float jumpMax) {\n+            this.name = name;\n+            this.runMax = runMax + random.nextFloat() * 500;\n+            this.jumpMax = jumpMax + random.nextFloat() * 2;\n+\n+\n+        }\n+\n+        public float getRunMax() {\n+            return this.runMax;\n+        }\n+         public String getName() {\n+             return this.name;\n+         }\n+\n+        @Override\n+        public float getJumpMax() {\n+            return this.jumpMax;\n+        }\n+    }\n+\n+    static class Cat implements Heroes {\n+        @Override\n+        public void run() {\n+            System.out.println(\"Кот побежал\");\n+        }\n+\n+        @Override\n+        public void jump() {\n+            System.out.println(\"Кот прыгнул\");\n+        }\n+\n+        @Override\n+        public float getRunMax() {\n+            return this.runMax;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return this.name;\n+        }\n+\n+        @Override\n+        public float getJumpMax() {\n+            return this.jumpMax;\n+        }\n+\n+        protected String name;\n+        protected float runMax;\n+        protected float jumpMax;\n+        private final Random random = new Random();\n+\n+        protected Cat(String name, float runMax, float jumpMax) {\n+            this.name = name;\n+            this.runMax = runMax + random.nextFloat() * 300;\n+            this.jumpMax = jumpMax + random.nextFloat() * 3;\n+\n+\n+        }\n+    }\n+\n+    static class Robot implements Heroes {\n+\n+        @Override\n+        public void run() {\n+            System.out.println(\"Робот побежал\");\n+\n+        }\n+\n+        @Override\n+        public void jump() {\n+            System.out.println(\"Робот порыгнул\");\n+        }\n+\n+        @Override\n+        public float getRunMax() {\n+            return this.runMax;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return this.name;\n+        }\n+\n+        @Override\n+        public float getJumpMax() {\n+            return this.jumpMax;\n+        }\n+\n+        protected String name;\n+        protected float runMax;\n+        protected float jumpMax;\n+        private final Random random = new Random();\n+\n+        protected Robot(String name, float runMax, float jumpMax) {\n+            this.name = name;\n+            this.runMax = runMax + random.nextFloat() * 1000;\n+            this.jumpMax = jumpMax + random.nextFloat() * 4;\n+        }\n+    }\n+\n+    static class Treadmill implements Obstacle{\n+        protected float distance;\n+\n+        private final Random random = new Random();\n+\n+        protected Treadmill(float distance) {\n+\n+            this.distance = distance + random.nextFloat() * 500;\n+\n+        }\n+        @Override\n+        public float getDistance() {\n+            return this.distance;\n+        }\n+\n+        @Override\n+        public float getHeight() {\n+            return 0;\n+        }\n+    }\n+    static class Wall implements Obstacle{\n+\n+        protected float height;\n+        private final Random random = new Random();\n+\n+        protected Wall(float height){\n+\n+            this.height = height + random.nextFloat() * 0.5f;\n+        }\n+        @Override\n+        public float getDistance() {\n+            return 0;\n+        }\n+        @Override\n+        public float getHeight() {\n+            return this.height;\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "5658f9e9acd3bd53047ef8e0c899fa98d23d54ed",
    "filename": "Game.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Game.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Game.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Game.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,10 @@\n+package lesso7.online;\n+\n+public class Game {\n+\n+\n+\n+    public static void main(String[] args){\n+        new GameWindow();\n+    }\n+}"
  },
  {
    "sha": "3e0807b86503a3bd5651c32459293f0b7e1627ea",
    "filename": "GameMap.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/GameMap.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/GameMap.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/GameMap.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,66 @@\n+package lesso7.online;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+\n+public class GameMap extends JPanel {\n+\n+    public static final int GAME_MODE_HVH = 0;\n+    public static final int GAME_MODE_HVA = 1;\n+\n+    private int gameMode;\n+    private int fieldSizeX;\n+    private int fieldSizeY;\n+    private int winLength;\n+    private Color colorMap;\n+    private int [][] field;\n+    private int cellWidth;\n+    private int cellHeight;\n+\n+    private boolean isExistMap;\n+\n+\n+    GameMap(){\n+        setBackground(Color.WHITE);\n+        isExistMap = false;\n+\n+    }\n+    void start(int gameMode, int fieldSizeX, int fieldSizeY, int winLength, Color colorMap){\n+        this.gameMode = gameMode;\n+        this.fieldSizeX = fieldSizeX;\n+        this.fieldSizeY = fieldSizeY;\n+        this.winLength = winLength;\n+        this.colorMap = colorMap;\n+        setBackground(colorMap);\n+        field = new int[fieldSizeX][fieldSizeY];\n+        isExistMap = true;\n+        repaint();\n+    }\n+\n+    private void render(Graphics g){\n+        if(!isExistMap) return;\n+\n+        int width = getWidth();\n+        int height = getHeight();\n+\n+        cellWidth = width / fieldSizeX;\n+        cellHeight = height / fieldSizeY;\n+        g.setColor(Color.BLACK);\n+\n+        for (int i = 1; i < fieldSizeY; i++) {\n+            int y = i * cellHeight;\n+            g.drawLine(0, y, width, y);\n+        }\n+        for (int i = 1; i < fieldSizeX; i++) {\n+            int x = i * cellWidth;\n+            g.drawLine(x, 0, x, height);\n+        }\n+    }\n+\n+    @Override\n+    protected void paintComponent(Graphics g){\n+    super.paintComponent(g);\n+    render(g);\n+    }\n+\n+}"
  },
  {
    "sha": "f93f526eac844737daadfab9150ff3e982a36d0c",
    "filename": "GameWindow.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/GameWindow.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/GameWindow.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/GameWindow.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,65 @@\n+package lesso7.online;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class GameWindow extends JFrame {\n+\n+    private final int WIN_WIDTH = 500;\n+    private final int WIN_HEIGHT = 550;\n+    private final int WIN_POS_X = 450;\n+    private final int WIN_HJS_Y = 100;\n+    private SettingsWindow settingsWindow;\n+    private GameMap gameMap;\n+\n+\n+    GameWindow(){\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+        setLocation(WIN_POS_X, WIN_HJS_Y);\n+        setTitle(\"The Game\");\n+        setResizable(false);\n+\n+        settingsWindow = new SettingsWindow(this);\n+        gameMap = new GameMap();\n+\n+\n+\n+        JButton butStartGame = new JButton(\"Start New Game\");\n+        butStartGame.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+            settingsWindow.setVisible(true);\n+            }\n+        });\n+\n+        JButton butExitGame = new JButton(\"Exit\");\n+        butExitGame.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        JPanel buttonPanel = new JPanel();\n+        buttonPanel.setLayout(new GridLayout(1, 2));\n+\n+\n+        buttonPanel.add(butStartGame);\n+        buttonPanel.add(butExitGame);\n+        add(buttonPanel, BorderLayout.SOUTH);\n+        add(gameMap);\n+\n+        setVisible(true);\n+    }\n+\n+    void startNewGame (int gameMode, int fieldSizeX, int fieldSizeY, int winLength, Color colorMap){\n+    gameMap.start(gameMode, fieldSizeX, fieldSizeY, winLength, colorMap);\n+    }\n+\n+\n+\n+\n+}"
  },
  {
    "sha": "3981c40b14328c183f02da843d368aeb141e15b5",
    "filename": "Heroes.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Heroes.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Heroes.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Heroes.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,12 @@\n+package lesson2_1.online;\n+\n+public interface Heroes {\n+    void run();\n+    void jump();\n+\n+    float getRunMax();\n+    String getName();\n+\n+\n+    float getJumpMax();\n+}"
  },
  {
    "sha": "b2a086e9624e2d57fd9c190204b5d1d0f5a0618f",
    "filename": "Intelligence.java",
    "status": "added",
    "additions": 570,
    "deletions": 0,
    "changes": 570,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Intelligence.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Intelligence.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Intelligence.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,570 @@\n+\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class Intelligence {\n+\n+\n+    public static  char[][] map;\n+    public static int mapSizeX;\n+    public static int mapSizeY;\n+    public static int winLane;\n+\n+\n+    public static final char HUMAN_DOT = 'X';\n+    public static final char AI_DOT = 'O';\n+    public static final char EMPTY_DOT = '_';\n+\n+\n+    public static final Scanner SCANNER = new Scanner(System.in);\n+    public static final Random RANDOM = new Random();\n+\n+    public static void createMap(){\n+        mapSizeX = 5;\n+        mapSizeY = 5;\n+        winLane = 4;\n+        map = new char[mapSizeY][mapSizeX];\n+\n+        for(int y = 0; y < mapSizeY; y++){\n+            for(int x = 0; x < mapSizeX; x++){\n+                map[y][x] = EMPTY_DOT;\n+            }\n+        }\n+    }\n+    public static void printMap(){\n+        for(int y = 0; y < mapSizeY; y++){\n+            for(int x = 0; x < mapSizeX; x++){\n+                System.out.print(map[y][x] + \" | \");\n+            }\n+            System.out.println();\n+        }\n+        System.out.println();\n+    }\n+\n+    public static void main(String[] args){\n+\n+        createMap();\n+        printMap();\n+        while(true) {\n+            humanTurn();\n+            printMap();\n+\n+            if(checkWinPlayer(HUMAN_DOT)){\n+                System.out.println(\"Вы победили!\");\n+                break;\n+            }\n+\n+            if(isFullMap()) {\n+                System.out.println(\"Ничья!\");\n+                break;\n+            }\n+\n+            intelligence();\n+            printMap();\n+\n+            if(checkWinPlayer(AI_DOT)){\n+                System.out.println(\"Вы проиграли!\");\n+                break;\n+            }\n+\n+            if(isFullMap()) {\n+                System.out.println(\"Ничья!\");\n+                break;\n+            }\n+        }\n+    }\n+    public static void humanTurn(){\n+        int x;\n+        int y;\n+\n+        do {\n+            System.out.println(\"Ваш ход\");\n+            System.out.println(\"Введите координаты вашего хода:\");\n+            x = SCANNER.nextInt() - 1;\n+            y = SCANNER.nextInt() - 1;\n+        } while(!isValidCell(y, x) || !isEmptyCell(y, x));\n+        map[y][x] = HUMAN_DOT;\n+\n+\n+\n+    }\n+\n+    public static void aiTurn() {\n+        int x;\n+        int y;\n+\n+        do {\n+            x = RANDOM.nextInt(mapSizeX);\n+            y = RANDOM.nextInt(mapSizeY);\n+        } while (!isEmptyCell(y, x));\n+        map[y][x] = AI_DOT;\n+\n+    }\n+\n+    public static boolean isValidCell(int y, int x){\n+        return x >= 0 && x < mapSizeX && y >= 0 && y < mapSizeY;\n+\n+    }\n+\n+    public static boolean isEmptyCell(int y, int x){\n+        return map[y][x] == EMPTY_DOT;\n+\n+    }\n+\n+    public static boolean checkWinPlayer(char dotPlayer){\n+//       for (int x = 0; x < mapSizeX; x++) {\n+//            boolean win = true;\n+//            for (int y = 0; y < mapSizeY; y++) {\n+//                if (map[y][x] != dotPlayer) {\n+//                    win = false;\n+//                    break;\n+//                }\n+//\n+//            }\n+//            if(win) return true;\n+//\n+//\n+//       }\n+//        for (int y = 0; y < mapSizeY; y++) {\n+//            boolean win = true;\n+//            for (int x = 0; x < mapSizeX; x++) {\n+//                if (map[y][x] != dotPlayer) {\n+//                    win = false;\n+//                    break;\n+//                }\n+//\n+//            }\n+//            if (win) return true;\n+//        }\n+//        for (int y = 0; y < mapSizeY; y++) {\n+//            boolean win = true;\n+//            for (int x = 0; x < mapSizeX; x++) {\n+//                if (map[x][x] != dotPlayer) {\n+//                    win = false;\n+//                    break;\n+//                }\n+//\n+//            }\n+//            if (win) return true;\n+//        }\n+//        for (int y = 0; y < mapSizeY; y++) {\n+//            boolean win = true;\n+//            for (int x = 0; x < mapSizeX; x++) {\n+//                if (map[x][mapSizeX - x - 1] != dotPlayer) {\n+//                    win = false;\n+//                    break;\n+//                }\n+//\n+//            }\n+//            if (win) return true;\n+//        }\n+\n+        for(int x = 0; x < mapSizeX; x++){\n+            for(int y = 0; y < mapSizeY; y++){\n+                if (map[y][x] == dotPlayer) {\n+                    if (winVertical(dotPlayer, y, x)) {\n+                        return true;\n+                    }else if(winHorizontal(dotPlayer, y, x)){\n+                        return true;\n+                    }else if(winDiagonal1(dotPlayer, y, x)) {\n+                        return true;\n+                    }else if(winDiagonal2(dotPlayer, y, x)) {\n+                        return true;\n+                    }\n+                }\n+\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean winVertical(char dotPlayer, int y, int x){\n+        if (isValidCell(y + winLane - 1, x)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane; j++) {\n+                if (map[j + y][x] != dotPlayer) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean winHorizontal(char dotPlayer, int y, int x){\n+        if (isValidCell(y , x + winLane - 1)) {\n+            boolean win = true;\n+            for (int i = 0; i < winLane; i++) {\n+                if (map[y][i + x] != dotPlayer) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean winDiagonal1(char dotPlayer, int y, int x){\n+        if (isValidCell(y + winLane - 1, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane; j++) {\n+                 if (map[j + y][j + x] != dotPlayer) {\n+                        win = false;\n+                        break;\n+                 }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+    public static boolean winDiagonal2(char dotPlayer, int y, int x){\n+        if (isValidCell(y + winLane - 1, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane; j++) {\n+                if (map[j + y][x - j] != dotPlayer) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isFullMap() {\n+        for (int y = 0; y < mapSizeY; y++) {\n+            for (int x = 0; x < mapSizeX; x++) {\n+                if (map[y][x] == EMPTY_DOT) return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    public static void intelligence(){\n+        for(int x = 0; x < mapSizeX; x++){ //Проверка предвыигрыша\n+            for(int y = 0; y < mapSizeY; y++){\n+                if (map[y][x] == AI_DOT) {\n+                    if (preWinVertical(AI_DOT, y, x)) {\n+                        map[y + winLane - 1][x] = AI_DOT;\n+                        return;\n+                    }else if(preWinHorizontal(AI_DOT, y, x)){\n+                        map[y][x + winLane - 1] = AI_DOT;\n+                        return;\n+                    }else if(preWinDiagonal1(AI_DOT, y, x)) {\n+                        map[y + winLane - 1][x + winLane - 1] = AI_DOT;\n+                        return;\n+                    }else if(preWinDiagonal2(AI_DOT, y, x)) {\n+                        map[y + winLane - 1][x - winLane + 1] = AI_DOT;\n+                        return;\n+                    }\n+                }\n+\n+            }\n+        }\n+        for(int x = 0; x < mapSizeX; x++){ //Проверка предвыигрыша наоборот\n+            for(int y = 0; y < mapSizeY; y++){\n+                if (map[y][x] == AI_DOT) {\n+                    if (preWinVerticalBack(AI_DOT, y, x)) {\n+                        map[y - winLane + 1][x] = AI_DOT;\n+                        return;\n+                    }else if(preWinHorizontalBack(AI_DOT, y, x)){\n+                        map[y][x - winLane + 1] = AI_DOT;\n+                        return;\n+                    }else if(preWinDiagonalBack1(AI_DOT, y, x)) {\n+                        map[y - winLane + 1][x - winLane + 1] = AI_DOT;\n+                        return;\n+                    }else if(preWinDiagonalBack2(AI_DOT, y, x)) {\n+                        map[y - winLane + 1][x + winLane - 1] = AI_DOT;\n+                        return;\n+                    }\n+                }\n+\n+            }\n+        }\n+        for(int x = 0; x < mapSizeX; x++){ //Проверка предпорожения\n+            for(int y = 0; y < mapSizeY; y++){\n+                if (map[y][x] == HUMAN_DOT) {\n+                    if (preDefeatVertical(HUMAN_DOT, y, x)) {\n+                        map[y + winLane - 1][x] = AI_DOT;\n+                        return;\n+                    }else if(preDefeatHorizontal(HUMAN_DOT, y, x)){\n+                        map[y][x + winLane - 1] = AI_DOT;\n+                        return;\n+                    }else if(preDefeatDiagonal1(HUMAN_DOT, y, x)) {\n+                        map[y + winLane - 1][x + winLane - 1] = AI_DOT;\n+                        return;\n+                    }else if(preDefeatDiagonal2(HUMAN_DOT, y, x)) {\n+                        map[y + winLane - 1][x - winLane + 1] = AI_DOT;\n+                        return;\n+                    }\n+                }\n+\n+            }\n+        }\n+        for(int x = 0; x < mapSizeX; x++){ //Проверка предпорожения наоборот\n+            for(int y = 0; y < mapSizeY; y++){\n+                if (map[y][x] == HUMAN_DOT) {\n+                    if (preDefeatVerticalBack(HUMAN_DOT, y, x)) {\n+                        map[y - winLane + 1][x] = AI_DOT;\n+                        return;\n+                    }else if(preDefeatHorizontalBack(HUMAN_DOT, y, x)){\n+                        map[y][x - winLane + 1] = AI_DOT;\n+                        return;\n+                    }else if(preDefeatDiagonalBack1(HUMAN_DOT, y, x)) {\n+                        map[y - winLane + 1][x - winLane + 1] = AI_DOT;\n+                        return;\n+                    }else if(preDefeatDiagonalBack2(HUMAN_DOT, y, x)) {\n+                        map[y - winLane + 1][x + winLane - 1] = AI_DOT;\n+                        return;\n+                    }\n+                }\n+\n+            }\n+        }\n+        aiTurn();\n+    }\n+\n+    public static boolean preWinVertical(char AI_DOT, int y, int x){\n+        if (isValidCell(y + winLane - 1, x) && isEmptyCell(y + winLane - 1, x)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[j + y][x] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preWinHorizontal(char AI_DOT, int y, int x){\n+        if (isValidCell(y , x + winLane - 1) && isEmptyCell(y, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int i = 0; i < winLane - 1; i++) {\n+                if (map[y][i + x] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preWinDiagonal1(char AI_DOT, int y, int x){\n+        if (isValidCell(y + winLane - 1, x + winLane - 1)\n+                && isEmptyCell(y + winLane - 1, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[j + y][j + x] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+    public static boolean preWinDiagonal2(char AI_DOT, int y, int x){\n+        if (isValidCell(y + winLane - 1, x - winLane + 1)\n+                && isEmptyCell(y + winLane - 1, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[j + y][x - j] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean preWinVerticalBack(char AI_DOT, int y, int x){\n+        if (isValidCell(y - winLane + 1, x) && isEmptyCell(y - winLane + 1, x)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[y - j][x] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preWinHorizontalBack(char AI_DOT, int y, int x){\n+        if (isValidCell(y , x - winLane + 1) && isEmptyCell(y, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int i = 0; i < winLane - 1; i++) {\n+                if (map[y][x - i] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preWinDiagonalBack1(char AI_DOT, int y, int x){\n+        if (isValidCell(y - winLane + 1, x - winLane + 1)\n+                && isEmptyCell(y - winLane + 1, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[y - j][x - j] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+    public static boolean preWinDiagonalBack2(char AI_DOT, int y, int x){\n+        if (isValidCell(y - winLane + 1, x + winLane - 1)\n+                && isEmptyCell(y - winLane + 1, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[y - j][x + j] != AI_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean preDefeatVertical(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y + winLane - 1, x) && isEmptyCell(y + winLane - 1, x)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[j + y][x] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preDefeatHorizontal(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y , x + winLane - 1) && isEmptyCell(y, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int i = 0; i < winLane - 1; i++) {\n+                if (map[y][i + x] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preDefeatDiagonal1(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y + winLane - 1, x + winLane - 1)\n+                && isEmptyCell(y + winLane - 1, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[j + y][j + x] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+    public static boolean preDefeatDiagonal2(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y + winLane - 1, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[j + y][x - j] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean preDefeatVerticalBack(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y - winLane + 1, x) && isEmptyCell(y - winLane + 1, x)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[y - j][x] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preDefeatHorizontalBack(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y , x - winLane + 1) && isEmptyCell(y, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int i = 0; i < winLane - 1; i++) {\n+                if (map[y][x - i] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+\n+            }\n+            if(win) return true;\n+        }\n+\n+        return false;\n+    }\n+    public static boolean preDefeatDiagonalBack1(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y - winLane + 1, x - winLane + 1)\n+                && isEmptyCell(y - winLane + 1, x - winLane + 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[y - j][x - j] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+    public static boolean preDefeatDiagonalBack2(char HUMAN_DOT, int y, int x){\n+        if (isValidCell(y - winLane + 1, x + winLane - 1)) {\n+            boolean win = true;\n+            for (int j = 0; j < winLane - 1; j++) {\n+                if (map[y - j][x + j] != HUMAN_DOT) {\n+                    win = false;\n+                    break;\n+                }\n+            }\n+            if(win) return true;\n+        }\n+        return false;\n+    }\n+\n+\n+}\n+\n+"
  },
  {
    "sha": "b080d477fc3980c1068ce7e4edf14e0095fdc66c",
    "filename": "Main.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Main.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Main.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Main.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,81 @@\n+package lesson2_3.online;\n+\n+import java.util.*;\n+\n+public class Main {\n+\n+    private static final Random RND = new Random();\n+\n+    public static void main(String[] args){\n+\n+        String[] word = new String[100];\n+        int strLength = 5;\n+        for(int i = 0; i < word.length; i++) {\n+            StringBuilder builder = new StringBuilder();\n+            for (int x = 0; x < strLength; x++) {\n+                builder.append((char) (65 + RND.nextInt(25)));\n+\n+            }\n+\n+            word[i] = builder.toString();\n+\n+        }\n+        for(int i = 0; i < word.length; i++)\n+            if(i > 20 && RND.nextInt(2) == 1) {\n+                int x = RND.nextInt(20);\n+                word[i] = word[x];}\n+        for(int i = 0; i < word.length; i++)\n+        System.out.print(word[i] + \", \");\n+        System.out.println();\n+        task(word);\n+\n+        Phonebook phonebook = new Phonebook();\n+\n+\n+        phonebook.add(\"Петров\", \"85245215252\");\n+        phonebook.add(\"Сидоров\", \"85245215290\");\n+        phonebook.add(\"Иванов\", \"85245215632\");\n+        phonebook.add(\"Иванов\", \"85245215481\");\n+\n+\n+        System.out.println(\"Сидоров: \" + phonebook.get(\"Сидоров\"));\n+        System.out.println(\"Иванов: \" + phonebook.get(\"Иванов\"));\n+    }\n+\n+\n+\n+    public static void task(String[] word){\n+        Set<String> set = new HashSet<>();\n+        for(int i = 0; i < word.length; i++)\n+            set.add(word[i]);\n+        System.out.println(set);\n+\n+        Map<String, Integer> map = new HashMap<>();\n+        for(String x: word) {\n+            map.put(x, map.getOrDefault(x, 0) + 1);\n+\n+        }\n+        System.out.println(map);\n+    }\n+    public static class Phonebook {\n+\n+        public Map<String, Set<String>> directory = new TreeMap<>();\n+\n+        public void add(String name, String phone) {\n+            Set<String> phones = getPhones(name);\n+            phones.add(phone);\n+        }\n+\n+        public Set<String> getPhones(String name) {\n+\n+            return directory.computeIfAbsent(name, key -> new HashSet<>());\n+        }\n+\n+        public Set<String> get(String name) {\n+            return getPhones(name);\n+        }\n+\n+    }\n+\n+\n+}"
  },
  {
    "sha": "cee54a95ac410e0d3890a0ca0e3aad7662cac17a",
    "filename": "Obstacle.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Obstacle.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Obstacle.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Obstacle.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,6 @@\n+package lesson2_1.online;\n+\n+public interface Obstacle {\n+    float getDistance();\n+    float getHeight();\n+}"
  },
  {
    "sha": "a7a1186df4a2cf8547eabad1b5d598d640f12ef3",
    "filename": "SettingsColor.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/SettingsColor.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/SettingsColor.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/SettingsColor.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,102 @@\n+package lesso7.online;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class SettingsColor extends JFrame {\n+\n+    private final int COLOR_WIDTH = 350;\n+    private final int COLOR_HEIGHT = 300;\n+\n+\n+\n+\n+    private SettingsWindow settingsWindow;\n+\n+    SettingsColor(SettingsWindow settingsWindow){\n+        this.settingsWindow = settingsWindow;\n+        setSize(COLOR_WIDTH, COLOR_HEIGHT);\n+\n+        Rectangle settingsWindowBounds = settingsWindow.getBounds();\n+        int PosX = (int) settingsWindowBounds.getX();\n+        int PosY = (int) settingsWindowBounds.getY();\n+\n+        setLocation(PosX, PosY);\n+        setResizable(false);\n+        setTitle(\"Field Color\");\n+\n+\n+        JButton butOk = new JButton(\"Ok\");\n+        butOk.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+\n+                setVisible(false);\n+            }\n+        });\n+        add(butOk, BorderLayout.SOUTH);\n+\n+        JPanel buttonPanel = new JPanel();\n+        buttonPanel.setLayout(new GridLayout(2, 2));\n+\n+\n+\n+        JButton butWhite = new JButton();\n+        butWhite.setBackground(Color.WHITE);\n+        butWhite.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                    Color colorId = Color.WHITE;\n+                settingsWindow.colorButton(colorId);\n+                butOk.setBackground(colorId);\n+\n+            }\n+        });\n+\n+        JButton butBlue = new JButton();\n+        butBlue.setBackground(Color.BLUE);\n+        butBlue.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                Color colorId = Color.BLUE;\n+                settingsWindow.colorButton(colorId);\n+                butOk.setBackground(colorId);\n+            }\n+        });\n+        JButton butGreen = new JButton();\n+        butGreen.setBackground(Color.GREEN);\n+        butGreen.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                Color colorId = Color.GREEN;\n+                settingsWindow.colorButton(colorId);\n+                butOk.setBackground(colorId);\n+            }\n+        });\n+\n+        JButton butRed = new JButton();\n+        butRed.setBackground(Color.RED);\n+        butRed.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                Color colorId = Color.RED;\n+                settingsWindow.colorButton(colorId);\n+                butOk.setBackground(colorId);\n+            }\n+        });\n+        buttonPanel.add(butWhite);\n+        buttonPanel.add(butBlue);\n+        buttonPanel.add(butGreen);\n+        buttonPanel.add(butRed);\n+\n+        add(buttonPanel);\n+\n+\n+\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "a971cf2e8de08d1af52a259637f9969999c178a6",
    "filename": "SettingsWindow.java",
    "status": "added",
    "additions": 155,
    "deletions": 0,
    "changes": 155,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/SettingsWindow.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/SettingsWindow.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/SettingsWindow.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,155 @@\n+package lesso7.online;\n+\n+import javax.swing.*;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class SettingsWindow<color> extends JFrame {\n+    private final int WIN_WIDTH = 350;\n+    private final int WIN_HEIGHT = 300;\n+\n+    private final int MIN_FIELD_SIZE = 3;\n+    private final int MAX_FIELD_SIZE = 11;\n+    private final int MIN_WIN_LENGTH = 3;\n+\n+\n+    private GameWindow gameWindow;\n+    private SettingsColor settingsColor;\n+\n+    private JRadioButton humanVsHuman;\n+    private JRadioButton humanVsAi;\n+    private JSlider sliderWinLength;\n+    private JSlider sliderFieldSize;\n+    private JButton butStart;\n+    private JButton butColor;\n+    private Color colorMap;\n+\n+\n+    private final String FIELD_SIZE_PREFIX = \"Размер поля: \";\n+    private final String WIN_LENGTH_PREFIX = \"Условие победы: \";\n+\n+     SettingsWindow(GameWindow gameWindow){\n+        this.gameWindow = gameWindow;\n+        setSize(WIN_WIDTH, WIN_HEIGHT);\n+\n+\n+\n+\n+        Rectangle gameWindowBounds = gameWindow.getBounds();\n+        int posX = (int) gameWindowBounds.getCenterX() - WIN_WIDTH / 2;\n+        int posY = (int) gameWindowBounds.getCenterY() - WIN_HEIGHT / 2;\n+\n+        setLocation(posX, posY);\n+        setResizable(false);\n+        setTitle(\"Enter Your Settings New Game\");\n+\n+        settingsColor = new SettingsColor(this);\n+\n+        setLayout(new GridLayout(11,1));\n+\n+\n+\n+        gameModeControl();\n+        fieldSizeAndWinControl();\n+\n+        butColor = new JButton(\"Selecting Field Color\");\n+        butColor.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                settingsColor.setVisible(true);\n+            }\n+        });\n+\n+        add(butColor);\n+\n+        butStart = new JButton(\"Start Game\");\n+        butStart.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                buttonClickMethod();\n+            }\n+        });\n+\n+\n+\n+\n+        add(butStart);\n+\n+\n+    }\n+    private void gameModeControl(){\n+        add(new JLabel(\"Выберите режим игры\"));\n+        humanVsHuman = new JRadioButton(\"Человек против человека\", true);\n+        humanVsAi = new JRadioButton(\"Человек пртив ИИ\");\n+\n+        ButtonGroup gameMode = new ButtonGroup();\n+        gameMode.add(humanVsHuman);\n+        gameMode.add(humanVsAi);\n+\n+        add(humanVsHuman);\n+        add(humanVsAi);\n+    }\n+    private void fieldSizeAndWinControl(){\n+        JLabel labelFieldSize = new JLabel(FIELD_SIZE_PREFIX + MIN_FIELD_SIZE);\n+        JLabel labelWinLength = new JLabel(WIN_LENGTH_PREFIX + MIN_WIN_LENGTH);\n+\n+        sliderFieldSize = new JSlider(MIN_FIELD_SIZE, MAX_FIELD_SIZE, MIN_FIELD_SIZE);\n+        sliderFieldSize.addChangeListener(new ChangeListener() {\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                int currentValue = sliderFieldSize.getValue();\n+                labelFieldSize.setText(FIELD_SIZE_PREFIX + currentValue);\n+                sliderWinLength.setMaximum(currentValue);\n+            }\n+        });\n+\n+        sliderWinLength = new JSlider(MIN_WIN_LENGTH, MIN_FIELD_SIZE, MIN_FIELD_SIZE);\n+        sliderWinLength.addChangeListener(new ChangeListener() {\n+            @Override\n+            public void stateChanged(ChangeEvent e) {\n+                labelWinLength.setText(WIN_LENGTH_PREFIX + sliderWinLength.getValue());\n+            }\n+        });\n+\n+\n+        add(new JLabel(\"Выберите размер поля\"));\n+        add(labelFieldSize);\n+        add(sliderFieldSize);\n+\n+        add(new JLabel(\"Выберите условия победы\"));\n+        add(labelWinLength);\n+        add(sliderWinLength);\n+\n+    }\n+\n+    void colorButton(Color colorId){\n+        butColor.setBackground(colorId);\n+        colorMap = colorId;\n+    }\n+\n+    private void buttonClickMethod(){\n+\n+        int gameMode;\n+        if(humanVsHuman.isSelected()){\n+            gameMode = GameMap.GAME_MODE_HVH;\n+        }else if (humanVsAi.isSelected()){\n+            gameMode = GameMap.GAME_MODE_HVA;\n+        }else{\n+        throw new RuntimeException(\"Неизвестный тип игры\");\n+        }\n+\n+        int fieldSize = sliderFieldSize.getValue();\n+        int winLength = sliderWinLength.getValue();\n+\n+\n+\n+        gameWindow.startNewGame(gameMode, fieldSize, fieldSize, winLength, colorMap);\n+        setVisible(false);\n+\n+\n+    }\n+\n+}"
  },
  {
    "sha": "b7b9b01505b8ba5b56a504bccb06410a111a6f28",
    "filename": "Text.java",
    "status": "modified",
    "additions": 1,
    "deletions": 29,
    "changes": 30,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Text.java",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/Text.java",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/Text.java?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -74,35 +74,7 @@ public static void main(String[] args) throws IOException {\n         }\n         union(fileNames, fileNames1, fileNames2);\n         searchMatch(files, search);\n-\n-//\n-\n-\n-//        Scanner scanner = new Scanner (System.in);\n-//        String word = scanner.nextLine();\n-//\n-//        FileOutputStream fileOutputStream3 = null;\n-//        try {\n-//            fileOutputStream3 = new FileOutputStream(\"text3.txt\");\n-//            PrintStream printStream = new PrintStream(fileOutputStream3);\n-//            printStream.println(\"Здесь используется многоступенчатая схема создания потоков. Вначале мы создаем \" + \"\\n\" +\n-//                    \"поток класса FileReader, привязанный к файлу. Затем при помощи класса BufferedReader мы \" + \"\\n\" +\n-//                    \"добавляем буферизацию. И, наконец, с помощью конструктора класса LineNumberReader мы \" + \"\\n\" +\n-//                    \"создаем поток, позволяющий контролировать номер текущей обрабатываемой строки.\");\n-//            FileInputStream fileInputStream3 = new FileInputStream(\"text3.txt\");\n-//            String output;\n-//            while (output = FileInputStream(\"text3.txt\")) {\n-//                int index = output.indexOf(word);\n-//                if(index != -1) {\n-//                    System.out.println(\"В тексте есть слово \" + word);\n-//                }\n-//            }\n-//\n-//\n-//        } catch (FileNotFoundException e) {\n-//            e.printStackTrace();\n-//        }\n-\n+        \n \n \n     }"
  },
  {
    "sha": "2070fd261ac296e0820a593847306553b5ad16a4",
    "filename": "chat.fxml",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/chat.fxml",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/chat.fxml",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/chat.fxml?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc",
    "patch": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.geometry.*?>\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+\n+<VBox xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"lesson2_4.online.ChatController\">\n+    <children>\n+        <MenuBar cache=\"true\">\n+            <Menu text=\"Фаил\">\n+                <MenuItem disable=\"true\" onAction=\"#connection\" text=\"Подключение\">\n+               <graphic>\n+                  <PasswordField />\n+               </graphic></MenuItem>\n+                <MenuItem onAction=\"#onlineStatus\" text=\"Сетевой статус\" />\n+                <MenuItem onAction=\"#profile\" text=\"Профиль\" />\n+                <MenuItem onAction=\"#exit\" text=\"Выход\" />\n+            </Menu>\n+            <Menu text=\"Настройки\">\n+                <MenuItem onAction=\"#textSize\" text=\"Размер текста\" />\n+                <MenuItem onAction=\"#minimizeToTrade\" text=\"Свернуть в трейд\" />\n+                <MenuItem onAction=\"#fullScreen\" text=\"На весь экран\" />\n+                <MenuItem onAction=\"#topWindows\" text=\"Поверх всех окон\" />\n+            </Menu>\n+            <Menu text=\"Справка\">\n+                <MenuItem onAction=\"#showHelp\" text=\"Справка\" />\n+                <MenuItem onAction=\"#aboutTheProgram\" text=\"О программе\" />\n+            </Menu>\n+        </MenuBar>\n+        <HBox spacing=\"5.0\" VBox.vgrow=\"ALWAYS\">\n+            <TextArea fx:id=\"chatArea\" editable=\"false\" HBox.hgrow=\"ALWAYS\" VBox.vgrow=\"ALWAYS\" />\n+            <ListView fx:id=\"onlineUsers\" prefWidth=\"240.0\" />\n+            <padding>\n+                <Insets bottom=\"5.0\" left=\"5.0\" right=\"5.0\" top=\"5.0\" />\n+            </padding>\n+        </HBox>\n+        <HBox spacing=\"5.0\">\n+            <TextField fx:id=\"input\" onAction=\"#pressEnter\" prefHeight=\"80.0\" HBox.hgrow=\"ALWAYS\" />\n+            <Button fx:id=\"btnSendMessage\" defaultButton=\"true\" lineSpacing=\"10.0\" mnemonicParsing=\"false\" onAction=\"#btnSend\" prefHeight=\"80.0\" prefWidth=\"73.0\" text=\"SEND\" />\n+            <padding>\n+                <Insets bottom=\"5.0\" left=\"5.0\" right=\"5.0\" top=\"5.0\" />\n+            </padding>\n+        </HBox>\n+\n+    </children>\n+</VBox>"
  },
  {
    "sha": "848418af1d1f957cf9b506bbc097369eb20f2b11",
    "filename": "g512.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/Novichoktlt/Java/blob/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/g512.png",
    "raw_url": "https://github.com/Novichoktlt/Java/raw/eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc/g512.png",
    "contents_url": "https://api.github.com/repos/Novichoktlt/Java/contents/g512.png?ref=eb5ae3f1a0a26cc804b0be7d5e37a5e46c1be6fc"
  }
]
