[
  {
    "sha": "2d4dd44cf2d3b0775ef43245fa809a90003a6a1d",
    "filename": "launcher/src/main/scripts/bin/launcher.py",
    "status": "modified",
    "additions": 166,
    "deletions": 102,
    "changes": 268,
    "blob_url": "https://github.com/airlift/airlift/blob/88ee09a9349fc980f46f8f9c96332ef784502ac8/launcher/src/main/scripts/bin/launcher.py",
    "raw_url": "https://github.com/airlift/airlift/raw/88ee09a9349fc980f46f8f9c96332ef784502ac8/launcher/src/main/scripts/bin/launcher.py",
    "contents_url": "https://api.github.com/repos/airlift/airlift/contents/launcher/src/main/scripts/bin/launcher.py?ref=88ee09a9349fc980f46f8f9c96332ef784502ac8",
    "patch": "@@ -16,19 +16,23 @@\n from stat import S_ISLNK\n from time import sleep\n \n-COMMANDS = ['run', 'start', 'stop', 'restart', 'kill', 'status']\n+COMMANDS = [\"run\", \"start\", \"stop\", \"restart\", \"kill\", \"status\"]\n \n LSB_NOT_RUNNING = 3\n LSB_STATUS_UNKNOWN = 4\n \n \n def find_install_path(f):\n     \"\"\"Find canonical parent of bin/launcher.py\"\"\"\n-    if basename(f) != 'launcher.py':\n-        raise Exception(\"Expected file '%s' to be 'launcher.py' not '%s'\" % (f, basename(f)))\n+    if basename(f) != \"launcher.py\":\n+        raise Exception(\n+            \"Expected file '%s' to be 'launcher.py' not '%s'\" % (f, basename(f))\n+        )\n     p = realpath(dirname(f))\n-    if basename(p) != 'bin':\n-        raise Exception(\"Expected file '%s' directory to be 'bin' not '%s\" % (f, basename(p)))\n+    if basename(p) != \"bin\":\n+        raise Exception(\n+            \"Expected file '%s' directory to be 'bin' not '%s\" % (f, basename(p))\n+        )\n     return dirname(p)\n \n \n@@ -45,17 +49,17 @@ def load_properties(f):\n     \"\"\"Load key/value pairs from a file\"\"\"\n     properties = {}\n     for line in load_lines(f):\n-        k, v = line.split('=', 1)\n+        k, v = line.split(\"=\", 1)\n         properties[k.strip()] = v.strip()\n     return properties\n \n \n def load_lines(f):\n     \"\"\"Load lines from a file, ignoring blank or comment lines\"\"\"\n     lines = []\n-    for line in open(f, 'r').readlines():\n+    for line in open(f, \"r\").readlines():\n         line = line.strip()\n-        if len(line) > 0 and not line.startswith('#'):\n+        if len(line) > 0 and not line.startswith(\"#\"):\n             lines.append(line)\n     return lines\n \n@@ -72,11 +76,11 @@ def try_lock(f):\n def open_pidfile(f, mode):\n     \"\"\"Open file in read/write mode (without truncating it)\"\"\"\n     fd = os.open(f, O_RDWR | O_CREAT, mode)\n-    if hasattr(os, 'set_inheritable'):\n+    if hasattr(os, \"set_inheritable\"):\n         # See https://docs.python.org/3/library/os.html#inheritance-of-file-descriptors\n         # Since Python 3.4\n         os.set_inheritable(fd, True)\n-    return os.fdopen(fd, 'r+')\n+    return os.fdopen(fd, \"r+\")\n \n \n class Process:\n@@ -90,13 +94,13 @@ def refresh(self):\n         self.locked = try_lock(self.pid_file)\n \n     def clear_pid(self):\n-        assert self.locked, 'pid file not locked by us'\n+        assert self.locked, \"pid file not locked by us\"\n         self.pid_file.seek(0)\n         self.pid_file.truncate()\n \n     def write_pid(self, pid):\n         self.clear_pid()\n-        self.pid_file.write(str(pid) + '\\n')\n+        self.pid_file.write(str(pid) + \"\\n\")\n         self.pid_file.flush()\n \n     def alive(self):\n@@ -109,10 +113,10 @@ def alive(self):\n             os.kill(pid, 0)\n             return True\n         except OSError as e:\n-            raise Exception('Signaling pid %s failed: %s' % (pid, e))\n+            raise Exception(\"Signaling pid %s failed: %s\" % (pid, e))\n \n     def read_pid(self):\n-        assert not self.locked, 'pid file is locked by us'\n+        assert not self.locked, \"pid file is locked by us\"\n         self.pid_file.seek(0)\n         line = self.pid_file.readline().strip()\n         if len(line) == 0:\n@@ -123,7 +127,9 @@ def read_pid(self):\n         except ValueError:\n             raise Exception(\"Pid file '%s' contains garbage: %s\" % (self.path, line))\n         if pid <= 0:\n-            raise Exception(\"Pid file '%s' contains an invalid pid: %s\" % (self.path, pid))\n+            raise Exception(\n+                \"Pid file '%s' contains an invalid pid: %s\" % (self.path, pid)\n+            )\n         return pid\n \n \n@@ -151,7 +157,7 @@ def symlink_exists(p):\n     try:\n         st = os.lstat(p)\n         if not S_ISLNK(st.st_mode):\n-            raise Exception('Path exists and is not a symlink: %s' % p)\n+            raise Exception(\"Path exists and is not a symlink: %s\" % p)\n         return True\n     except OSError as e:\n         if e.errno != errno.ENOENT:\n@@ -163,8 +169,11 @@ def create_symlink(source, target):\n     \"\"\"Create a symlink, removing the target first if it is a symlink\"\"\"\n     if symlink_exists(target):\n         os.remove(target)\n-    if exists(source):\n-        os.symlink(source, target)\n+    if not exists(source):\n+        raise Exception(\n+            \"Failed to create symlink at '%s': %s doesn't exist\" % (target, source)\n+        )\n+    os.symlink(source, target)\n \n \n def create_app_symlinks(options):\n@@ -174,56 +183,55 @@ def create_app_symlinks(options):\n     This is needed to support programs that reference 'etc/xyz' from within\n     their config files: log.levels-file=etc/log.properties\n     \"\"\"\n-    if options.etc_dir != pathjoin(options.data_dir, 'etc'):\n-        create_symlink(\n-            options.etc_dir,\n-            pathjoin(options.data_dir, 'etc'))\n+    if options.etc_dir != pathjoin(options.data_dir, \"etc\"):\n+        create_symlink(options.etc_dir, pathjoin(options.data_dir, \"etc\"))\n \n     if options.install_path != options.data_dir:\n         create_symlink(\n-            pathjoin(options.install_path, 'plugin'),\n-            pathjoin(options.data_dir, 'plugin'))\n+            pathjoin(options.install_path, \"plugin\"),\n+            pathjoin(options.data_dir, \"plugin\"),\n+        )\n \n \n def build_java_execution(options, daemon):\n     if not exists(options.config_path):\n-        raise Exception('Config file is missing: %s' % options.config_path)\n+        raise Exception(\"Config file is missing: %s\" % options.config_path)\n     if not exists(options.jvm_config):\n-        raise Exception('JVM config file is missing: %s' % options.jvm_config)\n+        raise Exception(\"JVM config file is missing: %s\" % options.jvm_config)\n     if not exists(options.launcher_config):\n-        raise Exception('Launcher config file is missing: %s' % options.launcher_config)\n+        raise Exception(\"Launcher config file is missing: %s\" % options.launcher_config)\n     if options.log_levels_set and not exists(options.log_levels):\n-        raise Exception('Log levels file is missing: %s' % options.log_levels)\n+        raise Exception(\"Log levels file is missing: %s\" % options.log_levels)\n \n-    with open(os.devnull, 'w') as devnull:\n+    with open(os.devnull, \"w\") as devnull:\n         try:\n-            subprocess.check_call(['java', '-version'], stdout=devnull, stderr=devnull)\n+            subprocess.check_call([\"java\", \"-version\"], stdout=devnull, stderr=devnull)\n         except (OSError, subprocess.CalledProcessError):\n-            raise Exception('Java is not installed')\n+            raise Exception(\"Java is not installed\")\n \n     properties = options.properties.copy()\n \n     if exists(options.log_levels):\n-        properties['log.levels-file'] = options.log_levels\n+        properties[\"log.levels-file\"] = options.log_levels\n \n     if daemon:\n-        properties['log.output-file'] = options.server_log\n-        properties['log.enable-console'] = 'false'\n+        properties[\"log.output-file\"] = options.server_log\n+        properties[\"log.enable-console\"] = \"false\"\n \n     jvm_properties = load_lines(options.jvm_config)\n     launcher_properties = load_properties(options.launcher_config)\n \n     try:\n-        main_class = launcher_properties['main-class']\n+        main_class = launcher_properties[\"main-class\"]\n     except KeyError:\n         raise Exception(\"Launcher config is missing 'main-class' property\")\n \n-    properties['config'] = options.config_path\n+    properties[\"config\"] = options.config_path\n \n-    system_properties = ['-D%s=%s' % i for i in properties.items()]\n-    classpath = pathjoin(options.install_path, 'lib', '*')\n+    system_properties = [\"-D%s=%s\" % i for i in properties.items()]\n+    classpath = pathjoin(options.install_path, \"lib\", \"*\")\n \n-    command = ['java', '-cp', classpath]\n+    command = [\"java\", \"-cp\", classpath]\n     command += jvm_properties + options.jvm_options + system_properties\n     command += [main_class]\n \n@@ -234,20 +242,22 @@ def build_java_execution(options, daemon):\n     env = os.environ.copy()\n \n     # set process name: https://github.com/airlift/procname\n-    process_name = launcher_properties.get('process-name', '')\n+    process_name = launcher_properties.get(\"process-name\", \"\")\n     if len(process_name) > 0:\n-        system = platform.system() + '-' + platform.machine()\n-        shim = pathjoin(options.install_path, 'bin', 'procname', system, 'libprocname.so')\n+        system = platform.system() + \"-\" + platform.machine()\n+        shim = pathjoin(\n+            options.install_path, \"bin\", \"procname\", system, \"libprocname.so\"\n+        )\n         if exists(shim):\n-            env['LD_PRELOAD'] = (env.get('LD_PRELOAD', '') + ':' + shim).strip()\n-            env['PROCNAME'] = process_name\n+            env[\"LD_PRELOAD\"] = (env.get(\"LD_PRELOAD\", \"\") + \":\" + shim).strip()\n+            env[\"PROCNAME\"] = process_name\n \n     return command, env\n \n \n def run(process, options):\n     if process.alive():\n-        print('Already running as %s' % process.read_pid())\n+        print(\"Already running as %s\" % process.read_pid())\n         return\n \n     create_app_symlinks(options)\n@@ -265,7 +275,7 @@ def run(process, options):\n \n def start(process, options):\n     if process.alive():\n-        print('Already running as %s' % process.read_pid())\n+        print(\"Already running as %s\" % process.read_pid())\n         return\n \n     create_app_symlinks(options)\n@@ -280,7 +290,7 @@ def start(process, options):\n     pid = os.fork()\n     if pid > 0:\n         process.write_pid(pid)\n-        print('Started as %s' % pid)\n+        print(\"Started as %s\" % pid)\n         return\n \n     os.setsid()\n@@ -294,7 +304,7 @@ def start(process, options):\n \n def terminate(process, signal, message):\n     if not process.alive():\n-        print('Not running')\n+        print(\"Not running\")\n         return\n \n     pid = process.read_pid()\n@@ -304,82 +314,124 @@ def terminate(process, signal, message):\n             os.kill(pid, signal)\n         except OSError as e:\n             if e.errno != errno.ESRCH:\n-                raise Exception('Signaling pid %s failed: %s' % (pid, e))\n+                raise Exception(\"Signaling pid %s failed: %s\" % (pid, e))\n \n         if not process.alive():\n             process.clear_pid()\n             break\n \n         sleep(0.1)\n \n-    print('%s %s' % (message, pid))\n+    print(\"%s %s\" % (message, pid))\n \n \n def stop(process):\n-    terminate(process, SIGTERM, 'Stopped')\n+    terminate(process, SIGTERM, \"Stopped\")\n \n \n def kill(process):\n-    terminate(process, SIGKILL, 'Killed')\n+    terminate(process, SIGKILL, \"Killed\")\n \n \n def status(process):\n     if not process.alive():\n-        print('Not running')\n+        print(\"Not running\")\n         sys.exit(LSB_NOT_RUNNING)\n-    print('Running as %s' % process.read_pid())\n+    print(\"Running as %s\" % process.read_pid())\n \n \n def handle_command(command, options):\n     process = Process(options.pid_file)\n-    if command == 'run':\n+    if command == \"run\":\n         run(process, options)\n-    elif command == 'start':\n+    elif command == \"start\":\n         start(process, options)\n-    elif command == 'stop':\n+    elif command == \"stop\":\n         stop(process)\n-    elif command == 'restart':\n+    elif command == \"restart\":\n         stop(process)\n         start(process, options)\n-    elif command == 'kill':\n+    elif command == \"kill\":\n         kill(process)\n-    elif command == 'status':\n+    elif command == \"status\":\n         status(process)\n     else:\n-        raise AssertionError('Unhandled command: ' + command)\n+        raise AssertionError(\"Unhandled command: \" + command)\n \n \n def create_parser():\n-    commands = 'Commands: ' + ', '.join(COMMANDS)\n-    parser = OptionParser(prog='launcher', usage='usage: %prog [options] command', description=commands)\n-    parser.add_option('-v', '--verbose', action='store_true', default=False, help='Run verbosely')\n-    parser.add_option('--etc-dir', metavar='DIR', help='Defaults to INSTALL_PATH/etc')\n-    parser.add_option('--launcher-config', metavar='FILE', help='Defaults to INSTALL_PATH/bin/launcher.properties')\n-    parser.add_option('--node-config', metavar='FILE', help='Defaults to ETC_DIR/node.properties')\n-    parser.add_option('--jvm-config', metavar='FILE', help='Defaults to ETC_DIR/jvm.config')\n-    parser.add_option('--config', metavar='FILE', help='Defaults to ETC_DIR/config.properties')\n-    parser.add_option('--log-levels-file', metavar='FILE', help='Defaults to ETC_DIR/log.properties')\n-    parser.add_option('--data-dir', metavar='DIR', help='Defaults to INSTALL_PATH')\n-    parser.add_option('--pid-file', metavar='FILE', help='Defaults to DATA_DIR/var/run/launcher.pid')\n-    parser.add_option('--launcher-log-file', metavar='FILE', help='Defaults to DATA_DIR/var/log/launcher.log (only in daemon mode)')\n-    parser.add_option('--server-log-file', metavar='FILE', help='Defaults to DATA_DIR/var/log/server.log (only in daemon mode)')\n-    parser.add_option('-J', action='append', metavar='OPT', dest='jvm_options', help='Set a JVM option')\n-    parser.add_option('-D', action='append', metavar='NAME=VALUE', dest='properties', help='Set a Java system property')\n+    commands = \"Commands: \" + \", \".join(COMMANDS)\n+    parser = OptionParser(\n+        prog=\"launcher\", usage=\"usage: %prog [options] command\", description=commands\n+    )\n+    parser.add_option(\n+        \"-v\", \"--verbose\", action=\"store_true\", default=False, help=\"Run verbosely\"\n+    )\n+    parser.add_option(\"--etc-dir\", metavar=\"DIR\", help=\"Defaults to INSTALL_PATH/etc\")\n+    parser.add_option(\n+        \"--launcher-config\",\n+        metavar=\"FILE\",\n+        help=\"Defaults to INSTALL_PATH/bin/launcher.properties\",\n+    )\n+    parser.add_option(\n+        \"--node-config\", metavar=\"FILE\", help=\"Defaults to ETC_DIR/node.properties\"\n+    )\n+    parser.add_option(\n+        \"--jvm-config\", metavar=\"FILE\", help=\"Defaults to ETC_DIR/jvm.config\"\n+    )\n+    parser.add_option(\n+        \"--config\", metavar=\"FILE\", help=\"Defaults to ETC_DIR/config.properties\"\n+    )\n+    parser.add_option(\n+        \"--log-levels-file\", metavar=\"FILE\", help=\"Defaults to ETC_DIR/log.properties\"\n+    )\n+    parser.add_option(\"--data-dir\", metavar=\"DIR\", help=\"Defaults to INSTALL_PATH\")\n+    parser.add_option(\n+        \"--pid-file\", metavar=\"FILE\", help=\"Defaults to DATA_DIR/var/run/launcher.pid\"\n+    )\n+    parser.add_option(\n+        \"--launcher-log-file\",\n+        metavar=\"FILE\",\n+        help=\"Defaults to DATA_DIR/var/log/launcher.log (only in daemon mode)\",\n+    )\n+    parser.add_option(\n+        \"--server-log-file\",\n+        metavar=\"FILE\",\n+        help=\"Defaults to DATA_DIR/var/log/server.log (only in daemon mode)\",\n+    )\n+    parser.add_option(\n+        \"-J\",\n+        action=\"append\",\n+        metavar=\"OPT\",\n+        dest=\"jvm_options\",\n+        help=\"Set a JVM option\",\n+    )\n+    parser.add_option(\n+        \"-D\",\n+        action=\"append\",\n+        metavar=\"NAME=VALUE\",\n+        dest=\"properties\",\n+        help=\"Set a Java system property\",\n+    )\n     return parser\n \n \n def parse_properties(parser, args):\n     properties = {}\n     for arg in args:\n-        if '=' not in arg:\n-            parser.error('property is malformed: %s' % arg)\n-        key, value = [i.strip() for i in arg.split('=', 1)]\n-        if key == 'config':\n-            parser.error('cannot specify config using -D option (use --config)')\n-        if key == 'log.output-file':\n-            parser.error('cannot specify server log using -D option (use --server-log-file)')\n-        if key == 'log.levels-file':\n-            parser.error('cannot specify log levels using -D option (use --log-levels-file)')\n+        if \"=\" not in arg:\n+            parser.error(\"property is malformed: %s\" % arg)\n+        key, value = [i.strip() for i in arg.split(\"=\", 1)]\n+        if key == \"config\":\n+            parser.error(\"cannot specify config using -D option (use --config)\")\n+        if key == \"log.output-file\":\n+            parser.error(\n+                \"cannot specify server log using -D option (use --server-log-file)\"\n+            )\n+        if key == \"log.levels-file\":\n+            parser.error(\n+                \"cannot specify log levels using -D option (use --log-levels-file)\"\n+            )\n         properties[key] = value\n     return properties\n \n@@ -402,45 +454,57 @@ def main():\n \n     if len(args) != 1:\n         if len(args) == 0:\n-            parser.error('command name not specified')\n+            parser.error(\"command name not specified\")\n         else:\n-            parser.error('too many arguments')\n+            parser.error(\"too many arguments\")\n     command = args[0]\n \n     if command not in COMMANDS:\n-        parser.error('unsupported command: %s' % command)\n+        parser.error(\"unsupported command: %s\" % command)\n \n     try:\n         install_path = find_install_path(sys.argv[0])\n     except Exception as e:\n-        print('ERROR: %s' % e)\n+        print(\"ERROR: %s\" % e)\n         sys.exit(LSB_STATUS_UNKNOWN)\n \n     o = Options()\n     o.verbose = options.verbose\n     o.install_path = install_path\n-    o.launcher_config = realpath(options.launcher_config or pathjoin(o.install_path, 'bin/launcher.properties'))\n-    o.etc_dir = realpath(options.etc_dir or pathjoin(o.install_path, 'etc'))\n-    o.node_config = realpath(options.node_config or pathjoin(o.etc_dir, 'node.properties'))\n-    o.jvm_config = realpath(options.jvm_config or pathjoin(o.etc_dir, 'jvm.config'))\n-    o.config_path = realpath(options.config or pathjoin(o.etc_dir, 'config.properties'))\n-    o.log_levels = realpath(options.log_levels_file or pathjoin(o.etc_dir, 'log.properties'))\n+    o.launcher_config = realpath(\n+        options.launcher_config or pathjoin(o.install_path, \"bin/launcher.properties\")\n+    )\n+    o.etc_dir = realpath(options.etc_dir or pathjoin(o.install_path, \"etc\"))\n+    o.node_config = realpath(\n+        options.node_config or pathjoin(o.etc_dir, \"node.properties\")\n+    )\n+    o.jvm_config = realpath(options.jvm_config or pathjoin(o.etc_dir, \"jvm.config\"))\n+    o.config_path = realpath(options.config or pathjoin(o.etc_dir, \"config.properties\"))\n+    o.log_levels = realpath(\n+        options.log_levels_file or pathjoin(o.etc_dir, \"log.properties\")\n+    )\n     o.log_levels_set = bool(options.log_levels_file)\n     o.jvm_options = options.jvm_options or []\n \n     if options.node_config and not exists(o.node_config):\n-        parser.error('Node config file is missing: %s' % o.node_config)\n+        parser.error(\"Node config file is missing: %s\" % o.node_config)\n \n     node_properties = {}\n     if exists(o.node_config):\n         node_properties = load_properties(o.node_config)\n \n-    data_dir = node_properties.get('node.data-dir')\n+    data_dir = node_properties.get(\"node.data-dir\")\n     o.data_dir = realpath(options.data_dir or data_dir or o.install_path)\n \n-    o.pid_file = realpath(options.pid_file or pathjoin(o.data_dir, 'var/run/launcher.pid'))\n-    o.launcher_log = realpath(options.launcher_log_file or pathjoin(o.data_dir, 'var/log/launcher.log'))\n-    o.server_log = realpath(options.server_log_file or pathjoin(o.data_dir, 'var/log/server.log'))\n+    o.pid_file = realpath(\n+        options.pid_file or pathjoin(o.data_dir, \"var/run/launcher.pid\")\n+    )\n+    o.launcher_log = realpath(\n+        options.launcher_log_file or pathjoin(o.data_dir, \"var/log/launcher.log\")\n+    )\n+    o.server_log = realpath(\n+        options.server_log_file or pathjoin(o.data_dir, \"var/log/server.log\")\n+    )\n \n     o.properties = parse_properties(parser, options.properties or {})\n     for k, v in node_properties.items():\n@@ -458,9 +522,9 @@ def main():\n         if o.verbose:\n             traceback.print_exc()\n         else:\n-            print('ERROR: %s' % e)\n+            print(\"ERROR: %s\" % e)\n         sys.exit(LSB_STATUS_UNKNOWN)\n \n \n-if __name__ == '__main__':\n+if __name__ == \"__main__\":\n     main()"
  }
]
