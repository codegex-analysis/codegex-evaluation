[
  {
    "sha": "15090b04c1c8477b7f5dcf68be47bfe6e9798211",
    "filename": "src/delf/hackerrank/GreedyFlorist.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/WeareSoft/algorithm-study/blob/96235d2eafe628d6b4de922fae3f8e1f5e9554ed/src/delf/hackerrank/GreedyFlorist.java",
    "raw_url": "https://github.com/WeareSoft/algorithm-study/raw/96235d2eafe628d6b4de922fae3f8e1f5e9554ed/src/delf/hackerrank/GreedyFlorist.java",
    "contents_url": "https://api.github.com/repos/WeareSoft/algorithm-study/contents/src/delf/hackerrank/GreedyFlorist.java?ref=96235d2eafe628d6b4de922fae3f8e1f5e9554ed",
    "patch": "@@ -0,0 +1,22 @@\n+package hackerrank;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Greedy Florist\n+ * https://www.hackerrank.com/challenges/greedy-florist/problem\n+ */\n+public class GreedyFlorist {\n+    public static void main(String[] args) {\n+        System.out.println(getMinimumCost(3, new int[]{1, 3, 5, 7, 9}));\n+    }\n+\n+    static int getMinimumCost(int k, int[] c) {\n+        Arrays.sort(c);\n+        int answer = 0;\n+        for (int i = c.length - 1; i >= 0; i--) {\n+            answer += (((c.length - (i + 1)) / k) + 1) * c[i];\n+        }\n+        return answer;\n+    }\n+}"
  },
  {
    "sha": "76bd5f69e5c8b4ff28fc5d4589cf73a2d982161e",
    "filename": "src/delf/hackerrank/IceCreamParlor.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/WeareSoft/algorithm-study/blob/96235d2eafe628d6b4de922fae3f8e1f5e9554ed/src/delf/hackerrank/IceCreamParlor.java",
    "raw_url": "https://github.com/WeareSoft/algorithm-study/raw/96235d2eafe628d6b4de922fae3f8e1f5e9554ed/src/delf/hackerrank/IceCreamParlor.java",
    "contents_url": "https://api.github.com/repos/WeareSoft/algorithm-study/contents/src/delf/hackerrank/IceCreamParlor.java?ref=96235d2eafe628d6b4de922fae3f8e1f5e9554ed",
    "patch": "@@ -0,0 +1,48 @@\n+package hackerrank;\n+\n+import java.util.*;\n+\n+/**\n+ * Hash Tables: Ice Cream Parlor\n+ * https://www.hackerrank.com/challenges/ctci-ice-cream-parlor/problem\n+ */\n+public class IceCreamParlor {\n+    public static void main(String[] args) {\n+        whatFlavors(new int[]{2, 2, 4, 3}, 4);\n+    }\n+\n+    static void whatFlavors(int[] cost, int money) {\n+        Map<Integer, Integer> map = new HashMap<>();\n+        for (int i = 0; i < cost.length; i++) {\n+            if (cost[i] > money) {\n+                continue;\n+            }\n+            if (map.containsKey(cost[i])) {\n+                if (cost[i] * 2 == money) {\n+                    System.out.println((map.get(cost[i]) + 1) + \" \" + (i + 1));\n+                    return;\n+                }\n+            }\n+            map.put(cost[i], i);\n+        }\n+\n+        for (int c : map.keySet()) {\n+            if (map.containsKey(money - c)) {\n+                int one = map.get(c) + 1;\n+                int another = map.get(money - c) + 1;\n+                System.out.println(Math.min(one, another) + \" \" + Math.max(one, another));\n+                return;\n+            }\n+        }\n+\n+        /*for (int i = 1; i < money; i++) {\n+            int m = map.get(i);\n+            if (map.containsKey(i) && map.containsKey(money - i)) {\n+                int one = map.get(i) + 1;\n+                int another = map.get(money - i) + 1;\n+                System.out.println(Math.min(one, another) + \" \" + Math.max(one, another));\n+                return;\n+            }\n+        }*/\n+    }\n+}"
  },
  {
    "sha": "9207ac320c1b615c228f95c1867e5592cce71a79",
    "filename": "src/delf/programmers/skillcheck/SkillCheck0302.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/WeareSoft/algorithm-study/blob/96235d2eafe628d6b4de922fae3f8e1f5e9554ed/src/delf/programmers/skillcheck/SkillCheck0302.java",
    "raw_url": "https://github.com/WeareSoft/algorithm-study/raw/96235d2eafe628d6b4de922fae3f8e1f5e9554ed/src/delf/programmers/skillcheck/SkillCheck0302.java",
    "contents_url": "https://api.github.com/repos/WeareSoft/algorithm-study/contents/src/delf/programmers/skillcheck/SkillCheck0302.java?ref=96235d2eafe628d6b4de922fae3f8e1f5e9554ed",
    "patch": "@@ -0,0 +1,33 @@\n+package programmers.skillcheck;\n+\n+import java.util.Arrays;\n+\n+public class SkillCheck0302 {\n+    public int[] solution(int n, int s) {\n+        int div = s / n;\n+        int rest = s % n;\n+\n+        if (div == 0) {\n+            return new int[]{-1};\n+        }\n+\n+        int[] answer = new int[n];\n+        Arrays.fill(answer, div);\n+\n+        if (rest == 0) {\n+            return answer;\n+        }\n+\n+        int cursor = 0;\n+        for (int i = 0; i < rest; i++, cursor %= n) {\n+            answer[cursor++]++;\n+        }\n+        Arrays.sort(answer);\n+        return answer;\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(Arrays.toString(new SkillCheck0302().solution(2, 9)));\n+\n+    }\n+}"
  }
]
