[
  {
    "sha": "3d4533f70c3fbbb055cf0de5115464cce498e133",
    "filename": "sdk/src/androidTest/java/ly/count/android/sdk/ConnectionProcessorTests.java",
    "status": "modified",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/androidTest/java/ly/count/android/sdk/ConnectionProcessorTests.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/androidTest/java/ly/count/android/sdk/ConnectionProcessorTests.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/androidTest/java/ly/count/android/sdk/ConnectionProcessorTests.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -23,6 +23,7 @@ of this software and associated documentation files (the \"Software\"), to deal\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import java.io.ByteArrayInputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n@@ -32,12 +33,17 @@ of this software and associated documentation files (the \"Software\"), to deal\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n import static ly.count.android.sdk.UtilsNetworking.sha256Hash;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.nullable;\n import static org.mockito.Mockito.anyString;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.isNull;\n@@ -271,6 +277,85 @@ public void testRun_storeHasTwoConnections() throws IOException {\n         verify(mockURLConnection, times(2)).disconnect();\n     }\n \n+    @Test\n+    public void testUrlConnectionUsesInterceptor() throws IOException {\n+        final String eventData = \"blahblahblah\";\n+        ConnectionInterceptor interceptor = mock(ConnectionInterceptor.class);\n+        when(interceptor.intercept(any(HttpURLConnection.class), nullable(byte[].class))).thenAnswer(new Answer<HttpURLConnection>() {\n+            @Override public HttpURLConnection answer(InvocationOnMock invocation) throws Throwable {\n+                return invocation.getArgument(0, HttpURLConnection.class);\n+            }\n+        });\n+        connectionProcessor.setConnectionInterceptor(interceptor);\n+        final URLConnection urlConnection = connectionProcessor.urlConnectionForServerRequest(eventData, null);\n+        verify(interceptor).intercept(any(HttpURLConnection.class), nullable(byte[].class));\n+        assertEquals(30000, urlConnection.getConnectTimeout());\n+        assertEquals(30000, urlConnection.getReadTimeout());\n+        assertFalse(urlConnection.getUseCaches());\n+        assertTrue(urlConnection.getDoInput());\n+        assertFalse(urlConnection.getDoOutput());\n+        assertEquals(new URL(connectionProcessor.getServerURL() + \"/i?\" + eventData + \"&checksum256=\" + sha256Hash(eventData + null)), urlConnection.getURL());\n+    }\n+\n+    @Test\n+    public void testUrlConnectionInterceptorCanSetRequestPropertiesOnGet() throws IOException {\n+        final String eventData = \"blahblahblah\";\n+        ConnectionInterceptor interceptor = new ConnectionInterceptor() {\n+            @Override public HttpURLConnection intercept(HttpURLConnection connection, byte[] body) {\n+                connection.setRequestProperty(\"Prop\", \"SomeDynamicHeaderValue\");\n+                return connection;\n+            }\n+        };\n+        connectionProcessor.setConnectionInterceptor(interceptor);\n+        URLConnection conn = connectionProcessor.urlConnectionForServerRequest(eventData, null);\n+        assertEquals(\"SomeDynamicHeaderValue\", conn.getRequestProperty(\"Prop\"));\n+    }\n+\n+    @Test\n+    public void connectionInterceptorCanSetRequestPropertiesOnPost() throws IOException {\n+        // Crash data uses http post\n+        final String eventData = \"blahblahblah&crash=lol\";\n+        connectionProcessor = new ConnectionProcessor(\"https://count.ly/\", mockStore, mockDeviceId, null, null, moduleLog);\n+        ConnectionInterceptor interceptor = new ConnectionInterceptor() {\n+            @Override public HttpURLConnection intercept(HttpURLConnection connection, byte[] body) {\n+                connection.setRequestProperty(\"Prop\", \"SomeDynamicHeaderValue\");\n+                return connection;\n+            }\n+        };\n+        connectionProcessor.setConnectionInterceptor(interceptor);\n+        URLConnection conn = connectionProcessor.urlConnectionForServerRequest(eventData, null);\n+        assertEquals(\"SomeDynamicHeaderValue\", conn.getRequestProperty(\"Prop\"));\n+    }\n+\n+    @Test\n+    public void testConnectionInterceptorCanSetRequestPropertiesOnPostPicturePath() throws IOException {\n+        File picture = File.createTempFile(\"IconicFinance\", \".png\");\n+        final String eventData = \"picturePath=\"+picture.getPath();\n+        connectionProcessor = new ConnectionProcessor(\"https://count.ly/\", mockStore, mockDeviceId, null, null, moduleLog);\n+        ConnectionInterceptor interceptor = new ConnectionInterceptor() {\n+            @Override public HttpURLConnection intercept(HttpURLConnection connection, byte[] body) {\n+                connection.setRequestProperty(\"Prop\", \"SomeDynamicHeaderValue\");\n+                return connection;\n+            }\n+        };\n+        connectionProcessor.setConnectionInterceptor(interceptor);\n+        URLConnection conn = connectionProcessor.urlConnectionForServerRequest(eventData, null);\n+        assertEquals(\"SomeDynamicHeaderValue\", conn.getRequestProperty(\"Prop\"));\n+    }\n+\n+    @Test\n+    public void testUrlConnectionDoesNotUseInterceptorWhenNotAvailable() throws IOException {\n+        final String eventData = \"blahblahblah\";\n+        final URLConnection urlConnection = connectionProcessor.urlConnectionForServerRequest(eventData, null);\n+        assertNull(connectionProcessor.getConnectionInterceptor());\n+        assertEquals(30000, urlConnection.getConnectTimeout());\n+        assertEquals(30000, urlConnection.getReadTimeout());\n+        assertFalse(urlConnection.getUseCaches());\n+        assertTrue(urlConnection.getDoInput());\n+        assertFalse(urlConnection.getDoOutput());\n+        assertEquals(new URL(connectionProcessor.getServerURL() + \"/i?\" + eventData + \"&checksum256=\" + sha256Hash(eventData + null)), urlConnection.getURL());\n+    }\n+\n     private static class TestInputStream2 extends InputStream {\n         boolean closed = false;\n "
  },
  {
    "sha": "7282d3acc20e10354ff12e7d7270af2556bb2c9d",
    "filename": "sdk/src/androidTest/java/ly/count/android/sdk/CountlyConfigTests.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/androidTest/java/ly/count/android/sdk/CountlyConfigTests.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/androidTest/java/ly/count/android/sdk/CountlyConfigTests.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/androidTest/java/ly/count/android/sdk/CountlyConfigTests.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -4,6 +4,7 @@\n import android.app.Application;\n import android.content.Context;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import java.net.HttpURLConnection;\n import java.util.HashMap;\n import java.util.Map;\n import org.junit.Assert;\n@@ -93,6 +94,12 @@ public boolean filterCrash(String crash) {\n \n         Application app = new Application();\n \n+        ConnectionInterceptor interceptor = new ConnectionInterceptor() {\n+            @Override public HttpURLConnection intercept(HttpURLConnection connection, byte[] body) {\n+                return null;\n+            }\n+        };\n+\n         assertDefaultValues(config, true);\n \n         config.setServerURL(s[0]);\n@@ -142,6 +149,7 @@ public boolean filterCrash(String crash) {\n         config.setDisableLocation();\n         config.setLocation(\"CC\", \"city\", \"loc\", \"ip\");\n         config.setMetricOverride(metricOverride);\n+        config.setConnectionInterceptor(interceptor);\n \n         Assert.assertEquals(s[0], config.serverURL);\n         Assert.assertEquals(c, config.context);\n@@ -194,6 +202,7 @@ public boolean filterCrash(String crash) {\n         Assert.assertEquals(\"loc\", config.locationLocation);\n         Assert.assertEquals(\"ip\", config.locationIpAddress);\n         Assert.assertEquals(metricOverride, config.metricOverride);\n+        Assert.assertEquals(interceptor, config.interceptor);\n \n         config.setLocation(\"CC\", \"city\", \"loc\", \"ip\");\n     }\n@@ -265,5 +274,6 @@ void assertDefaultValues(CountlyConfig config, boolean includeConstructorValues)\n         Assert.assertNull(config.locationLocation);\n         Assert.assertNull(config.locationIpAddress);\n         Assert.assertNull(config.metricOverride);\n+        Assert.assertNull(config.interceptor);\n     }\n }"
  },
  {
    "sha": "f20a23e23ab67a2083e64feefe2172959ca25ed7",
    "filename": "sdk/src/main/java/ly/count/android/sdk/ConnectionInterceptor.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/ConnectionInterceptor.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/ConnectionInterceptor.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/main/java/ly/count/android/sdk/ConnectionInterceptor.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -0,0 +1,18 @@\n+package ly.count.android.sdk;\n+\n+import java.net.HttpURLConnection;\n+\n+/**\n+ * Interface to intercept Countly requests\n+ */\n+public interface ConnectionInterceptor {\n+\n+    /**\n+     * This is called for each request which is send by Countly\n+     *\n+     * @param connection The connection which is about to be send\n+     * @param body Body of the connection, null for GET requests\n+     * @return HttpURLConnection which is used for connection\n+     */\n+    HttpURLConnection intercept(HttpURLConnection connection, byte[] body);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2ec99983ebe83fe05417613443ba3d5ad2922a00",
    "filename": "sdk/src/main/java/ly/count/android/sdk/ConnectionProcessor.java",
    "status": "modified",
    "additions": 55,
    "deletions": 28,
    "changes": 83,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/ConnectionProcessor.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/ConnectionProcessor.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/main/java/ly/count/android/sdk/ConnectionProcessor.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -21,8 +21,8 @@ of this software and associated documentation files (the \"Software\"), to deal\n */\n package ly.count.android.sdk;\n \n-import android.util.Log;\n import java.io.BufferedWriter;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n@@ -67,6 +67,8 @@ of this software and associated documentation files (the \"Software\"), to deal\n         REMOVE      // bad request, remove\n     }\n \n+    private ConnectionInterceptor connectionInterceptor;\n+\n     ConnectionProcessor(final String serverURL, final CountlyStore store, final DeviceId deviceId, final SSLContext sslContext, final Map<String, String> requestHeaderCustomValues, ModuleLog logModule) {\n         serverURL_ = serverURL;\n         store_ = store;\n@@ -76,6 +78,38 @@ of this software and associated documentation files (the \"Software\"), to deal\n         L = logModule;\n     }\n \n+    private void writeMultipartDataToOutput(File binaryFile, String boundary, OutputStream output) throws IOException {\n+        // Line separator required by multipart/form-data.\n+        String CRLF = \"\\r\\n\";\n+        String charset = \"UTF-8\";\n+        PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);\n+        // Send binary file.\n+        writer.append(\"--\").append(boundary).append(CRLF);\n+        writer.append(\"Content-Disposition: form-data; name=\\\"binaryFile\\\"; filename=\\\"\").append(binaryFile.getName()).append(\"\\\"\").append(CRLF);\n+        writer.append(\"Content-Type: \").append(URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);\n+        writer.append(\"Content-Transfer-Encoding: binary\").append(CRLF);\n+        writer.append(CRLF).flush();\n+        FileInputStream fileInputStream = new FileInputStream(binaryFile);\n+        byte[] buffer = new byte[1024];\n+        int len;\n+        try {\n+            while ((len = fileInputStream.read(buffer)) != -1) {\n+                output.write(buffer, 0, len);\n+            }\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        }\n+        output.flush(); // Important before continuing with writer!\n+        writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n+        fileInputStream.close();\n+\n+        // End of multipart/form-data.\n+        writer.append(\"--\").append(boundary).append(\"--\").append(CRLF).flush();\n+        writer.close();\n+        output.flush();\n+        output.close();\n+    }\n+\n     synchronized public URLConnection urlConnectionForServerRequest(String requestData, final String customEndpoint) throws IOException {\n         String urlEndpoint = \"/i\";\n         if (customEndpoint != null) {\n@@ -92,7 +126,7 @@ synchronized public URLConnection urlConnectionForServerRequest(String requestDa\n             urlStr += \"&checksum256=\" + UtilsNetworking.sha256Hash(requestData + salt);\n         }\n         final URL url = new URL(urlStr);\n-        final HttpURLConnection conn;\n+        HttpURLConnection conn;\n         if (Countly.publicKeyPinCertificates == null && Countly.certificatePinCertificates == null) {\n             conn = (HttpURLConnection) url.openConnection();\n         } else {\n@@ -130,45 +164,30 @@ synchronized public URLConnection urlConnectionForServerRequest(String requestDa\n             conn.setDoOutput(true);\n             // Just generate some unique random value.\n             String boundary = Long.toHexString(System.currentTimeMillis());\n-            // Line separator required by multipart/form-data.\n-            String CRLF = \"\\r\\n\";\n-            String charset = \"UTF-8\";\n             conn.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n-            OutputStream output = conn.getOutputStream();\n-            PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);\n-            // Send binary file.\n-            writer.append(\"--\").append(boundary).append(CRLF);\n-            writer.append(\"Content-Disposition: form-data; name=\\\"binaryFile\\\"; filename=\\\"\").append(binaryFile.getName()).append(\"\\\"\").append(CRLF);\n-            writer.append(\"Content-Type: \").append(URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);\n-            writer.append(\"Content-Transfer-Encoding: binary\").append(CRLF);\n-            writer.append(CRLF).flush();\n-            FileInputStream fileInputStream = new FileInputStream(binaryFile);\n-            byte[] buffer = new byte[1024];\n-            int len;\n-            try {\n-                while ((len = fileInputStream.read(buffer)) != -1) {\n-                    output.write(buffer, 0, len);\n-                }\n-            } catch (IOException ex) {\n-                ex.printStackTrace();\n+            if (connectionInterceptor != null) {\n+                ByteArrayOutputStream output = new ByteArrayOutputStream();\n+                writeMultipartDataToOutput(binaryFile, boundary, output);\n+                conn = connectionInterceptor.intercept(conn, output.toByteArray());\n             }\n-            output.flush(); // Important before continuing with writer!\n-            writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n-            fileInputStream.close();\n-\n-            // End of multipart/form-data.\n-            writer.append(\"--\").append(boundary).append(\"--\").append(CRLF).flush();\n+            writeMultipartDataToOutput(binaryFile, boundary, conn.getOutputStream());\n         } else {\n             if (usingHttpPost) {\n                 conn.setDoOutput(true);\n                 conn.setRequestMethod(\"POST\");\n+                if (connectionInterceptor != null) {\n+                    conn = connectionInterceptor.intercept(conn, requestData.getBytes());\n+                }\n                 OutputStream os = conn.getOutputStream();\n                 BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, \"UTF-8\"));\n                 writer.write(requestData);\n                 writer.flush();\n                 writer.close();\n                 os.close();\n             } else {\n+                if (connectionInterceptor != null) {\n+                    conn = connectionInterceptor.intercept(conn, null);\n+                }\n                 L.v(\"[Connection Processor] Using HTTP GET\");\n                 conn.setDoOutput(false);\n             }\n@@ -394,4 +413,12 @@ CountlyStore getCountlyStore() {\n     DeviceId getDeviceId() {\n         return deviceId_;\n     }\n+\n+    public ConnectionInterceptor getConnectionInterceptor() {\n+        return connectionInterceptor;\n+    }\n+\n+    public void setConnectionInterceptor(ConnectionInterceptor connectionInterceptor) {\n+        this.connectionInterceptor = connectionInterceptor;\n+    }\n }"
  },
  {
    "sha": "ae5831e92f72bc707b2511cab71d2a718c2fcb4a",
    "filename": "sdk/src/main/java/ly/count/android/sdk/ConnectionQueue.java",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/ConnectionQueue.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/ConnectionQueue.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/main/java/ly/count/android/sdk/ConnectionQueue.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -51,6 +51,7 @@ of this software and associated documentation files (the \"Software\"), to deal\n     private Future<?> connectionProcessorFuture_;\n     private DeviceId deviceId_;\n     private SSLContext sslContext_;\n+    private ConnectionInterceptor connectionInterceptor_;\n \n     private Map<String, String> requestHeaderCustomValues;\n     Map<String, String> metricOverride = null;\n@@ -110,6 +111,14 @@ public void setDeviceId(DeviceId deviceId) {\n         this.deviceId_ = deviceId;\n     }\n \n+    public ConnectionInterceptor getConnectionInterceptor() {\n+        return connectionInterceptor_;\n+    }\n+\n+    public void setConnectionInterceptor(ConnectionInterceptor connectionInterceptor_) {\n+        this.connectionInterceptor_ = connectionInterceptor_;\n+    }\n+\n     protected void setRequestHeaderCustomValues(Map<String, String> headerCustomValues) {\n         requestHeaderCustomValues = headerCustomValues;\n     }\n@@ -653,7 +662,9 @@ void tick() {\n     }\n \n     public ConnectionProcessor createConnectionProcessor() {\n-        return new ConnectionProcessor(getServerURL(), store_, deviceId_, sslContext_, requestHeaderCustomValues, L);\n+        ConnectionProcessor processor = new ConnectionProcessor(getServerURL(), store_, deviceId_, sslContext_, requestHeaderCustomValues, L);\n+        processor.setConnectionInterceptor(connectionInterceptor_);\n+        return processor;\n     }\n \n     public boolean queueContainsTemporaryIdItems() {"
  },
  {
    "sha": "2ea379e01d39df5802e82c39045893c0c485c944",
    "filename": "sdk/src/main/java/ly/count/android/sdk/Countly.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/Countly.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/Countly.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/main/java/ly/count/android/sdk/Countly.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -599,6 +599,7 @@ public synchronized Countly init(CountlyConfig config) {\n             connectionQueue_.setDeviceId(config.deviceIdInstance);\n             connectionQueue_.setRequestHeaderCustomValues(requestHeaderCustomValues);\n             connectionQueue_.setMetricOverride(config.metricOverride);\n+            connectionQueue_.setConnectionInterceptor(config.interceptor);\n             connectionQueue_.setContext(context_);\n \n             eventQueue_ = new EventQueue(countlyStore);"
  },
  {
    "sha": "39a85e113a77ac818766e3d8610f91da79501a9e",
    "filename": "sdk/src/main/java/ly/count/android/sdk/CountlyConfig.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Countly/countly-sdk-android/blob/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/CountlyConfig.java",
    "raw_url": "https://github.com/Countly/countly-sdk-android/raw/98c6b6c5ac756893867294fce2801835791b822e/sdk/src/main/java/ly/count/android/sdk/CountlyConfig.java",
    "contents_url": "https://api.github.com/repos/Countly/countly-sdk-android/contents/sdk/src/main/java/ly/count/android/sdk/CountlyConfig.java?ref=98c6b6c5ac756893867294fce2801835791b822e",
    "patch": "@@ -134,6 +134,8 @@\n \n     protected boolean recordAppStartTime = false;\n \n+    protected ConnectionInterceptor interceptor = null;\n+\n     boolean disableLocation = false;\n \n     String locationCountyCode = null;\n@@ -583,4 +585,15 @@ public synchronized CountlyConfig setLogListener(ModuleLog.LogCallback logCallba\n         providedLogCallback = logCallback;\n         return this;\n     }\n+\n+    /**\n+     * Sets an interceptor which can be used to run custom connection processing for each network requests.\n+     * This is useful to add dynamic headers for each request.\n+     *\n+     * @param interceptor Gets an HttpURLConnection and returns a new HttpURLConnection\n+     */\n+    public synchronized CountlyConfig setConnectionInterceptor(ConnectionInterceptor interceptor) {\n+        this.interceptor = interceptor;\n+        return this;\n+    }\n }"
  }
]
