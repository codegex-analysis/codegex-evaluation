[
  {
    "sha": "91004e04b53eee21e0b0727470fdf1715436effe",
    "filename": "naming/src/main/java/com/alibaba/nacos/naming/controllers/ServiceController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/alibaba/nacos/blob/57fc64e27cee9d3336823121d37b57610455f598/naming/src/main/java/com/alibaba/nacos/naming/controllers/ServiceController.java",
    "raw_url": "https://github.com/alibaba/nacos/raw/57fc64e27cee9d3336823121d37b57610455f598/naming/src/main/java/com/alibaba/nacos/naming/controllers/ServiceController.java",
    "contents_url": "https://api.github.com/repos/alibaba/nacos/contents/naming/src/main/java/com/alibaba/nacos/naming/controllers/ServiceController.java?ref=57fc64e27cee9d3336823121d37b57610455f598",
    "patch": "@@ -460,7 +460,8 @@ public ObjectNode subscribers(HttpServletRequest request) {\n         ObjectNode result = JacksonUtils.createEmptyJsonNode();\n         \n         try {\n-            List<Subscriber> subscribers = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation);\n+            List<Subscriber> subscribers = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation, pageNo,\n+                    pageSize);\n             \n             int start = (pageNo - 1) * pageSize;\n             if (start < 0) {"
  },
  {
    "sha": "a572630e04add53c4e7e4b00a615f93ec3868fe4",
    "filename": "naming/src/main/java/com/alibaba/nacos/naming/core/SubscribeManager.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/alibaba/nacos/blob/57fc64e27cee9d3336823121d37b57610455f598/naming/src/main/java/com/alibaba/nacos/naming/core/SubscribeManager.java",
    "raw_url": "https://github.com/alibaba/nacos/raw/57fc64e27cee9d3336823121d37b57610455f598/naming/src/main/java/com/alibaba/nacos/naming/core/SubscribeManager.java",
    "contents_url": "https://api.github.com/repos/alibaba/nacos/contents/naming/src/main/java/com/alibaba/nacos/naming/core/SubscribeManager.java?ref=57fc64e27cee9d3336823121d37b57610455f598",
    "patch": "@@ -21,6 +21,7 @@\n import com.alibaba.nacos.common.utils.JacksonUtils;\n import com.alibaba.nacos.core.cluster.Member;\n import com.alibaba.nacos.core.cluster.ServerMemberManager;\n+import com.alibaba.nacos.naming.misc.Loggers;\n import com.alibaba.nacos.sys.env.EnvUtil;\n import com.alibaba.nacos.naming.misc.HttpClient;\n import com.alibaba.nacos.naming.misc.NetUtils;\n@@ -73,10 +74,12 @@\n      * @param serviceName service name\n      * @param namespaceId namespace id\n      * @param aggregation aggregation\n+     * @param pageNo page no\n+     * @param pageSize page size\n      * @return list of subscriber\n      * @throws InterruptedException interrupted exception\n      */\n-    public List<Subscriber> getSubscribers(String serviceName, String namespaceId, boolean aggregation)\n+    public List<Subscriber> getSubscribers(String serviceName, String namespaceId, boolean aggregation, int pageNo, int pageSize)\n             throws InterruptedException {\n         if (aggregation) {\n             // size = 1 means only myself in the list, we need at least one another server alive:\n@@ -91,6 +94,8 @@\n                 Map<String, String> paramValues = new HashMap<>(128);\n                 paramValues.put(CommonParams.SERVICE_NAME, serviceName);\n                 paramValues.put(CommonParams.NAMESPACE_ID, namespaceId);\n+                paramValues.put(\"pageNo\", String.valueOf(pageNo));\n+                paramValues.put(\"pageSize\", String.valueOf(pageSize));\n                 paramValues.put(\"aggregation\", String.valueOf(Boolean.FALSE));\n                 if (NetUtils.localServer().equals(server.getAddress())) {\n                     subscriberList.addAll(getSubscribersFuzzy(serviceName, namespaceId));\n@@ -105,6 +110,9 @@\n                 if (result.ok()) {\n                     Subscribers subscribers = JacksonUtils.toObj(result.getData(), Subscribers.class);\n                     subscriberList.addAll(subscribers.getSubscribers());\n+                } else {\n+                    Loggers.SRV_LOG.warn(\"get subscriber from other member error, server:{}, resultCode:{}, resultMsg:{}\",\n+                            server.getAddress(), result.getCode(), result.getMessage());\n                 }\n             }\n             return CollectionUtils.isNotEmpty(subscriberList) ? subscriberList.stream()"
  },
  {
    "sha": "1c212e3a79023de3a8af4b81ad7303399f0feca7",
    "filename": "naming/src/test/java/com/alibaba/nacos/naming/core/SubscribeManagerTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/alibaba/nacos/blob/57fc64e27cee9d3336823121d37b57610455f598/naming/src/test/java/com/alibaba/nacos/naming/core/SubscribeManagerTest.java",
    "raw_url": "https://github.com/alibaba/nacos/raw/57fc64e27cee9d3336823121d37b57610455f598/naming/src/test/java/com/alibaba/nacos/naming/core/SubscribeManagerTest.java",
    "contents_url": "https://api.github.com/repos/alibaba/nacos/contents/naming/src/test/java/com/alibaba/nacos/naming/core/SubscribeManagerTest.java?ref=57fc64e27cee9d3336823121d37b57610455f598",
    "patch": "@@ -61,14 +61,16 @@ public void before() {\n     public void getSubscribersWithFalse() {\n         String serviceName = \"test\";\n         String namespaceId = \"public\";\n+        int pageNo = 1;\n+        int pageSize = 10;\n         boolean aggregation = Boolean.FALSE;\n         try {\n             List<Subscriber> clients = new ArrayList<Subscriber>();\n             Subscriber subscriber = new Subscriber(\"127.0.0.1:8080\", \"test\", \"app\", \"127.0.0.1\", namespaceId,\n                     serviceName);\n             clients.add(subscriber);\n             Mockito.when(pushService.getClients(Mockito.anyString(), Mockito.anyString())).thenReturn(clients);\n-            List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation);\n+            List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation, pageNo, pageSize);\n             Assert.assertNotNull(list);\n             Assert.assertEquals(1, list.size());\n             Assert.assertEquals(\"public\", list.get(0).getNamespaceId());\n@@ -81,14 +83,16 @@ public void getSubscribersWithFalse() {\n     public void testGetSubscribersFuzzy() {\n         String serviceName = \"test\";\n         String namespaceId = \"public\";\n+        int pageNo = 1;\n+        int pageSize = 10;\n         boolean aggregation = Boolean.TRUE;\n         try {\n             List<Subscriber> clients = new ArrayList<Subscriber>();\n             Subscriber subscriber = new Subscriber(\"127.0.0.1:8080\", \"test\", \"app\", \"127.0.0.1\", namespaceId,\n                     \"testGroupName@@test_subscriber\");\n             clients.add(subscriber);\n             Mockito.when(pushService.getClientsFuzzy(Mockito.anyString(), Mockito.anyString())).thenReturn(clients);\n-            List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation);\n+            List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation, pageNo, pageSize);\n             Assert.assertNotNull(list);\n             Assert.assertEquals(1, list.size());\n             Assert.assertEquals(\"testGroupName@@test_subscriber\", list.get(0).getServiceName());\n@@ -101,6 +105,8 @@ public void testGetSubscribersFuzzy() {\n     public void getSubscribersWithTrue() {\n         String serviceName = \"test\";\n         String namespaceId = \"public\";\n+        int pageNo = 1;\n+        int pageSize = 10;\n         boolean aggregation = Boolean.TRUE;\n         try {\n             List<Subscriber> clients = new ArrayList<Subscriber>();\n@@ -124,7 +130,7 @@ public void getSubscribersWithTrue() {\n             \n             Mockito.when(memberManager.allMembers()).thenReturn(healthyServers);\n             //Mockito.doReturn(3).when(serverListManager.getHealthyServers().size());\n-            List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation);\n+            List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation, pageNo, pageSize);\n             Assert.assertNotNull(list);\n             Assert.assertEquals(2, list.size());\n             Assert.assertEquals(\"public\", list.get(0).getNamespaceId());"
  }
]
