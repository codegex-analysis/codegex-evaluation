[
  {
    "sha": "2ad55197aec79c03d90f343bf9e1dde300c4a56e",
    "filename": ".gitignore",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/.gitignore",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/.gitignore",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.gitignore?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -0,0 +1,107 @@\n+\n+# Created by https://www.toptal.com/developers/gitignore/api/intellij+all,maven\n+# Edit at https://www.toptal.com/developers/gitignore?templates=intellij+all,maven\n+\n+### Intellij+all ###\n+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n+\n+# User-specific stuff\n+.idea/**/workspace.xml\n+.idea/**/tasks.xml\n+.idea/**/usage.statistics.xml\n+.idea/**/dictionaries\n+.idea/**/shelf\n+\n+# Generated files\n+.idea/**/contentModel.xml\n+\n+# Sensitive or high-churn files\n+.idea/**/dataSources/\n+.idea/**/dataSources.ids\n+.idea/**/dataSources.local.xml\n+.idea/**/sqlDataSources.xml\n+.idea/**/dynamic.xml\n+.idea/**/uiDesigner.xml\n+.idea/**/dbnavigator.xml\n+\n+# Gradle\n+.idea/**/gradle.xml\n+.idea/**/libraries\n+\n+# Gradle and Maven with auto-import\n+# When using Gradle or Maven with auto-import, you should exclude module files,\n+# since they will be recreated, and may cause churn.  Uncomment if using\n+# auto-import.\n+# .idea/artifacts\n+# .idea/compiler.xml\n+# .idea/jarRepositories.xml\n+# .idea/modules.xml\n+# .idea/*.iml\n+# .idea/modules\n+# *.iml\n+# *.ipr\n+\n+# CMake\n+cmake-build-*/\n+\n+# Mongo Explorer plugin\n+.idea/**/mongoSettings.xml\n+\n+# File-based project format\n+*.iws\n+\n+# IntelliJ\n+out/\n+\n+# mpeltonen/sbt-idea plugin\n+.idea_modules/\n+\n+# JIRA plugin\n+atlassian-ide-plugin.xml\n+\n+# Cursive Clojure plugin\n+.idea/replstate.xml\n+\n+# Crashlytics plugin (for Android Studio and IntelliJ)\n+com_crashlytics_export_strings.xml\n+crashlytics.properties\n+crashlytics-build.properties\n+fabric.properties\n+\n+# Editor-based Rest Client\n+.idea/httpRequests\n+\n+# Android studio 3.1+ serialized cache file\n+.idea/caches/build_file_checksums.ser\n+\n+### Intellij+all Patch ###\n+# Ignores the whole .idea folder and all .iml files\n+# See https://github.com/joeblau/gitignore.io/issues/186 and https://github.com/joeblau/gitignore.io/issues/360\n+\n+.idea/\n+\n+# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023\n+\n+*.iml\n+modules.xml\n+.idea/misc.xml\n+*.ipr\n+\n+# Sonarlint plugin\n+.idea/sonarlint\n+\n+### Maven ###\n+target/\n+pom.xml.tag\n+pom.xml.releaseBackup\n+pom.xml.versionsBackup\n+pom.xml.next\n+release.properties\n+dependency-reduced-pom.xml\n+buildNumber.properties\n+.mvn/timing.properties\n+# https://github.com/takari/maven-wrapper#usage-without-binary-jar\n+.mvn/wrapper/maven-wrapper.jar\n+\n+# End of https://www.toptal.com/developers/gitignore/api/intellij+all,maven"
  },
  {
    "sha": "26d33521af10bcc7fd8cea344038eaaeb78d0ef5",
    "filename": ".idea/.gitignore",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/.gitignore",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/.gitignore",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/.gitignore?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,3 +0,0 @@\n-# Default ignored files\n-/shelf/\n-/workspace.xml"
  },
  {
    "sha": "ccfa506a376c246af192ac06da41d56f8a895465",
    "filename": ".idea/artifacts/RealTimePlugin_3_0_jar.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/artifacts/RealTimePlugin_3_0_jar.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/artifacts/RealTimePlugin_3_0_jar.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/artifacts/RealTimePlugin_3_0_jar.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,8 +0,0 @@\n-<component name=\"ArtifactManager\">\n-  <artifact type=\"jar\" name=\"RealTimePlugin 3.0:jar\">\n-    <output-path>$PROJECT_DIR$/../../../McServerProgramm/servers/1.16.4/plugins</output-path>\n-    <root id=\"archive\" name=\"RealTimePlugin 3.0.jar\">\n-      <element id=\"module-output\" name=\"RealTimePlugin 3.0\" />\n-    </root>\n-  </artifact>\n-</component>\n\\ No newline at end of file"
  },
  {
    "sha": "608497e2d64a7bdd84d917fc24afb81fcee74e81",
    "filename": ".idea/compiler.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/compiler.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/compiler.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/compiler.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,16 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"CompilerConfiguration\">\n-    <annotationProcessing>\n-      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\n-        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n-        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n-        <outputRelativeToContentRoot value=\"true\" />\n-        <module name=\"RealTimePlugin 3.0\" />\n-      </profile>\n-    </annotationProcessing>\n-    <bytecodeTargetLevel>\n-      <module name=\"RealTimePlugin 3.0\" target=\"8\" />\n-    </bytecodeTargetLevel>\n-  </component>\n-</project>\n\\ No newline at end of file"
  },
  {
    "sha": "712ab9d985c20018a0c97b93d2148ac1ffe588a5",
    "filename": ".idea/jarRepositories.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/jarRepositories.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/jarRepositories.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/jarRepositories.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,20 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"RemoteRepositoriesConfiguration\">\n-    <remote-repository>\n-      <option name=\"id\" value=\"central\" />\n-      <option name=\"name\" value=\"Central Repository\" />\n-      <option name=\"url\" value=\"https://repo.maven.apache.org/maven2\" />\n-    </remote-repository>\n-    <remote-repository>\n-      <option name=\"id\" value=\"central\" />\n-      <option name=\"name\" value=\"Maven Central repository\" />\n-      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\n-    </remote-repository>\n-    <remote-repository>\n-      <option name=\"id\" value=\"jboss.community\" />\n-      <option name=\"name\" value=\"JBoss Community repository\" />\n-      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\n-    </remote-repository>\n-  </component>\n-</project>\n\\ No newline at end of file"
  },
  {
    "sha": "01c0a2ee59fd6432be5558571393be332e48420f",
    "filename": ".idea/libraries/Maven__org_json_json_20180813.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/libraries/Maven__org_json_json_20180813.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/libraries/Maven__org_json_json_20180813.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/libraries/Maven__org_json_json_20180813.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,13 +0,0 @@\n-<component name=\"libraryTable\">\n-  <library name=\"Maven: org.json:json:20180813\">\n-    <CLASSES>\n-      <root url=\"jar://$MAVEN_REPOSITORY$/org/json/json/20180813/json-20180813.jar!/\" />\n-    </CLASSES>\n-    <JAVADOC>\n-      <root url=\"jar://$MAVEN_REPOSITORY$/org/json/json/20180813/json-20180813-javadoc.jar!/\" />\n-    </JAVADOC>\n-    <SOURCES>\n-      <root url=\"jar://$MAVEN_REPOSITORY$/org/json/json/20180813/json-20180813-sources.jar!/\" />\n-    </SOURCES>\n-  </library>\n-</component>\n\\ No newline at end of file"
  },
  {
    "sha": "0e5630c9792dadbc37d1a0513b75f6467aa04f28",
    "filename": ".idea/libraries/spigot_1_8_9.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 11,
    "changes": 11,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/libraries/spigot_1_8_9.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/libraries/spigot_1_8_9.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/libraries/spigot_1_8_9.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,11 +0,0 @@\n-<component name=\"libraryTable\">\n-  <library name=\"spigot-1.8.9\">\n-    <CLASSES>\n-      <root url=\"jar://$PROJECT_DIR$/../../../spigot-1.8.9.jar!/\" />\n-    </CLASSES>\n-    <JAVADOC />\n-    <SOURCES>\n-      <root url=\"jar://$PROJECT_DIR$/../../../spigot-1.8.9.jar!/\" />\n-    </SOURCES>\n-  </library>\n-</component>\n\\ No newline at end of file"
  },
  {
    "sha": "2ca0d1f588eb9314198e154583fea38fa9b1779b",
    "filename": ".idea/misc.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/misc.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/misc.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,18 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"EntryPointsManager\">\n-    <list size=\"1\">\n-      <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.bukkit.event.EventHandler\" />\n-    </list>\n-  </component>\n-  <component name=\"MavenProjectsManager\">\n-    <option name=\"originalFiles\">\n-      <list>\n-        <option value=\"$PROJECT_DIR$/pom.xml\" />\n-      </list>\n-    </option>\n-  </component>\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n-    <output url=\"file://$PROJECT_DIR$/out\" />\n-  </component>\n-</project>\n\\ No newline at end of file"
  },
  {
    "sha": "dfbd78859262f707330d56f8f514c8163110f447",
    "filename": ".idea/modules.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/modules.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/modules.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/modules.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,8 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"ProjectModuleManager\">\n-    <modules>\n-      <module fileurl=\"file://$PROJECT_DIR$/RealTimePlugin 3.0.iml\" filepath=\"$PROJECT_DIR$/RealTimePlugin 3.0.iml\" />\n-    </modules>\n-  </component>\n-</project>\n\\ No newline at end of file"
  },
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 124,
    "changes": 124,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/uiDesigner.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,124 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"Palette2\">\n-    <group name=\"Swing\">\n-      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n-      </item>\n-      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n-      </item>\n-      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n-      </item>\n-      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n-      </item>\n-      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n-        <initial-values>\n-          <property name=\"text\" value=\"Button\" />\n-        </initial-values>\n-      </item>\n-      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n-        <initial-values>\n-          <property name=\"text\" value=\"RadioButton\" />\n-        </initial-values>\n-      </item>\n-      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n-        <initial-values>\n-          <property name=\"text\" value=\"CheckBox\" />\n-        </initial-values>\n-      </item>\n-      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n-        <initial-values>\n-          <property name=\"text\" value=\"Label\" />\n-        </initial-values>\n-      </item>\n-      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n-          <preferred-size width=\"150\" height=\"-1\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n-          <preferred-size width=\"150\" height=\"-1\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n-          <preferred-size width=\"150\" height=\"-1\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"150\" height=\"50\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"150\" height=\"50\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"150\" height=\"50\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n-      </item>\n-      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"150\" height=\"50\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"150\" height=\"50\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"150\" height=\"50\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"200\" height=\"200\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n-          <preferred-size width=\"200\" height=\"200\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n-      </item>\n-      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n-      </item>\n-      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n-      </item>\n-      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n-      </item>\n-      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n-          <preferred-size width=\"-1\" height=\"20\" />\n-        </default-constraints>\n-      </item>\n-      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n-      </item>\n-      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n-        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n-      </item>\n-    </group>\n-  </component>\n-</project>\n\\ No newline at end of file"
  },
  {
    "sha": "94a25f7f4cb416c083d265558da75d457237d671",
    "filename": ".idea/vcs.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/.idea/vcs.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/.idea/vcs.xml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,6 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"VcsDirectoryMappings\">\n-    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n-  </component>\n-</project>\n\\ No newline at end of file"
  },
  {
    "sha": "d1035d5a76d169299b040e14bbc0297d432b28cc",
    "filename": "RealTimePlugin 3.0.iml",
    "status": "removed",
    "additions": 0,
    "deletions": 26,
    "changes": 26,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/RealTimePlugin%203.0.iml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/RealTimePlugin%203.0.iml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/RealTimePlugin%203.0.iml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,26 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n-  <component name=\"FacetManager\">\n-    <facet type=\"minecraft\" name=\"Minecraft\">\n-      <configuration>\n-        <autoDetectTypes>\n-          <platformType>SPIGOT</platformType>\n-        </autoDetectTypes>\n-      </configuration>\n-    </facet>\n-  </component>\n-  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_8\">\n-    <output url=\"file://$MODULE_DIR$/target/classes\" />\n-    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\n-    <content url=\"file://$MODULE_DIR$\">\n-      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\n-      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\n-      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\n-      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n-    </content>\n-    <orderEntry type=\"inheritedJdk\" />\n-    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n-    <orderEntry type=\"library\" name=\"spigot-1.8.9\" level=\"project\" />\n-    <orderEntry type=\"library\" scope=\"PROVIDED\" name=\"Maven: org.json:json:20180813\" level=\"project\" />\n-  </component>\n-</module>\n\\ No newline at end of file"
  },
  {
    "sha": "2a9382448eafc76d3277584f8f65b52c2ff627c9",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 20,
    "deletions": 5,
    "changes": 25,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/pom.xml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/pom.xml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/pom.xml?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -6,7 +6,15 @@\n \n     <groupId>RealTimePlugin</groupId>\n     <artifactId>RealTimePlugin</artifactId>\n-    <version>1.0-SNAPSHOT</version>\n+    <version>3.0</version>\n+\n+    <repositories>\n+        <repository>\n+            <id>spigot-repo</id>\n+            <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>\n+        </repository>\n+    </repositories>\n+\n \n     <build>\n         <plugins>\n@@ -23,12 +31,19 @@\n \n     <dependencies>\n         <dependency>\n-            <groupId>org.json</groupId>\n-            <artifactId>json</artifactId>\n-            <version>20180813</version>\n+            <groupId>com.googlecode.json-simple</groupId>\n+            <artifactId>json-simple</artifactId>\n+            <version>1.1.1</version>\n+        </dependency>\n+\n+\n+        <dependency>\n+            <groupId>org.spigotmc</groupId>\n+            <artifactId>spigot-api</artifactId>\n+            <version>1.8.8-R0.1-SNAPSHOT</version>\n             <scope>provided</scope>\n         </dependency>\n     </dependencies>\n \n-    \n+\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "fb412d589cb5099a368377936c055dab68696fb3",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/commands/Commands.java",
    "status": "modified",
    "additions": 28,
    "deletions": 27,
    "changes": 55,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/commands/Commands.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/commands/Commands.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/commands/Commands.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -2,55 +2,56 @@\n \n import de.rexlnico.realtimeplugin.main.Main;\n import de.rexlnico.realtimeplugin.methodes.Messages;\n-import de.rexlnico.realtimeplugin.methodes.WeatherWorld;\n-import org.bukkit.Bukkit;\n+import de.rexlnico.realtimeplugin.methodes.WorldContainer;\n import org.bukkit.command.Command;\n import org.bukkit.command.CommandExecutor;\n import org.bukkit.command.CommandSender;\n import org.bukkit.command.TabCompleter;\n-import org.bukkit.entity.Player;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n public class Commands implements CommandExecutor, TabCompleter {\n     @Override\n     public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {\n-        if(sender instanceof Player){\n-            Player player = (Player) sender;\n-            if(player.hasPermission(\"realtime.reload\")){\n-                if(args.length == 1){\n-                    if(args[0].equalsIgnoreCase(\"reload\")){\n-                        Main.getWorldManager().loadNew();\n-                        Main.getWorldManager().updateAll();\n-                        player.sendMessage(Messages.prefix + Messages.reloadAllMSG);\n-                    }\n-                }else if(args.length == 2){\n-                    if(args[0].equalsIgnoreCase(\"reload\")){\n-                        WeatherWorld weatherWorld = Main.getWorldManager().getWeatherWorld(args[1]);\n-                        if(weatherWorld == null){\n-                            player.sendMessage(Messages.prefix + Messages.noFile.replace(\"%file%\", args[1]));\n-                            return false;\n-                        }\n-                        weatherWorld.update();\n-                        player.sendMessage(Messages.prefix + Messages.reloadFileMSG.replace(\"%file%\", args[1]));\n+        if (!sender.hasPermission(\"realtime.reload\")) {\n+            sender.sendMessage(Messages.prefix + Messages.noPermissions);\n+            return true;\n+        }\n+        if (args.length > 0) {\n+            // TODO: replace with switch-case if more sub-commands get added\n+            if (args[0].equalsIgnoreCase(\"reload\")) {\n+                if (args.length > 1) {\n+                    String file = args[1];\n+                    WorldContainer world = Main.getWorldManager().getWeatherWorld(file);\n+                    if (world == null) {\n+                        sender.sendMessage(Messages.prefix + Messages.noFile.replace(\"%file%\", file));\n+                        return false;\n                     }\n+                    world.update();\n+                    sender.sendMessage(Messages.prefix + Messages.reloadFileMSG.replace(\"%file%\", file));\n+                } else {\n+                    Main.getWorldManager().loadNew();\n+                    Main.getWorldManager().updateAll();\n+                    sender.sendMessage(Messages.prefix + Messages.reloadAllMSG);\n                 }\n+                return true;\n             }\n         }\n+\n+        sender.sendMessage(Messages.prefix + Messages.reloadHelp);\n         return false;\n     }\n \n     @Override\n     public List<String> onTabComplete(CommandSender commandSender, Command command, String s, String[] args) {\n-        if(args.length == 2){\n-            if(args[0].equalsIgnoreCase(\"reload\")){\n+        if (args.length == 2) {\n+            if (args[0].equalsIgnoreCase(\"reload\")) {\n                 return Main.getWorldManager().getTabComplete();\n             }\n-        }else if(args.length == 1){\n-            ArrayList<String> list = new ArrayList<>();\n-            list.add(\"reload\");\n-            return list;\n+        } else if (args.length == 1) {\n+            return Collections.singletonList(\"reload\");\n         }\n \n         return new ArrayList<>();"
  },
  {
    "sha": "68309435f9400e0e8b91892d376993fbadd04fc8",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/main/Main.java",
    "status": "modified",
    "additions": 8,
    "deletions": 13,
    "changes": 21,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/main/Main.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/main/Main.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/main/Main.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -3,23 +3,26 @@\n import de.rexlnico.realtimeplugin.commands.Commands;\n import de.rexlnico.realtimeplugin.methodes.Messages;\n import de.rexlnico.realtimeplugin.methodes.WorldManager;\n-import org.bukkit.Bukkit;\n-import org.bukkit.plugin.PluginManager;\n import org.bukkit.plugin.java.JavaPlugin;\n \n import java.io.IOException;\n \n public class Main extends JavaPlugin {\n \n     private static Main plugin;\n-    private PluginManager pm;\n-\n     private static WorldManager worldManager;\n \n+    public static WorldManager getWorldManager() {\n+        return worldManager;\n+    }\n+\n+    public static Main getPlugin() {\n+        return plugin;\n+    }\n+\n     @Override\n     public void onEnable() {\n         plugin = this;\n-        pm = Bukkit.getPluginManager();\n         Messages.load();\n         getCommand(\"realtime\").setTabCompleter(new Commands());\n         getCommand(\"realtime\").setExecutor(new Commands());\n@@ -34,12 +37,4 @@ public void onEnable() {\n     public void onDisable() {\n         worldManager.disable();\n     }\n-\n-    public static WorldManager getWorldManager() {\n-        return worldManager;\n-    }\n-\n-    public static Main getPlugin() {\n-        return plugin;\n-    }\n }"
  },
  {
    "sha": "812200d96df42cafaf21d78793d5877f93656bb7",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/methodes/Messages.java",
    "status": "modified",
    "additions": 18,
    "deletions": 5,
    "changes": 23,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/methodes/Messages.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/methodes/Messages.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/methodes/Messages.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -1,13 +1,16 @@\n package de.rexlnico.realtimeplugin.methodes;\n \n+import de.rexlnico.realtimeplugin.main.Main;\n+import org.bukkit.configuration.InvalidConfigurationException;\n import org.bukkit.configuration.file.YamlConfiguration;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.util.logging.Level;\n \n public class Messages {\n \n-    public static final File file = new File(\"plugins/RealTimePlugin/messages.cfg\");\n-    public static final YamlConfiguration cfg = YamlConfiguration.loadConfiguration(file);\n+    public static final YamlConfiguration cfg = new YamlConfiguration();\n \n     public static String prefix = \"\";\n     public static String reloadFileMSG = \"\";\n@@ -17,17 +20,27 @@\n     public static String noPermissions = \"\";\n \n     public static void load() {\n+        File file = new File(Main.getPlugin().getDataFolder(), \"messages.cfg\");\n+        if (file.exists()) {\n+            try {\n+                cfg.load(file);\n+            } catch (IOException | InvalidConfigurationException e) {\n+                Main.getPlugin().getLogger().log(Level.SEVERE, \"Could not load messages.cfg!\", e);\n+                return;\n+            }\n+        }\n+\n         cfg.addDefault(\"Prefix\", \"&8[&eRealtime&8] \");\n         cfg.addDefault(\"reloadFileMSG\", \"successfully reloaded %file%\");\n         cfg.addDefault(\"reloadAllMSG\", \"successfully reloaded!\");\n-        cfg.addDefault(\"reloadHelp\", \"&cPlease use /realtime reload <file>\");\n+        cfg.addDefault(\"reloadHelp\", \"&cPlease use /realtime reload (file)\");\n         cfg.addDefault(\"noFile\", \"&cThe file %file% does not exist!\");\n-        cfg.addDefault(\"noPermsMSG\", \"You have no permissions!\");\n+        cfg.addDefault(\"noPermsMSG\", \"You have insufficient permissions to perform this action!\");\n         cfg.options().copyDefaults(true);\n         try {\n             cfg.save(file);\n         } catch (Exception e) {\n-            e.printStackTrace();\n+            Main.getPlugin().getLogger().log(Level.WARNING, \"Could not save messages.cfg!\", e);\n         }\n         prefix = cfg.getString(\"Prefix\").replace(\"&\", \"§\");\n         reloadFileMSG = cfg.getString(\"reloadFileMSG\").replace(\"&\", \"§\");"
  },
  {
    "sha": "8b8872a87108ca3095f7769a2288b598628b9652",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/methodes/WeatherWorld.java",
    "status": "removed",
    "additions": 0,
    "deletions": 287,
    "changes": 287,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/src/main/java/de/rexlnico/realtimeplugin/methodes/WeatherWorld.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/src/main/java/de/rexlnico/realtimeplugin/methodes/WeatherWorld.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/methodes/WeatherWorld.java?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,287 +0,0 @@\n-package de.rexlnico.realtimeplugin.methodes;\n-\n-import de.rexlnico.realtimeplugin.main.Main;\n-import org.bukkit.Bukkit;\n-import org.bukkit.Location;\n-import org.bukkit.Sound;\n-import org.bukkit.World;\n-import org.bukkit.entity.Player;\n-import org.json.simple.*;\n-import org.json.simple.parser.JSONParser;\n-\n-import java.io.*;\n-import java.lang.reflect.Constructor;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.Random;\n-\n-public class WeatherWorld {\n-\n-    private int taskID;\n-    private File file;\n-\n-    private boolean active;\n-    private World world;\n-    private long updateInterval;\n-    private boolean time;\n-    private boolean weather;\n-    private String weatherKey;\n-    private String timezone;\n-    private ZoneId zone;\n-    private String[] weatherLocation;\n-    private int count, maxCount;\n-\n-    public WeatherWorld(File file) {\n-        this.file = file;\n-        loadElements();\n-        runUpdate();\n-        maxCount = new Random(System.nanoTime()).nextInt(3)+1;\n-    }\n-\n-    public void runUpdate() {\n-        if (Bukkit.getScheduler().isCurrentlyRunning(taskID)) Bukkit.getScheduler().cancelTask(taskID);\n-        if (active && world != null && (weather || time)) {\n-            if (time) world.setGameRuleValue(\"doDaylightCycle\", \"false\");\n-            taskID = Bukkit.getScheduler().scheduleSyncRepeatingTask(Main.getPlugin(), () -> {\n-                if (time) world.setTime(getTime());\n-                if(weather){\n-                    //world.setStorm(false);\n-//                    for (Player all : world.getPlayers()) {\n-                        setWeather(world);\n-//                    }\n-                }\n-            }, 0, 20 * updateInterval);\n-        }\n-    }\n-\n-    public int getTime() {\n-        Instant nowUtc = Instant.now();\n-        ZonedDateTime dateTime = ZonedDateTime.ofInstant(nowUtc, zone);\n-        int time = (int) ((dateTime.getHour() * 60 + dateTime.getMinute()) * (16.6666667f*2f)) - 6000;\n-        if(time < 0){\n-            time = 24000 - time;\n-        }\n-//        if(time > 24000-6000){\n-//            time = time = 0;\n-//        }\n-        return time;\n-    }\n-\n-    public void disable() {\n-        if (time) world.setGameRuleValue(\"doDaylightCycle\", \"true\");\n-        if (Bukkit.getScheduler().isCurrentlyRunning(taskID)) Bukkit.getScheduler().cancelTask(taskID);\n-    }\n-\n-    public void update() {\n-        loadElements();\n-        runUpdate();\n-    }\n-\n-    private void loadElements() {\n-        if (file.exists()) {\n-            JSONParser parser = new JSONParser();\n-            try (Reader reader = new FileReader(file.getPath())) {\n-                JSONObject object = (JSONObject) parser.parse(reader);\n-\n-                String worldS = (String) object.get(\"world\");\n-                World world = Bukkit.getWorld(worldS);\n-                if (world != null) {\n-                    this.world = world;\n-                    this.active = (boolean) object.get(\"active\");\n-                    this.updateInterval = (long) object.get(\"updateInterval\");\n-                    this.updateInterval = this.updateInterval < 10 ? 10 : this.updateInterval;\n-                    JSONObject timeObject = (JSONObject) object.get(\"time\");\n-                    this.time = (boolean) timeObject.get(\"active\");\n-                    this.timezone = (String) timeObject.get(\"timezone\");\n-                    zone = ZoneId.of(timezone);\n-                    JSONObject weatherObject = (JSONObject) object.get(\"weather\");\n-                    this.weather = (boolean) weatherObject.get(\"active\");\n-                    this.weatherKey = (String) weatherObject.get(\"weatherKey\");\n-                    this.weatherLocation = new String[]{(String) weatherObject.get(\"City\"), (String) weatherObject.get(\"Country\")};\n-                }\n-            }catch (Exception e){\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    public void setWeather(World world) {\n-        String weather = getWeather();\n-        switch (weather) {\n-            case \"rain\":\n-                try {\n-                    //sendState(player, 2, 0.0f);\n-                    world.setStorm(true);\n-                    world.setWeatherDuration(Integer.MAX_VALUE);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-                break;\n-            case \"thunderstorm\":\n-                try {\n-                    world.setStorm(true);\n-                    world.setWeatherDuration(Integer.MAX_VALUE);\n-                    world.setThundering(true);\n-                    world.setThunderDuration(Integer.MAX_VALUE);\n-                    //sendState(player, 2, 0.0f);\n-//                    if (count == maxCount) {\n-//                        count = 0;\n-//                        maxCount = new Random(System.nanoTime()).nextInt(3)+1;\n-//                    } else {\n-//                        sendLightning(player, getRandomLocation(player));\n-//                        count++;\n-//                    }\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-                break;\n-            default:\n-                try {\n-//                    sendState(player, 1, 0.0f);\n-                    world.setStorm(false);\n-                    world.setWeatherDuration(0);\n-                    world.setThundering(false);\n-                    world.setThunderDuration(0);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-                break;\n-        }\n-    }\n-\n-    private String getUrlSource(String url) {\n-        try {\n-            URL url2 = null;\n-            url2 = new URL(url);\n-            URLConnection yc = null;\n-            yc = url2.openConnection();\n-            BufferedReader in = null;\n-            in = new BufferedReader(new InputStreamReader(yc.getInputStream(), \"UTF-8\"));\n-            final StringBuilder a = new StringBuilder();\n-            String inputLine;\n-            while ((inputLine = in.readLine()) != null) {\n-                a.append(inputLine);\n-            }\n-            in.close();\n-            return a.toString();\n-        } catch (Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    private JSONObject toJSON(final String json) {\n-        return (JSONObject) JSONValue.parse(json);\n-    }\n-\n-    public void sendState(Player player, int type, float state) throws InstantiationException, NoSuchFieldException {\n-        try {\n-            final Object entityPlayer = player.getClass().getMethod(\"getHandle\", (Class<?>[]) new Class[0]).invoke(player, new Object[0]);\n-            final Object playerConnection = entityPlayer.getClass().getField(\"playerConnection\").get(entityPlayer);\n-            final Object packet = getNMSClass(\"PacketPlayOutGameStateChange\").getConstructor(Integer.TYPE, Float.TYPE).newInstance(type, state);\n-            playerConnection.getClass().getMethod(\"sendPacket\", getNMSClass(\"Packet\")).invoke(playerConnection, packet);\n-        } catch (Exception ignored) {\n-        }\n-    }\n-\n-    public Location getRandomLocation(Player player) {\n-        Location location;\n-        int x;\n-        int z;\n-        x = new Random().nextInt(player.getLocation().getBlockX() + 25) + 12;\n-        z = new Random().nextInt(player.getLocation().getBlockZ() + 25) + 12;\n-        if (new Random().nextBoolean()) {\n-            x *= -1;\n-        }\n-        if (new Random().nextBoolean()) {\n-            z *= -1;\n-        }\n-        location = new Location(player.getWorld(), player.getLocation().add(x, 0, z).getX(), player.getWorld().getHighestBlockYAt(x, z) + 1, player.getLocation().add(x, 0, z).getZ());\n-        return location;\n-    }\n-\n-    private void sendLightning(Player player, Location l) {\n-        Class<?> light = getNMSClass(\"EntityLightning\");\n-        try {\n-            Constructor<?> constu = light.getConstructor(getNMSClass(\"World\"), double.class, double.class, double.class, boolean.class, boolean.class);\n-            Object wh = player.getWorld().getClass().getMethod(\"getHandle\").invoke(player.getWorld());\n-            Object lighobj = constu.newInstance(wh, l.getX(), l.getY(), l.getZ(), false, false);\n-            Object obj = getNMSClass(\"PacketPlayOutSpawnEntityWeather\").getConstructor(getNMSClass(\"Entity\")).newInstance(lighobj);\n-            sendPacket(player, obj);\n-            player.playSound(player.getLocation(), Sound.AMBIENCE_THUNDER, 100, 1);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private void sendPacket(Player player, Object packet) {\n-        try {\n-            Object handle = player.getClass().getMethod(\"getHandle\").invoke(player);\n-            Object playerConnection = handle.getClass().getField(\"playerConnection\").get(handle);\n-            playerConnection.getClass().getMethod(\"sendPacket\", getNMSClass(\"Packet\"))\n-                    .invoke(playerConnection, packet);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private Class<?> getNMSClass(String name) {\n-        try {\n-            return Class.forName(\"net.minecraft.server.\" + getNMSVersion() + \".\" + name);\n-        } catch (ClassNotFoundException ignored) {\n-            return null;\n-        }\n-    }\n-\n-    private String getNMSVersion() {\n-        return Bukkit.getServer().getClass().getPackage().getName().split(\"\\\\.\")[3];\n-    }\n-\n-\n-    public String getWeather() {\n-        try {\n-            if(weatherKey.isEmpty()){\n-                return \"sun\";\n-            }\n-            String weather = \"\";\n-            final String search = String.valueOf(weatherLocation[0] + \",\" + weatherLocation[1]);\n-            final String url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + search + \"&APPID=\" + weatherKey;\n-            String source = getUrlSource(url);\n-            if (source == null) {\n-                return \"sun\";\n-            }\n-            final JSONObject object = toJSON(getUrlSource(url));\n-            weather = (String) ((JSONObject) ((JSONArray) object.get((Object) \"weather\")).get(0)).get((Object) \"main\");\n-            return weather.toLowerCase();\n-        } catch (Exception e) {\n-            return \"sun\";\n-        }\n-    }\n-\n-    public World getWorld() {\n-        return world;\n-    }\n-\n-    public String[] getWeatherLocation() {\n-        return weatherLocation;\n-    }\n-\n-    public String getWeatherKey() {\n-        return weatherKey;\n-    }\n-\n-    public String getTimezone() {\n-        return timezone;\n-    }\n-\n-    public long getUpdateInterval() {\n-        return updateInterval;\n-    }\n-\n-    public File getFile() {\n-        return file;\n-    }\n-}"
  },
  {
    "sha": "abc6014bb14065a37ae339083fda4714d423a47d",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/methodes/WorldContainer.java",
    "status": "added",
    "additions": 218,
    "deletions": 0,
    "changes": 218,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/methodes/WorldContainer.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/methodes/WorldContainer.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/methodes/WorldContainer.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -0,0 +1,218 @@\n+package de.rexlnico.realtimeplugin.methodes;\n+\n+import de.rexlnico.realtimeplugin.main.Main;\n+import de.rexlnico.realtimeplugin.util.Utils;\n+import org.bukkit.Bukkit;\n+import org.bukkit.World;\n+import org.bukkit.scheduler.BukkitScheduler;\n+import org.bukkit.scheduler.BukkitTask;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class WorldContainer {\n+\n+    private static final double SECONDS_TO_TICKS_FACTOR = 1_000d / Math.pow(60d, 2d);\n+\n+    private final File file;\n+\n+    private BukkitTask task;\n+    private String doDaylightCycle; // save original value of doDaylightCycle\n+\n+\n+    private boolean active;\n+    private World world;\n+    private long updateInterval;\n+    private boolean time;\n+    private boolean weather;\n+    private String weatherKey;\n+    private String timezone;\n+    private ZoneId zone;\n+    private String[] weatherLocation;\n+\n+    public WorldContainer(File file) {\n+        this.file = file;\n+        if (!this.file.exists()) {\n+            throw new IllegalArgumentException(String.format(\"World file %s does not exist.\", this.file));\n+        }\n+\n+        update();\n+    }\n+\n+    public void runUpdate() {\n+        BukkitScheduler scheduler = Bukkit.getScheduler();\n+        Main plugin = Main.getPlugin();\n+\n+        cancelTask();\n+\n+        if (active && world != null && (weather || time)) {\n+            List<Runnable> stack = new ArrayList<>();\n+\n+            if (time) {\n+                this.doDaylightCycle = world.getGameRuleValue(\"doDaylightCycle\");\n+                world.setGameRuleValue(\"doDaylightCycle\", \"false\");\n+\n+                stack.add(() -> {\n+                    // get time asynchronously\n+                    int time = getTime();\n+                    // set time synchronously\n+                    scheduler.runTask(plugin, () -> world.setTime(time));\n+                });\n+            }\n+            if (weather) {\n+                stack.add(() -> {\n+                    // get weather asynchronously\n+                    String weather = fetchWeather();\n+                    // set weather synchronously\n+                    scheduler.runTask(plugin, () -> setWeather(weather));\n+                });\n+            }\n+\n+            if (!stack.isEmpty()) {\n+                task = Bukkit.getScheduler().runTaskTimerAsynchronously(Main.getPlugin(),\n+                        () -> stack.forEach(Runnable::run), 0, 20 * updateInterval);\n+            }\n+        }\n+    }\n+\n+    public int getTime() {\n+        ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.now() /* in UTC */, zone);\n+        int secondsInDay = dateTime.getHour() * 3600 + dateTime.getMinute() * 60 + dateTime.getSecond();\n+        return Utils.overflow(18_000 + (int) (secondsInDay * SECONDS_TO_TICKS_FACTOR), 24_000);\n+    }\n+\n+    public void disable() {\n+        if (time && doDaylightCycle != null) {\n+            world.setGameRuleValue(\"doDaylightCycle\", doDaylightCycle);\n+        }\n+        cancelTask();\n+    }\n+\n+    public void update() {\n+\n+        // load JSON data\n+        JSONParser parser = new JSONParser();\n+        try (Reader reader = new FileReader(file.getPath())) {\n+            JSONObject object = (JSONObject) parser.parse(reader);\n+\n+            String worldS = (String) object.get(\"world\");\n+            World world = Bukkit.getWorld(worldS);\n+            if (world != null) {\n+                this.world = world;\n+                this.active = (boolean) object.get(\"active\");\n+                this.updateInterval = Math.max(10, (long) object.get(\"updateInterval\"));\n+                JSONObject timeObject = (JSONObject) object.get(\"time\");\n+                this.time = (boolean) timeObject.get(\"active\");\n+                this.timezone = (String) timeObject.get(\"timezone\");\n+                zone = ZoneId.of(timezone);\n+                JSONObject weatherObject = (JSONObject) object.get(\"weather\");\n+                this.weather = (boolean) weatherObject.get(\"active\");\n+                this.weatherKey = (String) weatherObject.get(\"weatherKey\");\n+                this.weatherLocation = new String[]{(String) weatherObject.get(\"City\"), (String) weatherObject.get(\"Country\")};\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(String.format(\"Count not load world configuration %s\", this.file), e);\n+        }\n+\n+        runUpdate();\n+    }\n+\n+\n+    private void cancelTask() {\n+        if (task != null) {\n+            BukkitScheduler scheduler = Bukkit.getScheduler();\n+            int tid = task.getTaskId();\n+            if (scheduler.isCurrentlyRunning(tid) || scheduler.isQueued(tid)) {\n+                task.cancel();\n+                task = null;\n+            }\n+        }\n+    }\n+\n+    public String fetchWeather() {\n+        try {\n+            if (weatherKey.isEmpty()) {\n+                return \"sun\";\n+            }\n+            final String search = weatherLocation[0] + \",\" + weatherLocation[1];\n+            final String url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + search + \"&APPID=\" + weatherKey;\n+\n+            byte[] response = Utils.httpRequest(url);\n+            if (response == null) {\n+                return \"sun\";\n+            }\n+\n+            final JSONObject object = Utils.parseJSON(new String(response, StandardCharsets.UTF_8));\n+            return ((String) ((JSONObject) ((JSONArray) object.get(\"weather\")).get(0)).get(\"main\")).toLowerCase();\n+        } catch (Exception e) {\n+            return \"sun\";\n+        }\n+    }\n+\n+    public void setWeather(String weather) {\n+        switch (weather) {\n+            case \"rain\":\n+                try {\n+                    world.setStorm(true);\n+                    world.setWeatherDuration(Integer.MAX_VALUE);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                break;\n+            case \"thunderstorm\":\n+                try {\n+                    world.setStorm(true);\n+                    world.setWeatherDuration(Integer.MAX_VALUE);\n+                    world.setThundering(true);\n+                    world.setThunderDuration(Integer.MAX_VALUE);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                break;\n+            default:\n+                try {\n+                    world.setStorm(false);\n+                    world.setWeatherDuration(0);\n+                    world.setThundering(false);\n+                    world.setThunderDuration(0);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                break;\n+        }\n+    }\n+\n+    public World getWorld() {\n+        return world;\n+    }\n+\n+    public String[] getWeatherLocation() {\n+        return weatherLocation;\n+    }\n+\n+    public String getWeatherKey() {\n+        return weatherKey;\n+    }\n+\n+    public String getTimezone() {\n+        return timezone;\n+    }\n+\n+    public long getUpdateInterval() {\n+        return updateInterval;\n+    }\n+\n+    public File getFile() {\n+        return file;\n+    }\n+}"
  },
  {
    "sha": "4dedede275103ba45ebdefcadc60f367ac7db4cd",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/methodes/WorldManager.java",
    "status": "modified",
    "additions": 28,
    "deletions": 72,
    "changes": 100,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/methodes/WorldManager.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/methodes/WorldManager.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/methodes/WorldManager.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -1,148 +1,104 @@\n package de.rexlnico.realtimeplugin.methodes;\n \n import de.rexlnico.realtimeplugin.main.Main;\n-import org.bukkit.Bukkit;\n-import org.bukkit.World;\n import org.bukkit.configuration.file.YamlConfiguration;\n-import org.json.simple.*;\n \n import java.io.*;\n import java.nio.file.Files;\n import java.nio.file.StandardCopyOption;\n-import java.sql.Time;\n import java.time.ZoneId;\n import java.util.ArrayList;\n-import java.util.TimeZone;\n \n public class WorldManager {\n \n-    ArrayList<WeatherWorld> worlds;\n-    private ArrayList<String> tabComplete;\n+    private final ArrayList<String> tabComplete;\n+    ArrayList<WorldContainer> worlds;\n \n     public WorldManager() throws IOException {\n-        worlds = new ArrayList<WeatherWorld>();\n+        worlds = new ArrayList<>();\n         tabComplete = new ArrayList<>();\n         loadAll();\n         setTabComplete();\n         createTimeTable();\n     }\n \n     private void loadAll() throws IOException {\n-        File directoryPath = new File(\"plugins/RealTimePlugin/worlds\");\n-        File fileList[] = directoryPath.listFiles();\n+        File worldsDir = new File(Main.getPlugin().getDataFolder(), \"worlds\");\n+        File[] fileList = worldsDir.listFiles();\n         if (fileList == null) {\n-            createExample(directoryPath);\n+            createExample(worldsDir);\n             return;\n         }\n         for (File file : fileList) {\n             if (file.getName().contains(\".json\")) {\n-                worlds.add(new WeatherWorld(file));\n+                worlds.add(new WorldContainer(file));\n             }\n         }\n     }\n \n     public void loadNew() {\n-        File directoryPath = new File(\"plugins/RealTimePlugin/worlds\");\n-        File fileList[] = directoryPath.listFiles();\n+        File directoryPath = new File(Main.getPlugin().getDataFolder(), \"worlds\");\n+        File[] fileList = directoryPath.listFiles();\n         if (fileList == null) return;\n         for (File file : fileList) {\n             if (file.getName().contains(\".json\")) {\n-                if(containsFile(file.getName())){\n-                    worlds.add(new WeatherWorld(file));\n+                if (containsFile(file.getName())) {\n+                    worlds.add(new WorldContainer(file));\n                 }\n             }\n         }\n         setTabComplete();\n     }\n \n     private void createTimeTable() throws IOException {\n-        File file = new File(\"plugins/RealTimePlugin/WeatherTimezones.cfg\");\n-        if(file.exists()) return;\n+        File file = new File(Main.getPlugin().getDataFolder(), \"WeatherTimezones.cfg\");\n+        if (file.exists()) return;\n         YamlConfiguration.loadConfiguration(file).save(file);\n         BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n \n-        for(String s : ZoneId.getAvailableZoneIds()){\n-            writer.write(s+\"\\n\");\n+        for (String s : ZoneId.getAvailableZoneIds()) {\n+            writer.write(s + \"\\n\");\n         }\n         writer.flush();\n         writer.close();\n     }\n \n-    public ArrayList<String> getTabComplete(){\n+    public ArrayList<String> getTabComplete() {\n         return tabComplete;\n     }\n \n-    private void setTabComplete(){\n+    private void setTabComplete() {\n         tabComplete.clear();\n-        for (WeatherWorld world : worlds) {\n+        for (WorldContainer world : worlds) {\n             tabComplete.add(world.getFile().getName());\n         }\n     }\n \n-    public WeatherWorld getWeatherWorld(String name){\n-        for (WeatherWorld world : worlds) {\n-            if (world.getFile().getName().equals(name)) {\n-                return world;\n-            }\n-        }\n-        return null;\n+    public WorldContainer getWeatherWorld(String name) {\n+        return worlds.stream()\n+                .filter(container -> container.getFile().getName().equals(name))\n+                .findFirst().orElse(null);\n     }\n \n-    private boolean containsFile(String name){\n-        for (WeatherWorld world : worlds) {\n-            if (world.getFile().getName().equals(name)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+    private boolean containsFile(String name) {\n+        return worlds.stream()\n+                .anyMatch(container -> container.getFile().getName().equals(name));\n     }\n \n     public void updateAll() {\n-        for (WeatherWorld weatherWorld : worlds) {\n-            weatherWorld.update();\n-        }\n+        worlds.forEach(WorldContainer::update);\n         setTabComplete();\n     }\n \n     public void disable() {\n-        for (WeatherWorld weatherWorld : worlds) {\n-            weatherWorld.disable();\n-        }\n+        worlds.forEach(WorldContainer::disable);\n     }\n \n     private void createExample(File dir) throws IOException {\n         InputStream root = Main.getPlugin().getResource(\"example.json\");\n-        File filePath = new File(\"plugins/RealTimePlugin/worlds\", \"example.json\");\n+        File filePath = new File(dir, \"example.json\");\n         YamlConfiguration.loadConfiguration(filePath).save(filePath);\n         Files.copy(root, filePath.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-\n-\n-//        File filePath = new File(\"plugins/RealTimePlugin/worlds\", \"example.json\");\n-//        YamlConfiguration.loadConfiguration(filePath).save(filePath);\n-//        org.json.simple.JSONObject object = new org.json.simple.JSONObject();\n-//\n-//        object.put(\"world\", \"worldName\");\n-//        object.put(\"updateInterval\", 20L);\n-//        object.put(\"active\", false);\n-//        JSONObject time = new JSONObject();\n-//        time.put(\"active\", true);\n-//        time.put(\"timezone\", \"Europe/Berlin\");\n-//        object.put(\"time\", time);\n-//        JSONObject weather = new JSONObject();\n-//        weather.put(\"active\", true);\n-//        weather.put(\"City\", \"Berlin\");\n-//        weather.put(\"Country\", \"Germany\");\n-//        weather.put(\"weatherKey\", \"\");\n-//        object.put(\"weather\", weather);\n-//\n-//        try (FileWriter file = new FileWriter(filePath.getPath())) {\n-//\n-//            file.write(object.toJSONString());\n-//            file.flush();\n-//\n-//        } catch (Exception e) {\n-//            e.printStackTrace();\n-//        }\n     }\n \n }"
  },
  {
    "sha": "f1a268d30e1431a79d800d1a33c3570e5cf7d9ee",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/util/NMSUtil.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/util/NMSUtil.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/util/NMSUtil.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/util/NMSUtil.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -0,0 +1,55 @@\n+package de.rexlnico.realtimeplugin.util;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+\n+import java.lang.reflect.Constructor;\n+\n+public class NMSUtil {\n+    public static final String VERSION = Bukkit.getServer().getClass().getPackage().getName().split(\"\\\\.\")[3];\n+\n+    public static Class<?> getNMSClass(String name) {\n+        try {\n+            return Class.forName(String.format(\"net.minecraft.server.%s.%s\", VERSION, name));\n+        } catch (ClassNotFoundException ignored) {\n+            return null;\n+        }\n+    }\n+\n+    public static void sendPacket(Player player, Object packet) {\n+        try {\n+            Object handle = player.getClass().getMethod(\"getHandle\").invoke(player);\n+            Object playerConnection = handle.getClass().getField(\"playerConnection\").get(handle);\n+            playerConnection.getClass().getMethod(\"sendPacket\", getNMSClass(\"Packet\"))\n+                    .invoke(playerConnection, packet);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void sendLightning(Player player, Location l) {\n+        Class<?> light = getNMSClass(\"EntityLightning\");\n+        try {\n+            Constructor<?> constu = light.getConstructor(getNMSClass(\"World\"), double.class, double.class, double.class, boolean.class, boolean.class);\n+            Object wh = player.getWorld().getClass().getMethod(\"getHandle\").invoke(player.getWorld());\n+            Object lighobj = constu.newInstance(wh, l.getX(), l.getY(), l.getZ(), false, false);\n+            Object obj = getNMSClass(\"PacketPlayOutSpawnEntityWeather\").getConstructor(getNMSClass(\"Entity\")).newInstance(lighobj);\n+            sendPacket(player, obj);\n+            player.playSound(player.getLocation(), Sound.AMBIENCE_THUNDER, 100, 1);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void sendGameState(Player player, int type, float state) throws InstantiationException, NoSuchFieldException {\n+        try {\n+            final Object entityPlayer = player.getClass().getMethod(\"getHandle\", new Class[0]).invoke(player);\n+            final Object playerConnection = entityPlayer.getClass().getField(\"playerConnection\").get(entityPlayer);\n+            final Object packet = getNMSClass(\"PacketPlayOutGameStateChange\").getConstructor(Integer.TYPE, Float.TYPE).newInstance(type, state);\n+            playerConnection.getClass().getMethod(\"sendPacket\", getNMSClass(\"Packet\")).invoke(playerConnection, packet);\n+        } catch (Exception ignored) {\n+        }\n+    }\n+}"
  },
  {
    "sha": "3fcb0ec68b73b1d3f049ccd63206d0425d51149b",
    "filename": "src/main/java/de/rexlnico/realtimeplugin/util/Utils.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/util/Utils.java",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/java/de/rexlnico/realtimeplugin/util/Utils.java",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/java/de/rexlnico/realtimeplugin/util/Utils.java?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -0,0 +1,77 @@\n+package de.rexlnico.realtimeplugin.util;\n+\n+import de.rexlnico.realtimeplugin.main.Main;\n+import org.bukkit.Location;\n+import org.bukkit.entity.Player;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Random;\n+import java.util.logging.Level;\n+\n+public class Utils {\n+\n+    public static int overflow(int value, int at) {\n+        while (value > at) {\n+            value -= at;\n+        }\n+        return value;\n+    }\n+\n+    public static byte[] httpRequest(String url) {\n+        try {\n+            return httpRequest(new URL(url));\n+        } catch (MalformedURLException e) {\n+            Main.getPlugin().getLogger().log(Level.SEVERE, String.format(\"HTTP request to %s failed\", url), e);\n+            return null;\n+        }\n+    }\n+\n+    public static byte[] httpRequest(URL url) {\n+        try {\n+            URLConnection conn = url.openConnection();\n+            InputStream in = conn.getInputStream();\n+            ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+\n+            byte[] buff = new byte[1024];\n+            int len;\n+            while ((len = in.read(buff)) != -1) {\n+                bout.write(buff, 0, len);\n+            }\n+\n+            bout.close();\n+            in.close();\n+\n+            return bout.toByteArray();\n+        } catch (Exception e) {\n+            Main.getPlugin().getLogger().log(Level.SEVERE, String.format(\"HTTP request to %s failed\", url), e);\n+            return null;\n+        }\n+    }\n+\n+    public static Location getRandomLocation(Player player) {\n+        Location location;\n+        int x;\n+        int z;\n+        x = new Random().nextInt(player.getLocation().getBlockX() + 25) + 12;\n+        z = new Random().nextInt(player.getLocation().getBlockZ() + 25) + 12;\n+        if (new Random().nextBoolean()) {\n+            x *= -1;\n+        }\n+        if (new Random().nextBoolean()) {\n+            z *= -1;\n+        }\n+        location = new Location(player.getWorld(), player.getLocation().add(x, 0, z).getX(), player.getWorld().getHighestBlockYAt(x, z) + 1, player.getLocation().add(x, 0, z).getZ());\n+        return location;\n+    }\n+\n+    public static JSONObject parseJSON(String json) {\n+        return (JSONObject) JSONValue.parse(json);\n+    }\n+\n+}"
  },
  {
    "sha": "498bf4ec7311c822ca22ace0e8e57dd14149ccdd",
    "filename": "src/main/resources/plugin.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/resources/plugin.yml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/bcac6b1e11b1b1b40e9e0c1350259d9f832e94df/src/main/resources/plugin.yml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/src/main/resources/plugin.yml?ref=bcac6b1e11b1b1b40e9e0c1350259d9f832e94df",
    "patch": "@@ -1,5 +1,5 @@\n main: de.rexlnico.realtimeplugin.main.Main\n-author: rexlNico\n+authors: [ rexlNico, fluse1367 ]\n version: 3.0\n name: RealTimePlugin\n website: https://rexlNico.de"
  },
  {
    "sha": "f693779b8ada5cc5ce20722d41fe582dee7db717",
    "filename": "target/classes/de/rexlnico/realtimeplugin/commands/Commands.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/commands/Commands.class",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/commands/Commands.class",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/de/rexlnico/realtimeplugin/commands/Commands.class?ref=b25706dd1965c1af99b17bb526c641b74327074e"
  },
  {
    "sha": "35c9a1715e65ea33c3062d1c8037f5d090577672",
    "filename": "target/classes/de/rexlnico/realtimeplugin/main/Main.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/main/Main.class",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/main/Main.class",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/de/rexlnico/realtimeplugin/main/Main.class?ref=b25706dd1965c1af99b17bb526c641b74327074e"
  },
  {
    "sha": "0fb54c55d5e3f4a36e1704ffedf1436600690685",
    "filename": "target/classes/de/rexlnico/realtimeplugin/methodes/Messages.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/methodes/Messages.class",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/methodes/Messages.class",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/de/rexlnico/realtimeplugin/methodes/Messages.class?ref=b25706dd1965c1af99b17bb526c641b74327074e"
  },
  {
    "sha": "a5624d0122565e11053bf77fcd0aff224eade893",
    "filename": "target/classes/de/rexlnico/realtimeplugin/methodes/WeatherWorld.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/methodes/WeatherWorld.class",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/methodes/WeatherWorld.class",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/de/rexlnico/realtimeplugin/methodes/WeatherWorld.class?ref=b25706dd1965c1af99b17bb526c641b74327074e"
  },
  {
    "sha": "b23c9b5f762efbb62034a44d9826f512095e30ec",
    "filename": "target/classes/de/rexlnico/realtimeplugin/methodes/WorldManager.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/methodes/WorldManager.class",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/de/rexlnico/realtimeplugin/methodes/WorldManager.class",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/de/rexlnico/realtimeplugin/methodes/WorldManager.class?ref=b25706dd1965c1af99b17bb526c641b74327074e"
  },
  {
    "sha": "4b2768d20a3ef3073c0bce5ba6f197e1f77950e7",
    "filename": "target/classes/example.json",
    "status": "removed",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/example.json",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/example.json",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/example.json?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,15 +0,0 @@\n-{\n-  \"world\": \"example\",\n-  \"updateInterval\": 20,\n-  \"active\": true,\n-  \"time\": {\n-    \"active\": true,\n-    \"timezone\": \"Europe/Berlin\"\n-  },\n-  \"weather\": {\n-    \"active\": false,\n-    \"City\": \"Berlin\",\n-    \"Country\": \"Germany\",\n-    \"weatherKey\": \"\"\n-  }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "b453824bf19275fda5ff490e6458afc1b6f2dcd9",
    "filename": "target/classes/plugin.yml",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/rexlNico/RealTimePlugin/blob/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/plugin.yml",
    "raw_url": "https://github.com/rexlNico/RealTimePlugin/raw/b25706dd1965c1af99b17bb526c641b74327074e/target/classes/plugin.yml",
    "contents_url": "https://api.github.com/repos/rexlNico/RealTimePlugin/contents/target/classes/plugin.yml?ref=b25706dd1965c1af99b17bb526c641b74327074e",
    "patch": "@@ -1,8 +0,0 @@\n-main: de.rexlnico.realtimeplugin.main.Main\n-author: rexlNico\n-version: 3.0\n-name: RealTimePlugin\n-website: https://rexlNico.de\n-\n-commands:\n-  realtime:\n\\ No newline at end of file"
  }
]
