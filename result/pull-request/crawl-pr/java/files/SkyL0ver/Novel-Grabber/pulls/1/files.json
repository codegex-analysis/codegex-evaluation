[
  {
    "sha": "7744238b7a1ab92742d95252fcc521c2efd57412",
    "filename": "README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/README.md",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/README.md",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/README.md?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -51,10 +51,9 @@ Usage:\n -gui / `none` | | Starts the Graphical User Interface.\n -link | {novel_URL} | URL to the novel's table of contents page. Starts download.\n [-wait] | {miliseconds} | Time between each chapter grab.\n-[-headless] | {chrome/firefox/opera/edge/IE} | Visit the website in your browser. Executes javascript etc.\n+[-headless] | {chrome/firefox/opera/edge/IE/headless} | Visit the website in your browser. Executes javascript etc.\n [-chapters] | {all}, {5 27}, {12 last}\t| Specify which chapters to download.\n [-path] | {directory_path} | Output directory for the EPUB.\n-[-account] | {username password} | Add a new account for the host.\n [-login] | | Log in on website with saved account. -account is not needed if an account for this domain was added previously.\n [-noDesc] | | Don't create a description page.\n [-removeStyle] | | Remove all styling from chapter body.\n@@ -66,7 +65,7 @@ Usage:\n <br>\n <strong>Telegram bot:</strong>\n \n-To host your own Telegram bot you need to add the line `telegramApiToken=your_token ` to `settings.ini`\n+To host your own Telegram bot you need to add the line `telegramApiToken=your_token ` to `config.ini`\n \n By default the bot will read the output for `/info` and `/sources` from files inside the telegram folder. \n The files need to be named `info.txt` and `supported_Sources.txt` respectively."
  },
  {
    "sha": "913bc079fce7df9f8e5db051ada49bb86c0ce159",
    "filename": "src/main/java/bots/Telegram.java",
    "status": "added",
    "additions": 336,
    "deletions": 0,
    "changes": 336,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/bots/Telegram.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/bots/Telegram.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/bots/Telegram.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,336 @@\n+package bots;\n+\n+import com.pengrad.telegrambot.TelegramBot;\n+import com.pengrad.telegrambot.UpdatesListener;\n+import com.pengrad.telegrambot.model.Message;\n+import com.pengrad.telegrambot.model.Update;\n+import com.pengrad.telegrambot.model.request.ParseMode;\n+import com.pengrad.telegrambot.request.EditMessageText;\n+import com.pengrad.telegrambot.request.SendDocument;\n+import com.pengrad.telegrambot.request.SendMessage;\n+import grabber.CLI;\n+import grabber.GrabberUtils;\n+import grabber.Novel;\n+import grabber.sources.Source;\n+import system.Config;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class Telegram {\n+    private static Telegram telegramBot;\n+    public TelegramBot novelly;\n+    private Config config = Config.getInstance();\n+    private static final String infoFile = \"info.txt\";\n+    private static final String vipFile = \"vip.txt\";\n+    private static final String telegramDir = \"./telegram\";\n+    private static final String cliText = \"\" +\n+            \"Input needs to start with '-link'. All parameter are case sensitive.\\n\\n\" +\n+            \"[-link] | {novel_URL} | URL to the novel's table of contents page. Every other parameter is optional.\\n\" +\n+            \"[-wait] | {miliseconds} | Time between each chapter grab.\\n\" +\n+            \"[-chapters] | {all}, {5 27}, {12 last} | Specify which chapters to download.\\n\" +\n+            \"[-noDesc] | Don't create a description page.\\n\" +\n+            \"[-removeStyle] | Remove all styling from chapter body.\\n\" +\n+            \"[-getImages] | Grab images from chapter body as well.\\n\" +\n+            \"[-displayTitle] | Write the chapter title at the top of each chapter text.\\n\" +\n+            \"[-invertOrder] | Invert the chapter order.\\n\\n\" +\n+            \"Example:\\n\" +\n+            \" -link http://novelhost.com/novel/ -chapters 5 10 -getImages\";\n+    private final ConcurrentHashMap currentlyDownloading = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap downloadMsgIds = new ConcurrentHashMap<>();\n+    private final ExecutorService executor = Executors.newFixedThreadPool(10);\n+    private final ConcurrentHashMap userChapterCount = new ConcurrentHashMap<>();\n+    private LocalDate yesterday = LocalDate.now(ZoneId.systemDefault());\n+    private List<String> vipList = new ArrayList<>();\n+\n+    // Initialization with api token\n+    private Telegram() {\n+        GrabberUtils.info(\"Starting Telegram bot...\");\n+        String token = config.getTelegramApiToken();\n+        updateVipList();\n+        if(!token.isEmpty()) {\n+            novelly = new TelegramBot(token);\n+            GrabberUtils.info(\"Telegram bot started.\");\n+        } else {\n+            GrabberUtils.err(\"Token empty\");\n+        }\n+    }\n+\n+    // Singleton\n+    public static Telegram getInstance() {\n+        if(telegramBot == null) {\n+            telegramBot = new Telegram();\n+        }\n+        return telegramBot;\n+    }\n+\n+    public void run() {\n+        // Poll for new messages\n+        novelly.setUpdatesListener(updates -> {\n+            // Process each update in new thread\n+            for(Update update: updates) {\n+                executor.execute(() -> {\n+                    if (isNewDay()) resetLimits();\n+                    processMessage(update.message());\n+                });\n+            }\n+\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\n+        });\n+    }\n+\n+    private void processMessage(Message message) {\n+        int userId = message.from().id();\n+        long chatId = message.chat().id();\n+        String messageTxt = message.text();\n+\n+        if (messageTxt == null) return;\n+        \n+        GrabberUtils.info(messageTxt);\n+\n+        if(messageTxt.startsWith(\"/info\") || messageTxt.startsWith(\"/start\")) {\n+            novelly.execute(new SendMessage(chatId, getStringFromFile(infoFile))\n+                    .parseMode(ParseMode.Markdown)\n+                    .disableWebPagePreview(true));\n+        }\n+        else if(messageTxt.startsWith(\"/sources\")) {\n+            novelly.execute(new SendMessage(chatId, getSourcesString())\n+                    .parseMode(ParseMode.Markdown)\n+                    .disableWebPagePreview(true));\n+        }\n+        else if(messageTxt.startsWith(\"/cli\")) {\n+            novelly.execute(new SendMessage(chatId, cliText).disableWebPagePreview(true));\n+        }\n+        else if(messageTxt.startsWith(\"/limits\")) {\n+            novelly.execute(new SendMessage(chatId, getLimitString(userId)).disableWebPagePreview(true));\n+        }\n+        else if(messageTxt.startsWith(\"/updateVips\")) {\n+            if (config.getTelegramAdminIds().contains(String.valueOf(userId))) {\n+                updateVipList();\n+                novelly.execute(new SendMessage(chatId, String.format(\"Updated. (%d vips)\", vipList.size())));\n+            }\n+        }\n+        else if(messageTxt.startsWith(\"/stop\")) {\n+            if(currentlyDownloading.containsKey(userId)) {\n+                ((Novel) currentlyDownloading.get(userId)).killTask = true;\n+                currentlyDownloading.remove(userId);\n+            } else {\n+                novelly.execute(new SendMessage(chatId, \"No download in progress.\"));\n+            }\n+        }\n+        else {\n+            if(messageTxt.startsWith(\"/download\")) {\n+                messageTxt = messageTxt.substring(messageTxt.indexOf(\" \")+1);\n+            }\n+            if(messageTxt.startsWith(\"http\") || messageTxt.startsWith(\"-link\")) {\n+                if(!currentlyDownloading.containsKey(userId)) {\n+                    log(String.format(\"[%s] %s\", chatId, messageTxt));\n+                    try {\n+                        downloadNovel(chatId, userId, messageTxt);\n+                    } catch(Exception e) {\n+                        GrabberUtils.err(e.getMessage(), e);\n+                        novelly.execute(new SendMessage(chatId, e.getMessage()));\n+                    } finally {\n+                        currentlyDownloading.remove(userId);\n+                    }\n+                } else {\n+                    novelly.execute(new SendMessage(chatId, \"Only one download at a time allowed.\"));\n+                }\n+            } else {\n+                novelly.execute(new SendMessage(chatId, \"Please post a valid URL\"));\n+            }\n+        }\n+    }\n+\n+    private void downloadNovel(long chatId, int userId, String messageTxt) throws IllegalStateException, IOException,\n+            ClassNotFoundException, InterruptedException {\n+        Novel novel = null;\n+        // CLI\n+        if (messageTxt.startsWith(\"-link\")) {\n+            String[] args = CLI.createArgsFromString(messageTxt);\n+            Map<String, List<String>> params = CLI.createParamsFromArgs(args);\n+\n+             novel = Novel.builder().fromCLI(params)\n+                    .window(\"auto\")\n+                    .useHeadless(false)\n+                    .useAccount(false)\n+                    .telegramChatId(chatId)\n+                    .saveLocation(\"./telegram/requests/\"+ chatId)\n+                    .waitTime(isVip(userId) ? 0 : config.getTelegramWait())\n+                    .build();\n+             novel.check();\n+            currentlyDownloading.put(userId, novel);\n+            if(novel.chapterList.isEmpty()) throw new IllegalStateException(\"Chapter list empty.\");\n+\n+            // Chapter range needs to be set after fetching the chapter list\n+            if(params.containsKey(\"chapters\")) {\n+                if(params.get(\"chapters\").get(0).equals(\"all\")) {\n+                    novel.firstChapter = 1;\n+                    novel.lastChapter = novel.chapterList.size();\n+                } else {\n+                    novel.firstChapter = Integer.parseInt(params.get(\"chapters\").get(0));\n+                    if(params.get(\"chapters\").get(1).equals(\"last\")) {\n+                        novel.lastChapter = novel.chapterList.size();\n+                    } else {\n+                        novel.lastChapter = Integer.parseInt(params.get(\"chapters\").get(1));\n+                    }\n+                }\n+            } else {\n+                novel.firstChapter = 1;\n+                novel.lastChapter = novel.chapterList.size();\n+            }\n+\n+        }\n+        // Normal\n+        if (messageTxt.startsWith(\"http\")){\n+            novel = Novel.builder()\n+                    .novelLink(messageTxt)\n+                    .window(\"auto\")\n+                    .saveLocation(\"./telegram/requests/\"+ chatId)\n+                    .getImages(true)\n+                    .telegramChatId(chatId)\n+                    .setSource(messageTxt)\n+                    .waitTime(isVip(userId) ? 0 : config.getTelegramWait())\n+                    .build();\n+            novel.check();\n+            currentlyDownloading.put(userId, novel);\n+            if(novel.chapterList.isEmpty()) throw new IllegalStateException(\"Chapter list empty.\");\n+\n+            novel = Novel.modifier(novel)\n+                    .firstChapter(1)\n+                    .lastChapter(novel.chapterList.size())\n+                    .build();\n+        }\n+        // Limits\n+        int chaptersToDownload = novel.lastChapter - novel.firstChapter+1;\n+        // Chapter limit per novel\n+        if (chaptersToDownload > config.getTelegramNovelMaxChapter()\n+                && !isVip(userId)\n+                && config.getTelegramNovelMaxChapter() != -1) {\n+            throw new IllegalStateException(\"Above chapter limit! (max. chapter per novel: \" + config.getTelegramNovelMaxChapter() + \")\");\n+        }\n+        // Chapter limit per user\n+        int chapterDownloadedToday = (int) userChapterCount.getOrDefault(userId, 0);\n+        if (chapterDownloadedToday + chaptersToDownload > config.getTelegramMaxChapterPerDay()\n+                && !isVip(userId)\n+                && config.getTelegramMaxChapterPerDay() != -1) {\n+            throw new IllegalStateException(String.format(\"Above chapter quota! (%d chapters left today)\",\n+                    config.getTelegramMaxChapterPerDay() - chapterDownloadedToday));\n+        }\n+        // Send confirmation message and store messageId to update progress\n+        novelly.execute(new SendMessage(chatId, \"Downloading: \"+novel.metadata.getTitle()));\n+        int messageId = novelly.execute(new SendMessage(chatId, \"Progress: \")).message().messageId();\n+        downloadMsgIds.put(chatId, messageId);\n+\n+        novel.downloadChapters();\n+        novel.output();\n+        if (!novel.failedChapters.isEmpty()) {\n+            novelly.execute(new SendMessage(chatId, \"Retrying failed chapters...\"));\n+            novel.retry();\n+            if (!novel.failedChapters.isEmpty()) {\n+                novelly.execute(new SendMessage(chatId, \"Remaining failed chapters: \" + novel.failedChapters.size()));\n+            }\n+        }\n+\n+        // Send file\n+        File epub = new File(novel.saveLocation+\"/\"+novel.epubFilename);\n+        if(epub.exists()) {\n+            novelly.execute(new SendDocument(chatId, epub));\n+            GrabberUtils.info(\"EPUB sent: \" + novel.epubFilename);\n+            // Update downloaded chapter amount\n+            userChapterCount.put(userId, chapterDownloadedToday + novel.successfulChapters.size());\n+        } else {\n+            novelly.execute(new SendMessage(chatId, \"Sorry. Could not download the novel.\"));\n+            GrabberUtils.err(\"EPUB not downloaded: \" + messageTxt);\n+        }\n+    }\n+\n+    public void updateProgress(long chatId, int currChapter, int lastChapter) {\n+        int messageId = (int) downloadMsgIds.get(chatId);\n+        novelly.execute(new EditMessageText(chatId, messageId, \"Progress: \"+(currChapter+1)+\"/\"+lastChapter));\n+    }\n+\n+    public static void log(String msg) {\n+        String time = ZonedDateTime.now().truncatedTo(ChronoUnit.SECONDS).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);\n+        try {\n+            Files.createDirectories(Paths.get(telegramDir));\n+            try (BufferedWriter writer = new BufferedWriter(new FileWriter(telegramDir + \"/log.txt\", true))) {\n+                writer.write(\"[\" + time + \"] \" + msg);\n+                writer.write(\"\\n\");\n+            }\n+        } catch (IOException e) {\n+            GrabberUtils.err(e.getMessage(), e);\n+        }\n+    }\n+\n+    private static String getStringFromFile(String fileName) {\n+        StringBuilder resultStringBuilder = new StringBuilder();\n+        try (BufferedReader br = new BufferedReader(new FileReader(telegramDir+\"/\"+fileName))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                resultStringBuilder.append(line).append(\"\\n\");\n+            }\n+        } catch (IOException e) {\n+            GrabberUtils.err(\"File found: \"+ telegramDir+\"/\"+fileName);\n+        }\n+        return resultStringBuilder.toString();\n+    }\n+\n+    public void sendMsg(long chatId, String msg) {\n+        novelly.execute(new SendMessage(chatId, msg));\n+    }\n+\n+    private String getSourcesString() {\n+        StringBuilder sources = new StringBuilder();\n+        for(Source source: GrabberUtils.getSources()) {\n+            sources.append(\"[\" + source.getName() + \"](\" + source.getUrl() + \")\\n\");\n+        }\n+        return sources.toString();\n+    }\n+\n+    private String getLimitString(int userId) {\n+        String msgMaxChNovel = String.format(\"Max. chapters per novel: %s \\n\",\n+                config.getTelegramNovelMaxChapter() != -1 && !isVip(userId) ?\n+                        String.valueOf(config.getTelegramNovelMaxChapter()) : \"Unlimited\");\n+        int chapterDownloadedToday = (int) userChapterCount.getOrDefault(userId, 0);\n+        String msgChLeft = String.format(\"Chapters left today: %s \\n\",\n+                config.getTelegramMaxChapterPerDay() != -1  && !isVip(userId) ?\n+                        String.valueOf(config.getTelegramMaxChapterPerDay() - chapterDownloadedToday) : \"Unlimited\");\n+        String msgChSpeed = String.format(\"Wait time between chapters: %s \\n\",\n+                (isVip(userId) ? 0 : config.getTelegramWait()) + \" milliseconds\");\n+        return msgChLeft + msgMaxChNovel + msgChSpeed;\n+    }\n+\n+    private void resetLimits() {\n+        userChapterCount.clear();\n+    }\n+\n+    private boolean isNewDay() {\n+        return LocalDate.now(ZoneId.systemDefault()).isAfter(yesterday);\n+    }\n+\n+    private void updateVipList() {\n+        try (Stream<String> lines = Files.lines(Paths.get(telegramDir + \"/\" + vipFile))) {\n+            vipList = lines.collect(Collectors.toList());\n+        } catch (IOException e) {\n+            GrabberUtils.err(\"VIP file not found!\");\n+        }\n+    }\n+\n+    private boolean isVip(int userId) {\n+        return vipList.contains(String.valueOf(userId));\n+    }\n+\n+}"
  },
  {
    "sha": "6f1b45fda704c89422112e10459f303c71ab2a95",
    "filename": "src/main/java/grabber/Accounts.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Accounts.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Accounts.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/Accounts.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,68 @@\n+package grabber;\n+\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+\n+import java.io.*;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class Accounts {\n+    private final static String accountsFile = GrabberUtils.getCurrentPath() + \"/accounts.json\";\n+    private static Accounts accounts;\n+    private Map<String, Map<String, String>> domainCookies = new HashMap<>();\n+\n+    private Accounts() { }\n+\n+    public static Accounts getInstance() {\n+        if(accounts == null) {\n+            accounts = new Accounts();\n+            accounts.readAccountsFile();\n+        }\n+        return accounts;\n+    }\n+\n+    private void readAccountsFile() {\n+        try (BufferedReader reader = new BufferedReader(new FileReader(accountsFile))) {\n+            JSONArray accounts = (JSONArray) new JSONParser().parse(reader);\n+            for (Object loadedAccount: accounts) {\n+                JSONObject accountObj = (JSONObject) loadedAccount;\n+                String domain = (String) accountObj.get(\"domain\");\n+                HashMap cookies = (HashMap<String, String>) accountObj.get(\"cookies\");\n+                domainCookies.put(domain, cookies);\n+            }\n+        } catch (IOException e) {\n+            GrabberUtils.err(\"No accounts file found.\");\n+        } catch (ParseException e) {\n+            GrabberUtils.err(\"Could not parse accounts file.\", e);\n+        }\n+    }\n+\n+    public void writeAccountsFile() {\n+        try(BufferedWriter writer = new BufferedWriter(new FileWriter(accountsFile))) {\n+            JSONArray accountArray = new JSONArray();\n+            domainCookies.forEach((domain, cookies) -> {\n+                JSONObject accountObj = new JSONObject();\n+                accountObj.put(\"domain\", domain);\n+                accountObj.put(\"cookies\", new JSONObject(cookies));\n+                accountArray.add(accountObj);\n+            });\n+            writer.write(accountArray.toJSONString());\n+        } catch(IOException e) {\n+            GrabberUtils.err(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void addAccount(String domain, Map<String, String> cookies) {\n+        domainCookies.put(domain, cookies);\n+        writeAccountsFile();\n+    }\n+\n+    public Map<String, String> getCookiesForDomain(String domain) {\n+        Map<String, String> cookies = domainCookies.get(domain);\n+        if (cookies != null) return cookies;\n+        return new HashMap<>();\n+    }\n+}"
  },
  {
    "sha": "51ef8db7eef27d066cdc113ec1028a5adc505300",
    "filename": "src/main/java/grabber/CLI.java",
    "status": "modified",
    "additions": 6,
    "deletions": 8,
    "changes": 14,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/CLI.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/CLI.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/CLI.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -1,5 +1,6 @@\n package grabber;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -10,7 +11,7 @@\n     /**\n      * Downloads a novel fully automatic based on CLI input.\n      */\n-    public static Novel downloadNovel(Map<String, List<String>> params) {\n+    public static Novel downloadNovel(Map<String, List<String>> params) throws ClassNotFoundException, IOException, InterruptedException {\n         Novel novel = new NovelBuilder().fromCLI(params).build();\n         novel.check();\n         NovelMetadata metadata = novel.metadata;\n@@ -34,13 +35,10 @@ public static Novel downloadNovel(Map<String, List<String>> params) {\n             novel.lastChapter = novel.chapterList.size();\n         }\n \n-        try {\n-            novel.downloadChapters();\n-        } catch (Exception e) {\n-            GrabberUtils.err(e.getMessage(), e);\n-        }\n+        novel.downloadChapters();\n+\n         // Change bookTitle temporarily to include chapter names\n-        // when creating the EPUB for system.library auto grabs\n+        // when creating the EPUB for library auto grabs\n         String oldBookTitle = metadata.getTitle();\n         if(novel.window.equals(\"checker\")) {\n             metadata.setTitle(novel.firstChapter +\"-\"+ novel.lastChapter +\"-\"+ metadata.getTitle());\n@@ -77,7 +75,7 @@ public static Novel downloadNovel(Map<String, List<String>> params) {\n \n     public static String[] createArgsFromString(String cliString) {\n         List<String> args = new ArrayList<>();\n-        for (String s : cliString.split(\" (?=(([^'\\\"]*['\\\"]){2})*[^'\\\"]*$)\")) {\n+        for (String s : cliString.split(\" (?=(([^\\\"]*[\\\"]){2})*[^\\\"]*$)\")) {\n             if(s.startsWith(\"\\\"\")) s = s.substring(1, s.lastIndexOf(\"\\\"\"));\n             args.add(s);\n         }"
  },
  {
    "sha": "884138316f33604ae9865bd2510930684ba36b72",
    "filename": "src/main/java/grabber/Chapter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Chapter.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Chapter.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/Chapter.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -131,7 +131,7 @@ private String cleanContent(Element chapterContainer, boolean displayChapterTitl\n                 settings);\n \n         if(displayChapterTitle) {\n-            chapterString = \"<span style=\\\"font-weight: 700; text-decoration: underline;\\\">\" + name + \"</span>\" + EPUB.NL + chapterString;\n+            chapterString = \"<span style=\\\"font-weight: 700; text-decoration: underline;\\\">\" + name + \"</span>\\n\" + chapterString;\n         }\n         return chapterString;\n     }"
  },
  {
    "sha": "2feed2d442281a2ddf763b3c30dcc9e528481594",
    "filename": "src/main/java/grabber/Driver.java",
    "status": "modified",
    "additions": 12,
    "deletions": 7,
    "changes": 19,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Driver.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Driver.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/Driver.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -1,20 +1,21 @@\n package grabber;\n \n+import com.gargoylesoftware.htmlunit.BrowserVersion;\n import io.github.bonigarcia.wdm.WebDriverManager;\n import org.openqa.selenium.WebDriver;\n import org.openqa.selenium.chrome.ChromeDriver;\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.openqa.selenium.edge.EdgeDriver;\n import org.openqa.selenium.firefox.FirefoxDriver;\n import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.htmlunit.HtmlUnitDriver;\n import org.openqa.selenium.ie.InternetExplorerDriver;\n import org.openqa.selenium.opera.OperaDriver;\n import org.openqa.selenium.support.ui.WebDriverWait;\n-import system.init;\n+import system.Config;\n \n import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.logging.Level;\n \n /**\n  * Selenium driver handler\n@@ -24,17 +25,17 @@\n     public WebDriver driver;\n     public WebDriverWait wait;\n \n-    public Driver(String window, String browser) {\n-        driverSetup(window, browser);\n+    public Driver(String window) {\n+        driverSetup(window);\n         wait = new WebDriverWait(driver, 30);\n     }\n \n     /**\n      * Selenium driver creation for selected browser.\n      */\n-    private void driverSetup(String window, String browser) {\n+    private void driverSetup(String window) {\n         GrabberUtils.info(window, \"Starting browser...\");\n-        switch (browser) {\n+        switch (Config.getInstance().getBrowser()) {\n             case \"Chrome\":\n                 WebDriverManager.chromedriver().setup();\n                 ChromeOptions chromeOptions = new ChromeOptions();\n@@ -62,6 +63,10 @@ private void driverSetup(String window, String browser) {\n                 WebDriverManager.iedriver().setup();\n                 driver = new InternetExplorerDriver();\n                 break;\n+            case \"Headless\":\n+                driver = new HtmlUnitDriver(BrowserVersion.BEST_SUPPORTED);\n+                java.util.logging.Logger.getLogger(\"com.gargoylesoftware\").setLevel(Level.OFF);\n+                break;\n         }\n     }\n "
  },
  {
    "sha": "df10530ed7c3e0b83cd09aa8c291724500324fea",
    "filename": "src/main/java/grabber/GrabberUtils.java",
    "status": "modified",
    "additions": 99,
    "deletions": 13,
    "changes": 112,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/GrabberUtils.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/GrabberUtils.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/GrabberUtils.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -1,28 +1,28 @@\n package grabber;\r\n \r\n+import grabber.sources.Source;\r\n import org.jsoup.HttpStatusException;\r\n import org.jsoup.Jsoup;\r\n import org.jsoup.nodes.Document;\r\n import org.jsoup.nodes.Element;\r\n import system.init;\r\n \r\n import javax.imageio.ImageIO;\r\n-import javax.swing.*;\r\n import java.awt.*;\r\n import java.awt.image.BufferedImage;\r\n import java.io.*;\r\n import java.net.*;\r\n+import java.time.ZonedDateTime;\r\n+import java.time.format.DateTimeFormatter;\r\n+import java.time.temporal.ChronoUnit;\r\n import java.util.ArrayList;\r\n+import java.util.Comparator;\r\n import java.util.List;\r\n \r\n /**\r\n  * Collection of shared utility methods\r\n  */\r\n public class GrabberUtils {\r\n-    static void createDir(String filepath) {\r\n-        File dir = new File(filepath);\r\n-        if (!dir.exists()) dir.mkdirs();\r\n-    }\r\n \r\n     public static String getFilenameFromUrl(String urlString) {\r\n         try {\r\n@@ -97,14 +97,6 @@ public static String getFileExtension(String filename) {\n         else return null;\r\n     }\r\n \r\n-    public static void sleep(int waitTime) {\r\n-        try {\r\n-            Thread.sleep(waitTime);\r\n-        } catch (InterruptedException ex) {\r\n-            Thread.currentThread().interrupt();\r\n-        }\r\n-    }\r\n-\r\n     static String getFileName(String imageName) {\r\n         if (imageName != null && imageName.contains(\"/\"))\r\n             imageName = imageName.substring(imageName.lastIndexOf(\"/\") + 1);\r\n@@ -138,10 +130,12 @@ public static void info(String window, String msg) {\n     }\r\n \r\n     public static void err(String msg) {\r\n+        log(msg);\r\n         System.err.println(\"[ERROR]\" + msg);\r\n     }\r\n     public static void err(String window, String msg) {\r\n         System.err.println(\"[ERROR]\" + msg);\r\n+        log(msg);\r\n         if(init.gui != null && window != null) {\r\n             init.gui.appendText(window,\"[ERROR]\" + msg);\r\n         }\r\n@@ -150,11 +144,17 @@ public static void err(String window, String msg) {\n     public static void err(String msg, Exception e) {\r\n         System.err.println(\"[ERROR]\" + msg);\r\n         e.printStackTrace();\r\n+        StringWriter errors = new StringWriter();\r\n+        e.printStackTrace(new PrintWriter(errors));\r\n+        log(errors.toString());\r\n     }\r\n \r\n     public static void err(String window, String msg, Exception e) {\r\n         System.err.println(\"[ERROR]\" + msg);\r\n         e.printStackTrace();\r\n+        StringWriter errors = new StringWriter();\r\n+        e.printStackTrace(new PrintWriter(errors));\r\n+        log(errors.toString());\r\n         if(init.gui != null && window != null) {\r\n             init.gui.appendText(window,\"[ERROR]\" + msg);\r\n         }\r\n@@ -195,4 +195,90 @@ public static String getHTMLErrMsg(HttpStatusException httpEr) {\n         return errorMsg;\r\n     }\r\n \r\n+    /**\r\n+     * Returns found sources.\r\n+     * @return {@code ArrayList<Source>} or empty list\r\n+     */\r\n+    public static List<Source> getSources() {\r\n+        List<Source> sources = new ArrayList<>();\r\n+        try {\r\n+            String curPath = getCurrentPath();\r\n+            // Create ClassLoader\r\n+            File dir = new File(curPath + \"/sources\");\r\n+            URL loadPath = dir.toURI().toURL();\r\n+            URL[] urls = new URL[]{loadPath};\r\n+            URLClassLoader classLoader = new URLClassLoader(urls);\r\n+            // Loop through class files in source folder and load them via ClassLoader\r\n+            for (File file: getSourceFiles(curPath + \"/sources/grabber/sources\")) {\r\n+                // Ignore source interface and manual files\r\n+                if(file.getName().equals(\"Source.class\")\r\n+                        || file.getName().equals(\"manualSource.class\")\r\n+                        || file.getName().equals(\"example_com.class\")) continue;\r\n+                // Create a temporary Source object of interface to get name of host/source\r\n+                String className = \"grabber.sources.\" + file.getName().replace(\".class\",\"\");\r\n+                sources.add((Source) classLoader.loadClass(className).getConstructor().newInstance());\r\n+            }\r\n+            sources.sort(Comparator.comparing(Source::getName));\r\n+            return sources;\r\n+        } catch (Exception e) {\r\n+            err(e.getMessage(), e);\r\n+            // Return list of added entries up until exception / empty list\r\n+            return sources;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns source files inside a directory.\r\n+     * @param pathname A pathname String\r\n+     * @return {@code File[]} with .class files or empty array\r\n+     */\r\n+    private static File[] getSourceFiles(String pathname) {\r\n+        try {\r\n+            File dir = new File(pathname);\r\n+            FilenameFilter filter = (file, name) -> name.endsWith(\".class\");\r\n+            return dir.listFiles(filter);\r\n+        } catch (Exception e) {\r\n+            err(e.getMessage(), e);\r\n+            return new File[0];\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the current working directory.\r\n+     * @return Absolute path as {@code String} or \".\"\r\n+     */\r\n+    public static String getCurrentPath() {\r\n+        try {\r\n+            return new File(init.class.getProtectionDomain().getCodeSource().getLocation().toURI())\r\n+                    .getParentFile()\r\n+                    .getPath();\r\n+        } catch (URISyntaxException e) {\r\n+            err(e.getMessage(), e);\r\n+            return \".\";\r\n+        }\r\n+    }\r\n+\r\n+    public static void createDir(String filepath) {\r\n+        File dir = new File(filepath);\r\n+        if (!dir.exists()) dir.mkdirs();\r\n+    }\r\n+\r\n+    public static void sleep(int waitTime) {\r\n+        try {\r\n+            Thread.sleep(waitTime);\r\n+        } catch (InterruptedException ex) {\r\n+            Thread.currentThread().interrupt();\r\n+        }\r\n+    }\r\n+\r\n+    public static void log(String msg) {\r\n+        String time = ZonedDateTime.now().truncatedTo(ChronoUnit.SECONDS).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);\r\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"log.txt\", true))) {\r\n+            writer.write(\"[\" + time + \"] \" + msg);\r\n+            writer.write(\"\\n\");\r\n+        } catch (IOException e) {\r\n+            err(e.getMessage(), e);\r\n+        }\r\n+    }\r\n+\r\n }\r"
  },
  {
    "sha": "ed624df0da909c24f030a01a114b18944148e72d",
    "filename": "src/main/java/grabber/Novel.java",
    "status": "modified",
    "additions": 50,
    "deletions": 21,
    "changes": 71,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Novel.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/Novel.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/Novel.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -1,7 +1,11 @@\n package grabber;\n \n+import grabber.formats.EPUB;\n+import grabber.formats.PDF;\n+import grabber.formats.Text;\n import grabber.sources.Source;\n import org.jsoup.nodes.Document;\n+import system.Config;\n import system.init;\n import java.awt.image.BufferedImage;\n import java.util.*;\n@@ -10,7 +14,7 @@\n     public Source source;\n     public Driver headlessDriver;\n     public Document tableOfContent;\n-    public Map<String, String> cookies;\n+    public Map<String, String> cookies = new HashMap<>();\n     public List<Chapter> chapterList;\n     public List<Chapter> successfulChapters;\n     public List<Chapter> failedChapters;\n@@ -35,7 +39,6 @@\n     public String saveLocation;\n     public String window;\n     public String browser;\n-    public String hostname;\n     public String novelLink;\n     public String nextChapterBtn = \"NOT_SET\";\n     public String nextChapterURL;\n@@ -69,26 +72,25 @@ public static NovelBuilder modifier(Novel novel) {\n     public void check() {\n         if(source != null) {\n             if(useAccount) {\n-                try {\n-                    cookies = source.getLoginCookies();\n-                } catch (UnsupportedOperationException e) {\n-                    GrabberUtils.err(window,\"Source does not support login.\", e);\n-                }\n+                GrabberUtils.info(\"Using account\");\n+                cookies = Accounts.getInstance().getCookiesForDomain(source.getName());\n             }\n             chapterList = source.getChapterList();\n             // Are created in GUI for manual\n             if(!window.equals(\"manual\")) {\n                 blacklistedTags = source.getBlacklistedTags();\n                 metadata = source.getMetadata();\n             }\n+        } else {\n+            GrabberUtils.err(window, \"No source!\");\n         }\n     }\n \n     /**\n      * Downloads chapters from list.\n-     * @throws Exception on stopped grabbing.\n+     * @throws InterruptedException on stopped grabbing.\n      */\n-    public void downloadChapters() throws Exception {\n+    public void downloadChapters() throws InterruptedException{\n         GrabberUtils.info(window,\"Starting download...\");\n         // Preparation\n         if(init.gui != null) {\n@@ -101,8 +103,9 @@ public void downloadChapters() throws Exception {\n         if(reverseOrder) Collections.reverse(chapterList);\n         // Download handling\n         for(int i = firstChapter-1; i < lastChapter; i++) { // -1 since chapter numbers start at 1\n+            // replace with actual interrupted\n             if(killTask) {\n-                throw new Exception(\"Download stopped.\");\n+                throw new InterruptedException(\"Download stopped.\");\n             }\n             chapterList.get(i).saveChapter(this);\n             if(init.gui != null) {\n@@ -122,7 +125,7 @@ public void downloadChapters() throws Exception {\n     public void processChaptersToChapters(String firstChapterURL,\n                                           String lastChapterURL,\n                                           String nextChapterBtn,\n-                                          String chapterNumberString) throws Exception {\n+                                          String chapterNumberString) throws InterruptedException {\n         GrabberUtils.info(window, \"Connecting...\");\n         init.gui.setMaxProgress(window, 9001);\n \n@@ -131,14 +134,12 @@ public void processChaptersToChapters(String firstChapterURL,\n         int chapterNumber = 1;\n         if(chapterNumberString != null && !chapterNumberString.isEmpty()) chapterNumber = Integer.parseInt(chapterNumberString);\n \n-        if (useHeadless) headlessDriver = new Driver(window, browser);\n-\n         chapterList = new ArrayList<>();\n         while (true) {\n+            // replace with actual interrupted\n             if(killTask) {\n-                throw new Exception(\"Grabbing stopped.\");\n+                throw new InterruptedException(\"Download stopped.\");\n             }\n-\n             Chapter currentChapter = new Chapter(\"Chapter \" + chapterNumber++, nextChapterURL);\n             chapterList.add(currentChapter);\n             currentChapter.saveChapter(this);\n@@ -159,7 +160,7 @@ public void processChaptersToChapters(String firstChapterURL,\n         }\n     }\n \n-    public void retry() throws Exception {\n+    public void retry() throws InterruptedException {\n         GrabberUtils.info(window,\"Retrying failed chapters...\");\n \n         if(init.gui != null) {\n@@ -178,8 +179,9 @@ public void retry() throws Exception {\n             if((telegramChatId) != 0 && (i % 10 == 0 || i == failedChapters.size()-1)) {\n                 init.telegramBot.updateProgress(telegramChatId, i, failedChapters.size());\n             }\n+            // replace with actual interrupted\n             if(killTask) {\n-                throw new Exception(\"Download stopped.\");\n+                throw new InterruptedException(\"Download stopped.\");\n             }\n             GrabberUtils.sleep(waitTime);\n         }\n@@ -190,8 +192,21 @@ public void retry() throws Exception {\n         } else {\n             // Output EPUB if at least one chapter was downloaded\n             if(!successfulChapters.isEmpty()) {\n-                EPUB epub = new EPUB(this);\n-                epub.writeEpub();\n+                // EPUB\n+                if(Config.getInstance().getOutputFormat() == 0) {\n+                    EPUB book = new EPUB(this);\n+                    book.write();\n+                }\n+                // Text\n+                if(Config.getInstance().getOutputFormat() == 1) {\n+                    Text book = new Text(this);\n+                    book.write();\n+                }\n+                // PDF\n+                if(Config.getInstance().getOutputFormat() == 2) {\n+                    PDF book = new PDF(this);\n+                    book.write();\n+                }\n             }\n         }\n     }\n@@ -240,8 +255,22 @@ public void output() {\n         } else {\n             // Output EPUB if at least one chapter was downloaded\n             if(!successfulChapters.isEmpty()) {\n-                EPUB epub = new EPUB(this);\n-                epub.writeEpub();\n+                // Make interface\n+                // EPUB\n+                if(Config.getInstance().getOutputFormat() == 0) {\n+                    EPUB book = new EPUB(this);\n+                    book.write();\n+                }\n+                // Text\n+                if(Config.getInstance().getOutputFormat() == 1) {\n+                    Text book = new Text(this);\n+                    book.write();\n+                }\n+                // PDF\n+                if(Config.getInstance().getOutputFormat() == 2) {\n+                    PDF book = new PDF(this);\n+                    book.write();\n+                }\n             }\n         }\n     }"
  },
  {
    "sha": "dd9b1b9ca005379cd76394c504084451627ab14f",
    "filename": "src/main/java/grabber/NovelBuilder.java",
    "status": "modified",
    "additions": 48,
    "deletions": 23,
    "changes": 71,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/NovelBuilder.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/NovelBuilder.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/NovelBuilder.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -1,11 +1,11 @@\n package grabber;\n \n import grabber.sources.Source;\n-import system.data.accounts.Account;\n-import system.data.accounts.Accounts;\n-import system.init;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.nio.file.Path;\n@@ -31,8 +31,9 @@ public NovelBuilder(Novel novel) {\n     /**\n      * Set novel options from a given CLI string.\n      */\n-    public NovelBuilder fromCLI(Map<String, List<String>> params) {\n+    public NovelBuilder fromCLI(Map<String, List<String>> params) throws IOException, ClassNotFoundException {\n         novel.novelLink = params.get(\"link\").get(0);\n+        novel.source = setSource(novel.novelLink).novel.source; //It's ugly, I know\n         novel.window = \"auto\";\n         novel.displayChapterTitle = params.containsKey(\"displayTitle\");\n         novel.reverseOrder = params.containsKey(\"invertOrder\");\n@@ -55,6 +56,9 @@ public NovelBuilder fromCLI(Map<String, List<String>> params) {\n                 case \"ie\":\n                     novel.browser = \"IE\";\n                     break;\n+                case \"headless\":\n+                    novel.browser = \"Headless\";\n+                    break;\n             }\n             if(params.get(\"headless\").size() > 1) {\n                 novel.headlessGUI = params.get(\"headless\").get(1).toLowerCase().equals(\"gui\");\n@@ -89,7 +93,6 @@ public NovelBuilder fromCLI(Map<String, List<String>> params) {\n     }\n \n     public Novel build() {\n-        setSource();\n         return novel;\n     }\n     public NovelBuilder novelLink(String novelLink) {\n@@ -154,30 +157,52 @@ public NovelBuilder blacklistedTags(List<String> blacklistedTags) {\n         return this;\n     }\n \n-    private void setSource() {\n+    public NovelBuilder setSource() throws ClassNotFoundException, IOException {\n+        Source source;\n         try {\n-            String sourcesFolder = new File(init.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParentFile().getPath() + \"/sources\";\n+            String sourcesFolder = GrabberUtils.getCurrentPath() + \"/sources\";\n             File dir = new File(sourcesFolder);\n             URL loadPath = dir.toURI().toURL();\n             URL[] urls = new URL[]{loadPath};\n             URLClassLoader classLoader = new URLClassLoader(urls);\n \n-            if(novel.window.equals(\"manual\")) {\n-                novel.source = (Source) classLoader.loadClass(\"grabber.sources.manualSource\").getConstructor(Novel.class).newInstance(novel);\n-            }\n-            if(novel.window.equals(\"auto\") || novel.window.equals(\"checker\")) {\n-                String domain = GrabberUtils.getDomainName(novel.novelLink).replaceAll(\"[^A-Za-z0-9]\", \"_\");\n-                // Supported sources have their domain name as their class name and java does not allow class names\n-                // to start with digits, which is possible for domain names, we need to add a 'n' for number in front.\n-                if(domain.substring(0, 1).matches(\"\\\\d\")) domain = \"n\" + domain;\n-                novel.source = (Source) classLoader.loadClass(\"grabber.sources.\"+domain).getConstructor(Novel.class).newInstance(novel);\n-            }\n-        } catch (Exception e) {\n-            GrabberUtils.err(novel.window, \"Host not supported: \" + GrabberUtils.getDomainName(novel.novelLink), e);\n-            if(init.telegramBot != null) {\n-                init.telegramBot.sendMsg(novel.telegramChatId,\"Host not supported: \" + GrabberUtils.getDomainName(novel.novelLink));\n-            }\n-            novel.source = null;\n+            source = (Source) classLoader.loadClass(\"grabber.sources.manualSource\")\n+                    .getConstructor(Novel.class)\n+                    .newInstance(novel);\n+        } catch (ClassNotFoundException e) {\n+            throw new ClassNotFoundException(\"Manual source not found.\", e);\n+        } catch (InstantiationException | InvocationTargetException | NoSuchMethodException |\n+                MalformedURLException | IllegalAccessException e) {\n+            throw new IOException(\"Could not access or load source file(s)\", e);\n         }\n+        novel.source = source;\n+        return this;\n+    }\n+\n+    public NovelBuilder setSource(String hostUrl) throws ClassNotFoundException, IOException {\n+        Source source;\n+        try {\n+            String sourcesFolder = GrabberUtils.getCurrentPath() + \"/sources\";\n+            File dir = new File(sourcesFolder);\n+            URL loadPath = dir.toURI().toURL();\n+            URL[] urls = new URL[]{loadPath};\n+            URLClassLoader classLoader = new URLClassLoader(urls);\n+\n+            String domain = GrabberUtils.getDomainName(hostUrl)\n+                    .replaceAll(\"[^A-Za-z0-9]\", \"_\");\n+            // Supported sources have their domain name as their class name and java does not allow class names\n+            // to start with digits, which is possible for domain names, we need to add a 'n' for number in front.\n+            if (domain.substring(0, 1).matches(\"\\\\d\")) domain = \"n\" + domain;\n+            source = (Source) classLoader.loadClass(\"grabber.sources.\" + domain)\n+                    .getConstructor(Novel.class)\n+                    .newInstance(novel);\n+        } catch (ClassNotFoundException e) {\n+            throw new ClassNotFoundException(\"Host not supported: \" + GrabberUtils.getDomainName(novel.novelLink), e);\n+        } catch (InstantiationException | InvocationTargetException | NoSuchMethodException |\n+                MalformedURLException | IllegalAccessException e) {\n+            throw new IOException(\"Could not access or load source file(s)\", e);\n+        }\n+        novel.source = source;\n+        return this;\n     }\n }"
  },
  {
    "sha": "cb2e8f946938429ae559905d84a42e1027edaf9e",
    "filename": "src/main/java/grabber/NovelMetadata.java",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/NovelMetadata.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/NovelMetadata.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/NovelMetadata.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -2,6 +2,7 @@\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n+import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -11,6 +12,7 @@\n     private String author = \"Unknown\";\n     private String description = \"\";\n     private String coverFormat = \"png\";\n+    private String coverName = \"cover\";\n     private List<String> subjects = new ArrayList<>();\n     private BufferedImage bufferedCover;\n \n@@ -21,6 +23,20 @@ public NovelMetadata() {\n             GrabberUtils.err(e.getMessage(), e);\n         }\n     }\n+    /**\n+     * Writes BufferedImage cover to file.\n+     */\n+    public void saveCover(String destDir) {\n+        // Save cover\n+        File outputfile = new File(destDir + coverName + \".\" + coverFormat);\n+        outputfile.mkdirs();\n+        try {\n+            // cover name + file extension\n+            ImageIO.write(getBufferedCover(), getCoverFormat(), outputfile);\n+        } catch (IOException e) {\n+            GrabberUtils.err(\"Could not save cover.\", e);\n+        }\n+    }\n \n     public String getTitle() {\n         return title;\n@@ -34,6 +50,9 @@ public String getDescription() {\n     public String getCoverFormat() {\n         return coverFormat;\n     }\n+    public String getCoverName() {\n+        return coverName;\n+    }\n     public List<String> getSubjects() {\n         return subjects;\n     }\n@@ -50,6 +69,12 @@ public void setAuthor(String author) {\n     public void setDescription(String description) {\n         this.description = description.isEmpty() ? \"\": description;\n     }\n+    public void setCoverFormat(String coverFormat) {\n+        this.coverFormat = coverFormat;\n+    }\n+    public void setCoverName(String coverName) {\n+        this.coverName = coverName;\n+    }\n     public void setSubjects(List<String> subjects) {\n         this.subjects = subjects;\n     }\n@@ -68,7 +93,6 @@ public void setBufferedCover(String coverURL) {\n             }\n         }\n     }\n-\n     public void setBufferedCover(BufferedImage coverImage, String coverFormat) {\n         this.bufferedCover = coverImage;\n         this.coverFormat = coverFormat;"
  },
  {
    "sha": "3b6a979a41b4ac526939891f9f5d836630df57ae",
    "filename": "src/main/java/grabber/formats/EPUB.java",
    "status": "renamed",
    "additions": 42,
    "deletions": 22,
    "changes": 64,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/formats/EPUB.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/formats/EPUB.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/formats/EPUB.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -1,12 +1,16 @@\n-package grabber;\r\n-import system.data.Settings;\r\n+package grabber.formats;\r\n+import grabber.Chapter;\r\n+import grabber.GrabberUtils;\r\n+import grabber.Novel;\r\n+import grabber.NovelMetadata;\r\n+import nl.siegmann.epublib.epub.EpubReader;\r\n+import system.Config;\r\n \r\n import nl.siegmann.epublib.domain.Author;\r\n import nl.siegmann.epublib.domain.Book;\r\n import nl.siegmann.epublib.domain.Metadata;\r\n import nl.siegmann.epublib.domain.Resource;\r\n import nl.siegmann.epublib.epub.EpubWriter;\r\n-import system.init;\r\n \r\n import javax.imageio.ImageIO;\r\n import java.awt.image.BufferedImage;\r\n@@ -30,27 +34,41 @@\n             \"</head>\" + NL +\r\n             \"<body>\" + NL;\r\n     static final String htmlFoot = \"</body>\" + NL + \"</html>\";\r\n-    private final Novel novel;\r\n+    private Novel novel;\r\n     private final NovelMetadata novelMetadata;\r\n-    private final Book book;\r\n+    private Book book;\r\n \r\n     public EPUB(Novel novel) {\r\n         this.novel = novel;\r\n         this.novelMetadata = novel.metadata;\r\n-        book = new Book();\r\n-        try {\r\n-            book.getResources().add(new Resource(getClass().getResourceAsStream(\"/default.css\"), \"default.css\"));\r\n-        } catch (IOException e) {\r\n-            GrabberUtils.err(novel.window, \"Could not add default.css file to EPUB. \"+e.getMessage(), e);\r\n+        // Library novels try to update existing files\r\n+        if (novel.window.equals(\"checker\")) {\r\n+            try {\r\n+                book = readOldFile();\r\n+            } catch (IOException e) {\r\n+                GrabberUtils.err(\"Could not read old book file.\");\r\n+                GrabberUtils.info(\"Creating new file.\");\r\n+            }\r\n+        }\r\n+        if (book == null) {\r\n+            book = new Book();\r\n+            try {\r\n+                book.getResources().add(new Resource(getClass().getResourceAsStream(\"/default.css\"), \"default.css\"));\r\n+            } catch (IOException e) {\r\n+                GrabberUtils.err(novel.window, \"Could not add default.css file to EPUB. \" + e.getMessage(), e);\r\n+            }\r\n         }\r\n     }\r\n \r\n-    public void writeEpub() {\r\n+    public void write() {\r\n         // Order is important\r\n         addMetadata();\r\n         addCover();\r\n-        addToc();\r\n-        if(!novel.noDescription && !novelMetadata.getDescription().isEmpty()) addDesc();\r\n+        // Not re-adding for existing epubs\r\n+        if (!novel.window.equals(\"checker\")) {\r\n+            addToc();\r\n+            if(!novel.noDescription && !novelMetadata.getDescription().isEmpty()) addDesc();\r\n+        }\r\n         if (novel.getImages) addImages();\r\n         addChapters();\r\n \r\n@@ -60,13 +78,21 @@ public void writeEpub() {\n         try {\r\n             EpubWriter epubWriter = new EpubWriter();\r\n             epubWriter.write(book, new FileOutputStream(novel.saveLocation + \"/\" + epubFilename));\r\n+            novel.epubFilename = epubFilename;\r\n+            GrabberUtils.info(\"Output: \" + novel.saveLocation+\"/\"+ epubFilename);\r\n         } catch (IOException e) {\r\n             GrabberUtils.err(novel.window, \"Could not write EPUB. \"+e.getMessage(), e);\r\n         }\r\n-        novel.epubFilename = epubFilename;\r\n-        GrabberUtils.info(\"Output: \" + novel.saveLocation+\"/\"+ epubFilename);\r\n     }\r\n \r\n+    public Book readOldFile() throws IOException {\r\n+        File epubFile = new File(novel.saveLocation + \"/\" + setFilename());\r\n+        InputStream inputStream = new FileInputStream(epubFile);\r\n+        Book oldBook = new EpubReader().readEpub(inputStream, \"UTF-8\");\r\n+        return oldBook;\r\n+    }\r\n+\r\n+\r\n     private void addImages() {\r\n         for (Map.Entry<String, BufferedImage> entry : novel.images.entrySet()) {\r\n             try {\r\n@@ -98,21 +124,15 @@ private void addChapters() {\n \r\n     private String setFilename() {\r\n         String epubFilename = \"Unknown.epub\";\r\n-        switch (Settings.getInstance().getFilenameFormat()) {\r\n+        switch (Config.getInstance().getFilenameFormat()) {\r\n             case 0:\r\n                 epubFilename = novelMetadata.getAuthor() + \" - \" + novelMetadata.getTitle() + \".epub\";\r\n-                if(novel.window.equals(\"checker\")) epubFilename =\r\n-                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+epubFilename.replaceAll(\" \",\"-\");\r\n                 break;\r\n             case 1:\r\n                 epubFilename = novelMetadata.getTitle() + \" - \" + novelMetadata.getAuthor() + \".epub\";\r\n-                if(novel.window.equals(\"checker\")) epubFilename =\r\n-                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+epubFilename.replaceAll(\" \",\"-\");\r\n                 break;\r\n             case 2:\r\n                 epubFilename = novelMetadata.getTitle() + \".epub\";\r\n-                if(novel.window.equals(\"checker\")) epubFilename =\r\n-                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+epubFilename.replaceAll(\" \",\"-\");\r\n                 break;\r\n         }\r\n         return epubFilename.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"\");\r",
    "previous_filename": "src/main/java/grabber/EPUB.java"
  },
  {
    "sha": "f48c3c4d05df6d8e0d019a53936952873deb5247",
    "filename": "src/main/java/grabber/formats/PDF.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/formats/PDF.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/formats/PDF.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/formats/PDF.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,109 @@\n+package grabber.formats;\n+\n+import com.openhtmltopdf.pdfboxout.PdfRendererBuilder;\n+import grabber.Chapter;\n+import grabber.GrabberUtils;\n+import grabber.Novel;\n+import grabber.NovelMetadata;\n+import org.jsoup.Jsoup;\n+import org.jsoup.helper.W3CDom;\n+import org.w3c.dom.Document;\n+import system.Config;\n+\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+public class PDF {\n+    private Novel novel;\n+    private NovelMetadata novelMetadata;\n+    static final String NL = System.getProperty(\"line.separator\");\n+    static final String htmlHead = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" + NL+\n+            \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\"\" + NL +\n+            \"  \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\" + NL +\n+            \"\\n\" +\n+            \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\" + NL +\n+            \"<head>\" + NL +\n+            \"<title></title>\" + NL +\n+            \"<style>\" +\n+            \"body {\" +\n+            \"font-size:1em;\" +\n+            \"line-height:1.25;\" +\n+            \"}\" +\n+            \"p {\" +\n+            \"text-indent:2em;\" +\n+            \"margin:0;\" +\n+            \"text-align: justify;\" +\n+            \"}\" +\n+            \"</style>\" + NL +\n+            \"</head>\" + NL +\n+            \"<body>\" + NL;\n+    static final String htmlFoot = \"</body>\" + NL + \"</html>\";\n+\n+    public PDF(Novel novel) {\n+        this.novel = novel;\n+        this.novelMetadata = novel.metadata;\n+    }\n+\n+    public void write() {\n+        String filename = setFilename();\n+        try (OutputStream os = new FileOutputStream(novel.saveLocation + \"/\" + filename)) {\n+            PdfRendererBuilder builder = new PdfRendererBuilder();\n+            builder.useFastMode();\n+            builder.withW3cDocument(buildHtmlFile(), novel.saveLocation);\n+            builder.toStream(os);\n+            builder.run();\n+            GrabberUtils.info(\"Output: \" + novel.saveLocation+\"/\"+ filename);\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not write PDF. \"+e.getMessage(), e);\n+        }\n+    }\n+\n+    private String setFilename() {\n+        String epubFilename = \"Unknown.pdf\";\n+        switch (Config.getInstance().getFilenameFormat()) {\n+            case 0:\n+                epubFilename = novelMetadata.getAuthor() + \" - \" + novelMetadata.getTitle() + \".pdf\";\n+                if(novel.window.equals(\"checker\")) epubFilename =\n+                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+epubFilename.replaceAll(\" \",\"-\");\n+                break;\n+            case 1:\n+                epubFilename = novelMetadata.getTitle() + \" - \" + novelMetadata.getAuthor() + \".pdf\";\n+                if(novel.window.equals(\"checker\")) epubFilename =\n+                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+epubFilename.replaceAll(\" \",\"-\");\n+                break;\n+            case 2:\n+                epubFilename = novelMetadata.getTitle() + \".pdf\";\n+                if(novel.window.equals(\"checker\")) epubFilename =\n+                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+epubFilename.replaceAll(\" \",\"-\");\n+                break;\n+        }\n+        return epubFilename.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"\");\n+    }\n+\n+    private String buildToc() {\n+        StringBuilder toc = new StringBuilder();\n+        toc.append(\"<bookmarks>\\n\");\n+        for (Chapter chapter: novel.successfulChapters) {\n+            toc.append(\"<bookmark name=\\\"\" + chapter.name + \"\\\" href=\\\"#\" + chapter.fileName + \"\\\" />\\n\");\n+        }\n+        toc.append(\"</bookmarks>\\n\");\n+\n+        return toc.toString();\n+    }\n+\n+    private Document buildHtmlFile() {\n+        StringBuilder html = new StringBuilder();\n+        html.append(htmlHead);\n+        html.append(buildToc());\n+        for (Chapter chapter: novel.successfulChapters) {\n+            html.append(\"<div id=\\\"\" + chapter.fileName + \"\\\" style=\\\"page-break-after:always;\\\">\" + chapter.chapterContent + \"</div>\\n\");\n+        }\n+        html.append(htmlFoot);\n+        org.jsoup.nodes.Document doc = Jsoup.parse(html.toString());\n+        return new W3CDom().fromJsoup(doc);\n+    }\n+}"
  },
  {
    "sha": "5353900f676ba0c6f4476cba704a6afb632b8733",
    "filename": "src/main/java/grabber/formats/Text.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/formats/Text.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/formats/Text.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/formats/Text.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,63 @@\n+package grabber.formats;\n+\n+import grabber.Chapter;\n+import grabber.GrabberUtils;\n+import grabber.Novel;\n+import grabber.NovelMetadata;\n+import org.jsoup.Jsoup;\n+import system.Config;\n+\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+\n+public class Text {\n+    private Novel novel;\n+    private final NovelMetadata novelMetadata;\n+\n+    public Text(Novel novel) {\n+        this.novel = novel;\n+        this.novelMetadata = novel.metadata;\n+    }\n+\n+    public void write() {\n+        String filename = setFilename();\n+        GrabberUtils.createDir(novel.saveLocation);\n+        try (Writer writer = new BufferedWriter(new OutputStreamWriter(\n+                new FileOutputStream(novel.saveLocation + \"/\" + filename), StandardCharsets.UTF_8))) {\n+            for(Chapter chapter: novel.successfulChapters) {\n+                // Preserve line breaks\n+                writer.write(Jsoup.parse(chapter.chapterContent).wholeText());\n+            }\n+\n+        } catch (UnsupportedEncodingException | FileNotFoundException e) {\n+            GrabberUtils.err(novel.window, e.getMessage(), e);\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not write file. \"+e.getMessage(), e);\n+        }\n+        novel.epubFilename = filename;\n+        GrabberUtils.info(\"Output: \" + novel.saveLocation+\"/\"+ filename);\n+    }\n+\n+    private String setFilename() {\n+        String filename = \"Unknown.txt\";\n+        switch (Config.getInstance().getFilenameFormat()) {\n+            case 0:\n+                filename = novelMetadata.getAuthor() + \" - \" + novelMetadata.getTitle() + \".txt\";\n+                if(novel.window.equals(\"checker\")) filename =\n+                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+filename.replaceAll(\" \",\"-\");\n+                break;\n+            case 1:\n+                filename = novelMetadata.getTitle() + \" - \" + novelMetadata.getAuthor() + \".txt\";\n+                if(novel.window.equals(\"checker\")) filename =\n+                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+filename.replaceAll(\" \",\"-\");\n+                break;\n+            case 2:\n+                filename = novelMetadata.getTitle() + \".txt\";\n+                if(novel.window.equals(\"checker\")) filename =\n+                        novel.firstChapter + \"-\"+ novel.lastChapter+\"-\"+filename.replaceAll(\" \",\"-\");\n+                break;\n+        }\n+        return filename.replaceAll(\"[\\\\\\\\/:*?\\\"<>|]\", \"\");\n+    }\n+\n+}"
  },
  {
    "sha": "58aa86a74c22d2b2bb6ff53c4b5e933336f451b3",
    "filename": "src/main/java/grabber/sources/Source.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/Source.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/Source.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/Source.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -5,9 +5,14 @@\n import org.jsoup.nodes.Element;\n \n import java.util.List;\n-import java.util.Map;\n \n public interface Source {\n+    String getName();\n+\n+    String getUrl();\n+\n+    boolean canHeadless();\n+\n     List<Chapter> getChapterList();\n \n     Element getChapterContent(Chapter chapter);\n@@ -16,5 +21,5 @@\n \n     List<String> getBlacklistedTags();\n \n-    Map<String, String> getLoginCookies() throws UnsupportedOperationException;\n+    String toString();\n }"
  },
  {
    "sha": "460f82500f730ff4ae401ff87258c05589f688c4",
    "filename": "src/main/java/grabber/sources/activetranslations_xyz.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/activetranslations_xyz.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/activetranslations_xyz.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/activetranslations_xyz.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,123 @@\n+package grabber.sources;\n+\n+import grabber.*;\n+import org.jsoup.HttpStatusException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Cookie;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.WebElement;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class activetranslations_xyz implements Source {\n+    private final String name = \"Active Translations\";\n+    private final String url = \"https://activetranslations.xyz/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n+    private Document toc;\n+\n+    public activetranslations_xyz() {\n+    }\n+\n+    public activetranslations_xyz(Novel novel) {\n+        this.novel = novel;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public List<Chapter> getChapterList() {\n+        List<Chapter> chapterList = new ArrayList();\n+        try {\n+            toc = Jsoup.connect(novel.novelLink)\n+                    .cookies(novel.cookies)\n+                    .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                    .get();\n+            Elements chapterLinks = toc.select(\".container .pt-cv-content-item\");\n+            for (Element chapterLink : chapterLinks) {\n+                chapterList.add(new Chapter(chapterLink.select(\".panel-title\").text(),\n+                        chapterLink.select(\".pt-cv-readmore\").attr(\"abs:href\")));\n+            }\n+        } catch (HttpStatusException httpEr) {\n+            GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not connect to webpage!\", e);\n+        }\n+        return chapterList;\n+    }\n+\n+    public Element getChapterContent(Chapter chapter) {\n+        Element chapterBody = new Element(\"div\");\n+        if (novel.headlessDriver == null) novel.headlessDriver = new Driver(novel.window);\n+        novel.headlessDriver.driver.navigate().to(chapter.chapterURL);\n+        novel.cookies.forEach((key, value) -> novel.headlessDriver.driver.manage().addCookie(new Cookie(key, value)));\n+        novel.headlessDriver.driver.navigate().to(chapter.chapterURL);\n+        novel.headlessDriver.driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n+        List<WebElement> paragraphs = novel.headlessDriver.driver.findElements(By.cssSelector(\".entry-content .row p\"));\n+        for (WebElement element: paragraphs) {\n+            Element para = new Element(\"p\");\n+            List<WebElement> spans = element.findElements(By.cssSelector(\"span\"));\n+\n+            if (spans.isEmpty()) {\n+                para.appendText(element.getText());\n+            } else {\n+                for (WebElement span: spans) {\n+                    Element ele = new Element(\"span\");\n+                    String before = ((JavascriptExecutor) novel.headlessDriver.driver)\n+                            .executeScript(\"return window.getComputedStyle(arguments[0], ':before').getPropertyValue('content');\", span)\n+                            .toString();\n+\n+                    String after = ((JavascriptExecutor) novel.headlessDriver.driver)\n+                            .executeScript(\"return window.getComputedStyle(arguments[0], ':after').getPropertyValue('content');\", span)\n+                            .toString();\n+                    after = after.substring(1, after.length()-1);\n+                    if (before.equals(\"none\")) before = \"\";\n+                    if (after.equals(\"none\")) after = \"\";\n+                    if (before.length() > 2) before = before.substring(1, before.length() - 1);\n+                    ele.appendText(before + \" \" + span.getText() + \" \" + after);\n+                    para.appendChild(ele);\n+                }\n+            }\n+            chapterBody.appendChild(para);\n+        }\n+        return chapterBody;\n+    }\n+\n+    public NovelMetadata getMetadata() {\n+        NovelMetadata metadata = new NovelMetadata();\n+\n+        if (toc != null) {\n+            Element title = toc.selectFirst(\".nv-page-title\");\n+\n+            metadata.setTitle(title != null ? title.text() : \"\");\n+        }\n+\n+        return metadata;\n+    }\n+\n+    public List<String> getBlacklistedTags() {\n+        List blacklistedTags = new ArrayList();\n+        return blacklistedTags;\n+    }\n+\n+}"
  },
  {
    "sha": "f2a76240e2f187d5dfa93c0b55f8a04d9c14eb24",
    "filename": "src/main/java/grabber/sources/alphapolis_co_jp.java",
    "status": "modified",
    "additions": 28,
    "deletions": 8,
    "changes": 36,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/alphapolis_co_jp.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/alphapolis_co_jp.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/alphapolis_co_jp.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -10,27 +10,49 @@\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n import org.openqa.selenium.By;\n+import org.openqa.selenium.Cookie;\n import org.openqa.selenium.WebElement;\n-import system.data.Settings;\n \n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n public class alphapolis_co_jp implements Source {\n-    private final Novel novel;\n+    private final String name = \"AlphaPolis\";\n+    private final String url = \"https://www.alphapolis.co.jp/novel/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n+    public alphapolis_co_jp() {\n+    }\n+\n     public alphapolis_co_jp(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n             toc = Jsoup.connect(novel.novelLink)\n+                    .cookies(novel.cookies)\n                     .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n                     .get();\n             Elements chapterLinks = toc.select(\".episodes a\");\n@@ -53,9 +75,11 @@ public Element getChapterContent(Chapter chapter) {\n \n     private Document getPageHeadless(String chapterURL) {\n         if (novel.headlessDriver == null) {\n-            novel.headlessDriver = new Driver(novel.window, novel.browser);\n+            novel.headlessDriver = new Driver(novel.window);\n         }\n         novel.headlessDriver.driver.navigate().to(chapterURL);\n+        novel.cookies.forEach((key, value) -> novel.headlessDriver.driver.manage().addCookie(new Cookie(key, value)));\n+        novel.headlessDriver.driver.navigate().to(chapterURL);\n         novel.headlessDriver.driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);\n         WebElement chapterElement = novel.headlessDriver.driver.findElement(By.cssSelector(\".novel-body\"));\n         String baseUrl = novel.headlessDriver.driver.getCurrentUrl().substring(0, GrabberUtils.ordinalIndexOf(novel.headlessDriver.driver.getCurrentUrl(), \"/\", 3) + 1);\n@@ -97,8 +121,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "d61190845c8e8abda9fb9e7ca39eb8d7b3068b64",
    "filename": "src/main/java/grabber/sources/asianhobbyist_com.java",
    "status": "modified",
    "additions": 25,
    "deletions": 8,
    "changes": 33,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/asianhobbyist_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/asianhobbyist_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/asianhobbyist_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -13,20 +13,41 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class asianhobbyist_com implements Source {\n-    private final Novel novel;\n+    private final String name = \"Asian Hobbyist\";\n+    private final String url = \"https://www.asianhobbyist.com/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public asianhobbyist_com(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public asianhobbyist_com() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Elements chapterLinks = toc.select(\".releases-wrap a.cell\");\n             for (Element chapterLink : chapterLinks) {\n                 chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n@@ -42,7 +63,7 @@ public asianhobbyist_com(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\".entry-content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -74,8 +95,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "ea897522287102026c9dd4d9f301d3c6a9a8e44d",
    "filename": "src/main/java/grabber/sources/asianovel_net.java",
    "status": "added",
    "additions": 131,
    "deletions": 0,
    "changes": 131,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/asianovel_net.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/asianovel_net.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/asianovel_net.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,131 @@\n+package grabber.sources;\n+\n+import grabber.Chapter;\n+import grabber.GrabberUtils;\n+import grabber.Novel;\n+import grabber.NovelMetadata;\n+import org.jsoup.HttpStatusException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class asianovel_net implements Source {\n+    private final String name = \"asianovel\";\n+    private final String url = \"https://www.asianovel.net/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n+    private Document toc;\n+\n+    public asianovel_net() {\n+    }\n+\n+    public asianovel_net(Novel novel) {\n+        this.novel = novel;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public List<Chapter> getChapterList() {\n+        List<Chapter> chapterList = new ArrayList();\n+        try {\n+            toc = Jsoup.connect(novel.novelLink)\n+                    .cookies(novel.cookies)\n+                    .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                    .get();\n+            Elements paginationLinks = toc.select(\".pagination li a\");\n+            if(paginationLinks != null &&!paginationLinks.isEmpty()) {\n+                String canonicalUrl = toc.selectFirst(\"link[rel=canonical]\").attr(\"abs:href\");\n+                Document temp = Jsoup.connect(canonicalUrl)\n+                        .cookies(novel.cookies)\n+                        .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                        .get();\n+                Elements chapterLinks = temp.select(\".summary-compact a\");\n+                for (Element chapterLink : chapterLinks) {\n+                    chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n+                }\n+                int lastPage = Integer.parseInt(paginationLinks.get(paginationLinks.size()-1).text());\n+                for(int i = 2; i <= lastPage; i++) {\n+                    temp = Jsoup.connect(canonicalUrl + \"page/\" + i)\n+                            .cookies(novel.cookies)\n+                            .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                            .get();\n+                    chapterLinks = temp.select(\".summary-compact a\");\n+                    for (Element chapterLink : chapterLinks) {\n+                        chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n+                    }\n+                }\n+            }\n+        } catch (HttpStatusException httpEr) {\n+            GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not connect to webpage!\", e);\n+        }\n+        return chapterList;\n+    }\n+\n+    public Element getChapterContent(Chapter chapter) {\n+        Element chapterBody = null;\n+        try {\n+            Document doc = Jsoup.connect(chapter.chapterURL)\n+                    .cookies(novel.cookies)\n+                    .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                    .get();\n+            chapterBody = doc.selectFirst(\"article\");\n+        } catch (HttpStatusException httpEr) {\n+            GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not connect to webpage!\", e);\n+        }\n+        return chapterBody;\n+    }\n+\n+    public NovelMetadata getMetadata() {\n+        NovelMetadata metadata = new NovelMetadata();\n+\n+        if (toc != null) {\n+            Element title = toc.selectFirst(\"meta[property=og:title]\");\n+            Element author = toc.selectFirst(\"meta[name=author]\");\n+            Element desc = toc.selectFirst(\".summary-classic__text:not(a)\");\n+            Element cover = toc.selectFirst(\"meta[property=og:image]\");\n+\n+            metadata.setTitle(title != null ? title.attr(\"content\") : \"\");\n+            metadata.setAuthor(author != null ? author.attr(\"content\") : \"\");\n+            metadata.setDescription(desc != null ? desc.text() : \"\");\n+            metadata.setBufferedCover(cover != null ? cover.attr(\"content\") : \"\");\n+\n+            Elements tags = toc.select(\".taxo .taxo__text\");\n+            List<String> subjects = new ArrayList<>();\n+            for (Element tag : tags) {\n+                subjects.add(tag.text());\n+            }\n+            metadata.setSubjects(subjects);\n+        }\n+\n+        return metadata;\n+    }\n+\n+    public List<String> getBlacklistedTags() {\n+        List blacklistedTags = new ArrayList();\n+        return blacklistedTags;\n+    }\n+\n+}"
  },
  {
    "sha": "42092fa9279622cd96c751c8a482c32751730bf9",
    "filename": "src/main/java/grabber/sources/babelnovel_com.java",
    "status": "added",
    "additions": 180,
    "deletions": 0,
    "changes": 180,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/babelnovel_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/babelnovel_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/babelnovel_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -0,0 +1,180 @@\n+package grabber.sources;\n+\n+import grabber.Chapter;\n+import grabber.GrabberUtils;\n+import grabber.Novel;\n+import grabber.NovelMetadata;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.jsoup.Connection;\n+import org.jsoup.HttpStatusException;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+\n+import javax.swing.text.html.parser.Parser;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class babelnovel_com implements Source {\n+    private final String name = \"BabelNovel\";\n+    private final String url = \"https://babelnovel.com/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n+    private Document toc;\n+    private String bookId;\n+    private String token;\n+\n+    public babelnovel_com() {\n+    }\n+\n+    public babelnovel_com(Novel novel) {\n+        this.novel = novel;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public List<Chapter> getChapterList() {\n+        List<Chapter> chapterList = new ArrayList();\n+        try {\n+\n+            toc = Jsoup.connect(novel.novelLink)\n+                    .cookies(novel.cookies)\n+                    .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                    .get();\n+            bookId = toc.selectFirst(\"a[data-bca-book-id]\").attr(\"data-bca-book-id\");\n+            String apiUrl = \"https://api.babelnovel.com/v1/books/\"+ bookId;\n+            String json;\n+            // With login, they put the token as a header\n+            if (!novel.cookies.isEmpty()) {\n+                token = novel.cookies.get(\"_bc_novel_token\");\n+                json = Jsoup.connect(apiUrl + \"/chapters?bookId=\" + bookId + \"&pageSize=9999&page=0&fields=id,name,canonicalName,isBought,isFree,isLimitFree&orderBy=asc\")\n+                        .ignoreContentType(true)\n+                        .header(\"token\", token)\n+                        .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                        .cookies(novel.cookies)\n+                        .method(Connection.Method.GET)\n+                        .execute()\n+                        .body();\n+            } else {\n+                json = Jsoup.connect(apiUrl + \"/chapters?bookId=\" + bookId + \"&pageSize=9999&page=0&fields=id,name,canonicalName,isBought,isFree,isLimitFree&orderBy=asc\")\n+                        .ignoreContentType(true)\n+                        .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                        .cookies(novel.cookies)\n+                        .method(Connection.Method.GET)\n+                        .execute()\n+                        .body();\n+            }\n+            JSONObject jsonObject = (JSONObject) new JSONParser().parse(json);\n+            JSONArray data = (JSONArray) jsonObject.get(\"data\");\n+            for (Object chapterObj: data) {\n+                JSONObject chapter = (JSONObject) chapterObj;\n+                boolean isFree = (boolean) chapter.get(\"isFree\");\n+                boolean isLimitFree = (boolean) chapter.get(\"isLimitFree\");\n+                boolean isBought = (boolean) chapter.get(\"isBought\");\n+                // Only add if available\n+                if (isFree || isLimitFree || isBought) {\n+                    String chapterName = (String) chapter.get(\"name\");\n+                    String chapterId = (String) chapter.get(\"id\");\n+                    chapterList.add(new Chapter(chapterName, apiUrl + \"/chapters/\" + chapterId + \"/content\"));\n+                }\n+            }\n+        } catch (HttpStatusException httpEr) {\n+            GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not connect to webpage!\", e);\n+        } catch (ParseException e) {\n+            GrabberUtils.err(novel.window, \"JSON parse error!\", e);\n+        }\n+        return chapterList;\n+    }\n+\n+    public Element getChapterContent(Chapter chapter) {\n+        Element chapterBody = new Element(\"div\");\n+        try {\n+            String json;\n+            if (token != null) {\n+                json = Jsoup.connect(chapter.chapterURL)\n+                        .header(\"token\", token)\n+                        .ignoreContentType(true)\n+                        .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                        .cookies(novel.cookies)\n+                        .method(Connection.Method.GET)\n+                        .execute()\n+                        .body();\n+            } else {\n+                json = Jsoup.connect(chapter.chapterURL)\n+                        .ignoreContentType(true)\n+                        .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n+                        .cookies(novel.cookies)\n+                        .method(Connection.Method.GET)\n+                        .execute()\n+                        .body();\n+            }\n+            JSONObject jsonObject = (JSONObject) new JSONParser().parse(json);\n+            JSONObject data = (JSONObject) jsonObject.get(\"data\");\n+            String content = (String) data.get(\"content\");\n+            String[] sentences = content.split(\"\\\\n\\\\n\");\n+            for (String sentence: sentences) {\n+                Element paragraph = new Element(\"p\");\n+                paragraph.appendText(sentence);\n+                chapterBody.appendChild(paragraph);\n+            }\n+        } catch (HttpStatusException httpEr) {\n+            GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n+        } catch (IOException e) {\n+            GrabberUtils.err(novel.window, \"Could not connect to webpage!\", e);\n+        } catch (ParseException e) {\n+            GrabberUtils.err(novel.window, \"JSON parse error!\", e);\n+        }\n+        return chapterBody;\n+    }\n+\n+    public NovelMetadata getMetadata() {\n+        NovelMetadata metadata = new NovelMetadata();\n+\n+        if (toc != null) {\n+            Element title = toc.selectFirst(\"ol > li:last-child\");\n+            Element desc = toc.selectFirst(\"meta[property=og:description]\");\n+            Element cover = toc.selectFirst(\"meta[property=og:image]\");\n+\n+            metadata.setTitle(title != null ? title.text() : \"\");\n+            metadata.setDescription(desc != null ? desc.attr(\"content\") : \"\");\n+            metadata.setBufferedCover(cover != null ? cover.attr(\"abs:content\")\n+                    .replace(\" \", \"%20\") : \"\");\n+\n+            Elements tags = toc.select(\"div[class^=tags_group] a\");\n+            List<String> subjects = new ArrayList<>();\n+            for (Element tag : tags) {\n+                subjects.add(tag.text());\n+            }\n+            metadata.setSubjects(subjects);\n+        }\n+\n+        return metadata;\n+    }\n+\n+    public List<String> getBlacklistedTags() {\n+        List blacklistedTags = new ArrayList();\n+        return blacklistedTags;\n+    }\n+\n+}"
  },
  {
    "sha": "ff38054ee2aa8dbcfe0ac472e3d42712ce49a657",
    "filename": "src/main/java/grabber/sources/biquge_se.java",
    "status": "modified",
    "additions": 25,
    "deletions": 8,
    "changes": 33,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/biquge_se.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/biquge_se.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/biquge_se.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -13,20 +13,41 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class biquge_se implements Source {\n-    private final Novel novel;\n+    private final String name = \"Biquge\";\n+    private final String url = \"http://www.biquge.se/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public biquge_se(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public biquge_se() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Elements chapterLinks = toc.select(\"#list dl dd:gt(10) a\");\n             for (Element chapterLink : chapterLinks) {\n                 chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n@@ -42,7 +63,7 @@ public biquge_se(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\"#content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -74,8 +95,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "158de818355fee6c4e43812932e3d3f53cb2d2a5",
    "filename": "src/main/java/grabber/sources/blackbox_tl_com.java",
    "status": "modified",
    "additions": 25,
    "deletions": 8,
    "changes": 33,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/blackbox_tl_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/blackbox_tl_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/blackbox_tl_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -13,20 +13,41 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class blackbox_tl_com implements Source {\n-    private final Novel novel;\n+    private final String name = \"Blackbox Translations\";\n+    private final String url = \"https://blackbox-tl.com/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public blackbox_tl_com(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public blackbox_tl_com() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Elements chapterLinks = toc.select(\".entry-content a[href^=\" + novel.novelLink + \"]:not([rel])\");\n             for (Element chapterLink : chapterLinks) {\n                 chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n@@ -42,7 +63,7 @@ public blackbox_tl_com(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\".entry-content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -73,8 +94,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "7539a2840c94cb4ec5a525d6ac08781dc2b7fa00",
    "filename": "src/main/java/grabber/sources/booklat_com_ph.java",
    "status": "modified",
    "additions": 23,
    "deletions": 37,
    "changes": 60,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/booklat_com_ph.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/booklat_com_ph.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/booklat_com_ph.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -4,29 +4,46 @@\n import grabber.GrabberUtils;\n import grabber.Novel;\n import grabber.NovelMetadata;\n-import org.jsoup.Connection;\n import org.jsoup.HttpStatusException;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n-import system.data.accounts.Account;\n-import system.data.accounts.Accounts;\n-import system.init;\n \n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class booklat_com_ph implements Source {\n-    private final Novel novel;\n+    private final String name = \"Booklat\";\n+    private final String url = \"https://booklat.com.ph\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public booklat_com_ph(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public booklat_com_ph() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n@@ -88,35 +105,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        GrabberUtils.info(novel.window, \"Login...\");\n-        try {\n-            Account account = Accounts.getInstance().getAccount(\"Booklat\");\n-            if (!account.getUsername().isEmpty()) {\n-                Connection.Response res = Jsoup.connect(\"https://www.booklat.com.ph/Account/Login\")\n-                        .method(Connection.Method.GET)\n-                        .execute();\n-                String token = res.parse().select(\"input[name=__RequestVerificationToken]\").attr(\"value\");\n-                res = Jsoup.connect(\"https://www.booklat.com.ph/Account/Login\")\n-                        .data(\"Email\", account.getUsername())\n-                        .data(\"Password\", account.getPassword())\n-                        .data(\"__RequestVerificationToken\", token)\n-                        .data(\"RememberMe\", \"false\")\n-                        .cookies(res.cookies())\n-                        .method(Connection.Method.POST)\n-                        .timeout(30 * 1000)\n-                        .execute();\n-                return res.cookies();\n-            } else {\n-                GrabberUtils.err(novel.window, \"No account found\");\n-                return null;\n-            }\n-\n-        } catch (IOException e) {\n-            GrabberUtils.err(novel.window, e.getMessage(), e);\n-        }\n-        throw new UnsupportedOperationException();\n-\n-    }\n-\n }"
  },
  {
    "sha": "a0de0ab577f582fafdb5fa21121c745d13c68a1b",
    "filename": "src/main/java/grabber/sources/booknet_com.java",
    "status": "modified",
    "additions": 32,
    "deletions": 10,
    "changes": 42,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/booknet_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/booknet_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/booknet_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -4,7 +4,6 @@\n import grabber.GrabberUtils;\n import grabber.Novel;\n import grabber.NovelMetadata;\n-import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n import org.json.simple.parser.JSONParser;\n import org.json.simple.parser.ParseException;\n@@ -17,27 +16,48 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n \n public class booknet_com implements Source {\n-    private final Novel novel;\n+    private final String name = \"BookNet\";\n+    private final String url = \"https://booknet.com/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public booknet_com(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public booknet_com() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n             toc = Jsoup.connect(novel.novelLink)\n+                    .cookies(novel.cookies)\n                     .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n                     .get();\n             Elements chapterLinks = toc.select(\".js-chapter-change option\");\n             for (Element chapterLink : chapterLinks) {\n-                if(!chapterLink.attr(\"value\").isEmpty()) {\n+                if (!chapterLink.attr(\"value\").isEmpty()) {\n                     chapterList.add(new Chapter(\n                             chapterLink.text(),\n                             novel.novelLink.replace(\"/book/\", \"/reader/\") + \"?c=\" + chapterLink.attr(\"value\")\n@@ -56,15 +76,20 @@ public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n             Connection.Response response = Jsoup.connect(chapter.chapterURL)\n+                    .cookies(novel.cookies)\n                     .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n                     .method(Connection.Method.GET)\n                     .execute();\n             Document doc = response.parse();\n+            if(doc.selectFirst(\"title\").text().equals(\"Mature\")) {\n+                GrabberUtils.err(novel.window, \"Mature story. Requires an account to access.\");\n+                return chapterBody; // Return empty chapter body\n+            }\n             String csrf = doc.selectFirst(\"meta[name=csrf-token]\").attr(\"content\");\n             String chapterId = doc.selectFirst(\".js-chapter-change option[selected]\").attr(\"value\");\n             StringBuilder content = new StringBuilder();\n             int page = 1;\n-            while(true) {\n+            while (true) {\n                 GrabberUtils.sleep(500);\n                 String json = Jsoup.connect(\"https://booknet.com/reader/get-page\")\n                         .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n@@ -73,6 +98,7 @@ public Element getChapterContent(Chapter chapter) {\n                         .data(\"page\", String.valueOf(page++))\n                         .data(\"_csrf\", csrf)\n                         .cookies(response.cookies())\n+                        .cookies(novel.cookies)\n                         .method(Connection.Method.POST)\n                         .execute().body();\n                 JSONObject jsonObject = (JSONObject) new JSONParser().parse(json);\n@@ -122,8 +148,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "21f2262f63ca514d6d112aa7fe9000661dd0775e",
    "filename": "src/main/java/grabber/sources/boxnovel_com.java",
    "status": "modified",
    "additions": 26,
    "deletions": 9,
    "changes": 35,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/boxnovel_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/boxnovel_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/boxnovel_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -13,21 +13,42 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class boxnovel_com implements Source {\n-    private final Novel novel;\n+    private final String name = \"BoxNovel.com\";\n+    private final String url = \"https://boxnovel.com\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n+    public boxnovel_com() {\n+    }\n+\n     public boxnovel_com(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n-            Document firstChapterPage = Jsoup.connect(toc.selectFirst(\".wp-manga-chapter a\").attr(\"abs:href\")).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n+            Document firstChapterPage = Jsoup.connect(toc.selectFirst(\".wp-manga-chapter a\").attr(\"abs:href\")).cookies(novel.cookies).get();\n             Elements chapterLinks = firstChapterPage.select(\"div.select-view:nth-child(2) > div:nth-child(1) > label:nth-child(1) > select:nth-child(1) option\");\n             for (Element chapterLink : chapterLinks) {\n                 chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"data-redirect\")));\n@@ -43,7 +64,7 @@ public boxnovel_com(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\".text-left\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -80,8 +101,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "53ef6217d9a46a3ffd04315b8886cbe0f6de86c7",
    "filename": "src/main/java/grabber/sources/boxnovel_net.java",
    "status": "modified",
    "additions": 26,
    "deletions": 7,
    "changes": 33,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/boxnovel_net.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/boxnovel_net.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/boxnovel_net.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -14,20 +14,42 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n \n public class boxnovel_net implements Source {\n-    private final Novel novel;\n+    private final String name = \"BoxNovel.net\";\n+    private final String url = \"https://boxnovel.net\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public boxnovel_net(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public boxnovel_net() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n             toc = Jsoup.connect(novel.novelLink)\n+                    .cookies(novel.cookies)\n                     .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n                     .get();\n             Elements chapterLinks;\n@@ -37,6 +59,7 @@ public boxnovel_net(Novel novel) {\n                     chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n                 }\n                 toc = Jsoup.connect(toc.select(\"#navigation-ajax:contains(NEXT PAGE)\").attr(\"abs:href\"))\n+                        .cookies(novel.cookies)\n                         .userAgent(\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0\")\n                         .get();\n             }\n@@ -56,7 +79,7 @@ public boxnovel_net(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\".text-content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -93,8 +116,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "fe21d4b9040803ad38f8763dcc0082ec543107cd",
    "filename": "src/main/java/grabber/sources/boxnovel_org.java",
    "status": "modified",
    "additions": 27,
    "deletions": 10,
    "changes": 37,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/boxnovel_org.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/boxnovel_org.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/boxnovel_org.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -13,27 +13,48 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class boxnovel_org implements Source {\n-    private final Novel novel;\n+    private final String name = \"BoxNovel.org\";\n+    private final String url = \"https://boxnovel.org/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public boxnovel_org(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public boxnovel_org() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Elements chapterLinks;\n             while (!toc.select(\"li:contains(»)\").hasClass(\"disabled\")) {\n                 chapterLinks = toc.select(\".list-chapter a\");\n                 for (Element chapterLink : chapterLinks) {\n                     chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n                 }\n-                toc = Jsoup.connect(toc.select(\"a[rel=next]\").attr(\"abs:href\")).get();\n+                toc = Jsoup.connect(toc.select(\"a[rel=next]\").attr(\"abs:href\")).cookies(novel.cookies).get();\n             }\n             chapterLinks = toc.select(\".list-chapter a\");\n             for (Element chapterLink : chapterLinks) {\n@@ -50,8 +71,8 @@ public boxnovel_org(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n-            chapterBody = doc.select(\"#chapter-content\").first();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n+            chapterBody = doc.select(\"#chr-content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n         } catch (IOException e) {\n@@ -88,8 +109,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "56eaf9cb0ef400d03046c33ac27bbc5ec8dbc321",
    "filename": "src/main/java/grabber/sources/chickengege_org.java",
    "status": "modified",
    "additions": 25,
    "deletions": 8,
    "changes": 33,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/chickengege_org.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/chickengege_org.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/chickengege_org.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -13,20 +13,41 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class chickengege_org implements Source {\n-    private final Novel novel;\n+    private final String name = \"Chicken Gege\";\n+    private final String url = \"https://www.chickengege.org/\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public chickengege_org(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public chickengege_org() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Elements chapterLinks = toc.select(\"#novelList a\");\n             for (Element chapterLink : chapterLinks) {\n                 chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n@@ -42,7 +63,7 @@ public chickengege_org(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\"article div.entry-content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -75,8 +96,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "f09db1c5f47466a007b67976068dacf75d922773",
    "filename": "src/main/java/grabber/sources/chrysanthemumgarden_com.java",
    "status": "modified",
    "additions": 25,
    "deletions": 9,
    "changes": 34,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/chrysanthemumgarden_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/chrysanthemumgarden_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/chrysanthemumgarden_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -14,11 +14,13 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n public class chrysanthemumgarden_com implements Source {\n-    private final Novel novel;\n-    private final HashMap<String, String> charMap;\n+    private final String name = \"Chrysanthemum Garden\";\n+    private final String url = \"https://chrysanthemumgarden.com\";\n+    private HashMap<String, String> charMap;\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public chrysanthemumgarden_com(Novel novel) {\n@@ -78,10 +80,28 @@ public chrysanthemumgarden_com(Novel novel) {\n         charMap.put(\"Z\", \"M\");\n     }\n \n+    public chrysanthemumgarden_com() { }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Elements chapterLinks = toc.select(\".translated-chapters a\");\n             for (Element chapterLink : chapterLinks) {\n                 chapterList.add(new Chapter(chapterLink.text(), chapterLink.attr(\"abs:href\")));\n@@ -97,7 +117,7 @@ public chrysanthemumgarden_com(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n \n             Elements encodedStrings = doc.select(\".jum\");\n \n@@ -156,8 +176,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  },
  {
    "sha": "ab634d109d03f8f6ef1ac086629e376a6a466d3e",
    "filename": "src/main/java/grabber/sources/comrademao_com.java",
    "status": "modified",
    "additions": 30,
    "deletions": 10,
    "changes": 40,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/comrademao_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/comrademao_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/comrademao_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -6,25 +6,46 @@\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n import org.openqa.selenium.By;\n+import org.openqa.selenium.Cookie;\n import org.openqa.selenium.support.ui.ExpectedConditions;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n public class comrademao_com implements Source {\n-    private final Novel novel;\n+    private final String name = \"Comrade Mao\";\n+    private final String url = \"https://comrademao.com\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n+    public comrademao_com() {\n+    }\n+\n     public comrademao_com(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n \n-        if (novel.headlessDriver == null) novel.headlessDriver = new Driver(novel.window, novel.browser);\n+        if (novel.headlessDriver == null) novel.headlessDriver = new Driver(novel.window);\n+        novel.cookies.forEach((key, value) -> novel.headlessDriver.driver.manage().addCookie(new Cookie(key, value)));\n         novel.headlessDriver.driver.navigate().to(novel.novelLink);\n         novel.headlessDriver.wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\"tbody a\")));\n         String baseUrl = novel.headlessDriver.driver.getCurrentUrl().substring(0, GrabberUtils.ordinalIndexOf(novel.headlessDriver.driver.getCurrentUrl(), \"/\", 3) + 1);\n@@ -51,7 +72,9 @@ public comrademao_com(Novel novel) {\n     }\n \n     public Element getChapterContent(Chapter chapter) {\n-        if (novel.headlessDriver == null) novel.headlessDriver = new Driver(novel.window, novel.browser);\n+        if (novel.headlessDriver == null) novel.headlessDriver = new Driver(novel.window);\n+        novel.headlessDriver.driver.navigate().to(chapter.chapterURL);\n+        novel.cookies.forEach((key, value) -> novel.headlessDriver.driver.manage().addCookie(new Cookie(key, value)));\n         novel.headlessDriver.driver.navigate().to(chapter.chapterURL);\n         novel.headlessDriver.wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\"article\")));\n         String baseUrl = novel.headlessDriver.driver.getCurrentUrl().substring(0, GrabberUtils.ordinalIndexOf(novel.headlessDriver.driver.getCurrentUrl(), \"/\", 3) + 1);\n@@ -84,7 +107,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n }"
  },
  {
    "sha": "0d001c3da7b3645cd587abee2be90ac091f9be5c",
    "filename": "src/main/java/grabber/sources/creativenovels_com.java",
    "status": "modified",
    "additions": 36,
    "deletions": 13,
    "changes": 49,
    "blob_url": "https://github.com/SkyL0ver/Novel-Grabber/blob/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/creativenovels_com.java",
    "raw_url": "https://github.com/SkyL0ver/Novel-Grabber/raw/a7061638ceaf4c8ccd96f6f449a2b2722c731b50/src/main/java/grabber/sources/creativenovels_com.java",
    "contents_url": "https://api.github.com/repos/SkyL0ver/Novel-Grabber/contents/src/main/java/grabber/sources/creativenovels_com.java?ref=a7061638ceaf4c8ccd96f6f449a2b2722c731b50",
    "patch": "@@ -14,23 +14,45 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class creativenovels_com implements Source {\n-    private final Novel novel;\n+    private final String name = \"Creative Novels\";\n+    private final String url = \"https://creativenovels.com\";\n+    private final boolean canHeadless = false;\n+    private Novel novel;\n     private Document toc;\n \n     public creativenovels_com(Novel novel) {\n         this.novel = novel;\n     }\n \n+    public creativenovels_com() {\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public boolean canHeadless() {\n+        return canHeadless;\n+    }\n+\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n     public List<Chapter> getChapterList() {\n         List<Chapter> chapterList = new ArrayList();\n \n         try {\n-            toc = Jsoup.connect(novel.novelLink).get();\n+            toc = Jsoup.connect(novel.novelLink).cookies(novel.cookies).get();\n             Connection.Response res = Jsoup.connect(\"https://creativenovels.com/wp-admin/admin-ajax.php\")\n                     .method(Connection.Method.POST)\n+                    .cookies(novel.cookies)\n                     .timeout(30 * 1000)\n                     .data(\"action\", \"crn_chapter_list\")\n                     .data(\"view_id\", toc.select(\"#chapter_list_novel_page\").attr(\"class\"))\n@@ -66,7 +88,7 @@ public creativenovels_com(Novel novel) {\n     public Element getChapterContent(Chapter chapter) {\n         Element chapterBody = null;\n         try {\n-            Document doc = Jsoup.connect(chapter.chapterURL).get();\n+            Document doc = Jsoup.connect(chapter.chapterURL).cookies(novel.cookies).get();\n             chapterBody = doc.select(\".entry-content.content\").first();\n         } catch (HttpStatusException httpEr) {\n             GrabberUtils.err(novel.window, GrabberUtils.getHTMLErrMsg(httpEr));\n@@ -80,12 +102,17 @@ public NovelMetadata getMetadata() {\n         NovelMetadata metadata = new NovelMetadata();\n \n         if (toc != null) {\n-            metadata.setTitle(toc.select(\".e45344-14\").first().text());\n-            metadata.setAuthor(toc.select(\".e45344-16 > a:nth-child(1)\").first().text());\n-            metadata.setDescription(toc.select(\".novel_page_synopsis\").first().text());\n-            metadata.setBufferedCover(toc.select(\"img.book_cover\").attr(\"abs:src\"));\n+            Element title = toc.selectFirst(\".x-text.bK_C:not(:has( > *))\");\n+            Element author = toc.selectFirst(\"div.x-text.bK_C:gt(1) a\");\n+            Element desc = toc.selectFirst(\".novel_page_synopsis\");\n+            Element cover = toc.selectFirst(\".book_cover\");\n \n-            Elements tags = toc.select(\"div.genre_novel\");\n+            metadata.setTitle(title != null ? title.text() : \"\");\n+            metadata.setAuthor(author != null ? author.text() : \"\");\n+            metadata.setDescription(desc != null ? desc.text() : \"\");\n+            metadata.setBufferedCover(cover != null ? cover.attr(\"abs:src\") : \"\");\n+\n+            Elements tags = toc.select(\".suggest_tag a\");\n             List<String> subjects = new ArrayList<>();\n             for (Element tag : tags) {\n                 subjects.add(tag.text());\n@@ -103,8 +130,4 @@ public NovelMetadata getMetadata() {\n         return blacklistedTags;\n     }\n \n-    public Map<String, String> getLoginCookies() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n }"
  }
]
