[
  {
    "sha": "13bd82b6d385790c5d538858bb89651c18c1a0eb",
    "filename": "Lesson6/ChatClient/src/main/java/Callback.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/Callback.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/Callback.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatClient/src/main/java/Callback.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,3 @@\n+interface Callback {\n+    void callback(Object... args);\n+}"
  },
  {
    "sha": "c7e5b1e086be66ac640f0303b5de7b13a0447997",
    "filename": "Lesson6/ChatClient/src/main/java/ChatClientApp.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/ChatClientApp.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/ChatClientApp.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatClient/src/main/java/ChatClientApp.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,20 @@\n+import javafx.application.Application;\n+import javafx.fxml.FXMLLoader;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+\n+public class ChatClientApp extends Application {\n+    @Override\n+    public void start(Stage primaryStage) throws Exception {\n+        Parent root = FXMLLoader.load(getClass().getResource(\"main.fxml\"));\n+        primaryStage.setTitle(\"Chat Client\");\n+        primaryStage.setScene(new Scene(root, 600, 500));\n+        primaryStage.show();\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+}\n+"
  },
  {
    "sha": "82bd10275aaf1b2bea729c30bba965924b5ab58f",
    "filename": "Lesson6/ChatClient/src/main/java/ChatController.java",
    "status": "added",
    "additions": 165,
    "deletions": 0,
    "changes": 165,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/ChatController.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/ChatController.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatClient/src/main/java/ChatController.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,165 @@\n+import javafx.application.Platform;\n+import javafx.fxml.FXML;\n+import javafx.fxml.Initializable;\n+import javafx.scene.control.*;\n+import javafx.scene.layout.HBox;\n+\n+import java.net.URL;\n+import java.util.ResourceBundle;\n+import java.io.*;\n+\n+public class ChatController implements Initializable {\n+    @FXML\n+    TextArea textArea;\n+\n+    @FXML\n+    TextField msgField, loginField;\n+\n+    @FXML\n+    HBox msgPanel, authPanel;\n+\n+    @FXML\n+    PasswordField passField;\n+\n+    @FXML\n+    ListView<String> clientsList;\n+\n+\n+    private final String YOURSELF_LABEL = \" (You)\";\n+    private final int RECOVERABLE_MESSAGE_QUANTITY = 100;\n+    private boolean authentificated;\n+    private String nickname;\n+    private File messageHistoryFile;\n+\n+    public void setAuthenticated(boolean authenticated) {\n+        this.authentificated = authenticated;\n+        authPanel.setVisible(!authenticated);\n+        authPanel.setManaged(!authenticated);\n+        msgPanel.setVisible(authenticated);\n+        msgPanel.setManaged(authenticated);\n+        clientsList.setVisible(authenticated);\n+        clientsList.setManaged(authenticated);\n+        if (!authenticated) {\n+            nickname = \"\";\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(URL location, ResourceBundle resources) {\n+        setAuthenticated(false);\n+        clientsList.setOnMouseClicked(event -> {\n+            if (event.getClickCount() == 2) {\n+                String nickname = clientsList.getSelectionModel().getSelectedItem().replace(YOURSELF_LABEL, \"\");\n+                msgField.setText(\"/w \" + nickname + \" \");\n+                msgField.requestFocus();\n+                msgField.selectEnd();\n+            }\n+        });\n+        linkCallbacks();\n+    }\n+\n+    public void sendAuth() {\n+        Network.sendAuth(loginField.getText(), passField.getText());\n+        loginField.clear();\n+        passField.clear();\n+    }\n+\n+    public void sendMsg() {\n+        if (!msgField.getText().equals(\"\")){\n+            if (Network.sendMsg(msgField.getText())) {\n+                msgField.clear();\n+                msgField.requestFocus();\n+            }\n+        }\n+        msgField.requestFocus();\n+    }\n+\n+    public void showAlert(String msg) {\n+        Platform.runLater(() -> {\n+            Alert alert = new Alert(Alert.AlertType.WARNING, msg, ButtonType.OK);\n+            alert.showAndWait();\n+        });\n+    }\n+\n+    public void linkCallbacks() {\n+        Network.setCallOnException(args -> showAlert(args[0].toString()));\n+\n+        Network.setCallOnCloseConnection(args -> setAuthenticated(false));\n+\n+        Network.setCallOnAuthenticated(args -> {\n+            setAuthenticated(true);\n+            nickname = args[0].toString();\n+            int lineNumber = 0;\n+\n+            if (setMessageHistoryFile().exists()) {\n+                try (FileReader fr = new FileReader(messageHistoryFile)) {\n+                    LineNumberReader lnr = new LineNumberReader(fr);\n+                    while (lnr.readLine() != null) {\n+                        lineNumber++;\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+\n+                try (BufferedReader br = new BufferedReader(new FileReader(messageHistoryFile))) {\n+                    for (int i = 0; i < lineNumber; i++) {\n+                        String line = br.readLine();\n+                        if (i >= lineNumber - RECOVERABLE_MESSAGE_QUANTITY) {\n+                            textArea.appendText(line + \"\\n\");\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                try {\n+                    messageHistoryFile.createNewFile();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        Network.setCallOnMsgReceived(args -> {\n+            String msg = args[0].toString();\n+            if (msg.startsWith(\"/\")) {\n+                if (msg.startsWith(\"/clients \")) {\n+                    String[] clients = msg.split(\"\\\\s\", 2)[1].split(\"\\\\s\");\n+                    Platform.runLater(() -> {\n+                        clientsList.getItems().clear();\n+                        clientsList.getItems().add(nickname + YOURSELF_LABEL);\n+                        for (String client : clients) {\n+                            if (!client.equals(nickname)) {\n+                                clientsList.getItems().add(client);\n+                            }\n+                        }\n+                    });\n+                }\n+                if (msg.startsWith(\"/changenick:\")) {\n+                    if (msg.startsWith(\"сменить ник не удается \")) {\n+                        String errorText = msg.split(\"\\\\s\", 2)[1];\n+                        textArea.appendText(errorText + \"\\n\");\n+                        return;\n+                    }\n+                    if (msg.startsWith(\"смена ника прошла успешна \")) {\n+                        nickname = msg.split(\"\\\\s\")[1];\n+                        textArea.appendText(\"Ник был изменен\\n\");\n+                        messageHistoryFile.renameTo(setMessageHistoryFile());\n+                    }\n+                }\n+            } else {\n+                textArea.appendText(msg + \"\\n\");\n+                try (FileWriter fw = new FileWriter(messageHistoryFile, true)) {\n+                    fw.append(msg + \"\\n\");\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+    }\n+\n+    private File setMessageHistoryFile() {\n+        messageHistoryFile = new File(\"src/main/resources/nickname =\" + nickname + \".cmh\");\n+        return messageHistoryFile;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "79bbcc57bc3e5ecb242656777796ddf9adc0bf53",
    "filename": "Lesson6/ChatClient/src/main/java/Network.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/Network.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatClient/src/main/java/Network.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatClient/src/main/java/Network.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,113 @@\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class Network {\n+    private static Socket socket;\n+    private static DataInputStream in;\n+    private static DataOutputStream out;\n+\n+    private static Callback callOnMsgReceived;\n+    private static Callback callOnAuthenticated;\n+    private static Callback callOnException;\n+    private static Callback callOnCloseConnection;\n+\n+    static {\n+        Callback empty = args -> { };\n+        callOnMsgReceived = empty;\n+        callOnAuthenticated = empty;\n+        callOnException = empty;\n+        callOnCloseConnection = empty;\n+    }\n+\n+    public static void setCallOnMsgReceived(Callback callOnMsgReceived) {\n+        Network.callOnMsgReceived = callOnMsgReceived;\n+    }\n+\n+    public static void setCallOnAuthenticated(Callback callOnAuthenticated) {\n+        Network.callOnAuthenticated = callOnAuthenticated;\n+    }\n+\n+    public static void setCallOnException(Callback callOnException) {\n+        Network.callOnException = callOnException;\n+    }\n+\n+    public static void setCallOnCloseConnection(Callback callOnCloseConnection) {\n+        Network.callOnCloseConnection = callOnCloseConnection;\n+    }\n+\n+    public static void sendAuth(String login, String password) {\n+        try {\n+            if (socket == null || socket.isClosed()) {\n+                connect();\n+            }\n+            out.writeUTF(\"/auth \" + login + \" \" + password);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void connect() {\n+        try {\n+            socket = new Socket(\"localhost\", 8080);\n+            in = new DataInputStream(socket.getInputStream());\n+            out = new DataOutputStream(socket.getOutputStream());\n+            Thread t = new Thread(() -> {\n+                try {\n+                    while (true) {\n+                        String msg = in.readUTF();\n+                        if (msg.startsWith(\"/auth \")) {\n+                            callOnAuthenticated.callback(msg.split(\"\\\\s\")[1]);\n+                            break;\n+                        }\n+                    }\n+                    while (true) {\n+                        String msg = in.readUTF();\n+                        if (msg.equals(\"/end\")) {\n+                            break;\n+                        }\n+                        callOnMsgReceived.callback(msg);\n+                    }\n+                } catch (IOException e) {\n+                    callOnException.callback(\"Соединение с сервером было разорвано\");\n+                } finally {\n+                    closeConnection();\n+                }\n+            });\n+            t.setDaemon(true);\n+            t.start();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static boolean sendMsg(String msg) {\n+        try {\n+            out.writeUTF(msg);\n+            return true;\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static void closeConnection() {\n+        callOnCloseConnection.callback();\n+        try {\n+            in.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            out.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bf91227dcde51526bb8968c5f28aa48bc9ba505e",
    "filename": "Lesson6/ChatServer/src/main/java/AuthServise.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/AuthServise.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/AuthServise.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/AuthServise.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,6 @@\n+interface AuthService {\n+\n+    String getNickname(String login, String password);\n+\n+    boolean changeNickname(String currentNickname, String newNickname);\n+}"
  },
  {
    "sha": "b1d15714aab031926bcfb67b634db9b22486abb5",
    "filename": "Lesson6/ChatServer/src/main/java/ClientHandler.java",
    "status": "added",
    "additions": 120,
    "deletions": 0,
    "changes": 120,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/ClientHandler.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/ClientHandler.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,120 @@\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class ClientHandler {\n+    private String nickname;\n+    private Server server;\n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+    private static final Logger logger = Logger.getLogger(ClientHandler.class.getName());\n+\n+    public String getNickname() {\n+        return nickname;\n+    }\n+\n+    public ClientHandler(Server server, Socket socket) {\n+        logger.setLevel(Level.ALL);\n+        Handler handler = new ConsoleHandler();\n+        handler.setLevel(Level.ALL);\n+        logger.addHandler(handler);\n+\n+        try {\n+            this.server = server;\n+            this.socket = socket;\n+            this.in = new DataInputStream(socket.getInputStream());\n+            this.out = new DataOutputStream(socket.getOutputStream());\n+            new Thread(() -> {\n+                try {\n+                    while (true) {\n+                        String msg = in.readUTF();\n+                        if (msg.startsWith(\"/auth \")) {\n+                            logger.log(Level.FINE, \"Пользователь пытается аутентифицироваться.\");\n+                            String[] tokens = msg.split(\"\\\\s\");\n+                            String nickname = server.getAuthService().getNickname(tokens[1], tokens[2]);\n+                            if (nickname != null && !server.isNickBusy(nickname)) {\n+                                sendMsg(\"/auth \" + nickname);\n+                                this.nickname = nickname;\n+                                server.subscribe(this);\n+                                break;\n+                            }\n+                            logger.log(Level.FINE, \"Пользователь не аутентифицирован.\");\n+                        }\n+                    }\n+                    while (true) {\n+                        String msg = in.readUTF();\n+                        if (msg.startsWith(\"/\")) {\n+                            if (msg.equals(\"/end\")) {\n+                                sendMsg(\"/end\");\n+                                break;\n+                            }\n+                            if (msg.startsWith(\"/w \")) {\n+                                String[] tokens = msg.split(\"\\\\s\", 3);\n+                                server.privateMsg(this, tokens[1], tokens[2]);\n+                            }\n+                            if (msg.startsWith(\"/changenick \")) {\n+                                logger.log(Level.FINE, \"Пользователь \" + this.nickname + \" пытается сменить ник.\");\n+                                String newNickname = msg.split(\"\\\\s\", 2)[1];\n+                                if (newNickname.contains(\" \")) {\n+                                    sendMsg(\"Ник не может содержать пробелов\");\n+                                    logger.log(Level.FINE, \"Новый логин \" + this.nickname + \" содержит некорректный символы\");\n+                                    continue;\n+                                }\n+                                if (server.getAuthService().changeNickname(this.nickname, newNickname)) {\n+                                    logger.log(Level.FINE, \"Новый ник \" + this.nickname + \": \" + newNickname);\n+                                    this.nickname = newNickname;\n+                                    sendMsg(\"/Никнейм сменен успешно: \" + nickname);\n+                                    server.broadcastClientsList();\n+                                } else {\n+                                    sendMsg(\"Ник уже занят\");\n+                                    logger.log(Level.FINE, \"Поьзователь \" + this.nickname + \" пытается сменить ник на уже занятый.\");\n+                                }\n+                            }\n+                        } else {\n+                            server.broadcastMsg(this.nickname, msg);\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.log(Level.WARNING, e.getMessage(), e);\n+                } finally {\n+                    ClientHandler.this.disconnect();\n+                }\n+            }).start();\n+        } catch (IOException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+    }\n+\n+    public void sendMsg(String msg) {\n+        try {\n+            out.writeUTF(msg);\n+        } catch (IOException e) {\n+            logger.log(Level.WARNING, e.getMessage(), e);\n+        }\n+    }\n+\n+    public void disconnect() {\n+        server.unsubscribe(this);\n+        try {\n+            in.close();\n+        } catch (IOException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+        try {\n+            out.close();\n+        } catch (IOException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "64066daf4838f4678d11548e96f21e45a92755af",
    "filename": "Lesson6/ChatServer/src/main/java/Database.java",
    "status": "added",
    "additions": 112,
    "deletions": 0,
    "changes": 112,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/Database.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/Database.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/Database.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,112 @@\n+import java.sql.*;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class Database {\n+    private static Connection connection;\n+    private static Statement statement;\n+    private static PreparedStatement createUserStatement;\n+    private static PreparedStatement getUserNicknameStatement;\n+    private static PreparedStatement changeUserNicknameStatement;\n+    private static PreparedStatement deleteUserStatement;\n+    private static final Logger logger = Logger.getLogger(Database.class.getName());\n+\n+    public static boolean connect() {\n+        logger.setLevel(Level.ALL);\n+        try {\n+            Class.forName(\"org.sqlite.JDBC\");\n+            connection = DriverManager.getConnection(\"jdbc:sqlite:Lesson3/ChatServer/chat.db\");\n+            logger.log(Level.INFO, \"Сервер подключился к БД\");\n+            statement = connection.createStatement();\n+            createUserTable();\n+            prepareAllStatement();\n+            return true;\n+        } catch (ClassNotFoundException | SQLException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+            return false;\n+        }\n+    }\n+\n+    public static void disconnect() {\n+        try {\n+            statement.close();\n+        } catch (SQLException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+        try {\n+            connection.close();\n+        } catch (SQLException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+    }\n+\n+    public static void createUserTable() throws SQLException {\n+        statement.executeUpdate(\"CREATE TABLE IF NOT EXISTS User (\" +\n+                \"    id       INTEGER      PRIMARY KEY AUTOINCREMENT\" +\n+                \"                          NOT NULL\" +\n+                \"                          UNIQUE,\" +\n+                \"    login    VARCHAR (32) UNIQUE\" +\n+                \"                          NOT NULL,\" +\n+                \"    password VARCHAR (32) NOT NULL,\" +\n+                \"    nickname VARCHAR (32) UNIQUE\" +\n+                \"                          NOT NULL\" +\n+                \");\"\n+        );\n+    }\n+\n+    public static void prepareAllStatement() throws SQLException {\n+        createUserStatement = connection.prepareStatement(\"INSERT INTO user (login, password, nickname) VALUES (?, ?, ?);\");\n+        getUserNicknameStatement = connection.prepareStatement(\"SELECT nickname FROM Users WHERE login = ? AND password = ?;\");\n+        changeUserNicknameStatement = connection.prepareStatement(\"UPDATE Users SET nickname = ? WHERE nickname = ?;\");\n+        deleteUserStatement = connection.prepareStatement(\"DELETE FROM Users WHERE login = ?;\");\n+    }\n+\n+    public static boolean createUser(String login, String password, String nickname) {\n+        try {\n+            createUserStatement.setString(1, login);\n+            createUserStatement.setString(2, password);\n+            createUserStatement.setString(3, nickname);\n+            createUserStatement.executeUpdate();\n+            return true;\n+        } catch (SQLException e) {\n+            return false;\n+        }\n+    }\n+\n+    public static String getUserNickname(String login, String password) {\n+        String nickname = null;\n+        try {\n+            getUserNicknameStatement.setString(1, login);\n+            getUserNicknameStatement.setString(2, password);\n+            ResultSet rs = getUserNicknameStatement.executeQuery();\n+            if (rs.next()) {\n+                nickname = rs.getString(1);\n+            }\n+            rs.close();\n+        } catch (SQLException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        }\n+        return nickname;\n+    }\n+\n+    public static boolean changeUserNickname(String currentNickname, String newNickname) {\n+        try {\n+            changeUserNicknameStatement.setString(1, newNickname);\n+            changeUserNicknameStatement.setString(2, currentNickname);\n+            changeUserNicknameStatement.executeUpdate();\n+            return true;\n+        } catch (SQLException e) {\n+            return false;\n+        }\n+    }\n+\n+    public static boolean deleteUser(String login) {\n+        try {\n+            deleteUserStatement.setString(1, login);\n+            deleteUserStatement.executeUpdate();\n+            return true;\n+        } catch (SQLException e) {\n+            return false;\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9d488d2d5d9c35d47623e97de82975e140acf9ea",
    "filename": "Lesson6/ChatServer/src/main/java/DatabaseAuthService.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/DatabaseAuthService.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/DatabaseAuthService.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/DatabaseAuthService.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,11 @@\n+public class DatabaseAuthService implements AuthService {\n+    @Override\n+    public String getNickname(String login, String password) {\n+        return Database.getUserNickname(login, password);\n+    }\n+\n+    @Override\n+    public boolean changeNickname(String currentNickname, String newNickname) {\n+        return Database.changeUserNickname(currentNickname, newNickname);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ff10f20893b6c23ec4757770e74e728ffa223747",
    "filename": "Lesson6/ChatServer/src/main/java/Server.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/Server.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/Server.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/Server.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,111 @@\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.Vector;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class Server {\n+    private final Vector<ClientHandler> clients;\n+    private final AuthService authService;\n+    private static final Logger logger = Logger.getLogger(Server.class.getName());\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+\n+    public Server() {\n+        logger.setLevel(Level.ALL);\n+        Handler handler = new ConsoleHandler();\n+        handler.setLevel(Level.ALL);\n+        logger.addHandler(handler);\n+\n+        clients = new Vector<>();\n+\n+        if (!Database.connect()) {\n+            RuntimeException e =  new RuntimeException(\"Невозможно подключиться к базе данных\");\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+            throw e;\n+        }\n+\n+        authService = new DatabaseAuthService();\n+\n+        try (ServerSocket serverSocket = new ServerSocket(8080)) {\n+            logger.log(Level.INFO, \"Сервер работает на порту \" + serverSocket.getLocalPort() + \"...\");\n+            while (true) {\n+                Socket socket = serverSocket.accept();\n+                new ClientHandler(this, socket);\n+                logger.log(Level.INFO, \"Пользователь подключился\");\n+            }\n+        } catch (IOException e) {\n+            logger.log(Level.SEVERE, e.getMessage(), e);\n+        } finally {\n+            Database.disconnect();\n+            logger.log(Level.INFO, \"Сервер отключен\");\n+        }\n+    }\n+\n+    public void broadcastMsg(String senderNickname, String msg) {\n+        logger.log(Level.FINE, \"Пользователь \" + senderNickname + \" отправил сообщение.\");\n+        for (ClientHandler client : clients) {\n+            if (client.getNickname().equals(senderNickname)) {\n+                client.sendMsg(\"Вы: \" + msg);\n+            }else {\n+                client.sendMsg(senderNickname + \": \" + msg);\n+            }\n+        }\n+    }\n+\n+    public void privateMsg(ClientHandler sender, String receiverNickname, String msg) {\n+        if (sender.getNickname().equals(receiverNickname)) {\n+            sender.sendMsg(\"сообщение: \" + msg);\n+            return;\n+        }\n+        for (ClientHandler client : clients) {\n+            if (client.getNickname().equals(receiverNickname)) {\n+                client.sendMsg(sender.getNickname() + \" написал вам\" + \": \" + msg);\n+                sender.sendMsg(\"написать \" + receiverNickname + \": \" + msg);\n+                logger.log(Level.FINE, \"Пользователь \" + sender.getNickname() + \" написал приватное сообещение.\");\n+                return;\n+            }\n+        }\n+        sender.sendMsg(\"Пользователь \" + receiverNickname + \" не найден\");\n+        logger.log(Level.FINEST, \"Пользователь \" + sender.getNickname() + \" пытается написать личное сообщение несуществующему пользователю.\");\n+    }\n+\n+    public void subscribe(ClientHandler Client) {\n+        clients.add(Client);\n+        broadcastClientsList();\n+        logger.log(Level.FINE, \"Пользовтаель \" + Client.getNickname() + \" подключен\");\n+    }\n+\n+    public void unsubscribe(ClientHandler Client) {\n+        clients.remove(Client);\n+        broadcastClientsList();\n+        logger.log(Level.FINE, \"Пользователь \" + Client.getNickname() + \" отключен\");\n+    }\n+\n+    public boolean isNickBusy(String nickname) {\n+        for (ClientHandler client : clients) {\n+            if (client.getNickname().equals(nickname)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public void broadcastClientsList() {\n+        StringBuilder sb = new StringBuilder(15 * clients.size());\n+        sb.append(\"/clients \");\n+        for (ClientHandler client : clients) {\n+            sb.append(client.getNickname()).append(\" \");\n+        }\n+        sb.setLength(sb.length() - 1);\n+        String out = sb.toString();\n+        for (ClientHandler client : clients) {\n+            client.sendMsg(out);\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "663105f3966826dbac3361ae11036d633e82902e",
    "filename": "Lesson6/ChatServer/src/main/java/SimpleAuthService.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/SimpleAuthService.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/SimpleAuthService.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/SimpleAuthService.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,41 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SimpleAuthService implements AuthService {\n+\n+    private static class UserData {\n+        private final String login;\n+        private final String password;\n+        private final String nickname;\n+\n+        public UserData(String login, String password, String nickname) {\n+            this.login = login;\n+            this.password = password;\n+            this.nickname = nickname;\n+        }\n+    }\n+\n+    private List<UserData> users;\n+\n+    public SimpleAuthService() {\n+        this.users = new ArrayList<>();\n+        for (int i = 1; i <= 10; i++) {\n+            users.add(new UserData(\"login\" + i, \"pass\" + i, \"nick\" + i));\n+        }\n+    }\n+\n+    @Override\n+    public String getNickname(String login, String password) {\n+        for (UserData o : users) {\n+            if (o.login.equals(login) && o.password.equals(password)) {\n+                return o.nickname;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean changeNickname(String currentNickname, String newNickname) {\n+        return false;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9f0b76b9e1651c28b5858e3b924865081174fb9d",
    "filename": "Lesson6/ChatServer/src/main/java/mainServer.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/mainServer.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/ChatServer/src/main/java/mainServer.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/ChatServer/src/main/java/mainServer.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,5 @@\n+public class mainServer {\n+    public static void main(String[] args) {\n+        new Server();\n+    }\n+}"
  },
  {
    "sha": "58d2805c4e35cf8c58749e5898fd9856f9b25167",
    "filename": "Lesson6/src/main/java/Main.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/src/main/java/Main.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/src/main/java/Main.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/src/main/java/Main.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,28 @@\n+import java.util.Arrays;\n+public class Main {\n+    public int[] arrayAfterFour(int[] arr){\n+        for (int i = arr.length; i >= 0 ; i--) {\n+            if (arr[i] == 4){\n+                return Arrays.copyOfRange(arr, i + 1, arr.length);\n+            }\n+        }\n+        throw new RuntimeException();\n+    }\n+\n+    public boolean arrayOfOnesAndFours(int[]arr){\n+        boolean isOneIn = false;\n+        boolean isFourIn = false;\n+\n+        for (int value : arr) {\n+            if (value != 1 && value != 4){\n+                return false;\n+            }\n+            if (value == 1){\n+                isOneIn = true;\n+            } else {\n+                isFourIn = true;\n+            }\n+        }\n+    return isOneIn && isFourIn;\n+    }\n+}"
  },
  {
    "sha": "60676368634eef35c5f63942fc533cf125645703",
    "filename": "Lesson6/src/test/java/MainTest.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/src/test/java/MainTest.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/cb4d2a51649cb3bb46e60a960dd5d559b614090d/Lesson6/src/test/java/MainTest.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson6/src/test/java/MainTest.java?ref=cb4d2a51649cb3bb46e60a960dd5d559b614090d",
    "patch": "@@ -0,0 +1,55 @@\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class MainTest {\n+    Main main = new Main();\n+\n+    @Test(expected = RuntimeException.class)\n+    public void testArrayAfterFourException(){\n+        int [] arr = {1,3,2,3};\n+        int [] expectedArr = {};\n+        int [] result = main.arrayAfterFour(arr);\n+        Assert.assertArrayEquals(expectedArr, result);\n+    }\n+\n+    @Test\n+    public void TestArrayAfterFour(){\n+        int [] arr = {1,2,3,4,5};\n+        int[] expectedArr = {5};\n+        int[] result = main.arrayAfterFour(arr);\n+        Assert.assertArrayEquals(expectedArr, result);\n+    }\n+\n+    @Test\n+    public void testArrayAfterFourWhenFourIsLast(){\n+        int[] arr = {1, 2, 3, 4};\n+        int[] expectedArr = {};\n+        int[] result = main.arrayAfterFour(arr);\n+        Assert.assertArrayEquals(expectedArr, result);\n+    }\n+\n+    @Test\n+    public void testArrayOfOnesAndFours(){\n+        int[] arr = {1, 1, 1, 4};\n+        Assert.assertTrue(main.arrayOfOnesAndFours(arr));\n+    }\n+\n+    @Test\n+    public void testArrayOfOnes(){\n+        int[] arr = {1, 1, 1, 1};\n+        Assert.assertFalse(main.arrayOfOnesAndFours(arr));\n+    }\n+\n+    @Test\n+    public void testArrayOfFours(){\n+        int[] arr = {4, 4, 4, 4};\n+        Assert.assertFalse(main.arrayOfOnesAndFours(arr));\n+    }\n+\n+    @Test\n+    public void testArrayOfAnyNumbers(){\n+        int[] arr = {2, 2354, 3, 1};\n+        Assert.assertFalse(main.arrayOfOnesAndFours(arr));\n+    }\n+\n+}"
  }
]
