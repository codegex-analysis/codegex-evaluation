[
  {
    "sha": "3f487d8f5b73fcffccb7b2432d4e7c0105009ce3",
    "filename": "Lesson7/src/main/java/Interfaces/AfterSuite.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Interfaces/AfterSuite.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Interfaces/AfterSuite.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson7/src/main/java/Interfaces/AfterSuite.java?ref=4b8fdd9905b8073db48177697e5066c6cb8d1929",
    "patch": "@@ -0,0 +1,12 @@\n+package Interfaces;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AfterSuite {\n+\n+}"
  },
  {
    "sha": "fcdff384700a943bad13c1f04e3e7d50f58cf2f3",
    "filename": "Lesson7/src/main/java/Interfaces/BeforeSuite.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Interfaces/BeforeSuite.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Interfaces/BeforeSuite.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson7/src/main/java/Interfaces/BeforeSuite.java?ref=4b8fdd9905b8073db48177697e5066c6cb8d1929",
    "patch": "@@ -0,0 +1,12 @@\n+package Interfaces;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface BeforeSuite {\n+\n+}"
  },
  {
    "sha": "d531a0419490cc76a91be7673c712c9145222991",
    "filename": "Lesson7/src/main/java/Interfaces/Test.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Interfaces/Test.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Interfaces/Test.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson7/src/main/java/Interfaces/Test.java?ref=4b8fdd9905b8073db48177697e5066c6cb8d1929",
    "patch": "@@ -0,0 +1,12 @@\n+package Interfaces;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Test {\n+    int priority();\n+}"
  },
  {
    "sha": "add7e6c8fb64075b6db61e731ae571f025209965",
    "filename": "Lesson7/src/main/java/SomethingTest.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/SomethingTest.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/SomethingTest.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson7/src/main/java/SomethingTest.java?ref=4b8fdd9905b8073db48177697e5066c6cb8d1929",
    "patch": "@@ -0,0 +1,41 @@\n+import Interfaces.AfterSuite;\n+import Interfaces.BeforeSuite;\n+import Interfaces.Test;\n+\n+public class SomethingTest {\n+\n+    @BeforeSuite\n+    public void beforeSuite() {\n+        System.out.println(\"Before Suite\");\n+    }\n+\n+    @Test(priority = 3)\n+    public void test3A() {\n+        System.out.println(\"Test 3A\");\n+    }\n+\n+    @Test(priority = 1)\n+    public void test1() {\n+        System.out.println(\"Test1\");\n+    }\n+\n+    @Test(priority = 2)\n+    public void test2() {\n+        System.out.println(\"Test 2\");\n+    }\n+\n+    @Test(priority = 3)\n+    public void test3B() {\n+        System.out.println(\"Test 3B\");\n+    }\n+\n+    @Test(priority = 4)\n+    public void test4() {\n+        System.out.println(\"Test 4\");\n+    }\n+\n+    @AfterSuite\n+    public void afterSuite() {\n+        System.out.println(\"After Suite\");\n+    }\n+}"
  },
  {
    "sha": "d01ffb5660f5d4db46ddbd85534ad9b905ce939a",
    "filename": "Lesson7/src/main/java/TaskForLesson7.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/TaskForLesson7.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/TaskForLesson7.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson7/src/main/java/TaskForLesson7.java?ref=4b8fdd9905b8073db48177697e5066c6cb8d1929",
    "patch": "@@ -0,0 +1,19 @@\n+/**\n+ * 1.Создать класс,который может выполнять «тесты»,в качестве тестов выступают классы с наборами методов с аннотациями @Test.\n+ * Для этого у него должен быть статический метод start(),которому в качестве параметра передается или объект типа Class,или имя класса.\n+ * Из «класса-теста» вначале должен быть запущен метод с аннотацией @BeforeSuite,если такой имеется,далее запущены методы с аннотациями @Test,\n+ * а по завершению всех тестов – метод с аннотацией @AfterSuite.\n+ * К каждому тесту необходимо также добавить приоритеты(int числа от 1до 10),в соответствии с которыми будет выбираться порядок их выполнения,\n+ * если приоритет одинаковый,то порядок не имеет значения.\n+ * Методы с аннотациями @BeforeSuite и @AfterSuite должны присутствовать в единственном экземпляре,иначе необходимо бросить RuntimeException при запуске «тестирования».\n+ */\n+\n+public class TaskForLesson7 {\n+    public static void main(String[] args) {\n+        try {\n+            Tester.start(SomethingTest.class);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "cbe71e2916804a41097ca44b98ee87fab51575bc",
    "filename": "Lesson7/src/main/java/Tester.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/Evengarr/TasksForLesson3/blob/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Tester.java",
    "raw_url": "https://github.com/Evengarr/TasksForLesson3/raw/4b8fdd9905b8073db48177697e5066c6cb8d1929/Lesson7/src/main/java/Tester.java",
    "contents_url": "https://api.github.com/repos/Evengarr/TasksForLesson3/contents/Lesson7/src/main/java/Tester.java?ref=4b8fdd9905b8073db48177697e5066c6cb8d1929",
    "patch": "@@ -0,0 +1,55 @@\n+import Interfaces.AfterSuite;\n+import Interfaces.BeforeSuite;\n+import Interfaces.Test;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+\n+public class Tester {\n+    public static void start(Class c) throws InvocationTargetException, IllegalAccessException {\n+        Method beforeMethod = null;\n+        Method afterMethod = null;\n+        ArrayList<Method> testMethod = new ArrayList<>();\n+\n+        Object object = null;\n+        try {\n+            object = c.newInstance();\n+        } catch (InstantiationException e) {\n+            e.printStackTrace();\n+        }\n+\n+        for (Method method : c.getDeclaredMethods()) {\n+            if (method.isAnnotationPresent(Test.class)) {\n+                testMethod.add(method);\n+            } else if (method.isAnnotationPresent(BeforeSuite.class)) {\n+                if (beforeMethod == null) {\n+                    beforeMethod = method;\n+                } else {\n+                    throw new RuntimeException(\"Должно быть не больше одного метода с аннотацией @BeforeSuite\");\n+                }\n+            }\n+            if (method.isAnnotationPresent(AfterSuite.class)) {\n+                if (afterMethod == null) {\n+                    afterMethod = method;\n+                } else {\n+                    throw new RuntimeException(\"Должно быть не больше одного метода с аннотацией @AfterSuite\");\n+                }\n+            }\n+        }\n+\n+        if (beforeMethod != null) {\n+            beforeMethod.invoke(object);\n+        }\n+\n+        testMethod.sort(Comparator.comparing(o -> o.getAnnotation(Test.class).priority()));\n+        for (Method method : testMethod) {\n+            method.invoke(object);\n+        }\n+\n+        if (afterMethod != null) {\n+            afterMethod.invoke(object);\n+        }\n+    }\n+}"
  }
]
