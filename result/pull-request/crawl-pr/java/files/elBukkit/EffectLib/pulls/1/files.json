[
  {
    "sha": "3f3196eeb25ccfe33bb18754414235f4cd19e222",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/CHANGELOG.md",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/CHANGELOG.md?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,5 +1,9 @@\n # CHANGELOG\n \n+# 7.0\n+\n+- Plugin cleanup and additional code changes\n+\n # 6.2\n \n  - Some specific internal FX fixes (please let me know if any effects look weird now)"
  },
  {
    "sha": "3a56906ae0f1f41d8d3117f8fecb0775df54ed2d",
    "filename": "EffectLib.doxyfile",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/EffectLib.doxyfile",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/EffectLib.doxyfile",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/EffectLib.doxyfile?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -38,7 +38,7 @@ PROJECT_NAME = EffectLib\n # could be handy for archiving the generated documentation or if some version\n # control system is used.\n \n-PROJECT_NUMBER = 5.0\n+PROJECT_NUMBER = 7.0\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description\n # for a project that appears at the top of each page and should give viewer a"
  },
  {
    "sha": "ada2784b53388aeee16f601ea8239c8a96e62fe2",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/pom.xml",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/pom.xml",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/pom.xml?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -3,7 +3,7 @@\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>de.slikey</groupId>\n     <artifactId>EffectLib</artifactId>\n-    <version>6.2-SNAPSHOT</version>\n+    <version>7.0</version>\n \n     <name>EffectLib</name>\n     <url>http://www.kevin-carstens.de/</url>\n@@ -29,11 +29,12 @@\n     <distributionManagement>\n         <repository>\n             <id>maven.elmakers.com</id>\n-            <url>http://maven.elmakers.com/repository/</url>\n+            <url>https://maven.elmakers.com/repository/</url>\n         </repository>\n+\n         <snapshotRepository>\n             <id>maven.elmakers.com</id>\n-            <url>http://maven.elmakers.com/repository/</url>\n+            <url>https://maven.elmakers.com/repository/</url>\n         </snapshotRepository>\n     </distributionManagement>\n \n@@ -46,14 +47,12 @@\n \n     <dependencies>\n         <dependency>\n-            <groupId>org.bukkit</groupId>\n-            <artifactId>bukkit</artifactId>\n-            <version>1.13-R0.1-SNAPSHOT</version>\n-            <!-- for testing backwards-compat\n-            <version>1.9-R0.1-SNAPSHOT</version>\n-            -->\n+            <groupId>org.spigotmc</groupId>\n+            <artifactId>spigot-api</artifactId>\n+            <version>1.16.4-R0.1-SNAPSHOT</version>\n             <scope>provided</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>net.objecthunter</groupId>\n             <artifactId>exp4j</artifactId>\n@@ -75,16 +74,17 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n-                <version>3.3</version>\n+                <version>3.8.1</version>\n                 <configuration>\n-                    <source>1.6</source>\n-                    <target>1.6</target>\n+                    <source>7</source>\n+                    <target>7</target>\n                 </configuration>\n             </plugin>\n+\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-shade-plugin</artifactId>\n-                <version>1.5</version>\n+                <version>3.2.4</version>\n                 <executions>\n                     <execution>\n                         <phase>package</phase>"
  },
  {
    "sha": "0d4bf0f58f107ee0b5e32bd6813c80fb487a96a6",
    "filename": "src/main/java/de/slikey/effectlib/Effect.java",
    "status": "modified",
    "additions": 111,
    "deletions": 68,
    "changes": 179,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/Effect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/Effect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/Effect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,20 +1,31 @@\n package de.slikey.effectlib;\n \n-import de.slikey.effectlib.util.DynamicLocation;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.concurrent.ThreadLocalRandom;\n \n-import org.bukkit.Particle;\n import org.bukkit.Color;\n-import org.bukkit.Location;\n import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Location;\n+import org.bukkit.util.Vector;\n import org.bukkit.entity.Entity;\n import org.bukkit.entity.Player;\n-import org.bukkit.util.Vector;\n+import org.bukkit.configuration.ConfigurationSection;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import de.slikey.effectlib.util.RandomUtils;\n+import de.slikey.effectlib.util.DynamicLocation;\n \n public abstract class Effect implements Runnable {\n \n+    /**\n+     * Sub effect\n+     * This will play a subeffect on the effect location\n+     */\n+    private String subEffectClass = null;\n+    public ConfigurationSection subEffect = null;\n+\n+\n     /**\n      * Handles the type, the effect is played.\n      *\n@@ -28,6 +39,9 @@\n      */\n     public Color color = null;\n \n+    public List<Color> colorList = null;\n+    public String colors = null;\n+\n     /**\n      * This can be used to give particles a set speed when spawned.\n      * This will not work with colored particles.\n@@ -74,6 +88,11 @@\n      */\n     public Integer duration = null;\n \n+    /**\n+     * Probability that this effect will play on each iteration\n+     */\n+    public double probability = 1;\n+\n     /**\n      * Callback to run, after effect is done.\n      *\n@@ -192,24 +211,43 @@\n \n     private boolean done = false;\n \n+    private long startTime;\n+\n     public Effect(EffectManager effectManager) {\n-        if (effectManager == null) {\n-            throw new IllegalArgumentException(\"EffectManager cannot be null!\");\n-        }\n+        if (effectManager == null) throw new IllegalArgumentException(\"EffectManager cannot be null!\");\n+\n         this.effectManager = effectManager;\n-        this.visibleRange = effectManager.getParticleRange();\n+        visibleRange = effectManager.getParticleRange();\n+    }\n+\n+    protected void initialize() {\n+        if (period < 1) period = 1;\n+\n+        if (colors != null) {\n+            colorList = new ArrayList<>();\n+            String[] args = colors.split(\",\");\n+            if (args.length >= 1) {\n+                for (String str : args) {\n+                    try {\n+                        int rgb = Integer.parseInt(str.trim().replace(\"#\", \"\"), 16);\n+                        colorList.add(Color.fromRGB(rgb));\n+                    } catch (NumberFormatException ignored) {}\n+                }\n+            }\n+        }\n+\n+        if (subEffect != null) {\n+            subEffectClass = subEffect.getString(\"subEffectClass\");\n+        }\n     }\n \n     public final void cancel() {\n         cancel(true);\n     }\n \n     public final void cancel(boolean callback) {\n-        if (callback) {\n-            done();\n-        } else {\n-            done = true;\n-        }\n+        if (callback) done();\n+        else done = true;\n     }\n \n     public final boolean isDone() {\n@@ -231,22 +269,23 @@ public final void run() {\n             return;\n         }\n         if (done) {\n+            effectManager.removeEffect(this);\n             return;\n         }\n+\n         try {\n-            onRun();\n+            if (RandomUtils.checkProbability(probability)) {\n+                onRun();\n+            }\n         } catch (Exception ex) {\n             done();\n             effectManager.onError(ex);\n         }\n+\n         if (type == EffectType.REPEATING) {\n-            if (iterations == -1) {\n-                return;\n-            }\n+            if (iterations == -1) return;\n             iterations--;\n-            if (iterations < 1) {\n-                done();\n-            }\n+            if (iterations < 1) done();\n         } else {\n             done();\n         }\n@@ -257,7 +296,7 @@ public final void run() {\n      * state can be reset.\n      */\n     protected void reset() {\n-        this.done = false;\n+        done = false;\n     }\n \n     public void prepare() {\n@@ -323,17 +362,12 @@ public final Location getTarget() {\n      * Set the Location this Effect is centered on.\n      */\n     public void setDynamicOrigin(DynamicLocation location) {\n-        if (location == null) {\n-            throw new IllegalArgumentException(\"Origin Location cannot be null!\");\n-        }\n+        if (location == null) throw new IllegalArgumentException(\"Origin Location cannot be null!\");\n         origin = location;\n \n-        if (offset != null) {\n-            origin.addOffset(offset);\n-        }\n-        if (relativeOffset != null) {\n-            origin.addRelativeOffset(relativeOffset);\n-        }\n+        if (offset != null) origin.addOffset(offset);\n+        if (relativeOffset != null) origin.addRelativeOffset(relativeOffset);\n+\n         origin.setDirectionOffset(yawOffset, pitchOffset);\n         origin.setYaw(yaw);\n         origin.setPitch(pitch);\n@@ -347,32 +381,22 @@ public void setDynamicOrigin(DynamicLocation location) {\n      */\n     public void setDynamicTarget(DynamicLocation location) {\n         target = location;\n-        if (target != null && targetOffset != null) {\n-            target.addOffset(targetOffset);\n-        }\n-        if (target != null) {\n-            target.setUpdateLocation(updateLocations);\n-            target.setUpdateDirection(updateDirections);\n-        }\n+        if (target != null && targetOffset != null) target.addOffset(targetOffset);\n+        if (target == null) return;\n+        target.setUpdateLocation(updateLocations);\n+        target.setUpdateDirection(updateDirections);\n     }\n \n     protected final boolean validate() {\n         // Check if the origin and target entities are present\n-        if (disappearWithOriginEntity && (origin != null && !origin.hasValidEntity())) {\n-            return false;\n-        }\n-        \n-        if (disappearWithTargetEntity && (target != null && !target.hasValidEntity())) {\n-            return false;\n-        }\n-        \n+        if (disappearWithOriginEntity && (origin != null && !origin.hasValidEntity())) return false;\n+        if (disappearWithTargetEntity && (target != null && !target.hasValidEntity())) return false;\n+\n         // Check for a valid Location\n         updateLocation();\n         updateTarget();\n         Location location = getLocation();\n-        if (location == null) {\n-            return false;\n-        }\n+        if (location == null) return false;\n         if (autoOrient) {\n             Location targetLocation = target == null ? null : target.getLocation();\n             if (targetLocation != null) {\n@@ -387,45 +411,50 @@ protected final boolean validate() {\n \n     protected void updateDuration() {\n         if (duration != null) {\n-            if (period < 1) {\n-                period = 1;\n-            }\n+            if (period < 1) period = 1;\n             iterations = duration / period / 50;\n         }\n         maxIterations = iterations;\n     }\n \n     protected void updateLocation() {\n-        if (origin != null) {\n-            origin.update();\n-        }\n+        if (origin != null) origin.update();\n     }\n \n     protected void updateTarget() {\n-        if (target != null) {\n-            target.update();\n-        }\n+        if (target != null) target.update();\n     }\n \n     protected void display(Particle effect, Location location) {\n-        display(effect, location, this.color);\n+        display(effect, location, color);\n     }\n \n     protected void display(Particle particle, Location location, Color color) {\n         display(particle, location, color, particleData != 0 ? particleData : speed, particleCount);\n     }\n \n     protected void display(Particle particle, Location location, float speed, int amount) {\n-        display(particle, location, this.color, speed, amount);\n+        display(particle, location, color, speed, amount);\n     }\n \n     protected void display(Particle particle, Location location, Color color, float speed, int amount) {\n-        if (targetPlayers == null && targetPlayer != null) {\n-            targetPlayers = new ArrayList<Player>();\n-            targetPlayers.add(targetPlayer);\n+        // display particles only when particleCount is equal or more than 0\n+        if (particleCount >= 0) {\n+            if (targetPlayers == null && targetPlayer != null) {\n+                targetPlayers = new ArrayList<>();\n+                targetPlayers.add(targetPlayer);\n+            }\n+\n+            Color currentColor = color;\n+            if (colorList != null && !colorList.isEmpty()) {\n+                currentColor = colorList.get(ThreadLocalRandom.current().nextInt(colorList.size()));\n+            }\n+\n+            effectManager.display(particle, location, particleOffsetX, particleOffsetY, particleOffsetZ, speed, amount,\n+                    particleSize, currentColor, material, materialData, visibleRange, targetPlayers);\n         }\n-        effectManager.display(particle, location, particleOffsetX, particleOffsetY, particleOffsetZ, speed, amount,\n-                particleSize, color, material, materialData, visibleRange, targetPlayers);\n+\n+        if (subEffectClass != null) effectManager.start(subEffectClass, subEffect, location);\n     }\n \n     private void done() {\n@@ -466,6 +495,20 @@ public void setTargetLocation(Location location) {\n         target = new DynamicLocation(location);\n     }\n \n-    public Player getTargetPlayer() {return this.targetPlayer; }\n-    public void setTargetPlayer(Player p){ this.targetPlayer = p; }\n+    public Player getTargetPlayer() {\n+    \treturn targetPlayer;\n+    }\n+\n+    public void setTargetPlayer(Player p) {\n+    \ttargetPlayer = p;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public void setStartTime(long startTime) {\n+        this.startTime = startTime;\n+    }\n+\n }"
  },
  {
    "sha": "fc982846c42da58cbc1bb21c47df7236b0375aae",
    "filename": "src/main/java/de/slikey/effectlib/EffectLib.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/EffectLib.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/EffectLib.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/EffectLib.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,6 +1,7 @@\n package de.slikey.effectlib;\n \n import java.util.List;\n+\n import org.bukkit.event.HandlerList;\n import org.bukkit.plugin.java.JavaPlugin;\n \n@@ -128,7 +129,7 @@ public EffectLib() {\n \n     @Override\n     public void onEnable() {\n-        EffectManager.initialize();\n+\n     }\n \n     @Override"
  },
  {
    "sha": "7526285c8e4de4785975fcc583b33bf46ab58e52",
    "filename": "src/main/java/de/slikey/effectlib/EffectManager.java",
    "status": "modified",
    "additions": 149,
    "deletions": 135,
    "changes": 284,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/EffectManager.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/EffectManager.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/EffectManager.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,43 +1,37 @@\n package de.slikey.effectlib;\n \n-import de.slikey.effectlib.math.Transforms;\n-import de.slikey.effectlib.util.ConfigUtils;\n-import de.slikey.effectlib.util.Disposable;\n-import de.slikey.effectlib.util.DynamicLocation;\n-import de.slikey.effectlib.util.ImageLoadCallback;\n-import de.slikey.effectlib.util.ImageLoadTask;\n-import de.slikey.effectlib.util.ParticleDisplay;\n+import java.io.File;\n+import java.util.Map;\n+import java.util.Set;\n+import java.awt.Font;\n+import java.util.List;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.lang.reflect.Field;\n+import java.util.logging.Level;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.Constructor;\n \n-import org.bukkit.Bukkit;\n import org.bukkit.Color;\n+import org.bukkit.Bukkit;\n import org.bukkit.Location;\n import org.bukkit.Material;\n import org.bukkit.Particle;\n-import org.bukkit.configuration.ConfigurationSection;\n-import org.bukkit.configuration.MemoryConfiguration;\n+import org.bukkit.util.Vector;\n import org.bukkit.entity.Entity;\n import org.bukkit.entity.Player;\n import org.bukkit.plugin.Plugin;\n-import org.bukkit.scheduler.BukkitScheduler;\n import org.bukkit.scheduler.BukkitTask;\n-import org.bukkit.util.Vector;\n-\n-import java.awt.Font;\n-import java.awt.image.BufferedImage;\n-import java.io.File;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.logging.Level;\n+import org.bukkit.scheduler.BukkitScheduler;\n+import org.bukkit.configuration.MemoryConfiguration;\n+import org.bukkit.configuration.ConfigurationSection;\n \n import com.google.common.base.CaseFormat;\n \n+import de.slikey.effectlib.util.*;\n+\n /**\n  * Dispose the EffectManager if you don't need him anymore.\n  *\n@@ -46,31 +40,31 @@\n  */\n public class EffectManager implements Disposable {\n \n-    private static List<EffectManager> effectManagers;\n-    private static Map<String, Class<? extends Effect>> effectClasses = new HashMap<String, Class<? extends Effect>>();\n-    private final Plugin owningPlugin;\n-    private final Map<Effect, BukkitTask> effects;\n+    private static List<EffectManager> effectManagers = new ArrayList<>();\n+    private static Map<String, Class<? extends Effect>> effectClasses = new HashMap<>();\n+    private Plugin owningPlugin;\n+    private Map<Effect, BukkitTask> effects;\n     private ParticleDisplay display;\n     private boolean disposed;\n     private boolean disposeOnTermination;\n     private boolean debug = false;\n     private int visibleRange = 32;\n     private File imageCacheFolder;\n-    private Map<String, BufferedImage[]> imageCache = new HashMap<String, BufferedImage[]>();\n+    private Map<String, BufferedImage[]> imageCache;\n \n     public EffectManager(Plugin owningPlugin) {\n         imageCacheFolder = owningPlugin == null ? null : new File(owningPlugin.getDataFolder(), \"imagecache\");\n+        imageCache = new HashMap<>();\n         this.owningPlugin = owningPlugin;\n-        Transforms.setEffectManager(this);\n-        effects = new HashMap<Effect, BukkitTask>();\n+        effects = new HashMap<>();\n         disposed = false;\n         disposeOnTermination = false;\n+        effectManagers.add(this);\n     }\n \n     private ParticleDisplay getDisplay() {\n-        if (display == null) {\n-            display = ParticleDisplay.newInstance();\n-        }\n+        if (display == null) display = ParticleDisplay.newInstance();\n+\n         display.setManager(this);\n \n         return display;\n@@ -81,45 +75,29 @@ public void display(Particle particle, Location center, float offsetX, float off\n     }\n \n     public void start(Effect effect) {\n-        if (disposed) {\n-            throw new IllegalStateException(\"EffectManager is disposed and not able to accept any effects.\");\n-        }\n-        if (disposeOnTermination) {\n-            throw new IllegalStateException(\"EffectManager is awaiting termination to dispose and not able to accept any effects.\");\n-        }\n-\n-        if (effects.containsKey(effect)) {\n-            effect.cancel(false);\n-        }\n-\n+        if (disposed) throw new IllegalStateException(\"EffectManager is disposed and not able to accept any effects.\");\n+        if (disposeOnTermination) throw new IllegalStateException(\"EffectManager is awaiting termination to dispose and not able to accept any effects.\");\n+        if (effects.containsKey(effect)) effect.cancel(false);\n         if (!owningPlugin.isEnabled()) return;\n \n         BukkitScheduler s = Bukkit.getScheduler();\n         BukkitTask task = null;\n         switch (effect.getType()) {\n             case INSTANT:\n-                if(effect.isAsynchronous()) {\n-                    task = s.runTaskAsynchronously(owningPlugin, effect);\n-                } else {\n-                    task = s.runTask(owningPlugin, effect);\n-                }\n+                if (effect.isAsynchronous()) task = s.runTaskAsynchronously(owningPlugin, effect);\n+                else task = s.runTask(owningPlugin, effect);\n                 break;\n             case DELAYED:\n-                if (effect.isAsynchronous()) {\n-                    task = s.runTaskLaterAsynchronously(owningPlugin, effect, effect.getDelay());\n-                } else {\n-                    task = s.runTaskLater(owningPlugin, effect, effect.getDelay());\n-                }\n+                if (effect.isAsynchronous()) task = s.runTaskLaterAsynchronously(owningPlugin, effect, effect.getDelay());\n+                else task = s.runTaskLater(owningPlugin, effect, effect.getDelay());\n                 break;\n             case REPEATING:\n-                if (effect.isAsynchronous()) {\n-                    task = s.runTaskTimerAsynchronously(owningPlugin, effect, effect.getDelay(), effect.getPeriod());\n-                } else {\n-                    task = s.runTaskTimer(owningPlugin, effect, effect.getDelay(), effect.getPeriod());\n-                }\n+                if (effect.isAsynchronous()) task = s.runTaskTimerAsynchronously(owningPlugin, effect, effect.getDelay(), effect.getPeriod());\n+                else task = s.runTaskTimer(owningPlugin, effect, effect.getDelay(), effect.getPeriod());\n                 break;\n         }\n         synchronized (this) {\n+            effect.setStartTime(System.currentTimeMillis());\n             effects.put(effect, task);\n         }\n     }\n@@ -181,9 +159,7 @@ public Effect getEffectByClassName(String effectClass) {\n             // A shaded manager may provide a fully-qualified path.\n             if (effectLibClass == null && !effectClass.contains(\".\")) {\n                 effectClass = \"de.slikey.effectlib.effect.\" + effectClass;\n-                if (!effectClass.endsWith(\"Effect\")) {\n-                    effectClass = effectClass + \"Effect\";\n-                }\n+                if (!effectClass.endsWith(\"Effect\")) effectClass = effectClass + \"Effect\";\n                 effectLibClass = effectClasses.get(effectClass);\n             }\n             if (effectLibClass == null) {\n@@ -208,36 +184,45 @@ public Effect getEffectByClassName(String effectClass) {\n \n     public Effect getEffect(String effectClass, ConfigurationSection parameters, DynamicLocation origin, DynamicLocation target, ConfigurationSection parameterMap, Player targetPlayer) {\n         Effect effect = getEffectByClassName(effectClass);\n-        if (effect == null) {\n-            return null;\n+        if (effect == null) return null;\n+\n+        // Some specific shortcuts\n+        if (parameters.contains(\"particle_offset\")) {\n+            parameters.set(\"particle_offset_x\", parameters.get(\"particle_offset\"));\n+            parameters.set(\"particle_offset_y\", parameters.get(\"particle_offset\"));\n+            parameters.set(\"particle_offset_z\", parameters.get(\"particle_offset\"));\n+            parameters.set(\"particle_offset\", null);\n+        }\n+        if (parameters.contains(\"particleOffset\")) {\n+            parameters.set(\"particleOffsetX\", parameters.get(\"particleOffset\"));\n+            parameters.set(\"particleOffsetY\", parameters.get(\"particleOffset\"));\n+            parameters.set(\"particleOffsetZ\", parameters.get(\"particleOffset\"));\n+            parameters.set(\"particleOffset\", null);\n         }\n \n         Collection<String> keys = parameters.getKeys(false);\n         for (String key : keys) {\n-            if (key.equals(\"class\")) {\n-                continue;\n-            }\n+            if (key.equals(\"class\")) continue;\n \n             if (!setField(effect, key, parameters, parameterMap) && debug) {\n                 owningPlugin.getLogger().warning(\"Unable to assign EffectLib property \" + key + \" of class \" + effect.getClass().getName());\n             }\n         }\n \n+        effect.initialize();\n+\n         effect.setDynamicOrigin(origin);\n         effect.setDynamicTarget(target);\n \n-        if (targetPlayer != null)\n-            effect.setTargetPlayer(targetPlayer);\n+        if (targetPlayer != null) effect.setTargetPlayer(targetPlayer);\n \n         return effect;\n     }\n \n     @Deprecated\n     public Effect start(String effectClass, ConfigurationSection parameters, DynamicLocation origin, DynamicLocation target, Map<String, String> parameterMap, Player targetPlayer) {\n         ConfigurationSection configMap = null;\n-        if (parameterMap != null) {\n-            configMap = ConfigUtils.toStringConfiguration(parameterMap);\n-        }\n+        if (parameterMap != null) configMap = ConfigUtils.toStringConfiguration(parameterMap);\n \n         return start(effectClass, parameters, origin, target, configMap, targetPlayer);\n     }\n@@ -255,53 +240,56 @@ public Effect start(String effectClass, ConfigurationSection parameters, Dynamic\n      */\n     public Effect start(String effectClass, ConfigurationSection parameters, DynamicLocation origin, DynamicLocation target, ConfigurationSection parameterMap, Player targetPlayer) {\n         Effect effect = getEffect(effectClass, parameters, origin, target, parameterMap, targetPlayer);\n-        if (effect == null) {\n-            return null;\n-        }\n+        if (effect == null) return null;\n         effect.start();\n         return effect;\n     }\n     \n     public void cancel(boolean callback) {\n-        List<Effect> allEffects = new ArrayList<Effect>(effects.keySet());\n+        List<Effect> allEffects = new ArrayList<>(effects.keySet());\n         for (Effect effect : allEffects) {\n             effect.cancel(callback);\n         }\n     }\n     \n     public void done(Effect effect) {\n+        removeEffect(effect);\n+        if (effect.callback != null && owningPlugin.isEnabled()) Bukkit.getScheduler().runTask(owningPlugin, effect.callback);\n+        if (disposeOnTermination && effects.isEmpty()) dispose();\n+    }\n+\n+    public void removeEffect(Effect effect) {\n         synchronized (this) {\n             BukkitTask existingTask = effects.get(effect);\n-            if (existingTask != null) {\n-                existingTask.cancel();\n-            }\n+            if (existingTask != null) existingTask.cancel();\n             effects.remove(effect);\n         }\n-        if (effect.callback != null && owningPlugin.isEnabled()) {\n-            Bukkit.getScheduler().runTask(owningPlugin, effect.callback);\n-        }\n-        if (disposeOnTermination && effects.isEmpty()) {\n-            dispose();\n-        }\n     }\n     \n     @Override\n     public void dispose() {\n-        if (disposed) {\n-            return;\n-        }\n+        if (disposed) return;\n         disposed = true;\n         cancel(false);\n-        if (effectManagers != null) {\n-            effectManagers.remove(this);\n-        }\n+        effects = null;\n+        display = null;\n+        imageCache = null;\n+        owningPlugin = null;\n+        imageCacheFolder = null;\n+        effectManagers.remove(this);\n     }\n     \n     public void disposeOnTermination() {\n         disposeOnTermination = true;\n-        if (effects.isEmpty()) {\n-            dispose();\n-        }\n+        if (effects.isEmpty()) dispose();\n+    }\n+\n+    public boolean isDisposed() {\n+        return disposed;\n+    }\n+\n+    public boolean isDisposedOnTermination() {\n+        return disposeOnTermination;\n     }\n \n     public void enableDebug(boolean enable) {\n@@ -313,21 +301,19 @@ public boolean isDebugEnabled() {\n     }\n     \n     public void onError(Throwable ex) {\n-        if (debug) {\n-            owningPlugin.getLogger().log(Level.WARNING, \"Particle Effect error\", ex);\n-        }\n+        if (debug) owningPlugin.getLogger().log(Level.WARNING, \"Particle Effect error\", ex);\n     }\n \n     public void onError(String message) {\n-        if (debug) {\n-            owningPlugin.getLogger().log(Level.WARNING, message);\n-        }\n+        if (debug) owningPlugin.getLogger().log(Level.WARNING, message);\n     }\n \n     public void onError(String message, Throwable ex) {\n-        if (debug) {\n-            owningPlugin.getLogger().log(Level.WARNING, message, ex);\n-        }\n+        if (debug) owningPlugin.getLogger().log(Level.WARNING, message, ex);\n+    }\n+\n+    public Map<Effect, BukkitTask> getEffects() {\n+        return effects;\n     }\n \n     public int getParticleRange() {\n@@ -348,40 +334,68 @@ protected boolean setField(Object effect, String key, ConfigurationSection secti\n             String fieldKey = key;\n \n             // Allow underscore_style and dash_style parameters\n-            if (key.contains(\"-\")) {\n-                key = key.replace(\"-\", \"_\");\n-            }\n-            if (key.contains(\"_\")) {\n-                key = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, key);\n-            }\n+            if (key.contains(\"-\")) key = key.replace(\"-\", \"_\");\n+\n+            if (key.contains(\"_\")) key = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, key);\n \n             ConfigurationSection fieldSection = section;\n             if (parameterMap != null && stringValue.startsWith(\"$\") && parameterMap.contains(stringValue)) {\n                 fieldKey = stringValue;\n                 fieldSection = parameterMap;\n             }\n-            Field field = effect.getClass().getField(key);\n+\n+            Field field = null;\n+\n+            try {\n+                field = effect.getClass().getField(key);\n+            } catch (NoSuchFieldException exception) {\n+\n+            }\n+\n+            if (field == null) return false;\n+\n             if (field.getType().equals(Integer.TYPE) || field.getType().equals(Integer.class)) {\n-                field.set(effect, fieldSection.getInt(fieldKey));\n+                int intValue = Integer.MAX_VALUE;\n+                if (!ConfigUtils.isMaxValue(stringValue)) intValue = fieldSection.getInt(fieldKey);\n+                field.set(effect, intValue);\n             } else if (field.getType().equals(Float.TYPE) || field.getType().equals(Float.class)) {\n-                field.set(effect, (float)fieldSection.getDouble(fieldKey));\n+                float floatValue = Float.MAX_VALUE;\n+                if (!ConfigUtils.isMaxValue(stringValue)) floatValue = (float) fieldSection.getDouble(fieldKey);\n+                field.set(effect,floatValue);\n             } else if (field.getType().equals(Double.TYPE) || field.getType().equals(Double.class)) {\n-                field.set(effect, fieldSection.getDouble(fieldKey));\n+                double doubleValue = Double.MAX_VALUE;\n+                if (!ConfigUtils.isMaxValue(stringValue)) doubleValue = fieldSection.getDouble(fieldKey);\n+                field.set(effect, doubleValue);\n             } else if (field.getType().equals(Boolean.TYPE) || field.getType().equals(Boolean.class)) {\n                 field.set(effect, fieldSection.getBoolean(fieldKey));\n             } else if (field.getType().equals(Long.TYPE) || field.getType().equals(Long.class)) {\n-                field.set(effect, fieldSection.getLong(fieldKey));\n+                long longValue = Long.MAX_VALUE;\n+                if (!ConfigUtils.isMaxValue(stringValue)) longValue = fieldSection.getLong(fieldKey);\n+                field.set(effect, longValue);\n             } else if (field.getType().equals(Short.TYPE) || field.getType().equals(Short.class)) {\n-                field.set(effect, (short)fieldSection.getInt(fieldKey));\n+                short shortValue = Short.MAX_VALUE;\n+                if (!ConfigUtils.isMaxValue(stringValue)) shortValue = (short) fieldSection.getInt(fieldKey);\n+                field.set(effect, shortValue);\n             } else if (field.getType().equals(Byte.TYPE) || field.getType().equals(Byte.class)) {\n-                field.set(effect, (byte)fieldSection.getInt(fieldKey));\n+                byte byteValue = Byte.MAX_VALUE;\n+                if (!ConfigUtils.isMaxValue(stringValue)) byteValue = (byte) fieldSection.getInt(fieldKey);\n+                field.set(effect, byteValue);\n             } else if (field.getType().equals(String.class)) {\n                 String value = fieldSection.getString(fieldKey);\n                 field.set(effect, value);\n             } else if (field.getType().equals(Color.class)) {\n                 try {\n                     String value = fieldSection.getString(fieldKey);\n-                    Integer rgb = Integer.parseInt(value, 16);\n+                    Integer rgb;\n+                    if (value.equalsIgnoreCase(\"random\")) {\n+                        byte red =  (byte) (Math.random() * 255);\n+                        byte green =  (byte) (Math.random() * 255);\n+                        byte blue  =  (byte) (Math.random() * 255);\n+                        rgb = (red << 16) | (green << 8) | blue;\n+                    } else {\n+                        if (value.startsWith(\"#\")) value = value.substring(1);\n+                        rgb = Integer.parseInt(value, 16);\n+                    }\n                     Color color = Color.fromRGB(rgb);\n                     field.set(effect, color);\n                 } catch (Exception ex) {\n@@ -447,36 +461,35 @@ protected boolean setField(Object effect, String key, ConfigurationSection secti\n                 } catch (Exception ex) {\n                     onError(ex);\n                 }\n+            } else if (field.getType().equals(CustomSound.class)) {\n+                try {\n+                    String value = fieldSection.getString(fieldKey);\n+                    field.set(effect, new CustomSound(value));\n+                } catch (Exception ex) {\n+                    onError(ex);\n+                }\n             } else {\n                 return false;\n             }\n \n             return true;\n         } catch (Exception ex) {\n-            this.onError(ex);\n+            onError(ex);\n         }\n \n         return false;\n     }\n-    \n-    public static void initialize() {\n-        effectManagers = new ArrayList<EffectManager>();\n-    }\n-    \n+\n     public static List<EffectManager> getManagers() {\n-        if (effectManagers == null) {\n-            initialize();\n-        }\n         return effectManagers;\n     }\n     \n     public static void disposeAll() {\n-        if (effectManagers != null) {\n-            for (Iterator<EffectManager> i = effectManagers.iterator(); i.hasNext();) {\n-                EffectManager em = i.next();\n-                i.remove();\n-                em.dispose();\n-            }\n+        if (effectManagers == null) return;\n+        for (Iterator<EffectManager> i = effectManagers.iterator(); i.hasNext();) {\n+            EffectManager em = i.next();\n+            i.remove();\n+            em.dispose();\n         }\n     }\n \n@@ -512,4 +525,5 @@ public void run() {\n     public void registerEffectClass(String key, Class<? extends Effect> effectClass) {\n         effectClasses.put(key, effectClass);\n     }\n+\n }"
  },
  {
    "sha": "bc130d1396b114415235421d31cbe5de2479f1fc",
    "filename": "src/main/java/de/slikey/effectlib/EffectType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/EffectType.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/EffectType.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/EffectType.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -13,6 +13,6 @@\n     /**\n      * Effect is once delayed played. Set delay with {@link Effect.delay}.\n      */\n-    DELAYED;\n+    DELAYED\n \n }"
  },
  {
    "sha": "0e22b2c5d8c7fc7ccdbcc22a8d7c384546a76248",
    "filename": "src/main/java/de/slikey/effectlib/effect/AnimatedBallEffect.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/AnimatedBallEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/AnimatedBallEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/AnimatedBallEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,13 +1,14 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Particle;\n+import org.bukkit.Location;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n /**\n  * Creates an animated Sphere.. Thanks to the author for sharing it!\n@@ -59,14 +60,14 @@\n \n     public AnimatedBallEffect(EffectManager effectManager) {\n         super(effectManager);\n-        this.type = EffectType.REPEATING;\n-        this.iterations = 500;\n-        this.period = 1;\n+        type = EffectType.REPEATING;\n+        iterations = 500;\n+        period = 1;\n     }\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override"
  },
  {
    "sha": "f19b3f682a4bd77f91e764c122b5c1f83037c9e5",
    "filename": "src/main/java/de/slikey/effectlib/effect/ArcEffect.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ArcEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ArcEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/ArcEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,12 +1,13 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n import org.bukkit.Particle;\n import org.bukkit.Location;\n import org.bukkit.util.Vector;\n \n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+\n public class ArcEffect extends Effect {\n \n     /**\n@@ -38,20 +39,23 @@ public ArcEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n         Location target = getTarget();\n+\n         if (target == null) {\n             cancel();\n             return;\n         }\n+\n         Vector link = target.toVector().subtract(location.toVector());\n         float length = (float) link.length();\n         float pitch = (float) (4 * height / Math.pow(length, 2));\n+\n         for (int i = 0; i < particles; i++) {\n             Vector v = link.clone().normalize().multiply((float) length * i / particles);\n             float x = ((float) i / particles) * length - length / 2;"
  },
  {
    "sha": "bbdbcf9488ed9b6c4b1536807ed05dd1e11d485e",
    "filename": "src/main/java/de/slikey/effectlib/effect/AtomEffect.java",
    "status": "modified",
    "additions": 12,
    "deletions": 6,
    "changes": 18,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/AtomEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/AtomEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/AtomEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,14 +1,15 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Color;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.RandomUtils;\n import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Color;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class AtomEffect extends Effect {\n \n@@ -59,6 +60,8 @@\n      */\n     public double angularVelocity = Math.PI / 80d;\n \n+    public boolean orient = false;\n+\n     /**\n      * Internal counter\n      */\n@@ -73,25 +76,28 @@ public AtomEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n         for (int i = 0; i < particlesNucleus; i++) {\n             Vector v = RandomUtils.getRandomVector().multiply(radius * radiusNucleus);\n+            if (orient) v = VectorUtils.rotateVector(v, location);\n             location.add(v);\n             display(particleNucleus, location, colorNucleus);\n             location.subtract(v);\n         }\n+\n         for (int i = 0; i < particlesOrbital; i++) {\n             double angle = step * angularVelocity;\n             for (int j = 0; j < orbitals; j++) {\n                 double xRotation = (Math.PI / orbitals) * j;\n                 Vector v = new Vector(Math.cos(angle), Math.sin(angle), 0).multiply(radius);\n                 VectorUtils.rotateAroundAxisX(v, xRotation);\n                 VectorUtils.rotateAroundAxisY(v, rotation);\n+                if (orient) v = VectorUtils.rotateVector(v, location);\n                 location.add(v);\n                 display(particleOrbital, location, colorOrbital);\n                 location.subtract(v);"
  },
  {
    "sha": "b658e52da6173da987193fc2127030c6619418b9",
    "filename": "src/main/java/de/slikey/effectlib/effect/BigBangEffect.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/BigBangEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/BigBangEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/BigBangEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,18 +1,19 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n-import de.slikey.effectlib.util.RandomUtils;\n import org.bukkit.Color;\n-import org.bukkit.FireworkEffect;\n-import org.bukkit.FireworkEffect.Builder;\n-import org.bukkit.Location;\n import org.bukkit.Sound;\n-import org.bukkit.entity.EntityType;\n+import org.bukkit.Location;\n+import org.bukkit.util.Vector;\n+import org.bukkit.FireworkEffect;\n import org.bukkit.entity.Firework;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.FireworkEffect.Builder;\n import org.bukkit.inventory.meta.FireworkMeta;\n-import org.bukkit.util.Vector;\n+\n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.RandomUtils;\n \n public class BigBangEffect extends Effect {\n \n@@ -42,7 +43,7 @@ public BigBangEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n@@ -76,4 +77,5 @@ protected void detonate(Location location, Vector v) {\n         fw.setFireworkMeta(meta);\n         fw.detonate();\n     }\n+\n }"
  },
  {
    "sha": "d3caaa8dcd260130e820c1b4742a253ed7b791f3",
    "filename": "src/main/java/de/slikey/effectlib/effect/BleedEffect.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/BleedEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/BleedEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/BleedEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,12 +1,14 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n-import de.slikey.effectlib.util.RandomUtils;\n import org.bukkit.Effect;\n import org.bukkit.Location;\n+import org.bukkit.Material;\n import org.bukkit.entity.Entity;\n \n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.RandomUtils;\n+\n public class BleedEffect extends de.slikey.effectlib.Effect {\n \n     /**\n@@ -22,7 +24,7 @@\n     /**\n      * Color of blood. Default is red (152)\n      */\n-    public int color = 152;\n+    public Material material = Material.REDSTONE_BLOCK;\n \n     public BleedEffect(EffectManager effectManager) {\n         super(effectManager);\n@@ -36,11 +38,9 @@ public void onRun() {\n         // Location to spawn the blood-item.\n         Location location = getLocation();\n         location.add(0, RandomUtils.random.nextFloat() * height, 0);\n-        location.getWorld().playEffect(location, Effect.STEP_SOUND, color);\n+        location.getWorld().playEffect(location, Effect.STEP_SOUND, material);\n \n         Entity entity = getEntity();\n-        if (hurt && entity != null) {\n-            entity.playEffect(org.bukkit.EntityEffect.HURT);\n-        }\n+        if (hurt && entity != null) entity.playEffect(org.bukkit.EntityEffect.HURT);\n     }\n }"
  },
  {
    "sha": "6826f4af3e4c4c8f415f4f27d7548df0c6eee4d1",
    "filename": "src/main/java/de/slikey/effectlib/effect/CircleEffect.java",
    "status": "modified",
    "additions": 32,
    "deletions": 14,
    "changes": 46,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CircleEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CircleEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/CircleEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,15 +1,16 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n import org.bukkit.Particle;\n-import de.slikey.effectlib.util.VectorUtils;\n import org.bukkit.Location;\n import org.bukkit.util.Vector;\n \n-public class CircleEffect extends Effect {\n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.MathUtils;\n+import de.slikey.effectlib.util.VectorUtils;\n \n+public class CircleEffect extends Effect {\n \n     /*\n      * ParticleType of spawned particle\n@@ -22,17 +23,17 @@\n     public double xRotation, yRotation, zRotation = 0;\n \n     /*\n-     * Turns the cube by this angle each iteration around the x-axis\n+     * Turns the circle by this angle each iteration around the x-axis\n      */\n     public double angularVelocityX = Math.PI / 200;\n \n     /*\n-     * Turns the cube by this angle each iteration around the y-axis\n+     * Turns the circle by this angle each iteration around the y-axis\n      */\n     public double angularVelocityY = Math.PI / 170;\n \n     /*\n-     * Turns the cube by this angle each iteration around the z-axis\n+     * Turns the circle by this angle each iteration around the z-axis\n      */\n     public double angularVelocityZ = Math.PI / 155;\n \n@@ -41,6 +42,17 @@\n      */\n     public float radius = .4f;\n \n+    /**\n+     * Used to make a partial circle\n+     */\n+    public double maxAngle = Math.PI * 2;\n+\n+    /**\n+     * Start at the same location each step, use this\n+     * along with maxAngle and wholeCircle to form persistent semicircles\n+     */\n+    public boolean resetCircle = false;\n+\n     /*\n      * Current step. Works as a counter\n      */\n@@ -75,27 +87,33 @@ public CircleEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n         location.subtract(xSubtract, ySubtract, zSubtract);\n-        double inc = (2 * Math.PI) / particles;\n+\n+        double inc = maxAngle / particles;\n         int steps = wholeCircle ? particles : 1;\n+\n         for (int i = 0; i < steps; i++) {\n             double angle = step * inc;\n             Vector v = new Vector();\n             v.setX(Math.cos(angle) * radius);\n             v.setZ(Math.sin(angle) * radius);\n             VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n-            if (enableRotation) {\n-                VectorUtils.rotateVector(v, angularVelocityX * step, angularVelocityY * step, angularVelocityZ * step);\n-            }\n-            display(particle, location.clone().add(v), 0, 30);\n+            VectorUtils.rotateAroundAxisX(v, location.getPitch() * MathUtils.degreesToRadians);\n+            VectorUtils.rotateAroundAxisY(v, -location.getYaw() * MathUtils.degreesToRadians);\n+            if (enableRotation) VectorUtils.rotateVector(v, angularVelocityX * step, angularVelocityY * step, angularVelocityZ * step);\n+            display(particle, location.clone().add(v));\n             step++;\n         }\n+\n+        if (resetCircle) {\n+            step = 0;\n+        }\n     }\n \n }"
  },
  {
    "sha": "2561dd2dfd8a93db76c42d077097714e7c324d98",
    "filename": "src/main/java/de/slikey/effectlib/effect/CloudEffect.java",
    "status": "modified",
    "additions": 23,
    "deletions": 15,
    "changes": 38,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CloudEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CloudEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/CloudEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,26 +1,30 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n-import de.slikey.effectlib.util.RandomUtils;\n import org.bukkit.Color;\n import org.bukkit.Location;\n+import org.bukkit.Particle;\n import org.bukkit.util.Vector;\n \n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.RandomUtils;\n+\n public class CloudEffect extends Effect {\n \n     /*\n      * Particle of the cloud\n      */\n     public Particle cloudParticle = Particle.CLOUD;\n     public Color cloudColor = null;\n+    public float cloudSpeed = 0;\n+    public int cloudParticles = 50;\n \n     /*\n      * Particle of the rain/snow\n      */\n     public Particle mainParticle = Particle.DRIP_WATER;\n+    public int mainParticles = 15;\n \n     /*\n      * Size of the cloud\n@@ -37,6 +41,9 @@\n      */\n     public double yOffset = .8;\n \n+    // Should the effect increase its height every iteration?\n+    public boolean increaseHeight = true;\n+\n     public CloudEffect(EffectManager manager) {\n         super(manager);\n         type = EffectType.REPEATING;\n@@ -48,25 +55,26 @@ public CloudEffect(EffectManager manager) {\n     public void onRun() {\n         Location location = getLocation();\n         location.add(0, yOffset, 0);\n-        for (int i = 0; i < 50; i++) {\n+\n+        for (int i = 0; i < cloudParticles; i++) {\n             Vector v = RandomUtils.getRandomCircleVector().multiply(RandomUtils.random.nextDouble() * cloudSize);\n-            display(cloudParticle, location.add(v), cloudColor, 0, 7);\n+            display(cloudParticle, location.add(v), cloudColor, cloudSpeed, 1);\n             location.subtract(v);\n         }\n-        Location l = location.add(0, .2, 0);\n-        for (int i = 0; i < 15; i++) {\n+\n+        Location l;\n+        if (increaseHeight) l = location.add(0, 0.2, 0);\n+        else l = location;\n+\n+        for (int i = 0; i < mainParticles; i++) {\n             int r = RandomUtils.random.nextInt(2);\n             double x = RandomUtils.random.nextDouble() * particleRadius;\n             double z = RandomUtils.random.nextDouble() * particleRadius;\n             l.add(x, 0, z);\n-            if (r != 1) {\n-                display(mainParticle, l);\n-            }\n+            if (r != 1) display(mainParticle, l);\n             l.subtract(x, 0, z);\n             l.subtract(x, 0, z);\n-            if (r != 1) {\n-                display(mainParticle, l);\n-            }\n+            if (r != 1) display(mainParticle, l);\n             l.add(x, 0, z);\n         }\n     }"
  },
  {
    "sha": "c56402a41e538ebc1302952c1c64c9ee5752a970",
    "filename": "src/main/java/de/slikey/effectlib/effect/ColoredImageEffect.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ColoredImageEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ColoredImageEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/ColoredImageEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,14 +1,16 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.util.BaseImageEffect;\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+\n import org.bukkit.Location;\n import org.bukkit.util.Vector;\n \n-import java.awt.Color;\n-import java.awt.image.BufferedImage;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.BaseImageEffect;\n \n public class ColoredImageEffect extends BaseImageEffect {\n+\n     public ColoredImageEffect(EffectManager effectManager) {\n         super(effectManager);\n     }\n@@ -21,4 +23,5 @@ protected void display(BufferedImage image, Vector v, Location location, int pix\n         display(particle, location.add(v), org.bukkit.Color.fromRGB(r, g, b));\n         location.subtract(v);\n     }\n+\n }"
  },
  {
    "sha": "b1f5a1ead2fb1c3319cd3a8676ed052e0f0fbc44",
    "filename": "src/main/java/de/slikey/effectlib/effect/ConeEffect.java",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ConeEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ConeEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/ConeEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,14 +1,15 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Particle;\n+import org.bukkit.Location;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.RandomUtils;\n import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class ConeEffect extends Effect {\n \n@@ -66,19 +67,17 @@ public ConeEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n         for (int x = 0; x < particles; x++) {\n-            if (step > particlesCone) {\n-                step = 0;\n-            }\n-            if (randomize && step == 0) {\n-                rotation = RandomUtils.getRandomAngle();\n-            }\n+\n+            if (step > particlesCone) step = 0;\n+            if (randomize && step == 0) rotation = RandomUtils.getRandomAngle();\n+\n             double angle = step * angularVelocity + rotation;\n             float radius = step * radiusGrow;\n             float length = step * lengthGrow;\n@@ -92,4 +91,5 @@ public void onRun() {\n             step++;\n         }\n     }\n+\n }"
  },
  {
    "sha": "e65a820f9569d830d249f73c182790f7f1a49a21",
    "filename": "src/main/java/de/slikey/effectlib/effect/CubeEffect.java",
    "status": "modified",
    "additions": 31,
    "deletions": 22,
    "changes": 53,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CubeEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CubeEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/CubeEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,13 +1,15 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n import org.bukkit.Particle;\n-import de.slikey.effectlib.util.VectorUtils;\n import org.bukkit.Location;\n import org.bukkit.util.Vector;\n \n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.MathUtils;\n+import de.slikey.effectlib.util.VectorUtils;\n+\n public class CubeEffect extends Effect {\n \n     /**\n@@ -50,6 +52,11 @@\n      */\n     public boolean outlineOnly = true;\n \n+    /**\n+     * Should it orient pitch and yaw?\n+     */\n+    public boolean orient = false;\n+\n     /**\n      * Current step. Works as counter\n      */\n@@ -64,17 +71,16 @@ public CubeEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n-        if (outlineOnly) {\n-            drawCubeOutline(location);\n-        } else {\n-            drawCubeWalls(location);\n-        }\n+\n+        if (outlineOnly) drawCubeOutline(location);\n+        else drawCubeWalls(location);\n+\n         step++;\n     }\n \n@@ -99,9 +105,8 @@ private void drawCubeOutline(Location location) {\n                     VectorUtils.rotateAroundAxisX(v, angleX);\n                     VectorUtils.rotateAroundAxisY(v, angleY);\n \n-                    if (enableRotation) {\n-                        VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n-                    }\n+                    if (enableRotation) VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n+                    if (orient) rotateLocation(location, v);\n                     display(particle, location.add(v));\n                     location.subtract(v);\n                 }\n@@ -112,9 +117,8 @@ private void drawCubeOutline(Location location) {\n                 v.setY(edgeLength * p / particles - a);\n                 VectorUtils.rotateAroundAxisY(v, angleY);\n \n-                if (enableRotation) {\n-                    VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n-                }\n+                if (enableRotation) VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n+                if (orient) rotateLocation(location, v);\n                 display(particle, location.add(v));\n                 location.subtract(v);\n             }\n@@ -134,18 +138,23 @@ private void drawCubeWalls(Location location) {\n             for (int y = 0; y <= particles; y++) {\n                 float posY = edgeLength * ((float) y / particles) - a;\n                 for (int z = 0; z <= particles; z++) {\n-                    if (x != 0 && x != particles && y != 0 && y != particles && z != 0 && z != particles) {\n-                        continue;\n-                    }\n+                    if (x != 0 && x != particles && y != 0 && y != particles && z != 0 && z != particles) continue;\n+\n                     float posZ = edgeLength * ((float) z / particles) - a;\n                     Vector v = new Vector(posX, posY, posZ);\n-                    if (enableRotation) {\n-                        VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n-                    }\n+                    if (enableRotation) VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n+                    if (orient) rotateLocation(location, v);\n+\n                     display(particle, location.add(v));\n                     location.subtract(v);\n                 }\n             }\n         }\n     }\n+\n+    private void rotateLocation(Location location, Vector v) {\n+        VectorUtils.rotateAroundAxisX(v, location.getPitch() * MathUtils.degreesToRadians);\n+        VectorUtils.rotateAroundAxisY(v, -location.getYaw() * MathUtils.degreesToRadians);\n+    }\n+\n }"
  },
  {
    "sha": "937c093560f328e52c5d06d1e4d09a3564672271",
    "filename": "src/main/java/de/slikey/effectlib/effect/CuboidEffect.java",
    "status": "added",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CuboidEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CuboidEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/CuboidEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -0,0 +1,134 @@\n+package de.slikey.effectlib.effect;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+\n+public class CuboidEffect extends Effect {\n+\n+\t/**\n+\t * Particle of the cube\n+\t */\n+\tpublic Particle particle = Particle.FLAME;\n+\n+\t/**\n+\t * Particles in each row\n+\t */\n+\tpublic int particles = 8;\n+\n+\t/**\n+\t * Length of x component of cuboid\n+\t */\n+\tpublic double xLength = 0;\n+\n+\t/**\n+\t * Length of y component of cuboid\n+\t */\n+\tpublic double yLength = 0;\n+\n+\t/**\n+\t * Length of z component of cuboid\n+\t */\n+\tpublic double zLength = 0;\n+\n+\t/**\n+\t * Amount of padding to add around the cube\n+\t */\n+\tpublic double padding = 0;\n+\n+\t/**\n+\t * Use corners of blocks\n+\t */\n+\tpublic boolean blockSnap = false;\n+\n+\t/**\n+\t * State variables\n+\t */\n+\tprotected Location minCorner;\n+\tprotected boolean initialized;\n+\n+\tpublic CuboidEffect(EffectManager effectManager) {\n+\t\tsuper(effectManager);\n+\t\ttype = EffectType.REPEATING;\n+\t\tperiod = 5;\n+\t\titerations = 200;\n+\t}\n+\n+\t@Override\n+\tpublic void onRun() {\n+\t\tLocation target = getTarget();\n+\t\tLocation location = getLocation();\n+\t\tif (target == null || location == null) return;\n+\t\tif (!initialized) {\n+\t\t\tif (blockSnap) {\n+\t\t\t\ttarget = target.getBlock().getLocation();\n+\t\t\t\tminCorner = location.getBlock().getLocation();\n+\t\t\t} else {\n+\t\t\t\tminCorner = location.clone();\n+\t\t\t}\n+\t\t\tif (xLength == 0 && yLength == 0 && zLength == 0) {\n+\t\t\t\tif (target == null || !target.getWorld().equals(location.getWorld())) {\n+\t\t\t\t\tcancel();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (target.getX() < minCorner.getX()) minCorner.setX(target.getX());\n+\n+\t\t\t\tif (target.getY() < minCorner.getY()) minCorner.setY(target.getY());\n+\n+\t\t\t\tif (target.getZ() < minCorner.getZ()) minCorner.setZ(target.getZ());\n+\n+\t\t\t\tif (padding != 0) minCorner.add(-padding, -padding, -padding);\n+\n+\t\t\t\tdouble extra = padding * 2;\n+\t\t\t\tif (blockSnap) extra++;\n+\t\t\t\txLength = Math.abs(location.getX() - target.getX()) + extra;\n+\t\t\t\tyLength = Math.abs(location.getY() - target.getY()) + extra;\n+\t\t\t\tzLength = Math.abs(location.getZ() - target.getZ()) + extra;\n+\t\t\t}\n+\t\t\tinitialized = true;\n+\t\t}\n+\t\tdrawOutline(location, target);\n+\t}\n+\n+\tprivate void drawOutline(Location location, Location target) {\n+\t\tVector v = new Vector();\n+\t\tfor (int i = 0; i < particles; i++) {\n+\t\t\t// X edges\n+\t\t\tdrawEdge(v, i, 0, 2, 2);\n+\t\t\tdrawEdge(v, i, 0, 1, 2);\n+\t\t\tdrawEdge(v, i, 0, 1, 1);\n+\t\t\tdrawEdge(v, i, 0, 2, 1);\n+\n+\t\t\t// Y edges\n+\t\t\tdrawEdge(v, i, 2, 0, 2);\n+\t\t\tdrawEdge(v, i, 1, 0, 2);\n+\t\t\tdrawEdge(v, i, 1, 0, 1);\n+\t\t\tdrawEdge(v, i, 2, 0, 1);\n+\n+\t\t\t// Z edges\n+\t\t\tdrawEdge(v, i, 2, 2, 0);\n+\t\t\tdrawEdge(v, i, 1, 2, 0);\n+\t\t\tdrawEdge(v, i, 1, 1, 0);\n+\t\t\tdrawEdge(v, i, 2, 1, 0);\n+\t\t}\n+\t}\n+\n+\tprivate void drawEdge(Vector v, int i, int dx, int dy, int dz) {\n+\t\tif (dx == 0) v.setX(xLength * i / particles);\n+\t\telse v.setX(xLength * (dx - 1));\n+\n+\t\tif (dy == 0) v.setY(yLength * i / particles);\n+\t\telse v.setY(yLength * (dy - 1));\n+\n+\t\tif (dz == 0) v.setZ(zLength * i / particles);\n+\t\telse v.setZ(zLength * (dz - 1));\n+\n+\t\tdisplay(particle, minCorner.add(v));\n+\t\tminCorner.subtract(v);\n+\t}\n+\n+}"
  },
  {
    "sha": "47ac915e2dc84174386346049a81469fe802ba81",
    "filename": "src/main/java/de/slikey/effectlib/effect/CylinderEffect.java",
    "status": "modified",
    "additions": 24,
    "deletions": 13,
    "changes": 37,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CylinderEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/CylinderEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/CylinderEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,15 +1,17 @@\n package de.slikey.effectlib.effect;\n \n+import java.util.Random;\n+\n+import org.bukkit.Particle;\n+import org.bukkit.Location;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.RandomUtils;\n import de.slikey.effectlib.util.VectorUtils;\n-import java.util.Random;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class CylinderEffect extends Effect {\n \n@@ -73,6 +75,12 @@\n      */\n     protected float sideRatio = 0;\n \n+    /**\n+     * Whether or not to orient the effect in the direction\n+     * of the source Location\n+     */\n+    public boolean orient = false;\n+\n     public CylinderEffect(EffectManager effectManager) {\n         super(effectManager);\n         type = EffectType.REPEATING;\n@@ -82,18 +90,21 @@ public CylinderEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n-        if (sideRatio == 0) {\n-            calculateSideRatio();\n-        }\n+        if (sideRatio == 0) calculateSideRatio();\n+\n         Random r = RandomUtils.random;\n         double xRotation = rotationX, yRotation = rotationY, zRotation = rotationZ;\n-        if (enableRotation) {\n+        if (orient) {\n+            xRotation = Math.toRadians(90 - location.getPitch()) + rotationX;\n+            yRotation = Math.toRadians(180 - location.getYaw()) + rotationY;\n+        }\n+        if (enableRotation || orient) {\n             xRotation += step * angularVelocityX;\n             yRotation += step * angularVelocityY;\n             zRotation += step * angularVelocityZ;\n@@ -116,9 +127,8 @@ public void onRun() {\n                     v.setY(-multi * (height / 2));\n                 }\n             }\n-            if (enableRotation) {\n-                VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n-            }\n+            if (enableRotation) VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n+\n             display(particle, location.add(v));\n             location.subtract(v);\n         }\n@@ -132,4 +142,5 @@ protected void calculateSideRatio() {\n         side = 2 * MathUtils.PI * radius * height;\n         sideRatio = side / (side + grounds);\n     }\n+\n }"
  },
  {
    "sha": "7a4bbbf1bb4ec8ca4a21fe7484840a60f1893039",
    "filename": "src/main/java/de/slikey/effectlib/effect/DiscoBallEffect.java",
    "status": "modified",
    "additions": 19,
    "deletions": 13,
    "changes": 32,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DiscoBallEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DiscoBallEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/DiscoBallEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -3,15 +3,17 @@\n /*\n  * Idea by coco5843\n  */\n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n-import de.slikey.effectlib.util.RandomUtils;\n+\n import org.bukkit.Color;\n import org.bukkit.Location;\n+import org.bukkit.Particle;\n import org.bukkit.util.Vector;\n \n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.RandomUtils;\n+\n public class DiscoBallEffect extends Effect {\n \n     /**\n@@ -27,8 +29,11 @@\n     /**\n      * Particle of the sphere and of the lines\n      */\n-    public Particle sphereParticle = Particle.FLAME, lineParticle = Particle.REDSTONE;\n-    public Color sphereColor = null, lineColor = null;\n+    public Particle sphereParticle = Particle.FLAME;\n+    public Particle lineParticle = Particle.REDSTONE;\n+\n+    public Color sphereColor = null;\n+    public Color lineColor = null;\n \n     /**\n      * Max number of lines\n@@ -38,7 +43,8 @@\n     /**\n      * Max number of particles per line\n      */\n-    public int lineParticles = 100, sphereParticles = 50;\n+    public int lineParticles = 100;\n+    public int sphereParticles = 50;\n \n     /**\n      * Direction of the lines\n@@ -60,16 +66,16 @@ public void onRun() {\n             double x = RandomUtils.random.nextInt(max - max * (-1)) + max * (-1);\n             double y = RandomUtils.random.nextInt(max - max * (-1)) + max * (-1);\n             double z = RandomUtils.random.nextInt(max - max * (-1)) + max * (-1);\n-            if (direction == Direction.DOWN) {\n-                y = RandomUtils.random.nextInt(max * 2 - max) + max;\n-            } else if (direction == Direction.UP) {\n-                y = RandomUtils.random.nextInt(max * (-1) - max * (-2)) + max * (-2);\n-            }\n+\n+            if (direction == Direction.DOWN) y = RandomUtils.random.nextInt(max * 2 - max) + max;\n+            else if (direction == Direction.UP) y = RandomUtils.random.nextInt(max * (-1) - max * (-2)) + max * (-2);\n+\n             Location target = location.clone().subtract(x, y, z);\n             if (target == null) {\n                 cancel();\n                 return;\n             }\n+\n             Vector link = target.toVector().subtract(location.toVector());\n             float length = (float) link.length();\n             link.normalize();"
  },
  {
    "sha": "542a80a310bf82d30454311bc1862c61181fede4",
    "filename": "src/main/java/de/slikey/effectlib/effect/DnaEffect.java",
    "status": "modified",
    "additions": 11,
    "deletions": 12,
    "changes": 23,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DnaEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DnaEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/DnaEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,14 +1,15 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Color;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Color;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class DnaEffect extends Effect {\n \n@@ -79,26 +80,24 @@ public DnaEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n         for (int j = 0; j < particlesHelix; j++) {\n-            if (step * grow > length) {\n-                step = 0;\n-            }\n+            if (step * grow > length) step = 0;\n+\n             for (int i = 0; i < 2; i++) {\n                 double angle = step * radials + Math.PI * i;\n                 Vector v = new Vector(Math.cos(angle) * radius, step * grow, Math.sin(angle) * radius);\n                 drawParticle(location, v, particleHelix, colorHelix);\n             }\n             if (step % baseInterval == 0) {\n                 for (int i = -particlesBase; i <= particlesBase; i++) {\n-                    if (i == 0) {\n-                        continue;\n-                    }\n+                    if (i == 0) continue;\n+\n                     Particle particle = particleBase1;\n                     Color color = colorBase1;\n                     if (i < 0) {"
  },
  {
    "sha": "6df6318799794b95f4a75d5e61158e71b80c0985",
    "filename": "src/main/java/de/slikey/effectlib/effect/DonutEffect.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DonutEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DonutEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/DonutEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,13 +1,15 @@\n package de.slikey.effectlib.effect;\n \n-import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n-import de.slikey.effectlib.EffectType;\n import org.bukkit.Particle;\n-import de.slikey.effectlib.util.VectorUtils;\n import org.bukkit.Location;\n import org.bukkit.util.Vector;\n \n+import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.MathUtils;\n+import de.slikey.effectlib.util.VectorUtils;\n+\n public class DonutEffect extends Effect {\n \n     /**\n@@ -31,7 +33,7 @@\n     public float radiusDonut = 2;\n \n     /**\n-     * Radius of the tube (the circles on the outside.\n+     * Radius of the tube (the circles on the outside).\n      */\n     public float radiusTube = .5f;\n \n@@ -61,10 +63,13 @@ public void onRun() {\n                 v.setZ(radiusTube * Math.sin(phi));\n \n                 VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n+                VectorUtils.rotateAroundAxisX(v, (location.getPitch() + 90) * MathUtils.degreesToRadians);\n+                VectorUtils.rotateAroundAxisY(v, -location.getYaw() * MathUtils.degreesToRadians);\n \n                 display(particle, location.add(v));\n                 location.subtract(v);\n             }\n         }\n     }\n+\n }"
  },
  {
    "sha": "70a241ce379cb65effd6d9536833a1da49095408",
    "filename": "src/main/java/de/slikey/effectlib/effect/DragonEffect.java",
    "status": "modified",
    "additions": 12,
    "deletions": 9,
    "changes": 21,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DragonEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/DragonEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/DragonEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,16 +1,18 @@\n package de.slikey.effectlib.effect;\n \n+import java.util.List;\n+import java.util.ArrayList;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.RandomUtils;\n import de.slikey.effectlib.util.VectorUtils;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class DragonEffect extends Effect {\n \n@@ -50,13 +52,13 @@ public DragonEffect(EffectManager effectManager) {\n         type = EffectType.REPEATING;\n         period = 2;\n         iterations = 200;\n-        rndF = new ArrayList<Float>(arcs);\n-        rndAngle = new ArrayList<Double>(arcs);\n+        rndF = new ArrayList<>(arcs);\n+        rndAngle = new ArrayList<>(arcs);\n     }\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n+        step = 0;\n     }\n \n     @Override\n@@ -87,4 +89,5 @@ public void onRun() {\n             step++;\n         }\n     }\n+\n }"
  },
  {
    "sha": "1384ec1de63d35fe10cce8128ffa8e23b3ebd066",
    "filename": "src/main/java/de/slikey/effectlib/effect/EarthEffect.java",
    "status": "modified",
    "additions": 36,
    "deletions": 28,
    "changes": 64,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/EarthEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/EarthEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/EarthEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,20 +1,33 @@\n package de.slikey.effectlib.effect;\n \n+import java.util.Set;\n+import java.util.HashSet;\n+\n+import org.bukkit.Color;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.RandomUtils;\n import de.slikey.effectlib.util.VectorUtils;\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class EarthEffect extends Effect {\n-    public Particle particle1 = Particle.VILLAGER_HAPPY;\n-    public Particle particle2 = Particle.DRIP_WATER;\n+\n+    public Particle particleLand = Particle.VILLAGER_HAPPY;\n+    public Particle particleOcean = Particle.DRIP_WATER;\n+\n+    public Color colorLand = null;\n+    public Color colorOcean = null;\n+\n+    public int particlesLand = 3;\n+    public int particlesOcean = 1;\n+\n+    public float speedLand = 0F;\n+    public float speedOcean = 0F;\n \n     /**\n      * Precision of generation. Higher numbers have better results, but increase the time of generation. Don't pick Number above 10.000\n@@ -51,21 +64,21 @@ public EarthEffect(EffectManager effectManager) {\n         type = EffectType.REPEATING;\n         period = 5;\n         iterations = 200;\n-        cacheGreen = new HashSet<Vector>();\n-        cacheBlue = new HashSet<Vector>();\n+        cacheGreen = new HashSet<>();\n+        cacheBlue = new HashSet<>();\n     }\n \n     @Override\n     public void reset() {\n-        this.firstStep = true;\n+        firstStep = true;\n     }\n \n     public void invalidate() {\n         firstStep = false;\n         cacheGreen.clear();\n         cacheBlue.clear();\n \n-        Set<Vector> cache = new HashSet<Vector>();\n+        Set<Vector> cache = new HashSet<>();\n         int sqrtParticles = (int) Math.sqrt(particles);\n         float theta = 0, phi, thetaStep = MathUtils.PI / sqrtParticles, phiStep = MathUtils.PI2 / sqrtParticles;\n         for (int i = 0; i < sqrtParticles; i++) {\n@@ -98,39 +111,34 @@ public void invalidate() {\n         float minSquared = Float.POSITIVE_INFINITY, maxSquared = Float.NEGATIVE_INFINITY;\n         for (Vector current : cache) {\n             float lengthSquared = (float) current.lengthSquared();\n-            if (minSquared > lengthSquared) {\n-                minSquared = lengthSquared;\n-            }\n-            if (maxSquared < lengthSquared) {\n-                maxSquared = lengthSquared;\n-            }\n+\n+            if (minSquared > lengthSquared) minSquared = lengthSquared;\n+            if (maxSquared < lengthSquared) maxSquared = lengthSquared;\n         }\n \n         // COLOR PARTICLES\n         float average = (minSquared + maxSquared) / 2;\n         for (Vector v : cache) {\n             float lengthSquared = (float) v.lengthSquared();\n-            if (lengthSquared >= average) {\n-                cacheGreen.add(v);\n-            } else {\n-                cacheBlue.add(v);\n-            }\n+\n+            if (lengthSquared >= average) cacheGreen.add(v);\n+            else cacheBlue.add(v);\n         }\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n-        if (firstStep) {\n-            invalidate();\n-        }\n+        if (firstStep) invalidate();\n+\n         for (Vector v : cacheGreen) {\n-            display(particle1, location.add(v), 0, 3);\n+            display(particleLand, location.add(v), colorLand, speedLand, particlesLand);\n             location.subtract(v);\n         }\n         for (Vector v : cacheBlue) {\n-            display(particle2, location.add(v));\n+            display(particleOcean, location.add(v), colorOcean, speedOcean, particlesOcean);\n             location.subtract(v);\n         }\n     }\n+\n }"
  },
  {
    "sha": "e06e07f215a9c70e01e9c2f1ab6702778b35c3f5",
    "filename": "src/main/java/de/slikey/effectlib/effect/EquationEffect.java",
    "status": "modified",
    "additions": 29,
    "deletions": 33,
    "changes": 62,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/EquationEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/EquationEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/EquationEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,14 +1,15 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n+import de.slikey.effectlib.EffectManager;\n+import de.slikey.effectlib.util.VectorUtils;\n import de.slikey.effectlib.math.EquationStore;\n import de.slikey.effectlib.math.EquationTransform;\n-import org.bukkit.Particle;\n-import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class EquationEffect extends Effect {\n \n@@ -104,8 +105,8 @@ public EquationEffect(EffectManager effectManager) {\n \n     @Override\n     public void reset() {\n-        this.step = 0;\n-        this.miniStep = 0;\n+        step = 0;\n+        miniStep = 0;\n     }\n \n     @Override\n@@ -125,44 +126,38 @@ public void onRun() {\n \n         boolean hasInnerEquation = (x2Transform != null && y2Transform != null && z2Transform != null);\n         for (int i = 0; i < particles; i++) {\n-            Double xValue = xTransform.get(step);\n-            Double yValue = yTransform.get(step);\n-            Double zValue = zTransform.get(step);\n+            double xValue = xTransform.get(step);\n+            double yValue = yTransform.get(step);\n+            double zValue = zTransform.get(step);\n             \n             Vector result = new Vector(xValue, yValue, zValue);\n-            if (orient && orientPitch) {\n-                result = VectorUtils.rotateVector(result, location);\n-            } else if (orient) {\n-                result = VectorUtils.rotateVector(result, location.getYaw(), 0);\n-            }\n+            if (orient && orientPitch) result = VectorUtils.rotateVector(result, location);\n+            else if (orient) result = VectorUtils.rotateVector(result, location.getYaw(), 0);\n \n             Location targetLocation = location.clone();\n             targetLocation.add(result);\n-            if (!hasInnerEquation) {\n-                display(particle, targetLocation);\n-            } else {\n+\n+            if (hasInnerEquation) {\n                 for (int j = 0; j < particles2; j++) {\n-                    Double x2Value = x2Transform.get(step, miniStep);\n-                    Double y2Value = y2Transform.get(step, miniStep);\n-                    Double z2Value = z2Transform.get(step, miniStep);\n-                    \n+                    double x2Value = x2Transform.get(step, miniStep);\n+                    double y2Value = y2Transform.get(step, miniStep);\n+                    double z2Value = z2Transform.get(step, miniStep);\n+\n                     Vector result2 = new Vector(x2Value, y2Value, z2Value);\n-                    if (orient && orientPitch) {\n-                        result2 = VectorUtils.rotateVector(result2, location);\n-                    } else if (orient) {\n-                        result2 = VectorUtils.rotateVector(result2, location.getYaw(), 0);\n-                    }\n-                    \n+                    if (orient && orientPitch) result2 = VectorUtils.rotateVector(result2, location);\n+                    else if (orient) result2 = VectorUtils.rotateVector(result2, location.getYaw(), 0);\n+\n                     Location target2Location = targetLocation.clone().add(result2);\n                     display(particle, target2Location);\n-                    \n+\n                     miniStep++;\n                 }\n-                \n-                if (cycleMiniStep) {\n-                    miniStep = 0;\n-                }\n+\n+                if (cycleMiniStep) miniStep = 0;\n+            } else {\n+                display(particle, targetLocation);\n             }\n+\n             if (maxSteps != 0 && step > maxSteps) {\n                 step = 0;\n                 break;\n@@ -171,4 +166,5 @@ public void onRun() {\n             }\n         }\n     }\n+\n }"
  },
  {
    "sha": "c031d3df4fd195022b6268deeae1e8d0396f65d4",
    "filename": "src/main/java/de/slikey/effectlib/effect/ExplodeEffect.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ExplodeEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/ExplodeEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/ExplodeEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,14 +1,16 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Sound;\n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.RandomUtils;\n-import org.bukkit.Location;\n-import org.bukkit.Sound;\n \n public class ExplodeEffect extends Effect {\n+\n     public Particle particle1 = Particle.EXPLOSION_NORMAL;\n     public Particle particle2 = Particle.EXPLOSION_HUGE;\n "
  },
  {
    "sha": "38a8d10914ed0f6a5c01359b191ea1148f03dacb",
    "filename": "src/main/java/de/slikey/effectlib/effect/FlameEffect.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/FlameEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/FlameEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/FlameEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,17 +1,20 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.RandomUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class FlameEffect extends Effect {\n \n     public Particle particle = Particle.FLAME;\n \n+    public int particles = 10;\n+\n     public FlameEffect(EffectManager effectManager) {\n         super(effectManager);\n         type = EffectType.REPEATING;\n@@ -22,7 +25,7 @@ public FlameEffect(EffectManager effectManager) {\n     @Override\n     public void onRun() {\n         Location location = getLocation();\n-        for (int i = 0; i < 10; i++) {\n+        for (int i = 0; i < particles; i++) {\n             Vector v = RandomUtils.getRandomCircleVector().multiply(RandomUtils.random.nextDouble() * 0.6d);\n             v.setY(RandomUtils.random.nextFloat() * 1.8);\n             location.add(v);"
  },
  {
    "sha": "5c01bbcc4da960feb72d5de2a055e776023cb6cf",
    "filename": "src/main/java/de/slikey/effectlib/effect/FountainEffect.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/FountainEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/FountainEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/FountainEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,12 +1,13 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.RandomUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class FountainEffect extends Effect {\n "
  },
  {
    "sha": "8e9dbab28af2c60190bb9701802be4161d720319",
    "filename": "src/main/java/de/slikey/effectlib/effect/GridEffect.java",
    "status": "modified",
    "additions": 26,
    "deletions": 4,
    "changes": 30,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/GridEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/GridEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/GridEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,12 +1,13 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n-import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.EffectType;\n-import org.bukkit.Particle;\n+import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n public class GridEffect extends Effect {\n \n@@ -50,6 +51,21 @@\n      */\n     public double rotation = 0;\n \n+    /**\n+     * Rotation around the X-axis\n+     */\n+    public double rotationX = 0;\n+\n+    /**\n+     * Rotation around the Z-axis\n+     */\n+    public double rotationZ = 0;\n+\n+    /**\n+     * To center the grid on the location\n+     */\n+    public boolean center = false;\n+\n     public GridEffect(EffectManager effectManager) {\n         super(effectManager);\n         type = EffectType.INSTANT;\n@@ -81,7 +97,13 @@ public void onRun() {\n \n     protected void addParticle(Location location, Vector v) {\n         v.setZ(0);\n+        if (center) {\n+            v.setY(v.getY() + heightCell * -(rows + 1) / 2);\n+            v.setX(v.getX() + widthCell * -(columns + 1) / 2);\n+        }\n         VectorUtils.rotateAroundAxisY(v, rotation);\n+        if (rotationX != 0) VectorUtils.rotateAroundAxisX(v, rotationX);\n+        if (rotationZ != 0) VectorUtils.rotateAroundAxisZ(v, rotationZ);\n         location.add(v);\n         display(particle, location);\n         location.subtract(v);"
  },
  {
    "sha": "c8b87c8129e889372b0e02ebd0adfbc6ca21dc0a",
    "filename": "src/main/java/de/slikey/effectlib/effect/HeartEffect.java",
    "status": "modified",
    "additions": 17,
    "deletions": 13,
    "changes": 30,
    "blob_url": "https://github.com/elBukkit/EffectLib/blob/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/HeartEffect.java",
    "raw_url": "https://github.com/elBukkit/EffectLib/raw/83f992ab9c2db50b9ba2986459ee3480cd3f1e7a/src/main/java/de/slikey/effectlib/effect/HeartEffect.java",
    "contents_url": "https://api.github.com/repos/elBukkit/EffectLib/contents/src/main/java/de/slikey/effectlib/effect/HeartEffect.java?ref=83f992ab9c2db50b9ba2986459ee3480cd3f1e7a",
    "patch": "@@ -1,12 +1,14 @@\n package de.slikey.effectlib.effect;\n \n+import org.bukkit.Location;\n+import org.bukkit.Particle;\n+import org.bukkit.util.Vector;\n+\n import de.slikey.effectlib.Effect;\n+import de.slikey.effectlib.EffectType;\n import de.slikey.effectlib.EffectManager;\n import de.slikey.effectlib.util.MathUtils;\n-import org.bukkit.Particle;\n import de.slikey.effectlib.util.VectorUtils;\n-import org.bukkit.Location;\n-import org.bukkit.util.Vector;\n \n /**\n  * Creates a 2D Heart in 3D space. Thanks to the author for sharing it!\n@@ -48,27 +50,29 @@\n     /**\n      * Compilation of the heart. (2)\n      */\n-    public float compilaction = 2F;\n+    public float compilation = 2F;\n \n     public HeartEffect(EffectManager effectManager) {\n         super(effectManager);\n+        type = EffectType.REPEATING;\n+        iterations = 200;\n+        period = 5;\n     }\n \n     @Override\n     public void onRun() {\n         Location location = getLocation();\n-        Vector vector = new Vector();\n+        Vector v = new Vector();\n         for (int i = 0; i < particles; i++) {\n-            float alpha = ((MathUtils.PI / compilaction) / particles) * i;\n-            double phi = Math.pow(Math.abs(MathUtils.sin(2 * compilaction * alpha)) + factorInnerSpike * Math.abs(MathUtils.sin(compilaction * alpha)), 1 / compressYFactorTotal);\n-\n-            vector.setY(phi * (MathUtils.sin(alpha) + MathUtils.cos(alpha)) * yFactor);\n-            vector.setZ(phi * (MathUtils.cos(alpha) - MathUtils.sin(alpha)) * xFactor);\n+            float alpha = ((MathUtils.PI / compilation) / particles) * i;\n+            double phi = Math.pow(Math.abs(MathUtils.sin(2 * compilation * alpha)) + factorInnerSpike * Math.abs(MathUtils.sin(compilation * alpha)), 1 / compressYFactorTotal);\n \n-            VectorUtils.rotateVector(vector, xRotation, yRotation, zRotation);\n+            v.setY(phi * (MathUtils.sin(alpha) + MathUtils.cos(alpha)) * yFactor);\n+            v.setZ(phi * (MathUtils.cos(alpha) - MathUtils.sin(alpha)) * xFactor);\n \n-            display(particle, location.add(vector));\n-            location.subtract(vector);\n+            VectorUtils.rotateVector(v, xRotation, yRotation, zRotation);\n+            display(particle, location.add(v));\n+            location.subtract(v);\n         }\n     }\n "
  }
]
