[
  {
    "sha": "ebbbdf924ba09d083c6fe6b41182f858476741f2",
    "filename": ".idea/compiler.xml",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/compiler.xml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/compiler.xml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/.idea/compiler.xml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"JavacSettings\">\n+    <option name=\"ADDITIONAL_OPTIONS_OVERRIDE\">\n+      <module name=\"algorithms\" options=\"--add-exports java.base/jdk.internal.misc=ALL-UNNAMED\" />\n+    </option>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "97626ba45445dc9f3afa66e6a149914dc39e3df6",
    "filename": ".idea/encodings.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/encodings.xml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/encodings.xml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/.idea/encodings.xml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Encoding\">\n+    <file url=\"PROJECT\" charset=\"UTF-8\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "50fcc7b73769f6a832dae2b73894713d1ea8d808",
    "filename": ".idea/misc.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/misc.xml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/.idea/misc.xml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -1,12 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project version=\"4\">\n-  <component name=\"EntryPointsManager\">\n-    <entry_points version=\"2.0\" />\n-  </component>\n   <component name=\"ProjectKey\">\n     <option name=\"state\" value=\"project://e2804f05-5315-4fc6-a121-c522a6c26470\" />\n   </component>\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_15\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_15\" default=\"true\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\n     <output url=\"file://$PROJECT_DIR$/out\" />\n   </component>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "815612d326bb91af2d490607adccc12b352266af",
    "filename": ".idea/modules.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/modules.xml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/modules.xml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/.idea/modules.xml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -2,8 +2,7 @@\n <project version=\"4\">\n   <component name=\"ProjectModuleManager\">\n     <modules>\n-      <module fileurl=\"file://$PROJECT_DIR$/untitled104.iml\" filepath=\"$PROJECT_DIR$/untitled104.iml\" />\n+      <module fileurl=\"file://$PROJECT_DIR$/algorithms.iml\" filepath=\"$PROJECT_DIR$/algorithms.iml\" />\n     </modules>\n   </component>\n-</project>\n-\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/.idea/uiDesigner.xml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "94a25f7f4cb416c083d265558da75d457237d671",
    "filename": ".idea/vcs.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/vcs.xml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/.idea/vcs.xml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"VcsDirectoryMappings\">\n+    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "c90834f2d607afe55e6104d8aa2cdfffb713f688",
    "filename": "algorithms.iml",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/algorithms.iml",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/algorithms.iml",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/algorithms.iml?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -8,5 +8,4 @@\n     <orderEntry type=\"inheritedJdk\" />\n     <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n   </component>\n-</module>\n-\n+</module>\n\\ No newline at end of file"
  },
  {
    "sha": "251506aa99d832429c5a2160cda6113c0c08697a",
    "filename": "src/ArrayInt.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/ArrayInt.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/ArrayInt.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/ArrayInt.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,6 @@\n+public interface ArrayInt <E>{\n+\n+    void sortBubble();\n+    void sortSelect();\n+    void sortInsert();\n+}"
  },
  {
    "sha": "e7d635a42a9ceafbb9999f084c3f896de4d33eb2",
    "filename": "src/ArrayTest.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/ArrayTest.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/ArrayTest.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/ArrayTest.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,55 @@\n+public class ArrayTest <E extends Comparable<? super E>> implements ArrayInt <E>{\n+\n+    protected E[] data;\n+    protected int size;\n+\n+    private void swap(int indexA, int indexB) {\n+        E temp = data[indexA];\n+        data[indexA] = data[indexB];\n+        data[indexB] = temp;\n+    }\n+\n+\n+    @Override\n+    public void sortBubble() {\n+        for (int i = 0; i < size - 1; i++) {\n+            for (int j = 0; j < size - 1 - i; j++) {\n+                if (data[j].compareTo(data[j + 1]) > 0) {\n+                    swap(j, j + 1);\n+                }\n+            }\n+        }\n+\n+    }\n+\n+\n+    @Override\n+    public void sortSelect() {\n+        for (int i = 0; i < size - 1; i++) {\n+            int minIndex = i;\n+            for (int j = i + 1; j < size; j++) {\n+                if (data[j].compareTo(data[minIndex]) < 0) {\n+                    minIndex = j;\n+                }\n+            }\n+            swap(minIndex, i);\n+        }\n+    }\n+\n+    @Override\n+    public void sortInsert() {\n+        for (int i = 1; i < size; i++) {\n+            E temp = data[i];\n+            int in = i;\n+            while (in > 0 && data[in - 1].compareTo(temp) >= 0) {\n+                data[in] = data[in - 1];\n+                in--;\n+            }\n+            data[in] = temp;\n+        }\n+    }\n+\n+\n+\n+\n+}"
  },
  {
    "sha": "b41290848dece6f0b571245c0325ad3483e19ee9",
    "filename": "src/Main.java",
    "status": "modified",
    "additions": 44,
    "deletions": 2,
    "changes": 46,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/Main.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/Main.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/Main.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -1,6 +1,48 @@\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.List.of;\n+\n public class Main {\n+    private static int i;\n+\n+\n+    public static void main(String[] args) throws InterruptedException {\n+\n+        int[] arr = new int[9999];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = (int) (Math.random() * 999);\n+            System.out.print(arr[i] + \" \");\n+        }\n+        System.out.println();\n+        System.out.println(\"***\");\n+\n+        //Copy\n+        int[] copyArr = new int[9999];\n+        System.arraycopy (arr, 0, copyArr, 0, 9999);\n+        for (int i=0; i < copyArr.length; i++) {\n+            System.out.print(copyArr[i] + \" \");\n+        }\n+\n+\n+        ExecutorService executorService = Executors.newFixedThreadPool(3);\n+\n+        List<Runnable> tasks = of(\n+                Timer(copyArr::sortBubble, \"Sort Bubble\"),\n+                Timer(copyArr::sortSelect, \"Sort Select\"),\n+                Timer(copyArr::sortInsert, \"Sort Insert\")\n+        );\n+\n+        for (Runnable task : tasks) {\n+            task.run();\n+        }\n+\n+        executorService.shutdown();\n+        executorService.awaitTermination(1, TimeUnit.MINUTES);\n+\n \n-    public static void main(String[] args) {\n-\t// write your code here\n     }\n }"
  },
  {
    "sha": "36e70b2e0be04bfc9568540b3110fea0e0e19d04",
    "filename": "src/Timer.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/Timer.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/Timer.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/Timer.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,17 @@\n+import java.util.concurrent.TimeUnit;\n+\n+public class Timer {\n+\n+    private static Runnable measureTime(Runnable action, String actionName) {\n+        return () -> {\n+            long startTime = System.nanoTime();\n+            action.run();\n+            long finishTime = System.nanoTime();\n+            long duration = finishTime - startTime;\n+\n+            System.out.printf(\"%s took time: %d micros.%n\", actionName, TimeUnit.NANOSECONDS.toMicros(duration));\n+        };\n+    }\n+}\n+\n+"
  },
  {
    "sha": "cb3a9403a3c02c8cb2ba513a37eaeb7ec32bf290",
    "filename": "src/lession_3/Deque.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/Deque.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/Deque.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_3/Deque.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,89 @@\n+package lession_3;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+public class Deque {\n+\n+    public int[] array;\n+    public int size;\n+    public int head;\n+    public int tail;\n+    public int capacity;\n+\n+    public Deque(int size) {\n+        this.size = size;\n+        array = new int[size];\n+        capacity = 0;\n+        head = 0;\n+        tail = -1;\n+    }\n+\n+    public int getSize() {\n+        return size;\n+    }\n+\n+    public int getHead() {\n+        return head;\n+    }\n+\n+    public int getTail() {\n+        return tail;\n+    }\n+\n+    public boolean isEmpty() {\n+        return capacity == 0;\n+    }\n+\n+    public int getCapacity() {\n+        return capacity;\n+    }\n+\n+    public boolean isFull() {\n+        return size == capacity;\n+    }\n+\n+    public void insertLeft(int i) throws FullDeque {\n+        if (isFull()) throw new FullDeque();\n+        if (--head < 0) {\n+            head = size - 1;\n+        }\n+        array[head] = i;\n+        capacity++;\n+    }\n+\n+    public int removeLeft() {\n+        if (++head > size - 1)\n+            head = 0;\n+        capacity--;\n+        return array[head - 1];\n+    }\n+\n+    public void insertRight(int i) throws FullDeque {\n+        if (isFull()) throw new FullDeque();\n+        if (++tail > size){\n+            tail = 0;\n+        }\n+        array[tail - 1] = i;\n+        capacity++;\n+    }\n+\n+    public int removeRight() {\n+        if (--tail < 0) tail = size - 1;\n+        capacity--;\n+        return array[tail];\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Deque{\" +\n+                \"array=\" + Arrays.toString(array) +\n+                '}';\n+    }\n+\n+    protected int getSizes() {\n+        return 0;\n+    }\n+}\n+\n+"
  },
  {
    "sha": "53de6f6a157f23bd56d788821c97ec52ff9a99e9",
    "filename": "src/lession_3/FullDeque.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/FullDeque.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/FullDeque.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_3/FullDeque.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,4 @@\n+package lession_3;\n+\n+public class FullDeque extends Throwable {\n+}"
  },
  {
    "sha": "6895e2e7a4d7e182d7c7ee59cb10cf6acfbf66d2",
    "filename": "src/lession_3/Main.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/Main.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/Main.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_3/Main.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,64 @@\n+package lession_3;\n+\n+public class Main extends Deque {\n+\n+    public Main(int i) {\n+        super(i);\n+    }\n+\n+    public static void main(String[] args) throws FullDeque {\n+//\n+//        Reverser reverser = new Reverser();\n+//        reverser.reverse(reverser.setString());\n+\n+        deque();\n+    }\n+\n+    private static void deque () throws FullDeque {\n+\n+\n+        Main deque = new Main(10);\n+        for (int i = 0; i < 10; i++) {\n+            deque.insertLeft(i);\n+        }\n+        System.out.println(deque);\n+        System.out.println(deque.removeLeft());\n+        System.out.println(\"***\");\n+        System.out.print(deque.removeRight());\n+        System.out.println(deque.removeLeft());\n+        System.out.println(deque.removeRight());\n+        deque.insertLeft(999);\n+        System.out.println(deque.getTail());\n+        deque.insertLeft(45);\n+        System.out.println(deque.getTail());\n+        deque.insertLeft(99);\n+        System.out.println(deque.getTail());\n+        deque.insertRight(9);\n+        System.out.println(deque.getTail());\n+        System.out.println(deque);\n+\n+        for (int i = 0; i < 10; i++) {\n+            deque.removeRight();\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            deque.insertLeft(i + 10);\n+        }\n+        System.out.println(deque);\n+\n+        System.out.println(deque.getCapacity() + \" \" + deque.getSizes());\n+        System.out.println(deque.isFull());\n+        System.out.println(deque.getHead() + \" \" + deque.getTail());\n+        deque.removeRight();\n+        System.out.println(deque.getHead() + \" \" + deque.getTail());\n+        deque.insertLeft(111);\n+        System.out.println(deque.getHead() + \" \" + deque.getTail());\n+        System.out.println(deque);\n+\n+\n+    }\n+\n+\n+\n+}\n+"
  },
  {
    "sha": "ad1262b79a388cdda5740f25146699e5e838776b",
    "filename": "src/lession_3/Reverser.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/Reverser.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_3/Reverser.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_3/Reverser.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,28 @@\n+package lession_3;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class Reverser {\n+\n+    public String setString(){\n+        String s = null;\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))){\n+            System.out.println(\"Введите ваш текст:\");\n+            s =  reader.readLine();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return s;\n+    }\n+\n+    public String reverse(String string) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = string.length() - 1; i >= 0; i--) {\n+            stringBuilder.append(string.charAt(i));\n+        }\n+        System.out.println(stringBuilder);\n+        return stringBuilder.toString();\n+    }\n+}"
  },
  {
    "sha": "f8349bd8cadc739a89d7d405500a1233d2053399",
    "filename": "src/lession_4/Link.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/Link.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/Link.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_4/Link.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,22 @@\n+package lession_4;\n+\n+public class Link {\n+\n+    public String name;\n+    public int age;\n+\n+    public Link next;\n+\n+    public Link(String name, int age){\n+        this.name = name;\n+        this.age = age;\n+    }\n+\n+    public void display(){\n+        System.out.println(\"Name: \"+this.name+\", age: \"+this.age);\n+    }\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "b52236789c6c847ce9a2bbcb0fc5601cb13dc91f",
    "filename": "src/lession_4/LinkInterator.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/LinkInterator.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/LinkInterator.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_4/LinkInterator.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,87 @@\n+package lession_4;\n+\n+import java.util.LinkedList;\n+\n+public class LinkInterator {\n+\n+    private Link current;\n+    private Link previous;\n+    private LinkedList list;\n+    private Link first;\n+\n+    public LinkInterator(LinkedList list){\n+        this.list = list;\n+        this.reset();\n+    }\n+\n+\n+    public void reset(){\n+        current = (Link) list.getFirst();\n+        previous = null;\n+    }\n+\n+    public boolean atEnd(){\n+        return (current.next == null);\n+    }\n+\n+    public void nextLink(){\n+        previous = current;\n+        current = current.next;\n+    }\n+\n+    public void setFirst(Link first) {\n+        this.first = first;\n+    }\n+\n+    public Link getCurrent(){\n+        return current;\n+    }\n+\n+    public String insertAfter(String name, int age){\n+        Link newLink = new Link(name, age);\n+        if (list.isEmpty()){\n+            list.setFirst(newLink);\n+            current = newLink;\n+        } else {\n+            newLink.next = current.next;\n+            current.next = newLink;\n+            nextLink();\n+        }\n+\n+        public String insertBefore(String name, int age){\n+            newLink = new Link(name, age);\n+            if(previous == null){\n+                newLink.next = (Link) list.getFirst();\n+                list.setFirst(newLink);\n+                reset();\n+            }\n+            else{\n+                newLink.next = previous.next;\n+                previous.next = newLink;\n+                current = newLink;\n+            }\n+        }\n+\n+        public String deleteCurrent(String name, int age){\n+            name = current.name;\n+            if (previous == null){\n+                list.setFirst(current.next);\n+                reset();\n+            } else {\n+                previous.next = current.next;\n+                if (atEnd()){\n+                    reset();\n+                } else {\n+                    current = current.next;\n+                }\n+            }\n+\n+            return name;\n+        }\n+\n+    }\n+\n+    public void insertBefore(String name, int age) {\n+\n+    }\n+}"
  },
  {
    "sha": "21f7dbe67f5acddf50449db67acb212d98e7658c",
    "filename": "src/lession_4/LinkIteratorApp.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/LinkIteratorApp.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/LinkIteratorApp.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_4/LinkIteratorApp.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,16 @@\n+package lession_4;\n+\n+public class LinkIteratorApp {\n+\n+    public static void main(String[] args) {\n+        LinkedList list = new LinkedList();\n+\n+        LinkInterator itr = new LinkInterator(list);\n+\n+        itr.insertAfter(\"Artem\", 20);\n+        itr.insertBefore(\"Sergey\", 10);\n+\n+        list.display();\n+    }\n+\n+}"
  },
  {
    "sha": "2e13fd355eec0dceec88591e77bfb4fa444a1f98",
    "filename": "src/lession_4/LinkedList.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/LinkedList.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_4/LinkedList.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_4/LinkedList.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,43 @@\n+package lession_4;\n+\n+import java.util.function.UnaryOperator;\n+\n+public class LinkedList extends java.util.LinkedList {\n+    private Link first;\n+\n+\n+    public LinkedList(){\n+        first = null;\n+\n+    }\n+\n+    public Link getFirst() {\n+        return first;\n+    }\n+\n+//    public void setFirst(Link first) {\n+//        this.first = first;\n+//    }\n+\n+    public LinkInterator getIterator(){\n+        return new LinkInterator(this);\n+    }\n+\n+    public boolean isEmpty(){\n+        return (first == null);\n+    }\n+\n+    @Override\n+    public void replaceAll(UnaryOperator operator) {\n+\n+    }\n+\n+    public void display(){\n+        Link current = first;\n+        while(current != null){\n+            current.display();\n+            current = current.next;\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "4b83867f348dc3363eacf6c545ab1e795fbebe9f",
    "filename": "src/lession_5/HW5.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_5/HW5.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_5/HW5.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_5/HW5.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,35 @@\n+package lession_5;\n+\n+\n+\n+public class HW5 {\n+\n+    public static void main(String[] args) {\n+\n+        System.out.println(exponentiation(5, 7));\n+        System.out.println(exponentiation(6, 0));\n+        System.out.println(exponentiation(9, 6));\n+        System.out.println(exponentiation(2, -3));\n+\n+    }\n+\n+    public static int exponentiation(int value, int rank) {\n+        if (value == 0) {\n+            if (rank > 0)\n+                return 0;\n+            else\n+                throw new IllegalArgumentException(\"Invalid rank \" + rank + \" for digit = 0\");\n+        }\n+        if (rank < 0) {\n+            return 1 / (value * exponentiation(value, -rank - 1));\n+        }\n+        else if (rank > 0) {\n+            return value * exponentiation(value, rank - 1);\n+        }\n+        else {\n+            return 1;\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "3a93854879280b07812ed8c25b5629564e0b636d",
    "filename": "src/lession_6/TreeMap.java",
    "status": "added",
    "additions": 276,
    "deletions": 0,
    "changes": 276,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_6/TreeMap.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_6/TreeMap.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_6/TreeMap.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,276 @@\n+package lession_6;\n+\n+import java.util.NoSuchElementException;\n+\n+public class TreeMap <Key extends Comparable<Key>, Value> {\n+\n+    private Node root = null;\n+\n+    private class Node{\n+        Key key;\n+        Value value;\n+        Node left;\n+        Node right;\n+        int size;\n+        int height;\n+\n+        Node(Key key, Value value, int size, int height) {\n+            this.key = key;\n+            this.value = value;\n+            this.size = size;\n+            this.height = height;\n+        }\n+    }\n+\n+    private boolean isEmpty() {\n+        return root == null;\n+    }\n+\n+    public int size() {\n+        return root == null ? 0 : root.size;\n+    }\n+\n+    private int size(Node node) {\n+        if (node == null) {\n+            return 0;\n+        } else {\n+            return node.size;\n+        }\n+    }\n+\n+    int height() {\n+        return height(root);\n+    }\n+\n+    private int height(Node node) {\n+        if (node == null) {\n+            return 0;\n+        }\n+        return node.height;\n+    }\n+\n+    public Value get(Key key) {\n+        return get(key, root);\n+    }\n+\n+    private Value get(Key key, Node node) {\n+        if (key == null) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        if (node == null) {\n+            return null;\n+        }\n+\n+        Value result = null;\n+\n+        switch (key.compareTo(node.key)) {\n+            case 0:\n+                result = node.value;\n+                break;\n+            case 1:\n+                result = get(key, node.right);\n+                break;\n+            case -1:\n+                result = get(key, node.left);\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    void put(Key key, Value value) {\n+        root = put(key, value, root);\n+    }\n+\n+    private Node put(Key key, Value value, Node node) {\n+        if (key == null) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        if (node == null) {\n+            return new Node(key, value, 1, 0 );\n+        }\n+\n+        int res = key.compareTo(node.key);\n+        if (res == 0) {\n+            node.value = value;\n+        } else if (res < 0) {\n+            node.left = put(key, value, node.left);\n+        } else {\n+            node.right = put(key, value, node.right);\n+        }\n+\n+        node.size = size(node.left) + size(node.right) + 1;\n+\n+        if (node.left == null && node.right == null) {\n+            node.height = 0;\n+        } else if (node.left != null && node.right == null) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left == null) {\n+            node.height = node.right.height + 1;\n+        } else if (node.left.height > node.right.height) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left.height < node.right.height) {\n+            node.height = node.right.height + 1;\n+        } else {\n+            node.height = node.left.height + 1;\n+        }\n+\n+        return node;\n+    }\n+\n+    public Value min() {\n+        return min(root).value;\n+    }\n+\n+    private Node min(Node node) {\n+        if (node.left == null) {\n+            return node;\n+        } else {\n+            return min(node.left);\n+        }\n+    }\n+\n+    public Value max() {\n+        return max(root).value;\n+    }\n+\n+    private Node max(Node node) {\n+        if (node.right == null) {\n+            return node;\n+        } else {\n+            return max(node.right);\n+        }\n+    }\n+\n+    private Node removeMin(Node node) {\n+        if (node.left == null) {\n+            return node.right;\n+        } else {\n+            node.left = removeMin(node.left);\n+        }\n+        node.size = size(node.left) + size(node.right) + 1;\n+\n+        if (node.left == null && node.right == null) {\n+            node.height = 0;\n+        } else if (node.left != null && node.right == null) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left == null) {\n+            node.height = node.right.height + 1;\n+        } else if (node.left.height > node.right.height) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left.height < node.right.height) {\n+            node.height = node.right.height + 1;\n+        } else {\n+            node.height = node.left.height + 1;\n+        }\n+        return node;\n+    }\n+\n+    public void removeMin() {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException();\n+        }\n+        root = removeMin(root);\n+    }\n+\n+    public void removeMax() {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException();\n+        }\n+        root = removeMax(root);\n+    }\n+\n+    private Node removeMax(Node node) {\n+        if (node.right == null) {\n+            return node.left;\n+        } else {\n+            node.right = removeMax(node.right);\n+        }\n+        node.size = size(node.left) + size(node.right) + 1;\n+\n+        if (node.left == null && node.right == null) {\n+            node.height = 0;\n+        } else if (node.left != null && node.right == null) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left == null) {\n+            node.height = node.right.height + 1;\n+        } else if (node.left.height > node.right.height) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left.height < node.right.height) {\n+            node.height = node.right.height + 1;\n+        } else {\n+            node.height = node.left.height + 1;\n+        }\n+        return node;\n+    }\n+\n+    public void remove(Key key) {\n+        root = remove(key, root);\n+    }\n+\n+    private Node remove(Key key, Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        int tmp = key.compareTo(node.key);\n+        if (tmp == 0) {\n+            if (node.left == null) {\n+                return node.right;\n+            }\n+            if(node.right == null) {\n+                return node.left;\n+            }\n+\n+            Node tmp1 = node;\n+            node = max(node.left);\n+            node.left = removeMax(tmp1.left);\n+            node.right = tmp1.right;\n+            tmp1 = null;\n+        } else if (tmp < 0) {\n+            node.left = remove(key, node.left);\n+        } else {\n+            node.right = remove(key, node.right);\n+        }\n+\n+        node.size = size(node.left) + size(node.right) + 1;\n+\n+        if (node.left == null && node.right == null) {\n+            node.height = 0;\n+        } else if (node.left != null && node.right == null) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left == null) {\n+            node.height = node.right.height + 1;\n+        } else if (node.left.height > node.right.height) {\n+            node.height = node.left.height + 1;\n+        } else if (node.left.height < node.right.height) {\n+            node.height = node.right.height + 1;\n+        } else {\n+            node.height = node.left.height + 1;\n+        }\n+        return node;\n+    }\n+\n+    boolean isBalanced() {\n+        if (root == null || root.size == 1) {\n+            return true;\n+        } else {\n+            int leftHeight;\n+            int rightHeight;\n+\n+            if (root.left == null) {\n+                leftHeight = 0;\n+            } else {\n+                leftHeight = root.left.height;\n+            }\n+\n+            if (root.right == null) {\n+                rightHeight = 0;\n+            } else {\n+                rightHeight = root.right.height;\n+            }\n+            return Math.abs(leftHeight - rightHeight) <= 1;\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6488257f45067a48ceb072c6fba1646d3984a143",
    "filename": "src/lession_6/TreeMapTest.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_6/TreeMapTest.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_6/TreeMapTest.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_6/TreeMapTest.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,30 @@\n+package lession_6;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public class TreeMapTest {\n+\n+    @Test\n+    public void homework() {\n+        int countOfTrees = 20;\n+\n+        int balanced = 0;\n+        for (int i = 0; i < countOfTrees; i++) {\n+            TreeMap<Integer, Integer> map = new TreeMap<>();\n+            fillTreeMap(map);\n+            if (map.isBalanced()) {\n+                balanced++;\n+            }\n+        }\n+        System.out.println(\"Из \" + countOfTrees + \" деревьев сбалансировано всего \" + balanced);\n+        System.out.println(\"Несбалансировано \" + ((((int) (countOfTrees - balanced)) * 100) / (int) countOfTrees) + \" %\");\n+    }\n+\n+    private void fillTreeMap(TreeMap<Integer, Integer> _MyTreeMap) {\n+        while (_MyTreeMap.height() < 6) {\n+            _MyTreeMap.put(ThreadLocalRandom.current().nextInt(-100, 100), 0);\n+        }\n+    }\n+}"
  },
  {
    "sha": "a78ce97abdfd3999bce56565f65b2621fdc59c38",
    "filename": "src/lession_7/BreadthFirstPath.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/BreadthFirstPath.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/BreadthFirstPath.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_7/BreadthFirstPath.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,81 @@\n+package lession_7;\n+\n+import java.util.LinkedList;\n+\n+public class BreadthFirstPath {\n+    private boolean[] marked;\n+    private int[] edgeTo;\n+    private int[] distTo;\n+    private int source;\n+    private int inf = Integer.MAX_VALUE;\n+\n+    BreadthFirstPath(MyGraph g, int source) {\n+        if (source < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (source > g.getVertexCount() - 1) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+        this.source = source;\n+        edgeTo = new int[g.getVertexCount()];\n+        distTo = new int[g.getVertexCount()];\n+        marked = new boolean[g.getVertexCount()];\n+        for (int i = 0; i < g.getVertexCount(); i++) {\n+            distTo[i] = inf;\n+        }\n+        bfs(g, source);\n+    }\n+\n+    private void bfs(MyGraph g, int source) {\n+        LinkedList<Integer> queue = new LinkedList<>();\n+        queue.addLast(source);\n+        marked[source] = true;\n+        distTo[source] = 0;\n+\n+        while (!queue.isEmpty()) {\n+            int currentVertex = queue.removeFirst();\n+            for (int w: g.adjList(currentVertex)) {\n+                if (!marked[w]) {\n+                    marked[w] = true;\n+                    edgeTo[w] = currentVertex;\n+                    distTo[w] = distTo[currentVertex] + 1;\n+                    queue.addLast(w);\n+                }\n+            }\n+        }\n+    }\n+\n+    boolean hasPathTo(int dist) {\n+        if (dist < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (dist > marked.length) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+        return marked[dist];\n+    }\n+\n+    LinkedList<Integer> pathTo(int dist) {\n+        if (!hasPathTo(dist)) {\n+            return null;\n+        }\n+\n+        LinkedList<Integer> stack = new LinkedList<>();\n+        int currentVertex = dist;\n+        while (currentVertex != source) {\n+            stack.push(currentVertex);\n+            currentVertex = edgeTo[currentVertex];\n+        }\n+        return stack;\n+    }\n+\n+    public int distTo(int dist) {\n+        if (dist < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (dist > marked.length - 1) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+        return distTo[dist];\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6acc518b9209edb5c5f8ef4de74ee79337803956",
    "filename": "src/lession_7/DepthFirstPaths.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/DepthFirstPaths.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/DepthFirstPaths.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_7/DepthFirstPaths.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,54 @@\n+package lession_7;\n+\n+import java.util.LinkedList;\n+\n+public class DepthFirstPaths {\n+    private boolean[] marked;\n+    private int[] edgeTo;\n+    private int source;\n+\n+    public DepthFirstPaths(MyGraph g, int source) {\n+        if (source < 0)\n+            throw new IllegalArgumentException();\n+        if (source > g.getVertexCount() - 1)\n+            throw new IndexOutOfBoundsException();\n+        this.source = source;\n+        edgeTo = new int[g.getVertexCount()];\n+        marked = new boolean[g.getVertexCount()];\n+        dfs(g, source);\n+    }\n+\n+    private void dfs(MyGraph g, int v){\n+        marked[v] = true;\n+        for(int w : g.adjList(v)) {\n+            if (!marked[w]) {\n+                edgeTo[w] = v;\n+                dfs(g, w);\n+            }\n+        }\n+    }\n+\n+    public boolean hasPathTo(int dest) {\n+        if (dest < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (dest > marked.length) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+        return marked[dest];\n+    }\n+\n+    public LinkedList<Integer> pathTo(int dist) {\n+        if (!hasPathTo(dist)) {\n+            return null;\n+        }\n+        LinkedList<Integer> stack = new LinkedList<>();\n+\n+        int currentVertex = dist;\n+        while (currentVertex != source) {\n+            stack.push(currentVertex);\n+            currentVertex = edgeTo[currentVertex];\n+        }\n+        return stack;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6f3fa355271c4652c3fb11559705132827e65919",
    "filename": "src/lession_7/Homework.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/Homework.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/Homework.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_7/Homework.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,27 @@\n+package lession_7;\n+\n+import org.junit.Test;\n+\n+public class Homework {\n+\n+    @Test\n+    public void findWay() {\n+        MyGraph graph = new MyGraph(10);\n+        graph.addEdge(0, 4);\n+        graph.addEdge(0, 2);\n+        graph.addEdge(0, 1);\n+        graph.addEdge(2, 7);\n+        graph.addEdge(2, 8);\n+        graph.addEdge(3, 9);\n+        graph.addEdge(3, 6);\n+        graph.addEdge(3, 5);\n+        graph.addEdge(4, 1);\n+        graph.addEdge(5, 7);\n+        graph.addEdge(5, 9);\n+        graph.addEdge(5, 2);\n+\n+        BreadthFirstPath bfs = new BreadthFirstPath(graph, 0);\n+        assert bfs.hasPathTo(9);\n+        System.out.println(\"Кратчайший путь: \"+ bfs.pathTo(9));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ec7656bd79df2c6fed06c3de1323a0ec161407ac",
    "filename": "src/lession_7/MyGraph.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Olga0103/algorithms/blob/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/MyGraph.java",
    "raw_url": "https://github.com/Olga0103/algorithms/raw/5543f4292e53621a0e545feb8779713e6b789dd0/src/lession_7/MyGraph.java",
    "contents_url": "https://api.github.com/repos/Olga0103/algorithms/contents/src/lession_7/MyGraph.java?ref=5543f4292e53621a0e545feb8779713e6b789dd0",
    "patch": "@@ -0,0 +1,44 @@\n+package lession_7;\n+\n+import java.util.LinkedList;\n+\n+public class MyGraph {\n+    private int vertexCount;\n+    private int edgeCount;\n+    private LinkedList<Integer>[] adjLists;\n+\n+    MyGraph(int vertexCount) {\n+        if (vertexCount < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        this.vertexCount = vertexCount;\n+        adjLists = new LinkedList[vertexCount];\n+        for (int i = 0; i < vertexCount; i++) {\n+            adjLists[i] = new LinkedList<>();\n+        }\n+    }\n+\n+    int getVertexCount() {\n+        return vertexCount;\n+    }\n+\n+    public int getEdgeCount() {\n+        return edgeCount;\n+    }\n+\n+    void addEdge(int v1, int v2) {\n+        if (v1 < 0 || v2 < 0 || v1 > vertexCount - 1 || v2 > vertexCount - 1) {\n+            throw new IllegalArgumentException(\"Номер вершины не может быть отрицательный\");\n+        }\n+        adjLists[v1].add(v2);\n+        adjLists[v2].add(v1);\n+        edgeCount++;\n+    }\n+\n+    LinkedList<Integer> adjList(int v) {\n+        if (vertexCount < 0 || v > vertexCount - 1) {\n+            throw new IllegalArgumentException(\"Номер вершины не может быть отрицательный\");\n+        }\n+        return adjLists[v];\n+    }\n+}\n\\ No newline at end of file"
  }
]
