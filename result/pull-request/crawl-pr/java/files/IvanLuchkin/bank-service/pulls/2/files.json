[
  {
    "sha": "babf8172f0cf7345e40747ffa2904d115a256698",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/build.gradle",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/build.gradle",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/build.gradle?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -26,7 +26,6 @@ dependencies {\n     compileOnly 'org.projectlombok:lombok'\n     annotationProcessor 'org.projectlombok:lombok'\n     testImplementation 'org.springframework.boot:spring-boot-starter-test'\n-    testImplementation group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '2.2.0'\n }\n \n checkstyle {"
  },
  {
    "sha": "ea6e5e76fa6db63c40a2fbf8eecfcaac64179450",
    "filename": "src/main/java/com/banking/bankservice/model/Account.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Account.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Account.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/model/Account.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,28 @@\n+package com.banking.bankservice.model;\n+\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.DBRef;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+@Document(collection = \"accounts\")\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class Account {\n+    @Id\n+    private String accountNumber;\n+    private Currency currency;\n+    private double balance;\n+    private boolean isActive;\n+    @DBRef\n+    @ToString.Exclude\n+    private User user;\n+    @EqualsAndHashCode.Exclude\n+    private List<Transaction> transactions;\n+}"
  },
  {
    "sha": "c0009df909275ea85fb4048cd3e163d83e210063",
    "filename": "src/main/java/com/banking/bankservice/model/Currency.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Currency.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Currency.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/model/Currency.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,8 @@\n+package com.banking.bankservice.model;\n+\n+public enum Currency {\n+    USD,\n+    UAH,\n+    EUR,\n+    RUB\n+}"
  },
  {
    "sha": "592bbf53116d9f5556da099c0ed4317498ce767e",
    "filename": "src/main/java/com/banking/bankservice/model/Role.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Role.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Role.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/model/Role.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -19,13 +19,13 @@\n     private ObjectId id;\n     @Field(targetType = FieldType.STRING)\n     @Indexed(unique = true)\n-    private RoleType roleType;\n+    private Type type;\n \n-    public Role(RoleType roleType) {\n-        this.roleType = roleType;\n+    public Role(Type type) {\n+        this.type = type;\n     }\n \n-    public enum RoleType {\n+    public enum Type {\n         ADMIN, USER;\n     }\n }"
  },
  {
    "sha": "7e3b318d309d13c69a81fc10da24f57347e8bf26",
    "filename": "src/main/java/com/banking/bankservice/model/Transaction.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Transaction.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/model/Transaction.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/model/Transaction.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,24 @@\n+package com.banking.bankservice.model;\n+\n+import java.time.LocalDateTime;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+@Document\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class Transaction {\n+    private String senderAccountNumber;\n+    private String receiverAccountNumber;\n+    private Type type;\n+    private double amount;\n+    private LocalDateTime date;\n+\n+    public enum Type {\n+        OUTGOING,\n+        INCOMING\n+    }\n+}"
  },
  {
    "sha": "b8aa02d72c1a55b6eed6e585637ef3995071ab8e",
    "filename": "src/main/java/com/banking/bankservice/repository/AccountRepository.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/repository/AccountRepository.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/repository/AccountRepository.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/repository/AccountRepository.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,28 @@\n+package com.banking.bankservice.repository;\n+\n+import com.banking.bankservice.model.Account;\n+import com.banking.bankservice.model.Transaction;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bson.types.ObjectId;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.mongodb.repository.Aggregation;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+public interface AccountRepository extends PagingAndSortingRepository<Account, ObjectId> {\n+    Optional<Account> findByAccountNumber(String accountNumber);\n+\n+    @Aggregation(pipeline = {\n+            \"{$lookup: {from: 'users', localField: 'user.$id', foreignField: '_id', as: 'temp'}}\",\n+            \"{$match: {'temp': {$elemMatch: {'phoneNumber': ?0}}}}\",\n+            \"{$unset: 'temp'}\"})\n+    List<Account> findAccountsByUserPhone(String phoneNumber);\n+\n+    @Aggregation(pipeline = {\n+            \"{$match: {'_id': ObjectId('?0')}}\",\n+            \"{$project: {'transactions': 1, '_id': 0}}\",\n+            \"{$unwind: {path: '$transactions'}}\",\n+            \"{$replaceRoot: {newRoot: '$transactions'}}\",\n+            \"{$sort: {'date': -1}}\"})\n+    List<Transaction> getPaymentHistory(String accountNumber, final Pageable pageable);\n+}"
  },
  {
    "sha": "b7dd1a0fef41c114c5107352f93a983a880dd903",
    "filename": "src/main/java/com/banking/bankservice/repository/RoleRepository.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/repository/RoleRepository.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/repository/RoleRepository.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/repository/RoleRepository.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -6,5 +6,5 @@\n import org.springframework.data.mongodb.repository.MongoRepository;\n \n public interface RoleRepository extends MongoRepository<Role, ObjectId> {\n-    Optional<Role> findByRoleType(Role.RoleType roleType);\n+    Optional<Role> findByType(Role.Type type);\n }"
  },
  {
    "sha": "dc43bf8bb2a6366facf71d5ebf9d0d9a79a8fa85",
    "filename": "src/main/java/com/banking/bankservice/service/AccountService.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/AccountService.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/AccountService.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/service/AccountService.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,19 @@\n+package com.banking.bankservice.service;\n+\n+import com.banking.bankservice.model.Account;\n+import com.banking.bankservice.model.Transaction;\n+import java.util.List;\n+\n+public interface AccountService {\n+    Account add(Account account);\n+\n+    List<Account> getByUserPhone(String phoneNumber);\n+\n+    Account getByAccountNumber(String accountNumber);\n+\n+    List<Transaction> getPaymentHistory(String accountNumber, int page, int size);\n+\n+    Account update(Account account);\n+\n+    void transfer(String senderAccountNumber, String receiverAccountNumber, double amount);\n+}"
  },
  {
    "sha": "ec016d9c66fe184980bdf1e5b8b99c0f4025ede3",
    "filename": "src/main/java/com/banking/bankservice/service/RoleService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/RoleService.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/RoleService.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/service/RoleService.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -3,7 +3,7 @@\n import com.banking.bankservice.model.Role;\n \n public interface RoleService {\n-    Role getByType(Role.RoleType roleType);\n+    Role getByType(Role.Type type);\n \n     Role addRole(Role role);\n }"
  },
  {
    "sha": "cd799ea6340346f7af9841cd5ccfe80fd54c5549",
    "filename": "src/main/java/com/banking/bankservice/service/impl/AccountServiceImpl.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/impl/AccountServiceImpl.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/impl/AccountServiceImpl.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/service/impl/AccountServiceImpl.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,70 @@\n+package com.banking.bankservice.service.impl;\n+\n+import com.banking.bankservice.exception.EntityNotFoundException;\n+import com.banking.bankservice.model.Account;\n+import com.banking.bankservice.model.Transaction;\n+import com.banking.bankservice.repository.AccountRepository;\n+import com.banking.bankservice.service.AccountService;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@AllArgsConstructor\n+public class AccountServiceImpl implements AccountService {\n+    private final AccountRepository accountRepository;\n+\n+    @Override\n+    public Account add(Account account) {\n+        return accountRepository.save(account);\n+    }\n+\n+    @Override\n+    public List<Account> getByUserPhone(String phoneNumber) {\n+        return accountRepository.findAccountsByUserPhone(phoneNumber);\n+    }\n+\n+    @Override\n+    public Account getByAccountNumber(String accountNumber) {\n+        return accountRepository.findByAccountNumber(accountNumber).orElseThrow(() ->\n+                new EntityNotFoundException(\"Account \" + accountNumber + \" not found\"));\n+    }\n+\n+    @Override\n+    public List<Transaction> getPaymentHistory(String accountNumber, int page, int size) {\n+        return accountRepository.getPaymentHistory(accountNumber, PageRequest.of(page, size));\n+    }\n+\n+    @Override\n+    public Account update(Account account) {\n+        return accountRepository.save(account);\n+    }\n+\n+    @Override\n+    public void transfer(String senderAccountNumber, String receiverAccountNumber, double amount) {\n+        Account sender = getByAccountNumber(senderAccountNumber);\n+        Account receiver = getByAccountNumber(receiverAccountNumber);\n+        LocalDateTime transactionTimeStamp = LocalDateTime.now().withNano(0);\n+\n+        Transaction outgoingTransaction = new Transaction(\n+                sender.getAccountNumber(),\n+                receiver.getAccountNumber(),\n+                Transaction.Type.OUTGOING, amount,\n+                transactionTimeStamp);\n+        Transaction incomingTransaction = new Transaction(\n+                sender.getAccountNumber(),\n+                receiver.getAccountNumber(),\n+                Transaction.Type.INCOMING, amount,\n+                transactionTimeStamp);\n+\n+        sender.getTransactions().add(outgoingTransaction);\n+        sender.setBalance(sender.getBalance() - amount);\n+        receiver.getTransactions().add(incomingTransaction);\n+        receiver.setBalance(receiver.getBalance() + amount);\n+\n+        accountRepository.save(sender);\n+        accountRepository.save(receiver);\n+    }\n+}"
  },
  {
    "sha": "e82d31202158ad2909d57ae126c02a38ea6cf43a",
    "filename": "src/main/java/com/banking/bankservice/service/impl/RoleServiceImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/impl/RoleServiceImpl.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/main/java/com/banking/bankservice/service/impl/RoleServiceImpl.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/main/java/com/banking/bankservice/service/impl/RoleServiceImpl.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -13,9 +13,9 @@\n     private final RoleRepository roleRepository;\n \n     @Override\n-    public Role getByType(Role.RoleType roleType) {\n-        return roleRepository.findByRoleType(roleType).orElseThrow(() ->\n-                new EntityNotFoundException(\"Role \" + roleType + \" does not exist\"));\n+    public Role getByType(Role.Type type) {\n+        return roleRepository.findByType(type).orElseThrow(() ->\n+                new EntityNotFoundException(\"Role \" + type + \" does not exist\"));\n     }\n \n     @Override"
  },
  {
    "sha": "ffbec1e9ec13c3d2bd09b7d79528857474e2a8e2",
    "filename": "src/test/java/com/banking/bankservice/repository/AccountRepositoryTest.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/test/java/com/banking/bankservice/repository/AccountRepositoryTest.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/test/java/com/banking/bankservice/repository/AccountRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/test/java/com/banking/bankservice/repository/AccountRepositoryTest.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -0,0 +1,114 @@\n+package com.banking.bankservice.repository;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import com.banking.bankservice.model.Account;\n+import com.banking.bankservice.model.Currency;\n+import com.banking.bankservice.model.Transaction;\n+import com.banking.bankservice.model.User;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@DataMongoTest\n+@ExtendWith(SpringExtension.class)\n+public class AccountRepositoryTest {\n+    private static User firstTestUser;\n+    private static User secondTestUser;\n+    private static Account firstTestAccount;\n+    private static Account secondTestAccount;\n+    private static Account thirdTestAccount;\n+    @Autowired\n+    private AccountRepository accountRepository;\n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        firstTestUser = new User();\n+        firstTestUser.setPhoneNumber(\"123456\");\n+        firstTestUser.setName(\"first\");\n+\n+        secondTestUser = new User();\n+        secondTestUser.setPhoneNumber(\"001001\");\n+        secondTestUser.setName(\"second\");\n+\n+        firstTestAccount = new Account();\n+        firstTestAccount.setActive(true);\n+        firstTestAccount.setBalance(2000);\n+        firstTestAccount.setCurrency(Currency.EUR);\n+\n+        secondTestAccount = new Account();\n+        secondTestAccount.setActive(true);\n+        secondTestAccount.setBalance(2000);\n+        secondTestAccount.setCurrency(Currency.EUR);\n+\n+        thirdTestAccount = new Account();\n+        thirdTestAccount.setActive(true);\n+        thirdTestAccount.setBalance(2000);\n+        thirdTestAccount.setCurrency(Currency.EUR);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        firstTestAccount.setUser(null);\n+        secondTestAccount.setUser(null);\n+        accountRepository.deleteAll();\n+        userRepository.deleteAll();\n+    }\n+\n+    @Test\n+    public void testCreation() {\n+        userRepository.save(firstTestUser);\n+        firstTestAccount.setUser(firstTestUser);\n+        Account savedAccount = accountRepository.save(firstTestAccount);\n+        assertNotNull(savedAccount.getAccountNumber());\n+    }\n+\n+    @Test\n+    public void testFindByAccountNumber() {\n+        String accountNumber = accountRepository.save(firstTestAccount).getAccountNumber();\n+        assertEquals(firstTestAccount,\n+                accountRepository.findByAccountNumber(accountNumber).get());\n+    }\n+\n+    @Test\n+    public void testGetPaymentHistory() {\n+        userRepository.save(firstTestUser);\n+        firstTestAccount.setUser(firstTestUser);\n+        accountRepository.save(firstTestAccount);\n+        accountRepository.save(secondTestAccount);\n+\n+        Transaction transaction = new Transaction(\n+                firstTestAccount.getAccountNumber(),\n+                secondTestAccount.getAccountNumber(),\n+                Transaction.Type.OUTGOING, 20, LocalDateTime.now().withNano(0));\n+        firstTestAccount.setTransactions(List.of(transaction));\n+\n+        accountRepository.save(firstTestAccount);\n+\n+        assertEquals(List.of(transaction),\n+                accountRepository.getPaymentHistory(firstTestAccount.getAccountNumber(),\n+                        Pageable.unpaged()));\n+    }\n+\n+    @Test\n+    public void testFindByUserPhoneNumber() {\n+        userRepository.saveAll(List.of(firstTestUser, secondTestUser));\n+        firstTestAccount.setUser(firstTestUser);\n+        secondTestAccount.setUser(secondTestUser);\n+        thirdTestAccount.setUser(firstTestUser);\n+        accountRepository.saveAll(List.of(firstTestAccount, secondTestAccount, thirdTestAccount));\n+\n+        assertEquals(List.of(firstTestAccount, thirdTestAccount),\n+                accountRepository.findAccountsByUserPhone(firstTestUser.getPhoneNumber()));\n+    }\n+}"
  },
  {
    "sha": "f6b5f103f30fedb216e72a1b37604057a96212ef",
    "filename": "src/test/java/com/banking/bankservice/repository/RoleRepositoryTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/test/java/com/banking/bankservice/repository/RoleRepositoryTest.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/test/java/com/banking/bankservice/repository/RoleRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/test/java/com/banking/bankservice/repository/RoleRepositoryTest.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -14,8 +14,8 @@\n @DataMongoTest\n @ExtendWith(SpringExtension.class)\n public class RoleRepositoryTest {\n-    private static final Role TEST_ADMIN_ROLE = new Role(Role.RoleType.ADMIN);\n-    private static final Role TEST_USER_ROLE = new Role(Role.RoleType.USER);\n+    private static final Role TEST_ADMIN_ROLE = new Role(Role.Type.ADMIN);\n+    private static final Role TEST_USER_ROLE = new Role(Role.Type.USER);\n     @Autowired\n     private RoleRepository roleRepository;\n \n@@ -33,7 +33,7 @@ public void whenInsertedIdAssigned() {\n     @Test\n     public void testFindByRoleName() {\n         roleRepository.save(TEST_USER_ROLE);\n-        Role actualRole = roleRepository.findByRoleType(Role.RoleType.USER).get();\n+        Role actualRole = roleRepository.findByType(Role.Type.USER).get();\n         assertNotNull(actualRole.getId());\n     }\n "
  },
  {
    "sha": "bfd55b0e66cada6ba100f8d3653fbcf322e79525",
    "filename": "src/test/java/com/banking/bankservice/repository/UserRepositoryTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/IvanLuchkin/bank-service/blob/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/test/java/com/banking/bankservice/repository/UserRepositoryTest.java",
    "raw_url": "https://github.com/IvanLuchkin/bank-service/raw/6898197534f3b18cce34dc40e147f9ddae5e40ae/src/test/java/com/banking/bankservice/repository/UserRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/IvanLuchkin/bank-service/contents/src/test/java/com/banking/bankservice/repository/UserRepositoryTest.java?ref=6898197534f3b18cce34dc40e147f9ddae5e40ae",
    "patch": "@@ -35,8 +35,8 @@ public void tearDown() {\n \n     @Test\n     public void whenInsertedIdAssigned() {\n-        User savedUser = userRepository.save(testUser);\n-        assertNotNull(savedUser.getId());\n+        userRepository.save(testUser);\n+        assertNotNull(testUser.getId());\n     }\n \n     @Test"
  }
]
