[
  {
    "sha": "0d4b953251c329b3d31701416639f25ddb9a4716",
    "filename": "app/build.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/burhanrashid52/PhotoEditor/blob/722737d669d02c69488b85534499edbb0b2409c6/app/build.gradle",
    "raw_url": "https://github.com/burhanrashid52/PhotoEditor/raw/722737d669d02c69488b85534499edbb0b2409c6/app/build.gradle",
    "contents_url": "https://api.github.com/repos/burhanrashid52/PhotoEditor/contents/app/build.gradle?ref=722737d669d02c69488b85534499edbb0b2409c6",
    "patch": "@@ -16,6 +16,10 @@ android {\n             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n         }\n     }\n+    compileOptions {\n+        sourceCompatibility JavaVersion.VERSION_1_8\n+        targetCompatibility JavaVersion.VERSION_1_8\n+    }\n }\n \n dependencies {"
  },
  {
    "sha": "279018379bc73ef49284ce3154d1d30ae2410d6c",
    "filename": "app/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/burhanrashid52/PhotoEditor/blob/722737d669d02c69488b85534499edbb0b2409c6/app/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/burhanrashid52/PhotoEditor/raw/722737d669d02c69488b85534499edbb0b2409c6/app/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/burhanrashid52/PhotoEditor/contents/app/src/main/AndroidManifest.xml?ref=722737d669d02c69488b85534499edbb0b2409c6",
    "patch": "@@ -3,7 +3,8 @@\n     xmlns:tools=\"http://schemas.android.com/tools\"\n     package=\"com.burhanrashid52.photoediting\">\n \n-    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n+    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\n+        android:maxSdkVersion=\"28\" />\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n \n     <application"
  },
  {
    "sha": "148ad35aa4543d8c975a710cdcafdf3cbee9179e",
    "filename": "app/src/main/java/com/burhanrashid52/photoediting/EditImageActivity.java",
    "status": "modified",
    "additions": 70,
    "deletions": 33,
    "changes": 103,
    "blob_url": "https://github.com/burhanrashid52/PhotoEditor/blob/722737d669d02c69488b85534499edbb0b2409c6/app/src/main/java/com/burhanrashid52/photoediting/EditImageActivity.java",
    "raw_url": "https://github.com/burhanrashid52/PhotoEditor/raw/722737d669d02c69488b85534499edbb0b2409c6/app/src/main/java/com/burhanrashid52/photoediting/EditImageActivity.java",
    "contents_url": "https://api.github.com/repos/burhanrashid52/PhotoEditor/contents/app/src/main/java/com/burhanrashid52/photoediting/EditImageActivity.java?ref=722737d669d02c69488b85534499edbb0b2409c6",
    "patch": "@@ -47,6 +47,8 @@\n import ja.burhanrashid52.photoeditor.TextStyleBuilder;\n import ja.burhanrashid52.photoeditor.ViewType;\n \n+import static com.burhanrashid52.photoediting.FileSaveHelper.isSdk29OrHigher;\n+\n public class EditImageActivity extends BaseActivity implements OnPhotoEditorListener,\n         View.OnClickListener,\n         PropertiesBSFragment.Properties,\n@@ -76,6 +78,7 @@\n     @VisibleForTesting\n     Uri mSaveImageUri;\n \n+    private FileSaveHelper mSaveFileHelper;\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n@@ -118,6 +121,8 @@ protected void onCreate(Bundle savedInstanceState) {\n \n         //Set Image Dynamically\n         // mPhotoEditorView.getSource().setImageResource(R.drawable.color_palette);\n+\n+        mSaveFileHelper = new FileSaveHelper(this);\n     }\n \n     private void handleIntentImage(ImageView source) {\n@@ -273,41 +278,73 @@ private Uri buildFileProviderUri(@NonNull Uri uri) {\n                 new File(uri.getPath()));\n     }\n \n-    @SuppressLint(\"MissingPermission\")\n+    @SuppressLint({\"MissingPermission\",  \"NewApi\"})\n     private void saveImage() {\n-        if (requestPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n+        final String fileName = System.currentTimeMillis() + \".png\";\n+        if (isSdk29OrHigher()) {\n             showLoading(\"Saving...\");\n-            final File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\n-                    + File.separator + \"\"\n-                    + System.currentTimeMillis() + \".png\");\n-            try {\n-                file.createNewFile();\n-\n-                SaveSettings saveSettings = new SaveSettings.Builder()\n-                        .setClearViewsEnabled(true)\n-                        .setTransparencyEnabled(true)\n-                        .build();\n-\n-                mPhotoEditor.saveAsFile(file.getAbsolutePath(), saveSettings, new PhotoEditor.OnSaveListener() {\n-                    @Override\n-                    public void onSuccess(@NonNull String imagePath) {\n-                        hideLoading();\n-                        showSnackbar(\"Image Saved Successfully\");\n-                        mSaveImageUri = Uri.fromFile(new File(imagePath));\n-                        mPhotoEditorView.getSource().setImageURI(mSaveImageUri);\n-                        galleryAddPic(EditImageActivity.this, file.getAbsolutePath());\n-                    }\n-\n-                    @Override\n-                    public void onFailure(@NonNull Exception exception) {\n-                        hideLoading();\n-                        showSnackbar(\"Failed to save Image\");\n-                    }\n-                });\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-                hideLoading();\n-                showSnackbar(e.getMessage());\n+            mSaveFileHelper.createFileForSdk29orHigher(fileName, (fileCreated, filePath, error, uri) -> {\n+                if (fileCreated) {\n+                    SaveSettings saveSettings = new SaveSettings.Builder()\n+                            .setClearViewsEnabled(true)\n+                            .setTransparencyEnabled(true)\n+                            .build();\n+\n+                    mPhotoEditor.saveAsFile(filePath, saveSettings, new PhotoEditor.OnSaveListener() {\n+                        @Override\n+                        public void onSuccess(@NonNull String imagePath) {\n+                            mSaveFileHelper.notifyThatFileIsNowPubliclyAvailable();\n+                            hideLoading();\n+                            showSnackbar(\"Image Saved Successfully\");\n+                            mSaveImageUri = uri;\n+                            mPhotoEditorView.getSource().setImageURI(mSaveImageUri);\n+                        }\n+\n+                        @Override\n+                        public void onFailure(@NonNull Exception exception) {\n+                            hideLoading();\n+                            showSnackbar(\"Failed to save Image\");\n+                        }\n+                    });\n+\n+                } else {\n+                    hideLoading();\n+                    showSnackbar(error);\n+                }\n+            });\n+        } else {\n+            if (requestPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n+                showLoading(\"Saving...\");\n+                File file = new File(Environment.getExternalStorageDirectory()\n+                        + File.separator + fileName);\n+                try {\n+                    file.createNewFile();\n+\n+                    SaveSettings saveSettings = new SaveSettings.Builder()\n+                            .setClearViewsEnabled(true)\n+                            .setTransparencyEnabled(true)\n+                            .build();\n+\n+                    mPhotoEditor.saveAsFile(file.getAbsolutePath(), saveSettings, new PhotoEditor.OnSaveListener() {\n+                        @Override\n+                        public void onSuccess(@NonNull String imagePath) {\n+                            hideLoading();\n+                            showSnackbar(\"Image Saved Successfully\");\n+                            mSaveImageUri = Uri.fromFile(new File(imagePath));\n+                            mPhotoEditorView.getSource().setImageURI(mSaveImageUri);\n+                        }\n+\n+                        @Override\n+                        public void onFailure(@NonNull Exception exception) {\n+                            hideLoading();\n+                            showSnackbar(\"Failed to save Image\");\n+                        }\n+                    });\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    hideLoading();\n+                    showSnackbar(e.getMessage());\n+                }\n             }\n         }\n     }"
  },
  {
    "sha": "d2ce798dd02040ccc93c6ca276321d97b43ad5e8",
    "filename": "app/src/main/java/com/burhanrashid52/photoediting/FileSaveHelper.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/burhanrashid52/PhotoEditor/blob/722737d669d02c69488b85534499edbb0b2409c6/app/src/main/java/com/burhanrashid52/photoediting/FileSaveHelper.java",
    "raw_url": "https://github.com/burhanrashid52/PhotoEditor/raw/722737d669d02c69488b85534499edbb0b2409c6/app/src/main/java/com/burhanrashid52/photoediting/FileSaveHelper.java",
    "contents_url": "https://api.github.com/repos/burhanrashid52/PhotoEditor/contents/app/src/main/java/com/burhanrashid52/photoediting/FileSaveHelper.java?ref=722737d669d02c69488b85534499edbb0b2409c6",
    "patch": "@@ -0,0 +1,130 @@\n+package com.burhanrashid52.photoediting;\n+\n+import android.content.ContentResolver;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Build;\n+import android.provider.MediaStore;\n+\n+import androidx.annotation.RequiresApi;\n+import androidx.appcompat.app.AppCompatActivity;\n+import androidx.lifecycle.Lifecycle;\n+import androidx.lifecycle.LifecycleObserver;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.Observer;\n+import androidx.lifecycle.OnLifecycleEvent;\n+\n+import java.io.OutputStream;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FileSaveHelper implements LifecycleObserver {\n+    private ContentResolver contentResolver;\n+    private ExecutorService executor;\n+    private MutableLiveData<FileCreateData> fileCreatedResult;\n+    private OnFileCreateResult resultListener;\n+    private final Observer<FileCreateData> observer = fileCreateData -> {\n+        if (resultListener != null) {\n+            resultListener.onFileCreateResult(fileCreateData.isCreated,\n+                    fileCreateData.filePath,\n+                    fileCreateData.error,\n+                    fileCreateData.uri);\n+        }\n+    };\n+\n+    public FileSaveHelper(AppCompatActivity context) {\n+        if (isSdk29OrHigher()) {\n+            executor = Executors.newSingleThreadExecutor();\n+            this.contentResolver = context.getContentResolver();\n+            fileCreatedResult = new MutableLiveData<>();\n+            fileCreatedResult.observe(context, observer);\n+            context.getLifecycle().addObserver(this);\n+        }\n+    }\n+\n+    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)\n+    public void release() {\n+        if (null != executor) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    public static boolean isSdk29OrHigher() {\n+        return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q);\n+    }\n+\n+\n+    @RequiresApi(api = Build.VERSION_CODES.Q)\n+    public void createFileForSdk29orHigher(String fileNameToSave, OnFileCreateResult listener) {\n+        this.resultListener = listener;\n+        executor.submit(() -> {\n+            Cursor cursor = null;\n+            String filePath = null;\n+            try {\n+                Uri imageCollection;\n+                imageCollection = MediaStore.Images.Media\n+                        .getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);\n+                final ContentValues newImageDetails = new ContentValues();\n+                newImageDetails.put(MediaStore.Images.Media.DISPLAY_NAME, fileNameToSave);\n+                newImageDetails.put(MediaStore.Images.Media.IS_PENDING, 1);\n+                final Uri editedImageUri = contentResolver\n+                        .insert(imageCollection, newImageDetails);\n+                // create a file . simply File#createNewFile() won't work. simply to meet library needs.\n+                final OutputStream outputStream = contentResolver.openOutputStream(editedImageUri);\n+                outputStream.close();\n+                String[] proj = {MediaStore.Images.Media.DATA};\n+                cursor = contentResolver.query(editedImageUri, proj, null, null, null);\n+                int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\n+                cursor.moveToFirst();\n+                filePath = cursor.getString(column_index);\n+                updateResult(true, filePath, null, editedImageUri, newImageDetails);\n+            } catch (final Exception ex) {\n+                ex.printStackTrace();\n+                updateResult(false, null, ex.getMessage(), null, null);\n+            } finally {\n+                if (cursor != null) {\n+                    cursor.close();\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.Q)\n+    public void notifyThatFileIsNowPubliclyAvailable() {\n+        executor.submit(() -> {\n+            FileCreateData value = fileCreatedResult.getValue();\n+            if (value != null) {\n+                value.imageDetails.clear();\n+                value.imageDetails.put(MediaStore.Images.Media.IS_PENDING, 0);\n+                contentResolver.update(value.uri, value.imageDetails, null, null);\n+            }\n+        });\n+    }\n+\n+    private static class FileCreateData {\n+        public ContentValues imageDetails;\n+        public boolean isCreated;\n+        public String filePath;\n+        public Uri uri;\n+        public String error;\n+\n+        public FileCreateData(boolean isCreated, String filePath, Uri uri, String error, ContentValues newImageDetails) {\n+            this.isCreated = isCreated;\n+            this.filePath = filePath;\n+            this.uri = uri;\n+            this.error = error;\n+            this.imageDetails = newImageDetails;\n+        }\n+    }\n+\n+    public interface OnFileCreateResult {\n+        void onFileCreateResult(boolean created, String filePath, String error, Uri Uri);\n+    }\n+\n+    private void updateResult(boolean result, String filePath, String error, Uri uri, ContentValues newImageDetails) {\n+        fileCreatedResult.postValue(new FileCreateData(result, filePath, uri, error,newImageDetails));\n+    }\n+\n+}"
  }
]
