[
  {
    "sha": "b3daf7232af35cce6059c88e16e88a10b4b012f1",
    "filename": "core/src/main/java/cz/o2/proxima/repository/AttributeDescriptor.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptor.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptor.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptor.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -49,6 +49,8 @@ private Builder(Repository repo) {\n \n     @Setter private boolean replica = false;\n \n+    @Setter private TransactionMode transactionMode = TransactionMode.NONE;\n+\n     @SuppressWarnings(\"unchecked\")\n     public <T> AttributeDescriptorImpl<T> build() {\n       Objects.requireNonNull(name, \"Please specify name\");\n@@ -63,7 +65,8 @@ private Builder(Repository repo) {\n           entity,\n           schemeUri,\n           factory.map(f -> (ValueSerializer<T>) f.getValueSerializer(schemeUri)).orElse(null),\n-          replica);\n+          replica,\n+          transactionMode);\n     }\n   }\n \n@@ -190,6 +193,13 @@ default boolean isProxy() {\n     return false;\n   }\n \n+  /**\n+   * Reetrieve type of transactional support of this attribute.\n+   *\n+   * @return {@link TransactionMode} of the attribute.\n+   */\n+  TransactionMode getTransactionMode();\n+\n   /**\n    * Convert this object to {@link AttributeProxyDescriptor} iff {@link #isProxy} returns {@code\n    * true}. Throw {@link ClassCastException} otherwise."
  },
  {
    "sha": "b7118e1317e73645ba35a389f03e8ce67fcbec16",
    "filename": "core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorBase.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorBase.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorBase.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorBase.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -41,14 +41,17 @@\n \n   @Getter protected final boolean replica;\n \n+  @Getter protected final TransactionMode transactionMode;\n+\n   @Nullable protected final ValueSerializer<T> valueSerializer;\n \n   public AttributeDescriptorBase(\n       String name,\n       String entity,\n       URI schemeUri,\n       @Nullable ValueSerializer<T> valueSerializer,\n-      boolean replica) {\n+      boolean replica,\n+      TransactionMode transactionMode) {\n \n     this.name = Objects.requireNonNull(name);\n     this.entity = Objects.requireNonNull(entity);\n@@ -57,6 +60,7 @@ public AttributeDescriptorBase(\n     this.proxy = false;\n     this.valueSerializer = valueSerializer;\n     this.replica = replica;\n+    this.transactionMode = transactionMode;\n     if (this.wildcard\n         && (name.length() < 3\n             || name.substring(0, name.length() - 1).contains(\"*\")\n@@ -79,6 +83,8 @@ public AttributeDescriptorBase(\n       ValueSerializer<T> valueSerializer) {\n \n     this.name = Objects.requireNonNull(name);\n+    Preconditions.checkArgument(targetRead != null);\n+    Preconditions.checkArgument(targetWrite != null);\n     Preconditions.checkArgument(\n         targetRead.getEntity().equals(targetWrite.getEntity()),\n         String.format(\n@@ -93,6 +99,14 @@ public AttributeDescriptorBase(\n     this.replica = replica;\n     this.wildcard = targetRead.isWildcard();\n     this.valueSerializer = Objects.requireNonNull(valueSerializer);\n+\n+    Preconditions.checkArgument(\n+        targetRead.getTransactionMode() == targetWrite.getTransactionMode(),\n+        \"When specifying a proxy, both read and write targets must have the same TransactionMode, got %s and %s\",\n+        targetRead.getTransactionMode(),\n+        targetWrite.getTransactionMode());\n+\n+    this.transactionMode = targetRead.getTransactionMode();\n   }\n \n   @Override"
  },
  {
    "sha": "6b3c0e84f4e3c5589dc2871a719f1fcdd8dbf906",
    "filename": "core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorImpl.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorImpl.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/AttributeDescriptorImpl.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -31,9 +31,10 @@\n       String entity,\n       URI schemeUri,\n       @Nullable ValueSerializer<T> serializer,\n-      boolean replica) {\n+      boolean replica,\n+      TransactionMode transactionMode) {\n \n-    super(name, entity, schemeUri, serializer, replica);\n+    super(name, entity, schemeUri, serializer, replica, transactionMode);\n   }\n \n   @Override"
  },
  {
    "sha": "27f653fb0b52dd94041f3579236002161a5dd226",
    "filename": "core/src/main/java/cz/o2/proxima/repository/ConfigConstants.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/ConfigConstants.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/ConfigConstants.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/ConfigConstants.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -30,6 +30,14 @@\n   public static final String SOURCE = \"source\";\n   public static final String TARGETS = \"targets\";\n   public static final String READ_ONLY = \"read-only\";\n+  public static final String COMMIT_LOG = \"commit-log\";\n+  public static final String STATE_COMMIT_LOG = \"state-commit-log\";\n+  public static final String WRITE_ONLY = \"write-only\";\n+  public static final String BATCH_UPDATES = \"batch-updates\";\n+  public static final String BATCH_SNAPSHOT = \"batch-snapshot\";\n+  public static final String RANDOM_ACCESS = \"random-access\";\n+  public static final String LIST_PRIMARY_KEY = \"list-primary-key\";\n+  public static final String CACHED_VIEW = \"cached-view\";\n   public static final String REPLICATIONS = \"replications\";\n   public static final String DISABLED = \"disabled\";\n   public static final String ENTITIES = \"entities\";\n@@ -41,6 +49,9 @@\n   public static final String TYPE = \"type\";\n   public static final String FILTER = \"filter\";\n   public static final String ATTRIBUTE_FAMILIES = \"attributeFamilies\";\n+  public static final String TRANSACTIONAL = \"transactional\";\n+  public static final String TRANSACTIONS = \"transactions\";\n+  public static final String SCHEME_PROVIDER = \"scheme-provider\";\n \n   private ConfigConstants() {\n     // nop"
  },
  {
    "sha": "99d409e00ca32d9b163f4f0891587e8c74442c4c",
    "filename": "core/src/main/java/cz/o2/proxima/repository/ConfigRepository.java",
    "status": "modified",
    "additions": 107,
    "deletions": 15,
    "changes": 122,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/ConfigRepository.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/ConfigRepository.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/ConfigRepository.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -20,8 +20,10 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n import com.google.common.collect.Streams;\n import com.typesafe.config.Config;\n+import com.typesafe.config.ConfigFactory;\n import com.typesafe.config.ConfigObject;\n import com.typesafe.config.ConfigValue;\n import cz.o2.proxima.functional.BiFunction;\n@@ -32,6 +34,7 @@\n import cz.o2.proxima.storage.AccessType;\n import cz.o2.proxima.storage.StorageFilter;\n import cz.o2.proxima.storage.StorageType;\n+import cz.o2.proxima.transaction.TransactionSerializerSchemeProvider;\n import cz.o2.proxima.transform.DataOperatorAware;\n import cz.o2.proxima.transform.ElementWiseProxyTransform;\n import cz.o2.proxima.transform.ElementWiseProxyTransform.ProxySetupContext;\n@@ -56,10 +59,12 @@\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.ServiceLoader;\n import java.util.Set;\n+import java.util.function.Predicate;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -79,6 +84,7 @@\n   private static final Pattern ENTITY_NAME_PATTERN = Pattern.compile(\"[a-zA-Z_][a-zA-Z0-9_]*\");\n   private static final Pattern ATTRIBUTE_NAME_PATTERN =\n       Pattern.compile(\"[a-zA-Z_][a-zA-Z0-9_\\\\-$]*(\\\\.\\\\*)?\");\n+  private static final String TRANSACTION = \"_transaction\";\n \n   private static Config cachedConfigConstructed;\n \n@@ -294,7 +300,7 @@ static void dropCached() {\n    * @param cachingEnabled can we cache the Repository per JVM\n    * @param isReadonly true in client applications where you want to use repository specifications\n    *     to read from the datalake.\n-   * @param validateFlags validation {@link cz.o2.proxima.repository.Repository.Validate} flags\n+   * @param validateFlags validation {@link Validate} flags\n    * @param loadFamilies should we load attribute families? This is needed only during runtime, for\n    *     maven plugin it is set to false\n    */\n@@ -352,10 +358,19 @@ public final void reloadConfig(boolean loadFamilies, Config conf) {\n     this.attributeToFamily.clear();\n     this.entitiesByName.clear();\n     this.transformations.clear();\n+    this.allCreatedFamilies.clear();\n \n     // Read the config and store entity descriptors\n     readEntityDescriptors(config);\n \n+    boolean hasTransactions = getAllEntities().anyMatch(EntityDescriptor::isTransactional);\n+\n+    if (hasTransactions) {\n+      Config transactionConfig =\n+          conf.hasPath(TRANSACTIONS) ? conf.getConfig(TRANSACTIONS) : ConfigFactory.empty();\n+      createEntityTransaction(transactionConfig);\n+    }\n+\n     if (loadFamilies) {\n       // Read attribute families and map them to storages by attribute. */\n       readAttributeFamilies(config);\n@@ -382,6 +397,39 @@ public final void reloadConfig(boolean loadFamilies, Config conf) {\n     operators.forEach(DataOperator::reload);\n   }\n \n+  private void createEntityTransaction(Config transactionsConfig) {\n+    String schemeProviderScheme = \"java\";\n+    if (transactionsConfig.hasPath(SCHEME_PROVIDER)) {\n+      schemeProviderScheme = transactionsConfig.getString(SCHEME_PROVIDER);\n+    }\n+    Optional<ValueSerializerFactory> factory = getValueSerializerFactory(schemeProviderScheme);\n+    if (!factory.isPresent() || !factory.get().canProvideTransactionSerializer()) {\n+      throw new IllegalArgumentException(\n+          \"Scheme provider for transactions \"\n+              + schemeProviderScheme\n+              + \", is either missing or unable to provide transaction schemes.\");\n+    }\n+    TransactionSerializerSchemeProvider schemeProvider =\n+        factory.get().createTransactionSerializerSchemeProvider();\n+    EntityDescriptor.Builder builder = EntityDescriptor.newBuilder().setName(TRANSACTION);\n+    loadRegular(\n+        TRANSACTION,\n+        \"request.*\",\n+        Collections.singletonMap(SCHEME, schemeProvider.getRequestScheme()),\n+        builder);\n+    loadRegular(\n+        TRANSACTION,\n+        \"response.*\",\n+        Collections.singletonMap(SCHEME, schemeProvider.getResponseScheme()),\n+        builder);\n+    loadRegular(\n+        TRANSACTION,\n+        \"state\",\n+        Collections.singletonMap(SCHEME, schemeProvider.getStateScheme()),\n+        builder);\n+    entitiesByName.put(TRANSACTION, builder.build());\n+  }\n+\n   private void setupTransforms() {\n     getAllEntities()\n         .flatMap(e -> e.getAllAttributes().stream())\n@@ -441,7 +489,7 @@ private void readEntityDescriptors(Config cfg) {\n \n     Map<String, Object> entitiesCfg = toMap(ENTITIES, entities.unwrapped());\n     List<Pair<String, String>> clonedEntities = new ArrayList<>();\n-    for (Map.Entry<String, Object> e : entitiesCfg.entrySet()) {\n+    for (Entry<String, Object> e : entitiesCfg.entrySet()) {\n       String entityName = validateEntityName(e.getKey());\n       Map<String, Object> cfgMap = toMap(\"entities.\" + entityName, e.getValue());\n       Object attributes = cfgMap.get(ATTRIBUTES);\n@@ -626,7 +674,7 @@ private boolean getReadNonReplicated(\n \n   @SuppressWarnings(\"unchecked\")\n   private void readEntityReplications(Map<String, Replication> replications) {\n-    for (Map.Entry<String, Replication> e : replications.entrySet()) {\n+    for (Entry<String, Replication> e : replications.entrySet()) {\n       Replication repl = e.getValue();\n       boolean readOnly = repl.isReadOnly();\n       EntityDescriptorImpl entity = repl.getEntity();\n@@ -938,16 +986,25 @@ private void loadRegular(\n             settings.get(SCHEME),\n             \"Missing key entities.\" + entityName + \".attributes.\" + attrName + \".scheme\");\n \n+    TransactionMode transactionMode = readTransactionMode(settings);\n+\n     URI schemeUri = asSchemeUri(scheme.toString());\n     validateSerializerFactory(schemeUri);\n     entityBuilder.addAttribute(\n         AttributeDescriptor.newBuilder(this)\n             .setEntity(entityName)\n             .setName(attrName)\n             .setSchemeUri(schemeUri)\n+            .setTransactionMode(transactionMode)\n             .build());\n   }\n \n+  private TransactionMode readTransactionMode(Map<String, Object> settings) {\n+    return Optional.ofNullable(settings.get(TRANSACTIONAL))\n+        .map(s -> TransactionMode.valueOf(s.toString().toUpperCase()))\n+        .orElse(TransactionMode.NONE);\n+  }\n+\n   private URI asSchemeUri(String scheme) {\n     String schemeStr = scheme;\n     if (schemeStr.indexOf(':') == -1) {\n@@ -1055,7 +1112,7 @@ private void readAttributeFamilies(Config cfg) {\n                     String.format(\"Missing required [%s] setting\", ATTRIBUTE_FAMILIES))\n                 .unwrapped());\n \n-    for (Map.Entry<String, Object> e : attributeFamilyMap.entrySet()) {\n+    for (Entry<String, Object> e : attributeFamilyMap.entrySet()) {\n       String name = e.getKey();\n       Map<String, Object> storage = toMap(ATTRIBUTE_FAMILIES + \".\" + name, e.getValue());\n \n@@ -1083,13 +1140,9 @@ private void loadSingleFamily(String name, boolean overwrite, Map<String, Object\n     }\n     final String entity = Objects.requireNonNull(cfg.get(ENTITY)).toString();\n     final String filter = toString(cfg.get(FILTER));\n-    // type is one of the following:\n-    // * commit (stream commit log)\n-    // * append (append-only stream or batch)\n-    // * random-access (random-access read-write)\n-    final StorageType type = StorageType.of((String) cfg.get(TYPE));\n-    final AccessType access =\n-        AccessType.from(Optional.ofNullable(cfg.get(ACCESS)).orElse(READ_ONLY));\n+    final boolean isTransactional = entity.equals(TRANSACTION);\n+    final StorageType type = getStorageType(cfg, isTransactional);\n+    final AccessType access = getAccessType(cfg, isTransactional);\n     final List<String> attributes =\n         toList(\n             Objects.requireNonNull(\n@@ -1129,6 +1182,24 @@ private void loadSingleFamily(String name, boolean overwrite, Map<String, Object\n     insertFamily(family.build(), overwrite);\n   }\n \n+  private StorageType getStorageType(Map<String, Object> cfg, boolean isTransactional) {\n+    StorageType type =\n+        Optional.ofNullable((String) cfg.get(TYPE))\n+            .map(StorageType::of)\n+            .orElse(isTransactional ? StorageType.PRIMARY : null);\n+    Preconditions.checkArgument(type != null, \"Missing required setting %s\", TYPE);\n+    return type;\n+  }\n+\n+  private AccessType getAccessType(Map<String, Object> cfg, boolean isTransactional) {\n+    return AccessType.from(\n+        Optional.ofNullable(cfg.get(ACCESS))\n+            .orElse(\n+                isTransactional\n+                    ? Lists.newArrayList(COMMIT_LOG, STATE_COMMIT_LOG, CACHED_VIEW)\n+                    : READ_ONLY));\n+  }\n+\n   private void insertFilterIfPossible(\n       Collection<AttributeDescriptor<?>> allAttributes,\n       StorageType type,\n@@ -1158,6 +1229,10 @@ private void insertFilterIfPossible(\n   }\n \n   private void insertFamily(AttributeFamilyDescriptor family, boolean overwrite) {\n+    if (family.getEntity().isSystemEntity()) {\n+      insertSystemFamily(family);\n+      return;\n+    }\n     family\n         .getAttributes()\n         .forEach(\n@@ -1194,12 +1269,23 @@ private void insertFamily(AttributeFamilyDescriptor family, boolean overwrite) {\n         \"Added family {} of type {} and access {}\", family, family.getType(), family.getAccess());\n   }\n \n+  private void insertSystemFamily(AttributeFamilyDescriptor family) {\n+    if (family.getEntity().getName().equals(TRANSACTION)) {\n+      Preconditions.checkState(\n+          allCreatedFamilies.put(family.getName(), family) == null,\n+          \"Multiple definitions of family %s\",\n+          family.getName());\n+    } else {\n+      throw new UnsupportedOperationException(\"Unknown system entity \" + family.getEntity());\n+    }\n+  }\n+\n   void removeFamily(AttributeFamilyDescriptor family) {\n     family.getAttributes().forEach(attr -> getFamiliesForAttribute(attr).remove(family));\n   }\n \n   private void createReplicationFamilies(Map<String, Replication> replications) {\n-    for (Map.Entry<String, Replication> e : replications.entrySet()) {\n+    for (Entry<String, Replication> e : replications.entrySet()) {\n       String replicationName = e.getKey();\n       Replication repl = e.getValue();\n       boolean readOnly = repl.isReadOnly();\n@@ -1335,7 +1421,7 @@ private void createReplicationCommitLog(\n     }\n     if (!readOnly) {\n       createLocalWriteCommitLog(entity, name, cfgMapTemplate, via, attrList);\n-      for (Map.Entry<String, Object> tgt : targets.entrySet()) {\n+      for (Entry<String, Object> tgt : targets.entrySet()) {\n         Map<String, Object> cfg = new HashMap<>(cfgMapTemplate);\n         cfg.putAll(toMap(tgt.getKey(), tgt.getValue()));\n         cfg.put(ACCESS, \"write-only\");\n@@ -2048,7 +2134,10 @@ private void validate() {\n   }\n \n   @Override\n-  public Stream<AttributeFamilyDescriptor> getAllFamilies() {\n+  public Stream<AttributeFamilyDescriptor> getAllFamilies(boolean includeSystem) {\n+    if (includeSystem) {\n+      return allCreatedFamilies.values().stream();\n+    }\n     return attributeToFamily.values().stream().flatMap(Collection::stream).distinct();\n   }\n \n@@ -2086,7 +2175,10 @@ public AttributeFamilyDescriptor getPrimaryFamilyFor(AttributeDescriptor<?> attr\n \n   @Override\n   public Stream<EntityDescriptor> getAllEntities() {\n-    return entitiesByName.values().stream();\n+    return entitiesByName\n+        .values()\n+        .stream()\n+        .filter(((Predicate<EntityDescriptor>) EntityDescriptor::isSystemEntity).negate());\n   }\n \n   @Override"
  },
  {
    "sha": "832ca108f6856ebad25a59944c84a683c2c559fa",
    "filename": "core/src/main/java/cz/o2/proxima/repository/EntityAwareAttributeDescriptor.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/EntityAwareAttributeDescriptor.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/EntityAwareAttributeDescriptor.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/EntityAwareAttributeDescriptor.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -389,6 +389,11 @@ public boolean isProxy() {\n     return wrapped.isProxy();\n   }\n \n+  @Override\n+  public TransactionMode getTransactionMode() {\n+    return wrapped.getTransactionMode();\n+  }\n+\n   @Override\n   public AttributeProxyDescriptor<T> asProxy() throws ClassCastException {\n     return wrapped.asProxy();"
  },
  {
    "sha": "3d16fbb1ce919dda9c64f829042648bd4ad668e7",
    "filename": "core/src/main/java/cz/o2/proxima/repository/EntityDescriptor.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/EntityDescriptor.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/EntityDescriptor.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/EntityDescriptor.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -114,6 +114,21 @@ static Builder newBuilder() {\n                 String.format(\"Unable to find attribute [%s] of entity [%s].\", name, getName())));\n   }\n \n+  /** @return {@code true} if the entity contains any attribute that has transactions enabled. */\n+  default boolean isTransactional() {\n+    return getAllAttributes()\n+        .stream()\n+        .anyMatch(attr -> attr.getTransactionMode() != TransactionMode.NONE);\n+  }\n+\n+  /**\n+   * @return {@code true} if this is system entity. System entities are created by the platform\n+   *     itself and should be (directly) accessed by users.\n+   */\n+  default boolean isSystemEntity() {\n+    return getName().startsWith(\"_\");\n+  }\n+\n   /**\n    * Get attribute by name.\n    *"
  },
  {
    "sha": "6ade3ae98df0f400663b22c5890e117c2bb9b7d3",
    "filename": "core/src/main/java/cz/o2/proxima/repository/Repository.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/Repository.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/Repository.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/Repository.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -166,7 +166,16 @@ public EntityDescriptor getEntity(String name) {\n    *\n    * @return all families specified in this repository\n    */\n-  public abstract Stream<AttributeFamilyDescriptor> getAllFamilies();\n+  public Stream<AttributeFamilyDescriptor> getAllFamilies() {\n+    return getAllFamilies(false);\n+  }\n+\n+  /**\n+   * List all unique attribute families, possibly including system attribute families.\n+   *\n+   * @param includeSystem {@code true} if system families should be included\n+   */\n+  public abstract Stream<AttributeFamilyDescriptor> getAllFamilies(boolean includeSystem);\n \n   /**\n    * Retrieve attribute family by name."
  },
  {
    "sha": "79bffb97d8b2bf16eef2e00ddcfd802bedbc296d",
    "filename": "core/src/main/java/cz/o2/proxima/repository/TransactionMode.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/TransactionMode.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/repository/TransactionMode.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/repository/TransactionMode.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.repository;\n+\n+/** Type of transactions of a {@link AttributeDescriptor}. */\n+public enum TransactionMode {\n+\n+  /** No transactional support. */\n+  NONE,\n+\n+  /**\n+   * Transactional support within the same attribute (i.e. colliding writes to the same attribute\n+   * are rejected).\n+   */\n+  ATTRIBUTE,\n+\n+  /**\n+   * Transactional support within the same entity key (i.e. transaction can contain only single\n+   * entity key and only single entity type). Note: all attributes within specified transaction\n+   * *must* have *at least* mode set to ENTITY, otherwise {@link IllegalArgumentException} is\n+   * thrown. The actual mode of each transaction is defined to be the maximal transaction mode from\n+   * all attributes *written* by the transaction.\n+   */\n+  ENTITY,\n+\n+  /**\n+   * Transactional support across different keys of either the same or different entities. Note: all\n+   * attributes within specified transaction *must* have the transaction type set to ALL, otherwise\n+   * {@link IllegalArgumentException} will be thrown.\n+   */\n+  ALL\n+}"
  },
  {
    "sha": "fcbfac77ab8d05d3d183c255a0d158eafc3d6841",
    "filename": "core/src/main/java/cz/o2/proxima/scheme/JavaSerializer.java",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/scheme/JavaSerializer.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/scheme/JavaSerializer.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/scheme/JavaSerializer.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -16,6 +16,10 @@\n package cz.o2.proxima.scheme;\n \n import cz.o2.proxima.annotations.Stable;\n+import cz.o2.proxima.transaction.Request;\n+import cz.o2.proxima.transaction.Response;\n+import cz.o2.proxima.transaction.State;\n+import cz.o2.proxima.transaction.TransactionSerializerSchemeProvider;\n import cz.o2.proxima.util.Classpath;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -24,7 +28,7 @@\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.net.URI;\n-import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -44,7 +48,7 @@\n   private static final long serialVersionUID = 1L;\n \n   private final Map<URI, ValueSerializer<?>> cache = new ConcurrentHashMap<>();\n-  private static final List<String> javaPackages = Arrays.asList(\"java.lang\");\n+  private static final List<String> javaPackages = Collections.singletonList(\"java.lang\");\n \n   @Override\n   public String getAcceptableScheme() {\n@@ -57,6 +61,19 @@ public String getAcceptableScheme() {\n     return (ValueSerializer<T>) cache.computeIfAbsent(specifier, JavaSerializer::createSerializer);\n   }\n \n+  @Override\n+  public boolean canProvideTransactionSerializer() {\n+    return true;\n+  }\n+\n+  @Override\n+  public TransactionSerializerSchemeProvider createTransactionSerializerSchemeProvider() {\n+    return TransactionSerializerSchemeProvider.of(\n+        \"java:\" + Request.class.getName(),\n+        \"java:\" + Response.class.getName(),\n+        \"java:\" + State.class.getName());\n+  }\n+\n   private static <T> ValueSerializer<T> createSerializer(URI scheme) {\n     log.warn(\n         \"Using JavaSerializer for URI {}. This can result in low performance, \""
  },
  {
    "sha": "bbc3e9b6df696e75391d0e93be3fa7b246cc5cd7",
    "filename": "core/src/main/java/cz/o2/proxima/scheme/ValueSerializer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/scheme/ValueSerializer.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/scheme/ValueSerializer.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/scheme/ValueSerializer.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -108,6 +108,6 @@ default String getLogString(T value) {\n    */\n   default SchemaTypeDescriptor<T> getValueSchemaDescriptor() {\n     throw new UnsupportedOperationException(\n-        getClass() + \" is not ported to provide a ValueSchemaDescriptor. \" + \"Please fill issue.\");\n+        getClass() + \" is not ported to provide a ValueSchemaDescriptor. Please file an issue.\");\n   }\n }"
  },
  {
    "sha": "561b8801dd0082f6e4ad6d6742d3e5e93cd6aabe",
    "filename": "core/src/main/java/cz/o2/proxima/scheme/ValueSerializerFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/scheme/ValueSerializerFactory.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/scheme/ValueSerializerFactory.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/scheme/ValueSerializerFactory.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -16,6 +16,7 @@\n package cz.o2.proxima.scheme;\n \n import cz.o2.proxima.annotations.Stable;\n+import cz.o2.proxima.transaction.TransactionSerializerSchemeProvider;\n import java.io.Serializable;\n import java.net.URI;\n \n@@ -53,4 +54,16 @@ default String getClassName(URI specifier) {\n     }\n     return type;\n   }\n+\n+  /**\n+   * @return {@code true} if this serializer can provide {@link\n+   *     TransactionSerializerSchemeProvider}.\n+   */\n+  default boolean canProvideTransactionSerializer() {\n+    return false;\n+  }\n+\n+  default TransactionSerializerSchemeProvider createTransactionSerializerSchemeProvider() {\n+    throw new UnsupportedOperationException();\n+  }\n }"
  },
  {
    "sha": "77395e4b3f97cb3ba881e5e1811cc436253ef738",
    "filename": "core/src/main/java/cz/o2/proxima/storage/AccessType.java",
    "status": "modified",
    "additions": 11,
    "deletions": 9,
    "changes": 20,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/storage/AccessType.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/storage/AccessType.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/storage/AccessType.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -15,6 +15,8 @@\n  */\n package cz.o2.proxima.storage;\n \n+import static cz.o2.proxima.repository.ConfigConstants.*;\n+\n import com.google.common.collect.Streams;\n import cz.o2.proxima.annotations.Stable;\n import java.io.Serializable;\n@@ -46,15 +48,15 @@ static AccessType from(Object spec) {\n       throw new IllegalArgumentException(\"Unknown specifier type \" + spec.getClass());\n     }\n \n-    boolean isReadOnly = specifiers.remove(\"read-only\");\n-    boolean isWriteOnly = specifiers.remove(\"write-only\");\n-    boolean isReadBatchUpdates = specifiers.remove(\"batch-updates\");\n-    boolean isReadBatchSnapshot = specifiers.remove(\"batch-snapshot\");\n-    boolean isReadRandom = specifiers.remove(\"random-access\");\n-    boolean isReadCommit = specifiers.remove(\"commit-log\");\n-    boolean isStateCommitLog = specifiers.remove(\"state-commit-log\");\n-    boolean isListPrimaryKey = specifiers.remove(\"list-primary-key\");\n-    boolean canCreateCachedView = specifiers.remove(\"cached-view\");\n+    boolean isReadOnly = specifiers.remove(READ_ONLY);\n+    boolean isWriteOnly = specifiers.remove(WRITE_ONLY);\n+    boolean isReadBatchUpdates = specifiers.remove(BATCH_UPDATES);\n+    boolean isReadBatchSnapshot = specifiers.remove(BATCH_SNAPSHOT);\n+    boolean isReadRandom = specifiers.remove(RANDOM_ACCESS);\n+    boolean isReadCommit = specifiers.remove(COMMIT_LOG);\n+    boolean isStateCommitLog = specifiers.remove(STATE_COMMIT_LOG);\n+    boolean isListPrimaryKey = specifiers.remove(LIST_PRIMARY_KEY);\n+    boolean canCreateCachedView = specifiers.remove(CACHED_VIEW);\n \n     if (!specifiers.isEmpty()) {\n       throw new IllegalArgumentException(\"Unknown storage tags: \" + specifiers);"
  },
  {
    "sha": "38fcf12f779c5a595b921bcbfe3493cba2fef590",
    "filename": "core/src/main/java/cz/o2/proxima/transaction/Request.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/Request.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/Request.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/transaction/Request.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.transaction;\n+\n+import cz.o2.proxima.annotations.Internal;\n+import java.io.Serializable;\n+import lombok.Value;\n+\n+/** A transactional request sent to coordinator */\n+@Value\n+@Internal\n+public class Request implements Serializable {\n+\n+  public static Request of() {\n+    return new Request();\n+  }\n+}"
  },
  {
    "sha": "1440b579e7b0251c459ebf423ae09abdb8016f3e",
    "filename": "core/src/main/java/cz/o2/proxima/transaction/Response.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/Response.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/Response.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/transaction/Response.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.transaction;\n+\n+import cz.o2.proxima.annotations.Internal;\n+import java.io.Serializable;\n+import lombok.Value;\n+\n+@Internal\n+@Value\n+public class Response implements Serializable {\n+\n+  public static Response of() {\n+    return new Response();\n+  }\n+}"
  },
  {
    "sha": "8bdc22782d1c6562b7352c97b60025e5bc28e9f3",
    "filename": "core/src/main/java/cz/o2/proxima/transaction/State.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/State.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/State.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/transaction/State.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.transaction;\n+\n+import cz.o2.proxima.annotations.Internal;\n+import java.io.Serializable;\n+import lombok.Value;\n+\n+@Internal\n+@Value\n+public class State implements Serializable {\n+\n+  public static State of() {\n+    return new State();\n+  }\n+}"
  },
  {
    "sha": "017f4f926d1a03151cb05007f2a35f4e22c5db34",
    "filename": "core/src/main/java/cz/o2/proxima/transaction/TransactionSerializerSchemeProvider.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/TransactionSerializerSchemeProvider.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/main/java/cz/o2/proxima/transaction/TransactionSerializerSchemeProvider.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/main/java/cz/o2/proxima/transaction/TransactionSerializerSchemeProvider.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.transaction;\n+\n+import cz.o2.proxima.scheme.ValueSerializerFactory;\n+import java.io.Serializable;\n+\n+/**\n+ * A provider of schemes for {@link Request}, {@link Response} and {@link State}. The provided\n+ * scheme strings has to be subsequently recognized by {@link ValueSerializerFactory} and provide\n+ * expected serialization.\n+ */\n+public interface TransactionSerializerSchemeProvider extends Serializable {\n+\n+  static TransactionSerializerSchemeProvider of(\n+      String requestScheme, String responseScheme, String stateScheme) {\n+    return new TransactionSerializerSchemeProvider() {\n+      @Override\n+      public String getRequestScheme() {\n+        return requestScheme;\n+      }\n+\n+      @Override\n+      public String getResponseScheme() {\n+        return responseScheme;\n+      }\n+\n+      @Override\n+      public String getStateScheme() {\n+        return stateScheme;\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Retrieve scheme for serialization of {@link Request}\n+   *\n+   * @return the string scheme representing {@link Request} serialization.\n+   */\n+  String getRequestScheme();\n+\n+  /**\n+   * Retrieve scheme for serialization of {@link Request}\n+   *\n+   * @return the string scheme representing {@link Request} serialization.\n+   */\n+  String getResponseScheme();\n+\n+  /**\n+   * Retrieve scheme for serialization of {@link Request}\n+   *\n+   * @return the string scheme representing {@link Request} serialization.\n+   */\n+  String getStateScheme();\n+}"
  },
  {
    "sha": "b08989b35847665acb4d490de292a90c85e23b20",
    "filename": "core/src/test/java/cz/o2/proxima/repository/ConfigRepositoryTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/test/java/cz/o2/proxima/repository/ConfigRepositoryTest.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/test/java/cz/o2/proxima/repository/ConfigRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/test/java/cz/o2/proxima/repository/ConfigRepositoryTest.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -32,6 +32,7 @@\n import cz.o2.proxima.storage.PassthroughFilter;\n import cz.o2.proxima.storage.StorageType;\n import cz.o2.proxima.storage.StreamElement;\n+import cz.o2.proxima.transaction.Request;\n import cz.o2.proxima.transform.ElementWiseProxyTransform.ProxySetupContext;\n import cz.o2.proxima.transform.ElementWiseTransformation;\n import cz.o2.proxima.transform.EventDataToDummy;\n@@ -572,6 +573,25 @@ public void testEntityAttributeWithoutSchemeThrowsException() {\n     Repository.of(ConfigFactory.parseString(\"entities.user.attributes.name:{schem: string}\"));\n   }\n \n+  @Test\n+  public void testTransactionConfigParsing() {\n+    Repository repo = Repository.ofTest(ConfigFactory.load(\"test-transactions.conf\").resolve());\n+    assertNotNull(repo);\n+    assertFalse(repo.getAllEntities().anyMatch(EntityDescriptor::isSystemEntity));\n+    assertFalse(repo.getAllFamilies().anyMatch(af -> af.getEntity().isSystemEntity()));\n+    assertTrue(repo.getAllFamilies(true).anyMatch(af -> af.getEntity().isSystemEntity()));\n+    assertTrue(repo.getEntity(\"_transaction\").isSystemEntity());\n+    assertTrue(repo.getEntity(\"gateway\").isTransactional());\n+    assertTrue(repo.findFamilyByName(\"gateway-transaction-commit-log\").isPresent());\n+    assertTrue(repo.findFamilyByName(\"user-transaction-commit-log-request\").isPresent());\n+\n+    EntityDescriptor transaction = repo.getEntity(\"_transaction\");\n+    AttributeDescriptor<Request> request = transaction.getAttribute(\"request.*\");\n+    byte[] serialized = request.getValueSerializer().serialize(Request.of());\n+    assertNotNull(serialized);\n+    assertTrue(request.getValueSerializer().deserialize(serialized).isPresent());\n+  }\n+\n   private void checkThrows(Factory<?> factory) {\n     checkThrows(factory, null);\n   }"
  },
  {
    "sha": "6408a10f3de97fe51a822a3ae7d03ca656b5273e",
    "filename": "core/src/test/resources/test-transactions.conf",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/test/resources/test-transactions.conf",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/core/src/test/resources/test-transactions.conf",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/core/src/test/resources/test-transactions.conf?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,89 @@\n+{\n+  entities: {\n+    event: {\n+      attributes: {\n+        data: { scheme: \"bytes\" }\n+      }\n+    }\n+\n+    gateway: {\n+      attributes: {\n+        status: {\n+          scheme: bytes\n+          transactional: attribute\n+          manager: gateway-transaction-commit-log\n+        }\n+\n+        # the following defines a pattern for attributes\n+        # each attribute that matches the pattern is treated the same\n+        \"device.*\": {\n+          scheme: bytes\n+          transactional: entity\n+          manager: gateway-transaction-commit-log\n+        }\n+      }\n+    }\n+\n+    user {\n+      manager: [ user-transaction-commit-log-request, user-transaction-commit-log-response, user-transaction-commit-log-state ]\n+      transactional: entity\n+      attributes {\n+        \"gateway.*\": { scheme: bytes }\n+      }\n+    }\n+  }\n+\n+  attributeFamilies: {\n+    event-storage-stream: {\n+      entity: event\n+      attributes: [ data ]\n+      # this is testing only storage\n+      storage: \"inmem:///proxima_events\"\n+      type: primary\n+      access: commit-log\n+    }\n+\n+    event-storage-bulk {\n+      entity: event\n+      attributes: [ data ]\n+      storage: \"inmem-bulk:///proxima_events/bulk\"\n+      type: replica\n+      access: [ write-only ]\n+    }\n+\n+    gateway-storage-stream: {\n+      entity: gateway\n+      attributes: [ \"*\" ]\n+      storage: \"inmem:///proxima_gateway\"\n+      type: primary\n+      access: [ commit-log, random-access, cached-view, batch-snapshot, batch-updates ]\n+    }\n+\n+    gateway-transaction-commit-log {\n+      entity: _transaction\n+      attributes: [ \"*\" ]\n+      storage: \"inmem:///proxima_gateway_transaction\"\n+      type: primary\n+      access: [ commit-log, state-commit-log, cached-view ]\n+    }\n+\n+    user-transaction-commit-log-request {\n+      entity: _transaction\n+      attributes: [ \"request.*\" ]\n+      storage: \"inmem:///proxima_user_transaction_request\"\n+    }\n+\n+    user-transaction-commit-log-response {\n+      entity: _transaction\n+      attributes: [ \"response.*\" ]\n+      storage: \"inmem:///proxima_user_transaction_request\"\n+    }\n+\n+    user-transaction-commit-log-state {\n+      entity: _transaction\n+      attributes: [ \"state\" ]\n+      storage: \"inmem:///proxima_user_transaction_state\"\n+    }\n+  }\n+}\n+"
  },
  {
    "sha": "623336f3f06e595a01799fe0fd6cd0dc7adf5b12",
    "filename": "direct/core/src/main/java/cz/o2/proxima/direct/core/DirectDataOperator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/main/java/cz/o2/proxima/direct/core/DirectDataOperator.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/main/java/cz/o2/proxima/direct/core/DirectDataOperator.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/direct/core/src/main/java/cz/o2/proxima/direct/core/DirectDataOperator.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -124,7 +124,7 @@ public DirectDataOperator withExecutorFactory(Factory<ExecutorService> factory)\n   public final void reload() {\n     close();\n     familyMap.clear();\n-    dependencyOrdered(repo.getAllFamilies()).forEach(this::addResolvedFamily);\n+    dependencyOrdered(repo.getAllFamilies(true)).forEach(this::addResolvedFamily);\n   }\n \n   /** Create list of families ordered by dependencies between them (non-proxy first). */"
  },
  {
    "sha": "25f6119c129182edbdf049cbed2aa1ec977fff43",
    "filename": "direct/core/src/test/java/cz/o2/proxima/direct/commitlog/LogObserverUtils.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/commitlog/LogObserverUtils.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/commitlog/LogObserverUtils.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/direct/core/src/test/java/cz/o2/proxima/direct/commitlog/LogObserverUtils.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.direct.commitlog;\n+\n+import cz.o2.proxima.functional.Consumer;\n+import cz.o2.proxima.functional.UnaryPredicate;\n+import cz.o2.proxima.repository.AttributeDescriptor;\n+import cz.o2.proxima.storage.StreamElement;\n+import java.util.List;\n+\n+public class LogObserverUtils {\n+\n+  public static LogObserver toList(List<StreamElement> list, Consumer<Boolean> onFinished) {\n+    return toList(list, onFinished, ign -> true);\n+  }\n+\n+  public static LogObserver toList(\n+      List<StreamElement> list,\n+      Consumer<Boolean> onFinished,\n+      UnaryPredicate<StreamElement> shouldContinue) {\n+\n+    return new LogObserver() {\n+      @Override\n+      public boolean onError(Throwable error) {\n+        throw new RuntimeException(error);\n+      }\n+\n+      @Override\n+      public boolean onNext(StreamElement ingest, OnNextContext context) {\n+        list.add(ingest);\n+        context.confirm();\n+        return shouldContinue.apply(ingest);\n+      }\n+\n+      @Override\n+      public void onCompleted() {\n+        onFinished.accept(true);\n+      }\n+\n+      @Override\n+      public void onCancelled() {\n+        onFinished.accept(false);\n+      }\n+    };\n+  }\n+\n+  public static <T> LogObserver toList(List<T> list, AttributeDescriptor<T> attribute) {\n+    return (ingest, context) -> {\n+      if (ingest.getAttributeDescriptor().equals(attribute)) {\n+        attribute.valueOf(ingest).ifPresent(list::add);\n+      }\n+      context.confirm();\n+      return true;\n+    };\n+  }\n+}"
  },
  {
    "sha": "080717b9d78fd0615d52883e981c6adff9aaf69a",
    "filename": "direct/core/src/test/java/cz/o2/proxima/direct/core/DirectDataOperatorTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/core/DirectDataOperatorTest.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/core/DirectDataOperatorTest.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/direct/core/src/test/java/cz/o2/proxima/direct/core/DirectDataOperatorTest.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -1660,7 +1660,9 @@ public void testLimiterDataAccessor() {\n     Optional<CommitLogReader> maybeReader = family.getCommitLogReader();\n     assertTrue(maybeReader.isPresent());\n     CommitLogReader reader = maybeReader.get();\n-    assertTrue(reader instanceof LimitedCommitLogReader);\n+    assertTrue(\n+        \"Expected reader of class LimitedCommitLogReader, got \" + reader.getClass(),\n+        reader instanceof LimitedCommitLogReader);\n     LimitedCommitLogReader limitedReader = (LimitedCommitLogReader) reader;\n     ThroughputLimiter limiter = limitedReader.getLimiter();\n     assertNotNull(limiter);"
  },
  {
    "sha": "5147cc4189d1b7df2561b0110a23f34d06efa8e9",
    "filename": "direct/core/src/test/java/cz/o2/proxima/direct/storage/ListCommitLogTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 36,
    "changes": 37,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/storage/ListCommitLogTest.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/storage/ListCommitLogTest.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/direct/core/src/test/java/cz/o2/proxima/direct/storage/ListCommitLogTest.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -15,6 +15,7 @@\n  */\n package cz.o2.proxima.direct.storage;\n \n+import static cz.o2.proxima.direct.commitlog.LogObserverUtils.toList;\n import static org.junit.Assert.*;\n \n import com.typesafe.config.ConfigFactory;\n@@ -24,8 +25,6 @@\n import cz.o2.proxima.direct.commitlog.Offset;\n import cz.o2.proxima.direct.core.DirectDataOperator;\n import cz.o2.proxima.direct.storage.ListCommitLog.ListObserveHandle;\n-import cz.o2.proxima.functional.Consumer;\n-import cz.o2.proxima.functional.UnaryPredicate;\n import cz.o2.proxima.repository.AttributeDescriptor;\n import cz.o2.proxima.repository.EntityDescriptor;\n import cz.o2.proxima.repository.Repository;\n@@ -278,40 +277,6 @@ public void onCompleted() {\n     assertEquals(expected, watermarks);\n   }\n \n-  private static LogObserver toList(List<StreamElement> list, Consumer<Boolean> onFinished) {\n-    return toList(list, onFinished, ign -> true);\n-  }\n-\n-  private static LogObserver toList(\n-      List<StreamElement> list,\n-      Consumer<Boolean> onFinished,\n-      UnaryPredicate<StreamElement> shouldContinue) {\n-\n-    return new LogObserver() {\n-      @Override\n-      public boolean onError(Throwable error) {\n-        throw new RuntimeException(error);\n-      }\n-\n-      @Override\n-      public boolean onNext(StreamElement ingest, OnNextContext context) {\n-        list.add(ingest);\n-        context.confirm();\n-        return shouldContinue.apply(ingest);\n-      }\n-\n-      @Override\n-      public void onCompleted() {\n-        onFinished.accept(true);\n-      }\n-\n-      @Override\n-      public void onCancelled() {\n-        onFinished.accept(false);\n-      }\n-    };\n-  }\n-\n   private List<StreamElement> data(int count) {\n     long now = System.currentTimeMillis();\n     return IntStream.range(0, count)"
  },
  {
    "sha": "9331f1a568a83615c1bd16bc14c232f1b57162ca",
    "filename": "direct/core/src/test/java/cz/o2/proxima/direct/transaction/TransactionsTest.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/transaction/TransactionsTest.java",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/direct/core/src/test/java/cz/o2/proxima/direct/transaction/TransactionsTest.java",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/direct/core/src/test/java/cz/o2/proxima/direct/transaction/TransactionsTest.java?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2017-2021 O2 Czech Republic, a.s.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package cz.o2.proxima.direct.transaction;\n+\n+import static cz.o2.proxima.direct.commitlog.LogObserverUtils.toList;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.typesafe.config.ConfigFactory;\n+import cz.o2.proxima.direct.commitlog.CommitLogReader;\n+import cz.o2.proxima.direct.core.DirectAttributeFamilyDescriptor;\n+import cz.o2.proxima.direct.core.DirectDataOperator;\n+import cz.o2.proxima.direct.core.OnlineAttributeWriter;\n+import cz.o2.proxima.repository.EntityAwareAttributeDescriptor.Wildcard;\n+import cz.o2.proxima.repository.EntityDescriptor;\n+import cz.o2.proxima.repository.Repository;\n+import cz.o2.proxima.transaction.Request;\n+import cz.o2.proxima.transaction.Response;\n+import cz.o2.proxima.util.Optionals;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.Test;\n+\n+/** Test transactions are working according to the specification. */\n+public class TransactionsTest {\n+\n+  private final Repository repo =\n+      Repository.ofTest(ConfigFactory.load(\"test-transactions.conf\").resolve());\n+  private final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n+  private final EntityDescriptor transaction = repo.getEntity(\"_transaction\");\n+  private final Wildcard<Request> request =\n+      Wildcard.wildcard(transaction, transaction.getAttribute(\"request.*\"));\n+  private final Wildcard<Response> response =\n+      Wildcard.wildcard(transaction, transaction.getAttribute(\"response.*\"));\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testDirectWriterFetchFails() {\n+    direct.getWriter(request);\n+  }\n+\n+  @Test\n+  public void testTransactionRequestResponse() {\n+    // we must access the readers/writers directly through family name\n+    DirectAttributeFamilyDescriptor family =\n+        Optionals.get(direct.findFamilyByName(\"gateway-transaction-commit-log\"));\n+    CommitLogReader reader = Optionals.get(family.getCommitLogReader());\n+    OnlineAttributeWriter writer = Optionals.get(family.getWriter()).online();\n+    List<Response> receivedResponses = new ArrayList<>();\n+\n+    // create a simple ping-pong communication\n+    reader.observe(\n+        \"requests\",\n+        (ingest, context) -> {\n+          if (ingest.getAttributeDescriptor().equals(request)) {\n+            String requestId = request.extractSuffix(ingest.getAttribute());\n+            writer.write(\n+                response.upsert(\n+                    ingest.getKey(), requestId, System.currentTimeMillis(), Response.of()),\n+                (succ, exc) -> {\n+                  context.confirm();\n+                });\n+          } else {\n+            context.confirm();\n+          }\n+          return true;\n+        });\n+\n+    reader.observe(\"responses\", toList(receivedResponses, response));\n+\n+    writer.write(\n+        request.upsert(\"firstTransaction\", \"abc\", System.currentTimeMillis(), Request.of()),\n+        (succ, exc) -> {});\n+\n+    assertEquals(1, receivedResponses.size());\n+  }\n+}"
  },
  {
    "sha": "889a24ea0f4fa0be2ad4c62cc72a2ecae85fb49b",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/datadrivencz/proxima-platform/blob/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/pom.xml",
    "raw_url": "https://github.com/datadrivencz/proxima-platform/raw/fc0552d314aa66e7f90919f335cb22cb3cdb18ac/pom.xml",
    "contents_url": "https://api.github.com/repos/datadrivencz/proxima-platform/contents/pom.xml?ref=fc0552d314aa66e7f90919f335cb22cb3cdb18ac",
    "patch": "@@ -91,7 +91,7 @@\n     <protoc.version>3.11.1</protoc.version>\n     <grpc.version>1.33.1</grpc.version>\n     <gmaven.version>1.10.0</gmaven.version>\n-    <guava.version>28.1-jre</guava.version>\n+    <guava.version>30.1-jre</guava.version>\n     <commons-io.version>2.6</commons-io.version>\n     <license-maven-plugin.version>3.0</license-maven-plugin.version>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>"
  }
]
