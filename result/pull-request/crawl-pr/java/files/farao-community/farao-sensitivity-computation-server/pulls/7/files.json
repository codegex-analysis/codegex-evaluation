[
  {
    "sha": "8d2de60929db9b716a3005125557102ba70f403e",
    "filename": "sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/InternalSensitivityInputsProvider.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/farao-community/farao-sensitivity-computation-server/blob/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/InternalSensitivityInputsProvider.java",
    "raw_url": "https://github.com/farao-community/farao-sensitivity-computation-server/raw/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/InternalSensitivityInputsProvider.java",
    "contents_url": "https://api.github.com/repos/farao-community/farao-sensitivity-computation-server/contents/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/InternalSensitivityInputsProvider.java?ref=278eee551472ea2030588951c28de79b9e3521f4",
    "patch": "@@ -21,19 +21,19 @@\n     private final List<SensitivityFactor> commonFactors;\n     @JsonProperty(\"basecaseAdditionalFactors\")\n     private final List<SensitivityFactor> basecaseAdditionalFactors;\n-    @JsonProperty(\"contingenciesAdditionalParameters\")\n-    private final Map<String, List<SensitivityFactor>> contingenciesAdditionalParameters;\n+    @JsonProperty(\"contingenciesAdditionalFactors\")\n+    private final Map<String, List<SensitivityFactor>> contingenciesAdditionalFactors;\n     @JsonProperty(\"contingencies\")\n     private final List<Contingency> contingencies;\n \n     @JsonCreator\n     public InternalSensitivityInputsProvider(@JsonProperty(\"commonFactors\") List<SensitivityFactor> commonFactors,\n                                              @JsonProperty(\"basecaseAdditionalFactors\") List<SensitivityFactor> basecaseAdditionalFactors,\n-                                             @JsonProperty(\"contingenciesAdditionalParameters\") Map<String, List<SensitivityFactor>> contingenciesAdditionalParameters,\n+                                             @JsonProperty(\"contingenciesAdditionalFactors\") Map<String, List<SensitivityFactor>> contingenciesAdditionalParameters,\n                                              @JsonProperty(\"contingencies\") List<Contingency> contingencies) {\n         this.commonFactors = commonFactors;\n         this.basecaseAdditionalFactors = basecaseAdditionalFactors;\n-        this.contingenciesAdditionalParameters = contingenciesAdditionalParameters;\n+        this.contingenciesAdditionalFactors = contingenciesAdditionalParameters;\n         this.contingencies = contingencies;\n     }\n \n@@ -53,6 +53,6 @@ public InternalSensitivityInputsProvider(@JsonProperty(\"commonFactors\") List<Sen\n \n     @Override\n     public List<SensitivityFactor> getAdditionalFactors(Network network, String contingencyId) {\n-        return contingenciesAdditionalParameters.get(contingencyId);\n+        return contingenciesAdditionalFactors.get(contingencyId);\n     }\n }"
  },
  {
    "sha": "0f9986346fdfe5c0ba64a3004ac5a4c18942d889",
    "filename": "sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityInputs.java",
    "status": "modified",
    "additions": 137,
    "deletions": 13,
    "changes": 150,
    "blob_url": "https://github.com/farao-community/farao-sensitivity-computation-server/blob/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityInputs.java",
    "raw_url": "https://github.com/farao-community/farao-sensitivity-computation-server/raw/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityInputs.java",
    "contents_url": "https://api.github.com/repos/farao-community/farao-sensitivity-computation-server/contents/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityInputs.java?ref=278eee551472ea2030588951c28de79b9e3521f4",
    "patch": "@@ -1,45 +1,169 @@\n package com.farao_community.farao.sensitivity.api;\n \n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.contingency.Contingency;\n import com.powsybl.contingency.json.ContingencyJsonModule;\n import com.powsybl.iidm.network.Network;\n+import com.powsybl.sensitivity.SensitivityFactor;\n import com.powsybl.sensitivity.SensitivityFactorsProvider;\n+import com.powsybl.sensitivity.SensitivityFunction;\n+import com.powsybl.sensitivity.SensitivityVariable;\n+import com.powsybl.sensitivity.factors.BranchFlowPerInjectionIncrease;\n+import com.powsybl.sensitivity.factors.BranchFlowPerLinearGlsk;\n+import com.powsybl.sensitivity.factors.BranchFlowPerPSTAngle;\n+import com.powsybl.sensitivity.factors.BranchIntensityPerPSTAngle;\n+import com.powsybl.sensitivity.factors.functions.BranchFlow;\n+import com.powsybl.sensitivity.factors.functions.BranchIntensity;\n+import com.powsybl.sensitivity.factors.variables.InjectionIncrease;\n+import com.powsybl.sensitivity.factors.variables.LinearGlsk;\n+import com.powsybl.sensitivity.factors.variables.PhaseTapChangerAngle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.UncheckedIOException;\n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.io.*;\n+import java.util.*;\n+\n+import static com.farao_community.farao.sensitivity.api.JsonSensitivityUtil.getSuffix;\n \n public class JsonSensitivityInputs {\n     private JsonSensitivityInputs() {\n         throw new AssertionError(\"Utility class should not be implemented\");\n     }\n \n     public static byte[] write(SensitivityFactorsProvider provider, Network network, List<Contingency> contingencies) {\n+        Map<String, SensitivityVariable> sensitivityVariableMap = new HashMap<>();\n+        Map<String, SensitivityFunction> sensitivityFunctionMap = new HashMap<>();\n+        Map<String, Contingency> contingencyMap = new HashMap<>();\n+        Map<String, Set<String>> sensitivityFunctionStringMap = new HashMap<>();\n+        for (Contingency contingency : contingencies) {\n+            String contingencyId = contingency.getId();\n+            Set<String> sensitivityFunctionsString = new HashSet<>();\n+            List<SensitivityFactor> sensitivities = provider.getAdditionalFactors(network, contingencyId);\n+            for (SensitivityFactor sensitivityFactor : sensitivities) {\n+                sensitivityFunctionsString.add(sensitivityFactor.getFunction().getId() + getSuffix(sensitivityFactor.getFunction()));\n+                sensitivityVariableMap.put(sensitivityFactor.getVariable().getId(), sensitivityFactor.getVariable());\n+                sensitivityFunctionMap.put(sensitivityFactor.getFunction().getId() + getSuffix(sensitivityFactor.getFunction()), sensitivityFactor.getFunction());\n+            }\n+            sensitivityFunctionStringMap.put(contingencyId, sensitivityFunctionsString);\n+            contingencyMap.put(contingencyId, contingency);\n+        }\n+\n+        List<SensitivityFactor> basecaseSensitivities = provider.getAdditionalFactors(network);\n+        Set<String> basecaseSensitivityFunctions = new HashSet<>();\n+        for (SensitivityFactor sensitivityFactor : basecaseSensitivities) {\n+            basecaseSensitivityFunctions.add(sensitivityFactor.getFunction().getId() + getSuffix(sensitivityFactor.getFunction()));\n+            sensitivityVariableMap.put(sensitivityFactor.getVariable().getId(), sensitivityFactor.getVariable());\n+            sensitivityFunctionMap.put(sensitivityFactor.getFunction().getId() + getSuffix(sensitivityFactor.getFunction()), sensitivityFactor.getFunction());\n+        }\n+\n         try {\n-            InternalSensitivityInputsProvider internalProvider = new InternalSensitivityInputsProvider(\n-                    provider.getCommonFactors(network),\n-                    provider.getAdditionalFactors(network),\n-                    contingencies.stream().collect(Collectors.toMap(Contingency::getId, co -> provider.getAdditionalFactors(network, co.getId()))),\n-                    contingencies\n-            );\n-            return getObjectMapper().writeValueAsBytes(internalProvider);\n+            Writer writer = new StringWriter();\n+            ObjectMapper mapper = getObjectMapper();\n+            mapper.registerModule(new ContingencyJsonModule());\n+            ObjectWriter objectWriter = mapper.writerWithDefaultPrettyPrinter();\n+            JsonGenerator jsonGenerator = mapper.getFactory().createGenerator(writer);\n+\n+            jsonGenerator.writeStartArray();\n+            objectWriter.forType(new TypeReference<Map<String, SensitivityFunction>>() { }).writeValue(jsonGenerator, sensitivityFunctionMap);\n+            objectWriter.forType(new TypeReference<Map<String, SensitivityVariable>>() { }).writeValue(jsonGenerator, sensitivityVariableMap);\n+            objectWriter.forType(new TypeReference<Map<String, Contingency>>() { }).writeValue(jsonGenerator, contingencyMap);\n+            objectWriter.forType(new TypeReference<Set<String>>() { }).writeValue(jsonGenerator, basecaseSensitivityFunctions);\n+            objectWriter.forType(new TypeReference<Map<String, Set<String>>>() { }).writeValue(jsonGenerator, sensitivityFunctionStringMap);\n+            jsonGenerator.writeEndArray();\n+            jsonGenerator.close();\n+\n+            byte[] result = writer.toString().getBytes(\"UTF-8\");\n+            writer.close();\n+            return result;\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     public static InternalSensitivityInputsProvider read(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream);\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new ContingencyJsonModule());\n         try {\n-            return getObjectMapper().readValue(inputStream, InternalSensitivityInputsProvider.class);\n+            JsonParser jsonParser = mapper.getFactory().createParser(new InputStreamReader(inputStream,\"UTF-8\"));\n+\n+            jsonParser.nextToken();\n+\n+            jsonParser.nextToken();\n+            Map<String, SensitivityFunction> sensitivityFunctionMap = mapper\n+                .readValue(jsonParser, new TypeReference<LinkedHashMap<String, SensitivityFunction>>() { });\n+\n+            jsonParser.nextToken();\n+            Map<String, SensitivityVariable> sensitivityVariableMap = mapper\n+                .readValue(jsonParser, new TypeReference<LinkedHashMap<String, SensitivityVariable>>() { });\n+\n+            jsonParser.nextToken();\n+            Map<String, Contingency> contingencyMap = mapper\n+                .readValue(jsonParser, new TypeReference<LinkedHashMap<String, Contingency>>() { });\n+\n+            jsonParser.nextToken();\n+            Set<String> basecaseSensitivityFunctions = mapper\n+                .readValue(jsonParser, new TypeReference<>() { });\n+            List<SensitivityFactor> basecaseSensitivityFactors = new ArrayList<>();\n+            for (String sensitivityFunctionString : basecaseSensitivityFunctions) {\n+                SensitivityFunction function = sensitivityFunctionMap.get(sensitivityFunctionString);\n+                for (SensitivityVariable variable : sensitivityVariableMap.values()) {\n+                    SensitivityFactor sensitivityFactor = makeSensitivityFactor(function, variable);\n+                    if (Objects.nonNull(sensitivityFactor)) {\n+                        basecaseSensitivityFactors.add(sensitivityFactor);\n+                    }\n+                }\n+            }\n+\n+            jsonParser.nextToken();\n+            Map<String, Set<String>> sensitivityFunctionStringMap = mapper\n+                .readValue(jsonParser, new TypeReference<LinkedHashMap<String, Set<String>>>() { });\n+            jsonParser.close();\n+            inputStream.close();\n+\n+            Map<String, List<SensitivityFactor>> sensitivityFactorsMap = new HashMap<>();\n+            for (Map.Entry<String, Set<String>> entry : sensitivityFunctionStringMap.entrySet()) {\n+                List<SensitivityFactor> sensitivityFactors = new ArrayList<>();\n+                for (String sensitivityFunctionString : entry.getValue()) {\n+                    SensitivityFunction function = sensitivityFunctionMap.get(sensitivityFunctionString);\n+                    for (SensitivityVariable variable : sensitivityVariableMap.values()) {\n+                        SensitivityFactor sensitivityFactor = makeSensitivityFactor(function, variable);\n+                        if (Objects.nonNull(sensitivityFactor)) {\n+                            sensitivityFactors.add(sensitivityFactor);\n+                        }\n+                    }\n+                }\n+                sensitivityFactorsMap.put(entry.getKey(), sensitivityFactors);\n+            }\n+\n+            return new InternalSensitivityInputsProvider(new ArrayList<>(), basecaseSensitivityFactors, sensitivityFactorsMap, new ArrayList<>(contingencyMap.values()));\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n+    private static SensitivityFactor makeSensitivityFactor(SensitivityFunction function, SensitivityVariable variable) {\n+        if (function instanceof BranchFlow) {\n+            if (variable instanceof LinearGlsk) {\n+                return new BranchFlowPerLinearGlsk((BranchFlow) function, (LinearGlsk) variable);\n+            } else if (variable instanceof PhaseTapChangerAngle) {\n+                return new BranchFlowPerPSTAngle((BranchFlow) function, (PhaseTapChangerAngle) variable);\n+            } else if (variable instanceof InjectionIncrease) {\n+                return new BranchFlowPerInjectionIncrease((BranchFlow) function, (InjectionIncrease) variable);\n+            }\n+        } else if ((function instanceof BranchIntensity) && (variable instanceof PhaseTapChangerAngle)) {\n+            if (variable instanceof PhaseTapChangerAngle) {\n+               return new BranchIntensityPerPSTAngle((BranchIntensity) function, (PhaseTapChangerAngle) variable);\n+            }\n+        }\n+        return null;\n+    }\n+\n     private static ObjectMapper getObjectMapper() {\n         return new ObjectMapper().registerModule(new ContingencyJsonModule());\n     }"
  },
  {
    "sha": "db39177eba865d68332bf09a07ce90f9f687db66",
    "filename": "sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityOutputs.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/farao-community/farao-sensitivity-computation-server/blob/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityOutputs.java",
    "raw_url": "https://github.com/farao-community/farao-sensitivity-computation-server/raw/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityOutputs.java",
    "contents_url": "https://api.github.com/repos/farao-community/farao-sensitivity-computation-server/contents/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityOutputs.java?ref=278eee551472ea2030588951c28de79b9e3521f4",
    "patch": "@@ -0,0 +1,150 @@\n+package com.farao_community.farao.sensitivity.api;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.sensitivity.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.io.Writer;\n+import java.util.*;\n+\n+import static com.farao_community.farao.sensitivity.api.JsonSensitivityUtil.getSuffix;\n+\n+public class JsonSensitivityOutputs {\n+    public static void write(SensitivityAnalysisResult sensitivityComputationResults, Writer writer) {\n+\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n+            JsonGenerator jsonGenerator = mapper.getFactory().createGenerator(writer);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"ok\", sensitivityComputationResults.isOk());\n+            jsonGenerator.writeObjectField(\"metrics\", sensitivityComputationResults.getMetrics());\n+            jsonGenerator.writeObjectField(\"logs\", sensitivityComputationResults.getLogs());\n+\n+            jsonGenerator.writeFieldName(\"values\");\n+            jsonGenerator.writeStartArray();\n+            for (SensitivityValue sensitivityValue : sensitivityComputationResults.getSensitivityValues()) {\n+                jsonGenerator.writeStartObject();\n+                jsonGenerator.writeStringField(\"fun\", sensitivityValue.getFactor().getFunction().getId() + getSuffix(sensitivityValue.getFactor().getFunction()));\n+                jsonGenerator.writeStringField(\"var\", sensitivityValue.getFactor().getVariable().getId());\n+                jsonGenerator.writeNumberField(\"value\", sensitivityValue.getValue());\n+                jsonGenerator.writeNumberField(\"funRef\", sensitivityValue.getFunctionReference());\n+                jsonGenerator.writeNumberField(\"varRef\", sensitivityValue.getVariableReference());\n+                jsonGenerator.writeEndObject();\n+            }\n+            jsonGenerator.writeEndArray();\n+\n+\n+            Map<String, List<SensitivityValue>> coValMap = sensitivityComputationResults.getSensitivityValuesContingencies();\n+            jsonGenerator.writeFieldName(\"contingencyValues\");\n+            jsonGenerator.writeStartObject();\n+            for(String coId : coValMap.keySet()) {\n+                jsonGenerator.writeFieldName(coId);\n+                jsonGenerator.writeStartArray();\n+                for (SensitivityValue sensitivityValue : coValMap.get(coId)) {\n+                    jsonGenerator.writeStartObject();\n+                    jsonGenerator.writeStringField(\"fun\", sensitivityValue.getFactor().getFunction().getId() + getSuffix(sensitivityValue.getFactor().getFunction()));\n+                    jsonGenerator.writeStringField(\"var\", sensitivityValue.getFactor().getVariable().getId());\n+                    jsonGenerator.writeNumberField(\"value\", sensitivityValue.getValue());\n+                    jsonGenerator.writeNumberField(\"funRef\", sensitivityValue.getFunctionReference());\n+                    jsonGenerator.writeNumberField(\"varRef\", sensitivityValue.getVariableReference());\n+                    jsonGenerator.writeEndObject();\n+                }\n+                jsonGenerator.writeEndArray();\n+            }\n+            jsonGenerator.close();\n+            writer.close();\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static SensitivityAnalysisResult read(Reader reader, SensitivityFactorsProvider factorsProvider, Network network) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            JsonParser jsonParser = mapper.getFactory().createParser(reader);\n+\n+            jsonParser.nextToken();\n+\n+            jsonParser.nextToken();\n+            jsonParser.nextToken();\n+            boolean ok = mapper.readValue(jsonParser, Boolean.TYPE);\n+\n+            jsonParser.nextToken();\n+            jsonParser.nextToken();\n+            Map<String, String> metrics = mapper.readValue(jsonParser, new TypeReference<>() {\n+            });\n+\n+            jsonParser.nextToken();\n+            jsonParser.nextToken();\n+            String logs = mapper.readValue(jsonParser, new TypeReference<>() {\n+            });\n+\n+            jsonParser.nextToken();\n+            jsonParser.nextToken();\n+            Set<Map<String, String>> baseCaseSensisSet  = mapper\n+                .readValue(jsonParser, new TypeReference<>() { });\n+            Map<String, Map<String, Map<String, Double>>> reorganizedSensis = new HashMap<>();\n+            for (Map<String, String> sensi : baseCaseSensisSet) {\n+                String fun = sensi.get(\"fun\");\n+                String var = sensi.get(\"var\");\n+                Map<String, Double> sensiRes = new HashMap<>();\n+                sensiRes.put(\"value\", Double.parseDouble(sensi.get(\"value\")));\n+                sensiRes.put(\"funRef\", Double.parseDouble(sensi.get(\"funRef\")));\n+                sensiRes.put(\"varRef\", Double.parseDouble(sensi.get(\"varRef\")));\n+                if (!reorganizedSensis.containsKey(fun)) {\n+                    reorganizedSensis.put(fun, new HashMap<>());\n+                }\n+                reorganizedSensis.get(fun).put(var, sensiRes);\n+            }\n+            List<SensitivityValue> baseCaseSensiValues = new LinkedList<>();\n+            List<SensitivityFactor> factors = factorsProvider.getAdditionalFactors(network);\n+            for(SensitivityFactor factor : factors) {\n+                Map<String, Double> sensiRes = reorganizedSensis.get(factor.getFunction().getId() + getSuffix(factor.getFunction())).get(factor.getVariable().getId());\n+                baseCaseSensiValues.add(new SensitivityValue(factor, sensiRes.get(\"value\"), sensiRes.get(\"funRef\"), sensiRes.get(\"varRef\")));\n+            }\n+\n+            jsonParser.nextToken();\n+            jsonParser.nextToken();\n+            Map<String, Set<Map<String, String>>> allContingencySensisMap  = mapper\n+                .readValue(jsonParser, new TypeReference<>() { });\n+            Map<String, List<SensitivityValue>> allContingencySensiValues = new HashMap<>();\n+            for(String coId : allContingencySensisMap.keySet()) {\n+                reorganizedSensis = new HashMap<>();\n+                Set<Map<String, String>> contingencySensisSet = allContingencySensisMap.get(coId);\n+                for (Map<String, String> sensi : contingencySensisSet) {\n+                    String fun = sensi.get(\"fun\");\n+                    String var = sensi.get(\"var\");\n+                    Map<String, Double> sensiRes = new HashMap<>();\n+                    sensiRes.put(\"value\", Double.parseDouble(sensi.get(\"value\")));\n+                    sensiRes.put(\"funRef\", Double.parseDouble(sensi.get(\"funRef\")));\n+                    sensiRes.put(\"varRef\", Double.parseDouble(sensi.get(\"varRef\")));\n+                    if (!reorganizedSensis.containsKey(fun)) {\n+                        reorganizedSensis.put(fun, new HashMap<>());\n+                    }\n+                    reorganizedSensis.get(fun).put(var, sensiRes);\n+                }\n+                List<SensitivityValue> contingencySensiValues = new LinkedList<>();\n+                factors = factorsProvider.getAdditionalFactors(network, coId);\n+                for(SensitivityFactor factor : factors) {\n+                    Map<String, Double> sensiRes = reorganizedSensis.get(factor.getFunction().getId() + getSuffix(factor.getFunction())).get(factor.getVariable().getId());\n+                    contingencySensiValues.add(new SensitivityValue(factor, sensiRes.get(\"value\"), sensiRes.get(\"funRef\"), sensiRes.get(\"varRef\")));\n+                }\n+                allContingencySensiValues.put(coId, contingencySensiValues);\n+            }\n+            reader.close();\n+            jsonParser.close();\n+            return new SensitivityAnalysisResult(ok, metrics, logs, baseCaseSensiValues, allContingencySensiValues);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "e0998a71cba4b05aa7709cf9a66ced01b5f4517d",
    "filename": "sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityUtil.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/farao-community/farao-sensitivity-computation-server/blob/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityUtil.java",
    "raw_url": "https://github.com/farao-community/farao-sensitivity-computation-server/raw/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityUtil.java",
    "contents_url": "https://api.github.com/repos/farao-community/farao-sensitivity-computation-server/contents/sensitivity-computation-api/src/main/java/com/farao_community/farao/sensitivity/api/JsonSensitivityUtil.java?ref=278eee551472ea2030588951c28de79b9e3521f4",
    "patch": "@@ -0,0 +1,22 @@\n+package com.farao_community.farao.sensitivity.api;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.sensitivity.SensitivityFunction;\n+import com.powsybl.sensitivity.factors.functions.BranchFlow;\n+import com.powsybl.sensitivity.factors.functions.BranchIntensity;\n+\n+public class JsonSensitivityUtil {\n+    private JsonSensitivityUtil() {\n+        throw new AssertionError(\"Utility class should not be implemented\");\n+    }\n+\n+    public static String getSuffix(SensitivityFunction function) {\n+        if (function instanceof BranchFlow) {\n+            return \" - F\";\n+        } else if (function instanceof BranchIntensity) {\n+            return \" - I\";\n+        }\n+        throw new PowsyblException(\"Unable to parse JsonSensitivityFactorProvider: unrecognizable sensitivity function\");\n+\n+    }\n+}"
  },
  {
    "sha": "d30a7b18b741f79a952a6aedc73d8baaf01388c1",
    "filename": "sensitivity-computation-client/src/main/java/com/farao_community/farao/sensitivity/client/SensitivityComputationClient.java",
    "status": "modified",
    "additions": 20,
    "deletions": 8,
    "changes": 28,
    "blob_url": "https://github.com/farao-community/farao-sensitivity-computation-server/blob/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-client/src/main/java/com/farao_community/farao/sensitivity/client/SensitivityComputationClient.java",
    "raw_url": "https://github.com/farao-community/farao-sensitivity-computation-server/raw/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-client/src/main/java/com/farao_community/farao/sensitivity/client/SensitivityComputationClient.java",
    "contents_url": "https://api.github.com/repos/farao-community/farao-sensitivity-computation-server/contents/sensitivity-computation-client/src/main/java/com/farao_community/farao/sensitivity/client/SensitivityComputationClient.java?ref=278eee551472ea2030588951c28de79b9e3521f4",
    "patch": "@@ -7,14 +7,17 @@\n package com.farao_community.farao.sensitivity.client;\n \n import com.farao_community.farao.sensitivity.api.JsonSensitivityInputs;\n+import com.farao_community.farao.sensitivity.api.JsonSensitivityOutputs;\n import com.google.auto.service.AutoService;\n import com.powsybl.computation.ComputationManager;\n import com.powsybl.contingency.Contingency;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.xml.NetworkXml;\n-import com.powsybl.sensitivity.*;\n+import com.powsybl.sensitivity.SensitivityAnalysisParameters;\n+import com.powsybl.sensitivity.SensitivityAnalysisProvider;\n+import com.powsybl.sensitivity.SensitivityAnalysisResult;\n+import com.powsybl.sensitivity.SensitivityFactorsProvider;\n import com.powsybl.sensitivity.json.JsonSensitivityAnalysisParameters;\n-import com.powsybl.sensitivity.json.SensitivityAnalysisResultJsonSerializer;\n import io.netty.channel.ChannelOption;\n import io.netty.handler.timeout.ReadTimeoutHandler;\n import io.netty.handler.timeout.WriteTimeoutHandler;\n@@ -35,6 +38,7 @@\n import java.time.Duration;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n \n /**\n  * @author Sebastien Murgey {@literal <sebastien.murgey@rte-france.com>}\n@@ -53,14 +57,16 @@ public SensitivityComputationClient(SensitivityComputationClientConfig config) {\n \n     @Override\n     public CompletableFuture<SensitivityAnalysisResult> run(Network network, String workingVariantId, SensitivityFactorsProvider factorsProvider, List<Contingency> contingencies, SensitivityAnalysisParameters sensiParameters, ComputationManager computationManager) {\n-        TcpClient timeoutClient = TcpClient.create()\n+        TcpClient timeoutClient = TcpClient.newConnection()\n             .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, config.getTimeOutInSeconds()*1000)\n+            .option(ChannelOption.SO_KEEPALIVE, false)\n+            .option(ChannelOption.SO_REUSEADDR, false)\n             .doOnConnected(\n                 c -> c.addHandlerLast(new ReadTimeoutHandler(config.getTimeOutInSeconds()*1000))\n                     .addHandlerLast(new WriteTimeoutHandler(config.getTimeOutInSeconds()*1000)));\n \n         WebClient webClient = WebClient.builder()\n-            .clientConnector(new ReactorClientHttpConnector(HttpClient.from(timeoutClient)))\n+            .clientConnector(new ReactorClientHttpConnector(HttpClient.from(timeoutClient).keepAlive(false)))\n             .build();\n \n         //WebClient webClient = WebClient.create();\n@@ -71,7 +77,10 @@ public SensitivityComputationClient(SensitivityComputationClientConfig config) {\n                 .bodyToFlux(DataBuffer.class)\n                 .timeout(Duration.ofMillis(config.getTimeOutInSeconds()*1000));\n \n-        return CompletableFuture.completedFuture(parseResults(resultData));\n+        CompletableFuture<SensitivityAnalysisResult> result = CompletableFuture.completedFuture(parseResults(resultData, factorsProvider, network));\n+\n+        webClient.delete();\n+        return result;\n     }\n \n     @Override\n@@ -84,10 +93,13 @@ public String getVersion() {\n         return \"1.0.0\";\n     }\n \n-    private SensitivityAnalysisResult parseResults(Flux<DataBuffer> resultData) {\n+    private SensitivityAnalysisResult parseResults(Flux<DataBuffer> resultData, SensitivityFactorsProvider factorsProvider, Network network) {\n         try {\n-            Reader reader = new InputStreamReader(DataBufferUtils.join(resultData).block().asInputStream());\n-            return SensitivityAnalysisResultJsonSerializer.read(reader);\n+            PipedOutputStream osPipe = new PipedOutputStream();\n+            PipedInputStream isPipe = new PipedInputStream(osPipe);\n+            DataBufferUtils.write(resultData, osPipe).subscribe(DataBufferUtils.releaseConsumer());\n+            Reader reader = new InputStreamReader(isPipe, \"UTF-8\");\n+            return JsonSensitivityOutputs.read(reader, factorsProvider, network);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }"
  },
  {
    "sha": "1291f86e70b14c155eb749269739d230cdbf6859",
    "filename": "sensitivity-computation-server/src/main/java/com/farao_community/farao/sensitivity/server/SensitivityComputationServerService.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/farao-community/farao-sensitivity-computation-server/blob/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-server/src/main/java/com/farao_community/farao/sensitivity/server/SensitivityComputationServerService.java",
    "raw_url": "https://github.com/farao-community/farao-sensitivity-computation-server/raw/278eee551472ea2030588951c28de79b9e3521f4/sensitivity-computation-server/src/main/java/com/farao_community/farao/sensitivity/server/SensitivityComputationServerService.java",
    "contents_url": "https://api.github.com/repos/farao-community/farao-sensitivity-computation-server/contents/sensitivity-computation-server/src/main/java/com/farao_community/farao/sensitivity/server/SensitivityComputationServerService.java?ref=278eee551472ea2030588951c28de79b9e3521f4",
    "patch": "@@ -8,6 +8,8 @@\n \n import com.farao_community.farao.sensitivity.api.InternalSensitivityInputsProvider;\n import com.farao_community.farao.sensitivity.api.JsonSensitivityInputs;\n+import com.farao_community.farao.sensitivity.api.JsonSensitivityOutputs;\n+import com.powsybl.contingency.Contingency;\n import com.powsybl.iidm.import_.Importers;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.sensitivity.*;\n@@ -23,6 +25,7 @@\n import reactor.core.publisher.Flux;\n \n import java.io.*;\n+import java.util.List;\n \n /**\n  * @author Sebastien Murgey {@literal <sebastien.murgey@rte-france.com>}\n@@ -37,8 +40,7 @@\n         Network network = importNetwork(networkFile);\n         InternalSensitivityInputsProvider inputsProvider = importSensitivityInputsProvider(inputsFile);\n         SensitivityAnalysisParameters parameters = importParameters(parametersFile);\n-\n-        SensitivityAnalysisResult result = SensitivityAnalysis.run(network, inputsProvider, inputsProvider.getContingencies(), parameters);\n+        SensitivityAnalysisResult result = SensitivityAnalysis.run(network, inputsProvider, (List<Contingency>) inputsProvider.getContingencies(), parameters);\n         LOGGER.info(\"[end] sensitivity computation\");\n         return turnToData(result);\n     }\n@@ -60,8 +62,13 @@ private SensitivityAnalysisParameters importParameters(FilePart parametersFile)\n \n     private Flux<DataBuffer> turnToData(SensitivityAnalysisResult sensitivityComputationResults) {\n         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-        Writer writer = new OutputStreamWriter(byteArrayOutputStream);\n-        SensitivityAnalysisResultExporters.export(sensitivityComputationResults, writer, \"JSON\");\n+        Writer writer = null;\n+        try {\n+            writer = new OutputStreamWriter(byteArrayOutputStream, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            e.printStackTrace();\n+        }\n+        JsonSensitivityOutputs.write(sensitivityComputationResults, writer);\n         return DataBufferUtils.readInputStream(() -> new ByteArrayInputStream(byteArrayOutputStream.toByteArray()), new DefaultDataBufferFactory(), 1024);\n     }\n }"
  }
]
