[
  {
    "sha": "f767c1d340b9c438fc62db889f78e1976cb896d6",
    "filename": "Sender.java",
    "status": "added",
    "additions": 197,
    "deletions": 0,
    "changes": 197,
    "blob_url": "https://github.com/akb364/CS465/blob/41cc01edc0553511ce7fc0e0678320b5875429ca/Sender.java",
    "raw_url": "https://github.com/akb364/CS465/raw/41cc01edc0553511ce7fc0e0678320b5875429ca/Sender.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Sender.java?ref=41cc01edc0553511ce7fc0e0678320b5875429ca",
    "patch": "@@ -0,0 +1,197 @@\n+import java.util.*;\n+import java.net.*;\n+import java.io.*;\n+import java.util.logging.*;\n+\n+\n+// only one thread\n+// can ask to join or leave or send message\n+class Sender\n+{\n+    private Participant self;\n+\n+    public Sender(Participant self)\n+    {\n+        this.self = self;\n+    }\n+\n+    // loop - runs until leave\n+    while(true)\n+    {\n+        // get user input\n+        inputLine = userInput.nextLine();\n+        // switch statement\n+\n+            // if starts with JOIN\n+            if(inputLine.startsWith(\"JOIN\"))\n+            {\n+              if(hasJoined == true)\n+              {\n+                System.err.println(\"You have already joined the chat..\");\n+                continue;\n+              }\n+              String[] connectionInfo = inputLine.split(\"[]+\");\n+              String joinAddress;\n+              int joinPort;\n+\n+              try\n+              {\n+                  joinAddress = connectionInfo[1];\n+                  joinPort = Integer.parseInt(connectionInfo[2]);\n+              }\n+              catch(ArrayIndexOutOfBoundsException ex)\n+              {\n+                Logger.getLogger(Sender.class.getName()).log(level.INFO, \"Adding node\");\n+\n+                ChatNode.SUCCESSOR = ChatNode.self;\n+                ChatNode.PREDECESSOR = ChatNode.self;\n+                hasJoined = true;\n+\n+               continue;\n+              }\n+\n+              Socket joinConnection;\n+              try\n+              {\n+                joinConnection = new Socket(joinAddress, joinPort);\n+              }\n+              catch\n+              {\n+                Logger.getLogger(Sender.class.getName()).log(level.SEVERERR, ex);\n+                continue;\n+              }\n+\n+              //send join request\n+              try\n+              {\n+                //open obj streams\n+                writeToNet = new ObjectOutputStream(joinConnection.getOutputStream());\n+                readFromNet = new ObjectInputStream(joinConnection.getInputStream());\n+\n+                //send join request\n+                writeToNet.writeObject(new MessageJoin(ChatNode.self));\n+\n+                //recieve SUCCESSOR INFO\n+                ChatNode.SUCCESSOR = (NodeInfo)readFromNet.readObject()\n+                ChatNode.PREDECESSOR = (NodeInfo)readFromNet.readObject()\n+\n+                //done\n+                joinConnection.close();\n+              }\n+                catch (IOException ex)\n+                {\n+                  Logger.getLogger(Sender.class.getName()).log(level.SEVER)\n+                }\n+                catch (ClassNotFoundException ex)\n+                {\n+                  Logger.getLogger(Sender.class.getName()).log(level.SEVER)\n+                }\n+\n+                //send JOINED message to SUCCESSORs PREDECESSOR\n+                Socket joinedConnection = null;\n+                try\n+                {\n+                  joinedConnection = new Socket(ChatNode.PREDECESSOR.getAddress())\n+                  writeToNet = new ObjectOutputStream(joinedConnection.getOutputStream)\n+                  writeToNet.writeObject(new MessageJoined(ChatNode.ME));\n+                  joinedConnection.close();\n+                } catch (IOException ex) {\n+                  Logger.getLogger(Sender.class.getName()).log(level.SEVER ex);\n+                  continue;\n+                }\n+                hasJoined = true;\n+\n+            }\n+\n+            // if starts with LEAVE\n+            else if(inputLine.startsWith(\"LEAVE\") || inputLine.startsWith(\"SHUTDOWN\"))\n+            {\n+              if (hasJoined == false)\n+              {\n+                System.err.println(\"You have not joined a chat yet ...\");\n+                continue;\n+              }\n+\n+              // leaving chat\n+              MessageLeave leaveMessage = new MessageLeave(ChatNode.PREDECESSOR);\n+              Socket leaveConnection = null;\n+\n+              try {\n+                leaveConnection = new Socket(ChatNode.SUCCESSOR.getAddress(), ChatNode.SUCCESSOR)\n+                writeToNet = new ObjectOutputStream(leaveConnection.getOutputStream());\n+                writeToNet.writeObject(leaveMessage);\n+                leaveConnection.close();\n+              } catch (IOException ex) {\n+                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE,\"CONnection failed!\", ex);\n+                continue;\n+              }\n+\n+              MessageLeft leftMessage = new MessageLeft(ChatNode.SUCCESSOR);\n+              Socket leftConnection = null;\n+\n+              try {\n+                leftConnection = new Socket(ChatNode.PREDECESSOR.getAddress(),)\n+                writeToNet = new ObjectOutputStream(leftConnection.getOutputStream())\n+                writeToNet.writeObject(leftMessage);\n+                leftConnection.close();\n+              } catch (IOException ex) {\n+                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, \"Connection failed!\", ex);\n+                continue;\n+              }\n+\n+              if (inputLine.startsWith(\"LEAVE\"))\n+              {\n+                hasJoined = false;\n+                System.out.println(\"Left chat\");\n+              }\n+              else\n+              {\n+                // shut down\n+                System.out.println(\"Shutting down\\n\");\n+                System.exit(0);\n+              }\n+            }\n+\n+            // otherwise, send message\n+            else\n+            {\n+              if (hasJoined == false)\n+              {\n+                System.err.println(\"You need to join a chat first!\");\n+                continue;\n+              }\n+\n+              // sending message\n+              Socket noteConnection;\n+              \n+            }\n+\n+      }\n+\n+    public void connectToMesh(Participant meshParticipant)\n+    {\n+        try\n+        {\n+        // open connection with other node\n+        Socket joinConnection = new Socket(meshParticipant.ip, meshParticipant.port);\n+\n+        // send request message to node\n+        ObjectOutputStream writeToNet = new ObjectOutputStream(joinConnection.getOutputStream());\n+        ObjectInputStream readFromNet = new ObjectInputStream(joinConnection.getInputStream());\n+\n+        writeToNet.writeObject(new JoinMessage(self));\n+\n+        //Object incoming = readFromNet.readObject();\n+        participantList.add((Participant)readFromNet.readObject());\n+        }\n+        catch(IOException e)\n+        {\n+            System.out.println(\"hi\");\n+        }\n+        catch(ClassNotFoundException e)\n+        {\n+            System.out.println(\"hi\");\n+        }\n+    }\n+\n+}"
  }
]
