[
  {
    "sha": "3398a693905e6c25ddfa20d8c26551a3d09a0811",
    "filename": "ChatMessage.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatMessage.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatMessage.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ChatMessage.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "85387f6db0c6d1c4ec5f4f3a30c2a1ad9495d32c",
    "filename": "ChatMessage.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatMessage.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatMessage.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ChatMessage.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,11 @@\n+// chat message sent from one node to all others\n+public class ChatMessage extends MessageType\n+{\n+    public String message;\n+\n+    public ChatMessage(Participant sender, String message)\n+    {\n+        super(sender);\n+        this.message = message;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c2bd9067eba561d0257a4bb2e0a3f706a9673368",
    "filename": "ChatNode.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatNode.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatNode.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ChatNode.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "28b5ace0caabb200b21ff8cec041e1103b8679ab",
    "filename": "ChatNode.java",
    "status": "modified",
    "additions": 18,
    "deletions": 118,
    "changes": 136,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatNode.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ChatNode.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ChatNode.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -6,138 +6,38 @@\n {\n     public static Participant self;\n     public static LinkedList<Participant> participantList;\n-    private Socket sock;\n-    private ServerSocket serverSock; \n-    //private Sender sender;\n-    //private Receiver receiver;\n+    private Sender sender;\n+    private Receiver receiver;\n \n-    public ChatNode(String ip)\n+    public ChatNode(String[] args)\n     {\n-        // create a new server socket with generated port\n-        try\n+        // args will be: username, ip\n+        // JOIN message will be sent later in a separate command\n+\n+        if( args.length >= 2 )\n         {\n-            serverSock = new ServerSocket(0);\n+            this.self = new Participant(args[0], args[1]);\n         }\n-        catch(IOException e)\n+        else\n         {\n-\n+            System.out.println(\"not enough args\");\n+            System.exit(1);\n         }\n-\n-        this.self = new Participant(ip, serverSock.getLocalPort());\n-        this.participantList = new LinkedList<Participant>();\n-\n-        //this.sender = new Sender(this.self);\n-        //this.receiver = new Receiver(this.self);\n-\n     }\n \n     public static void main(String[] args)\n     {\n-        String ownIP = args[0];\n-\n-        ChatNode node = new ChatNode(ownIP);\n-\n-        System.out.println(\"listening on port \" + Integer.toString(node.self.port));\n-\n-        // if user gives other ip & port\n-        if( args.length > 1 )\n-        {\n-            System.out.println(\"hi\");\n-\n-            String otherNodeIP = args[0];\n-            int otherNodePort = Integer.parseInt(args[1]);\n-\n-            node.connectToMesh(new Participant(otherNodeIP, otherNodePort));\n-        }\n-\n-        //runReceiver();\n-\n-        System.out.println(\"done message\");\n-    }\n-\n-}\n-\n-class Participant\n-{\n-    public String ip;\n-    public Sring name;\n-    public int port;\n-\n-    public Participant(String name, String ip, int port)\n-    {\n-        this.ip = ip;\n-        this.name = name;\n-        this.port = port;\n-    }\n-}\n-\n-// base class\n-class MessageType\n-{\n-    public Participant sender;\n-\n-    public MessageType(Participant sender)\n-    {\n-        this.sender = sender;\n+        ChatNode node = new ChatNode(args);\n+        node.run();\n     }\n-}\n-\n-// sent from joining node to random node in mesh\n-class JoinMessage extends MessageType implements Serializable\n-{\n-    public JoinMessage(Participant sender)\n-    {\n-       super(sender);\n-    }\n-}\n \n-// sent from one node in the mesh to all others\n-// to tell them a new node has joined so they\n-// can add the node to their participants list\n-class JoinedMessage extends MessageType\n-{\n-    public Participant newNode;\n-\n-    JoinedMessage(Participant sender,Participant newNode)\n+    public void run()\n     {\n-        super(sender);\n-        newNode = newNode;\n-    }\n-}\n+        new Receiver().start();\n+        new Sender().start();\n \n-// sent from one node to the joining node\n-class ParticipantsMessage\n-{\n-    public LinkedList<Participant> participantList;\n-\n-    public ParticipantsMessage(LinkedList<Participant>\n-                               participantList)\n-    {\n-        this.participantList = participantList;\n+        System.out.println(\"done message\");\n+        System.exit(0);\n     }\n-}\n-\n-// chat message sent from one node to all others\n-class ChatMessage extends MessageType\n-{\n-    public String message;\n \n-    public ChatMessage(Participant sender, String message)\n-    {\n-        super(sender);\n-        this.message = message;\n-    }\n }\n-\n-// message sent from one node to all others\n-// saying it is leaving so they can remove the node\n-// from the participant list\n-class LeaveMessage extends MessageType\n-{\n-    public LeaveMessage(Participant sender)\n-    {\n-        super(sender);\n-    }\n-}\n-\n-"
  },
  {
    "sha": "2de7aeff4382640603f8d5df81cc90410b8a1010",
    "filename": "Distributed Chat/Sender.java",
    "status": "modified",
    "additions": 55,
    "deletions": 13,
    "changes": 68,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Distributed%20Chat/Sender.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Distributed%20Chat/Sender.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Distributed%20Chat/Sender.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -57,7 +57,7 @@ public Sender(Participant self)\n               }\n               catch\n               {\n-                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection failed\", ex);\n+                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection Failed...\", ex);\n                 continue;\n               }\n \n@@ -80,33 +80,76 @@ public Sender(Participant self)\n               }\n                 catch (IOException ex)\n                 {\n-                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection failed\", ex);)\n+                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection Failed...\", ex);)\n                 }\n                 catch (ClassNotFoundException ex)\n                 {\n-                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection failed\", ex);\n+                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection Failed...\", ex);\n                 }\n \n                 //send JOINED message to SUCCESSORs PREDECESSOR\n                 Socket joinedConnection = null;\n                 try\n                 {\n-                  joinedConnection = new Socket(ChatNode.PREDECESSOR.getAddress())\n-                  writeToNet = new ObjectOutputStream(joinedConnection.getOutputStream)\n+                  joinedConnection = new Socket(ChatNode.PREDECESSOR.getAddress());\n+                  writeToNet = new ObjectOutputStream(joinedConnection.getOutputStream());\n                   writeToNet.writeObject(new MessageJoined(ChatNode.ME));\n                   joinedConnection.close();\n                 } catch (IOException ex) {\n-                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection failed\", ex);\n+                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection Failed...\", ex);\n                   continue;\n                 }\n                 hasJoined = true;\n \n             }\n \n             // if starts with LEAVE\n-            else if(inputLine.startsWith(\"LEAVE\"))\n+            else if(inputLine.startsWith(\"LEAVE\") || inputLine.startsWith(\"SHUTDOWN\"))\n             {\n+              if (hasJoined == false)\n+              {\n+                System.err.println(\"You have not joined a chat yet ...\");\n+                continue;\n+              }\n+\n+              // leaving chat\n+              MessageLeave leaveMessage = new MessageLeave(ChatNode.PREDECESSOR);\n+              Socket leaveConnection = null;\n+\n+              try {\n+                leaveConnection = new Socket(ChatNode.SUCCESSOR.getAddress(), ChatNode.SUCCESSOR)\n+                writeToNet = new ObjectOutputStream(leaveConnection.getOutputStream());\n+                writeToNet.writeObject(leaveMessage);\n+                leaveConnection.close();\n+              } catch (IOException ex) {\n+                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE,\"CONnection failed!\", ex);\n+                continue;\n+              }\n \n+              MessageLeft leftMessage = new MessageLeft(ChatNode.SUCCESSOR);\n+              Socket leftConnection = null;\n+\n+              try {\n+                leftConnection = new Socket(ChatNode.PREDECESSOR.getAddress(),)\n+                writeToNet = new ObjectOutputStream(leftConnection.getOutputStream())\n+                writeToNet.writeObject(leftMessage);\n+                leftConnection.close();\n+              } catch (IOException ex) {\n+                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, \"Connection failed!\", ex);\n+                continue;\n+              }\n+\n+              if (inputLine.startsWith(\"LEAVE\"))\n+              {\n+                hasJoined = false;\n+                System.out.println(\"Left chat\");\n+              }\n+              else\n+              {\n+                // shut down\n+                System.out.println(\"Shutting down\\n\");\n+                System.exit(0);\n+              }\n             }\n \n             // otherwise, send message\n@@ -117,22 +160,21 @@ else if(inputLine.startsWith(\"LEAVE\"))\n               {\n                 System.err.println(\"You need to join chat first!\");\n                 continue;\n-\n               }\n-              Socket noteConnection;\n+              Socket messageConnection;\n               Onject[] noteMessageContent = new Object[2];\n               noteMessageContent[0] = ChatNode.self;\n               noteMessageContent[1] = ChatNode.self.getName() + \": \" + inputLine\n               MessageNote noteMessage = new MessageNote(noteMessageContent);\n               //send note message to this participant\n               try{\n-                noteConnection = new Socket(ChatNode.SUCCESSOR.getAddress)\n-                writeToNet = new ObjectOutputStream(noteConnection.getOutputStream)\n+                messageConnection = new Socket(ChatNode.SUCCESSOR.getAddress());\n+                writeToNet = new ObjectOutputStream(messageConnection.getOutputStream());\n                 writeToNet.writeObject(noteMessage);\n-                noteConnection.close();\n+                messageConnection.close();\n               } catch(IOException ex)\n               {\n-                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection failed\", ex);\n+                Logger.getLogger(Sender.class.getName()).log(level.SEVERE,\"Connection Failed... \", ex);\n               }\n             }\n "
  },
  {
    "sha": "20bd7bb3f3648eca666156a183e2053fa112ec1d",
    "filename": "JoinMessage.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinMessage.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinMessage.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/JoinMessage.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "fb19e9c21d4a75346161dd5442ced3bf7416f733",
    "filename": "JoinMessage.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinMessage.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinMessage.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/JoinMessage.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,8 @@\n+// sent from joining node to random node in mesh\n+public class JoinMessage extends MessageType \n+{\n+    public JoinMessage(Participant sender)\n+    {\n+       super(sender);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f095e6cf03967a7d06ca6d4b36d7063c844b4985",
    "filename": "JoinedMessage.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinedMessage.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinedMessage.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/JoinedMessage.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "f0291306d4ad40bca3e1ef98f53b041ffc65b284",
    "filename": "JoinedMessage.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinedMessage.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/JoinedMessage.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/JoinedMessage.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,13 @@\n+// sent from one node in the mesh to all others\n+// to tell them a new node has joined so they\n+// can add the node to their participants list\n+public class JoinedMessage extends MessageType\n+{\n+    public Participant newNode;\n+\n+    JoinedMessage(Participant sender,Participant newNode)\n+    {\n+        super(sender);\n+        newNode = newNode;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3368793c81bfd222551d46fdb6822ecc7638e9a9",
    "filename": "LeaveMessage.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/LeaveMessage.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/LeaveMessage.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/LeaveMessage.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "49686a826990bffcb163b70a76913686a11b9ed7",
    "filename": "LeaveMessage.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/LeaveMessage.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/LeaveMessage.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/LeaveMessage.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,10 @@\n+// message sent from one node to all others\n+// saying it is leaving so they can remove the node\n+// from the participant list\n+public class LeaveMessage extends MessageType\n+{\n+    public LeaveMessage(Participant sender)\n+    {\n+        super(sender);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d01c3f33daa80fdd3059fc1b7d3f0f77c16f6d53",
    "filename": "MessageType.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/MessageType.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/MessageType.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/MessageType.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "ba864888615851bd31cf3c8740e5fa4d8fac9278",
    "filename": "MessageType.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/MessageType.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/MessageType.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/MessageType.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,10 @@\n+// base class\n+public class MessageType\n+{\n+    public Participant sender;\n+\n+    public MessageType(Participant sender)\n+    {\n+        this.sender = sender;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8df6a23ecc507fd0810e3d9fec5df2dd020eee3e",
    "filename": "Participant.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Participant.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Participant.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Participant.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "99fd9369a750ff84de40690733b22d97d2cd02f7",
    "filename": "Participant.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Participant.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Participant.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Participant.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,19 @@\n+public class Participant\n+{\n+    public String ip;\n+    public String name;\n+    public int port;\n+\n+    public Participant(String name, String ip, int port)\n+    {\n+        this.ip = ip;\n+        this.name = name;\n+        this.port = port;\n+    }\n+\n+    public Participant(String name, String ip)\n+    {\n+        this.ip = ip;\n+        this.name = name;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "532f1728aead55a38c51379aa8a026fc2f7f241e",
    "filename": "ParticipantsMessage.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ParticipantsMessage.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ParticipantsMessage.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ParticipantsMessage.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "465cd27732d6ea73afdee9c4e53a5704ce46933d",
    "filename": "ParticipantsMessage.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ParticipantsMessage.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ParticipantsMessage.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ParticipantsMessage.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,15 @@\n+import java.util.*;\n+import java.net.*;\n+import java.io.*;\n+\n+// sent from one node to the joining node\n+public class ParticipantsMessage\n+{\n+    public LinkedList<Participant> participantList;\n+\n+    public ParticipantsMessage(LinkedList<Participant>\n+                               participantList)\n+    {\n+        this.participantList = participantList;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9da7d31836337cc17a9ee291746b09302306f68c",
    "filename": "Receiver.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Receiver.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Receiver.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Receiver.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "c21409b49a76d327cda08aba8a848919d02a0613",
    "filename": "Receiver.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Receiver.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Receiver.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Receiver.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,40 @@\n+import java.util.*;\n+import java.net.*;\n+import java.io.*;\n+\n+public class Receiver extends Thread implements Serializable\n+{\n+\n+    private ServerSocket receiverSock;\n+\n+    public Receiver()\n+    {\n+        try\n+        {\n+            receiverSock = new ServerSocket(0);\n+            ChatNode.self.port = receiverSock.getLocalPort();\n+            System.out.println(\"Receiver socket created on port \" + receiverSock.getLocalPort());\n+        }\n+        catch (IOException ex)\n+        {\n+            System.out.println(ex.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        while(true)\n+        {\n+            try\n+            {\n+                (new ReceiverWorker(receiverSock.accept())).start();\n+            }\n+            catch (IOException ex)\n+            {\n+                System.out.println(ex.toString());\n+            }\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "12845bae6a089df05a1d0a96519c241ec065f344",
    "filename": "ReceiverWorker.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ReceiverWorker.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ReceiverWorker.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ReceiverWorker.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "37fe96c0f6740b39cb1dc401a0dfc4fa2ad8bf46",
    "filename": "ReceiverWorker.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ReceiverWorker.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/ReceiverWorker.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/ReceiverWorker.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,73 @@\n+import java.util.*;\n+import java.net.*;\n+import java.io.*;\n+\n+public class ReceiverWorker extends Thread\n+{\n+    Socket peerConnection = null;\n+    ObjectInputStream readFromNet = null;\n+    ObjectOutputStream writeToNet = null;\n+    Object message = null;\n+\n+    public ReceiverWorker(Socket peerConnection)\n+    {\n+        this.peerConnection = peerConnection;\n+        try\n+        {\n+            readFromNet = new ObjectInputStream(peerConnection.getInputStream());\n+            writeToNet = new ObjectOutputStream(peerConnection.getOutputStream());\n+        }\n+        catch(IOException ex)\n+        {\n+            System.out.println(\"Message could not be read from obj stream\");\n+            System.exit(1);\n+        }\n+    }\n+        \n+    public void run()\n+    {\n+        try\n+        {\n+            message = readFromNet.readObject();\n+            \n+        }\n+        catch (Exception ex)\n+        {\n+            System.out.println(\"Message could not be read from obj stream\");\n+            System.exit(1);\n+        }\n+\n+        if(message instanceof JoinMessage)\n+        {\n+                try\n+                {\n+                    writeToNet.writeObject(new ParticipantsMessage(ChatNode.participantList));\n+                }\n+                catch (IOException ex)\n+                {\n+                    System.out.println(ex.toString());\n+                }\n+        }\n+        \n+        else if(message instanceof JoinedMessage)\n+        {\n+            JoinedMessage joined = (JoinedMessage) message;\n+            ChatNode.participantList.add(joined.newNode);\n+            System.out.println(joined.newNode.name + \" has joined!\");\n+        }\n+\n+        else if(message instanceof LeaveMessage)\n+        {\n+            LeaveMessage leave = (LeaveMessage) message;\n+            ChatNode.participantList.remove(leave.sender);\n+            System.out.println(leave.sender.name + \" has left!\");\n+        }\n+\n+        else if(message instanceof ChatMessage)\n+        {\n+            ChatMessage chat = (ChatMessage) message;\n+            System.out.println(chat.sender.name + \": \" + chat.message);\n+        }\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1467389eb5d74c96e961b0d230818a983a9be758",
    "filename": "Sender.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Sender.class",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Sender.class",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Sender.class?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4"
  },
  {
    "sha": "41fb0c6631f765b03655880e9f54314619fe2417",
    "filename": "Sender.java",
    "status": "added",
    "additions": 206,
    "deletions": 0,
    "changes": 206,
    "blob_url": "https://github.com/akb364/CS465/blob/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Sender.java",
    "raw_url": "https://github.com/akb364/CS465/raw/1d5c82dde96ae25a5d9b35338f2d24dea00696b4/Sender.java",
    "contents_url": "https://api.github.com/repos/akb364/CS465/contents/Sender.java?ref=1d5c82dde96ae25a5d9b35338f2d24dea00696b4",
    "patch": "@@ -0,0 +1,206 @@\n+import java.util.*;\n+import java.net.*;\n+import java.io.*;\n+import java.util.logging.*;\n+\n+\n+\n+// only one thread\n+// can ask to join or leave or send message\n+class Sender extends Thread implements Serializable\n+{\n+    private Participant self;\n+\n+    public Sender()\n+    {\n+      System.out.println(\"Got here\");\n+    }\n+    @Override\n+    public void run()\n+    {\n+      Scanner userInput = new Scanner(System.in);\n+      System.out.print(\"Enter your information: <Username> <IP>\");\n+      String inputLine = \"\";\n+      boolean hasJoined = false;\n+\n+      // loop - runs until SHUTDOWN\n+      while(true)\n+      {\n+          // get user input\n+          inputLine = userInput.nextLine();\n+          // switch statement\n+\n+              // if starts with JOIN\n+              if(inputLine.startsWith(\"JOIN\"))\n+              {\n+                if(hasJoined == true)\n+                {\n+                  System.err.println(\"You have already joined the chat..\");\n+                  continue;\n+                }\n+                String[] connectionInfo = inputLine.split(\"[]+\");\n+                String joinAddress = \"\";\n+                int joinPort = 0;\n+                String joinName = \"\";\n+                try\n+                {\n+                    joinName = connectionInfo[0];\n+                    joinAddress = connectionInfo[1];\n+                    joinPort = Integer.parseInt(connectionInfo[2]);\n+                }\n+                catch(ArrayIndexOutOfBoundsException ex)\n+                {\n+                System.out.println(ex.toString());\n+                }\n+                Socket joinConnection;\n+                try\n+                {\n+                  joinConnection = new Socket(joinAddress, joinPort);\n+                }\n+                catch (IOException ex)\n+                {\n+                  System.out.println(ex.toString());\n+\n+                  continue;\n+                }\n+\n+                //send join request\n+                try\n+                {\n+                  //open obj streams\n+                ObjectOutputStream  writeToNet = new ObjectOutputStream(joinConnection.getOutputStream());\n+                ObjectInputStream readFromNet = new ObjectInputStream(joinConnection.getInputStream());\n+\n+                  //send join request\n+                  writeToNet.writeObject(new JoinMessage(ChatNode.self));\n+\n+                  //done\n+                  joinConnection.close();\n+                }\n+                  catch (IOException ex)\n+                  {\n+                    System.out.println(ex.toString());\n+                  }\n+                  //send JOINED message to SUCCESSORs PREDECESSOR\n+                  Socket joinedConnection = null;\n+                  try\n+                  {\n+\n+                    for( int index = 0; index < ChatNode.participantList.size(); index++ )\n+                    {\n+                      joinedConnection = new Socket(ChatNode.self.ip, ChatNode.self.port);\n+                      ObjectOutputStream writeToNet = new ObjectOutputStream(joinedConnection.getOutputStream());\n+                      writeToNet.writeObject(new JoinMessage(ChatNode.self));\n+                      joinedConnection.close();\n+                    }\n+\n+\n+                  } catch (IOException ex) {\n+                    System.out.println(ex.toString());\n+                    continue;\n+                  }\n+                  hasJoined = true;\n+\n+              }\n+\n+              // if starts with LEAVE\n+              else if(inputLine.startsWith(\"LEAVE\") || inputLine.startsWith(\"SHUTDOWN\"))\n+              {\n+                if (hasJoined == false)\n+                {\n+                  System.err.println(\"You have not joined a chat yet ...\");\n+                  continue;\n+                }\n+\n+                // leaving chat\n+                LeaveMessage leaveMessage = new LeaveMessage(ChatNode.self);\n+                Socket leaveConnection = null;\n+\n+                try {\n+                  for( int index = 0; index < ChatNode.participantList.size(); index++ )\n+                  {\n+                    leaveConnection = new Socket(ChatNode.self.ip, ChatNode.self.port);\n+                    ObjectOutputStream writeToNet = new ObjectOutputStream(leaveConnection.getOutputStream());\n+                    writeToNet.writeObject(leaveMessage);\n+                    leaveConnection.close();\n+                  }\n+\n+                } catch (IOException ex) {\n+                  System.out.println(ex.toString());\n+                  continue;\n+                }\n+\n+                if (inputLine.startsWith(\"LEAVE\"))\n+                {\n+                  hasJoined = false;\n+                  System.out.println(\"Left chat\");\n+                }\n+                else\n+                {\n+                  // shut down\n+                  System.out.println(\"Shutting down\\n\");\n+                  System.exit(0);\n+                }\n+              }\n+\n+              // otherwise, send message\n+\n+              else\n+              {\n+                if(hasJoined = false)\n+                {\n+                  System.err.println(\"You need to join chat first!\");\n+                  continue;\n+                }\n+\n+                Socket messageConnection;\n+                Object[] noteMessageContent = new Object[2];\n+                noteMessageContent[0] = ChatNode.self;\n+                noteMessageContent[1] = ChatNode.self.name + \": \" + inputLine;\n+                ChatMessage noteMessage = new ChatMessage(ChatNode.self, inputLine);\n+                //send note message to this participant\n+                try{\n+                  for( int index = 0; index < ChatNode.participantList.size(); index++ )\n+                  {\n+                    messageConnection = new Socket(ChatNode.self.ip, ChatNode.self.port);\n+                    ObjectOutputStream writeToNet = new ObjectOutputStream(messageConnection.getOutputStream());\n+                    writeToNet.writeObject(noteMessage);\n+                    messageConnection.close();\n+                  }\n+\n+                } catch(IOException ex)\n+                {\n+                  System.out.println(ex.toString());\n+                }\n+              }\n+\n+        }\n+      }\n+\n+/*    public void connectToMesh(Participant meshParticipant)\n+    {\n+        try\n+        {\n+        // open connection with other node\n+        Socket joinConnection = new Socket(meshParticipant.ip, meshParticipant.port);\n+\n+        // send request message to node\n+        ObjectOutputStream writeToNet = new ObjectOutputStream(joinConnection.getOutputStream());\n+        ObjectInputStream readFromNet = new ObjectInputStream(joinConnection.getInputStream());\n+\n+        writeToNet.writeObject(new JoinMessage(self));\n+\n+        //Object incoming = readFromNet.readObject();\n+        participantList.add((Participant)readFromNet.readObject());\n+        }\n+        catch(IOException e)\n+        {\n+            System.out.println(\"hi\");\n+        }\n+        catch(ClassNotFoundException e)\n+        {\n+            System.out.println(\"hi\");\n+        }\n+    }*/\n+\n+}"
  }
]
