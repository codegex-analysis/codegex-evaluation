[
  {
    "sha": "5cfe3d4c7578149f92be21851d6acc7d90ff7653",
    "filename": "backend/src/main/java/gov/cdc/usds/simplereport/api/directives/DirectiveConfig.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/CDCgov/prime-simplereport/blob/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/java/gov/cdc/usds/simplereport/api/directives/DirectiveConfig.java",
    "raw_url": "https://github.com/CDCgov/prime-simplereport/raw/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/java/gov/cdc/usds/simplereport/api/directives/DirectiveConfig.java",
    "contents_url": "https://api.github.com/repos/CDCgov/prime-simplereport/contents/backend/src/main/java/gov/cdc/usds/simplereport/api/directives/DirectiveConfig.java?ref=497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d",
    "patch": "@@ -0,0 +1,16 @@\n+package gov.cdc.usds.simplereport.api.directives;\n+\n+import gov.cdc.usds.simplereport.config.authorization.UserAuthorizationVerifier;\n+import graphql.kickstart.tools.boot.SchemaDirective;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class DirectiveConfig {\n+  @Bean\n+  public SchemaDirective getRequiredPermissionsWiring(\n+      UserAuthorizationVerifier userAuthorizationVerifier) {\n+    return new SchemaDirective(\n+        \"requiredPermissions\", new RequiredPermissionsDirectiveWiring(userAuthorizationVerifier));\n+  }\n+}"
  },
  {
    "sha": "4bd0369c099bd267904f89811d094367ee2c4493",
    "filename": "backend/src/main/java/gov/cdc/usds/simplereport/api/directives/RequiredPermissionsDirectiveWiring.java",
    "status": "added",
    "additions": 181,
    "deletions": 0,
    "changes": 181,
    "blob_url": "https://github.com/CDCgov/prime-simplereport/blob/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/java/gov/cdc/usds/simplereport/api/directives/RequiredPermissionsDirectiveWiring.java",
    "raw_url": "https://github.com/CDCgov/prime-simplereport/raw/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/java/gov/cdc/usds/simplereport/api/directives/RequiredPermissionsDirectiveWiring.java",
    "contents_url": "https://api.github.com/repos/CDCgov/prime-simplereport/contents/backend/src/main/java/gov/cdc/usds/simplereport/api/directives/RequiredPermissionsDirectiveWiring.java?ref=497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d",
    "patch": "@@ -0,0 +1,181 @@\n+package gov.cdc.usds.simplereport.api.directives;\n+\n+import gov.cdc.usds.simplereport.api.model.errors.MissingPermissionsException;\n+import gov.cdc.usds.simplereport.config.authorization.UserAuthorizationVerifier;\n+import gov.cdc.usds.simplereport.config.authorization.UserPermission;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.FieldCoordinates;\n+import graphql.schema.GraphQLArgument;\n+import graphql.schema.GraphQLDirective;\n+import graphql.schema.GraphQLDirectiveContainer;\n+import graphql.schema.GraphQLFieldDefinition;\n+import graphql.schema.idl.SchemaDirectiveWiring;\n+import graphql.schema.idl.SchemaDirectiveWiringEnvironment;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+class RequiredPermissionsDirectiveWiring implements SchemaDirectiveWiring {\n+  private static final String DIRECTIVE_NAME = \"requiredPermissions\";\n+  private final Set<UserPermission> verifiedPermissions = new HashSet<>();\n+  private final Set<UserPermission> verifiedMissingPermissions = new HashSet<>();\n+  private final UserAuthorizationVerifier userAuthorizationVerifier;\n+  private Boolean userIsSiteAdmin;\n+\n+  RequiredPermissionsDirectiveWiring(UserAuthorizationVerifier userAuthorizationVerifier) {\n+    this.userAuthorizationVerifier = userAuthorizationVerifier;\n+  }\n+\n+  @Override\n+  public GraphQLArgument onArgument(SchemaDirectiveWiringEnvironment<GraphQLArgument> environment) {\n+    var directiveOnArg =\n+        RequiredPermissions.fromDirective(environment.getDirective(DIRECTIVE_NAME));\n+    var directiveOnType = requiredPermissionsDirective(environment.getElement().getType());\n+    var argument = environment.getElement();\n+\n+    var originalDataFetcher = environment.getFieldDataFetcher();\n+    DataFetcher<?> newDataFetcher =\n+        dfe -> {\n+          var argValue = dfe.getArgument(argument.getName());\n+          if ((argValue == null || Objects.equals(argValue, argument.getDefaultValue()))\n+              || (satisfiesRequiredPermissions(directiveOnArg)\n+                  && directiveOnType.map(this::satisfiesRequiredPermissions).orElse(true))) {\n+            return originalDataFetcher.get(dfe);\n+          }\n+\n+          throw new MissingPermissionsException();\n+        };\n+\n+    FieldCoordinates coordinates =\n+        FieldCoordinates.coordinates(\n+            environment.getFieldsContainer(), environment.getFieldDefinition());\n+    environment.getCodeRegistry().dataFetcher(coordinates, newDataFetcher);\n+\n+    return environment.getElement();\n+  }\n+\n+  @Override\n+  public GraphQLFieldDefinition onField(\n+      SchemaDirectiveWiringEnvironment<GraphQLFieldDefinition> environment) {\n+    var directive = RequiredPermissions.fromDirective(environment.getDirective(DIRECTIVE_NAME));\n+    var directiveOnParent = requiredPermissionsDirective(environment.getFieldsContainer());\n+\n+    var originalDataFetcher = environment.getFieldDataFetcher();\n+    DataFetcher<?> newDataFetcher =\n+        dfe -> {\n+          if (satisfiesRequiredPermissions(directive)\n+              && directiveOnParent.map(this::satisfiesRequiredPermissions).orElse(true)) {\n+            return originalDataFetcher.get(dfe);\n+          }\n+\n+          throw new MissingPermissionsException();\n+        };\n+\n+    FieldCoordinates coordinates =\n+        FieldCoordinates.coordinates(\n+            environment.getFieldsContainer(), environment.getFieldDefinition());\n+    environment.getCodeRegistry().dataFetcher(coordinates, newDataFetcher);\n+\n+    return environment.getElement();\n+  }\n+\n+  private boolean satisfiesRequiredPermissions(RequiredPermissions requiredPermissions) {\n+    return isUserSiteAdmin()\n+        || (requiredPermissions.allOf().map(this::userHasPermissions).orElse(true)\n+            && requiredPermissions\n+                .anyOf()\n+                .map(s -> s.stream().anyMatch(this::userHasPermission))\n+                .orElse(true));\n+  }\n+\n+  private boolean isUserSiteAdmin() {\n+    if (userIsSiteAdmin == null) {\n+      userIsSiteAdmin = userAuthorizationVerifier.userHasSiteAdminRole();\n+    }\n+\n+    return userIsSiteAdmin;\n+  }\n+\n+  private boolean userHasPermissions(Set<UserPermission> userPermissions) {\n+    if (verifiedPermissions.containsAll(userPermissions)) {\n+      return true;\n+    }\n+\n+    if (verifiedMissingPermissions.stream().anyMatch(userPermissions::contains)) {\n+      return false;\n+    }\n+\n+    if (userAuthorizationVerifier.userHasPermissions(userPermissions)) {\n+      verifiedPermissions.addAll(userPermissions);\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  private boolean userHasPermission(UserPermission userPermission) {\n+    if (verifiedPermissions.contains(userPermission)) {\n+      return true;\n+    }\n+\n+    if (verifiedMissingPermissions.contains(userPermission)) {\n+      return false;\n+    }\n+\n+    if (userAuthorizationVerifier.userHasPermission(userPermission)) {\n+      verifiedPermissions.add(userPermission);\n+      return true;\n+    }\n+\n+    verifiedMissingPermissions.add(userPermission);\n+    return false;\n+  }\n+\n+  private static Optional<RequiredPermissions> requiredPermissionsDirective(Object object) {\n+    return Optional.ofNullable(object)\n+        .filter(GraphQLDirectiveContainer.class::isInstance)\n+        .map(GraphQLDirectiveContainer.class::cast)\n+        .map(parent -> parent.getDirective(DIRECTIVE_NAME))\n+        .map(RequiredPermissions::fromDirective);\n+  }\n+\n+  private static class RequiredPermissions {\n+    private final Set<UserPermission> allOf;\n+    private final Set<UserPermission> anyOf;\n+\n+    private RequiredPermissions(Set<UserPermission> allOf, Set<UserPermission> anyOf) {\n+      this.allOf = allOf;\n+      this.anyOf = anyOf;\n+    }\n+\n+    Optional<Set<UserPermission>> allOf() {\n+      return Optional.ofNullable(allOf);\n+    }\n+\n+    Optional<Set<UserPermission>> anyOf() {\n+      return Optional.ofNullable(anyOf);\n+    }\n+\n+    static RequiredPermissions fromDirective(GraphQLDirective directive) {\n+      return new RequiredPermissions(\n+          fromStringListArgument(directive, \"allOf\"), fromStringListArgument(directive, \"anyOf\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static Set<UserPermission> fromStringListArgument(\n+        GraphQLDirective directive, String argumentName) {\n+      return Optional.ofNullable(directive.getArgument(argumentName))\n+          .map(GraphQLArgument::getValue)\n+          .map(v -> (Collection<String>) v)\n+          .map(\n+              permissions ->\n+                  permissions.stream()\n+                      .map(UserPermission::valueOf)\n+                      .collect(Collectors.toUnmodifiableSet()))\n+          .orElse(null);\n+    }\n+  }\n+}"
  },
  {
    "sha": "7d9e77f1af32745a09eb67d0d53eab8336584c0e",
    "filename": "backend/src/main/java/gov/cdc/usds/simplereport/api/model/errors/MissingPermissionsException.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/CDCgov/prime-simplereport/blob/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/java/gov/cdc/usds/simplereport/api/model/errors/MissingPermissionsException.java",
    "raw_url": "https://github.com/CDCgov/prime-simplereport/raw/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/java/gov/cdc/usds/simplereport/api/model/errors/MissingPermissionsException.java",
    "contents_url": "https://api.github.com/repos/CDCgov/prime-simplereport/contents/backend/src/main/java/gov/cdc/usds/simplereport/api/model/errors/MissingPermissionsException.java?ref=497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d",
    "patch": "@@ -0,0 +1,23 @@\n+package gov.cdc.usds.simplereport.api.model.errors;\n+\n+import graphql.ErrorClassification;\n+import graphql.ErrorType;\n+import graphql.GraphQLError;\n+import graphql.language.SourceLocation;\n+import java.util.List;\n+\n+public class MissingPermissionsException extends RuntimeException implements GraphQLError {\n+  public MissingPermissionsException() {\n+    super(\"Current user does not have permission for this action\", null, false, false);\n+  }\n+\n+  @Override\n+  public ErrorClassification getErrorType() {\n+    return ErrorType.ExecutionAborted;\n+  }\n+\n+  @Override\n+  public List<SourceLocation> getLocations() {\n+    return List.of();\n+  }\n+}"
  },
  {
    "sha": "cc7cfe69fc2b0b156e31a0ee96bed01bdeaeb5e2",
    "filename": "backend/src/main/resources/schema.graphqls",
    "status": "modified",
    "additions": 87,
    "deletions": 52,
    "changes": 139,
    "blob_url": "https://github.com/CDCgov/prime-simplereport/blob/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/resources/schema.graphqls",
    "raw_url": "https://github.com/CDCgov/prime-simplereport/raw/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/main/resources/schema.graphqls",
    "contents_url": "https://api.github.com/repos/CDCgov/prime-simplereport/contents/backend/src/main/resources/schema.graphqls?ref=497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d",
    "patch": "@@ -1,3 +1,8 @@\n+directive @requiredPermissions(\n+  anyOf: [String!],\n+  allOf: [String!]\n+) on FIELD_DEFINITION | OBJECT | ARGUMENT_DEFINITION\n+\n # java.util.Date implementation\n scalar DateTime\n # java.time.LocalDate\n@@ -52,33 +57,35 @@ type DeviceType {\n   loincCode: String\n   swabType: String\n }\n-type Patient {\n+\n+type Patient @requiredPermissions(anyOf: [\"SEARCH_PATIENTS\", \"READ_PATIENT_LIST\"]) {\n   internalId: ID\n   facility: Facility\n   lookupId: String\n   firstName: String\n   middleName: String\n   lastName: String\n   suffix: String\n-  race: String\n+  race: String @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n   birthDate: LocalDate\n-  gender: String\n-  ethnicity: String\n-  street: String\n-  streetTwo: String\n-  city: String\n-  county: String\n-  state: String\n-  zipCode: String\n-  telephone: String\n-  email: String\n-  role: String\n-  isDeleted: Boolean\n-  residentCongregateSetting: Boolean\n-  employedInHealthcare: Boolean\n-  lastTest: TestResult\n-  testResults: [TestResult!]!\n+  gender: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  ethnicity: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  street: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  streetTwo: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  city: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  county: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  state: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  zipCode: String  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  telephone: String @requiredPermissions(anyOf: [\"READ_PATIENT_LIST\", \"UPDATE_TEST\"])\n+  email: String @requiredPermissions(anyOf: [\"READ_PATIENT_LIST\", \"UPDATE_TEST\"])\n+  role: String @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  isDeleted: Boolean  @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  residentCongregateSetting: Boolean @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  employedInHealthcare: Boolean @requiredPermissions(allOf: [\"READ_PATIENT_LIST\"])\n+  lastTest: TestResult @requiredPermissions(anyOf: [\"READ_RESULT_LIST\", \"UPDATE_TEST\"])\n+  testResults: [TestResult!]! @requiredPermissions(allOf: [\"READ_RESULT_LIST\"])\n }\n+\n type Facility {\n   id: ID\n   name: String\n@@ -116,7 +123,7 @@ type Organization {\n   testingFacility: [Facility]\n }\n # When starting from the patient, take a more limited view\n-type PatientTestResult {\n+type PatientTestResult { # TODO this isn't used anywhere; should it be deleted?\n   internalId: ID\n   id: ID\n   dateTested: DateTime\n@@ -188,31 +195,39 @@ type PatientLink {\n }\n \n type Query {\n-  deviceType: [DeviceType]\n+  deviceType: [DeviceType] # TODO what permission is required here?\n   patients(\n     facilityId: ID\n     pageNumber: Int\n     pageSize: Int\n-    showDeleted: Boolean\n+    showDeleted: Boolean =  false @requiredPermissions(allOf: [\"READ_ARCHIVED_PATIENT_LIST\"])\n     namePrefixMatch: String\n   ): [Patient]\n   patientsCount(\n     facilityId: ID\n-    showDeleted: Boolean\n+    showDeleted: Boolean = false @requiredPermissions(allOf: [\"READ_ARCHIVED_PATIENT_LIST\"])\n     namePrefixMatch: String\n-  ): Int\n+  ): Int @requiredPermissions(anyOf: [\"SEARCH_PATIENTS\", \"READ_PATIENT_LIST\"])\n   patient(id: ID!): Patient\n   organization: Organization\n   organizations: [Organization]\n-  queue(facilityId: ID!): [TestOrder]\n-  testResults(facilityId: ID!, pageNumber: Int, pageSize: Int): [TestResult]\n-  testResultsCount(facilityId: ID!): Int\n-  testResult(id: ID!): TestResult\n-  users: [User]\n+  queue(\n+    facilityId: ID!\n+  ): [TestOrder] @requiredPermissions(anyOf: [\"START_TEST\", \"UPDATE_TEST\", \"SUBMIT_TEST\"])\n+  testResults(\n+    facilityId: ID!\n+    pageNumber: Int\n+    pageSize: Int\n+  ): [TestResult] @requiredPermissions(allOf: [\"READ_RESULT_LIST\"])\n+  testResultsCount(facilityId: ID!): Int @requiredPermissions(allOf: [\"READ_RESULT_LIST\"])\n+  testResult(id: ID!): TestResult @requiredPermissions(allOf: [\"READ_RESULT_LIST\"])\n+  users: [User] @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n   whoami: User!\n }\n type Mutation {\n-  uploadPatients(patientList: Upload!): String\n+  uploadPatients(\n+    patientList: Upload!\n+  ): String @requiredPermissions(allOf: [\"EDIT_PATIENT\"]) # TODO is this right?\n   updateFacility(\n     facilityId: ID!\n     testingFacilityName: String!\n@@ -241,7 +256,7 @@ type Mutation {\n     orderingProviderPhone: String\n     deviceTypes: [String]!\n     defaultDevice: String!\n-  ): String\n+  ): String @requiredPermissions(allOf: [\"EDIT_FACILITY\"])\n   addFacility(\n     testingFacilityName: String!\n     cliaNumber: String\n@@ -269,8 +284,10 @@ type Mutation {\n     orderingProviderPhone: String\n     deviceTypes: [String]!\n     defaultDevice: String!\n-  ): String\n-  updateOrganization(name: String!): String\n+  ): String @requiredPermissions(allOf: [\"EDIT_FACILITY\"])\n+  updateOrganization(\n+    name: String!\n+  ): String @requiredPermissions(allOf: [\"EDIT_ORGANIZATION\"])\n   createOrganization(\n     name: String!\n     externalId: String!\n@@ -309,30 +326,36 @@ type Mutation {\n     email: String!\n     organizationExternalId: String!\n     role: Role!\n-  ): User\n+  ): User @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n   addUserToCurrentOrg(\n     firstName: String\n     middleName: String\n     lastName: String!\n     suffix: String\n     email: String!\n     role: Role!\n-  ): User\n+  ): User @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n   updateUser(\n     id: ID!\n     firstName: String\n     middleName: String\n     lastName: String!\n     suffix: String\n-  ): User\n-  updateUserRole(id: ID!, role: Role!): Role\n+  ): User @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n+  updateUserRole(\n+    id: ID!\n+    role: Role!\n+  ): Role @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n   updateUserPrivileges(\n     id: ID!\n     accessAllFacilities: Boolean!\n     facilities: [ID!]\n     role: Role!\n-  ): User\n-  setUserIsDeleted(id: ID!, deleted: Boolean!): User\n+  ): User @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n+  setUserIsDeleted(\n+    id: ID!\n+    deleted: Boolean!\n+  ): User @requiredPermissions(allOf: [\"MANAGE_USERS\"])\n   addPatient(\n     facilityId: ID\n     lookupId: String\n@@ -355,7 +378,7 @@ type Mutation {\n     gender: String\n     residentCongregateSetting: Boolean!\n     employedInHealthcare: Boolean!\n-  ): Patient\n+  ): Patient @requiredPermissions(allOf: [\"EDIT_PATIENT\"])\n   updatePatient(\n     facilityId: ID\n     patientId: ID!\n@@ -379,21 +402,27 @@ type Mutation {\n     gender: String\n     residentCongregateSetting: Boolean!\n     employedInHealthcare: Boolean!\n-  ): Patient\n-  setPatientIsDeleted(id: ID!, deleted: Boolean!): Patient\n+  ): Patient @requiredPermissions(allOf: [\"EDIT_PATIENT\"])\n+  setPatientIsDeleted(\n+    id: ID!\n+    deleted: Boolean!\n+  ): Patient @requiredPermissions(allOf: [\"ARCHIVE_PATIENT\"])\n   addTestResult(\n     deviceId: String!\n     result: String!\n     patientId: ID!\n     dateTested: DateTime\n-  ): TestOrder\n+  ): TestOrder @requiredPermissions(allOf: [\"SUBMIT_TEST\"])\n   editQueueItem(\n     id: ID!\n     deviceId: String\n     result: String\n     dateTested: DateTime\n-  ): TestOrder\n-  correctTestMarkAsError(id: ID!, reason: String): TestResult\n+  ): TestOrder @requiredPermissions(allOf: [\"UPDATE_TEST\"])\n+  correctTestMarkAsError(\n+    id: ID!,\n+    reason: String\n+  ): TestResult @requiredPermissions(allOf: [\"UPDATE_TEST\"])\n   addPatientToQueue(\n     facilityId: ID!\n     patientId: ID!\n@@ -405,9 +434,11 @@ type Mutation {\n     priorTestResult: String\n     symptomOnset: LocalDate\n     noSymptoms: Boolean\n-  ): String\n-  removePatientFromQueue(patientId: ID!): String\n-  clearQueue: Int\n+  ): String @requiredPermissions(allOf: [\"START_TEST\"])\n+  removePatientFromQueue(\n+    patientId: ID!\n+  ): String @requiredPermissions(allOf: [\"UPDATE_TEST\"]) # TODO is this right?\n+  clearQueue: Int @requiredPermissions(allOf: [\"UPDATE_TEST\"]) # TODO is this right?\n   updateTimeOfTestQuestions(\n     patientId: ID!\n     pregnancy: String\n@@ -418,22 +449,26 @@ type Mutation {\n     priorTestResult: String\n     symptomOnset: LocalDate\n     noSymptoms: Boolean\n-  ): String\n+  ): String @requiredPermissions(allOf: [\"UPDATE_TEST\"])\n   createDeviceType(\n     name: String!\n     manufacturer: String!\n     model: String!\n     loincCode: String!\n     swabType: String!\n-  ): DeviceType\n+  ): DeviceType @requiredPermissions(allOf: [\"EDIT_FACILITY\"]) # TODO is this right?\n   updateDeviceType(\n     id: String!\n     name: String\n     manufacturer: String\n     model: String\n     loincCode: String\n     swabType: String\n-  ): DeviceType\n-  refreshPatientLink(internalId: String!): PatientLink\n-  sendPatientLinkSms(internalId: String!): String\n+  ): DeviceType @requiredPermissions(allOf: [\"EDIT_FACILITY\"]) # TODO is this right?\n+  refreshPatientLink(\n+    internalId: String!\n+  ): PatientLink @requiredPermissions(allOf: [\"UPDATE_TEST\"]) # TODO Is this deprecated?\n+  sendPatientLinkSms(\n+    internalId: String!\n+  ): String @requiredPermissions(allOf: [\"UPDATE_TEST\"])\n }"
  },
  {
    "sha": "cc71015e77b5ec7bedab45bd79925b039695d4c3",
    "filename": "backend/src/test/java/gov/cdc/usds/simplereport/api/PatientManagementTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/CDCgov/prime-simplereport/blob/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/test/java/gov/cdc/usds/simplereport/api/PatientManagementTest.java",
    "raw_url": "https://github.com/CDCgov/prime-simplereport/raw/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/test/java/gov/cdc/usds/simplereport/api/PatientManagementTest.java",
    "contents_url": "https://api.github.com/repos/CDCgov/prime-simplereport/contents/backend/src/test/java/gov/cdc/usds/simplereport/api/PatientManagementTest.java?ref=497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d",
    "patch": "@@ -7,12 +7,15 @@\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import gov.cdc.usds.simplereport.api.model.Role;\n+import gov.cdc.usds.simplereport.config.authorization.UserPermission;\n import gov.cdc.usds.simplereport.db.model.Facility;\n import gov.cdc.usds.simplereport.db.model.Organization;\n import gov.cdc.usds.simplereport.service.OrganizationService;\n import gov.cdc.usds.simplereport.test_util.TestDataFactory;\n import gov.cdc.usds.simplereport.test_util.TestUserIdentities;\n import java.io.IOException;\n+import java.util.EnumSet;\n+import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import java.util.UUID;\n@@ -351,6 +354,36 @@ void failsOnInvalidPhoneNumber() throws Exception {\n         Optional.of(\"[d] is not a valid phone number\"));\n   }\n \n+  @Test\n+  void queryingDeletedPatients_standardUser_fails() {\n+    useOrgUser();\n+    runQuery(\"deleted-person-query\", null, ACCESS_ERROR);\n+    assertLastAuditEntry(\n+        TestUserIdentities.STANDARD_USER,\n+        \"GetDeletedPatients\",\n+        EnumSet.of(\n+            UserPermission.READ_PATIENT_LIST,\n+            UserPermission.SEARCH_PATIENTS,\n+            UserPermission.READ_RESULT_LIST,\n+            UserPermission.EDIT_PATIENT,\n+            UserPermission.ARCHIVE_PATIENT,\n+            UserPermission.START_TEST,\n+            UserPermission.UPDATE_TEST,\n+            UserPermission.SUBMIT_TEST),\n+        List.of(\"patients\"));\n+  }\n+\n+  @Test\n+  void queryingDeletedPatients_admin_ok() {\n+    useOrgAdmin();\n+    runQuery(\"deleted-person-query\", null, null);\n+    assertLastAuditEntry(\n+        TestUserIdentities.ORG_ADMIN_USER,\n+        \"GetDeletedPatients\",\n+        EnumSet.allOf(UserPermission.class),\n+        List.of());\n+  }\n+\n   private JsonNode doCreateAndFetch(\n       String firstName,\n       String lastName,"
  },
  {
    "sha": "50b22ffd176a2c5b87c8d89fede8733835dcbaed",
    "filename": "backend/src/test/resources/deleted-person-query",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/CDCgov/prime-simplereport/blob/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/test/resources/deleted-person-query",
    "raw_url": "https://github.com/CDCgov/prime-simplereport/raw/497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d/backend/src/test/resources/deleted-person-query",
    "contents_url": "https://api.github.com/repos/CDCgov/prime-simplereport/contents/backend/src/test/resources/deleted-person-query?ref=497e4a3ba9d5ceb9c65e72c19b8105eab84eb76d",
    "patch": "@@ -0,0 +1,8 @@\n+query GetDeletedPatients {\n+  patients(showDeleted: true) {\n+    firstName\n+    lastName\n+    birthDate\n+    telephone\n+  }\n+}"
  }
]
