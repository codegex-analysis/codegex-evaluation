[
  {
    "sha": "d7e8d68c8e80be310fd21490b015e4e711cc3771",
    "filename": "src/main/resources/entry-point/async-event-handler/command-handlers-configuration.java.mustache",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/bancolombia/scaffold-clean-architecture/blob/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/command-handlers-configuration.java.mustache",
    "raw_url": "https://github.com/bancolombia/scaffold-clean-architecture/raw/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/command-handlers-configuration.java.mustache",
    "contents_url": "https://api.github.com/repos/bancolombia/scaffold-clean-architecture/contents/src/main/resources/entry-point/async-event-handler/command-handlers-configuration.java.mustache?ref=4e2bae8a97457d6d439ce961c7b4945b6ed931c2",
    "patch": "@@ -0,0 +1,65 @@\n+package {{package}}.events.convention;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.reactivecommons.async.api.DefaultCommandHandler;\n+import org.reactivecommons.async.api.HandlerRegistry;\n+import org.reactivecommons.async.api.handlers.CommandHandler;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+\n+import java.util.Map;\n+\n+\n+@Configuration\n+@RequiredArgsConstructor\n+@ComponentScan(\n+        basePackages = \"{{package}}.events.handlers\",\n+        includeFilters = {\n+                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = CommandHandler.class)\n+        })\n+public class CommandHandlersConfiguration {\n+\n+    private static final String COMMAND_EXECUTOR_SUFFIX = CommandHandler.class.getSimpleName();\n+    private static final String ILLEGAL_EXECUTOR_SUFFIX =\n+            String.format(\"All command executors must use '%s' suffix\", COMMAND_EXECUTOR_SUFFIX);\n+\n+    @Value(\"${spring.application.name}\")\n+    private String applicationName;\n+\n+    private final ApplicationContext applicationContext;\n+\n+    @Bean\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public HandlerRegistry commandExecutorsRegistry() {\n+        Map<String, CommandHandler> commandHandlers = applicationContext.getBeansOfType(CommandHandler.class);\n+        HandlerRegistry handlerRegistry = HandlerRegistry.register();\n+\n+        commandHandlers.entrySet().stream()\n+                .filter(this::isNotDefaultCommandHandler)\n+                .forEach(entry ->\n+                        handlerRegistry.handleCommand(getCommandName(entry.getKey()),\n+                                entry.getValue()));\n+\n+        return handlerRegistry;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private boolean isNotDefaultCommandHandler(Map.Entry<String, CommandHandler> entry) {\n+        return !(entry.getValue() instanceof DefaultCommandHandler);\n+    }\n+\n+    public String getCommandName(String executorName) {\n+        if (!executorName.endsWith(COMMAND_EXECUTOR_SUFFIX)) {\n+            throw new IllegalArgumentException(ILLEGAL_EXECUTOR_SUFFIX);\n+        }\n+\n+        String commandName = executorName.substring(0, executorName.indexOf(COMMAND_EXECUTOR_SUFFIX));\n+\n+        return applicationName + \".\" + commandName;\n+    }\n+\n+}"
  },
  {
    "sha": "20326565e006e732fdb140b0844f8d9846bcd672",
    "filename": "src/main/resources/entry-point/async-event-handler/definition.json",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/bancolombia/scaffold-clean-architecture/blob/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/definition.json",
    "raw_url": "https://github.com/bancolombia/scaffold-clean-architecture/raw/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/definition.json",
    "contents_url": "https://api.github.com/repos/bancolombia/scaffold-clean-architecture/contents/src/main/resources/entry-point/async-event-handler/definition.json?ref=4e2bae8a97457d6d439ce961c7b4945b6ed931c2",
    "patch": "@@ -7,6 +7,11 @@\n     \"entry-point/async-event-handler/events-handler.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/handlers/EventsHandler.java\",\n     \"entry-point/async-event-handler/commands-handler.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/handlers/CommandsHandler.java\",\n     \"entry-point/async-event-handler/queries-handler.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/handlers/QueriesHandler.java\",\n-    \"entry-point/async-event-handler/build.gradle.mustache\": \"infrastructure/entry-points/async-event-handler/build.gradle\"\n+    \"entry-point/async-event-handler/build.gradle.mustache\": \"infrastructure/entry-points/async-event-handler/build.gradle\",\n+    \"entry-point/async-event-handler/example-query-handler.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/handlers/ExampleConventionQueryHandler.java\",\n+    \"entry-point/async-event-handler/query-handlers-configuration.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/convention/QueryHandlersConfiguration.java\",\n+    \"entry-point/async-event-handler/command-handlers-configuration.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/convention/CommandHandlersConfiguration.java\",\n+    \"entry-point/async-event-handler/event-name.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/convention/EventName.java\",\n+    \"entry-point/async-event-handler/event-handlers-configuration.java.mustache\": \"infrastructure/entry-points/async-event-handler/src/main/java/{{packagePath}}/events/convention/EventHandlersConfiguration.java\"\n   }\n }"
  },
  {
    "sha": "59d1ecf34065185673af464262f98594b79e3d35",
    "filename": "src/main/resources/entry-point/async-event-handler/event-handlers-configuration.java.mustache",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/bancolombia/scaffold-clean-architecture/blob/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/event-handlers-configuration.java.mustache",
    "raw_url": "https://github.com/bancolombia/scaffold-clean-architecture/raw/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/event-handlers-configuration.java.mustache",
    "contents_url": "https://api.github.com/repos/bancolombia/scaffold-clean-architecture/contents/src/main/resources/entry-point/async-event-handler/event-handlers-configuration.java.mustache?ref=4e2bae8a97457d6d439ce961c7b4945b6ed931c2",
    "patch": "@@ -0,0 +1,60 @@\n+package {{package}}.events.convention;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.reactivecommons.async.api.HandlerRegistry;\n+import org.reactivecommons.async.api.handlers.EventHandler;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+import org.springframework.core.annotation.AnnotationUtils;\n+\n+import java.util.Map;\n+\n+\n+@Configuration\n+@RequiredArgsConstructor\n+@ComponentScan(\n+        basePackages = \"{{package}}.events.handlers\",\n+        includeFilters = {\n+                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = EventHandler.class)\n+        })\n+public class EventHandlersConfiguration {\n+\n+    private static final String EVENT_LISTENER_SUFFIX = EventHandler.class.getSimpleName();\n+    private static final String ILLEGAL_LISTENER_SUFFIX =\n+            String.format(\"All event listeners must use '%s' suffix\", EVENT_LISTENER_SUFFIX);\n+\n+    private final ApplicationContext applicationContext;\n+\n+    @Bean\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public HandlerRegistry eventListenersRegistry() {\n+        Map<String, EventHandler> eventHandlers = applicationContext.getBeansOfType(EventHandler.class);\n+        HandlerRegistry handlerRegistry = HandlerRegistry.register();\n+\n+        eventHandlers.forEach((eventHandlerName, eventHandler) ->\n+                handlerRegistry.listenEvent(getEventName(eventHandlerName, eventHandler),\n+                        eventHandler));\n+\n+        return handlerRegistry;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private String getEventName(String eventListenerName, EventHandler eventListener) {\n+        if (!eventListenerName.endsWith(EVENT_LISTENER_SUFFIX)) {\n+            throw new IllegalArgumentException(ILLEGAL_LISTENER_SUFFIX);\n+        }\n+\n+        EventName annotation = AnnotationUtils.findAnnotation(eventListener.getClass(), EventName.class);\n+\n+        if (annotation == null) {\n+            throw new IllegalArgumentException(eventListenerName + \" is not annotated with @\" +\n+                    EventName.class.getSimpleName());\n+        }\n+\n+        return annotation.value();\n+    }\n+\n+}"
  },
  {
    "sha": "074ebdce244fcf307b2c83fdc74e6898dc991449",
    "filename": "src/main/resources/entry-point/async-event-handler/event-name.java.mustache",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/bancolombia/scaffold-clean-architecture/blob/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/event-name.java.mustache",
    "raw_url": "https://github.com/bancolombia/scaffold-clean-architecture/raw/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/event-name.java.mustache",
    "contents_url": "https://api.github.com/repos/bancolombia/scaffold-clean-architecture/contents/src/main/resources/entry-point/async-event-handler/event-name.java.mustache?ref=4e2bae8a97457d6d439ce961c7b4945b6ed931c2",
    "patch": "@@ -0,0 +1,15 @@\n+package {{package}}.events.convention;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface EventName {\n+\n+    String value();\n+\n+}"
  },
  {
    "sha": "ca0e135126117bee66b5cb544c72b1ef2d2a8414",
    "filename": "src/main/resources/entry-point/async-event-handler/example-query-handler.java.mustache",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/bancolombia/scaffold-clean-architecture/blob/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/example-query-handler.java.mustache",
    "raw_url": "https://github.com/bancolombia/scaffold-clean-architecture/raw/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/example-query-handler.java.mustache",
    "contents_url": "https://api.github.com/repos/bancolombia/scaffold-clean-architecture/contents/src/main/resources/entry-point/async-event-handler/example-query-handler.java.mustache?ref=4e2bae8a97457d6d439ce961c7b4945b6ed931c2",
    "patch": "@@ -0,0 +1,15 @@\n+package {{package}}.events.handlers;\n+\n+import org.reactivecommons.async.api.handlers.QueryHandler;\n+import reactor.core.publisher.Mono;\n+\n+\n+// this registers a query with [appName].exampleConvention\n+public class ExampleConventionQueryHandler implements QueryHandler<String, Integer> {\n+\n+    @Override\n+    public Mono<String> handle(Integer message) {\n+        return Mono.just(\"Response for \" + message);\n+    }\n+\n+}"
  },
  {
    "sha": "cd0ac42aaa556659d2067ec2b3c9610b11357326",
    "filename": "src/main/resources/entry-point/async-event-handler/query-handlers-configuration.java.mustache",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/bancolombia/scaffold-clean-architecture/blob/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/query-handlers-configuration.java.mustache",
    "raw_url": "https://github.com/bancolombia/scaffold-clean-architecture/raw/4e2bae8a97457d6d439ce961c7b4945b6ed931c2/src/main/resources/entry-point/async-event-handler/query-handlers-configuration.java.mustache",
    "contents_url": "https://api.github.com/repos/bancolombia/scaffold-clean-architecture/contents/src/main/resources/entry-point/async-event-handler/query-handlers-configuration.java.mustache?ref=4e2bae8a97457d6d439ce961c7b4945b6ed931c2",
    "patch": "@@ -0,0 +1,65 @@\n+package {{package}}.events.convention;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.reactivecommons.async.api.DefaultQueryHandler;\n+import org.reactivecommons.async.api.HandlerRegistry;\n+import org.reactivecommons.async.api.handlers.QueryHandler;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+\n+import java.util.Map;\n+\n+\n+@Configuration\n+@RequiredArgsConstructor\n+@ComponentScan(\n+        basePackages = \"{{package}}.events.handlers\",\n+        includeFilters = {\n+                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = QueryHandler.class)\n+        })\n+public class QueryHandlersConfiguration {\n+\n+    private static final String QUERY_HANDLER_SUFFIX = QueryHandler.class.getSimpleName();\n+    private static final String ILLEGAL_HANDLER_SUFFIX =\n+            String.format(\"All query handlers must use '%s' suffix\", QUERY_HANDLER_SUFFIX);\n+\n+    @Value(\"${spring.application.name}\")\n+    private String applicationName;\n+\n+    private final ApplicationContext applicationContext;\n+\n+    @Bean\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public HandlerRegistry queryHandlersRegistry() {\n+        Map<String, QueryHandler> queryHandlers = applicationContext.getBeansOfType(QueryHandler.class);\n+        HandlerRegistry handlerRegistry = HandlerRegistry.register();\n+\n+        queryHandlers.entrySet().stream()\n+                .filter(this::isNotDefaultQueryHandler)\n+                .forEach(entry ->\n+                        handlerRegistry.serveQuery(getQueryResource(entry.getKey()),\n+                                entry.getValue()));\n+\n+        return handlerRegistry;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private boolean isNotDefaultQueryHandler(Map.Entry<String, QueryHandler> entry) {\n+        return !(entry.getValue() instanceof DefaultQueryHandler);\n+    }\n+\n+    private String getQueryResource(String handlerName) {\n+        if (!handlerName.endsWith(QUERY_HANDLER_SUFFIX)) {\n+            throw new IllegalArgumentException(ILLEGAL_HANDLER_SUFFIX);\n+        }\n+\n+        String queryName = handlerName.substring(0, handlerName.indexOf(QUERY_HANDLER_SUFFIX));\n+\n+        return applicationName + \".\" + queryName;\n+    }\n+\n+}"
  }
]
