[
  {
    "sha": "6029aab0efd25d9485c249a452126dfd610bb840",
    "filename": "language/src/main/java/fan/zhuyi/selfish/language/node/ContinuousExpressionNode.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/selfish-lang/selfish/blob/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/ContinuousExpressionNode.java",
    "raw_url": "https://github.com/selfish-lang/selfish/raw/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/ContinuousExpressionNode.java",
    "contents_url": "https://api.github.com/repos/selfish-lang/selfish/contents/language/src/main/java/fan/zhuyi/selfish/language/node/ContinuousExpressionNode.java?ref=f57f29a2238eb0a123da780dfa3df6701b1d6c68",
    "patch": "@@ -0,0 +1,14 @@\n+package fan.zhuyi.selfish.language.node;\n+\n+import com.oracle.truffle.api.source.SourceSection;\n+import fan.zhuyi.selfish.language.utils.SelfishProcess;\n+\n+\n+public class ContinuousExpressionNode extends EvalExpressionNode {\n+    private final boolean paralleled;\n+\n+    public ContinuousExpressionNode(SourceSection section, ExpressionNode[] nodes, SelfishProcess.IOPipe[] pipes, boolean background, boolean paralleled) {\n+        super(section, nodes, pipes, background);\n+        this.paralleled = paralleled;\n+    }\n+}"
  },
  {
    "sha": "561db4766aa0426f9b89ab00463dcb610885973d",
    "filename": "language/src/main/java/fan/zhuyi/selfish/language/node/EvalExpressionNode.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/selfish-lang/selfish/blob/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/EvalExpressionNode.java",
    "raw_url": "https://github.com/selfish-lang/selfish/raw/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/EvalExpressionNode.java",
    "contents_url": "https://api.github.com/repos/selfish-lang/selfish/contents/language/src/main/java/fan/zhuyi/selfish/language/node/EvalExpressionNode.java?ref=f57f29a2238eb0a123da780dfa3df6701b1d6c68",
    "patch": "@@ -0,0 +1,27 @@\n+package fan.zhuyi.selfish.language.node;\n+\n+import com.oracle.truffle.api.frame.VirtualFrame;\n+import com.oracle.truffle.api.source.SourceSection;\n+import fan.zhuyi.selfish.language.utils.SelfishProcess;\n+\n+public class EvalExpressionNode extends ExpressionNode {\n+    @Children\n+    protected final ExpressionNode[] nodes;\n+\n+    protected final SelfishProcess.IOPipe[] pipes;\n+\n+    protected final boolean background;\n+\n+    public EvalExpressionNode(SourceSection section, ExpressionNode[] nodes, SelfishProcess.IOPipe[] pipes, boolean background) {\n+        super(section);\n+        this.nodes = nodes;\n+        this.pipes = pipes;\n+        this.background = background;\n+    }\n+\n+    @Override\n+    public Object executeGeneric(VirtualFrame frame) {\n+        /// TODO: implement this\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "ce82e31cd2d914307c7c17003a057226dc91268e",
    "filename": "language/src/main/java/fan/zhuyi/selfish/language/node/ExpressionNode.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/selfish-lang/selfish/blob/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/ExpressionNode.java",
    "raw_url": "https://github.com/selfish-lang/selfish/raw/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/ExpressionNode.java",
    "contents_url": "https://api.github.com/repos/selfish-lang/selfish/contents/language/src/main/java/fan/zhuyi/selfish/language/node/ExpressionNode.java?ref=f57f29a2238eb0a123da780dfa3df6701b1d6c68",
    "patch": "@@ -6,13 +6,11 @@\n import com.oracle.truffle.api.nodes.Node;\n import com.oracle.truffle.api.source.SourceSection;\n \n-import java.io.FileDescriptor;\n \n @TypeSystemReference(SelfishTypes.class)\n public abstract class ExpressionNode extends Node {\n \n \n-\n     SourceSection sourceSection;\n \n     ExpressionNode(SourceSection section) {"
  },
  {
    "sha": "410c92c97c37740b3611203da388114f08b1d88c",
    "filename": "language/src/main/java/fan/zhuyi/selfish/language/node/PipelinedExpressionNode.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/selfish-lang/selfish/blob/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/PipelinedExpressionNode.java",
    "raw_url": "https://github.com/selfish-lang/selfish/raw/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/node/PipelinedExpressionNode.java",
    "contents_url": "https://api.github.com/repos/selfish-lang/selfish/contents/language/src/main/java/fan/zhuyi/selfish/language/node/PipelinedExpressionNode.java?ref=f57f29a2238eb0a123da780dfa3df6701b1d6c68",
    "patch": "@@ -0,0 +1,9 @@\n+package fan.zhuyi.selfish.language.node;\n+\n+import com.oracle.truffle.api.source.SourceSection;\n+\n+public class PipelinedExpressionNode extends EvalExpressionNode {\n+    public PipelinedExpressionNode(SourceSection section, ExpressionNode[] nodes, boolean background) {\n+        super(section, nodes, null, background);\n+    }\n+}"
  },
  {
    "sha": "4c8541b73766bc518dbaddfa764d4f17a373d7ab",
    "filename": "language/src/main/java/fan/zhuyi/selfish/language/syntax/SelfishParser.java",
    "status": "modified",
    "additions": 118,
    "deletions": 3,
    "changes": 121,
    "blob_url": "https://github.com/selfish-lang/selfish/blob/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/syntax/SelfishParser.java",
    "raw_url": "https://github.com/selfish-lang/selfish/raw/f57f29a2238eb0a123da780dfa3df6701b1d6c68/language/src/main/java/fan/zhuyi/selfish/language/syntax/SelfishParser.java",
    "contents_url": "https://api.github.com/repos/selfish-lang/selfish/contents/language/src/main/java/fan/zhuyi/selfish/language/syntax/SelfishParser.java?ref=f57f29a2238eb0a123da780dfa3df6701b1d6c68",
    "patch": "@@ -135,8 +135,9 @@ private void eatWhitespace() {\n             while (Character.isWhitespace(currentChar()) || currentChar() == '#') {\n                 if (currentChar() == '#') {\n                     moveNextLine();\n+                } else {\n+                    moveNextChar();\n                 }\n-                moveNextChar();\n             }\n         } catch (IndexOutOfBoundsException ignored) {\n         }\n@@ -386,7 +387,121 @@ private StringLiteralNode singleQuotedSubroutine() throws SelfishSyntaxError {\n         return new StringLiteralNode(source.createSection(start, offset - start), builder.toString());\n     }\n \n-    private ExpressionNode parseParenExpression() {\n+    private static final int EXPR_REDIRECT = -1;\n+    private static final int EXPR_ATOMIC = 0;\n+    private static final int EXPR_PIPELINE = 1;\n+    private static final int EXPR_CONTINUOUS = 2;\n+    private static final int EXPR_BACKGROUND = 3;\n+\n+    private final static class OperatorStack {\n+        private int[] data = new int[16];\n+        private int size = 0;\n+\n+        private void grow() {\n+            int[] newData = new int[data.length * 2];\n+            System.arraycopy(data, 0, newData, 0, data.length);\n+            data = newData;\n+        }\n+\n+        public int top() {\n+            return data[size - 1];\n+        }\n+\n+        public void push(int op) {\n+            if (size == data.length) grow();\n+            data[size] = op;\n+            size += 1;\n+        }\n+\n+        public int pop() {\n+            size--;\n+            return data[size];\n+        }\n+\n+        public boolean empty() {\n+            return size == 0;\n+        }\n+    }\n+\n+    private boolean eatWhitespaceChecked(boolean inParen) throws SelfishSyntaxError, IndexOutOfBoundsException {\n+        var continuousLine = false;\n+        while (Character.isWhitespace(currentChar()) || currentChar() == '#' || continuousLine) {\n+            if (currentChar() == '#') {\n+                moveNextLine();\n+                if (!inParen && !continuousLine) {\n+                    return true;\n+                }\n+                continuousLine = false;\n+                continue;\n+            } else if (!continuousLine && currentChar() == '\\\\') {\n+                continuousLine = true;\n+            } else if (currentChar() == '\\n') {\n+                if (!inParen && !continuousLine) {\n+                    moveNextChar();\n+                    return true;\n+                }\n+                continuousLine = false;\n+            } else if (!continuousLine && currentChar() == ')') {\n+                break;\n+            } else\n+                throw new SelfishSyntaxError(\"multiline symbol followed by extraneous character; \" +\n+                                             \"it can only be followed immediately by a new line or a comment.\");\n+            moveNextChar();\n+        }\n+        return false;\n+    }\n+\n+    public ExpressionNode parseExpressionTerm() throws SelfishSyntaxError, IndexOutOfBoundsException {\n+        if (currentChar() == '\\'' || currentChar() == '\\\"') return parseString();\n+        if (currentChar() == '(') return parseExpression(true);\n+        return parseBareword();\n+    }\n+\n+    public int parseExprOperator() throws SelfishSyntaxError {\n+        if (currentChar() == '>' || currentChar() == '<') return EXPR_REDIRECT;\n+        if (Character.isDigit(currentChar()) && offset < this.data.length() && (this.data.charAt(offset + 1) == '>' || this.data.charAt(offset + 1) == '<')) {\n+            return EXPR_REDIRECT;\n+        }\n+        if (currentChar() == '&') {\n+            var count = 0;\n+            while (currentChar() == '&') {\n+                count++;\n+                moveNextChar();\n+            }\n+            if (count == 1) return EXPR_BACKGROUND;\n+            if (count == 2) return EXPR_CONTINUOUS;\n+            throw new SelfishSyntaxError(\"unknown expression operator\");\n+        }\n+\n+        if (currentChar() == '|') {\n+            var count = 0;\n+            while (currentChar() == '|') {\n+                count++;\n+                moveNextChar();\n+            }\n+            if (count == 1) return EXPR_PIPELINE;\n+            throw new SelfishSyntaxError(\"unknown expression operator\");\n+        }\n+\n+\n+        return EXPR_ATOMIC;\n+\n+\n+    }\n+\n+    public ExpressionNode parseExpression(boolean inParen) throws SelfishSyntaxError {\n+        final ArrayList<ExpressionNode> terms = new ArrayList<>();\n+        final OperatorStack opStack = new OperatorStack();\n+        if (inParen) {\n+            opStack.push('(');\n+        }\n+        try {\n+            eatWhitespaceChecked(inParen);\n+            terms.add(parseExpressionTerm());\n+        } catch (IndexOutOfBoundsException exp) {\n+            // check whether the current expression is finished.\n+            exp.printStackTrace();\n+        }\n         return null;\n     }\n \n@@ -412,7 +527,7 @@ private StringNode doubleQuotedSubroutine(String type, int closeCond) throws Sel\n                             } else if (currentChar() == '$') {\n                                 state.submit();\n                                 moveNextChar();\n-                                state.submit(parseParenExpression());\n+                                state.submit(parseExpression(true));\n                                 noMove = true;\n                             } else {\n                                 state.getBuilder().append(currentChar());"
  }
]
