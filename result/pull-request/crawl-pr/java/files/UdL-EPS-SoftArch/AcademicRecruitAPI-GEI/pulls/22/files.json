[
  {
    "sha": "1c8ef0177ce117f8a18f54f032de1b1c0c0be42e",
    "filename": "src/main/java/cat/udl/eps/softarch/academicrecruit/config/WebSecurityConfig.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/blob/92d315815326d22facfae0ceec79aaffdee7ae3e/src/main/java/cat/udl/eps/softarch/academicrecruit/config/WebSecurityConfig.java",
    "raw_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/raw/92d315815326d22facfae0ceec79aaffdee7ae3e/src/main/java/cat/udl/eps/softarch/academicrecruit/config/WebSecurityConfig.java",
    "contents_url": "https://api.github.com/repos/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/contents/src/main/java/cat/udl/eps/softarch/academicrecruit/config/WebSecurityConfig.java?ref=92d315815326d22facfae0ceec79aaffdee7ae3e",
    "patch": "@@ -37,10 +37,15 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .antMatchers(HttpMethod.POST, \"/phases\").authenticated()\n                 .antMatchers(HttpMethod.GET, \"/phases/*\").authenticated()\n                 .antMatchers(HttpMethod.POST, \"/phases/*\").denyAll()\n+\n                 .antMatchers(HttpMethod.POST, \"/applicants\").authenticated()\n                 .antMatchers(HttpMethod.GET, \"/applicants/*\").authenticated()\n                 .antMatchers(HttpMethod.POST, \"/applicants/*\").denyAll()\n \n+                .antMatchers(HttpMethod.POST, \"/qualifications\").authenticated()\n+                .antMatchers(HttpMethod.GET, \"/qualifications/*\").authenticated()\n+                .antMatchers(HttpMethod.POST, \"/qualifications/*\").denyAll()\n+\n                 .antMatchers(HttpMethod.POST, \"/**/*\").authenticated()\n                 .antMatchers(HttpMethod.PUT, \"/**/*\").authenticated()\n                 .antMatchers(HttpMethod.PATCH, \"/**/*\").authenticated()"
  },
  {
    "sha": "676537c874da15414f1966af7adcd2227c2367bf",
    "filename": "src/main/java/cat/udl/eps/softarch/academicrecruit/domain/Qualification.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/blob/92d315815326d22facfae0ceec79aaffdee7ae3e/src/main/java/cat/udl/eps/softarch/academicrecruit/domain/Qualification.java",
    "raw_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/raw/92d315815326d22facfae0ceec79aaffdee7ae3e/src/main/java/cat/udl/eps/softarch/academicrecruit/domain/Qualification.java",
    "contents_url": "https://api.github.com/repos/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/contents/src/main/java/cat/udl/eps/softarch/academicrecruit/domain/Qualification.java?ref=92d315815326d22facfae0ceec79aaffdee7ae3e",
    "patch": "@@ -0,0 +1,24 @@\n+package cat.udl.eps.softarch.academicrecruit.domain;\n+\n+import javax.persistence.*;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Entity\n+@Data\n+@EqualsAndHashCode(callSuper = true)\n+public class Qualification extends UriEntity<Long>{\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    @Id\n+    private Long id;\n+    @Min(0)\n+    @Max(10)\n+    private Float mark;\n+    private String observation;\n+}"
  },
  {
    "sha": "995b9651cd3380656034de4927c20481d674bf87",
    "filename": "src/main/java/cat/udl/eps/softarch/academicrecruit/repository/QualificationRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/blob/92d315815326d22facfae0ceec79aaffdee7ae3e/src/main/java/cat/udl/eps/softarch/academicrecruit/repository/QualificationRepository.java",
    "raw_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/raw/92d315815326d22facfae0ceec79aaffdee7ae3e/src/main/java/cat/udl/eps/softarch/academicrecruit/repository/QualificationRepository.java",
    "contents_url": "https://api.github.com/repos/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/contents/src/main/java/cat/udl/eps/softarch/academicrecruit/repository/QualificationRepository.java?ref=92d315815326d22facfae0ceec79aaffdee7ae3e",
    "patch": "@@ -0,0 +1,14 @@\n+package cat.udl.eps.softarch.academicrecruit.repository;\n+\n+import cat.udl.eps.softarch.academicrecruit.domain.Qualification;\n+import cat.udl.eps.softarch.academicrecruit.domain.User;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n+\n+import java.util.List;\n+\n+@RepositoryRestResource\n+public interface QualificationRepository extends PagingAndSortingRepository<Qualification, Long> {\n+    List<Qualification> findByObservationContaining(@Param(\"observation\") String observation);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "eb7929ad9c62c52b993e3c1bb47322628693449e",
    "filename": "src/test/java/cat/udl/eps/softarch/academicrecruit/steps/QualificationStepsDefs.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/blob/92d315815326d22facfae0ceec79aaffdee7ae3e/src/test/java/cat/udl/eps/softarch/academicrecruit/steps/QualificationStepsDefs.java",
    "raw_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/raw/92d315815326d22facfae0ceec79aaffdee7ae3e/src/test/java/cat/udl/eps/softarch/academicrecruit/steps/QualificationStepsDefs.java",
    "contents_url": "https://api.github.com/repos/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/contents/src/test/java/cat/udl/eps/softarch/academicrecruit/steps/QualificationStepsDefs.java?ref=92d315815326d22facfae0ceec79aaffdee7ae3e",
    "patch": "@@ -0,0 +1,66 @@\n+package cat.udl.eps.softarch.academicrecruit.steps;\n+\n+import cat.udl.eps.softarch.academicrecruit.domain.Qualification;\n+import cat.udl.eps.softarch.academicrecruit.repository.QualificationRepository;\n+import io.cucumber.java.en.And;\n+import io.cucumber.java.en.When;\n+import org.json.JSONObject;\n+import org.springframework.http.MediaType;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class QualificationStepsDefs {\n+    final StepDefs stepDefs;\n+    final QualificationRepository qualificationRepository;\n+\n+    QualificationStepsDefs(StepDefs stepDefs, QualificationRepository qualificationRepository) {\n+        this.stepDefs = stepDefs;\n+        this.qualificationRepository = qualificationRepository;\n+    }\n+\n+    @When(\"I set a new qualification mark {string} and an observation {string}\")\n+    public void i_set_a_new_qualification_mark_and_an_observation(String mark, String observation) throws Exception {\n+        Qualification qualification = new Qualification();\n+        qualification.setMark(Float.parseFloat(mark));\n+        qualification.setObservation(observation);\n+\n+        stepDefs.result = stepDefs.mockMvc.perform(\n+                post(\"/qualifications\")\n+                        .contentType(MediaType.APPLICATION_JSON)\n+                        .content(new JSONObject(stepDefs.mapper.writeValueAsString(qualification)).toString())\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .with(AuthenticationStepDefs.authenticate()))\n+                .andDo(print());\n+    }\n+\n+    @And(\"I can check that the mark {string} and the observation is {string}\")\n+    public void i_can_check_that_the_mark_and_observation_is(String mark, String observation) throws Exception {\n+        List<Qualification> qualificationList = qualificationRepository.findByObservationContaining(observation);\n+\n+        stepDefs.result = stepDefs.mockMvc.perform(\n+                get(\"/qualifications/{id}\", qualificationList.get(0).getId())\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .with(AuthenticationStepDefs.authenticate()))\n+                .andDo(print())\n+                .andExpect(jsonPath(\"$.mark\", is(Double.parseDouble(mark))))\n+                .andExpect(jsonPath(\"$.observation\", is(observation)));\n+    }\n+\n+    @And(\"The mark with the observation {string} has not been created\")\n+    public void the_mark_with_the_observation_has_not_been_created(String observation) throws Exception {\n+        List<Qualification> qualificationList = qualificationRepository.findByObservationContaining(observation);\n+\n+        stepDefs.result = stepDefs.mockMvc.perform(\n+                get(\"/qualification\", qualificationList)\n+                        .accept(MediaType.APPLICATION_JSON)\n+                        .with(AuthenticationStepDefs.authenticate()))\n+                .andExpect(status().isNotFound());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "92558f86fa6aecb012e39441c77e57beb7ca954a",
    "filename": "src/test/resources/features/Qualification.feature",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/blob/92d315815326d22facfae0ceec79aaffdee7ae3e/src/test/resources/features/Qualification.feature",
    "raw_url": "https://github.com/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/raw/92d315815326d22facfae0ceec79aaffdee7ae3e/src/test/resources/features/Qualification.feature",
    "contents_url": "https://api.github.com/repos/UdL-EPS-SoftArch/AcademicRecruitAPI-GEI/contents/src/test/resources/features/Qualification.feature?ref=92d315815326d22facfae0ceec79aaffdee7ae3e",
    "patch": "@@ -0,0 +1,19 @@\n+Feature: Qualification\n+    In order to qualify applicants\n+    As a secretary of the committee\n+    I want to set qualification and observations\n+\n+    Background:\n+        Given There is a registered user with username \"secretary\" and password \"password\" and email \"email@gmail.com\" and name \"name\" and lastname \"lastname\" and dni \"12345678B\"\n+\n+    Scenario: Qualify an applicant\n+        Given I login as \"secretary\" with password \"password\"\n+        When I set a new qualification mark \"9.0\" and an observation \"excelent work\"\n+        Then The response code is 201\n+        And I can check that the mark \"9.0\" and the observation is \"excelent work\"\n+\n+    Scenario: Qualify an applicant without being logged as secretary\n+        Given I'm not logged in\n+        When I set a new qualification mark \"9.0\" and an observation \"excelent work\"\n+        Then The response code is 401\n+        And The mark with the observation \"excelent work\" has not been created\n\\ No newline at end of file"
  }
]
