[
  {
    "sha": "f76dd238ade08917e6712764a16a22005a50573d",
    "filename": ".gradle/6.7/fileChanges/last-build.bin",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/6.7/fileChanges/last-build.bin",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/6.7/fileChanges/last-build.bin",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/6.7/fileChanges/last-build.bin?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "120fa1f4e0f8e99df39eb8c326e0a477a13d9a4b",
    "filename": ".gradle/6.7/fileHashes/fileHashes.lock",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/6.7/fileHashes/fileHashes.lock",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/6.7/fileHashes/fileHashes.lock",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/6.7/fileHashes/fileHashes.lock?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": ".gradle/6.7/gc.properties",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/6.7/gc.properties",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/6.7/gc.properties",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/6.7/gc.properties?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "3f050973ebe9465add795aabcf5726108378f9f3",
    "filename": ".gradle/buildOutputCleanup/buildOutputCleanup.lock",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/buildOutputCleanup/buildOutputCleanup.lock",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/buildOutputCleanup/buildOutputCleanup.lock",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/buildOutputCleanup/buildOutputCleanup.lock?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "5ec5ce0b988026e0f77558408235dc81ca847dab",
    "filename": ".gradle/buildOutputCleanup/cache.properties",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/buildOutputCleanup/cache.properties",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/buildOutputCleanup/cache.properties",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/buildOutputCleanup/cache.properties?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,2 @@\n+#Sat Jan 23 15:30:04 MSK 2021\n+gradle.version=6.7"
  },
  {
    "sha": "9a524799b879dcdecd7b8bb53f17f4b909c84bad",
    "filename": ".gradle/checksums/checksums.lock",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/checksums/checksums.lock",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/checksums/checksums.lock",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/checksums/checksums.lock?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": ".gradle/configuration-cache/gc.properties",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/configuration-cache/gc.properties",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/configuration-cache/gc.properties",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/configuration-cache/gc.properties?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": ".gradle/vcs-1/gc.properties",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/vcs-1/gc.properties",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/.gradle/vcs-1/gc.properties",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/.gradle/vcs-1/gc.properties?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "8c23b782a9bfd2ba79f880f11fb428a81aa847da",
    "filename": "db/testDB.mv.db",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testDB.mv.db",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testDB.mv.db",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/db/testDB.mv.db?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "455bfa82415a5a37bf6daaedd0d95ee81f1f70dd",
    "filename": "db/testDB.trace.db",
    "status": "added",
    "additions": 3391,
    "deletions": 0,
    "changes": 3391,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testDB.trace.db",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testDB.trace.db",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/db/testDB.trace.db?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "fc380f1f48923a0c37a560ea22334a72964376b9",
    "filename": "db/testJUnit.mv.db",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testJUnit.mv.db",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testJUnit.mv.db",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/db/testJUnit.mv.db?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "b12adb3146ace5e5df2f6691201e6aeefa377c33",
    "filename": "db/testJUnit.trace.db",
    "status": "added",
    "additions": 1084,
    "deletions": 0,
    "changes": 1084,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testJUnit.trace.db",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/db/testJUnit.trace.db",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/db/testJUnit.trace.db?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,1084 @@\n+2020-12-09 13:34:05 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица \"USERS\" не найдена\n+Table \"USERS\" not found; SQL statement:\n+INSERT INTO users (name, second_name) VALUES('a','b') [42102-200]\n+2020-12-09 13:34:05 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица \"USERS\" не найдена\n+Table \"USERS\" not found; SQL statement:\n+INSERT INTO users (name, second_name) VALUES('a','b') [42102-200]\n+2020-12-09 13:37:16 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.runSync(ConnectJob.java:98)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.DataSourceHandler.connectToDataSource(DataSourceHandler.java:106)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.UIServiceConnectionsImpl.initConnection(UIServiceConnectionsImpl.java:65)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDataSource.initializeNode(DBNDataSource.java:157)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:203)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n+\tat org.jkiss.dbeaver.model.navigator.DBNUtils.getNodeChildrenFiltered(DBNUtils.java:70)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:49)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 13:39:46 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица \"USERS\" не найдена\n+Table \"USERS\" not found; SQL statement:\n+CREATE UNIQUE INDEX PRIMARY_KEY_4 ON PUBLIC.USERS (USER_ID) [42102-200]\n+2020-12-09 13:41:09 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL \"CREATE TABLE USERS (\n+\tUSER_ID SERIAL PRIMARY KEY,\n+\tNAME VARCHAR(128) NOT NULL,\n+\tSECOND_NAME VARCHAR(128) NOT NULL,\n+)[*]\n+\"; ожидалось \"identifier\"\n+Syntax error in SQL statement \"CREATE TABLE USERS (\n+\tUSER_ID SERIAL PRIMARY KEY,\n+\tNAME VARCHAR(128) NOT NULL,\n+\tSECOND_NAME VARCHAR(128) NOT NULL,\n+)[*]\n+\"; expected \"identifier\"; SQL statement:\n+CREATE TABLE users (\n+\tUSER_ID SERIAL PRIMARY KEY,\n+\tNAME VARCHAR(128) NOT NULL,\n+\tSECOND_NAME VARCHAR(128) NOT NULL,\n+)\n+ [42001-200]\n+2020-12-09 13:41:21 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL \"CREATE TABLE USERS (\n+\tUSER_ID SERIAL PRIMARY KEY,\n+\tNAME VARCHAR(128) NOT NULL,\n+\tSECOND_NAME VARCHAR(128) NOT NULL,\n+)[*]\"; ожидалось \"identifier\"\n+Syntax error in SQL statement \"CREATE TABLE USERS (\n+\tUSER_ID SERIAL PRIMARY KEY,\n+\tNAME VARCHAR(128) NOT NULL,\n+\tSECOND_NAME VARCHAR(128) NOT NULL,\n+)[*]\"; expected \"identifier\"; SQL statement:\n+CREATE TABLE users (\n+\tUSER_ID SERIAL PRIMARY KEY,\n+\tNAME VARCHAR(128) NOT NULL,\n+\tSECOND_NAME VARCHAR(128) NOT NULL,\n+) [42001-200]\n+2020-12-09 13:49:19 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 13:51:04 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 13:51:20 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:05:05 database: flush\n+org.h2.message.DbException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.get(DbException.java:194)\n+\tat org.h2.message.DbException.convert(DbException.java:347)\n+\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n+\tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n+\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:402)\n+\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)\n+\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)\n+\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)\n+\tat org.h2.engine.Database.getPageStore(Database.java:2659)\n+\tat org.h2.engine.Database.open(Database.java:675)\n+\tat org.h2.engine.Database.openDatabase(Database.java:307)\n+\tat org.h2.engine.Database.<init>(Database.java:301)\n+\tat org.h2.engine.Engine.openSession(Engine.java:74)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677)\n+\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:251)\n+\tat project.data.JDBCDataStorage.getConnection(JDBCDataStorage.java:31)\n+\tat project.data.JDBCDataStorage.addUser(JDBCDataStorage.java:138)\n+\tat project.data.AbstractDataStorageTest.addUser(AbstractDataStorageTest.java:25)\n+\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n+\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n+\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n+\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n+\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n+\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n+\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n+\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n+\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n+\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n+\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n+\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n+\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n+\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n+\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n+\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n+\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n+\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n+\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n+\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n+\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n+\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n+\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n+Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 50 more\n+Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\n+\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n+\tat org.h2.mvstore.FileStore.open(FileStore.java:172)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:381)\n+\t... 44 more\n+2020-12-09 14:06:00 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:07:41 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:09:31 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:24:09 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:28:46 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:29:26 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:38:00 jdbc[4]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:39:19 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:39:52 jdbc[4]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:40:37 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:41:36 jdbc[4]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:42:29 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:42:49 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:42:54 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:45:30 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:45:54 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:48:00 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-09 14:48:37 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-09 14:49:24 database: flush\n+org.h2.message.DbException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.get(DbException.java:194)\n+\tat org.h2.message.DbException.convert(DbException.java:347)\n+\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n+\tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n+\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:402)\n+\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)\n+\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)\n+\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)\n+\tat org.h2.engine.Database.getPageStore(Database.java:2659)\n+\tat org.h2.engine.Database.open(Database.java:675)\n+\tat org.h2.engine.Database.openDatabase(Database.java:307)\n+\tat org.h2.engine.Database.<init>(Database.java:301)\n+\tat org.h2.engine.Engine.openSession(Engine.java:74)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677)\n+\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:251)\n+\tat project.data.JDBCDataStorage.getConnection(JDBCDataStorage.java:31)\n+\tat project.data.JDBCDataStorage.addUser(JDBCDataStorage.java:138)\n+\tat project.data.AbstractDataStorageTest.addUser(AbstractDataStorageTest.java:31)\n+\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n+\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n+\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n+\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n+\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n+\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n+\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n+\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n+\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n+\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n+\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n+\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n+\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n+\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n+\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n+\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n+\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n+\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n+\tat org.junit.runners.Suite.runChild(Suite.java:128)\n+\tat org.junit.runners.Suite.runChild(Suite.java:27)\n+\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n+\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n+\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n+\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n+\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n+\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n+\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n+\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n+\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n+\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n+\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n+Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 58 more\n+Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\n+\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n+\tat org.h2.mvstore.FileStore.open(FileStore.java:172)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:381)\n+\t... 52 more\n+2020-12-09 14:49:34 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientException: Объект уже закрыт\n+The object is already closed [90007-200]\n+2020-12-10 14:17:29 database: flush\n+org.h2.message.DbException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.get(DbException.java:194)\n+\tat org.h2.message.DbException.convert(DbException.java:347)\n+\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n+\tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n+\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:402)\n+\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)\n+\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)\n+\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)\n+\tat org.h2.engine.Database.getPageStore(Database.java:2659)\n+\tat org.h2.engine.Database.open(Database.java:675)\n+\tat org.h2.engine.Database.openDatabase(Database.java:307)\n+\tat org.h2.engine.Database.<init>(Database.java:301)\n+\tat org.h2.engine.Engine.openSession(Engine.java:74)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.lambda$0(JDBCDataSource.java:177)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.openConnection(JDBCDataSource.java:196)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:124)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 42 more\n+Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\n+\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n+\tat org.h2.mvstore.FileStore.open(FileStore.java:172)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:381)\n+\t... 36 more\n+2020-12-10 14:17:34 database: flush\n+org.h2.message.DbException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.get(DbException.java:194)\n+\tat org.h2.message.DbException.convert(DbException.java:347)\n+\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n+\tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n+\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:402)\n+\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)\n+\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)\n+\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)\n+\tat org.h2.engine.Database.getPageStore(Database.java:2659)\n+\tat org.h2.engine.Database.open(Database.java:675)\n+\tat org.h2.engine.Database.openDatabase(Database.java:307)\n+\tat org.h2.engine.Database.<init>(Database.java:301)\n+\tat org.h2.engine.Engine.openSession(Engine.java:74)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.lambda$0(JDBCDataSource.java:177)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.openConnection(JDBCDataSource.java:196)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:124)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.runSync(ConnectJob.java:98)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.DataSourceHandler.connectToDataSource(DataSourceHandler.java:106)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.UIServiceConnectionsImpl.initConnection(UIServiceConnectionsImpl.java:65)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDataSource.initializeNode(DBNDataSource.java:157)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:203)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n+\tat org.jkiss.dbeaver.model.navigator.DBNUtils.getNodeChildrenFiltered(DBNUtils.java:70)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:49)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 49 more\n+Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\n+\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n+\tat org.h2.mvstore.FileStore.open(FileStore.java:172)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:381)\n+\t... 43 more\n+2020-12-10 14:17:35 database: flush\n+org.h2.message.DbException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.get(DbException.java:194)\n+\tat org.h2.message.DbException.convert(DbException.java:347)\n+\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n+\tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n+\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:402)\n+\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)\n+\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)\n+\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)\n+\tat org.h2.engine.Database.getPageStore(Database.java:2659)\n+\tat org.h2.engine.Database.open(Database.java:675)\n+\tat org.h2.engine.Database.openDatabase(Database.java:307)\n+\tat org.h2.engine.Database.<init>(Database.java:301)\n+\tat org.h2.engine.Engine.openSession(Engine.java:74)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.lambda$0(JDBCDataSource.java:177)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.openConnection(JDBCDataSource.java:196)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:124)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 42 more\n+Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\n+\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n+\tat org.h2.mvstore.FileStore.open(FileStore.java:172)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:381)\n+\t... 36 more\n+2020-12-10 14:17:39 database: flush\n+org.h2.message.DbException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.get(DbException.java:194)\n+\tat org.h2.message.DbException.convert(DbException.java:347)\n+\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n+\tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n+\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:402)\n+\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)\n+\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)\n+\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)\n+\tat org.h2.engine.Database.getPageStore(Database.java:2659)\n+\tat org.h2.engine.Database.open(Database.java:675)\n+\tat org.h2.engine.Database.openDatabase(Database.java:307)\n+\tat org.h2.engine.Database.<init>(Database.java:301)\n+\tat org.h2.engine.Engine.openSession(Engine.java:74)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.lambda$0(JDBCDataSource.java:177)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.openConnection(JDBCDataSource.java:196)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:124)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Внутренняя ошибка: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\"\n+General error: \"java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\" [50000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 42 more\n+Caused by: java.lang.IllegalStateException: The file is locked: nio:/home/ilia/home/IliaLessons/db/testJUnit.mv.db [1.4.200/7]\n+\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n+\tat org.h2.mvstore.FileStore.open(FileStore.java:172)\n+\tat org.h2.mvstore.MVStore.<init>(MVStore.java:381)\n+\t... 36 more\n+2020-12-10 14:17:47 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-10 14:30:30 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2020-12-10 14:32:41 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-23 17:46:09 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-23 17:48:11 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-23 17:58:49 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-23 18:21:46 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.invalidateContext(JDBCExecutionContext.java:237)\n+\tat org.jkiss.dbeaver.runtime.jobs.InvalidateJob.invalidateDataSource(InvalidateJob.java:145)\n+\tat org.jkiss.dbeaver.runtime.jobs.InvalidateJob.run(InvalidateJob.java:91)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-23 18:50:54 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-23 19:32:48 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)\n+\tat org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-24 13:02:52 database: wrong user or password; user: \"USER\"\n+org.h2.message.DbException: Неверное имя пользователя или пароль\n+Wrong user name or password [28000-200]\n+\tat org.h2.message.DbException.get(DbException.java:205)\n+\tat org.h2.message.DbException.get(DbException.java:181)\n+\tat org.h2.message.DbException.get(DbException.java:170)\n+\tat org.h2.engine.Engine.openSession(Engine.java:131)\n+\tat org.h2.engine.Engine.openSession(Engine.java:192)\n+\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n+\tat org.h2.engine.Engine.createSession(Engine.java:166)\n+\tat org.h2.engine.Engine.createSession(Engine.java:29)\n+\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n+\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n+\tat org.h2.Driver.connect(Driver.java:69)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.lambda$0(JDBCDataSource.java:177)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.openConnection(JDBCDataSource.java:196)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:135)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectionTestJob.run(ConnectionTestJob.java:103)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Неверное имя пользователя или пароль\n+Wrong user name or password [28000-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:461)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\t... 29 more\n+2021-01-24 13:03:29 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectionTestJob.run(ConnectionTestJob.java:103)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-24 13:03:43 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.runSync(ConnectJob.java:98)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.DataSourceHandler.connectToDataSource(DataSourceHandler.java:106)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.UIServiceConnectionsImpl.initConnection(UIServiceConnectionsImpl.java:65)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDataSource.initializeNode(DBNDataSource.java:157)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:203)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n+\tat org.jkiss.dbeaver.model.navigator.DBNUtils.getNodeChildrenFiltered(DBNUtils.java:70)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:49)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-24 13:03:56 jdbc[4]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.runSync(ConnectJob.java:98)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.DataSourceHandler.connectToDataSource(DataSourceHandler.java:106)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.UIServiceConnectionsImpl.initConnection(UIServiceConnectionsImpl.java:65)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDataSource.initializeNode(DBNDataSource.java:157)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:203)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n+\tat org.jkiss.dbeaver.model.navigator.DBNUtils.getNodeChildrenFiltered(DBNUtils.java:70)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:49)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-01-24 13:14:33 jdbc[3]: exception\n+org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте \";DB_CLOSE_ON_EXIT=FALSE\" в URL)\n+Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT=FALSE\" to the db URL) [90121-200]\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n+\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n+\tat org.h2.message.DbException.get(DbException.java:205)\n+\tat org.h2.message.DbException.get(DbException.java:181)\n+\tat org.h2.message.DbException.get(DbException.java:170)\n+\tat org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1514)\n+\tat org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1490)\n+\tat org.h2.jdbc.JdbcConnection.createStatement(JdbcConnection.java:265)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCConnectionImpl.createStatement(JDBCConnectionImpl.java:236)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCConnectionImpl.createStatement(JDBCConnectionImpl.java:1)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCUtils.executeStatement(JDBCUtils.java:598)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.shutdown(GenericDataSource.java:263)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.disconnect(DataSourceDescriptor.java:1013)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.disconnect(DataSourceDescriptor.java:986)\n+\tat org.jkiss.dbeaver.registry.DataSourceRegistry$DisconnectTask.run(DataSourceRegistry.java:882)\n+\tat org.jkiss.dbeaver.utils.RuntimeUtils$MonitoringTask.run(RuntimeUtils.java:309)\n+\tat org.jkiss.dbeaver.utils.RuntimeUtils$1.run(RuntimeUtils.java:206)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n+2021-02-04 17:23:09 jdbc[3]: exception\n+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.\n+\tat org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:175)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:138)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)\n+\tat org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)\n+\tat org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:107)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)\n+\tat org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)\n+\tat org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)\n+\tat org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:887)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)\n+\tat org.jkiss.dbeaver.runtime.jobs.ConnectJob.runSync(ConnectJob.java:98)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.DataSourceHandler.connectToDataSource(DataSourceHandler.java:105)\n+\tat org.jkiss.dbeaver.ui.actions.datasource.UIServiceConnectionsImpl.initConnection(UIServiceConnectionsImpl.java:65)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDataSource.initializeNode(DBNDataSource.java:157)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:203)\n+\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n+\tat org.jkiss.dbeaver.model.navigator.DBNUtils.getNodeChildrenFiltered(DBNUtils.java:70)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:49)\n+\tat org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:1)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)\n+\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)\n+\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)\n+\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)"
  },
  {
    "sha": "4af37f365327ac66261330aa24a4cb983c6fa258",
    "filename": "lib/h2-1.4.200.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/lib/h2-1.4.200.jar",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/lib/h2-1.4.200.jar",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/lib/h2-1.4.200.jar?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35"
  },
  {
    "sha": "6bf8e5e7e21fd3a70d7e2cd1d4401bf7ba225f20",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/pom.xml",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/pom.xml",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/pom.xml?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -15,6 +15,23 @@\n             <version>4.12</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>1.4.200</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+            <version>2.3.7.RELEASE</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+            <version>2.3.7.RELEASE</version>\n+        </dependency>\n+\n+\n     </dependencies>\n     <build>\n         <plugins>"
  },
  {
    "sha": "94b58ef70fcb7aec07348b11a950b94f84d12f76",
    "filename": "src/main/java/multithreading/project/Client.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/Client.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/Client.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/multithreading/project/Client.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,12 @@\n+package multithreading.project;\n+\n+import java.io.IOException;\n+\n+public class Client {\n+    public static String IP_ADDRESS = \"localhost\";\n+    public static int PORT = 8080;\n+\n+    public static void main(String[] args) throws IOException {\n+        new ClientAccess(IP_ADDRESS, PORT);\n+    }\n+}"
  },
  {
    "sha": "153e02d86224ac5a75a1d141526e272d91a5d7f8",
    "filename": "src/main/java/multithreading/project/ClientAccess.java",
    "status": "added",
    "additions": 196,
    "deletions": 0,
    "changes": 196,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/ClientAccess.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/ClientAccess.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/multithreading/project/ClientAccess.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,196 @@\n+package multithreading.project;\n+\n+import javax.swing.plaf.nimbus.AbstractRegionPainter;\n+import java.io.*;\n+import java.net.Socket;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ClientAccess {\n+    private Socket socket;\n+    private BufferedReader reader;\n+    private BufferedReader in;\n+    private BufferedWriter out;\n+\n+    private Map<String, String> data;\n+\n+    private String address;\n+    private int port;\n+\n+    private String nickName;\n+    private String sex;\n+    private String position;\n+    private String salary;\n+\n+\n+    public ClientAccess(String ipAddress, int port) throws IOException {\n+        this.address = ipAddress;\n+        this.port = port;\n+        try {\n+            this.socket = new Socket(ipAddress, port);\n+        } catch (IOException e) {\n+            System.err.println(\"Socket failed\");\n+        }\n+        try {\n+            reader = new BufferedReader(new InputStreamReader(System.in));\n+            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+            out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n+            data = updateData();\n+\n+            new SendUpdate().start();\n+            new AcceptUpdate().start();\n+        } catch (IOException e) {\n+\n+        }\n+    }\n+\n+    private void updateParameter(String key, String value) {\n+        if (data.containsKey(key)) data.put(key, value);\n+    }\n+\n+    private String getKey() throws IOException {\n+        String key;\n+        System.out.println(\"Enter kye: \");\n+        key = reader.readLine();\n+        return key;\n+    }\n+\n+    private String getValue() throws IOException {\n+        String value;\n+        System.out.println(\"Enter value: \");\n+        value = reader.readLine();\n+        return value;\n+    }\n+\n+    private void updateAllParameters(Map<String, String> data) {\n+        this.data = data;\n+    }\n+\n+    private Map<String, String> updateData() {\n+        Map<String, String> map = new HashMap<>();\n+        this.pressNick();\n+        this.pressSex();\n+        this.pressPosition();\n+        this.pressSalary();\n+        map.put(\"nickName\", nickName);\n+        map.put(\"sex\", sex);\n+        map.put(\"position\", position);\n+        map.put(\"salary\", salary);\n+        return map;\n+    }\n+\n+\n+    private void pressNick() {\n+        System.out.println(\"Press your nick: \");\n+        try {\n+            nickName = reader.readLine();\n+            out.write(\"Hello \" + nickName + \"\\n\");\n+            out.flush();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void pressSex() {\n+        System.out.println(\"Press your sex: \");\n+        try {\n+            sex = reader.readLine();\n+            out.write(\"Your sex: \" + sex + \"\\n\");\n+            out.flush();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void pressPosition() {\n+        System.out.println(\"Press your position: \");\n+        try {\n+            position = reader.readLine();\n+            out.write(\"Your position: \" + position + \"\\n\");\n+            out.flush();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void pressSalary() {\n+        System.out.println(\"Press your salary: \");\n+        try {\n+            salary = reader.readLine();\n+            out.write(\"Your salary: \" + salary + \"\\n\");\n+            out.flush();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void downService() {\n+        try {\n+            if (!socket.isClosed()) {\n+                socket.close();\n+                in.close();\n+                out.close();\n+            }\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+\n+    private class SendUpdate extends Thread {\n+        private boolean isOpen;\n+\n+        @Override\n+        public void run() {\n+            while (isOpen) {\n+                String word;\n+                try {\n+                    word = reader.readLine();\n+                    switch (word.toLowerCase().trim()) {\n+                        case \"stop\":\n+                            isOpen = false;\n+                            out.write(\"Stop!\\n\");\n+                            ClientAccess.this.downService();\n+                            break;\n+                        case \"update\":\n+                            updateParameter(getKey(), getValue());\n+                            out.write(data);\n+                            break;\n+                        case \"all\":\n+                            updateAllParameters(updateData());\n+                            out.write(data);\n+                            break;\n+                        default:\n+                            System.out.println(\"Unknown command\");\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    private class AcceptUpdate extends Thread {\n+\n+        @Override\n+        public void run() {\n+            while (true) {\n+                String str;\n+                try {\n+                    str = in.readLine();\n+                    if (str.equalsIgnoreCase(\"stop\")) {\n+                        ClientAccess.this.downService();\n+                        break;\n+                    } else {\n+                        out.write(data);\n+                    }\n+                    out.flush();\n+                } catch (IOException e) {\n+                    ClientAccess.this.downService();\n+                }\n+            }\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "1aae8fc3129e9a7a91919afa4795fef25eff9b8f",
    "filename": "src/main/java/multithreading/project/Server.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/Server.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/Server.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/multithreading/project/Server.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,32 @@\n+package multithreading.project;\n+\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Server {\n+    private static final int PORT = 8080;\n+    public static List<ServerAccess> list = new ArrayList<>();\n+\n+    public static void main(String[] args) {\n+        try {\n+            ServerSocket server = new ServerSocket(PORT);\n+            while (true) {\n+                Socket socket = server.accept();\n+                System.out.println(\"Клиент подключился\");\n+                try {\n+                    list.add(new ServerAccess(socket));\n+                } catch (IOException e) {\n+                    socket.close();\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "edeb278876a7b82dd63fd39f098b308fbf6ae709",
    "filename": "src/main/java/multithreading/project/ServerAccess.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/ServerAccess.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/multithreading/project/ServerAccess.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/multithreading/project/ServerAccess.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,44 @@\n+package multithreading.project;\n+\n+import java.io.*;\n+import java.net.Socket;\n+\n+public class ServerAccess extends Thread{\n+    private Socket socket;\n+    private BufferedReader in;\n+    private BufferedWriter out;\n+\n+    public ServerAccess(Socket socket) throws IOException {\n+        this.socket = socket;\n+        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+        out =  new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n+        start();\n+    }\n+\n+    @Override\n+    public void run(){\n+        String word;\n+        while (true){\n+            try {\n+                word = in.readLine();\n+                if (word.equalsIgnoreCase(\"stop\")) break;\n+                for (ServerAccess serverAccess : Server.list){\n+                    serverAccess.send(word);\n+                }\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+\n+        }\n+\n+    }\n+\n+    private synchronized void send(String msg){\n+       try {\n+           out.write(msg+\"\\n\");\n+           out.flush();\n+       } catch (IOException e) {\n+           e.printStackTrace();\n+       }\n+    }\n+}"
  },
  {
    "sha": "1bcda7f80330e7d2c23ca00408431ca0762332fe",
    "filename": "src/main/java/project/Application.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/Application.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/Application.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/Application.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -1,21 +1,23 @@\n package project;\n \n import project.data.DataStorage;\n-import project.data.InMemoryDataStorage;\n+import project.data.JDBCDataStorage;\n+import project.locks.LocksProvider;\n import project.models.Model;\n import project.models.ModelImpl;\n import project.services.IOService;\n import project.services.ConsoleIOService;\n \n public class Application {\n     public static void main(String[] args) {\n-        DataStorage dataStorage = new InMemoryDataStorage();\n-        Model model = new ModelImpl(dataStorage);\n+        DataStorage dataStorage = new JDBCDataStorage();\n+        LocksProvider locksProvider = new LocksProvider();\n+        Model model = new ModelImpl(dataStorage, locksProvider);\n         IOService ioService = new ConsoleIOService(model);\n-        IOService ioService2 = new ConsoleIOService(model);\n+        //   IOService ioService2 = new ConsoleIOService(model);\n \n         ioService.start();\n-        ioService2.start();\n+        // ioService2.start();\n \n         //contex.getAllClasses(ConsoleIOService.class).start();\n "
  },
  {
    "sha": "f32eda77ad411e1541a84064e9c7d7a89be9ee39",
    "filename": "src/main/java/project/JDBCAccess.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/JDBCAccess.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/JDBCAccess.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/JDBCAccess.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,47 @@\n+package project;\n+\n+/**\n+ * @author Ilia Moskalenko\n+ */\n+\n+import java.sql.*;\n+\n+public class JDBCAccess {\n+    public static final String DB_URL = \"jdbc:h2:/home/ilia/home/IliaLessons/db/testDB\";\n+    public static final String DB_Driver = \"org.h2.Driver\";\n+\n+    public static void main(String[] args) {\n+        try {\n+            Class.forName(DB_Driver);\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Connection connection = null;\n+\n+        try {\n+            connection = DriverManager.getConnection(DB_URL);\n+            Statement statement = connection.createStatement();\n+            // statement.executeUpdate(\"create table test(id int)\");\n+          /*  statement.executeUpdate(\"insert into test values(1)\");\n+            statement.executeUpdate(\"insert into test values(2)\");\n+            statement.executeUpdate(\"insert into test values(3)\");\n+            statement.executeUpdate(\"insert into test values(4)\");\n+            statement.executeUpdate(\"insert into test values(5)\");\n+            ResultSet resultSet = statement.executeQuery(\"select * from test\");\n+            while (resultSet.next()){\n+                System.out.println(resultSet.getInt(\"id\"));\n+            }*/\n+            // statement.executeUpdate(\"CREATE DATA BASE testJUnit\");\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        } finally {\n+            try {\n+                connection.close();\n+            } catch (SQLException throwables) {\n+                throwables.printStackTrace();\n+            }\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "b9f62110ae0a66a1ad14ab3c1b1d295e0f9a4239",
    "filename": "src/main/java/project/SpringApp.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/SpringApp.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/SpringApp.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/SpringApp.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,29 @@\n+package project;\n+\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+\n+/*@Configuration\n+@ComponentScan(basePackages = \"project\")\n+@EnableJpaRepositories(basePackages = \"project/models/entity\")\n+@EntityScan(\"project/models/entity\")*/\n+@SpringBootApplication\n+public class SpringApp {\n+    private final static Logger log = LoggerFactory.getLogger(SpringApp.class);\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(SpringApp.class);\n+        /*AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SpringApp.class);\n+        context.getBean(IOService.class).start();*/\n+\n+    }\n+\n+//    @Bean\n+//    public DataStorage getDataStorage(){\n+//        return new InMemoryDataStorage();\n+//    }\n+}"
  },
  {
    "sha": "621697bdbf952f00c6a73ddb9870d2c04154435e",
    "filename": "src/main/java/project/config/DataStorageConfiguration.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/config/DataStorageConfiguration.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/config/DataStorageConfiguration.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/config/DataStorageConfiguration.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,35 @@\n+package project.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import project.data.DataStorage;\n+import project.data.InMemoryDataStorage;\n+import project.data.JDBCDataStorage;\n+import project.data.JpaDataStorage;\n+import project.models.entity.TaskRepo;\n+import project.models.entity.UserRepo;\n+\n+@Configuration\n+@EnableConfigurationProperties(DataStorageProperties.class)\n+public class DataStorageConfiguration {\n+    private static final Logger log = LoggerFactory.getLogger(DataStorageConfiguration.class);\n+\n+    @Bean\n+    public DataStorage createDataStorage(DataStorageProperties dataStorageProperties,\n+                                         TaskRepo taskRepo, UserRepo userRepo){\n+        switch (dataStorageProperties.getActive()) {\n+            case IN_MEMORY:\n+                log.info(\"Creating InMemoryDataStorage\");\n+                return new InMemoryDataStorage();\n+            case JDBC:\n+                log.info(\"Creating JDBCDataStorage\");\n+                return new JDBCDataStorage();\n+            default:\n+                log.info(\"Creating JpaDataStorage\");\n+                return new JpaDataStorage(userRepo, taskRepo);\n+        }\n+    }\n+}"
  },
  {
    "sha": "b035e37b9f237d2db403b4668d5f2ced187cca5f",
    "filename": "src/main/java/project/config/DataStorageProperties.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/config/DataStorageProperties.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/config/DataStorageProperties.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/config/DataStorageProperties.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,23 @@\n+package project.config;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"data-storage\")\n+public class DataStorageProperties {\n+\n+    private DataStorageType active;\n+\n+    public DataStorageType getActive() {\n+        return active;\n+    }\n+\n+    public void setActive(DataStorageType active) {\n+        this.active = active;\n+    }\n+\n+    public enum DataStorageType{\n+        JDBC,\n+        IN_MEMORY,\n+        JPA\n+    }\n+}"
  },
  {
    "sha": "e6145e068e41a5fed9e07f7b636f41541eef5f72",
    "filename": "src/main/java/project/controllers/AppController.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/controllers/AppController.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/controllers/AppController.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/controllers/AppController.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,83 @@\n+package project.controllers;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.*;\n+import project.config.DataStorageProperties;\n+import project.exceptions.TaskNotFoundException;\n+import project.exceptions.UserExistsException;\n+import project.exceptions.UserNotFoundException;\n+import project.models.*;\n+import project.services.TaskService;\n+import project.services.UserService;\n+\n+import java.util.List;\n+\n+@RestController\n+@RequestMapping(value = \"/api\")\n+public class AppController {\n+    private static final Logger logger = LoggerFactory.getLogger(AppController.class);\n+\n+    @Autowired\n+    private UserService userService;\n+    @Autowired\n+    private TaskService taskService;\n+    @Autowired\n+    private DataStorageProperties dataStorageProperties;\n+\n+    @GetMapping(\"/data_storage\")\n+    String getActiveDataStorage(){\n+        return dataStorageProperties.getActive().name();\n+    }\n+\n+    @PostMapping(value = \"/user\")\n+    User createUser(@RequestBody UserData user) throws UserExistsException {\n+        logger.info(\"Received user: {}\", user.toString());\n+        return userService.createUser(user);\n+    }\n+\n+    @PostMapping(value = \"user/{userId}/task\")\n+    Task createTask(@PathVariable(value = \"userId\") Long userId, @RequestBody TaskData task) throws UserNotFoundException {\n+        return taskService.createTask(userId, task);\n+    }\n+\n+    @GetMapping(value = \"/task/{id}\")\n+    Task getTaskById(@PathVariable(value = \"id\") Long id) throws TaskNotFoundException {\n+        logger.debug(\"Received task: {}\", id);\n+        return taskService.getTaskById(id);\n+    }\n+\n+    @GetMapping(value = \"user/{id}\")\n+    User getUserById(@PathVariable(value = \"id\") Long userId) throws UserNotFoundException {\n+        return userService.getUserById(userId);\n+    }\n+\n+    @PutMapping(value = \"/task/{taskId}\")\n+    Task updateTask(@PathVariable(value = \"taskId\") Long taskId,\n+                    @RequestBody TaskData taskData) throws Exception {\n+        return taskService.updateTask(taskId, taskData);\n+    }\n+\n+    @DeleteMapping(value = \"/task/{id}\")\n+    void deleteTask(@PathVariable(value = \"id\") Long taskId) throws TaskNotFoundException {\n+        taskService.deleteTask(taskId);\n+    }\n+\n+    @DeleteMapping(value = \"user/{id}\")\n+    void deleteUser(@PathVariable(value = \"id\") Long userId) throws Exception {\n+        userService.deleteUser(userId);\n+    }\n+\n+    @GetMapping(value = \"user/{userId}/tasks\")\n+    List<Task> getAllTasksOfUser(@PathVariable(value = \"userId\") Long userId) throws UserNotFoundException {\n+        return taskService.getAllTasksOfUser(userId);\n+    }\n+\n+    @GetMapping(value = \"user/{userId}/tasks/active\")\n+    List<Task> getAllActiveTaskOfUser(@PathVariable(value = \"userId\") Long userId) throws UserNotFoundException {\n+        return taskService.getAllActiveTaskOfUser(userId);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "fd4e012f7aa44302a8f4e2b8ee6ead3a4f126ef9",
    "filename": "src/main/java/project/data/DataStorage.java",
    "status": "modified",
    "additions": 19,
    "deletions": 7,
    "changes": 26,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/DataStorage.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/DataStorage.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/data/DataStorage.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -1,22 +1,34 @@\n package project.data;\n \n import project.models.Task;\n+import project.models.TaskData;\n import project.models.User;\n+import project.models.UserData;\n \n import java.util.List;\n import java.util.Optional;\n \n-/**\n- * @author Ilia Moskalenko\n- */\n+\n public interface DataStorage {\n-    void addTask(Task task);\n-    void updateTask(Task task);\n-    void deleteTask (long taskId);\n+    Task addTask(long userId, TaskData task);\n+\n+    Task updateTask(long taskId, TaskData taskData);\n+\n+    void deleteTask(long taskId);\n+\n     List<Task> getAllActiveTask(long userId);\n+\n     List<Task> getAllTasks(long userId);\n-    void addUser(User user);\n+\n+    User addUser(UserData user);\n+\n+    User updateUser(long userId, UserData userData);\n+\n     void deleteUser(long userId);\n+\n     List<User> getAllUsers();\n+\n     Optional<Task> getTaskById(long taskId);\n+\n+    Optional<User> getUser(long userId);\n }"
  },
  {
    "sha": "665a5beec8318f67398654ab48faeba5007609a3",
    "filename": "src/main/java/project/data/InMemoryDataStorage.java",
    "status": "modified",
    "additions": 81,
    "deletions": 12,
    "changes": 93,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/InMemoryDataStorage.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/InMemoryDataStorage.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/data/InMemoryDataStorage.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -1,54 +1,123 @@\n package project.data;\n \n import project.models.Task;\n+import project.models.TaskData;\n import project.models.User;\n+import project.models.UserData;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n-import java.util.List;\n-import java.util.Optional;\n \n public class InMemoryDataStorage implements DataStorage {\n+    private long countUser;\n+    private Map<Long, User> userList = new HashMap<>();\n+    private long countTask;\n+    private Map<Long, Task> taskList = new HashMap<>();\n+    private Map<Long, Set<Long>> usersTasksMap = new HashMap<>();\n+\n     @Override\n-    public void addTask(Task task) {\n+    public Task addTask(long userId, TaskData taskData) {\n+        countTask++;\n+        taskList.put(countTask, new Task(userId, countTask, taskData.getTitle(), taskData.getFullTaskText(), taskData.isSolved()));\n+        Set<Long> userTasks = usersTasksMap.computeIfAbsent(userId, k -> new HashSet<>());\n+//        Set<Long> userTasks = usersTasksMap.get(userId);\n+//        if (userTasks == null) {\n+//            userTasks = new HashSet<>();\n+//            usersTasksMap.put(userId, userTasks);\n+//        }\n+\n+        userTasks.add(countTask);\n+\n+        return taskList.get(countTask);\n \n     }\n \n     @Override\n-    public void updateTask(Task task) {\n+    public Task updateTask(long taskId, TaskData taskData) {\n+        Task oldTask = taskList.get(taskId);\n+        Task newTask = new Task(oldTask.getUserId(),\n+                oldTask.getId(),\n+                taskData.getTitle(),\n+                taskData.getFullTaskText(),\n+                taskData.isSolved());\n+        taskList.put(taskId, newTask);\n+\n+        return taskList.get(taskId);\n+    }\n \n+    @Override\n+    public Optional<Task> getTaskById(long taskId) {\n+        if (taskList.containsKey(taskId)) return Optional.of(taskList.get(taskId));\n+        return Optional.empty();\n     }\n \n     @Override\n     public void deleteTask(long taskId) {\n-\n+        Task taskToRemove = taskList.remove(taskId);\n+        if (taskToRemove != null) {\n+            Set<Long> tasksOfUser = usersTasksMap.get(taskToRemove.getUserId());\n+            if (tasksOfUser != null) tasksOfUser.remove(taskId);\n+        }\n     }\n \n     @Override\n     public List<Task> getAllActiveTask(long userId) {\n-        return null;\n+//        List<Task> allActiveTasksOfUser = new ArrayList<>();\n+//        for (Long ids : usersTasksMap.get(userId)){\n+//            if (!taskList.get(ids).isSolved()){\n+//                allActiveTasksOfUser.add(taskList.get(ids));\n+//            }\n+//        }\n+\n+        return getAllTasks(userId, true);\n+    }\n+\n+    private List<Task> getAllTasks(long userId, boolean onlyActive) {\n+        Set<Long> userTaskIds = usersTasksMap.get(userId);\n+        if (userTaskIds == null) return new ArrayList<>();\n+        return userTaskIds.stream()\n+                .flatMap(taskId -> getTaskById(taskId).map(t -> Stream.of(t)).orElseGet(() -> Stream.empty()))\n+                .filter(task -> !task.isSolved() || (!onlyActive))\n+                .collect(Collectors.toList());\n     }\n \n     @Override\n     public List<Task> getAllTasks(long userId) {\n-        return null;\n+        return getAllTasks(userId, false);\n     }\n \n     @Override\n-    public void addUser(User user) {\n+    public User addUser(UserData userData) {\n+        countUser++;\n+        userList.put(countUser, new User(countUser, userData.getName(), userData.getSecondName()));\n+        return userList.get(countUser);\n+    }\n \n+    @Override\n+    public User updateUser(long userId, UserData userData) {\n+        userList.put(userId, new User(userId,\n+                userData.getName(),\n+                userData.getSecondName()));\n+        return userList.get(userId);\n     }\n \n     @Override\n     public void deleteUser(long userId) {\n-\n+        userList.remove(userId);\n+        Set<Long> usersTasks = usersTasksMap.remove(userId);\n+        if (usersTasks != null) usersTasks.forEach(taskId -> taskList.remove(taskId));\n     }\n \n     @Override\n     public List<User> getAllUsers() {\n-        return null;\n+        return new ArrayList<>(userList.values());\n     }\n \n+\n     @Override\n-    public Optional<Task> getTaskById(long taskId) {\n-        return Optional.empty();\n+    public Optional<User> getUser(long userId) {\n+        return Optional.ofNullable(userList.get(userId));\n     }\n }"
  },
  {
    "sha": "2f7da2cba05fd5bbb0ce7dcbfbc81789c5ad9ec6",
    "filename": "src/main/java/project/data/JDBCDataStorage.java",
    "status": "added",
    "additions": 238,
    "deletions": 0,
    "changes": 238,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/JDBCDataStorage.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/JDBCDataStorage.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/data/JDBCDataStorage.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,238 @@\n+package project.data;\n+\n+import project.models.Task;\n+import project.models.TaskData;\n+import project.models.User;\n+import project.models.UserData;\n+\n+import java.sql.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\n+public class JDBCDataStorage implements DataStorage {\n+    private Connection connection;\n+    private final String dbPath;\n+\n+\n+    public JDBCDataStorage() {\n+        this(\"jdbc:h2:/home/ilia/home/IliaLessons/db/testDB\");\n+    }\n+\n+    public JDBCDataStorage(String dbPath) {\n+        this.dbPath = dbPath;\n+    }\n+\n+    private Connection getConnection() throws SQLException {\n+        if (connection == null) {\n+            final String DB_USERNAME = \"user\";\n+            final String DB_PASSWORD = \"password\";\n+            connection = DriverManager.getConnection(dbPath, DB_USERNAME, DB_PASSWORD);\n+        }\n+        return connection;\n+    }\n+\n+\n+    @Override\n+    public Task addTask(long userId, TaskData task) {\n+        int taskId = 0;\n+        try (Statement statement = getConnection().createStatement()) {\n+            String insert = String.format(\"INSERT INTO tasks (fk_user_id, title, full_task_text, is_solved) \" +\n+                    \"VALUES (%d, '%s', '%s', '%b')\", userId, task.getTitle(), task.getFullTaskText(), task.isSolved());\n+            statement.executeUpdate(insert);\n+            ResultSet resultSet = statement.executeQuery(\"SELECT task_id \" +\n+                    \"FROM tasks\");\n+            resultSet.last();\n+            taskId = resultSet.getInt(1);\n+        } catch (SQLException e) {\n+            e.getMessage();\n+        }\n+        if (taskId == 0) return null;\n+        else return new Task(userId, taskId, task.getTitle(), task.getFullTaskText(), task.isSolved());\n+    }\n+\n+    @Override\n+    public Task updateTask(long taskId, TaskData taskData) {\n+        Task task = null;\n+        String update = String.format(\"UPDATE tasks \" +\n+                \"SET title ='%s', full_task_text = '%s', is_solved = '%b' \" +\n+                \"WHERE task_id = %d\", taskData.getTitle(), taskData.getFullTaskText(), taskData.isSolved(), taskId);\n+        try (Statement statement = getConnection().createStatement()) {\n+            statement.executeUpdate(update);\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM tasks \" +\n+                    \"WHERE task_id = \" + taskId);\n+            while (resultSet.next()) {\n+                task = new Task(resultSet.getInt(2),\n+                        resultSet.getInt(1),\n+                        resultSet.getString(3),\n+                        resultSet.getString(4),\n+                        resultSet.getBoolean(5));\n+            }\n+\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+        return task;\n+    }\n+\n+    @Override\n+    public void deleteTask(long taskId) {\n+        try (Statement statement = getConnection().createStatement()) {\n+            statement.executeUpdate(\"DELETE FROM tasks \" +\n+                    \"WHERE task_id = \" + taskId);\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<Task> getAllActiveTask(long userId) {\n+        List<Task> taskList = new ArrayList<>();\n+        try (Statement statement = getConnection().createStatement()) {\n+            Task task;\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM tasks \" +\n+                    \"WHERE is_solved = 'false' AND fk_user_id = \" + userId);\n+            while (resultSet.next()) {\n+                task = new Task(resultSet.getInt(2),\n+                        resultSet.getInt(1),\n+                        resultSet.getString(3),\n+                        resultSet.getString(4),\n+                        resultSet.getBoolean(5));\n+                taskList.add(task);\n+            }\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+        if (taskList.isEmpty()) return new ArrayList<>(0);\n+        else return taskList;\n+    }\n+\n+    @Override\n+    public List<Task> getAllTasks(long userId) {\n+        List<Task> taskList = new ArrayList<>();\n+        try (Statement statement = getConnection().createStatement()) {\n+            Task task;\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM tasks \" +\n+                    \"WHERE fk_user_id = \" + userId);\n+            while (resultSet.next()) {\n+                task = new Task(resultSet.getInt(2),\n+                        resultSet.getInt(1),\n+                        resultSet.getString(3),\n+                        resultSet.getString(4),\n+                        resultSet.getBoolean(5));\n+                taskList.add(task);\n+            }\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+        if (taskList.isEmpty()) return new ArrayList<>(0);\n+        else return taskList;\n+    }\n+\n+    @Override\n+    public User addUser(UserData user) {\n+        User newUser = null;\n+        try (Statement statement = connection.createStatement()) {\n+            statement.executeUpdate(\"INSERT INTO users (name, second_name) VALUES('\" + user.getName() + \"','\"\n+                    + user.getSecondName() + \"')\");\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM users\");\n+            resultSet.last();\n+            newUser = new User(resultSet.getInt(1), resultSet.getString(2), resultSet.getString(3));\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+        return newUser;\n+    }\n+\n+    @Override\n+    public User updateUser(long userId, UserData userData) {\n+        User user = null;\n+        String update = String.format(\"UPDATE users \" +\n+                \"SET name ='%s', second_name = '%s' \" +\n+                \"WHERE task_id = %d\", userData.getName(), userData.getSecondName(), userId);\n+        try (Statement statement = getConnection().createStatement()) {\n+            statement.executeUpdate(update);\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM users \" +\n+                    \"WHERE user_id = \" + userId);\n+            while (resultSet.next()) {\n+                user = new User(resultSet.getInt(1),\n+                        resultSet.getString(2),\n+                        resultSet.getString(3));\n+            }\n+\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+        return user;\n+    }\n+\n+    @Override\n+    public void deleteUser(long userId) {\n+        try (Statement statement = getConnection().createStatement()) {\n+            statement.executeUpdate(\"DELETE FROM tasks \" +\n+                    \"WHERE fk_user_id = \" + userId);\n+            statement.executeUpdate(\"DELETE FROM users \" +\n+                    \"WHERE user_id = \" + userId);\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getAllUsers() {\n+        List<User> userList = new ArrayList<>();\n+        try (Statement statement = getConnection().createStatement()) {\n+            User user;\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM users\");\n+            while (resultSet.next()) {\n+                user = new User(resultSet.getInt(1),\n+                        resultSet.getString(2),\n+                        resultSet.getString(3));\n+                userList.add(user);\n+            }\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+\n+        if (userList.isEmpty()) return new ArrayList<>(0);\n+        else return userList;\n+    }\n+\n+    @Override\n+    public Optional<Task> getTaskById(long taskId) {\n+        Task task = null;\n+        try (Statement statement = getConnection().createStatement()) {\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM tasks WHERE task_id = \" + taskId);\n+            while (resultSet.next())\n+                task = new Task(resultSet.getInt(2),\n+                        resultSet.getInt(1),\n+                        resultSet.getString(3),\n+                        resultSet.getString(4),\n+                        resultSet.getBoolean(5));\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+\n+        if (task == null) return Optional.empty();\n+        else return Optional.of(task);\n+    }\n+\n+    @Override\n+    public Optional<User> getUser(long userId) {\n+        User user = null;\n+        try (Statement statement = getConnection().createStatement()) {\n+            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM users WHERE user_id = \" + userId);\n+            while (resultSet.next())\n+                user = new User(resultSet.getInt(1),\n+                        resultSet.getString(2),\n+                        resultSet.getString(3));\n+\n+        } catch (SQLException throwables) {\n+            throwables.printStackTrace();\n+        }\n+        if (user == null) return Optional.empty();\n+        else return Optional.of(user);\n+    }\n+}"
  },
  {
    "sha": "9ca241c033f3f5817079e57e4c5b9dd77ddb9b0f",
    "filename": "src/main/java/project/data/JpaDataStorage.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/JpaDataStorage.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/data/JpaDataStorage.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/data/JpaDataStorage.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,119 @@\n+package project.data;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import project.models.Task;\n+import project.models.TaskData;\n+import project.models.User;\n+import project.models.UserData;\n+import project.models.entity.TaskEntity;\n+import project.models.entity.TaskRepo;\n+import project.models.entity.UserEntity;\n+import project.models.entity.UserRepo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\n+public class JpaDataStorage implements DataStorage {\n+    private static final Logger log = LoggerFactory.getLogger(JpaDataStorage.class);\n+    private final UserRepo userRepo;\n+    private final TaskRepo taskRepo;\n+\n+\n+    public JpaDataStorage(UserRepo userRepo, TaskRepo taskRepo) {\n+        this.userRepo = userRepo;\n+        this.taskRepo = taskRepo;\n+    }\n+\n+    @Override\n+    public Task addTask(long userId, TaskData task) {\n+        TaskEntity taskEntity = new TaskEntity(userId, task);\n+        taskRepo.save(taskEntity);\n+        return new Task(userId, taskEntity.getTaskId(), taskEntity.getTitle(),\n+                taskEntity.getFullTaskText(), taskEntity.isSolved());\n+    }\n+\n+    @Override\n+    public Task updateTask(long taskId, TaskData taskData) {\n+        Optional<TaskEntity> taskEntityOpt = taskRepo.findById(taskId);\n+        TaskEntity taskEntity = taskEntityOpt.get();\n+        taskEntity.setTitle(taskData.getTitle());\n+        taskEntity.setFullTaskText(taskData.getFullTaskText());\n+        taskEntity.setSolved(taskData.isSolved());\n+        taskRepo.save(taskEntity);\n+        return new Task(taskEntity.getUserId(), taskEntity.getTaskId(), taskEntity.getTitle(),\n+                taskEntity.getFullTaskText(), taskEntity.isSolved());\n+    }\n+\n+    @Override\n+    public void deleteTask(long taskId) {\n+        taskRepo.deleteById(taskId);\n+    }\n+\n+    @Override\n+    public List<Task> getAllActiveTask(long userId) {\n+        List<Task> taskList = new ArrayList<>();\n+        boolean active = false;\n+        taskRepo.findByUserIdAndIsSolved(\n+                userId, active).forEach(taskEntity -> taskList.add(new Task(\n+                taskEntity.getUserId(), taskEntity.getTaskId(), taskEntity.getTitle(), taskEntity.getFullTaskText(),\n+                taskEntity.isSolved())));\n+        return taskList;\n+    }\n+\n+    @Override\n+    public List<Task> getAllTasks(long userId) {\n+        List<Task> taskList = new ArrayList<>();\n+        taskRepo.findByUserId(userId).forEach(taskEntity -> taskList.add(new Task(\n+                userId, taskEntity.getTaskId(), taskEntity.getTitle(), taskEntity.getFullTaskText(),\n+                taskEntity.isSolved())));\n+        return taskList;\n+    }\n+\n+    @Override\n+    public User addUser(UserData user) {\n+        UserEntity userEntity = new UserEntity(user);\n+        userRepo.save(userEntity);\n+        return new User(userEntity.getUserId(), userEntity.getName(), userEntity.getSecondName());\n+    }\n+\n+    @Override\n+    public User updateUser(long userId, UserData userData) {\n+        Optional<UserEntity> userEntityOpt = userRepo.findById(userId);\n+        userEntityOpt.get().setName(userData.getName());\n+        userEntityOpt.get().setSecondName(userData.getSecondName());\n+        return new User(userId, userEntityOpt.get().getName(), userEntityOpt.get().getSecondName());\n+    }\n+\n+    @Override\n+    public void deleteUser(long userId) {\n+        userRepo.deleteById(userId);\n+    }\n+\n+    @Override\n+    public List<User> getAllUsers() {\n+        List<User> userList = new ArrayList<>();\n+        List<UserEntity> userEntities = (List<UserEntity>) userRepo.findAll();\n+        userEntities.stream().map(userEntity -> userList.add(new User(userEntity.getUserId(),\n+                userEntity.getName(), userEntity.getSecondName())));\n+        return userList;\n+    }\n+\n+    @Override\n+    public Optional<Task> getTaskById(long taskId) {\n+        Optional<TaskEntity> taskEntityOpt = taskRepo.findById(taskId);\n+        TaskEntity taskEntity = taskEntityOpt.get();\n+\n+        return Optional.of(new Task(taskEntity.getTaskId(), taskEntity.getTaskId(),\n+                taskEntity.getTitle(), taskEntity.getFullTaskText(), taskEntity.isSolved()));\n+    }\n+\n+    @Override\n+    public Optional<User> getUser(long userId) {\n+        Optional<UserEntity> userEntityOpt = userRepo.findById(userId);\n+        UserEntity userEntity = userEntityOpt.get();\n+        return Optional.of(new User(userEntity.getUserId(), userEntity.getName(), userEntity.getSecondName()));\n+    }\n+}"
  },
  {
    "sha": "e60ba8f5c1124c0340286d8a909a8bacbece55a7",
    "filename": "src/main/java/project/exceptions/TaskNotFoundException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/exceptions/TaskNotFoundException.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/exceptions/TaskNotFoundException.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/exceptions/TaskNotFoundException.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,4 @@\n+package project.exceptions;\n+\n+public class TaskNotFoundException extends Exception {\n+}"
  },
  {
    "sha": "2871f0eeb6e8e6711639aaddebb63a9f8ae11c2e",
    "filename": "src/main/java/project/exceptions/UserExistsException.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/DmitryNuzhdin/IliaLessons/blob/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/exceptions/UserExistsException.java",
    "raw_url": "https://github.com/DmitryNuzhdin/IliaLessons/raw/c44b369c32179afdcb38793c2d5a9c09ff1fda35/src/main/java/project/exceptions/UserExistsException.java",
    "contents_url": "https://api.github.com/repos/DmitryNuzhdin/IliaLessons/contents/src/main/java/project/exceptions/UserExistsException.java?ref=c44b369c32179afdcb38793c2d5a9c09ff1fda35",
    "patch": "@@ -0,0 +1,3 @@\n+package project.exceptions;\n+\n+public class UserExistsException extends Exception{}"
  }
]
