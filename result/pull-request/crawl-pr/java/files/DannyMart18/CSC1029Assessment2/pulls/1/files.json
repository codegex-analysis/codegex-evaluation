[
  {
    "sha": "8d42a4fba7d05844aabe168219a5a85c0aa5819d",
    "filename": "src/part01/MP3Player.java",
    "status": "modified",
    "additions": 19,
    "deletions": 15,
    "changes": 34,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part01/MP3Player.java",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part01/MP3Player.java",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/part01/MP3Player.java?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -81,10 +81,14 @@ public MP3Player(){\n      * @return A string to say the song is playing\r\n      */\r\n     public String play(int tuneID){\r\n-\r\n         String play = \"\";\r\n-        play += soundData.get(tuneID).play();\r\n-        return play;\r\n+        if (tuneID < 0) {\r\n+            play += \"Invalid Tune ID\";\r\n+            return play;\r\n+        }else {\r\n+            play += soundData.get(tuneID).play();\r\n+            return play;\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -96,20 +100,19 @@ public String play(int tuneID){\n      * @return\r\n      */\r\n     public boolean addTune(String title, String artist, int duration, Genre genre){\r\n-        if(title!= null && artist != null && duration > 0 && genre != null){\r\n-            try {\r\n-                Tune t = new Tune(title, artist, duration, genre);\r\n-                soundData.add(t);\r\n-            }catch(Exception ex){\r\n-               throw  new IllegalArgumentException(ex);\r\n-            }\r\n+                if(title!= null && artist != null && duration > 0 && genre != null){\r\n \r\n-            return true;\r\n-        }\r\n-\r\n-        return false;\r\n-    }\r\n+                    try {\r\n+                        Tune t = new Tune(title, artist, duration, genre);\r\n+                        soundData.add(t);\r\n+                    }catch(Exception ex){\r\n+                        throw  new IllegalArgumentException(ex);\r\n+                    }\r\n \r\n+                    return true;\r\n+            }\r\n+            return false;\r\n+        }\r\n     /**\r\n      *\r\n      * @return true\r\n@@ -204,4 +207,5 @@ private int findArtist(String artist){\n \r\n \r\n \r\n+\r\n }\r"
  },
  {
    "sha": "96f478efec7ee2a68d931e1845c6c6d8ab3f2afd",
    "filename": "src/part01/Main.java",
    "status": "modified",
    "additions": 102,
    "deletions": 70,
    "changes": 172,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part01/Main.java",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part01/Main.java",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/part01/Main.java?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -71,19 +71,23 @@ private static void selectFromFullList(){\n                 String[] songs = mp3.getTuneInfo();\r\n                 int len = songs.length;\r\n \r\n+                //format the data to display properly\r\n                 String[] display = new String[len];\r\n                 int index = 0;\r\n                 for (String song : songs) {\r\n                     String artist = song.toString();\r\n                     String[] tunes = artist.split(\",\");\r\n-                    display[index] = tunes[1] + \" By\" + tunes[2];\r\n+                    display[index] = tunes[1] + \" By\" + tunes[2] + \", \" +tunes[0];\r\n                     index++;\r\n                 }\r\n+                bubbleSortAsc(display);\r\n+                System.out.println();\r\n                 Menu songMenu = new Menu(\"Select a Song\", display);\r\n                 int choice = songMenu.getUserChoice();\r\n-                System.out.println();\r\n-                System.out.println(mp3.play(choice - 1));\r\n+                int tuneId = retrieveTuneID(display, choice);\r\n \r\n+                System.out.println(mp3.play(tuneId - 1));\r\n+                System.out.println();\r\n             }else{\r\n                 System.out.println(\"MP3 Player has no songs\");\r\n             }\r\n@@ -96,15 +100,14 @@ private static void selectFromFullList(){\n     * Allows the user to select a song by viewing the artist first\r\n     * */\r\n     private static void selectTuneByArtist(){\r\n-        if(running){\r\n-            if(mp3.getTuneInfo() != null) {\r\n-                String[] songs = mp3.getTuneInfo();\r\n+            if (running) {\r\n+                String songs[] = mp3.getTuneInfo();\r\n                 int len = songs.length;\r\n \r\n-                //Splits the getTuneInfo and isolates the artists and prints them\r\n                 String[] artists = new String[len];\r\n                 int index = 0;\r\n-                for (int i = 0; i < len; i++) {\r\n+\r\n+                for (int i = 0; i < artists.length; i++) {\r\n                     String artist = songs[i].toString();\r\n                     String[] tunes = artist.split(\",\");\r\n                     artists[index] = tunes[2];\r\n@@ -113,35 +116,45 @@ private static void selectTuneByArtist(){\n \r\n                 //sorts the artists in ascending order a-z\r\n                 bubbleSortAsc(artists);\r\n-                /**\r\n-                 * Remove duplicates partially works, it removes the first set of duplicates, however any duplicates that follow will not be removed\r\n-                 */\r\n                 len = removeDuplicateElements(artists, len);\r\n-\r\n-                int count = 1;\r\n-                for (int i = 0; i < artists.length; i++) {\r\n-                    System.out.println(count++ + \". \" + artists[i]);\r\n+                for (int i = 0; i < len; i++) {\r\n+                    // print artists array for every index less than length of len\r\n+                    System.out.println((i + 1) + \".\" + artists[i]);\r\n                 }\r\n                 System.out.println();\r\n-\r\n-                System.out.println(\"Enter The Artist You Would Like To View\");\r\n-                Scanner artistChoice = new Scanner(System.in);\r\n-                String choice = artistChoice.nextLine();\r\n+                try {\r\n+                    System.out.println(\"Enter The Artist You Would Like To View\");\r\n+                    Scanner artistChoice = new Scanner(System.in);\r\n+                    String choice = artistChoice.nextLine();\r\n+\r\n+                    //format the data to display properly\r\n+                    String[] temp = mp3.getTuneInfo(choice);\r\n+                    String[] display = new String[temp.length];\r\n+                    index = 0;\r\n+                    for (String song : temp) {\r\n+                        String artist = song.toString();\r\n+                        String[] tunes = artist.split(\",\");\r\n+                        display[index] = tunes[1] + \" By\" + tunes[2] + \" - ID\" + \", \" +tunes[0];\r\n+                        index++;\r\n+                    }\r\n+                    bubbleSortAsc(display);\r\n+                    System.out.println();\r\n \r\n \r\n-                Menu artistMenu = new Menu(\"Songs Sorted By Artist\", mp3.getTuneInfo(choice));\r\n-                int songChoice = artistMenu.getUserChoice();\r\n+                    Menu artistMenu = new Menu(\"Songs Sorted By Artist\", display);\r\n+                    int songChoice = artistMenu.getUserChoice();\r\n+                    int tuneId = retrieveTuneID(display, songChoice);\r\n \r\n-                int song = retrieveTuneID(mp3.getTuneInfo(choice), songChoice);\r\n-                System.out.println(mp3.play(song - 1));\r\n-                System.out.println();\r\n-            }else{\r\n-                System.out.println(\"MP3 Player has no songs\");\r\n+                    System.out.println(mp3.play(tuneId - 1));\r\n+                    System.out.println();\r\n+                } catch (NullPointerException ex) {\r\n+                    System.out.println(\"Invalid choice\");\r\n+                }\r\n+            } else {\r\n+                System.out.println(\"MP3 player is switched off\");\r\n             }\r\n-        }else{\r\n-            System.out.println(\"System is switched off\");\r\n         }\r\n-    }\r\n+\r\n \r\n     /**\r\n      *selects tunes by genre\r\n@@ -170,9 +183,7 @@ private static void selectTuneByGenre() {\n                     System.out.println(count + \". \" + genres[i]);\r\n                     count++;\r\n                 }\r\n-                System.out.println(count + \". \" + \" Unknown\");\r\n                 System.out.println();\r\n-\r\n                 Genre genre;\r\n                 //validation\r\n                 int num = 0;\r\n@@ -204,13 +215,24 @@ private static void selectTuneByGenre() {\n                 } else {\r\n                     genre = Genre.OTHER;\r\n                 }\r\n-                Menu genreMenu = new Menu(\"Songs Sorted By Genre\", mp3.getTuneInfo(genre));\r\n-                int songChoice = genreMenu.getUserChoice();\r\n-\r\n-                int song = retrieveTuneID(mp3.getTuneInfo(genre), songChoice);\r\n+                //format the data to display properly\r\n+                String[] temp = mp3.getTuneInfo(genre);\r\n+                String[] display = new String[temp.length];\r\n+                index = 0;\r\n+                for (String song : temp) {\r\n+                    String artist = song.toString();\r\n+                    String[] tunes = artist.split(\",\");\r\n+                    display[index] = tunes[1] + \" By\" + tunes[2] + \" ID, \" +tunes[0];\r\n+                    index++;\r\n+                }\r\n+                bubbleSortAsc(display);\r\n+                System.out.println();\r\n \r\n+                part02.Menu genreMenu = new part02.Menu(\"Songs Sorted By Genre\", display);\r\n+                int choice = genreMenu.getUserChoice();\r\n+                int tuneId = retrieveTuneID(display, choice);\r\n \r\n-                System.out.println(mp3.play(song - 1));\r\n+                System.out.println(mp3.play(tuneId - 1));\r\n                 System.out.println();\r\n             }else {\r\n                 System.out.println(\"MP3 Player has no songs\");\r\n@@ -226,28 +248,32 @@ private static void selectTuneByGenre() {\n      */\r\n     private static void displayTopTen(){\r\n         if(running){\r\n-            if(mp3.getTuneInfo() != null) {\r\n-                String[] songs = mp3.getTuneInfo();\r\n-                String[] songPlays = new String[songs.length];\r\n+            if(mp3.getTuneInfo() != null )  {\r\n+                if(mp3.getTuneInfo().length >= 10) {\r\n+                    String[] songs = mp3.getTuneInfo();\r\n+                    String[] songPlays = new String[songs.length];\r\n \r\n-                for (int i = 0; i < songs.length; i++) {\r\n-                    String[] tunes = songs[i].split(\",\");\r\n+                    for (int i = 0; i < songs.length; i++) {\r\n+                        String[] tunes = songs[i].split(\",\");\r\n \r\n-                    songPlays[i] = tunes[5] + \" Plays - \" + tunes[1] + \" By\" + tunes[2];\r\n-                }\r\n-                //sorts song plays in descending order\r\n-                bubbleSortDesc(songPlays);\r\n+                        songPlays[i] = tunes[5] + \" Plays - \" + tunes[1] + \" By\" + tunes[2];\r\n+                    }\r\n+                    //sorts song plays in descending order\r\n+                    bubbleSortDesc(songPlays);\r\n \r\n-                String title = \"Top Ten Songs\";\r\n-                System.out.println(title);\r\n-                for (int i = 0; i < title.length(); i++) {\r\n-                    System.out.print(\"+\");\r\n-                }\r\n-                System.out.println();\r\n+                    String title = \"Top Ten Songs\";\r\n+                    System.out.println(title);\r\n+                    for (int i = 0; i < title.length(); i++) {\r\n+                        System.out.print(\"+\");\r\n+                    }\r\n+                    System.out.println();\r\n \r\n \r\n-                for (int i = 0; i < 10; i++) {\r\n-                    System.out.println(songPlays[i]);\r\n+                    for (int i = 0; i < 10; i++) {\r\n+                        System.out.println(songPlays[i]);\r\n+                    }\r\n+                }else{\r\n+                    System.out.println(\"Not enough songs to display top 10\");\r\n                 }\r\n             }else{\r\n                 System.out.println(\"MP3 Player is empty\");\r\n@@ -266,7 +292,7 @@ private static void displayTopTen(){\n      */\r\n      private static int retrieveTuneID(String[] data, int choice){\r\n         String[] ID = data[choice-1].split(\", \");\r\n-        String tuneID = ID[0];\r\n+        String tuneID = ID[1];\r\n         int tuneId = Integer.parseInt(tuneID);\r\n         return tuneId;\r\n      }\r\n@@ -278,6 +304,7 @@ private static void addNewTune() {\n             String title = \"\";\r\n             String artist = \"\";\r\n             int duration = 0;\r\n+            boolean ok = false;\r\n             Genre genre;\r\n             while(title.length() < 1){\r\n             System.out.println(\"Enter the song title\");\r\n@@ -287,10 +314,20 @@ private static void addNewTune() {\n                 System.out.println(\"Enter the artist\");\r\n                 artist = tune.nextLine();\r\n             }\r\n-            while (duration <= 0){\r\n-            System.out.println(\"Enter the duration\");\r\n-            duration = tune.nextInt();\r\n-            }\r\n+            do {\r\n+                System.out.println(\"Enter the duration\");\r\n+                try {\r\n+                    duration = input.nextInt();\r\n+                    if (duration > 0) {\r\n+                        ok = true;\r\n+                    } else {\r\n+                        System.out.println(\"Invalid choice\");\r\n+                    }\r\n+                } catch (Exception ex) {\r\n+                    System.out.println(\"Error invalid input.\");\r\n+                    input.nextLine();\r\n+                }\r\n+            }while (duration <= 0);\r\n             System.out.println(\"Enter the Genre:\\n1. Rock\\n2. Pop\\n3. Dance\\n4. Jazz\\n5. Classical\\n6. Other\");\r\n             int num = tune.nextInt();\r\n             if (num == 1) {\r\n@@ -348,22 +385,17 @@ private static int removeDuplicateElements(String[] data, int n){\n         if (n==0 || n==1){\r\n             return n;\r\n         }\r\n-\r\n-        String[] temp = new String[n];\r\n-        int j = 0;\r\n-        for (int i=0; i<n-1; i++){\r\n+        int j = 0;//for next element\r\n+        for (int i=0; i < n-1; i++){\r\n             if (!data[i].equalsIgnoreCase(data[i+1])){\r\n-                temp[j] = data[i];\r\n-                j++;\r\n+                data[j++] = data[i];\r\n             }\r\n         }\r\n-\r\n-        // Changing original array\r\n-        for (int i=0; i<j; i++){\r\n-            data[i] = temp[i];\r\n-        }\r\n+        data[j++] = data[n-1];\r\n         return j;\r\n-    }\r\n+        }\r\n+\r\n+\r\n \r\n     /**\r\n      *\r"
  },
  {
    "sha": "a0bd4d537d75d788a1b8162b3f4d8a092485a187",
    "filename": "src/part01/Tune.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part01/Tune.java",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part01/Tune.java",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/part01/Tune.java?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -86,7 +86,7 @@ public String toString(){\n         res += this.getTitle() +\", \";\r\n         res += this.getArtist()+ \", \";\r\n         res += this.getDuration() + \", \";\r\n-        res += this.getStyle() +\",\";\r\n+        res += this.getStyle() +\", \";\r\n         res += this.getPlayCount();\r\n         return res;\r\n     }\r"
  },
  {
    "sha": "16a5e045c42f6cc4bf4a40f91571531bc074d2ba",
    "filename": "src/part02/Jukebox.java",
    "status": "modified",
    "additions": 94,
    "deletions": 21,
    "changes": 115,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part02/Jukebox.java",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part02/Jukebox.java",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/part02/Jukebox.java?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -1,11 +1,20 @@\n package part02;\r\n \r\n+import part01.Genre;\r\n import part01.MP3Player;\r\n \r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.PrintWriter;\r\n+import java.util.Scanner;\r\n+\r\n public class Jukebox extends MP3Player {\r\n     private int credits;\r\n     private int costPerCredit;\r\n \r\n+\r\n+\r\n+\r\n     public Jukebox() {\r\n         super();\r\n         this.credits = 0;\r\n@@ -15,40 +24,102 @@ public Jukebox() {\n     @Override\r\n     public String play(int tuneID) {\r\n         String str = \"\";\r\n-        if(costPerCredit == 0){\r\n-            str += super.play(tuneID);\r\n+        if (tuneID < 0) {\r\n+            str += \"Invalid Tune ID\";\r\n             return str;\r\n+        } else {\r\n+            if (costPerCredit ==0) {\r\n+                str += super.play(tuneID);\r\n+                return str;\r\n+            } else if (credits >= 1 && costPerCredit >= 1) {\r\n+                credits -- ;\r\n+                str += super.play(tuneID);\r\n+                return str;\r\n+            } else {\r\n+                str += \"Unable to play song - not enough credits\";\r\n+                return str;\r\n+            }\r\n         }\r\n-        else if(credits >= costPerCredit) {\r\n-            credits -= costPerCredit;\r\n-            str += super.play(tuneID);\r\n-            return str;\r\n-        }else{\r\n-            str += \"Unable to play song - not enough credits\";\r\n-            return str;\r\n-        }\r\n-\r\n     }\r\n \r\n+\r\n+\r\n+    @Override\r\n     public boolean switchOff() {\r\n+        String[] data = getTuneInfo();\r\n+        File csvFile = new File(\"src\\\\soundData.csv\");\r\n+        PrintWriter out = null;\r\n+        try {\r\n+            out = new PrintWriter(csvFile);\r\n+            out.println(\"ID, Title, Artist, Duration, Genre, Play Count\");\r\n+            for(int i =0; i < getTuneInfo().length; i++){\r\n+                out.println(data[i] + \", \" );\r\n+            }\r\n+            System.out.println(\"File written\");\r\n+            out.close();\r\n+        } catch (FileNotFoundException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n         return true;\r\n     }\r\n \r\n-\r\n+    @Override\r\n     public boolean switchOn() {\r\n+        boolean hasHeader = true;\r\n+        String csvFilePath = \"src\\\\soundData.csv\";\r\n+        Genre genre = null;\r\n+        try {\r\n+            File myFile = new File(csvFilePath);\r\n+            Scanner mySc = new Scanner(myFile);\r\n+            if(hasHeader) {\r\n+                mySc.nextLine();\r\n+            }\r\n+            while(mySc.hasNextLine()) {\r\n+                String unparsedFile = mySc.nextLine();\r\n+                String[] parse = unparsedFile.split(\",\");\r\n+                int iD = Integer.parseInt(parse[0].trim());\r\n+                String title = parse[1].trim();\r\n+                String artist = parse[2].trim();\r\n+                int duration = Integer.parseInt(parse[3].trim());\r\n+                System.out.println(iD + \", \" + title + \", \" + artist +\", \" + duration);\r\n+                addTune(title, artist, duration, Genre.OTHER);\r\n+            }\r\n+            mySc.close();\r\n+        } catch (FileNotFoundException e) {\r\n+            e.printStackTrace();\r\n+        }\r\n         return true;\r\n     }\r\n \r\n+\r\n+\r\n+    /**\r\n+     * inserts a coin into the jukebox and updates the credits balance\r\n+     * @param coin value\r\n+     * @return\r\n+     */\r\n     public int insertCoin(int coin){\r\n+        if(costPerCredit ==0){\r\n+            return 0;\r\n+        }\r\n+        int coins = 0 ;\r\n         if(coin == 10 || coin == 20 || coin == 50 || coin == 100 || coin == 200) {\r\n-            credits += coin;\r\n+            coins += coin;\r\n+            while(coins >= costPerCredit){\r\n+                credits++;\r\n+                coins = coins - costPerCredit;\r\n+            }\r\n             return coin;\r\n         }else{\r\n             return 0;\r\n         }\r\n \r\n     }\r\n \r\n+    /**\r\n+     * allows the user to update the cost per credit\r\n+     * @param cost the new cost per credit\r\n+     */\r\n     public void setCostPerCredit(int cost){\r\n         if(cost >= 0) {\r\n             this.costPerCredit = cost;\r\n@@ -57,22 +128,24 @@ public void setCostPerCredit(int cost){\n         }\r\n     }\r\n \r\n+    /**\r\n+     * gets the amount of credits in the jukebox to update the user on how much they have available.\r\n+     * @return credits\r\n+     */\r\n     public int getCredits() {\r\n         return credits;\r\n     }\r\n \r\n-    public void setCredits(int credits) {\r\n-        if(credits > 0){\r\n-            this.credits = credits;\r\n-        }else{\r\n-            this.credits = 0;\r\n-        }\r\n-\r\n-    }\r\n \r\n+    /**\r\n+     * gets the current cost per credit in the jukebox to update the user on how much a song play will cost\r\n+     * @return\r\n+     */\r\n     public int getCostPerCredit() {\r\n         return costPerCredit;\r\n     }\r\n+\r\n+\r\n }\r\n \r\n \r"
  },
  {
    "sha": "e6830ac7376f77495ad378458017017f87529544",
    "filename": "src/part02/Main.java",
    "status": "modified",
    "additions": 160,
    "deletions": 108,
    "changes": 268,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part02/Main.java",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part02/Main.java",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/part02/Main.java?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -8,7 +8,7 @@\n     //static scanner\r\n     static Scanner input = new Scanner(System.in);\r\n     //instance of Jukebox\r\n-    static Jukebox mp3 = new Jukebox();\r\n+     static Jukebox mp3 = new Jukebox();\r\n     //boolean value set to true when the system starts\r\n     static boolean running = true;\r\n \r\n@@ -17,6 +17,7 @@ public static void main(String[] args) {\n         //adds initial tune objects to the system\r\n         addTunes();\r\n         //Menu options array\r\n+\r\n         String[] menuOptions = { \"Select From Full List\", \"Select Tune By Artist\", \"Select Tune By Genre\",\r\n                 \"Add New Tune\", \"Display Top 10\", \"Insert Coin\", \"Management Options\", \"Switch Off\", \"Switch On\", \"Exit\" };\r\n \r\n@@ -61,27 +62,23 @@ private static void addTunes(){\n         mp3.addTune(\"Caroline\", \"Status Quo\", 350, Genre.ROCK);\r\n         mp3.addTune(\"Symphony\", \"Mozart\", 350, Genre.CLASSICAL);\r\n         mp3.addTune(\"How To Save A Life\", \"The Fray\", 350, Genre.POP);\r\n+        mp3.addTune(\"Down Down\", \"Status Quo\", 350, Genre.ROCK);\r\n         mp3.addTune(\"Baby\", \"Justin Bieber\", 350, Genre.POP);\r\n     }\r\n \r\n+    /**\r\n+     * inserts a coin into the jukebox and updates available credits\r\n+     */\r\n     private static void insertCoin(){\r\n-        String[] coins = {\"10p\", \"20p\", \"50p\", \"£1\", \"£2\"};\r\n-        int credit = 0;\r\n-        System.out.println(\"You have \" + mp3.getCredits() + \"p available\\n\" + \"The cost of a song is \" + mp3.getCostPerCredit());\r\n-\r\n-        String title = (\"Insert A Coin\");\r\n-        System.out.println(title);\r\n-        for(int i=0; i < title.length(); i++){\r\n-            System.out.print(\"+\");\r\n-        }\r\n-        System.out.println();\r\n-        int count = 1;\r\n-        for(int i = 0; i< coins.length; i++){\r\n-            System.out.println(count + \". \" + coins[i]);\r\n-            count++;\r\n-        }\r\n+        if(running) {\r\n+            String[] coins = {\"10p\", \"20p\", \"50p\", \"£1\", \"£2\"};\r\n+            int credit = 0;\r\n+            System.out.println(\"Cost Per Credit: \" + mp3.getCostPerCredit() + \"p\\nYou have \" + mp3.getCredits() + \" credits available\");\r\n+            System.out.println();\r\n+\r\n+            Menu coinMenu = new Menu(\"Insert A Coin\", coins);\r\n+            int choice = coinMenu.getUserChoice();\r\n \r\n-        int choice = input.nextInt();\r\n             if (choice == 1) {\r\n                 credit = 10;\r\n             } else if (choice == 2) {\r\n@@ -96,14 +93,29 @@ private static void insertCoin(){\n                 System.out.println(\"Invalid coin inserted\");\r\n             }\r\n \r\n-        mp3.insertCoin(credit);\r\n+            mp3.insertCoin(credit);\r\n+            System.out.println(\"Number of Credits: \" + mp3.getCredits());\r\n+        }else {\r\n+            System.out.println(\"System is switched off\");\r\n+        }\r\n     }\r\n-    private static void managementOptions(){\r\n-        System.out.println(\"Enter a cost per credit\");\r\n-        int cost = input.nextInt();\r\n-        mp3.setCostPerCredit(cost);\r\n-\r\n \r\n+    /**\r\n+     * allows the user to change the cost per credit\r\n+     */\r\n+    private static void managementOptions(){\r\n+        if(running) {\r\n+            try {\r\n+                System.out.println(\"Enter a cost per credit in pence\");\r\n+                System.out.print(\"Cost per credit-- \");\r\n+                int cost = input.nextInt();\r\n+                mp3.setCostPerCredit(cost);\r\n+            }catch (Exception ex){\r\n+                System.out.println(\"Invalid Data Entered\");\r\n+            }\r\n+        }else {\r\n+            System.out.println(\"System is switched off\");\r\n+        }\r\n \r\n     }\r\n \r\n@@ -117,34 +129,37 @@ private static void selectFromFullList(){\n                 if(mp3.getCostPerCredit() == 0){\r\n                     System.out.println(\"All songs are free!!\");\r\n                 }else {\r\n-                    System.out.println(\"Song plays cost \" + mp3.getCostPerCredit() + \"p per credit\");\r\n+                    System.out.println(\"You have \" + mp3.getCredits() + \" credits available\");\r\n                 }\r\n                 String[] songs = mp3.getTuneInfo();\r\n                 int len = songs.length;\r\n \r\n+                //format the data to display properly\r\n                 String[] display = new String[len];\r\n                 int index = 0;\r\n                 for (String song : songs) {\r\n                     String artist = song.toString();\r\n                     String[] tunes = artist.split(\",\");\r\n-                    display[index] = tunes[1] + \" By\" + tunes[2];\r\n+                    display[index] = tunes[1] + \" By\" + tunes[2] + \" ID, \" +tunes[0];\r\n                     index++;\r\n                 }\r\n+                bubbleSortAsc(display);\r\n                 System.out.println();\r\n                 Menu songMenu = new Menu(\"Select a Song\", display);\r\n                 int choice = songMenu.getUserChoice();\r\n+                int tuneId = retrieveTuneID(display, choice);\r\n \r\n-                System.out.println(mp3.play(choice - 1));\r\n+                System.out.println(mp3.play(tuneId - 1));\r\n                 System.out.println();\r\n-                System.out.println(\"Balance: \" + mp3.getCredits()+\"p\");\r\n+                System.out.println(\"Credits Remaining: \" + mp3.getCredits());\r\n \r\n             }else{\r\n                 System.out.println(\"MP3 Player has no songs\");\r\n             }\r\n \r\n         }else{\r\n             System.out.println(\"System is switched off\");\r\n-        }\r\n+    }\r\n     }\r\n     /*\r\n     * Allows the user to select a song by viewing the artist first\r\n@@ -155,16 +170,16 @@ private static void selectTuneByArtist(){\n                 if(mp3.getCostPerCredit() == 0){\r\n                     System.out.println(\"All songs are free!!\");\r\n                 }else {\r\n-                    System.out.println(\"Song plays cost \" + mp3.getCostPerCredit() + \"p per credit\");\r\n+                    System.out.println(\"You have \" + mp3.getCredits() + \" credits available\");\r\n                 }\r\n                 System.out.println();\r\n-                String[] songs = mp3.getTuneInfo();\r\n+                String songs[] = mp3.getTuneInfo();\r\n                 int len = songs.length;\r\n \r\n-                //Splits the getTuneInfo and isolates the artists and prints them\r\n                 String[] artists = new String[len];\r\n                 int index = 0;\r\n-                for (int i = 0; i < len; i++) {\r\n+\r\n+                for (int i = 0; i < artists.length; i++) {\r\n                     String artist = songs[i].toString();\r\n                     String[] tunes = artist.split(\",\");\r\n                     artists[index] = tunes[2];\r\n@@ -173,29 +188,41 @@ private static void selectTuneByArtist(){\n \r\n                 //sorts the artists in ascending order a-z\r\n                 bubbleSortAsc(artists);\r\n-                /**\r\n-                 * Remove duplicates partially works, it removes the first set of duplicates, however any duplicates that follow will not be removed\r\n-                 */\r\n                 len = removeDuplicateElements(artists, len);\r\n-\r\n-                int count = 1;\r\n-                for (int i = 0; i < artists.length; i++) {\r\n-                    System.out.println(count++ + \". \" + artists[i]);\r\n+                for (int i = 0; i < len; i++) {\r\n+                    // print artists array for every index less than length of len\r\n+                    System.out.println((i + 1) + \".\" + artists[i]);\r\n                 }\r\n                 System.out.println();\r\n-\r\n-                System.out.println(\"Enter The Artist You Would Like To View\");\r\n-                Scanner artistChoice = new Scanner(System.in);\r\n-                String choice = artistChoice.nextLine();\r\n+                try {\r\n+                    System.out.println(\"Enter The Artist You Would Like To View\");\r\n+                    Scanner artistChoice = new Scanner(System.in);\r\n+                    String choice = artistChoice.nextLine();\r\n+\r\n+                    //format the data to display properly\r\n+                    String[] temp = mp3.getTuneInfo(choice);\r\n+                    String[] display = new String[temp.length];\r\n+                    index = 0;\r\n+                    for (String song : temp) {\r\n+                        String artist = song.toString();\r\n+                        String[] tunes = artist.split(\",\");\r\n+                        display[index] = tunes[1] + \" By\" + tunes[2] + \" - ID\" + \", \" +tunes[0];\r\n+                        index++;\r\n+                    }\r\n+                    bubbleSortAsc(display);\r\n+                    System.out.println();\r\n \r\n \r\n-                Menu artistMenu = new Menu(\"Songs Sorted By Artist\", mp3.getTuneInfo(choice));\r\n-                int songChoice = artistMenu.getUserChoice();\r\n+                    Menu artistMenu = new Menu(\"Songs Sorted By Artist\", display);\r\n+                    int songChoice = artistMenu.getUserChoice();\r\n+                    int tuneId = retrieveTuneID(display, songChoice);\r\n \r\n-                int song = retrieveTuneID(mp3.getTuneInfo(choice), songChoice);\r\n-                System.out.println(mp3.play(song - 1));\r\n-                System.out.println();\r\n-                System.out.println(\"Balance: \" + mp3.getCredits()+\"p\");\r\n+                    System.out.println(mp3.play(tuneId - 1));\r\n+                    System.out.println();\r\n+                    System.out.println(\"Credits Remaining \" + mp3.getCredits());\r\n+                } catch (NullPointerException ex) {\r\n+                    System.out.println(\"Invalid choice\");\r\n+                }\r\n             }else{\r\n                 System.out.println(\"MP3 Player has no songs\");\r\n             }\r\n@@ -214,7 +241,7 @@ private static void selectTuneByGenre() {\n                 if(mp3.getCostPerCredit() == 0){\r\n                     System.out.println(\"All songs are free!!\");\r\n                 }else {\r\n-                    System.out.println(\"Song plays cost \" + mp3.getCostPerCredit() + \"p per credit\");\r\n+                    System.out.println(\"You have \" + mp3.getCredits() + \" credits available\");\r\n                 }\r\n                 System.out.println();\r\n                 String[] songs = mp3.getTuneInfo();\r\n@@ -238,10 +265,7 @@ private static void selectTuneByGenre() {\n                     System.out.println(count + \". \" + genres[i]);\r\n                     count++;\r\n                 }\r\n-                System.out.println(count + \". \" + \" Unknown\");\r\n                 System.out.println();\r\n-                System.out.println(\"Balance: \" + mp3.getCredits()+\"p\");\r\n-\r\n                 Genre genre;\r\n                 //validation\r\n                 int num = 0;\r\n@@ -273,15 +297,27 @@ private static void selectTuneByGenre() {\n                 } else {\r\n                     genre = Genre.OTHER;\r\n                 }\r\n-                Menu genreMenu = new Menu(\"Songs Sorted By Genre\", mp3.getTuneInfo(genre));\r\n-                int songChoice = genreMenu.getUserChoice();\r\n \r\n-                int song = retrieveTuneID(mp3.getTuneInfo(genre), songChoice);\r\n+                //format the data to display properly\r\n+                String[] temp = mp3.getTuneInfo(genre);\r\n+                String[] display = new String[temp.length];\r\n+                index = 0;\r\n+                for (String song : temp) {\r\n+                    String artist = song.toString();\r\n+                    String[] tunes = artist.split(\",\");\r\n+                    display[index] = tunes[1] + \" By\" + tunes[2] + \" ID, \" +tunes[0];\r\n+                    index++;\r\n+                }\r\n+                bubbleSortAsc(display);\r\n+                System.out.println();\r\n \r\n+                Menu genreMenu = new Menu(\"Songs Sorted By Genre\", display);\r\n+                int choice = genreMenu.getUserChoice();\r\n+                int tuneId = retrieveTuneID(display, choice);\r\n \r\n-                System.out.println(mp3.play(song - 1));\r\n+                System.out.println(mp3.play(tuneId - 1));\r\n                 System.out.println();\r\n-                System.out.println(\"Balance: \" + mp3.getCredits()+\"p\");\r\n+                System.out.println(\"Credits Remaining: \" + mp3.getCredits());\r\n             }else {\r\n                 System.out.println(\"MP3 Player has no songs\");\r\n             }\r\n@@ -296,28 +332,32 @@ private static void selectTuneByGenre() {\n      */\r\n     private static void displayTopTen(){\r\n         if(running){\r\n-            if(mp3.getTuneInfo() != null) {\r\n-                String[] songs = mp3.getTuneInfo();\r\n-                String[] songPlays = new String[songs.length];\r\n+            if(mp3.getTuneInfo() != null )  {\r\n+                if(mp3.getTuneInfo().length >= 10) {\r\n+                    String[] songs = mp3.getTuneInfo();\r\n+                    String[] songPlays = new String[songs.length];\r\n \r\n-                for (int i = 0; i < songs.length; i++) {\r\n-                    String[] tunes = songs[i].split(\",\");\r\n+                    for (int i = 0; i < songs.length; i++) {\r\n+                        String[] tunes = songs[i].split(\",\");\r\n \r\n-                    songPlays[i] = tunes[5] + \" Plays - \" + tunes[1] + \" By\" + tunes[2];\r\n-                }\r\n-                //sorts song plays in descending order\r\n-                bubbleSortDesc(songPlays);\r\n+                        songPlays[i] = tunes[5] + \" Plays - \" + tunes[1] + \" By\" + tunes[2];\r\n+                    }\r\n+                    //sorts song plays in descending order\r\n+                    bubbleSortDesc(songPlays);\r\n \r\n-                String title = \"Top Ten Songs\";\r\n-                System.out.println(title);\r\n-                for (int i = 0; i < title.length(); i++) {\r\n-                    System.out.print(\"+\");\r\n-                }\r\n-                System.out.println();\r\n+                    String title = \"Top Ten Songs\";\r\n+                    System.out.println(title);\r\n+                    for (int i = 0; i < title.length(); i++) {\r\n+                        System.out.print(\"+\");\r\n+                    }\r\n+                    System.out.println();\r\n \r\n \r\n-                for (int i = 0; i < 10; i++) {\r\n-                    System.out.println(songPlays[i]);\r\n+                    for (int i = 0; i < 10; i++) {\r\n+                        System.out.println(songPlays[i]);\r\n+                    }\r\n+                }else{\r\n+                    System.out.println(\"Not enough songs to display top 10\");\r\n                 }\r\n             }else{\r\n                 System.out.println(\"MP3 Player is empty\");\r\n@@ -326,7 +366,7 @@ private static void displayTopTen(){\n         }else {\r\n             System.out.println(\"System is switched off\");\r\n         }\r\n-     }\r\n+    }\r\n \r\n     /**\r\n      * retrieves the tune ID and allows a tune to be played by index as opposed to ID\r\n@@ -336,7 +376,7 @@ private static void displayTopTen(){\n      */\r\n      private static int retrieveTuneID(String[] data, int choice){\r\n         String[] ID = data[choice-1].split(\", \");\r\n-        String tuneID = ID[0];\r\n+        String tuneID = ID[1];\r\n         int tuneId = Integer.parseInt(tuneID);\r\n         return tuneId;\r\n      }\r\n@@ -348,7 +388,8 @@ private static void addNewTune() {\n             String title = \"\";\r\n             String artist = \"\";\r\n             int duration = 0;\r\n-            Genre genre;\r\n+            boolean ok = false;\r\n+            Genre genre = null;\r\n             while(title.length() < 1){\r\n             System.out.println(\"Enter the song title\");\r\n             title = tune.nextLine();\r\n@@ -357,24 +398,39 @@ private static void addNewTune() {\n                 System.out.println(\"Enter the artist\");\r\n                 artist = tune.nextLine();\r\n             }\r\n-            while (duration <= 0){\r\n-            System.out.println(\"Enter the duration\");\r\n-            duration = tune.nextInt();\r\n-            }\r\n-            System.out.println(\"Enter the Genre:\\n1. Rock\\n2. Pop\\n3. Dance\\n4. Jazz\\n5. Classical\\n6. Other\");\r\n-            int num = tune.nextInt();\r\n-            if (num == 1) {\r\n-                    genre = Genre.ROCK;\r\n-                } else if (num == 2) {\r\n-                    genre = Genre.POP;\r\n-                } else if (num == 3) {\r\n-                    genre = Genre.DANCE;\r\n-                } else if (num == 4) {\r\n-                    genre = Genre.JAZZ;\r\n-                } else if (num == 5) {\r\n-                    genre = Genre.CLASSICAL;\r\n-                } else {\r\n-                    genre = Genre.OTHER;\r\n+            do {\r\n+                System.out.println(\"Enter the duration\");\r\n+                try {\r\n+                    duration = input.nextInt();\r\n+                    if (duration > 0) {\r\n+                        ok = true;\r\n+                    }\r\n+                } catch (Exception ex) {\r\n+                    System.out.println(\"Error invalid input.\");\r\n+                    input.nextLine();\r\n+                }\r\n+            }while (duration <= 0);\r\n+                System.out.println(\"Enter the Genre:\\n1. Rock\\n2. Pop\\n3. Dance\\n4. Jazz\\n5. Classical\\n6. Other\");\r\n+                try {\r\n+                    int num = tune.nextInt();\r\n+                    if (num == 1) {\r\n+                        genre = Genre.ROCK;\r\n+                    } else if (num == 2) {\r\n+                        genre = Genre.POP;\r\n+                    } else if (num == 3) {\r\n+                        genre = Genre.DANCE;\r\n+                    } else if (num == 4) {\r\n+                        genre = Genre.JAZZ;\r\n+                    } else if (num == 5) {\r\n+                        genre = Genre.CLASSICAL;\r\n+                    } else {\r\n+                        genre = Genre.OTHER;\r\n+\r\n+                    }\r\n+\r\n+                } catch (Exception e) {\r\n+                    System.out.println(\"Invalid Choice\");\r\n+                    System.out.println();\r\n                 }\r\n \r\n                     if (mp3.addTune(title, artist, duration, genre)) {\r\n@@ -400,7 +456,7 @@ private static void switchOff(){\n     }\r\n     //switches the system on\r\n     private static void switchOn(){\r\n-        if(mp3.switchOff()){\r\n+        if(mp3.switchOn()){\r\n             System.out.println(\"The system has been switched on\");\r\n             running = true;\r\n         }else{\r\n@@ -418,23 +474,17 @@ private static int removeDuplicateElements(String[] data, int n){\n         if (n==0 || n==1){\r\n             return n;\r\n         }\r\n-\r\n-        String[] temp = new String[n];\r\n-        int j = 0;\r\n-        for (int i=0; i<n-1; i++){\r\n+        int j = 0;//for next element\r\n+        for (int i=0; i < n-1; i++){\r\n             if (!data[i].equalsIgnoreCase(data[i+1])){\r\n-                temp[j] = data[i];\r\n-                j++;\r\n+                data[j++] = data[i];\r\n             }\r\n         }\r\n-\r\n-        // Changing original array\r\n-        for (int i=0; i<j; i++){\r\n-            data[i] = temp[i];\r\n-        }\r\n+        data[j++] = data[n-1];\r\n         return j;\r\n     }\r\n \r\n+\r\n     /**\r\n      *\r\n      * @param data array to be sorted in ascending order\r\n@@ -474,4 +524,6 @@ private static void bubbleSortDesc(String[] data) {\n             }\r\n         }\r\n     }\r\n+\r\n+\r\n }\n\\ No newline at end of file"
  },
  {
    "sha": "5f5008c56b7f7e3786b9f3384a49440a8cc5b41f",
    "filename": "src/part03/MP3PlayerTest.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part03/MP3PlayerTest.java",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/part03/MP3PlayerTest.java",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/part03/MP3PlayerTest.java?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -0,0 +1,41 @@\n+package part03;\r\n+\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+class MP3PlayerTest {\r\n+\r\n+    @BeforeEach\r\n+    void setUp() {\r\n+\r\n+    }\r\n+\r\n+    @Test\r\n+    void getTuneInfo() throws Exception {\r\n+\r\n+    }\r\n+\r\n+    @Test\r\n+    void testGetTuneInfo() {\r\n+    }\r\n+\r\n+    @Test\r\n+    void testGetTuneInfo1() {\r\n+    }\r\n+\r\n+    @Test\r\n+    void play() {\r\n+    }\r\n+\r\n+    @Test\r\n+    void addTune() {\r\n+    }\r\n+\r\n+    @Test\r\n+    void switchOff() {\r\n+    }\r\n+\r\n+    @Test\r\n+    void switchOn() {\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "355fd9da3857ba2771685a395332de2ef84a1f59",
    "filename": "src/soundData.csv",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/DannyMart18/CSC1029Assessment2/blob/7843328023c2cceca3ae45f9543df6f73f3d735a/src/soundData.csv",
    "raw_url": "https://github.com/DannyMart18/CSC1029Assessment2/raw/7843328023c2cceca3ae45f9543df6f73f3d735a/src/soundData.csv",
    "contents_url": "https://api.github.com/repos/DannyMart18/CSC1029Assessment2/contents/src/soundData.csv?ref=7843328023c2cceca3ae45f9543df6f73f3d735a",
    "patch": "@@ -0,0 +1,13 @@\n+ID, Title, Artist, Duration, Genre, Play Count\r\n+1, Highway To Hell, AC/DC, 350, Rock and Roll, 0, \r\n+2, Take On Me, A-Ha, 500, Easy Listening Pop, 0, \r\n+3, Fur Elise, Beethoven, 240, Classical, 0, \r\n+4, Lies, MK, 120, Techno Dance, 0, \r\n+5, So What, Miles Davis, 400, Smooth Jazz, 0, \r\n+6, She's a Hero, Saint Sapphire, 300, Unknown Genre, 0, \r\n+7, Back In Black, AC/DC, 350, Rock and Roll, 0, \r\n+8, Caroline, Status Quo, 350, Rock and Roll, 0, \r\n+9, Symphony, Mozart, 350, Classical, 0, \r\n+10, How To Save A Life, The Fray, 350, Easy Listening Pop, 0, \r\n+11, Down Down, Status Quo, 350, Rock and Roll, 0, \r\n+12, Baby, Justin Bieber, 350, Easy Listening Pop, 0, \r"
  }
]
