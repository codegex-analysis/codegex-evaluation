[
  {
    "sha": "74e0050f0827979f3277a1ed09f4cfd10f2dfee2",
    "filename": "src/main/java/seedu/address/ui/CompletableDeadlineCard.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/main/java/seedu/address/ui/CompletableDeadlineCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/main/java/seedu/address/ui/CompletableDeadlineCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/main/java/seedu/address/ui/CompletableDeadlineCard.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -36,7 +36,16 @@ public CompletableDeadlineCard(CompletableDeadline deadline, int displayedIndex)\n         id.setText(displayedIndex + \". \");\n         description.setText(deadline.getDescription());\n         date.setText(DateUtil.decodeDate(deadline.getBy()));\n-        completedLabel.setText(deadline.getIsDone() ? \"笨能" : \"\");\n+        completedLabel.setText(getTextToDisplay(deadline.getIsDone()));\n+    }\n+\n+    /**\n+     * Returns the text of the completed label that is to be displayed.\n+     *\n+     * @return {@code String} containing the text that is to be displayed.\n+     */\n+    public static String getTextToDisplay(boolean isDone) {\n+        return isDone ? \"笨能" : \"\";\n     }\n \n     @Override"
  },
  {
    "sha": "cb2a6ff8414e1f0eeb9285912cf334d5468a12e8",
    "filename": "src/main/java/seedu/address/ui/CompletableTodoCard.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/main/java/seedu/address/ui/CompletableTodoCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/main/java/seedu/address/ui/CompletableTodoCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/main/java/seedu/address/ui/CompletableTodoCard.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -36,10 +36,12 @@ public CompletableTodoCard(CompletableTodo todo, int displayedIndex) {\n     }\n \n     /**\n-     * Mark this todo as done.\n+     * Returns the text of the completed label that is to be displayed.\n+     *\n+     * @return {@code String} containing the text that is to be displayed.\n      */\n-    public void markAsDone() {\n-        completedLabel.setText(todo.getIsDone() ? \"笨能" : \"\");\n+    public static String getTextToDisplay(boolean isDone) {\n+        return isDone ? \"笨能" : \"\";\n     }\n \n     @Override"
  },
  {
    "sha": "1c60414a9b8c63dcb3d9903f6a7b2562b1619e44",
    "filename": "src/test/java/guitests/guihandles/CompletableDeadlineCardHandle.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/CompletableDeadlineCardHandle.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/CompletableDeadlineCardHandle.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/guitests/guihandles/CompletableDeadlineCardHandle.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,61 @@\n+package guitests.guihandles;\n+\n+import static seedu.address.commons.util.DateUtil.decodeDate;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import seedu.address.model.task.CompletableDeadline;\n+import seedu.address.ui.CompletableDeadlineCard;\n+\n+/**\n+ * Provides a handle to a {@code CompletableDeadlineCard}.\n+ */\n+public class CompletableDeadlineCardHandle extends NodeHandle<Node> {\n+    private static final String ID_FIELD_ID = \"#id\";\n+    private static final String DESCRIPTION_FIELD_ID = \"#description\";\n+    private static final String DATE_FIELD_ID = \"#date\";\n+    private static final String COMPLETED_FIELD_ID = \"#completedLabel\";\n+\n+    private final Label idLabel;\n+    private final Label descriptionLabel;\n+    private final Label dateLabel;\n+    private final Label completedLabel;\n+\n+    /**\n+     * Constructs a {@code CompletableDeadlineCardHandle} handler object.\n+     * @param cardNode Node of {@code CompletableDeadlineCard}.\n+     */\n+    public CompletableDeadlineCardHandle(Node cardNode) {\n+        super(cardNode);\n+\n+        idLabel = getChildNode(ID_FIELD_ID);\n+        descriptionLabel = getChildNode(DESCRIPTION_FIELD_ID);\n+        dateLabel = getChildNode(DATE_FIELD_ID);\n+        completedLabel = getChildNode(COMPLETED_FIELD_ID);\n+    }\n+\n+    public String getId() {\n+        return idLabel.getText();\n+    }\n+\n+    public String getDescription() {\n+        return descriptionLabel.getText();\n+    }\n+\n+    public String getDate() {\n+        return dateLabel.getText();\n+    }\n+\n+    public String getCompleted() {\n+        return completedLabel.getText();\n+    }\n+\n+    /**\n+     * Returns true if this handle contains a {@code CompletableDeadline}.\n+     */\n+    public boolean equals(CompletableDeadline deadline) {\n+        return getDescription().equals(deadline.getDescription())\n+                && getDate().equals(decodeDate(deadline.getBy()))\n+                && getCompleted().equals(CompletableDeadlineCard.getTextToDisplay(deadline.getIsDone()));\n+    }\n+}"
  },
  {
    "sha": "52c0a0a0671a3d632cd369558355236da388a433",
    "filename": "src/test/java/guitests/guihandles/CompletableTodoCardHandle.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/CompletableTodoCardHandle.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/CompletableTodoCardHandle.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/guitests/guihandles/CompletableTodoCardHandle.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,51 @@\n+package guitests.guihandles;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import seedu.address.model.task.CompletableTodo;\n+import seedu.address.ui.CompletableDeadlineCard;\n+\n+/**\n+ * Provides a handle to a {@code CompletableTodoCard}.\n+ */\n+public class CompletableTodoCardHandle extends NodeHandle<Node> {\n+    private static final String ID_FIELD_ID = \"#id\";\n+    private static final String DESCRIPTION_FIELD_ID = \"#description\";\n+    private static final String COMPLETED_FIELD_ID = \"#completedLabel\";\n+\n+    private final Label idLabel;\n+    private final Label descriptionLabel;\n+    private final Label completedLabel;\n+\n+    /**\n+     * Constructs a {@code CompletableTodoCardHandle} handler object.\n+     * @param cardNode Node of {@code CompletableTodoCard}.\n+     */\n+    public CompletableTodoCardHandle(Node cardNode) {\n+        super(cardNode);\n+\n+        idLabel = getChildNode(ID_FIELD_ID);\n+        descriptionLabel = getChildNode(DESCRIPTION_FIELD_ID);\n+        completedLabel = getChildNode(COMPLETED_FIELD_ID);\n+    }\n+\n+    public String getId() {\n+        return idLabel.getText();\n+    }\n+\n+    public String getDescription() {\n+        return descriptionLabel.getText();\n+    }\n+\n+    public String getCompleted() {\n+        return completedLabel.getText();\n+    }\n+\n+    /**\n+     * Returns true if this handle contains a {@code CompletableTodo}.\n+     */\n+    public boolean equals(CompletableTodo todo) {\n+        return getDescription().equals(todo.getDescription())\n+                && getCompleted().equals(CompletableDeadlineCard.getTextToDisplay(todo.getIsDone()));\n+    }\n+}"
  },
  {
    "sha": "81296b3f2526363bb6f148aeee863ef82a1934a5",
    "filename": "src/test/java/guitests/guihandles/EventCardHandle.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/EventCardHandle.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/EventCardHandle.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/guitests/guihandles/EventCardHandle.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,60 @@\n+package guitests.guihandles;\n+\n+import static seedu.address.commons.util.DateUtil.decodeDate;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import seedu.address.model.task.repeatable.Event;\n+\n+/**\n+ * Provides a handle to an {@code EventCard}.\n+ */\n+public class EventCardHandle extends NodeHandle<Node> {\n+    private static final String ID_FIELD_ID = \"#id\";\n+    private static final String DESCRIPTION_FIELD_ID = \"#eventDescription\";\n+    private static final String INTERVAL_FIELD_ID = \"#interval\";\n+    private static final String DATE_FIELD_ID = \"#date\";\n+\n+    private final Label idLabel;\n+    private final Label descriptionLabel;\n+    private final Label intervalLabel;\n+    private final Label dateLabel;\n+\n+    /**\n+     * Constructs an {@code EventCardHandle} handler object.\n+     * @param cardNode Node of {@code EventCard}.\n+     */\n+    public EventCardHandle(Node cardNode) {\n+        super(cardNode);\n+\n+        idLabel = getChildNode(ID_FIELD_ID);\n+        descriptionLabel = getChildNode(DESCRIPTION_FIELD_ID);\n+        intervalLabel = getChildNode(INTERVAL_FIELD_ID);\n+        dateLabel = getChildNode(DATE_FIELD_ID);\n+    }\n+\n+    public String getId() {\n+        return idLabel.getText();\n+    }\n+\n+    public String getDescription() {\n+        return descriptionLabel.getText();\n+    }\n+\n+    public String getInteval() {\n+        return intervalLabel.getText();\n+    }\n+\n+    public String getDate() {\n+        return dateLabel.getText();\n+    }\n+\n+    /**\n+     * Returns true if this handle contains an {@code Event}.\n+     */\n+    public boolean equals(Event event) {\n+        return getDescription().equals(event.getDescription())\n+                && getInteval().equals(event.getRecurrence().toString())\n+                && getDate().equals(decodeDate(event.getAt()));\n+    }\n+}"
  },
  {
    "sha": "c5c680178a8238832987b486a4bb9119ea024bb8",
    "filename": "src/test/java/guitests/guihandles/ProjectCardHandle.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/ProjectCardHandle.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/guitests/guihandles/ProjectCardHandle.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/guitests/guihandles/ProjectCardHandle.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,42 @@\n+package guitests.guihandles;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import seedu.address.model.project.Project;\n+\n+/**\n+ * Provides a handle to a {@code ProjectCard}.\n+ */\n+public class ProjectCardHandle extends NodeHandle<Node> {\n+    private static final String ID_FIELD_ID = \"#id\";\n+    private static final String NAME_FIELD_ID = \"#name\";\n+\n+    private final Label idLabel;\n+    private final Label nameLabel;\n+\n+    /**\n+     * Constructs a {@code ProjectCardHandle} handler object.\n+     * @param cardNode Node of {@code ProjectCard}.\n+     */\n+    public ProjectCardHandle(Node cardNode) {\n+        super(cardNode);\n+\n+        idLabel = getChildNode(ID_FIELD_ID);\n+        nameLabel = getChildNode(NAME_FIELD_ID);\n+    }\n+\n+    public String getId() {\n+        return idLabel.getText();\n+    }\n+\n+    public String getName() {\n+        return nameLabel.getText();\n+    }\n+\n+    /**\n+     * Returns true if this handle contains a {@code Project}.\n+     */\n+    public boolean equals(Project project) {\n+        return getName().equals(project.getProjectName().toString());\n+    }\n+}"
  },
  {
    "sha": "e0dc7c6b96d8d7c108edd2443191874ed228014d",
    "filename": "src/test/java/seedu/address/ui/CompletableDeadlineCardTest.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/CompletableDeadlineCardTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/CompletableDeadlineCardTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/seedu/address/ui/CompletableDeadlineCardTest.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,84 @@\n+package seedu.address.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.commons.util.DateUtil.encodeDate;\n+import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCompletableDeadline;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import guitests.guihandles.CompletableDeadlineCardHandle;\n+import seedu.address.commons.exceptions.DateConversionException;\n+import seedu.address.model.task.CompletableDeadline;\n+import seedu.address.testutil.DeadlineBuilder;\n+\n+/**\n+ * Contains tests for the {@code CompletableDeadlineCard}.\n+ */\n+public class CompletableDeadlineCardTest extends GuiUnitTest {\n+\n+    private static final boolean DONE = true;\n+    private static final boolean NOT_DONE = false;\n+\n+    @Test\n+    public void display_success() throws DateConversionException {\n+        // deadline is done\n+        CompletableDeadline deadlineIsDone = new DeadlineBuilder().withDescription(\"Display Test\")\n+                .withByDate(encodeDate(\"18-03-2021\")).withIsDone(DONE).build();\n+        CompletableDeadlineCard deadlineCard = new CompletableDeadlineCard(deadlineIsDone, 1);\n+        uiPartExtension.setUiPart(deadlineCard);\n+        assertCardDisplay(deadlineCard, deadlineIsDone, 1);\n+\n+        // deadline is not done\n+        CompletableDeadline deadlineIsNotDone = new DeadlineBuilder().withDescription(\"Display Test\")\n+                .withByDate(encodeDate(\"18-03-2021\")).withIsDone(NOT_DONE).build();\n+        deadlineCard = new CompletableDeadlineCard(deadlineIsNotDone, 2);\n+        uiPartExtension.setUiPart(deadlineCard);\n+        assertCardDisplay(deadlineCard, deadlineIsNotDone, 2);\n+    }\n+\n+    @Test\n+    public void equals() {\n+        CompletableDeadline deadline = new DeadlineBuilder().build();\n+        CompletableDeadlineCard deadlineCard = new CompletableDeadlineCard(deadline, 0);\n+\n+        // same deadline, same index -> returns true\n+        CompletableDeadlineCard copy = new CompletableDeadlineCard(deadline, 0);\n+        assertTrue(deadlineCard.equals(copy));\n+\n+        // same object -> returns true\n+        assertTrue(deadlineCard.equals(deadlineCard));\n+\n+        // null -> returns false\n+        assertFalse(deadlineCard.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(deadlineCard.equals(0));\n+\n+        // different deadline, same index -> returns false\n+        CompletableDeadline differentDeadline = new DeadlineBuilder().withDescription(\"differentDescription\").build();\n+        assertFalse(deadlineCard.equals(new CompletableDeadlineCard(differentDeadline, 0)));\n+\n+        // same deadline, different index -> returns false\n+        assertFalse(deadlineCard.equals(new CompletableDeadlineCard(deadline, 1)));\n+    }\n+\n+    /**\n+     * Asserts that {@code deadlineCard} displays the details of {@code expectedDeadline}\n+     * correctly and matches {@code expectedId}.\n+     */\n+    private void assertCardDisplay(\n+            CompletableDeadlineCard deadlineCard, CompletableDeadline expectedDeadline, int expectedId) {\n+        guiRobot.pauseForHuman();\n+\n+        CompletableDeadlineCardHandle deadlineCardHandle =\n+                new CompletableDeadlineCardHandle(deadlineCard.getRoot());\n+\n+        // verify id is displayed correctly\n+        assertEquals(Integer.toString(expectedId) + \". \", deadlineCardHandle.getId());\n+\n+        // verify person details are displayed correctly\n+        assertCardDisplaysCompletableDeadline(expectedDeadline, deadlineCardHandle);\n+    }\n+}"
  },
  {
    "sha": "3e85a640ff756aa69a69bd160356b77386812e2e",
    "filename": "src/test/java/seedu/address/ui/CompletableTodoCardTest.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/CompletableTodoCardTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/CompletableTodoCardTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/seedu/address/ui/CompletableTodoCardTest.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,81 @@\n+package seedu.address.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCompletableTodo;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import guitests.guihandles.CompletableTodoCardHandle;\n+import seedu.address.model.task.CompletableTodo;\n+import seedu.address.testutil.TodoBuilder;\n+\n+/**\n+ * Contains tests for the {@code CompletableTodoCard}.\n+ */\n+public class CompletableTodoCardTest extends GuiUnitTest {\n+\n+    private static final boolean DONE = true;\n+    private static final boolean NOT_DONE = false;\n+\n+    @Test\n+    public void display_success() {\n+        // todo is done\n+        CompletableTodo todoIsDone = new TodoBuilder().withDescription(\"Display Test\").withIsDone(DONE).build();\n+        CompletableTodoCard todoCard = new CompletableTodoCard(todoIsDone, 1);\n+        uiPartExtension.setUiPart(todoCard);\n+        assertCardDisplay(todoCard, todoIsDone, 1);\n+\n+        // todo is not done\n+        CompletableTodo todoIsNotDone = new TodoBuilder().withDescription(\"Display Test\")\n+                .withIsDone(NOT_DONE).build();\n+        todoCard = new CompletableTodoCard(todoIsNotDone, 2);\n+        uiPartExtension.setUiPart(todoCard);\n+        assertCardDisplay(todoCard, todoIsNotDone, 2);\n+    }\n+\n+    @Test\n+    public void equals() {\n+        CompletableTodo todo = new TodoBuilder().build();\n+        CompletableTodoCard todoCard = new CompletableTodoCard(todo, 0);\n+\n+        // same todo, same index -> returns true\n+        CompletableTodoCard copy = new CompletableTodoCard(todo, 0);\n+        assertTrue(todoCard.equals(copy));\n+\n+        // same object -> returns true\n+        assertTrue(todoCard.equals(todoCard));\n+\n+        // null -> returns false\n+        assertFalse(todoCard.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(todoCard.equals(0));\n+\n+        // different todo, same index -> returns false\n+        CompletableTodo differentTodo = new TodoBuilder().withDescription(\"differentDescription\").build();\n+        assertFalse(todoCard.equals(new CompletableTodoCard(differentTodo, 0)));\n+\n+        // same todo, different index -> returns false\n+        assertFalse(todoCard.equals(new CompletableTodoCard(todo, 1)));\n+    }\n+\n+    /**\n+     * Asserts that {@code todoCard} displays the details of {@code expectedTodo}\n+     * correctly and matches {@code expectedId}.\n+     */\n+    private void assertCardDisplay(\n+            CompletableTodoCard todoCard, CompletableTodo expectedTodo, int expectedId) {\n+        guiRobot.pauseForHuman();\n+\n+        CompletableTodoCardHandle todoCardHandle =\n+                new CompletableTodoCardHandle(todoCard.getRoot());\n+\n+        // verify id is displayed correctly\n+        assertEquals(Integer.toString(expectedId) + \". \", todoCardHandle.getId());\n+\n+        // verify person details are displayed correctly\n+        assertCardDisplaysCompletableTodo(expectedTodo, todoCardHandle);\n+    }\n+}"
  },
  {
    "sha": "88e81bccf9a2f17e49c7fe1a916bc2c266956d7f",
    "filename": "src/test/java/seedu/address/ui/EventCardTest.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/EventCardTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/EventCardTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/seedu/address/ui/EventCardTest.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,80 @@\n+package seedu.address.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.commons.util.DateUtil.encodeDate;\n+import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEvent;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import guitests.guihandles.EventCardHandle;\n+import seedu.address.commons.exceptions.DateConversionException;\n+import seedu.address.model.task.Interval;\n+import seedu.address.model.task.repeatable.Event;\n+import seedu.address.testutil.EventBuilder;\n+\n+/**\n+ * Contains tests for the {@code EventCard}.\n+ */\n+public class EventCardTest extends GuiUnitTest {\n+\n+    @Test\n+    public void display_success() throws DateConversionException {\n+        // event has no interval\n+        Event eventNoInterval = new EventBuilder().withDescription(\"Display Test\")\n+                .withInterval(Interval.NONE).withAtDate(encodeDate(\"12-12-2021\")).build();\n+        EventCard eventCard = new EventCard(eventNoInterval, 1);\n+        uiPartExtension.setUiPart(eventCard);\n+        assertCardDisplay(eventCard, eventNoInterval, 1);\n+\n+        // event has interval\n+        Event eventHasInterval = new EventBuilder().withDescription(\"Display Test\")\n+                .withInterval(Interval.WEEKLY).withAtDate(encodeDate(\"12-12-2021\")).build();\n+        eventCard = new EventCard(eventHasInterval, 2);\n+        uiPartExtension.setUiPart(eventCard);\n+        assertCardDisplay(eventCard, eventHasInterval, 2);\n+    }\n+\n+    @Test\n+    public void equals() {\n+        Event event = new EventBuilder().build();\n+        EventCard eventCard = new EventCard(event, 0);\n+\n+        // same event, same index -> returns true\n+        EventCard copy = new EventCard(event, 0);\n+        assertTrue(eventCard.equals(copy));\n+\n+        // same object -> returns true\n+        assertTrue(eventCard.equals(eventCard));\n+\n+        // null -> returns false\n+        assertFalse(eventCard.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(eventCard.equals(0));\n+\n+        // different event, same index -> returns false\n+        Event differentEvent = new EventBuilder().withDescription(\"differentDescription\").build();\n+        assertFalse(eventCard.equals(new EventCard(differentEvent, 0)));\n+\n+        // same event, different index -> returns false\n+        assertFalse(eventCard.equals(new EventCard(event, 1)));\n+    }\n+\n+    /**\n+     * Asserts that {@code eventCard} displays the details of {@code expectedEvent}\n+     * correctly and matches {@code expectedId}.\n+     */\n+    private void assertCardDisplay(EventCard eventCard, Event expectedEvent, int expectedId) {\n+        guiRobot.pauseForHuman();\n+\n+        EventCardHandle eventCardHandle = new EventCardHandle(eventCard.getRoot());\n+\n+        // verify id is displayed correctly\n+        assertEquals(Integer.toString(expectedId) + \". \", eventCardHandle.getId());\n+\n+        // verify person details are displayed correctly\n+        assertCardDisplaysEvent(expectedEvent, eventCardHandle);\n+    }\n+}"
  },
  {
    "sha": "409eb3942c84ab302264aad9a4ab7a3b402aa9d3",
    "filename": "src/test/java/seedu/address/ui/ProjectCardTest.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/ProjectCardTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/ProjectCardTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/seedu/address/ui/ProjectCardTest.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -0,0 +1,68 @@\n+package seedu.address.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysProject;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import guitests.guihandles.ProjectCardHandle;\n+import seedu.address.model.project.Project;\n+import seedu.address.testutil.ProjectBuilder;\n+\n+/**\n+ * Contains tests for the {@code ProjectCard}.\n+ */\n+public class ProjectCardTest extends GuiUnitTest {\n+\n+    @Test\n+    public void display_success() {\n+        Project project = new ProjectBuilder().withName(\"Display Test\").build();\n+        ProjectCard projectCard = new ProjectCard(project, 1);\n+        uiPartExtension.setUiPart(projectCard);\n+        assertCardDisplay(projectCard, project, 1);\n+    }\n+\n+    @Test\n+    public void equals() {\n+        Project project = new ProjectBuilder().build();\n+        ProjectCard projectCard = new ProjectCard(project, 0);\n+\n+        // same project, same index -> returns true\n+        ProjectCard copy = new ProjectCard(project, 0);\n+        assertTrue(projectCard.equals(copy));\n+\n+        // same object -> returns true\n+        assertTrue(projectCard.equals(projectCard));\n+\n+        // null -> returns false\n+        assertFalse(projectCard.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(projectCard.equals(0));\n+\n+        // different project, same index -> returns false\n+        Project differentProject = new ProjectBuilder().withName(\"differentDescription\").build();\n+        assertFalse(projectCard.equals(new ProjectCard(differentProject, 0)));\n+\n+        // same project, different index -> returns false\n+        assertFalse(projectCard.equals(new ProjectCard(project, 1)));\n+    }\n+\n+    /**\n+     * Asserts that {@code projectCard} displays the details of {@code expectedProject}\n+     * correctly and matches {@code expectedId}.\n+     */\n+    private void assertCardDisplay(ProjectCard projectCard, Project expectedProject, int expectedId) {\n+        guiRobot.pauseForHuman();\n+\n+        ProjectCardHandle projectCardHandle = new ProjectCardHandle(projectCard.getRoot());\n+\n+        // verify id is displayed correctly\n+        assertEquals(Integer.toString(expectedId) + \". \", projectCardHandle.getId());\n+\n+        // verify person details are displayed correctly\n+        assertCardDisplaysProject(expectedProject, projectCardHandle);\n+    }\n+}"
  },
  {
    "sha": "25040d93941d34add5da86da51fbd0adb87d4058",
    "filename": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "status": "modified",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/19f0513aeee9d64608621eb1b780cb2cdf86714d/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java?ref=19f0513aeee9d64608621eb1b780cb2cdf86714d",
    "patch": "@@ -1,14 +1,25 @@\n package seedu.address.ui.testutil;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static seedu.address.commons.util.DateUtil.decodeDate;\n \n import java.util.List;\n import java.util.stream.Collectors;\n \n+import guitests.guihandles.CompletableDeadlineCardHandle;\n+import guitests.guihandles.CompletableTodoCardHandle;\n+import guitests.guihandles.EventCardHandle;\n import guitests.guihandles.PersonCardHandle;\n import guitests.guihandles.PersonListPanelHandle;\n+import guitests.guihandles.ProjectCardHandle;\n import guitests.guihandles.ResultDisplayHandle;\n import seedu.address.model.person.Person;\n+import seedu.address.model.project.Project;\n+import seedu.address.model.task.CompletableDeadline;\n+import seedu.address.model.task.CompletableTodo;\n+import seedu.address.model.task.repeatable.Event;\n+import seedu.address.ui.CompletableDeadlineCard;\n+import seedu.address.ui.CompletableTodoCard;\n \n /**\n  * A set of assertion methods useful for writing GUI tests.\n@@ -38,6 +49,45 @@ public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHan\n                 actualCard.getTags());\n     }\n \n+    /**\n+     * Asserts that {@code actualCard} displays the details of {@code expectedCompletableDeadline}.\n+     */\n+    public static void assertCardDisplaysCompletableDeadline(\n+            CompletableDeadline expectedDeadline, CompletableDeadlineCardHandle actualCard) {\n+        assertEquals(expectedDeadline.getDescription(), actualCard.getDescription());\n+        assertEquals(decodeDate(expectedDeadline.getBy()), actualCard.getDate());\n+        String expectedCompletedText = CompletableDeadlineCard\n+                .getTextToDisplay(expectedDeadline.getIsDone());\n+        assertEquals(expectedCompletedText, actualCard.getCompleted());\n+    }\n+\n+    /**\n+     * Asserts that {@code actualCard} displays the details of {@code expectedCompletableTodo}.\n+     */\n+    public static void assertCardDisplaysCompletableTodo(\n+            CompletableTodo expectedTodo, CompletableTodoCardHandle actualCard) {\n+        assertEquals(expectedTodo.getDescription(), actualCard.getDescription());\n+        String expectedCompletedText = CompletableTodoCard\n+                .getTextToDisplay(expectedTodo.getIsDone());\n+        assertEquals(expectedCompletedText, actualCard.getCompleted());\n+    }\n+\n+    /**\n+     * Asserts that {@code actualCard} displays the details of {@code expectedEvent}.\n+     */\n+    public static void assertCardDisplaysEvent(Event expectedEvent, EventCardHandle actualCard) {\n+        assertEquals(expectedEvent.getDescription(), actualCard.getDescription());\n+        assertEquals(expectedEvent.getRecurrence().toString(), actualCard.getInteval());\n+        assertEquals(decodeDate(expectedEvent.getAt()), actualCard.getDate());\n+    }\n+\n+    /**\n+     * Asserts that {@code actualCard} displays the details of {@code expectedProject}.\n+     */\n+    public static void assertCardDisplaysProject(Project expectedProject, ProjectCardHandle actualCard) {\n+        assertEquals(expectedProject.getProjectName().toString(), actualCard.getName());\n+    }\n+\n     /**\n      * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and\n      * in the correct order."
  }
]
