[
  {
    "sha": "78de1be92285d43b72580d6dcf71f775f6b3e7d4",
    "filename": "src/test/java/seedu/address/logic/commands/DeleteTodoCommandTest.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/blob/6f38d362e6a3b9232e7b059a7b0fc053b8a2c7a8/src/test/java/seedu/address/logic/commands/DeleteTodoCommandTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-2/tp/raw/6f38d362e6a3b9232e7b059a7b0fc053b8a2c7a8/src/test/java/seedu/address/logic/commands/DeleteTodoCommandTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-2/tp/contents/src/test/java/seedu/address/logic/commands/DeleteTodoCommandTest.java?ref=6f38d362e6a3b9232e7b059a7b0fc053b8a2c7a8",
    "patch": "@@ -0,0 +1,141 @@\n+package seedu.address.logic.commands;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static seedu.address.commons.core.Messages.MESSAGE_DELETE_TODO_SUCCESS;\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;\n+import static seedu.address.testutil.Assert.assertThrows;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;\n+import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;\n+import static seedu.address.testutil.TypicalProjects.getTypicalProjectsFolder;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.commons.exceptions.DateConversionException;\n+import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.model.Model;\n+import seedu.address.model.ModelManager;\n+import seedu.address.model.ProjectsFolder;\n+import seedu.address.model.UserPrefs;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.project.Project;\n+import seedu.address.model.task.todo.Todo;\n+import seedu.address.testutil.ProjectBuilder;\n+import seedu.address.testutil.TodoBuilder;\n+\n+public class DeleteTodoCommandTest {\n+\n+    private Model model;\n+\n+    @BeforeEach\n+    public void setUp() throws DateConversionException {\n+        model = new ModelManager(getTypicalAddressBook(), getTypicalProjectsFolder(), new UserPrefs());\n+    }\n+    \n+    @Test\n+    public void execute_validIndexUnfilteredList_success() throws DateConversionException {\n+        Todo todoToDelete = new TodoBuilder().build();\n+        Project projectToEdit = model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased());\n+        Project editedProject = new ProjectBuilder(projectToEdit).build();\n+        editedProject.addTodo(todoToDelete);\n+\n+        model.setProject(\n+                projectToEdit,\n+                editedProject\n+        );\n+\n+        Index lastTodoIndex = Index.fromOneBased(\n+                model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased()).getTodos().getTodos().size());\n+\n+        DeleteTodoCommand deleteTodoCommand = new DeleteTodoCommand(INDEX_FIRST, lastTodoIndex);\n+\n+        String expectedMessage = String.format(MESSAGE_DELETE_TODO_SUCCESS, lastTodoIndex.getOneBased());\n+\n+        ModelManager expectedModel = new ModelManager(\n+                getTypicalAddressBook(), getTypicalProjectsFolder(), new UserPrefs()\n+        );\n+\n+        assertCommandSuccess(deleteTodoCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_invalidProjectIndex_throwsCommandException() {\n+        Todo todoToDelete = new TodoBuilder().build();\n+        Project projectToEdit = model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased());\n+        Project editedProject = new ProjectBuilder(projectToEdit).build();\n+        editedProject.addTodo(todoToDelete);\n+\n+        model.setProject(\n+                projectToEdit,\n+                editedProject\n+        );\n+\n+        Index lastTodoIndex = Index.fromOneBased(\n+                model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased()).getTodos().getTodos().size());\n+\n+        DeleteTodoCommand deleteTodoCommand = new DeleteTodoCommand(INDEX_THIRD, lastTodoIndex);\n+\n+        assertThrows(\n+                CommandException.class,\n+                Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX, () -> deleteTodoCommand.execute(model)\n+        );\n+    }\n+\n+    @Test\n+    public void equals() {\n+        Todo todoToDelete = new TodoBuilder().build();\n+        Project project1ToEdit = model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased());\n+        Project editedProject1 = new ProjectBuilder(project1ToEdit).build();\n+        editedProject1.addTodo(todoToDelete);\n+\n+        model.setProject(\n+                project1ToEdit,\n+                editedProject1\n+        );\n+\n+        Project project2ToEdit = model.getFilteredProjectList().get(INDEX_SECOND.getZeroBased());\n+        Project editedProject2 = new ProjectBuilder(project2ToEdit).build();\n+        editedProject2.addTodo(todoToDelete);\n+\n+\n+        model.setProject(\n+                project2ToEdit,\n+                editedProject2\n+        );\n+\n+        Index lastTodoFrom1Index = Index.fromOneBased(\n+                model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased()).getTodos().getTodos().size());\n+        Index lastTodoFrom2Index = Index.fromOneBased(\n+                model.getFilteredProjectList().get(INDEX_FIRST.getZeroBased()).getTodos().getTodos().size());\n+\n+        DeleteTodoCommand deleteTodoFrom1Command = new DeleteTodoCommand(\n+                INDEX_FIRST, lastTodoFrom1Index);\n+        DeleteTodoCommand deleteTodoFrom2Command = new DeleteTodoCommand(\n+                INDEX_SECOND, lastTodoFrom2Index);\n+\n+        // same object -> returns true\n+        assertEquals(deleteTodoFrom1Command, deleteTodoFrom1Command);\n+\n+        // same values -> returns true\n+        DeleteTodoCommand deleteTodoFrom1CommandCopy = new DeleteTodoCommand(\n+                INDEX_FIRST, lastTodoFrom1Index);\n+        assertEquals(deleteTodoFrom1Command, deleteTodoFrom1CommandCopy);\n+\n+        // different types -> returns false\n+        assertNotEquals(deleteTodoFrom1Command, 1);\n+\n+        // null -> returns false\n+        assertNotEquals(deleteTodoFrom1Command, null);\n+\n+        // different person -> returns false\n+        assertNotEquals(deleteTodoFrom1Command, deleteTodoFrom2Command);\n+    }\n+\n+\n+\n+}"
  }
]
