[
  {
    "sha": "97f67a87aa4ffee5c3595e93604829bc19ea1bb7",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/.gitignore",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/.gitignore",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/.gitignore?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01",
    "patch": "@@ -45,3 +45,7 @@ local.properties\n **/fastlane/.env\n **/fastlane/metadata/**/images/**\n **/fastlane/report.xml\n+\n+# fdroid\n+**/fastlane/repo/**\n+**/fastlane/tmp/**"
  },
  {
    "sha": "ad45b90930f5d6405e7ae0d0f29421ad2e0fa84a",
    "filename": "Gemfile.lock",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/Gemfile.lock",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/Gemfile.lock",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/Gemfile.lock?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01",
    "patch": "@@ -9,7 +9,7 @@ GEM\n     artifactory (3.0.15)\n     atomos (0.1.3)\n     aws-eventstream (1.1.0)\n-    aws-partitions (1.428.0)\n+    aws-partitions (1.429.0)\n     aws-sdk-core (3.112.0)\n       aws-eventstream (~> 1, >= 1.0.2)\n       aws-partitions (~> 1, >= 1.239.0)\n@@ -18,7 +18,7 @@ GEM\n     aws-sdk-kms (1.42.0)\n       aws-sdk-core (~> 3, >= 3.112.0)\n       aws-sigv4 (~> 1.1)\n-    aws-sdk-s3 (1.88.1)\n+    aws-sdk-s3 (1.89.0)\n       aws-sdk-core (~> 3, >= 3.112.0)\n       aws-sdk-kms (~> 1)\n       aws-sigv4 (~> 1.1)\n@@ -52,7 +52,7 @@ GEM\n     faraday_middleware (1.0.0)\n       faraday (~> 1.0)\n     fastimage (2.2.2)\n-    fastlane (2.175.0)\n+    fastlane (2.176.0)\n       CFPropertyList (>= 2.3, < 4.0.0)\n       addressable (>= 2.3, < 3.0.0)\n       artifactory (~> 3.0)"
  },
  {
    "sha": "22489d0c5b19bea7f1eae014a15d27d5e3ad4922",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/README.md",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/README.md",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/README.md?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01",
    "patch": "@@ -79,6 +79,7 @@ There are further targets and options like `beta`, see [fastlane/README.md](http\n 1. Make sure you copied `.default.env` to `.env` in the `fastlane` folder and filled out those variables.\n 1. Install Ruby (depends on OS, Ubuntu): `sudo apt install ruby-dev`\n 1. Install fastlane (depends on OS, Ubuntu): `gem install fastlane -N`\n+1. Install `fdroidserver` using `apt`, `pacman`, ..., see https://f-droid.org/docs/Installing_the_Server_and_Repo_Tools/\n \n ## License\n "
  },
  {
    "sha": "c1e051189c4988202b2946ce009cf8cbdda96338",
    "filename": "fastlane/Fastfile",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/Fastfile",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/Fastfile",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/fastlane/Fastfile?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01",
    "patch": "@@ -176,7 +176,25 @@ platform :android do |options|\n         \"android.injected.signing.key.password\" => ENV[\"SIGNING_KEY_PASSWORD\"],\n       }\n     )\n-    \n+\n+    FileUtils.cp(lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH], \"repo/Cryptomator.apk\")\n+\n+    sh(\"cp -r metadata/android/ metadata/org.cryptomator/\")\n+    sh(\"fdroid update && fdroid rewritemeta\")\n+    sh(\"rm -r metadata/org.cryptomator/\")\n+\n+    aws_s3(\n+        bucket: ENV['S3_BUCKET'],\n+        endpoint: ENV['S3_ENDPOINT'],\n+        region: ENV['S3_REGION'],\n+        access_key: ENV['S3_ACCESS_KEY'],\n+        secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],\n+        path: \"android/fdroid\",\n+        folder: \"fastlane/repo\",\n+        skip_html_upload: true,\n+        apk: ''\n+      )\n+\n     FileUtils.cp(lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH], \"release/Cryptomator-#{version}_fdroid_signed.apk\")\n   end\n "
  },
  {
    "sha": "d7891954c5c0bfda043e5369b683ad93cce4fafb",
    "filename": "fastlane/config.yml",
    "status": "added",
    "additions": 352,
    "deletions": 0,
    "changes": 352,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/config.yml",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/config.yml",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/fastlane/config.yml?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01",
    "patch": "@@ -0,0 +1,352 @@\n+---\n+# Copy this file to config.yml, then amend the settings below according to\n+# your system configuration.\n+\n+# Custom path to the Android SDK, defaults to $ANDROID_HOME\n+# sdk_path: $ANDROID_HOME\n+\n+# Custom paths to various versions of the Android NDK, defaults to 'r12b' set\n+# to $ANDROID_NDK. Most users will have the latest at $ANDROID_NDK, which is\n+# used by default. If a version is missing or assigned to None, it is assumed\n+# not installed.\n+# ndk_paths:\n+#   r10e: None\n+#   r11c: None\n+#   r12b: $ANDROID_NDK\n+#   r13b: None\n+#   r14b: None\n+#   r15c: None\n+#   r16b: None\n+#   r17c: None\n+#   r18b: None\n+#   r19c: None\n+#   r20b: None\n+#   r21d: None\n+\n+# Directory to store downloaded tools in (i.e. gradle versions)\n+# By default, these are stored in ~/.cache/fdroidserver\n+# cachedir: cache\n+\n+# Specify paths to each major Java release that you want to support\n+# java_paths:\n+#   8: /usr/lib/jvm/java-8-openjdk\n+\n+# Build tools version to be used\n+# build_tools: 28.0.3\n+\n+# Command or path to binary for running Ant\n+# ant: ant\n+\n+# Command or path to binary for running maven 3\n+# mvn3: mvn\n+\n+# Command or path to binary for running Gradle\n+# Defaults to using an internal gradle wrapper (gradlew-fdroid).\n+# gradle: gradle\n+\n+# Always scan the APKs produced by `fdroid build` for known non-free classes\n+# scan_binary: true\n+\n+# Set the maximum age (in days) of an index that a client should accept from\n+# this repo. Setting it to 0 or not setting it at all disables this\n+# functionality. If you do set this to a non-zero value, you need to ensure\n+# that your index is updated much more frequently than the specified interval.\n+# The same policy is applied to the archive repo, if there is one.\n+# repo_maxage: 0\n+\n+repo_url: https://cryptomator.org/android/repo\n+repo_name: Cryptomator F-Droid Repo\n+repo_icon: fdroid-icon.png\n+repo_description: |\n+  This is the official repository for the Cryptomator Android app.\n+\n+# As above, but for the archive repo.\n+# archive_older sets the number of versions kept in the main repo, with all\n+# older ones going to the archive. Set it to 0, and there will be no archive\n+# repository, and no need to define the other archive_ values.\n+archive_older: 0\n+archive_url: https://cryptomator.org/android/archive\n+archive_name: Cryptomator F-Droid Archive\n+archive_icon: fdroid-icon.png\n+archive_description: |\n+  The repository of older versions of Cryptomator for Android.\n+\n+# This allows a specific kind of insecure APK to be included in the\n+# 'repo' section.  Since April 2017, APK signatures that use MD5 are\n+# no longer considered valid, jarsigner and apksigner will return an\n+# error when verifying.  `fdroid update` will move APKs with these\n+# disabled signatures to the archive.  This option stops that\n+# behavior, and lets those APKs stay part of 'repo'.\n+#\n+# allow_disabled_algorithms: true\n+\n+# Normally, all apps are collected into a single app repository, like on\n+# https://f-droid.org. For certain situations, it is better to make a repo\n+# that is made up of APKs only from a single app. For example, an automated\n+# build server that publishes nightly builds.\n+# per_app_repos: true\n+\n+# `fdroid update` will create a link to the current version of a given app.\n+# This provides a static path to the current APK. To disable the creation of\n+# this link, uncomment this:\n+# make_current_version_link: false\n+\n+# By default, the \"current version\" link will be based on the \"Name\" of the\n+# app from the metadata. You can change it to use a different field from the\n+# metadata here:\n+# current_version_name_source: packageName\n+\n+# Optionally, override home directory for gpg\n+# gpghome: /home/fdroid/somewhere/else/.gnupg\n+\n+# The ID of a GPG key for making detached signatures for apks. Optional.\n+# gpgkey: 1DBA2E89\n+\n+# The key (from the keystore defined below) to be used for signing the\n+# repository itself. This is the same name you would give to keytool or\n+# jarsigner using -alias. (Not needed in an unsigned repository).\n+repo_keyalias: {env: SIGNING_KEY_ALIAS}\n+\n+# Optionally, the public key for the key defined by repo_keyalias above can\n+# be specified here. There is no need to do this, as the public key can and\n+# will be retrieved from the keystore when needed. However, specifying it\n+# manually can allow some processing to take place without access to the\n+# keystore.\n+# repo_pubkey: ...\n+\n+# The keystore to use for release keys when building. This needs to be\n+# somewhere safe and secure, and backed up!  The best way to manage these\n+# sensitive keys is to use a \"smartcard\" (aka Hardware Security Module). To\n+# configure F-Droid to use a smartcard, set the keystore file using the keyword\n+# \"NONE\" (i.e. keystore: \"NONE\"). That makes Java find the keystore on the\n+# smartcard based on 'smartcardoptions' below.\n+keystore: {env: SIGNING_KEYSTORE_PATH}\n+\n+# You should not need to change these at all, unless you have a very\n+# customized setup for using smartcards in Java with keytool/jarsigner\n+# smartcardoptions: |\n+#   -storetype PKCS11 -providerName SunPKCS11-OpenSC\n+#   -providerClass sun.security.pkcs11.SunPKCS11\n+#   -providerArg opensc-fdroid.cfg\n+\n+# The password for the keystore (at least 6 characters). If this password is\n+# different than the keypass below, it can be OK to store the password in this\n+# file for real use. But in general, sensitive passwords should not be stored\n+# in text files!\n+keystorepass: {env: SIGNING_KEYSTORE_PASSWORD}\n+\n+# The password for keys - the same is used for each auto-generated key as well\n+# as for the repository key. You should not normally store this password in a\n+# file since it is a sensitive password.\n+keypass: {env: SIGNING_KEY_PASSWORD}\n+\n+# The distinguished name used for all keys.\n+# keydname: CN=Birdman, OU=Cell, O=Alcatraz, L=Alcatraz, S=California, C=US\n+\n+# Use this to override the auto-generated key aliases with specific ones\n+# for particular applications. Normally, just leave it empty.\n+#\n+# keyaliases:\n+#   com.example.app: example\n+#\n+# You can also force an app to use the same key alias as another one, using\n+# the @ prefix.\n+#\n+# keyaliases:\n+#   com.example.another.plugin: \"@com.example.another\"\n+\n+\n+# The full path to the root of the repository. It must be specified in\n+# rsync/ssh format for a remote host/path. This is used for syncing a locally\n+# generated repo to the server that is it hosted on. It must end in the\n+# standard public repo name of \"/fdroid\", but can be in up to three levels of\n+# sub-directories (i.e. /var/www/packagerepos/fdroid). You can include\n+# multiple servers to sync to by wrapping the whole thing in {} or [], and\n+# including the serverwebroot strings in a comma-separated list.\n+#\n+# serverwebroot: user@example:/var/www/fdroid\n+# serverwebroot:\n+#   - foo.com:/usr/share/nginx/www/fdroid\n+#   - bar.info:/var/www/fdroid\n+\n+\n+# When running fdroid processes on a remote server, it is possible to\n+# publish extra information about the status.  Each fdroid sub-command\n+# can create repo/status/running.json when it starts, then a\n+# repo/status/<sub-command>.json when it completes.  The builds logs\n+# and other processes will also get published, if they are running in\n+# a buildserver VM.  The build logs name scheme is:\n+# .../repo/$APPID_$VERCODE.log.gz.  These files are also pushed to all\n+# servers configured in 'serverwebroot'.\n+#\n+# deploy_process_logs: true\n+\n+# The full URL to a git remote repository. You can include\n+# multiple servers to mirror to by wrapping the whole thing in {} or [], and\n+# including the servergitmirrors strings in a comma-separated list.\n+# Servers listed here will also be automatically inserted in the mirrors list.\n+#\n+# servergitmirrors: https://github.com/user/repo\n+# servergitmirrors:\n+#   - https://github.com/user/repo\n+#   - https://gitlab.com/user/repo\n+\n+# Most git hosting services have hard size limits for each git repo.\n+# `fdroid deploy` will delete the git history when the git mirror repo\n+# approaches this limit to ensure that the repo will still fit when\n+# pushed.  GitHub recommends 1GB, gitlab.com recommends 10GB.\n+#\n+# git_mirror_size_limit: 10GB\n+\n+# Any mirrors of this repo, for example all of the servers declared in\n+# serverwebroot and all the servers declared in servergitmirrors,\n+# will automatically be used by the client.  If one\n+# mirror is not working, then the client will try another.  If the\n+# client has Tor enabled, then the client will prefer mirrors with\n+# .onion addresses. This base URL will be used for both the main repo\n+# and the archive, if it is enabled.  So these URLs should end in the\n+# 'fdroid' base of the F-Droid part of the web server like serverwebroot.\n+#\n+# mirrors:\n+#   - https://foo.bar/fdroid\n+#   - http://foobarfoobarfoobar.onion/fdroid\n+\n+# optionally specify which identity file to use when using rsync or git over SSH\n+#\n+# identity_file: ~/.ssh/fdroid_id_rsa\n+\n+\n+# If you are running the repo signing process on a completely offline machine,\n+# which provides the best security, then you can specify a folder to sync the\n+# repo to when running `fdroid deploy`. This is most likely going to\n+# be a USB thumb drive, SD Card, or some other kind of removable media. Make\n+# sure it is mounted before running `fdroid deploy`. Using the\n+# standard folder called 'fdroid' as the specified folder is recommended, like\n+# with serverwebroot.\n+#\n+# local_copy_dir: /media/MyUSBThumbDrive/fdroid\n+\n+\n+# If you are using local_copy_dir on an offline build/signing server, once the\n+# thumb drive has been plugged into the online machine, it will need to be\n+# synced to the copy on the online machine. To make that happen\n+# automatically, set sync_from_local_copy_dir to True:\n+#\n+# sync_from_local_copy_dir: true\n+\n+\n+# To upload the repo to an Amazon S3 bucket using `fdroid server\n+# update`.  Warning, this deletes and recreates the whole fdroid/\n+# directory each time. This prefers s3cmd, but can also use\n+# apache-libcloud.  To customize how s3cmd interacts with the cloud\n+# provider, create a 's3cfg' file next to this file (config.yml), and\n+# those settings will be used instead of any 'aws' variable below.\n+# Secrets can be fetched from environment variables to ensure that\n+# they are not leaked as part of this file.\n+#\n+# awsbucket: myawsfdroid\n+# awsaccesskeyid: SEE0CHAITHEIMAUR2USA\n+# awssecretkey: {env: awssecretkey}\n+\n+\n+# If you want to force 'fdroid server' to use a non-standard serverwebroot.\n+# This will allow you to have 'serverwebroot' entries which do not end in\n+# '/fdroid'. (Please note that some client features expect repository URLs\n+# to end in '/fdroid/repo'.)\n+#\n+# nonstandardwebroot: false\n+\n+\n+# If you want to upload the release apk file to androidobservatory.org\n+#\n+# androidobservatory: false\n+\n+\n+# If you want to upload the release apk file to virustotal.com\n+# You have to enter your profile apikey to enable the upload.\n+#\n+# virustotal_apikey: 9872987234982734\n+#\n+# Or get it from an environment variable:\n+#\n+# virustotal_apikey: {env: virustotal_apikey}\n+\n+\n+# The build logs can be posted to a mediawiki instance, like on f-droid.org.\n+# wiki_protocol: http\n+# wiki_server: server\n+# wiki_path: /wiki/\n+# wiki_user: login\n+# wiki_password: 1234\n+\n+# Keep a log of all generated index files in a git repo to provide a\n+# \"binary transparency\" log for anyone to check the history of the\n+# binaries that are published.  This is in the form of a \"git remote\",\n+# which this machine where `fdroid update` is run has already been\n+# configured to allow push access (e.g. ssh key, username/password, etc)\n+# binary_transparency_remote: git@gitlab.com:fdroid/binary-transparency-log.git\n+\n+# Only set this to true when running a repository where you want to generate\n+# stats, and only then on the master build servers, not a development\n+# machine. If you want to keep the \"added\" and \"last updated\" dates for each\n+# app and APK in your repo, then you should enable this.\n+# update_stats: true\n+\n+# When used with stats, this is a list of IP addresses that are ignored for\n+# calculation purposes.\n+# stats_ignore: []\n+\n+# Server stats logs are retrieved from. Required when update_stats is True.\n+# stats_server: example.com\n+\n+# User stats logs are retrieved from. Required when update_stats is True.\n+# stats_user: bob\n+\n+# Use the following to push stats to a Carbon instance:\n+# stats_to_carbon: false\n+# carbon_host: 0.0.0.0\n+# carbon_port: 2003\n+\n+# Set this to true to always use a build server. This saves specifying the\n+# --server option on dedicated secure build server hosts.\n+# build_server_always: true\n+\n+# Limit in number of characters that fields can take up\n+# Only the fields listed here are supported, defaults shown\n+# char_limits:\n+#   author: 256\n+#   name: 50\n+#   summary: 80\n+#   description: 4000\n+#   video: 256\n+#   whatsNew: 500\n+\n+# It is possible for the server operator to specify lists of apps that\n+# must be installed or uninstalled on the client (aka \"push installs).\n+# If the user has opted in, or the device is already setup to respond\n+# to these requests, then F-Droid will automatically install/uninstall\n+# the packageNames listed.  This is protected by the same signing key\n+# as the app index metadata.\n+#\n+# install_list:\n+#  - org.cryptomator\n+\n+# uninstall_list:\n+#   - com.facebook.orca\n+#   - com.android.vending\n+\n+# `fdroid lint` checks licenses in metadata against a built white list.  By\n+# default we will require license metadata to be present and only allow\n+# licenses approved either by FSF or OSI.  We're using the standardized SPDX\n+# license IDs.  (https://spdx.org/licenses/)\n+#\n+# We use `python3 -m spdx-license-list print --filter-fsf-or-osi` for\n+# generating our default list.  (https://pypi.org/project/spdx-license-list)\n+#\n+# You can override our default list of allowed licenes by setting this option.\n+# Just supply a custom list of licene names you would like to allow. Setting\n+# this to `None` disables this lint check.\n+#\n+# lint_licenses:\n+#   - Custom-License-A\n+#   - Another-License"
  },
  {
    "sha": "0c0d41738f054eaa77bba0ef0785e87227aa2692",
    "filename": "fastlane/fdroid-icon.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/fdroid-icon.png",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/fdroid-icon.png",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/fastlane/fdroid-icon.png?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01"
  },
  {
    "sha": "bd9f2ff433da7cef6779f184e59d4b6a6b64b587",
    "filename": "fastlane/metadata/org.cryptomator.yml",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/cryptomator/android/blob/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/metadata/org.cryptomator.yml",
    "raw_url": "https://github.com/cryptomator/android/raw/803e0f63e9d6b509556eefd8cd145c8c49386c01/fastlane/metadata/org.cryptomator.yml",
    "contents_url": "https://api.github.com/repos/cryptomator/android/contents/fastlane/metadata/org.cryptomator.yml?ref=803e0f63e9d6b509556eefd8cd145c8c49386c01",
    "patch": "@@ -0,0 +1,14 @@\n+Categories:\n+  - Internet\n+  - Security\n+License: GPL-3.0\n+AuthorName: Skymatic GmbH\n+WebSite: https://cryptomator.org/\n+SourceCode: https://github.com/cryptomator/android\n+IssueTracker: https://github.com/cryptomator/android/issues\n+Translation: https://crowdin.com/project/cryptomator-android\n+Changelog: https://github.com/cryptomator/android/releases\n+Donate: https://cryptomator.org/sponsors/\n+\n+AutoUpdateMode: None\n+UpdateCheckMode: None"
  }
]
