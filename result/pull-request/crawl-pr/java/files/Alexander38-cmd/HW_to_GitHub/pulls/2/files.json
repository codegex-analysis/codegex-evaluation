[
  {
    "sha": "8af49765f0c3f7b255c2b664faac4b5aa8334745",
    "filename": "src/HW/Main.java",
    "status": "modified",
    "additions": 243,
    "deletions": 0,
    "changes": 243,
    "blob_url": "https://github.com/Alexander38-cmd/HW_to_GitHub/blob/b70987855194fd4895694eba570d1f415973d569/src/HW/Main.java",
    "raw_url": "https://github.com/Alexander38-cmd/HW_to_GitHub/raw/b70987855194fd4895694eba570d1f415973d569/src/HW/Main.java",
    "contents_url": "https://api.github.com/repos/Alexander38-cmd/HW_to_GitHub/contents/src/HW/Main.java?ref=b70987855194fd4895694eba570d1f415973d569",
    "patch": "@@ -1,7 +1,250 @@\n package HW;\n \n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.*;\n+import java.util.List;\n+\n public class Main {\n     public static void main(String[] args) {\n+        // Добавили новый метод смены ника в инерфейс AuthService\n+        public interface AuthService {\n+            String getNicknameByLoginAndPassword(String login, String password);\n+\n+            boolean registration(String login, String password, String nickname);\n+\n+            boolean changeNick(String oldNick, String newNick);\n+        }\n+    }\n+\n+    // В SimpleAuthService переопределили данный метод\n+    @Override\n+    public boolean changeNick(String oldNick, String newNick) {\n+        return false;\n+    }\n+}\n+\n+// Создали новый класс DBAuthService, который реализует AuthService через класс SQLHadler\n+public class DBAuthService implements AuthService {\n+    @Override\n+    public String getNicknameByLoginAndPassword(String login, String password) {\n+        return SQLHandler.getNicknameByLoginAndPassword(login, password);\n+    }\n+\n+    @Override\n+    public boolean registration(String login, String password, String nickname) {\n+        return SQLHandler.registration(login, password, nickname);\n+    }\n+\n+    @Override\n+    public boolean changeNick(String oldNickname, String newNickname) {\n+        return SQLHandler.changeNick(oldNickname, newNickname);\n+    }\n+}\n+\n+// Объявление класса SQLHandler для работы с БД\n+public class SQLHandler {\n+    private static Connection connection;\n+    private static PreparedStatement psGetNickname;\n+    private static PreparedStatement psRegistration;\n+    private static PreparedStatement psChangeNick;\n+    private static PreparedStatement psAddMessage;\n+    private static PreparedStatement psGetMessageForNick;\n+\n+    public static boolean connect() {\n+        try {\n+            Class.forName(\"org.sqlite.JDBC\");\n+            connection = DriverManager.getConnection(\"jdbc:sqlite:BCOW.db\");\n+            prepareAllStatements();\n+            return true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static void prepareAllStatements() throws SQLException {\n+        psGetNickname = connection.prepareStatement(\"SELECT Nickname FROM Users WHERE Login = ? AND Password = ?;\");\n+        psRegistration = connection.prepareStatement(\"INSERT INTO Users (Login, Password, Nickname) VALUES (?, ?, ?);\");\n+        psChangeNick = connection.prepareStatement(\"UPDATE Users SET Nickname = ? WHERE Nickname = ?;\");\n+\n+        psAddMessage = connection.prepareStatement(\"INSERT INTO Messages (Sender, Receiver, Text, Date) VALUES (\\n\" +\n+                \"(SELECT ID FROM Users WHERE Nickname = ?), \\n\" +\n+                \"(SELECT ID FROM Users WHERE Nickname = ?), \\n\" +\n+                \"?, ?)\");\n+\n+        psGetMessageForNick = connection.prepareStatement(\"SELECT (SELECT Nickname FROM Users WHERE ID = Sender), \\n\" +\n+                \"(SELECT Nickname FROM Users WHERE ID = Receiver), \\n\" +\n+                \"Text, \\n\" +\n+                \"Date \\n\" +\n+                \"FROM Messages \\n\" +\n+                \"WHERE Sender = (SELECT ID FROM Users WHERE Nickname = ?) \\n\" +\n+                \"OR Receiver = (SELECT ID FROM Users WHERE Nickname = ?) \\n\" +\n+                \"OR Receiver = (SELECT ID FROM Users WHERE Nickname = 'admin')\");\n+    }\n+\n+    // Получаем nickname по логину и паролю\n+    public static String getNicknameByLoginAndPassword(String login, String password) {\n+        String nick = null;\n+        try {\n+            psGetNickname.setString(1, login);\n+            psGetNickname.setString(2, password);\n+            ResultSet rs = psGetNickname.executeQuery();\n+            if (rs.next()) {\n+                nick = rs.getString(1);\n+            }\n+            rs.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+        return nick;\n+    }\n \n+    // Проходим регистрацию\n+    public static boolean registration(String login, String password, String nickname) {\n+        try {\n+            psRegistration.setString(1, login);\n+            psRegistration.setString(2, password);\n+            psRegistration.setString(3, nickname);\n+            psRegistration.executeUpdate();\n+            return true\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    // Метод смены ника\n+    public static boolean changeNick(String oldNick, String newNick) {\n+        try {\n+            psChangeNick.setString(1, newNick);\n+            psChangeNick.setString(2, oldNick);\n+            psChangeNick.executeUpdate();\n+            return true;\n+        } catch (SQLException e) {\n+            return false;\n+        }\n+    }\n+\n+    // Метод добавления сообщений в БД\n+    public static boolean addMessage(String sender, String receiver, String text, String date) {\n+        try {\n+            psAddMessage.setString(1, sender);\n+            psAddMessage.setString(2, receiver);\n+            psAddMessage.setString(3, text);\n+            psAddMessage.setString(4, date);\n+            psAddMessage.executeUpdate();\n+            return true;\n+        } catch (SQLException e) {\n+            return false;\n+        }\n+    }\n+\n+    // Метод извлечения сообщений из БД\n+    public static String getMessageForNick(String nick) {\n+        StringBuilder sb = new StringBuilder();\n+        try {\n+            psGetMessageForNick.setString(1, nick);\n+            psGetMessageForNick.setString(2, nick);\n+            ResultSet rs = psGetMessageForNick.executeQuery();\n+\n+            while (rs.next()) {\n+                String sender = rs.getString(1);\n+                String receiver = rs.getString(2);\n+                String text = rs.getString(3);\n+                String date = rs.getString(4);\n+                //всем сообщение\n+                if (receiver.equals(\"admin\")) {\n+                    sb.append(String.format(\"[ %s ] : %s\\n\", sender, text));\n+                } else {\n+                    sb.append(String.format(\"[ %s ] to [ %s ] : %s\\n\", sender, receiver, text));\n+                }\n+            }\n+            rs.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+        return sb.toString();\n+    }\n+\n+    // Закрываем все методы\n+    public static void disconnect() {\n+        try {\n+            psRegistration.close();\n+            psGetNickname.close();\n+            psChangeNick.close();\n+            psAddMessage.close();\n+            psGetMessageForNick.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            connection.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+// В классе Server вместо SimpleAuthService() теперь используем DBAuthService()\n+    //authService = new SimpleAuthService();\n+    //==============//\n+        if (!SQLHandler.connect()) {\n+        throw new RuntimeException(\"Failed to connect to database.\");\n+    }\n+    authService = new DBAuthService();\n+    //==============//\n+\n+    // Здесь же в классе Server в блоке finally после завершения работы с БД, закрывает ее\n+} finally {\n+        SQLHandler.disconnect();\n     }\n }\n+public class History {\n+    private static PrintWriter out;\n+\n+    private static String getHistoryFilenameByLogin(String login) {\n+        return \"history/history_\" + login + \".txt\";\n+    }\n+\n+    public static void start(String login) {\n+        try {\n+            out = new PrintWriter(new FileOutputStream(getHistoryFilenameByLogin(login), true), true);\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void stop() {\n+        if (out != null) {\n+            out.close();\n+        }\n+    }\n+\n+    public static void writeLine(String msg) {\n+        out.println(msg);\n+    }\n+\n+    public static String getLast100LinesOfHistory(String login) {\n+        if (!Files.exists(Paths.get(getHistoryFilenameByLogin(login)))) {\n+            return \"\";\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        try {\n+            List<String> historyLines = Files.readAllLines(Paths.get(getHistoryFilenameByLogin(login)));\n+            int startPosition = 0;\n+            if (historyLines.size() > 100) {\n+                startPosition = historyLines.size() - 100;\n+            }\n+            for (int i = startPosition; i < historyLines.size(); i++) {\n+                sb.append(historyLines.get(i)).append(System.lineSeparator());\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return sb.toString();\n+    }\n+}\n\\ No newline at end of file"
  }
]
