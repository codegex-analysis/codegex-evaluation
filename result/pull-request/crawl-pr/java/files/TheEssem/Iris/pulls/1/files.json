[
  {
    "sha": "cc2dc99c6af1e24ebce95291b397d32537dcf484",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/build.gradle",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/build.gradle",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/build.gradle?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -26,6 +26,9 @@ dependencies {\n \n \t// Required by fabric-lifecycle-events-v1\n \tincludeFabricApiModule \"fabric-api-base\"\n+\n+\t// Config screen integration\n+\tmodApi \"io.github.prospector:modmenu:1.14.13+build.22\"\n }\n \n def includeFabricApiModule(String moduleName) {"
  },
  {
    "sha": "f8678913b04cdf39304ac8710e26dc42fdc3d441",
    "filename": "gradle.properties",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/gradle.properties",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/gradle.properties",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/gradle.properties?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -3,11 +3,11 @@ org.gradle.jvmargs=-Xmx2G\n # Fabric Properties\n # check these on https://fabricmc.net/use\n minecraft_version=1.16.4\n-yarn_mappings=1.16.4+build.6\n-loader_version=0.10.6+build.214\n+yarn_mappings=1.16.4+build.7\n+loader_version=0.10.8\n # Mod Properties\n mod_version=0.1.0\n maven_group=net.coderbot.iris\n archives_base_name=iris\n \n-fabric_version=0.27.1+1.16\n+fabric_version=0.28.4+1.16"
  },
  {
    "sha": "7aa47142bc98ea3805e90e46e886b909751c50a8",
    "filename": "src/main/java/net/coderbot/iris/Iris.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/Iris.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/Iris.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/Iris.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -10,12 +10,12 @@\n import java.util.zip.ZipException;\n \n import com.google.common.base.Throwables;\n-import com.mojang.blaze3d.systems.RenderSystem;\n import net.coderbot.iris.config.IrisConfig;\n import net.coderbot.iris.pipeline.ShaderPipeline;\n import net.coderbot.iris.postprocess.CompositeRenderer;\n import net.coderbot.iris.rendertarget.RenderTargets;\n import net.coderbot.iris.shaderpack.ShaderPack;\n+import net.minecraft.util.Tickable;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n@@ -47,6 +47,7 @@\n \tprivate static CompositeRenderer compositeRenderer;\n \tprivate static IrisConfig irisConfig;\n \tprivate static FileSystem zipFileSystem;\n+\n \tpublic static KeyBinding reloadKeybind;\n \n \t@Override\n@@ -67,8 +68,8 @@ public void onInitializeClient() {\n \t\t\tlogger.catching(Level.ERROR, e);\n \t\t}\n \n-\n \t\tloadShaderpack();\n+\n \t\treloadKeybind = KeyBindingHelper.registerKeyBinding(new KeyBinding(\"iris.keybind.reload\", InputUtil.Type.KEYSYM, GLFW.GLFW_KEY_R, \"iris.keybinds\"));\n \n \t\tClientTickEvents.END_CLIENT_TICK.register(minecraftClient -> {\n@@ -94,6 +95,10 @@ public void onInitializeClient() {\n \t\t});\n \t}\n \n+\tpublic static Path getShaderPackDir() {\n+\t\treturn shaderpacksDirectory;\n+\t}\n+\n \tpublic static void loadShaderpack() {\n \t\t// Attempt to load an external shaderpack if it is available\n \t\tif (!irisConfig.isInternal()) {\n@@ -176,6 +181,8 @@ private static void loadInternalShaderpack() {\n \t\t\tthrow new RuntimeException(\"Failed to load internal shaderpack!\", e);\n \t\t}\n \n+\t\tgetIrisConfig().setShaderPackName(\"(internal)\");\n+\n \t\tlogger.info(\"Using internal shaders\");\n \t}\n "
  },
  {
    "sha": "a362f714ad225deb46e845c0a78793233bf5562f",
    "filename": "src/main/java/net/coderbot/iris/config/IrisConfig.java",
    "status": "modified",
    "additions": 175,
    "deletions": 9,
    "changes": 184,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/config/IrisConfig.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/config/IrisConfig.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/config/IrisConfig.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -1,12 +1,27 @@\n package net.coderbot.iris.config;\n \n+import com.google.common.collect.ImmutableList;\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.ScreenStack;\n+import net.coderbot.iris.gui.ShaderPackScreen;\n+import net.coderbot.iris.gui.UiTheme;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.coderbot.iris.gui.property.*;\n+import net.fabricmc.loader.api.FabricLoader;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.text.TranslatableText;\n+import net.minecraft.util.Formatting;\n+\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Properties;\n \n-import net.fabricmc.loader.api.FabricLoader;\n-\n /**\n  * A class dedicated to storing the config values of shaderpacks. Right now it only stores the path to the current shaderpack\n  */\n@@ -18,6 +33,17 @@\n \t * The path to the current shaderpack. Null if the internal shaderpack is being used.\n \t */\n \tprivate String shaderPackName;\n+\n+\t/**\n+\t * The UI theme to use. Null if the default Iris UI theme is being used.\n+\t */\n+\tprivate String uiTheme;\n+\n+\t/**\n+\t * Whether to display shader pack config screens in \"condensed\" view.\n+\t */\n+\tprivate boolean condenseShaderConfig;\n+\n \tprivate Path propertiesPath;\n \n \tpublic IrisConfig() {\n@@ -59,24 +85,109 @@ public String getShaderPackName() {\n \t\treturn shaderPackName;\n \t}\n \n+\t/**\n+\t * Sets the shader pack name, and tries to save the config file.\n+\t * Will print an error if unable to save.\n+\t *\n+\t * @param name The name of the shader pack\n+\t */\n+\tpublic void setShaderPackName(String name) {\n+\t\tif(name == null) return;\n+\t\tshaderPackName = name;\n+\t\ttry {\n+\t\t\tsave();\n+\t\t} catch (IOException e) {\n+\t\t\tIris.logger.error(\"Error setting shader pack!\");\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * returns the selected UI Theme\n+\t *\n+\t * @return the selected UI Theme, or the default theme if null\n+\t */\n+\tpublic UiTheme getUITheme() {\n+\t\tif(uiTheme == null) this.uiTheme = \"IRIS\";\n+\t\tUiTheme theme;\n+\t\ttry {\n+\t\t\ttheme = UiTheme.valueOf(uiTheme);\n+\t\t} catch (Exception ignored) {\n+\t\t\ttheme = UiTheme.IRIS;\n+\t\t}\n+\t\tthis.uiTheme = theme.name();\n+\t\treturn theme;\n+\t}\n+\n+\n+\t/**\n+\t * Gets whether to use condensed view for shader pack configuration.\n+\t *\n+\t * @return Whether to use condensed view\n+\t */\n+\tpublic boolean getIfCondensedShaderConfig() {\n+\t\treturn condenseShaderConfig;\n+\t}\n+\n+\t/**\n+\t * Sets whether to use condensed view for shader pack configuration.\n+\t *\n+\t * @param condense Whether to use condensed view\n+\t */\n+\tpublic void setIfCondensedShaderConfig(boolean condense) {\n+\t\tthis.condenseShaderConfig = condense;\n+\t\ttry {\n+\t\t\tsave();\n+\t\t} catch (IOException e) {\n+\t\t\tIris.logger.error(\"Error setting config for condensed shader pack config view!\");\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Sets config values as read from a Properties object.\n+\t *\n+\t * @param properties The Properties object to read and set the config from\n+\t */\n+\tpublic void read(Properties properties) {\n+\t\tshaderPackName = properties.getProperty(\"shaderPack\", this.shaderPackName);\n+\t\tuiTheme = properties.getProperty(\"uiTheme\", this.uiTheme);\n+\t\tcondenseShaderConfig = Boolean.parseBoolean(properties.getProperty(\"condenseShaderConfig\"));\n+\n+\t\tif (shaderPackName != null && shaderPackName.equals(\"(internal)\")) {\n+\t\t\tshaderPackName = null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Puts config values to a Properties object.\n+\t *\n+\t * @return the Properties object written to\n+\t */\n+\tpublic Properties write() {\n+\t\tProperties properties = new Properties();\n+\n+\t\tproperties.setProperty(\"shaderPack\", getShaderPackName());\n+\t\tproperties.setProperty(\"uiTheme\", getUITheme().name());\n+\t\tproperties.setProperty(\"condenseShaderConfig\", Boolean.toString(getIfCondensedShaderConfig()));\n+\n+\t\treturn properties;\n+\t}\n+\n \t/**\n \t * loads the config file and then populates the string, int, and boolean entries with the parsed entries\n \t *\n \t * @throws IOException if the file cannot be loaded\n \t */\n-\n \tpublic void load() throws IOException {\n \t\tif (!Files.exists(propertiesPath)) {\n \t\t\treturn;\n \t\t}\n \n \t\tProperties properties = new Properties();\n \t\tproperties.load(Files.newInputStream(propertiesPath));\n-\t\tshaderPackName = properties.getProperty(\"shaderPack\");\n \n-\t\tif (shaderPackName != null && shaderPackName.equals(\"(internal)\")) {\n-\t\t\tshaderPackName = null;\n-\t\t}\n+\t\tthis.read(properties);\n \t}\n \n \t/**\n@@ -85,8 +196,63 @@ public void load() throws IOException {\n \t * @throws IOException file exceptions\n \t */\n \tpublic void save() throws IOException {\n-\t\tProperties properties = new Properties();\n-\t\tproperties.setProperty(\"shaderPack\", getShaderPackName());\n+\t\tProperties properties = write();\n \t\tproperties.store(Files.newOutputStream(propertiesPath), COMMENT);\n \t}\n+\n+\t/**\n+\t * Creates a set of pages for the config screen\n+\t *\n+\t * @return pages for the config screen as a String to PropertyList map\n+\t */\n+\tpublic Map<String, PropertyList> createDocument(TextRenderer tr, Screen parent, PropertyDocumentWidget widget, int width) {\n+\t\tMap<String, PropertyList> document = new HashMap<>();\n+\t\tPropertyList page = new PropertyList();\n+\t\tpage.add(new TitleProperty(new TranslatableText(\"property.iris.title.configScreen\").formatted(Formatting.BOLD),\n+\t\t\t\t0x82ffffff, 0x82ff0000, 0x82ff8800, 0x82ffd800, 0x8288ff00, 0x8200d8ff, 0x823048ff, 0x829900ff, 0x82ffffff\n+\t\t));\n+\t\tpage.add(new FunctionalButtonProperty(widget, () -> MinecraftClient.getInstance().openScreen(new ShaderPackScreen(parent)), new TranslatableText(\"options.iris.shaderPackSelection.title\"), LinkProperty.Align.CENTER_LEFT));\n+\t\tint optionTextWidthFull = (int)(width * 0.6) - 21;\n+\t\tint optionTextWidthHalf = (int)((width * 0.5) * 0.6) - 21;\n+\t\tpage.addAllPairs(ImmutableList.of(\n+\t\t\t\tnew StringOptionProperty(ImmutableList.of(UiTheme.IRIS.name(), UiTheme.VANILLA.name(), UiTheme.AQUA.name()), 0, widget, \"uiTheme\", GuiUtil.trimmed(tr, \"property.iris.uiTheme\", optionTextWidthHalf, true, true), false, false),\n+\t\t\t\tnew BooleanOptionProperty(widget, false, \"condenseShaderConfig\", GuiUtil.trimmed(tr, \"property.iris.condenseShaderConfig\", optionTextWidthHalf, true, true), false)\n+\t\t));\n+\t\tdocument.put(\"main\", page);\n+\t\twidget.onSave(() -> {\n+\t\t\tProperties ps = new Properties();\n+\t\t\twidget.getPage(widget.getCurrentPage()).forEvery(property -> {\n+\t\t\t\tif(property instanceof ValueProperty) {\n+\t\t\t\t\tValueProperty<?> vp = ((ValueProperty<?>)property);\n+\t\t\t\t\tps.setProperty(vp.getKey(), vp.getValue().toString());\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tthis.read(ps);\n+\t\t\ttry {\n+\t\t\t\tthis.save();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tIris.logger.error(\"Failed to save config!\");\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t});\n+\t\twidget.onLoad(() -> {\n+\t\t\ttry {\n+\t\t\t\tthis.load();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tIris.logger.error(\"Failed to load config!\");\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t\tProperties properties = this.write();\n+\t\t\tfor(String k : widget.getPages()) {\n+\t\t\t\twidget.getPage(k).forEvery(property -> {\n+\t\t\t\t\tif(property instanceof ValueProperty) {\n+\t\t\t\t\t\tValueProperty<?> vp = ((ValueProperty<?>)property);\n+\t\t\t\t\t\tvp.setValue(properties.getProperty(vp.getKey()));\n+\t\t\t\t\t\tvp.resetValueText();\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t});\n+\t\treturn document;\n+\t}\n }"
  },
  {
    "sha": "899a9e0cbb48febe3f4f765dc30011a5d919cc0c",
    "filename": "src/main/java/net/coderbot/iris/config/IrisModMenu.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/config/IrisModMenu.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/config/IrisModMenu.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/config/IrisModMenu.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,12 @@\n+package net.coderbot.iris.config;\n+\n+import io.github.prospector.modmenu.api.ConfigScreenFactory;\n+import io.github.prospector.modmenu.api.ModMenuApi;\n+import net.coderbot.iris.gui.IrisConfigScreen;\n+\n+public class IrisModMenu implements ModMenuApi {\n+    @Override\n+    public ConfigScreenFactory<?> getModConfigScreenFactory() {\n+        return IrisConfigScreen::new;\n+    }\n+}"
  },
  {
    "sha": "f2db6e4a944201add056e37702786d50a6a11334",
    "filename": "src/main/java/net/coderbot/iris/gui/GuiUtil.java",
    "status": "added",
    "additions": 179,
    "deletions": 0,
    "changes": 179,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/GuiUtil.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/GuiUtil.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/GuiUtil.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,179 @@\n+package net.coderbot.iris.gui;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+import net.coderbot.iris.Iris;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.DrawableHelper;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.render.BufferBuilder;\n+import net.minecraft.client.render.Tessellator;\n+import net.minecraft.client.render.VertexFormats;\n+import net.minecraft.client.resource.language.I18n;\n+import net.minecraft.client.sound.PositionedSoundInstance;\n+import net.minecraft.sound.SoundEvents;\n+import net.minecraft.text.*;\n+import net.minecraft.util.Formatting;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.math.MathHelper;\n+\n+public final class GuiUtil {\n+    public static final Identifier WIDGETS_TEXTURE = new Identifier(Iris.MODID, \"textures/gui/widgets.png\");\n+\n+    public static void drawDirtTexture(MinecraftClient client, int x, int y, int z, int width, int height) {\n+        Tessellator tessellator = Tessellator.getInstance();\n+        BufferBuilder bufferBuilder = tessellator.getBuffer();\n+        client.getTextureManager().bindTexture(DrawableHelper.OPTIONS_BACKGROUND_TEXTURE);\n+        RenderSystem.enableDepthTest();\n+        RenderSystem.depthFunc(519);\n+        RenderSystem.enableTexture();\n+        bufferBuilder.begin(7, VertexFormats.POSITION_TEXTURE_COLOR);\n+        bufferBuilder.vertex(x, y + height, z).texture(x, y + height / 32.0F).color(64, 64, 64, 255).next();\n+        bufferBuilder.vertex(x + width, y + height, 0.0D).texture(x + width / 32.0F, y + height / 32.0F).color(64, 64, 64, 255).next();\n+        bufferBuilder.vertex(x + width, y, z).texture(x + width / 32.0F, y).color(64, 64, 64, 255).next();\n+        bufferBuilder.vertex(x, y, z).texture(x, y).color(64, 64, 64, 255).next();\n+        tessellator.draw();\n+    }\n+\n+    public static void drawCompactScrollBar(int x, int top, int bottom, int maxScroll, double scrollAmount, int maxPosition, float alpha) {\n+        if (maxScroll > 0) {\n+            int barHeight = (int)((float)((bottom - top) * (bottom - top)) / (float) maxPosition);\n+            barHeight = MathHelper.clamp(barHeight, 32, bottom - top - 8);\n+            int barTop = (int)scrollAmount * (bottom - top - barHeight) / maxScroll + top;\n+            if (barTop < top) barTop = top;\n+            int backgroundColor = (((byte)(0x6E * alpha) << 24) | 0x0A0A0A);\n+            int barColor = (((byte)(0x7A * alpha) << 24) | 0xEFEFEF);\n+            GuiUtil.fill(x, top, -100, 2, bottom - top, backgroundColor);\n+            GuiUtil.fill(x, barTop, -100, 2, barHeight, barColor);\n+            RenderSystem.enableTexture();\n+        }\n+    }\n+\n+    public static void texture(int x, int y, int z, int width, int height, float u, float v, float uw, float vh, float r, float g, float b, float a) {\n+        Tessellator tessellator = Tessellator.getInstance();\n+        BufferBuilder bufferBuilder = tessellator.getBuffer();\n+        RenderSystem.enableTexture();\n+        bufferBuilder.begin(7, VertexFormats.POSITION_TEXTURE_COLOR);\n+        bufferBuilder.vertex(x, y + height, z).texture(u, v + vh).color(r, g, b, a).next();\n+        bufferBuilder.vertex(x + width, y + height, z).texture(u + uw, v + vh).color(r, g, b, a).next();\n+        bufferBuilder.vertex(x + width, y, z).texture(u + uw, v).color(r, g, b, a).next();\n+        bufferBuilder.vertex(x, y, z).texture(u, v).color(r, g, b, a).next();\n+        tessellator.draw();\n+    }\n+\n+    public static void texture(int x, int y, int z, int width, int height, float u, float v, float uw, float vh) {\n+        texture(x, y, z, width, height, u, v, uw, vh, 1f, 1f, 1f, 1f);\n+    }\n+\n+    public static void texture(int x, int y, int z, int width, int height, int u, int v, int uw, int vh, int texWidth, int texHeight) {\n+        texture(x, y, z, width, height, (float)u / texWidth, (float)v / texHeight, (float)uw / texWidth, (float)vh / texHeight);\n+    }\n+\n+    public static void texture(int x, int y, int z, int width, int height, int u, int v) {\n+        texture(x, y, z, width, height, u, v, width, height, 256, 256);\n+    }\n+\n+    public static void fill(int x, int y, int z, int width, int height, int colorARGB) {\n+        int a = (colorARGB >> 24) & 0xFF;\n+        int r = (colorARGB >> 16) & 0xFF;\n+        int g = (colorARGB >> 8) & 0xFF;\n+        int b = colorARGB & 0xFF;\n+        Tessellator tessellator = Tessellator.getInstance();\n+        BufferBuilder bufferBuilder = tessellator.getBuffer();\n+        RenderSystem.disableTexture();\n+        RenderSystem.enableBlend();\n+        bufferBuilder.begin(7, VertexFormats.POSITION_TEXTURE_COLOR);\n+        bufferBuilder.vertex(x, y + height, z).texture(0f, 1f).color(r, g, b, a).next();\n+        bufferBuilder.vertex(x + width, y + height, z).texture(1f, 1f).color(r, g, b, a).next();\n+        bufferBuilder.vertex(x + width, y, z).texture(1f, 0f).color(r, g, b, a).next();\n+        bufferBuilder.vertex(x, y, z).texture(0f, 0f).color(r, g, b, a).next();\n+        tessellator.draw();\n+    }\n+\n+    public static void fill(int x, int y, int width, int height, int colorARGB) {\n+        fill(x, y, -100, width, height, colorARGB);\n+    }\n+\n+    public static void borderedRect(int x, int y, int z, int width, int height, int colorARGB) {\n+        fill(x, y, z, width, 1, colorARGB);\n+        fill(x, y + height - 1, z, width, 1, colorARGB);\n+        fill(x, y + 1, z, 1, height - 2, colorARGB);\n+        fill(x + width - 1, y + 1, z, 1, height - 2, colorARGB);\n+    }\n+\n+    public static void playClickSound(float pitch) {\n+        MinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(SoundEvents.UI_BUTTON_CLICK, pitch));\n+    }\n+\n+    public static Text trimmed(TextRenderer tr, String text, int lenPixels, boolean translated, boolean ellipsis, Formatting... formats) {\n+        String tx = translated ? I18n.translate(text) : text;\n+        LiteralText t = (LiteralText) new LiteralText(tx).formatted(formats);\n+        if(tr.getWidth(t) > lenPixels) {\n+            return new LiteralText(tr.trimToWidth(tx, lenPixels - (ellipsis ? 8 : 0)) + (ellipsis ? \"...\" : \"\")).formatted(formats);\n+        }\n+        return t;\n+    }\n+\n+    public static void drawButton(int x, int y, int width, int height, boolean selected, boolean isLink) {\n+        UiTheme theme = Iris.getIrisConfig().getUITheme();\n+        if(theme == UiTheme.AQUA) {\n+            y += 1;\n+            height -= 2;\n+        }\n+        if(theme == UiTheme.VANILLA) {\n+            MinecraftClient.getInstance().getTextureManager().bindTexture(AbstractButtonWidget.WIDGETS_LOCATION);\n+            int v = 46 + (selected ? 40 : 20);\n+            int yp = y + (int)Math.ceil((float)Math.max(0, height - 20) / 2);\n+            texture(x, yp, -100, width / 2, 20, 0, v);\n+            texture(x + width / 2, yp, -100, width / 2, 20, 200 - (width / 2), v);\n+        } else {\n+            if(selected) {\n+                fill(x, y, width, height, theme == UiTheme.IRIS ? 0x8AE0E0E0 : 0xE0000000);\n+                if(theme == UiTheme.AQUA && isLink) GuiUtil.fill(x, y + height, width, 1, 0xFF94E4D3);\n+            } else if(theme == UiTheme.IRIS) {\n+                borderedRect(x, y, -100, width, height, 0x8AE0E0E0);\n+            } else {\n+                fill(x, y, width, height, 0x90000000);\n+            }\n+        }\n+    }\n+\n+    public static void drawSlider(int x, int y, int width, int height, boolean selected, float progress) {\n+        UiTheme theme = Iris.getIrisConfig().getUITheme();\n+        if(theme == UiTheme.IRIS) {\n+            int color = 0x8AE0E0E0;\n+\n+            GuiUtil.borderedRect(x, y + 2, -100, width, height - 4, color);\n+            GuiUtil.fill(x + 1, y + 3, width - 2, height - 6, 0x73000000);\n+\n+            int sx = (x + 2) + Math.round(progress * (width - 10));\n+\n+            if (selected) {\n+                GuiUtil.fill(sx, y + 4, 6, height - 8, color);\n+            } else {\n+                GuiUtil.borderedRect(sx, y + 4, -100, 6, height - 8, color);\n+            }\n+        } else if(theme == UiTheme.AQUA) {\n+\n+            fill(x, y, width, height, selected ? 0xE0000000 : 0x90000000);\n+\n+            GuiUtil.fill(x + 2, (int)(y + (height * 0.75)), width - 4, 1, 0xFFFFFFFF);\n+\n+            int sx = x + 2 + Math.round(progress * (width - 7));\n+            GuiUtil.fill(sx, (int)(y + (height * 0.75)) - 3, 3, 7, 0xFFFFFFFF);\n+        } else {\n+            MinecraftClient.getInstance().getTextureManager().bindTexture(AbstractButtonWidget.WIDGETS_LOCATION);\n+\n+            int yp = y + (int)Math.ceil((float)Math.max(0, height - 20) / 2);\n+\n+            texture(x, yp, -100, width / 2, 20, 0, 46);\n+            texture(x + width / 2, yp, -100, width / 2, 20, 200 - (width / 2), 46);\n+\n+            int sx = x + Math.round(progress * (width - 8));\n+            int sv = (selected ? 2 : 1) * 20;\n+\n+            texture(sx, yp, -100, 4, 20, 0, 46 + sv);\n+            texture(sx + 3, yp, -100, 4, 20, 196, 46 + sv);\n+        }\n+    }\n+}"
  },
  {
    "sha": "00ac7505625405c3be5e8477d8a7435d4036657e",
    "filename": "src/main/java/net/coderbot/iris/gui/IrisConfigScreen.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/IrisConfigScreen.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/IrisConfigScreen.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/IrisConfigScreen.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,92 @@\n+package net.coderbot.iris.gui;\n+\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.config.IrisConfig;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ScreenTexts;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.TranslatableText;\n+\n+public class IrisConfigScreen extends Screen implements TransparentBackgroundScreen {\n+    protected final IrisConfig config = Iris.getIrisConfig();\n+    protected PropertyDocumentWidget configProperties;\n+\n+    protected final Screen parent;\n+\n+    private ButtonWidget doneButton;\n+    private ButtonWidget refreshButton;\n+    private ButtonWidget applyButton;\n+\n+    private boolean initialized = false;\n+\n+    public IrisConfigScreen(Screen parent) {\n+        super(new LiteralText(\"\"));\n+        this.parent = parent;\n+\t\tScreenStack.push(parent);\n+    }\n+\n+    @Override\n+    protected void init() {\n+        super.init();\n+        int bottomCenter = this.width / 2 - 50;\n+        boolean inWorld = this.client.world != null;\n+\n+        float scrollAmount = 0.0f;\n+        String page = \"main\";\n+\n+        if(this.configProperties != null) {\n+            scrollAmount = (float)this.configProperties.getScrollAmount() / this.configProperties.getMaxScroll();\n+            page = this.configProperties.getCurrentPage();\n+        }\n+\n+        this.configProperties  = new PropertyDocumentWidget(client, width, height, 20, this.height - 34, 0, this.width, 26, 320);\n+        if(inWorld) this.configProperties.method_31322(false);\n+        this.configProperties.setDocument(this.config.createDocument(this.client.textRenderer, this, this.configProperties, 320), \"main\");\n+\n+        this.configProperties.setScrollAmount(this.configProperties.getMaxScroll() * scrollAmount);\n+        this.configProperties.goTo(page);\n+\n+        this.children.add(configProperties);\n+\n+        this.doneButton = this.addButton(new ButtonWidget(bottomCenter + 104, this.height - 27, 100, 20, ScreenTexts.DONE, button -> { this.saveConfig(); onClose(); }));\n+        this.applyButton = this.addButton(new ButtonWidget(bottomCenter, this.height - 27, 100, 20, new TranslatableText(\"options.iris.apply\"), button -> this.saveConfig()));\n+        this.refreshButton = this.addButton(new ButtonWidget(bottomCenter - 104, this.height - 27, 100, 20, new TranslatableText(\"options.iris.refresh\"), button -> this.loadConfig()));\n+\n+        loadConfig();\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {\n+        if (this.client.world == null) this.renderBackground(matrices);\n+        else this.fillGradient(matrices, 0, 0, width, height, 0x4F232323, 0x4F232323);\n+        this.configProperties.render(matrices, mouseX, mouseY, delta);\n+\n+        GuiUtil.drawDirtTexture(client, 0, 0, -100, width, 20);\n+        GuiUtil.drawDirtTexture(client, 0, this.height - 34, -100, width, 34);\n+        super.render(matrices, mouseX, mouseY, delta);\n+    }\n+\n+    @Override\n+    public void onClose() {\n+    \tScreenStack.pull(this.getClass());\n+\t\tclient.openScreen(ScreenStack.pop());\n+\t}\n+\n+\n+    private void loadConfig() {\n+        this.configProperties.loadProperties();\n+    }\n+\n+    private void saveConfig() {\n+        this.configProperties.saveProperties();\n+    }\n+\n+    @Override\n+    public boolean renderHud() {\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "2eeb9507a4ebcf959c475c02bbc9382bc356d8fa",
    "filename": "src/main/java/net/coderbot/iris/gui/ScreenStack.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/ScreenStack.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/ScreenStack.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/ScreenStack.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,52 @@\n+package net.coderbot.iris.gui;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.Optional;\n+\n+/**\n+ * To prevent long loops of cycling through screens that are linked to each other\n+ */\n+public class ScreenStack {\n+\tprivate static final Deque<Screen> SCREENS = new ArrayDeque<>();\n+\n+\tpublic static void push(Screen screen) {\n+\t\tOptional<Screen> match = matchFor(screen.getClass());\n+\t\tif(match.isPresent()) {\n+\t\t\tSCREENS.remove(match.get());\n+\t\t\tSCREENS.push(match.get());\n+\t\t} else {\n+\t\t\tSCREENS.push(screen);\n+\t\t}\n+\t}\n+\n+\tpublic static Screen pop() {\n+\t\treturn SCREENS.pop();\n+\t}\n+\n+\tpublic static boolean pull(Class<? extends Screen> clazz) {\n+\t\tOptional<Screen> match = matchFor(clazz);\n+\t\tif(match.isPresent()) {\n+\t\t\tSCREENS.remove(match.get());\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate static Optional<Screen> matchFor(Class<? extends Screen> clazz) {\n+\t\tif(clazz == null) return Optional.empty();\n+\t\tScreen match = null;\n+\t\tfor(Screen s : SCREENS) {\n+\t\t\tif(s.getClass().equals(clazz)) {\n+\t\t\t\tmatch = s;\n+\t\t\t}\n+\t\t}\n+\t\tif(match != null) {\n+\t\t\treturn Optional.of(match);\n+\t\t}\n+\t\treturn Optional.empty();\n+\t}\n+}"
  },
  {
    "sha": "31761f97648fc661c743a56b8852206cc77eb70a",
    "filename": "src/main/java/net/coderbot/iris/gui/ShaderPackScreen.java",
    "status": "added",
    "additions": 197,
    "deletions": 0,
    "changes": 197,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/ShaderPackScreen.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/ShaderPackScreen.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/ShaderPackScreen.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,197 @@\n+package net.coderbot.iris.gui;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.gui.element.ShaderPackListWidget;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ScreenTexts;\n+import net.minecraft.client.gui.screen.TickableElement;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.TranslatableText;\n+import net.minecraft.util.Formatting;\n+import net.minecraft.util.Util;\n+\n+import java.io.IOException;\n+\n+public class ShaderPackScreen extends Screen implements TransparentBackgroundScreen {\n+    private ShaderPackListWidget shaderPacks;\n+    private PropertyDocumentWidget shaderProperties;\n+\n+    private ButtonWidget doneButton;\n+    private ButtonWidget applyButton;\n+    private ButtonWidget cancelButton;\n+\n+    private ButtonWidget openFolderButton;\n+    private ButtonWidget refreshButton;\n+\n+    private ButtonWidget irisConfigButton;\n+\n+    private ShaderConfigScreenViewOptionButtonWidget condensedConfigButton;\n+\n+    public ShaderPackScreen(Screen parent) {\n+        super(new TranslatableText(\"options.iris.shaderPackSelection.title\"));\n+        ScreenStack.push(parent);\n+    }\n+\n+    @Override\n+    protected void init() {\n+        super.init();\n+        int bottomCenter = this.width / 2 - 50;\n+        int topCenter = this.width / 2 - 76;\n+        boolean inWorld = this.client.world != null;\n+\n+        this.shaderPacks = new ShaderPackListWidget(this.client, this.width / 2, this.height, 32, this.height - 58, 0, width / 2);\n+        if(inWorld) this.shaderPacks.method_31322(false);\n+        this.children.add(shaderPacks);\n+\n+        this.refreshShaderPropertiesWidget();\n+\n+        this.doneButton = this.addButton(new ButtonWidget(bottomCenter + 104, this.height - 27, 100, 20, ScreenTexts.DONE, button -> { applyChanges(); onClose(); }));\n+        this.applyButton = this.addButton(new ButtonWidget(bottomCenter, this.height - 27, 100, 20, new TranslatableText(\"options.iris.apply\"), button -> this.applyChanges()));\n+        this.cancelButton = this.addButton(new ButtonWidget(bottomCenter - 104, this.height - 27, 100, 20, ScreenTexts.CANCEL, button -> this.onClose()));\n+        this.openFolderButton = this.addButton(new ButtonWidget(topCenter - 78, this.height - 51, 152, 20, new TranslatableText(\"options.iris.openShaderPackFolder\"), button -> Util.getOperatingSystem().open(Iris.getShaderPackDir().toFile())));\n+        this.refreshButton = this.addButton(new ButtonWidget(topCenter + 78, this.height - 51, 152, 20, new TranslatableText(\"options.iris.refreshShaderPacks\"), button -> this.shaderPacks.refresh()));\n+        this.irisConfigButton = this.addButton(new IrisConfigScreenButtonWidget(this.width - 26, 6, button -> client.openScreen(new IrisConfigScreen(this))));\n+\n+        this.condensedConfigButton = this.addButton(new ShaderConfigScreenViewOptionButtonWidget(this.width - 23, 35, 0, 20, Iris.getIrisConfig().getIfCondensedShaderConfig(), button -> {\n+            condensedConfigButton.selected = !condensedConfigButton.selected;\n+            Iris.getIrisConfig().setIfCondensedShaderConfig(condensedConfigButton.selected);\n+            this.refreshShaderPropertiesWidget();\n+            try {\n+                Iris.getIrisConfig().save();\n+            } catch (IOException e) {\n+                Iris.logger.error(\"Error setting config for condensed shader pack config view!\");\n+                e.printStackTrace();\n+            }\n+        }));\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {\n+        if(this.client.world == null) this.renderBackground(matrices);\n+        else this.fillGradient(matrices, 0, 0, width, height, 0x4F232323, 0x4F232323);\n+        this.shaderPacks.render(matrices, mouseX, mouseY, delta);\n+        this.shaderProperties.render(matrices, mouseX, mouseY, delta);\n+\n+        GuiUtil.drawDirtTexture(client, 0, 0, -100, width, 32);\n+        GuiUtil.drawDirtTexture(client, 0, this.height - 58, -100, width, 58);\n+        drawCenteredText(matrices, this.textRenderer, this.title, this.width / 2, 8, 16777215);\n+        drawCenteredText(matrices, this.textRenderer, new TranslatableText(\"pack.iris.select.title\").formatted(Formatting.GRAY, Formatting.ITALIC), (int)(this.width * 0.25), 21, 16777215);\n+        drawCenteredText(matrices, this.textRenderer, new TranslatableText(\"pack.iris.configure.title\").formatted(Formatting.GRAY, Formatting.ITALIC), (int)(this.width * 0.75), 21, 16777215);\n+        super.render(matrices, mouseX, mouseY, delta);\n+\n+        if(irisConfigButton.isMouseOver(mouseX, mouseY)) {\n+            this.renderTooltip(matrices, new TranslatableText(\"tooltip.iris.config\"), mouseX, mouseY);\n+        }\n+\n+        boolean mouseInHoverArea = mouseX > width / 2 && mouseY > 32 && mouseY < ((height - 32) * 0.17) + 32 && this.shaderProperties.getScrollAmount() < 3;\n+\n+        this.condensedConfigButton.areaHovered = mouseInHoverArea;\n+    }\n+\n+    @Override\n+    public void onClose() {\n+\t\tScreenStack.pull(this.getClass());\n+\t\tclient.openScreen(ScreenStack.pop());\n+    }\n+\n+    private void applyChanges() {\n+        ShaderPackListWidget.ShaderPackEntry entry = this.shaderPacks.getSelected();\n+        String name = \"(internal)\";\n+        if(entry != null) name = entry.getPackName();\n+        Iris.getIrisConfig().setShaderPackName(name);\n+        try {\n+            Iris.reload();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        this.reloadShaderConfig();\n+    }\n+\n+    private void refreshShaderPropertiesWidget() {\n+        this.children.remove(shaderProperties);\n+\n+        float scrollAmount = 0.0f;\n+        String page = \"screen\";\n+\n+        if(this.shaderProperties != null) {\n+            scrollAmount = (float)this.shaderProperties.getScrollAmount() / this.shaderProperties.getMaxScroll();\n+            page = this.shaderProperties.getCurrentPage();\n+        }\n+\n+        this.shaderProperties = new PropertyDocumentWidget(this.client, this.width / 2, this.height, 32, this.height - 58, this.width / 2, this.width, 26);\n+        if(this.client.world != null) this.shaderProperties.method_31322(false);\n+        this.reloadShaderConfig();\n+\n+        this.shaderProperties.goTo(page);\n+        this.shaderProperties.setScrollAmount(this.shaderProperties.getMaxScroll() * scrollAmount);\n+\n+        this.children.add(shaderProperties);\n+    }\n+\n+    private void reloadShaderConfig() {\n+        this.shaderProperties.setDocument(PropertyDocumentWidget.createShaderpackConfigDocument(this.client.textRenderer, this.width / 2, Iris.getIrisConfig().getShaderPackName(), Iris.getCurrentPack(), this.shaderProperties), \"screen\");\n+    }\n+\n+\t@Override\n+\tpublic void tick() {\n+\t\tfor(Element e : this.children) {\n+\t\t\tif(e instanceof TickableElement) ((TickableElement)e).tick();\n+\t\t}\n+\t}\n+\n+\t@Override\n+    public boolean renderHud() {\n+        return false;\n+    }\n+\n+\tpublic static class IrisConfigScreenButtonWidget extends ButtonWidget {\n+        public IrisConfigScreenButtonWidget(int x, int y, PressAction press) {\n+            super(x, y, 20, 20, LiteralText.EMPTY, press);\n+        }\n+\n+        @Override\n+        public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {\n+            MinecraftClient.getInstance().getTextureManager().bindTexture(GuiUtil.WIDGETS_TEXTURE);\n+            drawTexture(matrices, x, y, isMouseOver(mouseX, mouseY) ? 20 : 0, 0, 20, 20);\n+        }\n+    }\n+\n+    public static class ShaderConfigScreenViewOptionButtonWidget extends ButtonWidget implements TickableElement {\n+        private int u;\n+        private int v;\n+        private int fadeTicks;\n+        public boolean areaHovered;\n+\n+        public boolean selected;\n+\n+        public ShaderConfigScreenViewOptionButtonWidget(int x, int y, int u, int v, boolean selected, PressAction press) {\n+            super(x, y, 18, 13, LiteralText.EMPTY, press);\n+            this.selected = selected;\n+            this.u = u;\n+            this.v = v;\n+        }\n+\n+        @Override\n+        public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {\n+            MinecraftClient.getInstance().getTextureManager().bindTexture(GuiUtil.WIDGETS_TEXTURE);\n+            float alpha = Math.max(0, Math.min(3, this.fadeTicks + (hovered ? delta : -delta))) / 3;\n+            RenderSystem.enableBlend();\n+            RenderSystem.color4f(1f, 1f, 1f, alpha);\n+            drawTexture(matrices, x, y, u + (isMouseOver(mouseX, mouseY) ? 18 : 0), v + (selected ? 13 : 0), 18, 13);\n+            //GuiUtil.texture(x, y, -100, 18, 13, /*u + (isMouseOver(mouseX, mouseY) ? 18 : 0), v + (selected ? 13 : 0)*/0,0, 18, 13, 1f, 1f, 1f, alpha);\n+        }\n+\n+\t\t@Override\n+        public void tick() {\n+            if(areaHovered) {\n+                if(fadeTicks < 3) fadeTicks++;\n+            } else if(fadeTicks > 0) fadeTicks--;\n+        }\n+    }\n+}"
  },
  {
    "sha": "0df5fefe7fa890a0082440342a08f51662e71094",
    "filename": "src/main/java/net/coderbot/iris/gui/TransparentBackgroundScreen.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/TransparentBackgroundScreen.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/TransparentBackgroundScreen.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/TransparentBackgroundScreen.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,5 @@\n+package net.coderbot.iris.gui;\n+\n+public interface TransparentBackgroundScreen {\n+    boolean renderHud();\n+}"
  },
  {
    "sha": "db83a23557db1014f4980949caa21dfa9a79e927",
    "filename": "src/main/java/net/coderbot/iris/gui/UiTheme.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/UiTheme.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/UiTheme.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/UiTheme.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,5 @@\n+package net.coderbot.iris.gui;\n+\n+public enum UiTheme {\n+    IRIS, VANILLA, AQUA\n+}"
  },
  {
    "sha": "ecb95c03ec74abdd369fc08eaa2f2f65a9173b4a",
    "filename": "src/main/java/net/coderbot/iris/gui/element/PropertyDocumentWidget.java",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/element/PropertyDocumentWidget.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/element/PropertyDocumentWidget.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/element/PropertyDocumentWidget.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,175 @@\n+package net.coderbot.iris.gui.element;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.property.*;\n+import net.coderbot.iris.shaderpack.ShaderPack;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.screen.TickableElement;\n+import net.minecraft.client.gui.widget.AlwaysSelectedEntryListWidget;\n+import net.minecraft.client.resource.language.I18n;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.TranslatableText;\n+import net.minecraft.util.Formatting;\n+\n+import java.util.*;\n+\n+public class PropertyDocumentWidget extends ShaderScreenEntryListWidget<PropertyDocumentWidget.PropertyEntry> {\n+    protected Map<String, PropertyList> document = new HashMap<>();\n+    protected String currentPage = \"\";\n+    protected int rowWidth = 0;\n+    protected boolean resizedRows = false;\n+\n+    protected Runnable save = () -> {};\n+    protected Runnable load = () -> {};\n+\n+    public PropertyDocumentWidget(MinecraftClient client, int width, int height, int top, int bottom, int left, int right, int itemHeight) {\n+        super(client, width, height, top, bottom, left, right, itemHeight);\n+    }\n+\n+    public PropertyDocumentWidget(MinecraftClient client, int width, int height, int top, int bottom, int left, int right, int itemHeight, int rowWidth) {\n+        this(client, width, height, top, bottom, left, right, itemHeight);\n+        this.resizedRows = true;\n+        this.rowWidth = rowWidth;\n+    }\n+\n+    @Override\n+    public int getRowWidth() {\n+        return resizedRows ? rowWidth : super.getRowWidth();\n+    }\n+\n+    public void addPage(String page, PropertyList properties) {\n+        this.document.put(page, properties);\n+    }\n+\n+    public void goTo(String page) {\n+        this.clearEntries();\n+        for(Property p : getPage(page)) {\n+            this.addEntry(new PropertyEntry(this, p));\n+        }\n+        this.currentPage = page;\n+        this.setScrollAmount(0.0);\n+    }\n+\n+    public Set<String> getPages() {\n+        return this.document.keySet();\n+    }\n+\n+    public PropertyList getPage(String name) {\n+    \tif(!currentPage.isEmpty()) return document.getOrDefault(name, new PropertyList(new TitleProperty(new TranslatableText(\"page.iris.notFound\").formatted(Formatting.DARK_RED, Formatting.BOLD)), new LinkProperty(this, currentPage, new TranslatableText(\"option.iris.back\"), LinkProperty.Align.CENTER_RIGHT), new Property(new TranslatableText(\"page.iris.invalid\", name).formatted(Formatting.GRAY))));\n+        return document.getOrDefault(name, new PropertyList(new TitleProperty(new TranslatableText(\"page.iris.notFound\").formatted(Formatting.DARK_RED))));\n+    }\n+\n+    public void saveProperties() {\n+        save.run();\n+    }\n+\n+    public void loadProperties() {\n+        load.run();\n+    }\n+\n+    public void onSave(Runnable procedure) {\n+        this.save = procedure;\n+    }\n+\n+    public void onLoad(Runnable procedure) {\n+        this.load = procedure;\n+    }\n+\n+    @Override\n+    protected int getScrollbarXOffset() {\n+        return -2;\n+    }\n+\n+    public void setDocument(Map<String, PropertyList> document, String homePage) {\n+        this.document = document;\n+        this.goTo(homePage);\n+    }\n+\n+    public String getCurrentPage() {\n+        return currentPage;\n+    }\n+\n+    public static Map<String, PropertyList> createShaderpackConfigDocument(TextRenderer tr, int width, String shaderName, ShaderPack pack, PropertyDocumentWidget widget) {\n+        Properties shaderProperties = pack.getShaderProperties();\n+        Map<String, PropertyList> document = new HashMap<>();\n+        Map<String, String> child2Parent = new HashMap<>();\n+        int tw = (int)(width * 0.6) - 21;\n+        int bw = width - 20;\n+        if(shaderProperties.isEmpty() || !shaderProperties.containsKey(\"screen\")) {\n+            document.put(\"screen\", new PropertyList(\n+                    new TitleProperty(new LiteralText(shaderName).formatted(Formatting.BOLD), 0xAAFFFFFF),\n+                    new Property(GuiUtil.trimmed(tr, \"page.iris.noConfig\", bw, true, true, Formatting.ITALIC))\n+            ));\n+            return document;\n+        }\n+        List<String> sliderOptions = new ArrayList<>();\n+\t\tList<String> profiles = new ArrayList<>();\n+        for(String s : shaderProperties.stringPropertyNames()) {\n+            if(s.equals(\"sliders\")) {\n+                sliderOptions.add(shaderProperties.getProperty(s));\n+            } else if(s.startsWith(\"profile.\")) {\n+            \tprofiles.add(s);\n+\t\t\t}\n+        }\n+        for(String s : shaderProperties.stringPropertyNames()) {\n+            if(s.startsWith(\"screen.\") || s.equals(\"screen\")) {\n+                PropertyList page = new PropertyList();\n+                boolean subScreen = s.startsWith(\"screen.\");\n+                page.add(new TitleProperty(GuiUtil.trimmed(tr, subScreen ? s : shaderName, width - 60, subScreen, true, Formatting.BOLD), 0xAAFFFFFF));\n+                String[] screenOptions = shaderProperties.getProperty(s).split(\" \");\n+                for(String p : screenOptions) {\n+                    if(p.equals(\"<profile>\")) {\n+                        page.add(new StringOptionProperty(profiles, 1, widget, p, GuiUtil.trimmed(tr, \"option.iris.profile\", tw, true, true), sliderOptions.contains(p), true));\n+                    } else if(p.equals(\"<empty>\")) {\n+                        if(!Iris.getIrisConfig().getIfCondensedShaderConfig()) page.add(Property.EMPTY);\n+                    } else if(p.startsWith(\"[\") && p.endsWith(\"]\")) {\n+                        String a = \"screen.\"+String.copyValueOf(Arrays.copyOfRange(p.toCharArray(), 1, p.length() - 1));\n+                        page.add(new LinkProperty(widget, a, GuiUtil.trimmed(tr, a, bw, true, true), LinkProperty.Align.LEFT));\n+                        child2Parent.put(a, s);\n+                    } else {\n+                        page.add(new StringOptionProperty(ImmutableList.of(\"This\", \"Is\", \"Not\", \"Functional\"), 0, widget, p, GuiUtil.trimmed(tr, \"option.\"+p, tw, true, true), sliderOptions.contains(p), false));\n+                    }\n+                }\n+                document.put(s, page);\n+            }\n+        }\n+        for(String child : child2Parent.keySet()) {\n+            if(document.containsKey(child)) document.get(child).add(1, new LinkProperty(widget, child2Parent.get(child), new TranslatableText(\"option.iris.back\"), LinkProperty.Align.CENTER_RIGHT));\n+        }\n+        return document;\n+    }\n+\n+    public static class PropertyEntry extends AlwaysSelectedEntryListWidget.Entry<PropertyEntry> {\n+        private final Property property;\n+        private final PropertyDocumentWidget parent;\n+\n+        public PropertyEntry(PropertyDocumentWidget parent, Property property) {\n+            this.property = property;\n+            this.parent = parent;\n+        }\n+\n+        @Override\n+        public boolean mouseClicked(double mouseX, double mouseY, int button) {\n+            return this.property.onClicked(mouseX, mouseY, button);\n+        }\n+\n+        @Override\n+        public boolean mouseDragged(double mouseX, double mouseY, int button, double deltaX, double deltaY) {\n+            return this.property.mouseDragged(mouseX, mouseY, button, deltaX, deltaY);\n+        }\n+\n+        @Override\n+        public boolean charTyped(char chr, int keyCode) {\n+            return this.property.charTyped(chr, keyCode);\n+        }\n+\n+        @Override\n+        public void render(MatrixStack matrices, int index, int y, int x, int entryWidth, int entryHeight, int mouseX, int mouseY, boolean hovered, float tickDelta) {\n+            this.property.render(matrices, x, y, entryWidth, entryHeight, mouseX, mouseY, hovered, tickDelta);\n+        }\n+    }\n+}"
  },
  {
    "sha": "680bdf7dd627751b530e7ac302e66fad522b6282",
    "filename": "src/main/java/net/coderbot/iris/gui/element/ShaderPackListWidget.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/element/ShaderPackListWidget.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/element/ShaderPackListWidget.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/element/ShaderPackListWidget.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,125 @@\n+package net.coderbot.iris.gui.element;\n+\n+import com.mojang.blaze3d.systems.RenderSystem;\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.gui.widget.AlwaysSelectedEntryListWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.MutableText;\n+import net.minecraft.util.Formatting;\n+import net.minecraft.util.Tickable;\n+import net.minecraft.util.math.MathHelper;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+\n+public class ShaderPackListWidget extends ShaderScreenEntryListWidget<ShaderPackListWidget.ShaderPackEntry> {\n+    public ShaderPackListWidget(MinecraftClient minecraftClient, int width, int height, int top, int bottom, int left, int right) {\n+        super(minecraftClient, width, height, top, bottom, left, right, 20);\n+        refresh();\n+    }\n+\n+    @Override\n+    public int getRowWidth() {\n+        return width - 6;\n+    }\n+\n+    @Override\n+    protected int getRowTop(int index) {\n+        return super.getRowTop(index) + 2;\n+    }\n+\n+    public void refresh() {\n+        this.clearEntries();\n+        try {\n+            Path path = Iris.getShaderPackDir();\n+            int index = 0;\n+            addEntry(index, \"(internal)\");\n+            for(Path folder : Files.walk(path, 1).filter(p -> {\n+                if(Files.isDirectory(p)) {\n+                    return Files.exists(p.resolve(\"shaders\"));\n+                } else if(p.toString().endsWith(\".zip\")) {\n+                    try {\n+                        FileSystem zipSystem = FileSystems.newFileSystem(p, Iris.class.getClassLoader());\n+                        return Files.exists(zipSystem.getPath(\"shaders\"));\n+                    } catch (IOException ignored) {}\n+                }\n+                return false;\n+            }).collect(Collectors.toList())) {\n+                String name = folder.getFileName().toString();\n+                if(!name.equals(\"(internal)\")) {\n+                    index++;\n+                    addEntry(index, name);\n+                }\n+            }\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {\n+        super.render(matrices, mouseX, mouseY, delta);\n+        GuiUtil.drawCompactScrollBar(this.width - 2, this.top + 2, this.bottom - 2, this.getMaxScroll(), this.getScrollAmount(), this.getMaxPosition(), Math.max(0, Math.min(3, this.scrollbarFade + (hovered ? delta : -delta))) / 3);\n+        //GuiUtil.drawCompactScrollBar(this.width - 2, this.top + 2, this.bottom - 2, this.getMaxScroll(), this.getScrollAmount(), this.getMaxPosition(), 1f);\n+        this.hovered = this.isMouseOver(mouseX, mouseY);\n+    }\n+\n+    public void addEntry(int index, String name) {\n+        ShaderPackEntry entry = new ShaderPackEntry(index, this, name);\n+        if(Iris.getIrisConfig().getShaderPackName().equals(name)) this.selected = entry;\n+        this.addEntry(entry);\n+    }\n+\n+    public static class ShaderPackEntry extends AlwaysSelectedEntryListWidget.Entry<ShaderPackEntry> {\n+        private final String packName;\n+        private final ShaderPackListWidget list;\n+        private int index;\n+\n+        public ShaderPackEntry(int index, ShaderPackListWidget list, String packName) {\n+            this.packName = packName;\n+            this.list = list;\n+            this.index = index;\n+        }\n+\n+        public boolean isSelected() {\n+            return list.getSelected() == this;\n+        }\n+\n+        public String getPackName() {\n+            return packName;\n+        }\n+\n+        @Override\n+        public void render(MatrixStack matrices, int index, int y, int x, int entryWidth, int entryHeight, int mouseX, int mouseY, boolean hovered, float tickDelta) {\n+            TextRenderer textRenderer = MinecraftClient.getInstance().textRenderer;\n+            int color = 0xFFFFFF;\n+            String name = packName;\n+            if(textRenderer.getWidth(new LiteralText(name).formatted(Formatting.BOLD)) > this.list.width - 8) {\n+                char[] cs = packName.toCharArray();\n+                name = String.copyValueOf(Arrays.copyOfRange(cs, 0, Math.min(cs.length, (int)(((float)this.list.width - 14) / 6)) - 3))+\"...\";\n+            }\n+            MutableText text = new LiteralText(name);\n+            if(this.isMouseOver(mouseX, mouseY)) text = text.formatted(Formatting.BOLD);\n+            if(this.isSelected()) color = 0xFFF263;\n+            drawCenteredText(matrices, textRenderer, text, (x + entryWidth / 2) - 2, y + (entryHeight - 11) / 2, color);\n+        }\n+\n+        @Override\n+        public boolean mouseClicked(double mouseX, double mouseY, int button) {\n+            if(!this.isSelected() && button == 0) {\n+                this.list.select(this.index);\n+                return true;\n+            }\n+            return false;\n+        }\n+    }\n+}"
  },
  {
    "sha": "614391f0690a0b8d15a28db4e3e8addc1a65b9ce",
    "filename": "src/main/java/net/coderbot/iris/gui/element/ShaderScreenEntryListWidget.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/element/ShaderScreenEntryListWidget.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/element/ShaderScreenEntryListWidget.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/element/ShaderScreenEntryListWidget.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,67 @@\n+package net.coderbot.iris.gui.element;\n+\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.TickableElement;\n+import net.minecraft.client.gui.widget.AlwaysSelectedEntryListWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+\n+import java.util.Optional;\n+\n+public abstract class ShaderScreenEntryListWidget<E extends AlwaysSelectedEntryListWidget.Entry<E>> extends AlwaysSelectedEntryListWidget<E> implements TickableElement {\n+    protected E selected;\n+\n+    protected int scrollbarFade = 0;\n+    protected boolean hovered = false;\n+\n+    public ShaderScreenEntryListWidget(MinecraftClient minecraftClient, int width, int height, int top, int bottom, int left, int right, int itemHeight) {\n+        super(minecraftClient, width, height, top, bottom, itemHeight);\n+        this.left = left;\n+        this.right = right;\n+    }\n+\n+    @Override\n+    public int getRowWidth() {\n+        return width - 4;\n+    }\n+\n+    @Override\n+    public void tick() {\n+        if(hovered) {\n+            if(scrollbarFade < 3) scrollbarFade++;\n+        } else if(scrollbarFade > 0) scrollbarFade--;\n+    }\n+\n+    @Override\n+    protected final int getScrollbarPositionX() {\n+        return 32767;\n+    }\n+\n+    protected int getScrollbarXOffset() {\n+        return -2;\n+    }\n+\n+    protected int getScrollbarTopMargin() {\n+        return 2;\n+    }\n+\n+    protected int getScrollbarBottomMargin() {\n+        return 2;\n+    }\n+\n+    public E getSelected() {\n+        return selected;\n+    }\n+\n+    public void select(int entry) {\n+        this.selected = this.getEntry(entry);\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int mouseX, int mouseY, float delta) {\n+        super.render(matrices, mouseX, mouseY, delta);\n+        GuiUtil.drawCompactScrollBar(this.left + this.width + getScrollbarXOffset(), this.top + getScrollbarTopMargin(), this.bottom - getScrollbarBottomMargin(), this.getMaxScroll(), this.getScrollAmount(), this.getMaxPosition(), Math.max(0, Math.min(3, this.scrollbarFade + (hovered ? delta : -delta))) / 3);\n+        this.hovered = this.isMouseOver(mouseX, mouseY);\n+    }\n+}"
  },
  {
    "sha": "501300db83e09d835f815ab7ae716072ef3fb10b",
    "filename": "src/main/java/net/coderbot/iris/gui/option/ShaderPackScreenButtonOption.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/option/ShaderPackScreenButtonOption.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/option/ShaderPackScreenButtonOption.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/option/ShaderPackScreenButtonOption.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,27 @@\n+package net.coderbot.iris.gui.option;\n+\n+import net.coderbot.iris.gui.ScreenStack;\n+import net.coderbot.iris.gui.ShaderPackScreen;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.OptionButtonWidget;\n+import net.minecraft.client.options.GameOptions;\n+import net.minecraft.client.options.Option;\n+import net.minecraft.text.TranslatableText;\n+\n+public class ShaderPackScreenButtonOption extends Option {\n+    private final Screen parent;\n+    private final MinecraftClient client;\n+\n+    public ShaderPackScreenButtonOption(Screen parent, MinecraftClient client) {\n+        super(\"options.iris.shaderPackSelection\");\n+        this.parent = parent;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public AbstractButtonWidget createButton(GameOptions options, int x, int y, int width) {\n+        return new OptionButtonWidget(x, y, width, 20, this, new TranslatableText(\"options.iris.shaderPackSelection\"), button -> client.openScreen(new ShaderPackScreen(this.parent)));\n+    }\n+}"
  },
  {
    "sha": "78390d722325546f6505831689a66480a009b114",
    "filename": "src/main/java/net/coderbot/iris/gui/property/BooleanOptionProperty.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/BooleanOptionProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/BooleanOptionProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/BooleanOptionProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,29 @@\n+package net.coderbot.iris.gui.property;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Formatting;\n+\n+public class BooleanOptionProperty extends OptionProperty<Boolean> {\n+    public BooleanOptionProperty(PropertyDocumentWidget document, boolean defaultValue, String key, Text label, boolean isSlider) {\n+        super(ImmutableList.of(true, false), defaultValue ? 0 : 1, document, key, label, isSlider);\n+    }\n+\n+    @Override\n+    public Text createValueText(int width) {\n+        return GuiUtil.trimmed(MinecraftClient.getInstance().textRenderer, getValue() ? \"property.iris.boolean.true\" : \"property.iris.boolean.false\", width, true, true, isDefault() ? Formatting.RESET : getValue() ? Formatting.GREEN : Formatting.RED);\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        this.valueText = null;\n+        if(value.equals(\"true\") || value.equals(\"false\")) {\n+            this.setValue(Boolean.parseBoolean(value));\n+            return;\n+        }\n+        this.index = defaultIndex;\n+    }\n+}"
  },
  {
    "sha": "784ca62919b43e702334302ea7ad3752729d7f36",
    "filename": "src/main/java/net/coderbot/iris/gui/property/FloatOptionProperty.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/FloatOptionProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/FloatOptionProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/FloatOptionProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,29 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Formatting;\n+\n+import java.util.List;\n+\n+public class FloatOptionProperty extends OptionProperty<Float> {\n+    public FloatOptionProperty(List<Float> values, int defaultIndex, PropertyDocumentWidget document, String key, Text label, boolean isSlider) {\n+        super(values, defaultIndex, document, key, label, isSlider);\n+    }\n+\n+    @Override\n+    public Text createValueText(int width) {\n+        return GuiUtil.trimmed(MinecraftClient.getInstance().textRenderer, Float.toString(this.getValue()), width, false, true, isDefault() ? Formatting.RESET : Formatting.YELLOW);\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        this.valueText = null;\n+        try {\n+            this.setValue(Float.parseFloat(value));\n+        } catch (NumberFormatException ignored) { return; }\n+        this.index = defaultIndex;\n+    }\n+}"
  },
  {
    "sha": "e94d25fb988c59a9dc02a54759f7dbf518fb8bea",
    "filename": "src/main/java/net/coderbot/iris/gui/property/FunctionalButtonProperty.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/FunctionalButtonProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/FunctionalButtonProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/FunctionalButtonProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,24 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.text.Text;\n+\n+public class FunctionalButtonProperty extends LinkProperty {\n+    protected final Runnable onClick;\n+\n+    public FunctionalButtonProperty(PropertyDocumentWidget document, Runnable onClick, Text label, Align align) {\n+        super(document, \"\", label, align);\n+        this.onClick = onClick;\n+    }\n+\n+    @Override\n+    public boolean onClicked(double mouseX, double mouseY, int button) {\n+        if(button == 0) {\n+            GuiUtil.playClickSound(1.0f);\n+            onClick.run();\n+            return true;\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "ca0c08c33390135084044a0f7b43c976d4c0b869",
    "filename": "src/main/java/net/coderbot/iris/gui/property/IntOptionProperty.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/IntOptionProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/IntOptionProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/IntOptionProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,29 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Formatting;\n+\n+import java.util.List;\n+\n+public class IntOptionProperty extends OptionProperty<Integer> {\n+    public IntOptionProperty(List<Integer> values, int defaultIndex, PropertyDocumentWidget document, String key, Text label, boolean isSlider) {\n+        super(values, defaultIndex, document, key, label, isSlider);\n+    }\n+\n+    @Override\n+    public Text createValueText(int width) {\n+        return GuiUtil.trimmed(MinecraftClient.getInstance().textRenderer, Integer.toString(this.getValue()), width, false, true, isDefault() ? Formatting.RESET : Formatting.YELLOW);\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        this.valueText = null;\n+        try {\n+            this.setValue(Integer.parseInt(value));\n+        } catch (NumberFormatException ignored) { return; }\n+        this.index = defaultIndex;\n+    }\n+}"
  },
  {
    "sha": "2faa9d516e23a732e6f7d7b03d54fe5e0471b6b7",
    "filename": "src/main/java/net/coderbot/iris/gui/property/LinkProperty.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/LinkProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/LinkProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/LinkProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,64 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n+\n+public class LinkProperty extends Property {\n+    protected final PropertyDocumentWidget document;\n+    protected final String page;\n+    protected final Align align;\n+\n+    public LinkProperty(PropertyDocumentWidget document, String pageName, Text label, Align align) {\n+        super(label);\n+        this.document = document;\n+        this.page = pageName;\n+        this.align = align;\n+    }\n+\n+    @Override\n+    public boolean onClicked(double mouseX, double mouseY, int button) {\n+        if(button == 0) {\n+            GuiUtil.playClickSound(1.0f);\n+            this.document.goTo(page);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int x, int y, int width, int height, int mouseX, int mouseY, boolean isHovered, float delta) {\n+        int color = 0x8AE0E0E0;\n+        int bx = x + 4;\n+        int bw = width - 12;\n+        /*if(isHovered) {\n+            GuiUtil.fill(bx, y, bw, height, color);\n+        } else {\n+            GuiUtil.borderedRect(bx, y, -100, bw, height, color);\n+        }*/\n+        GuiUtil.drawButton(bx, y, bw, height, isHovered, true);\n+        MinecraftClient mc = MinecraftClient.getInstance();\n+        int tx;\n+        int w = mc.textRenderer.getWidth(this.label);\n+        if(this.align.center) tx = (x + (width/2)) - (w / 2) - 2;\n+        else if(this.align.left) tx = x + 10;\n+        else tx = x + width - 10 - w;\n+        this.drawText(mc, label, matrices, tx, y + (height / 2), 0xFFFFFF, false, true, true);\n+        this.drawText(mc, new LiteralText(this.align.left ? \">\" : \"<\"), matrices, this.align.left ? x + width - 19 : x + 11, y + (height / 2), 0xFFFFFF, false, true, true);\n+    }\n+\n+    public enum Align {\n+        LEFT(true, false), CENTER_LEFT(true, true), RIGHT(false, false), CENTER_RIGHT(false, true);\n+\n+        public final boolean left;\n+        public final boolean center;\n+\n+        Align(boolean left, boolean center) {\n+            this.left = left;\n+            this.center = center;\n+        }\n+    }\n+}"
  },
  {
    "sha": "ed89808922469a38b08d9d950ebd51491cd5de3b",
    "filename": "src/main/java/net/coderbot/iris/gui/property/OptionProperty.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/OptionProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/OptionProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/OptionProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,110 @@\n+package net.coderbot.iris.gui.property;\n+\n+import com.google.common.collect.Lists;\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.Text;\n+\n+import java.util.List;\n+\n+public abstract class OptionProperty<T> extends ValueProperty<T> {\n+    protected List<T> values;\n+    protected int index;\n+    protected final int defaultIndex;\n+    protected final boolean isSlider;\n+\n+    public OptionProperty(List<T> values, int defaultIndex, PropertyDocumentWidget document, String key, Text label, boolean isSlider) {\n+        super(document, key, label);\n+        this.values = values;\n+        this.index = defaultIndex;\n+        this.defaultIndex = defaultIndex;\n+        this.isSlider = isSlider;\n+    }\n+\n+    public void cycle() {\n+        this.index++;\n+        if(index >= values.size()) index = 0;\n+        this.valueText = null;\n+    }\n+\n+    @Override\n+    public T getValue() {\n+        return values.get(index);\n+    }\n+\n+    @Override\n+    public void setValue(T value) {\n+        if(values.contains(value)) {\n+            this.index = values.indexOf(value);\n+        } else {\n+            Iris.logger.warn(\"Unable to set value of {} to {} - Invalid value!\", key, value);\n+            this.index = defaultIndex;\n+        }\n+        this.valueText = null;\n+    }\n+\n+    protected boolean isButtonHovered(double mouseX, boolean entryHovered) {\n+        return entryHovered && mouseX > cachedX + (cachedWidth * 0.6) - 7;\n+    }\n+\n+    @Override\n+    public boolean onClicked(double mouseX, double mouseY, int button) {\n+        if(isButtonHovered(mouseX, true) && button == 0) {\n+            GuiUtil.playClickSound(1.025f);\n+            if(!isSlider) {\n+                cycle();\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean mouseDragged(double mouseX, double mouseY, int button, double deltaX, double deltaY) {\n+        if(isSlider && isButtonHovered(mouseX, true)) {\n+            float pos = (float)((mouseX - (cachedX + (cachedWidth * 0.6) - 7)) / ((cachedWidth * 0.4)));\n+            this.index = Math.min((int)(pos * this.values.size()), this.values.size() - 1);\n+            this.valueText = null;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int x, int y, int width, int height, int mouseX, int mouseY, boolean isHovered, float delta) {\n+        updateCaches(width, x);\n+        MinecraftClient mc = MinecraftClient.getInstance();\n+        this.drawText(mc, label, matrices, x + 10, y + (height / 2), 0xFFFFFF, false, true, true);\n+        if(isSlider) this.renderSlider(mc, matrices, x, y, width, height, mouseX, isHovered);\n+        else this.renderButton(mc, matrices, x, y, width, height, mouseX, isHovered);\n+    }\n+\n+    private void renderButton(MinecraftClient mc, MatrixStack matrices, int x, int y, int width, int height, int mouseX, boolean isHovered) {\n+        int bx = (int)(x + (width * 0.6)) - 7;\n+        int bw = (int)(width * 0.4);\n+\n+        GuiUtil.drawButton(bx, y, bw, height, this.isButtonHovered(mouseX, isHovered), false);\n+\n+        Text vt = this.getValueText();\n+        this.drawText(mc, vt, matrices, (int)(x + (width * 0.8)) - (mc.textRenderer.getWidth(vt) / 2) - 7, y + (height / 2), 0xFFFFFF, false, true, true);\n+    }\n+\n+    private void renderSlider(MinecraftClient mc, MatrixStack matrices, int x, int y, int width, int height, int mouseX, boolean isHovered) {\n+        float progress = ((float)this.index / (this.values.size() - 1));\n+        int sx = (int)(x + (width * 0.6)) - 7;\n+        int sw = (int)(width * 0.4);\n+\n+        GuiUtil.drawSlider(sx, y, sw, height, this.isButtonHovered(mouseX, isHovered), progress);\n+\n+        Text vt = this.getValueText();\n+        this.drawText(mc, vt, matrices, (int)(x + (width * 0.8)) - (mc.textRenderer.getWidth(vt) / 2) - 7, y + (height / 2), 0xFFFFFF, false, true, true);\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return index == defaultIndex;\n+    }\n+}"
  },
  {
    "sha": "c39735345905b5a99b5bd55069345b67529297da",
    "filename": "src/main/java/net/coderbot/iris/gui/property/PairProperty.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/PairProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/PairProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/PairProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,56 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+\n+public class PairProperty extends TupleProperty {\n+    protected final Property left;\n+    protected final Property right;\n+\n+    protected int cachedWidth = 0;\n+    protected int cachedX = 0;\n+\n+    public PairProperty(Property left, Property right) {\n+        super(new LiteralText(\"\"));\n+        this.left = left;\n+        this.right = right;\n+    }\n+\n+    public Property getLeft() {\n+        return left;\n+    }\n+\n+    public Property getRight() {\n+        return right;\n+    }\n+\n+    @Override\n+    public boolean onClicked(double mouseX, double mouseY, int button) {\n+        return mouseX > ((float)cachedWidth / 2) + cachedX ? right.onClicked(mouseX, mouseY, button) : left.onClicked(mouseX, mouseY, button);\n+    }\n+\n+    @Override\n+    public boolean mouseDragged(double mouseX, double mouseY, int button, double deltaX, double deltaY) {\n+        return mouseX > ((float)cachedWidth / 2) + cachedX ? right.mouseDragged(mouseX, mouseY, button, deltaX, deltaY) : left.mouseDragged(mouseX, mouseY, button, deltaX, deltaY);\n+    }\n+\n+    @Override\n+    public boolean charTyped(char c, int keyCode) {\n+        return left.charTyped(c, keyCode) || right.charTyped(c, keyCode);\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int x, int y, int width, int height, int mouseX, int mouseY, boolean isHovered, float delta) {\n+        this.cachedWidth = width;\n+        this.cachedX = x;\n+        int w = (width / 2) - 2;\n+        boolean mouseLeft = mouseX < ((float)width / 2) + x;\n+        left.render(matrices, x, y, w, height, mouseX, mouseY, isHovered && mouseLeft, delta);\n+        right.render(matrices, x + w + 4, y, w, height, mouseX, mouseY, isHovered && !mouseLeft, delta);\n+    }\n+\n+    @Override\n+    public Property[] getContainedProperties() {\n+        return new Property[] {this.left, this.right};\n+    }\n+}"
  },
  {
    "sha": "83c12e7232253bc21c2672417e68a3b6d2130cf2",
    "filename": "src/main/java/net/coderbot/iris/gui/property/Property.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/Property.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/Property.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/Property.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,59 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.font.TextRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n+\n+/**\n+ * An element of a document. Used for options\n+ * or configuration menus. Property objects are\n+ * added to a PropertyList, and PropertyLists are\n+ * added to a PropertyDocumentWidget which is used\n+ * in a GUI.\n+ */\n+public class Property {\n+    protected final Text label;\n+\n+    /**\n+     * A completely empty property. When used in the\n+     * shader pack config document, EMPTYs can be\n+     * hidden by enabling condensed view.\n+     */\n+    public static final Property EMPTY = new Property(LiteralText.EMPTY);\n+\n+    /**\n+     * The only difference between this and\n+     * EMPTY is that it is not EMPTY, and\n+     * won't be included if EMPTY is ever\n+     * searched for.\n+     */\n+    public static final Property PLACEHOLDER = new Property(LiteralText.EMPTY);\n+\n+    public Property(Text label) {\n+        this.label = label;\n+    }\n+\n+    public boolean onClicked(double mouseX, double mouseY, int button) {\n+        return false;\n+    }\n+\n+    public boolean mouseDragged(double mouseX, double mouseY, int button, double deltaX, double deltaY) {\n+        return false;\n+    }\n+\n+    public void render(MatrixStack matrices, int x, int y, int width, int height, int mouseX, int mouseY, boolean isHovered, float delta) {\n+        this.drawText(MinecraftClient.getInstance(), label, matrices, x + 10, y + (height / 2), 0xFFFFFF, false, true, true);\n+    }\n+\n+    public boolean charTyped(char c, int keyCode) {\n+        return false;\n+    }\n+\n+    protected final void drawText(MinecraftClient client, Text text, MatrixStack matrices, int x, int y, int color, boolean centerX, boolean centerY, boolean shadow) {\n+        TextRenderer t = client.textRenderer;\n+        if(shadow) t.drawWithShadow(matrices, text, centerX ? x - (int)((float)t.getWidth(text) / 2) : x, centerY ? y - 4 : y, color);\n+        else t.draw(matrices, text, centerX ? x - (int)((float)t.getWidth(text) / 2) : x, centerY ? y - 4 : y, color);\n+    }\n+}"
  },
  {
    "sha": "30d49929d9ce0f398a3f3896576d847888d5375f",
    "filename": "src/main/java/net/coderbot/iris/gui/property/PropertyList.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/PropertyList.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/PropertyList.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/PropertyList.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,47 @@\n+package net.coderbot.iris.gui.property;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.*;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A Property ArrayList with some utility methods.\n+ */\n+public class PropertyList extends ArrayList<Property> {\n+    public PropertyList(Property... properties) {\n+        this.addAll(ImmutableList.copyOf(properties));\n+    }\n+\n+    /**\n+     * Utility method which dds a collection of\n+     * Properties, grouped into PairProperties.\n+     *\n+     * @param properties The Properties to add\n+     */\n+    public void addAllPairs(List<? extends Property> properties) {\n+        for(int i = 0; i < properties.size(); i += 2) {\n+            Property left = properties.get(i);\n+            Property right = i + 1 < properties.size() ? properties.get(i + 1) : Property.EMPTY;\n+            this.add(new PairProperty(left, right));\n+        }\n+    }\n+\n+    /**\n+     * Iterates through all Properties including\n+     * those contained in TupleProperties. Use\n+     * forEach() to iterate through all properties\n+     * including TupleProperties.\n+     *\n+     * @param action The action to perform on each Property\n+     */\n+    public void forEvery(Consumer<? super Property> action) {\n+        this.forEach(p -> {\n+            if(p instanceof TupleProperty) {\n+                for(Property contained : ((TupleProperty)p).getContainedProperties()) {\n+                    action.accept(contained);\n+                }\n+            } else action.accept(p);\n+        });\n+    }\n+}"
  },
  {
    "sha": "1d1e9cc5b79c9b546acfd2c5e90fa59cb79bb5e3",
    "filename": "src/main/java/net/coderbot/iris/gui/property/StringOptionProperty.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/StringOptionProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/StringOptionProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/StringOptionProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,23 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Formatting;\n+\n+import java.util.List;\n+\n+public class StringOptionProperty extends OptionProperty<String> {\n+\tprotected final boolean translated;\n+\n+    public StringOptionProperty(List<String> values, int defaultIndex, PropertyDocumentWidget document, String key, Text label, boolean isSlider, boolean displayTranslated) {\n+        super(values, defaultIndex, document, key, label, isSlider);\n+        this.translated = displayTranslated;\n+    }\n+\n+    @Override\n+    public Text createValueText(int width) {\n+        return GuiUtil.trimmed(MinecraftClient.getInstance().textRenderer, getValue(), width, translated, true, isDefault() ? Formatting.RESET : Formatting.YELLOW);\n+    }\n+}"
  },
  {
    "sha": "d39f9987f82d4c6b6beca26771fcc1e88adccbe7",
    "filename": "src/main/java/net/coderbot/iris/gui/property/TitleProperty.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/TitleProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/TitleProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/TitleProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,31 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.Iris;\n+import net.coderbot.iris.gui.GuiUtil;\n+import net.coderbot.iris.gui.UiTheme;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.Text;\n+\n+public class TitleProperty extends Property {\n+    protected int[] underlineColors;\n+\n+    public TitleProperty(Text label, int... underlineColorsARGB) {\n+        super(label);\n+        this.underlineColors = underlineColorsARGB;\n+        if(underlineColors.length == 0) underlineColors = new int[] { 0xFFFFFFFF };\n+    }\n+\n+    @Override\n+    public void render(MatrixStack matrices, int x, int y, int width, int height, int mouseX, int mouseY, boolean isHovered, float delta) {\n+        if(Iris.getIrisConfig().getUITheme() == UiTheme.AQUA) GuiUtil.fill(x + 4, y + 3, width - 12, height - 6, 0x90000000);\n+        this.drawText(MinecraftClient.getInstance(), label, matrices, x + (width / 2), y + (height / 2), 0xFFFFFF, true, true, true);\n+        float sectionWid = (float)(width - 8) / underlineColors.length;\n+        int drawn = 0;\n+        for(int i = 0; i < underlineColors.length; i++) {\n+            int w = (int)(sectionWid * (i + 1)) - drawn;\n+            GuiUtil.fill(x + 2 + drawn, y + height, w, 1, underlineColors[i]);\n+            drawn += w;\n+        }\n+    }\n+}"
  },
  {
    "sha": "7ba8fcb6e0e8acc089f4e42ffa939a83b3c20b9a",
    "filename": "src/main/java/net/coderbot/iris/gui/property/TupleProperty.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/TupleProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/TupleProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/TupleProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,11 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.minecraft.text.Text;\n+\n+public abstract class TupleProperty extends Property {\n+    public TupleProperty(Text label) {\n+        super(label);\n+    }\n+\n+    public abstract Property[] getContainedProperties();\n+}"
  },
  {
    "sha": "10f59a5e1f8174489475928b3165a5b48f191d3c",
    "filename": "src/main/java/net/coderbot/iris/gui/property/ValueProperty.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/ValueProperty.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/gui/property/ValueProperty.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/gui/property/ValueProperty.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,54 @@\n+package net.coderbot.iris.gui.property;\n+\n+import net.coderbot.iris.gui.element.PropertyDocumentWidget;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.text.Text;\n+\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public abstract class ValueProperty<T> extends Property {\n+    protected final String key;\n+    protected final PropertyDocumentWidget document;\n+    protected Text valueText;\n+\n+    protected int cachedWidth = 0;\n+    protected int cachedX = 0;\n+\n+    public ValueProperty(PropertyDocumentWidget document, String key, Text label) {\n+        super(label);\n+        this.key = key;\n+        this.document = document;\n+    }\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public abstract T getValue();\n+\n+    public abstract Text createValueText(int width);\n+\n+    public final Text getValueText() {\n+        if(valueText == null) {\n+            valueText = createValueText((int)(cachedWidth * 0.4) - 6);\n+        }\n+        return valueText;\n+    }\n+\n+    public abstract boolean isDefault();\n+\n+    public abstract void setValue(T value);\n+\n+    public abstract void setValue(String value);\n+\n+    public void resetValueText() {\n+        this.valueText = null;\n+    }\n+\n+    public void updateCaches(int width, int x) {\n+        this.cachedWidth = width;\n+        this.cachedX = x;\n+    }\n+}"
  },
  {
    "sha": "82663b4567ea92eceb1fbda9af4f7dc4949a27bd",
    "filename": "src/main/java/net/coderbot/iris/mixin/MixinGameRenderer.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/mixin/MixinGameRenderer.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/mixin/MixinGameRenderer.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/mixin/MixinGameRenderer.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -1,7 +1,11 @@\n package net.coderbot.iris.mixin;\n \n+import net.coderbot.iris.gui.TransparentBackgroundScreen;\n import net.coderbot.iris.uniforms.SystemTimeUniforms;\n+import net.minecraft.client.MinecraftClient;\n+import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n@@ -10,12 +14,20 @@\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n @Mixin(GameRenderer.class)\n @Environment(EnvType.CLIENT)\n public class MixinGameRenderer {\n+\t@Shadow @Final private MinecraftClient client;\n+\n \t@Inject(method = \"render(FJZ)V\", at = @At(\"HEAD\"))\n \tprivate void iris$beginFrame(float tickDelta, long startTime, boolean tick, CallbackInfo callback) {\n \t\tSystemTimeUniforms.TIMER.beginFrame(startTime);\n \t}\n+\n+\t@Inject(method = \"shouldRenderBlockOutline\", at = @At(\"HEAD\"), cancellable = true)\n+\tpublic void handleTransparentGui(CallbackInfoReturnable<Boolean> cir) {\n+\t\tif(this.client.currentScreen instanceof TransparentBackgroundScreen && !((TransparentBackgroundScreen)this.client.currentScreen).renderHud()) cir.setReturnValue(false);\n+\t}\n }"
  },
  {
    "sha": "30850ceeba52937a11aff160f163a09dd4580219",
    "filename": "src/main/java/net/coderbot/iris/mixin/MixinHeldItemRenderer.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/TheEssem/Iris/blob/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/mixin/MixinHeldItemRenderer.java",
    "raw_url": "https://github.com/TheEssem/Iris/raw/5bea0267882196262a155651b253b4fde43555c6/src/main/java/net/coderbot/iris/mixin/MixinHeldItemRenderer.java",
    "contents_url": "https://api.github.com/repos/TheEssem/Iris/contents/src/main/java/net/coderbot/iris/mixin/MixinHeldItemRenderer.java?ref=5bea0267882196262a155651b253b4fde43555c6",
    "patch": "@@ -0,0 +1,26 @@\n+package net.coderbot.iris.mixin;\n+\n+import net.coderbot.iris.gui.TransparentBackgroundScreen;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.AbstractClientPlayerEntity;\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.HeldItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.Hand;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+@Mixin(HeldItemRenderer.class)\n+public class MixinHeldItemRenderer {\n+    @Shadow @Final private MinecraftClient client;\n+\n+    @Inject(method = \"renderFirstPersonItem\", at = @At(\"HEAD\"), cancellable = true)\n+    public void handleTransparentGui(AbstractClientPlayerEntity player, float tickDelta, float pitch, Hand hand, float swingProgress, ItemStack item, float equipProgress, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, CallbackInfo ci) {\n+        if(this.client.currentScreen instanceof TransparentBackgroundScreen && !((TransparentBackgroundScreen)this.client.currentScreen).renderHud()) ci.cancel();\n+    }\n+}"
  }
]
