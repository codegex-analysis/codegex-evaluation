[
  {
    "sha": "3464375154ad0319452270fa90519657b96ebb54",
    "filename": ".idea/modules.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/.idea/modules.xml",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/.idea/modules.xml",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/.idea/modules.xml?ref=16e21aa8565707571e4f4e94282a872b130db160",
    "patch": "@@ -2,7 +2,7 @@\n <project version=\"4\">\n   <component name=\"ProjectModuleManager\">\n     <modules>\n-      <module fileurl=\"file://$PROJECT_DIR$/Java1Lesson2.iml\" filepath=\"$PROJECT_DIR$/Java1Lesson2.iml\" />\n+      <module fileurl=\"file://$PROJECT_DIR$/Java1Lesson6.iml\" filepath=\"$PROJECT_DIR$/Java1Lesson6.iml\" />\n     </modules>\n   </component>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "c90834f2d607afe55e6104d8aa2cdfffb713f688",
    "filename": "Java1Lesson6.iml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/Java1Lesson6.iml",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/Java1Lesson6.iml",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/Java1Lesson6.iml?ref=16e21aa8565707571e4f4e94282a872b130db160",
    "previous_filename": "Java1Lesson2.iml"
  },
  {
    "sha": "6182643fccf1d76be02acd82211870d817c9af4f",
    "filename": "out/production/Java1Lesson6/Animal.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Animal.class",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Animal.class",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/out/production/Java1Lesson6/Animal.class?ref=16e21aa8565707571e4f4e94282a872b130db160"
  },
  {
    "sha": "f2e0dd9502799ce1cddfe4471b29776641864d10",
    "filename": "out/production/Java1Lesson6/Cat.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Cat.class",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Cat.class",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/out/production/Java1Lesson6/Cat.class?ref=16e21aa8565707571e4f4e94282a872b130db160"
  },
  {
    "sha": "32b694374dc31599aedd775931ac025b4db95449",
    "filename": "out/production/Java1Lesson6/Dog.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Dog.class",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Dog.class",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/out/production/Java1Lesson6/Dog.class?ref=16e21aa8565707571e4f4e94282a872b130db160"
  },
  {
    "sha": "44b85fb47401a042d977b9585aa6de6cfac678a3",
    "filename": "out/production/Java1Lesson6/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Main.class",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/out/production/Java1Lesson6/Main.class",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/out/production/Java1Lesson6/Main.class?ref=16e21aa8565707571e4f4e94282a872b130db160"
  },
  {
    "sha": "d0f97dcef8848e305d3e5431dce35a103e060be8",
    "filename": "src/Animal.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/src/Animal.java",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/src/Animal.java",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/src/Animal.java?ref=16e21aa8565707571e4f4e94282a872b130db160",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+* 1. Создать классы Собака и Кот с наследованием от класса Животное.\n+* */\n+public abstract class Animal\n+{\n+    private static int totalAnimals;\n+\n+    protected String name;\n+    protected int maxRunningDistance;\n+    protected int maxSwimmingDistance;\n+\n+    public Animal(String name, int maxRunningDistance, int maxSwimmingDistance)\n+    {\n+        this.name = name;\n+        this.maxRunningDistance = maxRunningDistance;\n+        this.maxSwimmingDistance = maxSwimmingDistance;\n+        totalAnimals++;\n+    }\n+\n+    /*\n+    * 2. Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия.\n+    * Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');*/\n+\n+    //бег\n+    void run(int distance)\n+    {\n+        if (distance > maxRunningDistance)\n+        {\n+            System.out.printf(\"%s пробежал(а) %s м. из %s м., т.к. указанное расстояние превышает максимальное расстояние бега.\\n\", name, maxRunningDistance, distance);\n+        }\n+        else\n+        {\n+            System.out.println(name + \" пробежал(а) \" + distance + \" м.\");\n+        }\n+    }\n+\n+    //плаванье\n+    public abstract void swim(int distance);\n+\n+    //Получаем кол-во созданных животных\n+    public static int getTotalAnimals() {\n+        return totalAnimals;\n+    }\n+}"
  },
  {
    "sha": "55df0dba3be77e0fe1e1cab451603f3a968e9b99",
    "filename": "src/Cat.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/src/Cat.java",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/src/Cat.java",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/src/Cat.java?ref=16e21aa8565707571e4f4e94282a872b130db160",
    "patch": "@@ -0,0 +1,26 @@\n+public class Cat extends Animal\n+{\n+    /*\n+     * 3. У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).\n+     * */\n+    private static final int catMaxRunDistance = 200;\n+    private static final int catMaxSwimDistance = 0;\n+    private static  int totalCats;\n+\n+    Cat(String name) {\n+        //Для создания кошки нам нужна только кличка, ограничения у всех кошек одинаковые\n+        super(name, catMaxRunDistance, catMaxSwimDistance);\n+        totalCats++;\n+    }\n+\n+    @Override\n+    public void swim(int distance)\n+    {\n+        System.out.printf(\"Кот %s не умеет плавать.\\n\", name);\n+    }\n+\n+    //Получаем кол-во созданных котов\n+    public static int getTotalCats() {\n+        return totalCats;\n+    }\n+}"
  },
  {
    "sha": "f7135c4ed1a467bda446e86dfa8bf7b63e5acbc5",
    "filename": "src/Dog.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/src/Dog.java",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/src/Dog.java",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/src/Dog.java?ref=16e21aa8565707571e4f4e94282a872b130db160",
    "patch": "@@ -0,0 +1,33 @@\n+public class Dog extends Animal\n+{\n+    /*\n+    * 3. У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).\n+    * */\n+    private static final int dogMaxRunDistance = 500;\n+    private static final int dogMaxSwimDistance = 10;\n+    private static  int totalDogs;\n+\n+    Dog(String name) {\n+        //Для создания собаки нам нужна только кличка, ограничения у всех собак одинаковые\n+        super(name, dogMaxRunDistance, dogMaxSwimDistance);\n+        totalDogs++;\n+    }\n+\n+    @Override\n+    public void swim(int distance)\n+    {\n+        if (distance > maxSwimmingDistance)\n+        {\n+            System.out.printf(\"Для собаки %s указанная дистанция (%s м.) велика, поэтому была проплыта дистанция %s м.\\n\", name, distance, maxSwimmingDistance);\n+        }\n+        else\n+        {\n+            System.out.println(name + \" проплыл(а) \" + distance + \" м.\");\n+        }\n+    }\n+\n+    //Получаем кол-во созданных собак\n+    public static int getTotalDogs() {\n+        return totalDogs;\n+    }\n+}"
  },
  {
    "sha": "b48346e0e3fdf2e316470de92d9d30fcda1e5fb9",
    "filename": "src/Main.java",
    "status": "modified",
    "additions": 26,
    "deletions": 190,
    "changes": 216,
    "blob_url": "https://github.com/BceOK007/homework/blob/16e21aa8565707571e4f4e94282a872b130db160/src/Main.java",
    "raw_url": "https://github.com/BceOK007/homework/raw/16e21aa8565707571e4f4e94282a872b130db160/src/Main.java",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/src/Main.java?ref=16e21aa8565707571e4f4e94282a872b130db160",
    "patch": "@@ -1,207 +1,43 @@\n-import java.util.Arrays;\n-\n public class Main {\n \n     public static void main(String[] args) {\n \n-        /*\n-         * 1. Задать целочисленный массив, состоящий из элементов 0 и 1.\n-         * Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;\n-         * */\n-        int[] arrayForFirstTask = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};\n-\n-        System.out.println(\"Задача №1.\\nИсходный массив:   \" + Arrays.toString(arrayForFirstTask));\n-\n-        for (int i = 0; i < arrayForFirstTask.length; i++)\n-        {\n-            if (arrayForFirstTask[i] == 0)\n-                arrayForFirstTask[i] = 1;\n-            else\n-                arrayForFirstTask[i] = 0;\n-        }\n-\n-        System.out.println(\"Полученный массив: \" + Arrays.toString(arrayForFirstTask) + \"\\n\");\n-\n-        /*2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;\n-         * */\n-        int[] arrayForSecondTask = new int[8];\n-\n-        for (int i = 0; i < arrayForSecondTask.length; i++)\n-        {\n-            arrayForSecondTask[i] = i * 3;\n-        }\n-\n-        System.out.println(\"Задача №2.\\n\" + Arrays.toString(arrayForSecondTask) + \"\\n\");\n-\n-        //3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;\n-//        int[] arrayForThirdTask = new int[12];\n-//        arrayForThirdTask[0] = 1;\n-//        arrayForThirdTask[1] = 5;\n-//        arrayForThirdTask[2] = 3;\n-//        arrayForThirdTask[3] = 2;\n-//        arrayForThirdTask[4] = 11;\n-//        arrayForThirdTask[5] = 4;\n-//        arrayForThirdTask[6] = 5;\n-//        arrayForThirdTask[7] = 2;\n-//        arrayForThirdTask[8] = 4;\n-//        arrayForThirdTask[9] = 8;\n-//        arrayForThirdTask[10] = 9;\n-//        arrayForThirdTask[11] = 1;\n-        int[] arrayForThirdTask =  {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};\n+        //Создаем собак\n+        Dog dogBobik = new Dog (\"Бобик\");\n+        Dog dogLacy = new Dog(\"Лайси\");\n+        Dog dogHachi = new Dog(\"Хатико\");\n \n-        System.out.println(\"Задача №3.\\nИсходный массив:   \" + Arrays.toString(arrayForThirdTask));\n+        //Создаем кошек\n+        Cat catMurzik = new Cat(\"Мурзик\");\n+        Cat catUgolek = new Cat(\"Уголек\");\n \n-        for (int i = 0; i < arrayForThirdTask.length; i++)\n-        {\n-            if (arrayForThirdTask[i] < 6 )\n-                arrayForThirdTask[i] = arrayForThirdTask[i] * 2;\n-        }\n+        //действия животных\n+        dogAction(dogBobik, 150, 30);\n+        dogAction(dogLacy, 600, 3);\n+        dogAction(dogBobik, 300, 2);\n \n-        System.out.println(\"Полученный массив: \" + Arrays.toString(arrayForThirdTask) + \"\\n\");\n+        catAction(catMurzik, 100, 1);\n+        catAction(catUgolek, 300, 2);\n \n         /*\n-         * 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое)\n-         * и с помощью цикла(-ов) заполнить его диагональные элементы единицами;\n-         * */\n-\n-        int arrayLength = 5;\n-        int[][] arrayForFourthTask = new int[arrayLength][arrayLength];\n-\n-        for (int i = 0; i < arrayForFourthTask.length; i++)\n-        {\n-            for (int j = 0; j < arrayForFourthTask[i].length; j++)\n-            {\n-                if (i == j || j + i == arrayForFourthTask.length - 1)\n-                    arrayForFourthTask[i][j] = 1;\n-            }\n-        }\n-\n-        System.out.println(\"Задача №4.\");\n-\n-        for (int i = 0; i < arrayForFourthTask.length; i++)\n-        {\n-            for (int j = 0; j < arrayForFourthTask[i].length; j++)\n-            {\n-                System.out.print(arrayForFourthTask[i][j] + \" \");\n-            }\n-            System.out.println();\n-        }\n-\n-        /*\n-         *5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);\n-         * */\n-        int[] arrayForFifthTask = new int[10];\n-\n-        for (int i = 0; i < arrayForFifthTask.length; i++)\n-        {\n-            arrayForFifthTask[i] = (int) (Math.random() * 100);\n-        }\n-\n-        int minPosition = 0;\n-        int maxPosition = 0;\n-\n-        System.out.print(\"\\nЗадача №5\\nИсходный массив: \");\n-\n-        for (int i = 0; i < arrayForFifthTask.length; i++)\n-        {\n-            System.out.print(arrayForFifthTask[i] + \" \");\n-            if (arrayForFifthTask[minPosition] > arrayForFifthTask[i])\n-                minPosition = i;\n-            if (arrayForFifthTask[maxPosition] < arrayForFifthTask[i])\n-                maxPosition = i;\n-        }\n-\n-        System.out.println(\"\\nМинимальный элемент массива [\" + (minPosition + 1) + \"] = \" + arrayForFifthTask[minPosition]);\n-        System.out.println(\"Максимальный элемент массива [\" + (maxPosition + 1) + \"] = \" + arrayForFifthTask[maxPosition] + \"\\n\");\n-\n-        /*\n-         *6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,\n-         * метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.\n-         * Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,\n-         * граница показана символами ||, эти символы в массив не входят.\n-         * */\n-        int[] arrayForSixthTask = {1, 2, 2, 2, 1, 2, 2, 10, 1, 1};\n-\n-        System.out.println(\"Задача №6\\nВ массиве есть две части, суммы которых равны? \" +isCheckBalance(arrayForSixthTask));\n-        System.out.println( Arrays.toString(arrayForSixthTask) + \"\\n\");\n-\n-        /*\n-         *7. **** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным,\n-         * или отрицательным), при этом метод должен сместить все элементы массива на n позиций.\n-         * Элементы смещаются циклично. Для усложнения задачи нельзя пользоваться вспомогательными массивами.\n-         * Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ];\n-         * [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].\n-         * При каком n в какую сторону сдвиг можете выбирать сами.\n-         * */\n-\n-        int[] arrayForSeventhTask = {1, 2, 3, 4, 5, 6, 7, 8, 9 , 10, 11};\n-\n-        System.out.println(\"Задача №7\\nИсходный массив:   \" + Arrays.toString(arrayForSeventhTask));\n-        shiftArray(arrayForSeventhTask, -3);\n-        System.out.println(\"Полученный массив: \" + Arrays.toString(arrayForSeventhTask));\n+        * 4. * Добавить подсчет созданных котов, собак и животных.\n+        * */\n+        System.out.println(\"\\nВсего животных создано:\\t\" + Animal.getTotalAnimals());\n+        System.out.println(\"Всего котов создано:\\t\" + Cat.getTotalCats());\n+        System.out.println(\"Всего собак создано:\\t\" + Dog.getTotalDogs());\n     }\n \n-    static boolean isCheckBalance (int[] arr)\n+    private static void catAction(Cat cat, int runDistance, int swimDistance)\n     {\n-        boolean isFound = false;\n-        int sumFirstPath = 0;\n-        int sumSecondPath = 0;\n-\n-        for (int i = 2; i < arr.length - 1; i++)\n-        {\n-            sumFirstPath = 0;\n-            sumSecondPath = 0;\n-\n-            for (int j = 0; j < i; j++)\n-            {\n-                sumFirstPath = sumFirstPath + arr[j];\n-            }\n-\n-            for (int l = i; l < arr.length; l++)\n-            {\n-                sumSecondPath = sumSecondPath + arr[l];\n-            }\n-\n-            if (sumFirstPath == sumSecondPath)\n-            {\n-                isFound = true;\n-                break;\n-            }\n-        }\n-        return isFound;\n+        cat.run(runDistance);\n+        cat.swim(swimDistance);\n+        System.out.println();\n     }\n \n-    static void shiftArray (int[] arr, int n)\n+    private static void dogAction(Dog dog, int runDistance, int swimDistance)\n     {\n-        //отсекаем полные обороты, если кол-во шагов сдвига больше размера массива\n-        if ( Math.abs(n) >= arr.length)\n-            n = n % arr.length;\n-\n-        int a;\n-\n-        for (int i = 0; i < Math.abs(n); i++) //Универсальный цикл для левого или правого сдвига\n-        {\n-            if (n > 0) { //Для правого - двигаем массив с конца\n-                a = arr[arr.length - 1];//запоминаем последний элемент для записи его в первый элемент\n-                for (int j = arr.length - 1; j > 0; j--)\n-                {\n-                    arr[j] = arr[j - 1];\n-                }\n-//                System.arraycopy(arr, 0, arr, 1, arr.length - 1);\n-                arr[0] = a;\n-            }\n-            else\n-            { //Для левого - двигаем массив с начала\n-                a = arr[0]; //запоминаем первый элемент для записи его в последний элемент\n-                for (int j = 0; j < arr.length - 1; j++)\n-                {\n-                    arr[j] = arr[j + 1];\n-                }\n-//                System.arraycopy(arr, 1, arr, 0, arr.length - 1);\n-                arr[arr.length - 1] = a;\n-\n-            }\n-        }\n+        dog.run(runDistance);\n+        dog.swim(swimDistance);\n+        System.out.println();\n     }\n-\n }\n\\ No newline at end of file"
  }
]
