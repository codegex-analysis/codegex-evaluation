[
  {
    "sha": "f04b95159d7cd317b88338f1e9bd32b4021e572c",
    "filename": ".idea/modules.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/BceOK007/homework/blob/49501cef479ea00a78cb993820eca9ebcf8324e5/.idea/modules.xml",
    "raw_url": "https://github.com/BceOK007/homework/raw/49501cef479ea00a78cb993820eca9ebcf8324e5/.idea/modules.xml",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/.idea/modules.xml?ref=49501cef479ea00a78cb993820eca9ebcf8324e5",
    "patch": "@@ -2,7 +2,7 @@\n <project version=\"4\">\n   <component name=\"ProjectModuleManager\">\n     <modules>\n-      <module fileurl=\"file://$PROJECT_DIR$/Java1Lesson2.iml\" filepath=\"$PROJECT_DIR$/Java1Lesson2.iml\" />\n+      <module fileurl=\"file://$PROJECT_DIR$/Java1Lesson5.iml\" filepath=\"$PROJECT_DIR$/Java1Lesson5.iml\" />\n     </modules>\n   </component>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "c90834f2d607afe55e6104d8aa2cdfffb713f688",
    "filename": "Java1Lesson5.iml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/49501cef479ea00a78cb993820eca9ebcf8324e5/Java1Lesson5.iml",
    "raw_url": "https://github.com/BceOK007/homework/raw/49501cef479ea00a78cb993820eca9ebcf8324e5/Java1Lesson5.iml",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/Java1Lesson5.iml?ref=49501cef479ea00a78cb993820eca9ebcf8324e5",
    "previous_filename": "Java1Lesson2.iml"
  },
  {
    "sha": "77809c07f06ebf92d5a1de35150e78d8a77c508c",
    "filename": "out/production/Java1Lesson5/Employee.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/49501cef479ea00a78cb993820eca9ebcf8324e5/out/production/Java1Lesson5/Employee.class",
    "raw_url": "https://github.com/BceOK007/homework/raw/49501cef479ea00a78cb993820eca9ebcf8324e5/out/production/Java1Lesson5/Employee.class",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/out/production/Java1Lesson5/Employee.class?ref=49501cef479ea00a78cb993820eca9ebcf8324e5"
  },
  {
    "sha": "4aec9aabeb82808374ae952cd43607208d6215df",
    "filename": "out/production/Java1Lesson5/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/BceOK007/homework/blob/49501cef479ea00a78cb993820eca9ebcf8324e5/out/production/Java1Lesson5/Main.class",
    "raw_url": "https://github.com/BceOK007/homework/raw/49501cef479ea00a78cb993820eca9ebcf8324e5/out/production/Java1Lesson5/Main.class",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/out/production/Java1Lesson5/Main.class?ref=49501cef479ea00a78cb993820eca9ebcf8324e5"
  },
  {
    "sha": "dc84c1df5f791a955f721dd644d7fc49a7f95713",
    "filename": "src/Employee.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/BceOK007/homework/blob/49501cef479ea00a78cb993820eca9ebcf8324e5/src/Employee.java",
    "raw_url": "https://github.com/BceOK007/homework/raw/49501cef479ea00a78cb993820eca9ebcf8324e5/src/Employee.java",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/src/Employee.java?ref=49501cef479ea00a78cb993820eca9ebcf8324e5",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+* 1. Создать класс \"Сотрудник\" с полями: ФИО, должность, email, телефон, зарплата, возраст.\n+* */\n+public class Employee\n+{\n+    private String fullName;\n+    private  String position;\n+    private String email;\n+    private String phone;\n+    private Float salary; //float т.к. для денег нужны копейки\n+    private int age;\n+\n+    /*\n+    * 2. Конструктор класса должен заполнять эти поля при создании объекта.\n+    * */\n+    Employee(String fullName, String position, String email, String phone, Float salary, int age)\n+    {\n+        this.fullName = fullName;\n+        this.position = position;\n+        this.email = email;\n+        this.phone = phone;\n+        this.salary = salary;\n+        this.age = age;\n+    }\n+\n+    /*\n+    * 3. Внутри класса «Сотрудник» написать метод, который выводит информацию об объекте в консоль.\n+    * */\n+    void getInfo()\n+    {\n+        System.out.println(\"Карточка сотрудника:\\nФИО: \" + fullName);\n+        System.out.println(\"Должность: \" + position);\n+        System.out.println(\"e-mail: \" + email);\n+        System.out.println(\"Номер телефона: \" + phone);\n+        System.out.println(\"Заработная плата: \" + salary);\n+        System.out.println(\"Возраст: \" + age);\n+    }\n+\n+    int getAge() {return this.age;}\n+}\n+"
  },
  {
    "sha": "fd76374098542757fdda931f68952c0dfff937b4",
    "filename": "src/Main.java",
    "status": "modified",
    "additions": 15,
    "deletions": 194,
    "changes": 209,
    "blob_url": "https://github.com/BceOK007/homework/blob/49501cef479ea00a78cb993820eca9ebcf8324e5/src/Main.java",
    "raw_url": "https://github.com/BceOK007/homework/raw/49501cef479ea00a78cb993820eca9ebcf8324e5/src/Main.java",
    "contents_url": "https://api.github.com/repos/BceOK007/homework/contents/src/Main.java?ref=49501cef479ea00a78cb993820eca9ebcf8324e5",
    "patch": "@@ -1,207 +1,28 @@\n-import java.util.Arrays;\n-\n public class Main {\n \n     public static void main(String[] args) {\n \n         /*\n-         * 1. Задать целочисленный массив, состоящий из элементов 0 и 1.\n-         * Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;\n-         * */\n-        int[] arrayForFirstTask = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};\n-\n-        System.out.println(\"Задача №1.\\nИсходный массив:   \" + Arrays.toString(arrayForFirstTask));\n-\n-        for (int i = 0; i < arrayForFirstTask.length; i++)\n-        {\n-            if (arrayForFirstTask[i] == 0)\n-                arrayForFirstTask[i] = 1;\n-            else\n-                arrayForFirstTask[i] = 0;\n-        }\n-\n-        System.out.println(\"Полученный массив: \" + Arrays.toString(arrayForFirstTask) + \"\\n\");\n-\n-        /*2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;\n-         * */\n-        int[] arrayForSecondTask = new int[8];\n-\n-        for (int i = 0; i < arrayForSecondTask.length; i++)\n-        {\n-            arrayForSecondTask[i] = i * 3;\n-        }\n-\n-        System.out.println(\"Задача №2.\\n\" + Arrays.toString(arrayForSecondTask) + \"\\n\");\n-\n-        //3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;\n-//        int[] arrayForThirdTask = new int[12];\n-//        arrayForThirdTask[0] = 1;\n-//        arrayForThirdTask[1] = 5;\n-//        arrayForThirdTask[2] = 3;\n-//        arrayForThirdTask[3] = 2;\n-//        arrayForThirdTask[4] = 11;\n-//        arrayForThirdTask[5] = 4;\n-//        arrayForThirdTask[6] = 5;\n-//        arrayForThirdTask[7] = 2;\n-//        arrayForThirdTask[8] = 4;\n-//        arrayForThirdTask[9] = 8;\n-//        arrayForThirdTask[10] = 9;\n-//        arrayForThirdTask[11] = 1;\n-        int[] arrayForThirdTask =  {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};\n-\n-        System.out.println(\"Задача №3.\\nИсходный массив:   \" + Arrays.toString(arrayForThirdTask));\n-\n-        for (int i = 0; i < arrayForThirdTask.length; i++)\n-        {\n-            if (arrayForThirdTask[i] < 6 )\n-                arrayForThirdTask[i] = arrayForThirdTask[i] * 2;\n-        }\n-\n-        System.out.println(\"Полученный массив: \" + Arrays.toString(arrayForThirdTask) + \"\\n\");\n+        * 4. Создать массив из 5 сотрудников.\n+        * */\n+        Employee[] employeeArray = new Employee[5];\n+        //Заполняем массив сотрудниками\n+        employeeArray[0] = new Employee(\"Иванов Иван Иванович\", \"Генеральный директор\", \"iii@ya.ru\", \"+79057772565\", (float)90000, 56);\n+        employeeArray[1] = new Employee(\"Петров Пётр Петрович\", \"Инженер\", \"ppp@ya.ru\", \"84957775522\", (float)70000.74, 47);\n+        employeeArray[2] = new Employee(\"Сидорова Галина Николаевна\", \"Бухгалтер\", \"SidorovaGN@ya.ru\", \"84991632274 (доб. 123)\", (float)60000, 35);\n+        employeeArray[3] = new Employee(\"Калинин Владимир Геннадьевич\", \"Кладовщик\", \"KalininVG@ya.ru\", \"84991632274 (доб. 481)\", (float)45000, 32);\n+        employeeArray[4] = new Employee(\"Гоцман Сильвестр Владленович\", \"Охранник\", \"SuperSecurity@ya.ru\", \"84991632274 (доб. 555)\", (float)25000.55, 64);\n \n         /*\n-         * 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое)\n-         * и с помощью цикла(-ов) заполнить его диагональные элементы единицами;\n-         * */\n-\n-        int arrayLength = 5;\n-        int[][] arrayForFourthTask = new int[arrayLength][arrayLength];\n-\n-        for (int i = 0; i < arrayForFourthTask.length; i++)\n+        *5. С помощью цикла вывести информацию только о сотрудниках старше 40 лет.\n+        * */\n+        for (int i = 0; i < employeeArray.length; i++)\n         {\n-            for (int j = 0; j < arrayForFourthTask[i].length; j++)\n+            if (employeeArray[i].getAge() > 40)\n             {\n-                if (i == j || j + i == arrayForFourthTask.length - 1)\n-                    arrayForFourthTask[i][j] = 1;\n+                employeeArray[i].getInfo();\n+                System.out.println();\n             }\n         }\n-\n-        System.out.println(\"Задача №4.\");\n-\n-        for (int i = 0; i < arrayForFourthTask.length; i++)\n-        {\n-            for (int j = 0; j < arrayForFourthTask[i].length; j++)\n-            {\n-                System.out.print(arrayForFourthTask[i][j] + \" \");\n-            }\n-            System.out.println();\n-        }\n-\n-        /*\n-         *5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);\n-         * */\n-        int[] arrayForFifthTask = new int[10];\n-\n-        for (int i = 0; i < arrayForFifthTask.length; i++)\n-        {\n-            arrayForFifthTask[i] = (int) (Math.random() * 100);\n-        }\n-\n-        int minPosition = 0;\n-        int maxPosition = 0;\n-\n-        System.out.print(\"\\nЗадача №5\\nИсходный массив: \");\n-\n-        for (int i = 0; i < arrayForFifthTask.length; i++)\n-        {\n-            System.out.print(arrayForFifthTask[i] + \" \");\n-            if (arrayForFifthTask[minPosition] > arrayForFifthTask[i])\n-                minPosition = i;\n-            if (arrayForFifthTask[maxPosition] < arrayForFifthTask[i])\n-                maxPosition = i;\n-        }\n-\n-        System.out.println(\"\\nМинимальный элемент массива [\" + (minPosition + 1) + \"] = \" + arrayForFifthTask[minPosition]);\n-        System.out.println(\"Максимальный элемент массива [\" + (maxPosition + 1) + \"] = \" + arrayForFifthTask[maxPosition] + \"\\n\");\n-\n-        /*\n-         *6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,\n-         * метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.\n-         * Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,\n-         * граница показана символами ||, эти символы в массив не входят.\n-         * */\n-        int[] arrayForSixthTask = {1, 2, 2, 2, 1, 2, 2, 10, 1, 1};\n-\n-        System.out.println(\"Задача №6\\nВ массиве есть две части, суммы которых равны? \" +isCheckBalance(arrayForSixthTask));\n-        System.out.println( Arrays.toString(arrayForSixthTask) + \"\\n\");\n-\n-        /*\n-         *7. **** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным,\n-         * или отрицательным), при этом метод должен сместить все элементы массива на n позиций.\n-         * Элементы смещаются циклично. Для усложнения задачи нельзя пользоваться вспомогательными массивами.\n-         * Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ];\n-         * [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].\n-         * При каком n в какую сторону сдвиг можете выбирать сами.\n-         * */\n-\n-        int[] arrayForSeventhTask = {1, 2, 3, 4, 5, 6, 7, 8, 9 , 10, 11};\n-\n-        System.out.println(\"Задача №7\\nИсходный массив:   \" + Arrays.toString(arrayForSeventhTask));\n-        shiftArray(arrayForSeventhTask, -3);\n-        System.out.println(\"Полученный массив: \" + Arrays.toString(arrayForSeventhTask));\n     }\n-\n-    static boolean isCheckBalance (int[] arr)\n-    {\n-        boolean isFound = false;\n-        int sumFirstPath = 0;\n-        int sumSecondPath = 0;\n-\n-        for (int i = 2; i < arr.length - 1; i++)\n-        {\n-            sumFirstPath = 0;\n-            sumSecondPath = 0;\n-\n-            for (int j = 0; j < i; j++)\n-            {\n-                sumFirstPath = sumFirstPath + arr[j];\n-            }\n-\n-            for (int l = i; l < arr.length; l++)\n-            {\n-                sumSecondPath = sumSecondPath + arr[l];\n-            }\n-\n-            if (sumFirstPath == sumSecondPath)\n-            {\n-                isFound = true;\n-                break;\n-            }\n-        }\n-        return isFound;\n-    }\n-\n-    static void shiftArray (int[] arr, int n)\n-    {\n-        //отсекаем полные обороты, если кол-во шагов сдвига больше размера массива\n-        if ( Math.abs(n) >= arr.length)\n-            n = n % arr.length;\n-\n-        int a;\n-\n-        for (int i = 0; i < Math.abs(n); i++) //Универсальный цикл для левого или правого сдвига\n-        {\n-            if (n > 0) { //Для правого - двигаем массив с конца\n-                a = arr[arr.length - 1];//запоминаем последний элемент для записи его в первый элемент\n-                for (int j = arr.length - 1; j > 0; j--)\n-                {\n-                    arr[j] = arr[j - 1];\n-                }\n-//                System.arraycopy(arr, 0, arr, 1, arr.length - 1);\n-                arr[0] = a;\n-            }\n-            else\n-            { //Для левого - двигаем массив с начала\n-                a = arr[0]; //запоминаем первый элемент для записи его в последний элемент\n-                for (int j = 0; j < arr.length - 1; j++)\n-                {\n-                    arr[j] = arr[j + 1];\n-                }\n-//                System.arraycopy(arr, 1, arr, 0, arr.length - 1);\n-                arr[arr.length - 1] = a;\n-\n-            }\n-        }\n-    }\n-\n }\n\\ No newline at end of file"
  }
]
