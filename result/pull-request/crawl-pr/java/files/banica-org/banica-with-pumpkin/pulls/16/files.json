[
  {
    "sha": "6ef8e81ea5ab04c0ca1f108eccfdf1cd813cf923",
    "filename": "calculator/logs/app.log",
    "status": "removed",
    "additions": 0,
    "deletions": 46,
    "changes": 46,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/8a1376b152e0b84dc57d75cc0cb752211fb09cff/calculator/logs/app.log",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/8a1376b152e0b84dc57d75cc0cb752211fb09cff/calculator/logs/app.log",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/logs/app.log?ref=8a1376b152e0b84dc57d75cc0cb752211fb09cff",
    "patch": "@@ -1,46 +0,0 @@\n-[DEBUG] 2021-03-17 17:51:05.184 [background-preinit] [] logging - Logging Provider: org.jboss.logging.Log4j2LoggerProvider\n-[INFO ] 2021-03-17 17:51:05.197 [background-preinit] [] Version - HV000001: Hibernate Validator 6.1.7.Final\n-[DEBUG] 2021-03-17 17:51:05.234 [background-preinit] [] ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.\n-[DEBUG] 2021-03-17 17:51:05.237 [background-preinit] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL\n-[DEBUG] 2021-03-17 17:51:05.238 [background-preinit] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader\n-[DEBUG] 2021-03-17 17:51:05.239 [background-preinit] [] ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.\n-[DEBUG] 2021-03-17 17:51:05.247 [background-preinit] [] TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.\n-[DEBUG] 2021-03-17 17:51:05.334 [background-preinit] [] ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL\n-[DEBUG] 2021-03-17 17:51:05.707 [background-preinit] [] ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.\n-[DEBUG] 2021-03-17 17:51:05.716 [background-preinit] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.\n-[DEBUG] 2021-03-17 17:51:05.718 [background-preinit] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.\n-[DEBUG] 2021-03-17 17:51:05.718 [background-preinit] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.\n-[DEBUG] 2021-03-17 17:51:05.720 [background-preinit] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.\n-[DEBUG] 2021-03-17 17:51:05.720 [background-preinit] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.\n-[DEBUG] 2021-03-17 17:51:08.758 [main] [] ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL\n-[DEBUG] 2021-03-17 17:51:08.776 [main] [] AbstractConfigurationImpl - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator\n-[DEBUG] 2021-03-17 17:51:08.778 [main] [] AbstractConfigurationImpl - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory\n-[DEBUG] 2021-03-17 17:51:08.779 [main] [] AbstractConfigurationImpl - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1\n-[DEBUG] 2021-03-17 17:51:08.781 [main] [] ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.\n-[DEBUG] 2021-03-17 17:51:08.781 [main] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via user class loader\n-[DEBUG] 2021-03-17 17:51:08.782 [main] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL\n-[DEBUG] 2021-03-17 17:51:08.784 [main] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader\n-[DEBUG] 2021-03-17 17:51:08.785 [main] [] ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.\n-[DEBUG] 2021-03-17 17:51:08.786 [main] [] TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.\n-[DEBUG] 2021-03-17 17:51:08.789 [main] [] ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.\n-[DEBUG] 2021-03-17 17:51:08.790 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.\n-[DEBUG] 2021-03-17 17:51:08.790 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.\n-[DEBUG] 2021-03-17 17:51:08.791 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.\n-[DEBUG] 2021-03-17 17:51:08.791 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.\n-[DEBUG] 2021-03-17 17:51:08.791 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.\n-[DEBUG] 2021-03-17 17:51:11.431 [main] [] ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL\n-[DEBUG] 2021-03-17 17:51:11.443 [main] [] AbstractConfigurationImpl - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator\n-[DEBUG] 2021-03-17 17:51:11.444 [main] [] AbstractConfigurationImpl - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory\n-[DEBUG] 2021-03-17 17:51:11.445 [main] [] AbstractConfigurationImpl - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1\n-[DEBUG] 2021-03-17 17:51:11.446 [main] [] ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.\n-[DEBUG] 2021-03-17 17:51:11.446 [main] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via user class loader\n-[DEBUG] 2021-03-17 17:51:11.448 [main] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL\n-[DEBUG] 2021-03-17 17:51:11.450 [main] [] ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader\n-[DEBUG] 2021-03-17 17:51:11.451 [main] [] ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.\n-[DEBUG] 2021-03-17 17:51:11.452 [main] [] TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.\n-[DEBUG] 2021-03-17 17:51:11.457 [main] [] ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.\n-[DEBUG] 2021-03-17 17:51:11.459 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.\n-[DEBUG] 2021-03-17 17:51:11.460 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.\n-[DEBUG] 2021-03-17 17:51:11.460 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.\n-[DEBUG] 2021-03-17 17:51:11.460 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.\n-[DEBUG] 2021-03-17 17:51:11.461 [main] [] ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory."
  },
  {
    "sha": "9e865d2a552238116aadc8a459d655808b26dae6",
    "filename": "calculator/pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/pom.xml",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/pom.xml",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/pom.xml?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -21,6 +21,7 @@\n         <swagger-version>2.9.2</swagger-version>\n         <log4j.version>2.7</log4j.version>\n         <model-mapper-version>2.3.7</model-mapper-version>\n+        <fasterXML-version>2.12.2</fasterXML-version>\n         <grpc-protobuf-version>1.36.0</grpc-protobuf-version>\n         <tomcat-annotation-api-version>6.0.53</tomcat-annotation-api-version>\n         <guava.version>30.1-jre</guava.version>\n@@ -93,6 +94,12 @@\n             <version>${model-mapper-version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${fasterXML-version}</version>\n+        </dependency>\n+\n         <!-- dependencies for grpc -->\n         <dependency>\n             <groupId>io.grpc</groupId>\n@@ -109,6 +116,7 @@\n             <artifactId>grpc-protobuf</artifactId>\n             <version>${grpc-protobuf-version}</version>\n         </dependency>\n+\n         <dependency> <!-- necessary for Java 9+ -->\n             <groupId>org.apache.tomcat</groupId>\n             <artifactId>annotations-api</artifactId>"
  },
  {
    "sha": "e6b7720a60b3d0c6aa6842c192846ac6f55a5cd4",
    "filename": "calculator/src/main/java/com/market/banica/calculator/controller/ProductController.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/controller/ProductController.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/controller/ProductController.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,33 @@\n+package com.market.banica.calculator.controller;\n+\n+import com.market.banica.calculator.model.Product;\n+import com.market.banica.calculator.service.contract.ProductService;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.validation.Valid;\n+import java.util.List;\n+\n+@RestController\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"recipe\")\n+public class ProductController {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProductController.class);\n+\n+    private final ProductService productService;\n+\n+    @PostMapping\n+    public Product createRecipe( @RequestBody final List<Product> products) {\n+        LOGGER.info(\"POST /recipe called\");\n+\n+        LOGGER.debug(\"Recipe controller: in createRecipe method\");\n+        return productService.createProduct(products);\n+    }\n+}"
  },
  {
    "sha": "2d0cf3f3042aa88b5f6864b24e1888a9af611628",
    "filename": "calculator/src/main/java/com/market/banica/calculator/data/RecipesBaseImpl.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/data/RecipesBaseImpl.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/data/RecipesBaseImpl.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/data/RecipesBaseImpl.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,22 @@\n+package com.market.banica.calculator.data;\n+\n+import com.market.banica.calculator.data.contract.RecipesBase;\n+import com.market.banica.calculator.model.Product;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+@Component\n+@Getter\n+@ToString\n+@NoArgsConstructor\n+public class RecipesBaseImpl implements RecipesBase {\n+\n+    private final Map<String, Product> database = new ConcurrentHashMap<>();\n+}"
  },
  {
    "sha": "82ccf24da7d0a3884502d0e0466e3eecdd086007",
    "filename": "calculator/src/main/java/com/market/banica/calculator/data/contract/RecipesBase.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/data/contract/RecipesBase.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/data/contract/RecipesBase.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/data/contract/RecipesBase.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,10 @@\n+package com.market.banica.calculator.data.contract;\n+\n+import com.market.banica.calculator.model.Product;\n+\n+import java.util.Map;\n+\n+public interface RecipesBase {\n+\n+   Map<String, Product> getDatabase();\n+}"
  },
  {
    "sha": "9ffc99b73e9e56a2280ebcf43fa928aa9488e05e",
    "filename": "calculator/src/main/java/com/market/banica/calculator/dto/ProductDto.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/dto/ProductDto.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/dto/ProductDto.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/dto/ProductDto.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,18 @@\n+package com.market.banica.calculator.dto;\n+\n+import com.market.banica.calculator.enums.UnitOfMeasure;\n+import lombok.Data;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Data\n+public class ProductDto {\n+\n+    private String productName;\n+\n+    private UnitOfMeasure unitOfMeasure;\n+\n+    private Map<String,Integer> ingredients = new HashMap<>();\n+\n+}"
  },
  {
    "sha": "ea6bb5e4e5e6800dd1be8a27e374157b653de691",
    "filename": "calculator/src/main/java/com/market/banica/calculator/enums/UnitOfMeasure.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/enums/UnitOfMeasure.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/enums/UnitOfMeasure.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/enums/UnitOfMeasure.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,5 @@\n+package com.market.banica.calculator.enums;\n+\n+public enum UnitOfMeasure {\n+    GRAM,PIECE, MILLILITER\n+}"
  },
  {
    "sha": "6237adcc32a78f40e81c24b67fbec4d2abcd64fd",
    "filename": "calculator/src/main/java/com/market/banica/calculator/model/Product.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/model/Product.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/model/Product.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/model/Product.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,23 @@\n+package com.market.banica.calculator.model;\n+\n+import com.market.banica.calculator.enums.UnitOfMeasure;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Data\n+@Component\n+public class Product  {\n+\n+    private String productName;\n+\n+    private UnitOfMeasure unitOfMeasure;\n+\n+    private Map<String,Integer> ingredients = new HashMap<>();\n+}"
  },
  {
    "sha": "58bf75cc4a9112e0962742c8b53185c3cc10911c",
    "filename": "calculator/src/main/java/com/market/banica/calculator/service/BackUpServiceImpl.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/BackUpServiceImpl.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/BackUpServiceImpl.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/service/BackUpServiceImpl.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,107 @@\n+package com.market.banica.calculator.service;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.market.banica.calculator.data.contract.RecipesBase;\n+import com.market.banica.calculator.model.Product;\n+import com.market.banica.calculator.service.contract.BackUpService;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class BackUpServiceImpl implements BackUpService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BackUpServiceImpl.class);\n+\n+    @Value(\"${database.backup.url}\")\n+    private String databaseBackUpUrl;\n+    private final RecipesBase database;\n+\n+    @Override\n+    @PostConstruct\n+    public void readBackUp() {\n+        LOGGER.debug(\"In readBackUp method\");\n+\n+        if (doesBackUpFileExists()) {\n+            try (InputStream input = new FileInputStream(databaseBackUpUrl)) {\n+\n+                    ConcurrentHashMap<String, Product> data = getDataFromBackUpFile(input);\n+\n+                    setDatabaseFromBackUp(data);\n+\n+                LOGGER.info(\"Recipes database set from exterior file at location {}\",databaseBackUpUrl);\n+            } catch (IOException e) {\n+                LOGGER.error(\"Exception thrown during reading back-up at start up\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void writeBackUp() {\n+        LOGGER.debug(\"In writeBackUp method\");\n+\n+        Map<String, Product> data = getDataFromDatabase();\n+        ObjectWriter objectWriter = new ObjectMapper().writerWithDefaultPrettyPrinter();\n+\n+        try ( Writer output = new OutputStreamWriter(new FileOutputStream(databaseBackUpUrl), UTF_8)) {\n+\n+            String jsonData = getStringFromMap(data, objectWriter);\n+\n+            output.write(jsonData);\n+\n+            LOGGER.info(\"Recipes database back-up created in exterior file at location {}\", databaseBackUpUrl);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Exception thrown during writing back-up for database file: {}\", database.getDatabase(), e);\n+        }\n+    }\n+\n+    private boolean doesBackUpFileExists() {\n+        LOGGER.debug(\"In doesBackUpFileNotExists private method\");\n+\n+        return !Files.notExists(Paths.get(databaseBackUpUrl));\n+    }\n+\n+    private ConcurrentHashMap<String, Product> getDataFromBackUpFile(InputStream input) throws IOException {\n+        LOGGER.debug(\"In getDataFromBackUpFile private method\");\n+\n+        return new ObjectMapper().readValue(input, new TypeReference<ConcurrentHashMap<String,Product>>(){});\n+    }\n+\n+    private String getStringFromMap(Map<String, Product> data, ObjectWriter objectWriter) throws JsonProcessingException {\n+        LOGGER.debug(\"In getStringFromMap private method\");\n+\n+        return objectWriter.writeValueAsString(data);\n+    }\n+\n+    private Map<String, Product> getDataFromDatabase() {\n+        LOGGER.debug(\"In getDataFromDatabase private method\");\n+\n+        return database.getDatabase();\n+    }\n+\n+    private void setDatabaseFromBackUp(Map<String, Product> data) {\n+        LOGGER.debug(\"In setDatabaseFromBackUp private method\");\n+\n+        database.getDatabase().putAll(data);\n+    }\n+}"
  },
  {
    "sha": "37eec7155d237904bb55a596ba7040c015fdd035",
    "filename": "calculator/src/main/java/com/market/banica/calculator/service/JMXServiceImpl.java",
    "status": "added",
    "additions": 293,
    "deletions": 0,
    "changes": 293,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/JMXServiceImpl.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/JMXServiceImpl.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/service/JMXServiceImpl.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,293 @@\n+package com.market.banica.calculator.service;\n+\n+import com.market.banica.calculator.data.contract.RecipesBase;\n+import com.market.banica.calculator.enums.UnitOfMeasure;\n+import com.market.banica.calculator.model.Product;\n+import com.market.banica.calculator.service.contract.BackUpService;\n+import com.market.banica.calculator.service.contract.JMXService;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.EnableMBeanExport;\n+import org.springframework.jmx.export.annotation.ManagedOperation;\n+import org.springframework.jmx.export.annotation.ManagedResource;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+@EnableMBeanExport\n+@ManagedResource\n+@Service\n+@RequiredArgsConstructor\n+public class JMXServiceImpl implements JMXService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JMXServiceImpl.class);\n+    private static final String REGEX_DELIMITER_NEW_PRODUCT_INGREDIENTS = \",\";\n+    private static final String REGEX_DELIMITER_NEW_PRODUCT_ENTRY_PAIRS = \":\";\n+    private static final String KEY_PREFIX_FOR_DELETED_PRODUCT = \"deleted_\";\n+\n+    private final RecipesBase recipesBase;\n+    private final BackUpService backUpService;\n+\n+    @Override\n+    @ManagedOperation\n+    public Map<String, Product> getDatabase() {\n+        LOGGER.info(\"GetDatabase called from JMX server\");\n+\n+        return recipesBase.getDatabase();\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public void createProduct(String newProductName, String unitOfMeasure, String ingredientsList) {\n+        LOGGER.debug(\"in createProduct method with parameters: newProductName {},unitOfMeasure {},\" +\n+                        \" ingredientsList {}\", newProductName, unitOfMeasure,\n+                ingredientsList);\n+        LOGGER.info(\"CreateProduct called from JMX server\");\n+\n+        if (doesProductExists(newProductName)) {\n+\n+            LOGGER.error(\"Product with name {} already exists\", newProductName);\n+            throw new IllegalArgumentException(\"Product with this name already exists\");\n+        }\n+\n+        Product newProduct = createNewProduct(newProductName, unitOfMeasure, ingredientsList);\n+\n+        addProductToDatabase(newProductName, newProduct);\n+\n+        LOGGER.debug(\"New product created from JMX server with product name {} and unit of measure {}\"\n+                , newProductName, unitOfMeasure);\n+\n+        backUpService.writeBackUp();\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public void addIngredient(String recipeName, String ingredientName, int quantity) {\n+        LOGGER.debug(\"In addIngredient method with parameters: recipeName {},ingredientName {} and quantity {}\" +\n+                recipeName, ingredientName, quantity);\n+        LOGGER.info(\"AddIngredient called from JMX server\");\n+\n+        if (!doesProductExists(ingredientName)) {\n+\n+            LOGGER.error(\"Product with name {} does not exists\", ingredientName);\n+            throw new IllegalArgumentException(\"Product with this name does not exists\");\n+        }\n+\n+        Product recipe = retrieveProductFromDatabase(recipeName);\n+\n+        recipe.getIngredients().put(ingredientName, quantity);\n+\n+        backUpService.writeBackUp();\n+\n+        LOGGER.debug(\"Ingredient added from JMX server for recipeName {} and ingredientName {} with quantity {}\"\n+                , recipeName, ingredientName, quantity);\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public void setProductQuantity(String recipeName, String ingredientName, int newQuantity) {\n+        LOGGER.debug(\"In setProductQuantity method with parameters: recipeName {},ingredientName {}\" +\n+                \" and newQuantity {}\", recipeName, ingredientName, newQuantity);\n+        LOGGER.info(\"SetProductQuantity called from JMX server\");\n+\n+        Product parentProduct = retrieveProductFromDatabase(recipeName);\n+\n+        validateIngredientBelongToRecipe(ingredientName, parentProduct);\n+\n+        setProductQuantity(ingredientName, parentProduct, newQuantity);\n+\n+        backUpService.writeBackUp();\n+\n+\n+        LOGGER.debug(\"Value set from JMX server for recipeName {} and ingredientName {} with newQuantity {}\"\n+                , recipeName, ingredientName, newQuantity);\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public int getProductQuantity(String recipeName, String ingredientName) {\n+        LOGGER.debug(\"In getProductQuantity method with parameters: recipeName {} and ingredientName {}\", recipeName, ingredientName);\n+        LOGGER.info(\"GetProductQuantity called from JMX server\");\n+\n+        Product parentProduct = retrieveProductFromDatabase(recipeName);\n+\n+        validateIngredientBelongToRecipe(ingredientName, parentProduct);\n+\n+        LOGGER.debug(\"Value checked from JMX server for recipeName {} and ingredientName {}\", recipeName, ingredientName);\n+        return getProductQuantity(ingredientName, parentProduct);\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public String getUnitOfMeasure(String productName) {\n+        LOGGER.debug(\"In getUnitOfMeasure method with parameters: productName {}\", productName);\n+        LOGGER.info(\"GetUnitOfMeasure called from JMX server\");\n+\n+        Product product = retrieveProductFromDatabase(productName);\n+\n+        LOGGER.debug(\"UnitOfMeasure checked from JMX server for product with name {}\", productName);\n+        return product.getUnitOfMeasure().toString();\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public void setUnitOfMeasure(String productName, String unitOfMeasure) {\n+        LOGGER.debug(\"In setUnitOfMeasure method with parameters: productName {} and unitOfMeasure {}\", productName, unitOfMeasure);\n+        LOGGER.info(\"SetUnitOfMeasure called from JMX server\");\n+\n+        Product product = retrieveProductFromDatabase(productName);\n+\n+        product.setUnitOfMeasure(UnitOfMeasure.valueOf(unitOfMeasure.toUpperCase(Locale.ROOT)));\n+\n+        backUpService.writeBackUp();\n+\n+        LOGGER.debug(\"UnitOfMeasure set from JMX server for product with name {}\" +\n+                \" and new unitOfMeasure {}\", productName, unitOfMeasure);\n+    }\n+\n+    @Override\n+    @ManagedOperation\n+    public void deleteProduct(String parentProductName, String productName) {\n+        LOGGER.debug(\"In deleteIngredient method with parameters: parentProductName {} and productName {}\", parentProductName, productName);\n+        LOGGER.info(\"DeleteIngredient called from JMX server\");\n+\n+        Product product = retrieveProductFromDatabase(productName);\n+\n+        if (Objects.equals(parentProductName, \"\")) {\n+\n+            getDatabase().remove(productName);\n+\n+            addProductToDatabase(KEY_PREFIX_FOR_DELETED_PRODUCT + productName, product);\n+\n+        } else {\n+\n+            Product parentProduct = retrieveProductFromDatabase(parentProductName);\n+\n+            validateIngredientBelongToRecipe(productName, parentProduct);\n+\n+            deleteParentIngredientRelationFromParentIngredients(parentProduct, product);\n+        }\n+\n+        backUpService.writeBackUp();\n+\n+        LOGGER.debug(\"Product deleted from JMX server for parentProductName {} and productName {}\"\n+                , parentProductName, productName);\n+    }\n+\n+    private void validateIngredientBelongToRecipe(String productName, Product parentProduct) {\n+        LOGGER.debug(\"In validateIngredientBelongToRecipe private method\");\n+\n+        if (parentProduct.getIngredients().get(productName) == null) {\n+\n+            LOGGER.error(\"Ingredient {} does not belong to recipe {}\", productName, parentProduct.getProductName());\n+            throw new IllegalArgumentException(\"Ingredient does not belong to the recipe\");\n+        }\n+    }\n+\n+    private void addProductToDatabase(String newProductName, Product newProduct) {\n+        LOGGER.debug(\"In addProductToDatabase private method\");\n+\n+        getDatabase().put(newProductName, newProduct);\n+    }\n+\n+    private Product retrieveProductFromDatabase(String productName) {\n+        LOGGER.debug(\"In retrieveProductFromDatabase private method\");\n+\n+        if (!doesProductExists(productName)) {\n+\n+            LOGGER.error(\"Product with name {} does not exist\", productName);\n+            throw new IllegalArgumentException(\"Product with this name does not exist\");\n+        }\n+\n+        return getDatabase().get(productName);\n+    }\n+\n+    private void deleteParentIngredientRelationFromParentIngredients(Product parentProduct, Product ingredient) {\n+        LOGGER.debug(\"In deleteParentIngredientRelationFromQuantityPerParent private method\");\n+\n+        parentProduct.getIngredients().remove(ingredient.getProductName());\n+    }\n+\n+    private int getProductQuantity(String ingredientName, Product parentProduct) {\n+        LOGGER.debug(\"In getProductQuantity private method\");\n+\n+        return parentProduct.getIngredients().get(ingredientName);\n+    }\n+\n+    private void setProductQuantity(String product, Product parentProduct, int newQuantity) {\n+        LOGGER.debug(\"In setProductQuantity private method\");\n+\n+        parentProduct.getIngredients().put(product, newQuantity);\n+    }\n+\n+    private boolean doesProductExists(String productName) {\n+        LOGGER.debug(\"In validateProductExist private method\");\n+\n+        return getDatabase().containsKey(productName);\n+    }\n+\n+    private Product createNewProduct(String newProductName, String unitOfMeasure,\n+                                     String ingredientsList) {\n+        LOGGER.debug(\"In createNewProduct private method\");\n+\n+        Product newRecipe = new Product();\n+\n+        newRecipe.setProductName(newProductName);\n+\n+        newRecipe.setUnitOfMeasure(UnitOfMeasure.valueOf(unitOfMeasure));\n+\n+        if (!ingredientsList.isEmpty()) {\n+\n+            Map<String, Integer> ingredients = convertStringOfIngredientsToMap(ingredientsList);\n+\n+            validateProductsOfListExists(ingredients.keySet());\n+\n+            newRecipe.setIngredients(ingredients);\n+        }\n+\n+        return newRecipe;\n+    }\n+\n+    private Map<String, Integer> convertStringOfIngredientsToMap(String ingredientsList) {\n+        LOGGER.debug(\"In convertStringOfIngredientsToMap private method\");\n+\n+        Map<String, Integer> ingredients = new HashMap<>();\n+        String[] ingredientsAsArray = ingredientsList.split(REGEX_DELIMITER_NEW_PRODUCT_INGREDIENTS);\n+\n+        for (String s : ingredientsAsArray) {\n+\n+            String[] mapEntry = s.split(REGEX_DELIMITER_NEW_PRODUCT_ENTRY_PAIRS);\n+            int quantity = getValueAsInt(mapEntry[1]);\n+            ingredients.put(mapEntry[0], quantity);\n+        }\n+\n+        return ingredients;\n+    }\n+\n+    private int getValueAsInt(String quantity) {\n+        LOGGER.debug(\"In getValueAsInt private method\");\n+\n+        try {\n+            return Integer.parseInt(quantity);\n+        } catch (NumberFormatException e) {\n+            LOGGER.error(\"String passed is not convertible to int. String value: {}. Exception thrown\", quantity);\n+        } catch (NullPointerException e) {\n+            LOGGER.error(\"String passed is null. Exception thrown\");\n+        }\n+        throw new IllegalArgumentException(\"Can not convert the string to number\");\n+    }\n+\n+    private void validateProductsOfListExists(Collection<String> productsNames) {\n+        LOGGER.debug(\"In validateProductsOfListExists private method\");\n+\n+        for (String productName : productsNames) {\n+\n+            retrieveProductFromDatabase(productName);\n+        }\n+    }\n+}"
  },
  {
    "sha": "72d5366cdc4e25685ab8ba0be19d0f517fbbc605",
    "filename": "calculator/src/main/java/com/market/banica/calculator/service/ProductServiceImpl.java",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/ProductServiceImpl.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/ProductServiceImpl.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/service/ProductServiceImpl.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,186 @@\n+package com.market.banica.calculator.service;\n+\n+import com.market.banica.calculator.data.contract.RecipesBase;\n+import com.market.banica.calculator.dto.ProductDto;\n+import com.market.banica.calculator.model.Product;\n+import com.market.banica.calculator.service.contract.BackUpService;\n+import com.market.banica.calculator.service.contract.ProductService;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class ProductServiceImpl implements ProductService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProductServiceImpl.class);\n+\n+    private final RecipesBase recipesBase;\n+    private final BackUpService backUpService;\n+\n+    @Override\n+    public Product createProduct(List<Product> products) {\n+        LOGGER.debug(\"In createProduct method with parameters: products {}\", products);\n+\n+        validateParameterForNullAndEmpty(products);\n+\n+        validateAllProductsInListAreNew(products);\n+\n+        createProductsInDatabase(products);\n+\n+        createBackUp();\n+\n+        String recipeName = getRecipeName(products);\n+\n+        LOGGER.debug(\"Recipe {} successfully created\", recipeName);\n+        return recipesBase.getDatabase().get(recipeName);\n+    }\n+\n+    @Override\n+    public List<ProductDto> getProduct(String productName, @Nullable String parentProductName) {\n+        LOGGER.debug(\"In getProduct method with parameters:productName {} and  parentProductName {}\",productName,parentProductName);\n+\n+        Product product = getProductFromDatabase(productName);\n+\n+        validateProductExist(productName, product);\n+\n+        ProductDto productDto = mapProductToProductDto( product);\n+\n+        List<ProductDto> result = new ArrayList<>();\n+        result.add(productDto);\n+\n+        if (product.getIngredients().size() != 0) {\n+            groupAllIngredientsFromRecipeInResultListAsProductDtos(result, product);\n+        }\n+\n+        LOGGER.debug(\"GetProduct with product name {} successfully invoked\", productName);\n+        return result;\n+    }\n+\n+    //TODO to be implemented once expectations are clear\n+    @Override\n+    public void getAllProducts(){}\n+\n+    @Override\n+    public void createBackUp() {\n+        LOGGER.debug(\"In createBackUp method\");\n+\n+        backUpService.writeBackUp();\n+    }\n+\n+    private Product getProductFromDatabase(String productName) {\n+        LOGGER.debug(\"In getProductFromDatabase method\");\n+\n+        return recipesBase.getDatabase().get(productName);\n+    }\n+\n+    private void createProductsInDatabase(List<Product> products) {\n+        LOGGER.debug(\"In createProductsInDatabase private method\");\n+\n+        for(Product product: products){\n+            recipesBase.getDatabase().put(product.getProductName(),product);\n+        }\n+    }\n+\n+    private void validateAllProductsInListAreNew(List<Product> products) {\n+        LOGGER.debug(\"In validateAllProductsInListAreNew private method\");\n+\n+        for(Product newProduct: products){\n+            if(getProductFromDatabase(newProduct.getProductName())!= null){\n+\n+                LOGGER.error(\"Product with name {} already exists\",newProduct.getProductName());\n+                throw new IllegalArgumentException(\"Product already exists\");\n+            }\n+        }\n+    }\n+\n+    private String getRecipeName(List<Product> products) {\n+        LOGGER.debug(\"In getRecipeName private method\");\n+\n+        return products.get(0).getProductName();\n+    }\n+\n+    private void validateProductExist(String productName, Product product) {\n+        LOGGER.debug(\"In validateProductExist private method\");\n+\n+        if (product == null) {\n+\n+            LOGGER.error(\"Product with name {} does not exist\", productName);\n+            throw new IllegalArgumentException(\"Product with this name does not exist\");\n+        }\n+    }\n+\n+    private void groupAllIngredientsFromRecipeInResultListAsProductDtos(List<ProductDto> result, Product recipe) {\n+        LOGGER.debug(\"In groupAllIngredientsFromRecipeInResultListAsProductDtos private method\");\n+\n+        Queue<Product> tempContainer = convertListOfProductNamesInArrayDequeOfProducts(recipe);\n+\n+        while (!tempContainer.isEmpty()) {\n+\n+            Product tempProduct = tempContainer.remove();\n+\n+            if (tempProduct.getIngredients().size() != 0) {\n+\n+                Queue<Product> tempIngredientsQueue =convertListOfProductNamesInArrayDequeOfProducts(tempProduct);\n+                tempContainer.addAll(tempIngredientsQueue);\n+                result.addAll(mapQueueOfProductsToListOfProductDtos(tempIngredientsQueue));\n+\n+            } else {\n+\n+                result.add(mapProductToProductDto( tempProduct));\n+            }\n+        }\n+    }\n+\n+    private List<ProductDto> mapQueueOfProductsToListOfProductDtos(Queue<Product> tempIngredientsQueue) {\n+        LOGGER.debug(\"In mapQueueOfProductsToListOfProductDtos private method\");\n+\n+        List<ProductDto>productDtos = new ArrayList<>();\n+\n+        for(Product product: tempIngredientsQueue){\n+\n+            productDtos.add(mapProductToProductDto(product));\n+        }\n+\n+        return productDtos;\n+    }\n+\n+    private Queue<Product> convertListOfProductNamesInArrayDequeOfProducts(Product recipe) {\n+        LOGGER.debug(\"In convertListOfProductNamesInArrayDequeOfProducts private method\");\n+\n+        return recipe.getIngredients().keySet().stream()\n+                .map(this::getProductFromDatabase)\n+                .collect(Collectors.toCollection(ArrayDeque::new));\n+    }\n+\n+    // TODO matter of future update with Model Mapper, once it is merged with main, to avoid possible merge conflicts\n+    private ProductDto mapProductToProductDto(Product recipe) {\n+        LOGGER.debug(\"In mapProductToProductDto private method\");\n+\n+        ProductDto productDto = new ProductDto();\n+        productDto.setProductName(recipe.getProductName());\n+        productDto.setUnitOfMeasure(recipe.getUnitOfMeasure());\n+        productDto.setIngredients(recipe.getIngredients());\n+\n+        return productDto;\n+    }\n+\n+    private void validateParameterForNullAndEmpty(List<Product> products) {\n+        LOGGER.debug(\"In validateParameterForNullAndEmpty private method\");\n+\n+        if (products == null || products.isEmpty()) {\n+\n+            LOGGER.error(\"Parameter {} passed to createRecipe is null or empty\", products);\n+            throw new IllegalArgumentException(\"Recipes should be present to create recipe\");\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "489a181c59881086c912a3ac3fdfbb7c12a4b47d",
    "filename": "calculator/src/main/java/com/market/banica/calculator/service/contract/BackUpService.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/contract/BackUpService.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/contract/BackUpService.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/service/contract/BackUpService.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,9 @@\n+package com.market.banica.calculator.service.contract;\n+\n+public interface BackUpService {\n+\n+    void readBackUp();\n+\n+    void writeBackUp();\n+\n+}"
  },
  {
    "sha": "904c739906c45156bce551e92f42dbc43f69f6bd",
    "filename": "calculator/src/main/java/com/market/banica/calculator/service/contract/JMXService.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/contract/JMXService.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/contract/JMXService.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/service/contract/JMXService.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,25 @@\n+package com.market.banica.calculator.service.contract;\n+\n+import com.market.banica.calculator.model.Product;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface JMXService {\n+\n+    Map<String, Product> getDatabase();\n+\n+    void createProduct(String newRecipeName, String unitOfMeasure, String ingredients);\n+\n+    void addIngredient(String recipeName, String ingredientName, int quantity);\n+\n+    void setProductQuantity(String recipeName, String ingredientName, int newQuantity);\n+\n+    int getProductQuantity(String recipeName, String ingredientName);\n+\n+    String getUnitOfMeasure(String productName);\n+\n+    void setUnitOfMeasure(String productName, String unitOfMeasure);\n+\n+    void deleteProduct(String recipeName, String ingredientName);\n+}"
  },
  {
    "sha": "b0ae350faa5f4435b29a72e1a0ca005077314a34",
    "filename": "calculator/src/main/java/com/market/banica/calculator/service/contract/ProductService.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/contract/ProductService.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/java/com/market/banica/calculator/service/contract/ProductService.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/java/com/market/banica/calculator/service/contract/ProductService.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,19 @@\n+package com.market.banica.calculator.service.contract;\n+\n+import com.market.banica.calculator.dto.ProductDto;\n+import com.market.banica.calculator.model.Product;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.List;\n+\n+public interface ProductService {\n+\n+    Product createProduct(List<Product> products);\n+\n+    List<ProductDto> getProduct(String recipeName, @Nullable String parentRecipeName);\n+\n+    void getAllProducts();\n+\n+    void createBackUp();\n+\n+}"
  },
  {
    "sha": "c464fba0668fb7a23287cda07ef4470301514cb8",
    "filename": "calculator/src/main/resources/application.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/resources/application.properties",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/main/resources/application.properties?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -1,3 +1,4 @@\n+database.backup.url = calculator/src/main/resources/backUpRecipeBase.json\n #Defult host for aurora.\n aurora.server.host=localhost\n #Example port for aurora."
  },
  {
    "sha": "47364040fc1abee6d9d26983d04b0547de91fc1d",
    "filename": "calculator/src/test/java/com/market/banica/calculator/configurationTests/BanicaPumpkinPropsTests.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/test/java/com/market/banica/calculator/configurationTests/BanicaPumpkinPropsTests.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/test/java/com/market/banica/calculator/configurationTests/BanicaPumpkinPropsTests.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/test/java/com/market/banica/calculator/configurationTests/BanicaPumpkinPropsTests.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,4 @@\n+package com.market.banica.calculator.configurationTests;\n+\n+public class BanicaPumpkinPropsTests {\n+}"
  },
  {
    "sha": "8fa2dc3a7d3567b214d77e16c740b1353a50e889",
    "filename": "calculator/src/test/java/com/market/banica/calculator/controllerTests/ReceiptControllerTests.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/test/java/com/market/banica/calculator/controllerTests/ReceiptControllerTests.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/test/java/com/market/banica/calculator/controllerTests/ReceiptControllerTests.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/test/java/com/market/banica/calculator/controllerTests/ReceiptControllerTests.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,4 @@\n+package com.market.banica.calculator.controllerTests;\n+\n+public class ReceiptControllerTests {\n+}"
  },
  {
    "sha": "c622556b65bf19f4a615170387c61048ea14e198",
    "filename": "calculator/src/test/java/com/market/banica/calculator/serviceTests/BanicaPumpkinPropsConfigImplTests.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/banica-org/banica-with-pumpkin/blob/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/test/java/com/market/banica/calculator/serviceTests/BanicaPumpkinPropsConfigImplTests.java",
    "raw_url": "https://github.com/banica-org/banica-with-pumpkin/raw/3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca/calculator/src/test/java/com/market/banica/calculator/serviceTests/BanicaPumpkinPropsConfigImplTests.java",
    "contents_url": "https://api.github.com/repos/banica-org/banica-with-pumpkin/contents/calculator/src/test/java/com/market/banica/calculator/serviceTests/BanicaPumpkinPropsConfigImplTests.java?ref=3f6ce52b8b3ccca4ff6bd5de1da2310fe740baca",
    "patch": "@@ -0,0 +1,4 @@\n+package com.market.banica.calculator.serviceTests;\n+\n+public class BanicaPumpkinPropsConfigImplTests {\n+}"
  }
]
