[
  {
    "sha": "f82b9c108e0b3ef80bdb73f5bde6bb5544d9346c",
    "filename": "api-mock/src/main/resources/static/leaderboard-responses.json",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/api-mock/src/main/resources/static/leaderboard-responses.json",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/api-mock/src/main/resources/static/leaderboard-responses.json",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/api-mock/src/main/resources/static/leaderboard-responses.json?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -1410,7 +1410,7 @@\n           \"technologies\": [\n             \"Java\"\n           ],\n-          \"email\": \"koki1231234@gmail.com\",\n+          \"email\": \"kaloyan_dutsolov@epam.com\",\n           \"name\": \"Kaloyan Dutsolov\",\n           \"id\": 9,\n           \"city\": \"Sofia\",\n@@ -1430,7 +1430,7 @@\n           \"technologies\": [\n             \"Java\"\n           ],\n-          \"email\": \"koki1231234@gmail.com\",\n+          \"email\": \"kaloyan_dutsolov@epam.com\",\n           \"name\": \"Kaloyan Dutsolov\",\n           \"id\": 9,\n           \"city\": \"Sofia\",\n@@ -1468,7 +1468,7 @@\n           \"technologies\": [\n             \"Java\"\n           ],\n-          \"email\": \"koki1231234@gmail.com\",\n+          \"email\": \"kaloyan_dutsolov@epam.com\",\n           \"name\": \"Kaloyan Dutsolov\",\n           \"id\": 9,\n           \"city\": \"Sofia\","
  },
  {
    "sha": "b7596f24ec2dcef8c27c8544ce83072ae2810409",
    "filename": "api-mock/src/main/resources/static/users-responses.json",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/api-mock/src/main/resources/static/users-responses.json",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/api-mock/src/main/resources/static/users-responses.json",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/api-mock/src/main/resources/static/users-responses.json?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -116,7 +116,7 @@\n     \"technologies\": [\n       \"Java\"\n     ],\n-    \"email\": \"koki1231234@gmail.com\",\n+    \"email\": \"kaloyan_dutsolov@epam.com\",\n     \"name\": \"Kaloyan Dutsolov\",\n     \"id\": 9,\n     \"city\": \"Sofia\","
  },
  {
    "sha": "2a5d2113d210007eb78f9fc9084b263ab6c2c6bd",
    "filename": "notifications/src/main/java/com/dojo/notifications/model/user/User.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/model/user/User.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/model/user/User.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/model/user/User.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -1,12 +1,14 @@\n package com.dojo.notifications.model.user;\n \n+import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n import java.util.Objects;\n \n @Data\n @NoArgsConstructor\n+@AllArgsConstructor\n public class User {\n     private UserInfo user;\n     private long score;"
  },
  {
    "sha": "c9c17d0a9af7b7bb818fb24b6e66d1abafc205bb",
    "filename": "notifications/src/main/java/com/dojo/notifications/service/LeaderboardNotifierService.java",
    "status": "modified",
    "additions": 19,
    "deletions": 48,
    "changes": 67,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/LeaderboardNotifierService.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/LeaderboardNotifierService.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/service/LeaderboardNotifierService.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -1,87 +1,70 @@\n package com.dojo.notifications.service;\n \n-import com.dojo.notifications.configuration.Configuration;\n import com.dojo.notifications.contest.Contest;\n import com.dojo.notifications.model.notification.CommonLeaderboardNotification;\n import com.dojo.notifications.model.notification.PersonalLeaderboardNotification;\n import com.dojo.notifications.model.user.User;\n-import com.dojo.notifications.model.user.UserDetails;\n import com.dojo.notifications.contest.enums.EventType;\n import com.dojo.notifications.contest.enums.NotifierType;\n+import com.dojo.notifications.model.user.UserDetails;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.ParameterizedTypeReference;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Service;\n-import org.springframework.web.client.RestTemplate;\n-import org.springframework.web.util.UriComponentsBuilder;\n \n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n \n @Service\n public class LeaderboardNotifierService {\n     private static final Logger LOGGER = LoggerFactory.getLogger(LeaderboardNotifierService.class);\n-    private final Configuration configuration;\n-    private final RestTemplate restTemplate;\n+    private final LeaderboardService leaderboardService;\n     private final Map<String, List<User>> leaderboards;\n \n     private final Map<NotifierType, NotificationService> notificationServices;\n     private final UserDetailsService userDetailsService;\n \n     @Autowired\n-    public LeaderboardNotifierService(Configuration configuration,\n+    public LeaderboardNotifierService(LeaderboardService leaderboardService,\n                                       Collection<NotificationService> notificationServices,\n                                       UserDetailsService userDetailsService) {\n-        this.configuration = configuration;\n-        this.restTemplate = new RestTemplate();\n+        this.leaderboardService = leaderboardService;\n         this.leaderboards = new ConcurrentHashMap<>();\n         this.notificationServices = notificationServices.stream()\n                 .collect(Collectors.toMap(NotificationService::getNotificationServiceTypeMapping, Function.identity()));\n         this.userDetailsService = userDetailsService;\n     }\n \n-    public void getLeaderBoard(final Contest contest) {\n-        UriComponentsBuilder leaderboardApiBuilder = UriComponentsBuilder.fromHttpUrl(configuration.getLeaderboardApi())\n-                .queryParam(\"eventId\", contest.getContestId())\n-                .queryParam(\"userMode\", \"spectator\");\n-        ResponseEntity<List<User>> responseEntity = restTemplate.exchange(leaderboardApiBuilder.toUriString(),\n-                HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>() {\n-                });\n-\n-        List<User> newLeaderboard = responseEntity.getBody();\n+    public void lookForLeaderboardChanges(final Contest contest) {\n+        List<User> newLeaderboard = leaderboardService.getNewLeaderboardSetup(contest);\n         List<User> oldLeaderboard = leaderboards.get(contest.getContestId());\n \n         if (oldLeaderboard != null && newLeaderboard != null && !newLeaderboard.equals(oldLeaderboard)) {\n-            notifyAndApplyChanges(contest, newLeaderboard);\n+            this.notifyAboutChanges(contest, newLeaderboard, oldLeaderboard);\n         }\n+\n         leaderboards.put(contest.getContestId(), newLeaderboard);\n     }\n \n-    private void notifyAndApplyChanges(final Contest contest, List<User> newLeaderboard) {\n+    public void notifyAboutChanges(final Contest contest, List<User> newLeaderboard, List<User> oldLeaderboard) {\n         LOGGER.info(\"There are changes in leaderboard!\");\n \n-        EventType changesEventType = determineEventType(newLeaderboard, contest);\n+        EventType changesEventType = leaderboardService.determineEventType(newLeaderboard, oldLeaderboard);\n+\n         if (changesEventType == EventType.POSITION_CHANGES) {\n-            notifyPersonal(newLeaderboard, contest);\n+            notifyPersonal(contest, newLeaderboard, oldLeaderboard);\n         }\n+\n         contest.getCommonNotificationsLevel().entrySet().stream()\n                 .filter(entry -> entry.getValue().getIncludedEventTypes().contains(changesEventType))\n-                .forEach(entry -> notifyCommon(newLeaderboard, contest, entry.getKey()));\n+                .forEach(entry -> notifyCommon(contest, newLeaderboard, entry.getKey()));\n     }\n \n-    private void notifyPersonal(List<User> newLeaderboard, Contest contest) {\n-        List<User> leaderboard = leaderboards.get(contest.getContestId());\n+    private void notifyPersonal(Contest contest, List<User> newLeaderboard, List<User> oldLeaderboard) {\n \n-        List<UserDetails> userDetails = IntStream.range(0, Math.min(newLeaderboard.size(), leaderboard.size()))\n-                .filter(i -> !leaderboard.get(i).equals(newLeaderboard.get(i)))\n-                .mapToObj(i -> userDetailsService.getUserDetails(leaderboard.get(i).getUser().getId()))\n-                .collect(Collectors.toList());\n+        List<UserDetails> userDetails = leaderboardService.getUserDetails(newLeaderboard, oldLeaderboard);\n \n         userDetails.forEach(user -> {\n             for (NotifierType notifierType : contest.getPersonalNotifiers()) {\n@@ -91,21 +74,9 @@ private void notifyPersonal(List<User> newLeaderboard, Contest contest) {\n         });\n     }\n \n-    private void notifyCommon(List<User> newLeaderboard, Contest contest, NotifierType notifierType) {\n-        notificationServices.get(notifierType).notify(new CommonLeaderboardNotification(newLeaderboard, userDetailsService), contest);\n+    private void notifyCommon(Contest contest, List<User> newLeaderboard, NotifierType notifierType) {\n+        notificationServices.get(notifierType)\n+                .notify(new CommonLeaderboardNotification(newLeaderboard, userDetailsService), contest);\n     }\n \n-    private EventType determineEventType(List<User> newLeaderboard, Contest contest) {\n-        List<User> oldLeaderboard = leaderboards.get(contest.getContestId());\n-\n-        if (IntStream.range(0, Math.min(newLeaderboard.size(), oldLeaderboard.size()))\n-                .filter(i -> oldLeaderboard.get(i).getUser().getId() != (newLeaderboard.get(i).getUser().getId()))\n-                .findAny().isPresent()) return EventType.POSITION_CHANGES;\n-\n-        if (IntStream.range(0, Math.min(newLeaderboard.size(), oldLeaderboard.size()))\n-                .filter(i -> oldLeaderboard.get(i).getScore() != (newLeaderboard.get(i).getScore()))\n-                .findAny().isPresent()) return EventType.SCORE_CHANGES;\n-\n-        return EventType.OTHER_LEADERBOARD_CHANGE;\n-    }\n }"
  },
  {
    "sha": "23b4cc5ee6ae33d97a716231435f5b08a88ae2b0",
    "filename": "notifications/src/main/java/com/dojo/notifications/service/LeaderboardService.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/LeaderboardService.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/LeaderboardService.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/service/LeaderboardService.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -0,0 +1,82 @@\n+package com.dojo.notifications.service;\n+\n+import com.dojo.notifications.configuration.Configuration;\n+import com.dojo.notifications.contest.Contest;\n+import com.dojo.notifications.contest.enums.EventType;\n+import com.dojo.notifications.model.user.User;\n+import com.dojo.notifications.model.user.UserDetails;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+@Service\n+public class LeaderboardService {\n+    private final Configuration configuration;\n+    private final RestTemplate restTemplate;\n+    private final UserDetailsService userDetailsService;\n+\n+    @Autowired\n+    public LeaderboardService(Configuration configuration, UserDetailsService userDetailsService) {\n+        this.configuration = configuration;\n+        this.restTemplate = new RestTemplate();\n+        this.userDetailsService = userDetailsService;\n+    }\n+\n+    public List<User> getNewLeaderboardSetup(final Contest contest) {\n+\n+        UriComponentsBuilder leaderboardApiBuilder = UriComponentsBuilder.fromHttpUrl(configuration.getLeaderboardApi())\n+                .queryParam(\"eventId\", contest.getContestId())\n+                .queryParam(\"userMode\", \"spectator\");\n+\n+        ResponseEntity<List<User>> responseEntity = restTemplate.exchange(leaderboardApiBuilder.toUriString(),\n+                HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>() {\n+                });\n+\n+        return responseEntity.getBody();\n+    }\n+\n+\n+    public EventType determineEventType(List<User> newLeaderboard, List<User> oldLeaderboard) {\n+\n+        if (checkForPositionChanges(newLeaderboard, oldLeaderboard)) {\n+            return EventType.POSITION_CHANGES;\n+        }\n+\n+        if (checkForScoreChanges(newLeaderboard, oldLeaderboard)) {\n+            return EventType.SCORE_CHANGES;\n+        }\n+\n+        return EventType.OTHER_LEADERBOARD_CHANGE;\n+    }\n+\n+\n+    public List<UserDetails> getUserDetails(List<User> newLeaderboard, List<User> oldLeaderboard) {\n+\n+        return IntStream.range(0, Math.min(newLeaderboard.size(), oldLeaderboard.size()))\n+                .filter(i -> !oldLeaderboard.get(i).equals(newLeaderboard.get(i)))\n+                .mapToObj(i -> userDetailsService.getUserDetails(oldLeaderboard.get(i).getUser().getId()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean checkForPositionChanges(List<User> newLeaderboard, List<User> oldLeaderboard) {\n+        return IntStream.range(0, Math.min(newLeaderboard.size(), oldLeaderboard.size()))\n+                .filter(i -> oldLeaderboard.get(i).getUser().getId() != (newLeaderboard.get(i).getUser().getId()))\n+                .findAny().isPresent();\n+    }\n+\n+    private boolean checkForScoreChanges(List<User> newLeaderboard, List<User> oldLeaderboard) {\n+        return IntStream.range(0, Math.min(newLeaderboard.size(), oldLeaderboard.size()))\n+                .filter(i -> oldLeaderboard.get(i).getScore() != (newLeaderboard.get(i).getScore()))\n+                .findAny().isPresent();\n+    }\n+\n+}"
  },
  {
    "sha": "ac684b2264ce1e2e11fe21e8da710279aa1d3867",
    "filename": "notifications/src/main/java/com/dojo/notifications/service/NotificationManagingService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/NotificationManagingService.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/NotificationManagingService.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/service/NotificationManagingService.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -31,7 +31,7 @@ public NotificationManagingService(LeaderboardNotifierService leaderboardService\n     }\n \n     public void startNotifications(final Contest contest){\n-        ScheduledFuture<?> future = executorService.scheduleAtFixedRate(() ->leaderboardService.getLeaderBoard(contest), INITIAL_DELAY, schedulePeriod, TimeUnit.SECONDS);\n+        ScheduledFuture<?> future = executorService.scheduleAtFixedRate(() ->leaderboardService.lookForLeaderboardChanges(contest), INITIAL_DELAY, schedulePeriod, TimeUnit.SECONDS);\n         subscriptions.put(contest.getContestId(), future);\n     }\n "
  },
  {
    "sha": "f8531109b987fbbdeec7b46cc2ac14d062725a74",
    "filename": "notifications/src/main/java/com/dojo/notifications/service/emailNotifier/EmailNotificationService.java",
    "status": "modified",
    "additions": 18,
    "deletions": 18,
    "changes": 36,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/EmailNotificationService.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/EmailNotificationService.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/EmailNotificationService.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -29,24 +29,6 @@\n     @Autowired\n     private MailContentBuilder mailContentBuilder;\n \n-    private void sendEmail(String to, String data, Contest contest) {\n-        MimeMessage message = emailSender.createMimeMessage();\n-        MimeMessageHelper helper;\n-        try {\n-            helper = new MimeMessageHelper(message, true);\n-\n-            helper.setFrom(emailConfig.getUsername());\n-            helper.setTo(to);\n-            helper.setSubject(\"Leaderboard change for \" + contest.getTitle());\n-            helper.setText(data, true);\n-\n-            emailSender.send(message);\n-\n-        } catch (MessagingException e) {\n-            LOGGER.warn(\"Email could not be sent: {}\", e.getCause().getMessage());\n-        }\n-    }\n-\n     @Override\n     public NotifierType getNotificationServiceTypeMapping() {\n         return NotifierType.EMAIL;\n@@ -65,4 +47,22 @@ public void notify(Notification notification, Contest contest) {\n         String data = notification.convertToEmailNotification(this.mailContentBuilder);\n         contest.getSenseiEmails().forEach(email -> sendEmail(email, data, contest));\n     }\n+\n+    private void sendEmail(String to, String data, Contest contest) {\n+        MimeMessage message = emailSender.createMimeMessage();\n+        MimeMessageHelper helper;\n+        try {\n+            helper = new MimeMessageHelper(message, true);\n+\n+            helper.setFrom(emailConfig.getUsername());\n+            helper.setTo(to);\n+            helper.setSubject(\"Leaderboard change for \" + contest.getTitle());\n+            helper.setText(data, true);\n+\n+            emailSender.send(message);\n+\n+        } catch (MessagingException e) {\n+            LOGGER.warn(\"Email could not be sent: {}\", e.getCause().getMessage());\n+        }\n+    }\n }"
  },
  {
    "sha": "4e48c4d799bc0f71550dda2efeb069cdd2182bd1",
    "filename": "notifications/src/main/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilder.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilder.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilder.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilder.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -1,15 +1,15 @@\n package com.dojo.notifications.service.emailNotifier;\n \n import org.springframework.stereotype.Component;\n-import org.thymeleaf.TemplateEngine;\n+import org.thymeleaf.ITemplateEngine;\n import org.thymeleaf.context.Context;\n \n import java.util.Map;\n \n @Component\n public class LeaderboardMailMessageBuilder extends MailContentBuilder {\n \n-    public LeaderboardMailMessageBuilder(TemplateEngine templateEngine) {\n+    public LeaderboardMailMessageBuilder(ITemplateEngine templateEngine) {\n         super(templateEngine);\n     }\n \n@@ -20,4 +20,5 @@ public String generateMailContent(Map<String, Object> contextParams) {\n \n         return getTemplateEngine().process(\"mailTemplate\", context);\n     }\n+\n }"
  },
  {
    "sha": "d4984a9e2a29fc3006588aa2de7789983a16f2a5",
    "filename": "notifications/src/main/java/com/dojo/notifications/service/emailNotifier/MailContentBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/MailContentBuilder.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/MailContentBuilder.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/java/com/dojo/notifications/service/emailNotifier/MailContentBuilder.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -2,23 +2,23 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import org.thymeleaf.TemplateEngine;\n+import org.thymeleaf.ITemplateEngine;\n \n import java.util.Map;\n \n @Service\n public abstract class MailContentBuilder {\n \n-    private final TemplateEngine templateEngine;\n+    private final ITemplateEngine templateEngine;\n \n     @Autowired\n-    public MailContentBuilder(TemplateEngine templateEngine) {\n+    public MailContentBuilder(ITemplateEngine templateEngine) {\n         this.templateEngine = templateEngine;\n     }\n \n     public abstract String generateMailContent(Map<String,Object> contextParams);\n \n-    public TemplateEngine getTemplateEngine() {\n+    public ITemplateEngine getTemplateEngine() {\n         return templateEngine;\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "017f0dabf248789240025acd8e1d4e04fef80049",
    "filename": "notifications/src/main/resources/application.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/resources/application.properties",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/main/resources/application.properties?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -18,8 +18,8 @@ notifiers.ANY_LEADERBOARD_CHANGE = [SLACK]\n #Email properties\n spring.mail.host=smtp.gmail.com\n spring.mail.port=587\n-spring.mail.username=\n-spring.mail.password=\n+spring.mail.username=dojotest2021\n+spring.mail.password=dojopass123\n spring.mail.properties.mail.smtp.auth=true\n spring.mail.properties.mail.smtp.starttls.enable=true\n spring.mail.mentors=mentor1@epam.com, mentor2@epam.com"
  },
  {
    "sha": "403897f82efe4976fe5369411bd09f396237143a",
    "filename": "notifications/src/test/java/com/dojo/notifications/service/LeaderboardNotifierServiceTest.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/test/java/com/dojo/notifications/service/LeaderboardNotifierServiceTest.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/test/java/com/dojo/notifications/service/LeaderboardNotifierServiceTest.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/test/java/com/dojo/notifications/service/LeaderboardNotifierServiceTest.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -0,0 +1,127 @@\n+package com.dojo.notifications.service;\n+\n+import com.dojo.notifications.contest.Contest;\n+import com.dojo.notifications.contest.enums.CommonNotificationsLevel;\n+import com.dojo.notifications.contest.enums.EventType;\n+import com.dojo.notifications.contest.enums.NotifierType;\n+import com.dojo.notifications.model.user.User;\n+import com.dojo.notifications.model.user.UserDetails;\n+import com.dojo.notifications.model.user.UserInfo;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class LeaderboardNotifierServiceTest {\n+\n+    private final String DUMMY_CONTEST_ID = \"149\";\n+    private final User FIRST_USER = new User(new UserInfo(1, \"FirstUser\", \"picture\"), 100);\n+    private final User SECOND_USER = new User(new UserInfo(2, \"SecondUser\", \"picture\"), 120);\n+    private final List<User> OLD_LEADERBOARD = Arrays.asList(FIRST_USER, SECOND_USER);\n+    private final List<User> NEW_LEADERBOARD = Arrays.asList(SECOND_USER, FIRST_USER);\n+    private final UserDetails FIRST_USER_DETAILS = new UserDetails();\n+    private final UserDetails SECOND_USER_DETAILS = new UserDetails();\n+    private final Map<NotifierType, CommonNotificationsLevel> leaderBoardNotificationsType = new ConcurrentHashMap<>();\n+\n+\n+    @Mock\n+    private LeaderboardService leaderboardService;\n+\n+    @Mock\n+    private Contest contest;\n+\n+    @Mock\n+    private UserDetailsService userDetailsService;\n+\n+    @Mock\n+    private NotificationService notificationService;\n+\n+\n+    private LeaderboardNotifierService leaderboardNotifierService;\n+\n+    @Before\n+    public void init() {\n+        when(contest.getContestId()).thenReturn(DUMMY_CONTEST_ID);\n+        when(notificationService.getNotificationServiceTypeMapping()).thenReturn(NotifierType.EMAIL);\n+\n+        leaderboardNotifierService = new LeaderboardNotifierService(leaderboardService, Collections.singletonList(notificationService), userDetailsService);\n+\n+        Map<String, List<User>> leaderboards = new ConcurrentHashMap<>();\n+        leaderboards.put(\"149\", OLD_LEADERBOARD);\n+        ReflectionTestUtils.setField(leaderboardNotifierService, \"leaderboards\", leaderboards);\n+\n+        leaderBoardNotificationsType.put(NotifierType.EMAIL, CommonNotificationsLevel.ON_ANY_LEADERBOARD_CHANGE);\n+    }\n+\n+    @Test\n+    public void noChangesLeaderBoardTest() {\n+        //Arrange\n+        when(leaderboardService.getNewLeaderboardSetup(contest)).thenReturn(OLD_LEADERBOARD);\n+\n+        //Act\n+        leaderboardNotifierService.lookForLeaderboardChanges(contest);\n+\n+        //Assert\n+        verify(leaderboardService, times(1)).getNewLeaderboardSetup(contest);\n+        verify(contest, times(2)).getContestId();\n+    }\n+\n+    @Test\n+    public void notifyPersonalChangesTest() {\n+        //Arrange\n+        when(leaderboardService.getNewLeaderboardSetup(contest)).thenReturn(NEW_LEADERBOARD);\n+        when(leaderboardService.determineEventType(NEW_LEADERBOARD, OLD_LEADERBOARD)).thenReturn(EventType.POSITION_CHANGES);\n+        when(leaderboardService.getUserDetails(NEW_LEADERBOARD, OLD_LEADERBOARD)).thenReturn(Arrays.asList(FIRST_USER_DETAILS, SECOND_USER_DETAILS));\n+        when(contest.getPersonalNotifiers()).thenReturn(Collections.singleton(NotifierType.EMAIL));\n+        when(contest.getCommonNotificationsLevel()).thenReturn(leaderBoardNotificationsType);\n+\n+        //Act\n+        leaderboardNotifierService.lookForLeaderboardChanges(contest);\n+\n+        //Assert\n+        verify(leaderboardService, times(1)).getNewLeaderboardSetup(contest);\n+        verify(leaderboardService, times(1)).determineEventType(NEW_LEADERBOARD, OLD_LEADERBOARD);\n+        verify(leaderboardService, times(1)).getUserDetails(NEW_LEADERBOARD, OLD_LEADERBOARD);\n+        verify(contest, times(2)).getContestId();\n+        verify(contest, times(1)).getCommonNotificationsLevel();\n+        verify(contest, times(2)).getPersonalNotifiers();\n+        verify(notificationService, times(2)).notify(any(), any(), any());\n+        verify(notificationService, times(1)).notify(any(), any());\n+    }\n+\n+    @Test\n+    public void notifyCommonChangesTest() {\n+        //Arrange\n+        when(leaderboardService.getNewLeaderboardSetup(contest)).thenReturn(NEW_LEADERBOARD);\n+        when(leaderboardService.determineEventType(NEW_LEADERBOARD, OLD_LEADERBOARD)).thenReturn(EventType.SCORE_CHANGES);\n+        when(contest.getPersonalNotifiers()).thenReturn(Collections.singleton(NotifierType.EMAIL));\n+        when(contest.getCommonNotificationsLevel()).thenReturn(leaderBoardNotificationsType);\n+\n+        //Act\n+        leaderboardNotifierService.lookForLeaderboardChanges(contest);\n+\n+        //Assert\n+        verify(leaderboardService, times(1)).getNewLeaderboardSetup(contest);\n+        verify(leaderboardService, times(1)).determineEventType(NEW_LEADERBOARD, OLD_LEADERBOARD);\n+        verify(contest, times(2)).getContestId();\n+        verify(contest, times(1)).getCommonNotificationsLevel();\n+        verify(notificationService, times(1)).notify(any(), any());\n+    }\n+\n+}"
  },
  {
    "sha": "48e1a5d2a27a85ec0bd3ac1df6d56ee9f6d3d2ac",
    "filename": "notifications/src/test/java/com/dojo/notifications/service/LeaderboardServiceTest.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/test/java/com/dojo/notifications/service/LeaderboardServiceTest.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/test/java/com/dojo/notifications/service/LeaderboardServiceTest.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/test/java/com/dojo/notifications/service/LeaderboardServiceTest.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -0,0 +1,141 @@\n+package com.dojo.notifications.service;\n+\n+\n+import com.dojo.notifications.configuration.Configuration;\n+import com.dojo.notifications.contest.Contest;\n+import com.dojo.notifications.contest.enums.EventType;\n+import com.dojo.notifications.model.user.User;\n+import com.dojo.notifications.model.user.UserDetails;\n+import com.dojo.notifications.model.user.UserInfo;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.http.HttpMethod;\n+\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class LeaderboardServiceTest {\n+\n+    private final String DUMMY_URL = \"http://localhost:8081/api/v1/codenjoy/leaderboard\";\n+    private final String CONTEST_ID = \"149\";\n+    private final User FIRST_USER = new User(new UserInfo(1, \"FirstUser\", \"picture\"), 100);\n+    private final User SECOND_USER = new User(new UserInfo(2, \"SecondUser\", \"picture\"), 120);\n+    private final List<User> OLD_LEADERBOARD = Arrays.asList(FIRST_USER, SECOND_USER);\n+    private final List<User> NEW_LEADERBOARD = Arrays.asList(SECOND_USER, FIRST_USER);\n+    private final UserDetails FIRST_USER_DETAILS = new UserDetails();\n+    private final UserDetails SECOND_USER_DETAILS = new UserDetails();\n+\n+\n+    @Mock\n+    private Configuration configuration;\n+\n+    @Mock\n+    private RestTemplate restTemplate;\n+\n+    @Mock\n+    private UserDetailsService userDetailsService;\n+\n+    @Mock\n+    private Contest contest;\n+\n+    @InjectMocks\n+    private LeaderboardService leaderboardService;\n+\n+\n+    @Test\n+    public void getNewLeaderboardSetupTest() {\n+        //Arrange\n+        when(contest.getContestId()).thenReturn(CONTEST_ID);\n+        when(configuration.getLeaderboardApi()).thenReturn(DUMMY_URL);\n+\n+        ParameterizedTypeReference<List<User>> obj = new ParameterizedTypeReference<List<User>>() {\n+        };\n+        when(restTemplate.exchange(anyString(), any(HttpMethod.class), any(), eq(obj)))\n+                .thenReturn(new ResponseEntity<>(OLD_LEADERBOARD, HttpStatus.ACCEPTED));\n+        ReflectionTestUtils.setField(leaderboardService, \"restTemplate\", restTemplate);\n+\n+        //Act\n+        List<User> actual = leaderboardService.getNewLeaderboardSetup(contest);\n+\n+        //Assert\n+        Assert.assertEquals(OLD_LEADERBOARD, actual);\n+\n+        verify(contest, times(1)).getContestId();\n+        verify(configuration, times(1)).getLeaderboardApi();\n+        verify(restTemplate, times(1)).exchange(anyString(), any(), any(), eq(obj));\n+    }\n+\n+    @Test\n+    public void determineEventTypePositionChangeTest() {\n+        //Arrange\n+\n+        //Act\n+        EventType actual = leaderboardService.determineEventType(NEW_LEADERBOARD, OLD_LEADERBOARD);\n+\n+        //Assert\n+        Assert.assertEquals(EventType.POSITION_CHANGES, actual);\n+    }\n+\n+    @Test\n+    public void determineEventTypeScoreChangeTest() {\n+        //Arrange\n+        User scoreChange = new User(new UserInfo(2, \"SecondUser\", \"picture\"), 420);\n+        List<User> newLeaderboard = Arrays.asList(FIRST_USER, scoreChange);\n+\n+        //Act\n+        EventType actual = leaderboardService.determineEventType(newLeaderboard, OLD_LEADERBOARD);\n+\n+        //Assert\n+        Assert.assertEquals(EventType.SCORE_CHANGES, actual);\n+    }\n+\n+    @Test\n+    public void determineEventTypeOtherChangeTest() {\n+        //Arrange\n+\n+        //Act\n+        EventType actual = leaderboardService.determineEventType(OLD_LEADERBOARD, OLD_LEADERBOARD);\n+\n+        //Assert\n+        Assert.assertEquals(EventType.OTHER_LEADERBOARD_CHANGE, actual);\n+    }\n+\n+\n+    @Test\n+    public void getUserDetailsTest() {\n+        //Arrange\n+        FIRST_USER_DETAILS.setId(1);\n+        SECOND_USER_DETAILS.setId(2);\n+        List<UserDetails> expected = Arrays.asList(FIRST_USER_DETAILS, SECOND_USER_DETAILS);\n+\n+        when(userDetailsService.getUserDetails(1)).thenReturn(FIRST_USER_DETAILS);\n+        when(userDetailsService.getUserDetails(2)).thenReturn(SECOND_USER_DETAILS);\n+\n+        //Act\n+        List<UserDetails> actual = leaderboardService.getUserDetails(NEW_LEADERBOARD, OLD_LEADERBOARD);\n+\n+        //Assert\n+        Assert.assertEquals(expected, actual);\n+        verify(userDetailsService, times(2)).getUserDetails(anyLong());\n+    }\n+\n+}"
  },
  {
    "sha": "224fafcf2f1bdd2e3ee84455653d7b9b11ce121f",
    "filename": "notifications/src/test/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilderTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/banica-org/dojo/blob/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/test/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilderTest.java",
    "raw_url": "https://github.com/banica-org/dojo/raw/f09ccfa7a3ac506736187dbb84bec951aa94783b/notifications/src/test/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilderTest.java",
    "contents_url": "https://api.github.com/repos/banica-org/dojo/contents/notifications/src/test/java/com/dojo/notifications/service/emailNotifier/LeaderboardMailMessageBuilderTest.java?ref=f09ccfa7a3ac506736187dbb84bec951aa94783b",
    "patch": "@@ -0,0 +1,49 @@\n+package com.dojo.notifications.service.emailNotifier;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.thymeleaf.ITemplateEngine;\n+\n+import org.thymeleaf.context.Context;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class LeaderboardMailMessageBuilderTest {\n+\n+    private final String EXPECTED_PROCESS_RETURN_TYPE = \"PROCESSED\";\n+\n+    @Mock\n+    private ITemplateEngine templateEngine;\n+\n+    @InjectMocks\n+    private LeaderboardMailMessageBuilder leaderboardMailMessageBuilder;\n+\n+    @Test\n+    public void generateMailContentTest() {\n+        //Arrange\n+        Map<String, Object> contextParams = new HashMap<>();\n+        contextParams.put(EXPECTED_PROCESS_RETURN_TYPE, 20);\n+\n+        when(templateEngine.process(eq(\"mailTemplate\"), any(Context.class))).thenReturn(EXPECTED_PROCESS_RETURN_TYPE);\n+\n+        //Act\n+        String actual = leaderboardMailMessageBuilder.generateMailContent(contextParams);\n+\n+        //Assert\n+        Assert.assertEquals(EXPECTED_PROCESS_RETURN_TYPE, actual);\n+        verify(templateEngine, times(1)).process(eq(\"mailTemplate\"), any(Context.class));\n+    }\n+}"
  }
]
