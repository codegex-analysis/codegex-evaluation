[
  {
    "sha": "03ec474ca04af173f3920e583e6c545bc7972181",
    "filename": "xrpl4j-client/src/main/java/org/xrpl/xrpl4j/client/XrplClient.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-client/src/main/java/org/xrpl/xrpl4j/client/XrplClient.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-client/src/main/java/org/xrpl/xrpl4j/client/XrplClient.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-client/src/main/java/org/xrpl/xrpl4j/client/XrplClient.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -559,4 +559,7 @@ private Transaction addSignature(\n \n   }\n \n+  public JsonRpcClient getJsonRpcClient() {\n+    return jsonRpcClient;\n+  }\n }"
  },
  {
    "sha": "62a181a8c408d8e2d17d9e84bc2051a6af1c3d60",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/DerivedKeysSignatureService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/DerivedKeysSignatureService.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/DerivedKeysSignatureService.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/DerivedKeysSignatureService.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -110,6 +110,13 @@ public SignedTransaction sign(\n     return this.keyMetadataLoadingCache.get(keyMetadata).sign(keyMetadata, transaction);\n   }\n \n+  @Override\n+  public Signature signWithBehavior(KeyMetadata keyMetadata, Transaction transaction, SigningBehavior behavior) {\n+    Objects.requireNonNull(keyMetadata);\n+    Objects.requireNonNull(transaction);\n+    return this.keyMetadataLoadingCache.get(keyMetadata).signWithBehavior(keyMetadata, transaction, behavior);\n+  }\n+\n   @Override\n   public KeyStoreType keyStoreType() {\n     return DERIVED_SERVER_SECRET;"
  },
  {
    "sha": "4554a8cd5158439323474a534240dae5017bf924",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/SingleKeySignatureService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/SingleKeySignatureService.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/SingleKeySignatureService.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-bouncycastle/src/main/java/org/xrpl/xrpl4j/crypto/signing/SingleKeySignatureService.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -16,8 +16,10 @@\n import org.xrpl.xrpl4j.crypto.KeyStoreType;\n import org.xrpl.xrpl4j.crypto.PrivateKey;\n import org.xrpl.xrpl4j.crypto.PublicKey;\n+import org.xrpl.xrpl4j.keypairs.DefaultKeyPairService;\n import org.xrpl.xrpl4j.keypairs.EcDsaSignature;\n import org.xrpl.xrpl4j.keypairs.HashUtils;\n+import org.xrpl.xrpl4j.keypairs.KeyPairService;\n import org.xrpl.xrpl4j.keypairs.Secp256k1;\n import org.xrpl.xrpl4j.model.jackson.ObjectMapperFactory;\n \n@@ -50,6 +52,7 @@ public SingleKeySignatureService(final PrivateKey privateKey) {\n       new SignatureUtils(ObjectMapperFactory.create(), new XrplBinaryCodec()),\n       new Ed25519Signer(),\n       new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest())),\n+      DefaultKeyPairService.getInstance(),\n       privateKey\n     );\n   }\n@@ -60,15 +63,17 @@ public SingleKeySignatureService(final PrivateKey privateKey) {\n    * @param signatureUtils An {@link SignatureUtils}.\n    * @param ed25519Signer  An {@link Ed25519Signer}.\n    * @param ecdsaSigner    An {@link ECDSASigner}.\n+   * @param keyPairService A {@link KeyPairService}.\n    * @param privateKey     A {@link PrivateKey} for obtain keys from.\n    */\n   public SingleKeySignatureService(\n     final SignatureUtils signatureUtils,\n     final Ed25519Signer ed25519Signer,\n     final ECDSASigner ecdsaSigner,\n+    final KeyPairService keyPairService,\n     final PrivateKey privateKey\n-  ) {\n-    super(KEY_STORE_TYPE, signatureUtils);\n+    ) {\n+    super(KEY_STORE_TYPE, signatureUtils, keyPairService);\n     this.ed25519Signer = Objects.requireNonNull(ed25519Signer);\n     this.ecdsaSigner = Objects.requireNonNull(ecdsaSigner);\n     this.privateKey = Objects.requireNonNull(privateKey);"
  },
  {
    "sha": "e37427385305585e7daf53aa6b4cfe25f37171e6",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureService.java",
    "status": "modified",
    "additions": 17,
    "deletions": 6,
    "changes": 23,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureService.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureService.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureService.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -6,6 +6,7 @@\n import org.xrpl.xrpl4j.crypto.KeyMetadata;\n import org.xrpl.xrpl4j.crypto.KeyStoreType;\n import org.xrpl.xrpl4j.crypto.PublicKey;\n+import org.xrpl.xrpl4j.keypairs.KeyPairService;\n import org.xrpl.xrpl4j.model.transactions.Transaction;\n \n import java.util.Objects;\n@@ -24,18 +25,21 @@\n \n   private final SignatureUtils signatureUtils;\n \n+  private final KeyPairService keyPairService;\n+\n   /**\n    * Required-args Constructor.\n-   *\n    * @param keyStoreType   The {@link KeyStoreType} for this service.\n    * @param signatureUtils An {@link SignatureUtils} for help with signing.\n+   * @param keyPairService\n    */\n   public AbstractSignatureService(\n     final KeyStoreType keyStoreType,\n-    final SignatureUtils signatureUtils\n-  ) {\n+    final SignatureUtils signatureUtils,\n+    final KeyPairService keyPairService) {\n     this.keyStoreType = Objects.requireNonNull(keyStoreType);\n     this.signatureUtils = Objects.requireNonNull(signatureUtils);\n+    this.keyPairService = keyPairService;\n   }\n \n   @Override\n@@ -45,11 +49,19 @@ public final KeyStoreType keyStoreType() {\n \n   @Override\n   public SignedTransaction sign(final KeyMetadata keyMetadata, final Transaction transaction) {\n+    Signature signature = this.signWithBehavior(keyMetadata, transaction, SigningBehavior.SINGLE);\n+    return this.signatureUtils.addSignatureToTransaction(transaction, signature);\n+  }\n+\n+  @Override\n+  public Signature signWithBehavior(final KeyMetadata keyMetadata, final Transaction transaction, final SigningBehavior behavior) {\n     Objects.requireNonNull(keyMetadata);\n     Objects.requireNonNull(transaction);\n \n-    final UnsignedByteArray signableTransactionBytes = this.signatureUtils.toSignableBytes(transaction);\n     final PublicKey publicKey = this.getPublicKey(keyMetadata);\n+    final UnsignedByteArray signableTransactionBytes = behavior == SigningBehavior.SINGLE ?\n+      this.signatureUtils.toSignableBytes(transaction) :\n+      this.signatureUtils.toMultiSignableBytes(transaction, keyPairService.deriveAddress(publicKey.value()).value());\n \n     final Signature signature;\n     switch (publicKey.versionType()) {\n@@ -66,8 +78,7 @@ public SignedTransaction sign(final KeyMetadata keyMetadata, final Transaction t\n       }\n     }\n \n-    // Add sig to original transaction and return\n-    return this.signatureUtils.addSignatureToTransaction(transaction, signature);\n+    return signature;\n   }\n \n   @Override"
  },
  {
    "sha": "5cc47c9011c30def2aed82c67e124b798c5c7306",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SignatureUtils.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SignatureUtils.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SignatureUtils.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SignatureUtils.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -65,6 +65,17 @@ public UnsignedByteArray toSignableBytes(final Transaction transaction) {\n     }\n   }\n \n+  public UnsignedByteArray toMultiSignableBytes(final Transaction transaction, String signerAddress) {\n+    Objects.requireNonNull(transaction);\n+    try {\n+      final String unsignedJson = objectMapper.writeValueAsString(transaction);\n+      final String unsignedBinaryHex = binaryCodec.encodeForMultiSigning(unsignedJson, signerAddress);\n+      return UnsignedByteArray.fromHex(unsignedBinaryHex);\n+    } catch (JsonProcessingException e) {\n+      throw new RuntimeException(e.getMessage(), e);\n+    }\n+  }\n+\n   /**\n    * Add {@link Transaction#transactionSignature()} to the given unsignedTransaction. Because {@link Transaction} is not\n    * an Immutable object, it does not have a generated builder like its subclasses do. Thus, this method needs to"
  },
  {
    "sha": "a51934b9ad18e2fe3ae324154f453a0e5a4cb48b",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SigningBehavior.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SigningBehavior.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SigningBehavior.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/SigningBehavior.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -0,0 +1,6 @@\n+package org.xrpl.xrpl4j.crypto.signing;\n+\n+public enum SigningBehavior {\n+  SINGLE,\n+  MULTI\n+}"
  },
  {
    "sha": "8a57bd78115d9c60635590c0b1abebca4caa039a",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/TransactionSigner.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/TransactionSigner.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/TransactionSigner.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/main/java/org/xrpl/xrpl4j/crypto/signing/TransactionSigner.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -20,4 +20,6 @@\n    *   effect a transaction.\n    */\n   SignedTransaction sign(KeyMetadata keyMetadata, Transaction transaction);\n+\n+  Signature signWithBehavior(KeyMetadata keyMetadata, Transaction transaction, SigningBehavior behavior);\n }"
  },
  {
    "sha": "27c4f1d3886c401a681a2d6cb118da9ca6da3549",
    "filename": "xrpl4j-crypto-parent/xrpl4j-crypto-core/src/test/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureServiceTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/test/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureServiceTest.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/test/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureServiceTest.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-crypto-parent/xrpl4j-crypto-core/src/test/java/org/xrpl/xrpl4j/crypto/signing/AbstractSignatureServiceTest.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -18,6 +18,7 @@\n import org.xrpl.xrpl4j.crypto.KeyStoreType;\n import org.xrpl.xrpl4j.crypto.PrivateKey;\n import org.xrpl.xrpl4j.crypto.PublicKey;\n+import org.xrpl.xrpl4j.keypairs.DefaultKeyPairService;\n import org.xrpl.xrpl4j.model.transactions.Transaction;\n \n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -60,7 +61,7 @@ public void setUp() {\n     when(transactionWithSignatureMock.unsignedTransaction()).thenReturn(transactionMock);\n     when(signatureUtilsMock.toSignableBytes(any())).thenReturn(UnsignedByteArray.empty());\n \n-    this.signatureService = new AbstractSignatureService(KeyStoreType.DERIVED_SERVER_SECRET, signatureUtilsMock) {\n+    this.signatureService = new AbstractSignatureService(KeyStoreType.DERIVED_SERVER_SECRET, signatureUtilsMock, DefaultKeyPairService.getInstance()) {\n       @Override\n       public PublicKey getPublicKey(KeyMetadata keyMetadata) {\n         return publicKeyMock;\n@@ -251,4 +252,4 @@ public void ecDsaVerify() {\n     assertThat(ed25519VerifyCalled.get()).isFalse();\n     verifyNoMoreInteractions(signatureUtilsMock);\n   }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "d141c3b19409853429af89dcf3ace8f097cc117c",
    "filename": "xrpl4j-model/pom.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/pom.xml",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/pom.xml",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-model/pom.xml?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -78,6 +78,10 @@\n       <artifactId>jsonassert</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n   </dependencies>\n \n </project>"
  },
  {
    "sha": "3bcbaceed724e35c6d9744cb5a758ea3313507fc",
    "filename": "xrpl4j-model/src/main/java/org/xrpl/xrpl4j/model/client/server/ServerInfo.java",
    "status": "modified",
    "additions": 106,
    "deletions": 38,
    "changes": 144,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/src/main/java/org/xrpl/xrpl4j/model/client/server/ServerInfo.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/src/main/java/org/xrpl/xrpl4j/model/client/server/ServerInfo.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-model/src/main/java/org/xrpl/xrpl4j/model/client/server/ServerInfo.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -1,16 +1,24 @@\n package org.xrpl.xrpl4j.model.client.server;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.google.common.collect.Range;\n import com.google.common.primitives.UnsignedInteger;\n import com.google.common.primitives.UnsignedLong;\n import org.immutables.value.Value;\n+import org.immutables.value.Value.Derived;\n import org.immutables.value.Value.Immutable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.time.ZonedDateTime;\n+import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n  * Maps the fields inside the \"info\" section of the \"server_info\" API call.\n@@ -20,6 +28,8 @@\n @JsonDeserialize(as = ImmutableServerInfo.class)\n public interface ServerInfo {\n \n+  Logger LOGGER = LoggerFactory.getLogger(ServerInfo.class);\n+\n   static ImmutableServerInfo.Builder builder() {\n     return ImmutableServerInfo.builder();\n   }\n@@ -44,49 +54,108 @@ default boolean amendmentBlocked() {\n   String buildVersion();\n \n   /**\n-   * Information on the most recently closed ledger that has not been validated by consensus. If the most\n-   * recently validated ledger is available, the response omits this field and includes {@link #validatedLedger()}\n-   * instead.\n+   * Information on the most recently closed ledger that has not been validated by consensus. If the most recently\n+   * validated ledger is available, the response omits this field and includes {@link #validatedLedger()} instead.\n    *\n-   * @return An optionally-present {@link ServerInfoLedger} containing information about the server's view of the\n-   *     most recently closed ledger.\n+   * @return An optionally-present {@link ServerInfoLedger} containing information about the server's view of the most\n+   *   recently closed ledger.\n    */\n   @JsonProperty(\"closed_ledger\")\n   Optional<ServerInfoLedger> closedLedger();\n \n   /**\n-   * Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database.\n-   * This may be a disjoint sequence such as {@code 24900901-24900984,24901116-24901158}.\n-   * If the server does not have any complete ledgers (for example, it recently started syncing with the network),\n-   * this will be an empty {@link String}.\n+   * Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database. This\n+   * may be a disjoint sequence such as {@code 24900901-24900984,24901116-24901158}. If the server does not have any\n+   * complete ledgers (for example, it recently started syncing with the network), this will be an empty {@link\n+   * String}.\n    *\n    * @return A {@link String} representing a range of ledger sequences.\n    */\n   @JsonProperty(\"complete_ledgers\")\n   String completeLedgers();\n \n+  @Derived\n+  @JsonIgnore\n+  default List<Range<UnsignedLong>> completeLedgerRanges() {\n+    // Split completeLedgers by comma...\n+    return Stream.of(completeLedgers().split(\",\"))\n+      .map(String::trim)\n+      .filter($ -> !$.equals(\"empty\")) // <-- `empty` is a valid value for completed ledgers.\n+      .map(range -> {\n+        final String[] parts = range.split(\"-\");\n+        if (parts.length == 1) {\n+          try {\n+            return Range.singleton(UnsignedLong.valueOf(parts[0]));\n+          } catch (Exception e) {\n+            return null; // <-- filtered out of the ultimate List below.\n+          }\n+        }\n+        if (parts.length == 2) {\n+          final UnsignedLong lower;\n+          final UnsignedLong upper;\n+          try {\n+            lower = UnsignedLong.valueOf(parts[0]);\n+          } catch (Exception e) {\n+            LOGGER.warn(\"Unable to parse valid lower bound number (ignoring range).\", e);\n+            return null; // <-- filtered out of the ultimate List below.\n+          }\n+\n+          try {\n+            upper = UnsignedLong.valueOf(parts[1]);\n+          } catch (Exception e) {\n+            LOGGER.warn(\"Unable to parse valid upper bound number (ignoring range).\", e);\n+            return null; // <-- filtered out of the ultimate List below.\n+          }\n+          return Range.closed(lower, upper);\n+        } else {\n+          LOGGER.warn(\"Range had too many dashes (ignoring range)\");\n+          return null; // <-- filtered out of the ultimate List below.\n+        }\n+      })\n+      .filter($ -> $ != null)\n+      .collect(Collectors.toList());\n+  }\n+\n   /**\n-   * On an admin request, returns the hostname of the server running the rippled instance;\n-   * otherwise, returns a single RFC-1751 word based on the node public key.\n+   * Determines if the supplied {@code ledgerIndex} exists on the rippled server by inspecting {@link\n+   * #completeLedgers()}.\n+   *\n+   * @param ledgerIndex An {@link UnsignedLong} representing a particular ledger index.\n+   *\n+   * @return {@code true} if the rippled server includes {@code ledgerIndex} in its local database; {@code false}\n+   *   otherwise.\n+   */\n+  @Derived\n+  @JsonIgnore\n+  default boolean isLedgerInCompleteLedgers(final UnsignedLong ledgerIndex) {\n+    return this.completeLedgerRanges().stream()\n+      .filter(range -> range.contains(ledgerIndex))\n+      .findFirst()\n+      .isPresent();\n+  }\n+\n+  /**\n+   * On an admin request, returns the hostname of the server running the rippled instance; otherwise, returns a single\n+   * RFC-1751 word based on the node public key.\n    *\n    * @return A {@link String} containing the host name of the serverk.\n    */\n   @JsonProperty(\"hostid\")\n   String hostId();\n \n   /**\n-   * Amount of time spent waiting for I/O operations, in milliseconds. If this number is not very, very low,\n-   * then the rippled server is probably having serious load issues.\n+   * Amount of time spent waiting for I/O operations, in milliseconds. If this number is not very, very low, then the\n+   * rippled server is probably having serious load issues.\n    *\n    * @return An {@link UnsignedLong} representing the I/O latency.\n    */\n   @JsonProperty(\"io_latency_ms\")\n   UnsignedLong ioLatencyMs();\n \n   /**\n-   * The number of times (since starting up) that this server has had over 250 transactions waiting to be processed\n-   * at once. A large number here may mean that your server is unable to handle the transaction load of the\n-   * XRP Ledger network. For detailed recommendations of future-proof server specifications, see\n+   * The number of times (since starting up) that this server has had over 250 transactions waiting to be processed at\n+   * once. A large number here may mean that your server is unable to handle the transaction load of the XRP Ledger\n+   * network. For detailed recommendations of future-proof server specifications, see\n    * <a href=\"https://xrpl.org/capacity-planning.html\">Capacity Planning</a>.\n    *\n    * @return A {@link String}.\n@@ -112,11 +181,11 @@ default boolean amendmentBlocked() {\n   Optional<ServerInfoLoad> load();\n \n   /**\n-   * The load-scaled open ledger transaction cost the server is currently enforcing, as a multiplier on the\n-   * base transaction cost. For example, at 1000 load factor and a reference transaction cost of 10 drops of XRP,\n-   * the load-scaled transaction cost is 10,000 drops (0.01 XRP). The load factor is determined by the highest\n-   * of the individual server's load factor, the cluster's load factor, the open ledger cost and the overall\n-   * network's load factor.\n+   * The load-scaled open ledger transaction cost the server is currently enforcing, as a multiplier on the base\n+   * transaction cost. For example, at 1000 load factor and a reference transaction cost of 10 drops of XRP, the\n+   * load-scaled transaction cost is 10,000 drops (0.01 XRP). The load factor is determined by the highest of the\n+   * individual server's load factor, the cluster's load factor, the open ledger cost and the overall network's load\n+   * factor.\n    *\n    * @return An {@link UnsignedInteger} representing the load factor.\n    */\n@@ -132,8 +201,8 @@ default boolean amendmentBlocked() {\n   Optional<UnsignedInteger> loadFactorLocal();\n \n   /**\n-   * Current multiplier to the transaction cost being used by the rest of the network\n-   * (estimated from other servers' reported load values).\n+   * Current multiplier to the transaction cost being used by the rest of the network (estimated from other servers'\n+   * reported load values).\n    *\n    * @return An optionally-present {@link UnsignedInteger} representing the network load factor.\n    */\n@@ -157,8 +226,8 @@ default boolean amendmentBlocked() {\n   Optional<UnsignedInteger> loadFactorFeeEscalation();\n \n   /**\n-   * The current multiplier to the transaction cost that a transaction must pay to get into the queue,\n-   * if the queue is full.\n+   * The current multiplier to the transaction cost that a transaction must pay to get into the queue, if the queue is\n+   * full.\n    *\n    * @return An optionally-present {@link UnsignedInteger} representing the queue load factor.\n    */\n@@ -182,18 +251,18 @@ default boolean amendmentBlocked() {\n \n   /**\n    * Public key used to verify this server for peer-to-peer communications. This node key pair is automatically\n-   * generated by the server the first time it starts up. (If deleted, the server can create a new pair of keys.)\n-   * You can set a persistent value in the config file using the {@code [node_seed]} config option, which is useful\n-   * for clustering.\n+   * generated by the server the first time it starts up. (If deleted, the server can create a new pair of keys.) You\n+   * can set a persistent value in the config file using the {@code [node_seed]} config option, which is useful for\n+   * clustering.\n    *\n    * @return A {@link String} containing the node's public key.\n    */\n   @JsonProperty(\"pubkey_node\")\n   String publicKeyNode();\n \n   /**\n-   * (Admin only) Public key used by this node to sign ledger validations. This validation key pair is derived\n-   * from the {@code [validator_token]} or {@code [validation_seed]} config field.\n+   * (Admin only) Public key used by this node to sign ledger validations. This validation key pair is derived from the\n+   * {@code [validator_token]} or {@code [validation_seed]} config field.\n    *\n    * @return A {@link String} containing the validator's public key.\n    */\n@@ -234,31 +303,30 @@ default boolean amendmentBlocked() {\n   UnsignedLong upTime();\n \n   /**\n-   * Information about the most recent fully-validated ledger. If the most recent validated ledger is not available,\n-   * the response omits this field and includes {@link #closedLedger()} instead.\n+   * Information about the most recent fully-validated ledger. If the most recent validated ledger is not available, the\n+   * response omits this field and includes {@link #closedLedger()} instead.\n    *\n    * @return An optionally-present {@link ServerInfoLedger} representing the latest validated ledger.\n    */\n   @JsonProperty(\"validated_ledger\")\n   Optional<ServerInfoLedger> validatedLedger();\n \n   /**\n-   * Minimum number of trusted validations required to validate a ledger version. Some circumstances may cause\n-   * the server to require more validations.\n+   * Minimum number of trusted validations required to validate a ledger version. Some circumstances may cause the\n+   * server to require more validations.\n    *\n    * @return An {@link UnsignedInteger} representing the quorum.\n    */\n   @JsonProperty(\"validation_quorum\")\n   UnsignedInteger validationQuorum();\n \n   /**\n-   * (Admin only) Either the human readable time, in UTC, when the current validator list will expire,\n-   * the string {@code \"unknown\"} if the server has yet to load a published validator list or the string\n-   * {@code \"never\"} if the server uses a static validator list.\n+   * (Admin only) Either the human readable time, in UTC, when the current validator list will expire, the string {@code\n+   * \"unknown\"} if the server has yet to load a published validator list or the string {@code \"never\"} if the server\n+   * uses a static validator list.\n    *\n    * @return An optionally-present {@link String} containing the validator expiration list.\n    */\n   @JsonProperty(\"validator_list_expires\")\n   Optional<String> validatorListExpires();\n-\n }"
  },
  {
    "sha": "9acb778f1ed392c215233f5fec284e1319d1ae2f",
    "filename": "xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/AbstractJsonTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/AbstractJsonTest.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/AbstractJsonTest.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/AbstractJsonTest.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -6,6 +6,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.json.JSONException;\n import org.junit.Before;\n+import org.junit.jupiter.api.BeforeEach;\n import org.skyscreamer.jsonassert.JSONAssert;\n import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.xrpl.xrpl4j.model.client.XrplRequestParams;\n@@ -19,10 +20,16 @@\n   protected ObjectMapper objectMapper;\n \n   @Before\n+  @Deprecated // Will be removed once Junit4 is removed.\n   public void setUp() {\n     objectMapper = ObjectMapperFactory.create();\n   }\n \n+  @BeforeEach\n+  public void setUpJunit5() {\n+    objectMapper = ObjectMapperFactory.create();\n+  }\n+\n   protected void assertCanSerializeAndDeserialize(\n       Transaction transaction,\n       String json"
  },
  {
    "sha": "9365b5d19521b49bf8cb8c36376e8e3bb1a29e61",
    "filename": "xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultJsonTests.java",
    "status": "removed",
    "additions": 0,
    "deletions": 174,
    "changes": 174,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/b403348a1a3d9c4833449cb8abc0d8d35bdc00df/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultJsonTests.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/b403348a1a3d9c4833449cb8abc0d8d35bdc00df/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultJsonTests.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultJsonTests.java?ref=b403348a1a3d9c4833449cb8abc0d8d35bdc00df",
    "patch": "@@ -1,174 +0,0 @@\n-package org.xrpl.xrpl4j.model.client.server;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.google.common.primitives.UnsignedInteger;\n-import com.google.common.primitives.UnsignedLong;\n-import org.json.JSONException;\n-import org.junit.Test;\n-import org.xrpl.xrpl4j.model.AbstractJsonTest;\n-import org.xrpl.xrpl4j.model.client.common.LedgerIndex;\n-import org.xrpl.xrpl4j.model.transactions.Hash256;\n-\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.time.format.DateTimeFormatter;\n-\n-public class ServerInfoResultJsonTests extends AbstractJsonTest {\n-\n-  @Test\n-  public void testJson() throws JsonProcessingException, JSONException {\n-    ServerInfoResult result = ServerInfoResult.builder()\n-        .status(\"success\")\n-        .info(ServerInfo.builder()\n-            .buildVersion(\"1.5.0-rc1\")\n-            .completeLedgers(\"54300020-54300729\")\n-            .hostId(\"trace\")\n-            .ioLatencyMs(UnsignedLong.ONE)\n-            .jqTransOverflow(\"0\")\n-            .lastClose(ServerInfoLastClose.builder()\n-                .convergeTimeSeconds(2d)\n-                .proposers(UnsignedInteger.valueOf(34))\n-                .build())\n-            .load(ServerInfoLoad.builder()\n-                .addJobTypes(\n-                    JobType.builder()\n-                        .jobType(\"ledgerRequest\")\n-                        .peakTime(UnsignedInteger.valueOf(4))\n-                        .perSecond(UnsignedInteger.valueOf(4))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"untrustedProposal\")\n-                        .peakTime(UnsignedInteger.valueOf(5))\n-                        .perSecond(UnsignedInteger.valueOf(43))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"ledgerData\")\n-                        .peakTime(UnsignedInteger.valueOf(337))\n-                        .averageTime(UnsignedInteger.valueOf(14))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"clientCommand\")\n-                        .inProgress(UnsignedInteger.valueOf(1))\n-                        .perSecond(UnsignedInteger.valueOf(9))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"transaction\")\n-                        .peakTime(UnsignedInteger.valueOf(8))\n-                        .perSecond(UnsignedInteger.valueOf(8))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"batch\")\n-                        .peakTime(UnsignedInteger.valueOf(5))\n-                        .perSecond(UnsignedInteger.valueOf(6))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"advanceLedger\")\n-                        .peakTime(UnsignedInteger.valueOf(96))\n-                        .averageTime(UnsignedInteger.valueOf(6))\n-                        .build(),\n-                    JobType.builder()\n-                        .jobType(\"fetchTxnData\")\n-                        .perSecond(UnsignedInteger.valueOf(14))\n-                        .build()\n-                )\n-                .threads(UnsignedLong.valueOf(6))\n-                .build())\n-            .loadFactor(UnsignedInteger.ONE)\n-            .peers(UnsignedInteger.valueOf(21))\n-            .publicKeyNode(\"n9KUjqxCr5FKThSNXdzb7oqN8rYwScB2dUnNqxQxbEA17JkaWy5x\")\n-            .publicKeyValidator(\"nHBk5DPexBjinXV8qHn7SEKzoxh2W92FxSbNTPgGtQYBzEF4msn9\")\n-            .serverState(\"proposing\")\n-            .serverStateDurationUs(\"1850969666\")\n-            .time(ZonedDateTime.parse(\"2020-Mar-24 01:27:42.147330 UTC\",\n-                DateTimeFormatter.ofPattern(\"yyyy-MMM-dd HH:mm:ss.SSSSSS z\")).withZoneSameLocal(ZoneId.of(\"UTC\")))\n-            .upTime(UnsignedLong.valueOf(1984))\n-            .validatedLedger(ServerInfoLedger.builder()\n-                .age(UnsignedInteger.valueOf(2))\n-                .hash(Hash256.of(\"0D2D30837E05995AAAAA117294BB45AB0699AB1219605FFD23318E050C7166E9\"))\n-                .reserveBaseXrp(UnsignedInteger.valueOf(20))\n-                .reserveIncXrp(UnsignedInteger.valueOf(5))\n-                .sequence(LedgerIndex.of(UnsignedLong.valueOf(54300729)))\n-                .build())\n-            .validationQuorum(UnsignedInteger.valueOf(29))\n-            .build())\n-        .build();\n-\n-    String json = \"{\\n\" +\n-        \"    \\\"info\\\": {\\n\" +\n-        \"      \\\"build_version\\\": \\\"1.5.0-rc1\\\",\\n\" +\n-        \"      \\\"amendment_blocked\\\": false,\\n\" +\n-        \"      \\\"complete_ledgers\\\": \\\"54300020-54300729\\\",\\n\" +\n-        \"      \\\"hostid\\\": \\\"trace\\\",\\n\" +\n-        \"      \\\"io_latency_ms\\\": 1,\\n\" +\n-        \"      \\\"jq_trans_overflow\\\": \\\"0\\\",\\n\" +\n-        \"      \\\"last_close\\\": {\\n\" +\n-        \"        \\\"converge_time_s\\\": 2,\\n\" +\n-        \"        \\\"proposers\\\": 34\\n\" +\n-        \"      },\\n\" +\n-        \"      \\\"load\\\": {\\n\" +\n-        \"        \\\"job_types\\\": [\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"job_type\\\": \\\"ledgerRequest\\\",\\n\" +\n-        \"            \\\"peak_time\\\": 4,\\n\" +\n-        \"            \\\"per_second\\\": 4\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"job_type\\\": \\\"untrustedProposal\\\",\\n\" +\n-        \"            \\\"peak_time\\\": 5,\\n\" +\n-        \"            \\\"per_second\\\": 43\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"avg_time\\\": 14,\\n\" +\n-        \"            \\\"job_type\\\": \\\"ledgerData\\\",\\n\" +\n-        \"            \\\"peak_time\\\": 337\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"in_progress\\\": 1,\\n\" +\n-        \"            \\\"job_type\\\": \\\"clientCommand\\\",\\n\" +\n-        \"            \\\"per_second\\\": 9\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"job_type\\\": \\\"transaction\\\",\\n\" +\n-        \"            \\\"peak_time\\\": 8,\\n\" +\n-        \"            \\\"per_second\\\": 8\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"job_type\\\": \\\"batch\\\",\\n\" +\n-        \"            \\\"peak_time\\\": 5,\\n\" +\n-        \"            \\\"per_second\\\": 6\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"avg_time\\\": 6,\\n\" +\n-        \"            \\\"job_type\\\": \\\"advanceLedger\\\",\\n\" +\n-        \"            \\\"peak_time\\\": 96\\n\" +\n-        \"          },\\n\" +\n-        \"          {\\n\" +\n-        \"            \\\"job_type\\\": \\\"fetchTxnData\\\",\\n\" +\n-        \"            \\\"per_second\\\": 14\\n\" +\n-        \"          }\" +\n-        \"        ],\\n\" +\n-        \"        \\\"threads\\\": 6\\n\" +\n-        \"      },\\n\" +\n-        \"      \\\"load_factor\\\": 1,\\n\" +\n-        \"      \\\"peers\\\": 21,\\n\" +\n-        \"      \\\"pubkey_node\\\": \\\"n9KUjqxCr5FKThSNXdzb7oqN8rYwScB2dUnNqxQxbEA17JkaWy5x\\\",\\n\" +\n-        \"      \\\"pubkey_validator\\\": \\\"nHBk5DPexBjinXV8qHn7SEKzoxh2W92FxSbNTPgGtQYBzEF4msn9\\\",\\n\" +\n-        \"      \\\"server_state\\\": \\\"proposing\\\",\\n\" +\n-        \"      \\\"server_state_duration_us\\\": \\\"1850969666\\\",\\n\" +\n-        \"      \\\"time\\\": \\\"2020-Mar-24 01:27:42.147330 UTC\\\",\\n\" +\n-        \"      \\\"uptime\\\": 1984,\\n\" +\n-        \"      \\\"validated_ledger\\\": {\\n\" +\n-        \"        \\\"age\\\": 2,\\n\" +\n-        \"        \\\"hash\\\": \\\"0D2D30837E05995AAAAA117294BB45AB0699AB1219605FFD23318E050C7166E9\\\",\\n\" +\n-        \"        \\\"reserve_base_xrp\\\": 20,\\n\" +\n-        \"        \\\"reserve_inc_xrp\\\": 5,\\n\" +\n-        \"        \\\"seq\\\": 54300729\\n\" +\n-        \"      },\\n\" +\n-        \"      \\\"validation_quorum\\\": 29\\n\" +\n-        \"    },\\n\" +\n-        \"    \\\"status\\\": \\\"success\\\"\\n\" +\n-        \"  }\";\n-\n-    assertCanSerializeAndDeserialize(result, json);\n-  }\n-}"
  },
  {
    "sha": "9aed70309ea6ee18bda21d4d4b7b3573912a7a8d",
    "filename": "xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultTests.java",
    "status": "added",
    "additions": 357,
    "deletions": 0,
    "changes": 357,
    "blob_url": "https://github.com/XRPLF/xrpl4j/blob/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultTests.java",
    "raw_url": "https://github.com/XRPLF/xrpl4j/raw/060b50821d523a30207435ea0c6dc9df3b540e63/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultTests.java",
    "contents_url": "https://api.github.com/repos/XRPLF/xrpl4j/contents/xrpl4j-model/src/test/java/org/xrpl/xrpl4j/model/client/server/ServerInfoResultTests.java?ref=060b50821d523a30207435ea0c6dc9df3b540e63",
    "patch": "@@ -0,0 +1,357 @@\n+package org.xrpl.xrpl4j.model.client.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.common.collect.Range;\n+import com.google.common.primitives.UnsignedInteger;\n+import com.google.common.primitives.UnsignedLong;\n+import org.json.JSONException;\n+import org.junit.jupiter.api.Test;\n+import org.xrpl.xrpl4j.model.AbstractJsonTest;\n+import org.xrpl.xrpl4j.model.client.common.LedgerIndex;\n+import org.xrpl.xrpl4j.model.transactions.Hash256;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Unit tests for {@link ServerInfoResult}.\n+ */\n+public class ServerInfoResultTests extends AbstractJsonTest {\n+\n+  @Test\n+  public void testJson() throws JsonProcessingException, JSONException {\n+    ServerInfoResult result = ServerInfoResult.builder()\n+      .status(\"success\")\n+      .info(serverInfo(\"54300020-54300729\"))\n+      .build();\n+\n+    String json = \"{\\n\" +\n+      \"    \\\"info\\\": {\\n\" +\n+      \"      \\\"build_version\\\": \\\"1.5.0-rc1\\\",\\n\" +\n+      \"      \\\"amendment_blocked\\\": false,\\n\" +\n+      \"      \\\"complete_ledgers\\\": \\\"54300020-54300729\\\",\\n\" +\n+      \"      \\\"hostid\\\": \\\"trace\\\",\\n\" +\n+      \"      \\\"io_latency_ms\\\": 1,\\n\" +\n+      \"      \\\"jq_trans_overflow\\\": \\\"0\\\",\\n\" +\n+      \"      \\\"last_close\\\": {\\n\" +\n+      \"        \\\"converge_time_s\\\": 2,\\n\" +\n+      \"        \\\"proposers\\\": 34\\n\" +\n+      \"      },\\n\" +\n+      \"      \\\"load\\\": {\\n\" +\n+      \"        \\\"job_types\\\": [\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"job_type\\\": \\\"ledgerRequest\\\",\\n\" +\n+      \"            \\\"peak_time\\\": 4,\\n\" +\n+      \"            \\\"per_second\\\": 4\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"job_type\\\": \\\"untrustedProposal\\\",\\n\" +\n+      \"            \\\"peak_time\\\": 5,\\n\" +\n+      \"            \\\"per_second\\\": 43\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"avg_time\\\": 14,\\n\" +\n+      \"            \\\"job_type\\\": \\\"ledgerData\\\",\\n\" +\n+      \"            \\\"peak_time\\\": 337\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"in_progress\\\": 1,\\n\" +\n+      \"            \\\"job_type\\\": \\\"clientCommand\\\",\\n\" +\n+      \"            \\\"per_second\\\": 9\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"job_type\\\": \\\"transaction\\\",\\n\" +\n+      \"            \\\"peak_time\\\": 8,\\n\" +\n+      \"            \\\"per_second\\\": 8\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"job_type\\\": \\\"batch\\\",\\n\" +\n+      \"            \\\"peak_time\\\": 5,\\n\" +\n+      \"            \\\"per_second\\\": 6\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"avg_time\\\": 6,\\n\" +\n+      \"            \\\"job_type\\\": \\\"advanceLedger\\\",\\n\" +\n+      \"            \\\"peak_time\\\": 96\\n\" +\n+      \"          },\\n\" +\n+      \"          {\\n\" +\n+      \"            \\\"job_type\\\": \\\"fetchTxnData\\\",\\n\" +\n+      \"            \\\"per_second\\\": 14\\n\" +\n+      \"          }\" +\n+      \"        ],\\n\" +\n+      \"        \\\"threads\\\": 6\\n\" +\n+      \"      },\\n\" +\n+      \"      \\\"load_factor\\\": 1,\\n\" +\n+      \"      \\\"peers\\\": 21,\\n\" +\n+      \"      \\\"pubkey_node\\\": \\\"n9KUjqxCr5FKThSNXdzb7oqN8rYwScB2dUnNqxQxbEA17JkaWy5x\\\",\\n\" +\n+      \"      \\\"pubkey_validator\\\": \\\"nHBk5DPexBjinXV8qHn7SEKzoxh2W92FxSbNTPgGtQYBzEF4msn9\\\",\\n\" +\n+      \"      \\\"server_state\\\": \\\"proposing\\\",\\n\" +\n+      \"      \\\"server_state_duration_us\\\": \\\"1850969666\\\",\\n\" +\n+      \"      \\\"time\\\": \\\"2020-Mar-24 01:27:42.147330 UTC\\\",\\n\" +\n+      \"      \\\"uptime\\\": 1984,\\n\" +\n+      \"      \\\"validated_ledger\\\": {\\n\" +\n+      \"        \\\"age\\\": 2,\\n\" +\n+      \"        \\\"hash\\\": \\\"0D2D30837E05995AAAAA117294BB45AB0699AB1219605FFD23318E050C7166E9\\\",\\n\" +\n+      \"        \\\"reserve_base_xrp\\\": 20,\\n\" +\n+      \"        \\\"reserve_inc_xrp\\\": 5,\\n\" +\n+      \"        \\\"seq\\\": 54300729\\n\" +\n+      \"      },\\n\" +\n+      \"      \\\"validation_quorum\\\": 29\\n\" +\n+      \"    },\\n\" +\n+      \"    \\\"status\\\": \\\"success\\\"\\n\" +\n+      \"  }\";\n+\n+    assertCanSerializeAndDeserialize(result, json);\n+  }\n+\n+  @Test\n+  public void completeLedgersRanges() {\n+    ServerInfo serverInfo = serverInfo(\"empty\");\n+    assertThat(serverInfo.completeLedgerRanges()).hasSize(0);\n+\n+    serverInfo = serverInfo(\"\");\n+    assertThat(serverInfo.completeLedgerRanges()).hasSize(0);\n+\n+    serverInfo = serverInfo(\"foo\");\n+    assertThat(serverInfo.completeLedgerRanges()).hasSize(0);\n+\n+    serverInfo = serverInfo(\"foo100\");\n+    assertThat(serverInfo.completeLedgerRanges()).hasSize(0);\n+\n+    serverInfo = serverInfo(\"1--2\");\n+    assertThat(serverInfo.completeLedgerRanges()).hasSize(0);\n+\n+    serverInfo = serverInfo(\"0\");\n+    List<Range<UnsignedLong>> ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(1);\n+    assertThat(ranges.get(0).contains(UnsignedLong.ZERO)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.ONE)).isFalse();\n+\n+    serverInfo = serverInfo(\"1\");\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(1);\n+    assertThat(ranges.get(0).contains(UnsignedLong.ZERO)).isFalse();\n+    assertThat(ranges.get(0).contains(UnsignedLong.ONE)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.valueOf(2L))).isFalse();\n+\n+    serverInfo = serverInfo(\"1-2\");\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(1);\n+    assertThat(ranges.get(0).contains(UnsignedLong.ZERO)).isFalse();\n+    assertThat(ranges.get(0).contains(UnsignedLong.ONE)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.valueOf(2))).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"0-\" + UnsignedLong.MAX_VALUE.toString());\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(1);\n+\n+    serverInfo = serverInfo(\"0-foo\");\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(0);\n+\n+    serverInfo = serverInfo(\"foo-0\");\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(0);\n+\n+    serverInfo = serverInfo(\"foo-0,bar-20\");\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(0);\n+\n+    serverInfo = serverInfo(\"0-10,20-30\");\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(2);\n+    assertThat(ranges.get(0).contains(UnsignedLong.ZERO)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.ONE)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.valueOf(10L))).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.valueOf(11L))).isFalse();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(19L))).isFalse();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(20L))).isTrue();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(30L))).isTrue();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(31L))).isFalse();\n+    assertThat(ranges.get(1).contains(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"0-10, 20-30 \"); // <-- Test the trim function\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(2);\n+    assertThat(ranges.get(0).contains(UnsignedLong.ZERO)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.ONE)).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.valueOf(10L))).isTrue();\n+    assertThat(ranges.get(0).contains(UnsignedLong.valueOf(11L))).isFalse();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(19L))).isFalse();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(20L))).isTrue();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(30L))).isTrue();\n+    assertThat(ranges.get(1).contains(UnsignedLong.valueOf(31L))).isFalse();\n+    assertThat(ranges.get(1).contains(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(UnsignedLong.MAX_VALUE.toString());\n+    ranges = serverInfo.completeLedgerRanges();\n+    assertThat(ranges).hasSize(1);\n+    assertThat(ranges.get(0).contains(UnsignedLong.ZERO)).isFalse();\n+    assertThat(ranges.get(0).contains(UnsignedLong.ONE)).isFalse();\n+    assertThat(ranges.get(0).contains(UnsignedLong.MAX_VALUE)).isTrue();\n+  }\n+\n+  @Test\n+  public void isLedgerInCompleteLedgers() {\n+    ServerInfo serverInfo = serverInfo(\"empty\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"foo\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"foo100\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"1--2\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"0\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"1\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"1-2\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"0-\" + UnsignedLong.MAX_VALUE.toString());\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isTrue();\n+\n+    serverInfo = serverInfo(\"0-10,20-30\");\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(19))).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(20))).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(21))).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(29))).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(30))).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(31))).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(\"0-10, 20-30 \"); // <-- Test the trim function\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(19))).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(20))).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(30))).isTrue();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.valueOf(31))).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isFalse();\n+\n+    serverInfo = serverInfo(UnsignedLong.MAX_VALUE.toString());\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ZERO)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.ONE)).isFalse();\n+    assertThat(serverInfo.isLedgerInCompleteLedgers(UnsignedLong.MAX_VALUE)).isTrue();\n+  }\n+\n+  /**\n+   * Helper method to construct an instance of {@link ServerInfo} with {@code completeLedgers} in {@link\n+   * ServerInfo#completeLedgers()}.\n+   *\n+   * @param completeLedgers A {@link String} with the value of completeLedgers.\n+   *\n+   * @return An instance of {@link ServerInfo}.\n+   */\n+  private ServerInfo serverInfo(final String completeLedgers) {\n+    Objects.requireNonNull(completeLedgers);\n+\n+    return ServerInfo.builder()\n+      .buildVersion(\"1.5.0-rc1\")\n+      .completeLedgers(completeLedgers) // <-- use completeLedgers here.\n+      .hostId(\"trace\")\n+      .ioLatencyMs(UnsignedLong.ONE)\n+      .jqTransOverflow(\"0\")\n+      .lastClose(ServerInfoLastClose.builder()\n+        .convergeTimeSeconds(2d)\n+        .proposers(UnsignedInteger.valueOf(34))\n+        .build())\n+      .load(ServerInfoLoad.builder()\n+        .addJobTypes(\n+          JobType.builder()\n+            .jobType(\"ledgerRequest\")\n+            .peakTime(UnsignedInteger.valueOf(4))\n+            .perSecond(UnsignedInteger.valueOf(4))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"untrustedProposal\")\n+            .peakTime(UnsignedInteger.valueOf(5))\n+            .perSecond(UnsignedInteger.valueOf(43))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"ledgerData\")\n+            .peakTime(UnsignedInteger.valueOf(337))\n+            .averageTime(UnsignedInteger.valueOf(14))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"clientCommand\")\n+            .inProgress(UnsignedInteger.valueOf(1))\n+            .perSecond(UnsignedInteger.valueOf(9))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"transaction\")\n+            .peakTime(UnsignedInteger.valueOf(8))\n+            .perSecond(UnsignedInteger.valueOf(8))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"batch\")\n+            .peakTime(UnsignedInteger.valueOf(5))\n+            .perSecond(UnsignedInteger.valueOf(6))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"advanceLedger\")\n+            .peakTime(UnsignedInteger.valueOf(96))\n+            .averageTime(UnsignedInteger.valueOf(6))\n+            .build(),\n+          JobType.builder()\n+            .jobType(\"fetchTxnData\")\n+            .perSecond(UnsignedInteger.valueOf(14))\n+            .build()\n+        )\n+        .threads(UnsignedLong.valueOf(6))\n+        .build())\n+      .loadFactor(UnsignedInteger.ONE)\n+      .peers(UnsignedInteger.valueOf(21))\n+      .publicKeyNode(\"n9KUjqxCr5FKThSNXdzb7oqN8rYwScB2dUnNqxQxbEA17JkaWy5x\")\n+      .publicKeyValidator(\"nHBk5DPexBjinXV8qHn7SEKzoxh2W92FxSbNTPgGtQYBzEF4msn9\")\n+      .serverState(\"proposing\")\n+      .serverStateDurationUs(\"1850969666\")\n+      .time(ZonedDateTime.parse(\"2020-Mar-24 01:27:42.147330 UTC\",\n+        DateTimeFormatter.ofPattern(\"yyyy-MMM-dd HH:mm:ss.SSSSSS z\")).withZoneSameLocal(ZoneId.of(\"UTC\")))\n+      .upTime(UnsignedLong.valueOf(1984))\n+      .validatedLedger(ServerInfoLedger.builder()\n+        .age(UnsignedInteger.valueOf(2))\n+        .hash(Hash256.of(\"0D2D30837E05995AAAAA117294BB45AB0699AB1219605FFD23318E050C7166E9\"))\n+        .reserveBaseXrp(UnsignedInteger.valueOf(20))\n+        .reserveIncXrp(UnsignedInteger.valueOf(5))\n+        .sequence(LedgerIndex.of(UnsignedLong.valueOf(54300729)))\n+        .build())\n+      .validationQuorum(UnsignedInteger.valueOf(29))\n+      .build();\n+  }\n+}"
  }
]
