[
  {
    "sha": "152b899e7e7d43b439d3e8dabbaadf78a7fea6cc",
    "filename": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/ExecuteOperation.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/infinispan/infinispan/blob/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/ExecuteOperation.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/ExecuteOperation.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/ExecuteOperation.java?ref=67928d5751d4855de933868eec3dd4cadd628c3e",
    "patch": "@@ -3,6 +3,7 @@\n import static org.infinispan.client.hotrod.marshall.MarshallerUtil.bytes2obj;\n \n import java.net.SocketAddress;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n@@ -14,6 +15,7 @@\n import org.infinispan.client.hotrod.impl.transport.netty.ByteBufUtil;\n import org.infinispan.client.hotrod.impl.transport.netty.ChannelFactory;\n import org.infinispan.client.hotrod.impl.transport.netty.HeaderDecoder;\n+import org.infinispan.commons.util.Util;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.channel.Channel;\n@@ -68,4 +70,20 @@ protected void executeOperation(Channel channel) {\n    public void acceptResponse(ByteBuf buf, short status, HeaderDecoder decoder) {\n       complete(bytes2obj(channelFactory.getMarshaller(), ByteBufUtil.readArray(buf), dataFormat.isObjectStorage(), cfg.getClassAllowList()));\n    }\n+\n+   @Override\n+   protected void addParams(StringBuilder sb) {\n+      sb.append(\", taskName=\").append(taskName);\n+      sb.append(\", params=[\");\n+      for (Iterator<Entry<String, byte[]>> iterator = marshalledParams.entrySet().iterator(); iterator.hasNext(); ) {\n+         Entry<String, byte[]> entry = iterator.next();\n+         String name = entry.getKey();\n+         byte[] value = entry.getValue();\n+         sb.append(name).append(\"=\").append(Util.toStr(value));\n+         if (iterator.hasNext()) {\n+            sb.append(\", \");\n+         }\n+      }\n+      sb.append(\"]\");\n+   }\n }"
  },
  {
    "sha": "1137fafb3f36cd88f259321503cbb1a5fbb3f703",
    "filename": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/HotRodOperation.java",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/infinispan/infinispan/blob/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/HotRodOperation.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/HotRodOperation.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/HotRodOperation.java?ref=67928d5751d4855de933868eec3dd4cadd628c3e",
    "patch": "@@ -155,23 +155,15 @@ protected void addParams(StringBuilder sb) {\n    }\n \n    @Override\n-   public boolean completeExceptionally(Throwable ex) {\n-      // Timeout future is not set if the operation completes before scheduling a read:\n-      // see RemoveClientListenerOperation.fetchChannelAndInvoke\n-      if (timeoutFuture != null) {\n-         timeoutFuture.cancel(false);\n-      }\n-      return super.completeExceptionally(ex);\n+   public boolean complete(T value) {\n+      cancelTimeout();\n+      return super.complete(value);\n    }\n \n    @Override\n-   public boolean complete(T value) {\n-      // Timeout future is not set if the operation completes before scheduling a read:\n-      // see RemoveClientListenerOperation.fetchChannelAndInvoke\n-      if (timeoutFuture != null) {\n-         timeoutFuture.cancel(false);\n-      }\n-      return super.complete(value);\n+   public boolean completeExceptionally(Throwable ex) {\n+      cancelTimeout();\n+      return super.completeExceptionally(ex);\n    }\n \n    public void scheduleTimeout(Channel channel) {\n@@ -180,6 +172,14 @@ public void scheduleTimeout(Channel channel) {\n       this.timeoutFuture = channel.eventLoop().schedule(this, channelFactory.socketTimeout(), TimeUnit.MILLISECONDS);\n    }\n \n+   private void cancelTimeout() {\n+      // Timeout future is not set if the operation completes before scheduling a read:\n+      // see RemoveClientListenerOperation.fetchChannelAndInvoke\n+      if (timeoutFuture != null) {\n+         timeoutFuture.cancel(false);\n+      }\n+   }\n+\n    @Override\n    public void run() {\n       exceptionCaught(channel, new SocketTimeoutException(this + \" timed out after \" + channelFactory.socketTimeout() + \" ms\"));"
  },
  {
    "sha": "9d445414288e0dbcf7790e453be08a90d2095a62",
    "filename": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/ServerErrorTest.java",
    "status": "modified",
    "additions": 54,
    "deletions": 24,
    "changes": 78,
    "blob_url": "https://github.com/infinispan/infinispan/blob/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/ServerErrorTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/ServerErrorTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/ServerErrorTest.java?ref=67928d5751d4855de933868eec3dd4cadd628c3e",
    "patch": "@@ -2,28 +2,40 @@\n \n import static org.infinispan.client.hotrod.test.HotRodClientTestingUtil.killRemoteCacheManager;\n import static org.infinispan.client.hotrod.test.HotRodClientTestingUtil.killServers;\n+import static org.infinispan.commons.test.Exceptions.expectException;\n import static org.infinispan.server.hotrod.test.HotRodTestingUtil.hotRodCacheConfiguration;\n import static org.infinispan.server.hotrod.test.HotRodTestingUtil.unmarshall;\n import static org.infinispan.test.TestingUtil.k;\n import static org.infinispan.test.TestingUtil.v;\n+import static org.testng.AssertJUnit.assertEquals;\n \n import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.util.Queue;\n \n import org.infinispan.client.hotrod.exceptions.HotRodClientException;\n+import org.infinispan.client.hotrod.impl.transport.netty.ChannelFactory;\n+import org.infinispan.client.hotrod.impl.transport.netty.HeaderDecoder;\n import org.infinispan.client.hotrod.test.HotRodClientTestingUtil;\n+import org.infinispan.client.hotrod.test.InternalRemoteCacheManager;\n+import org.infinispan.client.hotrod.test.NoopChannelOperation;\n import org.infinispan.manager.EmbeddedCacheManager;\n import org.infinispan.notifications.Listener;\n import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n import org.infinispan.notifications.cachelistener.event.CacheEntryEvent;\n-import org.infinispan.remoting.transport.jgroups.SuspectException;\n import org.infinispan.server.hotrod.HotRodServer;\n import org.infinispan.test.SingleCacheManagerTest;\n+import org.infinispan.test.TestException;\n+import org.infinispan.test.TestingUtil;\n import org.infinispan.test.fwk.TestCacheManagerFactory;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.Test;\n \n+import io.netty.channel.Channel;\n+import io.netty.util.concurrent.AbstractScheduledEventExecutor;\n+\n /**\n- * Tests HotRod client and server behaivour when server throws a server error\n+ * Tests HotRod client and server behaviour when server throws a server error\n  *\n  * @author Galder Zamarre√±o\n  * @since 4.2\n@@ -32,7 +44,7 @@\n public class ServerErrorTest extends SingleCacheManagerTest {\n \n    private HotRodServer hotrodServer;\n-   private RemoteCacheManager remoteCacheManager;\n+   private InternalRemoteCacheManager remoteCacheManager;\n    private RemoteCache<String, String> remoteCache;\n \n    @Override\n@@ -47,11 +59,12 @@ protected EmbeddedCacheManager createCacheManager() throws Exception {\n       return cacheManager;\n    }\n \n-   protected RemoteCacheManager getRemoteCacheManager() {\n+   protected InternalRemoteCacheManager getRemoteCacheManager() {\n       org.infinispan.client.hotrod.configuration.ConfigurationBuilder clientBuilder =\n             HotRodClientTestingUtil.newRemoteConfigurationBuilder();\n-      clientBuilder.addServer().host(\"localhost\").port(hotrodServer.getPort());\n-      return new RemoteCacheManager(clientBuilder.build());\n+      clientBuilder.addServer().host(hotrodServer.getHost()).port(hotrodServer.getPort());\n+      clientBuilder.connectionPool().maxActive(1).minIdle(1);\n+      return new InternalRemoteCacheManager(clientBuilder.build());\n    }\n \n    @AfterClass\n@@ -67,31 +80,48 @@ public void testErrorWhileDoingPut(Method m) {\n       remoteCache = remoteCacheManager.getCache();\n \n       remoteCache.put(k(m), v(m));\n-      assert remoteCache.get(k(m)).equals(v(m));\n-\n-      try {\n-         remoteCache.put(\"FailFailFail\", \"whatever...\");\n-      } catch (HotRodClientException e) {\n-         // ignore\n-      }\n-\n-      try {\n-         remoteCache.put(k(m, 2), v(m, 2));\n-         assert remoteCache.get(k(m, 2)).equals(v(m, 2));\n-      } catch (Exception e) {\n-         log.error(\"Error sending request after server failure\", e);\n-         throw e;\n-      }\n-\n+      assertEquals(v(m), remoteCache.get(k(m)));\n+\n+      // Obtain a reference to the single connection in the pool\n+      ChannelFactory channelFactory = remoteCacheManager.getChannelFactory();\n+      InetSocketAddress address = InetSocketAddress.createUnresolved(hotrodServer.getHost(), hotrodServer.getPort());\n+      Channel channel = channelFactory.fetchChannelAndInvoke(address, new NoopChannelOperation()).join();\n+\n+      // Obtain a reference to the scheduled executor and its task queue\n+      AbstractScheduledEventExecutor scheduledExecutor = ((AbstractScheduledEventExecutor) channel.eventLoop());\n+      Queue<?> scheduledTaskQueue = TestingUtil.extractField(scheduledExecutor, \"scheduledTaskQueue\");\n+      int scheduledTasksBaseline = scheduledTaskQueue.size();\n+\n+      // Release the channel back into the pool\n+      channelFactory.releaseChannel(channel);\n+      assertEquals(0, channelFactory.getNumActive(address));\n+      assertEquals(1, channelFactory.getNumIdle(address));\n+\n+      log.debug(\"Sending failing operation to server\");\n+      expectException(HotRodClientException.class,\n+                      () -> remoteCache.put(\"FailFailFail\", \"whatever...\"));\n+      assertEquals(0, channelFactory.getNumActive(address));\n+      assertEquals(1, channelFactory.getNumIdle(address));\n+\n+      // Check that the operation was completed\n+      HeaderDecoder headerDecoder = channel.pipeline().get(HeaderDecoder.class);\n+      assertEquals(0, headerDecoder.registeredOperations());\n+\n+      // Check that the timeout task was cancelled\n+      assertEquals(scheduledTasksBaseline, scheduledTaskQueue.size());\n+\n+      log.debug(\"Sending new request after server failure\");\n+      remoteCache.put(k(m, 2), v(m, 2));\n+      assertEquals(v(m, 2), remoteCache.get(k(m, 2)));\n    }\n \n    @Listener\n    public static class ErrorInducingListener {\n       @CacheEntryCreated\n       @SuppressWarnings(\"unused\")\n       public void entryCreated(CacheEntryEvent<byte[], byte[]> event) throws Exception {\n-         if (event.isPre() && unmarshall(event.getKey()) == \"FailFailFail\") {\n-            throw new SuspectException(\"Simulated suspicion\");\n+         if (event.isPre() && unmarshall(event.getKey()).equals(\"FailFailFail\")) {\n+            throw new TestException(\"Simulated server failure\");\n          }\n       }\n    }"
  },
  {
    "sha": "cb6ae41efecab1a457a6d2e21b977c0fa145d9b9",
    "filename": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java",
    "status": "modified",
    "additions": 57,
    "deletions": 12,
    "changes": 69,
    "blob_url": "https://github.com/infinispan/infinispan/blob/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/67928d5751d4855de933868eec3dd4cadd628c3e/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java?ref=67928d5751d4855de933868eec3dd4cadd628c3e",
    "patch": "@@ -1,5 +1,6 @@\n package org.infinispan.client.hotrod.admin;\n \n+import static org.infinispan.commons.test.Exceptions.expectException;\n import static org.infinispan.configuration.cache.IndexStorage.LOCAL_HEAP;\n import static org.infinispan.server.hotrod.test.HotRodTestingUtil.hotRodCacheConfiguration;\n import static org.testng.AssertJUnit.assertEquals;\n@@ -15,6 +16,7 @@\n import org.infinispan.client.hotrod.DefaultTemplate;\n import org.infinispan.client.hotrod.Flag;\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManagerAdmin;\n import org.infinispan.client.hotrod.Search;\n import org.infinispan.client.hotrod.exceptions.HotRodClientException;\n import org.infinispan.client.hotrod.query.testdomain.protobuf.TransactionPB;\n@@ -69,16 +71,26 @@ protected HotRodServer addHotRodServer(ConfigurationBuilder builder) {\n       return server;\n    }\n \n+   @Override\n+   protected org.infinispan.client.hotrod.configuration.ConfigurationBuilder createHotRodClientConfigurationBuilder(\n+         String host, int serverPort) {\n+      return super.createHotRodClientConfigurationBuilder(host, serverPort)\n+                  .socketTimeout(1_000);\n+   }\n+\n    @Override\n    protected SerializationContextInitializer contextInitializer() {\n       return TestDomainSCI.INSTANCE;\n    }\n \n    public void templateCreateRemoveTest(Method m) {\n       String templateName = m.getName();\n-      String xml = String.format(\"<infinispan><cache-container><distributed-cache name=\\\"%s\\\"/></cache-container></infinispan>\", templateName);\n+      String xml = String.format(\n+            \"<infinispan><cache-container><distributed-cache name=\\\"%s\\\"/></cache-container></infinispan>\",\n+            templateName);\n       BasicConfiguration template = new XMLStringConfiguration(xml);\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).createTemplate(templateName, template);\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .createTemplate(templateName, template);\n       assertTrue(manager(0).getCacheConfigurationNames().contains(templateName));\n       assertTrue(manager(0).getCacheConfigurationNames().contains(templateName));\n       client(1).administration().removeTemplate(templateName);\n@@ -96,9 +108,26 @@ public void cacheCreateRemoveTest(Method m) {\n       assertFalse(manager(1).cacheExists(cacheName));\n    }\n \n+   public void cacheCreateMissingTemplate(Method m) throws InterruptedException {\n+      RemoteCacheManagerAdmin admin = client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE);\n+\n+      // Creation with a non-existent template fails\n+      expectException(HotRodClientException.class,\n+                      () -> admin.createCache(\"some_name\", \"some_template_name\"));\n+\n+      // Cache can still be created later with a string configuration\n+      admin.createCache(\"some_name\",\n+                        new XMLStringConfiguration(\"<infinispan><cache-container>\" +\n+                                                   \"<local-cache name=\\\"some_name\\\"/>\" +\n+                                                   \"</cache-container></infinispan>\"));\n+      RemoteCache<Object, Object> someCache = client(0).getCache(\"some_name\");\n+      someCache.put(\"key\", \"value\");\n+   }\n+\n    public void cacheCreateRemoveTestWithDefaultTemplateEnum(Method m) {\n       String cacheName = m.getName();\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).createCache(cacheName, DefaultTemplate.DIST_ASYNC);\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .createCache(cacheName, DefaultTemplate.DIST_ASYNC);\n       assertTrue(manager(0).cacheExists(cacheName));\n       assertTrue(manager(1).cacheExists(cacheName));\n       client(1).administration().removeCache(cacheName);\n@@ -108,7 +137,8 @@ public void cacheCreateRemoveTestWithDefaultTemplateEnum(Method m) {\n \n    public void cacheGetOrCreateRemoveTestWithDefaultTemplateEnum(Method m) {\n       String cacheName = m.getName();\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).getOrCreateCache(cacheName, DefaultTemplate.DIST_ASYNC);\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .getOrCreateCache(cacheName, DefaultTemplate.DIST_ASYNC);\n       assertTrue(manager(0).cacheExists(cacheName));\n       assertTrue(manager(1).cacheExists(cacheName));\n       client(1).administration().removeCache(cacheName);\n@@ -132,7 +162,8 @@ public void alreadyExistingCacheTest(Method m) {\n    public void getOrCreateWithTemplateTest(Method m) {\n       String cacheName = m.getName();\n       client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).createCache(cacheName, \"template\");\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).getOrCreateCache(cacheName, \"template\");\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .getOrCreateCache(cacheName, \"template\");\n    }\n \n    public void getOrCreateWithoutTemplateTest() {\n@@ -141,18 +172,27 @@ public void getOrCreateWithoutTemplateTest() {\n \n    public void cacheCreateWithXMLConfigurationTest(Method m) {\n       String cacheName = m.getName();\n-      String xml = String.format(\"<infinispan><cache-container><distributed-cache name=\\\"%s\\\"><encoding><key media-type=\\\"text/plain\\\"/><value media-type=\\\"application/json\\\"/></encoding><expiration interval=\\\"10000\\\" lifespan=\\\"10\\\" max-idle=\\\"10\\\"/></distributed-cache></cache-container></infinispan>\", cacheName);\n+      String xml = String.format(\n+            \"<infinispan><cache-container><distributed-cache name=\\\"%s\\\"><encoding><key \" +\n+            \"media-type=\\\"text/plain\\\"/><value media-type=\\\"application/json\\\"/></encoding><expiration \" +\n+            \"interval=\\\"10000\\\" lifespan=\\\"10\\\" max-idle=\\\"10\\\"/></distributed-cache></cache-container></infinispan>\",\n+            cacheName);\n       cacheCreateWithXMLConfiguration(cacheName, xml);\n    }\n \n    public void cacheCreateWithXMLFragmentConfigurationTest(Method m) {\n       String cacheName = m.getName();\n-      String xml = String.format(\"<distributed-cache name=\\\"%s\\\"><encoding><key media-type=\\\"text/plain\\\"/><value media-type=\\\"application/json\\\"/></encoding><expiration interval=\\\"10000\\\" lifespan=\\\"10\\\" max-idle=\\\"10\\\"/></distributed-cache>\", cacheName);\n+      String xml = String.format(\n+            \"<distributed-cache name=\\\"%s\\\"><encoding><key media-type=\\\"text/plain\\\"/><value \" +\n+            \"media-type=\\\"application/json\\\"/></encoding><expiration interval=\\\"10000\\\" lifespan=\\\"10\\\" \" +\n+            \"max-idle=\\\"10\\\"/></distributed-cache>\",\n+            cacheName);\n       cacheCreateWithXMLConfiguration(cacheName, xml);\n    }\n \n    private void cacheCreateWithXMLConfiguration(String cacheName, String xml) {\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).getOrCreateCache(cacheName, new XMLStringConfiguration(xml));\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .getOrCreateCache(cacheName, new XMLStringConfiguration(xml));\n       Configuration configuration = manager(0).getCache(cacheName).getCacheConfiguration();\n       assertEquals(10000, configuration.expiration().wakeUpInterval());\n       assertEquals(10, configuration.expiration().lifespan());\n@@ -163,7 +203,8 @@ private void cacheCreateWithXMLConfiguration(String cacheName, String xml) {\n \n    public void cacheCreateWithXMLConfigurationAndGetCacheTest(Method m) {\n       String cacheName = m.getName();\n-      String xml = String.format(\"<infinispan><cache-container><distributed-cache name=\\\"%s\\\"/></cache-container></infinispan>\", cacheName);\n+      String xml = String.format(\n+            \"<infinispan><cache-container><distributed-cache name=\\\"%s\\\"/></cache-container></infinispan>\", cacheName);\n       cacheCreateWithXMLConfigurationAndGetCache(cacheName, xml);\n    }\n \n@@ -174,7 +215,8 @@ public void cacheCreateWithReducedXMLConfigurationAndGetCacheTest(Method m) {\n    }\n \n    private void cacheCreateWithXMLConfigurationAndGetCache(String cacheName, String xml) {\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).createCache(cacheName, new XMLStringConfiguration(xml));\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .createCache(cacheName, new XMLStringConfiguration(xml));\n       final RemoteCache<Object, Object> cache = client(0).getCache(cacheName);\n       assertNotNull(cache);\n    }\n@@ -183,7 +225,8 @@ public void cacheCreateWithEmbeddedConfigurationTest(Method m) {\n       String cacheName = m.getName();\n       ConfigurationBuilder builder = new ConfigurationBuilder();\n       builder.expiration().wakeUpInterval(10000).maxIdle(10).lifespan(10);\n-      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE).getOrCreateCache(cacheName, builder.build());\n+      client(0).administration().withFlags(CacheContainerAdmin.AdminFlag.VOLATILE)\n+               .getOrCreateCache(cacheName, builder.build());\n       Configuration configuration = manager(0).getCache(cacheName).getCacheConfiguration();\n       assertEquals(10000, configuration.expiration().wakeUpInterval());\n       assertEquals(10, configuration.expiration().lifespan());\n@@ -212,7 +255,9 @@ public void cacheReindexTest(Method m) {\n    }\n \n    private void verifyQuery(RemoteCache<String, Transaction> cache, int count) {\n-      List<User> users = Search.getQueryFactory(cache).<User>create(\"from sample_bank_account.Transaction where longDescription:'RENT'\").execute().list();\n+      List<User> users = Search.getQueryFactory(cache)\n+                               .<User>create(\"from sample_bank_account.Transaction where longDescription:'RENT'\")\n+                               .execute().list();\n       assertEquals(count, users.size());\n    }\n "
  }
]
