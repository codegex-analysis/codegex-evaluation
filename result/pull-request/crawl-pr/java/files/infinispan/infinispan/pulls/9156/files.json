[
  {
    "sha": "e080c47958a9420db4c38371290b1df2967a67f6",
    "filename": "spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/infinispan/infinispan/blob/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/spring/spring5/spring5-common/src/test/java/org/infinispan/spring/common/session/InfinispanSessionRepositoryTCK.java?ref=d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e",
    "patch": "@@ -14,6 +14,7 @@\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n+import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.spring.common.provider.SpringCache;\n import org.infinispan.test.AbstractInfinispanTest;\n import org.infinispan.test.TestingUtil;\n@@ -27,6 +28,12 @@\n    protected SpringCache springCache;\n \n    protected AbstractInfinispanSessionRepository sessionRepository;\n+   protected MediaType mediaType;\n+\n+   protected InfinispanSessionRepositoryTCK mediaType(MediaType mediaType) {\n+      this.mediaType = mediaType;\n+      return this;\n+   }\n \n    protected abstract SpringCache createSpringCache();\n "
  },
  {
    "sha": "8ca55bd422dc121f56158a3f8829f2a533b2e053",
    "filename": "spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/SpringEmbeddedModule.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/infinispan/infinispan/blob/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/SpringEmbeddedModule.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/SpringEmbeddedModule.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/spring/spring5/spring5-embedded/src/main/java/org/infinispan/spring/embedded/SpringEmbeddedModule.java?ref=d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e",
    "patch": "@@ -53,9 +53,9 @@ private void addSessionContextInitializerAndMarshaller(SerializationContextRegis\n          return;\n       }\n \n-      org.infinispan.spring.common.session.PersistenceContextInitializerImpl providerSci = new org.infinispan.spring.common.session.PersistenceContextInitializerImpl();\n-      ctxRegistry.addContextInitializer(SerializationContextRegistry.MarshallerType.PERSISTENCE, providerSci);\n-      ctxRegistry.addContextInitializer(SerializationContextRegistry.MarshallerType.GLOBAL, providerSci);\n+      org.infinispan.spring.common.session.PersistenceContextInitializerImpl sessionSci = new org.infinispan.spring.common.session.PersistenceContextInitializerImpl();\n+      ctxRegistry.addContextInitializer(SerializationContextRegistry.MarshallerType.PERSISTENCE, sessionSci);\n+      ctxRegistry.addContextInitializer(SerializationContextRegistry.MarshallerType.GLOBAL, sessionSci);\n \n       BaseMarshaller sessionAttributeMarshaller = new MapSessionProtoAdapter.SessionAttributeRawMarshaller(serializationMarshaller);\n       ctxRegistry.addMarshaller(PERSISTENCE, sessionAttributeMarshaller);"
  },
  {
    "sha": "1d7e1a09dbcdcffa73df186398cc51c5683dddf3",
    "filename": "spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepositoryTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/infinispan/infinispan/blob/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepositoryTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/spring/spring5/spring5-embedded/src/test/java/org/infinispan/spring/embedded/session/InfinispanEmbeddedSessionRepositoryTest.java?ref=d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e",
    "patch": "@@ -1,5 +1,6 @@\n package org.infinispan.spring.embedded.session;\n \n+import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.configuration.cache.CacheMode;\n import org.infinispan.configuration.cache.ConfigurationBuilder;\n import org.infinispan.manager.EmbeddedCacheManager;\n@@ -11,6 +12,7 @@\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n import org.testng.annotations.Test;\n \n @Test(testName = \"spring.embedded.session.InfinispanEmbeddedSessionRepositoryTest\", groups = \"unit\")\n@@ -20,11 +22,18 @@\n    private EmbeddedCacheManager cacheManager2;\n    private EmbeddedCacheManager cacheManager3;\n \n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new InfinispanEmbeddedSessionRepositoryTest().mediaType(MediaType.APPLICATION_PROTOSTREAM),\n+            new InfinispanEmbeddedSessionRepositoryTest().mediaType(MediaType.APPLICATION_SERIALIZED_OBJECT),\n+            };\n+   }\n \n    @BeforeClass\n    public void beforeClass() {\n       ConfigurationBuilder defaultCacheBuilder = new ConfigurationBuilder();\n-      defaultCacheBuilder.clustering().cacheMode(CacheMode.DIST_SYNC);\n+      defaultCacheBuilder.clustering().cacheMode(CacheMode.DIST_SYNC).encoding().mediaType(mediaType.getTypeSubtype());\n       embeddedCacheManager = TestCacheManagerFactory.createClusteredCacheManager(defaultCacheBuilder);\n       cacheManager2 = TestCacheManagerFactory.createClusteredCacheManager(defaultCacheBuilder);\n       cacheManager3 = TestCacheManagerFactory.createClusteredCacheManager(defaultCacheBuilder);"
  },
  {
    "sha": "4db800e28564375fa5bad3a12aeb7ea88d163ba3",
    "filename": "spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/provider/SpringRemoteCacheManager.java",
    "status": "modified",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/infinispan/infinispan/blob/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/provider/SpringRemoteCacheManager.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/provider/SpringRemoteCacheManager.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/spring/spring5/spring5-remote/src/main/java/org/infinispan/spring/remote/provider/SpringRemoteCacheManager.java?ref=d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e",
    "patch": "@@ -6,7 +6,19 @@\n \n import org.infinispan.client.hotrod.RemoteCache;\n import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.impl.MarshallerRegistry;\n+import org.infinispan.client.hotrod.marshall.MarshallerUtil;\n+import org.infinispan.commons.configuration.ClassAllowList;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.logging.Log;\n+import org.infinispan.commons.marshall.JavaSerializationMarshaller;\n+import org.infinispan.commons.marshall.ProtoStreamMarshaller;\n+import org.infinispan.protostream.BaseMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.spring.common.provider.NullValue;\n import org.infinispan.spring.common.provider.SpringCache;\n+import org.infinispan.spring.common.session.MapSessionProtoAdapter;\n+import org.springframework.session.MapSession;\n import org.springframework.util.Assert;\n \n /**\n@@ -36,6 +48,8 @@ public SpringRemoteCacheManager(final RemoteCacheManager nativeCacheManager, lon\n       this.nativeCacheManager = nativeCacheManager;\n       this.readTimeout = readTimeout;\n       this.writeTimeout = writeTimeout;\n+\n+      configureMarshallers(nativeCacheManager);\n    }\n \n    public SpringRemoteCacheManager(final RemoteCacheManager nativeCacheManager) {\n@@ -111,4 +125,60 @@ public void stop() {\n       this.nativeCacheManager.stop();\n       this.springCaches.clear();\n    }\n+\n+   private void configureMarshallers(RemoteCacheManager nativeCacheManager) {\n+      MarshallerRegistry marshallerRegistry = nativeCacheManager.getMarshallerRegistry();\n+\n+      // Java serialization support\n+      JavaSerializationMarshaller serializationMarshaller =\n+            (JavaSerializationMarshaller) marshallerRegistry.getMarshaller(MediaType.APPLICATION_SERIALIZED_OBJECT);\n+      if (serializationMarshaller == null) {\n+         // Register a JavaSerializationMarshaller if it doesn't exist yet\n+         // Because some session attributes are always marshalled with Java serialization\n+         serializationMarshaller = new JavaSerializationMarshaller();\n+         marshallerRegistry.registerMarshaller(serializationMarshaller);\n+      }\n+\n+      // Extend deserialization allow list\n+      ClassAllowList serializationAllowList = new ClassAllowList();\n+      serializationAllowList.addClasses(NullValue.class);\n+      serializationAllowList.addRegexps(\"java.util\\\\..*\", \"org.springframework\\\\..*\");\n+      serializationMarshaller.initialize(serializationAllowList);\n+\n+      // Protostream support\n+      ProtoStreamMarshaller protoMarshaller =\n+            (ProtoStreamMarshaller) marshallerRegistry.getMarshaller(MediaType.APPLICATION_PROTOSTREAM);\n+      if (protoMarshaller != null) {\n+         SerializationContext ctx = MarshallerUtil.getSerializationContext(nativeCacheManager);\n+         addProviderContextInitializer(ctx);\n+         addSessionContextInitializerAndMarshaller(ctx, serializationMarshaller);\n+      }\n+   }\n+\n+   private void addProviderContextInitializer(SerializationContext ctx) {\n+      org.infinispan.spring.common.provider.PersistenceContextInitializerImpl providerSci =\n+            new org.infinispan.spring.common.provider.PersistenceContextInitializerImpl();\n+      providerSci.registerMarshallers(ctx);\n+      providerSci.registerSchema(ctx);\n+   }\n+\n+   private void addSessionContextInitializerAndMarshaller(SerializationContext ctx,\n+                                                          JavaSerializationMarshaller serializationMarshaller) {\n+      // Skip registering the marshallers if the MapSession class is not available\n+      try {\n+         new MapSession();\n+      } catch (NoClassDefFoundError e) {\n+         Log.CONFIG.debug(\"spring-session classes not found, skipping the session context initializer registration\");\n+         return;\n+      }\n+\n+      org.infinispan.spring.common.session.PersistenceContextInitializerImpl sessionSci =\n+            new org.infinispan.spring.common.session.PersistenceContextInitializerImpl();\n+      sessionSci.registerMarshallers(ctx);\n+      sessionSci.registerSchema(ctx);\n+\n+      BaseMarshaller sessionAttributeMarshaller =\n+            new MapSessionProtoAdapter.SessionAttributeRawMarshaller(serializationMarshaller);\n+      ctx.registerMarshaller(sessionAttributeMarshaller);\n+   }\n }"
  },
  {
    "sha": "9d84caf392a55f378f2d8d4bb8b47e614ad0cecc",
    "filename": "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/provider/SpringRemoteCacheTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/infinispan/infinispan/blob/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/provider/SpringRemoteCacheTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/provider/SpringRemoteCacheTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/provider/SpringRemoteCacheTest.java?ref=d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e",
    "patch": "@@ -12,6 +12,7 @@\n import org.infinispan.manager.EmbeddedCacheManager;\n import org.infinispan.server.hotrod.HotRodServer;\n import org.infinispan.server.hotrod.test.HotRodTestingUtil;\n+import org.infinispan.spring.common.provider.NullValue;\n import org.infinispan.spring.common.provider.SpringCache;\n import org.infinispan.test.SingleCacheManagerTest;\n import org.infinispan.test.fwk.TestCacheManagerFactory;\n@@ -91,4 +92,16 @@ public void testValueLoaderWithLocking() throws Exception {\n       assertEquals(\"thread1\", valueObtainedByThread1);\n       assertEquals(\"thread1\", valueObtainedByThread2);\n    }\n+\n+   public void testNullValues() {\n+      //given\n+      final SpringRemoteCacheManager springRemoteCacheManager = new SpringRemoteCacheManager(remoteCacheManager);\n+      final SpringCache cache = springRemoteCacheManager.getCache(TEST_CACHE_NAME);\n+\n+      // when\n+      cache.put(\"key\", null);\n+\n+      // then\n+      assertEquals(NullValue.NULL, cache.get(\"key\"));\n+   }\n }"
  },
  {
    "sha": "87092438a5a62ed0021fdb65357f4ce094e4e77c",
    "filename": "spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepositoryTest.java",
    "status": "modified",
    "additions": 28,
    "deletions": 8,
    "changes": 36,
    "blob_url": "https://github.com/infinispan/infinispan/blob/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepositoryTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e/spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/spring/spring5/spring5-remote/src/test/java/org/infinispan/spring/remote/session/InfinispanRemoteSessionRepositoryTest.java?ref=d77e21732a6b0f48ba4e1233e7a8450ccfd4d93e",
    "patch": "@@ -1,23 +1,25 @@\n package org.infinispan.spring.remote.session;\n \n-import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_SERIALIZED_OBJECT;\n import static org.infinispan.server.hotrod.test.HotRodTestingUtil.hotRodCacheConfiguration;\n-import static org.infinispan.spring.remote.AbstractRemoteCacheManagerFactory.SPRING_JAVA_SERIAL_ALLOWLIST;\n \n import org.infinispan.client.hotrod.RemoteCacheManager;\n import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.commons.marshall.JavaSerializationMarshaller;\n+import org.infinispan.commons.marshall.ProtoStreamMarshaller;\n import org.infinispan.manager.EmbeddedCacheManager;\n import org.infinispan.server.hotrod.HotRodServer;\n import org.infinispan.server.hotrod.test.HotRodTestingUtil;\n import org.infinispan.spring.common.provider.SpringCache;\n import org.infinispan.spring.common.session.AbstractInfinispanSessionRepository;\n import org.infinispan.spring.common.session.InfinispanSessionRepositoryTCK;\n+import org.infinispan.spring.remote.provider.SpringRemoteCacheManager;\n import org.infinispan.test.fwk.TestCacheManagerFactory;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n import org.testng.annotations.Test;\n \n @Test(testName = \"spring.session.InfinispanRemoteSessionRepositoryTest\", groups = \"functional\")\n@@ -26,17 +28,35 @@\n    private EmbeddedCacheManager embeddedCacheManager;\n    private HotRodServer hotrodServer;\n    private RemoteCacheManager remoteCacheManager;\n+   private SpringRemoteCacheManager springRemoteCacheManager;\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new InfinispanRemoteSessionRepositoryTest().mediaType(MediaType.APPLICATION_PROTOSTREAM),\n+            new InfinispanRemoteSessionRepositoryTest().mediaType(MediaType.APPLICATION_SERIALIZED_OBJECT),\n+            };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return mediaType.toString();\n+   }\n \n    @BeforeClass\n    public void beforeClass() {\n-      org.infinispan.configuration.cache.ConfigurationBuilder cacheConfiguration = hotRodCacheConfiguration(APPLICATION_SERIALIZED_OBJECT);\n+      org.infinispan.configuration.cache.ConfigurationBuilder cacheConfiguration = hotRodCacheConfiguration(mediaType);\n       embeddedCacheManager = TestCacheManagerFactory.createCacheManager(cacheConfiguration);\n       hotrodServer = HotRodTestingUtil.startHotRodServer(embeddedCacheManager, 19723);\n       ConfigurationBuilder builder = new ConfigurationBuilder();\n-      builder.addServer().host(\"localhost\").port(hotrodServer.getPort())\n-            .marshaller(new JavaSerializationMarshaller())\n-            .addJavaSerialAllowList(SPRING_JAVA_SERIAL_ALLOWLIST.split(\",\"));\n+      builder.addServer().host(\"localhost\").port(hotrodServer.getPort());\n+      if (mediaType.equals(MediaType.APPLICATION_SERIALIZED_OBJECT)) {\n+         builder.marshaller(JavaSerializationMarshaller.class);\n+      } else {\n+         builder.marshaller(ProtoStreamMarshaller.class);\n+      }\n       remoteCacheManager = new RemoteCacheManager(builder.build());\n+      springRemoteCacheManager = new SpringRemoteCacheManager(remoteCacheManager);\n    }\n \n    @AfterMethod\n@@ -46,7 +66,7 @@ public void afterMethod() {\n \n    @AfterClass\n    public void afterClass() {\n-      remoteCacheManager.stop();\n+      springRemoteCacheManager.stop();\n       hotrodServer.stop();\n       embeddedCacheManager.stop();\n    }\n@@ -58,7 +78,7 @@ public void beforeMethod() throws Exception {\n \n    @Override\n    protected SpringCache createSpringCache() {\n-      return new SpringCache(remoteCacheManager.getCache());\n+      return springRemoteCacheManager.getCache(\"\");\n    }\n \n    @Override"
  }
]
