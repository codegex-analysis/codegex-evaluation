[
  {
    "sha": "806430aafde647cba727d6a3595e633bbd92b578",
    "filename": "commons/all/src/main/java/org/infinispan/commons/util/TypedProperties.java",
    "status": "modified",
    "additions": 63,
    "deletions": 55,
    "changes": 118,
    "blob_url": "https://github.com/infinispan/infinispan/blob/015dc4ede7df9b964627e24c76af9754e6850a01/commons/all/src/main/java/org/infinispan/commons/util/TypedProperties.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/015dc4ede7df9b964627e24c76af9754e6850a01/commons/all/src/main/java/org/infinispan/commons/util/TypedProperties.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/commons/all/src/main/java/org/infinispan/commons/util/TypedProperties.java?ref=015dc4ede7df9b964627e24c76af9754e6850a01",
    "patch": "@@ -1,6 +1,7 @@\n package org.infinispan.commons.util;\n \n import java.util.Properties;\n+import java.util.function.Function;\n \n import org.infinispan.commons.logging.Log;\n import org.infinispan.commons.logging.LogFactory;\n@@ -54,20 +55,18 @@ public int getIntProperty(String key, int defaultValue) {\n    }\n \n    public int getIntProperty(String key, int defaultValue, boolean doStringReplace) {\n-      String value = getProperty(key);\n-      if (value == null) return defaultValue;\n-      value = value.trim();\n-      if (value.length() == 0) return defaultValue;\n-\n-      if (doStringReplace)\n-         value = StringPropertyReplacer.replaceProperties(value);\n-\n-      try {\n-         return Integer.parseInt(value);\n-      }\n-      catch (NumberFormatException nfe) {\n-         log.unableToConvertStringPropertyToInt(value, defaultValue);\n-         return defaultValue;\n+      Object value = this.get(key);\n+      if (value instanceof Integer) {\n+         return (int) value;\n+      } else {\n+         return getPropertyFn(value, defaultValue, doStringReplace, valueStr -> {\n+            try {\n+               return Integer.parseInt(valueStr);\n+            } catch (NumberFormatException nfe) {\n+               log.unableToConvertStringPropertyToInt(valueStr, defaultValue);\n+               return defaultValue;\n+            }\n+         });\n       }\n    }\n \n@@ -76,20 +75,18 @@ public long getLongProperty(String key, long defaultValue) {\n    }\n \n    public long getLongProperty(String key, long defaultValue, boolean doStringReplace) {\n-      String value = getProperty(key);\n-      if (value == null) return defaultValue;\n-      value = value.trim();\n-      if (value.length() == 0) return defaultValue;\n-\n-      if (doStringReplace)\n-         value = StringPropertyReplacer.replaceProperties(value);\n-\n-      try {\n-         return Long.parseLong(value);\n-      }\n-      catch (NumberFormatException nfe) {\n-         log.unableToConvertStringPropertyToLong(value, defaultValue);\n-         return defaultValue;\n+      Object value = this.get(key);\n+      if (value instanceof Long) {\n+         return (long) value;\n+      } else {\n+         return getPropertyFn(value, defaultValue, doStringReplace, valueStr -> {\n+            try {\n+               return Long.parseLong(valueStr);\n+            } catch (NumberFormatException nfe) {\n+               log.unableToConvertStringPropertyToLong(valueStr, defaultValue);\n+               return defaultValue;\n+            }\n+         });\n       }\n    }\n \n@@ -98,20 +95,18 @@ public boolean getBooleanProperty(String key, boolean defaultValue) {\n    }\n \n    public boolean getBooleanProperty(String key, boolean defaultValue, boolean doStringReplace) {\n-      String value = getProperty(key);\n-      if (value == null) return defaultValue;\n-      value = value.trim();\n-      if (value.length() == 0) return defaultValue;\n-\n-      if (doStringReplace)\n-         value = StringPropertyReplacer.replaceProperties(value);\n-\n-      try {\n-         return Boolean.parseBoolean(value);\n-      }\n-      catch (Exception e) {\n-         log.unableToConvertStringPropertyToBoolean(value, defaultValue);\n-         return defaultValue;\n+      Object value = this.get(key);\n+      if (value instanceof Boolean) {\n+         return (boolean) value;\n+      } else {\n+         return getPropertyFn(value, defaultValue, doStringReplace, valueStr -> {\n+            try {\n+               return Boolean.parseBoolean(valueStr);\n+            } catch (Exception e) {\n+               log.unableToConvertStringPropertyToBoolean(valueStr, defaultValue);\n+               return defaultValue;\n+            }\n+         });\n       }\n    }\n \n@@ -120,19 +115,18 @@ public boolean getBooleanProperty(String key, boolean defaultValue, boolean doSt\n    }\n \n    public <T extends Enum<T>> T getEnumProperty(String key, Class<T> enumClass, T defaultValue, boolean doStringReplace) {\n-      String value = getProperty(key);\n-      if (value == null) return defaultValue;\n-      value = value.trim();\n-      if (value.length() == 0) return defaultValue;\n-\n-      if (doStringReplace)\n-         value = StringPropertyReplacer.replaceProperties(value);\n-\n-      try {\n-         return Enum.valueOf(enumClass, value);\n-      } catch (IllegalArgumentException e) {\n-         log.unableToConvertStringPropertyToEnum(value, defaultValue.name());\n-         return defaultValue;\n+      Object value = this.get(key);\n+      if (value instanceof Enum && enumClass.isInstance(value)) {\n+         return (T) value;\n+      } else {\n+         return getPropertyFn(value, defaultValue, doStringReplace, valueStr -> {\n+            try {\n+               return Enum.valueOf(enumClass, valueStr);\n+            } catch (IllegalArgumentException e) {\n+               log.unableToConvertStringPropertyToEnum(valueStr, defaultValue.name());\n+               return defaultValue;\n+            }\n+         });\n       }\n    }\n \n@@ -201,4 +195,18 @@ public synchronized TypedProperties setProperty(String key, boolean value) {\n       super.setProperty(key, Boolean.toString(value));\n       return this;\n    }\n+\n+   private <V> V getPropertyFn(Object value, V defaultValue, boolean doStringReplace, Function<String, V> action) {\n+      String valueStr = null;\n+      if (value instanceof String) {\n+         valueStr = (String) value;\n+      }\n+      if (valueStr == null) return defaultValue;\n+      valueStr = valueStr.trim();\n+      if (valueStr.length() == 0) return defaultValue;\n+\n+      if (doStringReplace)\n+         valueStr = StringPropertyReplacer.replaceProperties(valueStr);\n+      return action.apply(valueStr);\n+   }\n }"
  },
  {
    "sha": "6d3d82b2b688abe90c7a9346eb7a0ed07d304df9",
    "filename": "commons/all/src/test/java/org/infinispan/commons/util/TypedPropertiesTest.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/infinispan/infinispan/blob/015dc4ede7df9b964627e24c76af9754e6850a01/commons/all/src/test/java/org/infinispan/commons/util/TypedPropertiesTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/015dc4ede7df9b964627e24c76af9754e6850a01/commons/all/src/test/java/org/infinispan/commons/util/TypedPropertiesTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/commons/all/src/test/java/org/infinispan/commons/util/TypedPropertiesTest.java?ref=015dc4ede7df9b964627e24c76af9754e6850a01",
    "patch": "@@ -0,0 +1,89 @@\n+package org.infinispan.commons.util;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Properties;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link TypedProperties}.\n+ *\n+ * @author Diego Lovison\n+ * @since 12.1\n+ **/\n+public class TypedPropertiesTest {\n+\n+   @Test\n+   public void testIntProperty() {\n+      TypedProperties p = createProperties();\n+      assertEquals(1, p.getIntProperty(\"int\", 999));\n+      assertEquals(10, p.getIntProperty(\"int_put_str\", 999));\n+      assertEquals(1, p.getIntProperty(\"int_invalid\", 1));\n+      assertEquals(1, p.getIntProperty(\"int_null\", 1));\n+\n+      System.setProperty(\"fooVar\", \"1\");\n+      assertEquals(1, p.getIntProperty(\"int_key_value_replacement\", 1, true));\n+      System.clearProperty(\"fooVar\");\n+   }\n+\n+   @Test\n+   public void testLongProperty() {\n+      TypedProperties p = createProperties();\n+      assertEquals(2L, p.getLongProperty(\"long\", 999L));\n+      assertEquals(20L, p.getLongProperty(\"long_put_str\", 999L));\n+      assertEquals(2L, p.getLongProperty(\"long_invalid\", 2L));\n+      assertEquals(2L, p.getLongProperty(\"long_null\", 2L));\n+   }\n+\n+   @Test\n+   public void testBooleanProperty() {\n+      TypedProperties p = createProperties();\n+      assertEquals(true, p.getBooleanProperty(\"boolean\", false));\n+      assertEquals(true, p.getBooleanProperty(\"boolean_put_str\", false));\n+      assertEquals(true, p.getBooleanProperty(\"boolean_invalid\", true));\n+      assertEquals(true, p.getBooleanProperty(\"boolean_null\", true));\n+   }\n+\n+   @Test\n+   public void testEnumProperty() {\n+      TypedProperties p = createProperties();\n+      assertEquals(COLOR.BLUE, p.getEnumProperty(\"enum_cast\", COLOR.class, COLOR.BLUE));\n+      assertEquals(COLOR.RED, p.getEnumProperty(\"enum\", COLOR.class, COLOR.BLUE));\n+      assertEquals(COLOR.RED, p.getEnumProperty(\"enum_put_str\", COLOR.class, COLOR.BLUE));\n+      assertEquals(COLOR.BLUE, p.getEnumProperty(\"enum_invalid\", COLOR.class, COLOR.BLUE));\n+      assertEquals(COLOR.BLUE, p.getEnumProperty(\"enum_null\", COLOR.class, COLOR.BLUE));\n+      assertEquals(COLOR.BLUE, p.getEnumProperty(\"enum_other\", COLOR.class, COLOR.BLUE));\n+   }\n+\n+   private enum COLOR {\n+      RED, BLUE\n+   }\n+\n+   private enum NUMBER {\n+      NUMBER_1\n+   }\n+\n+   private TypedProperties createProperties() {\n+      Properties p = new Properties();\n+      p.put(\"int\", 1);\n+      p.put(\"int_put_str\", Integer.toString(10));\n+      p.put(\"int_invalid\", false);\n+      p.put(\"int_key_value_replacement\", \"${fooVar}\");\n+\n+      p.put(\"long\", 2L);\n+      p.put(\"long_put_str\", Long.toString(20L));\n+      p.put(\"long_invalid\", false);\n+\n+      p.put(\"boolean\", true);\n+      p.put(\"boolean_put_str\", Boolean.toString(true));\n+      p.put(\"boolean_invalid\", COLOR.RED);\n+\n+      p.put(\"enum\", COLOR.RED);\n+      p.put(\"enum_put_str\", COLOR.RED.toString());\n+      p.put(\"enum_invalid\", false);\n+      p.put(\"enum_other\", NUMBER.NUMBER_1);\n+\n+      return new TypedProperties(p);\n+   }\n+}"
  }
]
