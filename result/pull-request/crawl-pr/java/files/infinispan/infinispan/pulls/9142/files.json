[
  {
    "sha": "fb5c79bb781fb963d895da6accf886d654c6356b",
    "filename": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transport/netty/ChannelInitializer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transport/netty/ChannelInitializer.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transport/netty/ChannelInitializer.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transport/netty/ChannelInitializer.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -157,6 +157,7 @@ private void initAuthentication(Channel channel, AuthenticationConfiguration aut\n       Principal principal = sslHandler != null ? sslHandler.engine().getSession().getLocalPrincipal() : null;\n       String authorizationId = principal != null ? principal.getName() : null;\n       if (authentication.clientSubject() != null) {\n+         // We must use Subject.doAs() instead of Security.doAs()\n          saslClient = Subject.doAs(authentication.clientSubject(), (PrivilegedExceptionAction<SaslClient>) () ->\n                scf.createSaslClient(new String[]{authentication.saslMechanism()}, authorizationId, \"hotrod\",\n                      authentication.serverName(), authentication.saslProperties(), authentication.callbackHandler())"
  },
  {
    "sha": "c30808e43ee6c66459d5d89a7485fc64951d45cc",
    "filename": "client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/DigestAuthenticator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/DigestAuthenticator.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/DigestAuthenticator.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/DigestAuthenticator.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -93,6 +93,7 @@ public synchronized Request authenticate(Route route, Response response) throws\n       return authenticateWithState(route, response.request(), parameters);\n    }\n \n+   @Override\n    public Request authenticateWithState(Route route, Request request) throws IOException {\n       Map<String, String> ref = parametersRef.get();\n       Map<String, String> parameters = ref == null"
  },
  {
    "sha": "5fb873201cff428a60d804db2af3d38741bcab70",
    "filename": "client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/NegotiateAuthenticator.java",
    "status": "modified",
    "additions": 19,
    "deletions": 9,
    "changes": 28,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/NegotiateAuthenticator.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/NegotiateAuthenticator.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/auth/NegotiateAuthenticator.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -1,8 +1,10 @@\n package org.infinispan.client.rest.impl.okhttp.auth;\n \n+import java.io.IOException;\n import java.security.PrivilegedActionException;\n import java.security.PrivilegedExceptionAction;\n import java.util.Base64;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import javax.security.auth.Subject;\n \n@@ -18,11 +20,12 @@\n import okhttp3.Response;\n import okhttp3.Route;\n \n-public class NegotiateAuthenticator extends AbstractAuthenticator implements Authenticator {\n+public class NegotiateAuthenticator extends AbstractAuthenticator implements CachingAuthenticator {\n    private static final String SPNEGO_OID = \"1.3.6.1.5.5.2\";\n    private final AuthenticationConfiguration configuration;\n    private final GSSManager gssManager;\n    private final Oid oid;\n+   private final AtomicReference<String> token = new AtomicReference<>();\n \n    public NegotiateAuthenticator(AuthenticationConfiguration configuration) {\n       this.configuration = configuration;\n@@ -40,34 +43,41 @@ public Request authenticate(Route route, Response response) {\n       return authenticateInternal(route, request);\n    }\n \n+   @Override\n+   public Request authenticateWithState(Route route, Request request) throws IOException {\n+      return request.newBuilder()\n+            .header(WWW_AUTH_RESP, \"Negotiate \" + token.get())\n+            .build();\n+   }\n+\n    private Request authenticateInternal(Route route, Request request) {\n       try {\n          // Initial empty challenge\n          String host = route.address().url().host();\n-         byte[] token = generateToken(null, host);\n+         token.set(generateToken(null, host));\n          return request.newBuilder()\n-               .header(WWW_AUTH_RESP, \"Negotiate \" + Base64.getEncoder().encodeToString(token))\n+               .header(WWW_AUTH_RESP, \"Negotiate \" + token.get())\n+               .tag(Authenticator.class, this)\n                .build();\n       } catch (GSSException e) {\n          throw new AuthenticationException(e.getMessage(), e);\n       }\n    }\n \n-   protected byte[] generateToken(byte[] input, String authServer) throws GSSException {\n+   protected String generateToken(byte[] input, String authServer) throws GSSException {\n       GSSName serverName = gssManager.createName(\"HTTP@\" + authServer, GSSName.NT_HOSTBASED_SERVICE);\n       GSSContext gssContext = gssManager.createContext(serverName.canonicalize(oid), oid, null, GSSContext.DEFAULT_LIFETIME);\n       gssContext.requestMutualAuth(true);\n       try {\n-         return Subject.doAs(configuration.clientSubject(), (PrivilegedExceptionAction<byte[]>) () ->\n+         byte[] bytes = Subject.doAs(configuration.clientSubject(), (PrivilegedExceptionAction<byte[]>) () ->\n                input != null\n-               ? gssContext.initSecContext(input, 0, input.length)\n-               : gssContext.initSecContext(new byte[]{}, 0, 0)\n+                     ? gssContext.initSecContext(input, 0, input.length)\n+                     : gssContext.initSecContext(new byte[]{}, 0, 0)\n \n          );\n+         return Base64.getEncoder().encodeToString(bytes);\n       } catch (PrivilegedActionException e) {\n          throw new SecurityException(e);\n       }\n    }\n-\n-\n }"
  },
  {
    "sha": "ed5fabc2594dbf0a2398b35ddb267c0df1a49a00",
    "filename": "commons/all/pom.xml",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/commons/all/pom.xml",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/commons/all/pom.xml",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/commons/all/pom.xml?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -199,6 +199,30 @@\n                </execution>\n             </executions>\n          </plugin>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-clean-plugin</artifactId>\n+            <executions>\n+               <execution>\n+                  <id>clean-metainf-services</id>\n+                  <phase>install</phase>\n+                  <goals>\n+                     <goal>clean</goal>\n+                  </goals>\n+                  <configuration>\n+                     <excludeDefaultDirectories>true</excludeDefaultDirectories>\n+                     <filesets>\n+                        <fileset>\n+                           <directory>${project.build.outputDirectory}</directory>\n+                           <includes>\n+                              <include>META-INF/services/java.net.spi.URLStreamHandlerProvider</include>\n+                           </includes>\n+                        </fileset>\n+                     </filesets>\n+                  </configuration>\n+               </execution>\n+            </executions>\n+         </plugin>\n       </plugins>\n    </build>\n "
  },
  {
    "sha": "13f3a3219726bdd27066a22e2512a583cf53ef47",
    "filename": "core/src/main/java/org/infinispan/configuration/cache/AuthorizationConfigurationBuilder.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/configuration/cache/AuthorizationConfigurationBuilder.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/configuration/cache/AuthorizationConfigurationBuilder.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/configuration/cache/AuthorizationConfigurationBuilder.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -88,8 +88,15 @@ public void validate() {\n \n    @Override\n    public void validate(GlobalConfiguration globalConfig) {\n-      if (attributes.attribute(ENABLED).get() && !globalConfig.security().authorization().enabled())\n+      if (attributes.attribute(ENABLED).get() && !globalConfig.security().authorization().enabled()) {\n          throw CONFIG.globalSecurityAuthShouldBeEnabled();\n+      }\n+      Set<String> cacheRoles = attributes.attribute(ROLES).get();\n+      Set<String> globalRoles = globalConfig.security().authorization().roles().keySet();\n+      if (!globalRoles.containsAll(cacheRoles)) {\n+         cacheRoles.removeAll(globalRoles);\n+         throw CONFIG.noSuchGlobalRoles(cacheRoles);\n+      }\n    }\n \n    @Override"
  },
  {
    "sha": "5b55f5fc935d72b4bbf7b7cb6854dd260921b354",
    "filename": "core/src/main/java/org/infinispan/configuration/global/GlobalAuthorizationConfigurationBuilder.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/configuration/global/GlobalAuthorizationConfigurationBuilder.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/configuration/global/GlobalAuthorizationConfigurationBuilder.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/configuration/global/GlobalAuthorizationConfigurationBuilder.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -38,20 +38,22 @@ public GlobalAuthorizationConfigurationBuilder(GlobalSecurityConfigurationBuilde\n    }\n \n    public GlobalAuthorizationConfigurationBuilder enable() {\n-      attributes.attribute(ENABLED).set(true);\n-      return this;\n+      return this.enabled(true);\n    }\n \n    public GlobalAuthorizationConfigurationBuilder disable() {\n-      attributes.attribute(ENABLED).set(false);\n-      return this;\n+      return this.enabled(false);\n    }\n \n    public GlobalAuthorizationConfigurationBuilder enabled(boolean enabled) {\n       attributes.attribute(ENABLED).set(enabled);\n       return this;\n    }\n \n+   public boolean isEnabled() {\n+      return attributes.attribute(ENABLED).get();\n+   }\n+\n    public GlobalAuthorizationConfigurationBuilder cacheSize(long cacheSize) {\n       attributes.attribute(CACHE_SIZE).set(cacheSize);\n       return this;"
  },
  {
    "sha": "d4a638d0825b7bb1866b4bd844c4151bafb3e205",
    "filename": "core/src/main/java/org/infinispan/globalstate/impl/SecurityActions.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/globalstate/impl/SecurityActions.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/globalstate/impl/SecurityActions.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/globalstate/impl/SecurityActions.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -3,6 +3,7 @@\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n \n+import org.infinispan.Cache;\n import org.infinispan.configuration.cache.Configuration;\n import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.manager.EmbeddedCacheManager;\n@@ -45,4 +46,8 @@ static GlobalComponentRegistry getGlobalComponentRegistry(EmbeddedCacheManager c\n    static Configuration getCacheConfiguration(EmbeddedCacheManager cacheManager, String name) {\n       return doPrivileged(new GetCacheConfigurationFromManagerAction(cacheManager, name));\n    }\n+\n+   static void stopCache(Cache<?, ?> cache) {\n+      doPrivileged(() -> {cache.stop(); return null;});\n+   }\n }"
  },
  {
    "sha": "05fec15e9560dca16b66e60573d41e0919d5353c",
    "filename": "core/src/main/java/org/infinispan/globalstate/impl/VolatileLocalConfigurationStorage.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/globalstate/impl/VolatileLocalConfigurationStorage.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/globalstate/impl/VolatileLocalConfigurationStorage.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/globalstate/impl/VolatileLocalConfigurationStorage.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -108,7 +108,7 @@ protected void removeCacheSync(String name, EnumSet<CacheContainerAdmin.AdminFla\n          cacheComponentRegistry.getComponent(PassivationManager.class).skipPassivationOnStop(true);\n          Cache<?, ?> cache = cacheManager.getCache(name, false);\n          if (cache != null) {\n-            cache.stop();\n+            SecurityActions.stopCache(cache);\n          }\n       }\n       globalComponentRegistry.removeCache(name);"
  },
  {
    "sha": "43fde21a8ec3489d5cd5984f636aebd864dfaf07",
    "filename": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/manager/DefaultCacheManager.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/manager/DefaultCacheManager.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/manager/DefaultCacheManager.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -1175,7 +1175,6 @@ public ClassAllowList getClassAllowList() {\n \n    @Override\n    public EmbeddedCacheManagerAdmin administration() {\n-      authorizer.checkPermission(getSubject(), AuthorizationPermission.ADMIN);\n       return cacheManagerAdmin;\n    }\n "
  },
  {
    "sha": "f58f01a00c9cad890a33a7eb5b1b68c2957ed53d",
    "filename": "core/src/main/java/org/infinispan/security/Security.java",
    "status": "modified",
    "additions": 36,
    "deletions": 9,
    "changes": 45,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/Security.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/Security.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/security/Security.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -31,14 +31,16 @@\n \n    private static final ThreadLocal<Boolean> PRIVILEGED = ThreadLocal.withInitial(() -> Boolean.FALSE);\n \n-   private static final ThreadLocal<Deque<Subject>> SUBJECT = new ThreadLocal<>();\n-   /*new InheritableThreadLocal() {\n+   /*\n+    * We don't override initialValue because we don't want to allocate the ArrayDeque if we just want to check if a\n+    * Subject has been set.\n+    */\n+   private static final ThreadLocal<Deque<Subject>> SUBJECT = new InheritableThreadLocal<Deque<Subject>>() {\n       @Override\n-      protected Object childValue(Object parentValue) {\n-         System.out.println(\"Inheriting \" + parentValue);\n-         return parentValue;\n+      protected Deque<Subject> childValue(Deque<Subject> parentValue) {\n+         return parentValue == null ? null : new ArrayDeque<>(parentValue);\n       }\n-   };*/\n+   };\n \n    private static boolean isTrustedClass(Class<?> klass) {\n       // TODO: implement a better way\n@@ -82,7 +84,7 @@ private static boolean isTrustedClass(Class<?> klass) {\n    private static Deque<Subject> pre(Subject subject) {\n       Deque<Subject> stack = SUBJECT.get();\n       if (stack == null) {\n-         stack = new ArrayDeque<>();\n+         stack = new ArrayDeque<>(3);\n          SUBJECT.set(stack);\n       }\n       if (subject != null) {\n@@ -177,8 +179,9 @@ public static boolean isPrivileged() {\n     * the {@link Subject} associated with the current {@link AccessControlContext}\n     */\n    public static Subject getSubject() {\n-      if (SUBJECT.get() != null) {\n-         return SUBJECT.get().peek();\n+      Deque<Subject> subjects = SUBJECT.get();\n+      if (subjects != null && !subjects.isEmpty()) {\n+         return subjects.peek();\n       } else {\n          AccessControlContext acc = AccessController.getContext();\n          if (System.getSecurityManager() == null) {\n@@ -198,4 +201,28 @@ public static Principal getSubjectUserPrincipal(Subject s) {\n       }\n       return null;\n    }\n+\n+   /**\n+    * A simplified version of Subject.toString() with the following advantages:\n+    * <ul>\n+    *    <li>only lists principals, ignoring credentials</li>\n+    *    <li>uses a compact, single-line format</li>\n+    *    <li>does not use synchronization</li>\n+    *    <li>does not use i18n messages</li>\n+    * </ul></uk>\n+    * @param subject\n+    * @return\n+    */\n+   public static String toString(Subject subject) {\n+      StringBuilder sb = new StringBuilder(\"Subject: [\");\n+      boolean comma = false;\n+      for(Principal p : subject.getPrincipals()) {\n+         if (comma) {\n+            sb.append(\" ,\");\n+         }\n+         sb.append(p.toString());\n+         comma = true;\n+      }\n+      return sb.append(']').toString();\n+   }\n }"
  },
  {
    "sha": "1644bd386c48738ac2b16bc446d936a93488cb0a",
    "filename": "core/src/main/java/org/infinispan/security/actions/GetOrCreateCacheAction.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/actions/GetOrCreateCacheAction.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/actions/GetOrCreateCacheAction.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/security/actions/GetOrCreateCacheAction.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -0,0 +1,31 @@\n+package org.infinispan.security.actions;\n+\n+import java.security.PrivilegedAction;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+\n+/**\n+ * GetOrCreateCacheAction.\n+ *\n+ * @author Tristan Tarrant\n+ * @since 12.1\n+ */\n+public class GetOrCreateCacheAction implements PrivilegedAction<Cache<?, ?>> {\n+\n+   private final String cacheName;\n+   private final EmbeddedCacheManager cacheManager;\n+   private final Configuration configuration;\n+\n+   public GetOrCreateCacheAction(EmbeddedCacheManager cacheManager, String cacheName, Configuration configuration) {\n+      this.cacheManager = cacheManager;\n+      this.cacheName = cacheName;\n+      this.configuration = configuration;\n+   }\n+\n+   @Override\n+   public Cache<?, ?> run() {\n+      return cacheManager.administration().getOrCreateCache(cacheName, configuration);\n+   }\n+}"
  },
  {
    "sha": "5c1f69005fa29ad71594ed81672fc8ef2ffc93a5",
    "filename": "core/src/main/java/org/infinispan/security/actions/GetOrCreateTemplateAction.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/actions/GetOrCreateTemplateAction.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/actions/GetOrCreateTemplateAction.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/security/actions/GetOrCreateTemplateAction.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -0,0 +1,30 @@\n+package org.infinispan.security.actions;\n+\n+import java.security.PrivilegedAction;\n+\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+\n+/**\n+ * GetOrCreateCacheAction.\n+ *\n+ * @author Tristan Tarrant\n+ * @since 12.1\n+ */\n+public class GetOrCreateTemplateAction implements PrivilegedAction<Configuration> {\n+\n+   private final String cacheName;\n+   private final EmbeddedCacheManager cacheManager;\n+   private final Configuration configuration;\n+\n+   public GetOrCreateTemplateAction(EmbeddedCacheManager cacheManager, String cacheName, Configuration configuration) {\n+      this.cacheManager = cacheManager;\n+      this.cacheName = cacheName;\n+      this.configuration = configuration;\n+   }\n+\n+   @Override\n+   public Configuration run() {\n+      return cacheManager.administration().getOrCreateTemplate(cacheName, configuration);\n+   }\n+}"
  },
  {
    "sha": "192ad85b442c2116f0cb327136c8befae267a50e",
    "filename": "core/src/main/java/org/infinispan/security/actions/GetUnwrappedCacheAction.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/actions/GetUnwrappedCacheAction.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/security/actions/GetUnwrappedCacheAction.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/security/actions/GetUnwrappedCacheAction.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -0,0 +1,31 @@\n+package org.infinispan.security.actions;\n+\n+import java.security.PrivilegedAction;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.security.impl.SecureCacheImpl;\n+\n+/**\n+ * GetUnwrappedCacheAction.\n+ *\n+ * @author Tristan Tarrant\n+ * @since 12.1\n+ */\n+public class GetUnwrappedCacheAction<A extends Cache<K, V>, K, V> implements PrivilegedAction<A> {\n+\n+   private final A cache;\n+\n+   public GetUnwrappedCacheAction(A cache) {\n+      this.cache = cache;\n+   }\n+\n+   @Override\n+   public A run() {\n+      if (cache instanceof SecureCacheImpl) {\n+         return (A) ((SecureCacheImpl) cache).getDelegate();\n+      } else {\n+         return (A) cache.getAdvancedCache();\n+      }\n+   }\n+\n+}"
  },
  {
    "sha": "bf4e2bb0abcc50ecfaf1783bc61eabd202bba759",
    "filename": "core/src/main/java/org/infinispan/util/logging/Log.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/util/logging/Log.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/util/logging/Log.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/util/logging/Log.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -16,6 +16,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n \n@@ -2139,4 +2140,7 @@ CacheConfigurationException storeConfiguredHasBothReadAndWriteOnly(String storeC\n \n    @Message(value = \"Invalid cache loader configuration for '%s'.  This implementation only supports being segmented!\", id = 627)\n    CacheConfigurationException storeRequiresBeingSegmented(String name);\n+\n+   @Message(value = \"Invalid cache roles '%s'\", id = 628)\n+   CacheConfigurationException noSuchGlobalRoles(Set<String> cacheRoles);\n }"
  },
  {
    "sha": "3127f90c49e2442f6bb4fb4f1e9df9465e887854",
    "filename": "core/src/main/java/org/infinispan/xsite/SecurityActions.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/xsite/SecurityActions.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/main/java/org/infinispan/xsite/SecurityActions.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/main/java/org/infinispan/xsite/SecurityActions.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -43,6 +43,6 @@ static GlobalComponentRegistry getGlobalComponentRegistry(final EmbeddedCacheMan\n \n    static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n       Authorizer authorizer = getGlobalComponentRegistry(cacheManager).getComponent(Authorizer.class);\n-      authorizer.checkPermission(cacheManager.getSubject(), permission);\n+      authorizer.checkPermission(permission);\n    }\n }"
  },
  {
    "sha": "f3f5e0a8862dc93de3828c846734b49c3ca2e337",
    "filename": "core/src/test/java/org/infinispan/security/SecurityXmlFileParsingTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 23,
    "changes": 42,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/test/java/org/infinispan/security/SecurityXmlFileParsingTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/core/src/test/java/org/infinispan/security/SecurityXmlFileParsingTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/core/src/test/java/org/infinispan/security/SecurityXmlFileParsingTest.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -24,29 +24,25 @@\n    Subject ADMIN = TestingUtil.makeSubject(\"admin\");\n \n    public void testParseAndConstructUnifiedXmlFile() throws Exception {\n-      Subject.doAs(ADMIN, new PrivilegedExceptionAction<Void>() {\n-\n-         @Override\n-         public Void run() throws Exception {\n-            withCacheManager(new CacheManagerCallable(\n-                  TestCacheManagerFactory.fromXml(\"configs/security.xml\", true)) {\n-               @Override\n-               public void call() {\n-                  GlobalConfiguration g = cm.getCacheManagerConfiguration();\n-\n-                  assertTrue(g.security().authorization().enabled());\n-                  assertEquals(IdentityRoleMapper.class, g.security().authorization().principalRoleMapper().getClass());\n-                  Map<String, Role> globalRoles = g.security().authorization().roles();\n-                  assertTrue(globalRoles.containsKey(\"supervisor\"));\n-                  assertTrue(globalRoles.get(\"supervisor\").getPermissions().containsAll(Arrays.asList(AuthorizationPermission.READ, AuthorizationPermission.WRITE, AuthorizationPermission.EXEC)));\n-\n-                  Configuration c = cm.getCache(\"secured\").getCacheConfiguration();\n-                  assertTrue(c.security().authorization().enabled());\n-                  c.security().authorization().roles().containsAll(Arrays.asList(\"admin\", \"reader\", \"writer\"));\n-               }\n-            });\n-            return null;\n-         }\n+      Security.doAs(ADMIN, (PrivilegedExceptionAction<Void>) () -> {\n+         withCacheManager(new CacheManagerCallable(\n+               TestCacheManagerFactory.fromXml(\"configs/security.xml\", true)) {\n+            @Override\n+            public void call() {\n+               GlobalConfiguration g = cm.getCacheManagerConfiguration();\n+\n+               assertTrue(g.security().authorization().enabled());\n+               assertEquals(IdentityRoleMapper.class, g.security().authorization().principalRoleMapper().getClass());\n+               Map<String, Role> globalRoles = g.security().authorization().roles();\n+               assertTrue(globalRoles.containsKey(\"supervisor\"));\n+               assertTrue(globalRoles.get(\"supervisor\").getPermissions().containsAll(Arrays.asList(AuthorizationPermission.READ, AuthorizationPermission.WRITE, AuthorizationPermission.EXEC)));\n+\n+               Configuration c = cm.getCache(\"secured\").getCacheConfiguration();\n+               assertTrue(c.security().authorization().enabled());\n+               c.security().authorization().roles().containsAll(Arrays.asList(\"admin\", \"reader\", \"writer\"));\n+            }\n+         });\n+         return null;\n       });\n \n    }"
  },
  {
    "sha": "c0b5a65737b5dbd57a27f413ca0d275262ac3f04",
    "filename": "server/core/src/main/java/org/infinispan/server/core/backup/BackupWriter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/BackupWriter.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/BackupWriter.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/core/src/main/java/org/infinispan/server/core/backup/BackupWriter.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -112,7 +112,7 @@ void cleanup() {\n       stages.dependsOn(\n             // Write the global configuration xml\n             blockingManager.runBlocking(() ->\n-                  writeGlobalConfig(cm.getCacheManagerConfiguration(), containerRoot), \"global-config\")\n+                  writeGlobalConfig(SecurityActions.getGlobalConfiguration(cm), containerRoot), \"global-config\")\n       );\n \n       return blockingManager.thenRunBlocking("
  },
  {
    "sha": "c1273bf114db08c43c5ec2a5bb6bf48ff83f1e29",
    "filename": "server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -1,7 +1,7 @@\n package org.infinispan.server.core.backup;\n \n /**\n- * SecurityActions for the org.infinispan.server.server package.\n+ * SecurityActions for the org.infinispan.server.core.backup package.\n  * <p>\n  * Do not move. Do not change class and method visibility to avoid being called from other {@link\n  * java.security.CodeSource}s, thus granting privilege escalation to external code."
  },
  {
    "sha": "f971ad9752b89244d46a7c31241f8e08b0943f79",
    "filename": "server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheConfigResource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheConfigResource.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheConfigResource.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheConfigResource.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -45,7 +45,7 @@\n    public void prepareAndValidateBackup() {\n       Set<String> configs = wildcard ? cm.getCacheConfigurationNames() : resources;\n       for (String configName : configs) {\n-         Configuration config = cm.getCacheConfiguration(configName);//SecurityActions.getConfiguration(cm, configName);\n+         Configuration config = SecurityActions.getCacheConfiguration(cm, configName);\n \n          if (wildcard) {\n             // For wildcard resources, we ignore internal caches, however explicitly requested internal caches are allowed\n@@ -67,7 +67,7 @@ public void prepareAndValidateBackup() {\n          mkdirs(root);\n \n          for (String configName : resources) {\n-            Configuration config = cm.getCacheConfiguration(configName);\n+            Configuration config = SecurityActions.getCacheConfiguration(cm, configName);\n             String fileName = configFile(configName);\n             Path xmlPath = root.resolve(String.format(\"%s.xml\", configName));\n             try (OutputStream os = Files.newOutputStream(xmlPath)) {\n@@ -94,7 +94,7 @@ public void prepareAndValidateBackup() {\n \n                // Only define configurations that don't already exist so that we don't overwrite newer versions of the default\n                // templates e.g. org.infinispan.DIST_SYNC when upgrading a cluster\n-               cm.administration().getOrCreateTemplate(configName, cfg);\n+               SecurityActions.getOrCreateTemplate(cm, configName, cfg);\n                log.debugf(\"Restoring template %s: %s\", configName, cfg.toXMLString(configName));\n             } catch (IOException e) {\n                throw new CacheException(e);"
  },
  {
    "sha": "4389f42ed7ffba167211e519e6342e7789fe5c15",
    "filename": "server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheResource.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheResource.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheResource.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/core/src/main/java/org/infinispan/server/core/backup/resources/CacheResource.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -75,11 +75,11 @@\n \n    @Override\n    public void prepareAndValidateBackup() {\n-      InternalCacheRegistry icr = cm.getGlobalComponentRegistry().getComponent(InternalCacheRegistry.class);\n+      InternalCacheRegistry icr = SecurityActions.getGlobalComponentRegistry(cm).getComponent(InternalCacheRegistry.class);\n \n       Set<String> caches = wildcard ? cm.getCacheConfigurationNames() : resources;\n       for (String cache : caches) {\n-         Configuration config = cm.getCacheConfiguration(cache);\n+         Configuration config = SecurityActions.getCacheConfiguration(cm, cache);\n \n          if (wildcard) {\n             // For wildcard resources, we ignore internal caches, however explicitly requested internal caches are allowed\n@@ -119,7 +119,7 @@ public void prepareAndValidateBackup() {\n                log.debugf(\"Restoring Cache %s: %s\", cacheName, cfg.toXMLString(cacheName));\n                // GetOrCreate in the event that a default cache is defined. This also allows cache-configurations to be\n                // modified prior to a restore if only the backed up data is required\n-               cm.administration().getOrCreateCache(cacheName, cfg);\n+               SecurityActions.getOrCreateCache(cm, cacheName, cfg);\n             } catch (IOException e) {\n                throw new CacheException(e);\n             }\n@@ -132,7 +132,7 @@ public void prepareAndValidateBackup() {\n                return;\n \n             AdvancedCache<Object, Object> cache = cm.getCache(cacheName).getAdvancedCache();\n-            ComponentRegistry cr = cache.getComponentRegistry();\n+            ComponentRegistry cr = SecurityActions.getComponentRegistry(cache);\n             CommandsFactory commandsFactory = cr.getCommandsFactory();\n             KeyPartitioner keyPartitioner = cr.getComponent(KeyPartitioner.class);\n             InvocationHelper invocationHelper = cr.getComponent(InvocationHelper.class);\n@@ -143,7 +143,7 @@ public void prepareAndValidateBackup() {\n             boolean keyMarshalling = MediaType.APPLICATION_OBJECT.equals(scm.getValueStorageMediaType());\n             boolean valueMarshalling = MediaType.APPLICATION_OBJECT.equals(scm.getValueStorageMediaType());\n \n-            SerializationContextRegistry ctxRegistry = cm.getGlobalComponentRegistry().getComponent(SerializationContextRegistry.class);\n+            SerializationContextRegistry ctxRegistry = SecurityActions.getGlobalComponentRegistry(cm).getComponent(SerializationContextRegistry.class);\n             ImmutableSerializationContext serCtx = ctxRegistry.getPersistenceCtx();\n \n             int entries = 0;\n@@ -173,7 +173,7 @@ public void prepareAndValidateBackup() {\n    private CompletionStage<Void> createCacheBackup(String cacheName) {\n       return blockingManager.runBlocking(() -> {\n          AdvancedCache<?, ?> cache = cm.getCache(cacheName).getAdvancedCache();\n-         Configuration configuration = cm.getCacheConfiguration(cacheName);\n+         Configuration configuration = SecurityActions.getCacheConfiguration(cm, cacheName);\n \n          Path cacheRoot = root.resolve(cacheName);\n          // Create the cache backup dir and parents\n@@ -188,7 +188,7 @@ public void prepareAndValidateBackup() {\n             throw new CacheException(String.format(\"Unable to create backup file '%s'\", xmlFileName), e);\n          }\n \n-         ComponentRegistry cr = cache.getComponentRegistry();\n+         ComponentRegistry cr = SecurityActions.getComponentRegistry(cache);\n          ClusterPublisherManager<Object, Object> clusterPublisherManager = cr.getClusterPublisherManager().running();\n          SerializationContextRegistry ctxRegistry = cr.getGlobalComponentRegistry().getComponent(SerializationContextRegistry.class);\n          ImmutableSerializationContext serCtx = ctxRegistry.getPersistenceCtx();"
  },
  {
    "sha": "027cf35b671d28da2fcd77098b806c2992585883",
    "filename": "server/core/src/main/java/org/infinispan/server/core/backup/resources/InternalCacheResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/InternalCacheResource.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/InternalCacheResource.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/core/src/main/java/org/infinispan/server/core/backup/resources/InternalCacheResource.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -50,10 +50,10 @@ private InternalCacheResource(BackupManager.Resources.Type type, AdvancedCache<S\n    static ContainerResource create(BackupManager.Resources.Type type, BlockingManager blockingManager, EmbeddedCacheManager cm,\n                                    BackupManager.Resources params, Path root) {\n       String cacheName = cacheMap.get(type);\n-      if (cm.getCacheConfiguration(cacheName) == null)\n+      if (SecurityActions.getCacheConfiguration(cm, cacheName) == null)\n          return null;\n \n-      AdvancedCache<String, String> cache = cm.<String, String>getCache(cacheName).getAdvancedCache();\n+      AdvancedCache<String, String> cache = SecurityActions.getUnwrappedCache(cm.getCache(cacheName));\n       return new InternalCacheResource(type, cache, blockingManager, params, root);\n    }\n "
  },
  {
    "sha": "aac71c45b9bf49218e328d6aaf279bb171c63cef",
    "filename": "server/core/src/main/java/org/infinispan/server/core/backup/resources/SecurityActions.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/SecurityActions.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/core/src/main/java/org/infinispan/server/core/backup/resources/SecurityActions.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/core/src/main/java/org/infinispan/server/core/backup/resources/SecurityActions.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -0,0 +1,82 @@\n+package org.infinispan.server.core.backup.resources;\n+\n+/**\n+ * SecurityActions for the org.infinispan.server.core.backup.resources package.\n+ * <p>\n+ * Do not move. Do not change class and method visibility to avoid being called from other {@link\n+ * java.security.CodeSource}s, thus granting privilege escalation to external code.\n+ *\n+ * @author Tristan Tarrant\n+ * @since 12.1\n+ */\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import org.infinispan.AdvancedCache;\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+import org.infinispan.factories.ComponentRegistry;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.security.AuthorizationPermission;\n+import org.infinispan.security.Security;\n+import org.infinispan.security.actions.GetCacheComponentRegistryAction;\n+import org.infinispan.security.actions.GetCacheConfigurationFromManagerAction;\n+import org.infinispan.security.actions.GetCacheManagerConfigurationAction;\n+import org.infinispan.security.actions.GetGlobalComponentRegistryAction;\n+import org.infinispan.security.actions.GetOrCreateCacheAction;\n+import org.infinispan.security.actions.GetOrCreateTemplateAction;\n+import org.infinispan.security.actions.GetUnwrappedCacheAction;\n+import org.infinispan.security.impl.Authorizer;\n+\n+final class SecurityActions {\n+   private static <T> T doPrivileged(PrivilegedAction<T> action) {\n+      if (System.getSecurityManager() != null) {\n+         return AccessController.doPrivileged(action);\n+      } else {\n+         return Security.doPrivileged(action);\n+      }\n+   }\n+\n+   static GlobalConfiguration getGlobalConfiguration(final EmbeddedCacheManager cacheManager) {\n+      GetCacheManagerConfigurationAction action = new GetCacheManagerConfigurationAction(cacheManager);\n+      return doPrivileged(action);\n+   }\n+\n+   static GlobalComponentRegistry getGlobalComponentRegistry(final EmbeddedCacheManager cacheManager) {\n+      GetGlobalComponentRegistryAction action = new GetGlobalComponentRegistryAction(cacheManager);\n+      return doPrivileged(action);\n+   }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      Authorizer authorizer = getGlobalComponentRegistry(cacheManager).getComponent(Authorizer.class);\n+      authorizer.checkPermission(cacheManager.getSubject(), permission);\n+   }\n+\n+   static Configuration getCacheConfiguration(EmbeddedCacheManager cm, String cacheName) {\n+      GetCacheConfigurationFromManagerAction action = new GetCacheConfigurationFromManagerAction(cm, cacheName);\n+      return doPrivileged(action);\n+   }\n+\n+   static <K, V> AdvancedCache<K, V> getUnwrappedCache(Cache<K, V> cache) {\n+      GetUnwrappedCacheAction<AdvancedCache<K, V>, K, V> action = new GetUnwrappedCacheAction(cache);\n+      return doPrivileged(action);\n+   }\n+\n+   static Cache<?, ?> getOrCreateCache(EmbeddedCacheManager cm, String cacheName, Configuration cfg) {\n+      GetOrCreateCacheAction action = new GetOrCreateCacheAction(cm, cacheName, cfg);\n+      return doPrivileged(action);\n+   }\n+\n+   static Configuration getOrCreateTemplate(EmbeddedCacheManager cm, String configName, Configuration cfg) {\n+      GetOrCreateTemplateAction action = new GetOrCreateTemplateAction(cm, configName, cfg);\n+      return doPrivileged(action);\n+   }\n+\n+   static ComponentRegistry getComponentRegistry(AdvancedCache<?,?> cache) {\n+      GetCacheComponentRegistryAction action = new GetCacheComponentRegistryAction(cache);\n+      return doPrivileged(action);\n+   }\n+}"
  },
  {
    "sha": "5f4218536ada88b8588db931cc020496d3fa1e90",
    "filename": "server/hotrod/src/main/java/org/infinispan/server/hotrod/Authentication.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/hotrod/src/main/java/org/infinispan/server/hotrod/Authentication.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/hotrod/src/main/java/org/infinispan/server/hotrod/Authentication.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/hotrod/src/main/java/org/infinispan/server/hotrod/Authentication.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -142,6 +142,7 @@ private SaslServer createSaslServer(String mech) throws Throwable {\n       }\n       if (authenticationConfig.serverSubject() != null) {\n          try {\n+            // We must use Subject.doAs() here instead of Security.doAs()\n             return Subject.doAs(authenticationConfig.serverSubject(), (PrivilegedExceptionAction<SaslServer>) () ->\n                   sap.createSaslServer(mech, principals, HOTROD_SASL_PROTOCOL, authenticationConfig.serverName(),\n                         authenticationConfig.mechProperties()));"
  },
  {
    "sha": "62871a941710d9a82d7f4569e3973c2b7d3d1b48",
    "filename": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -340,7 +340,6 @@ private RestResponse getDetailResponse(Cache<?, ?> cache) {\n          stats = cache.getAdvancedCache().getStats();\n          DistributionManager distributionManager = cache.getAdvancedCache().getDistributionManager();\n          rehashInProgress = distributionManager != null && distributionManager.isRehashInProgress();\n-         queryable = invocationHelper.getRestCacheManager().isCacheQueryable(cache);\n       } catch (SecurityException ex) {\n          // Admin is needed\n       }\n@@ -355,6 +354,7 @@ private RestResponse getDetailResponse(Cache<?, ?> cache) {\n       SearchStatistics searchStatistics = Search.getSearchStatistics(cache);\n       IndexStatistics indexStatistics = searchStatistics.getIndexStatistics();\n       indexingInProgress = indexStatistics.reindexing();\n+      queryable = invocationHelper.getRestCacheManager().isCacheQueryable(cache);\n \n       boolean statistics = configuration.statistics().enabled();\n       boolean indexed = configuration.indexing().enabled();"
  },
  {
    "sha": "8ff8688d140f58701259d24b47f8bce6085535be",
    "filename": "server/rest/src/main/java/org/infinispan/rest/resources/SecurityResource.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/SecurityResource.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/SecurityResource.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/rest/src/main/java/org/infinispan/rest/resources/SecurityResource.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -144,16 +144,16 @@ public Invocations getInvocations() {\n             jsonSubjects.add(Json.object().set(\"name\", principal.getName()).set(\"type\", principal.getClass().getSimpleName()));\n          });\n          acl.set(\"subject\", jsonSubjects);\n-      }\n-      Authorizer authorizer = rcm.getAuthorizer();\n-      SubjectACL globalACL = authorizer.getACL(subject);\n-      acl.set(\"global\", aclToJson(globalACL));\n-      Json caches = Json.object();\n-      acl.set(\"caches\", caches);\n-      for (String cacheName : cacheNames) {\n-         Configuration cacheConfiguration = SecurityActions.getCacheConfigurationFromManager(rcm.getInstance(), cacheName);\n-         SubjectACL cacheACL = authorizer.getACL(subject, cacheConfiguration.security().authorization());\n-         caches.set(cacheName, aclToJson(cacheACL));\n+         Authorizer authorizer = rcm.getAuthorizer();\n+         SubjectACL globalACL = authorizer.getACL(subject);\n+         acl.set(\"global\", aclToJson(globalACL));\n+         Json caches = Json.object();\n+         acl.set(\"caches\", caches);\n+         for (String cacheName : cacheNames) {\n+            Configuration cacheConfiguration = SecurityActions.getCacheConfigurationFromManager(rcm.getInstance(), cacheName);\n+            SubjectACL cacheACL = authorizer.getACL(subject, cacheConfiguration.security().authorization());\n+            caches.set(cacheName, aclToJson(cacheACL));\n+         }\n       }\n       return asJsonResponseFuture(acl);\n    }"
  },
  {
    "sha": "b0709f885d1157f07b6fbb7aceae2f00c3ba80c2",
    "filename": "server/rest/src/main/java/org/infinispan/rest/resources/TasksResource.java",
    "status": "modified",
    "additions": 2,
    "deletions": 9,
    "changes": 11,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/TasksResource.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/TasksResource.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/rest/src/main/java/org/infinispan/rest/resources/TasksResource.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -9,12 +9,9 @@\n import static org.infinispan.rest.resources.ResourceUtil.addEntityAsJson;\n import static org.infinispan.rest.resources.ResourceUtil.asJsonResponseFuture;\n \n-import java.security.PrivilegedAction;\n import java.util.List;\n import java.util.concurrent.CompletionStage;\n \n-import javax.security.auth.Subject;\n-\n import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.commons.dataconversion.StandardConversions;\n import org.infinispan.commons.dataconversion.internal.Json;\n@@ -69,10 +66,7 @@ public Invocations getInvocations() {\n       byte[] bytes = contents.rawContent();\n       MediaType sourceType = request.contentType() == null ? APPLICATION_JAVASCRIPT : request.contentType();\n       String script = StandardConversions.convertTextToObject(bytes, sourceType);\n-      Subject.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {\n-         scriptingManager.addScript(taskName, script);\n-         return null;\n-      });\n+      scriptingManager.addScript(taskName, script);\n       return completedFuture(builder.build());\n    }\n \n@@ -87,8 +81,7 @@ public Invocations getInvocations() {\n          }\n       });\n \n-      CompletionStage<Object> runResult = Subject.doAs(request.getSubject(),\n-            (PrivilegedAction<CompletionStage<Object>>) () -> taskManager.runTask(taskName, taskContext));\n+      CompletionStage<Object> runResult = taskManager.runTask(taskName, taskContext);\n \n       return runResult.thenApply(result -> {\n          NettyRestResponse.Builder builder = new NettyRestResponse.Builder();"
  },
  {
    "sha": "63c09cdd2b1f47cce9d87ea055973720ba8fd277",
    "filename": "server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -19,8 +19,6 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n-import javax.security.auth.Subject;\n-\n import org.infinispan.Cache;\n import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.dataconversion.internal.JsonSerialization;\n@@ -156,7 +154,7 @@ public Invocations getInvocations() {\n       if (globalXSiteAdmin == null) return CompletableFuture.completedFuture(responseBuilder.status(NOT_FOUND).build());\n \n       return CompletableFuture.supplyAsync(() -> {\n-         Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) globalXSiteAdmin::globalStatus);\n+         Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) () -> globalXSiteAdmin.globalStatus());\n          Map<String, GlobalStatus> collect = globalStatus.entrySet().stream().collect(Collectors.toMap(Entry::getKey, e -> {\n             SiteStatus status = e.getValue();\n             if (status instanceof OnlineSiteStatus) return GlobalStatus.ONLINE;\n@@ -208,7 +206,7 @@ public Invocations getInvocations() {\n       String site = request.variables().get(\"site\");\n \n       XSiteAdminOperations xsiteAdmin = getXSiteAdmin(request);\n-      TakeOfflineConfiguration current = Security.doAs(request.getSubject(), (PrivilegedAction<TakeOfflineConfiguration>) () -> xsiteAdmin.getTakeOfflineConfiguration(site));\n+      TakeOfflineConfiguration current = xsiteAdmin.getTakeOfflineConfiguration(site);\n \n       if (current == null) {\n          return CompletableFuture.completedFuture(responseBuilder.status(NOT_FOUND).build());\n@@ -236,7 +234,7 @@ public Invocations getInvocations() {\n          return CompletableFuture.completedFuture(responseBuilder.status(HttpResponseStatus.NOT_MODIFIED).build());\n       }\n       return CompletableFuture.supplyAsync(() -> {\n-         String status = Subject.doAs(request.getSubject(), (PrivilegedAction<String>) () -> xsiteAdmin.amendTakeOffline(site, afterFailures, minWait));\n+         String status = Security.doAs(request.getSubject(), (PrivilegedAction<String>) () -> xsiteAdmin.amendTakeOffline(site, afterFailures, minWait));\n          if (!status.equals(XSiteAdminOperations.SUCCESS)) {\n             responseBuilder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(site);\n          }\n@@ -270,7 +268,7 @@ public Invocations getInvocations() {\n \n       return CompletableFuture.supplyAsync(\n             () -> {\n-               Map<Address, String> result = Subject.doAs(request.getSubject(), (PrivilegedAction<Map<Address, String>>) () -> xsiteAdmin.nodeStatus(site));\n+               Map<Address, String> result = Security.doAs(request.getSubject(), (PrivilegedAction<Map<Address, String>>) () -> xsiteAdmin.nodeStatus(site));\n                return addEntityAsJson(Json.make(result), responseBuilder).build();\n             }\n             , invocationHelper.getExecutor());"
  },
  {
    "sha": "b450a30368f3a3f6507484549a4ed516866d5b92",
    "filename": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -163,7 +163,7 @@ protected void defineCaches(EmbeddedCacheManager cm) {\n \n    @AfterClass\n    public void afterClass() {\n-      Subject.doAs(ADMIN_USER, (PrivilegedAction<Void>) () -> {\n+      Security.doAs(ADMIN_USER, (PrivilegedAction<Void>) () -> {\n          restServers.forEach(RestServerHelper::stop);\n          return null;\n       });\n@@ -172,7 +172,7 @@ public void afterClass() {\n \n    @AfterMethod\n    public void afterMethod() {\n-      Subject.doAs(ADMIN_USER, (PrivilegedAction<Void>) () -> {\n+      Security.doAs(ADMIN_USER, (PrivilegedAction<Void>) () -> {\n          restServers.forEach(RestServerHelper::clear);\n          return null;\n       });"
  },
  {
    "sha": "babfaee04c4e202528ff6c949c4d9e31e8aa94c8",
    "filename": "server/rest/src/test/java/org/infinispan/rest/resources/ProtobufResourceTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/test/java/org/infinispan/rest/resources/ProtobufResourceTest.java",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/rest/src/test/java/org/infinispan/rest/resources/ProtobufResourceTest.java",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/rest/src/test/java/org/infinispan/rest/resources/ProtobufResourceTest.java?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -8,13 +8,12 @@\n import java.security.PrivilegedAction;\n import java.util.concurrent.CompletionStage;\n \n-import javax.security.auth.Subject;\n-\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.client.rest.RestSchemaClient;\n import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.query.remote.ProtobufMetadataManager;\n import org.infinispan.rest.assertion.ResponseAssertion;\n+import org.infinispan.security.Security;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n@@ -33,7 +32,7 @@\n    @Override\n    public void createBeforeMethod() {\n       //Clear schema cache to avoid conflicts between methods\n-      Subject.doAs(ADMIN_USER, (PrivilegedAction<Void>) () -> {\n+      Security.doAs(ADMIN_USER, (PrivilegedAction<Void>) () -> {\n          cacheManagers.get(0).getCache(ProtobufMetadataManager.PROTOBUF_METADATA_CACHE_NAME).clear();\n          return null;\n       });"
  },
  {
    "sha": "e9d4fa10142d997caad2be12ee28d8330c7dd2a1",
    "filename": "server/testdriver/README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/infinispan/infinispan/blob/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/testdriver/README.md",
    "raw_url": "https://github.com/infinispan/infinispan/raw/71df05359ba9249315d6dbc96a4069a5e54f4d49/server/testdriver/README.md",
    "contents_url": "https://api.github.com/repos/infinispan/infinispan/contents/server/testdriver/README.md?ref=71df05359ba9249315d6dbc96a4069a5e54f4d49",
    "patch": "@@ -122,6 +122,7 @@ The following is a list of properties which affect the build:\n * `org.infinispan.server.test.database.<type>.port` port to use for a specific database type\n * `org.infinispan.test.server.container.timeoutSeconds` the amount of time in seconds to wait for a server start/stop operation when using the `FORKED` driver\n * `org.infinispan.test.server.home` Specifies a comma-separated list to server home path. Only for `FORKED` driver\n+* `org.infinispan.test.server.http.timeout` Specifies a timeout in seconds for HTTP connections (defaults to 10)\n \n ## JMX\n "
  }
]
