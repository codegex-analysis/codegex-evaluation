[
  {
    "sha": "69d6aafbf3fe5adf7fd6149a03eee5e264603fa8",
    "filename": "okhttp-testing-support/src/main/kotlin/okhttp3/JsseDebugLogging.kt",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/square/okhttp/blob/00898f85f5d15f03a2637fa176b591f49871c5aa/okhttp-testing-support/src/main/kotlin/okhttp3/JsseDebugLogging.kt",
    "raw_url": "https://github.com/square/okhttp/raw/00898f85f5d15f03a2637fa176b591f49871c5aa/okhttp-testing-support/src/main/kotlin/okhttp3/JsseDebugLogging.kt",
    "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp-testing-support/src/main/kotlin/okhttp3/JsseDebugLogging.kt?ref=00898f85f5d15f03a2637fa176b591f49871c5aa",
    "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (C) 2021 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package okhttp3\n+\n+import java.io.Closeable\n+import java.util.logging.Handler\n+import java.util.logging.LogRecord\n+\n+object JsseDebugLogging {\n+  data class JsseDebugMessage(val message: String, val param: String?) {\n+    enum class Type {\n+      Handshake, Plaintext, Encrypted, Setup, Unknown\n+    }\n+\n+    val type: Type\n+      get() = when {\n+        message == \"adding as trusted certificates\" -> Type.Setup\n+        message == \"Raw read\" || message == \"Raw write\" -> Type.Encrypted\n+        message == \"Plaintext before ENCRYPTION\" || message == \"Plaintext after DECRYPTION\" -> Type.Plaintext\n+        message.startsWith(\"System property \") -> Type.Setup\n+        message.startsWith(\"Reload \") -> Type.Setup\n+        message == \"No session to resume.\" -> Type.Handshake\n+        message.startsWith(\"Consuming \") -> Type.Handshake\n+        message.startsWith(\"Produced \") -> Type.Handshake\n+        message.startsWith(\"Negotiated \") -> Type.Handshake\n+        message.startsWith(\"Found resumable session\") -> Type.Handshake\n+        message.startsWith(\"Resuming session\") -> Type.Handshake\n+        message.startsWith(\"Using PSK to derive early secret\") -> Type.Handshake\n+        else -> Type.Unknown\n+      }\n+\n+    override fun toString(): String {\n+      return if (param != null) {\n+        message + \"\\n\" + param\n+      } else {\n+        message\n+      }\n+    }\n+  }\n+\n+  private fun quietDebug(message: JsseDebugMessage) {\n+    if (message.message.startsWith(\"Ignore\")) {\n+      return\n+    }\n+\n+    when (message.type) {\n+      JsseDebugMessage.Type.Setup, JsseDebugMessage.Type.Encrypted, JsseDebugMessage.Type.Plaintext -> {\n+        println(message.message + \" (skipped output)\")\n+      }\n+      else -> println(message)\n+    }\n+  }\n+\n+  fun enableJsseDebugLogging(debugHandler: (JsseDebugMessage) -> Unit = this::quietDebug): Closeable {\n+    System.setProperty(\"javax.net.debug\", \"\")\n+    return OkHttpDebugLogging.enable(\"javax.net.ssl\", object : Handler() {\n+      override fun publish(record: LogRecord) {\n+        val param = record.parameters?.firstOrNull() as? String\n+        debugHandler(JsseDebugMessage(record.message, param))\n+      }\n+\n+      override fun flush() {\n+      }\n+\n+      override fun close() {\n+      }\n+    })\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4c64630cb5c0b5eee23f9730d0c744999181a517",
    "filename": "okhttp-testing-support/src/main/kotlin/okhttp3/OkHttpDebugLogging.kt",
    "status": "modified",
    "additions": 17,
    "deletions": 10,
    "changes": 27,
    "blob_url": "https://github.com/square/okhttp/blob/00898f85f5d15f03a2637fa176b591f49871c5aa/okhttp-testing-support/src/main/kotlin/okhttp3/OkHttpDebugLogging.kt",
    "raw_url": "https://github.com/square/okhttp/raw/00898f85f5d15f03a2637fa176b591f49871c5aa/okhttp-testing-support/src/main/kotlin/okhttp3/OkHttpDebugLogging.kt",
    "contents_url": "https://api.github.com/repos/square/okhttp/contents/okhttp-testing-support/src/main/kotlin/okhttp3/OkHttpDebugLogging.kt?ref=00898f85f5d15f03a2637fa176b591f49871c5aa",
    "patch": "@@ -15,15 +15,17 @@\n  */\n package okhttp3\n \n+import okhttp3.internal.concurrent.TaskRunner\n+import okhttp3.internal.http2.Http2\n+import java.io.Closeable\n import java.util.concurrent.CopyOnWriteArraySet\n import java.util.logging.ConsoleHandler\n+import java.util.logging.Handler\n import java.util.logging.Level\n import java.util.logging.LogRecord\n import java.util.logging.Logger\n import java.util.logging.SimpleFormatter\n import kotlin.reflect.KClass\n-import okhttp3.internal.concurrent.TaskRunner\n-import okhttp3.internal.http2.Http2\n \n object OkHttpDebugLogging {\n   // Keep references to loggers to prevent their configuration from being GC'd.\n@@ -33,18 +35,23 @@ object OkHttpDebugLogging {\n \n   fun enableTaskRunner() = enable(TaskRunner::class)\n \n-  fun enable(loggerClass: String) {\n+  fun logHandler() = ConsoleHandler().apply {\n+    level = Level.FINE\n+    formatter = object : SimpleFormatter() {\n+      override fun format(record: LogRecord) =\n+        String.format(\"[%1\\$tF %1\\$tT] %2\\$s %n\", record.millis, record.message)\n+    }\n+  }\n+\n+  fun enable(loggerClass: String, handler: Handler = logHandler()): Closeable {\n     val logger = Logger.getLogger(loggerClass)\n     if (configuredLoggers.add(logger)) {\n-      logger.addHandler(ConsoleHandler().apply {\n-        level = Level.FINE\n-        formatter = object : SimpleFormatter() {\n-          override fun format(record: LogRecord) =\n-            String.format(\"[%1\\$tF %1\\$tT] %2\\$s %n\", record.millis, record.message)\n-        }\n-      })\n+      logger.addHandler(handler)\n       logger.level = Level.FINEST\n     }\n+    return Closeable {\n+      logger.removeHandler(handler)\n+    }\n   }\n \n   fun enable(loggerClass: KClass<*>) = enable(loggerClass.java.name)"
  }
]
