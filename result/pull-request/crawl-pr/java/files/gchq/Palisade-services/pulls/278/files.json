[
  {
    "sha": "69a64628cb336810823eed761536f8e552f5ced7",
    "filename": "attribute-masking-service/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/attribute-masking-service/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/attribute-masking-service/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/attribute-masking-service/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -25,10 +25,10 @@\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>attribute-masking-service</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/attribute-masking-service</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <properties>\n         <!-- Dependency versions -->"
  },
  {
    "sha": "ade386b215b8734d0e2cd9b4ce313a4fef108a1c",
    "filename": "audit-service/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/audit-service/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/audit-service/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/audit-service/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -33,10 +33,10 @@\n         </repository>\n     </repositories>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>audit-service</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/audit-service</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <properties>\n         <!-- Dependency versions -->"
  },
  {
    "sha": "c29a07abfbfbd61293dd1bd52a8772ccd777631c",
    "filename": "create-kafka-queues/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/create-kafka-queues/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/create-kafka-queues/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/create-kafka-queues/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -26,10 +26,10 @@\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>create-kafka-queues</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/create-kafka-queues</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <profiles>\n         <profile>"
  },
  {
    "sha": "33971e89b204239b029f538571792c2ea3472e7e",
    "filename": "data-service/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/data-service/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/data-service/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/data-service/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -26,10 +26,10 @@\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>data-service</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/data-service</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <properties>\n         <!-- Dependency versions -->"
  },
  {
    "sha": "3b2f165eacf139610198fbff7ea20d608d0cc0a9",
    "filename": "data-service/src/component-tests/java/uk/gov/gchq/palisade/component/data/web/DataControllerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/data-service/src/component-tests/java/uk/gov/gchq/palisade/component/data/web/DataControllerTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/data-service/src/component-tests/java/uk/gov/gchq/palisade/component/data/web/DataControllerTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/data-service/src/component-tests/java/uk/gov/gchq/palisade/component/data/web/DataControllerTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -114,6 +114,7 @@ void testControllerReturnsAccepted() throws Exception {\n         verify(serviceMock, times(1)).authoriseRequest(any());\n         verify(serviceMock, times(1)).read(any(), any());\n         verify(auditMessageServiceMock, times(1)).auditMessage(any());\n+\n     }\n \n     /**"
  },
  {
    "sha": "9db2564ffbb38ed9c1715c6d84645b8acb66f087",
    "filename": "filtered-resource-service/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/filtered-resource-service/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/filtered-resource-service/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/filtered-resource-service/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -25,10 +25,10 @@\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>filtered-resource-service</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/filtered-resource-service</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <properties>\n         <!-- Dependency versions -->"
  },
  {
    "sha": "c80d12501a3ff2c1c03fe29fd91088f9dffdcec4",
    "filename": "policy-service/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/policy-service/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/policy-service/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/policy-service/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -26,10 +26,10 @@\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>policy-service</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/policy-service</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <properties>\n         <!-- Dependency versions -->"
  },
  {
    "sha": "397aea2a11028ed7124200674ad0685e4114fe50",
    "filename": "resource-service/README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/README.md",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/README.md",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/README.md?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -134,7 +134,7 @@ curl -X POST api/resource -H \"content-type: application/json\" --data \\\n \n It may be that some example resources may need to be added to the backing store before, for example, a test run of the Palisade system gets performed. This is solved by \n using Spring to upload resource(s) to the service from a yaml file. An example of this can be seen in this\n-[testresource.yaml](src/contract-tests/resources/application-testresource.yaml) file which adds the resource information to the backing store when the service starts up.\n+[test-resource.yaml](src/contract-tests/resources/application-test-resource.yaml) file which adds the resource information to the backing store when the service starts up.\n \n ## Hadoop and Windows\n "
  },
  {
    "sha": "d0d86c0e4a11e55a12b14dee512c5526d5aec467",
    "filename": "resource-service/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/pom.xml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/pom.xml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/pom.xml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -26,10 +26,10 @@\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n     <artifactId>resource-service</artifactId>\n     <url>https://github.com/gchq/Palisade-services/tree/develop/resource-service</url>\n-    <!--  *********** Aritfact ID ***********    -->\n+    <!--  *********** Artifact ID ***********    -->\n \n     <properties>\n         <!-- Dependency versions -->"
  },
  {
    "sha": "7779e18ad910a0ffc8cf13e983e75eba53be4865",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/AuditErrorMessageTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 40,
    "changes": 59,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/AuditErrorMessageTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/AuditErrorMessageTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/AuditErrorMessageTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -15,30 +15,26 @@\n  */\n package uk.gov.gchq.palisade.component.resource.model;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.json.JsonTest;\n-import org.springframework.boot.test.json.JacksonTester;\n-import org.springframework.boot.test.json.JsonContent;\n-import org.springframework.boot.test.json.ObjectContent;\n import org.springframework.test.context.ContextConfiguration;\n \n import uk.gov.gchq.palisade.Context;\n import uk.gov.gchq.palisade.service.resource.model.AuditErrorMessage;\n \n import java.io.IOException;\n-import java.util.HashMap;\n import java.util.Map;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertAll;\n \n @JsonTest\n @ContextConfiguration(classes = {AuditErrorMessageTest.class})\n class AuditErrorMessageTest {\n \n     @Autowired\n-    private JacksonTester<AuditErrorMessage> jsonTester;\n+    private ObjectMapper mapper;\n \n     /**\n      * Tests the creation of the message type, AuditErrorMessage using the builder\n@@ -49,44 +45,27 @@\n      */\n     @Test\n     void testAuditErrorMessageSerialisingAndDeserialising() throws IOException {\n-        Context context = new Context().purpose(\"testContext\");\n-        Map<String, Object> attributes = new HashMap<>();\n-        attributes.put(\"messagesSent\", \"23\");\n-\n         AuditErrorMessage auditErrorMessage = AuditErrorMessage.Builder.create()\n                 .withUserId(\"originalUserID\")\n                 .withResourceId(\"testResourceId\")\n-                .withContext(context)\n-                .withAttributes(attributes)\n-                .withError(new InternalError(\"Something went wrong!\"));\n+                .withContext(new Context().purpose(\"testContext\"))\n+                .withAttributes(Map.of(\"messagesSent\", \"23\"))\n+                .withError(new Throwable(\"Something went wrong!\"));\n+\n+        var actualJson = mapper.writeValueAsString(auditErrorMessage);\n+        var actualInstance = mapper.readValue(actualJson, auditErrorMessage.getClass());\n \n-        JsonContent<AuditErrorMessage> auditErrorMessageJsonContent = jsonTester.write(auditErrorMessage);\n-        ObjectContent<AuditErrorMessage> auditErrorMessageObjectContent = jsonTester.parse(auditErrorMessageJsonContent.getJson());\n-        AuditErrorMessage auditErrorMessageObject = auditErrorMessageObjectContent.getObject();\n+        assertThat(actualInstance)\n+                .as(\"Ignoring the error, check using recursion that %s has been deserialized successfully\", auditErrorMessage.getClass().getSimpleName())\n+                .usingRecursiveComparison()\n+                .ignoringFieldsOfTypes(Throwable.class)\n+                .isEqualTo(auditErrorMessage);\n \n-        assertAll(\"AuditSerialisingDeseralisingAndComparison\",\n-                () -> assertAll(\"AuditSerialisingComparedToString\",\n-                        () -> assertThat(auditErrorMessageJsonContent).extractingJsonPathStringValue(\"$.userId\").isEqualTo(\"originalUserID\"),\n-                        () -> assertThat(auditErrorMessageJsonContent).extractingJsonPathStringValue(\"$.resourceId\").isEqualTo(\"testResourceId\"),\n-                        () -> assertThat(auditErrorMessageJsonContent).extractingJsonPathStringValue(\"$.context.contents.purpose\").isEqualTo(\"testContext\"),\n-                        () -> assertThat(auditErrorMessageJsonContent).extractingJsonPathStringValue(\"$.serviceName\").isEqualTo(\"resource-service\"),\n-                        () -> assertThat(auditErrorMessageJsonContent).extractingJsonPathStringValue(\"$.attributes.messagesSent\").isEqualTo(\"23\"),\n-                        () -> assertThat(auditErrorMessageJsonContent).extractingJsonPathStringValue(\"$.error.message\").isEqualTo(\"Something went wrong!\")\n-                ),\n-                () -> assertAll(\"AuditDeserialisingComparedToObject\",\n-                        () -> assertThat(auditErrorMessageObject.getUserId()).isEqualTo(auditErrorMessage.getUserId()),\n-                        () -> assertThat(auditErrorMessageObject.getResourceId()).isEqualTo(auditErrorMessage.getResourceId()),\n-                        () -> assertThat(auditErrorMessageObject.getContext()).isEqualTo(auditErrorMessage.getContext()),\n-                        () -> assertThat(auditErrorMessageObject.getServiceName()).isEqualTo(auditErrorMessage.getServiceName()),\n-                        () -> assertThat(auditErrorMessageObject.getTimestamp()).isEqualTo(auditErrorMessage.getTimestamp()),\n-                        () -> assertThat(auditErrorMessageObject.getServerHostname()).isEqualTo(auditErrorMessage.getServerHostname()),\n-                        () -> assertThat(auditErrorMessageObject.getServerIP()).isEqualTo(auditErrorMessage.getServerIP()),\n-                        () -> assertThat(auditErrorMessageObject.getError().getMessage()).isEqualTo(auditErrorMessage.getError().getMessage())\n-                        // Note Throwable equals does not override Object's equal so two Throwables are only equal if they are the same instance of an object.\n-                ),\n-                () -> assertAll(\"ObjectComparison\",\n-                        () -> assertThat(auditErrorMessageObject).usingRecursiveComparison().ignoringFieldsOfTypes(Throwable.class).isEqualTo((auditErrorMessage))\n-                )\n-        );\n+        assertThat(actualInstance)\n+                .as(\"Extracting the exception, check it has been deserialized successfully\")\n+                .extracting(AuditErrorMessage::getError)\n+                .isExactlyInstanceOf(Throwable.class)\n+                .extracting(\"Message\")\n+                .isEqualTo(\"Something went wrong!\");\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "33cba9eddc65d0ab184425140ff070bb508febee",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceRequestTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 31,
    "changes": 42,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceRequestTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceRequestTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceRequestTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -15,12 +15,10 @@\n  */\n package uk.gov.gchq.palisade.component.resource.model;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.json.JsonTest;\n-import org.springframework.boot.test.json.JacksonTester;\n-import org.springframework.boot.test.json.JsonContent;\n-import org.springframework.boot.test.json.ObjectContent;\n import org.springframework.test.context.ContextConfiguration;\n \n import uk.gov.gchq.palisade.Context;\n@@ -30,46 +28,28 @@\n import java.io.IOException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertAll;\n \n @JsonTest\n @ContextConfiguration(classes = {ResourceRequestTest.class})\n class ResourceRequestTest {\n \n     @Autowired\n-    private JacksonTester<ResourceRequest> jsonTester;\n+    private ObjectMapper mapper;\n \n     @Test\n-    void testResourceRequestSerialisingAndDeserialising() throws IOException {\n-        Context context = new Context().purpose(\"testContext\");\n-        User user = new User().userId(\"testUserId\");\n+    void testResourceRequestSerializingAndDeseralizing() throws IOException {\n         ResourceRequest resourceRequest = ResourceRequest.Builder.create()\n                 .withUserId(\"originalUserId\")\n                 .withResourceId(\"testResourceId\")\n-                .withContext(context)\n-                .withUser(user);\n+                .withContext(new Context().purpose(\"testContext\"))\n+                .withUser(new User().userId(\"testUserId\"));\n \n-        JsonContent<ResourceRequest> resourceRequestJsonContent = jsonTester.write(resourceRequest);\n-        ObjectContent<ResourceRequest> resourceRequestObjectContent = jsonTester.parse(resourceRequestJsonContent.getJson());\n-        ResourceRequest resourceRequestObject = resourceRequestObjectContent.getObject();\n+        var actualJson = mapper.writeValueAsString(resourceRequest);\n+        var actualInstance = mapper.readValue(actualJson, resourceRequest.getClass());\n \n-\n-        assertAll(\"ResourceRequestSerialisingDeseralisingAndComparison\",\n-                () -> assertAll(\"ResourceRequestSerialisingComparedToString\",\n-                        () -> assertThat(resourceRequestJsonContent).extractingJsonPathStringValue(\"$.userId\").isEqualTo(\"originalUserId\"),\n-                        () -> assertThat(resourceRequestJsonContent).extractingJsonPathStringValue(\"$.resourceId\").isEqualTo(\"testResourceId\"),\n-                        () -> assertThat(resourceRequestJsonContent).extractingJsonPathStringValue(\"$.context.contents.purpose\").isEqualTo(\"testContext\"),\n-                        () -> assertThat(resourceRequestJsonContent).extractingJsonPathStringValue(\"$.user.userId.id\").isEqualTo(\"testUserId\")\n-                ),\n-                () -> assertAll(\"ResourceRequestDeserialisingComparedToObject\",\n-                        () -> assertThat(resourceRequest.getUserId()).isEqualTo(resourceRequestObject.getUserId()),\n-                        () -> assertThat(resourceRequest.getResourceId()).isEqualTo(resourceRequestObject.getResourceId()),\n-                        () -> assertThat(resourceRequest.getContext()).isEqualTo(resourceRequestObject.getContext()),\n-                        () -> assertThat(resourceRequest.getUser()).isEqualTo((resourceRequestObject.getUser()))\n-                ),\n-                () -> assertAll(\"ObjectComparison\",\n-                        () -> assertThat(resourceRequest).usingRecursiveComparison().isEqualTo(resourceRequestObject)\n-                )\n-        );\n+        assertThat(actualInstance)\n+                .as(\"Check using recursion that the %s has been deseralized successfully\", resourceRequest.getClass().getSimpleName())\n+                .usingRecursiveComparison()\n+                .isEqualTo(resourceRequest);\n     }\n }"
  },
  {
    "sha": "4e137a48add0db7f07def06736f5241e19f72d7b",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceResponseTest.java",
    "status": "modified",
    "additions": 12,
    "deletions": 33,
    "changes": 45,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceResponseTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceResponseTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/model/ResourceResponseTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -15,12 +15,10 @@\n  */\n package uk.gov.gchq.palisade.component.resource.model;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.json.JsonTest;\n-import org.springframework.boot.test.json.JacksonTester;\n-import org.springframework.boot.test.json.JsonContent;\n-import org.springframework.boot.test.json.ObjectContent;\n import org.springframework.test.context.ContextConfiguration;\n \n import uk.gov.gchq.palisade.Context;\n@@ -35,54 +33,35 @@\n import java.io.IOException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertAll;\n \n @JsonTest\n @ContextConfiguration(classes = {ResourceResponseTest.class, AkkaSystemConfig.class})\n class ResourceResponseTest {\n \n     @Autowired\n-    private JacksonTester<ResourceResponse> jsonTester;\n+    private ObjectMapper mapper;\n \n     @Test\n-    void testSerialiseResourceResponseToJson() throws IOException {\n-        Context context = new Context().purpose(\"testContext\");\n-        User user = new User().userId(\"testUserId\");\n+    void testSerializeResourceResponseToJson() throws IOException {\n         LeafResource resource = new FileResource().id(\"/test/file.format\")\n                 .type(\"java.lang.String\")\n                 .serialisedFormat(\"format\")\n                 .connectionDetail(new SimpleConnectionDetail().serviceName(\"test-service\"))\n                 .parent(new SystemResource().id(\"/test\"));\n+\n         ResourceResponse resourceResponse = ResourceResponse.Builder.create()\n                 .withUserId(\"originalUserID\")\n                 .withResourceId(\"originalResourceID\")\n-                .withContext(context)\n-                .withUser(user)\n+                .withContext(new Context().purpose(\"testContext\"))\n+                .withUser(new User().userId(\"testUserId\"))\n                 .withResource(resource);\n \n-        JsonContent<ResourceResponse> resourceResponseJsonContent = jsonTester.write(resourceResponse);\n-        ObjectContent<ResourceResponse> resourceResponseObjectContent = jsonTester.parse(resourceResponseJsonContent.getJson());\n-        ResourceResponse resourceResponseObject = resourceResponseObjectContent.getObject();\n+        var actualJson = mapper.writeValueAsString(resourceResponse);\n+        var actualInstance = mapper.readValue(actualJson, resourceResponse.getClass());\n \n-        assertAll(\"ResourceResponseSerialisingDeseralisingAndComparison\",\n-                () -> assertAll(\"ResourceResponseSerialisingComparedToString\",\n-                        () -> assertThat(resourceResponseJsonContent).extractingJsonPathStringValue(\"$.userId\").isEqualTo(\"originalUserID\"),\n-                        () -> assertThat(resourceResponseJsonContent).extractingJsonPathStringValue(\"$.resourceId\").isEqualTo(\"originalResourceID\"),\n-                        () -> assertThat(resourceResponseJsonContent).extractingJsonPathStringValue(\"$.context.contents.purpose\").isEqualTo(\"testContext\"),\n-                        () -> assertThat(resourceResponseJsonContent).extractingJsonPathStringValue(\"$.user.userId.id\").isEqualTo(\"testUserId\"),\n-                        () -> assertThat(resourceResponseJsonContent).extractingJsonPathStringValue(\"$.resource.id\").isEqualTo(\"/test/file.format\")\n-                ),\n-                () -> assertAll(\"ResourceResponseDeserialisingComparedToObject\",\n-                        () -> assertThat(resourceResponse.getUserId()).isEqualTo(resourceResponseObject.getUserId()),\n-                        () -> assertThat(resourceResponse.getResourceId()).isEqualTo(resourceResponseObject.getResourceId()),\n-                        () -> assertThat(resourceResponse.getContext()).isEqualTo(resourceResponseObject.getContext()),\n-                        () -> assertThat(resourceResponse.getUser()).isEqualTo((resourceResponseObject.getUser())),\n-                        () -> assertThat(resourceResponse.resource).isEqualTo((resourceResponseObject.resource))\n-                ),\n-                () -> assertAll(\"ObjectComparison\",\n-                        () -> assertThat(resourceResponse).usingRecursiveComparison().isEqualTo(resourceResponseObject)\n-                )\n-        );\n+        assertThat(actualInstance)\n+                .as(\"Check using recursion that the %s has been deseralized successfully\", resourceResponse.getClass().getSimpleName())\n+                .usingRecursiveComparison()\n+                .isEqualTo(resourceResponse);\n     }\n-\n }"
  },
  {
    "sha": "10790d035bcd092429674dbb649b62581a15a326",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ReactivePersistenceLayerTest.java",
    "status": "modified",
    "additions": 23,
    "deletions": 15,
    "changes": 38,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ReactivePersistenceLayerTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ReactivePersistenceLayerTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ReactivePersistenceLayerTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -37,7 +37,6 @@\n import uk.gov.gchq.palisade.service.resource.config.ApplicationConfiguration;\n import uk.gov.gchq.palisade.service.resource.config.R2dbcConfiguration;\n import uk.gov.gchq.palisade.service.resource.repository.ReactivePersistenceLayer;\n-import uk.gov.gchq.palisade.service.resource.repository.ResourceRepository;\n import uk.gov.gchq.palisade.service.resource.stream.config.AkkaSystemConfig;\n import uk.gov.gchq.palisade.util.ResourceBuilder;\n \n@@ -49,15 +48,15 @@\n @ContextConfiguration(classes = {ApplicationConfiguration.class, R2dbcConfiguration.class, AkkaSystemConfig.class})\n @EntityScan(basePackages = {\"uk.gov.gchq.palisade.service.resource.domain\"})\n @EnableR2dbcRepositories(basePackages = {\"uk.gov.gchq.palisade.service.resource.repository\"})\n-@ActiveProfiles({\"dbtest\"})\n+@ActiveProfiles({\"db-test\"})\n @DirtiesContext(classMode = ClassMode.BEFORE_CLASS)\n class ReactivePersistenceLayerTest {\n+\n     @Autowired\n     private ReactivePersistenceLayer persistenceLayer;\n     @Autowired\n-    private ResourceRepository resourceRepository;\n-    @Autowired\n     private Materializer materializer;\n+\n     private LeafResource resource;\n \n     @BeforeEach\n@@ -81,8 +80,9 @@ public void setUp() throws InterruptedException {\n     @Test\n     void testSpringDiscoversPersistenceLayer() {\n         // When the spring application is started\n-        // Then\n-        assertThat(persistenceLayer).isNotNull();\n+        assertThat(persistenceLayer)\n+                .as(\"Check the persistenceLayer has been autowired successfully\")\n+                .isNotNull();\n     }\n \n     @Test\n@@ -92,17 +92,23 @@ void testEmptyGetReturnsEmpty() {\n         // When getting a non-existent resourceId\n         var persistenceIdResponse = persistenceLayer.getResourcesById(\"file:/NON_EXISTENT_RESOURCE_ID\").join();\n         // Then the list should be empty\n-        assertThat(persistenceIdResponse).isEmpty();\n+        assertThat(persistenceIdResponse)\n+                .as(\"Check that no resources are returned for a non existent resourceId\")\n+                .isEmpty();\n \n         // When getting a non-existent resource type\n         var persistenceTypeResponse = persistenceLayer.getResourcesByType(\"NON_EXISTENT_RESOURCE_TYPE\").join();\n         // Then the list should be empty\n-        assertThat(persistenceTypeResponse).isEmpty();\n+        assertThat(persistenceTypeResponse)\n+                .as(\"Check that no resources are returned for a non existent resource type\")\n+                .isEmpty();\n \n         // When getting a non-existent resource serialised format\n         var persistenceFormatResponse = persistenceLayer.getResourcesBySerialisedFormat(\"NON_EXISTENT_RESOURCE_FORMAT\").join();\n         // Then the list should be empty\n-        assertThat(persistenceFormatResponse).isEmpty();\n+        assertThat(persistenceFormatResponse)\n+                .as(\"Check that no resources are returned for a non existent resource format\")\n+                .isEmpty();\n     }\n \n     @Test\n@@ -115,17 +121,19 @@ void testAddAndGetReturnsResource() {\n                 .runWith(Sink.seq(), materializer)\n                 .toCompletableFuture().join();\n         // Then the returned resource should match the created resource\n-        assertThat(idResult).hasSize(1)\n-                .allSatisfy(leafResource -> assertThat(leafResource.getId()).isEqualTo(resource.getId()));\n+        assertThat(idResult)\n+                .as(\"Check that when getting a resource by its Id, the correct resource is returned\")\n+                .containsOnly(resource);\n \n         // When getting a resource from the persistence layer by type\n         var typeResult = persistenceLayer.getResourcesByType(resource.getType())\n                 .join().orElseThrow()\n                 .toMat(Sink.seq(), Keep.right()).run(materializer)\n                 .toCompletableFuture().join();\n         // Then the returned resource should match the created resource\n-        assertThat(typeResult).hasSize(1)\n-                .allSatisfy(leafResource -> assertThat(leafResource.getId()).isEqualTo(resource.getId()));\n+        assertThat(typeResult)\n+                .as(\"Check that when getting the resource by its type, the correct resource is returned\")\n+                .containsOnly(resource);\n \n         // When getting a resource from the persistence layer by serialised format\n         var formatResult = persistenceLayer.getResourcesBySerialisedFormat(resource.getSerialisedFormat())\n@@ -134,7 +142,7 @@ void testAddAndGetReturnsResource() {\n                 .toCompletableFuture().join();\n         // Then the returned resource should match the created resource\n         assertThat(formatResult)\n-                .hasSize(1)\n-                .allSatisfy(leafResource -> assertThat(leafResource.getId()).isEqualTo(resource.getId()));\n+                .as(\"Check that when geting the resource by its format, the correct resource is returned\")\n+                .containsOnly(resource);\n     }\n }"
  },
  {
    "sha": "03c73900dcba49b9c7283a9232ba340836ed6be8",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ScenarioPersistenceTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 14,
    "changes": 56,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ScenarioPersistenceTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ScenarioPersistenceTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/ScenarioPersistenceTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -44,7 +44,6 @@\n import uk.gov.gchq.palisade.service.resource.model.AuditableResourceResponse;\n import uk.gov.gchq.palisade.service.resource.model.ResourceRequest;\n import uk.gov.gchq.palisade.service.resource.repository.CompletenessRepository;\n-import uk.gov.gchq.palisade.service.resource.repository.ReactivePersistenceLayer;\n import uk.gov.gchq.palisade.service.resource.service.ResourceServicePersistenceProxy;\n import uk.gov.gchq.palisade.service.resource.stream.config.AkkaSystemConfig;\n import uk.gov.gchq.palisade.util.ResourceBuilder;\n@@ -61,13 +60,11 @@\n @ContextConfiguration(classes = {ApplicationConfiguration.class, R2dbcConfiguration.class, AkkaSystemConfig.class})\n @EntityScan(basePackages = {\"uk.gov.gchq.palisade.service.resource.domain\"})\n @EnableR2dbcRepositories(basePackages = {\"uk.gov.gchq.palisade.service.resource.repository\"})\n-@ActiveProfiles({\"dbtest\"})\n+@ActiveProfiles({\"db-test\"})\n @DirtiesContext(classMode = ClassMode.BEFORE_CLASS)\n class ScenarioPersistenceTest {\n     private static final Logger LOGGER = LoggerFactory.getLogger(ScenarioPersistenceTest.class);\n \n-    @Autowired\n-    private ReactivePersistenceLayer persistenceLayer;\n     @Autowired\n     private ResourceServicePersistenceProxy proxy;\n     @Autowired\n@@ -151,6 +148,7 @@\n     // Test is still marked as transactional as we poke and prod the persistence layer directly to see what is persisted and what isn't\n     // For spring reasons, we can't just mark the extractResourceCompleteness method as transactional\n     @Test\n+    @SuppressWarnings(\"checkstyle:methodlength\")\n     void testRunThroughTestScenario() {\n         // Given -\n         // Variables used to store returned results from the resource-service\n@@ -181,13 +179,20 @@ void testRunThroughTestScenario() {\n         // Then - resource service returned expected leaf resources\n         expectedReturned.forEach(resource -> LOGGER.debug(\"Expected: {}\", resource.getId()));\n         returnedAuditable.forEach(response -> LOGGER.debug(\"Returned: {}\", response.getResourceResponse().resource.getId()));\n-        assertThat(returnedMultiFileRequest).isEqualTo(expectedReturned);\n+\n+        assertThat(returnedMultiFileRequest)\n+                .as(\"Check that when I get a resource from persistence by the resource itself, the correct resource is returned\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedReturned);\n         LOGGER.debug(\"\");\n \n         // Then - persistence layer stored expected resources of all kinds\n         expectedPersisted.forEach(resource -> LOGGER.debug(\"Expected:  {}\", resource.getId()));\n         persisted.forEach(resource -> LOGGER.debug(\"Persisted: {}\", resource.getId()));\n-        assertThat(persisted).isEqualTo(expectedPersisted);\n+        assertThat(persisted)\n+                .as(\"Check that the correct resource has been persisted\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedPersisted);\n         LOGGER.debug(\"\");\n         LOGGER.info(\"\");\n \n@@ -207,13 +212,19 @@ void testRunThroughTestScenario() {\n         // Then - resource service returned expected leaf resources\n         expectedReturned.forEach(resource -> LOGGER.debug(\"Expected: {}\", resource.getId()));\n         returnedAuditable.forEach(response -> LOGGER.debug(\"Returned: {}\", response.getResourceResponse().resource.getId()));\n-        assertThat(returnedMultiFileDirRequest).isEqualTo(expectedReturned);\n+        assertThat(returnedMultiFileDirRequest)\n+                .as(\"Check that when I get resources from persistence by the resource Id, the correct resources are returned\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedReturned);\n         LOGGER.debug(\"\");\n \n         // Then - persistence layer stored expected resources of all kinds\n         expectedPersisted.forEach(resource -> LOGGER.debug(\"Expected:  {}\", resource.getId()));\n         persisted.forEach(resource -> LOGGER.debug(\"Persisted: {}\", resource.getId()));\n-        assertThat(persisted).isEqualTo(expectedPersisted);\n+        assertThat(persisted)\n+                .as(\"Check that the correct resources have been persisted\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedPersisted);\n         LOGGER.debug(\"\");\n         LOGGER.info(\"\");\n \n@@ -234,13 +245,19 @@ void testRunThroughTestScenario() {\n         // Then - resource service returned expected leaf resources\n         expectedReturned.forEach(resource -> LOGGER.debug(\"Expected: {}\", resource.getId()));\n         returnedAuditable.forEach(response -> LOGGER.debug(\"Returned: {}\", response.getResourceResponse().resource.getId()));\n-        assertThat(returnedTopLevelDirRequest).isEqualTo(expectedReturned);\n+        assertThat(returnedTopLevelDirRequest)\n+                .as(\"Check that when I get resources from persistence by the resource directory, the correct resources are returned\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedReturned);\n         LOGGER.debug(\"\");\n \n         // Then - persistence layer stored expected resources of all kinds\n         expectedPersisted.forEach(resource -> LOGGER.debug(\"Expected:  {}\", resource.getId()));\n         persisted.forEach(resource -> LOGGER.debug(\"Persisted: {}\", resource.getId()));\n-        assertThat(persisted).isEqualTo(expectedPersisted);\n+        assertThat(persisted)\n+                .as(\"Check that the correct resources have been persisted\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedPersisted);\n         LOGGER.debug(\"\");\n         LOGGER.info(\"\");\n \n@@ -261,13 +278,18 @@ void testRunThroughTestScenario() {\n         // Then - resource service returned expected leaf resources\n         LOGGER.debug(\"Expected: nothing\");\n         returnedAuditable.forEach(response -> LOGGER.debug(\"Returned: {}\", response.getResourceResponse().resource.getId()));\n-        assertThat(returnedEmptyDirRequest).isEqualTo(expectedReturned);\n+        assertThat(returnedEmptyDirRequest)\n+                .as(\"Check that when I get a resource from persistence in an empty directory, no resources are returned\")\n+                .isEmpty();\n         LOGGER.debug(\"\");\n \n         // Then - persistence layer stored expected resources of all kinds\n         expectedPersisted.forEach(resource -> LOGGER.debug(\"Expected:  {}\", resource.getId()));\n         persisted.forEach(resource -> LOGGER.debug(\"Persisted: {}\", resource.getId()));\n-        assertThat(persisted).isEqualTo(expectedPersisted);\n+        assertThat(persisted)\n+                .as(\"Check that the correct resources have been persisted\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedPersisted);\n         LOGGER.debug(\"\");\n         LOGGER.info(\"\");\n \n@@ -288,13 +310,19 @@ void testRunThroughTestScenario() {\n         // Then - resource service returned expected leaf resources\n         expectedReturned.forEach(resource -> LOGGER.debug(\"Expected: {}\", resource.getId()));\n         returnedAuditable.forEach(response -> LOGGER.debug(\"Returned: {}\", response.getResourceResponse().resource.getId()));\n-        assertThat(returnedRootDirRequest).isEqualTo(expectedReturned);\n+        assertThat(returnedRootDirRequest)\n+                .as(\"Check that when I get resources from persistence by the root directory, the correct resources are returned\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedReturned);\n         LOGGER.debug(\"\");\n \n         // Then - persistence layer stored expected resources of all kinds\n         expectedPersisted.forEach(resource -> LOGGER.debug(\"Expected:  {}\", resource.getId()));\n         persisted.forEach(resource -> LOGGER.debug(\"Persisted: {}\", resource.getId()));\n-        assertThat(persisted).isEqualTo(expectedPersisted);\n+        assertThat(persisted)\n+                .as(\"Check that the correct resources have been persisted\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(expectedPersisted);\n         LOGGER.debug(\"\");\n         LOGGER.debug(\"\");\n     }"
  },
  {
    "sha": "e6259320de649df38adc092c7da08c1dc13cf098",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/h2/H2ComponentTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 20,
    "changes": 45,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/h2/H2ComponentTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/h2/H2ComponentTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/h2/H2ComponentTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -35,7 +35,6 @@\n import uk.gov.gchq.palisade.resource.LeafResource;\n import uk.gov.gchq.palisade.resource.impl.DirectoryResource;\n import uk.gov.gchq.palisade.resource.impl.FileResource;\n-import uk.gov.gchq.palisade.resource.impl.SystemResource;\n import uk.gov.gchq.palisade.service.SimpleConnectionDetail;\n import uk.gov.gchq.palisade.service.resource.config.ApplicationConfiguration;\n import uk.gov.gchq.palisade.service.resource.config.R2dbcConfiguration;\n@@ -46,7 +45,6 @@\n import uk.gov.gchq.palisade.util.ResourceBuilder;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -85,7 +83,6 @@\n     private static final String CLIENT_TYPE = \"client\";\n     private static final String AVRO_FORMAT = \"avro\";\n     private static final String JSON_FORMAT = \"json\";\n-    private static final SystemResource SYSTEM_ROOT = (SystemResource) ResourceBuilder.create(\"file:/\");\n     private static final DirectoryResource TEST_DIRECTORY = (DirectoryResource) ResourceBuilder.create(\"file:/test/\");\n     private static final FileResource EMPLOYEE_AVRO_FILE = ((FileResource) ResourceBuilder.create(\"file:/test/employee.avro\"))\n             .type(EMPLOYEE_TYPE)\n@@ -112,7 +109,7 @@\n             .withUser(USER);\n \n     @BeforeEach\n-    void setup() throws InterruptedException {\n+    void setup() {\n         for (FileResource file : Arrays.asList(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE)) {\n             Source.single(file)\n                     .via(persistenceLayer.withPersistenceById(TEST_DIRECTORY.getId()))\n@@ -140,8 +137,9 @@ void testGetResourceByResource() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, EMPLOYEE_JSON_FILE, CLIENT_AVRO_FILE);\n-        assertThat(resourceResult).containsAll(expected);\n+        assertThat(resourceResult)\n+                .as(\"Check that when getting a Resource by its directory, the correct resources are returned\")\n+                .contains(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n \n         // When making a get request to the resource service by resource for a specific file\n         resourceResult = proxy.getResourcesByResource(EMPLOYEE_AVRO_REQUEST)\n@@ -156,8 +154,9 @@ void testGetResourceByResource() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(EMPLOYEE_AVRO_FILE);\n-        assertThat(resourceResult).isEqualTo(expected);\n+        assertThat(resourceResult)\n+                .as(\"Check that when we get a Resource by itself, the correct resource is returned\")\n+                .containsOnly(EMPLOYEE_AVRO_FILE);\n     }\n \n     @Test\n@@ -176,8 +175,9 @@ void testGetResourceById() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, EMPLOYEE_JSON_FILE, CLIENT_AVRO_FILE);\n-        assertThat(idResult).containsAll(expected);\n+        assertThat(idResult)\n+                .as(\"Check that when we get resources by the Id of the directory, the correct resources are returned\")\n+                .contains(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n \n         // When making a get request to the resource service by resourceId for a specific file\n         idResult = proxy.getResourcesById(EMPLOYEE_AVRO_REQUEST)\n@@ -191,8 +191,9 @@ void testGetResourceById() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(EMPLOYEE_AVRO_FILE);\n-        assertThat(idResult).containsAll(expected);\n+        assertThat(idResult)\n+                .as(\"Check that when we request one resource by its ID, only the correct resource is returned\")\n+                .containsOnly(EMPLOYEE_AVRO_FILE);\n     }\n \n     @Test\n@@ -211,8 +212,9 @@ void testGetResourceByType() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, EMPLOYEE_JSON_FILE);\n-        assertThat(typeResult).containsAll(expected);\n+        assertThat(typeResult)\n+                .as(\"Check that when we request a resource by the directory and type, the correct resources are returned\")\n+                .containsExactly(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE);\n \n         // When making a get request to the resource service by type\n         typeResult = proxy.getResourcesByType(TEST_DIRECTORY_REQUEST, CLIENT_TYPE)\n@@ -226,8 +228,9 @@ void testGetResourceByType() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(CLIENT_AVRO_FILE);\n-        assertThat(typeResult).containsAll(expected);\n+        assertThat(typeResult)\n+                .as(\"Check that when we request a resource by the directory and type, the correct resource is returned\")\n+                .containsOnly(CLIENT_AVRO_FILE);\n     }\n \n     @Test\n@@ -246,8 +249,9 @@ void testGetResourceBySerialisedFormat() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n-        assertThat(formatResult).containsAll(expected);\n+        assertThat(formatResult)\n+                .as(\"Check that when we request resource by their format and directory, the correct resources are returned\")\n+                .containsExactly(EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n \n         // When making a get request to the resource service by serialisedFormat\n         formatResult = proxy.getResourcesBySerialisedFormat(TEST_DIRECTORY_REQUEST, JSON_FORMAT)\n@@ -261,7 +265,8 @@ void testGetResourceBySerialisedFormat() {\n                 .toCompletableFuture().join();\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(EMPLOYEE_JSON_FILE);\n-        assertThat(formatResult).containsAll(expected);\n+        assertThat(formatResult)\n+                .as(\"Check that when we request a Resource by its format and directory, the correct resource is returned\")\n+                .containsOnly(EMPLOYEE_JSON_FILE);\n     }\n }"
  },
  {
    "sha": "eb3a4bd809d5b41d9f7840a710e76f60ea8f8550",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/redis/RedisPersistenceTest.java",
    "status": "modified",
    "additions": 40,
    "deletions": 36,
    "changes": 76,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/redis/RedisPersistenceTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/redis/RedisPersistenceTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/repository/redis/RedisPersistenceTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -52,7 +52,6 @@\n import uk.gov.gchq.palisade.resource.LeafResource;\n import uk.gov.gchq.palisade.resource.impl.DirectoryResource;\n import uk.gov.gchq.palisade.resource.impl.FileResource;\n-import uk.gov.gchq.palisade.resource.impl.SystemResource;\n import uk.gov.gchq.palisade.service.SimpleConnectionDetail;\n import uk.gov.gchq.palisade.service.resource.ResourceApplication;\n import uk.gov.gchq.palisade.service.resource.model.AuditableResourceResponse;\n@@ -65,7 +64,6 @@\n import java.nio.ByteBuffer;\n import java.util.AbstractMap;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -83,7 +81,7 @@\n )\n @Import({RedisPersistenceTest.KafkaInitializer.Config.class})\n @ContextConfiguration(initializers = {RedisPersistenceTest.RedisInitializer.class, RedisPersistenceTest.KafkaInitializer.class})\n-@ActiveProfiles({\"redis\", \"akkatest\"})\n+@ActiveProfiles({\"redis\", \"akka-test\"})\n class RedisPersistenceTest {\n     private static final Logger LOGGER = LoggerFactory.getLogger(RedisPersistenceTest.class);\n \n@@ -114,7 +112,6 @@\n     private static final String CLIENT_TYPE = \"client\";\n     private static final String AVRO_FORMAT = \"avro\";\n     private static final String JSON_FORMAT = \"json\";\n-    private static final SystemResource SYSTEM_ROOT = (SystemResource) ResourceBuilder.create(\"file:/\");\n     private static final DirectoryResource TEST_DIRECTORY = (DirectoryResource) ResourceBuilder.create(\"file:/test/\");\n     private static final FileResource EMPLOYEE_AVRO_FILE = ((FileResource) ResourceBuilder.create(\"file:/test/employee.avro\"))\n             .type(EMPLOYEE_TYPE)\n@@ -141,7 +138,7 @@\n             .withUser(USER);\n \n     @BeforeEach\n-    void setup() throws InterruptedException {\n+    void setup() {\n         // Wipe all keys from Redis\n         redisTemplate.execute(conn -> conn.keyCommands()\n                 .keys(ByteBuffer.wrap(\"*\".getBytes()))\n@@ -150,7 +147,7 @@ void setup() throws InterruptedException {\n                         .flatMap(keyBb -> conn.keyCommands().del(keyBb))))\n                 .collectList().block();\n \n-        // Prepopulate\n+        // Pre-populate\n         for (LeafResource file : Arrays.asList(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE)) {\n             Source.single(file)\n                     .via(persistenceLayer.withPersistenceById(TEST_DIRECTORY.getId()))\n@@ -173,8 +170,9 @@ void testGetResourceByResource() {\n         resourceAuditable.forEach(response -> resourceResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, EMPLOYEE_JSON_FILE, CLIENT_AVRO_FILE);\n-        assertThat(resourceResult).containsAll(expected);\n+        assertThat(resourceResult)\n+                .as(\"Check that when getting a Resource by its directory, the correct resources are returned\")\n+                .containsOnly(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n \n         // When making a get request to the resource service by resource for a specific file\n         resourceAuditable = service.getResourcesByResource(EMPLOYEE_AVRO_REQUEST)\n@@ -183,8 +181,9 @@ void testGetResourceByResource() {\n         resourceAuditable.forEach(response -> resourceResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(EMPLOYEE_AVRO_FILE);\n-        assertThat(resourceResult).containsAll(expected);\n+        assertThat(resourceResult)\n+                .as(\"Check that when we get a Resource by itself, the correct resource is returned\")\n+                .contains(EMPLOYEE_AVRO_FILE);\n     }\n \n     @Test\n@@ -199,8 +198,9 @@ void testGetResourceById() {\n         idAuditable.forEach(response -> idResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, EMPLOYEE_JSON_FILE, CLIENT_AVRO_FILE);\n-        assertThat(idResult).containsAll(expected);\n+        assertThat(idResult)\n+                .as(\"Check that when we get resources by the Id of the repository, the correct resources are returned\")\n+                .containsOnly(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n         idResult.clear();\n \n         // When making a get request to the resource service by resourceId for a specific file\n@@ -210,8 +210,9 @@ void testGetResourceById() {\n         idAuditable.forEach(response -> idResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(EMPLOYEE_AVRO_FILE);\n-        assertThat(idResult).containsAll(expected);\n+        assertThat(idResult)\n+                .as(\"Check that when we request one resource by its ID, only the correct resource is returned\")\n+                .containsOnly(EMPLOYEE_AVRO_FILE);\n     }\n \n     @Test\n@@ -226,8 +227,9 @@ void testGetResourceByType() {\n         typeAuditable.forEach(response -> typeResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, EMPLOYEE_JSON_FILE);\n-        assertThat(typeResult).containsAll(expected);\n+        assertThat(typeResult)\n+                .as(\"Check that when we request a resource by the directory and type, the correct resources are returned\")\n+                .containsOnly(EMPLOYEE_JSON_FILE, EMPLOYEE_AVRO_FILE);\n         typeResult.clear();\n \n         // When making a get request to the resource service by type\n@@ -237,9 +239,9 @@ void testGetResourceByType() {\n         typeAuditable.forEach(response -> typeResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(CLIENT_AVRO_FILE);\n-        assertThat(typeResult).containsAll(expected);\n-\n+        assertThat(typeResult)\n+                .as(\"Check that when we request a resource by the directory and type, the correct resource is returned\")\n+                .containsOnly(CLIENT_AVRO_FILE);\n     }\n \n     @Test\n@@ -254,8 +256,9 @@ void testGetResourceBySerialisedFormat() {\n         formatAuditable.forEach(response -> formatResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(EMPLOYEE_AVRO_FILE, CLIENT_AVRO_FILE);\n-        assertThat(formatResult).containsAll(expected);\n+        assertThat(formatResult)\n+                .as(\"Check that when we request resource by their format and directory, the correct resources are returned\")\n+                .containsExactly(CLIENT_AVRO_FILE, EMPLOYEE_AVRO_FILE);\n         formatResult.clear();\n \n         // When making a get request to the resource service by serialisedFormat\n@@ -265,8 +268,9 @@ void testGetResourceBySerialisedFormat() {\n         formatAuditable.forEach(response -> formatResult.add(response.getResourceResponse().resource));\n \n         // Then assert that the expected resource(s) are returned\n-        expected = Collections.singletonList(EMPLOYEE_JSON_FILE);\n-        assertThat(formatResult).containsAll(expected);\n+        assertThat(formatResult)\n+                .as(\"Check that when we request a Resource by its format and directory, the correct resource is returned\")\n+                .containsOnly(EMPLOYEE_JSON_FILE);\n     }\n \n     public static class RedisInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n@@ -294,24 +298,24 @@ public void initialize(@NotNull final ConfigurableApplicationContext context) {\n     }\n \n     public static class KafkaInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n-        static KafkaContainer kafka = new KafkaContainer(\"5.5.1\")\n+        static final KafkaContainer KAFKA = new KafkaContainer(\"5.5.1\")\n                 .withReuse(true);\n \n         @Override\n         public void initialize(final ConfigurableApplicationContext configurableApplicationContext) {\n             configurableApplicationContext.getEnvironment().setActiveProfiles(\"redis\", \"akkatest\");\n-            kafka.addEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"false\");\n-            kafka.addEnv(\"KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR\", \"1\");\n-            kafka.start();\n+            KAFKA.addEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"false\");\n+            KAFKA.addEnv(\"KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR\", \"1\");\n+            KAFKA.start();\n \n             // test kafka config\n             String kafkaConfig = \"akka.discovery.config.services.kafka.from-config=false\";\n-            String kafkaPort = \"akka.discovery.config.services.kafka.endpoints[0].port\" + kafka.getFirstMappedPort();\n+            String kafkaPort = \"akka.discovery.config.services.kafka.endpoints[0].port\" + KAFKA.getFirstMappedPort();\n             TestPropertySourceUtils.addInlinedPropertiesToEnvironment(configurableApplicationContext, kafkaConfig, kafkaPort);\n         }\n \n-        static void createTopics(final List<NewTopic> newTopics, final KafkaContainer kafka) throws ExecutionException, InterruptedException {\n-            try (AdminClient admin = AdminClient.create(Map.of(BOOTSTRAP_SERVERS_CONFIG, String.format(\"%s:%d\", \"localhost\", kafka.getFirstMappedPort())))) {\n+        static void createTopics(final List<NewTopic> newTopics) throws ExecutionException, InterruptedException {\n+            try (AdminClient admin = AdminClient.create(Map.of(BOOTSTRAP_SERVERS_CONFIG, String.format(\"%s:%d\", \"localhost\", KAFKA.getFirstMappedPort())))) {\n                 admin.createTopics(newTopics);\n                 LOGGER.info(\"created topics: \" + admin.listTopics().names().get());\n             }\n@@ -321,14 +325,14 @@ static void createTopics(final List<NewTopic> newTopics, final KafkaContainer ka\n         public static class Config {\n \n             private final List<NewTopic> topics = List.of(\n-                    new NewTopic(\"resource\", 3, (short) 1),\n-                    new NewTopic(\"user\", 3, (short) 1),\n-                    new NewTopic(\"error\", 3, (short) 1));\n+                    new NewTopic(\"resource\", 1, (short) 1),\n+                    new NewTopic(\"user\", 1, (short) 1),\n+                    new NewTopic(\"error\", 1, (short) 1));\n \n             @Bean\n             KafkaContainer kafkaContainer() throws ExecutionException, InterruptedException {\n-                createTopics(this.topics, kafka);\n-                return kafka;\n+                createTopics(this.topics);\n+                return KAFKA;\n             }\n \n             @Bean\n@@ -339,7 +343,7 @@ static PropertiesConfigurer propertiesConfigurer(final ResourceLoader resourceLo\n \n             @Bean\n             @Primary\n-            ActorSystem actorSystem(final PropertiesConfigurer props, final KafkaContainer kafka, final ConfigurableApplicationContext context) {\n+            ActorSystem actorSystem(final PropertiesConfigurer props, final KafkaContainer kafka) {\n                 RedisPersistenceTest.LOGGER.info(\"Starting Kafka with port {}\", kafka.getFirstMappedPort());\n                 return ActorSystem.create(\"actor-with-overrides\", props.toHoconConfig(Stream.concat(\n                         props.getAllActiveProperties().entrySet().stream()"
  },
  {
    "sha": "978b6a738875b582dd575acb6c076f8ed5150203",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/HadoopResourceServiceTest.java",
    "status": "modified",
    "additions": 56,
    "deletions": 40,
    "changes": 96,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/HadoopResourceServiceTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/HadoopResourceServiceTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/HadoopResourceServiceTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -43,13 +43,10 @@\n import java.net.URISyntaxException;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertAll;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n class HadoopResourceServiceTest {\n@@ -80,7 +77,7 @@ private static String getFileNameFromResourceDetails(final String name, final St\n     }\n \n     @BeforeEach\n-    void setup() throws IOException, URISyntaxException {\n+    void setup() throws IOException {\n         if (IS_WINDOWS) {\n             System.setProperty(\"hadoop.home.dir\", Paths.get(\"./src/test/resources/hadoop-3.2.1\").toAbsolutePath().normalize().toString());\n         }\n@@ -119,8 +116,9 @@ void testGetResourcesById() {\n         resourcesById.forEachRemaining(resultList::add);\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Collections.singletonList(resource1);\n-        assertThat(resultList).isEqualTo(expected);\n+        assertThat(resultList)\n+                .as(\"Check that when I get a resource by its Id, the correct resource is returned\")\n+                .containsOnly(resource1);\n     }\n \n     @Test\n@@ -129,11 +127,14 @@ void testShouldGetResourcesOutsideOfScope() throws URISyntaxException {\n \n         // When making a get request to the resource service by resourceId\n         final URI found = new URI(HDFS, \"/unknownDir\" + id1.getPath(), null);\n-        Exception exception = assertThrows(Exception.class,\n+        var exception = assertThrows(Exception.class,\n                 () -> resourceService.getResourcesById(found.toString()), HadoopResourceService.ERROR_OUT_SCOPE);\n \n+        var outOfScope = String.format(HadoopResourceService.ERROR_OUT_SCOPE, found, config.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY));\n         // Then assert the expected error message is returned\n-        assertThat(String.format(HadoopResourceService.ERROR_OUT_SCOPE, found, config.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY))).isEqualTo(exception.getMessage());\n+        assertThat(outOfScope)\n+                .as(\"Check that when I try to get a resource in an unknown directory, the correct error message is thrown\")\n+                .isEqualTo(exception.getMessage());\n     }\n \n     @Test\n@@ -146,8 +147,9 @@ void testShouldGetResourcesByIdOfAFolder() {\n         resourcesById.forEachRemaining(resultList::add);\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(resource1, resource2);\n-        assertThat(resultList.size()).isEqualTo(expected.size());\n+        assertThat(resultList)\n+                .as(\"Check that when I get resources by the Id of the directory, the correct resources are returned\")\n+                .containsOnly(resource1, resource2);\n     }\n \n     @Test\n@@ -161,24 +163,26 @@ void testShouldFilterOutIllegalFileName() throws Exception {\n         resourcesById.forEachRemaining(resourceList::add);\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(resource1, resource2);\n-        assertThat(resourceList.size()).isEqualTo(expected.size());\n+        assertThat(resourceList)\n+                .as(\"Check that when I get resources by the Id of the directory, the correct resources are returned\")\n+                .containsOnly(resource1, resource2);\n     }\n \n     @Test\n     void testShouldGetResourcesByType() throws Exception {\n         // Given a new file with a new type is added\n-        List<LeafResource> resultist = new ArrayList<>();\n+        List<LeafResource> resultList = new ArrayList<>();\n         writeFile(fs, dir, \"00003\", FORMAT_VALUE, \"not\" + TYPE_VALUE);\n         HadoopResourceDetails.addTypeSupport(\"not\" + TYPE_VALUE, TYPE_CLASSNAME + \".not\");\n \n         // When making a get request to the resource service by type\n         final Iterator<LeafResource> resourcesByType = resourceService.getResourcesByType(TYPE_CLASSNAME);\n-        resourcesByType.forEachRemaining(resultist::add);\n+        resourcesByType.forEachRemaining(resultList::add);\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(resource1, resource2);\n-        assertThat(resultist.size()).isEqualTo(expected.size());\n+        assertThat(resultList)\n+                .as(\"Check that when I get resources by their type, the correct resources are returned\")\n+                .containsOnly(resource1, resource2);\n     }\n \n     @Test\n@@ -192,8 +196,9 @@ void testShouldGetResourcesByFormat() throws Exception {\n         resourcesBySerialisedFormat.forEachRemaining(resultList::add);\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(resource1, resource2);\n-        assertThat(resultList.size()).isEqualTo(expected.size());\n+        assertThat(resultList)\n+                .as(\"Check that when I get resources by their format, the correct resources are returned\")\n+                .containsOnly(resource1, resource2);\n \n     }\n \n@@ -207,14 +212,16 @@ void testShouldGetResourcesByResource() {\n         resourcesByResource.forEachRemaining(resultList::add);\n \n         // Then assert that the expected resource(s) are returned\n-        List<LeafResource> expected = Arrays.asList(resource1, resource2);\n-        assertThat(resultList.size()).isEqualTo(expected.size());\n+        assertThat(resultList)\n+                .as(\"Check that when I get resources by the same resource, the correct resources are returned\")\n+                .containsOnly(resource1, resource2);\n     }\n \n     @Test\n     void testAddResource() {\n-        boolean success = resourceService.addResource(null);\n-        assertThat(success).isFalse();\n+        assertThat(resourceService.addResource(null))\n+                .as(\"Check that when adding a invalid resource, the correct response is returned\")\n+                .isFalse();\n     }\n \n     @Test\n@@ -224,38 +231,47 @@ void testShouldResolveParents() {\n \n         final ParentResource parent1 = fileResource.getParent();\n \n-        assertThat(dir.resolve(\"folder1/folder2/\").toString()).isEqualTo(parent1.getId());\n-        assertAll(\n-                () -> assertThat(parent1).isInstanceOf(ChildResource.class),\n-                () -> assertThat(parent1).isInstanceOf(DirectoryResource.class)\n-        );\n+        assertThat(dir.resolve(\"folder1/folder2/\").toString())\n+                .as(\"Check the URI of the parent is the correct URI\")\n+                .isEqualTo(parent1.getId());\n \n-        final ChildResource child = (ChildResource) parent1;\n+        assertThat(parent1)\n+                .as(\"Check that the ParentResource has been instantiated correctly\")\n+                .isInstanceOf(ChildResource.class)\n+                .isInstanceOf(DirectoryResource.class);\n \n+        final ChildResource child = (ChildResource) parent1;\n         final ParentResource parent2 = child.getParent();\n \n-        assertThat(dir.resolve(\"folder1/\").toString()).isEqualTo(parent2.getId());\n-        assertAll(\n-                () -> assertThat(parent2).isInstanceOf(ChildResource.class),\n-                () -> assertThat(parent2).isInstanceOf(DirectoryResource.class)\n-        );\n+        assertThat(dir.resolve(\"folder1/\").toString())\n+                .as(\"Check that the URI of the parent is the correct URI\")\n+                .isEqualTo(parent2.getId());\n+\n+        assertThat(parent2)\n+                .as(\"Check that the ParentResource has been instantiated correctly\")\n+                .isInstanceOf(ChildResource.class)\n+                .isInstanceOf(DirectoryResource.class);\n \n         final ChildResource child2 = (ChildResource) parent2;\n \n         final ParentResource parent3 = child2.getParent();\n \n-        assertThat(dir.toString()).isEqualTo(parent3.getId());\n-        assertAll(\n-                () -> assertThat(parent3).isInstanceOf(ChildResource.class),\n-                () -> assertThat(parent3).isInstanceOf(DirectoryResource.class)\n-        );\n+        assertThat(dir.toString())\n+                .as(\"Check that the URI returned is the correct parent id\")\n+                .isEqualTo(parent3.getId());\n \n+        assertThat(parent3)\n+                .as(\"Check that the ParentResource has been instantiated correctly\")\n+                .isInstanceOf(ChildResource.class)\n+                .isInstanceOf(DirectoryResource.class);\n \n-        final ChildResource child3 = (ChildResource) parent3;\n \n+        final ChildResource child3 = (ChildResource) parent3;\n         final ParentResource parent4 = child3.getParent();\n \n-        assertThat(root.toString()).isEqualTo(parent4.getId());\n+        assertThat(root.toString())\n+                .as(\"Check the URI of the root is correct\")\n+                .isEqualTo(parent4.getId());\n     }\n \n     private Configuration createConf(final String fsDefaultName) {"
  },
  {
    "sha": "03df3aef6bfcd865fe09f5d4b68f0fae1dbe9000",
    "filename": "resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/ResourceServicePersistenceProxyTest.java",
    "status": "modified",
    "additions": 32,
    "deletions": 17,
    "changes": 49,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/ResourceServicePersistenceProxyTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/ResourceServicePersistenceProxyTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/java/uk/gov/gchq/palisade/component/resource/service/ResourceServicePersistenceProxyTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -38,8 +38,10 @@\n import uk.gov.gchq.palisade.service.resource.config.ApplicationConfiguration;\n import uk.gov.gchq.palisade.service.resource.config.R2dbcConfiguration;\n import uk.gov.gchq.palisade.service.resource.exception.NoSuchResourceException;\n+import uk.gov.gchq.palisade.service.resource.model.AuditErrorMessage;\n import uk.gov.gchq.palisade.service.resource.model.AuditableResourceResponse;\n import uk.gov.gchq.palisade.service.resource.model.ResourceRequest;\n+import uk.gov.gchq.palisade.service.resource.model.ResourceResponse;\n import uk.gov.gchq.palisade.service.resource.repository.ReactivePersistenceLayer;\n import uk.gov.gchq.palisade.service.resource.service.ResourceServicePersistenceProxy;\n import uk.gov.gchq.palisade.service.resource.stream.config.AkkaSystemConfig;\n@@ -52,7 +54,6 @@\n import java.util.function.Function;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertAll;\n \n /**\n  * Tests to verify the handling of exceptions,and the population of audit objects during stream processing\n@@ -61,7 +62,7 @@\n @ContextConfiguration(classes = {ApplicationConfiguration.class, R2dbcConfiguration.class, AkkaSystemConfig.class})\n @EntityScan(basePackages = {\"uk.gov.gchq.palisade.service.resource.domain\"})\n @EnableR2dbcRepositories(basePackages = {\"uk.gov.gchq.palisade.service.resource.repository\"})\n-@ActiveProfiles({\"dbtest\"})\n+@ActiveProfiles({\"db-test\"})\n @DirtiesContext(classMode = ClassMode.BEFORE_CLASS)\n class ResourceServicePersistenceProxyTest {\n \n@@ -97,8 +98,13 @@ void setup() throws InterruptedException {\n \n     @Test\n     void testContextLoads() {\n-        assertThat(resourceServiceAsyncProxy).isNotNull();\n-        assertThat(persistenceLayer).isNotNull();\n+        assertThat(resourceServiceAsyncProxy)\n+                .as(\"Check the resourceProxy has been autowired successfully\")\n+                .isNotNull();\n+\n+        assertThat(persistenceLayer)\n+                .as(\"Check the persistenceLayer has been autowired successfully\")\n+                .isNotNull();\n     }\n \n     @Test\n@@ -112,11 +118,16 @@ void testGetResourcesByIdSuccess() {\n         final List<AuditableResourceResponse> result = future.toCompletableFuture().join();\n \n         // Then check there is no error and check the returned resource ID\n-        assertAll(\n-                () -> assertThat(result).hasSize(1),\n-                () -> assertThat(result.get(0).getAuditErrorMessage()).isNull(),\n-                () -> assertThat(result.get(0).getResourceResponse().getResource().getId()).isEqualTo(FILE_1.getId())\n-        );\n+        assertThat(result.get(0))\n+                .as(\"Check that there is no AuditErrorMessage\")\n+                .extracting(AuditableResourceResponse::getAuditErrorMessage)\n+                .isNull();\n+\n+        assertThat(result.get(0))\n+                .as(\"Check the resourceResponse has the correct resource attached\")\n+                .extracting(AuditableResourceResponse::getResourceResponse)\n+                .extracting(ResourceResponse::getResourceId)\n+                .isEqualTo(FILE_1.getId());\n     }\n \n     @Test\n@@ -130,13 +141,17 @@ void testGetResourceByIdFailure() {\n                 .toCompletableFuture().join();\n \n         // Then check there is an error\n-        assertAll(\n-                () -> assertThat(result).hasSize(1),\n-                () -> assertThat(result.get(0).getResourceResponse()).isNull(),\n-                () -> assertThat(result.get(0).getAuditErrorMessage().getError())\n-                        .isExactlyInstanceOf(NoSuchResourceException.class)\n-                        .getCause()\n-                        .hasMessageContaining(\"Failed to walk path \" + File.separator + \"test\" + File.separator + \"resourceId\" + File.separator + \"data2.txt\")\n-        );\n+        assertThat(result.get(0))\n+                .as(\"Check that there is no ResourceResponse\")\n+                .extracting(AuditableResourceResponse::getResourceResponse)\n+                .isNull();\n+\n+        assertThat(result.get(0))\n+                .as(\"Check that the resourceServiceAsyncProxy throws the correct error when processing an invalid request\")\n+                .extracting(AuditableResourceResponse::getAuditErrorMessage)\n+                .extracting(AuditErrorMessage::getError)\n+                .isExactlyInstanceOf(NoSuchResourceException.class)\n+                .extracting(\"Message\")\n+                .isEqualTo(\"Failed to walk path \" + File.separator + \"test\" + File.separator + \"resourceId\" + File.separator + \"data2.txt\");\n     }\n }"
  },
  {
    "sha": "6ad2929339efdd97af5e3baaf66248383ee1ceb7",
    "filename": "resource-service/src/component-tests/resources/application-akka-test.yaml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/resources/application-akka-test.yaml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/component-tests/resources/application-akka-test.yaml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/component-tests/resources/application-akka-test.yaml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "previous_filename": "resource-service/src/component-tests/resources/application-akkatest.yaml"
  },
  {
    "sha": "2eea1c7c6da976136bc312499f0b285942b9919b",
    "filename": "resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/ContractTestData.java",
    "status": "modified",
    "additions": 0,
    "deletions": 14,
    "changes": 14,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/ContractTestData.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/ContractTestData.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/ContractTestData.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -83,20 +83,6 @@ private ContractTestData() {\n             throw new SerializationFailedException(\"Failed to parse error contract test data\", e);\n         }\n     };\n-    public static final Function<Integer, ResourceRequest> REQUEST_FACTORY_OBJ = i -> {\n-        try {\n-            return MAPPER.treeToValue(REQUEST_FACTORY_NODE.apply(i), ResourceRequest.class);\n-        } catch (JsonProcessingException e) {\n-            throw new SerializationFailedException(\"Failed to convert contract test data to objects\", e);\n-        }\n-    };\n-    public static final Function<Integer, ResourceRequest> NO_USER_ID_REQUEST_FACTORY_OBJ = i -> {\n-        try {\n-            return MAPPER.treeToValue(NO_RESOURCE_REQUEST_FACTORY_NODE.apply(i), ResourceRequest.class);\n-        } catch (JsonProcessingException e) {\n-            throw new SerializationFailedException(\"Failed to convert error contract test data to objects\", e);\n-        }\n-    };\n \n     public static final String REQUEST_TOKEN = \"test-request-token\";\n     public static final Headers START_HEADERS = new RecordHeaders(new Header[]{new RecordHeader(Token.HEADER, REQUEST_TOKEN.getBytes()), new RecordHeader(StreamMarker.HEADER, StreamMarker.START.toString().getBytes())});"
  },
  {
    "sha": "ceda494c3d8ac309675e6f8f9ba59b2c7dc10976",
    "filename": "resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaContractTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 7,
    "changes": 20,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaContractTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaContractTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaContractTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -86,7 +86,7 @@\n )\n @Import(KafkaInitializer.Config.class)\n @ContextConfiguration(initializers = {KafkaInitializer.class})\n-@ActiveProfiles({\"dbtest\", \"akkatest\", \"testresource\"})\n+@ActiveProfiles({\"db-test\", \"akka-test\", \"test-resource\"})\n @DirtiesContext(classMode = ClassMode.BEFORE_CLASS)\n class KafkaContractTest {\n     @Autowired\n@@ -104,7 +104,7 @@\n     @DirtiesContext\n     void testRequestSet() {\n         // Only 1 request will be received by the resource-service\n-        // The ContractTestData.REQUEST_TOKEN maps to partition 0 of [0, 1, 2], so the akkatest yaml connects the consumer to only partition 0\n+        // The ContractTestData.REQUEST_TOKEN maps to partition 0 of [0, 1, 2], so the akka-test yaml connects the consumer to only partition 0\n         final Stream<ProducerRecord<String, JsonNode>> requests = Stream.of(\n                 Stream.of(ContractTestData.START_RECORD),\n                 ContractTestData.RECORD_NODE_FACTORY.get().limit(1L),\n@@ -143,9 +143,11 @@ void testRequestSet() {\n         // All messages have a correct Token in the header\n         assertAll(\"Headers have correct token\",\n                 () -> assertThat(results)\n+                        .as(\"Check that the correct amount of messages are returned\")\n                         .hasSize((int) recordCount),\n \n                 () -> assertThat(results)\n+                        .as(\"Check the message contains the correct headers\")\n                         .allSatisfy(result ->\n                                 assertThat(result.headers().lastHeader(Token.HEADER).value())\n                                         .isEqualTo(ContractTestData.REQUEST_TOKEN.getBytes()))\n@@ -154,17 +156,19 @@ void testRequestSet() {\n         // The first and last have a correct StreamMarker header\n         assertAll(\"StreamMarkers are correct START and END\",\n                 () -> assertThat(results.getFirst().headers().lastHeader(StreamMarker.HEADER).value())\n+                        .as(\"Check that the start header contains all the correct information\")\n                         .isEqualTo(StreamMarker.START.toString().getBytes()),\n \n                 () -> assertThat(results.getLast().headers().lastHeader(StreamMarker.HEADER).value())\n+                        .as(\"Check that the end header contains all the correct information\")\n                         .isEqualTo(StreamMarker.END.toString().getBytes())\n         );\n \n         // All but the first and last have the expected message\n         results.removeFirst();\n         results.removeLast();\n-\n         assertThat(results)\n+                .as(\"Check that the response has all the correct Resource information\")\n                 .extracting(ConsumerRecord::value)\n                 .extracting(result -> result.get(\"resource\"))\n                 .allSatisfy(resource -> {\n@@ -218,7 +222,7 @@ void testNoSuchResourceExceptionIsThrown() {\n         // Then - the results are as expected\n         assertAll(\n                 () -> assertThat(results)\n-                        .as(\"The 'output' topic has 2 messages\")\n+                        .as(\"The correct number of messages are returned\")\n                         .hasSize(2),\n \n                 () -> assertThat(results)\n@@ -256,7 +260,7 @@ void testNoSuchResourceExceptionIsThrown() {\n         assertAll(\"Asserting on the error topic\",\n                 // One error is produced\n                 () -> assertThat(errorResults)\n-                        .as(\"The 'error' topic has 1 message\")\n+                        .as(\"Check the correct number of messages are returned\")\n                         .hasSize(1),\n \n                 // The error has the relevant headers, including the token\n@@ -266,7 +270,6 @@ void testNoSuchResourceExceptionIsThrown() {\n                                 assertThat(result.headers().lastHeader(Token.HEADER).value())\n                                         .isEqualTo(ContractTestData.REQUEST_TOKEN.getBytes())),\n \n-                // The error has a message that contains the throwable exception, and the message\n                 () -> assertThat(errorResults.get(0).value().get(\"error\").get(\"message\").asText())\n                         .as(\"Check the exception message\")\n                         .startsWith(\"Failed to walk path \" + File.separator + \"not\" + File.separator + \"a\" + File.separator + \"resource\")\n@@ -305,14 +308,17 @@ void testRestEndpoint() {\n         // The request was written with the correct header\n         assertAll(\"Records returned are correct\",\n                 () -> assertThat(results)\n+                        .as(\"Check the correct number of messages are returned\")\n                         .hasSize(1),\n \n                 () -> assertThat(results)\n                         .allSatisfy(result -> {\n                             assertThat(result.headers().lastHeader(Token.HEADER).value())\n+                                    .as(\"Check that the token is in the header\")\n                                     .isEqualTo(ContractTestData.REQUEST_TOKEN.getBytes());\n-\n                             assertThat(result.value())\n+                                    .as(\"Check the request returned is correct\")\n+                                    .usingRecursiveComparison()\n                                     .isEqualTo(ContractTestData.REQUEST_OBJ);\n                         })\n         );"
  },
  {
    "sha": "c7168e47744a1b9e11fe14c98a3d165b8244fbe4",
    "filename": "resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaInitializer.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaInitializer.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaInitializer.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/kafka/KafkaInitializer.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -68,7 +68,7 @@ static void createTopics(final List<NewTopic> newTopics, final KafkaContainer ka\n \n     @Override\n     public void initialize(final ConfigurableApplicationContext configurableApplicationContext) {\n-        configurableApplicationContext.getEnvironment().setActiveProfiles(\"akkatest\", \"dbtest\", \"testresource\");\n+        configurableApplicationContext.getEnvironment().setActiveProfiles(\"akka-test\", \"db-test\", \"test-resource\");\n         KAFKA_CONTAINER.addEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"false\");\n         KAFKA_CONTAINER.addEnv(\"KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR\", \"1\");\n         KAFKA_CONTAINER.start();\n@@ -101,7 +101,7 @@ KafkaContainer kafkaContainer() throws ExecutionException, InterruptedException\n \n         @Bean\n         @Primary\n-        ActorSystem actorSystem(final PropertiesConfigurer props, final KafkaContainer kafka, final ConfigurableApplicationContext context) {\n+        ActorSystem actorSystem(final PropertiesConfigurer props, final KafkaContainer kafka) {\n             LOGGER.info(\"Starting Kafka with port {}\", kafka.getFirstMappedPort());\n             return ActorSystem.create(\"actor-with-overrides\", props.toHoconConfig(Stream.concat(\n                     props.getAllActiveProperties().entrySet().stream()\n@@ -120,23 +120,23 @@ Materializer materializer(final ActorSystem system) {\n     // Serialiser for upstream test input\n     static class RequestSerializer implements Serializer<JsonNode> {\n         @Override\n-        public byte[] serialize(final String s, final JsonNode userRequest) {\n+        public byte[] serialize(final String s, final JsonNode resourceRequest) {\n             try {\n-                return MAPPER.writeValueAsBytes(userRequest);\n+                return MAPPER.writeValueAsBytes(resourceRequest);\n             } catch (JsonProcessingException e) {\n-                throw new SerializationFailedException(\"Failed to serialize \" + userRequest.toString(), e);\n+                throw new SerializationFailedException(\"Failed to serialize \" + resourceRequest.toString(), e);\n             }\n         }\n     }\n \n-    // Deserialiser for downstream test output\n+    // Deserializer for downstream test output\n     static class ResponseDeserializer implements Deserializer<JsonNode> {\n         @Override\n-        public JsonNode deserialize(final String s, final byte[] userResponse) {\n+        public JsonNode deserialize(final String s, final byte[] resourceResponse) {\n             try {\n-                return MAPPER.readTree(userResponse);\n+                return MAPPER.readTree(resourceResponse);\n             } catch (IOException e) {\n-                throw new SerializationFailedException(\"Failed to deserialize \" + new String(userResponse), e);\n+                throw new SerializationFailedException(\"Failed to deserialize \" + new String(resourceResponse), e);\n             }\n         }\n     }"
  },
  {
    "sha": "368ab1c26d0bcfb8907c044eec1af1b42e20fa2c",
    "filename": "resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/rest/HealthActuatorContractTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 5,
    "changes": 19,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/rest/HealthActuatorContractTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/rest/HealthActuatorContractTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/java/uk/gov/gchq/palisade/contract/resource/rest/HealthActuatorContractTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -28,6 +28,7 @@\n import uk.gov.gchq.palisade.service.resource.ResourceApplication;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n \n /**\n  * An external requirement of the service is to keep-alive in k8s.\n@@ -39,25 +40,33 @@\n         webEnvironment = WebEnvironment.RANDOM_PORT,\n         properties = {\"management.health.kafka.enabled=false\", \"spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\"}\n )\n-@ActiveProfiles({\"dbtest\", \"akkatest\"})\n+@ActiveProfiles({\"db-test\", \"akka-test\"})\n class HealthActuatorContractTest {\n \n     @Autowired\n     private TestRestTemplate restTemplate;\n \n     @Test\n     void testContextLoads() {\n-        assertThat(restTemplate).isNotNull();\n+        assertThat(restTemplate)\n+                .as(\"Check that the restTemplate is autowired successfully\")\n+                .isNotNull();\n     }\n \n     @Test\n     void testServiceIsHealthy() {\n         // Given that the service is running (and presumably healthy)\n \n         // When we GET the /actuator/health REST endpoint (used by k8s)\n-        final ResponseEntity<String> health = restTemplate.getForEntity(\"/actuator/health\", String.class);\n+        ResponseEntity<String> responseEntity = restTemplate.getForEntity(\"/actuator/health\", String.class);\n \n-        // Then the service reports itself to be healthy\n-        assertThat(health.getStatusCode()).isEqualTo(HttpStatus.OK);\n+        assertAll(\"Assert the Health Actuator\",\n+                () -> assertThat(responseEntity.getStatusCode())\n+                        .as(\"Check the status code of the response\")\n+                        .isEqualTo(HttpStatus.OK),\n+                () -> assertThat(responseEntity.getBody())\n+                        .as(\"Check the body of the response\")\n+                        .contains(\"\\\"status\\\":\\\"UP\\\"\")\n+        );\n     }\n }"
  },
  {
    "sha": "6ad2929339efdd97af5e3baaf66248383ee1ceb7",
    "filename": "resource-service/src/contract-tests/resources/application-akka-test.yaml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/resources/application-akka-test.yaml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/resources/application-akka-test.yaml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/resources/application-akka-test.yaml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "previous_filename": "resource-service/src/contract-tests/resources/application-akkatest.yaml"
  },
  {
    "sha": "25986e94e71e22718a62a29334ec80a149a6d0a5",
    "filename": "resource-service/src/contract-tests/resources/application-db-test.yaml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/resources/application-db-test.yaml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/resources/application-db-test.yaml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/resources/application-db-test.yaml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "previous_filename": "resource-service/src/contract-tests/resources/application-dbtest.yaml"
  },
  {
    "sha": "2183a4f534e7e69416b0c7792f2a370d03f95b81",
    "filename": "resource-service/src/contract-tests/resources/application-test-resource.yaml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/resources/application-test-resource.yaml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/contract-tests/resources/application-test-resource.yaml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/contract-tests/resources/application-test-resource.yaml?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "previous_filename": "resource-service/src/contract-tests/resources/application-testresource.yaml"
  },
  {
    "sha": "54703915cf82b2f39ddb7af5caaa0bf65381a6a3",
    "filename": "resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/model/MessageSerialisationTest.java",
    "status": "modified",
    "additions": 15,
    "deletions": 2,
    "changes": 17,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/model/MessageSerialisationTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/model/MessageSerialisationTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/model/MessageSerialisationTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -49,14 +49,27 @@\n \n     @ParameterizedTest\n     @ArgumentsSource(MessageTypeSource.class)\n-    <T> void serialiseDeserialiseIsConsistent(final T message) throws JsonProcessingException {\n+    <T> void testSerialisingAndDeseralising(final T message) throws JsonProcessingException {\n         // Given some test data\n \n         // When a Request is serialised and deserialised\n         String serialisedRequest = MAPPER.writeValueAsString(message);\n         Object deserialisedRequest = MAPPER.readValue(serialisedRequest, message.getClass());\n \n         // Then the deserialised object is unchanged (equal)\n-        assertThat(deserialisedRequest).usingRecursiveComparison().ignoringFieldsOfTypes(Throwable.class).isEqualTo(message);\n+        assertThat(deserialisedRequest)\n+                .as(\"Check that the request has been deserialised correctly\")\n+                .usingRecursiveComparison()\n+                .ignoringFieldsOfTypes(Throwable.class)\n+                .isEqualTo(message);\n+\n+        if (deserialisedRequest instanceof AuditErrorMessage) {\n+            assertThat(deserialisedRequest)\n+                    .as(\"Check that the AuditErrorMessage contains all the correct information after deseralising\")\n+                    .extracting(\"Error\")\n+                    .isInstanceOf(Throwable.class)\n+                    .extracting(\"Message\")\n+                    .isEqualTo(\"test exception\");\n+        }\n     }\n }"
  },
  {
    "sha": "dc0e3717dacc827a0099bd55cebd580e8e2d7c4e",
    "filename": "resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/FunctionalIteratorTest.java",
    "status": "modified",
    "additions": 36,
    "deletions": 9,
    "changes": 45,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/FunctionalIteratorTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/FunctionalIteratorTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/FunctionalIteratorTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -44,51 +44,75 @@ void setUp() {\n     void testMap() {\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .map(i -> i + 1);\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(1, 2, 3, 4, 5, 6));\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the iterator map has updated the integers successfully\")\n+                .isEqualTo(List.of(1, 2, 3, 4, 5, 6));\n     }\n \n     @Test\n     void testFilterFirst() {\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .filter(i -> i == 0);\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(0));\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the filter has updated the iterator successfully\")\n+                .isEqualTo(List.of(0));\n     }\n \n     @Test\n     void testFilterLast() {\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .filter(i -> i == 5);\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(5));\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the filter has updated the iterator successfully\")\n+                .isEqualTo(List.of(5));\n     }\n \n     @Test\n     void testMapLast() {\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .mapLast(i -> 100);\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(0, 1, 2, 3, 4, 100));\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the iterator mapLast has updated the last value in the iterator\")\n+                .isEqualTo(List.of(0, 1, 2, 3, 4, 100));\n     }\n \n     @Test\n     void testTwoFlatMap() {\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .flatMap(i -> List.of(i, 2 * i).iterator());\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(0, 0, 1, 2, 2, 4, 3, 6, 4, 8, 5, 10));\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the iterator flatMap has updated the integers successfully\")\n+                .isEqualTo(List.of(0, 0, 1, 2, 2, 4, 3, 6, 4, 8, 5, 10));\n     }\n \n     @Test\n     void testZeroFlatMap() {\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .flatMap(i -> Collections.emptyIterator());\n-        assertThat(listOf(dslTest)).isEqualTo(Collections.emptyList());\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the iterator flatMap has updated the iterator successfully\")\n+                .isEqualTo(Collections.emptyList());\n     }\n \n     @Test\n     void testPeek() {\n         final AtomicInteger count = new AtomicInteger(0);\n         FunctionalIterator<Integer> dslTest = testIterator\n                 .peek(i -> count.incrementAndGet());\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(0, 1, 2, 3, 4, 5));\n-        assertThat(count.intValue()).isEqualTo(6);\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check that the iterator peek has extracted the correct value\")\n+                .isEqualTo(List.of(0, 1, 2, 3, 4, 5));\n+\n+        assertThat(count.intValue())\n+                .as(\"Check that the count is the integer we expect\")\n+                .isEqualTo(6);\n     }\n \n     @Test\n@@ -105,7 +129,10 @@ void testWholeDSLTwice() {\n                 .filter(i -> i > 0 && i < 8) // 6\n                 .flatMap(i -> List.of(i * (i + 1)).iterator()) // 42\n                 .peek(System.out::println); // Print 1\n-        assertThat(listOf(dslTest)).isEqualTo(List.of(42));\n+\n+        assertThat(listOf(dslTest))\n+                .as(\"Check the iterator has been updated successfully\")\n+                .isEqualTo(List.of(42));\n     }\n \n     private <T> List<T> listOf(final Iterator<T> iterator) {"
  },
  {
    "sha": "a46e6ef38f5caea080ff4a75fdb071ad49a287d8",
    "filename": "resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/SimpleResourceServiceTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 13,
    "changes": 33,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/SimpleResourceServiceTest.java",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/69942aa44e761a06997c85248fd245e5f3368eae/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/SimpleResourceServiceTest.java",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/unit-tests/java/uk/gov/gchq/palisade/service/resource/service/SimpleResourceServiceTest.java?ref=69942aa44e761a06997c85248fd245e5f3368eae",
    "patch": "@@ -36,43 +36,50 @@\n \n     @Test\n     void testJavaFilesInUnitTest() throws IOException {\n-        // Given\n+        // Given we create a file and add it to the service\n         DirectoryResource unitTestJava = (DirectoryResource) ResourceBuilder.create(new File(\"./src/unit-tests/java\").getCanonicalFile().toURI());\n         LeafResource resource = (LeafResource) ResourceBuilder.create(\n-                new File(\"./src/unit-tests/java/uk/gov/gchq/palisade/service/resource/ApplicationTestData.java\").getCanonicalFile().toURI()\n-        );\n+                new File(\"./src/unit-tests/java/uk/gov/gchq/palisade/service/resource/ApplicationTestData.java\").getCanonicalFile().toURI());\n         resource.type(\"java.lang.String\").serialisedFormat(\"java\").connectionDetail(new SimpleConnectionDetail().serviceName(\"data-service\"));\n         Set<LeafResource> testFiles = new HashSet<>();\n \n-        // When\n+        // When we get the file by the ID of the directory\n         service.getResourcesById(unitTestJava.getId()).forEachRemaining(testFiles::add);\n \n-        // Then\n-        assertThat(testFiles).contains(resource);\n+        // Then its been retrieved successfully\n+        assertThat(testFiles)\n+                .as(\"Check that the returned file is in the list returned\")\n+                .contains(resource);\n     }\n \n     @Test\n     void testCanFindTestResourceAvro() throws IOException {\n-        // Given\n+        // Given we create a avro file\n         URI avroFileURI = new File(\"./src/unit-tests/resources/test_resource.avro\").getCanonicalFile().toURI();\n         LeafResource testResourceAvro = (LeafResource) ResourceBuilder.create(avroFileURI);\n         DirectoryResource testResourceDir = (DirectoryResource) testResourceAvro.getParent();\n \n-        // Given\n+        // Given we add the avro to our list of expected returned files\n         FunctionalIterator<LeafResource> expectedAvroResource = FunctionalIterator.fromIterator(service.query(avroFileURI, x -> true));\n         LeafResource leafResource = expectedAvroResource.next();\n \n-        // When\n+        // When we request the avro by passing in the id of its directory\n         FunctionalIterator<LeafResource> resourcesById = FunctionalIterator.fromIterator(service.getResourcesById(testResourceDir.getId()))\n                 .filter(resource -> resource.getSerialisedFormat().equals(\"avro\"));\n \n-        // Then\n-        assertThat(resourcesById.next()).isEqualTo(leafResource);\n+        // Then it has been retrieved successfully\n+        assertThat(resourcesById.next())\n+                .as(\"Check that the file has been returned successfully\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(leafResource);\n \n-        // When\n+        // When we get the resource by its seralised format\n         FunctionalIterator<LeafResource> resourcesByFormat = FunctionalIterator.fromIterator(service.getResourcesBySerialisedFormat(leafResource.getSerialisedFormat()))\n                 .filter(resource -> resource.getId().equals(leafResource.getId()));\n \n-        assertThat(resourcesByFormat.next()).isEqualTo(leafResource);\n+        assertThat(resourcesByFormat.next())\n+                .as(\"Check that the file has been returned successfully\")\n+                .usingRecursiveComparison()\n+                .isEqualTo(leafResource);\n     }\n }"
  },
  {
    "sha": "688e5d4e1e038fb287d8d6facd86178e91b22aa0",
    "filename": "resource-service/src/unit-tests/resources/application-dbtest.yaml",
    "status": "removed",
    "additions": 0,
    "deletions": 25,
    "changes": 25,
    "blob_url": "https://github.com/gchq/Palisade-services/blob/5cb466c510ab5d5640fb014dbd7d44423ec5d33f/resource-service/src/unit-tests/resources/application-dbtest.yaml",
    "raw_url": "https://github.com/gchq/Palisade-services/raw/5cb466c510ab5d5640fb014dbd7d44423ec5d33f/resource-service/src/unit-tests/resources/application-dbtest.yaml",
    "contents_url": "https://api.github.com/repos/gchq/Palisade-services/contents/resource-service/src/unit-tests/resources/application-dbtest.yaml?ref=5cb466c510ab5d5640fb014dbd7d44423ec5d33f",
    "patch": "@@ -1,25 +0,0 @@\n-# Copyright 2018-2021 Crown Copyright\n-#\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-#     http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-#\n-\n-spring:\n-  datasource:\n-    url: jdbc:h2:mem:testdb\n-    username:\n-    password:\n-    initialization-mode: always\n-  jpa:\n-    hibernate:\n-      ddl-auto: create-drop\n-    show-sql: true"
  }
]
