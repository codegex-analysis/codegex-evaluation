[
  {
    "sha": "e9fe730e91cd297c7d8036292d592fc49cfd3a94",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/CHANGELOG.md",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/CHANGELOG.md?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -11,6 +11,20 @@ and this project adheres to [Semantic Versioning](http://semver.org/).\n \n * Issue **#1866** : Change zip distribution shell scripts to execute from anywhere.\n \n+## [v6.2.0 - Unreleased]\n+\n+* Add Elasticsearch integration\n+\n+* Issue **#2058** : Support authenticating Elasticsearch requests with an API token\n+\n+* Add ability to provide a custom CA certificate (in PEM or DER encoding) for verifying Elasticsearch connections\n+  over HTTPS\n+  \n+* Remove legacy Elasticsearch integration assets\n+\n+* Add common secret property encryption utils (`CryptoUtils`)\n+\n+* Add common property `stroom.secret.encryptionKey` for encrypting secrets at rest\n \n ## [v6.1.32] - 2021-01-28\n "
  },
  {
    "sha": "1af4078e239d51c3e3cbf490ce1c6e382ed2ef79",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/build.gradle",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/build.gradle",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/build.gradle?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -161,6 +161,7 @@ ext.libs = [\n         hibernate_jpa_api: \"org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final\",\n         hibernate_validator: \"org.hibernate:hibernate-validator:5.3.4.Final\",\n         http_client: \"org.apache.httpcomponents:httpclient:4.5.6\",\n+        http_async_client: \"org.apache.httpcomponents:httpasyncclient:4.1.4\",\n         hsqldb: \"org.hsqldb:hsqldb:2.3.4\",\n         jBCrypt: \"de.svenkubiak:jBCrypt:0.4.1\",\n         jackson_annotations: \"com.fasterxml.jackson.core:jackson-annotations:$versions.jackson\","
  },
  {
    "sha": "7b906382ef6176368232e7c4be5c2080cdee2796",
    "filename": "stroom-app-gwt/src/main/java/stroom/app/client/gin/AppGinjector.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app-gwt/src/main/java/stroom/app/client/gin/AppGinjector.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app-gwt/src/main/java/stroom/app/client/gin/AppGinjector.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-app-gwt/src/main/java/stroom/app/client/gin/AppGinjector.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -61,6 +61,8 @@\n import stroom.ruleset.client.gin.PolicyModule;\n import stroom.script.client.gin.ScriptGinjector;\n import stroom.script.client.gin.ScriptModule;\n+import stroom.search.elastic.client.gin.ElasticClusterGinjector;\n+import stroom.search.elastic.client.gin.ElasticClusterModule;\n import stroom.search.elastic.client.gin.ElasticIndexGinjector;\n import stroom.search.elastic.client.gin.ElasticIndexModule;\n import stroom.search.solr.client.gin.SolrIndexGinjector;\n@@ -105,6 +107,7 @@\n         QueryModule.class,\n         ScriptModule.class,\n         SecurityModule.class,\n+        ElasticClusterModule.class,\n         ElasticIndexModule.class,\n         SolrIndexModule.class,\n         StatisticsModule.class,\n@@ -134,6 +137,7 @@\n         PopupGinjector,\n         ScriptGinjector,\n         SecurityGinjector,\n+        ElasticClusterGinjector,\n         ElasticIndexGinjector,\n         SolrIndexGinjector,\n         StatisticsGinjector,"
  },
  {
    "sha": "d203c6d48f94d12777f75433a389d8c605976c94",
    "filename": "stroom-app/src/main/java/stroom/startup/App.java",
    "status": "modified",
    "additions": 27,
    "deletions": 26,
    "changes": 53,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/java/stroom/startup/App.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/java/stroom/startup/App.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-app/src/main/java/stroom/startup/App.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -16,34 +16,9 @@\n \n package stroom.startup;\n \n-import com.codahale.metrics.health.HealthCheck;\n-import com.codahale.metrics.health.HealthCheckRegistry;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.inject.Guice;\n-import com.google.inject.Injector;\n-import io.dropwizard.Application;\n-import io.dropwizard.Configuration;\n-import io.dropwizard.assets.AssetsBundle;\n-import io.dropwizard.client.JerseyClientBuilder;\n-import io.dropwizard.client.JerseyClientConfiguration;\n-import io.dropwizard.configuration.EnvironmentVariableSubstitutor;\n-import io.dropwizard.configuration.SubstitutingSourceProvider;\n-import io.dropwizard.servlets.tasks.LogConfigurationTask;\n-import io.dropwizard.setup.Bootstrap;\n-import io.dropwizard.setup.Environment;\n-import org.eclipse.jetty.server.session.SessionHandler;\n-import org.eclipse.jetty.servlet.ServletContextHandler;\n-import org.eclipse.jetty.servlet.ServletHolder;\n-import org.eclipse.jetty.servlets.CrossOriginFilter;\n-import org.glassfish.jersey.logging.LoggingFeature;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import stroom.annotation.impl.db.spring.AnnotationConfiguration;\n import stroom.annotation.shared.AnnotationResource;\n import stroom.cluster.server.ClusterCallServiceRPC;\n-import stroom.connectors.elastic.StroomElasticProducerFactoryService;\n import stroom.connectors.kafka.StroomKafkaProducerFactoryService;\n import stroom.content.ContentSyncService;\n import stroom.dashboard.spring.DashboardConfiguration;\n@@ -81,6 +56,7 @@\n import stroom.ruleset.spring.RuleSetConfiguration;\n import stroom.script.server.ScriptServlet;\n import stroom.script.spring.ScriptConfiguration;\n+import stroom.search.elastic.ElasticClusterConfiguration;\n import stroom.search.elastic.ElasticIndexConfiguration;\n import stroom.search.elastic.search.ElasticIndexQueryResource;\n import stroom.search.solr.SolrIndexConfiguration;\n@@ -128,6 +104,31 @@\n import stroom.util.spring.StroomSpringProfiles;\n import stroom.visualisation.spring.VisualisationConfiguration;\n \n+import com.codahale.metrics.health.HealthCheck;\n+import com.codahale.metrics.health.HealthCheckRegistry;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import io.dropwizard.Application;\n+import io.dropwizard.Configuration;\n+import io.dropwizard.assets.AssetsBundle;\n+import io.dropwizard.client.JerseyClientBuilder;\n+import io.dropwizard.client.JerseyClientConfiguration;\n+import io.dropwizard.configuration.EnvironmentVariableSubstitutor;\n+import io.dropwizard.configuration.SubstitutingSourceProvider;\n+import io.dropwizard.servlets.tasks.LogConfigurationTask;\n+import io.dropwizard.setup.Bootstrap;\n+import io.dropwizard.setup.Environment;\n+import org.eclipse.jetty.server.session.SessionHandler;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.eclipse.jetty.servlets.CrossOriginFilter;\n+import org.glassfish.jersey.logging.LoggingFeature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n import javax.servlet.DispatcherType;\n import javax.servlet.FilterRegistration;\n import javax.servlet.SessionCookieConfig;\n@@ -354,7 +355,6 @@ private void startApp(final Config configuration, final Environment environment)\n             SpringUtil.addHealthCheck(environment.healthChecks(), applicationContext, ServiceDiscovererImpl.class);\n         }\n         SpringUtil.addHealthCheck(environment.healthChecks(), applicationContext, StroomKafkaProducerFactoryService.class);\n-        SpringUtil.addHealthCheck(environment.healthChecks(), applicationContext, StroomElasticProducerFactoryService.class);\n         SpringUtil.addHealthCheck(environment.healthChecks(), applicationContext, SqlStatisticsQueryResource.class);\n         SpringUtil.addHealthCheck(environment.healthChecks(), applicationContext, SearchableResource.class);\n         SpringUtil.addHealthCheck(environment.healthChecks(), applicationContext, StroomIndexQueryResource.class);\n@@ -485,6 +485,7 @@ private ApplicationContext loadApplicationContext(final Configuration configurat\n                 PipelineConfiguration.class,\n                 ExplorerConfiguration.class,\n                 IndexConfiguration.class,\n+                ElasticClusterConfiguration.class,\n                 ElasticIndexConfiguration.class,\n                 SolrIndexConfiguration.class,\n                 SearchConfiguration.class,"
  },
  {
    "sha": "b95507cd54b288035ff7e01a013a38e522fff42e",
    "filename": "stroom-app/src/main/resources/ui/images/document/ElasticCluster.svg",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/resources/ui/images/document/ElasticCluster.svg",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/resources/ui/images/document/ElasticCluster.svg",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-app/src/main/resources/ui/images/document/ElasticCluster.svg?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "previous_filename": "stroom-app/src/main/resources/ui/images/pipeline/ElasticSearch.svg"
  },
  {
    "sha": "a87dd192f95b353a9e438bb59806e493e9b8c4de",
    "filename": "stroom-app/src/main/resources/ui/images/document/ElasticIndex.svg",
    "status": "modified",
    "additions": 44,
    "deletions": 1,
    "changes": 45,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/resources/ui/images/document/ElasticIndex.svg",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/resources/ui/images/document/ElasticIndex.svg",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-app/src/main/resources/ui/images/document/ElasticIndex.svg?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -1 +1,44 @@\n-<svg width=\"2500\" height=\"2500\" viewBox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\"><path d=\"M255.96 134.393c0-21.521-13.373-40.117-33.223-47.43a75.239 75.239 0 0 0 1.253-13.791c0-39.909-32.386-72.295-72.295-72.295-23.193 0-44.923 11.074-58.505 30.088-6.686-5.224-14.835-7.94-23.402-7.94-21.104 0-38.446 17.133-38.446 38.446 0 4.597.836 9.194 2.298 13.373C13.582 81.739 0 100.962 0 122.274c0 21.522 13.373 40.327 33.431 47.64-.835 4.388-1.253 8.985-1.253 13.79 0 39.7 32.386 72.087 72.086 72.087 23.402 0 44.924-11.283 58.505-30.088 6.686 5.223 15.044 8.149 23.611 8.149 21.104 0 38.446-17.134 38.446-38.446 0-4.597-.836-9.194-2.298-13.373 19.64-7.104 33.431-26.327 33.431-47.64z\" fill=\"#FFF\"/><path d=\"M100.085 110.364l57.043 26.119 57.669-50.565a64.312 64.312 0 0 0 1.253-12.746c0-35.52-28.834-64.355-64.355-64.355-21.313 0-41.162 10.447-53.072 27.998l-9.612 49.73 11.074 23.82z\" fill=\"#F4BD19\"/><path d=\"M40.953 170.75c-.835 4.179-1.253 8.567-1.253 12.955 0 35.52 29.043 64.564 64.564 64.564 21.522 0 41.372-10.656 53.49-28.208l9.403-49.729-12.746-24.238-57.251-26.118-56.207 50.774z\" fill=\"#3CBEB1\"/><path d=\"M40.536 71.918l39.073 9.194 8.775-44.506c-5.432-4.179-11.91-6.268-18.805-6.268-16.925 0-30.924 13.79-30.924 30.924 0 3.552.627 7.313 1.88 10.656z\" fill=\"#E9478C\"/><path d=\"M37.192 81.32c-17.551 5.642-29.67 22.567-29.67 40.954 0 17.97 11.074 34.059 27.79 40.327l54.953-49.73-10.03-21.52-43.043-10.03z\" fill=\"#2C458F\"/><path d=\"M167.784 219.852c5.432 4.18 11.91 6.478 18.596 6.478 16.925 0 30.924-13.79 30.924-30.924 0-3.761-.627-7.314-1.88-10.657l-39.073-9.193-8.567 44.296z\" fill=\"#95C63D\"/><path d=\"M175.724 165.317l43.043 10.03c17.551-5.85 29.67-22.566 29.67-40.954 0-17.97-11.074-33.849-27.79-40.326l-56.415 49.311 11.492 21.94z\" fill=\"#176655\"/></svg>\n\\ No newline at end of file\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!-- Generator: Adobe Illustrator 25.2.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n+\t viewBox=\"0 0 2500 2500\" style=\"enable-background:new 0 0 2500 2500;\" xml:space=\"preserve\">\n+<style type=\"text/css\">\n+\t.st0{fill:#4A4B4C;}\n+\t.st1{fill:#FFFFFF;}\n+\t.st2{fill:#F4BD19;}\n+\t.st3{fill:#3CBEB1;}\n+\t.st4{fill:#E9478C;}\n+\t.st5{fill:#2C458F;}\n+\t.st6{fill:#95C63D;}\n+\t.st7{fill:#176655;}\n+</style>\n+<g>\n+\t<path class=\"st0\" d=\"M1240,1071.5c220.3,0,426.2-20,617.7-60c191.5-40,80.9,38.1,191.5-40l114,129.1c0,64.1,99.8,94.5,4,149.3\n+\t\ts-225.9,98.3-390.4,130.4s-343.5,48.1-536.8,48.1s-372.3-16-536.8-48.1s-294.7-75.5-390.4-130.4s-143.6-114.3-143.6-178.5v-237\n+\t\tc110.6,78.1,261.7,137.1,453.2,177.1C813.8,1051.5,1019.7,1071.5,1240,1071.5z M1240,2499.4c-193.4,0-372.3-16-536.8-48.1\n+\t\ts-294.7-75.5-390.4-130.4s-143.6-114.3-143.6-178.5v-237c110.6,78.1,261.7,137.1,453.2,177.1c191.5,40,397.4,60,617.7,60\n+\t\t M1776.8,1915.8c-164.5,32.1-343.5,48.1-536.8,48.1s-372.3-16-536.8-48.1c-164.5-32.1-294.7-75.5-390.4-130.4\n+\t\tS169.1,1671.1,169.1,1607v-237C279.7,1448,430.8,1507,622.3,1547c191.5,40,397.4,60,617.7,60s426.2-20,617.7-60\n+\t\tc191.5-40,163.5-99,274.1-177.1l179.1,237c0,64.1-47.9,123.6-143.6,178.5 M1240,0.6c193.4,0,372.3,16,536.8,48.1\n+\t\ts294.7,75.5,390.4,130.4s143.6,114.3,143.6,178.5v178.5c0,64.1-47.9,123.6-143.6,178.5s-225.9,98.3-390.4,130.4\n+\t\tC1612.3,877,1433.4,893,1240,893s-372.3-16-536.8-48.1c-164.5-32.1-294.7-75.5-390.4-130.4S169.1,600.2,169.1,536.1V357.6\n+\t\tc0-64.1,47.9-123.6,143.6-178.5S538.6,80.8,703.2,48.8S1046.6,0.6,1240,0.6z\"/>\n+</g>\n+<path class=\"st1\" d=\"M2518.6,1692.2c0-151.6-94.2-282.5-234-334c5.9-32,8.9-64.5,8.8-97.1c0-281-228.1-509.1-509.1-509.1\n+\tc-163.3,0-316.3,78-412,211.9c-47.1-36.8-104.5-55.9-164.8-55.9c-148.6,0-270.7,120.7-270.7,270.7c0,32.4,5.9,64.7,16.2,94.2\n+\tc-141.2,48.6-236.9,183.9-236.9,334c0,151.6,94.2,284,235.4,335.5c-5.9,30.9-8.8,63.3-8.8,97.1c0,279.6,228.1,507.6,507.6,507.6\n+\tc164.8,0,316.4-79.5,412-211.9c47.1,36.8,105.9,57.4,166.3,57.4c148.6,0,270.7-120.7,270.7-270.7c0-32.4-5.9-64.7-16.2-94.2\n+\tC2421.4,1977.6,2518.5,1842.2,2518.6,1692.2L2518.6,1692.2z\"/>\n+<path class=\"st2\" d=\"M1420.9,1522.9l401.7,183.9l406.1-356.1c5.9-29.6,8.9-59.6,8.8-89.8c0-250.1-203-453.2-453.2-453.2\n+\tc-150.1,0-289.9,73.6-373.7,197.2l-67.7,350.2L1420.9,1522.9L1420.9,1522.9z\"/>\n+<path class=\"st3\" d=\"M1004.5,1948.2c-5.9,29.4-8.8,60.3-8.8,91.2c0,250.1,204.5,454.7,454.7,454.7c151.6,0,291.3-75,376.7-198.6\n+\tl66.2-350.2l-89.8-170.7l-403.2-183.9L1004.5,1948.2L1004.5,1948.2z\"/>\n+<path class=\"st4\" d=\"M1001.5,1252.2l275.2,64.7l61.8-313.4c-38.3-29.4-83.9-44.1-132.4-44.1c-119.2,0-217.8,97.1-217.8,217.8\n+\tC988.3,1202.2,992.7,1228.7,1001.5,1252.2L1001.5,1252.2z\"/>\n+<path class=\"st5\" d=\"M978,1318.4c-123.6,39.7-208.9,158.9-208.9,288.4c0,126.5,78,239.8,195.7,284l387-350.2l-70.6-151.5L978,1318.4\n+\tL978,1318.4z\"/>\n+<path class=\"st6\" d=\"M1897.6,2294c38.3,29.4,83.9,45.6,131,45.6c119.2,0,217.8-97.1,217.8-217.8c0-26.5-4.4-51.5-13.2-75\n+\tl-275.2-64.7L1897.6,2294L1897.6,2294z\"/>\n+<path class=\"st7\" d=\"M1953.5,1909.9l303.1,70.6c123.6-41.2,208.9-158.9,208.9-288.4c0-126.5-78-238.4-195.7-284l-397.3,347.2\n+\tL1953.5,1909.9L1953.5,1909.9z\"/>\n+</svg>"
  },
  {
    "sha": "4d7c1d92360cb28d9552ccc4ec40bf42958d34a8",
    "filename": "stroom-app/src/main/resources/ui/images/pipeline/ElasticIndex.svg",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/resources/ui/images/pipeline/ElasticIndex.svg",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-app/src/main/resources/ui/images/pipeline/ElasticIndex.svg",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-app/src/main/resources/ui/images/pipeline/ElasticIndex.svg?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+<!-- Generator: Adobe Illustrator 25.2.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n+<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n+\t viewBox=\"0 0 2500 2500\" style=\"enable-background:new 0 0 2500 2500;\" xml:space=\"preserve\">\r\n+<style type=\"text/css\">\r\n+\t.st0{fill:#4A4B4C;}\r\n+\t.st1{fill:#FFFFFF;}\r\n+\t.st2{fill:#F4BD19;}\r\n+\t.st3{fill:#3CBEB1;}\r\n+\t.st4{fill:#E9478C;}\r\n+\t.st5{fill:#2C458F;}\r\n+\t.st6{fill:#95C63D;}\r\n+\t.st7{fill:#176655;}\r\n+</style>\r\n+<g>\r\n+\t<path class=\"st0\" d=\"M1240,1071.5c220.3,0,426.2-20,617.7-60c191.5-40,80.9,38.1,191.5-40l114,129.1c0,64.1,99.8,94.5,4,149.3\r\n+\t\ts-225.9,98.3-390.4,130.4s-343.5,48.1-536.8,48.1s-372.3-16-536.8-48.1s-294.7-75.5-390.4-130.4s-143.6-114.3-143.6-178.5v-237\r\n+\t\tc110.6,78.1,261.7,137.1,453.2,177.1C813.8,1051.5,1019.7,1071.5,1240,1071.5z M1240,2499.4c-193.4,0-372.3-16-536.8-48.1\r\n+\t\ts-294.7-75.5-390.4-130.4s-143.6-114.3-143.6-178.5v-237c110.6,78.1,261.7,137.1,453.2,177.1c191.5,40,397.4,60,617.7,60\r\n+\t\t M1776.8,1915.8c-164.5,32.1-343.5,48.1-536.8,48.1s-372.3-16-536.8-48.1c-164.5-32.1-294.7-75.5-390.4-130.4\r\n+\t\tS169.1,1671.1,169.1,1607v-237C279.7,1448,430.8,1507,622.3,1547c191.5,40,397.4,60,617.7,60s426.2-20,617.7-60\r\n+\t\tc191.5-40,163.5-99,274.1-177.1l179.1,237c0,64.1-47.9,123.6-143.6,178.5 M1240,0.6c193.4,0,372.3,16,536.8,48.1\r\n+\t\ts294.7,75.5,390.4,130.4s143.6,114.3,143.6,178.5v178.5c0,64.1-47.9,123.6-143.6,178.5s-225.9,98.3-390.4,130.4\r\n+\t\tC1612.3,877,1433.4,893,1240,893s-372.3-16-536.8-48.1c-164.5-32.1-294.7-75.5-390.4-130.4S169.1,600.2,169.1,536.1V357.6\r\n+\t\tc0-64.1,47.9-123.6,143.6-178.5S538.6,80.8,703.2,48.8S1046.6,0.6,1240,0.6z\"/>\r\n+</g>\r\n+<path class=\"st1\" d=\"M2518.6,1692.2c0-151.6-94.2-282.5-234-334c5.9-32,8.9-64.5,8.8-97.1c0-281-228.1-509.1-509.1-509.1\r\n+\tc-163.3,0-316.3,78-412,211.9c-47.1-36.8-104.5-55.9-164.8-55.9c-148.6,0-270.7,120.7-270.7,270.7c0,32.4,5.9,64.7,16.2,94.2\r\n+\tc-141.2,48.6-236.9,183.9-236.9,334c0,151.6,94.2,284,235.4,335.5c-5.9,30.9-8.8,63.3-8.8,97.1c0,279.6,228.1,507.6,507.6,507.6\r\n+\tc164.8,0,316.4-79.5,412-211.9c47.1,36.8,105.9,57.4,166.3,57.4c148.6,0,270.7-120.7,270.7-270.7c0-32.4-5.9-64.7-16.2-94.2\r\n+\tC2421.4,1977.6,2518.5,1842.2,2518.6,1692.2L2518.6,1692.2z\"/>\r\n+<path class=\"st2\" d=\"M1420.9,1522.9l401.7,183.9l406.1-356.1c5.9-29.6,8.9-59.6,8.8-89.8c0-250.1-203-453.2-453.2-453.2\r\n+\tc-150.1,0-289.9,73.6-373.7,197.2l-67.7,350.2L1420.9,1522.9L1420.9,1522.9z\"/>\r\n+<path class=\"st3\" d=\"M1004.5,1948.2c-5.9,29.4-8.8,60.3-8.8,91.2c0,250.1,204.5,454.7,454.7,454.7c151.6,0,291.3-75,376.7-198.6\r\n+\tl66.2-350.2l-89.8-170.7l-403.2-183.9L1004.5,1948.2L1004.5,1948.2z\"/>\r\n+<path class=\"st4\" d=\"M1001.5,1252.2l275.2,64.7l61.8-313.4c-38.3-29.4-83.9-44.1-132.4-44.1c-119.2,0-217.8,97.1-217.8,217.8\r\n+\tC988.3,1202.2,992.7,1228.7,1001.5,1252.2L1001.5,1252.2z\"/>\r\n+<path class=\"st5\" d=\"M978,1318.4c-123.6,39.7-208.9,158.9-208.9,288.4c0,126.5,78,239.8,195.7,284l387-350.2l-70.6-151.5L978,1318.4\r\n+\tL978,1318.4z\"/>\r\n+<path class=\"st6\" d=\"M1897.6,2294c38.3,29.4,83.9,45.6,131,45.6c119.2,0,217.8-97.1,217.8-217.8c0-26.5-4.4-51.5-13.2-75\r\n+\tl-275.2-64.7L1897.6,2294L1897.6,2294z\"/>\r\n+<path class=\"st7\" d=\"M1953.5,1909.9l303.1,70.6c123.6-41.2,208.9-158.9,208.9-288.4c0-126.5-78-238.4-195.7-284l-397.3,347.2\r\n+\tL1953.5,1909.9L1953.5,1909.9z\"/>\r\n+</svg>\r"
  },
  {
    "sha": "ad837ed864cf606c2ff4091bd5cb161849669729",
    "filename": "stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducer.java",
    "status": "removed",
    "additions": 0,
    "deletions": 31,
    "changes": 31,
    "blob_url": "https://github.com/gchq/stroom/blob/258bd51de8142d01e97b7bb767fad6ea67ed2bc1/stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducer.java",
    "raw_url": "https://github.com/gchq/stroom/raw/258bd51de8142d01e97b7bb767fad6ea67ed2bc1/stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducer.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducer.java?ref=258bd51de8142d01e97b7bb767fad6ea67ed2bc1",
    "patch": "@@ -1,31 +0,0 @@\n-package stroom.connectors.elastic;\n-\n-import stroom.connectors.StroomConnector;\n-\n-import java.util.Map;\n-import java.util.function.Consumer;\n-\n-/**\n- * A Stroom abstraction over the Elastic client library\n- */\n-public interface StroomElasticProducer extends StroomConnector {\n-\n-    String TRANSPORT_HOSTS = \"transport.hosts\";\n-    String CLUSTER_NAME = \"cluster.name\";\n-    String ELASTIC_HTTP_URL = \"elastic.http.url\";\n-\n-    /**\n-     * Send a record to elastic search\n-     * @param idFieldName The name of the field to use as the record ID, if this is null, or there is no value for that\n-     *                    field, a random UUID will be generated\n-     * @param index The name of the index in elastic search\n-     * @param type The type of record being indexed, elastic search stores a property called _type\n-     * @param values The values to write to the record\n-     * @param exceptionHandler Handler for any exceptions\n-     */\n-    void send(String idFieldName,\n-              String index,\n-              String type,\n-              Map<String, String> values,\n-              Consumer<Exception> exceptionHandler);\n-}"
  },
  {
    "sha": "b4e5ef634f1bf816a22ce648f7efe9dbbc4d63c3",
    "filename": "stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactory.java",
    "status": "removed",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/gchq/stroom/blob/258bd51de8142d01e97b7bb767fad6ea67ed2bc1/stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactory.java",
    "raw_url": "https://github.com/gchq/stroom/raw/258bd51de8142d01e97b7bb767fad6ea67ed2bc1/stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactory.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-connectors/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactory.java?ref=258bd51de8142d01e97b7bb767fad6ea67ed2bc1",
    "patch": "@@ -1,6 +0,0 @@\n-package stroom.connectors.elastic;\n-\n-import stroom.connectors.StroomConnectorFactory;\n-\n-public interface StroomElasticProducerFactory extends StroomConnectorFactory<StroomElasticProducer> {\n-}"
  },
  {
    "sha": "91b6074611ce839daca51cb35d940b98dda82e08",
    "filename": "stroom-core-client-widget/src/main/java/stroom/svg/client/SvgPresets.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client-widget/src/main/java/stroom/svg/client/SvgPresets.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client-widget/src/main/java/stroom/svg/client/SvgPresets.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client-widget/src/main/java/stroom/svg/client/SvgPresets.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -35,7 +35,8 @@\n     public static final SvgPreset ERROR = new SvgPreset(\"images/error.svg\", \"Error\", true);\n     public static final SvgPreset EXPLORER = new SvgPreset(\"images/explorer.svg\", \"Explorer\", true);\n     public static final SvgPreset ANNOTATIONS = new SvgPreset(\"images/document/AnnotationsIndex.svg\", \"Annotations\", true);\n-    public static final SvgPreset ELASTIC_SEARCH = new SvgPreset(\"images/document/ElasticIndex.svg\", \"Elastic Search\", true);\n+    public static final SvgPreset ELASTIC_CLUSTER = new SvgPreset(\"images/document/ElasticCluster.svg\", \"Elasticsearch Cluster\", true);\n+    public static final SvgPreset ELASTIC_INDEX = new SvgPreset(\"images/document/ElasticIndex.svg\", \"Elasticsearch Index\", true);\n     public static final SvgPreset FATAL = new SvgPreset(\"images/fatal.svg\", \"Fatal\", true);\n     public static final SvgPreset FEED = new SvgPreset(\"images/feed.svg\", \"Feed\", true);\n     public static final SvgPreset FAVOURITES = new SvgPreset(\"images/favourites.svg\", \"Favourites\", false);"
  },
  {
    "sha": "80d75a116c6167377faab2344bed431ca7d56f71",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/ElasticClusterPlugin.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/ElasticClusterPlugin.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/ElasticClusterPlugin.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/ElasticClusterPlugin.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package stroom.search.elastic.client;\n+\n+import stroom.core.client.ContentManager;\n+import stroom.dispatch.client.ClientDispatchAsync;\n+import stroom.docstore.shared.DocRefUtil;\n+import stroom.document.client.DocumentPlugin;\n+import stroom.document.client.DocumentPluginEventManager;\n+import stroom.entity.client.presenter.DocumentEditPresenter;\n+import stroom.query.api.v2.DocRef;\n+import stroom.search.elastic.client.presenter.ElasticClusterPresenter;\n+import stroom.search.elastic.client.presenter.ElasticIndexPresenter;\n+import stroom.search.elastic.shared.ElasticCluster;\n+import stroom.search.elastic.shared.ElasticIndex;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.web.bindery.event.shared.EventBus;\n+\n+public class ElasticClusterPlugin extends DocumentPlugin<ElasticCluster> {\n+    private final Provider<ElasticClusterPresenter> editorProvider;\n+\n+    @Inject\n+    public ElasticClusterPlugin(final EventBus eventBus,\n+                                final Provider<ElasticClusterPresenter> editorProvider,\n+                                final ClientDispatchAsync dispatcher,\n+                                final ContentManager contentManager,\n+                                final DocumentPluginEventManager entityPluginEventManager) {\n+        super(eventBus, dispatcher, contentManager, entityPluginEventManager);\n+        this.editorProvider = editorProvider;\n+    }\n+\n+    @Override\n+    protected DocumentEditPresenter<?, ?> createEditor() { return editorProvider.get(); }\n+\n+    @Override\n+    public String getType() { return ElasticCluster.ENTITY_TYPE; }\n+\n+    @Override\n+    protected DocRef getDocRef(final ElasticCluster document) {\n+        return DocRefUtil.create(document);\n+    }\n+}"
  },
  {
    "sha": "dbe8385e7312c8cb4b95311fbe515112c99407c0",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterGinjector.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterGinjector.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterGinjector.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterGinjector.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2016 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package stroom.search.elastic.client.gin;\n+\n+import stroom.search.elastic.client.ElasticClusterPlugin;\n+import stroom.search.elastic.client.presenter.ElasticClusterPresenter;\n+import stroom.search.elastic.client.presenter.ElasticClusterSettingsPresenter;\n+\n+import com.google.gwt.inject.client.AsyncProvider;\n+\n+public interface ElasticClusterGinjector {\n+    AsyncProvider<ElasticClusterPlugin> getElasticClusterPlugin();\n+\n+    AsyncProvider<ElasticClusterPresenter> getElasticClusterPresenter();\n+\n+    AsyncProvider<ElasticClusterSettingsPresenter> getElasticClusterSettingsPresenter();\n+}"
  },
  {
    "sha": "11fe4214e10753e13a0c6c1eb5f8c8cadf1380c6",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterModule.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterModule.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterModule.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/gin/ElasticClusterModule.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2016 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package stroom.search.elastic.client.gin;\n+\n+import stroom.core.client.gin.PluginModule;\n+import stroom.search.elastic.client.ElasticClusterPlugin;\n+import stroom.search.elastic.client.presenter.ElasticClusterPresenter;\n+import stroom.search.elastic.client.presenter.ElasticClusterSettingsPresenter;\n+import stroom.search.elastic.client.presenter.ElasticClusterSettingsPresenter.ElasticClusterSettingsView;\n+import stroom.search.elastic.client.view.ElasticClusterSettingsViewImpl;\n+\n+public class ElasticClusterModule extends PluginModule {\n+    @Override\n+    protected void configure() {\n+        bindPlugin(ElasticClusterPlugin.class);\n+        bind(ElasticClusterPresenter.class);\n+        bindPresenterWidget(ElasticClusterSettingsPresenter.class, ElasticClusterSettingsView.class, ElasticClusterSettingsViewImpl.class);\n+    }\n+}"
  },
  {
    "sha": "4df474b97f52043cca51ce917c0c04cac2bc2cfb",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterPresenter.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterPresenter.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterPresenter.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterPresenter.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2017 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package stroom.search.elastic.client.presenter;\n+\n+import stroom.entity.client.presenter.ContentCallback;\n+import stroom.entity.client.presenter.DocumentEditTabPresenter;\n+import stroom.entity.client.presenter.LinkTabPanelView;\n+import stroom.entity.client.presenter.TabContentProvider;\n+import stroom.query.api.v2.DocRef;\n+import stroom.search.elastic.shared.ElasticCluster;\n+import stroom.security.client.ClientSecurityContext;\n+import stroom.widget.tab.client.presenter.TabData;\n+import stroom.widget.tab.client.presenter.TabDataImpl;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.web.bindery.event.shared.EventBus;\n+\n+public class ElasticClusterPresenter extends DocumentEditTabPresenter<LinkTabPanelView, ElasticCluster> {\n+    private static final TabData SETTINGS = new TabDataImpl(\"Settings\");\n+\n+    private final TabContentProvider<ElasticCluster> tabContentProvider = new TabContentProvider<>();\n+\n+    @Inject\n+    public ElasticClusterPresenter(final EventBus eventBus, final LinkTabPanelView view,\n+                                   final Provider<ElasticClusterSettingsPresenter> clusterSettingsPresenter,\n+                                   final ClientSecurityContext securityContext) {\n+        super(eventBus, view, securityContext);\n+\n+        tabContentProvider.setDirtyHandler(event -> {\n+            if (event.isDirty()) {\n+                setDirty(true);\n+            }\n+        });\n+\n+        tabContentProvider.add(SETTINGS, clusterSettingsPresenter);\n+        addTab(SETTINGS);\n+        selectTab(SETTINGS);\n+    }\n+\n+    @Override\n+    protected void getContent(final TabData tab, final ContentCallback callback) {\n+        callback.onReady(tabContentProvider.getPresenter(tab));\n+    }\n+\n+    @Override\n+    public void onRead(final DocRef docRef, final ElasticCluster cluster) {\n+        super.onRead(docRef, cluster);\n+        tabContentProvider.read(docRef, cluster);\n+    }\n+\n+    @Override\n+    public void onReadOnly(final boolean readOnly) {\n+        super.onReadOnly(readOnly);\n+        tabContentProvider.onReadOnly(readOnly);\n+    }\n+\n+    @Override\n+    protected void onWrite(final ElasticCluster cluster) { tabContentProvider.write(cluster); }\n+\n+    @Override\n+    public String getType() {\n+        return ElasticCluster.ENTITY_TYPE;\n+    }\n+}"
  },
  {
    "sha": "a0dedd988d3696da2032fcb83ce744233ead8a5f",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsPresenter.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsPresenter.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsPresenter.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsPresenter.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2017 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package stroom.search.elastic.client.presenter;\n+\n+import stroom.alert.client.event.AlertEvent;\n+import stroom.dispatch.client.ClientDispatchAsync;\n+import stroom.entity.client.presenter.DocumentSettingsPresenter;\n+import stroom.entity.client.presenter.ReadOnlyChangeHandler;\n+import stroom.query.api.v2.DocRef;\n+import stroom.search.elastic.client.presenter.ElasticClusterSettingsPresenter.ElasticClusterSettingsView;\n+import stroom.search.elastic.shared.ElasticCluster;\n+import stroom.search.elastic.shared.ElasticConnectionConfig;\n+import stroom.search.elastic.shared.ElasticConnectionTestAction;\n+\n+import com.google.inject.Inject;\n+import com.google.web.bindery.event.shared.EventBus;\n+import com.gwtplatform.mvp.client.HasUiHandlers;\n+import com.gwtplatform.mvp.client.View;\n+\n+import java.util.List;\n+\n+public class ElasticClusterSettingsPresenter extends DocumentSettingsPresenter<ElasticClusterSettingsView, ElasticCluster> implements ElasticClusterSettingsUiHandlers {\n+    private final ClientDispatchAsync dispatcher;\n+\n+    @Inject\n+    public ElasticClusterSettingsPresenter(final EventBus eventBus,\n+                                           final ElasticClusterSettingsView view,\n+                                           final ClientDispatchAsync dispatcher\n+    ) {\n+        super(eventBus, view);\n+\n+        this.dispatcher = dispatcher;\n+\n+        view.setUiHandlers(this);\n+    }\n+\n+    @Override\n+    protected void onBind() { }\n+\n+    @Override\n+    public void onChange() {\n+        setDirty(true);\n+    }\n+\n+    @Override\n+    public void onTestConnection() {\n+        final ElasticCluster cluster = new ElasticCluster();\n+        onWrite(cluster);\n+\n+        dispatcher.exec(new ElasticConnectionTestAction(cluster)).onSuccess(result -> AlertEvent.fireInfo(this, \"Success\", result.toString(), null));\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return ElasticCluster.ENTITY_TYPE;\n+    }\n+\n+    @Override\n+    protected void onRead(final DocRef docRef, final ElasticCluster cluster) {\n+        final ElasticConnectionConfig connectionConfig = cluster.getConnectionConfig();\n+\n+        if (connectionConfig != null) {\n+            getView().setConnectionUrls(connectionConfig.getConnectionUrls());\n+            getView().setCaCertificate(connectionConfig.getCaCertificate());\n+            getView().setUseAuthentication(connectionConfig.getUseAuthentication());\n+            getView().setApiKeyId(connectionConfig.getApiKeyId());\n+            getView().setApiKeySecret(connectionConfig.getApiKeySecret());\n+            getView().setSocketTimeoutMillis(connectionConfig.getSocketTimeoutMillis());\n+        }\n+\n+        getView().setDescription(cluster.getDescription());\n+    }\n+\n+    @Override\n+    protected void onWrite(final ElasticCluster cluster) {\n+        final ElasticConnectionConfig connectionConfig = new ElasticConnectionConfig();\n+        connectionConfig.setConnectionUrls(getView().getConnectionUrls());\n+        connectionConfig.setCaCertificate(getView().getCaCertificate());\n+        connectionConfig.setUseAuthentication(getView().getUseAuthentication());\n+        connectionConfig.setApiKeyId(getView().getApiKeyId());\n+        connectionConfig.setApiKeySecret(getView().getApiKeySecret());\n+        connectionConfig.setSocketTimeoutMillis(getView().getSocketTimeoutMillis());\n+\n+        cluster.setConnectionConfig(connectionConfig);\n+        cluster.setDescription(getView().getDescription().trim());\n+    }\n+\n+    public interface ElasticClusterSettingsView extends View, ReadOnlyChangeHandler, HasUiHandlers<ElasticClusterSettingsUiHandlers> {\n+        String getDescription();\n+\n+        void setDescription(String description);\n+\n+        List<String> getConnectionUrls();\n+\n+        void setConnectionUrls(List<String> connectionUrls);\n+\n+        String getCaCertificate();\n+\n+        void setCaCertificate(String caCertificate);\n+\n+        boolean getUseAuthentication();\n+\n+        void setUseAuthentication(boolean useAuthentication);\n+\n+        String getApiKeyId();\n+\n+        void setApiKeyId(String apiKeyId);\n+\n+        String getApiKeySecret();\n+\n+        void setApiKeySecret(String apiKeySecret);\n+\n+        int getSocketTimeoutMillis();\n+\n+        void setSocketTimeoutMillis(int socketTimeoutMillis);\n+    }\n+}"
  },
  {
    "sha": "df495e69ec78c5684f7465e0aab6733accf7ba6b",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsUiHandlers.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsUiHandlers.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsUiHandlers.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticClusterSettingsUiHandlers.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2016 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package stroom.search.elastic.client.presenter;\n+\n+import com.gwtplatform.mvp.client.UiHandlers;\n+\n+public interface ElasticClusterSettingsUiHandlers extends UiHandlers {\n+    void onChange();\n+\n+    void onTestConnection();\n+}"
  },
  {
    "sha": "96419576a1c31f2cd3efc07aeadfa6c267005b88",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticIndexSettingsPresenter.java",
    "status": "modified",
    "additions": 26,
    "deletions": 20,
    "changes": 46,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticIndexSettingsPresenter.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticIndexSettingsPresenter.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/presenter/ElasticIndexSettingsPresenter.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -21,43 +21,59 @@\n import stroom.dispatch.client.ClientDispatchAsync;\n import stroom.entity.client.presenter.DocumentSettingsPresenter;\n import stroom.entity.client.presenter.ReadOnlyChangeHandler;\n+import stroom.explorer.client.presenter.EntityDropDownPresenter;\n import stroom.query.api.v2.DocRef;\n import stroom.query.api.v2.ExpressionOperator;\n import stroom.query.api.v2.ExpressionOperator.Op;\n import stroom.ruleset.client.presenter.EditExpressionPresenter;\n import stroom.search.elastic.client.presenter.ElasticIndexSettingsPresenter.ElasticIndexSettingsView;\n-import stroom.search.elastic.shared.ElasticConnectionConfig;\n+import stroom.search.elastic.shared.ElasticCluster;\n import stroom.search.elastic.shared.ElasticConnectionTestAction;\n import stroom.search.elastic.shared.ElasticIndex;\n+import stroom.security.shared.DocumentPermissionNames;\n+import stroom.util.shared.EqualsUtil;\n \n+import com.google.gwt.user.client.ui.TextArea;\n import com.google.inject.Inject;\n import com.google.web.bindery.event.shared.EventBus;\n import com.gwtplatform.mvp.client.HasUiHandlers;\n import com.gwtplatform.mvp.client.View;\n \n-import java.util.List;\n-\n public class ElasticIndexSettingsPresenter extends DocumentSettingsPresenter<ElasticIndexSettingsView, ElasticIndex> implements ElasticIndexSettingsUiHandlers {\n+    private final EntityDropDownPresenter clusterPresenter;\n     private final EditExpressionPresenter editExpressionPresenter;\n     private final ClientDispatchAsync dispatcher;\n \n     @Inject\n     public ElasticIndexSettingsPresenter(final EventBus eventBus,\n                                          final ElasticIndexSettingsView view,\n+                                         final EntityDropDownPresenter clusterPresenter,\n                                          final EditExpressionPresenter editExpressionPresenter,\n                                          final ClientDispatchAsync dispatcher\n     ) {\n         super(eventBus, view);\n \n+        this.clusterPresenter = clusterPresenter;\n         this.editExpressionPresenter = editExpressionPresenter;\n         this.dispatcher = dispatcher;\n \n+        clusterPresenter.setIncludedTypes(ElasticCluster.ENTITY_TYPE);\n+        clusterPresenter.setRequiredPermissions(DocumentPermissionNames.USE);\n+\n         view.setUiHandlers(this);\n+        view.setClusterView(clusterPresenter.getView());\n         view.setRententionExpressionView(editExpressionPresenter.getView());\n     }\n \n     @Override\n     protected void onBind() {\n+        // If the selected `ElasticCluster` changes, set the dirty flag to `true`\n+        registerHandler(clusterPresenter.addDataSelectionHandler(event -> {\n+            if (!EqualsUtil.isEquals(clusterPresenter.getSelectedEntityReference(), getEntity().getClusterRef())) {\n+                setDirty(true);\n+            }\n+        }));\n+\n         registerHandler(editExpressionPresenter.addDirtyHandler(dirty -> setDirty(true)));\n     }\n \n@@ -81,13 +97,8 @@ public String getType() {\n \n     @Override\n     protected void onRead(final DocRef docRef, final ElasticIndex index) {\n-        final ElasticConnectionConfig connectionConfig = index.getConnectionConfig();\n-\n-        if (connectionConfig != null) {\n-            getView().setConnectionUrls(connectionConfig.getConnectionUrls());\n-        }\n-\n         getView().setDescription(index.getDescription());\n+        clusterPresenter.setSelectedEntityReference(index.getClusterRef());\n         getView().setIndexName(index.getIndexName());\n \n         if (index.getRetentionExpression() == null) {\n@@ -100,17 +111,14 @@ protected void onRead(final DocRef docRef, final ElasticIndex index) {\n \n     @Override\n     protected void onWrite(final ElasticIndex index) {\n-        final ElasticConnectionConfig connectionConfig = new ElasticConnectionConfig();\n-\n-        connectionConfig.setConnectionUrls(getView().getConnectionUrls());\n-        index.setConnectionConfig(connectionConfig);\n-\n         index.setDescription(getView().getDescription().trim());\n+        index.setClusterRef(clusterPresenter.getSelectedEntityReference());\n \n-        if (getView().getIndexName().trim().length() == 0) {\n+        final String indexName = getView().getIndexName().trim();\n+        if (indexName.isEmpty()) {\n             index.setIndexName(null);\n         } else {\n-            index.setIndexName(getView().getIndexName().trim());\n+            index.setIndexName(indexName);\n         }\n \n         index.setRetentionExpression(editExpressionPresenter.write());\n@@ -121,14 +129,12 @@ protected void onWrite(final ElasticIndex index) {\n \n         void setDescription(String description);\n \n+        void setClusterView(final View view);\n+\n         String getIndexName();\n \n         void setIndexName(String indexName);\n \n-        List<String> getConnectionUrls();\n-\n-        void setConnectionUrls(List<String> connectionUrls);\n-\n         void setRententionExpressionView(final View view);\n     }\n }"
  },
  {
    "sha": "7a382495bb881df046e8e0c0415242434892f6df",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.java",
    "status": "added",
    "additions": 155,
    "deletions": 0,
    "changes": 155,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2016 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package stroom.search.elastic.client.view;\n+\n+import stroom.entity.client.presenter.ReadOnlyChangeHandler;\n+import stroom.search.elastic.client.presenter.ElasticClusterSettingsPresenter.ElasticClusterSettingsView;\n+import stroom.search.elastic.client.presenter.ElasticClusterSettingsUiHandlers;\n+import stroom.widget.tickbox.client.view.TickBox;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.uibinder.client.UiBinder;\n+import com.google.gwt.uibinder.client.UiField;\n+import com.google.gwt.uibinder.client.UiHandler;\n+import com.google.gwt.user.client.ui.Button;\n+import com.google.gwt.user.client.ui.IntegerBox;\n+import com.google.gwt.user.client.ui.PasswordTextBox;\n+import com.google.gwt.user.client.ui.TextArea;\n+import com.google.gwt.user.client.ui.TextBox;\n+import com.google.gwt.user.client.ui.Widget;\n+import com.google.inject.Inject;\n+import com.gwtplatform.mvp.client.ViewWithUiHandlers;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class ElasticClusterSettingsViewImpl extends ViewWithUiHandlers<ElasticClusterSettingsUiHandlers> implements ElasticClusterSettingsView, ReadOnlyChangeHandler {\n+    private final Widget widget;\n+\n+    @UiField\n+    TextArea description;\n+    @UiField\n+    TextArea connectionUrls;\n+    @UiField\n+    TextArea caCertificate;\n+    @UiField\n+    TickBox useAuthentication;\n+    @UiField\n+    TextBox apiKeyId;\n+    @UiField\n+    PasswordTextBox apiKeySecret;\n+    @UiField\n+    IntegerBox socketTimeoutMillis;\n+    @UiField\n+    Button testConnection;\n+\n+    @Inject\n+    public ElasticClusterSettingsViewImpl(final Binder binder) {\n+        widget = binder.createAndBindUi(this);\n+\n+        description.addKeyDownHandler(e -> fireChange());\n+        connectionUrls.addKeyDownHandler(e -> fireChange());\n+        caCertificate.addKeyDownHandler(e -> fireChange());\n+        useAuthentication.addValueChangeHandler(e -> fireChange());\n+        apiKeyId.addKeyDownHandler(e -> fireChange());\n+        apiKeySecret.addKeyDownHandler(e -> fireChange());\n+        socketTimeoutMillis.addKeyDownHandler(e -> fireChange());\n+    }\n+\n+    private void fireChange() {\n+        if (getUiHandlers() != null) {\n+            getUiHandlers().onChange();\n+        }\n+    }\n+\n+    @Override\n+    public Widget asWidget() {\n+        return widget;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description.getText().trim();\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) { this.description.setText(description); }\n+\n+    @Override\n+    public List<String> getConnectionUrls() {\n+        return Arrays.stream(connectionUrls.getText().split(\"\\n\"))\n+            .map(String::trim)\n+            .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void setConnectionUrls(final List<String> connectionUrls) {\n+        this.connectionUrls.setText(String.join(\"\\n\", connectionUrls));\n+    }\n+\n+    @Override\n+    public String getCaCertificate() { return caCertificate.getText().trim(); }\n+\n+    @Override\n+    public void setCaCertificate(final String caCertificate) { this.caCertificate.setText(caCertificate); }\n+\n+    @Override\n+    public boolean getUseAuthentication() { return useAuthentication.getBooleanValue(); }\n+\n+    @Override\n+    public void setUseAuthentication(final boolean useAuthentication) { this.useAuthentication.setBooleanValue(useAuthentication); }\n+\n+    @Override\n+    public String getApiKeyId() { return apiKeyId.getText().trim(); }\n+\n+    @Override\n+    public void setApiKeyId(final String apiKeyId) { this.apiKeyId.setText(apiKeyId); }\n+\n+    @Override\n+    public String getApiKeySecret() { return apiKeySecret.getText().trim(); }\n+\n+    @Override\n+    public void setApiKeySecret(final String apiKeySecret) { this.apiKeySecret.setText(apiKeySecret); }\n+\n+    @Override\n+    public int getSocketTimeoutMillis() { return socketTimeoutMillis.getValue(); }\n+\n+    @Override\n+    public void setSocketTimeoutMillis(final int socketTimeoutMillis) { this.socketTimeoutMillis.setValue(socketTimeoutMillis); }\n+\n+    @Override\n+    public void onReadOnly(final boolean readOnly) {\n+        description.setEnabled(!readOnly);\n+        connectionUrls.setEnabled(!readOnly);\n+        caCertificate.setEnabled(!readOnly);\n+        useAuthentication.setEnabled(!readOnly);\n+        apiKeyId.setEnabled(!readOnly);\n+        apiKeySecret.setEnabled(!readOnly);\n+        socketTimeoutMillis.setEnabled(!readOnly);\n+    }\n+\n+    @UiHandler(\"testConnection\")\n+    public void onTestConnectionClick(final ClickEvent event) {\n+        if (getUiHandlers() != null) {\n+            getUiHandlers().onTestConnection();\n+        }\n+    }\n+\n+    public interface Binder extends UiBinder<Widget, ElasticClusterSettingsViewImpl> {\n+    }\n+}"
  },
  {
    "sha": "5b9e90bd9bfb3ebfd2e36d389317f4b57437e968",
    "filename": "stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 32,
    "changes": 39,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/java/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -26,17 +26,14 @@\n import com.google.gwt.uibinder.client.UiField;\n import com.google.gwt.uibinder.client.UiHandler;\n import com.google.gwt.user.client.ui.Button;\n+import com.google.gwt.user.client.ui.SimplePanel;\n import com.google.gwt.user.client.ui.TextArea;\n import com.google.gwt.user.client.ui.TextBox;\n import com.google.gwt.user.client.ui.Widget;\n import com.google.inject.Inject;\n import com.gwtplatform.mvp.client.View;\n import com.gwtplatform.mvp.client.ViewWithUiHandlers;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n public class ElasticIndexSettingsViewImpl extends ViewWithUiHandlers<ElasticIndexSettingsUiHandlers> implements ElasticIndexSettingsView, ReadOnlyChangeHandler {\n     private final Widget widget;\n \n@@ -45,7 +42,7 @@\n     @UiField\n     TextBox indexName;\n     @UiField\n-    TextArea connectionUrls;\n+    SimplePanel cluster;\n     @UiField\n     Button testConnection;\n     @UiField\n@@ -57,7 +54,6 @@ public ElasticIndexSettingsViewImpl(final Binder binder) {\n \n         description.addKeyDownHandler(e -> fireChange());\n         indexName.addKeyDownHandler(e -> fireChange());\n-        connectionUrls.addKeyDownHandler(e -> fireChange());\n     }\n \n     private void fireChange() {\n@@ -77,37 +73,16 @@ public String getDescription() {\n     }\n \n     @Override\n-    public void setDescription(final String description) {\n-        if (description == null) {\n-            this.description.setText(\"\");\n-        } else {\n-            this.description.setText(description);\n-        }\n-    }\n-\n-    @Override\n-    public String getIndexName() {\n-        return indexName.getText().trim();\n-    }\n+    public void setDescription(final String description) { this.description.setText(description); }\n \n     @Override\n-    public void setIndexName(final String indexName) {\n-        this.indexName.setText(indexName);\n-    }\n+    public void setClusterView(final View view) { cluster.setWidget(view.asWidget()); }\n \n     @Override\n-    public List<String> getConnectionUrls() {\n-        return Arrays.stream(connectionUrls.getText().split(\"\\n\")).collect(Collectors.toList());\n-    }\n+    public String getIndexName() { return indexName.getText().trim(); }\n \n     @Override\n-    public void setConnectionUrls(final List<String> connectionUrls) {\n-        if (connectionUrls == null) {\n-            this.connectionUrls.setText(\"\");\n-        } else {\n-            this.connectionUrls.setText(String.join(\"\\n\", connectionUrls));\n-        }\n-    }\n+    public void setIndexName(final String indexName) { this.indexName.setText(indexName); }\n \n     @Override\n     public void setRententionExpressionView(final View view) {\n@@ -117,7 +92,7 @@ public void setRententionExpressionView(final View view) {\n     @Override\n     public void onReadOnly(final boolean readOnly) {\n         description.setEnabled(!readOnly);\n-        connectionUrls.setEnabled(!readOnly);\n+        indexName.setEnabled(!readOnly);\n     }\n \n     @UiHandler(\"testConnection\")"
  },
  {
    "sha": "c6376c8de289de3fd1a6af20f65435fe4af5114c",
    "filename": "stroom-core-client/src/main/resources/stroom/search/elastic/ElasticCluster.gwt.xml",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/resources/stroom/search/elastic/ElasticCluster.gwt.xml",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/resources/stroom/search/elastic/ElasticCluster.gwt.xml",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/resources/stroom/search/elastic/ElasticCluster.gwt.xml?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit 2.4.0//EN\" \"http://google-web-toolkit.googlecode.com/svn/tags/2.4.0/distro-source/core/src/gwt-module.dtd\">\n+<module>\n+  <!-- Inherit the core Web Toolkit stuff. -->\n+  <inherits name='com.google.gwt.user.User' />\n+\n+  <source path=\"client\" />\n+  <source path=\"shared\" />\n+</module>"
  },
  {
    "sha": "9b6e8cdf2915c7f74a14017f2c53026cf4612d01",
    "filename": "stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.ui.xml",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.ui.xml",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.ui.xml",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticClusterSettingsViewImpl.ui.xml?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,86 @@\n+<!DOCTYPE ui:UiBinder SYSTEM \"http://dl.google.com/gwt/DTD/xhtml.ent\">\n+<ui:UiBinder xmlns:ui=\"urn:ui:com.google.gwt.uibinder\"\n+             xmlns:g=\"urn:import:com.google.gwt.user.client.ui\"\n+             xmlns:l=\"urn:import:stroom.item.client\"\n+             xmlns:t=\"urn:import:stroom.widget.tickbox.client.view\"\n+             xmlns:view=\"urn:import:stroom.widget.layout.client.view\">\n+    <ui:style>\n+        .label {\n+        width: 110px;\n+        margin-top: 2px;\n+        vertical-align: top;\n+        white-space: nowrap;\n+        }\n+\n+        .retentionExpressionPanel {\n+        width: 100%;\n+        height: 100%;\n+        border: solid 1px #c5cde2;\n+        background-color: white;\n+        }\n+\n+        input[type=\"text\"] {\n+        border: solid 1px #c5cde2;\n+        }\n+    </ui:style>\n+    <view:ResizeSimplePanel styleName=\"stroom-control-page\" width=\"100%\" height=\"100%\">\n+        <g:DockLayoutPanel unit=\"PX\" width=\"100%\" height=\"100%\">\n+            <g:north size=\"440\">\n+                <g:Grid styleName=\"stroom-control-grid\">\n+                    <g:row>\n+                        <g:cell>Description:</g:cell>\n+                        <g:customCell>\n+                            <g:TextArea ui:field=\"description\" width=\"400px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell>Connection URLs:</g:cell>\n+                        <g:customCell>\n+                            <g:TextArea ui:field=\"connectionUrls\" width=\"400px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell>CA certificate:</g:cell>\n+                        <g:customCell>\n+                            <g:TextArea ui:field=\"caCertificate\" width=\"400px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell>Use authentication</g:cell>\n+                        <g:customCell>\n+                            <t:TickBox ui:field=\"useAuthentication\" width=\"400px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell>API key ID:</g:cell>\n+                        <g:customCell>\n+                            <g:TextBox ui:field=\"apiKeyId\" width=\"400px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell>API key secret:</g:cell>\n+                        <g:customCell>\n+                            <g:PasswordTextBox ui:field=\"apiKeySecret\" width=\"400px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell>Socket timeout (ms):</g:cell>\n+                        <g:customCell>\n+                            <g:IntegerBox ui:field=\"socketTimeoutMillis\" width=\"100px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell></g:cell>\n+                        <g:cell></g:cell>\n+                    </g:row>\n+                    <g:row>\n+                        <g:cell></g:cell>\n+                        <g:customCell>\n+                            <g:Button ui:field=\"testConnection\" text=\"Test Connection\" width=\"200px\"/>\n+                        </g:customCell>\n+                    </g:row>\n+                </g:Grid>\n+            </g:north>\n+        </g:DockLayoutPanel>\n+    </view:ResizeSimplePanel>\n+</ui:UiBinder> "
  },
  {
    "sha": "55a9f625dbe38a13fd7cc176c4a05c9c03115774",
    "filename": "stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.ui.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.ui.xml",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.ui.xml",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-client/src/main/resources/stroom/search/elastic/client/view/ElasticIndexSettingsViewImpl.ui.xml?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -30,17 +30,21 @@\n                         </g:customCell>\n                     </g:row>\n                     <g:row>\n-                        <g:cell>Index:</g:cell>\n+                        <g:cell>Cluster configuration:</g:cell>\n                         <g:customCell>\n-                            <g:TextBox ui:field=\"indexName\" width=\"400px\"/>\n+                            <g:SimplePanel ui:field=\"cluster\" />\n                         </g:customCell>\n                     </g:row>\n                     <g:row>\n-                        <g:cell>Connection URLs:</g:cell>\n+                        <g:cell>Index:</g:cell>\n                         <g:customCell>\n-                            <g:TextArea ui:field=\"connectionUrls\" width=\"400px\"/>\n+                            <g:TextBox ui:field=\"indexName\" width=\"400px\"/>\n                         </g:customCell>\n                     </g:row>\n+                    <g:row>\n+                        <g:cell></g:cell>\n+                        <g:cell></g:cell>\n+                    </g:row>\n                     <g:row>\n                         <g:cell></g:cell>\n                         <g:customCell>"
  },
  {
    "sha": "47336072aa0279213d0cdd43d22521f3695c25c5",
    "filename": "stroom-core-server/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactoryService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/gchq/stroom/blob/258bd51de8142d01e97b7bb767fad6ea67ed2bc1/stroom-core-server/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactoryService.java",
    "raw_url": "https://github.com/gchq/stroom/raw/258bd51de8142d01e97b7bb767fad6ea67ed2bc1/stroom-core-server/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactoryService.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-server/src/main/java/stroom/connectors/elastic/StroomElasticProducerFactoryService.java?ref=258bd51de8142d01e97b7bb767fad6ea67ed2bc1",
    "patch": "@@ -1,52 +0,0 @@\n-package stroom.connectors.elastic;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-import stroom.connectors.ExternalLibService;\n-import stroom.connectors.StroomAbstractConnectorFactoryService;\n-import stroom.connectors.kafka.StroomKafkaProducer;\n-import stroom.connectors.kafka.StroomKafkaProducerFactory;\n-import stroom.node.server.StroomPropertyService;\n-import stroom.util.spring.StroomScope;\n-import stroom.util.spring.StroomShutdown;\n-\n-import javax.inject.Inject;\n-import java.util.ServiceLoader;\n-\n-/**\n- * This service can be used to create instances of StroomElasticProducer.\n- *\n- * The client requests a producer, giving the service a 'named' instance to find.\n- * The name is used to select properties from the stroom.conf file that indicate the\n- * bootstrapServers and the kafka client version.\n- * It uses {@link ServiceLoader} to iterate through all {@link StroomKafkaProducerFactory} and find one\n- * that can create a {@link StroomKafkaProducer} for the requested version.\n- */\n-@Component\n-@Scope(StroomScope.SINGLETON)\n-public class StroomElasticProducerFactoryService\n-        extends StroomAbstractConnectorFactoryService<StroomElasticProducer, StroomElasticProducerFactory> {\n-\n-    // Can register server/version pairs for specific roles within the system\n-    private static final String PROP_PREFIX = \"stroom.connectors.elastic.%s.\";\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(StroomElasticProducerFactoryService.class);\n-\n-    @Inject\n-    public StroomElasticProducerFactoryService(final StroomPropertyService propertyService,\n-                                               final ExternalLibService externalLibService) {\n-        super(propertyService,\n-                externalLibService,\n-                PROP_PREFIX,\n-                StroomElasticProducer.class,\n-                StroomElasticProducerFactory.class);\n-    }\n-\n-    @StroomShutdown\n-    public void shutdown() {\n-        LOGGER.info(\"Shutting Down Stroom Kafka Producer Factory Service\");\n-        super.shutdown();\n-    }\n-}"
  },
  {
    "sha": "8b2b6fa18629051fe08c979203d2022e33edb8bb",
    "filename": "stroom-core-server/src/main/java/stroom/node/server/DefaultProperties.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-server/src/main/java/stroom/node/server/DefaultProperties.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-server/src/main/java/stroom/node/server/DefaultProperties.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-server/src/main/java/stroom/node/server/DefaultProperties.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -1109,6 +1109,13 @@ private DefaultProperties() {\n                 .editable(true)\n                 .requireUiRestart(true)\n                 .build());\n+        list.add(new GlobalProperty.Builder()\n+                .name(\"stroom.secret.encryptionKey\")\n+                .value(\"secretP@ssword\")\n+                .description(\"Secret used to encrypt document properties, such as API keys\")\n+                .editable(true)\n+                .requireUiRestart(true)\n+                .build());\n         list.add(new GlobalProperty.Builder()\n                 .name(\"stroom.auth.services.url\")\n                 .value(\"http://auth-service:8099\")"
  },
  {
    "sha": "cc154cbf3a2911a3c4edd805e26be37af8db44c1",
    "filename": "stroom-core-shared/src/main/java/stroom/crypto/shared/CryptoUtils.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/crypto/shared/CryptoUtils.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/crypto/shared/CryptoUtils.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-shared/src/main/java/stroom/crypto/shared/CryptoUtils.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,98 @@\n+package stroom.crypto.shared;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.GCMParameterSpec;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+import java.util.Base64;\n+\n+public class CryptoUtils {\n+    private static final String CRYPTO_ALGORITHM = \"AES/GCM/NoPadding\";\n+    private static final int KEY_ITERATION_COUNT = 65536;\n+    private static final int KEY_LENGTH = 256;\n+    private static final int TAG_LENGTH = 128; // Must be one of: {128, 120, 112, 104, 96}\n+    private static final int IV_LENGTH = 12;\n+    private static final int SALT_LENGTH = 16;\n+\n+    /**\n+     * Generate an initialisation vector\n+     * @param length Length in bytes of the IV\n+     */\n+    public static byte[] getRandomNonce(final int length) {\n+        byte[] nonce = new byte[length];\n+        new SecureRandom().nextBytes(nonce);\n+\n+        return nonce;\n+    }\n+\n+    /**\n+     * Generate an AES key from a secret\n+     */\n+    public static SecretKey getAESKeyFromPassword(final String password, final byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n+        KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, KEY_ITERATION_COUNT, KEY_LENGTH);\n+\n+        return new SecretKeySpec(keyFactory.generateSecret(keySpec).getEncoded(), \"AES\");\n+    }\n+\n+    /**\n+     * Encrypt a plain-text string and encode the result in base-64\n+     * @return Base-64 encoded cipher text\n+     */\n+    public static String encrypt(final String plainText, final String password) throws Exception {\n+        if (plainText == null)\n+            return null;\n+\n+        final byte[] salt = getRandomNonce(SALT_LENGTH);\n+        final byte[] iv = getRandomNonce(IV_LENGTH);\n+        final SecretKey aesKey = getAESKeyFromPassword(password, salt);\n+        final Cipher cipher = Cipher.getInstance(CRYPTO_ALGORITHM);\n+        cipher.init(Cipher.ENCRYPT_MODE, aesKey, new GCMParameterSpec(TAG_LENGTH, iv));\n+\n+        final byte[] cipherText = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));\n+        final byte[] cipherTextWithIvSalt = ByteBuffer.allocate(iv.length + salt.length + cipherText.length)\n+            .put(iv)\n+            .put(salt)\n+            .put(cipherText)\n+            .array();\n+\n+        return Base64.getEncoder().encodeToString(cipherTextWithIvSalt);\n+    }\n+\n+    /**\n+     * Decrypt a base-64 encoded cipher-text string\n+     * @return Plain text\n+     */\n+    public static String decrypt(final String cipherText, final String password) throws Exception {\n+        if (cipherText == null)\n+            return null;\n+\n+        final byte[] decodedCipherText = Base64.getDecoder().decode(cipherText.getBytes(StandardCharsets.UTF_8));\n+        final ByteBuffer byteBuffer = ByteBuffer.wrap(decodedCipherText);\n+\n+        // Extract the IV, salt and original cipher-text\n+        final byte[] iv = new byte[IV_LENGTH];\n+        byteBuffer.get(iv);\n+        final byte[] salt = new byte[SALT_LENGTH];\n+        byteBuffer.get(salt);\n+        final byte[] originalCipherText = new byte[byteBuffer.remaining()];\n+        byteBuffer.get(originalCipherText);\n+\n+        // Reconstruct AES key using the password and salt\n+        final SecretKey aesKey = getAESKeyFromPassword(password, salt);\n+\n+        final Cipher cipher = Cipher.getInstance(CRYPTO_ALGORITHM);\n+        cipher.init(Cipher.DECRYPT_MODE, aesKey, new GCMParameterSpec(TAG_LENGTH, iv));\n+        final byte[] plainText = cipher.doFinal(originalCipherText);\n+\n+        return new String(plainText, StandardCharsets.UTF_8);\n+    }\n+}"
  },
  {
    "sha": "3f7312b74089143f62802016ae0097ea8235fd25",
    "filename": "stroom-core-shared/src/main/java/stroom/pipeline/shared/ElementIcons.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/pipeline/shared/ElementIcons.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/pipeline/shared/ElementIcons.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-shared/src/main/java/stroom/pipeline/shared/ElementIcons.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -20,7 +20,7 @@\n     public static final String FILE = \"file.svg\";\n     public static final String FILES = \"files.svg\";\n     public static final String HADOOP = \"hadoop-elephant-logo.svg\";\n-    public static final String ELASTIC_SEARCH = \"ElasticSearch.svg\";\n+    public static final String ELASTIC_INDEX = \"ElasticIndex.svg\";\n     public static final String ID = \"id.svg\";\n     public static final String INDEX = \"index.svg\";\n     public static final String JSON = \"json.svg\";"
  },
  {
    "sha": "45369871269c4630af370c418ea6a7eaf3212424",
    "filename": "stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticCluster.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticCluster.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticCluster.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticCluster.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2017 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package stroom.search.elastic.shared;\n+\n+import stroom.docstore.shared.Doc;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.Objects;\n+\n+@JsonPropertyOrder({\"type\", \"uuid\", \"name\", \"version\", \"createTime\", \"updateTime\", \"createUser\", \"updateUser\", \"description\", \"connection\"})\n+public class ElasticCluster extends Doc {\n+    public static final String ENTITY_TYPE = \"ElasticCluster\";\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String description;\n+    private ElasticConnectionConfig connectionConfig = new ElasticConnectionConfig();\n+\n+    public ElasticCluster() { }\n+\n+    public String getDescription() { return description; }\n+\n+    public void setDescription(final String description) { this.description = description; }\n+\n+    @JsonProperty(\"connection\")\n+    public ElasticConnectionConfig getConnectionConfig() {\n+        return connectionConfig;\n+    }\n+\n+    @JsonProperty(\"connection\")\n+    public void setConnectionConfig(final ElasticConnectionConfig connectionConfig) {\n+        this.connectionConfig = connectionConfig;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public final String getType() {\n+        return ENTITY_TYPE;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof ElasticCluster)) return false;\n+        if (!super.equals(o)) return false;\n+        final ElasticCluster elasticCluster = (ElasticCluster) o;\n+        return Objects.equals(description, elasticCluster.description) &&\n+                Objects.equals(connectionConfig, elasticCluster.connectionConfig);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), description, connectionConfig);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ElasticCluster{\" +\n+                \"description='\" + description + '\\'' +\n+                \", connectionConfig=\" + connectionConfig +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "25b3190520951b8315a2a212d562d3c410ea0651",
    "filename": "stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionConfig.java",
    "status": "modified",
    "additions": 69,
    "deletions": 4,
    "changes": 73,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionConfig.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionConfig.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionConfig.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -1,32 +1,92 @@\n package stroom.search.elastic.shared;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n @XmlAccessorType(XmlAccessType.FIELD)\n-@JsonPropertyOrder({\"connectionUrls\"})\n+@JsonPropertyOrder({\"connectionUrls,caCertificate,useAuthentication,apiKeyId,apiKeySecret,socketTimeoutMillis\"})\n @XmlRootElement(name = \"connection\")\n-@XmlType(name = \"ElasticConnectionConfig\", propOrder = {\"connectionUrls\"})\n+@XmlType(name = \"ElasticConnectionConfig\", propOrder = {\"connectionUrls\", \"caCertificate\", \"useAuthentication\", \"apiKeyId\", \"apiKeySecret\", \"socketTimeoutMillis\"})\n public class ElasticConnectionConfig implements Serializable {\n-    private List<String> connectionUrls;\n+    private List<String> connectionUrls = new ArrayList<>();\n+\n+    /**\n+     * DER or PEM-encoded CA certificate for X.509 verification\n+     */\n+    private String caCertificate;\n+\n+    private boolean useAuthentication = false;\n+\n+    private String apiKeyId;\n+\n+    /**\n+     * Plain-text API key (not serialised)\n+     */\n+    @JsonIgnore\n+    private String apiKeySecret;\n+\n+    /**\n+     * This is the field that is actually serialised and is an encrypted version of member variable `apiKeySecret`\n+     */\n+    @JsonProperty(\"apiKeySecret\")\n+    private String apiKeySecretEncrypted;\n+\n+    /**\n+     * Socket timeout duration. Any Elasticsearch requests are expected to complete within this interval,\n+     * else the request is aborted and an `Error` is reported.\n+     */\n+    private int socketTimeoutMillis = -1;\n \n     public List<String> getConnectionUrls() { return connectionUrls; }\n \n     public void setConnectionUrls(final List<String> connectionUrls) { this.connectionUrls = connectionUrls; }\n \n+    public String getCaCertificate() { return caCertificate; }\n+\n+    public void setCaCertificate(final String caCertificate) { this.caCertificate = caCertificate; }\n+\n+    public boolean getUseAuthentication() { return useAuthentication; }\n+\n+    public void setUseAuthentication(final boolean useAuthentication) { this.useAuthentication = useAuthentication; }\n+\n+    public String getApiKeyId() { return apiKeyId; }\n+\n+    public void setApiKeyId(final String apiKeyId) { this.apiKeyId = apiKeyId; }\n+\n+    public String getApiKeySecret() { return apiKeySecret; }\n+\n+    public void setApiKeySecret(final String apiKeySecret) { this.apiKeySecret = apiKeySecret; }\n+\n+    public String getApiKeySecretEncrypted() { return apiKeySecretEncrypted; }\n+\n+    public void setApiKeySecretEncrypted(final String apiKeySecretEncrypted) { this.apiKeySecretEncrypted = apiKeySecretEncrypted; }\n+\n+    public int getSocketTimeoutMillis() { return socketTimeoutMillis; }\n+\n+    public void setSocketTimeoutMillis(final int socketTimeoutMillis) { this.socketTimeoutMillis = socketTimeoutMillis; }\n+\n     @Override\n     public boolean equals(final Object o) {\n         if (this == o) return true;\n         if (!(o instanceof ElasticConnectionConfig)) return false;\n         final ElasticConnectionConfig that = (ElasticConnectionConfig)o;\n \n-        return connectionUrls.equals(that.connectionUrls);\n+        return Objects.equals(connectionUrls, that.connectionUrls) &&\n+                Objects.equals(caCertificate, that.caCertificate) &&\n+                Objects.equals(useAuthentication, that.useAuthentication) &&\n+                Objects.equals(apiKeyId, that.apiKeyId) &&\n+                Objects.equals(apiKeySecret, that.apiKeySecret) &&\n+                Objects.equals(socketTimeoutMillis, that.socketTimeoutMillis);\n     }\n \n     @Override\n@@ -38,6 +98,11 @@ public int hashCode() {\n     public String toString() {\n         return \"ElasticConnectionConfig{\" +\n                 \"connectionUrls='\" + String.join(\",\", connectionUrls) + '\\'' +\n+                \"caCertPath='\" + caCertificate + '\\'' +\n+                \"useAuthentication=\" + useAuthentication +\n+                \"apiKeyId='\" + apiKeyId + '\\'' +\n+                \"apiKeySecret='<redacted>'\" +\n+                \"socketTimeoutMillis=\" + socketTimeoutMillis +\n                 '}';\n     }\n }"
  },
  {
    "sha": "260c7ad1bb9f119bf60061f4fa4a9d40faea6803",
    "filename": "stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionTestAction.java",
    "status": "modified",
    "additions": 20,
    "deletions": 3,
    "changes": 23,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionTestAction.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionTestAction.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticConnectionTestAction.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -20,14 +20,26 @@\n import stroom.util.shared.SharedString;\n \n public class ElasticConnectionTestAction extends Action<SharedString> {\n-    private static final long serialVersionUID = -3560107233301674555L;\n+    private static final long serialVersionUID = 1L;\n \n+    private TestType testType;\n+    private ElasticCluster elasticCluster;\n     private ElasticIndex elasticIndex;\n \n     public ElasticConnectionTestAction() { }\n \n-    public ElasticConnectionTestAction(final ElasticIndex elasticIndex) { this.elasticIndex = elasticIndex; }\n+    public ElasticConnectionTestAction(final ElasticCluster elasticCluster) {\n+        this.testType = TestType.CLUSTER;\n+        this.elasticCluster = elasticCluster;\n+    }\n+\n+    public ElasticConnectionTestAction(final ElasticIndex elasticIndex) {\n+        this.testType = TestType.INDEX;\n+        this.elasticIndex = elasticIndex;\n+    }\n \n+    public TestType getTestType() { return testType; }\n+    public ElasticCluster getElasticCluster() { return elasticCluster; }\n     public ElasticIndex getElasticIndex() {\n         return elasticIndex;\n     }\n@@ -36,4 +48,9 @@ public ElasticIndex getElasticIndex() {\n     public String getTaskName() {\n         return \"Test Elasticsearch connection\";\n     }\n-}\n+\n+    public enum TestType {\n+        CLUSTER,\n+        INDEX\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "849ec3bbbe0dbaa923b849f57bf18f8a2fbac85e",
    "filename": "stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticIndex.java",
    "status": "modified",
    "additions": 23,
    "deletions": 22,
    "changes": 45,
    "blob_url": "https://github.com/gchq/stroom/blob/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticIndex.java",
    "raw_url": "https://github.com/gchq/stroom/raw/cccafe2f597090b117b63855e494ee39b62e6b52/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticIndex.java",
    "contents_url": "https://api.github.com/repos/gchq/stroom/contents/stroom-core-shared/src/main/java/stroom/search/elastic/shared/ElasticIndex.java?ref=cccafe2f597090b117b63855e494ee39b62e6b52",
    "patch": "@@ -18,6 +18,7 @@\n \n import stroom.datasource.api.v2.DataSourceField;\n import stroom.docstore.shared.Doc;\n+import stroom.query.api.v2.DocRef;\n import stroom.query.api.v2.ExpressionOperator;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n@@ -28,15 +29,19 @@\n import java.util.List;\n import java.util.Objects;\n \n-@JsonPropertyOrder({\"type\", \"uuid\", \"name\", \"version\", \"createTime\", \"updateTime\", \"createUser\", \"updateUser\", \"description\", \"connection\", \"indexName\", \"fields\", \"dataSourceFields\", \"retentionExpression\"})\n+@JsonPropertyOrder({\"type\", \"uuid\", \"name\", \"version\", \"createTime\", \"updateTime\", \"createUser\", \"updateUser\", \"description\", \"clusterRef\", \"indexName\", \"fields\", \"dataSourceFields\", \"retentionExpression\"})\n public class ElasticIndex extends Doc {\n     public static final String ENTITY_TYPE = \"ElasticIndex\";\n \n-    private static final long serialVersionUID = 2648729644398564919L;\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Reference to the `ElasticCluster` containing common Elasticsearch cluster connection properties\n+     */\n+    private DocRef clusterRef;\n \n     private String description;\n     private String indexName;\n-    private ElasticConnectionConfig connectionConfig = new ElasticConnectionConfig();\n     private List<ElasticIndexField> fields;\n     private List<DataSourceField> dataSourceFields;\n     private ExpressionOperator retentionExpression;\n@@ -50,8 +55,18 @@ public ElasticIndex() {\n \n     public void setDescription(final String description) { this.description = description; }\n \n+    @JsonProperty(\"clusterRef\")\n+    public DocRef getClusterRef() { return clusterRef; }\n+\n+    @JsonProperty(\"clusterRef\")\n+    public void setClusterRef(final DocRef clusterRef) {\n+        this.clusterRef = clusterRef;\n+    }\n+\n+    @JsonProperty(\"indexName\")\n     public String getIndexName() { return indexName; }\n \n+    @JsonProperty(\"indexName\")\n     public void setIndexName(final String indexName)\n     {\n         if (indexName == null || indexName.trim().isEmpty()) {\n@@ -62,20 +77,8 @@ public void setIndexName(final String indexName)\n         }\n     }\n \n-    @JsonProperty(\"connection\")\n-    public ElasticConnectionConfig getConnectionConfig() {\n-        return connectionConfig;\n-    }\n-\n-    @JsonProperty(\"connection\")\n-    public void setConnectionConfig(final ElasticConnectionConfig connectionConfig) {\n-        this.connectionConfig = connectionConfig;\n-    }\n-\n     @JsonProperty(\"fields\")\n-    public List<ElasticIndexField> getFields() {\n-        return fields;\n-    }\n+    public List<ElasticIndexField> getFields() { return fields; }\n \n     @JsonProperty(\"fields\")\n     public void setFields(final List<ElasticIndexField> fields) {\n@@ -89,9 +92,7 @@ public void setFields(final List<ElasticIndexField> fields) {\n     public void setDataSourceFields(final List<DataSourceField> dataSourceFields) { this.dataSourceFields = dataSourceFields; }\n \n     @JsonProperty(\"retentionExpression\")\n-    public ExpressionOperator getRetentionExpression() {\n-        return retentionExpression;\n-    }\n+    public ExpressionOperator getRetentionExpression() { return retentionExpression; }\n \n     @JsonProperty(\"retentionExpression\")\n     public void setRetentionExpression(final ExpressionOperator retentionExpression) { this.retentionExpression = retentionExpression; }\n@@ -109,23 +110,23 @@ public boolean equals(final Object o) {\n         if (!super.equals(o)) return false;\n         final ElasticIndex elasticIndex = (ElasticIndex) o;\n         return Objects.equals(description, elasticIndex.description) &&\n+                Objects.equals(clusterRef, elasticIndex.clusterRef) &&\n                 Objects.equals(indexName, elasticIndex.indexName) &&\n-                Objects.equals(connectionConfig, elasticIndex.connectionConfig) &&\n                 Objects.equals(fields, elasticIndex.fields) &&\n                 Objects.equals(dataSourceFields, elasticIndex.dataSourceFields);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(super.hashCode(), description, indexName, connectionConfig, fields, dataSourceFields);\n+        return Objects.hash(super.hashCode(), description, indexName, clusterRef, fields, dataSourceFields);\n     }\n \n     @Override\n     public String toString() {\n         return \"ElasticIndex{\" +\n                 \"description='\" + description + '\\'' +\n+                \", clusterRef='\" + clusterRef + '\\'' +\n                 \", indexName='\" + indexName + '\\'' +\n-                \", connectionConfig=\" + connectionConfig +\n                 \", fields=\" + fields +\n                 \", dataSourceFields=\" + dataSourceFields +\n                 '}';"
  }
]
