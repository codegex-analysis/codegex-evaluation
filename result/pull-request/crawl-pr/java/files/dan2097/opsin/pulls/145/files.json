[
  {
    "sha": "9d4231b552cea8482131f2a9039c10c8a0cbde1e",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/AtomParity.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/AtomParity.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/AtomParity.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/AtomParity.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -17,6 +17,7 @@\n \tprivate Atom[] atomRefs4;\r\n \tprivate int parity;\r\n \tprivate StereoGroup stereoGroup = StereoGroup.Unk;\r\n+\tprivate int stereoGroupNum = 1;\r\n \t\r\n \t/**\r\n \t * Create an atomParity from an array of 4 atoms and the parity of the chiral determinant\r\n@@ -44,11 +45,20 @@ void setParity(int parity) {\n \t\tthis.parity = parity;\r\n \t}\r\n \r\n-\tpublic void setStereoGroup(StereoGroup stroGrp) {\r\n+\tpublic void setStereoGroup(StereoGroup stroGrp, int num) {\r\n \t\tthis.stereoGroup = stroGrp;\r\n+\t\tthis.stereoGroupNum = num;\r\n+\t}\r\n+\r\n+\tpublic void setStereoGroup(StereoGroup stroGrp) {\r\n+\t\tsetStereoGroup(stroGrp, 1);\r\n \t}\r\n \r\n \tpublic StereoGroup getStereoGroup() {\r\n \t\treturn this.stereoGroup;\r\n \t}\r\n+\r\n+\tpublic int getStereoGroupNum() {\r\n+\t\treturn this.stereoGroupNum;\r\n+\t}\r\n }\r"
  },
  {
    "sha": "1d8912851646cfd34aa773f9d75a3a27fdf35825",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/BuildState.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/BuildState.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/BuildState.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/BuildState.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -18,6 +18,9 @@\n \tfinal FragmentManager fragManager;\r\n \tfinal HashMap<Element, List<Fragment>> xmlSuffixMap;\r\n \tfinal NameToStructureConfig n2sConfig;\r\n+\t// counter is used for DL- racemic stereochemistry in oligomers, we place each one in a separate racemic group,\r\n+\t// there is implicitly one group in-case the input has a combination of (RS)- and then DL-\r\n+\tint numRacGrps = 1;\r\n \tprivate final List<OpsinWarning> warnings = new ArrayList<OpsinWarning>();\r\n \t\r\n \tWordRule currentWordRule = null;\r"
  },
  {
    "sha": "8924938c46089d65513f1db78ba212e7e8dd87c8",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentGenerator.java",
    "status": "modified",
    "additions": 261,
    "deletions": 165,
    "changes": 426,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentGenerator.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentGenerator.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentGenerator.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -71,10 +71,10 @@ else if (bridgelength2 >bridgelength1) {\n \tprivate static final Pattern matchCommaOrDot =Pattern.compile(\"[\\\\.,]\");\n \tprivate static final Pattern matchAnnulene = Pattern.compile(\"[\\\\[\\\\(\\\\{]([1-9]\\\\d*)[\\\\]\\\\)\\\\}]annulen\");\n \tprivate static final String elementSymbols =\"(?:He|Li|Be|B|C|N|O|F|Ne|Na|Mg|Al|Si|P|S|Cl|Ar|K|Ca|Sc|Ti|V|Cr|Mn|Fe|Co|Ni|Cu|Zn|Ga|Ge|As|Se|Br|Kr|Rb|Sr|Y|Zr|Nb|Mo|Tc|Ru|Rh|Pd|Ag|Cd|In|Sn|Sb|Te|I|Xe|Cs|Ba|La|Ce|Pr|Nd|Pm|Sm|Eu|Gd|Tb|Dy|Ho|Er|Tm|Yb|Lu|Hf|Ta|W|Re|Os|Ir|Pt|Au|Hg|Tl|Pb|Po|At|Rn|Fr|Ra|Ac|Th|Pa|U|Np|Pu|Am|Cm|Bk|Cf|Es|Fm|Md|No|Lr|Rf|Db|Sg|Bh|Hs|Mt|Ds)\";\n-\tprivate static final Pattern matchStereochemistry = Pattern.compile(\"(.*?)(SR|R/?S|r/?s|[Rr]\\\\^?[*]|[Ss]\\\\^?[*]|[Ee][Zz]|[RSEZrsezabx]|[cC][iI][sS]|[tT][rR][aA][nN][sS]|[aA][lL][pP][hH][aA]|[bB][eE][tT][aA]|[xX][iI]|[eE][xX][oO]|[eE][nN][dD][oO]|[sS][yY][nN]|[aA][nN][tT][iI]|M|P|Ra|Sa|Sp|Rp|R(?:[Oo][Rr]|[Aa][Nn][Dd])S|S(?:[Oo][Rr]|[Aa][Nn][Dd])R)\");\n+\tprivate static final Pattern matchStereochemistry = Pattern.compile(\"(.*?)(SR|R/?S|r/?s|[Rr]\\\\^?[*]|[Ss]\\\\^?[*]|[Ee][Zz]|[EZ][*]|[RSEZrsezabx]|[cC][iI][sS]|[tT][rR][aA][nN][sS]|[aA][lL][pP][hH][aA]|[bB][eE][tT][aA]|[xX][iI]|[eE][xX][oO]|[eE][nN][dD][oO]|[sS][yY][nN]|[aA][nN][tT][iI]|M|P|Ra|Sa|Sp|Rp|R(?:[Oo][Rr]|[Aa][Nn][Dd])S|S(?:[Oo][Rr]|[Aa][Nn][Dd])R|E(?:[Oo][Rr]|[Aa][Nn][Dd])Z|Z(?:[Oo][Rr]|[Aa][Nn][Dd])E)\");\n \tprivate static final Pattern matchRacemic = Pattern.compile(\"rac(\\\\.|em(\\\\.|ic)?)?-?\", Pattern.CASE_INSENSITIVE);\n \tprivate static final Pattern matchRS = Pattern.compile(\"[Rr]/?\\\\^?[*Ss]?|[Ss]\\\\^?[*Rr]?|R(?:[Oo][Rr]|[Aa][Nn][Dd])S|S(?:[Oo][Rr]|[Aa][Nn][Dd])R\");\n-\tprivate static final Pattern matchEZ = Pattern.compile(\"[EZez]|[Ee][Zz]\");\n+\tprivate static final Pattern matchEZ = Pattern.compile(\"[EZez]|[Ee][Zz]|[EZ]\\\\*|EandZ|EorZ\");\n \tprivate static final Pattern matchAlphaBetaStereochem = Pattern.compile(\"a|b|x|[aA][lL][pP][hH][aA]|[bB][eE][tT][aA]|[xX][iI]\");\n \tprivate static final Pattern matchCisTrans = Pattern.compile(\"[cC][iI][sS]|[tT][rR][aA][nN][sS]\");\n \tprivate static final Pattern matchEndoExoSynAnti = Pattern.compile(\"[eE][xX][oO]|[eE][nN][dD][oO]|[sS][yY][nN]|[aA][nN][tT][iI]\");\n@@ -89,17 +89,17 @@ else if (bridgelength2 >bridgelength1) {\n \tprivate static final Pattern matchGreek = Pattern.compile(\"alpha|beta|gamma|delta|epsilon|zeta|eta|omega\", Pattern.CASE_INSENSITIVE);\n \tprivate static final Pattern matchInlineSuffixesThatAreAlsoGroups = Pattern.compile(\"carbonyl|oxy|sulfenyl|sulfinyl|sulfonyl|selenenyl|seleninyl|selenonyl|tellurenyl|tellurinyl|telluronyl\");\n \n-\t\n-\tprivate final NameToStructureConfig n2sConfig;\n-\t\n-\tComponentGenerator(NameToStructureConfig n2sConfig) {\n-\t\tthis.n2sConfig = n2sConfig;\n+\n+\tprivate final BuildState buildState;\n+\n+\tComponentGenerator(BuildState buildState) {\n+\t\tthis.buildState = buildState;\n \t}\n \n \t/**\n \t * Processes a parse result destructively adding semantic information by processing the various micro syntaxes.\n-\t * @param parse \n-\t * @throws ComponentGenerationException \n+\t * @param parse\n+\t * @throws ComponentGenerationException\n \t */\n \tvoid processParse(Element parse) throws ComponentGenerationException {\n \t\tList<Element> substituentsAndRoot = OpsinTools.getDescendantElementsWithTagNames(parse, new String[]{SUBSTITUENT_EL, ROOT_EL});\n@@ -125,7 +125,7 @@ void processParse(Element parse) throws ComponentGenerationException {\n \t\t *  places the elements inbetween within the newly created bracket */\n \t\tList<Element> brackets = new ArrayList<Element>();\n \t\tfindAndStructureBrackets(substituentsAndRoot, brackets);\n-\t\t\n+\n \t\tfor (Element subOrRoot: substituentsAndRoot) {\n \t\t\tprocessHydroCarbonRings(subOrRoot);\n \t\t\thandleSuffixIrregularities(subOrRoot);//handles quinone -->dioxo\n@@ -222,8 +222,8 @@ static void resolveAmbiguities(Element subOrRoot) throws ComponentGenerationExce\n \t\t\t}\n \t\t}\n \t}\n-\t\n-\t\n+\n+\n \t/**\n \t * Removes hyphens from the end of locants if present\n \t * Looks for locants of the form number-letter and converts them to letternumber\n@@ -232,9 +232,9 @@ static void resolveAmbiguities(Element subOrRoot) throws ComponentGenerationExce\n \t * Strips added hydrogen out of locants\n \t * Strips stereochemistry out of locants\n \t * Normalises case on greeks to lower case\n-\t * \n+\t *\n \t * @param subOrRoot\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tstatic void processLocants(Element subOrRoot) throws ComponentGenerationException {\n \t\tList<Element> children = subOrRoot.getChildElements();\n@@ -251,7 +251,7 @@ static void processLocants(Element subOrRoot) throws ComponentGenerationExceptio\n \t\t\t\t\t\tint bracketStart = -1;\n \t\t\t\t\t\tfor (int j = locantText.length() - 2; j >=0; j--) {\n \t\t\t\t\t\t\tchar ch = locantText.charAt(j);\n-\t\t\t\t\t\t\tif (ch == '(' || ch == '[' || ch == '{') { \n+\t\t\t\t\t\t\tif (ch == '(' || ch == '[' || ch == '{') {\n \t\t\t\t\t\t\t\tbracketStart = j;\n \t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\t}\n@@ -274,7 +274,7 @@ static void processLocants(Element subOrRoot) throws ComponentGenerationExceptio\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\telse if (matchRSLocantBracket.matcher(brackettedText).matches()) {\n \t\t\t\t\t\t\t\tlocantText = StringTools.removeDashIfPresent(locantText.substring(0, bracketStart));//strip the bracket from the locantText\n-\t\t\t\t\t\t\t\tString rs = brackettedText.replaceAll(\"\\\\W\", \"\");//convert R/S to RS\t\t\n+\t\t\t\t\t\t\t\tString rs = brackettedText.replaceAll(\"\\\\W\", \"\");//convert R/S to RS\n \t\t\t\t\t\t\t\tElement newStereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, \"(\" + standardizeLocantVariants(locantText) + rs + \")\");\n \t\t\t\t\t\t\t\tnewStereoChemEl.addAttribute(new Attribute(TYPE_ATR, STEREOCHEMISTRYBRACKET_TYPE_VAL));\n \t\t\t\t\t\t\t\tOpsinTools.insertBefore(locantEl, newStereoChemEl);\n@@ -295,7 +295,7 @@ else if (matchRSLocantBracket.matcher(brackettedText).matches()) {\n \t\t\t\tif(afterLocants == null) {\n \t\t\t\t\tthrow new ComponentGenerationException(\"Nothing after locant tag: \" + locantEl.toXML());\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\tif (individualLocants.size() == 1) {\n \t\t\t\t\tifCarbohydrateLocantConvertToAminoAcidStyleLocant(locantEl);\n \t\t\t\t}\n@@ -331,7 +331,7 @@ private static String standardizeLocantVariants(String locantText) {\n \t\t\t\tlocantText = m.group(2) + m.group(1) + m.group(3);\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tif (Character.isLetter(locantText.charAt(0))) {\n \t\t\t//remove indications of superscript as the fact a locant is superscripted can be determined from context e.g. N~1~ ->N1\n \t\t\tMatcher m =  matchSuperscriptedLocant.matcher(locantText);\n@@ -463,7 +463,7 @@ else if (\"p\".equalsIgnoreCase(firstChar)){\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \tprivate boolean orthoMetaParaLocantIsTwoLocants(Element ompLocant) {\n \t\tElement afterOmpLocant = OpsinTools.getNextSibling(ompLocant);\n \t\tif (afterOmpLocant != null){\n@@ -490,11 +490,11 @@ private boolean orthoMetaParaLocantIsTwoLocants(Element ompLocant) {\n \t\t}\n \t\treturn false;\n \t}\n-\t\n+\n \t/**\n \t * Processes adjacent alkane stem component elements into a single alkaneStem group element with the appropriate SMILES\n \t * e.g. dodecane would be \"do\" value=2 and \"dec\" value=10 -->alkaneStem with 12 carbons\n-\t * \n+\t *\n \t * @param subOrRoot\n \t */\n \tprivate void formAlkaneStemsFromComponents(Element subOrRoot) {\n@@ -521,12 +521,12 @@ private void formAlkaneStemsFromComponents(Element subOrRoot) {\n \t\t\talkaneStemComponent.detach();\n \t\t}\n \t}\n-\t\n+\n \t/**\n \t * Applies the traditional alkane modifiers: iso, tert, sec, neo by modifying the alkane chain's SMILES\n-\t * \n+\t *\n \t * @param subOrRoot\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate void processAlkaneStemModifications(Element subOrRoot) throws ComponentGenerationException {\n \t\tList<Element> alkaneStemModifiers = subOrRoot.getChildElements(ALKANESTEMMODIFIER_EL);\n@@ -632,7 +632,7 @@ else if (type.equals(\"neo\")){\n \t * These are chains of one heteroatom or alternating heteroatoms and are expressed using SMILES\n \t * They are typically treated in an analogous way to alkanes\n \t * @param subOrRoot The root/substituents\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate void processHeterogenousHydrides(Element subOrRoot) throws ComponentGenerationException  {\n \t\tList<Element> multipliers = subOrRoot.getChildElements(MULTIPLIER_EL);\n@@ -647,7 +647,7 @@ private void processHeterogenousHydrides(Element subOrRoot) throws ComponentGene\n \t\t\t\t\tmultipliedElem.getAttribute(SUBTYPE_ATR)!=null &&\n \t\t\t\t\tmultipliedElem.getAttributeValue(SUBTYPE_ATR).equals(HETEROSTEM_SUBTYPE_VAL)) {\n \t\t\t\tint mvalue = Integer.parseInt(m.getAttributeValue(VALUE_ATR));\n-\t\t\t\t\n+\n \t\t\t\tElement possiblyALocant = OpsinTools.getPreviousSibling(m);//detect rare case where multiplier does not mean form a chain of heteroatoms e.g. something like 1,2-disulfanylpropane\n \t\t\t\tif(possiblyALocant !=null && possiblyALocant.getName().equals(LOCANT_EL)&& mvalue==possiblyALocant.getValue().split(\",\").length){\n \t\t\t\t\tElement suffix = OpsinTools.getNextSibling(multipliedElem, SUFFIX_EL);\n@@ -658,7 +658,7 @@ private void processHeterogenousHydrides(Element subOrRoot) throws ComponentGene\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\t//chain of heteroatoms\n \t\t\t\tString heteroatomSmiles=multipliedElem.getAttributeValue(VALUE_ATR);\n \t\t\t\tif (heteroatomSmiles.equals(\"B\") && OpsinTools.getPreviousSibling(m)==null){\n@@ -751,22 +751,22 @@ else if (possiblyAnUnsaturator!=null && possiblyAnUnsaturator.getValue().equals(\n \t * and the second must be compatible with a HW ane stem\n \t * @param firstHeteroAtomSMILES\n \t * @param secondHeteroAtomSMILES\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate void checkForAmbiguityWithHWring(String firstHeteroAtomSMILES, String secondHeteroAtomSMILES) throws ComponentGenerationException {\n \t\tMatcher m = MATCH_ELEMENT_SYMBOL.matcher(firstHeteroAtomSMILES);\n \t\tif (!m.find()){\n \t\t\tthrow new ComponentGenerationException(\"Failed to extract element from heteroatom\");\n \t\t}\n \t\tChemEl atom1ChemEl = ChemEl.valueOf(m.group());\n-\t\t\n+\n \t\tm = MATCH_ELEMENT_SYMBOL.matcher(secondHeteroAtomSMILES);\n \t\tif (!m.find()){\n \t\t\tthrow new ComponentGenerationException(\"Failed to extract element from heteroatom\");\n \t\t}\n \t\tChemEl atom2ChemEl =  ChemEl.valueOf(m.group());\n \t\tif (AtomProperties.getHwpriority(atom1ChemEl) > AtomProperties.getHwpriority(atom2ChemEl)){\n-\t\t\tif (atom2ChemEl == ChemEl.O || atom2ChemEl == ChemEl.S || atom2ChemEl == ChemEl.Se || atom2ChemEl == ChemEl.Te \n+\t\t\tif (atom2ChemEl == ChemEl.O || atom2ChemEl == ChemEl.S || atom2ChemEl == ChemEl.Se || atom2ChemEl == ChemEl.Te\n \t\t\t\t\t|| atom2ChemEl == ChemEl.Bi || atom2ChemEl == ChemEl.Hg){\n \t\t\t\tif (!hasSiorGeorSnorPb(atom1ChemEl, atom2ChemEl)){\n \t\t\t\t\tthrow new ComponentGenerationException(\"Hantzch-widman ring misparsed as a heterogeneous hydride with alternating atoms\");\n@@ -785,21 +785,21 @@ private boolean hasSiorGeorSnorPb(ChemEl atom1ChemEl, ChemEl atom2ChemEl) {\n \t\treturn (atom1ChemEl == ChemEl.Si || atom1ChemEl == ChemEl.Ge || atom1ChemEl == ChemEl.Sn || atom1ChemEl == ChemEl.Pb\n \t\t\t\t|| atom2ChemEl == ChemEl.Si || atom2ChemEl == ChemEl.Ge || atom2ChemEl == ChemEl.Sn || atom2ChemEl == ChemEl.Pb);\n \t}\n-\t\n+\n \t/**\n \t * Throws an exception if the given heteroatoms could be part of a heterogenous hydride\n \t * For this to be true the second heteroatom must be higher priority than the first\n \t * @param firstHeteroAtomSMILES\n \t * @param secondHeteroAtomSMILES\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate void checkForAmbiguityWithHeterogenousHydride(String firstHeteroAtomSMILES, String secondHeteroAtomSMILES) throws ComponentGenerationException {\n \t\tMatcher m = MATCH_ELEMENT_SYMBOL.matcher(firstHeteroAtomSMILES);\n \t\tif (!m.find()){\n \t\t\tthrow new ComponentGenerationException(\"Failed to extract element from heteroatom\");\n \t\t}\n \t\tString atom1Element = m.group();\n-\t\t\n+\n \t\tm = MATCH_ELEMENT_SYMBOL.matcher(secondHeteroAtomSMILES);\n \t\tif (!m.find()){\n \t\t\tthrow new ComponentGenerationException(\"Failed to extract element from heteroatom\");\n@@ -813,7 +813,7 @@ private void checkForAmbiguityWithHeterogenousHydride(String firstHeteroAtomSMIL\n \t/** Handle indicated hydrogen  e.g. 1H- in 1H-pyrrole\n \t *\n \t * @param subOrRoot The substituent/root to looks for indicated hydrogens in.\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate void processIndicatedHydrogens(Element subOrRoot) throws ComponentGenerationException {\n \t\tList<Element> indicatedHydrogens = subOrRoot.getChildElements(INDICATEDHYDROGEN_EL);\n@@ -868,128 +868,215 @@ else if (stereoChemistryElement.getAttributeValue(TYPE_ATR).equals(ALPHA_OR_BETA\n \t\t\t}\n \t\t\telse if (stereoChemistryElement.getAttributeValue(TYPE_ATR).equals(RELATIVECISTRANS_TYPE_VAL)){\n \t\t\t\tprocessRelativeCisTrans(stereoChemistryElement);\n-\t\t\t}\n+\t\t\t} else if (stereoChemistryElement.getAttributeValue(TYPE_ATR).equals(OPTICALROTATION_TYPE_VAL)){\n+        \t\tprocessOpticalRotation(stereoChemistryElement);\n+      \t\t}\n \t\t}\n \t\tif (locantedUnbrackettedEzTerms.size() > 0) {\n \t\t\tduplicateLocantFromStereoTermIfAdjacentToEneOrYlidene(locantedUnbrackettedEzTerms);\n \t\t}\n \t}\n \n \tprivate void processStereochemistryBracket(Element stereoChemistryElement) throws ComponentGenerationException {\n-\t\tStereoGroup group = null;\n-\t\tString      txt   = stereoChemistryElement.getValue();\n-\t\tif (StringTools.startsWithCaseInsensitive(txt, \"rel-\")) {\n-\t\t\tgroup = StereoGroup.Rel;\n-\t\t\ttxt   = txt.substring(4);\n-\t\t}\n-\t\ttxt = StringTools.removeDashIfPresent(txt);\n-\t\tMatcher racemicMacher = matchRacemic.matcher(txt);\n-\t\tif (racemicMacher.lookingAt()) {\n-\t\t\ttxt = txt.substring(racemicMacher.group().length());\n-\t\t\t// should be an error if relative is set already but should not be\n-\t\t\t// possible to be matched by grammar...\n-\t\t\tgroup = StereoGroup.Rac;\n-\t\t}\n-\n-\t\tif (txt.length() > 0) {//if txt is just \"rel- or rac-\" then it will be length 0 at this point\n-\t\t\tList<String> stereoChemistryDescriptors = splitStereoBracketIntoDescriptors(txt);\n-\t\t\tboolean      exclusiveStereoTerm        = false;\n-\t\t\tif (stereoChemistryDescriptors.size() == 1) {\n-\t\t\t\tString stereoChemistryDescriptor = stereoChemistryDescriptors.get(0);\n-\t\t\t\tif (stereoChemistryDescriptor.equalsIgnoreCase(\"rel\")) {\n-\t\t\t\t\tgroup               = StereoGroup.Rel;\n-\t\t\t\t\texclusiveStereoTerm = true;\n-\t\t\t\t} else if (matchRacemic.matcher(stereoChemistryDescriptor).matches()) {\n-\t\t\t\t\tgroup               = StereoGroup.Rac;\n-\t\t\t\t\texclusiveStereoTerm = true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (!exclusiveStereoTerm) {\n-\t\t\t\tfor (String stereoChemistryDescriptor : stereoChemistryDescriptors) {\n-\t\t\t\t\tMatcher m = matchStereochemistry.matcher(stereoChemistryDescriptor);\n-\t\t\t\t\tif (m.matches()) {\n-\t\t\t\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, stereoChemistryDescriptor);\n-\t\t\t\t\t\tString  locantVal    = m.group(1);\n-\t\t\t\t\t\tif (locantVal.length() > 0) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(LOCANT_ATR, fixLocantCapitalisation(StringTools.removeDashIfPresent(locantVal))));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tOpsinTools.insertBefore(stereoChemistryElement, stereoChemEl);\n-\t\t\t\t\t\tif (matchRS.matcher(m.group(2)).matches()) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, R_OR_S_TYPE_VAL));\n-\t\t\t\t\t\t\tString      symbol     = m.group(2).toUpperCase(Locale.ROOT).replaceAll(\"/\", \"\");\n-\t\t\t\t\t\t\tStereoGroup groupLocal = group; // needs to be local\n-\t\t\t\t\t\t\tif (symbol.equals(\"RS\") || symbol.equals(\"SR\") ||\n-\t\t\t\t\t\t\t\t\tsymbol.equals(\"RANDS\") || symbol.equals(\"SANDR\")) {\n-\t\t\t\t\t\t\t\t// rel-(RS) is conflicting, interpret as relative even though a\n-\t\t\t\t\t\t\t\t// relative descriptor was used\n-\t\t\t\t\t\t\t\tif (groupLocal == null)\n-\t\t\t\t\t\t\t\t\tgroupLocal = StereoGroup.Rac;\n-\t\t\t\t\t\t\t\tsymbol     = symbol.substring(0, 1); // RS => R, SR => S\n-\t\t\t\t\t\t\t} else if (symbol.equals(\"R*\") || symbol.equals(\"S*\") ||\n-\t\t\t\t\t\t\t\t\t\t\t\t symbol.equals(\"R^*\") || symbol.equals(\"S^*\") ||\n-\t\t\t\t\t\t\t\t\t\t\t\t symbol.equals(\"RORS\") || symbol.equals(\"SORR\")) {\n-\t\t\t\t\t\t\t\t// rac-(R*) is conflicting, interpret as racemic even though a\n-\t\t\t\t\t\t\t\t// relative descriptor was used\n-\t\t\t\t\t\t\t\tif (groupLocal == null)\n-\t\t\t\t\t\t\t\t\tgroupLocal = StereoGroup.Rel;\n-\t\t\t\t\t\t\t\tsymbol     = symbol.substring(0, 1); // R* => R, S* => S\n+\t\ttry {\n+\t\t\tStereoGroup group = null;\n+\t\t\tString txt = stereoChemistryElement.getValue();\n+\t\t\tif (StringTools.startsWithCaseInsensitive(txt, \"rel-\")) {\n+\t\t\t\tgroup = StereoGroup.Rel;\n+\t\t\t\ttxt = txt.substring(4);\n+\t\t\t}\n+\t\t\ttxt = StringTools.removeDashIfPresent(txt);\n+\t\t\tMatcher racemicMacher = matchRacemic.matcher(txt);\n+\t\t\tif (racemicMacher.lookingAt()) {\n+\t\t\t\ttxt = txt.substring(racemicMacher.group().length());\n+\t\t\t\t// should be an error if relative is set already but should not be\n+\t\t\t\t// possible to be matched by grammar...\n+\t\t\t\tgroup = StereoGroup.Rac;\n+\t\t\t}\n+\n+\t\t\ttxt = normaliseBinaryBrackets(txt);\n+\n+\t\t\tif (txt.length() > 0) {//if txt is just \"rel- or rac-\" then it will be length 0 at this point\n+\t\t\t\tList<String> stereoChemistryDescriptors = splitStereoBracketIntoDescriptors(txt);\n+\t\t\t\tboolean exclusiveStereoTerm = false;\n+\t\t\t\tif (stereoChemistryDescriptors.size() == 1) {\n+\t\t\t\t\tString stereoChemistryDescriptor = stereoChemistryDescriptors.get(0);\n+\t\t\t\t\tif (stereoChemistryDescriptor.equalsIgnoreCase(\"rel\")) {\n+\t\t\t\t\t\tgroup = StereoGroup.Rel;\n+\t\t\t\t\t\texclusiveStereoTerm = true;\n+\t\t\t\t\t} else if (matchRacemic.matcher(stereoChemistryDescriptor).matches()) {\n+\t\t\t\t\t\tgroup = StereoGroup.Rac;\n+\t\t\t\t\t\texclusiveStereoTerm = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (!exclusiveStereoTerm) {\n+\t\t\t\t\tfor (String stereoChemistryDescriptor : stereoChemistryDescriptors) {\n+\t\t\t\t\t\tMatcher m = matchStereochemistry.matcher(stereoChemistryDescriptor);\n+\t\t\t\t\t\tif (m.matches()) {\n+\t\t\t\t\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, stereoChemistryDescriptor);\n+\t\t\t\t\t\t\tString locantVal = m.group(1);\n+\t\t\t\t\t\t\tif (locantVal.length() > 0) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(LOCANT_ATR, fixLocantCapitalisation(StringTools.removeDashIfPresent(locantVal))));\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, symbol));\n-\t\t\t\t\t\t\tif (groupLocal == null)\n-\t\t\t\t\t\t\t\tgroupLocal = StereoGroup.Abs;\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(STEREOGROUP_ATR, groupLocal.name()));\n-\t\t\t\t\t\t} else if (matchEZ.matcher(m.group(2)).matches()) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, E_OR_Z_TYPE_VAL));\n-\t\t\t\t\t\t\tString symbol = m.group(2).toUpperCase(Locale.ROOT);\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, symbol));\n-\t\t\t\t\t\t} else if (matchAlphaBetaStereochem.matcher(m.group(2)).matches()) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, ALPHA_OR_BETA_TYPE_VAL));\n-\t\t\t\t\t\t\tif (Character.toLowerCase(m.group(2).charAt(0)) == 'a') {\n-\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, \"alpha\"));\n-\t\t\t\t\t\t\t} else if (Character.toLowerCase(m.group(2).charAt(0)) == 'b') {\n-\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, \"beta\"));\n-\t\t\t\t\t\t\t} else if (Character.toLowerCase(m.group(2).charAt(0)) == 'x') {\n-\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, \"xi\"));\n+\t\t\t\t\t\t\tOpsinTools.insertBefore(stereoChemistryElement, stereoChemEl);\n+\t\t\t\t\t\t\tif (matchRS.matcher(m.group(2)).matches()) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, R_OR_S_TYPE_VAL));\n+\t\t\t\t\t\t\t\tString symbol = m.group(2).toUpperCase(Locale.ROOT).replaceAll(\"/\", \"\");\n+\t\t\t\t\t\t\t\tStereoGroup groupLocal = group; // needs to be local\n+\t\t\t\t\t\t\t\tif (symbol.equals(\"RS\") || symbol.equals(\"SR\") ||\n+\t\t\t\t\t\t\t\t\t\tsymbol.equals(\"RANDS\") || symbol.equals(\"SANDR\")) {\n+\t\t\t\t\t\t\t\t\t// rel-(RS) is conflicting, interpret as relative even though a\n+\t\t\t\t\t\t\t\t\t// relative descriptor was used\n+\t\t\t\t\t\t\t\t\tif (groupLocal == null)\n+\t\t\t\t\t\t\t\t\t\tgroupLocal = StereoGroup.Rac;\n+\t\t\t\t\t\t\t\t\tsymbol = symbol.substring(0, 1); // RS => R, SR => S\n+\t\t\t\t\t\t\t\t} else if (symbol.equals(\"R*\") || symbol.equals(\"S*\") ||\n+\t\t\t\t\t\t\t\t\t\tsymbol.equals(\"R^*\") || symbol.equals(\"S^*\") ||\n+\t\t\t\t\t\t\t\t\t\tsymbol.equals(\"RORS\") || symbol.equals(\"SORR\")) {\n+\t\t\t\t\t\t\t\t\t// rac-(R*) is conflicting, interpret as racemic even though a\n+\t\t\t\t\t\t\t\t\t// relative descriptor was used\n+\t\t\t\t\t\t\t\t\tif (groupLocal == null)\n+\t\t\t\t\t\t\t\t\t\tgroupLocal = StereoGroup.Rel;\n+\t\t\t\t\t\t\t\t\tsymbol = symbol.substring(0, 1); // R* => R, S* => S\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, symbol));\n+\t\t\t\t\t\t\t\tif (groupLocal == null)\n+\t\t\t\t\t\t\t\t\tgroupLocal = StereoGroup.Abs;\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(STEREOGROUP_ATR, groupLocal.name()));\n+\t\t\t\t\t\t\t} else if (matchEZ.matcher(m.group(2)).matches()) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, E_OR_Z_TYPE_VAL));\n+\t\t\t\t\t\t\t\tString symbol = m.group(2).toUpperCase(Locale.ROOT);\n+\t\t\t\t\t\t\t\tif (symbol.equalsIgnoreCase(\"EandZ\") ||\n+\t\t\t\t\t\t\t\t\tsymbol.equalsIgnoreCase(\"EorZ\") ||\n+\t\t\t\t\t\t\t\t\tsymbol.equalsIgnoreCase(\"E*\") ||\n+\t\t\t\t\t\t\t\t\tsymbol.equalsIgnoreCase(\"Z*\"))\n+\t\t\t\t\t\t\t\t\tsymbol = \"EZ\";\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, symbol));\n+\t\t\t\t\t\t\t} else if (matchAlphaBetaStereochem.matcher(m.group(2)).matches()) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, ALPHA_OR_BETA_TYPE_VAL));\n+\t\t\t\t\t\t\t\tif (Character.toLowerCase(m.group(2).charAt(0)) == 'a') {\n+\t\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, \"alpha\"));\n+\t\t\t\t\t\t\t\t} else if (Character.toLowerCase(m.group(2).charAt(0)) == 'b') {\n+\t\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, \"beta\"));\n+\t\t\t\t\t\t\t\t} else if (Character.toLowerCase(m.group(2).charAt(0)) == 'x') {\n+\t\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, \"xi\"));\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tthrow new ComponentGenerationException(\"Malformed alpha/beta stereochemistry element: \" + stereoChemistryElement.getValue());\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (matchCisTrans.matcher(m.group(2)).matches()) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, CISORTRANS_TYPE_VAL));\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, m.group(2).toLowerCase(Locale.ROOT)));\n+\t\t\t\t\t\t\t} else if (matchEndoExoSynAnti.matcher(m.group(2)).matches()) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, ENDO_EXO_SYN_ANTI_TYPE_VAL));\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, m.group(2).toLowerCase(Locale.ROOT)));\n+\t\t\t\t\t\t\t} else if (matchAxialStereo.matcher(m.group(2)).matches()) {\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, AXIAL_TYPE_VAL));\n+\t\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, m.group(2)));\n \t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new ComponentGenerationException(\"Malformed alpha/beta stereochemistry element: \" + stereoChemistryElement.getValue());\n+\t\t\t\t\t\t\t\tthrow new ComponentGenerationException(\"Malformed stereochemistry element: \" + stereoChemistryElement.getValue());\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (matchCisTrans.matcher(m.group(2)).matches()) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, CISORTRANS_TYPE_VAL));\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, m.group(2).toLowerCase(Locale.ROOT)));\n-\t\t\t\t\t\t} else if (matchEndoExoSynAnti.matcher(m.group(2)).matches()) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, ENDO_EXO_SYN_ANTI_TYPE_VAL));\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, m.group(2).toLowerCase(Locale.ROOT)));\n-\t\t\t\t\t\t} else if (matchAxialStereo.matcher(m.group(2)).matches()) {\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, AXIAL_TYPE_VAL));\n-\t\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(VALUE_ATR, m.group(2)));\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tthrow new ComponentGenerationException(\"Malformed stereochemistry element: \" + stereoChemistryElement.getValue());\n \t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new ComponentGenerationException(\"Malformed stereochemistry element: \" + stereoChemistryElement.getValue());\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\t// Rac or Rel exclusively\n+\t\t\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, stereoChemistryElement.getValue());\n+\t\t\t\t\tif (group == StereoGroup.Rac)\n+\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, RAC_TYPE_VAL));\n+\t\t\t\t\telse\n+\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, REL_TYPE_VAL));\n+\t\t\t\t\tOpsinTools.insertBefore(stereoChemistryElement, stereoChemEl);\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\t// Rac or Rel exclusively\n-\t\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, stereoChemistryElement.getValue());\n-\t\t\t\tif (group == StereoGroup.Rac)\n-\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, RAC_TYPE_VAL));\n-\t\t\t\telse\n-\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, REL_TYPE_VAL));\n-\t\t\t\tOpsinTools.insertBefore(stereoChemistryElement, stereoChemEl);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (group == StereoGroup.Rac || group == StereoGroup.Rel) {\n-\t\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, stereoChemistryElement.getValue());\n-\t\t\t\tif (group == StereoGroup.Rac)\n-\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, RAC_TYPE_VAL));\n-\t\t\t\telse\n-\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, REL_TYPE_VAL));\n-\t\t\t\tOpsinTools.insertBefore(stereoChemistryElement, stereoChemEl);\n+\t\t\t\tif (group == StereoGroup.Rac || group == StereoGroup.Rel) {\n+\t\t\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, stereoChemistryElement.getValue());\n+\t\t\t\t\tif (group == StereoGroup.Rac)\n+\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, RAC_TYPE_VAL));\n+\t\t\t\t\telse\n+\t\t\t\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, REL_TYPE_VAL));\n+\t\t\t\t\tOpsinTools.insertBefore(stereoChemistryElement, stereoChemEl);\n+\t\t\t\t}\n \t\t\t}\n+\n+\t\t} catch (StereochemistryException ex) {\n+\t\t\tif (buildState.n2sConfig.warnRatherThanFailOnUninterpretableStereochemistry())\n+\t\t\t\tbuildState.addWarning(OpsinWarning.OpsinWarningType.STEREOCHEMISTRY_IGNORED, ex.getMessage());\n+\t\t\telse\n+\t\t\t\tthrow new ComponentGenerationException(ex);\n+\t\t} finally {\n+\t\t\tstereoChemistryElement.detach();\n \t\t}\n+\t}\n \n-\t\tstereoChemistryElement.detach();\n+\t/**\n+\t * Normalizes brackets that are written with an AND or OR:\n+\t * <p>\n+\t * \"(R)- and (S)-\" becomes \"(RS)\",\n+\t * \"(R)- or (S)-\" becomes \"(R*)-\"\n+\t * \"(R,R)- or (S,R)-\" becomes \"(R*,R)-\"\n+\t *\n+\t * @param inputStr the stereo bracket test\n+\t * @return normalised bracket or the input if it could not be normalised\n+\t */\n+\tstatic String normaliseBinaryBrackets(String inputStr) throws StereochemistryException {\n+\t\tif (inputStr.isEmpty())\n+\t\t\treturn inputStr;\n+\t\tint len = inputStr.length() - 1;\n+\t\tint i = 1;\n+\t\tfor (; i < len; i++)\n+\t\t\tif (inputStr.charAt(i) == ')')\n+\t\t\t\tbreak;\n+\t\tif (i == len)\n+\t\t\treturn inputStr; // no match\n+\t\tString firstBracket = inputStr.substring(1, i);\n+\t\ti++; // close bracket\n+\t\t// optional dash\n+\t\tif (i < len && inputStr.charAt(i) == '-')\n+\t\t\ti++;\n+\t\tStereoGroup mode;\n+\t\tif (StringTools.startsWithCaseInsensitive(inputStr, i, \"AND\"))\n+\t\t\tmode = StereoGroup.Rac;\n+\t\telse if (StringTools.startsWithCaseInsensitive(inputStr, i, \"OR\"))\n+\t\t\tmode = StereoGroup.Rel;\n+\t\telse\n+\t\t\treturn inputStr;\n+\t\tfor (; i < len; i++)\n+\t\t\tif (inputStr.charAt(i) == '(')\n+\t\t\t\tbreak;\n+\t\tif (i == len)\n+\t\t\treturn inputStr; // no match\n+\t\tint mark = i + 1;\n+\t\tfor (; i < len; i++)\n+\t\t\tif (inputStr.charAt(i) == ')')\n+\t\t\t\tbreak;\n+\t\tString secondBracket = inputStr.substring(mark, i);\n+\n+\t\tif (firstBracket.length() != secondBracket.length())\n+\t\t\tthrow new StereochemistryException(\"Alternative stereochemistry brackets are different lengths: \" + firstBracket + \" \" + secondBracket);\n+\n+\t\tStringBuilder generated = new StringBuilder();\n+\t\tgenerated.append('(');\n+\t\tfor (int j = 0; j < firstBracket.length(); j++) {\n+\t\t\tgenerated.append(firstBracket.charAt(j));\n+\t\t\tif (firstBracket.charAt(j) == secondBracket.charAt(j)) {\n+\t\t\t\tcontinue;\n+\t\t\t} else if (firstBracket.charAt(j) == 'R' ||\n+\t\t\t\t\tfirstBracket.charAt(j) == 'S' ||\n+\t\t\t\t\tfirstBracket.charAt(j) == 'r' ||\n+\t\t\t\t\tfirstBracket.charAt(j) == 's' ||\n+\t\t\t\t\tfirstBracket.charAt(j) == 'E' ||\n+\t\t\t\t\tfirstBracket.charAt(j) == 'Z') {\n+\t\t\t\tif (mode == StereoGroup.Rac)\n+\t\t\t\t\tgenerated.append(secondBracket.charAt(j));\n+\t\t\t\telse\n+\t\t\t\t\tgenerated.append('*');\n+\t\t\t} else {\n+\t\t\t\tthrow new StereochemistryException(\"Invalid combination of stereo brackets: \" + firstBracket.charAt(j) + \" \" + secondBracket.charAt(j));\n+\t\t\t}\n+\t\t}\n+\t\tgenerated.append(')');\n+\t\treturn generated.toString();\n \t}\n \n \tprivate List<String> splitStereoBracketIntoDescriptors(String stereoBracket) {\n@@ -1021,6 +1108,15 @@ else if (ch == '-'){\n \t\treturn stereoDescriptors;\n \t}\n \n+\tpublic void processOpticalRotation(Element e) {\n+\t\tif (e.getValue().startsWith(\"(+/-)\") ||\n+\t\t\t\te.getValue().startsWith(\"(+-)\")) {\n+\t\t\tElement stereoChemEl = new TokenEl(STEREOCHEMISTRY_EL, e.getValue());\n+\t\t\tstereoChemEl.addAttribute(new Attribute(TYPE_ATR, RAC_TYPE_VAL));\n+\t\t\tOpsinTools.insertBefore(e, stereoChemEl);\n+\t\t}\n+\t}\n+\n \tprivate boolean assignLocantUsingPreviousElementIfPresent(Element stereoChemistryElement) {\n \t\tElement possibleLocant = OpsinTools.getPrevious(stereoChemistryElement);\n \t\tif (possibleLocant !=null && possibleLocant.getName().equals(LOCANT_EL) && possibleLocant.getValue().split(\",\").length==1){\n@@ -1030,13 +1126,13 @@ private boolean assignLocantUsingPreviousElementIfPresent(Element stereoChemistr\n \t\t}\n \t\treturn false;\n \t}\n-\t\n+\n \tprivate void processLocantAssigningForEndoExoSynAnti(Element stereoChemistryElement) {\n \t\tElement possibleLocant = OpsinTools.getPrevious(stereoChemistryElement);\n \t\tif (possibleLocant !=null && possibleLocant.getName().equals(LOCANT_EL) && possibleLocant.getValue().split(\",\").length==1){\n \t\t\tstereoChemistryElement.addAttribute(new Attribute(LOCANT_ATR, possibleLocant.getValue()));\n \t\t\tElement group = OpsinTools.getNextSibling(stereoChemistryElement, GROUP_EL);\n-\t\t\tif (group != null && \n+\t\t\tif (group != null &&\n \t\t\t\t\t(CYCLICUNSATURABLEHYDROCARBON_SUBTYPE_VAL.equals(group.getAttributeValue(SUBTYPE_ATR))\n \t\t\t\t\t\t|| OpsinTools.getPreviousSibling(group).getName().equals(VONBAEYER_EL))){\n \t\t\t\t//detach locant only if we're sure it has no other meaning\n@@ -1092,14 +1188,14 @@ else if (Character.toLowerCase(possibleAlphaBeta.charAt(0)) == 'x'){\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tif (createLocantsEl){\n \t\t\tElement newLocantEl = new TokenEl(LOCANT_EL, StringTools.stringListToString(locants, \",\"));\n \t\t\tOpsinTools.insertAfter(stereoChemistryElement, newLocantEl);\n \t\t}\n \t\tstereoChemistryElement.detach();\n \t}\n-\t\n+\n \tprivate void processRelativeCisTrans(Element stereoChemistryElement) {\n \t\tString value = StringTools.removeDashIfPresent(stereoChemistryElement.getValue());\n \t\tStringBuilder sb = new StringBuilder();\n@@ -1118,7 +1214,7 @@ private void processRelativeCisTrans(Element stereoChemistryElement) {\n \t\tElement locantEl = new TokenEl(LOCANT_EL, sb.toString());\n \t\tOpsinTools.insertAfter(stereoChemistryElement, locantEl);\n \t}\n-\t\n+\n \t/**\n \t * If the e/z term is next to an ene or ylidene duplicate the locant\n \t * e.g. 2E,4Z-diene --> 2E,4Z-2,4-diene\n@@ -1318,7 +1414,7 @@ else if (possibleHeteroatomOrMultiplier!=null && ((heteroCount==0 && OpsinTools.\n \t\t\t\t\t(possibleHeteroatomOrMultiplier.getValue().equals(\"benzo\") || possibleHeteroatomOrMultiplier.getValue().equals(\"benz\"))\n \t\t\t\t\t&& !OpsinTools.getNextSibling(possibleHeteroatomOrMultiplier).getName().equals(FUSION_EL)\n \t\t\t\t\t&& !OpsinTools.getNextSibling(possibleHeteroatomOrMultiplier).getName().equals(LOCANT_EL))\n-\t\t\t\t\t|| (possibleHeteroatomOrMultiplier.getName().equals(POLYCYCLICSPIRO_EL) && \n+\t\t\t\t\t|| (possibleHeteroatomOrMultiplier.getName().equals(POLYCYCLICSPIRO_EL) &&\n \t\t\t\t\t\t\t(possibleHeteroatomOrMultiplier.getAttributeValue(VALUE_ATR).equals(\"spirobi\")|| possibleHeteroatomOrMultiplier.getAttributeValue(VALUE_ATR).equals(\"spiroter\"))))){\n \t\t\t\tfrontLocantsExpected = true;//a benzo fused ring e.g. 1lambda4,3-benzothiazole or a symmetrical poly cyclic spiro system\n \t\t\t}\n@@ -1406,7 +1502,7 @@ else if (possibleHeteroatomOrMultiplier!=null && ((heteroCount==0 && OpsinTools.\n \n \t/**Finds matching open and close brackets, and places the\n \t * elements contained within in a big &lt;bracket&gt; element.\n-\t * @param brackets \n+\t * @param brackets\n \t *\n \t * @param substituentsAndRoot: The substituent/root elements at the current level of the tree\n \t * @throws ComponentGenerationException\n@@ -1452,7 +1548,7 @@ private void findAndStructureBrackets(List<Element> substituentsAndRoot, List<El\n \t * @param openBracket The open bracket element\n \t * @param closeBracket The close bracket element\n \t * @return The bracket element thus created.\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate Element structureBrackets(Element openBracket, Element closeBracket) throws ComponentGenerationException {\n \t\tElement bracket = new GroupingEl(BRACKET_EL);\n@@ -1654,18 +1750,18 @@ private void processHydroCarbonRings(Element subOrRoot) throws ComponentGenerati\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \t/**\n \t * Handles irregular suffixes. e.g. Quinone and ylene\n \t * @param subOrRoot\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate void handleSuffixIrregularities(Element subOrRoot) throws ComponentGenerationException {\n \t\tList<Element> suffixes = subOrRoot.getChildElements(SUFFIX_EL);\n \t\tfor (Element suffix : suffixes) {\n \t\t\tString suffixValue = suffix.getValue();\n \t\t\tif (suffixValue.equals(\"ic\") || suffixValue.equals(\"ous\")){\n-\t\t\t\tif (!n2sConfig.allowInterpretationOfAcidsWithoutTheWordAcid()) {\n+\t\t\t\tif (!buildState.n2sConfig.allowInterpretationOfAcidsWithoutTheWordAcid()) {\n \t\t\t\t\tElement next = OpsinTools.getNext(suffix);\n \t\t\t\t\tif (next == null){\n \t\t\t\t\t\tthrow new ComponentGenerationException(\"\\\"acid\\\" not found after \" +suffixValue);\n@@ -1799,8 +1895,8 @@ else if(previousElType.equals(CYCLO_EL)) {\n \t * This modifies the provided chainGroup into the spiro system by replacing the value of the chain group with appropriate SMILES\n \t * @param chainGroup\n \t * @param spiroEl\n-\t * @throws ComponentGenerationException \n-\t * @throws NumberFormatException \n+\t * @throws ComponentGenerationException\n+\t * @throws NumberFormatException\n \t */\n \tprivate void processSpiroSystem(Element chainGroup, Element spiroEl) throws NumberFormatException, ComponentGenerationException {\n \t\tint[][] spiroDescriptors = getSpiroDescriptors(StringTools.removeDashIfPresent(spiroEl.getValue()));\n@@ -1839,7 +1935,7 @@ private void processSpiroSystem(Element chainGroup, Element spiroEl) throws Numb\n \t\t\t\tif (smiles.indexOf(\"C\" + ringOpeningLabel, ringOpeningPos)>=0) {\n \t\t\t\t\t// this ring opening has already been closed\n \t\t\t\t\t// i.e. this atom connects more than one ring in a spiro fusion\n-\t\t\t\t\t\n+\n \t\t\t\t\t// insert extra ring opening\n \t\t\t\t\tsmiles = smiles.substring(0, ringOpeningPos) + ringClosure(curIndex) + smiles.substring(ringOpeningPos);\n \n@@ -1901,11 +1997,11 @@ private String ringClosure(int ringClosure) {\n \t\telse{\n \t\t\ttext= text.substring(6, text.length()-1);//cut off spiro[ and terminal ]\n \t\t}\n-\t\t\n+\n \t\tString[] spiroDescriptorStrings = matchCommaOrDot.split(text);\n-\t\n+\n \t\tint[][] spiroDescriptors = new int[spiroDescriptorStrings.length][2]; // array of descriptors where number of elements and super string present\n-\t\n+\n \t\tfor (int i=0; i < spiroDescriptorStrings.length; i++) {\n \t\t\tString[] elements = matchNonDigit.split(spiroDescriptorStrings[i]);\n \t\t\tif (elements.length >1) {//a \"superscripted\" number is present\n@@ -1921,7 +2017,7 @@ private String ringClosure(int ringClosure) {\n \t\t\t\tspiroDescriptors[i][1] = -1;\n \t\t\t}\n \t\t}\n-\t\n+\n \t\treturn spiroDescriptors;\n \t}\n \n@@ -1931,7 +2027,7 @@ private String ringClosure(int ringClosure) {\n \t * @param smiles string to search in\n \t * @param locant locant of the atom in given structure\n \t * @return index of ring openings\n-\t * @throws ComponentGenerationException \n+\t * @throws ComponentGenerationException\n \t */\n \tprivate Integer findIndexOfRingOpenings(String smiles, int locant) throws ComponentGenerationException{\n \t\tint count = 0;\n@@ -2239,8 +2335,8 @@ private void processCyclisedChain(Element chainGroup, Element cycloEl) throws Co\n \t */\n \tprivate void handleGroupIrregularities(Element group) throws ComponentGenerationException {\n \t\tString groupValue =group.getValue();\n-\t\t\n-\t\tif (!n2sConfig.allowInterpretationOfAcidsWithoutTheWordAcid()) {\n+\n+\t\tif (!buildState.n2sConfig.allowInterpretationOfAcidsWithoutTheWordAcid()) {\n \t\t\tif (group.getAttribute(FUNCTIONALIDS_ATR) !=null && (groupValue.endsWith(\"ic\") || groupValue.endsWith(\"ous\"))){\n \t\t\t\tElement next = OpsinTools.getNext(group);\n \t\t\t\tif (next == null){\n@@ -2282,7 +2378,7 @@ else if(groupValue.equals(\"chromen\")) {//chromene in IUPAC nomenclature is fully\n \t\t}\n \t\telse if (groupValue.equals(\"methylene\") || groupValue.equals(\"methylen\")) {//e.g. 3,4-methylenedioxyphenyl\n \t\t\tElement nextSub = OpsinTools.getNextSibling(group.getParent());\n-\t\t\tif (nextSub !=null && nextSub.getName().equals(SUBSTITUENT_EL) && OpsinTools.getNextSibling(group)==null \n+\t\t\tif (nextSub !=null && nextSub.getName().equals(SUBSTITUENT_EL) && OpsinTools.getNextSibling(group)==null\n \t\t\t\t\t&& (OpsinTools.getPreviousSibling(group)==null || !OpsinTools.getPreviousSibling(group).getName().equals(MULTIPLIER_EL))){//not trimethylenedioxy\n \t\t\t\tList<Element> children = nextSub.getChildElements();\n \t\t\t\tif (children.size() >=2 && children.get(0).getValue().equals(\"di\")&& children.get(1).getValue().equals(\"oxy\")){\n@@ -2614,7 +2710,7 @@ else if (groupValue.equals(\"aldehydo\")){\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\telse if (groupValue.equals(\"bor\") || groupValue.equals(\"antimon\") \n+\t\telse if (groupValue.equals(\"bor\") || groupValue.equals(\"antimon\")\n \t\t\t\t|| groupValue.equals(\"arsen\") || groupValue.equals(\"phosphor\") || groupValue.equals(\"phosphate\") || groupValue.equals(\"phosphat\")\n \t\t\t\t|| groupValue.equals(\"silicicacid\") || groupValue.equals(\"silicic acid\")\n \t\t\t\t|| groupValue.equals(\"silicate\") || groupValue.equals(\"silicat\")){//fluoroboric acid/fluoroborate are trivial rather than systematic; tetra(fooyl)borate is inorganic\n@@ -2668,7 +2764,7 @@ else if (groupValue.startsWith(\"silicic\") || groupValue.startsWith(\"silicat\")) {\n \t\t\t\t\t}\n \t\t\t\t\telse if (firstChild.getName().equals(MULTIPLIER_EL)) {\n \t\t\t\t\t\tString multiplierVal = firstChild.getAttributeValue(VALUE_ATR);\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tif (groupValue.equals(\"bor\")){\n \t\t\t\t\t\t\tif (multiplierVal.equals(\"4\") || (multiplierVal.equals(\"3\") && OpsinTools.getPreviousSibling(substituent) != null)) {\n \t\t\t\t\t\t\t\t//tri case allows organotrifluoroborates\n@@ -2696,7 +2792,7 @@ else if (groupValue.startsWith(\"silic\") && multiplierVal.equals(\"6\")) {\n \t\t\t\t\tif (matched) {\n \t\t\t\t\t\tgroup.getAttribute(TYPE_ATR).setValue(SIMPLEGROUP_TYPE_VAL);\n \t\t\t\t\t\tgroup.getAttribute(SUBTYPE_ATR).setValue(SIMPLEGROUP_SUBTYPE_VAL);\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tAttribute usableAsJoiner = group.getAttribute(USABLEASJOINER_ATR);\n \t\t\t\t\t\tif (usableAsJoiner != null){\n \t\t\t\t\t\t\tgroup.removeAttribute(usableAsJoiner);\n@@ -2709,7 +2805,7 @@ else if (groupValue.startsWith(\"silic\") && multiplierVal.equals(\"6\")) {\n \t\t\t\t\t\tif (functionalIds != null){\n \t\t\t\t\t\t\tgroup.removeAttribute(functionalIds);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tif (suffix != null){\n \t\t\t\t\t\t\tsuffix.detach();\n \t\t\t\t\t\t}\n@@ -2823,7 +2919,7 @@ else if (ENDINIC_SUBTYPE_VAL.equals(groupSubType) && AMINOACID_TYPE_VAL.equals(g\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \tprivate void moveDetachableHetAtomRepl(Element bracket) throws ComponentGenerationException {\n \t\tint indexOfLastHeteroatom = -1;\n \t\tfor (int i = bracket.getChildCount() - 1; i >= 0; i--) {\n@@ -2843,7 +2939,7 @@ private void moveDetachableHetAtomRepl(Element bracket) throws ComponentGenerati\n \t\t\t\t}\n \t\t\t\tnextSubOrRootOrBracket = OpsinTools.getNextSibling(nextSubOrRootOrBracket);\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif (rightMostGroup == null) {\n \t\t\t\tthrow new ComponentGenerationException(\"Unable to find group for: \" + bracket.getChild(0).getValue() +\" to apply to!\");\n \t\t\t}"
  },
  {
    "sha": "355afe7deb286da1de95f97b5f397f8e1373edc2",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessor.java",
    "status": "modified",
    "additions": 28,
    "deletions": 21,
    "changes": 49,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessor.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessor.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessor.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -1303,8 +1303,9 @@ boolean applyDlStereochemistryToAminoAcid(Element aminoAcidEl, String dlStereoch\n \t\t\treturn false;\r\n \t\t}\r\n \t\tif (dlStereochemistryValue.equals(\"dl\")){\r\n+\t\t\tint grpnum = ++state.numRacGrps;\r\n \t\t\tfor (Atom atom : atomsWithParities) {\r\n-\t\t\t\tatom.setAtomParity(null);\r\n+\t\t\t\tatom.getAtomParity().setStereoGroup(StereoGroup.Rac, grpnum);\r\n \t\t\t}\r\n \t\t}\r\n \t\telse{\r\n@@ -1341,29 +1342,35 @@ void applyDlStereochemistryToCarbohydrate(Element carbohydrateEl, String dlStere\n \t\tif (atomsWithParities.isEmpty()){\r\n \t\t\tthrow new ComponentGenerationException(\"D/L stereochemistry :\" + dlStereochemistryValue + \" found before achiral carbohydrate\");//sounds like a vocab bug...\r\n \t\t}\r\n-\t\t\r\n+\r\n+\t\tStereoGroup grp;\r\n+\t\tint grpnum = 0;\r\n+\t\tboolean invert;\r\n \t\tif (dlStereochemistryValue.equals(\"dl\")){\r\n+\t\t\tinvert = false;\r\n+\t\t\tgrp = StereoGroup.Rac;\r\n+\t\t\tgrpnum = ++state.numRacGrps;\r\n+\t\t} else if (dlStereochemistryValue.equals(\"d\") || dlStereochemistryValue.equals(\"dg\")){\r\n+\t\t\tinvert = false;\r\n+\t\t\tgrp = StereoGroup.Abs;\r\n+\t\t} else if (dlStereochemistryValue.equals(\"l\") || dlStereochemistryValue.equals(\"lg\")){\r\n+\t\t\tinvert = true;\r\n+\t\t\tgrp = StereoGroup.Abs;\r\n+\t\t} else{\r\n+\t\t\tthrow new ComponentGenerationException(\"Unexpected value for D/L stereochemistry found before carbohydrate: \" + dlStereochemistryValue );\r\n+\t\t}\r\n+\t\tif (\"yes\".equals(carbohydrateEl.getAttributeValue(NATURALENTISOPPOSITE_ATR))){\r\n+\t\t\tinvert = !invert;\r\n+\t\t}\r\n+\r\n+\t\tif (invert) {\r\n \t\t\tfor (Atom atom : atomsWithParities) {\r\n-\t\t\t\tatom.setAtomParity(null);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\telse{\r\n-\t\t\tboolean invert;\r\n-\t\t\tif (dlStereochemistryValue.equals(\"d\") || dlStereochemistryValue.equals(\"dg\")){\r\n-\t\t\t\tinvert = false;\r\n-\t\t\t} else if (dlStereochemistryValue.equals(\"l\") || dlStereochemistryValue.equals(\"lg\")){\r\n-\t\t\t\tinvert = true;\r\n-\t\t\t} else{\r\n-\t\t\t\tthrow new ComponentGenerationException(\"Unexpected value for D/L stereochemistry found before carbohydrate: \" + dlStereochemistryValue );\r\n+\t\t\t\tatom.getAtomParity().setParity(-atom.getAtomParity().getParity());\r\n+\t\t\t\tatom.getAtomParity().setStereoGroup(grp, grpnum);\r\n \t\t\t}\r\n-\t\t\tif (\"yes\".equals(carbohydrateEl.getAttributeValue(NATURALENTISOPPOSITE_ATR))){\r\n-\t\t\t\tinvert = !invert;\r\n-\t\t\t}\r\n-\r\n-\t\t\tif (invert) {\r\n-\t\t\t\tfor (Atom atom : atomsWithParities) {\r\n-\t\t\t\t\tatom.getAtomParity().setParity(-atom.getAtomParity().getParity());\r\n-\t\t\t\t}\r\n+\t\t} else if (grp != StereoGroup.Abs) {\r\n+\t\t\tfor (Atom atom : atomsWithParities) {\r\n+\t\t\t\tatom.getAtomParity().setStereoGroup(grp, grpnum);\r\n \t\t\t}\r\n \t\t}\r\n \t}\r"
  },
  {
    "sha": "ff8e98dc33aadc37dac469681548ea07b6a7264a",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/NameToStructure.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/NameToStructure.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/NameToStructure.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/NameToStructure.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -179,12 +179,12 @@ public OpsinResult parseChemicalName(String name, NameToStructureConfig n2sConfi\n \t\t\t\t\tLOG.debug(parse.toXML());\n \t\t\t\t}\n \t\t\t\t//Performs XML manipulation e.g. nesting bracketing, processing some nomenclatures\n-\t\t\t\tnew ComponentGenerator(n2sConfig).processParse(parse);\n+\t\t\t\tBuildState state = new BuildState(n2sConfig);\n+\t\t\t\tnew ComponentGenerator(state).processParse(parse);\n \t\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\t\tLOG.debug(parse.toXML());\n \t\t\t\t}\n-\t\t\t\tBuildState state = new BuildState(n2sConfig);\n-\t\t\t\t//Converts the XML to fragments (handles many different nomenclatueres for describing structure). Assigns locants \n+\t\t\t\t//Converts the XML to fragments (handles many different nomenclatueres for describing structure). Assigns locants\n \t\t\t\tnew ComponentProcessor(state, new SuffixApplier(state, suffixRules)).processParse(parse);\n \t\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\t\tLOG.debug(parse.toXML());"
  },
  {
    "sha": "ed3676868a686eacb87557539048b50a383570dd",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/OpsinResult.java",
    "status": "modified",
    "additions": 25,
    "deletions": 2,
    "changes": 27,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/OpsinResult.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/OpsinResult.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/OpsinResult.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -141,16 +141,39 @@ public String getPrettyPrintedCml() {\n \t * @return SMILES as a String\r\n \t */\r\n \tpublic String getSmiles() {\r\n+\t\treturn getSmiles(SmilesOptions.DEFAULT);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Generates the SMILES corresponding to the molecule described by the name\r\n+\t * If name generation failed i.e. the OPSIN_RESULT_STATUS is FAILURE then null is returned.\r\n+\t * <br>\r\n+\t * The <code>options</code> parameter is used to control the output by a set of binary flags. This is\r\n+\t * primarily used to control the output layers in ChemAxon Extended SMILES (CXSMILES).\r\n+\t * <pre>\r\n+\t * // only the include the enhanced stereo layers\r\n+\t * result.getSmiles(SmilesOptions.CXSMILES_ENHANCED_STEREO);\r\n+\t * // only the include the enhanced stereo and polymer layers\r\n+\t * result.getSmiles(SmilesOptions.CXSMILES_ENHANCED_STEREO +\r\n+\t *                  SmilesOptions.CXSMILES_POLYMERS);\r\n+\t * </pre>\r\n+\t *\r\n+\t * @param options binary flags of {@link SmilesOptions} (default: {@link SmilesOptions#DEFAULT}))\r\n+\t * @return SMILES as a String\r\n+\t * @see SmilesOptions\r\n+\t */\r\n+\tpublic String getSmiles(int options) {\r\n \t\tif (structure != null){\r\n \t\t\ttry{\r\n-\t\t\t\treturn SMILESWriter.generateSmiles(structure);\r\n+\t\t\t\treturn SMILESWriter.generateSmiles(structure, options);\r\n \t\t\t}\r\n \t\t\tcatch (Exception e) {\r\n \t\t\t\tLOG.debug(\"SMILES generation failed\", e);\r\n \t\t\t}\r\n \t\t}\r\n \t\treturn null;\r\n \t}\r\n+\r\n \t\r\n \t/**\r\n \t * Experimental function that generates the extended SMILES corresponding to the molecule described by the name\r\n@@ -161,7 +184,7 @@ public String getSmiles() {\n \tpublic String getExtendedSmiles() {\r\n \t\tif (structure != null){\r\n \t\t\ttry{\r\n-\t\t\t\treturn SMILESWriter.generateExtendedSmiles(structure);\r\n+\t\t\t\treturn SMILESWriter.generateSmiles(structure, SmilesOptions.CXSMILES);\r\n \t\t\t}\r\n \t\t\tcatch (Exception e) {\r\n \t\t\t\tLOG.debug(\"Extended SMILES generation failed\", e);\r"
  },
  {
    "sha": "989be0a5181933874a7459dac1d7e64f28510dc4",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SMILESWriter.java",
    "status": "modified",
    "additions": 74,
    "deletions": 25,
    "changes": 99,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SMILESWriter.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SMILESWriter.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SMILESWriter.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -1,8 +1,11 @@\n package uk.ac.cam.ch.wwmm.opsin;\r\n \r\n+import java.util.AbstractMap;\r\n import java.util.ArrayDeque;\r\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n+import java.util.Collections;\r\n+import java.util.Comparator;\r\n import java.util.Deque;\r\n import java.util.EnumMap;\r\n import java.util.HashMap;\r\n@@ -12,7 +15,6 @@\n import java.util.Locale;\r\n import java.util.Map;\r\n import java.util.Set;\r\n-import java.util.TreeMap;\r\n \r\n import uk.ac.cam.ch.wwmm.opsin.Bond.SMILES_BOND_DIRECTION;\r\n import uk.ac.cam.ch.wwmm.opsin.BondStereo.BondStereoValue;\r\n@@ -47,7 +49,7 @@\n \tprivate final StringBuilder smilesBuilder = new StringBuilder();\r\n \r\n \t/**Should extended SMILES be output*/\r\n-\tprivate final boolean outputExtendedSmiles;\r\n+\tprivate int defaultOptions;\r\n \r\n \t/**The order atoms were traversed when creating the SMILES*/\r\n \tprivate List<Atom> smilesOutputOrder;\r\n@@ -82,7 +84,20 @@\n \t */\r\n \tprivate SMILESWriter(Fragment structure, boolean outputExtendedSmiles) {\r\n \t\tthis.structure = structure;\r\n-\t\tthis.outputExtendedSmiles = outputExtendedSmiles;\r\n+\t\tthis.defaultOptions = SmilesOptions.CXSMILES;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Generates SMILES for the given fragment\r\n+\t * The following assumptions are currently made:\r\n+\t * \tThe fragment contains no bonds to atoms outside the fragment\r\n+\t * \tHydrogens are all explicit\r\n+\t * \tSpare valency has been converted to double bonds\r\n+\t * @param options the set of {@link SmilesOptions} to use\r\n+\t * @return SMILES String\r\n+\t */\r\n+\tstatic String generateSmiles(Fragment structure, int options) {\r\n+\t\treturn new SMILESWriter(structure, false).writeSmiles(options);\r\n \t}\r\n \r\n \t/**\r\n@@ -94,7 +109,7 @@ private SMILESWriter(Fragment structure, boolean outputExtendedSmiles) {\n \t * @return SMILES String\r\n \t */\r\n \tstatic String generateSmiles(Fragment structure) {\r\n-\t\treturn new SMILESWriter(structure, false).writeSmiles();\r\n+\t\treturn new SMILESWriter(structure, false).writeSmiles(SmilesOptions.DEFAULT);\r\n \t}\r\n \r\n \t/**\r\n@@ -110,6 +125,10 @@ static String generateExtendedSmiles(Fragment structure) {\n \t}\r\n \r\n \tString writeSmiles() {\r\n+\t\treturn writeSmiles(this.defaultOptions);\r\n+\t}\r\n+\r\n+\tString writeSmiles(int options) {\r\n \t\tassignSmilesOrder();\r\n \t\tassignDoubleBondStereochemistrySlashes();\r\n \r\n@@ -128,21 +147,21 @@ String writeSmiles() {\n \t\t\t}\r\n \t\t}\r\n \r\n-\t\tif (outputExtendedSmiles) {\r\n-\t\t\twriteExtendedSmilesLayer();\r\n+\t\tif ((options & SmilesOptions.CXSMILES) != 0) {\r\n+\t\t\twriteExtendedSmilesLayer(options);\r\n \t\t}\r\n \r\n \t\treturn smilesBuilder.toString();\r\n \t}\r\n \r\n-\tprivate void writeExtendedSmilesLayer() {\r\n+\tprivate void writeExtendedSmilesLayer(int options) {\r\n \t\tList<String> atomLabels = new ArrayList<String>();\r\n \t\tList<String> atomLocants = new ArrayList<String>();\r\n \t\tList<String> positionVariationBonds = new ArrayList<String>();\r\n \t\tInteger lastLabel = null;\r\n \t\tInteger lastLocant = null;\r\n \t\tint attachmentPointCounter = 1;\r\n-\t\tMap<StereoGroup,List<Integer>> enhancedStereo = null;\r\n+\t\tMap<Map.Entry<StereoGroup,Integer>,List<Integer>> enhancedStereo = null;\r\n \t\tSet<Integer> seenAttachmentpoints = new HashSet<Integer>();\r\n \t\tList<Atom> polymerAttachPoints = structure.getPolymerAttachmentPoints();\r\n \t\tboolean isPolymer = polymerAttachPoints != null && polymerAttachPoints.size() > 0;\r\n@@ -209,26 +228,30 @@ else if (a.getElement() == ChemEl.R){\n \r\n \t\t\tif (a.getStereoGroup() != StereoGroup.Unk) {\r\n \t\t\t\tif (enhancedStereo == null)\r\n-\t\t\t\t\tenhancedStereo = new TreeMap<>();\r\n-\t\t\t\tList<Integer> grps = enhancedStereo.get(a.getStereoGroup());\r\n-\t\t\t\tif (grps == null)\r\n-\t\t\t\t\tenhancedStereo.put(a.getStereoGroup(), grps = new ArrayList<>());\r\n+\t\t\t\t\tenhancedStereo = new HashMap<>();\r\n+\t\t\t\tAbstractMap.SimpleImmutableEntry<StereoGroup, Integer> k\r\n+\t\t\t\t\t\t= new AbstractMap.SimpleImmutableEntry<>(a.getStereoGroup(),\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t a.getAtomParity().getStereoGroupNum());\r\n+\t\t\t\tList<Integer> grps = enhancedStereo.get(k);\r\n+\t\t\t\tif (grps == null) {\r\n+\t\t\t\t\tenhancedStereo.put(k, grps = new ArrayList<>());\r\n+\t\t\t\t}\r\n \t\t\t\tgrps.add(smilesOutputOrder.indexOf(a));\r\n \t\t\t}\r\n \t\t}\r\n \t\tList<String> extendedSmiles = new ArrayList<String>(2);\r\n-\t\tif (lastLabel != null) {\r\n+\t\tif (lastLabel != null && (options & SmilesOptions.CXSMILES_ATOM_LABELS) != 0) {\r\n \t\t\textendedSmiles.add(\"$\" + StringTools.stringListToString(atomLabels.subList(0, lastLabel + 1), \";\") + \"$\" );\r\n \t\t}\r\n-\t\tif (lastLocant != null) {\r\n+\t\tif (lastLocant != null && (options & SmilesOptions.CXSMILES_ATOM_VALUES) != 0) {\r\n \t\t\textendedSmiles.add(\"$_AV:\" + StringTools.stringListToString(atomLocants.subList(0, lastLocant + 1), \";\") + \"$\" );\r\n \t\t}\r\n-\t\tif (enhancedStereo != null) {\r\n+\t\tif (enhancedStereo != null && (options & SmilesOptions.CXSMILES_ENHANCED_STEREO) != 0) {\r\n \t\t\tif (enhancedStereo.size() == 1) {\r\n-\t\t\t\tif (enhancedStereo.get(StereoGroup.Rac) != null) {\r\n+\t\t\t\tif (enhancedStereo.get(new AbstractMap.SimpleImmutableEntry<>(StereoGroup.Rac, 1)) != null) {\r\n \t\t\t\t\textendedSmiles.add(\"r\");\r\n-\t\t\t\t} else if (enhancedStereo.get(StereoGroup.Rel) != null) {\r\n-\t\t\t\t\tList<Integer> idxs = enhancedStereo.get(StereoGroup.Rel);\r\n+\t\t\t\t} else if (enhancedStereo.get(new AbstractMap.SimpleImmutableEntry<>(StereoGroup.Rel, 1)) != null) {\r\n+\t\t\t\t\tList<Integer> idxs = enhancedStereo.get(new AbstractMap.SimpleImmutableEntry<>(StereoGroup.Rel, 1));\r\n \t\t\t\t\tStringBuilder sb   = new StringBuilder();\r\n \t\t\t\t\tsb.append(\"o1:\");\r\n \t\t\t\t\tsb.append(idxs.get(0));\r\n@@ -240,17 +263,41 @@ else if (a.getElement() == ChemEl.R){\n \t\t\t\t// all stereochemistry is absolute\r\n \t\t\t} else {\r\n \t\t\t\tStringBuilder sb = new StringBuilder();\r\n-\t\t\t\tfor (Map.Entry<StereoGroup, List<Integer>> e : enhancedStereo.entrySet()) {\r\n+\t\t\t\tint numRac = 1, numRel = 1; // renumber\r\n+\t\t\t\tList<Map.Entry<Map.Entry<StereoGroup,Integer>, List<Integer>>> entires\r\n+\t\t\t\t\t\t= new ArrayList<>(enhancedStereo.entrySet());\r\n+\t\t\t\t// ensure consistent output order\r\n+\t\t\t\tCollections.sort(entires,\r\n+\t\t\t\t\t\tnew Comparator<Map.Entry<Map.Entry<StereoGroup, Integer>, List<Integer>>>() {\r\n+\t\t\t\t\t\t\t@Override\r\n+\t\t\t\t\t\t\tpublic int compare(Map.Entry<Map.Entry<StereoGroup, Integer>, List<Integer>> a,\r\n+\t\t\t\t\t\t\t\t\t\t\t   Map.Entry<Map.Entry<StereoGroup, Integer>, List<Integer>> b) {\r\n+\t\t\t\t\t\t\t\tint cmp = a.getKey().getKey().compareTo(b.getKey().getKey());\r\n+\t\t\t\t\t\t\t\tif (cmp != 0)\r\n+\t\t\t\t\t\t\t\t\treturn cmp;\r\n+\t\t\t\t\t\t\t\tCollections.sort(a.getValue());\r\n+\t\t\t\t\t\t\t\tCollections.sort(b.getValue());\r\n+\t\t\t\t\t\t\t\tint len = Math.min(a.getValue().size(), b.getValue().size());\r\n+\t\t\t\t\t\t\t\tfor (int i = 0; i < len; i++) {\r\n+\t\t\t\t\t\t\t\t\tcmp = a.getValue().get(i).compareTo(b.getValue().get(i));\r\n+\t\t\t\t\t\t\t\t\tif (cmp != 0)\r\n+\t\t\t\t\t\t\t\t\t\treturn cmp;\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\treturn Integer.compare(a.getValue().size(), b.getValue().size());\r\n+\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t});\r\n+\t\t\t\tfor (Map.Entry<Map.Entry<StereoGroup,Integer>, List<Integer>> e : entires) {\r\n \t\t\t\t\tsb.setLength(0);\r\n-\t\t\t\t\tswitch (e.getKey()) {\r\n+\t\t\t\t\tMap.Entry<StereoGroup, Integer> key = e.getKey();\r\n+\t\t\t\t\tswitch (key.getKey()) {\r\n \t\t\t\t\t\tcase Abs:\r\n \t\t\t\t\t\t\tsb.append(\"a:\");\r\n \t\t\t\t\t\t\tbreak;\r\n \t\t\t\t\t\tcase Rel:\r\n-\t\t\t\t\t\t\tsb.append(\"o1:\");\r\n+\t\t\t\t\t\t\tsb.append(\"o\").append(numRac++).append(\":\");\r\n \t\t\t\t\t\t\tbreak;\r\n \t\t\t\t\t\tcase Rac:\r\n-\t\t\t\t\t\t\tsb.append(\"&1:\");\r\n+\t\t\t\t\t\t\tsb.append(\"&\").append(numRel++).append(\":\");\r\n \t\t\t\t\t\t\tbreak;\r\n \t\t\t\t\t\tcase Unk:\r\n \t\t\t\t\t\t\tcontinue;\r\n@@ -266,7 +313,7 @@ else if (a.getElement() == ChemEl.R){\n \t\tif (positionVariationBonds.size() > 0) {\r\n \t\t\textendedSmiles.add(\"m:\" + StringTools.stringListToString(positionVariationBonds, \",\"));\r\n \t\t}\r\n-\t\tif (isPolymer) {\r\n+\t\tif (isPolymer && (options & SmilesOptions.CXSMILES_POLYMERS) != 0) {\r\n \t\t\tStringBuilder sruContents = new StringBuilder();\r\n \t\t\tsruContents.append(\"Sg:n:\");\r\n \t\t\tboolean appendDelimiter = false;\r\n@@ -652,7 +699,8 @@ private String atomToSmiles(Atom atom, int depth, Bond bondtaken) {\n \t\t\t}\r\n \t\t}\r\n \t\tif (atom.getAtomParity() != null){\r\n-\t\t\tif (atom.getStereoGroup() != StereoGroup.Rac || outputExtendedSmiles)\r\n+\t\t\tif (atom.getStereoGroup() != StereoGroup.Rac ||\r\n+\t\t\t\t\t(defaultOptions & SmilesOptions.CXSMILES_ENHANCED_STEREO) != 0)\r\n \t\t\t\tatomSmiles.append(atomParityToSmiles(atom, depth, bondtaken));\r\n \t\t}\r\n \t\tif (hydrogenCount != 0 && needsSquareBrackets && chemEl != ChemEl.H){\r\n@@ -710,7 +758,8 @@ private boolean determineWhetherAtomNeedsSquareBrackets(Atom atom, int hydrogenC\n \t\t\treturn true;\r\n \t\t}\r\n \t\tif (atom.getAtomParity() != null &&\r\n-\t\t\t\t(atom.getStereoGroup() != StereoGroup.Rac || outputExtendedSmiles)) {\r\n+\t\t\t\t(atom.getStereoGroup() != StereoGroup.Rac ||\r\n+\t\t\t\t\t\t(defaultOptions & SmilesOptions.CXSMILES_ENHANCED_STEREO) != 0)) {\r\n \t\t\treturn true;\r\n \t\t}\r\n \r"
  },
  {
    "sha": "c8a22a9f46cf72b6da55c22a14c31c7d593e80b4",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SmilesOptions.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SmilesOptions.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SmilesOptions.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/SmilesOptions.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -0,0 +1,38 @@\n+package uk.ac.cam.ch.wwmm.opsin;\n+\n+/**\n+ * Options to control SMILES generation.\n+ * These options can be provided to the {@link OpsinResult#getSmiles(int)} method to control what is included in\n+ * the generated SMILES. The main use here is to control generation of ChemAxon Extended SMILES (CXSMILES) that supports\n+ * features beyond plain SMILES.\n+ * @see <a href=\"https://docs.chemaxon.com/display/docs/chemaxon-extended-smiles-and-smarts-cxsmiles-and-cxsmarts.md\">ChemAxon Extended SMILES and SMARTS - CXSMILES and CXSMARTS</a>\n+ */\n+public interface SmilesOptions {\n+\t/**\n+\t * Default SMILES generation, as Daylight intended.\n+\t */\n+\tint DEFAULT                  = 0x0;\n+\t/**\n+\t * Include atom labels in CXSMILES.\n+\t */\n+\tint CXSMILES_ATOM_LABELS     = 0x1;\n+\t/**\n+\t * Include atom values in CXSMILES - these are the locant values.\n+\t */\n+\tint CXSMILES_ATOM_VALUES     = 0x2;\n+\t/**\n+\t * Include repeat brackets in the CXSMILES layers for polymers.\n+\t */\n+\tint CXSMILES_POLYMERS        = 0x4;\n+\t/**\n+\t * Include racemic, relative, and absolute enhanced stereochemistry in the CXSMILES layers.\n+\t */\n+\tint CXSMILES_ENHANCED_STEREO = 0x8;\n+\t/**\n+\t * Include all CXSMILES layers that are relevant. This option is equivalent to turning on all CXSMILES features.s\n+\t */\n+\tint CXSMILES                 = CXSMILES_ATOM_LABELS +\n+\t\t\t                       CXSMILES_ATOM_VALUES +\n+\t\t\t                       CXSMILES_POLYMERS +\n+\t\t\t                       CXSMILES_ATOM_VALUES;\n+}"
  },
  {
    "sha": "4aa627ea9400fb46521be796bde8e73c79515886",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryHandler.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryHandler.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryHandler.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryHandler.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -1019,8 +1019,10 @@ else if (el == ChemEl.O || el ==ChemEl.N) {\n \t\t\t\t\t} else if (dOrL.equals(\"d\") || dOrL.equals(\"ds\")) {\r\n \t\t\t\t\t\tpotentialStereoAtom.setAtomParity(atomRefs4, 1);\r\n \t\t\t\t\t} else if (dOrL.equals(\"dl\")) {\r\n-\t\t\t\t\t\t//racemic\r\n-\t\t\t\t\t\tpotentialStereoAtom.setAtomParity(null);\r\n+\t\t\t\t\t\tpotentialStereoAtom.setAtomParity(atomRefs4, 1);\r\n+\t\t\t\t\t\tpotentialStereoAtom.getAtomParity()\r\n+\t\t\t\t\t\t\t\t.setStereoGroup(StereoGroup.Rac,\r\n+\t\t\t\t\t\t\t\t                ++state.numRacGrps);\r\n \t\t\t\t\t} else{\r\n \t\t\t\t\t\tthrow new RuntimeException(\"OPSIN bug: Unexpected value for D/L stereochemistry found: \" + dOrL );\r\n \t\t\t\t\t}\r"
  },
  {
    "sha": "cec2f6116614851876cad4e2d4b76a00f368d2b5",
    "filename": "opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StringTools.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StringTools.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StringTools.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/java/uk/ac/cam/ch/wwmm/opsin/StringTools.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -357,6 +357,10 @@ static int countTerminalPrimes(String locantText){\n \tstatic boolean startsWithCaseInsensitive(String str, String prefix) {\n \t\treturn str.regionMatches(true, 0, prefix, 0, prefix.length());\n \t}\n+\n+  static boolean startsWithCaseInsensitive(String str, int i, String prefix) {\n+    return str.regionMatches(true, i, prefix, 0, prefix.length());\n+  }\n \t\n \t/**\n \t * Tests if this string ends with the specified suffix ignoring case."
  },
  {
    "sha": "d395fd3d6ca7e57438613ae2dd791e640354e92e",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/miscTokens.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/miscTokens.xml",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/miscTokens.xml",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/miscTokens.xml?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -36,6 +36,10 @@\n \t<tokenList tagname=\"stereoChemistry\" type=\"RorS\" symbol=\"ā\">\n \t\t<token value=\"R\">r</token>\n \t\t<!--s has locant ambiguity-->\n+\t\t<token value=\"R\" stereoGroup=\"Rel\">r or s</token>\n+\t\t<token value=\"S\" stereoGroup=\"Rel\">s or r</token>\n+\t\t<token value=\"R\" stereoGroup=\"Rac\">r and s</token>\n+\t\t<token value=\"S\" stereoGroup=\"Rac\">s and r</token>\n \t</tokenList>\n \n \t<tokenList tagname=\"ine\" symbol=\"«\"><!--used for amino acids-->"
  },
  {
    "sha": "3ccaada753886974458d9f24dbba3028cfd2b4b5",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/regexTokens.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/regexTokens.xml",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/regexTokens.xml",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/regexTokens.xml?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -70,9 +70,9 @@\n \t<regex name=\"%relativeOrientationStereochemTerm%\" regex=\"((%locant%-?)?([eE][xX][oO]|[eE][nN][dD][oO]|[sS][yY][nN]|[aA][nN][tT][iI]))\"/>\n \t<regex name=\"%axialStereoTerm%\" regex=\"(M|P|Ra|Sa|Sp|Rp)\"/>\n \t<regex name=\"%cisTransOptionallyLocanted%\" regex=\"((%locantTypes%-?)?([cC][iI][sS]|[tT][rR][aA][nN][sS]))\"/>\n-\t<regex name=\"%stereochemPossibilities%\" regex=\"(%locantTypes%?([EZez]|EZ|ez|[RSrs](\\^?\\*)?|RS|RorS|SorR|RandS|SandR|R/S|rs|r/s|SR)|%cisTransOptionallyLocanted%|%alphaBetaLocant%|%relativeOrientationStereochemTerm%|%axialStereoTerm%)\"/>\n+\t<regex name=\"%stereochemPossibilities%\" regex=\"(%locantTypes%?([EZez]|EZ|ez|[RSrs](\\^?\\*)?|RS|RorS|SorR|RandS|SandR|EorZ|ZorE|EandZ|ZandE|R/S|rs|r/s|SR)|%cisTransOptionallyLocanted%|%alphaBetaLocant%|%relativeOrientationStereochemTerm%|%axialStereoTerm%)\"/>\n \t<regex name=\"%relativeOrRacemic%\" regex=\"([rR][eE][lL]|[rR][aA][cC](\\.|[eE][mM](\\.|[iI][cC])?)?)\"/>\n-\t<regexToken regex=\"(%relativeOrRacemic%-)?%openBracket%%stereochemPossibilities%([,-]%stereochemPossibilities%)*%closeBracket%-?|%openBracket%%relativeOrRacemic%%closeBracket%-?|%relativeOrRacemic%-\" symbol=\"E\" type=\"stereochemistryBracket\" tagname=\"stereoChemistry\" determinise=\"yes\" />\n+\t<regexToken regex=\"(%relativeOrRacemic%-)?%openBracket%(%stereochemPossibilities%([,-]%stereochemPossibilities%)*%closeBracket%-?(And|and|AND|Or|OR|or)%openBracket%)?%stereochemPossibilities%([,-]%stereochemPossibilities%)*%closeBracket%-?|%openBracket%%relativeOrRacemic%%closeBracket%-?|%relativeOrRacemic%-\" symbol=\"E\" type=\"stereochemistryBracket\" tagname=\"stereoChemistry\" determinise=\"yes\" />\n \t<regexToken regex=\"([rct]-%allLocantForms%,)*[rct]-(%allLocantForms%-|%formsWhereHyphenIsOptional%)\" symbol=\"Ê\" type=\"relativeCisTrans\" tagname=\"stereoChemistry\" determinise=\"yes\" /><!--relative/cis/trans descriptor-->\n \t<regexToken regex=\"%locant%,%locant%:%locant%,%locant%-?[dD][iI][sS][pP][iI][rR][oO][tT][eE][rR]-?\" symbol=\"Å\" tagname=\"polyCyclicSpiro\" determinise=\"yes\" value=\"dispiroter\"/>\n \t<regexToken regex=\"%locant%(%openBracket%%indicatedHydrogen%%closeBracket%)?,%locant%(%openBracket%%indicatedHydrogen%%closeBracket%)?-?\" symbol=\"É\" tagname=\"spiroLocant\" determinise=\"yes\"/>"
  },
  {
    "sha": "4693b54d96c31961684ad17824d0e74c2b8e5894",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69RegexHash.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69RegexHash.txt",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69RegexHash.txt",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69RegexHash.txt?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -1 +1 @@\n-1687869079\n\\ No newline at end of file\n+681652249\n\\ No newline at end of file"
  },
  {
    "sha": "9a7d5ac2ef424742c576632528365bc84a61813e",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69SerialisedAutomaton.aut",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69SerialisedAutomaton.aut",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69SerialisedAutomaton.aut",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69SerialisedAutomaton.aut?ref=2b804a47a89040da9e81f8a68f20810a82ed7526"
  },
  {
    "sha": "4693b54d96c31961684ad17824d0e74c2b8e5894",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_RegexHash.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_RegexHash.txt",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_RegexHash.txt",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_RegexHash.txt?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -1 +1 @@\n-1687869079\n\\ No newline at end of file\n+681652249\n\\ No newline at end of file"
  },
  {
    "sha": "853b9c91e6f7f11989370b078bd5d018a364ae8f",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_SerialisedAutomaton.aut",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_SerialisedAutomaton.aut",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_SerialisedAutomaton.aut",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/serialisedAutomata/stereoChemistry_69_reversed_SerialisedAutomaton.aut?ref=2b804a47a89040da9e81f8a68f20810a82ed7526"
  },
  {
    "sha": "ebf8c39da6a96ba9f97df2def7a92a50504b7489",
    "filename": "opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/tokenLists.dtd",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/tokenLists.dtd",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/tokenLists.dtd",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/main/resources/uk/ac/cam/ch/wwmm/opsin/resources/tokenLists.dtd?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -37,6 +37,7 @@ ignoreWhenWritingXML == Tells the parser not to form an XML element out of these\n         suffixAppliesTo CDATA #IMPLIED\n         suffixAppliesToByDefault CDATA #IMPLIED\n         usableAsAJoiner CDATA #IMPLIED\n+        stereoGroup CDATA #IMPLIED\n >\n <!--\n   (the #PCDATA inside the tag) = the string to match"
  },
  {
    "sha": "201088494976a1448f3a6a65d4456287a9698366",
    "filename": "opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_MiscTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_MiscTest.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_MiscTest.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_MiscTest.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -51,7 +51,7 @@ public void testNumericallyMultipliedSaltComponent() throws ComponentGenerationE\n \t}\r\n \r\n \tprivate void processComponents(Element parse) throws ComponentGenerationException {\r\n-\t\tnew ComponentGenerator(new NameToStructureConfig()).processParse(parse);\r\n+\t\tnew ComponentGenerator(new BuildState(new NameToStructureConfig())).processParse(parse);\r\n \t}\r\n \t\r\n }\r"
  },
  {
    "sha": "03599de5671e55d691d370c237544c5018efe981",
    "filename": "opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_StereochemistryTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_StereochemistryTest.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_StereochemistryTest.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentGeneration_StereochemistryTest.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -1134,6 +1134,6 @@ public void testRacemateEz4_unbracketted() throws ComponentGenerationException {\n \t}\r\n \t\r\n \tprivate void processStereochemistry(Element subOrRoot) throws ComponentGenerationException {\r\n-\t\tnew ComponentGenerator(new NameToStructureConfig()).processStereochemistry(subOrRoot);\r\n+\t\tnew ComponentGenerator(new BuildState(new NameToStructureConfig())).processStereochemistry(subOrRoot);\r\n \t}\r\n }\r"
  },
  {
    "sha": "d2e7dab841666125c7ecc136d8b538405b74033b",
    "filename": "opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessorTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessorTest.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessorTest.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/ComponentProcessorTest.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -150,8 +150,9 @@ public void testDLStereochemistryDLOnAminoAcid() throws ComponentGenerationExcep\n \t\tElement aminoAcidEl = new TokenEl(GROUP_EL);\r\n \t\taminoAcidEl.setFrag(f);\r\n \t\tComponentProcessor processor = new ComponentProcessor(state, mock(SuffixApplier.class));\r\n-\t\tassertEquals(true, processor.applyDlStereochemistryToAminoAcid(aminoAcidEl, \"dl\"));\r\n-\t\tassertEquals(null, f.getAtomByID(2).getAtomParity());\r\n+\t\tassertTrue(processor.applyDlStereochemistryToAminoAcid(aminoAcidEl, \"dl\"));\r\n+\t\tassertNotNull(f.getAtomByID(2).getAtomParity());\r\n+\t\tassertEquals(StereoGroup.Rac, f.getAtomByID(2).getAtomParity().getStereoGroup());\r\n \t}\r\n \t\r\n \t@Test\r"
  },
  {
    "sha": "985c6c0bcda364f0c66f92680102c25a66a82d18",
    "filename": "opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryTest.java",
    "status": "modified",
    "additions": 99,
    "deletions": 14,
    "changes": 113,
    "blob_url": "https://github.com/dan2097/opsin/blob/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryTest.java",
    "raw_url": "https://github.com/dan2097/opsin/raw/2b804a47a89040da9e81f8a68f20810a82ed7526/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryTest.java",
    "contents_url": "https://api.github.com/repos/dan2097/opsin/contents/opsin-core/src/test/java/uk/ac/cam/ch/wwmm/opsin/StereochemistryTest.java?ref=2b804a47a89040da9e81f8a68f20810a82ed7526",
    "patch": "@@ -4,12 +4,17 @@\n import static org.mockito.Mockito.mock;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.AbstractMap;\r\n+import java.util.Iterator;\r\n \r\n+import org.hamcrest.CoreMatchers;\r\n+import org.hamcrest.MatcherAssert;\r\n import org.junit.AfterClass;\r\n import org.junit.Before;\r\n import org.junit.BeforeClass;\r\n-import org.junit.Ignore;\r\n import org.junit.Test;\r\n \r\n import uk.ac.cam.ch.wwmm.opsin.BondStereo.BondStereoValue;\r\n@@ -233,9 +238,9 @@ public void applyStereochemistryLocantedRS() throws StructureBuildingException {\n \t */\r\n \tvoid assertEnhancedStereo(String name, int nRacExp, int nRelExp, int nAbsExp) {\r\n \t\tFragment f = n2s.parseChemicalName(name).getStructure();\r\n-\t\tint      nRacAtoms = 0;\r\n-\t\tint      nRelAtoms = 0;\r\n-\t\tint      nAbsAtoms = 0;\r\n+\t\tint nRacAtoms = 0;\r\n+\t\tint nRelAtoms = 0;\r\n+\t\tint nAbsAtoms = 0;\r\n \t\tfor (Atom atom : f.getAtomList()) {\r\n \t\t\tif (atom.getAtomParity() != null) {\r\n \t\t\t\tif (atom.getStereoGroup() == StereoGroup.Rac)\r\n@@ -247,8 +252,8 @@ else if (atom.getStereoGroup() == StereoGroup.Abs)\n \t\t\t}\r\n \t\t}\r\n \t\tassertEquals(\"Incorrect number of racemic stereo centers\", nRacExp, nRacAtoms);\r\n-\t\tassertEquals(\"Incorrect number of relative stereo centers\",nRelExp, nRelAtoms);\r\n-\t\tassertEquals(\"Incorrect number of absolute stereo centers\",nAbsExp, nAbsAtoms);\r\n+\t\tassertEquals(\"Incorrect number of relative stereo centers\", nRelExp, nRelAtoms);\r\n+\t\tassertEquals(\"Incorrect number of absolute stereo centers\", nAbsExp, nAbsAtoms);\r\n \t}\r\n \r\n \t@Test\r\n@@ -319,19 +324,99 @@ public void applyStereochemistryRacCis() throws StructureBuildingException {\n \t\tassertEnhancedStereo(\"rac-cis-N4-(2,2-dimethyl-3,4-dihydro-3-oxo-2H-pyrido[3,2-b][1,4]oxazin-6-yl)-N2-[6-[2,6-dimethylmorpholino)pyridin-3-yl]-5-fluoro-2,4-pyrimidinediamine\", 2, 0, 0);\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void applyStereochemistryPlusMinus() throws StructureBuildingException {\r\n+\t\tassertEnhancedStereo(\"(+/-)-1-(1-pentyl-1H-pyrazol-5-yl)ethanol\", 1, 0, 0);\r\n+\t\tassertEnhancedStereo(\"(±)-1-(1-pentyl-1H-pyrazol-5-yl)ethanol\", 1, 0, 0);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testBracketNormalisation() throws StereochemistryException {\r\n+\t\tMatcherAssert.assertThat(ComponentGenerator.normaliseBinaryBrackets(\"(R)-and(S)-\"),\r\n+\t\t\t\tCoreMatchers.is(\"(RS)\"));\r\n+\t\tMatcherAssert.assertThat(ComponentGenerator.normaliseBinaryBrackets(\"(R,S)-and(S,R)-\"),\r\n+\t\t\t\tCoreMatchers.is(\"(RS,SR)\"));\r\n+\t\tMatcherAssert.assertThat(ComponentGenerator.normaliseBinaryBrackets(\"(2R,3S)-and(2S,3S)-\"),\r\n+\t\t\t\tCoreMatchers.is(\"(2RS,3S)\"));\r\n+\t\tMatcherAssert.assertThat(ComponentGenerator.normaliseBinaryBrackets(\"(2R,3S)-or(2S,3S)-\"),\r\n+\t\t\t\tCoreMatchers.is(\"(2R*,3S)\"));\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void applyStereochemistryMultipleBrackets() throws StructureBuildingException {\r\n+\t\tassertEnhancedStereo(\"(R)- and (S)-1-(1-pentyl-1H-pyrazol-5-yl)ethanol\", 1, 0, 0);\r\n+\t\tassertEnhancedStereo(\"(R)- or (S)-1-(1-pentyl-1H-pyrazol-5-yl)ethanol\", 0, 1, 0);\r\n+\t\tassertEnhancedStereo(\"(R,S)- or (S,S)-2-(methylamino)-1-phenylpropan-1-ol\", 0, 1, 1);\r\n+\t}\r\n+\r\n \t// US20080015199A1_2830\r\n-\t// probably better to support via composite entity like techniques\r\n-\t@Ignore\r\n+\t@Test\r\n \tpublic void applyStereochemistryRelUnlocantedRAndS() throws StructureBuildingException {\r\n-\t\tFragment f         = n2s.parseChemicalName(\"(R) and (S)-4-{3-[(4-Carbamimidoylphenylamino)-(3,5-dimethoxyphenyl)methyl]-5-oxo-4,5-dihydro-[1,2,4]triazol-1-yl}thiazole-5-carboxylic acid\").getStructure();\r\n-\t\tint      nRacAtoms = 0;\r\n+\t\tassertEnhancedStereo(\"(R) and (S)-4-{3-[(4-Carbamimidoylphenylamino)-(3,5-dimethoxyphenyl)methyl]-5-oxo-4,5-dihydro-[1,2,4]triazol-1-yl}thiazole-5-carboxylic acid\", 1, 0, 0);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void racemicPeptides() throws StructureBuildingException {\r\n+\t\tFragment f = n2s.parseChemicalName(\"DL-alanyl-DL-alanine\").getStructure();\r\n+\t\tMap<Map.Entry<StereoGroup,Integer>, Integer> counter = new HashMap<>();\r\n \t\tfor (Atom atom : f.getAtomList()) {\r\n \t\t\tif (atom.getAtomParity() != null) {\r\n-\t\t\t\tif (atom.getStereoGroup() == StereoGroup.Rac)\r\n-\t\t\t\t\tnRacAtoms++;\r\n+\t\t\t\tMap.Entry<StereoGroup,Integer> key\r\n+\t\t\t\t\t\t= new AbstractMap.SimpleImmutableEntry<>(atom.getAtomParity().getStereoGroup(),\r\n+\t\t\t\t\t\t                                         atom.getAtomParity().getStereoGroupNum());\r\n+\t\t\t\tInteger count = counter.get(key);\r\n+\t\t\t\tif (count == null)\r\n+\t\t\t\t\tcount = 0;\r\n+\t\t\t\tcounter.put(key, count+1);\r\n \t\t\t}\r\n \t\t}\r\n-\t\tassertEquals(1, nRacAtoms);\r\n+\t\tassertEquals(2, counter.size());\r\n+\t\tIterator<Integer> iterator = counter.values().iterator();\r\n+\t\tassertEquals(1, (int)iterator.next());\r\n+\t\tassertEquals(1, (int)iterator.next());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void racemicCarbohydrates() throws StructureBuildingException {\r\n+\t\tFragment f = n2s.parseChemicalName(\"4-O-α-DL-Glucopyranosyl-α-DL-glucose\").getStructure();\r\n+\t\tMap<Map.Entry<StereoGroup,Integer>, Integer> counter = new HashMap<>();\r\n+\t\tfor (Atom atom : f.getAtomList()) {\r\n+\t\t\tif (atom.getAtomParity() != null &&\r\n+\t\t\t\tatom.getStereoGroup() == StereoGroup.Rac) {\r\n+\t\t\t\tMap.Entry<StereoGroup,Integer> key\r\n+\t\t\t\t\t\t= new AbstractMap.SimpleImmutableEntry<>(atom.getAtomParity().getStereoGroup(),\r\n+\t\t\t\t\t\tatom.getAtomParity().getStereoGroupNum());\r\n+\t\t\t\tInteger count = counter.get(key);\r\n+\t\t\t\tif (count == null)\r\n+\t\t\t\t\tcount = 0;\r\n+\t\t\t\tcounter.put(key, count+1);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tassertEquals(2, counter.size());\r\n+\t\tIterator<Integer> iterator = counter.values().iterator();\r\n+\t\tassertEquals(4, (int)iterator.next());\r\n+\t\tassertEquals(4, (int)iterator.next());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void avoidCollisionOfRacemicDefinitions() throws StructureBuildingException {\r\n+\t\tFragment f = n2s.parseChemicalName(\"DL-alanyl-(RS)-butan-2-ol\").getStructure();\r\n+\t\tMap<Map.Entry<StereoGroup,Integer>, Integer> counter = new HashMap<>();\r\n+\t\tfor (Atom atom : f.getAtomList()) {\r\n+\t\t\tif (atom.getAtomParity() != null) {\r\n+\t\t\t\tMap.Entry<StereoGroup,Integer> key\r\n+\t\t\t\t\t\t= new AbstractMap.SimpleImmutableEntry<>(atom.getAtomParity().getStereoGroup(),\r\n+\t\t\t\t\t\tatom.getAtomParity().getStereoGroupNum());\r\n+\t\t\t\tInteger count = counter.get(key);\r\n+\t\t\t\tif (count == null)\r\n+\t\t\t\t\tcount = 0;\r\n+\t\t\t\tcounter.put(key, count+1);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tassertEquals(2, counter.size());\r\n+\t\tIterator<Integer> iterator = counter.values().iterator();\r\n+\t\tassertEquals(1, (int)iterator.next());\r\n+\t\tassertEquals(1, (int)iterator.next());\r\n \t}\r\n \r\n \t@Test\r\n@@ -518,7 +603,7 @@ else if (i==3){\n \t\r\n \t@Test\r\n \tpublic void testCIPpriority9() throws StructureBuildingException {\r\n-\t\tFragment f = fm.buildSMILES(\"C1(C=C)CC1C2=CC=CC=C2\");\r\n+\t  Fragment f = fm.buildSMILES(\"C1(C=C)CC1C2=CC=CC=C2\");\r\n \t\tfm.makeHydrogensExplicit();\r\n \t\tList<Atom> cipOrdered = new CipSequenceRules(f.getFirstAtom()).getNeighbouringAtomsInCipOrder();\r\n \t\tfor (int i = 0; i < cipOrdered.size(); i++) {\r"
  }
]
