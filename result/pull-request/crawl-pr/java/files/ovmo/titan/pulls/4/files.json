[
  {
    "sha": "f8ceb0a2b87800d3be26b8c05611cbeb04f4ac71",
    "filename": "README.md",
    "status": "modified",
    "additions": 16,
    "deletions": 4,
    "changes": 20,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/README.md",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/README.md",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/README.md?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,5 +1,17 @@\n-# Project Titan\n-## Project 1-2 \n-### Group 25 \n+# Project 1-2\n+## Group 25\n \n-The Group Consists of Aditi, Chiara, Laurence, Leo, Oscar and Sebas\n+## Project Titan\n+\n+### SetUp\n+\n+Starting with using [JavaFX][https://openjfx.io]. Need to Download from [here] [https://openjfx.io].\n+\n+after Running the program with the Class ./src/PhysicsEngine/StartPhysicsEngine\n+\n+export PATH_TO_FX=\"[path-to-downloads]/javafx-sdk-12.0.1/lib\"\n+\n+javac --module-path $PATH_TO_FX StartPhysicsEngine.java\n+\n+java --module-path $PATH_TO_FX Main\n+The Program will run following that, and that solely with the Vector3dInterface. The Output of the physics engine is in vector 3d and is passed to the Visual part of the program. The Visualization is using the StepSize multiplier to have the planets and spacecraft move."
  },
  {
    "sha": "7314f71b47504e70694c208d4d1f4b27fa22ffe6",
    "filename": "src/PhysicsEngine/Newton.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Newton.class",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Newton.class",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Newton.class?ref=742c162a074ccc9c317fed62db05c5834ad93726"
  },
  {
    "sha": "f1a51f710f761a9e55d6dd5e72826bb7b6051711",
    "filename": "src/PhysicsEngine/Newton.java",
    "status": "modified",
    "additions": 10,
    "deletions": 11,
    "changes": 21,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Newton.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Newton.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Newton.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -30,19 +30,16 @@ public static Vector3dInterface solve(Planet i, Planet j)\n         {\n             System.out.println(\"Planet1: \" + i.name + \", Planet2: \" + j.name);\n         }\n-        // finding the bottom of the devision\n+        // finding the bottom of the division\n         r = i.vector3d.dist(j.vector3d);\n         rCube = Math.pow(r, 3);\n         Vector3dInterface acceleration = new Vector3d(0,0,0);\n         if (i != j)\n         {\n-            // accelertaion that is created by \n+            // acceleration that is created by\n             acceleration = (((j.vector3d.sub(i.vector3d)).mul(1/rCube))).mul(G * j.mass);\n         }\n-        else if (i == j && DEBUG)\n-        {\n-            System.out.println(\"E-E\");\n-        }\n+\n         return acceleration;\n     }\n \n@@ -55,16 +52,16 @@ public static boolean newtonLoop (Planet[] planets, int stepSize)\n     {\n         //Reset the acceleration to 0\n         Planet.accReset();\n-        // itterate over all the planets\n+        // iterate over all the planets\n         for(int i = 0; i < planets.length; i++)\n         {\n-            // All other planets\n+            // all other planets\n             for(int j = 0; j< planets.length; j++)\n             {\n                 // if i planet and j planet are the NOT same  \n                 if(i != j)\n                 {\n-                    // calculate the accelaration from the attraction of the two objects\n+                    // calculate the acceleration from the attraction of the two objects\n                     Vector3dInterface acceleration = Newton.solve(planets[i], planets[j]);\n                     //Add the calculated acceleration to acceleration of planet i\n                     planets[i].accVector = (Vector3d)(planets[i].accVector.add(acceleration));\n@@ -80,12 +77,14 @@ public static boolean newtonLoop (Planet[] planets, int stepSize)\n             planets[k].velVector = (Vector3d)(planets[k].velVector.add(mul));\n             // followed by the position vector using the updated velocity\n             mul = planets[k].velVector.mul(stepSize);\n-            planets[k].vector3d = (Vector3d)(planets[k].vector3d.add(mul));\n+            Vector3d posVector = (Vector3d)(planets[k].vector3d.add(mul));\n+            //updating current posVector of planets\n+            planets[k].vector3d = posVector;\n         }\n         \n         if (planets[11].vector3d.dist(planets[8].vector3d) <= planets[8].radius)\n         {\n-            // this case hits if the spacecraft has plowed into titan - since we are updateing \n+            // this case hits if the spacecraft has plowed into titan - since we are updating\n             // the intervals very frequently I assume that we will notice a hit.\n             return true;\n         }"
  },
  {
    "sha": "950807c784e74796e548679cd32330f43313f96a",
    "filename": "src/PhysicsEngine/Planet.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Planet.class",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Planet.class",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Planet.class?ref=742c162a074ccc9c317fed62db05c5834ad93726"
  },
  {
    "sha": "b700279830db5eec0154fcca72fbefe17c39d2f5",
    "filename": "src/PhysicsEngine/Planet.java",
    "status": "modified",
    "additions": 77,
    "deletions": 19,
    "changes": 96,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Planet.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Planet.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Planet.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,11 +1,47 @@\n package PhysicsEngine;\n \n+import java.util.ArrayList;\n+\n /**\n * Class holding all the information needed to find the trajectory of a planet\n */\n public class Planet\n {\n \n+\t//the following variables represent all of the required variables to store velocity, position and acceleration values for each solar system object.\n+\tpublic String name;\n+\tpublic int step;\n+\n+\tpublic double mass;\n+\tpublic double radius;\n+\tpublic double gravity;\n+\t//variables store the velocity in terms of a 3D model. These variables are only initialized and called  once.\n+\tpublic double velocityX;\n+\tpublic double velocityY;\n+\tpublic double velocityZ;\n+\t//variables store position in terms of a 3D model. these variables are also initialized and called once.\n+\tpublic double positionX;\n+\tpublic double positionY;\n+\tpublic double positionZ;\n+\t//variables store vectors in terms of a 3D model. These variables are then used in the vectors method.\n+\tpublic Vector3d vector3d;\n+\tpublic Vector3d velVector;\n+\tpublic Vector3d accVector;\n+\n+\t//arrayList to store positions over time\n+\tArrayList<Vector3d> orbit = new ArrayList<Vector3d>();\n+\n+\tArrayList distances = new ArrayList<>();\n+\n+\t//array to store x-Coordinates over time\n+\tdouble[] orbitX;\n+\n+\t//array to store y-Coordinates over time\n+\tdouble[] orbitY;\n+\n+\tpublic static Planet[] planets; //Array of all planets of the solar system\n+\n+\n \t/**\n \t *Constructor\n \t *@param namePlanet represents the name of the planet to be created\n@@ -24,6 +60,8 @@ public void vectors ()\n \t\tvector3d = new Vector3d(positionX, positionY, positionZ);\n \t\tvelVector = new Vector3d(velocityX, velocityY, velocityZ);\n \t\taccVector = new Vector3d(0,0,0);\n+\n+\t\torbit.add(vector3d);\n \t}\n \n \t/**\n@@ -36,25 +74,45 @@ public static void accReset ()\n \t\t\tplanets[i].accVector = new Vector3d(0,0,0);\n \t\t}\n \t}\n-\t//the following variables represent all of the required variables to store velocity, position and acceleration values for each solar system object. \n-\tpublic String name;\n-\tpublic int step;\n \n-\tpublic double mass;\n-\tpublic double radius;\n-\tpublic double gravity;\n-\t//variables store the velocity in terms of a 3D model. These variables are only initialized and called  once.\n-\tpublic double velocityX;\n-\tpublic double velocityY;\n-\tpublic double velocityZ;\n-\t//variables store position in terms of a 3D model. these variables are also initialized and called once.\n-\tpublic double positionX;\n-\tpublic double positionY;\n-\tpublic double positionZ;\n-\t//variables store vectors in terms of a 3D model. These variables are then used in the vectors method. \n-\tpublic Vector3d vector3d;\n-\tpublic Vector3d velVector;\n-\tpublic Vector3d accVector;\n+\tpublic double fromMToAU(double m) {\n+\t\tdouble AU = m*6.6846e-12;\n+\t\treturn AU;\n+\t}\n \n-\tpublic static Planet[] planets; //Array of all planets of the solar system\n+\t/**\n+\t * @return array holding x-coordinates over time (in AU, important for visualization!)\n+\t */\n+\tpublic double[] getOrbitX(){\n+\n+\t\torbitX = new double[orbit.size()];\n+\n+\t\tfor(int i = 0; i < orbit.size(); i++){\n+\t\t\torbitX[i] = fromMToAU(orbit.get(i).getX());\n+\t\t}\n+\t\treturn orbitX;\n+\t}\n+\n+\t/**\n+\t * @return array holding y-coordinates over time (in AU, important for visualization!)\n+\t */\n+\tpublic double[] getOrbitY(){\n+\n+\t\torbitY = new double[orbit.size()];\n+\n+\t\tfor(int i = 0; i < orbit.size(); i++){\n+\t\t\torbitY[i] = fromMToAU(orbit.get(i).getY());\n+\t\t}\n+\t\treturn orbitY;\n+\t}\n+\n+\tpublic double getInitX(){\n+\n+\t\treturn fromMToAU(orbit.get(1).getX());\n+\t}\n+\n+\tpublic double getInitY(){\n+\n+\t\treturn fromMToAU(orbit.get(1).getY());\n+\t}\n }"
  },
  {
    "sha": "46a2f5f8780a75e1d903527d3c9957fe2c63d540",
    "filename": "src/PhysicsEngine/PlanetStart.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/PlanetStart.class",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/PlanetStart.class",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/PlanetStart.class?ref=742c162a074ccc9c317fed62db05c5834ad93726"
  },
  {
    "sha": "604c21f413076863b052feea551a837ce4255b32",
    "filename": "src/PhysicsEngine/ReadMe.md",
    "status": "removed",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/ReadMe.md",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/ReadMe.md",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/ReadMe.md?ref=742c162a074ccc9c317fed62db05c5834ad93726",
    "patch": "@@ -1,6 +0,0 @@\n-# Project 1-2\n-## Group 25\n-## Project Titan\n-\n-### SetUp\n-"
  },
  {
    "sha": "9acb2c64eb0f2711fae601e358bf96cf493047c7",
    "filename": "src/PhysicsEngine/Simple.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Simple.class",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Simple.class",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Simple.class?ref=742c162a074ccc9c317fed62db05c5834ad93726"
  },
  {
    "sha": "1cf4fa10694d6c0c463bb323903ac5df74a00199",
    "filename": "src/PhysicsEngine/Simple.java",
    "status": "removed",
    "additions": 0,
    "deletions": 127,
    "changes": 127,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Simple.java",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Simple.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Simple.java?ref=742c162a074ccc9c317fed62db05c5834ad93726",
    "patch": "@@ -1,127 +0,0 @@\n-package PhysicsEngine;\n-\n-import PhysicsEngine.titan.Vector3dInterface;\n-import java.lang.Math;\n-\n-public class Simple\n-{\n-\tstatic final boolean DEBUG = true;\n-\tPlanet[] planets;\n-\tPlanet[] spacePlanets;\n-\n-\t/**\n-\t * Constructor\n-\t*/\n-\tpublic Simple ()\n-\t{\n-\t\tPlanetStart start = new PlanetStart();\n-\t\tplanets = start.planets;\n-\t}\n-\n-\t/**\n-\t * @param stepSize\n-\t * @param initV\n-\t */\n-\n-\tpublic void calc (int stepSize, int initV)\n-\t{\n-\t\tif (DEBUG)\n-\t\t{\n-\t\t\t//Initial position of PhysicsEngine.titan\n-\t\t\tSystem.out.println(\"initial start Titan [8]: \" + planets[8].vector3d.toString());\n-\t\t\tSystem.out.println(\"initial start SpaceCraft [11]: \" + planets[11].vector3d.toString());\n-\t\t}\n-\t\t\n-\t\tspacePlanets = planets.clone();\n-\t\t\n-\t\tint cap = 31536001; //One year in seconds\n-\t\tint cap1 = 31536001; //One year in seconds\n-\n-\t\t//This loop gets the position of PhysicsEngine.titan\n-\t\tfor (int d = 0; d < cap1; d += stepSize)\n-\t\t{\n-\t\t\tif (Newton.newtonLoop(spacePlanets, stepSize))\n-\t\t\t{\n-\t\t\t\tthrow new RuntimeException(\"END\");\n-\t\t\t}\n-\t\t\telse \n-\t\t\t{\n-\t\t\t\tif(DEBUG && (d == 0)) //position at beginning\n-\t\t\t\t{\n-\t\t\t\t\tSystem.out.println(\"PhysicsEngine/titan \" + spacePlanets[8].vector3d.toString());\n-\t\t\t\t\t//position of earth at half a year\n-\t\t\t\t\tSystem.out.println(\"earth \" + spacePlanets[3].vector3d.toString());\n-\t\t\t\t\t//Euclidean distance between earth and PhysicsEngine.titan\n-\t\t\t\t\tSystem.out.println(\"dist vect \" + spacePlanets[8].vector3d.dist(spacePlanets[3].vector3d));\n-\t\t\t\t}\n-\t\t\t\telse if (DEBUG && (d % (cap1/2)) == 0) //getting position at half a year\n-\t\t\t\t{\n-\n-\t\t\t\t\t//Position of PhysicsEngine.titan at half a year\n-\t\t\t\t\tSystem.out.println(\"PhysicsEngine/titan \" + spacePlanets[8].vector3d.toString());\n-\t\t\t\t\t//Position of earth at half a year\n-\t\t\t\t\tSystem.out.println(\"earth \" + spacePlanets[3].vector3d.toString());\n-\t\t\t\t\t//Euclidean distance between earth and PhysicsEngine.titan\n-\t\t\t\t\tSystem.out.println(\"dist vect \" + spacePlanets[8].vector3d.dist(spacePlanets[3].vector3d));\n-\t\t\t\t}\n-\t\t\t\telse if(DEBUG && (d % (cap1)) == 0) //getting position after one year\n-\t\t\t\t{\n-\t\t\t\t\t//position of PhysicsEngine.titan at half a year\n-\t\t\t\t\tSystem.out.println(\"PhysicsEngine/titan \" + spacePlanets[8].vector3d.toString());\n-\t\t\t\t\t//position of earth at half a year\n-\t\t\t\t\tSystem.out.println(\"earth \" + spacePlanets[3].vector3d.toString());\n-\t\t\t\t\t//Euclidean distance between earth and PhysicsEngine.titan\n-\t\t\t\t\tSystem.out.println(\"dist vect \" + spacePlanets[8].vector3d.dist(spacePlanets[3].vector3d));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tspaceFlight (initV);\n-\n-\t\tif (DEBUG)\n-\t\t{\n-\t\t\tSystem.out.println(\"initial start Titan [8]: \" + planets[8].vector3d.toString());\n-\t\t\tSystem.out.println(\"initial start SpaceCraft [11]: \" + planets[11].vector3d.toString());\n-\t\t}\n-\t\tfor (int d = 0; d < cap; d += stepSize)\n-\t\t{\n-\t\t\tif (Newton.newtonLoop(planets, stepSize))\n-\t\t\t{\n-\t\t\t\tthrow new RuntimeException(\"END\");\n-\t\t\t}\n-\t\t\telse \n-\t\t\t{\n-\t\t\t\tif (DEBUG && (d % 864000) == 0) // 86400 represents an interval of 10 days, in terms of seconds.\n-\t\t\t\t{\n-\t\t\t\t\tSystem.out.print((planets[8].vector3d.sub(planets[11].vector3d)).toString());\n-\t\t\t\t\tSystem.out.println (\", Norm: \" + (planets[8].vector3d.sub(planets[11].vector3d)).norm());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * @param initV\n-\t */\n-\tpublic void spaceFlight (int initV)\n-\t{\n-\t\t//Call once the takeoff point\n-\t\tVector3dInterface unitVector = takeOffPoint();\n-\t\tplanets[11].velVector = (Vector3d)(unitVector.mul(initV));\n-\t}\n-\n-\t/**\n-\t * Space Craft take off point\n-\t * @return\n-\t */\n-\tpublic Vector3dInterface takeOffPoint ()\n-\t{\n-\t\t//Calculate the Unit vector for position to fly to PhysicsEngine.titan\n-\t\tSystem.out.println(\"Earth at 0\" +planets[3].vector3d.toString());\n-\t\tSystem.out.println(\"Titian \" + spacePlanets[8].vector3d.toString());\n-\t\tVector3d sub = (Vector3d)(spacePlanets[8].vector3d.sub(planets[3].vector3d)); \n-\n-\t\tVector3dInterface unitVectorET = sub.div(Math.abs((spacePlanets[8].vector3d.sub(planets[3].vector3d)).norm()));\n-\t\tplanets[11].vector3d = (Vector3d)((unitVectorET.mul(planets[3].radius)).add(planets[3].vector3d));\n-\t\treturn unitVectorET;\n-\t}\n-}"
  },
  {
    "sha": "69e59b55771c4dcc28424b0eeae3d876d155766a",
    "filename": "src/PhysicsEngine/SimpleTest.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/SimpleTest.class",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/SimpleTest.class",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/SimpleTest.class?ref=742c162a074ccc9c317fed62db05c5834ad93726"
  },
  {
    "sha": "bc4d1e61f46938cc39e36b9293e7442f89e3e296",
    "filename": "src/PhysicsEngine/Simulator.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Simulator.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Simulator.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Simulator.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -0,0 +1,150 @@\n+package PhysicsEngine;\n+\n+import PhysicsEngine.titan.Vector3dInterface;\n+import java.lang.Math;\n+\n+public class Simulator\n+{\n+\tstatic final boolean DEBUG = true;\n+\tPlanet[] planets;\n+\n+\t/**\n+\t * Constructor\n+\t*/\n+\tpublic Simulator()\n+\t{\n+\t\tPlanetStart start = new PlanetStart();\n+\t\tplanets = start.planets;\n+\t}\n+\n+\t/**\n+\t * method to test best possible initial velocity and position of the spacecraft\n+\t * just for testing purposes\n+\t * @param stepSize\n+\t * @param initV\n+\t */\n+\n+//\tpublic void calc (int stepSize, int initV) {\n+//\t\tif (DEBUG) {\n+//\t\t\t//Initial position of PhysicsEngine.titan\n+//\t\t\tSystem.out.println(\"initial start Titan [8]: \" + planets[8].vector3d.toString());\n+//\t\t\tSystem.out.println(\"initial start SpaceCraft [11]: \" + planets[11].vector3d.toString());\n+//\t\t}\n+//\n+//\n+//\n+//\t\tint cap = 31536001; //One year in seconds\n+//\t\tint cap1 = 31536001; //One year in seconds\n+//\n+////\t\t//This loop gets the position of PhysicsEngine.titan\n+//\n+////\t\tfor (int d = 0; d < cap1; d += stepSize)\n+////\t\t{\n+////\t\t\tif (Newton.newtonLoop(spacePlanets, stepSize))\n+////\t\t\t{\n+////\t\t\t\tthrow new RuntimeException(\"END\");\n+////\t\t\t}\n+////\t\t\telse\n+////\t\t\t{\n+////\t\t\t\tif(DEBUG && (d == 0)) //position at beginning\n+////\t\t\t\t{\n+////\t\t\t\t\tSystem.out.println(\"PhysicsEngine/titan \" + spacePlanets[8].vector3d.toString());\n+////\t\t\t\t\t//position of earth at half a year\n+////\t\t\t\t\tSystem.out.println(\"earth \" + spacePlanets[3].vector3d.toString());\n+////\t\t\t\t\t//Euclidean distance between earth and PhysicsEngine.titan\n+////\t\t\t\t\tSystem.out.println(\"dist vect \" + spacePlanets[8].vector3d.dist(spacePlanets[3].vector3d));\n+////\t\t\t\t}\n+////\t\t\t\telse if (DEBUG && (d % (cap1/2)) == 0) //getting position at half a year\n+////\t\t\t\t{\n+////\n+////\t\t\t\t\t//Position of PhysicsEngine.titan at half a year\n+////\t\t\t\t\tSystem.out.println(\"PhysicsEngine/titan \" + spacePlanets[8].vector3d.toString());\n+////\t\t\t\t\t//Position of earth at half a year\n+////\t\t\t\t\tSystem.out.println(\"earth \" + spacePlanets[3].vector3d.toString());\n+////\t\t\t\t\t//Euclidean distance between earth and PhysicsEngine.titan\n+////\t\t\t\t\tSystem.out.println(\"dist vect \" + spacePlanets[8].vector3d.dist(spacePlanets[3].vector3d));\n+////\t\t\t\t}\n+////\t\t\t\telse if(DEBUG && (d % (cap1)) == 0) //getting position after one year\n+////\t\t\t\t{\n+////\t\t\t\t\t//position of PhysicsEngine.titan at half a year\n+////\t\t\t\t\tSystem.out.println(\"PhysicsEngine/titan \" + spacePlanets[8].vector3d.toString());\n+////\t\t\t\t\t//position of earth at half a year\n+////\t\t\t\t\tSystem.out.println(\"earth \" + spacePlanets[3].vector3d.toString());\n+////\t\t\t\t\t//Euclidean distance between earth and PhysicsEngine.titan\n+////\t\t\t\t\tSystem.out.println(\"dist vect \" + spacePlanets[8].vector3d.dist(spacePlanets[3].vector3d));\n+////\t\t\t\t}\n+////\t\t\t}\n+////\t\t}\n+//\n+//\t}\n+\n+\tpublic boolean launch(int stepSize, int initV) {\n+\n+\t\tspaceFlight (initV);\n+\t\tint cap = 31536001; //One year in seconds\n+\n+\t\tif (DEBUG)\n+\t\t{\n+\t\t\tSystem.out.println(\"initial start Titan [8]: \" + planets[8].vector3d.toString());\n+\t\t\tSystem.out.println(\"initial start SpaceCraft [11]: \" + planets[11].vector3d.toString());\n+\n+\t\t}\n+\t\tfor (int d = 0; d < cap; d += stepSize)\n+\t\t{\n+\t\t\t//here the probe is launched\n+\t\t\tif (Newton.newtonLoop(planets, stepSize))\n+\t\t\t{\n+\t\t\t\tSystem.out.println(\"Probe has successfully reached Titan\");\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tif (DEBUG && (d % 864000/2) == 0) // 864000 represents an interval of 10 days, in terms of seconds. getting an update for the position\n+\t\t\t\t{\n+\t\t\t\t\t//position of the spacecraft and distance to titan\n+\t\t\t\t\tSystem.out.print(\"position of the probe \" + (planets[11].vector3d.toString()));\n+\t\t\t\t\tSystem.out.println (\", euclidean distance: \" + planets[11].vector3d.dist(planets[8].vector3d));\n+\n+\t\t\t\t\t//adding positions to orbits\n+\t\t\t\t\tfor(int i = 0; i < planets.length; i++){\n+\t\t\t\t\t\tplanets[i].orbit.add(planets[i].vector3d);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tplanets[11].distances.add(planets[11].vector3d.dist(planets[8].vector3d));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tSystem.out.println(\"The probe did not reach titan within one year\");\n+\t\treturn true;\n+\t}\n+\n+\n+\t/**\n+\t * @param initV\n+\t */\n+\tpublic void spaceFlight (int initV)\n+\t{\n+\t\t//Call once the takeoff point\n+\t\tVector3dInterface unitVector = takeOffPoint();\n+\t\tplanets[11].velVector = (Vector3d)(unitVector.mul(initV));\n+\t}\n+\n+\t/**\n+\t * Space Craft take off point\n+\t * @return\n+\t */\n+\tpublic Vector3dInterface takeOffPoint ()\n+\t{\n+\t\t//Calculate the Unit vector for position to fly to PhysicsEngine.titan\n+\t\tSystem.out.println(\"Earth at 0\" + planets[3].vector3d.toString());\n+\t\tSystem.out.println(\"Titan \" + planets[8].vector3d.toString());\n+\t\tVector3d sub = (Vector3d)(planets[8].vector3d.sub(planets[3].vector3d));\n+\n+\t\tVector3dInterface unitVectorET = sub.div(Math.abs((planets[8].vector3d.sub(planets[3].vector3d)).norm()));\n+\t\tplanets[11].vector3d = (Vector3d)((unitVectorET.mul(planets[3].radius)).add(planets[3].vector3d));\n+\n+\n+\t\treturn unitVectorET;\n+\t}\n+}"
  },
  {
    "sha": "76621d3ea07e86b880b3ea6ba828dad1b2e900ef",
    "filename": "src/PhysicsEngine/SpaceCraft.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/SpaceCraft.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/SpaceCraft.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/SpaceCraft.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,7 +1,7 @@\n package PhysicsEngine;\n \n public class SpaceCraft {\n-    // initial constant vairbales, where the velocity v of the spacecraft must be: 48 km/s <= v <= 60 km/s\n+    // initial constant variables, where the velocity v of the spacecraft must be: 48 km/s <= v <= 60 km/s\n     private final double MAX_TAKEOFF = 60000;\n     private final double MIN_TAKEOFF = 11.186; // MIN_TAKEOFF represents the minimum required escape velocity from Earth at a distance of 80km from the Earth's surface.\n     private final double MIN_REACH = 48000;"
  },
  {
    "sha": "737f0417359a21c6826d35513a3fe66b8e39553b",
    "filename": "src/PhysicsEngine/StartPhysicsEngine.java",
    "status": "modified",
    "additions": 12,
    "deletions": 3,
    "changes": 15,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/StartPhysicsEngine.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/StartPhysicsEngine.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/StartPhysicsEngine.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,15 +1,24 @@\n package PhysicsEngine;\n \n+import Visualization.StartVisuals;\n+\n /**\n  * Main class\n */\n public class StartPhysicsEngine\n {\n \tpublic static void main(String[] args) {\n-\t\tPlanetStart start = new PlanetStart(); //?? This variable is never used\n \n-\t\tSimple testing = new Simple ();\n+\t\tPlanetStart start = new PlanetStart();\n+\t\n+\n+\t\t//Launch spacecraft\n+\t\tSimulator launch = new Simulator();\n+\n+\t\tif(launch.launch(8, 57000)){\n \n-\t\ttesting.calc(8, 60000);\n+\t\t\t//Start visual simulation\n+\t\t\tStartVisuals.start();\n+\t\t};\n \t}\n }"
  },
  {
    "sha": "4fa651bd0808a15cabd98bf92a9ab98f9fb9ce68",
    "filename": "src/PhysicsEngine/Vector3d.class",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Vector3d.class",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/PhysicsEngine/Vector3d.class",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Vector3d.class?ref=742c162a074ccc9c317fed62db05c5834ad93726"
  },
  {
    "sha": "167d0a0282cff12c346e8ba728dd209bffe85501",
    "filename": "src/PhysicsEngine/Vector3d.java",
    "status": "modified",
    "additions": 15,
    "deletions": 7,
    "changes": 22,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Vector3d.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/PhysicsEngine/Vector3d.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/PhysicsEngine/Vector3d.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -104,7 +104,7 @@ public Vector3dInterface sub(Vector3dInterface other) {\n     \n     /**\n     multiplying one Vector with another\n-    @param other -> the one to be multiplied by\n+    @param scalar -> the one to be multiplied by\n     @return the sum of both vetors (otehr and This)\n     */\n     @Override\n@@ -117,9 +117,9 @@ public Vector3dInterface mul(double scalar) {\n     }\n     \n     /**\n-    deviding one Vector by another\n-    @param other -> the one to be devided by\n-    @return the sum of both vetors (otehr and This)\n+    dividing one Vector by another\n+    @param scalar -> the one to be divided by\n+    @return the sum of both vectors (other and this)\n     */\n     public Vector3dInterface div(double scalar) {\n         Vector3d product = new Vector3d();\n@@ -137,7 +137,7 @@ public Vector3dInterface addMul(double scalar, Vector3dInterface other) {\n     //Euclidean form of the vector\n     /**\n     eucledian form of the vector\n-    @return the eucledian form (as double)\n+    @return the euclidean form (as double)\n     */\n     @Override\n     public double norm() {\n@@ -148,15 +148,23 @@ public double norm() {\n     /**\n     distance of the two vectors\n     @param other -> the other vector\n-    @return the eucledian distance between this and other\n+    @return the euclidean distance between this and other\n     */\n     @Override\n     public double dist(Vector3dInterface other) {\n         return Math.sqrt((Math.pow((this.x - other.getX()), 2) + Math.pow((this.y - other.getY()), 2) + Math.pow(this.z - other.getZ(),2)));\n     }\n+\n+    public Vector3d crossProduct(Vector3d other){\n+        Vector3d crossProduct = new Vector3d();\n+        crossProduct.setX(this.y * other.z - this.z * other.x);\n+        crossProduct.setY(this.z * other.x - this.x * other.y);\n+        crossProduct.setZ(this.x * other.y - this.y * other.x);\n+        return crossProduct;\n+    }\n     \n     /**\n-    a sring representation of the Vector\n+    a string representation of the Vector\n     @return the String representation of the vecotr\n     */\n     @Override"
  },
  {
    "sha": "245f9db191e5eb7a05f5975a84efb31ed10af1f7",
    "filename": "src/Visualization/MovingPlanets.java",
    "status": "modified",
    "additions": 198,
    "deletions": 13,
    "changes": 211,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/MovingPlanets.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/MovingPlanets.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/MovingPlanets.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,22 +1,207 @@\n package Visualization;\n \n-public class MovingPlanets\n-{\n+import PhysicsEngine.Planet;\n+import PhysicsEngine.PlanetStart;\n+import javafx.animation.PathTransition;\n+import javafx.animation.SequentialTransition;\n+import javafx.animation.TranslateTransition;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.*;\n+import javafx.scene.transform.Translate;\n+import javafx.util.Duration;\n \n-    /**\n-     * Constructor\n-     * 1 minute = 60000 milliseconds\n-     */\n-    public MovingPlanets()\n-    {\n+import javax.sound.midi.SysexMessage;\n+\n+/**\n+ * called to start movement of the planets\n+ */\n+public class MovingPlanets {\n+\n+    Planet[] planets = Planet.planets;\n+    SolarSystemPane solarSystem;\n+    final double duration;\n+\n+    Circle[] planetObj;\n+\n+    public MovingPlanets(double duration, SolarSystemPane solarSystem) {\n+\n+        this.duration = duration;\n+        this.solarSystem = solarSystem;\n+        planetObj = solarSystem.circles;\n \n     }\n \n-    /**\n-     * Moves the planet \n-     */\n-    public void move()\n-    {\n+    public void move(){\n+\n+        //get length for orbit array\n+        int n = planets[1].getOrbitX().length;\n+\n+        //set step size\n+        int step = 1;\n+\n+        SequentialTransition movementSun = new SequentialTransition();\n+\n+        double sunX = solarSystem.xCenter + solarSystem.unitSize * planets[0].getOrbitX()[0];\n+        double sunY = solarSystem.yCenter + solarSystem.unitSize * planets[0].getOrbitY()[0];\n+\n+        for(int i = 0; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[0].getOrbitX()[i]) - sunX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[0].getOrbitY()[i]) - sunY));\n+            t.setNode(planetObj[0]);\n+            movementSun.getChildren().add(t);\n+        }\n+\n+\n+        SequentialTransition orbitMercury = new SequentialTransition();\n+\n+        double mercuryX = solarSystem.xCenter + solarSystem.unitSize * planets[1].getOrbitX()[0];\n+        double mercuryY = solarSystem.yCenter + solarSystem.unitSize * planets[1].getOrbitY()[0];\n+\n+        for(int i = 0; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[1].getOrbitX()[i]) - mercuryX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[1].getOrbitY()[i]) - mercuryY));\n+            t.setNode(planetObj[1]);\n+            orbitMercury.getChildren().add(t);\n+        }\n+\n+        SequentialTransition orbitVenus = new SequentialTransition();\n+\n+        double venusX = solarSystem.xCenter + solarSystem.unitSize * planets[2].getOrbitX()[0];\n+        double venusY = solarSystem.yCenter + solarSystem.unitSize * planets[2].getOrbitY()[0];\n+\n+        for(int i = 0; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[2].getOrbitX()[i]) - venusX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[2].getOrbitY()[i]) - venusY));\n+            t.setNode(planetObj[2]);\n+            orbitVenus.getChildren().add(t);\n+        }\n+\n+        SequentialTransition orbitEarth = new SequentialTransition();\n+\n+        double earthX = solarSystem.xCenter + solarSystem.unitSize * planets[3].getOrbitX()[0];\n+        double earthY = solarSystem.yCenter + solarSystem.unitSize * planets[3].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[3].getOrbitX()[i]) - earthX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[3].getOrbitY()[i]) - earthY));\n+            t.setNode(planetObj[3]);\n+            orbitEarth.getChildren().add(t);\n+        }\n+\n+        SequentialTransition orbitMoon = new SequentialTransition();\n+\n+        double moonX = solarSystem.xCenter + solarSystem.unitSize * planets[4].getOrbitX()[0];\n+        double moonY = solarSystem.yCenter + solarSystem.unitSize * planets[4].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[4].getOrbitX()[i]) - moonX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[4].getOrbitY()[i]) - moonY));\n+            t.setNode(planetObj[4]);\n+            orbitMoon.getChildren().add(t);\n+        }\n+\n+        SequentialTransition orbitMars = new SequentialTransition();\n+\n+        double marsX = solarSystem.xCenter + solarSystem.unitSize * planets[5].getOrbitX()[0];\n+        double marsY = solarSystem.yCenter + solarSystem.unitSize * planets[5].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[5].getOrbitX()[i]) - marsX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[5].getOrbitY()[i]) - marsY));\n+            t.setNode(planetObj[5]);\n+            orbitMars.getChildren().add(t);\n+        }\n+\n+        SequentialTransition orbitJupiter = new SequentialTransition();\n+\n+        double jupiterX = solarSystem.xCenter + solarSystem.unitSize * planets[6].getOrbitX()[0];\n+        double jupiterY = solarSystem.yCenter + solarSystem.unitSize * planets[6].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[6].getOrbitX()[i]) - jupiterX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[6].getOrbitY()[i]) - jupiterY));\n+            t.setNode(planetObj[6]);\n+            orbitJupiter.getChildren().add(t);\n+        }\n+\n+        SequentialTransition orbitSaturn = new SequentialTransition();\n+\n+        double saturnX = solarSystem.xCenter + solarSystem.unitSize * planets[7].getOrbitX()[0];\n+        double saturnY = solarSystem.yCenter + solarSystem.unitSize * planets[7].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[7].getOrbitX()[i]) - saturnX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[7].getOrbitY()[i]) - saturnY));\n+            t.setNode(planetObj[7]);\n+            orbitSaturn.getChildren().add(t);\n+        }\n+\n+\n+        SequentialTransition orbitTitan = new SequentialTransition();\n+\n+        double titanX = solarSystem.xCenter + solarSystem.unitSize * planets[8].getOrbitX()[0];\n+        double titanY = solarSystem.yCenter + solarSystem.unitSize * planets[8].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[8].getOrbitX()[i]) - titanX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[8].getOrbitY()[i]) - titanY));\n+            t.setNode(planetObj[8]);\n+            orbitTitan.getChildren().add(t);\n+        }\n+\n+        SequentialTransition trajectorySpacecraft = new SequentialTransition();\n+\n+        double spacecraftX = solarSystem.xCenter + solarSystem.unitSize * planets[11].getOrbitX()[0];\n+        double spacecraftY = solarSystem.yCenter + solarSystem.unitSize * planets[11].getOrbitY()[0];\n+\n+        for(int i = 1; i < n; i++){\n+            TranslateTransition t = new TranslateTransition();\n+            t.setDuration(Duration.millis(duration));\n+            t.setToX(Math.round(solarSystem.xCenter + solarSystem.unitSize * planets[11].getOrbitX()[i]) - spacecraftX);\n+            t.setToY((Math.round(solarSystem.yCenter + solarSystem.unitSize * planets[11].getOrbitY()[i]) - spacecraftY));\n+            t.setNode(solarSystem.spacecraft);\n+            trajectorySpacecraft.getChildren().add(t);\n+        }\n+\n+        movementSun.setCycleCount(100);\n+        orbitMercury.setCycleCount(100);\n+        orbitVenus.setCycleCount(100);\n+        orbitEarth.setCycleCount(100);\n+        orbitMoon.setCycleCount(100);\n+        orbitMars.setCycleCount(100);\n+        orbitJupiter.setCycleCount(100);\n+        orbitSaturn.setCycleCount(100);\n+        orbitTitan.setCycleCount(100);\n+        trajectorySpacecraft.setCycleCount(100);\n+\n+        movementSun.play();\n+        orbitMercury.play();\n+        orbitVenus.play();\n+        orbitEarth.play();\n+        orbitMoon.play();\n+        orbitMars.play();\n+        orbitJupiter.play();\n+        orbitSaturn.play();\n+        orbitTitan.play();\n+        trajectorySpacecraft.play();\n \n     }\n }"
  },
  {
    "sha": "b815e14f1f65352cdd98dccf115dc53831e5ccae",
    "filename": "src/Visualization/SidePane.java",
    "status": "modified",
    "additions": 13,
    "deletions": 35,
    "changes": 48,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/SidePane.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/SidePane.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/SidePane.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,9 +1,6 @@\n package Visualization;\n \n-import javafx.scene.image.Image;\n-import javafx.scene.image.ImageView;\n import javafx.scene.layout.Pane;\n-import javafx.scene.control.Button;\n import javafx.scene.Group;\n import javafx.scene.paint.Color;\n import javafx.scene.text.Font;\n@@ -38,31 +35,6 @@ public SidePane()\n             sidePaneGroup.getChildren().add(background);\n     }\n \n-    /**\n-        Add a new button to the pane\n-        @param x x-coordinate of the button on the pane\n-        @param y y-coordinate of the button on the pane\n-     */\n-    public void addButton(double x, double y)\n-    {\n-        Button button = new Button();\n-\n-        Image imageButton = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Button.png\"));\n-        ImageView imageViewButton = new ImageView(imageButton);\n-\n-        imageViewButton.setFitHeight(80);\n-        imageViewButton.setPreserveRatio(true);\n-        //location of the button\n-        button.setTranslateX(x);\n-        button.setTranslateY(y);\n-        //Size of the button\n-        button.setPrefSize(80, 80);\n-        button.setStyle(\"-fx-background-color: gray;\");\n-        button.setGraphic(imageViewButton);\n-\n-        sidePaneGroup.getChildren().add(button);\n-    }\n-\n     /**\n      * Add a new label to the pane\n      * @param s name of the label\n@@ -91,13 +63,19 @@ public void addLabel(String s, double x, double y, Color c)\n     */\n     public Group getPane()\n     {\n-        addButton(100, 40);\n-        addLabel(\"Date: \", 40, 200, Color.RED);\n-        addLabel(\"01-04-2020\", 40, 225, Color.BLACK);\n-        addLabel(\"Distance from Earth: \", 40, 400, Color.RED);\n-        addLabel(\"0 m\", 40, 425, Color.BLACK);\n-        addLabel(\"Distance from Titan: \", 40, 600, Color.RED);\n-        addLabel(\"143350707,46 m\", 40, 625, Color.BLACK);\n+        addLabel(\"Start Date: \", 40, 100, Color.BLUE);\n+        addLabel(\"01-04-2020\", 40, 125, Color.BLACK);\n+        addLabel(\"End Date: \", 40, 200, Color.BLUE);\n+        addLabel(\"01-04-2021\", 40, 225, Color.BLACK);\n+        addLabel(\"Mass of the Probe: \", 40, 300, Color.BLUE);\n+        addLabel(\"15000 kg\", 40, 325, Color.BLACK);\n+        addLabel(\"Coordinates of Titan: \", 40, 400, Color.BLUE);\n+        addLabel(\"X: \", 35, 425, Color.BLUE);\n+        addLabel(\"6.333e+11 km\", 60, 425, Color.BLACK);\n+        addLabel(\"Y: \", 35, 450, Color.BLUE);\n+        addLabel(\"-1.352e+12 km\", 60, 450, Color.BLACK);\n+        addLabel(\"Z: \", 35, 475, Color.BLUE);\n+        addLabel(\"-2.135e+09 km\", 60, 475, Color.BLACK);\n         addLabel(\"□ 1 unit = 1 AU\", 70, 850, Color.WHITE);\n         return sidePaneGroup;\n     }"
  },
  {
    "sha": "6144ca52c239187265b1135829385f217335b325",
    "filename": "src/Visualization/SolarSystem.java",
    "status": "modified",
    "additions": 19,
    "deletions": 17,
    "changes": 36,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/SolarSystem.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/SolarSystem.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/SolarSystem.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -8,39 +8,41 @@\n import javafx.scene.layout.Pane;\n import javafx.scene.input.ScrollEvent;\n \n-public class SolarSystem extends Application\n-{\n+public class SolarSystem extends Application {\n \n     @Override\n-    public void start(Stage stage)\n-    {\n+    public void start(Stage stage) {\n \n-        stage.setTitle(\"Visualization.SolarSystem\");\n+        stage.setTitle(\"SolarSystem\");\n \n-        BorderPane root = new BorderPane();             //Set border layout to the root\n-        Scene scene = new Scene(root, Color.BLACK);\n+        Pane center = new Pane();\n+        center.setStyle(\"-fx-background-color:black\");\n+        Pane right = new Pane();\n \n+        BorderPane root = new BorderPane();             //Border layout\n+        Scene scene = new Scene(root, Color.BLACK);\n         SolarSystemPane planets = new SolarSystemPane();\n         SidePane panel = new SidePane();\n \n         //Add solar system (CENTER) and side pane (RIGHT) to root\n-        Pane center = new Pane();\n-            center.setStyle(\"-fx-background-color:black\");\n-            center.getChildren().add(planets.getPane());\n-            root.setCenter(center);\n+        //center.getChildren().add(planets);\n+        center.getChildren().add(planets.getPane());\n+        right.getChildren().add(panel.getPane());\n \n-        Pane right = new Pane();\n-            right.getChildren().add(panel.getPane());\n-            root.setRight(right);\n+        root.setCenter(center);\n+        root.setRight(right);\n \n-        //Control mouse events on pane\n-        SceneGestures sceneGestures = new SceneGestures(planets.getPane());\n+        //Control mouse movements on pane\n+        SceneGestures sceneGestures = new SceneGestures(planets.getZoomPane(), planets);\n         center.addEventFilter(ScrollEvent.ANY, sceneGestures.getOnScrollEventHandler());\n         center.setOnMousePressed(sceneGestures.getOnEnteredEventHandler());\n         center.setOnMouseDragged(sceneGestures.getOnDragEventHandler());\n \n+        planets.movement.move();\n+\n         stage.setScene(scene);\n         stage.setFullScreen(true);\n         stage.show();\n     }\n-}\n\\ No newline at end of file\n+\n+}"
  },
  {
    "sha": "97781223de65ba395442f6933fc36ec3946b9ef4",
    "filename": "src/Visualization/SolarSystemPane.java",
    "status": "modified",
    "additions": 164,
    "deletions": 92,
    "changes": 256,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/SolarSystemPane.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/SolarSystemPane.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/SolarSystemPane.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,31 +1,47 @@\n package Visualization;\n \n+import PhysicsEngine.Planet;\n+import javafx.animation.PathTransition;\n+import javafx.animation.TranslateTransition;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n import javafx.scene.Group;\n import javafx.scene.canvas.Canvas;\n import javafx.scene.canvas.GraphicsContext;\n import javafx.scene.image.Image;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Pane;\n import javafx.scene.paint.Color;\n import javafx.scene.paint.ImagePattern;\n import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Ellipse;\n+import javafx.scene.shape.Rectangle;\n import javafx.scene.text.Font;\n import javafx.scene.text.FontPosture;\n+import javafx.scene.text.FontWeight;\n import javafx.scene.control.Label;\n+import javafx.scene.transform.Rotate;\n+import javafx.scene.transform.Translate;\n+import javafx.util.Duration;\n \n-/**\n- * Pane containing the solar system\n-*/\n-public class SolarSystemPane\n-{\n+\n+public class SolarSystemPane extends Pane {\n+\n+    DoubleProperty myScale = new SimpleDoubleProperty(2.0); //to enable zooming also here\n \n     Group solarSystem;\n     ZoomablePane space;\n     Canvas grid;\n     MovingPlanets movement;\n+\n     int height;\n     int width;\n+\n     double xCenter;\n     double yCenter;\n+\n     double unitSize;\n+\n     Circle sun;\n     Circle mercury;\n     Circle venus;\n@@ -35,40 +51,49 @@\n     Circle jupiter;\n     Circle saturn;\n     Circle titan;\n-    Spacecraft spacecraft;\n \n-    /**\n-     * Constructor\n-     */\n-    public SolarSystemPane()\n-    {\n+    Rectangle spacecraft;\n+\n+    Circle[] circles;\n+\n+    Planet [] planets;\n+\n+    //Constructor\n+    public SolarSystemPane() {\n+\n         solarSystem = new Group();\n \n+        this.getChildren().add(solarSystem);\n+\n         height = 1000;\n         width = 1150;\n \n         space = new ZoomablePane();\n-            space.setPrefSize(width, height);\n-            space.setStyle(\"-fx-background-color:black;\");\n+        space.setPrefSize(width, height);\n+        space.setStyle(\"-fx-background-color:black;\");\n \n         solarSystem.getChildren().add(space);\n \n         //Coordinates of the center\n         xCenter = space.getPrefWidth()/2;   //xCenter = 575.0\n         yCenter = space.getPrefHeight()/2;  //yCenter = 500.0\n \n-        spacecraft = new Spacecraft();\n+        circles = new Circle[9];\n+\n+        planets = Planet.planets;\n \n-        movement = new MovingPlanets();\n+        //init movement class with duration of each movement and pane\n+        movement = new MovingPlanets(200, this);\n     }\n \n     /**\n      * Add a grid to the canvas (1 unit = 1 AU)\n-     * 20 x 23 = units of the grid\n+     * SCALING PURPOSES ONLY (can be deleted later)\n      */\n-    public void addGrid()\n-    {\n-        grid = new Canvas(width, height);\n+    //20 x 23 = measurements of the grid in units\n+    public void addGrid() {\n+\n+        grid = new Canvas(width*2, height*2);\n \n         //Set the graphics of the grid\n         GraphicsContext gc = grid.getGraphicsContext2D();\n@@ -77,39 +102,38 @@ public void addGrid()\n \n         //Draw grid lines\n         unitSize = 50;\n-        for( double i=unitSize; i < width; i+=unitSize)\n-        {\n-            gc.strokeLine( i, 0, i, height); //Vertical lines = 40\n-            gc.strokeLine( 0, i, width, i);  //Horizontal lines = 46\n+        for( double i=unitSize; i < width*2; i+=unitSize) {\n+            gc.strokeLine( i, 0, i, height*2); //Vertical lines = 40\n+            gc.strokeLine( 0, i, width*2, i);  //Horizontal lines = 46\n         }\n \n-        space.getChildren().add(grid);\n+        solarSystem.getChildren().add(grid);\n     }\n \n     public Canvas getGrid() { return grid; }\n \n     /**\n-     * Method to convert km into AU\n+     * Method to convert km into AU - change into m to AU\n      */\n-    public double fromKmToAU(double km)\n-    {\n-        return km/1.496e+8;\n+    public double fromMToAU(double m) {\n+        double AU = m*6.6846e-12;\n+        return AU;\n     }\n \n+    //Add planets to solar system\n+    //1 unit of the grid = 50 pixels = 1 AU\n+    //Coordinates of the planets = 50 * planet's distance from the sun (AU)\n     /**\n-     * Add 'planet name' to the solar system\n+     * Add 'planet name'\n      * Add -/+ depending on the quadrant of the cartesian plane the planet is in\n-     * Coordinates of the planets = 50 (1 unit of the grid = 50 pixels = 1 AU) * planet's distance from the sun (AU)\n-     * The planets are initialized with their coordinates on 01-04-2020\n      * @param x x-coordinate of the planet = AU from sun\n      * @param y y-coordinate of the planet = AU from sun\n      */\n-   public void addSun(double x, double y)\n-   {\n+   public void addSun(double x, double y) {\n        double xSun = xCenter + x;\n        double ySun = yCenter + y;\n        sun = new Circle(xSun, ySun, 10);\n-       Image imageSun = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Sun.png\"));\n+       Image imageSun = new Image(getClass().getResourceAsStream(\"Resources/Sun.png\"));\n        ImagePattern imagePatternSun = new ImagePattern(imageSun);\n        sun.setFill(imagePatternSun);\n \n@@ -120,17 +144,17 @@ public void addSun(double x, double y)\n        labelSun.setTranslateX(xSun - 3);            //Setting the position\n        labelSun.setTranslateY(ySun - 15);\n \n-       space.getChildren().add(labelSun);\n-       space.getChildren().add(sun);\n+\n+       solarSystem.getChildren().add(sun);\n+       circles[0] = sun;\n    }\n \n    //0.39 AU\n-   public void addMercury(double x, double y)\n-   {\n+   public void addMercury(double x, double y) {\n        double xMercury = xCenter + unitSize * x;\n        double yMercury = yCenter + unitSize * y;\n-       mercury = new Circle(xMercury, yMercury, 2);\n-       Image imageMercury = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Mercury.png\"));\n+       Circle mercury = new Circle(xMercury, yMercury, 2);\n+       Image imageMercury = new Image(getClass().getResourceAsStream(\"Resources/Mercury.png\"));\n        ImagePattern imagePatternMercury = new ImagePattern(imageMercury);\n        mercury.setFill(imagePatternMercury);\n \n@@ -141,133 +165,181 @@ public void addMercury(double x, double y)\n        labelMercury.setTranslateX(xMercury - 5);        //Setting the position\n        labelMercury.setTranslateY(yMercury - 7);\n \n-       space.getChildren().add(labelMercury);\n-       space.getChildren().add(mercury);\n+       solarSystem.getChildren().add(mercury);\n+       circles[1] = mercury;\n    }\n \n    public Circle getMercury() {return mercury; }\n \n    //0.72 AU\n-   public void addVenus(double x, double y)\n-   {\n+   public void addVenus(double x, double y) {\n        double xVenus = xCenter + unitSize * x;\n        double yVenus = yCenter + unitSize * y;\n-       venus = new Circle(xVenus, yVenus, 4);\n-       Image imageVenus = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Venus.png\"));\n+       Circle venus = new Circle(xVenus, yVenus, 4);\n+       Image imageVenus = new Image(getClass().getResourceAsStream(\"Resources/Venus.png\"));\n        ImagePattern imagePatternVenus = new ImagePattern(imageVenus);\n        venus.setFill(imagePatternVenus);\n \n-       space.getChildren().add(venus);\n+       solarSystem.getChildren().add(venus);\n+       circles[2] = venus;\n+\n    }\n \n    public Circle getVenus() {return venus; }\n \n    //1 AU\n-   public void addEarth(double x, double y)\n-   {\n+   public void addEarth(double x, double y) {\n        double xEarth = xCenter + unitSize * x;\n        double yEarth = yCenter + unitSize * y;\n        System.out.println(xEarth);\n        System.out.println(yEarth);\n-       earth = new Circle(xEarth, yEarth, 2);\n-       Image imageEarth = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Earth.png\"));\n+       Circle earth = new Circle(xEarth, yEarth, 2);\n+       Image imageEarth = new Image(getClass().getResourceAsStream(\"Resources/Earth.png\"));\n        ImagePattern imagePatternEarth = new ImagePattern(imageEarth);\n        earth.setFill(imagePatternEarth);\n \n-       space.getChildren().add(earth);\n+       solarSystem.getChildren().add(earth);\n+       circles[3] = earth;\n    }\n \n-   public Circle getEarth() {return earth; }\n+//   public Circle getEarth() {return earth; }\n \n-   public void addMoon(double x, double y)\n-   {\n+   public void addMoon(double x, double y) {\n        double xMoon = xCenter + unitSize * x;\n        double yMoon = yCenter + unitSize * y;\n-       moon = new Circle(xMoon, yMoon, 1);\n-       Image imageMoon = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Moon.png\"));\n+       Circle moon = new Circle(xMoon, yMoon, 1);\n+       Image imageMoon = new Image(getClass().getResourceAsStream(\"Resources/Moon.png\"));\n        ImagePattern imagePatternMoon = new ImagePattern(imageMoon);\n        moon.setFill(imagePatternMoon);\n \n-       space.getChildren().add(moon);\n+       solarSystem.getChildren().add(moon);\n+       circles[4] = moon;\n    }\n \n     public Circle getMoon() {return moon; }\n \n    //1.52 AU\n-   public void addMars(double x, double y)\n-   {\n+   public void addMars(double x, double y) {\n        double xMars = xCenter + unitSize * x;\n        double yMars = yCenter + unitSize * y;\n-       mars = new Circle(xMars, yMars, 2);\n-       Image imageMars = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Mars.png\"));\n+       Circle mars = new Circle(xMars, yMars, 2);\n+       Image imageMars = new Image(getClass().getResourceAsStream(\"Resources/Mars.png\"));\n        ImagePattern imagePatternMars = new ImagePattern(imageMars);\n        mars.setFill(imagePatternMars);\n \n-       space.getChildren().add(mars);\n+       solarSystem.getChildren().add(mars);\n+       circles[5] = mars;\n    }\n \n     public Circle getMars() {return mars; }\n \n    //5.2 AU\n-   public void addJupiter(double x, double y)\n-   {\n+   public void addJupiter(double x, double y) {\n        double xJupiter = xCenter + unitSize * x;\n        double yJupiter = yCenter + unitSize * y;\n        jupiter = new Circle(xJupiter, yJupiter, 7);\n-       Image imageJupiter = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Jupiter.png\"));\n+       Image imageJupiter = new Image(getClass().getResourceAsStream(\"Resources/Jupiter.png\"));\n        ImagePattern imagePatternJupiter = new ImagePattern(imageJupiter);\n        jupiter.setFill(imagePatternJupiter);\n \n-       space.getChildren().add(jupiter);\n+       solarSystem.getChildren().add(jupiter);\n+       circles[6] = jupiter;\n    }\n \n    public Circle getJupiter() {return jupiter; }\n \n    //9.54 AU\n-   public void addSaturn(double x, double y)\n-   {\n+   public void addSaturn(double x, double y) {\n        double xSaturn = xCenter + unitSize * x;\n        double ySaturn = yCenter + unitSize * y;\n        saturn = new Circle(xSaturn, ySaturn, 5);\n-       Image imageSaturn = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Saturn.png\"));\n+       Image imageSaturn = new Image(getClass().getResourceAsStream(\"Resources/Saturn.png\"));\n        ImagePattern imagePatternSaturn = new ImagePattern(imageSaturn);\n        saturn.setFill(imagePatternSaturn);\n \n-       space.getChildren().add(saturn);\n+       System.out.println(\"saturn x \" + xSaturn + \" saturn y \" + ySaturn);\n+\n+       solarSystem.getChildren().add(saturn);\n+       circles[7] = saturn;\n    }\n \n     public Circle getSaturn() {return saturn; }\n \n-   public void addTitan(double x, double y)\n-   {\n+   public void addTitan(double x, double y) {\n        double xTitan = xCenter + unitSize * x;\n        double yTitan = yCenter + unitSize * y;\n        titan = new Circle(xTitan, yTitan, 1);\n-       Image imageTitan = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Titan.png\"));\n+       Image imageTitan = new Image(getClass().getResourceAsStream(\"Resources/Titan.png\"));\n        ImagePattern imagePatternTitan = new ImagePattern(imageTitan);\n        titan.setFill(imagePatternTitan);\n \n-       space.getChildren().add(titan);\n+       System.out.println(\"titan x \" + xTitan + \" titan y \" + yTitan);\n+\n+       solarSystem.getChildren().add(titan);\n+       circles[8] = titan;\n+   }\n+\n+   public void addSpacecraft(double x, double y){\n+       double xSpacecraft = xCenter + unitSize * x;\n+       double ySpacecraft = yCenter + unitSize * y;\n+\n+       System.out.println(\"spacecraft \" + x + \" \" + y);\n+       System.out.println(\"spacecraft \" + xSpacecraft + \" \" + ySpacecraft);\n+\n+       spacecraft = new Rectangle(xSpacecraft, ySpacecraft, 3.0, 5.0);\n+       Image imageSpacecraft = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Spacecraft.png\"));\n+       ImagePattern imagePatternSpacecraft = new ImagePattern(imageSpacecraft);\n+       spacecraft.setFill(imagePatternSpacecraft);\n+\n+       solarSystem.getChildren().add(spacecraft);\n+\n    }\n \n     public Circle getTitan() {return titan; }\n \n-    /**\n-     * @return the ZoomablePane containing all the planets of the solar system\n-     */\n-   public ZoomablePane getPane()\n-   {\n+   //Returns all the planets to the solar system\n+   public SolarSystemPane getPane() {\n         addGrid();\n-        addSun(0, 0);\n-        addMercury(0.39, -0.39);\n-        addVenus( -0.72, 0.72);\n-        addEarth(-1, -1);\n-        addMoon(-1 + fromKmToAU(384.400), -1.2 + fromKmToAU(384.400)); //Add the distance from the earth to the moon\n-        addMars(1.52, -1.52);\n-        addJupiter(5.2, -5.2);\n-        addSaturn(9.54, -9.54);\n-        addTitan(11, -11);  //Add the distance from Saturn to Titan\n-        spacecraft.addSpacecraft(xCenter - 51.5, yCenter - 56);\n-        return space;\n+        addSun(0, 0); //addSun(fromKMToAU(physics.sun.getX()), fromKmToAU(physics.sun.getY()));\n+        addMercury(planets[1].getInitX(), planets[1].getInitY());\n+        addVenus(planets[2].getInitX(), planets[2].getInitY());\n+        addEarth(planets[3].getInitX(), planets[3].getInitY());\n+        addMoon((planets[4].getInitX()+0.05), (planets[4].getInitY()+0.05)); //Add the distance from the earth to the moon\n+        addMars(planets[5].getInitX(), planets[5].getInitY());\n+        addJupiter(planets[6].getInitX(), planets[6].getInitY());\n+        addSaturn(planets[7].getInitX(), planets[7].getInitY());\n+        addTitan((planets[8].getInitX()+0.05), (planets[8].getInitY()+0.05)); //Add the distance from Saturn to Titan\n+        addSpacecraft(planets[11].getInitX(), planets[11].getInitY());\n+        return this;\n    }\n-}\n\\ No newline at end of file\n+\n+   public ZoomablePane getZoomPane(){\n+\n+       return space;\n+   }\n+\n+    /**\n+     * Set x/y pivot points\n+     * @param x x-coordinate of the pivot point\n+     * @param y y-coordinate of the pivot point\n+     */\n+    public void setPivot( double x, double y) {\n+        setTranslateX(getTranslateX()-x);\n+        setTranslateY(getTranslateY()-y);\n+    }\n+\n+    /**\n+     * Set x/y scale\n+     * @param scale\n+     */\n+    public void setScale( double scale) {\n+        myScale.set(scale);\n+    }\n+\n+    public double getScale() {\n+        return myScale.get();\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "f67fb28fe75626f604a007226675754426ad0a09",
    "filename": "src/Visualization/Spacecraft.java",
    "status": "removed",
    "additions": 0,
    "deletions": 65,
    "changes": 65,
    "blob_url": "https://github.com/ovmo/titan/blob/742c162a074ccc9c317fed62db05c5834ad93726/src/Visualization/Spacecraft.java",
    "raw_url": "https://github.com/ovmo/titan/raw/742c162a074ccc9c317fed62db05c5834ad93726/src/Visualization/Spacecraft.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/Spacecraft.java?ref=742c162a074ccc9c317fed62db05c5834ad93726",
    "patch": "@@ -1,65 +0,0 @@\n-package Visualization;\n-\n-import javafx.animation.TranslateTransition;\n-import javafx.scene.image.Image;\n-import javafx.scene.paint.ImagePattern;\n-import javafx.scene.transform.Rotate;\n-import javafx.scene.shape.Rectangle;\n-import javafx.util.Duration;\n-\n-/**\n- * Class of the spacecraft to be launched\n- */\n-public class Spacecraft\n-{\n-\n-    Rectangle spacecraft;\n-    ZoomablePane pane;\n-    double velocity;           //Velocity of the spacecraft\n-\n-    /**\n-     * Constructor\n-     */\n-    public Spacecraft()\n-    {\n-        pane = new ZoomablePane();\n-    }\n-\n-    /**\n-     * Add spacecraft to space\n-     * @param x x-coordinate of the spacecraft into space\n-     * @param y y-coordinate of the spacecraft into space\n-    */\n-     public void addSpacecraft(double x, double y)\n-     {\n-        spacecraft = new Rectangle (x, y, 3.0, 5.0);\n-        Image imageSpacecraft = new Image(getClass().getResourceAsStream(\"/Visualization/Resources/Spacecraft.png\"));\n-        ImagePattern imagePatternSpacecraft = new ImagePattern(imageSpacecraft);\n-        spacecraft.setFill(imagePatternSpacecraft);\n-\n-        //Rotation of the spacecraft\n-        Rotate rotate = new Rotate();\n-        rotate.setAngle(30);                //Angle for the rotation\n-        rotate.setPivotX(x - 2);            //Setting pivot points for the rotation (The coordinates are shifted to fit the rotation)\n-        rotate.setPivotY(y + 5);\n-\n-        spacecraft.getTransforms().add(rotate);\n-\n-        pane.getChildren().add(spacecraft);\n-    }\n-\n-    /**\n-     * Launch spacecraft into space\n-     */\n-    public void fly()\n-    {\n-        TranslateTransition fly = new TranslateTransition();\n-        fly.setToX(4.23e+00 - (-9.84e-01));\n-        fly.setToY(-9.08e+00 - (-1.69e-01));\n-        fly.setDuration(Duration.seconds(10));\n-        fly.setCycleCount(100);\n-        fly.setAutoReverse(true);\n-        fly.setNode(spacecraft);\n-        fly.play();\n-    }\n-}"
  },
  {
    "sha": "3aa42578d580497cf9696de705603ba6de705f3f",
    "filename": "src/Visualization/StartVisuals.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/StartVisuals.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/StartVisuals.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/StartVisuals.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -5,10 +5,10 @@\n /**\n  * Main class to start the 2D Model of the solar system\n */\n-public class Main\n+public class StartVisuals\n {\n-    public static void main(String[] args)\n+    public static void start()\n     {\n-        Application.launch(SolarSystem.class, args);\n+        Application.launch(SolarSystem.class);\n     }\n }",
    "previous_filename": "src/Visualization/Main.java"
  },
  {
    "sha": "d6e917908d80d15203bb5c0d80717f408bb6b515",
    "filename": "src/Visualization/ZoomablePane.java",
    "status": "modified",
    "additions": 46,
    "deletions": 45,
    "changes": 91,
    "blob_url": "https://github.com/ovmo/titan/blob/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/ZoomablePane.java",
    "raw_url": "https://github.com/ovmo/titan/raw/428493d09dced3143776f8a78c10ec1e17728b67/src/Visualization/ZoomablePane.java",
    "contents_url": "https://api.github.com/repos/ovmo/titan/contents/src/Visualization/ZoomablePane.java?ref=428493d09dced3143776f8a78c10ec1e17728b67",
    "patch": "@@ -1,48 +1,46 @@\n package Visualization;\n \n+import Visualization.SolarSystemPane;\n import javafx.beans.property.DoubleProperty;\n import javafx.beans.property.SimpleDoubleProperty;\n import javafx.event.EventHandler;\n import javafx.scene.input.MouseEvent;\n import javafx.scene.input.ScrollEvent;\n import javafx.scene.layout.Pane;\n import javafx.scene.transform.Translate;\n+import javafx.scene.input.MouseDragEvent;\n \n-/**\n- * Class that implements a zoomable pane\n-*/\n-class ZoomablePane extends Pane\n-{\n+class ZoomablePane extends Pane {\n \n     DoubleProperty myScale = new SimpleDoubleProperty(2.0);\n \n-    /**\n-     * Constructor\n-    */\n-    public ZoomablePane()\n-    {\n+    public ZoomablePane() {\n         setPrefSize(10000, 10000);\n \n-        //Add scale transform\n+        // add scale transform\n         scaleXProperty().bind(myScale);\n         scaleYProperty().bind(myScale);\n+\n     }\n \n-    public double getScale() { return myScale.get(); }\n+    public double getScale() {\n+        return myScale.get();\n+    }\n \n     /**\n      * Set x/y scale\n      * @param scale\n      */\n-    public void setScale(double scale) { myScale.set(scale); }\n+    public void setScale( double scale) {\n+        myScale.set(scale);\n+    }\n \n     /**\n      * Set x/y pivot points\n      * @param x x-coordinate of the pivot point\n      * @param y y-coordinate of the pivot point\n      */\n-    public void setPivot( double x, double y)\n-    {\n+    public void setPivot( double x, double y) {\n         setTranslateX(getTranslateX()-x);\n         setTranslateY(getTranslateY()-y);\n     }\n@@ -51,8 +49,7 @@ public void setPivot( double x, double y)\n /**\n  * Mouse drag context\n  */\n-class DragContext\n-{\n+class DragContext {\n \n     double mouseAnchorX;\n     double mouseAnchorY;\n@@ -65,18 +62,19 @@ public void setPivot( double x, double y)\n /**\n  * Listeners for making the scene's canvas draggable and zoomable\n  */\n-class SceneGestures\n-{\n+class SceneGestures {\n \n     private static final double MAX_SCALE = 10.0d;\n     private static final double MIN_SCALE = .1d;\n \n     private DragContext sceneDragContext = new DragContext();\n \n     ZoomablePane canvas;\n+    SolarSystemPane solarSystem;\n \n-    public SceneGestures(ZoomablePane canvas) {\n+    public SceneGestures(ZoomablePane canvas, SolarSystemPane solarSystem) {\n         this.canvas = canvas;\n+        this.solarSystem = solarSystem;\n     }\n \n     public EventHandler<MouseEvent> getOnEnteredEventHandler() {\n@@ -94,18 +92,17 @@ public SceneGestures(ZoomablePane canvas) {\n     /**\n      * Mouse pressed handler: to get starting position of drag\n      */\n-    EventHandler<MouseEvent> onEnteredEventHandler = new EventHandler<MouseEvent>()\n-    {\n+    EventHandler<MouseEvent> onEnteredEventHandler = new EventHandler<MouseEvent>() {\n         @Override\n-        public void handle(MouseEvent event)\n-        {\n+        public void handle(MouseEvent event) {\n \n-            //Starting coordinates for dragging\n+            //starting coordinates for dragging\n             sceneDragContext.mouseAnchorX = event.getX();\n             sceneDragContext.mouseAnchorY = event.getY();\n \n-            sceneDragContext.translateAnchorX = canvas.getTranslateX();\n-            sceneDragContext.translateAnchorY = canvas.getTranslateY();\n+            sceneDragContext.translateAnchorX = solarSystem.getTranslateX();\n+            sceneDragContext.translateAnchorY = solarSystem.getTranslateY();\n+\n \n             event.consume();\n         }\n@@ -114,8 +111,7 @@ public void handle(MouseEvent event)\n     /**\n      * Mouse drag handler: drag mouse to move pane\n      */\n-    public EventHandler<MouseEvent> onDragEventHandler = new EventHandler<MouseEvent>()\n-    {\n+    public EventHandler<MouseEvent> onDragEventHandler = new EventHandler<MouseEvent>() {\n         @Override\n         public void handle(MouseEvent event) {\n \n@@ -126,10 +122,10 @@ public void handle(MouseEvent event) {\n             double translateY = sceneDragContext.translateAnchorY - sceneDragContext.mouseAnchorY;\n \n             Translate t = new Translate();\n-            t.setX(translateX/2);\n-            t.setY(translateY/2);\n+            t.setX(translateX/8);\n+            t.setY(translateY/8);\n \n-            canvas.getTransforms().add(t);\n+            solarSystem.getTransforms().add(t);\n \n             event.consume();\n         }\n@@ -138,16 +134,15 @@ public void handle(MouseEvent event) {\n     /**\n      * Mouse wheel handler: zoom to pivot point\n      */\n-    public EventHandler<ScrollEvent> onScrollEventHandler = new EventHandler<>()\n-    {\n+    public EventHandler<ScrollEvent> onScrollEventHandler = new EventHandler<>() {\n \n         @Override\n-        public void handle(ScrollEvent event)\n-        {\n+        public void handle(ScrollEvent event) {\n \n             double delta = 1.2;\n \n-            double scale = canvas.getScale(); //Currently we only use Y, same value is used for X\n+            //double scale = canvas.getScale(); //currently we only use Y, same value is used for X\n+            double scale = solarSystem.getScale(); //currently we only use Y, same value is used for X\n             double oldScale = scale;\n \n             if (event.getDeltaY() < 0)\n@@ -159,20 +154,26 @@ public void handle(ScrollEvent event)\n \n             double f = (scale / oldScale)-1;\n \n-            double dx = (event.getSceneX() - (canvas.getBoundsInParent().getWidth()/2 + canvas.getBoundsInParent().getMinX()));\n-            double dy = (event.getSceneY() - (canvas.getBoundsInParent().getHeight()/2 + canvas.getBoundsInParent().getMinY()));\n+//            double dx = (event.getSceneX() - (canvas.getBoundsInParent().getWidth()/2 + canvas.getBoundsInParent().getMinX()));\n+//            double dy = (event.getSceneY() - (canvas.getBoundsInParent().getHeight()/2 + canvas.getBoundsInParent().getMinY()));\n+\n+            double dx = (event.getSceneX() - (solarSystem.getBoundsInParent().getWidth()/2 + solarSystem.getBoundsInParent().getMinX()));\n+            double dy = (event.getSceneY() - (solarSystem.getBoundsInParent().getHeight()/2 + solarSystem.getBoundsInParent().getMinY()));\n \n-            canvas.setScale(scale);\n+            //canvas.setScale(scale);\n+            solarSystem.setScale(scale);\n \n-            //Pivot value must be untransformed (without scaling)\n-            canvas.setPivot(f*dx, f*dy);\n+            //note: pivot value must be untransformed, i. e. without scaling\n+            //canvas.setPivot(f*dx, f*dy);\n+            solarSystem.setPivot(f*dx, f*dy);\n+\n+            System.out.println(\"zoom\");\n \n             event.consume();\n         }\n     };\n \n-    public static double clamp( double value, double min, double max)\n-    {\n+    public static double clamp( double value, double min, double max) {\n \n         if( Double.compare(value, min) < 0)\n             return min;\n@@ -182,4 +183,4 @@ public static double clamp( double value, double min, double max)\n \n         return value;\n     }\n-}\n\\ No newline at end of file\n+}"
  }
]
