[
  {
    "sha": "7870940d4b85822d6594327e325d4b77469e9797",
    "filename": "WelcomeWindow.java",
    "status": "modified",
    "additions": 476,
    "deletions": 119,
    "changes": 595,
    "blob_url": "https://github.com/Mcc-3/PSD-II-Group-Project/blob/cf26f766d583ef089f0ba684883174514f4cba68/WelcomeWindow.java",
    "raw_url": "https://github.com/Mcc-3/PSD-II-Group-Project/raw/cf26f766d583ef089f0ba684883174514f4cba68/WelcomeWindow.java",
    "contents_url": "https://api.github.com/repos/Mcc-3/PSD-II-Group-Project/contents/WelcomeWindow.java?ref=cf26f766d583ef089f0ba684883174514f4cba68",
    "patch": "@@ -1,181 +1,538 @@\n /**\n- * Created by Rebecca Burke\n- * The below program is the welcome window of our console. It's purpose is to amalgamate the games we have coded and\n- * display them as playing options for the user to select from,\n+ * Created by Rebecca Burke, Mark Campbell on 12/02/2021\n+ * The program below is the welcome window for our gaming console. It's a class which allows us to amalgamate\n+ * and display each of the games within our project. Its main functionality includes Welcoming the users, providing\n+ * them with a selection of game, giving the user some background on each game and executing each game.\n  **/\n+\n+// Importing the necessary libraries\n+import javax.swing.*;\n import java.util.ArrayList;\n-import java.util.InputMismatchException;\n+import java.util.Arrays;\n import java.util.Random;\n import java.util.Scanner;\n-public class WelcomeWindow\n+\n+public class WelcomeWindowV6\n {\n-   // Declaring the scanner class\n+   // Declaring the scanner class which will allow us to read and use the users input\n    static Scanner keyboard = new Scanner(System.in);\n \n-   // Declaring the variable gameSelection\n+   // Declaring the necessary variables for the class\n+   // Declaring the variable gameSelection which will store the users choice of game\n    private static int gameSelection;\n+   // Declaring a boolean variable invalid which will be used in do-while loops to prevent the user from moving\n+   // forward until their entry is valid.\n+   static boolean invalid = true;\n+   // Declaring the back option variable which will allow the user to revert back to the welcome window\n+   static int backOption;\n \n-   // Declaring a method which will welcome the user to the application,\n-   private static void welcome()\n-   {\n-      // Welcoming the user to the game\n-      System.out.println(\"\\n\\t\\t\\tWelcome to **INSERT NAME**. \\n**INSERT NAME** is a console which allows you to play \\ndrinking games with your friends virtually and safely.\");\n+   // Declaring a method which will welcome the user to the gaming application\n+   private static void welcome(){\n+      // Welcoming the user to the game application\n+      JOptionPane.showMessageDialog(null, \"Welcome to Divoc Gaming\\n\");\n+      // Giving a brief description of the application\n+      JOptionPane.showMessageDialog(null, \"Divoc is a console which allows \\nyou to play \" +\n+              \"drinking games with your \\nfriends virtually and safely.\");\n+   }//Method: Welcome\n \n-   }\n-   // prompt them to enter their selected game and stores the\n-   // entry from the keyboard in the variable gameSelection\n-   private static void options()\n-   {\n-      boolean pass = false;\n+\n+   // Declaring a method which will provide the user with the gaming options available and allow them to make their\n+   // selection.\n+   private static void options(){\n+\n+      // Declaring a do-while loop which will prevent the user from moving forward until their entry is valid\n       do\n       {\n-         // Listing the games to the user\n-         System.out.println(\"\\n\\t\\t**INSERT NAME** supports the games:\");\n-         System.out.println(\"1.)\\tBattleShots 2.0\"); // Mark's game\n-         System.out.println(\"2.)\\tRachel's game - Description\"); // Rachel's game\n-         System.out.println(\"3.)\\tSeong's game - Description\"); // Seong's game\n-         System.out.println(\"4.)\\tRebecca's game - Description\"); // Rebecca's game\n-         System.out.println(\"5.)\\tSurprise me! - We will decide on a game for you to play.\");\n-         System.out.println(\"6.)\\tExit\");\n-         System.out.print(\"Please select a method of play by entering the number associated with your chosen game from the menu above : \");\n-\n-         // Declaring the variable gameSelection and assigning it to the users game selection\n+         // Resetting the invalid variable\n+         invalid = true;\n+\n+         // Declaring a try-catch statement to prevent the user from entering anything other than the numbers\n+         // 1, 2, 3, 4, 5 or 6\n          try\n          {\n-            gameSelection = keyboard.nextInt();\n-            if (gameSelection >= 0)\n-            {\n-            pass = true;\n-            }else\n-            {\n-               System.out.println(\"Input must be greater that O\");\n-            }//if user inputs 0 or less\n-         } catch (InputMismatchException error1)\n+            // Reading the users entry from the JOptionPane and storing it in the gameSelection variable.\n+            gameSelection = Integer.parseInt(JOptionPane.showInputDialog(null,\n+                    \"Divoc Gaming supports the games\\n\" +\n+                            \"1.) BattleShots 2.0\\n\" +\n+                            \"2.) Rachel's game - Description\\n\" +\n+                            \"3.) Seong's game - Description \\n\" +\n+                            \"4.) Truth or Drink\\n\" +\n+                            \"5.) Surprise me!\\n\" +\n+                            \"6.) Exit\\n\" +\n+                            \"Please select a game by entering the number\\n \" +\n+                            \"associated with your chosen game from the menu above.\",\n+                    \"Options Window\", JOptionPane.INFORMATION_MESSAGE));//Question for amount of rounds\n+            // Declaring an if statement which checks if the entry is one of the menu options and marks it as\n+            // valid if it is.\n+            if (Arrays.asList(1,2,3,4,5,6).contains(gameSelection)){\n+               // Setting the invalid variable to false only if gameSelction in list.\n+               invalid = false;\n+            };//if\n+         }//try\n+         catch (Exception entryError)\n          {\n-            System.out.println(\"Selection must be a number between 1 and 6\");\n-            keyboard.nextLine();\n-            pass = false;\n-         }//If user inputs a letter\n-      } while (pass != true);\n-   }\n+            // Informing the user that the system doesn't accept a non-numeric format at this stage and asking them\n+            // to re-enter.\n+            JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\"+\n+                    \"Please enter a number from the options provided.\");\n+         }//catch\n+\n+      } while (invalid == true); //do-while: gameSelection\n+\n+   }// Method: options\n+\n \n    public static void main(String[] args)\n    {\n+      // Calling the welcome method to welcome the user to the application.\n       welcome();\n+      // Calling the gaming options and prompting the user to make their selection.\n       options();\n \n-      // Setting up a terminator\n+      // Setting up a terminator for the following while loop\n       String terminator = \"play\";\n \n-      // Declaring a while loop which allows the user to continue playing after completing their initial game\n+      // Declaring a while loop which allows the user to play multiple games/rounds back to back\n       while (terminator != \"exit\")\n       {\n          // Declaring a switch statement which will call the game that the user has chosen to play\n          switch (gameSelection)\n          {\n-\n+            // Calling Mark's game\n             case 1:\n-               // Mark's game code\n-               BattleShots2 battleshots = new BattleShots2();\n-               battleshots.battleshotsStart();\n-               // Asking the user if they wish to select another game\n+               // Informing the user that they have selected BattleShots 2.0 and providing them with\n+               // a brief description of the game.\n+               JOptionPane.showMessageDialog(null, \"BattleShots 2.0\\n\" + \"Mark's game description\");\n+\n+               // Resetting the invalid variable\n+               invalid = true;\n+\n+               // Declaring a do-while loop to prevent the user from moving on until their entry is valid\n+               do\n+               {\n+                  // Declaring a try-catch statement to prevent the user from entering anything other than\n+                  // the numbers 1 and 2\n+                  try\n+                  {\n+                     // Asking the user if they want to continue with their game selection\n+                     backOption = Integer.parseInt(JOptionPane.showInputDialog(null, \"Would you like to continue with this game?\\n\" +\n+                             \"Please press 1 to enter the game and 2 to go back to the user menu.\"));\n+\n+                     // Declaring an if statement which compares the user entry with the list\n+                     // of acceptable entries\n+                     if (Arrays.asList(1,2).contains(backOption)){\n+\n+                        // Setting the invalid variable to false only if backOption is in the list.\n+                        invalid = false;\n+                     };//if\n+                  }//try\n+                  catch (Exception entryError)\n+                  {\n+                     // Informing the user that the game cannot  accept a non-numeric format at this stage.\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please enter a number.\");\n+                  }//catch\n+\n+               } while (invalid == true);//do-while\n+\n+               // Declaring a switch statement which will run the users selection\n+               switch (backOption)\n+               {\n+                  // If the user selects 1 they will enter the BattleShots 2.0 game\n+                  case 1:\n+                     // Informing the user that they are entering BattleShots 2.0\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to enter BattleShots 2.0\");\n+                     Battleshots2 battleshots = new Battleshots2();\n+                     battleshots.battleshotsStart();\n+                     break;\n+                  //If the user selects 2 the will return to the main gaming menu.\n+                  case 2:\n+                     // Informing the user that they are returning to the games menu.\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to return to the main menu.\");\n+                     break;\n+                  default:\n+                     // Declaring a default message which informs the user that their selection is out of range\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please select either 1 to continue or 2 to go back.\");\n+                     break;\n+               }// inner switch: BattleShots 2.0\n+\n+               // Calling the options method to bring the user back to the main gaming menu and asking if they\n+               // wish to select another game\n                options();\n                break;\n // --------------------------------------------------------------------------------------------------------------------\n             // Calling Rachel's game to play\n             case 2:\n-               // Rachel's game code\n-               System.out.println(\"Rachel\");\n-                  /*\n-                  Enter your code here\n-                   */\n-               // Asking the user if they wish to select another game\n+               // Informing the user that they have selected Rachel's game and providing them with\n+               // a brief description of the game.\n+               JOptionPane.showMessageDialog(null, \"Rachel's Game\\n\" + \"Rachel's Game Description\");\n+\n+               // Resetting the invalid variable to true\n+               invalid = true;\n+\n+               // Declaring a do-while loop to prevent the user from moving on until their entry is valid\n+               do\n+               {\n+                  // Declaring a try-catch statement to prevent the user from entering anything other than\n+                  // the numbers 1 and 2\n+                  try\n+                  {\n+                     // Asking the user if they want to continue with their game selection\n+                     backOption = Integer.parseInt(JOptionPane.showInputDialog(null, \"Would you like to continue with this game?\\n\" +\n+                             \"Please press 1 to enter the game and 2 to go back to the user menu.\"));\n+\n+                     // Declaring an if statement which compares the user entry with the list\n+                     // of acceptable entries\n+                     if (Arrays.asList(1,2).contains(backOption)){\n+\n+                        // Setting the invalid variable to false only if backOption is in the list.\n+                        invalid = false;\n+                     };//if\n+                  }//try\n+                  catch (Exception entryError)\n+                  {\n+                     // Informing the user that the game cannot  accept a non-numeric format at this stage.\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please enter a number.\");\n+                  }//catch\n+\n+               } while (invalid == true);//do-while\n+\n+               // Declaring a switch statement which will run the users selection\n+               switch (backOption)\n+               {\n+                  // If the user selects 1 they will enter the Rachel's game\n+                  case 1:\n+                     // Informing the user that they are entering Rachel's game\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to enter Rachel's game\");\n+                     /*\n+\n+\n+                     Enter your code here\n+\n+                     */\n+                     break;\n+                  //If the user selects 2 the will return to the main gaming menu.\n+                  case 2:\n+                     // Informing the user that they are returning to the games menu.\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to return to the main menu.\");\n+                     break;\n+                  default:\n+                     // Declaring a default message which informs the user that their selection is out of range\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please select either 1 to continue or 2 to go back.\");\n+                     break;\n+               }// inner switch: Rachel's game\n+\n+               // Calling the options method to bring the user back to the main gaming menu and asking if they\n+               // wish to select another game\n                options();\n                break;\n // --------------------------------------------------------------------------------------------------------------------\n-            // Calling Seong's game to play\n+            // Calling Seong's game\n             case 3:\n-               // Seong's game code\n-               System.out.println(\"Seong\");\n-                  /*\n-                  Enter your code here\n-                   */\n-               // Asking the user if they wish to select another game\n+               // Informing the user that they have selected Seong's game and providing them with\n+               // a brief description of the game.\n+               JOptionPane.showMessageDialog(null, \"Seong's Game\\n\" + \"Seong's Game Description\");\n+\n+               // Resetting the invalid variable to true\n+               invalid = true;\n+\n+               // Declaring a do-while loop to prevent the user from moving on until their entry is valid\n+               do\n+               {\n+                  // Declaring a try-catch statement to prevent the user from entering anything other than\n+                  // the numbers 1 and 2\n+                  try\n+                  {\n+                     // Asking the user if they want to continue with their game selection\n+                     backOption = Integer.parseInt(JOptionPane.showInputDialog(null, \"Would you like to continue with this game?\\n\" +\n+                             \"Please press 1 to enter the game and 2 to go back to the user menu.\"));\n+\n+                     // Declaring an if statement which compares the user entry with the list\n+                     // of acceptable entries\n+                     if (Arrays.asList(1,2).contains(backOption)){\n+\n+                        // Setting the invalid variable to false only if backOption is in the list.\n+                        invalid = false;\n+                     };//if\n+                  }//try\n+                  catch (Exception entryError)\n+                  {\n+                     // Informing the user that the game cannot  accept a non-numeric format at this stage.\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please enter a number.\");\n+                  }//catch\n+\n+               } while (invalid == true);//do-while\n+\n+               // Declaring a switch statement which will run the users selection\n+               switch (backOption)\n+               {\n+                  // If the user selects 1 they will enter the Seong's game\n+                  case 1:\n+                     // Informing the user that they are entering Seong's game\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to enter Seong's game\");\n+                     /*\n+\n+\n+                     Enter your code here\n+\n+\n+                     */\n+                     break;\n+                  //If the user selects 2 the will return to the main gaming menu.\n+                  case 2:\n+                     // Informing the user that they are returning to the games menu.\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to return to the main menu.\");\n+                     break;\n+                  default:\n+                     // Declaring a default message which informs the user that their selection is out of range\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please select either 1 to continue or 2 to go back.\");\n+                     break;\n+\n+               }// inner switch: Seong's game\n+\n+               // Calling the options method to bring the user back to the main gaming menu and asking if they\n+               // wish to select another game\n                options();\n                break;\n // --------------------------------------------------------------------------------------------------------------------\n             // Calling the truth or drink game to play\n             case 4:\n-               // Rebecca's game code\n-               System.out.println(\"Rebecca\");\n-                  /*\n-                  Enter your code here\n-                   */\n+               // Informing the user that they have selected Truth or Drink and providing them with\n+               // a brief description of the game.\n+               JOptionPane.showMessageDialog(null, \"Truth or Drink\\n\" +\n+                       \"In this game you will be provided with a number of questions to which you are expected\\n\" +\n+                       \"answer truthfully. If you do not wish to answer the question you may forfeit by taking a drink.\");\n+\n+               // Resetting the invalid variable to true\n+               invalid = true;\n+\n+               // Declaring a do-while loop to prevent the user from moving on until their entry is valid\n+               do\n+               {\n+                  // Declaring a try-catch statement to prevent the user from entering anything other than\n+                  // the numbers 1 and 2\n+                  try\n+                  {\n+                     // Asking the user if they want to continue with their game selection\n+                     backOption = Integer.parseInt(JOptionPane.showInputDialog(null, \"Would you like to continue with this game?\\n\" +\n+                             \"Please press 1 to enter the game and 2 to go back to the user menu.\"));\n+\n+                     // Declaring an if statement which compares the user entry with the list\n+                     // of acceptable entries\n+                     if (Arrays.asList(1,2).contains(backOption)){\n+\n+                        // Setting the invalid variable to false only if backOption is in the list.\n+                        invalid = false;\n+                     };//if\n+                  }//try\n+                  catch (Exception entryError)\n+                  {\n+                     // Informing the user that the game cannot  accept a non-numeric format at this stage.\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please enter a number.\");\n+                  }//catch\n \n-               // Asking the user if they wish to select another game\n+               } while (invalid == true);//do-while\n+\n+               // Declaring a switch statement which will run the users selection\n+               switch (backOption)\n+               {\n+                  // If the user selects 1 they will enter the Truth or Drink game\n+                  case 1:\n+                     // Informing the user that they are entering BattleShots 2.0\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to enter the Truth or Drink game\");\n+\n+                     // Declaring the variable playModeTOD which will store the users game mode\n+                     int playModeTOD;\n+\n+                     // Declaring a do-while loop which will prevent the user selecting an option greater than 2\n+                     do\n+                     {\n+                        // Calling  modeSelect method from the TruthOrDrinkV9 class and assigning the selection to playModeTOD\n+                        playModeTOD = TruthOrDrinkV9.modeSelect();\n+\n+                        // Declaring a switch statement which will execute the users chosen mode of play\n+                        switch (playModeTOD)\n+                        {\n+                           // Entering the preset mode of Truth or Drink\n+                           case 1:\n+                              // Informing the user that they have selected the preset mode and asking them to choose their player order\n+                              JOptionPane.showMessageDialog(null, \"You have selected to play with the preset questions.\\n\"+\n+                                      \"Please select your player order and then press enter to begin\");\n+                              // Calling the preDefined method from the TruthOrDrinkV9 class\n+                              TruthOrDrinkV9.preDefined();\n+                              // Informing the user that their current game has ended\n+                              JOptionPane.showMessageDialog(null, \"This is the end of the game.\\n\"+\n+                                      \"Thank you for playing Truth or Drink.\");\n+                              break;\n+                           // Entering the user defined mode of Truth or Drink\n+                           case 2:\n+                              // Informing the user that they have selected the user-defined mode\n+                              JOptionPane.showMessageDialog(null, \"You have selected to play with your own questions.\"+\n+                                      \"\\nYou will now need to decide and enter these into the system.\"+\n+                                      \"\\nDon't worry about the order in which you enter them as they will be shuffled before the game begins.\");\n+                              // Calling the numberOfTruths method from the TruthOrDrinkV9 class\n+                              int noOtruths = TruthOrDrinkV9.numberOfTruths();\n+                              // Calling the user defined method from the TruthOrDrinkV9 class\n+                              TruthOrDrinkV9.userDefined(noOtruths);\n+                              // Informing the user that their current game has ended\n+                              JOptionPane.showMessageDialog(null, \"This is the end of the game. Thank you for playing.\");\n+                              break;\n+                           default:\n+                              // Informing the user that their entry is invalid\n+                              JOptionPane.showMessageDialog(null, \"ERROR - Entry is outside the range of options available.\\n\"+\n+                                      \"Please select from the options above.\");\n+                              break;\n+                        }//Switch:TruthOrDrinkV9\n+\n+                     } while ((TruthOrDrinkV9.gameMode == 0) || (TruthOrDrinkV9.gameMode > 2)); //do\n+\n+                     //##################################################################################################################\n+                     break;\n+                  //If the user selects 2 the will return to the main gaming menu.\n+                  case 2:\n+                     // Informing the user that they are returning to the games menu.\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to return to the main menu.\");\n+                     break;\n+                  default:\n+                     // Declaring a default message which informs the user that their selection is out of range\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please select either 1 to continue or 2 to go back.\");\n+                     break;\n+               }// inner switch: backOption TruthOrDrinkV9\n+\n+               // Calling the options method to bring the user back to the main gaming menu and asking if they\n+               // wish to select another game\n                options();\n                break;\n             // Randomly selecting one of the games for the users to play\n             case 5:\n-               // Surprise me code which randomly generates one of the games to play\n-               System.out.println(\"You have chosen to play 'Surprise me!'.\");\n-               System.out.println(\"We will randomly select a game for you to play.\");\n-               System.out.print(\"\\tWe've chosen...\");\n-\n-               // Declaring an array with the list of game names\n-               ArrayList<String> gamesAvailable = new ArrayList<String>();\n-               // adding the game options\n-               gamesAvailable.add(\"BattleShots 2.0\");\n-               gamesAvailable.add(\"Rachel's game\");\n-               gamesAvailable.add(\"Seong's game\");\n-               gamesAvailable.add(\"Rebecca's game\");\n-\n-\n-\n-               // Declaring randomSelect as an instance of Random\n-               Random randomSelect = new Random();\n-\n-               // Randomly selecting a truth using randomSelect\n-               int gameSelected = randomSelect.nextInt(gamesAvailable.size());\n-\n-               // printing the selected game on screen\n-               System.out.println(gamesAvailable.get(gameSelected) +\"\\n\");\n-               keyboard.nextLine();\n-\n-               // Accessing the game which has been randomly selected\n-               // If the first element in the array list has been selected then we want to play Mark's game\n-               if (gameSelected == 0){\n-                  gameSelection=1;\n-               }\n-               // If the second element in the array list has been selected then we want to play Rachel's game\n-               else if (gameSelected==1){\n-                  gameSelection=2;\n-               }\n-               // If the third element in the array list has been selected then we want to play Seong's game\n-               else if (gameSelected==2){\n-                  gameSelection=3;\n-               }\n-               // Else we want to play Rebecca's game\n-               else{\n-                  gameSelection=4;\n-               }\n+               /// Informing the user that they have selected surprise me and providing them with\n+               // a brief description of the game.\n+               JOptionPane.showMessageDialog(null, \"You have chosen to play 'Surprise me!'.\\n\"+\n+                       \"We will randomly select a game for you to play.\");\n+\n+               // Resetting the invalid variable to true\n+               invalid = true;\n+\n+               // Declaring a do-while loop to prevent the user from moving on until their entry is valid\n+               do\n+               {\n+                  // Declaring a try-catch statement to prevent the user from entering anything other than\n+                  // the numbers 1 and 2\n+                  try\n+                  {\n+                     // Asking the user if they want to continue with their game selection\n+                     backOption = Integer.parseInt(JOptionPane.showInputDialog(null, \"Would you like to continue with this option?\\n\" +\n+                             \"Please press 1 to enter the game and 2 to go back to the user menu.\"));\n+\n+                     // Declaring an if statement which compares the user entry with the list\n+                     // of acceptable entries\n+                     if (Arrays.asList(1,2).contains(backOption)){\n+\n+                        // Setting the invalid variable to false only if backOption is in the list.\n+                        invalid = false;\n+                     };//if\n+                  }//try\n+                  catch (Exception entryError)\n+                  {\n+                     // Informing the user that the game cannot  accept a non-numeric format at this stage.\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please enter a number.\");\n+                  }//catch\n+\n+               } while (invalid == true);//do\n+\n+               // Declaring a switch statement which will run the users selection\n+               switch (backOption)\n+               {\n+                  // If the user selects 1 they will enter surprise me\n+                  case 1:\n+                     // Informing the user that they are entering BattleShots 2.0\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to enter Surprise me\");\n+\n+                     // Declaring an array list containing the game options\n+                     ArrayList<String> gamesAvailable = new ArrayList<String>();\n+\n+                     // adding the game options to the array list\n+                     gamesAvailable.add(\"Battleshots 2.0\");\n+                     gamesAvailable.add(\"Rachel's game\");\n+                     gamesAvailable.add(\"Seong's game\");\n+                     gamesAvailable.add(\"Truth or Drink\");\n+\n+                     // Declaring randomSelect as an instance of Random\n+                     Random randomSelect = new Random();\n+\n+                     // Randomly selecting a game using randomSelect\n+                     int gameSelected = randomSelect.nextInt(gamesAvailable.size());\n+\n+                     // Displaying the selected game to the screen\n+                     JOptionPane.showMessageDialog(null, \"We've chosen...\\n\"+\n+                             gamesAvailable.get(gameSelected));\n+\n+                     // Accessing the game that has been randomly selected\n+                     // If the first element in the array list has been selected then we want to play Mark's game\n+                     if (gameSelected == 0)\n+                     {\n+                        gameSelection = 1;\n+                     }\n+                     // If the second element in the array list has been selected then we want to play Rachel's game\n+                     else if (gameSelected == 1)\n+                     {\n+                        gameSelection = 2;\n+                     }\n+                     // If the third element in the array list has been selected then we want to play Seong's game\n+                     else if (gameSelected == 2)\n+                     {\n+                        gameSelection = 3;\n+                     }\n+                     // Else we want to play Rebecca's game\n+                     else\n+                     {\n+                        gameSelection = 4;\n+                     }\n+\n+                     break;\n+                  //If the user selects 2 the will return to the main gaming menu.\n+                  case 2:\n+                     // Informing the user that they are returning to the games menu.\n+                     JOptionPane.showMessageDialog(null, \"You've chosen to return to the main menu.\");\n+                     break;\n+                  default:\n+                     // Declaring a default message which informs the user that their selection is out of range\n+                     JOptionPane.showMessageDialog(null, \"ERROR - Entry Error\\n\" +\n+                             \"Please select either 1 to continue or 2 to go back.\");\n+                     break;\n+               }// inner switch: Surprise me\n+\n+               // Calling the options method to bring the user back to the main gaming menu and asking if they\n+               // wish to select another game\n+               options();\n                break;\n // --------------------------------------------------------------------------------------------------------------------\n             // Exiting the system\n             case 6:\n-               System.out.println(\"We're sorry you're leaving, but thank you for playing!\");\n-               // Setting the terminator to play so that the while loop will continue\n+               // Informing the user that they are leaving the applicaiton\n+               JOptionPane.showMessageDialog(null, \"We're sorry you're leaving, but thank you for playing!\");\n+\n+               // Setting the terminator to exit so that the while loop will stop\n                terminator = \"exit\";\n                break;\n             // Declaring a default message for any entries which aren't in the cases\n             default:\n-               // Asking the user to enter a valid input\n-               System.out.println(\"Your entry is invalid! Please enter a selection from the options available.\");\n-               // Assigning the gameSelection variable to the users game selection\n-               gameSelection = keyboard.nextInt();\n+               // Informing the user that their input is invalid\n+               JOptionPane.showMessageDialog(null, \"Your entry is invalid! Please enter a selection from the options available.\");\n+\n+               // Calling the options method to bring the user back to the main gaming menu and asking if they\n+               // wish to select another game\n+               options();\n                break;\n          } // switch statement for accessing the games\n       } // While loop for exiting the system\n-\n    }//main\n }//class"
  }
]
