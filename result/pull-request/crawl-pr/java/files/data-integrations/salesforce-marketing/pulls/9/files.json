[
  {
    "sha": "6f45f653e65bf797075c82d3a0355d65169b4abd",
    "filename": "README.md",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/README.md",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/README.md",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/README.md?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -3,7 +3,10 @@\n \n # Overview\n \n-Contains CDAP pipeline plugins for Salesforce Marketing Cloud\n+Contains CDAP pipeline plugins for Salesforce Marketing Cloud. Following plugins are available in this repository.\n+                                                               \n+* [Salesforce Marketing Cloud Source](docs/MarketingCloud-batchsource.md)\n+* [Salesforce Marketing Cloud Data Extension Sink](docs/SalesforceDataExtension-batchsink.md)\n \n # Contact\n \n@@ -14,7 +17,7 @@ CDAP User Group and Development Discussions:\n * [cdap-user@googlegroups.com](https://groups.google.com/d/forum/cdap-user)\n \n The *cdap-user* mailing list is primarily for users using the product to develop\n-applications or building plugins for appplications. You can expect questions from\n+applications or building plugins for applications. You can expect questions from\n users, release announcements, and any other discussions that we think will be helpful\n to the users.\n "
  },
  {
    "sha": "654f7370aa6066ef317a61f42b467ae0a44744ee",
    "filename": "docs/MarketingCloud-batchsource.md",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/docs/MarketingCloud-batchsource.md",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/docs/MarketingCloud-batchsource.md",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/docs/MarketingCloud-batchsource.md?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,105 @@\n+# Salesforce Marketing Cloud Source\n+\n+Description\n+-----------\n+\n+Reads from one or multiple objects withing Salesforce Marketing Cloud depending on the mode values set for this plugin. \n+In case of `Multi Object` mode, the source will output a record for each row from the object it reads, with each record\n+containing an additional field that holds the name of the object from which the record came from. In case of \n+`Single Object` mode, this additional field will not be there in the output. In addition, for each object that will be \n+read, this plugin will set pipeline arguments where the key is `multisink.[objectname]` and the value is the schema of \n+the object.\n+\n+Properties\n+----------\n+\n+**Reference Name**: Name used to uniquely identify this source for lineage, annotating metadata, etc.\n+\n+**Data Retrieval Mode**: Mode of data retrieval. The mode can be one of two values: \n+\n+`Multi Object` - will allow user to fetch data for multiple data extensions,  \n+\n+`Single Object` - will allow user to fetch data for single data extension.\n+\n+**Object**: Specify the object for which data to be fetched. This can be one of following values: \n+\n+`Data Extension` - will allow user to fetch data for a single Data Extension object,\n+\n+`Email` - will allow user to fetch data for Email object,\n+\n+`Mailing List` - will allow user to fetch data for Mailing List object,\n+\n+`Bounce Event` - will allow user to fetch Tracking Bounce Events,\n+\n+`Open Event` - will allow user to fetch Tracking Open Events,\n+\n+`Unsub Event` - will allow user to fetch Tracking UnSubscribe Events,\n+\n+`Sent Event` - will allow user to fetch Tracking Sent Events,\n+\n+`UnSent Event` - will allow user to fetch Tracking UnSent Events.\n+\n+Note, this value will be ignored if the Mode is set to `Multi Object`.  \n+\n+**Data Extension External Key**: Specify the data extension key from which data to be fetched. Note, this value will \n+be ignored in following two cases: \n+\n+* If the Mode is set to `Multi Object`\n+* If the selected object name is other than `Data Extension`. \n+\n+**Object List**: Specify the comma-separated list of objects for which data to be fetched; for example: \n+'Object1,Object2'. This can be one or more values from following possible values: \n+\n+`Data Extension` - will allow user to fetch data for a single Data Extension object,\n+\n+`Email` - will allow user to fetch data for Email object,\n+\n+`Mailing List` - will allow user to fetch data for Mailing List object\n+\n+`Bounce Event` - will allow user to fetch Tracking Bounce Events,\n+\n+`Open Event` - will allow user to fetch Tracking Open Events,\n+\n+`Unsub Event` - will allow user to fetch Tracking UnSubscribe Events,\n+\n+`Sent Event` - will allow user to fetch Tracking Sent Events,\n+\n+`UnSent Event` - will allow user to fetch Tracking UnSent Events.\n+\n+Note, this value will be ignored if the Mode is set to `Single Object`.\n+\n+**Data Extension External Keys**: Specify the data extension keys from which data to be fetched; for example: \n+'Key1,Key2'. Note, this value will be ignored in following two cases: \n+\n+* If the Mode is set to `Single Object`,\n+\n+* If the selected object list does not contain `Data Extension` as one of the objects.\n+\n+**Table Name Field**: The name of the field that holds the object name to which the data belongs to. Must not be the \n+name of any column for any of the objects that will be read. Defaults to `tablename`. In case of `Data Extension` \n+object, this field will have value in `dataextension_[Data Extension Key]` format. Note, the Table name field value \n+will be ignored if the Mode is set to `Single Object`.\n+\n+**Filter**: The filter selection criteria. eg: eventDate > '2010-01-01' and subscriberKey = 1001\n+\n+**Client ID**: OAuth2 client ID associated with an installed package in the Salesforce Marketing Cloud.\n+\n+**Client Secret**: TOAuth2 client secret associated with an installed package in the Salesforce Marketing Cloud.\n+\n+**Authentication Base URI**: Authentication Base URL associated for the Server-to-Server API integration. \n+For example, `https://instance.auth.marketingcloudapis.com/`\n+\n+**SOAP API Endpoint**: The SOAP Endpoint URL associated for the Server-to-Server API integration. For example, \n+`https://instance.soap.marketingcloudapis.com/Service.asmx`\n+\n+**REST API Base URI**: The REST API Base URL associated for the Server-to-Server API integration. For example, \n+`https://instance.rest.marketingcloudapis.com/`\n+\n+**Error handling:** Whether to fail the pipeline if an error encountered while reading records. This can be one of \n+following values:\n+\n+`Stop on error` - will fail the pipeline if an error encountered,  \n+\n+`Skip on error` - will not fail the pipeline even if an error encountered and will continue the pipeline.\n+\n+Note: the default value is `Skip on error`.\n\\ No newline at end of file"
  },
  {
    "sha": "3c1f4a423d684a6f3fbc70866d8badb497d3a8d6",
    "filename": "examples/example_sfmc_multiobject_pipeline-cdap-data-pipeline.json",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/examples/example_sfmc_multiobject_pipeline-cdap-data-pipeline.json",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/examples/example_sfmc_multiobject_pipeline-cdap-data-pipeline.json",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/examples/example_sfmc_multiobject_pipeline-cdap-data-pipeline.json?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,101 @@\n+{\n+    \"artifact\": {\n+        \"name\": \"cdap-data-pipeline\",\n+        \"version\": \"6.2.1\",\n+        \"scope\": \"SYSTEM\"\n+    },\n+    \"description\": \"Data Pipeline Application\",\n+    \"name\": \"example_sfmc_multiobject_pipeline\",\n+    \"config\": {\n+        \"resources\": {\n+            \"memoryMB\": 2048,\n+            \"virtualCores\": 1\n+        },\n+        \"driverResources\": {\n+            \"memoryMB\": 2048,\n+            \"virtualCores\": 1\n+        },\n+        \"connections\": [\n+            {\n+                \"from\": \"Salesforce-Marketing\",\n+                \"to\": \"File\"\n+            }\n+        ],\n+        \"comments\": [],\n+        \"postActions\": [],\n+        \"properties\": {},\n+        \"processTimingEnabled\": true,\n+        \"stageLoggingEnabled\": false,\n+        \"stages\": [\n+            {\n+                \"name\": \"Salesforce-Marketing\",\n+                \"plugin\": {\n+                    \"name\": \"MarketingCloud\",\n+                    \"type\": \"batchsource\",\n+                    \"label\": \"Salesforce Marketing\",\n+                    \"artifact\": {\n+                        \"name\": \"salesforce-marketing-plugins\",\n+                        \"version\": \"1.2.2-SNAPSHOT\",\n+                        \"scope\": \"USER\"\n+                    },\n+                    \"properties\": {\n+                        \"queryMode\": \"Multi Object\",\n+                        \"objectList\": \"Data Extension\",\n+                        \"tableNameField\": \"tablename\",\n+                        \"failOnError\": \"false\",\n+                        \"referenceName\": \"SFMC\",\n+                        \"clientId\": \"${SFMC_CLIENT_ID}\",\n+                        \"clientSecret\": \"${SFMC_CLIENT_SECRET}\",\n+                        \"authEndpoint\": \"${SFMC_AUTH_URI}\",\n+                        \"soapEndpoint\": \"${SFMC_SOAP_URI}\",\n+                        \"restEndpoint\": \"${SFMC_REST_URI}\",\n+                        \"dataExtensionKeyList\": \"CA397115-F3E1-4180-B7D0-AF91A60E8B2D,CFA3EE8B-320E-4E27-BBCC-CF4291556BE0\"\n+                    }\n+                },\n+                \"outputSchema\": [\n+                    {\n+                        \"name\": \"etlSchemaBody\",\n+                        \"schema\": \"\"\n+                    }\n+                ]\n+            },\n+            {\n+                \"name\": \"File\",\n+                \"plugin\": {\n+                    \"name\": \"File\",\n+                    \"type\": \"batchsink\",\n+                    \"label\": \"File\",\n+                    \"artifact\": {\n+                        \"name\": \"core-plugins\",\n+                        \"version\": \"2.4.1\",\n+                        \"scope\": \"SYSTEM\"\n+                    },\n+                    \"properties\": {\n+                        \"suffix\": \"yyyy-MM-dd-HH-mm\",\n+                        \"format\": \"csv\",\n+                        \"referenceName\": \"SFMCData\",\n+                        \"path\": \"${OUTPUT_DIR}\",\n+                        \"schema\": \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"etlSchemaBody\\\",\\\"fields\\\":[{\\\"name\\\":\\\"subscriber_key\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"campaign_c\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"email_address\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"campaign_a\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"account_unsub\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"campaign_b\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"first__name\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"emailaddress\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"subscriberkey\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"tablename\\\",\\\"type\\\":\\\"string\\\"}]}\"\n+                    }\n+                },\n+                \"outputSchema\": [\n+                    {\n+                        \"name\": \"etlSchemaBody\",\n+                        \"schema\": \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"etlSchemaBody\\\",\\\"fields\\\":[{\\\"name\\\":\\\"subscriber_key\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"campaign_c\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"email_address\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"campaign_a\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"account_unsub\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"campaign_b\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"first__name\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"emailaddress\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"subscriberkey\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"tablename\\\",\\\"type\\\":\\\"string\\\"}]}\"\n+                    }\n+                ],\n+                \"inputSchema\": [\n+                    {\n+                        \"name\": \"Salesforce Marketing\",\n+                        \"schema\": \"\"\n+                    }\n+                ]\n+            }\n+        ],\n+        \"schedule\": \"0 * * * *\",\n+        \"engine\": \"spark\",\n+        \"numOfRecordsPreview\": 100,\n+        \"description\": \"Data Pipeline Application\",\n+        \"maxConcurrentRuns\": 1\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "05471cfb5b4a84ce987d578cb7a437995d747002",
    "filename": "examples/example_sfmc_openevent_withfilter-cdap-data-pipeline.json",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/examples/example_sfmc_openevent_withfilter-cdap-data-pipeline.json",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/examples/example_sfmc_openevent_withfilter-cdap-data-pipeline.json",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/examples/example_sfmc_openevent_withfilter-cdap-data-pipeline.json?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,94 @@\n+{\n+    \"artifact\": {\n+        \"name\": \"cdap-data-pipeline\",\n+        \"version\": \"6.2.1\",\n+        \"scope\": \"SYSTEM\"\n+    },\n+    \"description\": \"\",\n+    \"name\": \"example_sfmc_openevent_withfilter\",\n+    \"config\": {\n+        \"resources\": {\n+            \"memoryMB\": 2048,\n+            \"virtualCores\": 1\n+        },\n+        \"driverResources\": {\n+            \"memoryMB\": 2048,\n+            \"virtualCores\": 1\n+        },\n+        \"connections\": [\n+            {\n+                \"from\": \"Salesforce-Marketing\",\n+                \"to\": \"File\"\n+            }\n+        ],\n+        \"comments\": [],\n+        \"postActions\": [],\n+        \"properties\": {},\n+        \"processTimingEnabled\": true,\n+        \"stageLoggingEnabled\": false,\n+        \"stages\": [\n+            {\n+                \"name\": \"Salesforce-Marketing\",\n+                \"plugin\": {\n+                    \"name\": \"MarketingCloud\",\n+                    \"type\": \"batchsource\",\n+                    \"label\": \"Salesforce Marketing\",\n+                    \"artifact\": {\n+                        \"name\": \"salesforce-marketing-plugins\",\n+                        \"version\": \"1.2.2-SNAPSHOT\",\n+                        \"scope\": \"USER\"\n+                    },\n+                    \"properties\": {\n+                        \"queryMode\": \"Single Object\",\n+                        \"objectName\": \"Open Event\",\n+                        \"failOnError\": \"false\",\n+                        \"referenceName\": \"SFMC\",\n+                        \"clientId\": \"${SFMC_CLIENT_ID}\",\n+                        \"clientSecret\": \"${SFMC_CLIENT_SECRET}\",\n+                        \"authEndpoint\": \"${SFMC_AUTH_URI}\",\n+                        \"soapEndpoint\": \"${SFMC_SOAP_URI}\",\n+                        \"restEndpoint\": \"${SFMC_REST_URI}\",\n+                        \"filter\": \"subscriberKey = 'manoj.muralidharan@verticurl.com' and eventDate > '04-19-2019'\"\n+                    }\n+                },\n+                \"outputSchema\": [\n+                    {\n+                        \"name\": \"etlSchemaBody\",\n+                        \"schema\": \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"etlSchemaBody\\\",\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"sendID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]},{\\\"name\\\":\\\"subscriberKey\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventDate\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventType\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"triggeredSendDefinitionObjectID\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"batchID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]}]}\"\n+                    }\n+                ]\n+            },\n+            {\n+                \"name\": \"File\",\n+                \"plugin\": {\n+                    \"name\": \"File\",\n+                    \"type\": \"batchsink\",\n+                    \"label\": \"File\",\n+                    \"artifact\": {\n+                        \"name\": \"core-plugins\",\n+                        \"version\": \"2.4.1\",\n+                        \"scope\": \"SYSTEM\"\n+                    },\n+                    \"properties\": {\n+                        \"suffix\": \"yyyy-MM-dd-HH-mm\",\n+                        \"format\": \"csv\",\n+                        \"schema\": \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"etlSchemaBody\\\",\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"sendID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]},{\\\"name\\\":\\\"subscriberKey\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventDate\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventType\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"triggeredSendDefinitionObjectID\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"batchID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]}]}\",\n+                        \"referenceName\": \"FILEOUT\",\n+                        \"path\": \"${OUTPUT_DIR}\"\n+                    }\n+                },\n+                \"outputSchema\": \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"etlSchemaBody\\\",\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"sendID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]},{\\\"name\\\":\\\"subscriberKey\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventDate\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventType\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"triggeredSendDefinitionObjectID\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"batchID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]}]}\",\n+                \"inputSchema\": [\n+                    {\n+                        \"name\": \"Salesforce Marketing\",\n+                        \"schema\": \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"etlSchemaBody\\\",\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"sendID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]},{\\\"name\\\":\\\"subscriberKey\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventDate\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"eventType\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"triggeredSendDefinitionObjectID\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"]},{\\\"name\\\":\\\"batchID\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"]}]}\"\n+                    }\n+                ]\n+            }\n+        ],\n+        \"schedule\": \"0 * * * *\",\n+        \"engine\": \"spark\",\n+        \"numOfRecordsPreview\": 100,\n+        \"maxConcurrentRuns\": 1\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "46817a677bdf2dcf7e477aa7d76f8423e8467c9b",
    "filename": "icons/MarketingCloud-batchsource.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/icons/MarketingCloud-batchsource.png",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/icons/MarketingCloud-batchsource.png",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/icons/MarketingCloud-batchsource.png?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545"
  },
  {
    "sha": "d7b51369f3495a341bec7b1d79d6b25919e71e28",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 29,
    "deletions": 35,
    "changes": 64,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/pom.xml",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/pom.xml",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/pom.xml?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -30,12 +30,13 @@\n     <surefire.redirectTestOutputToFile>true</surefire.redirectTestOutputToFile>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <!-- version properties -->\n-    <cdap.version>6.1.0-SNAPSHOT</cdap.version>\n+    <cdap.version>6.1.1</cdap.version>\n+    <cdap.plugin.version>2.3.4</cdap.plugin.version>\n     <junit.version>4.12</junit.version>\n     <hadoop.version>2.3.0</hadoop.version>\n     <hydrator.version>2.2.0</hydrator.version>\n-    <salesforce.marketing.cloud.version>1.4.0</salesforce.marketing.cloud.version>\n-    <cxf.version>3.1.9</cxf.version>\n+    <guava.version>27.0.1-jre</guava.version>\n+    <salesforce.marketing.cloud.version>1.5.0</salesforce.marketing.cloud.version>\n   </properties>\n \n   <repositories>\n@@ -57,22 +58,26 @@\n   </pluginRepositories>\n \n   <dependencies>\n-    <dependency>\n-      <groupId>io.cdap.cdap</groupId>\n-      <artifactId>cdap-api</artifactId>\n-      <version>${cdap.version}</version>\n-      <!--scope>provided</scope-->\n-    </dependency>\n     <dependency>\n       <groupId>io.cdap.cdap</groupId>\n       <artifactId>cdap-etl-api</artifactId>\n       <version>${cdap.version}</version>\n-      <!--scope>provided</scope-->\n     </dependency>\n     <dependency>\n       <groupId>io.cdap.plugin</groupId>\n       <artifactId>hydrator-common</artifactId>\n-      <version>${hydrator.version}</version>\n+      <version>${cdap.plugin.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+      <version>${guava.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.cdap.cdap</groupId>\n+      <artifactId>hydrator-test</artifactId>\n+      <version>${cdap.version}</version>\n+      <scope>provided</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.hadoop</groupId>\n@@ -187,39 +192,21 @@\n       </exclusions>\n     </dependency>\n \n-\n     <dependency>\n       <groupId>com.github.salesforce-marketingcloud</groupId>\n       <artifactId>fuelsdk</artifactId>\n       <version>${salesforce.marketing.cloud.version}</version>\n     </dependency>\n-\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-frontend-jaxws</artifactId>\n-      <version>${cxf.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-bindings-soap</artifactId>\n-      <version>${cxf.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-transports-http</artifactId>\n-      <version>${cxf.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-ws-security</artifactId>\n-      <version>${cxf.version}</version>\n-    </dependency>\n-\n     <dependency>\n       <groupId>commons-lang</groupId>\n       <artifactId>commons-lang</artifactId>\n       <version>2.6</version>\n     </dependency>\n+    <dependency>\n+      <groupId>commons-collections</groupId>\n+      <artifactId>commons-collections</artifactId>\n+      <version>3.2.1</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>jcl-over-slf4j</artifactId>\n@@ -234,6 +221,12 @@\n       <version>${junit.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>2.24.0</version>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n \n@@ -392,7 +385,7 @@\n       <plugin>\n         <groupId>org.apache.felix</groupId>\n         <artifactId>maven-bundle-plugin</artifactId>\n-        <version>3.3.0</version>\n+        <version>3.5.1</version>\n         <extensions>true</extensions>\n         <configuration>\n           <instructions>\n@@ -413,6 +406,7 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n       <plugin>\n         <groupId>io.cdap</groupId>\n         <artifactId>cdap-maven-plugin</artifactId>"
  },
  {
    "sha": "748e4aa29299de651c9712980f0b3819629ae940",
    "filename": "src/main/java/com/custom/fuelsdk/ETClickEvent.java",
    "status": "added",
    "additions": 189,
    "deletions": 0,
    "changes": 189,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/ETClickEvent.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/ETClickEvent.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/com/custom/fuelsdk/ETClickEvent.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.custom.fuelsdk;\n+\n+import com.custom.fuelsdk.internal.ClickEvent;\n+import com.exacttarget.fuelsdk.ETSoapObject;\n+import com.exacttarget.fuelsdk.annotations.ExternalName;\n+import com.exacttarget.fuelsdk.annotations.InternalName;\n+import com.exacttarget.fuelsdk.annotations.SoapObject;\n+import com.exacttarget.fuelsdk.internal.EventType;\n+\n+import java.util.Date;\n+\n+/**\n+ * An <code>ETClickEvent</code> object represents information pertaining to the\n+ * click events of an email message  in the Salesforce Marketing Cloud.\n+ */\n+@SoapObject(internalType = ClickEvent.class)\n+public class ETClickEvent extends ETSoapObject {\n+\n+  @InternalName(\"objectID\")\n+  private String id;\n+\n+  @ExternalName(\"sendID\")\n+  private Integer sendID;\n+\n+  @ExternalName(\"subscriberKey\")\n+  private String subscriberKey;\n+\n+  @ExternalName(\"eventDate\")\n+  private Date eventDate;\n+\n+  @ExternalName(\"eventType\")\n+  private EventType eventType;\n+\n+  @ExternalName(\"triggeredSendDefinitionObjectID\")\n+  private String triggeredSendDefinitionObjectID;\n+\n+  @ExternalName(\"batchID\")\n+  private Integer batchID;\n+\n+  @ExternalName(\"urlid\")\n+  private Integer urlid;\n+\n+  @ExternalName(\"url\")\n+  private String url;\n+\n+  /**\n+   * @return the id\n+   */\n+  @Override\n+  public String getId() {\n+    return id;\n+  }\n+\n+  /**\n+   * @param id the id to set\n+   */\n+  @Override\n+  public void setId(String id) {\n+    this.id = id;\n+  }\n+\n+  /**\n+   * @return the sendID\n+   */\n+  public Integer getSendID() {\n+    return sendID;\n+  }\n+\n+  /**\n+   * @param sendID the sendID to set\n+   */\n+  public void setSendID(Integer sendID) {\n+    this.sendID = sendID;\n+  }\n+\n+  /**\n+   * @return the subscriberKey\n+   */\n+  public String getSubscriberKey() {\n+    return subscriberKey;\n+  }\n+\n+  /**\n+   * @param subscriberKey the subscriberKey to set\n+   */\n+  public void setSubscriberKey(String subscriberKey) {\n+    this.subscriberKey = subscriberKey;\n+  }\n+\n+  /**\n+   * @return the eventDate\n+   */\n+  public Date getEventDate() {\n+    return eventDate;\n+  }\n+\n+  /**\n+   * @param eventDate the eventDate to set\n+   */\n+  public void setEventDate(Date eventDate) {\n+    this.eventDate = eventDate;\n+  }\n+\n+  /**\n+   * @return the eventType\n+   */\n+  public EventType getEventType() {\n+    return eventType;\n+  }\n+\n+  /**\n+   * @param eventType the eventType to set\n+   */\n+  public void setEventType(EventType eventType) {\n+    this.eventType = eventType;\n+  }\n+\n+  /**\n+   * @return the triggeredSendDefinitionObjectID\n+   */\n+  public String getTriggeredSendDefinitionObjectID() {\n+    return triggeredSendDefinitionObjectID;\n+  }\n+\n+  /**\n+   * @param triggeredSendDefinitionObjectID the triggeredSendDefinitionObjectID to set\n+   */\n+  public void setTriggeredSendDefinitionObjectID(String triggeredSendDefinitionObjectID) {\n+    this.triggeredSendDefinitionObjectID = triggeredSendDefinitionObjectID;\n+  }\n+\n+  /**\n+   * @return the batchID\n+   */\n+  public Integer getBatchID() {\n+    return batchID;\n+  }\n+\n+  /**\n+   * @param batchID the batchID to set\n+   */\n+  public void setBatchID(Integer batchID) {\n+    this.batchID = batchID;\n+  }\n+\n+  /**\n+   * @return the urlid\n+   */\n+  public Integer getUrlid() {\n+    return urlid;\n+  }\n+\n+  /**\n+   * @param urlid the urlid to set\n+   */\n+  public void setUrlid(Integer urlid) {\n+    this.urlid = urlid;\n+  }\n+\n+  /**\n+   * @return the url\n+   */\n+  public String getUrl() {\n+    return url;\n+  }\n+\n+  /**\n+   * @param url the url to set\n+   */\n+  public void setUrl(String url) {\n+    this.url = url;\n+  }\n+\n+}"
  },
  {
    "sha": "8a210787a9343a60b3bf24c3de5e9afa41d1b1e7",
    "filename": "src/main/java/com/custom/fuelsdk/ETNotSentEvent.java",
    "status": "added",
    "additions": 155,
    "deletions": 0,
    "changes": 155,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/ETNotSentEvent.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/ETNotSentEvent.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/com/custom/fuelsdk/ETNotSentEvent.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.custom.fuelsdk;\n+\n+import com.exacttarget.fuelsdk.ETSoapObject;\n+import com.exacttarget.fuelsdk.annotations.ExternalName;\n+import com.exacttarget.fuelsdk.annotations.InternalName;\n+import com.exacttarget.fuelsdk.annotations.SoapObject;\n+import com.exacttarget.fuelsdk.internal.EventType;\n+import com.exacttarget.fuelsdk.internal.NotSentEvent;\n+\n+import java.util.Date;\n+\n+/**\n+ * An <code>ETNotSentEvent</code> object represents information pertaining to the notsent events\n+ * of an email message in the Salesforce Marketing Cloud.\n+ * This oject type is currently not supported in FuelSDK and hence the provided here.\n+ */\n+@SoapObject(internalType = NotSentEvent.class)\n+public class ETNotSentEvent extends ETSoapObject {\n+  @InternalName(\"objectID\")\n+  private String id;\n+\n+  @ExternalName(\"sendID\")\n+  private Integer sendID;\n+\n+  @ExternalName(\"subscriberKey\")\n+  private String subscriberKey;\n+\n+  @ExternalName(\"eventDate\")\n+  private Date eventDate;\n+\n+  @ExternalName(\"eventType\")\n+  private EventType eventType;\n+\n+  @ExternalName(\"triggeredSendDefinitionObjectID\")\n+  private String triggeredSendDefinitionObjectID;\n+\n+  @ExternalName(\"batchID\")\n+  private Integer batchID;\n+\n+  /**\n+   * @return the id\n+   */\n+  @Override\n+  public String getId() {\n+    return id;\n+  }\n+\n+  /**\n+   * @param id the id to set\n+   */\n+  @Override\n+  public void setId(String id) {\n+    this.id = id;\n+  }\n+\n+  /**\n+   * @return the sendID\n+   */\n+  public Integer getSendID() {\n+    return sendID;\n+  }\n+\n+  /**\n+   * @param sendID the sendID to set\n+   */\n+  public void setSendID(Integer sendID) {\n+    this.sendID = sendID;\n+  }\n+\n+  /**\n+   * @return the subscriberKey\n+   */\n+  public String getSubscriberKey() {\n+    return subscriberKey;\n+  }\n+\n+  /**\n+   * @param subscriberKey the subscriberKey to set\n+   */\n+  public void setSubscriberKey(String subscriberKey) {\n+    this.subscriberKey = subscriberKey;\n+  }\n+\n+  /**\n+   * @return the eventDate\n+   */\n+  public Date getEventDate() {\n+    return eventDate;\n+  }\n+\n+  /**\n+   * @param eventDate the eventDate to set\n+   */\n+  public void setEventDate(Date eventDate) {\n+    this.eventDate = eventDate;\n+  }\n+\n+  /**\n+   * @return the eventType\n+   */\n+  public EventType getEventType() {\n+    return eventType;\n+  }\n+\n+  /**\n+   * @param eventType the eventType to set\n+   */\n+  public void setEventType(EventType eventType) {\n+    this.eventType = eventType;\n+  }\n+\n+  /**\n+   * @return the triggeredSendDefinitionObjectID\n+   */\n+  public String getTriggeredSendDefinitionObjectID() {\n+    return triggeredSendDefinitionObjectID;\n+  }\n+\n+  /**\n+   * @param triggeredSendDefinitionObjectID the triggeredSendDefinitionObjectID to set\n+   */\n+  public void setTriggeredSendDefinitionObjectID(String triggeredSendDefinitionObjectID) {\n+    this.triggeredSendDefinitionObjectID = triggeredSendDefinitionObjectID;\n+  }\n+\n+  /**\n+   * @return the batchID\n+   */\n+  public Integer getBatchID() {\n+    return batchID;\n+  }\n+\n+  /**\n+   * @param batchID the batchID to set\n+   */\n+  public void setBatchID(Integer batchID) {\n+    this.batchID = batchID;\n+  }\n+\n+}"
  },
  {
    "sha": "1f4b33989e867d04205b5d9ae9933e342f70dd93",
    "filename": "src/main/java/com/custom/fuelsdk/PaginationETSoapObject.java",
    "status": "added",
    "additions": 365,
    "deletions": 0,
    "changes": 365,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/PaginationETSoapObject.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/PaginationETSoapObject.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/com/custom/fuelsdk/PaginationETSoapObject.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,365 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.custom.fuelsdk;\n+\n+import com.exacttarget.fuelsdk.ETClient;\n+import com.exacttarget.fuelsdk.ETDataExtensionColumn;\n+import com.exacttarget.fuelsdk.ETDataExtensionRow;\n+import com.exacttarget.fuelsdk.ETExpression;\n+import com.exacttarget.fuelsdk.ETFilter;\n+import com.exacttarget.fuelsdk.ETResponse;\n+import com.exacttarget.fuelsdk.ETResult;\n+import com.exacttarget.fuelsdk.ETSdkException;\n+import com.exacttarget.fuelsdk.ETSoapConnection;\n+import com.exacttarget.fuelsdk.ETSoapObject;\n+import com.exacttarget.fuelsdk.annotations.SoapObject;\n+import com.exacttarget.fuelsdk.internal.APIObject;\n+import com.exacttarget.fuelsdk.internal.RetrieveRequest;\n+import com.exacttarget.fuelsdk.internal.RetrieveRequestMsg;\n+import com.exacttarget.fuelsdk.internal.RetrieveResponseMsg;\n+import com.exacttarget.fuelsdk.internal.Soap;\n+import org.apache.log4j.Logger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.exacttarget.fuelsdk.ETDataExtension.retrieveColumns;\n+\n+/**\n+ * Extending class to fix the bug with Fuel-SDK on pagination.\n+ */\n+public class PaginationETSoapObject extends ETSoapObject {\n+\n+  static final int DEFAULT_PAGE_SIZE = 2500;\n+  private static Logger logger = Logger.getLogger(PaginationETSoapObject.class);\n+\n+  /**\n+   * @param client\n+   * @param dataExtension\n+   * @param filter\n+   * @return\n+   * @throws ETSdkException\n+   */\n+  public static ETResponse<ETDataExtensionRow> select(ETClient client,\n+                                                      String dataExtension,\n+                                                      ETFilter filter)\n+    throws ETSdkException {\n+    String name = null;\n+\n+    //\n+    // The data extension can be specified using key or name:\n+    //\n+\n+    ETExpression e = ETExpression.parse(dataExtension);\n+    if (e.getProperty().toLowerCase().equals(\"key\")\n+      && e.getOperator() == ETExpression.Operator.EQUALS) {\n+      name = e.getValue();\n+      // if no columns are explicitly requested\n+      // retrieve all columns\n+      if (filter.getProperties().isEmpty()) {\n+        filter.setProperties(retrieveColumnNames(client, name));\n+      }\n+    } else if (e.getProperty().toLowerCase().equals(\"name\")\n+      && e.getOperator() == ETExpression.Operator.EQUALS) {\n+      name = e.getValue();\n+      // if no columns are explicitly requested\n+      // throw an exception\n+      // because we need the key\n+      // to retrieve columns\n+      if (filter.getProperties().isEmpty()) {\n+        throw new ETSdkException(\"columns must be specified \"\n+                                   + \"when retrieving data extensions by name\");\n+      }\n+\n+    } else {\n+      throw new ETSdkException(\"invalid data extension filter string\");\n+    }\n+\n+    ETResponse<ETDataExtensionRow> response = customRetrieve(client, \"DataExtensionObject[\" + name + \"]\",\n+                                                             filter, null, ETDataExtensionRow.class);\n+    return response;\n+  }\n+\n+  /**\n+   * @param client\n+   * @param soapObject\n+   * @param requestID\n+   * @param filter\n+   * @return\n+   * @throws ETSdkException\n+   */\n+  public static ETResponse<ETDataExtensionRow> continueRequest(ETClient client, String soapObject, String requestID,\n+                                                               ETFilter filter) throws ETSdkException {\n+    ETResponse<ETDataExtensionRow> response = customRetrieve(client, soapObject, filter, requestID,\n+                                                             ETDataExtensionRow.class);\n+    return response;\n+  }\n+\n+  //there was a bug with original method related with continueRequest\n+  public static <T extends ETSoapObject> ETResponse<T> customRetrieve(ETClient client,\n+                                                                      String soapObjectName,\n+                                                                      ETFilter filter,\n+                                                                      String continueRequest,\n+                                                                      Class<T> type)\n+    throws ETSdkException {\n+    ETResponse<T> response = new ETResponse<T>();\n+\n+    //\n+    // Get handle to the SOAP connection:\n+    //\n+\n+    ETSoapConnection connection = client.getSoapConnection();\n+\n+    //\n+    // Automatically refresh the token if necessary:\n+    //\n+\n+    client.refreshToken();\n+\n+    //\n+    // Read internal type from the SoapObject annotation:\n+    //\n+\n+    Class<T> externalType = type; // for code readability\n+\n+    SoapObject internalTypeAnnotation\n+      = externalType.getAnnotation(SoapObject.class);\n+    assert internalTypeAnnotation != null;\n+    Class<? extends APIObject> internalType = internalTypeAnnotation.internalType();\n+    assert internalType != null;\n+\n+    ETExpression expression = filter.getExpression();\n+\n+    //\n+    // Determine properties to retrieve:\n+    //\n+\n+    List<String> externalProperties = filter.getProperties();\n+    List<String> internalProperties = null;\n+\n+    if (externalProperties.size() > 0) {\n+      //\n+      // Only request those properties specified:\n+      //\n+\n+      internalProperties = new ArrayList<String>();\n+\n+      for (String externalProperty : externalProperties) {\n+        String internalProperty =\n+          getInternalProperty(externalType, externalProperty);\n+        assert internalProperty != null;\n+        internalProperties.add(internalProperty);\n+      }\n+    } else {\n+      //\n+      // No properties were explicitly requested:\n+      //\n+\n+      internalProperties = getInternalProperties(externalType);\n+\n+      //\n+      // Remove properties that are unretrievable:\n+      //\n+\n+      for (String property : internalTypeAnnotation.unretrievable()) {\n+        internalProperties.remove(property);\n+      }\n+    }\n+\n+    //\n+    // Perform the SOAP retrieve:\n+    //\n+\n+    //Soap soap = connection.getSoap();\n+    Soap soap = null;\n+\n+    RetrieveRequest retrieveRequest = new RetrieveRequest();\n+\n+    if (continueRequest == null) {\n+      // if soapObjectType is specified, use it; otherwise, default\n+      // to the name of the internal class representing the object:\n+      if (soapObjectName != null) {\n+        retrieveRequest.setObjectType(soapObjectName);\n+        soap = connection.getSoap(\"retrieve\", soapObjectName);\n+      } else {\n+        retrieveRequest.setObjectType(internalType.getSimpleName());\n+        soap = connection.getSoap(\"retrieve\", internalType.getSimpleName());\n+      }\n+      retrieveRequest.getProperties().addAll(internalProperties);\n+\n+      if (expression.getOperator() != null) {\n+        //\n+        // Convert the property names to their internal counterparts:\n+        //\n+\n+        String property = expression.getProperty();\n+        if (property != null) {\n+          expression.setProperty(getInternalProperty(type, property));\n+        }\n+        for (ETExpression subexpression : expression.getSubexpressions()) {\n+          String p = subexpression.getProperty();\n+          if (p != null) {\n+            subexpression.setProperty(getInternalProperty(type, p));\n+          }\n+        }\n+\n+        retrieveRequest.setFilter(toFilterPart(expression));\n+      }\n+    } else {\n+      if (continueRequest != null) {\n+        retrieveRequest.setContinueRequest(continueRequest);\n+      }\n+    }\n+\n+//    //todo reduce batchsize\n+//    RetrieveOptions retrieveOptions = new RetrieveOptions();\n+////    retrieveOptions.setBatchSize(1);\n+//    retrieveRequest.setOptions(retrieveOptions);\n+\n+    if (logger.isTraceEnabled()) {\n+      logger.trace(\"RetrieveRequest:\");\n+      logger.trace(\"  objectType = \" + retrieveRequest.getObjectType());\n+      StringBuilder line = new StringBuilder(\"  properties = { \");\n+      //String line = null;\n+      for (String property : retrieveRequest.getProperties()) {\n+\n+        line.append(property).append(\", \");\n+      }\n+      if (retrieveRequest.getProperties().size() > 0) {\n+        line.setLength(line.length() - 2);\n+                /*if (line == null) {\n+                    line = \"  properties = { \" + property;\n+                } else {\n+                    line += \", \" + property;\n+                }*/\n+      }\n+      line.append(\" }\");\n+      logger.trace(line.toString());\n+      //logger.trace(line + \" }\");\n+      if (filter != null) {\n+        logger.trace(\"  filter = \" + toFilterPart(expression));\n+      }\n+    }\n+\n+    logger.trace(\"calling soap.retrieve...\");\n+\n+    RetrieveRequestMsg retrieveRequestMsg = new RetrieveRequestMsg();\n+    retrieveRequestMsg.setRetrieveRequest(retrieveRequest);\n+\n+    //todo temp fix for continue request\n+    if (soap == null) {\n+      if (soapObjectName != null) {\n+//        retrieveRequest.setObjectType(soapObjectName);\n+        soap = connection.getSoap(\"retrieve\", soapObjectName);\n+      } else {\n+//        retrieveRequest.setObjectType(internalType.getSimpleName());\n+        soap = connection.getSoap(\"retrieve\", internalType.getSimpleName());\n+      }\n+    }\n+    RetrieveResponseMsg retrieveResponseMsg = soap.retrieve(retrieveRequestMsg);\n+\n+    if (logger.isTraceEnabled()) {\n+      logger.trace(\"RetrieveResponseMsg:\");\n+      logger.trace(\"  requestId = \" + retrieveResponseMsg.getRequestID());\n+      logger.trace(\"  overallStatus = \" + retrieveResponseMsg.getOverallStatus());\n+      logger.trace(\"  results = {\");\n+      for (APIObject result : retrieveResponseMsg.getResults()) {\n+        logger.trace(\"    \" + result);\n+      }\n+      logger.trace(\"  }\");\n+    }\n+\n+    response.setRequestId(retrieveResponseMsg.getRequestID());\n+    if (retrieveResponseMsg.getOverallStatus().equals(\"OK\")) {\n+      response.setStatus(ETResult.Status.OK);\n+    } else if (retrieveResponseMsg.getOverallStatus().equals(\"Error\")) {\n+      response.setStatus(ETResult.Status.ERROR);\n+    }\n+    response.setResponseCode(retrieveResponseMsg.getOverallStatus());\n+    response.setResponseMessage(retrieveResponseMsg.getOverallStatus());\n+    for (APIObject internalObject : retrieveResponseMsg.getResults()) {\n+      //\n+      // Allocate a new (external) object:\n+      //\n+\n+      T externalObject = null;\n+      try {\n+        externalObject = externalType.newInstance();\n+      } catch (Exception ex) {\n+        throw new ETSdkException(\"could not instantiate \"\n+                                   + externalType.getName(), ex);\n+      }\n+\n+      externalObject.setClient(client);\n+\n+      //\n+      // Convert from internal representation:\n+      //\n+\n+      externalObject.fromInternal(internalObject);\n+\n+      //\n+      // Add result to the list of results:\n+      //\n+\n+      ETResult<T> result = new ETResult<T>();\n+      result.setObject(externalObject);\n+      response.addResult(result);\n+    }\n+\n+    if (retrieveResponseMsg.getOverallStatus().equals(\"MoreDataAvailable\")) {\n+      response.setMoreResults(true);\n+    }\n+\n+    return response;\n+  }\n+\n+  /**\n+   * @param client The ETClient object\n+   * @param key    The key\n+   * @return The List of Column names\n+   * @throws ETSdkException\n+   */\n+  private static List<String> retrieveColumnNames(ETClient client,\n+                                                  String key)\n+    throws ETSdkException {\n+    return getColumnNames(retrieveColumns(client, key));\n+  }\n+\n+\n+  /**\n+   * @param columns The List of ETDataExtensionColumn object\n+   * @return The List of ETDataExtension Column names\n+   */\n+  private static List<String> getColumnNames(List<ETDataExtensionColumn> columns) {\n+    List<String> columnNames = new ArrayList<String>();\n+    for (ETDataExtensionColumn column : columns) {\n+      columnNames.add(column.getName());\n+    }\n+    return columnNames;\n+  }\n+\n+  @Override\n+  public String getId() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void setId(String s) {\n+\n+  }\n+}"
  },
  {
    "sha": "19b0b7f41d412bb8a6d0688b8200b21b6c14ba81",
    "filename": "src/main/java/com/custom/fuelsdk/internal/ClickEvent.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/internal/ClickEvent.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/com/custom/fuelsdk/internal/ClickEvent.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/com/custom/fuelsdk/internal/ClickEvent.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.custom.fuelsdk.internal;\n+\n+import com.exacttarget.fuelsdk.internal.TrackingEvent;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n+import org.apache.cxf.xjc.runtime.JAXBToStringStyle;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+\n+/**\n+ * <p>Java class for ClickEvent complex type.\n+ *\n+ * <p>The following schema fragment specifies the expected content contained within this class.\n+ *\n+ * <pre>\n+ * &lt;complexType name=\"ClickEvent\"&gt;\n+ *   &lt;complexContent&gt;\n+ *     &lt;extension base=\"{http://exacttarget.com/wsdl/partnerAPI}TrackingEvent\"&gt;\n+ *       &lt;sequence&gt;\n+ *         &lt;element name=\"URLID\" type=\"{http://www.w3.org/2001/XMLSchema}int\" minOccurs=\"0\"/&gt;\n+ *         &lt;element name=\"URL\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\n+ *         &lt;element name=\"URLIDLong\" type=\"{http://www.w3.org/2001/XMLSchema}long\" minOccurs=\"0\"/&gt;\n+ *       &lt;/sequence&gt;\n+ *     &lt;/extension&gt;\n+ *   &lt;/complexContent&gt;\n+ * &lt;/complexType&gt;\n+ * </pre>\n+ */\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlType(name = \"ClickEvent\", propOrder = {\n+  \"urlid\",\n+  \"url\",\n+  \"urlIdLong\"\n+})\n+public class ClickEvent\n+  extends TrackingEvent {\n+\n+  @XmlElement(name = \"URLID\")\n+  protected Integer urlid;\n+  @XmlElement(name = \"URL\")\n+  protected String url;\n+  @XmlElement(name = \"URLIDLong\")\n+  protected Long urlIdLong;\n+\n+  /**\n+   * Gets the value of the urlid property.\n+   *\n+   * @return possible object is\n+   * {@link Integer }\n+   */\n+  public Integer getUrlid() {\n+    return urlid;\n+  }\n+\n+  /**\n+   * Sets the value of the urlid property.\n+   *\n+   * @param value allowed object is\n+   *              {@link Integer }\n+   */\n+  public void setUrlid(Integer value) {\n+    this.urlid = value;\n+  }\n+\n+  /**\n+   * Gets the value of the url property.\n+   *\n+   * @return possible object is\n+   * {@link String }\n+   */\n+  public String getUrl() {\n+    return url;\n+  }\n+\n+  /**\n+   * Sets the value of the url property.\n+   *\n+   * @param value allowed object is\n+   *              {@link String }\n+   */\n+  public void setUrl(String value) {\n+    this.url = value;\n+  }\n+\n+  /**\n+   * Gets the value of the urlIdLong property.\n+   *\n+   * @return possible object is\n+   * {@link Long }\n+   */\n+  public Long getUrlIdLong() {\n+    return urlIdLong;\n+  }\n+\n+  /**\n+   * Sets the value of the urlIdLong property.\n+   *\n+   * @param value allowed object is\n+   *              {@link Long }\n+   */\n+  public void setUrlIdLong(Long value) {\n+    this.urlIdLong = value;\n+  }\n+\n+  /**\n+   * Generates a String representation of the contents of this type.\n+   * This is an extension method, produced by the 'ts' xjc plugin\n+   */\n+  @Override\n+  public String toString() {\n+    return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);\n+  }\n+\n+}"
  },
  {
    "sha": "bf761a82e194c84ae71ae2438221a6c9b5d26e35",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionClient.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionClient.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionClient.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionClient.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import com.exacttarget.fuelsdk.ETClient;\n import com.exacttarget.fuelsdk.ETConfiguration;",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/DataExtensionClient.java"
  },
  {
    "sha": "a551df82435706a9471373936ddeb0a71e9a5bb7",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionInfo.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionInfo.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionInfo.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionInfo.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import com.exacttarget.fuelsdk.ETDataExtensionColumn;\n ",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/DataExtensionInfo.java"
  },
  {
    "sha": "7930b5fb88f9dcfd5834385b848ef04968570e90",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionOutputFormat.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionOutputFormat.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionOutputFormat.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionOutputFormat.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import com.exacttarget.fuelsdk.ETSdkException;\n import io.cdap.cdap.api.data.format.StructuredRecord;",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/DataExtensionOutputFormat.java"
  },
  {
    "sha": "03daa2d27947281a6eb1d720d462d9d1be6a8868",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionRecordWriter.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionRecordWriter.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionRecordWriter.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/DataExtensionRecordWriter.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import com.exacttarget.fuelsdk.ETDataExtensionRow;\n import com.exacttarget.fuelsdk.ETResponse;",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/DataExtensionRecordWriter.java"
  },
  {
    "sha": "a2ebedbdfb6452eabc0428051f3807495b196ebe",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudConf.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudConf.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudConf.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudConf.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import com.exacttarget.fuelsdk.ETSdkException;\n import io.cdap.cdap.api.annotation.Description;",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/MarketingCloudConf.java"
  },
  {
    "sha": "31f0b3d92f8c6c4efb01d6562c6fd2ead8b5ba5d",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudDataExtensionSink.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudDataExtensionSink.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudDataExtensionSink.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/MarketingCloudDataExtensionSink.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import io.cdap.cdap.api.annotation.Description;\n import io.cdap.cdap.api.annotation.Name;",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/MarketingCloudDataExtensionSink.java"
  },
  {
    "sha": "417e1a520187e8f229950651d65b03693f6e72d5",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/Operation.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/Operation.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/Operation.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/Operation.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n /**\n  * The type of write operation.",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/Operation.java"
  },
  {
    "sha": "91a37f84452c5c8ec0b1db6345d80213337ef003",
    "filename": "src/main/java/io/cdap/plugin/sfmc/sink/RecordDataExtensionRowConverter.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/RecordDataExtensionRowConverter.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/sink/RecordDataExtensionRowConverter.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/sink/RecordDataExtensionRowConverter.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -14,7 +14,7 @@\n  * the License.\n  */\n \n-package io.cdap.plugin.sfmc;\n+package io.cdap.plugin.sfmc.sink;\n \n import com.exacttarget.fuelsdk.ETDataExtensionColumn;\n import com.exacttarget.fuelsdk.ETDataExtensionRow;\n@@ -25,8 +25,6 @@\n import java.time.LocalDate;\n import java.time.format.DateTimeFormatter;\n import java.util.function.BiFunction;\n-import java.util.function.Function;\n-import java.util.function.Predicate;\n \n /**\n  * Converts StructuredRecords into DataExtensionRows.",
    "previous_filename": "src/main/java/io/cdap/plugin/sfmc/RecordDataExtensionRowConverter.java"
  },
  {
    "sha": "f1e6867331cc1ffc6a871c84df1c311f6fd65bc9",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudClient.java",
    "status": "added",
    "additions": 241,
    "deletions": 0,
    "changes": 241,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudClient.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudClient.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudClient.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+//import com.exacttarget.fuelsdk.ETApiObject;\n+\n+import com.custom.fuelsdk.PaginationETSoapObject;\n+import com.exacttarget.fuelsdk.ETClient;\n+import com.exacttarget.fuelsdk.ETConfiguration;\n+import com.exacttarget.fuelsdk.ETDataExtensionColumn;\n+import com.exacttarget.fuelsdk.ETDataExtensionRow;\n+import com.exacttarget.fuelsdk.ETExpression;\n+import com.exacttarget.fuelsdk.ETFilter;\n+import com.exacttarget.fuelsdk.ETResponse;\n+import com.exacttarget.fuelsdk.ETSdkException;\n+import com.exacttarget.fuelsdk.ETSoapObject;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudColumn;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudObjectInfo;\n+import io.cdap.plugin.sfmc.source.util.SourceObject;\n+import io.cdap.plugin.sfmc.source.util.Util;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class that provides methods to connect to Salesforce instance.\n+ */\n+public class MarketingCloudClient {\n+  private final ETClient client;\n+  private static final Logger LOG = LoggerFactory.getLogger(MarketingCloudClient.class);\n+\n+  MarketingCloudClient(ETClient client) {\n+    this.client = client;\n+  }\n+\n+  /**\n+   * Initialize the connection with Salesforce Marketing Cloud using FuelSDK.\n+   *\n+   * @param clientId     The Salesforce Marketing Cloud Client Id\n+   * @param clientSecret The Salesforce Marketing Cloud Client Secret\n+   * @param authEndpoint Auth Endpoint url for Salesforce Marketing Cloud\n+   * @param soapEndpoint SOAP Endpoint url for Salesforce Marketing Cloud\n+   * @return The instance of MarketingCloudClient object\n+   * @throws ETSdkException The FuelSDKException\n+   */\n+  public static MarketingCloudClient create(String clientId, String clientSecret, String authEndpoint,\n+                                            String soapEndpoint) throws ETSdkException {\n+    ETConfiguration conf = new ETConfiguration();\n+    conf.set(\"clientId\", clientId);\n+    conf.set(\"clientSecret\", clientSecret);\n+    conf.set(\"authEndpoint\", authEndpoint);\n+    conf.set(\"soapEndpoint\", soapEndpoint);\n+    conf.set(\"useOAuth2Authentication\", \"true\");\n+    ClassLoader oldCL = Thread.currentThread().getContextClassLoader();\n+    try {\n+      Thread.currentThread().setContextClassLoader(MarketingCloudClient.class.getClassLoader());\n+      return new MarketingCloudClient(new ETClient(conf));\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(oldCL);\n+    }\n+  }\n+\n+  /**\n+   * Check if filter string is a valid SFMC Expression.\n+   *\n+   * @param filter\n+   * @return\n+   */\n+  public static void validateFilter(String filter) throws ETSdkException {\n+    if (!Util.isNullOrEmpty(filter)) {\n+      ETExpression expression = ETExpression.parse(filter);\n+    }\n+  }\n+\n+  private ETExpression getExpressionfromString(String filter) throws ETSdkException {\n+    if (!Util.isNullOrEmpty(filter)) {\n+      return ETExpression.parse(filter);\n+    } else {\n+      return new ETExpression();\n+    }\n+  }\n+\n+  /**\n+   * Fetch records for passed object from Salesforce Marketing Cloud.\n+   *\n+   * @param object The SourceObject which tells what data to be fetched from Salesforce Marketing Cloud\n+   * @return The list of ETApiObject representing the records from requested object\n+   */\n+  public List<? extends ETSoapObject> fetchObjectRecords(SourceObject object) throws ETSdkException {\n+    ETFilter filter = new ETFilter();\n+    filter.setExpression(getExpressionfromString(object.getFilter()));\n+    return fetchObjectData(client, object.getClassRef(), filter);\n+  }\n+\n+  /**\n+   * Fetch the schema information for passed object from Salesforce Marketing Cloud.\n+   *\n+   * @param object The SourceObject which tells for which schema to be fetched from Salesforce Marketing Cloud\n+   * @return The instance of MarketingCloudObjectInfo object\n+   * @throws ETSdkException The FuelSDKException\n+   */\n+  public MarketingCloudObjectInfo fetchObjectSchema(SourceObject object)\n+    throws ETSdkException {\n+    Class<? extends ETSoapObject> clazz = object.getClassRef();\n+    return new MarketingCloudObjectInfo(object, fetchObjectFields(clazz));\n+  }\n+\n+  /**\n+   * Fetch records for passed object from Salesforce Marketing Cloud.\n+   *\n+   * @param dataExtensionKey The data extension key for which data to be fetched from Salesforce Marketing Cloud\n+   * @return The list of ETDataExtensionRow representing the records from requested data extension\n+   * @throws ETSdkException The FuelSDKException\n+   */\n+  public List<ETDataExtensionRow> fetchDataExtensionRecords(String dataExtensionKey, String filterStr)\n+    throws ETSdkException {\n+\n+    ETFilter filter = new ETFilter();\n+    filter.setExpression(getExpressionfromString(filterStr));\n+\n+    ETResponse<ETDataExtensionRow> response = PaginationETSoapObject.select(client, \"key=\" + dataExtensionKey,\n+                                                                            filter);\n+    List<ETDataExtensionRow> rows = response.getObjects();\n+    while (response.getResponseMessage().equals(\"MoreDataAvailable\")) {\n+      response = PaginationETSoapObject.continueRequest(client, null, response.getRequestId(),\n+                                                        filter);\n+      rows.addAll(response.getObjects());\n+    }\n+    return rows;\n+    //return call(() -> ETDataExtension.select(client, \"key=\" + dataExtensionKey)\n+    //.getObjects());\n+  }\n+\n+  /**\n+   * Fetch the schema information for passed object from Salesforce Marketing Cloud.\n+   *\n+   * @param dataExtensionKey The data extension key for which schema to be fetched from Salesforce Marketing Cloud\n+   * @return The instance of MarketingCloudObjectInfo object\n+   * @throws ETSdkException The FuelSDKException\n+   */\n+  public MarketingCloudObjectInfo fetchDataExtensionSchema(String dataExtensionKey)\n+    throws ETSdkException {\n+    return call(() -> {\n+      ETExpression expression = buildDataExtensionExpression(dataExtensionKey);\n+\n+      ETFilter filter = new ETFilter();\n+      filter.setExpression(expression);\n+      filter.addProperty(\"name\");\n+      filter.addProperty(\"type\");\n+\n+      ETResponse<ETDataExtensionColumn> response = ETDataExtensionColumn.retrieve(client, ETDataExtensionColumn.class,\n+                                                                                  (Integer) null, (Integer) null,\n+                                                                                  filter);\n+      List<MarketingCloudColumn> columns = response.getObjects().stream()\n+        .map(o -> new MarketingCloudColumn(o.getName(), o.getType().name()))\n+        .collect(Collectors.toList());\n+\n+      //Integer recordCount = fetchDataExtensionRecordCount(dataExtensionKey);\n+\n+      return new MarketingCloudObjectInfo(SourceObject.DATA_EXTENSION, dataExtensionKey, columns);\n+    });\n+  }\n+\n+  private ETExpression buildDataExtensionExpression(String dataExtensionKey) {\n+    ETExpression expression = new ETExpression();\n+    expression.setProperty(\"DataExtension.CustomerKey\");\n+    expression.setOperator(ETExpression.Operator.EQUALS);\n+    expression.addValue(dataExtensionKey);\n+    return expression;\n+  }\n+\n+  private <T extends ETSoapObject> List<T> fetchObjectData(ETClient client, Class<T> clazz, ETFilter filter)\n+    throws ETSdkException {\n+\n+    ClassLoader oldCL = Thread.currentThread().getContextClassLoader();\n+    try {\n+      Thread.currentThread().setContextClassLoader(MarketingCloudClient.class.getClassLoader());\n+      //ETResponse<T> etResponse = client.retrieve(clazz, new ETFilter());\n+      ETResponse<T> response = (ETResponse<T>) PaginationETSoapObject.customRetrieve(client, null,\n+                                                                                     filter, null,\n+                                                                                     clazz);\n+      List<T> rows = response.getObjects();\n+      while (response.getResponseMessage().equals(\"MoreDataAvailable\")) {\n+        response = (ETResponse<T>) PaginationETSoapObject.customRetrieve(client, null,\n+                                                                         filter, response.getRequestId(),\n+                                                                         clazz);\n+        rows.addAll(response.getObjects());\n+      }\n+      return rows;\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(oldCL);\n+    }\n+  }\n+\n+\n+  private List<MarketingCloudColumn> fetchObjectFields(Class<?> clazz) {\n+    return Arrays.stream(clazz.getDeclaredFields())\n+      .map(o -> new MarketingCloudColumn(o.getName(), o.getType().getSimpleName().toUpperCase()))\n+      .collect(Collectors.toList());\n+  }\n+\n+  private <T> T call(SFMCCall<T> callable) throws ETSdkException {\n+    ClassLoader oldClassloader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n+      return callable.call();\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(oldClassloader);\n+    }\n+  }\n+\n+  /**\n+   * A SFMC call.\n+   *\n+   * @param <T> type of return object\n+   */\n+  private interface SFMCCall<T> {\n+\n+    /**\n+     * Perform a call.\n+     */\n+    T call() throws ETSdkException;\n+  }\n+}"
  },
  {
    "sha": "a3d9eff59c5cc7c69a1ee44f209fa455dfa79930",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputFormat.java",
    "status": "added",
    "additions": 176,
    "deletions": 0,
    "changes": 176,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputFormat.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputFormat.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputFormat.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudObjectInfo;\n+import io.cdap.plugin.sfmc.source.util.SourceObject;\n+import io.cdap.plugin.sfmc.source.util.SourceQueryMode;\n+import io.cdap.plugin.sfmc.source.util.Util;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapreduce.InputFormat;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.JobContext;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Salesforce input format.\n+ */\n+public class MarketingCloudInputFormat extends InputFormat<NullWritable, StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(MarketingCloudInputFormat.class);\n+\n+  /**\n+   * Configure the input format to read tables from Salesforce. Should be called from the mapreduce client.\n+   *\n+   * @param jobConfig the job configuration\n+   * @param mode the query mode\n+   * @param conf the plugin conf\n+   * @return Collection of MarketingCloudObjectInfo containing table and schema.\n+   */\n+  public static List<MarketingCloudObjectInfo> setInput(Configuration jobConfig, SourceQueryMode mode,\n+                                                        MarketingCloudSourceConfig conf) {\n+    MarketingCloudJobConfiguration jobConf = new MarketingCloudJobConfiguration(jobConfig);\n+    jobConf.setPluginConfiguration(conf);\n+\n+    //Depending on the selected objects in the conf, get the schema for each object as MarketingCloudObjectInfo\n+    List<MarketingCloudObjectInfo> tableInfos = fetchTableInfo(mode, conf);\n+\n+    jobConf.setTableInfos(tableInfos);\n+\n+    LOG.debug(\"setInput::tableInfos = {}\", tableInfos.size());\n+    return tableInfos;\n+  }\n+\n+  /**\n+   * Depending on conf value fetch the list of fields for each object and create schema object.\n+   *\n+   * @param mode the query mode\n+   * @param conf the plugin conf\n+   * @return Collection of MarketingCloudObjectInfo containing table and schema.\n+   */\n+  private static List<MarketingCloudObjectInfo> fetchTableInfo(SourceQueryMode mode, MarketingCloudSourceConfig conf) {\n+    try {\n+      MarketingCloudClient client = MarketingCloudClient.create(conf.getClientId(), conf.getClientSecret(),\n+                                                                conf.getAuthEndpoint(), conf.getSoapEndpoint());\n+\n+      boolean failOnError = conf.isFailOnError();\n+\n+      //When mode = SingleObject, fetch fields for the object selected in plugin config\n+      if (mode == SourceQueryMode.SINGLE_OBJECT) {\n+        MarketingCloudObjectInfo tableInfo = getTableMetaData(conf.getObject(), conf.getDataExtensionKey(), client,\n+                                                              failOnError);\n+        return (tableInfo == null) ? Collections.emptyList() : Collections.singletonList(tableInfo);\n+      }\n+\n+      //When mode = MultiObject, get the list of objects provided in plugin config and the fetch fields for each of\n+      //then objects.\n+      List<MarketingCloudObjectInfo> tableInfos = new ArrayList<>();\n+      List<SourceObject> objectList = conf.getObjectList();\n+\n+      for (SourceObject object : objectList) {\n+        MarketingCloudObjectInfo tableInfo = null;\n+\n+        if (object == SourceObject.DATA_EXTENSION) {\n+          //if the object = Data Extension then get the list of data extension keys and then fetch fields for each of\n+          //the data extension objects.\n+          List<String> dataExtensionKeys = Util.splitToList(conf.getDataExtensionKeys(), ',');\n+          for (String dataExtensionKey : dataExtensionKeys) {\n+            tableInfo = getTableMetaData(object, dataExtensionKey, client, failOnError);\n+            if (tableInfo == null) {\n+              continue;\n+            }\n+            tableInfos.add(tableInfo);\n+          }\n+        } else {\n+          tableInfo = getTableMetaData(object, \"\", client, failOnError);\n+          if (tableInfo != null) {\n+            tableInfos.add(tableInfo);\n+          }\n+        }\n+      }\n+\n+      return tableInfos;\n+    } catch (Exception e) {\n+      if (conf.isFailOnError()) {\n+        LOG.error(\"Error in fetchTableInfo()\", e);\n+      } else {\n+        LOG.warn(\"Failed in fetchTableInfo()\", e);\n+      }\n+      return Collections.emptyList();\n+    }\n+  }\n+\n+  /**\n+   * Fetch the fields for passed object.\n+   */\n+  private static MarketingCloudObjectInfo getTableMetaData(SourceObject object, String dataExtensionKey,\n+                                                           MarketingCloudClient client, boolean failOnError) {\n+    try {\n+      if (object == SourceObject.DATA_EXTENSION) {\n+        return client.fetchDataExtensionSchema(dataExtensionKey);\n+      } else {\n+        return client.fetchObjectSchema(object);\n+      }\n+    } catch (Exception e) {\n+      if (failOnError) {\n+        LOG.error(\"Error in getTableMetaData()\", e);\n+      } else {\n+        LOG.warn(\"Failed in getTableMetaData()\", e);\n+      }\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public List<InputSplit> getSplits(JobContext jobContext) throws IOException, InterruptedException {\n+    MarketingCloudJobConfiguration jobConfig = new MarketingCloudJobConfiguration(jobContext.getConfiguration());\n+    MarketingCloudSourceConfig pluginConf = jobConfig.getPluginConf();\n+\n+    List<MarketingCloudObjectInfo> tableInfos = jobConfig.getTableInfos();\n+    List<InputSplit> resultSplits = new ArrayList<>();\n+\n+    for (MarketingCloudObjectInfo tableInfo : tableInfos) {\n+      String tableKey = tableInfo.getObject().name();\n+      String tableName = tableInfo.getTableName();\n+        resultSplits.add(new MarketingCloudInputSplit(tableKey, tableName));\n+    }\n+\n+    LOG.debug(\"# of split = {}\", resultSplits.size());\n+\n+    return resultSplits;\n+  }\n+\n+  @Override\n+  public RecordReader<NullWritable, StructuredRecord> createRecordReader(InputSplit inputSplit,\n+                                                                         TaskAttemptContext taskAttemptContext)\n+    throws IOException, InterruptedException {\n+    MarketingCloudJobConfiguration jobConfig = new MarketingCloudJobConfiguration(\n+      taskAttemptContext.getConfiguration());\n+    MarketingCloudSourceConfig pluginConf = jobConfig.getPluginConf();\n+\n+    return new MarketingCloudRecordReader(pluginConf);\n+  }\n+}"
  },
  {
    "sha": "396409ea06ce40788111993e9656b18b5c99ae24",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputSplit.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputSplit.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputSplit.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudInputSplit.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+import org.apache.hadoop.io.Writable;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+/**\n+ * Salesforce input split.\n+ */\n+public class MarketingCloudInputSplit extends InputSplit implements Writable {\n+  private String objectName;\n+  private String tableName;\n+\n+  // used by mapreduce\n+  public MarketingCloudInputSplit() {\n+  }\n+\n+  /**\n+   * Constructor for MarketingCloudInputSplit.\n+   *\n+   * @param objectName The object name\n+   * @param tableName The corresponding table name\n+   */\n+  public MarketingCloudInputSplit(String objectName, String tableName) {\n+    this.objectName = objectName;\n+    this.tableName = tableName;\n+  }\n+\n+  public String getObjectName() {\n+    return objectName;\n+  }\n+\n+  public String getTableName() {\n+    return tableName;\n+  }\n+\n+\n+  @Override\n+  public void write(DataOutput dataOutput) throws IOException {\n+    dataOutput.writeUTF(this.objectName);\n+    dataOutput.writeUTF(this.tableName);\n+  }\n+\n+  @Override\n+  public void readFields(DataInput dataInput) throws IOException {\n+    this.objectName = dataInput.readUTF();\n+    this.tableName = dataInput.readUTF();\n+  }\n+\n+  @Override\n+  public long getLength() throws IOException, InterruptedException {\n+    return 0;\n+  }\n+\n+  @Override\n+  public String[] getLocations() throws IOException, InterruptedException {\n+    return new String[0];\n+  }\n+}"
  },
  {
    "sha": "42d42cfb6938dd48798c1354f0fe2df95e4405e5",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudJobConfiguration.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudJobConfiguration.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudJobConfiguration.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudJobConfiguration.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudObjectInfo;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+\n+/**\n+ * Allows to specify and access connection configuration properties of {@link Configuration}.\n+ */\n+public class MarketingCloudJobConfiguration {\n+  private static final String PLUGIN_CONF_FIELD = \"salesforce.plugin.conf\";\n+  private static final String INFO_FIELD = \"salesforce.table.info\";\n+\n+  private static final Type PLUGIN_CONF_TYPE = new TypeToken<MarketingCloudSourceConfig>() {\n+  }.getType();\n+  private static final Type INFO_TYPE = new TypeToken<List<MarketingCloudObjectInfo>>() {\n+  }.getType();\n+\n+  private static final Gson GSON = new Gson();\n+\n+  private Configuration conf;\n+\n+  public MarketingCloudJobConfiguration(Configuration job) {\n+    this.conf = job;\n+  }\n+\n+  public Configuration getConf() {\n+    return this.conf;\n+  }\n+\n+  public void setPluginConfiguration(MarketingCloudSourceConfig conf) {\n+    set(PLUGIN_CONF_FIELD, GSON.toJson(conf));\n+  }\n+\n+  public MarketingCloudSourceConfig getPluginConf() {\n+    return GSON.fromJson(getConf().get(PLUGIN_CONF_FIELD), PLUGIN_CONF_TYPE);\n+  }\n+\n+  public List<MarketingCloudObjectInfo> getTableInfos() {\n+    return GSON.fromJson(getConf().get(INFO_FIELD), INFO_TYPE);\n+  }\n+\n+  public void setTableInfos(List<MarketingCloudObjectInfo> infoList) {\n+    set(INFO_FIELD, GSON.toJson(infoList));\n+  }\n+\n+  private void set(String key, String value) {\n+    getConf().set(key, value);\n+  }\n+}"
  },
  {
    "sha": "2b73105febdf3e908b40b7bc939c3356fba41141",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudRecordReader.java",
    "status": "added",
    "additions": 319,
    "deletions": 0,
    "changes": 319,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudRecordReader.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudRecordReader.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudRecordReader.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,319 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+import com.exacttarget.fuelsdk.ETApiObject;\n+import com.exacttarget.fuelsdk.ETDataExtensionRow;\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudConstants;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudObjectInfo;\n+import io.cdap.plugin.sfmc.source.util.SourceObject;\n+import io.cdap.plugin.sfmc.source.util.SourceQueryMode;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.RecordReader;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Record reader that reads the entire contents of a Salesforce table.\n+ */\n+public class MarketingCloudRecordReader extends RecordReader<NullWritable, StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(MarketingCloudRecordReader.class);\n+  private final MarketingCloudSourceConfig pluginConf;\n+  private MarketingCloudInputSplit split;\n+  private int pos;\n+  private List<Schema.Field> tableFields;\n+  private MarketingCloudObjectInfo sfObjectMetaData;\n+  private Schema schema;\n+\n+  private SourceObject object;\n+  private String dataExtensionKey = \"\";\n+  private String tableName;\n+  private String formattedTableName;\n+  private String tableNameField;\n+  private List<? extends ETApiObject> results;\n+  private Iterator<? extends ETApiObject> iterator;\n+  private ETApiObject row;\n+\n+  MarketingCloudRecordReader(MarketingCloudSourceConfig pluginConf) {\n+    this.pluginConf = pluginConf;\n+  }\n+\n+  @Override\n+  public void initialize(InputSplit split, TaskAttemptContext context) {\n+    this.split = (MarketingCloudInputSplit) split;\n+    this.pos = 0;\n+  }\n+\n+  @Override\n+  public boolean nextKeyValue() throws IOException {\n+    try {\n+      if (results == null) {\n+        fetchData();\n+      }\n+\n+      if (!iterator.hasNext()) {\n+        return false;\n+      }\n+\n+      row = iterator.next();\n+\n+      pos++;\n+    } catch (Exception e) {\n+      if (pluginConf.isFailOnError()) {\n+        LOG.error(\"Error in nextKeyValue\", e);\n+        throw new IOException(\"Exception in nextKeyValue\", e);\n+      } else {\n+        LOG.warn(\"Failed in nextKeyValue\", e);\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public NullWritable getCurrentKey() {\n+    return NullWritable.get();\n+  }\n+\n+  @Override\n+  public StructuredRecord getCurrentValue() throws IOException {\n+    StructuredRecord.Builder recordBuilder = StructuredRecord.builder(schema);\n+\n+    if (pluginConf.getQueryMode() == SourceQueryMode.MULTI_OBJECT) {\n+      recordBuilder.set(tableNameField, formattedTableName);\n+    }\n+\n+    try {\n+\n+      convertRecord(recordBuilder, row);\n+\n+    } catch (Exception e) {\n+      if (pluginConf.isFailOnError()) {\n+        LOG.error(String.format(\"Error decoding row from table %s\", tableName), e);\n+        throw new IOException(String.format(\"Error decoding row from table %s\", tableName), e);\n+      } else {\n+        LOG.warn(String.format(\"Failed decoding row from table %s\", tableName), e);\n+      }\n+    }\n+    return recordBuilder.build();\n+  }\n+\n+  @Override\n+  public float getProgress() throws IOException, InterruptedException {\n+    return pos / (float) split.getLength();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+  }\n+\n+  private void fetchData() {\n+    object = SourceObject.valueOf(split.getObjectName());\n+    tableName = split.getTableName();\n+    formattedTableName = tableName.replaceAll(\"-\", \"_\");\n+\n+    if (object == SourceObject.DATA_EXTENSION) {\n+      dataExtensionKey = tableName.replaceAll(MarketingCloudConstants.DATA_EXTENSION_PREFIX, \"\");\n+    }\n+    tableNameField = pluginConf.getTableNameField();\n+\n+    //Get the table data\n+    try {\n+      MarketingCloudClient client = MarketingCloudClient.create(pluginConf.getClientId(), pluginConf.getClientSecret(),\n+                                                                pluginConf.getAuthEndpoint(),\n+                                                                pluginConf.getSoapEndpoint());\n+\n+      //Fetch data\n+      if (object == SourceObject.DATA_EXTENSION) {\n+        results = client.fetchDataExtensionRecords(dataExtensionKey, object.getFilter());\n+      } else {\n+        results = client.fetchObjectRecords(object);\n+      }\n+\n+      LOG.debug(\"size={}\", results.size());\n+      if (!results.isEmpty()) {\n+        fetchSchema(client);\n+      }\n+    } catch (Exception e) {\n+      results = Collections.emptyList();\n+      if (pluginConf.isFailOnError()) {\n+        LOG.error(\"Error while fetching data\", e);\n+      } else {\n+        LOG.warn(\"Failed while fetching data\", e);\n+      }\n+    }\n+\n+    iterator = results.iterator();\n+  }\n+\n+  private void fetchSchema(MarketingCloudClient client) {\n+    //Fetch the column definition\n+    List<Schema.Field> schemaFields;\n+\n+    try {\n+      if (object == SourceObject.DATA_EXTENSION) {\n+        sfObjectMetaData = client.fetchDataExtensionSchema(dataExtensionKey);\n+      } else {\n+        sfObjectMetaData = client.fetchObjectSchema(object);\n+      }\n+\n+      //Build schema\n+      tableFields = sfObjectMetaData.getSchema().getFields();\n+      schemaFields = new ArrayList<>(tableFields);\n+\n+      if (pluginConf.getQueryMode() == SourceQueryMode.MULTI_OBJECT) {\n+        schemaFields.add(Schema.Field.of(tableNameField, Schema.of(Schema.Type.STRING)));\n+      }\n+    } catch (Exception e) {\n+      schemaFields = Collections.emptyList();\n+    }\n+\n+    schema = Schema.recordOf(tableName.replaceAll(\"-\", \"_\"), schemaFields);\n+  }\n+\n+  /**\n+   * Read data from ETApiObject and convert it to StructureRecord.\n+   */\n+  private void convertRecord(StructuredRecord.Builder recordBuilder, ETApiObject row) {\n+    for (Schema.Field field : tableFields) {\n+      String fieldName = field.getName();\n+      Object rawFieldValue = null;\n+      if (row instanceof ETDataExtensionRow) {\n+        String apiFieldName = sfObjectMetaData.lookupFieldsMap(fieldName);\n+        rawFieldValue = ((ETDataExtensionRow) row).getColumn(apiFieldName);\n+      } else {\n+        rawFieldValue = getFieldValue(row, fieldName);\n+      }\n+\n+      Object fieldValue = convertToValue(fieldName, field.getSchema(), rawFieldValue);\n+\n+      recordBuilder.set(fieldName, fieldValue);\n+    }\n+  }\n+\n+  /**\n+   * Read data from ETApiObject using reflection for a given field name.\n+   */\n+  private Object getFieldValue(ETApiObject row, String fieldName) {\n+    try {\n+      Method method = row.getClass().getMethod(createGetterName(fieldName));\n+      return method.invoke(row);\n+    } catch (Exception e) {\n+      if (pluginConf.isFailOnError()) {\n+        LOG.error(String.format(\"Error while fetching %s.%s value\", row.getClass().getSimpleName(), fieldName), e);\n+      } else {\n+        LOG.warn(String.format(\"Failed while fetching %s.%s value\", row.getClass().getSimpleName(), fieldName), e);\n+      }\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Constructs the get method name to be used in reflection call.\n+   */\n+  private String createGetterName(String name) {\n+    StringBuilder sb = new StringBuilder(\"get\");\n+    sb.append(name.substring(0, 1).toUpperCase());\n+    sb.append(name.substring(1));\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Converts raw field value according to the schema field type.\n+   */\n+  private Object convertToValue(String fieldName, Schema fieldSchema, Object fieldValue) {\n+    Schema.Type fieldType = fieldSchema.getType();\n+    Schema.LogicalType logicalType = fieldSchema.getLogicalType();\n+    if (fieldSchema.getLogicalType() != null) {\n+      return transformLogicalType(fieldName, logicalType, fieldValue);\n+    }\n+\n+    switch (fieldType) {\n+      case STRING:\n+        return convertToStringValue(fieldValue);\n+      case DOUBLE:\n+        return convertToDoubleValue(fieldValue);\n+      case INT:\n+        return convertToIntegerValue(fieldValue);\n+      case BOOLEAN:\n+        return convertToBooleanValue(fieldValue);\n+      case UNION:\n+        if (fieldSchema.isNullable()) {\n+          return convertToValue(fieldName, fieldSchema.getNonNullable(), fieldValue);\n+        }\n+        throw new IllegalStateException(\n+          String.format(\"Field '%s' is of unexpected type '%s'. Declared 'complex UNION' types: %s\",\n+            fieldName, fieldValue.getClass().getSimpleName(), fieldSchema.getUnionSchemas()));\n+      default:\n+        throw new IllegalStateException(\n+          String.format(\"Record type '%s' is not supported for field '%s'\", fieldType.name(), fieldName));\n+    }\n+  }\n+\n+  private String convertToStringValue(Object fieldValue) {\n+    return String.valueOf(fieldValue);\n+  }\n+\n+  private Double convertToDoubleValue(Object fieldValue) {\n+    if (fieldValue instanceof String && Strings.isNullOrEmpty(String.valueOf(fieldValue))) {\n+      return null;\n+    }\n+\n+    return Double.parseDouble(String.valueOf(fieldValue));\n+  }\n+\n+  private Integer convertToIntegerValue(Object fieldValue) {\n+    if (fieldValue instanceof String && Strings.isNullOrEmpty(String.valueOf(fieldValue))) {\n+      return null;\n+    }\n+\n+    return Integer.parseInt(String.valueOf(fieldValue));\n+  }\n+\n+  private Boolean convertToBooleanValue(Object fieldValue) {\n+    if (fieldValue instanceof String && Strings.isNullOrEmpty(String.valueOf(fieldValue))) {\n+      return null;\n+    }\n+\n+    return Boolean.parseBoolean(String.valueOf(fieldValue));\n+  }\n+  private Object transformLogicalType(String fieldName, Schema.LogicalType logicalType, Object value) {\n+    switch (logicalType) {\n+      case TIMESTAMP_MICROS:\n+        if (value instanceof Date) {\n+          return TimeUnit.MILLISECONDS.toMicros((((Date) value).getTime()));\n+        }\n+        return null;\n+      default:\n+        throw new IllegalArgumentException(\n+          String.format(\"Field '%s' is of unsupported type '%s'\", fieldName, logicalType.getToken()));\n+    }\n+  }\n+}"
  },
  {
    "sha": "85f235269abc0007164fee36e55125fa5c348e47",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSource.java",
    "status": "added",
    "additions": 148,
    "deletions": 0,
    "changes": 148,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSource.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSource.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSource.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+import io.cdap.cdap.api.annotation.Description;\n+import io.cdap.cdap.api.annotation.Name;\n+import io.cdap.cdap.api.annotation.Plugin;\n+import io.cdap.cdap.api.data.batch.Input;\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.dataset.lib.KeyValue;\n+import io.cdap.cdap.etl.api.Emitter;\n+import io.cdap.cdap.etl.api.Engine;\n+import io.cdap.cdap.etl.api.FailureCollector;\n+import io.cdap.cdap.etl.api.PipelineConfigurer;\n+import io.cdap.cdap.etl.api.StageConfigurer;\n+import io.cdap.cdap.etl.api.action.SettableArguments;\n+import io.cdap.cdap.etl.api.batch.BatchSource;\n+import io.cdap.cdap.etl.api.batch.BatchSourceContext;\n+import io.cdap.plugin.common.LineageRecorder;\n+import io.cdap.plugin.common.SourceInputFormatProvider;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudConstants;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudObjectInfo;\n+import io.cdap.plugin.sfmc.source.util.SourceQueryMode;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.NullWritable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A {@link BatchSource} that reads data from multiple objects in Salesforce.\n+ */\n+@Plugin(type = BatchSource.PLUGIN_TYPE)\n+@Name(MarketingCloudConstants.PLUGIN_NAME)\n+@Description(\"Reads from multiple objects in Salesforce. \" +\n+  \"Outputs one record for each row in each object, with the object name as a record field. \" +\n+  \"Also sets a pipeline argument for each object read, which contains the object schema.\")\n+public class MarketingCloudSource extends BatchSource<NullWritable, StructuredRecord, StructuredRecord> {\n+  private static final Logger LOG = LoggerFactory.getLogger(MarketingCloudSource.class);\n+\n+  private final MarketingCloudSourceConfig conf;\n+\n+  public MarketingCloudSource(MarketingCloudSourceConfig conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public void configurePipeline(PipelineConfigurer pipelineConfigurer) {\n+    super.configurePipeline(pipelineConfigurer);\n+\n+    StageConfigurer stageConfigurer = pipelineConfigurer.getStageConfigurer();\n+    FailureCollector collector = stageConfigurer.getFailureCollector();\n+\n+    conf.validate(collector);\n+    // Since we have validated all the properties, throw an exception if there are any\n+    // errors in the collector. This is to avoid adding same validation errors again in\n+    // getSchema method call\n+    collector.getOrThrowException();\n+\n+    //Get Schema\n+    stageConfigurer.setOutputSchema(getSchema(conf.getQueryMode()));\n+\n+    if (conf.isFailOnError()) {\n+      if (pipelineConfigurer.getEngine() == Engine.SPARK) {\n+        pipelineConfigurer.setPipelineProperties(Collections.singletonMap(\"spark.task.maxFailures\", \"1\"));\n+      } else if (pipelineConfigurer.getEngine() == Engine.MAPREDUCE) {\n+        Map<String, String> properties = new HashMap<>();\n+        properties.put(\"mapreduce.reduce.maxattempts\", \"1\");\n+        properties.put(\"mapreduce.map.maxattempts\", \"1\");\n+        pipelineConfigurer.setPipelineProperties(properties);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void prepareRun(BatchSourceContext context) throws Exception {\n+    FailureCollector collector = context.getFailureCollector();\n+    conf.validate(collector);\n+    collector.getOrThrowException();\n+\n+    SourceQueryMode mode = conf.getQueryMode(collector);\n+\n+    Configuration hConf = new Configuration();\n+    Collection<MarketingCloudObjectInfo> tables = MarketingCloudInputFormat.setInput(hConf, mode, conf);\n+    SettableArguments arguments = context.getArguments();\n+    for (MarketingCloudObjectInfo tableInfo : tables) {\n+      arguments.set(MarketingCloudConstants.TABLE_PREFIX + tableInfo.getFormattedTableName(),\n+                    tableInfo.getSchema().toString());\n+      recordLineage(context, tableInfo);\n+    }\n+\n+    context.setInput(Input.of(conf.getReferenceName(),\n+      new SourceInputFormatProvider(MarketingCloudInputFormat.class, hConf)));\n+  }\n+\n+  @Override\n+  public void transform(KeyValue<NullWritable, StructuredRecord> input, Emitter<StructuredRecord> emitter) {\n+    emitter.emit(input.getValue());\n+  }\n+\n+  private Schema getSchema(SourceQueryMode mode) {\n+    Schema schema = null;\n+    if (mode == SourceQueryMode.SINGLE_OBJECT) {\n+      Configuration hConf = new Configuration();\n+      Collection<MarketingCloudObjectInfo> tables = MarketingCloudInputFormat.setInput(hConf, mode, conf);\n+      if (tables != null && !tables.isEmpty()) {\n+        schema = tables.iterator().next().getSchema();\n+      }\n+    }\n+    return schema;\n+  }\n+\n+  private void recordLineage(BatchSourceContext context, MarketingCloudObjectInfo tableInfo) {\n+    String tableName = tableInfo.getFormattedTableName();\n+    String outputName = String.format(\"%s-%s\", conf.getReferenceName(), tableName);\n+    Schema schema = tableInfo.getSchema();\n+    LineageRecorder lineageRecorder = new LineageRecorder(context, outputName);\n+    lineageRecorder.createExternalDataset(schema);\n+    List<Schema.Field> fields = Objects.requireNonNull(schema).getFields();\n+    if (fields != null && !fields.isEmpty()) {\n+      lineageRecorder.recordRead(\"Read\",\n+        String.format(\"Read from '%s' Marketing Cloud object.\", tableName),\n+        fields.stream().map(Schema.Field::getName).collect(Collectors.toList()));\n+    }\n+  }\n+}"
  },
  {
    "sha": "80c4a720fb45b378491dfff70a82c5bf93a1bab3",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSourceConfig.java",
    "status": "added",
    "additions": 487,
    "deletions": 0,
    "changes": 487,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSourceConfig.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSourceConfig.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/MarketingCloudSourceConfig.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,487 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source;\n+\n+import com.exacttarget.fuelsdk.ETSdkException;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.cdap.cdap.api.annotation.Description;\n+import io.cdap.cdap.api.annotation.Macro;\n+import io.cdap.cdap.api.annotation.Name;\n+import io.cdap.cdap.api.plugin.PluginConfig;\n+import io.cdap.cdap.etl.api.FailureCollector;\n+import io.cdap.plugin.common.Constants;\n+import io.cdap.plugin.common.IdUtils;\n+import io.cdap.plugin.sfmc.source.util.MarketingCloudConstants;\n+import io.cdap.plugin.sfmc.source.util.SourceObject;\n+import io.cdap.plugin.sfmc.source.util.SourceQueryMode;\n+import io.cdap.plugin.sfmc.source.util.Util;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Configuration for the {@link MarketingCloudSource}.\n+ */\n+public class MarketingCloudSourceConfig extends PluginConfig {\n+  private static final Logger LOG = LoggerFactory.getLogger(MarketingCloudSourceConfig.class);\n+\n+  @Name(Constants.Reference.REFERENCE_NAME)\n+  @Description(\"This will be used to uniquely identify this source for lineage, annotating metadata, etc.\")\n+  private String referenceName;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_QUERY_MODE)\n+  @Macro\n+  @Description(\"Mode of data retrieval. The mode can be one of two values: \"\n+    + \"`Multi Object` - will allow user to fetch data for multiple data extensions, \"\n+    + \"`Single Object` - will allow user to fetch data for single data extension.\")\n+  private String queryMode;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_OBJECT_NAME)\n+  @Macro\n+  @Nullable\n+  @Description(\"Specify the object for which data to be fetched. This can be one of following values: \" +\n+    \"`Data Extension` - will allow user to fetch data for a single Data Extension object, \" +\n+    \"`Campaign` - will allow user to fetch data for Campaign object, \" +\n+    \"`Email` - will allow user to fetch data for Email object, \" +\n+    \"`Mailing List` - will allow user to fetch data for Mailing List object. \" +\n+    \"Note, this value will be ignored if the Mode is set to `Multi Object`.\")\n+  private String objectName;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_DATA_EXTENSION_KEY)\n+  @Macro\n+  @Nullable\n+  @Description(\"Specify the data extension key from which data to be fetched. Note, this value will be ignored in \" +\n+    \"following two cases: 1. If the Mode is set to `Multi Object`, 2. If the selected object name is other than \" +\n+    \"`Data Extension`.\")\n+  private String dataExtensionKey;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_OBJECT_LIST)\n+  @Macro\n+  @Nullable\n+  @Description(\"Specify the comma-separated list of objects for which data to be fetched; for example: \" +\n+    \"'Object1,Object2'. This can be one or more values from following possible values: \" +\n+    \"`Data Extension` - will allow user to fetch data for a single Data Extension object, \" +\n+    \"`Campaign` - will allow user to fetch data for Campaign object, \" +\n+    \"`Email` - will allow user to fetch data for Email object, \" +\n+    \"`Mailing List` - will allow user to fetch data for Mailing List object. \" +\n+    \"Note, this value will be ignored if the Mode is set to `Single Object`.\")\n+  private String objectList;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_DATA_EXTENSION_KEY_LIST)\n+  @Macro\n+  @Nullable\n+  @Description(\"Specify the data extension keys from which data to be fetched; for example: 'Key1,Key2'. \" +\n+    \"Note, this value will be ignored in following two cases: 1. If the Mode is set to `Single Object`, \" +\n+    \"2. If the selected object list does not contain `Data Extension` as one of the objects.\")\n+  private String dataExtensionKeys;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_TABLE_NAME_FIELD)\n+  @Macro\n+  @Nullable\n+  @Description(\"The name of the field that holds the object name to which the data belongs to. Must not be the name \" +\n+    \"of any column for any of the objects that will be read. Defaults to `tablename`. In case of `Data Extension` \" +\n+    \"object, this field will have value in `dataextension_[Data Extension Key]` format. Note, the Table name field \" +\n+    \"value will be ignored if the Mode is set to `Single Object`.\")\n+  private String tableNameField;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_FILTER)\n+  @Macro\n+  @Nullable\n+  @Description(\"The WHERE clause used to filter data from Marketing cloud objects.\")\n+  private String filter;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_CLIENT_ID)\n+  @Macro\n+  @Description(\"OAuth2 client ID associated with an installed package in the Salesforce Marketing Cloud.\")\n+  private String clientId;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_CLIENT_SECRET)\n+  @Macro\n+  @Description(\"OAuth2 client secret associated with an installed package in the Salesforce Marketing Cloud.\")\n+  private String clientSecret;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_API_ENDPOINT)\n+  @Macro\n+  @Description(\"The REST API Base URL associated for the Server-to-Server API integration. \" +\n+    \"For example, https://instance.rest.marketingcloudapis.com/\")\n+  private String restEndpoint;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_AUTH_API_ENDPOINT)\n+  @Macro\n+  @Description(\"Authentication Base URL associated for the Server-to-Server API integration. \" +\n+    \"For example, https://instance.auth.marketingcloudapis.com/\")\n+  private String authEndpoint;\n+\n+  @Name(MarketingCloudConstants.PROPERTY_SOAP_API_ENDPOINT)\n+  @Macro\n+  @Description(\"The SOAP Endpoint URL associated for the Server-to-Server API integration. \" +\n+    \"For example, https://instance.soap.marketingcloudapis.com/Service.asmx\")\n+  private String soapEndpoint;\n+\n+  @Macro\n+  @Nullable\n+  @Name(MarketingCloudConstants.PROPERTY_FAIL_ON_ERROR)\n+  @Description(\"Whether to fail the pipeline if it fails while reading.\")\n+  private Boolean failOnError;\n+\n+  /**\n+   * Constructor for MarketingCloudSourceConfig object.\n+   *\n+   * @param referenceName     The reference name\n+   * @param queryMode         The query mode\n+   * @param objectName        The object name to be fetched from Salesforce Marketing Cloud\n+   * @param dataExtensionKey  The data extension key to be fetched from Salesforce Marketing Cloud\n+   * @param objectList        The list of objects to be fetched from Salesforce Marketing Cloud\n+   * @param dataExtensionKeys The list of data extension keys to be fetched from Salesforce Marketing Cloud\n+   * @param tableNameField    The field name to hold the table name value\n+   * @param clientId          The Salesforce Marketing Cloud Client Id\n+   * @param clientSecret      The Salesforce Marketing Cloud Client Secret\n+   * @param restEndpoint      The REST API endpoint for Salesforce Marketing Cloud\n+   * @param authEndpoint      The AUTH API endpoint for Salesforce Marketing Cloud\n+   * @param soapEndpoint      The SOAP API endpoint for Salesforce Marketing Cloud\n+   * @param failOnError       A flag to decide what is to be done to the pipeline execution in case of errors\n+   */\n+  public MarketingCloudSourceConfig(String referenceName, String queryMode, @Nullable String objectName,\n+                                    @Nullable String dataExtensionKey, @Nullable String objectList,\n+                                    @Nullable String dataExtensionKeys, @Nullable String tableNameField,\n+                                    @Nullable String filter, String clientId, String clientSecret,\n+                                    String restEndpoint, String authEndpoint, String soapEndpoint,\n+                                    Boolean failOnError) {\n+    this.referenceName = referenceName;\n+    this.queryMode = queryMode;\n+    this.objectName = objectName;\n+    this.dataExtensionKey = dataExtensionKey;\n+    this.objectList = objectList;\n+    this.dataExtensionKeys = dataExtensionKeys;\n+    this.tableNameField = tableNameField;\n+    this.filter = filter;\n+    this.clientId = clientId;\n+    this.clientSecret = clientSecret;\n+    this.restEndpoint = restEndpoint;\n+    this.authEndpoint = authEndpoint;\n+    this.soapEndpoint = soapEndpoint;\n+    this.failOnError = failOnError;\n+  }\n+\n+  public String getReferenceName() {\n+    return referenceName;\n+  }\n+\n+  /**\n+   * Returns the query mode chosen.\n+   *\n+   * @param collector The failure collector to collect the errors\n+   * @return An instance of SourceQueryMode\n+   */\n+  public SourceQueryMode getQueryMode(FailureCollector collector) {\n+    SourceQueryMode mode = getQueryMode();\n+    if (mode != null) {\n+      return mode;\n+    }\n+\n+    collector.addFailure(\"Unsupported query mode value: \" + queryMode,\n+                         String.format(\"Supported modes are: %s\", SourceQueryMode.getSupportedModes()))\n+      .withConfigProperty(MarketingCloudConstants.PROPERTY_QUERY_MODE);\n+    collector.getOrThrowException();\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the query mode chosen.\n+   *\n+   * @return An instance of SourceQueryMode\n+   */\n+  public SourceQueryMode getQueryMode() {\n+    Optional<SourceQueryMode> sourceQueryMode = SourceQueryMode.fromValue(queryMode);\n+\n+    return sourceQueryMode.isPresent() ? sourceQueryMode.get() : null;\n+  }\n+\n+  /**\n+   * Returns selected object.\n+   *\n+   * @param collector The failure collector to collect the errors\n+   * @return An instance of SourceObject\n+   */\n+  public SourceObject getObject(FailureCollector collector) {\n+    SourceObject sourceObject = getObject();\n+    if (sourceObject != null) {\n+      return sourceObject;\n+    }\n+\n+    collector.addFailure(\"Unsupported object value: \" + objectName,\n+                         String.format(\"Supported objects are: %s\", SourceObject.getSupportedObjects()))\n+      .withConfigProperty(MarketingCloudConstants.PROPERTY_OBJECT_NAME);\n+    collector.getOrThrowException();\n+    return null;\n+  }\n+\n+  @Nullable\n+  public SourceObject getObject() {\n+    return getSourceObject(objectName, filter);\n+  }\n+\n+  @Nullable\n+  public String getDataExtensionKey() {\n+    return dataExtensionKey;\n+  }\n+\n+  /**\n+   * Returns list of selected objects.\n+   *\n+   * @param collector The failure collector to collect the errors\n+   * @return The list of SourceObject\n+   */\n+  public List<SourceObject> getObjectList(FailureCollector collector) {\n+    List<String> objects = Util.splitToList(objectList, ',');\n+    List<SourceObject> sourceObjects = new ArrayList<>();\n+\n+    for (String object : objects) {\n+      SourceObject sourceObject = getSourceObject(object, filter);\n+      if (sourceObject == null) {\n+        collector.addFailure(\"Unsupported object value: \" + object,\n+                             String.format(\"Supported objects are: %s\", SourceObject.getSupportedObjects()))\n+          .withConfigProperty(MarketingCloudConstants.PROPERTY_OBJECT_LIST);\n+        break;\n+      }\n+      sourceObjects.add(sourceObject);\n+    }\n+\n+    return sourceObjects;\n+  }\n+\n+  /**\n+   * Returns list of selected objects.\n+   *\n+   * @return The list of SourceObject\n+   */\n+  @Nullable\n+  public List<SourceObject> getObjectList() {\n+    List<String> objects = Util.splitToList(objectList, ',');\n+    List<SourceObject> sourceObjects = new ArrayList<>();\n+\n+    for (String object : objects) {\n+      SourceObject sourceObject = getSourceObject(object, filter);\n+      if (sourceObject == null) {\n+        continue;\n+      }\n+      sourceObjects.add(sourceObject);\n+    }\n+\n+    return sourceObjects;\n+  }\n+\n+  @Nullable\n+  public String getDataExtensionKeys() {\n+    return dataExtensionKeys;\n+  }\n+\n+  @Nullable\n+  public String getTableNameField() {\n+    return tableNameField;\n+  }\n+\n+  @Nullable\n+  public String getFilter() {\n+    return filter;\n+  }\n+\n+  public String getClientId() {\n+    return clientId;\n+  }\n+\n+  public String getClientSecret() {\n+    return clientSecret;\n+  }\n+\n+  public String getRestEndpoint() {\n+    return restEndpoint;\n+  }\n+\n+  public String getAuthEndpoint() {\n+    return authEndpoint;\n+  }\n+\n+  public String getSoapEndpoint() {\n+    return soapEndpoint;\n+  }\n+\n+  public Boolean isFailOnError() {\n+    return failOnError == null ? false : failOnError;\n+  }\n+\n+  /**\n+   * Validates {@link MarketingCloudSourceConfig} instance.\n+   */\n+  public void validate(FailureCollector collector) {\n+    //Validates the given referenceName to consists of characters allowed to represent a dataset.\n+    IdUtils.validateReferenceName(referenceName, collector);\n+\n+    validateCredentials(collector);\n+    validateQueryMode(collector);\n+    validateFilter(collector);\n+  }\n+\n+  private SourceObject getSourceObject(String objectName, String filter) {\n+    Optional<SourceObject> sourceObject = SourceObject.fromValue(objectName);\n+    if (sourceObject.isPresent()) {\n+      SourceObject obj = sourceObject.get();\n+      obj.setFilter(filter);\n+      return obj;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  private void validateCredentials(FailureCollector collector) {\n+    if (!shouldConnect()) {\n+      return;\n+    }\n+\n+    if (Util.isNullOrEmpty(clientId)) {\n+      collector.addFailure(\"Client ID must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_CLIENT_ID);\n+    }\n+\n+    if (Util.isNullOrEmpty(clientSecret)) {\n+      collector.addFailure(\"Client Secret must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_CLIENT_SECRET);\n+    }\n+\n+    if (Util.isNullOrEmpty(restEndpoint)) {\n+      collector.addFailure(\" REST Endpoint must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_API_ENDPOINT);\n+    }\n+\n+    if (Util.isNullOrEmpty(authEndpoint)) {\n+      collector.addFailure(\"Auth Endpoint  must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_AUTH_API_ENDPOINT);\n+    }\n+\n+    if (Util.isNullOrEmpty(soapEndpoint)) {\n+      collector.addFailure(\"Soap Endpoint must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_SOAP_API_ENDPOINT);\n+    }\n+\n+    collector.getOrThrowException();\n+    validateSalesforceConnection(collector);\n+  }\n+\n+  @VisibleForTesting\n+  void validateSalesforceConnection(FailureCollector collector) {\n+    try {\n+      MarketingCloudClient.create(clientId, clientSecret, authEndpoint, soapEndpoint);\n+    } catch (ETSdkException e) {\n+      collector.addFailure(\"Unable to connect to Salesforce Instance.\",\n+                           \"Ensure properties like Client ID, Client Secret, API Endpoint \" +\n+                             \", Soap Endpoint, Auth Endpoint are correct.\")\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_CLIENT_ID)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_CLIENT_SECRET)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_API_ENDPOINT)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_AUTH_API_ENDPOINT)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_SOAP_API_ENDPOINT)\n+        .withStacktrace(e.getStackTrace());\n+    }\n+  }\n+\n+  private void validateQueryMode(FailureCollector collector) {\n+    //according to query mode check if either object name / object list exists or not\n+    if (containsMacro(MarketingCloudConstants.PROPERTY_QUERY_MODE)) {\n+      return;\n+    }\n+\n+    SourceQueryMode mode = getQueryMode(collector);\n+\n+    if (mode == SourceQueryMode.MULTI_OBJECT) {\n+      validateMultiObjectQueryMode(collector);\n+    } else {\n+      validateSingleObjectQueryMode(collector);\n+    }\n+  }\n+\n+  private void validateMultiObjectQueryMode(FailureCollector collector) {\n+    if (containsMacro(MarketingCloudConstants.PROPERTY_OBJECT_LIST)\n+      || containsMacro(MarketingCloudConstants.PROPERTY_DATA_EXTENSION_KEY_LIST)\n+      || containsMacro(MarketingCloudConstants.PROPERTY_TABLE_NAME_FIELD)) {\n+      return;\n+    }\n+\n+    List<SourceObject> objects = getObjectList(collector);\n+    collector.getOrThrowException();\n+\n+    if (objects.isEmpty()) {\n+      collector.addFailure(\"At least 1 Object must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_OBJECT_LIST);\n+    }\n+\n+    if (objects.contains(SourceObject.DATA_EXTENSION)) {\n+      List<String> dataExtensionKeyList = Util.splitToList(getDataExtensionKeys(), ',');\n+      if (dataExtensionKeyList.isEmpty()) {\n+        collector.addFailure(\"At least 1 Data Extension Key must be specified.\", null)\n+          .withConfigProperty(MarketingCloudConstants.PROPERTY_DATA_EXTENSION_KEY_LIST);\n+      }\n+    }\n+\n+    if (Util.isNullOrEmpty(tableNameField)) {\n+      collector.addFailure(\"Table name field must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_TABLE_NAME_FIELD);\n+    }\n+  }\n+\n+  private void validateSingleObjectQueryMode(FailureCollector collector) {\n+    if (containsMacro(MarketingCloudConstants.PROPERTY_OBJECT_NAME)\n+      || containsMacro(MarketingCloudConstants.PROPERTY_DATA_EXTENSION_KEY)) {\n+      return;\n+    }\n+\n+    SourceObject object = getObject(collector);\n+\n+    if (object == SourceObject.DATA_EXTENSION && Util.isNullOrEmpty(dataExtensionKey)) {\n+      collector.addFailure(\"Data Extension Key must be specified.\", null)\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_DATA_EXTENSION_KEY);\n+    }\n+  }\n+\n+  private void validateFilter(FailureCollector collector) {\n+    if (containsMacro(MarketingCloudConstants.PROPERTY_FILTER) || Util.isNullOrEmpty(filter)) {\n+      return;\n+    }\n+    try {\n+      MarketingCloudClient.validateFilter(filter);\n+    } catch (ETSdkException e) {\n+      collector.addFailure(\"Filter string is not valid.\",\n+                           \"Check syntax to confirm.\")\n+        .withConfigProperty(MarketingCloudConstants.PROPERTY_FILTER)\n+        .withStacktrace(e.getStackTrace());\n+    }\n+  }\n+\n+  /**\n+   * Returns true if Salesforce can be connected to.\n+   */\n+  public boolean shouldConnect() {\n+    return !containsMacro(MarketingCloudConstants.PROPERTY_CLIENT_ID) &&\n+      !containsMacro(MarketingCloudConstants.PROPERTY_CLIENT_SECRET) &&\n+      !containsMacro(MarketingCloudConstants.PROPERTY_API_ENDPOINT) &&\n+      !containsMacro(MarketingCloudConstants.PROPERTY_AUTH_API_ENDPOINT) &&\n+      !containsMacro(MarketingCloudConstants.PROPERTY_SOAP_API_ENDPOINT);\n+  }\n+}"
  },
  {
    "sha": "627c29b76c45b96f23de285a354541de92840195",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudColumn.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudColumn.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudColumn.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudColumn.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source.util;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * Information about a MarketingCloud table column.\n+ */\n+public class MarketingCloudColumn {\n+  private String fieldName;\n+  private String typeName;\n+  private String mandatory;\n+\n+  public MarketingCloudColumn() {\n+  }\n+\n+  /**\n+   * Constructor for MarketingCloudColumn.\n+   *\n+   * @param fieldName The column name\n+   * @param typeName The data type name\n+   */\n+  public MarketingCloudColumn(String fieldName, String typeName) {\n+    this.fieldName = fieldName;\n+    this.typeName = typeName;\n+    this.mandatory = \"false\";\n+  }\n+\n+  public String getFieldName() {\n+    return fieldName;\n+  }\n+\n+  /**\n+   * Replaces all space characters in column name with double underscores\n+   * @return field name with all characters replaced.\n+   */\n+  public String getFormattedFieldName() {\n+    return fieldName.replaceAll(\" \", \"__\");\n+  }\n+\n+  public String getTypeName() {\n+    return typeName;\n+  }\n+\n+  public boolean isMandatory() {\n+    return !Strings.isNullOrEmpty(mandatory) && \"true\".equalsIgnoreCase(mandatory);\n+  }\n+}"
  },
  {
    "sha": "3b5f9536d64e27ad23ec69ac53dca795e9373d6f",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudConstants.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudConstants.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudConstants.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudConstants.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source.util;\n+\n+/**\n+ * Salesforce constants.\n+ */\n+public interface MarketingCloudConstants {\n+\n+  /**\n+   * Salesforce plugin name.\n+   */\n+  String PLUGIN_NAME = \"MarketingCloud\";\n+\n+  /**\n+   * Configuration property name used to specify the query mode.\n+   */\n+  String PROPERTY_QUERY_MODE = \"queryMode\";\n+\n+  /**\n+   * Configuration property name used to specify the object name.\n+   */\n+  String PROPERTY_OBJECT_NAME = \"objectName\";\n+\n+  /**\n+   * Configuration property name used to specify data extension key.\n+   */\n+  String PROPERTY_DATA_EXTENSION_KEY = \"dataExtensionKey\";\n+\n+  /**\n+   * Configuration property name used to specify the list of objects.\n+   */\n+  String PROPERTY_OBJECT_LIST = \"objectList\";\n+\n+  /**\n+   * Configuration property name used to specify the comma-separated list of data extension keys.\n+   */\n+  String PROPERTY_DATA_EXTENSION_KEY_LIST = \"dataExtensionKeyList\";\n+\n+  /**\n+   * Configuration property name used to specify the table name field.\n+   */\n+  String PROPERTY_TABLE_NAME_FIELD = \"tableNameField\";\n+\n+  /**\n+   * Configuration property name used to specify client id.\n+   */\n+  String PROPERTY_CLIENT_ID = \"clientId\";\n+\n+  /**\n+   * Configuration property name used to specify client secret.\n+   */\n+  String PROPERTY_CLIENT_SECRET = \"clientSecret\";\n+\n+  /**\n+   * Configuration property name used to specify REST API endpoint.\n+   */\n+  String PROPERTY_API_ENDPOINT = \"restEndpoint\";\n+\n+  /**\n+   * Configuration property name used to specify Auth API endpoint.\n+   */\n+  String PROPERTY_AUTH_API_ENDPOINT = \"authEndpoint\";\n+\n+  /**\n+   * Configuration property name used to specify SOAP endpoint.\n+   */\n+  String PROPERTY_SOAP_API_ENDPOINT = \"soapEndpoint\";\n+\n+  /**\n+   * Configuration property name used to specify Fail on Error flag.\n+   */\n+  String PROPERTY_FAIL_ON_ERROR = \"failOnError\";\n+\n+  /**\n+   * Table prefix to be used in case of Multi-Object support.\n+   */\n+  String TABLE_PREFIX = \"multisink.\";\n+\n+  /**\n+   * Table name prefix to be used for data extensions.\n+   */\n+  String DATA_EXTENSION_PREFIX = \"dataextension_\";\n+\n+  /**\n+   * Filter to be used when retrieving data from Salesforce Marketing Cloud.\n+   */\n+  String PROPERTY_FILTER = \"filter\";\n+\n+}"
  },
  {
    "sha": "20d58462e900d270d794ea734b04e12f831c6efa",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudObjectInfo.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudObjectInfo.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudObjectInfo.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/util/MarketingCloudObjectInfo.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source.util;\n+\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Information about a Salesforce table.\n+ */\n+public class MarketingCloudObjectInfo {\n+  private final SourceObject object;\n+  private final String dataExtensionKey;\n+  private final Schema schema;\n+  private final Map<String, String> mapSchemaFieldToSFMCField;\n+\n+\n+  /**\n+   * Constructor for MarketingCloudObjectInfo for non-dataextension object.\n+   * @param object The Salesforce Marketing Cloud object\n+   * @param columns The list of columns\n+   */\n+  public MarketingCloudObjectInfo(SourceObject object, List<MarketingCloudColumn> columns) {\n+    this(object, null, columns);\n+  }\n+\n+  /**\n+   * Constructor for MarketingCloudObjectInfo for dataextension object.\n+   *\n+   * @param object The Salesforce Marketing Cloud object as DataExtension\n+   * @param dataExtensionKey The data extension key\n+   * @param columns The list of columns\n+   */\n+  public MarketingCloudObjectInfo(SourceObject object, String dataExtensionKey, List<MarketingCloudColumn> columns\n+                                  ) {\n+    this.object = object;\n+    this.dataExtensionKey = dataExtensionKey;\n+    SchemaBuilder schemaBuilder = new SchemaBuilder();\n+    this.schema = schemaBuilder.constructSchema(getFormattedTableName(), columns);\n+    this.mapSchemaFieldToSFMCField = columns.stream()\n+      .collect(Collectors.toMap(MarketingCloudColumn::getFormattedFieldName, MarketingCloudColumn::getFieldName));\n+\n+  }\n+\n+  public SourceObject getObject() {\n+    return object;\n+  }\n+\n+  /**\n+   * Returns the table name for the object.\n+   *\n+   * @return In case of Data Extension, it returns name in `dataextension-[data extension key]` format\n+   * Otherwise, it returns object name\n+   */\n+  public String getTableName() {\n+    if (getObject() == SourceObject.DATA_EXTENSION) {\n+      return String.format(\"%s%s\", MarketingCloudConstants.DATA_EXTENSION_PREFIX, dataExtensionKey);\n+    } else {\n+      return getObject().getTableName();\n+    }\n+  }\n+\n+  /**\n+   * Replaces all hyphen (-) characters in column name with single underscore\n+   * @return table name with all characters replaced.\n+   */\n+  public String getFormattedTableName() {\n+    return getTableName().replaceAll(\"-\", \"_\");\n+  }\n+\n+  public Schema getSchema() {\n+    return schema;\n+  }\n+\n+\n+\n+  public String lookupFieldsMap(String schemaFieldName) {\n+    if (this.mapSchemaFieldToSFMCField == null) {\n+      return schemaFieldName;\n+    }\n+\n+    String sfmcFieldName = this.mapSchemaFieldToSFMCField.get(schemaFieldName);\n+    return sfmcFieldName == null ? schemaFieldName : sfmcFieldName;\n+  }\n+}"
  },
  {
    "sha": "cd6889037bc30d03497270936a8522c3609d3f36",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/util/SchemaBuilder.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/SchemaBuilder.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/SchemaBuilder.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/util/SchemaBuilder.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source.util;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class to build schema.\n+ */\n+public class SchemaBuilder {\n+  /**\n+   * Constructs Schema object using input parameters.\n+   *\n+   * @param tableName The table name to be used in Schema object\n+   * @param columns The list of SalesforceColumn objects that will be added as Schema.Field\n+   * @return The instance of Schema object\n+   */\n+  public Schema constructSchema(String tableName, List<MarketingCloudColumn> columns) {\n+    SchemaBuilder schemaBuilder = new SchemaBuilder();\n+    List<Schema.Field> fields = schemaBuilder.constructSchemaFields(columns);\n+\n+    return Schema.recordOf(tableName, fields);\n+  }\n+\n+  private List<Schema.Field> constructSchemaFields(List<MarketingCloudColumn> columns) {\n+    return columns.stream()\n+      .map(o -> transformToField(o))\n+      .filter(Objects::nonNull)\n+      .collect(Collectors.toList());\n+  }\n+\n+  private Schema.Field transformToField(MarketingCloudColumn column) {\n+    String name = column.getFormattedFieldName();\n+    if (Strings.isNullOrEmpty(name)) {\n+      return null;\n+    }\n+\n+    Schema schema = createSchema(column);\n+    if (schema == null) {\n+      return null;\n+    }\n+\n+    return Schema.Type.NULL == schema.getType()\n+      ? Schema.Field.of(name, schema)\n+      : Schema.Field.of(name, Schema.nullableOf(schema));\n+  }\n+\n+  private Schema createSchema(MarketingCloudColumn column) {\n+    switch (column.getTypeName().toLowerCase()) {\n+      case \"decimal\":\n+      case \"double\":\n+        return Schema.of(Schema.Type.DOUBLE);\n+      case \"number\":\n+      case \"integer\":\n+        return Schema.of(Schema.Type.INT);\n+      case \"boolean\":\n+        return Schema.of(Schema.Type.BOOLEAN);\n+      case \"date\":\n+        return Schema.of(Schema.LogicalType.TIMESTAMP_MICROS);\n+      case \"phone\":\n+      case \"email_address\":\n+      case \"locale\":\n+      case \"string\":\n+      default:\n+        return Schema.of(Schema.Type.STRING);\n+    }\n+  }\n+}"
  },
  {
    "sha": "cf07501fb3a5262ac64470ee700339884bb1ab40",
    "filename": "src/main/java/io/cdap/plugin/sfmc/source/util/SourceObject.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/data-integrations/salesforce-marketing/blob/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/SourceObject.java",
    "raw_url": "https://github.com/data-integrations/salesforce-marketing/raw/50842ea7fa2e9d0b7e8db63d94a7fd7745764545/src/main/java/io/cdap/plugin/sfmc/source/util/SourceObject.java",
    "contents_url": "https://api.github.com/repos/data-integrations/salesforce-marketing/contents/src/main/java/io/cdap/plugin/sfmc/source/util/SourceObject.java?ref=50842ea7fa2e9d0b7e8db63d94a7fd7745764545",
    "patch": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright © 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.sfmc.source.util;\n+\n+import com.custom.fuelsdk.ETNotSentEvent;\n+import com.exacttarget.fuelsdk.ETBounceEvent;\n+import com.exacttarget.fuelsdk.ETDataExtensionRow;\n+import com.exacttarget.fuelsdk.ETEmail;\n+import com.exacttarget.fuelsdk.ETList;\n+import com.exacttarget.fuelsdk.ETOpenEvent;\n+import com.exacttarget.fuelsdk.ETSentEvent;\n+import com.exacttarget.fuelsdk.ETSoapObject;\n+import com.exacttarget.fuelsdk.ETUnsubEvent;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Indicates the object for which data to be fetched from MarketingCloud.\n+ */\n+public enum SourceObject {\n+\n+  /**\n+   * This indicates data to be fetched from Data Extension.\n+   */\n+  DATA_EXTENSION(\"Data Extension\", \"dataextension\", ETDataExtensionRow.class),\n+\n+  /**\n+   * This indicates data to be fetched from Campaign.\n+   */\n+//  CAMPAIGN(\"Campaign\", \"campaign\", ETCampaign.class),\n+\n+  /**\n+   * This indicates data to be fetched from Email.\n+   */\n+  EMAIL(\"Email\", \"email\", ETEmail.class),\n+\n+  /**\n+   * This indicates data to be fetched from Mailing List.\n+   */\n+  MAILING_LIST(\"Mailing List\", \"mailinglist\", ETList.class),\n+\n+  /**\n+   * This indicates data to be fetched from Tracking Bounce Events.\n+   */\n+  TRACKING_BOUNCE_EVENT(\"Bounce Event\", \"bounce\", ETBounceEvent.class),\n+\n+  /**\n+   * This indicates data to be fetched from Tracking Open Events.\n+   */\n+  TRACKING_OPEN_EVENT(\"Open Event\", \"open\", ETOpenEvent.class),\n+\n+  /**\n+   * This indicates data to be fetched from Tracking Click Events.\n+   */\n+  //TRACKING_CLICK_EVENT(\"Click Event\", \"click\", ETClickEvent.class),\n+\n+  /**\n+   * This indicates data to be fetched from Tracking UnSub Events.\n+   */\n+  TRACKING_UNSUB_EVENT(\"Unsub Event\", \"unsub\", ETUnsubEvent.class),\n+\n+  /**\n+   * This indicates data to be fetched from Tracking Sent Events.\n+   */\n+  TRACKING_SENT_EVENT(\"Sent Event\", \"sent\", ETSentEvent.class),\n+\n+  /**\n+   * This indicates data to be fetched from Tracking Notsent Events.\n+   */\n+  TRACKING_NOTSENT_EVENT(\"Notsent Event\", \"notsent\", ETNotSentEvent.class);\n+\n+  private final String value;\n+  private final String tableName;\n+  private final Class<? extends ETSoapObject> classRef;\n+  private String filter = \"\";\n+\n+\n+  SourceObject(String value, String tableName, Class<? extends ETSoapObject> classRef) {\n+    this.value = value;\n+    this.tableName = tableName;\n+    this.classRef = classRef;\n+  }\n+\n+  /**\n+   * Converts object string value into {@link SourceObject} enum.\n+   *\n+   * @param stringValue object string value\n+   * @return source object in optional container\n+   */\n+  public static Optional<SourceObject> fromValue(String stringValue) {\n+    return Stream.of(values())\n+      .filter(keyType -> keyType.value.equalsIgnoreCase(stringValue))\n+      .findAny();\n+  }\n+\n+  public static String getSupportedObjects() {\n+    return Arrays.stream(SourceObject.values()).map(SourceObject::getValue)\n+      .collect(Collectors.joining(\", \"));\n+  }\n+\n+  public String getValue() {\n+    return value;\n+  }\n+\n+  public String getTableName() {\n+    return tableName;\n+  }\n+\n+  public Class<? extends ETSoapObject> getClassRef() {\n+    return classRef;\n+  }\n+\n+  public String getFilter() {\n+    return filter;\n+  }\n+\n+  public void setFilter(String filter) {\n+    this.filter = filter;\n+  }\n+\n+}"
  }
]
