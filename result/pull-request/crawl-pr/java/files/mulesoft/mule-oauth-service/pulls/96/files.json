[
  {
    "sha": "30462e268881de9bbf10b38c9052977d6b0e5980",
    "filename": "src/main/java/org/mule/service/oauth/internal/AbstractOAuthDancer.java",
    "status": "modified",
    "additions": 51,
    "deletions": 5,
    "changes": 56,
    "blob_url": "https://github.com/mulesoft/mule-oauth-service/blob/730a7d0dd75d5843156d5a9e6e036a012128dccc/src/main/java/org/mule/service/oauth/internal/AbstractOAuthDancer.java",
    "raw_url": "https://github.com/mulesoft/mule-oauth-service/raw/730a7d0dd75d5843156d5a9e6e036a012128dccc/src/main/java/org/mule/service/oauth/internal/AbstractOAuthDancer.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-oauth-service/contents/src/main/java/org/mule/service/oauth/internal/AbstractOAuthDancer.java?ref=730a7d0dd75d5843156d5a9e6e036a012128dccc",
    "patch": "@@ -6,6 +6,8 @@\n  */\n package org.mule.service.oauth.internal;\n \n+import static java.lang.Integer.getInteger;\n+import static java.lang.Long.getLong;\n import static java.lang.String.format;\n import static java.lang.System.nanoTime;\n import static java.lang.Thread.currentThread;\n@@ -21,8 +23,10 @@\n import static org.mule.runtime.api.metadata.MediaType.ANY;\n import static org.mule.runtime.api.metadata.MediaType.parse;\n import static org.mule.runtime.api.scheduler.SchedulerConfig.config;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SYSTEM_PROPERTY_PREFIX;\n import static org.mule.runtime.api.util.Preconditions.checkArgument;\n import static org.mule.runtime.core.api.util.ClassUtils.withContextClassLoader;\n+import static org.mule.runtime.core.internal.util.ConcurrencyUtils.exceptionallyCompleted;\n import static org.mule.runtime.http.api.HttpConstants.HttpStatus.BAD_REQUEST;\n import static org.mule.runtime.http.api.HttpConstants.Method.POST;\n import static org.mule.runtime.http.api.HttpHeaders.Names.AUTHORIZATION;\n@@ -96,6 +100,13 @@\n   private static final Logger LOGGER = getLogger(AbstractOAuthDancer.class);\n \n   public static final int TOKEN_REQUEST_TIMEOUT_MILLIS = 60000;\n+  public static final String MAX_ATTEMPTS_PROPERTY = SYSTEM_PROPERTY_PREFIX + \"oauth.get-context.max.attempts\";\n+  public static final String RETRY_INTERVAL_PROPERTY = SYSTEM_PROPERTY_PREFIX + \"oauth.get-context.retry.interval\";\n+\n+  private static final int MAX_ATTEMPTS = getInteger(MAX_ATTEMPTS_PROPERTY, 5);\n+  private static final long RETRY_INTERVAL = getLong(RETRY_INTERVAL_PROPERTY, 100l);\n+\n+  public static final String ERROR_GETTING_TOKEN_MESSAGE = \"OAuthContext not available\";\n \n   protected final String name;\n \n@@ -222,15 +233,23 @@ protected String handleClientCredentials(final Map<String, String> formData) {\n    */\n   protected <T> CompletableFuture<T> doRefreshToken(Supplier<ResourceOwnerOAuthContext> oauthContextSupplier,\n                                                     Function<ResourceOwnerOAuthContext, CompletableFuture<T>> tokenRefreshRequester) {\n-    ResourceOwnerOAuthContext oauthContext = oauthContextSupplier.get();\n+    ResourceOwnerOAuthContext oauthContext = resolveContext(oauthContextSupplier);\n+\n+    if (oauthContext == null) {\n+      return exceptionallyCompleted(new IllegalStateException(ERROR_GETTING_TOKEN_MESSAGE));\n+    }\n \n     final Lock lock = oauthContext.getRefreshOAuthContextLock(name, getLockProvider());\n \n     // If the context was just created, initialize it.\n     if (oauthContext.getDancerState() == NO_TOKEN) {\n       if (lock.tryLock()) {\n         try {\n-          oauthContext = oauthContextSupplier.get();\n+          oauthContext = resolveContext(oauthContextSupplier);\n+          if (oauthContext == null) {\n+            return exceptionallyCompleted(new IllegalStateException(ERROR_GETTING_TOKEN_MESSAGE));\n+          }\n+\n           if (oauthContext.getDancerState() == HAS_TOKEN) {\n             // Some other thread/node completed the refresh before lock was acquired here. Very quickly and quite improbable, but\n             // possible.\n@@ -253,7 +272,10 @@ protected String handleClientCredentials(final Map<String, String> formData) {\n       final String accessToken = oauthContext.getAccessToken();\n       lock.lock();\n       try {\n-        oauthContext = oauthContextSupplier.get();\n+        oauthContext = resolveContext(oauthContextSupplier);\n+        if (oauthContext == null) {\n+          return exceptionallyCompleted(new IllegalStateException(ERROR_GETTING_TOKEN_MESSAGE));\n+        }\n         if (oauthContext.getDancerState() == HAS_TOKEN) {\n           if (accessToken.equals(oauthContext.getAccessToken())) {\n             return doRefreshTokenRequest(tokenRefreshRequester, oauthContext);\n@@ -276,6 +298,22 @@ protected String handleClientCredentials(final Map<String, String> formData) {\n     return pollForRefreshComplete(oauthContextSupplier, oauthContext);\n   }\n \n+  private ResourceOwnerOAuthContext resolveContext(Supplier<ResourceOwnerOAuthContext> oauthContextSupplier) {\n+    for (int i = 0; i < MAX_ATTEMPTS; i++) {\n+      ResourceOwnerOAuthContext oauthContext = oauthContextSupplier.get();\n+      if (oauthContext != null) {\n+        return oauthContext;\n+      }\n+      LOGGER.error(\"OAuthContext was null! retrying {}/{}...\", i + 1, MAX_ATTEMPTS);\n+      try {\n+        MILLISECONDS.sleep(RETRY_INTERVAL);\n+      } catch (InterruptedException e) {\n+        return null;\n+      }\n+    }\n+    return null;\n+  }\n+\n   protected <T> CompletableFuture<T> doRefreshTokenRequest(\n                                                            Function<ResourceOwnerOAuthContext, CompletableFuture<T>> tokenRefreshRequester,\n                                                            ResourceOwnerOAuthContext oauthContext) {\n@@ -299,7 +337,11 @@ protected String handleClientCredentials(final Map<String, String> formData) {\n     pollScheduler.execute(() -> {\n       final long startNanos = nanoTime();\n \n-      ResourceOwnerOAuthContext ctx = oauthContextSupplier.get();\n+      ResourceOwnerOAuthContext ctx = resolveContext(oauthContextSupplier);\n+      if (ctx == null) {\n+        pendingResponse.completeExceptionally(new IllegalStateException(ERROR_GETTING_TOKEN_MESSAGE));\n+        return;\n+      }\n \n       while (ctx.getDancerState() == REFRESHING_TOKEN) {\n         if (NANOSECONDS.toMillis(nanoTime() - startNanos) > TOKEN_REQUEST_TIMEOUT_MILLIS) {\n@@ -319,7 +361,11 @@ protected String handleClientCredentials(final Map<String, String> formData) {\n           currentThread().interrupt();\n           pendingResponse.completeExceptionally(e);\n         }\n-        ctx = oauthContextSupplier.get();\n+        ctx = resolveContext(oauthContextSupplier);\n+        if (ctx == null) {\n+          pendingResponse.completeExceptionally(new IllegalStateException(ERROR_GETTING_TOKEN_MESSAGE));\n+          return;\n+        }\n       }\n       pendingResponse.complete(null);\n     });"
  },
  {
    "sha": "ce5f53e30b604c4f1be2651bb29a1f69920ee970",
    "filename": "src/test/java/org/mule/service/oauth/internal/DefaultClientCredentialsTokenTestCase.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/mulesoft/mule-oauth-service/blob/730a7d0dd75d5843156d5a9e6e036a012128dccc/src/test/java/org/mule/service/oauth/internal/DefaultClientCredentialsTokenTestCase.java",
    "raw_url": "https://github.com/mulesoft/mule-oauth-service/raw/730a7d0dd75d5843156d5a9e6e036a012128dccc/src/test/java/org/mule/service/oauth/internal/DefaultClientCredentialsTokenTestCase.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-oauth-service/contents/src/test/java/org/mule/service/oauth/internal/DefaultClientCredentialsTokenTestCase.java?ref=730a7d0dd75d5843156d5a9e6e036a012128dccc",
    "patch": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.service.oauth.internal;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.round;\n+import static java.lang.Thread.sleep;\n+import static java.util.concurrent.Executors.newFixedThreadPool;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.oauth.api.state.DancerState.HAS_TOKEN;\n+import static org.mule.service.oauth.internal.AbstractOAuthDancer.MAX_ATTEMPTS_PROPERTY;\n+import static org.mule.service.oauth.internal.AbstractOAuthDancer.RETRY_INTERVAL_PROPERTY;\n+\n+import io.qameta.allure.Issue;\n+import org.junit.Rule;\n+import org.mule.runtime.oauth.api.builder.OAuthClientCredentialsDancerBuilder;\n+import org.mule.runtime.oauth.api.state.ResourceOwnerOAuthContext;\n+import org.mule.tck.junit4.rule.SystemProperty;\n+import org.mule.test.oauth.AbstractOAuthTestCase;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.junit.Test;\n+import org.mockito.stubbing.Answer;\n+\n+public class DefaultClientCredentialsTokenTestCase extends AbstractOAuthTestCase {\n+\n+  @Rule\n+  public SystemProperty maxAttempts = new SystemProperty(MAX_ATTEMPTS_PROPERTY, \"50\");\n+\n+  @Rule\n+  public SystemProperty retryInterval = new SystemProperty(RETRY_INTERVAL_PROPERTY, \"1\");\n+\n+  @Test\n+  @Issue(\"MULE-19239\")\n+  public void cloudhubIssue() throws Exception {\n+    final Map<String, Object> tokensStore = mock(Map.class);\n+    final int iterations = 500;\n+    final Random random = new Random();\n+\n+    final ResourceOwnerOAuthContext resourceOwnerOAuthContext = mock(ResourceOwnerOAuthContext.class, RETURNS_DEEP_STUBS);\n+    when(resourceOwnerOAuthContext.getAccessToken()).thenReturn(\"accessToken\");\n+    when(resourceOwnerOAuthContext.getDancerState()).thenReturn(HAS_TOKEN);\n+    final Supplier<ResourceOwnerOAuthContext> oauthContextSupplier = mock(Supplier.class);\n+    when(oauthContextSupplier.get()).thenAnswer((Answer<ResourceOwnerOAuthContext>) invocation -> {\n+      if (random.nextBoolean()) {\n+        return resourceOwnerOAuthContext;\n+      } else {\n+        sleep(max(1, round(random.nextDouble() * 1000)));\n+        return null;\n+      }\n+    });\n+\n+    final Function<ResourceOwnerOAuthContext, CompletableFuture<Object>> tokenRefreshRequester = mock(Function.class);\n+    when(tokenRefreshRequester.apply(any())).thenReturn(CompletableFuture.completedFuture(\"token\"));\n+\n+    final OAuthClientCredentialsDancerBuilder builder = baseClientCredentialsDancerBuilder(tokensStore);\n+    builder.tokenUrl(\"http://host/token\");\n+    DefaultClientCredentialsOAuthDancer minimalDancer = (DefaultClientCredentialsOAuthDancer) startDancer(builder);\n+\n+    List<Throwable> exceptions = Collections.synchronizedList(new LinkedList<>());\n+    CountDownLatch latch = new CountDownLatch(iterations);\n+    ExecutorService executorService = newFixedThreadPool(10);\n+    try {\n+      for (int i = 0; i < iterations; i++) {\n+        executorService.submit(() -> {\n+          try {\n+            minimalDancer.doRefreshToken(oauthContextSupplier, tokenRefreshRequester);\n+          } catch (Throwable t) {\n+            exceptions.add(t);\n+          } finally {\n+            latch.countDown();\n+          }\n+        });\n+      }\n+\n+      latch.await(1, MINUTES);\n+      assertThat(exceptions, hasSize(0));\n+      verify(tokenRefreshRequester, times(iterations)).apply(any());\n+    } finally {\n+      executorService.shutdownNow();\n+    }\n+  }\n+}"
  }
]
