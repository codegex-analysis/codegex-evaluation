[
  {
    "sha": "bab24b6ff50406c3924d3bb734a6fc55f9665caf",
    "filename": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java",
    "status": "modified",
    "additions": 16,
    "deletions": 10,
    "changes": 26,
    "blob_url": "https://github.com/mulesoft/mule/blob/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java?ref=d14ae9e80f1d200ff2d3b4a282956ff99a0a9752",
    "patch": "@@ -6,6 +6,8 @@\n  */\n package org.mule.runtime.core.internal.processor;\n \n+import static java.lang.Integer.getInteger;\n+import static java.lang.Runtime.getRuntime;\n import static java.lang.Thread.currentThread;\n import static java.lang.Thread.yield;\n import static java.util.Collections.emptyList;\n@@ -14,6 +16,8 @@\n import static org.mule.runtime.api.notification.AsyncMessageNotification.PROCESS_ASYNC_COMPLETE;\n import static org.mule.runtime.api.notification.AsyncMessageNotification.PROCESS_ASYNC_SCHEDULED;\n import static org.mule.runtime.api.notification.EnrichedNotificationInfo.createInfo;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SCOPES_DEFAULT_MAX_CONCURRENCY;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SYSTEM_PROPERTY_PREFIX;\n import static org.mule.runtime.core.api.config.i18n.CoreMessages.objectIsNull;\n import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n@@ -88,6 +92,11 @@\n public class AsyncDelegateMessageProcessor extends AbstractMessageProcessorOwner\n     implements Scope, Initialisable, Startable, Stoppable {\n \n+  private static final int DEFAULT_MAX_CONCURRENCY =\n+      getInteger(SYSTEM_PROPERTY_PREFIX + AsyncDelegateMessageProcessor.class.getName() + \".DEFAULT_MAX_CONCURRENCY\",\n+                 getInteger(SCOPES_DEFAULT_MAX_CONCURRENCY,\n+                            getRuntime().availableProcessors() * getRuntime().availableProcessors()));\n+\n   @Inject\n   private MuleContext muleContext;\n   @Inject\n@@ -122,19 +131,16 @@ public AsyncDelegateMessageProcessor(MessageProcessorChainBuilder delegate, Stri\n   public void initialise() throws InitialisationException {\n     Component rootContainer = getFromAnnotatedObject(componentLocator, this).orElse(null);\n     if (rootContainer instanceof Pipeline) {\n-      if (maxConcurrency != null) {\n-        ProcessingStrategyFactory flowPsFactory = ((Pipeline) rootContainer).getProcessingStrategyFactory();\n+      ProcessingStrategyFactory flowPsFactory = ((Pipeline) rootContainer).getProcessingStrategyFactory();\n \n-        if (flowPsFactory instanceof AsyncProcessingStrategyFactory) {\n-          ((AsyncProcessingStrategyFactory) flowPsFactory).setMaxConcurrency(maxConcurrency);\n-        } else {\n-          logger.warn(\"{} does not support 'maxConcurrency'. Ignoring the value.\", flowPsFactory.getClass().getSimpleName());\n-        }\n-        processingStrategy = flowPsFactory.create(getMuleContext(), getLocation().getLocation());\n+      if (flowPsFactory instanceof AsyncProcessingStrategyFactory) {\n+        ((AsyncProcessingStrategyFactory) flowPsFactory)\n+            .setMaxConcurrency(maxConcurrency != null ? maxConcurrency : DEFAULT_MAX_CONCURRENCY);\n       } else {\n-        ProcessingStrategyFactory flowPsFactory = ((Pipeline) rootContainer).getProcessingStrategyFactory();\n-        processingStrategy = flowPsFactory.create(getMuleContext(), getLocation().getLocation());\n+        logger.warn(\"{} does not support 'maxConcurrency'. Ignoring the value.\", flowPsFactory.getClass().getSimpleName());\n       }\n+\n+      processingStrategy = flowPsFactory.create(getMuleContext(), getLocation().getLocation());\n     } else {\n       processingStrategy = createDefaultProcessingStrategyFactory().create(getMuleContext(), getLocation().getLocation());\n     }"
  },
  {
    "sha": "7a9b6071a2926e4814483c14645fa8011b141606",
    "filename": "core/src/main/java/org/mule/runtime/core/internal/routing/ParallelForEach.java",
    "status": "modified",
    "additions": 12,
    "deletions": 3,
    "changes": 15,
    "blob_url": "https://github.com/mulesoft/mule/blob/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/core/src/main/java/org/mule/runtime/core/internal/routing/ParallelForEach.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/core/src/main/java/org/mule/runtime/core/internal/routing/ParallelForEach.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/core/src/main/java/org/mule/runtime/core/internal/routing/ParallelForEach.java?ref=d14ae9e80f1d200ff2d3b4a282956ff99a0a9752",
    "patch": "@@ -7,14 +7,18 @@\n \n package org.mule.runtime.core.internal.routing;\n \n+import static java.lang.Integer.getInteger;\n+import static java.lang.Runtime.getRuntime;\n import static java.util.Collections.singletonList;\n import static java.util.Optional.of;\n-import static org.mule.runtime.core.api.processor.strategy.AsyncProcessingStrategyFactory.DEFAULT_MAX_CONCURRENCY;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SCOPES_DEFAULT_MAX_CONCURRENCY;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SYSTEM_PROPERTY_PREFIX;\n import static org.mule.runtime.core.api.util.StreamingUtils.updateTypedValueForStreaming;\n import static org.mule.runtime.core.internal.routing.ExpressionSplittingStrategy.DEFAULT_SPLIT_EXPRESSION;\n import static org.mule.runtime.core.internal.routing.ForkJoinStrategy.RoutingPair.of;\n import static org.mule.runtime.core.privileged.processor.MessageProcessors.buildNewChainWithListOfProcessors;\n import static reactor.core.publisher.Flux.fromIterable;\n+\n import org.mule.runtime.api.lifecycle.InitialisationException;\n import org.mule.runtime.api.message.Message;\n import org.mule.runtime.api.metadata.TypedValue;\n@@ -27,10 +31,10 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.reactivestreams.Publisher;\n-\n import javax.inject.Inject;\n \n+import org.reactivestreams.Publisher;\n+\n /**\n  * <p>\n  * The <code>Parallel-Foreach</code> scope splits the incoming {@link org.mule.runtime.api.message.Message} into n parts will\n@@ -47,6 +51,11 @@\n  */\n public class ParallelForEach extends AbstractForkJoinRouter {\n \n+  private static final int DEFAULT_MAX_CONCURRENCY =\n+      getInteger(SYSTEM_PROPERTY_PREFIX + ParallelForEach.class.getName() + \".DEFAULT_MAX_CONCURRENCY\",\n+                 getInteger(SCOPES_DEFAULT_MAX_CONCURRENCY,\n+                            getRuntime().availableProcessors() * getRuntime().availableProcessors()));\n+\n   @Inject\n   protected StreamingManager streamingManager;\n "
  },
  {
    "sha": "19be00eaa0a4cc01636139e914f24f75aa249503",
    "filename": "core/src/main/java/org/mule/runtime/core/internal/routing/ScatterGatherRouter.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/mulesoft/mule/blob/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/core/src/main/java/org/mule/runtime/core/internal/routing/ScatterGatherRouter.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/core/src/main/java/org/mule/runtime/core/internal/routing/ScatterGatherRouter.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/core/src/main/java/org/mule/runtime/core/internal/routing/ScatterGatherRouter.java?ref=d14ae9e80f1d200ff2d3b4a282956ff99a0a9752",
    "patch": "@@ -7,7 +7,12 @@\n \n package org.mule.runtime.core.internal.routing;\n \n+import static java.lang.Integer.getInteger;\n+import static java.lang.Math.min;\n+import static java.lang.Runtime.getRuntime;\n import static java.util.Collections.emptyList;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SCOPES_DEFAULT_MAX_CONCURRENCY;\n+import static org.mule.runtime.api.util.MuleSystemProperties.SYSTEM_PROPERTY_PREFIX;\n import static org.mule.runtime.api.util.Preconditions.checkArgument;\n import static org.mule.runtime.core.api.config.i18n.CoreMessages.cannotCopyStreamPayload;\n import static org.mule.runtime.core.api.config.i18n.CoreMessages.noEndpointsForRouter;\n@@ -47,6 +52,11 @@\n  */\n public class ScatterGatherRouter extends AbstractForkJoinRouter implements Router {\n \n+  private static final int DEFAULT_MAX_CONCURRENCY =\n+      getInteger(SYSTEM_PROPERTY_PREFIX + ScatterGatherRouter.class.getName() + \".DEFAULT_MAX_CONCURRENCY\",\n+                 getInteger(SCOPES_DEFAULT_MAX_CONCURRENCY,\n+                            getRuntime().availableProcessors() * getRuntime().availableProcessors()));\n+\n   private List<MessageProcessorChain> routes = emptyList();\n \n   @Inject\n@@ -88,7 +98,7 @@ protected boolean isDelayErrors() {\n \n   @Override\n   protected int getDefaultMaxConcurrency() {\n-    return routes.size();\n+    return min(DEFAULT_MAX_CONCURRENCY, routes.size());\n   }\n \n   @Override"
  },
  {
    "sha": "6425bd81c28e479a2ecaf925e90c07c2e7b874a0",
    "filename": "runtime-extension-model/src/main/resources/META-INF/mule-core-common.xsd",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/mulesoft/mule/blob/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/runtime-extension-model/src/main/resources/META-INF/mule-core-common.xsd",
    "raw_url": "https://github.com/mulesoft/mule/raw/d14ae9e80f1d200ff2d3b4a282956ff99a0a9752/runtime-extension-model/src/main/resources/META-INF/mule-core-common.xsd",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/runtime-extension-model/src/main/resources/META-INF/mule-core-common.xsd?ref=d14ae9e80f1d200ff2d3b4a282956ff99a0a9752",
    "patch": "@@ -2645,7 +2645,7 @@\n                     <xsd:attribute name=\"maxConcurrency\" type=\"substitutableInt\">\n                         <xsd:annotation>\n                             <xsd:documentation>\n-                                The maximum concurrency. This value determines the maximum level of parallelism that will be used by this router. By default all routes will run in parallel (assuming available resources) but this can be limited or sequential behaviour achieved via the use of this attribute.\n+                                The maximum concurrency. This value determines the maximum level of parallelism that will be used by this router.\n                             </xsd:documentation>\n                         </xsd:annotation>\n                     </xsd:attribute>"
  }
]
