[
  {
    "sha": "1e3d7f207d8830b2491df3d6491c132082929692",
    "filename": "core/src/main/java/org/mule/ArtifactStoppedPersistenceListener.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/core/src/main/java/org/mule/ArtifactStoppedPersistenceListener.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/core/src/main/java/org/mule/ArtifactStoppedPersistenceListener.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/core/src/main/java/org/mule/ArtifactStoppedPersistenceListener.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule;\n+\n+/**\n+ * Defines a listener to persist stop events of Mule artifacts.\n+ */\n+public interface ArtifactStoppedPersistenceListener\n+{\n+\n+  String ARTIFACT_STOPPED_LISTENER = \"artifactStoppedPersistenceListener\";\n+\n+  /**\n+   * Notifies an artifact has been started.\n+   */\n+  void onStart();\n+\n+  /**\n+   * Notifies an artifact has been stopped.\n+   */\n+  void onStop();\n+\n+  /**\n+   * Turns off persistence.\n+   * <p>\n+   * The artifact stopped state should only be persisted if it was stopped by external users.\n+   * Since external users usually call the artifact stop() method directly from their own methods, a workaround is\n+   * to prevent persistence when the artifact is stopped for other reasons.\n+   */\n+  void doNotPersist();\n+}"
  },
  {
    "sha": "253f367f7a684a9788b0355f0bf81a014612334f",
    "filename": "core/src/main/java/org/mule/DefaultMuleContext.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/core/src/main/java/org/mule/DefaultMuleContext.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/core/src/main/java/org/mule/DefaultMuleContext.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/core/src/main/java/org/mule/DefaultMuleContext.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,6 +6,7 @@\n  */\n package org.mule;\n \n+import static org.mule.ArtifactStoppedPersistenceListener.ARTIFACT_STOPPED_LISTENER;\n import static org.mule.api.config.MuleProperties.OBJECT_EXPRESSION_LANGUAGE;\n import static org.mule.api.config.MuleProperties.OBJECT_POLLING_CONTROLLER;\n import static org.mule.api.config.MuleProperties.OBJECT_TRANSACTION_MANAGER;\n@@ -209,6 +210,9 @@\n     \n     private Properties deploymentProperties;\n \n+    public static final String START = \"start\";\n+    public static final String STOP = \"stop\";\n+\n     /**\n      * @deprecated Use empty constructor instead and use setter for dependencies.\n      */\n@@ -1270,4 +1274,18 @@ public void setDeploymentProperties(Properties deploymentProperties)\n         this.deploymentProperties = deploymentProperties;\n         \n     }\n+\n+    public void persistArtifactState(String state)\n+    {\n+        ArtifactStoppedPersistenceListener artifactStoppedPersistenceListener =\n+            getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER);\n+        if (artifactStoppedPersistenceListener != null && state.equals(START))\n+        {\n+            artifactStoppedPersistenceListener.onStart();\n+        }\n+        else if (artifactStoppedPersistenceListener != null && state.equals(STOP))\n+        {\n+            artifactStoppedPersistenceListener.onStop();\n+        }\n+    }\n }"
  },
  {
    "sha": "0084afe10e73ed53439b826c19e93d8df1ec9b80",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/ArchiveDeployer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArchiveDeployer.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArchiveDeployer.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/ArchiveDeployer.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,6 +6,8 @@\n  */\n package org.mule.module.launcher;\n \n+import org.mule.module.launcher.application.Application;\n+import org.mule.module.launcher.application.ApplicationStatus;\n import org.mule.module.launcher.artifact.Artifact;\n import org.mule.module.launcher.artifact.ArtifactFactory;\n \n@@ -28,6 +30,7 @@\n     T deployPackagedArtifact(String zip) throws DeploymentException;\n \n     T deployExplodedArtifact(String artifactDir) throws DeploymentException;\n+    T deployExplodedArtifact(String artifactDir, Optional<Properties> properties) throws DeploymentException;\n \n     /**\n      * Indicates if a previously failed artifact (zombie) configuration was updated on the file system.\n@@ -67,4 +70,6 @@\n \n     T deployPackagedArtifact(URL domainArchiveUrl, Optional<Properties> appProperties) throws DeploymentException;\n \n+    void doNotPersistArtifactStop(T artifact);\n+\n }"
  },
  {
    "sha": "d0f83a82e5edcf281a3d76ca0183360f670908b0",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeployer.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeployer.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeployer.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeployer.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,6 +6,7 @@\n  */\n package org.mule.module.launcher;\n \n+import org.mule.api.registry.RegistrationException;\n import org.mule.module.launcher.artifact.Artifact;\n \n import java.io.IOException;\n@@ -22,7 +23,7 @@\n \n     /**\n      * Deploys an artifact.\n-     *\n+     *<p>\n      * The deployer executes the artifact installation phases until the artifact is deployed After this method call the Artifact\n      * will be installed in the container and started.\n      *  @param artifact artifact to be deployed\n@@ -32,7 +33,7 @@\n \n     /**\n      * Deploys an artifact.\n-     *\n+     *<p>\n      * The deployer executes the artifact installation phases until the artifact is deployed After this method call the Artifact\n      * will be installed in the container and started.\n      *  @param artifact artifact to be deployed\n@@ -41,7 +42,7 @@\n \n     /**\n      * Undeploys an artifact.\n-     *\n+     *<p>\n      * The deployer executes the artifact desinstallation\n      * phases until de artifact is undeployed.\n      * After this method call the Artifact will not longer be running inside\n@@ -51,4 +52,13 @@\n      */\n     void undeploy(final T artifact);\n \n+    /**\n+     * Cancels the persistence of a stop of an artifact.\n+     *<p>\n+     * A stop of a certain artifact must only be persisted when it was stopped by the Agent. In case of undeployment, it should not be persisted.\n+     *\n+     * @param artifact artifact to be undeployed\n+     */\n+    void doNotPersistArtifactStop(T artifact);\n+\n }"
  },
  {
    "sha": "a996d9c3564a687480ee9cade99fa1533e4e26af",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeploymentTemplate.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeploymentTemplate.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeploymentTemplate.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactDeploymentTemplate.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,8 +6,16 @@\n  */\n package org.mule.module.launcher;\n \n+import org.mule.module.launcher.application.Application;\n+import org.mule.module.launcher.application.ApplicationStatus;\n import org.mule.module.launcher.artifact.Artifact;\n \n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.Collections.emptyMap;\n+\n /**\n  * Utility to hook callbacks just before and after an artifact is redeployed in Mule.\n  */\n@@ -28,6 +36,12 @@ public void preRedeploy(Artifact artifact)\n \n         @Override\n         public void postRedeploy(Artifact artifact)\n+        {\n+            postRedeploy(artifact,  Collections.<Application, ApplicationStatus>emptyMap());\n+        }\n+\n+        @Override\n+        public void postRedeploy(Artifact artifact, Map<Application, ApplicationStatus> appStatusPreRedeployment)\n         {\n             // Nothing to do\n         }\n@@ -47,4 +61,7 @@ public void postRedeploy(Artifact artifact)\n      */\n     void postRedeploy(Artifact artifact);\n \n+    void postRedeploy(Artifact artifact, Map<Application, ApplicationStatus> appStatusPreRedeployment);\n+\n+\n }"
  },
  {
    "sha": "9f1b5847a2dabda8ec9ce2f9ee3dab76be3271a0",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/ArtifactStoppedDeploymentPersistenceListener.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactStoppedDeploymentPersistenceListener.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactStoppedDeploymentPersistenceListener.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/ArtifactStoppedDeploymentPersistenceListener.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher;\n+\n+import static com.google.common.base.Optional.of;\n+import static java.lang.String.valueOf;\n+import static org.mule.module.launcher.DefaultArchiveDeployer.START_ARTIFACT_ON_DEPLOYMENT_PROPERTY;\n+import static org.mule.module.launcher.DeploymentPropertiesUtils.resolveDeploymentProperties;\n+\n+import org.mule.ArtifactStoppedPersistenceListener;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Defines a listener to persist stop events of Mule artifacts using deployment properties.\n+ */\n+final class ArtifactStoppedDeploymentPersistenceListener implements ArtifactStoppedPersistenceListener\n+{\n+\n+  private static transient final Logger logger = LoggerFactory.getLogger(ArtifactStoppedDeploymentPersistenceListener.class);\n+  /**\n+   * A possible race condition could happen if a stop request and a shutdown request\n+   * are concurrently sent to mule, in order to prevent it this property is defined as an AtomicBoolean.\n+   */\n+  private AtomicBoolean shouldPersist;\n+  private String artifactName;\n+\n+  public ArtifactStoppedDeploymentPersistenceListener(String artifactName)\n+  {\n+    this.artifactName = artifactName;\n+    shouldPersist = new AtomicBoolean(true);\n+  }\n+\n+  @Override\n+  public void onStart()\n+  {\n+    Properties properties = new Properties();\n+    properties.setProperty(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY, valueOf(true));\n+    try\n+    {\n+      resolveDeploymentProperties(artifactName, of(properties));\n+    }\n+    catch (IOException e)\n+    {\n+      logger.error(\"ArtifactStoppedDeploymentPersistenceListener failed to process notification onStart for artifact {}\",\n+          artifactName, e);\n+    }\n+  }\n+\n+  @Override\n+  public void onStop()\n+  {\n+    if (!shouldPersist.get())\n+    {\n+      return;\n+    }\n+    Properties properties = new Properties();\n+    properties.setProperty(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY, valueOf(false));\n+    try\n+    {\n+      resolveDeploymentProperties(artifactName, of(properties));\n+    }\n+    catch (IOException e)\n+    {\n+      logger.error(\"ArtifactStoppedDeploymentPersistenceListener failed to process notification onStop for artifact {}\",\n+          artifactName, e);\n+    }\n+  }\n+\n+  @Override\n+  public void doNotPersist()\n+  {\n+    shouldPersist.set(false);\n+  }\n+}"
  },
  {
    "sha": "bee43687752203d2b63c51f813e1a1474e686926",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/DefaultArchiveDeployer.java",
    "status": "modified",
    "additions": 26,
    "deletions": 20,
    "changes": 46,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DefaultArchiveDeployer.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DefaultArchiveDeployer.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/DefaultArchiveDeployer.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -7,14 +7,12 @@\n package org.mule.module.launcher;\n \n import static com.google.common.base.Optional.absent;\n-import static java.lang.Boolean.valueOf;\n import static org.apache.commons.lang.StringUtils.removeEndIgnoreCase;\n import static org.mule.module.launcher.DeploymentPropertiesUtils.resolveDeploymentProperties;\n import static org.mule.util.SplashScreen.miniSplash;\n \n import org.mule.config.i18n.CoreMessages;\n import org.mule.config.i18n.MessageFactory;\n-import org.mule.module.launcher.application.Application;\n import org.mule.module.launcher.application.NullDeploymentListener;\n import org.mule.module.launcher.artifact.Artifact;\n import org.mule.module.launcher.artifact.ArtifactFactory;\n@@ -58,16 +56,18 @@\n     private final ArtifactDeploymentTemplate deploymentTemplate;\n     private ArtifactFactory<T> artifactFactory;\n     private DeploymentListener deploymentListener = new NullDeploymentListener();\n+    private final DeploymentService deploymentService;\n \n     public DefaultArchiveDeployer(final ArtifactDeployer deployer, final ArtifactFactory artifactFactory, final ObservableList<T> artifacts,\n-                                  ArtifactDeploymentTemplate deploymentTemplate)\n+                                  ArtifactDeploymentTemplate deploymentTemplate, DeploymentService deploymentService)\n     {\n         this.deployer = deployer;\n         this.artifactFactory = artifactFactory;\n         this.artifacts = artifacts;\n         this.deploymentTemplate = deploymentTemplate;\n         this.artifactDir = artifactFactory.getArtifactDir();\n         this.artifactArchiveInstaller = new ArtifactArchiveInstaller(artifactDir);\n+        this.deploymentService = deploymentService;\n     }\n \n     @Override\n@@ -94,13 +94,24 @@ public T deployPackagedArtifact(String zip, Optional<Properties> deploymentPrope\n \n     @Override\n     public T deployExplodedArtifact(String artifactDir) throws DeploymentException\n+    {\n+        if (!isUpdatedZombieArtifact(artifactDir))\n+        {\n+            return null;\n+        }\n+        Optional<Properties> properties = absent();\n+        return deployExplodedApp(artifactDir, properties);\n+    }\n+\n+    @Override\n+    public T deployExplodedArtifact(String artifactDir, Optional<Properties> properties) throws DeploymentException\n     {\n         if (!isUpdatedZombieArtifact(artifactDir))\n         {\n             return null;\n         }\n \n-        return deployExplodedApp(artifactDir);\n+        return deployExplodedApp(artifactDir, properties);\n     }\n \n     @Override\n@@ -274,12 +285,12 @@ private T deployPackagedArtifact(final URL artifactUrl, String artifactName, Opt\n             undeployArtifact(artifactName);\n         }\n \n-        T deployedAtifact = deployPackagedArtifact(artifactUrl, deploymentProperties);\n-        deploymentTemplate.postRedeploy(deployedAtifact);\n-        return deployedAtifact;\n+        T deployedArtifact = deployPackagedArtifact(artifactUrl, deploymentProperties);\n+        deploymentTemplate.postRedeploy(deployedArtifact);\n+        return deployedArtifact;\n     }\n \n-    private T deployExplodedApp(String addedApp) throws DeploymentException\n+    private T deployExplodedApp(String addedApp, Optional<Properties> properties) throws DeploymentException\n     {\n         if (logger.isInfoEnabled())\n         {\n@@ -317,7 +328,7 @@ private T deployExplodedApp(String addedApp) throws DeploymentException\n             }\n         }\n \n-        deployArtifact(artifact);\n+        deployArtifact(artifact, properties);\n         return artifact;\n     }\n \n@@ -547,7 +558,7 @@ public void deployArtifact(T artifact, Optional<Properties> deploymentProperties\n             trackArtifact(artifact);\n \n             deploymentListener.onDeploymentStart(artifact.getArtifactName());\n-            deployer.deploy(artifact, shouldStartArtifact(artifact, deploymentProperties.orNull()));\n+            deployer.deploy(artifact);\n             artifactArchiveInstaller.createAnchorFile(artifact.getArtifactName());\n             deploymentListener.onDeploymentSuccess(artifact.getArtifactName());\n             artifactZombieMap.remove(artifact.getArtifactName());\n@@ -573,20 +584,15 @@ public void deployArtifact(T artifact, Optional<Properties> deploymentProperties\n         }\n     }\n \n-    private boolean shouldStartArtifact(T artifact, Properties deploymentProperties)\n-    {\n-        if (!(artifact instanceof Application) || deploymentProperties == null)\n-        {\n-            return true;\n-        }\n-\n-        return valueOf(deploymentProperties.getProperty(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY, \"true\"));\n-    }\n-\n     @Override\n     public T deployPackagedArtifact(String zip) throws DeploymentException\n     {\n         Optional<Properties> properties = absent();\n         return deployPackagedArtifact(zip, properties);\n     }\n+\n+    public void doNotPersistArtifactStop(T artifact)\n+    {\n+        deployer.doNotPersistArtifactStop(artifact);\n+    }\n }"
  },
  {
    "sha": "418e09d86c4bb97d661702a938adf16564e0dfa6",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/DefaultArtifactDeployer.java",
    "status": "modified",
    "additions": 62,
    "deletions": 5,
    "changes": 67,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DefaultArtifactDeployer.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DefaultArtifactDeployer.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/DefaultArtifactDeployer.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,9 +6,25 @@\n  */\n package org.mule.module.launcher;\n \n+import static com.google.common.base.Optional.absent;\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.String.format;\n+import static org.mule.ArtifactStoppedPersistenceListener.ARTIFACT_STOPPED_LISTENER;\n+import static org.mule.module.launcher.DefaultArchiveDeployer.START_ARTIFACT_ON_DEPLOYMENT_PROPERTY;\n+import static org.mule.module.launcher.DeploymentPropertiesUtils.resolveDeploymentProperties;\n+\n+import org.mule.ArtifactStoppedPersistenceListener;\n+import org.mule.DefaultMuleContext;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.registry.Registry;\n import org.mule.config.i18n.MessageFactory;\n import org.mule.module.launcher.artifact.Artifact;\n \n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Properties;\n+\n+import com.google.common.base.Optional;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -21,6 +37,7 @@ public void undeploy(Artifact artifact)\n     {\n         try\n         {\n+            doNotPersistArtifactStop(artifact);\n             tryToStopArtifact(artifact);\n             tryToDisposeArtifact(artifact);\n         }\n@@ -31,7 +48,7 @@ public void undeploy(Artifact artifact)\n                 throw ((DeploymentException) t);\n             }\n \n-            final String msg = String.format(\"Failed to undeployArtifact artifact [%s]\", artifact.getArtifactName());\n+            final String msg = format(\"Failed to undeployArtifact artifact [%s]\", artifact.getArtifactName());\n             throw new DeploymentException(MessageFactory.createStaticMessage(msg), t);\n         }\n     }\n@@ -44,7 +61,7 @@ private void tryToDisposeArtifact(Artifact artifact)\n         }\n         catch (Throwable t)\n         {\n-            logger.error(String.format(\"Unable to cleanly dispose artifact '%s'. Restart Mule if you get errors redeploying this artifact\", artifact.getArtifactName()), t);\n+            logger.error(format(\"Unable to cleanly dispose artifact '%s'. Restart Mule if you get errors redeploying this artifact\", artifact.getArtifactName()), t);\n         }\n     }\n \n@@ -57,7 +74,7 @@ private void tryToStopArtifact(Artifact artifact)\n         }\n         catch (Throwable t)\n         {\n-            logger.error(String.format(\"Unable to cleanly stop artifact '%s'. Restart Mule if you get errors redeploying this artifact\", artifact.getArtifactName()), t);\n+            logger.error(format(\"Unable to cleanly stop artifact '%s'. Restart Mule if you get errors redeploying this artifact\", artifact.getArtifactName()), t);\n         }\n     }\n \n@@ -68,10 +85,18 @@ public void deploy(Artifact artifact, boolean startArtifact)\n         {\n             artifact.install();\n             artifact.init();\n-            if (startArtifact)\n+            if (shouldStartArtifact(artifact))\n             {\n                 artifact.start();\n             }\n+            if (artifact.getMuleContext() != null && artifact.getMuleContext().getRegistry() != null)\n+            {\n+                ArtifactStoppedPersistenceListener artifactStoppedDeploymentListener =\n+                    new ArtifactStoppedDeploymentPersistenceListener(artifact.getArtifactName());\n+                DefaultMuleContext defaultMuleContext = (DefaultMuleContext) artifact.getMuleContext();\n+                MuleRegistry muleRegistry = defaultMuleContext.getRegistry();\n+                muleRegistry.registerObject(ARTIFACT_STOPPED_LISTENER, artifactStoppedDeploymentListener);\n+            }\n         }\n         catch (Throwable t)\n         {\n@@ -82,7 +107,7 @@ public void deploy(Artifact artifact, boolean startArtifact)\n                 throw ((DeploymentException) t);\n             }\n \n-            final String msg = String.format(\"Failed to deploy artifact [%s]\", artifact.getArtifactName());\n+            final String msg = format(\"Failed to deploy artifact [%s]\", artifact.getArtifactName());\n             throw new DeploymentException(MessageFactory.createStaticMessage(msg), t);\n         }\n     }\n@@ -93,4 +118,36 @@ public void deploy(Artifact artifact)\n         deploy(artifact, true);\n     }\n \n+    private Boolean shouldStartArtifact(Artifact artifact)\n+    {\n+        Properties deploymentProperties = null;\n+        try\n+        {\n+            Optional<Properties> properties = absent();\n+            deploymentProperties = resolveDeploymentProperties(artifact.getArtifactName(), properties);\n+        }\n+        catch (IOException e)\n+        {\n+            logger.error(format(\"Failed to load deployment property for artifact %s\",\n+                artifact.getArtifactName()), e);\n+        }\n+        return deploymentProperties != null\n+            && parseBoolean(deploymentProperties.getProperty(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY, \"true\"));\n+    }\n+\n+    public void doNotPersistArtifactStop(Artifact artifact)\n+    {\n+        if (artifact.getMuleContext() == null || artifact.getMuleContext().getRegistry() == null)\n+        {\n+            return;\n+        }\n+        Registry artifactRegistry = artifact.getMuleContext().getRegistry();\n+        Collection<ArtifactStoppedPersistenceListener> listeners =\n+            artifactRegistry.lookupObjects(ArtifactStoppedPersistenceListener.class);\n+        for (ArtifactStoppedPersistenceListener artifactStoppedPersistenceListener : listeners)\n+        {\n+            artifactStoppedPersistenceListener.doNotPersist();\n+        }\n+    }\n+\n }"
  },
  {
    "sha": "efef619ab9a2aac49756c264e815079b90221717",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/DeploymentDirectoryWatcher.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DeploymentDirectoryWatcher.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DeploymentDirectoryWatcher.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/DeploymentDirectoryWatcher.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -219,6 +219,7 @@ public void stop()\n         deploymentLock.lock();\n         try\n         {\n+            notifyStopListeners();\n             stopArtifacts(applications);\n             stopArtifacts(domains);\n         }\n@@ -656,6 +657,18 @@ public boolean resourcesHaveSameTimestamp(final T artifact)\n             return resourcesHaveSameTimestamp;\n         }\n     }\n+\n+    private void notifyStopListeners()\n+    {\n+        for (Application application : applications)\n+        {\n+            applicationArchiveDeployer.doNotPersistArtifactStop(application);\n+        }\n+        for (Domain domain : domains)\n+        {\n+            domainArchiveDeployer.doNotPersistArtifactStop(domain);\n+        }\n+    }\n }\n \n "
  },
  {
    "sha": "e4142ab643219d4ed941a67e67cedff643549894",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/DomainArchiveDeployer.java",
    "status": "modified",
    "additions": 13,
    "deletions": 28,
    "changes": 41,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DomainArchiveDeployer.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DomainArchiveDeployer.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/DomainArchiveDeployer.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -7,11 +7,6 @@\n package org.mule.module.launcher;\n \n import static com.google.common.base.Optional.absent;\n-import static com.google.common.base.Optional.of;\n-import static java.lang.String.valueOf;\n-import static org.mule.module.launcher.DefaultArchiveDeployer.START_ARTIFACT_ON_DEPLOYMENT_PROPERTY;\n-import static org.mule.module.launcher.application.ApplicationStatus.DEPLOYMENT_FAILED;\n-import static org.mule.module.launcher.application.ApplicationStatus.STARTED;\n \n import org.mule.module.launcher.application.Application;\n import org.mule.module.launcher.application.ApplicationStatus;\n@@ -73,6 +68,12 @@ public Domain deployExplodedArtifact(String artifactDir) throws DeploymentExcept\n         return domain;\n     }\n \n+    @Override\n+    public Domain deployExplodedArtifact(String artifactDir, Optional<Properties> properties) throws DeploymentException\n+    {\n+        return deployExplodedArtifact(artifactDir);\n+    }\n+\n     @Override\n     public boolean isUpdatedZombieArtifact(String artifactName)\n     {\n@@ -217,10 +218,8 @@ public boolean accept(File dir, String name)\n     public void redeploy(Domain artifact, Optional<Properties> deploymentProperties) throws DeploymentException\n     {\n         Collection<Application> domainApplications = findApplicationsAssociated(artifact);\n-        Map<Application, ApplicationStatus> appStatusPreRedeployment = new HashMap<>();\n         for (Application domainApplication : domainApplications)\n         {\n-            appStatusPreRedeployment.put(domainApplication, domainApplication.getStatus());\n             applicationDeployer.undeployArtifactWithoutUninstall(domainApplication);\n         }\n         try\n@@ -236,9 +235,7 @@ public void redeploy(Domain artifact, Optional<Properties> deploymentProperties)\n         {\n             try\n             {\n-                Optional<Properties> modifiedProperties = addShouldStartProperty(deploymentProperties,\n-                                                                                 appStatusPreRedeployment.get(domainApplication));\n-                applicationDeployer.deployArtifact(domainApplication, modifiedProperties);\n+                applicationDeployer.deployArtifact(domainApplication, deploymentProperties);\n             }\n             catch (Exception e)\n             {\n@@ -250,24 +247,6 @@ public void redeploy(Domain artifact, Optional<Properties> deploymentProperties)\n         }\n     }\n \n-    private Optional<Properties> addShouldStartProperty(Optional<Properties> deploymentProperties,\n-                                                        ApplicationStatus applicationStatus)\n-    {\n-        Properties newProperties;\n-        if (deploymentProperties.isPresent())\n-        {\n-            newProperties = new Properties(deploymentProperties.get());\n-        }\n-        else\n-        {\n-            newProperties = new Properties();\n-        }\n-\n-        boolean startArtifact = applicationStatus.equals(STARTED) || applicationStatus.equals(DEPLOYMENT_FAILED);\n-        newProperties.setProperty(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY, valueOf(startArtifact));\n-        return of(newProperties);\n-    }\n-\n     @Override\n     public void deployArtifact(Domain artifact, Optional<Properties> deploymentProperties) throws DeploymentException\n     {\n@@ -280,4 +259,10 @@ public Domain deployPackagedArtifact(String zip) throws DeploymentException\n         Optional<Properties> properties = absent();\n         return deployPackagedArtifact(zip, properties);\n     }\n+\n+    @Override\n+    public void doNotPersistArtifactStop(Domain artifact)\n+    {\n+        domainDeployer.doNotPersistArtifactStop(artifact);\n+    }\n }"
  },
  {
    "sha": "993d1bcf9288ea31026b6ec546986eb6846aeb65",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/DomainDeploymentTemplate.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DomainDeploymentTemplate.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/DomainDeploymentTemplate.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/DomainDeploymentTemplate.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -7,11 +7,13 @@\n package org.mule.module.launcher;\n \n import org.mule.module.launcher.application.Application;\n+import org.mule.module.launcher.application.ApplicationStatus;\n import org.mule.module.launcher.artifact.Artifact;\n import org.mule.module.launcher.domain.Domain;\n \n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Map;\n \n /**\n  * Utility to hook callbacks just before and after a domain zip is redeployed in Mule.\n@@ -49,6 +51,15 @@ public void preRedeploy(Artifact domain)\n      */\n     @Override\n     public void postRedeploy(Artifact domain)\n+    {\n+        postRedeploy(domain, Collections.<Application, ApplicationStatus>emptyMap());\n+    }\n+\n+    /**\n+     * Deploys applications that were undeployed when {@link #preRedeploy(Artifact)} was called..\n+     */\n+    @Override\n+    public void postRedeploy(Artifact domain, Map<Application, ApplicationStatus> appStatusPreRedeployment)\n     {\n         if (domain != null && !domainApplications.isEmpty())\n         {"
  },
  {
    "sha": "c9c774a3ad9956d0d56e526cb2ad4721f77d3ee7",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/MuleDeploymentService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/MuleDeploymentService.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/MuleDeploymentService.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/MuleDeploymentService.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -92,7 +92,7 @@ public MuleDeploymentService(PluginClassLoaderManager pluginClassLoaderManager)\n \n         ArtifactDeployer<Application> applicationMuleDeployer = new DefaultArtifactDeployer<Application>();\n \n-        this.applicationDeployer = new DefaultArchiveDeployer<>(applicationMuleDeployer, applicationFactory, applications, NOP_ARTIFACT_DEPLOYMENT_TEMPLATE);\n+        this.applicationDeployer = new DefaultArchiveDeployer<>(applicationMuleDeployer, applicationFactory, applications, NOP_ARTIFACT_DEPLOYMENT_TEMPLATE, this);\n         this.applicationDeployer.setDeploymentListener(applicationDeploymentListener);\n         this.domainDeployer = createDomainArchiveDeployer(domainFactory, domains, applicationDeployer);\n         this.domainDeployer.setDeploymentListener(domainDeploymentListener);\n@@ -478,7 +478,7 @@ protected DomainArchiveDeployer createDomainArchiveDeployer(DomainFactory domain\n     {\n         return new DomainArchiveDeployer(\n                 new DefaultArchiveDeployer<>(new DefaultArtifactDeployer<Domain>(), domainFactory, domains,\n-                                             new DomainDeploymentTemplate(applicationDeployer, this)),\n+                                             new DomainDeploymentTemplate(applicationDeployer, this), this),\n                 applicationDeployer, this);\n \n     }"
  },
  {
    "sha": "b309b8a769200f996819a88cb990c3667c388097",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/application/DefaultMuleApplication.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/application/DefaultMuleApplication.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/application/DefaultMuleApplication.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/application/DefaultMuleApplication.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,9 +6,14 @@\n  */\n package org.mule.module.launcher.application;\n \n+import static org.mule.ArtifactStoppedPersistenceListener.ARTIFACT_STOPPED_LISTENER;\n+import static org.mule.DefaultMuleContext.START;\n+import static org.mule.DefaultMuleContext.STOP;\n import static org.mule.config.i18n.MessageFactory.createStaticMessage;\n import static org.mule.util.SplashScreen.miniSplash;\n \n+import org.mule.ArtifactStoppedPersistenceListener;\n+import org.mule.DefaultMuleContext;\n import org.mule.MuleServer;\n import org.mule.api.MuleContext;\n import org.mule.api.MuleException;\n@@ -144,6 +149,7 @@ public void start()\n         try\n         {\n             this.muleContext.start();\n+            ((DefaultMuleContext) this.muleContext).persistArtifactState(START);\n \n             // null CCL ensures we log at 'system' level\n             // TODO getDomainClassLoader a more usable wrapper for any logger to be logged at sys level\n@@ -388,6 +394,7 @@ public void stop()\n             }\n \n             this.muleContext.stop();\n+            ((DefaultMuleContext) this.muleContext).persistArtifactState(STOP);\n         }\n         catch (MuleException e)\n         {"
  },
  {
    "sha": "58b26575afd6619b94610bd365d8a48f1f0aac29",
    "filename": "modules/launcher/src/main/java/org/mule/module/launcher/domain/DefaultMuleDomain.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/domain/DefaultMuleDomain.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/main/java/org/mule/module/launcher/domain/DefaultMuleDomain.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/main/java/org/mule/module/launcher/domain/DefaultMuleDomain.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -7,8 +7,11 @@\n package org.mule.module.launcher.domain;\n \n import static java.lang.Thread.currentThread;\n+import static org.mule.DefaultMuleContext.START;\n+import static org.mule.DefaultMuleContext.STOP;\n import static org.mule.util.SplashScreen.miniSplash;\n \n+import org.mule.DefaultMuleContext;\n import org.mule.MuleServer;\n import org.mule.api.MuleContext;\n import org.mule.api.MuleException;\n@@ -265,6 +268,7 @@ public void start()\n                 try\n                 {\n                     this.muleContext.start();\n+                    ((DefaultMuleContext) this.muleContext).persistArtifactState(START);\n                 }\n                 catch (MuleException e)\n                 {\n@@ -305,6 +309,7 @@ public void stop()\n             if (this.muleContext != null)\n             {\n                 this.muleContext.stop();\n+                ((DefaultMuleContext) this.muleContext).persistArtifactState(STOP);\n             }\n         }\n         catch (Exception e)"
  },
  {
    "sha": "21217144c8cf3f0c2ad18a1453b3126a449d4166",
    "filename": "modules/launcher/src/test/java/org/mule/module/launcher/DeploymentServiceTestCase.java",
    "status": "modified",
    "additions": 254,
    "deletions": 19,
    "changes": 273,
    "blob_url": "https://github.com/mulesoft/mule/blob/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/test/java/org/mule/module/launcher/DeploymentServiceTestCase.java",
    "raw_url": "https://github.com/mulesoft/mule/raw/79e67e7d34a8ba448713dd087825a8ead55834ad/modules/launcher/src/test/java/org/mule/module/launcher/DeploymentServiceTestCase.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule/contents/modules/launcher/src/test/java/org/mule/module/launcher/DeploymentServiceTestCase.java?ref=79e67e7d34a8ba448713dd087825a8ead55834ad",
    "patch": "@@ -6,6 +6,7 @@\n  */\n package org.mule.module.launcher;\n \n+import static com.google.common.base.Optional.absent;\n import static org.apache.commons.io.filefilter.FileFileFilter.FILE;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.not;\n@@ -34,19 +35,27 @@\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mule.ArtifactStoppedPersistenceListener.ARTIFACT_STOPPED_LISTENER;\n+import static org.mule.module.launcher.DefaultArchiveDeployer.START_ARTIFACT_ON_DEPLOYMENT_PROPERTY;\n+import static org.mule.module.launcher.DeploymentPropertiesUtils.resolveDeploymentProperties;\n import static org.mule.module.launcher.MuleDeploymentService.PARALLEL_DEPLOYMENT_PROPERTY;\n import static org.mule.module.launcher.application.ApplicationStatus.CREATED;\n+import static org.mule.module.launcher.application.ApplicationStatus.DESTROYED;\n import static org.mule.module.launcher.application.ApplicationStatus.STARTED;\n import static org.mule.module.launcher.application.ApplicationStatus.STOPPED;\n import static org.mule.module.launcher.descriptor.PropertiesDescriptorParser.PROPERTY_CONFIG_RESOURCES;\n import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n import static org.mule.util.FileUtils.deleteFile;\n+\n+import org.mule.DefaultMuleContext;\n import org.mule.api.MuleContext;\n+import org.mule.api.MuleException;\n import org.mule.api.config.MuleProperties;\n import org.mule.api.lifecycle.Initialisable;\n import org.mule.api.lifecycle.InitialisationException;\n import org.mule.api.registry.MuleRegistry;\n import org.mule.api.registry.Registry;\n+import org.mule.api.transport.Connector;\n import org.mule.config.StartupContext;\n import org.mule.module.http.internal.listener.DefaultHttpListenerConfig;\n import org.mule.module.launcher.application.Application;\n@@ -94,10 +103,15 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.ReentrantLock;\n \n+import com.google.common.base.Optional;\n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n+import org.hamcrest.core.Is;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -158,6 +172,7 @@\n     private final ApplicationFileBuilder httpAAppFileBuilder = new ApplicationFileBuilder(\"shared-http-app-a\").definedBy(\"shared-http-a-app-config.xml\").deployedWith(\"domain\", \"shared-http-domain\");\n     private final ApplicationFileBuilder httpBAppFileBuilder = new ApplicationFileBuilder(\"shared-http-app-b\").definedBy(\"shared-http-b-app-config.xml\").deployedWith(\"domain\", \"shared-http-domain\");\n     private final ApplicationFileBuilder badConfigAppFileBuilder = new ApplicationFileBuilder(\"bad-config-app\").definedBy(\"bad-app-config.xml\");\n+    private final ApplicationFileBuilder retryPolicyForeverAppFileBuilder = new ApplicationFileBuilder(\"retry-policy-forever-app\").definedBy(\"retry-policy-forever-app-config.xml\");\n \n     // Domain file builders\n     private final DomainFileBuilder brokenDomainFileBuilder = new DomainFileBuilder(\"brokenDomain\").corrupted();\n@@ -263,13 +278,7 @@ public void deploysAppZipOnStartup() throws Exception\n     @Test\n     public void extensionManagerPresent() throws Exception\n     {\n-        addPackedAppFromBuilder(emptyAppFileBuilder);\n-\n-        deploymentService.start();\n-\n-        assertApplicationDeploymentSuccess(applicationDeploymentListener, emptyAppFileBuilder.getId());\n-\n-        final Application app = findApp(emptyAppFileBuilder.getId(), 1);\n+        final Application app = deployApplication();\n         assertThat(app.getMuleContext().getExtensionManager(), is(notNullValue()));\n     }\n \n@@ -1149,27 +1158,46 @@ public void receivesMuleContextDeploymentNotifications() throws Exception\n     @Test\n     public void undeploysStoppedApp() throws Exception\n     {\n-        addPackedAppFromBuilder(emptyAppFileBuilder);\n-\n-        deploymentService.start();\n-\n-        assertApplicationDeploymentSuccess(applicationDeploymentListener, emptyAppFileBuilder.getId());\n-        final Application app = findApp(emptyAppFileBuilder.getId(), 1);\n+        final Application app = deployApplication();\n         app.stop();\n         assertStatus(app, STOPPED);\n \n         deploymentService.undeploy(app);\n     }\n \n     @Test\n-    public void undeploysApplicationRemovingAnchorFile() throws Exception\n+    public void whenAppIsStoppedStateIsPersistedAsDeploymentProperty() throws Exception\n     {\n-        addPackedAppFromBuilder(emptyAppFileBuilder);\n+        Application app = deployApplication();\n+        app.stop();\n \n-        deploymentService.start();\n+        DefaultMuleContext defaultMuleContext = (DefaultMuleContext) app.getMuleContext();\n+        assertThat(defaultMuleContext.getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER), is(notNullValue()));\n \n-        assertApplicationDeploymentSuccess(applicationDeploymentListener, emptyAppFileBuilder.getId());\n-        Application app = findApp(emptyAppFileBuilder.getId(), 1);\n+        Optional<Properties> properties = absent();\n+        Properties deploymentProperties = resolveDeploymentProperties(emptyAppFileBuilder.getId(), properties);\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), is(notNullValue()));\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), Is.<Object>is(\"false\"));\n+    }\n+\n+    @Test\n+    public void whenAppIsStoppedByUndeploymentStateIsNotPersistedAsDeploymentProperty() throws Exception\n+    {\n+        final Application app = deployApplication();\n+\n+        DefaultMuleContext defaultMuleContext = (DefaultMuleContext) app.getMuleContext();\n+        assertThat(defaultMuleContext.getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER), is(notNullValue()));\n+        deploymentService.undeploy(app);\n+\n+        Optional<Properties> properties = absent();\n+        Properties deploymentProperties = resolveDeploymentProperties(emptyAppFileBuilder.getId(), properties);\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), is(nullValue()));\n+    }\n+\n+    @Test\n+    public void undeploysApplicationRemovingAnchorFile() throws Exception\n+    {\n+        Application app = deployApplication();\n \n         assertTrue(\"Unable to remove anchor file\", removeAppAnchorFile(emptyAppFileBuilder.getId()));\n \n@@ -1219,6 +1247,59 @@ public void undeploysAppCompletelyEvenOnDisposingException() throws Exception\n         assertAppFolderIsDeleted(emptyAppFileBuilder.getId());\n     }\n \n+    @Test\n+    public void undeploysStoppedAppAndDoesNotStartItOnDeploy() throws Exception\n+    {\n+        final Application app = deployApplication();\n+        app.stop();\n+        assertStatus(app, STOPPED);\n+\n+        restartServer();\n+\n+        assertAppDeploymentAndStatus(emptyAppFileBuilder, CREATED);\n+    }\n+\n+    @Test\n+    public void undeploysStoppedAppDoesNotStartItOnDeployButCanBeStartedManually() throws Exception\n+    {\n+        final Application app = deployApplication();\n+        app.stop();\n+        assertStatus(app, STOPPED);\n+\n+        restartServer();\n+\n+        assertDeploymentSuccess(applicationDeploymentListener, emptyAppFileBuilder.getId());\n+        final Application app_2 = findApp(emptyAppFileBuilder.getId(), 1);\n+        assertStatus(app_2, CREATED);\n+        app_2.start();\n+        assertStatus(app_2, STARTED);\n+    }\n+\n+    @Test\n+    public void undeploysNotStoppedAppAndStartsItOnDeploy() throws Exception\n+    {\n+        final Application app = deployApplication();\n+        assertStatus(app, STARTED);\n+\n+        restartServer();\n+\n+        assertAppDeploymentAndStatus(emptyAppFileBuilder, STARTED);\n+    }\n+\n+    @Test\n+    public void stoppingMuleContextDoesNotPersistAppStoppedState() throws Exception\n+    {\n+        final Application app = deployApplication();\n+        assertStatus(app, STARTED);\n+        app.getMuleContext().stop();\n+\n+        assertThat(app.getMuleContext().getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER), is(notNullValue()));\n+\n+        Optional<Properties> properties = absent();\n+        Properties deploymentProperties = resolveDeploymentProperties(emptyDomainFileBuilder.getId(), properties);\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), is(nullValue()));\n+    }\n+\n     @Test\n     public void deploysIncompleteZipAppOnStartup() throws Exception\n     {\n@@ -1428,6 +1509,7 @@ public void undeploysAppWithPlugin() throws Exception\n \n         assertDeploymentSuccess(applicationDeploymentListener, echoPluginAppFileBuilder.getId());\n         final Application app = findApp(echoPluginAppFileBuilder.getId(), 1);\n+        assertThat(MuleFoldersUtil.getAppTempFolder(app.getArtifactName()).exists(), is(true));\n \n         // As this app has a plugin, the tmp directory must exist\n         assertApplicationTmpFileExists(app.getArtifactName());\n@@ -1440,6 +1522,7 @@ public void undeploysAppWithPlugin() throws Exception\n \n         // Check the tmp directory was effectively removed\n         assertApplicationTmpFileDoesNotExists(app.getArtifactName());\n+        assertThat(MuleFoldersUtil.getAppTempFolder(app.getArtifactName()).exists(), is(false));\n     }\n \n     @Test\n@@ -2046,6 +2129,35 @@ public void redeploysDomainZipRefreshesApps() throws Exception\n         assertApplicationDeploymentSuccess(applicationDeploymentListener, dummyDomainApp1FileBuilder.getId());\n     }\n \n+    @Test\n+    public void redeploysDomainZipRefreshesAppsButIfTheyWereStoppedTheyDoNotStart() throws Exception\n+    {\n+        addPackedDomainFromBuilder(dummyDomainFileBuilder);\n+        File dummyDomainFile = new File(domainsDir, dummyDomainFileBuilder.getZipPath());\n+        long firstFileTimestamp = dummyDomainFile.lastModified();\n+\n+        addPackedAppFromBuilder(dummyDomainApp1FileBuilder);\n+\n+        deploymentService.start();\n+\n+        assertDeploymentSuccess(domainDeploymentListener, dummyDomainFileBuilder.getId());\n+        assertApplicationDeploymentSuccess(applicationDeploymentListener, dummyDomainApp1FileBuilder.getId());\n+\n+        final Application app = findApp(dummyDomainApp1FileBuilder.getId(), 1);\n+        app.stop();\n+\n+        reset(domainDeploymentListener);\n+        reset(applicationDeploymentListener);\n+\n+        addPackedDomainFromBuilder(dummyDomainFileBuilder);\n+        alterTimestampIfNeeded(dummyDomainFile, firstFileTimestamp);\n+\n+        assertUndeploymentSuccess(applicationDeploymentListener, dummyDomainApp1FileBuilder.getId());\n+        assertUndeploymentSuccess(domainDeploymentListener, dummyDomainFileBuilder.getId());\n+        assertDeploymentSuccess(applicationDeploymentListener, dummyDomainApp1FileBuilder.getId());\n+        assertStatus(dummyDomainApp1FileBuilder.getId(), CREATED);\n+    }\n+\n     @Test\n     public void redeploysDomainZipDeployedAfterStartup() throws Exception\n     {\n@@ -2265,6 +2377,43 @@ public void undeploysStoppedDomain() throws Exception\n         deploymentService.undeploy(domain);\n     }\n \n+    @Test\n+    public void whenDomainIsStoppedStateIsPersistedAsDeploymentProperty() throws Exception\n+    {\n+        addPackedDomainFromBuilder(emptyDomainFileBuilder);\n+\n+        deploymentService.start();\n+\n+        assertDeploymentSuccess(domainDeploymentListener, emptyDomainFileBuilder.getId());\n+        final Domain domain = findADomain(emptyDomainFileBuilder.getId(), 1);\n+        domain.stop();\n+\n+        assertThat(domain.getMuleContext().getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER), is(notNullValue()));\n+\n+        Optional<Properties> properties = absent();\n+        Properties deploymentProperties = resolveDeploymentProperties(emptyDomainFileBuilder.getId(), properties);\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), is(notNullValue()));\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), Is.<Object>is(\"false\"));\n+    }\n+\n+    @Test\n+    public void whenDomainIsStoppedByUndeploymentStateIsNotPersistedAsDeploymentProperty() throws Exception\n+    {\n+        addPackedDomainFromBuilder(emptyDomainFileBuilder);\n+\n+        deploymentService.start();\n+\n+        assertDeploymentSuccess(domainDeploymentListener, emptyDomainFileBuilder.getId());\n+        final Domain domain = findADomain(emptyDomainFileBuilder.getId(), 1);\n+\n+        assertThat(domain.getMuleContext().getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER), is(notNullValue()));\n+        deploymentService.undeploy(domain);\n+\n+        Optional<Properties> properties = absent();\n+        Properties deploymentProperties = resolveDeploymentProperties(emptyDomainFileBuilder.getId(), properties);\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), is(nullValue()));\n+    }\n+\n     @Test\n     public void undeploysDomainRemovingAnchorFile() throws Exception\n     {\n@@ -2757,6 +2906,33 @@ public void redeploysDomainAndFails() throws Exception\n         assertNoDeploymentInvoked(applicationDeploymentListener);\n     }\n \n+    @Test\n+    public void redeployDomainWithStoppedAppsShouldPersistStoppedStateAndDoNotStartApps() throws Exception\n+    {\n+        addPackedDomainFromBuilder(dummyDomainFileBuilder);\n+\n+        addPackedAppFromBuilder(dummyDomainApp1FileBuilder);\n+\n+        deploymentService.start();\n+\n+        assertDeploymentSuccess(domainDeploymentListener, dummyDomainFileBuilder.getId());\n+        final Domain domain = findADomain(dummyDomainFileBuilder.getId(), 1);\n+        assertThat(domain.getMuleContext().getRegistry().lookupObject(ARTIFACT_STOPPED_LISTENER), is(notNullValue()));\n+\n+        assertApplicationDeploymentSuccess(applicationDeploymentListener, dummyDomainApp1FileBuilder.getId());\n+\n+        final Application app = findApp(dummyDomainApp1FileBuilder.getId(), 1);\n+        app.stop();\n+\n+        deploymentService.redeployDomain(dummyDomainFileBuilder.getId());\n+\n+        Optional<Properties> properties = absent();\n+        Properties deploymentProperties = resolveDeploymentProperties(dummyDomainApp1FileBuilder.getId(), properties);\n+        assertStatus(dummyDomainApp1FileBuilder.getId(), CREATED);\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), is(notNullValue()));\n+        assertThat(deploymentProperties.get(START_ARTIFACT_ON_DEPLOYMENT_PROPERTY), Is.<Object>is(\"false\"));\n+    }\n+\n     @Test\n     public void redeploysDomainWithOneApplicationFailedOnFirstDeployment() throws Exception\n     {\n@@ -3773,7 +3949,7 @@ protected DomainArchiveDeployer createDomainArchiveDeployer(DomainFactory domain\n         {\n             return new TestDomainArchiveDeployer(\n                     new DefaultArchiveDeployer<>(new DefaultArtifactDeployer<Domain>(), domainFactory, domains,\n-                                                 new DomainDeploymentTemplate(applicationDeployer, this)),\n+                                                 new DomainDeploymentTemplate(applicationDeployer, this), this),\n                     applicationDeployer, this);\n         }\n     }\n@@ -3832,19 +4008,46 @@ public void stoppedApplicationsAreNotStartedWhenDomainIsRedeployed() throws Exce\n         deploymentService.findApplication(dummyDomainApp1FileBuilder.getId()).stop();\n         assertStatus(dummyDomainApp1FileBuilder.getId(), STOPPED);\n \n+        reset(mockDeploymentListener);\n         // Redeploy domain\n         deploymentService.redeployDomain(dummyDomainFileBuilder.getId());\n+        assertDeploymentSuccess(mockDeploymentListener, dummyDomainApp1FileBuilder.getId());\n \n         // Application was redeployed but it is not started\n         assertStatus(dummyDomainApp1FileBuilder.getId(), CREATED);\n \n+        reset(mockDeploymentListener);\n         // Redeploy domain again\n         deploymentService.redeployDomain(dummyDomainFileBuilder.getId());\n+        assertDeploymentSuccess(mockDeploymentListener, dummyDomainApp1FileBuilder.getId());\n \n         // Application was redeployed twice but it is not started\n         assertStatus(dummyDomainApp1FileBuilder.getId(), CREATED);\n     }\n \n+    @Test\n+    public void stoppedApplicationsAreNotStartedWhenDomainIsRedeployedWithZip() throws Exception\n+    {\n+\n+        DeploymentListener mockDeploymentListener = spy(new DeploymentStatusTracker());\n+        deploymentService.addDeploymentListener(mockDeploymentListener);\n+\n+        deployDomainAndApplication(dummyDomainFileBuilder, dummyDomainApp1FileBuilder);\n+\n+        //Stop application and check status\n+        assertStatus(dummyDomainApp1FileBuilder.getId(), STARTED);\n+        deploymentService.findApplication(dummyDomainApp1FileBuilder.getId()).stop();\n+        assertStatus(dummyDomainApp1FileBuilder.getId(), STOPPED);\n+\n+        deploymentService.stop();\n+        //Copy file to domain folder\n+        addPackedDomainFromBuilder(dummyDomainFileBuilder);\n+        deploymentService.start();\n+\n+        // Application was redeployed but it is not started\n+        assertStatus(dummyDomainApp1FileBuilder.getId(), CREATED);\n+    }\n+\n     @Test\n     public void startedApplicationsAreStartedWhenDomainIsRedeployed() throws Exception\n     {\n@@ -3876,4 +4079,36 @@ private void deployDomainAndApplication(DomainFileBuilder domainFileBuilder,\n         // Application was deployed\n         assertApplicationDeploymentSuccess(applicationDeploymentListener, applicationFileBuilder.getId());\n     }\n+\n+    private Application deployApplication() throws Exception\n+    {\n+        addPackedAppFromBuilder(emptyAppFileBuilder);\n+\n+        deploymentService.start();\n+\n+        assertApplicationDeploymentSuccess(applicationDeploymentListener, emptyAppFileBuilder.getId());\n+        return findApp(emptyAppFileBuilder.getId(), 1);\n+    }\n+\n+    private void restartServer() throws MuleException\n+    {\n+        deploymentService.stop();\n+\n+        reset(applicationDeploymentListener);\n+\n+        deploymentService = new TestMuleDeploymentService(new MulePluginClassLoaderManager());\n+        deploymentService.addDeploymentListener(applicationDeploymentListener);\n+        deploymentService.addDomainDeploymentListener(domainDeploymentListener);\n+        deploymentService.addDeploymentListener(testDeploymentListener);\n+        deploymentService.addDomainDeploymentListener(testDomainDeploymentListener);\n+        deploymentService.start();\n+    }\n+\n+    private Application assertAppDeploymentAndStatus(ApplicationFileBuilder applicationFileBuilder, ApplicationStatus status)\n+    {\n+        assertDeploymentSuccess(applicationDeploymentListener, applicationFileBuilder.getId());\n+        final Application app = findApp(applicationFileBuilder.getId(), 1);\n+        assertStatus(app, status);\n+        return app;\n+    }\n }"
  }
]
