[
  {
    "sha": "5a532de78493d0ded2eb0a8c14e37df806cb6750",
    "filename": "src/main/java/org/mule/extension/aggregator/internal/privileged/executor/AbstractAggregatorExecutor.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/privileged/executor/AbstractAggregatorExecutor.java",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/privileged/executor/AbstractAggregatorExecutor.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/main/java/org/mule/extension/aggregator/internal/privileged/executor/AbstractAggregatorExecutor.java?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -200,6 +200,7 @@ public void start() throws MuleException {\n     if (clusterService.isPrimaryPollingInstance()) {\n       if (!started) {\n         startIfNeeded(objectStore);\n+        upgradeAggregatedContentIfNeeded();\n         setRegisteredAsyncAggregationsAsNotScheduled();\n         if (getStorage().isPersistent()) {\n           scheduler = schedulerService.ioScheduler(SchedulerConfig.config().withShutdownTimeout(0, MILLISECONDS));\n@@ -385,4 +386,12 @@ private void executeListener(AggregatorListener listener, List<TypedValue> eleme\n     }\n   }\n \n+  /**\n+   * This method upgrades the sequenced elements to the new data structure for backward compatibility.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  @Deprecated\n+  private void upgradeAggregatedContentIfNeeded() {\n+    executeSynchronized(() -> sharedInfoLocalCopy.upgradeIfNeeded());\n+  }\n }"
  },
  {
    "sha": "00ded20ae6f84c1a72b8446b219604e457769ded",
    "filename": "src/main/java/org/mule/extension/aggregator/internal/storage/content/AggregatedContent.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/content/AggregatedContent.java",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/content/AggregatedContent.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/main/java/org/mule/extension/aggregator/internal/storage/content/AggregatedContent.java?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -59,4 +59,11 @@\n    */\n   public boolean isComplete();\n \n+  /**\n+   * This method upgrades the sequenced elements to the new data structure for backward compatibility.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  @Deprecated\n+  public void upgradeIfNeeded();\n+\n }"
  },
  {
    "sha": "f02fa906c804f4ad980184866d11e50e67092d58",
    "filename": "src/main/java/org/mule/extension/aggregator/internal/storage/content/SimpleAggregatedContent.java",
    "status": "modified",
    "additions": 119,
    "deletions": 18,
    "changes": 137,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/content/SimpleAggregatedContent.java",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/content/SimpleAggregatedContent.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/main/java/org/mule/extension/aggregator/internal/storage/content/SimpleAggregatedContent.java?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -6,15 +6,18 @@\n  */\n package org.mule.extension.aggregator.internal.storage.content;\n \n-import static java.util.Comparator.comparingInt;\n import static java.util.stream.Collectors.toList;\n+\n import org.mule.runtime.api.metadata.TypedValue;\n \n+import java.io.IOException;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n \n /**\n@@ -25,12 +28,21 @@\n public class SimpleAggregatedContent extends AbstractAggregatedContent {\n \n   private static final long serialVersionUID = -229638907750317297L;\n+\n+  @Deprecated\n+  // TODO: fix this AMOD-5. This should be removed in the next major release.\n   private Map<Integer, TypedValue> sequencedElements;\n+\n+  @Deprecated\n+  // TODO: fix this AMOD-5. This should be removed in the next major release.\n   private List<TypedValue> unsequencedElements;\n \n+  private Map<Index, TypedValue> indexedElements;\n+\n   private SimpleAggregatedContent() {\n     this.sequencedElements = new HashMap<>();\n     this.unsequencedElements = new ArrayList<>();\n+    this.indexedElements = new HashMap<>();\n   }\n \n   public SimpleAggregatedContent(int maxSize) {\n@@ -47,44 +59,79 @@ private void updateTimes(Long timeStamp) {\n \n   @Override\n   public void add(TypedValue newContent, Long timeStamp) {\n-    unsequencedElements.add(newContent);\n+    indexedElements.put(lastArrivalIndex(null), newContent);\n     updateTimes(timeStamp);\n   }\n \n   @Override\n   public void add(TypedValue newContent, Long timeStamp, int sequenceNumber) {\n-    sequencedElements.put(sequenceNumber, newContent);\n+    indexedElements.put(lastArrivalIndex(sequenceNumber), newContent);\n     updateTimes(timeStamp);\n   }\n \n   @Override\n   public List<TypedValue> getAggregatedElements() {\n-    List<TypedValue> orderedElements = new ArrayList<>();\n-    if (sequencedElements.size() > 0) {\n-      orderedElements = sequencedElements.entrySet().stream().sorted(comparingInt(Map.Entry::getKey)).map(Map.Entry::getValue)\n-          .collect(toList());\n+    if (indexedElements.isEmpty()) {\n+      return Collections.emptyList();\n     }\n-    orderedElements.addAll(unsequencedElements);\n-    return orderedElements;\n+    return indexedElements.entrySet().stream().sorted((e1, e2) -> e1.getKey().compareTo(e2.getKey()))\n+        .map(Map.Entry::getValue)\n+        .collect(toList());\n   }\n \n-\n   public boolean isComplete() {\n-    return maxSize == sequencedElements.size() + unsequencedElements.size();\n+    return maxSize == indexedElements.size();\n+  }\n+\n+  /**\n+   * This method does a custom deserialization after the default deserialization to initialise the indexed elements\n+   * because if a previous version was recovered this will not be initialized.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n+    in.defaultReadObject();\n+    if (Objects.isNull(indexedElements)) {\n+      indexedElements = new HashMap<>();\n+    }\n   }\n \n-  private static class Index implements Serializable {\n+  /**\n+   * This method upgrades the sequenced elements to the new data structure for backward compatibility.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  @Deprecated\n+  public void upgradeIfNeeded() {\n+    if (!Objects.isNull(sequencedElements) && !sequencedElements.isEmpty()) {\n+      for (Integer key : sequencedElements.keySet()) {\n+        indexedElements.put(lastArrivalIndex(key), sequencedElements.get(key));\n+      }\n+      sequencedElements.clear();\n+    }\n+\n+    if (!Objects.isNull(unsequencedElements) && !unsequencedElements.isEmpty()) {\n+      for (TypedValue element : unsequencedElements) {\n+        indexedElements.put(lastArrivalIndex(null), element);\n+      }\n+      unsequencedElements.clear();\n+    }\n+  }\n+\n+  private Index lastArrivalIndex(Integer key) {\n+    Index index = new Index(0, key);\n+    while (indexedElements.containsKey(index)) {\n+      index.forwardArrival();\n+    }\n+    return index;\n+  }\n+\n+  private static class Index implements Serializable, Comparable {\n \n     private static final long serialVersionUID = -8286760373914606346L;\n     private Integer sequenceNumber = null;\n     private int arrivalIndex = 0;\n \n-    public Index(int arrivalIndex) {\n+    public Index(int arrivalIndex, Integer sequenceNumber) {\n       this.arrivalIndex = arrivalIndex;\n-    }\n-\n-    public Index(int arrivalIndex, int sequenceNumber) {\n-      this(arrivalIndex);\n       this.sequenceNumber = sequenceNumber;\n     }\n \n@@ -95,6 +142,60 @@ public Integer getSequenceNumber() {\n     public int getArrivalIndex() {\n       return arrivalIndex;\n     }\n-  }\n \n+    /**\n+     * Compares this index with the specified index for order. Returns a negative integer, zero, or a positive integer\n+     * as this object is less than, equal to, or greater than the specified index. It is first compared by the sequence\n+     * number and then by the arrival number.\n+     *\n+     * @param o the index to compare to. It cannot be null.\n+     *\n+     * @return a negative integer, zero, or a positive integer as this index is less than, equal to, or greater than the\n+     * specified index.\n+     */\n+    @Override\n+    public int compareTo(Object o) {\n+      if (Objects.isNull(o) || !(o instanceof Index)) {\n+        throw new RuntimeException(\"The specified object is not an instance of Index\");\n+      }\n+      Index otherIndex = (Index) o;\n+      int sequenceComparison = compareSequence(otherIndex);\n+      if (sequenceComparison != 0) {\n+        return sequenceComparison;\n+      }\n+      return Integer.compare(arrivalIndex, otherIndex.getArrivalIndex());\n+    }\n+\n+    public void forwardArrival() {\n+      arrivalIndex++;\n+    }\n+\n+    private int compareSequence(Index otherIndex) {\n+      if (Objects.isNull(sequenceNumber) && Objects.isNull(otherIndex.getSequenceNumber())) {\n+        return 0;\n+      }\n+      if (!Objects.isNull(sequenceNumber) && Objects.isNull(otherIndex.getSequenceNumber())) {\n+        return -1;\n+      }\n+      if (Objects.isNull(sequenceNumber) && !Objects.isNull(otherIndex.getSequenceNumber())) {\n+        return 1;\n+      }\n+      return sequenceNumber.compareTo(otherIndex.getSequenceNumber());\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o)\n+        return true;\n+      if (o == null || getClass() != o.getClass())\n+        return false;\n+      Index index = (Index) o;\n+      return arrivalIndex == index.arrivalIndex && Objects.equals(sequenceNumber, index.sequenceNumber);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(sequenceNumber, arrivalIndex);\n+    }\n+  }\n }"
  },
  {
    "sha": "c9c886c0c5ce0e4634566117751a7e6a9b6fe406",
    "filename": "src/main/java/org/mule/extension/aggregator/internal/storage/info/AggregatorSharedInformation.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/info/AggregatorSharedInformation.java",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/info/AggregatorSharedInformation.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/main/java/org/mule/extension/aggregator/internal/storage/info/AggregatorSharedInformation.java?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -10,4 +10,10 @@\n \n public interface AggregatorSharedInformation extends Serializable {\n \n+  /**\n+   * This method upgrades the sequenced elements to the new data structure for backward compatibility.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  @Deprecated\n+  void upgradeIfNeeded();\n }"
  },
  {
    "sha": "02a84133fdf2bc0102f29c5c6c3aefa49c531149",
    "filename": "src/main/java/org/mule/extension/aggregator/internal/storage/info/GroupAggregatorSharedInformation.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/info/GroupAggregatorSharedInformation.java",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/info/GroupAggregatorSharedInformation.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/main/java/org/mule/extension/aggregator/internal/storage/info/GroupAggregatorSharedInformation.java?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -63,4 +63,12 @@ public void unregisterTimeoutAsyncAggregation(String groupId) {\n   public Map<String, AsyncTask> getRegisteredTimeoutAsyncAggregations() {\n     return registeredTimeouts;\n   }\n+\n+  /**\n+   * This method upgrades the sequenced elements to the new data structure for backward compatibility.\n+   * It is not necessary to do an upgrade for this class.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  @Override\n+  public void upgradeIfNeeded() {}\n }"
  },
  {
    "sha": "938110e42562dcff04b3a7e7809b428f181cbed5",
    "filename": "src/main/java/org/mule/extension/aggregator/internal/storage/info/SimpleAggregatorSharedInformation.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/info/SimpleAggregatorSharedInformation.java",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/main/java/org/mule/extension/aggregator/internal/storage/info/SimpleAggregatorSharedInformation.java",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/main/java/org/mule/extension/aggregator/internal/storage/info/SimpleAggregatorSharedInformation.java?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -10,6 +10,8 @@\n import org.mule.extension.aggregator.internal.storage.content.AggregatedContent;\n import org.mule.extension.aggregator.internal.task.AsyncTask;\n \n+import java.util.Objects;\n+\n \n public class SimpleAggregatorSharedInformation implements AggregatorSharedInformation {\n \n@@ -49,4 +51,16 @@ public String getAggregationId() {\n   public void setAggregationId(String aggregationId) {\n     AggregationId = aggregationId;\n   }\n+\n+  /**\n+   * This method upgrades the sequenced elements to the new data structure for backward compatibility.\n+   * TODO: fix this AMOD-5. This should be removed in the next major release.\n+   */\n+  @Deprecated\n+  @Override\n+  public void upgradeIfNeeded() {\n+    if (!Objects.isNull(this.content)) {\n+      content.upgradeIfNeeded();\n+    }\n+  }\n }"
  },
  {
    "sha": "83952ad67918e6b0a1dad77f621cfc794859185b",
    "filename": "src/test/munit/aggregators-scenarios-test-case.xml",
    "status": "modified",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/mulesoft/mule-aggregators-module/blob/9b06828dc2ef123eada74171667bd844e7a29d2a/src/test/munit/aggregators-scenarios-test-case.xml",
    "raw_url": "https://github.com/mulesoft/mule-aggregators-module/raw/9b06828dc2ef123eada74171667bd844e7a29d2a/src/test/munit/aggregators-scenarios-test-case.xml",
    "contents_url": "https://api.github.com/repos/mulesoft/mule-aggregators-module/contents/src/test/munit/aggregators-scenarios-test-case.xml?ref=9b06828dc2ef123eada74171667bd844e7a29d2a",
    "patch": "@@ -181,6 +181,63 @@\n         <munit-tools:queue/>\n     </flow>\n \n+    <munit:test name=\"testTimeBasedAggregationInsideScatterGather\"\n+                tags=\"Aggregators Extension,Integration Tests\"\n+                description=\"Verify the time based aggregator inside scatther-gather flow\">\n+        <munit:enable-flow-sources>\n+            <munit:enable-flow-source value=\"flightOrdersAggregatorScatterListenerFlow\"/>\n+        </munit:enable-flow-sources>\n+        <munit:execution>\n+            <file:read config-ref=\"fileConfig\" path=\"#['input' ++ p('file.separator') ++ 'flight-orders.json']\"/>\n+\n+            <foreach>\n+                <scatter-gather>\n+                    <route>\n+                        <aggregators:time-based-aggregator period=\"${timeBasedAggregatorTimeout}\" name=\"flightOrdersAggregatorScatter\">\n+                            <aggregators:content><![CDATA[#[%dw 2.0 output application/json --- payload]]]></aggregators:content>\n+                            <aggregators:incremental-aggregation>\n+                                <logger level=\"INFO\" message=\"Flight order aggregated.\"/>\n+                            </aggregators:incremental-aggregation>\n+                        </aggregators:time-based-aggregator>\n+                    </route>\n+                    <route>\n+                        <logger level=\"INFO\" message=\"Flight order aggregated.\"/>\n+                    </route>\n+                </scatter-gather>\n+                <choice>\n+                    <when expression=\"#[(vars.counter mod 2) == 0]\">\n+                        <munit-tools:sleep time=\"${timeBasedAggregatorTimeoutSleep}\" timeUnit=\"SECONDS\"/>\n+                    </when>\n+                </choice>\n+            </foreach>\n+        </munit:execution>\n+        <munit:validation>\n+            <!-- Build the list of the expected flight aggregations to be performed by the app -->\n+            <file:read config-ref=\"fileConfig\" path=\"input/flight-orders.json\"\n+                       target=\"expectedAggregations\"\n+                       targetValue=\"#[%dw 2.0 import * from dw::core::Arrays --- payload divideBy ${aggregatorsSize}]\"/>\n+\n+            <!-- Consume message of processed flight orders -->\n+            <munit-tools:dequeue target=\"actualAggregations\"\n+                                 targetValue=\"#[%dw 2.0 output application/json --- payload orderBy($.date)]\"/>\n+\n+            <munit-tools:assert-that expression=\"#[vars.actualAggregations]\" is=\"#[MunitTools::equalTo(vars.expectedAggregations[0] orderBy($.date))]\"/>\n+\n+            <!-- Consume message of processed flight orders -->\n+            <munit-tools:dequeue target=\"actualAggregations\"\n+                                 targetValue=\"#[%dw 2.0 output application/json --- payload orderBy($.date)]\"/>\n+\n+            <munit-tools:assert-that expression=\"#[vars.actualAggregations]\" is=\"#[MunitTools::equalTo(vars.expectedAggregations[1] orderBy($.date))]\"/>\n+        </munit:validation>\n+    </munit:test>\n+\n+    <flow name=\"flightOrdersAggregatorScatterListenerFlow\">\n+        <aggregators:aggregator-listener aggregatorName=\"flightOrdersAggregatorScatter\"/>\n+\n+        <!-- Send flight orders to message queue -->\n+        <munit-tools:queue/>\n+    </flow>\n+\n     <!--  -->\n     <!-- Migrated from mule-ee-distributions -->\n     <!-- https://github.com/mulesoft/mule-ee-distributions/blob/eebf8f83189a0666bc5e36da849aa4c0c0e41fa1/tests/src/test/java/com/mulesoft/mule/distributions/server/integration/scenarios/AggregatorsScenariosTestCase.java#L267 -->"
  }
]
