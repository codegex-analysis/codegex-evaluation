[
  {
    "sha": "3afd0de97bd32f941e1839d5701eb62f526abc2f",
    "filename": "app/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/build.gradle",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/build.gradle",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/build.gradle?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -31,6 +31,7 @@ dependencies {\n     implementation 'com.google.android.material:material:1.2.1'\n     implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'\n     implementation 'androidx.work:work-runtime:2.3.4'\n+    implementation 'com.jcraft:jsch:0.1.55'\n     testImplementation 'junit:junit:4.12'\n     androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'"
  },
  {
    "sha": "78f1ff59a77b6b94ff391c3586aba4557743de23",
    "filename": "app/src/main/java/nl/nfi/cellscanner/AppUpgradeReceiver.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/AppUpgradeReceiver.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/AppUpgradeReceiver.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/AppUpgradeReceiver.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -23,9 +23,9 @@ public void onReceive(Context context, Intent intent) {\n           Call the start of the application if the boot-up state of the application\n           is inRecordingState\n          */\n-        if (RecorderUtils.inRecordingState(context)){\n-            if (PermissionSupport.hasAccessCourseLocationPermission(context)) RecorderUtils.startService(context);\n-            else RecorderUtils.setRecordingState(context, false);\n-        }\n+        if (RecorderUtils.isRecordingEnabled(context))\n+            RecorderUtils.startService(context);\n+\n+        UserDataUploadWorker.applyUploadPolicy(context);\n     }\n }"
  },
  {
    "sha": "5405114f91d19a4cab24d8643635bf3bf1d936e5",
    "filename": "app/src/main/java/nl/nfi/cellscanner/BootDeviceReceiver.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/BootDeviceReceiver.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/BootDeviceReceiver.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/BootDeviceReceiver.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -31,9 +31,9 @@ public void onReceive(Context context, Intent intent) {\n           Call the start of the application if the boot-up state of the application\n           is inRecordingState\n          */\n-        if (RecorderUtils.inRecordingState(context)){\n-            if (PermissionSupport.hasAccessCourseLocationPermission(context)) RecorderUtils.startService(context);\n-            else RecorderUtils.setRecordingState(context, false);\n-        }\n+        if (RecorderUtils.isRecordingEnabled(context))\n+            RecorderUtils.startService(context);\n+\n+        UserDataUploadWorker.applyUploadPolicy(context);\n     }\n }"
  },
  {
    "sha": "0f4737d68deb4a29aa99ef1129954c0c8c256ea9",
    "filename": "app/src/main/java/nl/nfi/cellscanner/Database.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/Database.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/Database.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/Database.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -11,6 +11,8 @@\n import android.util.Log;\n \n import java.io.File;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n@@ -182,6 +184,13 @@ public void storeInstallID(Context ctx) {\n         setMetaEntry(META_INSTALL_ID, install_id);\n     }\n \n+    public void storeMessage(Throwable e) {\n+        StringWriter msg = new StringWriter();\n+        PrintWriter writer = new PrintWriter(msg);\n+        e.printStackTrace(writer);\n+        storeMessage(msg.toString());\n+    }\n+\n     public void storeMessage(String msg) {\n         // message should not exceed maximum length\n         if (msg.length() > 250)"
  },
  {
    "sha": "de8e3b1cc4b3e23623651577781d6f6a073c5c32",
    "filename": "app/src/main/java/nl/nfi/cellscanner/PreferencesActivity.java",
    "status": "modified",
    "additions": 92,
    "deletions": 93,
    "changes": 185,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/PreferencesActivity.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/PreferencesActivity.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/PreferencesActivity.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -1,7 +1,5 @@\n package nl.nfi.cellscanner;\n \n-import android.Manifest;\n-import android.app.Activity;\n import android.app.AlertDialog;\n import android.content.Context;\n import android.content.DialogInterface;\n@@ -10,53 +8,46 @@\n import android.content.pm.PackageManager;\n import android.net.Uri;\n import android.os.Bundle;\n-import android.util.Log;\n import android.view.View;\n import android.widget.Toast;\n \n import androidx.appcompat.app.AppCompatActivity;\n-import androidx.core.app.ActivityCompat;\n import androidx.core.content.FileProvider;\n+import androidx.preference.EditTextPreference;\n import androidx.preference.Preference;\n import androidx.preference.PreferenceFragmentCompat;\n import androidx.preference.PreferenceManager;\n import androidx.preference.SwitchPreferenceCompat;\n-import androidx.work.Constraints;\n-import androidx.work.ExistingPeriodicWorkPolicy;\n-import androidx.work.NetworkType;\n-import androidx.work.OneTimeWorkRequest;\n-import androidx.work.PeriodicWorkRequest;\n-import androidx.work.WorkManager;\n-import androidx.work.WorkRequest;\n \n-import org.jetbrains.annotations.NotNull;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n \n import java.util.UUID;\n-import java.util.concurrent.TimeUnit;\n \n import nl.nfi.cellscanner.recorder.RecorderUtils;\n \n import static nl.nfi.cellscanner.Database.getFileTitle;\n-import static nl.nfi.cellscanner.recorder.PermissionSupport.hasAccessCourseLocationPermission;\n-import static nl.nfi.cellscanner.recorder.PermissionSupport.hasFineLocationPermission;\n-import static nl.nfi.cellscanner.recorder.RecorderUtils.exportMeteredAllowed;\n \n public class PreferencesActivity\n         extends AppCompatActivity\n         implements SharedPreferences.OnSharedPreferenceChangeListener {\n \n-    private static final int PERMISSION_REQUEST_START_RECORDING = 1;\n-\n-    private static final String PREF_INSTALL_ID = \"INSTALL_ID\";\n+    // recording preferences\n     public final static String PREF_ENABLE = \"APP_RECORDING\";  // APP should be recording data\n     public final static String PREF_GPS_RECORDING = \"GPS_RECORDING\";  // APP should record GPS data when in Recording state\n     public final static String PREF_GPS_HIGH_PRECISION_RECORDING = \"GPS_HIGH_ACCURACY\";  // APP should record GPS data when in Recording state\n \n+    // data management preferences\n     private static final String PREF_VIEW_MEASUREMENTS = \"VIEW_MEASUREMENTS\";\n     private static final String PREF_SHARE_DATA = \"SHARE_DATA\";\n+    private static final String PREF_START_UPLOAD = \"START_UPLOAD\";\n     public static final String PREF_AUTO_UPLOAD = \"AUTO_UPLOAD\";\n+    private static final String PREF_UPLOAD_URL = \"UPLOAD_URL\";\n     public static final String PREF_UPLOAD_ON_WIFI_ONLY = \"UPLOAD_ON_WIFI_ONLY\";\n \n+    // general preferences\n+    private static final String PREF_INSTALL_ID = \"INSTALL_ID\";\n+\n     private PreferenceFragment prefs;\n \n     private SwitchPreferenceCompat swRecordingMaster;\n@@ -99,8 +90,9 @@ public PreferenceFragment(PreferencesActivity a) {\n \n         private void setupSharing() {\n             Preference view_measurements_button = findPreference(PREF_VIEW_MEASUREMENTS);\n-            Preference share_data_button = findPreference(PREF_SHARE_DATA);\n+            Preference start_upload_button = findPreference(PREF_START_UPLOAD);\n             final SwitchPreferenceCompat upload_switch = findPreference(PREF_AUTO_UPLOAD);\n+            final EditTextPreference upload_server = findPreference(PREF_UPLOAD_URL);\n             final SwitchPreferenceCompat wifi_switch = findPreference(PREF_UPLOAD_ON_WIFI_ONLY);\n \n             view_measurements_button.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\n@@ -112,10 +104,10 @@ public boolean onPreferenceClick(Preference preference) {\n                 }\n             });\n \n-            share_data_button.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\n+            start_upload_button.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\n                 @Override\n                 public boolean onPreferenceClick(Preference preference) {\n-                    preferencesActivity.exportData();\n+                    UserDataUploadWorker.startDataUpload(preferencesActivity);\n                     return true;\n                 }\n             });\n@@ -125,29 +117,68 @@ public boolean onPreferenceClick(Preference preference) {\n             wifi_switch.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n                 @Override\n                 public boolean onPreferenceChange(Preference preference, Object newValue) {\n-                    if (RecorderUtils.autoDataUploadWanted(getContext())) {\n-                        // there is need for auto data upload\n-                        preferencesActivity.unSchedulePeriodDataUpload();\n-                        preferencesActivity.schedulePeriodicDataUpload();\n-                    }\n+                    UserDataUploadWorker.applyUploadPolicy(getContext(), upload_switch.isChecked(), (boolean)newValue);\n                     return true;\n                 }\n             });\n \n             upload_switch.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){\n                 @Override\n                 public boolean onPreferenceChange(Preference preference, Object newValue) {\n-                    // toggle the scheduled upload of data\n-                    if ((boolean)newValue) {\n-                        preferencesActivity.schedulePeriodicDataUpload();\n-                    } else {\n-                        preferencesActivity.unSchedulePeriodDataUpload();\n-                    }\n+                    boolean upload_enabled = (boolean) newValue;\n+                    if (upload_enabled && upload_server.getText().equals(\"\"))\n+                        return false;\n \n-                    wifi_switch.setEnabled((boolean)newValue);\n+                    wifi_switch.setEnabled(upload_enabled);\n+                    UserDataUploadWorker.applyUploadPolicy(preferencesActivity, (boolean)newValue, wifi_switch.isChecked());\n                     return true;\n                 }\n             });\n+\n+            upload_server.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n+                @Override\n+                public boolean onPreferenceChange(Preference preference, Object newValue) {\n+                    if (newValue.equals(upload_server.getText())) {\n+                        // no change\n+                        return true;\n+                    } else if (newValue.equals(\"\")) {\n+                        // field cleared\n+                        if (upload_switch.isChecked())\n+                            upload_switch.setChecked(false);\n+                        Toast.makeText(preferencesActivity, \"Upload server removed\", Toast.LENGTH_LONG).show();\n+                        return true;\n+                    } else {\n+                        // field set with new value\n+                        try {\n+                            URI url = new URI((String)newValue);\n+                            if (url.getScheme() == null) {\n+                                Toast.makeText(preferencesActivity, \"Protocol missing; try a valid URL such as sftp://user@hostname\", Toast.LENGTH_LONG).show();\n+                                return false;\n+                            }\n+                            else if (url.getHost() == null) {\n+                                Toast.makeText(preferencesActivity, \"Host missing; try a valid URL such as sftp://user@hostname\", Toast.LENGTH_LONG).show();\n+                                return false;\n+                            }\n+                            else if (url.getPath() != null && !url.getPath().equals(\"\")) {\n+                                Toast.makeText(preferencesActivity, \"Upload path not supported; try a URL without a path\", Toast.LENGTH_LONG).show();\n+                                return false;\n+                            }\n+                            else if (UserDataUploadWorker.getSupportedProtocols().contains(url.getScheme())) {\n+                                Toast.makeText(preferencesActivity, \"Server updated\", Toast.LENGTH_LONG).show();\n+                                return true;\n+                            } else {\n+                                Toast.makeText(preferencesActivity, \"Unsupported protocol: \" + url.getScheme(), Toast.LENGTH_LONG).show();\n+                                return false;\n+                            }\n+                        } catch (URISyntaxException e) {\n+                            Toast.makeText(preferencesActivity, \"Invalid input; try a valid URL such as sftp://user@hostname\", Toast.LENGTH_LONG).show();\n+                            return false;\n+                        }\n+                    }\n+                }\n+            });\n+\n+            wifi_switch.setEnabled(upload_switch.isChecked());\n         }\n \n         @Override\n@@ -180,22 +211,26 @@ private void setupRecording() {\n             public boolean onPreferenceChange(Preference preference, Object newValue) {\n                 boolean recording_enabled = (boolean)newValue;\n \n+                // update button states\n+                swGPSRecord.setEnabled(!recording_enabled);\n+                swGPSPrecision.setEnabled(!recording_enabled && swGPSRecord.isChecked());\n+\n+                // apply new settings\n                 if (recording_enabled)\n-                    requestStartRecording();\n+                    RecorderUtils.requestStartRecording(PreferencesActivity.this);\n                 else\n                     RecorderUtils.stopService(PreferencesActivity.this);\n \n-                swGPSRecord.setEnabled(!recording_enabled);\n-                swGPSPrecision.setEnabled(!recording_enabled && swGPSRecord.isChecked());\n-\n                 return true;\n             }\n         });\n \n         swGPSRecord.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){\n             @Override\n             public boolean onPreferenceChange(Preference preference, Object newValue) {\n+                // update button state\n                 swGPSPrecision.setEnabled((boolean)newValue);\n+\n                 return true;\n             }\n         });\n@@ -234,6 +269,10 @@ protected void onStart() {\n     protected void onResume() {\n         super.onResume();\n         AppInfoActivity.showIfNoConsent(this);\n+\n+        // resume foreground service if necessary\n+        if (RecorderUtils.isRecordingEnabled(this))\n+            RecorderUtils.requestStartRecording(this);\n     }\n \n     @Override\n@@ -247,14 +286,14 @@ protected void onDestroy() {\n      * Set the buttons on the screen to recording state, or not recording state\n      */\n     private void updateButtonStateToRecordingState() {\n-        boolean isInRecordingState = RecorderUtils.inRecordingState(this);\n+        boolean isInRecordingState = RecorderUtils.isRecordingEnabled(this);\n         swRecordingMaster.setChecked(isInRecordingState);\n \n         swGPSRecord.setEnabled(!isInRecordingState);\n-        swGPSRecord.setChecked(RecorderUtils.gpsRecordingState(this));\n+        swGPSRecord.setChecked(RecorderUtils.isLocationRecordingEnabled(this));\n \n         swGPSPrecision.setEnabled(!isInRecordingState && swGPSRecord.isChecked());\n-        swGPSPrecision.setChecked(RecorderUtils.gpsHighPrecisionRecordingState(this));\n+        swGPSPrecision.setChecked(RecorderUtils.isHighPrecisionRecordingEnabled(this));\n     }\n \n     @Override\n@@ -269,11 +308,11 @@ public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, Strin\n     @Override\n     public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n         switch (requestCode) {\n-            case PERMISSION_REQUEST_START_RECORDING: {\n+            case RecorderUtils.PERMISSION_REQUEST_START_RECORDING: {\n                 if (permissions.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n-                    requestStartRecording();\n+                    RecorderUtils.requestStartRecording(this);\n                 } else {\n-                    RecorderUtils.setRecordingState(this, false);\n+                    swRecordingMaster.setChecked(false);\n \n                     // explain the app will not be working\n                     Toast.makeText(this, \"App will not work without location permissions\", Toast.LENGTH_SHORT).show();\n@@ -282,28 +321,6 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in\n         }\n     }\n \n-    /**\n-     * Request the start of recording user data\n-     * <p>\n-     * test for the right permissions, if ok, start recording. Otherwise request permissions\n-     */\n-    public void requestStartRecording() {\n-        if (!hasAccessCourseLocationPermission(this))\n-            requestLocationPermission(this);\n-        else if (RecorderUtils.gpsRecordingState(this) && !hasFineLocationPermission(this))\n-            requestLocationPermission(this);\n-        else\n-            RecorderUtils.startService(this);\n-    }\n-\n-    /**\n-     * Request permission to the end user for Location usage. Please be aware that this request is\n-     * done on a separate thread\n-     */\n-    private static void requestLocationPermission(Activity ctx) {\n-        ActivityCompat.requestPermissions(ctx, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_START_RECORDING);\n-    }\n-\n     /**\n      * Export data via email\n      */\n@@ -352,36 +369,18 @@ public void onClick(DialogInterface dialog, int which) {\n                 .setNegativeButton(\"No\", dialogClickListener).show();\n     }\n \n-\n-    @NotNull\n-    private Constraints getWorkManagerConstraints() {\n-        NetworkType networkType = exportMeteredAllowed(this) ? NetworkType.UNMETERED : NetworkType.CONNECTED;\n-        return new Constraints.Builder()\n-                .setRequiredNetworkType(networkType)\n-                .build();\n+    public static boolean getAutoUploadEnabled(Context context) {\n+        return android.preference.PreferenceManager.getDefaultSharedPreferences(context)\n+                .getBoolean(PreferencesActivity.PREF_AUTO_UPLOAD, false);\n     }\n \n-    /**\n-     * Schedules a Periodic Upload of the data\n-     */\n-    private void schedulePeriodicDataUpload() {\n-        Constraints constraints = getWorkManagerConstraints();\n-\n-        PeriodicWorkRequest uploadWorkRequest = new PeriodicWorkRequest\n-                .Builder(UserDataUploadWorker.class, 15, TimeUnit.MINUTES) // TODO: Make this a useful setting\n-                .addTag(UserDataUploadWorker.TAG)\n-                .setConstraints(constraints)\n-                .build();\n-\n-        WorkManager\n-                .getInstance(getApplicationContext())\n-                .enqueueUniquePeriodicWork(UserDataUploadWorker.TAG, ExistingPeriodicWorkPolicy.REPLACE, uploadWorkRequest);\n+    public static String getUploadURL(Context context) {\n+        return android.preference.PreferenceManager.getDefaultSharedPreferences(context)\n+                .getString(PreferencesActivity.PREF_UPLOAD_URL, null);\n     }\n \n-    public void unSchedulePeriodDataUpload() {\n-        WorkManager\n-                .getInstance(getApplicationContext())\n-                .cancelAllWorkByTag(UserDataUploadWorker.TAG);\n+    public static boolean getUnmeteredUploadOnly(Context context) {\n+        return android.preference.PreferenceManager.getDefaultSharedPreferences(context)\n+                .getBoolean(PreferencesActivity.PREF_UPLOAD_ON_WIFI_ONLY, true);\n     }\n-\n }"
  },
  {
    "sha": "3f326364c679ade5cf10bf17e0a4f2a1654d9507",
    "filename": "app/src/main/java/nl/nfi/cellscanner/UserDataUploadWorker.java",
    "status": "modified",
    "additions": 217,
    "deletions": 61,
    "changes": 278,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/UserDataUploadWorker.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/UserDataUploadWorker.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/UserDataUploadWorker.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -1,106 +1,262 @@\n package nl.nfi.cellscanner;\n \n-import android.annotation.SuppressLint;\n+import android.app.Activity;\n+import android.app.NotificationChannel;\n+import android.app.NotificationManager;\n+import android.app.PendingIntent;\n import android.content.Context;\n+import android.content.Intent;\n+import android.os.Build;\n import android.util.Log;\n+import android.widget.Toast;\n \n import androidx.annotation.NonNull;\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+import androidx.work.Constraints;\n+import androidx.work.NetworkType;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.PeriodicWorkRequest;\n+import androidx.work.WorkManager;\n+import androidx.work.WorkRequest;\n import androidx.work.Worker;\n import androidx.work.WorkerParameters;\n \n+import com.jcraft.jsch.ChannelSftp;\n+import com.jcraft.jsch.JSch;\n+import com.jcraft.jsch.JSchException;\n+import com.jcraft.jsch.Session;\n+import com.jcraft.jsch.SftpException;\n+\n import org.apache.commons.net.ftp.FTP;\n import org.apache.commons.net.ftp.FTPClient;\n+import org.jetbrains.annotations.NotNull;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n+import nl.nfi.cellscanner.recorder.RecorderUtils;\n import static nl.nfi.cellscanner.CellScannerApp.getDatabase;\n import static nl.nfi.cellscanner.PreferencesActivity.getInstallID;\n \n public class UserDataUploadWorker extends Worker {\n-    public static final String TAG = UserDataUploadWorker.class.getSimpleName();\n-\n-    private static final String HOSTNAME = \"192.168.2.29\";\n-    private static final String USERNAME = \"myuser\";\n-    private static final String MYPASS = \"mypass\";\n-\n+    private static final String ERROR_CHANNEL_ID = \"cellscanner_upload_notification\";\n \n     public UserDataUploadWorker(\n             @NonNull Context context,\n             @NonNull WorkerParameters params) {\n         super(context, params);\n     }\n \n+    private static void createNotificationChannel(Context ctx) {\n+        // Create the NotificationChannel, but only on API 26+ because\n+        // the NotificationChannel class is new and not in the support library\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            NotificationChannel channel = new NotificationChannel(ERROR_CHANNEL_ID, \"error notification channel\", NotificationManager.IMPORTANCE_DEFAULT);\n+            NotificationManagerCompat.from(ctx).createNotificationChannel(channel);\n+        }\n+    }\n \n-    @NonNull\n-    @Override\n-    public Result doWork() {\n+    private static void notifyError(Context ctx, String title, String message) {\n+        createNotificationChannel(ctx);\n+\n+        Intent intent = new Intent(ctx, PreferencesActivity.class);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        PendingIntent pendingIntent = PendingIntent.getActivity(ctx, 0, intent, 0);\n+\n+        NotificationCompat.Builder builder = new NotificationCompat.Builder(ctx, ERROR_CHANNEL_ID)\n+                .setSmallIcon(R.drawable.ic_symbol24)\n+                .setContentTitle(title)\n+                .setContentText(message)\n+                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n+                .setContentIntent(pendingIntent);\n+\n+        // notificationId is a unique int for each notification that you must define\n+        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(ctx);\n+        notificationManager.notify(0, builder.build());\n+    }\n+\n+    private static void uploadFtp(Context ctx, InputStream source, String dest_filename, String host, String user, String password) throws IOException {\n         FileInputStream fileInputStream;\n         FTPClient con = new FTPClient();\n \n-        long timestamp  = getTimeStamp();\n-\n-        try\n+        con.connect(host);\n+        if (con.login(user, password))\n         {\n-            Database db = getDatabase();\n-\n-            con.connect(HOSTNAME);\n-            if (con.login(USERNAME, MYPASS))\n-            {\n-                con.enterLocalPassiveMode(); // important!\n-                con.setFileType(FTP.BINARY_FILE_TYPE);\n-\n-                // get the file and send it.\n-                fileInputStream = new FileInputStream(Database.getDataFile(getApplicationContext()));\n-\n-                String serverSideFileName = getFileName(\n-                        getInstallID(getApplicationContext()),\n-                        timestamp\n-                );\n-\n-                // Upload the file\n-                boolean result = con.storeFile(serverSideFileName, fileInputStream);\n-                fileInputStream.close();\n-\n-                if (result) {\n-                    // SIGNAL our success\n-                    Log.i(TAG, \"upload result: succeeded\");\n-                    ExportResultRepository.storeExportResult(getApplicationContext(), timestamp, true, \"success\", ExportResultRepository.AUTO);\n-                    db.dropDataUntil(timestamp);\n-\n-                } else {\n-                    // SIGNAL their failure\n-                    Log.i(TAG, \"upload result: Failed\");\n-                    ExportResultRepository.storeExportResult(getApplicationContext(), timestamp, false, \"upload failed\", ExportResultRepository.AUTO);\n-\n-                }\n-\n-                // disconnect from the server\n-                con.logout();\n-                con.disconnect();\n+            con.enterLocalPassiveMode(); // important!\n+            con.setFileType(FTP.BINARY_FILE_TYPE);\n+\n+            // get the file and send it. A\n+            boolean result = con.storeFile(dest_filename, source);\n+            source.close();\n+\n+            if (result) {\n+                Log.e(\"cellscanner\", \"upload result: succeeded\");\n+\n+                /*when file has been uploaded, the old data can be flushed*/\n+\n+            } else {\n+                Log.e(\"cellscanner\", \"upload result: Failed\");\n             }\n+\n+            // disconnect from the server\n+            con.logout();\n+            con.disconnect();\n         }\n-        catch (Exception e)\n-        {\n-            e.printStackTrace();\n-            ExportResultRepository.storeExportResult(getApplicationContext(), timestamp, false, e.getMessage(), ExportResultRepository.AUTO);\n+    }\n+\n+    private static void uploadSftp(Context ctx, InputStream source, String dest_filename, String host, int port, String user, String password) throws JSchException, SftpException, IOException {\n+        JSch jsch = new JSch();\n+        jsch.setKnownHosts(new ByteArrayInputStream(ctx.getResources().getText(R.string.ssh_known_hosts).toString().getBytes()));\n+        Session session = jsch.getSession(user, host, port == -1 ? 22 : port);\n+        if (password != null)\n+            session.setPassword(password);\n+        session.connect();\n+        try {\n+            ChannelSftp channel = (ChannelSftp) session.openChannel(\"sftp\");\n+            channel.connect();\n+            channel.put(source, dest_filename);\n+            channel.disconnect();\n+        } finally {\n+            session.disconnect();\n+        }\n+    }\n+\n+    private static void upload(Context ctx, String url_spec) throws URISyntaxException, IOException, SftpException, JSchException {\n+        URI uri = new URI(url_spec);\n+        String userinfo = uri.getUserInfo();\n+        String username = null, password = null;\n+        if (userinfo != null) {\n+            int sep = userinfo.indexOf(':');\n+            if (sep == -1) {\n+                username = userinfo;\n+                password = null;\n+            } else {\n+                username = userinfo.substring(0, sep);\n+                password = userinfo.substring(sep + 1);\n+            }\n+        }\n+\n+        long timestamp = new Date().getTime() / 1000L;\n+        String dest_filename = String.format(\"%s-%d.sqlite3.gz\", PreferencesActivity.getInstallID(ctx), timestamp);\n+\n+        File dbfile = Utils.createTempFile(ctx);\n+        try {\n+            Utils.copyFileGzipped(Database.getDataFile(ctx), dbfile);\n+            InputStream source = new FileInputStream(dbfile);\n+            try {\n+                if (uri.getScheme() == \"ftp\")\n+                    uploadFtp(ctx, source, dest_filename, uri.getHost(), username, password);\n+                else\n+                    uploadSftp(ctx, source, dest_filename, uri.getHost(), uri.getPort(), username, password);\n+            } finally {\n+                source.close();\n+            }\n+        } finally {\n+            dbfile.delete();\n+        }\n+    }\n+\n+    public static Set<String> getSupportedProtocols() {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"ftp\");\n+        set.add(\"sftp\");\n+        return set;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Result doWork() {\n+        Log.i(\"cellscanner\", \"Start upload of data file\");\n+\n+        long timestamp = new Date().getTime();\n+        Context ctx = getApplicationContext();\n+        try {\n+            // stop recording\n+            RecorderUtils.stopService(ctx);\n \n+            // upload data\n+            upload(getApplicationContext(), PreferencesActivity.getUploadURL(getApplicationContext()));\n+\n+            // clear database\n+            ExportResultRepository.storeExportResult(getApplicationContext(), timestamp, true, \"success\", getTags().iterator().next());\n+            CellScannerApp.getDatabase().dropDataUntil(timestamp);\n+\n+            return Result.success();\n+        } catch (Exception e) {\n+            notifyError(getApplicationContext(), \"Cellscanner upload error\", e.getMessage());\n+            ExportResultRepository.storeExportResult(getApplicationContext(), timestamp, false, e.getMessage(), getTags().iterator().next());\n+            return Result.retry();\n+        } finally {\n+            // resume recording\n+            if (RecorderUtils.isRecordingEnabled(ctx))\n+                RecorderUtils.startService(ctx);\n         }\n+    }\n \n-        return Result.success();\n+    private static void scheduleWorkRequest(Context ctx, WorkRequest workRequest) {\n+        unSchedulePeriodDataUpload(ctx);\n+        WorkManager\n+                .getInstance(ctx)\n+                .enqueue(workRequest);\n     }\n \n+    public static void applyUploadPolicy(Context ctx, boolean do_periodic_upload, boolean unmetered_only) {\n+        unSchedulePeriodDataUpload(ctx);\n+        if (do_periodic_upload)\n+            schedulePeriodicDataUpload(ctx, unmetered_only);\n+    }\n+\n+    public static void applyUploadPolicy(Context ctx) {\n+        applyUploadPolicy(ctx, PreferencesActivity.getAutoUploadEnabled(ctx), PreferencesActivity.getUnmeteredUploadOnly(ctx));\n+    }\n+\n+    @NotNull\n+    private static Constraints getWorkManagerConstraints(Context ctx, boolean unmetered_only) {\n+        NetworkType networkType = unmetered_only ? NetworkType.UNMETERED : NetworkType.CONNECTED;\n+        return new Constraints.Builder()\n+                .setRequiredNetworkType(networkType)\n+                .build();\n+    }\n+\n+    public static void startDataUpload(final Activity ctx) {\n+        OneTimeWorkRequest uploadWorkRequest = new OneTimeWorkRequest\n+                .Builder(UserDataUploadWorker.class)\n+                .addTag(ExportResultRepository.MANUAL)\n+                .build();\n+\n+        Toast.makeText(ctx, \"Uploading data\", Toast.LENGTH_LONG).show();\n+        scheduleWorkRequest(ctx, uploadWorkRequest);\n+    }\n \n     /**\n-     * Method returns how many milliseconds have passed since January 1, 1970, 00:00:00 GMT\n-     * @return UTC timestamp\n+     * Schedules a Periodic Upload of the data\n      */\n-    private long getTimeStamp() {\n-        return new Date().getTime();\n+    private static void schedulePeriodicDataUpload(Context ctx, boolean unmetered_only) {\n+        Constraints constraints = getWorkManagerConstraints(ctx, unmetered_only);\n+\n+        PeriodicWorkRequest uploadWorkRequest = new PeriodicWorkRequest\n+                .Builder(UserDataUploadWorker.class, 15, TimeUnit.MINUTES) // TODO: Make this a useful setting\n+                .addTag(ExportResultRepository.AUTO)\n+                .setConstraints(constraints)\n+                .build();\n+\n+        scheduleWorkRequest(ctx, uploadWorkRequest);\n     }\n \n-    @SuppressLint(\"DefaultLocale\")\n-    private String getFileName(String aDeviceId, long aTimeStamp) {\n-        return String.format(\"%s-%d.sqlite\", aDeviceId, aTimeStamp / 1000L);\n+    private static void unSchedulePeriodDataUpload(Context ctx) {\n+        WorkManager\n+                .getInstance(ctx)\n+                .cancelAllWorkByTag(ExportResultRepository.AUTO);\n     }\n }"
  },
  {
    "sha": "4ca186163fbfb25c3679417ae6e3096a237a7a5c",
    "filename": "app/src/main/java/nl/nfi/cellscanner/Utils.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/Utils.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/Utils.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/Utils.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -0,0 +1,41 @@\n+package nl.nfi.cellscanner;\n+\n+import android.content.Context;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class Utils {\n+    public static void copyStream(InputStream in, OutputStream out) throws IOException {\n+        // Transfer bytes from in to out\n+        byte[] buf = new byte[1024];\n+        int len;\n+        while ((len = in.read(buf)) > 0) {\n+            out.write(buf, 0, len);\n+        }\n+    }\n+\n+    public static void copyFileGzipped(File in, File out) throws IOException {\n+        InputStream is = new FileInputStream(in);\n+        try {\n+            OutputStream os = new GZIPOutputStream(new FileOutputStream(out));\n+            try {\n+                copyStream(is, os);\n+            } finally {\n+                os.close();\n+            }\n+        } finally {\n+            is.close();\n+        }\n+    }\n+\n+    public static File createTempFile(Context context) throws IOException {\n+        File outputDir = context.getCacheDir(); // context being the Activity pointer\n+        return File.createTempFile(\"temp-db-\", null, outputDir);\n+    }\n+}"
  },
  {
    "sha": "4b8407581357edad3a832ed4c22a5f0e14280731",
    "filename": "app/src/main/java/nl/nfi/cellscanner/ViewMeasurementsActivity.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/ViewMeasurementsActivity.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/ViewMeasurementsActivity.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/ViewMeasurementsActivity.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -4,8 +4,8 @@\n import android.content.Context;\n import android.content.Intent;\n import android.content.IntentFilter;\n-import android.content.SharedPreferences;\n import android.os.Bundle;\n+import android.content.SharedPreferences;\n import android.util.Log;\n import android.widget.TextView;\n \n@@ -147,7 +147,6 @@ public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, Strin\n          */\n         Log.i(\"WORK\", key);\n         setAutoUploadData();\n-\n     }\n }\n "
  },
  {
    "sha": "105710f452635dde25ecaf0588c3f63e56be0655",
    "filename": "app/src/main/java/nl/nfi/cellscanner/recorder/LocationRecordingService.java",
    "status": "modified",
    "additions": 38,
    "deletions": 32,
    "changes": 70,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/recorder/LocationRecordingService.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/recorder/LocationRecordingService.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/recorder/LocationRecordingService.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -1,5 +1,6 @@\n package nl.nfi.cellscanner.recorder;\n \n+import android.Manifest;\n import android.annotation.SuppressLint;\n import android.app.Notification;\n import android.app.NotificationChannel;\n@@ -8,6 +9,7 @@\n import android.app.Service;\n import android.content.Context;\n import android.content.Intent;\n+import android.content.pm.PackageManager;\n import android.location.Location;\n import android.os.Build;\n import android.os.IBinder;\n@@ -16,6 +18,7 @@\n import android.telephony.TelephonyManager;\n \n import androidx.annotation.Nullable;\n+import androidx.core.app.ActivityCompat;\n import androidx.core.app.NotificationCompat;\n import androidx.localbroadcastmanager.content.LocalBroadcastManager;\n \n@@ -27,6 +30,8 @@\n \n import org.jetbrains.annotations.NotNull;\n \n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n@@ -47,7 +52,7 @@\n     private static final String TAG = LocationRecordingService.class.getSimpleName();\n \n \n-    public static final String LOCATION_DATA_UPDATE_BROADCAST= \"LOCATION_DATA_UPDATE_MESSAGE\";\n+    public static final String LOCATION_DATA_UPDATE_BROADCAST = \"LOCATION_DATA_UPDATE_MESSAGE\";\n \n     private static final String CHANNEL_ID = \"CELL_SCANNER_MAIN_COMMUNICATION_CHANNEL\";\n \n@@ -85,11 +90,15 @@ public void onCreate() {\n             initialize a callback function that listens for location updates\n             made by the (GPS) location manager\n          */\n-        locationCallback  = new LocationCallback(){\n+        locationCallback = new LocationCallback() {\n             @Override\n             public void onLocationResult(LocationResult locationResult) {\n                 super.onLocationResult(locationResult);\n-                processLocationUpdate(locationResult.getLastLocation());\n+                try {\n+                    processLocationUpdate(locationResult.getLastLocation());\n+                } catch (Throwable e) {\n+                    CellScannerApp.getDatabase().storeMessage(e);\n+                }\n             }\n         };\n \n@@ -100,14 +109,13 @@ public void onLocationResult(LocationResult locationResult) {\n      * @param ctx: Context of the running service\n      */\n     private void toggleGPSRecording(Context ctx) {\n-        if (RecorderUtils.gpsRecordingState(ctx)) startGPSLocationUpdates();\n+        if (RecorderUtils.isLocationRecordingEnabled(ctx)) startGPSLocationUpdates();\n         else stopGPSLocationUpdates();\n     }\n \n \n     @Override\n     public int onStartCommand(Intent intent, int flags, int startId) {\n-        // TODO: this service should probably start sticky and allow for multiple calls to onStartCommand\n         startForeground(NOTIF_ID, getActivityNotification(\"started\"));\n \n         // start the times, schedule for every second\n@@ -116,13 +124,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             public void run() {\n                 preformCellInfoRetrievalRequest();\n             }\n-        }, 0, CellScannerApp.UPDATE_DELAY_MILLIS);\n-\n+        }, CellScannerApp.UPDATE_DELAY_MILLIS, CellScannerApp.UPDATE_DELAY_MILLIS);\n \n         // Check if the application should start recording GPS\n         toggleGPSRecording(getApplicationContext());\n \n-        return START_NOT_STICKY;\n+        return START_STICKY;\n     }\n \n     @Override\n@@ -176,7 +183,7 @@ private void createNotificationChannel() {\n \n \n     private static int recordingPriorityValue(Context context) {\n-        return RecorderUtils.gpsHighPrecisionRecordingState(context) ? LocationRequest.PRIORITY_HIGH_ACCURACY : LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY;\n+        return RecorderUtils.isHighPrecisionRecordingEnabled(context) ? LocationRequest.PRIORITY_HIGH_ACCURACY : LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY;\n     }\n \n     /**\n@@ -196,42 +203,37 @@ private LocationRequest createLocationRequest() {\n \n     /**\n      * starts the capture of GPS location updates.\n-     *\n-     * Method does not need permission checks, these are done in the methods that set the flags\n-     * to start and stop recording\n-     *\n-     * TODO: What if the permission is revoked by the end user?\n      */\n     @SuppressLint(\"MissingPermission\")\n     private void startGPSLocationUpdates() {\n         // start the request for location updates\n-        fusedLocationProviderClient.requestLocationUpdates(\n-                createLocationRequest(),\n-                locationCallback,\n-                null\n-        );\n+        if (PermissionSupport.hasFineLocationPermission(getApplicationContext())) {\n+            fusedLocationProviderClient.requestLocationUpdates(\n+                    createLocationRequest(),\n+                    locationCallback,\n+                    null\n+            );\n+        }\n     }\n \n     private void stopGPSLocationUpdates() {\n         // stop the active request for location updates\n         fusedLocationProviderClient.removeLocationUpdates(locationCallback);\n     }\n \n-\n-    @SuppressLint(\"MissingPermission\") // permission check is moved to another part of the app\n+    @SuppressLint(\"MissingPermission\")\n     private List<CellInfo> getCellInfo() {\n         /*\n           - This code should not run if the permissions are not there\n           - Code should check and ask for permissions when the 'start recording switch' in the main activity\n             is switched to start running when the permissions are not there\n          */\n-        if (PermissionSupport.hasAccessCourseLocationPermission(getApplicationContext())) {\n+        if (PermissionSupport.hasCourseLocationPermission(getApplicationContext())) {\n             return telephonyManager.getAllCellInfo();\n         } else {\n-            // TODO: Shutdown this service ...???\n             /*\n             Can only get in this situation when the location permission is revoked\n-            Should spawn a notification and kill this is service\n+            TODO: spawn a notification\n              */\n             return new ArrayList<>();\n         }\n@@ -259,7 +261,7 @@ private void stopGPSLocationUpdates() {\n                     cells.add(status.toString());\n                 }\n             } catch (CellStatus.UnsupportedTypeException e) {\n-                mDB.storeMessage(e.getMessage());\n+                mDB.storeMessage(e);\n             }\n         }\n \n@@ -274,13 +276,17 @@ private void stopGPSLocationUpdates() {\n      * - send broadcast to update App\n      */\n     private void preformCellInfoRetrievalRequest() {\n-        List<CellInfo> cellinfo = getCellInfo();\n-        String[] cellstr = storeCellInfo(cellinfo);\n-        notificationManager.notify(\n-                NOTIF_ID,\n-                getActivityNotification(String.format(\"%d cells registered (%d visible)\", cellstr.length, cellinfo.size()))\n-        );\n-        sendBroadcastMessage();\n+        try {\n+            List<CellInfo> cellinfo = getCellInfo();\n+            String[] cellstr = storeCellInfo(cellinfo);\n+            notificationManager.notify(\n+                    NOTIF_ID,\n+                    getActivityNotification(String.format(\"%d cells registered (%d visible)\", cellstr.length, cellinfo.size()))\n+            );\n+            sendBroadcastMessage();\n+        } catch (Throwable e) {\n+            CellScannerApp.getDatabase().storeMessage(e);\n+        }\n     }\n \n     /**"
  },
  {
    "sha": "9e5e24df6308218c80b360865ed93b1ed7c71aee",
    "filename": "app/src/main/java/nl/nfi/cellscanner/recorder/PermissionSupport.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/recorder/PermissionSupport.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/recorder/PermissionSupport.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/recorder/PermissionSupport.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -15,12 +15,12 @@\n public class PermissionSupport {\n     final private static String PREFS_NAME = CellScannerApp.TITLE;\n \n-    public static boolean hasAccessCourseLocationPermission(Context ctx) {\n+    public static boolean hasCourseLocationPermission(Context ctx) {\n         return hasPermission(ctx, Manifest.permission.ACCESS_COARSE_LOCATION);\n     }\n \n     public static boolean hasFineLocationPermission(Context ctx) {\n-        return hasPermission(ctx, Manifest.permission.ACCESS_FINE_LOCATION);\n+        return hasPermission(ctx, Manifest.permission.ACCESS_COARSE_LOCATION) && hasPermission(ctx, Manifest.permission.ACCESS_FINE_LOCATION);\n     }\n \n     private static boolean hasPermission(Context ctx, String permission) {"
  },
  {
    "sha": "e7c9a7868e6a809a1abe50273651fca231ffcddf",
    "filename": "app/src/main/java/nl/nfi/cellscanner/recorder/RecorderUtils.java",
    "status": "modified",
    "additions": 37,
    "deletions": 22,
    "changes": 59,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/recorder/RecorderUtils.java",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/java/nl/nfi/cellscanner/recorder/RecorderUtils.java",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/java/nl/nfi/cellscanner/recorder/RecorderUtils.java?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -1,15 +1,21 @@\n package nl.nfi.cellscanner.recorder;\n \n+import android.Manifest;\n+import android.app.Activity;\n import android.content.Context;\n import android.content.Intent;\n import android.content.SharedPreferences;\n import android.os.Build;\n import android.preference.PreferenceManager;\n \n+import androidx.core.app.ActivityCompat;\n import androidx.core.content.ContextCompat;\n \n import nl.nfi.cellscanner.PreferencesActivity;\n \n+import static nl.nfi.cellscanner.recorder.PermissionSupport.hasCourseLocationPermission;\n+import static nl.nfi.cellscanner.recorder.PermissionSupport.hasFineLocationPermission;\n+\n \n /**\n  * Responsible for controlling the Reordering service\n@@ -18,11 +24,36 @@\n  * stop the service\n  */\n public class RecorderUtils {\n+    public static final int PERMISSION_REQUEST_START_RECORDING = 1;\n+\n+    /**\n+     * Request the start of recording user data\n+     * <p>\n+     * test for the right permissions, if ok, start recording. Otherwise request permissions\n+     */\n+    public static void requestStartRecording(Activity ctx) {\n+        if (!hasCourseLocationPermission(ctx))\n+            requestLocationPermission(ctx);\n+        else if (isLocationRecordingEnabled(ctx) && !hasFineLocationPermission(ctx))\n+            requestLocationPermission(ctx);\n+        else\n+            RecorderUtils.startService(ctx);\n+    }\n+\n+    /**\n+     * Request permission to the end user for Location usage. Please be aware that this request is\n+     * done on a separate thread\n+     */\n+    private static void requestLocationPermission(Activity ctx) {\n+        ActivityCompat.requestPermissions(ctx, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_START_RECORDING);\n+    }\n+\n+\n     /**\n      * Check the state of the Recording key.\n      * @return State of the Recording key, when True the app should record cell data\n      */\n-    public static boolean inRecordingState(Context context) {\n+    public static boolean isRecordingEnabled(Context context) {\n         return PreferenceManager.getDefaultSharedPreferences(context)\n                 .getBoolean(PreferencesActivity.PREF_ENABLE, false);\n     }\n@@ -32,7 +63,7 @@ public static boolean inRecordingState(Context context) {\n      * @return State of the GPS Recording key, when True the app should record GPS data when\n      *      the recording state is True\n      */\n-    public static boolean gpsRecordingState(Context context) {\n+    public static boolean isLocationRecordingEnabled(Context context) {\n         return PreferenceManager.getDefaultSharedPreferences(context)\n                 .getBoolean(PreferencesActivity.PREF_GPS_RECORDING, true);\n     }\n@@ -42,7 +73,7 @@ public static boolean gpsRecordingState(Context context) {\n      * @return State of the GPS Recording key, when True the app should record GPS data with HIGH precision when\n      *      the recording state is True\n      */\n-    public static boolean gpsHighPrecisionRecordingState(Context context) {\n+    public static boolean isHighPrecisionRecordingEnabled(Context context) {\n         return PreferenceManager.getDefaultSharedPreferences(context)\n                 .getBoolean(PreferencesActivity.PREF_GPS_HIGH_PRECISION_RECORDING, false);\n     }\n@@ -51,16 +82,15 @@ public static boolean gpsHighPrecisionRecordingState(Context context) {\n      * Set Recording to State value\n      * When True, the app should record data\n      * */\n-    public static void setRecordingState(Context context, Boolean state) { putBoolean(context, PreferencesActivity.PREF_ENABLE, state); };\n+    private static void setRecordingEnabled(Context context, Boolean state) { putBoolean(context, PreferencesActivity.PREF_ENABLE, state); };\n \n     /**\n      * Set GPS recording to State value\n      * GPS Recording, when True, store GPS location when the app is recording cells\n      * */\n-    public static void setGPSRecordingState(Context context, Boolean state) { putBoolean(context, PreferencesActivity.PREF_GPS_RECORDING, state); };\n-\n-    public static void setGPSHighPrecisionRecordingState(Context context, Boolean state) { putBoolean(context, PreferencesActivity.PREF_GPS_HIGH_PRECISION_RECORDING, state); };\n+    private static void setGPSRecordingState(Context context, Boolean state) { putBoolean(context, PreferencesActivity.PREF_GPS_RECORDING, state); };\n \n+    private static void setGPSHighPrecisionRecordingState(Context context, Boolean state) { putBoolean(context, PreferencesActivity.PREF_GPS_HIGH_PRECISION_RECORDING, state); };\n \n     /**\n      * Sets a boolean key to a given state in local storage\n@@ -76,17 +106,6 @@ private static void putBoolean(Context context, String target, Boolean state ) {\n         editor.apply();\n     }\n \n-    public static boolean exportMeteredAllowed(Context context) {\n-        return PreferenceManager.getDefaultSharedPreferences(context)\n-                .getBoolean(PreferencesActivity.PREF_UPLOAD_ON_WIFI_ONLY, false);\n-    }\n-\n-    public static boolean autoDataUploadWanted(Context context) {\n-        return PreferenceManager.getDefaultSharedPreferences(context)\n-                .getBoolean(PreferencesActivity.PREF_AUTO_UPLOAD, false);\n-    }\n-\n-\n     /**\n      * Starts the recording service\n      *\n@@ -100,8 +119,6 @@ public static void startService(Context context) {\n         } else {\n             context.startService(new Intent(context, LocationRecordingService.class));\n         }\n-        // TODO: toggling the state might be set to the onStart of the service. Android might stop it\n-        setRecordingState(context, true);\n     }\n \n     /**\n@@ -111,7 +128,5 @@ public static void startService(Context context) {\n     public static void stopService(Context context) {\n         Intent serviceIntent = new Intent(context, LocationRecordingService.class);\n         context.stopService(serviceIntent);\n-        // TODO: toggling the state might be set to the onDestroy of the service. Android might stop it\n-        setRecordingState(context, false);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1988f34f1d4b3afc7ff1d31a494aef0bb9d73ce3",
    "filename": "app/src/main/res/values/strings.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/res/values/strings.xml",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/res/values/strings.xml",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/res/values/strings.xml?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -68,4 +68,10 @@ When rebooting your device, the app will continue in the state that you left it\n     <string name=\"terms_and_conditions_accept\">I understand and accept the terms and conditions as listed above</string>\n     <string name=\"terms_and_conditions_close\">Close</string>\n     <string name=\"valueBaseText\">searching</string>\n+    <string name=\"ssh_known_hosts\">\n+        <![CDATA[\n+|1|e92Mxgy4C4EBLmOZfpJelgy03Kk=|TGGhvbfbB7z8rZljRUG8FyxqjVk= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC1ELi87xHOh8no304t9t6XW4PGlMa8+q/opqF+YtjOWDyznKxtfdohOpP7Fg7jJ98OtBPYaDnqNdHqidqGRR7cZqAa3GImYry50+hEHvFaPo00OswhckOsYtA2N+W7iWUtK5DlgQHlQsbVGidYtk+TT2crMqnj9CcNgXY2tKhhM7K99FnSxPmr6hgw2l1DyeNQG8+RvRziOMOl2tYibzcnfLIH46mn1VIEks8PbZ3xrn+gzHsm9YhGqZUgBIeAwELizI4cuhn0FxABm1YWMfH74B3opWfvZGTm+5FXDt6A4y6l7ZvwQl2qS0GmVsp/3qDDy5/RIjcAhKdFAOd+FqcihDHGYYwufFgc5LVfxdcdFMzKeESxBz1/1zoKptPsT+LzzjNI1y9lSnzpll8U2AM3omejrl5aIMoa5yCG73hgmz2TXN2/NsSi9vyrthTYyqTzQM6wLMRtsLFzQ9jBtVpmMTjE6OPHhIuDrLK1LrsTVSF00XJVLXLF36JV5AGTl4U=\n+|1|u7dqlh9ixMlfgNEmFcL9mEDOiUo=|L5cNlzNaLJlFKjqlnTWtGstDEko= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC1ELi87xHOh8no304t9t6XW4PGlMa8+q/opqF+YtjOWDyznKxtfdohOpP7Fg7jJ98OtBPYaDnqNdHqidqGRR7cZqAa3GImYry50+hEHvFaPo00OswhckOsYtA2N+W7iWUtK5DlgQHlQsbVGidYtk+TT2crMqnj9CcNgXY2tKhhM7K99FnSxPmr6hgw2l1DyeNQG8+RvRziOMOl2tYibzcnfLIH46mn1VIEks8PbZ3xrn+gzHsm9YhGqZUgBIeAwELizI4cuhn0FxABm1YWMfH74B3opWfvZGTm+5FXDt6A4y6l7ZvwQl2qS0GmVsp/3qDDy5/RIjcAhKdFAOd+FqcihDHGYYwufFgc5LVfxdcdFMzKeESxBz1/1zoKptPsT+LzzjNI1y9lSnzpll8U2AM3omejrl5aIMoa5yCG73hgmz2TXN2/NsSi9vyrthTYyqTzQM6wLMRtsLFzQ9jBtVpmMTjE6OPHhIuDrLK1LrsTVSF00XJVLXLF36JV5AGTl4U=\n+        ]]>\n+    </string>\n </resources>"
  },
  {
    "sha": "b99c518ea6ec1d0b368e443eb54d8d241226b97a",
    "filename": "app/src/main/res/xml/preferences.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/blob/4353c535332780c57277688648be3aaf75d07a64/app/src/main/res/xml/preferences.xml",
    "raw_url": "https://github.com/NetherlandsForensicInstitute/cellscanner/raw/4353c535332780c57277688648be3aaf75d07a64/app/src/main/res/xml/preferences.xml",
    "contents_url": "https://api.github.com/repos/NetherlandsForensicInstitute/cellscanner/contents/app/src/main/res/xml/preferences.xml?ref=4353c535332780c57277688648be3aaf75d07a64",
    "patch": "@@ -34,22 +34,28 @@\n             app:summary=\"View currently recorded data\"/>\n \n         <Preference\n-            app:key=\"SHARE_DATA\"\n-            app:title=\"Export database\"\n-            app:summary=\"Export locally stored data as an sqlite file\"/>\n+            app:key=\"START_UPLOAD\"\n+            app:title=\"Perform upload\"\n+            app:summary=\"Upload data to the upload server\"/>\n \n         <SwitchPreferenceCompat\n             app:key=\"AUTO_UPLOAD\"\n             app:title=\"Periodic upload\"\n-            app:summary=\"Automatically upload encrypted data to NFI\"\n+            app:summary=\"Automatically upload data to the upload server\"\n             app:defaultValue=\"true\"/>\n \n         <SwitchPreferenceCompat\n             app:key=\"UPLOAD_ON_WIFI_ONLY\"\n             app:title=\"Wifi upload only\"\n-            app:summary=\"Upload when connected to wifi only\"\n+            app:summary=\"Upload automatically when connected to wifi only\"\n             app:defaultValue=\"true\"/>\n \n+        <EditTextPreference\n+            app:key=\"UPLOAD_URL\"\n+            app:title=\"Upload server\"\n+            app:summary=\"URL to send data (ftp or sftp)\"\n+            app:defaultValue=\"sftp://upload@cellscanner-upload.foreach.eu:6192\"/>\n+\n     </PreferenceCategory>\n \n     <PreferenceCategory"
  }
]
