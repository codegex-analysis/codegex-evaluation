[
  {
    "sha": "7f480569c31bc36ee76be50b676c0f844b86a254",
    "filename": "add-location.http",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/add-location.http",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/add-location.http",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/add-location.http?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,10 @@\n+POST http://localhost:8080/location\n+Content-Type: application/json\n+\n+{\n+  \"city\": \"Gdynia\",\n+  \"region\": \" \",\n+  \"country\": \"Polska\",\n+  \"latitude\": 54.0,\n+  \"longitude\": 18.0\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2bba1c6bb48f6518086aeb84b2780db9c068a344",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/pom.xml",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/pom.xml",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/pom.xml?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -17,6 +17,10 @@\n         <java.version>11</java.version>\n     </properties>\n     <dependencies>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-data-jpa</artifactId>"
  },
  {
    "sha": "ae0c8573e5e6e452da8dda4971830db0ee35be10",
    "filename": "src/main/java/com/mkgn/weatherservice/WeatherServiceApplication.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/WeatherServiceApplication.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/WeatherServiceApplication.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/WeatherServiceApplication.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -9,5 +9,4 @@\n     public static void main(String[] args) {\n         SpringApplication.run(WeatherServiceApplication.class, args);\n     }\n-\n }"
  },
  {
    "sha": "f9349d4d7c730eb5629849e73d6481daac0a0233",
    "filename": "src/main/java/com/mkgn/weatherservice/exceptions/CardinalsOutOfRangeException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/exceptions/CardinalsOutOfRangeException.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/exceptions/CardinalsOutOfRangeException.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/exceptions/CardinalsOutOfRangeException.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,7 @@\n+package com.mkgn.weatherservice.exceptions;\n+\n+public class CardinalsOutOfRangeException extends RuntimeException {\n+    public CardinalsOutOfRangeException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "a8e7b1e08722c9eb0fbb8e451468059e0c4f0f93",
    "filename": "src/main/java/com/mkgn/weatherservice/exceptions/EmptyInputException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/exceptions/EmptyInputException.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/exceptions/EmptyInputException.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/exceptions/EmptyInputException.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,7 @@\n+package com.mkgn.weatherservice.exceptions;\n+\n+public class EmptyInputException extends RuntimeException {\n+    public EmptyInputException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "3094ea39c698f0b486f32fda89a533479486b976",
    "filename": "src/main/java/com/mkgn/weatherservice/exceptions/ExceptionHandlerController.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/exceptions/ExceptionHandlerController.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/exceptions/ExceptionHandlerController.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/exceptions/ExceptionHandlerController.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,24 @@\n+package com.mkgn.weatherservice.exceptions;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ControllerAdvice\n+@Slf4j\n+public class ExceptionHandlerController {\n+\n+    @ExceptionHandler(EmptyInputException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public void handleBadRequestException(EmptyInputException e) {\n+        log.warn(e.getMessage());\n+    }\n+\n+    @ExceptionHandler(CardinalsOutOfRangeException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public void handleCardinalsOutOfRangeException(CardinalsOutOfRangeException e) {\n+        log.warn(e.getMessage());\n+    }\n+}"
  },
  {
    "sha": "3a4196598a25ff8fe36e9431f83c5ffbb121c8b3",
    "filename": "src/main/java/com/mkgn/weatherservice/location/CreateLocationRequest.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/CreateLocationRequest.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/CreateLocationRequest.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/CreateLocationRequest.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,19 @@\n+package com.mkgn.weatherservice.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Builder\n+class CreateLocationRequest {\n+\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "be06ebdacc0f6e6155ac367da6db6e051509008c",
    "filename": "src/main/java/com/mkgn/weatherservice/location/Location.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/Location.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/Location.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/Location.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,27 @@\n+package com.mkgn.weatherservice.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Builder\n+class Location {\n+\n+    @Id\n+    @GeneratedValue(generator = \"UUID\")\n+    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n+    private String id;\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "0593cc5d5e1b183304a8a77749f3f611e32c021b",
    "filename": "src/main/java/com/mkgn/weatherservice/location/LocationController.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationController.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationController.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/LocationController.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,31 @@\n+package com.mkgn.weatherservice.location;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequiredArgsConstructor\n+class LocationController {\n+    private final LocationService locationService;\n+    private final LocationMapper locationMapper;\n+\n+    @PostMapping(\"/location\")\n+    ResponseEntity<NewLocationResponse> postLocation(@RequestBody CreateLocationRequest request) {\n+        String city = request.getCity();\n+        String region = request.getRegion();\n+        String country = request.getCountry();\n+        Double latitude = request.getLatitude();\n+        Double longitude = request.getLongitude();\n+\n+        Location location = locationService.createLocation(city, region, country, latitude, longitude);\n+\n+        NewLocationResponse responseBody = locationMapper.mapLocationToNewLocationResponse(location);\n+\n+        return ResponseEntity.status(201).body(responseBody);\n+    }\n+\n+}"
  },
  {
    "sha": "dcaa571ed823dfeb486408b93a0e5e68bb2d9e89",
    "filename": "src/main/java/com/mkgn/weatherservice/location/LocationMapper.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationMapper.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationMapper.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/LocationMapper.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,18 @@\n+package com.mkgn.weatherservice.location;\n+\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class LocationMapper {\n+\n+    NewLocationResponse mapLocationToNewLocationResponse(Location location) {\n+        return NewLocationResponse.builder().\n+                id(location.getId())\n+                .city(location.getCity())\n+                .region(location.getRegion())\n+                .country(location.getCountry())\n+                .latitude(location.getLatitude())\n+                .longitude(location.getLongitude())\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "e414fd88206dd11482e74c152ef46da8fa46f247",
    "filename": "src/main/java/com/mkgn/weatherservice/location/LocationRepository.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationRepository.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationRepository.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/LocationRepository.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,6 @@\n+package com.mkgn.weatherservice.location;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public interface LocationRepository extends JpaRepository<Location, Long> {\n+}"
  },
  {
    "sha": "a47ae11f5252bf89131d6ca925153a9312b8047e",
    "filename": "src/main/java/com/mkgn/weatherservice/location/LocationService.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationService.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/LocationService.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/LocationService.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,72 @@\n+package com.mkgn.weatherservice.location;\n+\n+import com.mkgn.weatherservice.exceptions.CardinalsOutOfRangeException;\n+import com.mkgn.weatherservice.exceptions.EmptyInputException;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@RequiredArgsConstructor\n+class LocationService {\n+\n+    private final double NORTH_LIMIT = 90.0;\n+    private final double SOUTH_LIMIT = -90.0;\n+    private final double EAST_LIMIT = 180.0;\n+    private final double WEST_LIMIT = -180.0;\n+\n+    private final LocationRepository locationRepository;\n+\n+    Location createLocation(String city, String region, String country, Double latitude, Double longitude) {\n+\n+        validateCity(city);\n+        validateCountry(country);\n+        validateLatitude(latitude);\n+        validateLongitude(longitude);\n+\n+        if (StringUtils.isBlank(region)) {\n+            region = null;\n+        }\n+\n+        Location location = new Location();\n+        location.setCity(city);\n+        location.setRegion(region);\n+        location.setCountry(country);\n+        location.setLatitude(latitude);\n+        location.setLongitude(longitude);\n+        return locationRepository.save(location);\n+    }\n+\n+    private void validateCity(String city) {\n+        if (StringUtils.isBlank(city)) {\n+            throw new EmptyInputException(\"City cannot be empty or null\");\n+        }\n+    }\n+\n+    private void validateCountry(String country) {\n+        if (StringUtils.isBlank(country)) {\n+            throw new EmptyInputException(\"City cannot be empty or null\");\n+        }\n+    }\n+\n+    private void validateLatitude(Double latitude) {\n+        if (latitude < SOUTH_LIMIT || latitude > NORTH_LIMIT) {\n+            if (latitude > NORTH_LIMIT) {\n+                throw new CardinalsOutOfRangeException(\"cardinals out of range! latitude to high\");\n+            } else {\n+                throw new CardinalsOutOfRangeException(\"cardinals out of range! latitude to low\");\n+            }\n+        }\n+    }\n+\n+    private void validateLongitude(Double longitude) {\n+\n+        if (longitude > EAST_LIMIT || longitude < WEST_LIMIT) {\n+            if (longitude > EAST_LIMIT) {\n+                throw new CardinalsOutOfRangeException(\"cardinals out of range! longitude to high\");\n+            } else {\n+                throw new CardinalsOutOfRangeException(\"cardinals out of range! longitude to low\");\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "804b5cbdd3dc8b3bdd4ec35d3908b3429ea5745c",
    "filename": "src/main/java/com/mkgn/weatherservice/location/NewLocationResponse.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/NewLocationResponse.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/java/com/mkgn/weatherservice/location/NewLocationResponse.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/java/com/mkgn/weatherservice/location/NewLocationResponse.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,19 @@\n+package com.mkgn.weatherservice.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Builder\n+class NewLocationResponse {\n+    private String id;\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "4e47a72b9e5576b545e94d44d70f385ca354fe43",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/resources/application.properties",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/main/resources/application.properties?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -1 +1,5 @@\n+spring.datasource.url=jdbc:mysql://localhost:3306/weather_service?serverTimezone=Europe/Warsaw\n+spring.datasource.username=root\n+spring.datasource.password=root\n+spring.jpa.hibernate.ddl-auto=update\n "
  },
  {
    "sha": "462d047cf14a269183420d070cbee40ac4f0e3c6",
    "filename": "src/test/java/com/mkgn/weatherservice/location/LocationServiceIntegrationTest.java",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/test/java/com/mkgn/weatherservice/location/LocationServiceIntegrationTest.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/test/java/com/mkgn/weatherservice/location/LocationServiceIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/test/java/com/mkgn/weatherservice/location/LocationServiceIntegrationTest.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,136 @@\n+package com.mkgn.weatherservice.location;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+class LocationServiceIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @Autowired\n+    LocationRepository locationRepository;\n+\n+    @Test\n+    void createLocation_createsNewLocation() throws Exception {\n+        //given\n+        locationRepository.deleteAll();\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        CreateLocationRequest requestBody = CreateLocationRequest.builder()\n+                .city(\"city\")\n+                .country(\"country\")\n+                .region(\"region\")\n+                .latitude(54.0)\n+                .longitude(18.0)\n+                .build();\n+\n+        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.post(\"/location\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(objectMapper.writeValueAsString(requestBody));\n+\n+        //when\n+        MockHttpServletResponse response = mockMvc.perform(request).andReturn().getResponse();\n+\n+        //then\n+        assertThat(response.getStatus()).isEqualTo(201);\n+        assertThat(locationRepository.findAll()).singleElement().satisfies(entry -> {\n+            assertThat(entry.getCity()).isEqualTo(\"city\");\n+            assertThat(entry.getCountry()).isEqualTo(\"country\");\n+            assertThat(entry.getRegion()).isEqualTo(\"region\");\n+            assertThat(entry.getLatitude()).isEqualTo(54.0);\n+            assertThat(entry.getLongitude()).isEqualTo(18.0);\n+        });\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsEmpty_returns400StatusCode() throws Exception {\n+        // given\n+        locationRepository.deleteAll();\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        CreateLocationRequest requestBody = CreateLocationRequest.builder()\n+                .city(\"\")\n+                .country(\"country\")\n+                .region(\"region\")\n+                .latitude(54.0)\n+                .longitude(18.0)\n+                .build();\n+\n+        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.post(\"/location\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(objectMapper.writeValueAsString(requestBody));\n+\n+        // when\n+        MockHttpServletResponse response = mockMvc.perform(request).andReturn().getResponse();\n+\n+        // then\n+        assertThat(response.getStatus()).isEqualTo(400);\n+        assertThat(locationRepository.findAll()).isEmpty();\n+    }\n+\n+    @Test\n+    void createLocation_whenRegionIsEmpty_returns201StatusCode() throws Exception {\n+        // given\n+        locationRepository.deleteAll();\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        CreateLocationRequest requestBody = CreateLocationRequest.builder()\n+                .city(\"city\")\n+                .country(\"country\")\n+                .region(\" \")\n+                .latitude(54.0)\n+                .longitude(18.0)\n+                .build();\n+\n+        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.post(\"/location\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(objectMapper.writeValueAsString(requestBody));\n+\n+        // when\n+        MockHttpServletResponse response = mockMvc.perform(request).andReturn().getResponse();\n+\n+        // then\n+        assertThat(response.getStatus()).isEqualTo(201);\n+        assertThat(locationRepository.findAll()).isNotNull();\n+        assertThat(locationRepository.findAll()).singleElement().satisfies(entry -> {\n+            assertThat(entry.getRegion()).isNull();\n+        });\n+    }\n+\n+    @Test\n+    void createLocation_whenRegionIsEmpty_returnsNewLocationWithNullRegion() throws Exception {\n+        // given\n+        locationRepository.deleteAll();\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        CreateLocationRequest requestBody = CreateLocationRequest.builder()\n+                .city(\"city\")\n+                .country(\"country\")\n+                .region(\"        \")\n+                .latitude(54.0)\n+                .longitude(18.0)\n+                .build();\n+\n+        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.post(\"/location\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(objectMapper.writeValueAsString(requestBody));\n+\n+        // when\n+        MockHttpServletResponse response = mockMvc.perform(request).andReturn().getResponse();\n+\n+        // then\n+        assertThat(response.getStatus()).isEqualTo(201);\n+        assertThat(locationRepository.findAll()).singleElement().satisfies(entry -> {\n+            assertThat(entry.getRegion()).isNull();\n+        });\n+    }\n+}"
  },
  {
    "sha": "5daae4593067059405d5226bea0dd4bdbb9e1418",
    "filename": "src/test/java/com/mkgn/weatherservice/location/LocationServiceTest.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/MichalKulygin/weather-service/blob/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/test/java/com/mkgn/weatherservice/location/LocationServiceTest.java",
    "raw_url": "https://github.com/MichalKulygin/weather-service/raw/72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a/src/test/java/com/mkgn/weatherservice/location/LocationServiceTest.java",
    "contents_url": "https://api.github.com/repos/MichalKulygin/weather-service/contents/src/test/java/com/mkgn/weatherservice/location/LocationServiceTest.java?ref=72a8ea9e693bd75e1df7ade4c9c6b0bddb76227a",
    "patch": "@@ -0,0 +1,128 @@\n+package com.mkgn.weatherservice.location;\n+\n+\n+import com.mkgn.weatherservice.exceptions.CardinalsOutOfRangeException;\n+import com.mkgn.weatherservice.exceptions.EmptyInputException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class LocationServiceTest {\n+\n+    @Mock\n+    LocationRepository locationRepository;\n+    @InjectMocks\n+    LocationService locationService;\n+\n+    @Test\n+    void createLocation_createsNewLocation() {\n+        //given\n+        Location locationGdynia = Location.builder()\n+                .city(\"Gdynia\")\n+                .region(\"pomorskie\")\n+                .country(\"Poland\")\n+                .latitude(54.0)\n+                .longitude(18.5)\n+                .build();\n+        when(locationRepository.save(any())).thenReturn(locationGdynia);\n+\n+        //when\n+        Location location = locationService.createLocation(\"city\", \"region\", \"Poland\", 54.0, 18.5);\n+\n+        //then\n+        assertThat(location.getCity()).isEqualTo(\"Gdynia\");\n+        assertThat(location.getRegion()).isEqualTo(\"pomorskie\");\n+        assertThat(location.getCountry()).isEqualTo(\"Poland\");\n+        assertThat(location.getLatitude()).isEqualTo(54.0);\n+        assertThat(location.getLongitude()).isEqualTo(18.5);\n+        verify(locationRepository).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsEmpty_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\" \", \"pomorskie\", \"Poland\", 54.0, 18.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsNull_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(null, \"pomorskie\", \"Poland\", 54.0, 18.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCountyIsEmpty_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Tczew\", \"pomorskie\", \" \", 54.0, 18.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCountyIsNull_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Tczew\", \"pomorskie\", null, 54.0, 18.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLatitudeIsLowerThenLimit_throwsCardinalOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"city\", \"region\", \"country\", -91.0, 18.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(CardinalsOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLatitudeIsHigherThenLimit_throwsCardinalOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"city\", \"region\", \"country\", 91.0, 18.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(CardinalsOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLongitudeIsLowerThenLimit_throwsCardinalOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"city\", \"region\", \"country\", 54.0, -181.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(CardinalsOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLongitudeIsHigherThenLimit_throwsCardinalOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"city\", \"region\", \"country\", 54.0, 181.0));\n+\n+        // then\n+        assertThat(exception).isInstanceOf(CardinalsOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+}\n\\ No newline at end of file"
  }
]
