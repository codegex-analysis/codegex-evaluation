[
  {
    "sha": "5828c2ff0196fb6e32e4d612e1513dd1ace1a46c",
    "filename": "GamesmanJava-new/src/Tier/TierReader.java",
    "status": "modified",
    "additions": 64,
    "deletions": 21,
    "changes": 85,
    "blob_url": "https://github.com/GamesCrafters/GamesmanJava/blob/849d91d85da7292c7aaa62b8c5d383bb2cb1a0e0/GamesmanJava-new/src/Tier/TierReader.java",
    "raw_url": "https://github.com/GamesCrafters/GamesmanJava/raw/849d91d85da7292c7aaa62b8c5d383bb2cb1a0e0/GamesmanJava-new/src/Tier/TierReader.java",
    "contents_url": "https://api.github.com/repos/GamesCrafters/GamesmanJava/contents/GamesmanJava-new/src/Tier/TierReader.java?ref=849d91d85da7292c7aaa62b8c5d383bb2cb1a0e0",
    "patch": "@@ -10,6 +10,7 @@\n import java.io.File;\n import java.io.RandomAccessFile;\n import java.util.Arrays;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Scanner;\n \n@@ -82,7 +83,6 @@ public static void main (String[] args) {\n     }\n \n     private void play () {\n-        Scanner scanner = new Scanner(System.in);\n         Piece[] board = new Piece[w*h];\n         Arrays.fill(board, Piece.EMPTY);\n         Connect4 game = new Connect4(w, h, win);\n@@ -99,32 +99,75 @@ private void play () {\n             }\n             System.out.print(\"Move: \");\n             int move;\n-            while (true) {\n-                try  {\n-                    move = Integer.parseInt(scanner.next());\n-                    if (board[(h * move) - 1] != Piece.EMPTY) {\n-                        System.out.println(\"Cannot add to full column\");\n-                    } else {\n-                        break;\n-                    }\n-                } catch (NumberFormatException ignored) {\n-                    System.out.println(\"Invalid move\");\n-                    System.out.print(\"Move: \");\n-                }\n+            if (nextp == Piece.BLUE || !this.comp) {\n+                move = makePersonMove(board);\n+            } else {\n+                move = makeComputerMove(board, game, nextp, tier);\n+            }\n+            board = game.doMove(board, move, nextp);\n+            nextp = nextp.opposite();\n+            tier += 1;\n+        }\n \n+    }\n+\n+    private int makeComputerMove(Piece[] board, Connect4 game, Piece nextp, int tier) {\n+        Primitive bestResult = Primitive.WIN;\n+        int number = 0;\n+        int bestMove = 0;\n+        List<Integer> l = game.generateMoves(board);\n+        for (Integer move : l) {\n+            Piece[] newBoard = game.doMove(board, move, nextp);\n+            Tuple<Primitive, Integer> value = getValue(newBoard, tier + 1);\n+            boolean update = false;\n+            if (bestResult == Primitive.WIN) {\n+                if (value.x == Primitive.LOSS || value.x == Primitive.TIE || (value.x == Primitive.WIN && number < value.y)) {\n+                    update = true;\n+                }\n+            } else if (bestResult == Primitive.LOSS) {\n+                if (value.x == Primitive.LOSS && number > value.y) {\n+                    update = true;\n+                }\n+            } else if (bestResult == Primitive.TIE) {\n+                if (value.x == Primitive.LOSS) {\n+                    update = true;\n+                }\n+            } else {\n+                System.out.println(\"Primitive not found\");\n             }\n-            int actual_move = (h * (move - 1));\n-            for (int i = (h * move) - 1; i != (h * (move - 1)) - 1; i --) {\n-                if (board[i] != Piece.EMPTY) {\n-                    actual_move = i + 1;\n+            if(update){\n+                bestResult = value.x;\n+                number = value.y;\n+                bestMove = move;\n+            }\n+        }\n+        return bestMove;\n+    }\n+\n+    private int makePersonMove(Piece[] board) {\n+        Scanner scanner = new Scanner(System.in);\n+        int move;\n+        while (true) {\n+            try  {\n+                move = Integer.parseInt(scanner.next());\n+                if (board[(h * move) - 1] != Piece.EMPTY) {\n+                    System.out.println(\"Cannot add to full column\");\n+                } else {\n                     break;\n                 }\n+            } catch (NumberFormatException ignored) {\n+                System.out.println(\"Invalid move\");\n+                System.out.print(\"Move: \");\n             }\n-            board = game.doMove(board, actual_move, nextp);\n-            nextp = nextp.opposite();\n-            tier += 1;\n         }\n-\n+        int actual_move = (h * (move - 1));\n+        for (int i = (h * move) - 1; i != (h * (move - 1)) - 1; i --) {\n+            if (board[i] != Piece.EMPTY) {\n+                actual_move = i + 1;\n+                break;\n+            }\n+        }\n+        return actual_move;\n     }\n \n     private Tuple<Primitive, Integer> getValue(Piece[] board, int tier) {"
  }
]
