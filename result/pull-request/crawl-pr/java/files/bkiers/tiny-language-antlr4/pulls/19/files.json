[
  {
    "sha": "bc17e540d869572cd9c82702018e21266b5b7b0c",
    "filename": "src/main/antlr4/tl/antlr4/TL.g4",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/70e1c70eff00216d493020dde673bf6223e4e4a2/src/main/antlr4/tl/antlr4/TL.g4",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/70e1c70eff00216d493020dde673bf6223e4e4a2/src/main/antlr4/tl/antlr4/TL.g4",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/antlr4/tl/antlr4/TL.g4?ref=70e1c70eff00216d493020dde673bf6223e4e4a2",
    "patch": "@@ -17,7 +17,7 @@ statement\n  ;\n \n assignment\n- : Identifier indexes? '=' expression\n+ : Identifier indexes? op=( '=' | '^=' | '*=' | '/=' | '%=' | '+=' | '-=' | '&&=' | '||=' ) expression\n  ;\n \n functionCall\n@@ -85,6 +85,7 @@ expression\n  | String indexes?                                      #stringExpression\n  | '(' expression ')' indexes?                          #expressionExpression\n  | Input '(' String? ')'                                #inputExpression\n+ | assignment                                           #assignmentExpression\n  ;\n \n list\n@@ -139,6 +140,15 @@ Comma    : ',';\n QMark    : '?';\n Colon    : ':';\n \n+OrAssign       : '||=';\n+AndAssign      : '&&=';\n+PowAssign      : '^=';\n+AddAssign      : '+=';\n+SubtractAssign : '-=';\n+MultiplyAssign : '*=';\n+DivideAssign   : '/=';\n+ModulusAssign  : '%=';\n+\n Bool\n  : 'true' \n  | 'false'"
  },
  {
    "sha": "81152fe6b2ee9fdd804e97be34708d0f1fb17df0",
    "filename": "src/main/java/tl/antlr4/EvalVisitor.java",
    "status": "modified",
    "additions": 62,
    "deletions": 4,
    "changes": 66,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/70e1c70eff00216d493020dde673bf6223e4e4a2/src/main/java/tl/antlr4/EvalVisitor.java",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/70e1c70eff00216d493020dde673bf6223e4e4a2/src/main/java/tl/antlr4/EvalVisitor.java",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/java/tl/antlr4/EvalVisitor.java?ref=70e1c70eff00216d493020dde673bf6223e4e4a2",
    "patch": "@@ -75,6 +75,10 @@ public TLValue visitNotExpression(NotExpressionContext ctx) {\n     public TLValue visitPowerExpression(PowerExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        return pow(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue pow(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(Math.pow(lhs.asDouble(), rhs.asDouble()));\n     \t}\n@@ -142,6 +146,10 @@ public TLValue visitEqExpression(EqExpressionContext ctx) {\n     public TLValue multiply(MultExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        return multiply(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue multiply(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif(lhs == null || rhs == null) {\n     \t\tSystem.err.println(\"lhs \"+ lhs+ \" rhs \"+rhs);\n     \t    throw new EvalException(ctx);\n@@ -178,6 +186,10 @@ public TLValue multiply(MultExpressionContext ctx) {\n     private TLValue divide(MultExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+    \treturn divide(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue divide(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(lhs.asDouble() / rhs.asDouble());\n     \t}\n@@ -187,6 +199,10 @@ private TLValue divide(MultExpressionContext ctx) {\n \tprivate TLValue modulus(MultExpressionContext ctx) {\n \t\tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        return modulus(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue modulus(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(lhs.asDouble() % rhs.asDouble());\n     \t}\n@@ -197,6 +213,10 @@ private TLValue add(AddExpressionContext ctx) {\n         TLValue lhs = this.visit(ctx.expression(0));\n         TLValue rhs = this.visit(ctx.expression(1));\n         \n+        return add(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue add(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n         if(lhs == null || rhs == null) {\n             throw new EvalException(ctx);\n         }\n@@ -229,6 +249,10 @@ private TLValue add(AddExpressionContext ctx) {\n     private TLValue subtract(AddExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        return subtract(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue subtract(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(lhs.asDouble() - rhs.asDouble());\n     \t}\n@@ -309,6 +333,10 @@ public TLValue visitAndExpression(AndExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n     \t\n+        return and(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue and(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif(!lhs.isBoolean() || !rhs.isBoolean()) {\n     \t    throw new EvalException(ctx);\n         }\n@@ -321,6 +349,10 @@ public TLValue visitOrExpression(OrExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n     \t\n+        return or(ctx, lhs, rhs);\n+    }\n+\n+    private TLValue or(ParserRuleContext ctx, TLValue lhs, TLValue rhs) {\n     \tif(!lhs.isBoolean() || !rhs.isBoolean()) {\n     \t    throw new EvalException(ctx);\n         }\n@@ -486,20 +518,46 @@ public TLValue visitInputExpression(InputExpressionContext ctx) {\n \n     \n     // assignment\n-    // : Identifier indexes? '=' expression\n+    // : Identifier indexes? op=( '=' | '^=' | '*=' | '/=' | '%=' | '+=' | '-=' | '&&=' | '||=' ) expression\n     // ;\n     @Override\n     public TLValue visitAssignment(AssignmentContext ctx) {\n-        TLValue newVal = this.visit(ctx.expression());\n+        TLValue val = scope.resolve(ctx.Identifier().getText());\n+        TLValue rhs = this.visit(ctx.expression());\n+        TLValue newVal = this.newVal(ctx, val, rhs);\n         if (ctx.indexes() != null) {\n-        \tTLValue val = scope.resolve(ctx.Identifier().getText());\n         \tList<ExpressionContext> exps = ctx.indexes().expression();\n         \tsetAtIndex(ctx, exps, val, newVal);\n         } else {\n         \tString id = ctx.Identifier().getText();        \t\n         \tscope.assign(id, newVal);\n         }\n-        return TLValue.VOID;\n+        return newVal;\n+    }\n+\n+    private TLValue newVal(AssignmentContext ctx, TLValue val, TLValue rhs) {\n+        switch (ctx.op.getType()) {\n+            case TLLexer.Assign:\n+                return rhs;\n+            case TLLexer.OrAssign:\n+                return or(ctx, val, rhs);\n+            case TLLexer.AndAssign:\n+                return and(ctx, val, rhs);\n+            case TLLexer.PowAssign:\n+                return pow(ctx, val, rhs);\n+            case TLLexer.AddAssign:\n+                return add(ctx, val, rhs);\n+            case TLLexer.SubtractAssign:\n+                return subtract(ctx, val, rhs);\n+            case TLLexer.MultiplyAssign:\n+                return multiply(ctx, val, rhs);\n+            case TLLexer.DivideAssign:\n+                return divide(ctx, val, rhs);\n+            case TLLexer.ModulusAssign:\n+                return modulus(ctx, val, rhs);\n+            default:\n+                throw new RuntimeException(\"unknown operator type: \" + ctx.op.getType());\n+        }\n     }\n \n     // Identifier '(' exprList? ')' #identifierFunctionCall"
  },
  {
    "sha": "9cf038e73b12cc724223b89509e0ae89c6a68b79",
    "filename": "src/main/tl/test.tl",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/70e1c70eff00216d493020dde673bf6223e4e4a2/src/main/tl/test.tl",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/70e1c70eff00216d493020dde673bf6223e4e4a2/src/main/tl/test.tl",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/tl/test.tl?ref=70e1c70eff00216d493020dde673bf6223e4e4a2",
    "patch": "@@ -40,6 +40,30 @@ assert(3^3 == 27);\n assert(4^3^2 == 262144); // power is right associative\n assert((4^3)^2 == 4096);\n \n+// assignment\n+a = 3;\n+a += 1;\n+assert(a == 4);\n+a = 3;\n+a -= 1;\n+assert(a == 2);\n+a = 3;\n+a *= 2;\n+assert(a == 6);\n+a = 3;\n+a /= 2;\n+assert(a == 1.5);\n+a = 3;\n+a %= 2;\n+assert(a == 1);\n+a = 3;\n+a ^= 3;\n+assert(a == 27);\n+\n+assert((b = false) == false);\n+assert((b ||= true) == true);\n+assert((b &&= false) == false);\n+\n // for- and while statements\n a = 0;\n for i=1 to 10 do"
  }
]
