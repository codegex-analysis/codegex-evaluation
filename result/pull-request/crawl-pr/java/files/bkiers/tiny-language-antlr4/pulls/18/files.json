[
  {
    "sha": "72388bfd994de5488b4420f2d44cfad73441e29e",
    "filename": "src/main/antlr4/tl/antlr4/TL.g4",
    "status": "modified",
    "additions": 14,
    "deletions": 3,
    "changes": 17,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/antlr4/tl/antlr4/TL.g4",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/antlr4/tl/antlr4/TL.g4",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/antlr4/tl/antlr4/TL.g4?ref=00cfdfb0ecc0c19a8cfddcbf687529d072340941",
    "patch": "@@ -26,6 +26,9 @@ functionCall\n  | Print '(' expression ')'     #printFunctionCall\n  | Assert '(' expression ')'    #assertFunctionCall\n  | Size '(' expression ')'      #sizeFunctionCall\n+ | Round '(' expression ')'     #roundFunctionCall\n+ | Floor '(' expression ')'     #floorFunctionCall\n+ | Ceil '(' expression ')'      #ceilFunctionCall\n  ;\n \n ifStatement\n@@ -76,7 +79,8 @@ expression\n  | expression '||' expression                           #orExpression\n  | expression '?' expression ':' expression             #ternaryExpression\n  | expression In expression                             #inExpression\n- | Number                                               #numberExpression\n+ | Double                                               #doubleExpression\n+ | Integer                                              #integerExpression\n  | Bool                                                 #boolExpression\n  | Null                                                 #nullExpression\n  | functionCall indexes?                                #functionCallExpression\n@@ -100,6 +104,9 @@ Print    : 'print';\n Input    : 'input';\n Assert   : 'assert';\n Size     : 'size';\n+Round    : 'round';\n+Floor    : 'floor';\n+Ceil     : 'ceil';\n Def      : 'def';\n If       : 'if';\n Else     : 'else';\n@@ -144,8 +151,12 @@ Bool\n  | 'false'\n  ;\n \n-Number\n- : Int ( '.' Digit* )?\n+Double\n+ : Int '.' Digit*\n+ ;\n+\n+Integer\n+ : Int\n  ;\n \n Identifier"
  },
  {
    "sha": "253695f46487e7f85ea2403fff4b7f9508c767d9",
    "filename": "src/main/java/tl/antlr4/EvalVisitor.java",
    "status": "modified",
    "additions": 99,
    "deletions": 36,
    "changes": 135,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/java/tl/antlr4/EvalVisitor.java",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/java/tl/antlr4/EvalVisitor.java",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/java/tl/antlr4/EvalVisitor.java?ref=00cfdfb0ecc0c19a8cfddcbf687529d072340941",
    "patch": "@@ -57,6 +57,9 @@ public TLValue visitUnaryMinusExpression(UnaryMinusExpressionContext ctx) {\n     \tif (!v.isNumber()) {\n     \t    throw new EvalException(ctx);\n         }\n+        if (v.isInteger()) {\n+            return new TLValue(-1 * v.asInt());\n+        }\n     \treturn new TLValue(-1 * v.asDouble());\n     }\n \n@@ -75,12 +78,23 @@ public TLValue visitNotExpression(NotExpressionContext ctx) {\n     public TLValue visitPowerExpression(PowerExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        if (lhs.isInteger() && rhs.isInteger()) {\n+            return new TLValue(pow(lhs.asInt(), rhs.asInt()));\n+        }\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(Math.pow(lhs.asDouble(), rhs.asDouble()));\n     \t}\n     \tthrow new EvalException(ctx);\n     }\n \n+    private static int pow(int a, int b) {\n+        int result = 1;\n+        for (int i = 1; i <= b; i++) {\n+            result *= a;\n+        }\n+        return result;\n+    }\n+\n     // expression op=( '*' | '/' | '%' ) expression         #multExpression\n     @Override\n     public TLValue visitMultExpression(MultExpressionContext ctx) {\n@@ -147,25 +161,30 @@ public TLValue multiply(MultExpressionContext ctx) {\n     \t    throw new EvalException(ctx);\n     \t}\n     \t\n+        // integer * integer\n+        if(lhs.isInteger() && rhs.isInteger()) {\n+            return new TLValue(lhs.asInt() * rhs.asInt());\n+        }\n+\n     \t// number * number\n         if(lhs.isNumber() && rhs.isNumber()) {\n             return new TLValue(lhs.asDouble() * rhs.asDouble());\n         }\n \n-        // string * number\n-        if(lhs.isString() && rhs.isNumber()) {\n+        // string * integer\n+        if(lhs.isString() && rhs.isInteger()) {\n             StringBuilder str = new StringBuilder();\n-            int stop = rhs.asDouble().intValue();\n+            int stop = rhs.asInt();\n             for(int i = 0; i < stop; i++) {\n                 str.append(lhs.asString());\n             }\n             return new TLValue(str.toString());\n         }\n \n-        // list * number\n-        if(lhs.isList() && rhs.isNumber()) {\n+        // list * integer\n+        if(lhs.isList() && rhs.isInteger()) {\n             List<TLValue> total = new ArrayList<>();\n-            int stop = rhs.asDouble().intValue();\n+            int stop = rhs.asInt();\n             for(int i = 0; i < stop; i++) {\n                 total.addAll(lhs.asList());\n             }\n@@ -187,6 +206,9 @@ private TLValue divide(MultExpressionContext ctx) {\n \tprivate TLValue modulus(MultExpressionContext ctx) {\n \t\tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        if (lhs.isInteger() && rhs.isInteger()) {\n+            return new TLValue(lhs.asInt() % rhs.asInt());\n+        }\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(lhs.asDouble() % rhs.asDouble());\n     \t}\n@@ -200,6 +222,11 @@ private TLValue add(AddExpressionContext ctx) {\n         if(lhs == null || rhs == null) {\n             throw new EvalException(ctx);\n         }\n+\n+        // integer + integer\n+        if(lhs.isInteger() && rhs.isInteger()) {\n+            return new TLValue(lhs.asInt() + rhs.asInt());\n+        }\n         \n         // number + number\n         if(lhs.isNumber() && rhs.isNumber()) {\n@@ -229,6 +256,9 @@ private TLValue add(AddExpressionContext ctx) {\n     private TLValue subtract(AddExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n+        if (lhs.isInteger() && rhs.isInteger()) {\n+            return new TLValue(lhs.asInt() - rhs.asInt());\n+        }\n     \tif (lhs.isNumber() && rhs.isNumber()) {\n     \t\treturn new TLValue(lhs.asDouble() - rhs.asDouble());\n     \t}\n@@ -243,47 +273,39 @@ private TLValue subtract(AddExpressionContext ctx) {\n     private TLValue gtEq(CompExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n-    \tif (lhs.isNumber() && rhs.isNumber()) {\n-    \t\treturn new TLValue(lhs.asDouble() >= rhs.asDouble());\n-    \t}\n-    \tif(lhs.isString() && rhs.isString()) {\n-            return new TLValue(lhs.asString().compareTo(rhs.asString()) >= 0);\n+        Integer result = lhs.compare(rhs);\n+        if (result != null) {\n+            return new TLValue(result >= 0);\n         }\n     \tthrow new EvalException(ctx);\n     }\n \n     private TLValue ltEq(CompExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n-    \tif (lhs.isNumber() && rhs.isNumber()) {\n-    \t\treturn new TLValue(lhs.asDouble() <= rhs.asDouble());\n-    \t}\n-    \tif(lhs.isString() && rhs.isString()) {\n-            return new TLValue(lhs.asString().compareTo(rhs.asString()) <= 0);\n+        Integer result = lhs.compare(rhs);\n+        if (result != null) {\n+            return new TLValue(result <= 0);\n         }\n     \tthrow new EvalException(ctx);\n     }\n \n     private TLValue gt(CompExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n-    \tif (lhs.isNumber() && rhs.isNumber()) {\n-    \t\treturn new TLValue(lhs.asDouble() > rhs.asDouble());\n-    \t}\n-    \tif(lhs.isString() && rhs.isString()) {\n-            return new TLValue(lhs.asString().compareTo(rhs.asString()) > 0);\n+        Integer result = lhs.compare(rhs);\n+        if (result != null) {\n+            return new TLValue(result > 0);\n         }\n     \tthrow new EvalException(ctx);\n     }\n \n     private TLValue lt(CompExpressionContext ctx) {\n     \tTLValue lhs = this.visit(ctx.expression(0));\n     \tTLValue rhs = this.visit(ctx.expression(1));\n-    \tif (lhs.isNumber() && rhs.isNumber()) {\n-    \t\treturn new TLValue(lhs.asDouble() < rhs.asDouble());\n-    \t}\n-    \tif(lhs.isString() && rhs.isString()) {\n-            return new TLValue(lhs.asString().compareTo(rhs.asString()) < 0);\n+        Integer result = lhs.compare(rhs);\n+        if (result != null) {\n+            return new TLValue(result < 0);\n         }\n     \tthrow new EvalException(ctx);\n     }\n@@ -355,12 +377,18 @@ public TLValue visitInExpression(InExpressionContext ctx) {\n     \tthrow new EvalException(ctx);\n \t}\n \t\n-    // Number                                   #numberExpression\n+    // Double                                   #doubleExpression\n     @Override\n-    public TLValue visitNumberExpression(NumberExpressionContext ctx) {\n+    public TLValue visitDoubleExpression(DoubleExpressionContext ctx) {\n         return new TLValue(Double.valueOf(ctx.getText()));\n     }\n \n+    // Integer                                  #integerExpression\n+    @Override\n+    public TLValue visitIntegerExpression(IntegerExpressionContext ctx) {\n+        return new TLValue(Integer.valueOf(ctx.getText()));\n+    }\n+\n     // Bool                                     #boolExpression\n     @Override\n     public TLValue visitBoolExpression(BoolExpressionContext ctx) {\n@@ -376,10 +404,10 @@ public TLValue visitNullExpression(NullExpressionContext ctx) {\n     private TLValue resolveIndexes(TLValue val, List<ExpressionContext> indexes) {\n     \tfor (ExpressionContext ec: indexes) {\n     \t\tTLValue idx = this.visit(ec);\n-    \t\tif (!idx.isNumber() || (!val.isList() && !val.isString()) ) {\n+    \t\tif (!idx.isInteger() || (!val.isList() && !val.isString()) ) {\n         \t\tthrow new EvalException(\"Problem resolving indexes on \"+val+\" at \"+idx, ec);\n     \t\t}\n-    \t\tint i = idx.asDouble().intValue();\n+    \t\tint i = idx.asInt();\n     \t\tif (val.isString()) {\n     \t\t\tval = new TLValue(val.asString().substring(i, i+1));\n     \t\t} else {\n@@ -395,16 +423,16 @@ private void setAtIndex(ParserRuleContext ctx, List<ExpressionContext> indexes,\n     \t}\n     \tfor (int i = 0; i < indexes.size() - 1; i++) {\n     \t\tTLValue idx = this.visit(indexes.get(i));\n-    \t\tif (!idx.isNumber()) {\n+    \t\tif (!idx.isInteger()) {\n         \t\tthrow new EvalException(ctx);\n     \t\t}\n-    \t\tval = val.asList().get(idx.asDouble().intValue());\n+    \t\tval = val.asList().get(idx.asInt());\n     \t}\n     \tTLValue idx = this.visit(indexes.get(indexes.size() - 1));\n-\t\tif (!idx.isNumber()) {\n+\t\tif (!idx.isInteger()) {\n     \t\tthrow new EvalException(ctx);\n \t\t}\n-    \tval.asList().set(idx.asDouble().intValue(), newVal);\n+    \tval.asList().set(idx.asInt(), newVal);\n     }\n     \n     // functionCall indexes?                    #functionCallExpression\n@@ -568,6 +596,36 @@ public TLValue visitSizeFunctionCall(SizeFunctionCallContext ctx) {\n         throw new EvalException(ctx);\n     }\n \n+    // Round '(' expression ')'     #roundFunctionCall\n+    @Override\n+    public TLValue visitRoundFunctionCall(RoundFunctionCallContext ctx) {\n+        TLValue value = this.visit(ctx.expression());\n+        if(value.isNumber()) {\n+            return new TLValue((int)Math.round(value.asDouble()));\n+        }\n+        throw new EvalException(ctx);\n+    }\n+\n+    // Floor '(' expression ')'     #floorFunctionCall\n+    @Override\n+    public TLValue visitFloorFunctionCall(FloorFunctionCallContext ctx) {\n+        TLValue value = this.visit(ctx.expression());\n+        if(value.isNumber()) {\n+            return new TLValue((int)Math.floor(value.asDouble()));\n+        }\n+        throw new EvalException(ctx);\n+    }\n+\n+    // Ceil '(' expression ')'      #ceilFunctionCall\n+    @Override\n+    public TLValue visitCeilFunctionCall(CeilFunctionCallContext ctx) {\n+        TLValue value = this.visit(ctx.expression());\n+        if(value.isNumber()) {\n+            return new TLValue((int)Math.ceil(value.asDouble()));\n+        }\n+        throw new EvalException(ctx);\n+    }\n+\n     // ifStatement\n     //  : ifStat elseIfStat* elseStat? End\n     //  ;\n@@ -634,8 +692,13 @@ public TLValue visitBlock(BlockContext ctx) {\n     // ;\n     @Override\n     public TLValue visitForStatement(ForStatementContext ctx) {\n-        int start = this.visit(ctx.expression(0)).asDouble().intValue();\n-        int stop = this.visit(ctx.expression(1)).asDouble().intValue();\n+        TLValue startValue = this.visit(ctx.expression(0));\n+        TLValue stopValue = this.visit(ctx.expression(1));\n+        if (!startValue.isInteger() || !stopValue.isInteger()) {\n+            throw new EvalException(ctx);\n+        }\n+        int start = startValue.asInt();\n+        int stop = stopValue.asInt();\n         for(int i = start; i <= stop; i++) {\n             scope.assign(ctx.Identifier().getText(), new TLValue(i));\n             TLValue returnValue = this.visit(ctx.block());"
  },
  {
    "sha": "264f0884892555eda0b7eae93a8b87cdaab2d9c2",
    "filename": "src/main/java/tl/antlr4/TLValue.java",
    "status": "modified",
    "additions": 53,
    "deletions": 10,
    "changes": 63,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/java/tl/antlr4/TLValue.java",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/java/tl/antlr4/TLValue.java",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/java/tl/antlr4/TLValue.java?ref=00cfdfb0ecc0c19a8cfddcbf687529d072340941",
    "patch": "@@ -14,27 +14,43 @@ private TLValue() {\n         value = new Object();\n     }\n \n-    TLValue(Object v) {\n+    private TLValue(Object v) {\n         if(v == null) {\n             throw new RuntimeException(\"v == null\");\n         }\n         value = v;\n-        // only accept boolean, list, number or string types\n-        if(!(isBoolean() || isList() || isNumber() || isString())) {\n-            throw new RuntimeException(\"invalid data type: \" + v + \" (\" + v.getClass() + \")\");\n-        }\n+    }\n+\n+    TLValue(Boolean v) {\n+        this((Object)v);\n+    }\n+\n+    TLValue(List<TLValue> v) {\n+        this((Object)v);\n+    }\n+\n+    TLValue(Integer v) {\n+        this((Object)v);\n+    }\n+\n+    TLValue(Double v) {\n+        this((Object)v);\n+    }\n+\n+    TLValue(String v) {\n+        this((Object)v);\n     }\n \n     public Boolean asBoolean() {\n         return (Boolean)value;\n     }\n \n-    public Double asDouble() {\n+    public double asDouble() {\n         return ((Number)value).doubleValue();\n     }\n \n-    public Long asLong() {\n-        return ((Number)value).longValue();\n+    public int asInt() {\n+        return ((Number)value).intValue();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -48,19 +64,35 @@ public String asString() {\n \n     @Override\n     public int compareTo(TLValue that) {\n+        Integer result = this.compare(that);\n+        if (result != null) {\n+            return result;\n+        }\n+        throw new RuntimeException(\"illegal expression: can't compare `\" + this + \"` to `\" + that + \"`\");\n+    }\n+\n+    Integer compare(TLValue that) {\n+        if(this.isInteger() && that.isInteger()) {\n+            if(this.asInt() == that.asInt()) {\n+                return 0;\n+            }\n+            else {\n+                return Integer.compare(this.asInt(), that.asInt());\n+            }\n+        }\n         if(this.isNumber() && that.isNumber()) {\n             if(this.equals(that)) {\n                 return 0;\n             }\n             else {\n-                return this.asDouble().compareTo(that.asDouble());\n+                return Double.compare(this.asDouble(), that.asDouble());\n             }\n         }\n         else if(this.isString() && that.isString()) {\n             return this.asString().compareTo(that.asString());\n         }\n         else {\n-            throw new RuntimeException(\"illegal expression: can't compare `\" + this + \"` to `\" + that + \"`\");\n+            return null;\n         }\n     }\n \n@@ -76,6 +108,13 @@ public boolean equals(Object o) {\n             return false;\n         }\n         TLValue that = (TLValue)o;\n+        return this.equals(that);\n+    }\n+\n+    public boolean equals(TLValue that) {\n+        if(this.isInteger() && that.isInteger()) {\n+            return this.asInt() == that.asInt();\n+        }\n         if(this.isNumber() && that.isNumber()) {\n             double diff = Math.abs(this.asDouble() - that.asDouble());\n             return diff < 0.00000000001;\n@@ -98,6 +137,10 @@ public boolean isNumber() {\n         return value instanceof Number;\n     }\n \n+    public boolean isInteger() {\n+        return value instanceof Integer;\n+    }\n+\n     public boolean isList() {\n         return value instanceof List<?>;\n     }"
  },
  {
    "sha": "88aa72211cfe081ef7a4c9c02bb26c8b662fffe2",
    "filename": "src/main/tl/test.tl",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/bkiers/tiny-language-antlr4/blob/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/tl/test.tl",
    "raw_url": "https://github.com/bkiers/tiny-language-antlr4/raw/00cfdfb0ecc0c19a8cfddcbf687529d072340941/src/main/tl/test.tl",
    "contents_url": "https://api.github.com/repos/bkiers/tiny-language-antlr4/contents/src/main/tl/test.tl?ref=00cfdfb0ecc0c19a8cfddcbf687529d072340941",
    "patch": "@@ -103,6 +103,13 @@ assert(list() == [7,8,9]);\n assert(size(list()) == 3);\n assert(list()[1] == 8);\n \n+assert(round(4.4) == 4);\n+assert(round(4.5) == 5);\n+assert(floor(4.4) == 4);\n+assert(floor(4.5) == 4);\n+assert(ceil(4.4) == 5);\n+assert(ceil(4.5) == 5);\n+\n // naive bubble sort\n def sort(list)\n   while !sorted(list) do"
  }
]
