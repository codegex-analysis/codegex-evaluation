[
  {
    "sha": "d4991f4318f3154d11f7277f9c4ddc9b6aac5bee",
    "filename": "src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/model/ccd/CCDConfigConstant.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/16f7f3f23e0a147809071fc79885a1bfc0df9c63/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/model/ccd/CCDConfigConstant.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/16f7f3f23e0a147809071fc79885a1bfc0df9c63/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/model/ccd/CCDConfigConstant.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/model/ccd/CCDConfigConstant.java?ref=16f7f3f23e0a147809071fc79885a1bfc0df9c63",
    "patch": "@@ -421,6 +421,7 @@\n     public static final String APP_EXPERT_EVIDENCE_COLLECTION = \"appExpertEvidenceCollection\";\n     public static final String APP_CORRESPONDENCE_COLLECTION = \"appCorrespondenceDocsColl\";\n     public static final String APP_OTHER_COLLECTION = \"appOtherCollection\";\n+    public static final String HEARING_BUNDLES_COLLECTION = \"genHearingBundlesCollection\";\n     public static final String RESP_HEARING_BUNDLES_COLLECTION = \"respHearingBundlesCollection\";\n     public static final String RESP_FORM_E_EXHIBITS_COLLECTION = \"respFormEExhibitsCollection\";\n     public static final String RESP_CHRONOLOGIES_STATEMENTS_COLLECTION = \"respChronologiesCollection\";\n@@ -432,8 +433,6 @@\n     public static final String RESP_CORRESPONDENCE_COLLECTION = \"respCorrespondenceDocsColl\";\n     public static final String RESP_OTHER_COLLECTION = \"respOtherCollection\";\n \n-\n-\n     public static final String AMENDED_CONSENT_ORDER = \"AmendedConsentOrder\";\n \n     //organisation policy"
  },
  {
    "sha": "7ace3f4fac39bebcc23e4d797cf237dc5831124a",
    "filename": "src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsService.java",
    "status": "modified",
    "additions": 91,
    "deletions": 337,
    "changes": 428,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/16f7f3f23e0a147809071fc79885a1bfc0df9c63/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsService.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/16f7f3f23e0a147809071fc79885a1bfc0df9c63/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsService.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsService.java?ref=16f7f3f23e0a147809071fc79885a1bfc0df9c63",
    "patch": "@@ -11,6 +11,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APPLICANT_CONFIDENTIAL_DOCS_COLLECTION;\n@@ -29,6 +30,7 @@\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APP_QUESTIONNAIRES_ANSWERS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APP_STATEMENTS_EXHIBITS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.CONTESTED_UPLOADED_DOCUMENTS;\n+import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.HEARING_BUNDLES_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESPONDENT_CONFIDENTIAL_DOCS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESPONDENT_CORRESPONDENCE_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESPONDENT_EVIDENCE_COLLECTION;\n@@ -45,7 +47,6 @@\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESP_QUESTIONNAIRES_ANSWERS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESP_STATEMENTS_EXHIBITS_COLLECTION;\n \n-\n @Slf4j\n @Service\n @RequiredArgsConstructor\n@@ -65,39 +66,55 @@\n         List<ContestedUploadedDocumentData> uploadedDocuments = getDocumentCollection(caseData, CONTESTED_UPLOADED_DOCUMENTS);\n \n         if (respondentJourneyEnabled) {\n-            filterConfidentialDocs(uploadedDocuments, caseData, APPLICANT_CONFIDENTIAL_DOCS_COLLECTION, APPLICANT);\n-            filterHearingBundles(uploadedDocuments, caseData, APP_HEARING_BUNDLES_COLLECTION, APPLICANT);\n-            filterFormEExhibits(uploadedDocuments, caseData, APP_FORM_E_EXHIBITS_COLLECTION, APPLICANT);\n-            filterChronologiesStatements(uploadedDocuments, caseData, APP_CHRONOLOGIES_STATEMENTS_COLLECTION, APPLICANT);\n-            filterQuestionnairesAnswers(uploadedDocuments, caseData, APP_QUESTIONNAIRES_ANSWERS_COLLECTION, APPLICANT);\n-            filterStatementsExhibits(uploadedDocuments, caseData, APP_STATEMENTS_EXHIBITS_COLLECTION, APPLICANT);\n-            filterCaseSummaries(uploadedDocuments, caseData, APP_CASE_SUMMARIES_COLLECTION, APPLICANT);\n-            filterFormsH(uploadedDocuments, caseData, APP_FORMS_H_COLLECTION, APPLICANT);\n-            filterExpertEvidence(uploadedDocuments, caseData, APP_EXPERT_EVIDENCE_COLLECTION, APPLICANT);\n-            filterCorrespondenceDocs(uploadedDocuments, caseData, APP_CORRESPONDENCE_COLLECTION, APPLICANT);\n-            filterOtherDocs(uploadedDocuments, caseData, APP_OTHER_COLLECTION, APPLICANT);\n+            filterHearingBundlesNoParty(uploadedDocuments, caseData, HEARING_BUNDLES_COLLECTION);\n \n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_HEARING_BUNDLES_COLLECTION, APPLICANT, this::isTypeValidForHearingBundle);\n+            filterConfidentialDocs(uploadedDocuments, caseData, APPLICANT_CONFIDENTIAL_DOCS_COLLECTION, APPLICANT);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_FORM_E_EXHIBITS_COLLECTION, APPLICANT, this::isTypeValidForFormEExhibits);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_CHRONOLOGIES_STATEMENTS_COLLECTION, APPLICANT,\n+                this::isTypeValidForChronologiesStatements);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_QUESTIONNAIRES_ANSWERS_COLLECTION, APPLICANT,\n+                this::isTypeValidForQuestionnairesAnswers);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_STATEMENTS_EXHIBITS_COLLECTION, APPLICANT,\n+                this::isTypeValidForStatementsExhibits);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_CASE_SUMMARIES_COLLECTION, APPLICANT, this::isTypeValidForCaseSummaries);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_FORMS_H_COLLECTION, APPLICANT, this::isTypeValidForFormsH);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_EXPERT_EVIDENCE_COLLECTION, APPLICANT, this::isTypeValidForExpertEvidence);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_CORRESPONDENCE_COLLECTION, APPLICANT,\n+                this::isTypeValidForCorrespondenceDocs);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APP_OTHER_COLLECTION, APPLICANT, this::isTypeValidForOtherDocs);\n+\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_HEARING_BUNDLES_COLLECTION, RESPONDENT,\n+                this::isTypeValidForHearingBundle);\n             filterConfidentialDocs(uploadedDocuments, caseData, RESPONDENT_CONFIDENTIAL_DOCS_COLLECTION, RESPONDENT);\n-            filterHearingBundles(uploadedDocuments, caseData, RESP_HEARING_BUNDLES_COLLECTION, RESPONDENT);\n-            filterFormEExhibits(uploadedDocuments, caseData, RESP_FORM_E_EXHIBITS_COLLECTION, RESPONDENT);\n-            filterChronologiesStatements(uploadedDocuments, caseData, RESP_CHRONOLOGIES_STATEMENTS_COLLECTION, RESPONDENT);\n-            filterQuestionnairesAnswers(uploadedDocuments, caseData, RESP_QUESTIONNAIRES_ANSWERS_COLLECTION, RESPONDENT);\n-            filterStatementsExhibits(uploadedDocuments, caseData, RESP_STATEMENTS_EXHIBITS_COLLECTION, RESPONDENT);\n-            filterCaseSummaries(uploadedDocuments, caseData, RESP_CASE_SUMMARIES_COLLECTION, RESPONDENT);\n-            filterFormsH(uploadedDocuments, caseData, RESP_FORM_H_COLLECTION, RESPONDENT);\n-            filterExpertEvidence(uploadedDocuments, caseData, RESP_EXPERT_EVIDENCE_COLLECTION, RESPONDENT);\n-            filterCorrespondenceDocs(uploadedDocuments, caseData, RESP_CORRESPONDENCE_COLLECTION, RESPONDENT);\n-            filterOtherDocs(uploadedDocuments, caseData, RESP_OTHER_COLLECTION, RESPONDENT);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_FORM_E_EXHIBITS_COLLECTION, RESPONDENT,\n+                this::isTypeValidForFormEExhibits);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_CHRONOLOGIES_STATEMENTS_COLLECTION, RESPONDENT,\n+                this::isTypeValidForChronologiesStatements);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_QUESTIONNAIRES_ANSWERS_COLLECTION, RESPONDENT,\n+                this::isTypeValidForQuestionnairesAnswers);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_STATEMENTS_EXHIBITS_COLLECTION, RESPONDENT,\n+                this::isTypeValidForStatementsExhibits);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_CASE_SUMMARIES_COLLECTION, RESPONDENT, this::isTypeValidForCaseSummaries);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_FORM_H_COLLECTION, RESPONDENT, this::isTypeValidForFormsH);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_EXPERT_EVIDENCE_COLLECTION, RESPONDENT,\n+                this::isTypeValidForExpertEvidence);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_CORRESPONDENCE_COLLECTION, RESPONDENT,\n+                this::isTypeValidForCorrespondenceDocs);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESP_OTHER_COLLECTION, RESPONDENT, this::isTypeValidForOtherDocs);\n         } else {\n-            filterCorrespondence(uploadedDocuments, caseData, APPLICANT_CORRESPONDENCE_COLLECTION, APPLICANT);\n-            filterForms(uploadedDocuments, caseData, APPLICANT_FR_FORM_COLLECTION, APPLICANT);\n-            filterEvidence(uploadedDocuments, caseData, APPLICANT_EVIDENCE_COLLECTION, APPLICANT);\n-            filterTrialBundle(uploadedDocuments, caseData, APPLICANT_TRIAL_BUNDLE_COLLECTION, APPLICANT);\n-\n-            filterCorrespondence(uploadedDocuments, caseData, RESPONDENT_CORRESPONDENCE_COLLECTION, RESPONDENT);\n-            filterForms(uploadedDocuments, caseData, RESPONDENT_FR_FORM_COLLECTION, RESPONDENT);\n-            filterEvidence(uploadedDocuments, caseData, RESPONDENT_EVIDENCE_COLLECTION, RESPONDENT);\n-            filterTrialBundle(uploadedDocuments, caseData, RESPONDENT_TRIAL_BUNDLE_COLLECTION, RESPONDENT);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APPLICANT_CORRESPONDENCE_COLLECTION, APPLICANT,\n+                this::isTypeValidForCorrespondence);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APPLICANT_FR_FORM_COLLECTION, APPLICANT, this::isTypeValidForForms);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APPLICANT_EVIDENCE_COLLECTION, APPLICANT, this::isTypeValidForEvidence);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, APPLICANT_TRIAL_BUNDLE_COLLECTION, APPLICANT, this::isTypeValidForTrialBundle);\n+\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESPONDENT_CORRESPONDENCE_COLLECTION, RESPONDENT,\n+                this::isTypeValidForCorrespondence);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESPONDENT_FR_FORM_COLLECTION, RESPONDENT, this::isTypeValidForForms);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESPONDENT_EVIDENCE_COLLECTION, RESPONDENT, this::isTypeValidForEvidence);\n+            filterDocumentsByPartyAndType(uploadedDocuments, caseData, RESPONDENT_TRIAL_BUNDLE_COLLECTION, RESPONDENT,\n+                this::isTypeValidForTrialBundle);\n         }\n \n         caseData.put(CONTESTED_UPLOADED_DOCUMENTS, uploadedDocuments);\n@@ -198,336 +215,73 @@ private boolean isTypeValidForOtherDocs(String caseDocumentType) {\n             || caseDocumentType.equals(\"Pension Plan\");\n     }\n \n-    private void filterCorrespondence(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                                      Map<String, Object> caseData,\n-                                      String collection,\n-                                      String party) {\n-        List<ContestedUploadedDocumentData> correspondenceFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForCorrespondence(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> correspondenceCollection = getDocumentCollection(caseData, collection);\n-        correspondenceCollection.addAll(correspondenceFiltered);\n-        log.info(\"Adding items: {}, to Correspondence Collection\", correspondenceFiltered);\n-        uploadedDocuments.removeAll(correspondenceFiltered);\n-\n-        if (!correspondenceCollection.isEmpty()) {\n-            caseData.put(collection, correspondenceCollection);\n-        }\n-    }\n-\n-    private void filterForms(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                             Map<String, Object> caseData,\n-                             String collection,\n-                             String party) {\n-        List<ContestedUploadedDocumentData> frFormsFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForForms(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> formCollection = getDocumentCollection(caseData, collection);\n-        formCollection.addAll(frFormsFiltered);\n-        log.info(\"Adding items: {}, to FR Forms Collection\", frFormsFiltered);\n-        uploadedDocuments.removeAll(frFormsFiltered);\n-\n-        if (!formCollection.isEmpty()) {\n-            caseData.put(collection, formCollection);\n-        }\n-    }\n-\n-    private void filterEvidence(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                                Map<String, Object> caseData,\n-                                String collection,\n-                                String party) {\n-        List<ContestedUploadedDocumentData> evidenceInSupportFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForEvidence(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> evidenceCollection = getDocumentCollection(caseData, collection);\n-        evidenceCollection.addAll(evidenceInSupportFiltered);\n-        log.info(\"Adding items: {}, to Evidence In Support Collection\", evidenceInSupportFiltered);\n-        uploadedDocuments.removeAll(evidenceInSupportFiltered);\n-\n-        if (!evidenceCollection.isEmpty()) {\n-            caseData.put(collection, evidenceCollection);\n-        }\n-    }\n-\n-    private void filterTrialBundle(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                                   Map<String, Object> caseData,\n-                                   String collection,\n-                                   String party) {\n-        List<ContestedUploadedDocumentData> trialBundleFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForTrialBundle(d.getUploadedCaseDocument().getCaseDocumentType()))\n+    private void filterHearingBundlesNoParty(List<ContestedUploadedDocumentData> uploadedDocuments,\n+                                             Map<String, Object> caseData,\n+                                             String collection) {\n+        List<ContestedUploadedDocumentData> filteredHearingBundle = filterDocumentsByType(uploadedDocuments, this::isTypeValidForHearingBundle)\n+            .stream()\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentParty() == null)\n             .collect(Collectors.toList());\n \n-        List<ContestedUploadedDocumentData> trialBundleCollection = getDocumentCollection(caseData, collection);\n-        trialBundleCollection.addAll(trialBundleFiltered);\n-        log.info(\"Adding items: {}, to Trial Bundle Collection\", trialBundleFiltered);\n-        uploadedDocuments.removeAll(trialBundleFiltered);\n-\n-        if (!trialBundleCollection.isEmpty()) {\n-            caseData.put(collection, trialBundleCollection);\n-        }\n+        addFilteredDocumentsToCaseData(filteredHearingBundle, uploadedDocuments, caseData, collection);\n     }\n \n     private void filterConfidentialDocs(List<ContestedUploadedDocumentData> uploadedDocuments,\n                                         Map<String, Object> caseData,\n                                         String collection,\n                                         String party) {\n-\n         log.info(\"UploadDocuments Collection: {}\", uploadedDocuments);\n-        List<ContestedUploadedDocumentData> confidentialFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentConfidential() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentConfidential().equalsIgnoreCase(\"Yes\"))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> confidentialDocsCollection = getDocumentCollection(caseData, collection);\n-        confidentialDocsCollection.addAll(confidentialFiltered);\n-        log.info(\"Adding items: {}, to Confidential Documents Collection\", confidentialFiltered);\n-        uploadedDocuments.removeAll(confidentialFiltered);\n-\n-        if (!confidentialDocsCollection.isEmpty()) {\n-            caseData.put(collection, confidentialDocsCollection);\n-        }\n-    }\n-\n-    private void filterHearingBundles(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> hearingBundlesFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForHearingBundle(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> hearingBundlesCollection = getDocumentCollection(caseData, collection);\n-        hearingBundlesCollection.addAll(hearingBundlesFiltered);\n-        log.info(\"Adding items: {}, to Hearing Bundles Collection\", hearingBundlesFiltered);\n-        uploadedDocuments.removeAll(hearingBundlesFiltered);\n-\n-        if (!hearingBundlesCollection.isEmpty()) {\n-            caseData.put(collection, hearingBundlesCollection);\n-        }\n-    }\n-\n-    private void filterFormEExhibits(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> formEExhibitsFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForFormEExhibits(d.getUploadedCaseDocument().getCaseDocumentType()))\n+        List<ContestedUploadedDocumentData> confidentialFiltered = filterDocumentsByParty(uploadedDocuments, party)\n+            .stream()\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null)\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentConfidential() != null)\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentConfidential().equalsIgnoreCase(\"Yes\"))\n             .collect(Collectors.toList());\n \n-        List<ContestedUploadedDocumentData> formEExhibitsCollection = getDocumentCollection(caseData, collection);\n-        formEExhibitsCollection.addAll(formEExhibitsFiltered);\n-        log.info(\"Adding items: {}, to Forms E & Exhibits Collection\", formEExhibitsFiltered);\n-        uploadedDocuments.removeAll(formEExhibitsFiltered);\n-\n-        if (!formEExhibitsCollection.isEmpty()) {\n-            caseData.put(collection, formEExhibitsCollection);\n-        }\n-    }\n-\n-    private void filterChronologiesStatements(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> chronologiesStatementsFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForChronologiesStatements(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> chronologiesStatementsCollection = getDocumentCollection(caseData, collection);\n-        chronologiesStatementsCollection.addAll(chronologiesStatementsFiltered);\n-        log.info(\"Adding items: {}, to Chronologies and Statements of Issues Collection\", chronologiesStatementsFiltered);\n-        uploadedDocuments.removeAll(chronologiesStatementsFiltered);\n-\n-        if (!chronologiesStatementsCollection.isEmpty()) {\n-            caseData.put(collection, chronologiesStatementsCollection);\n-        }\n-    }\n-\n-    private void filterQuestionnairesAnswers(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> questionnairesAnswersFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForQuestionnairesAnswers(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> questionnairesAnswersCollection = getDocumentCollection(caseData, collection);\n-        questionnairesAnswersCollection.addAll(questionnairesAnswersFiltered);\n-        log.info(\"Adding items: {}, to Questionnaires & Answers to Questionnaires & Exhibits Collection\", questionnairesAnswersFiltered);\n-        uploadedDocuments.removeAll(questionnairesAnswersFiltered);\n-\n-        if (!questionnairesAnswersCollection.isEmpty()) {\n-            caseData.put(collection, questionnairesAnswersCollection);\n-        }\n-    }\n-\n-    private void filterStatementsExhibits(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> statementsExhibitsFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForStatementsExhibits(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> statementsExhibitsCollection = getDocumentCollection(caseData, collection);\n-        statementsExhibitsCollection.addAll(statementsExhibitsFiltered);\n-        log.info(\"Adding items: {}, to Statements & Exhibits Collection\", statementsExhibitsFiltered);\n-        uploadedDocuments.removeAll(statementsExhibitsFiltered);\n-\n-        if (!statementsExhibitsCollection.isEmpty()) {\n-            caseData.put(collection, statementsExhibitsCollection);\n-        }\n+        addFilteredDocumentsToCaseData(confidentialFiltered, uploadedDocuments, caseData, collection);\n     }\n \n-    private void filterCaseSummaries(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> caseSummariesFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForCaseSummaries(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n+    private void filterDocumentsByPartyAndType(List<ContestedUploadedDocumentData> uploadedDocuments,\n+                                       Map<String, Object> caseData,\n+                                       String collection,\n+                                       String party,\n+                                       Predicate<String> p) {\n+        List<ContestedUploadedDocumentData> filteredDocuments = filterDocumentsByParty(uploadedDocuments, party);\n+        filteredDocuments = filterDocumentsByType(filteredDocuments, p);\n \n-        List<ContestedUploadedDocumentData> caseSummariesCollection = getDocumentCollection(caseData, collection);\n-        caseSummariesCollection.addAll(caseSummariesFiltered);\n-        log.info(\"Adding items: {}, to Case Summaries Collection\", caseSummariesFiltered);\n-        uploadedDocuments.removeAll(caseSummariesFiltered);\n-\n-        if (!caseSummariesCollection.isEmpty()) {\n-            caseData.put(collection, caseSummariesCollection);\n-        }\n+        addFilteredDocumentsToCaseData(filteredDocuments, uploadedDocuments, caseData, collection);\n     }\n \n-    private void filterFormsH(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> formsHFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForFormsH(d.getUploadedCaseDocument().getCaseDocumentType()))\n+    private List<ContestedUploadedDocumentData> filterDocumentsByType(\n+        List<ContestedUploadedDocumentData> uploadedDocuments, Predicate<String> p) {\n+        return uploadedDocuments.stream()\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null)\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null)\n+            .filter(d -> p.test(d.getUploadedCaseDocument().getCaseDocumentType()))\n             .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> formsHCollection = getDocumentCollection(caseData, collection);\n-        formsHCollection.addAll(formsHFiltered);\n-        log.info(\"Adding items: {}, to Forms H Collection\", formsHFiltered);\n-        uploadedDocuments.removeAll(formsHFiltered);\n-\n-        if (!formsHCollection.isEmpty()) {\n-            caseData.put(collection, formsHCollection);\n-        }\n     }\n \n-    private void filterExpertEvidence(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> expertEvidenceFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForExpertEvidence(d.getUploadedCaseDocument().getCaseDocumentType()))\n+    private List<ContestedUploadedDocumentData> filterDocumentsByParty(\n+        List<ContestedUploadedDocumentData> uploadedDocuments, String party) {\n+        return uploadedDocuments.stream()\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null)\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentParty() != null)\n+            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n             .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> expertEvidenceCollection = getDocumentCollection(caseData, collection);\n-        expertEvidenceCollection.addAll(expertEvidenceFiltered);\n-        log.info(\"Adding items: {}, to Expert Evidence Collection\", expertEvidenceFiltered);\n-        uploadedDocuments.removeAll(expertEvidenceFiltered);\n-\n-        if (!expertEvidenceCollection.isEmpty()) {\n-            caseData.put(collection, expertEvidenceCollection);\n-        }\n     }\n \n-    private void filterCorrespondenceDocs(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> correspondenceDocsFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForCorrespondenceDocs(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n+    private void addFilteredDocumentsToCaseData(List<ContestedUploadedDocumentData> filteredDocuments,\n+                                                List<ContestedUploadedDocumentData> uploadedDocuments,\n+                                                Map<String, Object> caseData,\n+                                                String collection) {\n+        List<ContestedUploadedDocumentData> documentCollection = getDocumentCollection(caseData, collection);\n+        documentCollection.addAll(filteredDocuments);\n+        log.info(\"Adding items: {}, to {}\", filteredDocuments, collection);\n \n-        List<ContestedUploadedDocumentData> correspondenceCollection = getDocumentCollection(caseData, collection);\n-        correspondenceCollection.addAll(correspondenceDocsFiltered);\n-        log.info(\"Adding items: {}, to Correspondence Docs Collection\", correspondenceDocsFiltered);\n-        uploadedDocuments.removeAll(correspondenceDocsFiltered);\n-\n-        if (!correspondenceCollection.isEmpty()) {\n-            caseData.put(collection, correspondenceCollection);\n+        if (!documentCollection.isEmpty()) {\n+            caseData.put(collection, documentCollection);\n         }\n-    }\n \n-    private void filterOtherDocs(List<ContestedUploadedDocumentData> uploadedDocuments,\n-                        Map<String, Object> caseData,\n-                        String collection,\n-                        String party) {\n-        List<ContestedUploadedDocumentData> otherDocsFiltered = uploadedDocuments.stream()\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocuments() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty() != null\n-                && d.getUploadedCaseDocument().getCaseDocumentParty().equals(party))\n-            .filter(d -> d.getUploadedCaseDocument().getCaseDocumentType() != null\n-                && isTypeValidForOtherDocs(d.getUploadedCaseDocument().getCaseDocumentType()))\n-            .collect(Collectors.toList());\n-\n-        List<ContestedUploadedDocumentData> otherCollection = getDocumentCollection(caseData, collection);\n-        otherCollection.addAll(otherDocsFiltered);\n-        log.info(\"Adding items: {}, to Other Docs Collection\", otherDocsFiltered);\n-        uploadedDocuments.removeAll(otherDocsFiltered);\n-\n-        if (!otherCollection.isEmpty()) {\n-            caseData.put(collection, otherCollection);\n-        }\n+        uploadedDocuments.removeAll(filteredDocuments);\n     }\n }"
  },
  {
    "sha": "3117a4bf792a7f78b7f30df690aedc256d259848",
    "filename": "src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsServiceTest.java",
    "status": "modified",
    "additions": 70,
    "deletions": 38,
    "changes": 108,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/16f7f3f23e0a147809071fc79885a1bfc0df9c63/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsServiceTest.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/16f7f3f23e0a147809071fc79885a1bfc0df9c63/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/UploadContestedCaseDocumentsServiceTest.java?ref=16f7f3f23e0a147809071fc79885a1bfc0df9c63",
    "patch": "@@ -17,9 +17,8 @@\n import java.util.List;\n import java.util.Map;\n \n-import static org.hamcrest.Matchers.hasSize;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.when;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APPLICANT_CONFIDENTIAL_DOCS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APPLICANT_CORRESPONDENCE_COLLECTION;\n@@ -37,6 +36,7 @@\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APP_QUESTIONNAIRES_ANSWERS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.APP_STATEMENTS_EXHIBITS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.CONTESTED_UPLOADED_DOCUMENTS;\n+import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.HEARING_BUNDLES_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESPONDENT_CONFIDENTIAL_DOCS_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESPONDENT_CORRESPONDENCE_COLLECTION;\n import static uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CCDConfigConstant.RESPONDENT_EVIDENCE_COLLECTION;\n@@ -85,7 +85,7 @@ public void applicantCorrespondenceDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APPLICANT_CORRESPONDENCE_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APPLICANT_CORRESPONDENCE_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -100,7 +100,7 @@ public void applicantFrFormsDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APPLICANT_FR_FORM_COLLECTION), hasSize(5));\n+        assertThat(getDocumentCollection(caseData, APPLICANT_FR_FORM_COLLECTION)).hasSize(5);\n     }\n \n     @Test\n@@ -124,7 +124,7 @@ public void applicantEvidenceDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APPLICANT_EVIDENCE_COLLECTION), hasSize(14));\n+        assertThat(getDocumentCollection(caseData, APPLICANT_EVIDENCE_COLLECTION)).hasSize(14);\n     }\n \n     @Test\n@@ -135,7 +135,7 @@ public void applicantTrialBundleDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APPLICANT_TRIAL_BUNDLE_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APPLICANT_TRIAL_BUNDLE_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -146,7 +146,7 @@ public void applicantConfidentialDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APPLICANT_CONFIDENTIAL_DOCS_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APPLICANT_CONFIDENTIAL_DOCS_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -157,7 +157,7 @@ public void respondentCorrespondenceDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESPONDENT_CORRESPONDENCE_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, RESPONDENT_CORRESPONDENCE_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -172,7 +172,7 @@ public void respondentFrFormsDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESPONDENT_FR_FORM_COLLECTION), hasSize(5));\n+        assertThat(getDocumentCollection(caseData, RESPONDENT_FR_FORM_COLLECTION)).hasSize(5);\n     }\n \n     @Test\n@@ -196,7 +196,7 @@ public void respondentEvidenceDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESPONDENT_EVIDENCE_COLLECTION), hasSize(14));\n+        assertThat(getDocumentCollection(caseData, RESPONDENT_EVIDENCE_COLLECTION)).hasSize(14);\n     }\n \n     @Test\n@@ -207,7 +207,7 @@ public void respondentTrialBundleDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESPONDENT_TRIAL_BUNDLE_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, RESPONDENT_TRIAL_BUNDLE_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -218,19 +218,26 @@ public void respondentConfidentialDocumentsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESPONDENT_CONFIDENTIAL_DOCS_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, RESPONDENT_CONFIDENTIAL_DOCS_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n     public void appHearingBundlesFiltered() {\n         when(featureToggleService.isRespondentJourneyEnabled()).thenReturn(true);\n-        uploadDocumentList.add(createContestedUploadDocumentItem(\"Trial Bundle\", \"applicant\", \"no\", null, null));\n+        ContestedUploadedDocumentData applicantPartyIsConfidential = createContestedUploadDocumentItem(\n+            \"Trial Bundle\", \"applicant\", \"yes\", null, null\n+        );\n+        ContestedUploadedDocumentData applicantPartyNotConfidential = createContestedUploadDocumentItem(\n+            \"Trial Bundle\", \"applicant\", \"no\", null, null\n+        );\n+        uploadDocumentList.add(applicantPartyIsConfidential);\n+        uploadDocumentList.add(applicantPartyNotConfidential);\n \n         caseDetails.getData().put(CONTESTED_UPLOADED_DOCUMENTS, uploadDocumentList);\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_HEARING_BUNDLES_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APP_HEARING_BUNDLES_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -242,7 +249,7 @@ public void appFormEExhibitsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_FORM_E_EXHIBITS_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APP_FORM_E_EXHIBITS_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -256,7 +263,7 @@ public void appChronologiesStatementsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_CHRONOLOGIES_STATEMENTS_COLLECTION), hasSize(3));\n+        assertThat(getDocumentCollection(caseData, APP_CHRONOLOGIES_STATEMENTS_COLLECTION)).hasSize(3);\n     }\n \n     @Test\n@@ -269,7 +276,7 @@ public void appQuestionnairesAnswersFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_QUESTIONNAIRES_ANSWERS_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, APP_QUESTIONNAIRES_ANSWERS_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -282,7 +289,7 @@ public void appStatementsExhibitsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_STATEMENTS_EXHIBITS_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, APP_STATEMENTS_EXHIBITS_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -296,7 +303,7 @@ public void appCaseSummariesFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_CASE_SUMMARIES_COLLECTION), hasSize(3));\n+        assertThat(getDocumentCollection(caseData, APP_CASE_SUMMARIES_COLLECTION)).hasSize(3);\n     }\n \n     @Test\n@@ -308,7 +315,7 @@ public void appFormsHFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_FORMS_H_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APP_FORMS_H_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -320,7 +327,7 @@ public void appExpertEvidenceFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_EXPERT_EVIDENCE_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, APP_EXPERT_EVIDENCE_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -333,7 +340,7 @@ public void appCorrespondenceDocsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_CORRESPONDENCE_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, APP_CORRESPONDENCE_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -349,19 +356,44 @@ public void appOtherDocsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_OTHER_COLLECTION), hasSize(5));\n+        assertThat(getDocumentCollection(caseData, APP_OTHER_COLLECTION)).hasSize(5);\n+    }\n+\n+    @Test\n+    public void noPartyHearingBundlesFiltered() {\n+        when(featureToggleService.isRespondentJourneyEnabled()).thenReturn(true);\n+        ContestedUploadedDocumentData noParty = createContestedUploadDocumentItem(\"Trial Bundle\", null, null, null, null);\n+        ContestedUploadedDocumentData noPartyIsConfidential = createContestedUploadDocumentItem(\"Trial Bundle\", null, \"yes\", null, null);\n+        ContestedUploadedDocumentData noPartyNotConfidential = createContestedUploadDocumentItem(\"Trial Bundle\", null, \"no\", null, null);\n+\n+        uploadDocumentList.add(noParty);\n+        uploadDocumentList.add(noPartyIsConfidential);\n+        uploadDocumentList.add(noPartyNotConfidential);\n+\n+        caseDetails.getData().put(CONTESTED_UPLOADED_DOCUMENTS, uploadDocumentList);\n+\n+        service.filterDocumentsToRelevantParty(caseData);\n+\n+        assertThat(getDocumentCollection(caseData, HEARING_BUNDLES_COLLECTION)).hasSize(3);\n     }\n \n     @Test\n     public void respHearingBundlesFiltered() {\n         when(featureToggleService.isRespondentJourneyEnabled()).thenReturn(true);\n-        uploadDocumentList.add(createContestedUploadDocumentItem(\"Trial Bundle\", \"respondent\", \"no\", null, null));\n+        ContestedUploadedDocumentData respondentPartyIsConfidential = createContestedUploadDocumentItem(\n+            \"Trial Bundle\", \"respondent\", \"yes\", null, null\n+        );\n+        ContestedUploadedDocumentData respondentPartyNotConfidential = createContestedUploadDocumentItem(\n+            \"Trial Bundle\", \"respondent\", \"no\", null, null\n+        );\n+        uploadDocumentList.add(respondentPartyIsConfidential);\n+        uploadDocumentList.add(respondentPartyNotConfidential);\n \n         caseDetails.getData().put(CONTESTED_UPLOADED_DOCUMENTS, uploadDocumentList);\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_HEARING_BUNDLES_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, RESP_HEARING_BUNDLES_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -373,7 +405,7 @@ public void respFormEExhibitsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_FORM_E_EXHIBITS_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, RESP_FORM_E_EXHIBITS_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -387,7 +419,7 @@ public void respChronologiesStatementsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_CHRONOLOGIES_STATEMENTS_COLLECTION), hasSize(3));\n+        assertThat(getDocumentCollection(caseData, RESP_CHRONOLOGIES_STATEMENTS_COLLECTION)).hasSize(3);\n     }\n \n     @Test\n@@ -400,7 +432,7 @@ public void respQuestionnairesAnswersFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_QUESTIONNAIRES_ANSWERS_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, RESP_QUESTIONNAIRES_ANSWERS_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -413,7 +445,7 @@ public void respStatementsExhibitsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_STATEMENTS_EXHIBITS_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, RESP_STATEMENTS_EXHIBITS_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -427,7 +459,7 @@ public void respCaseSummariesFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_CASE_SUMMARIES_COLLECTION), hasSize(3));\n+        assertThat(getDocumentCollection(caseData, RESP_CASE_SUMMARIES_COLLECTION)).hasSize(3);\n     }\n \n     @Test\n@@ -439,7 +471,7 @@ public void respFormsHFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_FORM_H_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, RESP_FORM_H_COLLECTION)).hasSize(1);\n     }\n \n     @Test\n@@ -451,7 +483,7 @@ public void respExpertEvidenceFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_EXPERT_EVIDENCE_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, RESP_EXPERT_EVIDENCE_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -464,7 +496,7 @@ public void respCorrespondenceDocsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_CORRESPONDENCE_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, RESP_CORRESPONDENCE_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -480,7 +512,7 @@ public void respOtherDocsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, RESP_OTHER_COLLECTION), hasSize(5));\n+        assertThat(getDocumentCollection(caseData, RESP_OTHER_COLLECTION)).hasSize(5);\n     }\n \n     @Test\n@@ -495,7 +527,7 @@ public void documentsAreNotFilteredWithoutDocTypeOrPartySpecified() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, CONTESTED_UPLOADED_DOCUMENTS), hasSize(3));\n+        assertThat(getDocumentCollection(caseData, CONTESTED_UPLOADED_DOCUMENTS)).hasSize(3);\n     }\n \n     @Test\n@@ -512,8 +544,8 @@ public void otherDocumentTypeIsFiltered() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_OTHER_COLLECTION), hasSize(3));\n-        assertThat(getDocumentCollection(caseData, APPLICANT_CONFIDENTIAL_DOCS_COLLECTION), hasSize(2));\n+        assertThat(getDocumentCollection(caseData, APP_OTHER_COLLECTION)).hasSize(3);\n+        assertThat(getDocumentCollection(caseData, APPLICANT_CONFIDENTIAL_DOCS_COLLECTION)).hasSize(2);\n     }\n \n     @Test\n@@ -523,7 +555,7 @@ public void documentsUploadedDoNotFilterToRespondentUnlessSelected() {\n \n         service.filterDocumentsToRelevantParty(caseData);\n \n-        assertThat(getDocumentCollection(caseData, APP_CORRESPONDENCE_COLLECTION), hasSize(1));\n+        assertThat(getDocumentCollection(caseData, APP_CORRESPONDENCE_COLLECTION)).hasSize(1);\n \n         assertNull(getDocumentCollection(caseData, RESP_HEARING_BUNDLES_COLLECTION));\n         assertNull(getDocumentCollection(caseData, RESP_FORM_E_EXHIBITS_COLLECTION));"
  }
]
