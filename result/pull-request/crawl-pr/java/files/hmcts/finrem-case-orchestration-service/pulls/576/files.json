[
  {
    "sha": "f51565c50ed2637901d69deea9f5607bee3abf64",
    "filename": "src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedController.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedController.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedController.java?ref=8da732dd00dcfeb6bb29254bf1168ca7744c92e9",
    "patch": "@@ -19,6 +19,7 @@\n import uk.gov.hmcts.reform.ccd.client.model.AboutToStartOrSubmitCallbackResponse;\n import uk.gov.hmcts.reform.ccd.client.model.CallbackRequest;\n import uk.gov.hmcts.reform.ccd.client.model.CaseDetails;\n+import uk.gov.hmcts.reform.finrem.caseorchestration.helper.DocumentHelper;\n import uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.ApprovedOrder;\n import uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CaseDocument;\n import uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CollectionElement;\n@@ -56,6 +57,7 @@\n     private final GenericDocumentService genericDocumentService;\n     private final ConsentOrderPrintService consentOrderPrintService;\n     private final NotificationService notificationService;\n+    private final DocumentHelper documentHelper;\n     private final ObjectMapper mapper;\n     private final FeatureToggleService featureToggleService;\n \n@@ -140,11 +142,10 @@\n     }\n \n     private void generateAndPrepareDocuments(String authToken, CaseDetails caseDetails) {\n-        log.info(\"Generating and preparing documents for latest consent order\");\n+        log.info(\"Generating and preparing documents for latest consent order, case {}\", caseDetails.getId());\n \n         Map<String, Object> caseData = caseDetails.getData();\n         CaseDocument latestConsentOrder = getLatestConsentOrder(caseData);\n-        List<PensionCollectionData> pensionDocs = getPensionDocuments(caseData);\n \n         CaseDocument approvedConsentOrderLetter = consentOrderApprovedDocumentService.generateApprovedConsentOrderLetter(caseDetails, authToken);\n         CaseDocument consentOrderAnnexStamped = genericDocumentService.annexStampDocument(latestConsentOrder, authToken);\n@@ -155,11 +156,12 @@ private void generateAndPrepareDocuments(String authToken, CaseDetails caseDetai\n \n         ApprovedOrder approvedOrder = approvedOrderBuilder.build();\n \n-        if (!isEmpty(pensionDocs)) {\n+        if (!documentHelper.getPensionDocumentsData(caseData).isEmpty()) {\n             log.info(\"Pension Documents not empty for case - stamping Pension Documents and adding to approvedOrder for case {}\",\n                 caseDetails.getId());\n \n-            List<PensionCollectionData> stampedPensionDocs = consentOrderApprovedDocumentService.stampPensionDocuments(pensionDocs, authToken);\n+            List<PensionCollectionData> stampedPensionDocs = consentOrderApprovedDocumentService.stampPensionDocuments(\n+                getPensionDocuments(caseData), authToken);\n             log.info(\"Generated StampedPensionDocs = {} for case {}\", stampedPensionDocs, caseDetails.getId());\n             approvedOrder.setPensionDocuments(stampedPensionDocs);\n         }\n@@ -172,7 +174,7 @@ private void generateAndPrepareDocuments(String authToken, CaseDetails caseDetai\n \n         log.info(\"Successfully generated documents for 'Consent Order Approved' for case {}\", caseDetails.getId());\n \n-        if (isEmpty(pensionDocs)) {\n+        if (documentHelper.getPensionDocumentsData(caseData).isEmpty()) {\n             log.info(\"Case {} has no pension documents, updating status to {} and sending for bulk print\",\n                 caseDetails.getId(),\n                 CONSENT_ORDER_MADE.toString());"
  },
  {
    "sha": "4789b26357d197c77fb6223df65a13721b4387a1",
    "filename": "src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/BulkPrintService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/BulkPrintService.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/BulkPrintService.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/BulkPrintService.java?ref=8da732dd00dcfeb6bb29254bf1168ca7744c92e9",
    "patch": "@@ -61,7 +61,8 @@ private UUID bulkPrintDocuments(Long caseId, String letterType, List<BulkPrintDo\n                 .bulkPrintDocuments(documents)\n                 .build());\n \n-        log.info(\"Letter ID {} for {} document(s) of type {} sent to bulk print: {}\", letterId, documents.size(), letterType, documents);\n+        log.info(\"Case {} Letter ID {} for {} document(s) of type {} sent to bulk print: {}\", caseId, letterId, documents.size(), letterType,\n+            documents);\n \n         return letterId;\n     }"
  },
  {
    "sha": "56065fcb3c33a7d3fb3710d12f3968e9522ff1dd",
    "filename": "src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentService.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentService.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentService.java?ref=8da732dd00dcfeb6bb29254bf1168ca7744c92e9",
    "patch": "@@ -80,7 +80,8 @@ public CaseDocument generateApprovedConsentOrderCoverLetter(CaseDetails caseDeta\n \n     public List<PensionCollectionData> stampPensionDocuments(List<PensionCollectionData> pensionList, String authToken) {\n         return pensionList.stream()\n-            .map(data -> stampPensionDocuments(data, authToken)).collect(toList());\n+            .filter(pensionCollectionData -> pensionCollectionData.getTypedCaseDocument().getPensionDocument() != null)\n+            .map(pensionCollectionData -> stampPensionDocuments(pensionCollectionData, authToken)).collect(toList());\n     }\n \n     private PensionCollectionData stampPensionDocuments(PensionCollectionData pensionDocument, String authToken) {\n@@ -92,7 +93,7 @@ private PensionCollectionData stampPensionDocuments(PensionCollectionData pensio\n     }\n \n     public List<BulkPrintDocument> prepareApplicantLetterPack(CaseDetails caseDetails, String authorisationToken) {\n-        log.info(\"Sending Approved Consent Order to applicant / solicitor for Bulk Print\");\n+        log.info(\"Sending Approved Consent Order to applicant / solicitor for Bulk Print, case {}\", caseDetails.getId());\n         Map<String, Object> caseData = caseDetails.getData();\n \n         List<BulkPrintDocument> bulkPrintDocuments = new ArrayList<>();\n@@ -195,7 +196,7 @@ private CaseDetails prepareCaseDetailsCopyForDocumentGeneratorWithContestedField\n             .orElse(new ArrayList<>());\n \n         if (!approvedOrderCollectionData.isEmpty()) {\n-            log.info(\"Extracting '{}' from case data for bulk print: {}\", approvedOrderCollectionFieldName, data);\n+            log.info(\"Extracting '{}' from case data for bulk print, case {}\", approvedOrderCollectionFieldName, caseDetails.getId());\n             Map<String, Object> lastApprovedOrder = (Map<String, Object>)(approvedOrderCollectionData.get(approvedOrderCollectionData.size() - 1)\n                 .get(VALUE));\n             documentHelper.getDocumentLinkAsCaseDocument(lastApprovedOrder, ORDER_LETTER).ifPresent(documents::add);\n@@ -205,7 +206,8 @@ private CaseDetails prepareCaseDetailsCopyForDocumentGeneratorWithContestedField\n                 PENSION_DOCUMENTS,\n                 \"uploadedDocument\"));\n         } else {\n-            log.info(\"Failed to extract '{}' from case data for bulk print as document list was empty.\", approvedOrderCollectionFieldName);\n+            log.info(\"Failed to extract '{}' from case data for bulk print as document list was empty, case {}\",\n+                approvedOrderCollectionFieldName, caseDetails.getId());\n         }\n \n         return documents;"
  },
  {
    "sha": "e28dc0bedea642660c77a707e1787618e1903720",
    "filename": "src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderPrintService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderPrintService.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderPrintService.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/main/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderPrintService.java?ref=8da732dd00dcfeb6bb29254bf1168ca7744c92e9",
    "patch": "@@ -48,7 +48,7 @@ public void sendConsentOrderToBulkPrint(CaseDetails caseDetails, String authoris\n             generateCoversheetForRespondentAndSendOrders(caseDetails, authorisationToken);\n         }\n \n-        log.info(\"Bulk print is successful\");\n+        log.info(\"Bulk print is successful, case {}\", caseDetails.getId());\n     }\n \n     private void generateCoversheetForRespondentAndSendOrders(CaseDetails caseDetails, String authorisationToken) {\n@@ -65,7 +65,8 @@ private void generateCoversheetForRespondentAndSendOrders(CaseDetails caseDetail\n             caseData.put(BULK_PRINT_LETTER_ID_RES, respondentLetterId);\n         }\n \n-        log.info(\"Generated Respondent CoverSheet for bulk print. coversheet: {}, letterId : {}\", respondentCoverSheet, respondentLetterId);\n+        log.info(\"Generated Respondent CoverSheet for bulk print, case {}. coversheet: {}, letterId : {}\", caseDetails.getId(),\n+            respondentCoverSheet, respondentLetterId);\n     }\n \n     private UUID printApplicantConsentOrderApprovedDocuments(CaseDetails caseDetails, String authorisationToken) {\n@@ -85,7 +86,7 @@ private UUID printApplicantConsentOrderNotApprovedDocuments(CaseDetails caseDeta\n     }\n \n     private UUID sendConsentOrderForBulkPrintRespondent(CaseDocument coverSheet, CaseDetails caseDetails, String authorisationToken) {\n-        log.info(\"Sending order documents to recipient / solicitor for Bulk Print\");\n+        log.info(\"Sending order documents to recipient / solicitor for Bulk Print, case {}\", caseDetails.getId());\n \n         List<BulkPrintDocument> bulkPrintDocuments = new ArrayList<>();\n         bulkPrintDocuments.add(documentHelper.getCaseDocumentAsBulkPrintDocument(coverSheet));"
  },
  {
    "sha": "f0ec8dcb82f8c0b078335a65f8398aa0844e7488",
    "filename": "src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedControllerTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 3,
    "changes": 11,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedControllerTest.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/controllers/ConsentOrderApprovedControllerTest.java?ref=8da732dd00dcfeb6bb29254bf1168ca7744c92e9",
    "patch": "@@ -7,6 +7,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.test.web.servlet.ResultActions;\n import uk.gov.hmcts.reform.ccd.client.model.CaseDetails;\n+import uk.gov.hmcts.reform.finrem.caseorchestration.helper.DocumentHelper;\n import uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.CaseDocument;\n import uk.gov.hmcts.reform.finrem.caseorchestration.model.ccd.PensionCollectionData;\n import uk.gov.hmcts.reform.finrem.caseorchestration.service.ConsentOrderApprovedDocumentService;\n@@ -51,6 +52,7 @@\n     @MockBean private GenericDocumentService genericDocumentService;\n     @MockBean private ConsentOrderPrintService consentOrderPrintService;\n     @MockBean private NotificationService notificationService;\n+    @MockBean private DocumentHelper documentHelper;\n     @MockBean private FeatureToggleService featureToggleService;\n \n     public String consentOrderApprovedEndpoint() {\n@@ -114,6 +116,7 @@ public void consentOrderApprovedSuccess() throws Exception {\n         whenAnnexStampingDocument().thenReturn(caseDocument());\n         whenStampingDocument().thenReturn(caseDocument());\n         whenStampingPensionDocuments().thenReturn(singletonList(pensionDocumentData()));\n+        when(documentHelper.getPensionDocumentsData(any())).thenReturn(singletonList(caseDocument()));\n \n         ResultActions result = mvc.perform(post(consentOrderApprovedEndpoint())\n             .content(requestContent.toString())\n@@ -134,6 +137,7 @@ public void consentOrderApprovedSuccessForPaperApplication() throws Exception {\n         whenAnnexStampingDocument().thenReturn(caseDocument());\n         whenStampingDocument().thenReturn(caseDocument());\n         whenStampingPensionDocuments().thenReturn(singletonList(pensionDocumentData()));\n+        when(documentHelper.getPensionDocumentsData(any())).thenReturn(singletonList(caseDocument()));\n \n         ResultActions result = mvc.perform(post(consentOrderApprovedEndpoint())\n             .content(requestContent.toString())\n@@ -233,6 +237,7 @@ public void shouldNotTriggerConsentOrderApprovedNotificationLetterIfIsNotPaperAp\n         whenAnnexStampingDocument().thenReturn(caseDocument());\n         whenStampingDocument().thenReturn(caseDocument());\n         whenStampingPensionDocuments().thenReturn(singletonList(pensionDocumentData()));\n+        when(documentHelper.getPensionDocumentsData(any())).thenReturn(singletonList(caseDocument()));\n \n         ResultActions result = mvc.perform(post(consentOrderApprovedEndpoint())\n             .content(requestContent.toString())\n@@ -270,7 +275,7 @@ public void consentInContestedConsentOrderApprovedShouldProcessPensionDocs() thr\n             .contentType(MediaType.APPLICATION_JSON_VALUE))\n             .andExpect(status().isOk());\n \n-        verify(consentOrderApprovedDocumentService, times(1)).stampAndPopulateContestedConsentApprovedOrderCollection(any(), eq(AUTH_TOKEN));\n+        verify(consentOrderApprovedDocumentService).stampAndPopulateContestedConsentApprovedOrderCollection(any(), eq(AUTH_TOKEN));\n     }\n \n     @Test\n@@ -284,7 +289,7 @@ public void consentInContestedSendOrderShouldPrintDocsWhenNotApproved() throws E\n             .andExpect(status().isOk());\n \n         verify(consentOrderApprovedDocumentService, never()).generateApprovedConsentOrderLetter(any(), eq(AUTH_TOKEN));\n-        verify(consentOrderPrintService, times(1)).sendConsentOrderToBulkPrint(any(), eq(AUTH_TOKEN));\n+        verify(consentOrderPrintService).sendConsentOrderToBulkPrint(any(), eq(AUTH_TOKEN));\n     }\n \n     @Test\n@@ -299,7 +304,7 @@ public void consentInContestedSendOrderShouldPrintDocsWhenApproved() throws Exce\n             .contentType(MediaType.APPLICATION_JSON_VALUE));\n \n         result.andExpect(status().isOk());\n-        verify(consentOrderPrintService, times(1)).sendConsentOrderToBulkPrint(any(), eq(AUTH_TOKEN));\n+        verify(consentOrderPrintService).sendConsentOrderToBulkPrint(any(), eq(AUTH_TOKEN));\n     }\n \n     private OngoingStubbing<CaseDocument> whenServiceGeneratesDocument() {"
  },
  {
    "sha": "29431eaf2446fd4bbbde00903c1afbbdf8b344f2",
    "filename": "src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentServiceTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/hmcts/finrem-case-orchestration-service/blob/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentServiceTest.java",
    "raw_url": "https://github.com/hmcts/finrem-case-orchestration-service/raw/8da732dd00dcfeb6bb29254bf1168ca7744c92e9/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/finrem-case-orchestration-service/contents/src/test/java/uk/gov/hmcts/reform/finrem/caseorchestration/service/ConsentOrderApprovedDocumentServiceTest.java?ref=8da732dd00dcfeb6bb29254bf1168ca7744c92e9",
    "patch": "@@ -187,6 +187,22 @@ public void shouldStampPensionDocuments() {\n         verify(documentClientMock, times(2)).stampDocument(any(), anyString());\n     }\n \n+    @Test\n+    public void givenNullDocumentInPensionDocuments_whenStampingDocuments_thenTheNullValueIsIgnored() {\n+        Mockito.reset(documentClientMock);\n+        when(documentClientMock.stampDocument(any(), anyString())).thenReturn(document());\n+\n+        PensionCollectionData pensionCollectionDataWithNullDocument = pensionDocumentData();\n+        pensionCollectionDataWithNullDocument.getTypedCaseDocument().setPensionDocument(null);\n+        List<PensionCollectionData> pensionDocuments = asList(pensionDocumentData(), pensionCollectionDataWithNullDocument);\n+\n+        List<PensionCollectionData> stampPensionDocuments = consentOrderApprovedDocumentService.stampPensionDocuments(pensionDocuments, AUTH_TOKEN);\n+\n+        assertThat(stampPensionDocuments, hasSize(1));\n+        stampPensionDocuments.forEach(data -> assertCaseDocument(data.getTypedCaseDocument().getPensionDocument()));\n+        verify(documentClientMock, times(1)).stampDocument(any(), anyString());\n+    }\n+\n     @Test\n     public void whenPreparingApplicantLetterPack() throws Exception {\n         CaseDetails caseDetailsTemp = documentHelper.deepCopy(caseDetails, CaseDetails.class);"
  }
]
