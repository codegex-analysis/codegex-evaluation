[
  {
    "sha": "78faf15721fb125b8b4d1aa3bdee3749a137dc90",
    "filename": "src/functionalTest/java/uk/gov/hmcts/reform/wacaseeventhandler/controllers/CaseEventHandlerControllerTest.java",
    "status": "modified",
    "additions": 101,
    "deletions": 44,
    "changes": 145,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/functionalTest/java/uk/gov/hmcts/reform/wacaseeventhandler/controllers/CaseEventHandlerControllerTest.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/functionalTest/java/uk/gov/hmcts/reform/wacaseeventhandler/controllers/CaseEventHandlerControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/functionalTest/java/uk/gov/hmcts/reform/wacaseeventhandler/controllers/CaseEventHandlerControllerTest.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -5,14 +5,20 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import uk.gov.hmcts.reform.wacaseeventhandler.SpringBootFunctionalBaseTest;\n import uk.gov.hmcts.reform.wacaseeventhandler.domain.handlers.common.EventInformation;\n+import uk.gov.hmcts.reform.wacaseeventhandler.services.DueDateService;\n \n import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n import java.util.UUID;\n import java.util.concurrent.atomic.AtomicReference;\n \n@@ -22,13 +28,25 @@\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static uk.gov.hmcts.reform.wacaseeventhandler.CreatorObjectMapper.asJsonString;\n \n+\n @Slf4j\n public class CaseEventHandlerControllerTest extends SpringBootFunctionalBaseTest {\n \n     private String taskToTearDown;\n+    private ZonedDateTime eventTimeStamp;\n+\n+    @Autowired\n+    private DueDateService dueDateService;\n+\n+    @Before\n+    public void setup() {\n+        eventTimeStamp = ZonedDateTime.now().minusDays(1);\n+    }\n \n     @Test\n     @SuppressWarnings(\"checkstyle:VariableDeclarationUsageDistance\")\n@@ -46,6 +64,10 @@ public void given_initiate_tasks_with_time_extension_category_then_cancel_task()\n             taskIdDmnColumn\n         );\n \n+        // test for workingDaysAllowed  = 2\n+        Response responseTaskDetails = findTaskDetailsForGivenTaskId(task1Id);\n+        assertDelayDuration(responseTaskDetails);\n+\n         // create task2\n         String caseIdForTask2 = UUID.randomUUID().toString();\n         String task2Id = initiateTaskForGivenId(\n@@ -55,6 +77,10 @@ public void given_initiate_tasks_with_time_extension_category_then_cancel_task()\n             taskIdDmnColumn\n         );\n \n+        // test for workingDaysAllowed  = 2\n+        responseTaskDetails = findTaskDetailsForGivenTaskId(task2Id);\n+        assertDelayDuration(responseTaskDetails);\n+\n         // Then cancel the task1\n         String eventToCancelTask = \"submitReasonsForAppeal\";\n         String previousStateToCancelTask = \"awaitingReasonsForAppeal\";\n@@ -100,6 +126,7 @@ public void given_initiate_tasks_with_follow_up_overdue_category_then_cancel_tas\n             caseIdForTask1,\n             \"provideRespondentEvidence\"\n         );\n+\n         taskToTearDown = taskCreatedAsResultOfTheMultipleDmnRule;\n     }\n \n@@ -126,6 +153,10 @@ public void given_initiate_tasks_with_follow_up_overdue_category_then_cancel_all\n             \"provideRespondentEvidence\"\n         );\n \n+        // test for workingDaysAllowed  = 0\n+        Response responseTaskDetails = findTaskDetailsForGivenTaskId(task2Id);\n+        assertDelayDuration(responseTaskDetails);\n+\n         // Then cancel all tasks\n         String eventToCancelTask = \"removeAppealFromOnline\";\n         sendMessage(caseIdForTask1, eventToCancelTask, \"\", \"\", false);\n@@ -144,7 +175,6 @@ public void given_initiate_tasks_with_follow_up_overdue_category_then_cancel_all\n     @Test\n     @SuppressWarnings(\"checkstyle:VariableDeclarationUsageDistance\")\n     public void given_initiate_tasks_with_different_categories_then_cancel_all_tasks() {\n-\n         String caseIdForTask1 = UUID.randomUUID().toString();\n         String task1IdDmnColumn = \"reviewTheAppeal\";\n \n@@ -215,7 +245,6 @@ public void given_initiated_tasks_with_delayTimer_toFuture_with_followup_overdue\n     @SuppressWarnings(\"checkstyle:VariableDeclarationUsageDistance\")\n     public void given_initiate_tasks_with_follow_up_overdue_category_then_warn_task_with_no() {\n         // Given multiple existing tasks\n-\n         String caseIdForTask1 = UUID.randomUUID().toString();\n         String taskIdDmnColumn = \"allocateFtpaToJudge\";\n         String task1Id = initiateTaskForGivenId(\n@@ -258,10 +287,15 @@ public void given_caseId_with_multiple_tasks_and_same_category_when_warning_rais\n             .extract()\n             .path(\"[0].id\");\n \n+        // test for workingDaysAllowed  = 5\n+        Response responseTaskDetails = findTaskDetailsForGivenTaskId(task1Id);\n+        assertDelayDuration(responseTaskDetails);\n+\n         // initiate task2, category (Case progression)\n         sendMessage(caseIdForTask1, \"applyForFTPARespondent\", null,\n                     null, false);\n         waitSeconds(5);\n+\n         response = findTaskProcessVariables(\n             caseIdForTask1, taskIdDmnColumn, 2);\n \n@@ -340,9 +374,9 @@ public void given_caseId_and_multiple_tasks_and_different_ctg_when_warning_raise\n     @Test\n     public void given_initiated_tasks_with_delayTimer_toFuture_and_without_followup_overdue_then_complete_task() {\n         String caseIdForTask2 = UUID.randomUUID().toString();\n-        final String taskId = initiateTaskForGivenId(caseIdForTask2, \"submitAppeal\",\n-            \"\", \"appealSubmitted\",\n-            true, \"reviewTheAppeal\");\n+        final String taskId = initiateTaskForGivenId(caseIdForTask2, \"makeAnApplication\",\n+            \"\", \"\",\n+            true, \"processApplication\");\n \n         // add tasks to tear down.\n         taskToTearDown = taskId;\n@@ -510,14 +544,27 @@ private void assertTaskHasWarnings(String caseId, String taskId, boolean hasWarn\n \n     private void sendMessage(String caseId, String event, String previousStateId,\n                              String newStateId, boolean taskDelay) {\n-        LocalDateTime delayTimer = LocalDateTime.now();\n \n         if (taskDelay) {\n-            delayTimer = LocalDateTime.now().plusSeconds(2);\n+            eventTimeStamp = ZonedDateTime.now().plusSeconds(2);\n         }\n+        EventInformation eventInformation = getEventInformation(\n+            caseId, event, previousStateId, newStateId, eventTimeStamp\n+        );\n+\n+        if (publisher != null) {\n+            publishMessageToTopic(eventInformation);\n+            waitSeconds(2);\n+        } else {\n+            callRestEndpoint(eventInformation);\n+        }\n+    }\n+\n+    private EventInformation getEventInformation(String caseId, String event, String previousStateId,\n+                                                 String newStateId, ZonedDateTime zonedDateTime) {\n         EventInformation eventInformation = EventInformation.builder()\n             .eventInstanceId(UUID.randomUUID().toString())\n-            .eventTimeStamp(delayTimer)\n+            .eventTimeStamp(zonedDateTime.toLocalDateTime())\n             .caseId(caseId)\n             .jurisdictionId(\"IA\")\n             .caseTypeId(\"Asylum\")\n@@ -526,13 +573,7 @@ private void sendMessage(String caseId, String event, String previousStateId,\n             .previousStateId(previousStateId)\n             .userId(\"some user Id\")\n             .build();\n-\n-        if (publisher != null) {\n-            publishMessageToTopic(eventInformation);\n-            waitSeconds(2);\n-        } else {\n-            callRestEndpoint(eventInformation);\n-        }\n+        return eventInformation;\n     }\n \n     private void callRestEndpoint(EventInformation eventInformation) {\n@@ -571,7 +612,7 @@ private String initiateTaskForGivenId(String caseId, String eventId,\n         return findTaskForGivenCaseId(caseId, taskIdDmnColumn);\n     }\n \n-    private AtomicReference<Response> findTaskProcessVariablesWithIdDmnColumn(\n+    private AtomicReference<Response> findTaskProcessVariables(\n         String caseId, String taskIdDmnColumn, int tasks\n     ) {\n \n@@ -587,7 +628,7 @@ private String initiateTaskForGivenId(String caseId, String eventId,\n                         .contentType(APPLICATION_JSON_VALUE)\n                         .baseUri(camundaUrl)\n                         .basePath(\"/task\")\n-                        .param(\"processVariables\", \"caseId_eq_\" + caseId + \",taskId_eq_\" + taskIdDmnColumn)\n+                        .param(\"processVariables\", \"caseId_eq_\" + caseId)\n                         .when()\n                         .get();\n \n@@ -601,34 +642,16 @@ private String initiateTaskForGivenId(String caseId, String eventId,\n         return response;\n     }\n \n-    private AtomicReference<Response> findTaskProcessVariables(\n-        String caseId, String taskIdDmnColumn, int tasks\n-    ) {\n-\n-        log.info(String.format(\"Finding task for caseId : %s\", caseId));\n-        AtomicReference<Response> response = new AtomicReference<>();\n-        await().ignoreException(AssertionError.class)\n-            .pollInterval(1000, MILLISECONDS)\n-            .atMost(60, SECONDS)\n-            .until(\n-                () -> {\n-                    final Response result = given()\n-                        .header(SERVICE_AUTHORIZATION, s2sToken)\n-                        .contentType(APPLICATION_JSON_VALUE)\n-                        .baseUri(camundaUrl)\n-                        .basePath(\"/task\")\n-                        .param(\"processVariables\", \"caseId_eq_\" + caseId)\n-                        .when()\n-                        .get();\n+    private Response findTaskDetailsForGivenTaskId(String taskId) {\n+        log.info(\"Attempting to retrieve task details with taskId = {}\", taskId);\n \n-                    result\n-                        .then()\n-                        .body(\"size()\", is(tasks));\n-                    response.set(result);\n-                    return true;\n-                });\n-\n-        return response;\n+        return given()\n+            .header(SERVICE_AUTHORIZATION, s2sToken)\n+            .contentType(APPLICATION_JSON_VALUE)\n+            .baseUri(camundaUrl)\n+            .basePath(\"/task/\" + taskId + \"/variables\")\n+            .when()\n+            .get();\n     }\n \n     private String findTaskForGivenCaseId(String caseId, String taskIdDmnColumn) {\n@@ -683,6 +706,40 @@ private void tearDownMultipleTasks(List<String> tasks, String status) {\n         tasks.forEach(task -> completeTask(task, status));\n     }\n \n+    private void assertDelayDuration(Response result) {\n+        Map<String, Object> mapJson = result.jsonPath().get(\"dueDate\");\n+        final String dueDateVal = (String) mapJson.get(\"value\");\n+        final ZonedDateTime dueDateTime = ZonedDateTime.parse(dueDateVal);\n+\n+        mapJson = result.jsonPath().get(\"delayUntil\");\n+        final String delayUntil = (String) mapJson.get(\"value\");\n+        final LocalDateTime delayUntilDateTime = LocalDateTime.parse(\n+            delayUntil,\n+            DateTimeFormatter.ISO_LOCAL_DATE_TIME\n+        );\n+\n+        mapJson = result.jsonPath().get(\"workingDaysAllowed\");\n+        int workingDaysLocal = (Integer) mapJson.get(\"value\");\n+\n+        final ZonedDateTime expectedDueDate = dueDateService.calculateDueDate(eventTimeStamp, workingDaysLocal);\n+\n+        assertAll(\n+            () -> assertEquals(expectedDueDate.getYear(), dueDateTime.getYear()),\n+            () -> assertEquals(expectedDueDate.getMonthValue(), dueDateTime.getMonthValue()),\n+            () -> assertEquals(expectedDueDate.getDayOfMonth(), dueDateTime.getDayOfMonth()),\n+            () -> assertEquals(16, dueDateTime.getHour()),\n+            () -> assertEquals(0, dueDateTime.getMinute()),\n+            () -> assertEquals(0, dueDateTime.getSecond()),\n+            () -> assertEquals(0, dueDateTime.getNano()),\n+            () -> assertEquals(eventTimeStamp.getYear(), delayUntilDateTime.getYear()),\n+            () -> assertEquals(eventTimeStamp.getMonthValue(), delayUntilDateTime.getMonthValue()),\n+            () -> assertEquals(eventTimeStamp.getDayOfMonth(), delayUntilDateTime.getDayOfMonth()),\n+            () -> assertEquals(eventTimeStamp.getHour(), delayUntilDateTime.getHour()),\n+            () -> assertEquals(eventTimeStamp.getMinute(), delayUntilDateTime.getMinute()),\n+            () -> assertEquals(eventTimeStamp.getSecond(), delayUntilDateTime.getSecond()),\n+            () -> assertEquals(eventTimeStamp.getNano(), delayUntilDateTime.getNano())\n+        );\n+    }\n \n     @After\n     public void cleanUpTask() {"
  },
  {
    "sha": "605dbf001aaba87eb24d90774a1f62e9a22af50e",
    "filename": "src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/Application.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/Application.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/Application.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/Application.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -3,10 +3,6 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cloud.openfeign.EnableFeignClients;\n-import org.springframework.context.annotation.Bean;\n-import uk.gov.hmcts.reform.wacaseeventhandler.services.DateService;\n-\n-import java.time.ZonedDateTime;\n \n @SpringBootApplication\n @EnableFeignClients\n@@ -17,8 +13,4 @@ public static void main(final String[] args) {\n         SpringApplication.run(Application.class, args);\n     }\n \n-    @Bean\n-    public DateService dateService() {\n-        return ZonedDateTime::now;\n-    }\n }"
  },
  {
    "sha": "82849b67bb8d25e83c59746a0dbefd6f383f78da",
    "filename": "src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/domain/handlers/initiatetask/InitiateEvaluateResponse.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/domain/handlers/initiatetask/InitiateEvaluateResponse.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/domain/handlers/initiatetask/InitiateEvaluateResponse.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/domain/handlers/initiatetask/InitiateEvaluateResponse.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -15,19 +15,22 @@\n public final class InitiateEvaluateResponse extends EvaluateResponse {\n     private final DmnStringValue taskId;\n     private final DmnStringValue group;\n+    private final DmnIntegerValue delayDuration;\n     private final DmnIntegerValue workingDaysAllowed;\n     private final DmnStringValue name;\n     private final DmnStringValue taskCategory;\n \n     @JsonCreator\n     public InitiateEvaluateResponse(@JsonProperty(\"taskId\") DmnStringValue taskId,\n                                     @JsonProperty(\"group\") DmnStringValue group,\n+                                    @JsonProperty(\"delayDuration\") DmnIntegerValue delayDuration,\n                                     @JsonProperty(\"workingDaysAllowed\") DmnIntegerValue workingDaysAllowed,\n                                     @JsonProperty(\"name\") DmnStringValue name,\n                                     @JsonProperty(\"taskCategory\") DmnStringValue taskCategory) {\n         super();\n         this.taskId = taskId;\n         this.group = group;\n+        this.delayDuration = delayDuration;\n         this.workingDaysAllowed = workingDaysAllowed;\n         this.name = name;\n         this.taskCategory = taskCategory;\n@@ -41,6 +44,10 @@ public DmnStringValue getGroup() {\n         return group;\n     }\n \n+    public DmnIntegerValue getDelayDuration() {\n+        return delayDuration;\n+    }\n+\n     public DmnIntegerValue getWorkingDaysAllowed() {\n         return workingDaysAllowed;\n     }"
  },
  {
    "sha": "3fa6b58ee3c8ae997be1b8f096b34aa4f8455f51",
    "filename": "src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/handlers/InitiationTaskHandler.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/handlers/InitiationTaskHandler.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/handlers/InitiationTaskHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/handlers/InitiationTaskHandler.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -98,8 +98,13 @@ private InitiateProcessVariables buildProcessVariables(\n     ) {\n         String eventInfoDt = isoDateFormatter.format(eventInformation.getEventTimeStamp());\n \n-        ZonedDateTime delayUntil = dueDateService.calculateDueDate(\n+        ZonedDateTime delayUntil = dueDateService.calculateDelayUntil(\n             ZonedDateTime.parse(eventInfoDt),\n+            cannotBeNull(initiateEvaluateResponse.getDelayDuration()).getValue()\n+        );\n+\n+        ZonedDateTime dueDate = dueDateService.calculateDueDate(\n+            delayUntil,\n             cannotBeNull(initiateEvaluateResponse.getWorkingDaysAllowed()).getValue()\n         );\n \n@@ -111,7 +116,7 @@ private InitiateProcessVariables buildProcessVariables(\n         return InitiateProcessVariables.builder()\n             .idempotencyKey(new DmnStringValue(idempotencyKey))\n             .caseTypeId(new DmnStringValue(eventInformation.getCaseTypeId()))\n-            .dueDate(new DmnStringValue(isoDateFormatter.format(eventInformation.getEventTimeStamp())))\n+            .dueDate(new DmnStringValue(isoDateFormatter.format(dueDate.toLocalDateTime())))\n             .workingDaysAllowed(cannotBeNull(initiateEvaluateResponse.getWorkingDaysAllowed()))\n             .group(initiateEvaluateResponse.getGroup())\n             .jurisdiction(new DmnStringValue(eventInformation.getJurisdictionId()))"
  },
  {
    "sha": "0ff63d5c8df4b9b5fdfd8933811e1705c88f4f02",
    "filename": "src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DateService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/b8cea29348a7bdb4967d7fd0210458801555bd16/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DateService.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/b8cea29348a7bdb4967d7fd0210458801555bd16/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DateService.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DateService.java?ref=b8cea29348a7bdb4967d7fd0210458801555bd16",
    "patch": "@@ -1,7 +0,0 @@\n-package uk.gov.hmcts.reform.wacaseeventhandler.services;\n-\n-import java.time.ZonedDateTime;\n-\n-public interface DateService {\n-    ZonedDateTime now();\n-}"
  },
  {
    "sha": "5a12edd2cc1a6cf4104875028ae7bb617fd81ca4",
    "filename": "src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateService.java",
    "status": "modified",
    "additions": 19,
    "deletions": 17,
    "changes": 36,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateService.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateService.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateService.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -4,41 +4,37 @@\n import uk.gov.hmcts.reform.wacaseeventhandler.services.holidaydates.HolidayService;\n \n import java.time.DayOfWeek;\n+import java.time.LocalTime;\n import java.time.ZonedDateTime;\n \n @Component\n public class DueDateService {\n \n-    private final DateService dateService;\n     private final HolidayService holidayService;\n \n-    public DueDateService(DateService dateService, HolidayService holidayService) {\n-        this.dateService = dateService;\n+    public DueDateService(HolidayService holidayService) {\n         this.holidayService = holidayService;\n     }\n \n-    public ZonedDateTime calculateDueDate(ZonedDateTime dueDate, int workingDaysAllowed) {\n-        if (dueDate != null) {\n-            return dueDate;\n-        }\n-        if (workingDaysAllowed == 0) {\n-            throw new IllegalStateException(\n-                \"Should either have a due date or have got the working days allowed for task\"\n-            );\n+    public ZonedDateTime calculateDelayUntil(ZonedDateTime eventDateTime, int delayDuration) {\n+        if (delayDuration == 0) {\n+            return eventDateTime;\n         }\n-        return addWorkingDays(workingDaysAllowed);\n+        final ZonedDateTime fourPmDateTime = resetTo4PmTime(eventDateTime);\n+\n+        return fourPmDateTime.plusDays(delayDuration);\n     }\n \n-    public ZonedDateTime addWorkingDays(int numberOfDays) {\n-        return addWorkingDays(dateService.now(), numberOfDays);\n+    public ZonedDateTime calculateDueDate(ZonedDateTime delayUntil, int workingDaysAllowed) {\n+        return addWorkingDays(resetTo4PmTime(delayUntil), workingDaysAllowed);\n     }\n \n-    private ZonedDateTime addWorkingDays(ZonedDateTime startDate, int numberOfDays) {\n+    private ZonedDateTime addWorkingDays(ZonedDateTime dueDate, int numberOfDays) {\n         if (numberOfDays == 0) {\n-            return startDate;\n+            return dueDate;\n         }\n \n-        ZonedDateTime newDate = startDate.plusDays(1);\n+        ZonedDateTime newDate = dueDate.plusDays(1);\n         if (isWeekend(newDate) || holidayService.isHoliday(newDate)) {\n             return addWorkingDays(newDate, numberOfDays);\n         } else {\n@@ -49,4 +45,10 @@ private ZonedDateTime addWorkingDays(ZonedDateTime startDate, int numberOfDays)\n     private boolean isWeekend(ZonedDateTime date) {\n         return date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY;\n     }\n+\n+    private ZonedDateTime resetTo4PmTime(ZonedDateTime eventDateTime) {\n+        final LocalTime fourPmTime = LocalTime.of(16, 0, 0, 0);\n+\n+        return ZonedDateTime.of(eventDateTime.toLocalDate(), fourPmTime, eventDateTime.getZone());\n+    }\n }"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/initiatetask/InitiationTaskHandler.java",
    "status": "removed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/b8cea29348a7bdb4967d7fd0210458801555bd16/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/initiatetask/InitiationTaskHandler.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/b8cea29348a7bdb4967d7fd0210458801555bd16/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/initiatetask/InitiationTaskHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/main/java/uk/gov/hmcts/reform/wacaseeventhandler/services/initiatetask/InitiationTaskHandler.java?ref=b8cea29348a7bdb4967d7fd0210458801555bd16"
  },
  {
    "sha": "cc29a733582396a2c498b7eb12712bbddcae8a1a",
    "filename": "src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateServiceTest.java",
    "status": "modified",
    "additions": 54,
    "deletions": 33,
    "changes": 87,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateServiceTest.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/DueDateServiceTest.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -2,106 +2,127 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import uk.gov.hmcts.reform.wacaseeventhandler.services.holidaydates.HolidayService;\n \n+import java.time.LocalTime;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n @SuppressWarnings(\"PMD.JUnitAssertionsShouldIncludeMessage\")\n class DueDateServiceTest {\n \n-    private FixedDateService dateService;\n     private DueDateService underTest;\n     private HolidayService holidayService;\n \n     @BeforeEach\n     void setUp() {\n-        dateService = new FixedDateService();\n         holidayService = mock(HolidayService.class);\n-        underTest = new DueDateService(dateService, holidayService);\n-    }\n-\n-    @Test\n-    void haveToSetEitherADueDateOrHaveWorkingDays() {\n-        assertThrows(IllegalStateException.class, () -> underTest.calculateDueDate(\n-            null,\n-            0\n-        ));\n+        underTest = new DueDateService(holidayService);\n     }\n \n     @Test\n     void ifADueDateIsAlreadySetDoNotCalculateANewOne() {\n         ZonedDateTime providedDueDate = ZonedDateTime.now();\n+        final LocalTime fourPmTime = LocalTime.of(16, 0);\n+\n+        final ZonedDateTime zonedDateTimeAt4Pm = providedDueDate.of(\n+            providedDueDate.toLocalDate(),\n+            fourPmTime,\n+            providedDueDate.getZone()\n+        );\n+\n         ZonedDateTime calculatedDueDate = underTest.calculateDueDate(\n-            providedDueDate, 0\n+            zonedDateTimeAt4Pm, 0\n         );\n \n-        assertThat(calculatedDueDate, is(providedDueDate));\n+        assertThat(calculatedDueDate, is(zonedDateTimeAt4Pm));\n     }\n \n     @Test\n     void calculateDueDateAllWorkingDays() {\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 1, 1, 2, 3, 4, ZoneId.systemDefault()),\n-                         2, ZonedDateTime.of(2020, 9, 1, 1, 2, 3, 4, ZoneId.systemDefault()).plusDays(2)\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 1, 16, 0, 0, 0, ZoneId.systemDefault()),\n+                         2, ZonedDateTime.of(2020, 9, 1, 16, 0, 0, 0, ZoneId.systemDefault()).plusDays(2)\n         );\n     }\n \n     @Test\n     void calculateDueDateWhenFallInAWeekend() {\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 1, 2, 3, 4, ZoneId.systemDefault()), 2,\n-                         ZonedDateTime.of(2020, 9, 7, 1, 2, 3, 4, ZoneId.systemDefault())\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 16, 0, 0, 0, ZoneId.systemDefault()), 2,\n+                         ZonedDateTime.of(2020, 9, 7, 16, 0, 0, 0, ZoneId.systemDefault())\n         );\n     }\n \n     @Test\n     void calculateDueDateWhenStraddlesAWeekend() {\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 1, 2, 3, 4, ZoneId.systemDefault()), 4,\n-                         ZonedDateTime.of(2020, 9, 9, 1, 2, 3, 4, ZoneId.systemDefault())\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 16, 0, 0, 0, ZoneId.systemDefault()), 4,\n+                         ZonedDateTime.of(2020, 9, 9, 16, 0, 0, 0, ZoneId.systemDefault())\n         );\n     }\n \n     @Test\n     void calculateDueDateWhichStraddlesMultipleWeekends() {\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 1, 2, 3, 4, ZoneId.systemDefault()), 10,\n-                         ZonedDateTime.of(2020, 9, 17, 1, 2, 3, 4, ZoneId.systemDefault())\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 16, 0, 0, 0, ZoneId.systemDefault()), 10,\n+                         ZonedDateTime.of(2020, 9, 17, 16, 0, 0, 0, ZoneId.systemDefault())\n         );\n     }\n \n     @Test\n     void calculateDueDateWhichFallsOnAWeekend() {\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 1, 2, 3, 4, ZoneId.systemDefault()), 10,\n-                         ZonedDateTime.of(2020, 9, 17, 1, 2, 3, 4, ZoneId.systemDefault())\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 3, 16, 0, 0, 0, ZoneId.systemDefault()), 10,\n+                         ZonedDateTime.of(2020, 9, 17, 16, 0, 0, 0, ZoneId.systemDefault())\n         );\n     }\n \n     @Test\n     void calculateDueDateWhichFallsOnAHoliday() {\n-        when(holidayService.isHoliday(ZonedDateTime.of(2020, 9, 3, 1, 2, 3, 4, ZoneId.systemDefault())))\n+        when(holidayService.isHoliday(ZonedDateTime.of(2020, 9, 3, 16, 0, 0, 0, ZoneId.systemDefault())))\n             .thenReturn(true);\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 1, 1, 2, 3, 4, ZoneId.systemDefault()), 2,\n-                         ZonedDateTime.of(2020, 9, 4, 1, 2, 3, 4, ZoneId.systemDefault())\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 1, 16, 0, 0, 0, ZoneId.systemDefault()), 2,\n+                         ZonedDateTime.of(2020, 9, 4, 16, 0, 0, 0, ZoneId.systemDefault())\n         );\n     }\n \n     @Test\n     void calculateDueDateWhichStraddlesAHoliday() {\n-        when(holidayService.isHoliday(ZonedDateTime.of(2020, 9, 1, 1, 2, 3, 4, ZoneId.systemDefault()).plusDays(1)))\n+        when(holidayService.isHoliday(ZonedDateTime.of(2020, 9, 1, 16, 0, 0, 0, ZoneId.systemDefault()).plusDays(1)))\n             .thenReturn(true);\n-        checkWorkingDays(ZonedDateTime.of(2020, 9, 1, 1, 2, 3, 4, ZoneId.systemDefault()), 2,\n-                         ZonedDateTime.of(2020, 9, 4, 1, 2, 3, 4, ZoneId.systemDefault())\n+        checkWorkingDays(ZonedDateTime.of(2020, 9, 1, 16, 0, 0, 0, ZoneId.systemDefault()), 2,\n+                         ZonedDateTime.of(2020, 9, 4, 16, 0, 0, 0, ZoneId.systemDefault())\n         );\n     }\n \n-    private void checkWorkingDays(ZonedDateTime startDay, int leadTimeDays, ZonedDateTime expectedDueDate) {\n-        dateService.setCurrentDateTime(startDay);\n+    @ParameterizedTest\n+    @ValueSource(ints = {00, 11, 16, 17}) // hours\n+    void calculateDelayUntilWithDelayDuration(int hour) {\n+        final ZonedDateTime actual = ZonedDateTime.of(2021, 3, 1, hour, 0, 0, 0, ZoneId.systemDefault());\n+        final ZonedDateTime expected = ZonedDateTime.of(2021, 3, 2, 16, 0, 0, 0, ZoneId.systemDefault());\n+\n+        final ZonedDateTime zonedDateTime = underTest.calculateDelayUntil(actual, 1);\n \n-        ZonedDateTime calculatedDueDate = underTest.calculateDueDate(null, leadTimeDays);\n+        assertEquals(expected, zonedDateTime);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {00, 11, 16, 17}) // hours\n+    void calculateDelayUntilWithOutDelayDuration(int hour) {\n+        final ZonedDateTime actual = ZonedDateTime.of(2021, 3, 1, hour, 0, 0, 0, ZoneId.systemDefault());\n+        final ZonedDateTime expected = ZonedDateTime.of(2021, 3, 2, hour, 0, 0, 0, ZoneId.systemDefault());\n+\n+        final ZonedDateTime zonedDateTime = underTest.calculateDelayUntil(actual, 0);\n+\n+        assertEquals(actual, zonedDateTime);\n+    }\n+\n+    private void checkWorkingDays(ZonedDateTime startDay, int leadTimeDays, ZonedDateTime expectedDueDate) {\n+        ZonedDateTime calculatedDueDate = underTest.calculateDueDate(startDay, leadTimeDays);\n \n         assertThat(calculatedDueDate, is(expectedDueDate));\n     }"
  },
  {
    "sha": "8f1e68e9cd617a27e2bd9bea24b7dae86ff09613",
    "filename": "src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/FixedDateService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/b8cea29348a7bdb4967d7fd0210458801555bd16/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/FixedDateService.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/b8cea29348a7bdb4967d7fd0210458801555bd16/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/FixedDateService.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/FixedDateService.java?ref=b8cea29348a7bdb4967d7fd0210458801555bd16",
    "patch": "@@ -1,17 +0,0 @@\n-package uk.gov.hmcts.reform.wacaseeventhandler.services;\n-\n-import java.time.ZonedDateTime;\n-\n-public class FixedDateService implements DateService {\n-\n-    private ZonedDateTime currentDateTime;\n-\n-    public void setCurrentDateTime(ZonedDateTime currentDateTime) {\n-        this.currentDateTime = currentDateTime;\n-    }\n-\n-    @Override\n-    public ZonedDateTime now() {\n-        return currentDateTime;\n-    }\n-}"
  },
  {
    "sha": "c3ad391c944bd475522bd93566e2f80f8abbd7fd",
    "filename": "src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/InitiationTaskHandlerTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/hmcts/wa-case-event-handler/blob/30565da95e7c5140afb8736596101ff40c0626bb/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/InitiationTaskHandlerTest.java",
    "raw_url": "https://github.com/hmcts/wa-case-event-handler/raw/30565da95e7c5140afb8736596101ff40c0626bb/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/InitiationTaskHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/wa-case-event-handler/contents/src/test/java/uk/gov/hmcts/reform/wacaseeventhandler/services/InitiationTaskHandlerTest.java?ref=30565da95e7c5140afb8736596101ff40c0626bb",
    "patch": "@@ -39,6 +39,7 @@\n \n     public static final String INPUT_DATE = \"2020-12-08T15:53:36.530377\";\n     public static final String EXPECTED_DATE = \"2020-12-08T15:53:36.530377Z\";\n+    public static final String EXPECTED_DATE_AT_4PM = \"2020-12-08T16:00:00.000000Z\";\n     private static final String DMN_NAME = \"wa-task-initiation-ia-asylum\";\n     public static final String TENANT_ID = \"ia\";\n     @Mock\n@@ -96,10 +97,15 @@ void handle() {\n         Mockito.when(isoDateFormatter.format(eq(LocalDateTime.parse(INPUT_DATE))))\n             .thenReturn(EXPECTED_DATE);\n \n+        final ZonedDateTime zonedDateTime = ZonedDateTime.parse(EXPECTED_DATE_AT_4PM);\n+        Mockito.when(isoDateFormatter.format(zonedDateTime.toLocalDateTime()))\n+            .thenReturn(EXPECTED_DATE_AT_4PM);\n+\n         InitiateEvaluateResponse initiateTaskResponse1 = InitiateEvaluateResponse.builder()\n             .group(new DmnStringValue(\"TCW\"))\n             .name(new DmnStringValue(\"Process Application\"))\n             .taskId(new DmnStringValue(\"processApplication\"))\n+            .delayDuration(new DmnIntegerValue(0))\n             .workingDaysAllowed(new DmnIntegerValue(0))\n             .taskCategory(new DmnStringValue(\"Case progression\"))\n             .build();\n@@ -108,6 +114,7 @@ void handle() {\n             .group(new DmnStringValue(\"external\"))\n             .name(new DmnStringValue(\"Decide On Time Extension\"))\n             .taskId(new DmnStringValue(\"decideOnTimeExtension\"))\n+            .delayDuration(new DmnIntegerValue(0))\n             .workingDaysAllowed(new DmnIntegerValue(0))\n             .taskCategory(new DmnStringValue(\"Time extension\"))\n             .build();\n@@ -120,8 +127,11 @@ void handle() {\n \n         List<InitiateEvaluateResponse> results = List.of(initiateTaskResponse1, initiateTaskResponse2);\n \n-        when(dueDateService.calculateDueDate(ZonedDateTime.parse(EXPECTED_DATE), 0))\n-            .thenReturn(ZonedDateTime.parse(EXPECTED_DATE));\n+        when(dueDateService.calculateDelayUntil(ZonedDateTime.parse(EXPECTED_DATE), 0))\n+            .thenReturn(ZonedDateTime.parse(EXPECTED_DATE_AT_4PM));\n+\n+        when(dueDateService.calculateDueDate(ZonedDateTime.parse(EXPECTED_DATE_AT_4PM), 0))\n+            .thenReturn(ZonedDateTime.parse(EXPECTED_DATE_AT_4PM));\n \n         handlerService.handle(results, eventInformation);\n \n@@ -161,9 +171,9 @@ void handle() {\n             .taskId(new DmnStringValue(taskId))\n             .taskCategory(new DmnStringValue(taskCategory))\n             .caseId(new DmnStringValue(\"some case reference\"))\n-            .dueDate(new DmnStringValue(EXPECTED_DATE))\n+            .dueDate(new DmnStringValue(EXPECTED_DATE_AT_4PM))\n             .workingDaysAllowed(new DmnIntegerValue(0))\n-            .delayUntil(new DmnStringValue(ZonedDateTime.parse(EXPECTED_DATE)\n+            .delayUntil(new DmnStringValue(ZonedDateTime.parse(EXPECTED_DATE_AT_4PM)\n                                                .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)))\n             .build();\n "
  }
]
