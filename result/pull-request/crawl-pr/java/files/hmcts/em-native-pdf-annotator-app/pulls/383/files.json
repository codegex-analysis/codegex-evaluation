[
  {
    "sha": "47d7961b2e09786ad042a51284374db8c38ecb1d",
    "filename": "src/aat/java/uk/gov/hmcts/reform/em/npa/functional/MarkUpScenarios.java",
    "status": "modified",
    "additions": 314,
    "deletions": 76,
    "changes": 390,
    "blob_url": "https://github.com/hmcts/em-native-pdf-annotator-app/blob/bb64f8024fbc8261adfc2521ee66ff1b6d0e6070/src/aat/java/uk/gov/hmcts/reform/em/npa/functional/MarkUpScenarios.java",
    "raw_url": "https://github.com/hmcts/em-native-pdf-annotator-app/raw/bb64f8024fbc8261adfc2521ee66ff1b6d0e6070/src/aat/java/uk/gov/hmcts/reform/em/npa/functional/MarkUpScenarios.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-native-pdf-annotator-app/contents/src/aat/java/uk/gov/hmcts/reform/em/npa/functional/MarkUpScenarios.java?ref=bb64f8024fbc8261adfc2521ee66ff1b6d0e6070",
    "patch": "@@ -1,11 +1,14 @@\n package uk.gov.hmcts.reform.em.npa.functional;\n \n+import io.restassured.response.ValidatableResponse;\n import io.restassured.specification.RequestSpecification;\n import net.serenitybdd.junit.spring.integration.SpringIntegrationSerenityRunner;\n import net.thucydides.core.annotations.WithTag;\n import net.thucydides.core.annotations.WithTags;\n+import org.hamcrest.Matchers;\n+import org.jetbrains.annotations.NotNull;\n+import org.json.JSONArray;\n import org.json.JSONObject;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -15,16 +18,13 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.TestPropertySource;\n import uk.gov.hmcts.reform.em.EmTestConfig;\n-import uk.gov.hmcts.reform.em.npa.service.dto.redaction.RectangleDTO;\n-import uk.gov.hmcts.reform.em.npa.service.dto.redaction.RedactionDTO;\n import uk.gov.hmcts.reform.em.npa.testutil.TestUtil;\n import uk.gov.hmcts.reform.em.test.retry.RetryRule;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n import java.util.UUID;\n \n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n \n @SpringBootTest(classes = {TestUtil.class, EmTestConfig.class})\n@@ -42,115 +42,353 @@\n     @Rule\n     public RetryRule retryRule = new RetryRule(3);\n \n-    private static final UUID docId = UUID.randomUUID();\n-    private static final UUID redactionId = UUID.randomUUID();\n-\n     private RequestSpecification request;\n+    private RequestSpecification unAuthenticatedRequest;\n \n     @Before\n     public void setupRequestSpecification() {\n         request = testUtil\n                 .authRequest()\n                 .baseUri(testUrl)\n                 .contentType(APPLICATION_JSON_VALUE);\n+\n+        unAuthenticatedRequest = testUtil\n+                .unauthenticatedRequest()\n+                .baseUri(testUrl)\n+                .contentType(APPLICATION_JSON_VALUE);\n     }\n \n     @Test\n-    public void testCreateMarkUp() {\n-\n-        RedactionDTO redactionDTO = testUtil.createRedactionDTO(docId, redactionId);\n-\n-        JSONObject jsonObject = new JSONObject(redactionDTO);\n+    public void shouldReturn201WhenCreateNewMarkUp() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+\n+        response\n+                .assertThat()\n+                .statusCode(201)\n+                .body(\"redactionId\", equalTo(redactionId))\n+                .body(\"documentId\", equalTo(documentId))\n+                .body(\"page\", equalTo(1))\n+                .body(\"rectangles\", Matchers.hasSize(1))\n+                .body(\"rectangles[0].x\", equalTo(1f))\n+                .body(\"rectangles[0].y\", equalTo(2f))\n+                .body(\"rectangles[0].width\", equalTo(10f))\n+                .body(\"rectangles[0].height\", equalTo(11f))\n+                .header(\"Location\", equalTo(\"/api/markups/\" + redactionId))\n+                .log().all();\n+    }\n \n-        RedactionDTO response =\n-                request\n-                        .body(jsonObject)\n-                        .post(\"/api/markups\")\n-                        .then()\n-                        .statusCode(201)\n-                        .extract()\n-                        .body()\n-                        .as(RedactionDTO.class);\n+    @Test\n+    public void shouldReturn422WhenCreateNewMarkUpWithoutMandatoryFields() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final JSONObject jsonObject = createMarkUpPayload(redactionId, documentId, rectangleId);\n \n+        jsonObject.remove(\"redactionId\");\n+        jsonObject.remove(\"documentId\");\n+        jsonObject.remove(\"page\");\n \n-        Assert.assertEquals(redactionDTO.getDocumentId(), response.getDocumentId());\n-        Assert.assertEquals(redactionDTO.getRedactionId(), response.getRedactionId());\n-        Assert.assertEquals(redactionDTO.getRectangles().size(), response.getRectangles().size());\n+        request\n+                .body(jsonObject.toString())\n+                .post(\"/api/markups\")\n+                .then()\n+                .assertThat()\n+                .statusCode(422)\n+                .body(\"type\", equalTo(\"https://npa/problem/problem-with-message\"))\n+                .body(\"title\", equalTo(\"Unprocessable Entity\"))\n+                .body(\"detail\", notNullValue())\n+                .body(\"path\", equalTo(\"/api/markups\"))\n+                .body(\"message\", equalTo(\"error.http.422\"))\n+                .log().all();\n     }\n \n     @Test\n-    public void testGetAllDocumentMarkUps() {\n+    public void shouldReturn401WhenUnAuthenticatedUserCreateNewMarkUp() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final JSONObject jsonObject = createMarkUpPayload(redactionId, documentId, rectangleId);\n+\n+        unAuthenticatedRequest\n+                .body(jsonObject.toString())\n+                .post(\"/api/markups\")\n+                .then()\n+                .assertThat()\n+                .statusCode(401);\n+    }\n \n-        // First create Test data\n-        RedactionDTO redactionDTO = testUtil.createRedactionDTO(docId, redactionId);\n+    @Test\n+    public void shouldReturn200WhenGetMarkUpByDocumentId() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+        final String docId = extractJSONObjectFromResponse(response).getString(\"documentId\");\n \n-        JSONObject jsonObject = new JSONObject(redactionDTO);\n+        request\n+                .get(\"/api/markups/\" + docId)\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .body(\"size()\", Matchers.greaterThanOrEqualTo(1))\n+                .body(\"[0].redactionId\", equalTo(redactionId))\n+                .body(\"[0].documentId\", equalTo(documentId))\n+                .body(\"[0].page\", equalTo(1))\n+                .body(\"[0].rectangles\", Matchers.hasSize(1))\n+                .body(\"[0].rectangles[0].id\", equalTo(rectangleId))\n+                .body(\"[0].rectangles[0].x\", equalTo(1f))\n+                .body(\"[0].rectangles[0].y\", equalTo(2f))\n+                .body(\"[0].rectangles[0].width\", equalTo(10f))\n+                .body(\"[0].rectangles[0].height\", equalTo(11f))\n+                .log().all();\n+    }\n \n+    @Test\n+    public void shouldReturn404WhenGetMarkUpByNonExistentDocumentId() {\n+        final String documentId = UUID.randomUUID().toString();\n         request\n-                .body(jsonObject)\n-                .post(\"/api/markups\")\n+                .get(\"/api/markups/\" + documentId)\n                 .then()\n-                .statusCode(201);\n+                .assertThat()\n+                .statusCode(204) //FIXME: it should be 404\n+                .log().all();\n+    }\n+\n+    @Test\n+    public void shouldReturn401WhenUnAuthenticatedUserGetMarkUpByDocumentId() {\n+        final String documentId = UUID.randomUUID().toString();\n \n-        //Now test the GET using the above created Data\n-        Map<String, Integer> params = new HashMap<>();\n-        params.put(\"page\", 0);\n-        params.put(\"size\", 10);\n+        unAuthenticatedRequest\n+                .get(\"/api/markups/\" + documentId)\n+                .then()\n+                .assertThat()\n+                .statusCode(401)\n+                .log().all();\n+    }\n \n-        List<RedactionDTO> response =\n-                request\n-                        .params(params)\n-                        .get(\"/api/markups/\" + docId)\n-                        .then()\n-                        .statusCode(200)\n-                        .extract()\n-                        .response()\n-                        .jsonPath()\n-                        .getList(\".\", RedactionDTO.class);\n+    @Test\n+    public void shouldReturn200WhenUpdateMarkUp() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n \n-        Assert.assertNotNull(response);\n-        Assert.assertEquals(1, response.size());\n-        RedactionDTO responseDto = response.get(0);\n+        final JSONObject jsonObject = extractJSONObjectFromResponse(response);\n+        final String newRedactionId = UUID.randomUUID().toString();\n+        final String newDocumentId = UUID.randomUUID().toString();\n \n-        Assert.assertEquals(redactionDTO.getDocumentId(), responseDto.getDocumentId());\n-        Assert.assertEquals(redactionDTO.getRedactionId(), responseDto.getRedactionId());\n-        Assert.assertEquals(redactionDTO.getRectangles().size(), responseDto.getRectangles().size());\n+        jsonObject.put(\"redactionId\", newRedactionId);\n+        jsonObject.put(\"documentId\", newDocumentId);\n+        jsonObject.put(\"page\", 2);\n \n+        request\n+                .body(jsonObject.toString())\n+                .put(\"/api/markups\")\n+                .then()\n+                .assertThat()\n+                .statusCode(200)\n+                .body(\"redactionId\", equalTo(newRedactionId))\n+                .body(\"documentId\", equalTo(newDocumentId))\n+                .body(\"page\", equalTo(2))\n+                .body(\"rectangles\", Matchers.hasSize(1))\n+                .body(\"rectangles[0].x\", equalTo(1f))\n+                .body(\"rectangles[0].y\", equalTo(2f))\n+                .body(\"rectangles[0].width\", equalTo(10f))\n+                .body(\"rectangles[0].height\", equalTo(11f))\n+                .log().all();\n     }\n \n     @Test\n-    public void testUpdateMarkUp() {\n+    public void shouldReturn422WhenUpdateMarkUpWithoutMandatoryFields() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+        final JSONObject jsonObject = extractJSONObjectFromResponse(response);\n \n-        RedactionDTO redactionDTO = testUtil.createRedactionDTO(docId, redactionId);\n-        RectangleDTO rectangleDTO = redactionDTO.getRectangles().stream().findFirst().get();\n-        rectangleDTO.setHeight(100.0);\n-        rectangleDTO.setWidth(60.0);\n+        jsonObject.remove(\"redactionId\");\n+        jsonObject.remove(\"documentId\");\n+        jsonObject.remove(\"page\");\n \n-        JSONObject jsonObject = new JSONObject(redactionDTO);\n+        request\n+                .body(jsonObject.toString())\n+                .put(\"/api/markups\")\n+                .then()\n+                .assertThat()\n+                .statusCode(422)\n+                .body(\"type\", equalTo(\"https://npa/problem/problem-with-message\"))\n+                .body(\"title\", equalTo(\"Unprocessable Entity\"))\n+                .body(\"detail\", notNullValue())\n+                .body(\"path\", equalTo(\"/api/markups\"))\n+                .body(\"message\", equalTo(\"error.http.422\"))\n+                .log().all();\n+    }\n \n-        RedactionDTO response =\n-                request\n-                        .body(jsonObject)\n-                        .put(\"/api/markups\")\n-                        .then()\n-                        .statusCode(200)\n-                        .extract()\n-                        .body()\n-                        .as(RedactionDTO.class);\n+    @Test\n+    public void shouldReturn401WhenUnAuthenticatedUserUpdateMarkUp() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+\n+        final JSONObject jsonObject = extractJSONObjectFromResponse(response);\n+        final String newRedactionId = UUID.randomUUID().toString();\n+        final String newDocumentId = UUID.randomUUID().toString();\n+\n+        jsonObject.put(\"redactionId\", newRedactionId);\n+        jsonObject.put(\"documentId\", newDocumentId);\n+        jsonObject.put(\"page\", 2);\n+\n+        unAuthenticatedRequest\n+                .body(jsonObject.toString())\n+                .put(\"/api/markups\")\n+                .then()\n+                .assertThat()\n+                .statusCode(401)\n+                .log().all();\n+    }\n \n-        RectangleDTO resRectangleDTO = response.getRectangles().stream().findFirst().get();\n-        Assert.assertEquals(redactionDTO.getDocumentId(), response.getDocumentId());\n-        Assert.assertEquals(redactionDTO.getRedactionId(), response.getRedactionId());\n-        Assert.assertEquals(Double.valueOf(100.0), resRectangleDTO.getHeight());\n-        Assert.assertEquals(Double.valueOf(60.0), resRectangleDTO.getWidth());\n+    @Test\n+    public void shouldReturn204WhenDeleteMarkUpByDocumentId() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+        final String docId = extractJSONObjectFromResponse(response).getString(\"documentId\");\n+        final ValidatableResponse deletedResponse = deleteMarkUpByDocumentId(docId);\n+\n+        deletedResponse\n+                .assertThat()\n+                .statusCode(200) //FIXME: it should be 204\n+                .log().all();\n+    }\n \n+    @Test\n+    public void shouldReturn404WhenDeleteMarkUpByNonExistentDocumentId() {\n+        final String nonExistentDocumentId = UUID.randomUUID().toString();\n+        final ValidatableResponse deletedResponse = deleteMarkUpByDocumentId(nonExistentDocumentId);\n+\n+        deletedResponse\n+                .assertThat()\n+                .statusCode(200) //FIXME: it should be 404\n+                .log().all();\n     }\n \n     @Test\n-    public void testDeleteMarkUp() {\n-        request\n+    public void shouldReturn401WhenUnAuthenticatedUserDeleteMarkUpByDocumentId() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+        final String docId = extractJSONObjectFromResponse(response).getString(\"documentId\");\n+\n+        unAuthenticatedRequest\n                 .delete(\"/api/markups/\" + docId)\n                 .then()\n-                .statusCode(200);\n+                .assertThat()\n+                .statusCode(401)\n+                .log().all();\n+    }\n+\n+    @Test\n+    public void shouldReturn204WhenDeleteMarkUpByDocumentIdAndRedactionId() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+        final JSONObject jsonObject = extractJSONObjectFromResponse(response);\n+        final String docId = jsonObject.getString(\"documentId\");\n+        final String redactId = jsonObject.getString(\"redactionId\");\n+        final ValidatableResponse deletedResponse = deleteMarkUpByDocumentIdAndRedactionId(docId, redactId);\n+\n+        deletedResponse\n+                .assertThat()\n+                .statusCode(200) //FIXME: it should be 204\n+                .log().all();\n+    }\n+\n+    @Test\n+    public void shouldReturn404WhenDeleteMarkUpByNonExistentRedactionId() {\n+        final String nonExistentRedactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final ValidatableResponse deletedResponse = deleteMarkUpByDocumentIdAndRedactionId(documentId, nonExistentRedactionId);\n+\n+        deletedResponse\n+                .statusCode(200) //FIXME: it should be 404\n+                .log().all();\n+    }\n+\n+    @Test\n+    public void shouldReturn401WhenUnAuthenticatedUserDeleteMarkUpByDocumentIdAndRedactionId() {\n+        final String redactionId = UUID.randomUUID().toString();\n+        final String documentId = UUID.randomUUID().toString();\n+        final String rectangleId = UUID.randomUUID().toString();\n+        final ValidatableResponse response = createMarkUp(redactionId, documentId, rectangleId);\n+        final JSONObject jsonObject = extractJSONObjectFromResponse(response);\n+        final String docId = jsonObject.getString(\"documentId\");\n+        final String redactId = jsonObject.getString(\"redactionId\");\n+\n+        unAuthenticatedRequest\n+                .delete(String.format(\"/api/markups/%s/%s\", docId, redactId))\n+                .then()\n+                .assertThat()\n+                .statusCode(401)\n+                .log().all();\n+    }\n+\n+    @NotNull\n+    private ValidatableResponse createMarkUp(final String redactionId, final String documentId, final String rectangleId) {\n+        final JSONObject jsonObject = createMarkUpPayload(redactionId, documentId, rectangleId);\n+\n+        return request\n+                .body(jsonObject.toString())\n+                .post(\"/api/markups\")\n+                .then()\n+                .assertThat()\n+                .statusCode(201);\n+    }\n+\n+    @NotNull\n+    private JSONObject createMarkUpPayload(final String redactionId, final String documentId, final String rectangleId) {\n+        final JSONObject markup = new JSONObject();\n+        markup.put(\"redactionId\", redactionId);\n+        markup.put(\"documentId\", documentId);\n+        markup.put(\"page\", 1);\n+\n+        final JSONArray rectangles = new JSONArray();\n+        final JSONObject rectangle = new JSONObject();\n+        rectangle.put(\"id\", rectangleId);\n+        rectangle.put(\"x\", 1f);\n+        rectangle.put(\"y\", 2f);\n+        rectangle.put(\"width\", 10f);\n+        rectangle.put(\"height\", 11f);\n+        rectangles.put(0, rectangle);\n+        markup.put(\"rectangles\", rectangles);\n+\n+        return markup;\n+    }\n+\n+    @NotNull\n+    private ValidatableResponse deleteMarkUpByDocumentId(final String documentId) {\n+        return request\n+                .delete(\"/api/markups/\" + documentId)\n+                .then()\n+                .log().all();\n+    }\n+\n+    @NotNull\n+    private ValidatableResponse deleteMarkUpByDocumentIdAndRedactionId(final String documentId, final String redactionId) {\n+        return request\n+                .delete(String.format(\"/api/markups/%s/%s\", documentId, redactionId))\n+                .then()\n+                .log().all();\n+    }\n+\n+    @NotNull\n+    private JSONObject extractJSONObjectFromResponse(final ValidatableResponse response) {\n+        return response.extract().response().as(JSONObject.class);\n     }\n }"
  },
  {
    "sha": "7c91125ad15d6167395be7e39eec6855d9c3b1bb",
    "filename": "src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hmcts/em-native-pdf-annotator-app/blob/bb64f8024fbc8261adfc2521ee66ff1b6d0e6070/src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java",
    "raw_url": "https://github.com/hmcts/em-native-pdf-annotator-app/raw/bb64f8024fbc8261adfc2521ee66ff1b6d0e6070/src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-native-pdf-annotator-app/contents/src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java?ref=bb64f8024fbc8261adfc2521ee66ff1b6d0e6070",
    "patch": "@@ -198,6 +198,10 @@ public RequestSpecification authRequest() {\n                 .header(\"Authorization\", idamAuth);\n     }\n \n+    public RequestSpecification unauthenticatedRequest() {\n+        return SerenityRest.given();\n+    }\n+\n     public RequestSpecification s2sAuthRequest() {\n         return SerenityRest\n                 .given()"
  }
]
