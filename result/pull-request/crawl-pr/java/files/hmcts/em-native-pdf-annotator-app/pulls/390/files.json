[
  {
    "sha": "22095c1ab85c9eb59bbf4a7a7b67473cada38acb",
    "filename": "src/aat/java/uk/gov/hmcts/reform/em/npa/functional/RedactionScenarios.java",
    "status": "modified",
    "additions": 88,
    "deletions": 33,
    "changes": 121,
    "blob_url": "https://github.com/hmcts/em-native-pdf-annotator-app/blob/345f27847251d44d0e4bdd4ec4a41585d8e1ef27/src/aat/java/uk/gov/hmcts/reform/em/npa/functional/RedactionScenarios.java",
    "raw_url": "https://github.com/hmcts/em-native-pdf-annotator-app/raw/345f27847251d44d0e4bdd4ec4a41585d8e1ef27/src/aat/java/uk/gov/hmcts/reform/em/npa/functional/RedactionScenarios.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-native-pdf-annotator-app/contents/src/aat/java/uk/gov/hmcts/reform/em/npa/functional/RedactionScenarios.java?ref=345f27847251d44d0e4bdd4ec4a41585d8e1ef27",
    "patch": "@@ -23,6 +23,7 @@\n import java.util.Collections;\n import java.util.UUID;\n \n+import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n \n @SpringBootTest(classes = {TestUtil.class, EmTestConfig.class})\n@@ -40,83 +41,137 @@\n     @Rule\n     public RetryRule retryRule = new RetryRule(3);\n \n-    private static final UUID docId = UUID.randomUUID();\n+    private static final UUID documentId = UUID.randomUUID();\n     private static final UUID redactionId = UUID.randomUUID();\n-\n     private RequestSpecification request;\n+    private RequestSpecification unAuthenticatedRequest;\n \n     @Before\n     public void setupRequestSpecification() {\n         request = testUtil\n                 .authRequest()\n                 .baseUri(testUrl)\n                 .contentType(APPLICATION_JSON_VALUE);\n+\n+        unAuthenticatedRequest = testUtil\n+                .unauthenticatedRequest()\n+                .baseUri(testUrl)\n+                .contentType(APPLICATION_JSON_VALUE);\n     }\n \n-    private RedactionDTO createRedaction() {\n-        RedactionDTO redactionDTO = testUtil.createRedactionDTO(docId, redactionId);\n-        redactionDTO.setPage(1);\n+    @Test\n+    public void shouldReturn200WhenRedactedPdfDocument() {\n+        final String newDocId = testUtil.uploadPdfDocumentAndReturnUrl();\n+        final RedactionRequest redactionRequest = new RedactionRequest();\n+        redactionRequest.setDocumentId(UUID.fromString(newDocId.substring(newDocId.lastIndexOf('/') + 1)));\n+        redactionRequest.setRedactions(Arrays.asList(createRedaction(), createRedaction()));\n \n-        JSONObject jsonObject = new JSONObject(redactionDTO);\n+        final JSONObject jsonObject = new JSONObject(redactionRequest);\n \n-        return request\n+        request\n                 .body(jsonObject)\n-                .post(\"/api/markups\")\n+                .post(\"/api/redaction\")\n                 .then()\n-                .statusCode(201)\n-                .extract()\n-                .body()\n-                .as(RedactionDTO.class);\n+                .assertThat()\n+                .statusCode(200)\n+                .body(notNullValue());\n     }\n \n-    @Test\n-    public void testSaveRedactedPdfDocument() {\n-        String newDocId = testUtil.uploadPdfDocumentAndReturnUrl();\n \n-        RedactionRequest redactionRequest = new RedactionRequest();\n+    @Test\n+    public void shouldReturn200WhenRedactedImage() {\n+        final String newDocId = testUtil.uploadImageDocumentAndReturnUrl();\n+        final RedactionRequest redactionRequest = new RedactionRequest();\n         redactionRequest.setDocumentId(UUID.fromString(newDocId.substring(newDocId.lastIndexOf('/') + 1)));\n-        redactionRequest.setRedactions(Arrays.asList(createRedaction(), createRedaction()));\n+        redactionRequest.setRedactions(Collections.singletonList(createRedaction()));\n \n-        JSONObject jsonObject = new JSONObject(redactionRequest);\n+        final JSONObject jsonObject = new JSONObject(redactionRequest);\n \n         request\n                 .body(jsonObject)\n                 .post(\"/api/redaction\")\n                 .then()\n-                .statusCode(200);\n+                .assertThat()\n+                .statusCode(200)\n+                .body(notNullValue());\n     }\n \n     @Test\n-    public void testSaveRedactedImageDocument() {\n-        String newDocId = testUtil.uploadImageDocumentAndReturnUrl();\n-\n-        RedactionRequest redactionRequest = new RedactionRequest();\n+    public void shouldReturn400WhenRedactedRichTextDocument() {\n+        final String newDocId = testUtil.uploadRichTextDocumentAndReturnUrl();\n+        final RedactionRequest redactionRequest = new RedactionRequest();\n         redactionRequest.setDocumentId(UUID.fromString(newDocId.substring(newDocId.lastIndexOf('/') + 1)));\n-        redactionRequest.setRedactions(Collections.singletonList(createRedaction()));\n-\n-        JSONObject jsonObject = new JSONObject(redactionRequest);\n+        redactionRequest.setRedactions(Arrays.asList(createRedaction(), createRedaction()));\n+        final JSONObject jsonObject = new JSONObject(redactionRequest);\n \n         request\n                 .body(jsonObject)\n                 .post(\"/api/redaction\")\n                 .then()\n-                .statusCode(200);\n+                .statusCode(400);\n     }\n \n     @Test\n-    public void testFailedSaveRedactedRichTextDocument() {\n-        String newDocId = testUtil.uploadRichTextDocumentAndReturnUrl();\n-\n-        RedactionRequest redactionRequest = new RedactionRequest();\n+    public void shouldReturn400WhenRedactedFileNameIsMissing() {\n+        final String newDocId = testUtil.uploadRichTextDocumentAndReturnUrl();\n+        final RedactionRequest redactionRequest = new RedactionRequest();\n         redactionRequest.setDocumentId(UUID.fromString(newDocId.substring(newDocId.lastIndexOf('/') + 1)));\n         redactionRequest.setRedactions(Arrays.asList(createRedaction(), createRedaction()));\n-\n-        JSONObject jsonObject = new JSONObject(redactionRequest);\n+        final JSONObject jsonObject = new JSONObject(redactionRequest);\n \n         request\n                 .body(jsonObject)\n                 .post(\"/api/redaction\")\n                 .then()\n                 .statusCode(400);\n     }\n+\n+    @Test\n+    public void shouldReturn400WhenRedactedPdfDocumentWIthNonExistentDocumentId() {\n+        final UUID nonExistentDocId = UUID.randomUUID();\n+        final RedactionRequest redactionRequest = new RedactionRequest();\n+        redactionRequest.setDocumentId(nonExistentDocId);\n+        redactionRequest.setRedactions(Arrays.asList(createRedaction(), createRedaction()));\n+\n+        final JSONObject jsonObject = new JSONObject(redactionRequest);\n+\n+        request\n+                .body(jsonObject)\n+                .post(\"/api/redaction\")\n+                .then()\n+                .assertThat()\n+                .statusCode(400)\n+                .body(notNullValue());\n+    }\n+\n+    @Test\n+    public void shouldReturn401WhenRedactedPdfDocument() {\n+        final String newDocId = testUtil.uploadRichTextDocumentAndReturnUrl();\n+        final RedactionRequest redactionRequest = new RedactionRequest();\n+        redactionRequest.setDocumentId(UUID.fromString(newDocId.substring(newDocId.lastIndexOf('/') + 1)));\n+        redactionRequest.setRedactions(Arrays.asList(createRedaction(), createRedaction()));\n+        final JSONObject jsonObject = new JSONObject(redactionRequest);\n+\n+        unAuthenticatedRequest\n+                .body(jsonObject)\n+                .post(\"/api/redaction\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    private RedactionDTO createRedaction() {\n+        final RedactionDTO redactionDTO = testUtil.createRedactionDTO(documentId, redactionId);\n+        redactionDTO.setPage(1);\n+        final JSONObject jsonObject = new JSONObject(redactionDTO);\n+\n+        return request\n+                .body(jsonObject)\n+                .post(\"/api/markups\")\n+                .then()\n+                .statusCode(201)\n+                .extract()\n+                .body()\n+                .as(RedactionDTO.class);\n+    }\n+\n }"
  },
  {
    "sha": "7c91125ad15d6167395be7e39eec6855d9c3b1bb",
    "filename": "src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hmcts/em-native-pdf-annotator-app/blob/345f27847251d44d0e4bdd4ec4a41585d8e1ef27/src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java",
    "raw_url": "https://github.com/hmcts/em-native-pdf-annotator-app/raw/345f27847251d44d0e4bdd4ec4a41585d8e1ef27/src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-native-pdf-annotator-app/contents/src/aat/java/uk/gov/hmcts/reform/em/npa/testutil/TestUtil.java?ref=345f27847251d44d0e4bdd4ec4a41585d8e1ef27",
    "patch": "@@ -198,6 +198,10 @@ public RequestSpecification authRequest() {\n                 .header(\"Authorization\", idamAuth);\n     }\n \n+    public RequestSpecification unauthenticatedRequest() {\n+        return SerenityRest.given();\n+    }\n+\n     public RequestSpecification s2sAuthRequest() {\n         return SerenityRest\n                 .given()"
  }
]
