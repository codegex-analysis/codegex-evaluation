[
  {
    "sha": "eec04f1be055b3275ecb897d4452f3e002b21f77",
    "filename": "api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CardPaymentRequestTest.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CardPaymentRequestTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CardPaymentRequestTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CardPaymentRequestTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,86 @@\n+package uk.gov.hmcts.payment.api.contract;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CardPaymentRequestTest {\n+    private static ValidatorFactory validatorFactory;\n+    private static Validator validator;\n+\n+    @BeforeClass\n+    public static void createValidator() {\n+        validatorFactory = Validation.buildDefaultValidatorFactory();\n+        validator = validatorFactory.getValidator();\n+    }\n+\n+    @AfterClass\n+    public static void close() {\n+        validatorFactory.close();\n+    }\n+\n+    @Test\n+    public void testAmountFractionInCardPaymentRequest(){\n+        CardPaymentRequest request = new CardPaymentRequest();\n+        request.setAmount(BigDecimal.valueOf(100.1234));\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Payment amount cannot have more than 2 decimal places\")){\n+                    assertEquals(\"Payment amount cannot have more than 2 decimal places\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void  testNegativeAmountInCardPaymentRequest(){\n+        CardPaymentRequest request = new CardPaymentRequest();\n+        request.setAmount(BigDecimal.valueOf(-100.12));\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"must be greater than 0\")){\n+                    assertEquals(\"must be greater than 0\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void  testEmptyDescriptionInCardPaymentRequest(){\n+        CardPaymentRequest request = new CardPaymentRequest();\n+        request.setCcdCaseNumber(\"ccd-number\");\n+        request.setSiteId(\"site-id\");\n+        request.setDescription(\"\");\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"must not be empty\")){\n+                    assertEquals(\"must not be empty\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void testCcdnumberOrCaseReference(){\n+        CardPaymentRequest request = new CardPaymentRequest();\n+        request.setSiteId(\"site-id\");\n+        request.setDescription(\"\");\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Either ccdCaseNumber or caseReference is required.\")){\n+                    assertEquals(\"Either ccdCaseNumber or caseReference is required.\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+}"
  },
  {
    "sha": "abc4998876cbbc4471e5e9dfc824b96bdf716cb1",
    "filename": "api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CreditAccountPaymentRequestTest.java",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CreditAccountPaymentRequestTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CreditAccountPaymentRequestTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/CreditAccountPaymentRequestTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,103 @@\n+package uk.gov.hmcts.payment.api.contract;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import uk.gov.hmcts.payment.api.contract.util.Service;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CreditAccountPaymentRequestTest {\n+    private static ValidatorFactory validatorFactory;\n+    private static Validator validator;\n+\n+    @BeforeClass\n+    public static void createValidator() {\n+        validatorFactory = Validation.buildDefaultValidatorFactory();\n+        validator = validatorFactory.getValidator();\n+    }\n+\n+    @AfterClass\n+    public static void close() {\n+        validatorFactory.close();\n+    }\n+\n+    @Test\n+    public void testAmountFractionInCreditAccountPaymentRequest(){\n+        CreditAccountPaymentRequest request = new CreditAccountPaymentRequest();\n+        request.setAmount(BigDecimal.valueOf(100.1234));\n+        Set<ConstraintViolation<CreditAccountPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Payment amount cannot have more than 2 decimal places\")){\n+                    assertEquals(\"Payment amount cannot have more than 2 decimal places\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void testNegativeAmountInCreditAccountPaymentRequest(){\n+        CreditAccountPaymentRequest request = new CreditAccountPaymentRequest();\n+        request.setAmount(BigDecimal.valueOf(-100.12));\n+        Set<ConstraintViolation<CreditAccountPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"must be greater than 0\")){\n+                    assertEquals(\"must be greater than 0\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void testValidateSiteIdForUnspecCmc(){\n+        CreditAccountPaymentRequest request = new CreditAccountPaymentRequest();\n+        request.setService(Service.CMC);\n+        request.setSiteId(\"invalid-site-id\");\n+        Set<ConstraintViolation<CreditAccountPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Invalid Site ID (URN) provided for UNSPEC CMC. Accepted values are AAA7\")){\n+                    assertEquals(\"Invalid Site ID (URN) provided for UNSPEC CMC. Accepted values are AAA7\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void testValidateSiteIdForIac(){\n+        CreditAccountPaymentRequest request = new CreditAccountPaymentRequest();\n+        request.setService(Service.IAC);\n+        request.setSiteId(\"invalid-site-id\");\n+        Set<ConstraintViolation<CreditAccountPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Invalid Site ID (URN) provided for IAC. Accepted values are BFA1\")){\n+                    assertEquals(\"Invalid Site ID (URN) provided for IAC. Accepted values are BFA1\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void testValidateSiteIdForFpl() {\n+        CreditAccountPaymentRequest request = new CreditAccountPaymentRequest();\n+        request.setService(Service.IAC);\n+        request.setSiteId(\"invalid-site-id\");\n+        Set<ConstraintViolation<CreditAccountPaymentRequest>> violations = validator.validate(request);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Invalid Site ID (URN) provided for FPL. Accepted values are ABA3\")){\n+                    assertEquals(\"Invalid Site ID (URN) provided for FPL. Accepted values are ABA3\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+\n+\n+\n+}"
  },
  {
    "sha": "54abd6269fa3349c131b2810e695680dd8627d1e",
    "filename": "api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/UpdatePaymentRequestTest.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/UpdatePaymentRequestTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/UpdatePaymentRequestTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/UpdatePaymentRequestTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,46 @@\n+package uk.gov.hmcts.payment.api.contract;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class UpdatePaymentRequestTest {\n+\n+    private static ValidatorFactory validatorFactory;\n+    private static Validator validator;\n+\n+    @BeforeClass\n+    public static void createValidator() {\n+        validatorFactory = Validation.buildDefaultValidatorFactory();\n+        validator = validatorFactory.getValidator();\n+    }\n+\n+    @AfterClass\n+    public static void close() {\n+        validatorFactory.close();\n+    }\n+\n+\n+    @Test\n+    public void testOnlyCCDNumberOrCaseReferenceRequired(){\n+        UpdatePaymentRequest updatePaymentRequest = new UpdatePaymentRequest();\n+        updatePaymentRequest.setCaseReference(\"case-reference\");\n+        updatePaymentRequest.setCcdCaseNumber(\"ccd-number\");\n+        Set<ConstraintViolation<UpdatePaymentRequest>> violations = validator.validate(updatePaymentRequest);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Either ccdCaseNumber or caseReference is required, and cannot be empty.\")){\n+                    assertEquals(\"Either ccdCaseNumber or caseReference is required, and cannot be empty.\",v.getMessage());\n+                }\n+            }\n+        );\n+\n+    }\n+}"
  },
  {
    "sha": "3ccd4234e799d8b25714128e76e0ba2204425bd8",
    "filename": "api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/CurrencyCodeTest.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/CurrencyCodeTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/CurrencyCodeTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/CurrencyCodeTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,22 @@\n+package uk.gov.hmcts.payment.api.contract.util;\n+\n+import org.junit.Test;\n+import uk.gov.hmcts.payment.api.contract.CardPaymentRequest;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CurrencyCodeTest {\n+\n+    @Test\n+    public void testGBPCurrencyCode(){\n+        assertEquals(\"GBP\",CurrencyCode.GBP.getCode());\n+    }\n+\n+    @Test\n+    public void testCardPaymentRequestCurrencyCode(){\n+        CardPaymentRequest cardPaymentRequest = CardPaymentRequest.createCardPaymentRequestDtoWith()\n+                                                    .currency(CurrencyCode.GBP)\n+                                                    .build();\n+        assertEquals(cardPaymentRequest.getCurrency().getCode(),CurrencyCode.GBP.getCode());\n+    }\n+}"
  },
  {
    "sha": "e54eee2ef66dc7a9bf3baac708b5bc1620317536",
    "filename": "api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/LanguageTest.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/LanguageTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/LanguageTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/LanguageTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,81 @@\n+package uk.gov.hmcts.payment.api.contract.util;\n+\n+import org.junit.*;\n+import uk.gov.hmcts.payment.api.contract.CardPaymentRequest;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.constraints.AssertFalse;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+public class LanguageTest {\n+\n+    private static ValidatorFactory validatorFactory;\n+    private static Validator validator;\n+    CardPaymentRequest validLanguageRequest;\n+    CardPaymentRequest emptyLanguageRequest;\n+    CardPaymentRequest invalidLanguageRequest;\n+    @BeforeClass\n+    public static void createValidator() {\n+        validatorFactory = Validation.buildDefaultValidatorFactory();\n+        validator = validatorFactory.getValidator();\n+    }\n+\n+    @AfterClass\n+    public static void close() {\n+        validatorFactory.close();\n+    }\n+\n+    @Test\n+    public void testValidLanguageCode(){\n+        validLanguageRequest = new CardPaymentRequest();\n+        validLanguageRequest.setLanguage(\"cy\");\n+        validLanguageRequest.setCcdCaseNumber(\"ccd-number\");\n+        validLanguageRequest.setSiteId(\"site-id\");\n+        validLanguageRequest.setDescription(\"description\");\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(validLanguageRequest);\n+        assertFalse(violations.isEmpty());\n+    }\n+\n+\n+    @Test\n+    public void testEmtpyLanguageCode(){\n+        emptyLanguageRequest = new CardPaymentRequest();\n+        emptyLanguageRequest.setLanguage(\"\");\n+        emptyLanguageRequest.setCcdCaseNumber(\"ccd-number\");\n+        emptyLanguageRequest.setSiteId(\"site-id\");\n+        emptyLanguageRequest.setDescription(\"description\");\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(emptyLanguageRequest);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Invalid value for language attribute.\")){\n+                    assertEquals(\"Invalid value for language attribute.\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+    @Test\n+    public void testInvalidLanguageCode(){\n+        invalidLanguageRequest = new CardPaymentRequest();\n+        invalidLanguageRequest.setLanguage(\"invalid\");\n+        invalidLanguageRequest.setCcdCaseNumber(\"ccd-number\");\n+        invalidLanguageRequest.setSiteId(\"site-id\");\n+        invalidLanguageRequest.setDescription(\"description\");\n+        Set<ConstraintViolation<CardPaymentRequest>> violations = validator.validate(invalidLanguageRequest);\n+        violations.stream().forEach(v->{\n+                if(v.getMessage().equals(\"Invalid value for language attribute.\")){\n+                    assertEquals(\"Invalid value for language attribute.\",v.getMessage());\n+                }\n+            }\n+        );\n+    }\n+\n+}"
  },
  {
    "sha": "94d912e28a00c977d3e8a4eb653e9134db314a74",
    "filename": "api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/ServiceTest.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/ServiceTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/ServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api-contract/src/test/java/uk/gov/hmcts/payment/api/contract/util/ServiceTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,22 @@\n+package uk.gov.hmcts.payment.api.contract.util;\n+\n+import org.junit.Test;\n+import uk.gov.hmcts.payment.api.contract.CardPaymentRequest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+public class ServiceTest {\n+\n+    @Test\n+    public void testService(){\n+        assertEquals(\"Civil Money Claims\",Service.CMC.getName());\n+    }\n+\n+    @Test\n+    public void testCardPaymentRequestService(){\n+        CardPaymentRequest cardPaymentRequest  = CardPaymentRequest.createCardPaymentRequestDtoWith()\n+                                                    .service(Service.DIGITAL_BAR).build();\n+        assertEquals(\"Digital Bar\",cardPaymentRequest.getService().getName());\n+    }\n+}"
  },
  {
    "sha": "8285bba2b111abdb2d524e6c8b3a0c10d1f6bf9b",
    "filename": "api/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/build.gradle",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/build.gradle",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/build.gradle?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -125,6 +125,8 @@ dependencies {\n     testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'\n     testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.15.1'\n     testCompile 'org.awaitility:awaitility:3.1.6'\n+    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'\n+    testCompile 'org.powermock:powermock-api-mockito2:2.0.9'\n     // smoke\n     smokeTestCompile sourceSets.test.runtimeClasspath\n     // functional"
  },
  {
    "sha": "b25ed246f8a06d38ff858389234bc3cb4e0c4dfc",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/componenttests/BulkScanningReportControllerTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/BulkScanningReportControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/BulkScanningReportControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/BulkScanningReportControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -349,7 +349,6 @@ public void shouldNotGenerateReportWhenPaymentAllocationStatusIsInvalid() throws\n         paymentList.add(payment);\n         when(paymentService.getPayments(any(Date.class),any(Date.class))).thenReturn(paymentList);\n \n-\n         MvcResult result = restActions\n             .withAuthorizedUser(USER_ID)\n             .withUserId(USER_ID)\n@@ -363,7 +362,6 @@ public void shouldNotGenerateReportWhenPaymentAllocationStatusIsInvalid() throws\n     @Test\n     @Transactional\n     public void shouldGenerateReportWhenReportTypeIsSurplus() throws Exception {\n-\n         StatusHistory statusHistory = StatusHistory.statusHistoryWith().status(\"Initiated\").externalStatus(\"created\").build();\n         PaymentAllocation paymentAllocation = PaymentAllocation.paymentAllocationWith().paymentGroupReference(\"2018-0000000000\")\n             .paymentReference(\"RC-1519-9028-2432-000\")"
  },
  {
    "sha": "5badb76f423ee1394863ccaf36dc2c4f62b0daf2",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CallbackServiceImplTest.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CallbackServiceImplTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CallbackServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CallbackServiceImplTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,73 @@\n+package uk.gov.hmcts.payment.api.componenttests;\n+\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import org.ff4j.FF4j;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;\n+import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;\n+import uk.gov.hmcts.payment.api.componenttests.util.PaymentsDataUtil;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentDtoMapper;\n+import uk.gov.hmcts.payment.api.model.Payment;\n+import uk.gov.hmcts.payment.api.model.PaymentFeeLink;\n+import uk.gov.hmcts.payment.api.service.CallbackService;\n+import uk.gov.hmcts.payment.api.servicebus.CallbackServiceImpl;\n+import uk.gov.hmcts.payment.api.servicebus.TopicClientProxy;\n+\n+import java.util.Arrays;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class CallbackServiceImplTest {\n+\n+    @Autowired\n+    private CallbackServiceImpl callbackService;\n+\n+    @MockBean\n+    private TopicClientProxy topicClient;\n+\n+    @Autowired\n+    private FF4j ff4j;\n+\n+    @Test\n+    public void testCallbackService() throws ServiceBusException, InterruptedException, JsonProcessingException {\n+\n+        Payment payment = CardPaymentComponentTest.getPaymentsData().get(2);\n+        payment.setServiceCallbackUrl(\"serviceCallbackUrl\");\n+        PaymentFeeLink paymentFeeLink = PaymentFeeLink.paymentFeeLinkWith().paymentReference(\"00000005\")\n+            .payments(Arrays.asList(payment))\n+            .fees(PaymentsDataUtil.getFeesData())\n+            .build();\n+        doNothing().when(topicClient).send(any(IMessage.class));\n+        callbackService.callback(paymentFeeLink, paymentFeeLink.getPayments().get(0));\n+        Mockito.verify(topicClient).send(any());\n+    }\n+\n+\n+    @Before\n+    public void init() {\n+        ff4j.enable(CallbackService.FEATURE);\n+    }\n+\n+    @After\n+    public void clean() {\n+        ff4j.disable(CallbackService.FEATURE);\n+    }\n+}"
  },
  {
    "sha": "3e62df397a5a9612eaf1c2fdffb83e4f4e15607a",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/componenttests/ReplayCreditAccountPaymentControllerTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 87,
    "changes": 101,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/ReplayCreditAccountPaymentControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/ReplayCreditAccountPaymentControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/ReplayCreditAccountPaymentControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -28,6 +28,7 @@\n import uk.gov.hmcts.payment.api.contract.PaymentDto;\n import uk.gov.hmcts.payment.api.contract.util.CurrencyCode;\n import uk.gov.hmcts.payment.api.contract.util.Service;\n+import uk.gov.hmcts.payment.api.controllers.utils.ReplayCreditAccountPaymentUtils;\n import uk.gov.hmcts.payment.api.dto.AccountDto;\n import uk.gov.hmcts.payment.api.model.Payment;\n import uk.gov.hmcts.payment.api.model.Payment2Repository;\n@@ -84,6 +85,9 @@\n     @Autowired\n     protected AccountService<AccountDto, String> accountService;\n \n+    @Autowired\n+    protected ReplayCreditAccountPaymentUtils replayCreditAccountPaymentUtils;\n+\n     private static final String USER_ID = UserResolverBackdoor.AUTHENTICATED_USER_ID;\n \n     RestActions restActions;\n@@ -127,7 +131,7 @@ public void replayCreditAccountPayment_AutomatedTest() throws Exception {\n             createCreditAccountPayments(csvParseMap, 10);\n \n             //Create CSV\n-            createCSV(csvParseMap,\"paymentsToReplay.csv\");\n+            replayCreditAccountPaymentUtils.createCSV(csvParseMap,\"paymentsToReplay.csv\");\n \n             //Invoke replay-credit-account-payment\n             MockMultipartFile csvFile = new MockMultipartFile(\"csvFile\", \"paymentsToReplay.csv\", \"text/csv\",\n@@ -201,7 +205,7 @@ public void markPBAPaymentFailed_AutomatedTest() throws Exception {\n             createCreditAccountPayments(csvParseMap, 5);\n \n             //Create CSV\n-            createCSV(csvParseMap ,\"paymentsToFailed.csv\");\n+            replayCreditAccountPaymentUtils.createCSV(csvParseMap ,\"paymentsToFailed.csv\");\n \n             //Invoke replay-credit-account-payment\n             MockMultipartFile csvFile = new MockMultipartFile(\"csvFile\", \"paymentsToFailed.csv\", \"text/csv\",\n@@ -278,7 +282,7 @@ public void replayCreditAccountPayment_ReplayNewOnlyIfOldPaymentExists() throws\n             });\n \n             //Create CSV\n-            createCSV(csvParseMapWithIncorrectPayRef,\"paymentsToReplay.csv\");\n+            replayCreditAccountPaymentUtils.createCSV(csvParseMapWithIncorrectPayRef,\"paymentsToReplay.csv\");\n \n             //Invoke replay-credit-account-payment\n             MockMultipartFile csvFile = new MockMultipartFile(\"csvFile\", \"paymentsToReplay.csv\", \"text/csv\",\n@@ -305,61 +309,22 @@ public void replayCreditAccountPayment_ReplayNewOnlyIfOldPaymentExists() throws\n         }\n     }\n \n-    private void createCSV(Map<String, CreditAccountPaymentRequest> csvParseMap , String fileName) throws IOException {\n-        String csvFile = \"src/test/resources/\" +fileName;\n-        FileWriter writer = new FileWriter(csvFile);\n-\n-        //for header\n-        CSVUtil.writeLine\n-            (writer, Arrays.asList(\"index_col\", \"impacted.payment.reference\", \"payment.amount\", \"payment.ccd_case_number\",\n-                \"payment.pba_number\", \"payment.description\", \"payment.case_reference\", \"payment.service\",\n-                \"payment.currency\", \"payment.customer_reference\", \"payment.organisation_name\", \"payment.site_id\",\n-                \"fee.code\", \"fee.calculated_amount\", \"fee.version\"));\n-\n-        csvParseMap.entrySet().stream().forEach(paymentRequestEntry ->\n-            {\n-                CreditAccountPaymentRequest request = paymentRequestEntry.getValue();\n-                List<String> list = new ArrayList<>();\n-                list.add(\"\");\n-                list.add(paymentRequestEntry.getKey());\n-                list.add(request.getAmount().toString());\n-                list.add(request.getCcdCaseNumber());\n-                list.add(request.getAccountNumber());\n-                list.add(request.getDescription());\n-                list.add(request.getCaseReference());\n-                list.add(\"CMC\");\n-                list.add(\"GBP\");\n-                list.add(request.getCustomerReference());\n-                list.add(request.getOrganisationName());\n-                list.add(request.getSiteId());\n-                list.add(request.getFees().get(0).getCode());\n-                list.add(request.getFees().get(0).getCalculatedAmount().toString());\n-                list.add(request.getFees().get(0).getVersion());\n-\n-                try {\n-                    CSVUtil.writeLine(writer, list);\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        );\n-\n-        writer.flush();\n-        writer.close();\n-    }\n \n     private void createCreditAccountPayments(Map<String, CreditAccountPaymentRequest> csvParseMap , int noOfPayments) throws Exception {\n         for (int i = 0; i < noOfPayments; i++) {\n             //create PBA payment\n-            setCreditAccountPaymentLiberataCheckFeature(true);\n+            String url = replayCreditAccountPaymentUtils.setCreditAccountPaymentLiberataCheckFeature(true);\n+            restActions\n+                .post(url)\n+                .andExpect(status().isAccepted());\n \n             when(featureToggler.getBooleanValue(\"apportion-feature\", false)).thenReturn(true);\n \n             Double calculatedAmount = Double.parseDouble(Integer.toString(RandomUtils.nextInt(99) + 1));\n \n-            List<FeeDto> fees = getFees(calculatedAmount);\n+            List<FeeDto> fees = replayCreditAccountPaymentUtils.getFees(calculatedAmount);\n \n-            CreditAccountPaymentRequest request = getPBAPayment(calculatedAmount, fees);\n+            CreditAccountPaymentRequest request = replayCreditAccountPaymentUtils.getPBAPayment(calculatedAmount, fees);\n \n             AccountDto accountActiveDto = new AccountDto(request.getAccountNumber(), \"accountName\",\n                 new BigDecimal(calculatedAmount), new BigDecimal(calculatedAmount), AccountStatus.ACTIVE, new Date());\n@@ -375,42 +340,4 @@ private void createCreditAccountPayments(Map<String, CreditAccountPaymentRequest\n         }\n     }\n \n-    private CreditAccountPaymentRequest getPBAPayment(Double calculatedAmount, List<FeeDto> fees) {\n-        return CreditAccountPaymentRequest.createCreditAccountPaymentRequestDtoWith()\n-                .amount(new BigDecimal(calculatedAmount))\n-                .ccdCaseNumber(\"1607065\" + RandomUtils.nextInt(999999999))\n-                .accountNumber(\"\\\"PBA0073\" + RandomUtils.nextInt(999) + \"\\\"\")\n-                .description(\"Money Claim issue fee\")\n-                .caseReference(\"\\\"9eb95270-7fee-48cf-afa2-e6c58ee\" + RandomUtils.nextInt(999) + \"ba\\\"\")\n-                .service(Service.CMC)\n-                .currency(CurrencyCode.GBP)\n-                .customerReference(\"DEA2682/1/SWG\" + RandomUtils.nextInt(999))\n-                .organisationName(\"\\\"Slater & Gordon\" + RandomUtils.nextInt(999) + \"\\\"\")\n-                .siteId(\"Y689\")\n-                .fees(fees)\n-                .build();\n-    }\n-\n-    @NotNull\n-    private List<FeeDto> getFees(Double calculatedAmount) {\n-        List<FeeDto> fees = new ArrayList<>();\n-        fees.add(FeeDto.feeDtoWith()\n-            .code(\"FEE020\" + RandomUtils.nextInt(9))\n-            .version(Integer.toString(RandomUtils.nextInt(9)))\n-            .calculatedAmount(new BigDecimal(calculatedAmount)).build());\n-        return fees;\n-    }\n-\n-    private void setCreditAccountPaymentLiberataCheckFeature(boolean enabled) throws Exception {\n-        String url = \"/api/ff4j/store/features/credit-account-payment-liberata-check/\";\n-        if (enabled) {\n-            url += \"enable\";\n-        } else {\n-            url += \"disable\";\n-        }\n-\n-        restActions\n-            .post(url)\n-            .andExpect(status().isAccepted());\n-    }\n-}\n+ }"
  },
  {
    "sha": "5008ddfcf53c02e82d7eee2e57c38e5672ef89f6",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/.DS_Store",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/.DS_Store",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/.DS_Store?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e"
  },
  {
    "sha": "5129137f1c51f635f9ef26f565bce28e285b90ce",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportControllerTest.java",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,159 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.joda.time.LocalDate;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.dto.RemissionRequest;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.PaymentService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.hibernate.type.descriptor.java.JdbcDateTypeDescriptor.DATE_FORMAT;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+import static uk.gov.hmcts.payment.api.model.PaymentFee.feeWith;\n+import static uk.gov.hmcts.payment.api.util.DateUtil.atEndOfDay;\n+import static uk.gov.hmcts.payment.api.util.DateUtil.atStartOfDay;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class BulkScanningReportControllerTest {\n+\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    private static final String USER_ID = UserResolverBackdoor.CASEWORKER_ID;\n+\n+    @MockBean\n+    private PaymentService<PaymentFeeLink, String> paymentService;\n+\n+    RestActions restActions;\n+\n+    @Before\n+    public void setUp(){\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.moneyclaims.service.gov.uk\");\n+    }\n+\n+    @Test\n+    public void testGetBulkScanReports_WithProcessedUnAllocated() throws Exception {\n+        when(paymentService.getPayments(any(Date.class), any(Date.class))).thenReturn(getAllocatedPaymentList());\n+        String startDate = LocalDate.now().minusDays(1).toString(DATE_FORMAT);\n+        String endDate = LocalDate.now().toString(DATE_FORMAT);\n+        MvcResult result = restActions\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .get(\"/payment/bulkscan-data-report?date_from=\" + startDate + \"&date_to=\" + endDate + \"&report_type=PROCESSED_UNALLOCATED\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void testGetBulkScanReports_WithSurPlusShortFall() throws Exception {\n+        when(paymentService.getPayments(any(Date.class), any(Date.class))).thenReturn(getAllocatedPaymentList());\n+        String startDate = LocalDate.now().minusDays(1).toString(DATE_FORMAT);\n+        String endDate = LocalDate.now().toString(DATE_FORMAT);\n+        MvcResult result = restActions\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .get(\"/payment/bulkscan-data-report?date_from=\" + startDate + \"&date_to=\" + endDate + \"&report_type=SURPLUS_AND_SHORTFALL\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    public List<Payment> getAllocatedPaymentList(){\n+        StatusHistory statusHistory = StatusHistory.statusHistoryWith().status(\"Initiated\").externalStatus(\"created\").build();\n+        PaymentAllocation paymentAllocation = PaymentAllocation.paymentAllocationWith().paymentGroupReference(\"2018-0000000000\")\n+            .paymentReference(\"RC-1519-9028-2432-000\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"Allocated\").build())\n+            .receivingOffice(\"Home office\")\n+            .reason(\"receiver@receiver.com\")\n+            .explanation(\"sender@sender.com\")\n+            .userId(\"userId\")\n+            .build();\n+        Payment payment = Payment.paymentWith()\n+            .amount(new BigDecimal(\"99.99\"))\n+            .caseReference(\"Reference\")\n+            .ccdCaseNumber(\"ccdCaseNumber\")\n+            .description(\"Test payments statuses for \")\n+            .serviceType(\"PROBATE\")\n+            .currency(\"GBP\")\n+            .siteId(\"AA0\")\n+            .userId(USER_ID)\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"card\").build())\n+            .paymentProvider(PaymentProvider.paymentProviderWith().name(\"exela\").build())\n+            .paymentStatus(PaymentStatus.paymentStatusWith().name(\"created\").build())\n+            .externalReference(\"ext-reference\")\n+            .reference(\"RC-1519-9028-2432-000\")\n+            .statusHistories(Arrays.asList(statusHistory))\n+            .paymentAllocation(Arrays.asList(paymentAllocation))\n+            .dateCreated(new Date())\n+            .build();\n+        PaymentFee fee = feeWith().calculatedAmount(new BigDecimal(\"99.99\")).version(\"1\").code(\"FEE0005\").volume(1).build();\n+        RemissionRequest.createRemissionRequestWith()\n+            .beneficiaryName(\"A partial remission\")\n+            .ccdCaseNumber(\"1111-2222-2222-1111\")\n+            .hwfAmount(new BigDecimal(\"50.00\"))\n+            .hwfReference(\"HR1111\")\n+            .siteId(\"AA001\")\n+            .build();\n+        Remission remission= Remission.remissionWith()\n+            .remissionReference(\"12345\")\n+            .hwfReference(\"HR1111\")\n+            .hwfAmount(new BigDecimal(\"50.00\"))\n+            .ccdCaseNumber(\"1111-2222-2222-1111\")\n+            .siteId(\"AA001\")\n+            .build();\n+        List<Payment> paymentList = new ArrayList<>();\n+        PaymentFeeLink paymentFeeLink = new PaymentFeeLink();\n+        List<PaymentFee> fees = new ArrayList<>();\n+        List<Remission> remissions = new ArrayList<>();\n+        remissions.add(remission);\n+        fees.add(fee);\n+        paymentFeeLink.setPayments(paymentList);\n+        paymentFeeLink.setFees(fees);\n+        paymentFeeLink.setRemissions(remissions);\n+        payment.setPaymentLink(paymentFeeLink);\n+        paymentList.add(payment);\n+\n+        return paymentList;\n+    }\n+}"
  },
  {
    "sha": "808968445bf82fd9828781dfaba7a4a7dd22b0b0",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/CardPaymentControllerTest.java",
    "status": "added",
    "additions": 254,
    "deletions": 0,
    "changes": 254,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CardPaymentControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CardPaymentControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CardPaymentControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,254 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockClassRule;\n+import lombok.SneakyThrows;\n+import org.ff4j.FF4j;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ResourceUtils;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.fees.register.legacymodel.Fee;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.contract.CardPaymentRequest;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.contract.util.Service;\n+import uk.gov.hmcts.payment.api.dto.PaymentServiceRequest;\n+import uk.gov.hmcts.payment.api.dto.PciPalPaymentRequest;\n+import uk.gov.hmcts.payment.api.external.client.dto.CardDetails;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.CardDetailsService;\n+import uk.gov.hmcts.payment.api.service.DelegatingPaymentService;\n+import uk.gov.hmcts.payment.api.service.FeePayApportionService;\n+import uk.gov.hmcts.payment.api.service.PciPalPaymentService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+\n+import java.math.BigDecimal;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.*;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static org.junit.Assert.*;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+import static org.springframework.util.SystemPropertyUtils.resolvePlaceholders;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class CardPaymentControllerTest {\n+    @ClassRule\n+    public static WireMockClassRule wireMockRule = new WireMockClassRule(9190);\n+\n+    @Rule\n+    public WireMockClassRule instanceRule = wireMockRule;\n+\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    private ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    private UserResolverBackdoor userRequestAuthorizer;\n+\n+    private static final String USER_ID = UserResolverBackdoor.CITIZEN_ID;\n+\n+    private RestActions restActions;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    @MockBean\n+    private LaunchDarklyFeatureToggler featureToggler;\n+\n+    @MockBean\n+    private CardDetailsService<CardDetails, String> cardDetailsService;\n+\n+    @MockBean\n+    private PciPalPaymentService pciPalPaymentService;\n+\n+    @MockBean\n+    private FeePayApportionService feePayApportionService;\n+\n+    @MockBean\n+    private DelegatingPaymentService<PaymentFeeLink, String> delegatingPaymentService;\n+\n+    @MockBean\n+    private FF4j ff4j;\n+\n+    @Before\n+    public void setup() {\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.moneyclaims.service.gov.uk\");\n+    }\n+\n+\n+    @Test\n+    public void createCardPaymentWithValidInputData_shouldReturnStatusCreatedTest() throws Exception {\n+        Payment payment = Payment.paymentWith()\n+                            .status(\"success\")\n+                            .reference(\"reference\")\n+                            .dateCreated(Date.from(Instant.now()))\n+                            .externalReference(\"ext-reference\")\n+                            .build();\n+        PaymentFee paymentFee = PaymentFee.feeWith().build();\n+        List<PaymentFee> feeList = new ArrayList<>();\n+        feeList.add(paymentFee);\n+        PaymentFeeLink paymentFeeLink = PaymentFeeLink.paymentFeeLinkWith()\n+                                            .paymentReference(PaymentReference.getInstance().getNext())\n+                                            .payments(Collections.singletonList(payment))\n+                                            .fees(feeList)\n+                                            .build();\n+        when(delegatingPaymentService.create(Mockito.any(PaymentServiceRequest.class))).thenReturn(paymentFeeLink);\n+        when( pciPalPaymentService.getPciPalLink(Mockito.any(PciPalPaymentRequest.class), Mockito.any(String.class))).thenReturn(\"link\");\n+        when(featureToggler.getBooleanValue(Mockito.any(String.class),Mockito.anyBoolean())).thenReturn(false);\n+        MvcResult result = restActions\n+            .withHeader(\"service-callback-url\", \"http://payments.com\")\n+            .post(\"/card-payments\", cardPaymentRequest())\n+            .andExpect(status().isCreated())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void shouldGetPaymentForValidReference() throws Exception {\n+        when(delegatingPaymentService.retrieve(Mockito.anyString())).thenReturn(getPaymentFeeLink());\n+        restActions\n+            .get(\"/card-payments/123123123123123\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void shouldRetrieveWithCardDetails() throws Exception {\n+        CardDetails cardDetails = CardDetails.cardDetailsWith()\n+                                        .lastDigitsCardNumber(\"1234\")\n+                                        .build();\n+        when(cardDetailsService.retrieve(anyString())).thenReturn(cardDetails);\n+        restActions\n+            .get(\"/card-payments/123123123123123/details\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void shouldRetrievePaymentStatus() throws Exception {\n+        when(delegatingPaymentService.retrieve(Mockito.anyString())).thenReturn(getPaymentFeeLink());\n+        restActions\n+            .get(\"/card-payments/RC-1612-3710-5335-6484/statuses\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void shouldCallPaymentCancelFunction() throws Exception {\n+        when(ff4j.check(anyString())).thenReturn(true);\n+        doNothing().when(delegatingPaymentService).cancel(anyString());\n+        restActions\n+            .post(\"/card-payments/RC-1612-3710-5335-6484/cancel\")\n+            .andExpect(status().isNoContent())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void shouldCallPaymentCancelFunction_ThrowsPaymentException() throws Exception {\n+        when(ff4j.check(anyString())).thenReturn(false);\n+        doNothing().when(delegatingPaymentService).cancel(anyString());\n+        restActions\n+            .post(\"/card-payments/RC-1612-3710-5335-6484/cancel\")\n+            .andExpect(status().isBadRequest())\n+            .andReturn();\n+    }\n+\n+    private PaymentFeeLink getPaymentFeeLink(){\n+        StatusHistory statusHistory = StatusHistory.statusHistoryWith().status(\"Initiated\").externalStatus(\"created\").build();\n+        Payment payment1 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .amount(BigDecimal.valueOf(100))\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .reference(\"RC-1612-3710-5335-6484\")\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .status(\"success\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .statusHistories(Arrays.asList(statusHistory))\n+            .currency(\"GBP\")\n+            .id(1).build();\n+        PaymentFee fee = PaymentFee.feeWith()\n+            .feeAmount(new BigDecimal(\"100.00\"))\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .calculatedAmount(new BigDecimal(\"100.00\"))\n+            .code(\"FEE123\")\n+            .version(\"1\")\n+            .volume(1)\n+            .build();\n+        List<PaymentFee> feeList = new ArrayList<>();\n+        feeList.add(fee);\n+        return PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(PaymentReference.getInstance().getNext())\n+            .payments(Collections.singletonList(payment1))\n+            .fees(feeList)\n+            .build();\n+\n+    }\n+\n+\n+    private CardPaymentRequest cardPaymentRequest() throws Exception {\n+        return objectMapper.readValue(requestJson().getBytes(), CardPaymentRequest.class);\n+    }\n+\n+    protected String requestJson() {\n+        return \"{\\n\" +\n+            \"  \\\"amount\\\": 101.89,\\n\" +\n+            \"  \\\"description\\\": \\\"New passport application\\\",\\n\" +\n+            \"  \\\"ccd_case_number\\\": \\\"CCD101\\\",\\n\" +\n+            \"  \\\"channel\\\": \\\"telephony\\\",\\n\" +\n+            \"  \\\"case_reference\\\": \\\"12345\\\",\\n\" +\n+            \"  \\\"service\\\": \\\"PROBATE\\\",\\n\" +\"  \\\"language\\\": \\\"cy\\\",\\n\" +\n+            \"  \\\"currency\\\": \\\"GBP\\\",\\n\" +\n+            \"  \\\"return_url\\\": \\\"https://www.moneyclaims.service.gov.uk\\\",\\n\" +\n+            \"  \\\"site_id\\\": \\\"AA101\\\",\\n\" +\n+            \"  \\\"fees\\\": [\\n\" +\n+            \"    {\\n\" +\n+            \"      \\\"calculated_amount\\\": 101.89,\\n\" +\n+            \"      \\\"code\\\": \\\"X0101\\\",\\n\" +\n+            \"      \\\"version\\\": \\\"1\\\"\\n\" +\n+            \"    }\\n\" +\n+            \"  ]\\n\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "4e5e2ca9b7bb88f82a128707e516796d6386c272",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/CaseControllerTest.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CaseControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CaseControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CaseControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,125 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.dto.PaymentGroupDto;\n+import uk.gov.hmcts.payment.api.dto.PaymentSearchCriteria;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentDtoMapper;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentGroupDtoMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.FeesService;\n+import uk.gov.hmcts.payment.api.service.PaymentGroupService;\n+import uk.gov.hmcts.payment.api.service.PaymentService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.util.Arrays;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class CaseControllerTest {\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    RestActions restActions;\n+\n+    @MockBean\n+    private PaymentService<PaymentFeeLink, String> paymentService;\n+\n+    @MockBean\n+    private PaymentGroupService<PaymentFeeLink, String> paymentGroupService;\n+\n+    @MockBean\n+    private PaymentDtoMapper paymentDtoMapper;\n+\n+    @MockBean\n+    private PaymentGroupDtoMapper paymentGroupDtoMapper;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    private static final String USER_ID = UserResolverBackdoor.CASEWORKER_ID;\n+\n+    @Before\n+    public void setUp(){\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.moneyclaims.service.gov.uk\");\n+    }\n+\n+\n+    @Test\n+    public void testRetrieveCasePayments() throws Exception {\n+        when(paymentService.search(any(PaymentSearchCriteria.class))).thenReturn(Arrays.asList(mock(PaymentFeeLink.class)));\n+        when(paymentDtoMapper.toReconciliationResponseDto(any(PaymentFeeLink.class))).thenReturn(PaymentDto.payment2DtoWith().build());\n+        MvcResult result = restActions\n+            .get(\"/cases/12341234213412/payments\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void testRetrieveCasePayments_ThrowsPaymentNotFound() throws Exception {\n+        when(paymentService.search(any(PaymentSearchCriteria.class))).thenReturn(Arrays.asList());\n+        MvcResult result = restActions\n+            .get(\"/cases/12341234213412/payments\")\n+            .andExpect(status().isNotFound())\n+            .andReturn();\n+    }\n+\n+\n+    @Test\n+    public void testRetrieveCasePaymentGroups() throws Exception {\n+        when(paymentGroupService.search(anyString())).thenReturn(Arrays.asList(mock(PaymentFeeLink.class)));\n+        when(paymentGroupDtoMapper.toPaymentGroupDto(any(PaymentFeeLink.class))).thenReturn(PaymentGroupDto.paymentGroupDtoWith().build());\n+        MvcResult result = restActions\n+            .get(\"/cases/12341234213412/paymentgroups\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void testRetrieveCasePaymentGroups_ThrowsPaymentGroupNotFoundException() throws Exception {\n+        when(paymentGroupService.search(anyString())).thenReturn(Arrays.asList());\n+        MvcResult result = restActions\n+            .get(\"/cases/12341234213412/paymentgroups\")\n+            .andExpect(status().isNotFound())\n+            .andReturn();\n+    }\n+\n+}"
  },
  {
    "sha": "3f91970e76c960a423b9fae11b38799c84c2be72",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentControllerTest.java",
    "status": "added",
    "additions": 191,
    "deletions": 0,
    "changes": 191,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,191 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.contract.CreditAccountPaymentRequest;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.contract.util.CurrencyCode;\n+import uk.gov.hmcts.payment.api.contract.util.Service;\n+import uk.gov.hmcts.payment.api.dto.AccountDto;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.AccountService;\n+import uk.gov.hmcts.payment.api.service.CreditAccountPaymentService;\n+import uk.gov.hmcts.payment.api.util.AccountStatus;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class CreditAccountPaymentControllerTest {\n+\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    RestActions restActions;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    @MockBean\n+    private LaunchDarklyFeatureToggler featureToggler;\n+\n+    @MockBean\n+    private AccountService<AccountDto, String> accountService;\n+\n+    @MockBean\n+    @Qualifier(\"loggingCreditAccountPaymentService\")\n+    private CreditAccountPaymentService<PaymentFeeLink, String> creditAccountPaymentService;\n+\n+    private static final String USER_ID = UserResolverBackdoor.AUTHENTICATED_USER_ID;\n+\n+    @Before\n+    public void setup() {\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.gooooogle.com\");\n+    }\n+\n+    @Test\n+    public void testCreateCreditAccountPayment() throws Exception {\n+        List<FeeDto> feeDtoList = new ArrayList<>();\n+        FeeDto fee = FeeDto.feeDtoWith()\n+                        .calculatedAmount(BigDecimal.valueOf(10))\n+                        .code(\"FEE123\")\n+                        .version(\"1\")\n+                        .build();\n+        feeDtoList.add(fee);\n+        CreditAccountPaymentRequest creditAccountPaymentRequest = CreditAccountPaymentRequest.createCreditAccountPaymentRequestDtoWith()\n+                                                                            .amount(BigDecimal.valueOf(100))\n+                                                                            .description(\"New passport application\")\n+                                                                            .ccdCaseNumber(\"ccd_case_number\")\n+                                                                            .caseReference(\"12345\")\n+                                                                            .service(Service.FINREM)\n+                                                                            .currency(CurrencyCode.GBP)\n+                                                                            .siteId(\"AA09\")\n+                                                                            .customerReference(\"customer_reference\")\n+                                                                            .organisationName(\"org-name\")\n+                                                                            .accountNumber(\"AC101010\")\n+                                                                            .fees(feeDtoList)\n+                                                                            .build();\n+        AccountDto accountDto = AccountDto.accountDtoWith()\n+                                    .accountName(\"accountName\")\n+                                    .accountNumber(\"AC101010\")\n+                                    .creditLimit(BigDecimal.valueOf(100))\n+                                    .availableBalance(BigDecimal.valueOf(100))\n+                                    .status(AccountStatus.ACTIVE)\n+                                    .effectiveDate(Date.valueOf(\"2020-03-02\"))\n+                                    .build();\n+        when(accountService.retrieve(anyString())).thenReturn(accountDto);\n+        when(creditAccountPaymentService.create(any(Payment.class), anyList(), anyString())).thenReturn(getPaymentFeeLink());\n+        when(featureToggler.getBooleanValue(anyString(),anyBoolean())).thenReturn(true);\n+        MvcResult result =   restActions\n+                                .post(\"/credit-account-payments\", creditAccountPaymentRequest)\n+                                .andExpect(status().isCreated())\n+                                .andReturn();\n+        PaymentDto paymentDto = objectMapper.readValue(result.getResponse().getContentAsString(), PaymentDto.class);\n+        assertEquals(\"2021-1614709196068\",paymentDto.getReference());\n+    }\n+\n+    @Test\n+    public void testRetrieve() throws Exception {\n+        when(creditAccountPaymentService.retrieveByPaymentReference(anyString())).thenReturn(getPaymentFeeLink());\n+        MvcResult result =   restActions\n+                                .get(\"/credit-account-payments/2021-1614709196068\")\n+                                .andExpect(status().isOk())\n+                                .andReturn();\n+        PaymentDto paymentDto = objectMapper.readValue(result.getResponse().getContentAsString(),PaymentDto.class);\n+        assertEquals(\"ccd-number\",paymentDto.getCcdCaseNumber());\n+    }\n+\n+    @Test\n+    public void testRetrievePaymentStatus() throws Exception {\n+        when(creditAccountPaymentService.retrieveByPaymentReference(anyString())).thenReturn(getPaymentFeeLink());\n+        MvcResult result =   restActions\n+                                .get(\"/credit-account-payments/2021-1614709196068/statuses\")\n+                                .andExpect(status().isOk())\n+                                .andReturn();\n+        PaymentDto paymentDto = objectMapper.readValue(result.getResponse().getContentAsString(),PaymentDto.class);\n+        assertEquals(\"2021-1614709196068\",paymentDto.getReference());\n+\n+    }\n+\n+    private PaymentFeeLink getPaymentFeeLink(){\n+        List<PaymentFee> paymentFees = new ArrayList<>();\n+        PaymentFee fee = PaymentFee.feeWith()\n+            .feeAmount(BigDecimal.valueOf(30))\n+            .calculatedAmount(BigDecimal.valueOf(101.89))\n+            .code(\"X0101\")\n+            .ccdCaseNumber(\"CCD101\")\n+            .build();\n+        paymentFees.add(fee);\n+        List<StatusHistory> statusHistories = new ArrayList<>();\n+        StatusHistory history = StatusHistory.statusHistoryWith()\n+                                    .status(\"success\")\n+                                    .build();\n+        statusHistories.add(history);\n+        Payment payment = Payment.paymentWith()\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .status(\"success\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"card\").build())\n+            .currency(\"GBP\")\n+            .caseReference(\"case-reference\")\n+            .ccdCaseNumber(\"ccd-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"cash\").build())\n+            .dateCreated(Date.valueOf(\"2020-02-01\"))\n+            .externalReference(\"external-reference\")\n+            .reference(\"2021-1614709196068\")\n+            .statusHistories(statusHistories)\n+            .build();\n+        List<Payment> paymentList = new ArrayList<>();\n+        paymentList.add(payment);\n+        return PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"2021-1614709196068\")\n+            .dateCreated(Date.valueOf(\"2020-01-20\"))\n+            .dateUpdated(Date.valueOf(\"2020-01-21\"))\n+            .fees(paymentFees)\n+            .payments(paymentList)\n+            .build();\n+    }\n+\n+}"
  },
  {
    "sha": "b885e226d90e65e4556ac29578d8f87cab573783",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionControllerTest.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,143 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.dto.PaymentGroupDto;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.PaymentService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+import uk.gov.hmcts.payment.api.v1.model.exceptions.PaymentNotFoundException;\n+\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class FeePayApportionControllerTest {\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    RestActions restActions;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    private static final String USER_ID = UserResolverBackdoor.AUTHENTICATED_USER_ID;\n+\n+    @MockBean\n+    private PaymentService<PaymentFeeLink, String> paymentService;\n+\n+    @MockBean\n+    private LaunchDarklyFeatureToggler featureToggler;\n+\n+    @MockBean\n+    private PaymentFeeRepository paymentFeeRepository;\n+\n+    @Before\n+    public void setup(){\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.gooooogle.com\");\n+    }\n+\n+    @Test\n+    public void testRetrieveApportionDetails() throws Exception {\n+        FeePayApportion feePayApportion = FeePayApportion.feePayApportionWith()\n+                                            .feeId(123)\n+                                            .feeAmount(BigDecimal.valueOf(100))\n+                                            .build();\n+        List<FeePayApportion> feePayApportionList= new ArrayList<>();\n+        feePayApportionList.add(feePayApportion);\n+        PaymentFee paymentFee = PaymentFee.feeWith()\n+                                    .code(\"FEE123\")\n+                                    .feeAmount(BigDecimal.valueOf(100))\n+                                    .build();\n+        when(paymentService.retrieve(anyString())).thenReturn(getPaymentFeeLink());\n+        when(featureToggler.getBooleanValue(\"apportion-feature\",false)).thenReturn(true);\n+        when(paymentService.findByPaymentId(anyInt())).thenReturn(feePayApportionList);\n+        when(paymentFeeRepository.findById(anyInt())).thenReturn(java.util.Optional.ofNullable(paymentFee));\n+        MvcResult result = restActions\n+            .get(\"/payment-groups/fee-pay-apportion/RC-1234-1234-1234-1234\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+        PaymentGroupDto paymentGroupDto  = objectMapper.readValue(result.getResponse().getContentAsString(),PaymentGroupDto.class);\n+        assertEquals(\"RC-1234-1234-1234-1234\",paymentGroupDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testRetrieveApportionDetailsThrowsException_WhenPaymentNotFound() throws Exception {\n+        when(paymentService.retrieve(anyString())).thenThrow(PaymentNotFoundException.class);\n+        MvcResult result = restActions\n+            .get(\"/payment-groups/fee-pay-apportion/RC-1519-9028-2432-0001\")\n+            .andExpect(status().isNotFound())\n+            .andReturn();\n+    }\n+\n+    private PaymentFeeLink getPaymentFeeLink(){\n+        List<PaymentFee> paymentFees = new ArrayList<>();\n+        PaymentFee fee = PaymentFee.feeWith()\n+            .feeAmount(BigDecimal.valueOf(30))\n+            .calculatedAmount(BigDecimal.valueOf(10))\n+            .code(\"FEE-123\")\n+            .build();\n+        paymentFees.add(fee);\n+        Payment payment = Payment.paymentWith()\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .status(\"success\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"card\").build())\n+            .currency(\"GBP\")\n+            .caseReference(\"case-reference\")\n+            .ccdCaseNumber(\"ccd-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"cash\").build())\n+            .dateCreated(Date.valueOf(\"2020-02-01\"))\n+            .externalReference(\"external-reference\")\n+            .reference(\"RC-1234-1234-1234-1234\")\n+            .build();\n+        List<Payment> paymentList = new ArrayList<>();\n+        paymentList.add(payment);\n+        return PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"RC-1234-1234-1234-1234\")\n+            .dateCreated(Date.valueOf(\"2020-01-20\"))\n+            .dateUpdated(Date.valueOf(\"2020-01-21\"))\n+            .fees(paymentFees)\n+            .payments(paymentList)\n+            .build();\n+    }\n+}"
  },
  {
    "sha": "5d1de03f46bf88614e1e1e5564998b2715cd4935",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeesControllerTest.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeesControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeesControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeesControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,86 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.service.FeesService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+import uk.gov.hmcts.payment.referencedata.model.Site;\n+import uk.gov.hmcts.payment.referencedata.service.SiteService;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class FeesControllerTest {\n+\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    RestActions restActions;\n+\n+    @MockBean\n+    private FeesService feesService;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    private static final String USER_ID = UserResolverBackdoor.CASEWORKER_ID;\n+\n+    @Before\n+    public void setUp(){\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.moneyclaims.service.gov.uk\");\n+    }\n+\n+    @Test\n+    public void testDeleteFees() throws Exception {\n+        doNothing().when(feesService).deleteFee(anyInt());\n+        MvcResult result1 = restActions.\n+            delete(\"/fees/123\")\n+            .andExpect(status().isNoContent())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public  void testEmptyResultDataException() throws Exception {\n+       doThrow(EmptyResultDataAccessException.class).when(feesService).deleteFee(anyInt());\n+        MvcResult result1 = restActions.\n+            delete(\"/fees/122\")\n+            .andExpect(status().isBadRequest())\n+            .andReturn();\n+    }\n+}"
  },
  {
    "sha": "451b13284054b1da26f84e91c0f0b9fb0ddeca85",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationControllerTest.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,154 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.contract.PaymentAllocationDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentDtoMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.PaymentService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+import uk.gov.hmcts.payment.api.v1.model.exceptions.PaymentNotFoundException;\n+\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class PaymentAllocationControllerTest {\n+\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    RestActions restActions;\n+\n+    @MockBean\n+    private PaymentService<PaymentFeeLink, String> paymentService;\n+\n+    @MockBean\n+    private Payment2Repository paymentRepository;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    private static final String USER_ID = UserResolverBackdoor.AUTHENTICATED_USER_ID;\n+\n+    MockMvc mvc;\n+\n+    @Before\n+    public void setup() {\n+        mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.gooooogle.com\");\n+    }\n+\n+\n+    @Test\n+    public void testAddNewFee() throws Exception {\n+        Mockito.when(paymentService.retrieve(anyString())).thenReturn(getPaymentFeeLink());\n+        PaymentAllocation paymentAllocation = PaymentAllocation.paymentAllocationWith()\n+                                                    .receivingOffice(\"receiving-off\")\n+                                                    .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"allocated\").build())\n+                                                    .paymentGroupReference(\"group-reference\")\n+                                                    .paymentReference(\"payment-reference\")\n+                                                    .id(null)\n+                                                    .dateCreated(Date.valueOf(\"2020-02-21\"))\n+                                                    .userName(\"user123\")\n+                                                    .build();\n+        Payment payment = Payment.paymentWith()\n+                            .paymentAllocation(Arrays.asList(paymentAllocation))\n+                            .build();\n+        Mockito.when(paymentRepository.save(Mockito.any(Payment.class))).thenReturn(payment);\n+        MvcResult mvcResult = restActions\n+            .post(\"/payment-allocations\",getPaymentAllocationDto())\n+            .andExpect(status().isCreated())\n+            .andReturn();\n+        PaymentAllocationDto paymentAllocationDto = objectMapper.readValue(mvcResult.getResponse().getContentAsString(),PaymentAllocationDto.class);\n+        assertEquals(\"group-reference\",paymentAllocationDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testAddNewFee_WhenPaymentNotFound() throws Exception {\n+        Mockito.when(paymentService.retrieve(anyString())).thenThrow(PaymentNotFoundException.class);\n+        MvcResult mvcResult = restActions\n+            .post(\"/payment-allocations\",getPaymentAllocationDto())\n+            .andExpect(status().isNotFound())\n+            .andReturn();\n+    }\n+\n+    private PaymentFeeLink getPaymentFeeLink(){\n+        PaymentFee fee = PaymentFee.feeWith()\n+            .feeAmount(BigDecimal.valueOf(30))\n+            .calculatedAmount(BigDecimal.valueOf(10))\n+            .code(\"FEE-123\")\n+            .build();\n+        return PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"RC-1234-1234-1234-1234\")\n+            .dateCreated(Date.valueOf(\"2020-01-20\"))\n+            .dateUpdated(Date.valueOf(\"2020-01-21\"))\n+            .fees(Arrays.asList(fee))\n+            .payments(Arrays.asList( Payment.paymentWith()\n+                .paymentStatus(PaymentStatus.SUCCESS)\n+                .status(\"success\")\n+                .paymentChannel(PaymentChannel.paymentChannelWith().name(\"card\").build())\n+                .currency(\"GBP\")\n+                .caseReference(\"case-reference\")\n+                .ccdCaseNumber(\"ccd-number\")\n+                .paymentMethod(PaymentMethod.paymentMethodWith().name(\"cash\").build())\n+                .dateCreated(Date.valueOf(\"2020-02-20\"))\n+                .dateUpdated(Date.valueOf(\"2020-02-21\"))\n+                .externalReference(\"external-reference\")\n+                .reference(\"RC-1234-1234-1234-1234\")\n+                .build()))\n+            .build();\n+    }\n+\n+\n+    private PaymentAllocationDto getPaymentAllocationDto(){\n+        PaymentAllocationDto paymentAllocationRequest = PaymentAllocationDto.paymentAllocationDtoWith()\n+            .paymentReference(\"RC-1234-1234-1234-1234\")\n+            .paymentGroupReference(\"group-reference\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"allocated\").build())\n+            .reason(\"reason\")\n+            .explanation(\"explanation\")\n+            .userName(\"user123\")\n+            .receivingOffice(\"receiving-off\")\n+            .unidentifiedReason(\"unidentified-reason\")\n+            .build();\n+        return  paymentAllocationRequest;\n+    }\n+}"
  },
  {
    "sha": "5623e4ea04aac936217096223a9602827cc85b29",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentControllerTest.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,162 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.joda.time.LocalDate;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.contract.PaymentsResponse;\n+import uk.gov.hmcts.payment.api.contract.UpdatePaymentRequest;\n+import uk.gov.hmcts.payment.api.dto.PaymentSearchCriteria;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.service.PaymentService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.MOCK;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = MOCK)\n+public class PaymentControllerTest {\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    RestActions restActions;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    @MockBean\n+    private PaymentService<PaymentFeeLink, String> paymentService;\n+\n+    @MockBean\n+    private PaymentStatusRepository paymentStatusRepository;\n+\n+    private static final String USER_ID = UserResolverBackdoor.AUTHENTICATED_USER_ID;\n+\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+\n+    @Before\n+    public void setup() {\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.gooooogle.com\");\n+    }\n+\n+    @Test\n+    public void testUpdateCaseReference() throws Exception {\n+        when(paymentService.retrieve(anyString())).thenReturn(getPaymentFeeLink());\n+        UpdatePaymentRequest request = UpdatePaymentRequest.updatePaymentRequestWith()\n+                                                .caseReference(\"case-reference\")\n+                                                .ccdCaseNumber(\"ccd-number\").build();\n+        MvcResult mvcResult = restActions\n+            .patch(\"/payments/RC-1234-1234-1234-1234\",request)\n+            .andExpect(status().isNoContent())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void  testRetrievePayments() throws Exception {\n+        String startDate = LocalDate.parse(\"2020-01-20\").toString(DATE_FORMAT);\n+        String endDate = LocalDate.parse(\"2020-01-23\").toString(DATE_FORMAT);\n+        when(paymentService.search(any(PaymentSearchCriteria.class))).thenReturn(getPaymentFeeLinkList());\n+        MvcResult result = restActions\n+            .get(\"/payments?start_date=\" + startDate + \"&end_date=\" + endDate)\n+            .andExpect(status().isOk())\n+            .andReturn();\n+        PaymentsResponse paymentsResponse = objectMapper.readValue(result.getResponse().getContentAsString(),PaymentsResponse.class);\n+        assertEquals(\"ccd-number\",paymentsResponse.getPayments().get(0).getCcdCaseNumber());\n+    }\n+\n+    @Test\n+    public void testUpdatePaymentStatus() throws Exception {\n+        when(paymentStatusRepository.findByNameOrThrow(anyString())).thenReturn(PaymentStatus.FAILED);\n+        when(paymentService.retrieve(anyString())).thenReturn(getPaymentFeeLink());\n+        MvcResult result = restActions\n+            .patch(\"/payments/RC-1234-1234-1234-1234/status/failed\")\n+            .andExpect(status().isNoContent())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void testRetrievePayment() throws Exception {\n+        when(paymentService.retrieve(anyString())).thenReturn(getPaymentFeeLink());\n+        MvcResult result = restActions\n+            .get(\"/payments/RC-1234-1234-1234-1234\")\n+            .andExpect(status().isOk())\n+            .andReturn();\n+    }\n+\n+    private PaymentFeeLink getPaymentFeeLink(){\n+        List<PaymentFee> paymentFees = new ArrayList<>();\n+        PaymentFee fee = PaymentFee.feeWith()\n+            .feeAmount(BigDecimal.valueOf(30))\n+            .calculatedAmount(BigDecimal.valueOf(10))\n+            .code(\"FEE-123\")\n+            .build();\n+        paymentFees.add(fee);\n+        Payment payment = Payment.paymentWith()\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .status(\"success\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"card\").build())\n+            .currency(\"GBP\")\n+            .caseReference(\"case-reference\")\n+            .ccdCaseNumber(\"ccd-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"cash\").build())\n+            .dateCreated(Date.valueOf(\"2020-01-20\"))\n+            .dateUpdated(Date.valueOf(\"2020-01-21\"))\n+            .externalReference(\"external-reference\")\n+            .reference(\"RC-1234-1234-1234-1234\")\n+            .build();\n+        List<Payment> paymentList = new ArrayList<>();\n+        paymentList.add(payment);\n+        return PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"RC-1234-1234-1234-1234\")\n+            .dateCreated(Date.valueOf(\"2020-01-20\"))\n+            .dateUpdated(Date.valueOf(\"2020-01-21\"))\n+            .fees(paymentFees)\n+            .payments(paymentList)\n+            .build();\n+    }\n+\n+    private List<PaymentFeeLink> getPaymentFeeLinkList(){\n+        List<PaymentFeeLink> paymentFeeLinkList = new ArrayList<>();\n+        paymentFeeLinkList.add(getPaymentFeeLink());\n+        return paymentFeeLinkList;\n+    }\n+}"
  },
  {
    "sha": "145753767ea658f83f8ccab658b1257fd491fb5d",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/RemissionControllerTest.java",
    "status": "added",
    "additions": 196,
    "deletions": 0,
    "changes": 196,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/RemissionControllerTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/RemissionControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/RemissionControllerTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,196 @@\n+package uk.gov.hmcts.payment.api.controllers;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.validator.routines.checkdigit.CheckDigitException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.componenttests.PaymentDbBackdoor;\n+import uk.gov.hmcts.payment.api.componenttests.PaymentFeeDbBackdoor;\n+import uk.gov.hmcts.payment.api.componenttests.RemissionDbBackdoor;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.dto.RemissionDto;\n+import uk.gov.hmcts.payment.api.dto.RemissionRequest;\n+import uk.gov.hmcts.payment.api.dto.RemissionServiceRequest;\n+import uk.gov.hmcts.payment.api.model.PaymentFee;\n+import uk.gov.hmcts.payment.api.model.PaymentFeeLink;\n+import uk.gov.hmcts.payment.api.model.Remission;\n+import uk.gov.hmcts.payment.api.service.RemissionService;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+import uk.gov.hmcts.payment.api.v1.model.exceptions.InvalidPaymentGroupReferenceException;\n+import uk.gov.hmcts.payment.referencedata.model.Site;\n+import uk.gov.hmcts.payment.referencedata.service.SiteService;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@RunWith(SpringRunner.class)\n+@ActiveProfiles({\"local\", \"componenttest\"})\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)\n+public class RemissionControllerTest {\n+    private RestActions restActions;\n+\n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n+    @Autowired\n+    protected ServiceResolverBackdoor serviceRequestAuthorizer;\n+\n+    @Autowired\n+    protected UserResolverBackdoor userRequestAuthorizer;\n+\n+    @Autowired\n+    private WebApplicationContext webApplicationContext;\n+\n+    @MockBean\n+    private RemissionService remissionService;\n+\n+    @MockBean\n+    private SiteService<Site, String> siteServiceMock;\n+\n+    private static final String USER_ID = UserResolverBackdoor.CITIZEN_ID;\n+\n+    RemissionRequest remission;\n+    @Before\n+    public void setUp() {\n+        MockMvc mvc = webAppContextSetup(webApplicationContext).apply(springSecurity()).build();\n+        this.restActions = new RestActions(mvc, serviceRequestAuthorizer, userRequestAuthorizer, objectMapper);\n+\n+        restActions\n+            .withAuthorizedService(\"divorce\")\n+            .withAuthorizedUser(USER_ID)\n+            .withUserId(USER_ID)\n+            .withReturnUrl(\"https://www.moneyclaims.service.gov.uk\");\n+\n+        remission = RemissionRequest.createRemissionRequestWith()\n+            .beneficiaryName(\"beneficiary\")\n+            .caseReference(\"caseRef1234\")\n+            .ccdCaseNumber(\"CCD1234\")\n+            .hwfAmount(new BigDecimal(\"10.00\"))\n+            .hwfReference(\"HWFref\")\n+            .siteId(\"AA001\")\n+            .fee(getFee())\n+            .build();\n+\n+        List<Site> serviceReturn = Arrays.asList(Site.siteWith()\n+                .sopReference(\"sop\")\n+                .siteId(\"AA99\")\n+                .name(\"name\")\n+                .service(\"service\")\n+                .id(1)\n+                .build(),\n+            Site.siteWith()\n+                .sopReference(\"sop\")\n+                .siteId(\"AA001\")\n+                .name(\"name\")\n+                .service(\"service\")\n+                .id(1)\n+                .build()\n+        );\n+\n+        when(siteServiceMock.getAllSites()).thenReturn(serviceReturn);\n+    }\n+\n+    @Test\n+    public void shouldReturnRemissionCreatedForRemissionV1() throws Exception {\n+\n+        List<Remission> remissionList = new ArrayList<>();\n+        Remission remission1 = Remission.remissionWith()\n+                                    .remissionReference(\"remission-reference\")\n+                                    .build();\n+        remissionList.add(remission1);\n+        PaymentFee fee = PaymentFee.feeWith().build();\n+        List<PaymentFee> paymentFees = new ArrayList<>();\n+        paymentFees.add(fee);\n+        PaymentFeeLink paymentFeeLink = PaymentFeeLink.paymentFeeLinkWith()\n+                                            .remissions(remissionList)\n+                                            .payments(null)\n+                                            .paymentReference(\"payment-reference\")\n+                                            .fees(paymentFees)\n+                                            .build();\n+        when(remissionService.createRemission(Mockito.any(RemissionServiceRequest.class))).thenReturn(paymentFeeLink);\n+        MvcResult mvcResult = restActions\n+                            .post(\"/remission\", remission)\n+                            .andExpect(status().isCreated())\n+                            .andReturn();\n+        RemissionDto remissionDto = (RemissionDto) objectMapper.readValue(mvcResult.getResponse().getContentAsString(),RemissionDto.class);\n+        assertEquals(\"remission-reference\",remissionDto.getRemissionReference());\n+    }\n+\n+    @Test\n+    public void shouldSendRemissionCreatedForRemissio() throws Exception {\n+        PaymentFeeLink paymentFeeLink = getPaymentFeeLink();\n+        when(remissionService.createRemission(Mockito.any(RemissionServiceRequest.class))).thenReturn(paymentFeeLink);\n+        MvcResult mvcResult = restActions\n+            .post(\"/remissions\", remission)\n+            .andExpect(status().isCreated())\n+            .andReturn();\n+        RemissionDto remissionDto = (RemissionDto) objectMapper.readValue(mvcResult.getResponse().getContentAsString(),RemissionDto.class);\n+        assertEquals(\"remission-reference\",remissionDto.getRemissionReference());\n+    }\n+\n+    @Test\n+    public void shouldSendBadRequestWhenDataIntegrityViolationException() throws Exception {\n+        when(remissionService.createRemission(Mockito.any(RemissionServiceRequest.class))).thenThrow(DataIntegrityViolationException.class);\n+        MvcResult mvcResult = restActions\n+            .post(\"/remission\", remission)\n+            .andExpect(status().isBadRequest())\n+            .andReturn();\n+    }\n+\n+    @Test\n+    public void  shouldSendBadRequestWhenInvalidPaymentGroupReferenceException() throws Exception {\n+        when(remissionService.createRemission(Mockito.any(RemissionServiceRequest.class))).thenThrow(InvalidPaymentGroupReferenceException.class);\n+        MvcResult mvcResult = restActions\n+            .post(\"/remission\", remission)\n+            .andExpect(status().isNotFound())\n+            .andReturn();\n+    }\n+\n+    private PaymentFeeLink getPaymentFeeLink(){\n+        List<Remission> remissionList = new ArrayList<>();\n+        Remission remission1 = Remission.remissionWith()\n+            .remissionReference(\"remission-reference\")\n+            .build();\n+        remissionList.add(remission1);\n+        PaymentFee fee = PaymentFee.feeWith().build();\n+        List<PaymentFee> paymentFees = new ArrayList<>();\n+        paymentFees.add(fee);\n+        return PaymentFeeLink.paymentFeeLinkWith()\n+            .remissions(remissionList)\n+            .payments(null)\n+            .paymentReference(\"payment-reference\")\n+            .fees(paymentFees)\n+            .build();\n+\n+    }\n+\n+    private FeeDto getFee() {\n+        return FeeDto.feeDtoWith()\n+            .calculatedAmount(new BigDecimal(\"10.00\"))\n+            .ccdCaseNumber(\"CCD1234\")\n+            .version(\"1\")\n+            .code(\"FEE0123\")\n+            .build();\n+    }\n+}"
  },
  {
    "sha": "a1cf3dd609103c5f737a9ff807ecd251c47a9ed7",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/controllers/utils/ReplayCreditAccountPaymentUtils.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/utils/ReplayCreditAccountPaymentUtils.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/controllers/utils/ReplayCreditAccountPaymentUtils.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/controllers/utils/ReplayCreditAccountPaymentUtils.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,119 @@\n+package uk.gov.hmcts.payment.api.controllers.utils;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang.math.RandomUtils;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.stereotype.Component;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.payment.api.componenttests.util.CSVUtil;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.contract.CreditAccountPaymentRequest;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.contract.util.CurrencyCode;\n+import uk.gov.hmcts.payment.api.contract.util.Service;\n+import uk.gov.hmcts.payment.api.dto.AccountDto;\n+import uk.gov.hmcts.payment.api.service.AccountService;\n+import uk.gov.hmcts.payment.api.util.AccountStatus;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.ServiceResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.backdoors.UserResolverBackdoor;\n+import uk.gov.hmcts.payment.api.v1.componenttests.sugar.RestActions;\n+\n+import javax.validation.constraints.NotNull;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.*;\n+\n+import static org.mockito.Mockito.when;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;\n+\n+@Component\n+public class ReplayCreditAccountPaymentUtils {\n+\n+    public CreditAccountPaymentRequest getPBAPayment(Double calculatedAmount, List<FeeDto> fees) {\n+        return CreditAccountPaymentRequest.createCreditAccountPaymentRequestDtoWith()\n+            .amount(new BigDecimal(calculatedAmount))\n+            .ccdCaseNumber(\"1607065\" + RandomUtils.nextInt(999999999))\n+            .accountNumber(\"\\\"PBA0073\" + RandomUtils.nextInt(999) + \"\\\"\")\n+            .description(\"Money Claim issue fee\")\n+            .caseReference(\"\\\"9eb95270-7fee-48cf-afa2-e6c58ee\" + RandomUtils.nextInt(999) + \"ba\\\"\")\n+            .service(Service.CMC)\n+            .currency(CurrencyCode.GBP)\n+            .customerReference(\"DEA2682/1/SWG\" + RandomUtils.nextInt(999))\n+            .organisationName(\"\\\"Slater & Gordon\" + RandomUtils.nextInt(999) + \"\\\"\")\n+            .siteId(\"Y689\")\n+            .fees(fees)\n+            .build();\n+    }\n+\n+    @NotNull\n+    public List<FeeDto> getFees(Double calculatedAmount) {\n+        List<FeeDto> fees = new ArrayList<>();\n+        fees.add(FeeDto.feeDtoWith()\n+            .code(\"FEE020\" + RandomUtils.nextInt(9))\n+            .version(Integer.toString(RandomUtils.nextInt(9)))\n+            .calculatedAmount(new BigDecimal(calculatedAmount)).build());\n+        return fees;\n+    }\n+\n+    public String setCreditAccountPaymentLiberataCheckFeature(boolean enabled) throws Exception {\n+        String url = \"/api/ff4j/store/features/credit-account-payment-liberata-check/\";\n+        if (enabled) {\n+            url += \"enable\";\n+        } else {\n+            url += \"disable\";\n+        }\n+        return url;\n+    }\n+\n+    public void createCSV(Map<String, CreditAccountPaymentRequest> csvParseMap, String fileName) throws IOException {\n+        String csvFile = \"src/test/resources/\" +fileName;\n+        FileWriter writer = new FileWriter(csvFile);\n+\n+        //for header\n+        CSVUtil.writeLine\n+            (writer, Arrays.asList(\"index_col\", \"impacted.payment.reference\", \"payment.amount\", \"payment.ccd_case_number\",\n+                \"payment.pba_number\", \"payment.description\", \"payment.case_reference\", \"payment.service\",\n+                \"payment.currency\", \"payment.customer_reference\", \"payment.organisation_name\", \"payment.site_id\",\n+                \"fee.code\", \"fee.calculated_amount\", \"fee.version\"));\n+\n+        csvParseMap.entrySet().stream().forEach(paymentRequestEntry ->\n+            {\n+                CreditAccountPaymentRequest request = paymentRequestEntry.getValue();\n+                List<String> list = new ArrayList<>();\n+                list.add(\"\");\n+                list.add(paymentRequestEntry.getKey());\n+                list.add(request.getAmount().toString());\n+                list.add(request.getCcdCaseNumber());\n+                list.add(request.getAccountNumber());\n+                list.add(request.getDescription());\n+                list.add(request.getCaseReference());\n+                list.add(\"CMC\");\n+                list.add(\"GBP\");\n+                list.add(request.getCustomerReference());\n+                list.add(request.getOrganisationName());\n+                list.add(request.getSiteId());\n+                list.add(request.getFees().get(0).getCode());\n+                list.add(request.getFees().get(0).getCalculatedAmount().toString());\n+                list.add(request.getFees().get(0).getVersion());\n+\n+                try {\n+                    CSVUtil.writeLine(writer, list);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        );\n+\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+}"
  },
  {
    "sha": "5008ddfcf53c02e82d7eee2e57c38e5672ef89f6",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/.DS_Store",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/.DS_Store",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/.DS_Store",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/.DS_Store?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e"
  },
  {
    "sha": "531d6e679ca59cac75da9f6bd1848eb815fa88bb",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/BulkScanningReportMapperTest.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/BulkScanningReportMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/BulkScanningReportMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/BulkScanningReportMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,145 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.payment.api.contract.BulkScanningReportDto;\n+import uk.gov.hmcts.payment.api.contract.BulkScanningUnderOverPaymentDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.BulkScanningReportMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class BulkScanningReportMapperTest {\n+\n+    BulkScanningReportMapper bulkScanningReportMapper = new BulkScanningReportMapper();\n+\n+    @Test\n+    public void testToBulkScanningUnallocatedReportDto(){\n+        List<BulkScanningReportDto> bulkScanningReportDtos = new ArrayList<>();\n+        BulkScanningReportDto bulkScanningReportDto = BulkScanningReportDto.report2DtoWith()\n+                                                        .respServiceId(\"siteId\")\n+                                                        .respServiceName(\"service-type\")\n+                                                        .ccdExceptionReference(\"case-reference\")\n+                                                        .build();\n+        bulkScanningReportDtos.add(bulkScanningReportDto);\n+        List<BulkScanningReportDto> responseDtos = bulkScanningReportMapper.toBulkScanningUnallocatedReportDto(getPayments());\n+        assertEquals(\"service-type\",responseDtos.get(0).getRespServiceName());\n+        assertEquals(\"ccd-case-number-1\",responseDtos.get(0).getCcdCaseReference());\n+    }\n+\n+    @Test\n+    public void testToBulkScanningUnallocatedReportDtoFilteringExelaPayments() {\n+        List<BulkScanningReportDto> responseDtos = bulkScanningReportMapper.toBulkScanningUnallocatedReportDto(getPayments());\n+        assertEquals(1,responseDtos.size());\n+        assertEquals(\"ccd-case-number-1\",responseDtos.get(0).getCcdCaseReference());\n+\n+    }\n+\n+    @Test\n+    public void testToSurplusAndShortfallReportdto(){\n+        List<BulkScanningUnderOverPaymentDto> underOverPaymentDtos = new ArrayList<>();\n+        BulkScanningUnderOverPaymentDto bulkScanningUnderOverPaymentDto = BulkScanningUnderOverPaymentDto.report2DtoWith()\n+                                                                            .respServiceId(\"siteId\")\n+                                                                            .respServiceName(\"service-type\")\n+                                                                            .ccdExceptionReference(\"case-reference\")\n+                                                                            .build();\n+        underOverPaymentDtos.add(bulkScanningUnderOverPaymentDto);\n+        List<BulkScanningUnderOverPaymentDto> responseOverPaymentDtos = bulkScanningReportMapper.toSurplusAndShortfallReportdto(getPayments());\n+        assertEquals(\"service-type\",responseOverPaymentDtos.get(0).getRespServiceName());\n+        assertEquals(\"case-reference\",responseOverPaymentDtos.get(0).getCcdExceptionReference());\n+    }\n+\n+    @Test\n+    public void testToSurplusAndShortfallReportdtoFilteringExelaPayments(){\n+        List<BulkScanningUnderOverPaymentDto> responseDtos = bulkScanningReportMapper.toSurplusAndShortfallReportdto(getPayments());\n+        assertEquals(1,responseDtos.size());\n+        assertEquals(\"ccd-case-number-3\",responseDtos.get(0).getCcdCaseReference());\n+    }\n+\n+    private List<Payment> getPayments(){\n+        List<Payment> payments = new ArrayList<Payment>();\n+        List<PaymentAllocation> paymentAllocations1 = new ArrayList<PaymentAllocation>();\n+        List<PaymentAllocation> paymentAllocations2 = new ArrayList<PaymentAllocation>();\n+        PaymentAllocation allocation1 = PaymentAllocation.paymentAllocationWith()\n+            .receivingOffice(\"receiving-office\")\n+            .unidentifiedReason(\"reason\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"Transferred\").build()).build();\n+        PaymentAllocation allocation2 = PaymentAllocation.paymentAllocationWith()\n+            .receivingOffice(\"receiving-office\")\n+            .unidentifiedReason(\"reason\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"Allocated\").build()).build();\n+        paymentAllocations1.add(allocation1);\n+        paymentAllocations2.add(allocation2);\n+        Payment payment1 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .ccdCaseNumber(\"ccd-case-number-1\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .id(1).paymentAllocation(paymentAllocations1).build();\n+        Payment payment2 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"non-exela\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .ccdCaseNumber(\"ccd-case-number-2\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .id(2).paymentAllocation(paymentAllocations1).build();\n+        Payment payment3 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .ccdCaseNumber(\"ccd-case-number-3\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .id(1).paymentAllocation(paymentAllocations2).build();\n+        payments.add(payment1);\n+        payments.add(payment2);\n+        payments.add(payment3);\n+        PaymentFee fee = PaymentFee.feeWith().feeAmount(new BigDecimal(\"100.00\")).ccdCaseNumber(\"ccd-case-number\").calculatedAmount(new BigDecimal(\"100.00\")).build();\n+        List<PaymentFee> paymentFees = new ArrayList<PaymentFee>();\n+        paymentFees.add(fee);\n+        Remission remission = Remission.remissionWith()\n+            .hwfAmount(new BigDecimal(\"10.00\"))\n+            .build();\n+        List<Remission> remissionList = new ArrayList<Remission>();\n+        remissionList.add(remission);\n+        PaymentFeeLink feeLink = PaymentFeeLink.paymentFeeLinkWith()\n+            .fees(paymentFees)\n+            .payments(payments)\n+            .remissions(remissionList)\n+            .build();\n+        payment1.setPaymentLink(feeLink);\n+        payment2.setPaymentLink(feeLink);\n+        payment3.setPaymentLink(feeLink);\n+\n+        return payments;\n+    }\n+\n+}"
  },
  {
    "sha": "77b6ad4d2077bec81b5ad2920df15f80db46fa48",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountDtoMapperTest.java",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountDtoMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountDtoMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountDtoMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,159 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.contract.CreditAccountPaymentRequest;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.contract.StatusHistoryDto;\n+import uk.gov.hmcts.payment.api.contract.util.CurrencyCode;\n+import uk.gov.hmcts.payment.api.contract.util.Service;\n+import uk.gov.hmcts.payment.api.dto.PaymentGroupDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.CreditAccountDtoMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CreditAccountDtoMapperTest {\n+    @Mock\n+    LaunchDarklyFeatureToggler featureToggler;\n+\n+    @InjectMocks\n+    CreditAccountDtoMapper creditAccountDtoMapper = new CreditAccountDtoMapper();\n+\n+    List<Payment> payments = new ArrayList<Payment>();\n+\n+    Payment payment1;\n+\n+    PaymentFeeLink feeLink;\n+\n+    @Before\n+    public void initiate(){\n+        List<PaymentAllocation> paymentAllocations1 = new ArrayList<PaymentAllocation>();\n+        PaymentAllocation allocation1 = PaymentAllocation.paymentAllocationWith()\n+            .receivingOffice(\"receiving-office\")\n+            .unidentifiedReason(\"reason\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"Transferred\").build()).build();\n+        paymentAllocations1.add(allocation1);\n+        StatusHistory statusHistory = StatusHistory.statusHistoryWith()\n+                                                .status(\"success\")\n+                                                .externalStatus(\"external-status\")\n+                                                .errorCode(\"\")\n+                                                .message(\"\")\n+                                                .dateCreated(new Date(2021,1,1))\n+                                                .dateUpdated(new Date(2021,1,10))\n+                                                .build();\n+        List<StatusHistory> statusHistories = new ArrayList<StatusHistory>();\n+        statusHistories.add(statusHistory);\n+        payment1 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .reference(\"RC-1612-3710-5335-6484\")\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .currency(\"GBP\")\n+            .statusHistories(statusHistories)\n+            .id(1).paymentAllocation(paymentAllocations1).build();\n+        payments.add(payment1);\n+        PaymentFee fee = PaymentFee.feeWith().feeAmount(new BigDecimal(\"100.00\")).ccdCaseNumber(\"ccd-case-number\").calculatedAmount(new BigDecimal(\"100.00\")).build();\n+        List<PaymentFee> paymentFees = new ArrayList<PaymentFee>();\n+        paymentFees.add(fee);\n+        Remission remission = Remission.remissionWith()\n+            .hwfAmount(new BigDecimal(\"10.00\"))\n+            .build();\n+        List<Remission> remissionList = new ArrayList<Remission>();\n+        remissionList.add(remission);\n+        feeLink = PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"payment-reference\")\n+            .fees(paymentFees)\n+            .payments(payments)\n+            .remissions(remissionList)\n+            .build();\n+        payment1.setPaymentLink(feeLink);\n+\n+    }\n+\n+\n+    @Test\n+    public void testToPaymentRequest(){\n+        CreditAccountPaymentRequest creditAccountPayment = CreditAccountPaymentRequest.createCreditAccountPaymentRequestDtoWith()\n+                                                                .amount(new BigDecimal(\"100.00\"))\n+                                                                .description(\"description\")\n+                                                                .service(Service.CMC)\n+                                                                .ccdCaseNumber(\"1234567890123\")\n+                                                                .currency(CurrencyCode.GBP)\n+                                                                .siteId(\"site-id\").build();\n+        Payment payment = creditAccountDtoMapper.toPaymentRequest(creditAccountPayment);\n+        assertEquals(\"1234567890123\",payment.getCcdCaseNumber());\n+        assertEquals(\"site-id\",payment.getSiteId());\n+    }\n+\n+    @Test\n+    public void testToRetrievePaymentGroupReferenceResponse(){\n+        PaymentGroupDto payment = creditAccountDtoMapper.toRetrievePaymentGroupReferenceResponse(feeLink);\n+        assertEquals(\"payment-reference\",payment.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToRetrievePaymentResponse(){\n+        PaymentFee fee = PaymentFee.feeWith().feeAmount(new BigDecimal(\"100.00\")).ccdCaseNumber(\"ccd-case-number\").calculatedAmount(new BigDecimal(\"100.00\")).build();\n+        List<PaymentFee> paymentFees = new ArrayList<PaymentFee>();\n+        paymentFees.add(fee);\n+        PaymentDto paymentDto = creditAccountDtoMapper.toRetrievePaymentResponse(payment1,paymentFees);\n+        assertEquals(new BigDecimal(\"100.00\"),paymentDto.getAmount());\n+        assertEquals(\"ccd-case-number\",paymentDto.getCcdCaseNumber());\n+    }\n+\n+    @Test\n+    public void testToCreateCreditAccountPaymentResponse(){\n+        PaymentDto paymentDto = creditAccountDtoMapper.toCreateCreditAccountPaymentResponse(feeLink);\n+        assertEquals(\"RC-1612-3710-5335-6484\",paymentDto.getReference());\n+    }\n+\n+    @Test\n+    public void testToRetrievePaymentStatusResponse(){\n+        PaymentDto paymentDto = creditAccountDtoMapper.toRetrievePaymentStatusResponse(payment1);\n+        assertEquals(new BigDecimal(\"100.00\"),paymentDto.getAmount());\n+        assertEquals(\"RC-1612-3710-5335-6484\",paymentDto.getReference());\n+    }\n+\n+    @Test\n+    public void testToFee(){\n+        FeeDto feeDto = FeeDto.feeDtoWith()\n+                        .calculatedAmount(new BigDecimal((\"100.00\")))\n+                        .code(\"FEE123\")\n+                        .version(\"1\")\n+                        .volume(1)\n+                        .feeAmount(new BigDecimal(\"50.00\"))\n+                        .netAmount(new BigDecimal(\"50.00\"))\n+                        .dateCreated(new Date(2020,10,1))\n+                        .ccdCaseNumber(\"123456789012345\")\n+                        .build();\n+        when(featureToggler.getBooleanValue(Mockito.any(String.class),Mockito.anyBoolean())).thenReturn(true);\n+        PaymentFee paymentFee = creditAccountDtoMapper.toFee(feeDto);\n+        assertEquals(\"123456789012345\",paymentFee.getCcdCaseNumber());\n+        assertEquals(\"FEE123\",paymentFee.getCode());\n+\n+    }\n+}"
  },
  {
    "sha": "4b47e81be6d4eeab717f37afa02b3c93ec2ef949",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountPaymentRequestMapperTest.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountPaymentRequestMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountPaymentRequestMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/CreditAccountPaymentRequestMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,66 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.payment.api.contract.CreditAccountPaymentRequest;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.contract.util.CurrencyCode;\n+import uk.gov.hmcts.payment.api.contract.util.Service;\n+import uk.gov.hmcts.payment.api.dto.mapper.CreditAccountDtoMapper;\n+import uk.gov.hmcts.payment.api.model.Payment;\n+import uk.gov.hmcts.payment.api.model.PaymentFee;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CreditAccountPaymentRequestMapperTest {\n+\n+    @Mock\n+    CreditAccountDtoMapper creditAccountDtoMapper;\n+\n+    @InjectMocks\n+    CreditAccountPaymentRequestMapper creditAccountPaymentRequestMapper = new CreditAccountPaymentRequestMapper();\n+\n+    CreditAccountPaymentRequest creditAccountPaymentRequest;\n+\n+    @Before\n+    public void initiate(){\n+        List<FeeDto> fees = new ArrayList<>();\n+        FeeDto fee = FeeDto.feeDtoWith().ccdCaseNumber(\"ccd-case-number\").build();\n+        fees.add(fee);\n+        creditAccountPaymentRequest = CreditAccountPaymentRequest.createCreditAccountPaymentRequestDtoWith()\n+            .amount(new BigDecimal(\"100.00\"))\n+            .description(\"description\")\n+            .ccdCaseNumber(\"ccd-case-number-1\")\n+            .caseReference(\"case-reference\")\n+            .fees(fees)\n+            .currency(CurrencyCode.GBP).service(Service.CMC).customerReference(\"reference\").organisationName(\"org-name\")\n+            .accountNumber(\"acc-number\").siteId(\"site-id\").build();\n+    }\n+\n+    @Test\n+    public void testMapPBARequest(){\n+        Payment payment = creditAccountPaymentRequestMapper.mapPBARequest(creditAccountPaymentRequest);\n+        assertEquals(\"ccd-case-number-1\",payment.getCcdCaseNumber());\n+        assertEquals(\"case-reference\",payment.getCaseReference());\n+    }\n+\n+    @Test\n+    public void testMapPBAFeesFromRequest(){\n+        PaymentFee fee = PaymentFee.feeWith().code(\"FEE123\").feeAmount(new BigDecimal(\"100.00\")).ccdCaseNumber(\"ccd-case-number\").build();\n+        when(creditAccountDtoMapper.toFee(Mockito.any(FeeDto.class))).thenReturn(fee);\n+        List<PaymentFee> paymentFees = creditAccountPaymentRequestMapper.mapPBAFeesFromRequest(creditAccountPaymentRequest);\n+        assertEquals(\"ccd-case-number\",paymentFees.get(0).getCcdCaseNumber());\n+        assertEquals(\"FEE123\",paymentFees.get(0).getCode());\n+    }\n+}"
  },
  {
    "sha": "a6a0df54a2a65714dec0a8dcfe418064bef57ba1",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/PBAStatusErrorMapperTest.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PBAStatusErrorMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PBAStatusErrorMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PBAStatusErrorMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,102 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.Appender;\n+import ch.qos.logback.core.read.ListAppender;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.runner.RunWith;\n+import org.mockito.*;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.LoggingEvent;\n+import uk.gov.hmcts.payment.api.contract.CreditAccountPaymentRequest;\n+import uk.gov.hmcts.payment.api.dto.AccountDto;\n+import uk.gov.hmcts.payment.api.model.Payment;\n+import uk.gov.hmcts.payment.api.model.PaymentStatus;\n+import uk.gov.hmcts.payment.api.util.AccountStatus;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static uk.gov.hmcts.payment.api.util.AccountStatus.*;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({LoggerFactory.class})\n+public class PBAStatusErrorMapperTest {\n+    private static CreditAccountPaymentRequest creditAccountPaymentRequest;\n+\n+    private static Payment payment;\n+\n+    private static AccountDto activeAccountDetails;\n+    private static AccountDto activeAccountInsufficientDetails;\n+    private static AccountDto onHoldAccountDetails;\n+    private static AccountDto deletedAccountDetails;\n+\n+    private static Logger mockLOG;\n+\n+\n+    @BeforeClass\n+    public static void initiate(){\n+        mockStatic(LoggerFactory.class);\n+        mockLOG = mock(Logger.class);\n+        when(LoggerFactory.getLogger(any(Class.class))).thenReturn(mockLOG);\n+        creditAccountPaymentRequest = CreditAccountPaymentRequest.createCreditAccountPaymentRequestDtoWith()\n+                                        .amount(new BigDecimal(\"10.00\"))\n+                                        .build();\n+        payment = Payment.paymentWith().ccdCaseNumber(\"ccd-number\").build();\n+        activeAccountDetails = AccountDto.accountDtoWith()\n+                            .accountName(\"account-name\")\n+                            .availableBalance(new BigDecimal(\"100.00\"))\n+                            .status(ACTIVE).build();\n+        activeAccountInsufficientDetails = AccountDto.accountDtoWith()\n+            .accountName(\"account-name\")\n+            .availableBalance(new BigDecimal(\"9.00\"))\n+            .build();\n+        onHoldAccountDetails = AccountDto.accountDtoWith()\n+            .accountName(\"account-name\")\n+            .availableBalance(new BigDecimal(\"100.00\"))\n+            .status(AccountStatus.ON_HOLD).build();\n+        deletedAccountDetails = AccountDto.accountDtoWith()\n+            .accountName(\"account-name\")\n+            .availableBalance(new BigDecimal(\"100.00\"))\n+            .status(AccountStatus.DELETED).build();\n+\n+    }\n+\n+\n+    @Test\n+    public void testSetPaymentStatusWithOnHold() {\n+        PBAStatusErrorMapper pbaStatusErrorMapper = new PBAStatusErrorMapper();\n+        String expected = \"CreditAccountPayment received for ccdCaseNumber : {} Liberata AccountStatus : {} PaymentStatus : {} - Account Balance InSufficient!!!\";\n+        pbaStatusErrorMapper.setPaymentStatus(creditAccountPaymentRequest, payment, onHoldAccountDetails);\n+        verify(mockLOG).info(expected,\"ccd-number\",ON_HOLD,\"failed\");\n+    }\n+\n+    @Test\n+    public void testSetPaymentStatusWithActiveAndSufficientBalance() {\n+        PBAStatusErrorMapper pbaStatusErrorMapper = new PBAStatusErrorMapper();\n+        String expected = \"CreditAccountPayment received for ccdCaseNumber : {} Liberata AccountStatus : {} PaymentStatus : {} - Account Balance Sufficient!!!\";\n+        pbaStatusErrorMapper.setPaymentStatus(creditAccountPaymentRequest,payment,activeAccountDetails);\n+        verify(mockLOG).info(expected,\"ccd-number\",ACTIVE,\"success\");\n+    }\n+\n+    @Test\n+    public void testSetPaymentStatusWithDeletedStatus() {\n+        PBAStatusErrorMapper pbaStatusErrorMapper = new PBAStatusErrorMapper();\n+        String expected = \"CreditAccountPayment received for ccdCaseNumber : {} Liberata AccountStatus : {} PaymentStatus : {} - Account Balance InSufficient!!!\";\n+        pbaStatusErrorMapper.setPaymentStatus(creditAccountPaymentRequest,payment,deletedAccountDetails);\n+        verify(mockLOG).info(expected,\"ccd-number\",DELETED,\"failed\");\n+    }\n+\n+\n+}"
  },
  {
    "sha": "ccdf7efbedbe860166378e33300da00c55c3bf8f",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentDtoMapperTest.java",
    "status": "added",
    "additions": 227,
    "deletions": 0,
    "changes": 227,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentDtoMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentDtoMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentDtoMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,227 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.ff4j.FF4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.fees2.register.data.model.Fee;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.contract.PaymentAllocationDto;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentDtoMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.reports.FeesService;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PaymentDtoMapperTest {\n+\n+    @Mock\n+    FeesService feesService;\n+\n+    @Mock\n+    LaunchDarklyFeatureToggler featureToggler;\n+\n+    @Mock\n+    FF4j ff4j;\n+\n+    @InjectMocks\n+    PaymentDtoMapper paymentDtoMapper = new PaymentDtoMapper();\n+\n+    PaymentFeeLink paymentFeeLink;\n+\n+    Payment payment1;\n+\n+    List<PaymentFee> paymentFees;\n+\n+    PaymentAllocation allocation1;\n+\n+    @Before\n+    public void initiate(){\n+        List<Payment> payments = new ArrayList<Payment>();\n+        List<PaymentAllocation> paymentAllocations1 = new ArrayList<PaymentAllocation>();\n+        allocation1 = PaymentAllocation.paymentAllocationWith()\n+            .receivingOffice(\"receiving-office\")\n+            .id(1)\n+            .unidentifiedReason(\"reason\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"Transferred\").build()).build();\n+        paymentAllocations1.add(allocation1);\n+        StatusHistory statusHistory = StatusHistory.statusHistoryWith()\n+            .status(\"success\")\n+            .externalStatus(\"external-status\")\n+            .errorCode(\"\")\n+            .message(\"\")\n+            .dateCreated(new Date(2021,1,1))\n+            .dateUpdated(new Date(2021,1,10))\n+            .build();\n+        List<StatusHistory> statusHistories = new ArrayList<StatusHistory>();\n+        statusHistories.add(statusHistory);\n+        PaymentFee fee = PaymentFee.feeWith()\n+            .feeAmount(new BigDecimal(\"100.00\"))\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .calculatedAmount(new BigDecimal(\"100.00\"))\n+            .code(\"FEE123\")\n+            .version(\"1\")\n+            .volume(1)\n+            .build();\n+        paymentFees = new ArrayList<PaymentFee>();\n+        paymentFees.add(fee);\n+        payment1 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .reference(\"RC-1612-3710-5335-6484\")\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .status(\"success\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .paymentAllocation(paymentAllocations1)\n+            .currency(\"GBP\")\n+            .statusHistories(statusHistories)\n+            .id(1).build();\n+        payments.add(payment1);\n+        paymentFeeLink = PaymentFeeLink.paymentFeeLinkWith()\n+                            .paymentReference(\"group-reference\")\n+                            .dateCreated(new Date(2021,1,1))\n+                            .fees(paymentFees)\n+                            .payments(payments).build();\n+        payment1.setPaymentLink(paymentFeeLink);\n+    }\n+\n+    @Test\n+    public void testToCardPaymentDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toCardPaymentDto(paymentFeeLink);\n+        assertEquals(\"RC-1612-3710-5335-6484\",paymentDto.getReference());\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToCardPaymentDtoWithPaymentGroupReference(){\n+        PaymentDto paymentDto = paymentDtoMapper.toCardPaymentDto(payment1,\"group-reference\");\n+        assertEquals(\"RC-1612-3710-5335-6484\",paymentDto.getReference());\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToBulkScanPaymentDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toBulkScanPaymentDto(payment1,\"group-reference\");\n+        assertEquals(\"RC-1612-3710-5335-6484\",paymentDto.getReference());\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToBulkScanPaymentStrategicDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toBulkScanPaymentStrategicDto(payment1,\"group-reference\");\n+        assertEquals(\"RC-1612-3710-5335-6484\",paymentDto.getReference());\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToPciPalCardPaymentDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toPciPalCardPaymentDto(paymentFeeLink,\"http://hmcts.internal\");\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"http://hmcts.internal\",paymentDto.getLinks().getNextUrl().getHref());\n+    }\n+\n+    @Test\n+    public void testToPciPalCardPaymentDtoWithPaymentLink(){\n+        PaymentDto paymentDto = paymentDtoMapper.toPciPalCardPaymentDto(paymentFeeLink,payment1, \"http://hmcts.internal\");\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"http://hmcts.internal\",paymentDto.getLinks().getNextUrl().getHref());\n+    }\n+\n+    @Test\n+    public void testToResponseDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toResponseDto(paymentFeeLink,payment1);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"service-type\",paymentDto.getServiceName());\n+    }\n+\n+    @Test\n+    public void testToRetrieveCardPaymentResponseDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toRetrieveCardPaymentResponseDto(paymentFeeLink);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"service-type\",paymentDto.getServiceName());\n+    }\n+\n+    @Test\n+    public void testToRetrievePaymentStatusesDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toRetrievePaymentStatusesDto(paymentFeeLink);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"100.00\",paymentDto.getAmount().toString());\n+    }\n+\n+    @Test\n+    public void testToPaymentStatusesDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toPaymentStatusesDto(payment1);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"100.00\",paymentDto.getAmount().toString());\n+\n+    }\n+\n+    @Test\n+    public void testToGetPaymentResponseDtos(){\n+        PaymentDto paymentDto = paymentDtoMapper.toGetPaymentResponseDtos(payment1);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"service-type\",paymentDto.getServiceName());\n+    }\n+\n+    @Test\n+    public void testToReconciliationResponseDto(){\n+        PaymentDto paymentDto = paymentDtoMapper.toReconciliationResponseDto(paymentFeeLink);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+\n+\n+    }\n+\n+    @Test\n+    public void testToReconciliationResponseDtoForLibereta(){\n+        when(ff4j.check(any(String.class))).thenReturn(true);\n+        PaymentDto paymentDto = paymentDtoMapper.toReconciliationResponseDtoForLibereta(payment1,\"group-reference\",paymentFees,ff4j,true);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToCreateRecordPaymentResponse(){\n+        PaymentDto paymentDto = paymentDtoMapper.toCreateRecordPaymentResponse(paymentFeeLink);\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+        assertEquals(\"group-reference\",paymentDto.getPaymentGroupReference());\n+    }\n+\n+    @Test\n+    public void testToPaymentAllocationDto(){\n+        PaymentAllocationDto paymentAllocationDto = paymentDtoMapper.toPaymentAllocationDto(allocation1);\n+        assertEquals(\"1\",paymentAllocationDto.getId());\n+        assertEquals(\"receiving-office\",paymentAllocationDto.getReceivingOffice());\n+    }\n+\n+    @Test\n+    public void testToPaymentAllocationDtoForLiberata(){\n+        PaymentAllocationDto paymentAllocationDto = paymentDtoMapper.toPaymentAllocationDtoForLibereta(allocation1);\n+        assertEquals(\"transferred\",paymentAllocationDto.getAllocationStatus());\n+        assertEquals(\"receiving-office\",paymentAllocationDto.getReceivingOffice());\n+    }\n+\n+    @Test\n+    public void testToPaymentAllocationDtos(){\n+        PaymentAllocationDto paymentAllocationDto = paymentDtoMapper.toPaymentAllocationDtos(allocation1);\n+        assertEquals(\"Transferred\",paymentAllocationDto.getAllocationStatus());\n+    }\n+\n+}"
  },
  {
    "sha": "5de1066fd40f8909617ceaefdf9bd6fb5b278aab",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentGroupDtoMapperTest.java",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentGroupDtoMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentGroupDtoMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/PaymentGroupDtoMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,108 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.payment.api.configuration.LaunchDarklyFeatureToggler;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.dto.PaymentGroupDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentGroupDtoMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+import uk.gov.hmcts.payment.api.reports.FeesService;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PaymentGroupDtoMapperTest {\n+\n+    @Mock\n+    FeesService feesService;\n+\n+    @Mock\n+    LaunchDarklyFeatureToggler featureToggler;\n+\n+    @InjectMocks\n+    PaymentGroupDtoMapper paymentGroupDtoMapper = new PaymentGroupDtoMapper();\n+\n+    PaymentFeeLink feeLink;\n+\n+    @Before\n+    public void initiate(){\n+        List<PaymentAllocation> paymentAllocations1 = new ArrayList<PaymentAllocation>();\n+        PaymentAllocation allocation1 = PaymentAllocation.paymentAllocationWith()\n+            .receivingOffice(\"receiving-office\")\n+            .unidentifiedReason(\"reason\")\n+            .paymentAllocationStatus(PaymentAllocationStatus.paymentAllocationStatusWith().name(\"Transferred\").build()).build();\n+        paymentAllocations1.add(allocation1);\n+        List<Payment> payments = new ArrayList<Payment>();\n+        Payment payment1 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .reference(\"RC-1612-3710-5335-6484\")\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .currency(\"GBP\")\n+            .paymentAllocation(paymentAllocations1)\n+            .id(1).build();\n+        payments.add(payment1);\n+        PaymentFee fee = PaymentFee.feeWith().feeAmount(new BigDecimal(\"100.00\")).ccdCaseNumber(\"ccd-case-number\").calculatedAmount(new BigDecimal(\"100.00\")).build();\n+        Remission remission = Remission.remissionWith()\n+            .hwfAmount(new BigDecimal(\"10.00\"))\n+            .fee(fee)\n+            .build();\n+        List<Remission> remissionList = new ArrayList<Remission>();\n+        remissionList.add(remission);\n+\n+        List<PaymentFee> paymentFees = new ArrayList<PaymentFee>();\n+        paymentFees.add(fee);\n+        feeLink = PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"payment-reference\")\n+            .fees(paymentFees)\n+            .payments(payments)\n+            .remissions(remissionList)\n+            .build();\n+    }\n+\n+    @Test\n+    public void testToPaymentGroupDto(){\n+        PaymentGroupDto paymentGroupDto = paymentGroupDtoMapper.toPaymentGroupDto(feeLink);\n+    }\n+\n+    @Test\n+    public void testToPaymentFee(){\n+        FeeDto feeDto = FeeDto.feeDtoWith()\n+            .calculatedAmount(new BigDecimal((\"100.00\")))\n+            .code(\"FEE123\")\n+            .version(\"1\")\n+            .volume(1)\n+            .feeAmount(new BigDecimal(\"50.00\"))\n+            .netAmount(new BigDecimal(\"50.00\"))\n+            .dateCreated(new Date(2020,10,1))\n+            .ccdCaseNumber(\"123456789012345\")\n+            .reference(\"RC-1612-3710-5335-6484\")\n+            .build();\n+\n+        PaymentFee paymentFee = paymentGroupDtoMapper.toPaymentFee(feeDto);\n+        assertEquals(\"123456789012345\",paymentFee.getCcdCaseNumber());\n+        assertEquals(\"FEE123\",paymentFee.getCode());\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "b0d3eb08088a8e7f1fb418d25ebb582ba7b1f86c",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/RemissionDtoMapperTest.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/RemissionDtoMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/RemissionDtoMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/RemissionDtoMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,95 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.fees.register.legacymodel.Fee;\n+import uk.gov.hmcts.payment.api.contract.FeeDto;\n+import uk.gov.hmcts.payment.api.dto.RemissionDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.RemissionDtoMapper;\n+import uk.gov.hmcts.payment.api.model.*;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class RemissionDtoMapperTest {\n+\n+    List<Payment> payments = new ArrayList<Payment>();\n+    PaymentFeeLink feeLink;\n+    Payment payment1;\n+\n+    RemissionDtoMapper remissionDtoMapper = new RemissionDtoMapper();\n+\n+    @Before\n+    public void initiate(){\n+        payment1 = Payment.paymentWith()\n+            .siteId(\"siteId\")\n+            .paymentChannel(PaymentChannel.paymentChannelWith().name(\"bulk scan\").build())\n+            .serviceType(\"service-type\")\n+            .caseReference(\"case-reference\")\n+            .reference(\"RC-1612-3710-5335-6484\")\n+            .ccdCaseNumber(\"ccd-case-number\")\n+            .bankedDate(new Date(2021,1,1))\n+            .documentControlNumber(\"document-control-number\")\n+            .paymentMethod(PaymentMethod.paymentMethodWith().name(\"pay-method\").build())\n+            .amount(new BigDecimal(\"100.00\"))\n+            .paymentStatus(PaymentStatus.SUCCESS)\n+            .dateCreated(new Date(2020,10,1))\n+            .currency(\"GBP\")\n+            .id(1).build();\n+        payments.add(payment1);\n+        PaymentFee fee = PaymentFee.feeWith()\n+                                    .feeAmount(new BigDecimal(\"100.00\"))\n+                                    .ccdCaseNumber(\"ccd-case-number\")\n+                                    .calculatedAmount(new BigDecimal(\"100.00\"))\n+                                    .code(\"FEE123\")\n+                                    .version(\"1\")\n+                                    .volume(1)\n+                                    .build();\n+        List<PaymentFee> paymentFees = new ArrayList<PaymentFee>();\n+        paymentFees.add(fee);\n+        Remission remission = Remission.remissionWith()\n+            .remissionReference(\"remission-reference\")\n+            .hwfAmount(new BigDecimal(\"10.00\"))\n+            .build();\n+        List<Remission> remissionList = new ArrayList<Remission>();\n+        remissionList.add(remission);\n+        feeLink = PaymentFeeLink.paymentFeeLinkWith()\n+            .paymentReference(\"payment-reference\")\n+            .fees(paymentFees)\n+            .payments(payments)\n+            .remissions(remissionList)\n+            .build();\n+    }\n+\n+    @Test\n+    public void testToCreateRemissionResponse(){\n+        RemissionDto remissionDto = remissionDtoMapper.toCreateRemissionResponse(feeLink);\n+        assertEquals(\"remission-reference\",remissionDto.getRemissionReference());\n+    }\n+\n+    @Test\n+    public  void testToFeeDto(){\n+        List<FeeDto> feeDtos = new ArrayList<FeeDto>();\n+        FeeDto  feeDto = FeeDto.feeDtoWith()\n+                            .calculatedAmount(new BigDecimal(\"100.00\"))\n+                            .code(\"FEE123\")\n+                            .ccdCaseNumber(\"1234123412341324\")\n+                            .version(\"1\")\n+                            .volume(1)\n+                            .netAmount(new BigDecimal(\"100.00\"))\n+                            .reference(\"RC-1612-3710-5335-6484\")\n+                            .build();\n+        feeDtos.add(feeDto);\n+        List<PaymentFee> fees = remissionDtoMapper.toFees(feeDtos);\n+        assertEquals(\"1234123412341324\",fees.get(0).getCcdCaseNumber());\n+        assertEquals(\"RC-1612-3710-5335-6484\",fees.get(0).getReference());\n+    }\n+\n+}"
  },
  {
    "sha": "45edc4adcedba687b733b7cbc7d66d86d42939f5",
    "filename": "api/src/test/java/uk/gov/hmcts/payment/api/mapper/StatusMapperTest.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/hmcts/ccpay-payment-app/blob/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/StatusMapperTest.java",
    "raw_url": "https://github.com/hmcts/ccpay-payment-app/raw/22153ce16ceaf59cba0a479f6a52a810b3ed165e/api/src/test/java/uk/gov/hmcts/payment/api/mapper/StatusMapperTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ccpay-payment-app/contents/api/src/test/java/uk/gov/hmcts/payment/api/mapper/StatusMapperTest.java?ref=22153ce16ceaf59cba0a479f6a52a810b3ed165e",
    "patch": "@@ -0,0 +1,64 @@\n+package uk.gov.hmcts.payment.api.mapper;\n+\n+import org.junit.Test;\n+import uk.gov.hmcts.payment.api.contract.PaymentDto;\n+import uk.gov.hmcts.payment.api.dto.mapper.PaymentDtoMapper;\n+import uk.gov.hmcts.payment.api.model.Payment;\n+import uk.gov.hmcts.payment.api.model.PaymentFeeLink;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+public class StatusMapperTest {\n+\n+    @Test\n+    public void whenGovPayStatusIsCreated_thenShouldMappedAsInitiated() {\n+\n+        PaymentDtoMapper mapper = new PaymentDtoMapper();\n+        PaymentDto paymentDto = mapper.toCardPaymentDto(getPaymentWithStatus(\"created\"));\n+        assertEquals(\"Initiated\", paymentDto.getStatus());\n+\n+    }\n+\n+    @Test\n+    public void whenGovPayStatusIsStarted_thenShouldMappedAsInitiated() {\n+\n+        PaymentDtoMapper mapper = new PaymentDtoMapper();\n+        PaymentDto paymentDto = mapper.toCardPaymentDto(getPaymentWithStatus(\"started\"));\n+\n+        assertEquals(\"Initiated\", paymentDto.getStatus());\n+    }\n+    @Test\n+    public void whenGovPayStatusIsError_thenShouldMappedAsInitiated() {\n+\n+        PaymentDtoMapper mapper = new PaymentDtoMapper();\n+        PaymentDto paymentDto = mapper.toCardPaymentDto(getPaymentWithStatus(\"error\"));\n+        assertEquals(\"Failed\", paymentDto.getStatus());\n+    }\n+    @Test\n+    public void whenGovPayStatusIsFailed_thenShouldMappedAsInitiated() {\n+\n+        PaymentDtoMapper mapper = new PaymentDtoMapper();\n+        PaymentDto paymentDto = mapper.toCardPaymentDto(getPaymentWithStatus(\"failed\"));\n+        assertEquals(\"Failed\", paymentDto.getStatus());\n+    }\n+\n+    public void whenGovPayStatusIsUnknown_thenShouldReturnSameStatus() {\n+\n+        PaymentDtoMapper mapper = new PaymentDtoMapper();\n+        PaymentDto paymentDto = mapper.toCardPaymentDto(getPaymentWithStatus(\"PBAStatus\"));\n+        assertEquals(\"PBAStatus\", paymentDto.getStatus());\n+    }\n+\n+    private PaymentFeeLink getPaymentWithStatus(String status) {\n+        List payments = new ArrayList<>();\n+        Payment payment = Payment.paymentWith().\n+            status(status).build();\n+        payments.add(payment);\n+        return PaymentFeeLink.paymentFeeLinkWith().payments(payments).build();\n+    }\n+}"
  }
]
