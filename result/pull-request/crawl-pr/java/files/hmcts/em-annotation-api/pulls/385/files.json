[
  {
    "sha": "5a99efd2e1e98d36b2544fb2dfd10f171a2a7728",
    "filename": "src/aat/java/uk/gov/hmcts/reform/em/annotation/functional/RectangleScenarios.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/hmcts/em-annotation-api/blob/af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9/src/aat/java/uk/gov/hmcts/reform/em/annotation/functional/RectangleScenarios.java",
    "raw_url": "https://github.com/hmcts/em-annotation-api/raw/af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9/src/aat/java/uk/gov/hmcts/reform/em/annotation/functional/RectangleScenarios.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-annotation-api/contents/src/aat/java/uk/gov/hmcts/reform/em/annotation/functional/RectangleScenarios.java?ref=af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9",
    "patch": "@@ -107,16 +107,17 @@ public void shouldReturn401WhenUnAuthenticatedUserCreateNewRectangle() {\n     }\n \n     @Test\n-    public void shouldReturn500WhenCreateNewRectangleWithNonExistentAnnotationId() {\n+    public void shouldReturn404WhenCreateNewRectangleWithNonExistentAnnotationId() {\n+\n         final String nonExistentAnnotationId = UUID.randomUUID().toString();\n         final String rectangleId = UUID.randomUUID().toString();\n         final JSONObject rectanglePayload = createRectanglePayload(nonExistentAnnotationId, rectangleId);\n         request\n-                .body(rectanglePayload.toString())\n-                .post(\"/api/rectangles\")\n-                .then()\n-                .statusCode(500)\n-                .log().all();\n+            .body(rectanglePayload.toString())\n+            .post(\"/api/rectangles\")\n+            .then()\n+            .statusCode(404)\n+            .log().all();\n     }\n \n     @Test"
  },
  {
    "sha": "d958cba4bd0a7dea6a11a5190e6edfb94322335d",
    "filename": "src/main/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResource.java",
    "status": "modified",
    "additions": 24,
    "deletions": 1,
    "changes": 25,
    "blob_url": "https://github.com/hmcts/em-annotation-api/blob/af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9/src/main/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResource.java",
    "raw_url": "https://github.com/hmcts/em-annotation-api/raw/af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9/src/main/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResource.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-annotation-api/contents/src/main/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResource.java?ref=af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9",
    "patch": "@@ -3,24 +3,30 @@\n import io.swagger.annotations.ApiOperation;\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n+import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n import org.springframework.web.bind.annotation.*;\n import uk.gov.hmcts.reform.em.annotation.rest.errors.BadRequestAlertException;\n import uk.gov.hmcts.reform.em.annotation.rest.util.HeaderUtil;\n import uk.gov.hmcts.reform.em.annotation.rest.util.PaginationUtil;\n+import uk.gov.hmcts.reform.em.annotation.service.AnnotationService;\n import uk.gov.hmcts.reform.em.annotation.service.RectangleService;\n+import uk.gov.hmcts.reform.em.annotation.service.dto.AnnotationDTO;\n import uk.gov.hmcts.reform.em.annotation.service.dto.RectangleDTO;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.UUID;\n \n@@ -37,6 +43,9 @@\n \n     private final RectangleService rectangleService;\n \n+    @Autowired\n+    public AnnotationService annotationService;\n+\n     public RectangleResource(RectangleService rectangleService) {\n         this.rectangleService = rectangleService;\n     }\n@@ -53,15 +62,29 @@ public RectangleResource(RectangleService rectangleService) {\n             @ApiResponse(code = 201, message = \"Successfully created\", response = RectangleDTO.class),\n             @ApiResponse(code = 400, message = \"rectangleDTO not valid, invalid id\"),\n             @ApiResponse(code = 401, message = \"Unauthorised\"),\n+            @ApiResponse(code = 404, message = \"Annotation Id not Found\"),\n             @ApiResponse(code = 403, message = \"Forbidden\"),\n     })\n     @PostMapping(\"/rectangles\")\n     //@Timed\n     public ResponseEntity<RectangleDTO> createRectangle(@RequestBody RectangleDTO rectangleDTO) throws URISyntaxException {\n         log.debug(\"REST request to save Rectangle : {}\", rectangleDTO);\n-        if (rectangleDTO.getId() == null) {\n+        if (Objects.isNull(rectangleDTO.getId())||\n+            StringUtils.isAllBlank(rectangleDTO.getId().toString())) {\n             throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n         }\n+        if (Objects.isNull(rectangleDTO.getAnnotationId()) ||\n+            StringUtils.isBlank(rectangleDTO.getAnnotationId().toString())) {\n+            throw new BadRequestAlertException(\"Invalid Annotation id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Optional<AnnotationDTO> annotationDTOOptional\n+            = annotationService.findOne(rectangleDTO.getAnnotationId());\n+        if (Objects.isNull(annotationDTOOptional.get().getId())  ||\n+            StringUtils.isBlank(annotationDTOOptional.get().getId().toString())) {\n+            return ResponseEntity\n+                .notFound()\n+                .build();\n+        }\n         RectangleDTO result = rectangleService.save(rectangleDTO);\n         return ResponseEntity.created(new URI(\"/api/rectangles/\" + result.getId()))\n             .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))"
  },
  {
    "sha": "392c8161dbba7a7ca797f846c2b2534a7a5ecedd",
    "filename": "src/test/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResourceIntTest.java",
    "status": "modified",
    "additions": 24,
    "deletions": 6,
    "changes": 30,
    "blob_url": "https://github.com/hmcts/em-annotation-api/blob/af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9/src/test/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResourceIntTest.java",
    "raw_url": "https://github.com/hmcts/em-annotation-api/raw/af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9/src/test/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResourceIntTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/em-annotation-api/contents/src/test/java/uk/gov/hmcts/reform/em/annotation/rest/RectangleResourceIntTest.java?ref=af53371ec5f17ff45fdb71fcfcd52d6de3ee6fa9",
    "patch": "@@ -13,6 +13,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import uk.gov.hmcts.reform.em.annotation.Application;\n import uk.gov.hmcts.reform.em.annotation.BaseTest;\n+import uk.gov.hmcts.reform.em.annotation.domain.Annotation;\n import uk.gov.hmcts.reform.em.annotation.domain.IdamDetails;\n import uk.gov.hmcts.reform.em.annotation.domain.Rectangle;\n import uk.gov.hmcts.reform.em.annotation.repository.RectangleRepository;\n@@ -123,22 +124,39 @@ public void createRectangleUUIDNull() throws Exception {\n \n     @Test\n     @Transactional\n-    public void createRectangleWithExistingId() throws Exception {\n+    public void test_negative_annotation_id_format() throws Exception {\n+\n         int databaseSizeBeforeCreate = rectangleRepository.findAll().size();\n \n-        // Create the Rectangle with an existing ID\n+        // Create the Rectangle without an annotation Id\n         rectangle.setId(UUID.randomUUID());\n         RectangleDTO rectangleDTO = rectangleMapper.toDto(rectangle);\n \n         // An entity with an existing ID cannot be created, so this API call must fail\n         restLogoutMockMvc.perform(post(\"/api/rectangles\")\n             .contentType(TestUtil.APPLICATION_JSON_UTF8)\n             .content(TestUtil.convertObjectToJsonBytes(rectangleDTO)))\n-            .andExpect(status().isCreated());\n+            .andExpect(status().isBadRequest());\n+    }\n \n-        // Validate the Rectangle in the database\n-        List<Rectangle> rectangleList = rectangleRepository.findAll();\n-        assertThat(rectangleList).hasSize(databaseSizeBeforeCreate + 1);\n+    @Test\n+    @Transactional\n+    public void test_negative_non_existant_annotation_id() throws Exception {\n+\n+        int databaseSizeBeforeCreate = rectangleRepository.findAll().size();\n+        Annotation annotation = new Annotation();\n+        annotation.setId(UUID.randomUUID());\n+\n+        // Create the Rectangle without an non existant annotation Id\n+        rectangle.setAnnotation(annotation);\n+        rectangle.setId(UUID.randomUUID());\n+        RectangleDTO rectangleDTO = rectangleMapper.toDto(rectangle);\n+\n+        // An entity with an existing ID cannot be created, so this API call must fail\n+        restLogoutMockMvc.perform(post(\"/api/rectangles\")\n+            .contentType(TestUtil.APPLICATION_JSON_UTF8)\n+            .content(TestUtil.convertObjectToJsonBytes(rectangleDTO)))\n+            .andExpect(status().isNotFound());\n     }\n \n     @Test"
  }
]
