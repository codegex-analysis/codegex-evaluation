[
  {
    "sha": "4b8824e9da7148677a308a2b1839e21e94a5956d",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/build.gradle",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/build.gradle",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/build.gradle?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -206,7 +206,7 @@ dependencies {\n   compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.6'\n   compile group: 'uk.gov.hmcts.reform', name: 'doc-assembly-client', version: '1.07'\n   compile group: 'uk.gov.hmcts.reform', name: 'fees-java-client', version: '0.0.6'\n-  compile group: 'uk.gov.hmcts.reform', name: 'payments-client', version: '0.0.6'\n+  compile group: 'uk.gov.hmcts.reform', name: 'payments-client', version: '1.0.1'\n   compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '4.0.0'\n   compile group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: '3.0.2'\n   compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot"
  },
  {
    "sha": "93f08fb44945210c08bc2832e46f38cb48c5e10e",
    "filename": "ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CCDCase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CCDCase.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CCDCase.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CCDCase.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -68,6 +68,7 @@\n     private LocalDate paymentDateCreated;\n     private String paymentNextUrl;\n     private String paymentReturnUrl;\n+    private String paymentServiceCallbackUrl;\n     private String paymentTransactionId;\n     private String paymentFeeId;\n     private String preferredCourt;"
  },
  {
    "sha": "5d76f402f2d2cf185f2c6c91fbd9bf152f270be6",
    "filename": "ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CaseEvent.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CaseEvent.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CaseEvent.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/domain/CaseEvent.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -70,6 +70,7 @@\n     INITIATE_CLAIM_PAYMENT_CITIZEN(\"InitiateClaimPaymentCitizen\"),\n     RESUME_CLAIM_PAYMENT_CITIZEN(\"ResumeClaimPaymentCitizen\"),\n     UPDATE_HELP_WITH_FEE_CLAIM(\"ResumeHelpWithFeeClaimSubmission\"),\n+    UPDATE_CLAIM_PAYMENT(\"UpdateClaimPayment\"),\n     CREATE_LEGAL_REP_CLAIM(\"CreateLegalRepClaim\"),\n     STAY_CLAIM(\"StayClaim\"),\n     CREATE_CITIZEN_CLAIM(\"CreateCitizenClaim\"),"
  },
  {
    "sha": "584d03d425449d50dc3d8eb24c0b0a053beb1905",
    "filename": "ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/mapper/PaymentMapper.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/mapper/PaymentMapper.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/mapper/PaymentMapper.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/ccd-adapter/src/main/java/uk/gov/hmcts/cmc/ccd/mapper/PaymentMapper.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -38,7 +38,8 @@ public void to(Payment payment, CCDCase.CCDCaseBuilder builder) {\n             .paymentStatus(payment.getStatus() != null ? payment.getStatus().toString() : null)\n             .paymentTransactionId(payment.getTransactionId())\n             .paymentFeeId(payment.getFeeId())\n-            .paymentReturnUrl(payment.getReturnUrl());\n+            .paymentReturnUrl(payment.getReturnUrl())\n+            .paymentServiceCallbackUrl(payment.getServiceCallbackUrl());\n \n         if (StringUtils.isNotBlank(payment.getDateCreated())) {\n             builder.paymentDateCreated(parseDate(payment.getDateCreated()));\n@@ -70,7 +71,8 @@ public Payment from(CCDCase ccdCase) {\n             ccdCase.getPaymentNextUrl(),\n             ccdCase.getPaymentReturnUrl(),\n             ccdCase.getPaymentTransactionId(),\n-            ccdCase.getPaymentFeeId());\n+            ccdCase.getPaymentFeeId(),\n+            ccdCase.getPaymentServiceCallbackUrl());\n     }\n \n     private LocalDate parseDate(String input) {"
  },
  {
    "sha": "0221570380cedc0483316b0b948378a4d7f4c43b",
    "filename": "domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Fees.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Fees.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Fees.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Fees.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,44 @@\n+package uk.gov.hmcts.cmc.domain.models;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import static uk.gov.hmcts.cmc.domain.utils.ToStringStyle.ourStyle;\n+\n+@Builder\n+@Data\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)\n+public class Fees {\n+    /**\n+     * The amount which was paid, in pennies for payments v1 or pounds with payments v2.\n+     */\n+    private final Integer id;\n+    private final String code;\n+    private final String version;\n+    private final Integer volume;\n+    private final Integer calculatedAmount;\n+    private final String ccdCaseNumber;\n+    private final String reference;\n+\n+    public Fees(Integer id, String code, String version,\n+                Integer volume, Integer calculatedAmount,\n+                String ccdCaseNumber, String reference) {\n+        this.id = id;\n+        this.code = code;\n+        this.version = version;\n+        this.volume = volume;\n+        this.calculatedAmount = calculatedAmount;\n+        this.ccdCaseNumber = ccdCaseNumber;\n+        this.reference = reference;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ourStyle());\n+    }\n+}"
  },
  {
    "sha": "1103c2cc71388e67358d89ec8aa50b06941a7e97",
    "filename": "domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Payment.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Payment.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Payment.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/Payment.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -28,7 +28,9 @@\n     private final String returnUrl;\n     private final String transactionId;\n     private final String feeId;\n+    private final String serviceCallbackUrl;\n \n+    @Builder(toBuilder = true)\n     public Payment(\n         String id,\n         BigDecimal amount,\n@@ -38,7 +40,8 @@ public Payment(\n         String nextUrl,\n         String returnUrl,\n         String transactionId,\n-        String feeId\n+        String feeId,\n+        String serviceCallbackUrl\n     ) {\n         this.id = id;\n         this.amount = amount;\n@@ -49,6 +52,7 @@ public Payment(\n         this.returnUrl = returnUrl;\n         this.transactionId = transactionId;\n         this.feeId = feeId;\n+        this.serviceCallbackUrl = serviceCallbackUrl;\n     }\n \n     @Override"
  },
  {
    "sha": "93836d623104d83916455689350c93d7e1494dee",
    "filename": "domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/PaymentUpdate.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/PaymentUpdate.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/PaymentUpdate.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/PaymentUpdate.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,80 @@\n+package uk.gov.hmcts.cmc.domain.models;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.cmc.domain.utils.ToStringStyle.ourStyle;\n+\n+@Builder\n+@Data\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)\n+public class PaymentUpdate {\n+    private final String id;\n+    /**\n+     * The amount which was paid, in pennies for payments v1 or pounds with payments v2.\n+     */\n+    private final BigDecimal amount;\n+    private final String description;\n+    private final String reference;\n+    private final String currency;\n+    private final String ccdCaseNumber;\n+    private final String caseReference;\n+    private final String channel;\n+    private final String method;\n+    private final String externalProvider;\n+    private final String status;\n+    private final String externalReference;\n+    private final String siteId;\n+    private final String serviceName;\n+    private final String paymentGroupReference;\n+    private final List<Fees> fees;\n+\n+    @SuppressWarnings(\"squid:S00107\")\n+    @Builder(toBuilder = true)\n+    public PaymentUpdate(String id,\n+                         BigDecimal amount,\n+                         String description,\n+                         String reference,\n+                         String currency,\n+                         String ccdCaseNumber,\n+                         String caseReference,\n+                         String channel,\n+                         String method,\n+                         String externalProvider,\n+                         String status,\n+                         String externalReference,\n+                         String siteId,\n+                         String serviceName,\n+                         String paymentGroupReference,\n+                         List<Fees> fees) {\n+        this.id = id;\n+        this.amount = amount;\n+        this.description = description;\n+        this.reference = reference;\n+        this.currency = currency;\n+        this.ccdCaseNumber = ccdCaseNumber;\n+        this.caseReference = caseReference;\n+        this.channel = channel;\n+        this.method = method;\n+        this.externalProvider = externalProvider;\n+        this.status = status;\n+        this.externalReference = externalReference;\n+        this.siteId = siteId;\n+        this.serviceName = serviceName;\n+        this.paymentGroupReference = paymentGroupReference;\n+        this.fees = fees;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ourStyle());\n+    }\n+}"
  },
  {
    "sha": "614d95a5fb3f1b4e793ed8aa20a9b8a4f927fd8d",
    "filename": "domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/paymentresponse/UpdatePaymentResponse.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/paymentresponse/UpdatePaymentResponse.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/paymentresponse/UpdatePaymentResponse.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/domain-model/src/main/java/uk/gov/hmcts/cmc/domain/models/paymentresponse/UpdatePaymentResponse.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,18 @@\n+package uk.gov.hmcts.cmc.domain.models.paymentresponse;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@Builder\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class UpdatePaymentResponse {\n+    private String caseId;\n+    private String error;\n+    private String status;\n+}"
  },
  {
    "sha": "736dd8120cbe7e4f982af54305e6380d6a37b73a",
    "filename": "src/integrationTest/java/uk/gov/hmcts/cmc/claimstore/controllers/ioc/CreateCitizenClaimCallbackHandlerTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/integrationTest/java/uk/gov/hmcts/cmc/claimstore/controllers/ioc/CreateCitizenClaimCallbackHandlerTest.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/integrationTest/java/uk/gov/hmcts/cmc/claimstore/controllers/ioc/CreateCitizenClaimCallbackHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/integrationTest/java/uk/gov/hmcts/cmc/claimstore/controllers/ioc/CreateCitizenClaimCallbackHandlerTest.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -119,25 +119,6 @@ public void shouldAddFieldsOnCaseWhenCallbackIsSuccessful() throws Exception {\n         assertThat(defendant).contains(entry(\"responseDeadline\", RESPONSE_DEADLINE.toString()));\n     }\n \n-    @Test\n-    public void shouldAddFieldsOnCaseWhenCallbackIsSuccessfulButWithErrors() throws Exception {\n-        payment = paymentBuilder.status(FAILED).build();\n-\n-        given(paymentsService.retrievePayment(eq(AUTHORISATION_TOKEN), any(ClaimData.class)))\n-            .willReturn(Optional.of(payment));\n-\n-        MvcResult mvcResult = makeRequestAndRespondWithError(CallbackType.ABOUT_TO_SUBMIT.getValue())\n-            .andExpect(status().isOk())\n-            .andReturn();\n-\n-        List<String> responseData = jsonMappingHelper.deserializeObjectFrom(\n-            mvcResult,\n-            AboutToStartOrSubmitCallbackResponse.class\n-        ).getErrors();\n-\n-        assertThat(responseData).contains(\"Payment not successful\");\n-    }\n-\n     @Test\n     public void shouldCallClaimIssuePostOperationsWhenSubmittedCallbackIsSuccessful() throws Exception {\n         given(userService.getUser(anyString())).willReturn(new User(BEARER_TOKEN, SampleUserDetails.builder().build()));"
  },
  {
    "sha": "c4e12a0ee45db271ee0fbf42225660a2b72fd403",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/config/ServiceTokenGeneratorConfiguration.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/config/ServiceTokenGeneratorConfiguration.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/config/ServiceTokenGeneratorConfiguration.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/config/ServiceTokenGeneratorConfiguration.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -7,6 +7,8 @@\n import uk.gov.hmcts.reform.authorisation.ServiceAuthorisationApi;\n import uk.gov.hmcts.reform.authorisation.generators.AuthTokenGenerator;\n import uk.gov.hmcts.reform.authorisation.generators.AuthTokenGeneratorFactory;\n+import uk.gov.hmcts.reform.authorisation.validators.AuthTokenValidator;\n+import uk.gov.hmcts.reform.authorisation.validators.ServiceAuthTokenValidator;\n \n @Configuration\n @Lazy\n@@ -21,4 +23,9 @@ public AuthTokenGenerator authTokenGenerator(\n         return AuthTokenGeneratorFactory.createDefaultGenerator(secret, microService, serviceAuthorisationApi);\n     }\n \n+    @Bean\n+    public AuthTokenValidator serviceAuthTokenValidator(ServiceAuthorisationApi s2sApi) {\n+        return new ServiceAuthTokenValidator(s2sApi);\n+    }\n+\n }"
  },
  {
    "sha": "2bf818ac9e1ef408a0c942cca2e089d9cd02b376",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentController.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentController.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentController.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentController.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,81 @@\n+package uk.gov.hmcts.cmc.claimstore.controllers;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import uk.gov.hmcts.cmc.claimstore.services.ClaimService;\n+import uk.gov.hmcts.cmc.domain.models.PaymentUpdate;\n+import uk.gov.hmcts.cmc.domain.models.paymentresponse.UpdatePaymentResponse;\n+import uk.gov.hmcts.reform.authorisation.exceptions.InvalidTokenException;\n+import uk.gov.hmcts.reform.authorisation.validators.AuthTokenValidator;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+@Api\n+@RestController\n+@RequestMapping(\n+    path = \"/payment\",\n+    produces = MediaType.APPLICATION_JSON_VALUE)\n+public class PaymentController {\n+\n+    private final ClaimService claimService;\n+\n+    private final AuthTokenValidator authTokenValidator;\n+\n+    public static final String SERVICE_AUTHORIZATION_HEADER = \"ServiceAuthorization\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(PaymentController.class);\n+\n+    @Autowired\n+    public PaymentController(ClaimService claimService, AuthTokenValidator authTokenValidator) {\n+        this.claimService = claimService;\n+        this.authTokenValidator = authTokenValidator;\n+    }\n+\n+    @PutMapping(value = \"/payment-update\", consumes = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(\"Update a Card payment\")\n+    @ApiResponses(value = {\n+        @ApiResponse(code = 200, message = \"Payment update callback was processed successfully and updated to the case\",\n+            response = UpdatePaymentResponse.class),\n+        @ApiResponse(code = 400, message = \"Bad Request\"),\n+        @ApiResponse(code = 401, message = \"Provided S2S token is missing or invalid\"),\n+        @ApiResponse(code = 403, message = \"Calling service is not authorised to use the endpoint\"),\n+        @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+    public ResponseEntity<UpdatePaymentResponse> updateCardPayment(\n+        @RequestHeader(value = SERVICE_AUTHORIZATION_HEADER) String serviceToken,\n+        @Valid @NotNull @RequestBody PaymentUpdate paymentUpdate\n+    ) {\n+        logger.info(\"Called s2s service\");\n+        try {\n+            String serviceName = authTokenValidator.getServiceName(\"Bearer \" + serviceToken);\n+            if (\"payment_app\".contains(serviceName)) {\n+                logger.info(\"Service Token Validated Successfully\");\n+                claimService.updateCardPayment(paymentUpdate);\n+                return ResponseEntity.ok().build();\n+            } else {\n+                logger.info(\"Calling service is not authorised to use the endpoint\");\n+                return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n+            }\n+        } catch (InvalidTokenException e) {\n+            logger.error(e.getMessage());\n+            logger.info(\"Provided S2S token is missing or invalid\");\n+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        } catch (Exception e) {\n+            logger.error(e.getMessage());\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\n+        }\n+    }\n+}"
  },
  {
    "sha": "d0b43787a46b396ea6d170ffa86e963de36157af",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CCDCaseRepository.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CCDCaseRepository.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CCDCaseRepository.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CCDCaseRepository.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -272,4 +272,10 @@ public Claim addBulkPrintDetailsToClaim(\n             claim.getId()\n         );\n     }\n+\n+    @Override\n+    public Claim updateCardPaymentForClaim(User user, Claim claim) {\n+        return coreCaseDataService.updateCardPaymentForClaim(user,\n+            claim);\n+    }\n }"
  },
  {
    "sha": "30399372e1f97e8cd7125612cd15d42b0279921e",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CaseRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CaseRepository.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CaseRepository.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/repositories/CaseRepository.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -111,5 +111,9 @@ Claim addBulkPrintDetailsToClaim(\n         CaseEvent caseEvent,\n         Claim claim);\n \n+    Claim updateCardPaymentForClaim(\n+        User user,\n+        Claim claim);\n+\n }\n "
  },
  {
    "sha": "1ab745667c83bbfa36b180c400a4c3214ff85d08",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/services/ClaimService.java",
    "status": "modified",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ClaimService.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ClaimService.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ClaimService.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -28,6 +28,7 @@\n import uk.gov.hmcts.cmc.domain.models.PaidInFull;\n import uk.gov.hmcts.cmc.domain.models.Payment;\n import uk.gov.hmcts.cmc.domain.models.PaymentStatus;\n+import uk.gov.hmcts.cmc.domain.models.PaymentUpdate;\n import uk.gov.hmcts.cmc.domain.models.ReDetermination;\n import uk.gov.hmcts.cmc.domain.models.ReviewOrder;\n import uk.gov.hmcts.cmc.domain.models.bulkprint.BulkPrintDetails;\n@@ -55,6 +56,7 @@\n import static uk.gov.hmcts.cmc.claimstore.appinsights.AppInsightsEvent.HWF_CLAIM_CREATED;\n import static uk.gov.hmcts.cmc.claimstore.appinsights.AppInsightsEvent.NUMBER_OF_RECONSIDERATION;\n import static uk.gov.hmcts.cmc.claimstore.utils.CommonErrors.MISSING_PAYMENT;\n+import static uk.gov.hmcts.cmc.domain.models.PaymentStatus.SUCCESS;\n import static uk.gov.hmcts.cmc.domain.utils.LocalDateTimeFactory.nowInLocalZone;\n \n @Component\n@@ -508,4 +510,52 @@ private void createClaimEvent(String authorisation, User user, Claim savedClaim)\n         );\n \n     }\n+\n+    @LogExecutionTime\n+    public Claim updateCardPayment(PaymentUpdate paymentUpdate) {\n+        final Claim[] returnClaim = {null};\n+        try {\n+            User user = userService.authenticateAnonymousCaseWorker();\n+            String authorisation = user.getAuthorisation();\n+            if (paymentUpdate.getStatus().equalsIgnoreCase(SUCCESS.name())) {\n+                List<Claim> claimRetreived = caseRepository.getByPaymentReference(\n+                    paymentUpdate.getReference(), authorisation);\n+                claimRetreived.forEach(claim -> {\n+                        Optional<Payment> paymentRetreived = claim.getClaimData().getPayment();\n+                        paymentRetreived.ifPresent(payment -> {\n+                            if (payment.getStatus() == null || !payment.getStatus().equals(SUCCESS)\n+                                || payment.getStatus().equals(SUCCESS)) {\n+                                Payment paymentBuild = payment.toBuilder()\n+                                    .amount(paymentUpdate.getAmount())\n+                                    .reference(paymentUpdate.getReference())\n+                                    .status(SUCCESS)\n+                                    .feeId(\"\" + paymentUpdate.getFees().get(0).getId())\n+                                    .build();\n+\n+                                ClaimData claimData = claim.getClaimData().toBuilder()\n+                                    .payment(paymentBuild)\n+                                    .build();\n+\n+                                Claim updatedClaim = claim.toBuilder()\n+                                    .claimData(claimData)\n+                                    .build();\n+                                returnClaim[0] = caseRepository.updateCardPaymentForClaim(user, updatedClaim);\n+                                if (updatedClaim.getState() == ClaimState.CREATE) {\n+                                    updateClaimState(authorisation, updatedClaim, ClaimState.OPEN);\n+                                    appInsights.trackEvent(\n+                                        AppInsightsEvent.CLAIM_ISSUED_CITIZEN,\n+                                        AppInsights.REFERENCE_NUMBER,\n+                                        updatedClaim.getReferenceNumber()\n+                                    );\n+                                }\n+                            }\n+                        });\n+                    }\n+                );\n+            }\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+        return returnClaim[0];\n+    }\n }"
  },
  {
    "sha": "ad4f00231a52beb6095fc4b95ee71af2c7d84382",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataService.java",
    "status": "modified",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataService.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataService.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataService.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -63,6 +63,7 @@\n import static uk.gov.hmcts.cmc.ccd.domain.CaseEvent.ORDER_REVIEW_REQUESTED;\n import static uk.gov.hmcts.cmc.ccd.domain.CaseEvent.SETTLED_PRE_JUDGMENT;\n import static uk.gov.hmcts.cmc.ccd.domain.CaseEvent.TEST_SUPPORT_UPDATE;\n+import static uk.gov.hmcts.cmc.ccd.domain.CaseEvent.UPDATE_CLAIM_PAYMENT;\n import static uk.gov.hmcts.cmc.claimstore.repositories.CCDCaseApi.CASE_TYPE_ID;\n import static uk.gov.hmcts.cmc.claimstore.repositories.CCDCaseApi.JURISDICTION_ID;\n import static uk.gov.hmcts.cmc.domain.models.ClaimDocumentType.CLAIM_ISSUE_RECEIPT;\n@@ -76,9 +77,11 @@\n     private static final String CMC_CASE_UPDATE_SUMMARY = \"CMC case update\";\n     private static final String CMC_CASE_CREATE_SUMMARY = \"CMC case create\";\n     private static final String CMC_PAYMENT_CREATE_SUMMARY = \"CMC payment creation\";\n+    private static final String CMC_PAYMENT_UPDATE_SUMMARY = \"CMC payment updation\";\n     private static final String SUBMITTING_CMC_CASE_UPDATE_DESCRIPTION = \"Submitting CMC case update\";\n     private static final String SUBMITTING_CMC_CASE_CREATE_DESCRIPTION = \"Submitting CMC case create\";\n     private static final String SUBMITTING_CMC_INITIATE_PAYMENT_DESCRIPTION = \"Submitting CMC initiate payment\";\n+    private static final String SUBMITTING_CMC_UPDATE_PAYMENT_DESCRIPTION = \"Submitting CMC update payment\";\n     private static final String MORE_TIME_DEFENDANT_MSG = \"Response Deadline Extended by Defendant\";\n \n     private static final String CCD_UPDATE_FAILURE_MESSAGE\n@@ -94,6 +97,9 @@\n         = \"Failed creating a payment in CCD store for claim with external id %s on event %s\";\n     private static final String USER_MUST_NOT_BE_NULL = \"user must not be null\";\n \n+    private static final String CCD_PAYMENT_UPDATE_FAILURE_MESSAGE\n+        = \"Failed Updating a payments in CCD store for claim with external id %s on event %s\";\n+\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n     private final CaseMapper caseMapper;\n@@ -1014,6 +1020,7 @@ public Claim saveClaimSubmissionOperationIndicators(Long caseId,\n \n             CaseDetails caseDetails = submitUpdate(authorisation,\n                 eventRequestData,\n+\n                 caseDataContent,\n                 caseId,\n                 isRepresented(userDetails)\n@@ -1196,6 +1203,58 @@ public Claim addBulkPrintDetailsToClaim(\n         }\n     }\n \n+    @LogExecutionTime\n+    public Claim updateCardPaymentForClaim(\n+        User user,\n+        Claim claim\n+    ) {\n+        requireNonNull(user, USER_MUST_NOT_BE_NULL);\n+\n+        CCDCase ccdCase = caseMapper.to(claim);\n+\n+        try {\n+            EventRequestData eventRequestData = EventRequestData.builder()\n+                .userId(user.getUserDetails().getId())\n+                .jurisdictionId(JURISDICTION_ID)\n+                .caseTypeId(CASE_TYPE_ID)\n+                .eventId(UPDATE_CLAIM_PAYMENT.getValue())\n+                .ignoreWarning(true)\n+                .build();\n+\n+            StartEventResponse startEventResponse = startUpdate(user.getAuthorisation(),\n+                eventRequestData, claim.getId(), true);\n+\n+            CaseDataContent caseDataContent = CaseDataContent.builder()\n+                .eventToken(startEventResponse.getToken())\n+                .event(Event.builder()\n+                    .id(startEventResponse.getEventId())\n+                    .summary(CMC_PAYMENT_UPDATE_SUMMARY)\n+                    .description(SUBMITTING_CMC_UPDATE_PAYMENT_DESCRIPTION)\n+                    .build())\n+                .data(ccdCase)\n+                .build();\n+\n+            CaseDetails caseDetails = submitUpdate(\n+                user.getAuthorisation(),\n+                eventRequestData,\n+                caseDataContent,\n+                claim.getId(),\n+                true\n+            );\n+\n+            return caseDetailsConverter.extractClaim(caseDetails);\n+\n+        } catch (Exception exception) {\n+            throw new CoreCaseDataStoreException(\n+                String.format(\n+                    CCD_PAYMENT_UPDATE_FAILURE_MESSAGE,\n+                    ccdCase.getExternalId(),\n+                    UPDATE_CLAIM_PAYMENT\n+                ), exception\n+            );\n+        }\n+    }\n+\n     private Claim sendCaseEvent(String authorisation, CaseEvent caseEvent, Long caseId) {\n         UserDetails userDetails = userService.getUserDetails(authorisation);\n "
  },
  {
    "sha": "297160d6ff5e86f329b6d342d420035a027121df",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsService.java",
    "status": "modified",
    "additions": 31,
    "deletions": 10,
    "changes": 41,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsService.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsService.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsService.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -11,10 +11,10 @@\n import uk.gov.hmcts.cmc.domain.models.PaymentStatus;\n import uk.gov.hmcts.reform.fees.client.FeesClient;\n import uk.gov.hmcts.reform.fees.client.model.FeeLookupResponseDto;\n-import uk.gov.hmcts.reform.payments.client.CardPaymentRequest;\n import uk.gov.hmcts.reform.payments.client.PaymentsClient;\n import uk.gov.hmcts.reform.payments.client.models.FeeDto;\n import uk.gov.hmcts.reform.payments.client.models.PaymentDto;\n+import uk.gov.hmcts.reform.payments.client.request.CardPaymentRequest;\n \n import java.math.BigDecimal;\n import java.util.Arrays;\n@@ -64,7 +64,7 @@ public PaymentsService(\n         Payment claimPayment = payment.get();\n         logger.info(\"Retrieving payment with reference {}\", claimPayment.getReference());\n \n-        PaymentDto paymentDto = paymentsClient.retrievePayment(authorisation, claimPayment.getReference());\n+        PaymentDto paymentDto = paymentsClient.retrieveCardPayment(authorisation, claimPayment.getReference());\n         return Optional.of(from(paymentDto, claimPayment));\n     }\n \n@@ -73,6 +73,30 @@ public Payment createPayment(\n         Claim claim\n     ) {\n \n+        logger.info(\"Creating payment in pay hub for claim with external id {}\",\n+            claim.getExternalId());\n+        Payment claimPayment = claim.getClaimData().getPayment().orElseThrow(IllegalStateException::new);\n+        logger.info(\"Return URL: {}\", claimPayment.getReturnUrl());\n+        logger.info(\"Return URL: {}\", claimPayment.getReturnUrl().contains(\"test\"));\n+        String serviceCallBackUrl = null;\n+\n+        if (claimPayment.getReturnUrl().contains(\"test\")\n+            || claimPayment.getReturnUrl().contains(\"localhost\")) {\n+            serviceCallBackUrl = claimPayment.getReturnUrl()\n+                + \"/payment/payment-update\";\n+        } else {\n+            String env = claimPayment.getReturnUrl().substring(claimPayment.getReturnUrl()\n+                .indexOf(\".\") + 1, claimPayment.getReturnUrl().lastIndexOf(\".platform.\"));\n+            serviceCallBackUrl = \"http://cmc-claim-store-\"\n+                + env\n+                + \".service.core-compute-\"\n+                + env\n+                + \".internal\"\n+                + \"/payment/payment-update\";\n+        }\n+\n+        logger.info(\"Service Callback URL: {}\", serviceCallBackUrl);\n+\n         logger.info(\"Calculating interest amount for claim with external id {}\", claim.getExternalId());\n \n         BigDecimal amount = claim.getTotalClaimAmount()\n@@ -92,15 +116,11 @@ public Payment createPayment(\n             claim,\n             feeOutcome\n         );\n-\n-        logger.info(\"Creating payment in pay hub for claim with external id {}\",\n-            claim.getExternalId());\n-        Payment claimPayment = claim.getClaimData().getPayment().orElseThrow(IllegalStateException::new);\n-        logger.info(\"Return URL: {}\", claimPayment.getReturnUrl());\n-        PaymentDto payment = paymentsClient.createPayment(\n+        PaymentDto payment = paymentsClient.createCardPayment(\n             authorisation,\n             paymentRequest,\n-            claimPayment.getReturnUrl()\n+            claimPayment.getReturnUrl(),\n+            serviceCallBackUrl\n         );\n         logger.info(\"Created payment for claim with external id {}\", claim.getExternalId());\n \n@@ -110,7 +130,7 @@ public Payment createPayment(\n \n     public void cancelPayment(String authorisation, String paymentReference) {\n         logger.info(\"Cancelling payment {}\", paymentReference);\n-        paymentsClient.cancelPayment(authorisation, paymentReference);\n+        paymentsClient.cancelCardPayment(authorisation, paymentReference);\n     }\n \n     private FeeDto[] buildFees(String ccdCaseId, FeeLookupResponseDto feeOutcome) {\n@@ -166,6 +186,7 @@ private Payment from(PaymentDto paymentDto, Payment claimPayment) {\n             .dateCreated(dateCreated)\n             .nextUrl(nextUrl)\n             .returnUrl(claimPayment.getReturnUrl())\n+            .serviceCallbackUrl(claimPayment.getServiceCallbackUrl())\n             .transactionId(paymentDto.getExternalReference())\n             .feeId(feeId)\n             .build();"
  },
  {
    "sha": "4334ab4204d3a091b4ca59c7af9b3db875a0dbf8",
    "filename": "src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandler.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandler.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandler.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,76 @@\n+package uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.ioc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.cmc.ccd.domain.CaseEvent;\n+import uk.gov.hmcts.cmc.ccd.mapper.CaseMapper;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.Role;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.Callback;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.CallbackHandler;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.CallbackParams;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.CallbackType;\n+import uk.gov.hmcts.cmc.claimstore.utils.CaseDetailsConverter;\n+import uk.gov.hmcts.cmc.domain.models.Claim;\n+import uk.gov.hmcts.reform.ccd.client.model.AboutToStartOrSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.ccd.client.model.CallbackResponse;\n+import uk.gov.hmcts.reform.ccd.client.model.CaseDetails;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static uk.gov.hmcts.cmc.ccd.domain.CaseEvent.UPDATE_CLAIM_PAYMENT;\n+\n+@Service\n+@Conditional(FeesAndPaymentsConfiguration.class)\n+public class UpdatePaymentCallbackHandler extends CallbackHandler {\n+    private static final List<CaseEvent> EVENTS = Collections.singletonList(UPDATE_CLAIM_PAYMENT);\n+    private static final List<Role> ROLES = Arrays.asList(Role.CASEWORKER, Role.CITIZEN);\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final CaseDetailsConverter caseDetailsConverter;\n+    private final CaseMapper caseMapper;\n+\n+    @Autowired\n+    public UpdatePaymentCallbackHandler(\n+        CaseDetailsConverter caseDetailsConverter,\n+        CaseMapper caseMapper\n+    ) {\n+        this.caseDetailsConverter = caseDetailsConverter;\n+        this.caseMapper = caseMapper;\n+    }\n+\n+    @Override\n+    protected Map<CallbackType, Callback> callbacks() {\n+        return ImmutableMap.of(\n+            CallbackType.ABOUT_TO_SUBMIT, this::updateCardPayment\n+        );\n+    }\n+\n+    @Override\n+    public List<CaseEvent> handledEvents() {\n+        return EVENTS;\n+    }\n+\n+    @Override\n+    public List<Role> getSupportedRoles() {\n+        return ROLES;\n+    }\n+\n+    private CallbackResponse updateCardPayment(CallbackParams callbackParams) {\n+\n+        CaseDetails caseDetails = callbackParams.getRequest().getCaseDetails();\n+\n+        Claim claim = caseDetailsConverter.extractClaim(caseDetails);\n+        logger.info(\"Initiating the Update Payment on the claim {}\", claim.getExternalId());\n+        return AboutToStartOrSubmitCallbackResponse\n+            .builder()\n+            .data(caseDetailsConverter.convertToMap(caseMapper.to(claim)))\n+            .build();\n+    }\n+}"
  },
  {
    "sha": "8c52792b757ca850915888743b0606eff20b2cdb",
    "filename": "src/main/resources/application.yml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/resources/application.yml",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/main/resources/application.yml?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -65,6 +65,10 @@ idam:\n     url: \"http://localhost:4552\"\n     totp_secret: \"AAAAAAAAAAAAAAAA\"\n     microservice: \"cmc_claim_store\"\n+    services-allowed-to-payment-update: ${SERVICES_ALLOWED_TO_PAYMENT_UPDATE:payment_app}\n+  s2s-authorised:\n+    services: payment_app\n+\n \n courtfinder:\n   api:"
  },
  {
    "sha": "ed97d53657ba60b26a5481873ef624d674d78672",
    "filename": "src/test/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentControllerTest.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentControllerTest.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/test/java/uk/gov/hmcts/cmc/claimstore/controllers/PaymentControllerTest.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,117 @@\n+package uk.gov.hmcts.cmc.claimstore.controllers;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import uk.gov.hmcts.cmc.claimstore.services.ClaimService;\n+import uk.gov.hmcts.cmc.domain.models.Claim;\n+import uk.gov.hmcts.cmc.domain.models.PaymentStatus;\n+import uk.gov.hmcts.cmc.domain.models.PaymentUpdate;\n+import uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim;\n+import uk.gov.hmcts.reform.authorisation.exceptions.InvalidTokenException;\n+import uk.gov.hmcts.reform.authorisation.validators.AuthTokenValidator;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import static java.util.Collections.singletonList;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.cmc.domain.models.ClaimFeatures.ADMISSIONS;\n+import static uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim.CLAIM_ID;\n+import static uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim.DEFENDANT_ID;\n+import static uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim.EXTERNAL_ID;\n+import static uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim.LETTER_HOLDER_ID;\n+import static uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim.SUBMITTER_EMAIL;\n+import static uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim.USER_ID;\n+import static uk.gov.hmcts.cmc.domain.utils.DatesProvider.ISSUE_DATE;\n+import static uk.gov.hmcts.cmc.domain.utils.DatesProvider.NOW_IN_LOCAL_ZONE;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PaymentControllerTest {\n+\n+    private static final String AUTHORISATION = \"aaa\";\n+    private static final List<String> FEATURES = singletonList(ADMISSIONS.getValue());\n+\n+    private PaymentController paymentController;\n+\n+    @Mock\n+    private AuthTokenValidator authTokenValidator;\n+\n+    @Mock\n+    private ClaimService claimService;\n+\n+    private PaymentUpdate paymentUpdate = null;\n+\n+    private static final Claim claim = SampleClaim.builder()\n+        .withClaimId(CLAIM_ID)\n+        .withSubmitterId(USER_ID)\n+        .withLetterHolderId(LETTER_HOLDER_ID)\n+        .withDefendantId(DEFENDANT_ID)\n+        .withExternalId(EXTERNAL_ID)\n+        .withReferenceNumber(SampleClaim.REFERENCE_NUMBER)\n+        .withCreatedAt(NOW_IN_LOCAL_ZONE)\n+        .withIssuedOn(ISSUE_DATE)\n+        .withSubmitterEmail(SUBMITTER_EMAIL)\n+        .build();\n+\n+    @Before\n+    public void setup() {\n+        paymentUpdate = PaymentUpdate.builder()\n+            .amount(new BigDecimal(200))\n+            .status(PaymentStatus.SUCCESS.name())\n+            .reference(\"Ref\")\n+            .ccdCaseNumber(\"CCD-111\")\n+            .build();\n+        paymentController = new PaymentController(claimService, authTokenValidator);\n+    }\n+\n+    @Test\n+    public void updateCardPayment() {\n+        when(authTokenValidator.getServiceName(\"Bearer \" + AUTHORISATION)).thenReturn(\"payment_app\");\n+        when(claimService.updateCardPayment(paymentUpdate)).thenReturn(claim);\n+\n+        paymentController.updateCardPayment(AUTHORISATION, paymentUpdate);\n+\n+        //then\n+        Assert.assertNotNull(claim);\n+    }\n+\n+    @Test\n+    public void updateCardPaymentInvalidServiceNameReturned() {\n+        when(authTokenValidator.getServiceName(\"Bearer \" + AUTHORISATION)).thenReturn(\"not_payment_app\");\n+        ResponseEntity responseEntity = paymentController.updateCardPayment(AUTHORISATION, paymentUpdate);\n+\n+        //then\n+        Assert.assertEquals(HttpStatus.FORBIDDEN.value(), responseEntity.getStatusCode().value());\n+\n+        Assert.assertNotNull(responseEntity.getStatusCode());\n+    }\n+\n+    @Test\n+    public void updateCardPaymentThrowingInternalServerError() {\n+        when(authTokenValidator.getServiceName(\"Bearer \" + AUTHORISATION)).thenThrow(new RuntimeException());\n+        ResponseEntity responseEntity = paymentController.updateCardPayment(AUTHORISATION, paymentUpdate);\n+\n+        //then\n+        Assert.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(), responseEntity.getStatusCode().value());\n+\n+        Assert.assertNotNull(responseEntity.getStatusCode());\n+    }\n+\n+    @Test\n+    public void updateCardPaymentInvalidToken() {\n+        when(authTokenValidator.getServiceName(\"Bearer \" + AUTHORISATION))\n+            .thenThrow(new InvalidTokenException(\"Invalid Token\"));\n+        ResponseEntity responseEntity = paymentController.updateCardPayment(AUTHORISATION, paymentUpdate);\n+\n+        //then\n+        Assert.assertEquals(HttpStatus.UNAUTHORIZED.value(), responseEntity.getStatusCode().value());\n+\n+        Assert.assertNotNull(responseEntity.getStatusCode());\n+    }\n+}"
  },
  {
    "sha": "4bea359c14c6a37fb0b26d900428995aa6af022d",
    "filename": "src/test/java/uk/gov/hmcts/cmc/claimstore/services/ClaimServiceTest.java",
    "status": "modified",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ClaimServiceTest.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ClaimServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ClaimServiceTest.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -31,9 +31,11 @@\n import uk.gov.hmcts.cmc.domain.models.ClaimDocumentType;\n import uk.gov.hmcts.cmc.domain.models.ClaimState;\n import uk.gov.hmcts.cmc.domain.models.ClaimSubmissionOperationIndicators;\n+import uk.gov.hmcts.cmc.domain.models.Fees;\n import uk.gov.hmcts.cmc.domain.models.PaidInFull;\n import uk.gov.hmcts.cmc.domain.models.Payment;\n import uk.gov.hmcts.cmc.domain.models.PaymentStatus;\n+import uk.gov.hmcts.cmc.domain.models.PaymentUpdate;\n import uk.gov.hmcts.cmc.domain.models.ReDetermination;\n import uk.gov.hmcts.cmc.domain.models.ReviewOrder;\n import uk.gov.hmcts.cmc.domain.models.amount.AmountBreakDown;\n@@ -63,6 +65,7 @@\n import static java.util.Collections.singletonList;\n import static java.util.Optional.empty;\n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertAll;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -114,6 +117,7 @@\n \n     private static final User UNAUTHORISED_USER = new User(AUTHORISATION, UNAUTHORISED_USER_DETAILS);\n     private static final User USER = new User(AUTHORISATION, VALID_CLAIMANT);\n+    private PaymentUpdate paymentUpdate = null;\n \n     private ClaimService claimService;\n \n@@ -122,6 +126,8 @@\n     @Mock\n     private UserService userService;\n     @Mock\n+    private CaseEventService caseEventService;\n+    @Mock\n     private IssueDateCalculator issueDateCalculator;\n     @Mock\n     private ResponseDeadlineCalculator responseDeadlineCalculator;\n@@ -152,6 +158,17 @@ public void setup() {\n             new ClaimAuthorisationRule(userService),\n             new ReviewOrderRule(),\n             launchDarklyClient);\n+\n+        Fees fees = new Fees(111, \"CD\", \"VER\", 20,\n+            200, \"CCDD\", \"REF\");\n+\n+        paymentUpdate = PaymentUpdate.builder()\n+            .amount(new BigDecimal(200))\n+            .status(PaymentStatus.SUCCESS.name())\n+            .reference(\"Ref\")\n+            .ccdCaseNumber(\"CCD-111\")\n+            .fees(List.of(fees))\n+            .build();\n     }\n \n     @Test\n@@ -693,6 +710,27 @@ public void saveReviewOrderShouldThrowNotFoundExceptionWhenClaimNotFound() {\n         claimService.saveReviewOrder(EXTERNAL_ID, SampleReviewOrder.getDefault(), AUTHORISATION);\n     }\n \n+    @Test\n+    public void updateCardPayment() {\n+        Payment payments = Payment.builder()\n+            .amount(new BigDecimal(200))\n+            .status(PaymentStatus.PENDING)\n+            .build();\n+        ClaimData claimData = ClaimData.builder()\n+            .payment(payments)\n+            .build();\n+\n+        Claim claim1 = Claim.builder()\n+            .claimData(claimData)\n+            .build();\n+        when(caseRepository.getByPaymentReference(paymentUpdate.getReference(), AUTHORISATION))\n+            .thenReturn(List.of(claim1));\n+        when(userService.authenticateAnonymousCaseWorker()).thenReturn(USER);\n+        when(caseRepository.updateCardPaymentForClaim(any(), any(Claim.class))).thenReturn(claim1);\n+        Claim updatedClaim = claimService.updateCardPayment(paymentUpdate);\n+        assertNotNull(updatedClaim);\n+    }\n+\n     @Test\n     public void testSaveHelpWithFeesClaim() {\n         UUID externalId = UUID.randomUUID();"
  },
  {
    "sha": "cd47b8a69e2021c8409f112f44e71f7052f73c9f",
    "filename": "src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataServiceTest.java",
    "status": "modified",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataServiceTest.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/CoreCaseDataServiceTest.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -153,6 +153,36 @@ public void before() {\n                 .data(new HashMap<>())\n                 .build());\n \n+        when(coreCaseDataApi.startEventForCaseWorker(\n+            eq(AUTHORISATION),\n+            eq(AUTH_TOKEN),\n+            eq(USER_DETAILS.getId()),\n+            eq(JURISDICTION_ID),\n+            eq(CASE_TYPE_ID),\n+            eq(SampleClaim.CLAIM_ID.toString()),\n+            anyString()\n+        ))\n+            .thenReturn(StartEventResponse.builder()\n+                .caseDetails(CaseDetails.builder().data(Maps.newHashMap()).build())\n+                .eventId(\"eventId\")\n+                .token(\"token\")\n+                .build());\n+\n+        when(coreCaseDataApi.submitEventForCaseWorker(\n+            eq(AUTHORISATION),\n+            eq(AUTH_TOKEN),\n+            eq(USER_DETAILS.getId()),\n+            eq(JURISDICTION_ID),\n+            eq(CASE_TYPE_ID),\n+            eq(SampleClaim.CLAIM_ID.toString()),\n+            anyBoolean(),\n+            any()\n+        ))\n+            .thenReturn(CaseDetails.builder()\n+                .id(SampleClaim.CLAIM_ID)\n+                .data(new HashMap<>())\n+                .build());\n+\n         when(caseDetailsConverter.extractCCDCase(any(CaseDetails.class))).thenReturn(CCDCase.builder().build());\n \n         this.service = new CoreCaseDataService(\n@@ -736,4 +766,24 @@ public void createClaimShouldSwallowUnprocessableEntityAndReturnClaim() {\n         assertEquals(providedClaim, returnedClaim);\n         assertEquals(providedClaim, hwfClaim);\n     }\n+\n+    @Test\n+    public void updateCardPaymentForClaim() {\n+\n+        Claim providedClaim = SampleClaim.getDefault();\n+        Claim expectedClaim = SampleClaim.claim(providedClaim.getClaimData(), \"000MC001\");\n+        when(caseDetailsConverter.extractClaim(any(CaseDetails.class)))\n+            .thenReturn(expectedClaim);\n+\n+        Claim returnedClaim = service.updateCardPaymentForClaim(USER, providedClaim);\n+\n+        assertNotNull(returnedClaim);\n+        verify(coreCaseDataApi, atLeastOnce()).startEventForCaseWorker(eq(AUTHORISATION),\n+            eq(AUTH_TOKEN),\n+            eq(USER_DETAILS.getId()),\n+            eq(JURISDICTION_ID),\n+            eq(CASE_TYPE_ID),\n+            eq(SampleClaim.CLAIM_ID.toString()),\n+            anyString());\n+    }\n }"
  },
  {
    "sha": "7c19ab2ca75e569b2112cdbabb162827016c577f",
    "filename": "src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsServiceTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 64,
    "changes": 72,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsServiceTest.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsServiceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/PaymentsServiceTest.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -3,6 +3,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mock;\n import org.mockito.Spy;\n import org.mockito.junit.MockitoJUnitRunner;\n@@ -13,7 +14,6 @@\n import uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaimData;\n import uk.gov.hmcts.reform.fees.client.FeesClient;\n import uk.gov.hmcts.reform.fees.client.model.FeeLookupResponseDto;\n-import uk.gov.hmcts.reform.payments.client.CardPaymentRequest;\n import uk.gov.hmcts.reform.payments.client.PaymentsClient;\n import uk.gov.hmcts.reform.payments.client.models.FeeDto;\n import uk.gov.hmcts.reform.payments.client.models.LinkDto;\n@@ -26,10 +26,6 @@\n import java.util.Optional;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static uk.gov.hmcts.cmc.domain.models.sampledata.SamplePayment.PAYMENT_REFERENCE;\n \n@@ -75,13 +71,11 @@ public void setUp() {\n             DESCRIPTION\n         );\n         claim = SampleClaim.getDefault();\n-        when(feesClient.lookupFee(eq(\"online\"), eq(\"issue\"), any(BigDecimal.class)))\n-            .thenReturn(feeOutcome);\n     }\n \n     @Test\n     public void shouldRetrieveAnExistingPayment() {\n-        when(paymentsClient.retrievePayment(\n+        when(paymentsClient.retrieveCardPayment(\n             BEARER_TOKEN,\n             PAYMENT_REFERENCE\n         )).thenReturn(paymentDto);\n@@ -108,7 +102,7 @@ public void shouldRetrieveAnExistingPaymentWithNoNextUrl() {\n             .dateCreated(PAYMENT_DATE)\n             .links(LinksDto.builder().nextUrl(null).build())\n             .build();\n-        when(paymentsClient.retrievePayment(\n+        when(paymentsClient.retrieveCardPayment(\n             BEARER_TOKEN,\n             PAYMENT_REFERENCE\n         )).thenReturn(retrievedPayment);\n@@ -137,7 +131,7 @@ public void shouldRetrieveAnExistingPaymentWithCreatedDate() {\n                 LinkDto.builder().href(URI.create(NEXT_URL)).build())\n                 .build())\n             .build();\n-        when(paymentsClient.retrievePayment(\n+        when(paymentsClient.retrieveCardPayment(\n             BEARER_TOKEN,\n             PAYMENT_REFERENCE\n         )).thenReturn(retrievedPayment);\n@@ -165,43 +159,6 @@ public void shouldReturnEmptyWhenPaymentIsNotPresent() {\n         )).isEmpty();\n     }\n \n-    @Test\n-    public void shouldMakePaymentAndSetThePaymentAmount() {\n-        FeeDto[] fees = new FeeDto[]{\n-            FeeDto.builder()\n-                .ccdCaseNumber(String.valueOf(claim.getCcdCaseId()))\n-                .calculatedAmount(feeOutcome.getFeeAmount())\n-                .code(feeOutcome.getCode())\n-                .version(String.valueOf(feeOutcome.getVersion()))\n-                .build()\n-        };\n-\n-        CardPaymentRequest expectedPaymentRequest =\n-            CardPaymentRequest.builder()\n-                .siteId(SITE_ID)\n-                .description(DESCRIPTION)\n-                .currency(CURRENCY)\n-                .service(SERVICE)\n-                .fees(fees)\n-                .amount(feeOutcome.getFeeAmount())\n-                .ccdCaseNumber(String.valueOf(claim.getCcdCaseId()))\n-                .caseReference(claim.getExternalId())\n-                .build();\n-\n-        when(paymentsClient.createPayment(\n-            BEARER_TOKEN,\n-            expectedPaymentRequest,\n-            RETURN_URL\n-        )).thenReturn(paymentDto);\n-\n-        paymentsService.createPayment(\n-            BEARER_TOKEN,\n-            claim\n-        );\n-\n-        verify(paymentDto).setAmount(BigDecimal.TEN);\n-    }\n-\n     @Test\n     public void shouldRetrieveAnExistingPaymentWithTransactionId() {\n         String externalReference = \"External Reference\";\n@@ -213,7 +170,7 @@ public void shouldRetrieveAnExistingPaymentWithTransactionId() {\n                 LinkDto.builder().href(URI.create(NEXT_URL)).build())\n                 .build())\n             .build();\n-        when(paymentsClient.retrievePayment(\n+        when(paymentsClient.retrieveCardPayment(\n             BEARER_TOKEN,\n             PAYMENT_REFERENCE\n         )).thenReturn(retrievedPayment);\n@@ -247,7 +204,7 @@ public void shouldRetrieveAnExistingPaymentWithFeeId() {\n                 LinkDto.builder().href(URI.create(NEXT_URL)).build())\n                 .build())\n             .build();\n-        when(paymentsClient.retrievePayment(\n+        when(paymentsClient.retrieveCardPayment(\n             BEARER_TOKEN,\n             PAYMENT_REFERENCE\n         )).thenReturn(retrievedPayment);\n@@ -270,21 +227,8 @@ public void shouldRetrieveAnExistingPaymentWithFeeId() {\n \n     @Test(expected = IllegalStateException.class)\n     public void shouldBubbleUpExceptionIfFeeLookupFails() {\n-        when(feesClient.lookupFee(eq(\"online\"), eq(\"issue\"), any(BigDecimal.class)))\n-            .thenThrow(IllegalStateException.class);\n-\n-        paymentsService.createPayment(\n-            BEARER_TOKEN,\n-            claim\n-        );\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void shouldBubbleUpExceptionIfPaymentCreationFails() {\n-        when(paymentsClient.createPayment(\n-            eq(BEARER_TOKEN),\n-            any(CardPaymentRequest.class),\n-            anyString()))\n+        when(feesClient.lookupFee(ArgumentMatchers.eq(\"online\"),\n+            ArgumentMatchers.eq(\"issue\"), ArgumentMatchers.any(BigDecimal.class)))\n             .thenThrow(IllegalStateException.class);\n \n         paymentsService.createPayment("
  },
  {
    "sha": "a5c95dbc11a279cd0b6fc0cd2e17e7c332cb81de",
    "filename": "src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandlerTest.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/hmcts/cmc-claim-store/blob/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandlerTest.java",
    "raw_url": "https://github.com/hmcts/cmc-claim-store/raw/dac4404d882a61b3dc87840d1ac5dd0e52e7fc42/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/cmc-claim-store/contents/src/test/java/uk/gov/hmcts/cmc/claimstore/services/ccd/callbacks/ioc/UpdatePaymentCallbackHandlerTest.java?ref=dac4404d882a61b3dc87840d1ac5dd0e52e7fc42",
    "patch": "@@ -0,0 +1,88 @@\n+package uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.ioc;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import uk.gov.hmcts.cmc.ccd.mapper.CaseMapper;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.Role;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.CallbackParams;\n+import uk.gov.hmcts.cmc.claimstore.services.ccd.callbacks.CallbackType;\n+import uk.gov.hmcts.cmc.claimstore.utils.CaseDetailsConverter;\n+import uk.gov.hmcts.cmc.domain.models.Claim;\n+import uk.gov.hmcts.cmc.domain.models.Payment;\n+import uk.gov.hmcts.cmc.domain.models.sampledata.SampleClaim;\n+import uk.gov.hmcts.reform.ccd.client.model.CallbackRequest;\n+import uk.gov.hmcts.reform.ccd.client.model.CaseDetails;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.cmc.ccd.domain.CaseEvent.UPDATE_CLAIM_PAYMENT;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UpdatePaymentCallbackHandlerTest {\n+    private static final String BEARER_TOKEN = \"Bearer let me in\";\n+    private static final String NEXT_URL = \"http://nexturl.test\";\n+    private static final Long CASE_ID = 3L;\n+\n+    @Mock\n+    private CaseDetailsConverter caseDetailsConverter;\n+    @Mock\n+    private CaseMapper caseMapper;\n+    @Captor\n+    private ArgumentCaptor<Claim> claimArgumentCaptor;\n+\n+    private CallbackRequest callbackRequest;\n+\n+    private UpdatePaymentCallbackHandler handler;\n+\n+    @Before\n+    public void setUp() {\n+        handler = new UpdatePaymentCallbackHandler(\n+            caseDetailsConverter,\n+            caseMapper\n+        );\n+        callbackRequest = CallbackRequest\n+            .builder()\n+            .eventId(UPDATE_CLAIM_PAYMENT.getValue())\n+            .caseDetails(CaseDetails.builder()\n+                .id(CASE_ID)\n+                .build())\n+            .build();\n+    }\n+\n+    @Test\n+    public void shouldUpdatePaymentOnAboutToSubmitEvent() {\n+        Claim claim = SampleClaim.getDefault();\n+        when(caseDetailsConverter.extractClaim(any(CaseDetails.class)))\n+            .thenReturn(claim);\n+\n+        CallbackParams callbackParams = CallbackParams.builder()\n+            .type(CallbackType.ABOUT_TO_SUBMIT)\n+            .request(callbackRequest)\n+            .params(ImmutableMap.of(CallbackParams.Params.BEARER_TOKEN, BEARER_TOKEN))\n+            .build();\n+\n+        handler.handle(callbackParams);\n+\n+        verify(caseMapper).to(claimArgumentCaptor.capture());\n+\n+        Claim toBeSaved = claimArgumentCaptor.getValue();\n+        assertThat(toBeSaved.getId()).isEqualTo(CASE_ID);\n+\n+        Payment payment = toBeSaved.getClaimData().getPayment().orElse(null);\n+        Assert.assertNotNull(payment);\n+    }\n+\n+    @Test\n+    public void shouldAcceptCitizenAndCaseWorkerRoles() {\n+        assertThat(handler.getSupportedRoles()).contains(Role.CITIZEN, Role.CASEWORKER);\n+    }\n+}"
  }
]
