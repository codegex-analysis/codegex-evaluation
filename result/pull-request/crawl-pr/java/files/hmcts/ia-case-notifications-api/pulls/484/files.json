[
  {
    "sha": "c0b13f3f42b2befa9444ad5bf3c634684ad6683c",
    "filename": "src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-afer-listing.json",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-afer-listing.json",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-afer-listing.json",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-afer-listing.json?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,32 @@\n+{\n+  \"description\": \"RIA-4084 Send apply notice of change notification to after listing\",\n+  \"request\": {\n+    \"uri\": \"/asylum/ccdSubmitted\",\n+    \"credentials\": \"LegalRepresentative\",\n+    \"input\": {\n+      \"id\": 4084,\n+      \"eventId\": \"applyNocDecision\",\n+      \"state\": \"prepareForHearing\",\n+      \"caseData\": {\n+        \"template\": \"minimal-appeal-submitted.json\",\n+        \"replacements\": {\n+          \"ariaListingReference\": \"PA/12345/2019\",\n+          \"listCaseHearingCentre\": \"taylorHouse\",\n+          \"currentCaseStateVisibleToHomeOfficeAll\":\"appealSubmitted\",\n+          \"contactPreference\": \"wantsEmail\",\n+          \"email\": \"{$TEST_CITIZEN_USERNAME}\",\n+          \"ccdCaseId\": \"1615564782023121\",\n+          \"hearingCentre\": \"manchester\"\n+        }\n+      }\n+    }\n+  },\n+  \"expectation\": {\n+    \"status\": 200,\n+    \"errors\": [],\n+    \"confirmation\": {\n+      \"confirmation_header\": \"success\",\n+      \"confirmation_body\": \"success\"\n+    }\n+   }\n+}"
  },
  {
    "sha": "83ce8770e63e5ecadd108a26e552da7b928dcf7b",
    "filename": "src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-before-listing.json",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-before-listing.json",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-before-listing.json",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-before-listing.json?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,30 @@\n+{\n+  \"description\": \"RIA-4084 Send apply notice of change notification before listing\",\n+  \"request\": {\n+    \"uri\": \"/asylum/ccdSubmitted\",\n+    \"credentials\": \"LegalRepresentative\",\n+    \"input\": {\n+      \"id\": 4084,\n+      \"eventId\": \"applyNocDecision\",\n+      \"state\": \"appealSubmitted\",\n+      \"caseData\": {\n+        \"template\": \"minimal-appeal-submitted.json\",\n+        \"replacements\": {\n+          \"currentCaseStateVisibleToHomeOfficeAll\":\"appealSubmitted\",\n+          \"contactPreference\": \"wantsEmail\",\n+          \"email\": \"{$TEST_CITIZEN_USERNAME}\",\n+          \"ccdCaseId\": \"1615564782023121\",\n+          \"hearingCentre\": \"manchester\"\n+        }\n+      }\n+    }\n+  },\n+  \"expectation\": {\n+    \"status\": 200,\n+    \"errors\": [],\n+    \"confirmation\": {\n+      \"confirmation_header\": \"success\",\n+      \"confirmation_body\": \"success\"\n+    }\n+   }\n+}"
  },
  {
    "sha": "2a985dc55d66b82e64f629124b9d32d197684e5f",
    "filename": "src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-to-appellant-sms.json",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-to-appellant-sms.json",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-to-appellant-sms.json",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/functionalTest/resources/scenarios/RIA-4084-send-apply-notice-of-change-notification-to-appellant-sms.json?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,30 @@\n+{\n+  \"description\": \"RIA-4084 Send apply notice of change notification to appellant SMS\",\n+  \"request\": {\n+    \"uri\": \"/asylum/ccdSubmitted\",\n+    \"credentials\": \"LegalRepresentative\",\n+    \"input\": {\n+      \"id\": 4084,\n+      \"eventId\": \"applyNocDecision\",\n+      \"state\": \"appealSubmitted\",\n+      \"caseData\": {\n+        \"template\": \"minimal-appeal-submitted.json\",\n+        \"replacements\": {\n+          \"currentCaseStateVisibleToHomeOfficeAll\":\"appealSubmitted\",\n+          \"contactPreference\": \"wantsSms\",\n+          \"mobileNumber\": \"{$TEST_CITIZEN_MOBILE}\",\n+          \"ccdCaseId\": \"1615564782023121\",\n+          \"hearingCentre\": \"manchester\"\n+        }\n+      }\n+    }\n+  },\n+  \"expectation\": {\n+    \"status\": 200,\n+    \"errors\": [],\n+    \"confirmation\": {\n+      \"confirmation_header\": \"success\",\n+      \"confirmation_body\": \"success\"\n+    }\n+   }\n+}"
  },
  {
    "sha": "d462b0ccb68424a1754ae4df18faa6511eb8a9b3",
    "filename": "src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,26 @@\n+{\n+  \"description\": \"RIA-4104 Send apply notice of change notification to legal rep\",\n+  \"request\": {\n+    \"uri\": \"/asylum/ccdSubmitted\",\n+    \"credentials\": \"LegalRepresentative\",\n+    \"input\": {\n+      \"id\": 4104,\n+      \"eventId\": \"applyNocDecision\",\n+      \"state\": \"appealSubmitted\",\n+      \"caseData\": {\n+        \"template\": \"minimal-appeal-submitted.json\",\n+        \"replacements\": {\n+          \"hearingCentre\": \"manchester\"\n+        }\n+      }\n+    }\n+  },\n+  \"expectation\": {\n+    \"status\": 200,\n+    \"errors\": [],\n+    \"confirmation\": {\n+      \"confirmation_header\": \"success\",\n+      \"confirmation_body\": \"success\"\n+    }\n+   }\n+}"
  },
  {
    "sha": "8ab2946533d02fab3421b34d8b57ea562b99eacb",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/AsylumCaseDefinition.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/AsylumCaseDefinition.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/AsylumCaseDefinition.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/AsylumCaseDefinition.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -306,7 +306,15 @@\n \n     HOME_OFFICE_FTPA_RESPONDENT_DECIDED_INSTRUCT_STATUS(\n         \"homeOfficeFtpaRespondentDecidedInstructStatus\", new TypeReference<String>() {}),\n-\n+   APPELLANT_DATE_OF_BIRTH(\n+        \"appellantDateOfBirth\", new TypeReference<String>() {}),\n+    CONTACT_PREFERENCE(\n+        \"contactPreference\", new TypeReference<ContactPreference>(){}),\n+    EMAIL(\n+        \"email\", new TypeReference<String>(){}),\n+\n+    MOBILE_NUMBER(\n+        \"mobileNumber\", new TypeReference<String>(){}),\n     ;\n \n     private final String value;"
  },
  {
    "sha": "a3b3ccc92b0416a6fb154f9c9b9c4ace9fb79758",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreference.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreference.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreference.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreference.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,44 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities;\n+\n+\n+import static java.util.Arrays.stream;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import java.util.Optional;\n+\n+public enum ContactPreference {\n+\n+    WANTS_EMAIL(\"wantsEmail\", \"Email\"),\n+    WANTS_SMS(\"wantsSms\", \"Text message\");\n+\n+    @JsonValue\n+    private String value;\n+\n+    private String description;\n+\n+    ContactPreference(String value, String description) {\n+        this.value = value;\n+        this.description = description;\n+    }\n+\n+    public static Optional<ContactPreference> from(\n+        String value\n+    ) {\n+        return stream(values())\n+            .filter(v -> v.getValue().equals(value))\n+            .findFirst();\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value + \": \" + description;\n+    }\n+}"
  },
  {
    "sha": "07d3117039f45b3e565c5da93caa02125bfe8cf1",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -75,6 +75,7 @@\n     DECIDE_AN_APPLICATION(\"decideAnApplication\"),\n     REQUEST_NEW_HEARING_REQUIREMENTS(\"requestNewHearingRequirements\"),\n     RECORD_REMISSION_DECISION(\"recordRemissionDecision\"),\n+    APPLY_NOC_DECISION(\"applyNocDecision\"),\n \n     @JsonEnumDefaultValue\n     UNKNOWN(\"unknown\");"
  },
  {
    "sha": "0cb888dc2bb3d4529f90981dee0892c5c684f471",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,17 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback;\n+\n+public enum PostSubmitCallbackStage {\n+\n+    CCD_SUBMITTED(\"ccdSubmitted\");\n+\n+    private final String id;\n+\n+    PostSubmitCallbackStage(String id) {\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return id;\n+    }\n+}"
  },
  {
    "sha": "718a92a7eb3e39242a7b2f20a054433414ae5ec1",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,20 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers;\n+\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+\n+public interface PostSubmitCallbackHandler<T extends CaseData> {\n+\n+    boolean canHandle(\n+        PostSubmitCallbackStage callbackStage,\n+        Callback<T> callback\n+    );\n+\n+    PostSubmitCallbackResponse handle(\n+        PostSubmitCallbackStage callbackStage,\n+        Callback<T> callback\n+    );\n+}\n+"
  },
  {
    "sha": "75e890cf4ee5350f5d43ef26e921070e2eed2d5c",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.postsubmit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiPredicate;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.*;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.ErrorHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.NotificationGenerator;\n+\n+public class PostSubmitNotificationHandler implements PostSubmitCallbackHandler<AsylumCase> {\n+\n+    private final BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandleFunction;\n+    private final List<? extends NotificationGenerator> notificationGenerators;\n+    private final Optional<ErrorHandler> errorHandling;\n+\n+    public PostSubmitNotificationHandler(BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandleFunction,\n+                               List<? extends NotificationGenerator> notificationGenerator\n+    ) {\n+        this.canHandleFunction = canHandleFunction;\n+        this.notificationGenerators = notificationGenerator;\n+        this.errorHandling = Optional.empty();\n+    }\n+\n+    public PostSubmitNotificationHandler(BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandleFunction,\n+                               List<? extends NotificationGenerator> notificationGenerator,\n+                               ErrorHandler errorHandling\n+    ) {\n+        this.canHandleFunction = canHandleFunction;\n+        this.notificationGenerators = notificationGenerator;\n+        this.errorHandling = Optional.ofNullable(errorHandling);\n+    }\n+\n+    @Override\n+    public boolean canHandle(PostSubmitCallbackStage callbackStage, Callback<AsylumCase> callback) {\n+        requireNonNull(callbackStage, \"callbackStage must not be null\");\n+        requireNonNull(callback, \"callback must not be null\");\n+\n+        return canHandleFunction.test(callbackStage,callback);\n+    }\n+\n+    @Override\n+    public PostSubmitCallbackResponse handle(PostSubmitCallbackStage callbackStage, Callback<AsylumCase> callback) {\n+        if (!canHandle(callbackStage,callback)) {\n+            throw new IllegalStateException(\"Cannot handle callback\");\n+        }\n+        PostSubmitCallbackResponse postSubmitCallbackResponse = new PostSubmitCallbackResponse();\n+        try {\n+            notificationGenerators.forEach(notificationGenerator -> notificationGenerator.generate(callback));\n+            postSubmitCallbackResponse.setConfirmationHeader(\"success\");\n+            postSubmitCallbackResponse.setConfirmationBody(\"success\");\n+        } catch (Exception e) {\n+            if (errorHandling.isPresent()) {\n+                errorHandling.get().accept(callback, e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        return postSubmitCallbackResponse;\n+    }\n+\n+}"
  },
  {
    "sha": "0f0a22141dae00943885bca09dcf91a47e6b0360",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmail.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmail.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmail.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmail.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,68 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.appellant.email;\n+\n+import static java.util.Objects.requireNonNull;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.EMAIL;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.EmailNotificationPersonalisation;\n+\n+\n+@Service\n+public class AppellantApplyNocDecisionPersonalisationEmail implements EmailNotificationPersonalisation {\n+\n+    private final String applyNoticeOfChangeDecisionAppellantEmailTemplateId;\n+\n+    public AppellantApplyNocDecisionPersonalisationEmail(\n+        @Value(\"${govnotify.template.applyNoticeOfChangeDecision.appellant.email}\") String applyNoticeOfChangeDecisionAppellantEmailTemplateId\n+    ) {\n+        this.applyNoticeOfChangeDecisionAppellantEmailTemplateId = applyNoticeOfChangeDecisionAppellantEmailTemplateId;\n+    }\n+\n+    @Override\n+    public String getTemplateId() {\n+        return applyNoticeOfChangeDecisionAppellantEmailTemplateId;\n+    }\n+\n+    @Override\n+    public Set<String> getRecipientsList(final AsylumCase asylumCase) {\n+        return Collections.singleton(asylumCase\n+            .read(EMAIL, String.class)\n+            .orElseThrow(() -> new IllegalStateException(\"appellantEmailAddress is not present\")));\n+\n+    }\n+\n+    @Override\n+    public String getReferenceId(Long caseId) {\n+        return caseId + \"_APPLY_NOC_DECISION_APPELLANT_EMAIL\";\n+    }\n+\n+    @Override\n+    public Map<String, String> getPersonalisation(Callback<AsylumCase> callback) {\n+        requireNonNull(callback, \"callback must not be null\");\n+\n+        AsylumCase asylumCase =\n+            callback\n+                .getCaseDetails()\n+                .getCaseData();\n+\n+        String dateOfBirth = asylumCase\n+            .read(AsylumCaseDefinition.APPELLANT_DATE_OF_BIRTH,String.class).orElse(\"\");\n+\n+        return\n+            ImmutableMap\n+                .<String, String>builder()\n+                .put(\"Ref Number\", String.valueOf(callback.getCaseDetails().getId()))\n+                .put(\"Given names\", asylumCase.read(AsylumCaseDefinition.APPELLANT_GIVEN_NAMES, String.class).orElse(\"\"))\n+                .put(\"Family name\", asylumCase.read(AsylumCaseDefinition.APPELLANT_FAMILY_NAME, String.class).orElse(\"\"))\n+                .put(\"Date Of Birth\", dateOfBirth)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "3cc4fef68f8e77486403e601ea95b84ebba14246",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSms.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSms.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSms.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSms.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,68 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.appellant.sms;\n+\n+import static java.util.Objects.requireNonNull;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.MOBILE_NUMBER;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.SmsNotificationPersonalisation;\n+\n+\n+@Service\n+public class AppellantApplyNocDecisionPersonalisationSms implements SmsNotificationPersonalisation {\n+\n+    private final String applyNocDecisionAppellantSmsTemplateId;\n+\n+    public AppellantApplyNocDecisionPersonalisationSms(\n+        @Value(\"${govnotify.template.applyNoticeOfChangeDecision.appellant.sms}\") String appealSubmittedAppellantSmsTemplateId\n+    ) {\n+        this.applyNocDecisionAppellantSmsTemplateId = appealSubmittedAppellantSmsTemplateId;\n+    }\n+\n+\n+    @Override\n+    public String getTemplateId() {\n+        return applyNocDecisionAppellantSmsTemplateId;\n+    }\n+\n+    @Override\n+    public Set<String> getRecipientsList(AsylumCase asylumCase) {\n+        return Collections.singleton(asylumCase\n+            .read(MOBILE_NUMBER, String.class)\n+            .orElseThrow(() -> new IllegalStateException(\"appellantMobileNumber is not present\")));\n+    }\n+\n+    @Override\n+    public String getReferenceId(Long caseId) {\n+        return caseId + \"_APPLY_NOC_DECISION_APPELLANT_SMS\";\n+    }\n+\n+    @Override\n+    public Map<String, String> getPersonalisation(Callback<AsylumCase> callback) {\n+        requireNonNull(callback, \"callback must not be null\");\n+\n+        AsylumCase asylumCase =\n+            callback\n+                .getCaseDetails()\n+                .getCaseData();\n+\n+        String dateOfBirth = asylumCase.read(AsylumCaseDefinition.APPELLANT_DATE_OF_BIRTH,String.class).orElse(\"\");\n+\n+\n+        return\n+            ImmutableMap\n+                .<String, String>builder()\n+                .put(\"Ref Number\", String.valueOf(callback.getCaseDetails().getId()))\n+                .put(\"Given names\", asylumCase.read(AsylumCaseDefinition.APPELLANT_GIVEN_NAMES, String.class).orElse(\"\"))\n+                .put(\"Family name\", asylumCase.read(AsylumCaseDefinition.APPELLANT_FAMILY_NAME, String.class).orElse(\"\"))\n+                .put(\"Date Of Birth\", dateOfBirth)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "9b458acad5f0629088aa27b74c25b9a584bbdaba",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisation.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisation.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisation.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisation.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,122 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.homeoffice;\n+\n+import static java.util.Objects.requireNonNull;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.ARIA_LISTING_REFERENCE;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.State;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.EmailNotificationPersonalisation;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.AppealService;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.CustomerServicesProvider;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.EmailAddressFinder;\n+\n+\n+\n+@Slf4j\n+@Service\n+public class HomeOfficeApplyNocDecisionPersonalisation implements EmailNotificationPersonalisation {\n+\n+    private final String homeOfficeApplyNocDecisionBeforeListingTemplateId;\n+    private final String homeOfficeApplyNocDecisionAfterListingTemplateId;\n+    private final String apcHomeOfficeEmailAddress;\n+    private final String lartHomeOfficeEmailAddress;\n+    private final CustomerServicesProvider customerServicesProvider;\n+    private final String iaExUiFrontendUrl;\n+    private final AppealService appealService;\n+    private final EmailAddressFinder emailAddressFinder;\n+\n+    public HomeOfficeApplyNocDecisionPersonalisation(\n+            @Value(\"${govnotify.template.applyNoticeOfChangeDecision.homeOffice.beforeListing.email}\") String homeOfficeApplyNocDecisionBeforeListingTemplateId,\n+            @Value(\"${govnotify.template.applyNoticeOfChangeDecision.homeOffice.afterListing.email}\") String homeOfficeApplyNocDecisionAfterListingTemplateId,\n+            @Value(\"${apcHomeOfficeEmailAddress}\") String apcHomeOfficeEmailAddress,\n+            @Value(\"${lartHomeOfficeEmailAddress}\") String lartHomeOfficeEmailAddress,\n+            @Value(\"${iaExUiFrontendUrl}\") String iaExUiFrontendUrl,\n+            CustomerServicesProvider customerServicesProvider,\n+            AppealService appealService,\n+            EmailAddressFinder emailAddressFinder\n+    ) {\n+        this.homeOfficeApplyNocDecisionBeforeListingTemplateId = homeOfficeApplyNocDecisionBeforeListingTemplateId;\n+        this.homeOfficeApplyNocDecisionAfterListingTemplateId = homeOfficeApplyNocDecisionAfterListingTemplateId;\n+        this.apcHomeOfficeEmailAddress = apcHomeOfficeEmailAddress;\n+        this.lartHomeOfficeEmailAddress = lartHomeOfficeEmailAddress;\n+        this.iaExUiFrontendUrl = iaExUiFrontendUrl;\n+        this.customerServicesProvider = customerServicesProvider;\n+        this.appealService = appealService;\n+        this.emailAddressFinder = emailAddressFinder;\n+    }\n+\n+    @Override\n+    public String getTemplateId(AsylumCase asylumCase) {\n+        boolean isAppealListed = appealService.isAppealListed(asylumCase);\n+        return isAppealListed ? homeOfficeApplyNocDecisionAfterListingTemplateId : homeOfficeApplyNocDecisionBeforeListingTemplateId;\n+    }\n+\n+    @Override\n+    public Set<String> getRecipientsList(AsylumCase asylumCase) {\n+\n+        State currentState = asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class)\n+                .orElse(null);\n+\n+        if (currentState == null) {\n+            return Collections.emptySet();\n+        }\n+\n+        if (Arrays.asList(State.APPEAL_STARTED,\n+                            State.APPEAL_SUBMITTED,\n+                            State.PENDING_PAYMENT,\n+                            State.AWAITING_RESPONDENT_EVIDENCE,\n+                            State.CASE_BUILDING,\n+                            State.CASE_UNDER_REVIEW,\n+                            State.ENDED\n+                ).contains(currentState)) {\n+            return Collections.singleton(apcHomeOfficeEmailAddress);\n+        } else if (Arrays.asList(State.RESPONDENT_REVIEW,\n+                        State.LISTING,\n+                        State.SUBMIT_HEARING_REQUIREMENTS).contains(currentState)) {\n+            return Collections.singleton(lartHomeOfficeEmailAddress);\n+        } else if (Arrays.asList(State.ADJOURNED,\n+                    State.PREPARE_FOR_HEARING,\n+                    State.FINAL_BUNDLING,\n+                    State.PRE_HEARING,\n+                    State.DECISION,\n+                    State.DECIDED,\n+                    State.FTPA_SUBMITTED,\n+                    State.FTPA_DECIDED).contains(currentState)) {\n+            if (appealService.isAppealListed(asylumCase)) {\n+                return Collections.singleton(emailAddressFinder.getListCaseHomeOfficeEmailAddress(asylumCase));\n+            } else {\n+                return  Collections.singleton(emailAddressFinder.getHomeOfficeEmailAddress(asylumCase));\n+            }\n+        } else {\n+            throw new IllegalStateException(\"homeOffice email Address cannot be found\");\n+        }\n+    }\n+\n+    @Override\n+    public String getReferenceId(Long caseId) {\n+        return caseId + \"_APPLY_NOC_DECISION_HOME_OFFICE\";\n+    }\n+\n+    @Override\n+    public Map<String, String> getPersonalisation(AsylumCase asylumCase) {\n+        requireNonNull(asylumCase, \"asylumCase must not be null\");\n+\n+        return ImmutableMap\n+                .<String, String>builder()\n+                .putAll(customerServicesProvider.getCustomerServicesPersonalisation())\n+                .put(\"appealReferenceNumber\", asylumCase.read(AsylumCaseDefinition.APPEAL_REFERENCE_NUMBER, String.class).orElse(\"\"))\n+                .put(\"ariaListingReference\", asylumCase.read(ARIA_LISTING_REFERENCE, String.class).orElse(\"\"))\n+                .put(\"homeOfficeReferenceNumber\", asylumCase.read(AsylumCaseDefinition.HOME_OFFICE_REFERENCE_NUMBER, String.class).orElse(\"\"))\n+                .put(\"appellantGivenNames\", asylumCase.read(AsylumCaseDefinition.APPELLANT_GIVEN_NAMES, String.class).orElse(\"\"))\n+                .put(\"appellantFamilyName\", asylumCase.read(AsylumCaseDefinition.APPELLANT_FAMILY_NAME, String.class).orElse(\"\"))\n+                .put(\"linkToOnlineService\", iaExUiFrontendUrl)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "d83f083cab63485c63b4ba6d12780024f13ad1ed",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,80 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.legalrepresentative;\n+\n+\n+import static java.util.Objects.requireNonNull;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.*;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.LEGAL_REP_REFERENCE_NUMBER;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.validation.constraints.NotNull;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.HearingCentre;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.EmailNotificationPersonalisation;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.CustomerServicesProvider;\n+\n+@Service\n+public class LegalRepresentativeApplyNocDecisionPersonalisation implements EmailNotificationPersonalisation {\n+\n+    private final String applyNocDecisionLegalRepresentativeBeforeListingTemplateId;\n+    private final String applyNocDecisionLegalRepresentativeAfterListingTemplateId;\n+    private final String iaExUiFrontendUrl;\n+    private final CustomerServicesProvider customerServicesProvider;\n+\n+\n+    public LegalRepresentativeApplyNocDecisionPersonalisation(\n+            @NotNull(message = \"applyNocDecisionLegalRepresentativeBeforeListingTemplateId cannot be null\")\n+            @Value(\"${govnotify.template.applyNoticeOfChangeDecision.legalRep.beforeListing.email}\") String applyNocDecisionLegalRepresentativeBeforeListingTemplateId,\n+            @NotNull(message = \"applyNocDecisionLegalRepresentativeAfterListingTemplateId cannot be null\")\n+            @Value(\"${govnotify.template.applyNoticeOfChangeDecision.legalRep.afterListing.email}\") String applyNocDecisionLegalRepresentativeAfterListingTemplateId,\n+            @Value(\"${iaExUiFrontendUrl}\") String iaExUiFrontendUrl,\n+            CustomerServicesProvider customerServicesProvider\n+    ) {\n+        this.applyNocDecisionLegalRepresentativeBeforeListingTemplateId = applyNocDecisionLegalRepresentativeBeforeListingTemplateId;\n+        this.applyNocDecisionLegalRepresentativeAfterListingTemplateId = applyNocDecisionLegalRepresentativeAfterListingTemplateId;\n+        this.iaExUiFrontendUrl = iaExUiFrontendUrl;\n+        this.customerServicesProvider = customerServicesProvider;\n+    }\n+\n+    @Override\n+    public String getTemplateId(AsylumCase asylumCase) {\n+        if (asylumCase.read(AsylumCaseDefinition.LIST_CASE_HEARING_CENTRE, HearingCentre.class).isPresent()) {\n+            return applyNocDecisionLegalRepresentativeAfterListingTemplateId;\n+        } else {\n+            return applyNocDecisionLegalRepresentativeBeforeListingTemplateId;\n+        }\n+    }\n+\n+    @Override\n+    public Set<String> getRecipientsList(AsylumCase asylumCase) {\n+        return Collections.singleton(asylumCase\n+                .read(LEGAL_REPRESENTATIVE_EMAIL_ADDRESS, String.class)\n+                .orElseThrow(() -> new IllegalStateException(\"legalRepresentativeEmailAddress is not present\")));\n+    }\n+\n+    @Override\n+    public String getReferenceId(Long caseId) {\n+        return caseId + \"_APPLY_NOC_DECISION_LEGAL_REP\";\n+    }\n+\n+    @Override\n+    public Map<String, String> getPersonalisation(AsylumCase asylumCase) {\n+        requireNonNull(asylumCase, \"asylumCase must not be null\");\n+\n+        return ImmutableMap\n+                .<String, String>builder()\n+                .putAll(customerServicesProvider.getCustomerServicesPersonalisation())\n+                .put(\"appealReferenceNumber\", asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class).orElse(\"\"))\n+                .put(\"ariaListingReference\", asylumCase.read(ARIA_LISTING_REFERENCE, String.class).orElse(\"\"))\n+                .put(\"legalRepReferenceNumber\", asylumCase.read(LEGAL_REP_REFERENCE_NUMBER, String.class).orElse(\"\"))\n+                .put(\"appellantGivenNames\", asylumCase.read(AsylumCaseDefinition.APPELLANT_GIVEN_NAMES, String.class).orElse(\"\"))\n+                .put(\"appellantFamilyName\", asylumCase.read(AsylumCaseDefinition.APPELLANT_FAMILY_NAME, String.class).orElse(\"\"))\n+                .put(\"linkToOnlineService\", iaExUiFrontendUrl)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "f42d0575699e208de59fc917d208121048700c65",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.security.CcdEventAuthorizor;\n+\n+\n+@Component\n+public class PostSubmitCallbackDispatcher<T extends CaseData> {\n+    private final CcdEventAuthorizor ccdEventAuthorizor;\n+    private final List<PostSubmitCallbackHandler<T>> sortedCallbackHandlers;\n+\n+    public PostSubmitCallbackDispatcher(\n+        CcdEventAuthorizor ccdEventAuthorizor,\n+        List<PostSubmitCallbackHandler<T>> callbackHandlers\n+    ) {\n+        requireNonNull(ccdEventAuthorizor, \"ccdEventAuthorizor must not be null\");\n+        requireNonNull(callbackHandlers, \"callbackHandlers must not be null\");\n+        this.ccdEventAuthorizor = ccdEventAuthorizor;\n+        this.sortedCallbackHandlers = callbackHandlers.stream()\n+            // sorting handlers by handler class name\n+            .sorted(Comparator.comparing(h -> h.getClass().getSimpleName()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public PostSubmitCallbackResponse handle(PostSubmitCallbackStage callbackStage,\n+        Callback<T> callback\n+    ) {\n+        requireNonNull(callbackStage, \"callbackStage must not be null\");\n+        requireNonNull(callback, \"callback must not be null\");\n+        ccdEventAuthorizor.throwIfNotAuthorized(callback.getEvent());\n+\n+        PostSubmitCallbackResponse callbackResponse =\n+            new PostSubmitCallbackResponse();\n+\n+        for (PostSubmitCallbackHandler<T> callbackHandler : sortedCallbackHandlers) {\n+\n+            if (callbackHandler.canHandle(callbackStage,callback)) {\n+\n+                PostSubmitCallbackResponse callbackResponseFromHandler =\n+                    callbackHandler.handle(callbackStage,callback);\n+\n+                callbackResponseFromHandler\n+                    .getConfirmationHeader()\n+                    .ifPresent(callbackResponse::setConfirmationHeader);\n+\n+                callbackResponseFromHandler\n+                    .getConfirmationBody()\n+                    .ifPresent(callbackResponse::setConfirmationBody);\n+\n+            }\n+        }\n+\n+        return callbackResponse;\n+    }\n+}"
  },
  {
    "sha": "d18340dece0478dcd11016848c5a053df7cd889b",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java",
    "status": "modified",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -1638,4 +1638,60 @@\n             )\n         );\n     }\n+\n+    @Bean(\"applyNocDecisionNotificationGenerator\")\n+    public List<NotificationGenerator> applyNocDecisionNotificationHandler(\n+        LegalRepresentativeApplyNocDecisionPersonalisation legalRepresentativeApplyNocDecisionPersonalisation,\n+        HomeOfficeApplyNocDecisionPersonalisation homeOfficeApplyNocDecisionPersonalisation,\n+        NotificationSender notificationSender,\n+        NotificationIdAppender notificationIdAppender\n+    ) {\n+\n+        return Collections.singletonList(\n+            new EmailNotificationGenerator(\n+                newArrayList(\n+                    legalRepresentativeApplyNocDecisionPersonalisation,\n+                    homeOfficeApplyNocDecisionPersonalisation\n+                ),\n+                notificationSender,\n+                notificationIdAppender\n+            )\n+        );\n+    }\n+\n+    @Bean(\"applyNocDecisionAppellantEmailNotificationGenerator\")\n+    public List<NotificationGenerator> applyNocDecisionAppellantEmailNotificationHandler(\n+        AppellantApplyNocDecisionPersonalisationEmail appellantApplyNocDecisionPersonalisationEmail,\n+        NotificationSender notificationSender,\n+        NotificationIdAppender notificationIdAppender\n+    ) {\n+\n+        return Collections.singletonList(\n+            new EmailNotificationGenerator(\n+                newArrayList(\n+                    appellantApplyNocDecisionPersonalisationEmail\n+                ),\n+                notificationSender,\n+                notificationIdAppender\n+            )\n+        );\n+    }\n+\n+    @Bean(\"applyNocDecisionAppellantSmsNotificationGenerator\")\n+    public List<NotificationGenerator> applyNocDecisionAppellantSmsNotificationHandler(\n+        AppellantApplyNocDecisionPersonalisationSms appellantApplyNocDecisionPersonalisationSms,\n+        NotificationSender notificationSender,\n+        NotificationIdAppender notificationIdAppender\n+    ) {\n+\n+        return Collections.singletonList(\n+            new SmsNotificationGenerator(\n+                newArrayList(\n+                    appellantApplyNocDecisionPersonalisationSms\n+                ),\n+                notificationSender,\n+                notificationIdAppender\n+            )\n+        );\n+    }\n }"
  },
  {
    "sha": "3eabcc3806a3c5dec0ee26081244b3f7c50a9215",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java",
    "status": "modified",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -26,12 +26,15 @@\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.Event;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.State;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PreSubmitCallbackStage;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.field.IdValue;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.field.PaymentStatus;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.field.YesOrNo;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.em.Bundle;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PreSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.postsubmit.PostSubmitNotificationHandler;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.presubmit.NotificationHandler;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.DirectionFinder;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.NotificationGenerator;\n@@ -1890,6 +1893,68 @@ private boolean isRemissionOptedForEaOrHuOrPaAppeal(Callback<AsylumCase> callbac\n         );\n     }\n \n+    @Bean\n+    public PostSubmitCallbackHandler<AsylumCase> applyNocDecisionNotificationHandler(\n+        @Qualifier(\"applyNocDecisionNotificationGenerator\")\n+            List<NotificationGenerator> notificationGenerators) {\n+\n+        return new PostSubmitNotificationHandler(\n+            (callbackStage, callback) -> {\n+                return callbackStage == PostSubmitCallbackStage.CCD_SUBMITTED\n+                       && callback.getEvent() == Event.APPLY_NOC_DECISION;\n+            },\n+            notificationGenerators\n+        );\n+    }\n+\n+    @Bean\n+    public PostSubmitCallbackHandler<AsylumCase> applyNocDecisionAppellantSmsNotificationHandler(\n+        @Qualifier(\"applyNocDecisionAppellantSmsNotificationGenerator\")\n+            List<NotificationGenerator> notificationGenerators) {\n+\n+        return new PostSubmitNotificationHandler(\n+            (callbackStage, callback) -> {\n+                AsylumCase asylumCase =\n+                    callback\n+                        .getCaseDetails()\n+                        .getCaseData();\n+\n+                boolean smsPreferred = asylumCase.read(CONTACT_PREFERENCE, ContactPreference.class)\n+                    .map(contactPreference ->  ContactPreference.WANTS_SMS == contactPreference)\n+                    .orElse(false);\n+                return callbackStage == PostSubmitCallbackStage.CCD_SUBMITTED\n+                       && callback.getEvent() == Event.APPLY_NOC_DECISION\n+                       && smsPreferred\n+                       && asylumCase.read(MOBILE_NUMBER,String.class).isPresent();\n+            },\n+            notificationGenerators\n+        );\n+    }\n+\n+    @Bean\n+    public PostSubmitCallbackHandler<AsylumCase> applyNocDecisionAppellantEmailNotificationHandler(\n+        @Qualifier(\"applyNocDecisionAppellantEmailNotificationGenerator\")\n+            List<NotificationGenerator> notificationGenerators) {\n+\n+        return new PostSubmitNotificationHandler(\n+            (callbackStage, callback) -> {\n+                AsylumCase asylumCase =\n+                    callback\n+                        .getCaseDetails()\n+                        .getCaseData();\n+\n+                boolean emailPreferred = asylumCase.read(CONTACT_PREFERENCE, ContactPreference.class)\n+                    .map(contactPreference ->  ContactPreference.WANTS_EMAIL == contactPreference)\n+                    .orElse(false);\n+                return callbackStage == PostSubmitCallbackStage.CCD_SUBMITTED\n+                       && callback.getEvent() == Event.APPLY_NOC_DECISION\n+                       && emailPreferred\n+                       && asylumCase.read(EMAIL,String.class).isPresent();\n+            },\n+            notificationGenerators\n+        );\n+    }\n+\n }\n \n "
  },
  {
    "sha": "9edfefcc6d34dfaaa258bf6bccb694ee21b8c784",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,105 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.controllers;\n+\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import static org.springframework.http.ResponseEntity.ok;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.PostSubmitCallbackDispatcher;\n+\n+@Slf4j\n+@Api(\n+    value = \"/asylum\",\n+    consumes = MediaType.APPLICATION_JSON_VALUE,\n+    produces = MediaType.APPLICATION_JSON_VALUE\n+)\n+@RequestMapping(\n+    path = \"/asylum\",\n+    consumes = MediaType.APPLICATION_JSON_VALUE,\n+    produces = MediaType.APPLICATION_JSON_VALUE\n+)\n+@RestController\n+public class PostSubmitCallbackController {\n+\n+    private static final org.slf4j.Logger LOG = getLogger(PostSubmitCallbackController.class);\n+\n+    private final PostSubmitCallbackDispatcher<AsylumCase> callbackDispatcher;\n+\n+    public PostSubmitCallbackController(\n+        PostSubmitCallbackDispatcher<AsylumCase> callbackDispatcher\n+    ) {\n+        requireNonNull(callbackDispatcher, \"callbackDispatcher must not be null\");\n+\n+        this.callbackDispatcher = callbackDispatcher;\n+    }\n+\n+    @ApiOperation(\n+        value = \"Handles 'SubmittedEvent' callbacks from CCD\",\n+        response = PostSubmitCallbackResponse.class,\n+        authorizations =\n+            {\n+            @Authorization(value = \"Authorization\"),\n+            @Authorization(value = \"ServiceAuthorization\")\n+            }\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Optional confirmation text for CCD UI\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Bad Request\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Forbidden\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 415,\n+            message = \"Unsupported Media Type\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"Internal Server Error\",\n+            response = PostSubmitCallbackResponse.class\n+            )\n+    })\n+    @PostMapping(path = \"/ccdSubmitted\")\n+    public ResponseEntity<PostSubmitCallbackResponse> ccdSubmitted(\n+        @ApiParam(value = \"Asylum case data\", required = true) @RequestBody Callback<AsylumCase> callback\n+    ) {\n+        LOG.info(\n+            \"Asylum Case CCD `ccdSubmitted` event `{}` received for Case ID `{}`\",\n+            callback.getEvent(),\n+            callback.getCaseDetails().getId()\n+        );\n+\n+        PostSubmitCallbackResponse callbackResponse =\n+            callbackDispatcher.handle(PostSubmitCallbackStage.CCD_SUBMITTED,callback);\n+\n+        LOG.info(\n+            \"Asylum Case CCD `ccdSubmitted` event `{}` handled for Case ID `{}`\",\n+            callback.getEvent(),\n+            callback.getCaseDetails().getId()\n+        );\n+\n+        return ok(callbackResponse);\n+    }\n+}"
  },
  {
    "sha": "57a789b3b2dc826678b9777188791cef90d104cc",
    "filename": "src/main/resources/application.yaml",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/resources/application.yaml",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/resources/application.yaml?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -109,7 +109,6 @@ govnotify:\n     pendingPayment:\n       legalRep:\n         paid:\n-\n           email: 91cf84fe-55f0-41a4-9d0f-fe13ae45fb8c\n         paidAfterAppealSubmitted:\n           beforeListing:\n@@ -602,6 +601,22 @@ govnotify:\n     requestNewHearingRequirements:\n       legalRep:\n         email: fd709bf4-095c-4734-8f88-9a9feba9fd81\n+    applyNoticeOfChangeDecision:\n+      legalRep:\n+        beforeListing:\n+          email: 6982f650-7010-4b81-82db-e0d2122f216f\n+        afterListing:\n+          email: 973211bd-76f6-4a10-816e-1daae928b75e\n+      homeOffice:\n+        beforeListing:\n+          email: eea8e690-b0ff-45dd-b85b-c67d7ff516fd\n+        afterListing:\n+          email: 6b3df289-05f1-44ef-a42e-c82682646d5b\n+      appellant:\n+        email: 94dfef5c-3e42-4a87-8792-13fdd778e72b\n+        sms: c442c9ef-b299-4b01-9f17-93c0d7340f7e\n+\n+\n \n \n \n@@ -631,6 +646,8 @@ security:\n     - \"caseworker-ia\"\n     - \"citizen\"\n   roleEventAccess:\n+    caseworker-approver:\n+      - \"applyNocDecision\"\n     citizen:\n       - \"startAppeal\"\n       - \"editAppeal\"\n@@ -653,6 +670,7 @@ security:\n       - \"payAndSubmitAppeal\"\n       - \"paymentAppeal\"\n       - \"makeAnApplication\"\n+      - \"applyNocDecision\"\n     caseworker-ia-caseofficer:\n       - \"sendDirection\"\n       - \"changeDirectionDueDate\""
  },
  {
    "sha": "969d90cf5cbb759d29dadfda9bfb326eb27d50da",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreferenceTest.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreferenceTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreferenceTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ContactPreferenceTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,31 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class ContactPreferenceTest {\n+\n+    @Test\n+    void has_correct_asylum_contact_preference() {\n+        assertThat(ContactPreference.from(\"wantsEmail\").get()).isEqualByComparingTo(ContactPreference.WANTS_EMAIL);\n+        assertThat(ContactPreference.from(\"wantsSms\").get()).isEqualByComparingTo(ContactPreference.WANTS_SMS);\n+    }\n+\n+    @Test\n+    void has_correct_asylum_contact_preference_description() {\n+        assertEquals(\"Email\", ContactPreference.WANTS_EMAIL.getDescription());\n+        assertEquals(\"Text message\", ContactPreference.WANTS_SMS.getDescription());\n+    }\n+\n+    @Test\n+    void returns_optional_for_unknown_contact_preference() {\n+        assertThat(ContactPreference.from(\"some_unknown_type\")).isEmpty();\n+    }\n+\n+    @Test\n+    void if_this_test_fails_it_is_because_it_needs_updating_with_your_changes() {\n+        assertEquals(2, ContactPreference.values().length);\n+    }\n+}"
  },
  {
    "sha": "fb8ee780f0fe885e8c28509d38b435c1bb6c9fd7",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -84,6 +84,6 @@ public void has_correct_values() {\n \n     @Test\n     public void if_this_test_fails_it_is_because_it_needs_updating_with_your_changes() {\n-        assertEquals(72, Event.values().length);\n+        assertEquals(73, Event.values().length);\n     }\n }"
  },
  {
    "sha": "e8990157f27da94e779b39ba57b44d4a20eb3318",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostSubmitCallbackStageTest {\n+\n+    @Test\n+    void has_correct_case_event_ids() {\n+        assertEquals(\"ccdSubmitted\", PostSubmitCallbackStage.CCD_SUBMITTED.toString());\n+    }\n+\n+    @Test\n+    void if_this_test_fails_it_is_because_it_needs_updating_with_your_changes() {\n+        assertEquals(1, PostSubmitCallbackStage.values().length);\n+    }\n+}"
  },
  {
    "sha": "3732e9e24dc0bc87d1f34938ca497e630da8c23b",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,117 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.postsubmit;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Collections;\n+import java.util.function.BiPredicate;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.ErrorHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.NotificationGenerator;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostSubmitNotificationHandlerTest {\n+\n+    @Mock\n+    Callback<AsylumCase> callback;\n+    @Mock\n+    CaseDetails<AsylumCase> caseDetails;\n+    @Mock\n+    AsylumCase asylumCase;\n+\n+    @Mock\n+    NotificationGenerator notificationGenerator;\n+    @Mock\n+    BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandle;\n+    @Mock\n+    ErrorHandler errorHandler;\n+    private PostSubmitCallbackStage callbackStage = PostSubmitCallbackStage.CCD_SUBMITTED;\n+    private PostSubmitNotificationHandler notificationHandler;\n+    private PostSubmitCallbackResponse postSubmitCallbackResponse = new PostSubmitCallbackResponse();\n+\n+    @BeforeEach\n+    void setUp() {\n+        notificationHandler = new PostSubmitNotificationHandler(canHandle, Collections.singletonList(notificationGenerator));\n+    }\n+\n+    @Test\n+    void should_generate_notification_when_event_can_be_handled() {\n+\n+        when(canHandle.test(callbackStage, callback)).thenReturn(true);\n+        PostSubmitCallbackResponse response = notificationHandler.handle(callbackStage, callback);\n+\n+        assertEquals(\"success\", response.getConfirmationHeader().get());\n+        assertEquals(\"success\", response.getConfirmationBody().get());\n+        verify(notificationGenerator).generate(callback);\n+    }\n+\n+    @Test\n+    void should_not_generate_notification_when_cannot_handle_event() {\n+        when(canHandle.test(callbackStage, callback)).thenReturn(false);\n+\n+        assertThatThrownBy(() -> notificationHandler.handle(callbackStage, callback))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"Cannot handle callback\");\n+\n+        verifyNoInteractions(notificationGenerator);\n+    }\n+\n+    @Test\n+    void should_return_false_when_cannot_handle_event() {\n+        when(canHandle.test(callbackStage, callback)).thenReturn(false);\n+\n+        assertEquals(false, notificationHandler.canHandle(callbackStage, callback));\n+    }\n+\n+    @Test\n+    void should_throw_exception_when_callback_stage_is_null() {\n+        assertThatThrownBy(() -> notificationHandler.canHandle(null, callback))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"callbackStage must not be null\");\n+    }\n+\n+    @Test\n+    void should_throw_exception_when_callback_is_null() {\n+        assertThatThrownBy(() -> notificationHandler.canHandle(callbackStage, null))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"callback must not be null\");\n+    }\n+\n+    @Test\n+    void should_catch_exception_and_invoke_error_handler() {\n+        when(canHandle.test(callbackStage, callback)).thenReturn(true);\n+        String message = \"exception happened\";\n+        Throwable exception = new RuntimeException(message);\n+        doThrow(exception).when(notificationGenerator).generate(callback);\n+        notificationHandler =\n+            new PostSubmitNotificationHandler(canHandle, Collections.singletonList(notificationGenerator), errorHandler);\n+\n+        notificationHandler.handle(callbackStage, callback);\n+\n+        verify(errorHandler).accept(callback, exception);\n+    }\n+\n+    @Test\n+    void should_re_throw_exception_from_generator() {\n+\n+        when(canHandle.test(callbackStage, callback)).thenReturn(true);\n+        String message = \"exception happened\";\n+        doThrow(new RuntimeException(message)).when(notificationGenerator).generate(callback);\n+        notificationHandler = new PostSubmitNotificationHandler(canHandle, Collections.singletonList(notificationGenerator));\n+\n+        assertThatThrownBy(() -> notificationHandler.handle(callbackStage, callback))\n+            .isExactlyInstanceOf(RuntimeException.class)\n+            .hasMessage(message);\n+    }\n+}"
  },
  {
    "sha": "0f4e718e4111901031e26ad2ad600c35f0dbff3c",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmailTest.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmailTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmailTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/email/AppellantApplyNocDecisionPersonalisationEmailTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,119 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.appellant.email;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.*;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+class AppellantApplyNocDecisionPersonalisationEmailTest {\n+\n+    @Mock\n+    Callback<AsylumCase> callback;\n+    @Mock\n+    AsylumCase asylumCase;\n+    @Mock\n+    private CaseDetails<AsylumCase> caseDetails;\n+\n+    private Long caseId = 12345L;\n+    private String emailTemplateId = \"someEmailTemplateId\";\n+\n+\n+    private long mockedAppealReferenceNumber = 1236;\n+    private String mockedAppellantGivenNames = \"someAppellantGivenNames\";\n+    private String mockedAppellantFamilyName = \"someAppellantFamilyName\";\n+    private String mockedAppellantEmailAddress = \"appelant@example.net\";\n+    private String dateOfBirth = \"2020-03-01\";\n+\n+    private AppellantApplyNocDecisionPersonalisationEmail appellantApplyNocDecisionPersonalisationEmail;\n+\n+    @BeforeEach\n+    void setup() {\n+\n+        when(callback.getCaseDetails()).thenReturn(caseDetails);\n+        when(caseDetails.getCaseData()).thenReturn(asylumCase);\n+\n+        when(callback.getCaseDetails().getId()).thenReturn(mockedAppealReferenceNumber);\n+\n+        when(asylumCase.read(APPELLANT_DATE_OF_BIRTH, String.class)).thenReturn(Optional.of(dateOfBirth));\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.of(mockedAppellantGivenNames));\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.of(mockedAppellantFamilyName));\n+        when(asylumCase.read(EMAIL, String.class)).thenReturn(Optional.of(mockedAppellantEmailAddress));\n+\n+        appellantApplyNocDecisionPersonalisationEmail = new AppellantApplyNocDecisionPersonalisationEmail(\n+            emailTemplateId);\n+    }\n+\n+    @Test\n+    void should_return_given_template_id() {\n+        assertEquals(emailTemplateId, appellantApplyNocDecisionPersonalisationEmail.getTemplateId());\n+    }\n+\n+    @Test\n+    void should_return_given_reference_id() {\n+        assertEquals(caseId + \"_APPLY_NOC_DECISION_APPELLANT_EMAIL\",\n+            appellantApplyNocDecisionPersonalisationEmail.getReferenceId(caseId));\n+    }\n+\n+    @Test\n+    void should_return_given_email_address_list_from_subscribers_in_asylum_case() {\n+\n+        assertTrue(appellantApplyNocDecisionPersonalisationEmail.getRecipientsList(asylumCase)\n+            .contains(mockedAppellantEmailAddress));\n+    }\n+\n+    @Test\n+    void should_throw_exception_on_personalisation_when_case_is_null() {\n+\n+        when(asylumCase.read(EMAIL, String.class)).thenReturn(Optional.empty());\n+\n+        assertThatThrownBy(() -> appellantApplyNocDecisionPersonalisationEmail.getRecipientsList(asylumCase))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"appellantEmailAddress is not present\");\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_all_information_given() {\n+\n+        when(caseDetails.getId()).thenReturn(mockedAppealReferenceNumber);\n+        Map<String, String> personalisation = appellantApplyNocDecisionPersonalisationEmail.getPersonalisation(callback);\n+\n+        assertEquals(\"\" + mockedAppealReferenceNumber, personalisation.get(\"Ref Number\"));\n+        assertEquals(mockedAppellantGivenNames, personalisation.get(\"Given names\"));\n+        assertEquals(mockedAppellantFamilyName, personalisation.get(\"Family name\"));\n+        assertEquals(dateOfBirth, personalisation.get(\"Date Of Birth\"));\n+\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_only_mandatory_information_given() {\n+\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_DATE_OF_BIRTH, String.class)).thenReturn(Optional.empty());\n+\n+\n+        Map<String, String> personalisation = appellantApplyNocDecisionPersonalisationEmail.getPersonalisation(callback);\n+\n+        assertEquals(\"\" + mockedAppealReferenceNumber, personalisation.get(\"Ref Number\"));\n+        assertEquals(\"\", personalisation.get(\"Given names\"));\n+        assertEquals(\"\", personalisation.get(\"Family name\"));\n+        assertEquals(\"\", personalisation.get(\"Date Of Birth\"));\n+    }\n+}"
  },
  {
    "sha": "34d2732092416107399859ffba99c08d483d6ca8",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSmsTest.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSmsTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSmsTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/appellant/sms/AppellantApplyNocDecisionPersonalisationSmsTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,124 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.appellant.sms;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.*;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+class AppellantApplyNocDecisionPersonalisationSmsTest {\n+\n+    @Mock\n+    Callback<AsylumCase> callback;\n+    @Mock\n+    private CaseDetails<AsylumCase> caseDetails;\n+    @Mock\n+    AsylumCase asylumCase;\n+\n+    private Long caseId = 12345L;\n+    private String smsTemplateId = \"someSmsTemplateId\";\n+\n+    private long mockedAppealReferenceNumber = 1236;\n+    private String mockedAppellantMobilePhone = \"07123456789\";\n+    private String mockedAppellantGivenNames = \"someAppellantGivenNames\";\n+    private String mockedAppellantFamilyName = \"someAppellantFamilyName\";\n+    private String dateOfBirth = \"2020-03-01\";\n+\n+    private AppellantApplyNocDecisionPersonalisationSms appellantApplyNocDecisionPersonalisationSms;\n+\n+    @BeforeEach\n+    void setup() {\n+\n+        when(callback.getCaseDetails()).thenReturn(caseDetails);\n+        when(caseDetails.getCaseData()).thenReturn(asylumCase);\n+        when(callback.getCaseDetails().getId()).thenReturn(mockedAppealReferenceNumber);\n+\n+        when(asylumCase.read(APPELLANT_DATE_OF_BIRTH, String.class)).thenReturn(Optional.of(dateOfBirth));\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.of(mockedAppellantGivenNames));\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.of(mockedAppellantFamilyName));\n+\n+        appellantApplyNocDecisionPersonalisationSms = new AppellantApplyNocDecisionPersonalisationSms(smsTemplateId);\n+    }\n+\n+    @Test\n+    void should_return_given_template_id() {\n+        assertEquals(smsTemplateId, appellantApplyNocDecisionPersonalisationSms.getTemplateId());\n+    }\n+\n+    @Test\n+    void should_return_given_reference_id() {\n+        assertEquals(caseId + \"_APPLY_NOC_DECISION_APPELLANT_SMS\",\n+            appellantApplyNocDecisionPersonalisationSms.getReferenceId(caseId));\n+    }\n+\n+    @Test\n+    void should_throw_exception_on_recipients_when_case_is_null() {\n+\n+        assertThatThrownBy(() -> appellantApplyNocDecisionPersonalisationSms.getRecipientsList(asylumCase))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"appellantMobileNumber is not present\");\n+    }\n+\n+    @Test\n+    void should_return_given_mobile_mobile_list_from_subscribers_in_asylum_case() {\n+\n+        when(asylumCase.read(MOBILE_NUMBER,String.class))\n+            .thenReturn(Optional.of(mockedAppellantMobilePhone));\n+\n+        assertTrue(\n+            appellantApplyNocDecisionPersonalisationSms.getRecipientsList(asylumCase).contains(mockedAppellantMobilePhone));\n+    }\n+\n+    @Test\n+    void should_throw_exception_on_personalisation_when_case_is_null() {\n+\n+        assertThatThrownBy(() -> appellantApplyNocDecisionPersonalisationSms.getPersonalisation((Callback<AsylumCase>) null))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"callback must not be null\");\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_all_information_given() {\n+        when(caseDetails.getId()).thenReturn(mockedAppealReferenceNumber);\n+\n+        Map<String, String> personalisation = appellantApplyNocDecisionPersonalisationSms.getPersonalisation(callback);\n+        assertEquals(\"\" + mockedAppealReferenceNumber, personalisation.get(\"Ref Number\"));\n+        assertEquals(mockedAppellantGivenNames, personalisation.get(\"Given names\"));\n+        assertEquals(mockedAppellantFamilyName, personalisation.get(\"Family name\"));\n+        assertEquals(dateOfBirth, personalisation.get(\"Date Of Birth\"));\n+\n+\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_only_mandatory_information_given() {\n+\n+        when(caseDetails.getId()).thenReturn(mockedAppealReferenceNumber);\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_DATE_OF_BIRTH, String.class)).thenReturn(Optional.empty());\n+\n+\n+        Map<String, String> personalisation = appellantApplyNocDecisionPersonalisationSms.getPersonalisation(callback);\n+        assertEquals(\"\" + mockedAppealReferenceNumber, personalisation.get(\"Ref Number\"));\n+        assertEquals(\"\", personalisation.get(\"Given names\"));\n+        assertEquals(\"\", personalisation.get(\"Family name\"));\n+        assertEquals(\"\", personalisation.get(\"Date Of Birth\"));\n+\n+    }\n+}"
  },
  {
    "sha": "f1714061e7cdd5b04a80339ae8e1a318c60e683b",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisationTest.java",
    "status": "added",
    "additions": 310,
    "deletions": 0,
    "changes": 310,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisationTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisationTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/homeoffice/HomeOfficeApplyNocDecisionPersonalisationTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,310 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.homeoffice;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.*;\n+\n+import java.util.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.HearingCentre;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.State;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.AppealService;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.CustomerServicesProvider;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.EmailAddressFinder;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class HomeOfficeApplyNocDecisionPersonalisationTest {\n+\n+    @Mock\n+    AsylumCase asylumCase;\n+    @Mock\n+    AppealService appealService;\n+    @Mock\n+    CustomerServicesProvider customerServicesProvider;\n+\n+    @Mock\n+    EmailAddressFinder emailAddressFinder;\n+\n+    private Long caseId = 12345L;\n+\n+    private String iaExUiFrontendUrl = \"http://somefrontendurl\";\n+    private String appealReferenceNumber = \"someReferenceNumber\";\n+    private String ariaListingReference = \"someAriaListingReference\";\n+    private String homeOfficeRefNumber = \"someHomeOfficeRefNumber\";\n+    private String appellantGivenNames = \"someAppellantGivenNames\";\n+    private String appellantFamilyName = \"someAppellantFamilyName\";\n+\n+    private String applicationType = \"withdraw\";\n+    private String customerServicesTelephone = \"555 555 555\";\n+    private String customerServicesEmail = \"cust.services@example.com\";\n+\n+    private String homeOfficeApplyNocDecisionBeforeListingTemplateId = \"SomeTemplate\";\n+    private String homeOfficeApplyNocDecisionAfterListingTemplateId = \"SomeTemplate\";\n+\n+\n+    private String apcPrivateBetaInboxHomeOfficeEmailAddress = \"homeoffice-apc@example.com\";\n+    private String respondentReviewDirectionEmail = \"homeoffice-respondent@example.com\";\n+    private String homeOfficeHearingCentreEmail = \"hc-taylorhouse@example.com\";\n+    private String homeOfficeEmail = \"ho-taylorhouse@example.com\";\n+\n+\n+\n+    private HomeOfficeApplyNocDecisionPersonalisation homeOfficeApplyNocDecisionPersonalisation;\n+\n+    @BeforeEach\n+    public void setup() {\n+\n+        when(asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class)).thenReturn(Optional.of(appealReferenceNumber));\n+        when(asylumCase.read(ARIA_LISTING_REFERENCE, String.class)).thenReturn(Optional.of(ariaListingReference));\n+        when(asylumCase.read(HOME_OFFICE_REFERENCE_NUMBER, String.class)).thenReturn(Optional.of(homeOfficeRefNumber));\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.of(appellantGivenNames));\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.of(appellantFamilyName));\n+\n+        when((customerServicesProvider.getCustomerServicesTelephone())).thenReturn(customerServicesTelephone);\n+        when((customerServicesProvider.getCustomerServicesEmail())).thenReturn(customerServicesEmail);\n+        when((customerServicesProvider.getCustomerServicesTelephone())).thenReturn(customerServicesTelephone);\n+        when((customerServicesProvider.getCustomerServicesEmail())).thenReturn(customerServicesEmail);\n+        when((emailAddressFinder.getListCaseHomeOfficeEmailAddress(asylumCase)))\n+            .thenReturn(homeOfficeHearingCentreEmail);\n+        when((emailAddressFinder.getHomeOfficeEmailAddress(asylumCase))).thenReturn(homeOfficeEmail);\n+\n+        homeOfficeApplyNocDecisionPersonalisation = new HomeOfficeApplyNocDecisionPersonalisation(\n+            homeOfficeApplyNocDecisionBeforeListingTemplateId,\n+            homeOfficeApplyNocDecisionAfterListingTemplateId,\n+            apcPrivateBetaInboxHomeOfficeEmailAddress,\n+            respondentReviewDirectionEmail,\n+            iaExUiFrontendUrl,\n+            customerServicesProvider,\n+            appealService,\n+            emailAddressFinder\n+        );\n+    }\n+\n+    @Test\n+    public void should_return_given_template_id() {\n+\n+        when(appealService.isAppealListed(asylumCase)).thenReturn(false);\n+        assertEquals(homeOfficeApplyNocDecisionBeforeListingTemplateId,\n+            homeOfficeApplyNocDecisionPersonalisation.getTemplateId(asylumCase));\n+\n+        when(appealService.isAppealListed(asylumCase)).thenReturn(true);\n+        assertEquals(homeOfficeApplyNocDecisionAfterListingTemplateId,\n+            homeOfficeApplyNocDecisionPersonalisation.getTemplateId(asylumCase));\n+\n+        when(appealService.isAppealListed(asylumCase)).thenReturn(false);\n+        assertEquals(homeOfficeApplyNocDecisionBeforeListingTemplateId,\n+            homeOfficeApplyNocDecisionPersonalisation.getTemplateId(asylumCase));\n+\n+        when(appealService.isAppealListed(asylumCase)).thenReturn(true);\n+        assertEquals(homeOfficeApplyNocDecisionAfterListingTemplateId,\n+            homeOfficeApplyNocDecisionPersonalisation.getTemplateId(asylumCase));\n+\n+    }\n+\n+    @Test\n+    public void should_return_null_on_personalisation_when_case_is_state_before_reinstate_is_not_present() {\n+        when(asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class)).thenReturn(Optional.empty());\n+        assertEquals(Collections.emptySet(), homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase));\n+    }\n+\n+    @Test\n+    public void should_return_given_reference_id() {\n+        assertEquals(caseId + \"_APPLY_NOC_DECISION_HOME_OFFICE\",\n+            homeOfficeApplyNocDecisionPersonalisation.getReferenceId(caseId));\n+    }\n+\n+\n+    @Test\n+    public void test_email_address_for_home_office_when_legal_rep_applied() {\n+\n+\n+        List<State> apcEmail = newArrayList(\n+            State.APPEAL_STARTED,\n+            State.APPEAL_SUBMITTED,\n+            State.AWAITING_RESPONDENT_EVIDENCE,\n+            State.CASE_BUILDING,\n+            State.CASE_UNDER_REVIEW,\n+            State.PENDING_PAYMENT,\n+            State.ENDED\n+\n+        );\n+\n+        List<State> lartEmail = newArrayList(\n+            State.RESPONDENT_REVIEW,\n+            State.SUBMIT_HEARING_REQUIREMENTS,\n+            State.LISTING\n+        );\n+\n+        List<State> pouEmail = newArrayList(\n+            State.ADJOURNED,\n+            State.PREPARE_FOR_HEARING,\n+            State.FINAL_BUNDLING,\n+            State.PRE_HEARING,\n+            State.DECISION,\n+            State.DECIDED,\n+            State.FTPA_SUBMITTED,\n+            State.FTPA_DECIDED\n+        );\n+\n+        Map<String, List<State>> states = new HashMap<>();\n+\n+        states.put(apcPrivateBetaInboxHomeOfficeEmailAddress, apcEmail);\n+        states.put(respondentReviewDirectionEmail, lartEmail);\n+        states.put(homeOfficeHearingCentreEmail, pouEmail);\n+\n+        Set<String> emailAddresses = states.keySet();\n+\n+        for (String emailAddress : emailAddresses) {\n+            List<State> statesList = states.get(emailAddress);\n+            for (State state : statesList) {\n+                if (emailAddress.equals(homeOfficeHearingCentreEmail)) {\n+                    when(asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class))\n+                        .thenReturn(Optional.of(state));\n+                    when(appealService.isAppealListed(asylumCase)).thenReturn(true);\n+                    when(asylumCase.read(HEARING_CENTRE)).thenReturn(Optional.of(HearingCentre.TAYLOR_HOUSE));\n+                    assertTrue(homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase)\n+                        .contains(emailAddress));\n+                } else {\n+                    when(asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class))\n+                        .thenReturn(Optional.of(state));\n+                    assertTrue(homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase)\n+                        .contains(emailAddress));\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_email_address_for_home_office_when_generic_ho_applied() {\n+\n+\n+        List<State> apcEmail = newArrayList(\n+            State.APPEAL_STARTED,\n+            State.APPEAL_SUBMITTED,\n+            State.AWAITING_RESPONDENT_EVIDENCE,\n+            State.CASE_BUILDING,\n+            State.CASE_UNDER_REVIEW,\n+            State.PENDING_PAYMENT,\n+            State.ENDED\n+\n+        );\n+\n+        List<State> lartEmail = newArrayList(\n+            State.RESPONDENT_REVIEW,\n+            State.SUBMIT_HEARING_REQUIREMENTS,\n+            State.LISTING\n+        );\n+\n+        List<State> pouEmail = newArrayList(\n+            State.ADJOURNED,\n+            State.PREPARE_FOR_HEARING,\n+            State.FINAL_BUNDLING,\n+            State.PRE_HEARING,\n+            State.DECISION,\n+            State.DECIDED,\n+            State.FTPA_SUBMITTED,\n+            State.FTPA_DECIDED\n+        );\n+\n+        Map<String, List<State>> states = new HashMap<>();\n+\n+        states.put(apcPrivateBetaInboxHomeOfficeEmailAddress, apcEmail);\n+        states.put(respondentReviewDirectionEmail, lartEmail);\n+        states.put(homeOfficeHearingCentreEmail, pouEmail);\n+\n+        Set<String> emailAddresses = states.keySet();\n+\n+        for (String emailAddress : emailAddresses) {\n+            List<State> statesList = states.get(emailAddress);\n+            for (State state : statesList) {\n+                if (emailAddress.equals(homeOfficeHearingCentreEmail)) {\n+                    when(asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class))\n+                        .thenReturn(Optional.of(state));\n+                    when(appealService.isAppealListed(asylumCase)).thenReturn(true);\n+                    when(asylumCase.read(HEARING_CENTRE)).thenReturn(Optional.of(HearingCentre.TAYLOR_HOUSE));\n+                    assertTrue(homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase)\n+                        .contains(emailAddress));\n+                } else {\n+                    when(asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class))\n+                        .thenReturn(Optional.of(state));\n+                    assertTrue(homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase)\n+                        .contains(emailAddress));\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void should_throw_exception_when_cannot_find_email_address_for_home_office() {\n+\n+\n+        when(asylumCase.read(CURRENT_CASE_STATE_VISIBLE_TO_HOME_OFFICE_ALL, State.class))\n+            .thenReturn(Optional.of(State.UNKNOWN));\n+\n+        assertThatThrownBy(() -> homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"homeOffice email Address cannot be found\");\n+    }\n+\n+    @Test\n+    public void should_return_null_for_home_office_email_when_state_not_defined() {\n+        assertEquals(Collections.emptySet(), homeOfficeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase));\n+    }\n+\n+\n+    @Test\n+    public void should_throw_exception_on_personalisation_when_case_is_null() {\n+\n+        assertThatThrownBy(() -> homeOfficeApplyNocDecisionPersonalisation.getPersonalisation((AsylumCase) null))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"asylumCase must not be null\");\n+    }\n+\n+    @Test\n+    public void should_return_personalisation_when_all_information_given() {\n+\n+        Map<String, String> personalisation = homeOfficeApplyNocDecisionPersonalisation.getPersonalisation(asylumCase);\n+\n+        assertEquals(appealReferenceNumber, personalisation.get(\"appealReferenceNumber\"));\n+        assertEquals(ariaListingReference, personalisation.get(\"ariaListingReference\"));\n+        assertEquals(homeOfficeRefNumber, personalisation.get(\"homeOfficeReferenceNumber\"));\n+        assertEquals(appellantGivenNames, personalisation.get(\"appellantGivenNames\"));\n+        assertEquals(appellantFamilyName, personalisation.get(\"appellantFamilyName\"));\n+        assertEquals(iaExUiFrontendUrl, personalisation.get(\"linkToOnlineService\"));\n+        assertEquals(customerServicesTelephone, customerServicesProvider.getCustomerServicesTelephone());\n+        assertEquals(customerServicesEmail, customerServicesProvider.getCustomerServicesEmail());\n+    }\n+\n+    @Test\n+    public void should_return_personalisation_when_all_mandatory_information_given() {\n+\n+        when(asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(ARIA_LISTING_REFERENCE, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(HOME_OFFICE_REFERENCE_NUMBER, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.empty());\n+\n+        Map<String, String> personalisation = homeOfficeApplyNocDecisionPersonalisation.getPersonalisation(asylumCase);\n+\n+        assertEquals(\"\", personalisation.get(\"appealReferenceNumber\"));\n+        assertEquals(\"\", personalisation.get(\"ariaListingReference\"));\n+        assertEquals(\"\", personalisation.get(\"homeOfficeReferenceNumber\"));\n+        assertEquals(\"\", personalisation.get(\"appellantGivenNames\"));\n+        assertEquals(\"\", personalisation.get(\"appellantFamilyName\"));\n+        assertEquals(iaExUiFrontendUrl, personalisation.get(\"linkToOnlineService\"));\n+        assertEquals(customerServicesTelephone, customerServicesProvider.getCustomerServicesTelephone());\n+        assertEquals(customerServicesEmail, customerServicesProvider.getCustomerServicesEmail());\n+    }\n+}"
  },
  {
    "sha": "5e26f787ed5a9b4dc3ecec4690885b75de121258",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java",
    "status": "added",
    "additions": 131,
    "deletions": 0,
    "changes": 131,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,131 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.legalrepresentative;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.*;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.HearingCentre;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.CustomerServicesProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+class LegalRepresentativeApplyNocDecisionPersonalisationTest {\n+\n+    @Mock\n+    AsylumCase asylumCase;\n+    @Mock\n+    CustomerServicesProvider customerServicesProvider;\n+\n+    private Long caseId = 12345L;\n+    private String templateId = \"someTemplateId\";\n+    private String templateAfterListingId = \"someTemplateAfterListingId\";\n+    private String iaExUiFrontendUrl = \"http://localhost\";\n+    private String legalRepEmailAddress = \"legalRep@example.com\";\n+    private String appealReferenceNumber = \"someReferenceNumber\";\n+    private String legalRepRefNumber = \"somelegalRepRefNumber\";\n+    private String appellantGivenNames = \"someAppellantGivenNames\";\n+    private String appellantFamilyName = \"someAppellantFamilyName\";\n+    private String customerServicesTelephone = \"555 555 555\";\n+    private String customerServicesEmail = \"cust.services@example.com\";\n+\n+    private LegalRepresentativeApplyNocDecisionPersonalisation legalRepresentativeApplyNocDecisionPersonalisation;\n+\n+    @BeforeEach\n+    void setup() {\n+\n+        when(asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class)).thenReturn(Optional.of(appealReferenceNumber));\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.of(appellantGivenNames));\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.of(appellantFamilyName));\n+        when(asylumCase.read(LEGAL_REP_REFERENCE_NUMBER, String.class)).thenReturn(Optional.of(legalRepRefNumber));\n+        when(asylumCase.read(LEGAL_REPRESENTATIVE_EMAIL_ADDRESS, String.class))\n+            .thenReturn(Optional.of(legalRepEmailAddress));\n+        when((customerServicesProvider.getCustomerServicesTelephone())).thenReturn(customerServicesTelephone);\n+        when((customerServicesProvider.getCustomerServicesEmail())).thenReturn(customerServicesEmail);\n+\n+        legalRepresentativeApplyNocDecisionPersonalisation = new LegalRepresentativeApplyNocDecisionPersonalisation(\n+            templateId,\n+            templateAfterListingId,\n+            iaExUiFrontendUrl,\n+            customerServicesProvider\n+        );\n+    }\n+\n+\n+    @Test\n+    void should_return_given_template_id() {\n+        when(asylumCase.read(LIST_CASE_HEARING_CENTRE, HearingCentre.class)).thenReturn(Optional.empty());\n+        assertEquals(templateId, legalRepresentativeApplyNocDecisionPersonalisation.getTemplateId(asylumCase));\n+        when(asylumCase.read(LIST_CASE_HEARING_CENTRE, HearingCentre.class)).thenReturn(Optional.of(HearingCentre.TAYLOR_HOUSE));\n+        assertEquals(templateAfterListingId, legalRepresentativeApplyNocDecisionPersonalisation.getTemplateId(asylumCase));\n+    }\n+\n+    @Test\n+    void should_return_given_reference_id() {\n+        assertEquals(caseId + \"_APPLY_NOC_DECISION_LEGAL_REP\",\n+            legalRepresentativeApplyNocDecisionPersonalisation.getReferenceId(caseId));\n+    }\n+\n+    @Test\n+    void should_return_given_email_address_from_asylum_case() {\n+        assertTrue(legalRepresentativeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase)\n+            .contains(legalRepEmailAddress));\n+    }\n+\n+    @Test\n+    void should_throw_exception_when_cannot_find_email_address_for_legal_rep() {\n+        when(asylumCase.read(LEGAL_REPRESENTATIVE_EMAIL_ADDRESS, String.class)).thenReturn(Optional.empty());\n+\n+        assertThatThrownBy(() -> legalRepresentativeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"legalRepresentativeEmailAddress is not present\");\n+    }\n+\n+    @Test\n+    void should_throw_exception_on_personalisation_when_case_is_null() {\n+\n+        assertThatThrownBy(\n+            () -> legalRepresentativeApplyNocDecisionPersonalisation.getPersonalisation((AsylumCase) null))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"asylumCase must not be null\");\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_all_information_given() {\n+\n+        Map<String, String> personalisation =\n+            legalRepresentativeApplyNocDecisionPersonalisation.getPersonalisation(asylumCase);\n+\n+        assertThat(personalisation).isEqualToComparingOnlyGivenFields(asylumCase);\n+        assertEquals(customerServicesTelephone, customerServicesProvider.getCustomerServicesTelephone());\n+        assertEquals(customerServicesEmail, customerServicesProvider.getCustomerServicesEmail());\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_all_mandatory_information_given() {\n+\n+        when(asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(LEGAL_REP_REFERENCE_NUMBER, String.class)).thenReturn(Optional.empty());\n+\n+        Map<String, String> personalisation =\n+            legalRepresentativeApplyNocDecisionPersonalisation.getPersonalisation(asylumCase);\n+\n+        assertThat(personalisation).isEqualToComparingOnlyGivenFields(asylumCase);\n+        assertEquals(customerServicesTelephone, customerServicesProvider.getCustomerServicesTelephone());\n+        assertEquals(customerServicesEmail, customerServicesProvider.getCustomerServicesEmail());\n+    }\n+}"
  },
  {
    "sha": "8930ba8f83ac8573d59cc5c246cb126c4e35d43b",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "status": "added",
    "additions": 217,
    "deletions": 0,
    "changes": 217,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,217 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.springframework.security.access.AccessDeniedException;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.Event;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.security.CcdEventAuthorizor;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+@SuppressWarnings(\"unchecked\")\n+class PostSubmitCallbackDispatcherTest {\n+\n+    @Mock\n+    private CcdEventAuthorizor ccdEventAuthorizor;\n+    @Mock\n+    private PostSubmitCallbackHandler<CaseData> handler1;\n+    @Mock\n+    private PostSubmitCallbackHandler<CaseData> handler2;\n+    @Mock\n+    private PostSubmitCallbackHandler<CaseData> handler3;\n+    @Mock\n+    private Callback<CaseData> callback;\n+    @Mock\n+    private CaseDetails<CaseData> caseDetails;\n+    @Mock\n+    private CaseData caseData;\n+\n+\n+    private String header1 = \"Some header 1\";\n+    private String body1 = \"Some body 1\";\n+\n+    private String header2 = \"Some header 2\";\n+    private String body2 = \"Some body 2\";\n+\n+    private String header3 = \"Some header 3\";\n+    private String body3 = \"Some body 3\";\n+\n+\n+    @Mock\n+    private PostSubmitCallbackResponse response1;\n+    @Mock\n+    private PostSubmitCallbackResponse response2;\n+    @Mock\n+    private PostSubmitCallbackResponse response3;\n+\n+    private PostSubmitCallbackDispatcher<CaseData> postSubmitCallbackDispatcher;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        postSubmitCallbackDispatcher = new PostSubmitCallbackDispatcher<>(\n+            ccdEventAuthorizor,\n+            Arrays.asList(\n+                handler1,\n+                handler2,\n+                handler3\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void should_only_dispatch_callback_to_handlers_that_can_handle_it() {\n+\n+        for (PostSubmitCallbackStage callbackStage : PostSubmitCallbackStage.values()) {\n+\n+            when(callback.getEvent()).thenReturn(Event.BUILD_CASE);\n+            when(callback.getCaseDetails()).thenReturn(caseDetails);\n+            when(caseDetails.getCaseData()).thenReturn(caseData);\n+\n+            when(response1.getConfirmationHeader()).thenReturn(Optional.of(header1));\n+            when(response1.getConfirmationBody()).thenReturn(Optional.of(body1));\n+\n+            when(response2.getConfirmationHeader()).thenReturn(Optional.of(header2));\n+            when(response2.getConfirmationBody()).thenReturn(Optional.of(body2));\n+\n+            when(response3.getConfirmationHeader()).thenReturn(Optional.of(header3));\n+            when(response3.getConfirmationBody()).thenReturn(Optional.of(body3));\n+\n+            when(handler1.canHandle(eq(callbackStage), any(Callback.class))).thenReturn(false);\n+            when(handler1.handle(eq(callbackStage), any(Callback.class))).thenReturn(response1);\n+\n+            when(handler2.canHandle(eq(callbackStage), any(Callback.class))).thenReturn(false);\n+            when(handler2.handle(eq(callbackStage), any(Callback.class))).thenReturn(response2);\n+\n+            when(handler3.canHandle(eq(callbackStage), any(Callback.class))).thenReturn(true);\n+            when(handler3.handle(eq(callbackStage), any(Callback.class))).thenReturn(response3);\n+\n+            PostSubmitCallbackResponse callbackResponse =\n+                postSubmitCallbackDispatcher.handle(callbackStage, callback);\n+\n+            assertNotNull(callbackResponse);\n+            //assertEquals(caseData, callbackResponse.getData());\n+            assertEquals(Optional.of(body3), callbackResponse.getConfirmationBody());\n+            //assertTrue(callbackResponse.getErrors().isEmpty());\n+\n+            verify(ccdEventAuthorizor, times(1)).throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+            verify(handler1, times(1)).canHandle(eq(callbackStage), any(Callback.class));\n+            verify(handler1, times(0)).handle(eq(callbackStage), any(Callback.class));\n+\n+            verify(handler2, times(1)).canHandle(eq(callbackStage), any(Callback.class));\n+            verify(handler2, times(0)).handle(eq(callbackStage), any(Callback.class));\n+\n+            verify(handler3, times(1)).canHandle(eq(callbackStage), any(Callback.class));\n+            verify(handler3, times(1)).handle(eq(callbackStage), any(Callback.class));\n+\n+            reset(ccdEventAuthorizor, handler1, handler2, handler3);\n+        }\n+    }\n+\n+    @Test\n+    void should_not_dispatch_to_handlers_if_user_not_authorized_for_event() {\n+\n+        for (PostSubmitCallbackStage callbackStage : PostSubmitCallbackStage.values()) {\n+\n+            when(callback.getEvent()).thenReturn(Event.BUILD_CASE);\n+\n+            doThrow(AccessDeniedException.class)\n+                .when(ccdEventAuthorizor)\n+                .throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+            assertThatThrownBy(() -> postSubmitCallbackDispatcher.handle(callbackStage, callback))\n+                .isExactlyInstanceOf(AccessDeniedException.class);\n+\n+            verify(ccdEventAuthorizor, times(1)).throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+            verify(handler1, never()).canHandle(any(), any());\n+            verify(handler1, never()).handle(any(), any());\n+            verify(handler2, never()).canHandle(any(), any());\n+            verify(handler2, never()).handle(any(), any());\n+            verify(handler3, never()).canHandle(any(), any());\n+            verify(handler3, never()).handle(any(), any());\n+\n+            reset(ccdEventAuthorizor, handler1, handler2, handler3);\n+        }\n+    }\n+\n+    @Test\n+    void should_not_error_if_no_handlers_are_provided() {\n+\n+        PostSubmitCallbackDispatcher<CaseData> postSubmitCallbackDispatcher =\n+            new PostSubmitCallbackDispatcher<>(ccdEventAuthorizor, Collections.emptyList());\n+\n+        for (PostSubmitCallbackStage callbackStage : PostSubmitCallbackStage.values()) {\n+\n+            try {\n+\n+                when(callback.getEvent()).thenReturn(Event.BUILD_CASE);\n+                when(callback.getCaseDetails()).thenReturn(caseDetails);\n+                when(caseDetails.getCaseData()).thenReturn(caseData);\n+\n+                PostSubmitCallbackResponse callbackResponse =\n+                    postSubmitCallbackDispatcher\n+                        .handle(callbackStage, callback);\n+\n+                assertNotNull(callbackResponse);\n+\n+                verify(ccdEventAuthorizor, times(1)).throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+                reset(ccdEventAuthorizor);\n+\n+            } catch (Exception e) {\n+                fail(\"Should not have thrown any exception\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    void should_not_allow_null_ccd_event_authorizor() {\n+\n+        assertThatThrownBy(() -> new PostSubmitCallbackDispatcher<>(null, Collections.emptyList()))\n+            .hasMessage(\"ccdEventAuthorizor must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+\n+    @Test\n+    void should_not_allow_null_handlers() {\n+\n+        assertThatThrownBy(() -> new PostSubmitCallbackDispatcher<>(ccdEventAuthorizor, null))\n+            .hasMessage(\"callbackHandlers must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+\n+    @Test\n+    void should_not_allow_null_arguments() {\n+\n+        assertThatThrownBy(() -> postSubmitCallbackDispatcher.handle(null, callback))\n+            .hasMessage(\"callbackStage must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+\n+        assertThatThrownBy(() -> postSubmitCallbackDispatcher.handle(PostSubmitCallbackStage.CCD_SUBMITTED, null))\n+            .hasMessage(\"callback must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+}"
  },
  {
    "sha": "92b17e1be64e084439b717fd77251a6adfce7bdf",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/4b3781c6018af829fcf5ce4d18917c148c8090ee/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java?ref=4b3781c6018af829fcf5ce4d18917c148c8090ee",
    "patch": "@@ -0,0 +1,97 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.controllers;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.ResponseEntity;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.*;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.PostSubmitCallbackDispatcher;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostSubmitCallbackControllerTest {\n+\n+\n+\n+    @Test\n+    void ccdSubmitted() {\n+    }\n+\n+    @Mock\n+    private PostSubmitCallbackDispatcher<AsylumCase> callbackDispatcher;\n+    @Mock\n+    private PostSubmitCallbackResponse callbackResponse;\n+    @Mock\n+    private Callback<AsylumCase> callback;\n+    @Mock\n+    private CaseDetails<AsylumCase> caseDetails;\n+\n+    private PostSubmitCallbackController postSubmitCallbackController;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        postSubmitCallbackController =\n+            new PostSubmitCallbackController(\n+                callbackDispatcher\n+            );\n+    }\n+\n+    @Test\n+    void should_deserialize_about_to_start_callback_then_dispatch_then_return_response() {\n+\n+        when(callback.getCaseDetails()).thenReturn(caseDetails);\n+\n+        doReturn(callbackResponse)\n+            .when(callbackDispatcher)\n+            .handle(PostSubmitCallbackStage.CCD_SUBMITTED, callback);\n+\n+        ResponseEntity<PostSubmitCallbackResponse> actualResponse =\n+            postSubmitCallbackController.ccdSubmitted(callback);\n+\n+        assertNotNull(actualResponse);\n+\n+        verify(callbackDispatcher, times(1)).handle(\n+            PostSubmitCallbackStage.CCD_SUBMITTED,\n+            callback\n+        );\n+    }\n+\n+    @Test\n+    void should_deserialize_about_to_submit_callback_then_dispatch_then_return_response() {\n+\n+        when(callback.getCaseDetails()).thenReturn(caseDetails);\n+\n+        doReturn(callbackResponse)\n+            .when(callbackDispatcher)\n+            .handle(PostSubmitCallbackStage.CCD_SUBMITTED, callback);\n+\n+        ResponseEntity<PostSubmitCallbackResponse> actualResponse =\n+            postSubmitCallbackController.ccdSubmitted(callback);\n+\n+        assertNotNull(actualResponse);\n+\n+        verify(callbackDispatcher, times(1)).handle(\n+            PostSubmitCallbackStage.CCD_SUBMITTED,\n+            callback\n+        );\n+    }\n+\n+    @Test\n+    void should_not_allow_null_constructor_arguments() {\n+\n+        assertThatThrownBy(() -> new PostSubmitCallbackController(null))\n+            .hasMessage(\"callbackDispatcher must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+}"
  }
]
