[
  {
    "sha": "d462b0ccb68424a1754ae4df18faa6511eb8a9b3",
    "filename": "src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/functionalTest/resources/scenarios/RIA-4104-send-apply-notice-of-change-notification-to-legal-rep.json?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,26 @@\n+{\n+  \"description\": \"RIA-4104 Send apply notice of change notification to legal rep\",\n+  \"request\": {\n+    \"uri\": \"/asylum/ccdSubmitted\",\n+    \"credentials\": \"LegalRepresentative\",\n+    \"input\": {\n+      \"id\": 4104,\n+      \"eventId\": \"applyNocDecision\",\n+      \"state\": \"appealSubmitted\",\n+      \"caseData\": {\n+        \"template\": \"minimal-appeal-submitted.json\",\n+        \"replacements\": {\n+          \"hearingCentre\": \"manchester\"\n+        }\n+      }\n+    }\n+  },\n+  \"expectation\": {\n+    \"status\": 200,\n+    \"errors\": [],\n+    \"confirmation\": {\n+      \"confirmation_header\": \"success\",\n+      \"confirmation_body\": \"success\"\n+    }\n+   }\n+}"
  },
  {
    "sha": "07d3117039f45b3e565c5da93caa02125bfe8cf1",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/Event.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -75,6 +75,7 @@\n     DECIDE_AN_APPLICATION(\"decideAnApplication\"),\n     REQUEST_NEW_HEARING_REQUIREMENTS(\"requestNewHearingRequirements\"),\n     RECORD_REMISSION_DECISION(\"recordRemissionDecision\"),\n+    APPLY_NOC_DECISION(\"applyNocDecision\"),\n \n     @JsonEnumDefaultValue\n     UNKNOWN(\"unknown\");"
  },
  {
    "sha": "0cb888dc2bb3d4529f90981dee0892c5c684f471",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStage.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,17 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback;\n+\n+public enum PostSubmitCallbackStage {\n+\n+    CCD_SUBMITTED(\"ccdSubmitted\");\n+\n+    private final String id;\n+\n+    PostSubmitCallbackStage(String id) {\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return id;\n+    }\n+}"
  },
  {
    "sha": "718a92a7eb3e39242a7b2f20a054433414ae5ec1",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/PostSubmitCallbackHandler.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,20 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers;\n+\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+\n+public interface PostSubmitCallbackHandler<T extends CaseData> {\n+\n+    boolean canHandle(\n+        PostSubmitCallbackStage callbackStage,\n+        Callback<T> callback\n+    );\n+\n+    PostSubmitCallbackResponse handle(\n+        PostSubmitCallbackStage callbackStage,\n+        Callback<T> callback\n+    );\n+}\n+"
  },
  {
    "sha": "75e890cf4ee5350f5d43ef26e921070e2eed2d5c",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandler.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.postsubmit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiPredicate;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.*;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.ErrorHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.NotificationGenerator;\n+\n+public class PostSubmitNotificationHandler implements PostSubmitCallbackHandler<AsylumCase> {\n+\n+    private final BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandleFunction;\n+    private final List<? extends NotificationGenerator> notificationGenerators;\n+    private final Optional<ErrorHandler> errorHandling;\n+\n+    public PostSubmitNotificationHandler(BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandleFunction,\n+                               List<? extends NotificationGenerator> notificationGenerator\n+    ) {\n+        this.canHandleFunction = canHandleFunction;\n+        this.notificationGenerators = notificationGenerator;\n+        this.errorHandling = Optional.empty();\n+    }\n+\n+    public PostSubmitNotificationHandler(BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandleFunction,\n+                               List<? extends NotificationGenerator> notificationGenerator,\n+                               ErrorHandler errorHandling\n+    ) {\n+        this.canHandleFunction = canHandleFunction;\n+        this.notificationGenerators = notificationGenerator;\n+        this.errorHandling = Optional.ofNullable(errorHandling);\n+    }\n+\n+    @Override\n+    public boolean canHandle(PostSubmitCallbackStage callbackStage, Callback<AsylumCase> callback) {\n+        requireNonNull(callbackStage, \"callbackStage must not be null\");\n+        requireNonNull(callback, \"callback must not be null\");\n+\n+        return canHandleFunction.test(callbackStage,callback);\n+    }\n+\n+    @Override\n+    public PostSubmitCallbackResponse handle(PostSubmitCallbackStage callbackStage, Callback<AsylumCase> callback) {\n+        if (!canHandle(callbackStage,callback)) {\n+            throw new IllegalStateException(\"Cannot handle callback\");\n+        }\n+        PostSubmitCallbackResponse postSubmitCallbackResponse = new PostSubmitCallbackResponse();\n+        try {\n+            notificationGenerators.forEach(notificationGenerator -> notificationGenerator.generate(callback));\n+            postSubmitCallbackResponse.setConfirmationHeader(\"success\");\n+            postSubmitCallbackResponse.setConfirmationBody(\"success\");\n+        } catch (Exception e) {\n+            if (errorHandling.isPresent()) {\n+                errorHandling.get().accept(callback, e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        return postSubmitCallbackResponse;\n+    }\n+\n+}"
  },
  {
    "sha": "0da0512b1d68ea88b2d3d18c7157aa50594d74f6",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisation.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,67 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.legalrepresentative;\n+\n+\n+import static java.util.Objects.requireNonNull;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.LEGAL_REPRESENTATIVE_EMAIL_ADDRESS;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.validation.constraints.NotNull;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.EmailNotificationPersonalisation;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.CustomerServicesProvider;\n+\n+@Service\n+public class LegalRepresentativeApplyNocDecisionPersonalisation implements EmailNotificationPersonalisation {\n+\n+    private final String applyNocDecisionLegalRepresentativeTemplateId;\n+    private final String iaExUiFrontendUrl;\n+    private final CustomerServicesProvider customerServicesProvider;\n+\n+\n+    public LegalRepresentativeApplyNocDecisionPersonalisation(\n+            @NotNull(message = \"applyNocDecisionLegalRepresentativeTemplateId cannot be null\")\n+            @Value(\"${govnotify.template.applyNoticeOfChangeDecision.legalRep.email}\") String applyNocDecisionLegalRepresentativeTemplateId,\n+            @Value(\"${iaExUiFrontendUrl}\") String iaExUiFrontendUrl,\n+            CustomerServicesProvider customerServicesProvider\n+    ) {\n+        this.applyNocDecisionLegalRepresentativeTemplateId = applyNocDecisionLegalRepresentativeTemplateId;\n+        this.iaExUiFrontendUrl = iaExUiFrontendUrl;\n+        this.customerServicesProvider = customerServicesProvider;\n+    }\n+\n+    @Override\n+    public String getTemplateId() {\n+        return applyNocDecisionLegalRepresentativeTemplateId;\n+    }\n+\n+    @Override\n+    public Set<String> getRecipientsList(AsylumCase asylumCase) {\n+        return Collections.singleton(asylumCase\n+                .read(LEGAL_REPRESENTATIVE_EMAIL_ADDRESS, String.class)\n+                .orElseThrow(() -> new IllegalStateException(\"legalRepresentativeEmailAddress is not present\")));\n+    }\n+\n+    @Override\n+    public String getReferenceId(Long caseId) {\n+        return caseId + \"_APPLY_NOC_DECISION_LEGAL_REP\";\n+    }\n+\n+    @Override\n+    public Map<String, String> getPersonalisation(AsylumCase asylumCase) {\n+        requireNonNull(asylumCase, \"asylumCase must not be null\");\n+\n+        return ImmutableMap\n+                .<String, String>builder()\n+                .putAll(customerServicesProvider.getCustomerServicesPersonalisation())\n+                .put(\"appellantGivenNames\", asylumCase.read(AsylumCaseDefinition.APPELLANT_GIVEN_NAMES, String.class).orElse(\"\"))\n+                .put(\"appellantFamilyName\", asylumCase.read(AsylumCaseDefinition.APPELLANT_FAMILY_NAME, String.class).orElse(\"\"))\n+                .put(\"linkToOnlineService\", iaExUiFrontendUrl)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "f42d0575699e208de59fc917d208121048700c65",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcher.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.security.CcdEventAuthorizor;\n+\n+\n+@Component\n+public class PostSubmitCallbackDispatcher<T extends CaseData> {\n+    private final CcdEventAuthorizor ccdEventAuthorizor;\n+    private final List<PostSubmitCallbackHandler<T>> sortedCallbackHandlers;\n+\n+    public PostSubmitCallbackDispatcher(\n+        CcdEventAuthorizor ccdEventAuthorizor,\n+        List<PostSubmitCallbackHandler<T>> callbackHandlers\n+    ) {\n+        requireNonNull(ccdEventAuthorizor, \"ccdEventAuthorizor must not be null\");\n+        requireNonNull(callbackHandlers, \"callbackHandlers must not be null\");\n+        this.ccdEventAuthorizor = ccdEventAuthorizor;\n+        this.sortedCallbackHandlers = callbackHandlers.stream()\n+            // sorting handlers by handler class name\n+            .sorted(Comparator.comparing(h -> h.getClass().getSimpleName()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public PostSubmitCallbackResponse handle(PostSubmitCallbackStage callbackStage,\n+        Callback<T> callback\n+    ) {\n+        requireNonNull(callbackStage, \"callbackStage must not be null\");\n+        requireNonNull(callback, \"callback must not be null\");\n+        ccdEventAuthorizor.throwIfNotAuthorized(callback.getEvent());\n+\n+        PostSubmitCallbackResponse callbackResponse =\n+            new PostSubmitCallbackResponse();\n+\n+        for (PostSubmitCallbackHandler<T> callbackHandler : sortedCallbackHandlers) {\n+\n+            if (callbackHandler.canHandle(callbackStage,callback)) {\n+\n+                PostSubmitCallbackResponse callbackResponseFromHandler =\n+                    callbackHandler.handle(callbackStage,callback);\n+\n+                callbackResponseFromHandler\n+                    .getConfirmationHeader()\n+                    .ifPresent(callbackResponse::setConfirmationHeader);\n+\n+                callbackResponseFromHandler\n+                    .getConfirmationBody()\n+                    .ifPresent(callbackResponse::setConfirmationBody);\n+\n+            }\n+        }\n+\n+        return callbackResponse;\n+    }\n+}"
  },
  {
    "sha": "04e85fad06bb8611d9fff02743ba9783c8b188bb",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationGeneratorConfiguration.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -1638,4 +1638,22 @@\n             )\n         );\n     }\n+\n+    @Bean(\"applyNocDecisionNotificationGenerator\")\n+    public List<NotificationGenerator> applyNocDecisionNotificationHandler(\n+        LegalRepresentativeApplyNocDecisionPersonalisation legalRepresentativeApplyNocDecisionPersonalisation,\n+        NotificationSender notificationSender,\n+        NotificationIdAppender notificationIdAppender\n+    ) {\n+\n+        return Collections.singletonList(\n+            new EmailNotificationGenerator(\n+                newArrayList(\n+                    legalRepresentativeApplyNocDecisionPersonalisation\n+                ),\n+                notificationSender,\n+                notificationIdAppender\n+            )\n+        );\n+    }\n }"
  },
  {
    "sha": "ab58ef451638b902d755b324b18ca57d19e9e52f",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/config/NotificationHandlerConfiguration.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -26,12 +26,15 @@\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.Event;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.State;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PreSubmitCallbackStage;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.field.IdValue;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.field.PaymentStatus;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.field.YesOrNo;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.em.Bundle;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PreSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.postsubmit.PostSubmitNotificationHandler;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.presubmit.NotificationHandler;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.DirectionFinder;\n import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.NotificationGenerator;\n@@ -1890,6 +1893,20 @@ private boolean isRemissionOptedForEaOrHuOrPaAppeal(Callback<AsylumCase> callbac\n         );\n     }\n \n+    @Bean\n+    public PostSubmitCallbackHandler<AsylumCase> applyNocDecisionNotificationHandler(\n+        @Qualifier(\"applyNocDecisionNotificationGenerator\")\n+            List<NotificationGenerator> notificationGenerators) {\n+\n+        return new PostSubmitNotificationHandler(\n+            (callbackStage, callback) -> {\n+                return callbackStage == PostSubmitCallbackStage.CCD_SUBMITTED\n+                       && callback.getEvent() == Event.APPLY_NOC_DECISION;\n+            },\n+            notificationGenerators\n+        );\n+    }\n+\n }\n \n "
  },
  {
    "sha": "9edfefcc6d34dfaaa258bf6bccb694ee21b8c784",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackController.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,105 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.controllers;\n+\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import static org.springframework.http.ResponseEntity.ok;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.PostSubmitCallbackDispatcher;\n+\n+@Slf4j\n+@Api(\n+    value = \"/asylum\",\n+    consumes = MediaType.APPLICATION_JSON_VALUE,\n+    produces = MediaType.APPLICATION_JSON_VALUE\n+)\n+@RequestMapping(\n+    path = \"/asylum\",\n+    consumes = MediaType.APPLICATION_JSON_VALUE,\n+    produces = MediaType.APPLICATION_JSON_VALUE\n+)\n+@RestController\n+public class PostSubmitCallbackController {\n+\n+    private static final org.slf4j.Logger LOG = getLogger(PostSubmitCallbackController.class);\n+\n+    private final PostSubmitCallbackDispatcher<AsylumCase> callbackDispatcher;\n+\n+    public PostSubmitCallbackController(\n+        PostSubmitCallbackDispatcher<AsylumCase> callbackDispatcher\n+    ) {\n+        requireNonNull(callbackDispatcher, \"callbackDispatcher must not be null\");\n+\n+        this.callbackDispatcher = callbackDispatcher;\n+    }\n+\n+    @ApiOperation(\n+        value = \"Handles 'SubmittedEvent' callbacks from CCD\",\n+        response = PostSubmitCallbackResponse.class,\n+        authorizations =\n+            {\n+            @Authorization(value = \"Authorization\"),\n+            @Authorization(value = \"ServiceAuthorization\")\n+            }\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Optional confirmation text for CCD UI\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Bad Request\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Forbidden\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 415,\n+            message = \"Unsupported Media Type\",\n+            response = PostSubmitCallbackResponse.class\n+            ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"Internal Server Error\",\n+            response = PostSubmitCallbackResponse.class\n+            )\n+    })\n+    @PostMapping(path = \"/ccdSubmitted\")\n+    public ResponseEntity<PostSubmitCallbackResponse> ccdSubmitted(\n+        @ApiParam(value = \"Asylum case data\", required = true) @RequestBody Callback<AsylumCase> callback\n+    ) {\n+        LOG.info(\n+            \"Asylum Case CCD `ccdSubmitted` event `{}` received for Case ID `{}`\",\n+            callback.getEvent(),\n+            callback.getCaseDetails().getId()\n+        );\n+\n+        PostSubmitCallbackResponse callbackResponse =\n+            callbackDispatcher.handle(PostSubmitCallbackStage.CCD_SUBMITTED,callback);\n+\n+        LOG.info(\n+            \"Asylum Case CCD `ccdSubmitted` event `{}` handled for Case ID `{}`\",\n+            callback.getEvent(),\n+            callback.getCaseDetails().getId()\n+        );\n+\n+        return ok(callbackResponse);\n+    }\n+}"
  },
  {
    "sha": "998d8a59e44cf44675441dbd1abd54c36eb2eae6",
    "filename": "src/main/resources/application.yaml",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/resources/application.yaml",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/main/resources/application.yaml?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -109,7 +109,6 @@ govnotify:\n     pendingPayment:\n       legalRep:\n         paid:\n-\n           email: 91cf84fe-55f0-41a4-9d0f-fe13ae45fb8c\n         paidAfterAppealSubmitted:\n           beforeListing:\n@@ -602,6 +601,9 @@ govnotify:\n     requestNewHearingRequirements:\n       legalRep:\n         email: fd709bf4-095c-4734-8f88-9a9feba9fd81\n+    applyNoticeOfChangeDecision:\n+      legalRep:\n+        email: 4959e6f4-2a40-44a0-af09-b1fbe5bc1be3\n \n \n \n@@ -631,6 +633,8 @@ security:\n     - \"caseworker-ia\"\n     - \"citizen\"\n   roleEventAccess:\n+    caseworker-approver:\n+      - \"applyNocDecision\"\n     citizen:\n       - \"startAppeal\"\n       - \"editAppeal\"\n@@ -653,6 +657,7 @@ security:\n       - \"payAndSubmitAppeal\"\n       - \"paymentAppeal\"\n       - \"makeAnApplication\"\n+      - \"applyNocDecision\"\n     caseworker-ia-caseofficer:\n       - \"sendDirection\"\n       - \"changeDirectionDueDate\""
  },
  {
    "sha": "fb8ee780f0fe885e8c28509d38b435c1bb6c9fd7",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/EventTest.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -84,6 +84,6 @@ public void has_correct_values() {\n \n     @Test\n     public void if_this_test_fails_it_is_because_it_needs_updating_with_your_changes() {\n-        assertEquals(72, Event.values().length);\n+        assertEquals(73, Event.values().length);\n     }\n }"
  },
  {
    "sha": "e8990157f27da94e779b39ba57b44d4a20eb3318",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/entities/ccd/callback/PostSubmitCallbackStageTest.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostSubmitCallbackStageTest {\n+\n+    @Test\n+    void has_correct_case_event_ids() {\n+        assertEquals(\"ccdSubmitted\", PostSubmitCallbackStage.CCD_SUBMITTED.toString());\n+    }\n+\n+    @Test\n+    void if_this_test_fails_it_is_because_it_needs_updating_with_your_changes() {\n+        assertEquals(1, PostSubmitCallbackStage.values().length);\n+    }\n+}"
  },
  {
    "sha": "3732e9e24dc0bc87d1f34938ca497e630da8c23b",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/handlers/postsubmit/PostSubmitNotificationHandlerTest.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,117 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.postsubmit;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Collections;\n+import java.util.function.BiPredicate;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.ErrorHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.service.NotificationGenerator;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostSubmitNotificationHandlerTest {\n+\n+    @Mock\n+    Callback<AsylumCase> callback;\n+    @Mock\n+    CaseDetails<AsylumCase> caseDetails;\n+    @Mock\n+    AsylumCase asylumCase;\n+\n+    @Mock\n+    NotificationGenerator notificationGenerator;\n+    @Mock\n+    BiPredicate<PostSubmitCallbackStage, Callback<AsylumCase>> canHandle;\n+    @Mock\n+    ErrorHandler errorHandler;\n+    private PostSubmitCallbackStage callbackStage = PostSubmitCallbackStage.CCD_SUBMITTED;\n+    private PostSubmitNotificationHandler notificationHandler;\n+    private PostSubmitCallbackResponse postSubmitCallbackResponse = new PostSubmitCallbackResponse();\n+\n+    @BeforeEach\n+    void setUp() {\n+        notificationHandler = new PostSubmitNotificationHandler(canHandle, Collections.singletonList(notificationGenerator));\n+    }\n+\n+    @Test\n+    void should_generate_notification_when_event_can_be_handled() {\n+\n+        when(canHandle.test(callbackStage, callback)).thenReturn(true);\n+        PostSubmitCallbackResponse response = notificationHandler.handle(callbackStage, callback);\n+\n+        assertEquals(\"success\", response.getConfirmationHeader().get());\n+        assertEquals(\"success\", response.getConfirmationBody().get());\n+        verify(notificationGenerator).generate(callback);\n+    }\n+\n+    @Test\n+    void should_not_generate_notification_when_cannot_handle_event() {\n+        when(canHandle.test(callbackStage, callback)).thenReturn(false);\n+\n+        assertThatThrownBy(() -> notificationHandler.handle(callbackStage, callback))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"Cannot handle callback\");\n+\n+        verifyNoInteractions(notificationGenerator);\n+    }\n+\n+    @Test\n+    void should_return_false_when_cannot_handle_event() {\n+        when(canHandle.test(callbackStage, callback)).thenReturn(false);\n+\n+        assertEquals(false, notificationHandler.canHandle(callbackStage, callback));\n+    }\n+\n+    @Test\n+    void should_throw_exception_when_callback_stage_is_null() {\n+        assertThatThrownBy(() -> notificationHandler.canHandle(null, callback))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"callbackStage must not be null\");\n+    }\n+\n+    @Test\n+    void should_throw_exception_when_callback_is_null() {\n+        assertThatThrownBy(() -> notificationHandler.canHandle(callbackStage, null))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"callback must not be null\");\n+    }\n+\n+    @Test\n+    void should_catch_exception_and_invoke_error_handler() {\n+        when(canHandle.test(callbackStage, callback)).thenReturn(true);\n+        String message = \"exception happened\";\n+        Throwable exception = new RuntimeException(message);\n+        doThrow(exception).when(notificationGenerator).generate(callback);\n+        notificationHandler =\n+            new PostSubmitNotificationHandler(canHandle, Collections.singletonList(notificationGenerator), errorHandler);\n+\n+        notificationHandler.handle(callbackStage, callback);\n+\n+        verify(errorHandler).accept(callback, exception);\n+    }\n+\n+    @Test\n+    void should_re_throw_exception_from_generator() {\n+\n+        when(canHandle.test(callbackStage, callback)).thenReturn(true);\n+        String message = \"exception happened\";\n+        doThrow(new RuntimeException(message)).when(notificationGenerator).generate(callback);\n+        notificationHandler = new PostSubmitNotificationHandler(canHandle, Collections.singletonList(notificationGenerator));\n+\n+        assertThatThrownBy(() -> notificationHandler.handle(callbackStage, callback))\n+            .isExactlyInstanceOf(RuntimeException.class)\n+            .hasMessage(message);\n+    }\n+}"
  },
  {
    "sha": "419647f76e9a648fc9c4832ef91ba7afca639bfe",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/domain/personalisation/legalrepresentative/LegalRepresentativeApplyNocDecisionPersonalisationTest.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,125 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.domain.personalisation.legalrepresentative;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCaseDefinition.*;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.CustomerServicesProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+class LegalRepresentativeApplyNocDecisionPersonalisationTest {\n+\n+    @Mock\n+    AsylumCase asylumCase;\n+    @Mock\n+    CustomerServicesProvider customerServicesProvider;\n+\n+    private Long caseId = 12345L;\n+    private String templateId = \"someTemplateId\";\n+    private String iaExUiFrontendUrl = \"http://localhost\";\n+    private String legalRepEmailAddress = \"legalRep@example.com\";\n+    private String appealReferenceNumber = \"someReferenceNumber\";\n+    private String legalRepRefNumber = \"somelegalRepRefNumber\";\n+    private String appellantGivenNames = \"someAppellantGivenNames\";\n+    private String appellantFamilyName = \"someAppellantFamilyName\";\n+    private String customerServicesTelephone = \"555 555 555\";\n+    private String customerServicesEmail = \"cust.services@example.com\";\n+\n+    private LegalRepresentativeApplyNocDecisionPersonalisation legalRepresentativeApplyNocDecisionPersonalisation;\n+\n+    @BeforeEach\n+    void setup() {\n+\n+        when(asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class)).thenReturn(Optional.of(appealReferenceNumber));\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.of(appellantGivenNames));\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.of(appellantFamilyName));\n+        when(asylumCase.read(LEGAL_REP_REFERENCE_NUMBER, String.class)).thenReturn(Optional.of(legalRepRefNumber));\n+        when(asylumCase.read(LEGAL_REPRESENTATIVE_EMAIL_ADDRESS, String.class))\n+            .thenReturn(Optional.of(legalRepEmailAddress));\n+        when((customerServicesProvider.getCustomerServicesTelephone())).thenReturn(customerServicesTelephone);\n+        when((customerServicesProvider.getCustomerServicesEmail())).thenReturn(customerServicesEmail);\n+\n+        legalRepresentativeApplyNocDecisionPersonalisation = new LegalRepresentativeApplyNocDecisionPersonalisation(\n+            templateId,\n+            iaExUiFrontendUrl,\n+            customerServicesProvider\n+        );\n+    }\n+\n+\n+    @Test\n+    void should_return_given_template_id() {\n+        assertEquals(templateId, legalRepresentativeApplyNocDecisionPersonalisation.getTemplateId());\n+    }\n+\n+    @Test\n+    void should_return_given_reference_id() {\n+        assertEquals(caseId + \"_APPLY_NOC_DECISION_LEGAL_REP\",\n+            legalRepresentativeApplyNocDecisionPersonalisation.getReferenceId(caseId));\n+    }\n+\n+    @Test\n+    void should_return_given_email_address_from_asylum_case() {\n+        assertTrue(legalRepresentativeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase)\n+            .contains(legalRepEmailAddress));\n+    }\n+\n+    @Test\n+    void should_throw_exception_when_cannot_find_email_address_for_legal_rep() {\n+        when(asylumCase.read(LEGAL_REPRESENTATIVE_EMAIL_ADDRESS, String.class)).thenReturn(Optional.empty());\n+\n+        assertThatThrownBy(() -> legalRepresentativeApplyNocDecisionPersonalisation.getRecipientsList(asylumCase))\n+            .isExactlyInstanceOf(IllegalStateException.class)\n+            .hasMessage(\"legalRepresentativeEmailAddress is not present\");\n+    }\n+\n+    @Test\n+    void should_throw_exception_on_personalisation_when_case_is_null() {\n+\n+        assertThatThrownBy(\n+            () -> legalRepresentativeApplyNocDecisionPersonalisation.getPersonalisation((AsylumCase) null))\n+            .isExactlyInstanceOf(NullPointerException.class)\n+            .hasMessage(\"asylumCase must not be null\");\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_all_information_given() {\n+\n+        Map<String, String> personalisation =\n+            legalRepresentativeApplyNocDecisionPersonalisation.getPersonalisation(asylumCase);\n+\n+        assertThat(personalisation).isEqualToComparingOnlyGivenFields(asylumCase);\n+        assertEquals(customerServicesTelephone, customerServicesProvider.getCustomerServicesTelephone());\n+        assertEquals(customerServicesEmail, customerServicesProvider.getCustomerServicesEmail());\n+    }\n+\n+    @Test\n+    void should_return_personalisation_when_all_mandatory_information_given() {\n+\n+        when(asylumCase.read(APPEAL_REFERENCE_NUMBER, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_GIVEN_NAMES, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(APPELLANT_FAMILY_NAME, String.class)).thenReturn(Optional.empty());\n+        when(asylumCase.read(LEGAL_REP_REFERENCE_NUMBER, String.class)).thenReturn(Optional.empty());\n+\n+        Map<String, String> personalisation =\n+            legalRepresentativeApplyNocDecisionPersonalisation.getPersonalisation(asylumCase);\n+\n+        assertThat(personalisation).isEqualToComparingOnlyGivenFields(asylumCase);\n+        assertEquals(customerServicesTelephone, customerServicesProvider.getCustomerServicesTelephone());\n+        assertEquals(customerServicesEmail, customerServicesProvider.getCustomerServicesEmail());\n+    }\n+}"
  },
  {
    "sha": "8930ba8f83ac8573d59cc5c246cb126c4e35d43b",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "status": "added",
    "additions": 217,
    "deletions": 0,
    "changes": 217,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/PostSubmitCallbackDispatcherTest.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,217 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.springframework.security.access.AccessDeniedException;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.Event;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.PostSubmitCallbackStage;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.security.CcdEventAuthorizor;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+@SuppressWarnings(\"unchecked\")\n+class PostSubmitCallbackDispatcherTest {\n+\n+    @Mock\n+    private CcdEventAuthorizor ccdEventAuthorizor;\n+    @Mock\n+    private PostSubmitCallbackHandler<CaseData> handler1;\n+    @Mock\n+    private PostSubmitCallbackHandler<CaseData> handler2;\n+    @Mock\n+    private PostSubmitCallbackHandler<CaseData> handler3;\n+    @Mock\n+    private Callback<CaseData> callback;\n+    @Mock\n+    private CaseDetails<CaseData> caseDetails;\n+    @Mock\n+    private CaseData caseData;\n+\n+\n+    private String header1 = \"Some header 1\";\n+    private String body1 = \"Some body 1\";\n+\n+    private String header2 = \"Some header 2\";\n+    private String body2 = \"Some body 2\";\n+\n+    private String header3 = \"Some header 3\";\n+    private String body3 = \"Some body 3\";\n+\n+\n+    @Mock\n+    private PostSubmitCallbackResponse response1;\n+    @Mock\n+    private PostSubmitCallbackResponse response2;\n+    @Mock\n+    private PostSubmitCallbackResponse response3;\n+\n+    private PostSubmitCallbackDispatcher<CaseData> postSubmitCallbackDispatcher;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        postSubmitCallbackDispatcher = new PostSubmitCallbackDispatcher<>(\n+            ccdEventAuthorizor,\n+            Arrays.asList(\n+                handler1,\n+                handler2,\n+                handler3\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void should_only_dispatch_callback_to_handlers_that_can_handle_it() {\n+\n+        for (PostSubmitCallbackStage callbackStage : PostSubmitCallbackStage.values()) {\n+\n+            when(callback.getEvent()).thenReturn(Event.BUILD_CASE);\n+            when(callback.getCaseDetails()).thenReturn(caseDetails);\n+            when(caseDetails.getCaseData()).thenReturn(caseData);\n+\n+            when(response1.getConfirmationHeader()).thenReturn(Optional.of(header1));\n+            when(response1.getConfirmationBody()).thenReturn(Optional.of(body1));\n+\n+            when(response2.getConfirmationHeader()).thenReturn(Optional.of(header2));\n+            when(response2.getConfirmationBody()).thenReturn(Optional.of(body2));\n+\n+            when(response3.getConfirmationHeader()).thenReturn(Optional.of(header3));\n+            when(response3.getConfirmationBody()).thenReturn(Optional.of(body3));\n+\n+            when(handler1.canHandle(eq(callbackStage), any(Callback.class))).thenReturn(false);\n+            when(handler1.handle(eq(callbackStage), any(Callback.class))).thenReturn(response1);\n+\n+            when(handler2.canHandle(eq(callbackStage), any(Callback.class))).thenReturn(false);\n+            when(handler2.handle(eq(callbackStage), any(Callback.class))).thenReturn(response2);\n+\n+            when(handler3.canHandle(eq(callbackStage), any(Callback.class))).thenReturn(true);\n+            when(handler3.handle(eq(callbackStage), any(Callback.class))).thenReturn(response3);\n+\n+            PostSubmitCallbackResponse callbackResponse =\n+                postSubmitCallbackDispatcher.handle(callbackStage, callback);\n+\n+            assertNotNull(callbackResponse);\n+            //assertEquals(caseData, callbackResponse.getData());\n+            assertEquals(Optional.of(body3), callbackResponse.getConfirmationBody());\n+            //assertTrue(callbackResponse.getErrors().isEmpty());\n+\n+            verify(ccdEventAuthorizor, times(1)).throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+            verify(handler1, times(1)).canHandle(eq(callbackStage), any(Callback.class));\n+            verify(handler1, times(0)).handle(eq(callbackStage), any(Callback.class));\n+\n+            verify(handler2, times(1)).canHandle(eq(callbackStage), any(Callback.class));\n+            verify(handler2, times(0)).handle(eq(callbackStage), any(Callback.class));\n+\n+            verify(handler3, times(1)).canHandle(eq(callbackStage), any(Callback.class));\n+            verify(handler3, times(1)).handle(eq(callbackStage), any(Callback.class));\n+\n+            reset(ccdEventAuthorizor, handler1, handler2, handler3);\n+        }\n+    }\n+\n+    @Test\n+    void should_not_dispatch_to_handlers_if_user_not_authorized_for_event() {\n+\n+        for (PostSubmitCallbackStage callbackStage : PostSubmitCallbackStage.values()) {\n+\n+            when(callback.getEvent()).thenReturn(Event.BUILD_CASE);\n+\n+            doThrow(AccessDeniedException.class)\n+                .when(ccdEventAuthorizor)\n+                .throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+            assertThatThrownBy(() -> postSubmitCallbackDispatcher.handle(callbackStage, callback))\n+                .isExactlyInstanceOf(AccessDeniedException.class);\n+\n+            verify(ccdEventAuthorizor, times(1)).throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+            verify(handler1, never()).canHandle(any(), any());\n+            verify(handler1, never()).handle(any(), any());\n+            verify(handler2, never()).canHandle(any(), any());\n+            verify(handler2, never()).handle(any(), any());\n+            verify(handler3, never()).canHandle(any(), any());\n+            verify(handler3, never()).handle(any(), any());\n+\n+            reset(ccdEventAuthorizor, handler1, handler2, handler3);\n+        }\n+    }\n+\n+    @Test\n+    void should_not_error_if_no_handlers_are_provided() {\n+\n+        PostSubmitCallbackDispatcher<CaseData> postSubmitCallbackDispatcher =\n+            new PostSubmitCallbackDispatcher<>(ccdEventAuthorizor, Collections.emptyList());\n+\n+        for (PostSubmitCallbackStage callbackStage : PostSubmitCallbackStage.values()) {\n+\n+            try {\n+\n+                when(callback.getEvent()).thenReturn(Event.BUILD_CASE);\n+                when(callback.getCaseDetails()).thenReturn(caseDetails);\n+                when(caseDetails.getCaseData()).thenReturn(caseData);\n+\n+                PostSubmitCallbackResponse callbackResponse =\n+                    postSubmitCallbackDispatcher\n+                        .handle(callbackStage, callback);\n+\n+                assertNotNull(callbackResponse);\n+\n+                verify(ccdEventAuthorizor, times(1)).throwIfNotAuthorized(Event.BUILD_CASE);\n+\n+                reset(ccdEventAuthorizor);\n+\n+            } catch (Exception e) {\n+                fail(\"Should not have thrown any exception\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    void should_not_allow_null_ccd_event_authorizor() {\n+\n+        assertThatThrownBy(() -> new PostSubmitCallbackDispatcher<>(null, Collections.emptyList()))\n+            .hasMessage(\"ccdEventAuthorizor must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+\n+    @Test\n+    void should_not_allow_null_handlers() {\n+\n+        assertThatThrownBy(() -> new PostSubmitCallbackDispatcher<>(ccdEventAuthorizor, null))\n+            .hasMessage(\"callbackHandlers must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+\n+    @Test\n+    void should_not_allow_null_arguments() {\n+\n+        assertThatThrownBy(() -> postSubmitCallbackDispatcher.handle(null, callback))\n+            .hasMessage(\"callbackStage must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+\n+        assertThatThrownBy(() -> postSubmitCallbackDispatcher.handle(PostSubmitCallbackStage.CCD_SUBMITTED, null))\n+            .hasMessage(\"callback must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+}"
  },
  {
    "sha": "92b17e1be64e084439b717fd77251a6adfce7bdf",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/hmcts/ia-case-notifications-api/blob/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-notifications-api/raw/bf2b182f156c02dd1e90e49c6debb31e661a77b5/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-notifications-api/contents/src/test/java/uk/gov/hmcts/reform/iacasenotificationsapi/infrastructure/controllers/PostSubmitCallbackControllerTest.java?ref=bf2b182f156c02dd1e90e49c6debb31e661a77b5",
    "patch": "@@ -0,0 +1,97 @@\n+package uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.controllers;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.ResponseEntity;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.CaseDetails;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.domain.entities.ccd.callback.*;\n+import uk.gov.hmcts.reform.iacasenotificationsapi.infrastructure.PostSubmitCallbackDispatcher;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PostSubmitCallbackControllerTest {\n+\n+\n+\n+    @Test\n+    void ccdSubmitted() {\n+    }\n+\n+    @Mock\n+    private PostSubmitCallbackDispatcher<AsylumCase> callbackDispatcher;\n+    @Mock\n+    private PostSubmitCallbackResponse callbackResponse;\n+    @Mock\n+    private Callback<AsylumCase> callback;\n+    @Mock\n+    private CaseDetails<AsylumCase> caseDetails;\n+\n+    private PostSubmitCallbackController postSubmitCallbackController;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        postSubmitCallbackController =\n+            new PostSubmitCallbackController(\n+                callbackDispatcher\n+            );\n+    }\n+\n+    @Test\n+    void should_deserialize_about_to_start_callback_then_dispatch_then_return_response() {\n+\n+        when(callback.getCaseDetails()).thenReturn(caseDetails);\n+\n+        doReturn(callbackResponse)\n+            .when(callbackDispatcher)\n+            .handle(PostSubmitCallbackStage.CCD_SUBMITTED, callback);\n+\n+        ResponseEntity<PostSubmitCallbackResponse> actualResponse =\n+            postSubmitCallbackController.ccdSubmitted(callback);\n+\n+        assertNotNull(actualResponse);\n+\n+        verify(callbackDispatcher, times(1)).handle(\n+            PostSubmitCallbackStage.CCD_SUBMITTED,\n+            callback\n+        );\n+    }\n+\n+    @Test\n+    void should_deserialize_about_to_submit_callback_then_dispatch_then_return_response() {\n+\n+        when(callback.getCaseDetails()).thenReturn(caseDetails);\n+\n+        doReturn(callbackResponse)\n+            .when(callbackDispatcher)\n+            .handle(PostSubmitCallbackStage.CCD_SUBMITTED, callback);\n+\n+        ResponseEntity<PostSubmitCallbackResponse> actualResponse =\n+            postSubmitCallbackController.ccdSubmitted(callback);\n+\n+        assertNotNull(actualResponse);\n+\n+        verify(callbackDispatcher, times(1)).handle(\n+            PostSubmitCallbackStage.CCD_SUBMITTED,\n+            callback\n+        );\n+    }\n+\n+    @Test\n+    void should_not_allow_null_constructor_arguments() {\n+\n+        assertThatThrownBy(() -> new PostSubmitCallbackController(null))\n+            .hasMessage(\"callbackDispatcher must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+}"
  }
]
