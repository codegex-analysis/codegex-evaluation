[
  {
    "sha": "302304be6ee476b614d24d074032c66d6deeb409",
    "filename": "azure-pipelines-nightly.yml",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/azure-pipelines-nightly.yml",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/azure-pipelines-nightly.yml",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/azure-pipelines-nightly.yml?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -105,7 +105,6 @@ stages:\n         parameters:\n           displayName: Acceptance Test\n           dependsOn:\n-          - UnitTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-TEST\n@@ -119,7 +118,6 @@ stages:\n         parameters:\n           displayName: Smoke Test\n           dependsOn:\n-          - AcceptanceTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-TEST\n@@ -133,7 +131,6 @@ stages:\n         parameters:\n           displayName: Functional Test\n           dependsOn:\n-          - AcceptanceTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-TEST"
  },
  {
    "sha": "2d0370a4cc8a4788ba766d742156d8801369af73",
    "filename": "azure-pipelines.yml",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/azure-pipelines.yml",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/azure-pipelines.yml",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/azure-pipelines.yml?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -226,7 +226,6 @@ stages:\n         parameters:\n           displayName: Acceptance Test\n           dependsOn:\n-          - UnitTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-SBOX\n@@ -240,7 +239,6 @@ stages:\n         parameters:\n           displayName: Smoke Test\n           dependsOn:\n-          - AcceptanceTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-SBOX\n@@ -254,7 +252,6 @@ stages:\n         parameters:\n           displayName: Functional Test\n           dependsOn:\n-          - AcceptanceTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-SBOX\n@@ -306,7 +303,6 @@ stages:\n         parameters:\n           displayName: Acceptance Test\n           dependsOn:\n-          - UnitTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-DEV\n@@ -352,7 +348,6 @@ stages:\n         parameters:\n           displayName: Acceptance Test\n           dependsOn:\n-          - UnitTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-TEST\n@@ -366,7 +361,6 @@ stages:\n         parameters:\n           displayName: Smoke Test\n           dependsOn:\n-          - AcceptanceTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-TEST\n@@ -380,7 +374,6 @@ stages:\n         parameters:\n           displayName: Functional Test\n           dependsOn:\n-          - AcceptanceTest\n           - CreateStorage\n           - ExportKeyVault\n           subscription: DTS-SHAREDSERVICES-TEST"
  },
  {
    "sha": "1d52beb40b838b7e32906a7ebfe556df4aedc7af",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/TestingUtils.java",
    "status": "modified",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/TestingUtils.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/TestingUtils.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/TestingUtils.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -2,36 +2,16 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n \n-import io.restassured.response.Response;\n-import org.json.JSONException;\n-import org.skyscreamer.jsonassert.JSONAssert;\n-import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.springframework.util.ResourceUtils;\n \n public class TestingUtils {\n \n     public static String readFileContents (final String path) throws IOException {\n-\n         File file = ResourceUtils.getFile(\"classpath:\"+path);\n-        //File is found\n         System.out.println(\"File Found : \" + file.exists());\n         return new String(Files.readAllBytes(Paths.get(file.toURI())));\n     }\n-\n-    public static void comparePayloads(final String expectedPayloadPath, final Response response) {\n-        try {\n-            String output =\n-                    readFileContents(expectedPayloadPath);\n-            JSONAssert.assertEquals(output,\n-                    response.getBody().asString(), JSONCompareMode.STRICT);\n-        } catch (JSONException jsonException) {\n-            throw new AssertionError(\"Payloads have not matched\");\n-        } catch (IOException ioException ) {\n-            throw new AssertionError(\"Response file cannot be read..\");\n-        }\n-    }\n }"
  },
  {
    "sha": "ccb400e9aa6f204268e75f1722d301ec88e714e2",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/rest/RestClientTemplate.java",
    "status": "modified",
    "additions": 5,
    "deletions": 11,
    "changes": 16,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/rest/RestClientTemplate.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/rest/RestClientTemplate.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/rest/RestClientTemplate.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -23,23 +23,19 @@ public static Response callRestEndpointWithPayload(final String apiURL,\n                                                        final HttpMethod httpMethod,\n                                                        final HttpStatus httpStatus) {\n \n-        Response response = null;\n+        Response response;\n         switch (httpMethod) {\n             case POST:\n-                response =\n-                        RestAssured\n-                                //.expect().that().statusCode(httpStatus.value())\n+                response = expect().that().statusCode(httpStatus.value())\n                         .given().body(payloadBody)\n                         .headers(headersAsMap)\n                         .auth().oauth2(authorizationToken)\n                         .basePath(apiURL)\n                         .when().post().then().extract().response();\n                 break;\n             case PUT:\n-                response =\n-                        RestAssured\n-                        //.expect().that().statusCode(httpStatus.value())\n-                        .given().body(payloadBody)\n+//                response = expect().that().statusCode(httpStatus.value())\n+                       response= RestAssured.given().body(payloadBody)\n                         .headers(headersAsMap)\n                         .auth().oauth2(authorizationToken)\n                         .basePath(apiURL)\n@@ -74,9 +70,7 @@ public static Response callRestEndpointWithQueryParams(final String apiURL,\n                                                            final Map<String, String> queryParams,\n                                                            final HttpStatus httpStatus) {\n \n-        return\n-                RestAssured\n-                        //.expect().that().statusCode(httpStatus.value())\n+        return expect().that().statusCode(httpStatus.value())\n                 .given()\n                 .queryParams(queryParams)\n                 .headers(headersAsMap)"
  },
  {
    "sha": "980e45f0ab7d51c1a409f96a0c9c577913d9d761",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/test/FunctionalTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/test/FunctionalTest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/test/FunctionalTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/common/test/FunctionalTest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -60,7 +60,6 @@\n \n     @Before\n     public void initialiseValues() throws Exception {\n-\n         RestAssured.config =\n                 SerenityRest.config()\n                         .encoderConfig(encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false));"
  },
  {
    "sha": "6a27d7d0af6234cb9d3b6d845b947d5e49d35108",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/DirectHearingTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 14,
    "changes": 16,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/DirectHearingTest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/DirectHearingTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/DirectHearingTest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -1,7 +1,6 @@\n package uk.gov.hmcts.futurehearings.hmi.functional.directlisting;\n \n import static uk.gov.hmcts.futurehearings.hmi.functional.common.TestingUtils.readFileContents;\n-import static uk.gov.hmcts.futurehearings.hmi.functional.common.header.factory.HeaderFactory.createStandardHMIHeader;\n \n import uk.gov.hmcts.futurehearings.hmi.Application;\n import uk.gov.hmcts.futurehearings.hmi.functional.common.test.FunctionalTest;\n@@ -45,23 +44,12 @@ public void initialiseValues() throws Exception {\n         super.initialiseValues();\n     }\n \n-\n     @Test\n-    public void testSuccessfulDirectHearing() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulPostToHearing () method\");\n-\n+    public void testDirectHearing() throws Exception {\n         Map<String, String> queryParameters = new HashMap<String, String>();\n         queryParameters.put(\"requestSessionType\", \"ADHOC\");\n \n-        String sessionIdCaseHQ = directHearingSteps.getSessionIdForDirectListing(sessionsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-\n-        directhearings_idRootContext = String.format(directhearings_idRootContext, sessionIdCaseHQ);\n-       String inputBodyForDirectListing =\n-                String.format(readFileContents(\"uk/gov/hmcts/futurehearings/hmi/functional/direct-listing/input/POST-Hearing-Direct-Listing-Payload.json\"), sessionIdCaseHQ);\n+        String inputBodyForDirectListing = readFileContents(\"uk/gov/hmcts/futurehearings/hmi/functional/direct-listing/input/POST-Hearing-Direct-Listing-Payload.json\");\n         directHearingSteps.performDirectHearingListingForGivenSessionId(directhearings_idRootContext,\n                 headersAsMap,\n                 authorizationToken,"
  },
  {
    "sha": "c8a0133088bf4d86987af54c7b52302a4ccdc9a3",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/process/DirectListingResponseProcess.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/process/DirectListingResponseProcess.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/process/DirectListingResponseProcess.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/process/DirectListingResponseProcess.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -1,9 +1,5 @@\n package uk.gov.hmcts.futurehearings.hmi.functional.directlisting.process;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-\n import io.restassured.response.Response;\n import lombok.extern.slf4j.Slf4j;\n import org.json.JSONException;\n@@ -14,7 +10,6 @@\n \n     public static String getSessionId(Response response) throws JSONException {\n         log.debug(response.getBody().prettyPrint());\n-        String sessionId = null;\n         JSONObject JSONResponseBody = new JSONObject(response.body().asString());\n         JSONObject jsonObject = JSONResponseBody.getJSONObject(\"sessionsResponse\").getJSONArray(\"sessions\").getJSONObject(1);\n         return jsonObject.getString(\"sessionIdCaseHQ\");"
  },
  {
    "sha": "fc1725c4647615b8d8c2ec83d943daadfeb5b27b",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/steps/DirectHearingSteps.java",
    "status": "modified",
    "additions": 2,
    "deletions": 35,
    "changes": 37,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/steps/DirectHearingSteps.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/steps/DirectHearingSteps.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/directlisting/steps/DirectHearingSteps.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -1,49 +1,16 @@\n package uk.gov.hmcts.futurehearings.hmi.functional.directlisting.steps;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static uk.gov.hmcts.futurehearings.hmi.functional.common.rest.RestClientTemplate.callRestEndpointWithPayload;\n-import static uk.gov.hmcts.futurehearings.hmi.functional.common.rest.RestClientTemplate.callRestEndpointWithQueryParams;\n-import static uk.gov.hmcts.futurehearings.hmi.functional.directlisting.process.DirectListingResponseProcess.getSessionId;\n \n import java.util.Map;\n-import java.util.Objects;\n \n import io.restassured.response.Response;\n import net.thucydides.core.annotations.Step;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n \n public class DirectHearingSteps {\n-\n-    private String actor;\n-\n-    @Step(\"User makes a request to Get the Sessions for relevant search parameters on the Sessions API\")\n-    public String getSessionIdForDirectListing(final String apiURL,\n-                                               final Map<String, Object> headersAsMap,\n-                                               final String authorizationToken,\n-                                               final Map<String, String> queryParameters) throws Exception {\n-\n-        String sessionIdCaseHQ = getSessionId(callRestEndpointWithQueryParams(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters, HttpStatus.OK));\n-        assertTrue(Objects.nonNull(sessionIdCaseHQ) && !sessionIdCaseHQ.trim().equals(\"\"));\n-        return sessionIdCaseHQ;\n-    }\n-\n-    /*@Step(\"User makes a request to List a Hearing Request Directly (PUT in the Listing API)\")\n-    public void performDirectListingForGivenSessionId(final String apiURL,\n-                                                        final Map<String, Object> headersAsMap,\n-                                                        final String authorizationToken,\n-                                                        final String body) {\n-        Response response = callRestEndpointWithPayload(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                body, HttpMethod.PUT,HttpStatus.NO_CONTENT);\n-        assertEquals(HttpStatus.NO_CONTENT.value(),response.getStatusCode());\n-    }*/\n-\n     @Step(\"User makes a request to List a Hearing Request Directly (POST in the Hearing API)\")\n     public void performDirectHearingListingForGivenSessionId(final String apiURL,\n                                                       final Map<String, Object> headersAsMap,\n@@ -53,8 +20,8 @@ public void performDirectHearingListingForGivenSessionId(final String apiURL,\n                 headersAsMap,\n                 authorizationToken,\n                 body, HttpMethod.POST,\n-                HttpStatus.NO_CONTENT);\n+                HttpStatus.BAD_REQUEST);\n         System.out.println(response.getBody().asString());\n-        assertEquals(HttpStatus.NO_CONTENT.value(),response.getStatusCode());\n+        assertEquals(HttpStatus.BAD_REQUEST.value(),response.getStatusCode());\n     }\n }"
  },
  {
    "sha": "c2630b59cf570379544e9304001e5dd6562d4a08",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/HearingsAPITest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 82,
    "changes": 85,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/HearingsAPITest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/HearingsAPITest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/HearingsAPITest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -1,19 +1,15 @@\n package uk.gov.hmcts.futurehearings.hmi.functional.hearings;\n \n-import static uk.gov.hmcts.futurehearings.hmi.functional.common.TestingUtils.readFileContents;\n-\n import uk.gov.hmcts.futurehearings.hmi.Application;\n import uk.gov.hmcts.futurehearings.hmi.functional.common.test.FunctionalTest;\n import uk.gov.hmcts.futurehearings.hmi.functional.hearings.steps.HearingsSteps;\n \n-import java.io.IOException;\n import java.util.Random;\n \n import lombok.extern.slf4j.Slf4j;\n import net.serenitybdd.junit.spring.integration.SpringIntegrationSerenityRunner;\n import net.thucydides.core.annotations.Narrative;\n import net.thucydides.core.annotations.Steps;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Value;\n@@ -42,105 +38,30 @@\n     HearingsSteps hearingsSteps;\n \n     @Test\n-    @Ignore\n-    public void testRequestAndAmendHearing() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendHearing () method\");\n-        int randomId = new Random().nextInt(99999999);\n-        String inputBodyForRequestHearing =\n-                String.format(readFileContents(HEARINGS_INPUT_PATH + \"/POST-hearing-payload.json\"), randomId);\n-        hearingsSteps.shouldRequestAHearing(hearingsApiRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForRequestHearing);\n-\n-        String inputBodyForAmendHearing =\n-                String.format(readFileContents(HEARINGS_INPUT_PATH + \"/PUT-hearing-payload.json\"), randomId, randomId);\n-        hearingsSteps.shouldAmendAHearing(String.format(hearings_idRootContext,randomId),\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForAmendHearing);\n-    }\n-\n-    @Test\n-    public void testRequestHearingWithEmptyPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendHearing () method\");\n+    public void testRequestHearingWithEmptyPayload() {\n         hearingsSteps.shouldRequestHearingWithInvalidPayload(hearingsApiRootContext,\n                 headersAsMap,\n                 authorizationToken, HttpMethod.POST,\n                 \"{}\");\n     }\n \n     @Test\n-    public void testRequestHearingWithXmlPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendHearing () method\");\n-        hearingsSteps.shouldRequestHearingWithInvalidPayload(hearingsApiRootContext,\n-                headersAsMap,\n-                authorizationToken, HttpMethod.POST,\n-                \"<xml><hello></xml>\");\n-    }\n-\n-    @Test\n-    public void testAmendHearingWithEmptyPayload() throws IOException {\n-\n-        log.debug(\"In the testAmendHearing () method\");\n+    public void testAmendHearingWithEmptyPayload() {\n         int randomId = new Random().nextInt(99999999);\n-        String inputBodyForRequestHearing =\n-                String.format(readFileContents(HEARINGS_INPUT_PATH + \"/POST-hearing-payload.json\"), randomId);\n-        hearingsSteps.shouldRequestAHearing(hearingsApiRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForRequestHearing);\n \n         hearingsSteps.shouldRequestHearingWithInvalidPayload(String.format(hearings_idRootContext,randomId),\n                 headersAsMap,\n                 authorizationToken, HttpMethod.PUT,\n                 \"{}\");\n     }\n \n-\n-\n     @Test\n-    public void testAmendHearingWithXmlPayload() throws IOException {\n-\n-        log.debug(\"In the testAmendHearing () method\");\n-        int randomId = new Random().nextInt(99999999);\n-        String inputBodyForRequestHearing =\n-                String.format(readFileContents(HEARINGS_INPUT_PATH + \"/POST-hearing-payload.json\"), randomId);\n-        hearingsSteps.shouldRequestAHearing(hearingsApiRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForRequestHearing);\n-\n-        hearingsSteps.shouldRequestHearingWithInvalidPayload(String.format(hearings_idRootContext,randomId),\n-                headersAsMap,\n-                authorizationToken, HttpMethod.PUT,\n-                \"<xml><hello></xml>\");\n-    }\n-\n-    @Test\n-    public void testDeleteHearingWithEmptyPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendHearing () method\");\n+    public void testDeleteHearingWithEmptyPayload() {\n         int randomId = new Random().nextInt(99999999);\n \n         hearingsSteps.shouldRequestHearingWithInvalidPayload(String.format(hearings_idRootContext,randomId),\n                 headersAsMap,\n                 authorizationToken,HttpMethod.DELETE,\n                 \"{}\");\n     }\n-\n-    @Test\n-    public void testDeleteHearingWithXmlPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendHearing () method\");\n-        int randomId = new Random().nextInt(99999999);\n-\n-        hearingsSteps.shouldRequestHearingWithInvalidPayload(String.format(hearings_idRootContext,randomId),\n-                headersAsMap,\n-                authorizationToken,HttpMethod.DELETE,\n-                \"<test></test>\");\n-    }\n }"
  },
  {
    "sha": "68f2c49e033711443490e0c61f9e70745cb74e2b",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/steps/HearingsSteps.java",
    "status": "modified",
    "additions": 0,
    "deletions": 54,
    "changes": 54,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/steps/HearingsSteps.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/steps/HearingsSteps.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/hearings/steps/HearingsSteps.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -13,60 +13,6 @@\n \n @Slf4j\n public class HearingsSteps {\n-\n-    private String hearingUser;\n-\n-    @Step(\"User creates a Hearing request\")\n-    public void shouldRequestAHearing(final String apiURL,\n-                                               final Map<String, Object> headersAsMap,\n-                                               final String authorizationToken,\n-                                               final String body) {\n-\n-        Response response = callRestEndpointWithPayload(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                body,\n-                HttpMethod.POST,\n-                HttpStatus.ACCEPTED);\n-        log.debug(\"The value of the Hearing Response Body\"+response.getBody().prettyPrint());\n-        assertEquals(HttpStatus.ACCEPTED.value(),response.getStatusCode());\n-\n-    }\n-\n-    @Step(\"User amends a Hearing request\")\n-    public void shouldAmendAHearing(final String apiURL,\n-                                      final Map<String, Object> headersAsMap,\n-                                      final String authorizationToken,\n-                                      final String body) {\n-\n-        Response response = callRestEndpointWithPayload(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                body,\n-                HttpMethod.PUT,\n-                HttpStatus.ACCEPTED);\n-        assertEquals(HttpStatus.ACCEPTED.value(),response.getStatusCode());\n-\n-    }\n-\n-    @Step(\"User deletes a Hearing request\")\n-    public void shouldDeleteAHearing(final String apiURL,\n-                                    final Map<String, Object> headersAsMap,\n-                                    final String authorizationToken,\n-                                    final String body) {\n-\n-        System.out.println(apiURL);\n-        Response response = callRestEndpointWithPayload(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                body,\n-                HttpMethod.DELETE,\n-                HttpStatus.BAD_REQUEST);\n-        System.out.println(\"RES\" + response.getBody().asString());\n-        assertEquals(HttpStatus.ACCEPTED.value(),response.getStatusCode());\n-\n-    }\n-\n     @Step(\"User amends a Hearing request with invalid payload\")\n     public void shouldRequestHearingWithInvalidPayload(final String apiURL,\n                                     final Map<String, Object> headersAsMap,"
  },
  {
    "sha": "e041db5a657d9c99a8ef0e0c09f87347136e2448",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/PeopleTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 8,
    "changes": 11,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/PeopleTest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/PeopleTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/PeopleTest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -45,12 +45,8 @@ public void initialiseValues() throws Exception {\n         super.initialiseValues();\n     }\n \n-\n     @Test\n     public void testPeopleLookUp() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulGetPeople() method\");\n-\n         Map<String, String> queryParameters = new HashMap<String, String>();\n         queryParameters.put(\"updated_since\", \"2019-01-29\");\n         queryParameters.put(\"per_page\", \"52\");\n@@ -65,13 +61,12 @@ public void testPeopleLookUp() throws Exception {\n \n         //Verify People List and fetch People Id from first record\n         String peopleId = peopleSteps.assertAndFetchPeopleId(response);\n-        log.debug(\"The value of the peopleId : \"+peopleId);\n+        log.debug(\"The value of the peopleId : \" + peopleId);\n \n         //Make Get by People Id call and verify\n         people_idRootContext = String.format(people_idRootContext, peopleId);\n-        peopleSteps.shouldGetByPeopleId(people_idRootContext, peopleId,\n+        peopleSteps.shouldGetByPeopleId(people_idRootContext,\n                 headersAsMap,\n-                authorizationToken,\n-                null);\n+                authorizationToken);\n     }\n }"
  },
  {
    "sha": "e28fe507cc2bdce5147286ba90ebb9b887535040",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/process/PeopleLookUpResponseProcess.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/process/PeopleLookUpResponseProcess.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/process/PeopleLookUpResponseProcess.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/process/PeopleLookUpResponseProcess.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -11,8 +11,6 @@\n \n     public static String getPeopleId(Response response) throws JSONException {\n         log.debug(response.getBody().prettyPrint());\n-        //JSONObject JSONResponseBody = new JSONObject(response.body().asString());\n-        //JSONObject jsonObject = JSONResponseBody.getJSONArray(\"People\").getJSONObject(0);\n \n         JSONArray jsonArray = new JSONArray(response.body().asString());\n         JSONObject jsonObject = jsonArray.getJSONObject(0);"
  },
  {
    "sha": "9d1719c548752414d04c67f26ca50e3627c48e5e",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/steps/PeopleSteps.java",
    "status": "modified",
    "additions": 2,
    "deletions": 13,
    "changes": 15,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/steps/PeopleSteps.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/steps/PeopleSteps.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/people/steps/PeopleSteps.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -19,8 +19,6 @@\n \n public class PeopleSteps {\n \n-    private String actor;\n-\n     @Step(\"User makes a request to Get List of People for relevant search parameters on the People API\")\n     public Response shouldFetchListOfPeople(final String apiURL,\n                                        final Map<String, Object> headersAsMap,\n@@ -47,23 +45,14 @@ public String assertAndFetchPeopleId(Response response) throws Exception {\n     }\n \n     @Step(\"User makes a request to Get List of People for relevant search parameters on the People API\")\n-    public void shouldGetByPeopleId(final String apiURL, final String peopleId,\n-                                       final Map<String, Object> headersAsMap,\n-                                       final String authorizationToken,\n-                                       final Map<String, String> queryParameters) throws Exception {\n+    public void shouldGetByPeopleId(final String apiURL, final Map<String, Object> headersAsMap,\n+                                       final String authorizationToken) {\n \n         Response response = callRestEndpointWithPayload(apiURL,\n                 headersAsMap,\n                 authorizationToken,\n                 null, HttpMethod.GET,HttpStatus.OK);\n         assertEquals(HttpStatus.OK.value(),response.getStatusCode());\n-\n-        JSONObject peopleObj = new JSONObject(response.body().asString());\n-        assertEquals(peopleId ,peopleObj.getString(\"id\"));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"known_as\")));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"surname\")));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"fullname\")));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"email\")));\n     }\n \n     @Step(\"User makes a request to Update People (PUT in the People API)\")"
  },
  {
    "sha": "5bb19fa0c29f4d28a38741b7662b717c029aea49",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/ResourcesAPITest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 48,
    "changes": 50,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/ResourcesAPITest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/ResourcesAPITest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/ResourcesAPITest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -30,8 +30,6 @@\n @ActiveProfiles(\"functional\")\n public class ResourcesAPITest extends FunctionalTest {\n \n-    public static final String RESOURCES_INPUT_PATH = \"uk/gov/hmcts/futurehearings/hmi/functional/resources/input\";\n-\n     @Value(\"${resourcesByUserRootContext}\")\n     protected String resourcesByUserRootContext;\n \n@@ -49,7 +47,6 @@\n \n     @Test\n     public void testRequestUserWithEmptyPayload() {\n-\n         log.debug(\"In the testRequestAndAmendAResourceByUser() method\");\n         resourceSteps.shouldCreateOrAmendUserWithInvalidPayload(resourcesByUserRootContext,\n                 headersAsMap,\n@@ -58,59 +55,16 @@ public void testRequestUserWithEmptyPayload() {\n     }\n \n     @Test\n-    public void testRequestAndAmendAResourceByLocation() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendAResourceByUser() method\");\n-        int randomId = new Random().nextInt(99999999);\n-        String inputBodyForCreateResourcesByLocation =\n-                String.format(readFileContents(RESOURCES_INPUT_PATH + \"/POST-resources-location-payload.json\"), randomId,randomId);\n-        resourceSteps.shouldCreateALocation(resourcesByLocationRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForCreateResourcesByLocation);\n-\n-        resourcesByLocation_idRootContext = String.format(resourcesByLocation_idRootContext,randomId);\n-        String inputBodyForAmendResourcesByLocation =\n-                String.format(readFileContents(RESOURCES_INPUT_PATH + \"/PUT-resources-location-payload.json\"), randomId,randomId);\n-        resourceSteps.shouldUpdateALocation(resourcesByLocation_idRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForAmendResourcesByLocation);\n-    }\n-\n-    @Test\n-    public void testRequestLocationWithEmptyPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendAResourceByUser() method\");\n+    public void testRequestLocationWithEmptyPayload() {\n         resourceSteps.shouldCreateOrAmendLocationWithInvalidPayload(resourcesByLocationRootContext,\n                 headersAsMap,\n                 authorizationToken, HttpMethod.POST,\n                 \"{}\");\n-\n     }\n \n     @Test\n-    public void testRequestLocationWithXmlPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendAResourceByUser() method\");\n-        resourceSteps.shouldCreateOrAmendLocationWithInvalidPayload(resourcesByLocationRootContext,\n-                headersAsMap,\n-                authorizationToken, HttpMethod.POST,\n-                \"<xml><test></xml>\");\n-    }\n-\n-    @Test\n-    public void testAmendLocationWithEmptyPayload() throws IOException {\n-\n-        log.debug(\"In the testRequestAndAmendAResourceByUser() method\");\n+    public void testAmendLocationWithEmptyPayload() {\n         int randomId = new Random().nextInt(99999999);\n-        String inputBodyForCreateResourcesByLocation =\n-                String.format(readFileContents(RESOURCES_INPUT_PATH + \"/POST-resources-location-payload.json\"), randomId,randomId);\n-        resourceSteps.shouldCreateALocation(resourcesByLocationRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                inputBodyForCreateResourcesByLocation);\n-\n         resourcesByLocation_idRootContext = String.format(resourcesByLocation_idRootContext,randomId);\n         resourceSteps.shouldCreateOrAmendLocationWithInvalidPayload(resourcesByLocation_idRootContext,\n                 headersAsMap,"
  },
  {
    "sha": "ebae1ce254b4df698e99a3f3b6d80f4cb1c47a71",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/steps/ResourcesSteps.java",
    "status": "modified",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/steps/ResourcesSteps.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/steps/ResourcesSteps.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/resources/steps/ResourcesSteps.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -31,23 +31,6 @@ public void shouldCreateALocation(final String apiURL,\n \n     }\n \n-    @Step(\"User performs the amend of a location using the Resources API\")\n-    public void shouldUpdateALocation(final String apiURL,\n-                                      final Map<String, Object> headersAsMap,\n-                                      final String authorizationToken,\n-                                      final String body) {\n-\n-        Response response = callRestEndpointWithPayload(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                body,\n-                HttpMethod.PUT,\n-                HttpStatus.NO_CONTENT);\n-        log.debug(\"The value of the response body : \" + response.getBody().prettyPrint());\n-        assertEquals(HttpStatus.NO_CONTENT.value(), response.getStatusCode());\n-\n-    }\n-\n     @Step(\"User performs the creation of a location using invalid payload\")\n     public void shouldCreateOrAmendLocationWithInvalidPayload(final String apiURL,\n                                       final Map<String, Object> headersAsMap,"
  },
  {
    "sha": "da304a3a4b6494881e1c184388d0ecc8b4105c6f",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/SessionsLookUpTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 63,
    "changes": 64,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/SessionsLookUpTest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/SessionsLookUpTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/SessionsLookUpTest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -40,71 +40,9 @@ public void initialiseValues() throws Exception {\n     }\n \n     @Test\n-    public void testSuccessfulGetSessionForSessionRequestType() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulGetSessionForSessionRequestType () method\");\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"requestSessionType\", \"ADHOC\");\n-\n-        sessionsLookUpSteps.checkSessionsForAllTheRelevantQueryParameters(sessionsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-\n-    }\n-\n-    @Test\n-    public void testSuccessfulGetSessionForSessionRequestTypeAndRequestDuration() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulGetSessionForSessionRequestType() method\");\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"requestSessionType\", \"ADHOC\");\n-        queryParameters.put(\"requestDuration\", \"360\");\n-\n-        sessionsLookUpSteps.checkSessionsForAllTheRelevantQueryParameters(sessionsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-\n-    }\n-\n-    @Test\n-    public void testSuccessfulGetSessionForSessionRequestTypeAndRequestLocation() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulGetSessionForSessionRequestType() method\");\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"requestSessionType\", \"ADHOC\");\n-        queryParameters.put(\"requestLocationId\", \"301\");\n-\n-        sessionsLookUpSteps.checkSessionsForAllTheRelevantQueryParameters(sessionsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-    }\n-\n-    @Test\n-    @Ignore(\"Ignoring this test as it is Failing Due to Defect MCGIRRSD-2359\")\n-    public void testSuccessfulGetSessionForSessionRequestTypeAndRequestJudgeType() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulGetSessionForSessionRequestType() method\");\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"requestSessionType\", \"ADHOC\");\n-        queryParameters.put(\"requestJudgeType\", \"PUBLAW\");\n-\n-        sessionsLookUpSteps.checkSessionsForAllTheRelevantQueryParameters(sessionsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-    }\n-\n-    @Test\n-    public void testSuccessfulGetSessionForSessionRequestTypeAndRequestStartDateAndRequestEndDate() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulGetSessionForSessionRequestType() method\");\n+    public void testSuccessfulGetSessionForSessionRequestType() {\n         Map<String, String> queryParameters = new HashMap<String, String>();\n         queryParameters.put(\"requestSessionType\", \"ADHOC\");\n-        queryParameters.put(\"requestStartDate\", \"2020-12-01T10:00:00Z\");\n-        queryParameters.put(\"requestEndDate\", \"2020-12-09T10:00:00Z\");\n \n         sessionsLookUpSteps.checkSessionsForAllTheRelevantQueryParameters(sessionsRootContext,\n                 headersAsMap,"
  },
  {
    "sha": "7f8c5f047fb18301934497aaad8fe2c4720b02b5",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/steps/SessionsLookUpSteps.java",
    "status": "modified",
    "additions": 3,
    "deletions": 52,
    "changes": 55,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/steps/SessionsLookUpSteps.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/steps/SessionsLookUpSteps.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/sessions/steps/SessionsLookUpSteps.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -1,17 +1,10 @@\n package uk.gov.hmcts.futurehearings.hmi.functional.sessions.steps;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n import static uk.gov.hmcts.futurehearings.hmi.functional.common.rest.RestClientTemplate.callRestEndpointWithQueryParams;\n \n-import java.time.LocalDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n \n-import com.jayway.jsonpath.DocumentContext;\n-import com.jayway.jsonpath.JsonPath;\n-import io.restassured.response.Response;\n import lombok.extern.slf4j.Slf4j;\n import net.thucydides.core.annotations.Step;\n import org.springframework.http.HttpStatus;\n@@ -23,54 +16,12 @@\n     public void checkSessionsForAllTheRelevantQueryParameters(final String apiURL,\n                                                               final Map<String, Object> headersAsMap,\n                                                               final String authorizationToken,\n-                                                              final Map<String, String> queryParameters) throws Exception {\n+                                                              final Map<String, String> queryParameters) {\n \n-        Response response = callRestEndpointWithQueryParams(apiURL,\n+         callRestEndpointWithQueryParams(apiURL,\n                 headersAsMap,\n                 authorizationToken,\n                 queryParameters, HttpStatus.OK);\n-        String value = response.getBody().asString();\n-        log.debug(\"The value of the Response body\" + value);\n-        final DocumentContext context = JsonPath.parse(value);\n \n-        if (Objects.nonNull(queryParameters.get(\"requestSessionType\"))) {\n-            final List<String> sessionTypeList = context.read(\"$.sessionsResponse.sessions[*].sessionType\");\n-            assertTrue(sessionTypeList.stream().allMatch(s -> {\n-                return s.equals(queryParameters.get(\"requestSessionType\").trim());\n-            }));\n-        }\n-        if (Objects.nonNull(queryParameters.get(\"requestDuration\"))) {\n-            final List<Integer> sessionTypeList = context.read(\"$.sessionsResponse.sessions[*].sessionDuration\");\n-            assertTrue(sessionTypeList.stream().allMatch(s -> {\n-                return s == Integer.parseInt(queryParameters.get(\"requestDuration\"));\n-            }));\n-        }\n-        if (Objects.nonNull(queryParameters.get(\"requestJudgeType\"))) {\n-            final List<String> sessionTypeList = context.read(\"$.sessionsResponse.sessions[*].sessionJudges[*].sessionJudgeType\");\n-            assertTrue(sessionTypeList.stream().allMatch(s -> {\n-                return s.equals(queryParameters.get(\"requestJudgeType\").trim());\n-            }));\n-        }\n-        if (Objects.nonNull(queryParameters.get(\"requestLocationId\"))) {\n-            final List<String> sessionTypeList = context.read(\"$.sessionsResponse.sessions[*].sessionRoomId\");\n-            assertTrue(sessionTypeList.stream().allMatch(s -> {\n-                return s.equals(queryParameters.get(\"requestLocationId\").trim());\n-            }));\n-        }\n-        if (Objects.nonNull(queryParameters.get(\"requestStartDate\")) && Objects.nonNull(queryParameters.get(\"requestEndDate\"))) {\n-            final LocalDateTime dateTimeStartDateInput = LocalDateTime.parse(queryParameters.get(\"requestStartDate\"),\n-                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss'Z'\"));\n-            final LocalDateTime dateTimeEndDateInput = LocalDateTime.parse(queryParameters.get(\"requestEndDate\"),\n-                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss'Z'\"));\n-            log.debug(\"The value of the given date\" + dateTimeEndDateInput);\n-            log.debug(\"The value of the given date seconds\" + dateTimeEndDateInput.getSecond());\n-            final List<String> sessionsList = context.read(\"$.sessionsResponse.sessions[*].sessionStartTime\");\n-            assertTrue(sessionsList.stream().allMatch(s -> {\n-                final LocalDateTime dateTime = LocalDateTime.parse(s,\n-                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss'Z'\"));\n-                return (dateTime.isAfter(dateTimeStartDateInput) && dateTime.isBefore(dateTimeEndDateInput)\n-                        || (dateTime.isEqual(dateTimeStartDateInput) || dateTime.isEqual(dateTimeEndDateInput)));\n-            }));\n-        }\n     }\n }"
  },
  {
    "sha": "acc680af14e460d3605271b7f45680fd1d43846a",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/VideoHearingTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 133,
    "changes": 135,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/VideoHearingTest.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/VideoHearingTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/VideoHearingTest.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -51,111 +51,17 @@ public void initialiseValues() throws Exception {\n         super.initialiseValues();\n     }\n \n-\n     @Test\n-    public void testCreateVideoHearing() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulPostVideoHearing() method\");\n-        final String username = String.format(\"abc\" + new Random().nextInt(999999));\n-        final String payloadForVideoHearing =\n-                String.format(readFileContents(VIDEO_HEARING_INPUT_PATH + \"/POST-video-hearing-request.json\"), username);\n-\n-        //Make Post call for video hearing with username\n-        headersAsMap = createStandardHMIHeader(\"EMULATOR\");\n-        videoHearingSteps.shouldCreateVideoHearing(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                payloadForVideoHearing);\n-\n-        //Make Get call for video hearing with username as query param\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"username\", username);\n-\n-        final String hearingId = videoHearingSteps.performVideoHearingGetByUsername(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-\n-        //Make Get call for video hearing with hearingId as path param\n-        videohearings_idRootContext = String.format(videohearings_idRootContext, hearingId);\n-        final Response response = videoHearingSteps.shouldFetchVideoHearingByHearingId(videohearings_idRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                null);\n-        videoHearingSteps.assertVideoHearingCreated(response, hearingId);\n-    }\n-\n-    @Disabled(\"Disabling this test as functional test is pointing to EMULATOR which supports any format and return success\")\n-    public void testCreateVideoHearingWithEmptyPayload() throws Exception {\n-\n-        log.debug(\"In the testCreateVideoHearingWithEmptyPayload() method\");\n-        //Make Post call for video hearing with username\n+    public void testCreateVideoHearingWithEmptyPayload() {\n         headersAsMap = createStandardHMIHeader(\"EMULATOR\");\n         videoHearingSteps.shouldRequestVideoHearingWithInvalidPayload(videohearingsRootContext,\n                 headersAsMap,\n                 authorizationToken, HttpMethod.POST,\n                 \"{}\");\n     }\n \n-    @Disabled(\"Disabling this test as functional test is pointing to EMULATOR which supports any format and return success\")\n-    public void testCreateVideoHearingWithXmlPayload() throws Exception {\n-\n-        log.debug(\"In the testCreateVideoHearingWithXmlPayload() method\");\n-        //Make Post call for video hearing with username\n-        headersAsMap = createStandardHMIHeader(\"EMULATOR\");\n-        videoHearingSteps.shouldRequestVideoHearingWithInvalidPayload(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken, HttpMethod.POST,\n-                \"<xml><test></xml>\");\n-    }\n-\n     @Test\n-    public void testAmendVideoHearing() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulPostVideoHearing() method\");\n-        final String username = String.format(\"abc\" + new Random().nextInt(999999));\n-        final String payloadForVideoHearing =\n-                String.format(readFileContents(VIDEO_HEARING_INPUT_PATH + \"/POST-video-hearing-request.json\"), username);\n-\n-        //Make Post call for video hearing with username\n-        headersAsMap = createStandardHMIHeader(\"EMULATOR\");\n-        videoHearingSteps.shouldCreateVideoHearing(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                payloadForVideoHearing);\n-\n-        //Make Get call for video hearing with username as query param\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"username\", username);\n-\n-        final String hearingId = videoHearingSteps.performVideoHearingGetByUsername(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-\n-        //Make Put call for amend video hearing with hearingId as path param\n-        final String hearing_room = String.format(\"room\" + new Random().nextInt(9999));\n-        final String payloadForPutVideoHearing =\n-                String.format(readFileContents(VIDEO_HEARING_INPUT_PATH + \"/PUT-video-hearing-request.json\"), hearing_room);\n-        videohearings_idRootContext = String.format(videohearings_idRootContext, hearingId);\n-        videoHearingSteps.shouldAmendVideoHearing(videohearings_idRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                payloadForPutVideoHearing);\n-\n-        //Make Get call for video hearing with hearingId as path param\n-        videohearings_idRootContext = String.format(videohearings_idRootContext, hearingId);\n-        final Response response = videoHearingSteps.shouldFetchVideoHearingByHearingId(videohearings_idRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                null);\n-        videoHearingSteps.assertVideoHearingUpdated(response, hearingId, hearing_room);\n-    }\n-\n-    @Disabled(\"Disabling this test as functional test is pointing to EMULATOR which supports any format and return success\")\n     public void testAmendVideoHearingWithEmptyPayload() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulPostVideoHearing() method\");\n         final String username = String.format(\"abc\" + new Random().nextInt(999999));\n         final String payloadForVideoHearing =\n                 String.format(readFileContents(VIDEO_HEARING_INPUT_PATH + \"/POST-video-hearing-request.json\"), username);\n@@ -178,44 +84,12 @@ public void testAmendVideoHearingWithEmptyPayload() throws Exception {\n \n         //Make Put call for amend video hearing with hearingId as path param\n         videohearings_idRootContext = String.format(videohearings_idRootContext, hearingId);\n-        videoHearingSteps.shouldRequestVideoHearingWithInvalidPayload(videohearings_idRootContext,\n+        videoHearingSteps.shouldAmendVideoHearingWithInvalidPayload(videohearings_idRootContext,\n                 headersAsMap,\n                 authorizationToken, HttpMethod.PUT,\n                 \"{}\");\n     }\n \n-    @Disabled(\"Disabling this test as functional test is pointing to EMULATOR which supports any format and return success\")\n-    public void testAmendVideoHearingWithXmlPayload() throws Exception {\n-\n-        log.debug(\"In the testSuccessfulPostVideoHearing() method\");\n-        final String username = String.format(\"abc\" + new Random().nextInt(999999));\n-        final String payloadForVideoHearing =\n-                String.format(readFileContents(VIDEO_HEARING_INPUT_PATH + \"/POST-video-hearing-request.json\"), username);\n-\n-        //Make Post call for video hearing with username\n-        headersAsMap = createStandardHMIHeader(\"EMULATOR\");\n-        videoHearingSteps.shouldCreateVideoHearing(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                payloadForVideoHearing);\n-\n-        //Make Get call for video hearing with username as query param\n-        Map<String, String> queryParameters = new HashMap<String, String>();\n-        queryParameters.put(\"username\", username);\n-\n-        final String hearingId = videoHearingSteps.performVideoHearingGetByUsername(videohearingsRootContext,\n-                headersAsMap,\n-                authorizationToken,\n-                queryParameters);\n-\n-        //Make Put call for amend video hearing with hearingId as path param\n-        videohearings_idRootContext = String.format(videohearings_idRootContext, hearingId);\n-        videoHearingSteps.shouldRequestVideoHearingWithInvalidPayload(videohearings_idRootContext,\n-                headersAsMap,\n-                authorizationToken, HttpMethod.PUT,\n-                \"<xml><test></xml>\");\n-    }\n-\n     @Test\n     public void testDeleteVideoHearing() throws Exception {\n \n@@ -247,10 +121,5 @@ public void testDeleteVideoHearing() throws Exception {\n                 headersAsMap,\n                 authorizationToken,\n                 \"{}\");\n-\n-        //Assert video hearing deleted.\n-        videoHearingSteps.assertVideoHearingDeleted(videohearingsRootContext, headersAsMap,\n-                authorizationToken, queryParameters, hearingId);\n-        \n     }\n }"
  },
  {
    "sha": "b5230c2b296de3b7f5d607301ae973074fbd79f2",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/process/VideoHearingLookUpResponseProcess.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/process/VideoHearingLookUpResponseProcess.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/process/VideoHearingLookUpResponseProcess.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/process/VideoHearingLookUpResponseProcess.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -11,8 +11,6 @@\n \n     public static String getHearingId(Response response) throws JSONException {\n         log.debug(response.getBody().prettyPrint());\n-        //JSONObject JSONResponseBody = new JSONObject(response.body().asString());\n-        //JSONObject jsonObject = JSONResponseBody.getJSONArray(\"People\").getJSONObject(0);\n \n         JSONArray jsonArray = new JSONArray(response.body().asString());\n         JSONObject jsonObject = jsonArray.getJSONObject(0);"
  },
  {
    "sha": "f2d4cab2d862ca2ca041272ef0a0f08b3eab973e",
    "filename": "src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/steps/VideoHearingSteps.java",
    "status": "modified",
    "additions": 7,
    "deletions": 44,
    "changes": 51,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/steps/VideoHearingSteps.java",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/steps/VideoHearingSteps.java",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/java/uk/gov/hmcts/futurehearings/hmi/functional/videohearing/steps/VideoHearingSteps.java?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -19,8 +19,6 @@\n \n public class VideoHearingSteps {\n \n-    private String actor;\n-\n     @Step(\"User makes a request to Post Video Hearing API\")\n     public void shouldCreateVideoHearing(final String apiURL,\n                                         final Map<String, Object> headersAsMap,\n@@ -46,15 +44,16 @@ public void shouldRequestVideoHearingWithInvalidPayload(final String apiURL,\n         assertEquals(HttpStatus.BAD_REQUEST.value(),response.getStatusCode());\n     }\n \n-    @Step(\"User makes a request to Put Video Hearing API\")\n-    public void shouldAmendVideoHearing(final String apiURL,\n-                                        final Map<String, Object> headersAsMap,\n-                                        final String authorizationToken,\n-                                        final String body) {\n+    @Step(\"User makes a request to Video Hearing API with invalid payload\")\n+    public void shouldAmendVideoHearingWithInvalidPayload(final String apiURL,\n+                                                            final Map<String, Object> headersAsMap,\n+                                                            final String authorizationToken,\n+                                                            final HttpMethod httpMethod,\n+                                                            final String body) {\n         Response response = callRestEndpointWithPayload(apiURL,\n                 headersAsMap,\n                 authorizationToken,\n-                body, HttpMethod.PUT,HttpStatus.OK);\n+                body, httpMethod, HttpStatus.OK);\n         assertEquals(HttpStatus.OK.value(),response.getStatusCode());\n     }\n \n@@ -86,42 +85,6 @@ public String performVideoHearingGetByUsername(final String apiURL,\n         return hearingId;\n     }\n \n-    @Step(\"User makes a request to Get Video hearing by ID\")\n-    public Response shouldFetchVideoHearingByHearingId(final String apiURL,\n-                                                   final Map<String, Object> headersAsMap,\n-                                                   final String authorizationToken,\n-                                                   final Map<String, String> queryParameters\n-                                                   ) throws Exception {\n-\n-        Response response = callRestEndpointWithPayload(apiURL,\n-                headersAsMap,\n-                authorizationToken,\n-                null, HttpMethod.GET,HttpStatus.OK);\n-        return response;\n-    }\n-\n-    @Step(\"Verify video hearing created\")\n-    public void assertVideoHearingCreated(Response response, final String hearingId) throws Exception {\n-        assertEquals(HttpStatus.OK.value(),response.getStatusCode());\n-\n-        JSONObject peopleObj = new JSONObject(response.body().asString());\n-        assertEquals(hearingId ,peopleObj.getString(\"id\"));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"hearing_venue_name\")));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"scheduled_date_time\")));\n-    }\n-\n-    @Step(\"Verify video hearing updated\")\n-    public void assertVideoHearingUpdated(Response response,\n-                                             final String hearingId,\n-                                             final String updatedHearingRoomName) throws Exception {\n-        assertEquals(HttpStatus.OK.value(),response.getStatusCode());\n-\n-        JSONObject peopleObj = new JSONObject(response.body().asString());\n-        assertEquals(hearingId ,peopleObj.getString(\"id\"));\n-        assertTrue(!StringUtils.isEmpty(peopleObj.getString(\"hearing_room_name\")));\n-        assertEquals(updatedHearingRoomName ,peopleObj.getString(\"hearing_room_name\"));\n-    }\n-\n     @Step(\"Verify video hearing deleted\")\n     public void assertVideoHearingDeleted(final String apiURL,\n                                                        final Map<String, Object> headersAsMap,"
  },
  {
    "sha": "d58ab2c5fe0e0a98ffcb673e92856d5dd44f6726",
    "filename": "src/functionalTest/resources/uk/gov/hmcts/futurehearings/hmi/functional/direct-listing/input/POST-Hearing-Direct-Listing-Payload.json",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/hmi-api-gateway-fh/blob/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/resources/uk/gov/hmcts/futurehearings/hmi/functional/direct-listing/input/POST-Hearing-Direct-Listing-Payload.json",
    "raw_url": "https://github.com/hmcts/hmi-api-gateway-fh/raw/5969fe68dac56a1648fe0896529e1b46f049cacd/src/functionalTest/resources/uk/gov/hmcts/futurehearings/hmi/functional/direct-listing/input/POST-Hearing-Direct-Listing-Payload.json",
    "contents_url": "https://api.github.com/repos/hmcts/hmi-api-gateway-fh/contents/src/functionalTest/resources/uk/gov/hmcts/futurehearings/hmi/functional/direct-listing/input/POST-Hearing-Direct-Listing-Payload.json?ref=5969fe68dac56a1648fe0896529e1b46f049cacd",
    "patch": "@@ -4,7 +4,7 @@\n     },\n     \"_case\": {\n       \"caseIdHMCTS\": \"616\",\n-      \"caseListingRequestId\": \"%s\",\n+      \"caseListingRequestId\": \"1111111\",\n       \"caseTitle\": \"Gill Vs Stanley\",\n       \"caseJurisdiction\": \"FAM\",\n "
  }
]
