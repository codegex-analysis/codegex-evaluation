[
  {
    "sha": "7250216a9f946ac1f02b7da7dc821fed8cb993af",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/AppealSavedConfirmation.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/AppealSavedConfirmation.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/AppealSavedConfirmation.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/AppealSavedConfirmation.java?ref=28427b7746be5fab278a84dc719970430388e260",
    "patch": "@@ -104,8 +104,8 @@ public PostSubmitCallbackResponse handle(\n             log.info(\"PRD endpoint called for caseId [{}] orgId[{}]\",\n                 callback.getCaseDetails().getId(), organisationIdentifier);\n \n-            ccdCaseAssignment.revokeAccessToCase(callback, organisationIdentifier);\n             ccdCaseAssignment.assignAccessToCase(callback);\n+            ccdCaseAssignment.revokeAccessToCase(callback, organisationIdentifier);\n         }\n \n         return postSubmitResponse;"
  },
  {
    "sha": "e498531748472628edf112c071806f0e826b2b3e",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignment.java",
    "status": "modified",
    "additions": 12,
    "deletions": 31,
    "changes": 43,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignment.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignment.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignment.java?ref=28427b7746be5fab278a84dc719970430388e260",
    "patch": "@@ -9,7 +9,6 @@\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-import org.springframework.web.client.RestClientResponseException;\n import org.springframework.web.client.RestTemplate;\n import uk.gov.hmcts.reform.authorisation.generators.AuthTokenGenerator;\n import uk.gov.hmcts.reform.iacaseapi.domain.UserDetailsProvider;\n@@ -47,6 +46,8 @@ public CcdCaseAssignment(RestTemplate restTemplate,\n         this.aacUrl = aacUrl;\n         this.ccdAssignmentsApiPath = ccdAssignmentsApiPath;\n         this.aacAssignmentsApiPath = aacAssignmentsApiPath;\n+\n+        restTemplate.setErrorHandler(new ClientResponseErrorHandler());\n     }\n \n     public void revokeAccessToCase(\n@@ -80,26 +81,16 @@ public void revokeAccessToCase(\n                 setHeaders(serviceAuthorizationToken, accessToken)\n             );\n \n-        ResponseEntity<Object> response;\n-        try {\n-            response = restTemplate\n+        log.info(\"Calling CCD API for the case {}\", caseId);\n+\n+        ResponseEntity<Object> response = restTemplate\n                 .exchange(\n                     ccdUrl + ccdAssignmentsApiPath,\n                     HttpMethod.DELETE,\n                     requestEntity,\n                     Object.class\n                 );\n \n-        } catch (RestClientResponseException e) {\n-            throw new CcdDataIntegrationException(\n-                \"Couldn't revoke CCD case access for case [\"\n-                + callback.getCaseDetails().getId()\n-                + \"] using API: \"\n-                + ccdUrl + ccdAssignmentsApiPath,\n-                e\n-            );\n-        }\n-\n         log.info(\"Revoke Access. Http status received from CCD API; {} for case {}\",\n             response.getStatusCodeValue(), callback.getCaseDetails().getId());\n     }\n@@ -126,25 +117,15 @@ public void assignAccessToCase(\n                 setHeaders(serviceAuthorizationToken, accessToken)\n             );\n \n-        ResponseEntity<Object> response;\n-        try {\n-            response = restTemplate\n-                .exchange(\n-                    aacUrl + aacAssignmentsApiPath,\n-                    HttpMethod.POST,\n-                    requestEntity,\n-                    Object.class\n-                );\n+        log.info(\"Calling AAC API for the case {}\", caseId);\n \n-        } catch (RestClientResponseException e) {\n-            throw new CcdDataIntegrationException(\n-                \"Couldn't set initial AAC case assignment for case [\"\n-                + callback.getCaseDetails().getId()\n-                + \"] using API: \"\n-                + aacUrl + aacAssignmentsApiPath,\n-                e\n+        ResponseEntity<Object> response = restTemplate\n+            .exchange(\n+                aacUrl + aacAssignmentsApiPath,\n+                HttpMethod.POST,\n+                requestEntity,\n+                Object.class\n             );\n-        }\n \n         log.info(\"Assign Access. Http status received from AAC API; {} for case {}\",\n             response.getStatusCodeValue(), callback.getCaseDetails().getId());"
  },
  {
    "sha": "716e1c8b784fbafbdf1f5af1d001426ff329659f",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientIntegrationException.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientIntegrationException.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientIntegrationException.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientIntegrationException.java?ref=28427b7746be5fab278a84dc719970430388e260",
    "patch": "@@ -0,0 +1,8 @@\n+package uk.gov.hmcts.reform.iacaseapi.infrastructure.clients;\n+\n+public class ClientIntegrationException extends RuntimeException {\n+\n+    public ClientIntegrationException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "763339b01a9bf45358e80330e8024da64196cc5d",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandler.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandler.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/28427b7746be5fab278a84dc719970430388e260/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandler.java?ref=28427b7746be5fab278a84dc719970430388e260",
    "patch": "@@ -0,0 +1,51 @@\n+package uk.gov.hmcts.reform.iacaseapi.infrastructure.clients;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URI;\n+import java.util.stream.Collectors;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+\n+@Slf4j\n+public class ClientResponseErrorHandler extends DefaultResponseErrorHandler  {\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        HttpStatus httpStatus = response.getStatusCode();\n+        return httpStatus.is4xxClientError() || httpStatus.is5xxServerError();\n+    }\n+\n+    @Override\n+    public void handleError(URI url, HttpMethod method, ClientHttpResponse response) throws IOException {\n+\n+        String responseAsString = toString(response.getBody());\n+        log.error(\"URL: {}, HttpMethod: {}, ResponseBody: {}\", url, method, responseAsString);\n+\n+        throw new ClientIntegrationException(responseAsString);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        String responseAsString = toString(response.getBody());\n+        log.error(\"ResponseBody: {}\", responseAsString);\n+\n+        throw new ClientIntegrationException(responseAsString);\n+    }\n+\n+    String toString(InputStream inputStream) {\n+\n+        if (inputStream != null) {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n+            return reader.lines().collect(Collectors.joining(\"\"));\n+        }\n+        \n+        return \"Error in reading the response body as it is null\";\n+    }\n+}"
  },
  {
    "sha": "067d30f58af5347ab64fb132267d242db7af2c56",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignmentTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 77,
    "changes": 77,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/28427b7746be5fab278a84dc719970430388e260/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignmentTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/28427b7746be5fab278a84dc719970430388e260/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignmentTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/CcdCaseAssignmentTest.java?ref=28427b7746be5fab278a84dc719970430388e260",
    "patch": "@@ -14,7 +14,6 @@\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.RestClientResponseException;\n import org.springframework.web.client.RestTemplate;\n import uk.gov.hmcts.reform.authorisation.generators.AuthTokenGenerator;\n import uk.gov.hmcts.reform.iacaseapi.domain.UserDetailsProvider;\n@@ -122,82 +121,6 @@ void should_send_delete_to_revoke_ccd_case_access_and_receive_204() {\n             );\n     }\n \n-    @Test\n-    void should_handle_when_rest_exception_thrown_for_set_access() {\n-\n-        RestClientResponseException restClientResponseEx = mock(RestClientResponseException.class);\n-\n-        when(serviceAuthTokenGenerator.generate()).thenReturn(SERVICE_TOKEN);\n-        when(userDetailsProvider.getUserDetails()).thenReturn(userDetails);\n-        when(userDetails.getAccessToken()).thenReturn(ACCESS_TOKEN);\n-        when(userDetails.getId()).thenReturn(IDAM_ID_OF_USER_CREATING_CASE);\n-        when(callback.getCaseDetails()).thenReturn(caseDetails);\n-        when(caseDetails.getId()).thenReturn(123L);\n-\n-        when(restTemplate\n-            .exchange(\n-                eq(aacUrl + aacAssignmentsApiPath),\n-                eq(HttpMethod.POST),\n-                any(HttpEntity.class),\n-                eq(Object.class)\n-            )\n-        ).thenThrow(restClientResponseEx);\n-\n-        assertThatThrownBy(() -> ccdCaseAssignment.assignAccessToCase(callback))\n-            .isInstanceOf(CcdDataIntegrationException.class)\n-            .hasMessage(\"Couldn't set initial AAC case assignment for case [\"\n-                        + caseDetails.getId()\n-                        + \"] using API: \"\n-                        + aacUrl\n-                        + aacAssignmentsApiPath)\n-            .hasCauseInstanceOf(RestClientResponseException.class);\n-\n-        verify(restTemplate)\n-            .exchange(\n-                anyString(),\n-                eq(HttpMethod.POST),\n-                any(HttpEntity.class),\n-                eq(Object.class)\n-            );\n-    }\n-\n-    @Test\n-    void should_handle_when_rest_exception_thrown_for_revoke_access() {\n-\n-        RestClientResponseException restClientResponseEx = mock(RestClientResponseException.class);\n-\n-        when(serviceAuthTokenGenerator.generate()).thenReturn(SERVICE_TOKEN);\n-        when(userDetailsProvider.getUserDetails()).thenReturn(userDetails);\n-        when(userDetails.getAccessToken()).thenReturn(ACCESS_TOKEN);\n-        when(userDetails.getId()).thenReturn(IDAM_ID_OF_USER_CREATING_CASE);\n-        when(callback.getCaseDetails()).thenReturn(caseDetails);\n-        when(caseDetails.getId()).thenReturn(123L);\n-\n-        when(restTemplate\n-            .exchange(\n-                eq(ccdUrl + ccdAssignmentsApiPath),\n-                eq(HttpMethod.DELETE),\n-                any(HttpEntity.class),\n-                eq(Object.class)\n-            )\n-        ).thenThrow(restClientResponseEx);\n-\n-        assertThatThrownBy(() -> ccdCaseAssignment.revokeAccessToCase(callback, \"some-org-identifier\"))\n-            .isInstanceOf(CcdDataIntegrationException.class)\n-            .hasMessage(\"Couldn't revoke CCD case access for case [\"\n-                        + caseDetails.getId()\n-                        + \"] using API: \"\n-                        + ccdUrl + ccdAssignmentsApiPath)\n-            .hasCauseInstanceOf(RestClientResponseException.class);\n-\n-        verify(restTemplate)\n-            .exchange(\n-                anyString(),\n-                eq(HttpMethod.DELETE),\n-                any(HttpEntity.class),\n-                eq(Object.class)\n-            );\n-    }\n \n     @Test\n     void should_throw_when_callback_param_is_null() {"
  },
  {
    "sha": "ea2a8a138cc22ae1e764e3adb62fad0bd5ea2d46",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandlerTest.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/28427b7746be5fab278a84dc719970430388e260/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandlerTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/28427b7746be5fab278a84dc719970430388e260/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/ClientResponseErrorHandlerTest.java?ref=28427b7746be5fab278a84dc719970430388e260",
    "patch": "@@ -0,0 +1,92 @@\n+package uk.gov.hmcts.reform.iacaseapi.infrastructure.clients;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.*;\n+import java.net.URI;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+@ExtendWith(MockitoExtension.class)\n+class ClientResponseErrorHandlerTest {\n+\n+    @Mock private ClientHttpResponse response;\n+\n+    private ClientResponseErrorHandler clientResponseErrorHandler;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        clientResponseErrorHandler = new ClientResponseErrorHandler();\n+    }\n+\n+    @Test\n+    void test_4xx_client_error() throws Exception {\n+\n+        when(response.getStatusCode()).thenReturn(HttpStatus.NOT_FOUND);\n+\n+        assertTrue(clientResponseErrorHandler.hasError(response));\n+    }\n+\n+    @Test\n+    void test_5xx_server_error() throws Exception {\n+\n+        when(response.getStatusCode()).thenReturn(HttpStatus.INTERNAL_SERVER_ERROR);\n+\n+        assertTrue(clientResponseErrorHandler.hasError(response));\n+    }\n+\n+    @Test\n+    void test_for_no_4xx_or_5xx_errors() throws Exception {\n+\n+        when(response.getStatusCode()).thenReturn(HttpStatus.FOUND);\n+\n+        assertFalse(clientResponseErrorHandler.hasError(response));\n+    }\n+\n+    @Test\n+    void test_handle_error_with_url_and_http_method() throws Exception {\n+\n+        URI uri = new URI(\"http://localhost\");\n+        when(response.getBody()).thenReturn(new ByteArrayInputStream(\"Api callback error\".getBytes()));\n+\n+        assertThatThrownBy(() -> clientResponseErrorHandler.handleError(uri, HttpMethod.POST, response))\n+            .isExactlyInstanceOf(ClientIntegrationException.class);\n+    }\n+\n+    @Test\n+    void test_handle_error_with_url_and_http_method_and_no_body() throws Exception {\n+\n+        URI uri = new URI(\"http://localhost\");\n+        when(response.getBody()).thenReturn(null);\n+\n+        assertThatThrownBy(() -> clientResponseErrorHandler.handleError(uri, HttpMethod.POST, response))\n+            .isExactlyInstanceOf(ClientIntegrationException.class);\n+    }\n+\n+    @Test\n+    void test_handle_error_with_response_only() throws Exception {\n+\n+        when(response.getBody()).thenReturn(new ByteArrayInputStream(\"Api callback error\".getBytes()));\n+\n+        assertThatThrownBy(() -> clientResponseErrorHandler.handleError(response))\n+            .isExactlyInstanceOf(ClientIntegrationException.class);\n+    }\n+\n+    @Test\n+    void test_handle_error_with_response_only_no_body() throws Exception {\n+\n+        when(response.getBody()).thenReturn(null);\n+\n+        assertThatThrownBy(() -> clientResponseErrorHandler.handleError(response))\n+            .isExactlyInstanceOf(ClientIntegrationException.class);\n+    }\n+}"
  }
]
