[
  {
    "sha": "6eee4b3adc67fc88d3759f152b8b93d052d28abc",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/Event.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/Event.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/Event.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/Event.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -100,6 +100,7 @@\n     ALLOCATE_THE_CASE(\"allocateTheCase\"),\n     RECORD_REMISSION_DECISION(\"recordRemissionDecision\"),\n     MANAGE_FEE_UPDATE(\"manageFeeUpdate\"),\n+    APPLY_NOC_DECISION(\"applyNocDecision\"),\n \n     @JsonEnumDefaultValue\n     UNKNOWN(\"unknown\");"
  },
  {
    "sha": "bdbe77adfd2fafd6f20d17cf3e7603f72f394d16",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandler.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandler.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandler.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandler.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.reform.iacaseapi.domain.handlers.postsubmit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.Event;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.*;\n+import uk.gov.hmcts.reform.iacaseapi.domain.handlers.PostSubmitCallbackHandler;\n+import uk.gov.hmcts.reform.iacaseapi.domain.service.PostNotificationSender;\n+\n+@Component\n+public class SendPostNotificationHandler implements PostSubmitCallbackHandler<AsylumCase> {\n+\n+    private final PostNotificationSender<AsylumCase> postNotificationSender;\n+\n+    public SendPostNotificationHandler(PostNotificationSender<AsylumCase> postNotificationSender) {\n+        this.postNotificationSender = postNotificationSender;\n+    }\n+\n+    /**\n+     * Add the list of events to be handled in Post submit callback.\n+     * @return list of events to be handled.\n+     */\n+    private List<Event> getEventsToHandle() {\n+        return Arrays.asList(Event.APPLY_NOC_DECISION);\n+    }\n+\n+    @Override\n+    public boolean canHandle(Callback<AsylumCase> callback) {\n+        requireNonNull(callback, \"callback must not be null\");\n+        return getEventsToHandle().contains(callback.getEvent());\n+    }\n+\n+    @Override\n+    public PostSubmitCallbackResponse handle(Callback<AsylumCase> callback) {\n+        if (!canHandle(callback)) {\n+            throw new IllegalStateException(\"Cannot handle callback\");\n+        }\n+        PostSubmitCallbackResponse postSubmitCallbackResponse = postNotificationSender.send(callback);\n+        return postSubmitCallbackResponse;\n+    }\n+}"
  },
  {
    "sha": "07569eda6d448f5ac888972f49d111433696e45e",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/service/PostNotificationSender.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/service/PostNotificationSender.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/service/PostNotificationSender.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/domain/service/PostNotificationSender.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -0,0 +1,12 @@\n+package uk.gov.hmcts.reform.iacaseapi.domain.service;\n+\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.CaseData;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+\n+public interface PostNotificationSender<T extends CaseData> {\n+\n+    PostSubmitCallbackResponse send(\n+        Callback<T> callback\n+    );\n+}"
  },
  {
    "sha": "a8cbcb57aafc7ed832186cdc287aff536a3f06d9",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcher.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcher.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -49,7 +49,6 @@ public PostSubmitCallbackResponse handle(\n                     .getConfirmationBody()\n                     .ifPresent(callbackResponse::setConfirmationBody);\n \n-                break;\n             }\n         }\n "
  },
  {
    "sha": "300d49680bda0099141a9153b9966b6eaee38686",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegator.java",
    "status": "modified",
    "additions": 47,
    "deletions": 8,
    "changes": 55,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegator.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegator.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegator.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -12,6 +12,7 @@\n import uk.gov.hmcts.reform.authorisation.generators.AuthTokenGenerator;\n import uk.gov.hmcts.reform.iacaseapi.domain.entities.AsylumCase;\n import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PreSubmitCallbackResponse;\n import uk.gov.hmcts.reform.iacaseapi.infrastructure.security.AccessTokenProvider;\n \n@@ -40,17 +41,10 @@ public AsylumCase delegate(\n     ) {\n         requireNonNull(callback, \"callback must not be null\");\n         requireNonNull(endpoint, \"endpoint must not be null\");\n-\n         final String serviceAuthorizationToken = serviceAuthTokenGenerator.generate();\n         final String accessToken = accessTokenProvider.getAccessToken();\n \n-        HttpHeaders headers = new HttpHeaders();\n-        headers.setContentType(MediaType.APPLICATION_JSON);\n-        headers.set(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE);\n-        headers.set(SERVICE_AUTHORIZATION, serviceAuthorizationToken);\n-        headers.set(HttpHeaders.AUTHORIZATION, accessToken);\n-\n-        HttpEntity<Callback<AsylumCase>> requestEntity = new HttpEntity<>(callback, headers);\n+        HttpEntity<Callback<AsylumCase>> requestEntity = new HttpEntity<>(callback, setHeaders(serviceAuthorizationToken,accessToken));\n \n         try {\n \n@@ -76,4 +70,49 @@ public AsylumCase delegate(\n             );\n         }\n     }\n+\n+    public PostSubmitCallbackResponse delegatePostSubmit(\n+        Callback<AsylumCase> callback,\n+        String endpoint\n+    ) {\n+        requireNonNull(callback, \"callback must not be null\");\n+        requireNonNull(endpoint, \"endpoint must not be null\");\n+        final String serviceAuthorizationToken = serviceAuthTokenGenerator.generate();\n+        final String accessToken = accessTokenProvider.getAccessToken();\n+\n+        HttpEntity<Callback<AsylumCase>> requestEntity = new HttpEntity<>(callback, setHeaders(serviceAuthorizationToken,accessToken));\n+\n+        try {\n+\n+            return Optional\n+                .of(restTemplate\n+                    .exchange(\n+                        endpoint,\n+                        HttpMethod.POST,\n+                        requestEntity,\n+                        new ParameterizedTypeReference<PostSubmitCallbackResponse>() {\n+                        }\n+                    )\n+                )\n+                .map(ResponseEntity::getBody)\n+                .orElse(new PostSubmitCallbackResponse());\n+\n+        } catch (RestClientException e) {\n+\n+            throw new AsylumCaseServiceResponseException(\n+                \"Couldn't delegate callback to API: \" + endpoint,\n+                e\n+            );\n+        }\n+    }\n+\n+    private HttpHeaders setHeaders(String serviceAuthorizationToken, String accessToken) {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(MediaType.APPLICATION_JSON);\n+        headers.set(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE);\n+        headers.set(HttpHeaders.AUTHORIZATION, accessToken);\n+        headers.set(SERVICE_AUTHORIZATION, serviceAuthorizationToken);\n+        return headers;\n+    }\n+\n }"
  },
  {
    "sha": "00e76281817d4b2caae86dc48eb45d867d29f242",
    "filename": "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSender.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSender.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSender.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSender.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.reform.iacaseapi.infrastructure.clients;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+import uk.gov.hmcts.reform.iacaseapi.domain.service.PostNotificationSender;\n+\n+@Service\n+public class AsylumCasePostNotificationApiSender implements PostNotificationSender<AsylumCase> {\n+\n+    private final AsylumCaseCallbackApiDelegator asylumCaseCallbackApiDelegator;\n+    private final String notificationsApiEndpoint;\n+    private final String ccdSubmittedPath;\n+\n+    public AsylumCasePostNotificationApiSender(\n+        AsylumCaseCallbackApiDelegator asylumCaseCallbackApiDelegator,\n+        @Value(\"${notificationsApi.endpoint}\") String notificationsApiEndpoint,\n+        @Value(\"${notificationsApi.ccdSubmittedPath}\") String ccdSubmittedPath\n+    ) {\n+        this.asylumCaseCallbackApiDelegator = asylumCaseCallbackApiDelegator;\n+        this.notificationsApiEndpoint = notificationsApiEndpoint;\n+        this.ccdSubmittedPath = ccdSubmittedPath;\n+    }\n+\n+    @Override\n+    public PostSubmitCallbackResponse send(Callback<AsylumCase> callback) {\n+        requireNonNull(callback, \"callback must not be null\");\n+\n+        return asylumCaseCallbackApiDelegator.delegatePostSubmit(\n+            callback,\n+            notificationsApiEndpoint + ccdSubmittedPath\n+        );\n+    }\n+}"
  },
  {
    "sha": "6b75fc1c052a8a39121245d10852e7c483b79a3a",
    "filename": "src/main/resources/application.yaml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/resources/application.yaml",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/main/resources/application.yaml?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -136,6 +136,7 @@ documentsApi:\n notificationsApi:\n   endpoint: ${IA_CASE_NOTIFICATIONS_API_URL:http://127.0.0.1:8093}\n   aboutToSubmitPath: \"/asylum/ccdAboutToSubmit\"\n+  ccdSubmittedPath: \"/asylum/ccdSubmitted\"\n \n paymentApi:\n   endpoint: ${IA_CASE_PAYMENTS_API_URL:http://127.0.0.1:8096}\n@@ -167,7 +168,11 @@ security:\n   authorisedRoles:\n     - \"caseworker-ia\"\n     - \"citizen\"\n+\n+\n   roleEventAccess:\n+    caseworker-approver:\n+      - \"applyNocDecision\"\n     caseworker-ia-legalrep-solicitor:\n       - \"startAppeal\"\n       - \"editAppeal\"\n@@ -185,6 +190,7 @@ security:\n       - \"applyForFTPAAppellant\"\n       - \"updateLegalRepresentativesDetails\"\n       - \"makeAnApplication\"\n+      - \"applyNocDecision\"\n     caseworker-ia-caseofficer:\n       - \"sendDirection\"\n       - \"changeDirectionDueDate\""
  },
  {
    "sha": "e0c495d453d6cb1044eaec520515b48bd1b74180",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/EventTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/EventTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/EventTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/entities/ccd/EventTest.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -100,11 +100,12 @@ void has_correct_values() {\n         assertEquals(\"allocateTheCase\", Event.ALLOCATE_THE_CASE.toString());\n         assertEquals(\"recordRemissionDecision\", Event.RECORD_REMISSION_DECISION.toString());\n         assertEquals(\"manageFeeUpdate\", Event.MANAGE_FEE_UPDATE.toString());\n+        assertEquals(\"applyNocDecision\", Event.APPLY_NOC_DECISION.toString());\n \n     }\n \n     @Test\n     void if_this_test_fails_it_is_because_it_needs_updating_with_your_changes() {\n-        assertEquals(96, Event.values().length);\n+        assertEquals(97, Event.values().length);\n     }\n }"
  },
  {
    "sha": "30615624f2581e70305eabeab4ed55e35db13446",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandlerTest.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandlerTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandlerTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/domain/handlers/postsubmit/SendPostNotificationHandlerTest.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.reform.iacaseapi.domain.handlers.postsubmit;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.Event;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.*;\n+import uk.gov.hmcts.reform.iacaseapi.domain.service.PostNotificationSender;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+@SuppressWarnings(\"unchecked\")\n+class SendPostNotificationHandlerTest {\n+\n+    @Mock\n+    private PostNotificationSender<AsylumCase> postNotificationSender;\n+    @Mock\n+    private Callback<AsylumCase> callback;\n+\n+    private SendPostNotificationHandler sendPostNotificationHandler;\n+\n+    @BeforeEach\n+    public void setUp() {\n+\n+        sendPostNotificationHandler =\n+            new SendPostNotificationHandler(postNotificationSender);\n+    }\n+\n+    @Test\n+    void should_notify_case_officer_that_case_is_listed() {\n+\n+        when(callback.getEvent()).thenReturn(Event.APPLY_NOC_DECISION);\n+\n+        PostSubmitCallbackResponse expectedUpdatedCase = mock(PostSubmitCallbackResponse.class);\n+\n+        when(postNotificationSender.send(callback)).thenReturn(expectedUpdatedCase);\n+\n+        PostSubmitCallbackResponse callbackResponse =\n+            sendPostNotificationHandler.handle(callback);\n+\n+        assertNotNull(callbackResponse);\n+        assertEquals(expectedUpdatedCase, callbackResponse);\n+\n+        verify(postNotificationSender, times(1)).send(callback);\n+\n+        reset(callback);\n+        reset(postNotificationSender);\n+    }\n+\n+\n+    @Test\n+    void handling_should_throw_if_cannot_actually_handle() {\n+\n+        assertThatThrownBy(() -> sendPostNotificationHandler.handle(callback))\n+            .hasMessage(\"Cannot handle callback\")\n+            .isExactlyInstanceOf(IllegalStateException.class);\n+\n+        when(callback.getEvent()).thenReturn(Event.START_APPEAL);\n+        assertThatThrownBy(() -> sendPostNotificationHandler.handle(callback))\n+            .hasMessage(\"Cannot handle callback\")\n+            .isExactlyInstanceOf(IllegalStateException.class);\n+    }\n+\n+    @Test\n+    void it_can_handle_callback() {\n+\n+        for (Event event : Event.values()) {\n+            when(callback.getEvent()).thenReturn(event);\n+            boolean canHandle = sendPostNotificationHandler.canHandle(callback);\n+\n+            if (Arrays.asList(\n+                    Event.APPLY_NOC_DECISION\n+                ).contains(event)) {\n+\n+                assertTrue(canHandle);\n+            } else {\n+                assertFalse(canHandle);\n+            }\n+\n+            reset(callback);\n+        }\n+    }\n+\n+    @Test\n+    void should_not_allow_null_arguments() {\n+\n+        assertThatThrownBy(() -> sendPostNotificationHandler.canHandle(null))\n+            .hasMessage(\"callback must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+}"
  },
  {
    "sha": "d6c145c17aacde99ea5bccb4868f5b59f8d756a3",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcherTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/PostSubmitCallbackDispatcherTest.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -85,7 +85,7 @@ void should_dispatch_callback_to_first_eligible_handler_collecting_confirmation(\n         verify(handler2, times(1)).canHandle(callback);\n         verify(handler2, times(1)).handle(callback);\n \n-        verify(handler3, times(0)).canHandle(callback);\n+        verify(handler3, times(1)).canHandle(callback);\n         verify(handler3, times(0)).handle(callback);\n     }\n "
  },
  {
    "sha": "bedabe4707eeaa580d49f568ae7ec766e8f33fe8",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegatorTest.java",
    "status": "modified",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegatorTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegatorTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCaseCallbackApiDelegatorTest.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -29,6 +29,7 @@\n import uk.gov.hmcts.reform.authorisation.generators.AuthTokenGenerator;\n import uk.gov.hmcts.reform.iacaseapi.domain.entities.AsylumCase;\n import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PreSubmitCallbackResponse;\n import uk.gov.hmcts.reform.iacaseapi.infrastructure.security.AccessTokenProvider;\n \n@@ -49,6 +50,8 @@\n     private Callback<AsylumCase> callback;\n     @Mock\n     private PreSubmitCallbackResponse<AsylumCase> callbackResponse;\n+    @Mock\n+    private PostSubmitCallbackResponse postSubmitCallbackResponse;\n \n     private AsylumCaseCallbackApiDelegator asylumCaseCallbackApiDelegator;\n \n@@ -112,6 +115,56 @@ void should_call_document_api_to_generate_document() {\n         assertEquals(notifiedAsylumCase, actualAsylumCase);\n     }\n \n+    @Test\n+    void should_call_notifications_api_to_send_notifications_in_ccd_submitted() {\n+\n+        final String expectedServiceToken = \"ABCDEFG\";\n+        final String expectedAccessToken = \"HIJKLMN\";\n+        final PostSubmitCallbackResponse notifiedSubmitCallbackResponse = mock(PostSubmitCallbackResponse.class);\n+\n+        when(serviceAuthTokenGenerator.generate()).thenReturn(expectedServiceToken);\n+        when(accessTokenProvider.getAccessToken()).thenReturn(expectedAccessToken);\n+\n+        doReturn(new ResponseEntity<>(postSubmitCallbackResponse, HttpStatus.OK))\n+            .when(restTemplate)\n+            .exchange(\n+                eq(ENDPOINT),\n+                eq(HttpMethod.POST),\n+                any(HttpEntity.class),\n+                any(ParameterizedTypeReference.class)\n+            );\n+\n+        final PostSubmitCallbackResponse actualPostSubmitCallbackResponse = asylumCaseCallbackApiDelegator.delegatePostSubmit(callback, ENDPOINT);\n+\n+        ArgumentCaptor<HttpEntity> requestEntityCaptor = ArgumentCaptor.forClass(HttpEntity.class);\n+\n+        verify(restTemplate, times(1)).exchange(\n+            eq(ENDPOINT),\n+            eq(HttpMethod.POST),\n+            requestEntityCaptor.capture(),\n+            any(ParameterizedTypeReference.class)\n+        );\n+\n+        HttpEntity actualRequestEntity = requestEntityCaptor.getAllValues().get(0);\n+\n+        final String actualContentTypeHeader = actualRequestEntity.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);\n+        final String actualAcceptHeader = actualRequestEntity.getHeaders().getFirst(HttpHeaders.ACCEPT);\n+        final String actualServiceAuthorizationHeader =\n+            actualRequestEntity.getHeaders().getFirst(SERVICE_AUTHORIZATION);\n+        final String actualAuthorizationHeader = actualRequestEntity.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);\n+\n+        final Callback<AsylumCase> actualPostBody = (Callback<AsylumCase>) actualRequestEntity.getBody();\n+\n+        assertEquals(MediaType.APPLICATION_JSON_VALUE, actualContentTypeHeader);\n+        assertEquals(MediaType.APPLICATION_JSON_VALUE, actualAcceptHeader);\n+        assertEquals(expectedServiceToken, actualServiceAuthorizationHeader);\n+        assertEquals(expectedAccessToken, actualAuthorizationHeader);\n+        assertEquals(actualPostBody, callback);\n+\n+        assertEquals(notifiedSubmitCallbackResponse.getConfirmationHeader(), actualPostSubmitCallbackResponse.getConfirmationHeader());\n+        assertEquals(notifiedSubmitCallbackResponse.getConfirmationBody(), actualPostSubmitCallbackResponse.getConfirmationBody());\n+    }\n+\n     @Test\n     void should_not_allow_null_arguments() {\n \n@@ -124,6 +177,18 @@ void should_not_allow_null_arguments() {\n             .isExactlyInstanceOf(NullPointerException.class);\n     }\n \n+    @Test\n+    void should_not_allow_null_arguments_for_post_submitted() {\n+\n+        assertThatThrownBy(() -> asylumCaseCallbackApiDelegator.delegatePostSubmit(null, ENDPOINT))\n+            .hasMessage(\"callback must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+\n+        assertThatThrownBy(() -> asylumCaseCallbackApiDelegator.delegatePostSubmit(callback, null))\n+            .hasMessage(\"endpoint must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+\n     @Test\n     void wraps_http_server_exception_when_calling_documents_api() {\n \n@@ -148,6 +213,30 @@ void wraps_http_server_exception_when_calling_documents_api() {\n             .hasCause(underlyingException);\n     }\n \n+    @Test\n+    void wraps_http_client_exception_when_calling_notifications_api() {\n+\n+        HttpClientErrorException underlyingException = mock(HttpClientErrorException.class);\n+        final String expectedServiceToken = \"ABCDEFG\";\n+        final String expectedAccessToken = \"HIJKLMN\";\n+\n+        when(serviceAuthTokenGenerator.generate()).thenReturn(expectedServiceToken);\n+        when(accessTokenProvider.getAccessToken()).thenReturn(expectedAccessToken);\n+\n+        when(restTemplate\n+            .exchange(\n+                eq(ENDPOINT),\n+                eq(HttpMethod.POST),\n+                any(HttpEntity.class),\n+                any(ParameterizedTypeReference.class)\n+            )).thenThrow(underlyingException);\n+\n+        assertThatThrownBy(() -> asylumCaseCallbackApiDelegator.delegatePostSubmit(callback, ENDPOINT))\n+            .isExactlyInstanceOf(AsylumCaseServiceResponseException.class)\n+            .hasMessageContaining(\"Couldn't delegate callback to API\")\n+            .hasCause(underlyingException);\n+    }\n+\n     @Test\n     void wraps_http_client_exception_when_calling_documents_api() {\n "
  },
  {
    "sha": "bccc2764497b62c081cbff1783e08b7e6118112e",
    "filename": "src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSenderTest.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/hmcts/ia-case-api/blob/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSenderTest.java",
    "raw_url": "https://github.com/hmcts/ia-case-api/raw/b9aa0452db6709168eea13f61211c2b8e7d469eb/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSenderTest.java",
    "contents_url": "https://api.github.com/repos/hmcts/ia-case-api/contents/src/test/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/clients/AsylumCasePostNotificationApiSenderTest.java?ref=b9aa0452db6709168eea13f61211c2b8e7d469eb",
    "patch": "@@ -0,0 +1,80 @@\n+package uk.gov.hmcts.reform.iacaseapi.infrastructure.clients;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.AsylumCase;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.Callback;\n+import uk.gov.hmcts.reform.iacaseapi.domain.entities.ccd.callback.PostSubmitCallbackResponse;\n+\n+@ExtendWith(MockitoExtension.class)\n+@SuppressWarnings(\"unchecked\")\n+class AsylumCasePostNotificationApiSenderTest {\n+\n+    private static final String ENDPOINT = \"http://endpoint\";\n+    private static final String CCD_SUBMITTED_PATH = \"/path\";\n+\n+    @Mock\n+    private AsylumCaseCallbackApiDelegator asylumCaseCallbackApiDelegator;\n+    @Mock\n+    private Callback<AsylumCase> callback;\n+\n+    private AsylumCasePostNotificationApiSender asylumCasePostNotificationApiSender;\n+\n+    @BeforeEach\n+    public void setUp() {\n+\n+        asylumCasePostNotificationApiSender =\n+            new AsylumCasePostNotificationApiSender(\n+                asylumCaseCallbackApiDelegator,\n+                ENDPOINT,\n+                CCD_SUBMITTED_PATH\n+            );\n+    }\n+\n+    @Test\n+    void should_delegate_callback_to_downstream_api() {\n+\n+        final PostSubmitCallbackResponse notifiedAsylumCase = mock(PostSubmitCallbackResponse.class);\n+\n+        when(asylumCaseCallbackApiDelegator.delegatePostSubmit(callback, ENDPOINT + CCD_SUBMITTED_PATH))\n+            .thenReturn(notifiedAsylumCase);\n+\n+        final PostSubmitCallbackResponse postSubmitCallbackResponse = asylumCasePostNotificationApiSender.send(callback);\n+\n+        verify(asylumCaseCallbackApiDelegator, times(1))\n+            .delegatePostSubmit(callback, ENDPOINT + CCD_SUBMITTED_PATH);\n+\n+        assertEquals(notifiedAsylumCase, postSubmitCallbackResponse);\n+    }\n+\n+    @Test\n+    public void should_delegate_about_to_start_callback_to_downstream_api() {\n+\n+        final PostSubmitCallbackResponse notifiedAsylumCase = mock(PostSubmitCallbackResponse.class);\n+\n+        when(asylumCaseCallbackApiDelegator.delegatePostSubmit(callback, ENDPOINT + CCD_SUBMITTED_PATH))\n+            .thenReturn(notifiedAsylumCase);\n+\n+        final PostSubmitCallbackResponse actualAsylumCase = asylumCasePostNotificationApiSender.send(callback);\n+\n+        verify(asylumCaseCallbackApiDelegator, times(1))\n+            .delegatePostSubmit(callback, ENDPOINT + CCD_SUBMITTED_PATH);\n+\n+        assertEquals(notifiedAsylumCase, actualAsylumCase);\n+    }\n+\n+    @Test\n+    void should_not_allow_null_arguments() {\n+\n+        assertThatThrownBy(() -> asylumCasePostNotificationApiSender.send(null))\n+            .hasMessage(\"callback must not be null\")\n+            .isExactlyInstanceOf(NullPointerException.class);\n+    }\n+}"
  }
]
