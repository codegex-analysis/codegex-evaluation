[
  {
    "sha": "4969d4f5a1a066ea7f3f483b2975bb887c598fd8",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/7719cb3022fffb5e1fdf0dfd70a5506675e88dd3/.gitignore",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/7719cb3022fffb5e1fdf0dfd70a5506675e88dd3/.gitignore",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/.gitignore?ref=7719cb3022fffb5e1fdf0dfd70a5506675e88dd3",
    "patch": "@@ -2,3 +2,6 @@\n /.settings/\n /.classpath\n /.project\n+.idea\n+.idea\n+lab2_1.iml\n\\ No newline at end of file"
  },
  {
    "sha": "6f30dce2695d44762fc85bff8b63e7267d3ff2d3",
    "filename": "src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/7719cb3022fffb5e1fdf0dfd70a5506675e88dd3/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/7719cb3022fffb5e1fdf0dfd70a5506675e88dd3/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/main/java/edu/iis/mto/bsearch/BinarySearch.java?ref=7719cb3022fffb5e1fdf0dfd70a5506675e88dd3",
    "patch": "@@ -27,6 +27,9 @@ public static SearchResult search(int key, int[] seq) {\n         int center;\n         SearchResult result = new SearchResult();\n \n+        if(seq.length==0)\n+            throw new IllegalArgumentException(\"Empty sequence\");\n+\n         while (start <= end) {\n             center = (start + end) / 2;\n             if (seq[center] == key) {"
  },
  {
    "sha": "f193a588e527649bbfb26f12730113841665c7e2",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 72,
    "deletions": 5,
    "changes": 77,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/7719cb3022fffb5e1fdf0dfd70a5506675e88dd3/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/7719cb3022fffb5e1fdf0dfd70a5506675e88dd3/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=7719cb3022fffb5e1fdf0dfd70a5506675e88dd3",
    "patch": "@@ -1,19 +1,86 @@\n package edu.iis.mto.bsearch;\n \n-import static org.junit.jupiter.api.Assertions.*;\n-\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import static org.junit.jupiter.api.Assertions.*;\n \n class BinarySearchTest {\n \n+    private final int NOT_FOUND = -1;\n+    private SearchResult searchResult;\n+    private int[] arrayOfOneElements = new int[]{1};\n+    private int[] arrayOfFiveElements = new int[]{1, 2, 3, 4, 5};\n+    private int[] arrayOfZeroElements = new int[]{};\n+\n     @BeforeEach\n-    void setUp() throws Exception {}\n+    void setUp() throws Exception {\n+    }\n+\n+    @Test\n+    void shouldFindInOneElementSequence() {\n+        int expectedPosition = 1;\n+\n+        searchResult = BinarySearch.search(1, arrayOfOneElements);\n+        assertTrue(searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void shouldNotFindInOneElementSequence() {\n+        searchResult = BinarySearch.search(2, arrayOfOneElements);\n+        assertFalse(searchResult.isFound());\n+        assertEquals(NOT_FOUND, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void shouldBeTheFirstElement() {\n+        int expectedPosition = 1;\n+\n+        searchResult = BinarySearch.search(1, arrayOfFiveElements);\n+        assertTrue(searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+    }\n \n     @Test\n-    void test() {\n-        fail(\"Not yet implemented\");\n+    void shouldBeTheLastElement() {\n+        int expectedPosition = arrayOfFiveElements.length;\n+\n+        searchResult = BinarySearch.search(5, arrayOfFiveElements);\n+        assertTrue(searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void shouldBeTheMiddleElement() {\n+        int expectedPosition = 3;\n+\n+        searchResult = BinarySearch.search(3, arrayOfFiveElements);\n+        assertTrue(searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void shouldNotFindInSequenceOfSeveralNumbers() {\n+        searchResult = BinarySearch.search(10, arrayOfFiveElements);\n+        assertFalse(searchResult.isFound());\n+        assertEquals(NOT_FOUND, searchResult.getPosition());\n     }\n \n+    @Test\n+    void passingNullShouldThrowAnException() {\n+        assertThrows(NullPointerException.class, () -> BinarySearch.search(10, null));\n+    }\n+\n+    @Test\n+    void passingNegativeNumberShouldNotFind() {\n+        searchResult = BinarySearch.search(-1, arrayOfFiveElements);\n+        assertFalse(searchResult.isFound());\n+        assertEquals(NOT_FOUND, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void passingEmptyTableShouldThrowAnException() {\n+        assertThrows(IllegalArgumentException.class, () -> BinarySearch.search(10, arrayOfZeroElements));\n+    }\n }"
  }
]
