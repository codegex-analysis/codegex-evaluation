[
  {
    "sha": "5b5dc16a32497519724880e17298d5b0861face6",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/bdfce94fca8536e0121e7c2f5c7d8f7fc75b8da5/.gitignore",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/bdfce94fca8536e0121e7c2f5c7d8f7fc75b8da5/.gitignore",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/.gitignore?ref=bdfce94fca8536e0121e7c2f5c7d8f7fc75b8da5",
    "patch": "@@ -2,3 +2,5 @@\n /.settings/\n /.classpath\n /.project\n+/.idea\n+lab2_1.iml"
  },
  {
    "sha": "9aeade64a544318fb28ef72c219bcb50895179b7",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 60,
    "deletions": 2,
    "changes": 62,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/bdfce94fca8536e0121e7c2f5c7d8f7fc75b8da5/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/bdfce94fca8536e0121e7c2f5c7d8f7fc75b8da5/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=bdfce94fca8536e0121e7c2f5c7d8f7fc75b8da5",
    "patch": "@@ -12,8 +12,66 @@\n     void setUp() throws Exception {}\n \n     @Test\n-    void test() {\n-        fail(\"Not yet implemented\");\n+    public void isInTheSequence() {\n+        int[] array = {1, 2, 3, 4};\n+        int key = 3;\n+        SearchResult search = BinarySearch.search(key, array);\n+        assertEquals(key, search.getPosition());\n+        assertTrue(search.isFound());\n     }\n \n+    @Test\n+    public void isNotInTheSequence() {\n+        int[] array = {1, 2, 3, 4};\n+        int key = 6;\n+        SearchResult search = BinarySearch.search(key, array);\n+        assertEquals(-1, search.getPosition());\n+        assertFalse(search.isFound());\n+    }\n+\n+    @Test\n+    public void isTheFirstElementInTheSequence() {\n+        int[] array = {1, 2, 3, 4};\n+        int key = 1;\n+        SearchResult search = BinarySearch.search(key, array);\n+        assertEquals(1, search.getPosition());\n+        assertTrue(search.isFound());\n+    }\n+\n+    @Test\n+    public void isTheLastElementInTheSequence() {\n+        int[] array = {1, 2, 3, 4};\n+        int key = 2;\n+        SearchResult search = BinarySearch.search(key, array);\n+        assertEquals(key, search.getPosition());\n+        assertTrue(search.isFound());\n+    }\n+\n+    @Test\n+    public void isTheMiddleElementInTheOddSequence() {\n+        int[] array = {1, 2, 3, 4, 5};\n+        int key = 3;\n+        SearchResult search = BinarySearch.search(key, array);\n+        assertEquals(3, search.getPosition());\n+        assertTrue(search.isFound());\n+    }\n+\n+    @Test\n+    public void isTheMiddleElementInTheEvenSequence() {\n+        int[] array = {1, 2, 3, 4};\n+        int key = 2;\n+        SearchResult search = BinarySearch.search(key, array);\n+        assertEquals(2, search.getPosition());\n+        assertTrue(search.isFound());\n+    }\n+\n+    @Test\n+    public void isTheSequenceEmpty()\n+    {\n+        int[] array = {};\n+        int key = -3;\n+        SearchResult search = BinarySearch.search(key,array);\n+        assertEquals(-1,search.getPosition());\n+        assertFalse(search.isFound());\n+    }\n }"
  }
]
