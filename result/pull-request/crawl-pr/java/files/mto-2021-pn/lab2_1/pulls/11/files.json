[
  {
    "sha": "e5315527417deccfff59f338eac6e3c22a5bfbd3",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 57,
    "deletions": 3,
    "changes": 60,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/e8dc2b3dd26ea28c22b0506859957f9eb30ab6a3/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/e8dc2b3dd26ea28c22b0506859957f9eb30ab6a3/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=e8dc2b3dd26ea28c22b0506859957f9eb30ab6a3",
    "patch": "@@ -1,19 +1,73 @@\n package edu.iis.mto.bsearch;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.jupiter.api.Assertions.*;\n \n+import org.hamcrest.Matchers;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n \n class BinarySearchTest {\n \n+    int list[];\n+    SearchResult searchResult;\n+\n     @BeforeEach\n-    void setUp() throws Exception {}\n+    void setUp() throws Exception {\n+        searchResult = new SearchResult();\n+    }\n+\n+    @Test\n+    void singleElmExistsInSeq() {\n+        list = new int[]{5};\n+        searchResult.setPosition(1);\n+        assertThat(BinarySearch.search(5, list), Matchers.equalTo(searchResult));\n+    }\n+\n+    @Test\n+    void singleElmNotInSeq(){\n+        list = new int[]{5};\n+        searchResult.setPosition(-1);\n+        assertThat(BinarySearch.search(3, list), Matchers.equalTo(searchResult));\n+    }\n+\n+    @Test\n+    void elmFirstInSeq() {\n+        list = new int[]{5, 6, 7, 8, 9};\n+        searchResult.setPosition(1);\n+        assertThat(BinarySearch.search(5, list), Matchers.equalTo(searchResult));\n+    }\n+\n+    @Test\n+    void elmLastInSeq() {\n+        list = new int[]{5, 6, 7, 8, 9};\n+        searchResult.setPosition(list.length);\n+        assertThat(BinarySearch.search(9, list), Matchers.equalTo(searchResult));\n+    }\n+\n+    @Test\n+    void elmMiddleInSeq() {\n+        list = new int[]{5, 6, 7, 8, 9};\n+        searchResult.setPosition((int)list.length/2 + 1);\n+        assertThat(BinarySearch.search(7, list), Matchers.equalTo(searchResult));\n+    }\n+\n+    @Test\n+    void elmNotInSeq() {\n+        list = new int[]{5, 6, 7, 8, 9};\n+        searchResult.setPosition(-1);\n+        assertThat(BinarySearch.search(10, list), Matchers.equalTo(searchResult));\n+    }\n \n     @Test\n-    void test() {\n-        fail(\"Not yet implemented\");\n+    void emptySeq(){\n+        list = new int[]{};\n+        searchResult.setPosition(-1);\n+        assertThat(BinarySearch.search(10, list), Matchers.equalTo(searchResult));\n     }\n \n }"
  }
]
