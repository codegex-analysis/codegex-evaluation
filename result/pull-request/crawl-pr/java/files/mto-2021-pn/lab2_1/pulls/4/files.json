[
  {
    "sha": "d89b296b4e66d23d21a6d1ad999b0176bdb8a8a1",
    "filename": "src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/76c1a2fb1b9283ee8140dac272e7fabb12ccf579/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/76c1a2fb1b9283ee8140dac272e7fabb12ccf579/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/main/java/edu/iis/mto/bsearch/BinarySearch.java?ref=76c1a2fb1b9283ee8140dac272e7fabb12ccf579",
    "patch": "@@ -22,6 +22,10 @@ private BinarySearch() {}\n      *         sekwencji, jezeli nie znaleziony -1)\n      */\n     public static SearchResult search(int key, int[] seq) {\n+        if(seq.length == 0) {\n+            throw new IllegalArgumentException(\"Sequence should not be empty\");\n+        }\n+\n         int start = 0;\n         int end = seq.length - 1;\n         int center;\n@@ -30,7 +34,7 @@ public static SearchResult search(int key, int[] seq) {\n         while (start <= end) {\n             center = (start + end) / 2;\n             if (seq[center] == key) {\n-                result.setPosition(center + 1);\n+                result.setPosition(center);\n                 break;\n             } else {\n                 if (seq[center] < key) {"
  },
  {
    "sha": "1884f29bfc2cbb13277069ff3d5aebdfb2c32372",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 121,
    "deletions": 1,
    "changes": 122,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/76c1a2fb1b9283ee8140dac272e7fabb12ccf579/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/76c1a2fb1b9283ee8140dac272e7fabb12ccf579/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=76c1a2fb1b9283ee8140dac272e7fabb12ccf579",
    "patch": "@@ -5,7 +5,6 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-\n class BinarySearchTest {\n \n     @BeforeEach\n@@ -16,4 +15,125 @@ void test() {\n         fail(\"Not yet implemented\");\n     }\n \n+    @Test\n+    void shouldFindElementInSingleElementSequence() {\n+        // given\n+        int key = 12;\n+        int[] sequence = {12};\n+\n+        boolean expectedFindStatus = true;\n+        int expectedPosition = 0;\n+\n+        // when\n+        SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+        assertEquals(expectedFindStatus, searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+        assertEquals(key, sequence[searchResult.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldNotFindElementInSingleElementSequence() {\n+        // given\n+        int key = 12;\n+        int[] sequence = {2};\n+\n+        boolean expectedFindStatus = false;\n+        int expectedPosition = -1;\n+\n+        // when\n+        SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+        assertEquals(expectedFindStatus, searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void shouldFindFirstElementInMultiElementSequence() {\n+        // given\n+        int key = 1;\n+        int[] sequence = {1, 3, 7, 12, 35, 60};\n+\n+        boolean expectedFindStatus = true;\n+        int expectedPosition = 0;\n+\n+        // when\n+        SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+        assertEquals(expectedFindStatus, searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+        assertEquals(key, sequence[searchResult.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldFindLastElementInMultiElementSequence() {\n+        // given\n+        int key = 60;\n+        int[] sequence = {1, 3, 7, 12, 35, 60};\n+\n+        boolean expectedFindStatus = true;\n+        int expectedPosition = 5;\n+\n+        // when\n+        SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+        assertEquals(expectedFindStatus, searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+        assertEquals(key, sequence[searchResult.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldFindMiddleElementInMultiElementSequence() {\n+        // given\n+        int key = 12;\n+        int[] sequence = {1, 3, 7, 12, 35, 60, 80};\n+\n+        boolean expectedFindStatus = true;\n+        int expectedPosition = 3;\n+\n+        // when\n+        SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+        assertEquals(expectedFindStatus, searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+        assertEquals(key, sequence[searchResult.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldNotFindElementInMultiElementSequence() {\n+        // given\n+        int key = 32;\n+        int[] sequence = {1, 3, 7, 12, 35, 60, 80};\n+\n+        boolean expectedFindStatus = false;\n+        int expectedPosition = -1;\n+\n+        // when\n+        SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+        assertEquals(expectedFindStatus, searchResult.isFound());\n+        assertEquals(expectedPosition, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void shouldThrowIllegalArgumentExceptionWhenSequenceIsEmpty() {\n+        // given\n+        int key = 32;\n+        int[] sequence = {};\n+\n+        // when\n+        try {\n+            SearchResult searchResult = BinarySearch.search(key, sequence);\n+\n+        // then\n+            fail(\"Should have thrown IllegalArgumentException\");\n+        } catch (IllegalArgumentException ignored) { }\n+    }\n+\n }"
  }
]
