[
  {
    "sha": "b9de5048378f0f95728728c786815036ce2cc13f",
    "filename": "src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/4a34c033029d11e74744e55255a1781ede8a7745/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/4a34c033029d11e74744e55255a1781ede8a7745/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/main/java/edu/iis/mto/bsearch/BinarySearch.java?ref=4a34c033029d11e74744e55255a1781ede8a7745",
    "patch": "@@ -22,6 +22,8 @@ private BinarySearch() {}\n      *         sekwencji, jezeli nie znaleziony -1)\n      */\n     public static SearchResult search(int key, int[] seq) {\n+        if (seq.length == 0)\n+            throw new IllegalArgumentException();\n         int start = 0;\n         int end = seq.length - 1;\n         int center;"
  },
  {
    "sha": "afa713d5599d09253295a2747bc2c06d413027a1",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 70,
    "deletions": 3,
    "changes": 73,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/4a34c033029d11e74744e55255a1781ede8a7745/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/4a34c033029d11e74744e55255a1781ede8a7745/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=4a34c033029d11e74744e55255a1781ede8a7745",
    "patch": "@@ -2,18 +2,85 @@\n \n import static org.junit.jupiter.api.Assertions.*;\n \n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n \n class BinarySearchTest {\n \n+    private final int[] singleSeq = {16};\n+    private final int[] seq = {10, 34, 123, 767};\n+    private final int[] bigSeq = {4, 67, 88, 517, 900, 8912};\n+    private SearchResult searchResult;\n+\n     @BeforeEach\n-    void setUp() throws Exception {}\n+    void setUp() throws Exception {\n+    }\n+\n+\n+    @Test\n+    void keyInSingleSeq() {\n+        int key = 16;\n+        searchResult = BinarySearch.search(key, singleSeq);\n+        assertTrue(searchResult.isFound());\n+    }\n+\n+    @Test\n+    void keyNotInSingleSeq() {\n+        int key = 786;\n+        searchResult = BinarySearch.search(key, singleSeq);\n+        assertFalse(searchResult.isFound());\n+    }\n+\n+    @Test\n+    void keyAsFirstElement() {\n+        int key = 10;\n+        searchResult = BinarySearch.search(key, seq);\n+        assertTrue(searchResult.isFound());\n+        assertEquals(1, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void keyAsLastElement() {\n+        int key = 767;\n+        searchResult = BinarySearch.search(key, seq);\n+        assertTrue(searchResult.isFound());\n+        assertEquals(seq.length, searchResult.getPosition());\n+    }\n+\n+    @Test\n+    void keyInSeq() {\n+        int key = 123;\n+        searchResult = BinarySearch.search(key, seq);\n+        assertTrue(searchResult.isFound());\n+    }\n+\n+    @Test\n+    void keyNotInSeq() {\n+        int key = 99;\n+        searchResult = BinarySearch.search(key, seq);\n+        assertFalse(searchResult.isFound());\n+    }\n+\n+    @Test\n+    void keyAsMidElement() {\n+        int key = 88;\n+        searchResult = BinarySearch.search(key, bigSeq);\n+        assertEquals(true, searchResult.isFound());\n+        assertEquals(bigSeq.length / 2, searchResult.getPosition());\n+    }\n+\n \n     @Test\n-    void test() {\n-        fail(\"Not yet implemented\");\n+    void checkEmptySeq() {\n+        int key = -99;\n+        int seq[] = {};\n+        Assertions.assertThrows(\n+                IllegalArgumentException.class,\n+                () -> {\n+                    BinarySearch.search(key, seq);\n+                });\n     }\n \n }"
  }
]
