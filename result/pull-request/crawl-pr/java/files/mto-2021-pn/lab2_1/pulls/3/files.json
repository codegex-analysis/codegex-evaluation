[
  {
    "sha": "c49fba0f88dcd3d2a6cd6348de5f5448cb869ec3",
    "filename": "src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/adf4e68397bed19d446f463f0dddbf37abe475be/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/adf4e68397bed19d446f463f0dddbf37abe475be/src/main/java/edu/iis/mto/bsearch/BinarySearch.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/main/java/edu/iis/mto/bsearch/BinarySearch.java?ref=adf4e68397bed19d446f463f0dddbf37abe475be",
    "patch": "@@ -3,6 +3,11 @@\n  */\n package edu.iis.mto.bsearch;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n /**\n  * Klasa implementujÄ…ca wyszukiwanie binarne\n  *\n@@ -22,6 +27,10 @@ private BinarySearch() {}\n      *         sekwencji, jezeli nie znaleziony -1)\n      */\n     public static SearchResult search(int key, int[] seq) {\n+        if (seq.length == 0) throw new IllegalArgumentException();\n+        if (isSequenceLacksOfDuplicates(seq) == false) throw new IllegalArgumentException();\n+        if (isSequenceSortedAscending(seq) == false) throw new IllegalArgumentException();\n+\n         int start = 0;\n         int end = seq.length - 1;\n         int center;\n@@ -30,7 +39,7 @@ public static SearchResult search(int key, int[] seq) {\n         while (start <= end) {\n             center = (start + end) / 2;\n             if (seq[center] == key) {\n-                result.setPosition(center + 1);\n+                result.setPosition(center);\n                 break;\n             } else {\n                 if (seq[center] < key) {\n@@ -43,4 +52,19 @@ public static SearchResult search(int key, int[] seq) {\n         return result;\n     }\n \n+    private static boolean isSequenceSortedAscending(int[] seq) {\n+        for (int i = 1; i < seq.length; i++) {\n+            if (seq[i] <= seq[i-1]) return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private static boolean isSequenceLacksOfDuplicates(int[] seq) {\n+        Set<Integer> set = Arrays.stream(seq).boxed().collect(Collectors.toSet());\n+\n+        if (set.size() != seq.length) return false;\n+\n+        return true;\n+    }\n }"
  },
  {
    "sha": "19725f29a4dd1bfe06853eb9bc9f593e41efae6f",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/adf4e68397bed19d446f463f0dddbf37abe475be/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/adf4e68397bed19d446f463f0dddbf37abe475be/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=adf4e68397bed19d446f463f0dddbf37abe475be",
    "patch": "@@ -16,4 +16,121 @@ void test() {\n         fail(\"Not yet implemented\");\n     }\n \n+    @Test\n+    void shouldFindElementInOneElementArray() {\n+        int key = 1;\n+        int[] seq = {1};\n+        int expectedPosition = 0;\n+        boolean expectedFound = true;\n+\n+        SearchResult result = BinarySearch.search(key, seq);\n+\n+        assertEquals(expectedPosition, result.getPosition());\n+        assertEquals(expectedFound, result.isFound());\n+        assertEquals(key, seq[result.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldNotFindElementInOneElementArray() {\n+        int key = 1;\n+        int[] seq = {2};\n+        int expectedPosition = -1;\n+        boolean expectedFound = false;\n+\n+        SearchResult result = BinarySearch.search(key, seq);\n+\n+        assertEquals(expectedPosition, result.getPosition());\n+        assertEquals(expectedFound, result.isFound());\n+    }\n+\n+    @Test\n+    void shouldFindElementWhichIsTheFirstElementInMultiElementArray() {\n+        int key = 1;\n+        int[] seq = {1, 2};\n+        int expectedPosition = 0;\n+        boolean expectedFound = true;\n+\n+        SearchResult result = BinarySearch.search(key, seq);\n+\n+        assertEquals(expectedPosition, result.getPosition());\n+        assertEquals(expectedFound, result.isFound());\n+        assertEquals(key, seq[result.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldFindElementWhichIsTheLastElementInMultiElementArray() {\n+        int key = 2;\n+        int[] seq = {1, 2};\n+        int expectedPosition = 1;\n+        boolean expectedFound = true;\n+\n+        SearchResult result = BinarySearch.search(key, seq);\n+\n+        assertEquals(expectedPosition, result.getPosition());\n+        assertEquals(expectedFound, result.isFound());\n+        assertEquals(key, seq[result.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldFindElementWhichIsInTheMiddleElementInMultiElementArray() {\n+        int key = 2;\n+        int[] seq = {1, 2, 3};\n+        int expectedPosition = 1;\n+        boolean expectedFound = true;\n+\n+        SearchResult result = BinarySearch.search(key, seq);\n+\n+        assertEquals(expectedPosition, result.getPosition());\n+        assertEquals(expectedFound, result.isFound());\n+        assertEquals(key, seq[result.getPosition()]);\n+    }\n+\n+    @Test\n+    void shouldNotFindElementInMultiElementArray() {\n+        int key = 0;\n+        int[] seq = {1, 2};\n+        int expectedPosition = -1;\n+        boolean expectedFound = false;\n+\n+        SearchResult result = BinarySearch.search(key, seq);\n+\n+        assertEquals(expectedPosition, result.getPosition());\n+        assertEquals(expectedFound, result.isFound());\n+    }\n+\n+    @Test\n+    void shouldThrowIllegalArgumentExceptionWhenSequenceIsEmpty() {\n+        int key = 1;\n+        int[] seq = {};\n+\n+        try {\n+            BinarySearch.search(key, seq);\n+\n+            fail(\"Should have thrown IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+\n+    @Test\n+    void shouldThrowIllegalArgumentExceptionWhenSequenceIsNotSorted() {\n+        int key = 1;\n+        int[] seq = {3, 2, 1};\n+\n+        try {\n+            BinarySearch.search(key, seq);\n+\n+            fail(\"Should have thrown IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+\n+    @Test\n+    void shouldThrowIllegalArgumentExceptionWhenSequenceContainsDuplicates() {\n+        int key = 1;\n+        int[] seq = {1, 1, 2};\n+\n+        try {\n+            BinarySearch.search(key, seq);\n+\n+            fail(\"Should have thrown IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n }"
  }
]
