[
  {
    "sha": "8262614307af5573f2c2adfeee32996d43b6bc5f",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/c0da15ec35d9244dfdebd5881a59dfb8dfc9907b/.gitignore",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/c0da15ec35d9244dfdebd5881a59dfb8dfc9907b/.gitignore",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/.gitignore?ref=c0da15ec35d9244dfdebd5881a59dfb8dfc9907b",
    "patch": "@@ -2,3 +2,5 @@\n /.settings/\n /.classpath\n /.project\n+.idea\n+lab2_1.iml\n\\ No newline at end of file"
  },
  {
    "sha": "976767d6fedba3f1ed7756e1b087c8baa476fe44",
    "filename": "src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "status": "modified",
    "additions": 67,
    "deletions": 2,
    "changes": 69,
    "blob_url": "https://github.com/mto-2021-pn/lab2_1/blob/c0da15ec35d9244dfdebd5881a59dfb8dfc9907b/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "raw_url": "https://github.com/mto-2021-pn/lab2_1/raw/c0da15ec35d9244dfdebd5881a59dfb8dfc9907b/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java",
    "contents_url": "https://api.github.com/repos/mto-2021-pn/lab2_1/contents/src/test/java/edu/iis/mto/bsearch/BinarySearchTest.java?ref=c0da15ec35d9244dfdebd5881a59dfb8dfc9907b",
    "patch": "@@ -5,15 +5,80 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import javax.swing.*;\n+\n \n class BinarySearchTest {\n \n     @BeforeEach\n     void setUp() throws Exception {}\n \n     @Test\n-    void test() {\n-        fail(\"Not yet implemented\");\n+    public void element_is_in_array()\n+    {\n+        int[] testArray={1};\n+        SearchResult a = BinarySearch.search(1, testArray);\n+        assertEquals(true, a.isFound());\n+        assertEquals(1, a.getPosition());\n+    }\n+\n+    @Test\n+    public void element_is_not_in_array()\n+    {\n+        int[] testArray={1};\n+        SearchResult a = BinarySearch.search(1, testArray);\n+        assertEquals(false, a.isFound());\n+        assertEquals(-1, a.getPosition());\n+    }\n+\n+    @Test\n+    public void element_is_first_in_array()\n+    {\n+        int[] testArray={1,3,4,7,8,10};\n+        SearchResult a = BinarySearch.search(1, testArray);\n+        assertEquals(true, a.isFound());\n+        assertEquals(1, a.getPosition());\n+    }\n+\n+    @Test\n+    public void element_is_last_in_array()\n+    {\n+        int[] testArray={1,3,4,7,8,10};\n+        SearchResult a = BinarySearch.search(10, testArray);\n+        assertEquals(true, a.isFound());\n+        assertEquals(a.getPosition(), testArray.length);\n+    }\n+\n+    @Test\n+    public void element_is_center_in_array()\n+    {\n+        int[] testArray={1,3,4,7,8,10,21};\n+        SearchResult a = BinarySearch.search(7, testArray);\n+        assertEquals(true, a.isFound());\n+        assertEquals(4, a.getPosition());\n+    }\n+\n+    @Test\n+    public void element_is_not_in_multi_array()\n+    {\n+        int[] testArray={1,3,4,7,8,10,21};\n+        SearchResult a = BinarySearch.search(99, testArray);\n+        assertEquals(false, a.isFound());\n+        assertEquals(-1, a.getPosition());\n+    }\n+\n+    @Test\n+    public void array_is_null()\n+    {\n+        int[] testArray=null;\n+        try{\n+            SearchResult a = BinarySearch.search(99, testArray);\n+        }\n+        catch (Exception x)\n+        {\n+            //ignore\n+            System.out.println(x.getMessage());\n+        }\n     }\n \n }"
  }
]
