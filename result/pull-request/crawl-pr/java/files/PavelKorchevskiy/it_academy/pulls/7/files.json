[
  {
    "sha": "b49c3c952665a4a2ae33d16197b9201bc837a001",
    "filename": "controller/src/main/java/org/example/controller/ControllerForChangeRating.java",
    "status": "modified",
    "additions": 14,
    "deletions": 21,
    "changes": 35,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/ControllerForChangeRating.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/ControllerForChangeRating.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/controller/ControllerForChangeRating.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -11,13 +11,13 @@\n import org.example.constans.Attributes;\n import org.example.constans.Links;\n import org.example.constans.Parameters;\n-import org.example.excetions.IllegalDataException;\n+import org.example.exceptions.IllegalDataException;\n import org.example.model.Student;\n import org.example.model.Teacher;\n-import org.example.repository.interfaces.RepositoryForTeachersInterface;\n-import org.example.repository.producer.StudentProducer;\n-import org.example.repository.producer.TeacherProducer;\n import org.example.service.Checking;\n+import org.example.service.SaveService;\n+import org.example.service.StudentService;\n+import org.example.service.Supplier;\n import org.example.service.TeacherService;\n import org.example.subject.Subject;\n import org.slf4j.Logger;\n@@ -37,24 +37,17 @@ protected void service(HttpServletRequest req, HttpServletResponse resp)\n     int id = Checking.getId(req.getParameter(Parameters.ID_STUDENT));\n     log.info(String.format(\"subject - %s\", subject.toString()));\n     log.info(String.format(\"id - %s\", id));\n-    RepositoryForTeachersInterface repository = TeacherProducer.getRepository();\n-    Optional<Teacher> teacherOptional = repository\n-        .findByLoginAndPassword(String.valueOf(session.getAttribute(Attributes.LOGIN)),\n-            String.valueOf(session.getAttribute(Attributes.PASSWORD)));\n-    if (teacherOptional.isPresent()) {\n-      Teacher teacher = teacherOptional.get();\n-      Optional<Student> studentOptional = TeacherService.getStudentById(teacher, id);\n-      if (studentOptional.isPresent() && TeacherService.getGroup(teacher).isPresent()\n-          && TeacherService.getGroup(teacher).get().getSubjects().contains(subject)) {\n-        Student student = studentOptional.get();\n-        student.putRating(subject, rating);\n-        StudentProducer.getRepository().save(student);\n-      } else {\n-        throw new IllegalDataException(\n-            \"Student with this subject doesn't exist or You can't put him rating\");\n-      }\n+    String login = String.valueOf(session.getAttribute(Attributes.LOGIN));\n+    String password = String.valueOf(session.getAttribute(Attributes.PASSWORD));\n+    Teacher teacher = Supplier.getTeacherWithLoginAngPassword(login, password);\n+    Optional<Student> studentOptional = TeacherService.getStudentById(teacher, id);\n+    if (studentOptional.isPresent() && TeacherService.getGroup(teacher).isPresent()\n+        && TeacherService.getGroup(teacher).get().getSubjects().contains(subject)) {\n+      Student student = studentOptional.get();\n+      SaveService.saveStudent(StudentService.putRating(student, subject, rating));\n     } else {\n-      throw new IllegalDataException(\"Teacher with this id doesn't exist\");\n+      throw new IllegalDataException(\n+          \"Student with this subject doesn't exist or You can't put him rating\");\n     }\n     req.getRequestDispatcher(\"pages/TeacherPage.jsp\").forward(req, resp);\n   }"
  },
  {
    "sha": "ebd7e1abd6e869b959f086dbca78f5facb641c05",
    "filename": "controller/src/main/java/org/example/controller/ControllerForShowAverageSalary.java",
    "status": "modified",
    "additions": 2,
    "deletions": 9,
    "changes": 11,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/ControllerForShowAverageSalary.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/ControllerForShowAverageSalary.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/controller/ControllerForShowAverageSalary.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -9,8 +9,8 @@\n import javax.servlet.http.HttpSession;\n import org.example.constans.Attributes;\n import org.example.constans.Parameters;\n-import org.example.excetions.IllegalFormatException;\n import org.example.service.AverageSalary;\n+import org.example.service.Checking;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -24,14 +24,7 @@ protected void service(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n     HttpSession session = req.getSession();\n     //при неподходящем числе выведем информацию за один месяц\n-    int numberOfMonths;\n-    try {\n-      numberOfMonths = Integer.parseInt(req.getParameter(Parameters.NUMB_MONTHS));\n-      log.info(\"number of months \" + numberOfMonths);\n-    } catch (NumberFormatException e) {\n-      log.error(\"not a number in number of months\");\n-      throw new IllegalFormatException(\"not a number in number of months\");\n-    }\n+    int numberOfMonths = Checking.getNumber(req.getParameter(Parameters.NUMB_MONTHS));\n     session.setAttribute(Attributes.AVERAGE_SALARY,\n         AverageSalary.showAverageSalaryForAllTeacher(numberOfMonths));\n     req.getRequestDispatcher(\"pages/AdminAverageSalary.jsp\").forward(req, resp);"
  },
  {
    "sha": "6887aeec51676b3ef50cc2b3ff6cb285608fb68e",
    "filename": "controller/src/main/java/org/example/controller/ControllerForShowRating.java",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/b4c66cf3c93af60d62d22fd776405120915d008c/controller/src/main/java/org/example/controller/ControllerForShowRating.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/b4c66cf3c93af60d62d22fd776405120915d008c/controller/src/main/java/org/example/controller/ControllerForShowRating.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/controller/ControllerForShowRating.java?ref=b4c66cf3c93af60d62d22fd776405120915d008c",
    "patch": "@@ -1,52 +0,0 @@\n-package org.example.controller;\n-\n-import java.io.IOException;\n-import java.util.Optional;\n-import javax.servlet.RequestDispatcher;\n-import javax.servlet.ServletException;\n-import javax.servlet.annotation.WebServlet;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.HttpSession;\n-import org.example.constans.Attributes;\n-import org.example.excetions.IllegalFormatException;\n-import org.example.model.Student;\n-import org.example.repository.interfaces.RepositoryForStudentsInterface;\n-import org.example.repository.producer.StudentProducer;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-//пока не используется\n-@WebServlet(\"/rating\")\n-public class ControllerForShowRating extends HttpServlet {\n-\n-  private static final Logger log = LoggerFactory.getLogger(ControllerForShowRating.class);\n-\n-  @Override\n-  protected void service(HttpServletRequest req, HttpServletResponse resp)\n-      throws ServletException, IOException {\n-    int id = 0;\n-    try {\n-      id = Integer.parseInt(req.getParameter(\"idStudent\"));\n-      log.info(\"students id - \" + id);\n-    } catch (NumberFormatException e) {\n-      log.error(\"id is not a number\");\n-      throw new IllegalFormatException(\"id is not a number\");\n-    }\n-    RepositoryForStudentsInterface repository = StudentProducer.getRepository();\n-    Optional<Student> student = repository.findById(id);\n-    String rating;\n-    if (student.isPresent()) {\n-      rating = student.get().getRatingAsString();\n-    } else {\n-      rating = \"Пользаватель с таким логином не найден\";\n-    }\n-    log.info(\"rating\" + rating);\n-    HttpSession session = req.getSession();\n-    session.setAttribute(Attributes.RATING,\n-        rating + \" if you see this massage in web-browser please write me 375333038034\");\n-    RequestDispatcher requestDispatcher = req.getRequestDispatcher(\"/showRating\");\n-    requestDispatcher.forward(req, resp);\n-  }\n-}"
  },
  {
    "sha": "6f175da29155b50151619c2f1f6d6f72af73032a",
    "filename": "controller/src/main/java/org/example/controller/ControllerSetSalary.java",
    "status": "modified",
    "additions": 5,
    "deletions": 12,
    "changes": 17,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/ControllerSetSalary.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/ControllerSetSalary.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/controller/ControllerSetSalary.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -2,17 +2,16 @@\n \n import java.io.IOException;\n import java.math.BigDecimal;\n-import java.util.Optional;\n import javax.servlet.ServletException;\n import javax.servlet.annotation.WebServlet;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.example.constans.Parameters;\n-import org.example.excetions.IllegalDataException;\n import org.example.model.Teacher;\n-import org.example.repository.producer.TeacherProducer;\n import org.example.service.Checking;\n+import org.example.service.SaveService;\n+import org.example.service.Supplier;\n \n @WebServlet(\"/setSalary\")\n public class ControllerSetSalary extends HttpServlet {\n@@ -23,15 +22,9 @@ protected void service(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n     BigDecimal newSalary = Checking.getSalary(req.getParameter(Parameters.SALARY));\n     int id = Checking.getId(req.getParameter(Parameters.ID_TEACHER));\n-    Optional<Teacher> optionalTeacher = TeacherProducer.getRepository()\n-        .findById(id);\n-    if (optionalTeacher.isPresent()) {\n-      Teacher teacher = optionalTeacher.get();\n-      teacher.getSalary().add(newSalary);\n-      TeacherProducer.getRepository().save(teacher);\n-    } else {\n-      throw new IllegalDataException(\"Teacher with id - \" + id + \" doesn't exist\");\n-    }\n+    Teacher teacher = Supplier.getTeacherWithId(id);\n+    teacher.getSalary().add(newSalary);\n+    SaveService.saveTeacher(teacher);\n     req.getRequestDispatcher(\"pages/AdminSetSalary.jsp\").forward(req, resp);\n   }\n }"
  },
  {
    "sha": "f3d2b0e925f27e52374c6e2e2568f80a55a122ff",
    "filename": "controller/src/main/java/org/example/controller/InitRating.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/InitRating.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/controller/InitRating.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/controller/InitRating.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -7,15 +7,16 @@\n import java.util.Set;\n import org.example.group.Group;\n import org.example.model.Student;\n+import org.example.repository.hibernate.RepositoryForGroupHibernate;\n import org.example.repository.jdbc.DataSource;\n-import org.example.repository.jdbc.RepositoryForGroupJDBC;\n import org.example.subject.Subject;\n \n public class InitRating {\n   //класс для стартового инициализирования таблицы rating нулями\n \n   public static void main(String[] args) {\n-    for (Group group : RepositoryForGroupJDBC.getInstance().findAll()) {\n+\n+    for (Group group : RepositoryForGroupHibernate.getInstance().findAll()) {\n       Set<Student> students = group.getStudents();\n       Set<Subject> subjects = group.getSubjects();\n       for (Student student : students) {\n@@ -25,7 +26,7 @@ public static void main(String[] args) {\n                   \"insert into rating (student_id, subject, rating) values (?, ?, ?)\")\n           ) {\n             ps.setInt(1, student.getId());\n-            ps.setString(2, Subject.getStringBySubject(subject));\n+            ps.setString(2, subject.toString());\n             ps.setInt(3, 0);\n             ResultSet rs = ps.executeQuery();\n             rs.next();"
  },
  {
    "sha": "dd1e8d3c58b3ae6fc974a98d19e172aa99989fdd",
    "filename": "controller/src/main/java/org/example/exceptions/AppException.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/exceptions/AppException.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/exceptions/AppException.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/exceptions/AppException.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,4 +1,4 @@\n-package org.example.excetions;\n+package org.example.exceptions;\n \n public class AppException extends RuntimeException {\n ",
    "previous_filename": "controller/src/main/java/org/example/excetions/AppException.java"
  },
  {
    "sha": "58cb374dbe5ea32e6ac66de7485063c8620b4009",
    "filename": "controller/src/main/java/org/example/exceptions/IllegalDataException.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/exceptions/IllegalDataException.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/exceptions/IllegalDataException.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/exceptions/IllegalDataException.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,4 +1,4 @@\n-package org.example.excetions;\n+package org.example.exceptions;\n \n public class IllegalDataException extends AppException {\n ",
    "previous_filename": "controller/src/main/java/org/example/excetions/IllegalDataException.java"
  },
  {
    "sha": "e195ed19f86ba66b31075933f1b46960b311304d",
    "filename": "controller/src/main/java/org/example/exceptions/IllegalFormatException.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/exceptions/IllegalFormatException.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/exceptions/IllegalFormatException.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/exceptions/IllegalFormatException.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,4 +1,4 @@\n-package org.example.excetions;\n+package org.example.exceptions;\n \n public class IllegalFormatException extends AppException {\n ",
    "previous_filename": "controller/src/main/java/org/example/excetions/IllegalFormatException.java"
  },
  {
    "sha": "4e316f58566b918081a6e0a66017a060ee9a9c39",
    "filename": "controller/src/main/java/org/example/exceptions/ServletException.java",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/b4c66cf3c93af60d62d22fd776405120915d008c/controller/src/main/java/org/example/exceptions/ServletException.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/b4c66cf3c93af60d62d22fd776405120915d008c/controller/src/main/java/org/example/exceptions/ServletException.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/exceptions/ServletException.java?ref=b4c66cf3c93af60d62d22fd776405120915d008c",
    "patch": "@@ -1,17 +0,0 @@\n-package org.example.exceptions;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpSession;\n-\n-public class ServletException extends RuntimeException {\n-\n-  public ServletException() {\n-    super();\n-  }\n-\n-  public ServletException(String message, HttpServletRequest req) {\n-    super(message);\n-    HttpSession session = req.getSession();\n-    session.setAttribute(\"exception\", message);\n-  }\n-}"
  },
  {
    "sha": "0d980b3acc9554a11d34031438b00e593e72f0c1",
    "filename": "controller/src/main/java/org/example/exceptions/UnsupportedArgumentException.java",
    "status": "removed",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/b4c66cf3c93af60d62d22fd776405120915d008c/controller/src/main/java/org/example/exceptions/UnsupportedArgumentException.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/b4c66cf3c93af60d62d22fd776405120915d008c/controller/src/main/java/org/example/exceptions/UnsupportedArgumentException.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/exceptions/UnsupportedArgumentException.java?ref=b4c66cf3c93af60d62d22fd776405120915d008c",
    "patch": "@@ -1,10 +0,0 @@\n-package org.example.exceptions;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-public class UnsupportedArgumentException extends ServletException {\n-\n-  public UnsupportedArgumentException(String message, HttpServletRequest req) {\n-    super(message, req);\n-  }\n-}"
  },
  {
    "sha": "8bc4d8a22394e104fea24d9b243d057e61f97162",
    "filename": "controller/src/main/java/org/example/repository/hibernate/HibernateSessionFactory.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/HibernateSessionFactory.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/HibernateSessionFactory.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/hibernate/HibernateSessionFactory.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -3,7 +3,6 @@\n import org.example.group.Group;\n import org.example.model.Student;\n import org.example.model.Teacher;\n-import org.example.subject.Sub;\n import org.hibernate.SessionFactory;\n import org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n import org.hibernate.cfg.Configuration;\n@@ -16,15 +15,18 @@ private HibernateSessionFactory() {\n   }\n \n   public static SessionFactory getSessionFactory() {\n-    if(sessionFactory == null) {\n-      Configuration configuration = new Configuration().configure();\n-      configuration.addAnnotatedClass(Student.class);\n-      configuration.addAnnotatedClass(Teacher.class);\n-      configuration.addAnnotatedClass(Sub.class);\n-      configuration.addAnnotatedClass(Group.class);\n-      StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder()\n-          .applySettings(configuration.getProperties());\n-      sessionFactory = configuration.buildSessionFactory(builder.build());\n+    if (sessionFactory == null) {\n+      synchronized (HibernateSessionFactory.class) {\n+        if (sessionFactory == null) {\n+          Configuration configuration = new Configuration().configure();\n+          configuration.addAnnotatedClass(Student.class);\n+          configuration.addAnnotatedClass(Teacher.class);\n+          configuration.addAnnotatedClass(Group.class);\n+          StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder()\n+              .applySettings(configuration.getProperties());\n+          sessionFactory = configuration.buildSessionFactory(builder.build());\n+        }\n+      }\n     }\n     return sessionFactory;\n   }"
  },
  {
    "sha": "c2adc0747dd3a8d8fa262386a63547db3ff10c6d",
    "filename": "controller/src/main/java/org/example/repository/hibernate/RepositoryForGroupHibernate.java",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/RepositoryForGroupHibernate.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/RepositoryForGroupHibernate.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/hibernate/RepositoryForGroupHibernate.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -7,6 +7,7 @@\n import org.example.repository.interfaces.RepositoryForGroupInterface;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n+import org.hibernate.query.Query;\n \n public class RepositoryForGroupHibernate implements RepositoryForGroupInterface {\n \n@@ -28,13 +29,21 @@ public static RepositoryForGroupHibernate getInstance() {\n \n   @Override\n   public List<Group> findAll() {\n-    return (List<Group>) HibernateSessionFactory.getSessionFactory().openSession().createQuery(\"from Group \").list();\n+    return (List<Group>) HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Group \").list();\n   }\n \n   @Override\n   public Optional<Group> findById(int id) {\n-    Group group = HibernateSessionFactory.getSessionFactory().openSession().get(Group.class, id);\n-    return Optional.ofNullable(group);\n+//    Session session  = HibernateSessionFactory.getSessionFactory().openSession();\n+//    Criteria criteria = session.createCriteria(Group.class).add(Restrictions.eq(\"id\", id));\n+//    List<Group> teachers = criteria.list();\n+//    return teachers.stream().findAny();\n+\n+    Query<Group> query = HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Group where id = :id\");\n+    query.setParameter(\"id\", id);\n+    return query.stream().findAny();\n   }\n \n   @Override\n@@ -53,7 +62,7 @@ public Group save(Group group) {\n   public Group update(Group group) {\n     Session session = HibernateSessionFactory.getSessionFactory().openSession();\n     Transaction transaction = session.beginTransaction();\n-    session.update(group);\n+    session.merge(group);\n     transaction.commit();\n     session.close();\n     return group;"
  },
  {
    "sha": "ad38f4a706ca0f94ff5488e5280300ac880bad49",
    "filename": "controller/src/main/java/org/example/repository/hibernate/RepositoryForStudentHibernate.java",
    "status": "modified",
    "additions": 23,
    "deletions": 14,
    "changes": 37,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/RepositoryForStudentHibernate.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/RepositoryForStudentHibernate.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/hibernate/RepositoryForStudentHibernate.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -3,11 +3,11 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.example.model.AbstractPerson;\n import org.example.model.Student;\n import org.example.repository.interfaces.RepositoryForStudentsInterface;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n+import org.hibernate.query.Query;\n \n public class RepositoryForStudentHibernate implements RepositoryForStudentsInterface {\n \n@@ -29,14 +29,17 @@ public static RepositoryForStudentHibernate getInstance() {\n \n   @Override\n   public Optional<Student> findByLoginAndPassword(String login, String password) {\n-    List<Student> students = findAll();\n-    Student student = null;\n-    for (Student s : students) {\n-      if (s.getLogin().equals(login) && s.getPassword().equals(password)) {\n-        student = s;\n-      }\n-    }\n-    return Optional.ofNullable(student);\n+//    Session session  = HibernateSessionFactory.getSessionFactory().openSession();\n+//    Criteria criteria = session.createCriteria(Student.class).add(Restrictions.eq(\"login\", login))\n+//        .add(Restrictions.eq(\"password\", password));\n+//    List<Student> teachers = criteria.list();\n+//    return teachers.stream().findAny();\n+\n+    Query<Student> query = HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Student where login = :login and password = :password\");\n+    query.setParameter(\"login\", login);\n+    query.setParameter(\"password\", password);\n+    return query.stream().findAny();\n   }\n \n   @Override\n@@ -47,14 +50,20 @@ public static RepositoryForStudentHibernate getInstance() {\n \n   @Override\n   public Optional<Student> findById(int id) {\n-    Student student = HibernateSessionFactory.getSessionFactory().openSession()\n-        .get(Student.class, id);\n-    return Optional.ofNullable(student);\n+//    Session session  = HibernateSessionFactory.getSessionFactory().openSession();\n+//    Criteria criteria = session.createCriteria(Student.class).add(Restrictions.eq(\"id\", id));\n+//    List<Student> teachers = criteria.list();\n+//    return teachers.stream().findAny();\n+\n+    Query<Student> query = HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Student where id = :id\");\n+    query.setParameter(\"id\", id);\n+    return query.stream().findAny();\n   }\n \n   @Override\n   public Student save(Student student) {\n-    if (findAll().stream().map(AbstractPerson::getId).collect(Collectors.toList())\n+    if (findAll().stream().map(Student::getId).collect(Collectors.toList())\n         .contains(student.getId())) {\n       return update(student);\n     }\n@@ -69,7 +78,7 @@ public Student save(Student student) {\n   public Student update(Student student) {\n     Session session = HibernateSessionFactory.getSessionFactory().openSession();\n     Transaction transaction = session.beginTransaction();\n-    session.update(student);\n+    session.merge(student);\n     transaction.commit();\n     session.close();\n     return student;"
  },
  {
    "sha": "d0e54935f61ee712f4334747e53b13e1e05065da",
    "filename": "controller/src/main/java/org/example/repository/hibernate/RepositoryForTeacherHibernate.java",
    "status": "modified",
    "additions": 27,
    "deletions": 15,
    "changes": 42,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/RepositoryForTeacherHibernate.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/hibernate/RepositoryForTeacherHibernate.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/hibernate/RepositoryForTeacherHibernate.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -3,12 +3,11 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.example.model.AbstractPerson;\n-import org.example.model.Student;\n import org.example.model.Teacher;\n import org.example.repository.interfaces.RepositoryForTeachersInterface;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n+import org.hibernate.query.Query;\n \n public class RepositoryForTeacherHibernate implements RepositoryForTeachersInterface {\n \n@@ -30,31 +29,43 @@ public static RepositoryForTeacherHibernate getInstance() {\n \n   @Override\n   public Optional<Teacher> findByLoginAndPassword(String login, String password) {\n-    List<Teacher> teachers = findAll();\n-    Teacher teacher = null;\n-    for (Teacher t: teachers) {\n-      if (t.getLogin().equals(login) && t.getPassword().equals(password)) {\n-        teacher = t;\n-      }\n-    }\n-    return Optional.ofNullable(teacher);\n+//    Session session  = HibernateSessionFactory.getSessionFactory().openSession();\n+//    Criteria criteria = session.createCriteria(Teacher.class).add(Restrictions.eq(\"login\", login))\n+//        .add(Restrictions.eq(\"password\", password));\n+//    List<Teacher> teachers = criteria.list();\n+//    return teachers.stream().findAny();\n+\n+    Query query = HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Teacher where login = :login and password = :password\");\n+    query.setParameter(\"login\", login);\n+    query.setParameter(\"password\", password);\n+    return query.list().stream().findFirst();\n+\n   }\n \n   @Override\n   public List<Teacher> findAll() {\n-    return (List<Teacher>) HibernateSessionFactory.getSessionFactory().openSession().createQuery(\"from Teacher \").list();\n+    return (List<Teacher>) HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Teacher \").list();\n \n   }\n \n   @Override\n   public Optional<Teacher> findById(int id) {\n-    Teacher teacher = HibernateSessionFactory.getSessionFactory().openSession().get(Teacher.class, id);\n-    return Optional.ofNullable(teacher);\n+//    Session session  = HibernateSessionFactory.getSessionFactory().openSession();\n+//    Criteria criteria = session.createCriteria(Teacher.class).add(Restrictions.eq(\"id\", id));\n+//    List<Teacher> teachers = criteria.list();\n+//    return teachers.stream().findAny();\n+\n+    Query query = HibernateSessionFactory.getSessionFactory().openSession()\n+        .createQuery(\"from Teacher where id = :id\");\n+    query.setParameter(\"id\", id);\n+    return query.stream().findAny();\n   }\n \n   @Override\n   public Teacher save(Teacher teacher) {\n-    if (findAll().stream().map(AbstractPerson::getId).collect(Collectors.toList())\n+    if (findAll().stream().map(Teacher::getId).collect(Collectors.toList())\n         .contains(teacher.getId())) {\n       return update(teacher);\n     }\n@@ -69,7 +80,8 @@ public Teacher save(Teacher teacher) {\n   public Teacher update(Teacher teacher) {\n     Session session = HibernateSessionFactory.getSessionFactory().openSession();\n     Transaction transaction = session.beginTransaction();\n-    session.update(teacher);\n+    //session.update(teacher);\n+    session.merge(teacher);\n     transaction.commit();\n     session.close();\n     return teacher;"
  },
  {
    "sha": "e40675b1ab4a0229f81e5aa7d9dd00e537ce5ccb",
    "filename": "controller/src/main/java/org/example/repository/interfaces/RepositoryForGroupInterface.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/interfaces/RepositoryForGroupInterface.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/interfaces/RepositoryForGroupInterface.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/interfaces/RepositoryForGroupInterface.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -3,4 +3,5 @@\n import org.example.group.Group;\n \n public interface RepositoryForGroupInterface extends RepositoryInterface<Group> {\n+\n }"
  },
  {
    "sha": "685145ad4dc46c19208587d14a32970d7c728dcb",
    "filename": "controller/src/main/java/org/example/repository/jdbc/RepositoryForGroupJDBC.java",
    "status": "modified",
    "additions": 19,
    "deletions": 10,
    "changes": 29,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/jdbc/RepositoryForGroupJDBC.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/jdbc/RepositoryForGroupJDBC.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/jdbc/RepositoryForGroupJDBC.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -47,7 +47,7 @@ public static RepositoryForGroupJDBC getInstance() {\n         int id = rs.getInt(\"id\");\n         Teacher teacher = TeacherProducer.getRepository()\n             .findById(rs.getInt(\"teacher_id\")).orElseThrow(NullPointerException::new);\n-        Set<Subject> subjects = getSubjectsFromString(rs.getString(\"subjects\"));\n+        Set<Subject> subjects = getSubjectsFromDB(id);\n         Set<Student> students = new HashSet<>();\n         groups.add(new Group(id, teacher, students, subjects));\n       }\n@@ -81,15 +81,14 @@ public static RepositoryForGroupJDBC getInstance() {\n     List<Group> groups = new ArrayList<>();\n     //создаем группы без студентов\n     try (Connection connection = DataSource.getConnection();\n-        PreparedStatement ps = connection.prepareStatement(\"select * from groups where id = ?;\"))\n-    {\n+        PreparedStatement ps = connection.prepareStatement(\"select * from groups where id = ?;\")) {\n       ps.setInt(1, id);\n       ResultSet rs = ps.executeQuery();\n \n       while (rs.next()) {\n         Teacher teacher = TeacherProducer.getRepository()\n             .findById(rs.getInt(\"teacher_id\")).orElseThrow(NullPointerException::new);\n-        Set<Subject> subjects = getSubjectsFromString(rs.getString(\"subjects\"));\n+        Set<Subject> subjects = getSubjectsFromDB(id);\n         Set<Student> students = new HashSet<>();\n         groups.add(new Group(id, teacher, students, subjects));\n       }\n@@ -98,7 +97,8 @@ public static RepositoryForGroupJDBC getInstance() {\n     }\n     //добавляем студентов в группы\n     try (Connection connection = DataSource.getConnection();\n-        PreparedStatement ps = connection.prepareStatement(\"select * from group_student where group_id = ?;\")\n+        PreparedStatement ps = connection\n+            .prepareStatement(\"select * from group_student where group_id = ?;\")\n     ) {\n       ps.setInt(1, id);\n       ResultSet rs = ps.executeQuery();\n@@ -107,7 +107,7 @@ public static RepositoryForGroupJDBC getInstance() {\n         Student student = StudentProducer.getRepository().findById(studentId)\n             .orElseThrow(NullPointerException::new);\n         for (Group g : groups) {\n-            g.getStudents().add(student);\n+          g.getStudents().add(student);\n         }\n       }\n     } catch (SQLException throwable) {\n@@ -126,11 +126,20 @@ public Group remove(Group group) {\n     return null;\n   }\n \n-  private Set<Subject> getSubjectsFromString(String string) {\n+  private Set<Subject> getSubjectsFromDB(int groupId) {\n     Set<Subject> subjects = new HashSet<>();\n-    String[] array = string.split(\";\");\n-    for (String s : array) {\n-      subjects.add(Subject.getSubjectByString(s));\n+    try (Connection connection = DataSource.getConnection();\n+        PreparedStatement ps = connection\n+            .prepareStatement(\"select from groups_subject where group_id = ?\");\n+    ) {\n+      ps.setInt(1, groupId);\n+      ResultSet rs = ps.executeQuery();\n+      while (rs.next()) {\n+        subjects.add(Subject.getSubjectByString(rs.getString(\"subject\")));\n+      }\n+      rs.close();\n+    } catch (SQLException throwable) {\n+      throwable.printStackTrace();\n     }\n     return subjects;\n   }"
  },
  {
    "sha": "136a203773970b7e88bdced705d4c9938412eb93",
    "filename": "controller/src/main/java/org/example/repository/jdbc/RepositoryForStudentJDBC.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/jdbc/RepositoryForStudentJDBC.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/jdbc/RepositoryForStudentJDBC.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/jdbc/RepositoryForStudentJDBC.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -10,6 +10,7 @@\n import java.util.Optional;\n import org.example.model.Student;\n import org.example.repository.interfaces.RepositoryForStudentsInterface;\n+import org.example.service.StudentService;\n import org.example.subject.Subject;\n \n public class RepositoryForStudentJDBC implements RepositoryForStudentsInterface {\n@@ -54,7 +55,7 @@ public static RepositoryForStudentJDBC getInstance() {\n         int rating = rs.getInt(\"rating\");\n         for (Student student : students) {\n           if (student.getId() == id) {\n-            student.putRating(subject, rating);\n+            StudentService.putRating(student, subject, rating);\n           }\n         }\n       }\n@@ -114,7 +115,7 @@ public Student save(Student student) {\n         preparedStatement.close();\n       }\n     } catch (SQLException e) {\n-        e.printStackTrace();\n+      e.printStackTrace();\n     }\n     return student;\n   }\n@@ -144,8 +145,8 @@ public Student update(Student student) {\n         preparedStatement.close();\n       }\n     } catch (SQLException e) {\n-        e.printStackTrace();\n-      }\n+      e.printStackTrace();\n+    }\n     return student;\n   }\n \n@@ -193,7 +194,7 @@ private void setRatingForStudentWithId(List<Student> students, int id) {\n         int rating = rs.getInt(\"rating\");\n         for (Student student : students) {\n           if (student.getId() == id) {\n-            student.putRating(subject, rating);\n+            StudentService.putRating(student, subject, rating);\n           }\n         }\n       }"
  },
  {
    "sha": "48818bde5d77ed4d9a5c30792e0f50ac33a455e4",
    "filename": "controller/src/main/java/org/example/repository/jdbc/RepositoryForTeacherJDBC.java",
    "status": "modified",
    "additions": 46,
    "deletions": 8,
    "changes": 54,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/jdbc/RepositoryForTeacherJDBC.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/jdbc/RepositoryForTeacherJDBC.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/jdbc/RepositoryForTeacherJDBC.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -7,10 +7,8 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n import org.example.model.Teacher;\n import org.example.repository.interfaces.RepositoryForTeachersInterface;\n \n@@ -63,12 +61,10 @@ public static RepositoryForTeacherJDBC getInstance() {\n \n   private void getTeachersFromResultSet(List<Teacher> teachers, ResultSet rs) throws SQLException {\n     while (rs.next()) {\n-      String salaryStr = rs.getString(\"salary\");\n-      List<BigDecimal> salary = Arrays.stream(salaryStr.split(\";\"))\n-          .map(s -> BigDecimal.valueOf(Double.parseDouble(s))).collect(Collectors.toList());\n-      teachers.add(new Teacher(rs.getInt(\"id\"),\n-          rs.getString(\"login\"), rs.getString(\"password\"),\n-          rs.getString(\"name\"), rs.getInt(\"age\"), salary));\n+      int id = rs.getInt(\"id\");\n+      List<BigDecimal> salary = getSalaryById(id);\n+      teachers.add(new Teacher(id, rs.getString(\"login\"), rs.getString(\"password\")\n+          , rs.getString(\"name\"), rs.getInt(\"age\"), salary));\n     }\n   }\n \n@@ -107,6 +103,7 @@ public Teacher update(Teacher teacher) {\n       preparedStatement.setInt(4, teacher.getAge());\n       preparedStatement.setString(5, getSalaryAsString(teacher.getSalary()));\n       preparedStatement.executeQuery();\n+      updateSalary(teacher.getId(), teacher.getSalary());\n     } catch (SQLException e) {\n       e.printStackTrace();\n     }\n@@ -143,4 +140,45 @@ private String getSalaryAsString(List<BigDecimal> list) {\n     sb.deleteCharAt(sb.lastIndexOf(\";\"));\n     return sb.toString();\n   }\n+\n+  private List<BigDecimal> getSalaryById(int id) {\n+    List<BigDecimal> salary = new ArrayList<>();\n+    try (Connection connection = DataSource.getConnection()) {\n+      PreparedStatement ps = connection\n+          .prepareStatement(\"select * from salary where teacher_id = ?;\");\n+      ps.setInt(1, id);\n+      ResultSet rs = ps.executeQuery();\n+      while (rs.next()) {\n+        salary.add(rs.getBigDecimal(\"salary\"));\n+      }\n+      rs.close();\n+      ps.close();\n+    } catch (SQLException throwable) {\n+      throwable.printStackTrace();\n+    }\n+    return salary;\n+  }\n+\n+  private void updateSalary(int teacherId, List<BigDecimal> salary) {\n+    try (Connection connection = DataSource.getConnection();\n+        PreparedStatement ps = connection\n+            .prepareStatement(\"delete from salary where teacher_id = ?;\")) {\n+      ps.setInt(1, teacherId);\n+      ps.executeQuery();\n+    } catch (SQLException throwable) {\n+      throwable.printStackTrace();\n+    }\n+    try (Connection connection = DataSource.getConnection();\n+        PreparedStatement ps = connection\n+            .prepareStatement(\"insert into salary (teacher_id, salary) values (?, ?);;\")) {\n+      for (BigDecimal bd : salary) {\n+        ps.setInt(1, teacherId);\n+        ps.setBigDecimal(2, bd);\n+        ps.executeQuery();\n+      }\n+\n+    } catch (SQLException throwable) {\n+      throwable.printStackTrace();\n+    }\n+  }\n }"
  },
  {
    "sha": "a6696a06c77ef9ca8860660b8d970cd7779d6665",
    "filename": "controller/src/main/java/org/example/repository/memory/RepositoryForGroupInMemory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/memory/RepositoryForGroupInMemory.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/memory/RepositoryForGroupInMemory.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/memory/RepositoryForGroupInMemory.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -12,6 +12,7 @@\n import org.example.repository.interfaces.RepositoryForGroupInterface;\n import org.example.repository.interfaces.RepositoryForStudentsInterface;\n import org.example.repository.interfaces.RepositoryForTeachersInterface;\n+import org.example.service.StudentService;\n import org.example.subject.Subject;\n \n public class RepositoryForGroupInMemory implements RepositoryForGroupInterface {\n@@ -81,7 +82,7 @@ public void initRatingForAllStudents() {\n     map.values().forEach(g -> g.getStudents().forEach(s -> {\n       Set<Subject> subjects = g.getSubjects();\n       for (Subject sub : subjects) {\n-        s.putRating(sub, 0);\n+        StudentService.putRating(s, sub, 0);\n       }\n     }));\n   }"
  },
  {
    "sha": "a611d709eaaab2e6d123cac5e8a9b90782e8e00e",
    "filename": "controller/src/main/java/org/example/repository/producer/GroupProducer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/GroupProducer.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/GroupProducer.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/producer/GroupProducer.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,5 +1,6 @@\n package org.example.repository.producer;\n \n+import org.example.repository.hibernate.RepositoryForGroupHibernate;\n import org.example.repository.interfaces.RepositoryForGroupInterface;\n import org.example.repository.jdbc.RepositoryForGroupJDBC;\n import org.example.repository.memory.RepositoryForGroupInMemory;\n@@ -10,8 +11,10 @@ public static RepositoryForGroupInterface getRepository() {\n     switch (RepositoryType.type) {\n       case \"memory\":\n         return RepositoryForGroupInMemory.getInstance();\n-      default:\n+      case \"jdbc\":\n         return RepositoryForGroupJDBC.getInstance();\n+      default:\n+        return RepositoryForGroupHibernate.getInstance();\n     }\n   }\n }"
  },
  {
    "sha": "df46d2439e247e90bf347869d42d9cde957bdf0c",
    "filename": "controller/src/main/java/org/example/repository/producer/RepositoryType.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/RepositoryType.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/RepositoryType.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/producer/RepositoryType.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -6,11 +6,14 @@\n \n @Slf4j\n public class RepositoryType {\n+\n   static String type;\n+\n   static {\n     Properties properties = new Properties();\n     try {\n-      properties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"app.properties\"));\n+      properties.load(\n+          Thread.currentThread().getContextClassLoader().getResourceAsStream(\"app.properties\"));\n     } catch (IOException e) {\n       log.error(e.getMessage(), e);\n     }"
  },
  {
    "sha": "ba2b60578754490ade9cc8552ce80b6ea8895e39",
    "filename": "controller/src/main/java/org/example/repository/producer/StudentProducer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/StudentProducer.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/StudentProducer.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/producer/StudentProducer.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,5 +1,6 @@\n package org.example.repository.producer;\n \n+import org.example.repository.hibernate.RepositoryForStudentHibernate;\n import org.example.repository.interfaces.RepositoryForStudentsInterface;\n import org.example.repository.jdbc.RepositoryForStudentJDBC;\n import org.example.repository.memory.RepositoryForStudentsInMemory;\n@@ -10,8 +11,10 @@ public static RepositoryForStudentsInterface getRepository() {\n     switch (RepositoryType.type) {\n       case \"memory\":\n         return RepositoryForStudentsInMemory.getInstance();\n-      default:\n+      case \"jdbc\":\n         return RepositoryForStudentJDBC.getInstance();\n+      default:\n+        return RepositoryForStudentHibernate.getInstance();\n     }\n   }\n }"
  },
  {
    "sha": "38f7c037edb30fa645f8f7eef6f8ff1502eba22c",
    "filename": "controller/src/main/java/org/example/repository/producer/TeacherProducer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/TeacherProducer.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/repository/producer/TeacherProducer.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/repository/producer/TeacherProducer.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,5 +1,6 @@\n package org.example.repository.producer;\n \n+import org.example.repository.hibernate.RepositoryForTeacherHibernate;\n import org.example.repository.interfaces.RepositoryForTeachersInterface;\n import org.example.repository.jdbc.RepositoryForTeacherJDBC;\n import org.example.repository.memory.RepositoryForTeachersInMemory;\n@@ -10,8 +11,10 @@ public static RepositoryForTeachersInterface getRepository() {\n     switch (RepositoryType.type) {\n       case \"memory\":\n         return RepositoryForTeachersInMemory.getInstance();\n-      default:\n+      case \"jdbc\":\n         return RepositoryForTeacherJDBC.getInstance();\n+      default:\n+        return RepositoryForTeacherHibernate.getInstance();\n     }\n   }\n }"
  },
  {
    "sha": "954a3651eba17f3065254fd2565c17d10b10b6ec",
    "filename": "controller/src/main/java/org/example/service/AverageSalary.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/AverageSalary.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/AverageSalary.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/service/AverageSalary.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -3,10 +3,12 @@\n import java.math.BigDecimal;\n import java.math.RoundingMode;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.example.constans.Tags;\n-import org.example.excetions.IllegalDataException;\n+import org.example.exceptions.IllegalDataException;\n import org.example.model.Teacher;\n import org.example.repository.interfaces.RepositoryForTeachersInterface;\n import org.example.repository.producer.TeacherProducer;\n@@ -67,5 +69,7 @@ public static String showAverageSalaryForAllTeacher(int numberOfMonths) {\n \n   public static List<BigDecimal> getSalaryAsList(String salaryAsString) {\n     String[] array = salaryAsString.split(\";\");\n+    return Arrays.stream(array).map(s -> BigDecimal.valueOf(Double.parseDouble(s)))\n+        .collect(Collectors.toList());\n   }\n }"
  },
  {
    "sha": "e94625ad88a52dd4feccda8044e22ac913187025",
    "filename": "controller/src/main/java/org/example/service/Checking.java",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/Checking.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/Checking.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/service/Checking.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -1,10 +1,8 @@\n package org.example.service;\n \n import java.math.BigDecimal;\n-import org.example.constans.Parameters;\n-import org.example.controller.ControllerForChangeRating;\n-import org.example.excetions.IllegalDataException;\n-import org.example.excetions.IllegalFormatException;\n+import org.example.exceptions.IllegalDataException;\n+import org.example.exceptions.IllegalFormatException;\n import org.example.subject.Subject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -13,6 +11,18 @@\n \n   private static final Logger log = LoggerFactory.getLogger(Checking.class);\n \n+  public static int getNumber(String numberAsString) {\n+    int number;\n+    try {\n+      number = Integer.parseInt(numberAsString);\n+      log.info(\"number - \" + number);\n+    } catch (NumberFormatException e) {\n+      log.error(\"it's not a number\");\n+      throw new IllegalFormatException(\"it's not a number\");\n+    }\n+    return number;\n+  }\n+\n   public static int getId(String parameter) {\n     int id;\n     try {"
  },
  {
    "sha": "b97d62aa3e40c85ce4280ffa6b5f6b6cfac58b6b",
    "filename": "controller/src/main/java/org/example/service/SaveService.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/SaveService.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/SaveService.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/service/SaveService.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -0,0 +1,24 @@\n+package org.example.service;\n+\n+import org.example.group.Group;\n+import org.example.model.Student;\n+import org.example.model.Teacher;\n+import org.example.repository.producer.GroupProducer;\n+import org.example.repository.producer.StudentProducer;\n+import org.example.repository.producer.TeacherProducer;\n+\n+public class SaveService {\n+\n+  public static Student saveStudent(Student student) {\n+    return StudentProducer.getRepository().save(student);\n+  }\n+\n+  public static Teacher saveTeacher(Teacher teacher) {\n+    return TeacherProducer.getRepository().save(teacher);\n+  }\n+\n+  public static Group saveGroup(Group group) {\n+    return GroupProducer.getRepository().save(group);\n+  }\n+\n+}"
  },
  {
    "sha": "61332c6e25b3223e45df53404486ec1c5d13bbbc",
    "filename": "controller/src/main/java/org/example/service/StudentService.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/StudentService.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/StudentService.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/service/StudentService.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -0,0 +1,28 @@\n+package org.example.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.example.model.Student;\n+import org.example.subject.Subject;\n+\n+@Slf4j\n+public class StudentService {\n+\n+  public static synchronized Student putRating(Student student, Subject subject, int rating) {\n+    try {\n+      if (rating >= 0 && rating <= 100) {\n+        student.getRatings().put(subject, rating);\n+      }\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"rating or subject is not valid\");\n+    }\n+    return student;\n+  }\n+\n+  public static synchronized String getRatingAsString(Student student) {\n+    StringBuffer sb = new StringBuffer();\n+    sb.append(student.getName()).append(\" has rating: \");\n+    student.getRatings().forEach((k, v) -> sb.append(k).append(\" - \").append(v).append(\", \"));\n+    sb.deleteCharAt(sb.lastIndexOf(\",\"));\n+    return sb.toString();\n+  }\n+}"
  },
  {
    "sha": "269a76c87ece7134423837e82ef968ff1fe4649f",
    "filename": "controller/src/main/java/org/example/service/Supplier.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/Supplier.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/Supplier.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/service/Supplier.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -0,0 +1,22 @@\n+package org.example.service;\n+\n+import org.example.exceptions.IllegalDataException;\n+import org.example.model.Teacher;\n+import org.example.repository.producer.TeacherProducer;\n+\n+public class Supplier {\n+\n+  public static Teacher getTeacherWithLoginAngPassword(String login, String password) {\n+    return TeacherProducer.getRepository().findByLoginAndPassword(login, password)\n+        .orElseThrow(\n+            () -> new IllegalDataException(\"Teacher with this login and password doesn't exist\"));\n+  }\n+\n+  public static Teacher getTeacherWithId(int id) {\n+    return TeacherProducer.getRepository().findById(id)\n+        .orElseThrow(\n+            () -> new IllegalDataException(\"Teacher with id - \" + id + \" doesn't exist\"));\n+  }\n+\n+}\n+"
  },
  {
    "sha": "c7dc9be42f738ffa6496a9af4d776f7042034adc",
    "filename": "controller/src/main/java/org/example/service/TeacherService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/TeacherService.java",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/java/org/example/service/TeacherService.java",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/java/org/example/service/TeacherService.java?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -16,15 +16,15 @@\n public class TeacherService {\n \n   public static String showGroup(Teacher teacher) {\n-      Set<Student> students = getALLStudents(teacher);\n-      StringBuilder stringBuilder = new StringBuilder();\n-      stringBuilder.append(teacher.getName()).append(\", in your group \").append(students.size())\n-          .append(\" students:\").append(Tags.BR);\n-      for (Student s : students) {\n-        stringBuilder.append(\" name - \").append(s.getRatingAsString()).append(\", id - \")\n-            .append(s.getId()).append(Tags.BR);\n-      }\n-      return stringBuilder.toString();\n+    Set<Student> students = getALLStudents(teacher);\n+    StringBuilder stringBuilder = new StringBuilder();\n+    stringBuilder.append(teacher.getName()).append(\", in your group \").append(students.size())\n+        .append(\" students:\").append(Tags.BR);\n+    for (Student s : students) {\n+      stringBuilder.append(\" name - \").append(StudentService.getRatingAsString(s)).append(\", id - \")\n+          .append(s.getId()).append(Tags.BR);\n+    }\n+    return stringBuilder.toString();\n   }\n \n   public static String showSalary(Teacher teacher) {\n@@ -61,7 +61,7 @@ public static String showSalary(Teacher teacher) {\n \n   public static Optional<Student> getStudentById(Teacher teacher, int id) {\n     Student student = null;\n-    for (Student s : getALLStudents(teacher).size()) {\n+    for (Student s : getALLStudents(teacher)) {\n       if (s.getId() == id) {\n         student = s;\n       }"
  },
  {
    "sha": "a2188b06c95982b802c6e23e87bf2fc01ecb7aed",
    "filename": "controller/src/main/resources/CreateTable.sql",
    "status": "modified",
    "additions": 55,
    "deletions": 41,
    "changes": 96,
    "blob_url": "https://github.com/PavelKorchevskiy/it_academy/blob/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/resources/CreateTable.sql",
    "raw_url": "https://github.com/PavelKorchevskiy/it_academy/raw/0d594992088dda8a58c877e1a0cb44db6c54d919/controller/src/main/resources/CreateTable.sql",
    "contents_url": "https://api.github.com/repos/PavelKorchevskiy/it_academy/contents/controller/src/main/resources/CreateTable.sql?ref=0d594992088dda8a58c877e1a0cb44db6c54d919",
    "patch": "@@ -89,51 +89,65 @@ update rating\n set rating = 50\n where student_id = 1\n   and subject = 'chemistry';\n-create table subject (\n-    id int not null ,\n-    name varchar not null ,\n+create table subject\n+(\n+    id   int     not null,\n+    name varchar not null,\n     primary key (id)\n );\n-insert into subject (id, name) VALUES (1, 'biology'),\n-                                      (2, 'chemistry'),\n-                                      (3, 'math'),\n-                                      (4, 'geography'),\n-                                      (5, 'art'),\n-                                      (6, 'history');\n+insert into subject (id, name)\n+VALUES (1, 'biology'),\n+       (2, 'chemistry'),\n+       (3, 'math'),\n+       (4, 'geography'),\n+       (5, 'art'),\n+       (6, 'history');\n alter table groups drop column subjects;\n-create table groups_subject (\n-    group_id int not null ,\n-    subject_id int not null ,\n-    foreign key (group_id) references groups(id) ,\n-    foreign key (subject_id) references subject(id));\n-insert into groups_subject (group_id, subject_id) VALUES (1,1),\n-                                                         (1,2),\n-                                                         (2,3),\n-                                                         (2,4),\n-                                                         (3,5),\n-                                                         (3,6);\n+create table groups_subject\n+(\n+    group_id   int not null,\n+    subject_id int not null,\n+    foreign key (group_id) references groups (id),\n+    foreign key (subject_id) references subject (id)\n+);\n+insert into groups_subject (group_id, subject_id)\n+VALUES (1, 1),\n+       (1, 2),\n+       (2, 3),\n+       (2, 4),\n+       (3, 5),\n+       (3, 6);\n drop table salary;\n-create table salary (\n-    id serial primary key not null ,\n-    teacher_id int not null ,\n-    salary real not null ,\n+create table salary\n+(\n+    id         serial primary key not null,\n+    teacher_id int                not null,\n+    salary     real               not null,\n     foreign key (teacher_id) references Teacher\n );\n create sequence salary_id_seq start 1 increment 1;\n-delete from salary where id=1;\n-insert into salary (teacher_id, salary) VALUES (3, 474.45),\n-                                               (3, 344.45),\n-                                               (3, 427.4),\n-                                               (3, 394.5),\n-                                               (3, 444.45),\n-                                               (4, 341.5),\n-                                               (4, 424.75),\n-                                               (4, 433.48),\n-                                               (4, 440.5),\n-                                               (4, 384),\n-                                               (4, 447.8);\n-create table rat (\n-    id serial,\n-    subject\n-);\n-alter table groups add column subjects varchar(50);\n+delete\n+from salary\n+where id = 1;\n+insert into salary (teacher_id, salary)\n+VALUES (3, 474.45),\n+       (3, 344.45),\n+       (3, 427.4),\n+       (3, 394.5),\n+       (3, 444.45),\n+       (4, 341.5),\n+       (4, 424.75),\n+       (4, 433.48),\n+       (4, 440.5),\n+       (4, 384),\n+       (4, 447.8);\n+\n+alter table groups\n+    add column subjects varchar(50);\n+ALTER TABLE teacher ALTER COLUMN id TYPE serial;\n+\n+create sequence teacher_id_seq start 1 increment 1;\n+create sequence student_id_seq start 1 increment 1;\n+create sequence groups_id_seq start 1 increment 1;\n+\n+drop table groups_subject;"
  }
]
