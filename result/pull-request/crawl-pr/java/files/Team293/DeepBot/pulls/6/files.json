[
  {
    "sha": "fcbc22d6af411f8ffb9eea124005e83cc5cf38b8",
    "filename": "src/main/java/frc/robot/Constants.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/Team293/DeepBot/blob/b0dc2e37498e734ccf9eb0aa9765abf617e7cdba/src/main/java/frc/robot/Constants.java",
    "raw_url": "https://github.com/Team293/DeepBot/raw/b0dc2e37498e734ccf9eb0aa9765abf617e7cdba/src/main/java/frc/robot/Constants.java",
    "contents_url": "https://api.github.com/repos/Team293/DeepBot/contents/src/main/java/frc/robot/Constants.java?ref=b0dc2e37498e734ccf9eb0aa9765abf617e7cdba",
    "patch": "@@ -36,21 +36,23 @@\n         public static final int PID_CONFIG_TIMEOUT_MS = 10;\n         public static final int CONFIG_FEEDBACKSENSOR_TIMEOUT_MS = 4000;\n         public static final double CLOSED_LOOP_RAMP = 0.5;\n-        public static final double MAX_VELOCITY = 3000;\n-        public static final double DEFAULT_MAX_VELOCITY_PERCENTAGE = 0.25;\n-        public static final double DEFAULT_MAX_TURNING_SPEED = 0.25;\n+        public static final double MAX_VELOCITY = 5900; //TODO Change w/ conversion factor\n+        public static final double DEFAULT_MAX_VELOCITY_PERCENTAGE = 1.0;\n+        public static final double DEFAULT_MAX_TURNING_SPEED = 0.85;\n         public static final double VELOCITY_SLOWDOWN_MODIFIER = 0.5;\n         public static final double MIN_VELOCITY = 0;\n         public static final double MAX_ACCEL = 2000;\n         public static final int SMART_MOTION_SLOT = 0;\n         public static final double MIN_OUTPUT = -1;\n-        public static final double ENCODER_CONVERSION_FACTOR = 0.25;\n+        public static final double ENCODER_CONVERSION_FACTOR = 1.0;\n         public static final double MAX_OUTPUT = 1;\n     }\n \n     public static final class InputConstants \n     {\n-        public static final double DEFAULT_DEADBAND = 0.15;\n-        public static final boolean DEFAULT_FORZA_MODE = false;\n+        public static final double DRIVE_JOYSTICK_DEADBAND = 0.0;\n+        public static final double ARCADE_JOY_DEADBAND = 0.0;\n+        public static final double FORZA_DEADBAND = 0.0;\n+        public static final boolean DEFAULT_FORZA_MODE = true;\n     }\n }"
  },
  {
    "sha": "c86e9b2515a1db37a094c0edac0da05e9156a532",
    "filename": "src/main/java/frc/robot/commands/ArcadeDrive.java",
    "status": "modified",
    "additions": 15,
    "deletions": 15,
    "changes": 30,
    "blob_url": "https://github.com/Team293/DeepBot/blob/b0dc2e37498e734ccf9eb0aa9765abf617e7cdba/src/main/java/frc/robot/commands/ArcadeDrive.java",
    "raw_url": "https://github.com/Team293/DeepBot/raw/b0dc2e37498e734ccf9eb0aa9765abf617e7cdba/src/main/java/frc/robot/commands/ArcadeDrive.java",
    "contents_url": "https://api.github.com/repos/Team293/DeepBot/contents/src/main/java/frc/robot/commands/ArcadeDrive.java?ref=b0dc2e37498e734ccf9eb0aa9765abf617e7cdba",
    "patch": "@@ -29,7 +29,8 @@\n     private final Drivetrain m_drivetrain;\n     private final XboxController m_xboxcontroller;\n \n-    private double m_deadband;\n+    private double m_forzaDeadband;\n+    private double m_arcadeJoyDeadband;\n     private boolean m_forzaEnabled;\n     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS\n \n@@ -47,9 +48,11 @@ public ArcadeDrive(Drivetrain subsystem, XboxController xboxcontroller)\n         addRequirements(m_drivetrain);\n         m_xboxcontroller = xboxcontroller;\n         \n-        m_deadband = DEFAULT_DEADBAND;\n+        m_forzaDeadband = FORZA_DEADBAND;\n+        m_arcadeJoyDeadband = ARCADE_JOY_DEADBAND;\n         m_forzaEnabled = DEFAULT_FORZA_MODE;\n-        SmartDashboard.putNumber(\"Deadband\", m_deadband);\n+        SmartDashboard.putNumber(\"Arcade Joystick Deadband\", m_arcadeJoyDeadband);\n+        SmartDashboard.putNumber(\"Forza Deadband\", m_forzaDeadband);\n         SmartDashboard.putBoolean(\"Forza Mode\", m_forzaEnabled);\n         // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES\n     }\n@@ -70,21 +73,18 @@ public void execute()\n         double triggerLeft;\n         \n         //Get deadband value set in SmartDashboard\n-        m_deadband = SmartDashboard.getNumber(\"Deadband\", DEFAULT_DEADBAND);\n+        m_forzaDeadband = SmartDashboard.getNumber(\"Forza Deadband\", FORZA_DEADBAND);\n+        m_arcadeJoyDeadband = SmartDashboard.getNumber(\"Arcade Joystick Deadband\", ARCADE_JOY_DEADBAND);\n         m_forzaEnabled = SmartDashboard.getBoolean(\"Forza Mode\", DEFAULT_FORZA_MODE);\n \n         //Checks if joystick value is higher or lower than deadband value\n-        turning = m_xboxcontroller.getX(Hand.kLeft);\n-        SmartDashboard.putNumber(\"AD: Turning\", turning);\n-\n+        turning = m_drivetrain.clampInput((m_xboxcontroller.getX(Hand.kLeft)),m_arcadeJoyDeadband);\n         //Check if we should use the triggers for speed\n         if(m_forzaEnabled)\n         {\n             //Get trigger values\n             triggerRight = m_xboxcontroller.getTriggerAxis(Hand.kRight);\n             triggerLeft = m_xboxcontroller.getTriggerAxis(Hand.kLeft);\n-            SmartDashboard.putNumber(\"AD: Right Trigger\", triggerRight);\n-            SmartDashboard.putNumber(\"AD: Left Trigger\", triggerLeft);\n \n             if(triggerRight >= triggerLeft)\n             {\n@@ -96,20 +96,20 @@ public void execute()\n                 //Going in reverse! Right trigger was zero, set speed to left trigger\n                 speed = -triggerLeft;\n             }\n+            \n+            speed = m_drivetrain.clampInput(speed,m_forzaDeadband);\n         }\n         else\n         {\n             //Use the stick, note that the joystick is inverted, -1 is up, 1 is down\n-            speed = m_xboxcontroller.getY(Hand.kLeft) * -1;\n-            SmartDashboard.putNumber(\"AD: Speed\", speed);\n+            speed = m_drivetrain.clampInput((m_xboxcontroller.getY(Hand.kLeft) * -1),m_arcadeJoyDeadband);\n         }\n \n-        //Clamp input to verify they are valid and greater than the deadband\n-        turning = m_drivetrain.clampInput(turning, m_deadband);\n-        speed = m_drivetrain.clampInput(speed, m_deadband);\n+        SmartDashboard.putNumber(\"AD: Speed\", speed);\n+        SmartDashboard.putNumber(\"AD: Turning\", turning);\n \n         //Pass input to arcadeDrive\n-        m_drivetrain.arcadeDrive(speed, turning);  \n+        m_drivetrain.velArcadeDrive(speed, turning);  \n     }\n \n     // Called once the command ends or is interrupted."
  },
  {
    "sha": "05061338d5bf6d1b09d3df529351cfefe30131ef",
    "filename": "src/main/java/frc/robot/subsystems/Drivetrain.java",
    "status": "modified",
    "additions": 96,
    "deletions": 35,
    "changes": 131,
    "blob_url": "https://github.com/Team293/DeepBot/blob/b0dc2e37498e734ccf9eb0aa9765abf617e7cdba/src/main/java/frc/robot/subsystems/Drivetrain.java",
    "raw_url": "https://github.com/Team293/DeepBot/raw/b0dc2e37498e734ccf9eb0aa9765abf617e7cdba/src/main/java/frc/robot/subsystems/Drivetrain.java",
    "contents_url": "https://api.github.com/repos/Team293/DeepBot/contents/src/main/java/frc/robot/subsystems/Drivetrain.java?ref=b0dc2e37498e734ccf9eb0aa9765abf617e7cdba",
    "patch": "@@ -14,6 +14,8 @@\n import edu.wpi.first.wpilibj.drive.DifferentialDrive;\n import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n import edu.wpi.first.wpilibj2.command.SubsystemBase;\n+import edu.wpi.first.wpiutil.math.MathUtil;\n+\n import static frc.robot.Constants.DrivetrainConstants.*;\n import static frc.robot.Constants.InputConstants.*;\n \n@@ -50,8 +52,7 @@\n     \n     private double m_velocityLimitPercentage = DEFAULT_MAX_VELOCITY_PERCENTAGE;\n     private double m_turningLimitPercentage = DEFAULT_MAX_TURNING_SPEED;\n-    private double m_deadband = DEFAULT_DEADBAND;\n-    private DifferentialDrive m_differentialDrive;\n+    private double m_driveJoyDeadband = DRIVE_JOYSTICK_DEADBAND;\n \n     AHRS m_navX;\n     /**\n@@ -67,6 +68,7 @@ public Drivetrain()\n         m_leftMotorFollow.setIdleMode(IdleMode.kCoast);\n         leftEncoder = m_leftMotorLead.getEncoder();\n         leftEncoder.setPositionConversionFactor(ENCODER_CONVERSION_FACTOR);\n+        leftEncoder.setVelocityConversionFactor(ENCODER_CONVERSION_FACTOR);\n         leftPID = m_leftMotorLead.getPIDController();\n         leftPID.setOutputRange(MIN_OUTPUT, MAX_OUTPUT);\n         leftPID.setSmartMotionMaxVelocity(MAX_VELOCITY, SMART_MOTION_SLOT);\n@@ -80,7 +82,8 @@ public Drivetrain()\n         m_rightMotorLead.setIdleMode(IdleMode.kCoast);\n         m_rightMotorFollow.setIdleMode(IdleMode.kCoast);\n         rightEncoder = m_rightMotorLead.getEncoder();\n-        rightEncoder.setPositionConversionFactor(0.25);\n+        rightEncoder.setPositionConversionFactor(ENCODER_CONVERSION_FACTOR);\n+        rightEncoder.setVelocityConversionFactor(ENCODER_CONVERSION_FACTOR);\n         rightPID = m_rightMotorLead.getPIDController();\n         rightPID.setOutputRange(MIN_OUTPUT, MAX_OUTPUT);\n         rightPID.setSmartMotionMaxVelocity(MAX_VELOCITY, SMART_MOTION_SLOT);\n@@ -97,11 +100,10 @@ public Drivetrain()\n         rightPID.setD(KD);\n         rightPID.setFF(KF);\n \n-        m_differentialDrive = new DifferentialDrive(m_leftMotorLead, m_rightMotorLead);\n         m_navX = new AHRS(Port.kMXP);\n \n         //Setup SmartDashboard\n-        SmartDashboard.putNumber(\"Deadband\", m_deadband);\n+        SmartDashboard.putNumber(\"Drive Joystick Deadband\", m_driveJoyDeadband);\n         SmartDashboard.putNumber(\"Max Velocity Percentage\", m_velocityLimitPercentage);\n         SmartDashboard.putNumber(\"Max Turning Percentage\", m_turningLimitPercentage);\n     }\n@@ -117,31 +119,24 @@ public void periodic()\n \n         SmartDashboard.putNumber(\"NavX Heading\", m_navX.getAngle());\n         SmartDashboard.putNumber(\"NavX Heading\", m_navX.getFusedHeading());\n+        SmartDashboard.putNumber(\"NavX Turn Rate\", m_navX.getRate());\n+        SmartDashboard.putNumber(\"NavX X Displacement\", m_navX.getDisplacementX());\n+        SmartDashboard.putNumber(\"NavX Y Displacement\", m_navX.getDisplacementY());\n+        SmartDashboard.putNumber(\"Left Motor Velocity\", leftEncoder.getVelocity());\n+        SmartDashboard.putNumber(\"Right Motor Velocity\", rightEncoder.getVelocity());\n+\n+\n+        m_driveJoyDeadband = MathUtil.clamp(SmartDashboard.getNumber(\"Drive Joystick Deadband\", DRIVE_JOYSTICK_DEADBAND),0,1);\n+        SmartDashboard.putNumber(\"Drive Joystick Deadband\", m_driveJoyDeadband);\n+\n+        m_velocityLimitPercentage = MathUtil.clamp(SmartDashboard.getNumber(\"Max Velocity Percentage\", DEFAULT_MAX_VELOCITY_PERCENTAGE),0,1);\n+        SmartDashboard.putNumber(\"Max Velocity Percentage\", m_velocityLimitPercentage);\n+\n+        m_turningLimitPercentage = MathUtil.clamp(SmartDashboard.getNumber(\"Max Velocity Percentage\", DEFAULT_MAX_TURNING_SPEED),0,1);\n+        SmartDashboard.putNumber(\"Max Velocity Percentage\", m_turningLimitPercentage);\n+\n \n-        m_deadband = SmartDashboard.getNumber(\"Deadband\", DEFAULT_DEADBAND);\n-        m_velocityLimitPercentage = SmartDashboard.getNumber(\"Max Velocity Percentage\", DEFAULT_MAX_VELOCITY_PERCENTAGE);\n-        if(m_velocityLimitPercentage > 1)\n-        {\n-            m_velocityLimitPercentage = 1;\n-            SmartDashboard.putNumber(\"Max Velocity Percentage\", m_velocityLimitPercentage);\n-        }\n-        else if(m_velocityLimitPercentage < 0)\n-        {\n-            m_velocityLimitPercentage = 0;\n-            SmartDashboard.putNumber(\"Max Velocity Percentage\", m_velocityLimitPercentage);\n-        }\n \n-        m_turningLimitPercentage = SmartDashboard.getNumber(\"Max Turning Percentage\", DEFAULT_MAX_TURNING_SPEED);\n-        if(m_turningLimitPercentage > 1)\n-        {\n-            m_turningLimitPercentage = 1;\n-            SmartDashboard.putNumber(\"Max Turning Percentage\", m_turningLimitPercentage);\n-        }\n-        else if(m_turningLimitPercentage < 0)\n-        {\n-            m_turningLimitPercentage = 0;\n-            SmartDashboard.putNumber(\"Max Turning Percentage\", m_turningLimitPercentage);\n-        }\n     } \n \n     @Override\n@@ -155,10 +150,10 @@ public void dumbDrive(double leftPos, double rightPos)\n     {\n         double retval = 0.0;\n         \n-        retval = clampInput(leftPos, m_deadband);\n+        retval = clampInput(leftPos, m_driveJoyDeadband);\n         m_leftMotorLead.set(retval * m_velocityLimitPercentage);    \n \n-        retval = clampInput(rightPos, m_deadband);\n+        retval = clampInput(rightPos, m_driveJoyDeadband); // TODO fix naming conventions\n         m_rightMotorLead.set(retval * m_velocityLimitPercentage);    \n     }\n \n@@ -173,8 +168,8 @@ public void velocityDrive(double leftPos, double rightPos, boolean useSlowModifi\n             leftPos = -rightPos;\n             rightPos = -tempValue;\n         }\n-\n-        retval = clampInput(leftPos, m_deadband);\n+        \n+        retval = clampInput(leftPos, m_driveJoyDeadband);\n         if(useSlowModifier)\n         {\n             //example set velocity\n@@ -185,7 +180,7 @@ public void velocityDrive(double leftPos, double rightPos, boolean useSlowModifi\n             leftPID.setReference(retval * MAX_VELOCITY * m_velocityLimitPercentage, ControlType.kVelocity);\n         }\n \n-        retval = clampInput(rightPos, m_deadband);\n+        retval = clampInput(rightPos, m_driveJoyDeadband);\n         if(useSlowModifier)\n         {\n             rightPID.setReference(retval * MAX_VELOCITY * m_velocityLimitPercentage * VELOCITY_SLOWDOWN_MODIFIER, ControlType.kVelocity);\n@@ -218,11 +213,71 @@ public void visionDrive(double left, double right)\n         rightPID.setReference((right * MAX_VELOCITY), ControlType.kVelocity);\n     }\n \n-    public void arcadeDrive(double forwardMovement, double turning)\n+    //Very much copied from the ArcadeDrive method of the DifferentialDrive class\n+    public void arcadeDrive(double velocity, double turning)\n     {\n-        m_differentialDrive.arcadeDrive(forwardMovement * m_velocityLimitPercentage, turning * m_turningLimitPercentage);\n+        velocity = velocity * m_velocityLimitPercentage;\n+        turning = turning * m_turningLimitPercentage;\n+        double leftMotorOutput;\n+        double rightMotorOutput;\n+    \n+        double maxInput = Math.copySign(Math.max(Math.abs(velocity), Math.abs(turning)), velocity);\n+        if (velocity >= 0.0) {\n+            // First quadrant, else second quadrant\n+            if (turning >= 0.0) {\n+              leftMotorOutput = maxInput;\n+              rightMotorOutput = velocity - turning;\n+            } else {\n+              leftMotorOutput = velocity + turning;\n+              rightMotorOutput = maxInput;\n+            }\n+          } else {\n+            // Third quadrant, else fourth quadrant\n+            if (turning >= 0.0) {\n+              leftMotorOutput = velocity + turning;\n+              rightMotorOutput = maxInput;\n+            } else {\n+              leftMotorOutput = maxInput;\n+              rightMotorOutput = velocity - turning;\n+            }\n+          }\n+        m_leftMotorLead.set(clampInput(leftMotorOutput));\n+        m_rightMotorLead.set(clampInput(rightMotorOutput) * -1);\n+        \n     }\n+\n+    public void velArcadeDrive(double velocity, double turning)\n+    {\n+        velocity = velocity * m_velocityLimitPercentage;\n+        turning = turning * m_turningLimitPercentage;\n+        double leftMotorOutput;\n+        double rightMotorOutput;\n     \n+        double maxInput = Math.copySign(Math.max(Math.abs(velocity), Math.abs(turning)), velocity);\n+        if (velocity >= 0.0) {\n+            // First quadrant, else second quadrant\n+            if (turning >= 0.0) {\n+              leftMotorOutput = maxInput;\n+              rightMotorOutput = velocity - turning;\n+            } else {\n+              leftMotorOutput = velocity + turning;\n+              rightMotorOutput = maxInput;\n+            }\n+          } else {\n+            // Third quadrant, else fourth quadrant\n+            if (turning >= 0.0) {\n+              leftMotorOutput = velocity + turning;\n+              rightMotorOutput = maxInput;\n+            } else {\n+              leftMotorOutput = maxInput;\n+              rightMotorOutput = velocity - turning;\n+            }\n+          }\n+        leftPID.setReference(leftMotorOutput * MAX_VELOCITY, ControlType.kVelocity);\n+        rightPID.setReference(rightMotorOutput * MAX_VELOCITY * -1, ControlType.kVelocity);\n+\n+    }\n+\n     public double clampInput(double input, double deadband) \n     {\n         double retval = 0.0;\n@@ -244,4 +299,10 @@ public double clampInput(double input, double deadband)\n \n         return retval;\n     }\n+    \n+    public double clampInput(double input) \n+    {\n+        return clampInput(input, 0.0);\n+    }\n+\n }"
  }
]
