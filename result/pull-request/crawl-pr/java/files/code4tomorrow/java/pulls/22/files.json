[
  {
    "sha": "0ec6afcd9ad72c7f02a6da99a626caf93448495e",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/.gitignore",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/.gitignore",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/.gitignore?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -3,4 +3,5 @@\n \n # ignore files\n c4t-java.iml\n-.DS_Store\n\\ No newline at end of file\n+.DS_Store\n+"
  },
  {
    "sha": "04fd4f5c4b80d8ef221b7f17a11a122250ea8a58",
    "filename": "src/com/codefortomorrow/advanced/chapter16/practice/LinkedList.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/advanced/chapter16/practice/LinkedList.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/advanced/chapter16/practice/LinkedList.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/advanced/chapter16/practice/LinkedList.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,27 @@\n+package com.codefortomorrow.advanced.chapter16.practice;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ *\n+ * Implement a simple LinkedList\n+ * You will need to create a LinkedListNode class, which represents each item/node in the linked list\n+ * Assume that the elements in the linked list are all of type int\n+ * Required functionality...\n+ * - head(): get head of list\n+ * - tail(): get tail of list\n+ * - add(): add to tail of list\n+ * - push(): push to head of list\n+ * - pop(): remove head of list\n+ * - toString(): return a String representation of the list\n+ */\n+\n+public class LinkedList {\n+\n+    public static void main(String[] args) {\n+        // write your code here\n+\n+    }\n+}\n+\n+class LinkedListNode {}"
  },
  {
    "sha": "848e4820e0d0db778a7feddf85a27bb9c1dd8068",
    "filename": "src/com/codefortomorrow/advanced/chapter16/solutions/LinkedList.java",
    "status": "added",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/advanced/chapter16/solutions/LinkedList.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/advanced/chapter16/solutions/LinkedList.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/advanced/chapter16/solutions/LinkedList.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,169 @@\n+package com.codefortomorrow.advanced.chapter16.solutions;\n+\n+// UUID to represent each node's unique ID\n+import java.util.UUID;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ *\n+ * Implement a simple LinkedList\n+ * You will need to create a LinkedListNode class, which represents each item/node in the linked list\n+ * Assume that the elements in the linked list are all of type int\n+ * Required functionality...\n+ * - head(): get head of list\n+ * - tail(): get tail of list\n+ * - add(): add to tail of list\n+ * - push(): push to head of list\n+ * - pop(): remove head of list\n+ * - toString(): return a String representation of the list\n+ */\n+\n+public class LinkedList {\n+\n+    private LinkedListNode head;\n+\n+    /**\n+     * default constructor\n+     */\n+    public LinkedList() {\n+        head = null;\n+    }\n+\n+    /**\n+     * constructor with first value\n+     * @param value  first element in the linked list\n+     */\n+    public LinkedList(int value) {\n+        // create first node\n+        head = new LinkedListNode(value, null);\n+    }\n+\n+    /**\n+     * get head of Linked List\n+     * @return first element of the linked list\n+     */\n+    public LinkedListNode head() {\n+        return this.head;\n+    }\n+\n+    /**\n+     * traverse and get tail of linked list\n+     * @return last element of the linked list\n+     */\n+    public LinkedListNode tail() {\n+        LinkedListNode current = head;\n+        if (current == null) return null;\n+\n+        while (current.next() != null) {\n+            current = current.next();\n+        }\n+\n+        return current;\n+    }\n+\n+    /**\n+     * add new element (node) to linked list\n+     * @param value  element to add to the end of the linked list\n+     */\n+    public void add(int value) {\n+        LinkedListNode tail = tail();\n+        if (tail == null) {\n+            head = new LinkedListNode(value, null);\n+        } else {\n+            tail.setNext(new LinkedListNode(value, null));\n+        }\n+    }\n+\n+    /**\n+     * push (add element to head of linkedlist)\n+     */\n+    public void push(int value) {\n+        LinkedListNode newHead = new LinkedListNode(value, head);\n+        head = newHead;\n+    }\n+\n+    /**\n+     * pop (remove and return head of linkedlist)\n+     * @return the node that was removed\n+     */\n+    public LinkedListNode pop() {\n+        LinkedListNode popped = head;\n+        head = head.next();\n+        return popped;\n+    }\n+\n+    /**\n+     * Returns a String version of the LinkedList\n+     * @return a String version of the LinkedList\n+     */\n+    @Override\n+    public String toString() {\n+        String list = \"[\";\n+        LinkedListNode current = head;\n+        if (current == null) return null;\n+        do {\n+            list += Integer.toString(current.value()) + \", \";\n+            current = current.next();\n+        } while (current != null);\n+\n+        // Remove trailing comma and space after last list element\n+        list = list.substring(0, list.length() - 2);\n+        return list + \"]\";\n+    }\n+}\n+\n+class Node {\n+\n+    private UUID ID;\n+    private int value;\n+\n+    /**\n+     * Constructs a list node with the given value\n+     * @param value  the value stored in this Node\n+     */\n+    public Node(int value) {\n+        this.ID = UUID.randomUUID();\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Returns the value of this Node\n+     * @return the value of this Node\n+     */\n+    public int value() {\n+        return this.value;\n+    }\n+}\n+\n+class LinkedListNode extends Node {\n+\n+    private LinkedListNode next;\n+\n+    /**\n+     * Constructs a LinkedListNode\n+     * @param value  the value stored in this node\n+     * @param next  the next node\n+     */\n+    public LinkedListNode(int value, LinkedListNode next) {\n+        super(value);\n+        this.next = next;\n+    }\n+\n+    /**\n+     * Returns the next node\n+     * @return the next node\n+     */\n+    public LinkedListNode next() {\n+        return this.next;\n+    }\n+\n+    /**\n+     * Sets the next node\n+     * @param next  the next node\n+     */\n+    public void setNext(LinkedListNode next) {\n+        this.next = next;\n+        return;\n+    }\n+}"
  },
  {
    "sha": "cebb705559f29eb0bd0a200e1806eca65a7b0f8e",
    "filename": "src/com/codefortomorrow/beginner/chapter1/practice/Comments.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/practice/Comments.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/practice/Comments.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter1/practice/Comments.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,38 @@\n+package com.codefortomorrow.beginner.chapter1.practice;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * You'll be writing your first ever comment today! \n+ * What we'll go over: \n+ * - single line comments\n+ * - multi line comments\n+ */\n+\n+ // a class is an \"object\" where we will place all our code inside\n+ public class Comments {\n+     // the main method (below) is the first thing that runs when your program is run\n+    public static void main(String[] args) {\n+        // this is a single line comment, I can write anything here\n+        // single line comments aren't run by Java!\n+        // they can be used to annotate your code!\n+\n+        /**\n+         * this is a multi\n+         * line\n+         * comment\n+         * \n+         * It can span across multiple lines!\n+         */\n+\n+        // YOUR ASSIGNMENT: write 1 single-line comment and 1 multi-line comment on the lines below...\n+\n+\n+\n+\n+\n+\n+\n+    }\n+ }\n\\ No newline at end of file"
  },
  {
    "sha": "832742a422dbf6de685e6e777755b742215203f1",
    "filename": "src/com/codefortomorrow/beginner/chapter1/practice/HelloWorld.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/practice/HelloWorld.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/practice/HelloWorld.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter1/practice/HelloWorld.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,19 @@\n+package com.codefortomorrow.beginner.chapter1.practice;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Welcome to Java! \n+ * This may be your first ever java program!\n+ * We'll begin your journey with the infamous Hello World program!\n+ */\n+\n+ // a class is an \"object\" where we will place all our code inside\n+ public class HelloWorld {\n+    // the main method (below) is the first thing that runs when your program is run\n+    public static void main(String[] args) {\n+        // write code here (replace the \"\" with \"Hello World!\")\n+        System.out.println(\"\");\n+    }\n+ }"
  },
  {
    "sha": "446b385f9eea44ad960ce61781f11f2a7183ce17",
    "filename": "src/com/codefortomorrow/beginner/chapter1/solutions/Comments.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/solutions/Comments.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/solutions/Comments.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter1/solutions/Comments.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,38 @@\n+package com.codefortomorrow.beginner.chapter1.solutions;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * You'll be writing your first ever comment today! \n+ * What we'll go over: \n+ * - single line comments\n+ * - multi line comments\n+ */\n+\n+ // a class is an \"object\" where we will place all our code inside\n+ public class Comments {\n+     // the main method (below) is the first thing that runs when your program is run\n+    public static void main(String[] args) {\n+        // this is a single line comment, I can write anything here\n+        // single line comments aren't run by Java!\n+        // they can be used to annotate your code!\n+\n+        /**\n+         * this is a multi\n+         * line\n+         * comment\n+         * \n+         * It can span across multiple lines!\n+         */\n+\n+        // YOUR ASSIGNMENT: write 1 single-line comment and 1 multi-line comment on the lines below...\n+\n+        // Hi my name is Armeet!\n+\n+        /**\n+         * I like teaching Java, and \n+         * good luck on your journey!\n+         */\n+    }\n+ }\n\\ No newline at end of file"
  },
  {
    "sha": "39a0de192b50ac14324785753298ef3721a1e88c",
    "filename": "src/com/codefortomorrow/beginner/chapter1/solutions/HelloWorld.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/solutions/HelloWorld.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter1/solutions/HelloWorld.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter1/solutions/HelloWorld.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,19 @@\n+package com.codefortomorrow.beginner.chapter1.solutions;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Welcome to Java! \n+ * This may be your first ever java program!\n+ * We'll begin your journey with the infamous Hello World program!\n+ */\n+\n+ // a class is an \"object\" where we will place all our code inside\n+ public class HelloWorld{\n+    // the main method (below) is the first thing that runs when your program is run\n+    public static void main(String[] args) {\n+        // write code here (replace the \"\" with \"Hello World!\")\n+        System.out.println(\"Hello World!\");\n+    }\n+ }\n\\ No newline at end of file"
  },
  {
    "sha": "bb28674bdfc3c64907a23ccf4cf903f1e69e7040",
    "filename": "src/com/codefortomorrow/beginner/chapter2/practice/ApplesOranges.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/practice/ApplesOranges.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/practice/ApplesOranges.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter2/practice/ApplesOranges.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,28 @@\n+package com.codefortomorrow.beginner.chapter2.practice;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Print out the number of apples and oranges!\n+ */\n+\n+ public class ApplesOranges {\n+    public static void main(String[] args) {\n+        // write your code here\n+        \n+        // define an integer variable called numOranges with value 10 (line 15)\n+\n+        \n+        // define an integer variable called numApples with value 24 (line 18)\n+\n+        \n+        // print out number of oranges using variables, output: \"I have 10 oranges.\" (line 21)\n+\n+\n+        // print out number of apples using variables, output: \"I have 24 apples.\" (line 24)\n+\n+\n+    }\n+ }\n+   "
  },
  {
    "sha": "e5b96787a9e7bc8548e7576c83b8d58ba1aa2248",
    "filename": "src/com/codefortomorrow/beginner/chapter2/practice/VariableTypes.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/practice/VariableTypes.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/practice/VariableTypes.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter2/practice/VariableTypes.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,34 @@\n+package com.codefortomorrow.beginner.chapter2.practice;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Define different types of variables\n+ */\n+\n+ public class VariableTypes {\n+    public static void main(String[] args) {\n+        // write your code here\n+        \n+        // define an integer variable on line 15\n+\n+        \n+        // define a float variable on line 18\n+\n+        \n+        // define a double variable on line 21\n+\n+\n+        // define a boolean variable on line 24 (Hint: true/false)\n+\n+\n+        // define a character variable on line 27\n+\n+\n+        // define a string variable on line 30 \n+\n+\n+    }\n+ }\n+   "
  },
  {
    "sha": "b35c1e9e35d89336e81dd1ae3a4585edf5ce929b",
    "filename": "src/com/codefortomorrow/beginner/chapter2/solutions/ApplesOranges.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/solutions/ApplesOranges.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/solutions/ApplesOranges.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter2/solutions/ApplesOranges.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,28 @@\n+package com.codefortomorrow.beginner.chapter2.solutions;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Print out the number of apples and oranges!\n+ */\n+\n+ public class ApplesOranges {\n+    public static void main(String[] args) {\n+        // write your code here\n+        \n+        // define an integer variable called numOranges with value 10 (line 15)\n+        int numOranges = 10;\n+        \n+        // define an integer variable called numApples with value 24 (line 18)\n+        int numApples = 24;\n+        \n+        // print out number of oranges using variables, output: \"I have 10 oranges.\" (line 21)\n+        System.out.println(\"I have \" + numOranges + \" oranges.\");\n+\n+        // print out number of apples using variables, output: \"I have 24 apples.\" (line 24)\n+        System.out.println(\"I have \" + numApples + \" apples.\");\n+\n+    }\n+ }\n+   "
  },
  {
    "sha": "f6850ce4b8a7203de73a4297edf9b0dc525cc8e0",
    "filename": "src/com/codefortomorrow/beginner/chapter2/solutions/VariableTypes.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/solutions/VariableTypes.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter2/solutions/VariableTypes.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter2/solutions/VariableTypes.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,34 @@\n+package com.codefortomorrow.beginner.chapter2.solutions;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Define different types of variables\n+ */\n+\n+ public class VariableTypes {\n+    public static void main(String[] args) {\n+        // write your code here\n+        \n+        // define an integer variable on line 15\n+        int age = 23;\n+        \n+        // define a float variable on line 18\n+        float pi = 3.14f;\n+        \n+        // define a double variable on line 21\n+        double decimal = 23.2352536d;\n+\n+        // define a boolean variable on line 24 (Hint: true/false)\n+        double dogsOut = true;  // the dogs are out :)\n+\n+        // define a character variable on line 27\n+        char letter = 'A';\n+\n+        // define a string variable on line 30 \n+        char name = \"Jeff\";\n+        \n+    }\n+ }\n+   "
  },
  {
    "sha": "df2013fdba18c4f0de429130685c09637faa6ffc",
    "filename": "src/com/codefortomorrow/beginner/chapter4/practice/CarDealership.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter4/practice/CarDealership.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter4/practice/CarDealership.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter4/practice/CarDealership.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,28 @@\n+package com.codefortomorrow.beginner.chapter4.practice;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Manage a car dealership and take inventory of all cars sold!\n+ */\n+\n+ public class CarDealership {\n+    public static void main(String[] args) {\n+        // write your code here\n+        \n+        // define 3 integer constants, representing the prices of 3 cars sold in USD (line 15-17)\n+        \n+\n+        \n+\n+        // define an integer variable, which represents the sum of the prices of these 3 cars (line 20)\n+        \n+        \n+        // print out the formatted revenue after selling these 3 cars, output: \"I sold 3 cars for $XXXXXX.\" (line 23)\n+        \n+\n+\n+    }\n+ }\n+   \n\\ No newline at end of file"
  },
  {
    "sha": "10fdd826459330887f34ee8809abf693e070e10a",
    "filename": "src/com/codefortomorrow/beginner/chapter4/solutions/CarDealership.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/code4tomorrow/java/blob/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter4/solutions/CarDealership.java",
    "raw_url": "https://github.com/code4tomorrow/java/raw/508db44ef4c6d814289390d83caf3bcd220935ee/src/com/codefortomorrow/beginner/chapter4/solutions/CarDealership.java",
    "contents_url": "https://api.github.com/repos/code4tomorrow/java/contents/src/com/codefortomorrow/beginner/chapter4/solutions/CarDealership.java?ref=508db44ef4c6d814289390d83caf3bcd220935ee",
    "patch": "@@ -0,0 +1,28 @@\n+package com.codefortomorrow.beginner.chapter4.solutions;\n+\n+/**\n+ * @author ArmeetJatyani\n+ * March 2021\n+ * \n+ * Manage a car dealership and take inventory of all cars sold!\n+ */\n+\n+ public class CarDealership {\n+    public static void main(String[] args) {\n+        // write your code here\n+        \n+        // define 3 integer constants, representing the prices of 3 cars sold in USD (line 15-17)\n+        final int car1 = 30000;\n+        final int car2 = 24650;\n+        final int car3 = 253630;\n+\n+        // define an integer variable, which represents the sum of the prices of these 3 cars (line 20)\n+        int revenue = car1 + car2 + car3;\n+        \n+        // print out the formatted revenue after selling these 3 cars, output: \"I sold 3 cars for $XXXXXX.\" (line 23)\n+        System.out.println(\"I sold 3 cars for $\" + revenue + \".\");\n+\n+\n+    }\n+ }\n+   \n\\ No newline at end of file"
  }
]
