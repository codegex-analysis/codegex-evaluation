[
  {
    "sha": "c90834f2d607afe55e6104d8aa2cdfffb713f688",
    "filename": "TEKCamp.iml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/TEKCamp.iml",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/TEKCamp.iml",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/TEKCamp.iml?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output />\n+    <content url=\"file://$MODULE_DIR$\">\n+      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n+    </content>\n+    <orderEntry type=\"inheritedJdk\" />\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n+  </component>\n+</module>\n\\ No newline at end of file"
  },
  {
    "sha": "7d12adb370ef7cead05b0d9954aaf2c75f0d0684",
    "filename": "fax.ser",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/fax.ser",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/fax.ser",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/fax.ser?ref=24e75c21b220934fcfcaa917d41b88b0bb274421"
  },
  {
    "sha": "db32e78ec0aa625d261297faf5967f785516a795",
    "filename": "msg.ser",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/msg.ser",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/msg.ser",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/msg.ser?ref=24e75c21b220934fcfcaa917d41b88b0bb274421"
  },
  {
    "sha": "7b5dc4b31f07a3778867061ee069de71aeef22e9",
    "filename": "src/java_1/collections/CollectionsChallenges.java",
    "status": "modified",
    "additions": 121,
    "deletions": 5,
    "changes": 126,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/collections/CollectionsChallenges.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/collections/CollectionsChallenges.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_1/collections/CollectionsChallenges.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -7,35 +7,128 @@\n \tpublic static void main(String[] args) {\n //\t\tComplete the code challenges for the following static methods\n \n+\t\tSystem.out.println(\"findVal() Method: \");\n+\t\tArrayList<Integer> arrList = new ArrayList<>();\n+\t\tarrList.add(4);\n+\t\tarrList.add(5);\n+\t\tarrList.add(6);\n+\t\tarrList.add(7);\n+\t\tfindVal(4, arrList);\n+\n+\t\tSystem.out.println(\"convertArrToList() Method: \");\n+\t\tObject[] arr = new Object[0];\n+\t\tconvertArrToList(arr);\n+\n+\t\tSystem.out.println(\"listToSet() Method: \");\n+\t\tList<String> statesList = Arrays.asList(\"Arizona\", \"California\", \"Colorado\", \"Delaware\", \"Georgia\", \"New Mexico\", \"Texas\");\n+\t\tlistToSet(statesList);\n+\n+\t\tSystem.out.println(\"addToList() Method: \");\n+\t\tArrayList<Integer> listy = new ArrayList<>();\n+\t\tlisty.add(3);\n+\t\tlisty.add(4);\n+\t\tlisty.add(5);\n+\t\tlisty.add(6);\n+\t\taddToList(44, listy);\n+\n+\t\tSystem.out.println(\"removeFromList() Method: \");\n+\t\tArrayList<Integer> list = new ArrayList<>();\n+\t\tlist.add(4);\n+\t\tlist.add(5);\n+\t\tlist.add(6);\n+\t\tlist.add(7);\n+\t\tremoveFromList(7, list);\n+\n+\t\tSystem.out.println(\"insertIntoList() Method: \");\n+\t\tArrayList<Integer> insertList = new ArrayList<>();\n+\t\tinsertList.add(4);\n+\t\tinsertList.add(5);\n+\t\tinsertList.add(6);\n+\t\tinsertList.add(7);\n+\t\tinsertList.add(8);\n+\t\tinsertIntoList(9, 10, insertList);\n+\n+\t\tSystem.out.println(\"reverseNums() Method: \");\n+\t\tArrayList<Integer> numberList = new ArrayList<>();\n+\t\tnumberList.add(4);\n+\t\tnumberList.add(5);\n+\t\tnumberList.add(6);\n+\t\tnumberList.add(7);\n+\t\tnumberList.add(8);\n+\t\treverseNums(numberList);\n+\n+\t\tSystem.out.println(\"reverseLinkedList() Method: \");\n+\t\tLinkedList<String> linkedList = new LinkedList<>();\n+\t\tlinkedList.add(\"Christopher\");\n+\t\tlinkedList.add(\"Dionne\");\n+\t\tlinkedList.add(\"Etta\");\n+\t\tlinkedList.add(\"Fiona\");\n+\t\treverseLinkedList(linkedList, true);\n+\n+\t\tSystem.out.println(\"removeDuplicates() Method: \");\n+\t\tArrayList<String> namesList = new ArrayList<>();\n+\t\tnamesList.add(\"Christopher\");\n+\t\tnamesList.add(\"Christopher\");\n+\t\tnamesList.add(\"Dionne\");\n+\t\tnamesList.add(\"Etta\");\n+\t\tnamesList.add(\"Jennifer\");\n+\t\tremoveDuplicates(namesList);\n+\n \t}\n \n \n-\tstatic int findVal(int val, ArrayList<Integer> arrList) {\n+\tstatic Integer findVal(int val, ArrayList<Integer> arrList) {\n //\t\tfind a value in the input array list.  return it if found.  If not, return 0.\n+\t\tfor(Integer i : arrList){\n+\t\t\tif(val == i){\n+\t\t\t\tSystem.out.println(i);\n+\t\t\t}\n+\t\t\telse{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t}\n \t\treturn 0;\n \t}\n \n \tstatic List convertArrToList(Object[] array) {\n //\t\tconvert the array to a list and return it.\n-\t\treturn null;\n+\t\tObject[] arr = new Object[]{\"Christopher\", \"Mindy\", \"Barbara\", \"Whitney\", \"Jennifer\"};\n+\t\tList<Object> list = Arrays.asList(arr);\n+\t\tSystem.out.println(\"The following list has been returned: \" + list);\n+\t\treturn list;\n \t}\n \n \tstatic Set<String> listToSet(List<String> states) {\n //\t\tconvert a list of US states to a set.  return the set.\n+\t\tSet<String> set1 = new HashSet<>(states);\n+\t\tSystem.out.println(set1);\n \t\treturn null;\n \t}\n \n \tstatic int addToList(int x, ArrayList<Integer> numList) {\n-\t\t// add the x input to the array list.  return the value if succcessfully added.\n+\t\t// add the x input to the array list.  return the value if successfully added.\n+\t\tnumList.add(x);\n+\t\tSystem.out.println(\"The following value has been added to the list, and returned: \" + x);\n \t\treturn x;\n \t}\n \n \tstatic void removeFromList(int x, ArrayList<Integer> numList) {\n \t\t// remove the input parameter value x from the numList.\n+\t\tSystem.out.println(numList);\n+\t\tnumList.removeIf(num -> num.equals(x));\n+\t\tSystem.out.println(numList);\n \t}\n \n \tstatic int insertIntoList(int x, int i, ArrayList<Integer> numList) {\n \t\t// insert the the value x at index position i for the input numList.  If the index position is outside the bounds of the current numList, add it to the end of the array list.\n+\t\tSystem.out.println(numList);\n+\t\tif(i <= numList.size()){\n+\t\t\tnumList.add(i, x);\n+\t\t}\n+\t\telse{\n+\t\t\tnumList.add(numList.size(), x);\n+\t\t}\n+\t\tSystem.out.println(numList);\n \t\treturn x;\n \t}\n \n@@ -44,20 +137,43 @@ static int insertIntoList(int x, int i, ArrayList<Integer> numList) {\n \t\treverse the values of the nums list\n \t\treturn the reversed array list.\n \t\t*/\n-\t\treturn null;\n+\t\tSystem.out.println(nums);\n+\t\tCollections.reverse(nums);\n+\t\tSystem.out.println(\"The following list is returned and reversed: \" + nums);\n+\t\treturn nums;\n \t}\n \n \tstatic LinkedList<String> reverseLinkedList(LinkedList<String> linkedList, boolean mutate) {\n \n /*\t\treverse the linked list.  If the mutate boolean is set to true, reverse a copy of the linked list without mutating the original list.  If mutate is false, reverse the original linkedList in place.\n \t\texample : [\"red\",\"orange\",\"yellow\",\"green\",\"blue\",\"indigo\",\"violet\"] => reverseLinkedList => [violet, indigo, blue, green, yellow, orange, red]\n  */\n+\t\tSystem.out.println(linkedList);\n+\t\tif(!mutate) {\n+\t\t\tLinkedList<String> reversedList = new LinkedList<>();\n+\t\t\tfor (int i = linkedList.size() - 1; i >= 0; i--) {\n+\t\t\t\treversedList.add(linkedList.get(i));\n+\t\t\t}\n+\t\t\tSystem.out.println(reversedList);\n+\t\t}\n+\t\telse{\n+\t\t\tCollections.reverse(linkedList);\n+\t\t\tSystem.out.println(linkedList);\n+\t\t}\n \t\treturn linkedList;\n \t}\n \n \tstatic ArrayList<String> removeDuplicates(ArrayList<String> names) {\n //\t\tremove duplicates from the list of name strings.  return a new array list with the unique elements.\n-\t\treturn names;\n+\t\tSystem.out.println(names);\n+\t\tArrayList<String> newNamesList = new ArrayList<>();\n+\t\tfor(String name : names){\n+\t\t\tif(!newNamesList.contains(name)){\n+\t\t\t\tnewNamesList.add(name);\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println(\"Returned the following new array list with unique elements: \" + newNamesList);\n+\t\treturn newNamesList;\n \t}\n \n \tstatic class Person {"
  },
  {
    "sha": "22054177ce518aa26d279e56fa2469b1d9a9f9b2",
    "filename": "src/java_1/dataTypes/Arrays.java",
    "status": "modified",
    "additions": 45,
    "deletions": 9,
    "changes": 54,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/dataTypes/Arrays.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/dataTypes/Arrays.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_1/dataTypes/Arrays.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,36 +1,72 @@\n package java_1.dataTypes;\n+import java.util.ArrayList;\n \n class Arrays {\n-    int[] nums = new int[]{10,23,3,4,5,2,1};\n-    String[] greetings = new String[]{\"Hello\",\"Howdy\",\"Hallo\",\"Hola\",\"Bonjour\",\"Ciao\",\"أهلا و سهلا\"};\n-    int[] bits = new int[]{0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0};\n-    String[] colors = new String[]{\"bluebird\",\"yellow bumblebee\",\"black spider\", \"green monkey\",\"pink\",\"great gatsby\",\"feeding frenzy\",\"black bird\",\"Matterhorn\",\"Great White Lakes\",\"torah\",\"white bible\",\"green quran\", \"red herring\", \"Black Sea\"};\n \n-    void printNums() {\n+    static void printNums() {\n //        Programmatically print the nums array to the console.  Print each number on a new line.  The nums array is defined on this class.\n+        System.out.println(\"printNums() Method: \");\n+        int[] nums = new int[]{10,23,3,4,5,2,1};\n+        for(Integer i : nums) {\n+            System.out.println(i);\n+        }\n     };\n \n-    void greet(String name) {\n+    static void greet(String name) {\n //        Randomly greet the person with a random greeting found in the greetings array.\n //        For every greeting in the greetings array :\n /*        ex : craig => greet() => \"Hello Craig\"\n                \"ABRAM\" => greet() => \"Hola Abram\"\n                \"maTT => greet() => \"أهلا و سهلا Matt\"\n  */\n+        System.out.println(\"greet() Method: \");\n+        String[] greetings = new String[]{\"Hello\",\"Howdy\",\"Hallo\",\"Hola\",\"Bonjour\",\"Ciao\",\"أهلا و سهلا\"};\n+        for(String s : greetings) {\n+            System.out.println(s + name);\n+        }\n     };\n \n-    boolean[] bitsToBinaries() {\n+    static boolean[] bitsToBinaries() {\n //        Programmatically convert the bit array of 1's and 0's into a binary array of true and false. return the 'converted' array.\n //        ex : bitsToBinaries() => [false,true,true,true,false,false,false,true,true,true,true,true,false,true,false,false,true,false]\n-            return null;\n+        System.out.println(\"bitsToBinaries() Method: \");\n+        int[] bits = new int[]{0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0};\n+        for(Integer i : bits) {\n+            if(i == 0){\n+                System.out.println(\"false\");\n+            }\n+            else if(i == 1){\n+                System.out.println(\"true\");\n+            }\n+            else{\n+                System.out.println(\"Value is not 0 or 1...\");\n+            }\n+        }\n+        return null;\n     };\n \n-    String[] keepColors() {\n+    static ArrayList<String> keepColors() {\n //        In this class is an array called \"colors\".  Programmatically remove the elements that do NOT have a color associated with it.  Return the filtered color array of elements that have a color associated with it.\n //        ex : keepColors() => [\"bluebird\",\"yellow bumblebee\",\"black spider\", \"green monkey\",\"pink\",\"black bird\",\"Great White Lakes\",\"white bible\",\"green quran\", \"red herring\", \"Black Sea\"]\n+        System.out.println(\"keepColors() Method: \");\n+        String colors[] = new String[]{\"bluebird\",\"yellow bumblebee\",\"black spider\", \"green monkey\",\"pink\",\"great gatsby\",\"feeding frenzy\",\"black bird\",\"Matterhorn\",\"Great White Lakes\",\"torah\",\"white bible\",\"green quran\", \"red herring\", \"Black Sea\"};\n+        ArrayList<String> filteredColors = new ArrayList<>();\n+        for(String color : colors){\n+            if(color.toLowerCase().contains(\"blue\") || color.toLowerCase().contains(\"yellow\") || color.toLowerCase().contains(\"black\") || color.toLowerCase().contains(\"green\") || color.toLowerCase().contains(\"pink\") || color.toLowerCase().contains(\"white\") || color.toLowerCase().contains(\"red\")){\n+                filteredColors.add(color);\n+            }\n+        }\n+        System.out.println(filteredColors);\n         return null;\n     }\n \n+    public static void main(String[] args) {\n+        printNums();\n+        greet(\" Christopher\");\n+        bitsToBinaries();\n+        keepColors();\n+    }\n+\n }\n \n "
  },
  {
    "sha": "1815f6b7d7ccbfb213a2a1639baae169aed90444",
    "filename": "src/java_1/dataTypes/DataTypes.java",
    "status": "modified",
    "additions": 51,
    "deletions": 20,
    "changes": 71,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/dataTypes/DataTypes.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/dataTypes/DataTypes.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_1/dataTypes/DataTypes.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -2,49 +2,80 @@\n \n class DataTypes {\n \n-//\t\tboolean number = 2021;\n-//\t\tbyte yearOfBirth = 1977;\n-//\t\tArray nums = [3,4,5,6,7,8,10,12];\n-//\t\tObject movieName = \"Meet The Parents\";\n-//\t\tdouble male = 'm';\n-//\t\ttriple triplet = 3L;\n-//\t\tfloat female = 'f';\n-//\t\tshort decimalVal = .0000000000001f;\n-//\t\tlong halfByte = 0101;\n+//\t\tint number = 2021;\n+//\t\tint yearOfBirth = 1977;\n+//\t\tArray[] nums = [3,4,5,6,7,8,10,12];\n+//\t\tString movieName = \"Meet The Parents\";\n+//\t\tchar male = 'm';\n+//\t\tlong triplet = 3L;\n+//\t\tchar female = 'f';\n+//\t\tfloat decimalVal = .0000000000001f;\n+//\t\tint halfByte = 0101;\n \n \n \tpublic static void main(String[] args) {\n \t\t//the class fields defined in this DataTypes class have mistakes with either the data type, or the syntax.  Fix the data types so the main method correctly displays the value of all of the variables\n \t\t//For the methods below in this DataTypes class, determine the appropriate datatypes for the inputs and the outputs\n+\t\tyearsToMonths(2);\n+\t\tmonthsToHours(8);\n+\t\tdaysToSeconds(730);\n+\t\tcanDrive(4);\n+\t\tcenturiesToSeconds(1L);\n+\t\tdollarsToBitcoin(35000);\n+\t\tgetDataTypes(4, true, 444444444L);\n+\t\tgetDataTypes(0.4, false, 'm', 888888888888L, 4354, .0000000045, 0x1234, .0000000000001f);\n \t}\n \n-\tvoid yearsToMonths(Object years) {\n-\t\t//\tconvert years to months using appropriate data types for the inputs and the outputs, 2 years => 24 months\n+\tstatic void yearsToMonths(Integer years) {\n+\t\tSystem.out.println(\"yearsToMonths() Method: \");\n+\t\tSystem.out.println(years * 12);\n+\n \t}\n \n-\tvoid monthsToHours(Object months) {\n-\t\t//\tconvert months to hours using appropriate data types for the inputs and the outputs, 8 months => 17520 hours\n+\tstatic void monthsToHours(Integer months) {\n+\t\tSystem.out.println(\"monthsToHours() Method: \");\n+\t\tSystem.out.println(months * 730);\n \t}\n \n-\tvoid daysToSeconds(Object days) {\n-\t\t//\tconvert days to seconds using appropriate data types for the inputs and the outputs, 2 years => 17520 hours\n+\tstatic void daysToSeconds(Integer days) {\n+\t\tSystem.out.println(\"daysToSeconds() Method: \");\n+\t\tSystem.out.println(days * 86400);\n \t}\n \n-\tvoid centuriesToSeconds(Object centuries) {\n+\tstatic void centuriesToSeconds(Long centuries) {\n \t\t//\tconvert centuries to seconds using appropriate data types for the inputs and the outputs, 1 century => 3.1556952 x 10^9 Seconds\n+\t\tSystem.out.println(\"centuriesToSeconds() Method: \");\n+\t\tDouble seconds = 3.1556952;\n+\t\tLong secMultiplier = 1000000000L;\n+\t\tDouble multiplySeconds = seconds * secMultiplier;\n+\t\tSystem.out.println(centuries * multiplySeconds);\n \t}\n \n-\tvoid dollarsToBitcoin(Object dollars) {\n+\tstatic void dollarsToBitcoin(Integer dollars) {\n \t\t//\tconvert (usd) dollars $ to bitcoin using appropriate data types for the inputs and the outputs, $35,000 dollars  3.1556952 x 10^9 Seconds\n+\t\tSystem.out.println(\"dollarsToBitcoin() Method: \");\n+\t\tDouble bitcoin = 47328.80;\n+\t\tSystem.out.println(dollars / bitcoin);\n \t}\n \n-\tvoid canDrive(Object age) {\n+\tstatic void canDrive(Integer age) {\n \t\t//determine if the age passed in is ready to drive, return a value indicating whether or not the age passed in is ready to drive.\n+\t\tSystem.out.println(\"canDrive() Method: \");\n+\t\tif(age >= 16){\n+\t\t\tSystem.out.println(\"Able to drive, after passing a drivers test...\");\n+\t\t}\n+\t\telse{\n+\t\t\tSystem.out.println(\"Not old enough to take the drivers test...\");\n+\t\t}\n \t}\n \n-\tString[] getDataTypes(int num1, boolean bool1, long long1) {\n+\tstatic void getDataTypes(Object... args) {\n //\t\tUse Java to get the data type of the three input variables; and return a string representation of the data types of the three variables as an array.  Do NOT hard code the answers here.  Make sure to use Java to programmatically get the data types.\n-\t\treturn new String[]{null,null,null};\n+\n+\t\tSystem.out.println(\"getDataTypes() Method: \");\n+\t\tfor(Object arg : args) {\n+\t\t\tSystem.out.println(\"Data Type for \" + arg + \" is: \" + arg.getClass().getName());\n+\t\t}\n \t}\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "80d8b8a178c3952bfec4dd0850432d66f5d22b8f",
    "filename": "src/java_1/dataTypes/JavaChallenges.java",
    "status": "modified",
    "additions": 97,
    "deletions": 8,
    "changes": 105,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/dataTypes/JavaChallenges.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_1/dataTypes/JavaChallenges.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_1/dataTypes/JavaChallenges.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,9 +1,42 @@\n package java_1.dataTypes;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n public class JavaChallenges {\n \n \tpublic static void main(String[] args) {\n \t\t//solve the code challenges found in the static methods on this class\n+\t\tSystem.out.println(\"printMsg() Method: \");\n+\t\tprintMsg(\"hello world \\n\", 3);\n+\n+\t\tSystem.out.println(\"nthFibonacci() Method: \");\n+\t\tnthFibonacci(7);\n+\n+\t\tSystem.out.println(\"calcPay() Method: \");\n+\t\tcalcPay(1, 250.00, 2);\n+\n+\t\tSystem.out.println(\"solveQuadratic() Method: \");\n+\t\tsolveQuadratic(4, 2, 3);\n+\n+\t\tSystem.out.println(\"countQuarters() Method: \");\n+\t\tcountQuarters(10.50);\n+\n+\t\tSystem.out.println(\"reverseString() Method: \");\n+\t\treverseString(\"Christopher\");\n+\n+\t\tSystem.out.println(\"shuffleMessage() Method: \");\n+\t\tString[] msg = new String[] {\"hey\", \"there\", \"friend\"};\n+\t\tshuffleMessage(msg);\n+\n+\t\tSystem.out.println(\"calcGPA() Method: \");\n+\t\tint[] scoresArr = new int[]{4, 44, 44};\n+\t\tcalcGPA(scoresArr);\n+\n+\t\tSystem.out.println(\"printEgg() Method: \");\n+\t\tprintEgg();\n+\n \t}\n \n \tstatic void printMsg(String msg, int repeats) {\n@@ -13,13 +46,24 @@ static void printMsg(String msg, int repeats) {\n \t\thello world\n \t\thello world\n \t\t */\n+\t\tSystem.out.println(msg.repeat(repeats));\n \t}\n \n \tstatic int nthFibonacci(int n) {\n \t\t/*calculate the nth fibonacci number and return the value.  The first 4 fibonacci numbers are : 1, 1, 2, 3...  learn more : http://bit.ly/fibonacci-agile\n \t\texample : nthFibonacci(7) => 13\n \t\t */\n-\t\treturn 1;\n+\t\tint f[] = new int[n + 1];\n+\t\tint i = 0;\n+\t\tf[0] = 0;\n+\t\tif(n > 0){\n+\t\t\tf[1] = 1;\n+\t\t\tfor(i = 2; i <= n; i++){\n+\t\t\t\tf[i] = f[i - 1] + f[i - 2];\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println(f[n]);\n+\t\treturn f[n];\n \t}\n \n \tstatic double calcPay(int hrsPerPeriod, double hourlyRate, int payPeriods) {\n@@ -28,23 +72,33 @@ static double calcPay(int hrsPerPeriod, double hourlyRate, int payPeriods) {\n \t\t80 hours / period , $50.00 / hr, 8 periods => calcPay(80,25.00,8) => 16000.00\n \t\t1 hr / period, $250.00 / hr, 2 periods => calcPay(1,250.00,2) => 500.00\n  */\n-\t\treturn 0.0d;\n+\t\tSystem.out.println(\"Total pay is as follows, and returned $\" + hrsPerPeriod * hourlyRate * payPeriods + \"0\");\n+\t\treturn hrsPerPeriod * hourlyRate * payPeriods;\n \t}\n \n \tstatic long solveQuadratic(int x, int y, int z) {\n \t\t/* compute a quadratic equation using the input parameters.  Recall that a quadratic equation has the format :  x^2 + y + z */\n-\t\treturn x;\n+\t\tSystem.out.println((x*x) + y + z);\n+\t\treturn (x*x) + y + z;\n \t}\n \n \tstatic int countQuarters(double amount) {\n //\t\tcalculate the number of quarters that can be changed for the given amount.\n //\t\t$10.50 => countQuarters(10.50) => 42\n-\t\treturn 0;\n+\t\tdouble numOfQuarters;\n+\t\tnumOfQuarters = amount / .25;\n+\t\tSystem.out.println(numOfQuarters);\n+\t\treturn (int) numOfQuarters;\n \t}\n \n \tstatic String reverseString(String str) {\n \t\t//reverse the input string and return it.\n-\t\treturn str;\n+\t\tString reversed = \"\";\n+\t\tfor(int i = str.length() -1; i >= 0; i--){\n+\t\t\treversed = reversed + str.charAt(i);\n+\t\t}\n+\t\tSystem.out.println(reversed);\n+\t\treturn reversed;\n \t}\n \n \tstatic String shuffleMessage(String[] messages) {\n@@ -53,7 +107,12 @@ static String shuffleMessage(String[] messages) {\n \t\t[\"hi\", \"dear\", \"friend\"] => shuffleMessage() => \"dear hi friend\";\n \t\t[\"hi\", \"dear\", \"friend\"] => shuffleMessage() => \"friend dear hi\";\n */\n-\t\treturn null;\n+\t\tList<String> strList = Arrays.asList(messages);\n+\t\tCollections.shuffle(strList);\n+\t\tSystem.out.println(strList);\n+\t\tString shuffled = strList.get(0) + \" \" + strList.get(1) + \" \" + strList.get(2);\n+\t\tSystem.out.println(shuffled);\n+\t\treturn shuffled;\n \t}\n \n \tstatic double calcGPA(int[] scores) {\n@@ -66,7 +125,34 @@ static double calcGPA(int[] scores) {\n \t\t\t80 - 89 - 3.0\n \t\t\t90 - 100 - 4.0\n \t\t */\n-\t\treturn 4.0;\n+\t\tint total = 0;\n+\t\tfor(int i : scores){\n+\t\t\ttotal += i;\n+\t\t}\n+\t\tif(total >=0 && total <= 59){\n+\t\t\tSystem.out.println(\"GPA is 0.0\");\n+\t\t\treturn 0.0;\n+\t\t}\n+\t\telse if(total >= 60 && total <= 69){\n+\t\t\tSystem.out.println(\"GPA is 1.0\");\n+\t\t\treturn 1.0;\n+\t\t}\n+\t\telse if(total >= 70 && total <= 79){\n+\t\t\tSystem.out.println(\"GPA is 2.0\");\n+\t\t\treturn 2.0;\n+\t\t}\n+\t\telse if(total >= 80 && total <= 89){\n+\t\t\tSystem.out.println(\"GPA is 3.0\");\n+\t\t\treturn 3.0;\n+\t\t}\n+\t\telse if(total >= 90 && total <= 100){\n+\t\t\tSystem.out.println(\"GPA is 4.0\");\n+\t\t\treturn 4.0;\n+\t\t}\n+\t\telse{\n+\t\t\tSystem.out.println(\"Check grades again, because they are out of range.\");\n+\t\t}\n+\t\treturn 0.0;\n \t}\n \n \tstatic void printEgg() {\n@@ -79,6 +165,7 @@ static void printEgg() {\n \t\t\t \\_______/\n \n \t\t*/\n+\t\tSystem.out.println(\"\\t _______\\n\\t/\\t\\t\\\\\\n   /\\t\\t \\\\\\n   -\\\"-\\'-\\\"-\\'-\\\"-\\n   \\\\\\t     /\\n\\t\\\\_______/\");\n \t}\n \n \tstatic class Item {\n@@ -90,7 +177,8 @@ public Item(String item, double cost) {\n \t\t\tthis.cost = cost;\n \t\t}\n \n-\t\t@Override\n+\n+\t@Override\n \t\tpublic String toString() {\n \t\t\treturn \"Item{\" +\n \t\t\t\t\t\"item='\" + item + '\\'' +\n@@ -103,6 +191,7 @@ static double totaledReceipt(Item[] transactions) {\n \n \t//\t\tCalculate the total amount of all items in the transactions array.  Note that each element of the transactions array is of type Item.\n \t//\t\t[Item{ item : \"pants\" , cost : 20.00} , Item{ item : \"iPhone\", cost : 1100.00} ] => totaledReceipt() => 1120.00\n+\n \t\t\treturn 0.0;\n \n \t\t}"
  },
  {
    "sha": "fd0cf821c045f48c15256244bd1fc2f9de2c176d",
    "filename": "src/java_2/oop/bank/Account.java",
    "status": "modified",
    "additions": 79,
    "deletions": 1,
    "changes": 80,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/Account.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/Account.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/bank/Account.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,8 +1,86 @@\n package java_2.oop.bank;\n \n+import java.util.List;\n+\n public class Account {\n+    String bankName;\n+    String accountNumber;\n+    Customer accountHolder;\n+    double balance;\n+    String accountType;\n+    List<String> transactions;\n+\n+    public Account(String bankName, String accountNumber, Customer accountHolder, double balance, String accountType,\n+                   List<String> transactions) {\n+        this.bankName = bankName;\n+        this.accountNumber = accountNumber;\n+        this.accountHolder = accountHolder;\n+        this.balance = balance;\n+        this.accountType = accountType;\n+        this.transactions = transactions;\n+    }\n+\n+    public void deposit(Double money){\n+        accountHolder.setWallet(+money);\n+        balance += money;\n+        transactions.add(\"Deposit of $\" + money + \" was made successfully!\");\n+    }\n+\n+    public void withdraw(Double money){\n+        accountHolder.setWallet(-money);\n+        balance -= money;\n+        transactions.add(\"Withdraw of $\" + money + \" was made successfully!\");\n+    }\n+\n+    public String getBankName() {\n+        return bankName;\n+    }\n+\n+    public String getAccountNumber() {\n+        return accountNumber;\n+    }\n+\n+    public Customer getAccountHolder() {\n+        return accountHolder;\n+    }\n+\n+    public double getBalance() {\n+        return balance;\n+    }\n+\n+    public String getAccountType() {\n+        return accountType;\n+    }\n+\n+    public List<String> getTransactions() {\n+        return transactions;\n+    }\n+\n+    public void setBankName(String bankName) {\n+        this.bankName = bankName;\n+    }\n+\n+    public void setAccountNumber(String accountNumber) {\n+        this.accountNumber = accountNumber;\n+    }\n+\n+    public void setAccountHolder(Customer accountHolder) {\n+        this.accountHolder = accountHolder;\n+    }\n+\n+    public void setBalance(double balance) {\n+        this.balance = balance;\n+    }\n+\n+    public void setAccountType(String accountType) {\n+        this.accountType = accountType;\n+    }\n+\n+    public void setTransactions(List<String> transactions) {\n+        this.transactions = transactions;\n+    }\n \n-\t/*\n+    /*\n \t\tProperties:\n \t\t\tBank (bank where the account is stored)\n \t\t\taccountNumber"
  },
  {
    "sha": "d1d5a663d5872606e1e04d935bb2f7ee1e32d4f0",
    "filename": "src/java_2/oop/bank/Bank.java",
    "status": "modified",
    "additions": 50,
    "deletions": 1,
    "changes": 51,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/Bank.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/Bank.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/bank/Bank.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,8 +1,56 @@\n package java_2.oop.bank;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class Bank {\n+    String bankName = \"Mississippi Milk Bank of Omaha\";\n+    List<Account> accountList = new ArrayList<>();\n+\n+    public Bank(List<Account> accountList) {\n+        this.accountList = accountList;\n+    }\n+\n+    public Account openAccount(Account account){\n+        ArrayList<Account> accountList = new ArrayList<>();\n+        accountList.add(account);\n+        return account;\n+    }\n+\n+    public Account openAccount(String bankName, String accountNumber, Customer accountHolder, double balance, String accountType,\n+                               List<String> transactions){\n+        Account account = new Account(this.bankName, accountNumber, accountHolder, balance, accountType, transactions);\n+        accountList.add(account);\n+        return account;\n+    }\n+\n+    public void closeAccount(Account account){\n+        accountList.remove(account);\n+        System.out.println(\"Account for \" + account.accountHolder.firstName + account.accountHolder.lastName + \" has \" +\n+                \"been closed\");\n+    }\n+\n+    public void getAccountByCustomer(Account customerAccount){\n+        if(accountList.contains(customerAccount)){\n+            System.out.println(\"The account you are searching for belongs to \" + customerAccount.accountHolder.firstName + \" \" + customerAccount.accountHolder.lastName);\n+        }\n+        else{\n+            System.out.println(\"Customer does not have an account with this bank\");\n+        }\n+    }\n+\n+    public void getAccountByNumber(String number){\n+        for(Account account : accountList){\n+            if(account.getAccountNumber() == number){\n+                System.out.println(\"The account you are searching for belongs to \" + account.accountHolder.firstName +\" \"+ account.accountHolder.lastName);\n+            }\n+            else{\n+                continue;\n+            }\n+        }\n+    }\n+/*\n \n-\t/*\n \t\tProperties:\n \t\t\taccounts;\n \n@@ -11,5 +59,6 @@\n \t\t\tcloseAccount(Account); close the account by removing it from the account list. and removing it's association with this Bank\n \t \t\tgetAccountByCustomer(Customer);\n \t \t\tgetAccountByNumber(acctNum);\n+\n \t */\n }\n\\ No newline at end of file"
  },
  {
    "sha": "7bc587edc3dacde56795d2df11e4e69baf5dfa14",
    "filename": "src/java_2/oop/bank/BankingApp.java",
    "status": "modified",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/BankingApp.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/BankingApp.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/bank/BankingApp.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,9 +1,103 @@\n package java_2.oop.bank;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class BankingApp {\n \n \tpublic static void main(String[] args) {\n+\n+//\t\tI've got customers:\n+\t\tCustomer christopher = new Customer(\"Christopher\", \"Jones\", 444444444, \"03251987\", 00.00);\n+\t\tCustomer daphne = new Customer(\"Daphne\", \"Blake\", 444444444, \"03251987\", 500.00);\n+\t\tCustomer velma = new Customer(\"Velma\", \"Dinkley\", 444444444, \"03251987\", 575.75);\n+\t\tCustomer shaggy = new Customer(\"Shaggy\", \"Rogers\", 444444444, \"03251987\", 325.25);\n+\t\tCustomer scooby = new Customer(\"Scooby\", \"Dooby-Doo\", 444444444, \"03251987\", 325.25);\n+\n+//\t\tI can print customers:\n+\t\tSystem.out.println(\"Customers:\");\n+\t\tSystem.out.println(\"Here's a customer: \" + christopher.firstName + \" \" + christopher.lastName);\n+\t\tSystem.out.println(\"Here's a customer: \" + daphne.firstName + \" \" + daphne.lastName);\n+\t\tSystem.out.println(\"Here's a customer: \" + velma.firstName + \" \" + velma.lastName);\n+\t\tSystem.out.println(\"Here's a customer: \" + shaggy.firstName + \" \" + shaggy.lastName);\n+\t\tSystem.out.println(\"Here's a customer: \" + scooby.firstName + \" \" + scooby.lastName);\n+\t\tSystem.out.println(\"-----------------------------------\");\n+\n+//\t\tI've got a transaction list for each customer:\n+\t\tList<String> christopherTransactions = new ArrayList<>();\n+\t\tList<String> daphneTransactions = new ArrayList<>();\n+\t\tList<String> velmaTransactions = new ArrayList<>();\n+\t\tList<String> shaggyTransactions = new ArrayList<>();\n+\t\tList<String> scoobyTransactions = new ArrayList<>();\n+\n+//\t\tI've got a list of bank accounts:\n+\t\tList<Account> listOfBankAccounts = new ArrayList<>();\n+\n+//\t\tI've got a bank:\n+\t\tBank mmOfOmaha = new Bank(listOfBankAccounts);\n+\n+//\t\tI can print my Bank:\n+\t\tSystem.out.println(\"Bank Name: \" + mmOfOmaha.bankName);\n+\t\tSystem.out.println(\"-----------------------------------\");\n+\n+//\t\tNow the customers have an account:\n+\t\tAccount christopherAccount = mmOfOmaha.openAccount(mmOfOmaha.bankName, \"4444444444\", christopher, 0.00,\n+\t\t\t\t\"Checking\", christopherTransactions);\n+\t\tAccount daphneAccount = mmOfOmaha.openAccount(mmOfOmaha.bankName, \"5555555555\", daphne, 444.44, \"Checking\",\n+\t\t\t\tdaphneTransactions);\n+\t\tAccount velmaAccount = mmOfOmaha.openAccount(mmOfOmaha.bankName, \"6666666666\", velma, 325.35, \"Checking\",\n+\t\t\t\tvelmaTransactions);\n+\t\tAccount shaggyAccount = mmOfOmaha.openAccount(mmOfOmaha.bankName, \"7777777777\", shaggy, 1000.00, \"Checking\",\n+\t\t\t\tshaggyTransactions);\n+\t\tAccount scoobyAccount = mmOfOmaha.openAccount(mmOfOmaha.bankName, \"8888888888\", scooby, 10000.00, \"Checking\",\n+\t\t\t\tscoobyTransactions);\n+\n+//\t\tI can close an account:\n+\t\tmmOfOmaha.closeAccount(scoobyAccount);\n+\t\tSystem.out.println(\"-----------------------------------\");\n+\n+//\t\tI can get an account by customer and by account number:\n+\t\tmmOfOmaha.getAccountByCustomer(shaggyAccount);\n+\t\tmmOfOmaha.getAccountByNumber(\"7777777777\");\n+\t\tSystem.out.println(\"-----------------------------------\");\n+\n+//\t\tI can deposit and withdraw money from accounts:\n+\t\tSystem.out.println(\"The balance in this account is $\" + scoobyAccount.balance);\n+\t\tscoobyAccount.deposit(40.44);\n+\t\tSystem.out.println(\"The balance in this account is $\" + scoobyAccount.balance);\n+\n+\t\tSystem.out.println(\"The balance in this account is $\" + christopherAccount.balance);\n+\t\tchristopherAccount.deposit(100.00);\n+\t\tSystem.out.println(\"The balance in this account is $\" + christopherAccount.balance);\n+\t\tchristopherAccount.withdraw(50.00);\n+\t\tSystem.out.println(\"The balance in this account is $\" + christopherAccount.balance);\n+\n+\n+\n \t\t\t/*\n+\n+\t\t\tInitialize objects here\n+\n+\t\t\tBank\n+\t\t\t\t+ void withdraw(Account account, [numeric type] amount)\n+\t\t\t\t+ void deposit(Account account, [numeric type] amount)\n+\t\t\t\t+ void openAccount(Customer customer)\n+\t\t\t\t+ void closeAccount(Account account)\n+\t\t\t\t+ List<Account> getOpenAccounts()\n+\t\t\t\t+ List<Account> getAccount(Customer customer)\n+\t\t\t\t+ List<Account> getAccount(String accountNumber)\n+\n+\t\t\tCustomer\n+\t\t\t\t- [types] credentials\n+\n+\t\t\tAccount (undefined relationship with Customer)\n+\t\t\t\t- [numeric] balance\n+\t\t\t\t- boolean isOpen\n+\t\t\t\t- String accountNumber\n+\t\t\t\t+ void withdraw([numeric] amount)\n+\t\t\t\t+ void deposit([numeric] amount)\n+\n+\n \t\t\t\t-Create a Bank\n \t\t\t\t-Create 5 Customers\n \t\t\t\t-Open a new account for each customer.\n@@ -14,4 +108,5 @@ public static void main(String[] args) {\n \t\t\t\t-find an account by account number.\n \t\t \t*/\n \t}\n+\n }"
  },
  {
    "sha": "dca78d679e99f57022a40250ff581ab696c9ac76",
    "filename": "src/java_2/oop/bank/Customer.java",
    "status": "modified",
    "additions": 56,
    "deletions": 1,
    "changes": 57,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/Customer.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/bank/Customer.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/bank/Customer.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,13 +1,68 @@\n package java_2.oop.bank;\n \n public class Customer {\n-\t\t/*\n+    String firstName;\n+    String lastName;\n+    private int ssn;\n+    private String dob;\n+    private double wallet;\n+\n+    public Customer(String firstName, String lastName, int ssn, String dob, double wallet) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+        this.ssn = ssn;\n+        this.dob = dob;\n+        this.wallet = wallet;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public int getSsn() {\n+        return ssn;\n+    }\n+\n+    public String getDob() {\n+        return dob;\n+    }\n+\n+    public double getWallet() {\n+        return wallet;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public void setSsn(int ssn) {\n+        this.ssn = ssn;\n+    }\n+\n+    public void setDob(String dob) {\n+        this.dob = dob;\n+    }\n+\n+    public void setWallet(double wallet) {\n+        this.wallet = wallet;\n+    }\n+\n+    /*\n \t\t\tProperties :\n \t\t\t\tfirstName;\n \t\t\t\tlastName;\n \t\t\t\tssn;\n \t\t\t\tdob;\n \t\t\t\twallet; $ in the wallet\n \t\t*/\n+\n }\n "
  },
  {
    "sha": "3ee181e103068fc6ddebe18b619f110df7eebcad",
    "filename": "src/java_2/oop/coffee/CoffeeApp.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/coffee/CoffeeApp.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/coffee/CoffeeApp.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/coffee/CoffeeApp.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -11,6 +11,7 @@ public static void main(String[] args) {\n \t-\n  */\n \n+\n \t\tCoffeeBeans java = new CoffeeBeans();\n \t\tCup mug = new Cup();\n \t\tCoffeeMaker keureg = new CoffeeMaker();"
  },
  {
    "sha": "6dc099d9a7acca55e1e7eaf758fd10acbb8a96fd",
    "filename": "src/java_2/oop/monkey/MonkeyApp.java",
    "status": "modified",
    "additions": 22,
    "deletions": 1,
    "changes": 23,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/monkey/MonkeyApp.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/monkey/MonkeyApp.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/monkey/MonkeyApp.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -3,12 +3,33 @@\n public class MonkeyApp {\n \n \tpublic static void main(String[] args) {\n+\n+\t\tMonkeyCage monkeyCage = new MonkeyCage();\n+\t\tMonkeyCage.Monkey rafiki = monkeyCage.new Monkey(\"Rafiki\", true);\n+\t\tMonkeyCage.Monkey george = monkeyCage.new Monkey(\"Curious George\", true);\n+\t\tMonkeyCage.Monkey kong = monkeyCage.new Monkey(\"King Kong\", false);\n+\n+\t\tSystem.out.println(rafiki.monkeyString());\n+\t\tSystem.out.println(george.monkeyString());\n+\t\tSystem.out.println(kong.monkeyString());\n+\n+\t\tmonkeyCage.addMonkey(rafiki);\n+\t\tmonkeyCage.addMonkey(george);\n+\t\tmonkeyCage.addMonkey(kong);\n+\t\tmonkeyCage.removeMonkey(kong);\n+\t\tmonkeyCage.addMonkey(kong);\n+\t\tmonkeyCage.areMonkeysSmiling(monkeyCage.monkeys);\n+\n+\t\tSystem.out.println(\"There are \" + monkeyCage.getMonkeys().size() + \" monkeys in the cage. \" + monkeyCage.getMonkeys().get(0).name + \", \" + monkeyCage.getMonkeys().get(1).name + \", and \" + monkeyCage.getMonkeys().get(2).name + \" are in the monkey cage.\");\n+\n+\n+\n         /*\n         - Add 3 monkeys to the MonkeyCage, utilizing the inner Monkey class and the addMonkey() method\n         - Determine whether the majority of them are smiling or not.  write your code in the areMonkeySmiling(arr) method\n \n         example :\n-        [Rafiqi (smiling), Curious George (smiling), King Kong (not smiling)] => areMonkeysSmiling(arr) => true\n+        [Rafiki (smiling), Curious George (smiling), King Kong (not smiling)] => areMonkeysSmiling(arr) => true\n \n         You are NOT allowed to move the Monkey class outside of the MonkeyCage class.  Keep it exactly where it is.\n         */"
  },
  {
    "sha": "3c92e6166356ed32ecadf619c8946a789505d027",
    "filename": "src/java_2/oop/monkey/MonkeyCage.java",
    "status": "modified",
    "additions": 40,
    "deletions": 6,
    "changes": 46,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/monkey/MonkeyCage.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/monkey/MonkeyCage.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/monkey/MonkeyCage.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,23 +1,50 @@\n package java_2.oop.monkey;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n class MonkeyCage {\n \n-    private List<Monkey> monkeys;\n+    public MonkeyCage() {\n \n-    boolean areMonkeysSmiling(Monkey[] monkeys) {\n+    }\n+\n+    public List<Monkey> monkeys = new ArrayList<>();\n+\n+    public List<Monkey> getMonkeys() {\n+        return monkeys;\n+    }\n+\n+    boolean areMonkeysSmiling(List<Monkey> monkeys) {\n     //We have an array of monkeys.  Each Monkey has a boolean smile property, which indicates if that particular monkey is smiling.  Determine whether or not the majority of monkeys are smiling.  If the majority are smiling, return true.  if the majority are not smiling, return false.  If it is a tie, return true.\n-        return true;\n+        int smilingMonkeys = 0;\n+        int nonSmilingMonkeys = 0;\n+        for (Monkey monkey : monkeys) {\n+            if(monkey.smiling) {\n+                smilingMonkeys ++;\n+            }\n+            else {\n+                nonSmilingMonkeys ++;\n+            }\n+        }\n+        if(smilingMonkeys >= nonSmilingMonkeys){\n+            System.out.println(\"true\");\n+            return true;\n+        }\n+        else {\n+            System.out.println(\"false\");\n+            return false;\n+        }\n     }\n \n-    Monkey addMonkey(Monkey monkey) {\n+    public void addMonkey(Monkey monkey) {\n //        add a new monkey to the MonkeyCage\n-        return monkey;\n+        monkeys.add(monkey);\n     }\n \n-    void removeMonkey(Monkey monkey) {\n+    public void removeMonkey(Monkey monkey) {\n //        remove a monkey from the MonkeyCage\n+        monkeys.remove(monkey);\n     }\n \n     class Monkey { //inner class.  DO NOT MOVE THIS CLASS\n@@ -28,5 +55,12 @@ public Monkey(String name, boolean smiling) {\n             this.name = name;\n             this.smiling = smiling;\n         }\n+\n+        public String monkeyString() {\n+            return \"Monkey {\" +\n+                    \"name = '\" + name + '\\'' +\n+                    \", smiling = \" + smiling +\n+                    '}';\n+        }\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "f87a7a33985930ee54a697cdb43813e7f3406f06",
    "filename": "src/java_2/oop/phone/CellPhone.java",
    "status": "modified",
    "additions": 95,
    "deletions": 1,
    "changes": 96,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/CellPhone.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/CellPhone.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/phone/CellPhone.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,6 +1,100 @@\n package java_2.oop.phone;\n \n-class CellPhone {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class CellPhone implements Phoneable {\n+\n+    public List<Contact> contactList = new ArrayList<>();\n+    double cost = 00.00;\n+    String carrier = \"\";\n+    String brand = \"\";\n+    boolean powerStatus = true;\n+\n+    public CellPhone(double cost, String carrier, String brand, boolean powerStatus) {\n+        this.cost = cost;\n+        this.carrier = carrier;\n+        this.brand = brand;\n+        this.powerStatus = powerStatus;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CellPhone{\" +\n+                \"cost=\" + cost +\n+                \", carrier='\" + carrier + '\\'' +\n+                \", brand='\" + brand + '\\'' +\n+                \", powerStatus=\" + powerStatus +\n+                '}';\n+    }\n+\n+    public List<Contact> addToContacts(Contact contact){\n+        if(contactList.contains(contact)){\n+            System.out.println(\"This contact already exists in your contact list\");\n+        }\n+        else{\n+            contactList.add(contact);\n+        }\n+        return contactList;\n+    }\n+\n+    public Contact updateContact(Contact contact, String name, long phoneNumber, String address){\n+        if(contactList.contains(contact)){\n+            contact.setName(name);\n+            contact.setPhoneNumber(phoneNumber);\n+            contact.setAddress(address);\n+            System.out.println(\"Updated Contact Information: \" + contact);\n+        }\n+        else{\n+            System.out.println(\"This contact doesn't exist in your contact list, would you like to add this contact?\");\n+        }\n+        return contact;\n+    }\n+\n+    public List<Contact> removeContact(Contact contact){\n+        contactList.remove(contact);\n+        System.out.println(\"Contact has been removed from your contact list\");\n+        return contactList;\n+    }\n+    \n+    public void searchContacts(List<Contact> contactList, Contact contact){\n+            if(contactList.contains(contact)){\n+                System.out.println(\"This contact is already in your contact list under: \" + contact);\n+            }\n+            else{\n+                System.out.println(\"The contact is not in your contact list, would you like to add this contact?\");\n+            }\n+    }\n+\n+    @Override\n+    public void call(Contact contact) {\n+        System.out.println(\"You are calling : \" + contact.name + \" at phone number \" + contact.phoneNumber);\n+    }\n+\n+    @Override\n+    public void ring() {\n+\n+    }\n+\n+    @Override\n+    public void hangUP() {\n+\n+    }\n+\n+    @Override\n+    public void pickUp() {\n+\n+    }\n+\n+    @Override\n+    public void powerOff() {\n+\n+    }\n+\n+    @Override\n+    public void powerOn() {\n+\n+    }\n /*\n \t* Properties :\n \t* \tcontact list"
  },
  {
    "sha": "73ad9c4f434707b07742fc8301fac007b156a90d",
    "filename": "src/java_2/oop/phone/Contact.java",
    "status": "modified",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/Contact.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/Contact.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/phone/Contact.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,6 +1,39 @@\n package java_2.oop.phone;\n \n class Contact {\n+    String name = \"\";\n+    long phoneNumber = 0;\n+    String address = \"\";\n+\n+\n+    public Contact(String name, long phoneNumber, String address) {\n+        this.name = name;\n+        this.phoneNumber = phoneNumber;\n+        this.address = address;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Contact{\" +\n+                \"name='\" + name + '\\'' +\n+                \", phoneNumber=\" + phoneNumber +\n+                \", address='\" + address + '\\'' +\n+                '}';\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setPhoneNumber(long phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+\n /*\n \tProperties :\n         - Name"
  },
  {
    "sha": "fae1cc8100b4edc806cff29fbc586a9f70a24968",
    "filename": "src/java_2/oop/phone/PhoneApp.java",
    "status": "modified",
    "additions": 56,
    "deletions": 2,
    "changes": 58,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/PhoneApp.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/PhoneApp.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/phone/PhoneApp.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -3,9 +3,63 @@\n public class PhoneApp {\n \n \tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Let's make a Phone App\");\n+\t\tSystem.out.println(\"Let's make a Phone App!\");\n+\n+//\t\tI can create phones:\n+\t\tCellPhone iPhone12 = new CellPhone(1200.00, \"AT&T\", \"Apple\", true);\n+\t\tCellPhone samsungS21 = new CellPhone(1199.99, \"Verizon\", \"Samsung\", true);\n+\n+//\t\tI can create contacts:\n+\t\tContact anjelah = new Contact(\"Anjelah Johnson\", 4444444444L, \"4444 Bon Qui Qui Lane\");\n+\t\tContact chris = new Contact(\"Christopher Jones\", 4444444444L, \"4444 Yellow Brick Road\");\n+\t\tContact swan = new Contact(\"Ms. Swan\", 4444444444L, \"4444 Swan Boulevard\");\n+\t\tContact stuart = new Contact(\"Stuart Little\", 5555555555L, \"4444 Broadway\");\n+\t\tContact charlie = new Contact(\"Charlie Brown\", 6666666666L, \"4444 East Parkway Lane\");\n+\t\tContact jennifer = new Contact(\"Jennifer Hudson\", 7777777777L, \"1313 Lucky Lane\");\n+\n+//\t\tI can print out phones and contacts:\n+\t\tSystem.out.println(iPhone12);\n+\t\tSystem.out.println(samsungS21);\n+\t\tSystem.out.println(anjelah);\n+\t\tSystem.out.println(chris);\n+\t\tSystem.out.println(swan);\n+\t\tSystem.out.println(stuart);\n+\t\tSystem.out.println(charlie);\n+\t\tSystem.out.println(jennifer);\n+\n+//\t\tI can add contacts to a phones contactList:\n+\t\tiPhone12.addToContacts(anjelah);\n+\t\tiPhone12.addToContacts(chris);\n+\t\tiPhone12.addToContacts(swan);\n+\t\tsamsungS21.addToContacts(anjelah);\n+\t\tsamsungS21.addToContacts(stuart);\n+\t\tsamsungS21.addToContacts(charlie);\n+\t\tsamsungS21.addToContacts(jennifer);\n+\n+//\t\tI can see how many contacts are in a phones contactList, and I can see each contact in the phones contactList:\n+\t\tSystem.out.println(iPhone12.contactList.size());\n+\t\tiPhone12.contactList.stream().forEach((c) -> System.out.println(c));\n+\n+//\t\tI can see how many contacts are in a phones contactList, and I can see each contact in the phones contactList:\n+\t\tSystem.out.println(samsungS21.contactList.size());\n+\t\tsamsungS21.contactList.stream().forEach((c) -> System.out.println(c));\n+\n+//\t\tI can update the contact in a contact list:\n+\t\tsamsungS21.updateContact(jennifer, \"Jennifer Hudson\", 7777777777L, \"7777 Lucky Boulevard\");\n+\n+//\t\tI can remove a contact from the contact list:\n+\t\tsamsungS21.removeContact(jennifer);\n+\t\tsamsungS21.contactList.size();\n+\t\tsamsungS21.contactList.stream().forEach((c) -> System.out.println(c));\n+\n+//\t\tI can make a phone call from each cell phone:\n+\t\tiPhone12.call(anjelah);\n+\t\tsamsungS21.call(charlie);\n+\n+//\t\tI can search a phones contact list for an individual contact:\n+\t\tiPhone12.searchContacts(iPhone12.contactList, swan);\n+\t\tsamsungS21.searchContacts(samsungS21.contactList, swan);\n /*\n-\t\t-Use this to instantiate CellPhones and run the functions on the CellPhone.  You can run the following functions here in the main method, or add methods on this PhoneApp class and invoke them here.  The latter is probably preferred :)\n \t\t-iPhone-12, Samsung Galaxy S21, and any other phone model of your choosing.\n \t\t-Add 3 unique contacts to each cell phone\n \t\t-Make a phone call from each Cell Phone to a contact in the contact list of that Cell Phone"
  },
  {
    "sha": "74de42de336a72d088c32fbe38407ad2950fda75",
    "filename": "src/java_2/oop/phone/Phoneable.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/Phoneable.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/phone/Phoneable.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/phone/Phoneable.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,6 +1,14 @@\n package java_2.oop.phone;\n \n public interface Phoneable {\n-\t//\t\tAnything that implements Phoneable has the following functionality :\n+\n+    public void call(Contact contact);\n+    public abstract void ring();\n+    public abstract void hangUP();\n+    public abstract void pickUp();\n+    public abstract void powerOff();\n+    public abstract void powerOn();\n+\n+    //\t\tAnything that implements Phoneable has the following functionality :\n \t//\t\tcall() ring(), hangUp(), pickUp(); powerOff(); powerOn();  Implement these methods how you see fit in the CellPhone Class\n }"
  },
  {
    "sha": "48a04374872f62045b4ae388549f803bca764400",
    "filename": "src/java_2/oop/podcast/Main.java",
    "status": "modified",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/podcast/Main.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/podcast/Main.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/podcast/Main.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -3,6 +3,78 @@\n public class Main {\n \n \tpublic static void main(String[] args) {\n+\n+//\t\tI can create podcasts:\n+\t\tPodcast crime = new Podcast(\"Serial\", \"Sarah Koenig\", 51.55);\n+\t\tPodcast drDeath = new Podcast(\"Dr. Death\", \"Laura Beil\", 37.05);\n+\t\tPodcast goodForYou = new Podcast(\"Good For You\", \"Whitney Cummings\", 2.04);\n+\t\tPodcast herbs = new Podcast(\"Herbal Remedies\", \"Gloria Reyes\", 44.04);\n+\t\tPodcast pharmaceuticals = new Podcast(\"Drug Companies on the Rise\", \"Dr. Andy Fauci\", 75.08);\n+\t\tPodcast pets = new Podcast(\"Pet Stories\", \"Andy Cohen\", 37.75);\n+\t\tPodcast broadway = new Podcast(\"Broadway's Biggest Hits\", \"Barbra Streisand\", 34.75);\n+\t\tPodcast movies = new Podcast(\"Top 10 Movies\", \"Kelly Osbourne\", 44.44);\n+\t\tPodcast music = new Podcast(\"Popular Music\", \"Christina Aguilera\", 33.33);\n+\n+//\t\tI can create podcasting apps:\n+\t\tPodcastingApp entertainment = new PodcastingApp(\"Entertainment\");\n+\t\tPodcastingApp stories = new PodcastingApp(\"Stories\");\n+\t\tPodcastingApp documentaries = new PodcastingApp(\"Documentaries\");\n+\n+//\t\tI can add podcasts to a podcasting app:\n+\t\tSystem.out.println(\"----------------------------------\");\n+\t\tentertainment.addPodcast(broadway);\n+\t\tentertainment.addPodcast(movies);\n+\t\tentertainment.addPodcast(music);\n+\t\tSystem.out.println(entertainment.name + \" Podcast:\");\n+\t\tentertainment.showPlaylist(entertainment);\n+\t\tSystem.out.println(\"----------------------------------\");\n+\n+\t\tstories.addPodcast(crime);\n+\t\tstories.addPodcast(drDeath);\n+\t\tstories.addPodcast(goodForYou);\n+\t\tSystem.out.println(stories.name + \" Podcast:\");\n+\t\tstories.showPlaylist(stories);\n+\t\tSystem.out.println(\"----------------------------------\");\n+\n+\t\tdocumentaries.addPodcast(herbs);\n+\t\tdocumentaries.addPodcast(pharmaceuticals);\n+\t\tdocumentaries.addPodcast(pets);\n+\t\tSystem.out.println(documentaries.name + \" Podcast:\");\n+\t\tdocumentaries.showPlaylist(documentaries);\n+\t\tSystem.out.println(\"----------------------------------\");\n+\n+//\t\tI can load, play, and stop a playlist in a podcasting app:\n+\t\tSystem.out.println(\"Load, Play, and Stop Podcast:\");\n+\t\tentertainment.loadPlaylist(entertainment);\n+\t\tentertainment.play(entertainment);\n+\t\tentertainment.stop(entertainment);\n+\n+\t\tSystem.out.println(\"----------------------------------\");\n+//\t\tI can go to the next and previous in the 2nd podcasting app:\n+\t\tSystem.out.println(\"Skip to Next and Previous:\");\n+\t\tstories.next(stories);\n+\t\tstories.previous(stories);\n+\n+\t\tSystem.out.println(\"----------------------------------\");\n+//\t\tI can stop the playing podcast on the 2nd podcasting app:\n+\t\tSystem.out.println(\"Stop Podcast:\");\n+\t\tstories.stop(stories);\n+\n+\t\tSystem.out.println(\"----------------------------------\");\n+//\t\tI can put a podcast on repeat in the 3rd podcasting app:\n+\t\tSystem.out.println(\"Repeating Podcast:\");\n+\t\tentertainment.repeat(entertainment);\n+\n+\t\tSystem.out.println(\"----------------------------------\");\n+//\t\tI can show the playlist from the 3rd podcasting app:\n+\t\tSystem.out.println(\"Show Podcasting App Playlist:\");\n+\t\tentertainment.showPlaylist(entertainment);\n+\n+\t\tSystem.out.println(\"----------------------------------\");\n+//\t\tI can remove a podcast from a playlist:\n+\t\tSystem.out.println(\"Removing Podcast from a Podcasting App Playlist...\");\n+\t\tentertainment.removePodcastFromPlaylist(broadway);\n+\n \t\t/*\tDo the following tasks here in the main method, or in methods on this LambdaMain class.\n \t\t\tCreate 9 podcasts.\n \t\t\tCreate 3 Podcasting Apps"
  },
  {
    "sha": "3206d337658c3529f9775b6e0c8a028ccbcb9a3e",
    "filename": "src/java_2/oop/podcast/Podcast.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/podcast/Podcast.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/podcast/Podcast.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/podcast/Podcast.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,6 +1,17 @@\n package java_2.oop.podcast;\n \n class Podcast {\n+\n+    String title;\n+    String host;\n+    double duration;\n+\n+    public Podcast(String title, String host, double duration) {\n+        this.title = title;\n+        this.host = host;\n+        this.duration = duration;\n+    }\n+\n \t/*\n \t\tProperties\n \t\t   - Title"
  },
  {
    "sha": "25f07b04986945984de0bd959141bf59ed40778f",
    "filename": "src/java_2/oop/podcast/PodcastingApp.java",
    "status": "modified",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/podcast/PodcastingApp.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/podcast/PodcastingApp.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/podcast/PodcastingApp.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,7 +1,54 @@\n package java_2.oop.podcast;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n class PodcastingApp {\n \n+    String name;\n+    List<Podcast> playlist = new ArrayList<>();\n+\n+    public PodcastingApp(String name) {\n+        this.name = name;\n+    }\n+\n+    public void addPodcast(Podcast podcast){\n+        playlist.add(podcast);\n+    }\n+\n+    public void loadPlaylist(PodcastingApp app){\n+        System.out.println(\"Loading \" + app.name + \" Playlist...\");\n+    }\n+\n+    public void play(PodcastingApp app){\n+        System.out.println(\"Playing \" + app.name + \" Podcast App...\");\n+    }\n+\n+    public void stop(PodcastingApp app){\n+        System.out.println(\"Stopping \" + app.name + \" Podcast App...\");\n+    }\n+\n+    public void next(PodcastingApp app){\n+        System.out.println(\"Skipping to next podcast in the \" + app.name + \" playlist...\");\n+    }\n+\n+    public void previous(PodcastingApp app){\n+        System.out.println(\"Skipping to the previous podcast in the \" + app.name + \" playlist...\");\n+    }\n+\n+    public void repeat(PodcastingApp app){\n+        System.out.println(\"Repeating the \" + app.name + \" playlist...\");\n+    }\n+\n+    public void showPlaylist(PodcastingApp app){\n+        app.playlist.stream().forEach((p) -> System.out.println(p.title));\n+    }\n+\n+    public void removePodcastFromPlaylist(Podcast podcast){\n+        playlist.remove(podcast);\n+        System.out.println(\"Removed \" + podcast.title + \" from the playlist...\");\n+    }\n+\n /*\n \t   Properties :\n \t   - appName (Apple Podcasts, Pocket Casts, Overcast, Google Podcasts, etc.)"
  },
  {
    "sha": "ddbf6ed291cac9ae8ad88f5b0399b6fa0391c97d",
    "filename": "src/java_2/oop/rainforest/Creature.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/rainforest/Creature.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/rainforest/Creature.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/rainforest/Creature.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,6 +1,13 @@\n package java_2.oop.rainforest;\n \n public abstract class Creature {\n+\n+    String species;\n+    String eats;\n+\n+    public abstract void eat();\n+\n //\tDefine 1 common characteristic that any Creature may generally possess\n //\tDefine 1 common action that any Creature may generally perform\n+\n }"
  },
  {
    "sha": "5382457750b56b7ff35c51545bd3fc05274041fe",
    "filename": "src/java_2/oop/rainforest/RainforestApp.java",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/rainforest/RainforestApp.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/rainforest/RainforestApp.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/rainforest/RainforestApp.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -4,7 +4,25 @@\n \n \tpublic static void main(String[] args) {\n \n-\t//\tYou are exploring the rainforests of the Amazon.  You have observed many different types of wildlife on your excursion.  To jog your memory,  different kinds of Rainforest Animals that you observed are found in the following URL : https://www.ietravel.com/blog/amazon-rainforest-animals-beginners-guide-21-species.  Feel free to use additional resources for more animal ideas.\n+\t\tRainforestCreature blackCaiman = new RainforestCreature(\"black caiman\", \"pumas\");\n+\t\tblackCaiman.eat();\n+\n+\t\tRainforestCreature greenAnaconda = new RainforestCreature(\"green anaconda\", \"capybaras\");\n+\t\tgreenAnaconda.eat();\n+\n+\t\tRainforestCreature turtle = new RainforestCreature(\"south american river turtle\", \"dead leaves and fish\");\n+\t\tturtle.eat();\n+\n+\t\tRainforestCreature squirrelMonkey = new RainforestCreature(\"squirrel monkey\", \"fruits and insects\");\n+\t\tsquirrelMonkey.eat();\n+\n+\t\tRainforestCreature pygmyMarmoset = new RainforestCreature(\"pygmy marmoset\", \"tree sap and insects\");\n+\t\tpygmyMarmoset.eat();\n+\n+\t\tRainforestCreature riverOtter = new RainforestCreature(\"giant river otter\", \"fish\");\n+\t\triverOtter.eat();\n+\n+\t\t//\tYou are exploring the rainforests of the Amazon.  You have observed many different types of wildlife on your excursion.  To jog your memory,  different kinds of Rainforest Animals that you observed are found in the following URL : https://www.ietravel.com/blog/amazon-rainforest-animals-beginners-guide-21-species.  Feel free to use additional resources for more animal ideas.\n \n \t//\tPick 6 rainforest creatures and model them using the RainforestCreature class. i.e. Instantiate 6 rainforest creatures. Each Rainforest Creature should have 1 unique characteristic , and 1 unique action that it can do in addition to any general characteristics and actions that Creatures can do in general.*/\n "
  },
  {
    "sha": "66955e13903f97ae0357eec39a082053173257c4",
    "filename": "src/java_2/oop/rainforest/RainforestCreature.java",
    "status": "modified",
    "additions": 14,
    "deletions": 1,
    "changes": 15,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/rainforest/RainforestCreature.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_2/oop/rainforest/RainforestCreature.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_2/oop/rainforest/RainforestCreature.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,5 +1,18 @@\n package java_2.oop.rainforest;\n \n public class RainforestCreature extends Creature {\n-\t//your code here\n+\n+    public RainforestCreature(String species, String eats) {\n+        this.species = species;\n+        this.eats = eats;\n+    }\n+\n+    @Override\n+    public void eat() {\n+        System.out.println(\"The \" + species + \" eats \" + eats + \".\");\n+    }\n+\n+\n+    //your code here\n+\n }"
  },
  {
    "sha": "fe11f66ea6c7449785175e768f0d5bb54fc93ec2",
    "filename": "src/java_3/concurrency/Main.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Main.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Main.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_3/concurrency/Main.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -4,9 +4,29 @@\n    \n     public static void main(String[] args) {\n          //run all of your threads from this main class.\n+\n+        Reasoning thready = new Reasoning();\n+        thready.start();\n+        Reasoning thready2 = new Reasoning();\n+        thready2.run();\n+\n+        Team codeKillers = new Team(\"Code Killers\");\n+        codeKillers.run();\n+\n         Sync syncThread = new Sync(\"sync thread\");\n         syncThread.start();\n         System.out.println(syncThread.getNums());  //this prints out an empty list. write some code that will allow the data generated in the syncThread to show up here.\n+        Sync syncThread2 = new Sync(\"sync thread 2\");\n+        syncThread2.start();\n+        Sync syncThread3 = new Sync(\"sync thread 3\");\n+        syncThread3.start();\n+        Sync syncThread4 = new Sync(\"sync thread 4\");\n+        syncThread4.start();\n+        Sync syncThread5 = new Sync(\"sync thread 5\");\n+        syncThread5.start();\n+\n+        System.out.println(\"There are \" + Thread.activeCount() + \" active threads.\");\n+\n         /*\n             -Create 5 sync threads\n             -Allow the list of nums to be a shared resource amongst all of the threads."
  },
  {
    "sha": "7e3688480d7571105c0e96d11709c183e45aecfd",
    "filename": "src/java_3/concurrency/Reasoning.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Reasoning.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Reasoning.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_3/concurrency/Reasoning.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,11 +1,28 @@\n package java_3.concurrency;\n \n-class Reasoning {\n+class Reasoning extends Thread {\n     //set up this class so it can become a valid thread. Reasoning should be created by inheriting from the Thread class.\n \n     void distinguish() {\n+        System.out.println(\"The difference between a thread and a process is that a process is a program in \" +\n+                \"execution, and a thread is part of that running process.\");\n+        System.out.println(\"Invoking the start method will run both the start and the run methods, while invoking the\" +\n+                \" run method will only run the run method.\");\n         //print to the console the difference between a thread and a process\n         //print out you think will happen if you invoke the run() method of a thread as opposed to the start() method of a thread.\n     }\n+\n+    @Override\n+    public void run(){\n+        distinguish();\n+        super.run();\n+    }\n+\n+    @Override\n+    public void start(){\n+        distinguish();\n+        super.start();\n+    }\n+\n }\n "
  },
  {
    "sha": "9eae1b4d1e05be6b61058a10329e991c498e1da2",
    "filename": "src/java_3/concurrency/Sync.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Sync.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Sync.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_3/concurrency/Sync.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -4,8 +4,11 @@\n import java.util.ArrayList;\n import java.util.Random;\n \n+//Look up what a countdown latch is:\n+//Need a copy of write array list(java.util.concurrent pck):\n+\n class Sync extends Thread {\n-    private List nums = new ArrayList<>();\n+    protected List nums = new ArrayList<>();\n \n     Sync(String name) {\n         super(name);\n@@ -19,6 +22,7 @@ public void run() {\n             int randInt = rand.nextInt(100);\n             this.nums.add(randInt);\n         }\n+        System.out.println(\"The nums list is as follows: \" + nums);\n     }\n \n     public List getNums() {"
  },
  {
    "sha": "ca01f38087ffc7e8f7e3924ce1a571739ac01490",
    "filename": "src/java_3/concurrency/Team.java",
    "status": "modified",
    "additions": 21,
    "deletions": 1,
    "changes": 22,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Team.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/concurrency/Team.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_3/concurrency/Team.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -3,11 +3,31 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-class Team {\n+class Team implements Runnable {\n \n     private String teamName;\n     private List<String> team = new ArrayList<>();\n \n+    public Team(String teamName) {\n+        this.teamName = teamName;\n+    }\n+\n+    @Override\n+    public void run() {\n+        var teamMembers = List.of(\"Chad\", \"Taylor\", \"Edward\", \"Jaleel\", \"James\", \"Marina\", \"Anthony\");\n+        for(var i = 0; i < teamMembers.size(); i ++){\n+            team.add(teamMembers.get(i));\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            System.out.println(teamMembers.get(i) + \" was added to the team.\");\n+        }\n+        System.out.println(\"The team consists of: \" + team);\n+        Thread.currentThread().setName(teamName);\n+    }\n+\n     /*\n         -This thread should be created by implementing the Runnable interface, NOT by extending the Thread class.\n         -In the run method of this thread, push each member of your team to the team list."
  },
  {
    "sha": "379bc3900b95de88924dd130642a51723a5a6796",
    "filename": "src/java_3/lambda_stream/Numbers.java",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/lambda_stream/Numbers.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/lambda_stream/Numbers.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_3/lambda_stream/Numbers.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -18,13 +18,13 @@ static int getNum(int i) {\n \n     static boolean isOdd(int i) {\n         //determine if the value at the index i is odd.  return true if yes, return false if  no.\n-        return false;\n+        return nums.get(i) % 2 == 0;\n     }\n \n \n     static boolean isEven(int i) {\n         //determine if the value at the index i is even.  return true if yes, return false if  no.\n-        return false;\n+        return !isOdd(i);\n     }\n \n     static boolean isPrime(int i) {\n@@ -42,7 +42,7 @@ static int subtracted() {\n         return 0;\n     }\n \n-    static int multipled() {\n+    static int multiplied() {\n         //multiply all the elements in the list. and return the product.\n         return 0;\n     }\n@@ -73,4 +73,18 @@ static int append(int n) {\n         return 0;\n     }\n \n+//    that filename never changes, so it either needs to, or should be a constant\n+//    from Abram Jablonski to Everyone:    4:10  PM\n+//            myList = new List<int> (1,2,3,4)\n+//    from Abram Jablonski to Everyone:    4:10  PM\n+//            .ToStream()\n+//    from Abram Jablonski to Everyone:    4:11  PM\n+//            .Select(x=>x *2)\n+//    from Abram Jablonski to Everyone:    4:11  PM\n+//            .Filter(x=>x %1 == 0)\n+//    from Abram Jablonski to Everyone:    4:11  PM\n+//            .Collect(x=>x * 3)\n+//    from Abram Jablonski to Everyone:    4:11  PM\n+//            .ToList()\n+\n }"
  },
  {
    "sha": "2dbd6c521d9c602806de808660ab42559f084917",
    "filename": "src/java_3/serial/Fax.java",
    "status": "modified",
    "additions": 38,
    "deletions": 12,
    "changes": 50,
    "blob_url": "https://github.com/ChristopherJ1987/java/blob/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/serial/Fax.java",
    "raw_url": "https://github.com/ChristopherJ1987/java/raw/24e75c21b220934fcfcaa917d41b88b0bb274421/src/java_3/serial/Fax.java",
    "contents_url": "https://api.github.com/repos/ChristopherJ1987/java/contents/src/java_3/serial/Fax.java?ref=24e75c21b220934fcfcaa917d41b88b0bb274421",
    "patch": "@@ -1,24 +1,50 @@\n package java_3.serial;\n \n-public class Fax {\n+import java.io.IOException;\n+import java.io.Serializable;\n \n-/*\tProperties :\n-\t\tbrand\n-\t\tmodel\n-\t\tyear\n+public class Fax implements Serializable {\n \n-\tMethods :\n-\t\ttransmit(message)\n-\t\treceive(message)\n+\tString brand;\n+\tString model;\n+\tString year;\n \n- */\n-\tprivate void transmit(Message msg) {\n+\tpublic Fax(String brand, String model, String year) {\n+\t\tthis.brand = brand;\n+\t\tthis.model = model;\n+\t\tthis.year = year;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"Fax{\" +\n+\t\t\t\t\"brand='\" + brand + '\\'' +\n+\t\t\t\t\", model='\" + model + '\\'' +\n+\t\t\t\t\", year='\" + year + '\\'' +\n+\t\t\t\t'}';\n+\t}\n+\n+\tpublic void transmit(Message msg, String msgFile) throws IOException, ClassNotFoundException  {\n \t\t//The transmit message must serialize a Message, and write it to a file.\n+\t\tSerializer.serialize(msg, msgFile);\n \t}\n \n-\tprivate Message receive(String filename) {\n+\tpublic Message receive(String filename) throws IOException, ClassNotFoundException {\n //\t\tThe receive method should deserialize a message by reading it in from a file. and then print it to the console.\n-\t\treturn new Message();\n+\t\tMessage deMsg = (Message) Serializer.deSerialize(filename);\n+\t\tSystem.out.println(deMsg);\n+\t\treturn deMsg;\n \t}\n \n+\t/*\tProperties :\n+            brand\n+            model\n+            year\n+\n+        Methods :\n+            transmit(message)\n+            receive(message)\n+\n+     */\n+\n }"
  }
]
