[
  {
    "sha": "661bb24009f5b3ddd416d1f0beb82be8409d8d2e",
    "filename": "perftest/README.md",
    "status": "modified",
    "additions": 155,
    "deletions": 47,
    "changes": 202,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/README.md",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/README.md",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/README.md?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -1,47 +1,155 @@\n-# Nessie Perf test\n-\n-## Local test\n-\n-To Run:\n-\n-* set up [docker compose] (https://docs.docker.com/compose/install/)\n-* execute service `docker-compose up -d --scale nessie=5`. This will start:\n-  - 5 concurrent nessie servers\n-  - [grafana](http://localhost:3000) - for plotting prometheus metrics\n-  - [prometheus](http://localhost:9090) - collecting load, dynamo usage etc from server\n-  - [nginx](http://localhost:19131) load balancer to round robin the 5 servers\n-  - [jaeger](http://localhost:16686) - trace executions\n-  - cadvisor - docker image and host metrics\n-  - localstack - for dynamodb and future AWS services\n-* build project (`mvn clean install`)  \n-* enter `perftest` directory and execute `mvn exec:java jmeter:jmeter -Dnessie.jmeter.users=10 -Dnessie.jmeter.queries=100 -Dnessie.jmeter.dbsize=10000 -Dnessie.jmeter.uri=http://localhost:19131/api/v1`\n-* have a look at `target/jmeter/results` for results and check grafana and jaeger for timings\n-\n-\n-## AWS test\n-\n-To Run:\n-\n-These instructions are for running nessie on an EC2 instance and using dynamodb. To only use dynamo db go directly to item 3\n-\n-1. create tables in Dynamo (NessieGitRefDatabase, NessieGitObjectDatabase)\n-1. start up an EC2 instance. Should be big but not huge. Open ports (3000, 9090, 19131, 16686)\n-1. ensure EC2 instance has r/w on Dynamo via IAM role\n-1. edit docker compopse to change the `nessie` env variables for dynamo region and [endpoint](https://docs.aws.amazon.com/general/latest/gr/ddb.html).\n-    - NESSIE_DB_PROPS_REGION=us-west-2\n-    - NESSIE_DB_PROPS_ENDPOINT=https://dynamodb.us-west-2.amazonaws.com\n-1. set up [docker compose] (https://docs.docker.com/compose/install/)\n-1. execute service `docker-compose up -d --scale nessie=5 --scale localstack=0`. This will start:\n-    - 5 concurrent nessie servers\n-    - [grafana](http://localhost:3000) - for plotting prometheus metrics\n-    - [prometheus](http://localhost:9090) - collecting load, dynamo usage etc from server\n-    - [nginx](http://localhost:19131) load balancer to round robin the 5 servers\n-    - [jaeger](http://localhost:16686) - trace executions\n-    - cadvisor - docker image and host metrics\n-1. build project (`mvn clean install`)  \n-1. enter `perftest` directory and execute `mvn jmeter:jmeter -Dnessie.jmeter.users=10 -Dnessie.jmeter.queries=100 -Dnessie.jmeter.dbsize=10000 -Dnessie.jmeter.uri=http://<ec2_host>:19131/api/v1 -Dnessie.dynamo.region=us-west-2 -Dnessie.dynamo.endpoint=https://dynamodb.us-west-2.amazonaws.com`\n-1. have a look at `target/jmeter/results` for results and check grafana and jaeger for timings\n-\n-## ECS test\n-\n-**todo** docker compose should work with ECS, will test and add instructions here\n+# Running Benchmarks against Nessie\n+\n+Currently, Nessie performance testing consists of two main components:\n+* The \"measurement pack\", which is a collection of Docker images using Docker Compose that contains\n+  a local DynamoDB mock, Prometheus + Push-Gateway, Grafana, Jaeger.\n+* The Gatling scenario and simulation to simulate commits against Nessie.\n+\n+Nessie currently itself runs as a separate instance, so you have to explicitly start it in the\n+configuration you want run. This is convenient to try and test different configuration and code\n+changes locally.\n+\n+For more information, look at the `README.md` files in the sub-modules `measurement-pack` and `gatling`.\n+\n+## Quick start in a local machine\n+\n+1. Start the measurement-pack:\n+  (Install [docker compose](https://docs.docker.com/compose/install/))\n+  ```shell\n+  cd perftest/measurement-pack\n+  mkdir -p prometheus-data/data/\n+  chmod -R o+w prometheus-data\n+\n+  # Default environment variables defined in measurement-pack/.env, update those here, if necessary.\n+\n+  # This will start the Docker image projectnessie/nessie:latest\n+  # Make sure that you're using the most recent version via `docker pull projectnessie/nessie`\n+  docker-compose up \n+  # As an alternative, You can also test against a Nessie server running on your host's machine\n+  # by using `docker-compose up -f docker-compose-local-nessie.yml`.\n+  ```\n+1. Start the Gatling based tests\n+  ```shell\n+  ./mvnw install gatling:test \\\n+    -Dgatling.simulationClass=org.projectnessie.perftest.gatling.CommitToBranchSimulation \\\n+    -Dsim.users=5 \\\n+    -Dsim.commits=0 \\\n+    -Dsim.prometheus=127.0.0.1:9091 \\\n+    -Dsim.duration.seconds=60 \\\n+    -Dsim.rate=5 \\\n+    -Dsim.branchMode=SINGLE_BRANCH_TABLE_PER_USER \\\n+    -Dhttp.maxConnections=100 \\\n+    -pl :nessie-perftest-gatling\n+  ```\n+1. Inspect the metrics, open [Grafana](https://localhost:3000/)\n+  * Dashboard for [JVM metrics](http://localhost:3000/d/Y0ObmOsMz/jvm-micrometer)\n+  * Dashboard for [Nessie Server](http://localhost:3000/d/itt84dyMz/nessie)\n+  * Dashboard for [Nessie Benchmark](http://localhost:3000/d/itt84dyMy/nessie-benchmark)\n+1. Play around & run more tests\n+\n+## Disclaimer\n+\n+These load/performance tests have everything (metrics, tracing, Nessie server, load generator,\n+local DynamoDB) running locally in Docker containers. This is not a production setup and cannot\n+serve as a reference of how a system behaves in reality/production. On the other hand, it is\n+probably good enough to get an idea how things work and where bottlenecks might be, assuming\n+you're running the tests on a big machine with enough CPU cores, memory and locally attached\n+NVMe, so that does not become a bottleneck.\n+\n+## Provision the load-driver EC2 instance\n+\n+Provision the machine running the \"measurement pack\" and Nessie and Gatling tests. Some examples\n+that need to be inspected and adopted to your own environments are in the 'ec2-sample-scripts'\n+subfolder.\n+\n+In our examples, we were running Ubuntu Server 20.04.\n+\n+### Start the \"measurement pack\"\n+```shell\n+\n+# cd to the Nessie source directory\n+\n+cd perftest/measurement-pack\n+\n+mkdir -p prometheus-data/data\n+chmod -R o+w prometheus-data\n+\n+docker-compose up\n+```\n+\n+### Start Nessie\n+```shell\n+\n+# TODO replace with your AWS credentials!\n+export AWS_ACCESS_KEY_ID=xxx\n+export AWS_SECRET_ACCESS_KEY=xxx\n+\n+# Start the Nessie server\n+```\n+\n+### Start the benchmark\n+```shell\n+\n+# cd to the Nessie source directory\n+\n+# See perftest/gatling/README.md for the perftest parameters.\n+\n+##############################\n+## Example tests runs \n+##############################\n+\n+./mvnw install gatling:test -Dgatling.simulationClass=org.projectnessie.perftest.gatling.CommitToBranchSimulation \\\n+  -Dsim.users=5 \\\n+  -Dsim.commits=0 \\\n+  -Dsim.mode=BRANCH_PER_USER \\\n+  -Dsim.duration.seconds=600 \\\n+  -Dsim.rate=10 \\\n+  -Dhttp.maxConnections=100 \\\n+  -pl :nessie-perftest-gatling ; sleep 60 ; \\\n+\\\n+./mvnw install gatling:test -Dgatling.simulationClass=org.projectnessie.perftest.gatling.CommitToBranchSimulation \\\n+  -Dsim.users=20 \\\n+  -Dsim.commits=0 \\\n+  -Dsim.mode=BRANCH_PER_USER \\\n+  -Dsim.duration.seconds=600 \\\n+  -Dsim.rate=10 \\\n+  -Dhttp.maxConnections=100 \\\n+  -pl :nessie-perftest-gatling ; sleep 60 ; \\\n+\\\n+./mvnw install gatling:test -Dgatling.simulationClass=org.projectnessie.perftest.gatling.CommitToBranchSimulation \\\n+  -Dsim.users=5 \\\n+  -Dsim.commits=0 \\\n+  -Dsim.mode=SINGLE_BRANCH_TABLE_PER_USER \\\n+  -Dsim.duration.seconds=600 \\\n+  -Dsim.rate=10 \\\n+  -Dhttp.maxConnections=100 \\\n+  -pl :nessie-perftest-gatling\n+```\n+\n+### Stop\n+\n+After running the benchmarks, stop the Docker(-compose) containers\n+\n+### Pull Prometheus data onto your local machine\n+```shell\n+# GO TO YOUR LOCAL NESSIE CLONE\n+cd perftest/measurement-pack\n+rm -rf prometheus-data\n+# TODO check the server path here\n+scp -r -i ~/.ssh/${YOUR_PRIVATE_KEY_FILE} ubuntu@${INSTANCE_IP}:nvm/nessie/perftest/measurement-pack/prometheus-data .\n+chmod -R o+w prometheus-data\n+docker-compose up\n+case $(uname -s) in Linux) xdg-open http://127.0.0.1:3000/ ;; Darwin) open http://127.0.0.1:3000/ ;; esac\n+```\n+\n+# Hints\n+\n+## ssh into the EC2 instance\n+\n+This sample ssh command includes port redirections for Grafana, Prometheus and Nessie from\n+your local machine to the compute-instance. With these redirections, you do not need to open the\n+TCP ports for these services.\n+\n+```shell\n+ssh -L 9090:127.0.0.1:9090 -L 3000:127.0.0.1:3000 -L 19120:127.0.0.1:19120 -i ~/.ssh/<YOUR-SSH-PRIVATE-KEY> ubuntu@<INSTANCE-IP>\n+```"
  },
  {
    "sha": "492ce88083f14e5c948b929f925445efb160ea63",
    "filename": "perftest/ec2-sample-scripts/provision-nessie-bin.in.sh",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/ec2-sample-scripts/provision-nessie-bin.in.sh",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/ec2-sample-scripts/provision-nessie-bin.in.sh",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/ec2-sample-scripts/provision-nessie-bin.in.sh?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,97 @@\n+#\n+# Copyright (C) 2020 Dremio\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+## READ CAREFULLY AND UNDERSTAND BEFORE RUNNING COMMANDS FROM THIS SCRIPT!\n+\n+##############################################################################################\n+##\n+## Hack-ish ad-hoc provisioning script for EC2 instance w/ local NVMe + benchmarking a\n+## provided Nessie binary.\n+##\n+## Read and inspect carefully before applying the changes.\n+##\n+## USE AT YOUR OWN RISK!\n+\n+## Some AWS EC2 instance types\n+#       m5d.8xlarge   32 vCPU,    128 G RAM,    2x 600 G NVMe SSD\n+#       m5d.4xlarge   16          64            2x 300\n+# -->   m5d.12xlarge  48          192           2x 900\n+#       m5d.16xlarge  64          256           4x 600\n+#       m5d.24xlarge  96          384           4x 900\n+#       m5d.metal     96          384           4x 900\n+#       m5dn...\n+\n+# Mandatory stuff (Docker, compiler, etc)\n+suto apt-get update\n+sudo apt-get install -y git docker.io docker-compose\n+sudo usermod -a -G docker ubuntu\n+\n+# Provision the NVMe SSD, mount in /home/ubuntu/nvm\n+sudo mkfs.ext4 -E nodiscard /dev/nvme1n1\n+sudo mount /dev/nvme1n1 /home/ubuntu/nvm\n+sudo chown ubuntu: nvm\n+\n+cd nvm\n+\n+# Put the Docker work directory on the NVMe SSD\n+sudo mkdir -p var-lib-docker\n+sudo ln -s $(pwd)/var-lib-docker /var/lib/docker\n+\n+# Download and install GrallVM CE (or any other Java 11 compatible JVM)\n+wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.0.0.2/graalvm-ce-java11-linux-amd64-21.0.0.2.tar.gz\n+tar xfz graalvm-ce-java11-linux-*.tar.gz\n+ln -s $(find . -name \"graalvm-ce-java11*\" -type d -maxdepth 1) jdk\n+\n+# Update environment\n+export JAVA_HOME=$(pwd)/jdk\n+export PATH=$JAVA_HOME/bin:$PATH\n+\n+cat >> ~/.bashrc <<!\n+\n+export JAVA_HOME=$JAVA_HOME\n+export PATH=\\$JAVA_HOME/bin:\\$PATH\n+!\n+\n+# Clone Nessie (this is from my personal branch!)\n+git clone https://github.com/projectnessie/nessie.git\n+cd nessie\n+\n+# Prepare the directory receiving the Prometheus data (so we can download it)\n+sudo mkdir perftest/measurement-pack/prometheus-data\n+sudo chmod o+w perftest/measurement-pack/prometheus-data\n+\n+cat >> ~/.bashrc <<!\n+\n+# Environment for the nessie server\n+export NESSIE_VERSION_STORE_TYPE=DYNAMO\n+export NESSIE_VERSION_STORE_DYNAMO_INITIALIZE=false\n+export QUARKUS_DYNAMODB_AWS_REGION=us-west-2\n+export QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE=http://dynamodb.${QUARKUS_DYNAMODB_AWS_REGION}.amazonaws.com\n+export QUARKUS_LOG_FILE_ENABLE=false\n+export QUARKUS_JAEGER_ENDPOINT=http://127.0.0.1:14268/api/traces\n+# Disable Jaeger tracing for our benchmark\n+export QUARKUS_JAEGER_SAMPLER_TYPE=const\n+export QUARKUS_JAEGER_SAMPLER_PARAM=0\n+\n+# Environment for Gatling tests\n+export JAEGER_ENDPOINT=http://127.0.0.1:14268/api/traces\n+export JAEGER_SERVICE_NAME=nessie\n+# Disable Jaeger tracing for our benchmark\n+export JAEGER_SAMPLER_TYPE=const\n+export JAEGER_SAMPLER_PARAM=0\n+!\n+\n+echo \"GROUP docker ADDED TO USER ubuntu. LOGOUT AND LOGIN AGAIN !\""
  },
  {
    "sha": "271e690e86ce8237b41d977b8d3efcfaacd8d2fa",
    "filename": "perftest/ec2-sample-scripts/provision-nessie-source.in.sh",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/ec2-sample-scripts/provision-nessie-source.in.sh",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/ec2-sample-scripts/provision-nessie-source.in.sh",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/ec2-sample-scripts/provision-nessie-source.in.sh?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,102 @@\n+#\n+# Copyright (C) 2020 Dremio\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+## READ CAREFULLY AND UNDERSTAND BEFORE RUNNING COMMANDS FROM THIS SCRIPT!\n+\n+##############################################################################################\n+##\n+## Hack-ish ad-hoc provisioning script for EC2 instance w/ local NVMe + benchmarking Nessie\n+## from source.\n+##\n+## Read and inspect carefully before applying the changes.\n+##\n+## USE AT YOUR OWN RISK!\n+\n+## Some AWS EC2 instance types\n+#       m5d.8xlarge   32 vCPU,    128 G RAM,    2x 600 G NVMe SSD\n+#       m5d.4xlarge   16          64            2x 300\n+# -->   m5d.12xlarge  48          192           2x 900\n+#       m5d.16xlarge  64          256           4x 600\n+#       m5d.24xlarge  96          384           4x 900\n+#       m5d.metal     96          384           4x 900\n+#       m5dn...\n+\n+# Mandatory stuff (Docker, compiler, etc)\n+sudo apt-get update\n+sudo apt-get install -y wget git gcc g++ zlib1g-dev docker.io docker-compose\n+sudo usermod -a -G docker ubuntu\n+\n+# Provision the NVMe SSD, mount in /home/ubuntu/nvm\n+mkdir nvm\n+sudo mkfs.ext4 -E nodiscard /dev/nvme1n1\n+sudo mount /dev/nvme1n1 /home/ubuntu/nvm\n+sudo chown ubuntu: nvm\n+\n+cd nvm\n+\n+# Put the Docker work directory on the NVMe SSD\n+sudo mkdir -p var-lib-docker\n+sudo ln -s $(pwd)/var-lib-docker /var/lib/docker\n+\n+# Download and install GrallVM CE\n+wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.0.0.2/graalvm-ce-java11-linux-amd64-21.0.0.2.tar.gz\n+tar xfz graalvm-ce-java11-linux-*.tar.gz\n+ln -s $(find . -name \"graalvm-ce-java11*\" -type d -maxdepth 1) jdk\n+\n+# Update environment\n+export JAVA_HOME=$(pwd)/jdk\n+export PATH=$JAVA_HOME/bin:$PATH\n+\n+cat >> ~/.bashrc <<!\n+\n+export JAVA_HOME=$JAVA_HOME\n+export PATH=\\$JAVA_HOME/bin:\\$PATH\n+!\n+\n+# Install the GraalVM 'native-image' extension\n+gu install native-image\n+\n+# Clone Nessie (this is from my personal branch!)\n+git clone https://github.com/projectnessie/nessie.git\n+cd nessie\n+\n+# Prepare the directory receiving the Prometheus data (so we can download it)\n+sudo mkdir perftest/measurement-pack/prometheus-data\n+sudo chmod o+w perftest/measurement-pack/prometheus-data\n+\n+cat >> ~/.bashrc <<!\n+\n+# Environment for the nessie server\n+export NESSIE_VERSION_STORE_TYPE=DYNAMO\n+export NESSIE_VERSION_STORE_DYNAMO_INITIALIZE=false\n+export QUARKUS_DYNAMODB_AWS_REGION=us-west-2\n+export QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE=http://dynamodb.${QUARKUS_DYNAMODB_AWS_REGION}.amazonaws.com\n+export QUARKUS_LOG_FILE_ENABLE=true\n+export QUARKUS_JAEGER_ENDPOINT=http://127.0.0.1:14268/api/traces\n+export QUARKUS_JAEGER_SAMPLER_TYPE=const\n+export QUARKUS_JAEGER_SAMPLER_PARAM=0\n+\n+# Environment for Gatling tests\n+export JAEGER_ENDPOINT=http://127.0.0.1:14268/api/traces\n+export JAEGER_SAMPLER_TYPE=const\n+export JAEGER_SAMPLER_PARAM=0\n+export JAEGER_SERVICE_NAME=nessie\n+!\n+\n+# Build Nessie\n+./mvnw clean install -DskipTests -Pnative\n+\n+echo \"GROUP docker ADDED TO USER ubuntu. LOGOUT AND LOGIN AGAIN !\"\n\\ No newline at end of file"
  },
  {
    "sha": "67e88591343072fabfc81e3fb9841f3121ef21ee",
    "filename": "perftest/gatling/README.md",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/README.md",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/README.md",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/README.md?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,96 @@\n+# Performance testing Nessie with Gatling\n+\n+## Setup\n+\n+1. Follow the instructions in `perftest/measurement-pack/README.md` to start the \"measurement-pack\".\n+   \"Measurement-Pack\" is a Docker Compose setup that has all metrics+traces collection services\n+   as pre-configured Docker containers, Nessie server + Gatling tests run on the host to allow\n+   shorter turn-around times during development and debugging of both Nessie and the Gatling tests.\n+1. Build Nessie: go to the Nessie root directory and execute `./mvnw clean install`, activate the\n+   `-Pnative` profile, when testing a Graal native image.\n+1. Start the Nessie Server like you need it. In all cases you have to set these \n+   environment variables:\n+    - `QUARKUS_JAEGER_ENDPOINT=http://127.0.0.1:14268/api/traces`\n+    - Without tracing: `QUARKUS_JAEGER_SAMPLER_TYPE=const` + `QUARKUS_JAEGER_SAMPLER_PARAM=0`\n+    - Everything traced: `QUARKUS_JAEGER_SAMPLER_TYPE=const` + `QUARKUS_JAEGER_SAMPLER_PARAM=1`\n+    - Probabilistic tracing: `QUARKUS_JAEGER_SAMPLER_TYPE=probabilistic` +\n+      `QUARKUS_JAEGER_SAMPLER_PARAM=0.01` (or any other value)\n+   Then run the Nessie server:\n+    - In your IDE in a Debugger...\n+    - From the command line as a Quarkus image (e.g. `java -jar servers/quarkus-server/target/quarkus-app/quarkus-run.jar`)\n+1. Run the Gatling test you'd like to run using the `gatling:test` in Maven for the\n+   `:nessie-perftest-gatling` project. See the \"Full example\" below for a list of parameters passed\n+   as system properties.\n+\n+## `CommitToBranchSimulation`\n+\n+| Parameter | Default value | Meaning\n+| --- | --- | ---\n+| sim.users | 1 |  number of users to simulate\n+| sim.commits | 100 | number of commits each simulated users adds\n+| sim.mode | BRANCH_PER_USER_SINGLE_TABLE | BRANCH_PER_USER_SINGLE_TABLE (default), BRANCH_PER_USER_RANDOM_TABLE, SINGLE_BRANCH_RANDOM_TABLE, SINGLE_BRANCH_TABLE_PER_USER, SINGLE_BRANCH_SINGLE_TABLE\n+| sim.branch | n/a | name of the branch to commit to (defaults to a name containing System.currentTimeMillis())\n+| sim.tablePrefix | n/a | prefix of the table name used in the commits (defaults to a name prefix containing System.currentTimeMillis())\n+| sim.prometheus | 127.0.0.1:9091 | hostname/IP + port of the Prometheus push gateway server\n+| sim.duration.seconds | 0 | maximum duration of the test in seconds (0 = not applied)\n+| sim.rate | 0 | rate of operations (0 = not applied / as fast as possible)\n+| sim.note | | arbitrary string that will be included in the prometheus metrics information\n+| http.maxConnections | 5 | set at least to the numebr of sim.users, otherwise HTTP requests will contend on the client side\n+\n+## Full example\n+\n+To use the local DynamoDB endpoint, check the environment variables defined in the\n+[`.env` file in measurement-pack](../measurement-pack/.env) before running the Nessie Server.\n+Adjust the environment variables via your shell, if necessary.\n+\n+### Start Nessie\n+\n+There are three alternatives:\n+\n+#### Alternative A: Run Nessie via the \"measurement-pack\":\n+\n+Nessie Server, latest released Docker image, is started via the default \n+[`docker-compose.yml`](../measurement-pack/docker-compose.yml)\n+from the \"measurement pack\". See the `README.md` [there](../measurement-pack/README.md)\n+\n+#### Alternative B: Run Nessie as a native image:\n+\n+Use the alternative Docker Compose configuration\n+[`docker-compose-local-nessie.yml`](../measurement-pack/docker-compose-local-nessie.yml)\n+\n+You should set the environment variables defined in the\n+[`.env` file in measurement-pack](../measurement-pack/.env).\n+\n+```shell\n+# Set the neccessary environment variables, see ../measurement-pack/.env\n+servers/quarkus-server/target/nessie-quarkus-*-SNAPSHOT-runner\n+```\n+\n+#### Alternative C: Run Nessie in a JVM:\n+\n+Use the alternative Docker Compose configuration\n+[`docker-compose-local-nessie.yml`](../measurement-pack/docker-compose-local-nessie.yml)\n+\n+You should set the environment variables defined in the\n+[`.env` file in measurement-pack](../measurement-pack/.env).\n+\n+```shell\n+# Set the neccessary environment variables, see ../measurement-pack/.env\n+java -Xms6g -Xmx6g -XX:+AlwaysPreTouch -jar servers/quarkus-server/target/quarkus-app/quarkus-run.jar\n+```\n+\n+### To start the Gatling simulation w/ tracing:\n+```shell\n+export JAEGER_ENDPOINT=http://127.0.0.1:14268/api/traces\n+export JAEGER_SAMPLER_TYPE=probabilistic\n+export JAEGER_SAMPLER_PARAM=0.01\n+export JAEGER_SERVICE_NAME=nessie\n+./mvnw install gatling:test -Dgatling.simulationClass=org.projectnessie.perftest.gatling.CommitToBranchSimulation -pl :nessie-perftest-gatling\n+```\n+\n+## Notes\n+\n+Please note, that `Engine`, `IDEPathHelper` and `Recorder`in `src/test/scala` and\n+`src/test/resources/gatling.conf` are generated by the Maven archetype and technically not required\n+to run a simulation, but are required to actually debug a simulation, in which case you have to run\n+the `Engine` class."
  },
  {
    "sha": "d40fb1917dd24979f42b2d4d3eca6acbaaaeeda3",
    "filename": "perftest/gatling/pom.xml",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/pom.xml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/pom.xml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/pom.xml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (C) 2020 Dremio\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.projectnessie</groupId>\n+    <artifactId>nessie-perftest</artifactId>\n+    <version>0.4.1-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>nessie-perftest-gatling</artifactId>\n+\n+  <name>Nessie - Perf Test - Gatling</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.projectnessie</groupId>\n+      <artifactId>nessie-model</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.projectnessie</groupId>\n+      <artifactId>nessie-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.gatling.highcharts</groupId>\n+      <artifactId>gatling-charts-highcharts</artifactId>\n+      <version>${gatling.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentracing</groupId>\n+      <artifactId>opentracing-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentracing</groupId>\n+      <artifactId>opentracing-util</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.jaegertracing</groupId>\n+      <artifactId>jaeger-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.jaegertracing</groupId>\n+      <artifactId>jaeger-thrift</artifactId>\n+      <exclusions>\n+        <!-- jaeger-thrift 0.34.3, the one declared in Quarkus, pulls in a banned version of annotation-api. Remove once we move to jaeger 1.x-->\n+        <exclusion>\n+          <groupId>javax.annotation</groupId>\n+          <artifactId>javax.annotation-api</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.scala-lang</groupId>\n+      <artifactId>scala-library</artifactId>\n+      <version>${scala2.13.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.micrometer</groupId>\n+      <artifactId>micrometer-registry-prometheus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_pushgateway</artifactId>\n+      <version>${prometheus.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>net.alchim31.maven</groupId>\n+        <artifactId>scala-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>compile</goal>\n+              <goal>testCompile</goal>\n+            </goals>\n+            <configuration>\n+              <sendJavaToScalac>false</sendJavaToScalac>\n+              <scalaVersion>${scala2.13.version}</scalaVersion>\n+              <jvmArgs>\n+                <jvmArg>-Xss100M</jvmArg>\n+              </jvmArgs>\n+              <args>\n+                <arg>-target:jvm-1.8</arg>\n+                <arg>-deprecation</arg>\n+                <arg>-feature</arg>\n+                <arg>-unchecked</arg>\n+                <arg>-language:implicitConversions</arg>\n+                <arg>-language:postfixOps</arg>\n+              </args>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>io.gatling</groupId>\n+        <artifactId>gatling-maven-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"
  },
  {
    "sha": "e38dcffcc1e4391f467886e7304b0441c191a5a9",
    "filename": "perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieActionBuilder.scala",
    "status": "added",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieActionBuilder.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieActionBuilder.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieActionBuilder.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.projectnessie.perftest.gatling\n+\n+import org.projectnessie.client.NessieClient\n+import io.gatling.commons.stats.{KO, OK}\n+import io.gatling.commons.util.Clock\n+import io.gatling.core.action.builder.ActionBuilder\n+import io.gatling.core.action.{Action, ExitableAction}\n+import io.gatling.core.session.Session\n+import io.gatling.core.stats.StatsEngine\n+import io.gatling.core.structure.ScenarioContext\n+import io.gatling.core.util.NameGen\n+import io.micrometer.core.instrument.{MeterRegistry, Timer}\n+import io.opentracing.Scope\n+import io.opentracing.log.Fields\n+import io.opentracing.tag.Tags\n+\n+import java.time.Duration\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Builds a Nessie-Gatling-Action.\n+ * @param tag tag as shown in Gatling for the action being built\n+ * @param nessieExec the action to be executed, takes the NessieClient and Gatling Session\n+ * @param ignoreExceptions whether exceptions are ignored\n+ * @param dontLogResponse whether responses are not logged against Gatling and don't appear in the output\n+ * @param withTracing whether the action shall be traced against Jaeger\n+ * @param traceScopeEnricher code to add custom data to the trace-scope\n+ */\n+case class NessieActionBuilder(tag: String, nessieExec: Option[(NessieClient, Session) => Session] = None,\n+                               ignoreExceptions: Boolean = false, dontLogResponse: Boolean = false,\n+                               withTracing: Boolean = false, traceScopeEnricher: (Scope, Session) => Unit = (_, _) => {},\n+                               exceptionHandler: (Exception, NessieClient, Session) => Session = (_, _, session) => session\n+                              ) extends ActionBuilder with NameGen {\n+  def ignoreException(): NessieActionBuilder = NessieActionBuilder(tag, nessieExec, ignoreExceptions = true, dontLogResponse, withTracing, traceScopeEnricher, exceptionHandler)\n+\n+  def onException(handler: (Exception, NessieClient, Session) => Session): NessieActionBuilder = NessieActionBuilder(tag, nessieExec, ignoreExceptions, dontLogResponse, withTracing, traceScopeEnricher, handler)\n+\n+  def trace(scopeEnricher: (Scope, Session) => Unit): NessieActionBuilder = NessieActionBuilder(tag, nessieExec, ignoreExceptions, dontLogResponse, withTracing = true, scopeEnricher, exceptionHandler)\n+\n+  def trace(): NessieActionBuilder = trace((_, _) => {})\n+\n+  def dontLog(): NessieActionBuilder = NessieActionBuilder(tag, nessieExec, ignoreExceptions, dontLogResponse = true, withTracing, traceScopeEnricher, exceptionHandler)\n+\n+  def execute(nessieExec: (NessieClient, Session) => Session): NessieActionBuilder = NessieActionBuilder(tag, Some(nessieExec), ignoreExceptions, dontLogResponse, withTracing, traceScopeEnricher, exceptionHandler)\n+\n+  def execute(nessieExec: NessieClient => Unit): NessieActionBuilder = execute((client, session) => {\n+    nessieExec.apply(client)\n+    session\n+  })\n+\n+  def build(ctx: ScenarioContext, next: Action): Action = {\n+    val nessieComponents = ctx.protocolComponentsRegistry.components(NessieProtocol.NessieProtocolKey)\n+    val exec = nessieExec.get\n+    NessieAction(genName(s\"Nessie: $tag\"), next, nessieComponents, exec, ignoreExceptions, dontLogResponse, withTracing, traceScopeEnricher, exceptionHandler)\n+  }\n+}\n+\n+case class NessieAction(name: String, next: Action, nessieComponents: NessieComponents,\n+                        nessieExec: (NessieClient, Session) => Session, ignoreExceptions: Boolean,\n+                        dontLogResponse: Boolean,\n+                        withTracing: Boolean, traceScopeEnricher: (Scope, Session) => Unit,\n+                        exceptionHandler: (Exception, NessieClient, Session) => Session) extends ExitableAction {\n+  override def clock: Clock = nessieComponents.coreComponents.clock\n+\n+  override def statsEngine: StatsEngine = nessieComponents.coreComponents.statsEngine\n+\n+  private def startTrace: Option[Scope] = {\n+    if (withTracing && nessieComponents.tracer.isDefined) {\n+      Some(nessieComponents.tracer.map(tracer => tracer.buildSpan(name).startActive(true)).get)\n+    } else {\n+      None\n+    }\n+  }\n+\n+  private def metric(sample: Timer.Sample, session: Session, status: String, error: Boolean, registry: MeterRegistry): Unit = {\n+    sample.stop(Timer.builder(\"nessie.benchmark.action\")\n+      .tags(nessieComponents.nessieProtocol.prometheusPush.get.commonTags.asJava)\n+      .tag(\"action\", name)\n+      .tag(\"scenario\", session.scenario)\n+      .tag(\"status\", status)\n+      .tag(\"error\", error.toString)\n+      .publishPercentileHistogram()\n+      .distributionStatisticBufferLength(3)\n+      .distributionStatisticExpiry(Duration.ofMinutes(1))\n+      .register(registry))\n+  }\n+\n+  override protected def execute(session: Session): Unit = {\n+\n+    val scope = startTrace\n+    scope.foreach(s => traceScopeEnricher(s, session))\n+\n+    val sample = Timer.start()\n+    val registry = session(\"prometheus.registry\").as[MeterRegistry]\n+    val start = clock.nowMillis\n+    try {\n+      val sess = nessieExec(nessieComponents.nessieProtocol.client, session)\n+      val end = clock.nowMillis\n+\n+      if (!dontLogResponse) {\n+        // Measure in Prometheus\n+        metric(sample, session, \"OK\", error = false, registry)\n+\n+        // Tell Gatling...\n+        statsEngine.logResponse(sess.scenario, List.empty, name, start, end, OK, None, None)\n+      }\n+\n+      // close tracing scope\n+      scope.foreach(s => s.close())\n+\n+      next ! sess.markAsSucceeded\n+    } catch {\n+      case e: Exception =>\n+        val end = clock.nowMillis\n+\n+        // Measure in Prometheus\n+        if (!dontLogResponse) {\n+          // Measure in Prometheus, do not add the exception message (Prometheus size restrictions)\n+          metric(sample, session, if (ignoreExceptions) \"OK\" else \"Fail\", error = true, registry)\n+\n+          // Tell Gatling...\n+          statsEngine.logResponse(session.scenario, List.empty, name, start, end, if (ignoreExceptions) OK else KO, None, Some(e.toString))\n+        }\n+\n+        // TODO propagate exception to caller as some check??\n+\n+        // add exception information to trace + close tracing scope\n+        scope.foreach(s => {\n+          Tags.ERROR.set(s.span.log(Map(Fields.EVENT -> Tags.ERROR.getKey,\n+            Fields.ERROR_OBJECT -> e.toString).asJava), true)\n+          s.close()\n+        })\n+\n+        if (ignoreExceptions) {\n+          next ! exceptionHandler(e, nessieComponents.nessieProtocol.client, session).markAsSucceeded\n+        } else {\n+          next ! exceptionHandler(e, nessieComponents.nessieProtocol.client, session).markAsFailed\n+        }\n+    }\n+  }\n+}"
  },
  {
    "sha": "b68e6cce5a8925388d1009070516aae471f89560",
    "filename": "perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieDsl.scala",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieDsl.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieDsl.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieDsl.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.projectnessie.perftest.gatling\n+\n+trait NessieDsl {\n+  val nessie: NessieProtocolBuilder.type = NessieProtocolBuilder\n+\n+  /**\n+   * Start building a new action against Nessie.\n+   * @param tag tag/name of the action\n+   * @return action builder\n+   */\n+  def nessie(tag: String): NessieActionBuilder = NessieActionBuilder(tag)\n+}"
  },
  {
    "sha": "466eaf059a0b0d8121d55ce3ec53655b4b2c71ba",
    "filename": "perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieProtocol.scala",
    "status": "added",
    "additions": 181,
    "deletions": 0,
    "changes": 181,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieProtocol.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieProtocol.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/NessieProtocol.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,181 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.projectnessie.perftest.gatling\n+\n+import org.projectnessie.client.NessieClient\n+import com.typesafe.scalalogging.StrictLogging\n+import io.gatling.core.CoreComponents\n+import io.gatling.core.config.GatlingConfiguration\n+import io.gatling.core.protocol.{Protocol, ProtocolComponents, ProtocolKey}\n+import io.gatling.core.session.Session\n+import io.jaegertracing.Configuration\n+import io.micrometer.core.instrument.{Gauge, Tag, Timer}\n+import io.micrometer.prometheus.{PrometheusConfig, PrometheusMeterRegistry}\n+import io.opentracing.Tracer\n+import io.opentracing.util.GlobalTracer\n+import io.prometheus.client.exporter.PushGateway\n+\n+import java.time.Duration\n+import java.util.concurrent.atomic.{AtomicInteger, AtomicReference}\n+import java.util.concurrent.{Executors, ScheduledExecutorService, ScheduledFuture, TimeUnit}\n+import java.util.function.Supplier\n+import scala.jdk.CollectionConverters._\n+\n+object NessieProtocol {\n+  val NessieProtocolKey: ProtocolKey[NessieProtocol, NessieComponents] = new ProtocolKey[NessieProtocol, NessieComponents] {\n+\n+    def protocolClass: Class[Protocol] = classOf[NessieProtocol].asInstanceOf[Class[Protocol]]\n+\n+    def defaultProtocolValue(configuration: GatlingConfiguration): NessieProtocol = throw new IllegalStateException(\"Can't provide a default value for CqlProtocol\")\n+\n+    def newComponents(coreComponents: CoreComponents): NessieProtocol => NessieComponents = cqlProtocol => NessieComponents(coreComponents, cqlProtocol)\n+  }\n+}\n+\n+case class PrometheusPush(jobName: String, pushGatewayURI: String = \"127.0.0.1:9091\", commonTags: Iterable[Tag] = Iterable.empty, globalTags: Iterable[Tag] = Iterable.empty) {\n+}\n+\n+//holds reference to a cluster, just settings\n+case class NessieProtocol(client: NessieClient, prometheusPush: Option[PrometheusPush]) extends Protocol {\n+  type Components = NessieComponents\n+}\n+\n+object NessieTracer {\n+  val tracer: Option[Tracer] = {\n+    try {\n+      val tracer = Configuration.fromEnv().getTracer\n+      GlobalTracer.register(tracer)\n+      Some(tracer)\n+    } catch {\n+      case e: Throwable =>\n+        System.err.println(s\"WARNING: Jaeger tracing not available: $e\")\n+        None\n+    }\n+  }\n+}\n+\n+/**\n+ * Helper class for Metrics that are pushed to Prometheus using a Push-Gateway, provides a\n+ * shutdown-hook to push the \"last\" metrics.\n+ */\n+private case class MetricsInfo(push: PrometheusPush, totalSample: Timer.Sample, pushGateway: PushGateway,\n+                               executor: ScheduledExecutorService, pusher: ScheduledFuture[_],\n+                               registry: PrometheusMeterRegistry, currentUsers: AtomicInteger = new AtomicInteger()) {\n+  def shutdown(session: Session): Unit = this.synchronized {\n+    if (!executor.isShutdown) {\n+      totalSample.stop(Timer.builder(\"nessie.benchmark.total-duration\")\n+        .tags(push.commonTags.asJava)\n+        .tag(\"scenario\", session.scenario)\n+        .tag(\"status\", session.status.name)\n+        .distributionStatisticBufferLength(3)\n+        .distributionStatisticExpiry(Duration.ofMinutes(1))\n+        .register(registry))\n+\n+      pusher.cancel(true)\n+      executor.shutdown()\n+\n+      pushGateway.pushAdd(registry.getPrometheusRegistry, push.jobName)\n+    }\n+  }\n+}\n+\n+object MetricsPusher {\n+\n+  private val metricsInfo = new AtomicReference[MetricsInfo]()\n+\n+  def start(push: PrometheusPush, session: Session): Session = this.synchronized {\n+    if (metricsInfo.get() == null) {\n+      val executor = Executors.newScheduledThreadPool(1)\n+      val registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n+      val totalSample = Timer.start()\n+      val pushGateway = new PushGateway(push.pushGatewayURI)\n+\n+      val pusher = executor.scheduleAtFixedRate(new Runnable {\n+        override def run(): Unit = {\n+          try {\n+            pushGateway.pushAdd(registry.getPrometheusRegistry, push.jobName)\n+          } catch {\n+            case e: Exception =>\n+              e.printStackTrace()\n+          }\n+        }\n+      }, 0, 3, TimeUnit.SECONDS)\n+\n+      val m = MetricsInfo(push, totalSample, pushGateway, executor, pusher, registry)\n+\n+      Gauge.builder(\"nessie.benchmark.active-users\", new Supplier[Number] {\n+        override def get(): Number = m.currentUsers.get\n+      })\n+        .tags(push.commonTags.asJava)\n+        .tags(push.globalTags.asJava)\n+        .tag(\"scenario\", session.scenario)\n+        .register(registry)\n+\n+      Runtime.getRuntime.addShutdownHook(new Thread(new Runnable {\n+        override def run(): Unit = {\n+          m.currentUsers.set(0)\n+          m.shutdown(session)\n+        }\n+      }))\n+\n+      metricsInfo.set(m)\n+    }\n+\n+    val m = metricsInfo.get()\n+    m.currentUsers.incrementAndGet()\n+    session.set(\"prometheus.registry\", m.registry)\n+  }\n+\n+  def stop(session: Session): Session = this.synchronized {\n+    val m = metricsInfo.getAndSet(null)\n+    if (m != null && m.currentUsers.decrementAndGet() == 0) {\n+      m.shutdown(session)\n+    }\n+\n+    if (session.contains(\"prometheus.registry\")) {\n+      session.remove(\"prometheus.registry\")\n+    } else {\n+      session\n+    }\n+  }\n+}\n+\n+case class NessieComponents(coreComponents: CoreComponents, nessieProtocol: NessieProtocol) extends ProtocolComponents {\n+\n+  val tracer: Option[Tracer] = NessieTracer.tracer\n+\n+  def onStart: Session => Session = session => {\n+    if (nessieProtocol.prometheusPush.isDefined) {\n+      // Start pushing metrics via the Prometheus Push-Gateway, if the configuration is present.\n+      MetricsPusher.start(nessieProtocol.prometheusPush.get, session)\n+    } else {\n+      session\n+    }\n+  }\n+\n+  def onExit: Session => Unit = session => {\n+    if (nessieProtocol.prometheusPush.isDefined) {\n+      // Stop pushing metrics via the Prometheus Push-Gateway\n+      MetricsPusher.stop(session)\n+    }\n+  }\n+}\n+\n+case class NessieProtocolBuilder(prometheusPush: Option[PrometheusPush] = None) extends StrictLogging {\n+  def prometheusPush(prometheusPush: PrometheusPush): NessieProtocolBuilder = NessieProtocolBuilder(Some(prometheusPush))\n+\n+  def client(client: NessieClient): NessieProtocol = NessieProtocol(client, prometheusPush)\n+}"
  },
  {
    "sha": "5bd9d90423572b7f7d889f219e8dadd7eae1b143",
    "filename": "perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/Predef.scala",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/Predef.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/Predef.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/main/scala/org/projectnessie/perftest/gatling/Predef.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,18 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.projectnessie.perftest.gatling\n+\n+object Predef extends NessieDsl"
  },
  {
    "sha": "211a3aab358523bdc368776e94053bac664aa791",
    "filename": "perftest/gatling/src/test/resources/gatling.conf",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/resources/gatling.conf",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/resources/gatling.conf",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/test/resources/gatling.conf?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,143 @@\n+#\n+# Copyright (C) 2020 Dremio\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+#########################\n+# Gatling Configuration #\n+#########################\n+\n+# This file contains all the settings configurable for Gatling with their default values\n+\n+gatling {\n+  core {\n+    #outputDirectoryBaseName = \"\" # The prefix for each simulation result folder (then suffixed by the report generation timestamp)\n+    runDescription = \"none\"          # The description for this simulation run, displayed in each report\n+    #encoding = \"utf-8\"           # Encoding to use throughout Gatling for file and string manipulation\n+    #simulationClass = \"\"         # The FQCN of the simulation to run (when used in conjunction with noReports, the simulation for which assertions will be validated)\n+    #elFileBodiesCacheMaxCapacity = 200      # Cache size for request body EL templates, set to 0 to disable\n+    #rawFileBodiesCacheMaxCapacity = 200     # Cache size for request body Raw templates, set to 0 to disable\n+    #rawFileBodiesInMemoryMaxSize = 1000     # Below this limit, raw file bodies will be cached in memory\n+    #pebbleFileBodiesCacheMaxCapacity = 200  # Cache size for request body Peeble templates, set to 0 to disable\n+    #feederAdaptiveLoadModeThreshold = 100   # File size threshold (in MB). Below load eagerly in memory, above use batch mode with default buffer size\n+    #shutdownTimeout = 10000                 # Milliseconds to wait for the actor system to shutdown\n+    extract {\n+      regex {\n+        #cacheMaxCapacity = 200 # Cache size for the compiled regexes, set to 0 to disable caching\n+      }\n+      xpath {\n+        #cacheMaxCapacity = 200 # Cache size for the compiled XPath queries,  set to 0 to disable caching\n+      }\n+      jsonPath {\n+        #cacheMaxCapacity = 200 # Cache size for the compiled jsonPath queries, set to 0 to disable caching\n+      }\n+      css {\n+        #cacheMaxCapacity = 200 # Cache size for the compiled CSS selectors queries,  set to 0 to disable caching\n+      }\n+    }\n+    directory {\n+      #simulations = user-files/simulations # Directory where simulation classes are located (for bundle packaging only)\n+      #resources = user-files/resources     # Directory where resources, such as feeder files and request bodies are located (for bundle packaging only)\n+      #reportsOnly = \"\"                     # If set, name of report folder to look for in order to generate its report\n+      #binaries = \"\"                        # If set, name of the folder where compiles classes are located: Defaults to GATLING_HOME/target.\n+      #results = results                    # Name of the folder where all reports folder are located\n+    }\n+  }\n+  socket {\n+    #connectTimeout = 10000                 # Timeout in millis for establishing a TCP socket\n+    #tcpNoDelay = true\n+    #soKeepAlive = false                    # if TCP keepalive configured at OS level should be used\n+    #soReuseAddress = false\n+  }\n+  netty {\n+    #useNativeTransport = true              # if Netty native transport should be used instead of Java NIO\n+    #allocator = \"pooled\"                   # switch to unpooled for unpooled ByteBufAllocator\n+    #maxThreadLocalCharBufferSize = 200000  # Netty's default is 16k\n+  }\n+  ssl {\n+    #useOpenSsl = true                    # if OpenSSL should be used instead of JSSE (only the latter can be debugged with -Djava.net.debug=ssl)\n+    #useOpenSslFinalizers = false         # if OpenSSL contexts should be freed with Finalizer or if using RefCounted is fine\n+    #handshakeTimeout = 10000             # TLS handshake timeout in millis\n+    #useInsecureTrustManager = true       # Use an insecure TrustManager that trusts all server certificates\n+    #enabledProtocols = []             # Array of enabled protocols for HTTPS, if empty use Netty's defaults\n+    #enabledCipherSuites = []          # Array of enabled cipher suites for HTTPS, if empty enable all available ciphers\n+    #sessionCacheSize = 0              # SSLSession cache size, set to 0 to use JDK's default\n+    #sessionTimeout = 0                # SSLSession timeout in seconds, set to 0 to use JDK's default (24h)\n+    #enableSni = true                     # When set to true, enable Server Name indication (SNI)\n+    keyStore {\n+      #type = \"\"      # Type of SSLContext's KeyManagers store\n+      #file = \"\"      # Location of SSLContext's KeyManagers store\n+      #password = \"\"  # Password for SSLContext's KeyManagers store\n+      #algorithm = \"\" # Algorithm used SSLContext's KeyManagers store\n+    }\n+    trustStore {\n+      #type = \"\"      # Type of SSLContext's TrustManagers store\n+      #file = \"\"      # Location of SSLContext's TrustManagers store\n+      #password = \"\"  # Password for SSLContext's TrustManagers store\n+      #algorithm = \"\" # Algorithm used by SSLContext's TrustManagers store\n+    }\n+  }\n+  charting {\n+    #noReports = false       # When set to true, don't generate HTML reports\n+    #maxPlotPerSeries = 1000 # Number of points per graph in Gatling reports\n+    #useGroupDurationMetric = false  # Switch group timings from cumulated response time to group duration.\n+    indicators {\n+      #lowerBound = 800      # Lower bound for the requests' response time to track in the reports and the console summary\n+      #higherBound = 1200    # Higher bound for the requests' response time to track in the reports and the console summary\n+      #percentile1 = 50      # Value for the 1st percentile to track in the reports, the console summary and Graphite\n+      #percentile2 = 75      # Value for the 2nd percentile to track in the reports, the console summary and Graphite\n+      #percentile3 = 95      # Value for the 3rd percentile to track in the reports, the console summary and Graphite\n+      #percentile4 = 99      # Value for the 4th percentile to track in the reports, the console summary and Graphite\n+    }\n+  }\n+  http {\n+    #fetchedCssCacheMaxCapacity = 200          # Cache size for CSS parsed content, set to 0 to disable\n+    #fetchedHtmlCacheMaxCapacity = 200         # Cache size for HTML parsed content, set to 0 to disable\n+    #perUserCacheMaxCapacity = 200             # Per virtual user cache size, set to 0 to disable\n+    #warmUpUrl = \"https://gatling.io\"          # The URL to use to warm-up the HTTP stack (blank means disabled)\n+    #enableGA = true                           # Very light Google Analytics (Gatling and Java version), please support\n+    #pooledConnectionIdleTimeout = 60000       # Timeout in millis for a connection to stay idle in the pool\n+    #requestTimeout = 60000                    # Timeout in millis for performing an HTTP request\n+    #enableHostnameVerification = false        # When set to true, enable hostname verification: SSLEngine.setHttpsEndpointIdentificationAlgorithm(\"HTTPS\")\n+    dns {\n+      #queryTimeout = 5000                     # Timeout in millis of each DNS query in millis\n+      #maxQueriesPerResolve = 6                # Maximum allowed number of DNS queries for a given name resolution\n+    }\n+  }\n+  jms {\n+    #replyTimeoutScanPeriod = 1000  # scan period for timedout reply messages\n+  }\n+  data {\n+    #writers = [console, file]      # The list of DataWriters to which Gatling write simulation data (currently supported : console, file, graphite)\n+    console {\n+      #light = false                # When set to true, displays a light version without detailed request stats\n+      #writePeriod = 5              # Write interval, in seconds\n+    }\n+    file {\n+      #bufferSize = 8192            # FileDataWriter's internal data buffer size, in bytes\n+    }\n+    leak {\n+      #noActivityTimeout = 30  # Period, in seconds, for which Gatling may have no activity before considering a leak may be happening\n+    }\n+    graphite {\n+      #light = false              # only send the all* stats\n+      #host = \"localhost\"         # The host where the Carbon server is located\n+      #port = 2003                # The port to which the Carbon server listens to (2003 is default for plaintext, 2004 is default for pickle)\n+      #protocol = \"tcp\"           # The protocol used to send data to Carbon (currently supported : \"tcp\", \"udp\")\n+      #rootPathPrefix = \"gatling\" # The common prefix of all metrics sent to Graphite\n+      #bufferSize = 8192          # Internal data buffer size, in bytes\n+      #writePeriod = 1            # Write period, in seconds\n+    }\n+  }\n+}"
  },
  {
    "sha": "4a3bd4f6b9b4b4a9f277972f5f57831ab9f69005",
    "filename": "perftest/gatling/src/test/scala/Engine.scala",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/Engine.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/Engine.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/test/scala/Engine.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import io.gatling.app.Gatling\n+import io.gatling.core.config.GatlingPropertiesBuilder\n+\n+/**\n+ * Class generated by the Maven archetype for Gatling.\n+ */\n+object Engine extends App {\n+\n+  val props = new GatlingPropertiesBuilder()\n+    .resourcesDirectory(IDEPathHelper.mavenResourcesDirectory.toString)\n+    .resultsDirectory(IDEPathHelper.resultsDirectory.toString)\n+    .binariesDirectory(IDEPathHelper.mavenBinariesDirectory.toString)\n+\n+  Gatling.fromMap(props.build)\n+}"
  },
  {
    "sha": "66b07fdfd6296e5c3ad2eba8661731e484d441fe",
    "filename": "perftest/gatling/src/test/scala/IDEPathHelper.scala",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/IDEPathHelper.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/IDEPathHelper.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/test/scala/IDEPathHelper.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.nio.file.{Path, Paths}\n+\n+/**\n+ * Class generated by the Maven archetype for Gatling.\n+ */\n+object IDEPathHelper {\n+\n+  private val projectRootDir = Paths.get(getClass.getClassLoader.getResource(\"gatling.conf\").toURI).getParent.getParent.getParent\n+  private val mavenTargetDirectory = projectRootDir.resolve(\"target\")\n+  private val mavenSrcTestDirectory = projectRootDir.resolve(\"src\").resolve(\"test\")\n+\n+  val mavenSourcesDirectory: Path = mavenSrcTestDirectory.resolve(\"scala\")\n+  val mavenResourcesDirectory: Path = mavenSrcTestDirectory.resolve(\"resources\")\n+  val mavenBinariesDirectory: Path = mavenTargetDirectory.resolve(\"test-classes\")\n+  val resultsDirectory: Path = mavenTargetDirectory.resolve(\"gatling\")\n+  val recorderConfigFile: Path = mavenResourcesDirectory.resolve(\"recorder.conf\")\n+}"
  },
  {
    "sha": "a4a3edde3d31a2252e88b4936ce797281cc6f4f4",
    "filename": "perftest/gatling/src/test/scala/Recorder.scala",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/Recorder.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/Recorder.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/test/scala/Recorder.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import io.gatling.recorder.GatlingRecorder\n+import io.gatling.recorder.config.RecorderPropertiesBuilder\n+\n+/**\n+ * Class generated by the Maven archetype for Gatling.\n+ */\n+object Recorder extends App {\n+\n+  val props = new RecorderPropertiesBuilder()\n+    .simulationsFolder(IDEPathHelper.mavenSourcesDirectory.toString)\n+    .resourcesFolder(IDEPathHelper.mavenResourcesDirectory.toString)\n+    .simulationPackage(\"org.projectnessie.perftest.gatling\")\n+\n+  GatlingRecorder.fromMap(props.build, Some(IDEPathHelper.recorderConfigFile))\n+}"
  },
  {
    "sha": "ca9d2941095bde4db73147ae55a6baf127a5f573",
    "filename": "perftest/gatling/src/test/scala/org/projectnessie/perftest/gatling/CommitToBranchSimulation.scala",
    "status": "added",
    "additions": 241,
    "deletions": 0,
    "changes": 241,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/org/projectnessie/perftest/gatling/CommitToBranchSimulation.scala",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/gatling/src/test/scala/org/projectnessie/perftest/gatling/CommitToBranchSimulation.scala",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/gatling/src/test/scala/org/projectnessie/perftest/gatling/CommitToBranchSimulation.scala?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,241 @@\n+/**\n+ * Copyright (C) 2020 Dremio\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.projectnessie.perftest.gatling\n+\n+import java.util.concurrent.ThreadLocalRandom\n+\n+import scala.concurrent.duration.{FiniteDuration, HOURS, NANOSECONDS, SECONDS}\n+\n+import org.projectnessie.client.NessieClient\n+import org.projectnessie.error.NessieConflictException\n+import org.projectnessie.model.{Branch, ContentsKey, IcebergTable}\n+import org.projectnessie.perftest.gatling.Predef.nessie\n+\n+import io.gatling.core.Predef._\n+import io.gatling.core.scenario.Simulation\n+import io.gatling.core.structure.ScenarioBuilder\n+import io.micrometer.core.instrument.Tag\n+\n+/** Gatling simulation to perform commits against Nessie.\n+ *  Has a bunch of configurables, see the `val`s defined at the top of this class.\n+ */\n+class CommitToBranchSimulation extends Simulation {\n+  /** The Nessie branch name to use, the default include the current wall-clock in ms since epoch.\n+   *  System property: `sim.branch`, defaults to `s\"commits-${System.currentTimeMillis()}\"`.\n+   */\n+  val branch: String = System.getProperty(\"sim.branch\", s\"commits-${System.currentTimeMillis()}\")\n+  /** The simulation mode, defined in the [[BranchMode]] enum.\n+   *  System property: `sim.branchMode`, defaults to [[BranchMode.BRANCH_PER_USER_SINGLE_TABLE]].\n+   */\n+  val mode: BranchMode.BranchMode = BranchMode.withName(System.getProperty(\"sim.mode\", BranchMode.BRANCH_PER_USER_SINGLE_TABLE.toString))\n+  /** The table name to use, the default include the current wall-clock in ms since epoch.\n+   *  System property: `sim.tablePrefix`, defaults to `s\"someTable${System.currentTimeMillis()}\"`.\n+   */\n+  val tablePrefix: String = System.getProperty(\"sim.tablePrefix\", s\"someTable${System.currentTimeMillis()}\")\n+  /** The number of simulated tables, each commit chooses a random table.\n+   *  System property: `sim.tables`, defaults to `250`.\n+   */\n+  val numTables: Int = Integer.getInteger(\"sim.tables\", 250)\n+  /** The number of users to simulate.\n+   *  System property: `sim.users`, defaults to `1`.\n+   */\n+  val numUsers: Int = Integer.getInteger(\"sim.users\", 1).toInt\n+  /** The commit-rate in commits-per-second, `0` means \"as fast as possible\".\n+   *  Implemented with Gatling's [[io.gatling.core.structure.Pauses#pace(Duration)]] function,\n+   *  which acts like a \"sleep()\" after each commit.\n+   *  System property: `sim.rate`, defaults to `0`.\n+   */\n+  val commitRate: Double = System.getProperty(\"sim.rate\", \"0\").toDouble\n+  /** The number of commits to perform per user.\n+   *  System property: `sim.commits`, defaults to `100`.\n+   */\n+  val numberOfCommits: Int = Integer.getInteger(\"sim.commits\", 100).toInt\n+  /** The runtime duration (for commits) of the simulations in seconds.\n+   *  `0` means endless or until the specified number of commits ([[numberOfCommits]]) have been performed.\n+   *  System property: `sim.duration.seconds`, defaults to `0`.\n+   */\n+  val durationSeconds: Int = Integer.getInteger(\"sim.duration.seconds\", 0).toInt\n+  /** The IP and port of the Prometheus Push-Gateway.\n+   *  A \"benchmark_description\" tag is added to all metrics, see the note-property.\n+   *  System property: `sim.prometheus`, defaults to `127.0.0.1:9091`.\n+   */\n+  val prometheusPushURL: String = System.getProperty(\"sim.prometheus\", \"127.0.0.1:9091\")\n+  /** Arbitrary note added as a Prometheus tag, used to distinguish metrics from different runs\n+   *  in e.g. Grafana.\n+   *  System property: `sim.note`, defaults to `\"\"`.\n+   */\n+  val note: String = System.getProperty(\"sim.note\", \"\")\n+\n+  /** The actual benchmark code to measure Nessie-commit performance in various scenarios. */\n+  private def commitToBranch = {\n+    val chain = exec(nessie(\"Commit\").execute { (client, session) =>\n+      // The commit number is the loop-variable declared buildScenario()\n+      val commitNum = session(\"commitNum\").asOption[Int].get\n+      // Current Nessie Branch object\n+      val branch = session(\"branch\").as[Branch]\n+      // Our \"user ID\", an integer supplied by Gatling\n+      val userId = session.userId\n+      // Table used in the Nessie commit\n+      val tableName = makeTableName(session)\n+\n+      // Call the Nessie client operation to perform a commit\n+      client.getContentsApi.setContents(ContentsKey.of(\"name\", \"space\", tableName),\n+        branch.getName, branch.getHash,\n+        s\"test-commit $userId $commitNum\", IcebergTable.of(s\"path_on_disk_${tableName}_$commitNum\"))\n+\n+      session\n+    }.onException { (e, client, session) =>\n+      if (e.isInstanceOf[NessieConflictException]) {\n+        val branch = session(\"branch\").as[Branch]\n+        session.set(\"branch\", client.getTreeApi.getReferenceByName(branch.getName).asInstanceOf[Branch])\n+      } else {\n+        session\n+      }\n+    }.trace((scope, session) => {\n+      // add user-id and commit-number to the Jaeger tracing tags\n+      val userId = session.userId\n+      val commitNum = session(\"commitNum\").asOption[Int].get\n+      scope.span().setTag(\"sim.user-id\", userId).setTag(\"sim.commit-num\", commitNum)\n+    }))\n+\n+    if (commitRate > 0) {\n+      // \"pace\" the commits, if commit-rate is configured\n+      val oneHour = FiniteDuration(1, HOURS)\n+      val nanosPerIteration = oneHour.toNanos / (commitRate * oneHour.toSeconds)\n+      pace(FiniteDuration(nanosPerIteration.toLong, NANOSECONDS)).exitBlockOnFail(chain)\n+    } else {\n+      // if no commit-rate is configured, run \"as fast as possible\"\n+      chain\n+    }\n+  }\n+\n+  def makeTableName(session: Session): String = {\n+    mode match {\n+      case BranchMode.BRANCH_PER_USER_RANDOM_TABLE => s\"${tablePrefix}_${ThreadLocalRandom.current().nextInt(numTables)}\"\n+      case BranchMode.BRANCH_PER_USER_SINGLE_TABLE => tablePrefix\n+      case BranchMode.SINGLE_BRANCH_RANDOM_TABLE => s\"${tablePrefix}_${ThreadLocalRandom.current().nextInt(numTables)}\"\n+      case BranchMode.SINGLE_BRANCH_TABLE_PER_USER => s\"${tablePrefix}_${session.userId}\"\n+      case BranchMode.SINGLE_BRANCH_SINGLE_TABLE => tablePrefix\n+    }\n+  }\n+\n+  /** Compute branch name for a user depending on [[mode]] and [[branch]] */\n+  def makeBranchName(session: Session): String = {\n+    mode match {\n+      case BranchMode.SINGLE_BRANCH_TABLE_PER_USER => branch\n+      case BranchMode.SINGLE_BRANCH_RANDOM_TABLE => branch\n+      case BranchMode.SINGLE_BRANCH_SINGLE_TABLE => branch\n+      case BranchMode.BRANCH_PER_USER_RANDOM_TABLE => s\"$branch-${session.userId}\"\n+      case BranchMode.BRANCH_PER_USER_SINGLE_TABLE => s\"$branch-${session.userId}\"\n+    }\n+  }\n+\n+  private def getReference = {\n+    // If we don't have a reference for the branch yet, then try to create the branch and try to fetch the reference\n+    exec(nessie(s\"Create branch $branch\")\n+      .execute { (client, session) =>\n+        // create the branch (errors will be ignored)\n+        client.getTreeApi.createReference(Branch.of(makeBranchName(session), null))\n+        session\n+      }\n+      // ignore any exception and do not log the \"create-branch\" operation\n+      .ignoreException().dontLog())\n+      .exec(nessie(s\"Get reference $branch\").execute { (client, session) =>\n+        // retrieve the Nessie branch reference and store it in the Gatling session object\n+        val branch = client.getTreeApi.getReferenceByName(makeBranchName(session)).asInstanceOf[Branch]\n+        session.set(\"branch\", branch)\n+      })\n+  }\n+\n+  private def buildScenario(): ScenarioBuilder = {\n+    val scn = scenario(\"Commit-To-Branch\")\n+      .exec(getReference)\n+\n+    if (numberOfCommits > 0) {\n+      // Process configured number of commits\n+      scn.repeat(numberOfCommits, \"commitNum\") {\n+        commitToBranch\n+      }\n+    } else {\n+      // otherwise run \"forever\" (or until \"max-duration\")\n+      scn.forever(\"commitNum\") {\n+        commitToBranch\n+      }\n+    }\n+  }\n+\n+  /** Sets up the simulation. Implemented as a function to respect the optional maximum-duration.\n+   */\n+  private def doSetUp(): SetUp = {\n+    val nessieProtocol: NessieProtocol = nessie()\n+      .prometheusPush(PrometheusPush(\"commit_to_branch_simulation\", prometheusPushURL,\n+        Seq(Tag.of(\"application\", \"Nessie-Benchmark\")),\n+        Seq(Tag.of(\"benchmark_description\", s\"users=$numUsers commits=$numberOfCommits branchMode=$mode \" +\n+          s\"table=$tablePrefix branch=$branch rate=$commitRate duration=${durationSeconds}s note=$note\"))\n+      ))\n+      .client(NessieClient.builder()\n+        .withUri(\"http://127.0.0.1:19120/api/v1\").fromSystemProperties()\n+        .withTracing(true).build())\n+\n+    System.out.println(\n+      s\"\"\"\n+        |Simulation parameters:\n+        |   branch-name:    $branch\n+        |   branch-mode:    $mode\n+        |   table-prefix:   $tablePrefix\n+        |   num-tables:     $numTables\n+        |   num-users:      $numUsers\n+        |   commit-rate:    $commitRate\n+        |   num-commits:    $numberOfCommits\n+        |   duration:       $durationSeconds\n+        |   note:           $note\n+        |\"\"\".stripMargin)\n+\n+    var s = setUp(buildScenario().inject(atOnceUsers(numUsers)))\n+    if (durationSeconds > 0) {\n+      s = s.maxDuration(FiniteDuration(durationSeconds, SECONDS))\n+    }\n+    s.protocols(nessieProtocol)\n+  }\n+\n+  // This is where everything starts...\n+  doSetUp()\n+}\n+\n+object BranchMode extends Enumeration {\n+  type BranchMode = Value\n+  val\n+  /** Each simulated user \"works\" on its own branch and each Nessie-commit against a random (one\n+   *  out of [[CommitToBranchSimulation.numTables]]) [[IcebergTable]] name.\n+   */\n+  BRANCH_PER_USER_RANDOM_TABLE,\n+  /** Each simulated user \"works\" on its own branch and all Nessie-commit against the same\n+   *  [[IcebergTable]] name.\n+   */\n+  BRANCH_PER_USER_SINGLE_TABLE,\n+  /** All simulated user \"work\" on a single branch and each Nessie-commit against a random (one\n+   *  out of [[CommitToBranchSimulation.numTables]]) [[IcebergTable]] name.\n+   */\n+  SINGLE_BRANCH_RANDOM_TABLE,\n+  /** All simulated user \"work\" on a single branch and each Nessie-commit against an\n+   *  [[IcebergTable]] per user.\n+   */\n+  SINGLE_BRANCH_TABLE_PER_USER,\n+  /** All simulated user \"work\" on a single branch and all Nessie-commits update a single\n+   *  [[IcebergTable]].\n+   */\n+  SINGLE_BRANCH_SINGLE_TABLE = Value\n+}"
  },
  {
    "sha": "d885d9df5ef35a97c254036ebe4837eca7b68f7d",
    "filename": "perftest/measurement-pack/.env",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/.env",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/.env",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/.env?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,11 @@\n+JAEGER_ENDPOINT=http://jaeger:14268/api/traces\n+NESSIE_VERSION_STORE_DYNAMO_INITIALIZE=true\n+NESSIE_VERSION_STORE_TYPE=DYNAMO\n+QUARKUS_JAEGER_SAMPLER_TYPE=probabilistic\n+QUARKUS_JAEGER_SAMPLER_PARAM=0.01\n+QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE=http://dynamodb:8000\n+QUARKUS_DYNAMODB_AWS_REGION=us-west-2\n+AWS_DEFAULT_REGION=us-west-2\n+AWS_ACCESS_KEY_ID=xxx\n+AWS_SECRET_ACCESS_KEY=xxx\n+HTTP_ACCESS_LOG_LEVEL=INFO"
  },
  {
    "sha": "0dfde03b2a22293851d535e0a63bccf479b4678a",
    "filename": "perftest/measurement-pack/.gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/.gitignore",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/.gitignore",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/.gitignore?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,2 @@\n+prometheus-data/\n+"
  },
  {
    "sha": "eaa99bda8bfb68313cabcf4f19bb23b0e8092386",
    "filename": "perftest/measurement-pack/README.md",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/README.md",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/README.md",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/README.md?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,58 @@\n+# Nessie Perf-Test Measurement Pack\n+\n+\"Measurement-Pack\" is a Docker Compose setup that has all metrics+traces collection services\n+as pre-configured Docker containers, Nessie server + Gatling tests run on the host to allow\n+shorter turn-around times during development and debugging of both Nessie and the Gatling tests.\n+\n+The pack of Docker containers (Grafana + Prometheus + Jaeger) that are used to collect metrics\n+for performance tests, which act as the backend when running a performance test when both the Nessie\n+server and load generators run on the host.\n+\n+Containers:\n+* Grafana to display metrics. Pre-configured with three dashboards:\n+  * JVM-metrics (only useful when running Nessie not as a native image)\n+  * \"Nessie\" to view the metrics collected by Nessie\n+  * \"Nessie-Benchmark\" to view the metrics collected by the Gatling based benchmarks/perf-test\n+* Prometheus. Pre-configured to use `prometheus-data/data` in the current directory to store the\n+  metrics, so you can easily collect the metrics and transfer those to another machine for later\n+  inspection: just startup another \"measurement-pack\" for example on your laptop with the\n+  `prometheus-data/data` directory pre-populated.\n+* Prometheus Push-Gateway. This is used by the Gatling benchmark/perf-test to push the metrics.\n+  Note: Prometheus Push-Gateway is *not* meant for production use, only for one-off-ish scenarios.\n+* Jaeger. To collect traces. Both Nessie and the Nessie-Gatling stuff can emit trace inforrmation,\n+  but must be configured accordingly. For Nessie, use the Quarkus environment variables, for\n+  the benchmarks/perf-tests use the \"raw\" Jaeger environment variables (starting with `JAEGER_`).\n+* DynamoDB. A local DynamoDB, if running the tests on your local machine.\n+* Nessie Docker image. (Only in `docker-compose.yml`)\n+* Only in `docker-compose-local-nessie.yml`, there is also Docker-Host: a Docker container to let\n+  the Docker container access services (= Nessie) running on your local machine.\n+* Cadvisor. To inspect the Docker containers.\n+\n+## Starting the measurement-pack\n+\n+1. Go to the `perftest/measurement-pack` directory \n+1. Setup [docker compose](https://docs.docker.com/compose/install/)\n+1. Pre-create the Prometheus data directory:\n+  - `mkdir -p prometheus-data/data`\n+  - `chmod -R o+w prometheus-data`\n+1. Check the default environment variables in the [`.env`](./.env) file and update those in\n+   your shell, if necessary, before issuing `docker-compose up`.\n+1. Execute `docker-compose up -d`.\n+   This will start:\n+  - [Grafana](http://localhost:3000) - for plotting prometheus metrics\n+  - [Prometheus](http://localhost:9090) - collecting load, dynamo usage etc from server\n+  - [Jaeger](http://localhost:16686) - trace executions\n+  - Cadvisor - docker image and host metrics\n+  - Local-DynamoDB - for dynamodb and future AWS services\n+  - Nessie via the latest released Docker image (`projectnessie/nessie:latest`). To run Nessie\n+    locally on your host, use the alternative\n+    [`docker-compose-local-nessie.yml`](./docker-compose-local-nessie.yml).\n+\n+## Troubleshooting tip: If Prometheus cannot scrape your Nessie instance\n+\n+This \"pack of Docker containers for measurement\" accesses Nessie running on your machine\n+from the Docker containers.\n+\n+If Prometheus accesses time out, make sure your local firewall does not block TCP traffic from\n+the Docker containers to your machine. Your machine's blocking TCP traffic, if Prometheus complains\n+about \"context timeout\" or so in http://localhost:9090/classic/targets"
  },
  {
    "sha": "7ee21521b9a20d1f1366b590d9c19dea4e92daca",
    "filename": "perftest/measurement-pack/configs/grafana/dashboards/JVM-Micrometer.json",
    "status": "added",
    "additions": 4638,
    "deletions": 0,
    "changes": 4638,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/dashboards/JVM-Micrometer.json",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/dashboards/JVM-Micrometer.json",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/grafana/dashboards/JVM-Micrometer.json?ref=ca057fc24c2611f16fc26b4051676f18b5313576"
  },
  {
    "sha": "d423a1f8a8797b2ad28fac5c54605c8ba2758155",
    "filename": "perftest/measurement-pack/configs/grafana/dashboards/Nessie-Benchmark.json",
    "status": "added",
    "additions": 820,
    "deletions": 0,
    "changes": 820,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/dashboards/Nessie-Benchmark.json",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/dashboards/Nessie-Benchmark.json",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/grafana/dashboards/Nessie-Benchmark.json?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,820 @@\n+{\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"limit\": 100,\n+        \"name\": \"Annotations & Alerts\",\n+        \"showIn\": 0,\n+        \"type\": \"dashboard\"\n+      },\n+      {\n+        \"datasource\": \"Prometheus\",\n+        \"enable\": true,\n+        \"expr\": \"increase(up{application=\\\"$application\\\", instance=\\\"$instance\\\"}[10s]) > 0\",\n+        \"hide\": false,\n+        \"iconColor\": \"rgba(96, 255, 96, 1)\",\n+        \"name\": \"process-up-detection\",\n+        \"showIn\": 0,\n+        \"step\": \"5s\",\n+        \"tagKeys\": \"application,instance\",\n+        \"titleFormat\": \"Process up\"\n+      },\n+      {\n+        \"datasource\": \"Prometheus\",\n+        \"enable\": true,\n+        \"expr\": \"resets(up{application=\\\"$application\\\", instance=\\\"$instance\\\"}[10s]) > 0\",\n+        \"hide\": false,\n+        \"iconColor\": \"rgba(255, 96, 96, 1)\",\n+        \"name\": \"process-down-detection\",\n+        \"showIn\": 0,\n+        \"step\": \"5s\",\n+        \"tagKeys\": \"application,instance\",\n+        \"titleFormat\": \"Process down\"\n+      },\n+      {\n+        \"datasource\": \"Prometheus\",\n+        \"enable\": true,\n+        \"expr\": \"nessie_benchmark_active_users{application=\\\"Nessie-Benchmark\\\"}\",\n+        \"hide\": false,\n+        \"iconColor\": \"rgba(255, 255, 255, 1)\",\n+        \"name\": \"benchmark\",\n+        \"showIn\": 0,\n+        \"step\": \"5s\",\n+        \"tagKeys\": \"scenario,benchmark_description\",\n+        \"titleFormat\": \"Nessie Benchmark\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 1,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 1\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 2,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.75, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Commit-.*\\\"}[1m])) by (le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p75\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Commit-.*\\\"}[1m])) by (le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Commit-.*\\\"}[1m])) by (le))\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Commit-.*\\\"}[1m])) by (le))\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(nessie_benchmark_action_seconds_max{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Commit-.*\\\"})\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Commit (time)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 1\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 3,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(rate(nessie_benchmark_action_seconds_count{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Commit-.*\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"rate {{status}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Commit (rate)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"ops\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 10\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 4,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.75, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Get commit log.*\\\"}[1m])) by (le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p75\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Get commit log.*\\\"}[1m])) by (le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Get commit log.*\\\"}[1m])) by (le))\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(nessie_benchmark_action_seconds_bucket{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Get commit log.*\\\"}[1m])) by (le))\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(nessie_benchmark_action_seconds_max{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Get commit log.*\\\"})\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Get Commit Log (time)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 10\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 5,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(rate(nessie_benchmark_action_seconds_count{application=\\\"Nessie-Benchmark\\\", action=~\\\"Nessie: Get commit log.*\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"rate {{status}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Get Commit Log (rate)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"ops\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 15\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 10,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"nessie_benchmark_total_duration_seconds_max\",\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Total Duration\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Benchmark Duration\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:67\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:68\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 15\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 11,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"nessie_benchmark_active_users\",\n+          \"format\": \"single\",\n+          \"interval\": \"\",\n+          \"legendFormat\": \"users\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Active Benchmark Users\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:75\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": 0,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:76\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": 0,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    }\n+  ],\n+  \"refresh\": \"30s\",\n+  \"schemaVersion\": 27,\n+  \"style\": \"dark\",\n+  \"tags\": [],\n+  \"templating\": {\n+    \"list\": [\n+      {\n+        \"allValue\": null,\n+        \"current\": {\n+          \"isNone\": true,\n+          \"selected\": false,\n+          \"text\": \"None\",\n+          \"value\": \"\"\n+        },\n+        \"datasource\": \"Prometheus\",\n+        \"definition\": \"\",\n+        \"description\": null,\n+        \"error\": null,\n+        \"hide\": 0,\n+        \"includeAll\": false,\n+        \"label\": \"Application\",\n+        \"multi\": false,\n+        \"name\": \"application\",\n+        \"options\": [],\n+        \"query\": {\n+          \"query\": \"label_values(application)\",\n+          \"refId\": \"Prometheus-application-Variable-Query\"\n+        },\n+        \"refresh\": 2,\n+        \"regex\": \"\",\n+        \"skipUrlSync\": false,\n+        \"sort\": 0,\n+        \"tagValuesQuery\": \"\",\n+        \"tags\": [],\n+        \"tagsQuery\": \"\",\n+        \"type\": \"query\",\n+        \"useTags\": false\n+      },\n+      {\n+        \"allFormat\": \"glob\",\n+        \"allValue\": null,\n+        \"current\": {\n+          \"isNone\": true,\n+          \"selected\": false,\n+          \"text\": \"None\",\n+          \"value\": \"\"\n+        },\n+        \"datasource\": \"Prometheus\",\n+        \"definition\": \"\",\n+        \"description\": null,\n+        \"error\": null,\n+        \"hide\": 0,\n+        \"includeAll\": false,\n+        \"label\": \"Instance\",\n+        \"multi\": false,\n+        \"multiFormat\": \"glob\",\n+        \"name\": \"instance\",\n+        \"options\": [],\n+        \"query\": {\n+          \"query\": \"label_values(jvm_info_total{application=\\\"$application\\\"}, instance)\",\n+          \"refId\": \"Prometheus-instance-Variable-Query\"\n+        },\n+        \"refresh\": 2,\n+        \"regex\": \"\",\n+        \"skipUrlSync\": false,\n+        \"sort\": 0,\n+        \"tagValuesQuery\": \"\",\n+        \"tags\": [],\n+        \"tagsQuery\": \"\",\n+        \"type\": \"query\",\n+        \"useTags\": false\n+      }\n+    ]\n+  },\n+  \"time\": {\n+    \"from\": \"now-1h\",\n+    \"to\": \"now\"\n+  },\n+  \"timepicker\": {\n+    \"now\": true,\n+    \"refresh_intervals\": [\n+      \"5s\",\n+      \"10s\",\n+      \"30s\",\n+      \"1m\",\n+      \"5m\",\n+      \"15m\",\n+      \"30m\",\n+      \"1h\",\n+      \"2h\",\n+      \"1d\"\n+    ],\n+    \"time_options\": [\n+      \"5m\",\n+      \"15m\",\n+      \"1h\",\n+      \"6h\",\n+      \"12h\",\n+      \"24h\",\n+      \"2d\",\n+      \"7d\",\n+      \"30d\"\n+    ]\n+  },\n+  \"timezone\": \"browser\",\n+  \"title\": \"Nessie Benchmark\",\n+  \"uid\": \"itt84dyMy\",\n+  \"version\": 1\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "67ba51e8163c7436c50389870fd082a13a9a4b44",
    "filename": "perftest/measurement-pack/configs/grafana/dashboards/Nessie.json",
    "status": "added",
    "additions": 1806,
    "deletions": 0,
    "changes": 1806,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/dashboards/Nessie.json",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/dashboards/Nessie.json",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/grafana/dashboards/Nessie.json?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,1806 @@\n+{\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"limit\": 100,\n+        \"name\": \"Annotations & Alerts\",\n+        \"showIn\": 0,\n+        \"type\": \"dashboard\"\n+      },\n+      {\n+        \"datasource\": \"Prometheus\",\n+        \"enable\": true,\n+        \"expr\": \"increase(up{application=\\\"$application\\\", instance=\\\"$instance\\\"}[10s]) > 0\",\n+        \"hide\": false,\n+        \"iconColor\": \"rgba(96, 255, 96, 1)\",\n+        \"name\": \"process-up-detection\",\n+        \"showIn\": 0,\n+        \"step\": \"5s\",\n+        \"tagKeys\": \"application,instance\",\n+        \"titleFormat\": \"Process up\"\n+      },\n+      {\n+        \"datasource\": \"Prometheus\",\n+        \"enable\": true,\n+        \"expr\": \"resets(up{application=\\\"$application\\\", instance=\\\"$instance\\\"}[10s]) > 0\",\n+        \"hide\": false,\n+        \"iconColor\": \"rgba(255, 96, 96, 1)\",\n+        \"name\": \"process-down-detection\",\n+        \"showIn\": 0,\n+        \"step\": \"5s\",\n+        \"tagKeys\": \"application,instance\",\n+        \"titleFormat\": \"Process down\"\n+      },\n+      {\n+        \"datasource\": \"Prometheus\",\n+        \"enable\": true,\n+        \"expr\": \"nessie_benchmark_active_users{application=\\\"Nessie-Benchmark\\\"}\",\n+        \"hide\": false,\n+        \"iconColor\": \"rgba(255, 255, 255, 1)\",\n+        \"name\": \"benchmark\",\n+        \"showIn\": 0,\n+        \"step\": \"5s\",\n+        \"tagKeys\": \"scenario,benchmark_description\",\n+        \"titleFormat\": \"Nessie Benchmark\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 1,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"collapsed\": false,\n+      \"datasource\": null,\n+      \"gridPos\": {\n+        \"h\": 1,\n+        \"w\": 24,\n+        \"x\": 0,\n+        \"y\": 100\n+      },\n+      \"id\": 100,\n+      \"panels\": [],\n+      \"title\": \"Version Store\",\n+      \"type\": \"row\"\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 101\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 101,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.75, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"commit\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p75 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"commit\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"commit\\\"}[1m])) by (error, le))\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99 err={{error}}\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"commit\\\"}[1m])) by (error, le))\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999 err={{error}}\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(nessie_version_store_request_seconds_max{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"commit\\\"}) by (error)\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max err={{error}}\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Commit\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"timetime\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 101\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 102,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(rate(nessie_version_store_request_seconds_count{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"commit\\\"}[1m])) by (error)\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"rate err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"sum(rate(nessie_version_store_commit_retries{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"retries\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"sum(rate(nessie_version_store_commit_failures{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"failures\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"C\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Commit (rate)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"ops\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 104\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 107,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.75, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"to-ref\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p75 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"to-ref\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"to-ref\\\"}[1m])) by (error, le))\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99 err={{error}}\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"to-ref\\\"}[1m])) by (error, le))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999 err={{error}}\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(nessie_version_store_request_seconds_max{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"to-ref\\\"}) by (error)\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max err={{error}}\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie To-Ref\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 104\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 108,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(rate(nessie_version_store_request_seconds_count{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"to-ref\\\"}[1m])) by (error)\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"rate err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie To-Ref (rate)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"ops\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 112\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 103,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.75, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-named-refs\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p75 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-named-refs\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-named-refs\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-named-refs\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(nessie_version_store_request_seconds_max{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-named-refs\\\"}) by (error)\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Get Named Refs\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 112\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 104,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(rate(nessie_version_store_request_seconds_count{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-named-refs\\\"}[1m])) by (error)\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"rate err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Get Named Refs (rate)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"ops\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 113\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 105,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.75, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-commits\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p75 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-commits\\\"}[1m])) by (error, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95 err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-commits\\\"}[1m])) by (error, le))\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99 err={{error}}\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(nessie_version_store_request_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-commits\\\"}[1m])) by (error, le))\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999 err={{error}}\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(nessie_version_store_request_seconds_max{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-commits\\\"}) by (error)\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max err={{error}}\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Get Commits\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 113\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 106,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum(rate(nessie_version_store_request_seconds_count{application=\\\"$application\\\", instance=\\\"$instance\\\", request=\\\"get-commits\\\"}[1m])) by (error)\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"rate err={{error}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Get Commits (rate)\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"ops\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"datasource\": null,\n+      \"gridPos\": {\n+        \"h\": 1,\n+        \"w\": 24,\n+        \"x\": 0,\n+        \"y\": 200\n+      },\n+      \"id\": 200,\n+      \"title\": \"Dynamo\",\n+      \"type\": \"row\"\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 202\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 202,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum by (operation) (rate(DynamoDB_ApiCallSuccessful_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"{{operation}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"sum(rate(DynamoDB_ApiCallSuccessful_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Sum\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Dynamo API Call Successful\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 202\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 203,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"histogram_quantile(0.95, sum(rate(DynamoDB_ApiCallDuration_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m])) by (operation, le))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p95 {{operation}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.99, sum(rate(DynamoDB_ApiCallDuration_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m])) by (operation, le))\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p99 {{operation}}\",\n+          \"refId\": \"C\"\n+        },\n+        {\n+          \"expr\": \"histogram_quantile(0.999, sum(rate(DynamoDB_ApiCallDuration_seconds_bucket{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m])) by (operation, le))\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"p999 {{operation}}\",\n+          \"refId\": \"D\"\n+        },\n+        {\n+          \"expr\": \"max(DynamoDB_ApiCallDuration_seconds_max{application=\\\"$application\\\", instance=\\\"$instance\\\"}) by (operation)\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"max {{operation}}\",\n+          \"refId\": \"E\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Dynamo API Call Duration\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"s\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 203\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 204,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum by (operation) (rate(DynamoDB_ReceivedRecordCount_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"{{operation}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"sum by (application, instance) (rate(DynamoDB_ReceivedRecordCount_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Sum\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Dynamo Received Record Count\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 203\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 205,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum by (operation) (rate(DynamoDB_RequestedRecordCount_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"{{operation}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"sum by (application, instance) (rate(DynamoDB_RequestedRecordCount_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Sum\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Dynamo Requested Record Count\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 210\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 210,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": true\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"sum by (operation) (rate(DynamoDB_ConsumedCapacity_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"{{operation}}\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"sum by (application, instance) (rate(DynamoDB_ConsumedCapacity_summary_count{application=\\\"$application\\\", instance=\\\"$instance\\\"}[1m]))\",\n+          \"instant\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Sum\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"B\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Dynamo Consumed Capacity\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:43\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:44\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": null,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    },\n+    {\n+      \"datasource\": null,\n+      \"gridPos\": {\n+        \"h\": 1,\n+        \"w\": 24,\n+        \"x\": 0,\n+        \"y\": 300\n+      },\n+      \"id\": 300,\n+      \"title\": \"Threads\",\n+      \"type\": \"row\"\n+    },\n+    {\n+      \"aliasColors\": {},\n+      \"bars\": false,\n+      \"dashLength\": 10,\n+      \"dashes\": false,\n+      \"datasource\": \"Prometheus\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"custom\": {}\n+        },\n+        \"overrides\": []\n+      },\n+      \"fill\": 1,\n+      \"fillGradient\": 0,\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 301\n+      },\n+      \"hiddenSeries\": false,\n+      \"id\": 301,\n+      \"legend\": {\n+        \"avg\": false,\n+        \"current\": false,\n+        \"max\": false,\n+        \"min\": false,\n+        \"show\": true,\n+        \"total\": false,\n+        \"values\": false\n+      },\n+      \"lines\": true,\n+      \"linewidth\": 1,\n+      \"nullPointMode\": \"null\",\n+      \"options\": {\n+        \"alertThreshold\": true\n+      },\n+      \"percentage\": false,\n+      \"pluginVersion\": \"7.4.0\",\n+      \"pointradius\": 2,\n+      \"points\": false,\n+      \"renderer\": \"flot\",\n+      \"seriesOverrides\": [],\n+      \"spaceLength\": 10,\n+      \"stack\": false,\n+      \"steppedLine\": false,\n+      \"targets\": [\n+        {\n+          \"expr\": \"executor_active_threads{application=\\\"$application\\\", instance=\\\"$instance\\\"}\",\n+          \"format\": \"time_series\",\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Active Threads\",\n+          \"queryType\": \"randomWalk\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"expr\": \"executor_pool_core_threads{application=\\\"$application\\\", instance=\\\"$instance\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Core Threads\",\n+          \"refId\": \"B\"\n+        },\n+        {\n+          \"expr\": \"executor_queue_remaining_tasks{application=\\\"$application\\\", instance=\\\"$instance\\\"}\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"interval\": \"\",\n+          \"legendFormat\": \"Remaining Tasks\",\n+          \"refId\": \"C\"\n+        }\n+      ],\n+      \"thresholds\": [],\n+      \"timeFrom\": null,\n+      \"timeRegions\": [],\n+      \"timeShift\": null,\n+      \"title\": \"Nessie Threads\",\n+      \"tooltip\": {\n+        \"shared\": true,\n+        \"sort\": 0,\n+        \"value_type\": \"individual\"\n+      },\n+      \"type\": \"graph\",\n+      \"xaxis\": {\n+        \"buckets\": null,\n+        \"mode\": \"time\",\n+        \"name\": null,\n+        \"show\": true,\n+        \"values\": []\n+      },\n+      \"yaxes\": [\n+        {\n+          \"$$hashKey\": \"object:75\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": 0,\n+          \"show\": true\n+        },\n+        {\n+          \"$$hashKey\": \"object:76\",\n+          \"format\": \"short\",\n+          \"label\": null,\n+          \"logBase\": 1,\n+          \"max\": null,\n+          \"min\": 0,\n+          \"show\": true\n+        }\n+      ],\n+      \"yaxis\": {\n+        \"align\": false,\n+        \"alignLevel\": null\n+      }\n+    }\n+  ],\n+  \"refresh\": \"30s\",\n+  \"schemaVersion\": 27,\n+  \"style\": \"dark\",\n+  \"tags\": [],\n+  \"templating\": {\n+    \"list\": [\n+      {\n+        \"allValue\": null,\n+        \"current\": {\n+          \"isNone\": true,\n+          \"selected\": false,\n+          \"text\": \"None\",\n+          \"value\": \"\"\n+        },\n+        \"datasource\": \"Prometheus\",\n+        \"definition\": \"\",\n+        \"description\": null,\n+        \"error\": null,\n+        \"hide\": 0,\n+        \"includeAll\": false,\n+        \"label\": \"Application\",\n+        \"multi\": false,\n+        \"name\": \"application\",\n+        \"options\": [],\n+        \"query\": {\n+          \"query\": \"label_values(application)\",\n+          \"refId\": \"Prometheus-application-Variable-Query\"\n+        },\n+        \"refresh\": 2,\n+        \"regex\": \"\",\n+        \"skipUrlSync\": false,\n+        \"sort\": 0,\n+        \"tagValuesQuery\": \"\",\n+        \"tags\": [],\n+        \"tagsQuery\": \"\",\n+        \"type\": \"query\",\n+        \"useTags\": false\n+      },\n+      {\n+        \"allFormat\": \"glob\",\n+        \"allValue\": null,\n+        \"current\": {\n+          \"selected\": false,\n+          \"text\": \"nessie:19120\",\n+          \"value\": \"nessie:19120\"\n+        },\n+        \"datasource\": \"Prometheus\",\n+        \"definition\": \"\",\n+        \"description\": null,\n+        \"error\": null,\n+        \"hide\": 0,\n+        \"includeAll\": false,\n+        \"label\": \"Instance\",\n+        \"multi\": false,\n+        \"multiFormat\": \"glob\",\n+        \"name\": \"instance\",\n+        \"options\": [],\n+        \"query\": {\n+          \"query\": \"label_values(jvm_info_total{application=\\\"$application\\\"}, instance)\",\n+          \"refId\": \"Prometheus-instance-Variable-Query\"\n+        },\n+        \"refresh\": 2,\n+        \"regex\": \"\",\n+        \"skipUrlSync\": false,\n+        \"sort\": 0,\n+        \"tagValuesQuery\": \"\",\n+        \"tags\": [],\n+        \"tagsQuery\": \"\",\n+        \"type\": \"query\",\n+        \"useTags\": false\n+      }\n+    ]\n+  },\n+  \"time\": {\n+    \"from\": \"now-1h\",\n+    \"to\": \"now\"\n+  },\n+  \"timepicker\": {\n+    \"now\": true,\n+    \"refresh_intervals\": [\n+      \"5s\",\n+      \"10s\",\n+      \"30s\",\n+      \"1m\",\n+      \"5m\",\n+      \"15m\",\n+      \"30m\",\n+      \"1h\",\n+      \"2h\",\n+      \"1d\"\n+    ],\n+    \"time_options\": [\n+      \"5m\",\n+      \"15m\",\n+      \"1h\",\n+      \"6h\",\n+      \"12h\",\n+      \"24h\",\n+      \"2d\",\n+      \"7d\",\n+      \"30d\"\n+    ]\n+  },\n+  \"timezone\": \"browser\",\n+  \"title\": \"Nessie\",\n+  \"uid\": \"itt84dyMz\",\n+  \"version\": 1\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "36d19807b03c48e39143f5353dd6efbcc8be63f1",
    "filename": "perftest/measurement-pack/configs/grafana/grafana.ini",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/grafana.ini",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/grafana.ini",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/grafana/grafana.ini?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,16 @@\n+##################### Grafana Configuration for Nessie ad-hoc tests #####################\n+#\n+# \"Good-enough\" but rather insecure (do *NOT* use in a production environment) Grafana\n+# configuration meant to easily startup Grafana to inspect metrics from a \"ephemeral\"\n+# Docker container.\n+#\n+# Anonymous read-access is enabled by default.\n+\n+#################################### Dashboards History ##################\n+[dashboards]\n+\n+# Use \"Nessie\" as the home dashboard.\n+default_home_dashboard_path = /var/lib/grafana/dashboards/Nessie.json\n+\n+[auth.anonymous]\n+enabled = true"
  },
  {
    "sha": "dfe2a25b9ffed927494414c5811d57fedd8ac43e",
    "filename": "perftest/measurement-pack/configs/grafana/provisioning/dashboards/dashboards.yaml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/provisioning/dashboards/dashboards.yaml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/provisioning/dashboards/dashboards.yaml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/grafana/provisioning/dashboards/dashboards.yaml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,11 @@\n+# # config file version\n+apiVersion: 1\n+\n+providers:\n+ - name: 'default'\n+   orgId: 1\n+   folder: ''\n+   folderUid: ''\n+   type: file\n+   options:\n+     path: /var/lib/grafana/dashboards"
  },
  {
    "sha": "3f5f6c7bcb91293fa4612a0d3909e295ac50a644",
    "filename": "perftest/measurement-pack/configs/grafana/provisioning/datasources/prometheus.yaml",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/provisioning/datasources/prometheus.yaml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/grafana/provisioning/datasources/prometheus.yaml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/grafana/provisioning/datasources/prometheus.yaml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,14 @@\n+apiVersion: 1\n+\n+deleteDatasources:\n+  - name: Prometheus\n+    orgId: 1\n+\n+datasources:\n+  - name: Prometheus\n+    type: prometheus\n+    access: proxy\n+    url: http://prometheus:9090\n+    editable: true\n+    jsonData:\n+      timeInterval: '3s'"
  },
  {
    "sha": "fe0b3f0573a9fe44735955eed42fa3603992b31e",
    "filename": "perftest/measurement-pack/configs/prometheus/prometheus.yml",
    "status": "renamed",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/prometheus/prometheus.yml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/configs/prometheus/prometheus.yml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/configs/prometheus/prometheus.yml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -19,12 +19,15 @@ scrape_configs:\n     scrape_interval: 5s\n     static_configs:\n       - targets:\n-          - perftest_nessie_1:19120\n-          - perftest_nessie_2:19120\n-          - perftest_nessie_3:19120\n-          - perftest_nessie_4:19120\n-          - perftest_nessie_5:19120\n-          - perftest_nessie_6:19120\n+          - nessie:19120\n+        labels:\n+          application: \"Nessie\"\n+    metrics_path: /q/metrics\n+  - job_name: push-gateway\n+    scrape_interval: 5s\n+    static_configs:\n+      - targets:\n+          - push-gateway:9091\n   - job_name: cadvisor\n     scrape_interval: 5s\n     static_configs:",
    "previous_filename": "perftest/prometheus.yml"
  },
  {
    "sha": "4b3a5e2d150454760f03234a906a8c8b0a01f9d4",
    "filename": "perftest/measurement-pack/docker-compose-local-nessie.yml",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/docker-compose-local-nessie.yml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/docker-compose-local-nessie.yml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/docker-compose-local-nessie.yml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -0,0 +1,90 @@\n+#\n+# Copyright (C) 2020 Dremio\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+version: '3.3'\n+services:\n+  grafana:\n+    image: grafana/grafana\n+    container_name: grafana\n+    depends_on:\n+      - prometheus\n+    ports:\n+      - 3000:3000\n+    volumes:\n+      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro\n+      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro\n+      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro\n+  prometheus:\n+    image: prom/prometheus\n+    container_name: prometheus\n+    ports:\n+      - 9090:9090\n+    command:\n+      - --config.file=/etc/prometheus/prometheus.yml\n+      - --storage.tsdb.retention.time=1y\n+    volumes:\n+      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n+      - ./configs/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro\n+      - ./prometheus-data:/prometheus:rw\n+    depends_on:\n+      - cadvisor\n+      - docker-host\n+  push-gateway:\n+    image: prom/pushgateway\n+    container_name: push-gateway\n+    ports:\n+      - 9091:9091\n+    depends_on:\n+      - prometheus\n+  cadvisor:\n+    image: gcr.io/google-containers/cadvisor\n+    container_name: cadvisor\n+    ports:\n+      - 8080:8080\n+    volumes:\n+      - /:/rootfs:ro\n+      - /var/run:/var/run:rw\n+      - /sys:/sys:ro\n+      - /var/lib/docker/:/var/lib/docker:ro\n+  jaeger:\n+    image: jaegertracing/all-in-one:1.22.0\n+    container_name: jaeger\n+    ports:\n+      - 5775:5775/udp\n+      - 6831:6831/udp\n+      - 6832:6832/udp\n+      - 5778:5778\n+      - 16686:16686\n+      - 14268:14268\n+      - 14250:14250\n+      - 9411:9411\n+    environment:\n+      - COLLECTOR_ZIPKIN_HTTP_PORT=9411\n+  dynamodb:\n+    image: amazon/dynamodb-local\n+    container_name: dynamodb\n+    ports:\n+      - 8000:8000\n+  # docker-host is an image that forwards traffic to the host running the Docker containers.\n+  # This container is needed to let e.g. Prometheus scrape the metrics from the Nessie server\n+  # running on the Docker host (your machine). Make sure, your firewall doesn't block that traffic.\n+  docker-host:\n+    hostname: nessie\n+    image: qoomon/docker-host\n+    container_name: docker-host\n+    cap_add:\n+      - NET_ADMIN\n+      - NET_RAW"
  },
  {
    "sha": "80d00fd4e2fda9a0003c683703b596acdbb3b73f",
    "filename": "perftest/measurement-pack/docker-compose.yml",
    "status": "renamed",
    "additions": 35,
    "deletions": 27,
    "changes": 62,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/docker-compose.yml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/measurement-pack/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/measurement-pack/docker-compose.yml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -14,35 +14,41 @@\n # limitations under the License.\n #\n \n-version: '3.8'\n+version: '3.3'\n services:\n   grafana:\n     image: grafana/grafana\n+    container_name: grafana\n     depends_on:\n       - prometheus\n     ports:\n       - 3000:3000\n-  nginx:\n-    image: nginx:latest\n     volumes:\n-      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n-    depends_on:\n-      - nessie\n-    ports:\n-      - \"19131:19131\"\n+      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro\n+      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro\n+      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro\n   prometheus:\n-    image: prom/prometheus:latest\n+    image: prom/prometheus\n     container_name: prometheus\n     ports:\n       - 9090:9090\n     command:\n       - --config.file=/etc/prometheus/prometheus.yml\n+      - --storage.tsdb.retention.time=1y\n     volumes:\n-      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro\n+      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n+      - ./prometheus-data:/prometheus:rw\n     depends_on:\n       - cadvisor\n+  push-gateway:\n+    image: prom/pushgateway\n+    container_name: push-gateway\n+    ports:\n+      - 9091:9091\n+    depends_on:\n+      - prometheus\n   cadvisor:\n-    image: gcr.io/google-containers/cadvisor:latest\n+    image: gcr.io/google-containers/cadvisor\n     container_name: cadvisor\n     ports:\n       - 8080:8080\n@@ -51,10 +57,9 @@ services:\n       - /var/run:/var/run:rw\n       - /sys:/sys:ro\n       - /var/lib/docker/:/var/lib/docker:ro\n-    depends_on:\n-      - nessie\n   jaeger:\n-    image: jaegertracing/all-in-one:1.18\n+    image: jaegertracing/all-in-one:1.22.0\n+    container_name: jaeger\n     ports:\n       - 5775:5775/udp\n       - 6831:6831/udp\n@@ -66,23 +71,26 @@ services:\n       - 9411:9411\n     environment:\n       - COLLECTOR_ZIPKIN_HTTP_PORT=9411\n+  dynamodb:\n+    image: amazon/dynamodb-local\n+    container_name: dynamodb\n+    ports:\n+      - 8000:8000\n   nessie:\n     image: projectnessie/nessie:latest\n     expose:\n       - \"19120\"\n     depends_on:\n       - dynamodb\n     environment:\n-      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces\n-      - QUARKUS_JAEGER_SAMPLER_TYPE=const\n-      - NESSIE_VERSION_STORE_DYNAMO_INITIALIZE=true\n-      - NESSIE_VERSION_STORE_TYPE=DYNAMO\n-      - QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE=http://dynamodb:8000\n-      - QUARKUS_DYNAMODB_AWS_REGION=us-west-2\n-      - AWS_DEFAULT_REGION=us-west-2\n-      - AWS_ACCESS_KEY_ID=xxx\n-      - AWS_SECRET_ACCESS_KEY=xxx\n-  dynamodb:\n-    image: amazon/dynamodb-local\n-    ports:\n-      - 8000:8000\n+      - JAEGER_ENDPOINT\n+      - QUARKUS_JAEGER_SAMPLER_TYPE\n+      - QUARKUS_JAEGER_SAMPLER_PARAM\n+      - NESSIE_VERSION_STORE_DYNAMO_INITIALIZE\n+      - NESSIE_VERSION_STORE_TYPE\n+      - QUARKUS_DYNAMODB_ENDPOINT_OVERRIDE\n+      - QUARKUS_DYNAMODB_AWS_REGION\n+      - AWS_DEFAULT_REGION\n+      - AWS_ACCESS_KEY_ID\n+      - AWS_SECRET_ACCESS_KEY\n+      - HTTP_ACCESS_LOG_LEVEL",
    "previous_filename": "perftest/docker-compose.yml"
  },
  {
    "sha": "6078960a4f30929eaa87cf98546069d2cb379321",
    "filename": "perftest/nginx.conf",
    "status": "removed",
    "additions": 0,
    "deletions": 41,
    "changes": 41,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ce9198f0a00abb40fa67c887d16f9555cf5cfe93/perftest/nginx.conf",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ce9198f0a00abb40fa67c887d16f9555cf5cfe93/perftest/nginx.conf",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/nginx.conf?ref=ce9198f0a00abb40fa67c887d16f9555cf5cfe93",
    "patch": "@@ -1,41 +0,0 @@\n-#\n-# Copyright (C) 2020 Dremio\n-#\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-# http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-#\n-\n-user  nginx;\n-\n-events {\n-  worker_connections   1000;\n-}\n-http {\n-  upstream perftest_nessie {\n-    server perftest_nessie_1:19120;\n-    server perftest_nessie_2:19120;\n-    server perftest_nessie_3:19120;\n-    server perftest_nessie_4:19120;\n-    server perftest_nessie_5:19120;\n-  }\n-  server {\n-    listen 19131;\n-    location / {\n-      proxy_pass http://perftest_nessie;\n-      proxy_redirect     off;\n-      proxy_set_header   Host $host;\n-      proxy_set_header   X-Real-IP $remote_addr;\n-      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n-      proxy_set_header   X-Forwarded-Host $server_name;\n-    }\n-  }\n-}"
  },
  {
    "sha": "a00cb07824704cd0ed25586ce67cf28abddf5c29",
    "filename": "perftest/perftest-key.txt",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ce9198f0a00abb40fa67c887d16f9555cf5cfe93/perftest/perftest-key.txt",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ce9198f0a00abb40fa67c887d16f9555cf5cfe93/perftest/perftest-key.txt",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/perftest-key.txt?ref=ce9198f0a00abb40fa67c887d16f9555cf5cfe93",
    "patch": "@@ -1 +0,0 @@\n-Dcq3rpEUlJiTQUs1SmvprmmWE5NAmJ3A/RhYvSbvY/1kuqmMjj2nPedE/FWyssyh17eQl95nV8KwZeZGWJ62Rg=="
  },
  {
    "sha": "4437e371ab6a09920aed52e6c7a9881c4c836179",
    "filename": "perftest/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 152,
    "changes": 158,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/pom.xml",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ca057fc24c2611f16fc26b4051676f18b5313576/perftest/pom.xml",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/pom.xml?ref=ca057fc24c2611f16fc26b4051676f18b5313576",
    "patch": "@@ -25,158 +25,12 @@\n     <version>0.4.1-SNAPSHOT</version>\n   </parent>\n \n-  <artifactId>nessie-perf-test</artifactId>\n+  <artifactId>nessie-perftest</artifactId>\n+  <packaging>pom</packaging>\n \n-  <name>Nessie - Perf Test</name>\n+  <name>Nessie - Perf Test - Parent</name>\n \n-  <properties>\n-\n-    <nessie.jmeter.users>10</nessie.jmeter.users>\n-    <nessie.jmeter.queries>100</nessie.jmeter.queries>\n-    <nessie.jmeter.path>http://localhost:19131/api/v1</nessie.jmeter.path>\n-    <nessie.jmeter.dbsize>10000</nessie.jmeter.dbsize>\n-    <nessie.dynamo.region>us-west-2</nessie.dynamo.region>\n-    <nessie.dynamo.endpoint>http://localhost:4569</nessie.dynamo.endpoint>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.projectnessie</groupId>\n-      <artifactId>nessie-client</artifactId>\n-      <version>${project.version}</version>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>software.amazon.awssdk</groupId>\n-          <artifactId>apache-client</artifactId>\n-        </exclusion>\n-      </exclusions>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.google.guava</groupId>\n-      <artifactId>guava</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.jmeter</groupId>\n-      <artifactId>ApacheJMeter_core</artifactId>\n-      <scope>provided</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.jmeter</groupId>\n-      <artifactId>ApacheJMeter_java</artifactId>\n-      <scope>provided</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>software.amazon.awssdk</groupId>\n-      <artifactId>url-connection-client</artifactId>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <configuration>\n-          <createDependencyReducedPom>false</createDependencyReducedPom>\n-          <filters>\n-            <!-- filter to address \"Invalid signature file\" issue - see https://stackoverflow.com/a/6743609/589215 -->\n-            <filter>\n-              <artifact>*:*</artifact>\n-              <excludes>\n-                <exclude>META-INF/*.SF</exclude>\n-                <exclude>META-INF/*.DSA</exclude>\n-                <exclude>META-INF/*.RSA</exclude>\n-                <exclude>META-INF/LICENSE</exclude>\n-                <exclude>META-INF/LICENSE.md</exclude>\n-                <exclude>META-INF/LICENSE.txt</exclude>\n-                <exclude>META-INF/NOTIC*</exclude>\n-                <exclude>META-INF/DEPENDENCIES</exclude>\n-              </excludes>\n-            </filter>\n-          </filters>\n-          <transformers>\n-            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />\n-          </transformers>\n-          <artifactSet>\n-            <excludes>\n-              <exclude>org.apache.iceberg:iceberg-api</exclude>\n-              <exclude>org.apache.iceberg:iceberg-common</exclude>\n-              <exclude>org.apache.iceberg:iceberg-core</exclude>\n-              <exclude>com.google.guava:failureaccess</exclude>\n-              <exclude>com.google.guava:listenablefuture</exclude>\n-              <exclude>com.google.errorprone:error_prone_annotations</exclude>\n-              <exclude>com.google.j2objc:j2objc-annotations</exclude>\n-              <exclude>org.codehaus.mojo:animal-sniffer-annotations</exclude>\n-              <exclude>com.github.stephenc.findbugs:findbugs-annotations</exclude>\n-              <exclude>org.apache.jmeter:ApacheJMeter_java</exclude>\n-              <exclude>org.apache.jmeter:ApacheJMeter_core</exclude>\n-            </excludes>\n-          </artifactSet>\n-          <relocations>\n-            <!-- Entries to relocate netty native libraries  -->\n-            <relocation>\n-              <pattern>META-INF.native.libnetty_</pattern>\n-              <shadedPattern>META-INF.native.libnessie_netty_</shadedPattern>\n-            </relocation>\n-            <relocation>\n-              <pattern>META-INF.native.netty_</pattern>\n-              <shadedPattern>META-INF.native.nessie_netty_</shadedPattern>\n-            </relocation>\n-          </relocations>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>com.lazerycode.jmeter</groupId>\n-        <artifactId>jmeter-maven-plugin</artifactId>\n-        <version>3.3.0</version>\n-        <executions>\n-          <execution>\n-            <id>configuration</id>\n-            <goals>\n-              <goal>configure</goal>\n-            </goals>\n-            <phase>\n-              post-integration-test\n-            </phase>\n-          </execution>\n-          <execution>\n-            <id>jmeter-tests</id>\n-            <phase>none</phase>\n-            <goals>\n-              <goal>jmeter</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-        <configuration>\n-          <propertiesUser>\n-            <jmeter.reportgenerator.apdex_satisfied_threshold>500</jmeter.reportgenerator.apdex_satisfied_threshold>\n-            <jmeter.reportgenerator.apdex_tolerated_threshold>1500</jmeter.reportgenerator.apdex_tolerated_threshold>\n-            <nessie.jmeter.users>${nessie.jmeter.users}</nessie.jmeter.users>\n-            <nessie.jmeter.queries>${nessie.jmeter.queries}</nessie.jmeter.queries>\n-            <nessie.jmeter.path>${nessie.jmeter.path}</nessie.jmeter.path>\n-            <nessie.jmeter.dbsize>${nessie.jmeter.dbsize}</nessie.jmeter.dbsize>\n-          </propertiesUser>\n-          <generateReports>true</generateReports>\n-          <jmeterExtensions>\n-            <artifact>org.projectnessie:nessie-perf-test:${project.version}</artifact>\n-          </jmeterExtensions>\n-          <testPlanLibraries>\n-            <artifact>org.projectnessie:nessie-perf-test:${project.version}</artifact>\n-          </testPlanLibraries>\n-          <!-- The plugin uses some broken dependencies\n-               An alternative is to set this to true and use excludedArtifacts, see below\n-          -->\n-          <downloadExtensionDependencies>true</downloadExtensionDependencies>\n-        </configuration>\n-      </plugin>\n-    </plugins>\n-  </build>\n+  <modules>\n+    <module>gatling</module>\n+  </modules>\n </project>"
  },
  {
    "sha": "399e7102e731dfe57cb910efcb8dd11c2b49ca18",
    "filename": "perftest/src/main/java/org/projectnessie/perftest/NessieSampler.java",
    "status": "removed",
    "additions": 0,
    "deletions": 204,
    "changes": 204,
    "blob_url": "https://github.com/projectnessie/nessie/blob/ce9198f0a00abb40fa67c887d16f9555cf5cfe93/perftest/src/main/java/org/projectnessie/perftest/NessieSampler.java",
    "raw_url": "https://github.com/projectnessie/nessie/raw/ce9198f0a00abb40fa67c887d16f9555cf5cfe93/perftest/src/main/java/org/projectnessie/perftest/NessieSampler.java",
    "contents_url": "https://api.github.com/repos/projectnessie/nessie/contents/perftest/src/main/java/org/projectnessie/perftest/NessieSampler.java?ref=ce9198f0a00abb40fa67c887d16f9555cf5cfe93",
    "patch": "@@ -1,204 +0,0 @@\n-/*\n- * Copyright (C) 2020 Dremio\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.projectnessie.perftest;\n-\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URI;\n-import java.net.URL;\n-\n-import org.apache.jmeter.config.Arguments;\n-import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n-import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n-import org.apache.jmeter.samplers.SampleResult;\n-import org.projectnessie.client.NessieClient;\n-import org.projectnessie.client.rest.NessieServiceException;\n-import org.projectnessie.model.Branch;\n-import org.projectnessie.model.ContentsKey;\n-import org.projectnessie.model.IcebergTable;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.google.common.base.Joiner;\n-\n-/**\n- * NessieSampler creates REST calls to the Nessie service.\n- *\n- * <p>\n- * This implements the interface required to create custom JMeter plugins in Java. It defines the arguments required to create a REST call\n- * to Nessie via the Nessie client. Result objects are populated based on the return value of the Nessie REST call.\n- * </p>\n- */\n-public class NessieSampler extends AbstractJavaSamplerClient {\n-  private static final Logger logger = LoggerFactory.getLogger(NessieSampler.class);\n-  private static final Joiner SLASH = Joiner.on(\"/\");\n-  private static final String METHOD_TAG = \"method\";\n-  private static final String URI_TAG = \"uri\";\n-  private static final String BRANCH_TAG = \"branch\";\n-  private static final String BASE_BRANCH_TAG = \"base_branch\";\n-  private static final String TABLE_TAG = \"table\";\n-\n-  enum Method {\n-    CREATE_BRANCH,\n-    DELETE_BRANCH,\n-    COMMIT,\n-    MERGE\n-  }\n-\n-  private NessieClient client;\n-  private String uri;\n-  private String branch;\n-  private String baseBranch;\n-  private ThreadLocal<Branch> commitId = new ThreadLocal<>();\n-\n-  /**\n-   * Create a threadlocal nessie client. Multiple threads are run in the same JVM and they each get a client.\n-   */\n-  private synchronized NessieClient nessieClient() {\n-    if (client == null) {\n-      client = NessieClient.builder().withUri(URI.create(uri)).withUsername(\"admin_user\").withPassword(\"test123\").build();\n-      try {\n-        client.getTreeApi().createReference(Branch.of(\"main\", null));\n-      } catch (Exception t) {\n-        //pass - likely already created main\n-      }\n-    }\n-    return client;\n-  }\n-\n-  /**\n-   * arguments and default values that JMeter test should set per sample.\n-   */\n-  @Override\n-  public Arguments getDefaultParameters() {\n-    Arguments defaultParameters = new Arguments();\n-    defaultParameters.addArgument(METHOD_TAG, \"test\");\n-    defaultParameters.addArgument(URI_TAG, \"testurl\");\n-    defaultParameters.addArgument(BRANCH_TAG, \"main\");\n-    defaultParameters.addArgument(BASE_BRANCH_TAG, \"main\");\n-    defaultParameters.addArgument(TABLE_TAG, \"table\");\n-    return defaultParameters;\n-  }\n-\n-  /**\n-   * construct a sample from the result of a call to Nessie API.\n-   */\n-  private void fillSampler(SampleResult sampleResult,\n-                           String commitId,\n-                           int retries,\n-                           boolean ok,\n-                           String message,\n-                           int retCode,\n-                           Method method) {\n-    sampleResult.sampleEnd();\n-    sampleResult.setSuccessful(ok);\n-    sampleResult.setResponseMessage(message);\n-    sampleResult.setBytes(message.getBytes().length);\n-    sampleResult.setResponseCode(Integer.toString(retCode));\n-    try {\n-      sampleResult.setURL(new URL(SLASH.join(uri, method.name())));\n-    } catch (MalformedURLException e) {\n-      //pass\n-    }\n-    sampleResult.setSampleLabel(SLASH.join(branch, baseBranch, retries, commitId));\n-  }\n-\n-  /**\n-   * delegate method which captures the result of a Nessie client call and returns a sample object.\n-   */\n-  private SampleResult handle(SupplierIO<Branch> supplier, Method method) {\n-    SampleResult sampleResult = new SampleResult();\n-    sampleResult.sampleStart();\n-    int retries = 0;\n-    try {\n-      Branch branch = null;\n-      while (retries < 10) {\n-        try {\n-          branch = supplier.get();\n-          break;\n-        } catch (IOException e) {\n-          commitId.remove();\n-        }\n-        retries++;\n-      }\n-      if (branch != null) {\n-        String branchStr = \"ok\";\n-        fillSampler(sampleResult, branch.getHash(), retries, true, branchStr, 200, method);\n-        commitId.set(branch);\n-      } else {\n-        throw new UnsupportedOperationException(\"failed with too many retries\");\n-      }\n-    } catch (NessieServiceException e) {\n-      logger.warn(\"Request was not successfully processed\", e);\n-      String errStr = e.getMessage();\n-      fillSampler(sampleResult, \"\", retries, false, errStr, e.getError().getStatus(), method);\n-    } catch (Throwable t) {\n-      logger.warn(\"Request was not successfully processed\", t);\n-      String msg = t.getMessage() == null ? \"\" : t.getMessage();\n-      fillSampler(sampleResult, \"\", retries, false, msg, 500, method);\n-    }\n-    return sampleResult;\n-  }\n-\n-\n-  /**\n-   * generate a rest call based on input parameters for a single Nessie perf test sample, then execute and generate a sample result.\n-   */\n-  @Override\n-  public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n-    Method method = Method.values()[javaSamplerContext.getIntParameter(METHOD_TAG)];\n-    String table = javaSamplerContext.getParameter(TABLE_TAG, \"y\");\n-    switch (method) {\n-      case CREATE_BRANCH: {\n-        return handle(() -> {\n-          nessieClient().getTreeApi().createReference(Branch.of(branch, baseBranch));\n-          return (Branch) nessieClient().getTreeApi().getReferenceByName(branch);\n-        }, method);\n-      }\n-      case DELETE_BRANCH:\n-        break;\n-      case COMMIT: {\n-        return handle(() -> {\n-          if (commitId.get() == null) {\n-            Branch branch = (Branch) nessieClient().getTreeApi().getReferenceByName(this.branch);\n-            commitId.set(branch);\n-          }\n-          nessieClient().getContentsApi().setContents(ContentsKey.of(\"name\", \"space\", table),\n-              commitId.get().getName(), commitId.get().getHash(),\n-              \"test\", IcebergTable.of(\"path_on_disk_\" + table));\n-          //TODO: this test shouldn't be doing a get branch operation since that isn't required to complete a commit.\n-          return (Branch) nessieClient().getTreeApi().getReferenceByName(branch);\n-        }, method);\n-      }\n-      case MERGE:\n-        break;\n-      default:\n-        throw new UnsupportedOperationException(\"Not a valid enum \" + method);\n-    }\n-    return null;\n-  }\n-\n-  public interface SupplierIO<T> {\n-    T get() throws IOException;\n-  }\n-\n-  @Override\n-  public void setupTest(JavaSamplerContext context) {\n-    uri = context.getParameter(URI_TAG);\n-    branch = context.getParameter(BRANCH_TAG, \"x\");\n-    baseBranch = context.getParameter(BASE_BRANCH_TAG, \"main\");\n-  }\n-}"
  }
]
