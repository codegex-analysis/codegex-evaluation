[
  {
    "sha": "bfb07a3d57efcc0f512795d629d81f9068ea4a3a",
    "filename": "create_location.http",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/create_location.http",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/create_location.http",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/create_location.http?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,4 @@\n+POST http://localhost:8080/location\n+Content-Type: application/json\n+\n+{\"city\": \"Kartuzy\", \"region\": \"pomorskie\", \"country\": \"Polska\", \"longitude\": 18, \"latitude\": 54}"
  },
  {
    "sha": "8cfe2c46ac44ae7ed31a7d7ea02c14d055fe092d",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/pom.xml",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/pom.xml",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/pom.xml?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -55,6 +55,11 @@\n             <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.11</version>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "533909b0413c2bb0d963d7aa462efd78c102aa6b",
    "filename": "src/main/java/pl/kl/weatherservice/exceptions/EmptyInputException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/exceptions/EmptyInputException.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/exceptions/EmptyInputException.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/exceptions/EmptyInputException.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,7 @@\n+package pl.kl.weatherservice.exceptions;\n+\n+public class EmptyInputException extends RuntimeException {\n+    public EmptyInputException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "87834a06084abefe260aa2e2b76e370a88744c11",
    "filename": "src/main/java/pl/kl/weatherservice/exceptions/ExceptionHandlerController.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/exceptions/ExceptionHandlerController.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/exceptions/ExceptionHandlerController.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/exceptions/ExceptionHandlerController.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,24 @@\n+package pl.kl.weatherservice.exceptions;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ControllerAdvice\n+@Slf4j\n+public class ExceptionHandlerController {\n+\n+    @ExceptionHandler(EmptyInputException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public void handleEmptyInputException(EmptyInputException e) {\n+        log.warn(e.getMessage());\n+    }\n+\n+    @ExceptionHandler(InputOutOfRangeException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public void handleInputOutOfRangeException(InputOutOfRangeException e) {\n+        log.warn(e.getMessage());\n+    }\n+}"
  },
  {
    "sha": "ec24064684b9a5bf73c1eee0b7aba2d3bda7e7f0",
    "filename": "src/main/java/pl/kl/weatherservice/exceptions/InputOutOfRangeException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/exceptions/InputOutOfRangeException.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/exceptions/InputOutOfRangeException.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/exceptions/InputOutOfRangeException.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,7 @@\n+package pl.kl.weatherservice.exceptions;\n+\n+public class InputOutOfRangeException extends RuntimeException {\n+    public InputOutOfRangeException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "1b476e4638d0965a60049052ce650710b2d815e4",
    "filename": "src/main/java/pl/kl/weatherservice/location/CreateLocationRequest.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/CreateLocationRequest.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/CreateLocationRequest.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/CreateLocationRequest.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,14 @@\n+package pl.kl.weatherservice.location;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+@Getter\n+@Builder\n+class CreateLocationRequest {\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "9da075aafaa8abf5e974fe73dc8713da92b4abfa",
    "filename": "src/main/java/pl/kl/weatherservice/location/Location.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/Location.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/Location.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/Location.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,29 @@\n+package pl.kl.weatherservice.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Builder\n+class Location {\n+\n+    @Id\n+    @GeneratedValue(generator = \"uuid2\")\n+    @GenericGenerator(name = \"uuid2\", strategy = \"uuid2\")\n+    private String id;\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "933affbe1d11e36c6ea5f2ba41369150abaf2fb3",
    "filename": "src/main/java/pl/kl/weatherservice/location/LocationMapper.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationMapper.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationMapper.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/LocationMapper.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,18 @@\n+package pl.kl.weatherservice.location;\n+\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class LocationMapper {\n+\n+    NewLocationResponse mapLocationToNewLocationResponse(Location location) {\n+        return NewLocationResponse.builder()\n+                .id(location.getId())\n+                .city(location.getCity())\n+                .region(location.getRegion())\n+                .country(location.getCountry())\n+                .latitude(location.getLatitude())\n+                .longitude(location.getLongitude())\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "7cc46064ddea1e4911ba16a168f56f3f358953f9",
    "filename": "src/main/java/pl/kl/weatherservice/location/LocationsController.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationsController.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationsController.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/LocationsController.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,33 @@\n+package pl.kl.weatherservice.location;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequiredArgsConstructor\n+@RequestMapping(path = \"/location\")\n+class LocationsController {\n+\n+    private final LocationMapper locationMapper;\n+    private final LocationsService locationsService;\n+\n+    @PostMapping()\n+    ResponseEntity<NewLocationResponse> postLocation(@RequestBody CreateLocationRequest request) {\n+        Location location = locationsService.createLocation(\n+                request.getCity(),\n+                request.getRegion(),\n+                request.getCountry(),\n+                request.getLatitude(),\n+                request.getLongitude()\n+        );\n+\n+        return ResponseEntity\n+                .status(HttpStatus.CREATED)\n+                .body(locationMapper.mapLocationToNewLocationResponse(location));\n+    }\n+}"
  },
  {
    "sha": "3efb876ba8fa9b8d77b734d7f4a7fe6fbabb4728",
    "filename": "src/main/java/pl/kl/weatherservice/location/LocationsRepository.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationsRepository.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationsRepository.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/LocationsRepository.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,6 @@\n+package pl.kl.weatherservice.location;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+interface LocationsRepository extends JpaRepository<Location, Long> {\n+}"
  },
  {
    "sha": "2af44d2993f10267943f413de0189d91afebf296",
    "filename": "src/main/java/pl/kl/weatherservice/location/LocationsService.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationsService.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/LocationsService.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/LocationsService.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,62 @@\n+package pl.kl.weatherservice.location;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+import pl.kl.weatherservice.exceptions.EmptyInputException;\n+import pl.kl.weatherservice.exceptions.InputOutOfRangeException;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+@Component\n+@RequiredArgsConstructor\n+class LocationsService {\n+\n+    private final Double NORTH_LIMIT = 90.0;\n+    private final Double SOUTH_LIMIT = -90.0;\n+    private final Double EAST_LIMIT = 180.0;\n+    private final Double WEST_LIMIT = -180.0;\n+\n+    private final LocationsRepository locationsRepository;\n+\n+    Location createLocation(String city, String region, String country, Double latitude, Double longitude) {\n+        validateCity(city);\n+        validateCountry(country);\n+        validateLatitude(latitude);\n+        validateLongitude(longitude);\n+\n+        Location location = new Location();\n+        location.setCity(city);\n+        Optional.ofNullable(region).filter(Predicate.not(String::isBlank)).ifPresent(location::setRegion);\n+        location.setCountry(country);\n+        location.setLatitude(latitude);\n+        location.setLongitude(longitude);\n+\n+        return locationsRepository.save(location);\n+    }\n+\n+    private void validateCity(String city) {\n+        if (StringUtils.isBlank(city)) {\n+            throw new EmptyInputException(\"City cannot be empty or null!\");\n+        }\n+    }\n+\n+    private void validateCountry(String country) {\n+        if (StringUtils.isBlank(country)) {\n+            throw new EmptyInputException(\"Country cannot be empty or null!\");\n+        }\n+    }\n+\n+    private void validateLatitude(Double latitude) {\n+        if (latitude < SOUTH_LIMIT || latitude > NORTH_LIMIT) {\n+            throw new InputOutOfRangeException(\"Latitude is out of range! The correct latitude range is from -90 to 90.\");\n+        }\n+    }\n+\n+    private void validateLongitude(Double longitude) {\n+        if (longitude < WEST_LIMIT || longitude > EAST_LIMIT) {\n+            throw new InputOutOfRangeException(\"Longitude is out of range! The correct longitude range is from -180 to 180.\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "bf12e65d31b784ac4f2ae0d4581b9f2c6b78d98e",
    "filename": "src/main/java/pl/kl/weatherservice/location/NewLocationResponse.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/NewLocationResponse.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/java/pl/kl/weatherservice/location/NewLocationResponse.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/java/pl/kl/weatherservice/location/NewLocationResponse.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,15 @@\n+package pl.kl.weatherservice.location;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+@Getter\n+@Builder\n+class NewLocationResponse {\n+    private String id;\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "ab26342574edadd85488455ec459d73606cd2c29",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/resources/application.properties",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/main/resources/application.properties?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -1 +1,4 @@\n-\n+spring.datasource.url=jdbc:mysql://localhost:3306/weather_service?serverTimezone=Europe/Warsaw\n+spring.datasource.username=root\n+spring.datasource.password=root\n+spring.jpa.hibernate.ddl-auto=update"
  },
  {
    "sha": "e45bd2e1fe9883ee1c6f5833436ed3fbf90c531d",
    "filename": "src/test/java/pl/kl/weatherservice/location/LocationTestHelper.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/java/pl/kl/weatherservice/location/LocationTestHelper.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/java/pl/kl/weatherservice/location/LocationTestHelper.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/test/java/pl/kl/weatherservice/location/LocationTestHelper.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,34 @@\n+package pl.kl.weatherservice.location;\n+\n+final class LocationTestHelper {\n+\n+    static Location provideLocationGdansk() {\n+        return Location.builder()\n+                .city(\"Gdansk\")\n+                .region(\"Pomeranian\")\n+                .country(\"Poland\")\n+                .latitude(54.3)\n+                .longitude(18.6)\n+                .build();\n+    }\n+\n+    static Location provideLocationCochabamba() {\n+        return Location.builder()\n+                .city(\"Cochabamba\")\n+                .region(null)\n+                .country(\"Bolivia\")\n+                .latitude(-17.4)\n+                .longitude(-66.1)\n+                .build();\n+    }\n+\n+    static CreateLocationRequest provideLocationRequestGdansk() {\n+        return CreateLocationRequest.builder()\n+                .city(\"Gdansk\")\n+                .region(\"Pomeranian\")\n+                .country(\"Poland\")\n+                .latitude(54.3)\n+                .longitude(18.6)\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "f840955f6c804087ccc9a392bdcbd2ac8d3a093a",
    "filename": "src/test/java/pl/kl/weatherservice/location/LocationsControllerIntegrationTest.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/java/pl/kl/weatherservice/location/LocationsControllerIntegrationTest.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/java/pl/kl/weatherservice/location/LocationsControllerIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/test/java/pl/kl/weatherservice/location/LocationsControllerIntegrationTest.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,55 @@\n+package pl.kl.weatherservice.location;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class LocationsControllerIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+    @Autowired\n+    LocationsService locationsService;\n+    @Autowired\n+    LocationsRepository locationsRepository;\n+    @Autowired\n+    ObjectMapper objectMapper;\n+\n+    @BeforeEach\n+    void setUp() {\n+        locationsRepository.deleteAll();\n+    }\n+\n+    @Test\n+    void postLocation_createsNewLocation() throws Exception {\n+        // given\n+        CreateLocationRequest requestBody = LocationTestHelper.provideLocationRequestGdansk();\n+        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.post(\"/location\")\n+                .contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(requestBody));\n+        // when\n+        MockHttpServletResponse response = mockMvc.perform(request).andReturn().getResponse();\n+        // then\n+        assertThat(response.getStatus()).isEqualTo(HttpStatus.CREATED.value());\n+        assertThat(locationsRepository.findAll()).singleElement().satisfies(location -> {\n+            assertThat(location.getId()).isInstanceOf(String.class);\n+            assertThat(location.getCity()).isEqualTo(\"Gdansk\");\n+            assertThat(location.getRegion()).isEqualTo(\"Pomeranian\");\n+            assertThat(location.getCountry()).isEqualTo(\"Poland\");\n+            assertThat(location.getLatitude()).isEqualTo(54.3);\n+            assertThat(location.getLongitude()).isEqualTo(18.6);\n+        });\n+    }\n+}"
  },
  {
    "sha": "ddd267bda203147fe70762737b9864417a6c06c8",
    "filename": "src/test/java/pl/kl/weatherservice/location/LocationsServiceTest.java",
    "status": "added",
    "additions": 125,
    "deletions": 0,
    "changes": 125,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/java/pl/kl/weatherservice/location/LocationsServiceTest.java",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/java/pl/kl/weatherservice/location/LocationsServiceTest.java",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/test/java/pl/kl/weatherservice/location/LocationsServiceTest.java?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,125 @@\n+package pl.kl.weatherservice.location;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import pl.kl.weatherservice.exceptions.EmptyInputException;\n+import pl.kl.weatherservice.exceptions.InputOutOfRangeException;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class LocationsServiceTest {\n+\n+    @Mock\n+    LocationsRepository locationsRepository;\n+    @InjectMocks\n+    LocationsService locationsService;\n+\n+    @Test\n+    void createLocation_createsNewLocation() {\n+        // given\n+        when(locationsRepository.save(any())).thenReturn(LocationTestHelper.provideLocationGdansk());\n+        // when\n+        Location location = locationsService.createLocation(\"Gdansk\", \"Pomeranian\", \"Poland\", 54.3, 18.6);\n+        //then\n+        assertThat(location.getCity()).isEqualTo(\"Gdansk\");\n+        assertThat(location.getRegion()).isEqualTo(\"Pomeranian\");\n+        assertThat(location.getCountry()).isEqualTo(\"Poland\");\n+        assertThat(location.getLatitude()).isEqualTo(54.3);\n+        assertThat(location.getLongitude()).isEqualTo(18.6);\n+        verify(locationsRepository).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsEmpty_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"\", \"Pomeranian\", \"Poland\", 54.3, 18.6));\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsNull_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(null, \"Pomeranian\", \"Poland\", 54.3, 18.6));\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCountryIsEmpty_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"Gdansk\", \"Pomeranian\", \"\", 54.3, 18.6));\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCountryIsNull_throwsEmptyInputException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"Gdansk\", \"Pomeranian\", null, 54.3, 18.6));\n+        // then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLatitudeIsMoreThanLimit_throwsInputOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"Gdansk\", \"Pomeranian\", \"Poland\", 150.0, 18.6));\n+        // then\n+        assertThat(exception).isInstanceOf(InputOutOfRangeException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLatitudeIsLessThanLimit_createsNewLocation() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"Gdansk\", \"Pomeranian\", \"Poland\", -150.0, 18.6));\n+        // then\n+        assertThat(exception).isInstanceOf(InputOutOfRangeException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLongitudeIsMoreThanLimit_throwsInputOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"Gdansk\", \"Pomeranian\", \"Poland\", 54.3, 200.0));\n+        // then\n+        assertThat(exception).isInstanceOf(InputOutOfRangeException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLongitudeIsLessThanLimit_throwsInputOutOfRangeException() {\n+        // when\n+        Throwable exception = catchThrowable(() -> locationsService.createLocation(\"Gdansk\", \"Pomeranian\", \"Poland\", 54.3, -200.0));\n+        // then\n+        assertThat(exception).isInstanceOf(InputOutOfRangeException.class);\n+        verify(locationsRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenRegionIsEmpty_createsNewLocation() {\n+        // given\n+        when(locationsRepository.save(any())).thenReturn(LocationTestHelper.provideLocationCochabamba());\n+        // when\n+        Location location = locationsService.createLocation(\"Cochabamba\", \" \", \"Bolivia\", -17.4, -66.1);\n+        //then\n+        assertThat(location.getCity()).isEqualTo(\"Cochabamba\");\n+        assertThat(location.getRegion()).isEqualTo(null);\n+        assertThat(location.getCountry()).isEqualTo(\"Bolivia\");\n+        assertThat(location.getLatitude()).isEqualTo(-17.4);\n+        assertThat(location.getLongitude()).isEqualTo(-66.1);\n+        verify(locationsRepository).save(any());\n+    }\n+}"
  },
  {
    "sha": "02744d1edd142df057718f6cceffec156f062126",
    "filename": "src/test/resources/application.properties",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/klezner/weather-service-spring-app/blob/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/resources/application.properties",
    "raw_url": "https://github.com/klezner/weather-service-spring-app/raw/f745c57938218c1a6d35cf6d316d5056d5608cfc/src/test/resources/application.properties",
    "contents_url": "https://api.github.com/repos/klezner/weather-service-spring-app/contents/src/test/resources/application.properties?ref=f745c57938218c1a6d35cf6d316d5056d5608cfc",
    "patch": "@@ -0,0 +1,4 @@\n+spring.datasource.url=jdbc:mysql://localhost:3306/weather_service_test?serverTimezone=Europe/Warsaw\n+spring.datasource.username=root\n+spring.datasource.password=root\n+spring.jpa.hibernate.ddl-auto=update"
  }
]
