[
  {
    "sha": "f07c45a56026d8dc18090e8bbcc574a8676d6a00",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/ghbutton/react-native-simple-crypto/blob/45ee069bcdf9f2e912332e95e019bfcb535c10e1/README.md",
    "raw_url": "https://github.com/ghbutton/react-native-simple-crypto/raw/45ee069bcdf9f2e912332e95e019bfcb535c10e1/README.md",
    "contents_url": "https://api.github.com/repos/ghbutton/react-native-simple-crypto/contents/README.md?ref=45ee069bcdf9f2e912332e95e019bfcb535c10e1",
    "patch": "@@ -94,9 +94,12 @@ All methods are asynchronous and return promises (except for convert utils)\n   - hash(password: string, salt: ArrayBuffer, iterations: number, keyLength: number, hash: string)\n - RSA\n   - generateKeys(keySize: number)\n-  - encrypt(data: string, key: string)\n   - sign(data: string, key: string, hash: string)\n   - verify(data: string, secretToVerify: string, hash: string)\n+  - encrypt(data: string, key: string) (Expects UTF8 string data inputs)\n+  - decrypt(data: string, key: string) (Returns UTF8 string)\n+  - encrypt64(data: string, key: string) (Expects Base64 string data inputs)\n+  - decrypt64(data: string, key: string) (Returns Base64 string)\n - utils\n   - randomBytes(bytes: number)\n   - convertArrayBufferToUtf8(input: ArrayBuffer)"
  },
  {
    "sha": "c92883a17e9d5a06329729c98acdbe5a371a42c1",
    "filename": "android/src/main/java/com/pedrouid/crypto/RNSCAes.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ghbutton/react-native-simple-crypto/blob/45ee069bcdf9f2e912332e95e019bfcb535c10e1/android/src/main/java/com/pedrouid/crypto/RNSCAes.java",
    "raw_url": "https://github.com/ghbutton/react-native-simple-crypto/raw/45ee069bcdf9f2e912332e95e019bfcb535c10e1/android/src/main/java/com/pedrouid/crypto/RNSCAes.java",
    "contents_url": "https://api.github.com/repos/ghbutton/react-native-simple-crypto/contents/android/src/main/java/com/pedrouid/crypto/RNSCAes.java?ref=45ee069bcdf9f2e912332e95e019bfcb535c10e1",
    "patch": "@@ -115,7 +115,7 @@ private static String encrypt(String textBase64, String hexKey, String hexIv) th\n \n         Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\n         cipher.init(Cipher.ENCRYPT_MODE, secretKey, hexIv == null ? emptyIvSpec : new IvParameterSpec(Hex.decode(hexIv)));\n-        byte[] encrypted = cipher.doFinal(Base64.decode(textBase64, Base64.DEFAULT));\n+        byte[] encrypted = cipher.doFinal(Base64.decode(textBase64, Base64.NO_WRAP));\n         return Base64.encodeToString(encrypted, Base64.NO_WRAP);\n     }\n \n@@ -129,7 +129,7 @@ private static String decrypt(String ciphertext, String hexKey, String hexIv) th\n \n         Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\n         cipher.init(Cipher.DECRYPT_MODE, secretKey, hexIv == null ? emptyIvSpec : new IvParameterSpec(Hex.decode(hexIv)));\n-        byte[] decrypted = cipher.doFinal(Base64.decode(ciphertext, Base64.DEFAULT));\n+        byte[] decrypted = cipher.doFinal(Base64.decode(ciphertext, Base64.NO_WRAP));\n         return Base64.encodeToString(decrypted, Base64.NO_WRAP);\n     }\n "
  },
  {
    "sha": "d2b26871b7f01d91bcf17a633a32a6a13e0263e4",
    "filename": "android/src/main/java/com/pedrouid/crypto/RNSCPbkdf2.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ghbutton/react-native-simple-crypto/blob/45ee069bcdf9f2e912332e95e019bfcb535c10e1/android/src/main/java/com/pedrouid/crypto/RNSCPbkdf2.java",
    "raw_url": "https://github.com/ghbutton/react-native-simple-crypto/raw/45ee069bcdf9f2e912332e95e019bfcb535c10e1/android/src/main/java/com/pedrouid/crypto/RNSCPbkdf2.java",
    "contents_url": "https://api.github.com/repos/ghbutton/react-native-simple-crypto/contents/android/src/main/java/com/pedrouid/crypto/RNSCPbkdf2.java?ref=45ee069bcdf9f2e912332e95e019bfcb535c10e1",
    "patch": "@@ -35,8 +35,8 @@ public String getName() {\n     @ReactMethod\n     public void hash(String pwdBase64, String saltBase64, Integer iterations, Integer keyLen, String hash, Promise promise) {\n         try {\n-            byte[] pwdBytes = Base64.decode(pwdBase64, Base64.DEFAULT);\n-            byte[] saltBytes = Base64.decode(saltBase64, Base64.DEFAULT);\n+            byte[] pwdBytes = Base64.decode(pwdBase64, Base64.NO_WRAP);\n+            byte[] saltBytes = Base64.decode(saltBase64, Base64.NO_WRAP);\n             byte[] digest = pbkdf2(pwdBytes, saltBytes, iterations, keyLen, hash);\n             promise.resolve(Base64.encodeToString(digest, Base64.NO_WRAP));\n         } catch (Exception e) {"
  },
  {
    "sha": "058b15f57318277a860192d3ab54001d48ef236c",
    "filename": "android/src/main/java/com/pedrouid/crypto/RSA.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/ghbutton/react-native-simple-crypto/blob/45ee069bcdf9f2e912332e95e019bfcb535c10e1/android/src/main/java/com/pedrouid/crypto/RSA.java",
    "raw_url": "https://github.com/ghbutton/react-native-simple-crypto/raw/45ee069bcdf9f2e912332e95e019bfcb535c10e1/android/src/main/java/com/pedrouid/crypto/RSA.java",
    "contents_url": "https://api.github.com/repos/ghbutton/react-native-simple-crypto/contents/android/src/main/java/com/pedrouid/crypto/RSA.java?ref=45ee069bcdf9f2e912332e95e019bfcb535c10e1",
    "patch": "@@ -130,16 +130,16 @@ public void setPrivateKey(String privateKey) throws IOException, NoSuchAlgorithm\n \n     // Base64 input\n     public String encrypt64(String b64Message) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException {\n-        byte[] data = Base64.decode(b64Message, Base64.DEFAULT);\n+        byte[] data = Base64.decode(b64Message, Base64.NO_WRAP);\n         byte[] cipherBytes = encrypt(data);\n-        return Base64.encodeToString(cipherBytes, Base64.DEFAULT);\n+        return Base64.encodeToString(cipherBytes, Base64.NO_WRAP);\n     }\n \n     // UTF-8 input\n     public String encrypt(String message) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException {\n         byte[] data = message.getBytes(CharsetUTF_8);\n         byte[] cipherBytes = encrypt(data);\n-        return Base64.encodeToString(cipherBytes, Base64.DEFAULT);\n+        return Base64.encodeToString(cipherBytes, Base64.NO_WRAP);\n     }\n \n     private byte[] decrypt(byte[] cipherBytes) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException {\n@@ -152,29 +152,29 @@ public String encrypt(String message) throws NoSuchAlgorithmException, InvalidKe\n \n     // UTF-8 input\n     public String decrypt(String message) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException {\n-        byte[] cipherBytes = Base64.decode(message, Base64.DEFAULT);\n+        byte[] cipherBytes = Base64.decode(message, Base64.NO_WRAP);\n         byte[] data = decrypt(cipherBytes);\n         return new String(data, CharsetUTF_8);\n     }\n \n     // Base64 input\n     public String decrypt64(String b64message) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException {\n-        byte[] cipherBytes = Base64.decode(b64message, Base64.DEFAULT);\n+        byte[] cipherBytes = Base64.decode(b64message, Base64.NO_WRAP);\n         byte[] data = decrypt(cipherBytes);\n-        return Base64.encodeToString(data, Base64.DEFAULT);\n+        return Base64.encodeToString(data, Base64.NO_WRAP);\n     }\n \n     private String sign(byte[] messageBytes, String algorithm) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException, SignatureException {\n         Signature privateSignature = Signature.getInstance(algorithm);\n         privateSignature.initSign(this.privateKey);\n         privateSignature.update(messageBytes);\n         byte[] signature = privateSignature.sign();\n-        return Base64.encodeToString(signature, Base64.DEFAULT);\n+        return Base64.encodeToString(signature, Base64.NO_WRAP);\n     }\n \n     // b64 message\n     public String sign64(String b64message, String algorithm) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException, SignatureException {\n-        byte[] messageBytes = Base64.decode(b64message, Base64.DEFAULT);\n+        byte[] messageBytes = Base64.decode(b64message, Base64.NO_WRAP);\n         return sign(messageBytes, algorithm);\n     }\n \n@@ -195,8 +195,8 @@ private boolean verify(byte[] signatureBytes, byte[] messageBytes, String algori\n     public boolean verify64(String signature, String message, String algorithm) throws NoSuchAlgorithmException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeyException, SignatureException {\n         Signature publicSignature = Signature.getInstance(algorithm);\n         publicSignature.initVerify(this.publicKey);\n-        byte[] messageBytes = Base64.decode(message, Base64.DEFAULT);\n-        byte[] signatureBytes = Base64.decode(signature, Base64.DEFAULT);\n+        byte[] messageBytes = Base64.decode(message, Base64.NO_WRAP);\n+        byte[] signatureBytes = Base64.decode(signature, Base64.NO_WRAP);\n         return verify(signatureBytes, messageBytes, algorithm);\n     }\n \n@@ -205,7 +205,7 @@ public boolean verify(String signature, String message, String algorithm) throws\n         Signature publicSignature = Signature.getInstance(algorithm);\n         publicSignature.initVerify(this.publicKey);\n         byte[] messageBytes = message.getBytes(CharsetUTF_8);\n-        byte[] signatureBytes = Base64.decode(signature, Base64.DEFAULT);\n+        byte[] signatureBytes = Base64.decode(signature, Base64.NO_WRAP);\n         return verify(signatureBytes, messageBytes, algorithm);\n     }\n \n@@ -266,7 +266,7 @@ public void loadFromKeystore() throws KeyStoreException, UnrecoverableEntryExcep\n         KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n         keyStore.load(null);\n         KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(this.keyTag, null);\n-        \n+\n         if (privateKeyEntry != null) {\n             this.privateKey = privateKeyEntry.getPrivateKey();\n             this.publicKey = privateKeyEntry.getCertificate().getPublicKey();"
  }
]
