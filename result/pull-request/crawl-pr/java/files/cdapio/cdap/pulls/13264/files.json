[
  {
    "sha": "3c2da4a1a6d39b779f42c5d255bc500980f5a45b",
    "filename": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProfileHttpHandler.java",
    "status": "modified",
    "additions": 34,
    "deletions": 19,
    "changes": 53,
    "blob_url": "https://github.com/cdapio/cdap/blob/8ab7d46c30f34a3b02bbdd337890b1524ac52319/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProfileHttpHandler.java",
    "raw_url": "https://github.com/cdapio/cdap/raw/8ab7d46c30f34a3b02bbdd337890b1524ac52319/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProfileHttpHandler.java",
    "contents_url": "https://api.github.com/repos/cdapio/cdap/contents/cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/ProfileHttpHandler.java?ref=8ab7d46c30f34a3b02bbdd337890b1524ac52319",
    "patch": "@@ -32,6 +32,10 @@\n import io.cdap.cdap.proto.profile.ProfileCreateRequest;\n import io.cdap.cdap.proto.provisioner.ProvisionerInfo;\n import io.cdap.cdap.proto.provisioner.ProvisionerPropertyValue;\n+import io.cdap.cdap.proto.security.Action;\n+import io.cdap.cdap.security.authorization.AuthorizationUtil;\n+import io.cdap.cdap.security.spi.authentication.AuthenticationContext;\n+import io.cdap.cdap.security.spi.authorization.AuthorizationEnforcer;\n import io.cdap.http.AbstractHttpHandler;\n import io.cdap.http.HttpResponder;\n import io.netty.buffer.ByteBufInputStream;\n@@ -63,11 +67,18 @@\n public class ProfileHttpHandler extends AbstractHttpHandler {\n   private static final Gson GSON = new GsonBuilder().create();\n \n+  private final AuthorizationEnforcer authorizationEnforcer;\n+  private final AuthenticationContext authenticationContext;\n   private final ProfileService profileService;\n   private final ProvisioningService provisioningService;\n \n   @Inject\n-  public ProfileHttpHandler(ProfileService profileService, ProvisioningService provisioningService) {\n+  public ProfileHttpHandler(AuthorizationEnforcer authorizationEnforcer,\n+                            AuthenticationContext authenticationContext,\n+                            ProfileService profileService,\n+                            ProvisioningService provisioningService) {\n+    this.authorizationEnforcer = authorizationEnforcer;\n+    this.authenticationContext = authenticationContext;\n     this.profileService = profileService;\n     this.provisioningService = provisioningService;\n   }\n@@ -131,9 +142,9 @@ public void deleteSystemProfile(HttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles\")\n   public void getProfiles(HttpRequest request, HttpResponder responder,\n                           @PathParam(\"namespace-id\") String namespaceId,\n-                          @QueryParam(\"includeSystem\") @DefaultValue(\"false\") String includeSystem)\n-    throws BadRequestException, MethodNotAllowedException {\n+                          @QueryParam(\"includeSystem\") @DefaultValue(\"false\") String includeSystem) throws Exception {\n     NamespaceId namespace = getValidatedNamespace(namespaceId);\n+    AuthorizationUtil.ensureAccess(namespace, authorizationEnforcer, authenticationContext.getPrincipal());\n     boolean include = Boolean.valueOf(includeSystem);\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(profileService.getProfiles(namespace, include)));\n   }\n@@ -145,9 +156,9 @@ public void getProfiles(HttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles/{profile-name}\")\n   public void getProfile(HttpRequest request, HttpResponder responder,\n                          @PathParam(\"namespace-id\") String namespaceId,\n-                         @PathParam(\"profile-name\") String profileName)\n-    throws NotFoundException, BadRequestException, MethodNotAllowedException {\n+                         @PathParam(\"profile-name\") String profileName) throws Exception {\n     ProfileId profileId = getValidatedProfile(namespaceId, profileName);\n+    AuthorizationUtil.ensureAccess(profileId, authorizationEnforcer, authenticationContext.getPrincipal());\n     responder.sendJson(HttpResponseStatus.OK, GSON.toJson(profileService.getProfile(profileId)));\n   }\n \n@@ -158,9 +169,9 @@ public void getProfile(HttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles/{profile-name}\")\n   public void writeProfile(FullHttpRequest request, HttpResponder responder,\n                            @PathParam(\"namespace-id\") String namespaceId,\n-                           @PathParam(\"profile-name\") String profileName)\n-    throws BadRequestException, IOException, MethodNotAllowedException {\n+                           @PathParam(\"profile-name\") String profileName) throws Exception {\n     ProfileId profileId = getValidatedProfile(namespaceId, profileName);\n+    authorizationEnforcer.enforce(profileId, authenticationContext.getPrincipal(), Action.EXECUTE);\n     writeProfile(profileId, request);\n     responder.sendStatus(HttpResponseStatus.OK);\n   }\n@@ -174,8 +185,9 @@ public void writeProfile(FullHttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles/{profile-name}\")\n   public void deleteProfile(HttpRequest request, HttpResponder responder,\n                             @PathParam(\"namespace-id\") String namespaceId,\n-                            @PathParam(\"profile-name\") String profileName)\n-    throws BadRequestException, MethodNotAllowedException, NotFoundException, ProfileConflictException {\n+                            @PathParam(\"profile-name\") String profileName) throws Exception {\n+    authorizationEnforcer.enforce(getValidatedNamespace(namespaceId),\n+                                  authenticationContext.getPrincipal(), Action.EXECUTE);\n     profileService.deleteProfile(getValidatedProfile(namespaceId, profileName));\n     responder.sendStatus(HttpResponseStatus.OK);\n   }\n@@ -184,10 +196,11 @@ public void deleteProfile(HttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles/{profile-name}/status\")\n   public void getProfileStatus(HttpRequest request, HttpResponder responder,\n                                @PathParam(\"namespace-id\") String namespaceId,\n-                               @PathParam(\"profile-name\") String profileName)\n-    throws NotFoundException, BadRequestException, MethodNotAllowedException {\n-    responder.sendJson(HttpResponseStatus.OK,\n-      GSON.toJson(profileService.getProfile(getValidatedProfile(namespaceId, profileName)).getStatus()));\n+                               @PathParam(\"profile-name\") String profileName) throws Exception {\n+    AuthorizationUtil.ensureAccess(getValidatedNamespace(namespaceId),\n+                                   authorizationEnforcer, authenticationContext.getPrincipal());\n+    ProfileId profileId = getValidatedProfile(namespaceId, profileName);\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(profileService.getProfile(profileId).getStatus()));\n   }\n \n   /**\n@@ -198,9 +211,10 @@ public void getProfileStatus(HttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles/{profile-name}/disable\")\n   public void disableProfile(HttpRequest request, HttpResponder responder,\n                              @PathParam(\"namespace-id\") String namespaceId,\n-                             @PathParam(\"profile-name\") String profileName)\n-    throws NotFoundException, ProfileConflictException, MethodNotAllowedException, BadRequestException {\n-          profileService.disableProfile(getValidatedProfile(namespaceId, profileName));\n+                             @PathParam(\"profile-name\") String profileName) throws Exception {\n+    authorizationEnforcer.enforce(getValidatedNamespace(namespaceId),\n+                                  authenticationContext.getPrincipal(), Action.ADMIN);\n+    profileService.disableProfile(getValidatedProfile(namespaceId, profileName));\n     responder.sendStatus(HttpResponseStatus.OK);\n   }\n \n@@ -211,9 +225,10 @@ public void disableProfile(HttpRequest request, HttpResponder responder,\n   @Path(\"/namespaces/{namespace-id}/profiles/{profile-name}/enable\")\n   public void enableProfile(HttpRequest request, HttpResponder responder,\n                             @PathParam(\"namespace-id\") String namespaceId,\n-                            @PathParam(\"profile-name\") String profileName)\n-    throws NotFoundException, ProfileConflictException, BadRequestException, MethodNotAllowedException {\n-    profileService.enableProfile(getValidatedProfile(namespaceId, profileName));\n+                            @PathParam(\"profile-name\") String profileName) throws Exception {\n+    ProfileId profileId = getValidatedProfile(namespaceId, profileName);\n+    authorizationEnforcer.enforce(profileId, authenticationContext.getPrincipal(), Action.EXECUTE);\n+    profileService.enableProfile(profileId);\n     responder.sendStatus(HttpResponseStatus.OK);\n   }\n "
  }
]
