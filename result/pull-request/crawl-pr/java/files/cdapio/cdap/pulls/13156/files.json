[
  {
    "sha": "3837e421b5aa07f739b5327d401080166e7e72a9",
    "filename": "cdap-unit-test/src/test/java/io/cdap/cdap/test/app/AppWithCustomTx.java",
    "status": "modified",
    "additions": 24,
    "deletions": 1,
    "changes": 25,
    "blob_url": "https://github.com/cdapio/cdap/blob/b5f8ac761e51615730aefb56db68a412f687eb91/cdap-unit-test/src/test/java/io/cdap/cdap/test/app/AppWithCustomTx.java",
    "raw_url": "https://github.com/cdapio/cdap/raw/b5f8ac761e51615730aefb56db68a412f687eb91/cdap-unit-test/src/test/java/io/cdap/cdap/test/app/AppWithCustomTx.java",
    "contents_url": "https://api.github.com/repos/cdapio/cdap/contents/cdap-unit-test/src/test/java/io/cdap/cdap/test/app/AppWithCustomTx.java?ref=b5f8ac761e51615730aefb56db68a412f687eb91",
    "patch": "@@ -63,8 +63,11 @@\n \n import java.io.DataInput;\n import java.io.DataOutput;\n+import java.io.File;\n import java.io.IOException;\n+import java.net.HttpURLConnection;\n import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n import java.util.Collections;\n import java.util.List;\n import javax.ws.rs.PUT;\n@@ -83,6 +86,7 @@\n   private static final Logger LOG = LoggerFactory.getLogger(AppWithCustomTx.class);\n \n   private static final String NAME = \"AppWithCustomTx\";\n+  static final String DONE_DIR = \"done.dir\";\n   static final String CAPTURE = \"capture\";\n   static final String DEFAULT = \"default\";\n   static final String FAILED = \"failed\";\n@@ -397,6 +401,7 @@ public void onReceived(ByteBuffer chunk, Transactional transactional) throws Exc\n         public void onError(HttpServiceResponder responder, Throwable failureCause) {\n           recordTransaction(getContext(), CONSUMER_TX, ONERROR);\n           attemptNestedTransaction(getContext(), CONSUMER_TX, ONERROR_NEST);\n+          responder.sendStatus(HttpURLConnection.HTTP_INTERNAL_ERROR);\n         }\n \n         @Override\n@@ -427,12 +432,20 @@ public ByteBuffer nextChunk(Transactional transactional) throws Exception {\n             public void onFinish() throws Exception {\n               recordTransaction(getContext(), PRODUCER_TX, DESTROY);\n               attemptNestedTransaction(getContext(), PRODUCER_TX, DESTROY_NEST);\n+              File doneFile = new File(getContext().getRuntimeArguments().get(DONE_DIR), \"tx\" + body);\n+              doneFile.createNewFile();\n             }\n \n             @Override\n             public void onError(Throwable failureCause) {\n               recordTransaction(getContext(), PRODUCER_TX, ONERROR);\n               attemptNestedTransaction(getContext(), PRODUCER_TX, ONERROR_NEST);\n+              File doneFile = new File(getContext().getRuntimeArguments().get(DONE_DIR), \"tx\" + body);\n+              try {\n+                doneFile.createNewFile();\n+              } catch (IOException e) {\n+                LOG.error(\"Failed to create file {}\", doneFile.getAbsolutePath());\n+              }\n             }\n           }, ContentType.TEXT_PLAIN.getMimeType());\n         }\n@@ -465,7 +478,6 @@ public void destroy() {\n     @TransactionPolicy(TransactionControl.EXPLICIT)\n     public HttpContentConsumer notx(HttpServiceRequest request, HttpServiceResponder responder)\n       throws TransactionFailureException {\n-\n       recordTransaction(getContext(), HANDLER_NOTX, RUNTIME);\n       executeRecordTransaction(getContext(), HANDLER_NOTX, RUNTIME_TX, TIMEOUT_HANDLER_RUNTIME);\n       executeAttemptNestedTransaction(getContext(), HANDLER_NOTX, RUNTIME_NEST);\n@@ -495,6 +507,7 @@ public void onError(HttpServiceResponder responder, Throwable failureCause) {\n           recordTransaction(getContext(), CONSUMER_NOTX, ONERROR);\n           executeRecordTransaction(getContext(), CONSUMER_NOTX, ONERROR_TX, TIMEOUT_CONSUMER_ERROR);\n           executeAttemptNestedTransaction(getContext(), CONSUMER_NOTX, ONERROR_NEST);\n+          responder.sendStatus(HttpURLConnection.HTTP_INTERNAL_ERROR);\n         }\n \n         @Override\n@@ -528,6 +541,10 @@ public void onFinish() throws Exception {\n               recordTransaction(getContext(), PRODUCER_NOTX, DESTROY);\n               executeRecordTransaction(getContext(), PRODUCER_NOTX, DESTROY_TX, TIMEOUT_PRODUCER_DESTROY);\n               executeAttemptNestedTransaction(getContext(), PRODUCER_NOTX, DESTROY_NEST);\n+              // onFinish and onError methods are called on the listener once the response is sent completely.\n+              // We want caller to wait till these callbacks finish.\n+              File doneFile = new File(getContext().getRuntimeArguments().get(DONE_DIR), \"notx\" + body);\n+              doneFile.createNewFile();\n             }\n \n             @Override\n@@ -536,6 +553,12 @@ public void onError(Throwable failureCause) {\n               recordTransaction(getContext(), PRODUCER_NOTX, ONERROR);\n               executeRecordTransaction(getContext(), PRODUCER_NOTX, ONERROR_TX, TIMEOUT_PRODUCER_ERROR);\n               executeAttemptNestedTransaction(getContext(), PRODUCER_NOTX, ONERROR_NEST);\n+              File doneFile = new File(getContext().getRuntimeArguments().get(DONE_DIR), \"notx\" + body);\n+              try {\n+                doneFile.createNewFile();\n+              } catch (IOException e) {\n+                LOG.error(\"Failed to create file {}\", doneFile.getAbsolutePath());\n+              }\n             }\n           }, ContentType.TEXT_PLAIN.getMimeType());\n         }"
  },
  {
    "sha": "f69ddc1b2c0e911da5c574dc414165d303d98b7c",
    "filename": "cdap-unit-test/src/test/java/io/cdap/cdap/test/app/TestFrameworkTestRun.java",
    "status": "modified",
    "additions": 28,
    "deletions": 12,
    "changes": 40,
    "blob_url": "https://github.com/cdapio/cdap/blob/b5f8ac761e51615730aefb56db68a412f687eb91/cdap-unit-test/src/test/java/io/cdap/cdap/test/app/TestFrameworkTestRun.java",
    "raw_url": "https://github.com/cdapio/cdap/raw/b5f8ac761e51615730aefb56db68a412f687eb91/cdap-unit-test/src/test/java/io/cdap/cdap/test/app/TestFrameworkTestRun.java",
    "contents_url": "https://api.github.com/repos/cdapio/cdap/contents/cdap-unit-test/src/test/java/io/cdap/cdap/test/app/TestFrameworkTestRun.java?ref=b5f8ac761e51615730aefb56db68a412f687eb91",
    "patch": "@@ -117,10 +117,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import javax.annotation.Nullable;\n@@ -1267,8 +1269,10 @@ public void testAppWithTxTimeout() throws Exception {\n                     () -> appManager.getServiceManager(AppWithCustomTx.SERVICE)\n                       .getHistory(ProgramRunStatus.FAILED).size(),\n                     30L, TimeUnit.SECONDS, 1, TimeUnit.SECONDS);\n-      ServiceManager serviceManager = appManager.getServiceManager(AppWithCustomTx.SERVICE)\n-        .start(txTimeoutArguments(txDefaulTimeoutService));\n+      String tmpDir = TMP_FOLDER.newFolder().getAbsolutePath();\n+      Map<String, String> serviceArgs = new HashMap<>(txTimeoutArguments(txDefaulTimeoutService));\n+      serviceArgs.put(\"done.dir\", tmpDir);\n+      ServiceManager serviceManager = appManager.getServiceManager(AppWithCustomTx.SERVICE).start(serviceArgs);\n       WorkerManager notxWorkerManager = appManager.getWorkerManager(AppWithCustomTx.WORKER_NOTX)\n         .start(txTimeoutArguments(txDefaulTimeoutWorker));\n       WorkerManager txWorkerManager = appManager.getWorkerManager(AppWithCustomTx.WORKER_TX)\n@@ -1288,14 +1292,18 @@ public void testAppWithTxTimeout() throws Exception {\n         .start(txTimeoutArguments(txDefaulTimeoutSpark));\n \n       serviceManager.waitForRun(ProgramRunStatus.RUNNING, 10, TimeUnit.SECONDS);\n-      callServicePut(serviceManager.getServiceURL(), \"tx\", \"hello\");\n+\n+      callServicePut(serviceManager.getServiceURL(), \"tx\", \"hello\", 200, new File(tmpDir, \"txhello\").getAbsolutePath());\n       callServicePut(serviceManager.getServiceURL(), \"tx\", AppWithCustomTx.FAIL_PRODUCER, 200);\n       callServicePut(serviceManager.getServiceURL(), \"tx\", AppWithCustomTx.FAIL_CONSUMER, 500);\n-      callServicePut(serviceManager.getServiceURL(), \"notx\", \"hello\");\n+      callServicePut(serviceManager.getServiceURL(), \"notx\", \"hello\", 200,\n+                     new File(tmpDir, \"notxhello\").getAbsolutePath());\n       callServicePut(serviceManager.getServiceURL(), \"notx\", AppWithCustomTx.FAIL_PRODUCER, 200);\n       callServicePut(serviceManager.getServiceURL(), \"notx\", AppWithCustomTx.FAIL_CONSUMER, 500);\n+\n+\n       serviceManager.stop();\n-      serviceManager.waitForRun(ProgramRunStatus.KILLED, 10, TimeUnit.SECONDS);\n+      serviceManager.waitForStopped(10, TimeUnit.SECONDS);\n \n       txMRManager.waitForRun(ProgramRunStatus.FAILED, 10L, TimeUnit.SECONDS);\n       notxMRManager.waitForRun(ProgramRunStatus.FAILED, 10L, TimeUnit.SECONDS);\n@@ -1483,11 +1491,8 @@ public void testAppWithTxTimeout() throws Exception {\n         String row = (String) writeToValidate[0];\n         String column = (String) writeToValidate[1];\n         String expectedValue = writeToValidate[2] == null ? null : String.valueOf(writeToValidate[2]);\n-        Tasks.waitFor(expectedValue,\n-                     () -> t.get(new Get(row, column)).getString(column),\n-                     30L, TimeUnit.SECONDS, 1, TimeUnit.SECONDS,\n-                      String.format(\"Error getting value for %s.%s. Expected: %s, Got: %s\",\n-                                    row, column, expectedValue, t.get(new Get(row, column)).getString(column)));\n+        Assert.assertEquals(\"Error for \" + row + \".\" + column,\n+                            expectedValue, t.get(new Get(row, column)).getString(column));\n       }\n \n     } finally {\n@@ -2096,12 +2101,18 @@ private String callServiceGet(URL serviceURL, String path) throws IOException {\n     }\n   }\n \n-  private String callServicePut(URL serviceURL, String path, String body) throws IOException {\n+  private String callServicePut(URL serviceURL, String path, String body) throws Exception {\n     return callServicePut(serviceURL, path, body, 200);\n   }\n \n   @Nullable\n-  private String callServicePut(URL serviceURL, String path, String body, Integer expectedStatus) throws IOException {\n+  private String callServicePut(URL serviceURL, String path, String body, Integer expectedStatus) throws Exception {\n+    return callServicePut(serviceURL, path, body, expectedStatus, null);\n+  }\n+\n+  @Nullable\n+  private String callServicePut(URL serviceURL, String path, String body, Integer expectedStatus,\n+                                String doneFilePath) throws Exception {\n     HttpURLConnection connection = (HttpURLConnection) new URL(serviceURL.toString() + path).openConnection();\n     try {\n       connection.setDoOutput(true);\n@@ -2118,6 +2129,11 @@ private String callServicePut(URL serviceURL, String path, String body, Integer\n         return new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8)).readLine();\n       }\n     } finally {\n+      if (doneFilePath != null) {\n+        File doneFile = new File(doneFilePath);\n+        LOG.info(\"Checking for doneFilePath: {}\", doneFilePath);\n+        Tasks.waitFor(true, doneFile::exists, 30, TimeUnit.SECONDS);\n+      }\n       connection.disconnect();\n     }\n   }"
  }
]
